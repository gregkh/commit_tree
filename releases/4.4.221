commit 54b0e1aed69edd904ba7e2e6516d37750c29beec
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat May 2 17:20:55 2020 +0200

    Linux 4.4.221

commit 80e2ed6dbaa4ca740314e242a634ad6846d054cf
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Apr 27 10:26:22 2020 -0400

    propagate_one(): mnt_set_mountpoint() needs mount_lock
    
    commit b0d3869ce9eeacbb1bbd541909beeef4126426d5 upstream.
    
    ... to protect the modification of mp->m_count done by it.  Most of
    the places that modify that thing also have namespace_lock held,
    but not all of them can do so, so we really need mount_lock here.
    Kudos to Piotr Krysiuk <piotras@gmail.com>, who'd spotted a related
    bug in pivot_root(2) (fixed unnoticed in 5.3); search for other
    similar turds has caught out this one.
    
    Cc: stable@kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cdaf6782b517932eaee74c199b79ffc4674838c
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri May 10 22:06:38 2019 -0400

    ext4: unsigned int compared against zero
    
    commit fbbbbd2f28aec991f3fbc248df211550fbdfd58c upstream.
    
    There are two cases where u32 variables n and err are being checked
    for less than zero error values, the checks is always false because
    the variables are not signed. Fix this by making the variables ints.
    
    Addresses-Coverity: ("Unsigned compared against 0")
    Fixes: 345c0dbf3a30 ("ext4: protect journal inode's blocks using block_validity")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 474db4dfd942780673538b4b032dccb6b3bcfbd2
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed May 15 00:51:19 2019 -0400

    ext4: fix block validity checks for journal inodes using indirect blocks
    
    commit 170417c8c7bb2cbbdd949bf5c443c0c8f24a203b upstream.
    
    Commit 345c0dbf3a30 ("ext4: protect journal inode's blocks using
    block_validity") failed to add an exception for the journal inode in
    ext4_check_blockref(), which is the function used by ext4_get_branch()
    for indirect blocks.  This caused attempts to read from the ext3-style
    journals to fail with:
    
    [  848.968550] EXT4-fs error (device sdb7): ext4_get_branch:171: inode #8: block 30343695: comm jbd2/sdb7-8: invalid block
    
    Fix this by adding the missing exception check.
    
    Fixes: 345c0dbf3a30 ("ext4: protect journal inode's blocks using block_validity")
    Reported-by: Arthur Marsh <arthur.marsh@internode.on.net>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 571fa68cacdf5fa70a6fdb71bda051f822d3cfb6
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed May 22 10:27:01 2019 -0400

    ext4: don't perform block validity checks on the journal inode
    
    commit 0a944e8a6c66ca04c7afbaa17e22bf208a8b37f0 upstream.
    
    Since the journal inode is already checked when we added it to the
    block validity's system zone, if we check it again, we'll just trigger
    a failure.
    
    This was causing failures like this:
    
    [   53.897001] EXT4-fs error (device sda): ext4_find_extent:909: inode
    #8: comm jbd2/sda-8: pblk 121667583 bad header/extent: invalid extent entries - magic f30a, entries 8, max 340(340), depth 0(0)
    [   53.931430] jbd2_journal_bmap: journal block not found at offset 49 on sda-8
    [   53.938480] Aborting journal on device sda-8.
    
    ... but only if the system was under enough memory pressure that
    logical->physical mapping for the journal inode gets pushed out of the
    extent cache.  (This is why it wasn't noticed earlier.)
    
    Fixes: 345c0dbf3a30 ("ext4: protect journal inode's blocks using block_validity")
    Reported-by: Dan Rue <dan.rue@linaro.org>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7eff961ca9f364be255d279346517ba0158ec8e3
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Tue Apr 9 23:37:08 2019 -0400

    ext4: protect journal inode's blocks using block_validity
    
    commit 345c0dbf3a30872d9b204db96b5857cd00808cae upstream.
    
    Add the blocks which belong to the journal inode to block_validity's
    system zone so attempts to deallocate or overwrite the journal due a
    corrupted file system where the journal blocks are also claimed by
    another inode.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=202879
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23abe13a13146f02f627b17cf5299ac0c6b0d14b
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 19 12:29:13 2018 -0500

    ext4: avoid declaring fs inconsistent due to invalid file handles
    
    commit 8a363970d1dc38c4ec4ad575c862f776f468d057 upstream.
    
    If we receive a file handle, either from NFS or open_by_handle_at(2),
    and it points at an inode which has not been initialized, and the file
    system has metadata checksums enabled, we shouldn't try to get the
    inode, discover the checksum is invalid, and then declare the file
    system as being inconsistent.
    
    This can be reproduced by creating a test file system via "mke2fs -t
    ext4 -O metadata_csum /tmp/foo.img 8M", mounting it, cd'ing into that
    directory, and then running the following program.
    
    #define _GNU_SOURCE
    #include <fcntl.h>
    
    struct handle {
            struct file_handle fh;
            unsigned char fid[MAX_HANDLE_SZ];
    };
    
    int main(int argc, char **argv)
    {
            struct handle h = {{8, 1 }, { 12, }};
    
            open_by_handle_at(AT_FDCWD, &h.fh, O_RDONLY);
            return 0;
    }
    
    Google-Bug-Id: 120690101
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 266e8fb92d47be03e39203c6eb4408d053b37eaf
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Apr 13 23:33:05 2020 -0400

    ext4: convert BUG_ON's to WARN_ON's in mballoc.c
    
    [ Upstream commit 907ea529fc4c3296701d2bfc8b831dd2a8121a34 ]
    
    If the in-core buddy bitmap gets corrupted (or out of sync with the
    block bitmap), issue a WARN_ON and try to recover.  In most cases this
    involves skipping trying to allocate out of a particular block group.
    We can end up declaring the file system corrupted, which is fair,
    since the file system probably should be checked before we proceed any
    further.
    
    Link: https://lore.kernel.org/r/20200414035649.293164-1-tytso@mit.edu
    Google-Bug-Id: 34811296
    Google-Bug-Id: 34639169
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10494cb4f0745f0affd0081d010dce16c6c40311
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Mar 26 09:03:58 2020 +0100

    xen/xenbus: ensure xenbus_map_ring_valloc() returns proper grant status
    
    [ Upstream commit 6b51fd3f65a22e3d1471b18a1d56247e246edd46 ]
    
    xenbus_map_ring_valloc() maps a ring page and returns the status of the
    used grant (0 meaning success).
    
    There are Xen hypervisors which might return the value 1 for the status
    of a failed grant mapping due to a bug. Some callers of
    xenbus_map_ring_valloc() test for errors by testing the returned status
    to be less than zero, resulting in no error detected and crashing later
    due to a not available ring page.
    
    Set the return value of xenbus_map_ring_valloc() to GNTST_general_error
    in case the grant status reported by Xen is greater than zero.
    
    This is part of XSA-316.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Link: https://lore.kernel.org/r/20200326080358.1018-1-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d79a2ba92dfbf61c748714fa68b05b2b60c0e067
Author: Bodo Stroesser <bstroesser@ts.fujitsu.com>
Date:   Wed Apr 8 15:26:10 2020 +0200

    scsi: target: fix PR IN / READ FULL STATUS for FC
    
    [ Upstream commit 8fed04eb79a74cbf471dfaa755900a51b37273ab ]
    
    Creation of the response to READ FULL STATUS fails for FC based
    reservations. Reason is the too high loop limit (< 24) in
    fc_get_pr_transport_id(). The string representation of FC WWPN is 23 chars
    long only ("11:22:33:44:55:66:77:88"). So when i is 23, the loop body is
    executed a last time for the ending '\0' of the string and thus hex2bin()
    reports an error.
    
    Link: https://lore.kernel.org/r/20200408132610.14623-3-bstroesser@ts.fujitsu.com
    Signed-off-by: Bodo Stroesser <bstroesser@ts.fujitsu.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d581359b0f6ee230ef342d300271f8257e81921
Author: Luke Nelson <lukenels@cs.washington.edu>
Date:   Sat Apr 18 16:26:53 2020 -0700

    bpf, x86: Fix encoding for lower 8-bit registers in BPF_STX BPF_B
    
    [ Upstream commit aee194b14dd2b2bde6252b3acf57d36dccfc743a ]
    
    This patch fixes an encoding bug in emit_stx for BPF_B when the source
    register is BPF_REG_FP.
    
    The current implementation for BPF_STX BPF_B in emit_stx saves one REX
    byte when the operands can be encoded using Mod-R/M alone. The lower 8
    bits of registers %rax, %rbx, %rcx, and %rdx can be accessed without using
    a REX prefix via %al, %bl, %cl, and %dl, respectively. Other registers,
    (e.g., %rsi, %rdi, %rbp, %rsp) require a REX prefix to use their 8-bit
    equivalents (%sil, %dil, %bpl, %spl).
    
    The current code checks if the source for BPF_STX BPF_B is BPF_REG_1
    or BPF_REG_2 (which map to %rdi and %rsi), in which case it emits the
    required REX prefix. However, it misses the case when the source is
    BPF_REG_FP (mapped to %rbp).
    
    The result is that BPF_STX BPF_B with BPF_REG_FP as the source operand
    will read from register %ch instead of the correct %bpl. This patch fixes
    the problem by fixing and refactoring the check on which registers need
    the extra REX byte. Since no BPF registers map to %rsp, there is no need
    to handle %spl.
    
    Fixes: 622582786c9e0 ("net: filter: x86: internal BPF JIT")
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Luke Nelson <luke.r.nels@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200418232655.23870-1-luke.r.nels@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cc0ce6d61e5021d85f03a6c846ff3dea4115265
Author: Ian Rogers <irogers@google.com>
Date:   Fri Apr 17 11:28:42 2020 -0700

    perf/core: fix parent pid/tid in task exit events
    
    commit f3bed55e850926614b9898fe982f66d2541a36a5 upstream.
    
    Current logic yields the child task as the parent.
    
    Before:
    $ perf record bash -c "perf list > /dev/null"
    $ perf script -D |grep 'FORK\|EXIT'
    4387036190981094 0x5a70 [0x30]: PERF_RECORD_FORK(10472:10472):(10470:10470)
    4387036606207580 0xf050 [0x30]: PERF_RECORD_EXIT(10472:10472):(10472:10472)
    4387036607103839 0x17150 [0x30]: PERF_RECORD_EXIT(10470:10470):(10470:10470)
                                                       ^
      Note the repeated values here -------------------/
    
    After:
    383281514043 0x9d8 [0x30]: PERF_RECORD_FORK(2268:2268):(2266:2266)
    383442003996 0x2180 [0x30]: PERF_RECORD_EXIT(2268:2268):(2266:2266)
    383451297778 0xb70 [0x30]: PERF_RECORD_EXIT(2266:2266):(2265:2265)
    
    Fixes: 94d5d1b2d891 ("perf_counter: Report the cloning task as parent on perf_counter_fork()")
    Reported-by: KP Singh <kpsingh@google.com>
    Signed-off-by: Ian Rogers <irogers@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200417182842.12522-1-irogers@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 641767a6eff3bc9d6611a33d33c917aa9b19ca0a
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 14 12:27:08 2020 -0300

    net/cxgb4: Check the return from t4_query_params properly
    
    commit c799fca8baf18d1bbbbad6c3b736eefbde8bdb90 upstream.
    
    Positive return values are also failures that don't set val,
    although this probably can't happen. Fixes gcc 10 warning:
    
    drivers/net/ethernet/chelsio/cxgb4/t4_hw.c: In function ‘t4_phy_fw_ver’:
    drivers/net/ethernet/chelsio/cxgb4/t4_hw.c:3747:14: warning: ‘val’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     3747 |  *phy_fw_ver = val;
    
    Fixes: 01b6961410b7 ("cxgb4: Add PHY firmware support for T420-BT cards")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 256a901c81f69d7e4e8c967f205b0f3bd9159f70
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Sat Mar 28 18:12:46 2020 -0700

    usb: gadget: udc: bdc: Remove unnecessary NULL checks in bdc_req_complete
    
    commit 09b04abb70f096333bef6bc95fa600b662e7ee13 upstream.
    
    When building with Clang + -Wtautological-pointer-compare:
    
    drivers/usb/gadget/udc/bdc/bdc_ep.c:543:28: warning: comparison of
    address of 'req->queue' equal to a null pointer is always false
    [-Wtautological-pointer-compare]
            if (req == NULL  || &req->queue == NULL || &req->usb_req == NULL)
                                 ~~~~~^~~~~    ~~~~
    drivers/usb/gadget/udc/bdc/bdc_ep.c:543:51: warning: comparison of
    address of 'req->usb_req' equal to a null pointer is always false
    [-Wtautological-pointer-compare]
            if (req == NULL  || &req->queue == NULL || &req->usb_req == NULL)
                                                        ~~~~~^~~~~~~    ~~~~
    2 warnings generated.
    
    As it notes, these statements will always evaluate to false so remove
    them.
    
    Fixes: efed421a94e6 ("usb: gadget: Add UDC driver for Broadcom USB3.0 device controller IP BDC")
    Link: https://github.com/ClangBuiltLinux/linux/issues/749
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8660cae0b950dc4d9ab4834d67064d7754677403
Author: Liu Jian <liujian56@huawei.com>
Date:   Sun Mar 3 15:04:18 2019 +0800

    mtd: cfi: fix deadloop in cfi_cmdset_0002.c do_write_buffer
    
    commit d9b8a67b3b95a5c5aae6422b8113adc1c2485f2b upstream.
    
    In function do_write_buffer(), in the for loop, there is a case
    chip_ready() returns 1 while chip_good() returns 0, so it never
    break the loop.
    To fix this, chip_good() is enough and it should timeout if it stay
    bad for a while.
    
    Fixes: dfeae1073583("mtd: cfi_cmdset_0002: Change write buffer to check correct value")
    Signed-off-by: Yi Huaijie <yihuaijie@huawei.com>
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Reviewed-by: Tokunori Ikegami <ikegami_to@yahoo.co.jp>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2a2ac28ef55f2cc88e9ff541e37d3f67446397a
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Nov 9 15:52:16 2018 +0100

    fuse: fix possibly missed wake-up after abort
    
    commit 2d84a2d19b6150c6dbac1e6ebad9c82e4c123772 upstream.
    
    In current fuse_drop_waiting() implementation it's possible that
    fuse_wait_aborted() will not be woken up in the unlikely case that
    fuse_abort_conn() + fuse_wait_aborted() runs in between checking
    fc->connected and calling atomic_dec(&fc->num_waiting).
    
    Do the atomic_dec_and_test() unconditionally, which also provides the
    necessary barrier against reordering with the fc->connected check.
    
    The explicit smp_mb() in fuse_wait_aborted() is not actually needed, since
    the spin_unlock() in fuse_abort_conn() provides the necessary RELEASE
    barrier after resetting fc->connected.  However, this is not a performance
    sensitive path, and adding the explicit barrier makes it easier to
    document.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: b8f95e5d13f5 ("fuse: umount should wait for all requests")
    Cc: <stable@vger.kernel.org> #v4.19
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff82cd319a9244d230f291fa8613ed2f098d18b3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 26 20:56:07 2017 +0800

    sctp: use right member as the param of list_for_each_entry
    
    commit a8dd397903a6e57157f6265911f7d35681364427 upstream.
    
    Commit d04adf1b3551 ("sctp: reset owner sk for data chunks on out queues
    when migrating a sock") made a mistake that using 'list' as the param of
    list_for_each_entry to traverse the retransmit, sacked and abandoned
    queues, while chunks are using 'transmitted_list' to link into these
    queues.
    
    It could cause NULL dereference panic if there are chunks in any of these
    queues when peeling off one asoc.
    
    So use the chunk member 'transmitted_list' instead in this patch.
    
    Fixes: d04adf1b3551 ("sctp: reset owner sk for data chunks on out queues when migrating a sock")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a706d3fa9cd17c37ff25df8476b904a946897e18
Author: Clement Leger <cleger@kalray.eu>
Date:   Fri Oct 4 09:37:36 2019 +0200

    remoteproc: Fix wrong rvring index computation
    
    commit 00a0eec59ddbb1ce966b19097d8a8d2f777e726a upstream.
    
    Index of rvring is computed using pointer arithmetic. However, since
    rvring->rvdev->vring is the base of the vring array, computation
    of rvring idx should be reversed. It previously lead to writing at negative
    indices in the resource table.
    
    Signed-off-by: Clement Leger <cleger@kalray.eu>
    Link: https://lore.kernel.org/r/20191004073736.8327-1-cleger@kalray.eu
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9cc048e97d4a7c397c70419b167f910fd75ac49
Author: Udipto Goswami <ugoswami@codeaurora.org>
Date:   Thu Apr 2 10:15:21 2020 +0530

    usb: f_fs: Clear OS Extended descriptor counts to zero in ffs_data_reset()
    
    commit 1c2e54fbf1da5e5445a0ab132c862b02ccd8d230 upstream.
    
    For userspace functions using OS Descriptors, if a function also supplies
    Extended Property descriptors currently the counts and lengths stored in
    the ms_os_descs_ext_prop_{count,name_len,data_len} variables are not
    getting reset to 0 during an unbind or when the epfiles are closed. If
    the same function is re-bound and the descriptors are re-written, this
    results in those count/length variables to monotonically increase
    causing the VLA allocation in _ffs_func_bind() to grow larger and larger
    at each bind/unbind cycle and eventually fail to allocate.
    
    Fix this by clearing the ms_os_descs_ext_prop count & lengths to 0 in
    ffs_data_reset().
    
    Fixes: f0175ab51993 ("usb: gadget: f_fs: OS descriptors support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Udipto Goswami <ugoswami@codeaurora.org>
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    Reviewed-by: Manu Gautam <mgautam@codeaurora.org>
    Link: https://lore.kernel.org/r/20200402044521.9312-1-sallenki@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7461a68199441b25145a9772bec9b7d60d018ac
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:17:50 2020 +0200

    UAS: fix deadlock in error handling and PM flushing work
    
    commit f6cc6093a729ede1ff5658b493237c42b82ba107 upstream.
    
    A SCSI error handler and block runtime PM must not allocate
    memory with GFP_KERNEL. Furthermore they must not wait for
    tasks allocating memory with GFP_KERNEL.
    That means that they cannot share a workqueue with arbitrary tasks.
    
    Fix this for UAS using a private workqueue.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Fixes: f9dc024a2da1f ("uas: pre_reset and suspend: Fix a few races")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200415141750.811-2-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae0633bb2f35048f874a2b5176c23f6397b4c4a
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:17:49 2020 +0200

    UAS: no use logging any details in case of ENODEV
    
    commit 5963dec98dc52d52476390485f07a29c30c6a582 upstream.
    
    Once a device is gone, the internal state does not matter anymore.
    There is no need to spam the logs.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: 326349f824619 ("uas: add dead request list")
    Link: https://lore.kernel.org/r/20200415141750.811-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bff57f35067ceefcb30424106301bffc9b5d67e9
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Tue Apr 14 11:39:23 2020 +0100

    staging: vt6656: Power save stop wake_up_count wrap around.
    
    commit ea81c3486442f4643fc9825a2bb1b430b829bccd upstream.
    
    conf.listen_interval can sometimes be zero causing wake_up_count
    to wrap around up to many beacons too late causing
    CTRL-EVENT-BEACON-LOSS as in.
    
    wpa_supplicant[795]: message repeated 45 times: [..CTRL-EVENT-BEACON-LOSS ]
    
    Fixes: 43c93d9bf5e2 ("staging: vt6656: implement power saving code.")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/fce47bb5-7ca6-7671-5094-5c6107302f2b@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e130657b892b3d8c9f297772a553d9a2c94c1a2
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Sat Apr 18 17:43:24 2020 +0100

    staging: vt6656: Fix drivers TBTT timing counter.
    
    commit 09057742af98a39ebffa27fac4f889dc873132de upstream.
    
    The drivers TBTT counter is not synchronized with mac80211 timestamp.
    
    Reorder the functions and use vnt_update_next_tbtt to do the final
    synchronize.
    
    Fixes: c15158797df6 ("staging: vt6656: implement TSF counter")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/375d0b25-e8bc-c8f7-9b10-6cc705d486ee@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae2a49b2ef05ac9c2f2c2fadf6de08d97bfaf75d
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:44:16 2020 +0800

    staging: comedi: Fix comedi_device refcnt leak in comedi_open
    
    commit 332e0e17ad49e084b7db670ef43b5eb59abd9e34 upstream.
    
    comedi_open() invokes comedi_dev_get_from_minor(), which returns a
    reference of the COMEDI device to "dev" with increased refcount.
    
    When comedi_open() returns, "dev" becomes invalid, so the refcount
    should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling path of
    comedi_open(). When "cfp" allocation is failed, the refcnt increased by
    comedi_dev_get_from_minor() is not decreased, causing a refcnt leak.
    
    Fix this issue by calling comedi_dev_put() on this error path when "cfp"
    allocation is failed.
    
    Fixes: 20f083c07565 ("staging: comedi: prepare support for per-file read and write subdevices")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/1587361459-83622-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d2c428f333bc9c9c48a87d7b54a316f5ca0ca6d
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Apr 6 15:20:15 2020 +0100

    staging: comedi: dt2815: fix writing hi byte of analog output
    
    commit ed87d33ddbcd9a1c3b5ae87995da34e6f51a862c upstream.
    
    The DT2815 analog output command is 16 bits wide, consisting of the
    12-bit sample value in bits 15 to 4, the channel number in bits 3 to 1,
    and a voltage or current selector in bit 0.  Both bytes of the 16-bit
    command need to be written in turn to a single 8-bit data register.
    However, the driver currently only writes the low 8-bits.  It is broken
    and appears to have always been broken.
    
    Electronic copies of the DT2815 User's Manual seem impossible to find
    online, but looking at the source code, a best guess for the sequence
    the driver intended to use to write the analog output command is as
    follows:
    
    1. Wait for the status register to read 0x00.
    2. Write the low byte of the command to the data register.
    3. Wait for the status register to read 0x80.
    4. Write the high byte of the command to the data register.
    
    Step 4 is missing from the driver.  Add step 4 to (hopefully) fix the
    driver.
    
    Also add a "FIXME" comment about setting bit 0 of the low byte of the
    command.  Supposedly, it is used to choose between voltage output and
    current output, but the current driver always sets it to 1.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200406142015.126982-1-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2fbbf3684fa0029c2c07db0936830bb67202ba5
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Mon Mar 23 09:19:33 2020 +0100

    ARM: imx: provide v7_cpu_resume() only on ARM_CPU_SUSPEND=y
    
    commit f1baca8896ae18e12c45552a4c4ae2086aa7e02c upstream.
    
    512a928affd5 ("ARM: imx: build v7_cpu_resume() unconditionally")
    introduced an unintended linker error for i.MX6 configurations that have
    ARM_CPU_SUSPEND=n which can happen if neither CONFIG_PM, CONFIG_CPU_IDLE,
    nor ARM_PSCI_FW are selected.
    
    Fix this by having v7_cpu_resume() compiled only when cpu_resume() it
    calls is available as well.
    
    The C declaration for the function remains unguarded to avoid future code
    inadvertently using a stub and introducing a regression to the bug the
    original commit fixed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 512a928affd5 ("ARM: imx: build v7_cpu_resume() unconditionally")
    Reported-by: Clemens Gruber <clemens.gruber@pqgruber.com>
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Tested-by: Roland Hieber <rhi@pengutronix.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f04d30031dbf6684afcc20a0ee520808ac038fa
Author: Gyeongtaek Lee <gt82.lee@samsung.com>
Date:   Sat Apr 18 13:13:20 2020 +0900

    ASoC: dapm: fixup dapm kcontrol widget
    
    commit ebf1474745b4373fdde0fcf32d9d1f369b50b212 upstream.
    
    snd_soc_dapm_kcontrol widget which is created by autodisable control
    should contain correct on_val, mask and shift because it is set when the
    widget is powered and changed value is applied on registers by following
    code in dapm_seq_run_coalesced().
    
                    mask |= w->mask << w->shift;
                    if (w->power)
                            value |= w->on_val << w->shift;
                    else
                            value |= w->off_val << w->shift;
    
    Shift on the mask in dapm_kcontrol_data_alloc() is removed to prevent
    double shift.
    And, on_val in dapm_kcontrol_set_value() is modified to get correct
    value in the dapm_seq_run_coalesced().
    
    Signed-off-by: Gyeongtaek Lee <gt82.lee@samsung.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/000001d61537$b212f620$1638e260$@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a8abec91244735f760b21f0a4ba93f62cab3483
Author: Paul Moore <paul@paul-moore.com>
Date:   Mon Apr 20 16:24:34 2020 -0400

    audit: check the length of userspace generated audit records
    
    commit 763dafc520add02a1f4639b500c509acc0ea8e5b upstream.
    
    Commit 756125289285 ("audit: always check the netlink payload length
    in audit_receive_msg()") fixed a number of missing message length
    checks, but forgot to check the length of userspace generated audit
    records.  The good news is that you need CAP_AUDIT_WRITE to submit
    userspace audit records, which is generally only given to trusted
    processes, so the impact should be limited.
    
    Cc: stable@vger.kernel.org
    Fixes: 756125289285 ("audit: always check the netlink payload length in audit_receive_msg()")
    Reported-by: syzbot+49e69b4d71a420ceda3e@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fda668f23518b3e458e9cf03d12d968852c27ac1
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:14:57 2020 -0400

    usb-storage: Add unusual_devs entry for JMicron JMS566
    
    commit 94f9c8c3c404ee1f7aaff81ad4f24aec4e34a78b upstream.
    
    Cyril Roelandt reports that his JMicron JMS566 USB-SATA bridge fails
    to handle WRITE commands with the FUA bit set, even though it claims
    to support FUA.  (Oddly enough, a later version of the same bridge,
    version 2.03 as opposed to 1.14, doesn't claim to support FUA.  Also
    oddly, the bridge _does_ support FUA when using the UAS transport
    instead of the Bulk-Only transport -- but this device was blacklisted
    for uas in commit bc3bdb12bbb3 ("usb-storage: Disable UAS on JMicron
    SATA enclosure") for apparently unrelated reasons.)
    
    This patch adds a usb-storage unusual_devs entry with the BROKEN_FUA
    flag.  This allows the bridge to work properly with usb-storage.
    
    Reported-and-tested-by: Cyril Roelandt <tipecaml@gmail.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2004221613110.11262-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7487d50325a22c0a515bc122b6a7bbdb9036af8b
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Apr 17 12:59:59 2020 +0200

    tty: rocket, avoid OOB access
    
    commit 7127d24372bf23675a36edc64d092dc7fd92ebe8 upstream.
    
    init_r_port can access pc104 array out of bounds. pc104 is a 2D array
    defined to have 4 members. Each member has 8 submembers.
    * we can have more than 4 (PCI) boards, i.e. [board] can be OOB
    * line is not modulo-ed by anything, so the first line on the second
      board can be 4, on the 3rd 12 or alike (depending on previously
      registered boards). It's zero only on the first line of the first
      board. So even [line] can be OOB, quite soon (with the 2nd registered
      board already).
    
    This code is broken for ages, so just avoid the OOB accesses and don't
    try to fix it as we would need to find out the correct line number. Use
    the default: RS232, if we are out.
    
    Generally, if anyone needs to set the interface types, a module parameter
    is past the last thing that should be used for this purpose. The
    parameters' description says it's for ISA cards anyway.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: stable <stable@vger.kernel.org>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/20200417105959.15201-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2b89121b8964d3ab6521eb8acccb0bc82b4755f
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Tue Apr 14 22:15:03 2020 +0300

    tty: hvc: fix buffer overflow during hvc_alloc().
    
    commit 9a9fc42b86c06120744555fea43fdcabe297c656 upstream.
    
    If there is a lot(more then 16) of virtio-console devices
    or virtio_console module is reloaded
    - buffers 'vtermnos' and 'cons_ops' are overflowed.
    In older kernels it overruns spinlock which leads to kernel freezing:
    https://bugzilla.redhat.com/show_bug.cgi?id=1786239
    
    To reproduce the issue, you can try simple script that
    loads/unloads module. Something like this:
    while [ 1 ]
    do
      modprobe virtio_console
      sleep 2
      modprobe -r virtio_console
      sleep 2
    done
    
    Description of problem:
    Guest get 'Call Trace' when loading module "virtio_console"
    and unloading it frequently - clearly reproduced on kernel-4.18.0:
    
    [   81.498208] ------------[ cut here ]------------
    [   81.499263] pvqspinlock: lock 0xffffffff92080020 has corrupted value 0xc0774ca0!
    [   81.501000] WARNING: CPU: 0 PID: 785 at kernel/locking/qspinlock_paravirt.h:500 __pv_queued_spin_unlock_slowpath+0xc0/0xd0
    [   81.503173] Modules linked in: virtio_console fuse xt_CHECKSUM ipt_MASQUERADE xt_conntrack ipt_REJECT nft_counter nf_nat_tftp nft_objref nf_conntrack_tftp tun bridge stp llc nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nf_tables_set nft_chain_nat_ipv6 nf_conntrack_ipv6 nf_defrag_ipv6 nf_nat_ipv6 nft_chain_route_ipv6 nft_chain_nat_ipv4 nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 nf_nat nf_conntrack nft_chain_route_ipv4 ip6_tables nft_compat ip_set nf_tables nfnetlink sunrpc bochs_drm drm_vram_helper ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm i2c_piix4 pcspkr crct10dif_pclmul crc32_pclmul joydev ghash_clmulni_intel ip_tables xfs libcrc32c sd_mod sg ata_generic ata_piix virtio_net libata crc32c_intel net_failover failover serio_raw virtio_scsi dm_mirror dm_region_hash dm_log dm_mod [last unloaded: virtio_console]
    [   81.517019] CPU: 0 PID: 785 Comm: kworker/0:2 Kdump: loaded Not tainted 4.18.0-167.el8.x86_64 #1
    [   81.518639] Hardware name: Red Hat KVM, BIOS 1.12.0-5.scrmod+el8.2.0+5159+d8aa4d83 04/01/2014
    [   81.520205] Workqueue: events control_work_handler [virtio_console]
    [   81.521354] RIP: 0010:__pv_queued_spin_unlock_slowpath+0xc0/0xd0
    [   81.522450] Code: 07 00 48 63 7a 10 e8 bf 64 f5 ff 66 90 c3 8b 05 e6 cf d6 01 85 c0 74 01 c3 8b 17 48 89 fe 48 c7 c7 38 4b 29 91 e8 3a 6c fa ff <0f> 0b c3 0f 0b 90 90 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 48
    [   81.525830] RSP: 0018:ffffb51a01ffbd70 EFLAGS: 00010282
    [   81.526798] RAX: 0000000000000000 RBX: 0000000000000010 RCX: 0000000000000000
    [   81.528110] RDX: ffff9e66f1826480 RSI: ffff9e66f1816a08 RDI: ffff9e66f1816a08
    [   81.529437] RBP: ffffffff9153ff10 R08: 000000000000026c R09: 0000000000000053
    [   81.530732] R10: 0000000000000000 R11: ffffb51a01ffbc18 R12: ffff9e66cd682200
    [   81.532133] R13: ffffffff9153ff10 R14: ffff9e6685569500 R15: ffff9e66cd682000
    [   81.533442] FS:  0000000000000000(0000) GS:ffff9e66f1800000(0000) knlGS:0000000000000000
    [   81.534914] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   81.535971] CR2: 00005624c55b14d0 CR3: 00000003a023c000 CR4: 00000000003406f0
    [   81.537283] Call Trace:
    [   81.537763]  __raw_callee_save___pv_queued_spin_unlock_slowpath+0x11/0x20
    [   81.539011]  .slowpath+0x9/0xe
    [   81.539585]  hvc_alloc+0x25e/0x300
    [   81.540237]  init_port_console+0x28/0x100 [virtio_console]
    [   81.541251]  handle_control_message.constprop.27+0x1c4/0x310 [virtio_console]
    [   81.542546]  control_work_handler+0x70/0x10c [virtio_console]
    [   81.543601]  process_one_work+0x1a7/0x3b0
    [   81.544356]  worker_thread+0x30/0x390
    [   81.545025]  ? create_worker+0x1a0/0x1a0
    [   81.545749]  kthread+0x112/0x130
    [   81.546358]  ? kthread_flush_work_fn+0x10/0x10
    [   81.547183]  ret_from_fork+0x22/0x40
    [   81.547842] ---[ end trace aa97649bd16c8655 ]---
    [   83.546539] general protection fault: 0000 [#1] SMP NOPTI
    [   83.547422] CPU: 5 PID: 3225 Comm: modprobe Kdump: loaded Tainted: G        W        --------- -  - 4.18.0-167.el8.x86_64 #1
    [   83.549191] Hardware name: Red Hat KVM, BIOS 1.12.0-5.scrmod+el8.2.0+5159+d8aa4d83 04/01/2014
    [   83.550544] RIP: 0010:__pv_queued_spin_lock_slowpath+0x19a/0x2a0
    [   83.551504] Code: c4 c1 ea 12 41 be 01 00 00 00 4c 8d 6d 14 41 83 e4 03 8d 42 ff 49 c1 e4 05 48 98 49 81 c4 40 a5 02 00 4c 03 24 c5 60 48 34 91 <49> 89 2c 24 b8 00 80 00 00 eb 15 84 c0 75 0a 41 0f b6 54 24 14 84
    [   83.554449] RSP: 0018:ffffb51a0323fdb0 EFLAGS: 00010202
    [   83.555290] RAX: 000000000000301c RBX: ffffffff92080020 RCX: 0000000000000001
    [   83.556426] RDX: 000000000000301d RSI: 0000000000000000 RDI: 0000000000000000
    [   83.557556] RBP: ffff9e66f196a540 R08: 000000000000028a R09: ffff9e66d2757788
    [   83.558688] R10: 0000000000000000 R11: 0000000000000000 R12: 646e61725f770b07
    [   83.559821] R13: ffff9e66f196a554 R14: 0000000000000001 R15: 0000000000180000
    [   83.560958] FS:  00007fd5032e8740(0000) GS:ffff9e66f1940000(0000) knlGS:0000000000000000
    [   83.562233] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   83.563149] CR2: 00007fd5022b0da0 CR3: 000000038c334000 CR4: 00000000003406e0
    
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200414191503.3471783-1-andrew@daynix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1e75e5b8f6c86737f133a299fe723410369084b
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Apr 14 09:14:14 2020 +0200

    KVM: VMX: Enable machine check support for 32bit targets
    
    commit fb56baae5ea509e63c2a068d66a4d8ea91969fca upstream.
    
    There is no reason to limit the use of do_machine_check
    to 64bit targets. MCE handling works for both target familes.
    
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Sean Christopherson <sean.j.christopherson@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: a0861c02a981 ("KVM: Add VT-x machine check support")
    Signed-off-by: Uros Bizjak <ubizjak@gmail.com>
    Message-Id: <20200414071414.45636-1-ubizjak@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b187baca3cda087adee1e0039ccd8975ef5a7ef
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Apr 7 23:40:58 2020 -0700

    KVM: Check validity of resolved slot when searching memslots
    
    commit b6467ab142b708dd076f6186ca274f14af379c72 upstream.
    
    Check that the resolved slot (somewhat confusingly named 'start') is a
    valid/allocated slot before doing the final comparison to see if the
    specified gfn resides in the associated slot.  The resolved slot can be
    invalid if the binary search loop terminated because the search index
    was incremented beyond the number of used slots.
    
    This bug has existed since the binary search algorithm was introduced,
    but went unnoticed because KVM statically allocated memory for the max
    number of slots, i.e. the access would only be truly out-of-bounds if
    all possible slots were allocated and the specified gfn was less than
    the base of the lowest memslot.  Commit 36947254e5f98 ("KVM: Dynamically
    size memslot array based on number of used slots") eliminated the "all
    possible slots allocated" condition and made the bug embarrasingly easy
    to hit.
    
    Fixes: 9c1a5d38780e6 ("kvm: optimize GFN to memslot lookup with large slots amount")
    Reported-by: syzbot+d889b59b2bb87d4047a2@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200408064059.8957-2-sean.j.christopherson@intel.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ef662faf92cd28f2caad8d0925ce39e5f7e387c
Author: Alexander Tsoy <alexander@tsoy.me>
Date:   Sat Apr 18 20:58:15 2020 +0300

    ALSA: usb-audio: Filter out unsupported sample rates on Focusrite devices
    
    commit 1c826792586f526a5a5cd21d55aad388f5bb0b23 upstream.
    
    Many Focusrite devices supports a limited set of sample rates per
    altsetting. These includes audio interfaces with ADAT ports:
     - Scarlett 18i6, 18i8 1st gen, 18i20 1st gen;
     - Scarlett 18i8 2nd gen, 18i20 2nd gen;
     - Scarlett 18i8 3rd gen, 18i20 3rd gen;
     - Clarett 2Pre USB, 4Pre USB, 8Pre USB.
    
    Maximum rate is exposed in the last 4 bytes of Format Type descriptor
    which has a non-standard bLength = 10.
    
    Tested-by: Alexey Skobkin <skobkin-ru@ya.ru>
    Signed-off-by: Alexander Tsoy <alexander@tsoy.me>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200418175815.12211-1-alexander@tsoy.me
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02f432922ebae3a1fa9e514862a8a67b0ee38138
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Apr 23 12:54:19 2020 +0800

    ALSA: usb-audio: Fix usb audio refcnt leak when getting spdif
    
    commit 59e1947ca09ebd1cae147c08c7c41f3141233c84 upstream.
    
    snd_microii_spdif_default_get() invokes snd_usb_lock_shutdown(), which
    increases the refcount of the snd_usb_audio object "chip".
    
    When snd_microii_spdif_default_get() returns, local variable "chip"
    becomes invalid, so the refcount should be decreased to keep refcount
    balanced.
    
    The reference counting issue happens in several exception handling paths
    of snd_microii_spdif_default_get(). When those error scenarios occur
    such as usb_ifnum_to_if() returns NULL, the function forgets to decrease
    the refcnt increased by snd_usb_lock_shutdown(), causing a refcnt leak.
    
    Fix this issue by jumping to "end" label when those error scenarios
    occur.
    
    Fixes: 447d6275f0c2 ("ALSA: usb-audio: Add sanity checks for endpoint accesses")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1587617711-13200-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6726d4bf6fca00287aa014ea3a35367c5572e54e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 20 09:55:29 2020 +0200

    ALSA: usx2y: Fix potential NULL dereference
    
    commit 7686e3485253635c529cdd5f416fc640abaf076f upstream.
    
    The error handling code in usX2Y_rate_set() may hit a potential NULL
    dereference when an error occurs before allocating all us->urb[].
    Add a proper NULL check for fixing the corner case.
    
    Reported-by: Lin Yi <teroincn@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200420075529.27203-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e80fd5aff9918b4400bd741387f00042c9e2766
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:09:51 2020 -0400

    USB: hub: Fix handling of connect changes during sleep
    
    commit 9f952e26295d977dbfc6fedeaf8c4f112c818d37 upstream.
    
    Commit 8099f58f1ecd ("USB: hub: Don't record a connect-change event
    during reset-resume") wasn't very well conceived.  The problem it
    tried to fix was that if a connect-change event occurred while the
    system was asleep (such as a device disconnecting itself from the bus
    when it is suspended and then reconnecting when it resumes)
    requiring a reset-resume during the system wakeup transition, the hub
    port's change_bit entry would remain set afterward.  This would cause
    the hub driver to believe another connect-change event had occurred
    after the reset-resume, which was wrong and would lead the driver to
    send unnecessary requests to the device (which could interfere with a
    firmware update).
    
    The commit tried to fix this by not setting the change_bit during the
    wakeup.  But this was the wrong thing to do; it means that when a
    device is unplugged while the system is asleep, the hub driver doesn't
    realize anything has happened: The change_bit flag which would tell it
    to handle the disconnect event is clear.
    
    The commit needs to be reverted and the problem fixed in a different
    way.  Fortunately an alternative solution was noted in the commit's
    Changelog: We can continue to set the change_bit entry in
    hub_activate() but then clear it when a reset-resume occurs.  That way
    the the hub driver will see the change_bit when a device is
    disconnected but won't see it when the device is still present.
    
    That's what this patch does.
    
    Reported-and-tested-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: 8099f58f1ecd ("USB: hub: Don't record a connect-change event during reset-resume")
    Tested-by: Paul Zimmerman <pauldzim@gmail.com>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2004221602480.11262-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f613d830fae7cbf8799378338d4df977f8667d5c
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Sat Mar 28 16:18:11 2020 -0400

    USB: core: Fix free-while-in-use bug in the USB S-Glibrary
    
    commit 056ad39ee9253873522f6469c3364964a322912b upstream.
    
    FuzzUSB (a variant of syzkaller) found a free-while-still-in-use bug
    in the USB scatter-gather library:
    
    BUG: KASAN: use-after-free in atomic_read
    include/asm-generic/atomic-instrumented.h:26 [inline]
    BUG: KASAN: use-after-free in usb_hcd_unlink_urb+0x5f/0x170
    drivers/usb/core/hcd.c:1607
    Read of size 4 at addr ffff888065379610 by task kworker/u4:1/27
    
    CPU: 1 PID: 27 Comm: kworker/u4:1 Not tainted 5.5.11 #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.10.2-1ubuntu1 04/01/2014
    Workqueue: scsi_tmf_2 scmd_eh_abort_handler
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xce/0x128 lib/dump_stack.c:118
     print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374
     __kasan_report+0x153/0x1cb mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:639
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x152/0x1b0 mm/kasan/generic.c:192
     __kasan_check_read+0x11/0x20 mm/kasan/common.c:95
     atomic_read include/asm-generic/atomic-instrumented.h:26 [inline]
     usb_hcd_unlink_urb+0x5f/0x170 drivers/usb/core/hcd.c:1607
     usb_unlink_urb+0x72/0xb0 drivers/usb/core/urb.c:657
     usb_sg_cancel+0x14e/0x290 drivers/usb/core/message.c:602
     usb_stor_stop_transport+0x5e/0xa0 drivers/usb/storage/transport.c:937
    
    This bug occurs when cancellation of the S-G transfer races with
    transfer completion.  When that happens, usb_sg_cancel() may continue
    to access the transfer's URBs after usb_sg_wait() has freed them.
    
    The bug is caused by the fact that usb_sg_cancel() does not take any
    sort of reference to the transfer, and so there is nothing to prevent
    the URBs from being deallocated while the routine is trying to use
    them.  The fix is to take such a reference by incrementing the
    transfer's io->count field while the cancellation is in progres and
    decrementing it afterward.  The transfer's URBs are not deallocated
    until io->complete is triggered, which happens when io->count reaches
    zero.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: Kyungtae Kim <kt0755@gmail.com>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2003281615140.14837-100000@netrider.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4aa71d66929d2d6d9650b6383a3c01ab95d09e87
Author: David Mosberger <davidm@egauge.net>
Date:   Tue Mar 8 14:42:49 2016 -0700

    drivers: usb: core: Minimize irq disabling in usb_sg_cancel()
    
    commit 5f2e5fb873e269fcb806165715d237f0de4ecf1d upstream.
    
    Restructure usb_sg_cancel() so we don't have to disable interrupts
    while cancelling the URBs.
    
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: David Mosberger <davidm@egauge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee3326f4860576a0fe568dea0ce9fc2e7297ca6d
Author: David Mosberger <davidm@egauge.net>
Date:   Tue Mar 8 14:42:48 2016 -0700

    drivers: usb: core: Don't disable irqs in usb_sg_wait() during URB submit.
    
    commit 98b74b0ee57af1bcb6e8b2e76e707a71c5ef8ec9 upstream.
    
    usb_submit_urb() may take quite long to execute.  For example, a
    single sg list may have 30 or more entries, possibly leading to that
    many calls to DMA-map pages.  This can cause interrupt latency of
    several hundred micro-seconds.
    
    Avoid the problem by releasing the io->lock spinlock and re-enabling
    interrupts before calling usb_submit_urb().  This opens races with
    usb_sg_cancel() and sg_complete().  Handle those races by using
    usb_block_urb() to stop URBs from being submitted after
    usb_sg_cancel() or sg_complete() with error.
    
    Note that usb_unlink_urb() is guaranteed to return -ENODEV if
    !io->urbs[i]->dev and since the -ENODEV case is already handled,
    we don't have to check for !io->urbs[i]->dev explicitly.
    
    Before this change, reading 512MB from an ext3 filesystem on a USB
    memory stick showed a throughput of 12 MB/s with about 500 missed
    deadlines.
    
    With this change, reading the same file gave the same throughput but
    only one or two missed deadlines.
    
    Signed-off-by: David Mosberger <davidm@egauge.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 414ad945a625b166fd8ccd1ace94ecedd5dc6fac
Author: Jonathan Cox <jonathan@jdcox.net>
Date:   Fri Apr 10 14:24:27 2020 -0700

    USB: Add USB_QUIRK_DELAY_CTRL_MSG and USB_QUIRK_DELAY_INIT for Corsair K70 RGB RAPIDFIRE
    
    commit be34a5854b4606bd7a160ad3cb43415d623596c7 upstream.
    
    The Corsair K70 RGB RAPIDFIRE needs the USB_QUIRK_DELAY_INIT and
    USB_QUIRK_DELAY_CTRL_MSG to function or it will randomly not
    respond on boot, just like other Corsair keyboards
    
    Signed-off-by: Jonathan Cox <jonathan@jdcox.net>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200410212427.2886-1-jonathan@jdcox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 101c65e5032889e78257e866d90ac7bc9a966d60
Author: Changming Liu <liu.changm@northeastern.edu>
Date:   Mon Apr 20 23:41:25 2020 -0400

    USB: sisusbvga: Change port variable from signed to unsigned
    
    commit 2df7405f79ce1674d73c2786fe1a8727c905d65b upstream.
    
    Change a bunch of arguments of wrapper functions which pass signed
    integer to an unsigned integer which might cause undefined behaviors
    when sign integer overflow.
    
    Signed-off-by: Changming Liu <liu.changm@northeastern.edu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/BL0PR06MB45482D71EA822D75A0E60A2EE5D50@BL0PR06MB4548.namprd06.prod.outlook.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83354adbd7a967230bd23a547c5b695567ddba2c
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Mon Apr 27 11:34:12 2020 +0100

    fs/namespace.c: fix mountpoint reference counter race
    
    A race condition between threads updating mountpoint reference counter
    affects longterm releases 4.4.220, 4.9.220, 4.14.177 and 4.19.118.
    
    The mountpoint reference counter corruption may occur when:
    * one thread increments m_count member of struct mountpoint
      [under namespace_sem, but not holding mount_lock]
        pivot_root()
    * another thread simultaneously decrements the same m_count
      [under mount_lock, but not holding namespace_sem]
        put_mountpoint()
          unhash_mnt()
            umount_mnt()
              mntput_no_expire()
    
    To fix this race condition, grab mount_lock before updating m_count in
    pivot_root().
    
    Reference: CVE-2020-12114
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52ae60c243c64a3000b8d5457698d5f1ed809883
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Apr 3 15:27:15 2020 +0200

    iio: xilinx-xadc: Fix sequencer configuration for aux channels in simultaneous mode
    
    commit 8bef455c8b1694547ee59e8b1939205ed9d901a6 upstream.
    
    The XADC has two internal ADCs. Depending on the mode it is operating in
    either one or both of them are used. The device manual calls this
    continuous (one ADC) and simultaneous (both ADCs) mode.
    
    The meaning of the sequencing register for the aux channels changes
    depending on the mode.
    
    In continuous mode each bit corresponds to one of the 16 aux channels. And
    the single ADC will convert them one by one in order.
    
    In simultaneous mode the aux channels are split into two groups the first 8
    channels are assigned to the first ADC and the other 8 channels to the
    second ADC. The upper 8 bits of the sequencing register are unused and the
    lower 8 bits control both ADCs. This means a bit needs to be set if either
    the corresponding channel from the first group or the second group (or
    both) are set.
    
    Currently the driver does not have the special handling required for
    simultaneous mode. Add it.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd145d2e859bfb363509623058d9613edb3f910c
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Apr 3 15:27:14 2020 +0200

    iio: xilinx-xadc: Fix clearing interrupt when enabling trigger
    
    commit f954b098fbac4d183219ce5b42d76d6df2aed50a upstream.
    
    When enabling the trigger and unmasking the end-of-sequence (EOS) interrupt
    the EOS interrupt should be cleared from the status register. Otherwise it
    is possible that it was still set from a previous capture. If that is the
    case the interrupt would fire immediately even though no conversion has
    been done yet and stale data is being read from the device.
    
    The old code only clears the interrupt if the interrupt was previously
    unmasked. Which does not make much sense since the interrupt is always
    masked at this point and in addition masking the interrupt does not clear
    the interrupt from the status register. So the clearing needs to be done
    unconditionally.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 245fcb9945fc978c93189e971121a49480bbbe6a
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Apr 3 15:27:13 2020 +0200

    iio: xilinx-xadc: Fix ADC-B powerdown
    
    commit e44ec7794d88f918805d700240211a9ec05ed89d upstream.
    
    The check for shutting down the second ADC is inverted. This causes it to
    be powered down when it should be enabled. As a result channels that are
    supposed to be handled by the second ADC return invalid conversion results.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6aee5c440ba798b6c99c1dc85958f4a3a89481a4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Apr 19 09:19:26 2020 +0200

    ALSA: hda: Remove ASUS ROG Zenith from the blacklist
    
    [ Upstream commit a8cf44f085ac12c0b5b8750ebb3b436c7f455419 ]
    
    The commit 3c6fd1f07ed0 ("ALSA: hda: Add driver blacklist") added a
    new blacklist for the devices that are known to have empty codecs, and
    one of the entries was ASUS ROG Zenith II (PCI SSID 1043:874f).
    However, it turned out that the very same PCI SSID is used for the
    previous model that does have the valid HD-audio codecs and the change
    broke the sound on it.
    
    This patch reverts the corresponding entry as a temporary solution.
    Although Zenith II and co will see get the empty HD-audio bus again,
    it'd be merely resource wastes and won't affect the functionality,
    so it's no end of the world.  We'll need to address this later,
    e.g. by either switching to DMI string matching or using PCI ID &
    SSID pairs.
    
    Fixes: 3c6fd1f07ed0 ("ALSA: hda: Add driver blacklist")
    Reported-by: Johnathan Smithinovic <johnathan.smithinovic@gmx.at>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200419071926.22683-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29597cca92448e2061a9d9c38b0a143be501d503
Author: David Ahern <dsahern@gmail.com>
Date:   Mon Apr 20 17:13:51 2020 -0600

    xfrm: Always set XFRM_TRANSFORMED in xfrm{4,6}_output_finish
    
    [ Upstream commit 0c922a4850eba2e668f73a3f1153196e09abb251 ]
    
    IPSKB_XFRM_TRANSFORMED and IP6SKB_XFRM_TRANSFORMED are skb flags set by
    xfrm code to tell other skb handlers that the packet has been passed
    through the xfrm output functions. Simplify the code and just always
    set them rather than conditionally based on netfilter enabled thus
    making the flag available for other users.
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4fa7aa46d89378c994e2bc1d773681b913d0277
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Apr 20 15:01:33 2020 +0000

    team: fix hang in team_mode_get()
    
    [ Upstream commit 1c30fbc76b8f0c07c92a8ca4cd7c456612e17eb5 ]
    
    When team mode is changed or set, the team_mode_get() is called to check
    whether the mode module is inserted or not. If the mode module is not
    inserted, it calls the request_module().
    In the request_module(), it creates a child process, which is
    the "modprobe" process and waits for the done of the child process.
    At this point, the following locks were used.
    down_read(&cb_lock()); by genl_rcv()
        genl_lock(); by genl_rcv_msc()
            rtnl_lock(); by team_nl_cmd_options_set()
                mutex_lock(&team->lock); by team_nl_team_get()
    
    Concurrently, the team module could be removed by rmmod or "modprobe -r"
    The __exit function of team module is team_module_exit(), which calls
    team_nl_fini() and it tries to acquire following locks.
    down_write(&cb_lock);
        genl_lock();
    Because of the genl_lock() and cb_lock, this process can't be finished
    earlier than request_module() routine.
    
    The problem secenario.
    CPU0                                     CPU1
    team_mode_get
        request_module()
                                             modprobe -r team_mode_roundrobin
                                                         team <--(B)
            modprobe team <--(A)
                team_mode_roundrobin
    
    By request_module(), the "modprobe team_mode_roundrobin" command
    will be executed. At this point, the modprobe process will decide
    that the team module should be inserted before team_mode_roundrobin.
    Because the team module is being removed.
    
    By the module infrastructure, the same module insert/remove operations
    can't be executed concurrently.
    So, (A) waits for (B) but (B) also waits for (A) because of locks.
    So that the hang occurs at this point.
    
    Test commands:
        while :
        do
            teamd -d &
            killall teamd &
            modprobe -rv team_mode_roundrobin &
        done
    
    The approach of this patch is to hold the reference count of the team
    module if the team module is compiled as a module. If the reference count
    of the team module is not zero while request_module() is being called,
    the team module will not be removed at that moment.
    So that the above scenario could not occur.
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec63c6bde7a0a4484d1d0a959551df23494b395b
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Apr 17 07:10:23 2020 -0700

    tcp: cache line align MAX_TCP_HEADER
    
    [ Upstream commit 9bacd256f1354883d3c1402655153367982bba49 ]
    
    TCP stack is dumb in how it cooks its output packets.
    
    Depending on MAX_HEADER value, we might chose a bad ending point
    for the headers.
    
    If we align the end of TCP headers to cache line boundary, we
    make sure to always use the smallest number of cache lines,
    which always help.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25765e8afb01bdb7cd06d1bf2111cd0443323935
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Apr 23 13:13:03 2020 +0800

    net/x25: Fix x25_neigh refcnt leak when receiving frame
    
    [ Upstream commit f35d12971b4d814cdb2f659d76b42f0c545270b6 ]
    
    x25_lapb_receive_frame() invokes x25_get_neigh(), which returns a
    reference of the specified x25_neigh object to "nb" with increased
    refcnt.
    
    When x25_lapb_receive_frame() returns, local variable "nb" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one path of
    x25_lapb_receive_frame(). When pskb_may_pull() returns false, the
    function forgets to decrease the refcnt increased by x25_get_neigh(),
    causing a refcnt leak.
    
    Fix this issue by calling x25_neigh_put() when pskb_may_pull() returns
    false.
    
    Fixes: cb101ed2c3c7 ("x25: Handle undersized/fragmented skbs")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b5407dc7937f9acda662102bd5183e44c8906bd
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:36:19 2020 +0800

    net: netrom: Fix potential nr_neigh refcnt leak in nr_add_node
    
    [ Upstream commit d03f228470a8c0a22b774d1f8d47071e0de4f6dd ]
    
    nr_add_node() invokes nr_neigh_get_dev(), which returns a local
    reference of the nr_neigh object to "nr_neigh" with increased refcnt.
    
    When nr_add_node() returns, "nr_neigh" becomes invalid, so the refcount
    should be decreased to keep refcount balanced.
    
    The issue happens in one normal path of nr_add_node(), which forgets to
    decrease the refcnt increased by nr_neigh_get_dev() and causes a refcnt
    leak. It should decrease the refcnt before the function returns like
    other normal paths do.
    
    Fix this issue by calling nr_neigh_put() before the nr_add_node()
    returns.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec73a87c216ba78fad9bf775b54460961519664
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Apr 20 13:29:40 2020 +0000

    macvlan: fix null dereference in macvlan_device_event()
    
    [ Upstream commit 4dee15b4fd0d61ec6bbd179238191e959d34cf7a ]
    
    In the macvlan_device_event(), the list_first_entry_or_null() is used.
    This function could return null pointer if there is no node.
    But, the macvlan module doesn't check the null pointer.
    So, null-ptr-deref would occur.
    
          bond0
            |
       +----+-----+
       |          |
    macvlan0   macvlan1
       |          |
     dummy0     dummy1
    
    The problem scenario.
    If dummy1 is removed,
    1. ->dellink() of dummy1 is called.
    2. NETDEV_UNREGISTER of dummy1 notification is sent to macvlan module.
    3. ->dellink() of macvlan1 is called.
    4. NETDEV_UNREGISTER of macvlan1 notification is sent to bond module.
    5. __bond_release_one() is called and it internally calls
       dev_set_mac_address().
    6. dev_set_mac_address() calls the ->ndo_set_mac_address() of macvlan1,
       which is macvlan_set_mac_address().
    7. macvlan_set_mac_address() calls the dev_set_mac_address() with dummy1.
    8. NETDEV_CHANGEADDR of dummy1 is sent to macvlan module.
    9. In the macvlan_device_event(), it calls list_first_entry_or_null().
    At this point, dummy1 and macvlan1 were removed.
    So, list_first_entry_or_null() will return NULL.
    
    Test commands:
        ip netns add nst
        ip netns exec nst ip link add bond0 type bond
        for i in {0..10}
        do
            ip netns exec nst ip link add dummy$i type dummy
            ip netns exec nst ip link add macvlan$i link dummy$i \
                    type macvlan mode passthru
            ip netns exec nst ip link set macvlan$i master bond0
        done
        ip netns del nst
    
    Splat looks like:
    [   40.585687][  T146] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] SMP DEI
    [   40.587249][  T146] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [   40.588342][  T146] CPU: 1 PID: 146 Comm: kworker/u8:2 Not tainted 5.7.0-rc1+ #532
    [   40.589299][  T146] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   40.590469][  T146] Workqueue: netns cleanup_net
    [   40.591045][  T146] RIP: 0010:macvlan_device_event+0x4e2/0x900 [macvlan]
    [   40.591905][  T146] Code: 00 00 00 00 00 fc ff df 80 3c 06 00 0f 85 45 02 00 00 48 89 da 48 b8 00 00 00 00 00 fc ff d2
    [   40.594126][  T146] RSP: 0018:ffff88806116f4a0 EFLAGS: 00010246
    [   40.594783][  T146] RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [   40.595653][  T146] RDX: 0000000000000000 RSI: ffff88806547ddd8 RDI: ffff8880540f1360
    [   40.596495][  T146] RBP: ffff88804011a808 R08: fffffbfff4fb8421 R09: fffffbfff4fb8421
    [   40.597377][  T146] R10: ffffffffa7dc2107 R11: 0000000000000000 R12: 0000000000000008
    [   40.598186][  T146] R13: ffff88804011a000 R14: ffff8880540f1000 R15: 1ffff1100c22de9a
    [   40.599012][  T146] FS:  0000000000000000(0000) GS:ffff888067800000(0000) knlGS:0000000000000000
    [   40.600004][  T146] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   40.600665][  T146] CR2: 00005572d3a807b8 CR3: 000000005fcf4003 CR4: 00000000000606e0
    [   40.601485][  T146] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   40.602461][  T146] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   40.603443][  T146] Call Trace:
    [   40.603871][  T146]  ? nf_tables_dump_setelem+0xa0/0xa0 [nf_tables]
    [   40.604587][  T146]  ? macvlan_uninit+0x100/0x100 [macvlan]
    [   40.605212][  T146]  ? __module_text_address+0x13/0x140
    [   40.605842][  T146]  notifier_call_chain+0x90/0x160
    [   40.606477][  T146]  dev_set_mac_address+0x28e/0x3f0
    [   40.607117][  T146]  ? netdev_notify_peers+0xc0/0xc0
    [   40.607762][  T146]  ? __module_text_address+0x13/0x140
    [   40.608440][  T146]  ? notifier_call_chain+0x90/0x160
    [   40.609097][  T146]  ? dev_set_mac_address+0x1f0/0x3f0
    [   40.609758][  T146]  dev_set_mac_address+0x1f0/0x3f0
    [   40.610402][  T146]  ? __local_bh_enable_ip+0xe9/0x1b0
    [   40.611071][  T146]  ? bond_hw_addr_flush+0x77/0x100 [bonding]
    [   40.611823][  T146]  ? netdev_notify_peers+0xc0/0xc0
    [   40.612461][  T146]  ? bond_hw_addr_flush+0x77/0x100 [bonding]
    [   40.613213][  T146]  ? bond_hw_addr_flush+0x77/0x100 [bonding]
    [   40.613963][  T146]  ? __local_bh_enable_ip+0xe9/0x1b0
    [   40.614631][  T146]  ? bond_time_in_interval.isra.31+0x90/0x90 [bonding]
    [   40.615484][  T146]  ? __bond_release_one+0x9f0/0x12c0 [bonding]
    [   40.616230][  T146]  __bond_release_one+0x9f0/0x12c0 [bonding]
    [   40.616949][  T146]  ? bond_enslave+0x47c0/0x47c0 [bonding]
    [   40.617642][  T146]  ? lock_downgrade+0x730/0x730
    [   40.618218][  T146]  ? check_flags.part.42+0x450/0x450
    [   40.618850][  T146]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   40.619519][  T146]  ? trace_hardirqs_on+0x30/0x180
    [   40.620117][  T146]  ? wait_for_completion+0x250/0x250
    [   40.620754][  T146]  bond_netdev_event+0x822/0x970 [bonding]
    [   40.621460][  T146]  ? __module_text_address+0x13/0x140
    [   40.622097][  T146]  notifier_call_chain+0x90/0x160
    [   40.622806][  T146]  rollback_registered_many+0x660/0xcf0
    [   40.623522][  T146]  ? netif_set_real_num_tx_queues+0x780/0x780
    [   40.624290][  T146]  ? notifier_call_chain+0x90/0x160
    [   40.624957][  T146]  ? netdev_upper_dev_unlink+0x114/0x180
    [   40.625686][  T146]  ? __netdev_adjacent_dev_unlink_neighbour+0x30/0x30
    [   40.626421][  T146]  ? mutex_is_locked+0x13/0x50
    [   40.627016][  T146]  ? unregister_netdevice_queue+0xf2/0x240
    [   40.627663][  T146]  unregister_netdevice_many.part.134+0x13/0x1b0
    [   40.628362][  T146]  default_device_exit_batch+0x2d9/0x390
    [   40.628987][  T146]  ? unregister_netdevice_many+0x40/0x40
    [   40.629615][  T146]  ? dev_change_net_namespace+0xcb0/0xcb0
    [   40.630279][  T146]  ? prepare_to_wait_exclusive+0x2e0/0x2e0
    [   40.630943][  T146]  ? ops_exit_list.isra.9+0x97/0x140
    [   40.631554][  T146]  cleanup_net+0x441/0x890
    [ ... ]
    
    Fixes: e289fd28176b ("macvlan: fix the problem when mac address changes for passthru mode")
    Reported-by: syzbot+5035b1f9dc7ea4558d5a@syzkaller.appspotmail.com
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59ff94db972eab9a7a174452fae0a2a7ce1150bf
Author: John Haxby <john.haxby@oracle.com>
Date:   Sat Apr 18 16:30:49 2020 +0100

    ipv6: fix restrict IPV6_ADDRFORM operation
    
    [ Upstream commit 82c9ae440857840c56e05d4fb1427ee032531346 ]
    
    Commit b6f6118901d1 ("ipv6: restrict IPV6_ADDRFORM operation") fixed a
    problem found by syzbot an unfortunate logic error meant that it
    also broke IPV6_ADDRFORM.
    
    Rearrange the checks so that the earlier test is just one of the series
    of checks made before moving the socket from IPv6 to IPv4.
    
    Fixes: b6f6118901d1 ("ipv6: restrict IPV6_ADDRFORM operation")
    Signed-off-by: John Haxby <john.haxby@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72ac65d3547d0c0a6270666506827d8bc7412075
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 3 13:35:35 2020 -0800

    pwm: bcm2835: Dynamically allocate base
    
    [ Upstream commit 2c25b07e5ec119cab609e41407a1fb3fa61442f5 ]
    
    The newer 2711 and 7211 chips have two PWM controllers and failure to
    dynamically allocate the PWM base would prevent the second PWM
    controller instance being probed for succeeding with an -EEXIST error
    from alloc_pwms().
    
    Fixes: e5a06dc5ac1f ("pwm: Add BCM2835 PWM driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f95d6758a6b514bd1cbb1dd0dfd174b491114c58
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Mar 16 11:32:15 2020 +0100

    pwm: renesas-tpu: Fix late Runtime PM enablement
    
    [ Upstream commit d5a3c7a4536e1329a758e14340efd0e65252bd3d ]
    
    Runtime PM should be enabled before calling pwmchip_add(), as PWM users
    can appear immediately after the PWM chip has been added.
    Likewise, Runtime PM should always be disabled after the removal of the
    PWM chip, even if the latter failed.
    
    Fixes: 99b82abb0a35b073 ("pwm: Add Renesas TPU PWM driver")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 612812b0d59893da30c632b41300baee6849eddc
Author: Cornelia Huck <cohuck@redhat.com>
Date:   Fri Mar 27 13:45:02 2020 +0100

    s390/cio: avoid duplicated 'ADD' uevents
    
    [ Upstream commit 05ce3e53f375295c2940390b2b429e506e07655c ]
    
    The common I/O layer delays the ADD uevent for subchannels and
    delegates generating this uevent to the individual subchannel
    drivers. The io_subchannel driver will do so when the associated
    ccw_device has been registered -- but unconditionally, so more
    ADD uevents will be generated if a subchannel has been unbound
    from the io_subchannel driver and later rebound.
    
    To fix this, only generate the ADD event if uevents were still
    suppressed for the device.
    
    Fixes: fa1a8c23eb7d ("s390: cio: Delay uevents for subchannels")
    Message-Id: <20200327124503.9794-2-cohuck@redhat.com>
    Reported-by: Boris Fiuczynski <fiuczy@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Boris Fiuczynski <fiuczy@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05226e877dfd6fc3e69e166c245bb2346839f06e
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Apr 10 14:34:13 2020 -0700

    ipc/util.c: sysvipc_find_ipc() should increase position index
    
    [ Upstream commit 89163f93c6f969da5811af5377cc10173583123b ]
    
    If seq_file .next function does not change position index, read after
    some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Link: http://lkml.kernel.org/r/b7a20945-e315-8bb0-21e6-3875c14a8494@virtuozzo.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11271edd0e288eec4420afe456f25fd404b7fd47
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Apr 10 14:34:10 2020 -0700

    kernel/gcov/fs.c: gcov_seq_next() should increase position index
    
    [ Upstream commit f4d74ef6220c1eda0875da30457bef5c7111ab06 ]
    
    If seq_file .next function does not change position index, read after
    some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Waiman Long <longman@redhat.com>
    Link: http://lkml.kernel.org/r/f65c6ee7-bd00-f910-2f8a-37cc67e4ff88@virtuozzo.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d27144816ca92f4cbcf26a5d931d74d829df736
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 2 20:53:57 2020 +0200

    ASoC: Intel: atom: Take the drv->lock mutex before calling sst_send_slot_map()
    
    [ Upstream commit 81630dc042af998b9f58cd8e2c29dab9777ea176 ]
    
    sst_send_slot_map() uses sst_fill_and_send_cmd_unlocked() because in some
    places it is called with the drv->lock mutex already held.
    
    So it must always be called with the mutex locked. This commit adds missing
    locking in the sst_set_be_modules() code-path.
    
    Fixes: 24c8d14192cc ("ASoC: Intel: mrfld: add DSP core controls")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200402185359.3424-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3e67727ec572a97355eae31e1b4dd3734f95f93
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Mar 24 15:58:50 2020 +0800

    scsi: iscsi: Report unbind session event when the target has been removed
    
    [ Upstream commit 13e60d3ba287d96eeaf1deaadba51f71578119a3 ]
    
    If the daemon is restarted or crashes while logging out of a session, the
    unbind session event sent by the kernel is not processed and is lost.  When
    the daemon starts again, the session can't be unbound because the daemon is
    waiting for the event message. However, the kernel has already logged out
    and the event will not be resent.
    
    When iscsid restart is complete, logout session reports error:
    
    Logging out of session [sid: 6, target: iqn.xxxxx, portal: xx.xx.xx.xx,3260]
    iscsiadm: Could not logout of [sid: 6, target: iscsiadm -m node iqn.xxxxx, portal: xx.xx.xx.xx,3260].
    iscsiadm: initiator reported error (9 - internal error)
    iscsiadm: Could not logout of all requested sessions
    
    Make sure the unbind event is emitted.
    
    [mkp: commit desc and applied by hand since patch was mangled]
    
    Link: https://lore.kernel.org/r/4eab1771-2cb3-8e79-b31c-923652340e99@huawei.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20ea00cb261b57b0685f450f4134b34c6e9d67bb
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Mar 16 11:32:14 2020 +0100

    pwm: rcar: Fix late Runtime PM enablement
    
    [ Upstream commit 1451a3eed24b5fd6a604683f0b6995e0e7e16c79 ]
    
    Runtime PM should be enabled before calling pwmchip_add(), as PWM users
    can appear immediately after the PWM chip has been added.
    Likewise, Runtime PM should be disabled after the removal of the PWM
    chip.
    
    Fixes: ed6c1476bf7f16d5 ("pwm: Add support for R-Car PWM Timer")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e176af97eca942070141ad1d9477f11e2e8b6a8
Author: Yan, Zheng <zyan@redhat.com>
Date:   Tue Mar 10 19:34:20 2020 +0800

    ceph: don't skip updating wanted caps when cap is stale
    
    [ Upstream commit 0aa971b6fd3f92afef6afe24ef78d9bb14471519 ]
    
    1. try_get_cap_refs() fails to get caps and finds that mds_wanted
       does not include what it wants. It returns -ESTALE.
    2. ceph_get_caps() calls ceph_renew_caps(). ceph_renew_caps() finds
       that inode has cap, so it calls ceph_check_caps().
    3. ceph_check_caps() finds that issued caps (without checking if it's
       stale) already includes caps wanted by open file, so it skips
       updating wanted caps.
    
    Above events can cause an infinite loop inside ceph_get_caps().
    
    Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a697f135bcbb9fe6020bf64d1a8e06052da7b4e
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Fri Mar 6 09:34:20 2020 +0800

    ceph: return ceph_mdsc_do_request() errors from __get_parent()
    
    [ Upstream commit c6d50296032f0b97473eb2e274dc7cc5d0173847 ]
    
    Return the error returned by ceph_mdsc_do_request(). Otherwise,
    r_target_inode ends up being NULL this ends up returning ENOENT
    regardless of the error.
    
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebf16d57c3300908f69d3af4a0879ea41681a601
Author: James Smart <jsmart2021@gmail.com>
Date:   Sun Mar 22 11:12:53 2020 -0700

    scsi: lpfc: Fix kasan slab-out-of-bounds error in lpfc_unreg_login
    
    [ Upstream commit 38503943c89f0bafd9e3742f63f872301d44cbea ]
    
    The following kasan bug was called out:
    
     BUG: KASAN: slab-out-of-bounds in lpfc_unreg_login+0x7c/0xc0 [lpfc]
     Read of size 2 at addr ffff889fc7c50a22 by task lpfc_worker_3/6676
     ...
     Call Trace:
     dump_stack+0x96/0xe0
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     print_address_description.constprop.6+0x1b/0x220
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     __kasan_report.cold.9+0x37/0x7c
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     kasan_report+0xe/0x20
     lpfc_unreg_login+0x7c/0xc0 [lpfc]
     lpfc_sli_def_mbox_cmpl+0x334/0x430 [lpfc]
     ...
    
    When processing the completion of a "Reg Rpi" login mailbox command in
    lpfc_sli_def_mbox_cmpl, a call may be made to lpfc_unreg_login. The vpi is
    extracted from the completing mailbox context and passed as an input for
    the next. However, the vpi stored in the mailbox command context is an
    absolute vpi, which for SLI4 represents both base + offset.  When used with
    a non-zero base component, (function id > 0) this results in an
    out-of-range access beyond the allocated phba->vpi_ids array.
    
    Fix by subtracting the function's base value to get an accurate vpi number.
    
    Link: https://lore.kernel.org/r/20200322181304.37655-2-jsmart2021@gmail.com
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cb1bbf7cd5d30fd8d7fad43e97a7c74ceb832c3
Author: Jeremy Sowden <jeremy@azazel.net>
Date:   Tue Mar 19 15:39:21 2019 +0000

    vti4: removed duplicate log message.
    
    commit 01ce31c57b3f07c91c9d45bbaf126124cce83a5d upstream.
    
    Removed info log-message if ipip tunnel registration fails during
    module-initialization: it adds nothing to the error message that is
    written on all failures.
    
    Fixes: dd9ee3444014e ("vti4: Fix a ipip packet processing bug in 'IPCOMP' virtual tunnel")
    Signed-off-by: Jeremy Sowden <jeremy@azazel.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea2316fc892d96b62604bb4b9a42d31dcaf8914b
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu Oct 11 01:49:48 2018 +0000

    crypto: mxs-dcp - make symbols 'sha1_null_hash' and 'sha256_null_hash' static
    
    commit ce4e45842de3eb54b8dd6e081765d741f5b92b56 upstream.
    
    Fixes the following sparse warnings:
    
    drivers/crypto/mxs-dcp.c:39:15: warning:
     symbol 'sha1_null_hash' was not declared. Should it be static?
    drivers/crypto/mxs-dcp.c:43:15: warning:
     symbol 'sha256_null_hash' was not declared. Should it be static?
    
    Fixes: c709eebaf5c5 ("crypto: mxs-dcp - Fix SHA null hashes and output length")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae5c871faee27fd782a2e661820a1a7fea44d16e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Feb 28 14:32:48 2018 +0100

    net: ipv4: avoid unused variable warning for sysctl
    
    commit 773daa3caf5d3f87fdb1ab43e9c1b367a38fa394 upstream.
    
    The newly introudced ip_min_valid_pmtu variable is only used when
    CONFIG_SYSCTL is set:
    
    net/ipv4/route.c:135:12: error: 'ip_min_valid_pmtu' defined but not used [-Werror=unused-variable]
    
    This moves it to the other variables like it, to avoid the harmless
    warning.
    
    Fixes: c7272c2f1229 ("net: ipv4: don't allow setting net.ipv4.route.min_pmtu below 68")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a3bb8e0f826844db633e17998abd31f1f7bafde
Author: Nicolai Stange <nstange@suse.de>
Date:   Mon Jan 8 15:54:44 2018 +0100

    net: ipv4: emulate READ_ONCE() on ->hdrincl bit-field in raw_sendmsg()
    
    commit 20b50d79974ea3192e8c3ab7faf4e536e5f14d8f upstream.
    
    Commit 8f659a03a0ba ("net: ipv4: fix for a race condition in
    raw_sendmsg") fixed the issue of possibly inconsistent ->hdrincl handling
    due to concurrent updates by reading this bit-field member into a local
    variable and using the thus stabilized value in subsequent tests.
    
    However, aforementioned commit also adds the (correct) comment that
    
      /* hdrincl should be READ_ONCE(inet->hdrincl)
       * but READ_ONCE() doesn't work with bit fields
       */
    
    because as it stands, the compiler is free to shortcut or even eliminate
    the local variable at its will.
    
    Note that I have not seen anything like this happening in reality and thus,
    the concern is a theoretical one.
    
    However, in order to be on the safe side, emulate a READ_ONCE() on the
    bit-field by doing it on the local 'hdrincl' variable itself:
    
            int hdrincl = inet->hdrincl;
            hdrincl = READ_ONCE(hdrincl);
    
    This breaks the chain in the sense that the compiler is not allowed
    to replace subsequent reads from hdrincl with reloads from inet->hdrincl.
    
    Fixes: 8f659a03a0ba ("net: ipv4: fix for a race condition in raw_sendmsg")
    Signed-off-by: Nicolai Stange <nstange@suse.de>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0cd27b282dcb426b4b9aeba409e03efe460fd4c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Apr 27 17:17:35 2018 +0200

    ALSA: hda - Fix incorrect usage of IS_REACHABLE()
    
    commit 6a30abaa40b62aed46ef12ea4c16c48565bdb376 upstream.
    
    The commit c469652bb5e8 ("ALSA: hda - Use IS_REACHABLE() for
    dependency on input") simplified the dependencies with IS_REACHABLE()
    macro, but it broke due to its incorrect usage: it should have been
    IS_REACHABLE(CONFIG_INPUT) instead of IS_REACHABLE(INPUT).
    
    Fixes: c469652bb5e8 ("ALSA: hda - Use IS_REACHABLE() for dependency on input")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16fff53a5ebf161155848ad83a02fe026fc8d360
Author: Dmitry Monakhov <dmonakhov@gmail.com>
Date:   Wed Nov 6 12:25:02 2019 +0000

    ext4: fix extent_status fragmentation for plain files
    
    commit 4068664e3cd2312610ceac05b74c4cf1853b8325 upstream.
    
    Extents are cached in read_extent_tree_block(); as a result, extents
    are not cached for inodes with depth == 0 when we try to find the
    extent using ext4_find_extent().  The result of the lookup is cached
    in ext4_map_blocks() but is only a subset of the extent on disk.  As a
    result, the contents of extents status cache can get very badly
    fragmented for certain workloads, such as a random 4k read workload.
    
    File size of /mnt/test is 33554432 (8192 blocks of 4096 bytes)
     ext:     logical_offset:        physical_offset: length:   expected: flags:
       0:        0..    8191:      40960..     49151:   8192:             last,eof
    
    $ perf record -e 'ext4:ext4_es_*' /root/bin/fio --name=t --direct=0 --rw=randread --bs=4k --filesize=32M --size=32M --filename=/mnt/test
    $ perf script | grep ext4_es_insert_extent | head -n 10
                 fio   131 [000]    13.975421:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [494/1) mapped 41454 status W
                 fio   131 [000]    13.975939:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [6064/1) mapped 47024 status W
                 fio   131 [000]    13.976467:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [6907/1) mapped 47867 status W
                 fio   131 [000]    13.976937:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [3850/1) mapped 44810 status W
                 fio   131 [000]    13.977440:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [3292/1) mapped 44252 status W
                 fio   131 [000]    13.977931:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [6882/1) mapped 47842 status W
                 fio   131 [000]    13.978376:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [3117/1) mapped 44077 status W
                 fio   131 [000]    13.978957:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [2896/1) mapped 43856 status W
                 fio   131 [000]    13.979474:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [7479/1) mapped 48439 status W
    
    Fix this by caching the extents for inodes with depth == 0 in
    ext4_find_extent().
    
    [ Renamed ext4_es_cache_extents() to ext4_cache_extents() since this
      newly added function is not in extents_cache.c, and to avoid
      potential visual confusion with ext4_es_cache_extent().  -TYT ]
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@gmail.com>
    Link: https://lore.kernel.org/r/20191106122502.19986-1-dmonakhov@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
