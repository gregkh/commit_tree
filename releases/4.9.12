commit ae7d43192ff29ca68706948362acbc3a6da7408f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Feb 23 17:44:51 2017 +0100

    Linux 4.9.12

commit 7b071234537686546c5f05fdcb40a33ade2f6b04
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Fri Feb 10 07:18:36 2017 -0200

    videodev2.h: go back to limited range Y'CbCr for SRGB and, ADOBERGB
    
    commit 35879ee4769099905fa3bda0b21e73d434e2df6a upstream.
    
    This reverts 'commit 7e0739cd9c40 ("[media] videodev2.h: fix
    sYCC/AdobeYCC default quantization range").
    
    The problem is that many drivers can convert R'G'B' content (often
    from sensors) to Y'CbCr, but they all produce limited range Y'CbCr.
    
    To stay backwards compatible the default quantization range for
    sRGB and AdobeRGB Y'CbCr encoding should be limited range, not full
    range, even though the corresponding standards specify full range.
    
    Update the V4L2_MAP_QUANTIZATION_DEFAULT define accordingly and
    also update the documentation.
    
    Fixes: 7e0739cd9c40 ("[media] videodev2.h: fix sYCC/AdobeYCC default quantization range")
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8629aed2387cd22d1bde76e798034c3ea31018f7
Author: Kent Overstreet <kent.overstreet@gmail.com>
Date:   Wed Oct 26 20:31:17 2016 -0700

    bcache: Make gc wakeup sane, remove set_task_state()
    
    commit be628be09563f8f6e81929efbd7cf3f45c344416 upstream.
    
    Signed-off-by: Kent Overstreet <kent.overstreet@gmail.com>
    Cc: Coly Li <colyli@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68214ad3926c7dd829e2f810b6af6fe7c76fd3da
Author: Thomas VanSelus <tvanselus@xes-inc.com>
Date:   Mon Feb 13 16:46:26 2017 -0600

    ntb_transport: Pick an unused queue
    
    commit 8fcd0950c021d7be8493280541332b924b9de962 upstream.
    
    Fix typo causing ntb_transport_create_queue to select the first
    queue every time, instead of using the next free queue.
    
    Signed-off-by: Thomas VanSelus <tvanselus@xes-inc.com>
    Signed-off-by: Aaron Sierra <asierra@xes-inc.com>
    Acked-by: Allen Hubbe <Allen.Hubbe@dell.com>
    Fixes: fce8a7bb5 ("PCI-Express Non-Transparent Bridge Support")
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4202601509465c3d2e96b6bfd4a1237ac4268d1
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Mon Jan 30 14:21:17 2017 -0700

    ntb: ntb_perf missing dmaengine_unmap_put
    
    commit 9644347c5240d0ee3ba7472ef332aaa4ff4db398 upstream.
    
    In the normal I/O execution path, ntb_perf is missing a call to
    dmaengine_unmap_put() after submission. That causes us to leak
    unmap objects.
    
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Fixes: 8a7b6a77 ("ntb: ntb perf tool")
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43325382fc7a216f2087d7dfdc662e30e952adf1
Author: Allen Hubbe <Allen.Hubbe@dell.com>
Date:   Tue Dec 27 17:57:04 2016 -0500

    NTB: ntb_transport: fix debugfs_remove_recursive
    
    commit dd62245e73de9138333cb0e7a42c8bc1215c3ce6 upstream.
    
    The call to debugfs_remove_recursive(qp->debugfs_dir) of the sub-level
    directory must not be later than
    debugfs_remove_recursive(nt_debugfs_dir) of the top-level directory.
    Otherwise, the sub-level directory will not exist, and it would be
    invalid (panic) to attempt to remove it.  This removes the top-level
    directory last, after sub-level directories have been cleaned up.
    
    Signed-off-by: Allen Hubbe <Allen.Hubbe@dell.com>
    Fixes: e26a5843f ("NTB: Split ntb_hw_intel and ntb_transport drivers")
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 215d4d62ccfd585854b17f621342762784dde8c3
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Wed Feb 15 13:43:32 2017 +0900

    timekeeping: Use deferred printk() in debug code
    
    commit f222449c9dfad7c9bb8cb53e64c5c407b172ebbc upstream.
    
    We cannot do printk() from tk_debug_account_sleep_time(), because
    tk_debug_account_sleep_time() is called under tk_core seq lock.
    The reason why printk() is unsafe there is that console_sem may
    invoke scheduler (up()->wake_up_process()->activate_task()), which,
    in turn, can return back to timekeeping code, for instance, via
    get_time()->ktime_get(), deadlocking the system on tk_core seq lock.
    
    [   48.950592] ======================================================
    [   48.950622] [ INFO: possible circular locking dependency detected ]
    [   48.950622] 4.10.0-rc7-next-20170213+ #101 Not tainted
    [   48.950622] -------------------------------------------------------
    [   48.950622] kworker/0:0/3 is trying to acquire lock:
    [   48.950653]  (tk_core){----..}, at: [<c01cc624>] retrigger_next_event+0x4c/0x90
    [   48.950683]
                   but task is already holding lock:
    [   48.950683]  (hrtimer_bases.lock){-.-...}, at: [<c01cc610>] retrigger_next_event+0x38/0x90
    [   48.950714]
                   which lock already depends on the new lock.
    
    [   48.950714]
                   the existing dependency chain (in reverse order) is:
    [   48.950714]
                   -> #5 (hrtimer_bases.lock){-.-...}:
    [   48.950744]        _raw_spin_lock_irqsave+0x50/0x64
    [   48.950775]        lock_hrtimer_base+0x28/0x58
    [   48.950775]        hrtimer_start_range_ns+0x20/0x5c8
    [   48.950775]        __enqueue_rt_entity+0x320/0x360
    [   48.950805]        enqueue_rt_entity+0x2c/0x44
    [   48.950805]        enqueue_task_rt+0x24/0x94
    [   48.950836]        ttwu_do_activate+0x54/0xc0
    [   48.950836]        try_to_wake_up+0x248/0x5c8
    [   48.950836]        __setup_irq+0x420/0x5f0
    [   48.950836]        request_threaded_irq+0xdc/0x184
    [   48.950866]        devm_request_threaded_irq+0x58/0xa4
    [   48.950866]        omap_i2c_probe+0x530/0x6a0
    [   48.950897]        platform_drv_probe+0x50/0xb0
    [   48.950897]        driver_probe_device+0x1f8/0x2cc
    [   48.950897]        __driver_attach+0xc0/0xc4
    [   48.950927]        bus_for_each_dev+0x6c/0xa0
    [   48.950927]        bus_add_driver+0x100/0x210
    [   48.950927]        driver_register+0x78/0xf4
    [   48.950958]        do_one_initcall+0x3c/0x16c
    [   48.950958]        kernel_init_freeable+0x20c/0x2d8
    [   48.950958]        kernel_init+0x8/0x110
    [   48.950988]        ret_from_fork+0x14/0x24
    [   48.950988]
                   -> #4 (&rt_b->rt_runtime_lock){-.-...}:
    [   48.951019]        _raw_spin_lock+0x40/0x50
    [   48.951019]        rq_offline_rt+0x9c/0x2bc
    [   48.951019]        set_rq_offline.part.2+0x2c/0x58
    [   48.951049]        rq_attach_root+0x134/0x144
    [   48.951049]        cpu_attach_domain+0x18c/0x6f4
    [   48.951049]        build_sched_domains+0xba4/0xd80
    [   48.951080]        sched_init_smp+0x68/0x10c
    [   48.951080]        kernel_init_freeable+0x160/0x2d8
    [   48.951080]        kernel_init+0x8/0x110
    [   48.951080]        ret_from_fork+0x14/0x24
    [   48.951110]
                   -> #3 (&rq->lock){-.-.-.}:
    [   48.951110]        _raw_spin_lock+0x40/0x50
    [   48.951141]        task_fork_fair+0x30/0x124
    [   48.951141]        sched_fork+0x194/0x2e0
    [   48.951141]        copy_process.part.5+0x448/0x1a20
    [   48.951171]        _do_fork+0x98/0x7e8
    [   48.951171]        kernel_thread+0x2c/0x34
    [   48.951171]        rest_init+0x1c/0x18c
    [   48.951202]        start_kernel+0x35c/0x3d4
    [   48.951202]        0x8000807c
    [   48.951202]
                   -> #2 (&p->pi_lock){-.-.-.}:
    [   48.951232]        _raw_spin_lock_irqsave+0x50/0x64
    [   48.951232]        try_to_wake_up+0x30/0x5c8
    [   48.951232]        up+0x4c/0x60
    [   48.951263]        __up_console_sem+0x2c/0x58
    [   48.951263]        console_unlock+0x3b4/0x650
    [   48.951263]        vprintk_emit+0x270/0x474
    [   48.951293]        vprintk_default+0x20/0x28
    [   48.951293]        printk+0x20/0x30
    [   48.951324]        kauditd_hold_skb+0x94/0xb8
    [   48.951324]        kauditd_thread+0x1a4/0x56c
    [   48.951324]        kthread+0x104/0x148
    [   48.951354]        ret_from_fork+0x14/0x24
    [   48.951354]
                   -> #1 ((console_sem).lock){-.....}:
    [   48.951385]        _raw_spin_lock_irqsave+0x50/0x64
    [   48.951385]        down_trylock+0xc/0x2c
    [   48.951385]        __down_trylock_console_sem+0x24/0x80
    [   48.951385]        console_trylock+0x10/0x8c
    [   48.951416]        vprintk_emit+0x264/0x474
    [   48.951416]        vprintk_default+0x20/0x28
    [   48.951416]        printk+0x20/0x30
    [   48.951446]        tk_debug_account_sleep_time+0x5c/0x70
    [   48.951446]        __timekeeping_inject_sleeptime.constprop.3+0x170/0x1a0
    [   48.951446]        timekeeping_resume+0x218/0x23c
    [   48.951477]        syscore_resume+0x94/0x42c
    [   48.951477]        suspend_enter+0x554/0x9b4
    [   48.951477]        suspend_devices_and_enter+0xd8/0x4b4
    [   48.951507]        enter_state+0x934/0xbd4
    [   48.951507]        pm_suspend+0x14/0x70
    [   48.951507]        state_store+0x68/0xc8
    [   48.951538]        kernfs_fop_write+0xf4/0x1f8
    [   48.951538]        __vfs_write+0x1c/0x114
    [   48.951538]        vfs_write+0xa0/0x168
    [   48.951568]        SyS_write+0x3c/0x90
    [   48.951568]        __sys_trace_return+0x0/0x10
    [   48.951568]
                   -> #0 (tk_core){----..}:
    [   48.951599]        lock_acquire+0xe0/0x294
    [   48.951599]        ktime_get_update_offsets_now+0x5c/0x1d4
    [   48.951629]        retrigger_next_event+0x4c/0x90
    [   48.951629]        on_each_cpu+0x40/0x7c
    [   48.951629]        clock_was_set_work+0x14/0x20
    [   48.951660]        process_one_work+0x2b4/0x808
    [   48.951660]        worker_thread+0x3c/0x550
    [   48.951660]        kthread+0x104/0x148
    [   48.951690]        ret_from_fork+0x14/0x24
    [   48.951690]
                   other info that might help us debug this:
    
    [   48.951690] Chain exists of:
                     tk_core --> &rt_b->rt_runtime_lock --> hrtimer_bases.lock
    
    [   48.951721]  Possible unsafe locking scenario:
    
    [   48.951721]        CPU0                    CPU1
    [   48.951721]        ----                    ----
    [   48.951721]   lock(hrtimer_bases.lock);
    [   48.951751]                                lock(&rt_b->rt_runtime_lock);
    [   48.951751]                                lock(hrtimer_bases.lock);
    [   48.951751]   lock(tk_core);
    [   48.951782]
                    *** DEADLOCK ***
    
    [   48.951782] 3 locks held by kworker/0:0/3:
    [   48.951782]  #0:  ("events"){.+.+.+}, at: [<c0156590>] process_one_work+0x1f8/0x808
    [   48.951812]  #1:  (hrtimer_work){+.+...}, at: [<c0156590>] process_one_work+0x1f8/0x808
    [   48.951843]  #2:  (hrtimer_bases.lock){-.-...}, at: [<c01cc610>] retrigger_next_event+0x38/0x90
    [   48.951843]   stack backtrace:
    [   48.951873] CPU: 0 PID: 3 Comm: kworker/0:0 Not tainted 4.10.0-rc7-next-20170213+
    [   48.951904] Workqueue: events clock_was_set_work
    [   48.951904] [<c0110208>] (unwind_backtrace) from [<c010c224>] (show_stack+0x10/0x14)
    [   48.951934] [<c010c224>] (show_stack) from [<c04ca6c0>] (dump_stack+0xac/0xe0)
    [   48.951934] [<c04ca6c0>] (dump_stack) from [<c019b5cc>] (print_circular_bug+0x1d0/0x308)
    [   48.951965] [<c019b5cc>] (print_circular_bug) from [<c019d2a8>] (validate_chain+0xf50/0x1324)
    [   48.951965] [<c019d2a8>] (validate_chain) from [<c019ec18>] (__lock_acquire+0x468/0x7e8)
    [   48.951995] [<c019ec18>] (__lock_acquire) from [<c019f634>] (lock_acquire+0xe0/0x294)
    [   48.951995] [<c019f634>] (lock_acquire) from [<c01d0ea0>] (ktime_get_update_offsets_now+0x5c/0x1d4)
    [   48.952026] [<c01d0ea0>] (ktime_get_update_offsets_now) from [<c01cc624>] (retrigger_next_event+0x4c/0x90)
    [   48.952026] [<c01cc624>] (retrigger_next_event) from [<c01e4e24>] (on_each_cpu+0x40/0x7c)
    [   48.952056] [<c01e4e24>] (on_each_cpu) from [<c01cafc4>] (clock_was_set_work+0x14/0x20)
    [   48.952056] [<c01cafc4>] (clock_was_set_work) from [<c015664c>] (process_one_work+0x2b4/0x808)
    [   48.952087] [<c015664c>] (process_one_work) from [<c0157774>] (worker_thread+0x3c/0x550)
    [   48.952087] [<c0157774>] (worker_thread) from [<c015d644>] (kthread+0x104/0x148)
    [   48.952087] [<c015d644>] (kthread) from [<c0107830>] (ret_from_fork+0x14/0x24)
    
    Replace printk() with printk_deferred(), which does not call into
    the scheduler.
    
    Fixes: 0bf43f15db85 ("timekeeping: Prints the amounts of time spent during suspend")
    Reported-and-tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: "Rafael J . Wysocki" <rjw@rjwysocki.net>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20170215044332.30449-1-sergey.senozhatsky@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ee210365adf1cfc0b5c3ca9fc7b55241e7fd225
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Sat Feb 18 03:42:54 2017 -0800

    printk: use rcuidle console tracepoint
    
    commit fc98c3c8c9dcafd67adcce69e6ce3191d5306c9c upstream.
    
    Use rcuidle console tracepoint because, apparently, it may be issued
    from an idle CPU:
    
      hw-breakpoint: Failed to enable monitor mode on CPU 0.
      hw-breakpoint: CPU 0 failed to disable vector catch
    
      ===============================
      [ ERR: suspicious RCU usage.  ]
      4.10.0-rc8-next-20170215+ #119 Not tainted
      -------------------------------
      ./include/trace/events/printk.h:32 suspicious rcu_dereference_check() usage!
    
      other info that might help us debug this:
    
      RCU used illegally from idle CPU!
      rcu_scheduler_active = 2, debug_locks = 0
      RCU used illegally from extended quiescent state!
      2 locks held by swapper/0/0:
       #0:  (cpu_pm_notifier_lock){......}, at: [<c0237e2c>] cpu_pm_exit+0x10/0x54
       #1:  (console_lock){+.+.+.}, at: [<c01ab350>] vprintk_emit+0x264/0x474
    
      stack backtrace:
      CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.10.0-rc8-next-20170215+ #119
      Hardware name: Generic OMAP4 (Flattened Device Tree)
        console_unlock
        vprintk_emit
        vprintk_default
        printk
        reset_ctrl_regs
        dbg_cpu_pm_notify
        notifier_call_chain
        cpu_pm_exit
        omap_enter_idle_coupled
        cpuidle_enter_state
        cpuidle_enter_state_coupled
        do_idle
        cpu_startup_entry
        start_kernel
    
    This RCU warning, however, is suppressed by lockdep_off() in printk().
    lockdep_off() increments the ->lockdep_recursion counter and thus
    disables RCU_LOCKDEP_WARN() and debug_lockdep_rcu_enabled(), which want
    lockdep to be enabled "current->lockdep_recursion == 0".
    
    Link: http://lkml.kernel.org/r/20170217015932.11898-1-sergey.senozhatsky@gmail.com
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reported-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Russell King <rmk@armlinux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c3765bbc1dbc54b6805e834deed0008e9afc1dd
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Tue Feb 14 21:17:48 2017 -0800

    PCI/PME: Restore pcie_pme_driver.remove
    
    commit afe3e4d11bdf50a4c3965eb6465ba6bebbcf5dcf upstream.
    
    In addition to making PME non-modular, d7def2040077 ("PCI/PME: Make
    explicitly non-modular") removed the pcie_pme_driver .remove() method,
    pcie_pme_remove().
    
    pcie_pme_remove() freed the PME IRQ that was requested in pci_pme_probe().
    The fact that we don't free the IRQ after d7def2040077 causes the following
    crash when removing a PCIe port device via /sys:
    
      ------------[ cut here ]------------
      kernel BUG at drivers/pci/msi.c:370!
      invalid opcode: 0000 [#1] SMP
      Modules linked in:
      CPU: 1 PID: 14509 Comm: sh Tainted: G    W  4.8.0-rc1-yh-00012-gd29438d
      RIP: 0010:[<ffffffff9758bbf5>]  free_msi_irqs+0x65/0x190
      ...
      Call Trace:
       [<ffffffff9758cda4>] pci_disable_msi+0x34/0x40
       [<ffffffff97583817>] cleanup_service_irqs+0x27/0x30
       [<ffffffff97583e9a>] pcie_port_device_remove+0x2a/0x40
       [<ffffffff97584250>] pcie_portdrv_remove+0x40/0x50
       [<ffffffff97576d7b>] pci_device_remove+0x4b/0xc0
       [<ffffffff9785ebe6>] __device_release_driver+0xb6/0x150
       [<ffffffff9785eca5>] device_release_driver+0x25/0x40
       [<ffffffff975702e4>] pci_stop_bus_device+0x74/0xa0
       [<ffffffff975704ea>] pci_stop_and_remove_bus_device_locked+0x1a/0x30
       [<ffffffff97578810>] remove_store+0x50/0x70
       [<ffffffff9785a378>] dev_attr_store+0x18/0x30
       [<ffffffff97260b64>] sysfs_kf_write+0x44/0x60
       [<ffffffff9725feae>] kernfs_fop_write+0x10e/0x190
       [<ffffffff971e13f8>] __vfs_write+0x28/0x110
       [<ffffffff970b0fa4>] ? percpu_down_read+0x44/0x80
       [<ffffffff971e53a7>] ? __sb_start_write+0xa7/0xe0
       [<ffffffff971e53a7>] ? __sb_start_write+0xa7/0xe0
       [<ffffffff971e1f04>] vfs_write+0xc4/0x180
       [<ffffffff971e3089>] SyS_write+0x49/0xa0
       [<ffffffff97001a46>] do_syscall_64+0xa6/0x1b0
       [<ffffffff9819201e>] entry_SYSCALL64_slow_path+0x25/0x25
      ...
       RIP  [<ffffffff9758bbf5>] free_msi_irqs+0x65/0x190
       RSP <ffff89ad3085bc48>
      ---[ end trace f4505e1dac5b95d3 ]---
      Segmentation fault
    
    Restore pcie_pme_remove().
    
    [bhelgaas: changelog]
    Fixes: d7def2040077 ("PCI/PME: Make explicitly non-modular")
    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a41582788243a0258a3e2462bd6e06a18900cc
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Mon Feb 13 11:18:19 2017 +0200

    Revert "i2c: designware: detect when dynamic tar update is possible"
    
    commit 12688dc21f71f4dcc9e2b8b5556b0c6cc8df1491 upstream.
    
    This reverts commit 63d0f0a6952a1a02bc4f116b7da7c7887e46efa3.
    
    It caused a regression on platforms where I2C controller is synthesized
    with dynamic TAR update disabled. Detection code is testing is bit
    DW_IC_CON_10BITADDR_MASTER in register DW_IC_CON read-only but fails to
    restore original value in case bit is read-write.
    
    Instead of fixing this we revert the commit since it was preparation for
    the commit 0317e6c0f1dc ("i2c: designware: do not disable adapter after
    transfer") which was also reverted.
    
    Reported-by: Shah Nehal-Bakulchandra <Nehal-bakulchandra.Shah@amd.com>
    Reported-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Acked-By: Lucas De Marchi <lucas.demarchi@intel.com>
    Fixes: 63d0f0a6952a ("i2c: designware: detect when dynamic tar update is possible")
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17c443421458ea699e044bf2903c236aabbe304a
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 16 01:44:37 2017 +0100

    ARM: 8658/1: uaccess: fix zeroing of 64-bit get_user()
    
    commit 9e3440481845b2ec22508f60837ee2cab2b6054f upstream.
    
    The 64-bit get_user() wasn't clearing the high word due to a typo in the
    error handler. The exception handler entry was already correct, though.
    Noticed during recent usercopy test additions in lib/test_user_copy.c.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 808de347ebd45575e12c2f20bebbdf4233270952
Author: Yang Yang <yang.yang29@zte.com.cn>
Date:   Fri Dec 30 16:17:55 2016 +0800

    futex: Move futex_init() to core_initcall
    
    commit 25f71d1c3e98ef0e52371746220d66458eac75bc upstream.
    
    The UEVENT user mode helper is enabled before the initcalls are executed
    and is available when the root filesystem has been mounted.
    
    The user mode helper is triggered by device init calls and the executable
    might use the futex syscall.
    
    futex_init() is marked __initcall which maps to device_initcall, but there
    is no guarantee that futex_init() is invoked _before_ the first device init
    call which triggers the UEVENT user mode helper.
    
    If the user mode helper uses the futex syscall before futex_init() then the
    syscall crashes with a NULL pointer dereference because the futex subsystem
    has not been initialized yet.
    
    Move futex_init() to core_initcall so futexes are initialized before the
    root filesystem is mounted and the usermode helper becomes available.
    
    [ tglx: Rewrote changelog ]
    
    Signed-off-by: Yang Yang <yang.yang29@zte.com.cn>
    Cc: jiang.biao2@zte.com.cn
    Cc: jiang.zhengxiong@zte.com.cn
    Cc: zhong.weidong@zte.com.cn
    Cc: deng.huali@zte.com.cn
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1483085875-6130-1-git-send-email-yang.yang29@zte.com.cn
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfe8f5757ec4889bff8e534d44db0a3ecfac11eb
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Feb 14 14:49:21 2017 +0200

    drm/dp/mst: fix kernel oops when turning off secondary monitor
    
    commit bb08c04dc867b5f392caec635c097d5d5fcd8c9f upstream.
    
    100% reproducible issue found on SKL SkullCanyon NUC with two external
    DP daisy-chained monitors in DP/MST mode. When turning off or changing
    the input of the second monitor the machine stops with a kernel
    oops. This issue happened with 4.8.8 as well as drm/drm-intel-nightly.
    
    This issue is traced to an inconsistent control flow in
    drm_dp_update_payload_part1(): the 'port' pointer is set to NULL at the
    same time as 'req_payload.num_slots' is set to zero, but the pointer is
    dereferenced even when req_payload.num_slot is zero.
    
    The problematic dereference was introduced in commit dfda0df34
    ("drm/mst: rework payload table allocation to conform better") and may
    impact all versions since v3.18
    
    The fix suggested by Chris Wilson removes the kernel oops and was found to
    work well after 10mn of monkey-testing with the second monitor power and
    input buttons
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=98990
    Fixes: dfda0df34264 ("drm/mst: rework payload table allocation to conform better.")
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Nathan D Ciobanu <nathan.d.ciobanu@linux.intel.com>
    Cc: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Tested-by: Nathan D Ciobanu <nathan.d.ciobanu@linux.intel.com>
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1487076561-2169-1-git-send-email-jani.nikula@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7499da90c0ccaabea9b2b71f3f9c5603585715db
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Wed Feb 15 11:28:45 2017 +0900

    drm/radeon: Use mode h/vdisplay fields to hide out of bounds HW cursor
    
    commit d74c67dd7800fc7aae381f272875c337f268806c upstream.
    
    The crtc_h/vdisplay fields may not match the CRTC viewport dimensions
    with special modes such as interlaced ones.
    
    Fixes the HW cursor disappearing in the bottom half of the screen with
    interlaced modes.
    
    Fixes: 6b16cf7785a4 ("drm/radeon: Hide the HW cursor while it's out of bounds")
    Reported-by: Ashutosh Kumar <ashutosh.kumar@amd.com>
    Tested-by: Sonny Jiang <sonny.jiang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19d2d869d00e37004e6c49ed0384167f701b3bdd
Author: IHARA Hiroka <ihara_h@live.jp>
Date:   Sun Feb 12 18:34:53 2017 -0800

    Input: elan_i2c - add ELAN0605 to the ACPI table
    
    commit 722c5ac708b4f5c1fcfad5fed4c95234c8b06590 upstream.
    
    ELAN0605 has been confirmed to be a variant of ELAN0600, which is
    blacklisted in the hid-core to be managed by elan_i2c. This device can be
    found in Lenovo ideapad 310s (80U4000).
    
    Signed-off-by: Hiroka IHARA <ihara_h@live.jp>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a975e8e81e5533786b2120d053203b47e07d6c1d
Author: Al Viro <viro@ZenIV.linux.org.uk>
Date:   Sun Feb 19 07:15:27 2017 +0000

    Fix missing sanity check in /dev/sg
    
    commit 137d01df511b3afe1f05499aea05f3bafc0fb221 upstream.
    
    What happens is that a write to /dev/sg is given a request with non-zero
    ->iovec_count combined with zero ->dxfer_len.  Or with ->dxferp pointing
    to an array full of empty iovecs.
    
    Having write permission to /dev/sg shouldn't be equivalent to the
    ability to trigger BUG_ON() while holding spinlocks...
    
    Found by Dmitry Vyukov and syzkaller.
    
    [ The BUG_ON() got changed to a WARN_ON_ONCE(), but this fixes the
      underlying issue.  - Linus ]
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a026c97e8824cdc0d9574e360128b0c2bb0355a5
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Tue Jan 31 10:16:00 2017 +0100

    scsi: don't BUG_ON() empty DMA transfers
    
    commit fd3fc0b4d7305fa7246622dcc0dec69c42443f45 upstream.
    
    Don't crash the machine just because of an empty transfer. Use WARN_ON()
    combined with returning an error.
    
    Found by Dmitry Vyukov and syzkaller.
    
    [ Changed to "WARN_ON_ONCE()". Al has a patch that should fix the root
      cause, but a BUG_ON() is not acceptable in any case, and a WARN_ON()
      might still be a cause of excessive log spamming.
    
      NOTE! If this warning ever triggers, we may end up leaking resources,
      since this doesn't bother to try to clean the command up. So this
      WARN_ON_ONCE() triggering does imply real problems. But BUG_ON() is
      much worse.
    
      People really need to stop using BUG_ON() for "this shouldn't ever
      happen". It makes pretty much any bug worse.     - Linus ]
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: James Bottomley <jejb@linux.vnet.ibm.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 920b60aa3cc2ca5b1f018bbd06f66cdf06b6eac7
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu Feb 16 13:49:21 2017 +1100

    powerpc/64: Disable use of radix under a hypervisor
    
    commit 3f91a89d424a79f8082525db5a375e438887bb3e upstream.
    
    Currently, if the kernel is running on a POWER9 processor under a
    hypervisor, it may try to use the radix MMU even though it doesn't have
    the necessary code to do so (it doesn't negotiate use of radix, and it
    doesn't do the H_REGISTER_PROC_TBL hcall).  If the hypervisor supports
    both radix and HPT, then it will set up the guest to use HPT (since the
    guest doesn't request radix in the CAS call), but if the radix feature
    bit is set in the ibm,pa-features property (which is valid, since
    ibm,pa-features is defined to represent the capabilities of the
    processor) the guest will try to use radix, resulting in a crash when
    it turns the MMU on.
    
    This makes the minimal fix for the current code, which is to disable
    radix unless we are running in hypervisor mode.
    
    Fixes: 2bfd65e45e87 ("powerpc/mm/radix: Add radix callbacks for early init routines")
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef746a305de321a117723e664d57f7f4c2e2ac99
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Feb 13 13:46:41 2017 +0200

    mmc: core: fix multi-bit bus width without high-speed mode
    
    commit 3d4ef329757cfd5e0b23cce97cdeca7e2df89c99 upstream.
    
    Commit 577fb13199b1 ("mmc: rework selection of bus speed mode")
    refactored bus width selection code to mmc_select_bus_width().
    
    However, it also altered the behavior to not call the selection code in
    non-high-speed modes anymore.
    
    This causes 1-bit mode to always be used when the high-speed mode is not
    enabled, even though 4-bit and 8-bit bus are valid bus widths in the
    backwards-compatibility (legacy) mode as well (see e.g. 5.3.2 Bus Speed
    Modes in JEDEC 84-B50). This results in a significant regression in
    transfer speeds.
    
    Fix the code to allow 4-bit and 8-bit widths even without high-speed
    mode, as before.
    
    Tested with a Zynq-7000 PicoZed 7020 board.
    
    Fixes: 577fb13199b1 ("mmc: rework selection of bus speed mode")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80a0477665d050e6e8aed0519f62a691a573fd07
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Feb 16 15:08:20 2017 +0100

    fuse: fix uninitialized flags in pipe_buffer
    
    commit 84588a93d097bace24b9233930f82511d4f34210 upstream.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: d82718e348fe ("fuse_dev_splice_read(): switch to add_to_pipe()")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7283448f8273e661c09001909345af2e41fc4a5f
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Feb 8 20:30:56 2017 +0530

    fuse: fix use after free issue in fuse_dev_do_read()
    
    commit 6ba4d2722d06960102c981322035239cd66f7316 upstream.
    
    There is a potential race between fuse_dev_do_write()
    and request_wait_answer() contexts as shown below:
    
    TASK 1:
    __fuse_request_send():
      |--spin_lock(&fiq->waitq.lock);
      |--queue_request();
      |--spin_unlock(&fiq->waitq.lock);
      |--request_wait_answer():
           |--if (test_bit(FR_SENT, &req->flags))
           <gets pre-empted after it is validated true>
                                       TASK 2:
                                       fuse_dev_do_write():
                                         |--clears bit FR_SENT,
                                         |--request_end():
                                            |--sets bit FR_FINISHED
                                            |--spin_lock(&fiq->waitq.lock);
                                            |--list_del_init(&req->intr_entry);
                                            |--spin_unlock(&fiq->waitq.lock);
                                            |--fuse_put_request();
           |--queue_interrupt();
           <request gets queued to interrupts list>
                |--wake_up_locked(&fiq->waitq);
           |--wait_event_freezable();
           <as FR_FINISHED is set, it returns and then
           the caller frees this request>
    
    Now, the next fuse_dev_do_read(), see interrupts list is not empty
    and then calls fuse_read_interrupt() which tries to access the request
    which is already free'd and gets the below crash:
    
    [11432.401266] Unable to handle kernel paging request at virtual address
    6b6b6b6b6b6b6b6b
    ...
    [11432.418518] Kernel BUG at ffffff80083720e0
    [11432.456168] PC is at __list_del_entry+0x6c/0xc4
    [11432.463573] LR is at fuse_dev_do_read+0x1ac/0x474
    ...
    [11432.679999] [<ffffff80083720e0>] __list_del_entry+0x6c/0xc4
    [11432.687794] [<ffffff80082c65e0>] fuse_dev_do_read+0x1ac/0x474
    [11432.693180] [<ffffff80082c6b14>] fuse_dev_read+0x6c/0x78
    [11432.699082] [<ffffff80081d5638>] __vfs_read+0xc0/0xe8
    [11432.704459] [<ffffff80081d5efc>] vfs_read+0x90/0x108
    [11432.709406] [<ffffff80081d67f0>] SyS_read+0x58/0x94
    
    As FR_FINISHED bit is set before deleting the intr_entry with input
    queue lock in request completion path, do the testing of this flag and
    queueing atomically with the same lock in queue_interrupt().
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: fd22d62ed0c3 ("fuse: no fc->lock for iqueue parts")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cf921be8fb98351b4b394d5c03a5ff718a0e679
Author: Mauro Carvalho Chehab <mchehab@kernel.org>
Date:   Tue Feb 14 17:47:57 2017 -0200

    siano: make it work again with CONFIG_VMAP_STACK
    
    commit f9c85ee67164b37f9296eab3b754e543e4e96a1c upstream.
    
    Reported as a Kaffeine bug:
            https://bugs.kde.org/show_bug.cgi?id=375811
    
    The USB control messages require DMA to work. We cannot pass
    a stack-allocated buffer, as it is not warranted that the
    stack would be into a DMA enabled area.
    
    On Kernel 4.9, the default is to not accept DMA on stack anymore
    on x86 architecture. On other architectures, this has been a
    requirement since Kernel 2.2. So, after this patch, this driver
    should likely work fine on all archs.
    
    Tested with USB ID 2040:5510: Hauppauge Windham
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 166a2464cdcf20d4809cc8bb4004241816393a7f
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Feb 16 17:49:02 2017 +0100

    vfs: fix uninitialized flags in splice_to_pipe()
    
    commit 5a81e6a171cdbd1fa8bc1fdd80c23d3d71816fac upstream.
    
    Flags (PIPE_BUF_FLAG_PACKET, PIPE_BUF_FLAG_GIFT) could remain on the
    unused part of the pipe ring buffer.  Previously splice_to_pipe() left
    the flags value alone, which could result in incorrect behavior.
    
    Uninitialized flags appears to have been there from the introduction of
    the splice syscall.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
