commit 96158f3a9e7027056a2e35cff5212434294b3b34
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 24 13:04:51 2018 +0200

    Linux 4.18.5

commit 0d63520b5fb4d6b82201ec23254ab8521c79f3f4
Author: Jann Horn <jannh@google.com>
Date:   Tue Aug 21 21:59:37 2018 -0700

    reiserfs: fix broken xattr handling (heap corruption, bad retval)
    
    commit a13f085d111e90469faf2d9965eb39b11c114d7e upstream.
    
    This fixes the following issues:
    
    - When a buffer size is supplied to reiserfs_listxattr() such that each
      individual name fits, but the concatenation of all names doesn't fit,
      reiserfs_listxattr() overflows the supplied buffer.  This leads to a
      kernel heap overflow (verified using KASAN) followed by an out-of-bounds
      usercopy and is therefore a security bug.
    
    - When a buffer size is supplied to reiserfs_listxattr() such that a
      name doesn't fit, -ERANGE should be returned.  But reiserfs instead just
      truncates the list of names; I have verified that if the only xattr on a
      file has a longer name than the supplied buffer length, listxattr()
      incorrectly returns zero.
    
    With my patch applied, -ERANGE is returned in both cases and the memory
    corruption doesn't happen anymore.
    
    Credit for making me clean this code up a bit goes to Al Viro, who pointed
    out that the ->actor calling convention is suboptimal and should be
    changed.
    
    Link: http://lkml.kernel.org/r/20180802151539.5373-1-jannh@google.com
    Fixes: 48b32a3553a5 ("reiserfs: use generic xattr handlers")
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: Jeff Mahoney <jeffm@suse.com>
    Cc: Eric Biggers <ebiggers@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bc1a91a5abd6695a6e84b106a95c9ef641fe1e0
Author: Esben Haabendal <eha@deif.com>
Date:   Thu Aug 16 10:43:12 2018 +0200

    i2c: imx: Fix race condition in dma read
    
    commit bed4ff1ed4d8f2ef5007c5c6ae1b29c5677a3632 upstream.
    
    This fixes a race condition, where the DMAEN bit ends up being set after
    I2C slave has transmitted a byte following the dummy read.  When that
    happens, an interrupt is generated instead, and no DMA request is generated
    to kickstart the DMA read, and a timeout happens after DMA_TIMEOUT (1 sec).
    
    Fixed by setting the DMAEN bit before the dummy read.
    
    Signed-off-by: Esben Haabendal <eha@deif.com>
    Acked-by: Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32d9b3638608a186ad83c8062ad4848a164d3b5b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Aug 12 12:53:20 2018 +0200

    i2c: core: ACPI: Properly set status byte to 0 for multi-byte writes
    
    commit c463a158cb6c5d9a85b7d894cd4f8116e8bd6be0 upstream.
    
    acpi_gsb_i2c_write_bytes() returns i2c_transfer()'s return value, which
    is the number of transfers executed on success, so 1.
    
    The ACPI code expects us to store 0 in gsb->status for success, not 1.
    
    Specifically this breaks the following code in the Thinkpad 8 DSDT:
    
                ECWR = I2CW = ECWR /* \_SB_.I2C1.BAT0.ECWR */
                If ((ECST == Zero))
                {
                    ECRD = I2CR /* \_SB_.I2C1.I2CR */
                }
    
    Before this commit we set ECST to 1, causing the read to never happen
    breaking battery monitoring on the Thinkpad 8.
    
    This commit makes acpi_gsb_i2c_write_bytes() return 0 when i2c_transfer()
    returns 1, so the single write transfer completed successfully, and
    makes it return -EIO on for other (unexpected) return values >= 0.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c1bd0d0edf0f34700aebfdc83ea0954e09e5971
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Jul 19 17:27:34 2018 -0500

    PCI: pciehp: Fix unprotected list iteration in IRQ handler
    
    commit 1204e35bedf4e5015cda559ed8c84789a6dae24e upstream.
    
    Commit b440bde74f04 ("PCI: Add pci_ignore_hotplug() to ignore hotplug
    events for a device") iterates over the devices on a hotplug port's
    subordinate bus in pciehp's IRQ handler without acquiring pci_bus_sem.
    It is thus possible for a user to cause a crash by concurrently
    manipulating the device list, e.g. by disabling slot power via sysfs
    on a different CPU or by initiating a remove/rescan via sysfs.
    
    This can't be fixed by acquiring pci_bus_sem because it may sleep.
    The simplest fix is to avoid the list iteration altogether and just
    check the ignore_hotplug flag on the port itself.  This works because
    pci_ignore_hotplug() sets the flag both on the device as well as on its
    parent bridge.
    
    We do lose the ability to print the name of the device blocking hotplug
    in the debug message, but that's probably bearable.
    
    Fixes: b440bde74f04 ("PCI: Add pci_ignore_hotplug() to ignore hotplug events for a device")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2de0279ac99ef40fa72a8ff8328d92833c114784
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Jul 19 17:27:32 2018 -0500

    PCI: pciehp: Fix use-after-free on unplug
    
    commit 281e878eab191cce4259abbbf1a0322e3adae02c upstream.
    
    When pciehp is unbound (e.g. on unplug of a Thunderbolt device), the
    hotplug_slot struct is deregistered and thus freed before freeing the
    IRQ.  The IRQ handler and the work items it schedules print the slot
    name referenced from the freed structure in various informational and
    debug log messages, each time resulting in a quadruple dereference of
    freed pointers (hotplug_slot -> pci_slot -> kobject -> name).
    
    At best the slot name is logged as "(null)", at worst kernel memory is
    exposed in logs or the driver crashes:
    
      pciehp 0000:10:00.0:pcie204: Slot((null)): Card not present
    
    An attacker may provoke the bug by unplugging multiple devices on a
    Thunderbolt daisy chain at once.  Unplugging can also be simulated by
    powering down slots via sysfs.  The bug is particularly easy to trigger
    in poll mode.
    
    It has been present since the driver's introduction in 2004:
    https://git.kernel.org/tglx/history/c/c16b4b14d980
    
    Fix by rearranging teardown such that the IRQ is freed first.  Run the
    work items queued by the IRQ handler to completion before freeing the
    hotplug_slot struct by draining the work queue from the ->release_slot
    callback which is invoked by pci_hp_deregister().
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org # v2.6.4
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2d937b786217c98c62dd905fe4a2e213ac2adaa
Author: Myron Stowe <myron.stowe@redhat.com>
Date:   Mon Aug 13 12:19:39 2018 -0600

    PCI: Skip MPS logic for Virtual Functions (VFs)
    
    commit 3dbe97efe8bf450b183d6dee2305cbc032e6b8a4 upstream.
    
    PCIe r4.0, sec 9.3.5.4, "Device Control Register", shows both
    Max_Payload_Size (MPS) and Max_Read_request_Size (MRRS) to be 'RsvdP' for
    VFs.  Just prior to the table it states:
    
      "PF and VF functionality is defined in Section 7.5.3.4 except where
       noted in Table 9-16.  For VF fields marked 'RsvdP', the PF setting
       applies to the VF."
    
    All of which implies that with respect to Max_Payload_Size Supported
    (MPSS), MPS, and MRRS values, we should not be paying any attention to the
    VF's fields, but rather only to the PF's.  Only looking at the PF's fields
    also logically makes sense as it's the sole physical interface to the PCIe
    bus.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=200527
    Fixes: 27d868b5e6cf ("PCI: Set MPS to match upstream bridge")
    Signed-off-by: Myron Stowe <myron.stowe@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org # 4.3+
    Cc: Keith Busch <keith.busch@intel.com>
    Cc: Sinan Kaya <okaya@kernel.org>
    Cc: Dongdong Liu <liudongdong3@huawei.com>
    Cc: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16558e4db5dc54a15bd49f77ed22af503bd0507e
Author: Zachary Zhang <zhangzg@marvell.com>
Date:   Fri Jun 29 11:16:19 2018 +0200

    PCI: aardvark: Size bridges before resources allocation
    
    commit 91a2968e245d6ba616db37001fa1a043078b1a65 upstream.
    
    The PCIE I/O and MEM resource allocation mechanism is that root bus
    goes through the following steps:
    
    1. Check PCI bridges' range and computes I/O and Mem base/limits.
    
    2. Sort all subordinate devices I/O and MEM resource requirements and
       allocate the resources and writes/updates subordinate devices'
       requirements to PCI bridges I/O and Mem MEM/limits registers.
    
    Currently, PCI Aardvark driver only handles the second step and lacks
    the first step, so there is an I/O and MEM resource allocation failure
    when using a PCI switch. This commit fixes that by sizing bridges
    before doing the resource allocation.
    
    Fixes: 8c39d710363c1 ("PCI: aardvark: Add Aardvark PCI host controller
    driver")
    Signed-off-by: Zachary Zhang <zhangzg@marvell.com>
    [Thomas: edit commit log.]
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dabfad3cae5777356aa782f6ad87d633ce171bef
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Jul 19 17:27:31 2018 -0500

    PCI: hotplug: Don't leak pci_slot on registration failure
    
    commit 4ce6435820d1f1cc2c2788e232735eb244bcc8a3 upstream.
    
    If addition of sysfs files fails on registration of a hotplug slot, the
    struct pci_slot as well as the entry in the slot_list is leaked.  The
    issue has been present since the hotplug core was introduced in 2002:
    https://git.kernel.org/tglx/history/c/a8a2069f432c
    
    Perhaps the idea was that even though sysfs addition fails, the slot
    should still be usable.  But that's not how drivers use the interface,
    they abort probe if a non-zero value is returned.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org # v2.4.15+
    Cc: Greg Kroah-Hartman <greg@kroah.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d4306a283a1be22e4342c5a04d99f65f256d157
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Aug 16 12:56:46 2018 +0200

    PCI / ACPI / PM: Resume all bridges on suspend-to-RAM
    
    commit 9d64b539b738fc181442caab95f1f76d9bd58539 upstream.
    
    Commit 26112ddc254c (PCI / ACPI / PM: Resume bridges w/o drivers on
    suspend-to-RAM) attempted to fix a functional regression resulting
    from commit c62ec4610c40 (PM / core: Fix direct_complete handling
    for devices with no callbacks) by resuming PCI bridges without
    drivers (that is, "parallel PCI" ones) during system-wide suspend if
    the target system state is not ACPI S0 (working state).
    
    That turns out insufficient, however, as it is reported that, at
    least in one case, the platform firmware gets confused if a PCIe
    root port is suspended before entering the ACPI S3 sleep state.
    That issue was exposed by commit 77b3729ca03 (PCI / PM: Use
    SMART_SUSPEND and LEAVE_SUSPENDED flags for PCIe ports) that allowed
    PCIe ports to stay in runtime suspend during system-wide suspend
    (which is OK for suspend-to-idle, but turns out to be problematic
    otherwise).
    
    For this reason, drop the driver check from acpi_pci_need_resume()
    and resume all bridges (including PCIe ports with drivers) during
    system-wide suspend if the target system state is not ACPI S0.
    
    [If the target system state is ACPI S0, it means suspend-to-idle
     and the platform firmware is not going to be invoked to actually
     suspend the system, so there is no need to resume the bridges in
     that case.]
    
    Fixes: 77b3729ca03 (PCI / PM: Use SMART_SUSPEND and LEAVE_SUSPENDED flags for PCIe ports)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=200675
    Reported-by: teika kazura <teika@gmx.com>
    Tested-by: teika kazura <teika@gmx.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+: 26112ddc254c (PCI / ACPI / PM: Resume bridges ...)
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 473af290c7fd7ce693e295d2344a06103e0b170d
Author: Christian KÃ¶nig <ckoenig.leichtzumerken@gmail.com>
Date:   Fri Jun 29 19:54:55 2018 -0500

    PCI: Restore resized BAR state on resume
    
    commit d3252ace0bc652a1a244455556b6a549f969bf99 upstream.
    
    Resize BARs after resume to the expected size again.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=199959
    Fixes: d6895ad39f3b ("drm/amdgpu: resize VRAM BAR for CPU access v6")
    Fixes: 276b738deb5b ("PCI: Add resizable BAR infrastructure")
    Signed-off-by: Christian KÃ¶nig <christian.koenig@amd.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org      # v4.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96be7bbde43137198a6044d6641babe4deb8dafa
Author: John David Anglin <dave.anglin@bell.net>
Date:   Sun Aug 12 16:38:03 2018 -0400

    parisc: Remove ordered stores from syscall.S
    
    commit 7797167ffde1f00446301cb22b37b7c03194cfaf upstream.
    
    Now that we use a sync prior to releasing the locks in syscall.S, we don't need
    the PA 2.0 ordered stores used to release some locks.Â  Using an ordered store,
    potentially slows the release and subsequent code.
    
    There are a number of other ordered stores and loads that serve no purpose.Â  I
    have converted these to normal stores.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # 4.0+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1d35a1a02c40a24e80df5ff0e72b493d9a6bcd0
Author: John David Anglin <dave.anglin@bell.net>
Date:   Sun Aug 12 16:31:17 2018 -0400

    parisc: Remove unnecessary barriers from spinlock.h
    
    commit 3b885ac1dc35b87a39ee176a6c7e2af9c789d8b8 upstream.
    
    Now that mb() is an instruction barrier, it will slow performance if we issue
    unnecessary barriers.
    
    The spinlock defines have a number of unnecessary barriers.Â  The __ldcw()
    define is both a hardware and compiler barrier.Â  The mb() barriers in the
    routines using __ldcw() serve no purpose.
    
    The only barrier needed is the one in arch_spin_unlock().Â  We need to ensure
    all accesses are complete prior to releasing the lock.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # 4.0+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3df731e0ccfe0d5210158b9104c9ed6015fb853b
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Jul 23 11:32:32 2018 -0500

    drm/amdgpu/pm: Fix potential Spectre v1
    
    commit ddf74e79a54070f277ae520722d3bab7f7a6c67a upstream.
    
    idx can be indirectly controlled by user-space, hence leading to a
    potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/gpu/drm/amd/amdgpu/amdgpu_pm.c:408 amdgpu_set_pp_force_state()
    warn: potential spectre issue 'data.states'
    
    Fix this by sanitizing idx before using it to index data.states
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8a1aecababa4baaa9eeb892f531c9ac4930d09f
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Thu Aug 2 22:40:19 2018 -0500

    drm/i915/kvmgt: Fix potential Spectre v1
    
    commit de5372da605d3bca46e3102bab51b7e1c0e0a6f6 upstream.
    
    info.index can be indirectly controlled by user-space, hence leading
    to a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/gpu/drm/i915/gvt/kvmgt.c:1232 intel_vgpu_ioctl() warn:
    potential spectre issue 'vgpu->vdev.region' [r]
    
    Fix this by sanitizing info.index before indirectly using it to index
    vgpu->vdev.region
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b6ea348768d5b26adeeef384971820e24710ad0
Author: Jeremy Cline <jcline@redhat.com>
Date:   Thu Aug 2 00:03:40 2018 -0400

    ext4: fix spectre gadget in ext4_mb_regular_allocator()
    
    commit 1a5d5e5d51e75a5bca67dadbcea8c841934b7b85 upstream.
    
    'ac->ac_g_ex.fe_len' is a user-controlled value which is used in the
    derivation of 'ac->ac_2order'. 'ac->ac_2order', in turn, is used to
    index arrays which makes it a potential spectre gadget. Fix this by
    sanitizing the value assigned to 'ac->ac2_order'.  This covers the
    following accesses found with the help of smatch:
    
    * fs/ext4/mballoc.c:1896 ext4_mb_simple_scan_group() warn: potential
      spectre issue 'grp->bb_counters' [w] (local cap)
    
    * fs/ext4/mballoc.c:445 mb_find_buddy() warn: potential spectre issue
      'EXT4_SB(e4b->bd_sb)->s_mb_offsets' [r] (local cap)
    
    * fs/ext4/mballoc.c:446 mb_find_buddy() warn: potential spectre issue
      'EXT4_SB(e4b->bd_sb)->s_mb_maxs' [r] (local cap)
    
    Suggested-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bd4084f029d5c3c48c8888d73900a75384d9d81
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Mon Jul 9 16:25:21 2018 +1000

    powerpc64s: Show ori31 availability in spectre_v1 sysfs file not v2
    
    commit 6d44acae1937b81cf8115ada8958e04f601f3f2e upstream.
    
    When I added the spectre_v2 information in sysfs, I included the
    availability of the ori31 speculation barrier.
    
    Although the ori31 barrier can be used to mitigate v2, it's primarily
    intended as a spectre v1 mitigation. Spectre v2 is mitigated by
    hardware changes.
    
    So rework the sysfs files to show the ori31 information in the
    spectre_v1 file, rather than v2.
    
    Currently we display eg:
    
      $ grep . spectre_v*
      spectre_v1:Mitigation: __user pointer sanitization
      spectre_v2:Mitigation: Indirect branch cache disabled, ori31 speculation barrier enabled
    
    After:
    
      $ grep . spectre_v*
      spectre_v1:Mitigation: __user pointer sanitization, ori31 speculation barrier enabled
      spectre_v2:Mitigation: Indirect branch cache disabled
    
    Fixes: d6fbe1c55c55 ("powerpc/64s: Wire up cpu_show_spectre_v2()")
    Cc: stable@vger.kernel.org # v4.17+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2d73c253885da9e9d341651bbf118fb3def9e9c
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Aug 2 15:58:31 2018 -0700

    x86/mm/init: Remove freed kernel image areas from alias mapping
    
    commit c40a56a7818cfe735fc93a69e1875f8bba834483 upstream.
    
    The kernel image is mapped into two places in the virtual address space
    (addresses without KASLR, of course):
    
            1. The kernel direct map (0xffff880000000000)
            2. The "high kernel map" (0xffffffff81000000)
    
    We actually execute out of #2.  If we get the address of a kernel symbol,
    it points to #2, but almost all physical-to-virtual translations point to
    
    Parts of the "high kernel map" alias are mapped in the userspace page
    tables with the Global bit for performance reasons.  The parts that we map
    to userspace do not (er, should not) have secrets. When PTI is enabled then
    the global bit is usually not set in the high mapping and just used to
    compensate for poor performance on systems which lack PCID.
    
    This is fine, except that some areas in the kernel image that are adjacent
    to the non-secret-containing areas are unused holes.  We free these holes
    back into the normal page allocator and reuse them as normal kernel memory.
    The memory will, of course, get *used* via the normal map, but the alias
    mapping is kept.
    
    This otherwise unused alias mapping of the holes will, by default keep the
    Global bit, be mapped out to userspace, and be vulnerable to Meltdown.
    
    Remove the alias mapping of these pages entirely.  This is likely to
    fracture the 2M page mapping the kernel image near these areas, but this
    should affect a minority of the area.
    
    The pageattr code changes *all* aliases mapping the physical pages that it
    operates on (by default).  We only want to modify a single alias, so we
    need to tweak its behavior.
    
    This unmapping behavior is currently dependent on PTI being in place.
    Going forward, we should at least consider doing this for all
    configurations.  Having an extra read-write alias for memory is not exactly
    ideal for debugging things like random memory corruption and this does
    undercut features like DEBUG_PAGEALLOC or future work like eXclusive Page
    Frame Ownership (XPFO).
    
    Before this patch:
    
    current_kernel:---[ High Kernel Mapping ]---
    current_kernel-0xffffffff80000000-0xffffffff81000000          16M                               pmd
    current_kernel-0xffffffff81000000-0xffffffff81e00000          14M     ro         PSE     GLB x  pmd
    current_kernel-0xffffffff81e00000-0xffffffff81e11000          68K     ro                 GLB x  pte
    current_kernel-0xffffffff81e11000-0xffffffff82000000        1980K     RW                     NX pte
    current_kernel-0xffffffff82000000-0xffffffff82600000           6M     ro         PSE     GLB NX pmd
    current_kernel-0xffffffff82600000-0xffffffff82c00000           6M     RW         PSE         NX pmd
    current_kernel-0xffffffff82c00000-0xffffffff82e00000           2M     RW                     NX pte
    current_kernel-0xffffffff82e00000-0xffffffff83200000           4M     RW         PSE         NX pmd
    current_kernel-0xffffffff83200000-0xffffffffa0000000         462M                               pmd
    
      current_user:---[ High Kernel Mapping ]---
      current_user-0xffffffff80000000-0xffffffff81000000          16M                               pmd
      current_user-0xffffffff81000000-0xffffffff81e00000          14M     ro         PSE     GLB x  pmd
      current_user-0xffffffff81e00000-0xffffffff81e11000          68K     ro                 GLB x  pte
      current_user-0xffffffff81e11000-0xffffffff82000000        1980K     RW                     NX pte
      current_user-0xffffffff82000000-0xffffffff82600000           6M     ro         PSE     GLB NX pmd
      current_user-0xffffffff82600000-0xffffffffa0000000         474M                               pmd
    
    After this patch:
    
    current_kernel:---[ High Kernel Mapping ]---
    current_kernel-0xffffffff80000000-0xffffffff81000000          16M                               pmd
    current_kernel-0xffffffff81000000-0xffffffff81e00000          14M     ro         PSE     GLB x  pmd
    current_kernel-0xffffffff81e00000-0xffffffff81e11000          68K     ro                 GLB x  pte
    current_kernel-0xffffffff81e11000-0xffffffff82000000        1980K                               pte
    current_kernel-0xffffffff82000000-0xffffffff82400000           4M     ro         PSE     GLB NX pmd
    current_kernel-0xffffffff82400000-0xffffffff82488000         544K     ro                     NX pte
    current_kernel-0xffffffff82488000-0xffffffff82600000        1504K                               pte
    current_kernel-0xffffffff82600000-0xffffffff82c00000           6M     RW         PSE         NX pmd
    current_kernel-0xffffffff82c00000-0xffffffff82c0d000          52K     RW                     NX pte
    current_kernel-0xffffffff82c0d000-0xffffffff82dc0000        1740K                               pte
    
      current_user:---[ High Kernel Mapping ]---
      current_user-0xffffffff80000000-0xffffffff81000000          16M                               pmd
      current_user-0xffffffff81000000-0xffffffff81e00000          14M     ro         PSE     GLB x  pmd
      current_user-0xffffffff81e00000-0xffffffff81e11000          68K     ro                 GLB x  pte
      current_user-0xffffffff81e11000-0xffffffff82000000        1980K                               pte
      current_user-0xffffffff82000000-0xffffffff82400000           4M     ro         PSE     GLB NX pmd
      current_user-0xffffffff82400000-0xffffffff82488000         544K     ro                     NX pte
      current_user-0xffffffff82488000-0xffffffff82600000        1504K                               pte
      current_user-0xffffffff82600000-0xffffffffa0000000         474M                               pmd
    
    [ tglx: Do not unmap on 32bit as there is only one mapping ]
    
    Fixes: 0f561fce4d69 ("x86/pti: Enable global pages for shared areas")
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kees Cook <keescook@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Link: https://lkml.kernel.org/r/20180802225831.5F6A2BFC@viggo.jf.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a01cdb47ffd1f74894a76bb441df104387d0817c
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Aug 2 15:58:29 2018 -0700

    x86/mm/init: Add helper for freeing kernel image pages
    
    commit 6ea2738e0ca0e626c75202fb051c1e88d7a950fa upstream.
    
    When chunks of the kernel image are freed, free_init_pages() is used
    directly.  Consolidate the three sites that do this.  Also update the
    string to give an incrementally better description of that memory versus
    what was there before.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: keescook@google.com
    Cc: aarcange@redhat.com
    Cc: jgross@suse.com
    Cc: jpoimboe@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: peterz@infradead.org
    Cc: hughd@google.com
    Cc: torvalds@linux-foundation.org
    Cc: bp@alien8.de
    Cc: luto@kernel.org
    Cc: ak@linux.intel.com
    Cc: Kees Cook <keescook@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/20180802225829.FE0E32EA@viggo.jf.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22ddf85281c3ff6995670095446bd0c5b6e086ca
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Aug 2 15:58:28 2018 -0700

    x86/mm/init: Pass unconverted symbol addresses to free_init_pages()
    
    commit 9f515cdb411ef34f1aaf4c40bb0c932cf6db5de1 upstream.
    
    The x86 code has several places where it frees parts of kernel image:
    
     1. Unused SMP alternative
     2. __init code
     3. The hole between text and rodata
     4. The hole between rodata and data
    
    We call free_init_pages() to do this.  Strangely, we convert the symbol
    addresses to kernel direct map addresses in some cases (#3, #4) but not
    others (#1, #2).
    
    The virt_to_page() and the other code in free_reserved_area() now works
    fine for for symbol addresses on x86, so don't bother converting the
    addresses to direct map addresses before freeing them.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: keescook@google.com
    Cc: aarcange@redhat.com
    Cc: jgross@suse.com
    Cc: jpoimboe@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: peterz@infradead.org
    Cc: hughd@google.com
    Cc: torvalds@linux-foundation.org
    Cc: bp@alien8.de
    Cc: luto@kernel.org
    Cc: ak@linux.intel.com
    Cc: Kees Cook <keescook@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/20180802225828.89B2D0E2@viggo.jf.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a57c747ae05564ce5bbb960d835f4a73fd8e97f
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Aug 2 15:58:26 2018 -0700

    mm: Allow non-direct-map arguments to free_reserved_area()
    
    commit 0d83432811f26871295a9bc24d3c387924da6071 upstream.
    
    free_reserved_area() takes pointers as arguments to show which addresses
    should be freed.  However, it does this in a somewhat ambiguous way.  If it
    gets a kernel direct map address, it always works.  However, if it gets an
    address that is part of the kernel image alias mapping, it can fail.
    
    It fails if all of the following happen:
     * The specified address is part of the kernel image alias
     * Poisoning is requested (forcing a memset())
     * The address is in a read-only portion of the kernel image
    
    The memset() fails on the read-only mapping, of course.
    free_reserved_area() *is* called both on the direct map and on kernel image
    alias addresses.  We've just lucked out thus far that the kernel image
    alias areas it gets used on are read-write.  I'm fairly sure this has been
    just a happy accident.
    
    It is quite easy to make free_reserved_area() work for all cases: just
    convert the address to a direct map address before doing the memset(), and
    do this unconditionally.  There is little chance of a regression here
    because we previously did a virt_to_page() on the address for the memset,
    so we know these are not highmem pages for which virt_to_page() would fail.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: keescook@google.com
    Cc: aarcange@redhat.com
    Cc: jgross@suse.com
    Cc: jpoimboe@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: peterz@infradead.org
    Cc: hughd@google.com
    Cc: torvalds@linux-foundation.org
    Cc: bp@alien8.de
    Cc: luto@kernel.org
    Cc: ak@linux.intel.com
    Cc: Kees Cook <keescook@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/20180802225826.1287AE3E@viggo.jf.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2114c7185168ede0dfdd7dce331feadac6460285
Author: Matthijs van Duin <matthijsvanduin@gmail.com>
Date:   Thu Jul 19 10:43:46 2018 +0200

    pty: fix O_CLOEXEC for TIOCGPTPEER
    
    commit 36ecc1481dc8d8c52d43ba18c6b642c1d2fde789 upstream.
    
    It was being ignored because the flags were not passed to fd allocation.
    
    Fixes: 54ebbfb16034 ("tty: add TIOCGPTPEER ioctl")
    Signed-off-by: Matthijs van Duin <matthijsvanduin@gmail.com>
    Acked-by: Aleksa Sarai <asarai@suse.de>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48cf4d45ce8f14e0eb10b28d1542568a6f019996
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Aug 10 16:14:26 2018 +0200

    EDAC: Add missing MEM_LRDDR4 entry in edac_mem_types[]
    
    commit b748f2de4b2f578599f46c6000683a8da755bf68 upstream.
    
    The edac_mem_types[] array misses a MEM_LRDDR4 entry, which leads to
    NULL pointer dereference when accessed via sysfs or such.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Yazen Ghannam <Yazen.Ghannam@amd.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20180810141426.8918-1-tiwai@suse.de
    Fixes: 1e8096bb2031 ("EDAC: Add LRDDR4 DRAM type")
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
