commit 3737a5f7223464efed3b0a9da2b045dae28d3a53
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Feb 26 11:11:18 2017 +0100

    Linux 4.9.13

commit d004006055974a976841c4f95e8c25ca7b5b38d5
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Feb 16 17:19:12 2017 -0800

    xfs: clear delalloc and cache on buffered write failure
    
    commit fa7f138ac4c70dc00519c124cf7cd4862a0a5b0e upstream.
    
    The buffered write failure handling code in
    xfs_file_iomap_end_delalloc() has a couple minor problems. First, if
    written == 0, start_fsb is not rounded down and it fails to kill off a
    delalloc block if the start offset is block unaligned. This results in a
    lingering delalloc block and broken delalloc block accounting detected
    at unmount time. Fix this by rounding down start_fsb in the unlikely
    event that written == 0.
    
    Second, it is possible for a failed overwrite of a delalloc extent to
    leave dirty pagecache around over a hole in the file. This is because is
    possible to hit ->iomap_end() on write failure before the iomap code has
    attempted to allocate pagecache, and thus has no need to clean it up. If
    the targeted delalloc extent was successfully written by a previous
    write, however, then it does still have dirty pages when ->iomap_end()
    punches out the underlying blocks. This ultimately results in writeback
    over a hole. To fix this problem, unconditionally punch out the
    pagecache from XFS before the associated delalloc range.
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57d759622aa76591958f46707edebe20c284b7d2
Author: Michael Schenk <michael.schenk@albis-elcon.com>
Date:   Thu Jan 26 11:25:04 2017 -0600

    rtlwifi: rtl_usb: Fix for URB leaking when doing ifconfig up/down
    
    commit 575ddce0507789bf9830d089557d2199d2f91865 upstream.
    
    In the function rtl_usb_start we pre-allocate a certain number of urbs
    for RX path but they will not be freed when calling rtl_usb_stop. This
    results in leaking urbs when doing ifconfig up and down. Eventually,
    the system has no available urbs.
    
    Signed-off-by: Michael Schenk <michael.schenk@albis-elcon.com>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cb3de83ab740c17dafe9148c2a5b5ac41a736cf
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Feb 8 15:19:07 2017 -0500

    block: fix double-free in the failure path of cgwb_bdi_init()
    
    commit 5f478e4ea5c5560b4e40eb136991a09f9389f331 upstream.
    
    When !CONFIG_CGROUP_WRITEBACK, bdi has single bdi_writeback_congested
    at bdi->wb_congested.  cgwb_bdi_init() allocates it with kzalloc() and
    doesn't do further initialization.  This usually works fine as the
    reference count gets bumped to 1 by wb_init() and the put from
    wb_exit() releases it.
    
    However, when wb_init() fails, it puts the wb base ref automatically
    freeing the wb and the explicit kfree() in cgwb_bdi_init() error path
    ends up trying to free the same pointer the second time causing a
    double-free.
    
    Fix it by explicitly initilizing the refcnt to 1 and putting the base
    ref from cgwb_bdi_destroy().
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Fixes: a13f35e87140 ("writeback: don't embed root bdi_writeback_congested in bdi_writeback")
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62c153f346fe5ef8946103050548707ff294961f
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Wed Feb 8 11:00:01 2017 +0800

    ACPICA: Linuxize: Restore and fix Intel compiler build
    
    commit ffab9188e444854882dbc291500d576d6bad7b7b upstream.
    
    ACPICA commit b59347d0b8b676cb555fe8da5cad08fcd4eeb0d3
    
    The following commit cleans up compiler specific inclusions:
    
      Commit: 9fa1cebdbfff3db8953cebca8ee327d75edefc40
      Subject: ACPICA: OSL: Cleanup the inclusion order of the compiler-specific headers
    
    But breaks one thing due to the following old issue:
    
     Buidling Linux kernel with Intel compiler originally depends on acgcc.h
     not acintel.h.
    
    So after making Intel compiler build working in ACPICA upstream by
    correctly using acintel.h, it becomes unable to build Linux kernel using
    Intel compiler as there is no acintel.h in the kernel source tree.
    
    This patch releases acintel.h to Linux kernel and fixes its inclusion in
    acenv.h.
    
    Fixes: 9fa1cebdbfff (ACPICA: OSL: Cleanup the inclusion order of the compiler-specific headers)
    Link: https://github.com/acpica/acpica/commit/b59347d0
    Tested-by: Stepan M Mishura <stepan.m.mishura@intel.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f9872be6db939a75a075cd893a47ce5742cee00
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Feb 1 21:01:54 2017 +0100

    netfilter: nf_ct_helper: warn when not applying default helper assignment
    
    commit dfe75ff8ca74f54b0fa5a326a1aa9afa485ed802 upstream.
    
    Commit 3bb398d925 ("netfilter: nf_ct_helper: disable automatic helper
    assignment") is causing behavior regressions in firewalls, as traffic
    handled by conntrack helpers is now by default not passed through even
    though it was before due to missing CT targets (which were not necessary
    before this commit).
    
    The default had to be switched off due to security reasons [1] [2] and
    therefore should stay the way it is, but let's be friendly to firewall
    admins and issue a warning the first time we're in situation where packet
    would be likely passed through with the old default but we're likely going
    to drop it on the floor now.
    
    Rewrite the code a little bit as suggested by Linus, so that we avoid
    spaghettiing the code even more -- namely the whole decision making
    process regarding helper selection (either automatic or not) is being
    separated, so that the whole logic can be simplified and code (condition)
    duplication reduced.
    
    [1] https://cansecwest.com/csw12/conntrack-attack.pdf
    [2] https://home.regit.org/netfilter-en/secure-use-of-helpers/
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6bdd8d2fffc0875eb16ec5e08e8230771539073
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Feb 15 11:11:51 2017 +0100

    goldfish: Sanitize the broken interrupt handler
    
    commit 6cf18e6927c0b224f972e3042fb85770d63cb9f8 upstream.
    
    This interrupt handler is broken in several ways:
    
      - It loops forever when the op code is not decodeable
    
      - It never returns IRQ_HANDLED because the only way to exit the loop
        returns IRQ_NONE unconditionally.
    
    The whole concept of this is broken. Creating devices in an interrupt
    handler is beyond any point of sanity.
    
    Make it at least behave halfways sane so accidental users do not have to
    deal with a hard to debug lockup.
    
    Fixes: e809c22b8fb028 ("goldfish: add the goldfish virtual bus")
    Reported-by: Gabriel C <nix.or.die@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2709c2a1b0165e7b4084077148697175ecd9d2c7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Feb 15 11:11:50 2017 +0100

    x86/platform/goldfish: Prevent unconditional loading
    
    commit 47512cfd0d7a8bd6ab71d01cd89fca19eb2093eb upstream.
    
    The goldfish platform code registers the platform device unconditionally
    which causes havoc in several ways if the goldfish_pdev_bus driver is
    enabled:
    
     - Access to the hardcoded physical memory region, which is either not
       available or contains stuff which is completely unrelated.
    
     - Prevents that the interrupt of the serial port can be requested
    
     - In case of a spurious interrupt it goes into a infinite loop in the
       interrupt handler of the pdev_bus driver (which needs to be fixed
       seperately).
    
    Add a 'goldfish' command line option to make the registration opt-in when
    the platform is compiled in.
    
    I'm seriously grumpy about this engineering trainwreck, which has seven
    SOBs from Intel developers for 50 lines of code. And none of them figured
    out that this is broken. Impressive fail!
    
    Fixes: ddd70cf93d78 ("goldfish: platform device for x86")
    Reported-by: Gabriel C <nix.or.die@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fef3fdf2d83cd0ca3bc0052ab58baab010929434
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Feb 8 18:53:08 2017 +0100

    USB: serial: console: fix uninitialised spinlock
    
    commit 14816b16fa0adac24f82492f18fa62c55acabbbe upstream.
    
    Since commit 4a510969374a ("tty: Make tty_files_lock per-tty") a new
    tty_struct spin lock is taken in the tty release path, but the
    USB-serial-console hack was never updated hence leaving the lock of its
    "fake" tty uninitialised. This was eventually detected by lockdep.
    
    Make sure to initialise the new lock also for the fake tty to address
    this regression.
    
    Yes, this code is a mess, but cleaning it up is left for another day.
    
    Fixes: 4a510969374a ("tty: Make tty_files_lock per-tty")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 960a38eae80a9e5ba9688c0eb92114f6de028904
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jan 12 14:56:09 2017 +0100

    USB: serial: ark3116: fix register-accessor error handling
    
    commit 9fef37d7cf170522fb354d6d0ea6de09b9b16678 upstream.
    
    The current implementation failed to detect short transfers, something
    which could lead to bits of the uninitialised heap transfer buffer
    leaking to user space.
    
    Fixes: 149fc791a452 ("USB: ark3116: Setup some basic infrastructure for new ark3116 driver.")
    Fixes: f4c1e8d597d1 ("USB: ark3116: Make existing functions 16450-aware and add close and release functions.")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2ce74e35d5fd1afb5304b645c3b459c922a2c4a
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 13 13:21:08 2017 +0100

    USB: serial: opticon: fix CTS retrieval at open
    
    commit 2eee05020a0e7ee7c04422cbacdb07859e45dce6 upstream.
    
    The opticon driver used a control request at open to trigger a CTS
    status notification to be sent over the bulk-in pipe. When the driver
    was converted to using the generic read implementation, an inverted test
    prevented this request from being sent, something which could lead to
    TIOCMGET reporting an incorrect CTS state.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 7a6ee2b02751 ("USB: opticon: switch to generic read implementation")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1fc6fb5f31edc1b6fb8de092f6ab6fbe967aaa7
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jan 12 14:56:21 2017 +0100

    USB: serial: spcp8x5: fix modem-status handling
    
    commit 5ed8d41023751bdd3546f2fe4118304357efe8d2 upstream.
    
    Make sure to detect short control transfers and return zero on success
    when retrieving the modem status.
    
    This fixes the TIOCMGET implementation which since e1ed212d8593 ("USB:
    spcp8x5: add proper modem-status support") has returned TIOCM_LE on
    successful retrieval, and avoids leaking bits from the stack on short
    transfers.
    
    This also fixes the carrier-detect implementation which since the above
    mentioned commit unconditionally has returned true.
    
    Fixes: e1ed212d8593 ("USB: spcp8x5: add proper modem-status support")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26805681a45d071ac8df99933d842c1380b7e279
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Feb 2 17:38:35 2017 +0100

    USB: serial: ftdi_sio: fix line-status over-reporting
    
    commit a6bb1e17a39818b01b55d8e6238b4b5f06d55038 upstream.
    
    FTDI devices use a receive latency timer to periodically empty the
    receive buffer and report modem and line status (also when the buffer is
    empty).
    
    When a break or error condition is detected the corresponding status
    flags will be set on a packet with nonzero data payload and the flags
    are not updated until the break is over or further characters are
    received.
    
    In order to avoid over-reporting break and error conditions, these flags
    must therefore only be processed for packets with payload.
    
    This specifically fixes the case where after an overrun, the error
    condition is continuously reported and NULL-characters inserted until
    further data is received.
    
    Reported-by: Michael Walle <michael@walle.cc>
    Fixes: 72fda3ca6fc1 ("USB: serial: ftd_sio: implement sysrq handling on
    break")
    Fixes: 166ceb690750 ("USB: ftdi_sio: clean up line-status handling")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1510a8c0ded157158be688a54c107aac4291f77
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jan 25 15:35:20 2017 +0100

    USB: serial: ftdi_sio: fix extreme low-latency setting
    
    commit c6dce2626606ef16434802989466636bc28c1419 upstream.
    
    Since commit 557aaa7ffab6 ("ft232: support the ASYNC_LOW_LATENCY
    flag") the FTDI driver has been using a receive latency-timer value of
    1 ms instead of the device default of 16 ms.
    
    The latency timer is used to periodically empty a non-full receive
    buffer, but a status header is always sent when the timer expires
    including when the buffer is empty. This means that a two-byte bulk
    message is received every millisecond also for an otherwise idle port as
    long as it is open.
    
    Let's restore the pre-2009 behaviour which reduces the rate of the
    status messages to 1/16th (e.g. interrupt frequency drops from 1 kHz to
    62.5 Hz) by not setting ASYNC_LOW_LATENCY by default.
    
    Anyone willing to pay the price for the minimum-latency behaviour should
    set the flag explicitly instead using the TIOCSSERIAL ioctl or a tool
    such as setserial (e.g. setserial /dev/ttyUSB0 low_latency).
    
    Note that since commit 0cbd81a9f6ba ("USB: ftdi_sio: remove
    tty->low_latency") the ASYNC_LOW_LATENCY flag has no other effects but
    to set a minimal latency timer.
    
    Reported-by: Antoine Aubert <a.aubert@overkiz.com>
    Fixes: 557aaa7ffab6 ("ft232: support the ASYNC_LOW_LATENCY flag")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3d56f7a586e6fdddb9cfae46787492c94add38d
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jan 12 14:56:11 2017 +0100

    USB: serial: ftdi_sio: fix modem-status error handling
    
    commit 427c3a95e3e29e65f59d99aaf320d7506f3eed57 upstream.
    
    Make sure to detect short responses when fetching the modem status in
    order to avoid parsing uninitialised buffer data and having bits of it
    leak to user space.
    
    Note that we still allow for short 1-byte responses.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4420e0f8fddfade44c399d346dc388dd925eb100
Author: Ken Lin <yungching0725@gmail.com>
Date:   Sat Feb 4 04:00:24 2017 +0800

    USB: serial: cp210x: add new IDs for GE Bx50v3 boards
    
    commit 9a593656def0dc2f6c227851e8e602077267a5f1 upstream.
    
    Add new USB IDs for cp2104/5 devices on Bx50v3 boards due to the design
    change.
    
    Signed-off-by: Ken Lin <yungching0725@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 308a96c857ccba6aaebfdc4c63045cb2970de0fb
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Feb 9 12:11:41 2017 +0100

    USB: serial: mos7840: fix another NULL-deref at open
    
    commit 5182c2cf2a9bfb7f066ef0bdd2bb6330b94dd74e upstream.
    
    Fix another NULL-pointer dereference at open should a malicious device
    lack an interrupt-in endpoint.
    
    Note that the driver has a broken check for an interrupt-in endpoint
    which means that an interrupt URB has never even been submitted.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ab870e7425c224328ec5807ed916d417810b2eb
Author: Javier Martinez Canillas <javier@osg.samsung.com>
Date:   Mon Jan 2 11:57:20 2017 -0300

    tty: serial: msm: Fix module autoload
    
    commit abe81f3b8ed2996e1712d26d38ff6b73f582c616 upstream.
    
    If the driver is built as a module, autoload won't work because the module
    alias information is not filled. So user-space can't match the registered
    device with the corresponding module.
    
    Export the module alias information using the MODULE_DEVICE_TABLE() macro.
    
    Before this patch:
    
    $ modinfo drivers/tty/serial/msm_serial.ko | grep alias
    $
    
    After this patch:
    
    $ modinfo drivers/tty/serial/msm_serial.ko | grep alias
    alias:          of:N*T*Cqcom,msm-uartdmC*
    alias:          of:N*T*Cqcom,msm-uartdm
    alias:          of:N*T*Cqcom,msm-uartC*
    alias:          of:N*T*Cqcom,msm-uart
    
    Signed-off-by: Javier Martinez Canillas <javier@osg.samsung.com>
    Acked-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a0e2594ef76fabe28049922c20d19c12aad4881
Author: Maxime Jayat <maxime.jayat@mobile-devices.fr>
Date:   Tue Feb 21 18:35:51 2017 +0100

    net: socket: fix recvmmsg not returning error from sock_error
    
    [ Upstream commit e623a9e9dec29ae811d11f83d0074ba254aba374 ]
    
    Commit 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path"),
    changed the exit path of recvmmsg to always return the datagrams
    variable and modified the error paths to set the variable to the error
    code returned by recvmsg if necessary.
    
    However in the case sock_error returned an error, the error code was
    then ignored, and recvmmsg returned 0.
    
    Change the error path of recvmmsg to correctly return the error code
    of sock_error.
    
    The bug was triggered by using recvmmsg on a CAN interface which was
    not up. Linux 4.6 and later return 0 in this case while earlier
    releases returned -ENETDOWN.
    
    Fixes: 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path")
    Signed-off-by: Maxime Jayat <maxime.jayat@mobile-devices.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 481aedf869fbf2d4503ca0005dbd68b78422955a
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Feb 21 09:33:18 2017 +0100

    ip: fix IP_CHECKSUM handling
    
    [ Upstream commit ca4ef4574f1ee5252e2cd365f8f5d5bafd048f32 ]
    
    The skbs processed by ip_cmsg_recv() are not guaranteed to
    be linear e.g. when sending UDP packets over loopback with
    MSGMORE.
    Using csum_partial() on [potentially] the whole skb len
    is dangerous; instead be on the safe side and use skb_checksum().
    
    Thanks to syzkaller team to detect the issue and provide the
    reproducer.
    
    v1 -> v2:
     - move the variable declaration in a tighter scope
    
    Fixes: ad6f939ab193 ("ip: Add offset parameter to ip_cmsg_recv")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c56012e92b51030b13c4652a9494d422562d5d5
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Sun Feb 19 07:17:17 2017 +0200

    ptr_ring: fix race conditions when resizing
    
    [ Upstream commit e71695307114335be1ed912f4a347396c2ed0e69 ]
    
    Resizing currently drops consumer lock.  This can cause entries to be
    reordered, which isn't good in itself.  More importantly, consumer can
    detect a false ring empty condition and block forever.
    
    Further, nesting of consumer within producer lock is problematic for
    tun, since it produces entries in a BH, which causes a lock order
    reversal:
    
           CPU0                    CPU1
           ----                    ----
      consume:
      lock(&(&r->consumer_lock)->rlock);
                                   resize:
                                   local_irq_disable();
                                   lock(&(&r->producer_lock)->rlock);
                                   lock(&(&r->consumer_lock)->rlock);
      <Interrupt>
      produce:
      lock(&(&r->producer_lock)->rlock);
    
    To fix, nest producer lock within consumer lock during resize,
    and keep consumer lock during the whole swap operation.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: stable@vger.kernel.org
    Cc: "David S. Miller" <davem@davemloft.net>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2219da51664451149350e47321aa0fcf72a8b8f
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Feb 17 16:19:39 2017 -0500

    irda: Fix lockdep annotations in hashbin_delete().
    
    [ Upstream commit 4c03b862b12f980456f9de92db6d508a4999b788 ]
    
    A nested lock depth was added to the hasbin_delete() code but it
    doesn't actually work some well and results in tons of lockdep splats.
    
    Fix the code instead to properly drop the lock around the operation
    and just keep peeking the head of the hashbin queue.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f23fd87e154f2c0fbac2e33c999e388f9baf2714
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri Feb 17 19:14:27 2017 +0100

    vxlan: fix oops in dev_fill_metadata_dst
    
    [ Upstream commit 22f0708a718daea5e79de2d29b4829de016a4ff4 ]
    
    Since the commit 0c1d70af924b ("net: use dst_cache for vxlan device")
    vxlan_fill_metadata_dst() calls vxlan_get_route() passing a NULL
    dst_cache pointer, so the latter should explicitly check for
    valid dst_cache ptr. Unfortunately the commit d71785ffc7e7 ("net: add
    dst_cache to ovs vxlan lwtunnel") removed said check.
    
    As a result is possible to trigger a null pointer access calling
    vxlan_fill_metadata_dst(), e.g. with:
    
    ovs-vsctl add-br ovs-br0
    ovs-vsctl add-port ovs-br0 vxlan0 -- set interface vxlan0 \
            type=vxlan options:remote_ip=192.168.1.1 \
            options:key=1234 options:dst_port=4789 ofport_request=10
    ip address add dev ovs-br0 172.16.1.2/24
    ovs-vsctl set Bridge ovs-br0 ipfix=@i -- --id=@i create IPFIX \
            targets=\"172.16.1.1:1234\" sampling=1
    iperf -c 172.16.1.1 -u -l 1000 -b 10M -t 1 -p 1234
    
    This commit addresses the issue passing to vxlan_get_route() the
    dst_cache already available into the lwt info processed by
    vxlan_fill_metadata_dst().
    
    Fixes: d71785ffc7e7 ("net: add dst_cache to ovs vxlan lwtunnel")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 171d92a9d915d238e05285ca67faf30f554d7df7
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Feb 16 17:22:46 2017 +0100

    dccp: fix freeing skb too early for IPV6_RECVPKTINFO
    
    [ Upstream commit 5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4 ]
    
    In the current DCCP implementation an skb for a DCCP_PKT_REQUEST packet
    is forcibly freed via __kfree_skb in dccp_rcv_state_process if
    dccp_v6_conn_request successfully returns.
    
    However, if IPV6_RECVPKTINFO is set on a socket, the address of the skb
    is saved to ireq->pktopts and the ref count for skb is incremented in
    dccp_v6_conn_request, so skb is still in use. Nevertheless, it gets freed
    in dccp_rcv_state_process.
    
    Fix by calling consume_skb instead of doing goto discard and therefore
    calling __kfree_skb.
    
    Similar fixes for TCP:
    
    fb7e2399ec17f1004c0e0ccfd17439f8759ede01 [TCP]: skb is unexpectedly freed.
    0aea76d35c9651d55bbaf746e7914e5f9ae5a25d tcp: SYN packets are now
    simply consumed
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c854afc5399dd74cf5eba04ee7ba9ffb9ad5158
Author: Marcus Huewe <suse-tux@gmx.de>
Date:   Wed Feb 15 01:00:36 2017 +0100

    net: neigh: Fix netevent NETEVENT_DELAY_PROBE_TIME_UPDATE notification
    
    [ Upstream commit 7627ae6030f56a9a91a5b3867b21f35d79c16e64 ]
    
    When setting a neigh related sysctl parameter, we always send a
    NETEVENT_DELAY_PROBE_TIME_UPDATE netevent. For instance, when
    executing
    
            sysctl net.ipv6.neigh.wlp3s0.retrans_time_ms=2000
    
    a NETEVENT_DELAY_PROBE_TIME_UPDATE netevent is generated.
    
    This is caused by commit 2a4501ae18b5 ("neigh: Send a
    notification when DELAY_PROBE_TIME changes"). According to the
    commit's description, it was intended to generate such an event
    when setting the "delay_first_probe_time" sysctl parameter.
    
    In order to fix this, only generate this event when actually
    setting the "delay_first_probe_time" sysctl parameter. This fix
    should not have any unintended side-effects, because all but one
    registered netevent callbacks check for other netevent event
    types (the registered callbacks were obtained by grepping for
    "register_netevent_notifier"). The only callback that uses the
    NETEVENT_DELAY_PROBE_TIME_UPDATE event is
    mlxsw_sp_router_netevent_event() (in
    drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c): in case
    of this event, it only accesses the DELAY_PROBE_TIME of the
    passed neigh_parms.
    
    Fixes: 2a4501ae18b5 ("neigh: Send a notification when DELAY_PROBE_TIME changes")
    Signed-off-by: Marcus Huewe <suse-tux@gmx.de>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9206efc8a1f74e558e3165218fab136b51be848a
Author: Anoob Soman <anoob.soman@citrix.com>
Date:   Wed Feb 15 20:25:39 2017 +0000

    packet: Do not call fanout_release from atomic contexts
    
    [ Upstream commit 2bd624b4611ffee36422782d16e1c944d1351e98 ]
    
    Commit 6664498280cf ("packet: call fanout_release, while UNREGISTERING a
    netdev"), unfortunately, introduced the following issues.
    
    1. calling mutex_lock(&fanout_mutex) (fanout_release()) from inside
    rcu_read-side critical section. rcu_read_lock disables preemption, most often,
    which prohibits calling sleeping functions.
    
    [  ] include/linux/rcupdate.h:560 Illegal context switch in RCU read-side critical section!
    [  ]
    [  ] rcu_scheduler_active = 1, debug_locks = 0
    [  ] 4 locks held by ovs-vswitchd/1969:
    [  ]  #0:  (cb_lock){++++++}, at: [<ffffffff8158a6c9>] genl_rcv+0x19/0x40
    [  ]  #1:  (ovs_mutex){+.+.+.}, at: [<ffffffffa04878ca>] ovs_vport_cmd_del+0x4a/0x100 [openvswitch]
    [  ]  #2:  (rtnl_mutex){+.+.+.}, at: [<ffffffff81564157>] rtnl_lock+0x17/0x20
    [  ]  #3:  (rcu_read_lock){......}, at: [<ffffffff81614165>] packet_notifier+0x5/0x3f0
    [  ]
    [  ] Call Trace:
    [  ]  [<ffffffff813770c1>] dump_stack+0x85/0xc4
    [  ]  [<ffffffff810c9077>] lockdep_rcu_suspicious+0x107/0x110
    [  ]  [<ffffffff810a2da7>] ___might_sleep+0x57/0x210
    [  ]  [<ffffffff810a2fd0>] __might_sleep+0x70/0x90
    [  ]  [<ffffffff8162e80c>] mutex_lock_nested+0x3c/0x3a0
    [  ]  [<ffffffff810de93f>] ? vprintk_default+0x1f/0x30
    [  ]  [<ffffffff81186e88>] ? printk+0x4d/0x4f
    [  ]  [<ffffffff816106dd>] fanout_release+0x1d/0xe0
    [  ]  [<ffffffff81614459>] packet_notifier+0x2f9/0x3f0
    
    2. calling mutex_lock(&fanout_mutex) inside spin_lock(&po->bind_lock).
    "sleeping function called from invalid context"
    
    [  ] BUG: sleeping function called from invalid context at kernel/locking/mutex.c:620
    [  ] in_atomic(): 1, irqs_disabled(): 0, pid: 1969, name: ovs-vswitchd
    [  ] INFO: lockdep is turned off.
    [  ] Call Trace:
    [  ]  [<ffffffff813770c1>] dump_stack+0x85/0xc4
    [  ]  [<ffffffff810a2f52>] ___might_sleep+0x202/0x210
    [  ]  [<ffffffff810a2fd0>] __might_sleep+0x70/0x90
    [  ]  [<ffffffff8162e80c>] mutex_lock_nested+0x3c/0x3a0
    [  ]  [<ffffffff816106dd>] fanout_release+0x1d/0xe0
    [  ]  [<ffffffff81614459>] packet_notifier+0x2f9/0x3f0
    
    3. calling dev_remove_pack(&fanout->prot_hook), from inside
    spin_lock(&po->bind_lock) or rcu_read-side critical-section. dev_remove_pack()
    -> synchronize_net(), which might sleep.
    
    [  ] BUG: scheduling while atomic: ovs-vswitchd/1969/0x00000002
    [  ] INFO: lockdep is turned off.
    [  ] Call Trace:
    [  ]  [<ffffffff813770c1>] dump_stack+0x85/0xc4
    [  ]  [<ffffffff81186274>] __schedule_bug+0x64/0x73
    [  ]  [<ffffffff8162b8cb>] __schedule+0x6b/0xd10
    [  ]  [<ffffffff8162c5db>] schedule+0x6b/0x80
    [  ]  [<ffffffff81630b1d>] schedule_timeout+0x38d/0x410
    [  ]  [<ffffffff810ea3fd>] synchronize_sched_expedited+0x53d/0x810
    [  ]  [<ffffffff810ea6de>] synchronize_rcu_expedited+0xe/0x10
    [  ]  [<ffffffff8154eab5>] synchronize_net+0x35/0x50
    [  ]  [<ffffffff8154eae3>] dev_remove_pack+0x13/0x20
    [  ]  [<ffffffff8161077e>] fanout_release+0xbe/0xe0
    [  ]  [<ffffffff81614459>] packet_notifier+0x2f9/0x3f0
    
    4. fanout_release() races with calls from different CPU.
    
    To fix the above problems, remove the call to fanout_release() under
    rcu_read_lock(). Instead, call __dev_remove_pack(&fanout->prot_hook) and
    netdev_run_todo will be happy that &dev->ptype_specific list is empty. In order
    to achieve this, I moved dev_{add,remove}_pack() out of fanout_{add,release} to
    __fanout_{link,unlink}. So, call to {,__}unregister_prot_hook() will make sure
    fanout->prot_hook is removed as well.
    
    Fixes: 6664498280cf ("packet: call fanout_release, while UNREGISTERING a netdev")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Anoob Soman <anoob.soman@citrix.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 722737f27774b14be5a1d2d3b9281dcded7c48b2
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Feb 14 09:03:51 2017 -0800

    packet: fix races in fanout_add()
    
    [ Upstream commit d199fab63c11998a602205f7ee7ff7c05c97164b ]
    
    Multiple threads can call fanout_add() at the same time.
    
    We need to grab fanout_mutex earlier to avoid races that could
    lead to one thread freeing po->rollover that was set by another thread.
    
    Do the same in fanout_release(), for peace of mind, and to help us
    finding lockdep issues earlier.
    
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Fixes: 0648ab70afe6 ("packet: rollover prepare: per-socket state")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0cb28247882a90f60b219f335c00d8d578cbe66
Author: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
Date:   Tue Feb 14 14:42:15 2017 +0200

    net: ethernet: ti: cpsw: fix cpsw assignment in resume
    
    [ Upstream commit a60ced990e309666915d21445e95347d12406694 ]
    
    There is a copy-paste error, which hides breaking of resume
    for CPSW driver: there was replaced netdev_priv() to ndev_to_cpsw(ndev)
    in suspend, but left it unchanged in resume.
    
    Fixes: 606f39939595a4d4540406bfc11f265b2036af6d
    (ti: cpsw: move platform data and slaves info to cpsw_common)
    
    Reported-by: Alexey Starikovskiy <AStarikovskiy@topcon.com>
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42b52783a59cc706c71cdc7096edce4a6f086fd3
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Feb 12 14:03:52 2017 -0800

    net/llc: avoid BUG_ON() in skb_orphan()
    
    [ Upstream commit 8b74d439e1697110c5e5c600643e823eb1dd0762 ]
    
    It seems nobody used LLC since linux-3.12.
    
    Fortunately fuzzers like syzkaller still know how to run this code,
    otherwise it would be no fun.
    
    Setting skb->sk without skb->destructor leads to all kinds of
    bugs, we now prefer to be very strict about it.
    
    Ideally here we would use skb_set_owner() but this helper does not exist yet,
    only CAN seems to have a private helper for that.
    
    Fixes: 376c7311bdb6 ("net: add a temporary sanity check in skb_orphan()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 859900c24bff90768e1789bd93e1b51fa726a659
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Sun Feb 12 11:21:31 2017 +0200

    net/mlx5e: Disable preemption when doing TC statistics upcall
    
    [ Upstream commit fed06ee89b78d3af32e235e0e89ad0d946fcb95d ]
    
    When called by HW offloading drivers, the TC action (e.g
    net/sched/act_mirred.c) code uses this_cpu logic, e.g
    
     _bstats_cpu_update(this_cpu_ptr(a->cpu_bstats), bytes, packets)
    
    per the kernel documention, preemption should be disabled, add that.
    
    Before the fix, when running with CONFIG_PREEMPT set, we get a
    
    BUG: using smp_processor_id() in preemptible [00000000] code: tc/3793
    
    asserion from the TC action (mirred) stats_update callback.
    
    Fixes: aad7e08d39bd ('net/mlx5e: Hardware offloaded flower filter statistics support')
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90aa7993d5c7fdc476009189a9b2a65d97fe9350
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Mon Feb 13 11:13:16 2017 -0800

    kcm: fix a null pointer dereference in kcm_sendmsg()
    
    [ Upstream commit cd27b96bc13841ee7af25837a6ae86fee87273d6 ]
    
    In commit 98e3862ca2b1 ("kcm: fix 0-length case for kcm_sendmsg()")
    I tried to avoid skb allocation for 0-length case, but missed
    a check for NULL pointer in the non EOR case.
    
    Fixes: 98e3862ca2b1 ("kcm: fix 0-length case for kcm_sendmsg()")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Tom Herbert <tom@herbertland.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Tom Herbert <tom@herbertland.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1409935400aa1faffd9fe1830adb8ea08ea424d2
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Feb 7 12:59:47 2017 -0800

    kcm: fix 0-length case for kcm_sendmsg()
    
    [ Upstream commit 98e3862ca2b1ae595a13805dcab4c3a6d7718f4d ]
    
    Dmitry reported a kernel warning:
    
     WARNING: CPU: 3 PID: 2936 at net/kcm/kcmsock.c:627
     kcm_write_msgs+0x12e3/0x1b90 net/kcm/kcmsock.c:627
     CPU: 3 PID: 2936 Comm: a.out Not tainted 4.10.0-rc6+ #209
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
     Call Trace:
      __dump_stack lib/dump_stack.c:15 [inline]
      dump_stack+0x2ee/0x3ef lib/dump_stack.c:51
      panic+0x1fb/0x412 kernel/panic.c:179
      __warn+0x1c4/0x1e0 kernel/panic.c:539
      warn_slowpath_null+0x2c/0x40 kernel/panic.c:582
      kcm_write_msgs+0x12e3/0x1b90 net/kcm/kcmsock.c:627
      kcm_sendmsg+0x163a/0x2200 net/kcm/kcmsock.c:1029
      sock_sendmsg_nosec net/socket.c:635 [inline]
      sock_sendmsg+0xca/0x110 net/socket.c:645
      sock_write_iter+0x326/0x600 net/socket.c:848
      new_sync_write fs/read_write.c:499 [inline]
      __vfs_write+0x483/0x740 fs/read_write.c:512
      vfs_write+0x187/0x530 fs/read_write.c:560
      SYSC_write fs/read_write.c:607 [inline]
      SyS_write+0xfb/0x230 fs/read_write.c:599
      entry_SYSCALL_64_fastpath+0x1f/0xc2
    
    when calling syscall(__NR_write, sock2, 0x208aaf27ul, 0x0ul) on a KCM
    seqpacket socket. It appears that kcm_sendmsg() does not handle len==0
    case correctly, which causes an empty skb is allocated and queued.
    Fix this by skipping the skb allocation for len==0 case.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Tom Herbert <tom@herbertland.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
