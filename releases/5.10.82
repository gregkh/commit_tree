commit d5259a9ba6993a843278203323902bc0c049097e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 26 10:39:22 2021 +0100

    Linux 5.10.82
    
    Link: https://lore.kernel.org/r/20211124115702.361983534@linuxfoundation.org
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Link: https://lore.kernel.org/r/20211125092029.973858485@linuxfoundation.org
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d35250ec5a23771187c85a46e6812d5943b5c13e
Author: Sasha Levin <sashal@kernel.org>
Date:   Wed Nov 24 19:18:11 2021 -0500

    Revert "perf: Rework perf_event_exit_event()"
    
    This reverts commit 94902ee2996a7f71471138093495df452dab87b6 which is
    upstream commit ef54c1a476aef7eef26fe13ea10dc090952c00f8.
    
    Reverting for now due to issues that need to get fixed upstream.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6718f79c40fd9f2788b0d12deb64562fcbece984
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Sep 24 14:24:14 2021 -0500

    ALSA: hda: hdac_stream: fix potential locking issue in snd_hdac_stream_assign()
    
    commit 1465d06a6d8580e73ae65f8590392df58c5ed2fd upstream.
    
    The fields 'opened', 'running', 'assigned_key' are all protected by a
    spinlock, but the spinlock is not taken when looking for a
    stream. This can result in a possible race between assign() and
    release().
    
    Fix by taking the spinlock before walking through the bus stream list.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210924192417.169243-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Cc: Scott Bruce <smbruce@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f751fb54f2bc71cab118855358f0f660ea934b4d
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Sep 24 14:24:16 2021 -0500

    ALSA: hda: hdac_ext_stream: fix potential locking issues
    
    commit 868ddfcef31ff93ea8961b2e81ea7fe12f6f144b upstream.
    
    The code for hdac_ext_stream seems inherited from hdac_stream, and
    similar locking issues are present: the use of the bus->reg_lock
    spinlock is inconsistent, with only writes to specific fields being
    protected.
    
    Apply similar fix as in hdac_stream by protecting all accesses to
    'link_locked' and 'decoupled' fields, with a new helper
    snd_hdac_ext_stream_decouple_locked() added to simplify code
    changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210924192417.169243-4-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3ef5051a758d8954dc0254e63aff0dd0b71b8de
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Sep 10 00:19:21 2021 -0700

    x86/Kconfig: Fix an unused variable error in dell-smm-hwmon
    
    commit ef775a0e36c6a81c5b07cb228c02f967133fe768 upstream.
    
    When CONFIG_PROC_FS is not set, there is a build warning (turned
    into an error):
    
      ../drivers/hwmon/dell-smm-hwmon.c: In function 'i8k_init_procfs':
      ../drivers/hwmon/dell-smm-hwmon.c:624:24: error: unused variable 'data' [-Werror=unused-variable]
        struct dell_smm_data *data = dev_get_drvdata(dev);
    
    Make I8K depend on PROC_FS and HWMON (instead of selecting HWMON -- it
    is strongly preferred to not select entire subsystems).
    
    Build tested in all possible combinations of SENSORS_DELL_SMM, I8K, and
    PROC_FS.
    
    Fixes: 039ae58503f3 ("hwmon: Allow to compile dell-smm-hwmon driver without /proc/i8k")
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Pali Rohár <pali@kernel.org>
    Link: https://lkml.kernel.org/r/20210910071921.16777-1-rdunlap@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ec78af152e95acfc8a27f3251b543fe545599c3
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Oct 14 13:11:01 2021 -0400

    btrfs: update device path inode time instead of bd_inode
    
    commit 54fde91f52f515e0b1514f0f0fa146e87a672227 upstream.
    
    Christoph pointed out that I'm updating bdev->bd_inode for the device
    time when we remove block devices from a btrfs file system, however this
    isn't actually exposed to anything.  The inode we want to update is the
    one that's associated with the path to the device, usually on devtmpfs,
    so that blkid notices the difference.
    
    We still don't want to do the blkdev_open, so use kern_path() to get the
    path to the given device and do the update time on that inode.
    
    Fixes: 8f96a5bfa150 ("btrfs: update the bdev time directly when closing")
    Reported-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9febc9d8d2b4f367c364ccf3b4a4a2335291cff2
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Oct 14 13:11:00 2021 -0400

    fs: export an inode_update_time helper
    
    commit e60feb445fce9e51c1558a6aa7faf9dd5ded533b upstream.
    
    If you already have an inode and need to update the time on the inode
    there is no way to do this properly.  Export this helper to allow file
    systems to update time on the inode so the appropriate handler is
    called, either ->update_time or generic_update_time.
    
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cade5d7a28037d8f36dab275163575613dd42af3
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Thu Sep 23 21:12:52 2021 +0300

    ice: Delete always true check of PF pointer
    
    commit 2ff04286a9569675948f39cec2c6ad47c3584633 upstream.
    
    PF pointer is always valid when PCI core calls its .shutdown() and
    .remove() callbacks. There is no need to check it again.
    
    Fixes: 837f08fdecbe ("ice: Add basic driver framework for Intel(R) E800 Series")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe65cecd2758ff45f3382865726c400625ed9623
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Oct 18 22:40:28 2021 +0200

    usb: max-3421: Use driver data instead of maintaining a list of bound devices
    
    commit fc153aba3ef371d0d76eb88230ed4e0dee5b38f2 upstream.
    
    Instead of maintaining a single-linked list of devices that must be
    searched linearly in .remove() just use spi_set_drvdata() to remember the
    link between the spi device and the driver struct. Then the global list
    and the next member can be dropped.
    
    This simplifies the driver, reduces the memory footprint and the time to
    search the list. Also it makes obvious that there is always a corresponding
    driver struct for a given device in .remove(), so the error path for
    !max3421_hcd can be dropped, too.
    
    As a side effect this fixes a data inconsistency when .probe() races with
    itself for a second max3421 device in manipulating max3421_hcd_list. A
    similar race is fixed in .remove(), too.
    
    Fixes: 2d53139f3162 ("Add support for using a MAX3421E chip as a host driver.")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Link: https://lore.kernel.org/r/20211018204028.2914597-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6186c7b9bdfc915f6a53666ea51ada20ca99dc4c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 5 10:09:25 2021 +0100

    ASoC: DAPM: Cover regression by kctl change notification fix
    
    commit 827b0913a9d9d07a0c3e559dbb20ca4d6d285a54 upstream.
    
    The recent fix for DAPM to correct the kctl change notification by the
    commit 5af82c81b2c4 ("ASoC: DAPM: Fix missing kctl change
    notifications") caused other regressions since it changed the behavior
    of snd_soc_dapm_set_pin() that is called from several API functions.
    Formerly it returned always 0 for success, but now it returns 0 or 1.
    
    This patch addresses it, restoring the old behavior of
    snd_soc_dapm_set_pin() while keeping the fix in
    snd_soc_dapm_put_pin_switch().
    
    Fixes: 5af82c81b2c4 ("ASoC: DAPM: Fix missing kctl change notifications")
    Reported-by: Yu-Hsuan Hsu <yuhsuan@chromium.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20211105090925.20575-1-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b17dd53cac769dd13031b0ca34f90cc65e523fab
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Fri Nov 19 14:45:20 2021 +0100

    selinux: fix NULL-pointer dereference when hashtab allocation fails
    
    commit dc27f3c5d10c58069672215787a96b4fae01818b upstream.
    
    When the hash table slot array allocation fails in hashtab_init(),
    h->size is left initialized with a non-zero value, but the h->htable
    pointer is NULL. This may then cause a NULL pointer dereference, since
    the policydb code relies on the assumption that even after a failed
    hashtab_init(), hashtab_map() and hashtab_destroy() can be safely called
    on it. Yet, these detect an empty hashtab only by looking at the size.
    
    Fix this by making sure that hashtab_init() always leaves behind a valid
    empty hashtab when the allocation fails.
    
    Cc: stable@vger.kernel.org
    Fixes: 03414a49ad5f ("selinux: do not allocate hashtabs dynamically")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ae0d59c4f5ed1555d99e139cb68b8e87a5e13eb
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Sun Nov 7 08:40:47 2021 +0200

    RDMA/netlink: Add __maybe_unused to static inline in C file
    
    commit 83dde7498fefeb920b1def317421262317d178e5 upstream.
    
    Like other commits in the tree add __maybe_unused to a static inline in a
    C file because some clang compilers will complain about unused code:
    
    >> drivers/infiniband/core/nldev.c:2543:1: warning: unused function '__chk_RDMA_NL_NLDEV'
       MODULE_ALIAS_RDMA_NETLINK(RDMA_NL_NLDEV, 5);
       ^
    
    Fixes: e3bf14bdc17a ("rdma: Autoload netlink client modules")
    Link: https://lore.kernel.org/r/4a8101919b765e01d7fde6f27fd572c958deeb4a.1636267207.git.leonro@nvidia.com
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40bc831ab5f630431010d1ff867390b07418a7ee
Author: Nadav Amit <namit@vmware.com>
Date:   Sun Nov 21 12:40:07 2021 -0800

    hugetlbfs: flush TLBs correctly after huge_pmd_unshare
    
    commit a4a118f2eead1d6c49e00765de89878288d4b890 upstream.
    
    When __unmap_hugepage_range() calls to huge_pmd_unshare() succeed, a TLB
    flush is missing.  This TLB flush must be performed before releasing the
    i_mmap_rwsem, in order to prevent an unshared PMDs page from being
    released and reused before the TLB flush took place.
    
    Arguably, a comprehensive solution would use mmu_gather interface to
    batch the TLB flushes and the PMDs page release, however it is not an
    easy solution: (1) try_to_unmap_one() and try_to_migrate_one() also call
    huge_pmd_unshare() and they cannot use the mmu_gather interface; and (2)
    deferring the release of the page reference for the PMDs page until
    after i_mmap_rwsem is dropeed can confuse huge_pmd_unshare() into
    thinking PMDs are shared when they are not.
    
    Fix __unmap_hugepage_range() by adding the missing TLB flush, and
    forcing a flush when unshare is successful.
    
    Fixes: 24669e58477e ("hugetlb: use mmu_gather instead of a temporary linked list for accumulating pages)" # 3.6
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86ab0f8ff008964c076784a70eb89503056ce92a
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Nov 8 08:48:14 2021 +0200

    scsi: ufs: core: Fix task management completion timeout race
    
    commit 886fe2915cce6658b0fc19e64b82879325de61ea upstream.
    
    __ufshcd_issue_tm_cmd() clears req->end_io_data after timing out, which
    races with the completion function ufshcd_tmc_handler() which expects
    req->end_io_data to have a value.
    
    Note __ufshcd_issue_tm_cmd() and ufshcd_tmc_handler() are already
    synchronized using hba->tmf_rqs and hba->outstanding_tasks under the
    host_lock spinlock.
    
    It is also not necessary (nor typical) to clear req->end_io_data because
    the block layer does it before allocating out requests e.g. via
    blk_get_request().
    
    So fix by not clearing it.
    
    Link: https://lore.kernel.org/r/20211108064815.569494-2-adrian.hunter@intel.com
    Fixes: f5ef336fd2e4 ("scsi: ufs: core: Fix task management completion")
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    [Adrian: Backport to v5.10]
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddd4e46cff40bf086cdb880490466c76abf7d3a2
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Sep 22 12:10:59 2021 +0300

    scsi: ufs: core: Fix task management completion
    
    commit f5ef336fd2e4c36dedae4e7ca66cf5349d6fda62 upstream.
    
    The UFS driver uses blk_mq_tagset_busy_iter() when identifying task
    management requests to complete, however blk_mq_tagset_busy_iter() doesn't
    work.
    
    blk_mq_tagset_busy_iter() only iterates requests dispatched by the block
    layer. That appears as if it might have started since commit 37f4a24c2469
    ("blk-mq: centralise related handling into blk_mq_get_driver_tag") which
    removed 'data->hctx->tags->rqs[rq->tag] = rq' from blk_mq_rq_ctx_init()
    which gets called:
    
            blk_get_request
                    blk_mq_alloc_request
                            __blk_mq_alloc_request
                                    blk_mq_rq_ctx_init
    
    Since UFS task management requests are not dispatched by the block layer,
    hctx->tags->rqs[rq->tag] remains NULL, and since blk_mq_tagset_busy_iter()
    relies on finding requests using hctx->tags->rqs[rq->tag], UFS task
    management requests are never found by blk_mq_tagset_busy_iter().
    
    By using blk_mq_tagset_busy_iter(), the UFS driver was relying on internal
    details of the block layer, which was fragile and subsequently got
    broken. Fix by removing the use of blk_mq_tagset_busy_iter() and having the
    driver keep track of task management requests.
    
    Link: https://lore.kernel.org/r/20210922091059.4040-1-adrian.hunter@intel.com
    Fixes: 1235fc569e0b ("scsi: ufs: core: Fix task management request completion timeout")
    Fixes: 69a6c269c097 ("scsi: ufs: Use blk_{get,put}_request() to allocate and free TMFs")
    Cc: stable@vger.kernel.org
    Tested-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    [Adrian: Backport to v5.10]
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04c586a601dc0acb8e739205db350ab660dffc4f
Author: hongao <hongao@uniontech.com>
Date:   Thu Nov 11 11:32:07 2021 +0800

    drm/amdgpu: fix set scaling mode Full/Full aspect/Center not works on vga and dvi connectors
    
    commit bf552083916a7f8800477b5986940d1c9a31b953 upstream.
    
    amdgpu_connector_vga_get_modes missed function amdgpu_get_native_mode
    which assign amdgpu_encoder->native_mode with *preferred_mode result in
    amdgpu_encoder->native_mode.clock always be 0. That will cause
    amdgpu_connector_set_property returned early on:
    if ((rmx_type != DRM_MODE_SCALE_NONE) &&
            (amdgpu_encoder->native_mode.clock == 0))
    when we try to set scaling mode Full/Full aspect/Center.
    Add the missing function to amdgpu_connector_vga_get_mode can fix this.
    It also works on dvi connectors because
    amdgpu_connector_dvi_helper_funcs.get_mode use the same method.
    
    Signed-off-by: hongao <hongao@uniontech.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47901b77bf7dc801a084a0b377aee5974d9bc4ce
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Oct 18 17:34:17 2021 +0300

    drm/i915/dp: Ensure sink rate values are always valid
    
    commit 6c34bd4532a3f39952952ddc102737595729afc4 upstream.
    
    Atm, there are no sink rate values set for DP (vs. eDP) sinks until the
    DPCD capabilities are successfully read from the sink. During this time
    intel_dp->num_common_rates is 0 which can lead to a
    
    intel_dp->common_rates[-1]    (*)
    
    access, which is an undefined behaviour, in the following cases:
    
    - In intel_dp_sync_state(), if the encoder is enabled without a sink
      connected to the encoder's connector (BIOS enabled a monitor, but the
      user unplugged the monitor until the driver loaded).
    - In intel_dp_sync_state() if the encoder is enabled with a sink
      connected, but for some reason the DPCD read has failed.
    - In intel_dp_compute_link_config() if modesetting a connector without
      a sink connected on it.
    - In intel_dp_compute_link_config() if modesetting a connector with a
      a sink connected on it, but before probing the connector first.
    
    To avoid the (*) access in all the above cases, make sure that the sink
    rate table - and hence the common rate table - is always valid, by
    setting a default minimum sink rate when registering the connector
    before anything could use it.
    
    I also considered setting all the DP link rates by default, so that
    modesetting with higher resolution modes also succeeds in the last two
    cases above. However in case a sink is not connected that would stop
    working after the first modeset, due to the LT fallback logic. So this
    would need more work, beyond the scope of this fix.
    
    As I mentioned in the previous patch, I don't think the issue this patch
    fixes is user visible, however it is an undefined behaviour by
    definition and triggers a BUG() in CONFIG_UBSAN builds, hence CC:stable.
    
    v2: Clear the default sink rates, before initializing these for eDP.
    
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4297
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/4298
    Suggested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Acked-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211018143417.1452632-1-imre.deak@intel.com
    (cherry picked from commit 3f61ef9777c0ab0f03f4af0ed6fd3e5250537a8d)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82de15ca6b5574fc0e2f54daa1de00b5b2dcf32f
Author: Jeremy Cline <jcline@redhat.com>
Date:   Wed Nov 25 15:26:48 2020 -0500

    drm/nouveau: clean up all clients on device removal
    
    commit f55aaf63bde0d0336c3823bb3713bd4a464abbcf upstream.
    
    The postclose handler can run after the device has been removed (or the
    driver has been unbound) since userspace clients are free to hold the
    file open as long as they want. Because the device removal callback
    frees the entire nouveau_drm structure, any reference to it in the
    postclose handler will result in a use-after-free.
    
    To reproduce this, one must simply open the device file, unbind the
    driver (or physically remove the device), and then close the device
    file. This was found and can be reproduced easily with the IGT
    core_hotunplug tests.
    
    To avoid this, all clients are cleaned up in the device finalization
    rather than deferring it to the postclose handler, and the postclose
    handler is protected by a critical section which ensures the
    drm_dev_unplug() and the postclose handler won't race.
    
    This is not an ideal fix, since as I understand the proposed plan for
    the kernel<->userspace interface for hotplug support, destroying the
    client before the file is closed will cause problems. However, I believe
    to properly fix this issue, the lifetime of the nouveau_drm structure
    needs to be extended to match the drm_device, and this proved to be a
    rather invasive change. Thus, I've broken this out so the fix can be
    easily backported.
    
    This fixes with the two previous commits CVE-2020-27820 (Karol).
    
    Cc: stable@vger.kernel.org # 5.4+
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Ben Skeggs <bskeggs@redhat.com>
    Tested-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201125202648.5220-4-jcline@redhat.com
    Link: https://gitlab.freedesktop.org/drm/nouveau/-/merge_requests/14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c81c90fbf5775ed1b907230eaaa766fa0e1b7cfa
Author: Jeremy Cline <jcline@redhat.com>
Date:   Wed Nov 25 15:26:46 2020 -0500

    drm/nouveau: use drm_dev_unplug() during device removal
    
    commit aff2299e0d81b26304ccc6a1ec0170e437f38efc upstream.
    
    Nouveau does not currently support hot-unplugging, but it still makes
    sense to switch from drm_dev_unregister() to drm_dev_unplug().
    drm_dev_unplug() calls drm_dev_unregister() after marking the device as
    unplugged, but only after any device critical sections are finished.
    
    Since nouveau isn't using drm_dev_enter() and drm_dev_exit(), there are
    no critical sections so this is nearly functionally equivalent. However,
    the DRM layer does check to see if the device is unplugged, and if it is
    returns appropriate error codes.
    
    In the future nouveau can add critical sections in order to truly
    support hot-unplugging.
    
    Cc: stable@vger.kernel.org # 5.4+
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Ben Skeggs <bskeggs@redhat.com>
    Tested-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201125202648.5220-2-jcline@redhat.com
    Link: https://gitlab.freedesktop.org/drm/nouveau/-/merge_requests/14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9221aff33edb627ea52a51379862f46e63e7c0c9
Author: Jeremy Cline <jcline@redhat.com>
Date:   Wed Nov 25 15:26:47 2020 -0500

    drm/nouveau: Add a dedicated mutex for the clients list
    
    commit abae9164a421bc4a41a3769f01ebcd1f9d955e0e upstream.
    
    Rather than protecting the nouveau_drm clients list with the lock within
    the "client" nouveau_cli, add a dedicated lock to serialize access to
    the list. This is both clearer and necessary to avoid lockdep being
    upset with us when we need to iterate through all the clients in the
    list and potentially lock their mutex, which is the same class as the
    lock protecting the entire list.
    
    Cc: stable@vger.kernel.org # 5.4+
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Ben Skeggs <bskeggs@redhat.com>
    Tested-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201125202648.5220-3-jcline@redhat.com
    Link: https://gitlab.freedesktop.org/drm/nouveau/-/merge_requests/14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65517975cb195955bf43d91cbb77bbc309253e0b
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 13:53:53 2021 +0200

    drm/udl: fix control-message timeout
    
    commit 5591c8f79db1729d9c5ac7f5b4d3a5c26e262d93 upstream.
    
    USB control-message timeouts are specified in milliseconds and should
    specifically not vary with CONFIG_HZ.
    
    Fixes: 5320918b9a87 ("drm/udl: initial UDL driver (v4)")
    Cc: stable@vger.kernel.org      # 3.4
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211025115353.5089-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d68d6ee83144044f610d67304cc194c2af7d0c5
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Fri Jul 30 16:55:06 2021 -0400

    drm/amd/display: Update swizzle mode enums
    
    commit 58065a1e524de30df9a2d8214661d5d7eed0a2d9 upstream.
    
    [Why]
    Swizzle mode enum for DC_SW_VAR_R_X was existing,
    but not mapped correctly.
    
    [How]
    Update mapping and conversion for DC_SW_VAR_R_X.
    
    Reviewed-by: XiangBing Foo <XiangBing.Foo@amd.com>
    Reviewed-by: Martin Leung <Martin.Leung@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Cc: stable@vger.kernel.org
    Tested-by: Daniel Wheeler <Daniel.Wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b97b5776daa0b39dbdadfea176f9cc0646d4a66
Author: Nguyen Dinh Phi <phind.uet@gmail.com>
Date:   Thu Oct 28 01:37:22 2021 +0800

    cfg80211: call cfg80211_stop_ap when switch from P2P_GO type
    
    commit 563fbefed46ae4c1f70cffb8eb54c02df480b2c2 upstream.
    
    If the userspace tools switch from NL80211_IFTYPE_P2P_GO to
    NL80211_IFTYPE_ADHOC via send_msg(NL80211_CMD_SET_INTERFACE), it
    does not call the cleanup cfg80211_stop_ap(), this leads to the
    initialization of in-use data. For example, this path re-init the
    sdata->assigned_chanctx_list while it is still an element of
    assigned_vifs list, and makes that linked list corrupt.
    
    Signed-off-by: Nguyen Dinh Phi <phind.uet@gmail.com>
    Reported-by: syzbot+bbf402b783eeb6d908db@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20211027173722.777287-1-phind.uet@gmail.com
    Cc: stable@vger.kernel.org
    Fixes: ac800140c20e ("cfg80211: .stop_ap when interface is going down")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ab297809de835c2b0d196ed0a0b0b14bd7c7dd1
Author: Sven Schnelle <svens@stackframe.org>
Date:   Sun Nov 14 17:08:17 2021 +0100

    parisc/sticon: fix reverse colors
    
    commit bec05f33ebc1006899c6d3e59a00c58881fe7626 upstream.
    
    sticon_build_attr() checked the reverse argument and flipped
    background and foreground color, but returned the non-reverse
    value afterwards. Fix this and also add two local variables
    for foreground and background color to make the code easier
    to read.
    
    Signed-off-by: Sven Schnelle <svens@stackframe.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6adbc07ebcaf8bead08b21687d49e0fc94400987
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Tue Nov 2 14:49:16 2021 +0200

    btrfs: fix memory ordering between normal and ordered work functions
    
    commit 45da9c1767ac31857df572f0a909fbe88fd5a7e9 upstream.
    
    Ordered work functions aren't guaranteed to be handled by the same thread
    which executed the normal work functions. The only way execution between
    normal/ordered functions is synchronized is via the WORK_DONE_BIT,
    unfortunately the used bitops don't guarantee any ordering whatsoever.
    
    This manifested as seemingly inexplicable crashes on ARM64, where
    async_chunk::inode is seen as non-null in async_cow_submit which causes
    submit_compressed_extents to be called and crash occurs because
    async_chunk::inode suddenly became NULL. The call trace was similar to:
    
        pc : submit_compressed_extents+0x38/0x3d0
        lr : async_cow_submit+0x50/0xd0
        sp : ffff800015d4bc20
    
        <registers omitted for brevity>
    
        Call trace:
         submit_compressed_extents+0x38/0x3d0
         async_cow_submit+0x50/0xd0
         run_ordered_work+0xc8/0x280
         btrfs_work_helper+0x98/0x250
         process_one_work+0x1f0/0x4ac
         worker_thread+0x188/0x504
         kthread+0x110/0x114
         ret_from_fork+0x10/0x18
    
    Fix this by adding respective barrier calls which ensure that all
    accesses preceding setting of WORK_DONE_BIT are strictly ordered before
    setting the flag. At the same time add a read barrier after reading of
    WORK_DONE_BIT in run_ordered_work which ensures all subsequent loads
    would be strictly ordered after reading the bit. This in turn ensures
    are all accesses before WORK_DONE_BIT are going to be strictly ordered
    before any access that can occur in ordered_func.
    
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Fixes: 08a9ff326418 ("btrfs: Added btrfs_workqueue_struct implemented ordered execution based on kernel workqueue")
    CC: stable@vger.kernel.org # 4.4+
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2011928
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Tested-by: Chris Murphy <chris@colorremedies.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6289b494b38e352e65bd4b3b75af692d83a7f9b7
Author: Meng Li <meng.li@windriver.com>
Date:   Mon Nov 15 15:04:23 2021 +0800

    net: stmmac: socfpga: add runtime suspend/resume callback for stratix10 platform
    
    commit 9119570039481d56350af1c636f040fb300b8cf3 upstream.
    
    According to upstream commit 5ec55823438e("net: stmmac:
    add clocks management for gmac driver"), it improve clocks
    management for stmmac driver. So, it is necessary to implement
    the runtime callback in dwmac-socfpga driver because it doesn't
    use the common stmmac_pltfr_pm_ops instance. Otherwise, clocks
    are not disabled when system enters suspend status.
    
    Fixes: 5ec55823438e ("net: stmmac: add clocks management for gmac driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Meng Li <Meng.Li@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5875f87e2fc9930463e56cbd25ca2c961ef31b45
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 4 15:22:35 2021 +0100

    udf: Fix crash after seekdir
    
    commit a48fc69fe6588b48d878d69de223b91a386a7cb4 upstream.
    
    udf_readdir() didn't validate the directory position it should start
    reading from. Thus when user uses lseek(2) on directory file descriptor
    it can trick udf_readdir() into reading from a position in the middle of
    directory entry which then upsets directory parsing code resulting in
    errors or even possible kernel crashes. Similarly when the directory is
    modified between two readdir calls, the directory position need not be
    valid anymore.
    
    Add code to validate current offset in the directory. This is actually
    rather expensive for UDF as we need to read from the beginning of the
    directory and parse all directory entries. This is because in UDF a
    directory is just a stream of data containing directory entries and
    since file names are fully under user's control we cannot depend on
    detecting magic numbers and checksums in the header of directory entry
    as a malicious attacker could fake them. We skip this step if we detect
    that nothing changed since the last readdir call.
    
    Reported-by: Nathan Wilson <nate@chickenbrittle.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b43cf113a382694da8c3c63ab9ef41018b8c49e
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Mon Nov 15 15:18:36 2021 +0200

    KVM: nVMX: don't use vcpu->arch.efer when checking host state on nested state load
    
    commit af957eebfcc17433ee83ab85b1195a933ab5049c upstream.
    
    When loading nested state, don't use check vcpu->arch.efer to get the
    L1 host's 64-bit vs. 32-bit state and don't check it for consistency
    with respect to VM_EXIT_HOST_ADDR_SPACE_SIZE, as register state in vCPU
    may be stale when KVM_SET_NESTED_STATE is called---and architecturally
    does not exist.  When restoring L2 state in KVM, the CPU is placed in
    non-root where nested VMX code has no snapshot of L1 host state: VMX
    (conditionally) loads host state fields loaded on VM-exit, but they need
    not correspond to the state before entry.  A simple case occurs in KVM
    itself, where the host RIP field points to vmx_vmexit rather than the
    instruction following vmlaunch/vmresume.
    
    However, for the particular case of L1 being in 32- or 64-bit mode
    on entry, the exit controls can be treated instead as the source of
    truth regarding the state of L1 on entry, and can be used to check
    that vmcs12.VM_EXIT_HOST_ADDR_SPACE_SIZE matches vmcs12.HOST_EFER if
    vmcs12.VM_EXIT_LOAD_IA32_EFER is set.  The consistency check on CPU
    EFER vs. vmcs12.VM_EXIT_HOST_ADDR_SPACE_SIZE, instead, happens only
    on VM-Enter.  That's because, again, there's conceptually no "current"
    L1 EFER to check on KVM_SET_NESTED_STATE.
    
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20211115131837.195527-2-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc73242889b5d24a7449bb1f8ca46d2768c3496f
Author: Alistair Delva <adelva@google.com>
Date:   Mon Nov 15 18:16:55 2021 +0000

    block: Check ADMIN before NICE for IOPRIO_CLASS_RT
    
    commit 94c4b4fd25e6c3763941bdec3ad54f2204afa992 upstream.
    
    Booting to Android userspace on 5.14 or newer triggers the following
    SELinux denial:
    
    avc: denied { sys_nice } for comm="init" capability=23
         scontext=u:r:init:s0 tcontext=u:r:init:s0 tclass=capability
         permissive=0
    
    Init is PID 0 running as root, so it already has CAP_SYS_ADMIN. For
    better compatibility with older SEPolicy, check ADMIN before NICE.
    
    Fixes: 9d3a39a5f1e4 ("block: grant IOPRIO_CLASS_RT to CAP_SYS_NICE")
    Signed-off-by: Alistair Delva <adelva@google.com>
    Cc: Khazhismel Kumykov <khazhy@google.com>
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Paul Moore <paul@paul-moore.com>
    Cc: selinux@vger.kernel.org
    Cc: linux-security-module@vger.kernel.org
    Cc: kernel-team@android.com
    Cc: stable@vger.kernel.org # v5.14+
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Acked-by: Serge Hallyn <serge@hallyn.com>
    Link: https://lore.kernel.org/r/20211115181655.3608659-1-adelva@google.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63e2f34abc22004011fa6bf8b402681dae103b2a
Author: Baoquan He <bhe@redhat.com>
Date:   Tue Nov 16 11:31:01 2021 +0800

    s390/kexec: fix memory leak of ipl report buffer
    
    commit 4aa9340584e37debef06fa99b56d064beb723891 upstream.
    
    unreferenced object 0x38000195000 (size 4096):
      comm "kexec", pid 8548, jiffies 4294953647 (age 32443.270s)
      hex dump (first 32 bytes):
        00 00 00 c8 20 00 00 00 00 00 00 c0 02 80 00 00  .... ...........
        40 40 40 40 40 40 40 40 00 00 00 00 00 00 00 00  @@@@@@@@........
      backtrace:
        [<0000000011a2f199>] __vmalloc_node_range+0xc0/0x140
        [<0000000081fa2752>] vzalloc+0x5a/0x70
        [<0000000063a4c92d>] ipl_report_finish+0x2c/0x180
        [<00000000553304da>] kexec_file_add_ipl_report+0xf4/0x150
        [<00000000862d033f>] kexec_file_add_components+0x124/0x160
        [<000000000d2717bb>] arch_kexec_kernel_image_load+0x62/0x90
        [<000000002e0373b6>] kimage_file_alloc_init+0x1aa/0x2e0
        [<0000000060f2d14f>] __do_sys_kexec_file_load+0x17c/0x2c0
        [<000000008c86fe5a>] __s390x_sys_kexec_file_load+0x40/0x50
        [<000000001fdb9dac>] __do_syscall+0x1bc/0x1f0
        [<000000003ee4258d>] system_call+0x78/0xa0
    
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Reviewed-by: Philipp Rudo <prudo@redhat.com>
    Fixes: 99feaa717e55 ("s390/kexec_file: Create ipl report and pass to next kernel")
    Cc: <stable@vger.kernel.org> # v5.2: 20c76e242e70: s390/kexec: fix return code handling
    Cc: <stable@vger.kernel.org> # v5.2
    Link: https://lore.kernel.org/r/20211116033101.GD21646@MiWiFi-R3L-srv
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1cf0d2fc4e4bb52adca636c30030ab94f1a3deb
Author: Ewan D. Milne <emilne@redhat.com>
Date:   Mon Nov 8 13:30:12 2021 -0500

    scsi: qla2xxx: Fix mailbox direction flags in qla2xxx_get_adapter_id()
    
    commit 392006871bb26166bcfafa56faf49431c2cfaaa8 upstream.
    
    The SCM changes set the flags in mcp->out_mb instead of mcp->in_mb so the
    data was not actually being read into the mcp->mb[] array from the adapter.
    
    Link: https://lore.kernel.org/r/20211108183012.13895-1-emilne@redhat.com
    Fixes: 9f2475fe7406 ("scsi: qla2xxx: SAN congestion management implementation")
    Cc: stable@vger.kernel.org
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08fd6df8eaaf2c7a3b70629954d432bb80018bf0
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Nov 15 09:08:36 2021 +0100

    powerpc/8xx: Fix pinned TLBs with CONFIG_STRICT_KERNEL_RWX
    
    commit 1e35eba4055149c578baf0318d2f2f89ea3c44a0 upstream.
    
    As spotted and explained in commit c12ab8dbc492 ("powerpc/8xx: Fix
    Oops with STRICT_KERNEL_RWX without DEBUG_RODATA_TEST"), the selection
    of STRICT_KERNEL_RWX without selecting DEBUG_RODATA_TEST has spotted
    the lack of the DIRTY bit in the pinned kernel data TLBs.
    
    This problem should have been detected a lot earlier if things had
    been working as expected. But due to an incredible level of chance or
    mishap, this went undetected because of a set of bugs: In fact the
    DTLBs were not pinned, because instead of setting the reserve bit
    in MD_CTR, it was set in MI_CTR that is the register for ITLBs.
    
    But then, another huge bug was there: the physical address was
    reset to 0 at the boundary between RO and RW areas, leading to the
    same physical space being mapped at both 0xc0000000 and 0xc8000000.
    This had by miracle no consequence until now because the entry was
    not really pinned so it was overwritten soon enough to go undetected.
    
    Of course, now that we really pin the DTLBs, it must be fixed as well.
    
    Fixes: f76c8f6d257c ("powerpc/8xx: Add function to set pinned TLBs")
    Cc: stable@vger.kernel.org # v5.8+
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Depends-on: c12ab8dbc492 ("powerpc/8xx: Fix Oops with STRICT_KERNEL_RWX without DEBUG_RODATA_TEST")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/a21e9a057fe2d247a535aff0d157a54eefee017a.1636963688.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c177eee116cf888276d3748cb176e72562cfd5c
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 4 18:22:38 2021 +0000

    x86/hyperv: Fix NULL deref in set_hv_tscchange_cb() if Hyper-V setup fails
    
    commit daf972118c517b91f74ff1731417feb4270625a4 upstream.
    
    Check for a valid hv_vp_index array prior to derefencing hv_vp_index when
    setting Hyper-V's TSC change callback.  If Hyper-V setup failed in
    hyperv_init(), the kernel will still report that it's running under
    Hyper-V, but will have silently disabled nearly all functionality.
    
      BUG: kernel NULL pointer dereference, address: 0000000000000010
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] SMP
      CPU: 4 PID: 1 Comm: swapper/0 Not tainted 5.15.0-rc2+ #75
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      RIP: 0010:set_hv_tscchange_cb+0x15/0xa0
      Code: <8b> 04 82 8b 15 12 17 85 01 48 c1 e0 20 48 0d ee 00 01 00 f6 c6 08
      ...
      Call Trace:
       kvm_arch_init+0x17c/0x280
       kvm_init+0x31/0x330
       vmx_init+0xba/0x13a
       do_one_initcall+0x41/0x1c0
       kernel_init_freeable+0x1f2/0x23b
       kernel_init+0x16/0x120
       ret_from_fork+0x22/0x30
    
    Fixes: 93286261de1b ("x86/hyperv: Reenlightenment notifications support")
    Cc: stable@vger.kernel.org
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/20211104182239.1302956-2-seanjc@google.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2e2fb64071a00df54d904858b591590de369108
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Fri Nov 19 16:43:37 2021 -0800

    mm: kmemleak: slob: respect SLAB_NOLEAKTRACE flag
    
    commit 34dbc3aaf5d9e89ba6cc5e24add9458c21ab1950 upstream.
    
    When kmemleak is enabled for SLOB, system does not boot and does not
    print anything to the console.  At the very early stage in the boot
    process we hit infinite recursion from kmemleak_init() and eventually
    kernel crashes.
    
    kmemleak_init() specifies SLAB_NOLEAKTRACE for KMEM_CACHE(), but
    kmem_cache_create_usercopy() removes it because CACHE_CREATE_MASK is not
    valid for SLOB.
    
    Let's fix CACHE_CREATE_MASK and make kmemleak work with SLOB
    
    Link: https://lkml.kernel.org/r/20211115020850.3154366-1-rkovhaev@gmail.com
    Fixes: d8843922fba4 ("slab: Ignore internal flags in cache creation")
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Glauber Costa <glommer@parallels.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99032adf7d4b2e6abe0da4cd3d0c0d2d3d3e102b
Author: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
Date:   Fri Nov 19 16:43:18 2021 -0800

    ipc: WARN if trying to remove ipc object which is absent
    
    commit 126e8bee943e9926238c891e2df5b5573aee76bc upstream.
    
    Patch series "shm: shm_rmid_forced feature fixes".
    
    Some time ago I met kernel crash after CRIU restore procedure,
    fortunately, it was CRIU restore, so, I had dump files and could do
    restore many times and crash reproduced easily.  After some
    investigation I've constructed the minimal reproducer.  It was found
    that it's use-after-free and it happens only if sysctl
    kernel.shm_rmid_forced = 1.
    
    The key of the problem is that the exit_shm() function not handles shp's
    object destroy when task->sysvshm.shm_clist contains items from
    different IPC namespaces.  In most cases this list will contain only
    items from one IPC namespace.
    
    How can this list contain object from different namespaces? The
    exit_shm() function is designed to clean up this list always when
    process leaves IPC namespace.  But we made a mistake a long time ago and
    did not add a exit_shm() call into the setns() syscall procedures.
    
    The first idea was just to add this call to setns() syscall but it
    obviously changes semantics of setns() syscall and that's
    userspace-visible change.  So, I gave up on this idea.
    
    The first real attempt to address the issue was just to omit forced
    destroy if we meet shp object not from current task IPC namespace [1].
    But that was not the best idea because task->sysvshm.shm_clist was
    protected by rwsem which belongs to current task IPC namespace.  It
    means that list corruption may occur.
    
    Second approach is just extend exit_shm() to properly handle shp's from
    different IPC namespaces [2].  This is really non-trivial thing, I've
    put a lot of effort into that but not believed that it's possible to
    make it fully safe, clean and clear.
    
    Thanks to the efforts of Manfred Spraul working an elegant solution was
    designed.  Thanks a lot, Manfred!
    
    Eric also suggested the way to address the issue in ("[RFC][PATCH] shm:
    In shm_exit destroy all created and never attached segments") Eric's
    idea was to maintain a list of shm_clists one per IPC namespace, use
    lock-less lists.  But there is some extra memory consumption-related
    concerns.
    
    An alternative solution which was suggested by me was implemented in
    ("shm: reset shm_clist on setns but omit forced shm destroy").  The idea
    is pretty simple, we add exit_shm() syscall to setns() but DO NOT
    destroy shm segments even if sysctl kernel.shm_rmid_forced = 1, we just
    clean up the task->sysvshm.shm_clist list.
    
    This chages semantics of setns() syscall a little bit but in comparision
    to the "naive" solution when we just add exit_shm() without any special
    exclusions this looks like a safer option.
    
    [1] https://lkml.org/lkml/2021/7/6/1108
    [2] https://lkml.org/lkml/2021/7/14/736
    
    This patch (of 2):
    
    Let's produce a warning if we trying to remove non-existing IPC object
    from IPC namespace kht/idr structures.
    
    This allows us to catch possible bugs when the ipc_rmid() function was
    called with inconsistent struct ipc_ids*, struct kern_ipc_perm*
    arguments.
    
    Link: https://lkml.kernel.org/r/20211027224348.611025-1-alexander.mikhalitsyn@virtuozzo.com
    Link: https://lkml.kernel.org/r/20211027224348.611025-2-alexander.mikhalitsyn@virtuozzo.com
    Co-developed-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
    Cc: Vasily Averin <vvs@virtuozzo.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d91625863d4ffed63b993b5e6dc1298b6430c9
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Mon Nov 15 08:01:43 2021 -0800

    tipc: check for null after calling kmemdup
    
    commit 3e6db079751afd527bf3db32314ae938dc571916 upstream.
    
    kmemdup can return a null pointer so need to check for it, otherwise
    the null key will be dereferenced later in tipc_crypto_key_xmit as
    can be seen in the trace [1].
    
    Cc: tipc-discussion@lists.sourceforge.net
    Cc: stable@vger.kernel.org # 5.15, 5.14, 5.10
    
    [1] https://syzkaller.appspot.com/bug?id=bca180abb29567b189efdbdb34cbf7ba851c2a58
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20211115160143.5099-1-tadeusz.struk@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5995fcb75eb8b94cd23bd31003941de0eb8b12e
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Nov 19 16:43:31 2021 -0800

    hexagon: clean up timer-regs.h
    
    commit 51f2ec593441d3d1ebc0d478fac3ea329c7c93ac upstream.
    
    When building allmodconfig, there is a warning about TIMER_ENABLE being
    redefined:
    
      drivers/clocksource/timer-oxnas-rps.c:39:9: error: 'TIMER_ENABLE' macro redefined [-Werror,-Wmacro-redefined]
      #define TIMER_ENABLE            BIT(7)
              ^
      arch/hexagon/include/asm/timer-regs.h:13:9: note: previous definition is here
      #define TIMER_ENABLE            0
               ^
      1 error generated.
    
    The values in this header are only used in one file each, if they are
    used at all.  Remove the header and sink all of the constants into their
    respective files.
    
    TCX0_CLK_RATE is only used in arch/hexagon/include/asm/timex.h
    
    TIMER_ENABLE, RTOS_TIMER_INT, RTOS_TIMER_REGS_ADDR are only used in
    arch/hexagon/kernel/time.c.
    
    SLEEP_CLK_RATE and TIMER_CLR_ON_MATCH have both been unused since the
    file's introduction in commit 71e4a47f32f4 ("Hexagon: Add time and timer
    functions").
    
    TIMER_ENABLE is redefined as BIT(0) so the shift is moved into the
    definition, rather than its use.
    
    Link: https://lkml.kernel.org/r/20211115174250.1994179-3-nathan@kernel.org
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Brian Cain <bcain@codeaurora.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0854c9ff2151f9180cdf4d4576ff3eb9f343d263
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Nov 19 16:43:28 2021 -0800

    hexagon: export raw I/O routines for modules
    
    commit ffb92ce826fd801acb0f4e15b75e4ddf0d189bde upstream.
    
    Patch series "Fixes for ARCH=hexagon allmodconfig", v2.
    
    This series fixes some issues noticed with ARCH=hexagon allmodconfig.
    
    This patch (of 3):
    
    When building ARCH=hexagon allmodconfig, the following errors occur:
    
      ERROR: modpost: "__raw_readsl" [drivers/i3c/master/svc-i3c-master.ko] undefined!
      ERROR: modpost: "__raw_writesl" [drivers/i3c/master/dw-i3c-master.ko] undefined!
      ERROR: modpost: "__raw_readsl" [drivers/i3c/master/dw-i3c-master.ko] undefined!
      ERROR: modpost: "__raw_writesl" [drivers/i3c/master/i3c-master-cdns.ko] undefined!
      ERROR: modpost: "__raw_readsl" [drivers/i3c/master/i3c-master-cdns.ko] undefined!
    
    Export these symbols so that modules can use them without any errors.
    
    Link: https://lkml.kernel.org/r/20211115174250.1994179-1-nathan@kernel.org
    Link: https://lkml.kernel.org/r/20211115174250.1994179-2-nathan@kernel.org
    Fixes: 013bf24c3829 ("Hexagon: Provide basic implementation and/or stubs for I/O routines.")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Brian Cain <bcain@codeaurora.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 528971af64fc88767e91ae12c0ae036af928feaa
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Fri Nov 12 08:56:03 2021 +0100

    tun: fix bonding active backup with arp monitoring
    
    commit a31d27fbed5d518734cb60956303eb15089a7634 upstream.
    
    As stated in the bonding doc, trans_start must be set manually for drivers
    using NETIF_F_LLTX:
     Drivers that use NETIF_F_LLTX flag must also update
     netdev_queue->trans_start. If they do not, then the ARP monitor will
     immediately fail any slaves using that driver, and those slaves will stay
     down.
    
    Link: https://www.kernel.org/doc/html/v5.15/networking/bonding.html#arp-monitor-operation
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af1d3c437eb526f9274e1bf2f8ff4a0484eb1c48
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Oct 19 15:36:45 2021 -0700

    arm64: vdso32: suppress error message for 'make mrproper'
    
    commit 14831fad73f5ac30ac61760487d95a538e6ab3cb upstream.
    
    When running the following command without arm-linux-gnueabi-gcc in
    one's $PATH, the following warning is observed:
    
    $ ARCH=arm64 CROSS_COMPILE_COMPAT=arm-linux-gnueabi- make -j72 LLVM=1 mrproper
    make[1]: arm-linux-gnueabi-gcc: No such file or directory
    
    This is because KCONFIG is not run for mrproper, so CONFIG_CC_IS_CLANG
    is not set, and we end up eagerly evaluating various variables that try
    to invoke CC_COMPAT.
    
    This is a similar problem to what was observed in
    commit dc960bfeedb0 ("h8300: suppress error messages for 'make clean'")
    
    Reported-by: Lucas Henneman <henneman@google.com>
    Suggested-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20211019223646.1146945-4-ndesaulniers@google.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97653ba562b9b28e30a3fcff42531e05a434d58c
Author: Punit Agrawal <punitagrawal@gmail.com>
Date:   Wed Sep 29 22:50:49 2021 +0900

    net: stmmac: dwmac-rk: Fix ethernet on rk3399 based devices
    
    commit aec3f415f7244b7747a7952596971adb0df2f568 upstream.
    
    Commit 2d26f6e39afb ("net: stmmac: dwmac-rk: fix unbalanced pm_runtime_enable warnings")
    while getting rid of a runtime PM warning ended up breaking ethernet
    on rk3399 based devices. By dropping an extra reference to the device,
    the commit ends up enabling suspend / resume of the ethernet device -
    which appears to be broken.
    
    While the issue with runtime pm is being investigated, partially
    revert commit 2d26f6e39afb to restore the network on rk3399.
    
    Fixes: 2d26f6e39afb ("net: stmmac: dwmac-rk: fix unbalanced pm_runtime_enable warnings")
    Suggested-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Punit Agrawal <punitagrawal@gmail.com>
    Cc: Michael Riesch <michael.riesch@wolfvision.net>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20210929135049.3426058-1-punitagrawal@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cebe23c032ba44c3d3140dace9a1318f5778cdf
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Tue Nov 16 11:06:38 2021 +0100

    s390/kexec: fix return code handling
    
    [ Upstream commit 20c76e242e7025bd355619ba67beb243ba1a1e95 ]
    
    kexec_file_add_ipl_report ignores that ipl_report_finish may fail and
    can return an error pointer instead of a valid pointer.
    Fix this and simplify by returning NULL in case of an error and let
    the only caller handle this case.
    
    Fixes: 99feaa717e55 ("s390/kexec_file: Create ipl report and pass to next kernel")
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4fb80ae98303e0ff77229c02e6b42b236344ea6
Author: Alexander Antonov <alexander.antonov@linux.intel.com>
Date:   Mon Nov 15 12:03:33 2021 +0300

    perf/x86/intel/uncore: Fix IIO event constraints for Skylake Server
    
    [ Upstream commit 3866ae319c846a612109c008f43cba80b8c15e86 ]
    
    According to the latest uncore document, COMP_BUF_OCCUPANCY (0xd5) event
    can be collected on 2-3 counters. Update uncore IIO event constraints for
    Skylake Server.
    
    Fixes: cd34cd97b7b4 ("perf/x86/intel/uncore: Add Skylake server uncore support")
    Signed-off-by: Alexander Antonov <alexander.antonov@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lore.kernel.org/r/20211115090334.3789-3-alexander.antonov@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 175135a5eacf40b0ed9a9e3b91baca40fb3ba59a
Author: Alexander Antonov <alexander.antonov@linux.intel.com>
Date:   Mon Nov 15 12:03:32 2021 +0300

    perf/x86/intel/uncore: Fix filter_tid mask for CHA events on Skylake Server
    
    [ Upstream commit e324234e0aa881b7841c7c713306403e12b069ff ]
    
    According Uncore Reference Manual: any of the CHA events may be filtered
    by Thread/Core-ID by using tid modifier in CHA Filter 0 Register.
    Update skx_cha_hw_config() to follow Uncore Guide.
    
    Fixes: cd34cd97b7b4 ("perf/x86/intel/uncore: Add Skylake server uncore support")
    Signed-off-by: Alexander Antonov <alexander.antonov@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lore.kernel.org/r/20211115090334.3789-2-alexander.antonov@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84f64c7c52d613d82551be20280a7cb2656918d1
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Mon Nov 1 22:41:15 2021 -0500

    pinctrl: qcom: sdm845: Enable dual edge errata
    
    [ Upstream commit 3a3a100473d2f6ebf9bdfe6efedd7e18de724388 ]
    
    It has been observed that dual edge triggered wakeirq GPIOs on SDM845
    doesn't trigger interrupts on the falling edge.
    
    Enabling wakeirq_dual_edge_errata for SDM845 indicates that the PDC in
    SDM845 suffers from the same problem described, and worked around, by
    Doug in 'c3c0c2e18d94 ("pinctrl: qcom: Handle broken/missing PDC dual
    edge IRQs on sc7180")', so enable the workaround for SDM845 as well.
    
    The specific problem seen without this is that gpio-keys does not detect
    the falling edge of the LID gpio on the Lenovo Yoga C630 and as such
    consistently reports the LID as closed.
    
    Fixes: e35a6ae0eb3a ("pinctrl/msm: Setup GPIO chip in hierarchy")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Tested-By: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20211102034115.1946036-1-bjorn.andersson@linaro.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8230fb74b5452b59ed9bd26c6f51ad7e3706982
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Sep 24 01:10:31 2021 +1000

    KVM: PPC: Book3S HV: Use GLOBAL_TOC for kvmppc_h_set_dabr/xdabr()
    
    [ Upstream commit dae581864609d36fb58855fd59880b4941ce9d14 ]
    
    kvmppc_h_set_dabr(), and kvmppc_h_set_xdabr() which jumps into
    it, need to use _GLOBAL_TOC to setup the kernel TOC pointer, because
    kvmppc_h_set_dabr() uses LOAD_REG_ADDR() to load dawr_force_enable.
    
    When called from hcall_try_real_mode() we have the kernel TOC in r2,
    established near the start of kvmppc_interrupt_hv(), so there is no
    issue.
    
    But they can also be called from kvmppc_pseries_do_hcall() which is
    module code, so the access ends up happening with the kvm-hv module's
    r2, which will not point at dawr_force_enable and could even cause a
    fault.
    
    With the current code layout and compilers we haven't observed a fault
    in practice, the load hits somewhere in kvm-hv.ko and silently returns
    some bogus value.
    
    Note that we we expect p8/p9 guests to use the DAWR, but SLOF uses
    h_set_dabr() to test if sc1 works correctly, see SLOF's
    lib/libhvcall/brokensc1.c.
    
    Fixes: c1fe190c0672 ("powerpc: Add force enable of DAWR on P9 option")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    Link: https://lore.kernel.org/r/20210923151031.72408-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e6cce20fbc02d45e8505e0381ad6f9afb1b873b
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Wed Nov 17 12:59:52 2021 -0800

    e100: fix device suspend/resume
    
    [ Upstream commit 5d2ca2e12dfb2aff3388ca57b06f570fa6206ced ]
    
    As reported in [1], e100 was no longer working for suspend/resume
    cycles. The previous commit mentioned in the fixes appears to have
    broken things and this attempts to practice best known methods for
    device power management and keep wake-up working while allowing
    suspend/resume to work. To do this, I reorder a little bit of code
    and fix the resume path to make sure the device is enabled.
    
    [1] https://bugzilla.kernel.org/show_bug.cgi?id=214933
    
    Fixes: 69a74aef8a18 ("e100: use generic power management")
    Cc: Vaibhav Gupta <vaibhavgupta40@gmail.com>
    Reported-by: Alexey Kuznetsov <axet@me.com>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Alexey Kuznetsov <axet@me.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34e54703fb0fdbfc0a3cfc065d71e9a8353d3ac9
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Nov 16 23:27:32 2021 +0800

    NFC: add NCI_UNREG flag to eliminate the race
    
    [ Upstream commit 48b71a9e66c2eab60564b1b1c85f4928ed04e406 ]
    
    There are two sites that calls queue_work() after the
    destroy_workqueue() and lead to possible UAF.
    
    The first site is nci_send_cmd(), which can happen after the
    nci_close_device as below
    
    nfcmrvl_nci_unregister_dev   |  nfc_genl_dev_up
      nci_close_device           |
        flush_workqueue          |
        del_timer_sync           |
      nci_unregister_device      |    nfc_get_device
        destroy_workqueue        |    nfc_dev_up
        nfc_unregister_device    |      nci_dev_up
          device_del             |        nci_open_device
                                 |          __nci_request
                                 |            nci_send_cmd
                                 |              queue_work !!!
    
    Another site is nci_cmd_timer, awaked by the nci_cmd_work from the
    nci_send_cmd.
    
      ...                        |  ...
      nci_unregister_device      |  queue_work
        destroy_workqueue        |
        nfc_unregister_device    |  ...
          device_del             |  nci_cmd_work
                                 |  mod_timer
                                 |  ...
                                 |  nci_cmd_timer
                                 |    queue_work !!!
    
    For the above two UAF, the root cause is that the nfc_dev_up can race
    between the nci_unregister_device routine. Therefore, this patch
    introduce NCI_UNREG flag to easily eliminate the possible race. In
    addition, the mutex_lock in nci_close_device can act as a barrier.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Fixes: 6a2968aaf50c ("NFC: basic NCI protocol implementation")
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20211116152732.19238-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2a60b4a0195ba918ce924ba0616048ce09a3cc5
Author: Bongsu Jeon <bongsu.jeon@samsung.com>
Date:   Thu Dec 31 11:59:26 2020 +0900

    net: nfc: nci: Change the NCI close sequence
    
    [ Upstream commit f011539e723c737b74876ac47345e40270a3c384 ]
    
    If there is a NCI command in work queue after closing the NCI device at
    nci_unregister_device, The NCI command timer starts at flush_workqueue
    function and then NCI command timeout handler would be called 5 second
    after flushing the NCI command work queue and destroying the queue.
    At that time, the timeout handler would try to use NCI command work queue
    that is destroyed already. it will causes the problem. To avoid this
    abnormal situation, change the sequence to prevent the NCI command timeout
    handler from being called after destroying the NCI command work queue.
    
    Signed-off-by: Bongsu Jeon <bongsu.jeon@samsung.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73a0d12114b4bc1a9def79a623264754b9df698e
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Nov 16 23:26:52 2021 +0800

    NFC: reorder the logic in nfc_{un,}register_device
    
    [ Upstream commit 3e3b5dfcd16a3e254aab61bd1e8c417dd4503102 ]
    
    There is a potential UAF between the unregistration routine and the NFC
    netlink operations.
    
    The race that cause that UAF can be shown as below:
    
     (FREE)                      |  (USE)
    nfcmrvl_nci_unregister_dev   |  nfc_genl_dev_up
      nci_close_device           |
      nci_unregister_device      |    nfc_get_device
        nfc_unregister_device    |    nfc_dev_up
          rfkill_destory         |
          device_del             |      rfkill_blocked
      ...                        |    ...
    
    The root cause for this race is concluded below:
    1. The rfkill_blocked (USE) in nfc_dev_up is supposed to be placed after
    the device_is_registered check.
    2. Since the netlink operations are possible just after the device_add
    in nfc_register_device, the nfc_dev_up() can happen anywhere during the
    rfkill creation process, which leads to data race.
    
    This patch reorder these actions to permit
    1. Once device_del is finished, the nfc_dev_up cannot dereference the
    rfkill object.
    2. The rfkill_register need to be placed after the device_add of nfc_dev
    because the parent device need to be created first. So this patch keeps
    the order but inject device_lock to prevent the data race.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Fixes: be055b2f89b5 ("NFC: RFKILL support")
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20211116152652.19217-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb14b196d991c864ed2d1b6e79d68a7ce38e6538
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 15 22:56:00 2021 +0800

    NFC: reorganize the functions in nci_request
    
    [ Upstream commit 86cdf8e38792545161dbe3350a7eced558ba4d15 ]
    
    There is a possible data race as shown below:
    
    thread-A in nci_request()       | thread-B in nci_close_device()
                                    | mutex_lock(&ndev->req_lock);
    test_bit(NCI_UP, &ndev->flags); |
    ...                             | test_and_clear_bit(NCI_UP, &ndev->flags)
    mutex_lock(&ndev->req_lock);    |
                                    |
    
    This race will allow __nci_request() to be awaked while the device is
    getting removed.
    
    Similar to commit e2cb6b891ad2 ("bluetooth: eliminate the potential race
    condition when removing the HCI controller"). this patch alters the
    function sequence in nci_request() to prevent the data races between the
    nci_close_device().
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Fixes: 6a2968aaf50c ("NFC: basic NCI protocol implementation")
    Link: https://lore.kernel.org/r/20211115145600.8320-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41dc8dcb49d5b162e5266d48bdf94e9ee49d74a4
Author: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
Date:   Fri Oct 29 11:26:01 2021 +0200

    i40e: Fix display error code in dmesg
    
    [ Upstream commit 5aff430d4e33a0b48a6b3d5beb06f79da23f9916 ]
    
    Fix misleading display error in dmesg if tc filter return fail.
    Only i40e status error code should be converted to string, not linux
    error code. Otherwise, we return false information about the error.
    
    Fixes: 2f4b411a3d67 ("i40e: Enable cloud filters via tc-flower")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Dave Switzer <david.switzer@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 028ea7b090ec265d31957e47ef4bebc980339e1d
Author: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
Date:   Mon Jun 21 08:37:31 2021 +0000

    i40e: Fix creation of first queue by omitting it if is not power of two
    
    [ Upstream commit 2e6d218c1ec6fb9cd70693b78134cbc35ae0b5a9 ]
    
    Reject TCs creation with proper message if the first queue
    assignment is not equal to the power of two.
    The first queue number was checked too late in the second queue
    iteration, if second queue was configured at all. Now if first queue value
    is not a power of two, then trying to create qdisc will be rejected.
    
    Fixes: 8f88b3034db3 ("i40e: Add infrastructure for queue channel support")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Signed-off-by: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69868d7a8853cebb5a4e197da323bab5bc2470ec
Author: Karen Sornek <karen.sornek@intel.com>
Date:   Wed Apr 28 10:19:41 2021 +0200

    i40e: Fix warning message and call stack during rmmod i40e driver
    
    [ Upstream commit 3a3b311e3881172fc8e019b6508f04bc40c92d9d ]
    
    Restore part of reset functionality used when reset is called
    from the VF to reset itself. Without this fix warning message
    is displayed when VF is being removed via sysfs.
    
    Fix the crash of the VF during reset by ensuring
    that the PF receives the reset message successfully.
    Refactor code to use one function instead of two.
    
    Fixes: 5c3c48ac6bf5 ("i40e: implement virtual device interface")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Signed-off-by: Karen Sornek <karen.sornek@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20645482d159266f0c8d9f79fd89d1ffc2e3c99e
Author: Eryk Rybak <eryk.roch.rybak@intel.com>
Date:   Fri Apr 23 13:43:26 2021 +0200

    i40e: Fix ping is lost after configuring ADq on VF
    
    [ Upstream commit 9e0a603cb7dce2a19d98116d42de84b6db26d716 ]
    
    Properly reconfigure VF VSIs after VF request ADQ.
    Created new function to update queue mapping and queue pairs per TC
    with AQ update VSI. This sets proper RSS size on NIC.
    VFs num_queue_pairs should not be changed during setup of queue maps.
    Previously, VF main VSI in ADQ had configured too many queues and had
    wrong RSS size, which lead to packets not being consumed and drops in
    connectivity.
    
    Fixes: bc6d33c8d93f ("i40e: Fix the number of queues available to be mapped for use")
    Co-developed-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Eryk Rybak <eryk.roch.rybak@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d64743045caee14d9e99457cbc0233316fbfa75
Author: Eryk Rybak <eryk.roch.rybak@intel.com>
Date:   Fri Apr 23 13:43:25 2021 +0200

    i40e: Fix changing previously set num_queue_pairs for PFs
    
    [ Upstream commit d2a69fefd75683004ffe87166de5635b3267ee07 ]
    
    Currently, the i40e_vsi_setup_queue_map is basing the count of queues in
    TCs on a VSI's alloc_queue_pairs member which is not changed throughout
    any user's action (for example via ethtool's set_channels callback).
    
    This implies that vsi->tc_config.tc_info[n].qcount value that is given
    to the kernel via netdev_set_tc_queue() that notifies about the count of
    queues per particular traffic class is constant even if user has changed
    the total count of queues.
    
    This in turn caused the kernel warning after setting the queue count to
    the lower value than the initial one:
    
    $ ethtool -l ens801f0
    Channel parameters for ens801f0:
    Pre-set maximums:
    RX:             0
    TX:             0
    Other:          1
    Combined:       64
    Current hardware settings:
    RX:             0
    TX:             0
    Other:          1
    Combined:       64
    
    $ ethtool -L ens801f0 combined 40
    
    [dmesg]
    Number of in use tx queues changed invalidating tc mappings. Priority
    traffic classification disabled!
    
    Reason was that vsi->alloc_queue_pairs stayed at 64 value which was used
    to set the qcount on TC0 (by default only TC0 exists so all of the
    existing queues are assigned to TC0). we update the offset/qcount via
    netdev_set_tc_queue() back to the old value but then the
    netif_set_real_num_tx_queues() is using the vsi->num_queue_pairs as a
    value which got set to 40.
    
    Fix it by using vsi->req_queue_pairs as a queue count that will be
    distributed across TCs. Do it only for non-zero values, which implies
    that user actually requested the new count of queues.
    
    For VSIs other than main, stay with the vsi->alloc_queue_pairs as we
    only allow manipulating the queue count on main VSI.
    
    Fixes: bc6d33c8d93f ("i40e: Fix the number of queues available to be mapped for use")
    Co-developed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Co-developed-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Eryk Rybak <eryk.roch.rybak@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f866513ead4370402428ef724b03c3312295c178
Author: Michal Maloszewski <michal.maloszewski@intel.com>
Date:   Wed Feb 24 12:07:48 2021 +0000

    i40e: Fix NULL ptr dereference on VSI filter sync
    
    [ Upstream commit 37d9e304acd903a445df8208b8a13d707902dea6 ]
    
    Remove the reason of null pointer dereference in sync VSI filters.
    Added new I40E_VSI_RELEASING flag to signalize deleting and releasing
    of VSI resources to sync this thread with sync filters subtask.
    Without this patch it is possible to start update the VSI filter list
    after VSI is removed, that's causing a kernel oops.
    
    Fixes: 41c445ff0f48 ("i40e: main driver core")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Signed-off-by: Michal Maloszewski <michal.maloszewski@intel.com>
    Reviewed-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Reviewed-by: Witold Fijalkowski <witoldx.fijalkowski@intel.com>
    Reviewed-by: Jaroslaw Gawin <jaroslawx.gawin@intel.com>
    Reviewed-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0719488565878d05b5075e99af537f737f698f74
Author: Eryk Rybak <eryk.roch.rybak@intel.com>
Date:   Thu Jan 21 16:17:22 2021 +0000

    i40e: Fix correct max_pkt_size on VF RX queue
    
    [ Upstream commit 6afbd7b3c53cb7417189f476e99d431daccb85b0 ]
    
    Setting VLAN port increasing RX queue max_pkt_size
    by 4 bytes to take VLAN tag into account.
    Trigger the VF reset when setting port VLAN for
    VF to renegotiate its capabilities and reinitialize.
    
    Fixes: ba4e003d29c1 ("i40e: don't hold spinlock while resetting VF")
    Signed-off-by: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Eryk Rybak <eryk.roch.rybak@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e6bae950da9dc2d2c6c18b1c6b206dc00dc8772
Author: Jonathan Davies <jonathan.davies@nutanix.com>
Date:   Tue Nov 16 17:42:42 2021 +0000

    net: virtio_net_hdr_to_skb: count transport header in UFO
    
    [ Upstream commit cf9acc90c80ecbee00334aa85d92f4e74014bcff ]
    
    virtio_net_hdr_to_skb does not set the skb's gso_size and gso_type
    correctly for UFO packets received via virtio-net that are a little over
    the GSO size. This can lead to problems elsewhere in the networking
    stack, e.g. ovs_vport_send dropping over-sized packets if gso_size is
    not set.
    
    This is due to the comparison
    
      if (skb->len - p_off > gso_size)
    
    not properly accounting for the transport layer header.
    
    p_off includes the size of the transport layer header (thlen), so
    skb->len - p_off is the size of the TCP/UDP payload.
    
    gso_size is read from the virtio-net header. For UFO, fragmentation
    happens at the IP level so does not need to include the UDP header.
    
    Hence the calculation could be comparing a TCP/UDP payload length with
    an IP payload length, causing legitimate virtio-net packets to have
    lack gso_type/gso_size information.
    
    Example: a UDP packet with payload size 1473 has IP payload size 1481.
    If the guest used UFO, it is not fragmented and the virtio-net header's
    flags indicate that it is a GSO frame (VIRTIO_NET_HDR_GSO_UDP), with
    gso_size = 1480 for an MTU of 1500.  skb->len will be 1515 and p_off
    will be 42, so skb->len - p_off = 1473.  Hence the comparison fails, and
    shinfo->gso_size and gso_type are not set as they should be.
    
    Instead, add the UDP header length before comparing to gso_size when
    using UFO. In this way, it is the size of the IP payload that is
    compared to gso_size.
    
    Fixes: 6dd912f82680 ("net: check untrusted gso_size at kernel entry")
    Signed-off-by: Jonathan Davies <jonathan.davies@nutanix.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c4099dc0d6a01e76e4f7dd98e4b3e0d55d80ad9
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Tue Nov 16 18:17:12 2021 +0300

    net: dpaa2-eth: fix use-after-free in dpaa2_eth_remove
    
    [ Upstream commit 9b5a333272a48c2f8b30add7a874e46e8b26129c ]
    
    Access to netdev after free_netdev() will cause use-after-free bug.
    Move debug log before free_netdev() call to avoid it.
    
    Fixes: 7472dd9f6499 ("staging: fsl-dpaa2/eth: Move print message")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 381a30f7e31c473ae941eb78c4a0325abf4f2951
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 12 11:33:11 2021 -0500

    net: sched: act_mirred: drop dst for the direction from egress to ingress
    
    [ Upstream commit f799ada6bf2397c351220088b9b0980125c77280 ]
    
    Without dropping dst, the packets sent from local mirred/redirected
    to ingress will may still use the old dst. ip_rcv() will drop it as
    the old dst is for output and its .input is dst_discard.
    
    This patch is to fix by also dropping dst for those packets that are
    mirred or redirected from egress to ingress in act_mirred.
    
    Note that we don't drop it for the direction change from ingress to
    egress, as on which there might be a user case attaching a metadata
    dst by act_tunnel_key that would be used later.
    
    Fixes: b57dc7c13ea9 ("net/sched: Introduce action ct")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <cong.wang@bytedance.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a792e0128d232251edb5fdf42fb0f9fbb0b44a73
Author: Mike Christie <michael.christie@oracle.com>
Date:   Fri Nov 5 17:10:48 2021 -0500

    scsi: core: sysfs: Fix hang when device state is set via sysfs
    
    [ Upstream commit 4edd8cd4e86dd3047e5294bbefcc0a08f66a430f ]
    
    This fixes a regression added with:
    
    commit f0f82e2476f6 ("scsi: core: Fix capacity set to zero after
    offlinining device")
    
    The problem is that after iSCSI recovery, iscsid will call into the kernel
    to set the dev's state to running, and with that patch we now call
    scsi_rescan_device() with the state_mutex held. If the SCSI error handler
    thread is just starting to test the device in scsi_send_eh_cmnd() then it's
    going to try to grab the state_mutex.
    
    We are then stuck, because when scsi_rescan_device() tries to send its I/O
    scsi_queue_rq() calls -> scsi_host_queue_ready() -> scsi_host_in_recovery()
    which will return true (the host state is still in recovery) and I/O will
    just be requeued. scsi_send_eh_cmnd() will then never be able to grab the
    state_mutex to finish error handling.
    
    To prevent the deadlock move the rescan-related code to after we drop the
    state_mutex.
    
    This also adds a check for if we are already in the running state. This
    prevents extra scans and helps the iscsid case where if the transport class
    has already onlined the device during its recovery process then we don't
    need userspace to do it again plus possibly block that daemon.
    
    Link: https://lore.kernel.org/r/20211105221048.6541-3-michael.christie@oracle.com
    Fixes: f0f82e2476f6 ("scsi: core: Fix capacity set to zero after offlinining device")
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: lijinlin <lijinlin3@huawei.com>
    Cc: Wu Bo <wubo40@huawei.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Wu Bo <wubo40@huawei.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b4302a02b7f734260856b9c3607fb78d35ba018
Author: Raed Salem <raeds@nvidia.com>
Date:   Mon Nov 1 16:18:53 2021 +0200

    net/mlx5: E-Switch, return error if encap isn't supported
    
    [ Upstream commit c4c3176739dfa6efcc5b1d1de4b3fd2b51b048c7 ]
    
    On regular ConnectX HCAs getting encap mode isn't supported when the
    E-Switch is in NONE mode. Current code would return no error code when
    trying to get encap mode in such case which is wrong.
    
    Fix by returning error value to indicate failure to caller in such case.
    
    Fixes: 8e0aa4bc959c ("net/mlx5: E-switch, Protect eswitch mode changes")
    Signed-off-by: Raed Salem <raeds@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68748ea4d1225da644fa91263e4e019f4c72ddb7
Author: Roi Dayan <roid@nvidia.com>
Date:   Wed Sep 16 10:11:42 2020 +0300

    net/mlx5: E-Switch, Change mode lock from mutex to rw semaphore
    
    [ Upstream commit c55479d0cb6a28029844d0e90730704a0fb5efd3 ]
    
    E-Switch mode change routine will take the write lock to prevent any
    consumer to access the E-Switch resources while E-Switch is going
    through a mode change.
    
    In the next patch
    E-Switch consumers (e.g vport representors) will take read_lock prior to
    accessing E-Switch resources to prevent E-Switch mode changing in the
    middle of the operation.
    
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Parav Pandit <parav@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6190e1a2d41aa7fdf6d38b24d5ca4baaa0412fd9
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Fri Nov 5 11:19:48 2021 +0200

    net/mlx5: Lag, update tracker when state change event received
    
    [ Upstream commit ae396d85c01c7bdc9eeceecde1f493d03f793465 ]
    
    Currently, In NETDEV_CHANGELOWERSTATE/NETDEV_CHANGEUPPERSTATE events
    handling, tracking is not fully completed if the LAG device is not ready
    at the time the events occur. But, we must keep track of the upper and
    lower states after receiving the events because RoCE needs this info in
    mlx5_lag_get_roce_netdev() - in order to return the corresponding port
    that its running on. Returning the wrong (not most recent) port will lead
    to gids table being incorrect.
    
    For example: If during the attachment of a slave to the bond, the other
    non-attached port performs pci_reload, then the LAG device is not ready,
    but that should not result in dismissing attached slave tracker update
    automatically (which is performed in mlx5_handle_changelowerstate()), Since
    these events might not come later, which can lead to both bond ports
    having tx_enabled=0 - which is not a valid state of LAG bond.
    
    Fixes: 9b412cc35f00 ("net/mlx5e: Add LAG warning if bond slave is not lag master")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Reviewed-by: Jianbo Liu <jianbol@nvidia.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 471c492890557bd58f73314bb4ad85d5a8fd5026
Author: Valentine Fatiev <valentinef@nvidia.com>
Date:   Tue Oct 26 11:42:41 2021 +0300

    net/mlx5e: nullify cq->dbg pointer in mlx5_debug_cq_remove()
    
    [ Upstream commit 76ded29d3fcda4928da8849ffc446ea46871c1c2 ]
    
    Prior to this patch in case mlx5_core_destroy_cq() failed it proceeds
    to rest of destroy operations. mlx5_core_destroy_cq() could be called again
    by user and cause additional call of mlx5_debug_cq_remove().
    cq->dbg was not nullify in previous call and cause the crash.
    
    Fix it by nullify cq->dbg pointer after removal.
    
    Also proceed to destroy operations only if FW return 0
    for MLX5_CMD_OP_DESTROY_CQ command.
    
    general protection fault, probably for non-canonical address 0x2000300004058: 0000 [#1] SMP PTI
    CPU: 5 PID: 1228 Comm: python Not tainted 5.15.0-rc5_for_upstream_min_debug_2021_10_14_11_06 #1
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
    RIP: 0010:lockref_get+0x1/0x60
    Code: 5d e9 53 ff ff ff 48 8d 7f 70 e8 0a 2e 48 00 c7 85 d0 00 00 00 02
    00 00 00 c6 45 70 00 fb 5d c3 c3 cc cc cc cc cc cc cc cc 53 <48> 8b 17
    48 89 fb 85 d2 75 3d 48 89 d0 bf 64 00 00 00 48 89 c1 48
    RSP: 0018:ffff888137dd7a38 EFLAGS: 00010206
    RAX: 0000000000000000 RBX: ffff888107d5f458 RCX: 00000000fffffffe
    RDX: 000000000002c2b0 RSI: ffffffff8155e2e0 RDI: 0002000300004058
    RBP: ffff888137dd7a88 R08: 0002000300004058 R09: ffff8881144a9f88
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff8881141d4000
    R13: ffff888137dd7c68 R14: ffff888137dd7d58 R15: ffff888137dd7cc0
    FS:  00007f4644f2a4c0(0000) GS:ffff8887a2d40000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055b4500f4380 CR3: 0000000114f7a003 CR4: 0000000000170ea0
    Call Trace:
      simple_recursive_removal+0x33/0x2e0
      ? debugfs_remove+0x60/0x60
      debugfs_remove+0x40/0x60
      mlx5_debug_cq_remove+0x32/0x70 [mlx5_core]
      mlx5_core_destroy_cq+0x41/0x1d0 [mlx5_core]
      devx_obj_cleanup+0x151/0x330 [mlx5_ib]
      ? __pollwait+0xd0/0xd0
      ? xas_load+0x5/0x70
      ? xa_load+0x62/0xa0
      destroy_hw_idr_uobject+0x20/0x80 [ib_uverbs]
      uverbs_destroy_uobject+0x3b/0x360 [ib_uverbs]
      uobj_destroy+0x54/0xa0 [ib_uverbs]
      ib_uverbs_cmd_verbs+0xaf2/0x1160 [ib_uverbs]
      ? uverbs_finalize_object+0xd0/0xd0 [ib_uverbs]
      ib_uverbs_ioctl+0xc4/0x1b0 [ib_uverbs]
      __x64_sys_ioctl+0x3e4/0x8e0
    
    Fixes: 94b960b9deff ("net/mlx5e: Fix memory leak in mlx5_core_destroy_cq() error path")
    Signed-off-by: Valentine Fatiev <valentinef@nvidia.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1f8f1e04a61f1e212ed294a0a7058a362063789
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Nov 7 20:57:07 2021 +0100

    platform/x86: hp_accel: Fix an error handling path in 'lis3lv02d_probe()'
    
    [ Upstream commit c961a7d2aa23ae19e0099fbcdf1040fb760eea83 ]
    
    If 'led_classdev_register()' fails, some additional resources should be
    released.
    
    Add the missing 'i8042_remove_filter()' and 'lis3lv02d_remove_fs()' calls
    that are already in the remove function but are missing here.
    
    Fixes: a4c724d0723b ("platform: hp_accel: add a i8042 filter to remove HPQ6000 data from kb bus stream")
    Fixes: 9e0c79782143 ("lis3lv02d: merge with leds hp disk")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/5a4f218f8f16d2e3a7906b7ca3654ffa946895f8.1636314074.git.christophe.jaillet@wanadoo.fr
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da16f907cb30f3db2d2bff76f71d5db9dc6575a5
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 14 17:20:51 2021 -0800

    mips: lantiq: add support for clk_get_parent()
    
    [ Upstream commit fc1aabb088860d6cf9dd03612b7a6f0de91ccac2 ]
    
    Provide a simple implementation of clk_get_parent() in the
    lantiq subarch so that callers of it will build without errors.
    
    Fixes this build error:
    ERROR: modpost: "clk_get_parent" [drivers/iio/adc/ingenic-adc.ko] undefined!
    
    Fixes: 171bb2f19ed6 ("MIPS: Lantiq: Add initial support for Lantiq SoCs")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Suggested-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Cc: linux-mips@vger.kernel.org
    Cc: John Crispin <john@phrozen.org>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Jonathan Cameron <jic23@kernel.org>
    Cc: linux-iio@vger.kernel.org
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: John Crispin <john@phrozen.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17dfbe1b2f4ea2babc2b2807dc28ad2ba6fe7971
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 14 16:42:18 2021 -0800

    mips: bcm63xx: add support for clk_get_parent()
    
    [ Upstream commit e8f67482e5a4bc8d0b65d606d08cb60ee123b468 ]
    
    BCM63XX selects HAVE_LEGACY_CLK but does not provide/support
    clk_get_parent(), so add a simple implementation of that
    function so that callers of it will build without errors.
    
    Fixes these build errors:
    
    mips-linux-ld: drivers/iio/adc/ingenic-adc.o: in function `jz4770_adc_init_clk_div':
    ingenic-adc.c:(.text+0xe4): undefined reference to `clk_get_parent'
    mips-linux-ld: drivers/iio/adc/ingenic-adc.o: in function `jz4725b_adc_init_clk_div':
    ingenic-adc.c:(.text+0x1b8): undefined reference to `clk_get_parent'
    
    Fixes: e7300d04bd08 ("MIPS: BCM63xx: Add support for the Broadcom BCM63xx family of SOCs." )
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Cc: Artur Rojek <contact@artur-rojek.eu>
    Cc: Paul Cercueil <paul@crapouillou.net>
    Cc: linux-mips@vger.kernel.org
    Cc: Jonathan Cameron <jic23@kernel.org>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: linux-iio@vger.kernel.org
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: bcm-kernel-feedback-list@broadcom.com
    Cc: Jonas Gorski <jonas.gorski@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34284b3a2f869473b7ae7268d37480b07428bb20
Author: Colin Ian King <colin.i.king@googlemail.com>
Date:   Wed Nov 10 23:28:24 2021 +0000

    MIPS: generic/yamon-dt: fix uninitialized variable error
    
    [ Upstream commit 255e51da15baed47531beefd02f222e4dc01f1c1 ]
    
    In the case where fw_getenv returns an error when fetching values
    for ememsizea and memsize then variable phys_memsize is not assigned
    a variable and will be uninitialized on a zero check of phys_memsize.
    Fix this by initializing phys_memsize to zero.
    
    Cleans up cppcheck error:
    arch/mips/generic/yamon-dt.c:100:7: error: Uninitialized variable: phys_memsize [uninitvar]
    
    Fixes: f41d2430bbd6 ("MIPS: generic/yamon-dt: Support > 256MB of RAM")
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a61f90b2162d0378db55f2234cb53c1af4bcb7f0
Author: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
Date:   Fri Jun 4 09:49:00 2021 -0700

    iavf: Fix for setting queues to 0
    
    [ Upstream commit 9a6e9e483a9684a34573fd9f9e30ecfb047cb8cb ]
    
    Now setting combine to 0 will be rejected with the
    appropriate error code.
    This has been implemented by adding a condition that checks
    the value of combine equal to zero.
    Without this patch, when the user requested it, no error was
    returned and combine was set to the default value for VF.
    
    Fixes: 5520deb15326 ("iavf: Enable support for up to 16 queues")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8a1e601c2ea94e145f2bf23e65fc7bb1e5a4c68
Author: Surabhi Boob <surabhi.boob@intel.com>
Date:   Fri Jun 4 09:48:59 2021 -0700

    iavf: Fix for the false positive ASQ/ARQ errors while issuing VF reset
    
    [ Upstream commit 321421b57a12e933f92b228e0e6d0b2c6541f41d ]
    
    While issuing VF Reset from the guest OS, the VF driver prints
    logs about critical / Overflow error detection. This is not an
    actual error since the VF_MBX_ARQLEN register is set to all FF's
    for a short period of time and the VF would catch the bits set if
    it was reading the register during that spike of time.
    This patch introduces an additional check to ignore this condition
    since the VF is in reset.
    
    Fixes: 19b73d8efaa4 ("i40evf: Add additional check for reset")
    Signed-off-by: Surabhi Boob <surabhi.boob@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77f5ae5441f0d739c7e1780f309088143252a6ef
Author: Mitch Williams <mitch.a.williams@intel.com>
Date:   Fri Jun 4 09:48:58 2021 -0700

    iavf: validate pointers
    
    [ Upstream commit 131b0edc4028bb88bb472456b1ddba526cfb7036 ]
    
    In some cases, the ethtool get_rxfh handler may be called with a null
    key or indir parameter. So check these pointers, or you will have a very
    bad day.
    
    Fixes: 43a3d9ba34c9 ("i40evf: Allow PF driver to configure RSS")
    Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddcc185baa2b8bbb7af2d39a4ba1ce8bc54a38e5
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Fri Jun 4 09:48:57 2021 -0700

    iavf: prevent accidental free of filter structure
    
    [ Upstream commit 4f0400803818f2642f066d3eacaf013f23554cc7 ]
    
    In iavf_config_clsflower, the filter structure could be accidentally
    released at the end, if iavf_parse_cls_flower or iavf_handle_tclass ever
    return a non-zero but positive value.
    
    In this case, the function continues through to the end, and will call
    kfree() on the filter structure even though it has been added to the
    linked list.
    
    This can actually happen because iavf_parse_cls_flower will return
    a positive IAVF_ERR_CONFIG value instead of the traditional negative
    error codes.
    
    Fix this by ensuring that the kfree() check and error checks are
    similar. Use the more idiomatic "if (err)" to catch all non-zero error
    codes.
    
    Fixes: 0075fa0fadd0 ("i40evf: Add support to apply cloud filters")
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a420b261282532b4299accaca4a0423630abf461
Author: Piotr Marczak <piotr.marczak@intel.com>
Date:   Fri Jun 4 09:48:56 2021 -0700

    iavf: Fix failure to exit out from last all-multicast mode
    
    [ Upstream commit 8905072a192fffe9389255489db250c73ecab008 ]
    
    The driver could only quit allmulti when allmulti and promisc modes are
    turn on at the same time. If promisc had been off there was no way to turn
    off allmulti mode.
    The patch corrects this behavior. Switching allmulti does not depends on
    promisc state mode anymore
    
    Fixes: f42a5c74da99 ("i40e: Add allmulti support for the VF")
    Signed-off-by: Piotr Marczak <piotr.marczak@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78638b47132244e3934dc5dc79f6372d5ce8e98c
Author: Nicholas Nunley <nicholas.d.nunley@intel.com>
Date:   Fri Jun 4 09:48:54 2021 -0700

    iavf: free q_vectors before queues in iavf_disable_vf
    
    [ Upstream commit 89f22f129696ab53cfbc608e0a2184d0fea46ac1 ]
    
    iavf_free_queues() clears adapter->num_active_queues, which
    iavf_free_q_vectors() relies on, so swap the order of these two function
    calls in iavf_disable_vf(). This resolves a panic encountered when the
    interface is disabled and then later brought up again after PF
    communication is restored.
    
    Fixes: 65c7006f234c ("i40evf: assign num_active_queues inside i40evf_alloc_queues")
    Signed-off-by: Nicholas Nunley <nicholas.d.nunley@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84a13bfe2714b8c92db48f3854d69b318c10a055
Author: Nicholas Nunley <nicholas.d.nunley@intel.com>
Date:   Fri Jun 4 09:48:53 2021 -0700

    iavf: check for null in iavf_fix_features
    
    [ Upstream commit 8a4a126f4be88eb8b5f00a165ab58c35edf4ef76 ]
    
    If the driver has lost contact with the PF then it enters a disabled state
    and frees adapter->vf_res. However, ndo_fix_features can still be called on
    the interface, so we need to check for this condition first. Since we have
    no information on the features at this time simply leave them unmodified
    and return.
    
    Fixes: c4445aedfe09 ("i40evf: Fix VLAN features")
    Signed-off-by: Nicholas Nunley <nicholas.d.nunley@intel.com>
    Tested-by: Tony Brelinski <tony.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1555d83ddbb7204ef60c58aee6ca3bbef2c5e99f
Author: Mateusz Palczewski <mateusz.palczewski@intel.com>
Date:   Tue Feb 9 11:59:38 2021 +0000

    iavf: Fix return of set the new channel count
    
    [ Upstream commit 4e5e6b5d9d1334d3490326b6922a2daaf56a867f ]
    
    Fixed return correct code from set the new channel count.
    Implemented by check if reset is done in appropriate time.
    This solution give a extra time to pf for reset vf in case
    when user want set new channel count for all vfs.
    Without this patch it is possible to return misleading output
    code to user and vf reset not to be correctly performed by pf.
    
    Fixes: 5520deb15326 ("iavf: Enable support for up to 16 queues")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09decd0a102a2a85018aca9038267387e23ab65b
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Mon Nov 15 17:45:07 2021 +0800

    net/smc: Make sure the link_id is unique
    
    [ Upstream commit cf4f5530bb55ef7d5a91036b26676643b80b1616 ]
    
    The link_id is supposed to be unique, but smcr_next_link_id() doesn't
    skip the used link_id as expected. So the patch fixes this.
    
    Fixes: 026c381fb477 ("net/smc: introduce link_idx for link group array")
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 437e21e2c9ae5a29ea1509df12705964e191954f
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Mon Nov 15 19:16:56 2021 +0900

    sock: fix /proc/net/sockstat underflow in sk_clone_lock()
    
    [ Upstream commit 938cca9e4109b30ee1d476904538225a825e54eb ]
    
    sk_clone_lock() needs to call sock_inuse_add(1) before entering the
    sk_free_unlock_clone() error path, for __sk_free() from sk_free() from
    sk_free_unlock_clone() calls sock_inuse_add(-1).
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: 648845ab7e200993 ("sock: Move the socket inuse to namespace.")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4da14ddad19fcaab5087bc54eed3d49ea68a38fc
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 27 07:27:31 2021 -0800

    net: reduce indentation level in sk_clone_lock()
    
    [ Upstream commit bbc20b70424aeb3c84f833860f6340adda5141fc ]
    
    Rework initial test to jump over init code
    if memory allocation has failed.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20210127152731.748663-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c3c2ef6ca2618c64f925b28a9d31a0d1212cd15
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Nov 15 07:45:24 2021 -0500

    tipc: only accept encrypted MSG_CRYPTO msgs
    
    [ Upstream commit 271351d255b09e39c7f6437738cba595f9b235be ]
    
    The MSG_CRYPTO msgs are always encrypted and sent to other nodes
    for keys' deployment. But when receiving in peers, if those nodes
    do not validate it and make sure it's encrypted, one could craft
    a malicious MSG_CRYPTO msg to deploy its key with no need to know
    other nodes' keys.
    
    This patch is to do that by checking TIPC_SKB_CB(skb)->decrypted
    and discard it if this packet never got decrypted.
    
    Note that this is also a supplementary fix to CVE-2021-43267 that
    can be triggered by an unencrypted malicious MSG_CRYPTO msg.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d59416647861dc0ea4a46c82b8bf0209b12ad10
Author: Sriharsha Basavapatna <sriharsha.basavapatna@broadcom.com>
Date:   Mon Nov 15 02:38:01 2021 -0500

    bnxt_en: reject indirect blk offload when hw-tc-offload is off
    
    [ Upstream commit b0757491a118ae5727cf9f1c3a11544397d46596 ]
    
    The driver does not check if hw-tc-offload is enabled for the device
    before offloading a flow in the context of indirect block callback.
    Fix this by checking NETIF_F_HW_TC in the features flag and rejecting
    the offload request.  This will avoid unnecessary dmesg error logs when
    hw-tc-offload is disabled, such as these:
    
    bnxt_en 0000:19:00.1 eno2np1: dev(ifindex=294) not on same switch
    bnxt_en 0000:19:00.1 eno2np1: Error: bnxt_tc_add_flow: cookie=0xffff8dace1c88000 error=-22
    bnxt_en 0000:19:00.0 eno1np0: dev(ifindex=294) not on same switch
    bnxt_en 0000:19:00.0 eno1np0: Error: bnxt_tc_add_flow: cookie=0xffff8dace1c88000 error=-22
    
    Reported-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Fixes: 627c89d00fb9 ("bnxt_en: flow_offload: offload tunnel decap rules via indirect callbacks")
    Signed-off-by: Sriharsha Basavapatna <sriharsha.basavapatna@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fc060abaa2674f154e708aaafc0d3c780d0a418
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Nov 14 01:36:36 2021 +0300

    net: bnx2x: fix variable dereferenced before check
    
    [ Upstream commit f8885ac89ce310570e5391fe0bf0ec9c7c9b4fdc ]
    
    Smatch says:
            bnx2x_init_ops.h:640 bnx2x_ilt_client_mem_op()
            warn: variable dereferenced before check 'ilt' (see line 638)
    
    Move ilt_cli variable initialization _after_ ilt validation, because
    it's unsafe to deref the pointer before validation check.
    
    Fixes: 523224a3b3cd ("bnx2x, cnic, bnx2i: use new FW/HSI")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ae75cc38a8457df4d3e1667dded7d51b08a5af8
Author: Alex Elder <elder@linaro.org>
Date:   Fri Nov 12 16:22:10 2021 -0600

    net: ipa: disable HOLB drop when updating timer
    
    [ Upstream commit 816316cacad2b5abd5b41423cf04e4845239abd4 ]
    
    The head-of-line blocking timer should only be modified when
    head-of-line drop is disabled.
    
    One of the steps in recovering from a modem crash is to enable
    dropping of packets with timeout of 0 (immediate).  We don't know
    how the modem configured its endpoints, so before we program the
    timer, we need to ensure HOL_BLOCK is disabled.
    
    Fixes: 84f9bd12d46db ("soc: qcom: ipa: IPA endpoints")
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3984876f91a3da423fa27c3f48b568a58f4a65d8
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Sun Nov 14 13:28:34 2021 -0500

    tracing: Add length protection to histogram string copies
    
    [ Upstream commit 938aa33f14657c9ed9deea348b7d6f14b6d69cb7 ]
    
    The string copies to the histogram storage has a max size of 256 bytes
    (defined by MAX_FILTER_STR_VAL). Only the string size of the event field
    needs to be copied to the event storage, but no more than what is in the
    event storage. Although nothing should be bigger than 256 bytes, there's
    no protection against overwriting of the storage if one day there is.
    
    Copy no more than the destination size, and enforce it.
    
    Also had to turn MAX_FILTER_STR_VAL into an unsigned int, to keep the
    min() comparison of the string sizes of comparable types.
    
    Link: https://lore.kernel.org/all/CAHk-=wjREUihCGrtRBwfX47y_KrLCGjiq3t6QtoNJpmVrAEb1w@mail.gmail.com/
    Link: https://lkml.kernel.org/r/20211114132834.183429a4@rorschach.local.home
    
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Tom Zanussi <zanussi@kernel.org>
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Fixes: 63f84ae6b82b ("tracing/histogram: Do not copy the fixed-size char array field over the field size")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 900ea2f6287f5ad21e3554272047ea403714bafe
Author: Arjun Roy <arjunroy@google.com>
Date:   Thu Nov 11 15:52:15 2021 -0800

    tcp: Fix uninitialized access in skb frags array for Rx 0cp.
    
    [ Upstream commit 70701b83e208767f2720d8cd3e6a62cddafb3a30 ]
    
    TCP Receive zerocopy iterates through the SKB queue via
    tcp_recv_skb(), acquiring a pointer to an SKB and an offset within
    that SKB to read from. From there, it iterates the SKB frags array to
    determine which offset to start remapping pages from.
    
    However, this is built on the assumption that the offset read so far
    within the SKB is smaller than the SKB length. If this assumption is
    violated, we can attempt to read an invalid frags array element, which
    would cause a fault.
    
    tcp_recv_skb() can cause such an SKB to be returned when the TCP FIN
    flag is set. Therefore, we must guard against this occurrence inside
    skb_advance_frag().
    
    One way that we can reproduce this error follows:
    1) In a receiver program, call getsockopt(TCP_ZEROCOPY_RECEIVE) with:
    char some_array[32 * 1024];
    struct tcp_zerocopy_receive zc = {
      .copybuf_address  = (__u64) &some_array[0],
      .copybuf_len = 32 * 1024,
    };
    
    2) In a sender program, after a TCP handshake, send the following
    sequence of packets:
      i) Seq = [X, X+4000]
      ii) Seq = [X+4000, X+5000]
      iii) Seq = [X+4000, X+5000], Flags = FIN | URG, urgptr=1000
    
    (This can happen without URG, if we have a signal pending, but URG is
    a convenient way to reproduce the behaviour).
    
    In this case, the following event sequence will occur on the receiver:
    
    tcp_zerocopy_receive():
    -> receive_fallback_to_copy() // copybuf_len >= inq
    -> tcp_recvmsg_locked() // reads 5000 bytes, then breaks due to URG
    -> tcp_recv_skb() // yields skb with skb->len == offset
    -> tcp_zerocopy_set_hint_for_skb()
    -> skb_advance_to_frag() // will returns a frags ptr. >= nr_frags
    -> find_next_mappable_frag() // will dereference this bad frags ptr.
    
    With this patch, skb_advance_to_frag() will no longer return an
    invalid frags pointer, and will return NULL instead, fixing the issue.
    
    Signed-off-by: Arjun Roy <arjunroy@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Fixes: 05255b823a61 ("tcp: add TCP_ZEROCOPY_RECEIVE support for zerocopy receive")
    Link: https://lore.kernel.org/r/20211111235215.2605384-1-arjunroy.kdev@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1a6150ca6166d76bbda77afa27ee46c010fcdc0
Author: Arjun Roy <arjunroy@google.com>
Date:   Wed Dec 2 14:53:44 2020 -0800

    net-zerocopy: Refactor skb frag fast-forward op.
    
    [ Upstream commit 7fba5309efe24e4f0284ef4b8663cdf401035e72 ]
    
    Refactor skb frag fast-forwarding for tcp receive zerocopy. This is
    part of a patch set that introduces short-circuited hybrid copies
    for small receive operations, which results in roughly 33% fewer
    syscalls for small RPC scenarios.
    
    skb_advance_to_frag(), given a skb and an offset into the skb,
    iterates from the first frag for the skb until we're at the frag
    specified by the offset. Assuming the offset provided refers to how
    many bytes in the skb are already read, the returned frag points to
    the next frag we may read from, while offset_frag is set to the number
    of bytes from this frag that we have already read.
    
    If frag is not null and offset_frag is equal to 0, then we may be able
    to map this frag's page into the process address space with
    vm_insert_page(). However, if offset_frag is not equal to 0, then we
    cannot do so.
    
    Signed-off-by: Arjun Roy <arjunroy@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f7aadf03f98d641b32837f32a401e543d6e5a69
Author: Arjun Roy <arjunroy@google.com>
Date:   Wed Dec 2 14:53:42 2020 -0800

    net-zerocopy: Copy straggler unaligned data for TCP Rx. zerocopy.
    
    [ Upstream commit 18fb76ed53865c1b5d5f0157b1b825704590beb5 ]
    
    When TCP receive zerocopy does not successfully map the entire
    requested space, it outputs a 'hint' that the caller should recvmsg().
    
    Augment zerocopy to accept a user buffer that it tries to copy this
    hint into - if it is possible to copy the entire hint, it will do so.
    This elides a recvmsg() call for received traffic that isn't exactly
    page-aligned in size.
    
    This was tested with RPC-style traffic of arbitrary sizes. Normally,
    each received message required at least one getsockopt() call, and one
    recvmsg() call for the remaining unaligned data.
    
    With this change, almost all of the recvmsg() calls are eliminated,
    leading to a savings of about 25%-50% in number of system calls
    for RPC-style workloads.
    
    Signed-off-by: Arjun Roy <arjunroy@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8da80ec6d4f7c90e0ea5b9edb37c211adc3e9a01
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed Nov 10 16:36:04 2021 +0100

    drm/nouveau: hdmigv100.c: fix corrupted HDMI Vendor InfoFrame
    
    [ Upstream commit 3cc1ae1fa70ab369e4645e38ce335a19438093ad ]
    
    gv100_hdmi_ctrl() writes vendor_infoframe.subpack0_high to 0x6f0110, and
    then overwrites it with 0. Just drop the overwrite with 0, that's clearly
    a mistake.
    
    Because of this issue the HDMI VIC is 0 instead of 1 in the HDMI Vendor
    InfoFrame when transmitting 4kp30.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Fixes: 290ffeafcc1a ("drm/nouveau/disp/gv100: initial support")
    Reviewed-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/3d3bd0f7-c150-2479-9350-35d394ee772d@xs4all.nl
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa31e3fda68f6cd8340f5beafe8bfd3ccf4ccd4c
Author: James Clark <james.clark@arm.com>
Date:   Thu Oct 28 14:48:26 2021 +0100

    perf tests: Remove bash construct from record+zstd_comp_decomp.sh
    
    [ Upstream commit a9cdc1c5e3700a5200e5ca1f90b6958b6483845b ]
    
    Commit 463538a383a2 ("perf tests: Fix test 68 zstd compression for
    s390") inadvertently removed the -g flag from all platforms rather than
    just s390, because the [[ ]] construct fails in sh. Changing to single
    brackets restores testing of call graphs and removes the following error
    from the output:
    
      $ ./perf test -v 85
      85: Zstd perf.data compression/decompression                        :
      --- start ---
      test child forked, pid 50643
      Collecting compressed record file:
      ./tests/shell/record+zstd_comp_decomp.sh: 15: [[: not found
    
    Fixes: 463538a383a2 ("perf tests: Fix test 68 zstd compression for s390")
    Signed-off-by: James Clark <james.clark@arm.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: KP Singh <kpsingh@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: bpf@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Link: https://lore.kernel.org/r/20211028134828.65774-3-james.clark@arm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ada5c0877f4aa9b0749e7777557d9a5d2973082
Author: Sohaib Mohamed <sohaib.amhmd@gmail.com>
Date:   Fri Nov 12 22:11:33 2021 +0200

    perf bench futex: Fix memory leak of perf_cpu_map__new()
    
    [ Upstream commit 88e48238d53682281c9de2a0b65d24d3b64542a0 ]
    
    ASan reports memory leaks while running:
    
      $ sudo ./perf bench futex all
    
    The leaks are caused by perf_cpu_map__new not being freed.
    This patch adds the missing perf_cpu_map__put since it calls
    cpu_map_delete implicitly.
    
    Fixes: 9c3516d1b850ea93 ("libperf: Add perf_cpu_map__new()/perf_cpu_map__read() functions")
    Signed-off-by: Sohaib Mohamed <sohaib.amhmd@gmail.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: André Almeida <andrealmeid@collabora.com>
    Cc: Darren Hart <dvhart@infradead.org>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sohaib Mohamed <sohaib.amhmd@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lore.kernel.org/lkml/20211112201134.77892-1-sohaib.amhmd@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11589d3144bc4e272e0aae46ce8156162e99babc
Author: Ian Rogers <irogers@google.com>
Date:   Thu Nov 11 23:45:25 2021 -0800

    perf bpf: Avoid memory leak from perf_env__insert_btf()
    
    [ Upstream commit 4924b1f7c46711762fd0e65c135ccfbcfd6ded1f ]
    
    perf_env__insert_btf() doesn't insert if a duplicate BTF id is
    encountered and this causes a memory leak. Modify the function to return
    a success/error value and then free the memory if insertion didn't
    happen.
    
    v2. Adds a return -1 when the insertion error occurs in
        perf_env__fetch_btf. This doesn't affect anything as the result is
        never checked.
    
    Fixes: 3792cb2ff43b1b19 ("perf bpf: Save BTF in a rbtree in perf_env")
    Signed-off-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Andrii Nakryiko <andrii@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: KP Singh <kpsingh@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Tiezhu Yang <yangtiezhu@loongson.cn>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: bpf@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20211112074525.121633-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b2f2cbbc925ac5ce72547a163a69fa90a67e1d0
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Nov 13 01:02:08 2021 +0900

    tracing/histogram: Do not copy the fixed-size char array field over the field size
    
    [ Upstream commit 63f84ae6b82bb4dff672f76f30c6fd7b9d3766bc ]
    
    Do not copy the fixed-size char array field of the events over
    the field size. The histogram treats char array as a string and
    there are 2 types of char array in the event, fixed-size and
    dynamic string. The dynamic string (__data_loc) field must be
    null terminated, but the fixed-size char array field may not
    be null terminated (not a string, but just a data).
    In that case, histogram can copy the data after the field.
    This uses the original field size for fixed-size char array
    field to restrict the histogram not to access over the original
    field size.
    
    Link: https://lkml.kernel.org/r/163673292822.195747.3696966210526410250.stgit@devnote2
    
    Fixes: 02205a6752f2 (tracing: Add support for 'field variables')
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d61255327559b203a02d81dbb78ab1a0cd61709
Author: Laibin Qiu <qiulaibin@huawei.com>
Date:   Fri Nov 12 17:33:54 2021 +0800

    blkcg: Remove extra blkcg_bio_issue_init
    
    [ Upstream commit b781d8db580c058ecd54ed7d5dde7f8270b25f5b ]
    
    KASAN reports a use-after-free report when doing block test:
    
    ==================================================================
    [10050.967049] BUG: KASAN: use-after-free in
    submit_bio_checks+0x1539/0x1550
    
    [10050.977638] Call Trace:
    [10050.978190]  dump_stack+0x9b/0xce
    [10050.979674]  print_address_description.constprop.6+0x3e/0x60
    [10050.983510]  kasan_report.cold.9+0x22/0x3a
    [10050.986089]  submit_bio_checks+0x1539/0x1550
    [10050.989576]  submit_bio_noacct+0x83/0xc80
    [10050.993714]  submit_bio+0xa7/0x330
    [10050.994435]  mpage_readahead+0x380/0x500
    [10050.998009]  read_pages+0x1c1/0xbf0
    [10051.002057]  page_cache_ra_unbounded+0x4c2/0x6f0
    [10051.007413]  do_page_cache_ra+0xda/0x110
    [10051.008207]  force_page_cache_ra+0x23d/0x3d0
    [10051.009087]  page_cache_sync_ra+0xca/0x300
    [10051.009970]  generic_file_buffered_read+0xbea/0x2130
    [10051.012685]  generic_file_read_iter+0x315/0x490
    [10051.014472]  blkdev_read_iter+0x113/0x1b0
    [10051.015300]  aio_read+0x2ad/0x450
    [10051.023786]  io_submit_one+0xc8e/0x1d60
    [10051.029855]  __se_sys_io_submit+0x125/0x350
    [10051.033442]  do_syscall_64+0x2d/0x40
    [10051.034156]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [10051.048733] Allocated by task 18598:
    [10051.049482]  kasan_save_stack+0x19/0x40
    [10051.050263]  __kasan_kmalloc.constprop.1+0xc1/0xd0
    [10051.051230]  kmem_cache_alloc+0x146/0x440
    [10051.052060]  mempool_alloc+0x125/0x2f0
    [10051.052818]  bio_alloc_bioset+0x353/0x590
    [10051.053658]  mpage_alloc+0x3b/0x240
    [10051.054382]  do_mpage_readpage+0xddf/0x1ef0
    [10051.055250]  mpage_readahead+0x264/0x500
    [10051.056060]  read_pages+0x1c1/0xbf0
    [10051.056758]  page_cache_ra_unbounded+0x4c2/0x6f0
    [10051.057702]  do_page_cache_ra+0xda/0x110
    [10051.058511]  force_page_cache_ra+0x23d/0x3d0
    [10051.059373]  page_cache_sync_ra+0xca/0x300
    [10051.060198]  generic_file_buffered_read+0xbea/0x2130
    [10051.061195]  generic_file_read_iter+0x315/0x490
    [10051.062189]  blkdev_read_iter+0x113/0x1b0
    [10051.063015]  aio_read+0x2ad/0x450
    [10051.063686]  io_submit_one+0xc8e/0x1d60
    [10051.064467]  __se_sys_io_submit+0x125/0x350
    [10051.065318]  do_syscall_64+0x2d/0x40
    [10051.066082]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [10051.067455] Freed by task 13307:
    [10051.068136]  kasan_save_stack+0x19/0x40
    [10051.068931]  kasan_set_track+0x1c/0x30
    [10051.069726]  kasan_set_free_info+0x1b/0x30
    [10051.070621]  __kasan_slab_free+0x111/0x160
    [10051.071480]  kmem_cache_free+0x94/0x460
    [10051.072256]  mempool_free+0xd6/0x320
    [10051.072985]  bio_free+0xe0/0x130
    [10051.073630]  bio_put+0xab/0xe0
    [10051.074252]  bio_endio+0x3a6/0x5d0
    [10051.074984]  blk_update_request+0x590/0x1370
    [10051.075870]  scsi_end_request+0x7d/0x400
    [10051.076667]  scsi_io_completion+0x1aa/0xe50
    [10051.077503]  scsi_softirq_done+0x11b/0x240
    [10051.078344]  blk_mq_complete_request+0xd4/0x120
    [10051.079275]  scsi_mq_done+0xf0/0x200
    [10051.080036]  virtscsi_vq_done+0xbc/0x150
    [10051.080850]  vring_interrupt+0x179/0x390
    [10051.081650]  __handle_irq_event_percpu+0xf7/0x490
    [10051.082626]  handle_irq_event_percpu+0x7b/0x160
    [10051.083527]  handle_irq_event+0xcc/0x170
    [10051.084297]  handle_edge_irq+0x215/0xb20
    [10051.085122]  asm_call_irq_on_stack+0xf/0x20
    [10051.085986]  common_interrupt+0xae/0x120
    [10051.086830]  asm_common_interrupt+0x1e/0x40
    
    ==================================================================
    
    Bio will be checked at beginning of submit_bio_noacct(). If bio needs
    to be throttled, it will start the timer and stop submit bio directly.
    Bio will submit in blk_throtl_dispatch_work_fn() when the timer expires.
    But in the current process, if bio is throttled, it will still set bio
    issue->value by blkcg_bio_issue_init(). This is redundant and may cause
    the above use-after-free.
    
    CPU0                                   CPU1
    submit_bio
    submit_bio_noacct
      submit_bio_checks
        blk_throtl_bio()
          <=mod_timer(&sq->pending_timer
                                          blk_throtl_dispatch_work_fn
                                            submit_bio_noacct() <= bio have
                                            throttle tag, will throw directly
                                            and bio issue->value will be set
                                            here
    
                                          bio_endio()
                                          bio_put()
                                          bio_free() <= free this bio
    
        blkcg_bio_issue_init(bio)
          <= bio has been freed and
          will lead to UAF
      return BLK_QC_T_NONE
    
    Fix this by remove extra blkcg_bio_issue_init.
    
    Fixes: e439bedf6b24 (blkcg: consolidate bio_issue_init() to be a part of core)
    Signed-off-by: Laibin Qiu <qiulaibin@huawei.com>
    Link: https://lore.kernel.org/r/20211112093354.3581504-1-qiulaibin@huawei.com
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dadcc935f440d50f39cfec0171eac27708ddbada
Author: Like Xu <likexu@tencent.com>
Date:   Wed Nov 3 17:17:16 2021 +0800

    perf/x86/vlbr: Add c->flags to vlbr event constraints
    
    [ Upstream commit 5863702561e625903ec678551cb056a4b19e0b8a ]
    
    Just like what we do in the x86_get_event_constraints(), the
    PERF_X86_EVENT_LBR_SELECT flag should also be propagated
    to event->hw.flags so that the host lbr driver can save/restore
    MSR_LBR_SELECT for the special vlbr event created by KVM or BPF.
    
    Fixes: 097e4311cda9 ("perf/x86: Add constraint to create guest LBR event without hw counter")
    Reported-by: Wanpeng Li <wanpengli@tencent.com>
    Signed-off-by: Like Xu <likexu@tencent.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Wanpeng Li <wanpengli@tencent.com>
    Link: https://lore.kernel.org/r/20211103091716.59906-1-likexu@tencent.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68fcb52b610c1853cadf3d135415555a128355f9
Author: Vincent Donnefort <vincent.donnefort@arm.com>
Date:   Thu Nov 4 17:51:20 2021 +0000

    sched/core: Mitigate race cpus_share_cache()/update_top_cache_domain()
    
    [ Upstream commit 42dc938a590c96eeb429e1830123fef2366d9c80 ]
    
    Nothing protects the access to the per_cpu variable sd_llc_id. When testing
    the same CPU (i.e. this_cpu == that_cpu), a race condition exists with
    update_top_cache_domain(). One scenario being:
    
                  CPU1                            CPU2
      ==================================================================
    
      per_cpu(sd_llc_id, CPUX) => 0
                                        partition_sched_domains_locked()
                                          detach_destroy_domains()
      cpus_share_cache(CPUX, CPUX)          update_top_cache_domain(CPUX)
        per_cpu(sd_llc_id, CPUX) => 0
                                              per_cpu(sd_llc_id, CPUX) = CPUX
        per_cpu(sd_llc_id, CPUX) => CPUX
        return false
    
    ttwu_queue_cond() wouldn't catch smp_processor_id() == cpu and the result
    is a warning triggered from ttwu_queue_wakelist().
    
    Avoid a such race in cpus_share_cache() by always returning true when
    this_cpu == that_cpu.
    
    Fixes: 518cd6234178 ("sched: Only queue remote wakeups when crossing cache boundaries")
    Reported-by: Jing-Ting Wu <jing-ting.wu@mediatek.com>
    Signed-off-by: Vincent Donnefort <vincent.donnefort@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20211104175120.857087-1-vincent.donnefort@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91191d47af55658c386553ffa9ef3099701d150f
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Nov 6 08:49:11 2021 -0700

    mips: BCM63XX: ensure that CPU_SUPPORTS_32BIT_KERNEL is set
    
    [ Upstream commit 5eeaafc8d69373c095e461bdb39e5c9b62228ac5 ]
    
    Several header files need info on CONFIG_32BIT or CONFIG_64BIT,
    but kconfig symbol BCM63XX does not provide that info. This leads
    to many build errors, e.g.:
    
       arch/mips/include/asm/page.h:196:13: error: use of undeclared identifier 'CAC_BASE'
               return x - PAGE_OFFSET + PHYS_OFFSET;
       arch/mips/include/asm/mach-generic/spaces.h:91:23: note: expanded from macro 'PAGE_OFFSET'
       #define PAGE_OFFSET             (CAC_BASE + PHYS_OFFSET)
       arch/mips/include/asm/io.h:134:28: error: use of undeclared identifier 'CAC_BASE'
               return (void *)(address + PAGE_OFFSET - PHYS_OFFSET);
       arch/mips/include/asm/mach-generic/spaces.h:91:23: note: expanded from macro 'PAGE_OFFSET'
       #define PAGE_OFFSET             (CAC_BASE + PHYS_OFFSET)
    
    arch/mips/include/asm/uaccess.h:82:10: error: use of undeclared identifier '__UA_LIMIT'
               return (__UA_LIMIT & (addr | (addr + size) | __ua_size(size))) == 0;
    
    Selecting the SYS_HAS_CPU_BMIPS* symbols causes SYS_HAS_CPU_BMIPS to be
    set, which then selects CPU_SUPPORT_32BIT_KERNEL, which causes
    CONFIG_32BIT to be set. (a bit more indirect than v1 [RFC].)
    
    Fixes: e7300d04bd08 ("MIPS: BCM63xx: Add support for the Broadcom BCM63xx family of SOCs.")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: bcm-kernel-feedback-list@broadcom.com
    Cc: linux-mips@vger.kernel.org
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Maxime Bizon <mbizon@freebox.fr>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Suggested-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbe27d0e1dcf72e533b697d11150248cff1f0c9e
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Thu Nov 4 04:11:55 2021 +0300

    clk: qcom: gcc-msm8996: Drop (again) gcc_aggre1_pnoc_ahb_clk
    
    [ Upstream commit 05cf3ec00d460b50088d421fb878a0f83f57e262 ]
    
    The gcc_aggre1_pnoc_ahb_clk is crucial for the proper MSM8996/APQ8096
    functioning. If it gets disabled, several subsytems will stop working
    (including eMMC/SDCC and USB). There are no in-kernel users of this
    clock, so it is much simpler to remove from the kernel.
    
    The clock was first removed in the commit 9e60de1cf270 ("clk: qcom:
    Remove gcc_aggre1_pnoc_ahb_clk from msm8996") by Stephen Boyd, but got
    added back in the commit b567752144e3 ("clk: qcom: Add some missing gcc
    clks for msm8996") by Rajendra Nayak.
    
    Let's remove it again in hope that nobody adds it back.
    
    Reported-by: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
    Cc: Rajendra Nayak <rnayak@codeaurora.org>
    Cc: Konrad Dybcio <konrad.dybcio@somainline.org>
    Fixes: b567752144e3 ("clk: qcom: Add some missing gcc clks for msm8996")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20211104011155.2209654-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b3d3b72be84027d33d5207f7296235bc8ac7fca
Author: Joel Stanley <joel@jms.id.au>
Date:   Thu Sep 23 09:24:49 2021 +0930

    clk/ast2600: Fix soc revision for AHB
    
    [ Upstream commit f45c5b1c27293f834682e89003f88b3512329ab4 ]
    
    Move the soc revision parsing to the initial probe, saving the driver
    from parsing the register multiple times.
    
    Use this variable to select the correct divisor table for the AHB clock.
    Before this fix the A2 would have used the A0 table.
    
    Fixes: 2d491066ccd4 ("clk: ast2600: Fix AHB clock divider for A1")
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Link: https://lore.kernel.org/r/20210922235449.213631-1-joel@jms.id.au
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03bc8ea0ae957e5b7c3dc94816ed6a5caed52646
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Fri Oct 1 18:20:33 2021 +0100

    clk: ingenic: Fix bugs with divided dividers
    
    [ Upstream commit ed84ef1cd7eddf933d4ffce2caa8161d6f947245 ]
    
    Two fixes in one:
    
    - In the "impose hardware constraints" block, the "logical" divider
      value (aka. not translated to the hardware) was clamped to fit in the
      register area, but this totally ignored the fact that the divider
      value can itself have a fixed divider.
    
    - The code that made sure that the divider value returned by the
      function was a multiple of its own fixed divider could result in a
      wrong value being calculated, because it was rounded down instead of
      rounded up.
    
    Fixes: 4afe2d1a6ed5 ("clk: ingenic: Allow divider value to be divided")
    Co-developed-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://lore.kernel.org/r/20211001172033.122329-1-paul@crapouillou.net
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a5439474e69ddfe2921338ee1036bb730a56f26
Author: Chao Yu <chao@kernel.org>
Date:   Thu Oct 28 20:45:08 2021 +0800

    f2fs: fix incorrect return value in f2fs_sanity_check_ckpt()
    
    [ Upstream commit ca98d72141dd81f42893a9a43d7ededab3355fba ]
    
    As Pavel Machek reported in [1]
    
    This code looks quite confused: part of function returns 1 on
    corruption, part returns -errno. The problem is not stable-specific.
    
    [1] https://lkml.org/lkml/2021/9/19/207
    
    Let's fix to make 'insane cp_payload case' to return 1 rater than
    EFSCORRUPTED, so that return value can be kept consistent for all
    error cases, it can avoid confusion of code logic.
    
    Fixes: 65ddf6564843 ("f2fs: fix to do sanity check for sb/cp fields correctly")
    Reported-by: Pavel Machek <pavel@denx.de>
    Reviewed-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a17fff6f045137d67294858590036007f1aa7d6
Author: Hyeong-Jun Kim <hj514.kim@samsung.com>
Date:   Wed Oct 27 13:16:00 2021 +0900

    f2fs: compress: disallow disabling compress on non-empty compressed file
    
    [ Upstream commit 02d58cd253d7536c412993573fc6b3b4454960eb ]
    
    Compresse file and normal file has differ in i_addr addressing,
    specifically addrs per inode/block. So, we will face data loss, if we
    disable the compression flag on non-empty files. Therefore we should
    disallow not only enabling but disabling the compression flag on
    non-empty files.
    
    Fixes: 4c8ff7095bef ("f2fs: support data compression")
    Signed-off-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Hyeong-Jun Kim <hj514.kim@samsung.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ce685cc9a0b1a3c253477a61fbee9aba72b736f
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Oct 4 17:19:13 2021 -0700

    sh: define __BIG_ENDIAN for math-emu
    
    [ Upstream commit b929926f01f2d14635345d22eafcf60feed1085e ]
    
    Fix this by defining both ENDIAN macros in
    <asm/sfp-machine.h> so that they can be utilized in
    <math-emu/soft-fp.h> according to the latter's comment:
    /* Allow sfp-machine to have its own byte order definitions. */
    
    (This is what is done in arch/nds32/include/asm/sfp-machine.h.)
    
    This placates these build warnings:
    
    In file included from ../arch/sh/math-emu/math.c:23:
    .../include/math-emu/single.h:50:21: warning: "__BIG_ENDIAN" is not defined, evaluates to 0 [-Wundef]
       50 | #if __BYTE_ORDER == __BIG_ENDIAN
    In file included from ../arch/sh/math-emu/math.c:24:
    .../include/math-emu/double.h:59:21: warning: "__BIG_ENDIAN" is not defined, evaluates to 0 [-Wundef]
       59 | #if __BYTE_ORDER == __BIG_ENDIAN
    
    Fixes: 4b565680d163 ("sh: math-emu support")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73383f670d8f762abb44852ff95b5150d6510527
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Oct 4 17:19:12 2021 -0700

    sh: math-emu: drop unused functions
    
    [ Upstream commit e25c252a9b033523c626f039d4b9a304f12f6775 ]
    
    Delete ieee_fpe_handler() since it is not used. After that is done,
    delete denormal_to_double() since it is not used:
    
    .../arch/sh/math-emu/math.c:505:12: error: 'ieee_fpe_handler' defined but not used [-Werror=unused-function]
      505 | static int ieee_fpe_handler(struct pt_regs *regs)
    
    .../arch/sh/math-emu/math.c:477:13: error: 'denormal_to_double' defined but not used [-Werror=unused-function]
      477 | static void denormal_to_double(struct sh_fpu_soft_struct *fpu, int n)
    
    Fixes: 7caf62de25554da3 ("sh: remove unused do_fpu_error")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Takashi YOSHII <takasi-y@ops.dti.ne.jp>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f44defd5694bab239e0dbcf99d488bef37f1a88f
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Oct 4 17:19:10 2021 -0700

    sh: fix kconfig unmet dependency warning for FRAME_POINTER
    
    [ Upstream commit fda1bc533094a7db68b11e7503d2c6c73993d12a ]
    
    FRAME_POINTER depends on DEBUG_KERNEL so DWARF_UNWINDER should
    depend on DEBUG_KERNEL before selecting FRAME_POINTER.
    
    WARNING: unmet direct dependencies detected for FRAME_POINTER
      Depends on [n]: DEBUG_KERNEL [=n] && (M68K || UML || SUPERH [=y]) || ARCH_WANT_FRAME_POINTERS [=n]
      Selected by [y]:
      - DWARF_UNWINDER [=y]
    
    Fixes: bd353861c735 ("sh: dwarf unwinder support.")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Matt Fleming <matt@console-pimps.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d7c5d08a4839903230db7b559471eae4779734f
Author: Keoseong Park <keosung.park@samsung.com>
Date:   Mon Sep 27 15:06:48 2021 +0900

    f2fs: fix to use WHINT_MODE
    
    [ Upstream commit 011e0868e0cf1237675b22e36fffa958fb08f46e ]
    
    Since active_logs can be set to 2 or 4 or NR_CURSEG_PERSIST_TYPE(6),
    it cannot be set to NR_CURSEG_TYPE(8).
    That is, whint_mode is always off.
    
    Therefore, the condition is changed from NR_CURSEG_TYPE to NR_CURSEG_PERSIST_TYPE.
    
    Cc: Chao Yu <chao@kernel.org>
    Fixes: d0b9e42ab615 (f2fs: introduce inmem curseg)
    Reported-by: tanghuan <tanghuan@vivo.com>
    Signed-off-by: Keoseong Park <keosung.park@samsung.com>
    Signed-off-by: Fengnan Chang <changfengnan@vivo.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8bd5e33057c02d377a76a42987c083afcb43579
Author: Gao Xiang <hsiangkao@linux.alibaba.com>
Date:   Tue Sep 21 22:37:30 2021 +0800

    f2fs: fix up f2fs_lookup tracepoints
    
    [ Upstream commit 70a9ac36ffd807ac506ed0b849f3e8ce3c6623f2 ]
    
    Fix up a misuse that the filename pointer isn't always valid in
    the ring buffer, and we should copy the content instead.
    
    Fixes: 0c5e36db17f5 ("f2fs: trace f2fs_lookup")
    Signed-off-by: Gao Xiang <hsiangkao@linux.alibaba.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d5bf899e57a4dbf83cf3ed165f7e7ee15776331
Author: Lu Wei <luwei32@huawei.com>
Date:   Thu Nov 26 10:43:11 2020 +0800

    maple: fix wrong return value of maple_bus_init().
    
    [ Upstream commit bde82ee391fa6d3ad054313c4aa7b726d32515ce ]
    
    If KMEM_CACHE or maple_alloc_dev failed, the maple_bus_init() will return 0
    rather than error, because the retval is not changed after KMEM_CACHE or
    maple_alloc_dev failed.
    
    Fixes: 17be2d2b1c33 ("sh: Add maple bus support for the SEGA Dreamcast.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Lu Wei <luwei32@huawei.com>
    Acked-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8748f08a2fc02aee89371bdb76fab2fe031a6a79
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Dec 22 12:54:01 2020 -0800

    sh: check return code of request_irq
    
    [ Upstream commit 0e38225c92c7964482a8bb6b3e37fde4319e965c ]
    
    request_irq is marked __must_check, but the call in shx3_prepare_cpus
    has a void return type, so it can't propagate failure to the caller.
    Follow cues from hexagon and just print an error.
    
    Fixes: c7936b9abcf5 ("sh: smp: Hook in to the generic IPI handler for SH-X3 SMP.")
    Cc: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Reviewed-by: Miguel Ojeda <ojeda@kernel.org>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29b742690a0929fb9543d3c1445c5a91f14417e5
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Oct 29 17:10:45 2021 +0200

    powerpc/8xx: Fix Oops with STRICT_KERNEL_RWX without DEBUG_RODATA_TEST
    
    [ Upstream commit c12ab8dbc492b992e1ea717db933cee568780c47 ]
    
    Until now, all tests involving CONFIG_STRICT_KERNEL_RWX were done with
    DEBUG_RODATA_TEST to check the result. But now that
    CONFIG_STRICT_KERNEL_RWX is selected by default, it came without
    CONFIG_DEBUG_RODATA_TEST and led to the following Oops
    
    [    6.830908] Freeing unused kernel image (initmem) memory: 352K
    [    6.840077] BUG: Unable to handle kernel data access on write at 0xc1285200
    [    6.846836] Faulting instruction address: 0xc0004b6c
    [    6.851745] Oops: Kernel access of bad area, sig: 11 [#1]
    [    6.857075] BE PAGE_SIZE=16K PREEMPT CMPC885
    [    6.861348] SAF3000 DIE NOTIFICATION
    [    6.864830] CPU: 0 PID: 1 Comm: swapper Not tainted 5.15.0-rc5-s3k-dev-02255-g2747d7b7916f #451
    [    6.873429] NIP:  c0004b6c LR: c0004b60 CTR: 00000000
    [    6.878419] REGS: c902be60 TRAP: 0300   Not tainted  (5.15.0-rc5-s3k-dev-02255-g2747d7b7916f)
    [    6.886852] MSR:  00009032 <EE,ME,IR,DR,RI>  CR: 53000335  XER: 8000ff40
    [    6.893564] DAR: c1285200 DSISR: 82000000
    [    6.893564] GPR00: 0c000000 c902bf20 c20f4000 08000000 00000001 04001f00 c1800000 00000035
    [    6.893564] GPR08: ff0001ff c1280000 00000002 c0004b60 00001000 00000000 c0004b1c 00000000
    [    6.893564] GPR16: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [    6.893564] GPR24: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 c1060000
    [    6.932034] NIP [c0004b6c] kernel_init+0x50/0x138
    [    6.936682] LR [c0004b60] kernel_init+0x44/0x138
    [    6.941245] Call Trace:
    [    6.943653] [c902bf20] [c0004b60] kernel_init+0x44/0x138 (unreliable)
    [    6.950022] [c902bf30] [c001122c] ret_from_kernel_thread+0x5c/0x64
    [    6.956135] Instruction dump:
    [    6.959060] 48ffc521 48045469 4800d8cd 3d20c086 89295fa0 2c090000 41820058 480796c9
    [    6.966890] 4800e48d 3d20c128 39400002 3fe0c106 <91495200> 3bff8000 4806fa1d 481f7d75
    [    6.974902] ---[ end trace 1e397bacba4aa610 ]---
    
    0xc1285200 corresponds to 'system_state' global var that the kernel is trying to set to
    SYSTEM_RUNNING. This var is above the RO/RW limit so it shouldn't Oops.
    
    It oopses because the dirty bit is missing.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/3d5800b0bbcd7b19761b98f50421358667b45331.1635520232.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc4bc07fb44c7b3aefd9fc710e10f86649e79a1c
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Oct 14 13:44:24 2021 +1100

    powerpc/dcr: Use cmplwi instead of 3-argument cmpli
    
    [ Upstream commit fef071be57dc43679a32d5b0e6ee176d6f12e9f2 ]
    
    In dcr-low.S we use cmpli with three arguments, instead of four
    arguments as defined in the ISA:
    
            cmpli   cr0,r3,1024
    
    This appears to be a PPC440-ism, looking at the "PPC440x5 CPU Core
    User’s Manual" it shows cmpli having no L field, but implied to be 0 due
    to the core being 32-bit. It mentions that the ISA defines four
    arguments and recommends using cmplwi.
    
    It also corresponds to the old POWER instruction set, which had no L
    field there, a reserved bit instead.
    
    dcr-low.S is only built 32-bit, because it is only built when
    DCR_NATIVE=y, which is only selected by 40x and 44x. Looking at the
    generated code (with gcc/gas) we see cmplwi as expected.
    
    Although gas is happy with the 3-argument version when building for
    32-bit, the LLVM assembler is not and errors out with:
    
      arch/powerpc/sysdev/dcr-low.S:27:10: error: invalid operand for instruction
       cmpli 0,%r3,1024; ...
               ^
    
    Switch to the cmplwi extended opcode, which avoids any confusion when
    reading the ISA, fixes the issue with the LLVM assembler, and also means
    the code could be built 64-bit in future (though that's very unlikely).
    
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    BugLink: https://github.com/ClangBuiltLinux/linux/issues/1419
    Link: https://lore.kernel.org/r/20211014024424.528848-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ac6cd87d8ddd36c43620f82c4d65b058f725f0f
Author: Chengfeng Ye <cyeaa@connect.ust.hk>
Date:   Sun Oct 24 03:46:11 2021 -0700

    ALSA: gus: fix null pointer dereference on pointer block
    
    [ Upstream commit a0d21bb3279476c777434c40d969ea88ca64f9aa ]
    
    The pointer block return from snd_gf1_dma_next_block could be
    null, so there is a potential null pointer dereference issue.
    Fix this by adding a null check before dereference.
    
    Signed-off-by: Chengfeng Ye <cyeaa@connect.ust.hk>
    Link: https://lore.kernel.org/r/20211024104611.9919-1-cyeaa@connect.ust.hk
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 850416beadef5ac7ab0881ba7fe9e723650fb7e3
Author: David Heidelberg <david@ixit.cz>
Date:   Wed Oct 20 23:47:41 2021 +0200

    ARM: dts: qcom: fix memory and mdio nodes naming for RB3011
    
    [ Upstream commit 14a1f6c9d8017ffbf388e82e1a1f023196d98612 ]
    
    Fixes warnings regarding to memory and mdio nodes and
    apply new naming following dt-schema.
    
    Signed-off-by: David Heidelberg <david@ixit.cz>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20211020214741.261509-1-david@ixit.cz
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c4d9764e74dba211755bba8f351b434ca187add
Author: Anatolij Gustschin <agust@denx.de>
Date:   Thu Oct 14 00:05:31 2021 +0200

    powerpc/5200: dts: fix memory node unit name
    
    [ Upstream commit aed2886a5e9ffc8269a4220bff1e9e030d3d2eb1 ]
    
    Fixes build warnings:
    Warning (unit_address_vs_reg): /memory: node has a reg or ranges property, but no unit name
    
    Signed-off-by: Anatolij Gustschin <agust@denx.de>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211013220532.24759-4-agust@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 833ad27927330ff9b103c72768b05f81b8c3045c
Author: Teng Qi <starmiku1207184332@gmail.com>
Date:   Mon Oct 11 19:40:03 2021 +0800

    iio: imu: st_lsm6dsx: Avoid potential array overflow in st_lsm6dsx_set_odr()
    
    [ Upstream commit 94be878c882d8d784ff44c639bf55f3b029f85af ]
    
    The length of hw->settings->odr_table is 2 and ref_sensor->id is an enum
    variable whose value is between 0 and 5.
    However, the value ST_LSM6DSX_ID_MAX (i.e. 5) is not caught properly in
     switch (sensor->id) {
    
    If ref_sensor->id is ST_LSM6DSX_ID_MAX, an array overflow will ocurrs in
    function st_lsm6dsx_check_odr():
      odr_table = &sensor->hw->settings->odr_table[sensor->id];
    
    and in function st_lsm6dsx_set_odr():
      reg = &hw->settings->odr_table[ref_sensor->id].reg;
    
    To avoid this array overflow, handle ST_LSM6DSX_ID_GYRO explicitly and
    return -EINVAL for the default case.
    
    The enum value ST_LSM6DSX_ID_MAX is only present as an easy way to check
    the limit and as such is never used, however this is not locally obvious.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Teng Qi <starmiku1207184332@gmail.com>
    Acked-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Link: https://lore.kernel.org/r/20211011114003.976221-1-starmiku1207184332@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0fef1c8cd61289489615a69575f829eb61b511b
Author: Mike Christie <michael.christie@oracle.com>
Date:   Wed Sep 29 21:04:20 2021 -0500

    scsi: target: Fix alua_tg_pt_gps_count tracking
    
    [ Upstream commit 1283c0d1a32bb924324481586b5d6e8e76f676ba ]
    
    We can't free the tg_pt_gp in core_alua_set_tg_pt_gp_id() because it's
    still accessed via configfs. Its release must go through the normal
    configfs/refcount process.
    
    The max alua_tg_pt_gps_count check should probably have been done in
    core_alua_allocate_tg_pt_gp(), but with the current code userspace could
    have created 0x0000ffff + 1 groups, but only set the id for 0x0000ffff.
    Then it could have deleted a group with an ID set, and then set the ID for
    that extra group and it would work ok.
    
    It's unlikely, but just in case this patch continues to allow that type of
    behavior, and just fixes the kfree() while in use bug.
    
    Link: https://lore.kernel.org/r/20210930020422.92578-4-michael.christie@oracle.com
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8176441373ddd7a45c0c92df80d73989d6e3aeb3
Author: Mike Christie <michael.christie@oracle.com>
Date:   Wed Sep 29 21:04:19 2021 -0500

    scsi: target: Fix ordered tag handling
    
    [ Upstream commit ed1227e080990ffec5bf39006ec8a57358e6689a ]
    
    This patch fixes the following bugs:
    
    1. If there are multiple ordered cmds queued and multiple simple cmds
       completing, target_restart_delayed_cmds() could be called on different
       CPUs and each instance could start a ordered cmd. They could then run in
       different orders than they were queued.
    
    2. target_restart_delayed_cmds() and target_handle_task_attr() can race
       where:
    
       1. target_handle_task_attr() has passed the simple_cmds == 0 check.
    
       2. transport_complete_task_attr() then decrements simple_cmds to 0.
    
       3. transport_complete_task_attr() runs target_restart_delayed_cmds() and
          it does not see any cmds on the delayed_cmd_list.
    
       4. target_handle_task_attr() adds the cmd to the delayed_cmd_list.
    
       The cmd will then end up timing out.
    
    3. If we are sent > 1 ordered cmds and simple_cmds == 0, we can execute
       them out of order, because target_handle_task_attr() will hit that
       simple_cmds check first and return false for all ordered cmds sent.
    
    4. We run target_restart_delayed_cmds() after every cmd completion, so if
       there is more than 1 simple cmd running, we start executing ordered cmds
       after that first cmd instead of waiting for all of them to complete.
    
    5. Ordered cmds are not supposed to start until HEAD OF QUEUE and all older
       cmds have completed, and not just simple.
    
    6. It's not a bug but it doesn't make sense to take the delayed_cmd_lock
       for every cmd completion when ordered cmds are almost never used. Just
       replacing that lock with an atomic increases IOPs by up to 10% when
       completions are spread over multiple CPUs and there are multiple
       sessions/ mqs/thread accessing the same device.
    
    This patch moves the queued delayed handling to a per device work to
    serialze the cmd executions for each device and adds a new counter to track
    HEAD_OF_QUEUE and SIMPLE cmds. We can then check the new counter to
    determine when to run the work on the completion path.
    
    Link: https://lore.kernel.org/r/20210930020422.92578-3-michael.christie@oracle.com
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8440377e1a5644779b4c8d013aa2a917f5fc83c3
Author: Ye Bin <yebin10@huawei.com>
Date:   Wed Oct 13 11:39:13 2021 +0800

    scsi: scsi_debug: Fix out-of-bound read in resp_report_tgtpgs()
    
    [ Upstream commit f347c26836c270199de1599c3cd466bb7747caa9 ]
    
    The following issue was observed running syzkaller:
    
    BUG: KASAN: slab-out-of-bounds in memcpy include/linux/string.h:377 [inline]
    BUG: KASAN: slab-out-of-bounds in sg_copy_buffer+0x150/0x1c0 lib/scatterlist.c:831
    Read of size 2132 at addr ffff8880aea95dc8 by task syz-executor.0/9815
    
    CPU: 0 PID: 9815 Comm: syz-executor.0 Not tainted 4.19.202-00874-gfc0fe04215a9 #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xe4/0x14a lib/dump_stack.c:118
     print_address_description+0x73/0x280 mm/kasan/report.c:253
     kasan_report_error mm/kasan/report.c:352 [inline]
     kasan_report+0x272/0x370 mm/kasan/report.c:410
     memcpy+0x1f/0x50 mm/kasan/kasan.c:302
     memcpy include/linux/string.h:377 [inline]
     sg_copy_buffer+0x150/0x1c0 lib/scatterlist.c:831
     fill_from_dev_buffer+0x14f/0x340 drivers/scsi/scsi_debug.c:1021
     resp_report_tgtpgs+0x5aa/0x770 drivers/scsi/scsi_debug.c:1772
     schedule_resp+0x464/0x12f0 drivers/scsi/scsi_debug.c:4429
     scsi_debug_queuecommand+0x467/0x1390 drivers/scsi/scsi_debug.c:5835
     scsi_dispatch_cmd+0x3fc/0x9b0 drivers/scsi/scsi_lib.c:1896
     scsi_request_fn+0x1042/0x1810 drivers/scsi/scsi_lib.c:2034
     __blk_run_queue_uncond block/blk-core.c:464 [inline]
     __blk_run_queue+0x1a4/0x380 block/blk-core.c:484
     blk_execute_rq_nowait+0x1c2/0x2d0 block/blk-exec.c:78
     sg_common_write.isra.19+0xd74/0x1dc0 drivers/scsi/sg.c:847
     sg_write.part.23+0x6e0/0xd00 drivers/scsi/sg.c:716
     sg_write+0x64/0xa0 drivers/scsi/sg.c:622
     __vfs_write+0xed/0x690 fs/read_write.c:485
    kill_bdev:block_device:00000000e138492c
     vfs_write+0x184/0x4c0 fs/read_write.c:549
     ksys_write+0x107/0x240 fs/read_write.c:599
     do_syscall_64+0xc2/0x560 arch/x86/entry/common.c:293
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    We get 'alen' from command its type is int. If userspace passes a large
    length we will get a negative 'alen'.
    
    Switch n, alen, and rlen to u32.
    
    Link: https://lore.kernel.org/r/20211013033913.2551004-3-yebin10@huawei.com
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e20cb072679bdb47747ccc8bee3233a4cf0765a
Author: Ye Bin <yebin10@huawei.com>
Date:   Wed Oct 13 11:39:12 2021 +0800

    scsi: scsi_debug: Fix out-of-bound read in resp_readcap16()
    
    [ Upstream commit 4e3ace0051e7e504b55d239daab8789dd89b863c ]
    
    The following warning was observed running syzkaller:
    
    [ 3813.830724] sg_write: data in/out 65466/242 bytes for SCSI command 0x9e-- guessing data in;
    [ 3813.830724]    program syz-executor not setting count and/or reply_len properly
    [ 3813.836956] ==================================================================
    [ 3813.839465] BUG: KASAN: stack-out-of-bounds in sg_copy_buffer+0x157/0x1e0
    [ 3813.841773] Read of size 4096 at addr ffff8883cf80f540 by task syz-executor/1549
    [ 3813.846612] Call Trace:
    [ 3813.846995]  dump_stack+0x108/0x15f
    [ 3813.847524]  print_address_description+0xa5/0x372
    [ 3813.848243]  kasan_report.cold+0x236/0x2a8
    [ 3813.849439]  check_memory_region+0x240/0x270
    [ 3813.850094]  memcpy+0x30/0x80
    [ 3813.850553]  sg_copy_buffer+0x157/0x1e0
    [ 3813.853032]  sg_copy_from_buffer+0x13/0x20
    [ 3813.853660]  fill_from_dev_buffer+0x135/0x370
    [ 3813.854329]  resp_readcap16+0x1ac/0x280
    [ 3813.856917]  schedule_resp+0x41f/0x1630
    [ 3813.858203]  scsi_debug_queuecommand+0xb32/0x17e0
    [ 3813.862699]  scsi_dispatch_cmd+0x330/0x950
    [ 3813.863329]  scsi_request_fn+0xd8e/0x1710
    [ 3813.863946]  __blk_run_queue+0x10b/0x230
    [ 3813.864544]  blk_execute_rq_nowait+0x1d8/0x400
    [ 3813.865220]  sg_common_write.isra.0+0xe61/0x2420
    [ 3813.871637]  sg_write+0x6c8/0xef0
    [ 3813.878853]  __vfs_write+0xe4/0x800
    [ 3813.883487]  vfs_write+0x17b/0x530
    [ 3813.884008]  ksys_write+0x103/0x270
    [ 3813.886268]  __x64_sys_write+0x77/0xc0
    [ 3813.886841]  do_syscall_64+0x106/0x360
    [ 3813.887415]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This issue can be reproduced with the following syzkaller log:
    
    r0 = openat(0xffffffffffffff9c, &(0x7f0000000040)='./file0\x00', 0x26e1, 0x0)
    r1 = syz_open_procfs(0xffffffffffffffff, &(0x7f0000000000)='fd/3\x00')
    open_by_handle_at(r1, &(0x7f00000003c0)=ANY=[@ANYRESHEX], 0x602000)
    r2 = syz_open_dev$sg(&(0x7f0000000000), 0x0, 0x40782)
    write$binfmt_aout(r2, &(0x7f0000000340)=ANY=[@ANYBLOB="00000000deff000000000000000000000000000000000000000000000000000047f007af9e107a41ec395f1bded7be24277a1501ff6196a83366f4e6362bc0ff2b247f68a972989b094b2da4fb3607fcf611a22dd04310d28c75039d"], 0x126)
    
    In resp_readcap16() we get "int alloc_len" value -1104926854, and then pass
    the huge arr_len to fill_from_dev_buffer(), but arr is only 32 bytes. This
    leads to OOB in sg_copy_buffer().
    
    To solve this issue, define alloc_len as u32.
    
    Link: https://lore.kernel.org/r/20211013033913.2551004-2-yebin10@huawei.com
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9635581aa9998b53240e4e9c6e29a189826e09dc
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Oct 12 15:23:12 2021 -0700

    MIPS: sni: Fix the build
    
    [ Upstream commit c91cf42f61dc77b289784ea7b15a8531defa41c0 ]
    
    This patch fixes the following gcc 10 build error:
    
    arch/mips/sni/time.c: In function ‘a20r_set_periodic’:
    arch/mips/sni/time.c:15:26: error: unsigned conversion from ‘int’ to ‘u8’ {aka ‘volatile unsigned char’} changes value from ‘576’ to ‘64’ [-Werror=overflow]
       15 | #define SNI_COUNTER0_DIV ((SNI_CLOCK_TICK_RATE / SNI_COUNTER2_DIV) / HZ)
          |                          ^
    arch/mips/sni/time.c:21:45: note: in expansion of macro ‘SNI_COUNTER0_DIV’
       21 |  *(volatile u8 *)(A20R_PT_CLOCK_BASE + 0) = SNI_COUNTER0_DIV;
          |                                             ^~~~~~~~~~~~~~~~
    
    Cc: linux-mips@vger.kernel.org
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77e9fed33056f2a88eba9dd4d2d5412f0c7d1f41
Author: Guanghui Feng <guanghuifeng@linux.alibaba.com>
Date:   Mon Oct 11 22:08:24 2021 +0800

    tty: tty_buffer: Fix the softlockup issue in flush_to_ldisc
    
    [ Upstream commit 3968ddcf05fb4b9409cd1859feb06a5b0550a1c1 ]
    
    When running ltp testcase(ltp/testcases/kernel/pty/pty04.c) with arm64, there is a soft lockup,
    which look like this one:
    
      Workqueue: events_unbound flush_to_ldisc
      Call trace:
       dump_backtrace+0x0/0x1ec
       show_stack+0x24/0x30
       dump_stack+0xd0/0x128
       panic+0x15c/0x374
       watchdog_timer_fn+0x2b8/0x304
       __run_hrtimer+0x88/0x2c0
       __hrtimer_run_queues+0xa4/0x120
       hrtimer_interrupt+0xfc/0x270
       arch_timer_handler_phys+0x40/0x50
       handle_percpu_devid_irq+0x94/0x220
       __handle_domain_irq+0x88/0xf0
       gic_handle_irq+0x84/0xfc
       el1_irq+0xc8/0x180
       slip_unesc+0x80/0x214 [slip]
       tty_ldisc_receive_buf+0x64/0x80
       tty_port_default_receive_buf+0x50/0x90
       flush_to_ldisc+0xbc/0x110
       process_one_work+0x1d4/0x4b0
       worker_thread+0x180/0x430
       kthread+0x11c/0x120
    
    In the testcase pty04, The first process call the write syscall to send
    data to the pty master. At the same time, the workqueue will do the
    flush_to_ldisc to pop data in a loop until there is no more data left.
    When the sender and workqueue running in different core, the sender sends
    data fastly in full time which will result in workqueue doing work in loop
    for a long time and occuring softlockup in flush_to_ldisc with kernel
    configured without preempt. So I add need_resched check and cond_resched
    in the flush_to_ldisc loop to avoid it.
    
    Signed-off-by: Guanghui Feng <guanghuifeng@linux.alibaba.com>
    Link: https://lore.kernel.org/r/1633961304-24759-1-git-send-email-guanghuifeng@linux.alibaba.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da82a207c4dc30d991b298dc9094e485b21f45a3
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Oct 15 23:26:02 2021 -0700

    ALSA: ISA: not for M68K
    
    [ Upstream commit 3c05f1477e62ea5a0a8797ba6a545b1dc751fb31 ]
    
    On m68k, compiling drivers under SND_ISA causes build errors:
    
    ../sound/core/isadma.c: In function 'snd_dma_program':
    ../sound/core/isadma.c:33:17: error: implicit declaration of function 'claim_dma_lock' [-Werror=implicit-function-declaration]
       33 |         flags = claim_dma_lock();
          |                 ^~~~~~~~~~~~~~
    ../sound/core/isadma.c:41:9: error: implicit declaration of function 'release_dma_lock' [-Werror=implicit-function-declaration]
       41 |         release_dma_lock(flags);
          |         ^~~~~~~~~~~~~~~~
    
    ../sound/isa/sb/sb16_main.c: In function 'snd_sb16_playback_prepare':
    ../sound/isa/sb/sb16_main.c:253:72: error: 'DMA_AUTOINIT' undeclared (first use in this function)
      253 |         snd_dma_program(dma, runtime->dma_addr, size, DMA_MODE_WRITE | DMA_AUTOINIT);
          |                                                                        ^~~~~~~~~~~~
    ../sound/isa/sb/sb16_main.c:253:72: note: each undeclared identifier is reported only once for each function it appears in
    ../sound/isa/sb/sb16_main.c: In function 'snd_sb16_capture_prepare':
    ../sound/isa/sb/sb16_main.c:322:71: error: 'DMA_AUTOINIT' undeclared (first use in this function)
      322 |         snd_dma_program(dma, runtime->dma_addr, size, DMA_MODE_READ | DMA_AUTOINIT);
          |                                                                       ^~~~~~~~~~~~
    
    and more...
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Jaroslav Kysela <perex@perex.cz>
    Cc: Takashi Iwai <tiwai@suse.com>
    Cc: alsa-devel@alsa-project.org
    Cc: linux-m68k@lists.linux-m68k.org
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20211016062602.3588-1-rdunlap@infradead.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c788ac47502edf5541b411520b8350301afff178
Author: Li Yang <leoyang.li@nxp.com>
Date:   Tue Oct 12 18:58:23 2021 -0500

    ARM: dts: ls1021a-tsn: use generic "jedec,spi-nor" compatible for flash
    
    [ Upstream commit 05e63b48b20fa70726be505a7660d1a07bc1cffb ]
    
    We cannot list all the possible chips used in different board revisions,
    just use the generic "jedec,spi-nor" compatible instead.  This also
    fixes dtbs_check error:
    ['jedec,spi-nor', 's25fl256s1', 's25fl512s'] is too long
    
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Reviewed-by: Kuldeep Singh <kuldeep.singh@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbba09f86976fad6454c66ece112736748682fa6
Author: Li Yang <leoyang.li@nxp.com>
Date:   Tue Oct 12 18:58:22 2021 -0500

    ARM: dts: ls1021a: move thermal-zones node out of soc/
    
    [ Upstream commit 1ee1500ef717eefb5d9bdaf97905cb81b4e69aa4 ]
    
    This fixes dtbs-check error from simple-bus schema:
    soc: thermal-zones: {'type': 'object'} is not allowed for {'cpu-thermal': ..... }
            From schema: /home/leo/.local/lib/python3.8/site-packages/dtschema/schemas/simple-bus.yaml
    
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2474eb7fc3bfbce10f7b8ea431fcffe5dd5f5100
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 11 21:49:20 2021 +0800

    usb: host: ohci-tmio: check return value after calling platform_get_resource()
    
    [ Upstream commit 9eff2b2e59fda25051ab36cd1cb5014661df657b ]
    
    It will cause null-ptr-deref if platform_get_resource() returns NULL,
    we need check the return value.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20211011134920.118477-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02d9ebe0ccfaf9d2a49496bee05752ad00114838
Author: Roger Quadros <rogerq@kernel.org>
Date:   Thu Oct 7 15:08:30 2021 +0300

    ARM: dts: omap: fix gpmc,mux-add-data type
    
    [ Upstream commit 51b9e22ffd3c4c56cbb7caae9750f70e55ffa603 ]
    
    gpmc,mux-add-data is not boolean.
    
    Fixes the below errors flagged by dtbs_check.
    
    "ethernet@4,0:gpmc,mux-add-data: True is not of type 'array'"
    
    Signed-off-by: Roger Quadros <rogerq@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6c9bbe7facb10b03aa3b61ee0f8231a414e209a
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Fri Sep 17 11:22:13 2021 -0700

    firmware_loader: fix pre-allocated buf built-in firmware use
    
    [ Upstream commit f7a07f7b96033df7709042ff38e998720a3f7119 ]
    
    The firmware_loader can be used with a pre-allocated buffer
    through the use of the API calls:
    
      o request_firmware_into_buf()
      o request_partial_firmware_into_buf()
    
    If the firmware was built-in and present, our current check
    for if the built-in firmware fits into the pre-allocated buffer
    does not return any errors, and we proceed to tell the caller
    that everything worked fine. It's a lie and no firmware would
    end up being copied into the pre-allocated buffer. So if the
    caller trust the result it may end up writing a bunch of 0's
    to a device!
    
    Fix this by making the function that checks for the pre-allocated
    buffer return non-void. Since the typical use case is when no
    pre-allocated buffer is provided make this return successfully
    for that case. If the built-in firmware does *not* fit into the
    pre-allocated buffer size return a failure as we should have
    been doing before.
    
    I'm not aware of users of the built-in firmware using the API
    calls with a pre-allocated buffer, as such I doubt this fixes
    any real life issue. But you never know... perhaps some oddball
    private tree might use it.
    
    In so far as upstream is concerned this just fixes our code for
    correctness.
    
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/20210917182226.3532898-2-mcgrof@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02a22911ed87fb677ec01f459614f8cca619cd08
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Oct 4 16:35:09 2021 -0500

    ALSA: intel-dsp-config: add quirk for APL/GLK/TGL devices based on ES8336 codec
    
    [ Upstream commit 9d36ceab94151f07cf3fcb067213ac87937adf12 ]
    
    These devices are based on an I2C/I2S device, we need to force the use
    of the SOF driver otherwise the legacy HDaudio driver will be loaded -
    only HDMI will be supported.
    
    Co-developed-by: Huajun Li <huajun.li@intel.com>
    Signed-off-by: Huajun Li <huajun.li@intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20211004213512.220836-3-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 055eced3edf5b675d12189081303f6285ef26511
Author: Guo Zhi <qtxuning1999@sjtu.edu.cn>
Date:   Wed Sep 29 20:25:37 2021 +0800

    scsi: advansys: Fix kernel pointer leak
    
    [ Upstream commit d4996c6eac4c81b8872043e9391563f67f13e406 ]
    
    Pointers should be printed with %p or %px rather than cast to 'unsigned
    long' and printed with %lx.
    
    Change %lx to %p to print the hashed pointer.
    
    Link: https://lore.kernel.org/r/20210929122538.1158235-1-qtxuning1999@sjtu.edu.cn
    Signed-off-by: Guo Zhi <qtxuning1999@sjtu.edu.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97f3cbb57b1618290cc99d46f91077826acf2744
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Oct 2 23:14:57 2021 +0200

    ASoC: nau8824: Add DMI quirk mechanism for active-high jack-detect
    
    [ Upstream commit 92d3360108f1839ca40451bad20ff67dd24a1964 ]
    
    Add a quirk mechanism to allow specifying that active-high jack-detection
    should be used on platforms where this info is not available in devicetree.
    
    And add an entry for the Cyberbook T116 tablet to the DMI table, so that
    jack-detection will work properly on this tablet.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20211002211459.110124-2-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2207a078cf68b8a06a4185e8d2baab3aea31ec
Author: Stefan Riedmueller <s.riedmueller@phytec.de>
Date:   Mon Sep 27 09:28:56 2021 +0200

    clk: imx: imx6ul: Move csi_sel mux to correct base register
    
    [ Upstream commit 2f9d61869640f732599ec36b984c2b5c46067519 ]
    
    The csi_sel mux register is located in the CCM register base and not the
    CCM_ANALOG register base. So move it to the correct position in code.
    
    Otherwise changing the parent of the csi clock can lead to a complete
    system failure due to the CCM_ANALOG_PLL_SYS_TOG register being falsely
    modified.
    
    Also remove the SET_RATE_PARENT flag since one possible supply for the
    csi_sel mux is the system PLL which we don't want to modify.
    
    Signed-off-by: Stefan Riedmueller <s.riedmueller@phytec.de>
    Reviewed-by: Abel Vesa <abel.vesa@nxp.com>
    Link: https://lore.kernel.org/r/20210927072857.3940880-1-s.riedmueller@phytec.de
    Signed-off-by: Abel Vesa <abel.vesa@nxp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c6daf4799613b16dd4ad86fbc34f719ceb69911
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Sep 24 14:24:17 2021 -0500

    ASoC: SOF: Intel: hda-dai: fix potential locking issue
    
    [ Upstream commit a20f3b10de61add5e14b6ce4df982f4df2a4cbbc ]
    
    The initial hdac_stream code was adapted a third time with the same
    locking issues. Move the spin_lock outside the loops and make sure the
    fields are protected on read/write.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210924192417.169243-5-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19d193c5761a0f6fc03be00447bc209f8d266d8b
Author: Michael Walle <michael@walle.cc>
Date:   Thu Aug 26 14:35:28 2021 +0200

    arm64: dts: freescale: fix arm,sp805 compatible string
    
    [ Upstream commit 99a7cacc66cae92db40139b57689be2af75fc6b8 ]
    
    According to Documentation/devicetree/bindings/watchdog/arm,sp805.yaml
    the compatible is:
      compatible = "arm,sp805", "arm,primecell";
    
    The current compatible string doesn't exist at all. Fix it.
    
    Signed-off-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36446a094a45b3bcf086819843d590f6e4696091
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sun Aug 29 19:16:26 2021 +0800

    arm64: dts: qcom: ipq6018: Fix qcom,controlled-remotely property
    
    [ Upstream commit 3509de752ea14c7e5781b3a56a4a0bf832f5723a ]
    
    Property qcom,controlled-remotely should be boolean.  Fix it.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20210829111628.5543-2-shawn.guo@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e52fecdd0c142b95c720683885b06ee3f0e065c8
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
Date:   Wed Sep 1 20:31:21 2021 +0200

    arm64: dts: qcom: msm8998: Fix CPU/L2 idle state latency and residency
    
    [ Upstream commit 3f1dcaff642e75c1d2ad03f783fa8a3b1f56dd50 ]
    
    The entry/exit latency and minimum residency in state for the idle
    states of MSM8998 were ..bad: first of all, for all of them the
    timings were written for CPU sleep but the min-residency-us param
    was miscalculated (supposedly, while porting this from downstream);
    Then, the power collapse states are setting PC on both the CPU
    cluster *and* the L2 cache, which have different timings: in the
    specific case of L2 the times are higher so these ones should be
    taken into account instead of the CPU ones.
    
    This parameter misconfiguration was not giving particular issues
    because on MSM8998 there was no CPU scaling at all, so cluster/L2
    power collapse was rarely (if ever) hit.
    When CPU scaling is enabled, though, the wrong timings will produce
    SoC unstability shown to the user as random, apparently error-less,
    sudden reboots and/or lockups.
    
    This set of parameters are stabilizing the SoC when CPU scaling is
    ON and when power collapse is frequently hit.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20210901183123.1087392-3-angelogioacchino.delregno@somainline.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 568d94c5c9f072b80097d89c024507af82c0c137
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Sat Sep 18 19:29:30 2021 +0200

    ARM: BCM53016: Specify switch ports for Meraki MR32
    
    [ Upstream commit 6abc4ca5a28070945e0d68cb4160b309bfbf4b8b ]
    
    the switch identifies itself as a BCM53012 (rev 5)...
    This patch has been tested & verified on OpenWrt's
    snapshot with Linux 5.10 (didn't test any older kernels).
    The MR32 is able to "talk to the network" as before with
    OpenWrt's SWITCHDEV b53 driver.
    
    | b53-srab-switch 18007000.ethernet-switch: found switch: BCM53012, rev 5
    | libphy: dsa slave smi: probed
    | b53-srab-switch 18007000.ethernet-switch poe (uninitialized):
    |       PHY [dsa-0.0:00] driver [Generic PHY] (irq=POLL)
    | b53-srab-switch 18007000.ethernet-switch: Using legacy PHYLIB callbacks.
    |       Please migrate to PHYLINK!
    | DSA: tree 0 setup
    
    Reported-by: Rafał Miłecki <zajec5@gmail.com>
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a53d9ad9bc3408ad7f0424d60d25381f9fa6c81
Author: Fabio Aiuto <fabioaiuto83@gmail.com>
Date:   Mon Sep 20 16:55:00 2021 +0200

    staging: rtl8723bs: remove possible deadlock when disconnect (v2)
    
    [ Upstream commit 54659ca026e586bbb33a7e60daa6443a3ac6b5df ]
    
    when turning off a connection, lockdep complains with the
    following warning (a modprobe has been done but the same
    happens with a disconnection from NetworkManager,
    it's enough to trigger a cfg80211_disconnect call):
    
    [  682.855867] ======================================================
    [  682.855877] WARNING: possible circular locking dependency detected
    [  682.855887] 5.14.0-rc6+ #16 Tainted: G         C OE
    [  682.855898] ------------------------------------------------------
    [  682.855906] modprobe/1770 is trying to acquire lock:
    [  682.855916] ffffb6d000332b00 (&pxmitpriv->lock){+.-.}-{2:2},
                    at: rtw_free_stainfo+0x52/0x4a0 [r8723bs]
    [  682.856073]
                   but task is already holding lock:
    [  682.856081] ffffb6d0003336a8 (&pstapriv->sta_hash_lock){+.-.}-{2:2},
                    at: rtw_free_assoc_resources+0x48/0x110 [r8723bs]
    [  682.856207]
                   which lock already depends on the new lock.
    
    [  682.856215]
                   the existing dependency chain (in reverse order) is:
    [  682.856223]
                   -> #1 (&pstapriv->sta_hash_lock){+.-.}-{2:2}:
    [  682.856247]        _raw_spin_lock_bh+0x34/0x40
    [  682.856265]        rtw_get_stainfo+0x9a/0x110 [r8723bs]
    [  682.856389]        rtw_xmit_classifier+0x27/0x130 [r8723bs]
    [  682.856515]        rtw_xmitframe_enqueue+0xa/0x20 [r8723bs]
    [  682.856642]        rtl8723bs_hal_xmit+0x3b/0xb0 [r8723bs]
    [  682.856752]        rtw_xmit+0x4ef/0x890 [r8723bs]
    [  682.856879]        _rtw_xmit_entry+0xba/0x350 [r8723bs]
    [  682.856981]        dev_hard_start_xmit+0xee/0x320
    [  682.856999]        sch_direct_xmit+0x8c/0x330
    [  682.857014]        __dev_queue_xmit+0xba5/0xf00
    [  682.857030]        packet_sendmsg+0x981/0x1b80
    [  682.857047]        sock_sendmsg+0x5b/0x60
    [  682.857060]        __sys_sendto+0xf1/0x160
    [  682.857073]        __x64_sys_sendto+0x24/0x30
    [  682.857087]        do_syscall_64+0x3a/0x80
    [  682.857102]        entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  682.857117]
                   -> #0 (&pxmitpriv->lock){+.-.}-{2:2}:
    [  682.857142]        __lock_acquire+0xfd9/0x1b50
    [  682.857158]        lock_acquire+0xb4/0x2c0
    [  682.857172]        _raw_spin_lock_bh+0x34/0x40
    [  682.857185]        rtw_free_stainfo+0x52/0x4a0 [r8723bs]
    [  682.857308]        rtw_free_assoc_resources+0x53/0x110 [r8723bs]
    [  682.857415]        cfg80211_rtw_disconnect+0x4b/0x70 [r8723bs]
    [  682.857522]        cfg80211_disconnect+0x12e/0x2f0 [cfg80211]
    [  682.857759]        cfg80211_leave+0x2b/0x40 [cfg80211]
    [  682.857961]        cfg80211_netdev_notifier_call+0xa9/0x560 [cfg80211]
    [  682.858163]        raw_notifier_call_chain+0x41/0x50
    [  682.858180]        __dev_close_many+0x62/0x100
    [  682.858195]        dev_close_many+0x7d/0x120
    [  682.858209]        unregister_netdevice_many+0x416/0x680
    [  682.858225]        unregister_netdevice_queue+0xab/0xf0
    [  682.858240]        unregister_netdev+0x18/0x20
    [  682.858255]        rtw_unregister_netdevs+0x28/0x40 [r8723bs]
    [  682.858360]        rtw_dev_remove+0x24/0xd0 [r8723bs]
    [  682.858463]        sdio_bus_remove+0x31/0xd0 [mmc_core]
    [  682.858532]        device_release_driver_internal+0xf7/0x1d0
    [  682.858550]        driver_detach+0x47/0x90
    [  682.858564]        bus_remove_driver+0x77/0xd0
    [  682.858579]        rtw_drv_halt+0xc/0x678 [r8723bs]
    [  682.858685]        __x64_sys_delete_module+0x13f/0x250
    [  682.858699]        do_syscall_64+0x3a/0x80
    [  682.858715]        entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  682.858729]
                   other info that might help us debug this:
    
    [  682.858737]  Possible unsafe locking scenario:
    
    [  682.858744]        CPU0                    CPU1
    [  682.858751]        ----                    ----
    [  682.858758]   lock(&pstapriv->sta_hash_lock);
    [  682.858772]                                lock(&pxmitpriv->lock);
    [  682.858786]                                lock(&pstapriv->sta_hash_lock);
    [  682.858799]   lock(&pxmitpriv->lock);
    [  682.858812]
                    *** DEADLOCK ***
    
    [  682.858820] 5 locks held by modprobe/1770:
    [  682.858831]  #0: ffff8d870697d980 (&dev->mutex){....}-{3:3},
                    at: device_release_driver_internal+0x1a/0x1d0
    [  682.858869]  #1: ffffffffbdbbf1c8 (rtnl_mutex){+.+.}-{3:3},
                    at: unregister_netdev+0xe/0x20
    [  682.858906]  #2: ffff8d87054ee5e8 (&rdev->wiphy.mtx){+.+.}-{3:3},
                    at: cfg80211_netdev_notifier_call+0x9e/0x560 [cfg80211]
    [  682.859131]  #3: ffff8d870f2bc8f0 (&wdev->mtx){+.+.}-{3:3},
                    at: cfg80211_leave+0x20/0x40 [cfg80211]
    [  682.859354]  #4: ffffb6d0003336a8 (&pstapriv->sta_hash_lock){+.-.}-{2:2},
                    at: rtw_free_assoc_resources+0x48/0x110 [r8723bs]
    [  682.859482]
                   stack backtrace:
    [  682.859491] CPU: 1 PID: 1770 Comm: modprobe Tainted: G
                    C OE     5.14.0-rc6+ #16
    [  682.859507] Hardware name: LENOVO 80NR/Madrid, BIOS DACN25WW 08/20/2015
    [  682.859517] Call Trace:
    [  682.859531]  dump_stack_lvl+0x56/0x6f
    [  682.859551]  check_noncircular+0xdb/0xf0
    [  682.859579]  __lock_acquire+0xfd9/0x1b50
    [  682.859606]  lock_acquire+0xb4/0x2c0
    [  682.859623]  ? rtw_free_stainfo+0x52/0x4a0 [r8723bs]
    [  682.859752]  ? mark_held_locks+0x48/0x70
    [  682.859769]  ? rtw_free_stainfo+0x4a/0x4a0 [r8723bs]
    [  682.859898]  _raw_spin_lock_bh+0x34/0x40
    [  682.859914]  ? rtw_free_stainfo+0x52/0x4a0 [r8723bs]
    [  682.860039]  rtw_free_stainfo+0x52/0x4a0 [r8723bs]
    [  682.860171]  rtw_free_assoc_resources+0x53/0x110 [r8723bs]
    [  682.860286]  cfg80211_rtw_disconnect+0x4b/0x70 [r8723bs]
    [  682.860397]  cfg80211_disconnect+0x12e/0x2f0 [cfg80211]
    [  682.860629]  cfg80211_leave+0x2b/0x40 [cfg80211]
    [  682.860836]  cfg80211_netdev_notifier_call+0xa9/0x560 [cfg80211]
    [  682.861048]  ? __lock_acquire+0x4dc/0x1b50
    [  682.861070]  ? lock_is_held_type+0xa8/0x110
    [  682.861089]  ? lock_is_held_type+0xa8/0x110
    [  682.861104]  ? find_held_lock+0x2d/0x90
    [  682.861120]  ? packet_notifier+0x173/0x300
    [  682.861141]  ? lock_release+0xb3/0x250
    [  682.861160]  ? packet_notifier+0x192/0x300
    [  682.861184]  raw_notifier_call_chain+0x41/0x50
    [  682.861205]  __dev_close_many+0x62/0x100
    [  682.861224]  dev_close_many+0x7d/0x120
    [  682.861245]  unregister_netdevice_many+0x416/0x680
    [  682.861264]  ? find_held_lock+0x2d/0x90
    [  682.861284]  unregister_netdevice_queue+0xab/0xf0
    [  682.861306]  unregister_netdev+0x18/0x20
    [  682.861325]  rtw_unregister_netdevs+0x28/0x40 [r8723bs]
    [  682.861434]  rtw_dev_remove+0x24/0xd0 [r8723bs]
    [  682.861542]  sdio_bus_remove+0x31/0xd0 [mmc_core]
    [  682.861615]  device_release_driver_internal+0xf7/0x1d0
    [  682.861637]  driver_detach+0x47/0x90
    [  682.861656]  bus_remove_driver+0x77/0xd0
    [  682.861674]  rtw_drv_halt+0xc/0x678 [r8723bs]
    [  682.861782]  __x64_sys_delete_module+0x13f/0x250
    [  682.861801]  ? lockdep_hardirqs_on_prepare+0xf3/0x170
    [  682.861817]  ? syscall_enter_from_user_mode+0x20/0x70
    [  682.861836]  do_syscall_64+0x3a/0x80
    [  682.861855]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  682.861873] RIP: 0033:0x7f6dbe85400b
    [  682.861890] Code: 73 01 c3 48 8b 0d 6d 1e 0c 00 f7 d8 64 89
    01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa
    b8 b0 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 3d
    1e 0c 00 f7 d8 64 89 01 48
    [  682.861906] RSP: 002b:00007ffe7a82f538 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [  682.861923] RAX: ffffffffffffffda RBX: 000055a64693bd20 RCX: 00007f6dbe85400b
    [  682.861935] RDX: 0000000000000000 RSI: 0000000000000800 RDI: 000055a64693bd88
    [  682.861946] RBP: 000055a64693bd20 R08: 0000000000000000 R09: 0000000000000000
    [  682.861957] R10: 00007f6dbe8c7ac0 R11: 0000000000000206 R12: 000055a64693bd88
    [  682.861967] R13: 0000000000000000 R14: 000055a64693bd88 R15: 00007ffe7a831848
    
    This happens because when we enqueue a frame for
    transmission we do it under xmit_priv lock, then calling
    rtw_get_stainfo (needed for enqueuing) takes sta_hash_lock
    and this leads to the following lock dependency:
    
    xmit_priv->lock -> sta_hash_lock
    
    Turning off a connection will bring to call
    rtw_free_assoc_resources which will set up
    the inverse dependency:
    
    sta_hash_lock -> xmit_priv_lock
    
    This could lead to a deadlock as lockdep complains.
    
    Fix it by removing the xmit_priv->lock around
    rtw_xmitframe_enqueue call inside rtl8723bs_hal_xmit
    and put it in a smaller critical section inside
    rtw_xmit_classifier, the only place where
    xmit_priv data are actually accessed.
    
    Replace spin_{lock,unlock}_bh(pxmitpriv->lock)
    in other tx paths leading to rtw_xmitframe_enqueue
    call with spin_{lock,unlock}_bh(psta->sleep_q.lock)
    - it's not clear why accessing a sleep_q was protected
    by a spinlock on xmitpriv->lock.
    
    This way is avoided the same faulty lock nesting
    order.
    
    Extra changes in v2 by Hans de Goede:
    -Lift the taking of the struct __queue.lock spinlock out of
     rtw_free_xmitframe_queue() into the callers this allows also
     protecting a bunch of related state in rtw_free_stainfo():
    -Protect psta->sleepq_len on rtw_free_xmitframe_queue(&psta->sleep_q);
    -Protect struct tx_servq.tx_pending and tx_servq.qcnt when
     calling rtw_free_xmitframe_queue(&tx_servq.sta_pending)
    -This also allows moving the spin_lock_bh(&pxmitpriv->lock); to below
     the sleep_q free-ing code, avoiding another ABBA locking issue
    
    CC: Larry Finger <Larry.Finger@lwfinger.net>
    Co-developed-by: Hans de Goede <hdegoede@redhat.com>
    Tested-on: Lenovo Ideapad MiiX 300-10IBY
    Signed-off-by: Fabio Aiuto <fabioaiuto83@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210920145502.155454-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3544c338794b2e670e8e47ab1a3923f6fb3919b9
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Jun 4 00:00:04 2021 +0200

    ARM: dts: ux500: Skomer regulator fixes
    
    [ Upstream commit 7aee0288beab72cdfa35af51f62e94373fca595d ]
    
    AUX2 has slightly wrong voltage and AUX5 doesn't need to be
    always on.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eff8b7628410cb2eb562ca0d5d1f12e27063733e
Author: Sven Peter <sven@svenpeter.dev>
Date:   Tue Sep 14 16:02:35 2021 +0200

    usb: typec: tipd: Remove WARN_ON in tps6598x_block_read
    
    [ Upstream commit b7a0a63f3fed57d413bb857de164ea9c3984bc4e ]
    
    Calling tps6598x_block_read with a higher than allowed len can be
    handled by just returning an error. There's no need to crash systems
    with panic-on-warn enabled.
    
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Sven Peter <sven@svenpeter.dev>
    Link: https://lore.kernel.org/r/20210914140235.65955-3-sven@svenpeter.dev
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 679eee466d0f9ffa60a2b0c6ec19be5128927f04
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Sep 15 11:49:25 2021 +0800

    usb: musb: tusb6010: check return value after calling platform_get_resource()
    
    [ Upstream commit 14651496a3de6807a17c310f63c894ea0c5d858e ]
    
    It will cause null-ptr-deref if platform_get_resource() returns NULL,
    we need check the return value.
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20210915034925.2399823-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2492de6f5edbfb3f51cb13c6676705ac923b7041
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Sep 21 12:42:25 2021 +0300

    bus: ti-sysc: Use context lost quirk for otg
    
    [ Upstream commit 9067839ff45a528bcb015cc2f24f656126b91e3f ]
    
    Let's use SYSC_QUIRK_REINIT_ON_CTX_LOST quirk for am335x otg instead of
    SYSC_QUIRK_REINIT_ON_RESUME quirk as we can now handle the context loss
    in a more generic way.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eca1c8412f40dd798c28549cd4c032217ad2faf
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Sep 21 12:42:25 2021 +0300

    bus: ti-sysc: Add quirk handling for reinit on context lost
    
    [ Upstream commit 9d881361206ebcf6285c2ec2ef275aff80875347 ]
    
    Some interconnect target modules such as otg and gpmc on am335x need a
    re-init after resume. As we also have PM runtime cases where the context
    may be lost, let's handle these all with cpu_pm.
    
    For the am335x resume path, we already have cpu_pm_resume() call
    cpu_pm_cluster_exit().
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcd6eefceeb0e464237d27340053c6f2f15217b5
Author: Selvin Xavier <selvin.xavier@broadcom.com>
Date:   Wed Sep 15 05:32:42 2021 -0700

    RDMA/bnxt_re: Check if the vlan is valid before reporting
    
    [ Upstream commit 6bda39149d4b8920fdb8744090653aca3daa792d ]
    
    When VF is configured with default vlan, HW strips the vlan from the
    packet and driver receives it in Rx completion. VLAN needs to be reported
    for UD work completion only if the vlan is configured on the host. Add a
    check for valid vlan in the UD receive path.
    
    Link: https://lore.kernel.org/r/1631709163-2287-12-git-send-email-selvin.xavier@broadcom.com
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e5bc9fb23a7f12ca9fcee73d4ffb23267fa98ee
Author: Michael Walle <michael@walle.cc>
Date:   Mon Aug 30 18:51:13 2021 +0200

    arm64: dts: hisilicon: fix arm,sp805 compatible string
    
    [ Upstream commit 894d4f1f77d0e88f1f81af2e1e37333c1c41b631 ]
    
    According to Documentation/devicetree/bindings/watchdog/arm,sp805.yaml
    the compatible is:
      compatible = "arm,sp805", "arm,primecell";
    
    The current compatible string doesn't exist at all. Fix it.
    
    Signed-off-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Wei Xu <xuwei5@hisilicon.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 109a63bb07f08b5fc0183f4837782288b99c6305
Author: Matthias Brugger <mbrugger@suse.com>
Date:   Thu Jul 15 18:41:01 2021 +0200

    arm64: dts: rockchip: Disable CDN DP on Pinebook Pro
    
    [ Upstream commit 2513fa5c25d42f55ca5f0f0ab247af7c9fbfa3b1 ]
    
    The CDN DP needs a PHY and a extcon to work correctly. But no extcon is
    provided by the device-tree, which leads to an error:
    cdn-dp fec00000.dp: [drm:cdn_dp_probe [rockchipdrm]] *ERROR* missing extcon or phy
    cdn-dp: probe of fec00000.dp failed with error -22
    
    Disable the CDN DP to make graphic work on the Pinebook Pro.
    
    Reported-by: Guillaume Gardet <guillaume.gardet@arm.com>
    Signed-off-by: Matthias Brugger <mbrugger@suse.com>
    Link: https://lore.kernel.org/r/20210715164101.11486-1-matthias.bgg@kernel.org
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c097bd5a59162156d9c2077a2f58732ffbaa9fca
Author: James Smart <jsmart2021@gmail.com>
Date:   Fri Sep 10 16:31:46 2021 -0700

    scsi: lpfc: Fix list_add() corruption in lpfc_drain_txq()
    
    [ Upstream commit 99154581b05c8fb22607afb7c3d66c1bace6aa5d ]
    
    When parsing the txq list in lpfc_drain_txq(), the driver attempts to pass
    the requests to the adapter. If such an attempt fails, a local "fail_msg"
    string is set and a log message output.  The job is then added to a
    completions list for cancellation.
    
    Processing of any further jobs from the txq list continues, but since
    "fail_msg" remains set, jobs are added to the completions list regardless
    of whether a wqe was passed to the adapter.  If successfully added to
    txcmplq, jobs are added to both lists resulting in list corruption.
    
    Fix by clearing the fail_msg string after adding a job to the completions
    list. This stops the subsequent jobs from being added to the completions
    list unless they had an appropriate failure.
    
    Link: https://lore.kernel.org/r/20210910233159.115896-2-jsmart2021@gmail.com
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db90c507832a7afc244336ace98250e7f000b2db
Author: Matthew Hagan <mnhagan88@gmail.com>
Date:   Sun Aug 29 22:37:48 2021 +0000

    ARM: dts: NSP: Fix mpcore, mmc node names
    
    [ Upstream commit 15a563d008ef9d04df525f0c476cd7d7127bb883 ]
    
    Running dtbs_check yielded the issues with bcm-nsp.dtsi.
    
    Firstly this patch fixes the following message by appending "-bus" to
    the mpcore node name:
    mpcore@19000000: $nodename:0: 'mpcore@19000000' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Secondly mmc node name. The label name can remain as is.
    sdhci@21000: $nodename:0: 'sdhci@21000' does not match '^mmc(@.*)?$'
    
    Signed-off-by: Matthew Hagan <mnhagan88@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5010df76ab1f8bde8c8187fba243b52e8e9e684d
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Mon Sep 13 15:02:03 2021 +0200

    staging: wfx: ensure IRQ is ready before enabling it
    
    [ Upstream commit 5e57c668dc097c6c27c973504706edec53f79281 ]
    
    Since commit 5561770f80b1 ("staging: wfx: repair external IRQ for
    SDIO"), wfx_sdio_irq_subscribe() enforce the device to use IRQs.
    However, there is currently a race in this code. An IRQ may happen
    before the IRQ has been registered.
    
    The problem has observed during debug session when the device crashes
    before the IRQ set up:
    
        [ 1.546] wfx-sdio mmc0:0001:1: started firmware 3.12.2 "WF200_ASIC_WFM_(Jenkins)_FW3.12.2" (API: 3.7, keyset: C0, caps: 0x00000002)
        [ 2.559] wfx-sdio mmc0:0001:1: time out while polling control register
        [ 3.565] wfx-sdio mmc0:0001:1: chip is abnormally long to answer
        [ 6.563] wfx-sdio mmc0:0001:1: chip did not answer
        [ 6.568] wfx-sdio mmc0:0001:1: hardware request CONFIGURATION (0x09) on vif 2 returned error -110
        [ 6.577] wfx-sdio mmc0:0001:1: PDS bytes 0 to 12: chip didn't reply (corrupted file?)
        [ 6.585] Unable to handle kernel NULL pointer dereference at virtual address 00000000
        [ 6.592] pgd = c0004000
        [ 6.595] [00000000] *pgd=00000000
        [ 6.598] Internal error: Oops - BUG: 17 [#1] THUMB2
        [ 6.603] Modules linked in:
        [ 6.606] CPU: 0 PID: 23 Comm: kworker/u2:1 Not tainted 3.18.19 #78
        [ 6.612] Workqueue: kmmcd mmc_rescan
        [ 6.616] task: c176d100 ti: c0e50000 task.ti: c0e50000
        [ 6.621] PC is at wake_up_process+0xa/0x14
        [ 6.625] LR is at sdio_irq+0x61/0x250
        [ 6.629] pc : [<c001e8ae>] lr : [<c00ec5bd>] psr: 600001b3
        [ 6.629] sp : c0e51bd8 ip : c0e51cc8 fp : 00000001
        [ 6.640] r10: 00000003 r9 : 00000000 r8 : c0003c34
        [ 6.644] r7 : c0e51bd8 r6 : c0003c30 r5 : 00000001 r4 : c0e78c00
        [ 6.651] r3 : 00000000 r2 : 00000000 r1 : 00000003 r0 : 00000000
        [ 6.657] Flags: nZCv IRQs off FIQs on Mode SVC_32 ISA Thumb Segment kernel
        [ 6.664] Control: 50c53c7d Table: 11fd8059 DAC: 00000015
        [ 6.670] Process kworker/u2:1 (pid: 23, stack limit = 0xc0e501b0)
        [ 6.676] Stack: (0xc0e51bd8 to 0xc0e52000)
        [...]
        [ 6.949] [<c001e8ae>] (wake_up_process) from [<c00ec5bd>] (sdio_irq+0x61/0x250)
        [ 6.956] [<c00ec5bd>] (sdio_irq) from [<c0025099>] (handle_irq_event_percpu+0x17/0x92)
        [ 6.964] [<c0025099>] (handle_irq_event_percpu) from [<c002512f>] (handle_irq_event+0x1b/0x24)
        [ 6.973] [<c002512f>] (handle_irq_event) from [<c0026577>] (handle_level_irq+0x5d/0x76)
        [ 6.981] [<c0026577>] (handle_level_irq) from [<c0024cc3>] (generic_handle_irq+0x13/0x1c)
        [ 6.989] [<c0024cc3>] (generic_handle_irq) from [<c0024dd9>] (__handle_domain_irq+0x31/0x48)
        [ 6.997] [<c0024dd9>] (__handle_domain_irq) from [<c0008359>] (ov_handle_irq+0x31/0xe0)
        [ 7.005] [<c0008359>] (ov_handle_irq) from [<c000af5b>] (__irq_svc+0x3b/0x5c)
        [ 7.013] Exception stack(0xc0e51c68 to 0xc0e51cb0)
        [...]
        [ 7.038] [<c000af5b>] (__irq_svc) from [<c01775aa>] (wait_for_common+0x9e/0xc4)
        [ 7.045] [<c01775aa>] (wait_for_common) from [<c00e1dc3>] (mmc_wait_for_req+0x4b/0xdc)
        [ 7.053] [<c00e1dc3>] (mmc_wait_for_req) from [<c00e1e83>] (mmc_wait_for_cmd+0x2f/0x34)
        [ 7.061] [<c00e1e83>] (mmc_wait_for_cmd) from [<c00e7b2b>] (mmc_io_rw_direct_host+0x71/0xac)
        [ 7.070] [<c00e7b2b>] (mmc_io_rw_direct_host) from [<c00e8f79>] (sdio_claim_irq+0x6b/0x116)
        [ 7.078] [<c00e8f79>] (sdio_claim_irq) from [<c00d8415>] (wfx_sdio_irq_subscribe+0x19/0x94)
        [ 7.086] [<c00d8415>] (wfx_sdio_irq_subscribe) from [<c00d5229>] (wfx_probe+0x189/0x2ac)
        [ 7.095] [<c00d5229>] (wfx_probe) from [<c00d83bf>] (wfx_sdio_probe+0x8f/0xcc)
        [ 7.102] [<c00d83bf>] (wfx_sdio_probe) from [<c00e7fbb>] (sdio_bus_probe+0x5f/0xa8)
        [ 7.109] [<c00e7fbb>] (sdio_bus_probe) from [<c00be229>] (driver_probe_device+0x59/0x134)
        [ 7.118] [<c00be229>] (driver_probe_device) from [<c00bd4d7>] (bus_for_each_drv+0x3f/0x4a)
        [ 7.126] [<c00bd4d7>] (bus_for_each_drv) from [<c00be1a5>] (device_attach+0x3b/0x52)
        [ 7.134] [<c00be1a5>] (device_attach) from [<c00bdc2b>] (bus_probe_device+0x17/0x4c)
        [ 7.141] [<c00bdc2b>] (bus_probe_device) from [<c00bcd69>] (device_add+0x2c5/0x334)
        [ 7.149] [<c00bcd69>] (device_add) from [<c00e80bf>] (sdio_add_func+0x23/0x44)
        [ 7.156] [<c00e80bf>] (sdio_add_func) from [<c00e79eb>] (mmc_attach_sdio+0x187/0x1ec)
        [ 7.164] [<c00e79eb>] (mmc_attach_sdio) from [<c00e31bd>] (mmc_rescan+0x18d/0x1fc)
        [ 7.172] [<c00e31bd>] (mmc_rescan) from [<c001a14f>] (process_one_work+0xd7/0x170)
        [ 7.179] [<c001a14f>] (process_one_work) from [<c001a59b>] (worker_thread+0x103/0x1bc)
        [ 7.187] [<c001a59b>] (worker_thread) from [<c001c731>] (kthread+0x7d/0x90)
        [ 7.194] [<c001c731>] (kthread) from [<c0008ce1>] (ret_from_fork+0x11/0x30)
        [ 7.201] Code: 2103 b580 2200 af00 (681b) 46bd
        [ 7.206] ---[ end trace 3ab50aced42eedb4 ]---
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20210913130203.1903622-33-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2651d06e461f412fdcecf03c7bfb9efa32f8b94e
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Sep 1 11:18:49 2021 +0200

    arm64: dts: allwinner: a100: Fix thermal zone node name
    
    [ Upstream commit 5c34c4e46e601554bfa370b23c8ae3c3c734e9f7 ]
    
    The thermal zones one the A100 are called $device-thermal-zone.
    
    However, the thermal zone binding explicitly requires that zones are
    called *-thermal. Let's fix it.
    
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20210901091852.479202-50-maxime@cerno.tech
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa98ac472e88192ce93b4cf8e12d7e471ad310d9
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Sep 1 11:18:47 2021 +0200

    arm64: dts: allwinner: h5: Fix GPU thermal zone node name
    
    [ Upstream commit 94a0f2b0e4e0953d8adf319c44244ef7a57de32c ]
    
    The GPU thermal zone is named gpu_thermal. However, the underscore is
    an invalid character for a node name and the thermal zone binding
    explicitly requires that zones are called *-thermal. Let's fix it.
    
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20210901091852.479202-48-maxime@cerno.tech
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aed195558f941b49102facef824aacf5fcbe0bf5
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Sep 1 11:18:42 2021 +0200

    ARM: dts: sunxi: Fix OPPs node name
    
    [ Upstream commit ffbe853a3f5a37fa0a511265b21abf097ffdbe45 ]
    
    The operating-points-v2 nodes are named inconsistently, but mostly
    either opp_table0 or gpu-opp-table.  However, the underscore is an
    invalid character for a node name and the thermal zone binding
    explicitly requires that zones are called opp-table-*. Let's fix it.
    
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20210901091852.479202-43-maxime@cerno.tech
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2e10563126577ee8cceceb1258040e6c13bd3fe
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Fri Aug 6 10:58:29 2021 +0200

    arm64: zynqmp: Fix serial compatible string
    
    [ Upstream commit 812fa2f0e9d33564bd0131a69750e0d165f4c82a ]
    
    Based on commit 65a2c14d4f00 ("dt-bindings: serial: convert Cadence UART
    bindings to YAML") compatible string should look like differently that's
    why fix it to be aligned with dt binding.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Link: https://lore.kernel.org/r/89b36e0a6187cc6b05b27a035efdf79173bd4486.1628240307.git.michal.simek@xilinx.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48f154e8b94aacecaec1a190943add63e4bec221
Author: Amit Kumar Mahapatra <amit.kumar-mahapatra@xilinx.com>
Date:   Mon Jun 14 17:25:10 2021 +0200

    arm64: zynqmp: Do not duplicate flash partition label property
    
    [ Upstream commit 167721a5909f867f8c18c8e78ea58e705ad9bbd4 ]
    
    In kernel 5.4, support has been added for reading MTD devices via the nvmem
    API.
    For this the mtd devices are registered as read-only NVMEM providers under
    sysfs with the same name as the flash partition label property.
    
    So if flash partition label property of multiple flash devices are
    identical then the second mtd device fails to get registered as a NVMEM
    provider.
    
    This patch fixes the issue by having different label property for different
    flashes.
    
    Signed-off-by: Amit Kumar Mahapatra <amit.kumar-mahapatra@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/6c4b9b9232b93d9e316a63c086540fd5bf6b8687.1623684253.git.michal.simek@xilinx.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>
