commit 96afcb20f36f07683aaa342e592ea8ec76fd1fa6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat May 22 10:57:43 2021 +0200

    Linux 4.14.233
    
    Link: https://lore.kernel.org/r/20210520092120.115153432@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cc5c358029d8d32fc8123b5926836e748e51280
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 31 14:38:11 2021 -0700

    ipv6: remove extra dev_hold() for fallback tunnels
    
    commit 0d7a7b2014b1a499a0fe24c9f3063d7856b5aaaf upstream.
    
    My previous commits added a dev_hold() in tunnels ndo_init(),
    but forgot to remove it from special functions setting up fallback tunnels.
    
    Fallback tunnels do call their respective ndo_init()
    
    This leads to various reports like :
    
    unregister_netdevice: waiting for ip6gre0 to become free. Usage count = 2
    
    Fixes: 48bb5697269a ("ip6_tunnel: sit: proper dev_{hold|put} in ndo_[un]init methods")
    Fixes: 6289a98f0817 ("sit: proper dev_{hold|put} in ndo_[un]init methods")
    Fixes: 40cb881b5aaa ("ip6_vti: proper dev_{hold|put} in ndo_[un]init methods")
    Fixes: 7f700334be9a ("ip6_gre: proper dev_{hold|put} in ndo_[un]init methods")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d46f70b3ffc1d10dc1d6d089152670d3ddd03c5
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed May 12 11:08:14 2021 +0300

    xhci: Do not use GFP_KERNEL in (potentially) atomic context
    
    commit dda32c00c9a0fa103b5d54ef72c477b7aa993679 upstream.
    
    'xhci_urb_enqueue()' is passed a 'mem_flags' argument, because "URBs may be
    submitted in interrupt context" (see comment related to 'usb_submit_urb()'
    in 'drivers/usb/core/urb.c')
    
    So this flag should be used in all the calling chain.
    Up to now, 'xhci_check_maxpacket()' which is only called from
    'xhci_urb_enqueue()', uses GFP_KERNEL.
    
    Be safe and pass the mem_flags to this function as well.
    
    Fixes: ddba5cd0aeff ("xhci: Use command structures when queuing commands on the command ring")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210512080816.866037-4-mathias.nyman@linux.intel.com
    [iwamatsu: Adjust context]
    Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13908efd42cbf18b79ba60ad8398cee57d713a0c
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 29 23:45:51 2021 -0700

    ip6_tunnel: sit: proper dev_{hold|put} in ndo_[un]init methods
    
    commit 48bb5697269a7cbe5194dbb044dc38c517e34c58 upstream.
    
    Same reasons than for the previous commits :
    6289a98f0817 ("sit: proper dev_{hold|put} in ndo_[un]init methods")
    40cb881b5aaa ("ip6_vti: proper dev_{hold|put} in ndo_[un]init methods")
    7f700334be9a ("ip6_gre: proper dev_{hold|put} in ndo_[un]init methods")
    
    After adopting CONFIG_PCPU_DEV_REFCNT=n option, syzbot was able to trigger
    a warning [1]
    
    Issue here is that:
    
    - all dev_put() should be paired with a corresponding prior dev_hold().
    
    - A driver doing a dev_put() in its ndo_uninit() MUST also
      do a dev_hold() in its ndo_init(), only when ndo_init()
      is returning 0.
    
    Otherwise, register_netdevice() would call ndo_uninit()
    in its error path and release a refcount too soon.
    
    [1]
    WARNING: CPU: 1 PID: 21059 at lib/refcount.c:31 refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Modules linked in:
    CPU: 1 PID: 21059 Comm: syz-executor.4 Not tainted 5.12.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Code: 1d 6a 5a e8 09 31 ff 89 de e8 8d 1a ab fd 84 db 75 e0 e8 d4 13 ab fd 48 c7 c7 a0 e1 c1 89 c6 05 4a 5a e8 09 01 e8 2e 36 fb 04 <0f> 0b eb c4 e8 b8 13 ab fd 0f b6 1d 39 5a e8 09 31 ff 89 de e8 58
    RSP: 0018:ffffc900025aefe8 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000040000 RSI: ffffffff815c51f5 RDI: fffff520004b5def
    RBP: 0000000000000004 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff815bdf8e R11: 0000000000000000 R12: ffff888023488568
    R13: ffff8880254e9000 R14: 00000000dfd82cfd R15: ffff88802ee2d7c0
    FS:  00007f13bc590700(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f0943e74000 CR3: 0000000025273000 CR4: 00000000001506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     __refcount_dec include/linux/refcount.h:344 [inline]
     refcount_dec include/linux/refcount.h:359 [inline]
     dev_put include/linux/netdevice.h:4135 [inline]
     ip6_tnl_dev_uninit+0x370/0x3d0 net/ipv6/ip6_tunnel.c:387
     register_netdevice+0xadf/0x1500 net/core/dev.c:10308
     ip6_tnl_create2+0x1b5/0x400 net/ipv6/ip6_tunnel.c:263
     ip6_tnl_newlink+0x312/0x580 net/ipv6/ip6_tunnel.c:2052
     __rtnl_newlink+0x1062/0x1710 net/core/rtnetlink.c:3443
     rtnl_newlink+0x64/0xa0 net/core/rtnetlink.c:3491
     rtnetlink_rcv_msg+0x44e/0xad0 net/core/rtnetlink.c:5553
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2502
     netlink_unicast_kernel net/netlink/af_netlink.c:1312 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1338
     netlink_sendmsg+0x856/0xd90 net/netlink/af_netlink.c:1927
     sock_sendmsg_nosec net/socket.c:654 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:674
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2350
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2404
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2433
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fixes: 919067cc845f ("net: add CONFIG_PCPU_DEV_REFCNT")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2993c2263841902871bfbf797bed4a728edf7060
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 29 12:25:22 2021 -0700

    sit: proper dev_{hold|put} in ndo_[un]init methods
    
    commit 6289a98f0817a4a457750d6345e754838eae9439 upstream.
    
    After adopting CONFIG_PCPU_DEV_REFCNT=n option, syzbot was able to trigger
    a warning [1]
    
    Issue here is that:
    
    - all dev_put() should be paired with a corresponding prior dev_hold().
    
    - A driver doing a dev_put() in its ndo_uninit() MUST also
      do a dev_hold() in its ndo_init(), only when ndo_init()
      is returning 0.
    
    Otherwise, register_netdevice() would call ndo_uninit()
    in its error path and release a refcount too soon.
    
    Fixes: 919067cc845f ("net: add CONFIG_PCPU_DEV_REFCNT")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7d0f2440978f7d5e72b6f86af01e49f6e545690
Author: Tomas Melin <tomas.melin@vaisala.com>
Date:   Fri Oct 27 15:16:30 2017 +0300

    serial: 8250: fix potential deadlock in rs485-mode
    
    [ Upstream commit b86f86e8e7c5264bb8f5835d60f9ec840d9f5a7a ]
    
    Canceling hrtimer when holding uart spinlock can deadlock.
    
    CPU0: syscall write
              -> get uart port spinlock
                  -> write uart
                      -> start_tx_rs485
                          -> hrtimer_cancel
                              -> wait for hrtimer callback to finish
    
    CPU1: hrtimer IRQ
              -> run hrtimer
                  -> em485_handle_stop_tx
                      -> get uart port spinlock
    
    CPU0 is waiting for the hrtimer callback to finish, but the hrtimer
    callback running on CPU1 is waiting to get the uart port spinlock.
    
    This deadlock can be avoided by not canceling the hrtimers in these paths.
    Setting active_timer=NULL can be done without accessing hrtimer,
    and that will effectively cancel operations that would otherwise have been
    performed by the hrtimer callback.
    
    Signed-off-by: Tomas Melin <tomas.melin@vaisala.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7f7cf9b93bd87c6ff91d733923a5bccf35c16d9
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Thu May 6 18:03:40 2021 -0700

    lib: stackdepot: turn depot_lock spinlock to raw_spinlock
    
    [ Upstream commit 78564b9434878d686c5f88c4488b20cccbcc42bc ]
    
    In RT system, the spin_lock will be replaced by sleepable rt_mutex lock,
    in __call_rcu(), disable interrupts before calling
    kasan_record_aux_stack(), will trigger this calltrace:
    
      BUG: sleeping function called from invalid context at kernel/locking/rtmutex.c:951
      in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 19, name: pgdatinit0
      Call Trace:
        ___might_sleep.cold+0x1b2/0x1f1
        rt_spin_lock+0x3b/0xb0
        stack_depot_save+0x1b9/0x440
        kasan_save_stack+0x32/0x40
        kasan_record_aux_stack+0xa5/0xb0
        __call_rcu+0x117/0x880
        __exit_signal+0xafb/0x1180
        release_task+0x1d6/0x480
        exit_notify+0x303/0x750
        do_exit+0x678/0xcf0
        kthread+0x364/0x4f0
        ret_from_fork+0x22/0x30
    
    Replace spinlock with raw_spinlock.
    
    Link: https://lkml.kernel.org/r/20210329084009.27013-1-qiang.zhang@windriver.com
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Reported-by: Andrew Halaney <ahalaney@redhat.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Gustavo A. R. Silva <gustavoars@kernel.org>
    Cc: Vijayanand Jitta <vjitta@codeaurora.org>
    Cc: Vinayak Menon <vinmenon@codeaurora.org>
    Cc: Yogesh Lal <ylal@codeaurora.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcc9d3425466daa7d7d37f3f4ac5d1b1ce58aae1
Author: yangerkun <yangerkun@huawei.com>
Date:   Thu Apr 1 15:18:07 2021 +0800

    block: reexpand iov_iter after read/write
    
    [ Upstream commit cf7b39a0cbf6bf57aa07a008d46cf695add05b4c ]
    
    We get a bug:
    
    BUG: KASAN: slab-out-of-bounds in iov_iter_revert+0x11c/0x404
    lib/iov_iter.c:1139
    Read of size 8 at addr ffff0000d3fb11f8 by task
    
    CPU: 0 PID: 12582 Comm: syz-executor.2 Not tainted
    5.10.0-00843-g352c8610ccd2 #2
    Hardware name: linux,dummy-virt (DT)
    Call trace:
     dump_backtrace+0x0/0x2d0 arch/arm64/kernel/stacktrace.c:132
     show_stack+0x28/0x34 arch/arm64/kernel/stacktrace.c:196
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x110/0x164 lib/dump_stack.c:118
     print_address_description+0x78/0x5c8 mm/kasan/report.c:385
     __kasan_report mm/kasan/report.c:545 [inline]
     kasan_report+0x148/0x1e4 mm/kasan/report.c:562
     check_memory_region_inline mm/kasan/generic.c:183 [inline]
     __asan_load8+0xb4/0xbc mm/kasan/generic.c:252
     iov_iter_revert+0x11c/0x404 lib/iov_iter.c:1139
     io_read fs/io_uring.c:3421 [inline]
     io_issue_sqe+0x2344/0x2d64 fs/io_uring.c:5943
     __io_queue_sqe+0x19c/0x520 fs/io_uring.c:6260
     io_queue_sqe+0x2a4/0x590 fs/io_uring.c:6326
     io_submit_sqe fs/io_uring.c:6395 [inline]
     io_submit_sqes+0x4c0/0xa04 fs/io_uring.c:6624
     __do_sys_io_uring_enter fs/io_uring.c:9013 [inline]
     __se_sys_io_uring_enter fs/io_uring.c:8960 [inline]
     __arm64_sys_io_uring_enter+0x190/0x708 fs/io_uring.c:8960
     __invoke_syscall arch/arm64/kernel/syscall.c:36 [inline]
     invoke_syscall arch/arm64/kernel/syscall.c:48 [inline]
     el0_svc_common arch/arm64/kernel/syscall.c:158 [inline]
     do_el0_svc+0x120/0x290 arch/arm64/kernel/syscall.c:227
     el0_svc+0x1c/0x28 arch/arm64/kernel/entry-common.c:367
     el0_sync_handler+0x98/0x170 arch/arm64/kernel/entry-common.c:383
     el0_sync+0x140/0x180 arch/arm64/kernel/entry.S:670
    
    Allocated by task 12570:
     stack_trace_save+0x80/0xb8 kernel/stacktrace.c:121
     kasan_save_stack mm/kasan/common.c:48 [inline]
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc+0xdc/0x120 mm/kasan/common.c:461
     kasan_kmalloc+0xc/0x14 mm/kasan/common.c:475
     __kmalloc+0x23c/0x334 mm/slub.c:3970
     kmalloc include/linux/slab.h:557 [inline]
     __io_alloc_async_data+0x68/0x9c fs/io_uring.c:3210
     io_setup_async_rw fs/io_uring.c:3229 [inline]
     io_read fs/io_uring.c:3436 [inline]
     io_issue_sqe+0x2954/0x2d64 fs/io_uring.c:5943
     __io_queue_sqe+0x19c/0x520 fs/io_uring.c:6260
     io_queue_sqe+0x2a4/0x590 fs/io_uring.c:6326
     io_submit_sqe fs/io_uring.c:6395 [inline]
     io_submit_sqes+0x4c0/0xa04 fs/io_uring.c:6624
     __do_sys_io_uring_enter fs/io_uring.c:9013 [inline]
     __se_sys_io_uring_enter fs/io_uring.c:8960 [inline]
     __arm64_sys_io_uring_enter+0x190/0x708 fs/io_uring.c:8960
     __invoke_syscall arch/arm64/kernel/syscall.c:36 [inline]
     invoke_syscall arch/arm64/kernel/syscall.c:48 [inline]
     el0_svc_common arch/arm64/kernel/syscall.c:158 [inline]
     do_el0_svc+0x120/0x290 arch/arm64/kernel/syscall.c:227
     el0_svc+0x1c/0x28 arch/arm64/kernel/entry-common.c:367
     el0_sync_handler+0x98/0x170 arch/arm64/kernel/entry-common.c:383
     el0_sync+0x140/0x180 arch/arm64/kernel/entry.S:670
    
    Freed by task 12570:
     stack_trace_save+0x80/0xb8 kernel/stacktrace.c:121
     kasan_save_stack mm/kasan/common.c:48 [inline]
     kasan_set_track+0x38/0x6c mm/kasan/common.c:56
     kasan_set_free_info+0x20/0x40 mm/kasan/generic.c:355
     __kasan_slab_free+0x124/0x150 mm/kasan/common.c:422
     kasan_slab_free+0x10/0x1c mm/kasan/common.c:431
     slab_free_hook mm/slub.c:1544 [inline]
     slab_free_freelist_hook mm/slub.c:1577 [inline]
     slab_free mm/slub.c:3142 [inline]
     kfree+0x104/0x38c mm/slub.c:4124
     io_dismantle_req fs/io_uring.c:1855 [inline]
     __io_free_req+0x70/0x254 fs/io_uring.c:1867
     io_put_req_find_next fs/io_uring.c:2173 [inline]
     __io_queue_sqe+0x1fc/0x520 fs/io_uring.c:6279
     __io_req_task_submit+0x154/0x21c fs/io_uring.c:2051
     io_req_task_submit+0x2c/0x44 fs/io_uring.c:2063
     task_work_run+0xdc/0x128 kernel/task_work.c:151
     get_signal+0x6f8/0x980 kernel/signal.c:2562
     do_signal+0x108/0x3a4 arch/arm64/kernel/signal.c:658
     do_notify_resume+0xbc/0x25c arch/arm64/kernel/signal.c:722
     work_pending+0xc/0x180
    
    blkdev_read_iter can truncate iov_iter's count since the count + pos may
    exceed the size of the blkdev. This will confuse io_read that we have
    consume the iovec. And once we do the iov_iter_revert in io_read, we
    will trigger the slab-out-of-bounds. Fix it by reexpand the count with
    size has been truncated.
    
    blkdev_write_iter can trigger the problem too.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Acked-by: Pavel Begunkov <asml.silencec@gmail.com>
    Link: https://lore.kernel.org/r/20210401071807.3328235-1-yangerkun@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5e0b60ac59935ffee482681b91f0d387d1da85a
Author: Hui Wang <hui.wang@canonical.com>
Date:   Tue May 4 15:39:17 2021 +0800

    ALSA: hda: generic: change the DAC ctl name for LO+SPK or LO+HP
    
    [ Upstream commit f48652bbe3ae62ba2835a396b7e01f063e51c4cd ]
    
    Without this change, the DAC ctl's name could be changed only when
    the machine has both Speaker and Headphone, but we met some machines
    which only has Lineout and Headhpone, and the Lineout and Headphone
    share the Audio Mixer0 and DAC0, the ctl's name is set to "Front".
    
    On most of machines, the "Front" is used for Speaker only or Lineout
    only, but on this machine it is shared by Lineout and Headphone,
    This introduces an issue in the pipewire and pulseaudio, suppose users
    want the Headphone to be on and the Speaker/Lineout to be off, they
    could turn off the "Front", this works on most of the machines, but on
    this machine, the "Front" couldn't be turned off otherwise the
    headphone will be off too. Here we do some change to let the ctl's
    name change to "Headphone+LO" on this machine, and pipewire and
    pulseaudio already could handle "Headphone+LO" and "Speaker+LO".
    (https://gitlab.freedesktop.org/pipewire/pipewire/-/issues/747)
    
    BugLink: http://bugs.launchpad.net/bugs/804178
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20210504073917.22406-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eba1aac8f93d681cdc83ab9f13c528eb9535421e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 1 18:27:40 2021 +0200

    gpiolib: acpi: Add quirk to ignore EC wakeups on Dell Venue 10 Pro 5055
    
    [ Upstream commit da91ece226729c76f60708efc275ebd4716ad089 ]
    
    Like some other Bay and Cherry Trail SoC based devices the Dell Venue
    10 Pro 5055 has an embedded-controller which uses ACPI GPIO events to
    report events instead of using the standard ACPI EC interface for this.
    
    The EC interrupt is only used to report battery-level changes and
    it keeps doing this while the system is suspended, causing the system
    to not stay suspended.
    
    Add an ignore-wake quirk for the GPIO pin used by the EC to fix the
    spurious wakeups from suspend.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c652bda7651fa31b4e92351efb283327ed26a43
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Jan 21 18:05:37 2021 -0500

    ceph: fix fscache invalidation
    
    [ Upstream commit 10a7052c7868bc7bc72d947f5aac6f768928db87 ]
    
    Ensure that we invalidate the fscache whenever we invalidate the
    pagecache.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c626de2ce8f912886a38a02067b23781de0f298
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Mar 5 21:43:15 2021 +0100

    um: Mark all kernel symbols as local
    
    [ Upstream commit d5027ca63e0e778b641cf23e3f5c6d6212cf412b ]
    
    Ritesh reported a bug [1] against UML, noting that it crashed on
    startup. The backtrace shows the following (heavily redacted):
    
    (gdb) bt
    ...
     #26 0x0000000060015b5d in sem_init () at ipc/sem.c:268
     #27 0x00007f89906d92f7 in ?? () from /lib/x86_64-linux-gnu/libcom_err.so.2
     #28 0x00007f8990ab8fb2 in call_init (...) at dl-init.c:72
    ...
     #40 0x00007f89909bf3a6 in nss_load_library (...) at nsswitch.c:359
    ...
     #44 0x00007f8990895e35 in _nss_compat_getgrnam_r (...) at nss_compat/compat-grp.c:486
     #45 0x00007f8990968b85 in __getgrnam_r [...]
     #46 0x00007f89909d6b77 in grantpt [...]
     #47 0x00007f8990a9394e in __GI_openpty [...]
     #48 0x00000000604a1f65 in openpty_cb (...) at arch/um/os-Linux/sigio.c:407
     #49 0x00000000604a58d0 in start_idle_thread (...) at arch/um/os-Linux/skas/process.c:598
     #50 0x0000000060004a3d in start_uml () at arch/um/kernel/skas/process.c:45
     #51 0x00000000600047b2 in linux_main (...) at arch/um/kernel/um_arch.c:334
     #52 0x000000006000574f in main (...) at arch/um/os-Linux/main.c:144
    
    indicating that the UML function openpty_cb() calls openpty(),
    which internally calls __getgrnam_r(), which causes the nsswitch
    machinery to get started.
    
    This loads, through lots of indirection that I snipped, the
    libcom_err.so.2 library, which (in an unknown function, "??")
    calls sem_init().
    
    Now, of course it wants to get libpthread's sem_init(), since
    it's linked against libpthread. However, the dynamic linker
    looks up that symbol against the binary first, and gets the
    kernel's sem_init().
    
    Hajime Tazaki noted that "objcopy -L" can localize a symbol,
    so the dynamic linker wouldn't do the lookup this way. I tried,
    but for some reason that didn't seem to work.
    
    Doing the same thing in the linker script instead does seem to
    work, though I cannot entirely explain - it *also* works if I
    just add "VERSION { { global: *; }; }" instead, indicating that
    something else is happening that I don't really understand. It
    may be that explicitly doing that marks them with some kind of
    empty version, and that's different from the default.
    
    Explicitly marking them with a version breaks kallsyms, so that
    doesn't seem to be possible.
    
    Marking all the symbols as local seems correct, and does seem
    to address the issue, so do that. Also do it for static link,
    nsswitch libraries could still be loaded there.
    
    [1] https://bugs.debian.org/983379
    
    Reported-by: Ritesh Raj Sarraf <rrs@debian.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Acked-By: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Tested-By: Ritesh Raj Sarraf <rrs@debian.org>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b49e05338906417a70bd2689c3b8cc643e0e1bed
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Apr 9 22:29:49 2021 -0700

    Input: silead - add workaround for x86 BIOS-es which bring the chip up in a stuck state
    
    [ Upstream commit e479187748a8f151a85116a7091c599b121fdea5 ]
    
    Some buggy BIOS-es bring up the touchscreen-controller in a stuck
    state where it blocks the I2C bus. Specifically this happens on
    the Jumper EZpad 7 tablet model.
    
    After much poking at this problem I have found that the following steps
    are necessary to unstuck the chip / bus:
    
    1. Turn off the Silead chip.
    2. Try to do an I2C transfer with the chip, this will fail in response to
       which the I2C-bus-driver will call: i2c_recover_bus() which will unstuck
       the I2C-bus. Note the unstuck-ing of the I2C bus only works if we first
       drop the chip of the bus by turning it off.
    3. Turn the chip back on.
    
    On the x86/ACPI systems were this problem is seen, step 1. and 3. require
    making ACPI calls and dealing with ACPI Power Resources. This commit adds
    a workaround which runtime-suspends the chip to turn it off, leaving it up
    to the ACPI subsystem to deal with all the ACPI specific details.
    
    There is no good way to detect this bug, so the workaround gets activated
    by a new "silead,stuck-controller-bug" boolean device-property. Since this
    is only used on x86/ACPI, this will be set by model specific device-props
    set by drivers/platform/x86/touchscreen_dmi.c. Therefor this new
    device-property is not documented in the DT-bindings.
    
    Dmesg will contain the following messages on systems where the workaround
    is activated:
    
    [   54.309029] silead_ts i2c-MSSL1680:00: [Firmware Bug]: Stuck I2C bus: please ignore the next 'controller timed out' error
    [   55.373593] i2c_designware 808622C1:04: controller timed out
    [   55.582186] silead_ts i2c-MSSL1680:00: Silead chip ID: 0x80360000
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210405202745.16777-1-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4d769626d977c0e82d3438a074681adb23fd4e9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Apr 9 22:29:07 2021 -0700

    Input: elants_i2c - do not bind to i2c-hid compatible ACPI instantiated devices
    
    [ Upstream commit 65299e8bfb24774e6340e93ae49f6626598917c8 ]
    
    Several users have been reporting that elants_i2c gives several errors
    during probe and that their touchscreen does not work on their Lenovo AMD
    based laptops with a touchscreen with a ELAN0001 ACPI hardware-id:
    
    [    0.550596] elants_i2c i2c-ELAN0001:00: i2c-ELAN0001:00 supply vcc33 not found, using dummy regulator
    [    0.551836] elants_i2c i2c-ELAN0001:00: i2c-ELAN0001:00 supply vccio not found, using dummy regulator
    [    0.560932] elants_i2c i2c-ELAN0001:00: elants_i2c_send failed (77 77 77 77): -121
    [    0.562427] elants_i2c i2c-ELAN0001:00: software reset failed: -121
    [    0.595925] elants_i2c i2c-ELAN0001:00: elants_i2c_send failed (77 77 77 77): -121
    [    0.597974] elants_i2c i2c-ELAN0001:00: software reset failed: -121
    [    0.621893] elants_i2c i2c-ELAN0001:00: elants_i2c_send failed (77 77 77 77): -121
    [    0.622504] elants_i2c i2c-ELAN0001:00: software reset failed: -121
    [    0.632650] elants_i2c i2c-ELAN0001:00: elants_i2c_send failed (4d 61 69 6e): -121
    [    0.634256] elants_i2c i2c-ELAN0001:00: boot failed: -121
    [    0.699212] elants_i2c i2c-ELAN0001:00: invalid 'hello' packet: 00 00 ff ff
    [    1.630506] elants_i2c i2c-ELAN0001:00: Failed to read fw id: -121
    [    1.645508] elants_i2c i2c-ELAN0001:00: unknown packet 00 00 ff ff
    
    Despite these errors, the elants_i2c driver stays bound to the device
    (it returns 0 from its probe method despite the errors), blocking the
    i2c-hid driver from binding.
    
    Manually unbinding the elants_i2c driver and binding the i2c-hid driver
    makes the touchscreen work.
    
    Check if the ACPI-fwnode for the touchscreen contains one of the i2c-hid
    compatiblity-id strings and if it has the I2C-HID spec's DSM to get the
    HID descriptor address, If it has both then make elants_i2c not bind,
    so that the i2c-hid driver can bind.
    
    This assumes that non of the (older) elan touchscreens which actually
    need the elants_i2c driver falsely advertise an i2c-hid compatiblity-id
    + DSM in their ACPI-fwnodes. If some of them actually do have this
    false advertising, then this change may lead to regressions.
    
    While at it also drop the unnecessary DEVICE_NAME prefixing of the
    "I2C check functionality error", dev_err already outputs the driver-name.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=207759
    Acked-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210405202756.16830-1-hdegoede@redhat.com
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4b754fd346119138e22dadcf619eeff2c722c7e
Author: Feilong Lin <linfeilong@huawei.com>
Date:   Thu Mar 25 15:26:00 2021 +0800

    ACPI / hotplug / PCI: Fix reference count leak in enable_slot()
    
    [ Upstream commit 3bbfd319034ddce59e023837a4aa11439460509b ]
    
    In enable_slot(), if pci_get_slot() returns NULL, we clear the SLOT_ENABLED
    flag. When pci_get_slot() finds a device, it increments the device's
    reference count.  In this case, we did not call pci_dev_put() to decrement
    the reference count, so the memory of the device (struct pci_dev type) will
    eventually leak.
    
    Call pci_dev_put() to decrement its reference count when pci_get_slot()
    returns a PCI device.
    
    Link: https://lore.kernel.org/r/b411af88-5049-a1c6-83ac-d104a1f429be@huawei.com
    Signed-off-by: Feilong Lin <linfeilong@huawei.com>
    Signed-off-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dd5144c2e181187bfb11af540a4b9aacb62cc26
Author: louis.wang <liang26812@gmail.com>
Date:   Wed Feb 24 13:25:53 2021 +0100

    ARM: 9066/1: ftrace: pause/unpause function graph tracer in cpu_suspend()
    
    [ Upstream commit 8252ca87c7a2111502ee13994956f8c309faad7f ]
    
    Enabling function_graph tracer on ARM causes kernel panic, because the
    function graph tracer updates the "return address" of a function in order
    to insert a trace callback on function exit, it saves the function's
    original return address in a return trace stack, but cpu_suspend() may not
    return through the normal return path.
    
    cpu_suspend() will resume directly via the cpu_resume path, but the return
    trace stack has been set-up by the subfunctions of cpu_suspend(), which
    makes the "return address" inconsistent with cpu_suspend().
    
    This patch refers to Commit de818bd4522c40ea02a81b387d2fa86f989c9623
    ("arm64: kernel: pause/unpause function graph tracer in cpu_suspend()"),
    
    fixes the issue by pausing/resuming the function graph tracer on the thread
    executing cpu_suspend(), so that the function graph tracer state is kept
    consistent across functions that enter power down states and never return
    by effectively disabling graph tracer while they are executing.
    
    Signed-off-by: louis.wang <liang26812@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fd97b59ef4654aae329f26e995d12a2bd383cb3
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 8 16:24:47 2021 +0100

    PCI: thunder: Fix compile testing
    
    [ Upstream commit 16f7ae5906dfbeff54f74ec75d0563bb3a87ab0b ]
    
    Compile-testing these drivers is currently broken. Enabling it causes a
    couple of build failures though:
    
      drivers/pci/controller/pci-thunder-ecam.c:119:30: error: shift count >= width of type [-Werror,-Wshift-count-overflow]
      drivers/pci/controller/pci-thunder-pem.c:54:2: error: implicit declaration of function 'writeq' [-Werror,-Wimplicit-function-declaration]
      drivers/pci/controller/pci-thunder-pem.c:392:8: error: implicit declaration of function 'acpi_get_rc_resources' [-Werror,-Wimplicit-function-declaration]
    
    Fix them with the obvious one-line changes.
    
    Link: https://lore.kernel.org/r/20210308152501.2135937-2-arnd@kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Reviewed-by: Robert Richter <rric@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eda5c828d9ee5394ab53c30e87c1f8539fc43aa
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 22 17:44:29 2021 +0100

    isdn: capi: fix mismatched prototypes
    
    commit 5ee7d4c7fbc9d3119a20b1c77d34003d1f82ac26 upstream.
    
    gcc-11 complains about a prototype declaration that is different
    from the function definition:
    
    drivers/isdn/capi/kcapi.c:724:44: error: argument 2 of type ‘u8 *’ {aka ‘unsigned char *’} declared as a pointer [-Werror=array-parameter=]
      724 | u16 capi20_get_manufacturer(u32 contr, u8 *buf)
          |                                        ~~~~^~~
    In file included from drivers/isdn/capi/kcapi.c:13:
    drivers/isdn/capi/kcapi.h:62:43: note: previously declared as an array ‘u8[64]’ {aka ‘unsigned char[64]’}
       62 | u16 capi20_get_manufacturer(u32 contr, u8 buf[CAPI_MANUFACTURER_LEN]);
          |                                        ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
    drivers/isdn/capi/kcapi.c:790:38: error: argument 2 of type ‘u8 *’ {aka ‘unsigned char *’} declared as a pointer [-Werror=array-parameter=]
      790 | u16 capi20_get_serial(u32 contr, u8 *serial)
          |                                  ~~~~^~~~~~
    In file included from drivers/isdn/capi/kcapi.c:13:
    drivers/isdn/capi/kcapi.h:64:37: note: previously declared as an array ‘u8[8]’ {aka ‘unsigned char[8]’}
       64 | u16 capi20_get_serial(u32 contr, u8 serial[CAPI_SERIAL_LEN]);
          |                                  ~~~^~~~~~~~~~~~~~~~~~~~~~~
    
    Change the definition to make them match.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d3eaf7c2697dec22b07edcc6b0dc781d8d16b9b
Author: Kaixu Xia <kaixuxia@tencent.com>
Date:   Wed Nov 4 13:24:04 2020 +0800

    cxgb4: Fix the -Wmisleading-indentation warning
    
    commit ea8146c6845799142aa4ee2660741c215e340cdf upstream.
    
    Fix the gcc warning:
    
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c:2673:9: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
     2673 |         for (i = 0; i < n; ++i) \
    
    Reported-by: Tosk Robot <tencent_os_robot@tencent.com>
    Signed-off-by: Kaixu Xia <kaixuxia@tencent.com>
    Link: https://lore.kernel.org/r/1604467444-23043-1-git-send-email-kaixuxia@tencent.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87e3da36673a8265cb324652f27ae7ccc6e63cbe
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 22 17:42:26 2021 +0100

    usb: sl811-hcd: improve misleading indentation
    
    commit 8460f6003a1d2633737b89c4f69d6f4c0c7c65a3 upstream.
    
    gcc-11 now warns about a confusingly indented code block:
    
    drivers/usb/host/sl811-hcd.c: In function ‘sl811h_hub_control’:
    drivers/usb/host/sl811-hcd.c:1291:9: error: this ‘if’ clause does not guard... [-Werror=misleading-indentation]
     1291 |         if (*(u16*)(buf+2))     /* only if wPortChange is interesting */
          |         ^~
    drivers/usb/host/sl811-hcd.c:1295:17: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the ‘if’
     1295 |                 break;
    
    Rewrite this to use a single if() block with the __is_defined() macro.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20210322164244.827589-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa234228747cd2a8d557ae4a42b3147df72948d4
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 22 17:43:03 2021 +0100

    kgdb: fix gcc-11 warning on indentation
    
    commit 40cc3a80bb42587db1e6ae21d6f3090582d33e89 upstream.
    
    gcc-11 starts warning about misleading indentation inside of macros:
    
    drivers/misc/kgdbts.c: In function ‘kgdbts_break_test’:
    drivers/misc/kgdbts.c:103:9: error: this ‘if’ clause does not guard... [-Werror=misleading-indentation]
      103 |         if (verbose > 1) \
          |         ^~
    drivers/misc/kgdbts.c:200:9: note: in expansion of macro ‘v2printk’
      200 |         v2printk("kgdbts: breakpoint complete\n");
          |         ^~~~~~~~
    drivers/misc/kgdbts.c:105:17: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the ‘if’
      105 |                 touch_nmi_watchdog();   \
          |                 ^~~~~~~~~~~~~~~~~~
    
    The code looks correct to me, so just reindent it for readability.
    
    Fixes: e8d31c204e36 ("kgdb: add kgdb internal test suite")
    Acked-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20210322164308.827846-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf083054389fd974368eeab1d50600b4d9c794e4
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 22 17:45:36 2021 +0100

    x86/msr: Fix wr/rdmsr_safe_regs_on_cpu() prototypes
    
    commit 396a66aa1172ef2b78c21651f59b40b87b2e5e1e upstream.
    
    gcc-11 warns about mismatched prototypes here:
    
      arch/x86/lib/msr-smp.c:255:51: error: argument 2 of type ‘u32 *’ {aka ‘unsigned int *’} declared as a pointer [-Werror=array-parameter=]
        255 | int rdmsr_safe_regs_on_cpu(unsigned int cpu, u32 *regs)
            |                                              ~~~~~^~~~
      arch/x86/include/asm/msr.h:347:50: note: previously declared as an array ‘u32[8]’ {aka ‘unsigned int[8]’}
    
    GCC is right here - fix up the types.
    
    [ mingo: Twiddled the changelog. ]
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20210322164541.912261-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08250f2920c93aaa946292f122b6190337940230
Author: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
Date:   Sat Oct 24 17:43:46 2020 +0200

    clk: exynos7: Mark aclk_fsys1_200 as critical
    
    commit 34138a59b92c1a30649a18ec442d2e61f3bc34dd upstream.
    
    This clock must be always enabled to allow access to any registers in
    fsys1 CMU. Until proper solution based on runtime PM is applied
    (similar to what was done for Exynos5433), mark that clock as critical
    so it won't be disabled.
    
    It was observed on Samsung Galaxy S6 device (based on Exynos7420), where
    UFS module is probed before pmic used to power that device.
    In this case defer probe was happening and that clock was disabled by
    UFS driver, causing whole boot to hang on next CMU access.
    
    Fixes: 753195a749a6 ("clk: samsung: exynos7: Correct CMU_FSYS1 clocks names")
    Signed-off-by: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Acked-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/linux-clk/20201024154346.9589-1-pawel.mikolaj.chmiel@gmail.com
    [s.nawrocki: Added comment in the code]
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68122479c128a929f8f7bdd951cfdc8dd0e75b8f
Author: Jonathon Reinhart <jonathon.reinhart@gmail.com>
Date:   Mon Apr 12 00:24:53 2021 -0400

    netfilter: conntrack: Make global sysctls readonly in non-init netns
    
    commit 2671fa4dc0109d3fb581bc3078fdf17b5d9080f6 upstream.
    
    These sysctls point to global variables:
    - NF_SYSCTL_CT_MAX (&nf_conntrack_max)
    - NF_SYSCTL_CT_EXPECT_MAX (&nf_ct_expect_max)
    - NF_SYSCTL_CT_BUCKETS (&nf_conntrack_htable_size_user)
    
    Because their data pointers are not updated to point to per-netns
    structures, they must be marked read-only in a non-init_net ns.
    Otherwise, changes in any net namespace are reflected in (leaked into)
    all other net namespaces. This problem has existed since the
    introduction of net namespaces.
    
    The current logic marks them read-only only if the net namespace is
    owned by an unprivileged user (other than init_user_ns).
    
    Commit d0febd81ae77 ("netfilter: conntrack: re-visit sysctls in
    unprivileged namespaces") "exposes all sysctls even if the namespace is
    unpriviliged." Since we need to mark them readonly in any case, we can
    forego the unprivileged user check altogether.
    
    Fixes: d0febd81ae77 ("netfilter: conntrack: re-visit sysctls in unprivileged namespaces")
    Signed-off-by: Jonathon Reinhart <Jonathon.Reinhart@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c386907ece0825f1fbd2169e47927ca994e15bab
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Apr 5 11:48:52 2021 +0200

    kobject_uevent: remove warning in init_uevent_argv()
    
    commit b4104180a2efb85f55e1ba1407885c9421970338 upstream.
    
    syzbot can trigger the WARN() in init_uevent_argv() which isn't the
    nicest as the code does properly recover and handle the error.  So
    change the WARN() call to pr_warn() and provide some more information on
    what the buffer size that was needed.
    
    Link: https://lore.kernel.org/r/20201107082206.GA19079@kroah.com
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Reported-by: syzbot+92340f7b2b4789907fdb@syzkaller.appspotmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20210405094852.1348499-1-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a252d05d001e3d15d5b7ca51857d0f661a556eea
Author: Andrew Boyer <andrew.boyer@dell.com>
Date:   Mon May 7 13:23:38 2018 -0400

    RDMA/i40iw: Avoid panic when reading back the IRQ affinity hint
    
    commit 43731753c4b7d832775cf6b2301dd0447a5a1851 upstream.
    
    The current code sets an affinity hint with a cpumask_t stored on the
    stack. This value can then be accessed through /proc/irq/*/affinity_hint/,
    causing a segfault or returning corrupt data.
    
    Move the cpumask_t into struct i40iw_msix_vector so it is available later.
    
    Backtrace:
    BUG: unable to handle kernel paging request at ffffb16e600e7c90
    IP: irq_affinity_hint_proc_show+0x60/0xf0
    PGD 17c0c6d067
    PUD 17c0c6e067
    PMD 15d4a0e067
    PTE 0
    
    Oops: 0000 [#1] SMP
    Modules linked in: ...
    CPU: 3 PID: 172543 Comm: grep Tainted: G           OE   ... #1
    Hardware name: ...
    task: ffff9a5caee08000 task.stack: ffffb16e659d8000
    RIP: 0010:irq_affinity_hint_proc_show+0x60/0xf0
    RSP: 0018:ffffb16e659dbd20 EFLAGS: 00010086
    RAX: 0000000000000246 RBX: ffffb16e659dbd20 RCX: 0000000000000000
    RDX: ffffb16e600e7c90 RSI: 0000000000000003 RDI: 0000000000000046
    RBP: ffffb16e659dbd88 R08: 0000000000000038 R09: 0000000000000001
    R10: 0000000070803079 R11: 0000000000000000 R12: ffff9a59d1d97a00
    R13: ffff9a5da47a6cd8 R14: ffff9a5da47a6c00 R15: ffff9a59d1d97a00
    FS:  00007f946c31d740(0000) GS:ffff9a5dc1800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffb16e600e7c90 CR3: 00000016a4339000 CR4: 00000000007406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     seq_read+0x12d/0x430
     ? sched_clock_cpu+0x11/0xb0
     proc_reg_read+0x48/0x70
     __vfs_read+0x37/0x140
     ? security_file_permission+0xa0/0xc0
     vfs_read+0x96/0x140
     SyS_read+0x58/0xc0
     do_syscall_64+0x5a/0x190
     entry_SYSCALL64_slow_path+0x25/0x25
    RIP: 0033:0x7f946bbc97e0
    RSP: 002b:00007ffdd0c4ae08 EFLAGS: 00000246 ORIG_RAX: 0000000000000000
    RAX: ffffffffffffffda RBX: 000000000096b000 RCX: 00007f946bbc97e0
    RDX: 000000000096b000 RSI: 00007f946a2f0000 RDI: 0000000000000004
    RBP: 0000000000001000 R08: 00007f946a2ef011 R09: 000000000000000a
    R10: 0000000000001000 R11: 0000000000000246 R12: 00007f946a2f0000
    R13: 0000000000000004 R14: 0000000000000000 R15: 00007f946a2f0000
    Code: b9 08 00 00 00 49 89 c6 48 89 df 31 c0 4d 8d ae d8 00 00 00 f3 48 ab 4c 89 ef e8 6c 9a 56 00 49 8b 96 30 01 00 00 48 85 d2 74 3f <48> 8b 0a 48 89 4d 98 48 8b 4a 08 48 89 4d a0 48 8b 4a 10 48 89
    RIP: irq_affinity_hint_proc_show+0x60/0xf0 RSP: ffffb16e659dbd20
    CR2: ffffb16e600e7c90
    
    Fixes: 8e06af711bf2 ("i40iw: add main, hdr, status")
    Signed-off-by: Andrew Boyer <andrew.boyer@dell.com>
    Reviewed-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    CC: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 753be528d0ac055bd9a58e0b89e359b198fcea4e
Author: Lukasz Luba <lukasz.luba@arm.com>
Date:   Thu Apr 22 16:36:22 2021 +0100

    thermal/core/fair share: Lock the thermal zone while looping over instances
    
    commit fef05776eb02238dcad8d5514e666a42572c3f32 upstream.
    
    The tz->lock must be hold during the looping over the instances in that
    thermal zone. This lock was missing in the governor code since the
    beginning, so it's hard to point into a particular commit.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Lukasz Luba <lukasz.luba@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422153624.6074-2-lukasz.luba@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da72e7f8cca9b6d684f46ca11d4f622a7a82cd16
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Thu Apr 22 22:36:12 2021 +0200

    MIPS: Avoid handcoded DIVU in `__div64_32' altogether
    
    commit 25ab14cbe9d1b66fda44c71a2db7582a31b6f5cd upstream.
    
    Remove the inline asm with a DIVU instruction from `__div64_32' and use
    plain C code for the intended DIVMOD calculation instead.  GCC is smart
    enough to know that both the quotient and the remainder are calculated
    with single DIVU, so with ISAs up to R5 the same instruction is actually
    produced with overall similar code.
    
    For R6 compiled code will work, but separate DIVU and MODU instructions
    will be produced, which are also interlocked, so scalar implementations
    will likely not perform as well as older ISAs with their asynchronous MD
    unit.  Likely still faster then the generic algorithm though.
    
    This removes a compilation error for R6 however where the original DIVU
    instruction is not supported anymore and the MDU accumulator registers
    have been removed and consequently GCC complains as to a constraint it
    cannot find a register for:
    
    In file included from ./include/linux/math.h:5,
                     from ./include/linux/kernel.h:13,
                     from mm/page-writeback.c:15:
    ./include/linux/math64.h: In function 'div_u64_rem':
    ./arch/mips/include/asm/div64.h:76:17: error: inconsistent operand constraints in an 'asm'
       76 |                 __asm__("divu   $0, %z1, %z2"                           \
          |                 ^~~~~~~
    ./include/asm-generic/div64.h:245:25: note: in expansion of macro '__div64_32'
      245 |                 __rem = __div64_32(&(n), __base);       \
          |                         ^~~~~~~~~~
    ./include/linux/math64.h:91:22: note: in expansion of macro 'do_div'
       91 |         *remainder = do_div(dividend, divisor);
          |                      ^~~~~~
    
    This has passed correctness verification with test_div64 and reduced the
    module's average execution time down to 1.0404s from 1.0445s with R3400
    @40MHz.  The module's MIPS I machine code has also shrunk by 12 bytes or
    3 instructions.
    
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9a359cb0ad2c2d8661bc3d978b47fc5829f3b38
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Tue Apr 20 04:50:48 2021 +0200

    MIPS: Avoid DIVU in `__div64_32' is result would be zero
    
    commit c1d337d45ec0a802299688e17d568c4e3a585895 upstream.
    
    We already check the high part of the divident against zero to avoid the
    costly DIVU instruction in that case, needed to reduce the high part of
    the divident, so we may well check against the divisor instead and set
    the high part of the quotient to zero right away.  We need to treat the
    high part the divident in that case though as the remainder that would
    be calculated by the DIVU instruction we avoided.
    
    This has passed correctness verification with test_div64 and reduced the
    module's average execution time down to 1.0445s and 0.2619s from 1.0668s
    and 0.2629s respectively for an R3400 CPU @40MHz and a 5Kc CPU @160MHz.
    
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d03fca01acb9929326ed90b400969df089c7aa25
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Tue Apr 20 04:50:40 2021 +0200

    MIPS: Reinstate platform `__div64_32' handler
    
    commit c49f71f60754acbff37505e1d16ca796bf8a8140 upstream.
    
    Our current MIPS platform `__div64_32' handler is inactive, because it
    is incorrectly only enabled for 64-bit configurations, for which generic
    `do_div' code does not call it anyway.
    
    The handler is not suitable for being called from there though as it
    only calculates 32 bits of the quotient under the assumption the 64-bit
    divident has been suitably reduced.  Code for such reduction used to be
    there, however it has been incorrectly removed with commit c21004cd5b4c
    ("MIPS: Rewrite <asm/div64.h> to work with gcc 4.4.0."), which should
    have only updated an obsoleted constraint for an inline asm involving
    $hi and $lo register outputs, while possibly wiring the original MIPS
    variant of the `do_div' macro as `__div64_32' handler for the generic
    `do_div' implementation
    
    Correct the handler as follows then:
    
    - Revert most of the commit referred, however retaining the current
      formatting, except for the final two instructions of the inline asm
      sequence, which the original commit missed.  Omit the original 64-bit
      parts though.
    
    - Rename the original `do_div' macro to `__div64_32'.  Use the combined
      `x' constraint referring to the MD accumulator as a whole, replacing
      the original individual `h' and `l' constraints used for $hi and $lo
      registers respectively, of which `h' has been obsoleted with GCC 4.4.
      Update surrounding code accordingly.
    
      We have since removed support for GCC versions before 4.9, so no need
      for a special arrangement here; GCC has supported the `x' constraint
      since forever anyway, or at least going back to 1991.
    
    - Rename the `__base' local variable in `__div64_32' to `__radix' to
      avoid a conflict with a local variable in `do_div'.
    
    - Actually enable this code for 32-bit rather than 64-bit configurations
      by qualifying it with BITS_PER_LONG being 32 instead of 64.  Include
      <asm/bitsperlong.h> for this macro rather than <linux/types.h> as we
      don't need anything else.
    
    - Finally include <asm-generic/div64.h> last rather than first.
    
    This has passed correctness verification with test_div64 and reduced the
    module's average execution time down to 1.0668s and 0.2629s from 2.1529s
    and 0.5647s respectively for an R3400 CPU @40MHz and a 5Kc CPU @160MHz.
    For a reference 64-bit `do_div' code where we have the DDIVU instruction
    available to do the whole calculation right away averages at 0.0660s for
    the latter CPU.
    
    Fixes: c21004cd5b4c ("MIPS: Rewrite <asm/div64.h> to work with gcc 4.4.0.")
    Reported-by: Huacai Chen <chenhuacai@kernel.org>
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Cc: stable@vger.kernel.org # v2.6.30+
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0312ee3aebb50c67c7aeccf5cba42fe8c4e855d2
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Wed Mar 10 13:03:14 2021 +0100

    FDDI: defxx: Make MMIO the configuration default except for EISA
    
    commit 193ced4a79599352d63cb8c9e2f0c6043106eb6a upstream.
    
    Recent versions of the PCI Express specification have deprecated support
    for I/O transactions and actually some PCIe host bridges, such as Power
    Systems Host Bridge 4 (PHB4), do not implement them.
    
    The default kernel configuration choice for the defxx driver is the use
    of I/O ports rather than MMIO for PCI and EISA systems.  It may have
    made sense as a conservative backwards compatible choice back when MMIO
    operation support was added to the driver as a part of TURBOchannel bus
    support.  However nowadays this configuration choice makes the driver
    unusable with systems that do not implement I/O transactions for PCIe.
    
    Make DEFXX_MMIO the configuration default then, except where configured
    for EISA.  This exception is because an EISA adapter can have its MMIO
    decoding disabled with ECU (EISA Configuration Utility) and therefore
    not available with the resource allocation infrastructure we implement,
    while port I/O is always readily available as it uses slot-specific
    addressing, directly mapped to the slot an option card has been placed
    in and handled with our EISA bus support core.  Conversely a kernel that
    supports modern systems which may not have I/O transactions implemented
    for PCIe will usually not be expected to handle legacy EISA systems.
    
    The change of the default will make it easier for people, including but
    not limited to distribution packagers, to make a working choice for the
    driver.
    
    Update the option description accordingly and while at it replace the
    potentially ambiguous PIO acronym with IOP for "port I/O" vs "I/O ports"
    according to our nomenclature used elsewhere.
    
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Fixes: e89a2cfb7d7b ("[TC] defxx: TURBOchannel support")
    Cc: stable@vger.kernel.org # v2.6.21+
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65440d2bcec2d66a6b58eafd112bbddc7636c053
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    commit 594b27e677b35f9734b1969d175ebc6146741109 upstream.
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d73971dcab1ec2283ee7d5ee7fe887a75b2fd47e
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri May 7 19:30:41 2021 +0100

    iio: tsl2583: Fix division by a zero lux_val
    
    commit af0e1871d79cfbb91f732d2c6fa7558e45c31038 upstream.
    
    The lux_val returned from tsl2583_get_lux can potentially be zero,
    so check for this to avoid a division by zero and an overflowed
    gain_trim_val.
    
    Fixes clang scan-build warning:
    
    drivers/iio/light/tsl2583.c:345:40: warning: Either the
    condition 'lux_val<0' is redundant or there is division
    by zero at line 345. [zerodivcond]
    
    Fixes: ac4f6eee8fe8 ("staging: iio: TAOS tsl258x: Device driver")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cac8a7ac263642fff8cff6595b6d64c23384f07e
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Fri Apr 23 05:09:59 2021 +0300

    iio: gyro: mpu3050: Fix reported temperature value
    
    commit f73c730774d88a14d7b60feee6d0e13570f99499 upstream.
    
    The raw temperature value is a 16-bit signed integer. The sign casting
    is missing in the code, which results in a wrong temperature reported
    by userspace tools, fix it.
    
    Cc: stable@vger.kernel.org
    Fixes: 3904b28efb2c ("iio: gyro: Add driver for the MPU-3050 gyroscope")
    Datasheet: https://www.cdiweb.com/datasheets/invensense/mpu-3000a.pdf
    Tested-by: Maxim Schwalm <maxim.schwalm@gmail.com> # Asus TF700T
    Tested-by: Svyatoslav Ryhel <clamor95@gmail.com> # Asus TF201
    Reported-by: Svyatoslav Ryhel <clamor95@gmail.com>
    Reviewed-by: Andy Shevchenko <Andy.Shevchenko@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jean-Baptiste Maneyrol <jmaneyrol@invensense.com>
    Link: https://lore.kernel.org/r/20210423020959.5023-1-digetx@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d34cab87d2fb66c0efe3f1491bd5b21812b38938
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Wed May 12 10:07:38 2021 +0800

    usb: core: hub: fix race condition about TRSMRCY of resume
    
    commit 975f94c7d6c306b833628baa9aec3f79db1eb3a1 upstream.
    
    This may happen if the port becomes resume status exactly
    when usb_port_resume() gets port status, it still need provide
    a TRSMCRY time before access the device.
    
    CC: <stable@vger.kernel.org>
    Reported-by: Tianping Fang <tianping.fang@mediatek.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/20210512020738.52961-1-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83d8b688146891c6b56af59a395720b807d32915
Author: Phil Elwell <phil@raspberrypi.com>
Date:   Thu May 6 12:22:00 2021 +0100

    usb: dwc2: Fix gadget DMA unmap direction
    
    commit 75a41ce46bae6cbe7d3bb2584eb844291d642874 upstream.
    
    The dwc2 gadget support maps and unmaps DMA buffers as necessary. When
    mapping and unmapping it uses the direction of the endpoint to select
    the direction of the DMA transfer, but this fails for Control OUT
    transfers because the unmap occurs after the endpoint direction has
    been reversed for the status phase.
    
    A possible solution would be to unmap the buffer before the direction
    is changed, but a safer, less invasive fix is to remember the buffer
    direction independently of the endpoint direction.
    
    Fixes: fe0b94abcdf6 ("usb: dwc2: gadget: manage ep0 state in software")
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Phil Elwell <phil@raspberrypi.com>
    Link: https://lore.kernel.org/r/20210506112200.2893922-1-phil@raspberrypi.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c611d71c8147181282c30e3b5c984e44c8b8c3b
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Wed May 12 11:08:15 2021 +0300

    usb: xhci: Increase timeout for HC halt
    
    commit ca09b1bea63ab83f4cca3a2ae8bc4f597ec28851 upstream.
    
    On some devices (specifically the SC8180x based Surface Pro X with
    QCOM04A6) HC halt / xhci_halt() times out during boot. Manually binding
    the xhci-hcd driver at some point later does not exhibit this behavior.
    To work around this, double XHCI_MAX_HALT_USEC, which also resolves this
    issue.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210512080816.866037-5-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec9486091c2e2e8068259d3c3711046bad56f544
Author: Marcel Hamer <marcel@solidxs.se>
Date:   Tue Apr 27 14:21:18 2021 +0200

    usb: dwc3: omap: improve extcon initialization
    
    commit e17b02d4970913233d543c79c9c66e72cac05bdd upstream.
    
    When extcon is used in combination with dwc3, it is assumed that the dwc3
    registers are untouched and as such are only configured if VBUS is valid
    or ID is tied to ground.
    
    In case VBUS is not valid or ID is floating, the registers are not
    configured as such during driver initialization, causing a wrong
    default state during boot.
    
    If the registers are not in a default state, because they are for
    instance touched by a boot loader, this can cause for a kernel error.
    
    Signed-off-by: Marcel Hamer <marcel@solidxs.se>
    Link: https://lore.kernel.org/r/20210427122118.1948340-1-marcel@solidxs.se
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b948f3c2149680b38757257d37406777338b0dc
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu May 13 10:15:29 2021 -0700

    blk-mq: Swap two calls in blk_mq_exit_queue()
    
    [ Upstream commit 630ef623ed26c18a457cdc070cf24014e50129c2 ]
    
    If a tag set is shared across request queues (e.g. SCSI LUNs) then the
    block layer core keeps track of the number of active request queues in
    tags->active_queues. blk_mq_tag_busy() and blk_mq_tag_idle() update that
    atomic counter if the hctx flag BLK_MQ_F_TAG_QUEUE_SHARED is set. Make
    sure that blk_mq_exit_queue() calls blk_mq_tag_idle() before that flag is
    cleared by blk_mq_del_queue_tag_set().
    
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Hannes Reinecke <hare@suse.com>
    Fixes: 0d2602ca30e4 ("blk-mq: improve support for shared tags maps")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20210513171529.7977-1-bvanassche@acm.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ab9857dde7c3ea3faef6b128d718cf8ba98721b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat May 8 09:23:09 2021 +0200

    ACPI: scan: Fix a memory leak in an error handling path
    
    [ Upstream commit 0c8bd174f0fc131bc9dfab35cd8784f59045da87 ]
    
    If 'acpi_device_set_name()' fails, we must free
    'acpi_device_bus_id->bus_id' or there is a (potential) memory leak.
    
    Fixes: eb50aaf960e3 ("ACPI: scan: Use unique number for instance_no")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c0f96e2e1c1efebfaadf18c57c6e73291f8e69a
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu May 6 22:39:10 2021 +0200

    usb: fotg210-hcd: Fix an error message
    
    [ Upstream commit a60a34366e0d09ca002c966dd7c43a68c28b1f82 ]
    
    'retval' is known to be -ENODEV here.
    This is a hard-coded default error code which is not useful in the error
    message. Moreover, another error message is printed at the end of the
    error handling path. The corresponding error code (-ENOMEM) is more
    informative.
    
    So remove simplify the first error message.
    
    While at it, also remove the useless initialization of 'retval'.
    
    Fixes: 7d50195f6c50 ("usb: host: Faraday fotg210-hcd driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/94531bcff98e46d4f9c20183a90b7f47f699126c.1620333419.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dfb495d278c3c5a6dbc86eb570529c25be6dbb1
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Apr 12 13:32:02 2021 +0800

    iio: proximity: pulsedlight: Fix rumtime PM imbalance on error
    
    [ Upstream commit a2fa9242e89f27696515699fe0f0296bf1ac1815 ]
    
    When lidar_write_control() fails, a pairing PM usage counter
    decrement is needed to keep the counter balanced.
    
    Fixes: 4ac4e086fd8c5 ("iio: pulsedlight-lidar-lite: add runtime PM")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20210412053204.4889-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0450e7f97d3795a74f14dbc5297a7c7fd3cfd16a
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri Apr 30 12:56:56 2021 +0800

    drm/radeon/dpm: Disable sclk switching on Oland when two 4K 60Hz monitors are connected
    
    commit 227545b9a08c68778ddd89428f99c351fc9315ac upstream.
    
    Screen flickers rapidly when two 4K 60Hz monitors are in use. This issue
    doesn't happen when one monitor is 4K 60Hz (pixelclock 594MHz) and
    another one is 4K 30Hz (pixelclock 297MHz).
    
    The issue is gone after setting "power_dpm_force_performance_level" to
    "high". Following the indication, we found that the issue occurs when
    sclk is too low.
    
    So resolve the issue by disabling sclk switching when there are two
    monitors requires high pixelclock (> 297MHz).
    
    v2:
     - Only apply the fix to Oland.
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 319116227e52d49eee671f0aa278bac89b3c1b69
Author: Axel Rasmussen <axelrasmussen@google.com>
Date:   Fri May 14 17:27:19 2021 -0700

    userfaultfd: release page in error path to avoid BUG_ON
    
    commit 7ed9d238c7dbb1fdb63ad96a6184985151b0171c upstream.
    
    Consider the following sequence of events:
    
    1. Userspace issues a UFFD ioctl, which ends up calling into
       shmem_mfill_atomic_pte(). We successfully account the blocks, we
       shmem_alloc_page(), but then the copy_from_user() fails. We return
       -ENOENT. We don't release the page we allocated.
    2. Our caller detects this error code, tries the copy_from_user() after
       dropping the mmap_lock, and retries, calling back into
       shmem_mfill_atomic_pte().
    3. Meanwhile, let's say another process filled up the tmpfs being used.
    4. So shmem_mfill_atomic_pte() fails to account blocks this time, and
       immediately returns - without releasing the page.
    
    This triggers a BUG_ON in our caller, which asserts that the page
    should always be consumed, unless -ENOENT is returned.
    
    To fix this, detect if we have such a "dangling" page when accounting
    fails, and if so, release it before returning.
    
    Link: https://lkml.kernel.org/r/20210428230858.348400-1-axelrasmussen@google.com
    Fixes: cb658a453b93 ("userfaultfd: shmem: avoid leaking blocks and used blocks in UFFDIO_COPY")
    Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
    Reported-by: Hugh Dickins <hughd@google.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eafadd1001ce35bacddcc16a9cd071f12d1b87d
Author: Phillip Lougher <phillip@squashfs.org.uk>
Date:   Fri May 14 17:27:16 2021 -0700

    squashfs: fix divide error in calculate_skip()
    
    commit d6e621de1fceb3b098ebf435ef7ea91ec4838a1a upstream.
    
    Sysbot has reported a "divide error" which has been identified as being
    caused by a corrupted file_size value within the file inode.  This value
    has been corrupted to a much larger value than expected.
    
    Calculate_skip() is passed i_size_read(inode) >> msblk->block_log.  Due to
    the file_size value corruption this overflows the int argument/variable in
    that function, leading to the divide error.
    
    This patch changes the function to use u64.  This will accommodate any
    unexpectedly large values due to corruption.
    
    The value returned from calculate_skip() is clamped to be never more than
    SQUASHFS_CACHED_BLKS - 1, or 7.  So file_size corruption does not lead to
    an unexpectedly large return result here.
    
    Link: https://lkml.kernel.org/r/20210507152618.9447-1-phillip@squashfs.org.uk
    Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
    Reported-by: <syzbot+e8f781243ce16ac2f962@syzkaller.appspotmail.com>
    Reported-by: <syzbot+7b98870d4fec9447b951@syzkaller.appspotmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee4b7aab93c2631c3bb0753023c5dda592bb666b
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 6 14:49:59 2021 +1000

    powerpc/64s: Fix crashes when toggling entry flush barrier
    
    commit aec86b052df6541cc97c5fca44e5934cbea4963b upstream.
    
    The entry flush mitigation can be enabled/disabled at runtime via a
    debugfs file (entry_flush), which causes the kernel to patch itself to
    enable/disable the relevant mitigations.
    
    However depending on which mitigation we're using, it may not be safe to
    do that patching while other CPUs are active. For example the following
    crash:
    
      sleeper[15639]: segfault (11) at c000000000004c20 nip c000000000004c20 lr c000000000004c20
    
    Shows that we returned to userspace with a corrupted LR that points into
    the kernel, due to executing the partially patched call to the fallback
    entry flush (ie. we missed the LR restore).
    
    Fix it by doing the patching under stop machine. The CPUs that aren't
    doing the patching will be spinning in the core of the stop machine
    logic. That is currently sufficient for our purposes, because none of
    the patching we do is to that code or anywhere in the vicinity.
    
    Fixes: f79643787e0a ("powerpc/64s: flush L1D on kernel entry")
    Cc: stable@vger.kernel.org # v5.10+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210506044959.1298123-2-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99556710a9461165be77c123024d460f88f2f463
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 6 14:49:58 2021 +1000

    powerpc/64s: Fix crashes when toggling stf barrier
    
    commit 8ec7791bae1327b1c279c5cd6e929c3b12daaf0a upstream.
    
    The STF (store-to-load forwarding) barrier mitigation can be
    enabled/disabled at runtime via a debugfs file (stf_barrier), which
    causes the kernel to patch itself to enable/disable the relevant
    mitigations.
    
    However depending on which mitigation we're using, it may not be safe to
    do that patching while other CPUs are active. For example the following
    crash:
    
      User access of kernel address (c00000003fff5af0) - exploit attempt? (uid: 0)
      segfault (11) at c00000003fff5af0 nip 7fff8ad12198 lr 7fff8ad121f8 code 1
      code: 40820128 e93c00d0 e9290058 7c292840 40810058 38600000 4bfd9a81 e8410018
      code: 2c030006 41810154 3860ffb6 e9210098 <e94d8ff0> 7d295279 39400000 40820a3c
    
    Shows that we returned to userspace without restoring the user r13
    value, due to executing the partially patched STF exit code.
    
    Fix it by doing the patching under stop machine. The CPUs that aren't
    doing the patching will be spinning in the core of the stop machine
    logic. That is currently sufficient for our purposes, because none of
    the patching we do is to that code or anywhere in the vicinity.
    
    Fixes: a048a07d7f45 ("powerpc/64s: Add support for a store forwarding barrier at kernel entry/exit")
    Cc: stable@vger.kernel.org # v4.17+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210506044959.1298123-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3b7bb5c5a4115baaa45039ead28a41f3a9f0794
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Apr 23 12:16:25 2021 -0700

    ARC: entry: fix off-by-one error in syscall number validation
    
    commit 3433adc8bd09fc9f29b8baddf33b4ecd1ecd2cdc upstream.
    
    We have NR_syscall syscalls from [0 .. NR_syscall-1].
    However the check for invalid syscall number is "> NR_syscall" as
    opposed to >=. This off-by-one error erronesously allows "NR_syscall"
    to be treated as valid syscall causeing out-of-bounds access into
    syscall-call table ensuing a crash (holes within syscall table have a
    invalid-entry handler but this is beyond the array implementing the
    table).
    
    This problem showed up on v5.6 kernel when testing glibc 2.33 (v5.10
    kernel capable, includng faccessat2 syscall 439). The v5.6 kernel has
    NR_syscalls=439 (0 to 438). Due to the bug, 439 passed by glibc was
    not handled as -ENOSYS but processed leading to a crash.
    
    Link: https://github.com/foss-for-synopsys-dwc-arc-processors/linux/issues/48
    Reported-by: Shahab Vahedi <shahab@synopsys.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2824cafc6a93792d9ad85939c499161214d84c4b
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 6 05:53:23 2021 -0700

    netfilter: nftables: avoid overflows in nft_hash_buckets()
    
    [ Upstream commit a54754ec9891830ba548e2010c889e3c8146e449 ]
    
    Number of buckets being stored in 32bit variables, we have to
    ensure that no overflows occur in nft_hash_buckets()
    
    syzbot injected a size == 0x40000000 and reported:
    
    UBSAN: shift-out-of-bounds in ./include/linux/log2.h:57:13
    shift exponent 64 is too large for 64-bit type 'long unsigned int'
    CPU: 1 PID: 29539 Comm: syz-executor.4 Not tainted 5.12.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x141/0x1d7 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:327
     __roundup_pow_of_two include/linux/log2.h:57 [inline]
     nft_hash_buckets net/netfilter/nft_set_hash.c:411 [inline]
     nft_hash_estimate.cold+0x19/0x1e net/netfilter/nft_set_hash.c:652
     nft_select_set_ops net/netfilter/nf_tables_api.c:3586 [inline]
     nf_tables_newset+0xe62/0x3110 net/netfilter/nf_tables_api.c:4322
     nfnetlink_rcv_batch+0xa09/0x24b0 net/netfilter/nfnetlink.c:488
     nfnetlink_rcv_skb_batch net/netfilter/nfnetlink.c:612 [inline]
     nfnetlink_rcv+0x3af/0x420 net/netfilter/nfnetlink.c:630
     netlink_unicast_kernel net/netlink/af_netlink.c:1312 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1338
     netlink_sendmsg+0x856/0xd90 net/netlink/af_netlink.c:1927
     sock_sendmsg_nosec net/socket.c:654 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:674
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2350
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2404
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2433
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
    
    Fixes: 0ed6389c483d ("netfilter: nf_tables: rename set implementations")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59622d325a18829365a25a60797c252a5a4ddbd6
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Thu May 6 18:04:38 2021 -0700

    kernel: kexec_file: fix error return code of kexec_calculate_store_digests()
    
    [ Upstream commit 31d82c2c787d5cf65fedd35ebbc0c1bd95c1a679 ]
    
    When vzalloc() returns NULL to sha_regions, no error return code of
    kexec_calculate_store_digests() is assigned.  To fix this bug, ret is
    assigned with -ENOMEM in this case.
    
    Link: https://lkml.kernel.org/r/20210309083904.24321-1-baijiaju1990@gmail.com
    Fixes: a43cac0d9dc2 ("kexec: split kexec_file syscall code to kexec_file.c")
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Acked-by: Baoquan He <bhe@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 143722a05028ebb8691d349007f85656a4e90a8e
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed May 5 09:58:31 2021 -0700

    net: fix nla_strcmp to handle more then one trailing null character
    
    [ Upstream commit 2c16db6c92b0ee4aa61e88366df82169e83c3f7e ]
    
    Android userspace has been using TCA_KIND with a char[IFNAMESIZ]
    many-null-terminated buffer containing the string 'bpf'.
    
    This works on 4.19 and ceases to work on 5.10.
    
    I'm not entirely sure what fixes tag to use, but I think the issue
    was likely introduced in the below mentioned 5.4 commit.
    
    Reported-by: Nucca Chen <nuccachen@google.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jakub Kicinski <jakub.kicinski@netronome.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@mellanox.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Fixes: 62794fc4fbf5 ("net_sched: add max len check for TCA_KIND")
    Change-Id: I66dc281f165a2858fc29a44869a270a2d698a82b
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8787ade36feefbc6cab7b1ac9610d58ce3a1559b
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue May 4 18:37:45 2021 -0700

    ksm: fix potential missing rmap_item for stable_node
    
    [ Upstream commit c89a384e2551c692a9fe60d093fd7080f50afc51 ]
    
    When removing rmap_item from stable tree, STABLE_FLAG of rmap_item is
    cleared with head reserved.  So the following scenario might happen: For
    ksm page with rmap_item1:
    
    cmp_and_merge_page
      stable_node->head = &migrate_nodes;
      remove_rmap_item_from_tree, but head still equal to stable_node;
      try_to_merge_with_ksm_page failed;
      return;
    
    For the same ksm page with rmap_item2, stable node migration succeed this
    time.  The stable_node->head does not equal to migrate_nodes now.  For ksm
    page with rmap_item1 again:
    
    cmp_and_merge_page
     stable_node->head != &migrate_nodes && rmap_item->head == stable_node
     return;
    
    We would miss the rmap_item for stable_node and might result in failed
    rmap_walk_ksm().  Fix this by set rmap_item->head to NULL when rmap_item
    is removed from stable tree.
    
    Link: https://lkml.kernel.org/r/20210330140228.45635-5-linmiaohe@huawei.com
    Fixes: 4146d2d673e8 ("ksm: make !merge_across_nodes migration safe")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50f8c20c92c522bca9e374919a50fd68774fcd42
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue May 4 18:34:38 2021 -0700

    mm/hugeltb: handle the error case in hugetlb_fix_reserve_counts()
    
    [ Upstream commit da56388c4397878a65b74f7fe97760f5aa7d316b ]
    
    A rare out of memory error would prevent removal of the reserve map region
    for a page.  hugetlb_fix_reserve_counts() handles this rare case to avoid
    dangling with incorrect counts.  Unfortunately, hugepage_subpool_get_pages
    and hugetlb_acct_memory could possibly fail too.  We should correctly
    handle these cases.
    
    Link: https://lkml.kernel.org/r/20210410072348.20437-5-linmiaohe@huawei.com
    Fixes: b5cec28d36f5 ("hugetlbfs: truncate_hugepages() takes a range of pages")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Feilong Lin <linfeilong@huawei.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af5cb8bfc2bd19a3c3138e12c03e039f9037f6ec
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue May 4 18:33:46 2021 -0700

    khugepaged: fix wrong result value for trace_mm_collapse_huge_page_isolate()
    
    [ Upstream commit 74e579bf231a337ab3786d59e64bc94f45ca7b3f ]
    
    In writable and !referenced case, the result value should be
    SCAN_LACK_REFERENCED_PAGE for trace_mm_collapse_huge_page_isolate()
    instead of default 0 (SCAN_FAIL) here.
    
    Link: https://lkml.kernel.org/r/20210306032947.35921-5-linmiaohe@huawei.com
    Fixes: 7d2eba0557c1 ("mm: add tracepoint for scanning pages")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Ebru Akagunduz <ebru.akagunduz@gmail.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c710d0d96b933822a0012bd9562a8f656ee08fed
Author: Kees Cook <keescook@chromium.org>
Date:   Sun May 2 22:06:07 2021 -0700

    drm/radeon: Fix off-by-one power_state index heap overwrite
    
    [ Upstream commit 5bbf219328849e83878bddb7c226d8d42e84affc ]
    
    An out of bounds write happens when setting the default power state.
    KASAN sees this as:
    
    [drm] radeon: 512M of GTT memory ready.
    [drm] GART: num cpu pages 131072, num gpu pages 131072
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in
    radeon_atombios_parse_power_table_1_3+0x1837/0x1998 [radeon]
    Write of size 4 at addr ffff88810178d858 by task systemd-udevd/157
    
    CPU: 0 PID: 157 Comm: systemd-udevd Not tainted 5.12.0-E620 #50
    Hardware name: eMachines        eMachines E620  /Nile       , BIOS V1.03 09/30/2008
    Call Trace:
     dump_stack+0xa5/0xe6
     print_address_description.constprop.0+0x18/0x239
     kasan_report+0x170/0x1a8
     radeon_atombios_parse_power_table_1_3+0x1837/0x1998 [radeon]
     radeon_atombios_get_power_modes+0x144/0x1888 [radeon]
     radeon_pm_init+0x1019/0x1904 [radeon]
     rs690_init+0x76e/0x84a [radeon]
     radeon_device_init+0x1c1a/0x21e5 [radeon]
     radeon_driver_load_kms+0xf5/0x30b [radeon]
     drm_dev_register+0x255/0x4a0 [drm]
     radeon_pci_probe+0x246/0x2f6 [radeon]
     pci_device_probe+0x1aa/0x294
     really_probe+0x30e/0x850
     driver_probe_device+0xe6/0x135
     device_driver_attach+0xc1/0xf8
     __driver_attach+0x13f/0x146
     bus_for_each_dev+0xfa/0x146
     bus_add_driver+0x2b3/0x447
     driver_register+0x242/0x2c1
     do_one_initcall+0x149/0x2fd
     do_init_module+0x1ae/0x573
     load_module+0x4dee/0x5cca
     __do_sys_finit_module+0xf1/0x140
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Without KASAN, this will manifest later when the kernel attempts to
    allocate memory that was stomped, since it collides with the inline slab
    freelist pointer:
    
    invalid opcode: 0000 [#1] SMP NOPTI
    CPU: 0 PID: 781 Comm: openrc-run.sh Tainted: G        W 5.10.12-gentoo-E620 #2
    Hardware name: eMachines        eMachines E620  /Nile , BIOS V1.03       09/30/2008
    RIP: 0010:kfree+0x115/0x230
    Code: 89 c5 e8 75 ea ff ff 48 8b 00 0f ba e0 09 72 63 e8 1f f4 ff ff 41 89 c4 48 8b 45 00 0f ba e0 10 72 0a 48 8b 45 08 a8 01 75 02 <0f> 0b 44 89 e1 48 c7 c2 00 f0 ff ff be 06 00 00 00 48 d3 e2 48 c7
    RSP: 0018:ffffb42f40267e10 EFLAGS: 00010246
    RAX: ffffd61280ee8d88 RBX: 0000000000000004 RCX: 000000008010000d
    RDX: 4000000000000000 RSI: ffffffffba1360b0 RDI: ffffd61280ee8d80
    RBP: ffffd61280ee8d80 R08: ffffffffb91bebdf R09: 0000000000000000
    R10: ffff8fe2c1047ac8 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000100
    FS:  00007fe80eff6b68(0000) GS:ffff8fe339c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fe80eec7bc0 CR3: 0000000038012000 CR4: 00000000000006f0
    Call Trace:
     __free_fdtable+0x16/0x1f
     put_files_struct+0x81/0x9b
     do_exit+0x433/0x94d
     do_group_exit+0xa6/0xa6
     __x64_sys_exit_group+0xf/0xf
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7fe80ef64bea
    Code: Unable to access opcode bytes at RIP 0x7fe80ef64bc0.
    RSP: 002b:00007ffdb1c47528 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007fe80ef64bea
    RDX: 00007fe80ef64f60 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000
    R10: 00007fe80ee2c620 R11: 0000000000000246 R12: 00007fe80eff41e0
    R13: 00000000ffffffff R14: 0000000000000024 R15: 00007fe80edf9cd0
    Modules linked in: radeon(+) ath5k(+) snd_hda_codec_realtek ...
    
    Use a valid power_state index when initializing the "flags" and "misc"
    and "misc2" fields.
    
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=211537
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Fixes: a48b9b4edb8b ("drm/radeon/kms/pm: add asic specific callbacks for getting power state (v2)")
    Fixes: 79daedc94281 ("drm/radeon/kms: minor pm cleanups")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a64aca15c8c7eda1b5d7e2542af2aeba7b030e1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 3 04:41:20 2021 +0800

    sctp: fix a SCTP_MIB_CURRESTAB leak in sctp_sf_do_dupcook_b
    
    [ Upstream commit f282df0391267fb2b263da1cc3233aa6fb81defc ]
    
    Normally SCTP_MIB_CURRESTAB is always incremented once asoc enter into
    ESTABLISHED from the state < ESTABLISHED and decremented when the asoc
    is being deleted.
    
    However, in sctp_sf_do_dupcook_b(), the asoc's state can be changed to
    ESTABLISHED from the state >= ESTABLISHED where it shouldn't increment
    SCTP_MIB_CURRESTAB. Otherwise, one asoc may increment MIB_CURRESTAB
    multiple times but only decrement once at the end.
    
    I was able to reproduce it by using scapy to do the 4-way shakehands,
    after that I replayed the COOKIE-ECHO chunk with 'peer_vtag' field
    changed to different values, and SCTP_MIB_CURRESTAB was incremented
    multiple times and never went back to 0 even when the asoc was freed.
    
    This patch is to fix it by only incrementing SCTP_MIB_CURRESTAB when
    the state < ESTABLISHED in sctp_sf_do_dupcook_b().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e6bd9b0fd38feff1d0944a517656528803e0116
Author: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
Date:   Tue Apr 20 11:39:17 2021 +0900

    rtc: ds1307: Fix wday settings for rx8130
    
    [ Upstream commit 204756f016726a380bafe619438ed979088bd04a ]
    
    rx8130 wday specifies the bit position, not BCD.
    
    Fixes: ee0981be7704 ("rtc: ds1307: Add support for Epson RX8130CE")
    Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20210420023917.1949066-1-nobuhiro1.iwamatsu@toshiba.co.jp
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e2899986607a9f6f7bfeadb375d5a30060916e0
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Wed Mar 31 15:30:25 2021 -0400

    NFSv4.2 fix handling of sr_eof in SEEK's reply
    
    [ Upstream commit 73f5c88f521a630ea1628beb9c2d48a2e777a419 ]
    
    Currently the client ignores the value of the sr_eof of the SEEK
    operation. According to the spec, if the server didn't find the
    requested extent and reached the end of the file, the server
    would return sr_eof=true. In case the request for DATA and no
    data was found (ie in the middle of the hole), then the lseek
    expects that ENXIO would be returned.
    
    Fixes: 1c6dcbe5ceff8 ("NFS: Implement SEEK")
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40286f0852d2ecfa713438199557c706dc6a8db3
Author: Nikola Livic <nlivic@gmail.com>
Date:   Mon Mar 29 11:56:49 2021 +0300

    pNFS/flexfiles: fix incorrect size check in decode_nfs_fh()
    
    [ Upstream commit ed34695e15aba74f45247f1ee2cf7e09d449f925 ]
    
    We (adam zabrocki, alexander matrosov, alexander tereshkin, maksym
    bazalii) observed the check:
    
            if (fh->size > sizeof(struct nfs_fh))
    
    should not use the size of the nfs_fh struct which includes an extra two
    bytes from the size field.
    
    struct nfs_fh {
            unsigned short         size;
            unsigned char          data[NFS_MAXFHSIZE];
    }
    
    but should determine the size from data[NFS_MAXFHSIZE] so the memcpy
    will not write 2 bytes beyond destination.  The proposed fix is to
    compare against the NFS_MAXFHSIZE directly, as is done elsewhere in fs
    code base.
    
    Fixes: d67ae825a59d ("pnfs/flexfiles: Add the FlexFile Layout Driver")
    Signed-off-by: Nikola Livic <nlivic@gmail.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca0723209f98728ebbcb411f7e1e5590b656c722
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Mar 29 16:46:05 2021 -0400

    NFS: Deal correctly with attribute generation counter overflow
    
    [ Upstream commit 9fdbfad1777cb4638f489eeb62d85432010c0031 ]
    
    We need to use unsigned long subtraction and then convert to signed in
    order to deal correcly with C overflow rules.
    
    Fixes: f5062003465c ("NFS: Set an attribute barrier on all updates")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37db8508783d8b5f34b9037c0f30be781b4a86fd
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Mar 28 18:17:14 2021 -0400

    NFSv4.2: Always flush out writes in nfs42_proc_fallocate()
    
    [ Upstream commit 99f23783224355e7022ceea9b8d9f62c0fd01bd8 ]
    
    Whether we're allocating or delallocating space, we should flush out the
    pending writes in order to avoid races with attribute updates.
    
    Fixes: 1e564d3dbd68 ("NFSv4.2: Fix a race in nfs42_proc_deallocate()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d52e42ea6a41d9d3d0297f2d3823977cdd49f99
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sat Mar 6 05:36:24 2021 -0800

    rpmsg: qcom_glink_native: fix error return code of qcom_glink_rx_data()
    
    [ Upstream commit 26594c6bbb60c6bc87e3762a86ceece57d164c66 ]
    
    When idr_find() returns NULL to intent, no error return code of
    qcom_glink_rx_data() is assigned.
    To fix this bug, ret is assigned with -ENOENT in this case.
    
    Fixes: 64f95f87920d ("rpmsg: glink: Use the local intents when receiving data")
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Link: https://lore.kernel.org/r/20210306133624.17237-1-baijiaju1990@gmail.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed1f67465327cec4457bb988775245b199da86e6
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Thu Feb 18 03:00:05 2021 +0100

    ARM: 9064/1: hw_breakpoint: Do not directly check the event's overflow_handler hook
    
    [ Upstream commit a506bd5756290821a4314f502b4bafc2afcf5260 ]
    
    The commit 1879445dfa7b ("perf/core: Set event's default
    ::overflow_handler()") set a default event->overflow_handler in
    perf_event_alloc(), and replace the check event->overflow_handler with
    is_default_overflow_handler(), but one is missing.
    
    Currently, the bp->overflow_handler can not be NULL. As a result,
    enable_single_step() is always not invoked.
    
    Comments from Zhen Lei:
    
     https://patchwork.kernel.org/project/linux-arm-kernel/patch/20210207105934.2001-1-thunder.leizhen@huawei.com/
    
    Fixes: 1879445dfa7b ("perf/core: Set event's default ::overflow_handler()")
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Cc: Wang Nan <wangnan0@huawei.com>
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b13dfcd0ced60c23b69ae5ee52d8f317f040386f
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Mon Jan 25 02:28:26 2021 +0300

    PCI: Release OF node in pci_scan_device()'s error path
    
    [ Upstream commit c99e755a4a4c165cad6effb39faffd0f3377c02d ]
    
    In pci_scan_device(), if pci_setup_device() fails for any reason, the code
    will not release device's of_node by calling pci_release_of_node().  Fix
    that by calling the release function.
    
    Fixes: 98d9f30c820d ("pci/of: Match PCI devices to OF nodes dynamically")
    Link: https://lore.kernel.org/r/20210124232826.1879-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 769171e21c7f5c26660528a9ed03854a0703ea81
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Mar 4 09:21:18 2021 +0000

    f2fs: fix a redundant call to f2fs_balance_fs if an error occurs
    
    [ Upstream commit 28e18ee636ba28532dbe425540af06245a0bbecb ]
    
    The  uninitialized variable dn.node_changed does not get set when a
    call to f2fs_get_node_page fails.  This uninitialized value gets used
    in the call to f2fs_balance_fs() that may or not may not balances
    dirty node and dentry pages depending on the uninitialized state of
    the variable. Fix this by only calling f2fs_balance_fs if err is
    not set.
    
    Thanks to Jaegeuk Kim for suggesting an appropriate fix.
    
    Addresses-Coverity: ("Uninitialized scalar variable")
    Fixes: 2a3407607028 ("f2fs: call f2fs_balance_fs only when node was changed")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0c6d49fd8f105c04994449979b2af756db79643
Author: David Ward <david.ward@gatech.edu>
Date:   Sun Apr 18 09:46:57 2021 -0400

    ASoC: rt286: Make RT286_SET_GPIO_* readable and writable
    
    [ Upstream commit cd8499d5c03ba260e3191e90236d0e5f6b147563 ]
    
    The GPIO configuration cannot be applied if the registers are inaccessible.
    This prevented the headset mic from working on the Dell XPS 13 9343.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=114171
    Signed-off-by: David Ward <david.ward@gatech.edu>
    Link: https://lore.kernel.org/r/20210418134658.4333-5-david.ward@gatech.edu
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f26185b2f0ea7bb7d65bab8b04488b55d3dd09b
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Apr 22 22:20:54 2021 -0700

    net: ethernet: mtk_eth_soc: fix RX VLAN offload
    
    [ Upstream commit 3f57d8c40fea9b20543cab4da12f4680d2ef182c ]
    
    The VLAN ID in the rx descriptor is only valid if the RX_DMA_VTAG bit is
    set. Fixes frames wrongly marked with VLAN tags.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    [Ilya: fix commit message]
    Signed-off-by: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30dcb05bb2d4b540b08295d394a1dfbd20cbc1b7
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Mon Mar 1 17:36:53 2021 +1100

    powerpc/iommu: Annotate nested lock for lockdep
    
    [ Upstream commit cc7130bf119add37f36238343a593b71ef6ecc1e ]
    
    The IOMMU table is divided into pools for concurrent mappings and each
    pool has a separate spinlock. When taking the ownership of an IOMMU group
    to pass through a device to a VM, we lock these spinlocks which triggers
    a false negative warning in lockdep (below).
    
    This fixes it by annotating the large pool's spinlock as a nest lock
    which makes lockdep not complaining when locking nested locks if
    the nest lock is locked already.
    
    ===
    WARNING: possible recursive locking detected
    5.11.0-le_syzkaller_a+fstn1 #100 Not tainted
    --------------------------------------------
    qemu-system-ppc/4129 is trying to acquire lock:
    c0000000119bddb0 (&(p->lock)/1){....}-{2:2}, at: iommu_take_ownership+0xac/0x1e0
    
    but task is already holding lock:
    c0000000119bdd30 (&(p->lock)/1){....}-{2:2}, at: iommu_take_ownership+0xac/0x1e0
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&(p->lock)/1);
      lock(&(p->lock)/1);
    ===
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210301063653.51003-1-aik@ozlabs.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4e831cce5932110871beb44ae6abcc9ada038cd
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Wed Apr 14 18:45:15 2021 -0500

    wl3501_cs: Fix out-of-bounds warnings in wl3501_mgmt_join
    
    [ Upstream commit bb43e5718d8f1b46e7a77e7b39be3c691f293050 ]
    
    Fix the following out-of-bounds warnings by adding a new structure
    wl3501_req instead of duplicating the same members in structure
    wl3501_join_req and wl3501_scan_confirm:
    
    arch/x86/include/asm/string_32.h:182:25: warning: '__builtin_memcpy' offset [39, 108] from the object at 'sig' is out of the bounds of referenced subobject 'beacon_period' with type 'short unsigned int' at offset 36 [-Warray-bounds]
    arch/x86/include/asm/string_32.h:182:25: warning: '__builtin_memcpy' offset [25, 95] from the object at 'sig' is out of the bounds of referenced subobject 'beacon_period' with type 'short unsigned int' at offset 22 [-Warray-bounds]
    
    Refactor the code, accordingly:
    
    $ pahole -C wl3501_req drivers/net/wireless/wl3501_cs.o
    struct wl3501_req {
            u16                        beacon_period;        /*     0     2 */
            u16                        dtim_period;          /*     2     2 */
            u16                        cap_info;             /*     4     2 */
            u8                         bss_type;             /*     6     1 */
            u8                         bssid[6];             /*     7     6 */
            struct iw_mgmt_essid_pset  ssid;                 /*    13    34 */
            struct iw_mgmt_ds_pset     ds_pset;              /*    47     3 */
            struct iw_mgmt_cf_pset     cf_pset;              /*    50     8 */
            struct iw_mgmt_ibss_pset   ibss_pset;            /*    58     4 */
            struct iw_mgmt_data_rset   bss_basic_rset;       /*    62    10 */
    
            /* size: 72, cachelines: 2, members: 10 */
            /* last cacheline: 8 bytes */
    };
    
    $ pahole -C wl3501_join_req drivers/net/wireless/wl3501_cs.o
    struct wl3501_join_req {
            u16                        next_blk;             /*     0     2 */
            u8                         sig_id;               /*     2     1 */
            u8                         reserved;             /*     3     1 */
            struct iw_mgmt_data_rset   operational_rset;     /*     4    10 */
            u16                        reserved2;            /*    14     2 */
            u16                        timeout;              /*    16     2 */
            u16                        probe_delay;          /*    18     2 */
            u8                         timestamp[8];         /*    20     8 */
            u8                         local_time[8];        /*    28     8 */
            struct wl3501_req          req;                  /*    36    72 */
    
            /* size: 108, cachelines: 2, members: 10 */
            /* last cacheline: 44 bytes */
    };
    
    $ pahole -C wl3501_scan_confirm drivers/net/wireless/wl3501_cs.o
    struct wl3501_scan_confirm {
            u16                        next_blk;             /*     0     2 */
            u8                         sig_id;               /*     2     1 */
            u8                         reserved;             /*     3     1 */
            u16                        status;               /*     4     2 */
            char                       timestamp[8];         /*     6     8 */
            char                       localtime[8];         /*    14     8 */
            struct wl3501_req          req;                  /*    22    72 */
            /* --- cacheline 1 boundary (64 bytes) was 30 bytes ago --- */
            u8                         rssi;                 /*    94     1 */
    
            /* size: 96, cachelines: 2, members: 8 */
            /* padding: 1 */
            /* last cacheline: 32 bytes */
    };
    
    The problem is that the original code is trying to copy data into a
    bunch of struct members adjacent to each other in a single call to
    memcpy(). Now that a new struct wl3501_req enclosing all those adjacent
    members is introduced, memcpy() doesn't overrun the length of
    &sig.beacon_period and &this->bss_set[i].beacon_period, because the
    address of the new struct object _req_ is used as the destination,
    instead.
    
    This helps with the ongoing efforts to globally enable -Warray-bounds
    and get us closer to being able to tighten the FORTIFY_SOURCE routines
    on memcpy().
    
    Link: https://github.com/KSPP/linux/issues/109
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1fbaf516da763b50edac47d792a9145aa4482e29.1618442265.git.gustavoars@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cfd0bd6cfc1e6efd456027781d6887f696af1e2
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Wed Apr 14 18:43:19 2021 -0500

    wl3501_cs: Fix out-of-bounds warnings in wl3501_send_pkt
    
    [ Upstream commit 820aa37638a252b57967bdf4038a514b1ab85d45 ]
    
    Fix the following out-of-bounds warnings by enclosing structure members
    daddr and saddr into new struct addr, in structures wl3501_md_req and
    wl3501_md_ind:
    
    arch/x86/include/asm/string_32.h:182:25: warning: '__builtin_memcpy' offset [18, 23] from the object at 'sig' is out of the bounds of referenced subobject 'daddr' with type 'u8[6]' {aka 'unsigned char[6]'} at offset 11 [-Warray-bounds]
    arch/x86/include/asm/string_32.h:182:25: warning: '__builtin_memcpy' offset [18, 23] from the object at 'sig' is out of the bounds of referenced subobject 'daddr' with type 'u8[6]' {aka 'unsigned char[6]'} at offset 11 [-Warray-bounds]
    
    Refactor the code, accordingly:
    
    $ pahole -C wl3501_md_req drivers/net/wireless/wl3501_cs.o
    struct wl3501_md_req {
            u16                        next_blk;             /*     0     2 */
            u8                         sig_id;               /*     2     1 */
            u8                         routing;              /*     3     1 */
            u16                        data;                 /*     4     2 */
            u16                        size;                 /*     6     2 */
            u8                         pri;                  /*     8     1 */
            u8                         service_class;        /*     9     1 */
            struct {
                    u8                 daddr[6];             /*    10     6 */
                    u8                 saddr[6];             /*    16     6 */
            } addr;                                          /*    10    12 */
    
            /* size: 22, cachelines: 1, members: 8 */
            /* last cacheline: 22 bytes */
    };
    
    $ pahole -C wl3501_md_ind drivers/net/wireless/wl3501_cs.o
    struct wl3501_md_ind {
            u16                        next_blk;             /*     0     2 */
            u8                         sig_id;               /*     2     1 */
            u8                         routing;              /*     3     1 */
            u16                        data;                 /*     4     2 */
            u16                        size;                 /*     6     2 */
            u8                         reception;            /*     8     1 */
            u8                         pri;                  /*     9     1 */
            u8                         service_class;        /*    10     1 */
            struct {
                    u8                 daddr[6];             /*    11     6 */
                    u8                 saddr[6];             /*    17     6 */
            } addr;                                          /*    11    12 */
    
            /* size: 24, cachelines: 1, members: 9 */
            /* padding: 1 */
            /* last cacheline: 24 bytes */
    };
    
    The problem is that the original code is trying to copy data into a
    couple of arrays adjacent to each other in a single call to memcpy().
    Now that a new struct _addr_ enclosing those two adjacent arrays
    is introduced, memcpy() doesn't overrun the length of &sig.daddr[0]
    and &sig.daddr, because the address of the new struct object _addr_
    is used, instead.
    
    This helps with the ongoing efforts to globally enable -Warray-bounds
    and get us closer to being able to tighten the FORTIFY_SOURCE routines
    on memcpy().
    
    Link: https://github.com/KSPP/linux/issues/109
    Reported-by: kernel test robot <lkp@intel.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/d260fe56aed7112bff2be5b4d152d03ad7b78e78.1618442265.git.gustavoars@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d99870c70e1ee14b9b4fbeedc19c98ef0c014d61
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sun Apr 18 23:54:13 2021 +1000

    powerpc/pseries: Stop calling printk in rtas_stop_self()
    
    [ Upstream commit ed8029d7b472369a010a1901358567ca3b6dbb0d ]
    
    RCU complains about us calling printk() from an offline CPU:
    
      =============================
      WARNING: suspicious RCU usage
      5.12.0-rc7-02874-g7cf90e481cb8 #1 Not tainted
      -----------------------------
      kernel/locking/lockdep.c:3568 RCU-list traversed in non-reader section!!
    
      other info that might help us debug this:
    
      RCU used illegally from offline CPU!
      rcu_scheduler_active = 2, debug_locks = 1
      no locks held by swapper/0/0.
    
      stack backtrace:
      CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.12.0-rc7-02874-g7cf90e481cb8 #1
      Call Trace:
        dump_stack+0xec/0x144 (unreliable)
        lockdep_rcu_suspicious+0x124/0x144
        __lock_acquire+0x1098/0x28b0
        lock_acquire+0x128/0x600
        _raw_spin_lock_irqsave+0x6c/0xc0
        down_trylock+0x2c/0x70
        __down_trylock_console_sem+0x60/0x140
        vprintk_emit+0x1a8/0x4b0
        vprintk_func+0xcc/0x200
        printk+0x40/0x54
        pseries_cpu_offline_self+0xc0/0x120
        arch_cpu_idle_dead+0x54/0x70
        do_idle+0x174/0x4a0
        cpu_startup_entry+0x38/0x40
        rest_init+0x268/0x388
        start_kernel+0x748/0x790
        start_here_common+0x1c/0x614
    
    Which happens because by the time we get to rtas_stop_self() we are
    already offline. In addition the message can be spammy, and is not that
    helpful for users, so remove it.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210418135413.1204031-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d81ed79e8fb0fe3955b1117a644d6b78e900932
Author: Yaqi Chen <chendotjs@gmail.com>
Date:   Fri Apr 16 23:48:03 2021 +0800

    samples/bpf: Fix broken tracex1 due to kprobe argument change
    
    [ Upstream commit 137733d08f4ab14a354dacaa9a8fc35217747605 ]
    
    >From commit c0bbbdc32feb ("__netif_receive_skb_core: pass skb by
    reference"), the first argument passed into __netif_receive_skb_core
    has changed to reference of a skb pointer.
    
    This commit fixes by using bpf_probe_read_kernel.
    
    Signed-off-by: Yaqi Chen <chendotjs@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20210416154803.37157-1-chendotjs@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7791fefad524d432239d312652b0fd8ec7500cf6
Author: David Ward <david.ward@gatech.edu>
Date:   Sun Apr 18 09:46:58 2021 -0400

    ASoC: rt286: Generalize support for ALC3263 codec
    
    [ Upstream commit aa2f9c12821e6a4ba1df4fb34a3dbc6a2a1ee7fe ]
    
    The ALC3263 codec on the XPS 13 9343 is also found on the Latitude 13 7350
    and Venue 11 Pro 7140. They require the same handling for the combo jack to
    work with a headset: GPIO pin 6 must be set.
    
    The HDA driver always sets this pin on the ALC3263, which it distinguishes
    by the codec vendor/device ID 0x10ec0288 and PCI subsystem vendor ID 0x1028
    (Dell). The ASoC driver does not use PCI, so adapt this check to use DMI to
    determine if Dell is the system vendor.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=150601
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205961
    Signed-off-by: David Ward <david.ward@gatech.edu>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210418134658.4333-6-david.ward@gatech.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d57b9bc42b2bac1013085af7e78e00b86b5fe5c5
Author: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Date:   Thu Apr 1 21:12:00 2021 +0530

    powerpc/smp: Set numa node before updating mask
    
    [ Upstream commit 6980d13f0dd189846887bbbfa43793d9a41768d3 ]
    
    Geethika reported a trace when doing a dlpar CPU add.
    
    ------------[ cut here ]------------
    WARNING: CPU: 152 PID: 1134 at kernel/sched/topology.c:2057
    CPU: 152 PID: 1134 Comm: kworker/152:1 Not tainted 5.12.0-rc5-master #5
    Workqueue: events cpuset_hotplug_workfn
    NIP:  c0000000001cfc14 LR: c0000000001cfc10 CTR: c0000000007e3420
    REGS: c0000034a08eb260 TRAP: 0700   Not tainted  (5.12.0-rc5-master+)
    MSR:  8000000000029033 <SF,EE,ME,IR,DR,RI,LE>  CR: 28828422  XER: 00000020
    CFAR: c0000000001fd888 IRQMASK: 0 #012GPR00: c0000000001cfc10
    c0000034a08eb500 c000000001f35400 0000000000000027 #012GPR04:
    c0000035abaa8010 c0000035abb30a00 0000000000000027 c0000035abaa8018
    #012GPR08: 0000000000000023 c0000035abaaef48 00000035aa540000
    c0000035a49dffe8 #012GPR12: 0000000028828424 c0000035bf1a1c80
    0000000000000497 0000000000000004 #012GPR16: c00000000347a258
    0000000000000140 c00000000203d468 c000000001a1a490 #012GPR20:
    c000000001f9c160 c0000034adf70920 c0000034aec9fd20 0000000100087bd3
    #012GPR24: 0000000100087bd3 c0000035b3de09f8 0000000000000030
    c0000035b3de09f8 #012GPR28: 0000000000000028 c00000000347a280
    c0000034aefe0b00 c0000000010a2a68
    NIP [c0000000001cfc14] build_sched_domains+0x6a4/0x1500
    LR [c0000000001cfc10] build_sched_domains+0x6a0/0x1500
    Call Trace:
    [c0000034a08eb500] [c0000000001cfc10] build_sched_domains+0x6a0/0x1500 (unreliable)
    [c0000034a08eb640] [c0000000001d1e6c] partition_sched_domains_locked+0x3ec/0x530
    [c0000034a08eb6e0] [c0000000002936d4] rebuild_sched_domains_locked+0x524/0xbf0
    [c0000034a08eb7e0] [c000000000296bb0] rebuild_sched_domains+0x40/0x70
    [c0000034a08eb810] [c000000000296e74] cpuset_hotplug_workfn+0x294/0xe20
    [c0000034a08ebc30] [c000000000178dd0] process_one_work+0x300/0x670
    [c0000034a08ebd10] [c0000000001791b8] worker_thread+0x78/0x520
    [c0000034a08ebda0] [c000000000185090] kthread+0x1a0/0x1b0
    [c0000034a08ebe10] [c00000000000ccec] ret_from_kernel_thread+0x5c/0x70
    Instruction dump:
    7d2903a6 4e800421 e8410018 7f67db78 7fe6fb78 7f45d378 7f84e378 7c681b78
    3c62ff1a 3863c6f8 4802dc35 60000000 <0fe00000> 3920fff4 f9210070 e86100a0
    ---[ end trace 532d9066d3d4d7ec ]---
    
    Some of the per-CPU masks use cpu_cpu_mask as a filter to limit the search
    for related CPUs. On a dlpar add of a CPU, update cpu_cpu_mask before
    updating the per-CPU masks. This will ensure the cpu_cpu_mask is updated
    correctly before its used in setting the masks. Setting the numa_node will
    ensure that when cpu_cpu_mask() gets called, the correct node number is
    used. This code movement helped fix the above call trace.
    
    Reported-by: Geetika Moolchandani <Geetika.Moolchandani1@ibm.com>
    Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Reviewed-by: Nathan Lynch <nathanl@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210401154200.150077-1-srikar@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8989e893a1176f161ffd251cd6052c5ae7e35593
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Fri Apr 16 14:12:36 2021 -0500

    sctp: Fix out-of-bounds warning in sctp_process_asconf_param()
    
    [ Upstream commit e5272ad4aab347dde5610c0aedb786219e3ff793 ]
    
    Fix the following out-of-bounds warning:
    
    net/sctp/sm_make_chunk.c:3150:4: warning: 'memcpy' offset [17, 28] from the object at 'addr' is out of the bounds of referenced subobject 'v4' with type 'struct sockaddr_in' at offset 0 [-Warray-bounds]
    
    This helps with the ongoing efforts to globally enable -Warray-bounds
    and get us closer to being able to tighten the FORTIFY_SOURCE routines
    on memcpy().
    
    Link: https://github.com/KSPP/linux/issues/109
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df75b629058f9a2d5b0037154e738d47ba7c1cb9
Author: Mihai Moldovan <ionic@ionic.de>
Date:   Thu Apr 15 09:28:03 2021 +0200

    kconfig: nconf: stop endless search loops
    
    [ Upstream commit 8c94b430b9f6213dec84e309bb480a71778c4213 ]
    
    If the user selects the very first entry in a page and performs a
    search-up operation, or selects the very last entry in a page and
    performs a search-down operation that will not succeed (e.g., via
    [/]asdfzzz[Up Arrow]), nconf will never terminate searching the page.
    
    The reason is that in this case, the starting point will be set to -1
    or n, which is then translated into (n - 1) (i.e., the last entry of
    the page) or 0 (i.e., the first entry of the page) and finally the
    search begins. This continues to work fine until the index reaches 0 or
    (n - 1), at which point it will be decremented to -1 or incremented to
    n, but not checked against the starting point right away. Instead, it's
    wrapped around to the bottom or top again, after which the starting
    point check occurs... and naturally fails.
    
    My original implementation added another check for -1 before wrapping
    the running index variable around, but Masahiro Yamada pointed out that
    the actual issue is that the comparison point (starting point) exceeds
    bounds (i.e., the [0,n-1] interval) in the first place and that,
    instead, the starting point should be fixed.
    
    This has the welcome side-effect of also fixing the case where the
    starting point was n while searching down, which also lead to an
    infinite loop.
    
    OTOH, this code is now essentially all his work.
    
    Amazingly, nobody seems to have been hit by this for 11 years - or at
    the very least nobody bothered to debug and fix this.
    
    Signed-off-by: Mihai Moldovan <ionic@ionic.de>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 841bba6537088c7b5b9a073068ed49e8ef793371
Author: Yonghong Song <yhs@fb.com>
Date:   Tue Apr 13 08:34:13 2021 -0700

    selftests: Set CC to clang in lib.mk if LLVM is set
    
    [ Upstream commit 26e6dd1072763cd5696b75994c03982dde952ad9 ]
    
    selftests/bpf/Makefile includes lib.mk. With the following command
      make -j60 LLVM=1 LLVM_IAS=1  <=== compile kernel
      make -j60 -C tools/testing/selftests/bpf LLVM=1 LLVM_IAS=1 V=1
    some files are still compiled with gcc. This patch
    fixed lib.mk issue which sets CC to gcc in all cases.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20210413153413.3027426-1-yhs@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c085fcecebb325c78de579b64bcc934431864625
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Apr 14 10:40:58 2021 +0200

    cuse: prevent clone
    
    [ Upstream commit 8217673d07256b22881127bf50dce874d0e51653 ]
    
    For cloned connections cuse_channel_release() will be called more than
    once, resulting in use after free.
    
    Prevent device cloning for CUSE, which does not make sense at this point,
    and highly unlikely to be used in real life.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0fffdb88445631279beed1dd34d6d610a9bd00d
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu Apr 8 21:50:29 2021 +0200

    pinctrl: samsung: use 'int' for register masks in Exynos
    
    [ Upstream commit fa0c10a5f3a49130dd11281aa27e7e1c8654abc7 ]
    
    The Special Function Registers on all Exynos SoC, including ARM64, are
    32-bit wide, so entire driver uses matching functions like readl() or
    writel().  On 64-bit ARM using unsigned long for register masks:
    1. makes little sense as immediately after bitwise operation it will be
       cast to 32-bit value when calling writel(),
    2. is actually error-prone because it might promote other operands to
       64-bit.
    
    Addresses-Coverity: Unintentional integer overflow
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Link: https://lore.kernel.org/r/20210408195029.69974-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88389dcbfe3f7f7f24a209d9d4625b78a094a59a
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Thu Apr 8 14:31:25 2021 +0200

    mac80211: clear the beacon's CRC after channel switch
    
    [ Upstream commit d6843d1ee283137723b4a8c76244607ce6db1951 ]
    
    After channel switch, we should consider any beacon with a
    CSA IE as a new switch. If the CSA IE is a leftover from
    before the switch that the AP forgot to remove, we'll get
    a CSA-to-Self.
    
    This caused issues in iwlwifi where the firmware saw a beacon
    with a CSA-to-Self with mode = 1 on the new channel after a
    switch. The firmware considered this a new switch and closed
    its queues. Since the beacon didn't change between before and
    after the switch, we wouldn't handle it (the CRC is the same)
    and we wouldn't let the firmware open its queues again or
    disconnect if the CSA IE stays for too long.
    
    Clear the CRC valid state after we switch to make sure that
    we handle the beacon and handle the CSA IE as required.
    
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Link: https://lore.kernel.org/r/20210408143124.b9e68aa98304.I465afb55ca2c7d59f7bf610c6046a1fd732b4c28@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8acefb29558efe30e5330f265047bd874914d99b
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 29 12:12:54 2021 -0700

    ip6_vti: proper dev_{hold|put} in ndo_[un]init methods
    
    [ Upstream commit 40cb881b5aaa0b69a7d93dec8440d5c62dae299f ]
    
    After adopting CONFIG_PCPU_DEV_REFCNT=n option, syzbot was able to trigger
    a warning [1]
    
    Issue here is that:
    
    - all dev_put() should be paired with a corresponding prior dev_hold().
    
    - A driver doing a dev_put() in its ndo_uninit() MUST also
      do a dev_hold() in its ndo_init(), only when ndo_init()
      is returning 0.
    
    Otherwise, register_netdevice() would call ndo_uninit()
    in its error path and release a refcount too soon.
    
    Therefore, we need to move dev_hold() call from
    vti6_tnl_create2() to vti6_dev_init_gen()
    
    [1]
    WARNING: CPU: 0 PID: 15951 at lib/refcount.c:31 refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Modules linked in:
    CPU: 0 PID: 15951 Comm: syz-executor.3 Not tainted 5.12.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Code: 1d 6a 5a e8 09 31 ff 89 de e8 8d 1a ab fd 84 db 75 e0 e8 d4 13 ab fd 48 c7 c7 a0 e1 c1 89 c6 05 4a 5a e8 09 01 e8 2e 36 fb 04 <0f> 0b eb c4 e8 b8 13 ab fd 0f b6 1d 39 5a e8 09 31 ff 89 de e8 58
    RSP: 0018:ffffc90001eaef28 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000040000 RSI: ffffffff815c51f5 RDI: fffff520003d5dd7
    RBP: 0000000000000004 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff815bdf8e R11: 0000000000000000 R12: ffff88801bb1c568
    R13: ffff88801f69e800 R14: 00000000ffffffff R15: ffff888050889d40
    FS:  00007fc79314e700(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f1c1ff47108 CR3: 0000000020fd5000 CR4: 00000000001506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     __refcount_dec include/linux/refcount.h:344 [inline]
     refcount_dec include/linux/refcount.h:359 [inline]
     dev_put include/linux/netdevice.h:4135 [inline]
     vti6_dev_uninit+0x31a/0x360 net/ipv6/ip6_vti.c:297
     register_netdevice+0xadf/0x1500 net/core/dev.c:10308
     vti6_tnl_create2+0x1b5/0x400 net/ipv6/ip6_vti.c:190
     vti6_newlink+0x9d/0xd0 net/ipv6/ip6_vti.c:1020
     __rtnl_newlink+0x1062/0x1710 net/core/rtnetlink.c:3443
     rtnl_newlink+0x64/0xa0 net/core/rtnetlink.c:3491
     rtnetlink_rcv_msg+0x44e/0xad0 net/core/rtnetlink.c:5553
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2502
     netlink_unicast_kernel net/netlink/af_netlink.c:1312 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1338
     netlink_sendmsg+0x856/0xd90 net/netlink/af_netlink.c:1927
     sock_sendmsg_nosec net/socket.c:654 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:674
     ____sys_sendmsg+0x331/0x810 net/socket.c:2350
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2404
     __sys_sendmmsg+0x195/0x470 net/socket.c:2490
     __do_sys_sendmmsg net/socket.c:2519 [inline]
     __se_sys_sendmmsg net/socket.c:2516 [inline]
     __x64_sys_sendmmsg+0x99/0x100 net/socket.c:2516
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed4e9b483d4c4ff60ca005c011bd9c60e766abad
Author: Archie Pusaka <apusaka@chromium.org>
Date:   Tue Mar 23 16:32:20 2021 +0800

    Bluetooth: check for zapped sk before connecting
    
    [ Upstream commit 3af70b39fa2d415dc86c370e5b24ddb9fdacbd6f ]
    
    There is a possibility of receiving a zapped sock on
    l2cap_sock_connect(). This could lead to interesting crashes, one
    such case is tearing down an already tore l2cap_sock as is happened
    with this call trace:
    
    __dump_stack lib/dump_stack.c:15 [inline]
    dump_stack+0xc4/0x118 lib/dump_stack.c:56
    register_lock_class kernel/locking/lockdep.c:792 [inline]
    register_lock_class+0x239/0x6f6 kernel/locking/lockdep.c:742
    __lock_acquire+0x209/0x1e27 kernel/locking/lockdep.c:3105
    lock_acquire+0x29c/0x2fb kernel/locking/lockdep.c:3599
    __raw_spin_lock_bh include/linux/spinlock_api_smp.h:137 [inline]
    _raw_spin_lock_bh+0x38/0x47 kernel/locking/spinlock.c:175
    spin_lock_bh include/linux/spinlock.h:307 [inline]
    lock_sock_nested+0x44/0xfa net/core/sock.c:2518
    l2cap_sock_teardown_cb+0x88/0x2fb net/bluetooth/l2cap_sock.c:1345
    l2cap_chan_del+0xa3/0x383 net/bluetooth/l2cap_core.c:598
    l2cap_chan_close+0x537/0x5dd net/bluetooth/l2cap_core.c:756
    l2cap_chan_timeout+0x104/0x17e net/bluetooth/l2cap_core.c:429
    process_one_work+0x7e3/0xcb0 kernel/workqueue.c:2064
    worker_thread+0x5a5/0x773 kernel/workqueue.c:2196
    kthread+0x291/0x2a6 kernel/kthread.c:211
    ret_from_fork+0x4e/0x80 arch/x86/entry/entry_64.S:604
    
    Signed-off-by: Archie Pusaka <apusaka@chromium.org>
    Reported-by: syzbot+abfc0f5e668d4099af73@syzkaller.appspotmail.com
    Reviewed-by: Alain Michaud <alainm@chromium.org>
    Reviewed-by: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33574540bad96bec613b2a27e6fdb6e6ced0b040
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Mar 22 07:52:07 2021 +0900

    Bluetooth: initialize skb_queue_head at l2cap_chan_create()
    
    [ Upstream commit be8597239379f0f53c9710dd6ab551bbf535bec6 ]
    
    syzbot is hitting "INFO: trying to register non-static key." message [1],
    for "struct l2cap_chan"->tx_q.lock spinlock is not yet initialized when
    l2cap_chan_del() is called due to e.g. timeout.
    
    Since "struct l2cap_chan"->lock mutex is initialized at l2cap_chan_create()
    immediately after "struct l2cap_chan" is allocated using kzalloc(), let's
    as well initialize "struct l2cap_chan"->{tx_q,srej_q}.lock spinlocks there.
    
    [1] https://syzkaller.appspot.com/bug?extid=fadfba6a911f6bf71842
    
    Reported-and-tested-by: syzbot <syzbot+fadfba6a911f6bf71842@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 942732da3f51977107d575239b6fde4117e4f1fd
Author: Archie Pusaka <apusaka@chromium.org>
Date:   Mon Mar 22 14:02:15 2021 +0800

    Bluetooth: Set CONF_NOT_COMPLETE as l2cap_chan default
    
    [ Upstream commit 3a9d54b1947ecea8eea9a902c0b7eb58a98add8a ]
    
    Currently l2cap_chan_set_defaults() reset chan->conf_state to zero.
    However, there is a flag CONF_NOT_COMPLETE which is set when
    creating the l2cap_chan. It is suggested that the flag should be
    cleared when l2cap_chan is ready, but when l2cap_chan_set_defaults()
    is called, l2cap_chan is not yet ready. Therefore, we must set this
    flag as the default.
    
    Example crash call trace:
    __dump_stack lib/dump_stack.c:15 [inline]
    dump_stack+0xc4/0x118 lib/dump_stack.c:56
    panic+0x1c6/0x38b kernel/panic.c:117
    __warn+0x170/0x1b9 kernel/panic.c:471
    warn_slowpath_fmt+0xc7/0xf8 kernel/panic.c:494
    debug_print_object+0x175/0x193 lib/debugobjects.c:260
    debug_object_assert_init+0x171/0x1bf lib/debugobjects.c:614
    debug_timer_assert_init kernel/time/timer.c:629 [inline]
    debug_assert_init kernel/time/timer.c:677 [inline]
    del_timer+0x7c/0x179 kernel/time/timer.c:1034
    try_to_grab_pending+0x81/0x2e5 kernel/workqueue.c:1230
    cancel_delayed_work+0x7c/0x1c4 kernel/workqueue.c:2929
    l2cap_clear_timer+0x1e/0x41 include/net/bluetooth/l2cap.h:834
    l2cap_chan_del+0x2d8/0x37e net/bluetooth/l2cap_core.c:640
    l2cap_chan_close+0x532/0x5d8 net/bluetooth/l2cap_core.c:756
    l2cap_sock_shutdown+0x806/0x969 net/bluetooth/l2cap_sock.c:1174
    l2cap_sock_release+0x64/0x14d net/bluetooth/l2cap_sock.c:1217
    __sock_release+0xda/0x217 net/socket.c:580
    sock_close+0x1b/0x1f net/socket.c:1039
    __fput+0x322/0x55c fs/file_table.c:208
    ____fput+0x17/0x19 fs/file_table.c:244
    task_work_run+0x19b/0x1d3 kernel/task_work.c:115
    exit_task_work include/linux/task_work.h:21 [inline]
    do_exit+0xe4c/0x204a kernel/exit.c:766
    do_group_exit+0x291/0x291 kernel/exit.c:891
    get_signal+0x749/0x1093 kernel/signal.c:2396
    do_signal+0xa5/0xcdb arch/x86/kernel/signal.c:737
    exit_to_usermode_loop arch/x86/entry/common.c:243 [inline]
    prepare_exit_to_usermode+0xed/0x235 arch/x86/entry/common.c:277
    syscall_return_slowpath+0x3a7/0x3b3 arch/x86/entry/common.c:348
    int_ret_from_sys_call+0x25/0xa3
    
    Signed-off-by: Archie Pusaka <apusaka@chromium.org>
    Reported-by: syzbot+338f014a98367a08a114@syzkaller.appspotmail.com
    Reviewed-by: Alain Michaud <alainm@chromium.org>
    Reviewed-by: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0cba3d1edf6e0a4bf0580e73c75cd569492040b
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sun Mar 21 11:38:40 2021 -0400

    ALSA: rme9652: don't disable if not enabled
    
    [ Upstream commit f57a741874bb6995089020e97a1dcdf9b165dcbe ]
    
    rme9652 wants to disable a not enabled pci device, which makes kernel
    throw a warning. Make sure the device is enabled before calling disable.
    
    [    1.751595] snd_rme9652 0000:00:03.0: disabling already-disabled device
    [    1.751605] WARNING: CPU: 0 PID: 174 at drivers/pci/pci.c:2146 pci_disable_device+0x91/0xb0
    [    1.759968] Call Trace:
    [    1.760145]  snd_rme9652_card_free+0x76/0xa0 [snd_rme9652]
    [    1.760434]  release_card_device+0x4b/0x80 [snd]
    [    1.760679]  device_release+0x3b/0xa0
    [    1.760874]  kobject_put+0x94/0x1b0
    [    1.761059]  put_device+0x13/0x20
    [    1.761235]  snd_card_free+0x61/0x90 [snd]
    [    1.761454]  snd_rme9652_probe+0x3be/0x700 [snd_rme9652]
    
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20210321153840.378226-4-ztong0001@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13be9c297e986254466678fd6eddbbf29825f4e1
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sun Mar 21 11:38:39 2021 -0400

    ALSA: hdspm: don't disable if not enabled
    
    [ Upstream commit 790f5719b85e12e10c41753b864e74249585ed08 ]
    
    hdspm wants to disable a not enabled pci device, which makes kernel
    throw a warning. Make sure the device is enabled before calling disable.
    
    [    1.786391] snd_hdspm 0000:00:03.0: disabling already-disabled device
    [    1.786400] WARNING: CPU: 0 PID: 182 at drivers/pci/pci.c:2146 pci_disable_device+0x91/0xb0
    [    1.795181] Call Trace:
    [    1.795320]  snd_hdspm_card_free+0x58/0xa0 [snd_hdspm]
    [    1.795595]  release_card_device+0x4b/0x80 [snd]
    [    1.795860]  device_release+0x3b/0xa0
    [    1.796072]  kobject_put+0x94/0x1b0
    [    1.796260]  put_device+0x13/0x20
    [    1.796438]  snd_card_free+0x61/0x90 [snd]
    [    1.796659]  snd_hdspm_probe+0x97b/0x1440 [snd_hdspm]
    
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20210321153840.378226-3-ztong0001@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a31b14b1bbc5fff99084e54c35ff4194ae992107
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sun Mar 21 11:38:38 2021 -0400

    ALSA: hdsp: don't disable if not enabled
    
    [ Upstream commit 507cdb9adba006a7798c358456426e1aea3d9c4f ]
    
    hdsp wants to disable a not enabled pci device, which makes kernel
    throw a warning. Make sure the device is enabled before calling disable.
    
    [    1.758292] snd_hdsp 0000:00:03.0: disabling already-disabled device
    [    1.758327] WARNING: CPU: 0 PID: 180 at drivers/pci/pci.c:2146 pci_disable_device+0x91/0xb0
    [    1.766985] Call Trace:
    [    1.767121]  snd_hdsp_card_free+0x94/0xf0 [snd_hdsp]
    [    1.767388]  release_card_device+0x4b/0x80 [snd]
    [    1.767639]  device_release+0x3b/0xa0
    [    1.767838]  kobject_put+0x94/0x1b0
    [    1.768027]  put_device+0x13/0x20
    [    1.768207]  snd_card_free+0x61/0x90 [snd]
    [    1.768430]  snd_hdsp_probe+0x524/0x5e0 [snd_hdsp]
    
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20210321153840.378226-2-ztong0001@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59ae4e7291fa0b87e8422899e252dfba39b84966
Author: Jonathan McDowell <noodles@earth.li>
Date:   Sat Mar 13 13:18:26 2021 +0000

    net: stmmac: Set FIFO sizes for ipq806x
    
    [ Upstream commit e127906b68b49ddb3ecba39ffa36a329c48197d3 ]
    
    Commit eaf4fac47807 ("net: stmmac: Do not accept invalid MTU values")
    started using the TX FIFO size to verify what counts as a valid MTU
    request for the stmmac driver.  This is unset for the ipq806x variant.
    Looking at older patches for this it seems the RX + TXs buffers can be
    up to 8k, so set appropriately.
    
    (I sent this as an RFC patch in June last year, but received no replies.
    I've been running with this on my hardware (a MikroTik RB3011) since
    then with larger MTUs to support both the internal qca8k switch and
    VLANs with no problems. Without the patch it's impossible to set the
    larger MTU required to support this.)
    
    Signed-off-by: Jonathan McDowell <noodles@earth.li>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ba5c4e5bf9890a215f46613eb72cf9da80a8a7d
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0523c32a01bdab2fb035111c4265527fd24fa18
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Mar 1 17:05:08 2021 -0500

    fs: dlm: fix debugfs dump
    
    [ Upstream commit 92c48950b43f4a767388cf87709d8687151a641f ]
    
    This patch fixes the following message which randomly pops up during
    glocktop call:
    
    seq_file: buggy .next function table_seq_next did not update position index
    
    The issue is that seq_read_iter() in fs/seq_file.c also needs an
    increment of the index in an non next record case as well which this
    patch fixes otherwise seq_read_iter() will print out the above message.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a2f6ffcf8257ee89d0f351979da90df3bfd8006
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Wed May 12 21:39:26 2021 +0800

    tpm: fix error return code in tpm2_get_cc_attrs_tbl()
    
    commit 1df83992d977355177810c2b711afc30546c81ce upstream.
    
    If the total number of commands queried through TPM2_CAP_COMMANDS is
    different from that queried through TPM2_CC_GET_CAPABILITY, it indicates
    an unknown error. In this case, an appropriate error code -EFAULT should
    be returned. However, we currently do not explicitly assign this error
    code to 'rc'. As a result, 0 was incorrectly returned.
    
    Cc: stable@vger.kernel.org
    Fixes: 58472f5cd4f6("tpm: validate TPM 2.0 commands")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afcaa0964602da17377652e878be2adfd45ce099
Author: Quentin Perret <qperret@google.com>
Date:   Wed May 12 12:30:23 2021 +0000

    Revert "fdt: Properly handle "no-map" field in the memory region"
    
    This reverts commit 71bc5d496725f7f923904d2f41cd39e32c647fdf.
    It is not really a fix, and the backport misses dependencies, which
    breaks existing platforms.
    
    Reported-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d94df564237abe13c43eae2eb829f0d1189919b2
Author: Quentin Perret <qperret@google.com>
Date:   Wed May 12 12:30:22 2021 +0000

    Revert "of/fdt: Make sure no-map does not remove already reserved regions"
    
    This reverts commit 6793433fc8f263eaba1621d3724b6aeba511c6c5.
    It is not really a fix, and the backport misses dependencies, which
    breaks existing platforms.
    
    Reported-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 209e60e5f2d6e97daf329743c99a79d9cbbccbf3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 3 05:11:42 2021 +0800

    sctp: delay auto_asconf init until binding the first addr
    
    commit 34e5b01186858b36c4d7c87e1a025071e8e2401f upstream.
    
    As Or Cohen described:
    
      If sctp_destroy_sock is called without sock_net(sk)->sctp.addr_wq_lock
      held and sp->do_auto_asconf is true, then an element is removed
      from the auto_asconf_splist without any proper locking.
    
      This can happen in the following functions:
      1. In sctp_accept, if sctp_sock_migrate fails.
      2. In inet_create or inet6_create, if there is a bpf program
         attached to BPF_CGROUP_INET_SOCK_CREATE which denies
         creation of the sctp socket.
    
    This patch is to fix it by moving the auto_asconf init out of
    sctp_init_sock(), by which inet_create()/inet6_create() won't
    need to operate it in sctp_destroy_sock() when calling
    sk_common_release().
    
    It also makes more sense to do auto_asconf init while binding the
    first addr, as auto_asconf actually requires an ANY addr bind,
    see it in sctp_addr_wq_timeout_handler().
    
    This addresses CVE-2021-23133.
    
    Fixes: 610236587600 ("bpf: Add new cgroup attach type to enable sock modifications")
    Reported-by: Or Cohen <orcohen@paloaltonetworks.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02ba54c49d3fe23d926227cd742a8e40db0da411
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 3 05:11:41 2021 +0800

    Revert "net/sctp: fix race condition in sctp_destroy_sock"
    
    commit 01bfe5e8e428b475982a98a46cca5755726f3f7f upstream.
    
    This reverts commit b166a20b07382b8bc1dcee2a448715c9c2c81b5b.
    
    This one has to be reverted as it introduced a dead lock, as
    syzbot reported:
    
           CPU0                    CPU1
           ----                    ----
      lock(&net->sctp.addr_wq_lock);
                                   lock(slock-AF_INET6);
                                   lock(&net->sctp.addr_wq_lock);
      lock(slock-AF_INET6);
    
    CPU0 is the thread of sctp_addr_wq_timeout_handler(), and CPU1
    is that of sctp_close().
    
    The original issue this commit fixed will be fixed in the next
    patch.
    
    Reported-by: syzbot+959223586843e69a2674@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fa3243274fcd6aeaabfbb32e272f75f0cf668ce
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed May 5 23:12:42 2021 +0200

    smp: Fix smp_call_function_single_async prototype
    
    commit 1139aeb1c521eb4a050920ce6c64c36c4f2a3ab7 upstream.
    
    As of commit 966a967116e6 ("smp: Avoid using two cache lines for struct
    call_single_data"), the smp code prefers 32-byte aligned call_single_data
    objects for performance reasons, but the block layer includes an instance
    of this structure in the main 'struct request' that is more senstive
    to size than to performance here, see 4ccafe032005 ("block: unalign
    call_single_data in struct request").
    
    The result is a violation of the calling conventions that clang correctly
    points out:
    
    block/blk-mq.c:630:39: warning: passing 8-byte aligned argument to 32-byte aligned parameter 2 of 'smp_call_function_single_async' may result in an unaligned pointer access [-Walign-mismatch]
                    smp_call_function_single_async(cpu, &rq->csd);
    
    It does seem that the usage of the call_single_data without cache line
    alignment should still be allowed by the smp code, so just change the
    function prototype so it accepts both, but leave the default alignment
    unchanged for the other users. This seems better to me than adding
    a local hack to shut up an otherwise correct warning in the caller.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Jens Axboe <axboe@kernel.dk>
    Link: https://lkml.kernel.org/r/20210505211300.3174456-1-arnd@kernel.org
    [nc: Fix conflicts]
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13bffb32814a653873ca80ef80491922f14fb46f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Apr 29 22:54:15 2021 -0700

    kfifo: fix ternary sign extension bugs
    
    [ Upstream commit 926ee00ea24320052b46745ef4b00d91c05bd03d ]
    
    The intent with this code was to return negative error codes but instead
    it returns positives.
    
    The problem is how type promotion works with ternary operations.  These
    functions return long, "ret" is an int and "copied" is a u32.  The
    negative error code is first cast to u32 so it becomes a high positive and
    then cast to long where it's still a positive.
    
    We could fix this by declaring "ret" as a ssize_t but let's just get rid
    of the ternaries instead.
    
    Link: https://lkml.kernel.org/r/YIE+/cK1tBzSuQPU@mwanda
    Fixes: 5bf2b19320ec ("kfifo: add example files to the kernel sample directory")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Stefani Seibold <stefani@seibold.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff8fa09d0766f36864372948df791fa76782df9d
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Tue Apr 27 09:22:58 2021 -0700

    net:nfc:digital: Fix a double free in digital_tg_recv_dep_req
    
    [ Upstream commit 75258586793efc521e5dd52a5bf6c7a4cf7002be ]
    
    In digital_tg_recv_dep_req, it calls nfc_tm_data_received(..,resp).
    If nfc_tm_data_received() failed, the callee will free the resp via
    kfree_skb() and return error. But in the exit branch, the resp
    will be freed again.
    
    My patch sets resp to NULL if nfc_tm_data_received() failed, to
    avoid the double free.
    
    Fixes: 1c7a4c24fbfd9 ("NFC Digital: Add target NFC-DEP support")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc1b438a35773d030be0ee80d9c635c3e558a322
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Mon Apr 26 09:06:25 2021 -0700

    net:emac/emac-mac: Fix a use after free in emac_mac_tx_buf_send
    
    [ Upstream commit 6d72e7c767acbbdd44ebc7d89c6690b405b32b57 ]
    
    In emac_mac_tx_buf_send, it calls emac_tx_fill_tpd(..,skb,..).
    If some error happens in emac_tx_fill_tpd(), the skb will be freed via
    dev_kfree_skb(skb) in error branch of emac_tx_fill_tpd().
    But the freed skb is still used via skb->len by netdev_sent_queue(,skb->len).
    
    As i observed that emac_tx_fill_tpd() haven't modified the value of skb->len,
    thus my patch assigns skb->len to 'len' before the possible free and
    use 'len' instead of skb->len later.
    
    Fixes: b9b17debc69d2 ("net: emac: emac gigabit ethernet controller driver")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2765406bb8c13a58c1b284cdfc4c756d73ba9279
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Apr 21 17:24:03 2021 +0000

    powerpc/52xx: Fix an invalid ASM expression ('addi' used instead of 'add')
    
    [ Upstream commit 8a87a507714386efc39c3ae6fa24d4f79846b522 ]
    
      AS      arch/powerpc/platforms/52xx/lite5200_sleep.o
    arch/powerpc/platforms/52xx/lite5200_sleep.S: Assembler messages:
    arch/powerpc/platforms/52xx/lite5200_sleep.S:184: Warning: invalid register expression
    
    In the following code, 'addi' is wrong, has to be 'add'
    
            /* local udelay in sram is needed */
      udelay: /* r11 - tb_ticks_per_usec, r12 - usecs, overwrites r13 */
            mullw   r12, r12, r11
            mftb    r13     /* start */
            addi    r12, r13, r12 /* end */
    
    Fixes: ee983079ce04 ("[POWERPC] MPC5200 low power mode")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/cb4cec9131c8577803367f1699209a7e104cec2a.1619025821.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32f48a0f8153fe4d152ea6c7a3014101ae7d1537
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Fri Mar 26 19:08:19 2021 +0100

    ath9k: Fix error check in ath9k_hw_read_revisions() for PCI devices
    
    [ Upstream commit 7dd9a40fd6e0d0f1fd8e1931c007e080801dfdce ]
    
    When the error check in ath9k_hw_read_revisions() was added, it checked for
    -EIO which is what ath9k_regread() in the ath9k_htc driver uses. However,
    for plain ath9k, the register read function uses ioread32(), which just
    returns -1 on error. So if such a read fails, it still gets passed through
    and ends up as a weird mac revision in the log output.
    
    Fix this by changing ath9k_regread() to return -1 on error like ioread32()
    does, and fix the error check to look for that instead of -EIO.
    
    Fixes: 2f90c7e5d094 ("ath9k: Check for errors when reading SREV register")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Reviewed-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210326180819.142480-1-toke@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a43c5d4db761192843b98534deb28cdcec9a1df
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Apr 20 18:16:14 2021 +0100

    net: davinci_emac: Fix incorrect masking of tx and rx error channel
    
    [ Upstream commit d83b8aa5207d81f9f6daec9888390f079cc5db3f ]
    
    The bit-masks used for the TXERRCH and RXERRCH (tx and rx error channels)
    are incorrect and always lead to a zero result. The mask values are
    currently the incorrect post-right shifted values, fix this by setting
    them to the currect values.
    
    (I double checked these against the TMS320TCI6482 data sheet, section
    5.30, page 127 to ensure I had the correct mask values for the TXERRCH
    and RXERRCH fields in the MACSTATUS register).
    
    Addresses-Coverity: ("Operands don't affect result")
    Fixes: a6286ee630f6 ("net: Add TI DaVinci EMAC driver")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f5366bd8b4b98b7e1dcef9814539e971349e908
Author: Sindhu Devale <sindhu.devale@intel.com>
Date:   Thu Apr 15 19:21:04 2021 -0500

    RDMA/i40iw: Fix error unwinding when i40iw_hmc_sd_one fails
    
    [ Upstream commit 783a11bf2400e5d5c42a943c3083dc0330751842 ]
    
    When i40iw_hmc_sd_one fails, chunk is freed without the deletion of chunk
    entry in the PBLE info list.
    
    Fix it by adding the chunk entry to the PBLE info list only after
    successful addition of SD in i40iw_hmc_sd_one.
    
    This fixes a static checker warning reported here:
      https://lore.kernel.org/linux-rdma/YHV4CFXzqTm23AOZ@mwanda/
    
    Fixes: 9715830157be ("i40iw: add pble resource files")
    Link: https://lore.kernel.org/r/20210416002104.323-1-shiraz.saleem@intel.com
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Sindhu Devale <sindhu.devale@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b213124bd55a4fa6eeec696f50afdc2f44392398
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Apr 16 12:44:16 2021 +0200

    vsock/vmci: log once the failed queue pair allocation
    
    [ Upstream commit e16edc99d658cd41c60a44cc14d170697aa3271f ]
    
    VMCI feature is not supported in conjunction with the vSphere Fault
    Tolerance (FT) feature.
    
    VMware Tools can repeatedly try to create a vsock connection. If FT is
    enabled the kernel logs is flooded with the following messages:
    
        qp_alloc_hypercall result = -20
        Could not attach to queue pair with -20
    
    "qp_alloc_hypercall result = -20" was hidden by commit e8266c4c3307
    ("VMCI: Stop log spew when qp allocation isn't possible"), but "Could
    not attach to queue pair with -20" is still there flooding the log.
    
    Since the error message can be useful in some cases, print it only once.
    
    Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Jorgen Hansen <jhansen@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0e7f7e0e7ef57630a35b31334c951fb8dd98d59
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Fri Apr 2 11:26:27 2021 -0700

    mwl8k: Fix a double Free in mwl8k_probe_hw
    
    [ Upstream commit a8e083ee8e2a6c94c29733835adae8bf5b832748 ]
    
    In mwl8k_probe_hw, hw->priv->txq is freed at the first time by
    dma_free_coherent() in the call chain:
    if(!priv->ap_fw)->mwl8k_init_txqs(hw)->mwl8k_txq_init(hw, i).
    
    Then in err_free_queues of mwl8k_probe_hw, hw->priv->txq is freed
    at the second time by mwl8k_txq_deinit(hw, i)->dma_free_coherent().
    
    My patch set txq->txd to NULL after the first free to avoid the
    double free.
    
    Fixes: a66098daacee2 ("mwl8k: Marvell TOPDOG wireless driver")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210402182627.4256-1-lyl2019@mail.ustc.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e53d9f91b4dfafc9afde72a375e0c325c4b92c68
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sat Apr 17 22:05:05 2021 +0300

    i2c: sh7760: fix IRQ error path
    
    [ Upstream commit 92dfb27240fea2776f61c5422472cb6defca7767 ]
    
    While adding the invalid IRQ check after calling platform_get_irq(),
    I managed to overlook that the driver has a complex error path in its
    probe() method, thus a simple *return* couldn't be used.  Use a proper
    *goto* instead!
    
    Fixes: e5b2e3e74201 ("i2c: sh7760: add IRQ check")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2196d19534d14429950e94abf7dd9cb662ae62b9
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Fri Feb 19 13:26:07 2021 +0800

    rtlwifi: 8821ae: upgrade PHY and RF parameters
    
    [ Upstream commit 18fb0bedb5fc2fddc057dbe48b7360a6ffda34b3 ]
    
    The signal strength of 5G is quite low, so user can't connect to an AP far
    away. New parameters with new format and its parser are updated by the commit
    84d26fda52e2 ("rtlwifi: Update 8821ae new phy parameters and its parser."), but
    some parameters are missing. Use this commit to update to the novel parameters
    that use new format.
    
    Fixes: 84d26fda52e2 ("rtlwifi: Update 8821ae new phy parameters and its parser")
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Tested-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210219052607.7323-1-pkshih@realtek.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20dfb6e0260d483e1ada3970bb141b6cd8239180
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Thu Feb 11 12:24:35 2021 -0600

    powerpc/pseries: extract host bridge from pci_bus prior to bus removal
    
    [ Upstream commit 38d0b1c9cec71e6d0f3bddef0bbce41d05a3e796 ]
    
    The pci_bus->bridge reference may no longer be valid after
    pci_bus_remove() resulting in passing a bad value to device_unregister()
    for the associated bridge device.
    
    Store the host_bridge reference in a separate variable prior to
    pci_bus_remove().
    
    Fixes: 7340056567e3 ("powerpc/pci: Reorder pci bus/bridge unregistration during PHB removal")
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210211182435.47968-1-tyreld@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b98d45f16e9b2950610a1b9953ee1056a203ca4d
Author: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
Date:   Tue Apr 13 20:12:37 2021 -0700

    MIPS: pci-legacy: stop using of_pci_range_to_resource
    
    [ Upstream commit 3ecb9dc1581eebecaee56decac70e35365260866 ]
    
    Mirror commit aeba3731b150 ("powerpc/pci: Fix IO space breakage after
    of_pci_range_to_resource() change").
    
    Most MIPS platforms do not define PCI_IOBASE, nor implement
    pci_address_to_pio(). Moreover, IO_SPACE_LIMIT is 0xffff for most MIPS
    platforms. of_pci_range_to_resource passes the _start address_ of the IO
    range into pci_address_to_pio, which then checks it against
    IO_SPACE_LIMIT and fails, because for MIPS platforms that use
    pci-legacy (pci-lantiq, pci-rt3883, pci-mt7620), IO ranges start much
    higher than 0xffff.
    
    In fact, pci-mt7621 in staging already works around this problem, see
    commit 09dd629eeabb ("staging: mt7621-pci: fix io space and properly set
    resource limits")
    
    So just stop using of_pci_range_to_resource, which does not work for
    MIPS.
    
    Fixes PCI errors like:
      pci_bus 0000:00: root bus resource [io  0xffffffff]
    
    Fixes: 0b0b0893d49b ("of/pci: Fix the conversion of IO ranges into IO resources")
    Signed-off-by: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
    Cc: Liviu Dudau <Liviu.Dudau@arm.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b5317f2ab934f1742bfaccefdb01de3ca649bcd
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sat Apr 10 23:25:10 2021 +0300

    i2c: sh7760: add IRQ check
    
    [ Upstream commit e5b2e3e742015dd2aa6bc7bcef2cb59b2de1221c ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to devm_request_irq() (which
    takes *unsigned* IRQ #), causing it to fail with -EINVAL, overriding
    an original error code.  Stop calling devm_request_irq() with invalid
    IRQ #s.
    
    Fixes: a26c20b1fa6d ("i2c: Renesas SH7760 I2C master driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 936da0b866658422825ec17f3e8937ece62200cd
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sat Apr 10 23:18:31 2021 +0300

    i2c: jz4780: add IRQ check
    
    [ Upstream commit c5e5f7a8d931fb4beba245bdbc94734175fda9de ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to devm_request_irq() (which
    takes *unsigned* IRQ #), causing it to fail with -EINVAL, overriding
    an original error code.  Stop calling devm_request_irq() with invalid
    IRQ #s.
    
    Fixes: ba92222ed63a ("i2c: jz4780: Add i2c bus controller driver for Ingenic JZ4780")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8c870e58243a6ce47a07d10a27f55bfa9ce6cb0
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sat Apr 10 23:16:41 2021 +0300

    i2c: emev2: add IRQ check
    
    [ Upstream commit bb6129c32867baa7988f7fd2066cf18ed662d240 ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to devm_request_irq() (which
    takes *unsigned* IRQ #), causing it to fail with -EINVAL, overriding
    an original error code.  Stop calling devm_request_irq() with invalid
    IRQ #s.
    
    Fixes: 5faf6e1f58b4 ("i2c: emev2: add driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc62024b2a5210ceb52860b7b25a0af3a159404a
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sat Apr 10 23:14:35 2021 +0300

    i2c: cadence: add IRQ check
    
    [ Upstream commit 5581c2c5d02bc63a0edb53e061c8e97cd490646e ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to devm_request_irq() (which
    takes *unsigned* IRQ #), causing it to fail with -EINVAL, overriding
    an original error code.  Stop calling devm_request_irq() with invalid
    IRQ #s.
    
    Fixes: df8eb5691c48 ("i2c: Add driver for Cadence I2C controller")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8c735a82acf94a85ff5391f46dfefd5d1df3d47
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Apr 9 14:07:26 2021 +0100

    net: thunderx: Fix unintentional sign extension issue
    
    [ Upstream commit e701a25840360706fe4cf5de0015913ca19c274b ]
    
    The shifting of the u8 integers rq->caching by 26 bits to
    the left will be promoted to a 32 bit signed int and then
    sign-extended to a u64. In the event that rq->caching is
    greater than 0x1f then all then all the upper 32 bits of
    the u64 end up as also being set because of the int
    sign-extension. Fix this by casting the u8 values to a
    u64 before the 26 bit left shift.
    
    Addresses-Coverity: ("Unintended sign extension")
    Fixes: 4863dea3fab0 ("net: Adding support for Cavium ThunderX network controller")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad11f08c892f9d9af1998c884d3f0605bebd3a67
Author: Wang Wensheng <wangwensheng4@huawei.com>
Date:   Thu Apr 8 11:31:40 2021 +0000

    IB/hfi1: Fix error return code in parse_platform_config()
    
    [ Upstream commit 4c7d9c69adadfc31892c7e8e134deb3546552106 ]
    
    Fix to return a negative error code from the error handling case instead
    of 0, as done elsewhere in this function.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Link: https://lore.kernel.org/r/20210408113140.103032-1-wangwensheng4@huawei.com
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11216a2ed685b8e4ca2087d8c48dd31c674b75bc
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Feb 25 18:32:41 2021 +0000

    mt7601u: fix always true expression
    
    [ Upstream commit 87fce88658ba047ae62e83497d3f3c5dc22fa6f9 ]
    
    Currently the expression ~nic_conf1 is always true because nic_conf1
    is a u16 and according to 6.5.3.3 of the C standard the ~ operator
    promotes the u16 to an integer before flipping all the bits. Thus
    the top 16 bits of the integer result are all set so the expression
    is always true.  If the intention was to flip all the bits of nic_conf1
    then casting the integer result back to a u16 is a suitabel fix.
    
    Interestingly static analyzers seem to thing a bitwise ! should be
    used instead of ~ for this scenario, so I think the original intent
    of the expression may need some extra consideration.
    
    Addresses-Coverity: ("Logical vs. bitwise operator")
    Fixes: c869f77d6abb ("add mt7601u driver")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Jakub Kicinski <kubakici@wp.pl>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210225183241.1002129-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 685516a13ffa758e0bd50025c682dde8a5482c98
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Apr 8 14:31:50 2021 +0200

    mac80211: bail out if cipher schemes are invalid
    
    [ Upstream commit db878e27a98106a70315d264cc92230d84009e72 ]
    
    If any of the cipher schemes specified by the driver are invalid, bail
    out and fail the registration rather than just warning.  Otherwise, we
    might later crash when we try to use the invalid cipher scheme, e.g.
    if the hdr_len is (significantly) less than the pn_offs + pn_len, we'd
    have an out-of-bounds access in RX validation.
    
    Fixes: 2475b1cc0d52 ("mac80211: add generic cipher scheme support")
    Link: https://lore.kernel.org/r/20210408143149.38a3a13a1b19.I6b7f5790fa0958ed8049cf02ac2a535c61e9bc96@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd62a39738d6409eeec70ab5f79a1b0a70373644
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Apr 4 12:26:23 2021 -0700

    powerpc: iommu: fix build when neither PCI or IBMVIO is set
    
    [ Upstream commit b27dadecdf9102838331b9a0b41ffc1cfe288154 ]
    
    When neither CONFIG_PCI nor CONFIG_IBMVIO is set/enabled, iommu.c has a
    build error. The fault injection code is not useful in that kernel config,
    so make the FAIL_IOMMU option depend on PCI || IBMVIO.
    
    Prevents this build error (warning escalated to error):
    ../arch/powerpc/kernel/iommu.c:178:30: error: 'fail_iommu_bus_notifier' defined but not used [-Werror=unused-variable]
      178 | static struct notifier_block fail_iommu_bus_notifier = {
    
    Fixes: d6b9a81b2a45 ("powerpc: IOMMU fault injection")
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Acked-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210404192623.10697-1-rdunlap@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cb20843fd63137dec5526d3f525a3ba9df3d2c2
Author: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Date:   Tue Apr 6 12:16:01 2021 -0400

    powerpc/perf: Fix PMU constraint check for EBB events
    
    [ Upstream commit 10f8f96179ecc7f69c927f6d231f6d02736cea83 ]
    
    The power PMU group constraints includes check for EBB events to make
    sure all events in a group must agree on EBB. This will prevent
    scheduling EBB and non-EBB events together. But in the existing check,
    settings for constraint mask and value is interchanged. Patch fixes the
    same.
    
    Before the patch, PMU selftest "cpu_event_pinned_vs_ebb_test" fails with
    below in dmesg logs. This happens because EBB event gets enabled along
    with a non-EBB cpu event.
    
      [35600.453346] cpu_event_pinne[41326]: illegal instruction (4)
      at 10004a18 nip 10004a18 lr 100049f8 code 1 in
      cpu_event_pinned_vs_ebb_test[10000000+10000]
    
    Test results after the patch:
    
      $ ./pmu/ebb/cpu_event_pinned_vs_ebb_test
      test: cpu_event_pinned_vs_ebb
      tags: git_version:v5.12-rc5-93-gf28c3125acd3-dirty
      Binding to cpu 8
      EBB Handler is at 0x100050c8
      read error on event 0x7fffe6bd4040!
      PM_RUN_INST_CMPL: result 9872 running/enabled 37930432
      success: cpu_event_pinned_vs_ebb
    
    This bug was hidden by other logic until commit 1908dc911792 (perf:
    Tweak perf_event_attr::exclusive semantics).
    
    Fixes: 4df489991182 ("powerpc/perf: Add power8 EBB support")
    Reported-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    [mpe: Mention commit 1908dc911792]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1617725761-1464-1-git-send-email-atrajeev@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 114826c4bca1f02cccd6b4b8a36e1d14cc00f161
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Apr 7 11:12:48 2021 +0100

    liquidio: Fix unintented sign extension of a left shift of a u16
    
    [ Upstream commit 298b58f00c0f86868ea717426beb5c1198772f81 ]
    
    The macro CN23XX_PEM_BAR1_INDEX_REG is being used to shift oct->pcie_port
    (a u16) left 24 places. There are two subtle issues here, first the
    shift gets promoted to an signed int and then sign extended to a u64.
    If oct->pcie_port is 0x80 or more then the upper bits get sign extended
    to 1. Secondly shfiting a u16 24 bits will lead to an overflow so it
    needs to be cast to a u64 for all the bits to not overflow.
    
    It is entirely possible that the u16 port value is never large enough
    for this to fail, but it is useful to fix unintended overflows such
    as this.
    
    Fix this by casting the port parameter to the macro to a u64 before
    the shift.
    
    Addresses-Coverity: ("Unintended sign extension")
    Fixes: 5bc67f587ba7 ("liquidio: CN23XX register definitions")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 005506db3068bf5e283f1b435abfb9d8dcd3d6e1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 6 13:35:34 2021 +0200

    ALSA: usb-audio: Add error checks for usb_driver_claim_interface() calls
    
    [ Upstream commit 5fb45414ae03421255593fd5556aa2d1d82303aa ]
    
    There are a few calls of usb_driver_claim_interface() but all of those
    miss the proper error checks, as reported by Coverity.  This patch
    adds those missing checks.
    
    Along with it, replace the magic pointer with -1 with a constant
    USB_AUDIO_IFACE_UNUSED for better readability.
    
    Reported-by: coverity-bot <keescook+coverity-bot@chromium.org>
    Addresses-Coverity-ID: 1475943 ("Error handling issues")
    Addresses-Coverity-ID: 1475944 ("Error handling issues")
    Addresses-Coverity-ID: 1475945 ("Error handling issues")
    Fixes: b1ce7ba619d9 ("ALSA: usb-audio: claim autodetected PCM interfaces all at once")
    Fixes: e5779998bf8b ("ALSA: usb-audio: refactor code")
    Link: https://lore.kernel.org/r/202104051059.FB7F3016@keescook
    Link: https://lore.kernel.org/r/20210406113534.30455-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6569255c2750785759c2fd5cba075fa3f7e9569f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Apr 2 14:44:42 2021 +0300

    nfc: pn533: prevent potential memory corruption
    
    [ Upstream commit ca4d4c34ae9aa5c3c0da76662c5e549d2fc0cc86 ]
    
    If the "type_a->nfcid_len" is too large then it would lead to memory
    corruption in pn533_target_found_type_a() when we do:
    
            memcpy(nfc_tgt->nfcid1, tgt_type_a->nfcid_data, nfc_tgt->nfcid1_len);
    
    Fixes: c3b1e1e8a76f ("NFC: Export NFCID1 from pn533")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92a2ae7160bd36c20f7225a92a6690a74f40a894
Author: Andrew Scull <ascull@google.com>
Date:   Thu Mar 18 14:33:07 2021 +0000

    bug: Remove redundant condition check in report_bug
    
    [ Upstream commit 3ad1a6cb0abc63d036fc866bd7c2c5983516dec5 ]
    
    report_bug() will return early if it cannot find a bug corresponding to
    the provided address. The subsequent test for the bug will always be
    true so remove it.
    
    Fixes: 1b4cfe3c0a30d ("lib/bug.c: exclude non-BUG/WARN exceptions from report_bug()")
    Signed-off-by: Andrew Scull <ascull@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: "Steven Rostedt (VMware)" <rostedt@goodmis.org>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20210318143311.839894-2-ascull@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 637d2955af13489b23f29614369aa41648d21ccd
Author: Jia Zhou <zhou.jia2@zte.com.cn>
Date:   Tue Mar 30 13:19:23 2021 +0200

    ALSA: core: remove redundant spin_lock pair in snd_card_disconnect
    
    [ Upstream commit abc21649b3e5c34b143bf86f0c78e33d5815e250 ]
    
    modification in commit 2a3f7221acdd ("ALSA: core: Fix card races between
    register and disconnect") resulting in this problem.
    
    Fixes: 2a3f7221acdd ("ALSA: core: Fix card races between register and disconnect")
    Signed-off-by: Jia Zhou <zhou.jia2@zte.com.cn>
    Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
    Link: https://lore.kernel.org/r/1616989007-34429-1-git-send-email-wang.yi59@zte.com.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a09398b7e39daec6d10fc3c658459ae09a60599f
Author: Chen Huang <chenhuang5@huawei.com>
Date:   Sat Mar 27 09:49:00 2021 +0000

    powerpc: Fix HAVE_HARDLOCKUP_DETECTOR_ARCH build configuration
    
    [ Upstream commit 4fe529449d85e78972fa327999961ecc83a0b6db ]
    
    When compiling the powerpc with the SMP disabled, it shows the issue:
    
    arch/powerpc/kernel/watchdog.c: In function ‘watchdog_smp_panic’:
    arch/powerpc/kernel/watchdog.c:177:4: error: implicit declaration of function ‘smp_send_nmi_ipi’; did you mean ‘smp_send_stop’? [-Werror=implicit-function-declaration]
      177 |    smp_send_nmi_ipi(c, wd_lockup_ipi, 1000000);
          |    ^~~~~~~~~~~~~~~~
          |    smp_send_stop
    cc1: all warnings being treated as errors
    make[2]: *** [scripts/Makefile.build:273: arch/powerpc/kernel/watchdog.o] Error 1
    make[1]: *** [scripts/Makefile.build:534: arch/powerpc/kernel] Error 2
    make: *** [Makefile:1980: arch/powerpc] Error 2
    make: *** Waiting for unfinished jobs....
    
    We found that powerpc used ipi to implement hardlockup watchdog, so the
    HAVE_HARDLOCKUP_DETECTOR_ARCH should depend on the SMP.
    
    Fixes: 2104180a5369 ("powerpc/64s: implement arch-specific hardlockup watchdog")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Chen Huang <chenhuang5@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210327094900.938555-1-chenhuang5@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 708b761c3ceb6cd7763303641d1c86f444a0279e
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Mar 2 13:08:29 2021 -0700

    powerpc/prom: Mark identical_pvr_fixup as __init
    
    [ Upstream commit 1ef1dd9c7ed27b080445e1576e8a05957e0e4dfc ]
    
    If identical_pvr_fixup() is not inlined, there are two modpost warnings:
    
    WARNING: modpost: vmlinux.o(.text+0x54e8): Section mismatch in reference
    from the function identical_pvr_fixup() to the function
    .init.text:of_get_flat_dt_prop()
    The function identical_pvr_fixup() references
    the function __init of_get_flat_dt_prop().
    This is often because identical_pvr_fixup lacks a __init
    annotation or the annotation of of_get_flat_dt_prop is wrong.
    
    WARNING: modpost: vmlinux.o(.text+0x551c): Section mismatch in reference
    from the function identical_pvr_fixup() to the function
    .init.text:identify_cpu()
    The function identical_pvr_fixup() references
    the function __init identify_cpu().
    This is often because identical_pvr_fixup lacks a __init
    annotation or the annotation of identify_cpu is wrong.
    
    identical_pvr_fixup() calls two functions marked as __init and is only
    called by a function marked as __init so it should be marked as __init
    as well. At the same time, remove the inline keywork as it is not
    necessary to inline this function. The compiler is still free to do so
    if it feels it is worthwhile since commit 889b3c1245de ("compiler:
    remove CONFIG_OPTIMIZE_INLINING entirely").
    
    Fixes: 14b3d926a22b ("[POWERPC] 4xx: update 440EP(x)/440GR(x) identical PVR issue workaround")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1316
    Link: https://lore.kernel.org/r/20210302200829.2680663-1-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31f0906bbdc6ba7bb1b6aa2cadb89e5aab87778a
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Mar 10 23:23:09 2021 -0800

    net: lapbether: Prevent racing when checking whether the netif is running
    
    [ Upstream commit 5acd0cfbfbb5a688da1bfb1a2152b0c855115a35 ]
    
    There are two "netif_running" checks in this driver. One is in
    "lapbeth_xmit" and the other is in "lapbeth_rcv". They serve to make
    sure that the LAPB APIs called in these functions are called before
    "lapb_unregister" is called by the "ndo_stop" function.
    
    However, these "netif_running" checks are unreliable, because it's
    possible that immediately after "netif_running" returns true, "ndo_stop"
    is called (which causes "lapb_unregister" to be called).
    
    This patch adds locking to make sure "lapbeth_xmit" and "lapbeth_rcv" can
    reliably check and ensure the netif is running while doing their work.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 427c1eea3d3e3814b20bafe0bac50ffe48969ae4
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon Mar 8 11:17:51 2021 -0300

    perf symbols: Fix dso__fprintf_symbols_by_name() to return the number of printed chars
    
    [ Upstream commit 210e4c89ef61432040c6cd828fefa441f4887186 ]
    
    The 'ret' variable was initialized to zero but then it was not updated
    from the fprintf() return, fix it.
    
    Reported-by: Yang Li <yang.lee@linux.alibaba.com>
    cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    cc: Ingo Molnar <mingo@redhat.com>
    cc: Jiri Olsa <jolsa@redhat.com>
    cc: Mark Rutland <mark.rutland@arm.com>
    cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Fixes: 90f18e63fbd00513 ("perf symbols: List symbols in a dso in ascending name order")
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f8751b7bd008df556402ac8c781a4959ecc20c1
Author: Maxim Mikityanskiy <maxtram95@gmail.com>
Date:   Sun Feb 7 16:47:40 2021 +0200

    HID: plantronics: Workaround for double volume key presses
    
    [ Upstream commit f567d6ef8606fb427636e824c867229ecb5aefab ]
    
    Plantronics Blackwire 3220 Series (047f:c056) sends HID reports twice
    for each volume key press. This patch adds a quirk to hid-plantronics
    for this product ID, which will ignore the second volume key press if
    it happens within 5 ms from the last one that was handled.
    
    The patch was tested on the mentioned model only, it shouldn't affect
    other models, however, this quirk might be needed for them too.
    Auto-repeat (when a key is held pressed) is not affected, because the
    rate is about 3 times per second, which is far less frequent than once
    in 5 ms.
    
    Fixes: 81bb773faed7 ("HID: plantronics: Update to map volume up/down controls")
    Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e73fcb53bc2db381faf0033df85bdf58b891cdd
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Apr 14 17:11:11 2021 -0700

    x86/events/amd/iommu: Fix sysfs type mismatch
    
    [ Upstream commit de5bc7b425d4c27ae5faa00ea7eb6b9780b9a355 ]
    
    dev_attr_show() calls _iommu_event_show() via an indirect call but
    _iommu_event_show()'s type does not currently match the type of the
    show() member in 'struct device_attribute', resulting in a Control Flow
    Integrity violation.
    
    $ cat /sys/devices/amd_iommu_1/events/mem_dte_hit
    csource=0x0a
    
    $ dmesg | grep "CFI failure"
    [ 3526.735140] CFI failure (target: _iommu_event_show...):
    
    Change _iommu_event_show() and 'struct amd_iommu_event_desc' to
    'struct device_attribute' so that there is no more CFI violation.
    
    Fixes: 7be6296fdd75 ("perf/x86/amd: AMD IOMMU Performance Counter PERF uncore PMU implementation")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210415001112.3024673-1-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d58efadffd38a6a691abb7208332c76a3f5a1826
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Apr 9 14:08:17 2021 +0300

    HSI: core: fix resource leaks in hsi_add_client_from_dt()
    
    [ Upstream commit 5c08b0f75575648032f309a6f58294453423ed93 ]
    
    If some of the allocations fail between the dev_set_name() and the
    device_register() then the name will not be freed.  Fix this by
    moving dev_set_name() directly in front of the call to device_register().
    
    Fixes: a2aa24734d9d ("HSI: Add common DT binding for HSI client devices")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba411a860971bbd7ea05ff741d75de115e7674ba
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Wed Mar 3 18:51:35 2021 +0100

    mfd: stm32-timers: Avoid clearing auto reload register
    
    [ Upstream commit 4917e498c6894ba077867aff78f82cffd5ffbb5c ]
    
    The ARR register is cleared unconditionally upon probing, after the maximum
    value has been read. This initial condition is rather not intuitive, when
    considering the counter child driver. It rather expects the maximum value
    by default:
    - The counter interface shows a zero value by default for 'ceiling'
      attribute.
    - Enabling the counter without any prior configuration makes it doesn't
      count.
    
    The reset value of ARR register is the maximum. So Choice here
    is to backup it, and restore it then, instead of clearing its value.
    It also fixes the initial condition seen by the counter driver.
    
    Fixes: d0f949e220fd ("mfd: Add STM32 Timers driver")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Acked-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63498f7d9c544b8ff950c9eec24d0f15e53ec01a
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Tue Mar 30 20:45:12 2021 +0300

    scsi: sni_53c710: Add IRQ check
    
    [ Upstream commit 1160d61bc51e87e509cfaf9da50a0060f67b6de4 ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to request_irq() (which takes
    *unsigned* IRQ #s), causing it to fail with -EINVAL (overridden by -ENODEV
    further below).  Stop calling request_irq() with the invalid IRQ #s.
    
    Link: https://lore.kernel.org/r/8f4b8fa5-8251-b977-70a1-9099bcb4bb17@omprussia.ru
    Fixes: c27d85f3f3c5 ("[SCSI] SNI RM 53c710 driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a59ae4902759f7982401bb1c3defeafc11cef244
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Tue Mar 30 20:44:08 2021 +0300

    scsi: sun3x_esp: Add IRQ check
    
    [ Upstream commit 14b321380eb333c82853d7d612d0995f05f88fdc ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to request_irq() (which takes
    *unsigned* IRQ #), causing it to fail with -EINVAL, overriding the real
    error code.  Stop calling request_irq() with the invalid IRQ #s.
    
    Link: https://lore.kernel.org/r/363eb4c8-a3bf-4dc9-2a9e-90f349030a15@omprussia.ru
    Fixes: 0bb67f181834 ("[SCSI] sun3x_esp: convert to esp_scsi")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d64f5cb8be69b92afb8e38e2ba3803cc2f4e5b01
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Tue Mar 30 20:43:23 2021 +0300

    scsi: jazz_esp: Add IRQ check
    
    [ Upstream commit 38fca15c29db6ed06e894ac194502633e2a7d1fb ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to request_irq() (which takes
    *unsigned* IRQ #), causing it to fail with -EINVAL, overriding the real
    error code.  Stop calling request_irq() with the invalid IRQ #s.
    
    Link: https://lore.kernel.org/r/594aa9ae-2215-49f6-f73c-33bd38989912@omprussia.ru
    Fixes: 352e921f0dd4 ("[SCSI] jazz_esp: converted to use esp_core")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da380b429c60745d8fa05781d157a09eb5ec71ac
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Apr 9 10:01:03 2021 +0100

    clk: uniphier: Fix potential infinite loop
    
    [ Upstream commit f6b1340dc751a6caa2a0567b667d0f4f4172cd58 ]
    
    The for-loop iterates with a u8 loop counter i and compares this
    with the loop upper limit of num_parents that is an int type.
    There is a potential infinite loop if num_parents is larger than
    the u8 loop counter. Fix this by making the loop counter the same
    type as num_parents.  Also make num_parents an unsigned int to
    match the return type of the call to clk_hw_get_num_parents.
    
    Addresses-Coverity: ("Infinite loop")
    Fixes: 734d82f4a678 ("clk: uniphier: add core support code for UniPhier clock driver")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Masahiro Yamada <masahiroy@kernel.org>
    Link: https://lore.kernel.org/r/20210409090104.629722-1-colin.king@canonical.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab11aa7585254be0187e6427d7af1ed43c14408d
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 6 16:40:25 2021 -0300

    vfio/mdev: Do not allow a mdev_type to have a NULL parent pointer
    
    [ Upstream commit b5a1f8921d5040bb788492bf33a66758021e4be5 ]
    
    There is a small race where the parent is NULL even though the kobj has
    already been made visible in sysfs.
    
    For instance the attribute_group is made visible in sysfs_create_files()
    and the mdev_type_attr_show() does:
    
        ret = attr->show(kobj, type->parent->dev, buf);
    
    Which will crash on NULL parent. Move the parent setup to before the type
    pointer leaves the stack frame.
    
    Fixes: 7b96953bc640 ("vfio: Mediated device Core driver")
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Kevin Tian <kevin.tian@intel.com>
    Reviewed-by: Max Gurtovoy <mgurtovoy@nvidia.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Message-Id: <2-v2-d36939638fc6+d54-vfio2_jgg@nvidia.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31a73b773d9e15fd8eae07e5dde3dbe343be9531
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Mon Mar 15 23:15:06 2021 +0300

    ata: libahci_platform: fix IRQ check
    
    [ Upstream commit b30d0040f06159de97ad9c0b1536f47250719d7d ]
    
    Iff platform_get_irq() returns 0, ahci_platform_init_host() would return 0
    early (as if the call was successful). Override IRQ0 with -EINVAL instead
    as the 'libata' regards 0 as "no IRQ" (thus polling) anyway...
    
    Fixes: c034640a32f8 ("ata: libahci: properly propagate return value of platform_get_irq()")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Link: https://lore.kernel.org/r/4448c8cc-331f-2915-0e17-38ea34e251c8@omprussia.ru
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da30d1916454f782d5035fa3130697c9d0364e58
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sun Mar 28 00:13:49 2021 +0300

    sata_mv: add IRQ checks
    
    [ Upstream commit e6471a65fdd5efbb8dd2732dd0f063f960685ceb ]
    
    The function mv_platform_probe() neglects to check the results of the
    calls to platform_get_irq() and irq_of_parse_and_map() and blithely
    passes them to ata_host_activate() -- while the latter only checks
    for IRQ0 (treating it as a polling mode indicattion) and passes the
    negative values to devm_request_irq() causing it to fail as it takes
    unsigned values for the IRQ #...
    
    Add to mv_platform_probe() the proper IRQ checks to pass the positive IRQ
    #s to ata_host_activate(), propagate upstream the negative error codes,
    and override the IRQ0 with -EINVAL (as we don't want the polling mode).
    
    Fixes: f351b2d638c3 ("sata_mv: Support SoC controllers")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Link: https://lore.kernel.org/r/51436f00-27a1-e20b-c21b-0e817e0a7c86@omprussia.ru
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82ab0162a8a6622771685985aa717845733decfa
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Thu Mar 25 23:51:10 2021 +0300

    pata_ipx4xx_cf: fix IRQ check
    
    [ Upstream commit e379b40cc0f179403ce0b82b7e539f635a568da5 ]
    
    The driver's probe() method is written as if platform_get_irq() returns 0
    on error, while actually it returns a negative error code (with all the
    other values considered valid IRQs).  Rewrite the driver's IRQ checking
    code to pass the positive IRQ #s to ata_host_activate(), propagate errors
    upstream, and treat IRQ0 as error, returning -EINVAL, as the libata code
    treats 0  as  an indication that polling should be used anyway...
    
    Fixes: 0df0d0a0ea9f ("[libata] ARM: add ixp4xx PATA driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bd6d480909b0415dee6bf51c55ec3787cd0197b
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Thu Mar 25 23:50:24 2021 +0300

    pata_arasan_cf: fix IRQ check
    
    [ Upstream commit c7e8f404d56b99c80990b19a402c3f640d74be05 ]
    
    The driver's probe() method is written as if platform_get_irq() returns 0
    on error, while actually it returns a negative error code (with all the
    other values considered valid IRQs). Rewrite the driver's IRQ checking code
    to pass the positive IRQ #s to ata_host_activate(), propagate upstream
    -EPROBE_DEFER, and set up the driver to polling mode on (negative) errors
    and IRQ0 (libata treats IRQ #0 as a polling mode anyway)...
    
    Fixes: a480167b23ef ("pata_arasan_cf: Adding support for arasan compact flash host controller")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03dacadd5d389af5ace863d4c8d3f9dc39bd8068
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Mar 25 19:08:31 2021 +0900

    x86/kprobes: Fix to check non boostable prefixes correctly
    
    [ Upstream commit 6dd3b8c9f58816a1354be39559f630cd1bd12159 ]
    
    There are 2 bugs in the can_boost() function because of using
    x86 insn decoder. Since the insn->opcode never has a prefix byte,
    it can not find CS override prefix in it. And the insn->attr is
    the attribute of the opcode, thus inat_is_address_size_prefix(
    insn->attr) always returns false.
    
    Fix those by checking each prefix bytes with for_each_insn_prefix
    loop and getting the correct attribute for each prefix byte.
    Also, this removes unlikely, because this is a slow path.
    
    Fixes: a8d11cd0714f ("kprobes/x86: Consolidate insn decoder users for copying code")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/161666691162.1120877.2808435205294352583.stgit@devnote2
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56b368301e128aeee1348451f6aff1271f25d566
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Oct 7 14:16:28 2020 +0200

    media: m88rs6000t: avoid potential out-of-bounds reads on arrays
    
    [ Upstream commit 9baa3d64e8e2373ddd11c346439e5dfccb2cbb0d ]
    
    There a 3 array for-loops that don't check the upper bounds of the
    index into arrays and this may lead to potential out-of-bounds
    reads.  Fix this by adding array size upper bounds checks to be
    full safe.
    
    Addresses-Coverity: ("Out-of-bounds read")
    
    Link: https://lore.kernel.org/linux-media/20201007121628.20676-1-colin.king@canonical.com
    Fixes: 333829110f1d ("[media] m88rs6000t: add new dvb-s/s2 tuner for integrated chip M88RS6000")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c66c51ba9bb6df6a22a0a9cba43830698abe5a17
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 17 03:50:41 2020 +0100

    media: omap4iss: return error code when omap4iss_get() failed
    
    [ Upstream commit 8938c48fa25b491842ece9eb38f0bea0fcbaca44 ]
    
    If omap4iss_get() failed, it need return error code in iss_probe().
    
    Fixes: 59f0ad807681 ("[media] v4l: omap4iss: Add support for OMAP4...")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17a1199f1e55374d7f7de89ddfc600ba2c77be4c
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Feb 25 16:43:27 2021 +0100

    media: vivid: fix assignment of dev->fbuf_out_flags
    
    [ Upstream commit 5cde22fcc7271812a7944c47b40100df15908358 ]
    
    Currently the chroma_flags and alpha_flags are being zero'd with a bit-wise
    mask and the following statement should be bit-wise or'ing in the new flag
    bits but instead is making a direct assignment.  Fix this by using the |=
    operator rather than an assignment.
    
    Addresses-Coverity: ("Unused value")
    
    Fixes: ef834f7836ec ("[media] vivid: add the video capture and output parts")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37ae11b31931ad4386b515d8e1e5947972c0f7ed
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Thu Apr 15 09:22:22 2021 +0900

    ttyprintk: Add TTY hangup callback.
    
    [ Upstream commit c0070e1e60270f6a1e09442a9ab2335f3eaeaad2 ]
    
    syzbot is reporting hung task due to flood of
    
      tty_warn(tty, "%s: tty->count = 1 port count = %d\n", __func__,
               port->count);
    
    message [1], for ioctl(TIOCVHANGUP) prevents tty_port_close() from
    decrementing port->count due to tty_hung_up_p() == true.
    
    ----------
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>
    #include <sys/ioctl.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            int i;
            int fd[10];
    
            for (i = 0; i < 10; i++)
                    fd[i] = open("/dev/ttyprintk", O_WRONLY);
            ioctl(fd[0], TIOCVHANGUP);
            for (i = 0; i < 10; i++)
                    close(fd[i]);
            close(open("/dev/ttyprintk", O_WRONLY));
            return 0;
    }
    ----------
    
    When TTY hangup happens, port->count needs to be reset via
    "struct tty_operations"->hangup callback.
    
    [1] https://syzkaller.appspot.com/bug?id=39ea6caa479af471183997376dc7e90bc7d64a6a
    
    Reported-by: syzbot <syzbot+43e93968b964e369db0b@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+3ed715090790806d8b18@syzkaller.appspotmail.com>
    Tested-by: syzbot <syzbot+43e93968b964e369db0b@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: 24b4b67d17c308aa ("add ttyprintk driver")
    Link: https://lore.kernel.org/r/17e0652d-89b7-c8c0-fb53-e7566ac9add4@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aac05d8ab50d9f0b18a3f03bb8f88b6c917b6d57
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon Apr 19 21:48:09 2021 -0700

    Drivers: hv: vmbus: Increase wait time for VMbus unload
    
    [ Upstream commit 77db0ec8b7764cb9b09b78066ebfd47b2c0c1909 ]
    
    When running in Azure, disks may be connected to a Linux VM with
    read/write caching enabled. If a VM panics and issues a VMbus
    UNLOAD request to Hyper-V, the response is delayed until all dirty
    data in the disk cache is flushed.  In extreme cases, this flushing
    can take 10's of seconds, depending on the disk speed and the amount
    of dirty data. If kdump is configured for the VM, the current 10 second
    timeout in vmbus_wait_for_unload() may be exceeded, and the UNLOAD
    complete message may arrive well after the kdump kernel is already
    running, causing problems.  Note that no problem occurs if kdump is
    not enabled because Hyper-V waits for the cache flush before doing
    a reboot through the BIOS/UEFI code.
    
    Fix this problem by increasing the timeout in vmbus_wait_for_unload()
    to 100 seconds. Also output periodic messages so that if anyone is
    watching the serial console, they won't think the VM is completely
    hung.
    
    Fixes: 911e1987efc8 ("Drivers: hv: vmbus: Add timeout to vmbus_wait_for_unload")
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/1618894089-126662-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3733eb34aa44bd62b4379303d148a20ff653c9c
Author: Ingo Molnar <mingo@kernel.org>
Date:   Tue Apr 20 09:47:42 2021 +0200

    x86/platform/uv: Fix !KEXEC build failure
    
    [ Upstream commit c2209ea55612efac75de0a58ef5f7394fae7fa0f ]
    
    When KEXEC is disabled, the UV build fails:
    
      arch/x86/platform/uv/uv_nmi.c:875:14: error: ‘uv_nmi_kexec_failed’ undeclared (first use in this function)
    
    Since uv_nmi_kexec_failed is only defined in the KEXEC_CORE #ifdef branch,
    this code cannot ever have been build tested:
    
            if (main)
                    pr_err("UV: NMI kdump: KEXEC not supported in this kernel\n");
            atomic_set(&uv_nmi_kexec_failed, 1);
    
    Nor is this use possible in uv_handle_nmi():
    
                    atomic_set(&uv_nmi_kexec_failed, 0);
    
    These bugs were introduced in this commit:
    
        d0a9964e9873: ("x86/platform/uv: Implement simple dump failover if kdump fails")
    
    Which added the uv_nmi_kexec_failed assignments to !KEXEC code, while making the
    definition KEXEC-only - apparently without testing the !KEXEC case.
    
    Instead of complicating the #ifdef maze, simplify the code by requiring X86_UV
    to depend on KEXEC_CORE. This pattern is present in other architectures as well.
    
    ( We'll remove the untested, 7 years old !KEXEC complications from the file in a
      separate commit. )
    
    Fixes: d0a9964e9873: ("x86/platform/uv: Implement simple dump failover if kdump fails")
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Mike Travis <travis@sgi.com>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7f18e41f28df08184844d7bd4fcc1247c14b28a
Author: Steffen Dirkwinkel <s.dirkwinkel@beckhoff.com>
Date:   Mon Apr 12 15:30:06 2021 +0200

    platform/x86: pmc_atom: Match all Beckhoff Automation baytrail boards with critclk_systems DMI table
    
    [ Upstream commit d21e5abd3a005253eb033090aab2e43bce090d89 ]
    
    pmc_plt_clk* clocks are used for ethernet controllers, so need to stay
    turned on. This adds the affected board family to critclk_systems DMI
    table, so the clocks are marked as CLK_CRITICAL and not turned off.
    
    This replaces the previously listed boards with a match for the whole
    device family CBxx63. CBxx63 matches only baytrail devices.
    There are new affected boards that would otherwise need to be listed.
    There are unaffected boards in the family, but having the clocks
    turned on is not an issue.
    
    Fixes: 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Steffen Dirkwinkel <s.dirkwinkel@beckhoff.com>
    Link: https://lore.kernel.org/r/20210412133006.397679-1-linux-kernel-dev@beckhoff.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 089e8c136cda08dd418e82a475c870b844e59261
Author: He Ying <heying24@huawei.com>
Date:   Tue Apr 6 05:42:00 2021 -0400

    firmware: qcom-scm: Fix QCOM_SCM configuration
    
    [ Upstream commit 2954a6f12f250890ec2433cec03ba92784d613e8 ]
    
    When CONFIG_QCOM_SCM is y and CONFIG_HAVE_ARM_SMCCC
    is not set, compiling errors are encountered as follows:
    
    drivers/firmware/qcom_scm-smc.o: In function `__scm_smc_do_quirk':
    qcom_scm-smc.c:(.text+0x36): undefined reference to `__arm_smccc_smc'
    drivers/firmware/qcom_scm-legacy.o: In function `scm_legacy_call':
    qcom_scm-legacy.c:(.text+0xe2): undefined reference to `__arm_smccc_smc'
    drivers/firmware/qcom_scm-legacy.o: In function `scm_legacy_call_atomic':
    qcom_scm-legacy.c:(.text+0x1f0): undefined reference to `__arm_smccc_smc'
    
    Note that __arm_smccc_smc is defined when HAVE_ARM_SMCCC is y.
    So add dependency on HAVE_ARM_SMCCC in QCOM_SCM configuration.
    
    Fixes: 916f743da354 ("firmware: qcom: scm: Move the scm driver to drivers/firmware")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: He Ying <heying24@huawei.com>
    Link: https://lore.kernel.org/r/20210406094200.60952-1-heying24@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c88dc3b6101d029cd36a72f51f0d2c3cf389738
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Apr 7 11:52:02 2021 +0200

    tty: fix return value for unsupported ioctls
    
    [ Upstream commit 1b8b20868a6d64cfe8174a21b25b74367bdf0560 ]
    
    Drivers should return -ENOTTY ("Inappropriate I/O control operation")
    when an ioctl isn't supported, while -EINVAL is used for invalid
    arguments.
    
    Fix up the TIOCMGET, TIOCMSET and TIOCGICOUNT helpers which returned
    -EINVAL when a tty driver did not implement the corresponding
    operations.
    
    Note that the TIOCMGET and TIOCMSET helpers predate git and do not get a
    corresponding Fixes tag below.
    
    Fixes: d281da7ff6f7 ("tty: Make tiocgicount a handler")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210407095208.31838-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c1fbf6d3ef2ad60292660ba3d0c48184ee3239a
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Apr 7 11:52:01 2021 +0200

    tty: actually undefine superseded ASYNC flags
    
    [ Upstream commit d09845e98a05850a8094ea8fd6dd09a8e6824fff ]
    
    Some kernel-internal ASYNC flags have been superseded by tty-port flags
    and should no longer be used by kernel drivers.
    
    Fix the misspelled "__KERNEL__" compile guards which failed their sole
    purpose to break out-of-tree drivers that have not yet been updated.
    
    Fixes: 5c0517fefc92 ("tty: core: Undefine ASYNC_* flags superceded by TTY_PORT* flags")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210407095208.31838-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e782cac2bd78597eaf1424d71bad51457f732df
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Apr 8 15:16:01 2021 +0200

    USB: cdc-acm: fix unprivileged TIOCCSERIAL
    
    [ Upstream commit dd5619582d60007139f0447382d2839f4f9e339b ]
    
    TIOCSSERIAL is a horrid, underspecified, legacy interface which for most
    serial devices is only useful for setting the close_delay and
    closing_wait parameters.
    
    A non-privileged user has only ever been able to set the since long
    deprecated ASYNC_SPD flags and trying to change any other *supported*
    feature should result in -EPERM being returned. Setting the current
    values for any supported features should return success.
    
    Fix the cdc-acm implementation which instead indicated that the
    TIOCSSERIAL ioctl was not even implemented when a non-privileged user
    set the current values.
    
    Fixes: ba2d8ce9db0a ("cdc-acm: implement TIOCSSERIAL to avoid blocking close(2)")
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210408131602.27956-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e72eb56c93dfa31b3bd5f5b74fcdfd232b944bc4
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Apr 6 19:45:10 2021 +0100

    usb: gadget: r8a66597: Add missing null check on return from platform_get_resource
    
    [ Upstream commit 9c2076090c2815fe7c49676df68dde7e60a9b9fc ]
    
    The call to platform_get_resource can potentially return a NULL pointer
    on failure, so add this check and return -EINVAL if it fails.
    
    Fixes: c41442474a26 ("usb: gadget: R8A66597 peripheral controller support.")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Addresses-Coverity: ("Dereference null return")
    Link: https://lore.kernel.org/r/20210406184510.433497-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d39adccb435846c4b01abb64c40b979c9aee4021
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Fri Apr 2 10:13:48 2021 -0700

    crypto: qat - Fix a double free in adf_create_ring
    
    [ Upstream commit f7cae626cabb3350b23722b78fe34dd7a615ca04 ]
    
    In adf_create_ring, if the callee adf_init_ring() failed, the callee will
    free the ring->base_addr by dma_free_coherent() and return -EFAULT. Then
    adf_create_ring will goto err and the ring->base_addr will be freed again
    in adf_cleanup_ring().
    
    My patch sets ring->base_addr to NULL after the first freed to avoid the
    double free.
    
    Fixes: a672a9dc872ec ("crypto: qat - Intel(R) QAT transport code")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d73b83efe2f36dc98cd85e06f6e5c0afb7a9b61f
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Apr 7 14:30:48 2021 -0700

    ACPI: CPPC: Replace cppc_attr with kobj_attribute
    
    [ Upstream commit 2bc6262c6117dd18106d5aa50d53e945b5d99c51 ]
    
    All of the CPPC sysfs show functions are called via indirect call in
    kobj_attr_show(), where they should be of type
    
    ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr, char *buf);
    
    because that is the type of the ->show() member in
    'struct kobj_attribute' but they are actually of type
    
    ssize_t (*show)(struct kobject *kobj, struct attribute *attr, char *buf);
    
    because of the ->show() member in 'struct cppc_attr', resulting in a
    Control Flow Integrity violation [1].
    
    $ cat /sys/devices/system/cpu/cpu0/acpi_cppc/highest_perf
    3400
    
    $ dmesg | grep "CFI failure"
    [  175.970559] CFI failure (target: show_highest_perf+0x0/0x8):
    
    As far as I can tell, the only difference between 'struct cppc_attr'
    and 'struct kobj_attribute' aside from the type of the attr parameter
    is the type of the count parameter in the ->store() member (ssize_t vs.
    size_t), which does not actually matter because all of these nodes are
    read-only.
    
    Eliminate 'struct cppc_attr' in favor of 'struct kobj_attribute' to fix
    the violation.
    
    [1]: https://lore.kernel.org/r/20210401233216.2540591-1-samitolvanen@google.com/
    
    Fixes: 158c998ea44b ("ACPI / CPPC: add sysfs support to compute delivered performance")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1343
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2deb1a18b75c8e9ddbe9e3f08cadfc102c82908
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Thu Jan 7 15:25:26 2021 -0800

    soc: qcom: mdt_loader: Detect truncated read of segments
    
    [ Upstream commit 0648c55e3a21ccd816e99b6600d6199fbf39d23a ]
    
    Given that no validation of how much data the firmware loader read in
    for a given segment truncated segment files would best case result in a
    hash verification failure, without any indication of what went wrong.
    
    Improve this by validating that the firmware loader did return the
    amount of data requested.
    
    Fixes: 445c2410a449 ("soc: qcom: mdt_loader: Use request_firmware_into_buf()")
    Reviewed-by: Sibi Sankar <sibis@codeaurora.org>
    Link: https://lore.kernel.org/r/20210107232526.716989-1-bjorn.andersson@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd2aea4b01167f51d991b08243ff8974799c3a7a
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Thu Jan 7 15:31:19 2021 -0800

    soc: qcom: mdt_loader: Validate that p_filesz < p_memsz
    
    [ Upstream commit 84168d1b54e76a1bcb5192991adde5176abe02e3 ]
    
    The code validates that segments of p_memsz bytes of a segment will fit
    in the provided memory region, but does not validate that p_filesz bytes
    will, which means that an incorrectly crafted ELF header might write
    beyond the provided memory region.
    
    Fixes: 051fb70fd4ea ("remoteproc: qcom: Driver for the self-authenticating Hexagon v5")
    Reviewed-by: Sibi Sankar <sibis@codeaurora.org>
    Link: https://lore.kernel.org/r/20210107233119.717173-1-bjorn.andersson@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e029707f50a82c53172359c686b2536ab54e58c
Author: William A. Kennington III <wak@google.com>
Date:   Wed Apr 7 02:55:27 2021 -0700

    spi: Fix use-after-free with devm_spi_alloc_*
    
    [ Upstream commit 794aaf01444d4e765e2b067cba01cc69c1c68ed9 ]
    
    We can't rely on the contents of the devres list during
    spi_unregister_controller(), as the list is already torn down at the
    time we perform devres_find() for devm_spi_release_controller. This
    causes devices registered with devm_spi_alloc_{master,slave}() to be
    mistakenly identified as legacy, non-devm managed devices and have their
    reference counters decremented below 0.
    
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 660 at lib/refcount.c:28 refcount_warn_saturate+0x108/0x174
    [<b0396f04>] (refcount_warn_saturate) from [<b03c56a4>] (kobject_put+0x90/0x98)
    [<b03c5614>] (kobject_put) from [<b0447b4c>] (put_device+0x20/0x24)
     r4:b6700140
    [<b0447b2c>] (put_device) from [<b07515e8>] (devm_spi_release_controller+0x3c/0x40)
    [<b07515ac>] (devm_spi_release_controller) from [<b045343c>] (release_nodes+0x84/0xc4)
     r5:b6700180 r4:b6700100
    [<b04533b8>] (release_nodes) from [<b0454160>] (devres_release_all+0x5c/0x60)
     r8:b1638c54 r7:b117ad94 r6:b1638c10 r5:b117ad94 r4:b163dc10
    [<b0454104>] (devres_release_all) from [<b044e41c>] (__device_release_driver+0x144/0x1ec)
     r5:b117ad94 r4:b163dc10
    [<b044e2d8>] (__device_release_driver) from [<b044f70c>] (device_driver_detach+0x84/0xa0)
     r9:00000000 r8:00000000 r7:b117ad94 r6:b163dc54 r5:b1638c10 r4:b163dc10
    [<b044f688>] (device_driver_detach) from [<b044d274>] (unbind_store+0xe4/0xf8)
    
    Instead, determine the devm allocation state as a flag on the
    controller which is guaranteed to be stable during cleanup.
    
    Fixes: 5e844cc37a5c ("spi: Introduce device-managed SPI controller allocation")
    Signed-off-by: William A. Kennington III <wak@google.com>
    Link: https://lore.kernel.org/r/20210407095527.2771582-1-wak@google.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 054ff049eb334ce90bb6d9f99136abde6809ecf4
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Apr 7 12:23:24 2021 +0200

    staging: greybus: uart: fix unprivileged TIOCCSERIAL
    
    [ Upstream commit 60c6b305c11b5fd167ce5e2ce42f3a9098c388f0 ]
    
    TIOCSSERIAL is a horrid, underspecified, legacy interface which for most
    serial devices is only useful for setting the close_delay and
    closing_wait parameters.
    
    A non-privileged user has only ever been able to set the since long
    deprecated ASYNC_SPD flags and trying to change any other *supported*
    feature should result in -EPERM being returned. Setting the current
    values for any supported features should return success.
    
    Fix the greybus implementation which instead indicated that the
    TIOCSSERIAL ioctl was not even implemented when a non-privileged user
    set the current values.
    
    Fixes: e68453ed28c5 ("greybus: uart-gb: now builds, more framework added")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210407102334.32361-7-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74401dbfdbcd497af4bd57909fe47498dce4a3ad
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Apr 7 16:03:08 2021 +0100

    staging: rtl8192u: Fix potential infinite loop
    
    [ Upstream commit f9b9263a25dc3d2eaaa829e207434db6951ca7bc ]
    
    The for-loop iterates with a u8 loop counter i and compares this
    with the loop upper limit of riv->ieee80211->LinkDetectInfo.SlotNum
    that is a u16 type. There is a potential infinite loop if SlotNum
    is larger than the u8 loop counter. Fix this by making the loop
    counter the same type as SlotNum.
    
    Addresses-Coverity: ("Infinite loop")
    Fixes: 8fc8598e61f6 ("Staging: Added Realtek rtl8192u driver to staging")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210407150308.496623-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8adf43281a4e54fce1281200842611d88ad768b7
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Fri Apr 2 23:09:05 2021 -0700

    mtd: rawnand: gpmi: Fix a double free in gpmi_nand_init
    
    [ Upstream commit 076de75de1e53160e9b099f75872c1f9adf41a0b ]
    
    If the callee gpmi_alloc_dma_buffer() failed to alloc memory for
    this->raw_buffer, gpmi_free_dma_buffer() will be called to free
    this->auxiliary_virt. But this->auxiliary_virt is still a non-NULL
    and valid ptr.
    
    Then gpmi_alloc_dma_buffer() returns err and gpmi_free_dma_buffer()
    is called again to free this->auxiliary_virt in err_out. This causes
    a double free.
    
    As gpmi_free_dma_buffer() has already called in gpmi_alloc_dma_buffer's
    error path, so it should return err directly instead of releasing the dma
    buffer again.
    
    Fixes: 4d02423e9afe6 ("mtd: nand: gpmi: Fix gpmi_nand_init() error path")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20210403060905.5251-1-lyl2019@mail.ustc.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23730b78c6d9d94f97bc05e62857ed515dc985c4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Mar 30 21:01:59 2021 +0800

    USB: gadget: udc: fix wrong pointer passed to IS_ERR() and PTR_ERR()
    
    [ Upstream commit 2e3d055bf27d70204cae349335a62a4f9b7c165a ]
    
    IS_ERR() and PTR_ERR() use wrong pointer, it should be
    udc->virt_addr, fix it.
    
    Fixes: 1b9f35adb0ff ("usb: gadget: udc: Add Synopsys UDC Platform driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20210330130159.1051979-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae14766dd8e396513b15968c03a51d1826396a0c
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Thu Mar 25 08:34:18 2021 +0000

    crypto: qat - fix error path in adf_isr_resource_alloc()
    
    [ Upstream commit 83dc1173d73f80cbce2fee4d308f51f87b2f26ae ]
    
    The function adf_isr_resource_alloc() is not unwinding correctly in case
    of error.
    This patch fixes the error paths and propagate the errors to the caller.
    
    Fixes: 7afa232e76ce ("crypto: qat - Intel(R) QAT DH895xcc accelerator")
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a95dc6c2e4b5e259f38e495b1cf3070179e31cc9
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Feb 8 16:02:52 2021 +0100

    phy: marvell: ARMADA375_USBCLUSTER_PHY should not default to y, unconditionally
    
    [ Upstream commit 6cb17707aad869de163d7bf42c253caf501be4e2 ]
    
    Merely enabling CONFIG_COMPILE_TEST should not enable additional code.
    To fix this, restrict the automatic enabling of ARMADA375_USBCLUSTER_PHY
    to MACH_ARMADA_375, and ask the user in case of compile-testing.
    
    Fixes: eee47538ec1f2619 ("phy: add support for USB cluster on the Armada 375 SoC")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20210208150252.424706-1-geert+renesas@glider.be
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94810fc52925eb122a922df7f9966cf3f4ba7391
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 03:49:07 2021 -0800

    bus: qcom: Put child node before return
    
    [ Upstream commit ac6ad7c2a862d682bb584a4bc904d89fa7721af8 ]
    
    Put child node before return to fix potential reference count leak.
    Generally, the reference count of child is incremented and decremented
    automatically in the macro for_each_available_child_of_node() and should
    be decremented manually if the loop is broken in loop body.
    
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Fixes: 335a12754808 ("bus: qcom: add EBI2 driver")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/20210121114907.109267-1-bianpan2016@163.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f73b29819c6314c0ba8b7d5892dfb03487424bee
Author: Michael Walle <michael@walle.cc>
Date:   Wed Mar 3 16:57:35 2021 +0100

    mtd: require write permissions for locking and badblock ioctls
    
    [ Upstream commit 1e97743fd180981bef5f01402342bb54bf1c6366 ]
    
    MEMLOCK, MEMUNLOCK and OTPLOCK modify protection bits. Thus require
    write permission. Depending on the hardware MEMLOCK might even be
    write-once, e.g. for SPI-NOR flashes with their WP# tied to GND. OTPLOCK
    is always write-once.
    
    MEMSETBADBLOCK modifies the bad block table.
    
    Fixes: f7e6b19bc764 ("mtd: properly check all write ioctls for permissions")
    Signed-off-by: Michael Walle <michael@walle.cc>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Rafał Miłecki <rafal@milecki.pl>
    Acked-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20210303155735.25887-1-michael@walle.cc
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 105250f4d9778ebf0cc8fae43154bf8fcda10a85
Author: Fabian Vogt <fabian@ritter-vogt.de>
Date:   Wed Mar 24 15:11:15 2021 +0100

    fotg210-udc: Complete OUT requests on short packets
    
    [ Upstream commit 75bb93be0027123b5db6cbcce89eb62f0f6b3c5b ]
    
    A short packet indicates the end of a transfer and marks the request as
    complete.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Signed-off-by: Fabian Vogt <fabian@ritter-vogt.de>
    Link: https://lore.kernel.org/r/20210324141115.9384-8-fabian@ritter-vogt.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a743f40da6fa42611355ac641c5c3c85132a2940
Author: Fabian Vogt <fabian@ritter-vogt.de>
Date:   Wed Mar 24 15:11:14 2021 +0100

    fotg210-udc: Don't DMA more than the buffer can take
    
    [ Upstream commit 3e7c2510bdfe89a9ec223dd7acd6bfc8bb1cbeb6 ]
    
    Before this, it wrote as much as available into the buffer, even if it
    didn't fit.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Signed-off-by: Fabian Vogt <fabian@ritter-vogt.de>
    Link: https://lore.kernel.org/r/20210324141115.9384-7-fabian@ritter-vogt.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae293c4addcc48ac3d50d491a0f81335beb3327a
Author: Fabian Vogt <fabian@ritter-vogt.de>
Date:   Wed Mar 24 15:11:12 2021 +0100

    fotg210-udc: Mask GRP2 interrupts we don't handle
    
    [ Upstream commit 9aee3a23d6455200702f3a57e731fa11e8408667 ]
    
    Currently it leaves unhandled interrupts unmasked, but those are never
    acked. In the case of a "device idle" interrupt, this leads to an
    effectively frozen system until plugging it in.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Signed-off-by: Fabian Vogt <fabian@ritter-vogt.de>
    Link: https://lore.kernel.org/r/20210324141115.9384-5-fabian@ritter-vogt.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03d58f7b6aaf903471b6caf83b0616229980047c
Author: Fabian Vogt <fabian@ritter-vogt.de>
Date:   Wed Mar 24 15:11:11 2021 +0100

    fotg210-udc: Remove a dubious condition leading to fotg210_done
    
    [ Upstream commit c7f755b243494d6043aadcd9a2989cb157958b95 ]
    
    When the EP0 IN request was not completed but less than a packet sent,
    it would complete the request successfully. That doesn't make sense
    and can't really happen as fotg210_start_dma always sends
    min(length, maxpkt) bytes.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Signed-off-by: Fabian Vogt <fabian@ritter-vogt.de>
    Link: https://lore.kernel.org/r/20210324141115.9384-4-fabian@ritter-vogt.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a378db946ec4c662f0c02f4036d6e1543d766d3
Author: Fabian Vogt <fabian@ritter-vogt.de>
Date:   Wed Mar 24 15:11:10 2021 +0100

    fotg210-udc: Fix EP0 IN requests bigger than two packets
    
    [ Upstream commit 078ba935651e149c92c41161e0322e3372cc2705 ]
    
    For a 134 Byte packet, it sends the first two 64 Byte packets just fine,
    but then notice that less than a packet is remaining and call fotg210_done
    without actually sending the rest.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Signed-off-by: Fabian Vogt <fabian@ritter-vogt.de>
    Link: https://lore.kernel.org/r/20210324141115.9384-3-fabian@ritter-vogt.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf29f510a3b9040a6bc311efb257e580bca3a927
Author: Fabian Vogt <fabian@ritter-vogt.de>
Date:   Wed Mar 24 15:11:09 2021 +0100

    fotg210-udc: Fix DMA on EP0 for length > max packet size
    
    [ Upstream commit 755915fc28edfc608fa89a163014acb2f31c1e19 ]
    
    For a 75 Byte request, it would send the first 64 separately, then detect
    that the remaining 11 Byte fit into a single DMA, but due to this bug set
    the length to the original 75 Bytes. This leads to a DMA failure (which is
    ignored...) and the request completes without the remaining bytes having
    been sent.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Signed-off-by: Fabian Vogt <fabian@ritter-vogt.de>
    Link: https://lore.kernel.org/r/20210324141115.9384-2-fabian@ritter-vogt.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 446045cf682af12d9294765f6c46084b374b5654
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Thu Mar 18 23:40:00 2021 -0400

    crypto: qat - ADF_STATUS_PF_RUNNING should be set after adf_dev_init
    
    [ Upstream commit 8609f5cfdc872fc3a462efa6a3eca5cb1e2f6446 ]
    
    ADF_STATUS_PF_RUNNING is (only) used and checked by adf_vf2pf_shutdown()
    before calling adf_iov_putmsg()->mutex_lock(vf2pf_lock), however the
    vf2pf_lock is initialized in adf_dev_init(), which can fail and when it
    fail, the vf2pf_lock is either not initialized or destroyed, a subsequent
    use of vf2pf_lock will cause issue.
    To fix this issue, only set this flag if adf_dev_init() returns 0.
    
    [    7.178404] BUG: KASAN: user-memory-access in __mutex_lock.isra.0+0x1ac/0x7c0
    [    7.180345] Call Trace:
    [    7.182576]  mutex_lock+0xc9/0xd0
    [    7.183257]  adf_iov_putmsg+0x118/0x1a0 [intel_qat]
    [    7.183541]  adf_vf2pf_shutdown+0x4d/0x7b [intel_qat]
    [    7.183834]  adf_dev_shutdown+0x172/0x2b0 [intel_qat]
    [    7.184127]  adf_probe+0x5e9/0x600 [qat_dh895xccvf]
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Fixes: 25c6ffb249f6 ("crypto: qat - check if PF is running")
    Acked-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bd377c33727c1a484226fd763400bec225be6d0
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Thu Mar 18 23:39:59 2021 -0400

    crypto: qat - don't release uninitialized resources
    
    [ Upstream commit b66accaab3791e15ac99c92f236d0d3a6d5bd64e ]
    
    adf_vf_isr_resource_alloc() is not unwinding correctly when error
    happens and it want to release uninitialized resources.
    To fix this, only release initialized resources.
    
    [    1.792845] Trying to free already-free IRQ 11
    [    1.793091] WARNING: CPU: 0 PID: 182 at kernel/irq/manage.c:1821 free_irq+0x202/0x380
    [    1.801340] Call Trace:
    [    1.801477]  adf_vf_isr_resource_free+0x32/0xb0 [intel_qat]
    [    1.801785]  adf_vf_isr_resource_alloc+0x14d/0x150 [intel_qat]
    [    1.802105]  adf_dev_init+0xba/0x140 [intel_qat]
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Fixes: dd0f368398ea ("crypto: qat - Add qat dh895xcc VF driver")
    Acked-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 291d29432767c48089de3fb8b84d77f9c8188485
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Mar 23 17:36:22 2021 +0200

    usb: gadget: pch_udc: Check for DMA mapping error
    
    [ Upstream commit 4a28d77e359009b846951b06f7c0d8eec8dce298 ]
    
    DMA mapping might fail, we have to check it with dma_mapping_error().
    Otherwise DMA-API is not happy:
    
      DMA-API: pch_udc 0000:02:02.4: device driver failed to check map error[device address=0x00000000027ee678] [size=64 bytes] [mapped as single]
    
    Fixes: abab0c67c061 ("usb: pch_udc: Fixed issue which does not work with g_serial")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210323153626.54908-3-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8aba5a795d0d51766f1d09dfdd3ef130035f1cca
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Mar 23 17:36:21 2021 +0200

    usb: gadget: pch_udc: Check if driver is present before calling ->setup()
    
    [ Upstream commit fbdbbe6d3ee502b3bdeb4f255196bb45003614be ]
    
    Since we have a separate routine for VBUS sense, the interrupt may occur
    before gadget driver is present. Hence, ->setup() call may oops the kernel:
    
    [   55.245843] BUG: kernel NULL pointer dereference, address: 00000010
    ...
    [   55.245843] EIP: pch_udc_isr.cold+0x162/0x33f
    ...
    [   55.245843]  <IRQ>
    [   55.245843]  ? pch_udc_svc_data_out+0x160/0x160
    
    Check if driver is present before calling ->setup().
    
    Fixes: f646cf94520e ("USB device driver of Topcliff PCH")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210323153626.54908-2-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 816601a1389ee157bb30c65c8a5040f1bc188319
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Mar 23 17:36:20 2021 +0200

    usb: gadget: pch_udc: Replace cpu_to_le32() by lower_32_bits()
    
    [ Upstream commit 91356fed6afd1c83bf0d3df1fc336d54e38f0458 ]
    
    Either way ~0 will be in the correct byte order, hence
    replace cpu_to_le32() by lower_32_bits(). Moreover,
    it makes sparse happy, otherwise it complains:
    
    .../pch_udc.c:1813:27: warning: incorrect type in assignment (different base types)
    .../pch_udc.c:1813:27:    expected unsigned int [usertype] dataptr
    .../pch_udc.c:1813:27:    got restricted __le32 [usertype]
    
    Fixes: f646cf94520e ("USB device driver of Topcliff PCH")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210323153626.54908-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51474bd67074f7cf6712ea8f9bbf4882ee60645e
Author: Otavio Pontes <otavio.pontes@intel.com>
Date:   Fri Mar 19 09:55:15 2021 -0700

    x86/microcode: Check for offline CPUs before requesting new microcode
    
    [ Upstream commit 7189b3c11903667808029ec9766a6e96de5012a5 ]
    
    Currently, the late microcode loading mechanism checks whether any CPUs
    are offlined, and, in such a case, aborts the load attempt.
    
    However, this must be done before the kernel caches new microcode from
    the filesystem. Otherwise, when offlined CPUs are onlined later, those
    cores are going to be updated through the CPU hotplug notifier callback
    with the new microcode, while CPUs previously onine will continue to run
    with the older microcode.
    
    For example:
    
    Turn off one core (2 threads):
    
      echo 0 > /sys/devices/system/cpu/cpu3/online
      echo 0 > /sys/devices/system/cpu/cpu1/online
    
    Install the ucode fails because a primary SMT thread is offline:
    
      cp intel-ucode/06-8e-09 /lib/firmware/intel-ucode/
      echo 1 > /sys/devices/system/cpu/microcode/reload
      bash: echo: write error: Invalid argument
    
    Turn the core back on
    
      echo 1 > /sys/devices/system/cpu/cpu3/online
      echo 1 > /sys/devices/system/cpu/cpu1/online
      cat /proc/cpuinfo |grep microcode
      microcode : 0x30
      microcode : 0xde
      microcode : 0x30
      microcode : 0xde
    
    The rationale for why the update is aborted when at least one primary
    thread is offline is because even if that thread is soft-offlined
    and idle, it will still have to participate in broadcasted MCE's
    synchronization dance or enter SMM, and in both examples it will execute
    instructions so it better have the same microcode revision as the other
    cores.
    
     [ bp: Heavily edit and extend commit message with the reasoning behind all
       this. ]
    
    Fixes: 30ec26da9967 ("x86/microcode: Do not upload microcode if CPUs are offline")
    Signed-off-by: Otavio Pontes <otavio.pontes@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Ashok Raj <ashok.raj@intel.com>
    Link: https://lkml.kernel.org/r/20210319165515.9240-2-otavio.pontes@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3f6e13133d98dc5e662922cd220ef40422ea46d
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Wed Mar 3 23:09:31 2021 -0800

    usb: typec: tcpci: Check ROLE_CONTROL while interpreting CC_STATUS
    
    [ Upstream commit 19c234a14eafca78e0bc14ffb8be3891096ce147 ]
    
    While interpreting CC_STATUS, ROLE_CONTROL has to be read to make
    sure that CC1/CC2 is not forced presenting Rp/Rd.
    
    >From the TCPCI spec:
    
    4.4.5.2 ROLE_CONTROL (Normative):
    The TCPM shall write B6 (DRP) = 0b and B3..0 (CC1/CC2) if it wishes
    to control the Rp/Rd directly instead of having the TCPC perform
    DRP toggling autonomously. When controlling Rp/Rd directly, the
    TCPM writes to B3..0 (CC1/CC2) each time it wishes to change the
    CC1/CC2 values. This control is used for TCPM-TCPC implementing
    Source or Sink only as well as when a connection has been detected
    via DRP toggling but the TCPM wishes to attempt Try.Src or Try.Snk.
    
    Table 4-22. CC_STATUS Register Definition:
    If (ROLE_CONTROL.CC1 = Rd) or ConnectResult=1)
    00b: SNK.Open (Below maximum vRa)
    01b: SNK.Default (Above minimum vRd-Connect)
    10b: SNK.Power1.5 (Above minimum vRd-Connect) Detects Rp-1.5A
    11b: SNK.Power3.0 (Above minimum vRd-Connect) Detects Rp-3.0A
    
    If (ROLE_CONTROL.CC2=Rd) or (ConnectResult=1)
    00b: SNK.Open (Below maximum vRa)
    01b: SNK.Default (Above minimum vRd-Connect)
    10b: SNK.Power1.5 (Above minimum vRd-Connect) Detects Rp 1.5A
    11b: SNK.Power3.0 (Above minimum vRd-Connect) Detects Rp 3.0A
    
    Fixes: 74e656d6b0551 ("staging: typec: Type-C Port Controller Interface driver (tcpci)")
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Link: https://lore.kernel.org/r/20210304070931.1947316-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b705122808cbe390e287a322361d256f1dd967bb
Author: Erwan Le Ray <erwan.leray@foss.st.com>
Date:   Thu Mar 4 17:23:07 2021 +0100

    serial: stm32: fix tx_empty condition
    
    [ Upstream commit 3db1d52466dc11dca4e47ef12a6e6e97f846af62 ]
    
    In "tx_empty", we should poll TC bit in both DMA and PIO modes (instead of
    TXE) to check transmission data register has been transmitted independently
    of the FIFO mode. TC indicates that both transmit register and shift
    register are empty. When shift register is empty, tx_empty should return
    TIOCSER_TEMT instead of TC value.
    
    Cleans the USART_CR_TC TCCF register define (transmission complete clear
    flag) as it is duplicate of USART_ICR_TCCF.
    
    Fixes: 48a6092fb41f ("serial: stm32-usart: Add STM32 USART Driver")
    Signed-off-by: Erwan Le Ray <erwan.leray@foss.st.com>
    Link: https://lore.kernel.org/r/20210304162308.8984-13-erwan.leray@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f19d2af5680d566fe76d20085e9c16bf95a9e02
Author: Erwan Le Ray <erwan.leray@foss.st.com>
Date:   Thu Mar 4 17:22:58 2021 +0100

    serial: stm32: fix incorrect characters on console
    
    [ Upstream commit f264c6f6aece81a9f8fbdf912b20bd3feb476a7a ]
    
    Incorrect characters are observed on console during boot. This issue occurs
    when init/main.c is modifying termios settings to open /dev/console on the
    rootfs.
    
    This patch adds a waiting loop in set_termios to wait for TX shift register
    empty (and TX FIFO if any) before stopping serial port.
    
    Fixes: 48a6092fb41f ("serial: stm32-usart: Add STM32 USART Driver")
    Signed-off-by: Erwan Le Ray <erwan.leray@foss.st.com>
    Link: https://lore.kernel.org/r/20210304162308.8984-4-erwan.leray@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c26aaf5e2f50ea911abb40f0bb04d4a293738e1
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:25:25 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on Snow
    
    [ Upstream commit 8987efbb17c2522be8615085df9a14da2ab53d34 ]
    
    The Maxim PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Additionally, the interrupt line is shared so using level sensitive
    interrupt is here especially important to avoid races.
    
    Fixes: c61248afa819 ("ARM: dts: Add max77686 RTC interrupt to cros5250-common")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201210212534.216197-9-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cdb4d32175a8986e12c7087d5ee645256b0cd3b
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:25:24 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on SMDK5250
    
    [ Upstream commit f6368c60561370e4a92fac22982a3bd656172170 ]
    
    The Maxim PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Additionally, the interrupt line is shared so using level sensitive
    interrupt is here especially important to avoid races.
    
    Fixes: 47580e8d94c2 ("ARM: dts: Specify MAX77686 pmic interrupt for exynos5250-smdk5250")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201210212534.216197-8-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e43e78de517212ffb810fde839d86fd2779ff5f
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:25:22 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on Odroid X/U3 family
    
    [ Upstream commit 6503c568e97a52f8b7a3109718db438e52e59485 ]
    
    The Maxim PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Additionally, the interrupt line is shared so using level sensitive
    interrupt is here especially important to avoid races.
    
    Fixes: eea6653aae7b ("ARM: dts: Enable PMIC interrupts for exynos4412-odroid-common")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201210212534.216197-6-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8a31682e3ea3a2a37229d902779c1335026475c
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Feb 23 19:38:21 2021 +0000

    memory: gpmc: fix out of bounds read and dereference on gpmc_cs[]
    
    [ Upstream commit e004c3e67b6459c99285b18366a71af467d869f5 ]
    
    Currently the array gpmc_cs is indexed by cs before it cs is range checked
    and the pointer read from this out-of-index read is dereferenced. Fix this
    by performing the range check on cs before the read and the following
    pointer dereference.
    
    Addresses-Coverity: ("Negative array index read")
    Fixes: 9ed7a776eb50 ("ARM: OMAP2+: Fix support for multiple devices on a GPMC chip select")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210223193821.17232-1-colin.king@canonical.com
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0565b7b968885d7519b30fb802a7a1d4f50bfb9
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Mar 23 17:36:24 2021 +0200

    usb: gadget: pch_udc: Revert d3cb25a12138 completely
    
    commit 50a318cc9b54a36f00beadf77e578a50f3620477 upstream.
    
    The commit d3cb25a12138 ("usb: gadget: udc: fix spin_lock in pch_udc")
    obviously was not thought through and had made the situation even worse
    than it was before. Two changes after almost reverted it. but a few
    leftovers have been left as it. With this revert d3cb25a12138 completely.
    
    While at it, narrow down the scope of unlocked section to prevent
    potential race when prot_stall is assigned.
    
    Fixes: d3cb25a12138 ("usb: gadget: udc: fix spin_lock in pch_udc")
    Fixes: 9903b6bedd38 ("usb: gadget: pch-udc: fix lock")
    Fixes: 1d23d16a88e6 ("usb: gadget: pch_udc: reorder spin_[un]lock to avoid deadlock")
    Cc: Iago Abal <mail@iagoabal.eu>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210323153626.54908-5-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3c851077a989841c814a9b3fec9b565345b1b19
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>
Date:   Mon Mar 22 15:05:58 2021 +0100

    KVM: s390: split kvm_s390_real_to_abs
    
    commit c5d1f6b531e68888cbe6718b3f77a60115d58b9c upstream.
    
    A new function _kvm_s390_real_to_abs will apply prefixing to a real address
    with a given prefix value.
    
    The old kvm_s390_real_to_abs becomes now a wrapper around the new function.
    
    This is needed to avoid code duplication in vSIE.
    
    Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210322140559.500716-2-imbrenda@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26249c34e383425b21126faa89aa4fa5008dd0f4
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Thu Apr 15 10:01:27 2021 +0200

    KVM: s390: fix guarded storage control register handling
    
    commit 44bada28219031f9e8e86b84460606efa57b871e upstream.
    
    store_regs_fmt2() has an ordering problem: first the guarded storage
    facility is enabled on the local cpu, then preemption disabled, and
    then the STGSC (store guarded storage controls) instruction is
    executed.
    
    If the process gets scheduled away between enabling the guarded
    storage facility and before preemption is disabled, this might lead to
    a special operation exception and therefore kernel crash as soon as
    the process is scheduled back and the STGSC instruction is executed.
    
    Fixes: 4e0b1ab72b8a ("KVM: s390: gs support for kvm guests")
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Cc: <stable@vger.kernel.org> # 4.12
    Link: https://lore.kernel.org/r/20210415080127.1061275-1-hca@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8773039dca7f54f95da8be55312e320954fed487
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>
Date:   Tue Mar 2 13:36:44 2021 +0100

    KVM: s390: split kvm_s390_logical_to_effective
    
    commit f85f1baaa18932a041fd2b1c2ca6cfd9898c7d2b upstream.
    
    Split kvm_s390_logical_to_effective to a generic function called
    _kvm_s390_logical_to_effective. The new function takes a PSW and an address
    and returns the address with the appropriate bits masked off. The old
    function now calls the new function with the appropriate PSW from the vCPU.
    
    This is needed to avoid code duplication for vSIE.
    
    Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: stable@vger.kernel.org # for VSIE: correctly handle MVPG when in VSIE
    Link: https://lore.kernel.org/r/20210302174443.514363-2-imbrenda@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2814c8facbaee5f46b589c4b3b7706fd3626e412
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue May 4 15:56:31 2021 -0700

    x86/cpu: Initialize MSR_TSC_AUX if RDTSCP *or* RDPID is supported
    
    commit b6b4fbd90b155a0025223df2c137af8a701d53b3 upstream.
    
    Initialize MSR_TSC_AUX with CPU node information if RDTSCP or RDPID is
    supported.  This fixes a bug where vdso_read_cpunode() will read garbage
    via RDPID if RDPID is supported but RDTSCP is not.  While no known CPU
    supports RDPID but not RDTSCP, both Intel's SDM and AMD's APM allow for
    RDPID to exist without RDTSCP, e.g. it's technically a legal CPU model
    for a virtual machine.
    
    Note, technically MSR_TSC_AUX could be initialized if and only if RDPID
    is supported since RDTSCP is currently not used to retrieve the CPU node.
    But, the cost of the superfluous WRMSR is negigible, whereas leaving
    MSR_TSC_AUX uninitialized is just asking for future breakage if someone
    decides to utilize RDTSCP.
    
    Fixes: a582c540ac1b ("x86/vdso: Use RDPID in preference to LSL when available")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210504225632.1532621-2-seanjc@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca6a2b4375e9541db1fc48545d8d647c173158e4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 28 13:27:03 2021 +0200

    ALSA: hda/realtek: Remove redundant entry for ALC861 Haier/Uniwill devices
    
    commit defce244b01ee12534910a4544e11be5eb927d25 upstream.
    
    The quirk entry for Uniwill ECS M31EI is with the PCI SSID device 0,
    which means matching with all.  That is, it's essentially equivalent
    with SND_PCI_QUIRK_VENDOR(0x1584), which also matches with the
    previous entry for Haier W18 applying the very same quirk.
    
    Let's unify them with the single vendor-quirk entry.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210428112704.23967-13-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a07149068f4e37a611069c5dcd09eb765c592111
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 28 13:27:00 2021 +0200

    ALSA: hda/realtek: Re-order ALC269 Lenovo quirk table entries
    
    commit f552ff54c2a700616a02b038e4bf3cbf859f65b7 upstream.
    
    Just re-order the alc269_fixup_tbl[] entries for Lenovo devices for
    avoiding the oversight of the duplicated or unapplied item in future.
    No functional changes.
    
    Also Cc-to-stable for the further patch applications.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210428112704.23967-10-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46299e45fe2204719304d3b995a2aeedf2473ac5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 28 13:26:59 2021 +0200

    ALSA: hda/realtek: Re-order ALC269 Sony quirk table entries
    
    commit cab561f8d4bc9b196ae20c960aa5da89fd786ab5 upstream.
    
    Just re-order the alc269_fixup_tbl[] entries for Sony devices for
    avoiding the oversight of the duplicated or unapplied item in future.
    No functional changes.
    
    Also Cc-to-stable for the further patch applications.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210428112704.23967-9-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f74a0603a3e5aba2350c0c94cbe397d9dd9e8404
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 28 13:26:53 2021 +0200

    ALSA: hda/realtek: Re-order ALC882 Sony quirk table entries
    
    commit b7529c18feecb1af92f9db08c8e7fe446a82d96d upstream.
    
    Just re-order the alc882_fixup_tbl[] entries for Sony devices for
    avoiding the oversight of the duplicated or unapplied item in future.
    No functional changes.
    
    Also Cc-to-stable for the further patch applications.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210428112704.23967-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 023af8838299af5d94d333cbf1eec3e46fc30375
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 28 13:26:52 2021 +0200

    ALSA: hda/realtek: Re-order ALC882 Acer quirk table entries
    
    commit b265047ac56bad8c4f3d0c8bf9cb4e828ee0d28e upstream.
    
    Just re-order the alc882_fixup_tbl[] entries for Acer devices for
    avoiding the oversight of the duplicated or unapplied item in future.
    No functional changes.
    
    Also Cc-to-stable for the further patch applications.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210428112704.23967-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a56fa761e0094c25dcb3eab8c76fa8ad462a6236
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Mar 3 00:27:59 2021 +0000

    drm/radeon: fix copy of uninitialized variable back to userspace
    
    commit 8dbc2ccac5a65c5b57e3070e36a3dc97c7970d96 upstream.
    
    Currently the ioctl command RADEON_INFO_SI_BACKEND_ENABLED_MASK can
    copy back uninitialised data in value_tmp that pointer *value points
    to. This can occur when rdev->family is less than CHIP_BONAIRE and
    less than CHIP_TAHITI.  Fix this by adding in a missing -EINVAL
    so that no invalid value is copied back to userspace.
    
    Addresses-Coverity: ("Uninitialized scalar variable)
    Cc: stable@vger.kernel.org # 3.13+
    Fixes: 439a1cfffe2c ("drm/radeon: expose render backend mask to the userspace")
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f75374e70857587bec3908dca4aee087f58b9766
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Apr 16 09:42:14 2021 +0200

    cfg80211: scan: drop entry from hidden_list on overflow
    
    commit 010bfbe768f7ecc876ffba92db30432de4997e2a upstream.
    
    If we overflow the maximum number of BSS entries and free the
    new entry, drop it from any hidden_list that it may have been
    added to in the code above or in cfg80211_combine_bsses().
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20210416094212.5de7d1676ad7.Ied283b0bc5f504845e7d6ab90626bdfa68bb3dc0@changeid
    Cc: stable@vger.kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ac24b38290e6a8b3d63ac7ae0129ddddf45a676
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 14 11:29:55 2021 +0300

    ipw2x00: potential buffer overflow in libipw_wx_set_encodeext()
    
    commit 260a9ad9446723d4063ed802989758852809714d upstream.
    
    The "ext->key_len" is a u16 that comes from the user.  If it's over
    SCM_KEY_LEN (32) that could lead to memory corruption.
    
    Fixes: e0d369d1d969 ("[PATCH] ieee82011: Added WE-18 support to default wireless extension handler")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Stanislav Yakovlev <stas.yakovlev@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/YHaoA1i+8uT4ir4h@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6439aba8ae801997d1ef2afbbaa6aa5a89fb726
Author: Zhao Heming <heming.zhao@suse.com>
Date:   Sat Apr 3 11:01:25 2021 +0800

    md: md_open returns -EBUSY when entering racing area
    
    commit 6a4db2a60306eb65bfb14ccc9fde035b74a4b4e7 upstream.
    
    commit d3374825ce57 ("md: make devices disappear when they are no longer
    needed.") introduced protection between mddev creating & removing. The
    md_open shouldn't create mddev when all_mddevs list doesn't contain
    mddev. With currently code logic, there will be very easy to trigger
    soft lockup in non-preempt env.
    
    This patch changes md_open returning from -ERESTARTSYS to -EBUSY, which
    will break the infinitely retry when md_open enter racing area.
    
    This patch is partly fix soft lockup issue, full fix needs mddev_find
    is split into two functions: mddev_find & mddev_find_or_alloc. And
    md_open should call new mddev_find (it only does searching job).
    
    For more detail, please refer with Christoph's "split mddev_find" patch
    in later commits.
    
    *** env ***
    kvm-qemu VM 2C1G with 2 iscsi luns
    kernel should be non-preempt
    
    *** script ***
    
    about trigger every time with below script
    
    ```
    1  node1="mdcluster1"
    2  node2="mdcluster2"
    3
    4  mdadm -Ss
    5  ssh ${node2} "mdadm -Ss"
    6  wipefs -a /dev/sda /dev/sdb
    7  mdadm -CR /dev/md0 -b clustered -e 1.2 -n 2 -l mirror /dev/sda \
       /dev/sdb --assume-clean
    8
    9  for i in {1..10}; do
    10    echo ==== $i ====;
    11
    12    echo "test  ...."
    13    ssh ${node2} "mdadm -A /dev/md0 /dev/sda /dev/sdb"
    14    sleep 1
    15
    16    echo "clean  ....."
    17    ssh ${node2} "mdadm -Ss"
    18 done
    ```
    
    I use mdcluster env to trigger soft lockup, but it isn't mdcluster
    speical bug. To stop md array in mdcluster env will do more jobs than
    non-cluster array, which will leave enough time/gap to allow kernel to
    run md_open.
    
    *** stack ***
    
    ```
    [  884.226509]  mddev_put+0x1c/0xe0 [md_mod]
    [  884.226515]  md_open+0x3c/0xe0 [md_mod]
    [  884.226518]  __blkdev_get+0x30d/0x710
    [  884.226520]  ? bd_acquire+0xd0/0xd0
    [  884.226522]  blkdev_get+0x14/0x30
    [  884.226524]  do_dentry_open+0x204/0x3a0
    [  884.226531]  path_openat+0x2fc/0x1520
    [  884.226534]  ? seq_printf+0x4e/0x70
    [  884.226536]  do_filp_open+0x9b/0x110
    [  884.226542]  ? md_release+0x20/0x20 [md_mod]
    [  884.226543]  ? seq_read+0x1d8/0x3e0
    [  884.226545]  ? kmem_cache_alloc+0x18a/0x270
    [  884.226547]  ? do_sys_open+0x1bd/0x260
    [  884.226548]  do_sys_open+0x1bd/0x260
    [  884.226551]  do_syscall_64+0x5b/0x1e0
    [  884.226554]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    ```
    
    *** rootcause ***
    
    "mdadm -A" (or other array assemble commands) will start a daemon "mdadm
    --monitor" by default. When "mdadm -Ss" is running, the stop action will
    wakeup "mdadm --monitor". The "--monitor" daemon will immediately get
    info from /proc/mdstat. This time mddev in kernel still exist, so
    /proc/mdstat still show md device, which makes "mdadm --monitor" to open
    /dev/md0.
    
    The previously "mdadm -Ss" is removing action, the "mdadm --monitor"
    open action will trigger md_open which is creating action. Racing is
    happening.
    
    ```
    <thread 1>: "mdadm -Ss"
    md_release
      mddev_put deletes mddev from all_mddevs
      queue_work for mddev_delayed_delete
      at this time, "/dev/md0" is still available for opening
    
    <thread 2>: "mdadm --monitor ..."
    md_open
     + mddev_find can't find mddev of /dev/md0, and create a new mddev and
     |    return.
     + trigger "if (mddev->gendisk != bdev->bd_disk)" and return
          -ERESTARTSYS.
    ```
    
    In non-preempt kernel, <thread 2> is occupying on current CPU. and
    mddev_delayed_delete which was created in <thread 1> also can't be
    schedule.
    
    In preempt kernel, it can also trigger above racing. But kernel doesn't
    allow one thread running on a CPU all the time. after <thread 2> running
    some time, the later "mdadm -A" (refer above script line 13) will call
    md_alloc to alloc a new gendisk for mddev. it will break md_open
    statement "if (mddev->gendisk != bdev->bd_disk)" and return 0 to caller,
    the soft lockup is broken.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Zhao Heming <heming.zhao@suse.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0828c17cab61dd415ea713de6384099cad186606
Author: Christoph Hellwig <hch@lst.de>
Date:   Sat Apr 3 18:15:28 2021 +0200

    md: factor out a mddev_find_locked helper from mddev_find
    
    commit 8b57251f9a91f5e5a599de7549915d2d226cc3af upstream.
    
    Factor out a self-contained helper to just lookup a mddev by the dev_t
    "unit".
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Heming Zhao <heming.zhao@suse.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22e2d2f4677db25a869c8c4b6c2438df9105b13a
Author: Christoph Hellwig <hch@lst.de>
Date:   Sat Apr 3 18:15:29 2021 +0200

    md: split mddev_find
    
    commit 65aa97c4d2bfd76677c211b9d03ef05a98c6d68e upstream.
    
    Split mddev_find into a simple mddev_find that just finds an existing
    mddev by the unit number, and a more complicated mddev_find that deals
    with find or allocating a mddev.
    
    This turns out to fix this bug reported by Zhao Heming.
    
    ----------------------------- snip ------------------------------
    commit d3374825ce57 ("md: make devices disappear when they are no longer
    needed.") introduced protection between mddev creating & removing. The
    md_open shouldn't create mddev when all_mddevs list doesn't contain
    mddev. With currently code logic, there will be very easy to trigger
    soft lockup in non-preempt env.

commit 29490d0fb53e12b291234da037e310c19b63f71e
Author: Heming Zhao <heming.zhao@suse.com>
Date:   Thu Apr 8 15:44:15 2021 +0800

    md-cluster: fix use-after-free issue when removing rdev
    
    commit f7c7a2f9a23e5b6e0f5251f29648d0238bb7757e upstream.
    
    md_kick_rdev_from_array will remove rdev, so we should
    use rdev_for_each_safe to search list.
    
    How to trigger:
    
    env: Two nodes on kvm-qemu x86_64 VMs (2C2G with 2 iscsi luns).
    
    ```
    node2=192.168.0.3
    
    for i in {1..20}; do
        echo ==== $i `date` ====;
    
        mdadm -Ss && ssh ${node2} "mdadm -Ss"
        wipefs -a /dev/sda /dev/sdb
    
        mdadm -CR /dev/md0 -b clustered -e 1.2 -n 2 -l 1 /dev/sda \
           /dev/sdb --assume-clean
        ssh ${node2} "mdadm -A /dev/md0 /dev/sda /dev/sdb"
        mdadm --wait /dev/md0
        ssh ${node2} "mdadm --wait /dev/md0"
    
        mdadm --manage /dev/md0 --fail /dev/sda --remove /dev/sda
        sleep 1
    done
    ```
    
    Crash stack:
    
    ```
    stack segment: 0000 [#1] SMP
    ... ...
    RIP: 0010:md_check_recovery+0x1e8/0x570 [md_mod]
    ... ...
    RSP: 0018:ffffb149807a7d68 EFLAGS: 00010207
    RAX: 0000000000000000 RBX: ffff9d494c180800 RCX: ffff9d490fc01e50
    RDX: fffff047c0ed8308 RSI: 0000000000000246 RDI: 0000000000000246
    RBP: 6b6b6b6b6b6b6b6b R08: ffff9d490fc01e40 R09: 0000000000000000
    R10: 0000000000000001 R11: 0000000000000001 R12: 0000000000000000
    R13: ffff9d494c180818 R14: ffff9d493399ef38 R15: ffff9d4933a1d800
    FS:  0000000000000000(0000) GS:ffff9d494f700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fe68cab9010 CR3: 000000004c6be001 CR4: 00000000003706e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     raid1d+0x5c/0xd40 [raid1]
     ? finish_task_switch+0x75/0x2a0
     ? lock_timer_base+0x67/0x80
     ? try_to_del_timer_sync+0x4d/0x80
     ? del_timer_sync+0x41/0x50
     ? schedule_timeout+0x254/0x2d0
     ? md_start_sync+0xe0/0xe0 [md_mod]
     ? md_thread+0x127/0x160 [md_mod]
     md_thread+0x127/0x160 [md_mod]
     ? wait_woken+0x80/0x80
     kthread+0x10d/0x130
     ? kthread_park+0xa0/0xa0
     ret_from_fork+0x1f/0x40
    ```
    
    Fixes: dbb64f8635f5d ("md-cluster: Fix adding of new disk with new reload code")
    Fixes: 659b254fa7392 ("md-cluster: remove a disk asynchronously from cluster environment")
    Cc: stable@vger.kernel.org
    Reviewed-by: Gang He <ghe@suse.com>
    Signed-off-by: Heming Zhao <heming.zhao@suse.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fca00920327be96f3318224f502e4d5460f9545
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Apr 30 12:17:58 2021 -0400

    tracing: Restructure trace_clock_global() to never block
    
    commit aafe104aa9096827a429bc1358f8260ee565b7cc upstream.
    
    It was reported that a fix to the ring buffer recursion detection would
    cause a hung machine when performing suspend / resume testing. The
    following backtrace was extracted from debugging that case:
    
    Call Trace:
     trace_clock_global+0x91/0xa0
     __rb_reserve_next+0x237/0x460
     ring_buffer_lock_reserve+0x12a/0x3f0
     trace_buffer_lock_reserve+0x10/0x50
     __trace_graph_return+0x1f/0x80
     trace_graph_return+0xb7/0xf0
     ? trace_clock_global+0x91/0xa0
     ftrace_return_to_handler+0x8b/0xf0
     ? pv_hash+0xa0/0xa0
     return_to_handler+0x15/0x30
     ? ftrace_graph_caller+0xa0/0xa0
     ? trace_clock_global+0x91/0xa0
     ? __rb_reserve_next+0x237/0x460
     ? ring_buffer_lock_reserve+0x12a/0x3f0
     ? trace_event_buffer_lock_reserve+0x3c/0x120
     ? trace_event_buffer_reserve+0x6b/0xc0
     ? trace_event_raw_event_device_pm_callback_start+0x125/0x2d0
     ? dpm_run_callback+0x3b/0xc0
     ? pm_ops_is_empty+0x50/0x50
     ? platform_get_irq_byname_optional+0x90/0x90
     ? trace_device_pm_callback_start+0x82/0xd0
     ? dpm_run_callback+0x49/0xc0
    
    With the following RIP:
    
    RIP: 0010:native_queued_spin_lock_slowpath+0x69/0x200
    
    Since the fix to the recursion detection would allow a single recursion to
    happen while tracing, this lead to the trace_clock_global() taking a spin
    lock and then trying to take it again:
    
    ring_buffer_lock_reserve() {
      trace_clock_global() {
        arch_spin_lock() {
          queued_spin_lock_slowpath() {
            /* lock taken */
            (something else gets traced by function graph tracer)
              ring_buffer_lock_reserve() {
                trace_clock_global() {
                  arch_spin_lock() {
                    queued_spin_lock_slowpath() {
                    /* DEAD LOCK! */
    
    Tracing should *never* block, as it can lead to strange lockups like the
    above.
    
    Restructure the trace_clock_global() code to instead of simply taking a
    lock to update the recorded "prev_time" simply use it, as two events
    happening on two different CPUs that calls this at the same time, really
    doesn't matter which one goes first. Use a trylock to grab the lock for
    updating the prev_time, and if it fails, simply try again the next time.
    If it failed to be taken, that means something else is already updating
    it.
    
    Link: https://lkml.kernel.org/r/20210430121758.650b6e8a@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Tested-by: Konstantin Kharlamov <hi-angel@yandex.ru>
    Tested-by: Todd Brandt <todd.e.brandt@linux.intel.com>
    Fixes: b02414c8f045 ("ring-buffer: Fix recursion protection transitions between interrupt context") # started showing the problem
    Fixes: 14131f2f98ac3 ("tracing: implement trace_clock_*() APIs") # where the bug happened
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=212761
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96c36b2dac40a384a7f1cae63f6cefccd674cb48
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Apr 2 21:17:42 2021 +0900

    misc: vmw_vmci: explicitly initialize vmci_datagram payload
    
    commit b2192cfeba8481224da0a4ec3b4a7ccd80b1623b upstream.
    
    KMSAN complains that vmci_check_host_caps() left the payload part of
    check_msg uninitialized.
    
      =====================================================
      BUG: KMSAN: uninit-value in kmsan_check_memory+0xd/0x10
      CPU: 1 PID: 1 Comm: swapper/0 Tainted: G    B             5.11.0-rc7+ #4
      Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 02/27/2020
      Call Trace:
       dump_stack+0x21c/0x280
       kmsan_report+0xfb/0x1e0
       kmsan_internal_check_memory+0x202/0x520
       kmsan_check_memory+0xd/0x10
       iowrite8_rep+0x86/0x380
       vmci_guest_probe_device+0xf0b/0x1e70
       pci_device_probe+0xab3/0xe70
       really_probe+0xd16/0x24d0
       driver_probe_device+0x29d/0x3a0
       device_driver_attach+0x25a/0x490
       __driver_attach+0x78c/0x840
       bus_for_each_dev+0x210/0x340
       driver_attach+0x89/0xb0
       bus_add_driver+0x677/0xc40
       driver_register+0x485/0x8e0
       __pci_register_driver+0x1ff/0x350
       vmci_guest_init+0x3e/0x41
       vmci_drv_init+0x1d6/0x43f
       do_one_initcall+0x39c/0x9a0
       do_initcall_level+0x1d7/0x259
       do_initcalls+0x127/0x1cb
       do_basic_setup+0x33/0x36
       kernel_init_freeable+0x29a/0x3ed
       kernel_init+0x1f/0x840
       ret_from_fork+0x1f/0x30
    
      Uninit was created at:
       kmsan_internal_poison_shadow+0x5c/0xf0
       kmsan_slab_alloc+0x8d/0xe0
       kmem_cache_alloc+0x84f/0xe30
       vmci_guest_probe_device+0xd11/0x1e70
       pci_device_probe+0xab3/0xe70
       really_probe+0xd16/0x24d0
       driver_probe_device+0x29d/0x3a0
       device_driver_attach+0x25a/0x490
       __driver_attach+0x78c/0x840
       bus_for_each_dev+0x210/0x340
       driver_attach+0x89/0xb0
       bus_add_driver+0x677/0xc40
       driver_register+0x485/0x8e0
       __pci_register_driver+0x1ff/0x350
       vmci_guest_init+0x3e/0x41
       vmci_drv_init+0x1d6/0x43f
       do_one_initcall+0x39c/0x9a0
       do_initcall_level+0x1d7/0x259
       do_initcalls+0x127/0x1cb
       do_basic_setup+0x33/0x36
       kernel_init_freeable+0x29a/0x3ed
       kernel_init+0x1f/0x840
       ret_from_fork+0x1f/0x30
    
      Bytes 28-31 of 36 are uninitialized
      Memory access of size 36 starts at ffff8881675e5f00
      =====================================================
    
    Fixes: 1f166439917b69d3 ("VMCI: guest side driver implementation.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Link: https://lore.kernel.org/r/20210402121742.3917-2-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbf1a3e25fc0a8466136dbf3f7fc4a4f54269483
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Apr 2 21:17:41 2021 +0900

    misc: vmw_vmci: explicitly initialize vmci_notify_bm_set_msg struct
    
    commit 376565b9717c30cd58ad33860fa42697615fa2e4 upstream.
    
    KMSAN complains that the vmci_use_ppn64() == false path in
    vmci_dbell_register_notification_bitmap() left upper 32bits of
    bitmap_set_msg.bitmap_ppn64 member uninitialized.
    
      =====================================================
      BUG: KMSAN: uninit-value in kmsan_check_memory+0xd/0x10
      CPU: 1 PID: 1 Comm: swapper/0 Not tainted 5.11.0-rc7+ #4
      Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 02/27/2020
      Call Trace:
       dump_stack+0x21c/0x280
       kmsan_report+0xfb/0x1e0
       kmsan_internal_check_memory+0x484/0x520
       kmsan_check_memory+0xd/0x10
       iowrite8_rep+0x86/0x380
       vmci_send_datagram+0x150/0x280
       vmci_dbell_register_notification_bitmap+0x133/0x1e0
       vmci_guest_probe_device+0xcab/0x1e70
       pci_device_probe+0xab3/0xe70
       really_probe+0xd16/0x24d0
       driver_probe_device+0x29d/0x3a0
       device_driver_attach+0x25a/0x490
       __driver_attach+0x78c/0x840
       bus_for_each_dev+0x210/0x340
       driver_attach+0x89/0xb0
       bus_add_driver+0x677/0xc40
       driver_register+0x485/0x8e0
       __pci_register_driver+0x1ff/0x350
       vmci_guest_init+0x3e/0x41
       vmci_drv_init+0x1d6/0x43f
       do_one_initcall+0x39c/0x9a0
       do_initcall_level+0x1d7/0x259
       do_initcalls+0x127/0x1cb
       do_basic_setup+0x33/0x36
       kernel_init_freeable+0x29a/0x3ed
       kernel_init+0x1f/0x840
       ret_from_fork+0x1f/0x30
    
      Local variable ----bitmap_set_msg@vmci_dbell_register_notification_bitmap created at:
       vmci_dbell_register_notification_bitmap+0x50/0x1e0
       vmci_dbell_register_notification_bitmap+0x50/0x1e0
    
      Bytes 28-31 of 32 are uninitialized
      Memory access of size 32 starts at ffff88810098f570
      =====================================================
    
    Fixes: 83e2ec765be03e8a ("VMCI: doorbell implementation.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Link: https://lore.kernel.org/r/20210402121742.3917-1-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcfb424a8b4d201d9e9c6d66047d844b8ffb8c96
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Feb 17 11:24:59 2021 +0100

    misc: lis3lv02d: Fix false-positive WARN on various HP models
    
    commit 3641762c1c9c7cfd84a7061a0a73054f09b412e3 upstream.
    
    Before this commit lis3lv02d_get_pwron_wait() had a WARN_ONCE() to catch
    a potential divide by 0. WARN macros should only be used to catch internal
    kernel bugs and that is not the case here. We have been receiving a lot of
    bug reports about kernel backtraces caused by this WARN.
    
    The div value being checked comes from the lis3->odrs[] array. Which
    is sized to be a power-of-2 matching the number of bits in lis3->odr_mask.
    
    The only lis3 model where this array is not entirely filled with non zero
    values. IOW the only model where we can hit the div == 0 check is the
    3dc ("8 bits 3DC sensor") model:
    
    int lis3_3dc_rates[16] = {0, 1, 10, 25, 50, 100, 200, 400, 1600, 5000};
    
    Note the 0 value at index 0, according to the datasheet an odr index of 0
    means "Power-down mode". HP typically uses a lis3 accelerometer for HDD
    fall protection. What I believe is happening here is that on newer
    HP devices, which only contain a SDD, the BIOS is leaving the lis3 device
    powered-down since it is not used for HDD fall protection.
    
    Note that the lis3_3dc_rates array initializer only specifies 10 values,
    which matches the datasheet. So it also contains 6 zero values at the end.
    
    Replace the WARN with a normal check, which treats an odr index of 0
    as power-down and uses a normal dev_err() to report the error in case
    odr index point past the initialized part of the array.
    
    Fixes: 1510dd5954be ("lis3lv02d: avoid divide by zero due to unchecked")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=785814
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1817027
    BugLink: https://bugs.centos.org/view.php?id=10720
    Link: https://lore.kernel.org/r/20210217102501.31758-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 570cec53ffef40986f276cc71fa2487e8f629d99
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Wed Mar 10 13:03:09 2021 +0100

    FDDI: defxx: Bail out gracefully with unassigned PCI resource for CSR
    
    commit f626ca682912fab55dff15469ce893ae16b65c7e upstream.
    
    Recent versions of the PCI Express specification have deprecated support
    for I/O transactions and actually some PCIe host bridges, such as Power
    Systems Host Bridge 4 (PHB4), do not implement them.
    
    For those systems the PCI BARs that request a mapping in the I/O space
    have the length recorded in the corresponding PCI resource set to zero,
    which makes it unassigned:
    
    # lspci -s 0031:02:04.0 -v
    0031:02:04.0 FDDI network controller: Digital Equipment Corporation PCI-to-PDQ Interface Chip [PFI] FDDI (DEFPA) (rev 02)
            Subsystem: Digital Equipment Corporation FDDIcontroller/PCI (DEFPA)
            Flags: bus master, medium devsel, latency 136, IRQ 57, NUMA node 8
            Memory at 620c080020000 (32-bit, non-prefetchable) [size=128]
            I/O ports at <unassigned> [disabled]
            Memory at 620c080030000 (32-bit, non-prefetchable) [size=64K]
            Capabilities: [50] Power Management version 2
            Kernel driver in use: defxx
            Kernel modules: defxx
    
    #
    
    Regardless the driver goes ahead and requests it (here observed with a
    Raptor Talos II POWER9 system), resulting in an odd /proc/ioport entry:
    
    # cat /proc/ioports
    00000000-ffffffffffffffff : 0031:02:04.0
    #
    
    Furthermore, the system gets confused as the driver actually continues
    and pokes at those locations, causing a flood of messages being output
    to the system console by the underlying system firmware, like:
    
    defxx: v1.11 2014/07/01  Lawrence V. Stefani and others
    defxx 0031:02:04.0: enabling device (0140 -> 0142)
    LPC[000]: Got SYNC no-response error. Error address reg: 0xd0010000
    IPMI: dropping non severe PEL event
    LPC[000]: Got SYNC no-response error. Error address reg: 0xd0010014
    IPMI: dropping non severe PEL event
    LPC[000]: Got SYNC no-response error. Error address reg: 0xd0010014
    IPMI: dropping non severe PEL event
    
    and so on and so on (possibly intermixed actually, as there's no locking
    between the kernel and the firmware in console port access with this
    particular system, but cleaned up above for clarity), and once some 10k
    of such pairs of the latter two messages have been produced an interace
    eventually shows up in a useless state:
    
    0031:02:04.0: DEFPA at I/O addr = 0x0, IRQ = 57, Hardware addr = 00-00-00-00-00-00
    
    This was not expected to happen as resource handling was added to the
    driver a while ago, because it was not known at that time that a PCI
    system would be possible that cannot assign port I/O resources, and
    oddly enough `request_region' does not fail, which would have caught it.
    
    Correct the problem then by checking for the length of zero for the CSR
    resource and bail out gracefully refusing to register an interface if
    that turns out to be the case, producing messages like:
    
    defxx: v1.11 2014/07/01  Lawrence V. Stefani and others
    0031:02:04.0: Cannot use I/O, no address set, aborting
    0031:02:04.0: Recompile driver with "CONFIG_DEFXX_MMIO=y"
    
    Keep the original check for the EISA MMIO resource as implemented,
    because in that case the length is hardwired to 0x400 as a consequence
    of how the compare/mask address decoding works in the ESIC chip and it
    is only the base address that is set to zero if MMIO has been disabled
    for the adapter in EISA configuration, which in turn could be a valid
    bus address in a legacy-free system implementing PCI, especially for
    port I/O.
    
    Where the EISA MMIO resource has been disabled for the adapter in EISA
    configuration this arrangement keeps producing messages like:
    
    eisa 00:05: EISA: slot 5: DEC3002 detected
    defxx: v1.11 2014/07/01  Lawrence V. Stefani and others
    00:05: Cannot use MMIO, no address set, aborting
    00:05: Recompile driver with "CONFIG_DEFXX_MMIO=n"
    00:05: Or run ECU and set adapter's MMIO location
    
    with the last two lines now swapped for easier handling in the driver.
    
    There is no need to check for and catch the case of a port I/O resource
    not having been assigned for EISA as the adapter uses the slot-specific
    I/O space, which gets assigned by how EISA has been specified and maps
    directly to the particular slot an option card has been placed in.  And
    the EISA variant of the adapter has additional registers that are only
    accessible via the port I/O space anyway.
    
    While at it factor out the error message calls into helpers and fix an
    argument order bug with the `pr_err' call now in `dfx_register_res_err'.
    
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Fixes: 4d0438e56a8f ("defxx: Clean up DEFEA resource management")
    Cc: stable@vger.kernel.org # v3.19+
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9e89ffa7aadc008d5bebb81fa0b2223a20d9bb7
Author: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
Date:   Tue Apr 13 20:12:33 2021 -0700

    MIPS: pci-rt2880: fix slot 0 configuration
    
    commit 8e98b697006d749d745d3b174168a877bb96c500 upstream.
    
    pci_fixup_irqs() used to call pcibios_map_irq on every PCI device, which
    for RT2880 included bus 0 slot 0. After pci_fixup_irqs() got removed,
    only slots/funcs with devices attached would be called. While arguably
    the right thing, that left no chance for this driver to ever initialize
    slot 0, effectively bricking PCI and USB on RT2880 devices such as the
    Belkin F5D8235-4 v1.
    
    Slot 0 configuration needs to happen after PCI bus enumeration, but
    before any device at slot 0x11 (func 0 or 1) is talked to. That was
    determined empirically by testing on a Belkin F5D8235-4 v1 device. A
    minimal BAR 0 config write followed by read, then setting slot 0
    PCI_COMMAND to MASTER | IO | MEMORY is all that seems to be required for
    proper functionality.
    
    Tested by ensuring that full- and high-speed USB devices get enumerated
    on the Belkin F5D8235-4 v1 (with an out of tree DTS file from OpenWrt).
    
    Fixes: 04c81c7293df ("MIPS: PCI: Replace pci_fixup_irqs() call with host bridge IRQ mapping hooks")
    Signed-off-by: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: Tobias Wolf <dev-NTEO@vplace.de>
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18ae4a192a4496e48a5490b52812645d2413307c
Author: Or Cohen <orcohen@paloaltonetworks.com>
Date:   Tue May 4 10:16:46 2021 +0300

    net/nfc: fix use-after-free llcp_sock_bind/connect
    
    commit c61760e6940dd4039a7f5e84a6afc9cdbf4d82b6 upstream.
    
    Commits 8a4cd82d ("nfc: fix refcount leak in llcp_sock_connect()")
    and c33b1cc62 ("nfc: fix refcount leak in llcp_sock_bind()")
    fixed a refcount leak bug in bind/connect but introduced a
    use-after-free if the same local is assigned to 2 different sockets.
    
    This can be triggered by the following simple program:
        int sock1 = socket( AF_NFC, SOCK_STREAM, NFC_SOCKPROTO_LLCP );
        int sock2 = socket( AF_NFC, SOCK_STREAM, NFC_SOCKPROTO_LLCP );
        memset( &addr, 0, sizeof(struct sockaddr_nfc_llcp) );
        addr.sa_family = AF_NFC;
        addr.nfc_protocol = NFC_PROTO_NFC_DEP;
        bind( sock1, (struct sockaddr*) &addr, sizeof(struct sockaddr_nfc_llcp) )
        bind( sock2, (struct sockaddr*) &addr, sizeof(struct sockaddr_nfc_llcp) )
        close(sock1);
        close(sock2);
    
    Fix this by assigning NULL to llcp_sock->local after calling
    nfc_llcp_local_put.
    
    This addresses CVE-2021-23134.
    
    Reported-by: Or Cohen <orcohen@paloaltonetworks.com>
    Reported-by: Nadav Markus <nmarkus@paloaltonetworks.com>
    Fixes: c33b1cc62 ("nfc: fix refcount leak in llcp_sock_bind()")
    Signed-off-by: Or Cohen <orcohen@paloaltonetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40acc1aa3e2a705a3c2ed171ed563ef04f7ba19e
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Apr 12 19:17:57 2021 +0800

    bluetooth: eliminate the potential race condition when removing the HCI controller
    
    commit e2cb6b891ad2b8caa9131e3be70f45243df82a80 upstream.
    
    There is a possible race condition vulnerability between issuing a HCI
    command and removing the cont.  Specifically, functions hci_req_sync()
    and hci_dev_do_close() can race each other like below:
    
    thread-A in hci_req_sync()      |   thread-B in hci_dev_do_close()
                                    |   hci_req_sync_lock(hdev);
    test_bit(HCI_UP, &hdev->flags); |
    ...                             |   test_and_clear_bit(HCI_UP, &hdev->flags)
    hci_req_sync_lock(hdev);        |
                                    |
    In this commit we alter the sequence in function hci_req_sync(). Hence,
    the thread-A cannot issue th.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Fixes: 7c6a329e4447 ("[Bluetooth] Fix regression from using default link policy")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18d8e3c4379fb500893932c810fdd7fefb6a52b6
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Feb 28 18:01:46 2020 +0000

    hsr: use netdev_err() instead of WARN_ONCE()
    
    commit 4b793acdca0050739b99ace6a8b9e7f717f57c6b upstream.
    
    When HSR interface is sending a frame, it finds a node with
    the destination ethernet address from the list.
    If there is no node, it calls WARN_ONCE().
    But, using WARN_ONCE() for this situation is a little bit overdoing.
    So, in this patch, the netdev_err() is used instead.
    
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21f6aee6682a1f7415e23f96ce94ff387d9cdb2e
Author: Archie Pusaka <apusaka@chromium.org>
Date:   Mon Mar 22 14:03:11 2021 +0800

    Bluetooth: verify AMP hci_chan before amp_destroy
    
    commit 5c4c8c9544099bb9043a10a5318130a943e32fc3 upstream.
    
    hci_chan can be created in 2 places: hci_loglink_complete_evt() if
    it is an AMP hci_chan, or l2cap_conn_add() otherwise. In theory,
    Only AMP hci_chan should be removed by a call to
    hci_disconn_loglink_complete_evt(). However, the controller might mess
    up, call that function, and destroy an hci_chan which is not initiated
    by hci_loglink_complete_evt().
    
    This patch adds a verification that the destroyed hci_chan must have
    been init'd by hci_loglink_complete_evt().
    
    Example crash call trace:
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xe3/0x144 lib/dump_stack.c:118
     print_address_description+0x67/0x22a mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report mm/kasan/report.c:412 [inline]
     kasan_report+0x251/0x28f mm/kasan/report.c:396
     hci_send_acl+0x3b/0x56e net/bluetooth/hci_core.c:4072
     l2cap_send_cmd+0x5af/0x5c2 net/bluetooth/l2cap_core.c:877
     l2cap_send_move_chan_cfm_icid+0x8e/0xb1 net/bluetooth/l2cap_core.c:4661
     l2cap_move_fail net/bluetooth/l2cap_core.c:5146 [inline]
     l2cap_move_channel_rsp net/bluetooth/l2cap_core.c:5185 [inline]
     l2cap_bredr_sig_cmd net/bluetooth/l2cap_core.c:5464 [inline]
     l2cap_sig_channel net/bluetooth/l2cap_core.c:5799 [inline]
     l2cap_recv_frame+0x1d12/0x51aa net/bluetooth/l2cap_core.c:7023
     l2cap_recv_acldata+0x2ea/0x693 net/bluetooth/l2cap_core.c:7596
     hci_acldata_packet net/bluetooth/hci_core.c:4606 [inline]
     hci_rx_work+0x2bd/0x45e net/bluetooth/hci_core.c:4796
     process_one_work+0x6f8/0xb50 kernel/workqueue.c:2175
     worker_thread+0x4fc/0x670 kernel/workqueue.c:2321
     kthread+0x2f0/0x304 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:415
    
    Allocated by task 38:
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0x8d/0x9a mm/kasan/kasan.c:553
     kmem_cache_alloc_trace+0x102/0x129 mm/slub.c:2787
     kmalloc include/linux/slab.h:515 [inline]
     kzalloc include/linux/slab.h:709 [inline]
     hci_chan_create+0x86/0x26d net/bluetooth/hci_conn.c:1674
     l2cap_conn_add.part.0+0x1c/0x814 net/bluetooth/l2cap_core.c:7062
     l2cap_conn_add net/bluetooth/l2cap_core.c:7059 [inline]
     l2cap_connect_cfm+0x134/0x852 net/bluetooth/l2cap_core.c:7381
     hci_connect_cfm+0x9d/0x122 include/net/bluetooth/hci_core.h:1404
     hci_remote_ext_features_evt net/bluetooth/hci_event.c:4161 [inline]
     hci_event_packet+0x463f/0x72fa net/bluetooth/hci_event.c:5981
     hci_rx_work+0x197/0x45e net/bluetooth/hci_core.c:4791
     process_one_work+0x6f8/0xb50 kernel/workqueue.c:2175
     worker_thread+0x4fc/0x670 kernel/workqueue.c:2321
     kthread+0x2f0/0x304 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:415
    
    Freed by task 1732:
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free mm/kasan/kasan.c:521 [inline]
     __kasan_slab_free+0x106/0x128 mm/kasan/kasan.c:493
     slab_free_hook mm/slub.c:1409 [inline]
     slab_free_freelist_hook+0xaa/0xf6 mm/slub.c:1436
     slab_free mm/slub.c:3009 [inline]
     kfree+0x182/0x21e mm/slub.c:3972
     hci_disconn_loglink_complete_evt net/bluetooth/hci_event.c:4891 [inline]
     hci_event_packet+0x6a1c/0x72fa net/bluetooth/hci_event.c:6050
     hci_rx_work+0x197/0x45e net/bluetooth/hci_core.c:4791
     process_one_work+0x6f8/0xb50 kernel/workqueue.c:2175
     worker_thread+0x4fc/0x670 kernel/workqueue.c:2321
     kthread+0x2f0/0x304 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:415
    
    The buggy address belongs to the object at ffff8881d7af9180
     which belongs to the cache kmalloc-128 of size 128
    The buggy address is located 24 bytes inside of
     128-byte region [ffff8881d7af9180, ffff8881d7af9200)
    The buggy address belongs to the page:
    page:ffffea00075ebe40 count:1 mapcount:0 mapping:ffff8881da403200 index:0x0
    flags: 0x8000000000000200(slab)
    raw: 8000000000000200 dead000000000100 dead000000000200 ffff8881da403200
    raw: 0000000000000000 0000000080150015 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881d7af9080: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8881d7af9100: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    >ffff8881d7af9180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                ^
     ffff8881d7af9200: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8881d7af9280: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    Signed-off-by: Archie Pusaka <apusaka@chromium.org>
    Reported-by: syzbot+98228e7407314d2d4ba2@syzkaller.appspotmail.com
    Reviewed-by: Alain Michaud <alainm@chromium.org>
    Reviewed-by: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f37cb5a61ddd94a0474efebbd6a52e577bddef8
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Jul 28 23:33:33 2020 +0200

    modules: inherit TAINT_PROPRIETARY_MODULE
    
    commit 262e6ae7081df304fc625cf368d5c2cbba2bb991 upstream.
    
    If a TAINT_PROPRIETARY_MODULE exports symbol, inherit the taint flag
    for all modules importing these symbols, and don't allow loading
    symbols from TAINT_PROPRIETARY_MODULE modules if the module previously
    imported gplonly symbols.  Add a anti-circumvention devices so people
    don't accidentally get themselves into trouble this way.
    
    Comment from Greg:
      "Ah, the proven-to-be-illegal "GPL Condom" defense :)"
    
    [jeyu: pr_info -> pr_err and pr_warn as per discussion]
    Link: http://lore.kernel.org/r/20200730162957.GA22469@lst.de
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12caaf196b23b5b0c256a1e7e3f8c4a260c179e7
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:26 2020 +0200

    modules: return licensing information from find_symbol
    
    commit ef1dac6021cc8ec5de02ce31722bf26ac4ed5523 upstream.
    
    Report the GPLONLY status through a new argument.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8db19442e4ee494739edaddfb3758ffff7727dca
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:25 2020 +0200

    modules: rename the licence field in struct symsearch to license
    
    commit cd8732cdcc37d7077c4fa2c966b748c0662b607e upstream.
    
    Use the same spelling variant as the rest of the file.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5160c8c806400994ad2e91a3884173061fbcfd12
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:24 2020 +0200

    modules: unexport __module_address
    
    commit 34e64705ad415ed7a816e60ef62b42fe6d1729d9 upstream.
    
    __module_address is only used by built-in code.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 231738e2d3e9971f3745c44661b7a80f50161d5b
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:23 2020 +0200

    modules: unexport __module_text_address
    
    commit 3fe1e56d0e68b623dd62d8d38265d2a052e7e185 upstream.
    
    __module_text_address is only used by built-in code.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf79a10874d064347426eaaa10b6f5bdc5562f21
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:22 2020 +0200

    modules: mark each_symbol_section static
    
    commit a54e04914c211b5678602a46b3ede5d82ec1327d upstream.
    
    each_symbol_section is only used inside of module.c.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 862a1517a77b8269c92503f7c548ebc0ccb0b9f5
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:21 2020 +0200

    modules: mark find_symbol static
    
    commit 773110470e2fa3839523384ae014f8a723c4d178 upstream.
    
    find_symbol is only used in module.c.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52d03d9947ad805651b5fa5289f75a387756f36b
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 08:10:20 2020 +0200

    modules: mark ref_module static
    
    commit 7ef5264de773279b9f23b6cc8afb5addb30e970b upstream.
    
    ref_module isn't used anywhere outside of module.c.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b42c0a33dfdd451d9be62dd5de58c39f2750b6e3
Author: Benjamin Block <bblock@linux.ibm.com>
Date:   Thu Apr 29 23:37:00 2021 +0200

    dm rq: fix double free of blk_mq_tag_set in dev remove after table load fails
    
    commit 8e947c8f4a5620df77e43c9c75310dc510250166 upstream.
    
    When loading a device-mapper table for a request-based mapped device,
    and the allocation/initialization of the blk_mq_tag_set for the device
    fails, a following device remove will cause a double free.
    
    E.g. (dmesg):
      device-mapper: core: Cannot initialize queue for request-based dm-mq mapped device
      device-mapper: ioctl: unable to set up device queue for new table.
      Unable to handle kernel pointer dereference in virtual kernel address space
      Failing address: 0305e098835de000 TEID: 0305e098835de803
      Fault in home space mode while using kernel ASCE.
      AS:000000025efe0007 R3:0000000000000024
      Oops: 0038 ilc:3 [#1] SMP
      Modules linked in: ... lots of modules ...
      Supported: Yes, External
      CPU: 0 PID: 7348 Comm: multipathd Kdump: loaded Tainted: G        W      X    5.3.18-53-default #1 SLE15-SP3
      Hardware name: IBM 8561 T01 7I2 (LPAR)
      Krnl PSW : 0704e00180000000 000000025e368eca (kfree+0x42/0x330)
                 R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:3 CC:2 PM:0 RI:0 EA:3
      Krnl GPRS: 000000000000004a 000000025efe5230 c1773200d779968d 0000000000000000
                 000000025e520270 000000025e8d1b40 0000000000000003 00000007aae10000
                 000000025e5202a2 0000000000000001 c1773200d779968d 0305e098835de640
                 00000007a8170000 000003ff80138650 000000025e5202a2 000003e00396faa8
      Krnl Code: 000000025e368eb8: c4180041e100       lgrl    %r1,25eba50b8
                 000000025e368ebe: ecba06b93a55       risbg   %r11,%r10,6,185,58
                #000000025e368ec4: e3b010000008       ag      %r11,0(%r1)
                >000000025e368eca: e310b0080004       lg      %r1,8(%r11)
                 000000025e368ed0: a7110001           tmll    %r1,1
                 000000025e368ed4: a7740129           brc     7,25e369126
                 000000025e368ed8: e320b0080004       lg      %r2,8(%r11)
                 000000025e368ede: b904001b           lgr     %r1,%r11
      Call Trace:
       [<000000025e368eca>] kfree+0x42/0x330
       [<000000025e5202a2>] blk_mq_free_tag_set+0x72/0xb8
       [<000003ff801316a8>] dm_mq_cleanup_mapped_device+0x38/0x50 [dm_mod]
       [<000003ff80120082>] free_dev+0x52/0xd0 [dm_mod]
       [<000003ff801233f0>] __dm_destroy+0x150/0x1d0 [dm_mod]
       [<000003ff8012bb9a>] dev_remove+0x162/0x1c0 [dm_mod]
       [<000003ff8012a988>] ctl_ioctl+0x198/0x478 [dm_mod]
       [<000003ff8012ac8a>] dm_ctl_ioctl+0x22/0x38 [dm_mod]
       [<000000025e3b11ee>] ksys_ioctl+0xbe/0xe0
       [<000000025e3b127a>] __s390x_sys_ioctl+0x2a/0x40
       [<000000025e8c15ac>] system_call+0xd8/0x2c8
      Last Breaking-Event-Address:
       [<000000025e52029c>] blk_mq_free_tag_set+0x6c/0xb8
      Kernel panic - not syncing: Fatal exception: panic_on_oops
    
    When allocation/initialization of the blk_mq_tag_set fails in
    dm_mq_init_request_queue(), it is uninitialized/freed, but the pointer
    is not reset to NULL; so when dev_remove() later gets into
    dm_mq_cleanup_mapped_device() it sees the pointer and tries to
    uninitialize and free it again.
    
    Fix this by setting the pointer to NULL in dm_mq_init_request_queue()
    error-handling. Also set it to NULL in dm_mq_cleanup_mapped_device().
    
    Cc: <stable@vger.kernel.org> # 4.6+
    Fixes: 1c357a1e86a4 ("dm: allocate blk_mq_tag_set rather than embed in mapped_device")
    Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3248ea82ca119032e1406a015d78ca01bf7db59
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Apr 13 09:11:53 2021 +0100

    dm space map common: fix division bug in sm_ll_find_free_block()
    
    commit 5208692e80a1f3c8ce2063a22b675dd5589d1d80 upstream.
    
    This division bug meant the search for free metadata space could skip
    the final allocation bitmap's worth of entries. Fix affects DM thinp,
    cache and era targets.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Tested-by: Ming-Hung Tsai <mtsai@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a0db189216dbd6df17ddcf13f00033d033aa356
Author: Joe Thornber <ejt@redhat.com>
Date:   Mon Mar 29 16:34:57 2021 +0100

    dm persistent data: packed struct should have an aligned() attribute too
    
    commit a88b2358f1da2c9f9fcc432f2e0a79617fea397c upstream.
    
    Otherwise most non-x86 architectures (e.g. riscv, arm) will resort to
    byte-by-byte access.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56f86fa929bdc11330445cb1d6da041950164530
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Apr 27 11:32:07 2021 -0400

    tracing: Map all PIDs to command lines
    
    commit 785e3c0a3a870e72dc530856136ab4c8dd207128 upstream.
    
    The default max PID is set by PID_MAX_DEFAULT, and the tracing
    infrastructure uses this number to map PIDs to the comm names of the
    tasks, such output of the trace can show names from the recorded PIDs in
    the ring buffer. This mapping is also exported to user space via the
    "saved_cmdlines" file in the tracefs directory.
    
    But currently the mapping expects the PIDs to be less than
    PID_MAX_DEFAULT, which is the default maximum and not the real maximum.
    Recently, systemd will increases the maximum value of a PID on the system,
    and when tasks are traced that have a PID higher than PID_MAX_DEFAULT, its
    comm is not recorded. This leads to the entire trace to have "<...>" as
    the comm name, which is pretty useless.
    
    Instead, keep the array mapping the size of PID_MAX_DEFAULT, but instead
    of just mapping the index to the comm, map a mask of the PID
    (PID_MAX_DEFAULT - 1) to the comm, and find the full PID from the
    map_cmdline_to_pid array (that already exists).
    
    This bug goes back to the beginning of ftrace, but hasn't been an issue
    until user space started increasing the maximum value of PIDs.
    
    Link: https://lkml.kernel.org/r/20210427113207.3c601884@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: bc0c38d139ec7 ("ftrace: latency tracer infrastructure")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b40eb2559e02afe65413c614ef5e3360025dfca5
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Apr 19 19:11:12 2021 -0700

    usb: dwc3: gadget: Fix START_TRANSFER link state check
    
    commit c560e76319a94a3b9285bc426c609903408e4826 upstream.
    
    The START_TRANSFER command needs to be executed while in ON/U0 link
    state (with an exception during register initialization). Don't use
    dwc->link_state to check this since the driver only tracks the link
    state when the link state change interrupt is enabled. Check the link
    state from DSTS register instead.
    
    Note that often the host already brings the device out of low power
    before it sends/requests the next transfer. So, the user won't see any
    issue when the device starts transfer then. This issue is more
    noticeable in cases when the device delays starting transfer, which can
    happen during delayed control status after the host put the device in
    low power.
    
    Fixes: 799e9dc82968 ("usb: dwc3: gadget: conditionally disable Link State change events")
    Cc: <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/bcefaa9ecbc3e1936858c0baa14de6612960e909.1618884221.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ab58c63efa4724442049c7c428f13d1445e6e50
Author: Dean Anderson <dean@sensoray.com>
Date:   Wed Mar 17 15:41:09 2021 -0700

    usb: gadget/function/f_fs string table fix for multiple languages
    
    commit 55b74ce7d2ce0b0058f3e08cab185a0afacfe39e upstream.
    
    Fixes bug with the handling of more than one language in
    the string table in f_fs.c.
    str_count was not reset for subsequent language codes.
    str_count-- "rolls under" and processes u32 max strings on
    the processing of the second language entry.
    The existing bug can be reproduced by adding a second language table
    to the structure "strings" in tools/usb/ffs-test.c.
    
    Signed-off-by: Dean Anderson <dean@sensoray.com>
    Link: https://lore.kernel.org/r/20210317224109.21534-1-dean@sensoray.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5677f028f1502215f8ea4fd53b9efb9e2569e240
Author: Hemant Kumar <hemantk@codeaurora.org>
Date:   Wed Apr 21 12:47:32 2021 -0700

    usb: gadget: Fix double free of device descriptor pointers
    
    commit 43c4cab006f55b6ca549dd1214e22f5965a8675f upstream.
    
    Upon driver unbind usb_free_all_descriptors() function frees all
    speed descriptor pointers without setting them to NULL. In case
    gadget speed changes (i.e from super speed plus to super speed)
    after driver unbind only upto super speed descriptor pointers get
    populated. Super speed plus desc still holds the stale (already
    freed) pointer. Fix this issue by setting all descriptor pointers
    to NULL after freeing them in usb_free_all_descriptors().
    
    Fixes: f5c61225cf29 ("usb: gadget: Update function for SuperSpeedPlus")
    cc: stable@vger.kernel.org
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Hemant Kumar <hemantk@codeaurora.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1619034452-17334-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6de699845e197659a1026e8b370e0511d7352788
Author: Anirudh Rayabharam <mail@anirudhrb.com>
Date:   Mon Apr 19 09:07:08 2021 +0530

    usb: gadget: dummy_hcd: fix gpf in gadget_setup
    
    commit 4a5d797a9f9c4f18585544237216d7812686a71f upstream.
    
    Fix a general protection fault reported by syzbot due to a race between
    gadget_setup() and gadget_unbind() in raw_gadget.
    
    The gadget core is supposed to guarantee that there won't be any more
    callbacks to the gadget driver once the driver's unbind routine is
    called. That guarantee is enforced in usb_gadget_remove_driver as
    follows:
    
            usb_gadget_disconnect(udc->gadget);
            if (udc->gadget->irq)
                    synchronize_irq(udc->gadget->irq);
            udc->driver->unbind(udc->gadget);
            usb_gadget_udc_stop(udc);
    
    usb_gadget_disconnect turns off the pullup resistor, telling the host
    that the gadget is no longer connected and preventing the transmission
    of any more USB packets. Any packets that have already been received
    are sure to processed by the UDC driver's interrupt handler by the time
    synchronize_irq returns.
    
    But this doesn't work with dummy_hcd, because dummy_hcd doesn't use
    interrupts; it uses a timer instead. It does have code to emulate the
    effect of synchronize_irq, but that code doesn't get invoked at the
    right time -- it currently runs in usb_gadget_udc_stop, after the unbind
    callback instead of before. Indeed, there's no way for
    usb_gadget_remove_driver to invoke this code before the unbind callback.
    
    To fix this, move the synchronize_irq() emulation code to dummy_pullup
    so that it runs before unbind. Also, add a comment explaining why it is
    necessary to have it there.
    
    Reported-by: syzbot+eb4674092e6cc8d9e0bd@syzkaller.appspotmail.com
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Anirudh Rayabharam <mail@anirudhrb.com>
    Link: https://lore.kernel.org/r/20210419033713.3021-1-mail@anirudhrb.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32168ca1f123316848fffb85d059860adf3c409f
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Fri Dec 11 09:30:39 2020 +0100

    media: dvbdev: Fix memory leak in dvb_media_device_free()
    
    commit bf9a40ae8d722f281a2721779595d6df1c33a0bf upstream.
    
    dvb_media_device_free() is leaking memory. Free `dvbdev->adapter->conn`
    before setting it to NULL, as documented in include/media/media-device.h:
    "The media_entity instance itself must be freed explicitly by the driver
    if required."
    
    Link: https://syzkaller.appspot.com/bug?id=9bbe4b842c98f0ed05c5eed77a226e9de33bf298
    
    Link: https://lore.kernel.org/linux-media/20201211083039.521617-1-yepeilin.cs@gmail.com
    Cc: stable@vger.kernel.org
    Fixes: 0230d60e4661 ("[media] dvbdev: Add RF connector if needed")
    Reported-by: syzbot+7f09440acc069a0d38ac@syzkaller.appspotmail.com
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a480aeb8b4e2f488dbd802c4d1a55f97c744542
Author: Fengnan Chang <changfengnan@vivo.com>
Date:   Fri Apr 2 18:16:31 2021 +0800

    ext4: fix error code in ext4_commit_super
    
    commit f88f1466e2a2e5ca17dfada436d3efa1b03a3972 upstream.
    
    We should set the error code when ext4_commit_super check argument failed.
    Found in code review.
    Fixes: c4be0c1dc4cdc ("filesystem freeze: add error handling of write_super_lockfs/unlockfs").
    
    Cc: stable@kernel.org
    Signed-off-by: Fengnan Chang <changfengnan@vivo.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20210402101631.561-1-changfengnan@vivo.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e70db6e43286a17c3dfc840fcee662de183b6a81
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Mar 31 20:15:16 2021 +0800

    ext4: fix check to prevent false positive report of incorrect used inodes
    
    commit a149d2a5cabbf6507a7832a1c4fd2593c55fd450 upstream.
    
    Commit <50122847007> ("ext4: fix check to prevent initializing reserved
    inodes") check the block group zero and prevent initializing reserved
    inodes. But in some special cases, the reserved inode may not all belong
    to the group zero, it may exist into the second group if we format
    filesystem below.
    
      mkfs.ext4 -b 4096 -g 8192 -N 1024 -I 4096 /dev/sda
    
    So, it will end up triggering a false positive report of a corrupted
    file system. This patch fix it by avoid check reserved inodes if no free
    inode blocks will be zeroed.
    
    Cc: stable@kernel.org
    Fixes: 50122847007 ("ext4: fix check to prevent initializing reserved inodes")
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Suggested-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20210331121516.2243099-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ab671191f64b0da7d547e2ad4dc199ca7e5b558
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 5 10:38:24 2021 -0400

    ftrace: Handle commands when closing set_ftrace_filter file
    
    commit 8c9af478c06bb1ab1422f90d8ecbc53defd44bc3 upstream.
    
     # echo switch_mm:traceoff > /sys/kernel/tracing/set_ftrace_filter
    
    will cause switch_mm to stop tracing by the traceoff command.
    
     # echo -n switch_mm:traceoff > /sys/kernel/tracing/set_ftrace_filter
    
    does nothing.
    
    The reason is that the parsing in the write function only processes
    commands if it finished parsing (there is white space written after the
    command). That's to handle:
    
     write(fd, "switch_mm:", 10);
     write(fd, "traceoff", 8);
    
    cases, where the command is broken over multiple writes.
    
    The problem is if the file descriptor is closed, then the write call is
    not processed, and the command needs to be processed in the release code.
    The release code can handle matching of functions, but does not handle
    commands.
    
    Cc: stable@vger.kernel.org
    Fixes: eda1e32855656 ("tracing: handle broken names in ftrace filter")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fbf44e7dff41827bc4c889c392af07d1e726fe8
Author: Chen Jun <chenjun102@huawei.com>
Date:   Wed Apr 14 03:04:49 2021 +0000

    posix-timers: Preserve return value in clock_adjtime32()
    
    commit 2d036dfa5f10df9782f5278fc591d79d283c1fad upstream.
    
    The return value on success (>= 0) is overwritten by the return value of
    put_old_timex32(). That works correct in the fault case, but is wrong for
    the success case where put_old_timex32() returns 0.
    
    Just check the return value of put_old_timex32() and return -EFAULT in case
    it is not zero.
    
    [ tglx: Massage changelog ]
    
    Fixes: 3a4d44b61625 ("ntp: Move adjtimex related compat syscalls to native counterparts")
    Signed-off-by: Chen Jun <chenjun102@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Richard Cochran <richardcochran@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210414030449.90692-1-chenjun102@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ae7a44069c4d36757d0ad508fad91538d68423b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 22 21:44:18 2021 +0200

    Revert 337f13046ff0 ("futex: Allow FUTEX_CLOCK_REALTIME with FUTEX_WAIT op")
    
    commit 4fbf5d6837bf81fd7a27d771358f4ee6c4f243f8 upstream.
    
    The FUTEX_WAIT operand has historically a relative timeout which means that
    the clock id is irrelevant as relative timeouts on CLOCK_REALTIME are not
    subject to wall clock changes and therefore are mapped by the kernel to
    CLOCK_MONOTONIC for simplicity.
    
    If a caller would set FUTEX_CLOCK_REALTIME for FUTEX_WAIT the timeout is
    still treated relative vs. CLOCK_MONOTONIC and then the wait arms that
    timeout based on CLOCK_REALTIME which is broken and obviously has never
    been used or even tested.
    
    Reject any attempt to use FUTEX_CLOCK_REALTIME with FUTEX_WAIT again.
    
    The desired functionality can be achieved with FUTEX_WAIT_BITSET and a
    FUTEX_BITSET_MATCH_ANY argument.
    
    Fixes: 337f13046ff0 ("futex: Allow FUTEX_CLOCK_REALTIME with FUTEX_WAIT op")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210422194704.834797921@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d1044c19d27e0ac97af8d27aa6e3da33bfd1279
Author: Yang Yang <yang.yang29@zte.com.cn>
Date:   Thu Jan 28 02:55:35 2021 -0800

    jffs2: check the validity of dstlen in jffs2_zlib_compress()
    
    commit 90ada91f4610c5ef11bc52576516d96c496fc3f1 upstream.
    
    KASAN reports a BUG when download file in jffs2 filesystem.It is
    because when dstlen == 1, cpage_out will write array out of bounds.
    Actually, data will not be compressed in jffs2_zlib_compress() if
    data's length less than 4.
    
    [  393.799778] BUG: KASAN: slab-out-of-bounds in jffs2_rtime_compress+0x214/0x2f0 at addr ffff800062e3b281
    [  393.809166] Write of size 1 by task tftp/2918
    [  393.813526] CPU: 3 PID: 2918 Comm: tftp Tainted: G    B           4.9.115-rt93-EMBSYS-CGEL-6.1.R6-dirty #1
    [  393.823173] Hardware name: LS1043A RDB Board (DT)
    [  393.827870] Call trace:
    [  393.830322] [<ffff20000808c700>] dump_backtrace+0x0/0x2f0
    [  393.835721] [<ffff20000808ca04>] show_stack+0x14/0x20
    [  393.840774] [<ffff2000086ef700>] dump_stack+0x90/0xb0
    [  393.845829] [<ffff20000827b19c>] kasan_object_err+0x24/0x80
    [  393.851402] [<ffff20000827b404>] kasan_report_error+0x1b4/0x4d8
    [  393.857323] [<ffff20000827bae8>] kasan_report+0x38/0x40
    [  393.862548] [<ffff200008279d44>] __asan_store1+0x4c/0x58
    [  393.867859] [<ffff2000084ce2ec>] jffs2_rtime_compress+0x214/0x2f0
    [  393.873955] [<ffff2000084bb3b0>] jffs2_selected_compress+0x178/0x2a0
    [  393.880308] [<ffff2000084bb530>] jffs2_compress+0x58/0x478
    [  393.885796] [<ffff2000084c5b34>] jffs2_write_inode_range+0x13c/0x450
    [  393.892150] [<ffff2000084be0b8>] jffs2_write_end+0x2a8/0x4a0
    [  393.897811] [<ffff2000081f3008>] generic_perform_write+0x1c0/0x280
    [  393.903990] [<ffff2000081f5074>] __generic_file_write_iter+0x1c4/0x228
    [  393.910517] [<ffff2000081f5210>] generic_file_write_iter+0x138/0x288
    [  393.916870] [<ffff20000829ec1c>] __vfs_write+0x1b4/0x238
    [  393.922181] [<ffff20000829ff00>] vfs_write+0xd0/0x238
    [  393.927232] [<ffff2000082a1ba8>] SyS_write+0xa0/0x110
    [  393.932283] [<ffff20000808429c>] __sys_trace_return+0x0/0x4
    [  393.937851] Object at ffff800062e3b280, in cache kmalloc-64 size: 64
    [  393.944197] Allocated:
    [  393.946552] PID = 2918
    [  393.948913]  save_stack_trace_tsk+0x0/0x220
    [  393.953096]  save_stack_trace+0x18/0x20
    [  393.956932]  kasan_kmalloc+0xd8/0x188
    [  393.960594]  __kmalloc+0x144/0x238
    [  393.963994]  jffs2_selected_compress+0x48/0x2a0
    [  393.968524]  jffs2_compress+0x58/0x478
    [  393.972273]  jffs2_write_inode_range+0x13c/0x450
    [  393.976889]  jffs2_write_end+0x2a8/0x4a0
    [  393.980810]  generic_perform_write+0x1c0/0x280
    [  393.985251]  __generic_file_write_iter+0x1c4/0x228
    [  393.990040]  generic_file_write_iter+0x138/0x288
    [  393.994655]  __vfs_write+0x1b4/0x238
    [  393.998228]  vfs_write+0xd0/0x238
    [  394.001543]  SyS_write+0xa0/0x110
    [  394.004856]  __sys_trace_return+0x0/0x4
    [  394.008684] Freed:
    [  394.010691] PID = 2918
    [  394.013051]  save_stack_trace_tsk+0x0/0x220
    [  394.017233]  save_stack_trace+0x18/0x20
    [  394.021069]  kasan_slab_free+0x88/0x188
    [  394.024902]  kfree+0x6c/0x1d8
    [  394.027868]  jffs2_sum_write_sumnode+0x2c4/0x880
    [  394.032486]  jffs2_do_reserve_space+0x198/0x598
    [  394.037016]  jffs2_reserve_space+0x3f8/0x4d8
    [  394.041286]  jffs2_write_inode_range+0xf0/0x450
    [  394.045816]  jffs2_write_end+0x2a8/0x4a0
    [  394.049737]  generic_perform_write+0x1c0/0x280
    [  394.054179]  __generic_file_write_iter+0x1c4/0x228
    [  394.058968]  generic_file_write_iter+0x138/0x288
    [  394.063583]  __vfs_write+0x1b4/0x238
    [  394.067157]  vfs_write+0xd0/0x238
    [  394.070470]  SyS_write+0xa0/0x110
    [  394.073783]  __sys_trace_return+0x0/0x4
    [  394.077612] Memory state around the buggy address:
    [  394.082404]  ffff800062e3b180: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [  394.089623]  ffff800062e3b200: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [  394.096842] >ffff800062e3b280: 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [  394.104056]                    ^
    [  394.107283]  ffff800062e3b300: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [  394.114502]  ffff800062e3b380: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [  394.121718] ==================================================================
    
    Signed-off-by: Yang Yang <yang.yang29@zte.com.cn>
    Cc: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit feeaaecafb1fd6f23434f74067bdbf07a15bef9b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 27 17:05:53 2021 -0700

    Fix misc new gcc warnings
    
    commit e7c6e405e171fb33990a12ecfd14e6500d9e5cf2 upstream.
    
    It seems like Fedora 34 ends up enabling a few new gcc warnings, notably
    "-Wstringop-overread" and "-Warray-parameter".
    
    Both of them cause what seem to be valid warnings in the kernel, where
    we have array size mismatches in function arguments (that are no longer
    just silently converted to a pointer to element, but actually checked).
    
    This fixes most of the trivial ones, by making the function declaration
    match the function definition, and in the case of intel_pm.c, removing
    the over-specified array size from the argument declaration.
    
    At least one 'stringop-overread' warning remains in the i915 driver, but
    that one doesn't have the same obvious trivial fix, and may or may not
    actually be indicative of a bug.
    
    [ It was a mistake to upgrade one of my machines to Fedora 34 while
      being busy with the merge window, but if this is the extent of the
      compiler upgrade problems, things are better than usual    - Linus ]
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrey Zhizhikin <andrey.z@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7de5dfbb83df21086ffa94c53bde145099ee5c5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 22 17:02:41 2021 +0100

    security: commoncap: fix -Wstringop-overread warning
    
    commit 82e5d8cc768b0c7b03c551a9ab1f8f3f68d5f83f upstream.
    
    gcc-11 introdces a harmless warning for cap_inode_getsecurity:
    
    security/commoncap.c: In function ‘cap_inode_getsecurity’:
    security/commoncap.c:440:33: error: ‘memcpy’ reading 16 bytes from a region of size 0 [-Werror=stringop-overread]
      440 |                                 memcpy(&nscap->data, &cap->data, sizeof(__le32) * 2 * VFS_CAP_U32);
          |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    The problem here is that tmpbuf is initialized to NULL, so gcc assumes
    it is not accessible unless it gets set by vfs_getxattr_alloc().  This is
    a legitimate warning as far as I can tell, but the code is correct since
    it correctly handles the error when that function fails.
    
    Add a separate NULL check to tell gcc about it as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: James Morris <jamorris@linux.microsoft.com>
    Cc: Andrey Zhizhikin <andrey.z@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12216d0919b64ee2ea5dc7a50e455670f44383d5
Author: Paul Clements <paul.clements@us.sios.com>
Date:   Thu Apr 15 17:17:57 2021 -0400

    md/raid1: properly indicate failure when ending a failed write request
    
    commit 2417b9869b81882ab90fd5ed1081a1cb2d4db1dd upstream.
    
    This patch addresses a data corruption bug in raid1 arrays using bitmaps.
    Without this fix, the bitmap bits for the failed I/O end up being cleared.
    
    Since we are in the failure leg of raid1_end_write_request, the request
    either needs to be retried (R1BIO_WriteError) or failed (R1BIO_Degraded).
    
    Fixes: eeba6809d8d5 ("md/raid1: end bio when the device faulty")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Paul Clements <paul.clements@us.sios.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab68d4641f557be983f856702b2edc2576a0949d
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Wed Apr 14 20:12:51 2021 +0300

    intel_th: pci: Add Alder Lake-M support
    
    commit 48cb17531b15967d9d3f34c770a25cc6c4ca6ad1 upstream.
    
    This adds support for the Trace Hub in Alder Lake-M PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20210414171251.14672-8-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e55c8ea8f295f1fd12c2483e76521ec1941602c
Author: Tony Ambardar <tony.ambardar@gmail.com>
Date:   Thu Sep 17 06:54:37 2020 -0700

    powerpc: fix EDEADLOCK redefinition error in uapi/asm/errno.h
    
    commit 7de21e679e6a789f3729e8402bc440b623a28eae upstream.
    
    A few archs like powerpc have different errno.h values for macros
    EDEADLOCK and EDEADLK. In code including both libc and linux versions of
    errno.h, this can result in multiple definitions of EDEADLOCK in the
    include chain. Definitions to the same value (e.g. seen with mips) do
    not raise warnings, but on powerpc there are redefinitions changing the
    value, which raise warnings and errors (if using "-Werror").
    
    Guard against these redefinitions to avoid build errors like the following,
    first seen cross-compiling libbpf v5.8.9 for powerpc using GCC 8.4.0 with
    musl 1.1.24:
    
      In file included from ../../arch/powerpc/include/uapi/asm/errno.h:5,
                       from ../../include/linux/err.h:8,
                       from libbpf.c:29:
      ../../include/uapi/asm-generic/errno.h:40: error: "EDEADLOCK" redefined [-Werror]
       #define EDEADLOCK EDEADLK
    
      In file included from toolchain-powerpc_8540_gcc-8.4.0_musl/include/errno.h:10,
                       from libbpf.c:26:
      toolchain-powerpc_8540_gcc-8.4.0_musl/include/bits/errno.h:58: note: this is the location of the previous definition
       #define EDEADLOCK       58
    
      cc1: all warnings being treated as errors
    
    Cc: Stable <stable@vger.kernel.org>
    Reported-by: Rosen Penev <rosenp@gmail.com>
    Signed-off-by: Tony Ambardar <Tony.Ambardar@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200917135437.1238787-1-Tony.Ambardar@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 656a633ff742e4dbedb2b09d2e84837a7a73ecfc
Author: Mahesh Salgaonkar <mahesh@linux.ibm.com>
Date:   Mon Apr 12 13:22:50 2021 +0530

    powerpc/eeh: Fix EEH handling for hugepages in ioremap space.
    
    commit 5ae5bc12d0728db60a0aa9b62160ffc038875f1a upstream.
    
    During the EEH MMIO error checking, the current implementation fails to map
    the (virtual) MMIO address back to the pci device on radix with hugepage
    mappings for I/O. This results into failure to dispatch EEH event with no
    recovery even when EEH capability has been enabled on the device.
    
    eeh_check_failure(token)                # token = virtual MMIO address
      addr = eeh_token_to_phys(token);
      edev = eeh_addr_cache_get_dev(addr);
      if (!edev)
            return 0;
      eeh_dev_check_failure(edev);  <= Dispatch the EEH event
    
    In case of hugepage mappings, eeh_token_to_phys() has a bug in virt -> phys
    translation that results in wrong physical address, which is then passed to
    eeh_addr_cache_get_dev() to match it against cached pci I/O address ranges
    to get to a PCI device. Hence, it fails to find a match and the EEH event
    never gets dispatched leaving the device in failed state.
    
    The commit 33439620680be ("powerpc/eeh: Handle hugepages in ioremap space")
    introduced following logic to translate virt to phys for hugepage mappings:
    
    eeh_token_to_phys():
    +       pa = pte_pfn(*ptep);
    +
    +       /* On radix we can do hugepage mappings for io, so handle that */
    +       if (hugepage_shift) {
    +               pa <<= hugepage_shift;                  <= This is wrong
    +               pa |= token & ((1ul << hugepage_shift) - 1);
    +       }
    
    This patch fixes the virt -> phys translation in eeh_token_to_phys()
    function.
    
      $ cat /sys/kernel/debug/powerpc/eeh_address_cache
      mem addr range [0x0000040080000000-0x00000400807fffff]: 0030:01:00.1
      mem addr range [0x0000040080800000-0x0000040080ffffff]: 0030:01:00.1
      mem addr range [0x0000040081000000-0x00000400817fffff]: 0030:01:00.0
      mem addr range [0x0000040081800000-0x0000040081ffffff]: 0030:01:00.0
      mem addr range [0x0000040082000000-0x000004008207ffff]: 0030:01:00.1
      mem addr range [0x0000040082080000-0x00000400820fffff]: 0030:01:00.0
      mem addr range [0x0000040082100000-0x000004008210ffff]: 0030:01:00.1
      mem addr range [0x0000040082110000-0x000004008211ffff]: 0030:01:00.0
    
    Above is the list of cached io address ranges of pci 0030:01:00.<fn>.
    
    Before this patch:
    
    Tracing 'arg1' of function eeh_addr_cache_get_dev() during error injection
    clearly shows that 'addr=' contains wrong physical address:
    
       kworker/u16:0-7       [001] ....   108.883775: eeh_addr_cache_get_dev:
               (eeh_addr_cache_get_dev+0xc/0xf0) addr=0x80103000a510
    
    dmesg shows no EEH recovery messages:
    
      [  108.563768] bnx2x: [bnx2x_timer:5801(eth2)]MFW seems hanged: drv_pulse (0x9ae) != mcp_pulse (0x7fff)
      [  108.563788] bnx2x: [bnx2x_hw_stats_update:870(eth2)]NIG timer max (4294967295)
      [  108.883788] bnx2x: [bnx2x_acquire_hw_lock:2013(eth1)]lock_status 0xffffffff  resource_bit 0x1
      [  108.884407] bnx2x 0030:01:00.0 eth1: MDC/MDIO access timeout
      [  108.884976] bnx2x 0030:01:00.0 eth1: MDC/MDIO access timeout
      <..>
    
    After this patch:
    
    eeh_addr_cache_get_dev() trace shows correct physical address:
    
      <idle>-0       [001] ..s.  1043.123828: eeh_addr_cache_get_dev:
              (eeh_addr_cache_get_dev+0xc/0xf0) addr=0x40080bc7cd8
    
    dmesg logs shows EEH recovery getting triggerred:
    
      [  964.323980] bnx2x: [bnx2x_timer:5801(eth2)]MFW seems hanged: drv_pulse (0x746f) != mcp_pulse (0x7fff)
      [  964.323991] EEH: Recovering PHB#30-PE#10000
      [  964.324002] EEH: PE location: N/A, PHB location: N/A
      [  964.324006] EEH: Frozen PHB#30-PE#10000 detected
      <..>
    
    Fixes: 33439620680b ("powerpc/eeh: Handle hugepages in ioremap space")
    Cc: stable@vger.kernel.org # v5.3+
    Reported-by: Dominic DeMarco <ddemarc@us.ibm.com>
    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/161821396263.48361.2796709239866588652.stgit@jupiter
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f971e69fea70380ea659b905315d029db16b8099
Author: lizhe <lizhe67@huawei.com>
Date:   Thu Mar 18 11:06:57 2021 +0800

    jffs2: Fix kasan slab-out-of-bounds problem
    
    commit 960b9a8a7676b9054d8b46a2c7db52a0c8766b56 upstream.
    
    KASAN report a slab-out-of-bounds problem. The logs are listed below.
    It is because in function jffs2_scan_dirent_node, we alloc "checkedlen+1"
    bytes for fd->name and we check crc with length rd->nsize. If checkedlen
    is less than rd->nsize, it will cause the slab-out-of-bounds problem.
    
    jffs2: Dirent at *** has zeroes in name. Truncating to %d char
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in crc32_le+0x1ce/0x260 at addr ffff8800842cf2d1
    Read of size 1 by task test_JFFS2/915
    =============================================================================
    BUG kmalloc-64 (Tainted: G    B      O   ): kasan: bad access detected
    -----------------------------------------------------------------------------
    INFO: Allocated in jffs2_alloc_full_dirent+0x2a/0x40 age=0 cpu=1 pid=915
            ___slab_alloc+0x580/0x5f0
            __slab_alloc.isra.24+0x4e/0x64
            __kmalloc+0x170/0x300
            jffs2_alloc_full_dirent+0x2a/0x40
            jffs2_scan_eraseblock+0x1ca4/0x3b64
            jffs2_scan_medium+0x285/0xfe0
            jffs2_do_mount_fs+0x5fb/0x1bbc
            jffs2_do_fill_super+0x245/0x6f0
            jffs2_fill_super+0x287/0x2e0
            mount_mtd_aux.isra.0+0x9a/0x144
            mount_mtd+0x222/0x2f0
            jffs2_mount+0x41/0x60
            mount_fs+0x63/0x230
            vfs_kern_mount.part.6+0x6c/0x1f4
            do_mount+0xae8/0x1940
            SyS_mount+0x105/0x1d0
    INFO: Freed in jffs2_free_full_dirent+0x22/0x40 age=27 cpu=1 pid=915
            __slab_free+0x372/0x4e4
            kfree+0x1d4/0x20c
            jffs2_free_full_dirent+0x22/0x40
            jffs2_build_remove_unlinked_inode+0x17a/0x1e4
            jffs2_do_mount_fs+0x1646/0x1bbc
            jffs2_do_fill_super+0x245/0x6f0
            jffs2_fill_super+0x287/0x2e0
            mount_mtd_aux.isra.0+0x9a/0x144
            mount_mtd+0x222/0x2f0
            jffs2_mount+0x41/0x60
            mount_fs+0x63/0x230
            vfs_kern_mount.part.6+0x6c/0x1f4
            do_mount+0xae8/0x1940
            SyS_mount+0x105/0x1d0
            entry_SYSCALL_64_fastpath+0x1e/0x97
    Call Trace:
     [<ffffffff815befef>] dump_stack+0x59/0x7e
     [<ffffffff812d1d65>] print_trailer+0x125/0x1b0
     [<ffffffff812d82c8>] object_err+0x34/0x40
     [<ffffffff812dadef>] kasan_report.part.1+0x21f/0x534
     [<ffffffff81132401>] ? vprintk+0x2d/0x40
     [<ffffffff815f1ee2>] ? crc32_le+0x1ce/0x260
     [<ffffffff812db41a>] kasan_report+0x26/0x30
     [<ffffffff812d9fc1>] __asan_load1+0x3d/0x50
     [<ffffffff815f1ee2>] crc32_le+0x1ce/0x260
     [<ffffffff814764ae>] ? jffs2_alloc_full_dirent+0x2a/0x40
     [<ffffffff81485cec>] jffs2_scan_eraseblock+0x1d0c/0x3b64
     [<ffffffff81488813>] ? jffs2_scan_medium+0xccf/0xfe0
     [<ffffffff81483fe0>] ? jffs2_scan_make_ino_cache+0x14c/0x14c
     [<ffffffff812da3e9>] ? kasan_unpoison_shadow+0x35/0x50
     [<ffffffff812da3e9>] ? kasan_unpoison_shadow+0x35/0x50
     [<ffffffff812da462>] ? kasan_kmalloc+0x5e/0x70
     [<ffffffff812d5d90>] ? kmem_cache_alloc_trace+0x10c/0x2cc
     [<ffffffff818169fb>] ? mtd_point+0xf7/0x130
     [<ffffffff81487dc9>] jffs2_scan_medium+0x285/0xfe0
     [<ffffffff81487b44>] ? jffs2_scan_eraseblock+0x3b64/0x3b64
     [<ffffffff812da3e9>] ? kasan_unpoison_shadow+0x35/0x50
     [<ffffffff812da3e9>] ? kasan_unpoison_shadow+0x35/0x50
     [<ffffffff812da462>] ? kasan_kmalloc+0x5e/0x70
     [<ffffffff812d57df>] ? __kmalloc+0x12b/0x300
     [<ffffffff812da462>] ? kasan_kmalloc+0x5e/0x70
     [<ffffffff814a2753>] ? jffs2_sum_init+0x9f/0x240
     [<ffffffff8148b2ff>] jffs2_do_mount_fs+0x5fb/0x1bbc
     [<ffffffff8148ad04>] ? jffs2_del_noinode_dirent+0x640/0x640
     [<ffffffff812da462>] ? kasan_kmalloc+0x5e/0x70
     [<ffffffff81127c5b>] ? __init_rwsem+0x97/0xac
     [<ffffffff81492349>] jffs2_do_fill_super+0x245/0x6f0
     [<ffffffff81493c5b>] jffs2_fill_super+0x287/0x2e0
     [<ffffffff814939d4>] ? jffs2_parse_options+0x594/0x594
     [<ffffffff81819bea>] mount_mtd_aux.isra.0+0x9a/0x144
     [<ffffffff81819eb6>] mount_mtd+0x222/0x2f0
     [<ffffffff814939d4>] ? jffs2_parse_options+0x594/0x594
     [<ffffffff81819c94>] ? mount_mtd_aux.isra.0+0x144/0x144
     [<ffffffff81258757>] ? free_pages+0x13/0x1c
     [<ffffffff814fa0ac>] ? selinux_sb_copy_data+0x278/0x2e0
     [<ffffffff81492b35>] jffs2_mount+0x41/0x60
     [<ffffffff81302fb7>] mount_fs+0x63/0x230
     [<ffffffff8133755f>] ? alloc_vfsmnt+0x32f/0x3b0
     [<ffffffff81337f2c>] vfs_kern_mount.part.6+0x6c/0x1f4
     [<ffffffff8133ceec>] do_mount+0xae8/0x1940
     [<ffffffff811b94e0>] ? audit_filter_rules.constprop.6+0x1d10/0x1d10
     [<ffffffff8133c404>] ? copy_mount_string+0x40/0x40
     [<ffffffff812cbf78>] ? alloc_pages_current+0xa4/0x1bc
     [<ffffffff81253a89>] ? __get_free_pages+0x25/0x50
     [<ffffffff81338993>] ? copy_mount_options.part.17+0x183/0x264
     [<ffffffff8133e3a9>] SyS_mount+0x105/0x1d0
     [<ffffffff8133e2a4>] ? copy_mnt_ns+0x560/0x560
     [<ffffffff810e8391>] ? msa_space_switch_handler+0x13d/0x190
     [<ffffffff81be184a>] entry_SYSCALL_64_fastpath+0x1e/0x97
     [<ffffffff810e9274>] ? msa_space_switch+0xb0/0xe0
    Memory state around the buggy address:
     ffff8800842cf180: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8800842cf200: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff8800842cf280: fc fc fc fc fc fc 00 00 00 00 01 fc fc fc fc fc
                                                     ^
     ffff8800842cf300: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8800842cf380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Cc: stable@vger.kernel.org
    Reported-by: Kunkun Xu <xukunkun1@huawei.com>
    Signed-off-by: lizhe <lizhe67@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b7b9774643220e53eef58c15bb29bd4182fe053
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Apr 18 15:00:45 2021 -0400

    NFSv4: Don't discard segments marked for return in _pnfs_return_layout()
    
    commit de144ff4234f935bd2150108019b5d87a90a8a96 upstream.
    
    If the pNFS layout segment is marked with the NFS_LSEG_LAYOUTRETURN
    flag, then the assumption is that it has some reporting requirement
    to perform through a layoutreturn (e.g. flexfiles layout stats or error
    information).
    
    Fixes: 6d597e175012 ("pnfs: only tear down lsegs that precede seqid in LAYOUTRETURN args")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3385a9122f8db15b453e07bfc88117fce7f3724
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Apr 21 17:43:16 2021 +0100

    ACPI: GTDT: Don't corrupt interrupt mappings on watchdow probe failure
    
    commit 1ecd5b129252249b9bc03d7645a7bda512747277 upstream.
    
    When failing the driver probe because of invalid firmware properties,
    the GTDT driver unmaps the interrupt that it mapped earlier.
    
    However, it never checks whether the mapping of the interrupt actially
    succeeded. Even more, should the firmware report an illegal interrupt
    number that overlaps with the GIC SGI range, this can result in an
    IPI being unmapped, and subsequent fireworks (as reported by Dann
    Frazier).
    
    Rework the driver to have a slightly saner behaviour and actually
    check whether the interrupt has been mapped before unmapping things.
    
    Reported-by: dann frazier <dann.frazier@canonical.com>
    Fixes: ca9ae5ec4ef0 ("acpi/arm64: Add SBSA Generic Watchdog support in GTDT driver")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/YH87dtTfwYgavusz@xps13.dannf
    Cc: <stable@vger.kernel.org>
    Cc: Fu Wei <wefu@redhat.com>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Tested-by: dann frazier <dann.frazier@canonical.com>
    Tested-by: Hanjun Guo <guohanjun@huawei.com>
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Reviewed-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Link: https://lore.kernel.org/r/20210421164317.1718831-2-maz@kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a52fa8ad45b5a593ed416adf326538638454ff1
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Wed Apr 28 15:23:07 2021 +0200

    openvswitch: fix stack OOB read while fragmenting IPv4 packets
    
    commit 7c0ea5930c1c211931819d83cfb157bff1539a4c upstream.
    
    running openvswitch on kernels built with KASAN, it's possible to see the
    following splat while testing fragmentation of IPv4 packets:
    
     BUG: KASAN: stack-out-of-bounds in ip_do_fragment+0x1b03/0x1f60
     Read of size 1 at addr ffff888112fc713c by task handler2/1367
    
     CPU: 0 PID: 1367 Comm: handler2 Not tainted 5.12.0-rc6+ #418
     Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
     Call Trace:
      dump_stack+0x92/0xc1
      print_address_description.constprop.7+0x1a/0x150
      kasan_report.cold.13+0x7f/0x111
      ip_do_fragment+0x1b03/0x1f60
      ovs_fragment+0x5bf/0x840 [openvswitch]
      do_execute_actions+0x1bd5/0x2400 [openvswitch]
      ovs_execute_actions+0xc8/0x3d0 [openvswitch]
      ovs_packet_cmd_execute+0xa39/0x1150 [openvswitch]
      genl_family_rcv_msg_doit.isra.15+0x227/0x2d0
      genl_rcv_msg+0x287/0x490
      netlink_rcv_skb+0x120/0x380
      genl_rcv+0x24/0x40
      netlink_unicast+0x439/0x630
      netlink_sendmsg+0x719/0xbf0
      sock_sendmsg+0xe2/0x110
      ____sys_sendmsg+0x5ba/0x890
      ___sys_sendmsg+0xe9/0x160
      __sys_sendmsg+0xd3/0x170
      do_syscall_64+0x33/0x40
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7f957079db07
     Code: c3 66 90 41 54 41 89 d4 55 48 89 f5 53 89 fb 48 83 ec 10 e8 eb ec ff ff 44 89 e2 48 89 ee 89 df 41 89 c0 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 35 44 89 c7 48 89 44 24 08 e8 24 ed ff ff 48
     RSP: 002b:00007f956ce35a50 EFLAGS: 00000293 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 0000000000000019 RCX: 00007f957079db07
     RDX: 0000000000000000 RSI: 00007f956ce35ae0 RDI: 0000000000000019
     RBP: 00007f956ce35ae0 R08: 0000000000000000 R09: 00007f9558006730
     R10: 0000000000000000 R11: 0000000000000293 R12: 0000000000000000
     R13: 00007f956ce37308 R14: 00007f956ce35f80 R15: 00007f956ce35ae0
    
     The buggy address belongs to the page:
     page:00000000af2a1d93 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x112fc7
     flags: 0x17ffffc0000000()
     raw: 0017ffffc0000000 0000000000000000 dead000000000122 0000000000000000
     raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
     page dumped because: kasan: bad access detected
    
     addr ffff888112fc713c is located in stack of task handler2/1367 at offset 180 in frame:
      ovs_fragment+0x0/0x840 [openvswitch]
    
     this frame has 2 objects:
      [32, 144) 'ovs_dst'
      [192, 424) 'ovs_rt'
    
     Memory state around the buggy address:
      ffff888112fc7000: f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ffff888112fc7080: 00 f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00
     >ffff888112fc7100: 00 00 00 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00
                                             ^
      ffff888112fc7180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ffff888112fc7200: 00 00 00 00 00 00 f2 f2 f2 00 00 00 00 00 00 00
    
    for IPv4 packets, ovs_fragment() uses a temporary struct dst_entry. Then,
    in the following call graph:
    
      ip_do_fragment()
        ip_skb_dst_mtu()
          ip_dst_mtu_maybe_forward()
            ip_mtu_locked()
    
    the pointer to struct dst_entry is used as pointer to struct rtable: this
    turns the access to struct members like rt_mtu_locked into an OOB read in
    the stack. Fix this changing the temporary variable used for IPv4 packets
    in ovs_fragment(), similarly to what is done for IPv6 few lines below.
    
    Fixes: d52e5a7e7ca4 ("ipv4: lock mtu in fnhe when received PMTU < net.ipv4.route.min_pmt")
    Cc: <stable@vger.kernel.org>
    Acked-by: Eelco Chaudron <echaudro@redhat.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7331bcd2a31b86e4d30ac93b79ad62e4fb695e2e
Author: Bill Wendling <morbo@google.com>
Date:   Fri Apr 23 13:51:59 2021 -0700

    arm64/vdso: Discard .note.gnu.property sections in vDSO
    
    [ Upstream commit 388708028e6937f3fc5fc19aeeb847f8970f489c ]
    
    The arm64 assembler in binutils 2.32 and above generates a program
    property note in a note section, .note.gnu.property, to encode used x86
    ISAs and features. But the kernel linker script only contains a single
    NOTE segment:
    
      PHDRS
      {
        text    PT_LOAD    FLAGS(5) FILEHDR PHDRS; /* PF_R|PF_X */
        dynamic PT_DYNAMIC FLAGS(4);               /* PF_R */
        note    PT_NOTE    FLAGS(4);               /* PF_R */
      }
    
    The NOTE segment generated by the vDSO linker script is aligned to 4 bytes.
    But the .note.gnu.property section must be aligned to 8 bytes on arm64.
    
      $ readelf -n vdso64.so
    
      Displaying notes found in: .note
        Owner                Data size      Description
        Linux                0x00000004     Unknown note type: (0x00000000)
         description data: 06 00 00 00
      readelf: Warning: note with invalid namesz and/or descsz found at offset 0x20
      readelf: Warning:  type: 0x78, namesize: 0x00000100, descsize: 0x756e694c, alignment: 8
    
    Since the note.gnu.property section in the vDSO is not checked by the
    dynamic linker, discard the .note.gnu.property sections in the vDSO.
    
    Similar to commit 4caffe6a28d31 ("x86/vdso: Discard .note.gnu.property
    sections in vDSO"), but for arm64.
    
    Signed-off-by: Bill Wendling <morbo@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Link: https://lore.kernel.org/r/20210423205159.830854-1-morbo@google.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc904e81a1d29895c1398350e55f338cbe8d1b81
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Apr 20 10:55:44 2021 +0100

    btrfs: fix race when picking most recent mod log operation for an old root
    
    [ Upstream commit f9690f426b2134cc3e74bfc5d9dfd6a4b2ca5281 ]
    
    Commit dbcc7d57bffc0c ("btrfs: fix race when cloning extent buffer during
    rewind of an old root"), fixed a race when we need to rewind the extent
    buffer of an old root. It was caused by picking a new mod log operation
    for the extent buffer while getting a cloned extent buffer with an outdated
    number of items (off by -1), because we cloned the extent buffer without
    locking it first.
    
    However there is still another similar race, but in the opposite direction.
    The cloned extent buffer has a number of items that does not match the
    number of tree mod log operations that are going to be replayed. This is
    because right after we got the last (most recent) tree mod log operation to
    replay and before locking and cloning the extent buffer, another task adds
    a new pointer to the extent buffer, which results in adding a new tree mod
    log operation and incrementing the number of items in the extent buffer.
    So after cloning we have mismatch between the number of items in the extent
    buffer and the number of mod log operations we are going to apply to it.
    This results in hitting a BUG_ON() that produces the following stack trace:
    
       ------------[ cut here ]------------
       kernel BUG at fs/btrfs/tree-mod-log.c:675!
       invalid opcode: 0000 [#1] SMP KASAN PTI
       CPU: 3 PID: 4811 Comm: crawl_1215 Tainted: G        W         5.12.0-7d1efdf501f8-misc-next+ #99
       Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
       RIP: 0010:tree_mod_log_rewind+0x3b1/0x3c0
       Code: 05 48 8d 74 10 (...)
       RSP: 0018:ffffc90001027090 EFLAGS: 00010293
       RAX: 0000000000000000 RBX: ffff8880a8514600 RCX: ffffffffaa9e59b6
       RDX: 0000000000000007 RSI: dffffc0000000000 RDI: ffff8880a851462c
       RBP: ffffc900010270e0 R08: 00000000000000c0 R09: ffffed1004333417
       R10: ffff88802199a0b7 R11: ffffed1004333416 R12: 000000000000000e
       R13: ffff888135af8748 R14: ffff88818766ff00 R15: ffff8880a851462c
       FS:  00007f29acf62700(0000) GS:ffff8881f2200000(0000) knlGS:0000000000000000
       CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
       CR2: 00007f0e6013f718 CR3: 000000010d42e003 CR4: 0000000000170ee0
       Call Trace:
        btrfs_get_old_root+0x16a/0x5c0
        ? lock_downgrade+0x400/0x400
        btrfs_search_old_slot+0x192/0x520
        ? btrfs_search_slot+0x1090/0x1090
        ? free_extent_buffer.part.61+0xd7/0x140
        ? free_extent_buffer+0x13/0x20
        resolve_indirect_refs+0x3e9/0xfc0
        ? lock_downgrade+0x400/0x400
        ? __kasan_check_read+0x11/0x20
        ? add_prelim_ref.part.11+0x150/0x150
        ? lock_downgrade+0x400/0x400
        ? __kasan_check_read+0x11/0x20
        ? lock_acquired+0xbb/0x620
        ? __kasan_check_write+0x14/0x20
        ? do_raw_spin_unlock+0xa8/0x140
        ? rb_insert_color+0x340/0x360
        ? prelim_ref_insert+0x12d/0x430
        find_parent_nodes+0x5c3/0x1830
        ? stack_trace_save+0x87/0xb0
        ? resolve_indirect_refs+0xfc0/0xfc0
        ? fs_reclaim_acquire+0x67/0xf0
        ? __kasan_check_read+0x11/0x20
        ? lockdep_hardirqs_on_prepare+0x210/0x210
        ? fs_reclaim_acquire+0x67/0xf0
        ? __kasan_check_read+0x11/0x20
        ? ___might_sleep+0x10f/0x1e0
        ? __kasan_kmalloc+0x9d/0xd0
        ? trace_hardirqs_on+0x55/0x120
        btrfs_find_all_roots_safe+0x142/0x1e0
        ? find_parent_nodes+0x1830/0x1830
        ? trace_hardirqs_on+0x55/0x120
        ? ulist_free+0x1f/0x30
        ? btrfs_inode_flags_to_xflags+0x50/0x50
        iterate_extent_inodes+0x20e/0x580
        ? tree_backref_for_extent+0x230/0x230
        ? release_extent_buffer+0x225/0x280
        ? read_extent_buffer+0xdd/0x110
        ? lock_downgrade+0x400/0x400
        ? __kasan_check_read+0x11/0x20
        ? lock_acquired+0xbb/0x620
        ? __kasan_check_write+0x14/0x20
        ? do_raw_spin_unlock+0xa8/0x140
        ? _raw_spin_unlock+0x22/0x30
        ? release_extent_buffer+0x225/0x280
        iterate_inodes_from_logical+0x129/0x170
        ? iterate_inodes_from_logical+0x129/0x170
        ? btrfs_inode_flags_to_xflags+0x50/0x50
        ? iterate_extent_inodes+0x580/0x580
        ? __vmalloc_node+0x92/0xb0
        ? init_data_container+0x34/0xb0
        ? init_data_container+0x34/0xb0
        ? kvmalloc_node+0x60/0x80
        btrfs_ioctl_logical_to_ino+0x158/0x230
        btrfs_ioctl+0x2038/0x4360
        ? __kasan_check_write+0x14/0x20
        ? mmput+0x3b/0x220
        ? btrfs_ioctl_get_supported_features+0x30/0x30
        ? __kasan_check_read+0x11/0x20
        ? __kasan_check_read+0x11/0x20
        ? lock_release+0xc8/0x650
        ? __might_fault+0x64/0xd0
        ? __kasan_check_read+0x11/0x20
        ? lock_downgrade+0x400/0x400
        ? lockdep_hardirqs_on_prepare+0x210/0x210
        ? lockdep_hardirqs_on_prepare+0x13/0x210
        ? _raw_spin_unlock_irqrestore+0x51/0x63
        ? __kasan_check_read+0x11/0x20
        ? do_vfs_ioctl+0xfc/0x9d0
        ? ioctl_file_clone+0xe0/0xe0
        ? lock_downgrade+0x400/0x400
        ? lockdep_hardirqs_on_prepare+0x210/0x210
        ? __kasan_check_read+0x11/0x20
        ? lock_release+0xc8/0x650
        ? __task_pid_nr_ns+0xd3/0x250
        ? __kasan_check_read+0x11/0x20
        ? __fget_files+0x160/0x230
        ? __fget_light+0xf2/0x110
        __x64_sys_ioctl+0xc3/0x100
        do_syscall_64+0x37/0x80
        entry_SYSCALL_64_after_hwframe+0x44/0xae
       RIP: 0033:0x7f29ae85b427
       Code: 00 00 90 48 8b (...)
       RSP: 002b:00007f29acf5fcf8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
       RAX: ffffffffffffffda RBX: 00007f29acf5ff40 RCX: 00007f29ae85b427
       RDX: 00007f29acf5ff48 RSI: 00000000c038943b RDI: 0000000000000003
       RBP: 0000000001000000 R08: 0000000000000000 R09: 00007f29acf60120
       R10: 00005640d5fc7b00 R11: 0000000000000246 R12: 0000000000000003
       R13: 00007f29acf5ff48 R14: 00007f29acf5ff40 R15: 00007f29acf5fef8
       Modules linked in:
       ---[ end trace 85e5fce078dfbe04 ]---
    
      (gdb) l *(tree_mod_log_rewind+0x3b1)
      0xffffffff819e5b21 is in tree_mod_log_rewind (fs/btrfs/tree-mod-log.c:675).
      670                      * the modification. As we're going backwards, we do the
      671                      * opposite of each operation here.
      672                      */
      673                     switch (tm->op) {
      674                     case BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING:
      675                             BUG_ON(tm->slot < n);
      676                             fallthrough;
      677                     case BTRFS_MOD_LOG_KEY_REMOVE_WHILE_MOVING:
      678                     case BTRFS_MOD_LOG_KEY_REMOVE:
      679                             btrfs_set_node_key(eb, &tm->key, tm->slot);
      (gdb) quit
    
    The following steps explain in more detail how it happens:
    
    1) We have one tree mod log user (through fiemap or the logical ino ioctl),
       with a sequence number of 1, so we have fs_info->tree_mod_seq == 1.
       This is task A;
    
    2) Another task is at ctree.c:balance_level() and we have eb X currently as
       the root of the tree, and we promote its single child, eb Y, as the new
       root.
    
       Then, at ctree.c:balance_level(), we call:
    
          ret = btrfs_tree_mod_log_insert_root(root->node, child, true);
    
    3) At btrfs_tree_mod_log_insert_root() we create a tree mod log operation
       of type BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING, with a ->logical field
       pointing to ebX->start. We only have one item in eb X, so we create
       only one tree mod log operation, and store in the "tm_list" array;
    
    4) Then, still at btrfs_tree_mod_log_insert_root(), we create a tree mod
       log element of operation type BTRFS_MOD_LOG_ROOT_REPLACE, ->logical set
       to ebY->start, ->old_root.logical set to ebX->start, ->old_root.level
       set to the level of eb X and ->generation set to the generation of eb X;
    
    5) Then btrfs_tree_mod_log_insert_root() calls tree_mod_log_free_eb() with
       "tm_list" as argument. After that, tree_mod_log_free_eb() calls
       tree_mod_log_insert(). This inserts the mod log operation of type
       BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING from step 3 into the rbtree
       with a sequence number of 2 (and fs_info->tree_mod_seq set to 2);
    
    6) Then, after inserting the "tm_list" single element into the tree mod
       log rbtree, the BTRFS_MOD_LOG_ROOT_REPLACE element is inserted, which
       gets the sequence number 3 (and fs_info->tree_mod_seq set to 3);
    
    7) Back to ctree.c:balance_level(), we free eb X by calling
       btrfs_free_tree_block() on it. Because eb X was created in the current
       transaction, has no other references and writeback did not happen for
       it, we add it back to the free space cache/tree;
    
    8) Later some other task B allocates the metadata extent from eb X, since
       it is marked as free space in the space cache/tree, and uses it as a
       node for some other btree;
    
    9) The tree mod log user task calls btrfs_search_old_slot(), which calls
       btrfs_get_old_root(), and finally that calls tree_mod_log_oldest_root()
       with time_seq == 1 and eb_root == eb Y;
    
    10) The first iteration of the while loop finds the tree mod log element
        with sequence number 3, for the logical address of eb Y and of type
        BTRFS_MOD_LOG_ROOT_REPLACE;
    
    11) Because the operation type is BTRFS_MOD_LOG_ROOT_REPLACE, we don't
        break out of the loop, and set root_logical to point to
        tm->old_root.logical, which corresponds to the logical address of
        eb X;
    
    12) On the next iteration of the while loop, the call to
        tree_mod_log_search_oldest() returns the smallest tree mod log element
        for the logical address of eb X, which has a sequence number of 2, an
        operation type of BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING and
        corresponds to the old slot 0 of eb X (eb X had only 1 item in it
        before being freed at step 7);
    
    13) We then break out of the while loop and return the tree mod log
        operation of type BTRFS_MOD_LOG_ROOT_REPLACE (eb Y), and not the one
        for slot 0 of eb X, to btrfs_get_old_root();
    
    14) At btrfs_get_old_root(), we process the BTRFS_MOD_LOG_ROOT_REPLACE
        operation and set "logical" to the logical address of eb X, which was
        the old root. We then call tree_mod_log_search() passing it the logical
        address of eb X and time_seq == 1;
    
    15) But before calling tree_mod_log_search(), task B locks eb X, adds a
        key to eb X, which results in adding a tree mod log operation of type
        BTRFS_MOD_LOG_KEY_ADD, with a sequence number of 4, to the tree mod
        log, and increments the number of items in eb X from 0 to 1.
        Now fs_info->tree_mod_seq has a value of 4;
    
    16) Task A then calls tree_mod_log_search(), which returns the most recent
        tree mod log operation for eb X, which is the one just added by task B
        at the previous step, with a sequence number of 4, a type of
        BTRFS_MOD_LOG_KEY_ADD and for slot 0;
    
    17) Before task A locks and clones eb X, task A adds another key to eb X,
        which results in adding a new BTRFS_MOD_LOG_KEY_ADD mod log operation,
        with a sequence number of 5, for slot 1 of eb X, increments the
        number of items in eb X from 1 to 2, and unlocks eb X.
        Now fs_info->tree_mod_seq has a value of 5;
    
    18) Task A then locks eb X and clones it. The clone has a value of 2 for
        the number of items and the pointer "tm" points to the tree mod log
        operation with sequence number 4, not the most recent one with a
        sequence number of 5, so there is mismatch between the number of
        mod log operations that are going to be applied to the cloned version
        of eb X and the number of items in the clone;
    
    19) Task A then calls tree_mod_log_rewind() with the clone of eb X, the
        tree mod log operation with sequence number 4 and a type of
        BTRFS_MOD_LOG_KEY_ADD, and time_seq == 1;
    
    20) At tree_mod_log_rewind(), we set the local variable "n" with a value
        of 2, which is the number of items in the clone of eb X.
    
        Then in the first iteration of the while loop, we process the mod log
        operation with sequence number 4, which is targeted at slot 0 and has
        a type of BTRFS_MOD_LOG_KEY_ADD. This results in decrementing "n" from
        2 to 1.
    
        Then we pick the next tree mod log operation for eb X, which is the
        tree mod log operation with a sequence number of 2, a type of
        BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING and for slot 0, it is the one
        added in step 5 to the tree mod log tree.
    
        We go back to the top of the loop to process this mod log operation,
        and because its slot is 0 and "n" has a value of 1, we hit the BUG_ON:
    
            (...)
            switch (tm->op) {
            case BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING:
                    BUG_ON(tm->slot < n);
                    fallthrough;
            (...)
    
    Fix this by checking for a more recent tree mod log operation after locking
    and cloning the extent buffer of the old root node, and use it as the first
    operation to apply to the cloned extent buffer when rewinding it.
    
    Stable backport notes: due to moved code and renames, in =< 5.11 the
    change should be applied to ctree.c:get_old_root.
    
    Reported-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Link: https://lore.kernel.org/linux-btrfs/20210404040732.GZ32440@hungrycats.org/
    Fixes: 834328a8493079 ("Btrfs: tree mod log's old roots could still be part of the tree")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fb880303160ce853bd88bae642eabc888e0ecf2
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Mon Apr 26 07:55:41 2021 -0700

    ALSA: sb: Fix two use after free in snd_sb_qsound_build
    
    commit 4fb44dd2c1dda18606348acdfdb97e8759dde9df upstream.
    
    In snd_sb_qsound_build, snd_ctl_add(..,p->qsound_switch...) and
    snd_ctl_add(..,p->qsound_space..) are called. But the second
    arguments of snd_ctl_add() could be freed via snd_ctl_add_replace()
    ->snd_ctl_free_one(). After the error code is returned,
    snd_sb_qsound_destroy(p) is called in __error branch.
    
    But in snd_sb_qsound_destroy(), the freed p->qsound_switch and
    p->qsound_space are still used by snd_ctl_remove().
    
    My patch set p->qsound_switch and p->qsound_space to NULL if
    snd_ctl_add() failed to avoid the uaf bugs. But these codes need
    to further be improved with the code style.
    
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210426145541.8070-1-lyl2019@mail.ustc.edu.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea104163e0a9dfbf992271d8f606657ae8e6195f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 28 13:27:04 2021 +0200

    ALSA: hda/conexant: Re-order CX5066 quirk table entries
    
    commit 2e6a731296be9d356fdccee9fb6ae345dad96438 upstream.
    
    Just re-order the cx5066_fixups[] entries for HP devices for avoiding
    the oversight of the duplicated or unapplied item in future.
    No functional changes.
    
    Also Cc-to-stable for the further patch applications.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210428112704.23967-14-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b532d333fdca6e98006cf8172c98aa6e5a98a9
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Mon Apr 26 06:11:29 2021 -0700

    ALSA: emu8000: Fix a use after free in snd_emu8000_create_mixer
    
    commit 1c98f574403dbcf2eb832d5535a10d967333ef2d upstream.
    
    Our code analyzer reported a uaf.
    
    In snd_emu8000_create_mixer, the callee snd_ctl_add(..,emu->controls[i])
    calls snd_ctl_add_replace(.., kcontrol,..). Inside snd_ctl_add_replace(),
    if error happens, kcontrol will be freed by snd_ctl_free_one(kcontrol).
    Then emu->controls[i] points to a freed memory, and the execution comes
    to __error branch of snd_emu8000_create_mixer. The freed emu->controls[i]
    is used in snd_ctl_remove(card, emu->controls[i]).
    
    My patch set emu->controls[i] to NULL if snd_ctl_add() failed to avoid
    the uaf.
    
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210426131129.4796-1-lyl2019@mail.ustc.edu.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 464f18b007dd081215d5b449dfc5dc52fed85ed7
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Apr 15 15:08:13 2021 -0700

    scsi: libfc: Fix a format specifier
    
    [ Upstream commit 90d6697810f06aceea9de71ad836a8c7669789cd ]
    
    Since the 'mfs' member has been declared as 'u32' in include/scsi/libfc.h,
    use the %u format specifier instead of %hu. This patch fixes the following
    clang compiler warning:
    
    warning: format specifies type
          'unsigned short' but the argument has type 'u32' (aka 'unsigned int')
          [-Wformat]
                                 "lport->mfs:%hu\n", mfs, lport->mfs);
                                             ~~~          ^~~~~~~~~~
                                             %u
    
    Link: https://lore.kernel.org/r/20210415220826.29438-8-bvanassche@acm.org
    Cc: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 637fb537bc57814164826f287de98a1471de28f8
Author: James Smart <jsmart2021@gmail.com>
Date:   Sun Apr 11 18:31:22 2021 -0700

    scsi: lpfc: Remove unsupported mbox PORT_CAPABILITIES logic
    
    [ Upstream commit b62232ba8caccaf1954e197058104a6478fac1af ]
    
    SLI-4 does not contain a PORT_CAPABILITIES mailbox command (only SLI-3
    does, and SLI-3 doesn't use it), yet there are SLI-4 code paths that have
    code to issue the command.  The command will always fail.
    
    Remove the code for the mailbox command and leave only the resulting
    "failure path" logic.
    
    Link: https://lore.kernel.org/r/20210412013127.2387-12-jsmart2021@gmail.com
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f6e270590ce3ccc06dd5fbcaf8b9e2307a73ecd
Author: James Smart <jsmart2021@gmail.com>
Date:   Sun Apr 11 18:31:13 2021 -0700

    scsi: lpfc: Fix crash when a REG_RPI mailbox fails triggering a LOGO response
    
    [ Upstream commit fffd18ec6579c2d9c72b212169259062fe747888 ]
    
    Fix a crash caused by a double put on the node when the driver completed an
    ACC for an unsolicted abort on the same node.  The second put was executed
    by lpfc_nlp_not_used() and is wrong because the completion routine executes
    the nlp_put when the iocbq was released.  Additionally, the driver is
    issuing a LOGO then immediately calls lpfc_nlp_set_state to put the node
    into NPR.  This call does nothing.
    
    Remove the lpfc_nlp_not_used call and additional set_state in the
    completion routine.  Remove the lpfc_nlp_set_state post issue_logo.  Isn't
    necessary.
    
    Link: https://lore.kernel.org/r/20210412013127.2387-3-jsmart2021@gmail.com
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db506a8d97886a5b24e77f127cc66d1ddf59e0d3
Author: Guchun Chen <guchun.chen@amd.com>
Date:   Tue Mar 30 17:52:18 2021 +0800

    drm/amdgpu: fix NULL pointer dereference
    
    [ Upstream commit 3c3dc654333f6389803cdcaf03912e94173ae510 ]
    
    ttm->sg needs to be checked before accessing its child member.
    
    Call Trace:
     amdgpu_ttm_backend_destroy+0x12/0x70 [amdgpu]
     ttm_bo_cleanup_memtype_use+0x3a/0x60 [ttm]
     ttm_bo_release+0x17d/0x300 [ttm]
     amdgpu_bo_unref+0x1a/0x30 [amdgpu]
     amdgpu_amdkfd_gpuvm_alloc_memory_of_gpu+0x78b/0x8b0 [amdgpu]
     kfd_ioctl_alloc_memory_of_gpu+0x118/0x220 [amdgpu]
     kfd_ioctl+0x222/0x400 [amdgpu]
     ? kfd_dev_is_large_bar+0x90/0x90 [amdgpu]
     __x64_sys_ioctl+0x8e/0xd0
     ? __context_tracking_exit+0x52/0x90
     do_syscall_64+0x33/0x80
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7f97f264d317
    Code: b3 66 90 48 8b 05 71 4b 2d 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 41 4b 2d 00 f7 d8 64 89 01 48
    RSP: 002b:00007ffdb402c338 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00007f97f3cc63a0 RCX: 00007f97f264d317
    RDX: 00007ffdb402c380 RSI: 00000000c0284b16 RDI: 0000000000000003
    RBP: 00007ffdb402c380 R08: 00007ffdb402c428 R09: 00000000c4000004
    R10: 00000000c4000004 R11: 0000000000000246 R12: 00000000c0284b16
    R13: 0000000000000003 R14: 00007f97f3cc63a0 R15: 00007f8836200000
    
    Signed-off-by: Guchun Chen <guchun.chen@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 164d29ace7d5cb94a61eab5a9af921fc27ea9ed7
Author: Marijn Suijten <marijn.suijten@somainline.org>
Date:   Tue Apr 6 23:47:24 2021 +0200

    drm/msm/mdp5: Configure PP_SYNC_HEIGHT to double the vtotal
    
    [ Upstream commit 2ad52bdb220de5ab348098e3482b01235d15a842 ]
    
    Leaving this at a close-to-maximum register value 0xFFF0 means it takes
    very long for the MDSS to generate a software vsync interrupt when the
    hardware TE interrupt doesn't arrive.  Configuring this to double the
    vtotal (like some downstream kernels) leads to a frame to take at most
    twice before the vsync signal, until hardware TE comes up.
    
    In this case the hardware interrupt responsible for providing this
    signal - "disp-te" gpio - is not hooked up to the mdp5 vsync/pp logic at
    all.  This solves severe panel update issues observed on at least the
    Xperia Loire and Tone series, until said gpio is properly hooked up to
    an irq.
    
    Suggested-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
    Signed-off-by: Marijn Suijten <marijn.suijten@somainline.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
    Link: https://lore.kernel.org/r/20210406214726.131534-2-marijn.suijten@somainline.org
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c968171d9ecbebe72ffd4600aa2fd9ebca91a791
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Apr 8 12:31:20 2021 +0200

    media: gscpa/stv06xx: fix memory leak
    
    [ Upstream commit 4f4e6644cd876c844cdb3bea2dd7051787d5ae25 ]
    
    For two of the supported sensors the stv06xx driver allocates memory which
    is stored in sd->sensor_priv. This memory is freed on a disconnect, but if
    the probe() fails, then it isn't freed and so this leaks memory.
    
    Add a new probe_error() op that drivers can use to free any allocated
    memory in case there was a probe failure.
    
    Thanks to Pavel Skripkin <paskripkin@gmail.com> for discovering the cause
    of the memory leak.
    
    Reported-and-tested-by: syzbot+e7f4c64a4248a0340c37@syzkaller.appspotmail.com
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1782603ac1c2051e338e0e109a64ac42bbd7529c
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 28 21:32:19 2021 +0200

    media: dvb-usb: fix memory leak in dvb_usb_adapter_init
    
    [ Upstream commit b7cd0da982e3043f2eec7235ac5530cb18d6af1d ]
    
    syzbot reported memory leak in dvb-usb. The problem was
    in invalid error handling in dvb_usb_adapter_init().
    
    for (n = 0; n < d->props.num_adapters; n++) {
    ....
            if ((ret = dvb_usb_adapter_stream_init(adap)) ||
                    (ret = dvb_usb_adapter_dvb_init(adap, adapter_nrs)) ||
                    (ret = dvb_usb_adapter_frontend_init(adap))) {
                    return ret;
            }
    ...
            d->num_adapters_initialized++;
    ...
    }
    
    In case of error in dvb_usb_adapter_dvb_init() or
    dvb_usb_adapter_dvb_init() d->num_adapters_initialized won't be
    incremented, but dvb_usb_adapter_exit() relies on it:
    
            for (n = 0; n < d->num_adapters_initialized; n++)
    
    So, allocated objects won't be freed.
    
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reported-by: syzbot+3c2be7424cea3b932b0e@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e3a4c7d52e7aa7fdd82f606a319a979c8a558ee
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Apr 6 15:50:53 2021 +0200

    media: i2c: adv7842: fix possible use-after-free in adv7842_remove()
    
    [ Upstream commit 4a15275b6a18597079f18241c87511406575179a ]
    
    This driver's remove path calls cancel_delayed_work(). However, that
    function does not wait until the work function finishes. This means
    that the callback function may still be running after the driver's
    remove function has finished, which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    the work is properly cancelled, no longer running, and unable
    to re-schedule itself.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19b67248dad76f1284fb70c9d349d5f73f35432b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Apr 6 15:48:12 2021 +0200

    media: i2c: adv7511-v4l2: fix possible use-after-free in adv7511_remove()
    
    [ Upstream commit 2c9541720c66899adf6f3600984cf3ef151295ad ]
    
    This driver's remove path calls cancel_delayed_work(). However, that
    function does not wait until the work function finishes. This means
    that the callback function may still be running after the driver's
    remove function has finished, which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    the work is properly cancelled, no longer running, and unable
    to re-schedule itself.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98dbbceb12d7959096284910295345cbe25fc59d
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Apr 6 15:42:46 2021 +0200

    media: adv7604: fix possible use-after-free in adv76xx_remove()
    
    [ Upstream commit fa56f5f1fe31c2050675fa63b84963ebd504a5b3 ]
    
    This driver's remove path calls cancel_delayed_work(). However, that
    function does not wait until the work function finishes. This means
    that the callback function may still be running after the driver's
    remove function has finished, which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    the work is properly cancelled, no longer running, and unable
    to re-schedule itself.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f54f60ae68bd3903b6b04d02b0a88e3aeb712390
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Apr 7 17:19:03 2021 +0800

    power: supply: s3c_adc_battery: fix possible use-after-free in s3c_adc_bat_remove()
    
    [ Upstream commit 68ae256945d2abe9036a7b68af4cc65aff79d5b7 ]
    
    This driver's remove path calls cancel_delayed_work(). However, that
    function does not wait until the work function finishes. This means
    that the callback function may still be running after the driver's
    remove function has finished, which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    the work is properly cancelled, no longer running, and unable
    to re-schedule itself.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e77334cd2f091cfd240c272cee2b184733761ea
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Apr 7 17:17:06 2021 +0800

    power: supply: generic-adc-battery: fix possible use-after-free in gab_remove()
    
    [ Upstream commit b6cfa007b3b229771d9588970adb4ab3e0487f49 ]
    
    This driver's remove path calls cancel_delayed_work(). However, that
    function does not wait until the work function finishes. This means
    that the callback function may still be running after the driver's
    remove function has finished, which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    the work is properly cancelled, no longer running, and unable
    to re-schedule itself.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9dbc93927a0aea537c04c8bc617fb7cf01344ab
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Apr 6 18:01:15 2021 +0100

    clk: socfpga: arria10: Fix memory leak of socfpga_clk on error return
    
    [ Upstream commit 657d4d1934f75a2d978c3cf2086495eaa542e7a9 ]
    
    There is an error return path that is not kfree'ing socfpga_clk leading
    to a memory leak. Fix this by adding in the missing kfree call.
    
    Addresses-Coverity: ("Resource leak")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210406170115.430990-1-colin.king@canonical.com
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80e3326a073bbee62ed6399d2158c54201b60074
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Mar 25 08:48:21 2021 +0100

    media: vivid: update EDID
    
    [ Upstream commit 443ec4bbc6116f6f492a7a1282bfd8422c862158 ]
    
    The EDID had a few mistakes as reported by edid-decode:
    
    Block 1, CTA-861 Extension Block:
      Video Data Block: For improved preferred timing interoperability, set 'Native detailed modes' to 1.
      Video Capability Data Block: S_PT is equal to S_IT and S_CE, so should be set to 0 instead.
    
    Fixed those.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d703dfe46a1f5c72bf44dfca3a909e23f09e8a1
Author: Muhammad Usama Anjum <musamaanjum@gmail.com>
Date:   Wed Mar 24 19:07:53 2021 +0100

    media: em28xx: fix memory leak
    
    [ Upstream commit 0ae10a7dc8992ee682ff0b1752ff7c83d472eef1 ]
    
    If some error occurs, URB buffers should also be freed. If they aren't
    freed with the dvb here, the em28xx_dvb_fini call doesn't frees the URB
    buffers as dvb is set to NULL. The function in which error occurs should
    do all the cleanup for the allocations it had done.
    
    Tested the patch with the reproducer provided by syzbot. This patch
    fixes the memleak.
    
    Reported-by: syzbot+889397c820fa56adf25d@syzkaller.appspotmail.com
    Signed-off-by: Muhammad Usama Anjum <musamaanjum@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f010929eaeb0a1661bd9550bb8771e419e3ff3a
Author: Ewan D. Milne <emilne@redhat.com>
Date:   Wed Mar 31 16:11:54 2021 -0400

    scsi: scsi_dh_alua: Remove check for ASC 24h in alua_rtpg()
    
    [ Upstream commit bc3f2b42b70eb1b8576e753e7d0e117bbb674496 ]
    
    Some arrays return ILLEGAL_REQUEST with ASC 00h if they don't support the
    RTPG extended header so remove the check for INVALID FIELD IN CDB.
    
    Link: https://lore.kernel.org/r/20210331201154.20348-1-emilne@redhat.com
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4ab37c7a26074d465a72400f970d8a964b4f421
Author: Quinn Tran <qutran@marvell.com>
Date:   Mon Mar 29 01:52:22 2021 -0700

    scsi: qla2xxx: Fix use after free in bsg
    
    [ Upstream commit 2ce35c0821afc2acd5ee1c3f60d149f8b2520ce8 ]
    
    On bsg command completion, bsg_job_done() was called while qla driver
    continued to access the bsg_job buffer. bsg_job_done() would free up
    resources that ended up being reused by other task while the driver
    continued to access the buffers. As a result, driver was reading garbage
    data.
    
    localhost kernel: BUG: KASAN: use-after-free in sg_next+0x64/0x80
    localhost kernel: Read of size 8 at addr ffff8883228a3330 by task swapper/26/0
    localhost kernel:
    localhost kernel: CPU: 26 PID: 0 Comm: swapper/26 Kdump:
    loaded Tainted: G          OE    --------- -  - 4.18.0-193.el8.x86_64+debug #1
    localhost kernel: Hardware name: HP ProLiant DL360
    Gen9/ProLiant DL360 Gen9, BIOS P89 08/12/2016
    localhost kernel: Call Trace:
    localhost kernel: <IRQ>
    localhost kernel: dump_stack+0x9a/0xf0
    localhost kernel: print_address_description.cold.3+0x9/0x23b
    localhost kernel: kasan_report.cold.4+0x65/0x95
    localhost kernel: debug_dma_unmap_sg.part.12+0x10d/0x2d0
    localhost kernel: qla2x00_bsg_sp_free+0xaf6/0x1010 [qla2xxx]
    
    Link: https://lore.kernel.org/r/20210329085229.4367-6-njavali@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Saurav Kashyap <skashyap@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7daa9ef89e9bb83af76fef4f2de9050d4b5bb62b
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Sat Mar 20 16:23:58 2021 -0700

    scsi: qla2xxx: Always check the return value of qla24xx_get_isp_stats()
    
    [ Upstream commit a2b2cc660822cae08c351c7f6b452bfd1330a4f7 ]
    
    This patch fixes the following Coverity warning:
    
        CID 361199 (#1 of 1): Unchecked return value (CHECKED_RETURN)
        3. check_return: Calling qla24xx_get_isp_stats without checking return
        value (as is done elsewhere 4 out of 5 times).
    
    Link: https://lore.kernel.org/r/20210320232359.941-7-bvanassche@acm.org
    Cc: Quinn Tran <qutran@marvell.com>
    Cc: Mike Christie <michael.christie@oracle.com>
    Cc: Himanshu Madhani <himanshu.madhani@oracle.com>
    Cc: Daniel Wagner <dwagner@suse.de>
    Cc: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07591cd810553c05848c30da559f60c0e952c9b9
Author: shaoyunl <shaoyun.liu@amd.com>
Date:   Tue Mar 9 10:30:15 2021 -0500

    drm/amdgpu : Fix asic reset regression issue introduce by 8f211fe8ac7c4f
    
    [ Upstream commit c8941550aa66b2a90f4b32c45d59e8571e33336e ]
    
    This recent change introduce SDMA interrupt info printing with irq->process function.
    These functions do not require a set function to enable/disable the irq
    
    Signed-off-by: shaoyunl <shaoyun.liu@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7255b6499f82641ad30fde6de788ea4d0b773b50
Author: dongjian <dongjian@yulong.com>
Date:   Mon Mar 22 19:21:33 2021 +0800

    power: supply: Use IRQF_ONESHOT
    
    [ Upstream commit 2469b836fa835c67648acad17d62bc805236a6ea ]
    
    Fixes coccicheck error:
    
    drivers/power/supply/pm2301_charger.c:1089:7-27: ERROR:
    drivers/power/supply/lp8788-charger.c:502:8-28: ERROR:
    drivers/power/supply/tps65217_charger.c:239:8-33: ERROR:
    drivers/power/supply/tps65090-charger.c:303:8-33: ERROR:
    
    Threaded IRQ with no primary handler requested without IRQF_ONESHOT
    
    Signed-off-by: dongjian <dongjian@yulong.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 494d7740bb14306272b01722ce669d0b07ba9a3f
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Mar 11 15:46:40 2021 +0100

    media: gspca/sq905.c: fix uninitialized variable
    
    [ Upstream commit eaaea4681984c79d2b2b160387b297477f0c1aab ]
    
    act_len can be uninitialized if usb_bulk_msg() returns an error.
    Set it to 0 to avoid a KMSAN error.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+a4e309017a5f3a24c7b3@syzkaller.appspotmail.com
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7e54ee71437d1d0e5cee0f346a55990e98820ac
Author: Daniel Niv <danielniv3@gmail.com>
Date:   Thu Mar 11 03:53:00 2021 +0100

    media: media/saa7164: fix saa7164_encoder_register() memory leak bugs
    
    [ Upstream commit c759b2970c561e3b56aa030deb13db104262adfe ]
    
    Add a fix for the memory leak bugs that can occur when the
    saa7164_encoder_register() function fails.
    The function allocates memory without explicitly freeing
    it when errors occur.
    Add a better error handling that deallocate the unused buffers before the
    function exits during a fail.
    
    Signed-off-by: Daniel Niv <danielniv3@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c9b7ab25e18b2c60cad3df86d78cdd505e06233
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Mar 7 16:17:56 2021 +0100

    extcon: arizona: Fix some issues when HPDET IRQ fires after the jack has been unplugged
    
    [ Upstream commit c309a3e8793f7e01c4a4ec7960658380572cb576 ]
    
    When the jack is partially inserted and then removed again it may be
    removed while the hpdet code is running. In this case the following
    may happen:
    
    1. The "JACKDET rise" or ""JACKDET fall" IRQ triggers
    2. arizona_jackdet runs and takes info->lock
    3. The "HPDET" IRQ triggers
    4. arizona_hpdet_irq runs, blocks on info->lock
    5. arizona_jackdet calls arizona_stop_mic() and clears info->hpdet_done
    6. arizona_jackdet releases info->lock
    7. arizona_hpdet_irq now can continue running and:
    7.1 Calls arizona_start_mic() (if a mic was detected)
    7.2 sets info->hpdet_done
    
    Step 7 is undesirable / a bug:
    7.1 causes the device to stay in a high power-state (with MICVDD enabled)
    7.2 causes hpdet to not run on the next jack insertion, which in turn
        causes the EXTCON_JACK_HEADPHONE state to never get set
    
    This fixes both issues by skipping these 2 steps when arizona_hpdet_irq
    runs after the jack has been unplugged.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Tested-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Acked-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 227c7da83c76a822927bc4439bd5df5fc616c568
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Wed Mar 3 10:54:19 2021 +0100

    power: supply: bq27xxx: fix power_avg for newer ICs
    
    [ Upstream commit c4d57c22ac65bd503716062a06fad55a01569cac ]
    
    On all newer bq27xxx ICs, the AveragePower register contains a signed
    value; in addition to handling the raw value as unsigned, the driver
    code also didn't convert it to µW as expected.
    
    At least for the BQ28Z610, the reference manual incorrectly states that
    the value is in units of 1mW and not 10mW. I have no way of knowing
    whether the manuals of other supported ICs contain the same error, or if
    there are models that actually use 1mW. At least, the new code shouldn't
    be *less* correct than the old version for any device.
    
    power_avg is removed from the cache structure, se we don't have to
    extend it to store both a signed value and an error code. Always getting
    an up-to-date value may be desirable anyways, as it avoids inconsistent
    current and power readings when switching between charging and
    discharging.
    
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f76279ad0079322456e4b456bd86127eeed25d4
Author: Sean Young <sean@mess.org>
Date:   Mon Feb 22 09:08:35 2021 +0100

    media: ite-cir: check for receive overflow
    
    [ Upstream commit 28c7afb07ccfc0a939bb06ac1e7afe669901c65a ]
    
    It's best if this condition is reported.
    
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0af8c5dbdf3f9c947718445f1ab32299fc1cf746
Author: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date:   Sat Feb 27 21:56:26 2021 -0800

    scsi: target: pscsi: Fix warning in pscsi_complete_cmd()
    
    [ Upstream commit fd48c056a32ed6e7754c7c475490f3bed54ed378 ]
    
    This fixes a compilation warning in pscsi_complete_cmd():
    
         drivers/target/target_core_pscsi.c: In function ‘pscsi_complete_cmd’:
         drivers/target/target_core_pscsi.c:624:5: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
         ; /* XXX: TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE */
    
    Link: https://lore.kernel.org/r/20210228055645.22253-5-chaitanya.kulkarni@wdc.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88b7b327e8c4cebcb4eeb5c064c03fff6dc50773
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Mar 1 09:18:06 2021 -0800

    scsi: lpfc: Fix pt2pt connection does not recover after LOGO
    
    [ Upstream commit bd4f5100424d17d4e560d6653902ef8e49b2fc1f ]
    
    On a pt2pt setup, between 2 initiators, if one side issues a a LOGO, there
    is no relogin attempt. The FC specs are grey in this area on which port
    (higher wwn or not) is to re-login.
    
    As there is no spec guidance, unconditionally re-PLOGI after the logout to
    ensure a login is re-established.
    
    Link: https://lore.kernel.org/r/20210301171821.3427-8-jsmart2021@gmail.com
    Co-developed-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 588382163e6f09b1c4aa073da58f720e3cdcfb66
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Mar 1 09:18:00 2021 -0800

    scsi: lpfc: Fix incorrect dbde assignment when building target abts wqe
    
    [ Upstream commit 9302154c07bff4e7f7f43c506a1ac84540303d06 ]
    
    The wqe_dbde field indicates whether a Data BDE is present in Words 0:2 and
    should therefore should be clear in the abts request wqe. By setting the
    bit we can be misleading fw into error cases.
    
    Clear the wqe_dbde field.
    
    Link: https://lore.kernel.org/r/20210301171821.3427-2-jsmart2021@gmail.com
    Co-developed-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2938b650dedc3a53dcdf148652a1dadbee037d1d
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Mar 12 15:25:21 2021 -0500

    btrfs: convert logic BUG_ON()'s in replace_path to ASSERT()'s
    
    [ Upstream commit 7a9213a93546e7eaef90e6e153af6b8fc7553f10 ]
    
    A few BUG_ON()'s in replace_path are purely to keep us from making
    logical mistakes, so replace them with ASSERT()'s.
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8b50d22a9b181a09cd5ca3feee023e06cc26174
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Apr 7 17:27:16 2021 +0800

    phy: phy-twl4030-usb: Fix possible use-after-free in twl4030_usb_remove()
    
    [ Upstream commit e1723d8b87b73ab363256e7ca3af3ddb75855680 ]
    
    This driver's remove path calls cancel_delayed_work(). However, that
    function does not wait until the work function finishes. This means
    that the callback function may still be running after the driver's
    remove function has finished, which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    the work is properly cancelled, no longer running, and unable
    to re-schedule itself.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20210407092716.3270248-1-yangyingliang@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e64b65d96256b6968793fec166d1015fdbf05a7c
Author: Pavel Machek <pavel@ucw.cz>
Date:   Wed Apr 14 20:12:49 2021 +0300

    intel_th: Consistency and off-by-one fix
    
    [ Upstream commit 18ffbc47d45a1489b664dd68fb3a7610a6e1dea3 ]
    
    Consistently use "< ... +1" in for loops.
    
    Fix of-by-one in for_each_set_bit().
    
    Signed-off-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: https://lore.kernel.org/lkml/20190724095841.GA6952@amd/
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210414171251.14672-6-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a771fae9ccbaadf016b5daa0efac66f802a72ce
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Fri Apr 9 08:29:54 2021 +0000

    spi: omap-100k: Fix reference leak to master
    
    [ Upstream commit a23faea76d4cf5f75decb574491e66f9ecd707e7 ]
    
    Call spi_master_get() holds the reference count to master device, thus
    we need an additional spi_master_put() call to reduce the reference
    count, otherwise we will leak a reference to master.
    
    This commit fix it by removing the unnecessary spi_master_get().
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Link: https://lore.kernel.org/r/20210409082954.2906933-1-weiyongjun1@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c9d39b95562f6604d799e6cae004b5e8126a615
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Fri Apr 9 08:29:55 2021 +0000

    spi: dln2: Fix reference leak to master
    
    [ Upstream commit 9b844b087124c1538d05f40fda8a4fec75af55be ]
    
    Call spi_master_get() holds the reference count to master device, thus
    we need an additional spi_master_put() call to reduce the reference
    count, otherwise we will leak a reference to master.
    
    This commit fix it by removing the unnecessary spi_master_get().
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Link: https://lore.kernel.org/r/20210409082955.2907950-1-weiyongjun1@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44c58b30a03f8466c835814b1d994dd1ed3a55a1
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Fri Mar 26 16:02:41 2021 +0000

    perf/arm_pmu_platform: Fix error handling
    
    [ Upstream commit e338cb6bef254821a8c095018fd27254d74bfd6a ]
    
    If we're aborting after failing to register the PMU device,
    we probably don't want to leak the IRQs that we've claimed.
    
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/53031a607fc8412a60024bfb3bb8cd7141f998f5.1616774562.git.robin.murphy@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90b1c3d1dbdbb2d74df42fefbf98049697e291bf
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2b9d655f49294a32fdbc9499165989dfcacb636
Author: John Millikin <john@john-millikin.com>
Date:   Thu Mar 25 17:04:33 2021 -0700

    x86/build: Propagate $(CLANG_FLAGS) to $(REALMODE_FLAGS)
    
    [ Upstream commit 8abe7fc26ad8f28bfdf78adbed56acd1fa93f82d ]
    
    When cross-compiling with Clang, the `$(CLANG_FLAGS)' variable
    contains additional flags needed to build C and assembly sources
    for the target platform. Normally this variable is automatically
    included in `$(KBUILD_CFLAGS)' via the top-level Makefile.
    
    The x86 real-mode makefile builds `$(REALMODE_CFLAGS)' from a
    plain assignment and therefore drops the Clang flags. This causes
    Clang to not recognize x86-specific assembler directives:
    
      arch/x86/realmode/rm/header.S:36:1: error: unknown directive
      .type real_mode_header STT_OBJECT ; .size real_mode_header, .-real_mode_header
      ^
    
    Explicit propagation of `$(CLANG_FLAGS)' to `$(REALMODE_CFLAGS)',
    which is inherited by real-mode make rules, fixes cross-compilation
    with Clang for x86 targets.
    
    Relevant flags:
    
    * `--target' sets the target architecture when cross-compiling. This
      flag must be set for both compilation and assembly (`KBUILD_AFLAGS')
      to support architecture-specific assembler directives.
    
    * `-no-integrated-as' tells clang to assemble with GNU Assembler
      instead of its built-in LLVM assembler. This flag is set by default
      unless `LLVM_IAS=1' is set, because the LLVM assembler can't yet
      parse certain GNU extensions.
    
    Signed-off-by: John Millikin <john@john-millikin.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Link: https://lkml.kernel.org/r/20210326000435.4785-2-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e1edd01d55397464782a621b228928eb6f96a11
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Mar 16 16:51:40 2021 +0100

    PCI: PM: Do not read power state in pci_enable_device_flags()
    
    [ Upstream commit 4514d991d99211f225d83b7e640285f29f0755d0 ]
    
    It should not be necessary to update the current_state field of
    struct pci_dev in pci_enable_device_flags() before calling
    do_pci_enable_device() for the device, because none of the
    code between that point and the pci_set_power_state() call in
    do_pci_enable_device() invoked later depends on it.
    
    Moreover, doing that is actively harmful in some cases.  For example,
    if the given PCI device depends on an ACPI power resource whose _STA
    method initially returns 0 ("off"), but the config space of the PCI
    device is accessible and the power state retrieved from the
    PCI_PM_CTRL register is D0, the current_state field in the struct
    pci_dev representing that device will get out of sync with the
    power.state of its ACPI companion object and that will lead to
    power management issues going forward.
    
    To avoid such issues it is better to leave the current_state value
    as is until it is changed to PCI_D0 by do_pci_enable_device() as
    appropriate.  However, the power state of the device is not changed
    to PCI_D0 if it is already enabled when pci_enable_device_flags()
    gets called for it, so update its current_state in that case, but
    use pci_update_current_state() covering platform PM too for that.
    
    Link: https://lore.kernel.org/lkml/20210314000439.3138941-1-luzmaximilian@gmail.com/
    Reported-by: Maximilian Luz <luzmaximilian@gmail.com>
    Tested-by: Maximilian Luz <luzmaximilian@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 679d7b2c9551fb7cea376aab9b1aee0621ff3f81
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Wed Mar 10 19:43:21 2021 -0800

    usb: xhci: Fix port minor revision
    
    [ Upstream commit 64364bc912c01b33bba6c22e3ccb849bfca96398 ]
    
    Some hosts incorrectly use sub-minor version for minor version (i.e.
    0x02 instead of 0x20 for bcdUSB 0x320 and 0x01 for bcdUSB 0x310).
    Currently the xHCI driver works around this by just checking for minor
    revision > 0x01 for USB 3.1 everywhere. With the addition of USB 3.2,
    checking this gets a bit cumbersome. Since there is no USB release with
    bcdUSB 0x301 to 0x309, we can assume that sub-minor version 01 to 09 is
    incorrect. Let's try to fix this and use the minor revision that matches
    with the USB/xHCI spec to help with the version checking within the
    driver.
    
    Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/ed330e95a19dc367819c5b4d78bf7a541c35aa0a.1615432770.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f143722ecd38b5f06c11d6daca3fbc179b3f1dcd
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Fri Mar 19 02:31:25 2021 -0700

    usb: dwc3: gadget: Ignore EP queue requests during bus reset
    
    [ Upstream commit 71ca43f30df9c642970f9dc9b2d6f463f4967e7b ]
    
    The current dwc3_gadget_reset_interrupt() will stop any active
    transfers, but only addresses blocking of EP queuing for while we are
    coming from a disconnected scenario, i.e. after receiving the disconnect
    event.  If the host decides to issue a bus reset on the device, the
    connected parameter will still be set to true, allowing for EP queuing
    to continue while we are disabling the functions.  To avoid this, set the
    connected flag to false until the stop active transfers is complete.
    
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1616146285-19149-3-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd9ad3cda28f6e25d9afdd85481ef3874a43f740
Author: Ruslan Bilovol <ruslan.bilovol@gmail.com>
Date:   Mon Mar 1 13:49:34 2021 +0200

    usb: gadget: f_uac1: validate input parameters
    
    [ Upstream commit a59c68a6a3d1b18e2494f526eb19893a34fa6ec6 ]
    
    Currently user can configure UAC1 function with
    parameters that violate UAC1 spec or are not supported
    by UAC1 gadget implementation.
    
    This can lead to incorrect behavior if such gadget
    is connected to the host - like enumeration failure
    or other issues depending on host's UAC1 driver
    implementation, bringing user to a long hours
    of debugging the issue.
    
    Instead of silently accept these parameters, throw
    an error if they are not valid.
    
    Signed-off-by: Ruslan Bilovol <ruslan.bilovol@gmail.com>
    Link: https://lore.kernel.org/r/1614599375-8803-5-git-send-email-ruslan.bilovol@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3b1961af2ce359e8b1747aa8d3839d7289a4d7b
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Mon Mar 8 13:53:38 2021 +0100

    usb: gadget: uvc: add bInterval checking for HS mode
    
    [ Upstream commit 26adde04acdff14a1f28d4a5dce46a8513a3038b ]
    
    Patch adds extra checking for bInterval passed by configfs.
    The 5.6.4 chapter of USB Specification (rev. 2.0) say:
    "A high-bandwidth endpoint must specify a period of 1x125 µs
    (i.e., a bInterval value of 1)."
    
    The issue was observed during testing UVC class on CV.
    I treat this change as improvement because we can control
    bInterval by configfs.
    
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20210308125338.4824-1-pawell@gli-login.cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 417ec24258f6060a9962bc84d11351384bea006a
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Mar 2 21:33:03 2021 +0100

    crypto: api - check for ERR pointers in crypto_destroy_tfm()
    
    [ Upstream commit 83681f2bebb34dbb3f03fecd8f570308ab8b7c2c ]
    
    Given that crypto_alloc_tfm() may return ERR pointers, and to avoid
    crashes on obscure error paths where such pointers are presented to
    crypto_destroy_tfm() (such as [0]), add an ERR_PTR check there
    before dereferencing the second argument as a struct crypto_tfm
    pointer.
    
    [0] https://lore.kernel.org/linux-crypto/000000000000de949705bc59e0f6@google.com/
    
    Reported-by: syzbot+12cf5fbfdeba210a89dd@syzkaller.appspotmail.com
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0e5510b5ae4be9d6b040fb890e15ea22ad00354
Author: karthik alapati <mail@karthek.com>
Date:   Sun Feb 21 21:01:05 2021 +0530

    staging: wimax/i2400m: fix byte-order issue
    
    [ Upstream commit 0c37baae130df39b19979bba88bde2ee70a33355 ]
    
    fix sparse byte-order warnings by converting host byte-order
    type to __le16 byte-order types before assigning to hdr.length
    
    Signed-off-by: karthik alapati <mail@karthek.com>
    Link: https://lore.kernel.org/r/0ae5c5c4c646506d8be871e7be5705542671a1d5.1613921277.git.mail@karthek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5db5917987a602074bc2c4ba7670225c503d921a
Author: Phillip Potter <phil@philpotter.co.uk>
Date:   Wed Mar 31 23:07:19 2021 +0100

    fbdev: zero-fill colormap in fbcmap.c
    
    commit 19ab233989d0f7ab1de19a036e247afa4a0a1e9c upstream.
    
    Use kzalloc() rather than kmalloc() for the dynamically allocated parts
    of the colormap in fb_alloc_cmap_gfp, to prevent a leak of random kernel
    data to userspace under certain circumstances.
    
    Fixes a KMSAN-found infoleak bug reported by syzbot at:
    https://syzkaller.appspot.com/bug?id=741578659feabd108ad9e06696f0c1f2e69c4b6e
    
    Reported-by: syzbot+47fa9c9c648b765305b9@syzkaller.appspotmail.com
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Phillip Potter <phil@philpotter.co.uk>
    Link: https://lore.kernel.org/r/20210331220719.1499743-1-phil@philpotter.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea935e346fdbaf6cf242581bf824fc5da3b5e17f
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Wed Apr 14 20:12:50 2021 +0300

    intel_th: pci: Add Rocket Lake CPU support
    
    commit 9f7f2a5e01ab4ee56b6d9c0572536fe5fd56e376 upstream.
    
    This adds support for the Trace Hub in Rocket Lake CPUs.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable <stable@vger.kernel.org> # v4.14+
    Link: https://lore.kernel.org/r/20210414171251.14672-7-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f78801b4e364a7984aba133863fbcb9d96fa6a90
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Apr 20 10:55:12 2021 +0100

    btrfs: fix metadata extent leak after failure to create subvolume
    
    commit 67addf29004c5be9fa0383c82a364bb59afc7f84 upstream.
    
    When creating a subvolume we allocate an extent buffer for its root node
    after starting a transaction. We setup a root item for the subvolume that
    points to that extent buffer and then attempt to insert the root item into
    the root tree - however if that fails, due to ENOMEM for example, we do
    not free the extent buffer previously allocated and we do not abort the
    transaction (as at that point we did nothing that can not be undone).
    
    This means that we effectively do not return the metadata extent back to
    the free space cache/tree and we leave a delayed reference for it which
    causes a metadata extent item to be added to the extent tree, in the next
    transaction commit, without having backreferences. When this happens
    'btrfs check' reports the following:
    
      $ btrfs check /dev/sdi
      Opening filesystem to check...
      Checking filesystem on /dev/sdi
      UUID: dce2cb9d-025f-4b05-a4bf-cee0ad3785eb
      [1/7] checking root items
      [2/7] checking extents
      ref mismatch on [30425088 16384] extent item 1, found 0
      backref 30425088 root 256 not referenced back 0x564a91c23d70
      incorrect global backref count on 30425088 found 1 wanted 0
      backpointer mismatch on [30425088 16384]
      owner ref check failed [30425088 16384]
      ERROR: errors found in extent allocation tree or chunk allocation
      [3/7] checking free space cache
      [4/7] checking fs roots
      [5/7] checking only csums items (without verifying data)
      [6/7] checking root refs
      [7/7] checking quota groups skipped (not enabled on this FS)
      found 212992 bytes used, error(s) found
      total csum bytes: 0
      total tree bytes: 131072
      total fs tree bytes: 32768
      total extent tree bytes: 16384
      btree space waste bytes: 124669
      file data blocks allocated: 65536
       referenced 65536
    
    So fix this by freeing the metadata extent if btrfs_insert_root() returns
    an error.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e94851629c49c65b4fbb29a5725ddfd7988f8f20
Author: Paul Aurich <paul@darkrain42.org>
Date:   Tue Apr 13 14:25:27 2021 -0700

    cifs: Return correct error code from smb2_get_enc_key
    
    commit 83728cbf366e334301091d5b808add468ab46b27 upstream.
    
    Avoid a warning if the error percolates back up:
    
    [440700.376476] CIFS VFS: \\otters.example.com crypt_message: Could not get encryption key
    [440700.386947] ------------[ cut here ]------------
    [440700.386948] err = 1
    [440700.386977] WARNING: CPU: 11 PID: 2733 at /build/linux-hwe-5.4-p6lk6L/linux-hwe-5.4-5.4.0/lib/errseq.c:74 errseq_set+0x5c/0x70
    ...
    [440700.397304] CPU: 11 PID: 2733 Comm: tar Tainted: G           OE     5.4.0-70-generic #78~18.04.1-Ubuntu
    ...
    [440700.397334] Call Trace:
    [440700.397346]  __filemap_set_wb_err+0x1a/0x70
    [440700.397419]  cifs_writepages+0x9c7/0xb30 [cifs]
    [440700.397426]  do_writepages+0x4b/0xe0
    [440700.397444]  __filemap_fdatawrite_range+0xcb/0x100
    [440700.397455]  filemap_write_and_wait+0x42/0xa0
    [440700.397486]  cifs_setattr+0x68b/0xf30 [cifs]
    [440700.397493]  notify_change+0x358/0x4a0
    [440700.397500]  utimes_common+0xe9/0x1c0
    [440700.397510]  do_utimes+0xc5/0x150
    [440700.397520]  __x64_sys_utimensat+0x88/0xd0
    
    Fixes: 61cfac6f267d ("CIFS: Fix possible use after free in demultiplex thread")
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258ab6514794b5df758ae7253f5ce76fef9d11de
Author: Seunghui Lee <sh043.lee@samsung.com>
Date:   Mon Feb 22 17:31:56 2021 +0900

    mmc: core: Set read only for SD cards with permanent write protect bit
    
    commit 917a5336f2c27928be270226ab374ed0cbf3805d upstream.
    
    Some of SD cards sets permanent write protection bit in their CSD register,
    due to lifespan or internal problem. To avoid unnecessary I/O write
    operations, let's parse the bits in the CSD during initialization and mark
    the card as read only for this case.
    
    Signed-off-by: Seunghui Lee <sh043.lee@samsung.com>
    Link: https://lore.kernel.org/r/20210222083156.19158-1-sh043.lee@samsung.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2032103bcebe750e840b2568c07e3b8bb335429
Author: DooHyun Hwang <dh0421.hwang@samsung.com>
Date:   Wed Feb 10 13:59:36 2021 +0900

    mmc: core: Do a power cycle when the CMD11 fails
    
    commit 147186f531ae49c18b7a9091a2c40e83b3d95649 upstream.
    
    A CMD11 is sent to the SD/SDIO card to start the voltage switch procedure
    into 1.8V I/O. According to the SD spec a power cycle is needed of the
    card, if it turns out that the CMD11 fails. Let's fix this, to allow a
    retry of the initialization without the voltage switch, to succeed.
    
    Note that, whether it makes sense to also retry with the voltage switch
    after the power cycle is a bit more difficult to know. At this point, we
    treat it like the CMD11 isn't supported and therefore we skip it when
    retrying.
    
    Signed-off-by: DooHyun Hwang <dh0421.hwang@samsung.com>
    Link: https://lore.kernel.org/r/20210210045936.7809-1-dh0421.hwang@samsung.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c165c8d8053dea15270c1393ab4c11006f5a16e4
Author: Avri Altman <avri.altman@wdc.com>
Date:   Tue Apr 20 16:46:41 2021 +0300

    mmc: block: Update ext_csd.cache_ctrl if it was written
    
    commit aea0440ad023ab0662299326f941214b0d7480bd upstream.
    
    The cache function can be turned ON and OFF by writing to the CACHE_CTRL
    byte (EXT_CSD byte [33]).  However,  card->ext_csd.cache_ctrl is only
    set on init if cache size > 0.
    
    Fix that by explicitly setting ext_csd.cache_ctrl on ext-csd write.
    
    Signed-off-by: Avri Altman <avri.altman@wdc.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210420134641.57343-3-avri.altman@wdc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6ccb60597fba03b7d60af1d24bfcccd7c45f2f4
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Thu Feb 18 15:09:50 2021 +0200

    spi: spi-ti-qspi: Free DMA resources
    
    commit 1d309cd688a76fb733f0089d36dc630327b32d59 upstream.
    
    Release the RX channel and free the dma coherent memory when
    devm_spi_register_master() fails.
    
    Fixes: 5720ec0a6d26 ("spi: spi-ti-qspi: Add DMA support for QSPI mmap read")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Link: https://lore.kernel.org/r/20210218130950.90155-1-tudor.ambarus@microchip.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b902a1e006772d32c652b892d0bbe06c59f541c
Author: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
Date:   Fri Feb 26 15:00:23 2021 -0600

    ecryptfs: fix kernel panic with null dev_name
    
    commit 9046625511ad8dfbc8c6c2de16b3532c43d68d48 upstream.
    
    When mounting eCryptfs, a null "dev_name" argument to ecryptfs_mount()
    causes a kernel panic if the parsed options are valid. The easiest way to
    reproduce this is to call mount() from userspace with an existing
    eCryptfs mount's options and a "source" argument of 0.
    
    Error out if "dev_name" is null in ecryptfs_mount()
    
    Fixes: 237fead61998 ("[PATCH] ecryptfs: fs/Makefile and fs/Kconfig")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
    Signed-off-by: Tyler Hicks <code@tyhicks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49d77ee580ee6f40f1dcf8dbfb5bd909c42a6789
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Tue Mar 16 17:22:24 2021 +0800

    arm64: dts: mt8173: fix property typo of 'phys' in dsi node
    
    commit e4e5d030bd779fb8321d3b8bd65406fbe0827037 upstream.
    
    Use 'phys' instead of 'phy'.
    
    Fixes: 81ad4dbaf7af ("arm64: dts: mt8173: Add display subsystem related nodes")
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Reviewed-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210316092232.9806-5-chunfeng.yun@mediatek.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9f087cf5da32891681f7901d7cf9f52db85df0d
Author: Mark Langsdorf <mlangsdo@redhat.com>
Date:   Tue Apr 27 13:54:33 2021 -0500

    ACPI: custom_method: fix a possible memory leak
    
    commit 1cfd8956437f842836e8a066b40d1ec2fc01f13e upstream.
    
    In cm_write(), if the 'buf' is allocated memory but not fully consumed,
    it is possible to reallocate the buffer without freeing it by passing
    '*ppos' as 0 on a subsequent call.
    
    Add an explicit kfree() before kzalloc() to prevent the possible memory
    leak.
    
    Fixes: 526b4af47f44 ("ACPI: Split out custom_method functionality into an own driver")
    Signed-off-by: Mark Langsdorf <mlangsdo@redhat.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90575d1d9311b753cf1718f4ce9061ddda7dfd23
Author: Mark Langsdorf <mlangsdo@redhat.com>
Date:   Fri Apr 23 10:28:17 2021 -0500

    ACPI: custom_method: fix potential use-after-free issue
    
    commit e483bb9a991bdae29a0caa4b3a6d002c968f94aa upstream.
    
    In cm_write(), buf is always freed when reaching the end of the
    function.  If the requested count is less than table.length, the
    allocated buffer will be freed but subsequent calls to cm_write() will
    still try to access it.
    
    Remove the unconditional kfree(buf) at the end of the function and
    set the buf to NULL in the -EINVAL error path to match the rest of
    function.
    
    Fixes: 03d1571d9513 ("ACPI: custom_method: fix memory leaks")
    Signed-off-by: Mark Langsdorf <mlangsdo@redhat.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b91facda2cf791c36156a41149eaa3925fc4ac71
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Apr 20 11:04:10 2021 +0200

    s390/disassembler: increase ebpf disasm buffer size
    
    commit 6f3353c2d2b3eb4de52e9704cb962712033db181 upstream.
    
    Current ebpf disassembly buffer size of 64 is too small. E.g. this line
    takes 65 bytes:
    01fffff8005822e: ec8100ed8065\tclgrj\t%r8,%r1,8,001fffff80058408\n\0
    
    Double the buffer size like it is done for the kernel disassembly buffer.
    
    Fixes the following KASAN finding:
    
    UG: KASAN: stack-out-of-bounds in print_fn_code+0x34c/0x380
    Write of size 1 at addr 001fff800ad5f970 by task test_progs/853
    
    CPU: 53 PID: 853 Comm: test_progs Not tainted
    5.12.0-rc7-23786-g23457d86b1f0-dirty #19
    Hardware name: IBM 3906 M04 704 (LPAR)
    Call Trace:
     [<0000000cd8e0538a>] show_stack+0x17a/0x1668
     [<0000000cd8e2a5d8>] dump_stack+0x140/0x1b8
     [<0000000cd8e16e74>] print_address_description.constprop.0+0x54/0x260
     [<0000000cd75a8698>] kasan_report+0xc8/0x130
     [<0000000cd6e26da4>] print_fn_code+0x34c/0x380
     [<0000000cd6ea0f4e>] bpf_int_jit_compile+0xe3e/0xe58
     [<0000000cd72c4c88>] bpf_prog_select_runtime+0x5b8/0x9c0
     [<0000000cd72d1bf8>] bpf_prog_load+0xa78/0x19c0
     [<0000000cd72d7ad6>] __do_sys_bpf.part.0+0x18e/0x768
     [<0000000cd6e0f392>] do_syscall+0x12a/0x220
     [<0000000cd8e333f8>] __do_syscall+0x98/0xc8
     [<0000000cd8e54834>] system_call+0x6c/0x94
    1 lock held by test_progs/853:
     #0: 0000000cd9bf7460 (report_lock){....}-{2:2}, at:
         kasan_report+0x96/0x130
    
    addr 001fff800ad5f970 is located in stack of task test_progs/853 at
    offset 96 in frame:
     print_fn_code+0x0/0x380
    this frame has 1 object:
     [32, 96) 'buffer'
    
    Memory state around the buggy address:
     001fff800ad5f800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     001fff800ad5f880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >001fff800ad5f900: 00 00 f1 f1 f1 f1 00 00 00 00 00 00 00 00 f3 f3
                                                                 ^
     001fff800ad5f980: f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     001fff800ad5fa00: 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b43cf5160822e4299e091a3372151da3ecc86ac
Author: Mark Pearson <markpearson@lenovo.com>
Date:   Wed Apr 7 17:20:15 2021 -0400

    platform/x86: thinkpad_acpi: Correct thermal sensor allocation
    
    commit 6759e18e5cd8745a5dfc5726e4a3db5281ec1639 upstream.
    
    On recent Thinkpad platforms it was reported that temp sensor 11 was
    always incorrectly displaying 66C. It turns out the reason for this is
    that this location in EC RAM is not a temperature sensor but is the
    power supply ID (offset 0xC2).
    
    Based on feedback from the Lenovo firmware team the EC RAM version can
    be determined and for the current version (3) only the 0x78 to 0x7F
    range is used for temp sensors. I don't have any details for earlier
    versions so I have left the implementation unaltered there.
    
    Note - in this block only 0x78 and 0x79 are officially designated (CPU &
    GPU sensors). The use of the other locations in the block will vary from
    platform to platform; but the existing logic to detect a sensor presence
    holds.
    
    Signed-off-by: Mark Pearson <markpearson@lenovo.com>
    Link: https://lore.kernel.org/r/20210407212015.298222-1-markpearson@lenovo.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 583510ee8f031df34823f5eb6eb6131feeaa89e0
Author: Chris Chiu <chris.chiu@canonical.com>
Date:   Wed Apr 21 01:46:51 2021 +0800

    USB: Add reset-resume quirk for WD19's Realtek Hub
    
    commit ca91fd8c7643d93bfc18a6fec1a0d3972a46a18a upstream.
    
    Realtek Hub (0bda:5487) in Dell Dock WD19 sometimes fails to work
    after the system resumes from suspend with remote wakeup enabled
    device connected:
    [ 1947.640907] hub 5-2.3:1.0: hub_ext_port_status failed (err = -71)
    [ 1947.641208] usb 5-2.3-port5: cannot disable (err = -71)
    [ 1947.641401] hub 5-2.3:1.0: hub_ext_port_status failed (err = -71)
    [ 1947.641450] usb 5-2.3-port4: cannot reset (err = -71)
    
    Information of this hub:
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 10 Spd=480  MxCh= 5
    D:  Ver= 2.10 Cls=09(hub  ) Sub=00 Prot=02 MxPS=64 #Cfgs=  1
    P:  Vendor=0bda ProdID=5487 Rev= 1.47
    S:  Manufacturer=Dell Inc.
    S:  Product=Dell dock
    C:* #Ifs= 1 Cfg#= 1 Atr=e0 MxPwr=  0mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=01 Driver=hub
    E:  Ad=81(I) Atr=03(Int.) MxPS=   1 Ivl=256ms
    I:* If#= 0 Alt= 1 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=02 Driver=hub
    E:  Ad=81(I) Atr=03(Int.) MxPS=   1 Ivl=256ms
    
    The failure results from the ETIMEDOUT by chance when turning on
    the suspend feature for the specified port of the hub. The port
    seems to be in an unknown state so the hub_activate during resume
    fails the hub_port_status, then the hub will fail to work.
    
    The quirky hub needs the reset-resume quirk to function correctly.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Chris Chiu <chris.chiu@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210420174651.6202-1-chris.chiu@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17b1a82e0c77db656c4b414adccf7332eb536a89
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Mon Apr 12 21:54:53 2021 +0800

    USB: Add LPM quirk for Lenovo ThinkPad USB-C Dock Gen2 Ethernet
    
    commit 8f23fe35ff1e5491b4d279323a8209a31f03ae65 upstream.
    
    This is another branded 8153 device that doesn't work well with LPM
    enabled:
    [ 400.597506] r8152 5-1.1:1.0 enx482ae3a2a6f0: Tx status -71
    
    So disable LPM to resolve the issue.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    BugLink: https://bugs.launchpad.net/bugs/1922651
    Link: https://lore.kernel.org/r/20210412135455.791971-1-kai.heng.feng@canonical.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11687415ff6ffe91d817eba92b7d26de89880701
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 7 16:45:49 2021 +0200

    ALSA: usb-audio: Add MIDI quirk for Vox ToneLab EX
    
    commit 64f40f9be14106e7df0098c427cb60be645bddb7 upstream.
    
    ToneLab EX guitar pedal device requires the same quirk like ToneLab ST
    for supporting the MIDI.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=212593
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210407144549.1530-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 356ae3b4b0afcf50c4995a5185559209463c753c
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sat Apr 17 11:13:39 2021 +0200

    iwlwifi: Fix softirq/hardirq disabling in iwl_pcie_gen2_enqueue_hcmd()
    
    commit e7020bb068d8be50a92f48e36b236a1a1ef9282e upstream.
    
    Analogically to what we did in 2800aadc18a6 ("iwlwifi: Fix softirq/hardirq
    disabling in iwl_pcie_enqueue_hcmd()"), we must apply the same fix to
    iwl_pcie_gen2_enqueue_hcmd(), as it's being called from exactly the same
    contexts.
    
    Reported-by: Heiner Kallweit <hkallweit1@gmail.com
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/nycvar.YFH.7.76.2104171112390.18270@cbobk.fhfr.pm
    Signed-off-by: Jari Ruusu <jariruusu@protonmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d542ddb88fb2f39bf7f14caa2902f3e8d06f6ba
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Apr 30 16:21:46 2021 +0200

    bpf: Fix masking negation logic upon negative dst register
    
    commit b9b34ddbe2076ade359cd5ce7537d5ed019e9807 upstream.
    
    The negation logic for the case where the off_reg is sitting in the
    dst register is not correct given then we cannot just invert the add
    to a sub or vice versa. As a fix, perform the final bitwise and-op
    unconditionally into AX from the off_reg, then move the pointer from
    the src to dst and finally use AX as the source for the original
    pointer arithmetic operation such that the inversion yields a correct
    result. The single non-AX mov in between is possible given constant
    blinding is retaining it as it's not an immediate based operation.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e449b6b707e4d122f2c0d9334de3d3ea7ab93ad7
Author: Romain Naour <romain.naour@gmail.com>
Date:   Tue Apr 20 22:12:10 2021 +0100

    mips: Do not include hi and lo in clobber list for R6
    
    commit 1d7ba0165d8206ac073f7ac3b14fc0836b66eae7 upstream
    
    >From [1]
    "GCC 10 (PR 91233) won't silently allow registers that are not
    architecturally available to be present in the clobber list anymore,
    resulting in build failure for mips*r6 targets in form of:
    ...
    .../sysdep.h:146:2: error: the register ‘lo’ cannot be clobbered in ‘asm’ for the current target
      146 |  __asm__ volatile (      \
          |  ^~~~~~~
    
    This is because base R6 ISA doesn't define hi and lo registers w/o DSP
    extension. This patch provides the alternative clobber list for r6 targets
    that won't include those registers."
    
    Since kernel 5.4 and mips support for generic vDSO [2], the kernel fail to
    build for mips r6 cpus with gcc 10 for the same reason as glibc.
    
    [1] https://sourceware.org/git/?p=glibc.git;a=commit;h=020b2a97bb15f807c0482f0faee2184ed05bcad8
    [2] '24640f233b46 ("mips: Add support for generic vDSO")'
    
    Signed-off-by: Romain Naour <romain.naour@gmail.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14ec032866019edd7880a9a4f65d8fef30520554
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Feb 26 17:02:43 2018 +0000

    MIPS: cpu-features.h: Replace __mips_isa_rev with MIPS_ISA_REV
    
    commit 18ba210a29d08ea96025cb9d19c2eebf65846330 upstream
    
    Remove the need to check that __mips_isa_rev is defined by using the
    newly added MIPS_ISA_REV.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: "Maciej W. Rozycki" <macro@mips.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/18675/
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16e24b1ac75a8b56de94aef2787c9033f36c7b03
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Feb 26 17:02:42 2018 +0000

    MIPS: Introduce isa-rev.h to define MIPS_ISA_REV
    
    commit 1690905240fd45cc04e873312df8574631c9f595 upstream
    
    There are multiple instances in the kernel where we need to include or
    exclude particular instructions based on the ISA revision of the target
    processor. For MIPS32 / MIPS64, the compiler exports a __mips_isa_rev
    define. However, when targeting MIPS I - V, this define is absent. This
    leads to each use of __mips_isa_rev having to check that it is defined
    first. To simplify this, introduce the isa-rev.h header which always
    exports MIPS_ISA_REV. The name is changed so as to avoid confusion with
    the compiler builtin and to avoid accidentally using the builtin.
    MIPS_ISA_REV is defined to the compilers builtin if provided, or 0,
    which satisfies all current usages.
    
    Suggested-by: Paul Burton <paul.burton@mips.com>
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Reviewed-by: Maciej W. Rozycki <macro@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/18676/
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8235a48ba1e7fabc6a325b1ef245247271f40c6
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Mar 2 11:26:55 2021 +0100

    iwlwifi: Fix softirq/hardirq disabling in iwl_pcie_enqueue_hcmd()
    
    commit 2800aadc18a64c96b051bcb7da8a7df7d505db3f upstream.
    
    It's possible for iwl_pcie_enqueue_hcmd() to be called with hard IRQs
    disabled (e.g. from LED core). We can't enable BHs in such a situation.
    
    Turn the unconditional BH-enable/BH-disable code into
    hardirq-disable/conditional-enable.
    
    This fixes the warning below.
    
     WARNING: CPU: 1 PID: 1139 at kernel/softirq.c:178 __local_bh_enable_ip+0xa5/0xf0
     CPU: 1 PID: 1139 Comm: NetworkManager Not tainted 5.12.0-rc1-00004-gb4ded168af79 #7
     Hardware name: LENOVO 20K5S22R00/20K5S22R00, BIOS R0IET38W (1.16 ) 05/31/2017
     RIP: 0010:__local_bh_enable_ip+0xa5/0xf0
     Code: f7 69 e8 ee 23 14 00 fb 66 0f 1f 44 00 00 65 8b 05 f0 f4 f7 69 85 c0 74 3f 48 83 c4 08 5b c3 65 8b 05 9b fe f7 69 85 c0 75 8e <0f> 0b eb 8a 48 89 3c 24 e8 4e 20 14 00 48 8b 3c 24 eb 91 e8 13 4e
     RSP: 0018:ffffafd580b13298 EFLAGS: 00010046
     RAX: 0000000000000000 RBX: 0000000000000201 RCX: 0000000000000000
     RDX: 0000000000000003 RSI: 0000000000000201 RDI: ffffffffc1272389
     RBP: ffff96517ae4c018 R08: 0000000000000001 R09: 0000000000000000
     R10: ffffafd580b13178 R11: 0000000000000001 R12: ffff96517b060000
     R13: 0000000000000000 R14: ffffffff80000000 R15: 0000000000000001
     FS:  00007fc604ebefc0(0000) GS:ffff965267480000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 000055fb3fef13b2 CR3: 0000000109112004 CR4: 00000000003706e0
     Call Trace:
      ? _raw_spin_unlock_bh+0x1f/0x30
      iwl_pcie_enqueue_hcmd+0x5d9/0xa00 [iwlwifi]
      iwl_trans_txq_send_hcmd+0x6c/0x430 [iwlwifi]
      iwl_trans_send_cmd+0x88/0x170 [iwlwifi]
      ? lock_acquire+0x277/0x3d0
      iwl_mvm_send_cmd+0x32/0x80 [iwlmvm]
      iwl_mvm_led_set+0xc2/0xe0 [iwlmvm]
      ? led_trigger_event+0x46/0x70
      led_trigger_event+0x46/0x70
      ieee80211_do_open+0x5c5/0xa20 [mac80211]
      ieee80211_open+0x67/0x90 [mac80211]
      __dev_open+0xd4/0x150
      __dev_change_flags+0x19e/0x1f0
      dev_change_flags+0x23/0x60
      do_setlink+0x30d/0x1230
      ? lock_is_held_type+0xb4/0x120
      ? __nla_validate_parse.part.7+0x57/0xcb0
      ? __lock_acquire+0x2e1/0x1a50
      __rtnl_newlink+0x560/0x910
      ? __lock_acquire+0x2e1/0x1a50
      ? __lock_acquire+0x2e1/0x1a50
      ? lock_acquire+0x277/0x3d0
      ? sock_def_readable+0x5/0x290
      ? lock_is_held_type+0xb4/0x120
      ? find_held_lock+0x2d/0x90
      ? sock_def_readable+0xb3/0x290
      ? lock_release+0x166/0x2a0
      ? lock_is_held_type+0x90/0x120
      rtnl_newlink+0x47/0x70
      rtnetlink_rcv_msg+0x25c/0x470
      ? netlink_deliver_tap+0x97/0x3e0
      ? validate_linkmsg+0x350/0x350
      netlink_rcv_skb+0x50/0x100
      netlink_unicast+0x1b2/0x280
      netlink_sendmsg+0x336/0x450
      sock_sendmsg+0x5b/0x60
      ____sys_sendmsg+0x1ed/0x250
      ? copy_msghdr_from_user+0x5c/0x90
      ___sys_sendmsg+0x88/0xd0
      ? lock_is_held_type+0xb4/0x120
      ? find_held_lock+0x2d/0x90
      ? lock_release+0x166/0x2a0
      ? __fget_files+0xfe/0x1d0
      ? __sys_sendmsg+0x5e/0xa0
      __sys_sendmsg+0x5e/0xa0
      ? lockdep_hardirqs_on_prepare+0xd9/0x170
      do_syscall_64+0x33/0x80
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7fc605c9572d
     Code: 28 89 54 24 1c 48 89 74 24 10 89 7c 24 08 e8 da ee ff ff 8b 54 24 1c 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 33 44 89 c7 48 89 44 24 08 e8 2e ef ff ff 48
     RSP: 002b:00007fffc83789f0 EFLAGS: 00000293 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 000055ef468570c0 RCX: 00007fc605c9572d
     RDX: 0000000000000000 RSI: 00007fffc8378a30 RDI: 000000000000000c
     RBP: 0000000000000010 R08: 0000000000000000 R09: 0000000000000000
     R10: 0000000000000000 R11: 0000000000000293 R12: 0000000000000000
     R13: 00007fffc8378b80 R14: 00007fffc8378b7c R15: 0000000000000000
     irq event stamp: 170785
     hardirqs last  enabled at (170783): [<ffffffff9609a8c2>] __local_bh_enable_ip+0x82/0xf0
     hardirqs last disabled at (170784): [<ffffffff96a8613d>] _raw_read_lock_irqsave+0x8d/0x90
     softirqs last  enabled at (170782): [<ffffffffc1272389>] iwl_pcie_enqueue_hcmd+0x5d9/0xa00 [iwlwifi]
     softirqs last disabled at (170785): [<ffffffffc1271ec6>] iwl_pcie_enqueue_hcmd+0x116/0xa00 [iwlwifi]
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com> # LLVM/Clang v12.0.0-rc3
    Acked-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/nycvar.YFH.7.76.2103021125430.12405@cbobk.fhfr.pm
    Signed-off-by: Jari Ruusu <jariruusu@protonmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3d07474b8d8f3124012edd5fd638f31f8e6068a
Author: Phillip Potter <phil@philpotter.co.uk>
Date:   Thu Apr 1 23:36:07 2021 +0100

    net: usb: ax88179_178a: initialize local variables before use
    
    commit bd78980be1a68d14524c51c4b4170782fada622b upstream.
    
    Use memset to initialize local array in drivers/net/usb/ax88179_178a.c, and
    also set a local u16 and u32 variable to 0. Fixes a KMSAN found uninit-value bug
    reported by syzbot at:
    https://syzkaller.appspot.com/bug?id=00371c73c72f72487c1d0bfe0cc9d00de339d5aa
    
    Reported-by: syzbot+4993e4a0e237f1b53747@syzkaller.appspotmail.com
    Signed-off-by: Phillip Potter <phil@philpotter.co.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7ef970827d7663af3fa6514e3ad33e34f06fce2
Author: Frank van der Linden <fllinden@amazon.com>
Date:   Sat May 1 18:05:06 2021 +0000

    bpf: fix up selftests after backports were fixed
    
    After the backport of the changes to fix CVE 2019-7308, the
    selftests also need to be fixed up, as was done originally
    in mainline 80c9b2fae87b ("bpf: add various test cases to selftests").
    
    4.14 commit 03f11a51a19 ("bpf: Fix selftests are changes for CVE 2019-7308")
    did that, but since there was an error in the backport, some
    selftests did not change output. So, add them now that this error
    has been fixed, and their output has actually changed as expected.
    
    This adds the rest of the changed test outputs from 80c9b2fae87b.
    
    Fixes: 03f11a51a19 ("bpf: Fix selftests are changes for CVE 2019-7308")
    Signed-off-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f987529fb5d6dbfc6222c1b131adbc17e64624
Author: Samuel Mendoza-Jonas <samjonas@amazon.com>
Date:   Sat May 1 18:05:05 2021 +0000

    bpf: Fix backport of "bpf: restrict unknown scalars of mixed signed bounds for unprivileged"
    
    The 4.14 backport of 9d7eceede ("bpf: restrict unknown scalars of mixed
    signed bounds for unprivileged") adds the PTR_TO_MAP_VALUE check to the
    wrong location in adjust_ptr_min_max_vals(), most likely because 4.14
    doesn't include the commit that updates the if-statement to a
    switch-statement (aad2eeaf4 "bpf: Simplify ptr_min_max_vals adjustment").
    
    Move the check to the proper location in adjust_ptr_min_max_vals().
    
    Fixes: 17efa65350c5a ("bpf: restrict unknown scalars of mixed signed bounds for unprivileged")
    Signed-off-by: Samuel Mendoza-Jonas <samjonas@amazon.com>
    Reviewed-by: Frank van der Linden <fllinden@amazon.com>
    Reviewed-by: Ethan Chen <yishache@amazon.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e6f537bb9c0e9838b32dff65a424463b34aece5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Apr 13 16:01:00 2021 +0200

    ACPI: x86: Call acpi_boot_table_init() after acpi_table_upgrade()
    
    commit 6998a8800d73116187aad542391ce3b2dd0f9e30 upstream.
    
    Commit 1a1c130ab757 ("ACPI: tables: x86: Reserve memory occupied by
    ACPI tables") attempted to address an issue with reserving the memory
    occupied by ACPI tables, but it broke the initrd-based table override
    mechanism relied on by multiple users.
    
    To restore the initrd-based ACPI table override functionality, move
    the acpi_boot_table_init() invocation in setup_arch() on x86 after
    the acpi_table_upgrade() one.
    
    Fixes: 1a1c130ab757 ("ACPI: tables: x86: Reserve memory occupied by ACPI tables")
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0125f3cd0f8e96d1e30a730d729b8142af271a92
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Mar 23 20:26:52 2021 +0100

    ACPI: tables: x86: Reserve memory occupied by ACPI tables
    
    commit 1a1c130ab7575498eed5bcf7220037ae09cd1f8a upstream.
    
    The following problem has been reported by George Kennedy:
    
     Since commit 7fef431be9c9 ("mm/page_alloc: place pages to tail
     in __free_pages_core()") the following use after free occurs
     intermittently when ACPI tables are accessed.
    
     BUG: KASAN: use-after-free in ibft_init+0x134/0xc49
     Read of size 4 at addr ffff8880be453004 by task swapper/0/1
     CPU: 3 PID: 1 Comm: swapper/0 Not tainted 5.12.0-rc1-7a7fd0d #1
     Call Trace:
      dump_stack+0xf6/0x158
      print_address_description.constprop.9+0x41/0x60
      kasan_report.cold.14+0x7b/0xd4
      __asan_report_load_n_noabort+0xf/0x20
      ibft_init+0x134/0xc49
      do_one_initcall+0xc4/0x3e0
      kernel_init_freeable+0x5af/0x66b
      kernel_init+0x16/0x1d0
      ret_from_fork+0x22/0x30
    
     ACPI tables mapped via kmap() do not have their mapped pages
     reserved and the pages can be "stolen" by the buddy allocator.
    
    Apparently, on the affected system, the ACPI table in question is
    not located in "reserved" memory, like ACPI NVS or ACPI Data, that
    will not be used by the buddy allocator, so the memory occupied by
    that table has to be explicitly reserved to prevent the buddy
    allocator from using it.
    
    In order to address this problem, rearrange the initialization of the
    ACPI tables on x86 to locate the initial tables earlier and reserve
    the memory occupied by them.
    
    The other architectures using ACPI should not be affected by this
    change.
    
    Link: https://lore.kernel.org/linux-acpi/1614802160-29362-1-git-send-email-george.kennedy@oracle.com/
    Reported-by: George Kennedy <george.kennedy@oracle.com>
    Tested-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b01382e8c9b2d3e0244eaab4c11cb16648a7e2f7
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Mon Mar 29 19:36:50 2021 -0600

    usbip: vudc synchronize sysfs code paths
    
    commit bd8b82042269a95db48074b8bb400678dbac1815 upstream.
    
    Fuzzing uncovered race condition between sysfs code paths in usbip
    drivers. Device connect/disconnect code paths initiated through
    sysfs interface are prone to races if disconnect happens during
    connect and vice versa.
    
    Use sysfs_lock to protect sysfs paths in vudc.
    
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: syzbot+a93fba6d384346a761e3@syzkaller.appspotmail.com
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/caabcf3fc87bdae970509b5ff32d05bb7ce2fb15.1616807117.git.skhan@linuxfoundation.org
    Signed-off-by: Tom Seewald <tseewald@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
