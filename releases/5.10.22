commit b672142f76cb904067e3ac6d04002cac3a976f46
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Mar 9 11:11:15 2021 +0100

    Linux 5.10.22
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Hulk Robot <hulkci@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210308122718.120213856@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b31a9f0c366d7bf2d6d696c99919e603639a9f0a
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sun Feb 14 17:38:30 2021 +0100

    r8169: fix resuming from suspend on RTL8105e if machine runs on battery
    
    commit d2a04370817fc7b0172dad2ef2decf907e1a304e upstream.
    
    Armin reported that after referenced commit his RTL8105e is dead when
    resuming from suspend and machine runs on battery. This patch has been
    confirmed to fix the issue.
    
    Fixes: e80bd76fbf56 ("r8169: work around power-saving bug on some chip versions")
    Reported-by: Armin Wolf <W_Armin@gmx.de>
    Tested-by: Armin Wolf <W_Armin@gmx.de>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa40f5e33ce337a037ec06cc11aae49be64c306c
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Feb 1 11:53:05 2021 +0900

    tomoyo: recognize kernel threads correctly
    
    commit 9c83465f3245c2faa82ffeb7016f40f02bfaa0ad upstream.
    
    Commit db68ce10c4f0a27c ("new helper: uaccess_kernel()") replaced
    segment_eq(get_fs(), KERNEL_DS) with uaccess_kernel(). But the correct
    method for tomoyo to check whether current is a kernel thread in order
    to assume that kernel threads are privileged for socket operations was
    (current->flags & PF_KTHREAD). Now that uaccess_kernel() became 0 on x86,
    tomoyo has to fix this problem. Do like commit 942cb357ae7d9249 ("Smack:
    Handle io_uring kernel thread privileges") does.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4645271c32b440d1e0031e979a39dad46f396401
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Tue Dec 1 12:47:25 2020 +0000

    of: unittest: Fix build on architectures without CONFIG_OF_ADDRESS
    
    commit aed5041ef9a3f594ed9dc0bb5ee7e1bbccfd3366 upstream.
    
    of_dma_get_max_cpu_address() is not defined if !CONFIG_OF_ADDRESS, so
    return early in of_unittest_dma_get_max_cpu_address().
    
    Fixes: 07d13a1d6120 ("of: unittest: Add test for of_dma_get_max_cpu_address()")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b70e6aacbe3207abfc32e923036bd2667f96aee4
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Tue Jan 26 09:09:51 2021 +0100

    Revert "arm64: dts: amlogic: add missing ethernet reset ID"
    
    commit 19f6fe976a61f9afc289b062b7ef67f99b72e7b9 upstream.
    
    It has been reported on IRC and in KernelCI boot tests, this change breaks
    internal PHY support on the Amlogic G12A/SM1 Based boards.
    
    We suspect the added signal to reset more than the Ethernet MAC but also
    the MDIO/(RG)MII mux used to redirect the MAC signals to the internal PHY.
    
    This reverts commit f3362f0c18174a1f334a419ab7d567a36bd1b3f3 while we find
    and acceptable solution to cleanly reset the Ethernet MAC.
    
    Reported-by: Corentin Labbe <clabbe@baylibre.com>
    Acked-by: Jérôme Brunet <jbrunet@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Link: https://lore.kernel.org/r/20210126080951.2383740-1-narmstrong@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7cefacccafa5d099e6ff3c9b31056f863a1f58f
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Sat Feb 27 15:39:09 2021 +0800

    iommu/vt-d: Fix status code for Allocate/Free PASID command
    
    [ Upstream commit 444d66a23c1f1e4c4d12aed4812681d0ad835d60 ]
    
    As per Intel vt-d spec, Rev 3.0 (section 10.4.45 "Virtual Command Response
    Register"), the status code of "No PASID available" error in response to
    the Allocate PASID command is 2, not 1. The same for "Invalid PASID" error
    in response to the Free PASID command.
    
    We will otherwise see confusing kernel log under the command failure from
    guest side. Fix it.
    
    Fixes: 24f27d32ab6b ("iommu/vt-d: Enlightened PASID allocation")
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20210227073909.432-1-yuzenghui@huawei.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cc0813e7bb991781e6795d6faee5b30722047d5
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 3 13:59:12 2021 +0300

    rsxx: Return -EFAULT if copy_to_user() fails
    
    [ Upstream commit 77516d25f54912a7baedeeac1b1b828b6f285152 ]
    
    The copy_to_user() function returns the number of bytes remaining but
    we want to return -EFAULT to the user if it can't complete the copy.
    The "st" variable only holds zero on success or negative error codes on
    failure so the type should be int.
    
    Fixes: 36f988e978f8 ("rsxx: Adding in debugfs entries.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e88c1b25f2bc9c1c9f5a847d9ce5338560c39445
Author: Chen Jun <chenjun102@huawei.com>
Date:   Mon Feb 22 13:58:40 2021 +0000

    ftrace: Have recordmcount use w8 to read relp->r_info in arm64_is_fake_mcount
    
    [ Upstream commit 999340d51174ce4141dd723105d4cef872b13ee9 ]
    
    On little endian system, Use aarch64_be(gcc v7.3) downloaded from
    linaro.org to build image with CONFIG_CPU_BIG_ENDIAN = y,
    CONFIG_FTRACE = y, CONFIG_DYNAMIC_FTRACE = y.
    
    gcc will create symbols of _mcount but recordmcount can not create
    mcount_loc for *.o.
    aarch64_be-linux-gnu-objdump -r fs/namei.o | grep mcount
    00000000000000d0 R_AARCH64_CALL26  _mcount
    ...
    0000000000007190 R_AARCH64_CALL26  _mcount
    
    The reason is than funciton arm64_is_fake_mcount can not work correctly.
    A symbol of _mcount in *.o compiled with big endian compiler likes:
    00 00 00 2d 00 00 01 1b
    w(rp->r_info) will return 0x2d instead of 0x011b. Because w() takes
    uint32_t as parameter, which truncates rp->r_info.
    
    Use w8() instead w() to read relp->r_info
    
    Link: https://lkml.kernel.org/r/20210222135840.56250-1-chenjun102@huawei.com
    
    Fixes: ea0eada45632 ("recordmcount: only record relocation of type R_AARCH64_CALL26 on arm64.")
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Chen Jun <chenjun102@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a14c6ea662110daa866450b5a2df867185982803
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Mar 1 18:01:46 2021 -0600

    ALSA: hda: intel-nhlt: verify config type
    
    [ Upstream commit a864e8f159b13babf552aff14a5fbe11abc017e4 ]
    
    Multiple bug reports report issues with the SOF and SST drivers when
    dealing with single microphone cases.
    
    We currently read the DMIC array information unconditionally but we
    don't check that the configuration type is actually a mic array.
    
    When the DMIC link does not rely on a mic array configuration, the
    recommendation is to check the format information to infer the maximum
    number of channels, and map this to the number of microphones.
    
    This leaves a potential for a mismatch between actual microphones
    available in hardware and what the ACPI table contains, but we have no
    other source of information.
    
    Note that single microphone configurations can alternatively be
    handled with a 'mic array' configuration along with a 'vendor-defined'
    geometry.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=201251
    BugLink: https://github.com/thesofproject/linux/issues/2725
    Fixes: 7a33ea70e1868 ('ALSA: hda: intel-nhlt: handle NHLT VENDOR_DEFINED DMIC geometry')
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20210302000146.1177770-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ef9d23bc3121be3e77ed7fbcf9d3c9ecbf7005e
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Mon Feb 22 20:23:43 2021 +0800

    IB/mlx5: Add missing error code
    
    [ Upstream commit 3a9b3d4536e0c25bd3906a28c1f584177e49dd0f ]
    
    Set err to -ENOMEM if kzalloc fails instead of 0.
    
    Fixes: 759738537142 ("IB/mlx5: Enable subscription for device events over DEVX")
    Link: https://lore.kernel.org/r/20210222122343.19720-1-yuehaibing@huawei.com
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f767104af4965608b03f51942d4661d9c0332335
Author: Julian Braha <julianbraha@gmail.com>
Date:   Fri Feb 19 18:32:26 2021 -0500

    RDMA/rxe: Fix missing kconfig dependency on CRYPTO
    
    [ Upstream commit 475f23b8c66d2892ad6acbf90ed757cafab13de7 ]
    
    When RDMA_RXE is enabled and CRYPTO is disabled, Kbuild gives the
    following warning:
    
     WARNING: unmet direct dependencies detected for CRYPTO_CRC32
       Depends on [n]: CRYPTO [=n]
       Selected by [y]:
       - RDMA_RXE [=y] && (INFINIBAND_USER_ACCESS [=y] || !INFINIBAND_USER_ACCESS [=y]) && INET [=y] && PCI [=y] && INFINIBAND [=y] && INFINIBAND_VIRT_DMA [=y]
    
    This is because RDMA_RXE selects CRYPTO_CRC32, without depending on or
    selecting CRYPTO, despite that config option being subordinate to CRYPTO.
    
    Fixes: cee2688e3cd6 ("IB/rxe: Offload CRC calculation when possible")
    Signed-off-by: Julian Braha <julianbraha@gmail.com>
    Link: https://lore.kernel.org/r/21525878.NYvzQUHefP@ubuntu-mate-laptop
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8850a814d42d2fb2b6414469fd2e3effcf9bafe9
Author: Saeed Mahameed <saeedm@nvidia.com>
Date:   Mon Mar 1 10:18:44 2021 +0200

    RDMA/cm: Fix IRQ restore in ib_send_cm_sidr_rep
    
    [ Upstream commit 221384df6123747d2a75517dd06cc01752f81518 ]
    
    ib_send_cm_sidr_rep() {
            spin_lock_irqsave()
            cm_send_sidr_rep_locked() {
                    ...
                    spin_lock_irq()
                    ....
                    spin_unlock_irq() <--- this will enable interrupts
            }
            spin_unlock_irqrestore()
    }
    
    spin_unlock_irqrestore() expects interrupts to be disabled but the
    internal spin_unlock_irq() will always enable hard interrupts.
    
    Fix this by replacing the internal spin_{lock,unlock}_irq() with
    irqsave/restore variants.
    
    It fixes the following kernel trace:
    
     raw_local_irq_restore() called with IRQs enabled
     WARNING: CPU: 2 PID: 20001 at kernel/locking/irqflag-debug.c:10 warn_bogus_irq_restore+0x1d/0x20
    
     Call Trace:
      _raw_spin_unlock_irqrestore+0x4e/0x50
      ib_send_cm_sidr_rep+0x3a/0x50 [ib_cm]
      cma_send_sidr_rep+0xa1/0x160 [rdma_cm]
      rdma_accept+0x25e/0x350 [rdma_cm]
      ucma_accept+0x132/0x1cc [rdma_ucm]
      ucma_write+0xbf/0x140 [rdma_ucm]
      vfs_write+0xc1/0x340
      ksys_write+0xb3/0xe0
      do_syscall_64+0x2d/0x40
      entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fixes: 87c4c774cbef ("RDMA/cm: Protect access to remote_sidr_table")
    Link: https://lore.kernel.org/r/20210301081844.445823-1-leon@kernel.org
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 253b7a11ce26d30f375fb8b7d51e988bc2dc9cd0
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sat Feb 27 00:15:27 2021 +0000

    ALSA: ctxfi: cthw20k2: fix mask on conf to allow 4 bits
    
    [ Upstream commit 26a9630c72ebac7c564db305a6aee54a8edde70e ]
    
    Currently the mask operation on variable conf is just 3 bits so
    the switch statement case value of 8 is unreachable dead code.
    The function daio_mgr_dao_init can be passed a 4 bit value,
    function dao_rsc_init calls it with conf set to:
    
         conf = (desc->msr & 0x7) | (desc->passthru << 3);
    
    so clearly when desc->passthru is set to 1 then conf can be
    at least 8.
    
    Fix this by changing the mask to 0xf.
    
    Fixes: 8cc72361481f ("ALSA: SB X-Fi driver merge")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210227001527.1077484-1-colin.king@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d7ed9a49b0ce079af2255b0c49b0d4b5a5ceff0
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 3 15:33:19 2021 +0800

    mm: Remove examples from enum zone_type comment
    
    commit 04435217f96869ac3a8f055ff68c5237a60bcd7e upstream
    
    We can't really list every setup in common code. On top of that they are
    unlikely to stay true for long as things change in the arch trees
    independently of this comment.
    
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20201119175400.9995-8-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eaef922e9381af7b923c4e3c57a632a87101acb
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Mar 3 15:33:18 2021 +0800

    arm64: mm: Set ZONE_DMA size based on early IORT scan
    
    commit 2b8652936f0ca9ca2e6c984ae76c7bfcda1b3f22 upstream
    
    We recently introduced a 1 GB sized ZONE_DMA to cater for platforms
    incorporating masters that can address less than 32 bits of DMA, in
    particular the Raspberry Pi 4, which has 4 or 8 GB of DRAM, but has
    peripherals that can only address up to 1 GB (and its PCIe host
    bridge can only access the bottom 3 GB)
    
    Instructing the DMA layer about these limitations is straight-forward,
    even though we had to fix some issues regarding memory limits set in
    the IORT for named components, and regarding the handling of ACPI _DMA
    methods. However, the DMA layer also needs to be able to allocate
    memory that is guaranteed to meet those DMA constraints, for bounce
    buffering as well as allocating the backing for consistent mappings.
    
    This is why the 1 GB ZONE_DMA was introduced recently. Unfortunately,
    it turns out the having a 1 GB ZONE_DMA as well as a ZONE_DMA32 causes
    problems with kdump, and potentially in other places where allocations
    cannot cross zone boundaries. Therefore, we should avoid having two
    separate DMA zones when possible.
    
    So let's do an early scan of the IORT, and only create the ZONE_DMA
    if we encounter any devices that need it. This puts the burden on
    the firmware to describe such limitations in the IORT, which may be
    redundant (and less precise) if _DMA methods are also being provided.
    However, it should be noted that this situation is highly unusual for
    arm64 ACPI machines. Also, the DMA subsystem still gives precedence to
    the _DMA method if implemented, and so we will not lose the ability to
    perform streaming DMA outside the ZONE_DMA if the _DMA method permits
    it.
    
    [nsaenz: unified implementation with DT's counterpart]
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Tested-by: Jeremy Linton <jeremy.linton@arm.com>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Hanjun Guo <guohanjun@huawei.com>
    Cc: Jeremy Linton <jeremy.linton@arm.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Hanjun Guo <guohanjun@huawei.com>
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Link: https://lore.kernel.org/r/20201119175400.9995-7-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35ec3d09ff6a49ee90e1bfd09166596f017eb5bb
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 3 15:33:17 2021 +0800

    arm64: mm: Set ZONE_DMA size based on devicetree's dma-ranges
    
    commit 8424ecdde7df99d5426e1a1fd9f0fb36f4183032 upstream
    
    We recently introduced a 1 GB sized ZONE_DMA to cater for platforms
    incorporating masters that can address less than 32 bits of DMA, in
    particular the Raspberry Pi 4, which has 4 or 8 GB of DRAM, but has
    peripherals that can only address up to 1 GB (and its PCIe host
    bridge can only access the bottom 3 GB)
    
    The DMA layer also needs to be able to allocate memory that is
    guaranteed to meet those DMA constraints, for bounce buffering as well
    as allocating the backing for consistent mappings. This is why the 1 GB
    ZONE_DMA was introduced recently. Unfortunately, it turns out the having
    a 1 GB ZONE_DMA as well as a ZONE_DMA32 causes problems with kdump, and
    potentially in other places where allocations cannot cross zone
    boundaries. Therefore, we should avoid having two separate DMA zones
    when possible.
    
    So, with the help of of_dma_get_max_cpu_address() get the topmost
    physical address accessible to all DMA masters in system and use that
    information to fine-tune ZONE_DMA's size. In the absence of addressing
    limited masters ZONE_DMA will span the whole 32-bit address space,
    otherwise, in the case of the Raspberry Pi 4 it'll only span the 30-bit
    address space, and have ZONE_DMA32 cover the rest of the 32-bit address
    space.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20201119175400.9995-6-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9861e7fa4f81f613d20c9ab4285fbb43a7d2603
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 3 15:33:16 2021 +0800

    of: unittest: Add test for of_dma_get_max_cpu_address()
    
    commit 07d13a1d6120d453c3c1f020578693d072deded5 upstream
    
    Introduce a test for of_dma_get_max_cup_address(), it uses the same DT
    data as the rest of dma-ranges unit tests.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20201119175400.9995-5-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18bf6e998d08b943172aba8969b5f9b2122d17ae
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 3 15:33:15 2021 +0800

    of/address: Introduce of_dma_get_max_cpu_address()
    
    commit 964db79d6c186cc2ecc6ae46f98eed7e0ea8cf71 upstream
    
    Introduce of_dma_get_max_cpu_address(), which provides the highest CPU
    physical address addressable by all DMA masters in the system. It's
    specially useful for setting memory zones sizes at early boot time.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20201119175400.9995-4-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fbe62ffbb548cb1c857cffe936ef0b2771df578
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 3 15:33:14 2021 +0800

    arm64: mm: Move zone_dma_bits initialization into zone_sizes_init()
    
    commit 9804f8c69b04a39d0ba41d19e6bdc6aa91c19725 upstream
    
    zone_dma_bits's initialization happens earlier that it's actually
    needed, in arm64_memblock_init(). So move it into the more suitable
    zone_sizes_init().
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Tested-by: Jeremy Linton <jeremy.linton@arm.com>
    Link: https://lore.kernel.org/r/20201119175400.9995-3-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 407b173adfacea0dfd2474ff349d81abc6538173
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Mar 3 15:33:13 2021 +0800

    arm64: mm: Move reserve_crashkernel() into mem_init()
    
    commit 0a30c53573b07d5561457e41fb0ab046cd857da5 upstream
    
    crashkernel might reserve memory located in ZONE_DMA. We plan to delay
    ZONE_DMA's initialization after unflattening the devicetree and ACPI's
    boot table initialization, so move it later in the boot process.
    Specifically into bootmem_init() since request_standard_resources()
    depends on it.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Tested-by: Jeremy Linton <jeremy.linton@arm.com>
    Link: https://lore.kernel.org/r/20201119175400.9995-2-nsaenzjulienne@suse.de
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85433307d8a18e9a20ec4d12f0f5c9f20a8f4e17
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Jan 13 10:11:35 2021 +0100

    crypto - shash: reduce minimum alignment of shash_desc structure
    
    commit 660d2062190db131d2feaf19914e90f868fe285c upstream.
    
    Unlike many other structure types defined in the crypto API, the
    'shash_desc' structure is permitted to live on the stack, which
    implies its contents may not be accessed by DMA masters. (This is
    due to the fact that the stack may be located in the vmalloc area,
    which requires a different virtual-to-physical translation than the
    one implemented by the DMA subsystem)
    
    Our definition of CRYPTO_MINALIGN_ATTR is based on ARCH_KMALLOC_MINALIGN,
    which may take DMA constraints into account on architectures that support
    non-cache coherent DMA such as ARM and arm64. In this case, the value is
    chosen to reflect the largest cacheline size in the system, in order to
    ensure that explicit cache maintenance as required by non-coherent DMA
    masters does not affect adjacent, unrelated slab allocations. On arm64,
    this value is currently set at 128 bytes.
    
    This means that applying CRYPTO_MINALIGN_ATTR to struct shash_desc is both
    unnecessary (as it is never used for DMA), and undesirable, given that it
    wastes stack space (on arm64, performing the alignment costs 112 bytes in
    the worst case, and the hole between the 'tfm' and '__ctx' members takes
    up another 120 bytes, resulting in an increased stack footprint of up to
    232 bytes.) So instead, let's switch to the minimum SLAB alignment, which
    does not take DMA constraints into account.
    
    Note that this is a no-op for x86.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3868a277e6fcd36eeb175ee43773f24388417fa1
Author: Kevin Wang <kevin1.wang@amd.com>
Date:   Tue Mar 2 15:54:00 2021 +0800

    drm/amdgpu: fix parameter error of RREG32_PCIE() in amdgpu_regs_pcie
    
    commit 1aa46901ee51c1c5779b3b239ea0374a50c6d9ff upstream.
    
    the register offset isn't needed division by 4 to pass RREG32_PCIE()
    
    Signed-off-by: Kevin Wang <kevin1.wang@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2fee74ea801ad847589fac0d9ca3ba905579d95
Author: Asher.Song <Asher.Song@amd.com>
Date:   Wed Feb 24 18:41:34 2021 +0800

    drm/amdgpu:disable VCN for Navi12 SKU
    
    commit 0c61ac8134ffc851681ce5d4bd60d97c3d5aed27 upstream.
    
    Navi12 0x7360/C7 SKU has no video support, so remove it.
    
    Reviewed-by: Guchun Chen <guchun.chen@amd.com>
    Signed-off-by: Asher.Song <Asher.Song@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce1cca17381f9395c2b27d24fcfe553efa0bf466
Author: Milan Broz <gmazyland@gmail.com>
Date:   Tue Feb 23 21:21:21 2021 +0100

    dm verity: fix FEC for RS roots unaligned to block size
    
    commit df7b59ba9245c4a3115ebaa905e3e5719a3810da upstream.
    
    Optional Forward Error Correction (FEC) code in dm-verity uses
    Reed-Solomon code and should support roots from 2 to 24.
    
    The error correction parity bytes (of roots lengths per RS block) are
    stored on a separate device in sequence without any padding.
    
    Currently, to access FEC device, the dm-verity-fec code uses dm-bufio
    client with block size set to verity data block (usually 4096 or 512
    bytes).
    
    Because this block size is not divisible by some (most!) of the roots
    supported lengths, data repair cannot work for partially stored parity
    bytes.
    
    This fix changes FEC device dm-bufio block size to "roots << SECTOR_SHIFT"
    where we can be sure that the full parity data is always available.
    (There cannot be partial FEC blocks because parity must cover whole
    sectors.)
    
    Because the optional FEC starting offset could be unaligned to this
    new block size, we have to use dm_bufio_set_sector_offset() to
    configure it.
    
    The problem is easily reproduced using veritysetup, e.g. for roots=13:
    
      # create verity device with RS FEC
      dd if=/dev/urandom of=data.img bs=4096 count=8 status=none
      veritysetup format data.img hash.img --fec-device=fec.img --fec-roots=13 | awk '/^Root hash/{ print $3 }' >roothash
    
      # create an erasure that should be always repairable with this roots setting
      dd if=/dev/zero of=data.img conv=notrunc bs=1 count=8 seek=4088 status=none
    
      # try to read it through dm-verity
      veritysetup open data.img test hash.img --fec-device=fec.img --fec-roots=13 $(cat roothash)
      dd if=/dev/mapper/test of=/dev/null bs=4096 status=noxfer
      # wait for possible recursive recovery in kernel
      udevadm settle
      veritysetup close test
    
    With this fix, errors are properly repaired.
      device-mapper: verity-fec: 7:1: FEC 0: corrected 8 errors
      ...
    
    Without it, FEC code usually ends on unrecoverable failure in RS decoder:
      device-mapper: verity-fec: 7:1: FEC 0: failed to correct: -74
      ...
    
    This problem is present in all kernels since the FEC code's
    introduction (kernel 4.5).
    
    It is thought that this problem is not visible in Android ecosystem
    because it always uses a default RS roots=2.
    
    Depends-on: a14e5ec66a7a ("dm bufio: subtract the number of initial sectors in dm_bufio_get_device_size")
    Signed-off-by: Milan Broz <gmazyland@gmail.com>
    Tested-by: Jérôme Carretero <cJ-ko@zougloub.eu>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Cc: stable@vger.kernel.org # 4.5+
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bda53f46387bc2b40a80befb1a5648dd9840e9c
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Feb 23 21:21:20 2021 +0100

    dm bufio: subtract the number of initial sectors in dm_bufio_get_device_size
    
    commit a14e5ec66a7a66e57b24e2469f9212a78460207e upstream.
    
    dm_bufio_get_device_size returns the device size in blocks. Before
    returning the value, we must subtract the nubmer of starting
    sectors. The number of starting sectors may not be divisible by block
    size.
    
    Note that currently, no target is using dm_bufio_set_sector_offset and
    dm_bufio_get_device_size simultaneously, so this change has no effect.
    However, an upcoming dm-verity-fec fix needs this change.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Reviewed-by: Milan Broz <gmazyland@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2501d87663b84c288188d63da4632018b627829
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Feb 28 16:07:30 2021 -0700

    io_uring: ignore double poll add on the same waitqueue head
    
    commit 1c3b3e6527e57156bf4082f11c2151957560fe6a upstream.
    
    syzbot reports a deadlock, attempting to lock the same spinlock twice:
    
    ============================================
    WARNING: possible recursive locking detected
    5.11.0-syzkaller #0 Not tainted
    --------------------------------------------
    swapper/1/0 is trying to acquire lock:
    ffff88801b2b1130 (&runtime->sleep){..-.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
    ffff88801b2b1130 (&runtime->sleep){..-.}-{2:2}, at: io_poll_double_wake+0x25f/0x6a0 fs/io_uring.c:4960
    
    but task is already holding lock:
    ffff88801b2b3130 (&runtime->sleep){..-.}-{2:2}, at: __wake_up_common_lock+0xb4/0x130 kernel/sched/wait.c:137
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&runtime->sleep);
      lock(&runtime->sleep);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    2 locks held by swapper/1/0:
     #0: ffff888147474908 (&group->lock){..-.}-{2:2}, at: _snd_pcm_stream_lock_irqsave+0x9f/0xd0 sound/core/pcm_native.c:170
     #1: ffff88801b2b3130 (&runtime->sleep){..-.}-{2:2}, at: __wake_up_common_lock+0xb4/0x130 kernel/sched/wait.c:137
    
    stack backtrace:
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.11.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0xfa/0x151 lib/dump_stack.c:120
     print_deadlock_bug kernel/locking/lockdep.c:2829 [inline]
     check_deadlock kernel/locking/lockdep.c:2872 [inline]
     validate_chain kernel/locking/lockdep.c:3661 [inline]
     __lock_acquire.cold+0x14c/0x3b4 kernel/locking/lockdep.c:4900
     lock_acquire kernel/locking/lockdep.c:5510 [inline]
     lock_acquire+0x1ab/0x730 kernel/locking/lockdep.c:5475
     __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
     _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
     spin_lock include/linux/spinlock.h:354 [inline]
     io_poll_double_wake+0x25f/0x6a0 fs/io_uring.c:4960
     __wake_up_common+0x147/0x650 kernel/sched/wait.c:108
     __wake_up_common_lock+0xd0/0x130 kernel/sched/wait.c:138
     snd_pcm_update_state+0x46a/0x540 sound/core/pcm_lib.c:203
     snd_pcm_update_hw_ptr0+0xa75/0x1a50 sound/core/pcm_lib.c:464
     snd_pcm_period_elapsed+0x160/0x250 sound/core/pcm_lib.c:1805
     dummy_hrtimer_callback+0x94/0x1b0 sound/drivers/dummy.c:378
     __run_hrtimer kernel/time/hrtimer.c:1519 [inline]
     __hrtimer_run_queues+0x609/0xe40 kernel/time/hrtimer.c:1583
     hrtimer_run_softirq+0x17b/0x360 kernel/time/hrtimer.c:1600
     __do_softirq+0x29b/0x9f6 kernel/softirq.c:345
     invoke_softirq kernel/softirq.c:221 [inline]
     __irq_exit_rcu kernel/softirq.c:422 [inline]
     irq_exit_rcu+0x134/0x200 kernel/softirq.c:434
     sysvec_apic_timer_interrupt+0x93/0xc0 arch/x86/kernel/apic/apic.c:1100
     </IRQ>
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:632
    RIP: 0010:native_save_fl arch/x86/include/asm/irqflags.h:29 [inline]
    RIP: 0010:arch_local_save_flags arch/x86/include/asm/irqflags.h:70 [inline]
    RIP: 0010:arch_irqs_disabled arch/x86/include/asm/irqflags.h:137 [inline]
    RIP: 0010:acpi_safe_halt drivers/acpi/processor_idle.c:111 [inline]
    RIP: 0010:acpi_idle_do_entry+0x1c9/0x250 drivers/acpi/processor_idle.c:516
    Code: dd 38 6e f8 84 db 75 ac e8 54 32 6e f8 e8 0f 1c 74 f8 e9 0c 00 00 00 e8 45 32 6e f8 0f 00 2d 4e 4a c5 00 e8 39 32 6e f8 fb f4 <9c> 5b 81 e3 00 02 00 00 fa 31 ff 48 89 de e8 14 3a 6e f8 48 85 db
    RSP: 0018:ffffc90000d47d18 EFLAGS: 00000293
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff8880115c3780 RSI: ffffffff89052537 RDI: 0000000000000000
    RBP: ffff888141127064 R08: 0000000000000001 R09: 0000000000000001
    R10: ffffffff81794168 R11: 0000000000000000 R12: 0000000000000001
    R13: ffff888141127000 R14: ffff888141127064 R15: ffff888143331804
     acpi_idle_enter+0x361/0x500 drivers/acpi/processor_idle.c:647
     cpuidle_enter_state+0x1b1/0xc80 drivers/cpuidle/cpuidle.c:237
     cpuidle_enter+0x4a/0xa0 drivers/cpuidle/cpuidle.c:351
     call_cpuidle kernel/sched/idle.c:158 [inline]
     cpuidle_idle_call kernel/sched/idle.c:239 [inline]
     do_idle+0x3e1/0x590 kernel/sched/idle.c:300
     cpu_startup_entry+0x14/0x20 kernel/sched/idle.c:397
     start_secondary+0x274/0x350 arch/x86/kernel/smpboot.c:272
     secondary_startup_64_no_verify+0xb0/0xbb
    
    which is due to the driver doing poll_wait() twice on the same
    wait_queue_head. That is perfectly valid, but from checking the rest
    of the kernel tree, it's the only driver that does this.
    
    We can handle this just fine, we just need to ignore the second addition
    as we'll get woken just fine on the first one.
    
    Cc: stable@vger.kernel.org # 5.8+
    Fixes: 18bceab101ad ("io_uring: allow POLL_ADD with double poll_wait() users")
    Reported-by: syzbot+28abd693db9e92c160d8@syzkaller.appspotmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3301afbfef697077a647381c26cdaf9d90458965
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Mar 3 18:03:52 2021 -0500

    ring-buffer: Force before_stamp and write_stamp to be different on discard
    
    commit 6f6be606e763f2da9fc21de00538c97fe4ca1492 upstream.
    
    Part of the logic of the new time stamp code depends on the before_stamp and
    the write_stamp to be different if the write_stamp does not match the last
    event on the buffer, as it will be used to calculate the delta of the next
    event written on the buffer.
    
    The discard logic depends on this, as the next event to come in needs to
    inject a full timestamp as it can not rely on the last event timestamp in
    the buffer because it is unknown due to events after it being discarded. But
    by changing the write_stamp back to the time before it, it forces the next
    event to use a full time stamp, instead of relying on it.
    
    The issue came when a full time stamp was used for the event, and
    rb_time_delta() returns zero in that case. The update to the write_stamp
    (which subtracts delta) made it not change. Then when the event is removed
    from the buffer, because the before_stamp and write_stamp still match, the
    next event written would calculate its delta from the write_stamp, but that
    would be wrong as the write_stamp is of the time of the event that was
    discarded.
    
    In the case that the delta change being made to write_stamp is zero, set the
    before_stamp to zero as well, and this will force the next event to inject a
    full timestamp and not use the current write_stamp.
    
    Cc: stable@vger.kernel.org
    Fixes: a389d86f7fd09 ("ring-buffer: Have nested events still record running time stamp")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6e5800bdf7041803de7aaee73534b0885dbc018
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Feb 25 19:23:27 2021 +0100

    PM: runtime: Update device status before letting suppliers suspend
    
    commit 44cc89f764646b2f1f2ea5d1a08b230131707851 upstream.
    
    Because the PM-runtime status of the device is not updated in
    __rpm_callback(), attempts to suspend the suppliers of the given
    device triggered by rpm_put_suppliers() called by it may fail.
    
    Fix this by making __rpm_callback() update the device's status to
    RPM_SUSPENDED before calling rpm_put_suppliers() if the current
    status of the device is RPM_SUSPENDING and the callback just invoked
    by it has returned 0 (success).
    
    While at it, modify the code in __rpm_callback() to always check
    the device's PM-runtime status under its PM lock.
    
    Link: https://lore.kernel.org/linux-pm/CAPDyKFqm06KDw_p8WXsM4dijDbho4bb6T4k50UqqvR1_COsp8g@mail.gmail.com/
    Fixes: 21d5c57b3726 ("PM / runtime: Use device links")
    Reported-by: Elaine Zhang <zhangqing@rock-chips.com>
    Diagnosed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Elaine Zhang <zhangiqng@rock-chips.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae971992e9fe5603d8934843097963e499353c6d
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Feb 26 17:51:44 2021 +0000

    btrfs: fix warning when creating a directory with smack enabled
    
    commit fd57a98d6f0c98fa295813087f13afb26c224e73 upstream.
    
    When we have smack enabled, during the creation of a directory smack may
    attempt to add a "smack transmute" xattr on the inode, which results in
    the following warning and trace:
    
      WARNING: CPU: 3 PID: 2548 at fs/btrfs/transaction.c:537 start_transaction+0x489/0x4f0
      Modules linked in: nft_objref nf_conntrack_netbios_ns (...)
      CPU: 3 PID: 2548 Comm: mkdir Not tainted 5.9.0-rc2smack+ #81
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      RIP: 0010:start_transaction+0x489/0x4f0
      Code: e9 be fc ff ff (...)
      RSP: 0018:ffffc90001887d10 EFLAGS: 00010202
      RAX: ffff88816f1e0000 RBX: 0000000000000201 RCX: 0000000000000003
      RDX: 0000000000000201 RSI: 0000000000000002 RDI: ffff888177849000
      RBP: ffff888177849000 R08: 0000000000000001 R09: 0000000000000004
      R10: ffffffff825e8f7a R11: 0000000000000003 R12: ffffffffffffffe2
      R13: 0000000000000000 R14: ffff88803d884270 R15: ffff8881680d8000
      FS:  00007f67317b8440(0000) GS:ffff88817bcc0000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f67247a22a8 CR3: 000000004bfbc002 CR4: 0000000000370ee0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       ? slab_free_freelist_hook+0xea/0x1b0
       ? trace_hardirqs_on+0x1c/0xe0
       btrfs_setxattr_trans+0x3c/0xf0
       __vfs_setxattr+0x63/0x80
       smack_d_instantiate+0x2d3/0x360
       security_d_instantiate+0x29/0x40
       d_instantiate_new+0x38/0x90
       btrfs_mkdir+0x1cf/0x1e0
       vfs_mkdir+0x14f/0x200
       do_mkdirat+0x6d/0x110
       do_syscall_64+0x2d/0x40
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f673196ae6b
      Code: 8b 05 11 (...)
      RSP: 002b:00007ffc3c679b18 EFLAGS: 00000246 ORIG_RAX: 0000000000000053
      RAX: ffffffffffffffda RBX: 00000000000001ff RCX: 00007f673196ae6b
      RDX: 0000000000000000 RSI: 00000000000001ff RDI: 00007ffc3c67a30d
      RBP: 00007ffc3c67a30d R08: 00000000000001ff R09: 0000000000000000
      R10: 000055d3e39fe930 R11: 0000000000000246 R12: 0000000000000000
      R13: 00007ffc3c679cd8 R14: 00007ffc3c67a30d R15: 00007ffc3c679ce0
      irq event stamp: 11029
      hardirqs last  enabled at (11037): [<ffffffff81153fe6>] console_unlock+0x486/0x670
      hardirqs last disabled at (11044): [<ffffffff81153c01>] console_unlock+0xa1/0x670
      softirqs last  enabled at (8864): [<ffffffff81e0102f>] asm_call_on_stack+0xf/0x20
      softirqs last disabled at (8851): [<ffffffff81e0102f>] asm_call_on_stack+0xf/0x20
    
    This happens because at btrfs_mkdir() we call d_instantiate_new() while
    holding a transaction handle, which results in the following call chain:
    
      btrfs_mkdir()
         trans = btrfs_start_transaction(root, 5);
    
         d_instantiate_new()
            smack_d_instantiate()
                __vfs_setxattr()
                    btrfs_setxattr_trans()
                       btrfs_start_transaction()
                          start_transaction()
                             WARN_ON()
                               --> a tansaction start has TRANS_EXTWRITERS
                                   set in its type
                             h->orig_rsv = h->block_rsv
                             h->block_rsv = NULL
    
         btrfs_end_transaction(trans)
    
    Besides the warning triggered at start_transaction, we set the handle's
    block_rsv to NULL which may cause some surprises later on.
    
    So fix this by making btrfs_setxattr_trans() not start a transaction when
    we already have a handle on one, stored in current->journal_info, and use
    that handle. We are good to use the handle because at btrfs_mkdir() we did
    reserve space for the xattr and the inode item.
    
    Reported-by: Casey Schaufler <casey@schaufler-ca.com>
    CC: stable@vger.kernel.org # 5.4+
    Acked-by: Casey Schaufler <casey@schaufler-ca.com>
    Tested-by: Casey Schaufler <casey@schaufler-ca.com>
    Link: https://lore.kernel.org/linux-btrfs/434d856f-bd7b-4889-a6ec-e81aaebfa735@schaufler-ca.com/
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6ba61aaff88ec5b8b2b8035431f75071d8b1690
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Tue Feb 23 15:20:42 2021 +0200

    btrfs: unlock extents in btrfs_zero_range in case of quota reservation errors
    
    commit 4f6a49de64fd1b1dba5229c02047376da7cf24fd upstream.
    
    If btrfs_qgroup_reserve_data returns an error (i.e quota limit reached)
    the handling logic directly goes to the 'out' label without first
    unlocking the extent range between lockstart, lockend. This results in
    deadlocks as other processes try to lock the same extent.
    
    Fixes: a7f8b1c2ac21 ("btrfs: file: reserve qgroup space after the hole punch range is locked")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37ffce966821eb5098bda58eef91786cc99c602c
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Mon Feb 22 18:40:42 2021 +0200

    btrfs: free correct amount of space in btrfs_delayed_inode_reserve_metadata
    
    commit 0f9c03d824f6f522d3bc43629635c9765546ebc5 upstream.
    
    Following commit f218ea6c4792 ("btrfs: delayed-inode: Remove wrong
    qgroup meta reservation calls") this function now reserves num_bytes,
    rather than the fixed amount of nodesize. As such this requires the
    same amount to be freed in case of failure. Fix this by adjusting
    the amount we are freeing.
    
    Fixes: f218ea6c4792 ("btrfs: delayed-inode: Remove wrong qgroup meta reservation calls")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a64ad80223f2173df2737a49148d2566b808f484
Author: Dan Carpenter <dancarpenter@oracle.com>
Date:   Wed Feb 17 09:04:34 2021 +0300

    btrfs: validate qgroup inherit for SNAP_CREATE_V2 ioctl
    
    commit 5011c5a663b9c6d6aff3d394f11049b371199627 upstream.
    
    The problem is we're copying "inherit" from user space but we don't
    necessarily know that we're copying enough data for a 64 byte
    struct.  Then the next problem is that 'inherit' has a variable size
    array at the end, and we have to verify that array is the size we
    expected.
    
    Fixes: 6f72c7e20dba ("Btrfs: add qgroup inheritance")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e82407d24968531d636fc5d544715c86675f62e6
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Mon Feb 8 10:26:54 2021 +0200

    btrfs: fix race between extent freeing/allocation when using bitmaps
    
    commit 3c17916510428dbccdf657de050c34e208347089 upstream.
    
    During allocation the allocator will try to allocate an extent using
    cluster policy. Once the current cluster is exhausted it will remove the
    entry under btrfs_free_cluster::lock and subsequently acquire
    btrfs_free_space_ctl::tree_lock to dispose of the already-deleted entry
    and adjust btrfs_free_space_ctl::total_bitmap. This poses a problem
    because there exists a race condition between removing the entry under
    one lock and doing the necessary accounting holding a different lock
    since extent freeing only uses the 2nd lock. This can result in the
    following situation:
    
    T1:                                    T2:
    btrfs_alloc_from_cluster               insert_into_bitmap <holds tree_lock>
     if (entry->bytes == 0)                   if (block_group && !list_empty(&block_group->cluster_list)) {
        rb_erase(entry)
    
     spin_unlock(&cluster->lock);
       (total_bitmaps is still 4)           spin_lock(&cluster->lock);
                                             <doesn't find entry in cluster->root>
     spin_lock(&ctl->tree_lock);             <goes to new_bitmap label, adds
    <blocked since T2 holds tree_lock>       <a new entry and calls add_new_bitmap>
                                                recalculate_thresholds  <crashes,
                                                  due to total_bitmaps
                                                  becoming 5 and triggering
                                                  an ASSERT>
    
    To fix this ensure that once depleted, the cluster entry is deleted when
    both cluster lock and tree locks are held in the allocator (T1), this
    ensures that even if there is a race with a concurrent
    insert_into_bitmap call it will correctly find the entry in the cluster
    and add the new space to it.
    
    CC: <stable@vger.kernel.org> # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1559d94fece25604808eae82af03d2c2c354317a
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Feb 16 11:09:25 2021 +0000

    btrfs: fix stale data exposure after cloning a hole with NO_HOLES enabled
    
    commit 3660d0bcdb82807d434da9d2e57d88b37331182d upstream.
    
    When using the NO_HOLES feature, if we clone a file range that spans only
    a hole into a range that is at or beyond the current i_size of the
    destination file, we end up not setting the full sync runtime flag on the
    inode. As a result, if we then fsync the destination file and have a power
    failure, after log replay we can end up exposing stale data instead of
    having a hole for that range.
    
    The conditions for this to happen are the following:
    
    1) We have a file with a size of, for example, 1280K;
    
    2) There is a written (non-prealloc) extent for the file range from 1024K
       to 1280K with a length of 256K;
    
    3) This particular file extent layout is durably persisted, so that the
       existing superblock persisted on disk points to a subvolume root where
       the file has that exact file extent layout and state;
    
    4) The file is truncated to a smaller size, to an offset lower than the
       start offset of its last extent, for example to 800K. The truncate sets
       the full sync runtime flag on the inode;
    
    6) Fsync the file to log it and clear the full sync runtime flag;
    
    7) Clone a region that covers only a hole (implicit hole due to NO_HOLES)
       into the file with a destination offset that starts at or beyond the
       256K file extent item we had - for example to offset 1024K;
    
    8) Since the clone operation does not find extents in the source range,
       we end up in the if branch at the bottom of btrfs_clone() where we
       punch a hole for the file range starting at offset 1024K by calling
       btrfs_replace_file_extents(). There we end up not setting the full
       sync flag on the inode, because we don't know we are being called in
       a clone context (and not fallocate's punch hole operation), and
       neither do we create an extent map to represent a hole because the
       requested range is beyond eof;
    
    9) A further fsync to the file will be a fast fsync, since the clone
       operation did not set the full sync flag, and therefore it relies on
       modified extent maps to correctly log the file layout. But since
       it does not find any extent map marking the range from 1024K (the
       previous eof) to the new eof, it does not log a file extent item
       for that range representing the hole;
    
    10) After a power failure no hole for the range starting at 1024K is
       punched and we end up exposing stale data from the old 256K extent.
    
    Turning this into exact steps:
    
      $ mkfs.btrfs -f -O no-holes /dev/sdi
      $ mount /dev/sdi /mnt
    
      # Create our test file with 3 extents of 256K and a 256K hole at offset
      # 256K. The file has a size of 1280K.
      $ xfs_io -f -s \
                  -c "pwrite -S 0xab -b 256K 0 256K" \
                  -c "pwrite -S 0xcd -b 256K 512K 256K" \
                  -c "pwrite -S 0xef -b 256K 768K 256K" \
                  -c "pwrite -S 0x73 -b 256K 1024K 256K" \
                  /mnt/sdi/foobar
    
      # Make sure it's durably persisted. We want the last committed super
      # block to point to this particular file extent layout.
      sync
    
      # Now truncate our file to a smaller size, falling within a position of
      # the second extent. This sets the full sync runtime flag on the inode.
      # Then fsync the file to log it and clear the full sync flag from the
      # inode. The third extent is no longer part of the file and therefore
      # it is not logged.
      $ xfs_io -c "truncate 800K" -c "fsync" /mnt/foobar
    
      # Now do a clone operation that only clones the hole and sets back the
      # file size to match the size it had before the truncate operation
      # (1280K).
      $ xfs_io \
            -c "reflink /mnt/foobar 256K 1024K 256K" \
            -c "fsync" \
            /mnt/foobar
    
      # File data before power failure:
      $ od -A d -t x1 /mnt/foobar
      0000000 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab
      *
      0262144 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      *
      0524288 cd cd cd cd cd cd cd cd cd cd cd cd cd cd cd cd
      *
      0786432 ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef
      *
      0819200 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      *
      1310720
    
      <power fail>
    
      # Mount the fs again to replay the log tree.
      $ mount /dev/sdi /mnt
    
      # File data after power failure:
      $ od -A d -t x1 /mnt/foobar
      0000000 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab
      *
      0262144 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      *
      0524288 cd cd cd cd cd cd cd cd cd cd cd cd cd cd cd cd
      *
      0786432 ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef
      *
      0819200 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      *
      1048576 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73
      *
      1310720
    
    The range from 1024K to 1280K should correspond to a hole but instead it
    points to stale data, to the 256K extent that should not exist after the
    truncate operation.
    
    The issue does not exists when not using NO_HOLES, because for that case
    we use file extent items to represent holes, these are found and copied
    during the loop that iterates over extents at btrfs_clone(), and that
    causes btrfs_replace_file_extents() to be called with a non-NULL
    extent_info argument and therefore set the full sync runtime flag on the
    inode.
    
    So fix this by making the code that deals with a trailing hole during
    cloning, at btrfs_clone(), to set the full sync flag on the inode, if the
    range starts at or beyond the current i_size.
    
    A test case for fstests will follow soon.
    
    Backporting notes: for kernel 5.4 the change goes to ioctl.c into
    btrfs_clone before the last call to btrfs_punch_hole_range.
    
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fc9e5866cb9d66bf3e9d05ff6831132733c098a
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Feb 5 12:55:38 2021 +0000

    btrfs: fix race between swap file activation and snapshot creation
    
    commit dd0734f2a866f9d619d4abf97c3d71bcdee40ea9 upstream.
    
    When creating a snapshot we check if the current number of swap files, in
    the root, is non-zero, and if it is, we error out and warn that we can not
    create the snapshot because there are active swap files.
    
    However this is racy because when a task started activation of a swap
    file, another task might have started already snapshot creation and might
    have seen the counter for the number of swap files as zero. This means
    that after the swap file is activated we may end up with a snapshot of the
    same root successfully created, and therefore when the first write to the
    swap file happens it has to fall back into COW mode, which should never
    happen for active swap files.
    
    Basically what can happen is:
    
    1) Task A starts snapshot creation and enters ioctl.c:create_snapshot().
       There it sees that root->nr_swapfiles has a value of 0 so it continues;
    
    2) Task B enters btrfs_swap_activate(). It is not aware that another task
       started snapshot creation but it did not finish yet. It increments
       root->nr_swapfiles from 0 to 1;
    
    3) Task B checks that the file meets all requirements to be an active
       swap file - it has NOCOW set, there are no snapshots for the inode's
       root at the moment, no file holes, no reflinked extents, etc;
    
    4) Task B returns success and now the file is an active swap file;
    
    5) Task A commits the transaction to create the snapshot and finishes.
       The swap file's extents are now shared between the original root and
       the snapshot;
    
    6) A write into an extent of the swap file is attempted - there is a
       snapshot of the file's root, so we fall back to COW mode and therefore
       the physical location of the extent changes on disk.
    
    So fix this by taking the snapshot lock during swap file activation before
    locking the extent range, as that is the order in which we lock these
    during buffered writes.
    
    Fixes: ed46ff3d42378 ("Btrfs: support swap files")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 501fdd1cefaeb15506221e36ffec2f76e46fc573
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Feb 5 12:55:37 2021 +0000

    btrfs: fix race between writes to swap files and scrub
    
    commit 195a49eaf655eb914896c92cecd96bc863c9feb3 upstream.
    
    When we active a swap file, at btrfs_swap_activate(), we acquire the
    exclusive operation lock to prevent the physical location of the swap
    file extents to be changed by operations such as balance and device
    replace/resize/remove. We also call there can_nocow_extent() which,
    among other things, checks if the block group of a swap file extent is
    currently RO, and if it is we can not use the extent, since a write
    into it would result in COWing the extent.
    
    However we have no protection against a scrub operation running after we
    activate the swap file, which can result in the swap file extents to be
    COWed while the scrub is running and operating on the respective block
    group, because scrub turns a block group into RO before it processes it
    and then back again to RW mode after processing it. That means an attempt
    to write into a swap file extent while scrub is processing the respective
    block group, will result in COWing the extent, changing its physical
    location on disk.
    
    Fix this by making sure that block groups that have extents that are used
    by active swap files can not be turned into RO mode, therefore making it
    not possible for a scrub to turn them into RO mode. When a scrub finds a
    block group that can not be turned to RO due to the existence of extents
    used by swap files, it proceeds to the next block group and logs a warning
    message that mentions the block group was skipped due to active swap
    files - this is the same approach we currently use for balance.
    
    Fixes: ed46ff3d42378 ("Btrfs: support swap files")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2a48761321893e07721d8a2528c6db0b8ac75bf
Author: Ira Weiny <ira.weiny@intel.com>
Date:   Wed Jan 27 22:15:03 2021 -0800

    btrfs: fix raid6 qstripe kmap
    
    commit d70cef0d46729808dc53f145372c02b145c92604 upstream.
    
    When a qstripe is required an extra page is allocated and mapped.  There
    were 3 problems:
    
    1) There is no corresponding call of kunmap() for the qstripe page.
    2) There is no reason to map the qstripe page more than once if the
       number of bits set in rbio->dbitmap is greater than one.
    3) There is no reason to map the parity page and unmap it each time
       through the loop.
    
    The page memory can continue to be reused with a single mapping on each
    iteration by raid6_call.gen_syndrome() without remapping.  So map the
    page for the duration of the loop.
    
    Similarly, improve the algorithm by mapping the parity page just 1 time.
    
    Fixes: 5a6ac9eacb49 ("Btrfs, raid56: support parity scrub on raid56")
    CC: stable@vger.kernel.org # 4.4.x: c17af96554a8: btrfs: raid56: simplify tracking of Q stripe presence
    CC: stable@vger.kernel.org # 4.4.x
    Signed-off-by: Ira Weiny <ira.weiny@intel.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a01415e5e862a60a52b10081532e09f9b3503592
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Jan 25 16:42:35 2021 -0500

    btrfs: avoid double put of block group when emptying cluster
    
    commit 95c85fba1f64c3249c67f0078a29f8a125078189 upstream.
    
    It's wrong calling btrfs_put_block_group in
    __btrfs_return_cluster_to_free_space if the block group passed is
    different than the block group the cluster represents. As this means the
    cluster doesn't have a reference to the passed block group. This results
    in double put and a use-after-free bug.
    
    Fix this by simply bailing if the block group we passed in does not
    match the block group on the cluster.
    
    Fixes: fa9c0d795f7b ("Btrfs: rework allocation clustering")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ update changelog ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbefc2d2890021b1c57cb816983e529fb64eebd1
Author: Jarkko Sakkinen <jarkko@kernel.org>
Date:   Sat Feb 20 00:55:59 2021 +0200

    tpm, tpm_tis: Decorate tpm_get_timeouts() with request_locality()
    
    commit a5665ec2affdba21bff3b0d4d3aed83b3951e8ff upstream.
    
    This is shown with Samsung Chromebook Pro (Caroline) with TPM 1.2
    (SLB 9670):
    
    [    4.324298] TPM returned invalid status
    [    4.324806] WARNING: CPU: 2 PID: 1 at drivers/char/tpm/tpm_tis_core.c:275 tpm_tis_status+0x86/0x8f
    
    Background
    ==========
    
    TCG PC Client Platform TPM Profile (PTP) Specification, paragraph 6.1 FIFO
    Interface Locality Usage per Register, Table 39 Register Behavior Based on
    Locality Setting for FIFO - a read attempt to TPM_STS_x Registers returns
    0xFF in case of lack of locality.
    
    The fix
    =======
    
    Decorate tpm_get_timeouts() with request_locality() and release_locality().
    
    Fixes: a3fbfae82b4c ("tpm: take TPM chip power gating out of tpm_transmit()")
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Laurent Bigonville <bigon@debian.org>
    Cc: stable@vger.kernel.org
    Reported-by: Lukasz Majczak <lma@semihalf.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfa2e4ed1d399b2dde49307c127b2d1c48dcd72f
Author: Lukasz Majczak <lma@semihalf.com>
Date:   Tue Feb 16 10:17:49 2021 +0200

    tpm, tpm_tis: Decorate tpm_tis_gen_interrupt() with request_locality()
    
    commit d53a6adfb553969809eb2b736a976ebb5146cd95 upstream.
    
    This is shown with Samsung Chromebook Pro (Caroline) with TPM 1.2
    (SLB 9670):
    
    [    4.324298] TPM returned invalid status
    [    4.324806] WARNING: CPU: 2 PID: 1 at drivers/char/tpm/tpm_tis_core.c:275 tpm_tis_status+0x86/0x8f
    
    Background
    ==========
    
    TCG PC Client Platform TPM Profile (PTP) Specification, paragraph 6.1 FIFO
    Interface Locality Usage per Register, Table 39 Register Behavior Based on
    Locality Setting for FIFO - a read attempt to TPM_STS_x Registers returns
    0xFF in case of lack of locality.
    
    The fix
    =======
    
    Decorate tpm_tis_gen_interrupt() with request_locality() and
    release_locality().
    
    Cc: Laurent Bigonville <bigon@debian.org>
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: stable@vger.kernel.org
    Fixes: a3fbfae82b4c ("tpm: take TPM chip power gating out of tpm_transmit()")
    Signed-off-by: Lukasz Majczak <lma@semihalf.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86c524934277b279785659f7b453b31c8d143d0e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 27 11:57:37 2021 +0100

    ALSA: usb-audio: Drop bogus dB range in too low level
    
    commit 21cba9c5359dd9d1bffe355336cfec0b66d1ee52 upstream.
    
    Some USB audio firmware seem to report broken dB values for the volume
    controls, and this screws up applications like PulseAudio who blindly
    trusts the given data.  For example, Edifier G2000 reports a PCM
    volume from -128dB to -127dB, and this results in barely inaudible
    sound.
    
    This patch adds a sort of sanity check at parsing the dB values in
    USB-audio driver and disables the dB reporting if the range looks
    bogus.  Here, we assume -96dB as the bottom line of the max dB.
    
    Note that, if one can figure out that proper dB range later, it can be
    patched in the mixer maps.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=211929
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210227105737.3656-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4330e7a8bf01f6361f2c6d7fa34ddf0e108a188b
Author: Andrea Fagiani <andfagiani@gmail.com>
Date:   Tue Jan 19 08:47:44 2021 +0000

    ALSA: usb-audio: use Corsair Virtuoso mapping for Corsair Virtuoso SE
    
    commit 11302bb69e72d0526bc626ee5c451a3d22cde904 upstream.
    
    The Corsair Virtuoso SE RGB Wireless is a USB headset with a mic and a
    sidetone feature. Assign the Corsair Virtuoso name map to the SE product
    ids as well, in order to label its mixer appropriately and allow
    userspace to pick the correct volume controls.
    
    Signed-off-by: Andrea Fagiani <andfagiani@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/40bbdf55-f854-e2ee-87b4-183e6451352c@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c947a8a6f05509d08d2e6402d36e2544fb1af2d
Author: Chris Chiu <chris.chiu@canonical.com>
Date:   Fri Feb 26 09:04:40 2021 +0800

    ALSA: hda/realtek: Enable headset mic of Acer SWIFT with ALC256
    
    commit d0e185616a0331c87ce3aa1d7dfde8df39d6d002 upstream.
    
    The Acer SWIFT Swift SF314-54/55 laptops with ALC256 cannot detect
    both the headset mic and the internal mic. Introduce new fixup
    to enable the jack sense and the headset mic. However, the internal
    mic actually connects to Intel SST audio. It still needs Intel SST
    support to make internal mic capture work.
    
    Signed-off-by: Chris Chiu <chris.chiu@canonical.com>
    Acked-by: Jian-Hong Pan <jhp@endlessos.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210226010440.8474-1-chris.chiu@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
