commit 659361086d8b2ee2c8318f390029a350a6e7fb61
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 12 20:18:27 2021 +0100

    Linux 5.10.7
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210111161510.602817176@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f1e88527c1869de08632efa2cc796e0131850dc
Author: David Disseldorp <ddiss@suse.de>
Date:   Tue Nov 3 02:21:58 2020 +0100

    scsi: target: Fix XCOPY NAA identifier lookup
    
    commit 2896c93811e39d63a4d9b63ccf12a8fbc226e5e4 upstream.
    
    When attempting to match EXTENDED COPY CSCD descriptors with corresponding
    se_devices, target_xcopy_locate_se_dev_e4() currently iterates over LIO's
    global devices list which includes all configured backstores.
    
    This change ensures that only initiator-accessible backstores are
    considered during CSCD descriptor lookup, according to the session's
    se_node_acl LUN list.
    
    To avoid LUN removal race conditions, device pinning is changed from being
    configfs based to instead using the se_node_acl lun_ref.
    
    Reference: CVE-2020-28374
    Fixes: cbf031f425fd ("target: Add support for EXTENDED_COPY copy offload emulation")
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 513729aecb53cdd0ba4e5e5aebc8b2fddcb0131e
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Mon Dec 14 13:31:06 2020 +0800

    rtlwifi: rise completion at the last step of firmware callback
    
    commit 4dfde294b9792dcf8615b55c58f093d544f472f0 upstream.
    
    request_firmware_nowait() which schedules another work is used to load
    firmware when USB is probing. If USB is unplugged before running the
    firmware work, it goes disconnect ops, and then causes use-after-free.
    Though we wait for completion of firmware work before freeing the hw,
    firmware callback rises completion too early. So I move it to the
    last step.
    
    usb 5-1: Direct firmware load for rtlwifi/rtl8192cufw.bin failed with error -2
    rtlwifi: Loading alternative firmware rtlwifi/rtl8192cufw.bin
    rtlwifi: Selected firmware is not available
    ==================================================================
    BUG: KASAN: use-after-free in rtl_fw_do_work.cold+0x68/0x6a drivers/net/wireless/realtek/rtlwifi/core.c:93
    Write of size 4 at addr ffff8881454cff50 by task kworker/0:6/7379
    
    CPU: 0 PID: 7379 Comm: kworker/0:6 Not tainted 5.10.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events request_firmware_work_func
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xae/0x4c8 mm/kasan/report.c:385
     __kasan_report mm/kasan/report.c:545 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:562
     rtl_fw_do_work.cold+0x68/0x6a drivers/net/wireless/realtek/rtlwifi/core.c:93
     request_firmware_work_func+0x12c/0x230 drivers/base/firmware_loader/main.c:1079
     process_one_work+0x933/0x1520 kernel/workqueue.c:2272
     worker_thread+0x64c/0x1120 kernel/workqueue.c:2418
     kthread+0x38c/0x460 kernel/kthread.c:292
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:296
    
    The buggy address belongs to the page:
    page:00000000f54435b3 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1454cf
    flags: 0x200000000000000()
    raw: 0200000000000000 0000000000000000 ffffea00051533c8 0000000000000000
    raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881454cfe00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff8881454cfe80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    >ffff8881454cff00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                                                     ^
     ffff8881454cff80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff8881454d0000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    Reported-by: syzbot+65be4277f3c489293939@syzkaller.appspotmail.com
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201214053106.7748-1-pkshih@realtek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fae7d269ef7343e052bb66d4f79022e4456fe82
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Mon Dec 14 09:51:27 2020 +0100

    xsk: Fix memory leak for failed bind
    
    commit 8bee683384087a6275c9183a483435225f7bb209 upstream.
    
    Fix a possible memory leak when a bind of an AF_XDP socket fails. When
    the fill and completion rings are created, they are tied to the
    socket. But when the buffer pool is later created at bind time, the
    ownership of these two rings are transferred to the buffer pool as
    they might be shared between sockets (and the buffer pool cannot be
    created until we know what we are binding to). So, before the buffer
    pool is created, these two rings are cleaned up with the socket, and
    after they have been transferred they are cleaned up together with
    the buffer pool.
    
    The problem is that ownership was transferred before it was absolutely
    certain that the buffer pool could be created and initialized
    correctly and when one of these errors occurred, the fill and
    completion rings did neither belong to the socket nor the pool and
    where therefore leaked. Solve this by moving the ownership transfer
    to the point where the buffer pool has been completely set up and
    there is no way it can fail.
    
    Fixes: 7361f9c3d719 ("xsk: Move fill and completion rings to buffer pool")
    Reported-by: syzbot+cfa88ddd0655afa88763@syzkaller.appspotmail.com
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Björn Töpel <bjorn.topel@intel.com>
    Link: https://lore.kernel.org/bpf/20201214085127.3960-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 563135ec664ffb80a2297e94d618b04b228a1262
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Dec 22 05:20:43 2020 -0500

    KVM: x86: fix shift out of bounds reported by UBSAN
    
    commit 2f80d502d627f30257ba7e3655e71c373b7d1a5a upstream.
    
    Since we know that e >= s, we can reassociate the left shift,
    changing the shifted number from 1 to 2 in exchange for
    decreasing the right hand side by 1.
    
    Reported-by: syzbot+e87846c48bf72bc85311@syzkaller.appspotmail.com
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02ccda90ef7e23a225b68789bce9e8353f9caa1f
Author: Ying-Tsun Huang <ying-tsun.huang@amd.com>
Date:   Tue Dec 15 15:07:20 2020 +0800

    x86/mtrr: Correct the range check before performing MTRR type lookups
    
    commit cb7f4a8b1fb426a175d1708f05581939c61329d4 upstream.
    
    In mtrr_type_lookup(), if the input memory address region is not in the
    MTRR, over 4GB, and not over the top of memory, a write-back attribute
    is returned. These condition checks are for ensuring the input memory
    address region is actually mapped to the physical memory.
    
    However, if the end address is just aligned with the top of memory,
    the condition check treats the address is over the top of memory, and
    write-back attribute is not returned.
    
    And this hits in a real use case with NVDIMM: the nd_pmem module tries
    to map NVDIMMs as cacheable memories when NVDIMMs are connected. If a
    NVDIMM is the last of the DIMMs, the performance of this NVDIMM becomes
    very low since it is aligned with the top of memory and its memory type
    is uncached-minus.
    
    Move the input end address change to inclusive up into
    mtrr_type_lookup(), before checking for the top of memory in either
    mtrr_type_lookup_{variable,fixed}() helpers.
    
     [ bp: Massage commit message. ]
    
    Fixes: 0cc705f56e40 ("x86/mm/mtrr: Clean up mtrr_type_lookup()")
    Signed-off-by: Ying-Tsun Huang <ying-tsun.huang@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20201215070721.4349-1-ying-tsun.huang@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e3c67976eda30959833d852bc13c7d0a342cfa9
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 16 11:29:46 2020 +0300

    dmaengine: idxd: off by one in cleanup code
    
    commit ff58f7dd0c1352a01de3a40327895bd51e03de3a upstream.
    
    The clean up is off by one so this will start at "i" and it should start
    with "i - 1" and then it doesn't unregister the zeroeth elements in the
    array.
    
    Fixes: c52ca478233c ("dmaengine: idxd: add configuration component of driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/X9nFeojulsNqUSnG@mwanda
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b109f4cd1dc2224f900702483be81d61beab864
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Dec 27 12:33:44 2020 +0100

    netfilter: nft_dynset: report EOPNOTSUPP on missing set feature
    
    commit 95cd4bca7b1f4a25810f3ddfc5e767fb46931789 upstream.
    
    If userspace requests a feature which is not available the original set
    definition, then bail out with EOPNOTSUPP. If userspace sends
    unsupported dynset flags (new feature not supported by this kernel),
    then report EOPNOTSUPP to userspace. EINVAL should be only used to
    report malformed netlink messages from userspace.
    
    Fixes: 22fe54d5fefc ("netfilter: nf_tables: add support for dynamic set updates")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 810bc977f8a4ae5c68aa35d75ae52c45ae6db0c7
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Dec 22 23:23:56 2020 +0100

    netfilter: xt_RATEEST: reject non-null terminated string from userspace
    
    commit 6cb56218ad9e580e519dcd23bfb3db08d8692e5a upstream.
    
    syzbot reports:
    detected buffer overflow in strlen
    [..]
    Call Trace:
     strlen include/linux/string.h:325 [inline]
     strlcpy include/linux/string.h:348 [inline]
     xt_rateest_tg_checkentry+0x2a5/0x6b0 net/netfilter/xt_RATEEST.c:143
    
    strlcpy assumes src is a c-string. Check info->name before its used.
    
    Reported-by: syzbot+e86f7c428c8c50db65b4@syzkaller.appspotmail.com
    Fixes: 5859034d7eb8793 ("[NETFILTER]: x_tables: add RATEEST target")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d17f2ccf6f995c57c25d9e7fb84edbe6e9472e96
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Dec 17 17:53:18 2020 +0300

    netfilter: ipset: fix shift-out-of-bounds in htable_bits()
    
    commit 5c8193f568ae16f3242abad6518dc2ca6c8eef86 upstream.
    
    htable_bits() can call jhash_size(32) and trigger shift-out-of-bounds
    
    UBSAN: shift-out-of-bounds in net/netfilter/ipset/ip_set_hash_gen.h:151:6
    shift exponent 32 is too large for 32-bit type 'unsigned int'
    CPU: 0 PID: 8498 Comm: syz-executor519
     Not tainted 5.10.0-rc7-next-20201208-syzkaller #0
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:395
     htable_bits net/netfilter/ipset/ip_set_hash_gen.h:151 [inline]
     hash_mac_create.cold+0x58/0x9b net/netfilter/ipset/ip_set_hash_gen.h:1524
     ip_set_create+0x610/0x1380 net/netfilter/ipset/ip_set_core.c:1115
     nfnetlink_rcv_msg+0xecc/0x1180 net/netfilter/nfnetlink.c:252
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2494
     nfnetlink_rcv+0x1ac/0x420 net/netfilter/nfnetlink.c:600
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x907/0xe40 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2345
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2399
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2432
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This patch replaces htable_bits() by simple fls(hashsize - 1) call:
    it alone returns valid nbits both for round and non-round hashsizes.
    It is normal to set any nbits here because it is validated inside
    following htable_size() call which returns 0 for nbits>31.
    
    Fixes: 1feab10d7e6d("netfilter: ipset: Unified hash type generation")
    Reported-by: syzbot+d66bfadebca46cf61a2b@syzkaller.appspotmail.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27bc60d9678a245bce000ba22824f91931fa24f9
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Wed Dec 16 21:38:02 2020 -0700

    netfilter: x_tables: Update remaining dereference to RCU
    
    commit 443d6e86f821a165fae3fc3fc13086d27ac140b1 upstream.
    
    This fixes the dereference to fetch the RCU pointer when holding
    the appropriate xtables lock.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: cc00bcaa5899 ("netfilter: x_tables: Switch synchronization to RCU")
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56429ddfd59c11caf15870971b2c782fae80e1dd
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Sun Nov 29 16:47:10 2020 +0200

    ARM: dts: OMAP3: disable AES on N950/N9
    
    commit f1dc15cd7fc146107cad2a926d9c1d005f69002a upstream.
    
    AES needs to be disabled on Nokia N950/N9 as well (HS devices), otherwise
    kernel fails to boot.
    
    Fixes: c312f066314e ("ARM: dts: omap3: Migrate AES from hwmods to sysc-omap2")
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00a6b090d5c9eab1faf01077bc39093032eaf482
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Fri Nov 13 06:06:28 2020 +0200

    net/mlx5e: Fix SWP offsets when vlan inserted by driver
    
    commit b544011f0e58ce43c40105468d6dc67f980a0c7a upstream.
    
    In case WQE includes inline header the vlan is inserted by driver even
    if vlan offload is set. On geneve over vlan interface where software
    parser is used the SWP offsets should be updated according to the added
    vlan.
    
    Fixes: e3cfc7e6b7bd ("net/mlx5e: TX, Add geneve tunnel stateless offload support")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3601005de8fe0b9485f5203ea4dd2fb5b08cafd
Author: Coly Li <colyli@suse.de>
Date:   Mon Jan 4 15:41:21 2021 +0800

    bcache: introduce BCH_FEATURE_INCOMPAT_LOG_LARGE_BUCKET_SIZE for large bucket
    
    commit b16671e8f493e3df40b1fb0dff4078f391c5099a upstream.
    
    When large bucket feature was added, BCH_FEATURE_INCOMPAT_LARGE_BUCKET
    was introduced into the incompat feature set. It used bucket_size_hi
    (which was added at the tail of struct cache_sb_disk) to extend current
    16bit bucket size to 32bit with existing bucket_size in struct
    cache_sb_disk.
    
    This is not a good idea, there are two obvious problems,
    - Bucket size is always value power of 2, if store log2(bucket size) in
      existing bucket_size of struct cache_sb_disk, it is unnecessary to add
      bucket_size_hi.
    - Macro csum_set() assumes d[SB_JOURNAL_BUCKETS] is the last member in
      struct cache_sb_disk, bucket_size_hi was added after d[] which makes
      csum_set calculate an unexpected super block checksum.
    
    To fix the above problems, this patch introduces a new incompat feature
    bit BCH_FEATURE_INCOMPAT_LOG_LARGE_BUCKET_SIZE, when this bit is set, it
    means bucket_size in struct cache_sb_disk stores the order of power-of-2
    bucket size value. When user specifies a bucket size larger than 32768
    sectors, BCH_FEATURE_INCOMPAT_LOG_LARGE_BUCKET_SIZE will be set to
    incompat feature set, and bucket_size stores log2(bucket size) more
    than store the real bucket size value.
    
    The obsoleted BCH_FEATURE_INCOMPAT_LARGE_BUCKET won't be used anymore,
    it is renamed to BCH_FEATURE_INCOMPAT_OBSO_LARGE_BUCKET and still only
    recognized by kernel driver for legacy compatible purpose. The previous
    bucket_size_hi is renmaed to obso_bucket_size_hi in struct cache_sb_disk
    and not used in bcache-tools anymore.
    
    For cache device created with BCH_FEATURE_INCOMPAT_LARGE_BUCKET feature,
    bcache-tools and kernel driver still recognize the feature string and
    display it as "obso_large_bucket".
    
    With this change, the unnecessary extra space extend of bcache on-disk
    super block can be avoided, and csum_set() may generate expected check
    sum as well.
    
    Fixes: ffa470327572 ("bcache: add bucket_size_hi into struct cache_sb_disk for large bucket")
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: stable@vger.kernel.org # 5.9+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9c413cd0cdf8823e01b59779602c54bc847962b
Author: Coly Li <colyli@suse.de>
Date:   Mon Jan 4 15:41:20 2021 +0800

    bcache: check unsupported feature sets for bcache register
    
    commit 1dfc0686c29a9bbd3a446a29f9ccde3dec3bc75a upstream.
    
    This patch adds the check for features which is incompatible for
    current supported feature sets.
    
    Now if the bcache device created by bcache-tools has features that
    current kernel doesn't support, read_super() will fail with error
    messoage. E.g. if an unsupported incompatible feature detected,
    bcache register will fail with dmesg "bcache: register_bcache() error :
    Unsupported incompatible feature found".
    
    Fixes: d721a43ff69c ("bcache: increase super block version for cache device and backing device")
    Fixes: ffa470327572 ("bcache: add bucket_size_hi into struct cache_sb_disk for large bucket")
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: stable@vger.kernel.org # 5.9+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbb23cd187558a9f1256845ff9c8dd10dbeae101
Author: Coly Li <colyli@suse.de>
Date:   Mon Jan 4 15:41:19 2021 +0800

    bcache: fix typo from SUUP to SUPP in features.h
    
    commit f7b4943dea48a572ad751ce1f18a245d43debe7e upstream.
    
    This patch fixes the following typos,
    from BCH_FEATURE_COMPAT_SUUP to BCH_FEATURE_COMPAT_SUPP
    from BCH_FEATURE_INCOMPAT_SUUP to BCH_FEATURE_INCOMPAT_SUPP
    from BCH_FEATURE_INCOMPAT_SUUP to BCH_FEATURE_RO_COMPAT_SUPP
    
    Fixes: d721a43ff69c ("bcache: increase super block version for cache device and backing device")
    Fixes: ffa470327572 ("bcache: add bucket_size_hi into struct cache_sb_disk for large bucket")
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: stable@vger.kernel.org # 5.9+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d366ace15444dd741d25d8142735da1dac2445
Author: Matthew Auld <matthew.auld@intel.com>
Date:   Thu Dec 24 15:13:58 2020 +0000

    drm/i915: clear the gpu reloc batch
    
    commit 641382e9b44fba81a0778e1914ee35b8471121f9 upstream.
    
    The reloc batch is short lived but can exist in the user visible ppGTT,
    and since it's backed by an internal object, which lacks page clearing,
    we should take care to clear it upfront.
    
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201224151358.401345-2-matthew.auld@intel.com
    Cc: stable@vger.kernel.org
    (cherry picked from commit 26ebc511e799f621357982ccc37a7987a56a00f4)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13738d7d5a24a9208241dfbc997b55fcbd18c64d
Author: Matthew Auld <matthew.auld@intel.com>
Date:   Thu Dec 24 15:13:57 2020 +0000

    drm/i915: clear the shadow batch
    
    commit 75353bcd2184010f08a3ed2f0da019bd9d604e1e upstream.
    
    The shadow batch is an internal object, which doesn't have any page
    clearing, and since the batch_len can be smaller than the object, we
    should take care to clear it.
    
    Testcase: igt/gen9_exec_parse/shadow-peek
    Fixes: 4f7af1948abc ("drm/i915: Support ro ppgtt mapped cmdparser shadow buffers")
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201224151358.401345-1-matthew.auld@intel.com
    Cc: stable@vger.kernel.org
    (cherry picked from commit eeb52ee6c4a429ec301faf1dc48988744960786e)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cd7e30a6db615b348f12c4c9fff323ef9a11d4a
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Thu Dec 17 16:24:32 2020 -0800

    arm64: link with -z norelro for LLD or aarch64-elf
    
    commit 311bea3cb9ee20ef150ca76fc60a592bf6b159f5 upstream.
    
    With GNU binutils 2.35+, linking with BFD produces warnings for vmlinux:
    aarch64-linux-gnu-ld: warning: -z norelro ignored
    
    BFD can produce this warning when the target emulation mode does not
    support RELRO program headers, and -z relro or -z norelro is passed.
    
    Alan Modra clarifies:
      The default linker emulation for an aarch64-linux ld.bfd is
      -maarch64linux, the default for an aarch64-elf linker is
      -maarch64elf.  They are not equivalent.  If you choose -maarch64elf
      you get an emulation that doesn't support -z relro.
    
    The ARCH=arm64 kernel prefers -maarch64elf, but may fall back to
    -maarch64linux based on the toolchain configuration.
    
    LLD will always create RELRO program header regardless of target
    emulation.
    
    To avoid the above warning when linking with BFD, pass -z norelro only
    when linking with LLD or with -maarch64linux.
    
    Fixes: 3b92fa7485eb ("arm64: link with -z norelro regardless of CONFIG_RELOCATABLE")
    Fixes: 3bbd3db86470 ("arm64: relocatable: fix inconsistencies in linker script and options")
    Cc: <stable@vger.kernel.org> # 5.0.x-
    Reported-by: kernelci.org bot <bot@kernelci.org>
    Reported-by: Quentin Perret <qperret@google.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Alan Modra <amodra@gmail.com>
    Cc: Fāng-ruì Sòng <maskray@google.com>
    Link: https://lore.kernel.org/r/20201218002432.788499-1-ndesaulniers@google.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a19dae4254c434a1ac8937a809fe08fd15ad3be5
Author: Charan Teja Reddy <charante@codeaurora.org>
Date:   Tue Jan 5 20:06:39 2021 +0530

    dmabuf: fix use-after-free of dmabuf's file->f_inode
    
    commit 05cd84691eafcd7959a1e120d5e72c0dd98c5d91 upstream.
    
    It is observed 'use-after-free' on the dmabuf's file->f_inode with the
    race between closing the dmabuf file and reading the dmabuf's debug
    info.
    
    Consider the below scenario where P1 is closing the dma_buf file
    and P2 is reading the dma_buf's debug info in the system:
    
    P1                                              P2
                                            dma_buf_debug_show()
    dma_buf_put()
      __fput()
        file->f_op->release()
        dput()
        ....
          dentry_unlink_inode()
            iput(dentry->d_inode)
            (where the inode is freed)
                                            mutex_lock(&db_list.lock)
                                            read 'dma_buf->file->f_inode'
                                            (the same inode is freed by P1)
                                            mutex_unlock(&db_list.lock)
          dentry->d_op->d_release()-->
            dma_buf_release()
              .....
              mutex_lock(&db_list.lock)
              removes the dmabuf from the list
              mutex_unlock(&db_list.lock)
    
    In the above scenario, when dma_buf_put() is called on a dma_buf, it
    first frees the dma_buf's file->f_inode(=dentry->d_inode) and then
    removes this dma_buf from the system db_list. In between P2 traversing
    the db_list tries to access this dma_buf's file->f_inode that was freed
    by P1 which is a use-after-free case.
    
    Since, __fput() calls f_op->release first and then later calls the
    d_op->d_release, move the dma_buf's db_list removal from d_release() to
    f_op->release(). This ensures that dma_buf's file->f_inode is not
    accessed after it is released.
    
    Cc: <stable@vger.kernel.org> # 5.4.x-
    Fixes: 4ab59c3c638c ("dma-buf: Move dma_buf_release() from fops to dentry_ops")
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Charan Teja Reddy <charante@codeaurora.org>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/1609857399-31549-1-git-send-email-charante@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6844bc38c9fe5c20994f4a0819eac1fc9acd80eb
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Tue Jan 5 17:11:45 2021 +0800

    Revert "device property: Keep secondary firmware node secondary by type"
    
    commit 47f4469970d8861bc06d2d4d45ac8200ff07c693 upstream.
    
    While commit d5dcce0c414f ("device property: Keep secondary firmware
    node secondary by type") describes everything correct in its commit
    message, the change it made does the opposite and original commit
    c15e1bdda436 ("device property: Fix the secondary firmware node handling
    in set_primary_fwnode()") was fully correct.
    
    Revert the former one here and improve documentation in the next patch.
    
    Fixes: d5dcce0c414f ("device property: Keep secondary firmware node secondary by type")
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e84c99055eb84a2a6226bf6164ee70bdcfb996e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Dec 10 12:09:02 2020 +0000

    btrfs: send: fix wrong file path when there is an inode with a pending rmdir
    
    commit 0b3f407e6728d990ae1630a02c7b952c21c288d3 upstream.
    
    When doing an incremental send, if we have a new inode that happens to
    have the same number that an old directory inode had in the base snapshot
    and that old directory has a pending rmdir operation, we end up computing
    a wrong path for the new inode, causing the receiver to fail.
    
    Example reproducer:
    
      $ cat test-send-rmdir.sh
      #!/bin/bash
    
      DEV=/dev/sdi
      MNT=/mnt/sdi
    
      mkfs.btrfs -f $DEV >/dev/null
      mount $DEV $MNT
    
      mkdir $MNT/dir
      touch $MNT/dir/file1
      touch $MNT/dir/file2
      touch $MNT/dir/file3
    
      # Filesystem looks like:
      #
      # .                                     (ino 256)
      # |----- dir/                           (ino 257)
      #         |----- file1                  (ino 258)
      #         |----- file2                  (ino 259)
      #         |----- file3                  (ino 260)
      #
    
      btrfs subvolume snapshot -r $MNT $MNT/snap1
      btrfs send -f /tmp/snap1.send $MNT/snap1
    
      # Now remove our directory and all its files.
      rm -fr $MNT/dir
    
      # Unmount the filesystem and mount it again. This is to ensure that
      # the next inode that is created ends up with the same inode number
      # that our directory "dir" had, 257, which is the first free "objectid"
      # available after mounting again the filesystem.
      umount $MNT
      mount $DEV $MNT
    
      # Now create a new file (it could be a directory as well).
      touch $MNT/newfile
    
      # Filesystem now looks like:
      #
      # .                                     (ino 256)
      # |----- newfile                        (ino 257)
      #
    
      btrfs subvolume snapshot -r $MNT $MNT/snap2
      btrfs send -f /tmp/snap2.send -p $MNT/snap1 $MNT/snap2
    
      # Now unmount the filesystem, create a new one, mount it and try to apply
      # both send streams to recreate both snapshots.
      umount $DEV
    
      mkfs.btrfs -f $DEV >/dev/null
    
      mount $DEV $MNT
    
      btrfs receive -f /tmp/snap1.send $MNT
      btrfs receive -f /tmp/snap2.send $MNT
    
      umount $MNT
    
    When running the test, the receive operation for the incremental stream
    fails:
    
      $ ./test-send-rmdir.sh
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap1'
      At subvol /mnt/sdi/snap1
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap2'
      At subvol /mnt/sdi/snap2
      At subvol snap1
      At snapshot snap2
      ERROR: chown o257-9-0 failed: No such file or directory
    
    So fix this by tracking directories that have a pending rmdir by inode
    number and generation number, instead of only inode number.
    
    A test case for fstests follows soon.
    
    Reported-by: Massimo B. <massimo.b@gmx.net>
    Tested-by: Massimo B. <massimo.b@gmx.net>
    Link: https://lore.kernel.org/linux-btrfs/6ae34776e85912960a253a8327068a892998e685.camel@gmx.net/
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1888e5df8449ef16655f827bd46d0a809b3048a4
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Dec 4 09:24:47 2020 +0800

    btrfs: qgroup: don't try to wait flushing if we're already holding a transaction
    
    commit ae5e070eaca9dbebde3459dd8f4c2756f8c097d0 upstream.
    
    There is a chance of racing for qgroup flushing which may lead to
    deadlock:
    
            Thread A                |       Thread B
       (not holding trans handle)   |  (holding a trans handle)
    --------------------------------+--------------------------------
    __btrfs_qgroup_reserve_meta()   | __btrfs_qgroup_reserve_meta()
    |- try_flush_qgroup()           | |- try_flush_qgroup()
       |- QGROUP_FLUSHING bit set   |    |
       |                            |    |- test_and_set_bit()
       |                            |    |- wait_event()
       |- btrfs_join_transaction()  |
       |- btrfs_commit_transaction()|
    
                            !!! DEAD LOCK !!!
    
    Since thread A wants to commit transaction, but thread B is holding a
    transaction handle, blocking the commit.
    At the same time, thread B is waiting for thread A to finish its commit.
    
    This is just a hot fix, and would lead to more EDQUOT when we're near
    the qgroup limit.
    
    The proper fix would be to make all metadata/data reservations happen
    without holding a transaction handle.
    
    CC: stable@vger.kernel.org # 5.9+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c31964eca1397b923ff388866c67a25dc24b0da
Author: Liu Yi L <yi.l.liu@intel.com>
Date:   Thu Jan 7 00:03:55 2021 +0800

    iommu/vt-d: Move intel_iommu info from struct intel_svm to struct intel_svm_dev
    
    commit 9ad9f45b3b91162b33abfe175ae75ab65718dbf5 upstream.
    
    'struct intel_svm' is shared by all devices bound to a give process,
    but records only a single pointer to a 'struct intel_iommu'. Consequently,
    cache invalidations may only be applied to a single DMAR unit, and are
    erroneously skipped for the other devices.
    
    In preparation for fixing this, rework the structures so that the iommu
    pointer resides in 'struct intel_svm_dev', allowing 'struct intel_svm'
    to track them in its device list.
    
    Fixes: 1c4f88b7f1f9 ("iommu/vt-d: Shared virtual address in scalable mode")
    Cc: Lu Baolu <baolu.lu@linux.intel.com>
    Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: Raj Ashok <ashok.raj@intel.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Reported-by: Guo Kaijie <Kaijie.Guo@intel.com>
    Reported-by: Xin Zeng <xin.zeng@intel.com>
    Signed-off-by: Guo Kaijie <Kaijie.Guo@intel.com>
    Signed-off-by: Xin Zeng <xin.zeng@intel.com>
    Signed-off-by: Liu Yi L <yi.l.liu@intel.com>
    Tested-by: Guo Kaijie <Kaijie.Guo@intel.com>
    Cc: stable@vger.kernel.org # v5.0+
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/1609949037-25291-2-git-send-email-yi.l.liu@intel.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a07c54917aad750feb4689972386b2afc19f29c8
Author: PeiSen Hou <pshou@realtek.com>
Date:   Thu Dec 31 11:57:28 2020 +0100

    ALSA: hda/realtek: Add two "Intel Reference board" SSID in the ALC256.
    
    commit ce2e79b223867b9e586021b55dee7035517a236b upstream.
    
    Add two "Intel Reference boad" SSID in the alc256.
    Enable "power saving mode" and Enable "headset jack mode".
    
    Signed-off-by: PeiSen Hou <pshou@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/5978d2267f034c28973d117925ec9c63@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41af04d3037a03d68b110ccaf0b6b9d4a850da49
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Dec 30 20:56:35 2020 +0800

    ALSA: hda/realtek: Enable mute and micmute LED on HP EliteBook 850 G7
    
    commit a598098cc9737f612dbab52294433fc26c51cc9b upstream.
    
    HP EliteBook 850 G7 uses the same GPIO pins as ALC285_FIXUP_HP_GPIO_LED
    to enable mute and micmute LED. So apply the quirk to enable the LEDs.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201230125636.45028-1-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e1bcaebe8b10aedd94907473fef7d6a04d42ac0
Author: Manuel Jiménez <mjbfm99@me.com>
Date:   Tue Dec 29 15:38:56 2020 +0100

    ALSA: hda/realtek: Add mute LED quirk for more HP laptops
    
    commit 484229585a5e91eeb00ee10e05d5204e1ca6c481 upstream.
    
    HP Pavilion 13-bb0000 (SSID 103c:87c8) needs the same
    quirk as other models with ALC287.
    
    Signed-off-by: Manuel Jiménez <mjbfm99@me.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/X+s/gKNydVrI6nLj@HP-Pavilion-13
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 582de98b59fd2f05c3f6239184a67dec7f374be8
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Oct 23 14:46:47 2020 +0800

    ALSA: hda/realtek - Fix speaker volume control on Lenovo C940
    
    commit f86de9b1c0663b0a3ca2dcddec9aa910ff0fbf2c upstream.
    
    Cannot adjust speaker's volume on Lenovo C940.
    Applying the alc298_fixup_speaker_volume function can fix the issue.
    
    [ Additional note: C940 has I2S amp for the speaker and this needs the
      same initialization as Dell machines.
      The patch was slightly modified so that the quirk entry is moved
      next to the corresponding Dell quirk entry. -- tiwai ]
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/ea25b4e5c468491aa2e9d6cb1f2fced3@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2eda063db9922627ac5501d0187bf92cfc9065a1
Author: bo liu <bo.liu@senarytech.com>
Date:   Tue Dec 29 11:52:26 2020 +0800

    ALSA: hda/conexant: add a new hda codec CX11970
    
    commit 744a11abc56405c5a106e63da30a941b6d27f737 upstream.
    
    The current kernel does not support the cx11970 codec chip.
    Add a codec configuration item to kernel.
    
    [ Minor coding style fix by tiwai ]
    
    Signed-off-by: bo liu <bo.liu@senarytech.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201229035226.62120-1-bo.liu@senarytech.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c03f37d5293402f0518860456ee6fe2098f6b637
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 4 16:30:46 2021 +0100

    ALSA: hda/via: Fix runtime PM for Clevo W35xSS
    
    commit 4bfd6247fa9164c8e193a55ef9c0ea3ee22f82d8 upstream.
    
    Clevo W35xSS_370SS with VIA codec has had the runtime PM problem that
    looses the power state of some nodes after the runtime resume.  This
    was worked around by disabling the default runtime PM via a denylist
    entry.  Since 5.10.x made the runtime PM applied (casually) even
    though it's disabled in the denylist, this problem was revisited.  The
    result was that disabling power_save_node feature suffices for the
    runtime PM problem.
    
    This patch implements the disablement of power_save_node feature in
    VIA codec for the device.  It also drops the former denylist entry,
    too, as the runtime PM should work in the codec side properly now.
    
    Fixes: b529ef2464ad ("ALSA: hda: Add Clevo W35xSS_370SS to the power_save blacklist")
    Reported-by: Christian Labisch <clnetbox@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210104153046.19993-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cafc6e70a63c5ca30b1cc9ae1bb492fcc54bfd62
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Jan 5 12:37:23 2021 -0500

    blk-iocost: fix NULL iocg deref from racing against initialization
    
    commit d16baa3f1453c14d680c5fee01cd122a22d0e0ce upstream.
    
    When initializing iocost for a queue, its rqos should be registered before
    the blkcg policy is activated to allow policy data initiailization to lookup
    the associated ioc. This unfortunately means that the rqos methods can be
    called on bios before iocgs are attached to all existing blkgs.
    
    While the race is theoretically possible on ioc_rqos_throttle(), it mostly
    happened in ioc_rqos_merge() due to the difference in how they lookup ioc.
    The former determines it from the passed in @rqos and then bails before
    dereferencing iocg if the looked up ioc is disabled, which most likely is
    the case if initialization is still in progress. The latter looked up ioc by
    dereferencing the possibly NULL iocg making it a lot more prone to actually
    triggering the bug.
    
    * Make ioc_rqos_merge() use the same method as ioc_rqos_throttle() to look
      up ioc for consistency.
    
    * Make ioc_rqos_throttle() and ioc_rqos_merge() test for NULL iocg before
      dereferencing it.
    
    * Explain the danger of NULL iocgs in blk_iocost_init().
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Jonathan Lemon <bsd@fb.com>
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 397e352ca96f3c4d79cba9ce89ea8a8852860b86
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Thu Dec 17 14:31:19 2020 -0800

    x86/resctrl: Don't move a task to the same resource group
    
    commit a0195f314a25582b38993bf30db11c300f4f4611 upstream.
    
    Shakeel Butt reported in [1] that a user can request a task to be moved
    to a resource group even if the task is already in the group. It just
    wastes time to do the move operation which could be costly to send IPI
    to a different CPU.
    
    Add a sanity check to ensure that the move operation only happens when
    the task is not already in the resource group.
    
    [1] https://lore.kernel.org/lkml/CALvZod7E9zzHwenzf7objzGKsdBmVwTgEJ0nPgs0LUFU3SN5Pw@mail.gmail.com/
    
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Reported-by: Shakeel Butt <shakeelb@google.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/962ede65d8e95be793cb61102cca37f7bb018e66.1608243147.git.reinette.chatre@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34e4ae4dca72fd0fd9cf6cccc260db1a12ed5a69
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Thu Dec 17 14:31:18 2020 -0800

    x86/resctrl: Use an IPI instead of task_work_add() to update PQR_ASSOC MSR
    
    commit ae28d1aae48a1258bd09a6f707ebb4231d79a761 upstream.
    
    Currently, when moving a task to a resource group the PQR_ASSOC MSR is
    updated with the new closid and rmid in an added task callback. If the
    task is running, the work is run as soon as possible. If the task is not
    running, the work is executed later in the kernel exit path when the
    kernel returns to the task again.
    
    Updating the PQR_ASSOC MSR as soon as possible on the CPU a moved task
    is running is the right thing to do. Queueing work for a task that is
    not running is unnecessary (the PQR_ASSOC MSR is already updated when
    the task is scheduled in) and causing system resource waste with the way
    in which it is implemented: Work to update the PQR_ASSOC register is
    queued every time the user writes a task id to the "tasks" file, even if
    the task already belongs to the resource group.
    
    This could result in multiple pending work items associated with a
    single task even if they are all identical and even though only a single
    update with most recent values is needed. Specifically, even if a task
    is moved between different resource groups while it is sleeping then it
    is only the last move that is relevant but yet a work item is queued
    during each move.
    
    This unnecessary queueing of work items could result in significant
    system resource waste, especially on tasks sleeping for a long time.
    For example, as demonstrated by Shakeel Butt in [1] writing the same
    task id to the "tasks" file can quickly consume significant memory. The
    same problem (wasted system resources) occurs when moving a task between
    different resource groups.
    
    As pointed out by Valentin Schneider in [2] there is an additional issue
    with the way in which the queueing of work is done in that the task_struct
    update is currently done after the work is queued, resulting in a race with
    the register update possibly done before the data needed by the update is
    available.
    
    To solve these issues, update the PQR_ASSOC MSR in a synchronous way
    right after the new closid and rmid are ready during the task movement,
    only if the task is running. If a moved task is not running nothing
    is done since the PQR_ASSOC MSR will be updated next time the task is
    scheduled. This is the same way used to update the register when tasks
    are moved as part of resource group removal.
    
    [1] https://lore.kernel.org/lkml/CALvZod7E9zzHwenzf7objzGKsdBmVwTgEJ0nPgs0LUFU3SN5Pw@mail.gmail.com/
    [2] https://lore.kernel.org/lkml/20201123022433.17905-1-valentin.schneider@arm.com
    
     [ bp: Massage commit message and drop the two update_task_closid_rmid()
       variants. ]
    
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Reported-by: Shakeel Butt <shakeelb@google.com>
    Reported-by: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/17aa2fb38fc12ce7bb710106b3e7c7b45acb9e94.1608243147.git.reinette.chatre@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3cf9ffe8d9c06269b2051c38f91d11ab16f8e4d
Author: Ben Gardon <bgardon@google.com>
Date:   Wed Jan 6 16:19:34 2021 -0800

    KVM: x86/mmu: Ensure TDP MMU roots are freed after yield
    
    commit a889ea54b3daa63ee1463dc19ed699407d61458b upstream.
    
    Many TDP MMU functions which need to perform some action on all TDP MMU
    roots hold a reference on that root so that they can safely drop the MMU
    lock in order to yield to other threads. However, when releasing the
    reference on the root, there is a bug: the root will not be freed even
    if its reference count (root_count) is reduced to 0.
    
    To simplify acquiring and releasing references on TDP MMU root pages, and
    to ensure that these roots are properly freed, move the get/put operations
    into another TDP MMU root iterator macro.
    
    Moving the get/put operations into an iterator macro also helps
    simplify control flow when a root does need to be freed. Note that using
    the list_for_each_entry_safe macro would not have been appropriate in
    this situation because it could keep a pointer to the next root across
    an MMU lock release + reacquire, during which time that root could be
    freed.
    
    Reported-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Fixes: faaf05b00aec ("kvm: x86/mmu: Support zapping SPTEs in the TDP MMU")
    Fixes: 063afacd8730 ("kvm: x86/mmu: Support invalidate range MMU notifier for TDP MMU")
    Fixes: a6a0b05da9f3 ("kvm: x86/mmu: Support dirty logging for the TDP MMU")
    Fixes: 14881998566d ("kvm: x86/mmu: Support disabling dirty logging for the tdp MMU")
    Signed-off-by: Ben Gardon <bgardon@google.com>
    Message-Id: <20210107001935.3732070-1-bgardon@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffee6772c489d8d65d86979d4ccc4286624124b2
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Thu Dec 17 23:41:18 2020 +0800

    kvm: check tlbs_dirty directly
    
    commit 88bf56d04bc3564542049ec4ec168a8b60d0b48c upstream.
    
    In kvm_mmu_notifier_invalidate_range_start(), tlbs_dirty is used as:
            need_tlb_flush |= kvm->tlbs_dirty;
    with need_tlb_flush's type being int and tlbs_dirty's type being long.
    
    It means that tlbs_dirty is always used as int and the higher 32 bits
    is useless.  We need to check tlbs_dirty in a correct way and this
    change checks it directly without propagating it to need_tlb_flush.
    
    Note: it's _extremely_ unlikely this neglecting of higher 32 bits can
    cause problems in practice.  It would require encountering tlbs_dirty
    on a 4 billion count boundary, and KVM would need to be using shadow
    paging or be running a nested guest.
    
    Cc: stable@vger.kernel.org
    Fixes: a4ee1ca4a36e ("KVM: MMU: delay flush all tlbs on sync_page path")
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Message-Id: <20201217154118.16497-1-jiangshanlai@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4064ef40c5c31134d6c360a1f1e9ec64e545ede
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Dec 17 16:31:37 2020 -0800

    KVM: x86/mmu: Get root level from walkers when retrieving MMIO SPTE
    
    commit 39b4d43e6003cee51cd119596d3c33d0449eb44c upstream.
    
    Get the so called "root" level from the low level shadow page table
    walkers instead of manually attempting to calculate it higher up the
    stack, e.g. in get_mmio_spte().  When KVM is using PAE shadow paging,
    the starting level of the walk, from the callers perspective, is not
    the CR3 root but rather the PDPTR "root".  Checking for reserved bits
    from the CR3 root causes get_mmio_spte() to consume uninitialized stack
    data due to indexing into sptes[] for a level that was not filled by
    get_walk().  This can result in false positives and/or negatives
    depending on what garbage happens to be on the stack.
    
    Opportunistically nuke a few extra newlines.
    
    Fixes: 95fb5b0258b7 ("kvm: x86/mmu: Support MMIO in the TDP MMU")
    Reported-by: Richard Herbert <rherbert@sympatico.ca>
    Cc: Ben Gardon <bgardon@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20201218003139.2167891-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afd621673f03c0eee077288ee984c2ec397e3a85
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Dec 17 16:31:36 2020 -0800

    KVM: x86/mmu: Use -1 to flag an undefined spte in get_mmio_spte()
    
    commit 2aa078932ff6c66bf10cc5b3144440dbfa7d813d upstream.
    
    Return -1 from the get_walk() helpers if the shadow walk doesn't fill at
    least one spte, which can theoretically happen if the walk hits a
    not-present PDPTR.  Returning the root level in such a case will cause
    get_mmio_spte() to return garbage (uninitialized stack data).  In
    practice, such a scenario should be impossible as KVM shouldn't get a
    reserved-bit page fault with a not-present PDPTR.
    
    Note, using mmu->root_level in get_walk() is wrong for other reasons,
    too, but that's now a moot point.
    
    Fixes: 95fb5b0258b7 ("kvm: x86/mmu: Support MMIO in the TDP MMU")
    Cc: Ben Gardon <bgardon@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20201218003139.2167891-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23220e87c91f9975c45290d167b7ee3d415985dc
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Dec 2 22:28:12 2020 -0800

    x86/mm: Fix leak of pmd ptlock
    
    commit d1c5246e08eb64991001d97a3bd119c93edbc79a upstream.
    
    Commit
    
      28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    
    introduced a new location where a pmd was released, but neglected to
    run the pmd page destructor. In fact, this happened previously for a
    different pmd release path and was fixed by commit:
    
      c283610e44ec ("x86, mm: do not leak page->ptl for pmd page tables").
    
    This issue was hidden until recently because the failure mode is silent,
    but commit:
    
      b2b29d6d0119 ("mm: account PMD tables like PTE tables")
    
    turns the failure mode into this signature:
    
     BUG: Bad page state in process lt-pmem-ns  pfn:15943d
     page:000000007262ed7b refcount:0 mapcount:-1024 mapping:0000000000000000 index:0x0 pfn:0x15943d
     flags: 0xaffff800000000()
     raw: 00affff800000000 dead000000000100 0000000000000000 0000000000000000
     raw: 0000000000000000 ffff913a029bcc08 00000000fffffbff 0000000000000000
     page dumped because: nonzero mapcount
     [..]
      dump_stack+0x8b/0xb0
      bad_page.cold+0x63/0x94
      free_pcp_prepare+0x224/0x270
      free_unref_page+0x18/0xd0
      pud_free_pmd_page+0x146/0x160
      ioremap_pud_range+0xe3/0x350
      ioremap_page_range+0x108/0x160
      __ioremap_caller.constprop.0+0x174/0x2b0
      ? memremap+0x7a/0x110
      memremap+0x7a/0x110
      devm_memremap+0x53/0xa0
      pmem_attach_disk+0x4ed/0x530 [nd_pmem]
      ? __devm_release_region+0x52/0x80
      nvdimm_bus_probe+0x85/0x210 [libnvdimm]
    
    Given this is a repeat occurrence it seemed prudent to look for other
    places where this destructor might be missing and whether a better
    helper is needed. try_to_free_pmd_page() looks like a candidate, but
    testing with setting up and tearing down pmd mappings via the dax unit
    tests is thus far not triggering the failure.
    
    As for a better helper pmd_free() is close, but it is a messy fit
    due to requiring an @mm arg. Also, ___pmd_free_tlb() wants to call
    paravirt_tlb_remove_table() instead of free_page(), so open-coded
    pgtable_pmd_page_dtor() seems the best way forward for now.
    
    Debugged together with Matthew Wilcox <willy@infradead.org>.
    
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/160697689204.605323.17629854984697045602.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 876195e1c8c6dcd580b648f0a691c93b86ec2042
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 5 11:33:00 2021 -0800

    mm: make wait_on_page_writeback() wait for multiple pending writebacks
    
    commit c2407cf7d22d0c0d94cf20342b3b8f06f1d904e7 upstream.
    
    Ever since commit 2a9127fcf229 ("mm: rewrite wait_on_page_bit_common()
    logic") we've had some very occasional reports of BUG_ON(PageWriteback)
    in write_cache_pages(), which we thought we already fixed in commit
    073861ed77b6 ("mm: fix VM_BUG_ON(PageTail) and BUG_ON(PageWriteback)").
    
    But syzbot just reported another one, even with that commit in place.
    
    And it turns out that there's a simpler way to trigger the BUG_ON() than
    the one Hugh found with page re-use.  It all boils down to the fact that
    the page writeback is ostensibly serialized by the page lock, but that
    isn't actually really true.
    
    Yes, the people _setting_ writeback all do so under the page lock, but
    the actual clearing of the bit - and waking up any waiters - happens
    without any page lock.
    
    This gives us this fairly simple race condition:
    
      CPU1 = end previous writeback
      CPU2 = start new writeback under page lock
      CPU3 = write_cache_pages()
    
      CPU1          CPU2            CPU3
      ----          ----            ----
    
      end_page_writeback()
        test_clear_page_writeback(page)
        ... delayed...
    
                    lock_page();
                    set_page_writeback()
                    unlock_page()
    
                                    lock_page()
                                    wait_on_page_writeback();
    
        wake_up_page(page, PG_writeback);
        .. wakes up CPU3 ..
    
                                    BUG_ON(PageWriteback(page));
    
    where the BUG_ON() happens because we woke up the PG_writeback bit
    becasue of the _previous_ writeback, but a new one had already been
    started because the clearing of the bit wasn't actually atomic wrt the
    actual wakeup or serialized by the page lock.
    
    The reason this didn't use to happen was that the old logic in waiting
    on a page bit would just loop if it ever saw the bit set again.
    
    The nice proper fix would probably be to get rid of the whole "wait for
    writeback to clear, and then set it" logic in the writeback path, and
    replace it with an atomic "wait-to-set" (ie the same as we have for page
    locking: we set the page lock bit with a single "lock_page()", not with
    "wait for lock bit to clear and then set it").
    
    However, out current model for writeback is that the waiting for the
    writeback bit is done by the generic VFS code (ie write_cache_pages()),
    but the actual setting of the writeback bit is done much later by the
    filesystem ".writepages()" function.
    
    IOW, to make the writeback bit have that same kind of "wait-to-set"
    behavior as we have for page locking, we'd have to change our roughly
    ~50 different writeback functions.  Painful.
    
    Instead, just make "wait_on_page_writeback()" loop on the very unlikely
    situation that the PG_writeback bit is still set, basically re-instating
    the old behavior.  This is very non-optimal in case of contention, but
    since we only ever set the bit under the page lock, that situation is
    controlled.
    
    Reported-by: syzbot+2fc0712f8f8b8b8fa0ef@syzkaller.appspotmail.com
    Fixes: 2a9127fcf229 ("mm: rewrite wait_on_page_bit_common() logic")
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96e6724310f29d8ce8d7e78d4d98c53b27ca050f
Author: David Arcari <darcari@redhat.com>
Date:   Thu Jan 7 09:47:07 2021 -0500

    hwmon: (amd_energy) fix allocation of hwmon_channel_info config
    
    commit 84e261553e6f919bf0b4d65244599ab2b41f1da5 upstream.
    
    hwmon, specifically hwmon_num_channel_attrs, expects the config
    array in the hwmon_channel_info structure to be terminated by
    a zero entry.  amd_energy does not honor this convention.  As
    result, a KASAN warning is possible.  Fix this by adding an
    additional entry and setting it to zero.
    
    Fixes: 8abee9566b7e ("hwmon: Add amd_energy driver to report energy counters")
    
    Signed-off-by: David Arcari <darcari@redhat.com>
    Cc: Naveen Krishna Chatradhi <nchatrad@amd.com>
    Cc: Jean Delvare <jdelvare@suse.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: linux-kernel@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: David Arcari <darcari@redhat.com>
    Acked-by: Naveen Krishna Chatradhi <nchatrad@amd.com>
    Link: https://lore.kernel.org/r/20210107144707.6927-1-darcari@redhat.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f47b182241f3ec313bb0a743d720182713b1e3f
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 8 15:55:28 2021 +0100

    USB: serial: keyspan_pda: remove unused variable
    
    Remove an unused variable which was mistakingly left by commit
    37faf5061541 ("USB: serial: keyspan_pda: fix write-wakeup
    use-after-free") and only removed by a later change.
    
    This is needed to suppress a W=1 warning about the unused variable in
    the stable trees that the build bots triggers.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4b202cba3ab1a7a8b1ca92603931fba5e2032c3
Author: Eddie Hung <eddie.hung@mediatek.com>
Date:   Tue Dec 29 18:53:35 2020 +0800

    usb: gadget: configfs: Fix use-after-free issue with udc_name
    
    commit 64e6bbfff52db4bf6785fab9cffab850b2de6870 upstream.
    
    There is a use-after-free issue, if access udc_name
    in function gadget_dev_desc_UDC_store after another context
    free udc_name in function unregister_gadget.
    
    Context 1:
    gadget_dev_desc_UDC_store()->unregister_gadget()->
    free udc_name->set udc_name to NULL
    
    Context 2:
    gadget_dev_desc_UDC_show()-> access udc_name
    
    Call trace:
    dump_backtrace+0x0/0x340
    show_stack+0x14/0x1c
    dump_stack+0xe4/0x134
    print_address_description+0x78/0x478
    __kasan_report+0x270/0x2ec
    kasan_report+0x10/0x18
    __asan_report_load1_noabort+0x18/0x20
    string+0xf4/0x138
    vsnprintf+0x428/0x14d0
    sprintf+0xe4/0x12c
    gadget_dev_desc_UDC_show+0x54/0x64
    configfs_read_file+0x210/0x3a0
    __vfs_read+0xf0/0x49c
    vfs_read+0x130/0x2b4
    SyS_read+0x114/0x208
    el0_svc_naked+0x34/0x38
    
    Add mutex_lock to protect this kind of scenario.
    
    Signed-off-by: Eddie Hung <eddie.hung@mediatek.com>
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1609239215-21819-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed57b762f51bc8bf5d9a496785167cd4d444c587
Author: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
Date:   Tue Dec 29 14:44:43 2020 -0800

    usb: gadget: configfs: Preserve function ordering after bind failure
    
    commit 6cd0fe91387917be48e91385a572a69dfac2f3f7 upstream.
    
    When binding the ConfigFS gadget to a UDC, the functions in each
    configuration are added in list order. However, if usb_add_function()
    fails, the failed function is put back on its configuration's
    func_list and purge_configs_funcs() is called to further clean up.
    
    purge_configs_funcs() iterates over the configurations and functions
    in forward order, calling unbind() on each of the previously added
    functions. But after doing so, each function gets moved to the
    tail of the configuration's func_list. This results in reshuffling
    the original order of the functions within a configuration such
    that the failed function now appears first even though it may have
    originally appeared in the middle or even end of the list. At this
    point if the ConfigFS gadget is attempted to re-bind to the UDC,
    the functions will be added in a different order than intended,
    with the only recourse being to remove and relink the functions all
    over again.
    
    An example of this as follows:
    
    ln -s functions/mass_storage.0 configs/c.1
    ln -s functions/ncm.0 configs/c.1
    ln -s functions/ffs.adb configs/c.1     # oops, forgot to start adbd
    echo "<udc device>" > UDC               # fails
    start adbd
    echo "<udc device>" > UDC               # now succeeds, but...
                                            # bind order is
                                            # "ADB", mass_storage, ncm
    
    [30133.118289] configfs-gadget gadget: adding 'Mass Storage Function'/ffffff810af87200 to config 'c'/ffffff817d6a2520
    [30133.119875] configfs-gadget gadget: adding 'cdc_network'/ffffff80f48d1a00 to config 'c'/ffffff817d6a2520
    [30133.119974] using random self ethernet address
    [30133.120002] using random host ethernet address
    [30133.139604] usb0: HOST MAC 3e:27:46:ba:3e:26
    [30133.140015] usb0: MAC 6e:28:7e:42:66:6a
    [30133.140062] configfs-gadget gadget: adding 'Function FS Gadget'/ffffff80f3868438 to config 'c'/ffffff817d6a2520
    [30133.140081] configfs-gadget gadget: adding 'Function FS Gadget'/ffffff80f3868438 --> -19
    [30133.140098] configfs-gadget gadget: unbind function 'Mass Storage Function'/ffffff810af87200
    [30133.140119] configfs-gadget gadget: unbind function 'cdc_network'/ffffff80f48d1a00
    [30133.173201] configfs-gadget a600000.dwc3: failed to start g1: -19
    [30136.661933] init: starting service 'adbd'...
    [30136.700126] read descriptors
    [30136.700413] read strings
    [30138.574484] configfs-gadget gadget: adding 'Function FS Gadget'/ffffff80f3868438 to config 'c'/ffffff817d6a2520
    [30138.575497] configfs-gadget gadget: adding 'Mass Storage Function'/ffffff810af87200 to config 'c'/ffffff817d6a2520
    [30138.575554] configfs-gadget gadget: adding 'cdc_network'/ffffff80f48d1a00 to config 'c'/ffffff817d6a2520
    [30138.575631] using random self ethernet address
    [30138.575660] using random host ethernet address
    [30138.595338] usb0: HOST MAC 2e:cf:43:cd:ca:c8
    [30138.597160] usb0: MAC 6a:f0:9f:ee:82:a0
    [30138.791490] configfs-gadget gadget: super-speed config #1: c
    
    Fix this by reversing the iteration order of the functions in
    purge_config_funcs() when unbinding them, and adding them back to
    the config's func_list at the head instead of the tail. This
    ensures that we unbind and unwind back to the original list order.
    
    Fixes: 88af8bbe4ef7 ("usb: gadget: the start of the configfs interface")
    Signed-off-by: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20201229224443.31623-1-jackp@codeaurora.org
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ca9626a819ce772e688b589f7762a0978450bce
Author: Sriharsha Allenki <sallenki@codeaurora.org>
Date:   Wed Dec 2 18:32:20 2020 +0530

    usb: gadget: Fix spinlock lockup on usb_function_deactivate
    
    commit 5cc35c224a80aa5a5a539510ef049faf0d6ed181 upstream.
    
    There is a spinlock lockup as part of composite_disconnect
    when it tries to acquire cdev->lock as part of usb_gadget_deactivate.
    This is because the usb_gadget_deactivate is called from
    usb_function_deactivate with the same spinlock held.
    
    This would result in the below call stack and leads to stall.
    
    rcu: INFO: rcu_preempt detected stalls on CPUs/tasks:
    rcu:     3-...0: (1 GPs behind) idle=162/1/0x4000000000000000
    softirq=10819/10819 fqs=2356
     (detected by 2, t=5252 jiffies, g=20129, q=3770)
     Task dump for CPU 3:
     task:uvc-gadget_wlhe state:R  running task     stack:    0 pid:  674 ppid:
     636 flags:0x00000202
     Call trace:
      __switch_to+0xc0/0x170
      _raw_spin_lock_irqsave+0x84/0xb0
      composite_disconnect+0x28/0x78
      configfs_composite_disconnect+0x68/0x70
      usb_gadget_disconnect+0x10c/0x128
      usb_gadget_deactivate+0xd4/0x108
      usb_function_deactivate+0x6c/0x80
      uvc_function_disconnect+0x20/0x58
      uvc_v4l2_release+0x30/0x88
      v4l2_release+0xbc/0xf0
      __fput+0x7c/0x230
      ____fput+0x14/0x20
      task_work_run+0x88/0x140
      do_notify_resume+0x240/0x6f0
      work_pending+0x8/0x200
    
    Fix this by doing an unlock on cdev->lock before the usb_gadget_deactivate
    call from usb_function_deactivate.
    
    The same lockup can happen in the usb_gadget_activate path. Fix that path
    as well.
    
    Reported-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/linux-usb/20201102094936.GA29581@b29397-desktop/
    Tested-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201202130220.24926-1-sallenki@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c92e6831dc90cd692ebaca9a883295b53bee1d13
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 17 17:29:55 2020 +0800

    USB: gadget: legacy: fix return error code in acm_ms_bind()
    
    commit c91d3a6bcaa031f551ba29a496a8027b31289464 upstream.
    
    If usb_otg_descriptor_alloc() failed, it need return ENOMEM.
    
    Fixes: 578aa8a2b12c ("usb: gadget: acm_ms: allocate and init otg descriptor by otg capabilities")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201117092955.4102785-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cc6bf99c64d961da1a1ebb48620eae0f6ac4fbb
Author: Manish Narani <manish.narani@xilinx.com>
Date:   Tue Nov 17 12:43:35 2020 +0530

    usb: gadget: u_ether: Fix MTU size mismatch with RX packet size
    
    commit 0a88fa221ce911c331bf700d2214c5b2f77414d3 upstream.
    
    Fix the MTU size issue with RX packet size as the host sends the packet
    with extra bytes containing ethernet header. This causes failure when
    user sets the MTU size to the maximum i.e. 15412. In this case the
    ethernet packet received will be of length 15412 plus the ethernet header
    length. This patch fixes the issue where there is a check that RX packet
    length must not be more than max packet length.
    
    Fixes: bba787a860fa ("usb: gadget: ether: Allow jumbo frames")
    Signed-off-by: Manish Narani <manish.narani@xilinx.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1605597215-122027-1-git-send-email-manish.narani@xilinx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e698e1478be7c497c06b01099cd70a252d795810
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Thu Dec 10 10:01:48 2020 +0800

    usb: gadget: function: printer: Fix a memory leak for interface descriptor
    
    commit 2cc332e4ee4febcbb685e2962ad323fe4b3b750a upstream.
    
    When printer driver is loaded, the printer_func_bind function is called, in
    this function, the interface descriptor be allocated memory, if after that,
    the error occurred, the interface descriptor memory need to be free.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Link: https://lore.kernel.org/r/20201210020148.6691-1-qiang.zhang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4aa893e2e0dd320e88008895c9a3a47cc17895f
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Mon Dec 21 18:35:28 2020 +0100

    usb: gadget: f_uac2: reset wMaxPacketSize
    
    commit 9389044f27081d6ec77730c36d5bf9a1288bcda2 upstream.
    
    With commit 913e4a90b6f9 ("usb: gadget: f_uac2: finalize wMaxPacketSize according to bandwidth")
    wMaxPacketSize is computed dynamically but the value is never reset.
    
    Because of this, the actual maximum packet size can only decrease each time
    the audio gadget is instantiated.
    
    Reset the endpoint maximum packet size and mark wMaxPacketSize as dynamic
    to solve the problem.
    
    Fixes: 913e4a90b6f9 ("usb: gadget: f_uac2: finalize wMaxPacketSize according to bandwidth")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201221173531.215169-2-jbrunet@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7f2c25aa88e9667984982222c32c56400f98eb1
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Dec 30 11:20:44 2020 -0500

    USB: Gadget: dummy-hcd: Fix shift-out-of-bounds bug
    
    commit c318840fb2a42ce25febc95c4c19357acf1ae5ca upstream.
    
    The dummy-hcd driver was written under the assumption that all the
    parameters in URBs sent to its root hub would be valid.  With URBs
    sent from userspace via usbfs, that assumption can be violated.
    
    In particular, the driver doesn't fully check the port-feature values
    stored in the wValue entry of Clear-Port-Feature and Set-Port-Feature
    requests.  Values that are too large can cause the driver to perform
    an invalid left shift of more than 32 bits.  Ironically, two of those
    left shifts are unnecessary, because they implement Set-Port-Feature
    requests that hubs are not required to support, according to section
    11.24.2.13 of the USB-2.0 spec.
    
    This patch adds the appropriate checks for the port feature selector
    values and removes the unnecessary feature settings.  It also rejects
    requests to set the TEST feature or to set or clear the INDICATOR and
    C_OVERCURRENT features, as none of these are relevant to dummy-hcd's
    root-hub emulation.
    
    CC: <stable@vger.kernel.org>
    Reported-and-tested-by: syzbot+5925509f78293baa7331@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201230162044.GA727759@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cd6988fbfa57120943720976073abed6e62cda6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:42:17 2021 +0100

    usb: gadget: select CONFIG_CRC32
    
    commit d7889c2020e08caab0d7e36e947f642d91015bd0 upstream.
    
    Without crc32 support, this driver fails to link:
    
    arm-linux-gnueabi-ld: drivers/usb/gadget/function/f_eem.o: in function `eem_unwrap':
    f_eem.c:(.text+0x11cc): undefined reference to `crc32_le'
    arm-linux-gnueabi-ld: drivers/usb/gadget/function/f_ncm.o:f_ncm.c:(.text+0x1e40):
    more undefined references to `crc32_le' follow
    
    Fixes: 6d3865f9d41f ("usb: gadget: NCM: Add transmit multi-frame.")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210103214224.1996535-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88eaa6c077f8662d31fa4674a57ee1cf2adc606f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Dec 23 18:45:57 2020 +0100

    ALSA: usb-audio: Fix UBSAN warnings for MIDI jacks
    
    commit c06ccf3ebb7503706ea49fd248e709287ef385a3 upstream.
    
    The calculation of in_cables and out_cables bitmaps are done with the
    bit shift by the value from the descriptor, which is an arbitrary
    value, and can lead to UBSAN shift-out-of-bounds warnings.
    
    Fix it by filtering the bad descriptor values with the check of the
    upper bound 0x10 (the cable bitmaps are 16 bits).
    
    Reported-by: syzbot+92e45ae45543f89e8c88@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201223174557.10249-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a5b28c99dc45ee7bb16cd8e168e3bd561fc050d
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 4 15:53:02 2021 +0100

    USB: usblp: fix DMA to stack
    
    commit 020a1f453449294926ca548d8d5ca970926e8dfd upstream.
    
    Stack-allocated buffers cannot be used for DMA (on all architectures).
    
    Replace the HP-channel macro with a helper function that allocates a
    dedicated transfer buffer so that it can continue to be used with
    arguments from the stack.
    
    Note that the buffer is cleared on allocation as usblp_ctrl_msg()
    returns success also on short transfers (the buffer is only used for
    debugging).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210104145302.2087-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f7e97ffb4eb6413799f80a7af8595db534bec45
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Dec 14 11:30:53 2020 +0100

    USB: yurex: fix control-URB timeout handling
    
    commit 372c93131998c0622304bed118322d2a04489e63 upstream.
    
    Make sure to always cancel the control URB in write() so that it can be
    reused after a timeout or spurious CMD_ACK.
    
    Currently any further write requests after a timeout would fail after
    triggering a WARN() in usb_submit_urb() when attempting to submit the
    already active URB.
    
    Reported-by: syzbot+e87ebe0f7913f71f2ea5@syzkaller.appspotmail.com
    Fixes: 6bc235a2e24a ("USB: add driver for Meywa-Denki & Kayac YUREX")
    Cc: stable <stable@vger.kernel.org>     # 2.6.37
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 008689576a4e1c138c19fb8ca2ddebe29ab9337f
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Dec 30 16:25:34 2020 +0100

    USB: serial: option: add Quectel EM160R-GL
    
    commit d6c1ddd938d84a1adef7e19e8efc10e1b4df5034 upstream.
    
    New modem using ff/ff/30 for QCDM, ff/00/00 for  AT and NMEA,
    and ff/ff/ff for RMNET/QMI.
    
    T: Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 2 Spd=5000 MxCh= 0
    D: Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs= 1
    P: Vendor=2c7c ProdID=0620 Rev= 4.09
    S: Manufacturer=Quectel
    S: Product=EM160R-GL
    S: SerialNumber=e31cedc1
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E: Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=83(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=85(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=84(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=87(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=04(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E: Ad=88(I) Atr=03(Int.) MxPS= 8 Ivl=32ms
    E: Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    [ johan: add model comment ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3013ff766dad735b2b7ef482170c657c7076b0a9
Author: Daniel Palmer <daniel@0x0f.com>
Date:   Sun Dec 27 12:17:16 2020 +0900

    USB: serial: option: add LongSung M5710 module support
    
    commit 0e2d6795e8dbe91c2f5473564c6b25d11df3778b upstream.
    
    Add a device-id entry for the LongSung M5710 module.
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2df3 ProdID=9d03 Rev= 1.00
    S:  Manufacturer=Marvell
    S:  Product=Mobile Composite Device Bus
    S:  SerialNumber=<snip>
    C:* #Ifs= 5 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=e0(wlcon) Sub=01 Prot=03
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=e0(wlcon) Sub=01 Prot=03 Driver=rndis_host
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0c(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0b(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0a(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Daniel Palmer <daniel@0x0f.com>
    https://lore.kernel.org/r/20201227031716.1343300-1-daniel@0x0f.com
    [ johan: drop id defines, only bind to vendor class ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5410726d7def8e39b279f6b718c5412266bcc1df
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 4 15:50:07 2021 +0100

    USB: serial: iuu_phoenix: fix DMA from stack
    
    commit 54d0a3ab80f49f19ee916def62fe067596833403 upstream.
    
    Stack-allocated buffers cannot be used for DMA (on all architectures) so
    allocate the flush command buffer using kmalloc().
    
    Fixes: 60a8fc017103 ("USB: add iuu_phoenix driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.25
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 677503c72765c34e83095444c9a8fdc5ca33df7d
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Jan 4 20:07:15 2021 -0800

    usb: uas: Add PNY USB Portable SSD to unusual_uas
    
    commit 96ebc9c871d8a28fb22aa758dd9188a4732df482 upstream.
    
    Here's another variant PNY Pro Elite USB 3.1 Gen 2 portable SSD that
    hangs and doesn't respond to ATA_1x pass-through commands. If it doesn't
    support these commands, it should respond properly to the host. Add it
    to the unusual uas list to be able to move forward with other
    operations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/2edc7af892d0913bf06f5b35e49ec463f03d5ed8.1609819418.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91a6375b18361593dbe101f7a5bdb12279765b40
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Dec 28 23:13:09 2020 -0800

    usb: usbip: vhci_hcd: protect shift size
    
    commit 718bf42b119de652ebcc93655a1f33a9c0d04b3c upstream.
    
    Fix shift out-of-bounds in vhci_hcd.c:
    
      UBSAN: shift-out-of-bounds in ../drivers/usb/usbip/vhci_hcd.c:399:41
      shift exponent 768 is too large for 32-bit type 'int'
    
    Fixes: 03cd00d538a6 ("usbip: vhci-hcd: Set the vhci structure up to work")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: syzbot+297d20e437b79283bf6d@syzkaller.appspotmail.com
    Cc: Yuyang Du <yuyang.du@intel.com>
    Cc: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: linux-usb@vger.kernel.org
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201229071309.18418-1-rdunlap@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cee536f1a5c77c016f373b5c65526b91103eacba
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Tue Dec 15 20:31:47 2020 +0100

    USB: xhci: fix U1/U2 handling for hardware with XHCI_INTEL_HOST quirk set
    
    commit 5d5323a6f3625f101dbfa94ba3ef7706cce38760 upstream.
    
    The commit 0472bf06c6fd ("xhci: Prevent U1/U2 link pm states if exit
    latency is too long") was constraining the xhci code not to allow U1/U2
    sleep states if the latency to wake up from the U-states reached the
    service interval of an periodic endpoint. This fix was not taking into
    account that in case the quirk XHCI_INTEL_HOST is set, the wakeup time
    will be calculated and configured differently.
    
    It checks for u1_params.mel/u2_params.mel as a limit. But the code could
    decide to write another MEL into the hardware. This leads to broken
    cases where not enough bandwidth is available for other devices:
    
    usb 1-2: can't set config #1, error -28
    
    This patch is fixing that case by checking for timeout_ns after the
    wakeup time was calculated depending on the quirks.
    
    Fixes: 0472bf06c6fd ("xhci: Prevent U1/U2 link pm states if exit latency is too long")
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201215193147.11738-1-m.grzeschik@pengutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4485bdb99624602d3486fa7bbb6880b76e33dd0f
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Nov 17 09:14:30 2020 +0800

    usb: chipidea: ci_hdrc_imx: add missing put_device() call in usbmisc_get_init_data()
    
    commit 83a43ff80a566de8718dfc6565545a0080ec1fb5 upstream.
    
    if of_find_device_by_node() succeed, usbmisc_get_init_data() doesn't have
    a corresponding put_device(). Thus add put_device() to fix the exception
    handling for this function implementation.
    
    Fixes: ef12da914ed6 ("usb: chipidea: imx: properly check for usbmisc")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201117011430.642589-1-yukuai3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 150a9c163c3d5563897b968d1e59cc224af048ed
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu Dec 10 11:50:08 2020 +0300

    usb: dwc3: ulpi: Fix USB2.0 HS/FS/LS PHY suspend regression
    
    commit e5f4ca3fce90a37b23a77bfcc86800d484a80514 upstream.
    
    First of all the commit e0082698b689 ("usb: dwc3: ulpi: conditionally
    resume ULPI PHY") introduced the Suspend USB2.0 HS/FS/LS PHY regression,
    as by design of the fix any attempt to read/write from/to the PHY control
    registers will completely disable the PHY suspension, which consequently
    will increase the USB bus power consumption. Secondly the fix won't work
    well for the very first attempt of the ULPI PHY control registers IO,
    because after disabling the USB2.0 PHY suspension functionality it will
    still take some time for the bus to resume from the sleep state if one has
    been reached before it. So the very first PHY register read/write
    operation will take more time than the busy-loop provides and the IO
    timeout error might be returned anyway.
    
    Here we suggest to fix the denoted problems in the following way. First of
    all let's not disable the Suspend USB2.0 HS/FS/LS PHY functionality so to
    make the controller and the USB2.0 bus more power efficient. Secondly
    instead of that we'll extend the PHY IO op wait procedure with 1 - 1.2 ms
    sleep if the PHY suspension is enabled (1ms should be enough as by LPM
    specification it is at most how long it takes for the USB2.0 bus to resume
    from L1 (Sleep) state). Finally in case if the USB2.0 PHY suspension
    functionality has been disabled on the DWC USB3 controller setup procedure
    we'll compensate the USB bus resume process latency by extending the
    busy-loop attempts counter.
    
    Fixes: e0082698b689 ("usb: dwc3: ulpi: conditionally resume ULPI PHY")
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Link: https://lore.kernel.org/r/20201210085008.13264-4-Sergey.Semin@baikalelectronics.ru
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97abe6663fa35c40edb2efebdc3aea8bad71086c
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu Dec 10 11:50:07 2020 +0300

    usb: dwc3: ulpi: Replace CPU-based busyloop with Protocol-based one
    
    commit fca3f138105727c3a22edda32d02f91ce1bf11c9 upstream.
    
    Originally the procedure of the ULPI transaction finish detection has been
    developed as a simple busy-loop with just decrementing counter and no
    delays. It's wrong since on different systems the loop will take a
    different time to complete. So if the system bus and CPU are fast enough
    to overtake the ULPI bus and the companion PHY reaction, then we'll get to
    take a false timeout error. Fix this by converting the busy-loop procedure
    to take the standard bus speed, address value and the registers access
    mode into account for the busy-loop delay calculation.
    
    Here is the way the fix works. It's known that the ULPI bus is clocked
    with 60MHz signal. In accordance with [1] the ULPI bus protocol is created
    so to spend 5 and 6 clock periods for immediate register write and read
    operations respectively, and 6 and 7 clock periods - for the extended
    register writes and reads. Based on that we can easily pre-calculate the
    time which will be needed for the controller to perform a requested IO
    operation. Note we'll still preserve the attempts counter in case if the
    DWC USB3 controller has got some internals delays.
    
    [1] UTMI+ Low Pin Interface (ULPI) Specification, Revision 1.1,
        October 20, 2004, pp. 30 - 36.
    
    Fixes: 88bc9d194ff6 ("usb: dwc3: add ULPI interface support")
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Link: https://lore.kernel.org/r/20201210085008.13264-3-Sergey.Semin@baikalelectronics.ru
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b51963e9f5622ca0eeaf9752d92345dfa1a14ec5
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu Dec 10 11:50:06 2020 +0300

    usb: dwc3: ulpi: Use VStsDone to detect PHY regs access completion
    
    commit ce722da66d3e9384aa2de9d33d584ee154e5e157 upstream.
    
    In accordance with [1] the DWC_usb3 core sets the GUSB2PHYACCn.VStsDone
    bit when the PHY vendor control access is done and clears it when the
    application initiates a new transaction. The doc doesn't say anything
    about the GUSB2PHYACCn.VStsBsy flag serving for the same purpose. Moreover
    we've discovered that the VStsBsy flag can be cleared before the VStsDone
    bit. So using the former as a signal of the PHY control registers
    completion might be dangerous. Let's have the VStsDone flag utilized
    instead then.
    
    [1] Synopsys DesignWare Cores SuperSpeed USB 3.0 xHCI Host Controller
        Databook, 2.70a, December 2013, p.388
    
    Fixes: 88bc9d194ff6 ("usb: dwc3: add ULPI interface support")
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Link: https://lore.kernel.org/r/20201210085008.13264-2-Sergey.Semin@baikalelectronics.ru
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8907a10c8ffaaa830358b08f97da55e856e9b093
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Jan 4 22:42:39 2021 -0800

    usb: dwc3: gadget: Clear wait flag on dequeue
    
    commit a5c7682aaaa10e42928d73de1c9e1e02d2b14c2e upstream.
    
    If an active transfer is dequeued, then the endpoint is freed to start a
    new transfer. Make sure to clear the endpoint's transfer wait flag for
    this case.
    
    Fixes: e0d19563eb6c ("usb: dwc3: gadget: Wait for transfer completion")
    Cc: stable@vger.kernel.org
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/b81cd5b5281cfbfdadb002c4bcf5c9be7c017cfd.1609828485.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd8363fbca508616811f8a94006b09c66c094107
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Tue Dec 29 15:00:37 2020 -0800

    usb: dwc3: gadget: Restart DWC3 gadget when enabling pullup
    
    commit a1383b3537a7bea1c213baa7878ccc4ecf4413b5 upstream.
    
    usb_gadget_deactivate/usb_gadget_activate does not execute the UDC start
    operation, which may leave EP0 disabled and event IRQs disabled when
    re-activating the function. Move the enabling/disabling of USB EP0 and
    device event IRQs to be performed in the pullup routine.
    
    Fixes: ae7e86108b12 ("usb: dwc3: Stop active transfers before halting the controller")
    Tested-by: Michael Tretter <m.tretter@pengutronix.de>
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Michael Tretter <m.tretter@pengutronix.de>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1609282837-21666-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 906b0510dde58d0eacad76b1bcb1264bb634f95a
Author: Zheng Zengkai <zhengzengkai@huawei.com>
Date:   Tue Dec 15 10:54:59 2020 +0800

    usb: dwc3: meson-g12a: disable clk on error handling path in probe
    
    commit a5ada3dfe6a20f41f91448b9034a1ef8da3dc87d upstream.
    
    dwc3_meson_g12a_probe() does not invoke clk_bulk_disable_unprepare()
    on one error handling path. This patch fixes that.
    
    Fixes: 347052e3bf1b ("usb: dwc3: meson-g12a: fix USB2 PHY initialization on G12A and A1 SoCs")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20201215025459.91794-1-zhengzengkai@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a5ce1e75c77851022e82fa94d324ca3e61e9e0d
Author: Madhusudanarao Amara <madhusudanarao.amara@intel.com>
Date:   Wed Dec 16 19:39:18 2020 +0530

    usb: typec: intel_pmc_mux: Configure HPD first for HPD+IRQ request
    
    commit 0f041b8592daaaea46e91a8ebb3b47e6e0171fd8 upstream.
    
    Warm reboot scenarios some times type C Mux driver gets Mux configuration
    request as HPD=1,IRQ=1. In that scenario typeC Mux driver need to configure
    Mux as follows as per IOM requirement:
     (1). Confgiure Mux HPD = 1, IRQ = 0
     (2). Configure Mux with HPD = 1, IRQ = 1
    
    IOM expects TypeC Mux configuration as follows:
     (1). HPD=1, IRQ=0
     (2). HPD=1, IRQ=1
    if IOM gets mux config request (2) without configuring (1), it will ignore
    the request. The impact of this is there is no DP_alt mode display.
    
    Fixes: 43d596e32276 ("usb: typec: intel_pmc_mux: Check the port status before connect")
    Cc: stable@vger.kernel.org
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Madhusudanarao Amara <madhusudanarao.amara@intel.com>
    Link: https://lore.kernel.org/r/20201216140918.49197-1-madhusudanarao.amara@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 340db7c0a6c0338c9834b63236a16f071c381012
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Sun Dec 20 00:25:53 2020 +0900

    USB: cdc-wdm: Fix use after free in service_outstanding_interrupt().
    
    commit 5e5ff0b4b6bcb4d17b7a26ec8bcfc7dd4651684f upstream.
    
    syzbot is reporting UAF at usb_submit_urb() [1], for
    service_outstanding_interrupt() is not checking WDM_DISCONNECTING
    before calling usb_submit_urb(). Close the race by doing same checks
    wdm_read() does upon retry.
    
    Also, while wdm_read() checks WDM_DISCONNECTING with desc->rlock held,
    service_interrupt_work() does not hold desc->rlock. Thus, it is possible
    that usb_submit_urb() is called from service_outstanding_interrupt() from
    service_interrupt_work() after WDM_DISCONNECTING was set and kill_urbs()
     from wdm_disconnect() completed. Thus, move kill_urbs() in
    wdm_disconnect() to after cancel_work_sync() (which makes sure that
    service_interrupt_work() is no longer running) completed.
    
    Although it seems to be safe to dereference desc->intf->dev in
    service_outstanding_interrupt() even if WDM_DISCONNECTING was already set
    because desc->rlock or cancel_work_sync() prevents wdm_disconnect() from
    reaching list_del() before service_outstanding_interrupt() completes,
    let's not emit error message if WDM_DISCONNECTING is set by
    wdm_disconnect() while usb_submit_urb() is in progress.
    
    [1] https://syzkaller.appspot.com/bug?extid=9e04e2df4a32fb661daf
    
    Reported-by: syzbot <syzbot+9e04e2df4a32fb661daf@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/620e2ee0-b9a3-dbda-a25b-a93e0ed03ec5@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1452fefc4c295e1210fc729f427120429aa1be15
Author: Sean Young <sean@mess.org>
Date:   Sun Dec 27 13:45:02 2020 +0000

    USB: cdc-acm: blacklist another IR Droid device
    
    commit 0ffc76539e6e8d28114f95ac25c167c37b5191b3 upstream.
    
    This device is supported by the IR Toy driver.
    
    Reported-by: Georgi Bakalski <georgi.bakalski@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201227134502.4548-2-sean@mess.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b55debd08b8f0db18c4a8b6e0fdc489a650a668b
Author: taehyun.cho <taehyun.cho@samsung.com>
Date:   Thu Jan 7 00:46:25 2021 +0900

    usb: gadget: enable super speed plus
    
    commit e2459108b5a0604c4b472cae2b3cb8d3444c77fb upstream.
    
    Enable Super speed plus in configfs to support USB3.1 Gen2.
    This ensures that when a USB gadget is plugged in, it is
    enumerated as Gen 2 and connected at 10 Gbps if the host and
    cable are capable of it.
    
    Many in-tree gadget functions (fs, midi, acm, ncm, mass_storage,
    etc.) already have SuperSpeed Plus support.
    
    Tested: plugged gadget into Linux host and saw:
    [284907.385986] usb 8-2: new SuperSpeedPlus Gen 2 USB device number 3 using xhci_hcd
    
    Tested-by: Lorenzo Colitti <lorenzo@google.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: taehyun.cho <taehyun.cho@samsung.com>
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Link: https://lore.kernel.org/r/20210106154625.2801030-1-lorenzo@google.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22f56c63d50e029cb47631af26ed71f8e0f8db49
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Dec 13 16:35:13 2020 +0100

    staging: mt7621-dma: Fix a resource leak in an error handling path
    
    commit d887d6104adeb94d1b926936ea21f07367f0ff9f upstream.
    
    If an error occurs after calling 'mtk_hsdma_init()', it must be undone by
    a corresponding call to 'mtk_hsdma_uninit()' as already done in the
    remove function.
    
    Fixes: 0853c7a53eb3 ("staging: mt7621-dma: ralink: add rt2880 dma engine")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201213153513.138723-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8c9bb1393315e4351055fe5be19051b105eb014
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 2 09:43:49 2020 +0300

    Staging: comedi: Return -EFAULT if copy_to_user() fails
    
    commit cab36da4bf1a35739b091b73714a39a1bbd02b05 upstream.
    
    Return -EFAULT on error instead of the number of bytes remaining to be
    copied.
    
    Fixes: bac42fb21259 ("comedi: get rid of compat_alloc_user_space() mess in COMEDI_CMD{,TEST} compat")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/X8c3pfwFy2jpy4BP@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb5a170e979e7d1b15185c9943c546bda2bc6445
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Jan 4 13:59:53 2021 -0700

    powerpc: Handle .text.{hot,unlikely}.* in linker script
    
    commit 3ce47d95b7346dcafd9bed3556a8d072cb2b8571 upstream.
    
    Commit eff8728fe698 ("vmlinux.lds.h: Add PGO and AutoFDO input
    sections") added ".text.unlikely.*" and ".text.hot.*" due to an LLVM
    change [1].
    
    After another LLVM change [2], these sections are seen in some PowerPC
    builds, where there is a orphan section warning then build failure:
    
    $ make -skj"$(nproc)" \
           ARCH=powerpc CROSS_COMPILE=powerpc64le-linux-gnu- LLVM=1 O=out \
           distclean powernv_defconfig zImage.epapr
    ld.lld: warning: kernel/built-in.a(panic.o):(.text.unlikely.) is being placed in '.text.unlikely.'
    ...
    ld.lld: warning: address (0xc000000000009314) of section .text is not a multiple of alignment (256)
    ...
    ERROR: start_text address is c000000000009400, should be c000000000008000
    ERROR: try to enable LD_HEAD_STUB_CATCH config option
    ERROR: see comments in arch/powerpc/tools/head_check.sh
    ...
    
    Explicitly handle these sections like in the main linker script so
    there is no more build failure.
    
    [1]: https://reviews.llvm.org/D79600
    [2]: https://reviews.llvm.org/D92493
    
    Fixes: 83a092cf95f2 ("powerpc: Link warning for orphan sections")
    Cc: stable@vger.kernel.org
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1218
    Link: https://lore.kernel.org/r/20210104205952.1399409-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80a364421c95fefd43c9a310d86e01e0febc0e0c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 4 09:01:36 2020 +0100

    crypto: asym_tpm: correct zero out potential secrets
    
    commit f93274ef0fe972c120c96b3207f8fce376231a60 upstream.
    
    The function derive_pub_key() should be calling memzero_explicit()
    instead of memset() in case the complier decides to optimize away the
    call to memset() because it "knows" no one is going to touch the memory
    anymore.
    
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Ilil Blum Shem-Tov <ilil.blum.shem-tov@intel.com>
    Tested-by: Ilil Blum Shem-Tov <ilil.blum.shem-tov@intel.com>
    Link: https://lore.kernel.org/r/X8ns4AfwjKudpyfe@kroah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f20005ab271c93b5c26736aa3fcf43aacddab39
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sat Jan 2 14:59:09 2021 +0100

    crypto: ecdh - avoid buffer overflow in ecdh_set_secret()
    
    commit 0aa171e9b267ce7c52d3a3df7bc9c1fc0203dec5 upstream.
    
    Pavel reports that commit 17858b140bf4 ("crypto: ecdh - avoid unaligned
    accesses in ecdh_set_secret()") fixes one problem but introduces another:
    the unconditional memcpy() introduced by that commit may overflow the
    target buffer if the source data is invalid, which could be the result of
    intentional tampering.
    
    So check params.key_size explicitly against the size of the target buffer
    before validating the key further.
    
    Fixes: 17858b140bf4 ("crypto: ecdh - avoid unaligned accesses in ecdh_set_secret()")
    Reported-by: Pavel Machek <pavel@denx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d55d15a332ec651ccb49c42a8a10c03447fdf418
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Dec 8 21:29:51 2020 -0800

    scsi: block: Do not accept any requests while suspended
    
    [ Upstream commit 52abca64fd9410ea6c9a3a74eab25663b403d7da ]
    
    blk_queue_enter() accepts BLK_MQ_REQ_PM requests independent of the runtime
    power management state. Now that SCSI domain validation no longer depends
    on this behavior, modify the behavior of blk_queue_enter() as follows:
    
       - Do not accept any requests while suspended.
    
       - Only process power management requests while suspending or resuming.
    
    Submitting BLK_MQ_REQ_PM requests to a device that is runtime suspended
    causes runtime-suspended devices not to resume as they should. The request
    which should cause a runtime resume instead gets issued directly, without
    resuming the device first. Of course the device can't handle it properly,
    the I/O fails, and the device remains suspended.
    
    The problem is fixed by checking that the queue's runtime-PM status isn't
    RPM_SUSPENDED before allowing a request to be issued, and queuing a
    runtime-resume request if it is.  In particular, the inline
    blk_pm_request_resume() routine is renamed blk_pm_resume_queue() and the
    code is unified by merging the surrounding checks into the routine.  If the
    queue isn't set up for runtime PM, or there currently is no restriction on
    allowed requests, the request is allowed.  Likewise if the BLK_MQ_REQ_PM
    flag is set and the status isn't RPM_SUSPENDED.  Otherwise a runtime resume
    is queued and the request is blocked until conditions are more suitable.
    
    [ bvanassche: modified commit message and removed Cc: stable because
      without the previous patches from this series this patch would break
      parallel SCSI domain validation + introduced queue_rpm_status() ]
    
    Link: https://lore.kernel.org/r/20201209052951.16136-9-bvanassche@acm.org
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reported-and-tested-by: Martin Kepplinger <martin.kepplinger@puri.sm>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 782c9ef2ac059a25d6afbac344319574414258db
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:50 2020 -0800

    scsi: block: Remove RQF_PREEMPT and BLK_MQ_REQ_PREEMPT
    
    [ Upstream commit a4d34da715e3cb7e0741fe603dcd511bed067e00 ]
    
    Remove flag RQF_PREEMPT and BLK_MQ_REQ_PREEMPT since these are no longer
    used by any kernel code.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-8-bvanassche@acm.org
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Martin Kepplinger <martin.kepplinger@puri.sm>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit faa613d033f334fa6947d14a7534a5ce2138c019
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Nov 22 13:17:25 2020 +0100

    Bluetooth: revert: hci_h5: close serdev device and free hu in h5_close
    
    commit 5c3b5796866f85354a5ce76a28f8ffba0dcefc7e upstream.
    
    There have been multiple revisions of the patch fix the h5->rx_skb
    leak. Accidentally the first revision (which is buggy) and v5 have
    both been merged:
    
    v1 commit 70f259a3f427 ("Bluetooth: hci_h5: close serdev device and free
    hu in h5_close");
    v5 commit 855af2d74c87 ("Bluetooth: hci_h5: fix memory leak in h5_close")
    
    The correct v5 makes changes slightly higher up in the h5_close()
    function, which allowed both versions to get merged without conflict.
    
    The changes from v1 unconditionally frees the h5 data struct, this
    is wrong because in the serdev enumeration case the memory is
    allocated in h5_serdev_probe() like this:
    
            h5 = devm_kzalloc(dev, sizeof(*h5), GFP_KERNEL);
    
    So its lifetime is tied to the lifetime of the driver being bound
    to the serdev and it is automatically freed when the driver gets
    unbound. In the serdev case the same h5 struct is re-used over
    h5_close() and h5_open() calls and thus MUST not be free-ed in
    h5_close().
    
    The serdev_device_close() added to h5_close() is incorrect in the
    same way, serdev_device_close() is called on driver unbound too and
    also MUST no be called from h5_close().
    
    This reverts the changes made by merging v1 of the patch, so that
    just the changes of the correct v5 remain.
    
    Cc: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ca425885bb74e8b286308707c067aaabc6f4fce
Author: Dominique Martinet <asmadeus@codewreck.org>
Date:   Tue Dec 1 14:17:30 2020 +0100

    kbuild: don't hardcode depmod path
    
    commit 436e980e2ed526832de822cbf13c317a458b78e1 upstream.
    
    depmod is not guaranteed to be in /sbin, just let make look for
    it in the path like all the other invoked programs
    
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5383432d92c76054470bdc562fb26f237befc13
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Nov 17 08:58:35 2020 -0800

    scsi: ufs: Clear UAC for FFU and RPMB LUNs
    
    [ Upstream commit 4f3e900b628226011a5f71c19e53b175c014eb58 ]
    
    In order to conduct FFU or RPMB operations, UFS needs to clear UNIT
    ATTENTION condition. Clear it explicitly so that we get no failures during
    initialization.
    
    Link: https://lore.kernel.org/r/20201117165839.1643377-4-jaegeuk@kernel.org
    Signed-off-by: Jaegeuk Kim <jaegeuk@google.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43dee885bead5af6d509d8b2a3afb35a7aeaa606
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 28 11:40:22 2020 -0800

    depmod: handle the case of /sbin/depmod without /sbin in PATH
    
    [ Upstream commit cedd1862be7e666be87ec824dabc6a2b05618f36 ]
    
    Commit 436e980e2ed5 ("kbuild: don't hardcode depmod path") stopped
    hard-coding the path of depmod, but in the process caused trouble for
    distributions that had that /sbin location, but didn't have it in the
    PATH (generally because /sbin is limited to the super-user path).
    
    Work around it for now by just adding /sbin to the end of PATH in the
    depmod.sh script.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8532d3ec57e55e7df3c1f04fcf1b67d7610cb69c
Author: Huang Shijie <sjhuang@iluvatar.ai>
Date:   Tue Dec 29 15:14:58 2020 -0800

    lib/genalloc: fix the overflow when size is too big
    
    [ Upstream commit 36845663843fc59c5d794e3dc0641472e3e572da ]
    
    Some graphic card has very big memory on chip, such as 32G bytes.
    
    In the following case, it will cause overflow:
    
        pool = gen_pool_create(PAGE_SHIFT, NUMA_NO_NODE);
        ret = gen_pool_add(pool, 0x1000000, SZ_32G, NUMA_NO_NODE);
    
        va = gen_pool_alloc(pool, SZ_4G);
    
    The overflow occurs in gen_pool_alloc_algo_owner():
    
                    ....
                    size = nbits << order;
                    ....
    
    The @nbits is "int" type, so it will overflow.
    Then the gen_pool_avail() will return the wrong value.
    
    This patch converts some "int" to "unsigned long", and
    changes the compare code in while.
    
    Link: https://lkml.kernel.org/r/20201229060657.3389-1-sjhuang@iluvatar.ai
    Signed-off-by: Huang Shijie <sjhuang@iluvatar.ai>
    Reported-by: Shi Jiasheng <jiasheng.shi@iluvatar.ai>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2179bae04b12532812e7c9eb9cc5fa6d4131e577
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Dec 29 15:14:49 2020 -0800

    local64.h: make <asm/local64.h> mandatory
    
    [ Upstream commit 87dbc209ea04645fd2351981f09eff5d23f8e2e9 ]
    
    Make <asm-generic/local64.h> mandatory in include/asm-generic/Kbuild and
    remove all arch/*/include/asm/local64.h arch-specific files since they
    only #include <asm-generic/local64.h>.
    
    This fixes build errors on arch/c6x/ and arch/nios2/ for
    block/blk-iocost.c.
    
    Build-tested on 21 of 25 arch-es.  (tools problems on the others)
    
    Yes, we could even rename <asm-generic/local64.h> to
    <linux/local64.h> and change all #includes to use
    <linux/local64.h> instead.
    
    Link: https://lkml.kernel.org/r/20201227024446.17018-1-rdunlap@infradead.org
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Suggested-by: Christoph Hellwig <hch@infradead.org>
    Reviewed-by: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Ley Foon Tan <ley.foon.tan@intel.com>
    Cc: Mark Salter <msalter@redhat.com>
    Cc: Aurelien Jacquiot <jacquiot.aurelien@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 271822bbf9fea586aabdcd3b10b303837863ccce
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:49 2020 -0800

    scsi: core: Only process PM requests if rpm_status != RPM_ACTIVE
    
    [ Upstream commit e6044f714b256259df9611ff49af433e5411c5c8 ]
    
    Instead of submitting all SCSI commands submitted with scsi_execute() to a
    SCSI device if rpm_status != RPM_ACTIVE, only submit RQF_PM (power
    management requests) if rpm_status != RPM_ACTIVE. This patch makes the SCSI
    core handle the runtime power management status (rpm_status) as it should
    be handled.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-7-bvanassche@acm.org
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Martin Kepplinger <martin.kepplinger@puri.sm>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a97d55de10aa7d75eca047adeaaee3a11cd64a09
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:48 2020 -0800

    scsi: scsi_transport_spi: Set RQF_PM for domain validation commands
    
    [ Upstream commit cfefd9f8240a7b9fdd96fcd54cb029870b6d8d88 ]
    
    Disable runtime power management during domain validation. Since a later
    patch removes RQF_PREEMPT, set RQF_PM for domain validation commands such
    that these are executed in the quiesced SCSI device state.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-6-bvanassche@acm.org
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Cc: Woody Suwalski <terraluna977@gmail.com>
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Stan Johnson <userm57@yahoo.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60fb6a8d782b981a1304fbab52b7f5f1b4828c04
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:47 2020 -0800

    scsi: ide: Mark power management requests with RQF_PM instead of RQF_PREEMPT
    
    [ Upstream commit 5ae65383fc7633e0247c31b0c8bf0e6ea63b95a3 ]
    
    This is another step that prepares for the removal of RQF_PREEMPT.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-5-bvanassche@acm.org
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d8b9f991de7c86fe64b09efedff75562036ba0e
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:46 2020 -0800

    scsi: ide: Do not set the RQF_PREEMPT flag for sense requests
    
    [ Upstream commit 96d86e6a80a3ab9aff81d12f9f1f2a0da2917d38 ]
    
    RQF_PREEMPT is used for two different purposes in the legacy IDE code:
    
     1. To mark power management requests.
    
     2. To mark requests that should preempt another request. An (old)
        explanation of that feature is as follows: "The IDE driver in the Linux
        kernel normally uses a series of busywait delays during its
        initialization. When the driver executes these busywaits, the kernel
        does nothing for the duration of the wait. The time spent in these
        waits could be used for other initialization activities, if they could
        be run concurrently with these waits.
    
        More specifically, busywait-style delays such as udelay() in module
        init functions inhibit kernel preemption because the Big Kernel Lock is
        held, while yielding APIs such as schedule_timeout() allow
        preemption. This is true because the kernel handles the BKL specially
        and releases and reacquires it across reschedules allowed by the
        current thread.
    
        This IDE-preempt specification requires that the driver eliminate these
        busywaits and replace them with a mechanism that allows other work to
        proceed while the IDE driver is initializing."
    
    Since I haven't found an implementation of (2), do not set the PREEMPT flag
    for sense requests. This patch causes sense requests to be postponed while
    a drive is suspended instead of being submitted to ide_queue_rq().
    
    If it would ever be necessary to restore the IDE PREEMPT functionality,
    that can be done by introducing a new flag in struct ide_request.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-4-bvanassche@acm.org
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ed46b329d4e62a1d0c7b17361c0e364eaf4a9da
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:45 2020 -0800

    scsi: block: Introduce BLK_MQ_REQ_PM
    
    [ Upstream commit 0854bcdcdec26aecdc92c303816f349ee1fba2bc ]
    
    Introduce the BLK_MQ_REQ_PM flag. This flag makes the request allocation
    functions set RQF_PM. This is the first step towards removing
    BLK_MQ_REQ_PREEMPT.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-3-bvanassche@acm.org
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Can Guo <cang@codeaurora.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bdd912c724e48f49a3f70fb6a6e6b28918d8fb1
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 7 10:31:20 2020 +0200

    scsi: ufs-pci: Enable UFSHCD_CAP_RPM_AUTOSUSPEND for Intel controllers
    
    [ Upstream commit dd78bdb6f810bdcb173b42379af558c676c8e0aa ]
    
    Enable runtime PM auto-suspend by default for Intel host controllers.
    
    Link: https://lore.kernel.org/r/20201207083120.26732-5-adrian.hunter@intel.com
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a1be8e3806e5629ddf4593f9dbdcf22f6a1bec9
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 7 10:31:19 2020 +0200

    scsi: ufs-pci: Fix recovery from hibernate exit errors for Intel controllers
    
    [ Upstream commit 044d5bda7117891d6d0d56f2f807b7b11e120abd ]
    
    Intel controllers can end up in an unrecoverable state after a hibernate
    exit error unless a full reset and restore is done before anything else.
    Force that to happen.
    
    Link: https://lore.kernel.org/r/20201207083120.26732-4-adrian.hunter@intel.com
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46e4355836104706853819244adf21ae1e3cd621
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 7 10:31:18 2020 +0200

    scsi: ufs-pci: Ensure UFS device is in PowerDown mode for suspend-to-disk ->poweroff()
    
    [ Upstream commit af423534d2de86cd0db729a5ac41f056ca8717de ]
    
    The expectation for suspend-to-disk is that devices will be powered-off, so
    the UFS device should be put in PowerDown mode. If spm_lvl is not 5, then
    that will not happen. Change the pm callbacks to force spm_lvl 5 for
    suspend-to-disk poweroff.
    
    Link: https://lore.kernel.org/r/20201207083120.26732-3-adrian.hunter@intel.com
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20e1aec964ea52b50de714b00436d3e6e437fe3a
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 7 10:31:17 2020 +0200

    scsi: ufs-pci: Fix restore from S4 for Intel controllers
    
    [ Upstream commit c763729a10e538d997744317cf4a1c4f25266066 ]
    
    Currently, ufshcd-pci is the only UFS driver with support for
    suspend-to-disk PM callbacks (i.e. freeze/thaw/restore/poweroff). These
    callbacks are set by the macro SET_SYSTEM_SLEEP_PM_OPS to the same
    functions as system suspend/resume. That will work with spm_lvl 5 because
    spm_lvl 5 will result in a full restore for the ->restore() callback.  In
    the absence of a full restore, the host controller registers will have
    values set up by the restore kernel (the kernel that boots and loads the
    restore image) which are not necessarily the same. However it turns out,
    the only registers that sometimes need restore are the base address
    registers. This has gone un-noticed because, depending on IOMMU settings,
    the kernel can end up allocating the same addresses every time.
    
    For Intel controllers, an spm_lvl other than 5 can be used, so to support
    S4 (suspend-to-disk) with spm_lvl other than 5, restore the base address
    registers.
    
    Link: https://lore.kernel.org/r/20201207083120.26732-2-adrian.hunter@intel.com
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42b464fb10ff0693e60a03dcc2fe46fbff4bb7ea
Author: Bean Huo <beanhuo@micron.com>
Date:   Mon Dec 7 20:01:37 2020 +0100

    scsi: ufs: Fix wrong print message in dev_err()
    
    [ Upstream commit 1fa0570002e3f66db9b58c32c60de4183b857a19 ]
    
    Change dev_err() print message from "dme-reset" to "dme_enable" in function
    ufshcd_dme_enable().
    
    Link: https://lore.kernel.org/r/20201207190137.6858-3-huobean@gmail.com
    Acked-by: Alim Akhtar <alim.akhtar@samsung.com>
    Acked-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfec7dc891d7f1c336c16b3198c950fcd31607bc
Author: Yunfeng Ye <yeyunfeng@huawei.com>
Date:   Thu Nov 19 14:21:25 2020 +0800

    workqueue: Kick a worker based on the actual activation of delayed works
    
    [ Upstream commit 01341fbd0d8d4e717fc1231cdffe00343088ce0b ]
    
    In realtime scenario, We do not want to have interference on the
    isolated cpu cores. but when invoking alloc_workqueue() for percpu wq
    on the housekeeping cpu, it kick a kworker on the isolated cpu.
    
      alloc_workqueue
        pwq_adjust_max_active
          wake_up_worker
    
    The comment in pwq_adjust_max_active() said:
      "Need to kick a worker after thawed or an unbound wq's
       max_active is bumped"
    
    So it is unnecessary to kick a kworker for percpu's wq when invoking
    alloc_workqueue(). this patch only kick a worker based on the actual
    activation of delayed works.
    
    Signed-off-by: Yunfeng Ye <yeyunfeng@huawei.com>
    Reviewed-by: Lai Jiangshan <jiangshanlai@gmail.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfb39e6d67a5fb3875e0cfb2e108e4bcc56d7747
Author: Andres Freund <andres@anarazel.de>
Date:   Mon Dec 28 11:27:18 2020 -0800

    block: add debugfs stanza for QUEUE_FLAG_NOWAIT
    
    [ Upstream commit dc30432605bbbd486dfede3852ea4d42c40a84b4 ]
    
    This was missed in 021a24460dc2. Leads to the numeric value of
    QUEUE_FLAG_NOWAIT (i.e. 29) showing up in
    /sys/kernel/debug/block/*/state.
    
    Fixes: 021a24460dc28e7412aecfae89f60e1847e685c0
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Cc: Mike Snitzer <snitzer@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Andres Freund <andres@anarazel.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dc3447a043b5f512b60661c30e8beccfd7b2a55
Author: Harish <harish@linux.ibm.com>
Date:   Tue Dec 29 15:14:22 2020 -0800

    selftests/vm: fix building protection keys test
    
    [ Upstream commit 7cf22a1c88c05ea3807f95b1edfebb729016ae52 ]
    
    Commit d8cbe8bfa7d ("tools/testing/selftests/vm: fix build error") tried
    to include a ARCH check for powerpc, however ARCH is not defined in the
    Makefile before including lib.mk.  This makes test building to skip on
    both x86 and powerpc.
    
    Fix the arch check by replacing it using machine type as it is already
    defined and used in the test.
    
    Link: https://lkml.kernel.org/r/20201215100402.257376-1-harish@linux.ibm.com
    Fixes: d8cbe8bfa7d ("tools/testing/selftests/vm: fix build error")
    Signed-off-by: Harish <harish@linux.ibm.com>
    Reviewed-by: Sandipan Das <sandipan@linux.ibm.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Sandipan Das <sandipan@linux.ibm.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 952264ac96ef4e019ac9b5d906ccef4997cf8f8b
Author: Noor Azura Ahmad Tarmizi <noor.azura.ahmad.tarmizi@intel.com>
Date:   Wed Dec 23 00:03:37 2020 +0800

    stmmac: intel: Add PCI IDs for TGL-H platform
    
    [ Upstream commit 8450e23f142f629e40bd67afc8375c86c7fbf8f1 ]
    
    Add TGL-H PCI info and PCI IDs for the new TSN Controller to the list
    of supported devices.
    
    Signed-off-by: Noor Azura Ahmad Tarmizi <noor.azura.ahmad.tarmizi@intel.com>
    Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Link: https://lore.kernel.org/r/20201222160337.30870-1-muhammad.husaini.zulkifli@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22c0b151bca433b5ce545b36dc36b049aab84148
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Dec 30 13:42:51 2020 +0200

    selftests: mlxsw: Set headroom size of correct port
    
    [ Upstream commit 2ff2c7e274392871bfdee00ff2adbb8ebae5d240 ]
    
    The test was setting the headroom size of the wrong port. This was not
    visible because of a firmware bug that canceled this bug.
    
    Set the headroom size of the correct port, so that the test will pass
    with both old and new firmware versions.
    
    Fixes: bfa804784e32 ("selftests: mlxsw: Add a PFC test")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/20201230114251.394009-1-idosch@idosch.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b81c2f8ad8fb424a449b7d5aa52fc53b553cbc9
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Dec 30 16:24:51 2020 +0100

    net: usb: qmi_wwan: add Quectel EM160R-GL
    
    [ Upstream commit cfd82dfc9799c53ef109343a23af006a0f6860a9 ]
    
    New modem using ff/ff/30 for QCDM, ff/00/00 for  AT and NMEA,
    and ff/ff/ff for RMNET/QMI.
    
    T: Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 2 Spd=5000 MxCh= 0
    D: Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs= 1
    P: Vendor=2c7c ProdID=0620 Rev= 4.09
    S: Manufacturer=Quectel
    S: Product=EM160R-GL
    S: SerialNumber=e31cedc1
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E: Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=83(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=85(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=84(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=87(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=04(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E: Ad=88(I) Atr=03(Int.) MxPS= 8 Ivl=32ms
    E: Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20201230152451.245271-1-bjorn@mork.no
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 063608092aa512c8d39af470dee9a887cf98d761
Author: YANG LI <abaci-bugfix@linux.alibaba.com>
Date:   Wed Dec 30 15:23:14 2020 +0800

    ibmvnic: fix: NULL pointer dereference.
    
    [ Upstream commit 862aecbd9569e563b979c0e23a908b43cda4b0b9 ]
    
    The error is due to dereference a null pointer in function
    reset_one_sub_crq_queue():
    
    if (!scrq) {
        netdev_dbg(adapter->netdev,
                   "Invalid scrq reset. irq (%d) or msgs(%p).\n",
                    scrq->irq, scrq->msgs);
                    return -EINVAL;
    }
    
    If the expression is true, scrq must be a null pointer and cannot
    dereference.
    
    Fixes: 9281cf2d5840 ("ibmvnic: avoid memset null scrq msgs")
    Signed-off-by: YANG LI <abaci-bugfix@linux.alibaba.com>
    Reported-by: Abaci <abaci@linux.alibaba.com>
    Acked-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/1609312994-121032-1-git-send-email-abaci-bugfix@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57dde18a1e60f4b24849a91ad96386f88ccae68d
Author: Roland Dreier <roland@kernel.org>
Date:   Wed Dec 23 19:21:16 2020 -0800

    CDC-NCM: remove "connected" log message
    
    [ Upstream commit 59b4a8fa27f5a895582ada1ae5034af7c94a57b5 ]
    
    The cdc_ncm driver passes network connection notifications up to
    usbnet_link_change(), which is the right place for any logging.
    Remove the netdev_info() duplicating this from the driver itself.
    
    This stops devices such as my "TRENDnet USB 10/100/1G/2.5G LAN"
    (ID 20f4:e02b) adapter from spamming the kernel log with
    
        cdc_ncm 2-2:2.0 enp0s2u2c2: network connection: connected
    
    messages every 60 msec or so.
    
    Signed-off-by: Roland Dreier <roland@kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201224032116.2453938-1-roland@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 143143feae03764e7316438edfcdf31433cbaa17
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Jan 3 02:25:44 2021 +0100

    net: dsa: lantiq_gswip: Fix GSWIP_MII_CFG(p) register access
    
    [ Upstream commit 709a3c9dff2a639966ae7d8ba6239d2b8aba036d ]
    
    There is one GSWIP_MII_CFG register for each switch-port except the CPU
    port. The register offset for the first port is 0x0, 0x02 for the
    second, 0x04 for the third and so on.
    
    Update the driver to not only restrict the GSWIP_MII_CFG registers to
    ports 0, 1 and 5. Handle ports 0..5 instead but skip the CPU port. This
    means we are not overwriting the configuration for the third port (port
    two since we start counting from zero) with the settings for the sixth
    port (with number five) anymore.
    
    The GSWIP_MII_PCDU(p) registers are not updated because there's really
    only three (one for each of the following ports: 0, 1, 5).
    
    Fixes: 14fceff4771e51 ("net: dsa: Add Lantiq / Intel DSA driver for vrx200")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Acked-by: Hauke Mehrtens <hauke@hauke-m.de>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 495442144c74977f246cb12d173e1aa0ecf8c40e
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Jan 3 02:25:43 2021 +0100

    net: dsa: lantiq_gswip: Enable GSWIP_MII_CFG_EN also for internal PHYs
    
    [ Upstream commit c1a9ec7e5d577a9391660800c806c53287fca991 ]
    
    Enable GSWIP_MII_CFG_EN also for internal PHYs to make traffic flow.
    Without this the PHY link is detected properly and ethtool statistics
    for TX are increasing but there's no RX traffic coming in.
    
    Fixes: 14fceff4771e51 ("net: dsa: Add Lantiq / Intel DSA driver for vrx200")
    Suggested-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Acked-by: Hauke Mehrtens <hauke@hauke-m.de>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f62153027b9a7d181aa0e051ececd25603036a1d
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Dec 30 19:33:34 2020 +0100

    r8169: work around power-saving bug on some chip versions
    
    [ Upstream commit e80bd76fbf563cc7ed8c9e9f3bbcdf59b0897f69 ]
    
    A user reported failing network with RTL8168dp (a quite rare chip
    version). Realtek confirmed that few chip versions suffer from a PLL
    power-down hw bug.
    
    Fixes: 07df5bd874f0 ("r8169: power down chip in probe")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/a1c39460-d533-7f9e-fa9d-2b8990b02426@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ad31889c481e59ade03a27c86395fd72d6022e9
Author: Yunjian Wang <wangyunjian@huawei.com>
Date:   Tue Dec 29 10:01:48 2020 +0800

    vhost_net: fix ubuf refcount incorrectly when sendmsg fails
    
    [ Upstream commit 01e31bea7e622f1890c274f4aaaaf8bccd296aa5 ]
    
    Currently the vhost_zerocopy_callback() maybe be called to decrease
    the refcount when sendmsg fails in tun. The error handling in vhost
    handle_tx_zerocopy() will try to decrease the same refcount again.
    This is wrong. To fix this issue, we only call vhost_net_ubuf_put()
    when vq->heads[nvq->desc].len == VHOST_DMA_IN_PROGRESS.
    
    Fixes: bab632d69ee4 ("vhost: vhost TX zero-copy support")
    Signed-off-by: Yunjian Wang <wangyunjian@huawei.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/1609207308-20544-1-git-send-email-wangyunjian@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf78c32ac7ebd42456deff53033661a6edd6665f
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Dec 28 15:21:46 2020 +0000

    bareudp: Fix use of incorrect min_headroom size
    
    [ Upstream commit 10ad3e998fa0c25315f27cf3002ff8b02dc31c38 ]
    
    In the bareudp6_xmit_skb(), it calculates min_headroom.
    At that point, it uses struct iphdr, but it's not correct.
    So panic could occur.
    The struct ipv6hdr should be used.
    
    Test commands:
        ip netns add A
        ip netns add B
        ip link add veth0 netns A type veth peer name veth1 netns B
        ip netns exec A ip link set veth0 up
        ip netns exec A ip a a 2001:db8:0::1/64 dev veth0
        ip netns exec B ip link set veth1 up
        ip netns exec B ip a a 2001:db8:0::2/64 dev veth1
    
        for i in {10..1}
        do
                let A=$i-1
                ip netns exec A ip link add bareudp$i type bareudp dstport $i \
                        ethertype 0x86dd
                ip netns exec A ip link set bareudp$i up
                ip netns exec A ip -6 a a 2001:db8:$i::1/64 dev bareudp$i
                ip netns exec A ip -6 r a 2001:db8:$i::2 encap ip6 src \
                        2001:db8:$A::1 dst 2001:db8:$A::2 via 2001:db8:$i::2 \
                        dev bareudp$i
    
                ip netns exec B ip link add bareudp$i type bareudp dstport $i \
                        ethertype 0x86dd
                ip netns exec B ip link set bareudp$i up
                ip netns exec B ip -6 a a 2001:db8:$i::2/64 dev bareudp$i
                ip netns exec B ip -6 r a 2001:db8:$i::1 encap ip6 src \
                        2001:db8:$A::2 dst 2001:db8:$A::1 via 2001:db8:$i::1 \
                        dev bareudp$i
        done
        ip netns exec A ping 2001:db8:7::2
    
    Splat looks like:
    [   66.436679][    C2] skbuff: skb_under_panic: text:ffffffff928614c8 len:454 put:14 head:ffff88810abb4000 data:ffff88810abb3ffa tail:0x1c0 end:0x3ec0 dev:veth0
    [   66.441626][    C2] ------------[ cut here ]------------
    [   66.443458][    C2] kernel BUG at net/core/skbuff.c:109!
    [   66.445313][    C2] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   66.447606][    C2] CPU: 2 PID: 913 Comm: ping Not tainted 5.10.0+ #819
    [   66.450251][    C2] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [   66.453713][    C2] RIP: 0010:skb_panic+0x15d/0x15f
    [   66.455345][    C2] Code: 98 fe 4c 8b 4c 24 10 53 8b 4d 70 45 89 e0 48 c7 c7 60 8b 78 93 41 57 41 56 41 55 48 8b 54 24 20 48 8b 74 24 28 e8 b5 40 f9 ff <0f> 0b 48 8b 6c 24 20 89 34 24 e8 08 c9 98 fe 8b 34 24 48 c7 c1 80
    [   66.462314][    C2] RSP: 0018:ffff888119209648 EFLAGS: 00010286
    [   66.464281][    C2] RAX: 0000000000000089 RBX: ffff888003159000 RCX: 0000000000000000
    [   66.467216][    C2] RDX: 0000000000000089 RSI: 0000000000000008 RDI: ffffed10232412c0
    [   66.469768][    C2] RBP: ffff88810a53d440 R08: ffffed102328018d R09: ffffed102328018d
    [   66.472297][    C2] R10: ffff888119400c67 R11: ffffed102328018c R12: 000000000000000e
    [   66.474833][    C2] R13: ffff88810abb3ffa R14: 00000000000001c0 R15: 0000000000003ec0
    [   66.477361][    C2] FS:  00007f37c0c72f00(0000) GS:ffff888119200000(0000) knlGS:0000000000000000
    [   66.480214][    C2] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   66.482296][    C2] CR2: 000055a058808570 CR3: 000000011039e002 CR4: 00000000003706e0
    [   66.484811][    C2] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   66.487793][    C2] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   66.490424][    C2] Call Trace:
    [   66.491469][    C2]  <IRQ>
    [   66.492374][    C2]  ? eth_header+0x28/0x190
    [   66.494054][    C2]  ? eth_header+0x28/0x190
    [   66.495401][    C2]  skb_push.cold.99+0x22/0x22
    [   66.496700][    C2]  eth_header+0x28/0x190
    [   66.497867][    C2]  neigh_resolve_output+0x3de/0x720
    [   66.499615][    C2]  ? __neigh_update+0x7e8/0x20a0
    [   66.501176][    C2]  __neigh_update+0x8bd/0x20a0
    [   66.502749][    C2]  ndisc_update+0x34/0xc0
    [   66.504010][    C2]  ndisc_recv_na+0x8da/0xb80
    [   66.505041][    C2]  ? pndisc_redo+0x20/0x20
    [   66.505888][    C2]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [   66.506965][    C2]  ndisc_rcv+0x3a0/0x470
    [   66.507797][    C2]  icmpv6_rcv+0xad9/0x1b00
    [   66.508645][    C2]  ip6_protocol_deliver_rcu+0xcd6/0x1560
    [   66.509719][    C2]  ip6_input_finish+0x5b/0xf0
    [   66.510615][    C2]  ip6_input+0xcd/0x2d0
    [   66.511406][    C2]  ? ip6_input_finish+0xf0/0xf0
    [   66.512327][    C2]  ? rcu_read_lock_held+0x91/0xa0
    [   66.513279][    C2]  ? ip6_protocol_deliver_rcu+0x1560/0x1560
    [   66.514414][    C2]  ipv6_rcv+0xe8/0x300
    [ ... ]
    
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Fixes: 571912c69f0e ("net: UDP tunnel encapsulation module for tunnelling different protocols like MPLS, IP, NSH etc.")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Link: https://lore.kernel.org/r/20201228152146.24270-1-ap420073@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfcd702d038e373ca84636a5999e24888b457c68
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Dec 28 15:21:36 2020 +0000

    bareudp: set NETIF_F_LLTX flag
    
    [ Upstream commit d9e44981739a96f1a468c13bbbd54ace378caf1c ]
    
    Like other tunneling interfaces, the bareudp doesn't need TXLOCK.
    So, It is good to set the NETIF_F_LLTX flag to improve performance and
    to avoid lockdep's false-positive warning.
    
    Test commands:
        ip netns add A
        ip netns add B
        ip link add veth0 netns A type veth peer name veth1 netns B
        ip netns exec A ip link set veth0 up
        ip netns exec A ip a a 10.0.0.1/24 dev veth0
        ip netns exec B ip link set veth1 up
        ip netns exec B ip a a 10.0.0.2/24 dev veth1
    
        for i in {2..1}
        do
                let A=$i-1
                ip netns exec A ip link add bareudp$i type bareudp \
                        dstport $i ethertype ip
                ip netns exec A ip link set bareudp$i up
                ip netns exec A ip a a 10.0.$i.1/24 dev bareudp$i
                ip netns exec A ip r a 10.0.$i.2 encap ip src 10.0.$A.1 \
                        dst 10.0.$A.2 via 10.0.$i.2 dev bareudp$i
    
                ip netns exec B ip link add bareudp$i type bareudp \
                        dstport $i ethertype ip
                ip netns exec B ip link set bareudp$i up
                ip netns exec B ip a a 10.0.$i.2/24 dev bareudp$i
                ip netns exec B ip r a 10.0.$i.1 encap ip src 10.0.$A.2 \
                        dst 10.0.$A.1 via 10.0.$i.1 dev bareudp$i
        done
        ip netns exec A ping 10.0.2.2
    
    Splat looks like:
    [   96.992803][  T822] ============================================
    [   96.993954][  T822] WARNING: possible recursive locking detected
    [   96.995102][  T822] 5.10.0+ #819 Not tainted
    [   96.995927][  T822] --------------------------------------------
    [   96.997091][  T822] ping/822 is trying to acquire lock:
    [   96.998083][  T822] ffff88810f753898 (_xmit_NONE#2){+.-.}-{2:2}, at: __dev_queue_xmit+0x1f52/0x2960
    [   96.999813][  T822]
    [   96.999813][  T822] but task is already holding lock:
    [   97.001192][  T822] ffff88810c385498 (_xmit_NONE#2){+.-.}-{2:2}, at: __dev_queue_xmit+0x1f52/0x2960
    [   97.002908][  T822]
    [   97.002908][  T822] other info that might help us debug this:
    [   97.004401][  T822]  Possible unsafe locking scenario:
    [   97.004401][  T822]
    [   97.005784][  T822]        CPU0
    [   97.006407][  T822]        ----
    [   97.007010][  T822]   lock(_xmit_NONE#2);
    [   97.007779][  T822]   lock(_xmit_NONE#2);
    [   97.008550][  T822]
    [   97.008550][  T822]  *** DEADLOCK ***
    [   97.008550][  T822]
    [   97.010057][  T822]  May be due to missing lock nesting notation
    [   97.010057][  T822]
    [   97.011594][  T822] 7 locks held by ping/822:
    [   97.012426][  T822]  #0: ffff888109a144f0 (sk_lock-AF_INET){+.+.}-{0:0}, at: raw_sendmsg+0x12f7/0x2b00
    [   97.014191][  T822]  #1: ffffffffbce2f5a0 (rcu_read_lock_bh){....}-{1:2}, at: ip_finish_output2+0x249/0x2020
    [   97.016045][  T822]  #2: ffffffffbce2f5a0 (rcu_read_lock_bh){....}-{1:2}, at: __dev_queue_xmit+0x1fd/0x2960
    [   97.017897][  T822]  #3: ffff88810c385498 (_xmit_NONE#2){+.-.}-{2:2}, at: __dev_queue_xmit+0x1f52/0x2960
    [   97.019684][  T822]  #4: ffffffffbce2f600 (rcu_read_lock){....}-{1:2}, at: bareudp_xmit+0x31b/0x3690 [bareudp]
    [   97.021573][  T822]  #5: ffffffffbce2f5a0 (rcu_read_lock_bh){....}-{1:2}, at: ip_finish_output2+0x249/0x2020
    [   97.023424][  T822]  #6: ffffffffbce2f5a0 (rcu_read_lock_bh){....}-{1:2}, at: __dev_queue_xmit+0x1fd/0x2960
    [   97.025259][  T822]
    [   97.025259][  T822] stack backtrace:
    [   97.026349][  T822] CPU: 3 PID: 822 Comm: ping Not tainted 5.10.0+ #819
    [   97.027609][  T822] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [   97.029407][  T822] Call Trace:
    [   97.030015][  T822]  dump_stack+0x99/0xcb
    [   97.030783][  T822]  __lock_acquire.cold.77+0x149/0x3a9
    [   97.031773][  T822]  ? stack_trace_save+0x81/0xa0
    [   97.032661][  T822]  ? register_lock_class+0x1910/0x1910
    [   97.033673][  T822]  ? register_lock_class+0x1910/0x1910
    [   97.034679][  T822]  ? rcu_read_lock_sched_held+0x91/0xc0
    [   97.035697][  T822]  ? rcu_read_lock_bh_held+0xa0/0xa0
    [   97.036690][  T822]  lock_acquire+0x1b2/0x730
    [   97.037515][  T822]  ? __dev_queue_xmit+0x1f52/0x2960
    [   97.038466][  T822]  ? check_flags+0x50/0x50
    [   97.039277][  T822]  ? netif_skb_features+0x296/0x9c0
    [   97.040226][  T822]  ? validate_xmit_skb+0x29/0xb10
    [   97.041151][  T822]  _raw_spin_lock+0x30/0x70
    [   97.041977][  T822]  ? __dev_queue_xmit+0x1f52/0x2960
    [   97.042927][  T822]  __dev_queue_xmit+0x1f52/0x2960
    [   97.043852][  T822]  ? netdev_core_pick_tx+0x290/0x290
    [   97.044824][  T822]  ? mark_held_locks+0xb7/0x120
    [   97.045712][  T822]  ? lockdep_hardirqs_on_prepare+0x12c/0x3e0
    [   97.046824][  T822]  ? __local_bh_enable_ip+0xa5/0xf0
    [   97.047771][  T822]  ? ___neigh_create+0x12a8/0x1eb0
    [   97.048710][  T822]  ? trace_hardirqs_on+0x41/0x120
    [   97.049626][  T822]  ? ___neigh_create+0x12a8/0x1eb0
    [   97.050556][  T822]  ? __local_bh_enable_ip+0xa5/0xf0
    [   97.051509][  T822]  ? ___neigh_create+0x12a8/0x1eb0
    [   97.052443][  T822]  ? check_chain_key+0x244/0x5f0
    [   97.053352][  T822]  ? rcu_read_lock_bh_held+0x56/0xa0
    [   97.054317][  T822]  ? ip_finish_output2+0x6ea/0x2020
    [   97.055263][  T822]  ? pneigh_lookup+0x410/0x410
    [   97.056135][  T822]  ip_finish_output2+0x6ea/0x2020
    [ ... ]
    
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Fixes: 571912c69f0e ("net: UDP tunnel encapsulation module for tunnelling different protocols like MPLS, IP, NSH etc.")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Link: https://lore.kernel.org/r/20201228152136.24215-1-ap420073@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ca1d23e6ad31e6df425221eaf82605137a9d803
Author: Xie He <xie.he.0141@gmail.com>
Date:   Sun Dec 27 18:53:39 2020 -0800

    net: hdlc_ppp: Fix issues when mod_timer is called while timer is running
    
    [ Upstream commit 1fef73597fa545c35fddc953979013882fbd4e55 ]
    
    ppp_cp_event is called directly or indirectly by ppp_rx with "ppp->lock"
    held. It may call mod_timer to add a new timer. However, at the same time
    ppp_timer may be already running and waiting for "ppp->lock". In this
    case, there's no need for ppp_timer to continue running and it can just
    exit.
    
    If we let ppp_timer continue running, it may call add_timer. This causes
    kernel panic because add_timer can't be called with a timer pending.
    This patch fixes this problem.
    
    Fixes: e022c2f07ae5 ("WAN: new synchronous PPP implementation for generic HDLC.")
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d6eeee3b9d4e08a9698038998d2752f157207f3
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Sat Dec 26 15:44:53 2020 -0800

    erspan: fix version 1 check in gre_parse_header()
    
    [ Upstream commit 085c7c4e1c0e50d90b7d90f61a12e12b317a91e2 ]
    
    Both version 0 and version 1 use ETH_P_ERSPAN, but version 0 does not
    have an erspan header. So the check in gre_parse_header() is wrong,
    we have to distinguish version 1 from version 0.
    
    We can just check the gre header length like is_erspan_type1().
    
    Fixes: cb73ee40b1b3 ("net: ip_gre: use erspan key field for tunnel lookup")
    Reported-by: syzbot+f583ce3d4ddf9836b27a@syzkaller.appspotmail.com
    Cc: William Tu <u9012063@gmail.com>
    Cc: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd63471a41849a796bb11cac890db0836dcedcea
Author: Yunjian Wang <wangyunjian@huawei.com>
Date:   Sat Dec 26 16:10:05 2020 +0800

    net: hns: fix return value check in __lb_other_process()
    
    [ Upstream commit 5ede3ada3da7f050519112b81badc058190b9f9f ]
    
    The function skb_copy() could return NULL, the return value
    need to be checked.
    
    Fixes: b5996f11ea54 ("net: add Hisilicon Network Subsystem basic ethernet support")
    Signed-off-by: Yunjian Wang <wangyunjian@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a20969b874e182f1e2270077ce280335b4aa5e3
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Dec 24 22:23:44 2020 -0800

    net: sched: prevent invalid Scell_log shift count
    
    [ Upstream commit bd1248f1ddbc48b0c30565fce897a3b6423313b8 ]
    
    Check Scell_log shift size in red_check_params() and modify all callers
    of red_check_params() to pass Scell_log.
    
    This prevents a shift out-of-bounds as detected by UBSAN:
      UBSAN: shift-out-of-bounds in ./include/net/red.h:252:22
      shift exponent 72 is too large for 32-bit type 'int'
    
    Fixes: 8afa10cbe281 ("net_sched: red: Avoid illegal values")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: syzbot+97c5bd9cc81eca63d36e@syzkaller.appspotmail.com
    Cc: Nogah Frankel <nogahf@mellanox.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: netdev@vger.kernel.org
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e87eabce7bc0286c7131c84335100983c31e3cf
Author: Guillaume Nault <gnault@redhat.com>
Date:   Thu Dec 24 20:01:09 2020 +0100

    ipv4: Ignore ECN bits for fib lookups in fib_compute_spec_dst()
    
    [ Upstream commit 21fdca22eb7df2a1e194b8adb812ce370748b733 ]
    
    RT_TOS() only clears one of the ECN bits. Therefore, when
    fib_compute_spec_dst() resorts to a fib lookup, it can return
    different results depending on the value of the second ECN bit.
    
    For example, ECT(0) and ECT(1) packets could be treated differently.
    
      $ ip netns add ns0
      $ ip netns add ns1
      $ ip link add name veth01 netns ns0 type veth peer name veth10 netns ns1
      $ ip -netns ns0 link set dev lo up
      $ ip -netns ns1 link set dev lo up
      $ ip -netns ns0 link set dev veth01 up
      $ ip -netns ns1 link set dev veth10 up
    
      $ ip -netns ns0 address add 192.0.2.10/24 dev veth01
      $ ip -netns ns1 address add 192.0.2.11/24 dev veth10
    
      $ ip -netns ns1 address add 192.0.2.21/32 dev lo
      $ ip -netns ns1 route add 192.0.2.10/32 tos 4 dev veth10 src 192.0.2.21
      $ ip netns exec ns1 sysctl -wq net.ipv4.icmp_echo_ignore_broadcasts=0
    
    With TOS 4 and ECT(1), ns1 replies using source address 192.0.2.21
    (ping uses -Q to set all TOS and ECN bits):
    
      $ ip netns exec ns0 ping -c 1 -b -Q 5 192.0.2.255
      [...]
      64 bytes from 192.0.2.21: icmp_seq=1 ttl=64 time=0.544 ms
    
    But with TOS 4 and ECT(0), ns1 replies using source address 192.0.2.11
    because the "tos 4" route isn't matched:
    
      $ ip netns exec ns0 ping -c 1 -b -Q 6 192.0.2.255
      [...]
      64 bytes from 192.0.2.11: icmp_seq=1 ttl=64 time=0.597 ms
    
    After this patch the ECN bits don't affect the result anymore:
    
      $ ip netns exec ns0 ping -c 1 -b -Q 6 192.0.2.255
      [...]
      64 bytes from 192.0.2.21: icmp_seq=1 ttl=64 time=0.591 ms
    
    Fixes: 35ebf65e851c ("ipv4: Create and use fib_compute_spec_dst() helper.")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 042c7f35fa61d6c288a253599051c84a37ee0449
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sun Dec 27 14:18:17 2020 -0500

    bnxt_en: Fix AER recovery.
    
    [ Upstream commit fb1e6e562b37b39adfe251919c9abfdb3e01f921 ]
    
    A recent change skips sending firmware messages to the firmware when
    pci_channel_offline() is true during fatal AER error.  To make this
    complete, we need to move the re-initialization sequence to
    bnxt_io_resume(), otherwise the firmware messages to re-initialize
    will all be skipped.  In any case, it is more correct to re-initialize
    in bnxt_io_resume().
    
    Also, fix the reverse x-mas tree format when defining variables
    in bnxt_io_slot_reset().
    
    Fixes: b340dc680ed4 ("bnxt_en: Avoid sending firmware messages when AER error is detected.")
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdb02a7a9e8d51c41d56be0099c5925536ceecf9
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Wed Dec 23 20:35:21 2020 +0200

    net: mvpp2: fix pkt coalescing int-threshold configuration
    
    [ Upstream commit 4f374d2c43a9e5e773f1dee56db63bd6b8a36276 ]
    
    The packet coalescing interrupt threshold has separated registers
    for different aggregated/cpu (sw-thread). The required value should
    be loaded for every thread but not only for 1 current cpu.
    
    Fixes: 213f428f5056 ("net: mvpp2: add support for TX interrupts and RX queue distribution modes")
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Link: https://lore.kernel.org/r/1608748521-11033-1-git-send-email-stefanc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b350728118e5ab9152a3a03e130118a0202ea94
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Dec 27 14:18:18 2020 -0500

    bnxt_en: Check TQM rings for maximum supported value.
    
    [ Upstream commit a029a2fef5d11bb85587433c3783615442abac96 ]
    
    TQM rings are hardware resources that require host context memory
    managed by the driver.  The driver supports up to 9 TQM rings and
    the number of rings to use is requested by firmware during run-time.
    Cap this number to the maximum supported to prevent accessing beyond
    the array.  Future firmware may request more than 9 TQM rings.  Define
    macros to remove the magic number 9 from the C code.
    
    Fixes: ac3158cb0108 ("bnxt_en: Allocate TQM ring context memory according to fw specification.")
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Reviewed-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c0681c2b681f5f5c6a2d2fdb70fbfc3e74d7f76
Author: Mario Limonciello <mario.limonciello@dell.com>
Date:   Mon Dec 14 13:29:35 2020 -0600

    e1000e: Export S0ix flags to ethtool
    
    [ Upstream commit 3c98cbf22a96c1b12f48c1b2a4680dfe5cb280f9 ]
    
    This flag can be used by an end user to disable S0ix flows on a
    buggy system or by an OEM for development purposes.
    
    If you need this flag to be persisted across reboots, it's suggested
    to use a udev rule to call adjust it until the kernel could have your
    configuration in a disallow list.
    
    Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Yijun Shen <Yijun.shen@dell.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0cd009b052ecbc831ae16d2501248855b5982b7
Author: Mario Limonciello <mario.limonciello@dell.com>
Date:   Mon Dec 14 13:29:34 2020 -0600

    Revert "e1000e: disable s0ix entry and exit flows for ME systems"
    
    [ Upstream commit 6cecf02e77ab9bf97e9252f9fcb8f0738a6de12c ]
    
    commit e086ba2fccda ("e1000e: disable s0ix entry and exit flows for ME
    systems") disabled s0ix flows for systems that have various incarnations of
    the i219-LM ethernet controller.  This changed caused power consumption
    regressions on the following shipping Dell Comet Lake based laptops:
    * Latitude 5310
    * Latitude 5410
    * Latitude 5410
    * Latitude 5510
    * Precision 3550
    * Latitude 5411
    * Latitude 5511
    * Precision 3551
    * Precision 7550
    * Precision 7750
    
    This commit was introduced because of some regressions on certain Thinkpad
    laptops.  This comment was potentially caused by an earlier
    commit 632fbd5eb5b0e ("e1000e: fix S0ix flows for cable connected case").
    or it was possibly caused by a system not meeting platform architectural
    requirements for low power consumption.  Other changes made in the driver
    with extended timeouts are expected to make the driver more impervious to
    platform firmware behavior.
    
    Fixes: e086ba2fccda ("e1000e: disable s0ix entry and exit flows for ME systems")
    Reviewed-by: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Yijun Shen <Yijun.shen@dell.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e7176129f4f8444952586a376287b3306a4eb85
Author: Mario Limonciello <mario.limonciello@dell.com>
Date:   Mon Dec 14 13:29:33 2020 -0600

    e1000e: bump up timeout to wait when ME un-configures ULP mode
    
    [ Upstream commit 3cf31b1a9effd859bb3d6ff9f8b5b0d5e6cac952 ]
    
    Per guidance from Intel ethernet architecture team, it may take
    up to 1 second for unconfiguring ULP mode.
    
    However in practice this seems to be taking up to 2 seconds on
    some Lenovo machines.  Detect scenarios that take more than 1 second
    but less than 2.5 seconds and emit a warning on resume for those
    scenarios.
    
    Suggested-by: Aaron Ma <aaron.ma@canonical.com>
    Suggested-by: Sasha Netfin <sasha.neftin@intel.com>
    Suggested-by: Hans de Goede <hdegoede@redhat.com>
    CC: Mark Pearson <markpearson@lenovo.com>
    Fixes: f15bb6dde738cc8fa0 ("e1000e: Add support for S0ix")
    BugLink: https://bugs.launchpad.net/bugs/1865570
    Link: https://patchwork.ozlabs.org/project/intel-wired-lan/patch/20200323191639.48826-1-aaron.ma@canonical.com/
    Link: https://lkml.org/lkml/2020/12/13/15
    Link: https://lkml.org/lkml/2020/12/14/708
    Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Yijun Shen <Yijun.shen@dell.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35a44ba54587ca9888e0b43151f5511f9b835e1e
Author: Mario Limonciello <mario.limonciello@dell.com>
Date:   Mon Dec 14 13:29:32 2020 -0600

    e1000e: Only run S0ix flows if shutdown succeeded
    
    [ Upstream commit 808e0d8832cc81738f3e8df12dff0688352baf50 ]
    
    If the shutdown failed, the part will be thawed and running
    S0ix flows will put it into an undefined state.
    
    Reported-by: Alexander Duyck <alexander.duyck@gmail.com>
    Reviewed-by: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
    Tested-by: Yijun Shen <Yijun.shen@dell.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3cbce80be894293d5d90b657df0ea33d754068c
Author: Yunjian Wang <wangyunjian@huawei.com>
Date:   Fri Dec 25 10:52:16 2020 +0800

    tun: fix return value when the number of iovs exceeds MAX_SKB_FRAGS
    
    [ Upstream commit 950271d7cc0b4546af3549d8143c4132d6e1f138 ]
    
    Currently the tun_napi_alloc_frags() function returns -ENOMEM when the
    number of iovs exceeds MAX_SKB_FRAGS + 1. However this is inappropriate,
    we should use -EMSGSIZE instead of -ENOMEM.
    
    The following distinctions are matters:
    1. the caller need to drop the bad packet when -EMSGSIZE is returned,
       which means meeting a persistent failure.
    2. the caller can try again when -ENOMEM is returned, which means
       meeting a transient failure.
    
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    Signed-off-by: Yunjian Wang <wangyunjian@huawei.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/1608864736-24332-1-git-send-email-wangyunjian@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44dc29d44b842ff7761f24ab129f0a5a70982bb5
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Dec 24 18:24:05 2020 +0200

    net: ethernet: ti: cpts: fix ethtool output when no ptp_clock registered
    
    [ Upstream commit 4614792eebcbf81c60ad3604c1aeeb2b0899cea4 ]
    
    The CPTS driver registers PTP PHC clock when first netif is going up and
    unregister it when all netif are down. Now ethtool will show:
     - PTP PHC clock index 0 after boot until first netif is up;
     - the last assigned PTP PHC clock index even if PTP PHC clock is not
    registered any more after all netifs are down.
    
    This patch ensures that -1 is returned by ethtool when PTP PHC clock is not
    registered any more.
    
    Fixes: 8a2c9a5ab4b9 ("net: ethernet: ti: cpts: rework initialization/deinitialization")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Link: https://lore.kernel.org/r/20201224162405.28032-1-grygorii.strashko@ti.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4535dbb721d0346f6a7ee6b6cbaf517cb96dbcb
Author: Antoine Tenart <atenart@kernel.org>
Date:   Wed Dec 23 22:23:23 2020 +0100

    net-sysfs: take the rtnl lock when accessing xps_rxqs_map and num_tc
    
    [ Upstream commit 4ae2bb81649dc03dfc95875f02126b14b773f7ab ]
    
    Accesses to dev->xps_rxqs_map (when using dev->num_tc) should be
    protected by the rtnl lock, like we do for netif_set_xps_queue. I didn't
    see an actual bug being triggered, but let's be safe here and take the
    rtnl lock while accessing the map in sysfs.
    
    Fixes: 8af2c06ff4b1 ("net-sysfs: Add interface for Rx queue(s) map per Tx queue")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90297553d870bd103687bd802d117c8a06808a49
Author: Antoine Tenart <atenart@kernel.org>
Date:   Wed Dec 23 22:23:22 2020 +0100

    net-sysfs: take the rtnl lock when storing xps_rxqs
    
    [ Upstream commit 2d57b4f142e0b03e854612b8e28978935414bced ]
    
    Two race conditions can be triggered when storing xps rxqs, resulting in
    various oops and invalid memory accesses:
    
    1. Calling netdev_set_num_tc while netif_set_xps_queue:
    
       - netif_set_xps_queue uses dev->tc_num as one of the parameters to
         compute the size of new_dev_maps when allocating it. dev->tc_num is
         also used to access the map, and the compiler may generate code to
         retrieve this field multiple times in the function.
    
       - netdev_set_num_tc sets dev->tc_num.
    
       If new_dev_maps is allocated using dev->tc_num and then dev->tc_num
       is set to a higher value through netdev_set_num_tc, later accesses to
       new_dev_maps in netif_set_xps_queue could lead to accessing memory
       outside of new_dev_maps; triggering an oops.
    
    2. Calling netif_set_xps_queue while netdev_set_num_tc is running:
    
       2.1. netdev_set_num_tc starts by resetting the xps queues,
            dev->tc_num isn't updated yet.
    
       2.2. netif_set_xps_queue is called, setting up the map with the
            *old* dev->num_tc.
    
       2.3. netdev_set_num_tc updates dev->tc_num.
    
       2.4. Later accesses to the map lead to out of bound accesses and
            oops.
    
       A similar issue can be found with netdev_reset_tc.
    
    One way of triggering this is to set an iface up (for which the driver
    uses netdev_set_num_tc in the open path, such as bnx2x) and writing to
    xps_rxqs in a concurrent thread. With the right timing an oops is
    triggered.
    
    Both issues have the same fix: netif_set_xps_queue, netdev_set_num_tc
    and netdev_reset_tc should be mutually exclusive. We do that by taking
    the rtnl lock in xps_rxqs_store.
    
    Fixes: 8af2c06ff4b1 ("net-sysfs: Add interface for Rx queue(s) map per Tx queue")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ca897c1ec41f79829df1fde367e8654a88d3733
Author: Antoine Tenart <atenart@kernel.org>
Date:   Wed Dec 23 22:23:21 2020 +0100

    net-sysfs: take the rtnl lock when accessing xps_cpus_map and num_tc
    
    [ Upstream commit fb25038586d0064123e393cadf1fadd70a9df97a ]
    
    Accesses to dev->xps_cpus_map (when using dev->num_tc) should be
    protected by the rtnl lock, like we do for netif_set_xps_queue. I didn't
    see an actual bug being triggered, but let's be safe here and take the
    rtnl lock while accessing the map in sysfs.
    
    Fixes: 184c449f91fe ("net: Add support for XPS with QoS via traffic classes")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4da25d83b7cc215120ef482c78266a18d589ebe9
Author: Antoine Tenart <atenart@kernel.org>
Date:   Wed Dec 23 22:23:20 2020 +0100

    net-sysfs: take the rtnl lock when storing xps_cpus
    
    [ Upstream commit 1ad58225dba3f2f598d2c6daed4323f24547168f ]
    
    Two race conditions can be triggered when storing xps cpus, resulting in
    various oops and invalid memory accesses:
    
    1. Calling netdev_set_num_tc while netif_set_xps_queue:
    
       - netif_set_xps_queue uses dev->tc_num as one of the parameters to
         compute the size of new_dev_maps when allocating it. dev->tc_num is
         also used to access the map, and the compiler may generate code to
         retrieve this field multiple times in the function.
    
       - netdev_set_num_tc sets dev->tc_num.
    
       If new_dev_maps is allocated using dev->tc_num and then dev->tc_num
       is set to a higher value through netdev_set_num_tc, later accesses to
       new_dev_maps in netif_set_xps_queue could lead to accessing memory
       outside of new_dev_maps; triggering an oops.
    
    2. Calling netif_set_xps_queue while netdev_set_num_tc is running:
    
       2.1. netdev_set_num_tc starts by resetting the xps queues,
            dev->tc_num isn't updated yet.
    
       2.2. netif_set_xps_queue is called, setting up the map with the
            *old* dev->num_tc.
    
       2.3. netdev_set_num_tc updates dev->tc_num.
    
       2.4. Later accesses to the map lead to out of bound accesses and
            oops.
    
       A similar issue can be found with netdev_reset_tc.
    
    One way of triggering this is to set an iface up (for which the driver
    uses netdev_set_num_tc in the open path, such as bnx2x) and writing to
    xps_cpus in a concurrent thread. With the right timing an oops is
    triggered.
    
    Both issues have the same fix: netif_set_xps_queue, netdev_set_num_tc
    and netdev_reset_tc should be mutually exclusive. We do that by taking
    the rtnl lock in xps_cpus_store.
    
    Fixes: 184c449f91fe ("net: Add support for XPS with QoS via traffic classes")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7eab4e69cb01a4db9f8ac027d54881c504348c1c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Dec 23 19:06:12 2020 +0800

    net: ethernet: Fix memleak in ethoc_probe
    
    [ Upstream commit 5d41f9b7ee7a5a5138894f58846a4ffed601498a ]
    
    When mdiobus_register() fails, priv->mdio allocated
    by mdiobus_alloc() has not been freed, which leads
    to memleak.
    
    Fixes: e7f4dc3536a4 ("mdio: Move allocation of interrupts into core")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20201223110615.31389-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cdf8c2747d32c85fbaa6cf36d0971ee43a0a9df
Author: John Wang <wangzhiqiang.bj@bytedance.com>
Date:   Wed Dec 23 13:55:23 2020 +0800

    net/ncsi: Use real net-device for response handler
    
    [ Upstream commit 427c940558560bff2583d07fc119a21094675982 ]
    
    When aggregating ncsi interfaces and dedicated interfaces to bond
    interfaces, the ncsi response handler will use the wrong net device to
    find ncsi_dev, so that the ncsi interface will not work properly.
    Here, we use the original net device to fix it.
    
    Fixes: 138635cc27c9 ("net/ncsi: NCSI response packet handler")
    Signed-off-by: John Wang <wangzhiqiang.bj@bytedance.com>
    Link: https://lore.kernel.org/r/20201223055523.2069-1-wangzhiqiang.bj@bytedance.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23f8bea3e9d91a2553342172ef54972c01cb7616
Author: Jeff Dike <jdike@akamai.com>
Date:   Tue Dec 22 21:54:21 2020 -0500

    virtio_net: Fix recursive call to cpus_read_lock()
    
    [ Upstream commit de33212f768c5d9e2fe791b008cb26f92f0aa31c ]
    
    virtnet_set_channels can recursively call cpus_read_lock if CONFIG_XPS
    and CONFIG_HOTPLUG are enabled.
    
    The path is:
        virtnet_set_channels - calls get_online_cpus(), which is a trivial
    wrapper around cpus_read_lock()
        netif_set_real_num_tx_queues
        netif_reset_xps_queues_gt
        netif_reset_xps_queues - calls cpus_read_lock()
    
    This call chain and potential deadlock happens when the number of TX
    queues is reduced.
    
    This commit the removes netif_set_real_num_[tr]x_queues calls from
    inside the get/put_online_cpus section, as they don't require that it
    be held.
    
    Fixes: 47be24796c13 ("virtio-net: fix the set affinity bug when CPU IDs are not consecutive")
    Signed-off-by: Jeff Dike <jdike@akamai.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/20201223025421.671-1-jdike@akamai.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 087cfc73598abdabb2f28be876ee6403d9190e86
Author: Manish Chopra <manishc@marvell.com>
Date:   Mon Dec 21 06:55:30 2020 -0800

    qede: fix offload for IPIP tunnel packets
    
    [ Upstream commit 5d5647dad259bb416fd5d3d87012760386d97530 ]
    
    IPIP tunnels packets are unknown to device,
    hence these packets are incorrectly parsed and
    caused the packet corruption, so disable offlods
    for such packets at run time.
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Sudarsana Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Link: https://lore.kernel.org/r/20201221145530.7771-1-manishc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7d068a2d711ff48b40cac452afbc82cdc35ebb9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Dec 20 16:29:30 2020 +0800

    net: ethernet: mvneta: Fix error handling in mvneta_probe
    
    [ Upstream commit 58f60329a6be35a5653edb3fd2023ccef9eb9943 ]
    
    When mvneta_port_power_up() fails, we should execute
    cleanup functions after label err_netdev to avoid memleak.
    
    Fixes: 41c2b6b4f0f80 ("net: ethernet: mvneta: Add back interface mode validation")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20201220082930.21623-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 933b2ba7f9dec4c73588b565fa3cb32cb14ed37f
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Sat Dec 19 15:40:34 2020 -0600

    ibmvnic: continue fatal error reset after passive init
    
    [ Upstream commit 1f45dc22066797479072978feeada0852502e180 ]
    
    Commit f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    says "If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails."
    
    Even with this commit, we still see similar kernel crashes. In order
    to completely solve this problem, we'd better continue the fatal error
    reset, capture the kernel crash, and try to fix it from that end.
    
    Fixes: f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201219214034.21123-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0583c8ed2d30ca7747685fd65af3181d295b33d5
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Sat Dec 19 15:39:19 2020 -0600

    ibmvnic: fix login buffer memory leak
    
    [ Upstream commit a0c8be56affa7d5ffbdec24c992223be54db3b6e ]
    
    Commit 34f0f4e3f488 ("ibmvnic: Fix login buffer memory leaks") frees
    login_rsp_buffer in release_resources() and send_login()
    because handle_login_rsp() does not free it.
    Commit f3ae59c0c015 ("ibmvnic: store RX and TX subCRQ handle array in
    ibmvnic_adapter struct") frees login_rsp_buffer in handle_login_rsp().
    It seems unnecessary to free it in release_resources() and send_login().
    There are chances that handle_login_rsp returns earlier without freeing
    buffers. Double-checking the buffer is harmless since
    release_login_buffer and release_login_rsp_buffer will
    do nothing if buffer is already freed.
    
    Fixes: f3ae59c0c015 ("ibmvnic: store RX and TX subCRQ handle array in ibmvnic_adapter struct")
    Fixes: 34f0f4e3f488 ("ibmvnic: Fix login buffer memory leaks")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201219213919.21045-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cad75a6bdba6af03412efa64a65ed323b7e75294
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Dec 19 14:50:36 2020 +0100

    net: stmmac: dwmac-meson8b: ignore the second clock input
    
    [ Upstream commit f87777a3c30cf50c66a20e1d153f0e003bb30774 ]
    
    The dwmac glue registers on Amlogic Meson8b and newer SoCs has two clock
    inputs:
    - Meson8b and Meson8m2: MPLL2 and MPLL2 (the same parent is wired to
      both inputs)
    - GXBB, GXL, GXM, AXG, G12A, G12B, SM1: FCLK_DIV2 and MPLL2
    
    All known vendor kernels and u-boots are using the first input only. We
    let the common clock framework automatically choose the "right" parent.
    For some boards this causes a problem though, specificially with G12A and
    newer SoCs. The clock input is used for generating the 125MHz RGMII TX
    clock. For the two input clocks this means on G12A:
    - FCLK_DIV2: 999999985Hz / 8 = 124999998.125Hz
    - MPLL2: 499999993Hz / 4 = 124999998.25Hz
    
    In theory MPLL2 is the "better" clock input because it's gets us 0.125Hz
    closer to the requested frequency than FCLK_DIV2. In reality however
    there is a resource conflict because MPLL2 is needed to generate some of
    the audio clocks. dwmac-meson8b probes first and sets up the clock tree
    with MPLL2. This works fine until the audio driver comes and "steals"
    the MPLL2 clocks and configures it with it's own rate (294909637Hz). The
    common clock framework happily changes the MPLL2 rate but does not
    reconfigure our RGMII TX clock tree, which then ends up at 73727409Hz,
    which is more than 40% off the requested 125MHz.
    
    Don't use the second clock input for now to force the common clock
    framework to always select the first parent. This mimics the behavior
    from the vendor driver and fixes the clock resource conflict with the
    audio driver on G12A boards. Once the common clock framework can handle
    this situation this change can be reverted again.
    
    Fixes: 566e8251625304 ("net: stmmac: add a glue driver for the Amlogic Meson 8b / GXBB DWMAC")
    Reported-by: Thomas Graichen <thomas.graichen@gmail.com>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Tested-by: thomas graichen <thomas.graichen@gmail.com>
    Link: https://lore.kernel.org/r/20201219135036.3216017-1-martin.blumenstingl@googlemail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04f241fc7eb34acb29e6dcde4cf50036867c46e1
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Sun Dec 20 13:02:29 2020 +0200

    net: mvpp2: Fix GoP port 3 Networking Complex Control configurations
    
    [ Upstream commit 2575bc1aa9d52a62342b57a0b7d0a12146cf6aed ]
    
    During GoP port 2 Networking Complex Control mode of operation configurations,
    also GoP port 3 mode of operation was wrongly set.
    Patch removes these configurations.
    
    Fixes: f84bf386f395 ("net: mvpp2: initialize the GoP")
    Acked-by: Marcin Wojtas <mw@semihalf.com>
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Link: https://lore.kernel.org/r/1608462149-1702-1-git-send-email-stefanc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ece401fa3d617fc17d192aa48069727b97f3d5c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Dec 19 14:01:44 2020 +0300

    atm: idt77252: call pci_disable_device() on error path
    
    [ Upstream commit 8df66af5c1e5f80562fe728db5ec069b21810144 ]
    
    This error path needs to disable the pci device before returning.
    
    Fixes: ede58ef28e10 ("atm: remove deprecated use of pci api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/X93dmC4NX0vbTpGp@mwanda
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e2dee9a6b26fb904bb21f9be6e36a62fe5cd410
Author: Shannon Nelson <snelson@pensando.io>
Date:   Fri Dec 18 13:50:01 2020 -0800

    ionic: account for vlan tag len in rx buffer len
    
    [ Upstream commit 83469893204281ecf65d572bddf02de29a19787c ]
    
    Let the FW know we have enough receive buffer space for the
    vlan tag if it isn't stripped.
    
    Fixes: 0f3154e6bcb3 ("ionic: Add Tx and Rx handling")
    Signed-off-by: Shannon Nelson <snelson@pensando.io>
    Link: https://lore.kernel.org/r/20201218215001.64696-1-snelson@pensando.io
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15741c05a8893c770090f66ea0785bd4177f9999
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Fri Dec 18 11:55:36 2020 +0100

    ethernet: ucc_geth: set dev->max_mtu to 1518
    
    [ Upstream commit 1385ae5c30f238f81bc6528d897c6d7a0816783f ]
    
    All the buffers and registers are already set up appropriately for an
    MTU slightly above 1500, so we just need to expose this to the
    networking stack. AFAICT, there's no need to implement .ndo_change_mtu
    when the receive buffers are always set up to support the max_mtu.
    
    This fixes several warnings during boot on our mpc8309-board with an
    embedded mv88e6250 switch:
    
    mv88e6085 mdio@e0102120:10: nonfatal error -34 setting MTU 1500 on port 0
    ...
    mv88e6085 mdio@e0102120:10: nonfatal error -34 setting MTU 1500 on port 4
    ucc_geth e0102000.ethernet eth1: error -22 setting MTU to 1504 to include DSA overhead
    
    The last line explains what the DSA stack tries to do: achieving an MTU
    of 1500 on-the-wire requires that the master netdevice connected to
    the CPU port supports an MTU of 1500+the tagging overhead.
    
    Fixes: bfcb813203e6 ("net: dsa: configure the MTU for switch ports")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 116395a26d957f559e3ef386d2b1bd22d5a9151b
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Fri Dec 18 11:55:38 2020 +0100

    ethernet: ucc_geth: fix use-after-free in ucc_geth_remove()
    
    [ Upstream commit e925e0cd2a705aaacb0b907bb3691fcac3a973a4 ]
    
    ugeth is the netdiv_priv() part of the netdevice. Accessing the memory
    pointed to by ugeth (such as done by ucc_geth_memclean() and the two
    of_node_puts) after free_netdev() is thus use-after-free.
    
    Fixes: 80a9fad8e89a ("ucc_geth: fix module removal")
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca126e9e03450a355b2ff0aa8970fd75e51b6f65
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Dec 18 09:38:43 2020 -0800

    net: systemport: set dev->max_mtu to UMAC_MAX_MTU_SIZE
    
    [ Upstream commit 54ddbdb024882e226055cc4c3c246592ddde2ee5 ]
    
    The driver is already allocating receive buffers of 2KiB and the
    Ethernet MAC is configured to accept frames up to UMAC_MAX_MTU_SIZE.
    
    Fixes: bfcb813203e6 ("net: dsa: configure the MTU for switch ports")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20201218173843.141046-1-f.fainelli@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf65734dee5f922bd393a486be25e5c577405411
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Thu Dec 17 20:37:46 2020 +0200

    net: mvpp2: prs: fix PPPoE with ipv6 packet parse
    
    [ Upstream commit fec6079b2eeab319d9e3d074f54d3b6f623e9701 ]
    
    Current PPPoE+IPv6 entry is jumping to 'next-hdr'
    field and not to 'DIP' field as done for IPv4.
    
    Fixes: 3f518509dedc ("ethernet: Add new driver for Marvell Armada 375 network unit")
    Reported-by: Liron Himi <lironh@marvell.com>
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Link: https://lore.kernel.org/r/1608230266-22111-1-git-send-email-stefanc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 121164dc3314ce230fbbfcd3cd605bc24172148b
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Thu Dec 17 20:30:17 2020 +0200

    net: mvpp2: Add TCAM entry to drop flow control pause frames
    
    [ Upstream commit 3f48fab62bb81a7f9d01e9d43c40395fad011dd5 ]
    
    Issue:
    Flow control frame used to pause GoP(MAC) was delivered to the CPU
    and created a load on the CPU. Since XOFF/XON frames are used only
    by MAC, these frames should be dropped inside MAC.
    
    Fix:
    According to 802.3-2012 - IEEE Standard for Ethernet pause frame
    has unique destination MAC address 01-80-C2-00-00-01.
    Add TCAM parser entry to track and drop pause frames by destination MAC.
    
    Fixes: 3f518509dedc ("ethernet: Add new driver for Marvell Armada 375 network unit")
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Link: https://lore.kernel.org/r/1608229817-21951-1-git-send-email-stefanc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db8895aa58c721f9b7a996923db3afe6b4691270
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Thu Dec 17 22:29:46 2020 +0100

    net/sched: sch_taprio: ensure to reset/destroy all child qdiscs
    
    [ Upstream commit 698285da79f5b0b099db15a37ac661ac408c80eb ]
    
    taprio_graft() can insert a NULL element in the array of child qdiscs. As
    a consquence, taprio_reset() might not reset child qdiscs completely, and
    taprio_destroy() might leak resources. Fix it by ensuring that loops that
    iterate over q->qdiscs[] don't end when they find the first NULL item.
    
    Fixes: 44d4775ca518 ("net/sched: sch_taprio: reset child qdiscs before freeing them")
    Fixes: 5a781ccbd19e ("tc: Add support for configuring the taprio scheduler")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Link: https://lore.kernel.org/r/13edef6778fef03adc751582562fba4a13e06d6a.1608240532.git.dcaratti@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2572423ab92014d3194282e737e6972d2424b37
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Dec 2 18:18:06 2020 -0800

    iavf: fix double-release of rtnl_lock
    
    [ Upstream commit f1340265726e0edf8a8cef28e665b28ad6302ce9 ]
    
    This code does not jump to exit on an error in iavf_lan_add_device(),
    so the rtnl_unlock() from the normal path will follow.
    
    Fixes: b66c7bc1cd4d ("iavf: Refactor init state machine")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9dea80af65e8f6f77adcd573cbd7267e280e0ef
Author: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
Date:   Thu Oct 22 12:39:36 2020 +0200

    i40e: Fix Error I40E_AQ_RC_EINVAL when removing VFs
    
    [ Upstream commit 3ac874fa84d1baaf0c0175f2a1499f5d88d528b2 ]
    
    When removing VFs for PF added to bridge there was
    an error I40E_AQ_RC_EINVAL. It was caused by not properly
    resetting and reinitializing PF when adding/removing VFs.
    Changed how reset is performed when adding/removing VFs
    to properly reinitialize PFs VSI.
    
    Fixes: fc60861e9b00 ("i40e: start up in VEPA mode by default")
    Signed-off-by: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
