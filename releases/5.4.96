commit d4716ee8751bf8dabf5872ba008124a0979a5f94
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Feb 7 15:35:50 2021 +0100

    Linux 5.4.96
    
    Tested-by: Igor Matheus Andrade Torrente <igormtorrente@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210205140652.348864025@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1a1c262e4b0e713e52c63bd3233f1b9d6f2f056
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Jan 15 19:08:36 2021 +0100

    workqueue: Restrict affinity change to rescuer
    
    [ Upstream commit 640f17c82460e9724fd256f0a1f5d99e7ff0bda4 ]
    
    create_worker() will already set the right affinity using
    kthread_bind_mask(), this means only the rescuer will need to change
    it's affinity.
    
    Howveer, while in cpu-hot-unplug a regular task is not allowed to run
    on online&&!active as it would be pushed away quite agressively. We
    need KTHREAD_IS_PER_CPU to survive in that environment.
    
    Therefore set the affinity after getting that magic flag.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Tested-by: Valentin Schneider <valentin.schneider@arm.com>
    Link: https://lkml.kernel.org/r/20210121103506.826629830@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b1e4fc2984eab30c5fffbf2bd1f016577cadab6
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Jan 12 11:24:04 2021 +0100

    kthread: Extract KTHREAD_IS_PER_CPU
    
    [ Upstream commit ac687e6e8c26181a33270efd1a2e2241377924b0 ]
    
    There is a need to distinguish geniune per-cpu kthreads from kthreads
    that happen to have a single CPU affinity.
    
    Geniune per-cpu kthreads are kthreads that are CPU affine for
    correctness, these will obviously have PF_KTHREAD set, but must also
    have PF_NO_SETAFFINITY set, lest userspace modify their affinity and
    ruins things.
    
    However, these two things are not sufficient, PF_NO_SETAFFINITY is
    also set on other tasks that have their affinities controlled through
    other means, like for instance workqueues.
    
    Therefore another bit is needed; it turns out kthread_create_per_cpu()
    already has such a bit: KTHREAD_IS_PER_CPU, which is used to make
    kthread_park()/kthread_unpark() work correctly.
    
    Expose this flag and remove the implicit setting of it from
    kthread_create_on_cpu(); the io_uring usage of it seems dubious at
    best.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Tested-by: Valentin Schneider <valentin.schneider@arm.com>
    Link: https://lkml.kernel.org/r/20210121103506.557620262@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d7ca4a84b589210b633b3c2f2c0b8fc627c97c7
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jan 14 16:14:01 2021 -0600

    objtool: Don't fail on missing symbol table
    
    [ Upstream commit 1d489151e9f9d1647110277ff77282fe4d96d09b ]
    
    Thanks to a recent binutils change which doesn't generate unused
    symbols, it's now possible for thunk_64.o be completely empty without
    CONFIG_PREEMPTION: no text, no data, no symbols.
    
    We could edit the Makefile to only build that file when
    CONFIG_PREEMPTION is enabled, but that will likely create confusion
    if/when the thunks end up getting used by some other code again.
    
    Just ignore it and move on.
    
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1254
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88240f7ac22147e7d831bf052085bb4bbf4d06e6
Author: Bing Guo <bing.guo@amd.com>
Date:   Mon Jan 4 14:09:41 2021 -0500

    drm/amd/display: Change function decide_dp_link_settings to avoid infinite looping
    
    [ Upstream commit 4716a7c50c5c66d6ddc42401e1e0ba13b492e105 ]
    
    Why:
    Function decide_dp_link_settings() loops infinitely when required bandwidth
    can't be supported.
    
    How:
    Check the required bandwidth against verified_link_cap before trying to
    find a link setting for it.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Bing Guo <bing.guo@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53c10bbf9186086485990aed054d852940992d20
Author: Jake Wang <haonan.wang2@amd.com>
Date:   Fri Jan 8 12:27:51 2021 -0500

    drm/amd/display: Update dram_clock_change_latency for DCN2.1
    
    [ Upstream commit 901c1ec05ef277ce9d43cb806a225b28b3efe89a ]
    
    [WHY]
    dram clock change latencies get updated using ddr4 latency table, but
    does that update does not happen before validation. This value
    should not be the default and should be number received from
    df for better mode support.
    This may cause a PState hang on high refresh panels with short vblanks
    such as on 1080p 360hz or 300hz panels.
    
    [HOW]
    Update latency from 23.84 to 11.72.
    
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6eb3dfdac44bea0cc3ac8bc5a28962d1174bbb7
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jan 19 15:18:00 2021 +1100

    selftests/powerpc: Only test lwm/stmw on big endian
    
    [ Upstream commit dd3a44c06f7b4f14e90065bf05d62c255b20005f ]
    
    Newer binutils (>= 2.36) refuse to assemble lmw/stmw when building in
    little endian mode. That breaks compilation of our alignment handler
    test:
    
      /tmp/cco4l14N.s: Assembler messages:
      /tmp/cco4l14N.s:1440: Error: `lmw' invalid when little-endian
      /tmp/cco4l14N.s:1814: Error: `stmw' invalid when little-endian
      make[2]: *** [../../lib.mk:139: /output/kselftest/powerpc/alignment/alignment_handler] Error 1
    
    These tests do pass on little endian machines, as the kernel will
    still emulate those instructions even when running little
    endian (which is arguably a kernel bug).
    
    But we don't really need to test that case, so ifdef those
    instructions out to get the alignment test building again.
    
    Reported-by: Libor Pechacek <lpechacek@suse.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Tested-by: Libor Pechacek <lpechacek@suse.com>
    Link: https://lore.kernel.org/r/20210119041800.3093047-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 805e9cdb57938c9db35d223f7fa78acf868995df
Author: Revanth Rajashekar <revanth.rajashekar@intel.com>
Date:   Thu Jan 14 18:55:07 2021 -0700

    nvme: check the PRINFO bit before deciding the host buffer length
    
    [ Upstream commit 4d6b1c95b974761c01cbad92321b82232b66d2a2 ]
    
    According to NVMe spec v1.4, section 8.3.1, the PRINFO bit and
    the metadata size play a vital role in deteriming the host buffer size.
    
    If PRIFNO bit is set and MS==8, the host doesn't add the metadata buffer,
    instead the controller adds it.
    
    Signed-off-by: Revanth Rajashekar <revanth.rajashekar@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e59209d53c92c8504fc20e7cae4cd91b75d12ad
Author: lianzhi chang <changlianzhi@uniontech.com>
Date:   Thu Jan 14 15:57:41 2021 +0800

    udf: fix the problem that the disc content is not displayed
    
    [ Upstream commit 5cdc4a6950a883594e9640b1decb3fcf6222a594 ]
    
    When the capacity of the disc is too large (assuming the 4.7G
    specification), the disc (UDF file system) will be burned
    multiple times in the windows (Multisession Usage). When the
    remaining capacity of the CD is less than 300M (estimated
    value, for reference only), open the CD in the Linux system,
    the content of the CD is displayed as blank (the kernel will
    say "No VRS found"). Windows can display the contents of the
    CD normally.
    Through analysis, in the "fs/udf/super.c": udf_check_vsd
    function, the actual value of VSD_MAX_SECTOR_OFFSET may
    be much larger than 0x800000. According to the current code
    logic, it is found that the type of sbi->s_session is "__s32",
     when the remaining capacity of the disc is less than 300M
    (take a set of test values: sector=3154903040,
    sbi->s_session=1540464, sb->s_blocksize_bits=11 ), the
    calculation result of "sbi->s_session << sb->s_blocksize_bits"
     will overflow. Therefore, it is necessary to convert the
    type of s_session to "loff_t" (when udf_check_vsd starts,
    assign a value to _sector, which is also converted in this
    way), so that the result will not overflow, and then the
    content of the disc can be displayed normally.
    
    Link: https://lore.kernel.org/r/20210114075741.30448-1-changlianzhi@uniontech.com
    Signed-off-by: lianzhi chang <changlianzhi@uniontech.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d1593543418b21130491946d3103ae48f2dc8f3
Author: Kai-Chuan Hsieh <kaichuan.hsieh@canonical.com>
Date:   Fri Jan 15 11:15:15 2021 +0800

    ALSA: hda: Add Cometlake-R PCI ID
    
    [ Upstream commit f84d3a1ec375e46a55cc3ba85c04272b24bd3921 ]
    
    Add HD Audio Device PCI ID for the Intel Cometlake-R platform
    
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Signed-off-by: Kai-Chuan Hsieh <kaichuan.hsieh@canonical.com>
    Link: https://lore.kernel.org/r/20210115031515.13100-1-kaichuan.hsieh@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c03ecc192c8e59e00b45891de5611d907c9746c2
Author: Brian King <brking@linux.vnet.ibm.com>
Date:   Tue Jan 12 09:06:38 2021 -0600

    scsi: ibmvfc: Set default timeout to avoid crash during migration
    
    [ Upstream commit 764907293edc1af7ac857389af9dc858944f53dc ]
    
    While testing live partition mobility, we have observed occasional crashes
    of the Linux partition. What we've seen is that during the live migration,
    for specific configurations with large amounts of memory, slow network
    links, and workloads that are changing memory a lot, the partition can end
    up being suspended for 30 seconds or longer. This resulted in the following
    scenario:
    
    CPU 0                          CPU 1
    -------------------------------  ----------------------------------
    scsi_queue_rq                    migration_store
     -> blk_mq_start_request          -> rtas_ibm_suspend_me
      -> blk_add_timer                 -> on_each_cpu(rtas_percpu_suspend_me
                  _______________________________________V
                 |
                 V
        -> IPI from CPU 1
         -> rtas_percpu_suspend_me
                                         -> __rtas_suspend_last_cpu
    
    -- Linux partition suspended for > 30 seconds --
                                          -> for_each_online_cpu(cpu)
                                               plpar_hcall_norets(H_PROD
     -> scsi_dispatch_cmd
                                          -> scsi_times_out
                                           -> scsi_abort_command
                                            -> queue_delayed_work
      -> ibmvfc_queuecommand_lck
       -> ibmvfc_send_event
        -> ibmvfc_send_crq
         - returns H_CLOSED
       <- returns SCSI_MLQUEUE_HOST_BUSY
    -> __blk_mq_requeue_request
    
                                          -> scmd_eh_abort_handler
                                           -> scsi_try_to_abort_cmd
                                             - returns SUCCESS
                                           -> scsi_queue_insert
    
    Normally, the SCMD_STATE_COMPLETE bit would protect against the command
    completion and the timeout, but that doesn't work here, since we don't
    check that at all in the SCSI_MLQUEUE_HOST_BUSY path.
    
    In this case we end up calling scsi_queue_insert on a request that has
    already been queued, or possibly even freed, and we crash.
    
    The patch below simply increases the default I/O timeout to avoid this race
    condition. This is also the timeout value that nearly all IBM SAN storage
    recommends setting as the default value.
    
    Link: https://lore.kernel.org/r/1610463998-19791-1-git-send-email-brking@linux.vnet.ibm.com
    Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02cc1ee3e8d1b39f20d494d08dd60cb91246c96a
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Dec 18 19:47:17 2020 +0100

    mac80211: fix fast-rx encryption check
    
    [ Upstream commit 622d3b4e39381262da7b18ca1ed1311df227de86 ]
    
    When using WEP, the default unicast key needs to be selected, instead of
    the STA PTK.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20201218184718.93650-5-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd061fc77f3b73b926a805f0c489cd697ea657c
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Jan 13 02:11:23 2021 +0800

    ASoC: SOF: Intel: hda: Resume codec to do jack detection
    
    [ Upstream commit bcd7059abc19e6ec5b2260dff6a008fb99c4eef9 ]
    
    Instead of queueing jackpoll_work, runtime resume the codec to let it
    use different jack detection methods based on jackpoll_interval.
    
    This partially matches SOF driver's behavior with commit a6e7d0a4bdb0
    ("ALSA: hda: fix jack detection with Realtek codecs when in D3"), the
    difference is SOF unconditionally resumes the codec.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20210112181128.1229827-1-kai.heng.feng@canonical.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0f1ba38f7885fde728b164a24f40d6d67f5a282
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri Dec 25 16:35:20 2020 +0800

    scsi: fnic: Fix memleak in vnic_dev_init_devcmd2
    
    [ Upstream commit d6e3ae76728ccde49271d9f5acfebbea0c5625a3 ]
    
    When ioread32() returns 0xFFFFFFFF, we should execute cleanup functions
    like other error handling paths before returning.
    
    Link: https://lore.kernel.org/r/20201225083520.22015-1-dinghao.liu@zju.edu.cn
    Acked-by: Karan Tilak Kumar <kartilak@cisco.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 935fa0d5a5c55d105973770355394389d010dbfc
Author: Javed Hasan <jhasan@marvell.com>
Date:   Tue Dec 15 11:47:31 2020 -0800

    scsi: libfc: Avoid invoking response handler twice if ep is already completed
    
    [ Upstream commit b2b0f16fa65e910a3ec8771206bb49ee87a54ac5 ]
    
    A race condition exists between the response handler getting called because
    of exchange_mgr_reset() (which clears out all the active XIDs) and the
    response we get via an interrupt.
    
    Sequence of events:
    
             rport ba0200: Port timeout, state PLOGI
             rport ba0200: Port entered PLOGI state from PLOGI state
             xid 1052: Exchange timer armed : 20000 msecs      xid timer armed here
             rport ba0200: Received LOGO request while in state PLOGI
             rport ba0200: Delete port
             rport ba0200: work event 3
             rport ba0200: lld callback ev 3
             bnx2fc: rport_event_hdlr: event = 3, port_id = 0xba0200
             bnx2fc: ba0200 - rport not created Yet!!
             /* Here we reset any outstanding exchanges before
             freeing rport using the exch_mgr_reset() */
             xid 1052: Exchange timer canceled
             /* Here we got two responses for one xid */
             xid 1052: invoking resp(), esb 20000000 state 3
             xid 1052: invoking resp(), esb 20000000 state 3
             xid 1052: fc_rport_plogi_resp() : ep->resp_active 2
             xid 1052: fc_rport_plogi_resp() : ep->resp_active 2
    
    Skip the response if the exchange is already completed.
    
    Link: https://lore.kernel.org/r/20201215194731.2326-1-jhasan@marvell.com
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 335bbffdd90c57f3c50dd439839a55274fb502ad
Author: Martin Wilck <mwilck@suse.com>
Date:   Mon Jan 11 15:25:41 2021 +0100

    scsi: scsi_transport_srp: Don't block target in failfast state
    
    [ Upstream commit 72eeb7c7151302ef007f1acd018cbf6f30e50321 ]
    
    If the port is in SRP_RPORT_FAIL_FAST state when srp_reconnect_rport() is
    entered, a transition to SDEV_BLOCK would be illegal, and a kernel WARNING
    would be triggered. Skip scsi_target_block() in this case.
    
    Link: https://lore.kernel.org/r/20210111142541.21534-1-mwilck@suse.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1f680ffc25b1453b36514b9d84b6b02cb556a6b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Jan 7 11:14:25 2021 +0100

    x86: __always_inline __{rd,wr}msr()
    
    [ Upstream commit 66a425011c61e71560c234492d204e83cfb73d1d ]
    
    When the compiler choses to not inline the trivial MSR helpers:
    
      vmlinux.o: warning: objtool: __sev_es_nmi_complete()+0xce: call to __wrmsr.constprop.14() leaves .noinstr.text section
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Link: https://lore.kernel.org/r/X/bf3gV+BW7kGEsB@hirez.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1aed452c05fc48e4aa32a6ae8264b6e64f34778
Author: Arnold Gozum <arngozum@gmail.com>
Date:   Sat Dec 26 15:53:06 2020 -0500

    platform/x86: intel-vbtn: Support for tablet mode on Dell Inspiron 7352
    
    [ Upstream commit fcd38f178b785623c0325958225744f0d8a075c0 ]
    
    The Dell Inspiron 7352 is a 2-in-1 model that has chassis-type "Notebook".
    Add this model to the dmi_switches_allow_list.
    
    Signed-off-by: Arnold Gozum <arngozum@gmail.com>
    Link: https://lore.kernel.org/r/20201226205307.249659-1-arngozum@gmail.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c99ac721363822f0df58f7abb37f28b5610a3c57
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Dec 24 14:51:58 2020 +0100

    platform/x86: touchscreen_dmi: Add swap-x-y quirk for Goodix touchscreen on Estar Beauty HD tablet
    
    [ Upstream commit 46c54cf2706122c37497896d56d67b0c0aca2ede ]
    
    The Estar Beauty HD (MID 7316R) tablet uses a Goodix touchscreen,
    with the X and Y coordinates swapped compared to the LCD panel.
    
    Add a touchscreen_dmi entry for this adding a "touchscreen-swapped-x-y"
    device-property to the i2c-client instantiated for this device before
    the driver binds.
    
    This is the first entry of a Goodix touchscreen to touchscreen_dmi.c,
    so far DMI quirks for Goodix touchscreen's have been added directly
    to drivers/input/touchscreen/goodix.c. Currently there are 3
    DMI tables in goodix.c:
    1. rotated_screen[] for devices where the touchscreen is rotated
       180 degrees vs the LCD panel
    2. inverted_x_screen[] for devices where the X axis is inverted
    3. nine_bytes_report[] for devices which use a non standard touch
       report size
    
    Arguably only 3. really needs to be inside the driver and the other
    2 cases are better handled through the generic touchscreen DMI quirk
    mechanism from touchscreen_dmi.c, which allows adding device-props to
    any i2c-client. Esp. now that goodix.c is using the generic
    touchscreen_properties code.
    
    Alternative to the approach from this patch we could add a 4th
    dmi_system_id table for devices with swapped-x-y axis to goodix.c,
    but that seems undesirable.
    
    Cc: Bastien Nocera <hadess@hadess.net>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201224135158.10976-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f705e80fb871fad72ec2e95c5b75afe864b15e7
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Dec 30 12:21:05 2020 +0200

    phy: cpcap-usb: Fix warning for missing regulator_disable
    
    [ Upstream commit 764257d9069a9c19758b626cc1ba4ae079335d9e ]
    
    On deferred probe, we will get the following splat:
    
    cpcap-usb-phy cpcap-usb-phy.0: could not initialize VBUS or ID IIO: -517
    WARNING: CPU: 0 PID: 21 at drivers/regulator/core.c:2123 regulator_put+0x68/0x78
    ...
    (regulator_put) from [<c068ebf0>] (release_nodes+0x1b4/0x1fc)
    (release_nodes) from [<c068a9a4>] (really_probe+0x104/0x4a0)
    (really_probe) from [<c068b034>] (driver_probe_device+0x58/0xb4)
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20201230102105.11826-1-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd4c12f3120988789f124c0162e495299b56d1de
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 14 10:19:29 2021 -0800

    net_sched: gen_estimator: support large ewma log
    
    commit dd5e073381f2ada3630f36be42833c6e9c78b75e upstream
    
    syzbot report reminded us that very big ewma_log were supported in the past,
    even if they made litle sense.
    
    tc qdisc replace dev xxx root est 1sec 131072sec ...
    
    While fixing the bug, also add boundary checks for ewma_log, in line
    with range supported by iproute2.
    
    UBSAN: shift-out-of-bounds in net/core/gen_estimator.c:83:38
    shift exponent -1 is negative
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.10.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:395
     est_timer.cold+0xbb/0x12d net/core/gen_estimator.c:83
     call_timer_fn+0x1a5/0x710 kernel/time/timer.c:1417
     expire_timers kernel/time/timer.c:1462 [inline]
     __run_timers.part.0+0x692/0xa80 kernel/time/timer.c:1731
     __run_timers kernel/time/timer.c:1712 [inline]
     run_timer_softirq+0xb3/0x1d0 kernel/time/timer.c:1744
     __do_softirq+0x2bc/0xa77 kernel/softirq.c:343
     asm_call_irq_on_stack+0xf/0x20
     </IRQ>
     __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
     run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
     do_softirq_own_stack+0xaa/0xd0 arch/x86/kernel/irq_64.c:77
     invoke_softirq kernel/softirq.c:226 [inline]
     __irq_exit_rcu+0x17f/0x200 kernel/softirq.c:420
     irq_exit_rcu+0x5/0x20 kernel/softirq.c:432
     sysvec_apic_timer_interrupt+0x4d/0x100 arch/x86/kernel/apic/apic.c:1096
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:628
    RIP: 0010:native_save_fl arch/x86/include/asm/irqflags.h:29 [inline]
    RIP: 0010:arch_local_save_flags arch/x86/include/asm/irqflags.h:79 [inline]
    RIP: 0010:arch_irqs_disabled arch/x86/include/asm/irqflags.h:169 [inline]
    RIP: 0010:acpi_safe_halt drivers/acpi/processor_idle.c:111 [inline]
    RIP: 0010:acpi_idle_do_entry+0x1c9/0x250 drivers/acpi/processor_idle.c:516
    
    Fixes: 1c0d32fde5bd ("net_sched: gen_estimator: complete rewrite of rate estimators")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20210114181929.1717985-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27afc71283452fcb55f7ed191d10538ce2f239fa
Author: ethanwu <ethanwu@synology.com>
Date:   Fri Feb 7 17:38:18 2020 +0800

    btrfs: backref, use correct count to resolve normal data refs
    
    commit b25b0b871f206936d5bca02b80d38c05623e27da upstream.
    
    With the following patches:
    
    - btrfs: backref, only collect file extent items matching backref offset
    - btrfs: backref, not adding refs from shared block when resolving normal backref
    - btrfs: backref, only search backref entries from leaves of the same root
    
    we only collect the normal data refs we want, so the imprecise upper
    bound total_refs of that EXTENT_ITEM could now be changed to the count
    of the normal backref entry we want to search.
    
    Background and how the patches fit together:
    
    Btrfs has two types of data backref.
    For BTRFS_EXTENT_DATA_REF_KEY type of backref, we don't have the
    exact block number. Therefore, we need to call resolve_indirect_refs.
    It uses btrfs_search_slot to locate the leaf block. Then
    we need to walk through the leaves to search for the EXTENT_DATA items
    that have disk bytenr matching the extent item (add_all_parents).
    
    When resolving indirect refs, we could take entries that don't
    belong to the backref entry we are searching for right now.
    For that reason when searching backref entry, we always use total
    refs of that EXTENT_ITEM rather than individual count.
    
    For example:
    item 11 key (40831553536 EXTENT_ITEM 4194304) itemoff 15460 itemsize
      extent refs 24 gen 7302 flags DATA
      shared data backref parent 394985472 count 10 #1
      extent data backref root 257 objectid 260 offset 1048576 count 3 #2
      extent data backref root 256 objectid 260 offset 65536 count 6 #3
      extent data backref root 257 objectid 260 offset 65536 count 5 #4
    
    For example, when searching backref entry #4, we'll use total_refs
    24, a very loose loop ending condition, instead of total_refs = 5.
    
    But using total_refs = 24 is not accurate. Sometimes, we'll never find
    all the refs from specific root.  As a result, the loop keeps on going
    until we reach the end of that inode.
    
    The first 3 patches, handle 3 different types refs we might encounter.
    These refs do not belong to the normal backref we are searching, and
    hence need to be skipped.
    
    This patch changes the total_refs to correct number so that we could
    end loop as soon as we find all the refs we want.
    
    btrfs send uses backref to find possible clone sources, the following
    is a simple test to compare the results with and without this patch:
    
     $ btrfs subvolume create /sub1
     $ for i in `seq 1 163840`; do
         dd if=/dev/zero of=/sub1/file bs=64K count=1 seek=$((i-1)) conv=notrunc oflag=direct
       done
     $ btrfs subvolume snapshot /sub1 /sub2
     $ for i in `seq 1 163840`; do
         dd if=/dev/zero of=/sub1/file bs=4K count=1 seek=$(((i-1)*16+10)) conv=notrunc oflag=direct
       done
     $ btrfs subvolume snapshot -r /sub1 /snap1
     $ time btrfs send /snap1 | btrfs receive /volume2
    
    Without this patch:
    
    real 69m48.124s
    user 0m50.199s
    sys  70m15.600s
    
    With this patch:
    
    real    1m59.683s
    user    0m35.421s
    sys     2m42.684s
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: ethanwu <ethanwu@synology.com>
    [ add patchset cover letter with background and numbers ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66bcf5f6f989c470509100224921dfdb2fe4edae
Author: ethanwu <ethanwu@synology.com>
Date:   Fri Feb 7 17:38:17 2020 +0800

    btrfs: backref, only search backref entries from leaves of the same root
    
    commit cfc0eed0ec89db7c4a8d461174cabfaa4a0912c7 upstream.
    
    We could have some nodes/leaves in subvolume whose owner are not the
    that subvolume. In this way, when we resolve normal backrefs of that
    subvolume, we should avoid collecting those references from these blocks.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: ethanwu <ethanwu@synology.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3089b06d6fe02145db27bc1dd9ad6458e8659ae
Author: ethanwu <ethanwu@synology.com>
Date:   Fri Feb 7 17:38:16 2020 +0800

    btrfs: backref, don't add refs from shared block when resolving normal backref
    
    commit ed58f2e66e849c34826083e5a6c1b506ee8a4d8e upstream.
    
    All references from the block of SHARED_DATA_REF belong to that shared
    block backref.
    
    For example:
    
      item 11 key (40831553536 EXTENT_ITEM 4194304) itemoff 15460 itemsize 95
          extent refs 24 gen 7302 flags DATA
          extent data backref root 257 objectid 260 offset 65536 count 5
          extent data backref root 258 objectid 265 offset 0 count 9
          shared data backref parent 394985472 count 10
    
    Block 394985472 might be leaf from root 257, and the item obejctid and
    (file_pos - file_extent_item::offset) in that leaf just happens to be
    260 and 65536 which is equal to the first extent data backref entry.
    
    Before this patch, when we resolve backref:
    
      root 257 objectid 260 offset 65536
    
    we will add those refs in block 394985472 and wrongly treat those as the
    refs we want.
    
    Fix this by checking if the leaf we are processing is shared data
    backref, if so, just skip this leaf.
    
    Shared data refs added into preftrees.direct have all entry value = 0
    (root_id = 0, key = NULL, level = 0) except parent entry.
    
    Other refs from indirect tree will have key value and root id != 0, and
    these values won't be changed when their parent is resolved and added to
    preftrees.direct. Therefore, we could reuse the preftrees.direct and
    search ref with all values = 0 except parent is set to avoid getting
    those resolved refs block.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: ethanwu <ethanwu@synology.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21a0c97fb27c16475d4bae3930654e1d1cf2c329
Author: ethanwu <ethanwu@synology.com>
Date:   Fri Feb 7 17:38:15 2020 +0800

    btrfs: backref, only collect file extent items matching backref offset
    
    commit 7ac8b88ee668a5b4743ebf3e9888fabac85c334a upstream.
    
    When resolving one backref of type EXTENT_DATA_REF, we collect all
    references that simply reference the EXTENT_ITEM even though their
    (file_pos - file_extent_item::offset) are not the same as the
    btrfs_extent_data_ref::offset we are searching for.
    
    This patch adds additional check so that we only collect references whose
    (file_pos - file_extent_item::offset) == btrfs_extent_data_ref::offset.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: ethanwu <ethanwu@synology.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1960c3d40b6999dba2c7ca2ad333e394bfcc358d
Author: Enke Chen <enchen@paloaltonetworks.com>
Date:   Fri Jan 22 11:13:06 2021 -0800

    tcp: make TCP_USER_TIMEOUT accurate for zero window probes
    
    commit 344db93ae3ee69fc137bd6ed89a8ff1bf5b0db08 upstream.
    
    The TCP_USER_TIMEOUT is checked by the 0-window probe timer. As the
    timer has backoff with a max interval of about two minutes, the
    actual timeout for TCP_USER_TIMEOUT can be off by up to two minutes.
    
    In this patch the TCP_USER_TIMEOUT is made more accurate by taking it
    into account when computing the timer value for the 0-window probes.
    
    This patch is similar to and builds on top of the one that made
    TCP_USER_TIMEOUT accurate for RTOs in commit b701a99e431d ("tcp: Add
    tcp_clamp_rto_to_user_timeout() helper to improve accuracy").
    
    Fixes: 9721e709fa68 ("tcp: simplify window probe aborting on USER_TIMEOUT")
    Signed-off-by: Enke Chen <enchen@paloaltonetworks.com>
    Reviewed-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20210122191306.GA99540@localhost.localdomain
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55cb8e232f9ac72f432b081877faa18848058bd3
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Mon Feb 1 19:06:33 2021 +0000

    arm64: Do not pass tagged addresses to __is_lm_address()
    
    commit 91cb2c8b072e00632adf463b78b44f123d46a0fa upstream.
    
    Commit 519ea6f1c82f ("arm64: Fix kernel address detection of
    __is_lm_address()") fixed the incorrect validation of addresses below
    PAGE_OFFSET. However, it no longer allowed tagged addresses to be passed
    to virt_addr_valid().
    
    Fix this by explicitly resetting the pointer tag prior to invoking
    __is_lm_address(). This is consistent with the __lm_to_phys() macro.
    
    Fixes: 519ea6f1c82f ("arm64: Fix kernel address detection of __is_lm_address()")
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Cc: Will Deacon <will@kernel.org>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/20210201190634.22942-2-catalin.marinas@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b28387cf8f1c76e48e06f2f4cd6f4ac4fee0562f
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Tue Jan 26 13:40:56 2021 +0000

    arm64: Fix kernel address detection of __is_lm_address()
    
    commit 519ea6f1c82fcdc9842908155ae379de47818778 upstream.
    
    Currently, the __is_lm_address() check just masks out the top 12 bits
    of the address, but if they are 0, it still yields a true result.
    This has as a side effect that virt_addr_valid() returns true even for
    invalid virtual addresses (e.g. 0x0).
    
    Fix the detection checking that it's actually a kernel address starting
    at PAGE_OFFSET.
    
    Fixes: 68dd8ef32162 ("arm64: memory: Fix virt_addr_valid() using __is_lm_address()")
    Cc: <stable@vger.kernel.org> # 5.4.x
    Cc: Will Deacon <will@kernel.org>
    Suggested-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lore.kernel.org/r/20210126134056.45747-1-vincenzo.frascino@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11084836e5fbbfd644935e9b78cbd43cb7b4023c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 14 19:34:22 2021 +0100

    ACPI: thermal: Do not call acpi_thermal_check() directly
    
    commit 81b704d3e4674e09781d331df73d76675d5ad8cb upstream.
    
    Calling acpi_thermal_check() from acpi_thermal_notify() directly
    is problematic if _TMP triggers Notify () on the thermal zone for
    which it has been evaluated (which happens on some systems), because
    it causes a new acpi_thermal_notify() invocation to be queued up
    every time and if that takes place too often, an indefinite number of
    pending work items may accumulate in kacpi_notify_wq over time.
    
    Besides, it is not really useful to queue up a new invocation of
    acpi_thermal_check() if one of them is pending already.
    
    For these reasons, rework acpi_thermal_notify() to queue up a thermal
    check instead of calling acpi_thermal_check() directly and only allow
    one thermal check to be pending at a time.  Moreover, only allow one
    acpi_thermal_check_fn() instance at a time to run
    thermal_zone_device_update() for one thermal zone and make it return
    early if it sees other instances running for the same thermal zone.
    
    While at it, fold acpi_thermal_check() into acpi_thermal_check_fn(),
    as it is only called from there after the other changes made here.
    
    [This issue appears to have been exposed by commit 6d25be5782e4
     ("sched/core, workqueues: Distangle worker accounting from rq
     lock"), but it is unclear why it was not visible earlier.]
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=208877
    Reported-by: Stephen Berman <stephen.berman@gmx.net>
    Diagnosed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Tested-by: Stephen Berman <stephen.berman@gmx.net>
    Cc: All applicable <stable@vger.kernel.org>
    [bigeasy: Backported to v5.4.y]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1410d2b68207cbb3bc16a4db7d655f5e06a39929
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Feb 4 16:02:10 2021 +0100

    Revert "Revert "block: end bio with BLK_STS_AGAIN in case of non-mq devs and REQ_NOWAIT""
    
    This reverts commit bba91cdba612fbce4f8575c5d94d2b146fb83ea3 which is
    commit b0beb28097fa04177b3769f4bb7a0d0d9c4ae76e upstream.
    
    It breaks things in 5.4.y, so let's drop it.
    
    Reported-by: Andres Freund <andres@anarazel.de>
    Cc: Bijan Mottahedeh <bijan.mottahedeh@oracle.com>
    CC: Jens Axboe <axboe@kernel.dk>
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e8776df14fa8b88b00ba833f6947c88fec95570
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Wed Jan 27 19:34:42 2021 -0600

    ibmvnic: Ensure that CRQ entry read are correctly ordered
    
    commit e41aec79e62fa50f940cf222d1e9577f14e149dc upstream.
    
    Ensure that received Command-Response Queue (CRQ) entries are
    properly read in order by the driver. dma_rmb barrier has
    been added before accessing the CRQ descriptor to ensure
    the entire descriptor is read before processing.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20210128013442.88319-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc4e7277cc93b12b6c51b803c32b89700437d607
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Mon Jan 25 13:41:16 2021 +0100

    net: switchdev: don't set port_obj_info->handled true when -EOPNOTSUPP
    
    commit 20776b465c0c249f5e5b5b4fe077cd24ef1cda86 upstream.
    
    It's not true that switchdev_port_obj_notify() only inspects the
    ->handled field of "struct switchdev_notifier_port_obj_info" if
    call_switchdev_blocking_notifiers() returns 0 - there's a WARN_ON()
    triggering for a non-zero return combined with ->handled not being
    true. But the real problem here is that -EOPNOTSUPP is not being
    properly handled.
    
    The wrapper functions switchdev_handle_port_obj_add() et al change a
    return value of -EOPNOTSUPP to 0, and the treatment of ->handled in
    switchdev_port_obj_notify() seems to be designed to change that back
    to -EOPNOTSUPP in case nobody actually acted on the notifier (i.e.,
    everybody returned -EOPNOTSUPP).
    
    Currently, as soon as some device down the stack passes the check_cb()
    check, ->handled gets set to true, which means that
    switchdev_port_obj_notify() cannot actually ever return -EOPNOTSUPP.
    
    This, for example, means that the detection of hardware offload
    support in the MRP code is broken: switchdev_port_obj_add() used by
    br_mrp_switchdev_send_ring_test() always returns 0, so since the MRP
    code thinks the generation of MRP test frames has been offloaded, no
    such frames are actually put on the wire. Similarly,
    br_mrp_switchdev_set_ring_role() also always returns 0, causing
    mrp->ring_role_offloaded to be set to 1.
    
    To fix this, continue to set ->handled true if any callback returns
    success or any error distinct from -EOPNOTSUPP. But if all the
    callbacks return -EOPNOTSUPP, make sure that ->handled stays false, so
    the logic in switchdev_port_obj_notify() can propagate that
    information.
    
    Fixes: 9a9f26e8f7ea ("bridge: mrp: Connect MRP API with the switchdev API")
    Fixes: f30f0601eb93 ("switchdev: Add helpers to aid traversal through lower devices")
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Link: https://lore.kernel.org/r/20210125124116.102928-1-rasmus.villemoes@prevas.dk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9edebe46010c2b50b0d54ac859f666a43ea6e274
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 04:33:43 2021 -0800

    net: dsa: bcm_sf2: put device node before return
    
    commit cf3c46631e1637582f517a574c77cd6c05793817 upstream.
    
    Put the device node dn before return error code on failure path.
    
    Fixes: 461cd1b03e32 ("net: dsa: bcm_sf2: Register our slave MDIO bus")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/20210121123343.26330-1-bianpan2016@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
