commit 67cb016870e2fa9ffc8d34cf20db5331e6f2cf4d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jun 22 09:31:27 2020 +0200

    Linux 5.4.48

commit 8e38ea68da06b45949b8442fc1359dc69dac8637
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Jun 2 14:25:05 2020 +0300

    perf symbols: Fix kernel maps for kcore and eBPF
    
    commit 0affd0e5262b6d40f5f63466d88933e99698e240 upstream.
    
    Adjust 'map->pgoff' also when moving a map's start address.
    
    Example with v5.4.34 based kernel:
    
      Before:
    
        $ sudo tools/perf/perf record -a --kcore -e intel_pt//k sleep 1
        [ perf record: Woken up 1 times to write data ]
        [ perf record: Captured and wrote 1.958 MB perf.data ]
        $ sudo tools/perf/perf script --itrace=e >/dev/null
        Warning:
        961 instruction trace errors
    
      After:
    
        $ sudo tools/perf/perf script --itrace=e >/dev/null
        $
    
    Committer testing:
    
      # uname -a
      Linux seventh 5.6.10-100.fc30.x86_64 #1 SMP Mon May 4 15:36:44 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
      #
    
    Before:
    
      # perf record -a --kcore -e intel_pt//k sleep 1
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.923 MB perf.data ]
      # perf script --itrace=e >/dev/null
      Warning:
      295 instruction trace errors
      #
    
    After:
    
      # perf record -a --kcore -e intel_pt//k sleep 1
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.919 MB perf.data ]
      # perf script --itrace=e >/dev/null
      #
    
    Fixes: fb5a88d4131a ("perf tools: Preserve eBPF maps when loading kcore")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200602112505.1406-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 807cc607f129e7a6ca58afa70efdab70745766cd
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue May 26 18:52:07 2020 +0300

    perf symbols: Fix debuginfo search for Ubuntu
    
    commit 85afd35575a3c1a3a905722dde5ee70b49282e70 upstream.
    
    Reportedly, from 19.10 Ubuntu has begun mixing up the location of some
    debug symbol files, putting files expected to be in
    /usr/lib/debug/usr/lib into /usr/lib/debug/lib instead. Fix by adding
    another dso_binary_type.
    
    Example on Ubuntu 20.04
    
      Before:
    
        $ perf record -e intel_pt//u uname
        Linux
        [ perf record: Woken up 1 times to write data ]
        [ perf record: Captured and wrote 0.030 MB perf.data ]
        $ perf script --call-trace | head -5
               uname 14003 [005] 15321.764958566:  cbr: 42 freq: 4219 MHz (156%)
               uname 14003 [005] 15321.764958566: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )          7f1e71cc4100
               uname 14003 [005] 15321.764961566: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )              7f1e71cc4df0
               uname 14003 [005] 15321.764961900: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )              7f1e71cc4e18
               uname 14003 [005] 15321.764963233: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )              7f1e71cc5128
    
      After:
    
        $ perf script --call-trace | head -5
               uname 14003 [005] 15321.764958566:  cbr: 42 freq: 4219 MHz (156%)
               uname 14003 [005] 15321.764958566: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )      _start
               uname 14003 [005] 15321.764961566: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )          _dl_start
               uname 14003 [005] 15321.764961900: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )          _dl_start
               uname 14003 [005] 15321.764963233: (/usr/lib/x86_64-linux-gnu/ld-2.31.so              )          _dl_start
    
    Reported-by: Travis Downs <travis.downs@gmail.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200526155207.9172-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 842645de05d514ec925318450d210a38bc3abb62
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Apr 23 20:01:13 2020 +0900

    perf probe: Check address correctness by map instead of _etext
    
    commit 2ae5d0d7d8868df7c05c2013c0b9cddd4d40610e upstream.
    
    Since commit 03db8b583d1c ("perf tools: Fix
    maps__find_symbol_by_name()") introduced map address range check in
    maps__find_symbol_by_name(), we can not get "_etext" from kernel map
    because _etext is placed on the edge of the kernel .text section (=
    kernel map in perf.)
    
    To fix this issue, this checks the address correctness by map address
    range information (map->start and map->end) instead of using _etext
    address.
    
    This can cause an error if the target inlined function is embedded in
    both __init function and normal function.
    
    For exaample, request_resource() is a normal function but also embedded
    in __init reserve_setup(). In this case, the probe point in
    reserve_setup() must be skipped.
    
    However, without this fix, it failes to setup all probe points:
    
      # ./perf probe -v request_resource
      probe-definition(0): request_resource
      symbol:request_resource file:(null) line:0 offset:0 return:0 lazy:(null)
      0 arguments
      Looking at the vmlinux_path (8 entries long)
      Using /usr/lib/debug/lib/modules/5.5.17-200.fc31.x86_64/vmlinux for symbols
      Open Debuginfo file: /usr/lib/debug/lib/modules/5.5.17-200.fc31.x86_64/vmlinux
      Try to find probe point from debuginfo.
      Matched function: request_resource [15e29ad]
      found inline addr: 0xffffffff82fbf892
      Probe point found: reserve_setup+204
      found inline addr: 0xffffffff810e9790
      Probe point found: request_resource+0
      Found 2 probe_trace_events.
      Opening /sys/kernel/debug/tracing//kprobe_events write=1
      Opening /sys/kernel/debug/tracing//README write=0
      Writing event: p:probe/request_resource _text+33290386
      Failed to write event: Invalid argument
        Error: Failed to add events. Reason: Invalid argument (Code: -22)
      #
    
    With this fix,
    
      # ./perf probe request_resource
      reserve_setup is out of .text, skip it.
      Added new events:
        (null):(null)        (on request_resource)
        probe:request_resource (on request_resource)
    
      You can now use it in all perf tools, such as:
    
            perf record -e probe:request_resource -aR sleep 1
    
      #
    
    Fixes: 03db8b583d1c ("perf tools: Fix maps__find_symbol_by_name()")
    Reported-by: Arnaldo Carvalho de Melo <acme@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/158763967332.30755.4922496724365529088.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be781abe3ae812630d786dfdeba1b09f7e417525
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Apr 23 20:01:04 2020 +0900

    perf probe: Fix to check blacklist address correctly
    
    commit 80526491c2ca6abc028c0f0dbb0707a1f35fb18a upstream.
    
    Fix to check kprobe blacklist address correctly with relocated address
    by adjusting debuginfo address.
    
    Since the address in the debuginfo is same as objdump, it is different
    from relocated kernel address with KASLR.  Thus, 'perf probe' always
    misses to catch the blacklisted addresses.
    
    Without this patch, 'perf probe' can not detect the blacklist addresses
    on a KASLR enabled kernel.
    
      # perf probe kprobe_dispatcher
      Failed to write event: Invalid argument
        Error: Failed to add events.
      #
    
    With this patch, it correctly shows the error message.
    
      # perf probe kprobe_dispatcher
      kprobe_dispatcher is blacklisted function, skip it.
      Probe point 'kprobe_dispatcher' not found.
        Error: Failed to add events.
      #
    
    Fixes: 9aaf5a5f479b ("perf probe: Check kprobes blacklist when adding new events")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/158763966411.30755.5882376357738273695.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2e097910334909f8cfbfc9ca403b395d87b7f94
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Apr 23 20:01:22 2020 +0900

    perf probe: Do not show the skipped events
    
    commit f41ebe9defacddeae96a872a33f0f22ced0bfcef upstream.
    
    When a probe point is expanded to several places (like inlined) and if
    some of them are skipped because of blacklisted or __init function,
    those trace_events has no event name. It must be skipped while showing
    results.
    
    Without this fix, you can see "(null):(null)" on the list,
    
      # ./perf probe request_resource
      reserve_setup is out of .text, skip it.
      Added new events:
        (null):(null)        (on request_resource)
        probe:request_resource (on request_resource)
    
      You can now use it in all perf tools, such as:
    
            perf record -e probe:request_resource -aR sleep 1
    
      #
    
    With this fix, it is ignored:
    
      # ./perf probe request_resource
      reserve_setup is out of .text, skip it.
      Added new events:
        probe:request_resource (on request_resource)
    
      You can now use it in all perf tools, such as:
    
            perf record -e probe:request_resource -aR sleep 1
    
      #
    
    Fixes: 5a51fcd1f30c ("perf probe: Skip kernel symbols which is out of .text")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/158763968263.30755.12800484151476026340.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9660edf6729d64b037a1c09ea2a01522afc9a1ca
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri May 15 17:20:50 2020 -0700

    f2fs: fix checkpoint=disable:%u%%
    
    commit 1ae18f71cb522684bac1718f5c188fb5e30eb23d upstream.
    
    When parsing the mount option, we don't have sbi->user_block_count.
    Should do it after getting it.
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1866b1493e2e438297ee5ec4600722bbe15b023d
Author: H. Nikolaus Schaller <hns@goldelico.com>
Date:   Sat May 23 19:32:54 2020 +0200

    w1: omap-hdq: cleanup to add missing newline for some dev_dbg
    
    commit 5e02f3b31704e24537697bce54f8156bdb72b7a6 upstream.
    
    Otherwise it will corrupt the console log during debugging.
    
    Fixes: 7b5362a603a1 ("w1: omap_hdq: Fix some error/debug handling.")
    Cc: stable@vger.kernel.org
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: H. Nikolaus Schaller <hns@goldelico.com>
    Link: https://lore.kernel.org/r/cd0d55749a091214106575f6e1d363c6db56622f.1590255176.git.hns@goldelico.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2140d7d5d8787a1dac2dba74f8313b4df064436f
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:29 2020 +0200

    mtd: rawnand: tmio: Fix the probe error path
    
    commit 75e9a330a9bd48f97a55a08000236084fe3dae56 upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense even if this commit is not
    introducing any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-57-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec851b26a3e5987b98ccf45b6995b8dd460d394f
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:00 2020 +0200

    mtd: rawnand: mtk: Fix the probe error path
    
    commit 8a82bbcadec877f5f938c54026278dfc1f05a332 upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense even if this commit is not
    introducing any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-28-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5404756b54f464e2003326568a07ac9f17fe6c0
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:13 2020 +0200

    mtd: rawnand: pasemi: Fix the probe error path
    
    commit f51466901c07e6930435d30b02a21f0841174f61 upstream.
    
    nand_cleanup() is supposed to be called on error after a successful
    call to nand_scan() to free all NAND resources.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible, hence pointing it as the commit to
    fix for backporting purposes, even if this commit is not introducing
    any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-41-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44a9bf52ef80f0756d12c7f6082bf5b221161f71
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:15 2020 +0200

    mtd: rawnand: plat_nand: Fix the probe error path
    
    commit 5284024b4dac5e94f7f374ca905c7580dbc455e9 upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible, hence pointing it as the commit to
    fix for backporting purposes, even if this commit is not introducing
    any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-43-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab702f81e97856fd5e1d6a5370383f84ed0110af
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:26 2020 +0200

    mtd: rawnand: sunxi: Fix the probe error path
    
    commit 3d84515ffd8fb657e10fa5b1215e9f095fa7efca upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    Fixes: 1fef62c1423b ("mtd: nand: add sunxi NAND flash controller support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-54-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d77d5575e09c980804487c731e65407a3f7e5cc
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:09 2020 +0200

    mtd: rawnand: oxnas: Fix the probe error path
    
    commit 154298e2a3f6c9ce1d76cdb48d89fd5b107ea1a3 upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    While at it, be consistent and move the function call in the error
    path thanks to a goto statement.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-37-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d6b0901b834c3d7d39b3f0ff6227753b3b2ad2e
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:23 2020 +0200

    mtd: rawnand: socrates: Fix the probe error path
    
    commit 9c6c2e5cc77119ce0dacb4f9feedb73ce0354421 upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense even if this commit is not
    introducing any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-51-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a54e242870bfa7e61a256c53221f94686dc91e0
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:06 2020 +0200

    mtd: rawnand: orion: Fix the probe error path
    
    commit be238fbf78e4c7c586dac235ab967d3e565a4d1a upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense even if this commit is not
    introducing any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-34-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b19623af5a6cf1473023bac7422c2e0d3da8441
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:33 2020 +0200

    mtd: rawnand: xway: Fix the probe error path
    
    commit 34531be5e804a8e1abf314a6c3a19fe342e4a154 upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense even if this commit is not
    introducing any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-61-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae7cf595e15b11a77c32685d97a93c8378ac0140
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 14:59:54 2020 +0200

    mtd: rawnand: ingenic: Fix the probe error path
    
    commit de17cade0e034e9b721a6db9b488014effac1e5a upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no real Fixes tag applying here as the use of nand_release()
    in this driver predates the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. Hence, pointing it as the commit to
    fix for backporting purposes, even if this commit is not introducing
    any bug makes sense.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Cc: Paul Cercueil <paul@crapouillou.net>
    Cc: Harvey Hunt <harveyhuntnexus@gmail.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-22-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38abdd9bf77cd1ac6ea91eebca929b61f11b3ef8
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:21 2020 +0200

    mtd: rawnand: sharpsl: Fix the probe error path
    
    commit 0f44b3275b3798ccb97a2f51ac85871c30d6fbbc upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    There is no Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-49-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d695fbaa5cbfc67cca9716094053c48297bbf88
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 14:59:45 2020 +0200

    mtd: rawnand: diskonchip: Fix the probe error path
    
    commit c5be12e45940f1aa1b5dfa04db5d15ad24f7c896 upstream.
    
    Not sure nand_cleanup() is the right function to call here but in any
    case it is not nand_release(). Indeed, even a comment says that
    calling nand_release() is a bit of a hack as there is no MTD device to
    unregister. So switch to nand_cleanup() for now and drop this
    comment.
    
    There is no Fixes tag applying here as the use of nand_release()
    in this driver predates by far the introduction of nand_cleanup() in
    commit d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    which makes this change possible. However, pointing this commit as the
    culprit for backporting purposes makes sense even if it did not intruce
    any bug.
    
    Fixes: d44154f969a4 ("mtd: nand: Provide nand_cleanup() function to free NAND related resources")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-13-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1260c45ac55b622e1afba0a06b1b2d2a6c658c95
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Tue May 12 09:57:32 2020 +0200

    mtd: rawnand: brcmnand: fix hamming oob layout
    
    commit 130bbde4809b011faf64f99dddc14b4b01f440c3 upstream.
    
    First 2 bytes are used in large-page nand.
    
    Fixes: ef5eeea6e911 ("mtd: nand: brcm: switch to mtd_ooblayout_ops")
    Cc: stable@vger.kernel.org
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200512075733.745374-2-noltari@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba4ffbb5592d0a38350912484fd4bc89e4aebb54
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Apr 28 11:42:56 2020 +0200

    mtd: rawnand: onfi: Fix redundancy detection check
    
    commit 1d5d08ee9b28cff907326b4ad5a2463fd2808be1 upstream.
    
    During ONFI detection, the CRC derived from the parameter page and the
    CRC supposed to be at the end of the parameter page are compared. If
    they do not match, the second then the third copies of the page are
    tried.
    
    The current implementation compares the newly derived CRC with the CRC
    contained in the first page only. So if this particular CRC area has
    been corrupted, then the detection will fail for a wrong reason.
    
    Fix this issue by checking the derived CRC against the right one.
    
    Fixes: 39138c1f4a31 ("mtd: rawnand: use bit-wise majority to recover the ONFI param page")
    Cc: stable@vger.kernel.org
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@collabora.com>
    Link: https://lore.kernel.org/linux-mtd/20200428094302.14624-4-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 869a782420dacb215c9365e0f22f9c5eaf1faef1
Author: Boris Brezillon <boris.brezillon@collabora.com>
Date:   Mon May 18 17:52:37 2020 +0200

    mtd: rawnand: Fix nand_gpio_waitrdy()
    
    commit e45a4b652dbd2f8b5a3b8e97e89f602a58cb28aa upstream.
    
    Mimic what's done in nand_soft_waitrdy() and add one to the jiffies
    timeout so we don't end up waiting less than actually required.
    
    Reported-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Fixes: b0e137ad24b6c ("mtd: rawnand: Provide helper for polling GPIO R/B pin")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Reviewed-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200518155237.297549-1-boris.brezillon@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5084eadf193b73e9e38b93f52fabad43d1fd268
Author: NeilBrown <neilb@suse.de>
Date:   Fri May 22 12:01:33 2020 +1000

    sunrpc: clean up properly in gss_mech_unregister()
    
    commit 24c5efe41c29ee3e55bcf5a1c9f61ca8709622e8 upstream.
    
    gss_mech_register() calls svcauth_gss_register_pseudoflavor() for each
    flavour, but gss_mech_unregister() does not call auth_domain_put().
    This is unbalanced and makes it impossible to reload the module.
    
    Change svcauth_gss_register_pseudoflavor() to return the registered
    auth_domain, and save it for later release.
    
    Cc: stable@vger.kernel.org (v2.6.12+)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206651
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a68a2e25e20a896444f172801be95d1d182992b
Author: NeilBrown <neilb@suse.de>
Date:   Fri May 22 12:01:33 2020 +1000

    sunrpc: svcauth_gss_register_pseudoflavor must reject duplicate registrations.
    
    commit d47a5dc2888fd1b94adf1553068b8dad76cec96c upstream.
    
    There is no valid case for supporting duplicate pseudoflavor
    registrations.
    Currently the silent acceptance of such registrations is hiding a bug.
    The rpcsec_gss_krb5 module registers 2 flavours but does not unregister
    them, so if you load, unload, reload the module, it will happily
    continue to use the old registration which now has pointers to the
    memory were the module was originally loaded.  This could lead to
    unexpected results.
    
    So disallow duplicate registrations.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206651
    Cc: stable@vger.kernel.org (v2.6.12+)
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4f7a7260737a040d43c64c0eb1421daeb83f583
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun May 31 17:47:06 2020 +0900

    kbuild: force to build vmlinux if CONFIG_MODVERSION=y
    
    commit 4b50c8c4eaf06a825d1c005c0b1b4a8307087b83 upstream.
    
    This code does not work as stated in the comment.
    
    $(CONFIG_MODVERSIONS) is always empty because it is expanded before
    include/config/auto.conf is included. Hence, 'make modules' with
    CONFIG_MODVERSION=y cannot record the version CRCs.
    
    This has been broken since 2003, commit ("kbuild: Enable modules to be
    build using the "make dir/" syntax"). [1]
    
    [1]: https://git.kernel.org/pub/scm/linux/kernel/git/history/history.git/commit/?id=15c6240cdc44bbeef3c4797ec860f9765ef4f1a7
    Cc: linux-stable <stable@vger.kernel.org> # v2.5.71+
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b0d830e0ce03679fe92a0501f5c7990a2952c21
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 28 00:58:42 2020 +1000

    powerpc/64s: Save FSCR to init_task.thread.fscr after feature init
    
    commit 912c0a7f2b5daa3cbb2bc10f303981e493de73bd upstream.
    
    At boot the FSCR is initialised via one of two paths. On most systems
    it's set to a hard coded value in __init_FSCR().
    
    On newer skiboot systems we use the device tree CPU features binding,
    where firmware can tell Linux what bits to set in FSCR (and HFSCR).
    
    In both cases the value that's configured at boot is not propagated
    into the init_task.thread.fscr value prior to the initial fork of init
    (pid 1), which means the value is not used by any processes other than
    swapper (the idle task).
    
    For the __init_FSCR() case this is OK, because the value in
    init_task.thread.fscr is initialised to something sensible. However it
    does mean that the value set in __init_FSCR() is not used other than
    for swapper, which is odd and confusing.
    
    The bigger problem is for the device tree CPU features case it
    prevents firmware from setting (or clearing) FSCR bits for use by user
    space. This means all existing kernels can not have features
    enabled/disabled by firmware if those features require
    setting/clearing FSCR bits.
    
    We can handle both cases by saving the FSCR value into
    init_task.thread.fscr after we have initialised it at boot. This fixes
    the bug for device tree CPU features, and will allow us to simplify
    the initialisation for the __init_FSCR() case in a future patch.
    
    Fixes: 5a61ef74f269 ("powerpc/64s: Support new device tree binding for discovering CPU features")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200527145843.2761782-3-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3b357d8307922511d93a3c113918e888ba1e579
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 28 00:58:41 2020 +1000

    powerpc/64s: Don't let DT CPU features set FSCR_DSCR
    
    commit 993e3d96fd08c3ebf7566e43be9b8cd622063e6d upstream.
    
    The device tree CPU features binding includes FSCR bit numbers which
    Linux is instructed to set by firmware.
    
    Whether that's a good idea or not, in the case of the DSCR the Linux
    implementation has a hard requirement that the FSCR_DSCR bit not be
    set by default. We use it to track when a process reads/writes to
    DSCR, so it must be clear to begin with.
    
    So if firmware tells us to set FSCR_DSCR we must ignore it.
    
    Currently this does not cause a bug in our DSCR handling because the
    value of FSCR that the device tree CPU features code establishes is
    only used by swapper. All other tasks use the value hard coded in
    init_task.thread.fscr.
    
    However we'd like to fix that in a future commit, at which point this
    will become necessary.
    
    Fixes: 5a61ef74f269 ("powerpc/64s: Support new device tree binding for discovering CPU features")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200527145843.2761782-2-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d9a4422c9ac33d1e39a16ad1cd93f0a5a00a2e3
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Thu May 28 10:17:04 2020 +0000

    powerpc/32: Disable KASAN with pages bigger than 16k
    
    commit 888468ce725a4cd56d72dc7e5096078f7a9251a0 upstream.
    
    Mapping of early shadow area is implemented by using a single static
    page table having all entries pointing to the same early shadow page.
    The shadow area must therefore occupy full PGD entries.
    
    The shadow area has a size of 128MB starting at 0xf8000000.
    With 4k pages, a PGD entry is 4MB
    With 16k pages, a PGD entry is 64MB
    With 64k pages, a PGD entry is 1GB which is too big.
    
    Until we rework the early shadow mapping, disable KASAN when the page
    size is too big.
    
    Fixes: 2edb16efc899 ("powerpc/32: Add KASAN support")
    Cc: stable@vger.kernel.org # v5.2+
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/7195fcde7314ccbf7a081b356084a69d421b10d4.1590660977.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4719cb8a16af1ba2c63c77b3cf5914e038a984ad
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Tue May 19 05:48:45 2020 +0000

    powerpc/kasan: Fix shadow pages allocation failure
    
    commit d2a91cef9bbdeb87b7449fdab1a6be6000930210 upstream.
    
    Doing kasan pages allocation in MMU_init is too early, kernel doesn't
    have access yet to the entire memory space and memblock_alloc() fails
    when the kernel is a bit big.
    
    Do it from kasan_init() instead.
    
    Fixes: 2edb16efc899 ("powerpc/32: Add KASAN support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/c24163ee5d5f8cdf52fefa45055ceb35435b8f15.1589866984.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 002d22c4945a9fc4783a787dd4606c42c0871be7
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Tue May 19 05:48:44 2020 +0000

    powerpc/kasan: Fix issues by lowering KASAN_SHADOW_END
    
    commit 3a66a24f6060e6775f8c02ac52329ea0152d7e58 upstream.
    
    At the time being, KASAN_SHADOW_END is 0x100000000, which
    is 0 in 32 bits representation.
    
    This leads to a couple of issues:
    - kasan_remap_early_shadow_ro() does nothing because the comparison
    k_cur < k_end is always false.
    - In ptdump, address comparison for markers display fails and the
    marker's name is printed at the start of the KASAN area instead of
    being printed at the end.
    
    However, there is no need to shadow the KASAN shadow area itself,
    so the KASAN shadow area can stop shadowing memory at the start
    of itself.
    
    With a PAGE_OFFSET set to 0xc0000000, KASAN shadow area is then going
    from 0xf8000000 to 0xff000000.
    
    Fixes: cbd18991e24f ("powerpc/mm: Fix an Oops in kasan_mmu_init()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/ae1a3c0d19a37410c209c3fc453634cfcc0ee318.1589866984.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23e07a77aa7c871d1d976a6499a9919d00280cd3
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Sat May 30 17:16:33 2020 +0000

    powerpc/32s: Fix another build failure with CONFIG_PPC_KUAP_DEBUG
    
    commit 74016701fe5f873ae23bf02835407227138d874d upstream.
    
    'thread' doesn't exist in kuap_check() macro.
    
    Use 'current' instead.
    
    Fixes: a68c31fc01ef ("powerpc/32s: Implement Kernel Userspace Access Protection")
    Cc: stable@vger.kernel.org
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/b459e1600b969047a74e34251a84a3d6fdf1f312.1590858925.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6077abc067fb6bf57a2b1acffd918b1b9211047
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 23 16:00:38 2020 +1000

    drivers/macintosh: Fix memleak in windfarm_pm112 driver
    
    commit 93900337b9ac2f4eca427eff6d187be2dc3b5551 upstream.
    
    create_cpu_loop() calls smu_sat_get_sdb_partition() which does
    kmalloc() and returns the allocated buffer. In fact it's called twice,
    and neither buffer is freed.
    
    This results in a memory leak as reported by Erhard:
      unreferenced object 0xc00000047081f840 (size 32):
        comm "kwindfarm", pid 203, jiffies 4294880630 (age 5552.877s)
        hex dump (first 32 bytes):
          c8 06 02 7f ff 02 ff 01 fb bf 00 41 00 20 00 00  ...........A. ..
          00 07 89 37 00 a0 00 00 00 00 00 00 00 00 00 00  ...7............
        backtrace:
          [<0000000083f0a65c>] .smu_sat_get_sdb_partition+0xc4/0x2d0 [windfarm_smu_sat]
          [<000000003010fcb7>] .pm112_wf_notify+0x104c/0x13bc [windfarm_pm112]
          [<00000000b958b2dd>] .notifier_call_chain+0xa8/0x180
          [<0000000070490868>] .blocking_notifier_call_chain+0x64/0x90
          [<00000000131d8149>] .wf_thread_func+0x114/0x1a0
          [<000000000d54838d>] .kthread+0x13c/0x190
          [<00000000669b72bc>] .ret_from_kernel_thread+0x58/0x64
      unreferenced object 0xc0000004737089f0 (size 16):
        comm "kwindfarm", pid 203, jiffies 4294880879 (age 5552.050s)
        hex dump (first 16 bytes):
          c4 04 01 7f 22 11 e0 e6 ff 55 7b 12 ec 11 00 00  ...."....U{.....
        backtrace:
          [<0000000083f0a65c>] .smu_sat_get_sdb_partition+0xc4/0x2d0 [windfarm_smu_sat]
          [<00000000b94ef7e1>] .pm112_wf_notify+0x1294/0x13bc [windfarm_pm112]
          [<00000000b958b2dd>] .notifier_call_chain+0xa8/0x180
          [<0000000070490868>] .blocking_notifier_call_chain+0x64/0x90
          [<00000000131d8149>] .wf_thread_func+0x114/0x1a0
          [<000000000d54838d>] .kthread+0x13c/0x190
          [<00000000669b72bc>] .ret_from_kernel_thread+0x58/0x64
    
    Fix it by rearranging the logic so we deal with each buffer
    separately, which then makes it easy to free the buffer once we're
    done with it.
    
    Fixes: ac171c46667c ("[PATCH] powerpc: Thermal control for dual core G5s")
    Cc: stable@vger.kernel.org # v2.6.16+
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Tested-by: Erhard F. <erhard_f@mailbox.org>
    Link: https://lore.kernel.org/r/20200423060038.3308530-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d5144d7dc5db8c57174771945dc1d6c4266e8b2
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Fri May 1 16:50:05 2020 -0700

    ARM: dts: s5pv210: Set keep-power-in-suspend for SDHCI1 on Aries
    
    commit 869d42e6eba821905e1a0950623aadafe1a6e6d3 upstream.
    
    SDHCI1 is connected to a BCM4329 WiFi/BT chip which requires
    power to be kept over suspend.  As the surrounding hardware supports
    this, mark it as such.  This fixes WiFi after a suspend/resume cycle.
    
    Fixes: 170642468a51 ("ARM: dts: s5pv210: Add initial DTS for Samsung Aries based phones")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 727111d44a591bdce3b4dc6e3d32c752e90da757
Author: Ludovic Desroches <ludovic.desroches@microchip.com>
Date:   Thu Apr 2 00:19:47 2020 +0200

    ARM: dts: at91: sama5d2_ptc_ek: fix vbus pin
    
    commit baa998aecb75c04d62be0a4ab6b724af6d73a0f9 upstream.
    
    The gpio property for the vbus pin doesn't match the pinctrl and is
    not correct.
    
    Signed-off-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Fixes: 42ed535595ec "ARM: dts: at91: introduce the sama5d2 ptc ek board"
    Cc: stable@vger.kernel.org # 4.19 and later
    Link: https://lore.kernel.org/r/20200401221947.41502-1-ludovic.desroches@microchip.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bfcafbb4d1e93a1bb14978dcef84b1179cffe59
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Mar 26 15:20:37 2020 +0100

    ARM: dts: exynos: Fix GPIO polarity for thr GalaxyS3 CM36651 sensor's bus
    
    commit 8807d356bfea92b0a8f04ce421800ed83400cd22 upstream.
    
    GPIO lines for the CM36651 sensor I2C bus use the normal not the inverted
    polarity. This bug has been there since adding the CM36651 sensor by
    commit 85cb4e0bd229 ("ARM: dts: add cm36651 light/proximity sensor node
    for exynos4412-trats2"), but went unnoticed because the "i2c-gpio"
    driver ignored the GPIO polarity specified in the device-tree.
    
    The recent conversion of "i2c-gpio" driver to the new, descriptor based
    GPIO API, automatically made it the DT-specified polarity aware, what
    broke the CM36651 sensor operation.
    
    Fixes: 85cb4e0bd229 ("ARM: dts: add cm36651 light/proximity sensor node for exynos4412-trats2")
    CC: stable@vger.kernel.org # 4.16+
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c7ca9ab5abc5c73c02441b418cd33b10b85f67a
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Wed Mar 18 15:25:08 2020 +0000

    soc/tegra: pmc: Select GENERIC_PINCONF
    
    commit 5098e2b95e8e6f56266c2d5c180c75917090082a upstream.
    
    I have hit the following build error:
    armv7a-hardfloat-linux-gnueabi-ld: drivers/soc/tegra/pmc.o: in function `pinconf_generic_dt_node_to_map_pin':
    pmc.c:(.text+0x500): undefined reference to `pinconf_generic_dt_node_to_map'
    armv7a-hardfloat-linux-gnueabi-ld: drivers/soc/tegra/pmc.o:(.rodata+0x1f88): undefined reference to `pinconf_generic_dt_free_map'
    
    So SOC_TEGRA_PMC should select GENERIC_PINCONF.
    
    Fixes: 4a37f11c8f57 ("soc/tegra: pmc: Implement pad configuration via pinctrl")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be20b99a86b3dcdaa594867f468de3ef3a9bcda3
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Fri Mar 13 12:01:04 2020 +0300

    ARM: tegra: Correct PL310 Auxiliary Control Register initialization
    
    commit 35509737c8f958944e059d501255a0bf18361ba0 upstream.
    
    The PL310 Auxiliary Control Register shouldn't have the "Full line of
    zero" optimization bit being set before L2 cache is enabled. The L2X0
    driver takes care of enabling the optimization by itself.
    
    This patch fixes a noisy error message on Tegra20 and Tegra30 telling
    that cache optimization is erroneously enabled without enabling it for
    the CPU:
    
            L2C-310: enabling full line of zeros but not enabled in Cortex-A9
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Tested-by: Nicolas Chauvet <kwizart@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5d2f71b98b73f36c78b340411a07194d8536e72
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon May 4 10:50:17 2020 -0700

    kernel/cpu_pm: Fix uninitted local in cpu_pm
    
    commit b5945214b76a1f22929481724ffd448000ede914 upstream.
    
    cpu_pm_notify() is basically a wrapper of notifier_call_chain().
    notifier_call_chain() doesn't initialize *nr_calls to 0 before it
    starts incrementing it--presumably it's up to the callers to do this.
    
    Unfortunately the callers of cpu_pm_notify() don't init *nr_calls.
    This potentially means you could get too many or two few calls to
    CPU_PM_ENTER_FAILED or CPU_CLUSTER_PM_ENTER_FAILED depending on the
    luck of the stack.
    
    Let's fix this.
    
    Fixes: ab10023e0088 ("cpu_pm: Add cpu power management notifiers")
    Cc: stable@vger.kernel.org
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200504104917.v6.3.I2d44fc0053d019f239527a4e5829416714b7e299@changeid
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d9cc26aa16435087e643098626e4e2539838723
Author: Hari Bathini <hbathini@linux.ibm.com>
Date:   Wed May 27 15:14:35 2020 +0530

    powerpc/fadump: Account for memory_limit while reserving memory
    
    commit 9a2921e5baca1d25eb8d21f21d1e90581a6d0f68 upstream.
    
    If the memory chunk found for reserving memory overshoots the memory
    limit imposed, do not proceed with reserving memory. Default behavior
    was this until commit 140777a3d8df ("powerpc/fadump: consider reserved
    ranges while reserving memory") changed it unwittingly.
    
    Fixes: 140777a3d8df ("powerpc/fadump: consider reserved ranges while reserving memory")
    Cc: stable@vger.kernel.org
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/159057266320.22331.6571453892066907320.stgit@hbathini.in.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fd930da24e1c6521dc5d3dab51010ca14837ccd
Author: Hari Bathini <hbathini@linux.ibm.com>
Date:   Mon Apr 20 14:26:22 2020 +0530

    powerpc/fadump: consider reserved ranges while reserving memory
    
    commit 140777a3d8dfdb3d3f20ea7707c0f1c0ce1b0aa5 upstream.
    
    Commit 0962e8004e97 ("powerpc/prom: Scan reserved-ranges node for
    memory reservations") enabled support to parse reserved-ranges DT
    node and reserve kernel memory falling in these ranges for F/W
    purposes. Memory reserved for FADump should not overlap with these
    ranges as it could corrupt memory meant for F/W or crash'ed kernel
    memory to be exported as vmcore.
    
    But since commit 579ca1a27675 ("powerpc/fadump: make use of memblock's
    bottom up allocation mode"), memblock_find_in_range() is being used to
    find the appropriate area to reserve memory for FADump, which can't
    account for reserved-ranges as these ranges are reserved only after
    FADump memory reservation.
    
    With reserved-ranges now being populated during early boot, look out
    for these memory ranges while reserving memory for FADump. Without
    this change, MPIPL on PowerNV systems aborts with hostboot failure,
    when memory reserved for FADump is less than 4096MB.
    
    Fixes: 579ca1a27675 ("powerpc/fadump: make use of memblock's bottom up allocation mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
    Reviewed-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/158737297693.26700.16193820746269425424.stgit@hbathini.in.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e9211d98803bb0e0a5b4678087a4703bc449db3
Author: Hari Bathini <hbathini@linux.ibm.com>
Date:   Mon Apr 20 14:26:09 2020 +0530

    powerpc/fadump: use static allocation for reserved memory ranges
    
    commit 02c04e374e176ae3a3f64a682f80702f8d2fb65d upstream.
    
    At times, memory ranges have to be looked up during early boot, when
    kernel couldn't be initialized for dynamic memory allocation. In fact,
    reserved-ranges look up is needed during FADump memory reservation.
    Without accounting for reserved-ranges in reserving memory for FADump,
    MPIPL boot fails with memory corruption issues. So, extend memory
    ranges handling to support static allocation and populate reserved
    memory ranges during early boot.
    
    Fixes: dda9dbfeeb7a ("powerpc/fadump: consider reserved ranges while releasing memory")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
    Reviewed-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/158737294432.26700.4830263187856221314.stgit@hbathini.in.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c81e34c4346f9d3ba21a3c6f7491a6e7e330a7ee
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue May 26 10:47:49 2020 -0400

    alpha: fix memory barriers so that they conform to the specification
    
    commit 54505a1e2083fc54cbe8779b97479f969cd30a00 upstream.
    
    The commits cd0e00c10672 and 92d7223a7423 broke boot on the Alpha Avanti
    platform. The patches move memory barriers after a write before the write.
    The result is that if there's iowrite followed by ioread, there is no
    barrier between them.
    
    The Alpha architecture allows reordering of the accesses to the I/O space,
    and the missing barrier between write and read causes hang with serial
    port and real time clock.
    
    This patch makes barriers confiorm to the specification.
    
    1. We add mb() before readX_relaxed and writeX_relaxed -
       memory-barriers.txt claims that these functions must be ordered w.r.t.
       each other. Alpha doesn't order them, so we need an explicit barrier.
    2. We add mb() before reads from the I/O space - so that if there's a
       write followed by a read, there should be a barrier between them.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Fixes: cd0e00c10672 ("alpha: io: reorder barriers to guarantee writeX() and iowriteX() ordering")
    Fixes: 92d7223a7423 ("alpha: io: reorder barriers to guarantee writeX() and iowriteX() ordering #2")
    Cc: stable@vger.kernel.org      # v4.17+
    Acked-by: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Reviewed-by: Maciej W. Rozycki <macro@linux-mips.org>
    Signed-off-by: Matt Turner <mattst88@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5018a0bd0964cbb0488daa0cbed37ba4938286f3
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jun 4 12:01:26 2020 -0700

    dm crypt: avoid truncating the logical block size
    
    commit 64611a15ca9da91ff532982429c44686f4593b5f upstream.
    
    queue_limits::logical_block_size got changed from unsigned short to
    unsigned int, but it was forgotten to update crypt_io_hints() to use the
    new type.  Fix it.
    
    Fixes: ad6bf88a6c19 ("block: fix an integer overflow in logical block size")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee6fa4903f8491132c08bee81dc813be3fbb1604
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun May 17 15:37:50 2020 -0400

    sparc64: fix misuses of access_process_vm() in genregs32_[sg]et()
    
    commit 142cd25293f6a7ecbdff4fb0af17de6438d46433 upstream.
    
    We do need access_process_vm() to access the target's reg_window.
    However, access to caller's memory (storing the result in
    genregs32_get(), fetching the new values in case of genregs32_set())
    should be done by normal uaccess primitives.
    
    Fixes: ad4f95764040 ([SPARC64]: Fix user accesses in regset code.)
    Cc: stable@kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dcbc7d6cd2d358549fb2211f02ba4d1faeb6b37
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun May 17 12:20:40 2020 -0400

    sparc32: fix register window handling in genregs32_[gs]et()
    
    commit cf51e129b96847f969bfb8af1ee1516a01a70b39 upstream.
    
    It needs access_process_vm() if the traced process does not share
    mm with the caller.  Solution is similar to what sparc64 does.
    Note that genregs32_set() is only ever called with pos being 0
    or 32 * sizeof(u32) (the latter - as part of PTRACE_SETREGS
    handling).
    
    Cc: stable@kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2f18147c7dbb7a360697e83d3d8174c6449e104
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu May 7 09:42:52 2020 +0000

    gnss: sirf: fix error return code in sirf_probe()
    
    commit 43d7ce70ae43dd8523754b17f567417e0e75dbce upstream.
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    This avoids a use-after-free in case the driver is later unbound.
    
    Fixes: d2efbbd18b1e ("gnss: add driver for sirfstar-based receivers")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    [ johan: amend commit message; mention potential use-after-free ]
    Cc: stable <stable@vger.kernel.org>     # 4.19
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e75e551606f426d5a09a894e0a78faf31d539439
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Sat Apr 25 16:10:46 2020 -0700

    pinctrl: samsung: Save/restore eint_mask over suspend for EINT_TYPE GPIOs
    
    commit f354157a7d184db430c1a564c506434e33b1bec5 upstream.
    
    Currently, for EINT_TYPE GPIOs, the CON and FLTCON registers
    are saved and restored over a suspend/resume cycle.  However, the
    EINT_MASK registers are not.
    
    On S5PV210 at the very least, these registers are not retained over
    suspend, leading to the interrupts remaining masked upon resume and
    therefore no interrupts being triggered for the device.  There should
    be no effect on any SoCs that do retain these registers as theoretically
    we would just be re-writing what was already there.
    
    Fixes: 7ccbc60cd9c2 ("pinctrl: exynos: Handle suspend/resume of GPIO EINT registers")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 407933bbb38585b35058d92b4b631b4a3c1ba94c
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Sat Apr 4 10:08:49 2020 -0700

    pinctrl: samsung: Correct setting of eint wakeup mask on s5pv210
    
    commit b577a279914085c6b657c33e9f39ef56d96a3302 upstream.
    
    Commit a8be2af0218c ("pinctrl: samsung: Write external wakeup interrupt
    mask") started writing the eint wakeup mask from the pinctrl driver.
    Unfortunately, it made the assumption that the private retention data
    was always a regmap while in the case of s5pv210 it is a raw pointer
    to the clock base (as the eint wakeup mask not in the PMU as with newer
    Exynos platforms).
    
    Fixes: a8be2af0218c ("pinctrl: samsung: Write external wakeup interrupt mask")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b28e5c35d3272e367953fba52cd72fd86573488
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat May 2 18:33:38 2020 -0500

    power: supply: core: fix memory leak in HWMON error path
    
    commit 1d7a7128a2e9e1f137c99b0a44e94d70a77343e3 upstream.
    
    In function power_supply_add_hwmon_sysfs(), psyhw->props is
    allocated by bitmap_zalloc(). But this pointer is not deallocated
    when devm_add_action fail,  which lead to a memory leak bug. To fix
    this, we replace devm_add_action with devm_add_action_or_reset.
    
    Cc: stable@kernel.org
    Fixes: e67d4dfc9ff19 ("power: supply: Add HWMON compatibility layer")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6050811edffbe9ce1b264e1557875f81b64f40e4
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Apr 3 22:20:33 2020 +0200

    power: supply: core: fix HWMON temperature labels
    
    commit 6b20464ad9fb5fd76ef6f219ce62156aa9639dcc upstream.
    
    tempX_label files are swapped compared to what
    power_supply_hwmon_temp_to_property() uses. Make them match.
    
    Cc: stable@vger.kernel.org
    Fixes: e67d4dfc9ff1 ("power: supply: Add HWMON compatibility layer")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fd525d817eaf9b573bd3672107b52d9aa8ade5f
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Wed May 27 13:26:04 2020 +0200

    power: vexpress: add suppress_bind_attrs to true
    
    commit 73174acc9c75960af2daa7dcbdb9781fc0d135cb upstream.
    
    Make sure that the POWER_RESET_VEXPRESS driver won't have bind/unbind
    attributes available via the sysfs, so lets be explicit here and use
    ".suppress_bind_attrs = true" to prevent userspace from doing something
    silly.
    
    Link: https://lore.kernel.org/r/20200527112608.3886105-2-anders.roxell@linaro.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c71b9aa18a06212b6b3792cf8fd00d8a377e74d
Author: Alexander Monakov <amonakov@ispras.ru>
Date:   Sun May 10 20:48:42 2020 +0000

    EDAC/amd64: Add AMD family 17h model 60h PCI IDs
    
    commit b6bea24d41519e8c31e4798f1c1a3f67e540c5d0 upstream.
    
    Add support for AMD Renoir (4000-series Ryzen CPUs).
    
    Signed-off-by: Alexander Monakov <amonakov@ispras.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Link: https://lkml.kernel.org/r/20200510204842.2603-4-amonakov@ispras.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67712fa4a66274972bc7418cf87ebe65c216e9bb
Author: Alexander Monakov <amonakov@ispras.ru>
Date:   Sun May 10 20:48:41 2020 +0000

    hwmon: (k10temp) Add AMD family 17h model 60h PCI match
    
    commit 279f0b3a4b80660fba6faadc2ca2fa426bf3f7e9 upstream.
    
    Add support for retrieving Tdie and Tctl on AMD Renoir (4000-series
    Ryzen CPUs).
    
    It appears SMU offsets for reading current/voltage and CCD temperature
    have changed for this generation (reads from currently used offsets
    yield zeros), so those features cannot be enabled so trivially.
    
    Signed-off-by: Alexander Monakov <amonakov@ispras.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lkml.kernel.org/r/20200510204842.2603-3-amonakov@ispras.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3046b09d45ec2d39e1b5f34d054b75ca826083b0
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue May 5 12:01:54 2020 +0800

    igb: Report speed and duplex as unknown when device is runtime suspended
    
    commit 165ae7a8feb53dc47fb041357e4b253bfc927cf9 upstream.
    
    igb device gets runtime suspended when there's no link partner. We can't
    get correct speed under that state:
    $ cat /sys/class/net/enp3s0/speed
    1000
    
    In addition to that, an error can also be spotted in dmesg:
    [  385.991957] igb 0000:03:00.0 enp3s0: PCIe link lost
    
    Since device can only be runtime suspended when there's no link partner,
    we can skip reading register and let the following logic set speed and
    duplex with correct status.
    
    The more generic approach will be wrap get_link_ksettings() with begin()
    and complete() callbacks. However, for this particular issue, begin()
    calls igb_runtime_resume() , which tries to rtnl_lock() while the lock
    is already hold by upper ethtool layer.
    
    So let's take this approach until the igb_runtime_resume() no longer
    needs to hold rtnl_lock.
    
    CC: stable <stable@vger.kernel.org>
    Suggested-by: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6f91166fc37ebf30c24cd6387604cec6d74d35a
Author: Weiyi Lu <weiyi.lu@mediatek.com>
Date:   Wed May 27 14:25:49 2020 +0800

    clk: mediatek: assign the initial value to clk_init_data of mtk_mux
    
    commit 571cfadcc628dd5591444f7289e27445ea732f4c upstream.
    
    When some new clock supports are introduced, e.g. [1]
    it might lead to an error although it should be NULL because
    clk_init_data is on the stack and it might have random values
    if using without initialization.
    Add the missing initial value to clk_init_data.
    
    [1] https://android-review.googlesource.com/c/kernel/common/+/1278046
    
    Fixes: a3ae549917f1 ("clk: mediatek: Add new clkmux register API")
    Signed-off-by: Weiyi Lu <weiyi.lu@mediatek.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1590560749-29136-1-git-send-email-weiyi.lu@mediatek.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adecd49745f88bd59b0bda0c245cb6d1bec62e7f
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Wed Mar 25 13:20:00 2020 +0100

    media: ov5640: fix use of destroyed mutex
    
    commit bfcba38d95a0aed146a958a84a2177af1459eddc upstream.
    
    v4l2_ctrl_handler_free() uses hdl->lock, which in ov5640 driver is set
    to sensor's own sensor->lock. In ov5640_remove(), the driver destroys the
    sensor->lock first, and then calls v4l2_ctrl_handler_free(), resulting
    in the use of the destroyed mutex.
    
    Fix this by calling moving the mutex_destroy() to the end of the cleanup
    sequence, as there's no need to destroy the mutex as early as possible.
    
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: stable@vger.kernel.org # v4.14+
    Reviewed-by: Benoit Parrot <bparrot@ti.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ef00d99199d5a18648bbb7740b455c299d68b74
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Tue May 26 10:59:09 2020 -0500

    b43_legacy: Fix connection problem with WPA3
    
    commit 6a29d134c04a8acebb7a95251acea7ad7abba106 upstream.
    
    Since the driver was first introduced into the kernel, it has only
    handled the ciphers associated with WEP, WPA, and WPA2. It fails with
    WPA3 even though mac80211 can handle those additional ciphers in software,
    b43legacy did not report that it could handle them. By setting MFP_CAPABLE using
    ieee80211_set_hw(), the problem is fixed.
    
    With this change, b43legacy will handle the ciphers it knows in hardware,
    and let mac80211 handle the others in software. It is not necessary to
    use the module parameter NOHWCRYPT to turn hardware encryption off.
    Although this change essentially eliminates that module parameter,
    I am choosing to keep it for cases where the hardware is broken,
    and software encryption is required for all ciphers.
    
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200526155909.5807-3-Larry.Finger@lwfinger.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b74d369d2962251276925c91058f6046aec6baf5
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Tue May 26 10:59:08 2020 -0500

    b43: Fix connection problem with WPA3
    
    commit 75d057bda1fbca6ade21378aa45db712e5f7d962 upstream.
    
    Since the driver was first introduced into the kernel, it has only
    handled the ciphers associated with WEP, WPA, and WPA2. It fails with
    WPA3 even though mac80211 can handle those additional ciphers in software,
    b43 did not report that it could handle them. By setting MFP_CAPABLE using
    ieee80211_set_hw(), the problem is fixed.
    
    With this change, b43 will handle the ciphers it knows in hardware,
    and let mac80211 handle the others in software. It is not necessary to
    use the module parameter NOHWCRYPT to turn hardware encryption off.
    Although this change essentially eliminates that module parameter,
    I am choosing to keep it for cases where the hardware is broken,
    and software encryption is required for all ciphers.
    
    Reported-and-tested-by: Rui Salvaterra <rsalvaterra@gmail.com>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200526155909.5807-2-Larry.Finger@lwfinger.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c039a9921b3287376700808cbdac591c9fd125e
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Tue Apr 7 14:00:43 2020 -0500

    b43legacy: Fix case where channel status is corrupted
    
    commit ec4d3e3a054578de34cd0b587ab8a1ac36f629d9 upstream.
    
    This patch fixes commit 75388acd0cd8 ("add mac80211-based driver for
    legacy BCM43xx devices")
    
    In https://bugzilla.kernel.org/show_bug.cgi?id=207093, a defect in
    b43legacy is reported. Upon testing, thus problem exists on PPC and
    X86 platforms, is present in the oldest kernel tested (3.2), and
    has been present in the driver since it was first added to the kernel.
    
    The problem is a corrupted channel status received from the device.
    Both the internal card in a PowerBook G4 and the PCMCIA version
    (Broadcom BCM4306 with PCI ID 14e4:4320) have the problem. Only Rev, 2
    (revision 4 of the 802.11 core) of the chip has been tested. No other
    devices using b43legacy are available for testing.
    
    Various sources of the problem were considered. Buffer overrun and
    other sources of corruption within the driver were rejected because
    the faulty channel status is always the same, not a random value.
    It was concluded that the faulty data is coming from the device, probably
    due to a firmware bug. As that source is not available, the driver
    must take appropriate action to recover.
    
    At present, the driver reports the error, and them continues to process
    the bad packet. This is believed that to be a mistake, and the correct
    action is to drop the correpted packet.
    
    Fixes: 75388acd0cd8 ("add mac80211-based driver for legacy BCM43xx devices")
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Reported-and-tested by: F. Erhard <erhard_f@mailbox.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200407190043.1686-1-Larry.Finger@lwfinger.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eeb0cf8bb68e4d7a20646d7234badab8a96e32ac
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Thu Apr 2 14:55:20 2020 +0200

    Bluetooth: hci_bcm: fix freeing not-requested IRQ
    
    commit 81bd5d0c62437c02caac6b3f942fcda874063cb0 upstream.
    
    When BT module can't be initialized, but it has an IRQ, unloading
    the driver WARNs when trying to free not-yet-requested IRQ. Fix it by
    noting whether the IRQ was requested.
    
    WARNING: CPU: 2 PID: 214 at kernel/irq/devres.c:144 devm_free_irq+0x49/0x4ca
    [...]
    WARNING: CPU: 2 PID: 214 at kernel/irq/manage.c:1746 __free_irq+0x8b/0x27c
    Trying to free already-free IRQ 264
    Modules linked in: hci_uart(-) btbcm bluetooth ecdh_generic ecc libaes
    CPU: 2 PID: 214 Comm: rmmod Tainted: G        W         5.6.1mq-00044-ga5f9ea098318-dirty #928
    [...]
    [<b016aefb>] (devm_free_irq) from [<af8ba1ff>] (bcm_close+0x97/0x118 [hci_uart])
    [<af8ba1ff>] (bcm_close [hci_uart]) from [<af8b736f>] (hci_uart_unregister_device+0x33/0x3c [hci_uart])
    [<af8b736f>] (hci_uart_unregister_device [hci_uart]) from [<b035930b>] (serdev_drv_remove+0x13/0x20)
    [<b035930b>] (serdev_drv_remove) from [<b037093b>] (device_release_driver_internal+0x97/0x118)
    [<b037093b>] (device_release_driver_internal) from [<b0370a0b>] (driver_detach+0x2f/0x58)
    [<b0370a0b>] (driver_detach) from [<b036f855>] (bus_remove_driver+0x41/0x94)
    [<b036f855>] (bus_remove_driver) from [<af8ba8db>] (bcm_deinit+0x1b/0x740 [hci_uart])
    [<af8ba8db>] (bcm_deinit [hci_uart]) from [<af8ba86f>] (hci_uart_exit+0x13/0x30 [hci_uart])
    [<af8ba86f>] (hci_uart_exit [hci_uart]) from [<b01900bd>] (sys_delete_module+0x109/0x1d0)
    [<b01900bd>] (sys_delete_module) from [<b0101001>] (ret_fast_syscall+0x1/0x5a)
    [...]
    
    Cc: stable@vger.kernel.org
    Fixes: 6cc4396c8829 ("Bluetooth: hci_bcm: Add wake-up capability")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c79dd14c15dd24dcf6145d9cf58ba1c7b138097
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue May 12 14:40:01 2020 +0200

    serial: 8250: Avoid error message on reprobe
    
    commit e0a851fe6b9b619527bd928aa93caaddd003f70c upstream.
    
    If the call to uart_add_one_port() in serial8250_register_8250_port()
    fails, a half-initialized entry in the serial_8250ports[] array is left
    behind.
    
    A subsequent reprobe of the same serial port causes that entry to be
    reused.  Because uart->port.dev is set, uart_remove_one_port() is called
    for the half-initialized entry and bails out with an error message:
    
    bcm2835-aux-uart 3f215040.serial: Removing wrong port: (null) != (ptrval)
    
    The same happens on failure of mctrl_gpio_init() since commit
    4a96895f74c9 ("tty/serial/8250: use mctrl_gpio helpers").
    
    Fix by zeroing the uart->port.dev pointer in the probe error path.
    
    The bug was introduced in v2.6.10 by historical commit befff6f5bf5f
    ("[SERIAL] Add new port registration/unregistration functions."):
    https://git.kernel.org/tglx/history/c/befff6f5bf5f
    
    The commit added an unconditional call to uart_remove_one_port() in
    serial8250_register_port().  In v3.7, commit 835d844d1a28 ("8250_pnp:
    do pnp probe before legacy probe") made that call conditional on
    uart->port.dev which allows me to fix the issue by zeroing that pointer
    in the error path.  Thus, the present commit will fix the problem as far
    back as v3.7 whereas still older versions need to also cherry-pick
    835d844d1a28.
    
    Fixes: 835d844d1a28 ("8250_pnp: do pnp probe before legacy probe")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v2.6.10
    Cc: stable@vger.kernel.org # v2.6.10: 835d844d1a28: 8250_pnp: do pnp probe before legacy
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/b4a072013ee1a1d13ee06b4325afb19bda57ca1b.1589285873.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80462f7c296d350557b1b320f3de6dfb6145f305
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat May 9 22:06:42 2020 +0200

    media: cedrus: Program output format during each run
    
    commit a8876c22eab9a871834f85de83e98bbf7e6e264d upstream.
    
    Previously, the output format was programmed as part of the ioctl()
    handler. However, this has two problems:
    
      1) If there are multiple active streams with different output
         formats, the hardware will use whichever format was set last
         for both streams. Similarly, an ioctl() done in an inactive
         context will wrongly affect other active contexts.
      2) The registers are written while the device is not actively
         streaming. To enable runtime PM tied to the streaming state,
         all hardware access needs to be moved inside cedrus_device_run().
    
    The call to cedrus_dst_format_set() is now placed just before the
    codec-specific callback that programs the hardware.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 50e761516f2b ("media: platform: Add Cedrus VPU decoder driver")
    Suggested-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Suggested-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Tested-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e688a315acf9c2b9b6e8c3e3b7a0c2720f72cba
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Tue Dec 10 04:15:48 2019 +0100

    media: go7007: fix a miss of snd_card_free
    
    commit 9453264ef58638ce8976121ac44c07a3ef375983 upstream.
    
    go7007_snd_init() misses a snd_card_free() in an error path.
    Add the missed call to fix it.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bda6ebf290fa3bedacb3ba0f32c1fcb38ee5ad55
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Tue May 5 10:42:09 2020 +0300

    carl9170: remove P2P_GO support
    
    commit b14fba7ebd04082f7767a11daea7f12f3593de22 upstream.
    
    This patch follows up on a bug-report by Frank Schäfer that
    discovered P2P GO wasn't working with wpa_supplicant.
    This patch removes part of the broken P2P GO support but
    keeps the vif switchover code in place.
    
    Cc: <stable@vger.kernel.org>
    Link: <https://lkml.kernel.org/r/3a9d86b6-744f-e670-8792-9167257edef8@googlemail.com>
    Reported-by: Frank Schäfer <fschaefer.oss@googlemail.com>
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200425092811.9494-1-chunkeey@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cedbd8709cc17209a7654d968401e39e4fbf65f4
Author: Punit Agrawal <punit1.agrawal@toshiba.co.jp>
Date:   Fri May 15 13:31:27 2020 +0900

    e1000e: Relax condition to trigger reset for ME workaround
    
    commit d601afcae2febc49665008e9a79e701248d56c50 upstream.
    
    It's an error if the value of the RX/TX tail descriptor does not match
    what was written. The error condition is true regardless the duration
    of the interference from ME. But the driver only performs the reset if
    E1000_ICH_FWSM_PCIM2PCI_COUNT (2000) iterations of 50us delay have
    transpired. The extra condition can lead to inconsistency between the
    state of hardware as expected by the driver.
    
    Fix this by dropping the check for number of delay iterations.
    
    While at it, also make __ew32_prepare() static as it's not used
    anywhere else.
    
    CC: stable <stable@vger.kernel.org>
    Signed-off-by: Punit Agrawal <punit1.agrawal@toshiba.co.jp>
    Reviewed-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fedb80811f403a1927a3d672866b7b4f51244c8
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Thu May 7 22:21:07 2020 +0800

    e1000e: Disable TSO for buffer overrun workaround
    
    commit f29801030ac67bf98b7a65d3aea67b30769d4f7c upstream.
    
    Commit b10effb92e27 ("e1000e: fix buffer overrun while the I219 is
    processing DMA transactions") imposes roughly 30% performance penalty.
    
    The commit log states that "Disabling TSO eliminates performance loss
    for TCP traffic without a noticeable impact on CPU performance", so
    let's disable TSO by default to regain the loss.
    
    CC: stable <stable@vger.kernel.org>
    Fixes: b10effb92e27 ("e1000e: fix buffer overrun while the I219 is processing DMA transactions")
    BugLink: https://bugs.launchpad.net/bugs/1802691
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4cc36066a31562150e64fe5fb504544612f28a8
Author: Ashok Raj <ashok.raj@intel.com>
Date:   Fri Mar 27 14:16:15 2020 -0700

    PCI: Program MPS for RCiEP devices
    
    commit aa0ce96d72dd2e1b0dfd0fb868f82876e7790878 upstream.
    
    Root Complex Integrated Endpoints (RCiEPs) do not have an upstream bridge,
    so pci_configure_mps() previously ignored them, which may result in reduced
    performance.
    
    Instead, program the Max_Payload_Size of RCiEPs to the maximum supported
    value (unless it is limited for the PCIE_BUS_PEER2PEER case).  This also
    affects the subsequent programming of Max_Read_Request_Size because Linux
    programs MRRS based on the MPS value.
    
    Fixes: 9dae3a97297f ("PCI: Move MPS configuration check to pci_configure_device()")
    Link: https://lore.kernel.org/r/1585343775-4019-1-git-send-email-ashok.raj@intel.com
    Tested-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Ashok Raj <ashok.raj@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e131e70e2144b36ad0dd0d6b2f2c3ff866ce5604
Author: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
Date:   Mon Apr 27 12:28:59 2020 +0200

    ima: Set again build_ima_appraise variable
    
    [ Upstream commit b59fda449cf07f2db3be3a67142e6c000f5e8d79 ]
    
    After adding the new add_rule() function in commit c52657d93b05
    ("ima: refactor ima_init_policy()"), all appraisal flags are added to the
    temp_ima_appraise variable. Revert to the previous behavior instead of
    removing build_ima_appraise, to benefit from the protection offered by
    __ro_after_init.
    
    The mentioned commit introduced a bug, as it makes all the flags
    modifiable, while build_ima_appraise flags can be protected with
    __ro_after_init.
    
    Cc: stable@vger.kernel.org # 5.0.x
    Fixes: c52657d93b05 ("ima: refactor ima_init_policy()")
    Co-developed-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2600136eaee989e8a3c8dfcee2581ae238f98964
Author: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
Date:   Mon Apr 27 12:28:58 2020 +0200

    ima: Remove redundant policy rule set in add_rules()
    
    [ Upstream commit 6ee28442a465ab4c4be45e3b15015af24b1ba906 ]
    
    Function ima_appraise_flag() returns the flag to be set in
    temp_ima_appraise depending on the hook identifier passed as an argument.
    It is not necessary to set the flag again for the POLICY_CHECK hook.
    
    Signed-off-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70ce85319d450a8e566467eab3395d318a69f832
Author: Alexander Monakov <amonakov@ispras.ru>
Date:   Sun May 10 20:48:40 2020 +0000

    x86/amd_nb: Add AMD family 17h model 60h PCI IDs
    
    [ Upstream commit a4e91825d7e1252f7cba005f1451e5464b23c15d ]
    
    Add PCI IDs for AMD Renoir (4000-series Ryzen CPUs). This is necessary
    to enable support for temperature sensors via the k10temp module.
    
    Signed-off-by: Alexander Monakov <amonakov@ispras.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lkml.kernel.org/r/20200510204842.2603-2-amonakov@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44eec92cc4bff3cc9aa025706a625b940dd012c9
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri May 8 14:53:40 2020 +0800

    serial: 8250_pci: Move Pericom IDs to pci_ids.h
    
    [ Upstream commit 62a7f3009a460001eb46984395280dd900bc4ef4 ]
    
    Move the IDs to pci_ids.h so it can be used by next patch.
    
    Link: https://lore.kernel.org/r/20200508065343.32751-1-kai.heng.feng@canonical.com
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c8938fb19edaa3542d9f3a22cd74e2d051a1ceb
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Tue Mar 10 20:50:07 2020 +0800

    PCI: Add Loongson vendor ID
    
    [ Upstream commit 9acb9fe18d863aacc99948963f8d5d447dc311be ]
    
    Add the Loongson vendor ID to pci_ids.h to be used by the controller
    driver in the future.
    
    The Loongson vendor ID can be found at the following link:
    https://git.kernel.org/pub/scm/utils/pciutils/pciutils.git/tree/pci.ids
    
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cfece5c0e2b774be5d613262b2df3789d2c5a3a
Author: Yazen Ghannam <yazen.ghannam@amd.com>
Date:   Fri Jan 10 01:56:49 2020 +0000

    x86/amd_nb: Add Family 19h PCI IDs
    
    [ Upstream commit b3f79ae45904ae987a7c06a9e8d6084d7b73e67f ]
    
    Add the new PCI Device 18h IDs for AMD Family 19h systems. Note that
    Family 19h systems will not have a new PCI root device ID.
    
    Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200110015651.14887-4-Yazen.Ghannam@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b35415c0949a111f956dcc645b23d5ab03b9a5dc
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Tue Nov 12 05:47:53 2019 -0700

    PCI: vmd: Add device id for VMD device 8086:9A0B
    
    [ Upstream commit ec11e5c213cc20cac5e8310728b06793448b9f6d ]
    
    This patch adds support for this VMD device which supports the bus
    restriction mode.
    
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3179b408c40154a69e7f208aadc9f349d694bd3a
Author: Ashok Raj <ashok.raj@intel.com>
Date:   Thu May 28 13:57:42 2020 -0700

    PCI: Add ACS quirk for Intel Root Complex Integrated Endpoints
    
    [ Upstream commit 3247bd10a4502a3075ce8e1c3c7d31ef76f193ce ]
    
    All Intel platforms guarantee that all root complex implementations must
    send transactions up to IOMMU for address translations. Hence for Intel
    RCiEP devices, we can assume some ACS-type isolation even without an ACS
    capability.
    
    From the Intel VT-d spec, r3.1, sec 3.16 ("Root-Complex Peer to Peer
    Considerations"):
    
      When DMA remapping is enabled, peer-to-peer requests through the
      Root-Complex must be handled as follows:
    
      - The input address in the request is translated (through first-level,
        second-level or nested translation) to a host physical address (HPA).
        The address decoding for peer addresses must be done only on the
        translated HPA. Hardware implementations are free to further limit
        peer-to-peer accesses to specific host physical address regions (or
        to completely disallow peer-forwarding of translated requests).
    
      - Since address translation changes the contents (address field) of
        the PCI Express Transaction Layer Packet (TLP), for PCI Express
        peer-to-peer requests with ECRC, the Root-Complex hardware must use
        the new ECRC (re-computed with the translated address) if it
        decides to forward the TLP as a peer request.
    
      - Root-ports, and multi-function root-complex integrated endpoints, may
        support additional peer-to-peer control features by supporting PCI
        Express Access Control Services (ACS) capability. Refer to ACS
        capability in PCI Express specifications for details.
    
    Since Linux didn't give special treatment to allow this exception, certain
    RCiEP MFD devices were grouped in a single IOMMU group. This doesn't permit
    a single device to be assigned to a guest for instance.
    
    In one vendor system: Device 14.x were grouped in a single IOMMU group.
    
      /sys/kernel/iommu_groups/5/devices/0000:00:14.0
      /sys/kernel/iommu_groups/5/devices/0000:00:14.2
      /sys/kernel/iommu_groups/5/devices/0000:00:14.3
    
    After this patch:
    
      /sys/kernel/iommu_groups/5/devices/0000:00:14.0
      /sys/kernel/iommu_groups/5/devices/0000:00:14.2
      /sys/kernel/iommu_groups/6/devices/0000:00:14.3 <<< new group
    
    14.0 and 14.2 are integrated devices, but legacy end points, whereas 14.3
    was a PCIe-compliant RCiEP.
    
      00:14.3 Network controller: Intel Corporation Device 9df0 (rev 30)
        Capabilities: [40] Express (v2) Root Complex Integrated Endpoint, MSI 00
    
    This permits assigning this device to a guest VM.
    
    [bhelgaas: drop "Fixes" tag since this doesn't fix a bug in that commit]
    Link: https://lore.kernel.org/r/1590699462-7131-1-git-send-email-ashok.raj@intel.com
    Tested-by: Darrel Goeddel <dgoeddel@forcepoint.com>
    Signed-off-by: Ashok Raj <ashok.raj@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: Lu Baolu <baolu.lu@linux.intel.com>
    Cc: Mark Scott <mscott@forcepoint.com>,
    Cc: Romil Sharma <rsharma@forcepoint.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e4528cdbaf0f5d732686eb3415f74c0ea646223
Author: Kevin Buettner <kevinb@redhat.com>
Date:   Sun May 24 00:35:29 2020 -0700

    PCI: Avoid FLR for AMD Starship USB 3.0
    
    [ Upstream commit 5727043c73fdfe04597971b5f3f4850d879c1f4f ]
    
    The AMD Starship USB 3.0 host controller advertises Function Level Reset
    support, but it apparently doesn't work.  Add a quirk to prevent use of FLR
    on this device.
    
    Without this quirk, when attempting to assign (pass through) an AMD
    Starship USB 3.0 host controller to a guest OS, the system becomes
    increasingly unresponsive over the course of several minutes, eventually
    requiring a hard reset.  Shortly after attempting to start the guest, I see
    these messages:
    
      vfio-pci 0000:05:00.3: not ready 1023ms after FLR; waiting
      vfio-pci 0000:05:00.3: not ready 2047ms after FLR; waiting
      vfio-pci 0000:05:00.3: not ready 4095ms after FLR; waiting
      vfio-pci 0000:05:00.3: not ready 8191ms after FLR; waiting
    
    And then eventually:
    
      vfio-pci 0000:05:00.3: not ready 65535ms after FLR; giving up
      INFO: NMI handler (perf_event_nmi_handler) took too long to run: 0.000 msecs
      perf: interrupt took too long (642744 > 2500), lowering kernel.perf_event_max_sample_rate to 1000
      INFO: NMI handler (perf_event_nmi_handler) took too long to run: 82.270 msecs
      INFO: NMI handler (perf_event_nmi_handler) took too long to run: 680.608 msecs
      INFO: NMI handler (perf_event_nmi_handler) took too long to run: 100.952 msecs
      ...
      watchdog: BUG: soft lockup - CPU#3 stuck for 22s! [qemu-system-x86:7487]
    
    Tested on a Micro-Star International Co., Ltd. MS-7C59/Creator TRX40
    motherboard with an AMD Ryzen Threadripper 3970X.
    
    Link: https://lore.kernel.org/r/20200524003529.598434ff@f31-4.lan
    Signed-off-by: Kevin Buettner <kevinb@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb5ac1a32552be435a0459737d4051466c4953f9
Author: Marcos Scriven <marcos@scriven.org>
Date:   Wed May 20 18:23:30 2020 -0500

    PCI: Avoid FLR for AMD Matisse HD Audio & USB 3.0
    
    [ Upstream commit 0d14f06cd6657ba3446a5eb780672da487b068e7 ]
    
    The AMD Matisse HD Audio & USB 3.0 devices advertise Function Level Reset
    support, but hang when an FLR is triggered.
    
    To reproduce the problem, attach the device to a VM, then detach and try to
    attach again.
    
    Rename the existing quirk_intel_no_flr(), which was not Intel-specific, to
    quirk_no_flr(), and apply it to prevent the use of FLR on these AMD
    devices.
    
    Link: https://lore.kernel.org/r/CAAri2DpkcuQZYbT6XsALhx2e6vRqPHwtbjHYeiH7MNp4zmt1RA@mail.gmail.com
    Signed-off-by: Marcos Scriven <marcos@scriven.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c41d7ca0061e59ab06148616ec4021c7089ca215
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri May 8 14:53:41 2020 +0800

    PCI: Avoid Pericom USB controller OHCI/EHCI PME# defect
    
    [ Upstream commit 68f5fc4ea9ddf9f77720d568144219c4e6452cde ]
    
    Both Pericom OHCI and EHCI devices advertise PME# support from all power
    states:
    
      06:00.0 USB controller [0c03]: Pericom Semiconductor PI7C9X442SL USB OHCI Controller [12d8:400e] (rev 01) (prog-if 10 [OHCI])
        Subsystem: Pericom Semiconductor PI7C9X442SL USB OHCI Controller [12d8:400e]
        Capabilities: [80] Power Management version 3
          Flags: PMEClk- DSI- D1+ D2+ AuxCurrent=375mA PME(D0+,D1+,D2+,D3hot+,D3cold+)
    
      06:00.2 USB controller [0c03]: Pericom Semiconductor PI7C9X442SL USB EHCI Controller [12d8:400f] (rev 01) (prog-if 20 [EHCI])
        Subsystem: Pericom Semiconductor PI7C9X442SL USB EHCI Controller [12d8:400f]
        Capabilities: [80] Power Management version 3
          Flags: PMEClk- DSI- D1+ D2+ AuxCurrent=375mA PME(D0+,D1+,D2+,D3hot+,D3cold+)
    
    But testing shows that it's unreliable: there is a 20% chance PME# won't be
    asserted when a USB device is plugged.
    
    Remove PME support for both devices to make USB plugging work reliably.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=205981
    Link: https://lore.kernel.org/r/20200508065343.32751-2-kai.heng.feng@canonical.com
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd8abb78b1299e4e28485be39592a52e41fad895
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed May 6 11:31:40 2020 -0700

    ext4: fix race between ext4_sync_parent() and rename()
    
    commit 08adf452e628b0e2ce9a01048cfbec52353703d7 upstream.
    
    'igrab(d_inode(dentry->d_parent))' without holding dentry->d_lock is
    broken because without d_lock, d_parent can be concurrently changed due
    to a rename().  Then if the old directory is immediately deleted, old
    d_parent->inode can be NULL.  That causes a NULL dereference in igrab().
    
    To fix this, use dget_parent() to safely grab a reference to the parent
    dentry, which pins the inode.  This also eliminates the need to use
    d_find_any_alias() other than for the initial inode, as we no longer
    throw away the dentry at each step.
    
    This is an extremely hard race to hit, but it is possible.  Adding a
    udelay() in between the reads of ->d_parent and its ->d_inode makes it
    reproducible on a no-journal filesystem using the following program:
    
        #include <fcntl.h>
        #include <unistd.h>
    
        int main()
        {
            if (fork()) {
                for (;;) {
                    mkdir("dir1", 0700);
                    int fd = open("dir1/file", O_RDWR|O_CREAT|O_SYNC);
                    write(fd, "X", 1);
                    close(fd);
                }
            } else {
                mkdir("dir2", 0700);
                for (;;) {
                    rename("dir1/file", "dir2/file");
                    rmdir("dir1");
                }
            }
        }
    
    Fixes: d59729f4e794 ("ext4: fix races in ext4_sync_parent()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20200506183140.541194-1-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c316ebcf9f4b1b71cfeb9554e883e06b90d5c53d
Author: Jeffle Xu <jefflexu@linux.alibaba.com>
Date:   Thu Apr 23 15:46:44 2020 +0800

    ext4: fix error pointer dereference
    
    commit 8418897f1bf87da0cb6936489d57a4320c32c0af upstream.
    
    Don't pass error pointers to brelse().
    
    commit 7159a986b420 ("ext4: fix some error pointer dereferences") has fixed
    some cases, fix the remaining one case.
    
    Once ext4_xattr_block_find()->ext4_sb_bread() failed, error pointer is
    stored in @bs->bh, which will be passed to brelse() in the cleanup
    routine of ext4_xattr_set_handle(). This will then cause a NULL panic
    crash in __brelse().
    
    BUG: unable to handle kernel NULL pointer dereference at 000000000000005b
    RIP: 0010:__brelse+0x1b/0x50
    Call Trace:
     ext4_xattr_set_handle+0x163/0x5d0
     ext4_xattr_set+0x95/0x110
     __vfs_setxattr+0x6b/0x80
     __vfs_setxattr_noperm+0x68/0x1b0
     vfs_setxattr+0xa0/0xb0
     setxattr+0x12c/0x1a0
     path_setxattr+0x8d/0xc0
     __x64_sys_setxattr+0x27/0x30
     do_syscall_64+0x60/0x250
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    In this case, @bs->bh stores '-EIO' actually.
    
    Fixes: fb265c9cb49e ("ext4: add ext4_sb_bread() to disambiguate ENOMEM cases")
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: stable@kernel.org # 2.6.19
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/1587628004-95123-1-git-send-email-jefflexu@linux.alibaba.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 319b553695ec9c83cd0453d137a434ca3abc26f1
Author: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
Date:   Mon Apr 20 19:39:59 2020 -0700

    ext4: fix EXT_MAX_EXTENT/INDEX to check for zeroed eh_max
    
    commit c36a71b4e35ab35340facdd6964a00956b9fef0a upstream.
    
    If eh->eh_max is 0, EXT_MAX_EXTENT/INDEX would evaluate to unsigned
    (-1) resulting in illegal memory accesses. Although there is no
    consistent repro, we see that generic/019 sometimes crashes because of
    this bug.
    
    Ran gce-xfstests smoke and verified that there were no regressions.
    
    Signed-off-by: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
    Link: https://lore.kernel.org/r/20200421023959.20879-2-harshadshirwadkar@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6de50456fe176caef211dc7a32ff16548c622665
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Tue Apr 14 10:01:31 2020 +0200

    evm: Fix possible memory leak in evm_calc_hmac_or_hash()
    
    commit 0c4395fb2aa77341269ea619c5419ea48171883f upstream.
    
    Don't immediately return if the signature is portable and security.ima is
    not present. Just set error so that memory allocated is freed before
    returning from evm_calc_hmac_or_hash().
    
    Fixes: 50b977481fce9 ("EVM: Add support for portable signature format")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce7f038f859d27a1ab2183dad04cb7797fc98286
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Sun Jun 7 23:00:29 2020 +0200

    ima: Remove __init annotation from ima_pcrread()
    
    commit 8b8c704d913b0fe490af370631a4200e26334ec0 upstream.
    
    Commit 6cc7c266e5b4 ("ima: Call ima_calc_boot_aggregate() in
    ima_eventdigest_init()") added a call to ima_calc_boot_aggregate() so that
    the digest can be recalculated for the boot_aggregate measurement entry if
    the 'd' template field has been requested. For the 'd' field, only SHA1 and
    MD5 digests are accepted.
    
    Given that ima_eventdigest_init() does not have the __init annotation, all
    functions called should not have it. This patch removes __init from
    ima_pcrread().
    
    Cc: stable@vger.kernel.org
    Fixes:  6cc7c266e5b4 ("ima: Call ima_calc_boot_aggregate() in ima_eventdigest_init()")
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f387759c2d6732024c351eaccdc29533a5ddc13f
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Wed Jun 3 17:08:21 2020 +0200

    ima: Call ima_calc_boot_aggregate() in ima_eventdigest_init()
    
    commit 6cc7c266e5b47d3cd2b5bb7fd3aac4e6bb2dd1d2 upstream.
    
    If the template field 'd' is chosen and the digest to be added to the
    measurement entry was not calculated with SHA1 or MD5, it is
    recalculated with SHA1, by using the passed file descriptor. However, this
    cannot be done for boot_aggregate, because there is no file descriptor.
    
    This patch adds a call to ima_calc_boot_aggregate() in
    ima_eventdigest_init(), so that the digest can be recalculated also for the
    boot_aggregate entry.
    
    Cc: stable@vger.kernel.org # 3.13.x
    Fixes: 3ce1217d6cd5d ("ima: define template fields library and new helpers")
    Reported-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64712383a186b4c953faa74793ef34d9b5b9dc9e
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Wed Jun 3 17:08:20 2020 +0200

    ima: Directly assign the ima_default_policy pointer to ima_rules
    
    commit 067a436b1b0aafa593344fddd711a755a58afb3b upstream.
    
    This patch prevents the following oops:
    
    [   10.771813] BUG: kernel NULL pointer dereference, address: 0000000000000
    [...]
    [   10.779790] RIP: 0010:ima_match_policy+0xf7/0xb80
    [...]
    [   10.798576] Call Trace:
    [   10.798993]  ? ima_lsm_policy_change+0x2b0/0x2b0
    [   10.799753]  ? inode_init_owner+0x1a0/0x1a0
    [   10.800484]  ? _raw_spin_lock+0x7a/0xd0
    [   10.801592]  ima_must_appraise.part.0+0xb6/0xf0
    [   10.802313]  ? ima_fix_xattr.isra.0+0xd0/0xd0
    [   10.803167]  ima_must_appraise+0x4f/0x70
    [   10.804004]  ima_post_path_mknod+0x2e/0x80
    [   10.804800]  do_mknodat+0x396/0x3c0
    
    It occurs when there is a failure during IMA initialization, and
    ima_init_policy() is not called. IMA hooks still call ima_match_policy()
    but ima_rules is NULL. This patch prevents the crash by directly assigning
    the ima_default_policy pointer to ima_rules when ima_rules is defined. This
    wouldn't alter the existing behavior, as ima_rules is always set at the end
    of ima_init_policy().
    
    Cc: stable@vger.kernel.org # 3.7.x
    Fixes: 07f6a79415d7d ("ima: add appraise action keywords and default rules")
    Reported-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ce29d9b19416dc0fcd5f277d3b803b47364daba
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Wed Mar 25 11:47:07 2020 +0100

    ima: Evaluate error in init_ima()
    
    commit e144d6b265415ddbdc54b3f17f4f95133effa5a8 upstream.
    
    Evaluate error in init_ima() before register_blocking_lsm_notifier() and
    return if not zero.
    
    Cc: stable@vger.kernel.org # 5.3.x
    Fixes: b16942455193 ("ima: use the lsm policy update notifier")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: James Morris <jamorris@linux.microsoft.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f7272bd228cd28ea7780d1b758373a5e3ca2b57
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Wed Mar 25 11:47:06 2020 +0100

    ima: Switch to ima_hash_algo for boot aggregate
    
    commit 6f1a1d103b48b1533a9c804e7a069e2c8e937ce7 upstream.
    
    boot_aggregate is the first entry of IMA measurement list. Its purpose is
    to link pre-boot measurements to IMA measurements. As IMA was designed to
    work with a TPM 1.2, the SHA1 PCR bank was always selected even if a
    TPM 2.0 with support for stronger hash algorithms is available.
    
    This patch first tries to find a PCR bank with the IMA default hash
    algorithm. If it does not find it, it selects the SHA256 PCR bank for
    TPM 2.0 and SHA1 for TPM 1.2. Ultimately, it selects SHA1 also for TPM 2.0
    if the SHA256 PCR bank is not found.
    
    If none of the PCR banks above can be found, boot_aggregate file digest is
    filled with zeros, as for TPM bypass, making it impossible to perform a
    remote attestation of the system.
    
    Cc: stable@vger.kernel.org # 5.1.x
    Fixes: 879b589210a9 ("tpm: retrieve digest size of unknown algorithms with PCR read")
    Reported-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Suggested-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0698eacdfc4f44599f6e54a291284649e53a57f4
Author: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
Date:   Tue Apr 28 09:30:10 2020 +0200

    ima: Fix ima digest hash table key calculation
    
    commit 1129d31b55d509f15e72dc68e4b5c3a4d7b4da8d upstream.
    
    Function hash_long() accepts unsigned long, while currently only one byte
    is passed from ima_hash_key(), which calculates a key for ima_htable.
    
    Given that hashing the digest does not give clear benefits compared to
    using the digest itself, remove hash_long() and return the modulus
    calculated on the first two bytes of the digest with the number of slots.
    Also reduce the depth of the hash table by doubling the number of slots.
    
    Cc: stable@vger.kernel.org
    Fixes: 3323eec921ef ("integrity: IMA as an integrity service provider")
    Co-developed-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
    Acked-by: David.Laight@aculab.com (big endian system concerns)
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13ae9eaae0ccbff2cc02d2c385756b4db729806e
Author: Pavel Tatashin <pasha.tatashin@soleen.com>
Date:   Wed Jun 3 15:59:27 2020 -0700

    mm: call cond_resched() from deferred_init_memmap()
    
    commit da97f2d56bbd880b4138916a7ef96f9881a551b2 upstream.
    
    Now that deferred pages are initialized with interrupts enabled we can
    replace touch_nmi_watchdog() with cond_resched(), as it was before
    3a2d7fa8a3d5.
    
    For now, we cannot do the same in deferred_grow_zone() as it is still
    initializes pages with interrupts disabled.
    
    This change fixes RCU problem described in
    https://lkml.kernel.org/r/20200401104156.11564-2-david@redhat.com
    
    [   60.474005] rcu: INFO: rcu_sched detected stalls on CPUs/tasks:
    [   60.475000] rcu:  1-...0: (0 ticks this GP) idle=02a/1/0x4000000000000000 softirq=1/1 fqs=15000
    [   60.475000] rcu:  (detected by 0, t=60002 jiffies, g=-1199, q=1)
    [   60.475000] Sending NMI from CPU 0 to CPUs 1:
    [    1.760091] NMI backtrace for cpu 1
    [    1.760091] CPU: 1 PID: 20 Comm: pgdatinit0 Not tainted 4.18.0-147.9.1.el8_1.x86_64 #1
    [    1.760091] Hardware name: Red Hat KVM, BIOS 1.13.0-1.module+el8.2.0+5520+4e5817f3 04/01/2014
    [    1.760091] RIP: 0010:__init_single_page.isra.65+0x10/0x4f
    [    1.760091] Code: 48 83 cf 63 48 89 f8 0f 1f 40 00 48 89 c6 48 89 d7 e8 6b 18 80 ff 66 90 5b c3 31 c0 b9 10 00 00 00 49 89 f8 48 c1 e6 33 f3 ab <b8> 07 00 00 00 48 c1 e2 36 41 c7 40 34 01 00 00 00 48 c1 e0 33 41
    [    1.760091] RSP: 0000:ffffba783123be40 EFLAGS: 00000006
    [    1.760091] RAX: 0000000000000000 RBX: fffffad34405e300 RCX: 0000000000000000
    [    1.760091] RDX: 0000000000000000 RSI: 0010000000000000 RDI: fffffad34405e340
    [    1.760091] RBP: 0000000033f3177e R08: fffffad34405e300 R09: 0000000000000002
    [    1.760091] R10: 000000000000002b R11: ffff98afb691a500 R12: 0000000000000002
    [    1.760091] R13: 0000000000000000 R14: 000000003f03ea00 R15: 000000003e10178c
    [    1.760091] FS:  0000000000000000(0000) GS:ffff9c9ebeb00000(0000) knlGS:0000000000000000
    [    1.760091] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    1.760091] CR2: 00000000ffffffff CR3: 000000a1cf20a001 CR4: 00000000003606e0
    [    1.760091] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [    1.760091] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [    1.760091] Call Trace:
    [    1.760091]  deferred_init_pages+0x8f/0xbf
    [    1.760091]  deferred_init_memmap+0x184/0x29d
    [    1.760091]  ? deferred_free_pages.isra.97+0xba/0xba
    [    1.760091]  kthread+0x112/0x130
    [    1.760091]  ? kthread_flush_work_fn+0x10/0x10
    [    1.760091]  ret_from_fork+0x35/0x40
    [   89.123011] node 0 initialised, 1055935372 pages in 88650ms
    
    Fixes: 3a2d7fa8a3d5 ("mm: disable interrupts while initializing deferred pages")
    Reported-by: Yiqian Wei <yiwei@redhat.com>
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Shile Zhang <shile.zhang@linux.alibaba.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>    [4.17+]
    Link: http://lkml.kernel.org/r/20200403140952.17177-4-pasha.tatashin@soleen.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5386d93bc5b67d727ae7890c8e841ca24574701e
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Wed Jun 3 15:59:20 2020 -0700

    mm/pagealloc.c: call touch_nmi_watchdog() on max order boundaries in deferred init
    
    commit 117003c32771df617acf66e140fbdbdeb0ac71f5 upstream.
    
    Patch series "initialize deferred pages with interrupts enabled", v4.
    
    Keep interrupts enabled during deferred page initialization in order to
    make code more modular and allow jiffies to update.
    
    Original approach, and discussion can be found here:
     http://lkml.kernel.org/r/20200311123848.118638-1-shile.zhang@linux.alibaba.com
    
    This patch (of 3):
    
    deferred_init_memmap() disables interrupts the entire time, so it calls
    touch_nmi_watchdog() periodically to avoid soft lockup splats.  Soon it
    will run with interrupts enabled, at which point cond_resched() should be
    used instead.
    
    deferred_grow_zone() makes the same watchdog calls through code shared
    with deferred init but will continue to run with interrupts disabled, so
    it can't call cond_resched().
    
    Pull the watchdog calls up to these two places to allow the first to be
    changed later, independently of the second.  The frequency reduces from
    twice per pageblock (init and free) to once per max order block.
    
    Fixes: 3a2d7fa8a3d5 ("mm: disable interrupts while initializing deferred pages")
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Shile Zhang <shile.zhang@linux.alibaba.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Yiqian Wei <yiwei@redhat.com>
    Cc: <stable@vger.kernel.org>    [4.17+]
    Link: http://lkml.kernel.org/r/20200403140952.17177-2-pasha.tatashin@soleen.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c388f173ed8a6b8c7b8f90389d17f58d77d28e4f
Author: Pavel Tatashin <pasha.tatashin@soleen.com>
Date:   Wed Jun 3 15:59:24 2020 -0700

    mm: initialize deferred pages with interrupts enabled
    
    commit 3d060856adfc59afb9d029c233141334cfaba418 upstream.
    
    Initializing struct pages is a long task and keeping interrupts disabled
    for the duration of this operation introduces a number of problems.
    
    1. jiffies are not updated for long period of time, and thus incorrect time
       is reported. See proposed solution and discussion here:
       lkml/20200311123848.118638-1-shile.zhang@linux.alibaba.com
    2. It prevents farther improving deferred page initialization by allowing
       intra-node multi-threading.
    
    We are keeping interrupts disabled to solve a rather theoretical problem
    that was never observed in real world (See 3a2d7fa8a3d5).
    
    Let's keep interrupts enabled. In case we ever encounter a scenario where
    an interrupt thread wants to allocate large amount of memory this early in
    boot we can deal with that by growing zone (see deferred_grow_zone()) by
    the needed amount before starting deferred_init_memmap() threads.
    
    Before:
    [    1.232459] node 0 initialised, 12058412 pages in 1ms
    
    After:
    [    1.632580] node 0 initialised, 12051227 pages in 436ms
    
    Fixes: 3a2d7fa8a3d5 ("mm: disable interrupts while initializing deferred pages")
    Reported-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Yiqian Wei <yiwei@redhat.com>
    Cc: <stable@vger.kernel.org>    [4.17+]
    Link: http://lkml.kernel.org/r/20200403140952.17177-3-pasha.tatashin@soleen.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a88d8aaf9b8b5e0af163a235a3baa9fdcb7d430a
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Wed May 27 19:06:24 2020 -0400

    mm: thp: make the THP mapcount atomic against __split_huge_pmd_locked()
    
    commit c444eb564fb16645c172d550359cb3d75fe8a040 upstream.
    
    Write protect anon page faults require an accurate mapcount to decide
    if to break the COW or not. This is implemented in the THP path with
    reuse_swap_page() ->
    page_trans_huge_map_swapcount()/page_trans_huge_mapcount().
    
    If the COW triggers while the other processes sharing the page are
    under a huge pmd split, to do an accurate reading, we must ensure the
    mapcount isn't computed while it's being transferred from the head
    page to the tail pages.
    
    reuse_swap_cache() already runs serialized by the page lock, so it's
    enough to add the page lock around __split_huge_pmd_locked too, in
    order to add the missing serialization.
    
    Note: the commit in "Fixes" is just to facilitate the backporting,
    because the code before such commit didn't try to do an accurate THP
    mapcount calculation and it instead used the page_count() to decide if
    to COW or not. Both the page_count and the pin_count are THP-wide
    refcounts, so they're inaccurate if used in
    reuse_swap_page(). Reverting such commit (besides the unrelated fix to
    the local anon_vma assignment) would have also opened the window for
    memory corruption side effects to certain workloads as documented in
    such commit header.
    
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Suggested-by: Jann Horn <jannh@google.com>
    Reported-by: Jann Horn <jannh@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Fixes: 6d0a07edd17c ("mm: thp: calculate the mapcount correctly for THP pages during WP faults")
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e418045e25a9bf9d9416b76697d479a4f463e53c
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Tue May 19 05:48:59 2020 +0000

    powerpc/mm: Fix conditions to perform MMU specific management by blocks on PPC32.
    
    commit 4e3319c23a66dabfd6c35f4d2633d64d99b68096 upstream.
    
    Setting init mem to NX shall depend on sinittext being mapped by
    block, not on stext being mapped by block.
    
    Setting text and rodata to RO shall depend on stext being mapped by
    block, not on sinittext being mapped by block.
    
    Fixes: 63b2bc619565 ("powerpc/mm/32s: Use BATs for STRICT_KERNEL_RWX")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/7d565fb8f51b18a3d98445a830b2f6548cb2da2a.1589866984.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ccfd7a531e88c1e2c00c17ad91e8a28ed2f1616
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed May 27 11:16:19 2020 +0100

    btrfs: fix space_info bytes_may_use underflow during space cache writeout
    
    commit 2166e5edce9ac1edf3b113d6091ef72fcac2d6c4 upstream.
    
    We always preallocate a data extent for writing a free space cache, which
    causes writeback to always try the nocow path first, since the free space
    inode has the prealloc bit set in its flags.
    
    However if the block group that contains the data extent for the space
    cache has been turned to RO mode due to a running scrub or balance for
    example, we have to fallback to the cow path. In that case once a new data
    extent is allocated we end up calling btrfs_add_reserved_bytes(), which
    decrements the counter named bytes_may_use from the data space_info object
    with the expection that this counter was previously incremented with the
    same amount (the size of the data extent).
    
    However when we started writeout of the space cache at cache_save_setup(),
    we incremented the value of the bytes_may_use counter through a call to
    btrfs_check_data_free_space() and then decremented it through a call to
    btrfs_prealloc_file_range_trans() immediately after. So when starting the
    writeback if we fallback to cow mode we have to increment the counter
    bytes_may_use of the data space_info again to compensate for the extent
    allocation done by the cow path.
    
    When this issue happens we are incorrectly decrementing the bytes_may_use
    counter and when its current value is smaller then the amount we try to
    subtract we end up with the following warning:
    
     ------------[ cut here ]------------
     WARNING: CPU: 3 PID: 657 at fs/btrfs/space-info.h:115 btrfs_add_reserved_bytes+0x3d6/0x4e0 [btrfs]
     Modules linked in: btrfs blake2b_generic xor raid6_pq libcrc32c (...)
     CPU: 3 PID: 657 Comm: kworker/u8:7 Tainted: G        W         5.6.0-rc7-btrfs-next-58 #5
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
     Workqueue: writeback wb_workfn (flush-btrfs-1591)
     RIP: 0010:btrfs_add_reserved_bytes+0x3d6/0x4e0 [btrfs]
     Code: ff ff 48 (...)
     RSP: 0000:ffffa41608f13660 EFLAGS: 00010287
     RAX: 0000000000001000 RBX: ffff9615b93ae400 RCX: 0000000000000000
     RDX: 0000000000000002 RSI: 0000000000000000 RDI: ffff9615b96ab410
     RBP: fffffffffffee000 R08: 0000000000000001 R09: 0000000000000000
     R10: ffff961585e62a40 R11: 0000000000000000 R12: ffff9615b96ab400
     R13: ffff9615a1a2a000 R14: 0000000000012000 R15: ffff9615b93ae400
     FS:  0000000000000000(0000) GS:ffff9615bb200000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 000055cbbc2ae178 CR3: 0000000115794006 CR4: 00000000003606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      find_free_extent+0x4a0/0x16c0 [btrfs]
      btrfs_reserve_extent+0x91/0x180 [btrfs]
      cow_file_range+0x12d/0x490 [btrfs]
      btrfs_run_delalloc_range+0x9f/0x6d0 [btrfs]
      ? find_lock_delalloc_range+0x221/0x250 [btrfs]
      writepage_delalloc+0xe8/0x150 [btrfs]
      __extent_writepage+0xe8/0x4c0 [btrfs]
      extent_write_cache_pages+0x237/0x530 [btrfs]
      extent_writepages+0x44/0xa0 [btrfs]
      do_writepages+0x23/0x80
      __writeback_single_inode+0x59/0x700
      writeback_sb_inodes+0x267/0x5f0
      __writeback_inodes_wb+0x87/0xe0
      wb_writeback+0x382/0x590
      ? wb_workfn+0x4a2/0x6c0
      wb_workfn+0x4a2/0x6c0
      process_one_work+0x26d/0x6a0
      worker_thread+0x4f/0x3e0
      ? process_one_work+0x6a0/0x6a0
      kthread+0x103/0x140
      ? kthread_create_worker_on_cpu+0x70/0x70
      ret_from_fork+0x3a/0x50
     irq event stamp: 0
     hardirqs last  enabled at (0): [<0000000000000000>] 0x0
     hardirqs last disabled at (0): [<ffffffffb2abdedf>] copy_process+0x74f/0x2020
     softirqs last  enabled at (0): [<ffffffffb2abdedf>] copy_process+0x74f/0x2020
     softirqs last disabled at (0): [<0000000000000000>] 0x0
     ---[ end trace bd7c03622e0b0a52 ]---
     ------------[ cut here ]------------
    
    So fix this by incrementing the bytes_may_use counter of the data
    space_info when we fallback to the cow path. If the cow path is successful
    the counter is decremented after extent allocation (by
    btrfs_add_reserved_bytes()), if it fails it ends up being decremented as
    well when clearing the delalloc range (extent_clear_unlock_delalloc()).
    
    This could be triggered sporadically by the test case btrfs/061 from
    fstests.
    
    Fixes: 82d5902d9c681b ("Btrfs: Support reading/writing on disk free ino cache")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 248cdf728895d108c365c5d032235413cdd841d3
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed May 27 11:16:07 2020 +0100

    btrfs: fix space_info bytes_may_use underflow after nocow buffered write
    
    commit 467dc47ea99c56e966e99d09dae54869850abeeb upstream.
    
    When doing a buffered write we always try to reserve data space for it,
    even when the file has the NOCOW bit set or the write falls into a file
    range covered by a prealloc extent. This is done both because it is
    expensive to check if we can do a nocow write (checking if an extent is
    shared through reflinks or if there's a hole in the range for example),
    and because when writeback starts we might actually need to fallback to
    COW mode (for example the block group containing the target extents was
    turned into RO mode due to a scrub or balance).
    
    When we are unable to reserve data space we check if we can do a nocow
    write, and if we can, we proceed with dirtying the pages and setting up
    the range for delalloc. In this case the bytes_may_use counter of the
    data space_info object is not incremented, unlike in the case where we
    are able to reserve data space (done through btrfs_check_data_free_space()
    which calls btrfs_alloc_data_chunk_ondemand()).
    
    Later when running delalloc we attempt to start writeback in nocow mode
    but we might revert back to cow mode, for example because in the meanwhile
    a block group was turned into RO mode by a scrub or relocation. The cow
    path after successfully allocating an extent ends up calling
    btrfs_add_reserved_bytes(), which expects the bytes_may_use counter of
    the data space_info object to have been incremented before - but we did
    not do it when the buffered write started, since there was not enough
    available data space. So btrfs_add_reserved_bytes() ends up decrementing
    the bytes_may_use counter anyway, and when the counter's current value
    is smaller then the size of the allocated extent we get a stack trace
    like the following:
    
     ------------[ cut here ]------------
     WARNING: CPU: 0 PID: 20138 at fs/btrfs/space-info.h:115 btrfs_add_reserved_bytes+0x3d6/0x4e0 [btrfs]
     Modules linked in: btrfs blake2b_generic xor raid6_pq libcrc32c (...)
     CPU: 0 PID: 20138 Comm: kworker/u8:15 Not tainted 5.6.0-rc7-btrfs-next-58 #5
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
     Workqueue: writeback wb_workfn (flush-btrfs-1754)
     RIP: 0010:btrfs_add_reserved_bytes+0x3d6/0x4e0 [btrfs]
     Code: ff ff 48 (...)
     RSP: 0018:ffffbda18a4b3568 EFLAGS: 00010287
     RAX: 0000000000000000 RBX: ffff9ca076f5d800 RCX: 0000000000000000
     RDX: 0000000000000002 RSI: 0000000000000000 RDI: ffff9ca068470410
     RBP: fffffffffffff000 R08: 0000000000000001 R09: 0000000000000000
     R10: ffff9ca079d58040 R11: 0000000000000000 R12: ffff9ca068470400
     R13: ffff9ca0408b2000 R14: 0000000000001000 R15: ffff9ca076f5d800
     FS:  0000000000000000(0000) GS:ffff9ca07a600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00005605dbfe7048 CR3: 0000000138570006 CR4: 00000000003606f0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      find_free_extent+0x4a0/0x16c0 [btrfs]
      btrfs_reserve_extent+0x91/0x180 [btrfs]
      cow_file_range+0x12d/0x490 [btrfs]
      run_delalloc_nocow+0x341/0xa40 [btrfs]
      btrfs_run_delalloc_range+0x1ea/0x6d0 [btrfs]
      ? find_lock_delalloc_range+0x221/0x250 [btrfs]
      writepage_delalloc+0xe8/0x150 [btrfs]
      __extent_writepage+0xe8/0x4c0 [btrfs]
      extent_write_cache_pages+0x237/0x530 [btrfs]
      ? btrfs_wq_submit_bio+0x9f/0xc0 [btrfs]
      extent_writepages+0x44/0xa0 [btrfs]
      do_writepages+0x23/0x80
      __writeback_single_inode+0x59/0x700
      writeback_sb_inodes+0x267/0x5f0
      __writeback_inodes_wb+0x87/0xe0
      wb_writeback+0x382/0x590
      ? wb_workfn+0x4a2/0x6c0
      wb_workfn+0x4a2/0x6c0
      process_one_work+0x26d/0x6a0
      worker_thread+0x4f/0x3e0
      ? process_one_work+0x6a0/0x6a0
      kthread+0x103/0x140
      ? kthread_create_worker_on_cpu+0x70/0x70
      ret_from_fork+0x3a/0x50
     irq event stamp: 0
     hardirqs last  enabled at (0): [<0000000000000000>] 0x0
     hardirqs last disabled at (0): [<ffffffff94ebdedf>] copy_process+0x74f/0x2020
     softirqs last  enabled at (0): [<ffffffff94ebdedf>] copy_process+0x74f/0x2020
     softirqs last disabled at (0): [<0000000000000000>] 0x0
     ---[ end trace f9f6ef8ec4cd8ec9 ]---
    
    So to fix this, when falling back into cow mode check if space was not
    reserved, by testing for the bit EXTENT_NORESERVE in the respective file
    range, and if not, increment the bytes_may_use counter for the data
    space_info object. Also clear the EXTENT_NORESERVE bit from the range, so
    that if the cow path fails it decrements the bytes_may_use counter when
    clearing the delalloc range (through the btrfs_clear_delalloc_extent()
    callback).
    
    Fixes: 7ee9e4405f264e ("Btrfs: check if we can nocow if we don't have data space")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8076bdd4fe0053454a1b80ca0476b6c6f5c87375
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed May 27 11:15:53 2020 +0100

    btrfs: fix wrong file range cleanup after an error filling dealloc range
    
    commit e2c8e92d1140754073ad3799eb6620c76bab2078 upstream.
    
    If an error happens while running dellaloc in COW mode for a range, we can
    end up calling extent_clear_unlock_delalloc() for a range that goes beyond
    our range's end offset by 1 byte, which affects 1 extra page. This results
    in clearing bits and doing page operations (such as a page unlock) outside
    our target range.
    
    Fix that by calling extent_clear_unlock_delalloc() with an inclusive end
    offset, instead of an exclusive end offset, at cow_file_range().
    
    Fixes: a315e68f6e8b30 ("Btrfs: fix invalid attempt to free reserved space on failure to cow range")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2c69ecb605f7a8983ddbb50cc6829c4f2e7c2a3
Author: Omar Sandoval <osandov@fb.com>
Date:   Thu Apr 16 14:46:12 2020 -0700

    btrfs: fix error handling when submitting direct I/O bio
    
    commit 6d3113a193e3385c72240096fe397618ecab6e43 upstream.
    
    In btrfs_submit_direct_hook(), if a direct I/O write doesn't span a RAID
    stripe or chunk, we submit orig_bio without cloning it. In this case, we
    don't increment pending_bios. Then, if btrfs_submit_dio_bio() fails, we
    decrement pending_bios to -1, and we never complete orig_bio. Fix it by
    initializing pending_bios to 1 instead of incrementing later.
    
    Fixing this exposes another bug: we put orig_bio prematurely and then
    put it again from end_io. Fix it by not putting orig_bio.
    
    After this change, pending_bios is really more of a reference count, but
    I'll leave that cleanup separate to keep the fix small.
    
    Fixes: e65e15355429 ("btrfs: fix panic caused by direct IO")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05c5e98bf4029d953647c4bbb339ac7d0821153c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Mar 13 15:28:48 2020 -0400

    btrfs: force chunk allocation if our global rsv is larger than metadata
    
    commit 9c343784c4328781129bcf9e671645f69fe4b38a upstream.
    
    Nikolay noticed a bunch of test failures with my global rsv steal
    patches.  At first he thought they were introduced by them, but they've
    been failing for a while with 64k nodes.
    
    The problem is with 64k nodes we have a global reserve that calculates
    out to 13MiB on a freshly made file system, which only has 8MiB of
    metadata space.  Because of changes I previously made we no longer
    account for the global reserve in the overcommit logic, which means we
    correctly allow overcommit to happen even though we are already
    overcommitted.
    
    However in some corner cases, for example btrfs/170, we will allocate
    the entire file system up with data chunks before we have enough space
    pressure to allocate a metadata chunk.  Then once the fs is full we
    ENOSPC out because we cannot overcommit and the global reserve is taking
    up all of the available space.
    
    The most ideal way to deal with this is to change our space reservation
    stuff to take into account the height of the tree's that we're
    modifying, so that our global reserve calculation does not end up so
    obscenely large.
    
    However that is a huge undertaking.  Instead fix this by forcing a chunk
    allocation if the global reserve is larger than the total metadata
    space.  This gives us essentially the same behavior that happened
    before, we get a chunk allocated and these tests can pass.
    
    This is meant to be a stop-gap measure until we can tackle the "tree
    height only" project.
    
    Fixes: 0096420adb03 ("btrfs: do not account global reserve in can_overcommit")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f63545770fc4a43df6c64d1a9cf1366a187e987b
Author: Marcos Paulo de Souza <mpdesouza@suse.com>
Date:   Sun May 10 23:15:07 2020 -0300

    btrfs: send: emit file capabilities after chown
    
    commit 89efda52e6b6930f80f5adda9c3c9edfb1397191 upstream.
    
    Whenever a chown is executed, all capabilities of the file being touched
    are lost.  When doing incremental send with a file with capabilities,
    there is a situation where the capability can be lost on the receiving
    side. The sequence of actions bellow shows the problem:
    
      $ mount /dev/sda fs1
      $ mount /dev/sdb fs2
    
      $ touch fs1/foo.bar
      $ setcap cap_sys_nice+ep fs1/foo.bar
      $ btrfs subvolume snapshot -r fs1 fs1/snap_init
      $ btrfs send fs1/snap_init | btrfs receive fs2
    
      $ chgrp adm fs1/foo.bar
      $ setcap cap_sys_nice+ep fs1/foo.bar
    
      $ btrfs subvolume snapshot -r fs1 fs1/snap_complete
      $ btrfs subvolume snapshot -r fs1 fs1/snap_incremental
    
      $ btrfs send fs1/snap_complete | btrfs receive fs2
      $ btrfs send -p fs1/snap_init fs1/snap_incremental | btrfs receive fs2
    
    At this point, only a chown was emitted by "btrfs send" since only the
    group was changed. This makes the cap_sys_nice capability to be dropped
    from fs2/snap_incremental/foo.bar
    
    To fix that, only emit capabilities after chown is emitted. The current
    code first checks for xattrs that are new/changed, emits them, and later
    emit the chown. Now, __process_new_xattr skips capabilities, letting
    only finish_inode_if_needed to emit them, if they exist, for the inode
    being processed.
    
    This behavior was being worked around in "btrfs receive" side by caching
    the capability and only applying it after chown. Now, xattrs are only
    emmited _after_ chown, making that workaround not needed anymore.
    
    Link: https://github.com/kdave/btrfs-progs/issues/202
    CC: stable@vger.kernel.org # 4.4+
    Suggested-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Marcos Paulo de Souza <mpdesouza@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f260ed536a3939c43610b368c1189ee84cce24
Author: Anand Jain <anand.jain@oracle.com>
Date:   Tue May 5 02:58:25 2020 +0800

    btrfs: include non-missing as a qualifier for the latest_bdev
    
    commit 998a0671961f66e9fad4990ed75f80ba3088c2f1 upstream.
    
    btrfs_free_extra_devids() updates fs_devices::latest_bdev to point to
    the bdev with greatest device::generation number.  For a typical-missing
    device the generation number is zero so fs_devices::latest_bdev will
    never point to it.
    
    But if the missing device is due to alienation [1], then
    device::generation is not zero and if it is greater or equal to the rest
    of device  generations in the list, then fs_devices::latest_bdev ends up
    pointing to the missing device and reports the error like [2].
    
    [1] We maintain devices of a fsid (as in fs_device::fsid) in the
    fs_devices::devices list, a device is considered as an alien device
    if its fsid does not match with the fs_device::fsid
    
    Consider a working filesystem with raid1:
    
      $ mkfs.btrfs -f -d raid1 -m raid1 /dev/sda /dev/sdb
      $ mount /dev/sda /mnt-raid1
      $ umount /mnt-raid1
    
    While mnt-raid1 was unmounted the user force-adds one of its devices to
    another btrfs filesystem:
    
      $ mkfs.btrfs -f /dev/sdc
      $ mount /dev/sdc /mnt-single
      $ btrfs dev add -f /dev/sda /mnt-single
    
    Now the original mnt-raid1 fails to mount in degraded mode, because
    fs_devices::latest_bdev is pointing to the alien device.
    
      $ mount -o degraded /dev/sdb /mnt-raid1
    
    [2]
    mount: wrong fs type, bad option, bad superblock on /dev/sdb,
           missing codepage or helper program, or other error
    
           In some cases useful info is found in syslog - try
           dmesg | tail or so.
    
      kernel: BTRFS warning (device sdb): devid 1 uuid 072a0192-675b-4d5a-8640-a5cf2b2c704d is missing
      kernel: BTRFS error (device sdb): failed to read devices
      kernel: BTRFS error (device sdb): open_ctree failed
    
    Fix the root cause by checking if the device is not missing before it
    can be considered for the fs_devices::latest_bdev.
    
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd9720b8e95736314999a6d6dfa6c6f60f2634c2
Author: Anand Jain <anand.jain@oracle.com>
Date:   Tue May 5 02:58:26 2020 +0800

    btrfs: free alien device after device add
    
    commit 7f551d969037cc128eca60688d9c5a300d84e665 upstream.
    
    When an old device has new fsid through 'btrfs device add -f <dev>' our
    fs_devices list has an alien device in one of the fs_devices lists.
    
    By having an alien device in fs_devices, we have two issues so far
    
    1. missing device does not not show as missing in the userland
    
    2. degraded mount will fail
    
    Both issues are caused by the fact that there's an alien device in the
    fs_devices list. (Alien means that it does not belong to the filesystem,
    identified by fsid, or does not contain btrfs filesystem at all, eg. due
    to overwrite).
    
    A device can be scanned/added through the control device ioctls
    SCAN_DEV, DEVICES_READY or by ADD_DEV.
    
    And device coming through the control device is checked against the all
    other devices in the lists, but this was not the case for ADD_DEV.
    
    This patch fixes both issues above by removing the alien device.
    
    CC: stable@vger.kernel.org # 5.4+
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b008ae4cc74d3ab43074099746f6c32d353e01aa
Author: Daniel Axtens <dja@axtens.net>
Date:   Wed Jun 3 15:56:46 2020 -0700

    string.h: fix incompatibility between FORTIFY_SOURCE and KASAN
    
    [ Upstream commit 47227d27e2fcb01a9e8f5958d8997cf47a820afc ]
    
    The memcmp KASAN self-test fails on a kernel with both KASAN and
    FORTIFY_SOURCE.
    
    When FORTIFY_SOURCE is on, a number of functions are replaced with
    fortified versions, which attempt to check the sizes of the operands.
    However, these functions often directly invoke __builtin_foo() once they
    have performed the fortify check.  Using __builtins may bypass KASAN
    checks if the compiler decides to inline it's own implementation as
    sequence of instructions, rather than emit a function call that goes out
    to a KASAN-instrumented implementation.
    
    Why is only memcmp affected?
    ============================
    
    Of the string and string-like functions that kasan_test tests, only memcmp
    is replaced by an inline sequence of instructions in my testing on x86
    with gcc version 9.2.1 20191008 (Ubuntu 9.2.1-9ubuntu2).
    
    I believe this is due to compiler heuristics.  For example, if I annotate
    kmalloc calls with the alloc_size annotation (and disable some fortify
    compile-time checking!), the compiler will replace every memset except the
    one in kmalloc_uaf_memset with inline instructions.  (I have some WIP
    patches to add this annotation.)
    
    Does this affect other functions in string.h?
    =============================================
    
    Yes. Anything that uses __builtin_* rather than __real_* could be
    affected. This looks like:
    
     - strncpy
     - strcat
     - strlen
     - strlcpy maybe, under some circumstances?
     - strncat under some circumstances
     - memset
     - memcpy
     - memmove
     - memcmp (as noted)
     - memchr
     - strcpy
    
    Whether a function call is emitted always depends on the compiler.  Most
    bugs should get caught by FORTIFY_SOURCE, but the missed memcmp test shows
    that this is not always the case.
    
    Isn't FORTIFY_SOURCE disabled with KASAN?
    ========================================-
    
    The string headers on all arches supporting KASAN disable fortify with
    kasan, but only when address sanitisation is _also_ disabled.  For example
    from x86:
    
     #if defined(CONFIG_KASAN) && !defined(__SANITIZE_ADDRESS__)
     /*
      * For files that are not instrumented (e.g. mm/slub.c) we
      * should use not instrumented version of mem* functions.
      */
     #define memcpy(dst, src, len) __memcpy(dst, src, len)
     #define memmove(dst, src, len) __memmove(dst, src, len)
     #define memset(s, c, n) __memset(s, c, n)
    
     #ifndef __NO_FORTIFY
     #define __NO_FORTIFY /* FORTIFY_SOURCE uses __builtin_memcpy, etc. */
     #endif
    
     #endif
    
    This comes from commit 6974f0c4555e ("include/linux/string.h: add the
    option of fortified string.h functions"), and doesn't work when KASAN is
    enabled and the file is supposed to be sanitised - as with test_kasan.c
    
    I'm pretty sure this is not wrong, but not as expansive it should be:
    
     * we shouldn't use __builtin_memcpy etc in files where we don't have
       instrumentation - it could devolve into a function call to memcpy,
       which will be instrumented. Rather, we should use __memcpy which
       by convention is not instrumented.
    
     * we also shouldn't be using __builtin_memcpy when we have a KASAN
       instrumented file, because it could be replaced with inline asm
       that will not be instrumented.
    
    What is correct behaviour?
    ==========================
    
    Firstly, there is some overlap between fortification and KASAN: both
    provide some level of _runtime_ checking. Only fortify provides
    compile-time checking.
    
    KASAN and fortify can pick up different things at runtime:
    
     - Some fortify functions, notably the string functions, could easily be
       modified to consider sub-object sizes (e.g. members within a struct),
       and I have some WIP patches to do this. KASAN cannot detect these
       because it cannot insert poision between members of a struct.
    
     - KASAN can detect many over-reads/over-writes when the sizes of both
       operands are unknown, which fortify cannot.
    
    So there are a couple of options:
    
     1) Flip the test: disable fortify in santised files and enable it in
        unsanitised files. This at least stops us missing KASAN checking, but
        we lose the fortify checking.
    
     2) Make the fortify code always call out to real versions. Do this only
        for KASAN, for fear of losing the inlining opportunities we get from
        __builtin_*.
    
    (We can't use kasan_check_{read,write}: because the fortify functions are
    _extern inline_, you can't include _static_ inline functions without a
    compiler warning. kasan_check_{read,write} are static inline so we can't
    use them even when they would otherwise be suitable.)
    
    Take approach 2 and call out to real versions when KASAN is enabled.
    
    Use __underlying_foo to distinguish from __real_foo: __real_foo always
    refers to the kernel's implementation of foo, __underlying_foo could be
    either the kernel implementation or the __builtin_foo implementation.
    
    This is sometimes enough to make the memcmp test succeed with
    FORTIFY_SOURCE enabled. It is at least enough to get the function call
    into the module. One more fix is needed to make it reliable: see the next
    patch.
    
    Fixes: 6974f0c4555e ("include/linux/string.h: add the option of fortified string.h functions")
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: David Gow <davidgow@google.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Daniel Micay <danielmicay@gmail.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Link: http://lkml.kernel.org/r/20200423154503.5103-3-dja@axtens.net
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6c2b4d246c5979e18d978efc67cd4b7fa5553dd
Author: Daniel Axtens <dja@axtens.net>
Date:   Wed Jun 3 15:56:43 2020 -0700

    kasan: stop tests being eliminated as dead code with FORTIFY_SOURCE
    
    [ Upstream commit adb72ae1915db28f934e9e02c18bfcea2f3ed3b7 ]
    
    Patch series "Fix some incompatibilites between KASAN and FORTIFY_SOURCE", v4.
    
    3 KASAN self-tests fail on a kernel with both KASAN and FORTIFY_SOURCE:
    memchr, memcmp and strlen.
    
    When FORTIFY_SOURCE is on, a number of functions are replaced with
    fortified versions, which attempt to check the sizes of the operands.
    However, these functions often directly invoke __builtin_foo() once they
    have performed the fortify check.  The compiler can detect that the
    results of these functions are not used, and knows that they have no other
    side effects, and so can eliminate them as dead code.
    
    Why are only memchr, memcmp and strlen affected?
    ================================================
    
    Of string and string-like functions, kasan_test tests:
    
     * strchr  ->  not affected, no fortified version
     * strrchr ->  likewise
     * strcmp  ->  likewise
     * strncmp ->  likewise
    
     * strnlen ->  not affected, the fortify source implementation calls the
                   underlying strnlen implementation which is instrumented, not
                   a builtin
    
     * strlen  ->  affected, the fortify souce implementation calls a __builtin
                   version which the compiler can determine is dead.
    
     * memchr  ->  likewise
     * memcmp  ->  likewise
    
     * memset ->   not affected, the compiler knows that memset writes to its
                   first argument and therefore is not dead.
    
    Why does this not affect the functions normally?
    ================================================
    
    In string.h, these functions are not marked as __pure, so the compiler
    cannot know that they do not have side effects.  If relevant functions are
    marked as __pure in string.h, we see the following warnings and the
    functions are elided:
    
    lib/test_kasan.c: In function `kasan_memchr':
    lib/test_kasan.c:606:2: warning: statement with no effect [-Wunused-value]
      memchr(ptr, '1', size + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
    lib/test_kasan.c: In function `kasan_memcmp':
    lib/test_kasan.c:622:2: warning: statement with no effect [-Wunused-value]
      memcmp(ptr, arr, size+1);
      ^~~~~~~~~~~~~~~~~~~~~~~~
    lib/test_kasan.c: In function `kasan_strings':
    lib/test_kasan.c:645:2: warning: statement with no effect [-Wunused-value]
      strchr(ptr, '1');
      ^~~~~~~~~~~~~~~~
    ...
    
    This annotation would make sense to add and could be added at any point,
    so the behaviour of test_kasan.c should change.
    
    The fix
    =======
    
    Make all the functions that are pure write their results to a global,
    which makes them live.  The strlen and memchr tests now pass.
    
    The memcmp test still fails to trigger, which is addressed in the next
    patch.
    
    [dja@axtens.net: drop patch 3]
      Link: http://lkml.kernel.org/r/20200424145521.8203-2-dja@axtens.net
    Fixes: 0c96350a2d2f ("lib/test_kasan.c: add tests for several string/memory API functions")
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: David Gow <davidgow@google.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Daniel Micay <danielmicay@gmail.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Link: http://lkml.kernel.org/r/20200423154503.5103-1-dja@axtens.net
    Link: http://lkml.kernel.org/r/20200423154503.5103-2-dja@axtens.net
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c48a842d8ce7a12997c569ce3be7d439b4fa5843
Author: Jakub Sitnicki <jakub@cloudflare.com>
Date:   Sun May 31 10:28:44 2020 +0200

    selftests/bpf, flow_dissector: Close TAP device FD after the test
    
    [ Upstream commit b8215dce7dfd817ca38807f55165bf502146cd68 ]
    
    test_flow_dissector leaves a TAP device after it's finished, potentially
    interfering with other tests that will run after it. Fix it by closing the
    TAP descriptor on cleanup.
    
    Fixes: 0905beec9f52 ("selftests/bpf: run flow dissector tests in skb-less mode")
    Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200531082846.2117903-11-jakub@cloudflare.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7b1564a24e62b302ce9cb39765f0ac9814ffabd
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Fri May 29 16:06:59 2020 -0700

    bpf: Fix running sk_skb program types with ktls
    
    [ Upstream commit e91de6afa81c10e9f855c5695eb9a53168d96b73 ]
    
    KTLS uses a stream parser to collect TLS messages and send them to
    the upper layer tls receive handler. This ensures the tls receiver
    has a full TLS header to parse when it is run. However, when a
    socket has BPF_SK_SKB_STREAM_VERDICT program attached before KTLS
    is enabled we end up with two stream parsers running on the same
    socket.
    
    The result is both try to run on the same socket. First the KTLS
    stream parser runs and calls read_sock() which will tcp_read_sock
    which in turn calls tcp_rcv_skb(). This dequeues the skb from the
    sk_receive_queue. When this is done KTLS code then data_ready()
    callback which because we stacked KTLS on top of the bpf stream
    verdict program has been replaced with sk_psock_start_strp(). This
    will in turn kick the stream parser again and eventually do the
    same thing KTLS did above calling into tcp_rcv_skb() and dequeuing
    a skb from the sk_receive_queue.
    
    At this point the data stream is broke. Part of the stream was
    handled by the KTLS side some other bytes may have been handled
    by the BPF side. Generally this results in either missing data
    or more likely a "Bad Message" complaint from the kTLS receive
    handler as the BPF program steals some bytes meant to be in a
    TLS header and/or the TLS header length is no longer correct.
    
    We've already broke the idealized model where we can stack ULPs
    in any order with generic callbacks on the TX side to handle this.
    So in this patch we do the same thing but for RX side. We add
    a sk_psock_strp_enabled() helper so TLS can learn a BPF verdict
    program is running and add a tls_sw_has_ctx_rx() helper so BPF
    side can learn there is a TLS ULP on the socket.
    
    Then on BPF side we omit calling our stream parser to avoid
    breaking the data stream for the KTLS receiver. Then on the
    KTLS side we call BPF_SK_SKB_STREAM_VERDICT once the KTLS
    receiver is done with the packet but before it posts the
    msg to userspace. This gives us symmetry between the TX and
    RX halfs and IMO makes it usable again. On the TX side we
    process packets in this order BPF -> TLS -> TCP and on
    the receive side in the reverse order TCP -> TLS -> BPF.
    
    Discovered while testing OpenSSL 3.0 Alpha2.0 release.
    
    Fixes: d829e9c4112b5 ("tls: convert to generic sk_msg interface")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/159079361946.5745.605854335665044485.stgit@john-Precision-5820-Tower
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9cd7b83942ffbcc9ad1f573a4e41a0bfe119fd6
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Fri May 29 16:06:41 2020 -0700

    bpf: Refactor sockmap redirect code so its easy to reuse
    
    [ Upstream commit ca2f5f21dbbd5e3a00cd3e97f728aa2ca0b2e011 ]
    
    We will need this block of code called from tls context shortly
    lets refactor the redirect logic so its easy to use. This also
    cleans up the switch stmt so we have fewer fallthrough cases.
    
    No logic changes are intended.
    
    Fixes: d829e9c4112b5 ("tls: convert to generic sk_msg interface")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/159079360110.5745.7024009076049029819.stgit@john-Precision-5820-Tower
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 215a256bc8dd7ef6bc52f3fd697027a7275d1c27
Author: Anton Protopopov <a.s.protopopov@gmail.com>
Date:   Wed May 27 18:56:59 2020 +0000

    bpf: Fix map permissions check
    
    [ Upstream commit 1ea0f9120c8ce105ca181b070561df5cbd6bc049 ]
    
    The map_lookup_and_delete_elem() function should check for both FMODE_CAN_WRITE
    and FMODE_CAN_READ permissions because it returns a map element to user space.
    
    Fixes: bd513cd08f10 ("bpf: add MAP_LOOKUP_AND_DELETE_ELEM syscall")
    Signed-off-by: Anton Protopopov <a.s.protopopov@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20200527185700.14658-5-a.s.protopopov@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d55b7032ad1bde3a2e197c30a9f4c114c2b513d
Author: Eelco Chaudron <echaudro@redhat.com>
Date:   Wed May 27 10:42:00 2020 +0200

    libbpf: Fix perf_buffer__free() API for sparse allocs
    
    [ Upstream commit 601b05ca6edb0422bf6ce313fbfd55ec7bbbc0fd ]
    
    In case the cpu_bufs are sparsely allocated they are not all
    free'ed. These changes will fix this.
    
    Fixes: fb84b8224655 ("libbpf: add perf buffer API")
    Signed-off-by: Eelco Chaudron <echaudro@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/159056888305.330763.9684536967379110349.stgit@ebuild
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98545815cfcf60d28b8947ab2154b344c0e91034
Author: Chris Chiu <chiu@endlessm.com>
Date:   Fri May 22 15:44:24 2020 +0800

    platform/x86: asus_wmi: Reserve more space for struct bias_args
    
    [ Upstream commit 7b91f1565fbfbe5a162d91f8a1f6c5580c2fc1d0 ]
    
    On the ASUS laptop UX325JA/UX425JA, most of the media keys are not
    working due to the ASUS WMI driver fails to be loaded. The ACPI error
    as follows leads to the failure of asus_wmi_evaluate_method.
      ACPI BIOS Error (bug): AE_AML_BUFFER_LIMIT, Field [IIA3] at bit offset/length 96/32 exceeds size of target Buffer (96 bits) (20200326/dsopcode-203)
      No Local Variables are initialized for Method [WMNB]
      ACPI Error: Aborting method \_SB.ATKD.WMNB due to previous error (AE_AML_BUFFER_LIMIT) (20200326/psparse-531)
    
    The DSDT for the WMNB part shows that 5 DWORD required for local
    variables and the 3rd variable IIA3 hit the buffer limit.
    
    Method (WMNB, 3, Serialized)
    { ..
        CreateDWordField (Arg2, Zero, IIA0)
        CreateDWordField (Arg2, 0x04, IIA1)
        CreateDWordField (Arg2, 0x08, IIA2)
        CreateDWordField (Arg2, 0x0C, IIA3)
        CreateDWordField (Arg2, 0x10, IIA4)
        Local0 = (Arg1 & 0xFFFFFFFF)
        If ((Local0 == 0x54494E49))
      ..
    }
    
    The limitation is determined by the input acpi_buffer size passed
    to the wmi_evaluate_method. Since the struct bios_args is the data
    structure used as input buffer by default for all ASUS WMI calls,
    the size needs to be expanded to fix the problem.
    
    Signed-off-by: Chris Chiu <chiu@endlessm.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4383a5dfbdc5520a69db39c85080693bd31d4a27
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri May 15 20:39:16 2020 +0200

    platform/x86: intel-vbtn: Only blacklist SW_TABLET_MODE on the 9 / "Laptop" chasis-type
    
    [ Upstream commit cfae58ed681c5fe0185db843013ecc71cd265ebf ]
    
    The HP Stream x360 11-p000nd no longer report SW_TABLET_MODE state / events
    with recent kernels. This model reports a chassis-type of 10 / "Notebook"
    which is not on the recently introduced chassis-type whitelist
    
    Commit de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode
    switch on 2-in-1's") added a chassis-type whitelist and only listed 31 /
    "Convertible" as being capable of generating valid SW_TABLET_MOD events.
    
    Commit 1fac39fd0316 ("platform/x86: intel-vbtn: Also handle tablet-mode
    switch on "Detachable" and "Portable" chassis-types") extended the
    whitelist with chassis-types 8 / "Portable" and 32 / "Detachable".
    
    And now we need to exten the whitelist again with 10 / "Notebook"...
    
    The issue original fixed by the whitelist is really a ACPI DSDT bug on
    the Dell XPS 9360 where it has a VGBS which reports it is in tablet mode
    even though it is not a 2-in-1 at all, but a regular laptop.
    
    So since this is a workaround for a DSDT issue on that specific model,
    instead of extending the whitelist over and over again, lets switch to
    a blacklist and only blacklist the chassis-type of the model for which
    the chassis-type check was added.
    
    Note this also fixes the current version of the code no longer checking
    if dmi_get_system_info(DMI_CHASSIS_TYPE) returns NULL.
    
    Fixes: 1fac39fd0316 ("platform/x86: intel-vbtn: Also handle tablet-mode switch on "Detachable" and "Portable" chassis-types")
    Cc: Mario Limonciello <mario.limonciello@dell.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Mario Limonciello <Mario.limonciello@dell.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f3cba4bc241b7b2464b79079e7eb8a2e66943cd
Author: Nickolai Kozachenko <daemongloom@gmail.com>
Date:   Sat May 30 22:07:20 2020 +0500

    platform/x86: intel-hid: Add a quirk to support HP Spectre X2 (2015)
    
    [ Upstream commit 8fe63eb757ac6e661a384cc760792080bdc738dc ]
    
    HEBC method reports capabilities of 5 button array but HP Spectre X2 (2015)
    does not have this control method (the same was for Wacom MobileStudio Pro).
    Expand previous DMI quirk by Alex Hung to also enable 5 button array
    for this system.
    
    Signed-off-by: Nickolai Kozachenko <daemongloom@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 176396ad0594cb20f0360676931504b7bf90ce67
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri May 15 16:27:04 2020 +0300

    platform/x86: hp-wmi: Convert simple_strtoul() to kstrtou32()
    
    [ Upstream commit 5cdc45ed3948042f0d73c6fec5ee9b59e637d0d2 ]
    
    First of all, unsigned long can overflow u32 value on 64-bit machine.
    Second, simple_strtoul() doesn't check for overflow in the input.
    
    Convert simple_strtoul() to kstrtou32() to eliminate above issues.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b77412359c1e6b44b37365a11d0f434426783208
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Thu May 28 13:20:46 2020 -0500

    cpuidle: Fix three reference count leaks
    
    [ Upstream commit c343bf1ba5efcbf2266a1fe3baefec9cc82f867f ]
    
    kobject_init_and_add() takes reference even when it fails.
    If this function returns an error, kobject_put() must be called to
    properly clean up the memory associated with the object.
    
    Previous commit "b8eb718348b8" fixed a similar problem.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    [ rjw: Subject ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf335986981916f3dd223a85a7f8c5223f75bf73
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Fri May 29 16:11:51 2020 +0300

    spi: dw: Return any value retrieved from the dma_transfer callback
    
    [ Upstream commit f0410bbf7d0fb80149e3b17d11d31f5b5197873e ]
    
    DW APB SSI DMA-part of the driver may need to perform the requested
    SPI-transfer synchronously. In that case the dma_transfer() callback
    will return 0 as a marker of the SPI transfer being finished so the
    SPI core doesn't need to wait and may proceed with the SPI message
    trasnfers pumping procedure. This will be needed to fix the problem
    when DMA transactions are finished, but there is still data left in
    the SPI Tx/Rx FIFOs being sent/received. But for now make dma_transfer
    to return 1 as the normal dw_spi_transfer_one() method.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Georgy Vlasov <Georgy.Vlasov@baikalelectronics.ru>
    Cc: Ramil Zaripov <Ramil.Zaripov@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Link: https://lore.kernel.org/r/20200529131205.31838-3-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c95fc879a2f900da67af923ed3918adad077fdf
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Tue May 26 18:22:01 2020 +0800

    mmc: sdhci-esdhc-imx: fix the mask for tuning start point
    
    [ Upstream commit 1194be8c949b8190b2882ad8335a5d98aa50c735 ]
    
    According the RM, the bit[6~0] of register ESDHC_TUNING_CTRL is
    TUNING_START_TAP, bit[7] of this register is to disable the command
    CRC check for standard tuning. So fix it here.
    
    Fixes: d87fc9663688 ("mmc: sdhci-esdhc-imx: support setting tuning start point")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Link: https://lore.kernel.org/r/1590488522-9292-1-git-send-email-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fe3a1c2986980d70a67d70ec6cd93f5ba8d5de6
Author: Sharon <sara.sharon@intel.com>
Date:   Fri May 29 09:39:29 2020 +0300

    iwlwifi: mvm: fix aux station leak
    
    [ Upstream commit f327236df2afc8c3c711e7e070f122c26974f4da ]
    
    When mvm is initialized we alloc aux station with aux queue.
    We later free the station memory when driver is stopped, but we
    never free the queue's memory, which casues a leak.
    
    Add a proper de-initialization of the station.
    
    Signed-off-by: Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20200529092401.0121c5be55e9.Id7516fbb3482131d0c9dfb51ff20b226617ddb49@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffa118a164e675b59af8070411261e899b127844
Author: Xie XiuQi <xiexiuqi@huawei.com>
Date:   Tue May 5 10:45:21 2020 +0800

    ixgbe: fix signed-integer-overflow warning
    
    [ Upstream commit 3b70683fc4d68f5d915d9dc7e5ba72c732c7315c ]
    
    ubsan report this warning, fix it by adding a unsigned suffix.
    
    UBSAN: signed-integer-overflow in
    drivers/net/ethernet/intel/ixgbe/ixgbe_common.c:2246:26
    65535 * 65537 cannot be represented in type 'int'
    CPU: 21 PID: 7 Comm: kworker/u256:0 Not tainted 5.7.0-rc3-debug+ #39
    Hardware name: Huawei TaiShan 2280 V2/BC82AMDC, BIOS 2280-V2 03/27/2020
    Workqueue: ixgbe ixgbe_service_task [ixgbe]
    Call trace:
     dump_backtrace+0x0/0x3f0
     show_stack+0x28/0x38
     dump_stack+0x154/0x1e4
     ubsan_epilogue+0x18/0x60
     handle_overflow+0xf8/0x148
     __ubsan_handle_mul_overflow+0x34/0x48
     ixgbe_fc_enable_generic+0x4d0/0x590 [ixgbe]
     ixgbe_service_task+0xc20/0x1f78 [ixgbe]
     process_one_work+0x8f0/0xf18
     worker_thread+0x430/0x6d0
     kthread+0x218/0x238
     ret_from_fork+0x10/0x18
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99ea968e3766b9901709c666669034e1dc707ac9
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Fri May 15 17:42:24 2020 -0700

    ice: fix potential double free in probe unrolling
    
    [ Upstream commit bc3a024101ca497bea4c69be4054c32a5c349f1d ]
    
    If ice_init_interrupt_scheme fails, ice_probe will jump to clearing up
    the interrupts. This can lead to some static analysis tools such as the
    compiler sanitizers complaining about double free problems.
    
    Since ice_init_interrupt_scheme already unrolls internally on failure,
    there is no need to call ice_clear_interrupt_scheme when it fails. Add
    a new unroll label and use that instead.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62b2fbb9c463c2b9c4332d1ce586273500cc0148
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Apr 14 18:14:10 2020 +0200

    mmc: via-sdmmc: Respect the cmd->busy_timeout from the mmc core
    
    [ Upstream commit 966244ccd2919e28f25555a77f204cd1c109cad8 ]
    
    Using a fixed 1s timeout for all commands (and data transfers) is a bit
    problematic.
    
    For some commands it means waiting longer than needed for the timer to
    expire, which may not a big issue, but still. For other commands, like for
    an erase (CMD38) that uses a R1B response, may require longer timeouts than
    1s. In these cases, we may end up treating the command as it failed, while
    it just needed some more time to complete successfully.
    
    Fix the problem by respecting the cmd->busy_timeout, which is provided by
    the mmc core.
    
    Cc: Bruce Chang <brucechang@via.com.tw>
    Cc: Harald Welte <HaraldWelte@viatech.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/20200414161413.3036-17-ulf.hansson@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d6143663f21d6a4f77bca405b26212e443ce176
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Apr 14 18:14:13 2020 +0200

    staging: greybus: sdio: Respect the cmd->busy_timeout from the mmc core
    
    [ Upstream commit a389087ee9f195fcf2f31cd771e9ec5f02c16650 ]
    
    Using a fixed 1s timeout for all commands is a bit problematic.
    
    For some commands it means waiting longer than needed for the timeout to
    expire, which may not a big issue, but still. For other commands, like for
    an erase (CMD38) that uses a R1B response, may require longer timeouts than
    1s. In these cases, we may end up treating the command as it failed, while
    it just needed some more time to complete successfully.
    
    Fix the problem by respecting the cmd->busy_timeout, which is provided by
    the mmc core.
    
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Alex Elder <elder@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: greybus-dev@lists.linaro.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200414161413.3036-20-ulf.hansson@linaro.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a7c5b83f846faa70e34220c3bc355db61021f49
Author: Veerabhadrarao Badiganti <vbadigan@codeaurora.org>
Date:   Mon Apr 20 11:50:24 2020 +0530

    mmc: sdhci-msm: Set SDHCI_QUIRK_MULTIBLOCK_READ_ACMD12 quirk
    
    [ Upstream commit d863cb03fb2aac07f017b2a1d923cdbc35021280 ]
    
    sdhci-msm can support auto cmd12.
    So enable SDHCI_QUIRK_MULTIBLOCK_READ_ACMD12 quirk.
    
    Signed-off-by: Veerabhadrarao Badiganti <vbadigan@codeaurora.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/1587363626-20413-3-git-send-email-vbadigan@codeaurora.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62e7e4f5976ce617d57453b01ec4ab24608499cd
Author: Coly Li <colyli@suse.de>
Date:   Wed May 27 12:01:53 2020 +0800

    bcache: fix refcount underflow in bcache_device_free()
    
    [ Upstream commit 86da9f736740eba602389908574dfbb0f517baa5 ]
    
    The problematic code piece in bcache_device_free() is,
    
     785 static void bcache_device_free(struct bcache_device *d)
     786 {
     787     struct gendisk *disk = d->disk;
     [snipped]
     799     if (disk) {
     800             if (disk->flags & GENHD_FL_UP)
     801                     del_gendisk(disk);
     802
     803             if (disk->queue)
     804                     blk_cleanup_queue(disk->queue);
     805
     806             ida_simple_remove(&bcache_device_idx,
     807                               first_minor_to_idx(disk->first_minor));
     808             put_disk(disk);
     809         }
     [snipped]
     816 }
    
    At line 808, put_disk(disk) may encounter kobject refcount of 'disk'
    being underflow.
    
    Here is how to reproduce the issue,
    - Attche the backing device to a cache device and do random write to
      make the cache being dirty.
    - Stop the bcache device while the cache device has dirty data of the
      backing device.
    - Only register the backing device back, NOT register cache device.
    - The bcache device node /dev/bcache0 won't show up, because backing
      device waits for the cache device shows up for the missing dirty
      data.
    - Now echo 1 into /sys/fs/bcache/pendings_cleanup, to stop the pending
      backing device.
    - After the pending backing device stopped, use 'dmesg' to check kernel
      message, a use-after-free warning from KASA reported the refcount of
      kobject linked to the 'disk' is underflow.
    
    The dropping refcount at line 808 in the above code piece is added by
    add_disk(d->disk) in bch_cached_dev_run(). But in the above condition
    the cache device is not registered, bch_cached_dev_run() has no chance
    to be called and the refcount is not added. The put_disk() for a non-
    added refcount of gendisk kobject triggers a underflow warning.
    
    This patch checks whether GENHD_FL_UP is set in disk->flags, if it is
    not set then the bcache device was not added, don't call put_disk()
    and the the underflow issue can be avoided.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d55960f7f6b7f215654d3f6e1a043cd58cd894f3
Author: YuanJunQing <yuanjunqing66@163.com>
Date:   Wed May 27 14:11:30 2020 +0800

    MIPS: Fix IRQ tracing when call handle_fpe() and handle_msa_fpe()
    
    [ Upstream commit 31e1b3efa802f97a17628dde280006c4cee4ce5e ]
    
    Register "a1" is unsaved in this function,
     when CONFIG_TRACE_IRQFLAGS is enabled,
     the TRACE_IRQS_OFF macro will call trace_hardirqs_off(),
     and this may change register "a1".
     The changed register "a1" as argument will be send
     to do_fpe() and do_msa_fpe().
    
    Signed-off-by: YuanJunQing <yuanjunqing66@163.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f6482c0a486f8cd5bedfc53c2731c198c98cb05
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Tue May 26 17:21:12 2020 +0800

    PCI: Don't disable decoding when mmio_always_on is set
    
    [ Upstream commit b6caa1d8c80cb71b6162cb1f1ec13aa655026c9f ]
    
    Don't disable MEM/IO decoding when a device have both non_compliant_bars
    and mmio_always_on.
    
    That would allow us quirk devices with junk in BARs but can't disable
    their decoding.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Acked-by: Bjorn Helgaas <helgaas@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa99a4b3fb127d0d47a9cbc614e450099df92740
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Tue May 26 14:27:51 2020 +0200

    macvlan: Skip loopback packets in RX handler
    
    [ Upstream commit 81f3dc9349ce0bf7b8447f147f45e70f0a5b36a6 ]
    
    Ignore loopback-originatig packets soon enough and don't try to process L2
    header where it doesn't exist. The very similar br_handle_frame() in bridge
    code performs exactly the same check.
    
    This is an example of such ICMPv6 packet:
    
    skb len=96 headroom=40 headlen=96 tailroom=56
    mac=(40,0) net=(40,40) trans=80
    shinfo(txflags=0 nr_frags=0 gso(size=0 type=0 segs=0))
    csum(0xae2e9a2f ip_summed=1 complete_sw=0 valid=0 level=0)
    hash(0xc97ebd88 sw=1 l4=1) proto=0x86dd pkttype=5 iif=24
    dev name=etha01.212 feat=0x0x0000000040005000
    skb headroom: 00000000: 00 7c 86 52 84 88 ff ff 00 00 00 00 00 00 08 00
    skb headroom: 00000010: 45 00 00 9e 5d 5c 40 00 40 11 33 33 00 00 00 01
    skb headroom: 00000020: 02 40 43 80 00 00 86 dd
    skb linear:   00000000: 60 09 88 bd 00 38 3a ff fe 80 00 00 00 00 00 00
    skb linear:   00000010: 00 40 43 ff fe 80 00 00 ff 02 00 00 00 00 00 00
    skb linear:   00000020: 00 00 00 00 00 00 00 01 86 00 61 00 40 00 00 2d
    skb linear:   00000030: 00 00 00 00 00 00 00 00 03 04 40 e0 00 00 01 2c
    skb linear:   00000040: 00 00 00 78 00 00 00 00 fd 5f 42 68 23 87 a8 81
    skb linear:   00000050: 00 00 00 00 00 00 00 00 01 01 02 40 43 80 00 00
    skb tailroom: 00000000: ...
    skb tailroom: 00000010: ...
    skb tailroom: 00000020: ...
    skb tailroom: 00000030: ...
    
    Call Trace, how it happens exactly:
     ...
     macvlan_handle_frame+0x321/0x425 [macvlan]
     ? macvlan_forward_source+0x110/0x110 [macvlan]
     __netif_receive_skb_core+0x545/0xda0
     ? enqueue_task_fair+0xe5/0x8e0
     ? __netif_receive_skb_one_core+0x36/0x70
     __netif_receive_skb_one_core+0x36/0x70
     process_backlog+0x97/0x140
     net_rx_action+0x1eb/0x350
     ? __hrtimer_run_queues+0x136/0x2e0
     __do_softirq+0xe3/0x383
     do_softirq_own_stack+0x2a/0x40
     </IRQ>
     do_softirq.part.4+0x4e/0x50
     netif_rx_ni+0x60/0xd0
     dev_loopback_xmit+0x83/0xf0
     ip6_finish_output2+0x575/0x590 [ipv6]
     ? ip6_cork_release.isra.1+0x64/0x90 [ipv6]
     ? __ip6_make_skb+0x38d/0x680 [ipv6]
     ? ip6_output+0x6c/0x140 [ipv6]
     ip6_output+0x6c/0x140 [ipv6]
     ip6_send_skb+0x1e/0x60 [ipv6]
     rawv6_sendmsg+0xc4b/0xe10 [ipv6]
     ? proc_put_long+0xd0/0xd0
     ? rw_copy_check_uvector+0x4e/0x110
     ? sock_sendmsg+0x36/0x40
     sock_sendmsg+0x36/0x40
     ___sys_sendmsg+0x2b6/0x2d0
     ? proc_dointvec+0x23/0x30
     ? addrconf_sysctl_forward+0x8d/0x250 [ipv6]
     ? dev_forward_change+0x130/0x130 [ipv6]
     ? _raw_spin_unlock+0x12/0x30
     ? proc_sys_call_handler.isra.14+0x9f/0x110
     ? __call_rcu+0x213/0x510
     ? get_max_files+0x10/0x10
     ? trace_hardirqs_on+0x2c/0xe0
     ? __sys_sendmsg+0x63/0xa0
     __sys_sendmsg+0x63/0xa0
     do_syscall_64+0x6c/0x1e0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6f1f12a8c3d8030f4c7fedcaec67f906a3c52a7
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Apr 2 14:37:35 2020 +0800

    btrfs: qgroup: mark qgroup inconsistent if we're inherting snapshot to a new qgroup
    
    [ Upstream commit cbab8ade585a18c4334b085564d9d046e01a3f70 ]
    
    [BUG]
    For the following operation, qgroup is guaranteed to be screwed up due
    to snapshot adding to a new qgroup:
    
      # mkfs.btrfs -f $dev
      # mount $dev $mnt
      # btrfs qgroup en $mnt
      # btrfs subv create $mnt/src
      # xfs_io -f -c "pwrite 0 1m" $mnt/src/file
      # sync
      # btrfs qgroup create 1/0 $mnt/src
      # btrfs subv snapshot -i 1/0 $mnt/src $mnt/snapshot
      # btrfs qgroup show -prce $mnt/src
      qgroupid         rfer         excl     max_rfer     max_excl parent  child
      --------         ----         ----     --------     -------- ------  -----
      0/5          16.00KiB     16.00KiB         none         none ---     ---
      0/257         1.02MiB     16.00KiB         none         none ---     ---
      0/258         1.02MiB     16.00KiB         none         none 1/0     ---
      1/0             0.00B        0.00B         none         none ---     0/258
                    ^^^^^^^^^^^^^^^^^^^^
    
    [CAUSE]
    The problem is in btrfs_qgroup_inherit(), we don't have good enough
    check to determine if the new relation would break the existing
    accounting.
    
    Unlike btrfs_add_qgroup_relation(), which has proper check to determine
    if we can do quick update without a rescan, in btrfs_qgroup_inherit() we
    can even assign a snapshot to multiple qgroups.
    
    [FIX]
    Fix it by manually marking qgroup inconsistent for snapshot inheritance.
    
    For subvolume creation, since all its extents are exclusively owned, we
    don't need to rescan.
    
    In theory, we should call relation check like quick_update_accounting()
    when doing qgroup inheritance and inform user about qgroup accounting
    inconsistency.
    
    But we don't have good mechanism to relay that back to the user in the
    snapshot creation context, thus we can only silently mark the qgroup
    inconsistent.
    
    Anyway, user shouldn't use qgroup inheritance during snapshot creation,
    and should add qgroup relationship after snapshot creation by 'btrfs
    qgroup assign', which has a much better UI to inform user about qgroup
    inconsistent and kick in rescan automatically.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e42a1857bcff0820498d95c0803ad0e482b8f05
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Mar 13 15:58:05 2020 -0400

    btrfs: improve global reserve stealing logic
    
    [ Upstream commit 7f9fe614407692f670601a634621138233ac00d7 ]
    
    For unlink transactions and block group removal
    btrfs_start_transaction_fallback_global_rsv will first try to start an
    ordinary transaction and if it fails it will fall back to reserving the
    required amount by stealing from the global reserve. This is problematic
    because of all the same reasons we had with previous iterations of the
    ENOSPC handling, thundering herd.  We get a bunch of failures all at
    once, everybody tries to allocate from the global reserve, some win and
    some lose, we get an ENSOPC.
    
    Fix this behavior by introducing BTRFS_RESERVE_FLUSH_ALL_STEAL. It's
    used to mark unlink reservation. To fix this we need to integrate this
    logic into the normal ENOSPC infrastructure.  We still go through all of
    the normal flushing work, and at the moment we begin to fail all the
    tickets we try to satisfy any tickets that are allowed to steal by
    stealing from the global reserve.  If this works we start the flushing
    system over again just like we would with a normal ticket satisfaction.
    This serializes our global reserve stealing, so we don't have the
    thundering herd problem.
    
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 590aad883521c9ab21bcf7167f99ba1278b22375
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce066ce05e1b695c27e9a8f7d98be0241f2d8a8c
Author: Kaige Li <likaige@loongson.cn>
Date:   Thu May 14 20:59:41 2020 +0800

    MIPS: tools: Fix resource leak in elf-entry.c
    
    [ Upstream commit f33a0b941017b9cb5a4e975af198b855b2f2b455 ]
    
    There is a file descriptor resource leak in elf-entry.c, fix this
    by adding fclose() before return and die.
    
    Signed-off-by: Kaige Li <likaige@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87ef5086a3c2a3c59af8d41833703c657cdcc406
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Sat Feb 29 18:11:20 2020 -0500

    x86/mm: Stop printing BRK addresses
    
    [ Upstream commit 67d631b7c05eff955ccff4139327f0f92a5117e5 ]
    
    This currently leaks kernel physical addresses into userspace.
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Dave Hansen <dave.hansen@intel.com>
    Link: https://lkml.kernel.org/r/20200229231120.1147527-1-nivedita@alum.mit.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41b44325c9eb05c788079c12619d62f0136a5252
Author: Alan Maguire <alan.maguire@oracle.com>
Date:   Fri May 22 12:36:28 2020 +0100

    selftests/bpf: CONFIG_IPV6_SEG6_BPF required for test_seg6_loop.o
    
    [ Upstream commit 3c8e8cf4b18b3a7034fab4c4504fc4b54e4b6195 ]
    
    test_seg6_loop.o uses the helper bpf_lwt_seg6_adjust_srh();
    it will not be present if CONFIG_IPV6_SEG6_BPF is not specified.
    
    Fixes: b061017f8b4d ("selftests/bpf: add realistic loop tests")
    Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/1590147389-26482-2-git-send-email-alan.maguire@oracle.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b8d09eeb4a627b5b936f45da3d8ea9c723e92f5
Author: Felix Kuehling <Felix.Kuehling@amd.com>
Date:   Tue May 19 21:02:45 2020 -0400

    drm/amdgpu: Sync with VM root BO when switching VM to CPU update mode
    
    [ Upstream commit 90ca78deb004abe75b5024968a199acb96bb70f9 ]
    
    This fixes an intermittent bug where a root PD clear operation still in
    progress could overwrite a PDE update done by the CPU, resulting in a
    VM fault.
    
    Fixes: 108b4d928c03 ("drm/amd/amdgpu: Update VM function pointer")
    Reported-by: Jay Cornwall <Jay.Cornwall@amd.com>
    Tested-by: Jay Cornwall <Jay.Cornwall@amd.com>
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b06a7dc9e5f65f163e7864e5e34d96300e8b07b3
Author: chen gong <curry.gong@amd.com>
Date:   Thu May 21 17:15:34 2020 +0800

    drm/amd/powerpay: Disable gfxoff when setting manual mode on picasso and raven
    
    [ Upstream commit cbd2d08c7463e78d625a69e9db27ad3004cbbd99 ]
    
    [Problem description]
    1. Boot up picasso platform, launches desktop, Don't do anything (APU enter into "gfxoff" state)
    2. Remote login to platform using SSH, then type the command line:
            sudo su -c "echo manual > /sys/class/drm/card0/device/power_dpm_force_performance_level"
            sudo su -c "echo 2 > /sys/class/drm/card0/device/pp_dpm_sclk" (fix SCLK to 1400MHz)
    3. Move the mouse around in Window
    4. Phenomenon :  The screen frozen
    
    Tester will switch sclk level during glmark2 run time.
    APU will enter "gfxoff" state intermittently during glmark2 run time.
    The system got hanged if fix GFXCLK to 1400MHz when APU is in "gfxoff"
    state.
    
    [Debug]
    1. Fix SCLK to X MHz
            1400: screen frozen, screen black, then OS will reboot.
            1300: screen frozen.
            1200: screen frozen, screen black.
            1100: screen frozen, screen black, then OS will reboot.
            1000: screen frozen, screen black.
            900:  screen frozen, screen black, then OS will reboot.
            800:  Situation Nomal, issue disappear.
            700:  Situation Nomal, issue disappear.
    2. SBIOS setting: AMD CBS --> SMU Debug Options -->SMU Debug --> "GFX DLDO Psm Margin Control":
            50 : Situation Nomal, issue disappear.
            45 : Situation Nomal, issue disappear.
            40 : Situation Nomal, issue disappear.
            35 : Situation Nomal, issue disappear.
            30 : screen black.
            25 : screen frozen, then blurred screen.
            20 : screen frozen.
            15 : screen black.
            10 : screen frozen.
            5  : screen frozen, then blurred screen.
    3. Disable GFXOFF feature
            Situation Nomal, issue disappear.
    
    [Why]
    Through a period of time debugging with Sys Eng team and SMU team, Sys
    Eng team said this is voltage/frequency marginal issue not a F/W or H/W
    bug. This experiment proves that default targetPsm [for f=1400MHz] is
    not sufficient when GFXOFF is enabled on Picasso.
    
    SMU team think it is an odd test conditions to force sclk="1400MHz" when
    GPU is in "gfxoff" state，then wake up the GFX. SCLK should be in the
    "lowest frequency" when gfxoff.
    
    [How]
    Disable gfxoff when setting manual mode.
    Enable gfxoff when setting other mode(exiting manual mode) again.
    
    By the way, from the user point of view, now that user switch to manual
    mode and force SCLK Frequency, he don't want SCLK be controlled by
    workload.It becomes meaningless to "switch to manual mode" if APU enter "gfxoff"
    due to lack of workload at this point.
    
    Tips: Same issue observed on Raven.
    
    Signed-off-by: chen gong <curry.gong@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 188e3e6ed902a34d1efa73616eb2c86918237bc3
Author: Nicolas Toromanoff <nicolas.toromanoff@st.com>
Date:   Tue May 12 16:11:11 2020 +0200

    crypto: stm32/crc32 - fix multi-instance
    
    [ Upstream commit 10b89c43a64eb0d236903b79a3bc9d8f6cbfd9c7 ]
    
    Ensure CRC algorithm is registered only once in crypto framework when
    there are several instances of CRC devices.
    
    Update the CRC device list management to avoid that only the first CRC
    instance is used.
    
    Fixes: b51dbe90912a ("crypto: stm32 - Support for STM32 CRC32 crypto module")
    
    Signed-off-by: Nicolas Toromanoff <nicolas.toromanoff@st.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d879598b8dae00da888dd957c913bd0f9687f42a
Author: Nicolas Toromanoff <nicolas.toromanoff@st.com>
Date:   Tue May 12 16:11:10 2020 +0200

    crypto: stm32/crc32 - fix run-time self test issue.
    
    [ Upstream commit a8cc3128bf2c01c4d448fe17149e87132113b445 ]
    
    Fix wrong crc32 initialisation value:
    "alg: shash: stm32_crc32 test failed (wrong result) on test vector 0,
    cfg="init+update+final aligned buffer"
    cra_name="crc32c" expects an init value of 0XFFFFFFFF,
    cra_name="crc32" expects an init value of 0.
    
    Fixes: b51dbe90912a ("crypto: stm32 - Support for STM32 CRC32 crypto module")
    
    Signed-off-by: Nicolas Toromanoff <nicolas.toromanoff@st.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fe61a2027db269c563fb632dec79a55081b8d99
Author: Nicolas Toromanoff <nicolas.toromanoff@st.com>
Date:   Tue May 12 16:11:09 2020 +0200

    crypto: stm32/crc32 - fix ext4 chksum BUG_ON()
    
    [ Upstream commit 49c2c082e00e0bc4f5cbb7c21c7f0f873b35ab09 ]
    
    Allow use of crc_update without prior call to crc_init.
    And change (and fix) driver to use CRC device even on unaligned buffers.
    
    Fixes: b51dbe90912a ("crypto: stm32 - Support for STM32 CRC32 crypto module")
    
    Signed-off-by: Nicolas Toromanoff <nicolas.toromanoff@st.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c79c643fca616ceef401f74e2fc6e0990a11d44c
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 17:07:22 2020 +0300

    mips: Add udelay lpj numbers adjustment
    
    [ Upstream commit ed26aacfb5f71eecb20a51c4467da440cb719d66 ]
    
    Loops-per-jiffies is a special number which represents a number of
    noop-loop cycles per CPU-scheduler quantum - jiffies. As you
    understand aside from CPU-specific implementation it depends on
    the CPU frequency. So when a platform has the CPU frequency fixed,
    we have no problem and the current udelay interface will work
    just fine. But as soon as CPU-freq driver is enabled and the cores
    frequency changes, we'll end up with distorted udelay's. In order
    to fix this we have to accordinly adjust the per-CPU udelay_val
    (the same as the global loops_per_jiffy) number. This can be done
    in the CPU-freq transition event handler. We subscribe to that event
    in the MIPS arch time-inititalization method.
    
    Co-developed-by: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Signed-off-by: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34a45e84edc5c02f2f99d1e9ab8416c4f0fd475a
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 03:34:37 2020 +0300

    mips: MAAR: Use more precise address mask
    
    [ Upstream commit bbb5946eb545fab8ad8f46bce8a803e1c0c39d47 ]
    
    Indeed according to the MIPS32 Privileged Resource Architecgture the MAAR
    pair register address field either takes [12:31] bits for non-XPA systems
    and [12:55] otherwise. In any case the current address mask is just
    wrong for 64-bit and 32-bits XPA chips. So lets extend it to 59-bits
    of physical address value. This shall cover the 64-bits architecture and
    systems with XPA enabled, and won't cause any problem for non-XPA 32-bit
    systems, since address values exceeding the architecture specific MAAR
    mask will be just truncated with setting zeros in the unsupported upper
    bits.
    
    Co-developed-by: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Signed-off-by: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fa3b0bd9914133cf362a1719af522fa3fddee1e
Author: Huaixin Chang <changhuaixin@linux.alibaba.com>
Date:   Sat Apr 25 18:52:48 2020 +0800

    sched: Defend cfs and rt bandwidth quota against overflow
    
    [ Upstream commit d505b8af58912ae1e1a211fabc9995b19bd40828 ]
    
    When users write some huge number into cpu.cfs_quota_us or
    cpu.rt_runtime_us, overflow might happen during to_ratio() shifts of
    schedulable checks.
    
    to_ratio() could be altered to avoid unnecessary internal overflow, but
    min_cfs_quota_period is less than 1 << BW_SHIFT, so a cutoff would still
    be needed. Set a cap MAX_BW for cfs_quota_us and rt_runtime_us to
    prevent overflow.
    
    Signed-off-by: Huaixin Chang <changhuaixin@linux.alibaba.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Link: https://lkml.kernel.org/r/20200425105248.60093-1-changhuaixin@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fecf17b609a7edc68c6ef8fa4750d2e75223a6b4
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Fri Feb 7 16:49:26 2020 -0500

    x86/boot: Correct relocation destination on old linkers
    
    [ Upstream commit 5214028dd89e49ba27007c3ee475279e584261f0 ]
    
    For the 32-bit kernel, as described in
    
      6d92bc9d483a ("x86/build: Build compressed x86 kernels as PIE"),
    
    pre-2.26 binutils generates R_386_32 relocations in PIE mode. Since the
    startup code does not perform relocation, any reloc entry with R_386_32
    will remain as 0 in the executing code.
    
    Commit
    
      974f221c84b0 ("x86/boot: Move compressed kernel to the end of the
                     decompression buffer")
    
    added a new symbol _end but did not mark it hidden, which doesn't give
    the correct offset on older linkers. This causes the compressed kernel
    to be copied beyond the end of the decompression buffer, rather than
    flush against it. This region of memory may be reserved or already
    allocated for other purposes by the bootloader.
    
    Mark _end as hidden to fix. This changes the relocation from R_386_32 to
    R_386_RELATIVE even on the pre-2.26 binutils.
    
    For 64-bit, this is not strictly necessary, as the 64-bit kernel is only
    built as PIE if the linker supports -z noreloc-overflow, which implies
    binutils-2.27+, but for consistency, mark _end as hidden here too.
    
    The below illustrates the before/after impact of the patch using
    binutils-2.25 and gcc-4.6.4 (locally compiled from source) and QEMU.
    
      Disassembly before patch:
        48:   8b 86 60 02 00 00       mov    0x260(%esi),%eax
        4e:   2d 00 00 00 00          sub    $0x0,%eax
                              4f: R_386_32    _end
      Disassembly after patch:
        48:   8b 86 60 02 00 00       mov    0x260(%esi),%eax
        4e:   2d 00 f0 76 00          sub    $0x76f000,%eax
                              4f: R_386_RELATIVE      *ABS*
    
    Dump from extract_kernel before patch:
            early console in extract_kernel
            input_data: 0x0207c098 <--- this is at output + init_size
            input_len: 0x0074fef1
            output: 0x01000000
            output_len: 0x00fa63d0
            kernel_total_size: 0x0107c000
            needed_size: 0x0107c000
    
    Dump from extract_kernel after patch:
            early console in extract_kernel
            input_data: 0x0190d098 <--- this is at output + init_size - _end
            input_len: 0x0074fef1
            output: 0x01000000
            output_len: 0x00fa63d0
            kernel_total_size: 0x0107c000
            needed_size: 0x0107c000
    
    Fixes: 974f221c84b0 ("x86/boot: Move compressed kernel to the end of the decompression buffer")
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200207214926.3564079-1-nivedita@alum.mit.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b3423eff20e3760d0c3d2dab3a46d9cb26d8af2
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu May 7 13:08:41 2020 -0700

    kgdboc: Use a platform device to handle tty drivers showing up late
    
    [ Upstream commit 68e55f61c13842baf825958129698c5371db432c ]
    
    If you build CONFIG_KGDB_SERIAL_CONSOLE into the kernel then you
    should be able to have KGDB init itself at bootup by specifying the
    "kgdboc=..." kernel command line parameter.  This has worked OK for me
    for many years, but on a new device I switched to it stopped working.
    
    The problem is that on this new device the serial driver gets its
    probe deferred.  Now when kgdb initializes it can't find the tty
    driver and when it gives up it never tries again.
    
    We could try to find ways to move up the initialization of the serial
    driver and such a thing might be worthwhile, but it's nice to be
    robust against serial drivers that load late.  We could move kgdb to
    init itself later but that penalizes our ability to debug early boot
    code on systems where the driver inits early.  We could roll our own
    system of detecting when new tty drivers get loaded and then use that
    to figure out when kgdb can init, but that's ugly.
    
    Instead, let's jump on the -EPROBE_DEFER bandwagon.  We'll create a
    singleton instance of a "kgdboc" platform device.  If we can't find
    our tty device when the singleton "kgdboc" probes we'll return
    -EPROBE_DEFER which means that the system will call us back later to
    try again when the tty device might be there.
    
    We won't fully transition all of the kgdboc to a platform device
    because early kgdb initialization (via the "ekgdboc" kernel command
    line parameter) still runs before the platform device has been
    created.  The kgdb platform device is merely used as a convenient way
    to hook into the system's normal probe deferral mechanisms.
    
    As part of this, we'll ever-so-slightly change how the "kgdboc=..."
    kernel command line parameter works.  Previously if you booted up and
    kgdb couldn't find the tty driver then later reading
    '/sys/module/kgdboc/parameters/kgdboc' would return a blank string.
    Now kgdb will keep track of the string that came as part of the
    command line and give it back to you.  It's expected that this should
    be an OK change.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Link: https://lore.kernel.org/r/20200507130644.v4.3.I4a493cfb0f9f740ce8fd2ab58e62dc92d18fed30@changeid
    [daniel.thompson@linaro.org: Make config_mutex static]
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39d7ce336ec5724c180d577cd3482aa32b38e2bd
Author: Pali Rohár <pali@kernel.org>
Date:   Fri May 15 09:59:24 2020 +0200

    mwifiex: Fix memory corruption in dump_station
    
    [ Upstream commit 3aa42bae9c4d1641aeb36f1a8585cd1d506cf471 ]
    
    The mwifiex_cfg80211_dump_station() uses static variable for iterating
    over a linked list of all associated stations (when the driver is in UAP
    role). This has a race condition if .dump_station is called in parallel
    for multiple interfaces. This corruption can be triggered by registering
    multiple SSIDs and calling, in parallel for multiple interfaces
        iw dev <iface> station dump
    
    [16750.719775] Unable to handle kernel paging request at virtual address dead000000000110
    ...
    [16750.899173] Call trace:
    [16750.901696]  mwifiex_cfg80211_dump_station+0x94/0x100 [mwifiex]
    [16750.907824]  nl80211_dump_station+0xbc/0x278 [cfg80211]
    [16750.913160]  netlink_dump+0xe8/0x320
    [16750.916827]  netlink_recvmsg+0x1b4/0x338
    [16750.920861]  ____sys_recvmsg+0x7c/0x2b0
    [16750.924801]  ___sys_recvmsg+0x70/0x98
    [16750.928564]  __sys_recvmsg+0x58/0xa0
    [16750.932238]  __arm64_sys_recvmsg+0x28/0x30
    [16750.936453]  el0_svc_common.constprop.3+0x90/0x158
    [16750.941378]  do_el0_svc+0x74/0x90
    [16750.944784]  el0_sync_handler+0x12c/0x1a8
    [16750.948903]  el0_sync+0x114/0x140
    [16750.952312] Code: f9400003 f907f423 eb02007f 54fffd60 (b9401060)
    [16750.958583] ---[ end trace c8ad181c2f4b8576 ]---
    
    This patch drops the use of the static iterator, and instead every time
    the function is called iterates to the idx-th position of the
    linked-list.
    
    It would be better to convert the code not to use linked list for
    associated stations storage (since the chip has a limited number of
    associated stations anyway - it could just be an array). Such a change
    may be proposed in the future. In the meantime this patch can backported
    into stable kernels in this simple form.
    
    Fixes: 8baca1a34d4c ("mwifiex: dump station support in uap mode")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Acked-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200515075924.13841-1-pali@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65f1c3e4e9062c5748e86202196e40d227c60b9a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed May 13 12:39:51 2020 +0300

    rtlwifi: Fix a double free in _rtl_usb_tx_urb_setup()
    
    [ Upstream commit beb12813bc75d4a23de43b85ad1c7cb28d27631e ]
    
    Seven years ago we tried to fix a leak but actually introduced a double
    free instead.  It was an understandable mistake because the code was a
    bit confusing and the free was done in the wrong place.  The "skb"
    pointer is freed in both _rtl_usb_tx_urb_setup() and _rtl_usb_transmit().
    The free belongs _rtl_usb_transmit() instead of _rtl_usb_tx_urb_setup()
    and I've cleaned the code up a bit to hopefully make it more clear.
    
    Fixes: 36ef0b473fbf ("rtlwifi: usb: add missing freeing of skbuff")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200513093951.GD347693@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 916f41e40643ac24271cb7fddd7ec502ff95aca3
Author: Erez Shitrit <erezsh@mellanox.com>
Date:   Mon May 4 11:46:25 2020 +0300

    net/mlx5e: IPoIB, Drop multicast packets that this interface sent
    
    [ Upstream commit 8b46d424a743ddfef8056d5167f13ee7ebd1dcad ]
    
    After enabled loopback packets for IPoIB, we need to drop these packets
    that this HCA has replicated and came back to the same interface that
    sent them.
    
    Fixes: 4c6c615e3f30 ("net/mlx5e: IPoIB, Add PKEY child interface nic profile")
    Signed-off-by: Erez Shitrit <erezsh@mellanox.com>
    Reviewed-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa408bbe1007d563360b4d5dc4f6e525ffee3d65
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Thu May 14 12:49:43 2020 +0200

    veth: Adjust hard_start offset on redirect XDP frames
    
    [ Upstream commit 5c8572251fabc5bb49fd623c064e95a9daf6a3e3 ]
    
    When native XDP redirect into a veth device, the frame arrives in the
    xdp_frame structure. It is then processed in veth_xdp_rcv_one(),
    which can run a new XDP bpf_prog on the packet. Doing so requires
    converting xdp_frame to xdp_buff, but the tricky part is that
    xdp_frame memory area is located in the top (data_hard_start) memory
    area that xdp_buff will point into.
    
    The current code tried to protect the xdp_frame area, by assigning
    xdp_buff.data_hard_start past this memory. This results in 32 bytes
    less headroom to expand into via BPF-helper bpf_xdp_adjust_head().
    
    This protect step is actually not needed, because BPF-helper
    bpf_xdp_adjust_head() already reserve this area, and don't allow
    BPF-prog to expand into it. Thus, it is safe to point data_hard_start
    directly at xdp_frame memory area.
    
    Fixes: 9fc8d518d9d5 ("veth: Handle xdp_frames in xdp napi ring")
    Reported-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Toshiaki Makita <toshiaki.makita1@gmail.com>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/bpf/158945338331.97035.5923525383710752178.stgit@firesoul
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 894d9cd52466c194f5db645f7f711560af49c9e9
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Oct 14 17:18:11 2019 -0700

    iocost: don't let vrate run wild while there's no saturation signal
    
    [ Upstream commit 81ca627a933063fa63a6d4c66425de822a2ab7f5 ]
    
    When the QoS targets are met and nothing is being throttled, there's
    no way to tell how saturated the underlying device is - it could be
    almost entirely idle, at the cusp of saturation or anywhere inbetween.
    Given that there's no information, it's best to keep vrate as-is in
    this state.  Before 7cd806a9a953 ("iocost: improve nr_lagging
    handling"), this was the case - if the device isn't missing QoS
    targets and nothing is being throttled, busy_level was reset to zero.
    
    While fixing nr_lagging handling, 7cd806a9a953 ("iocost: improve
    nr_lagging handling") broke this.  Now, while the device is hitting
    QoS targets and nothing is being throttled, vrate keeps getting
    adjusted according to the existing busy_level.
    
    This led to vrate keeping climing till it hits max when there's an IO
    issuer with limited request concurrency if the vrate started low.
    vrate starts getting adjusted upwards until the issuer can issue IOs
    w/o being throttled.  From then on, QoS targets keeps getting met and
    nothing on the system needs throttling and vrate keeps getting
    increased due to the existing busy_level.
    
    This patch makes the following changes to the busy_level logic.
    
    * Reset busy_level if nr_shortages is zero to avoid the above
      scenario.
    
    * Make non-zero nr_lagging block lowering nr_level but still clear
      positive busy_level if there's clear non-saturation signal - QoS
      targets are met and nr_shortages is non-zero.  nr_lagging's role is
      preventing adjusting vrate upwards while there are long-running
      commands and it shouldn't keep busy_level positive while there's
      clear non-saturation signal.
    
    * Restructure code for clarity and add comments.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Andy Newell <newella@fb.com>
    Fixes: 7cd806a9a953 ("iocost: improve nr_lagging handling")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f5d77570b0cbdedb442aca1f636ed771e8210cf
Author: Coly Li <colyli@suse.de>
Date:   Thu Apr 9 22:17:21 2020 +0800

    raid5: remove gfp flags from scribble_alloc()
    
    [ Upstream commit ba54d4d4d2844c234f1b4692bd8c9e0f833c8a54 ]
    
    Using GFP_NOIO flag to call scribble_alloc() from resize_chunk() does
    not have the expected behavior. kvmalloc_array() inside scribble_alloc()
    which receives the GFP_NOIO flag will eventually call kmalloc_node() to
    allocate physically continuous pages.
    
    Now we have memalloc scope APIs in mddev_suspend()/mddev_resume() to
    prevent memory reclaim I/Os during raid array suspend context, calling
    to kvmalloc_array() with GFP_KERNEL flag may avoid deadlock of recursive
    I/O as expected.
    
    This patch removes the useless gfp flags from parameters list of
    scribble_alloc(), and call kvmalloc_array() with GFP_KERNEL flag. The
    incorrect GFP_NOIO flag does not exist anymore.
    
    Fixes: b330e6a49dc3 ("md: convert to kvmalloc")
    Suggested-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd4013947eae450d93ec02f39c552ad73186a80f
Author: Guoqing Jiang <guoqing.jiang@cloud.ionos.com>
Date:   Sat Apr 4 23:57:09 2020 +0200

    md: don't flush workqueue unconditionally in md_open
    
    [ Upstream commit f6766ff6afff70e2aaf39e1511e16d471de7c3ae ]
    
    We need to check mddev->del_work before flush workqueu since the purpose
    of flush is to ensure the previous md is disappeared. Otherwise the similar
    deadlock appeared if LOCKDEP is enabled, it is due to md_open holds the
    bdev->bd_mutex before flush workqueue.
    
    kernel: [  154.522645] ======================================================
    kernel: [  154.522647] WARNING: possible circular locking dependency detected
    kernel: [  154.522650] 5.6.0-rc7-lp151.27-default #25 Tainted: G           O
    kernel: [  154.522651] ------------------------------------------------------
    kernel: [  154.522653] mdadm/2482 is trying to acquire lock:
    kernel: [  154.522655] ffff888078529128 ((wq_completion)md_misc){+.+.}, at: flush_workqueue+0x84/0x4b0
    kernel: [  154.522673]
    kernel: [  154.522673] but task is already holding lock:
    kernel: [  154.522675] ffff88804efa9338 (&bdev->bd_mutex){+.+.}, at: __blkdev_get+0x79/0x590
    kernel: [  154.522691]
    kernel: [  154.522691] which lock already depends on the new lock.
    kernel: [  154.522691]
    kernel: [  154.522694]
    kernel: [  154.522694] the existing dependency chain (in reverse order) is:
    kernel: [  154.522696]
    kernel: [  154.522696] -> #4 (&bdev->bd_mutex){+.+.}:
    kernel: [  154.522704]        __mutex_lock+0x87/0x950
    kernel: [  154.522706]        __blkdev_get+0x79/0x590
    kernel: [  154.522708]        blkdev_get+0x65/0x140
    kernel: [  154.522709]        blkdev_get_by_dev+0x2f/0x40
    kernel: [  154.522716]        lock_rdev+0x3d/0x90 [md_mod]
    kernel: [  154.522719]        md_import_device+0xd6/0x1b0 [md_mod]
    kernel: [  154.522723]        new_dev_store+0x15e/0x210 [md_mod]
    kernel: [  154.522728]        md_attr_store+0x7a/0xc0 [md_mod]
    kernel: [  154.522732]        kernfs_fop_write+0x117/0x1b0
    kernel: [  154.522735]        vfs_write+0xad/0x1a0
    kernel: [  154.522737]        ksys_write+0xa4/0xe0
    kernel: [  154.522745]        do_syscall_64+0x64/0x2b0
    kernel: [  154.522748]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    kernel: [  154.522749]
    kernel: [  154.522749] -> #3 (&mddev->reconfig_mutex){+.+.}:
    kernel: [  154.522752]        __mutex_lock+0x87/0x950
    kernel: [  154.522756]        new_dev_store+0xc9/0x210 [md_mod]
    kernel: [  154.522759]        md_attr_store+0x7a/0xc0 [md_mod]
    kernel: [  154.522761]        kernfs_fop_write+0x117/0x1b0
    kernel: [  154.522763]        vfs_write+0xad/0x1a0
    kernel: [  154.522765]        ksys_write+0xa4/0xe0
    kernel: [  154.522767]        do_syscall_64+0x64/0x2b0
    kernel: [  154.522769]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    kernel: [  154.522770]
    kernel: [  154.522770] -> #2 (kn->count#253){++++}:
    kernel: [  154.522775]        __kernfs_remove+0x253/0x2c0
    kernel: [  154.522778]        kernfs_remove+0x1f/0x30
    kernel: [  154.522780]        kobject_del+0x28/0x60
    kernel: [  154.522783]        mddev_delayed_delete+0x24/0x30 [md_mod]
    kernel: [  154.522786]        process_one_work+0x2a7/0x5f0
    kernel: [  154.522788]        worker_thread+0x2d/0x3d0
    kernel: [  154.522793]        kthread+0x117/0x130
    kernel: [  154.522795]        ret_from_fork+0x3a/0x50
    kernel: [  154.522796]
    kernel: [  154.522796] -> #1 ((work_completion)(&mddev->del_work)){+.+.}:
    kernel: [  154.522800]        process_one_work+0x27e/0x5f0
    kernel: [  154.522802]        worker_thread+0x2d/0x3d0
    kernel: [  154.522804]        kthread+0x117/0x130
    kernel: [  154.522806]        ret_from_fork+0x3a/0x50
    kernel: [  154.522807]
    kernel: [  154.522807] -> #0 ((wq_completion)md_misc){+.+.}:
    kernel: [  154.522813]        __lock_acquire+0x1392/0x1690
    kernel: [  154.522816]        lock_acquire+0xb4/0x1a0
    kernel: [  154.522818]        flush_workqueue+0xab/0x4b0
    kernel: [  154.522821]        md_open+0xb6/0xc0 [md_mod]
    kernel: [  154.522823]        __blkdev_get+0xea/0x590
    kernel: [  154.522825]        blkdev_get+0x65/0x140
    kernel: [  154.522828]        do_dentry_open+0x1d1/0x380
    kernel: [  154.522831]        path_openat+0x567/0xcc0
    kernel: [  154.522834]        do_filp_open+0x9b/0x110
    kernel: [  154.522836]        do_sys_openat2+0x201/0x2a0
    kernel: [  154.522838]        do_sys_open+0x57/0x80
    kernel: [  154.522840]        do_syscall_64+0x64/0x2b0
    kernel: [  154.522842]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    kernel: [  154.522844]
    kernel: [  154.522844] other info that might help us debug this:
    kernel: [  154.522844]
    kernel: [  154.522846] Chain exists of:
    kernel: [  154.522846]   (wq_completion)md_misc --> &mddev->reconfig_mutex --> &bdev->bd_mutex
    kernel: [  154.522846]
    kernel: [  154.522850]  Possible unsafe locking scenario:
    kernel: [  154.522850]
    kernel: [  154.522852]        CPU0                    CPU1
    kernel: [  154.522853]        ----                    ----
    kernel: [  154.522854]   lock(&bdev->bd_mutex);
    kernel: [  154.522856]                                lock(&mddev->reconfig_mutex);
    kernel: [  154.522858]                                lock(&bdev->bd_mutex);
    kernel: [  154.522860]   lock((wq_completion)md_misc);
    kernel: [  154.522861]
    kernel: [  154.522861]  *** DEADLOCK ***
    kernel: [  154.522861]
    kernel: [  154.522864] 1 lock held by mdadm/2482:
    kernel: [  154.522865]  #0: ffff88804efa9338 (&bdev->bd_mutex){+.+.}, at: __blkdev_get+0x79/0x590
    kernel: [  154.522868]
    kernel: [  154.522868] stack backtrace:
    kernel: [  154.522873] CPU: 1 PID: 2482 Comm: mdadm Tainted: G           O      5.6.0-rc7-lp151.27-default #25
    kernel: [  154.522875] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    kernel: [  154.522878] Call Trace:
    kernel: [  154.522881]  dump_stack+0x8f/0xcb
    kernel: [  154.522884]  check_noncircular+0x194/0x1b0
    kernel: [  154.522888]  ? __lock_acquire+0x1392/0x1690
    kernel: [  154.522890]  __lock_acquire+0x1392/0x1690
    kernel: [  154.522893]  lock_acquire+0xb4/0x1a0
    kernel: [  154.522895]  ? flush_workqueue+0x84/0x4b0
    kernel: [  154.522898]  flush_workqueue+0xab/0x4b0
    kernel: [  154.522900]  ? flush_workqueue+0x84/0x4b0
    kernel: [  154.522905]  ? md_open+0xb6/0xc0 [md_mod]
    kernel: [  154.522908]  md_open+0xb6/0xc0 [md_mod]
    kernel: [  154.522910]  __blkdev_get+0xea/0x590
    kernel: [  154.522912]  ? bd_acquire+0xc0/0xc0
    kernel: [  154.522914]  blkdev_get+0x65/0x140
    kernel: [  154.522916]  ? bd_acquire+0xc0/0xc0
    kernel: [  154.522918]  do_dentry_open+0x1d1/0x380
    kernel: [  154.522921]  path_openat+0x567/0xcc0
    kernel: [  154.522923]  ? __lock_acquire+0x380/0x1690
    kernel: [  154.522926]  do_filp_open+0x9b/0x110
    kernel: [  154.522929]  ? __alloc_fd+0xe5/0x1f0
    kernel: [  154.522935]  ? kmem_cache_alloc+0x28c/0x630
    kernel: [  154.522939]  ? do_sys_openat2+0x201/0x2a0
    kernel: [  154.522941]  do_sys_openat2+0x201/0x2a0
    kernel: [  154.522944]  do_sys_open+0x57/0x80
    kernel: [  154.522946]  do_syscall_64+0x64/0x2b0
    kernel: [  154.522948]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    kernel: [  154.522951] RIP: 0033:0x7f98d279d9ae
    
    And md_alloc also flushed the same workqueue, but the thing is different
    here. Because all the paths call md_alloc don't hold bdev->bd_mutex, and
    the flush is necessary to avoid race condition, so leave it as it is.
    
    Signed-off-by: Guoqing Jiang <guoqing.jiang@cloud.ionos.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5deaa24167a64de302eff68777e2fea21d9bd600
Author: Ryder Lee <ryder.lee@mediatek.com>
Date:   Sat Apr 25 03:32:22 2020 +0800

    mt76: avoid rx reorder buffer overflow
    
    [ Upstream commit 7c4f744d6703757be959f521a7a441bf34745d99 ]
    
    Enlarge slot to support 11ax 256 BA (256 MPDUs in an AMPDU)
    
    Signed-off-by: Chih-Min Chen <chih-min.chen@mediatek.com>
    Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 095e7a6a326c1caf0e83d086e4d42f2980f19f9d
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu Apr 30 07:31:45 2020 +0000

    drm/mcde: dsi: Fix return value check in mcde_dsi_bind()
    
    [ Upstream commit 761e9f4f80a21a4b845097027030bef863001636 ]
    
    The of_drm_find_bridge() function returns NULL on error, it doesn't return
    error pointers so this check doesn't work.
    
    Fixes: 5fc537bfd000 ("drm/mcde: Add new driver for ST-Ericsson MCDE")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200430073145.52321-1-weiyongjun1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 727093f432d16c922b4591396c5b843564f225db
Author: Bhupesh Sharma <bhsharma@redhat.com>
Date:   Mon May 11 15:41:41 2020 +0530

    net: qed*: Reduce RX and TX default ring count when running inside kdump kernel
    
    [ Upstream commit 73e030977f7884dbe1be0018bab517e8d02760f8 ]
    
    Normally kdump kernel(s) run under severe memory constraint with the
    basic idea being to save the crashdump vmcore reliably when the primary
    kernel panics/hangs.
    
    Currently the qed* ethernet driver ends up consuming a lot of memory in
    the kdump kernel, leading to kdump kernel panic when one tries to save
    the vmcore via ssh/nfs (thus utilizing the services of the underlying
    qed* network interfaces).
    
    An example OOM message log seen in the kdump kernel can be seen here
    [1], with crashkernel size reservation of 512M.
    
    Using tools like memstrack (see [2]), we can track the modules taking up
    the bulk of memory in the kdump kernel and organize the memory usage
    output as per 'highest allocator first'. An example log for the OOM case
    indicates that the qed* modules end up allocating approximately 216M
    memory, which is a large part of the total crashkernel size:
    
     dracut-pre-pivot[676]: ======== Report format module_summary: ========
     dracut-pre-pivot[676]: Module qed using 149.6MB (2394 pages), peak allocation 149.6MB (2394 pages)
     dracut-pre-pivot[676]: Module qede using 65.3MB (1045 pages), peak allocation 65.3MB (1045 pages)
    
    This patch reduces the default RX and TX ring count from 1024 to 64
    when running inside kdump kernel, which leads to a significant memory
    saving.
    
    An example log with the patch applied shows the reduced memory
    allocation in the kdump kernel:
     dracut-pre-pivot[674]: ======== Report format module_summary: ========
     dracut-pre-pivot[674]: Module qed using 141.8MB (2268 pages), peak allocation 141.8MB (2268 pages)
     <..snip..>
    [dracut-pre-pivot[674]: Module qede using 4.8MB (76 pages), peak allocation 4.9MB (78 pages)
    
    Tested crashdump vmcore save via ssh/nfs protocol using underlying qed*
    network interface after applying this patch.
    
    [1] OOM log:
    ------------
    
     kworker/0:6: page allocation failure: order:6,
     mode:0x60c0c0(GFP_KERNEL|__GFP_COMP|__GFP_ZERO), nodemask=(null)
     kworker/0:6 cpuset=/ mems_allowed=0
     CPU: 0 PID: 145 Comm: kworker/0:6 Not tainted 4.18.0-109.el8.aarch64 #1
     Hardware name: To be filled by O.E.M. Saber/Saber, BIOS 0ACKL025
     01/18/2019
     Workqueue: events work_for_cpu_fn
     Call trace:
      dump_backtrace+0x0/0x188
      show_stack+0x24/0x30
      dump_stack+0x90/0xb4
      warn_alloc+0xf4/0x178
      __alloc_pages_nodemask+0xcac/0xd58
      alloc_pages_current+0x8c/0xf8
      kmalloc_order_trace+0x38/0x108
      qed_iov_alloc+0x40/0x248 [qed]
      qed_resc_alloc+0x224/0x518 [qed]
      qed_slowpath_start+0x254/0x928 [qed]
       __qede_probe+0xf8/0x5e0 [qede]
      qede_probe+0x68/0xd8 [qede]
      local_pci_probe+0x44/0xa8
      work_for_cpu_fn+0x20/0x30
      process_one_work+0x1ac/0x3e8
      worker_thread+0x44/0x448
      kthread+0x130/0x138
      ret_from_fork+0x10/0x18
      Cannot start slowpath
      qede: probe of 0000:05:00.1 failed with error -12
    
    [2]. Memstrack tool: https://github.com/ryncsn/memstrack
    
    Cc: kexec@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Ariel Elior <aelior@marvell.com>
    Cc: GR-everest-linux-l2@marvell.com
    Cc: Manish Chopra <manishc@marvell.com>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: Bhupesh Sharma <bhsharma@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5099a9c22dbfd623922d1d4044e2cc3c4ad9de3d
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri May 8 05:56:03 2020 +0300

    wcn36xx: Fix error handling path in 'wcn36xx_probe()'
    
    [ Upstream commit a86308fc534edeceaf64670c691e17485436a4f4 ]
    
    In case of error, 'qcom_wcnss_open_channel()' must be undone by a call to
    'rpmsg_destroy_ept()', as already done in the remove function.
    
    Fixes: 5052de8deff5 ("soc: qcom: smd: Transition client drivers from smd to rpmsg")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200507043619.200051-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbf2fab3f54008afa81999cefe7fd092e4f0b937
Author: Rakesh Pillai <pillair@codeaurora.org>
Date:   Fri May 8 05:55:18 2020 +0300

    ath10k: Remove msdu from idr when management pkt send fails
    
    [ Upstream commit c730c477176ad4af86d9aae4d360a7ad840b073a ]
    
    Currently when the sending of any management pkt
    via wmi command fails, the packet is being unmapped
    freed in the error handling. But the idr entry added,
    which is used to track these packet is not getting removed.
    
    Hence, during unload, in wmi cleanup, all the entries
    in IDR are removed and the corresponding buffer is
    attempted to be freed. This can cause a situation where
    one packet is attempted to be freed twice.
    
    Fix this error by rmeoving the msdu from the idr
    list when the sending of a management packet over
    wmi fails.
    
    Tested HW: WCN3990
    Tested FW: WLAN.HL.3.1-01040-QCAHLSWMTPLZ-1
    
    Fixes: 1807da49733e ("ath10k: wmi: add management tx by reference support over wmi")
    Signed-off-by: Rakesh Pillai <pillair@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1588667015-25490-1-git-send-email-pillair@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 671d8b8726a179df49806416505f83d45e47d25b
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Thu Apr 30 13:59:32 2020 -0700

    nvme-tcp: use bh_lock in data_ready
    
    [ Upstream commit 386e5e6e1aa90b479fcf0467935922df8524393d ]
    
    data_ready may be invoked from send context or from
    softirq, so need bh locking for that.
    
    Fixes: 3f2304f8c6d6 ("nvme-tcp: add NVMe over TCP host driver")
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a09fc96a3d54c61a240027bad5a0415059330371
Author: Weiping Zhang <zhangweiping@didiglobal.com>
Date:   Sat May 2 15:29:41 2020 +0800

    nvme-pci: align io queue count with allocted nvme_queue in nvme_probe
    
    [ Upstream commit 2a5bcfdd41d68559567cec3c124a75e093506cc1 ]
    
    Since commit 147b27e4bd08 ("nvme-pci: allocate device queues storage
    space at probe"), nvme_alloc_queue does not alloc the nvme queues
    itself anymore.
    
    If the write/poll_queues module parameters are changed at runtime to
    values larger than the number of allocated queues in nvme_probe,
    nvme_alloc_queue will access unallocated memory.
    
    Add a new nr_allocated_queues member to struct nvme_dev to record how
    many queues were alloctated in nvme_probe to avoid using more than the
    allocated queues after a reset following a change to the
    write/poll_queues module parameters.
    
    Also add nr_write_queues and nr_poll_queues members to allow refreshing
    the number of write and poll queues based on a change to the module
    parameters when resetting the controller.
    
    Fixes: 147b27e4bd08 ("nvme-pci: allocate device queues storage space at probe")
    Signed-off-by: Weiping Zhang <zhangweiping@didiglobal.com>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    [hch: add nvme_max_io_queues, update the commit message]
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be7f2672c341b23eb0b0baea86a89a2d64111fa7
Author: Christoph Hellwig <hch@lst.de>
Date:   Sat Apr 4 10:11:28 2020 +0200

    nvme: refine the Qemu Identify CNS quirk
    
    [ Upstream commit b9a5c3d4c34d8bd9fd75f7f28d18a57cb68da237 ]
    
    Add a helper to check if we can use Identify CNS values > 1, and refine
    the Qemu quirk to not apply to reported versions larger than 1.1, as the
    Qemu implementation had been fixed by then.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66ea23154df0f9d3e5642f02a3254dd8d95bf0e7
Author: Mordechay Goodstein <mordechay.goodstein@intel.com>
Date:   Fri Apr 24 18:48:15 2020 +0300

    iwlwifi: avoid debug max amsdu config overwriting itself
    
    [ Upstream commit a65a5824298b06049dbaceb8a9bd19709dc9507c ]
    
    If we set amsdu_len one after another the second one overwrites
    the orig_amsdu_len so allow only moving from debug to non debug state.
    
    Also the TLC update check was wrong: it was checking that also the orig
    is smaller then the new updated size, which is not the case in debug
    amsdu mode.
    
    Signed-off-by: Mordechay Goodstein <mordechay.goodstein@intel.com>
    Fixes: af2984e9e625 ("iwlwifi: mvm: add a debugfs entry to set a fixed size AMSDU for all TX packets")
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20200424182644.e565446a4fce.I9729d8c520d8b8bb4de9a5cdc62e01eb85168aac@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 287a0f7a339368da466a419b078684fd38ee8d5e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat May 2 20:29:50 2020 +0200

    platform/x86: intel-vbtn: Also handle tablet-mode switch on "Detachable" and "Portable" chassis-types
    
    [ Upstream commit 1fac39fd0316b19c3e57a182524332332d1643ce ]
    
    Commit de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode
    switch on 2-in-1's") added a DMI chassis-type check to avoid accidentally
    reporting SW_TABLET_MODE = 1 to userspace on laptops.
    
    Some devices with a detachable keyboard and using the intel-vbnt (INT33D6)
    interface to report if they are in tablet mode (keyboard detached) or not,
    report 32 / "Detachable" as chassis-type, e.g. the HP Pavilion X2 series.
    
    Other devices with a detachable keyboard and using the intel-vbnt (INT33D6)
    interface to report SW_TABLET_MODE, report 8 / "Portable" as chassis-type.
    The Dell Venue 11 Pro 7130 is an example of this.
    
    Extend the DMI chassis-type check to also accept Portables and Detachables
    so that the intel-vbtn driver will report SW_TABLET_MODE on these devices.
    
    Note the chassis-type check was originally added to avoid a false-positive
    tablet-mode report on the Dell XPS 9360 laptop. To the best of my knowledge
    that laptop is using a chassis-type of 9 / "Laptop", so after this commit
    we still ignore the tablet-switch for that chassis-type.
    
    Fixes: de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode switch on 2-in-1's")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Mario Limonciello <Mario.limonciello@dell.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 708e0175edf5d5fce1fb76c18a62355908c504c6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat May 2 20:29:49 2020 +0200

    platform/x86: intel-vbtn: Do not advertise switches to userspace if they are not there
    
    [ Upstream commit 990fbb48067bf8cfa34b7d1e6e1674eaaef2f450 ]
    
    Commit de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode
    switch on 2-in-1's") added a DMI chassis-type check to avoid accidentally
    reporting SW_TABLET_MODE = 1 to userspace on laptops (specifically on the
    Dell XPS 9360), to avoid e.g. userspace ignoring touchpad events because
    userspace thought the device was in tablet-mode.
    
    But if we are not getting the initial status of the switch because the
    device does not have a tablet mode, then we really should not advertise
    the presence of a tablet-mode switch to userspace at all, as userspace may
    use the mere presence of this switch for certain heuristics.
    
    Fixes: de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode switch on 2-in-1's")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ac5741007f19ccea8602e17b38f62cdd1d3a5dd
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat May 2 20:29:48 2020 +0200

    platform/x86: intel-vbtn: Split keymap into buttons and switches parts
    
    [ Upstream commit f6ba524970c4b73b234bf41ecd6628f5803b1559 ]
    
    Split the sparse keymap into 2 separate keymaps, a buttons and a switches
    keymap and combine the 2 to a single map again in intel_vbtn_input_setup().
    
    This is a preparation patch for not telling userspace that we have switches
    when we do not have them (and for doing the same for the buttons).
    
    Fixes: de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode switch on 2-in-1's")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a091f1d273f74b8f155f5b0f016ff1b85a42fec
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat May 2 20:29:47 2020 +0200

    platform/x86: intel-vbtn: Use acpi_evaluate_integer()
    
    [ Upstream commit 18937875a231d831c309716d6d8fc358f8381881 ]
    
    Use acpi_evaluate_integer() instead of open-coding it.
    
    This is a preparation patch for adding a intel_vbtn_has_switches()
    helper function.
    
    Fixes: de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet mode switch on 2-in-1's")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b04c79255e8d0e1547cbf0ca0c5c4321fe7373f3
Author: Brian Foster <bfoster@redhat.com>
Date:   Wed May 6 13:25:22 2020 -0700

    xfs: fix duplicate verification from xfs_qm_dqflush()
    
    [ Upstream commit 629dcb38dc351947ed6a26a997d4b587f3bd5c7e ]
    
    The pre-flush dquot verification in xfs_qm_dqflush() duplicates the
    read verifier by checking the dquot in the on-disk buffer. Instead,
    verify the in-core variant before it is flushed to the buffer.
    
    Fixes: 7224fa482a6d ("xfs: add full xfs_dqblk verifier")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Allison Collins <allison.henderson@oracle.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f69806af2a2f3c9c51ab246f483f651dc42a07c6
Author: Brian Foster <bfoster@redhat.com>
Date:   Wed May 6 13:25:20 2020 -0700

    xfs: reset buffer write failure state on successful completion
    
    [ Upstream commit b6983e80b03bd4fd42de71993b3ac7403edac758 ]
    
    The buffer write failure flag is intended to control the internal
    write retry that XFS has historically implemented to help mitigate
    the severity of transient I/O errors. The flag is set when a buffer
    is resubmitted from the I/O completion path due to a previous
    failure. It is checked on subsequent I/O completions to skip the
    internal retry and fall through to the higher level configurable
    error handling mechanism. The flag is cleared in the synchronous and
    delwri submission paths and also checked in various places to log
    write failure messages.
    
    There are a couple minor problems with the current usage of this
    flag. One is that we issue an internal retry after every submission
    from xfsaild due to how delwri submission clears the flag. This
    results in double the expected or configured number of write
    attempts when under sustained failures. Another more subtle issue is
    that the flag is never cleared on successful I/O completion. This
    can cause xfs_wait_buftarg() to suggest that dirty buffers are being
    thrown away due to the existence of the flag, when the reality is
    that the flag might still be set because the write succeeded on the
    retry.
    
    Clear the write failure flag on successful I/O completion to address
    both of these problems. This means that the internal retry attempt
    occurs once since the last time a buffer write failed and that
    various other contexts only see the flag set when the immediately
    previous write attempt has failed.
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Allison Collins <allison.henderson@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f1a132115ef54eb4136ae24035ee62c9f41c201
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Wed May 6 17:42:23 2020 +0100

    kgdb: Fix spurious true from in_dbg_master()
    
    [ Upstream commit 3fec4aecb311995189217e64d725cfe84a568de3 ]
    
    Currently there is a small window where a badly timed migration could
    cause in_dbg_master() to spuriously return true. Specifically if we
    migrate to a new core after reading the processor id and the previous
    core takes a breakpoint then we will evaluate true if we read
    kgdb_active before we get the IPI to bring us to halt.
    
    Fix this by checking irqs_disabled() first. Interrupts are always
    disabled when we are executing the kgdb trap so this is an acceptable
    prerequisite. This also allows us to replace raw_smp_processor_id()
    with smp_processor_id() since the short circuit logic will prevent
    warnings from PREEMPT_DEBUG.
    
    Fixes: dcc7871128e9 ("kgdb: core changes to support kdb")
    Suggested-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20200506164223.2875760-1-daniel.thompson@linaro.org
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe99bb25c452c870e2628eb204dd540859e098a6
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Wed May 6 20:42:22 2020 +0300

    mips: cm: Fix an invalid error code of INTVN_*_ERR
    
    [ Upstream commit 8a0efb8b101665a843205eab3d67ab09cb2d9a8d ]
    
    Commit 3885c2b463f6 ("MIPS: CM: Add support for reporting CM cache
    errors") adds cm2_causes[] array with map of error type ID and
    pointers to the short description string. There is a mistake in
    the table, since according to MIPS32 manual CM2_ERROR_TYPE = {17,18}
    correspond to INTVN_WR_ERR and INTVN_RD_ERR, while the table
    claims they have {0x17,0x18} codes. This is obviously hex-dec
    copy-paste bug. Moreover codes {0x18 - 0x1a} indicate L2 ECC errors.
    
    Fixes: 3885c2b463f6 ("MIPS: CM: Add support for reporting CM cache errors")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-pm@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bf491d01ea7936f4352d8cc74a3400120894a10
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Wed May 6 13:52:45 2020 +0800

    MIPS: Truncate link address into 32bit for 32bit kernel
    
    [ Upstream commit ff487d41036035376e47972c7c522490b839ab37 ]
    
    LLD failed to link vmlinux with 64bit load address for 32bit ELF
    while bfd will strip 64bit address into 32bit silently.
    To fix LLD build, we should truncate load address provided by platform
    into 32bit for 32bit kernel.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/786
    Link: https://sourceware.org/bugzilla/show_bug.cgi?id=25784
    Reviewed-by: Fangrui Song <maskray@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Maciej W. Rozycki <macro@linux-mips.org>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec19b7a525aa3f5dc1c82a514d6d020b46e786ce
Author: Devulapally Shiva Krishna <shiva@chelsio.com>
Date:   Tue May 5 08:42:55 2020 +0530

    Crypto/chcr: fix for ccm(aes) failed test
    
    [ Upstream commit 10b0c75d7bc19606fa9a62c8ab9180e95c0e0385 ]
    
    The ccm(aes) test fails when req->assoclen > ~240bytes.
    
    The problem is the value assigned to auth_offset is wrong.
    As auth_offset is unsigned char, it can take max value as 255.
    So fix it by making it unsigned int.
    
    Signed-off-by: Ayush Sawal <ayush.sawal@chelsio.com>
    Signed-off-by: Devulapally Shiva Krishna <shiva@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 984fc5f4e3b44cd6f6a3ee9d584302e703c434ac
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Mon May 4 14:06:27 2020 -0700

    xfs: clean up the error handling in xfs_swap_extents
    
    [ Upstream commit 8bc3b5e4b70d28f8edcafc3c9e4de515998eea9e ]
    
    Make sure we release resources properly if we cannot clean out the COW
    extents in preparation for an extent swap.
    
    Fixes: 96987eea537d6c ("xfs: cancel COW blocks before swapext")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0eeea4b8f0a9f12d01f34ca1efad2c28e4d5ca41
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri May 1 18:39:00 2020 +0100

    libertas_tf: avoid a null dereference in pointer priv
    
    [ Upstream commit 049ceac308b0d57c4f06b9fb957cdf95d315cf0b ]
    
    Currently there is a check if priv is null when calling lbtf_remove_card
    but not in a previous call to if_usb_reset_dev that can also dereference
    priv.  Fix this by also only calling lbtf_remove_card if priv is null.
    
    It is noteable that there don't seem to be any bugs reported that the
    null pointer dereference has ever occurred, so I'm not sure if the null
    check is required, but since we're doing a null check anyway it should
    be done for both function calls.
    
    Addresses-Coverity: ("Dereference before null check")
    Fixes: baa0280f08c7 ("libertas_tf: don't defer firmware loading until start()")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200501173900.296658-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 964de53149abbd2bd5703adfe26bf07e4f74ab89
Author: Jeremy Kerr <jk@ozlabs.org>
Date:   Tue May 5 12:12:50 2020 +0200

    powerpc/spufs: fix copy_to_user while atomic
    
    [ Upstream commit 88413a6bfbbe2f648df399b62f85c934460b7a4d ]
    
    Currently, we may perform a copy_to_user (through
    simple_read_from_buffer()) while holding a context's register_lock,
    while accessing the context save area.
    
    This change uses a temporary buffer for the context save area data,
    which we then pass to simple_read_from_buffer.
    
    Includes changes from Christoph Hellwig <hch@lst.de>.
    
    Fixes: bf1ab978be23 ("[POWERPC] coredump: Add SPU elf notes to coredump.")
    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    [hch: renamed to function to avoid ___-prefixes]
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc091fc862166496eca275ae0364c3491252a1e9
Author: Yunjian Wang <wangyunjian@huawei.com>
Date:   Tue May 5 10:49:20 2020 +0800

    net: allwinner: Fix use correct return type for ndo_start_xmit()
    
    [ Upstream commit 09f6c44aaae0f1bdb8b983d7762676d5018c53bc ]
    
    The method ndo_start_xmit() returns a value of type netdev_tx_t. Fix
    the ndo function to use the correct type. And emac_start_xmit() can
    leak one skb if 'channel' == 3.
    
    Signed-off-by: Yunjian Wang <wangyunjian@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ca0e780b4e88e90f933a4f4b52f82bb6d303416
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue May 5 10:25:56 2020 +0200

    media: cec: silence shift wrapping warning in __cec_s_log_addrs()
    
    [ Upstream commit 3b5af3171e2d5a73ae6f04965ed653d039904eb6 ]
    
    The log_addrs->log_addr_type[i] value is a u8 which is controlled by
    the user and comes from the ioctl.  If it's over 31 then that results in
    undefined behavior (shift wrapping) and that leads to a Smatch static
    checker warning.  We already cap the value later so we can silence the
    warning just by re-ordering the existing checks.
    
    I think the UBSan checker will also catch this bug at runtime and
    generate a warning.  But otherwise the bug is harmless.
    
    Fixes: 9881fe0ca187 ("[media] cec: add HDMI CEC framework (adapter)")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f6762503fa2e42ffa9767ad8519a0e820b104f6
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Apr 29 02:52:20 2020 +0000

    drivers: net: davinci_mdio: fix potential NULL dereference in davinci_mdio_probe()
    
    [ Upstream commit e00edb4efbbc07425441a3be2aa87abaf5800d96 ]
    
    platform_get_resource() may fail and return NULL, so we should
    better check it's return value to avoid a NULL pointer dereference
    since devm_ioremap() does not check input parameters for null.
    
    This is detected by Coccinelle semantic patch.
    
    @@
    expression pdev, res, n, t, e, e1, e2;
    @@
    
    res = \(platform_get_resource\|platform_get_resource_byname\)(pdev, t, n);
    + if (!res)
    +   return -EINVAL;
    ... when != res == NULL
    e = devm_ioremap(e1, res->start, e2);
    
    Fixes: 03f66f067560 ("net: ethernet: ti: davinci_mdio: use devm_ioremap()")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2083327ea3ca883735470a28680d9b24ec10dba
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Apr 29 07:30:53 2020 +0000

    selinux: fix error return code in policydb_read()
    
    [ Upstream commit 4c09f8b6913a779ca0c70ea8058bf21537eebb3b ]
    
    Fix to return negative error code -ENOMEM from the kvcalloc() error
    handling case instead of 0, as done elsewhere in this function.
    
    Fixes: acdf52d97f82 ("selinux: convert to kvmalloc")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86dced2417b79df3517d31220430e3222d9ee8e4
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Apr 27 12:15:07 2020 +0000

    net: lpc-enet: fix error return code in lpc_mii_init()
    
    [ Upstream commit 88ec7cb22ddde725ed4ce15991f0bd9dd817fd85 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: b7370112f519 ("lpc32xx: Added ethernet driver")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Vladimir Zapolskiy <vz@mleia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b88ccc137fb994aa1d6816a7535bf022364d133
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Apr 13 12:27:58 2020 -0400

    iocost_monitor: drop string wrap around numbers when outputting json
    
    [ Upstream commit 21f3cfeab304fc07b90d93d98d4d2f62110fe6b2 ]
    
    Wrapping numbers in strings is used by some to work around bit-width issues in
    some enviroments. The problem isn't innate to json and the workaround seems to
    cause more integration problems than help. Let's drop the string wrapping.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5934e227090124b4056915024da73a9b508dc6a7
Author: Shaokun Zhang <zhangshaokun@hisilicon.com>
Date:   Thu Apr 23 20:05:30 2020 +0800

    drivers/perf: hisi: Fix typo in events attribute array
    
    [ Upstream commit 88562f06ebf56587788783e5420f25fde3ca36c8 ]
    
    Fix up one typo: wr_dr_64b -> wr_ddr_64b.
    
    Fixes: 2bab3cf9104c ("perf: hisi: Add support for HiSilicon SoC HHA PMU driver")
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/1587643530-34357-1-git-send-email-zhangshaokun@hisilicon.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7757368e0f0b3e108088ca7b5b8abda6faa7ebc
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Apr 1 17:40:33 2020 -0400

    sched/core: Fix illegal RCU from offline CPUs
    
    [ Upstream commit bf2c59fce4074e55d622089b34be3a6bc95484fb ]
    
    In the CPU-offline process, it calls mmdrop() after idle entry and the
    subsequent call to cpuhp_report_idle_dead(). Once execution passes the
    call to rcu_report_dead(), RCU is ignoring the CPU, which results in
    lockdep complaining when mmdrop() uses RCU from either memcg or
    debugobjects below.
    
    Fix it by cleaning up the active_mm state from BP instead. Every arch
    which has CONFIG_HOTPLUG_CPU should have already called idle_task_exit()
    from AP. The only exception is parisc because it switches them to
    &init_mm unconditionally (see smp_boot_one_cpu() and smp_cpu_init()),
    but the patch will still work there because it calls mmgrab(&init_mm) in
    smp_cpu_init() and then should call mmdrop(&init_mm) in finish_cpu().
    
      WARNING: suspicious RCU usage
      -----------------------------
      kernel/workqueue.c:710 RCU or wq_pool_mutex should be held!
    
      other info that might help us debug this:
    
      RCU used illegally from offline CPU!
      Call Trace:
       dump_stack+0xf4/0x164 (unreliable)
       lockdep_rcu_suspicious+0x140/0x164
       get_work_pool+0x110/0x150
       __queue_work+0x1bc/0xca0
       queue_work_on+0x114/0x120
       css_release+0x9c/0xc0
       percpu_ref_put_many+0x204/0x230
       free_pcp_prepare+0x264/0x570
       free_unref_page+0x38/0xf0
       __mmdrop+0x21c/0x2c0
       idle_task_exit+0x170/0x1b0
       pnv_smp_cpu_kill_self+0x38/0x2e0
       cpu_die+0x48/0x64
       arch_cpu_idle_dead+0x30/0x50
       do_idle+0x2f4/0x470
       cpu_startup_entry+0x38/0x40
       start_secondary+0x7a8/0xa80
       start_secondary_resume+0x10/0x14
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Link: https://lkml.kernel.org/r/20200401214033.8448-1-cai@lca.pw
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e256dd5b05561b051e895121530d2a0062c7a0f
Author: Jann Horn <jannh@google.com>
Date:   Thu Mar 5 23:06:57 2020 +0100

    exit: Move preemption fixup up, move blocking operations down
    
    [ Upstream commit 586b58cac8b4683eb58a1446fbc399de18974e40 ]
    
    With CONFIG_DEBUG_ATOMIC_SLEEP=y and CONFIG_CGROUPS=y, kernel oopses in
    non-preemptible context look untidy; after the main oops, the kernel prints
    a "sleeping function called from invalid context" report because
    exit_signals() -> cgroup_threadgroup_change_begin() -> percpu_down_read()
    can sleep, and that happens before the preempt_count_set(PREEMPT_ENABLED)
    fixup.
    
    It looks like the same thing applies to profile_task_exit() and
    kcov_task_exit().
    
    Fix it by moving the preemption fixup up and the calls to
    profile_task_exit() and kcov_task_exit() down.
    
    Fixes: 1dc0fffc48af ("sched/core: Robustify preemption leak checks")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200305220657.46800-1-jannh@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 338ff29604d957aeefb16a5df52d3bbb7a1e025a
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Apr 21 14:47:04 2020 -0700

    lib/mpi: Fix 64-bit MIPS build with Clang
    
    [ Upstream commit 18f1ca46858eac22437819937ae44aa9a8f9f2fa ]
    
    When building 64r6_defconfig with CONFIG_MIPS32_O32 disabled and
    CONFIG_CRYPTO_RSA enabled:
    
    lib/mpi/generic_mpih-mul1.c:37:24: error: invalid use of a cast in a
    inline asm context requiring an l-value: remove the cast
    or build with -fheinous-gnu-extensions
                    umul_ppmm(prod_high, prod_low, s1_ptr[j], s2_limb);
                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    lib/mpi/longlong.h:664:22: note: expanded from macro 'umul_ppmm'
                     : "=d" ((UDItype)(w0))
                             ~~~~~~~~~~^~~
    lib/mpi/generic_mpih-mul1.c:37:13: error: invalid use of a cast in a
    inline asm context requiring an l-value: remove the cast
    or build with -fheinous-gnu-extensions
                    umul_ppmm(prod_high, prod_low, s1_ptr[j], s2_limb);
                    ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    lib/mpi/longlong.h:668:22: note: expanded from macro 'umul_ppmm'
                     : "=d" ((UDItype)(w1))
                             ~~~~~~~~~~^~~
    2 errors generated.
    
    This special case for umul_ppmm for MIPS64r6 was added in
    commit bbc25bee37d2b ("lib/mpi: Fix umul_ppmm() for MIPS64r6"), due to
    GCC being inefficient and emitting a __multi3 intrinsic.
    
    There is no such issue with clang; with this patch applied, I can build
    this configuration without any problems and there are no link errors
    like mentioned in the commit above (which I can still reproduce with
    GCC 9.3.0 when that commit is reverted). Only use this definition when
    GCC is being used.
    
    This really should have been caught by commit b0c091ae04f67 ("lib/mpi:
    Eliminate unused umul_ppmm definitions for MIPS") when I was messing
    around in this area but I was not testing 64-bit MIPS at the time.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/885
    Reported-by: Dmitry Golovin <dima@golovin.in>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fbc334749e77bc3b67555e7307d821372a09dc4
Author: Doug Berger <opendmb@gmail.com>
Date:   Wed Apr 29 13:02:01 2020 -0700

    net: bcmgenet: Fix WoL with password after deep sleep
    
    [ Upstream commit 6f7689057a0f10a6c967b9f2759d7a3dc948b930 ]
    
    Broadcom STB chips support a deep sleep mode where all register contents
    are lost. Because we were stashing the MagicPacket password into some of
    these registers a suspend into that deep sleep then a resumption would
    not lead to being able to wake-up from MagicPacket with password again.
    
    Fix this by keeping a software copy of the password and program it
    during suspend.
    
    Fixes: c51de7f3976b ("net: bcmgenet: add Wake-on-LAN support code")
    Suggested-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7b1ca9eebdfadd8843f394bcee919b25bc540da
Author: Doug Berger <opendmb@gmail.com>
Date:   Wed Apr 29 13:02:00 2020 -0700

    net: bcmgenet: set Rx mode before starting netif
    
    [ Upstream commit 72f96347628e73dbb61b307f18dd19293cc6792a ]
    
    This commit explicitly calls the bcmgenet_set_rx_mode() function when
    the network interface is started. This function is normally called by
    ndo_set_rx_mode when the flags are changed, but apparently not when
    the driver is suspended and resumed.
    
    This change ensures that address filtering or promiscuous mode are
    properly restored by the driver after the MAC may have been reset.
    
    Fixes: b6e978e50444 ("net: bcmgenet: add suspend/resume callbacks")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1dbb13ceedac8200ba452cf896c6114ce4b84e08
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Apr 28 18:21:06 2020 -0700

    selftests/bpf: Fix memory leak in extract_build_id()
    
    [ Upstream commit 9f56bb531a809ecaa7f0ddca61d2cf3adc1cb81a ]
    
    getline() allocates string, which has to be freed.
    
    Fixes: 81f77fd0deeb ("bpf: add selftest for stackmap with BPF_F_STACK_BUILD_ID")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/20200429012111.277390-7-andriin@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58ee4d253753bd110911773aee9d088963b649c3
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Apr 24 21:55:34 2020 +0200

    netfilter: nft_nat: return EOPNOTSUPP if type or flags are not supported
    
    [ Upstream commit 0d7c83463fdf7841350f37960a7abadd3e650b41 ]
    
    Instead of EINVAL which should be used for malformed netlink messages.
    
    Fixes: eb31628e37a0 ("netfilter: nf_tables: Add support for IPv6 NAT")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1a00c9bb1c7446fad41a3ef8d2a57946e3a2ddc
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Thu Apr 23 16:57:50 2020 +0200

    dpaa2-eth: fix return codes used in ndo_setup_tc
    
    [ Upstream commit b89c1e6bdc73f5775e118eb2ab778e75b262b30c ]
    
    Drivers ndo_setup_tc call should return -EOPNOTSUPP, when it cannot
    support the qdisc type. Other return values will result in failing the
    qdisc setup.  This lead to qdisc noop getting assigned, which will
    drop all TX packets on the interface.
    
    Fixes: ab1e6de2bd49 ("dpaa2-eth: Add mqprio support")
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Tested-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04ab099d1eb080f630d84736fc1010575777e172
Author: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
Date:   Mon Apr 6 02:15:04 2020 +0200

    Drivers: hv: vmbus: Always handle the VMBus messages on CPU0
    
    [ Upstream commit 8a857c55420f29da4fc131adc22b12d474c48f4c ]
    
    A Linux guest have to pick a "connect CPU" to communicate with the
    Hyper-V host.  This CPU can not be taken offline because Hyper-V does
    not provide a way to change that CPU assignment.
    
    Current code sets the connect CPU to whatever CPU ends up running the
    function vmbus_negotiate_version(), and this will generate problems if
    that CPU is taken offine.
    
    Establish CPU0 as the connect CPU, and add logics to prevents the
    connect CPU from being taken offline.   We could pick some other CPU,
    and we could pick that "other CPU" dynamically if there was a reason to
    do so at some point in the future.  But for now, #defining the connect
    CPU to 0 is the most straightforward and least complex solution.
    
    While on this, add inline comments explaining "why" offer and rescind
    messages should not be handled by a same serialized work queue.
    
    Suggested-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/20200406001514.19876-2-parri.andrea@gmail.com
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51d2957b21b5dde504619d181f283ff6c66d42ab
Author: Paul Moore <paul@paul-moore.com>
Date:   Tue Apr 21 09:10:56 2020 -0400

    audit: fix a net reference leak in audit_list_rules_send()
    
    [ Upstream commit 3054d06719079388a543de6adb812638675ad8f5 ]
    
    If audit_list_rules_send() fails when trying to create a new thread
    to send the rules it also fails to cleanup properly, leaking a
    reference to a net structure.  This patch fixes the error patch and
    renames audit_send_list() to audit_send_list_thread() to better
    match its cousin, audit_send_reply_thread().
    
    Reported-by: teroincn@gmail.com
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b737a0ae101215859e7db1f504e16c5356fa9f8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Apr 17 19:15:32 2020 +0200

    Bluetooth: btbcm: Add 2 missing models to subver tables
    
    [ Upstream commit c03ee9af4e07112bd3fc688daca9e654f41eca93 ]
    
    Currently the bcm_uart_subver_ and bcm_usb_subver_table-s lack entries
    for the BCM4324B5 and BCM20703A1 chipsets. This makes the code use just
    "BCM" as prefix for the filename to pass to request-firmware, making it
    harder for users to figure out which firmware they need. This especially
    is problematic with the UART attached BCM4324B5 where this leads to the
    filename being just "BCM.hcd".
    
    Add the 2 missing devices to subver tables. This has been tested on:
    
    1. A Dell XPS15 9550 where this makes btbcm.c try to load
    "BCM20703A1-0a5c-6410.hcd" before it tries to load "BCM-0a5c-6410.hcd".
    
    2. A Thinkpad 8 where this makes btbcm.c try to load
    "BCM4324B5.hcd" before it tries to load "BCM.hcd"
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5edfe811b4ad37c309ec1eca313e74cb7c7e373
Author: Wen Gong <wgong@codeaurora.org>
Date:   Tue Apr 21 15:09:35 2020 +0300

    ath10k: add flush tx packets for SDIO chip
    
    [ Upstream commit dd7fc5545bbafdbd6c1efdc996b61883b285bdc5 ]
    
    When station connected to AP, and run TX traffic such as TCP/UDP, and
    system enter suspend state, then mac80211 call ath10k_flush with set
    drop flag, recently it only send wmi peer flush to firmware and
    firmware will flush all pending TX packets, for PCIe, firmware will
    indicate the TX packets status to ath10k, and then ath10k indicate to
    mac80211 TX complete with the status, then all the packets has been
    flushed at this moment. For SDIO chip, it is different, its TX
    complete indication is disabled by default, and it has a tx queue in
    ath10k, and its tx credit control is enabled, total tx credit is 96,
    when its credit is not sufficient, then the packets will buffered in
    the tx queue of ath10k, max packets is TARGET_TLV_NUM_MSDU_DESC_HL
    which is 1024, for SDIO, when mac80211 call ath10k_flush with set drop
    flag, maybe it have pending packets in tx queue of ath10k, and if it
    does not have sufficient tx credit, the packets will stay in queue
    untill tx credit report from firmware, if it is a noisy environment,
    tx speed is low and the tx credit report from firmware will delay more
    time, then the num_pending_tx will remain > 0 untill all packets send
    to firmware. After the 1st ath10k_flush, mac80211 will call the 2nd
    ath10k_flush without set drop flag immediately, then it will call to
    ath10k_mac_wait_tx_complete, and it wait untill num_pending_tx become
    to 0, in noisy environment, it is esay to wait about near 5 seconds,
    then it cause the suspend take long time.
    
    1st and 2nd callstack of ath10k_flush
    [  303.740427] ath10k_sdio mmc1:0001:1: ath10k_flush drop:1, pending:0-0
    [  303.740495] ------------[ cut here ]------------
    [  303.740739] WARNING: CPU: 1 PID: 3921 at /mnt/host/source/src/third_party/kernel/v4.19/drivers/net/wireless/ath/ath10k/mac.c:7025 ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.740757] Modules linked in: bridge stp llc ath10k_sdio ath10k_core rfcomm uinput cros_ec_rpmsg mtk_seninf mtk_cam_isp mtk_vcodec_enc mtk_fd mtk_vcodec_dec mtk_vcodec_common mtk_dip mtk_mdp3 videobuf2_dma_contig videobuf2_memops v4l2_mem2mem videobuf2_v4l2 videobuf2_common hid_google_hammer hci_uart btqca bluetooth dw9768 ov8856 ecdh_generic ov02a10 v4l2_fwnode mtk_scp mtk_rpmsg rpmsg_core mtk_scp_ipi ipt_MASQUERADE fuse iio_trig_sysfs cros_ec_sensors_ring cros_ec_sensors_sync cros_ec_light_prox cros_ec_sensors industrialio_triggered_buffer
    [  303.740914]  kfifo_buf cros_ec_activity cros_ec_sensors_core lzo_rle lzo_compress ath mac80211 zram cfg80211 joydev [last unloaded: ath10k_core]
    [  303.741009] CPU: 1 PID: 3921 Comm: kworker/u16:10 Tainted: G        W         4.19.95 #2
    [  303.741027] Hardware name: MediaTek krane sku176 board (DT)
    [  303.741061] Workqueue: events_unbound async_run_entry_fn
    [  303.741086] pstate: 60000005 (nZCv daif -PAN -UAO)
    [  303.741166] pc : ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.741244] lr : ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.741260] sp : ffffffdf080e77a0
    [  303.741276] x29: ffffffdf080e77a0 x28: ffffffdef3730040
    [  303.741300] x27: ffffff907c2240a0 x26: ffffffde6ff39afc
    [  303.741321] x25: ffffffdef3730040 x24: ffffff907bf61018
    [  303.741343] x23: ffffff907c2240a0 x22: ffffffde6ff39a50
    [  303.741364] x21: 0000000000000001 x20: ffffffde6ff39a50
    [  303.741385] x19: ffffffde6bac2420 x18: 0000000000017200
    [  303.741407] x17: ffffff907c24a000 x16: 0000000000000037
    [  303.741428] x15: ffffff907b49a568 x14: ffffff907cf332c1
    [  303.741476] x13: 00000000000922e4 x12: 0000000000000000
    [  303.741497] x11: 0000000000000001 x10: 0000000000000007
    [  303.741518] x9 : f2256b8c1de4bc00 x8 : f2256b8c1de4bc00
    [  303.741539] x7 : ffffff907ab5e764 x6 : 0000000000000000
    [  303.741560] x5 : 0000000000000080 x4 : 0000000000000001
    [  303.741582] x3 : ffffffdf080e74a8 x2 : ffffff907aa91244
    [  303.741603] x1 : ffffffdf080e74a8 x0 : 0000000000000024
    [  303.741624] Call trace:
    [  303.741701]  ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.741941]  __ieee80211_flush_queues+0x1dc/0x358 [mac80211]
    [  303.742098]  ieee80211_flush_queues+0x34/0x44 [mac80211]
    [  303.742253]  ieee80211_set_disassoc+0xc0/0x5ec [mac80211]
    [  303.742399]  ieee80211_mgd_deauth+0x720/0x7d4 [mac80211]
    [  303.742535]  ieee80211_deauth+0x24/0x30 [mac80211]
    [  303.742720]  cfg80211_mlme_deauth+0x250/0x3bc [cfg80211]
    [  303.742849]  cfg80211_mlme_down+0x90/0xd0 [cfg80211]
    [  303.742971]  cfg80211_disconnect+0x340/0x3a0 [cfg80211]
    [  303.743087]  __cfg80211_leave+0xe4/0x17c [cfg80211]
    [  303.743203]  cfg80211_leave+0x38/0x50 [cfg80211]
    [  303.743319]  wiphy_suspend+0x84/0x5bc [cfg80211]
    [  303.743335]  dpm_run_callback+0x170/0x304
    [  303.743346]  __device_suspend+0x2dc/0x3e8
    [  303.743356]  async_suspend+0x2c/0xb0
    [  303.743370]  async_run_entry_fn+0x48/0xf8
    [  303.743383]  process_one_work+0x304/0x604
    [  303.743394]  worker_thread+0x248/0x3f4
    [  303.743403]  kthread+0x120/0x130
    [  303.743416]  ret_from_fork+0x10/0x18
    
    [  303.743812] ath10k_sdio mmc1:0001:1: ath10k_flush drop:0, pending:0-0
    [  303.743858] ------------[ cut here ]------------
    [  303.744057] WARNING: CPU: 1 PID: 3921 at /mnt/host/source/src/third_party/kernel/v4.19/drivers/net/wireless/ath/ath10k/mac.c:7025 ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.744075] Modules linked in: bridge stp llc ath10k_sdio ath10k_core rfcomm uinput cros_ec_rpmsg mtk_seninf mtk_cam_isp mtk_vcodec_enc mtk_fd mtk_vcodec_dec mtk_vcodec_common mtk_dip mtk_mdp3 videobuf2_dma_contig videobuf2_memops v4l2_mem2mem videobuf2_v4l2 videobuf2_common hid_google_hammer hci_uart btqca bluetooth dw9768 ov8856 ecdh_generic ov02a10 v4l2_fwnode mtk_scp mtk_rpmsg rpmsg_core mtk_scp_ipi ipt_MASQUERADE fuse iio_trig_sysfs cros_ec_sensors_ring cros_ec_sensors_sync cros_ec_light_prox cros_ec_sensors industrialio_triggered_buffer kfifo_buf cros_ec_activity cros_ec_sensors_core lzo_rle lzo_compress ath mac80211 zram cfg80211 joydev [last unloaded: ath10k_core]
    [  303.744256] CPU: 1 PID: 3921 Comm: kworker/u16:10 Tainted: G        W         4.19.95 #2
    [  303.744273] Hardware name: MediaTek krane sku176 board (DT)
    [  303.744301] Workqueue: events_unbound async_run_entry_fn
    [  303.744325] pstate: 60000005 (nZCv daif -PAN -UAO)
    [  303.744403] pc : ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.744480] lr : ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.744496] sp : ffffffdf080e77a0
    [  303.744512] x29: ffffffdf080e77a0 x28: ffffffdef3730040
    [  303.744534] x27: ffffff907c2240a0 x26: ffffffde6ff39afc
    [  303.744556] x25: ffffffdef3730040 x24: ffffff907bf61018
    [  303.744577] x23: ffffff907c2240a0 x22: ffffffde6ff39a50
    [  303.744598] x21: 0000000000000000 x20: ffffffde6ff39a50
    [  303.744620] x19: ffffffde6bac2420 x18: 000000000001831c
    [  303.744641] x17: ffffff907c24a000 x16: 0000000000000037
    [  303.744662] x15: ffffff907b49a568 x14: ffffff907cf332c1
    [  303.744683] x13: 00000000000922ea x12: 0000000000000000
    [  303.744704] x11: 0000000000000001 x10: 0000000000000007
    [  303.744747] x9 : f2256b8c1de4bc00 x8 : f2256b8c1de4bc00
    [  303.744768] x7 : ffffff907ab5e764 x6 : 0000000000000000
    [  303.744789] x5 : 0000000000000080 x4 : 0000000000000001
    [  303.744810] x3 : ffffffdf080e74a8 x2 : ffffff907aa91244
    [  303.744831] x1 : ffffffdf080e74a8 x0 : 0000000000000024
    [  303.744853] Call trace:
    [  303.744929]  ath10k_flush+0x54/0x104 [ath10k_core]
    [  303.745098]  __ieee80211_flush_queues+0x1dc/0x358 [mac80211]
    [  303.745277]  ieee80211_flush_queues+0x34/0x44 [mac80211]
    [  303.745424]  ieee80211_set_disassoc+0x108/0x5ec [mac80211]
    [  303.745569]  ieee80211_mgd_deauth+0x720/0x7d4 [mac80211]
    [  303.745706]  ieee80211_deauth+0x24/0x30 [mac80211]
    [  303.745853]  cfg80211_mlme_deauth+0x250/0x3bc [cfg80211]
    [  303.745979]  cfg80211_mlme_down+0x90/0xd0 [cfg80211]
    [  303.746103]  cfg80211_disconnect+0x340/0x3a0 [cfg80211]
    [  303.746219]  __cfg80211_leave+0xe4/0x17c [cfg80211]
    [  303.746335]  cfg80211_leave+0x38/0x50 [cfg80211]
    [  303.746452]  wiphy_suspend+0x84/0x5bc [cfg80211]
    [  303.746467]  dpm_run_callback+0x170/0x304
    [  303.746477]  __device_suspend+0x2dc/0x3e8
    [  303.746487]  async_suspend+0x2c/0xb0
    [  303.746498]  async_run_entry_fn+0x48/0xf8
    [  303.746510]  process_one_work+0x304/0x604
    [  303.746521]  worker_thread+0x248/0x3f4
    [  303.746530]  kthread+0x120/0x130
    [  303.746542]  ret_from_fork+0x10/0x18
    
    one sample's debugging log: it wait 3190 ms(5000 - 1810).
    
    1st ath10k_flush, it has 120 packets in tx queue of ath10k:
    <...>-1513  [000] .... 25374.786005: ath10k_log_err: ath10k_sdio mmc1:0001:1 ath10k_flush drop:1, pending:120-0
    <...>-1513  [000] ...1 25374.788375: ath10k_log_warn: ath10k_sdio mmc1:0001:1 ath10k_htt_tx_mgmt_inc_pending htt->num_pending_mgmt_tx:0
    <...>-1500  [001] .... 25374.790143: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:121
    
    2st ath10k_flush, it has 121 packets in tx queue of ath10k:
    <...>-1513  [000] .... 25374.790571: ath10k_log_err: ath10k_sdio mmc1:0001:1 ath10k_flush drop:0, pending:121-0
    <...>-1513  [000] .... 25374.791990: ath10k_log_err: ath10k_sdio mmc1:0001:1 ath10k_mac_wait_tx_complete state:1 pending:121-0
    <...>-1508  [001] .... 25374.792696: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit update: delta:46
    <...>-1508  [001] .... 25374.792700: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit total:46
    <...>-1508  [001] .... 25374.792729: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:121
    <...>-1508  [001] .... 25374.792937: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx status:0, eid:1, req count:88, count:32, len:49792
    <...>-1508  [001] .... 25374.793031: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx status:0, eid:1, req count:75, count:14, len:21784
    kworker/u16:0-25773 [003] .... 25374.793701: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx complete, eid:1, pending complete count:46
    <...>-1881  [000] .... 25375.073178: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit update: delta:24
    <...>-1881  [000] .... 25375.073182: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit total:24
    <...>-1881  [000] .... 25375.073429: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:75
    <...>-1879  [001] .... 25375.074090: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx complete, eid:1, pending complete count:24
    <...>-1881  [000] .... 25375.074123: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx status:0, eid:1, req count:51, count:24, len:37344
    <...>-1879  [001] .... 25375.270126: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit update: delta:26
    <...>-1879  [001] .... 25375.270130: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit total:26
    <...>-1488  [000] .... 25375.270174: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:51
    <...>-1488  [000] .... 25375.270529: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx status:0, eid:1, req count:25, count:26, len:40456
    <...>-1879  [001] .... 25375.270693: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx complete, eid:1, pending complete count:26
    <...>-1488  [001] .... 25377.775885: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit update: delta:12
    <...>-1488  [001] .... 25377.775890: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit total:12
    <...>-1488  [001] .... 25377.775933: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:25
    <...>-1488  [001] .... 25377.776059: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx status:0, eid:1, req count:13, count:12, len:18672
    <...>-1879  [001] .... 25377.776100: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx complete, eid:1, pending complete count:12
    <...>-1488  [001] .... 25377.878079: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit update: delta:15
    <...>-1488  [001] .... 25377.878087: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit total:15
    <...>-1879  [000] .... 25377.878323: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:13
    <...>-1879  [000] .... 25377.878487: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx status:0, eid:1, req count:0, count:13, len:20228
    <...>-1879  [000] .... 25377.878497: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx complete, eid:1, pending complete count:13
    <...>-1488  [001] .... 25377.919927: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit update: delta:11
    <...>-1488  [001] .... 25377.919932: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 credit total:13
    <...>-1488  [001] .... 25377.919976: ath10k_log_dbg: ath10k_sdio mmc1:0001:1 bundle tx work, eid:1, count:0
    <...>-1881  [000] .... 25377.982645: ath10k_log_warn: ath10k_sdio mmc1:0001:1 HTT_T2H_MSG_TYPE_MGMT_TX_COMPLETION status:0
    <...>-1513  [001] .... 25377.982973: ath10k_log_err: ath10k_sdio mmc1:0001:1 ath10k_mac_wait_tx_complete time_left:1810, pending:0-0
    
    Flush all pending TX packets for the 1st ath10k_flush reduced the wait
    time of the 2nd ath10k_flush and then suspend take short time.
    
    This Patch only effect SDIO chips.
    
    Tested with QCA6174 SDIO with firmware WLAN.RMH.4.4.1-00042.
    
    Signed-off-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200415233730.10581-1-wgong@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc66b6bb3241bfb433c150c4d2a834dae0f38f0f
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Tue Apr 21 19:59:46 2020 +0800

    MIPS: Make sparse_init() using top-down allocation
    
    [ Upstream commit 269b3a9ac538c4ae87f84be640b9fa89914a2489 ]
    
    In the current code, if CONFIG_SWIOTLB is set, when failed to get IO TLB
    memory from the low pages by plat_swiotlb_setup(), it may lead to the boot
    process failed with kernel panic.
    
    (1) On the Loongson and SiByte platform
    arch/mips/loongson64/dma.c
    arch/mips/sibyte/common/dma.c
    void __init plat_swiotlb_setup(void)
    {
            swiotlb_init(1);
    }
    
    kernel/dma/swiotlb.c
    void  __init
    swiotlb_init(int verbose)
    {
    ...
            vstart = memblock_alloc_low(PAGE_ALIGN(bytes), PAGE_SIZE);
            if (vstart && !swiotlb_init_with_tbl(vstart, io_tlb_nslabs, verbose))
                    return;
    ...
            pr_warn("Cannot allocate buffer");
            no_iotlb_memory = true;
    }
    
    phys_addr_t swiotlb_tbl_map_single()
    {
    ...
            if (no_iotlb_memory)
                    panic("Can not allocate SWIOTLB buffer earlier ...");
    ...
    }
    
    (2) On the Cavium OCTEON platform
    arch/mips/cavium-octeon/dma-octeon.c
    void __init plat_swiotlb_setup(void)
    {
    ...
            octeon_swiotlb = memblock_alloc_low(swiotlbsize, PAGE_SIZE);
            if (!octeon_swiotlb)
                    panic("%s: Failed to allocate %zu bytes align=%lx\n",
                          __func__, swiotlbsize, PAGE_SIZE);
    ...
    }
    
    Because IO_TLB_DEFAULT_SIZE is 64M, if the rest size of low memory is less
    than 64M when call plat_swiotlb_setup(), we can easily reproduce the panic
    case.
    
    In order to reduce the possibility of kernel panic when failed to get IO
    TLB memory under CONFIG_SWIOTLB, it is better to allocate low memory as
    small as possible before plat_swiotlb_setup(), so make sparse_init() using
    top-down allocation.
    
    Reported-by: Juxin Gao <gaojuxin@loongson.cn>
    Co-developed-by: Juxin Gao <gaojuxin@loongson.cn>
    Signed-off-by: Juxin Gao <gaojuxin@loongson.cn>
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3bc42b70ed1d402e13372cc0c02c3e14ac0404c
Author: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
Date:   Tue Apr 7 17:44:17 2020 +0200

    media: platform: fcp: Set appropriate DMA parameters
    
    [ Upstream commit dd844fb8e50b12e65bbdc5746c9876c6735500df ]
    
    Enabling CONFIG_DMA_API_DEBUG=y and CONFIG_DMA_API_DEBUG_SG=y will
    enable extra validation on DMA operations ensuring that the size
    restraints are met.
    
    When using the FCP in conjunction with the VSP1/DU, and display frames,
    the size of the DMA operations is larger than the default maximum
    segment size reported by the DMA core (64K). With the DMA debug enabled,
    this produces a warning such as the following:
    
    "DMA-API: rcar-fcp fea27000.fcp: mapping sg segment longer than device
    claims to support [len=3145728] [max=65536]"
    
    We have no specific limitation on the segment size which isn't already
    handled by the VSP1/DU which actually handles the DMA allcoations and
    buffer management, so define a maximum segment size of up to 4GB (a 32
    bit mask).
    
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Fixes: 7b49235e83b2 ("[media] v4l: Add Renesas R-Car FCP driver")
    Signed-off-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79d622a8132247e6a16f7e6c96bd6a6664b373ba
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 10 18:51:33 2020 +0100

    media: dvb: return -EREMOTEIO on i2c transfer failure.
    
    [ Upstream commit 96f3a9392799dd0f6472648a7366622ffd0989f3 ]
    
    Currently when i2c transfers fail the error return -EREMOTEIO
    is assigned to err but then later overwritten when the tuner
    attach call is made.  Fix this by returning early with the
    error return code -EREMOTEIO on i2c transfer failure errors.
    
    If the transfer fails, an uninitialized value will be read from b2.
    
    Addresses-Coverity: ("Unused value")
    
    Fixes: fbfee8684ff2 ("V4L/DVB (5651): Dibusb-mb: convert pll handling to properly use dvb-pll")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 189ca174b87ddaeff40932372e4015432e4886b3
Author: Paul Moore <paul@paul-moore.com>
Date:   Mon Apr 20 10:09:29 2020 -0400

    audit: fix a net reference leak in audit_send_reply()
    
    [ Upstream commit a48b284b403a4a073d8beb72d2bb33e54df67fb6 ]
    
    If audit_send_reply() fails when trying to create a new thread to
    send the reply it also fails to cleanup properly, leaking a reference
    to a net structure.  This patch fixes the error path and makes a
    handful of other cleanups that came up while fixing the code.
    
    Reported-by: teroincn@gmail.com
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6315839f14b97ea0ad2dd08af7984df0058cf011
Author: Jitao Shi <jitao.shi@mediatek.com>
Date:   Wed Apr 15 09:13:19 2020 +0800

    drm/mediatek: set dpi pin mode to gpio low to avoid leakage current
    
    [ Upstream commit 6bd4763fd532cff43f9b15704f324c45a9806f53 ]
    
    Config dpi pins mode to output and pull low when dpi is disabled.
    Aovid leakage current from some dpi pins (Hsync Vsync DE ... ).
    
    Signed-off-by: Jitao Shi <jitao.shi@mediatek.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 878ca9ebf1a0f5dad9a944d9dd00902933170dfa
Author: Jitao Shi <jitao.shi@mediatek.com>
Date:   Wed Apr 15 09:13:17 2020 +0800

    dt-bindings: display: mediatek: control dpi pins mode to avoid leakage
    
    [ Upstream commit b0ff9b590733079f7f9453e5976a9dd2630949e3 ]
    
    Add property "pinctrl-names" to swap pin mode between gpio and dpi mode.
    Set the dpi pins to gpio mode and output-low to avoid leakage current
    when dpi disabled.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Jitao Shi <jitao.shi@mediatek.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f8c52320202736d225b1a5d031d1e5f5076199b
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Feb 19 22:23:02 2020 -0800

    e1000: Distribute switch variables for initialization
    
    [ Upstream commit a34c7f5156654ebaf7eaace102938be7ff7036cb ]
    
    Variables declared in a switch statement before any case statements
    cannot be automatically initialized with compiler instrumentation (as
    they are not part of any execution flow). With GCC's proposed automatic
    stack variable initialization feature, this triggers a warning (and they
    don't get initialized). Clang's automatic stack variable initialization
    (via CONFIG_INIT_STACK_ALL=y) doesn't throw a warning, but it also
    doesn't initialize such variables[1]. Note that these warnings (or silent
    skipping) happen before the dead-store elimination optimization phase,
    so even when the automatic initializations are later elided in favor of
    direct initializations, the warnings remain.
    
    To avoid these problems, move such variables into the "case" where
    they're used or lift them up into the main function body.
    
    drivers/net/ethernet/intel/e1000/e1000_main.c: In function ‘e1000_xmit_frame’:
    drivers/net/ethernet/intel/e1000/e1000_main.c:3143:18: warning: statement will never be executed [-Wswitch-unreachable]
     3143 |     unsigned int pull_size;
          |                  ^~~~~~~~~
    
    [1] https://bugs.llvm.org/show_bug.cgi?id=44916
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bf9805dfdaec61125020bc4f6eed71481a5deab
Author: Stephane Eranian <eranian@google.com>
Date:   Thu Apr 2 08:43:54 2020 -0700

    tools api fs: Make xxx__mountpoint() more scalable
    
    [ Upstream commit c6fddb28bad26e5472cb7acf7b04cd5126f1a4ab ]
    
    The xxx_mountpoint() interface provided by fs.c finds mount points for
    common pseudo filesystems. The first time xxx_mountpoint() is invoked,
    it scans the mount table (/proc/mounts) looking for a match. If found,
    it is cached. The price to scan /proc/mounts is paid once if the mount
    is found.
    
    When the mount point is not found, subsequent calls to xxx_mountpoint()
    scan /proc/mounts over and over again.  There is no caching.
    
    This causes a scaling issue in perf record with hugeltbfs__mountpoint().
    The function is called for each process found in
    synthesize__mmap_events().  If the machine has thousands of processes
    and if the /proc/mounts has many entries this could cause major overhead
    in perf record. We have observed multi-second slowdowns on some
    configurations.
    
    As an example on a laptop:
    
    Before:
    
      $ sudo umount /dev/hugepages
      $ strace -e trace=openat -o /tmp/tt perf record -a ls
      $ fgrep mounts /tmp/tt
      285
    
    After:
    
      $ sudo umount /dev/hugepages
      $ strace -e trace=openat -o /tmp/tt perf record -a ls
      $ fgrep mounts /tmp/tt
      1
    
    One could argue that the non-caching in case the moint point is not
    found is intentional. That way subsequent calls may discover a moint
    point if the sysadmin mounts the filesystem. But the same argument could
    be made against caching the mount point. It could be unmounted causing
    errors.  It all depends on the intent of the interface. This patch
    assumes it is expected to scan /proc/mounts once. The patch documents
    the caching behavior in the fs.h header file.
    
    An alternative would be to just fix perf record. But it would solve the
    problem with hugetlbs__mountpoint() but there could be similar issues
    (possibly down the line) with other xxx_mountpoint() calls in perf or
    other tools.
    
    Signed-off-by: Stephane Eranian <eranian@google.com>
    Reviewed-by: Ian Rogers <irogers@google.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrey Zhizhikin <andrey.z@gmail.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lore.kernel.org/lkml/20200402154357.107873-3-irogers@google.com
    Signed-off-by: Ian Rogers <irogers@google.com>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a17cc8a6ababe176dcffc56e6b3d373218238cf3
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Tue Apr 14 22:37:08 2020 -0700

    regulator: qcom-rpmh: Fix typos in pm8150 and pm8150l
    
    [ Upstream commit 906746ba26d0b45688f4c3b730c35f765dc958ba ]
    
    Fix typos in pm8150 l13/l16/l17 and pm8150l ldo8 supplies.
    
    Fixes: 06369bcc15a1 ("regulator: qcom-rpmh: Add support for SM8150")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Tested-by: Vinod Koul <vkoul@kernel.org>
    Reviewed-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20200415053708.717623-1-bjorn.andersson@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22a7346168245d846a538241eed0c66a7ebaf751
Author: Jaehoon Chung <jh80.chung@samsung.com>
Date:   Mon Mar 30 14:25:28 2020 +0900

    brcmfmac: fix wrong location to get firmware feature
    
    [ Upstream commit c57673852062428cdeabdd6501ac8b8e4c302067 ]
    
    sup_wpa feature is getting after setting feature_disable flag.
    If firmware is supported sup_wpa feature,  it's always enabled
    regardless of feature_disable flag.
    
    Fixes: b8a64f0e96c2 ("brcmfmac: support 4-way handshake offloading for WPA/WPA2-PSK")
    Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200330052528.10503-1-jh80.chung@samsung.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90e5154c737cf1c5fca53ce47354346e13df8942
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Apr 13 21:04:06 2020 +0300

    spi: Respect DataBitLength field of SpiSerialBusV2() ACPI resource
    
    [ Upstream commit 0dadde344d965566589cd82797893d5aa06557a3 ]
    
    By unknown reason the commit 64bee4d28c9e
      ("spi / ACPI: add ACPI enumeration support")
    missed the DataBitLength property to encounter when parse SPI slave
    device data from ACPI.
    
    Fill the gap here.
    
    Fixes: 64bee4d28c9e ("spi / ACPI: add ACPI enumeration support")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20200413180406.1826-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42c22e4834c265073a89b1eeee1131a1b19dfe22
Author: Bingbu Cao <bingbu.cao@intel.com>
Date:   Thu Mar 26 15:54:37 2020 +0100

    media: staging/intel-ipu3: Implement lock for stream on/off operations
    
    [ Upstream commit 33e3c349b2bf1235be458df09fb8d237141486c4 ]
    
    Currently concurrent stream off operations on ImgU nodes are not
    synchronized, leading to use-after-free bugs (as reported by KASAN).
    
    [  250.090724] BUG: KASAN: use-after-free in
    ipu3_dmamap_free+0xc5/0x116 [ipu3_imgu]
    [  250.090726] Read of size 8 at addr ffff888127b29bc0 by task
    yavta/18836
    [  250.090731] Hardware name: HP Soraka/Soraka, BIOS
    Google_Soraka.10431.17.0 03/22/2018
    [  250.090732] Call Trace:
    [  250.090735]  dump_stack+0x6a/0xb1
    [  250.090739]  print_address_description+0x8e/0x279
    [  250.090743]  ? ipu3_dmamap_free+0xc5/0x116 [ipu3_imgu]
    [  250.090746]  kasan_report+0x260/0x28a
    [  250.090750]  ipu3_dmamap_free+0xc5/0x116 [ipu3_imgu]
    [  250.090754]  ipu3_css_pool_cleanup+0x24/0x37 [ipu3_imgu]
    [  250.090759]  ipu3_css_pipeline_cleanup+0x61/0xb9 [ipu3_imgu]
    [  250.090763]  ipu3_css_stop_streaming+0x1f2/0x321 [ipu3_imgu]
    [  250.090768]  imgu_s_stream+0x94/0x443 [ipu3_imgu]
    [  250.090772]  ? ipu3_vb2_buf_queue+0x280/0x280 [ipu3_imgu]
    [  250.090775]  ? vb2_dma_sg_unmap_dmabuf+0x16/0x6f [videobuf2_dma_sg]
    [  250.090778]  ? vb2_buffer_in_use+0x36/0x58 [videobuf2_common]
    [  250.090782]  ipu3_vb2_stop_streaming+0xf9/0x135 [ipu3_imgu]
    
    Implemented a lock to synchronize imgu stream on / off operations and
    the modification of streaming flag (in struct imgu_device), to prevent
    these issues.
    
    Reported-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Suggested-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Rajmohan Mani <rajmohan.mani@intel.com>
    Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfc0ee2b31f846e41b05613079feeb9b2e4f7f83
Author: Venkateswara Naralasetty <vnaralas@codeaurora.org>
Date:   Wed Apr 1 15:48:10 2020 +0530

    ath10k: fix kernel null pointer dereference
    
    [ Upstream commit acb31476adc9ff271140cdd4d3c707ff0c97f5a4 ]
    
    Currently sta airtime is updated without any lock in case of
    host based airtime calculation. Which may result in accessing the
    invalid sta pointer in case of continuous station connect/disconnect.
    
    This patch fix the kernel null pointer dereference by updating the
    station airtime with proper RCU lock in case of host based airtime
    calculation.
    
    Proceeding with the analysis of "ARM Kernel Panic".
    The APSS crash happened due to OOPS on CPU 0.
    Crash Signature : Unable to handle kernel NULL pointer dereference
    at virtual address 00000300
    During the crash,
    PC points to "ieee80211_sta_register_airtime+0x1c/0x448 [mac80211]"
    LR points to "ath10k_txrx_tx_unref+0x17c/0x364 [ath10k_core]".
    The Backtrace obtained is as follows:
    [<bf880238>] (ieee80211_sta_register_airtime [mac80211]) from
    [<bf945a38>] (ath10k_txrx_tx_unref+0x17c/0x364 [ath10k_core])
    [<bf945a38>] (ath10k_txrx_tx_unref [ath10k_core]) from
    [<bf9428e4>] (ath10k_htt_txrx_compl_task+0xa50/0xfc0 [ath10k_core])
    [<bf9428e4>] (ath10k_htt_txrx_compl_task [ath10k_core]) from
    [<bf9b9bc8>] (ath10k_pci_napi_poll+0x50/0xf8 [ath10k_pci])
    [<bf9b9bc8>] (ath10k_pci_napi_poll [ath10k_pci]) from
    [<c059e3b0>] (net_rx_action+0xac/0x160)
    [<c059e3b0>] (net_rx_action) from [<c02329a4>] (__do_softirq+0x104/0x294)
    [<c02329a4>] (__do_softirq) from [<c0232b64>] (run_ksoftirqd+0x30/0x90)
    [<c0232b64>] (run_ksoftirqd) from [<c024e358>] (smpboot_thread_fn+0x25c/0x274)
    [<c024e358>] (smpboot_thread_fn) from [<c02482fc>] (kthread+0xd8/0xec)
    
    Tested HW: QCA9888
    Tested FW: 10.4-3.10-00047
    
    Signed-off-by: Venkateswara Naralasetty <vnaralas@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1585736290-17661-1-git-send-email-vnaralas@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76ecfcfefe3b38cb5cf8dc1b751a6a0d51c5554a
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jun 1 21:50:23 2020 -0700

    staging: android: ion: use vmap instead of vm_map_ram
    
    [ Upstream commit 5bf9917452112694b2c774465ee4dbe441c84b77 ]
    
    vm_map_ram can keep mappings around after the vm_unmap_ram.  Using that
    with non-PAGE_KERNEL mappings can lead to all kinds of aliasing issues.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Gao Xiang <xiang@kernel.org>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Kelley <mikelley@microsoft.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Sakari Ailus <sakari.ailus@linux.intel.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Wei Liu <wei.liu@kernel.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Paul Mackerras <paulus@ozlabs.org>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: http://lkml.kernel.org/r/20200414131348.444715-4-hch@lst.de
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ec7b42f17470cb2863c74311de2c9647176d017
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jun 1 21:50:19 2020 -0700

    x86: fix vmap arguments in map_irq_stack
    
    [ Upstream commit 0348801151b5aefbcf9d6e9b9e30aceb3a2a7b13 ]
    
    vmap does not take a gfp_t, the flags argument is for VM_* flags.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Gao Xiang <xiang@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Kelley <mikelley@microsoft.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Sakari Ailus <sakari.ailus@linux.intel.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Wei Liu <wei.liu@kernel.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Paul Mackerras <paulus@ozlabs.org>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: http://lkml.kernel.org/r/20200414131348.444715-3-hch@lst.de
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ece6218eea3a2bcc3eb94392d845d3fd02c59fe8
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sat May 30 10:41:50 2020 +0800

    net: vmxnet3: fix possible buffer overflow caused by bad DMA value in vmxnet3_get_rss()
    
    [ Upstream commit 3e1c6846b9e108740ef8a37be80314053f5dd52a ]
    
    The value adapter->rss_conf is stored in DMA memory, and it is assigned
    to rssConf, so rssConf->indTableSize can be modified at anytime by
    malicious hardware. Because rssConf->indTableSize is assigned to n,
    buffer overflow may occur when the code "rssConf->indTable[n]" is
    executed.
    
    To fix this possible bug, n is checked after being used.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af510d6fd690cfac2ed39ba9f89f7a4c24d2e51f
Author: Jon Doron <arilou@gmail.com>
Date:   Fri Apr 24 14:37:40 2020 +0300

    x86/kvm/hyper-v: Explicitly align hcall param for kvm_hyperv_exit
    
    [ Upstream commit f7d31e65368aeef973fab788aa22c4f1d5a6af66 ]
    
    The problem the patch is trying to address is the fact that 'struct
    kvm_hyperv_exit' has different layout on when compiling in 32 and 64 bit
    modes.
    
    In 64-bit mode the default alignment boundary is 64 bits thus
    forcing extra gaps after 'type' and 'msr' but in 32-bit mode the
    boundary is at 32 bits thus no extra gaps.
    
    This is an issue as even when the kernel is 64 bit, the userspace using
    the interface can be both 32 and 64 bit but the same 32 bit userspace has
    to work with 32 bit kernel.
    
    The issue is fixed by forcing the 64 bit layout, this leads to ABI
    change for 32 bit builds and while we are obviously breaking '32 bit
    userspace with 32 bit kernel' case, we're fixing the '32 bit userspace
    with 64 bit kernel' one.
    
    As the interface has no (known) users and 32 bit KVM is rather baroque
    nowadays, this seems like a reasonable decision.
    
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Jon Doron <arilou@gmail.com>
    Message-Id: <20200424113746.3473563-2-arilou@gmail.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd18ecbbc7aa9f3369e4608fd839bf37fe70b5f4
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Fri May 29 16:11:57 2020 +0300

    spi: dw: Fix Rx-only DMA transfers
    
    [ Upstream commit 46164fde6b7890e7a3982d54549947c8394c0192 ]
    
    Tx-only DMA transfers are working perfectly fine since in this case
    the code just ignores the Rx FIFO overflow interrupts. But it turns
    out the SPI Rx-only transfers are broken since nothing pushing any
    data to the shift registers, so the Rx FIFO is left empty and the
    SPI core subsystems just returns a timeout error. Since DW DMAC
    driver doesn't support something like cyclic write operations of
    a single byte to a device register, the only way to support the
    Rx-only SPI transfers is to fake it by using a dummy Tx-buffer.
    This is what we intend to fix in this commit by setting the
    SPI_CONTROLLER_MUST_TX flag for DMA-capable platform.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Georgy Vlasov <Georgy.Vlasov@baikalelectronics.ru>
    Cc: Ramil Zaripov <Ramil.Zaripov@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Link: https://lore.kernel.org/r/20200529131205.31838-9-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 999b59be5d203899ecf18ee0018a0a1ddd1a28f0
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri May 29 10:27:26 2020 +0800

    Bluetooth: btmtkuart: Improve exception handling in btmtuart_probe()
    
    [ Upstream commit 4803c54ca24923a30664bea2a7772db6e7303c51 ]
    
    Calls of the functions clk_disable_unprepare() and hci_free_dev()
    were missing for the exception handling.
    Thus add the missed function calls together with corresponding
    jump targets.
    
    Fixes: 055825614c6b ("Bluetooth: btmtkuart: add an implementation for clock osc property")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2daf747c2831c39026b0194d4fd9871d182a2069
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Mon May 4 00:28:05 2020 +0200

    mmc: meson-mx-sdio: trigger a soft reset after a timeout or CRC error
    
    [ Upstream commit 91995b904ec2e44b5c159ac6a5d3f154345a4de7 ]
    
    The vendor driver (from the 3.10 kernel) triggers a soft reset every
    time before starting a new command. While this fixes a problem where
    SDIO cards are not detected at all (because all commands simply
    timed out) this hurts SD card read performance a bit (in my tests
    between 10% to 20%).
    
    Trigger a soft reset after we got a CRC error or if the previous command
    timed out (just like the vendor driver from the same 3.10 kernel for the
    newer SDHC controller IP does). This fixes detection of SDIO cards and
    doesn't hurt SD card read performance at the same time.
    
    With this patch the initialization of an RTL8723BS SDIO card looks like
    this:
      req done (CMD52): -110: 00000000 00000000 00000000 00000000
      clock 400000Hz busmode 2 powermode 2 cs 1 Vdd 21 width 1 timing 0
      starting CMD0 arg 00000000 flags 000000c0
      req done (CMD0): 0: 00000000 00000000 00000000 00000000
      clock 400000Hz busmode 2 powermode 2 cs 0 Vdd 21 width 1 timing 0
      starting CMD8 arg 000001aa flags 000002f5
      req done (CMD8): -110: 00000000 00000000 00000000 00000000
      starting CMD5 arg 00000000 flags 000002e1
      req done (CMD5): 0: 90ff0000 00000000 00000000 00000000
      starting CMD5 arg 00200000 flags 000002e1
      req done (CMD5): 0: 90ff0000 00000000 00000000 00000000
      starting CMD3 arg 00000000 flags 00000075
      req done (CMD3): 0: 00010000 00000000 00000000 00000000
      starting CMD7 arg 00010000 flags 00000015
      req done (CMD7): 0: 00001e00 00000000 00000000 00000000
      starting CMD52 arg 00000000 flags 00000195
      req done (CMD52): 0: 00001032 00000000 00000000 00000000
      [... more CMD52 omitted ...]
      clock 400000Hz busmode 2 powermode 2 cs 0 Vdd 21 width 1 timing 2
      clock 50000000Hz busmode 2 powermode 2 cs 0 Vdd 21 width 1 timing 2
      starting CMD52 arg 00000e00 flags 00000195
      req done (CMD52): 0: 00001000 00000000 00000000 00000000
      starting CMD52 arg 80000e02 flags 00000195
      req done (CMD52): 0: 00001002 00000000 00000000 00000000
      clock 50000000Hz busmode 2 powermode 2 cs 0 Vdd 21 width 4 timing 2
      starting CMD52 arg 00020000 flags 00000195
      req done (CMD52): 0: 00001007 00000000 00000000 00000000
      [... more CMD52 omitted ...]
      new high speed SDIO card at address 0001
    
    Fixes: ed80a13bb4c4c9 ("mmc: meson-mx-sdio: Add a driver for the Amlogic Meson8 and Meson8b SoCs")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20200503222805.2668941-1-martin.blumenstingl@googlemail.com
    Tested-by: Tobias Baumann <017623705678@o2online.de>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8046645806621bb0c7d9f7590a9aaa8a857257de
Author: Surabhi Boob <surabhi.boob@intel.com>
Date:   Fri May 15 17:36:43 2020 -0700

    ice: Fix for memory leaks and modify ICE_FREE_CQ_BUFS
    
    [ Upstream commit 68d270783742783f96e89ef92ac24ab3c7fb1d31 ]
    
    Handle memory leaks during control queue initialization and
    buffer allocation failures. The macro ICE_FREE_CQ_BUFS is modified to
    re-use for this fix.
    
    Signed-off-by: Surabhi Boob <surabhi.boob@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9b54595642135d9c472fc865667e99e1fef3671
Author: Surabhi Boob <surabhi.boob@intel.com>
Date:   Fri May 15 17:36:42 2020 -0700

    ice: Fix memory leak
    
    [ Upstream commit 1aaef2bc4e0a5ce9e4dd86359e6a0bf52c6aa64f ]
    
    Handle memory leak on filter management initialization failure.
    
    Signed-off-by: Surabhi Boob <surabhi.boob@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f503e7fe3099a740741088f57993edecb13524ef
Author: Sven Eckelmann <sven@narfation.org>
Date:   Mon Nov 25 10:46:50 2019 +0100

    batman-adv: Revert "disable ethtool link speed detection when auto negotiation off"
    
    [ Upstream commit 9ad346c90509ebd983f60da7d082f261ad329507 ]
    
    The commit 8c46fcd78308 ("batman-adv: disable ethtool link speed detection
    when auto negotiation off") disabled the usage of ethtool's link_ksetting
    when auto negotation was enabled due to invalid values when used with
    tun/tap virtual net_devices. According to the patch, automatic measurements
    should be used for these kind of interfaces.
    
    But there are major flaws with this argumentation:
    
    * automatic measurements are not implemented
    * auto negotiation has nothing to do with the validity of the retrieved
      values
    
    The first point has to be fixed by a longer patch series. The "validity"
    part of the second point must be addressed in the same patch series by
    dropping the usage of ethtool's link_ksetting (thus always doing automatic
    measurements over ethernet).
    
    Drop the patch again to have more default values for various net_device
    types/configurations. The user can still overwrite them using the
    batadv_hardif's BATADV_ATTR_THROUGHPUT_OVERRIDE.
    
    Reported-by: Matthias Schiffer <mschiffer@universe-factory.net>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cf93ef213f9c335e38db44a2c0b5ed44a146ec7
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue May 19 12:59:12 2020 +0100

    ARM: 8978/1: mm: make act_mm() respect THREAD_SIZE
    
    [ Upstream commit e1de94380af588bdf6ad6f0cc1f75004c35bc096 ]
    
    Recent work with KASan exposed the folling hard-coded bitmask
    in arch/arm/mm/proc-macros.S:
    
      bic     rd, sp, #8128
      bic     rd, rd, #63
    
    This forms the bitmask 0x1FFF that is coinciding with
    (PAGE_SIZE << THREAD_SIZE_ORDER) - 1, this code was assuming
    that THREAD_SIZE is always 8K (8192).
    
    As KASan was increasing THREAD_SIZE_ORDER to 2, I ran into
    this bug.
    
    Fix it by this little oneline suggested by Ard:
    
      bic     rd, sp, #(THREAD_SIZE - 1) & ~63
    
    Where THREAD_SIZE is defined using THREAD_SIZE_ORDER.
    
    We have to also include <linux/const.h> since the THREAD_SIZE
    expands to use the _AC() macro.
    
    Cc: Ard Biesheuvel <ardb@kernel.org>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Suggested-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a005026102e1bc337718a4a9812b6fdd5d9a712
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon May 18 12:15:09 2020 +0100

    btrfs: do not ignore error from btrfs_next_leaf() when inserting checksums
    
    [ Upstream commit 7e4a3f7ed5d54926ec671bbb13e171cfe179cc50 ]
    
    We are currently treating any non-zero return value from btrfs_next_leaf()
    the same way, by going to the code that inserts a new checksum item in the
    tree. However if btrfs_next_leaf() returns an error (a value < 0), we
    should just stop and return the error, and not behave as if nothing has
    happened, since in that case we do not have a way to know if there is a
    next leaf or we are currently at the last leaf already.
    
    So fix that by returning the error from btrfs_next_leaf().
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bb51c966b9f39ba8121f1548d85577efb9b6c03
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Mar 13 15:58:07 2020 -0400

    btrfs: account for trans_block_rsv in may_commit_transaction
    
    [ Upstream commit bb4f58a747f0421b10645fbf75a6acc88da0de50 ]
    
    On ppc64le with 64k page size (respectively 64k block size) generic/320
    was failing and debug output showed we were getting a premature ENOSPC
    with a bunch of space in btrfs_fs_info::trans_block_rsv.
    
    This meant there were still open transaction handles holding space, yet
    the flusher didn't commit the transaction because it deemed the freed
    space won't be enough to satisfy the current reserve ticket. Fix this
    by accounting for space in trans_block_rsv when deciding whether the
    current transaction should be committed or not.
    
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb0ee3f03f0b30c1e5def9aea5f73cd771a8a1b3
Author: Brad Love <brad@nextdimension.cc>
Date:   Thu May 14 18:40:43 2020 +0200

    media: dvbdev: Fix tuner->demod media controller link
    
    [ Upstream commit 9f984cacf4f4d53fd8a3f44d7f13528b81c1f6a8 ]
    
    Fixes bug exposed by:
    
    [a3fbc2e6bb0: media: mc-entity.c: use WARN_ON, validate link pads]
    
    The dvbdev incorrectly requests a tuner sink pad to connect to a demux
    sink pad. The media controller failure percolates back and the dvb device
    creation fails. Fix this by requesting a tuner source pad. Instead of
    forcing that pad to be index zero, check if a negative integer error
    is returned. A note is added that first source pad found is chosen.
    
    Affected bridges cx231xx and em28xx printed the below warning[s]
    when a variety of media controller dvb enabled devices were connected.
    The warning returns an error causing all affected devices to fail DVB
    device creation.
    
    [  253.138332] ------------[ cut here ]------------
    [  253.138339] WARNING: CPU: 0 PID: 1550 at drivers/media/mc/mc-entity.c:669 media_create_pad_link+0x1e0/0x200 [mc]
    [  253.138339] Modules linked in: si2168 em28xx_dvb(+) em28xx si2157 lgdt3306a cx231xx_dvb dvb_core cx231xx_alsa cx25840 cx231xx tveeprom cx2341x i2c_mux videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_common videodev mc ir_rc5_decoder rc_hauppauge mceusb rc_core eda
    c_mce_amd kvm nls_iso8859_1 crct10dif_pclmul crc32_pclmul ghash_clmulni_intel aesni_intel crypto_simd cryptd glue_helper efi_pstore wmi_bmof k10temp asix usbnet mii nouveau snd_hda_codec_realtek snd_hda_codec_generic input_leds ledtrig_audio snd_hda_codec_hdmi mxm_wmi snd_hda_in
    tel video snd_intel_dspcfg ttm snd_hda_codec drm_kms_helper snd_hda_core drm snd_hwdep snd_seq_midi snd_seq_midi_event i2c_algo_bit snd_pcm snd_rawmidi fb_sys_fops snd_seq syscopyarea sysfillrect snd_seq_device sysimgblt snd_timer snd soundcore ccp mac_hid sch_fq_codel parport_p
    c ppdev lp parport ip_tables x_tables autofs4 vfio_pci irqbypass vfio_virqfd vfio_iommu_type1 vfio hid_generic usbhid hid i2c_piix4 ahci libahci wmi gpio_amdpt
    [  253.138370]  gpio_generic
    [  253.138372] CPU: 0 PID: 1550 Comm: modprobe Tainted: G        W         5.7.0-rc2+ #181
    [  253.138373] Hardware name: MSI MS-7A39/B350M GAMING PRO (MS-7A39), BIOS 2.G0 04/27/2018
    [  253.138376] RIP: 0010:media_create_pad_link+0x1e0/0x200 [mc]
    [  253.138378] Code: 26 fd ff ff 44 8b 4d d0 eb d9 0f 0b 41 b9 ea ff ff ff 44 89 c8 c3 0f 0b 41 b9 ea ff ff ff eb f2 0f 0b 41 b9 ea ff ff ff eb e8 <0f> 0b 41 b9 ea ff ff ff eb af 0f 0b 41 b9 ea ff ff ff eb a5 66 90
    [  253.138379] RSP: 0018:ffffb9ecc0ee7a78 EFLAGS: 00010246
    [  253.138380] RAX: ffff943f706c99d8 RBX: 0000000000000000 RCX: 0000000000000000
    [  253.138381] RDX: ffff943f613e0180 RSI: 0000000000000000 RDI: ffff943f706c9958
    [  253.138381] RBP: ffffb9ecc0ee7ab0 R08: 0000000000000001 R09: ffff943f613e0180
    [  253.138382] R10: ffff943f613e0180 R11: ffff943f706c9400 R12: 0000000000000000
    [  253.138383] R13: 0000000000000001 R14: ffff943f706c9958 R15: 0000000000000001
    [  253.138384] FS:  00007f3cd29ba540(0000) GS:ffff943f8ec00000(0000) knlGS:0000000000000000
    [  253.138385] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  253.138385] CR2: 000055f7de0ca830 CR3: 00000003dd208000 CR4: 00000000003406f0
    [  253.138386] Call Trace:
    [  253.138392]  media_create_pad_links+0x104/0x1b0 [mc]
    [  253.138397]  dvb_create_media_graph+0x350/0x5f0 [dvb_core]
    [  253.138402]  em28xx_dvb_init+0x5ea/0x2600 [em28xx_dvb]
    [  253.138408]  em28xx_register_extension+0x63/0xc0 [em28xx]
    [  253.138410]  ? 0xffffffffc039c000
    [  253.138412]  em28xx_dvb_register+0x15/0x1000 [em28xx_dvb]
    [  253.138416]  do_one_initcall+0x71/0x250
    [  253.138418]  ? do_init_module+0x27/0x22e
    [  253.138421]  ? _cond_resched+0x1a/0x50
    [  253.138423]  ? kmem_cache_alloc_trace+0x1ec/0x270
    [  253.138425]  ? __vunmap+0x1e3/0x240
    [  253.138427]  do_init_module+0x5f/0x22e
    [  253.138430]  load_module+0x2525/0x2d40
    [  253.138436]  __do_sys_finit_module+0xe5/0x120
    [  253.138438]  ? __do_sys_finit_module+0xe5/0x120
    [  253.138442]  __x64_sys_finit_module+0x1a/0x20
    [  253.138443]  do_syscall_64+0x57/0x1b0
    [  253.138445]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  253.138446] RIP: 0033:0x7f3cd24dc839
    [  253.138448] Code: 00 f3 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 1f f6 2c 00 f7 d8 64 89 01 48
    [  253.138449] RSP: 002b:00007ffe4fc514d8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    [  253.138450] RAX: ffffffffffffffda RBX: 000055a9237f63f0 RCX: 00007f3cd24dc839
    [  253.138451] RDX: 0000000000000000 RSI: 000055a922c3ad2e RDI: 0000000000000000
    [  253.138451] RBP: 000055a922c3ad2e R08: 0000000000000000 R09: 0000000000000000
    [  253.138452] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    [  253.138453] R13: 000055a9237f5550 R14: 0000000000040000 R15: 000055a9237f63f0
    [  253.138456] ---[ end trace a60f19c54aa96ec4 ]---
    
    [  234.915628] ------------[ cut here ]------------
    [  234.915640] WARNING: CPU: 0 PID: 1502 at drivers/media/mc/mc-entity.c:669 media_create_pad_link+0x1e0/0x200 [mc]
    [  234.915641] Modules linked in: si2157 lgdt3306a cx231xx_dvb(+) dvb_core cx231xx_alsa cx25840 cx231xx tveeprom cx2341x i2c_mux videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_common videodev mc ir_rc5_decoder rc_hauppauge mceusb rc_core edac_mce_amd kvm nls_iso8859
    _1 crct10dif_pclmul crc32_pclmul ghash_clmulni_intel aesni_intel crypto_simd cryptd glue_helper efi_pstore wmi_bmof k10temp asix usbnet mii nouveau snd_hda_codec_realtek snd_hda_codec_generic input_leds ledtrig_audio snd_hda_codec_hdmi mxm_wmi snd_hda_intel video snd_intel_dspcf
    g ttm snd_hda_codec drm_kms_helper snd_hda_core drm snd_hwdep snd_seq_midi snd_seq_midi_event i2c_algo_bit snd_pcm snd_rawmidi fb_sys_fops snd_seq syscopyarea sysfillrect snd_seq_device sysimgblt snd_timer snd soundcore ccp mac_hid sch_fq_codel parport_pc ppdev lp parport ip_tab
    les x_tables autofs4 vfio_pci irqbypass vfio_virqfd vfio_iommu_type1 vfio hid_generic usbhid hid i2c_piix4 ahci libahci wmi gpio_amdpt gpio_generic
    [  234.915700] CPU: 0 PID: 1502 Comm: modprobe Not tainted 5.7.0-rc2+ #181
    [  234.915702] Hardware name: MSI MS-7A39/B350M GAMING PRO (MS-7A39), BIOS 2.G0 04/27/2018
    [  234.915709] RIP: 0010:media_create_pad_link+0x1e0/0x200 [mc]
    [  234.915712] Code: 26 fd ff ff 44 8b 4d d0 eb d9 0f 0b 41 b9 ea ff ff ff 44 89 c8 c3 0f 0b 41 b9 ea ff ff ff eb f2 0f 0b 41 b9 ea ff ff ff eb e8 <0f> 0b 41 b9 ea ff ff ff eb af 0f 0b 41 b9 ea ff ff ff eb a5 66 90
    [  234.915714] RSP: 0018:ffffb9ecc1b6fa50 EFLAGS: 00010246
    [  234.915717] RAX: ffff943f8c94a9d8 RBX: 0000000000000000 RCX: 0000000000000000
    [  234.915719] RDX: ffff943f613e0900 RSI: 0000000000000000 RDI: ffff943f8c94a958
    [  234.915721] RBP: ffffb9ecc1b6fa88 R08: 0000000000000001 R09: ffff943f613e0900
    [  234.915723] R10: ffff943f613e0900 R11: ffff943f6b590c00 R12: 0000000000000000
    [  234.915724] R13: 0000000000000001 R14: ffff943f8c94a958 R15: 0000000000000001
    [  234.915727] FS:  00007f4ca3646540(0000) GS:ffff943f8ec00000(0000) knlGS:0000000000000000
    [  234.915729] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  234.915731] CR2: 00007fff7a53ba18 CR3: 00000003da614000 CR4: 00000000003406f0
    [  234.915733] Call Trace:
    [  234.915745]  media_create_pad_links+0x104/0x1b0 [mc]
    [  234.915756]  dvb_create_media_graph+0x350/0x5f0 [dvb_core]
    [  234.915766]  dvb_init.part.4+0x691/0x1360 [cx231xx_dvb]
    [  234.915780]  dvb_init+0x1a/0x20 [cx231xx_dvb]
    [  234.915787]  cx231xx_register_extension+0x71/0xa0 [cx231xx]
    [  234.915791]  ? 0xffffffffc042f000
    [  234.915796]  cx231xx_dvb_register+0x15/0x1000 [cx231xx_dvb]
    [  234.915802]  do_one_initcall+0x71/0x250
    [  234.915807]  ? do_init_module+0x27/0x22e
    [  234.915811]  ? _cond_resched+0x1a/0x50
    [  234.915816]  ? kmem_cache_alloc_trace+0x1ec/0x270
    [  234.915820]  ? __vunmap+0x1e3/0x240
    [  234.915826]  do_init_module+0x5f/0x22e
    [  234.915831]  load_module+0x2525/0x2d40
    [  234.915848]  __do_sys_finit_module+0xe5/0x120
    [  234.915850]  ? __do_sys_finit_module+0xe5/0x120
    [  234.915862]  __x64_sys_finit_module+0x1a/0x20
    [  234.915865]  do_syscall_64+0x57/0x1b0
    [  234.915870]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  234.915872] RIP: 0033:0x7f4ca3168839
    [  234.915876] Code: 00 f3 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 1f f6 2c 00 f7 d8 64 89 01 48
    [  234.915878] RSP: 002b:00007ffcea3db3b8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    [  234.915881] RAX: ffffffffffffffda RBX: 000055af22c29340 RCX: 00007f4ca3168839
    [  234.915882] RDX: 0000000000000000 RSI: 000055af22c38390 RDI: 0000000000000001
    [  234.915884] RBP: 000055af22c38390 R08: 0000000000000000 R09: 0000000000000000
    [  234.915885] R10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000000
    [  234.915887] R13: 000055af22c29060 R14: 0000000000040000 R15: 0000000000000000
    [  234.915896] ---[ end trace a60f19c54aa96ec3 ]---
    
    Signed-off-by: Brad Love <brad@nextdimension.cc>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bffe2c8e2303dfa1aa409745963c626ecb78ec89
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bd656984566dde3f3563dd4a3b6337ea44b1da4
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:13 2020 +0300

    clocksource: dw_apb_timer: Make CPU-affiliation being optional
    
    [ Upstream commit cee43dbf2ee3f430434e2b66994eff8a1aeda889 ]
    
    Currently the DW APB Timer driver binds each clockevent timers to a
    particular CPU. This isn't good for multiple reasons. First of all seeing
    the device is placed on APB bus (which makes it accessible from any CPU
    core), accessible over MMIO and having the DYNIRQ flag set we can be sure
    that manually binding the timer to any CPU just isn't correct. By doing
    so we just set an extra limitation on device usage. This also doesn't
    reflect the device actual capability, since by setting the IRQ affinity
    we can make it virtually local to any CPU. Secondly imagine if you had a
    real CPU-local timer with the same rating and the same CPU-affinity.
    In this case if DW APB timer was registered first, then due to the
    clockevent framework tick-timer selection procedure we'll end up with the
    real CPU-local timer being left unselected for clock-events tracking. But
    on most of the platforms (MIPS/ARM/etc) such timers are normally embedded
    into the CPU core and are accessible with much better performance then
    devices placed on APB. For instance in MIPS architectures there is
    r4k-timer, which is CPU-local, assigned with the same rating, and normally
    its clockevent device is registered after the platform-specific one.
    
    So in order to fix all of these issues let's make the DW APB Timer CPU
    affinity being optional and deactivated by passing a negative CPU id,
    which will effectively set the DW APB clockevent timer cpumask to
    'cpu_possible_mask'.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-5-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8ec0ae0f3cf77d3fe350ae2dabea0d60577a175
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Fri May 22 03:07:51 2020 +0300

    spi: dw: Enable interrupts in accordance with DMA xfer mode
    
    [ Upstream commit 43dba9f3f98c2b184a19f856f06fe22817bfd9e0 ]
    
    It's pointless to track the Tx overrun interrupts if Rx-only SPI
    transfer is issued. Similarly there is no need in handling the Rx
    overrun/underrun interrupts if Tx-only SPI transfer is executed.
    So lets unmask the interrupts only if corresponding SPI
    transactions are implied.
    
    Co-developed-by: Georgy Vlasov <Georgy.Vlasov@baikalelectronics.ru>
    Signed-off-by: Georgy Vlasov <Georgy.Vlasov@baikalelectronics.ru>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Ramil Zaripov <Ramil.Zaripov@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Link: https://lore.kernel.org/r/20200522000806.7381-3-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2683765887d04dbaa2635e77fc3f7a6d3839d90
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 17:07:16 2020 +0300

    mips: Fix cpu_has_mips64r1/2 activation for MIPS32 CPUs
    
    [ Upstream commit a2ac81c6ef4018ea49c034ce165bb9ea1cf99f3e ]
    
    Commit 1aeba347b3a9 ("MIPS: Hardcode cpu_has_mips* where target ISA
    allows") updated the cpu_has_mips* macro to be replaced with a constant
    expression where it's possible. By mistake it wasn't done correctly
    for cpu_has_mips64r1/cpu_has_mips64r2 macro. They are defined to
    be replaced with conditional expression __isa_range_or_flag(), which
    means either ISA revision being within the range or the corresponding
    CPU options flag was set at the probe stage or both being true at the
    same time. But the ISA level value doesn't indicate whether the ISA is
    MIPS32 or MIPS64. Due to this if we select MIPS32r1 - MIPS32r5
    architectures the __isa_range() macro will activate the
    cpu_has_mips64rX flags, which is incorrect. In order to fix the
    problem we make sure the 64bits CPU support is enabled by means of
    checking the flag cpu_has_64bits aside with proper ISA range and specific
    Revision flag being set.
    
    Fixes: 1aeba347b3a9 ("MIPS: Hardcode cpu_has_mips* where target ISA allows")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1d2d3dd016f3548c3bca9471e122b867c6b9327
Author: Tuan Phan <tuanphan@os.amperecomputing.com>
Date:   Wed May 20 10:13:07 2020 -0700

    ACPI/IORT: Fix PMCG node single ID mapping handling
    
    [ Upstream commit 50c8ab8d9fbf5b18d5162a797ca26568afc0af1a ]
    
    An IORT PMCG node can have no ID mapping if its overflow interrupt is
    wire based therefore the code that parses the PMCG node can not assume
    the node will always have a single mapping present at index 0.
    
    Fix iort_get_id_mapping_index() by checking for an overflow interrupt
    and mapping count.
    
    Fixes: 24e516049360 ("ACPI/IORT: Add support for PMCG")
    
    Signed-off-by: Tuan Phan <tuanphan@os.amperecomputing.com>
    Reviewed-by: Hanjun Guo <guoahanjun@huawei.com>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Link: https://lore.kernel.org/r/1589994787-28637-1-git-send-email-tuanphan@os.amperecomputing.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2ad0dc7b9e0d6f27d964e5978d4c5675196f55a
Author: Jean-Philippe Brucker <jean-philippe@linaro.org>
Date:   Wed Apr 22 10:48:06 2020 +0200

    pmu/smmuv3: Clear IRQ affinity hint on device removal
    
    [ Upstream commit 10f6cd2af21bb44faab31a50ec3361d7649e5a39 ]
    
    Currently when trying to remove the SMMUv3 PMU module we get a
    WARN_ON_ONCE from free_irq(), because the affinity hint set during probe
    hasn't been properly cleared.
    
    [  238.878383] WARNING: CPU: 0 PID: 175 at kernel/irq/manage.c:1744 free_irq+0x324/0x358
    ...
    [  238.897263] Call trace:
    [  238.897998]  free_irq+0x324/0x358
    [  238.898792]  devm_irq_release+0x18/0x28
    [  238.899189]  release_nodes+0x1b0/0x228
    [  238.899984]  devres_release_all+0x38/0x60
    [  238.900779]  device_release_driver_internal+0x10c/0x1d0
    [  238.901574]  driver_detach+0x50/0xe0
    [  238.902368]  bus_remove_driver+0x5c/0xd8
    [  238.903448]  driver_unregister+0x30/0x60
    [  238.903958]  platform_driver_unregister+0x14/0x20
    [  238.905075]  arm_smmu_pmu_exit+0x1c/0xecc [arm_smmuv3_pmu]
    [  238.905547]  __arm64_sys_delete_module+0x14c/0x260
    [  238.906342]  el0_svc_common.constprop.0+0x74/0x178
    [  238.907355]  do_el0_svc+0x24/0x90
    [  238.907932]  el0_sync_handler+0x11c/0x198
    [  238.908979]  el0_sync+0x158/0x180
    
    Just like the other perf drivers, clear the affinity hint before
    releasing the device.
    
    Fixes: 7d839b4b9e00 ("perf/smmuv3: Add arm64 smmuv3 pmu driver")
    Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Link: https://lore.kernel.org/r/20200422084805.237738-1-jean-philippe@linaro.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 308c2095da305f6fee76686616f5b35ecacfeb3b
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu May 7 13:08:44 2020 -0700

    kgdb: Prevent infinite recursive entries to the debugger
    
    [ Upstream commit 3ca676e4ca60d1834bb77535dafe24169cadacef ]
    
    If we detect that we recursively entered the debugger we should hack
    our I/O ops to NULL so that the panic() in the next line won't
    actually cause another recursion into the debugger.  The first line of
    kgdb_panic() will check this and return.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Link: https://lore.kernel.org/r/20200507130644.v4.6.I89de39f68736c9de610e6f241e68d8dbc44bc266@changeid
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1343e0a85941b0061333c2cd3787b167f31a3d6d
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu May 7 13:08:39 2020 -0700

    kgdb: Disable WARN_CONSOLE_UNLOCKED for all kgdb
    
    [ Upstream commit 202164fbfa2b2ffa3e66b504e0f126ba9a745006 ]
    
    In commit 81eaadcae81b ("kgdboc: disable the console lock when in
    kgdb") we avoided the WARN_CONSOLE_UNLOCKED() yell when we were in
    kgdboc.  That still works fine, but it turns out that we get a similar
    yell when using other I/O drivers.  One example is the "I/O driver"
    for the kgdb test suite (kgdbts).  When I enabled that I again got the
    same yells.
    
    Even though "kgdbts" doesn't actually interact with the user over the
    console, using it still causes kgdb to print to the consoles.  That
    trips the same warning:
      con_is_visible+0x60/0x68
      con_scroll+0x110/0x1b8
      lf+0x4c/0xc8
      vt_console_print+0x1b8/0x348
      vkdb_printf+0x320/0x89c
      kdb_printf+0x68/0x90
      kdb_main_loop+0x190/0x860
      kdb_stub+0x2cc/0x3ec
      kgdb_cpu_enter+0x268/0x744
      kgdb_handle_exception+0x1a4/0x200
      kgdb_compiled_brk_fn+0x34/0x44
      brk_handler+0x7c/0xb8
      do_debug_exception+0x1b4/0x228
    
    Let's increment/decrement the "ignore_console_lock_warning" variable
    all the time when we enter the debugger.
    
    This will allow us to later revert commit 81eaadcae81b ("kgdboc:
    disable the console lock when in kgdb").
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Link: https://lore.kernel.org/r/20200507130644.v4.1.Ied2b058357152ebcc8bf68edd6f20a11d98d7d4e@changeid
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c79bf440d35c3838d6d818722cbd566d0d3ac93
Author: Hsin-Yu Chao <hychao@chromium.org>
Date:   Fri May 15 17:27:04 2020 +0800

    Bluetooth: Add SCO fallback for invalid LMP parameters error
    
    [ Upstream commit 56b5453a86203a44726f523b4133c1feca49ce7c ]
    
    Bluetooth PTS test case HFP/AG/ACC/BI-12-I accepts SCO connection
    with invalid parameter at the first SCO request expecting AG to
    attempt another SCO request with the use of "safe settings" for
    given codec, base on section 5.7.1.2 of HFP 1.7 specification.
    
    This patch addresses it by adding "Invalid LMP Parameters" (0x1e)
    to the SCO fallback case. Verified with below log:
    
    < HCI Command: Setup Synchronous Connection (0x01|0x0028) plen 17
            Handle: 256
            Transmit bandwidth: 8000
            Receive bandwidth: 8000
            Max latency: 13
            Setting: 0x0003
              Input Coding: Linear
              Input Data Format: 1's complement
              Input Sample Size: 8-bit
              # of bits padding at MSB: 0
              Air Coding Format: Transparent Data
            Retransmission effort: Optimize for link quality (0x02)
            Packet type: 0x0380
              3-EV3 may not be used
              2-EV5 may not be used
              3-EV5 may not be used
    > HCI Event: Command Status (0x0f) plen 4
          Setup Synchronous Connection (0x01|0x0028) ncmd 1
            Status: Success (0x00)
    > HCI Event: Number of Completed Packets (0x13) plen 5
            Num handles: 1
            Handle: 256
            Count: 1
    > HCI Event: Max Slots Change (0x1b) plen 3
            Handle: 256
            Max slots: 1
    > HCI Event: Synchronous Connect Complete (0x2c) plen 17
            Status: Invalid LMP Parameters / Invalid LL Parameters (0x1e)
            Handle: 0
            Address: 00:1B:DC:F2:21:59 (OUI 00-1B-DC)
            Link type: eSCO (0x02)
            Transmission interval: 0x00
            Retransmission window: 0x02
            RX packet length: 0
            TX packet length: 0
            Air mode: Transparent (0x03)
    < HCI Command: Setup Synchronous Connection (0x01|0x0028) plen 17
            Handle: 256
            Transmit bandwidth: 8000
            Receive bandwidth: 8000
            Max latency: 8
            Setting: 0x0003
              Input Coding: Linear
              Input Data Format: 1's complement
              Input Sample Size: 8-bit
              # of bits padding at MSB: 0
              Air Coding Format: Transparent Data
            Retransmission effort: Optimize for link quality (0x02)
            Packet type: 0x03c8
              EV3 may be used
              2-EV3 may not be used
              3-EV3 may not be used
              2-EV5 may not be used
              3-EV5 may not be used
    > HCI Event: Command Status (0x0f) plen 4
          Setup Synchronous Connection (0x01|0x0028) ncmd 1
            Status: Success (0x00)
    > HCI Event: Max Slots Change (0x1b) plen 3
            Handle: 256
            Max slots: 5
    > HCI Event: Max Slots Change (0x1b) plen 3
            Handle: 256
            Max slots: 1
    > HCI Event: Synchronous Connect Complete (0x2c) plen 17
            Status: Success (0x00)
            Handle: 257
            Address: 00:1B:DC:F2:21:59 (OUI 00-1B-DC)
            Link type: eSCO (0x02)
            Transmission interval: 0x06
            Retransmission window: 0x04
            RX packet length: 30
            TX packet length: 30
            Air mode: Transparent (0x03)
    
    Signed-off-by: Hsin-Yu Chao <hychao@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 461b239e3a739236798e0e3c174955e55f8a8f02
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Sat May 16 10:15:48 2020 +0800

    MIPS: Loongson: Build ATI Radeon GPU driver as module
    
    [ Upstream commit a44de7497f91834df0b8b6d459e259788ba66794 ]
    
    When ATI Radeon GPU driver has been compiled directly into the kernel
    instead of as a module, we should make sure the firmware for the model
    (check available ones in /lib/firmware/radeon) is built-in to the kernel
    as well, otherwise there exists the following fatal error during GPU init,
    change CONFIG_DRM_RADEON=y to CONFIG_DRM_RADEON=m to fix it.
    
    [    1.900997] [drm] Loading RS780 Microcode
    [    1.905077] radeon 0000:01:05.0: Direct firmware load for radeon/RS780_pfp.bin failed with error -2
    [    1.914140] r600_cp: Failed to load firmware "radeon/RS780_pfp.bin"
    [    1.920405] [drm:r600_init] *ERROR* Failed to load firmware!
    [    1.926069] radeon 0000:01:05.0: Fatal error during GPU init
    [    1.931729] [drm] radeon: finishing device.
    
    Fixes: 024e6a8b5bb1 ("MIPS: Loongson: Add a Loongson-3 default config file")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 544a3a292d8ec827625e64094ac5ae05d6608c18
Author: Koba Ko <koba.ko@canonical.com>
Date:   Mon May 11 09:44:56 2020 +0800

    platform/x86: dell-laptop: don't register micmute LED if there is no token
    
    [ Upstream commit 257e03a334ccb96e657bf5f6ab3b5693a22c2aa4 ]
    
    On Dell G3-3590, error message is issued during boot up,
    "platform::micmute: Setting an LED's brightness failed (-19)",
    but there's no micmute led on the machine.
    
    Get the related tokens of SMBIOS, GLOBAL_MIC_MUTE_DISABLE/ENABLE.
    If one of two tokens doesn't exist,
    don't call led_classdev_register() for platform::micmute.
    After that, you wouldn't see the platform::micmute in /sys/class/leds/,
    and the error message wouldn't see in dmesg.
    
    Fixes: d00fa46e0a2c6 ("platform/x86: dell-laptop: Add micmute LED trigger support")
    Signed-off-by: Koba Ko <koba.ko@canonical.com>
    Reviewed-by: Mario Limonciello <Mario.limonciello@dell.com>
    Reviewed-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ece1e470af13ee1207c95276e20625b153f9ef05
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Thu May 14 12:50:49 2020 +0200

    ixgbe: Fix XDP redirect on archs with PAGE_SIZE above 4K
    
    [ Upstream commit 88eb0ee17b2ece64fcf6689a4557a5c2e7a89c4b ]
    
    The ixgbe driver have another memory model when compiled on archs with
    PAGE_SIZE above 4096 bytes. In this mode it doesn't split the page in
    two halves, but instead increment rx_buffer->page_offset by truesize of
    packet (which include headroom and tailroom for skb_shared_info).
    
    This is done correctly in ixgbe_build_skb(), but in ixgbe_rx_buffer_flip
    which is currently only called on XDP_TX and XDP_REDIRECT, it forgets
    to add the tailroom for skb_shared_info. This breaks XDP_REDIRECT, for
    veth and cpumap.  Fix by adding size of skb_shared_info tailroom.
    
    Maintainers notice: This fix have been queued to Jeff.
    
    Fixes: 6453073987ba ("ixgbe: add initial support for xdp redirect")
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Link: https://lore.kernel.org/bpf/158945344946.97035.17031588499266605743.stgit@firesoul
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eec65c9e283096ce6cf4c6d6b5fb6b9450fb9ca
Author: Jeremy Cline <jcline@redhat.com>
Date:   Thu May 14 10:05:46 2020 -0400

    lockdown: Allow unprivileged users to see lockdown status
    
    [ Upstream commit 60cf7c5ed5f7087c4de87a7676b8c82d96fd166c ]
    
    A number of userspace tools, such as systemtap, need a way to see the
    current lockdown state so they can gracefully deal with the kernel being
    locked down. The state is already exposed in
    /sys/kernel/security/lockdown, but is only readable by root. Adjust the
    permissions so unprivileged users can read the state.
    
    Fixes: 000d388ed3bb ("security: Add a static lockdown policy LSM")
    Cc: Frank Ch. Eigler <fche@redhat.com>
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Signed-off-by: James Morris <jmorris@namei.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00f73938ef655908838b332df33e6b25d7080fd5
Author: Tomohito Esaki <etom@igel.co.jp>
Date:   Wed Apr 1 15:11:00 2020 +0900

    drm: rcar-du: Set primary plane zpos immutably at initializing
    
    [ Upstream commit 7982471d01aac33994276bf567c8f1f3a137648a ]
    
    According to drm_plane_create_zpos_property() function documentation,
    all planes zpos range should be set if zpos property is supported.
    However, the rcar-du driver didn't set primary plane zpos range. Since
    the primary plane's zpos is fixed, set it immutably.
    
    Reported-by: Yoshihito Ogawa <yoshihito.ogawa.kc@renesas.com>
    Reported-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
    Signed-off-by: Tomohito Esaki <etom@igel.co.jp>
    Reviewed-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Reviewed-by: Daniel Stone <daniels@collabora.com>
    [Turn continue into if ... else ...]
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7aefaba39d21082585def29594e0d8ceef10a7f
Author: Weiping Zhang <zhangweiping@didiglobal.com>
Date:   Wed May 13 08:44:05 2020 +0800

    block: reset mapping if failed to update hardware queue count
    
    [ Upstream commit aa880ad690ab6d4c53934af85fb5a43e69ecb0f5 ]
    
    When we increase hardware queue count, blk_mq_update_queue_map will
    reset the mapping between cpu and hardware queue base on the hardware
    queue count(set->nr_hw_queues). The mapping cannot be reset if it
    encounters error in blk_mq_realloc_hw_ctxs, but the fallback flow will
    continue using it, then blk_mq_map_swqueue will touch a invalid memory,
    because the mapping points to a wrong hctx.
    
    blktest block/030:
    
    null_blk: module loaded
    Increasing nr_hw_queues to 8 fails, fallback to 1
    ==================================================================
    BUG: KASAN: null-ptr-deref in blk_mq_map_swqueue+0x2f2/0x830
    Read of size 8 at addr 0000000000000128 by task nproc/8541
    
    CPU: 5 PID: 8541 Comm: nproc Not tainted 5.7.0-rc4-dbg+ #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.13.0-0-gf21b5a4-rebuilt.opensuse.org 04/01/2014
    Call Trace:
    dump_stack+0xa5/0xe6
    __kasan_report.cold+0x65/0xbb
    kasan_report+0x45/0x60
    check_memory_region+0x15e/0x1c0
    __kasan_check_read+0x15/0x20
    blk_mq_map_swqueue+0x2f2/0x830
    __blk_mq_update_nr_hw_queues+0x3df/0x690
    blk_mq_update_nr_hw_queues+0x32/0x50
    nullb_device_submit_queues_store+0xde/0x160 [null_blk]
    configfs_write_file+0x1c4/0x250 [configfs]
    __vfs_write+0x4c/0x90
    vfs_write+0x14b/0x2d0
    ksys_write+0xdd/0x180
    __x64_sys_write+0x47/0x50
    do_syscall_64+0x6f/0x310
    entry_SYSCALL_64_after_hwframe+0x49/0xb3
    
    Signed-off-by: Weiping Zhang <zhangweiping@didiglobal.com>
    Tested-by: Bart van Assche <bvanassche@acm.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b432540123f5f266cdbfecdf8455a16cfba1aaa9
Author: Luke Nelson <lukenels@cs.washington.edu>
Date:   Fri May 8 11:15:44 2020 -0700

    arm64: insn: Fix two bugs in encoding 32-bit logical immediates
    
    [ Upstream commit 579d1b3faa3735e781ff74aac0afd598515dbc63 ]
    
    This patch fixes two issues present in the current function for encoding
    arm64 logical immediates when using the 32-bit variants of instructions.
    
    First, the code does not correctly reject an all-ones 32-bit immediate,
    and returns an undefined instruction encoding.
    
    Second, the code incorrectly rejects some 32-bit immediates that are
    actually encodable as logical immediates. The root cause is that the code
    uses a default mask of 64-bit all-ones, even for 32-bit immediates.
    This causes an issue later on when the default mask is used to fill the
    top bits of the immediate with ones, shown here:
    
      /*
       * Pattern: 0..01..10..01..1
       *
       * Fill the unused top bits with ones, and check if
       * the result is a valid immediate (all ones with a
       * contiguous ranges of zeroes).
       */
      imm |= ~mask;
      if (!range_of_ones(~imm))
              return AARCH64_BREAK_FAULT;
    
    To see the problem, consider an immediate of the form 0..01..10..01..1,
    where the upper 32 bits are zero, such as 0x80000001. The code checks
    if ~(imm | ~mask) contains a range of ones: the incorrect mask yields
    1..10..01..10..0, which fails the check; the correct mask yields
    0..01..10..0, which succeeds.
    
    The fix for both issues is to generate a correct mask based on the
    instruction immediate size, and use the mask to check for all-ones,
    all-zeroes, and values wider than the mask.
    
    Currently, arch/arm64/kvm/va_layout.c is the only user of this function,
    which uses 64-bit immediates and therefore won't trigger these bugs.
    
    We tested the new code against llvm-mc with all 1,302 encodable 32-bit
    logical immediates and all 5,334 encodable 64-bit logical immediates.
    
    Fixes: ef3935eeebff ("arm64: insn: Add encoder for bitwise operations using literals")
    Suggested-by: Will Deacon <will@kernel.org>
    Co-developed-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Luke Nelson <luke.r.nels@gmail.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200508181547.24783-2-luke.r.nels@gmail.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 201219691a9a56b761de0a386a6435fc5d6a15b0
Author: Ming Lei <ming.lei@redhat.com>
Date:   Thu May 7 21:04:08 2020 +0800

    block: alloc map and request for new hardware queue
    
    [ Upstream commit fd689871bbfbb41cd77379d3e9e5f4def0f7d6c6 ]
    
    Alloc new map and request for new hardware queue when increse
    hardware queue count. Before this patch, it will show a
    warning for each new hardware queue, but it's not enough, these
    hctx have no maps and reqeust, when a bio was mapped to these
    hardware queue, it will trigger kernel panic when get request
    from these hctx.
    
    Test environment:
     * A NVMe disk supports 128 io queues
     * 96 cpus in system
    
    A corner case can always trigger this panic, there are 96
    io queues allocated for HCTX_TYPE_DEFAULT type, the corresponding kernel
    log: nvme nvme0: 96/0/0 default/read/poll queues. Now we set nvme write
    queues to 96, then nvme will alloc others(32) queues for read, but
    blk_mq_update_nr_hw_queues does not alloc map and request for these new
    added io queues. So when process read nvme disk, it will trigger kernel
    panic when get request from these hardware context.
    
    Reproduce script:
    
    nr=$(expr `cat /sys/block/nvme0n1/device/queue_count` - 1)
    echo $nr > /sys/module/nvme/parameters/write_queues
    echo 1 > /sys/block/nvme0n1/device/reset_controller
    dd if=/dev/nvme0n1 of=/dev/null bs=4K count=1
    
    [ 8040.805626] ------------[ cut here ]------------
    [ 8040.805627] WARNING: CPU: 82 PID: 12921 at block/blk-mq.c:2578 blk_mq_map_swqueue+0x2b6/0x2c0
    [ 8040.805627] Modules linked in: nvme nvme_core nf_conntrack_netlink xt_addrtype br_netfilter overlay xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nft_counter nf_nat_tftp nf_conntrack_tftp nft_masq nf_tables_set nft_fib_inet nft_f
    ib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack tun bridge nf_defrag_ipv6 nf_defrag_ipv4 stp llc ip6_tables ip_tables nft_compat rfkill ip_set nf_tables nfne
    tlink sunrpc intel_rapl_msr intel_rapl_common skx_edac nfit libnvdimm x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel kvm irqbypass ipmi_ssif crct10dif_pclmul crc32_pclmul iTCO_wdt iTCO_vendor_support ghash_clmulni_intel intel_
    cstate intel_uncore raid0 joydev intel_rapl_perf ipmi_si pcspkr mei_me ioatdma sg ipmi_devintf mei i2c_i801 dca lpc_ich ipmi_msghandler acpi_power_meter acpi_pad xfs libcrc32c sd_mod ast i2c_algo_bit drm_vram_helper drm_ttm_helper ttm d
    rm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops
    [ 8040.805637]  ahci drm i40e libahci crc32c_intel libata t10_pi wmi dm_mirror dm_region_hash dm_log dm_mod [last unloaded: nvme_core]
    [ 8040.805640] CPU: 82 PID: 12921 Comm: kworker/u194:2 Kdump: loaded Tainted: G        W         5.6.0-rc5.78317c+ #2
    [ 8040.805640] Hardware name: Inspur SA5212M5/YZMB-00882-104, BIOS 4.0.9 08/27/2019
    [ 8040.805641] Workqueue: nvme-reset-wq nvme_reset_work [nvme]
    [ 8040.805642] RIP: 0010:blk_mq_map_swqueue+0x2b6/0x2c0
    [ 8040.805643] Code: 00 00 00 00 00 41 83 c5 01 44 39 6d 50 77 b8 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 8b bb 98 00 00 00 89 d6 e8 8c 81 03 00 eb 83 <0f> 0b e9 52 ff ff ff 0f 1f 00 0f 1f 44 00 00 41 57 48 89 f1 41 56
    [ 8040.805643] RSP: 0018:ffffba590d2e7d48 EFLAGS: 00010246
    [ 8040.805643] RAX: 0000000000000000 RBX: ffff9f013e1ba800 RCX: 000000000000003d
    [ 8040.805644] RDX: ffff9f00ffff6000 RSI: 0000000000000003 RDI: ffff9ed200246d90
    [ 8040.805644] RBP: ffff9f00f6a79860 R08: 0000000000000000 R09: 000000000000003d
    [ 8040.805645] R10: 0000000000000001 R11: ffff9f0138c3d000 R12: ffff9f00fb3a9008
    [ 8040.805645] R13: 000000000000007f R14: ffffffff96822660 R15: 000000000000005f
    [ 8040.805645] FS:  0000000000000000(0000) GS:ffff9f013fa80000(0000) knlGS:0000000000000000
    [ 8040.805646] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 8040.805646] CR2: 00007f7f397fa6f8 CR3: 0000003d8240a002 CR4: 00000000007606e0
    [ 8040.805647] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 8040.805647] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 8040.805647] PKRU: 55555554
    [ 8040.805647] Call Trace:
    [ 8040.805649]  blk_mq_update_nr_hw_queues+0x31b/0x390
    [ 8040.805650]  nvme_reset_work+0xb4b/0xeab [nvme]
    [ 8040.805651]  process_one_work+0x1a7/0x370
    [ 8040.805652]  worker_thread+0x1c9/0x380
    [ 8040.805653]  ? max_active_store+0x80/0x80
    [ 8040.805655]  kthread+0x112/0x130
    [ 8040.805656]  ? __kthread_parkme+0x70/0x70
    [ 8040.805657]  ret_from_fork+0x35/0x40
    [ 8040.805658] ---[ end trace b5f13b1e73ccb5d3 ]---
    [ 8229.365135] BUG: kernel NULL pointer dereference, address: 0000000000000004
    [ 8229.365165] #PF: supervisor read access in kernel mode
    [ 8229.365178] #PF: error_code(0x0000) - not-present page
    [ 8229.365191] PGD 0 P4D 0
    [ 8229.365201] Oops: 0000 [#1] SMP PTI
    [ 8229.365212] CPU: 77 PID: 13024 Comm: dd Kdump: loaded Tainted: G        W         5.6.0-rc5.78317c+ #2
    [ 8229.365232] Hardware name: Inspur SA5212M5/YZMB-00882-104, BIOS 4.0.9 08/27/2019
    [ 8229.365253] RIP: 0010:blk_mq_get_tag+0x227/0x250
    [ 8229.365265] Code: 44 24 04 44 01 e0 48 8b 74 24 38 65 48 33 34 25 28 00 00 00 75 33 48 83 c4 40 5b 5d 41 5c 41 5d 41 5e c3 48 8d 68 10 4c 89 ef <44> 8b 60 04 48 89 ee e8 dd f9 ff ff 83 f8 ff 75 c8 e9 67 fe ff ff
    [ 8229.365304] RSP: 0018:ffffba590e977970 EFLAGS: 00010246
    [ 8229.365317] RAX: 0000000000000000 RBX: ffff9f00f6a79860 RCX: ffffba590e977998
    [ 8229.365333] RDX: 0000000000000000 RSI: ffff9f012039b140 RDI: ffffba590e977a38
    [ 8229.365349] RBP: 0000000000000010 R08: ffffda58ff94e190 R09: ffffda58ff94e198
    [ 8229.365365] R10: 0000000000000011 R11: ffff9f00f6a79860 R12: 0000000000000000
    [ 8229.365381] R13: ffffba590e977a38 R14: ffff9f012039b140 R15: 0000000000000001
    [ 8229.365397] FS:  00007f481c230580(0000) GS:ffff9f013f940000(0000) knlGS:0000000000000000
    [ 8229.365415] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 8229.365428] CR2: 0000000000000004 CR3: 0000005f35e26004 CR4: 00000000007606e0
    [ 8229.365444] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 8229.365460] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 8229.365476] PKRU: 55555554
    [ 8229.365484] Call Trace:
    [ 8229.365498]  ? finish_wait+0x80/0x80
    [ 8229.365512]  blk_mq_get_request+0xcb/0x3f0
    [ 8229.365525]  blk_mq_make_request+0x143/0x5d0
    [ 8229.365538]  generic_make_request+0xcf/0x310
    [ 8229.365553]  ? scan_shadow_nodes+0x30/0x30
    [ 8229.365564]  submit_bio+0x3c/0x150
    [ 8229.365576]  mpage_readpages+0x163/0x1a0
    [ 8229.365588]  ? blkdev_direct_IO+0x490/0x490
    [ 8229.365601]  read_pages+0x6b/0x190
    [ 8229.365612]  __do_page_cache_readahead+0x1c1/0x1e0
    [ 8229.365626]  ondemand_readahead+0x182/0x2f0
    [ 8229.365639]  generic_file_buffered_read+0x590/0xab0
    [ 8229.365655]  new_sync_read+0x12a/0x1c0
    [ 8229.365666]  vfs_read+0x8a/0x140
    [ 8229.365676]  ksys_read+0x59/0xd0
    [ 8229.365688]  do_syscall_64+0x55/0x1d0
    [ 8229.365700]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Weiping Zhang <zhangweiping@didiglobal.com>
    Tested-by: Weiping Zhang <zhangweiping@didiglobal.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fec6f8c0b22100956f2a7ccf4eaea27e359b0e38
Author: Erik Kaneda <erik.kaneda@intel.com>
Date:   Mon May 4 17:46:52 2020 -0700

    ACPICA: Dispatcher: add status checks
    
    [ Upstream commit 6bfe5344b2956d0bee116f1c640aef05e5cddd76 ]
    
    ACPICA commit 3244c1eeba9f9fb9ccedb875f7923a3d85e0c6aa
    
    The status chekcs are used to to avoid NULL pointer dereference on
    field objects
    
    Link: https://github.com/acpica/acpica/commit/3244c1ee
    Reported-by: Kurt Kennett <kurt_kennett@hotmail.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c916af516d822c31ee2daf12c53457cb5b05e62d
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed May 6 18:30:18 2020 +0300

    spi: dw: Zero DMA Tx and Rx configurations on stack
    
    [ Upstream commit 3cb97e223d277f84171cc4ccecab31e08b2ee7b5 ]
    
    Some DMA controller drivers do not tolerate non-zero values in
    the DMA configuration structures. Zero them to avoid issues with
    such DMA controller drivers. Even despite above this is a good
    practice per se.
    
    Fixes: 7063c0d942a1 ("spi/dw_spi: add DMA support")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Cc: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20200506153025.21441-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92fb6909b0585af3015b89f2388ddbd12393bba4
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Mon May 4 16:34:42 2020 +0800

    rtw88: fix an issue about leak system resources
    
    [ Upstream commit 191f6b08bfef24e1a9641eaac96ed030a7be4599 ]
    
    the related system resources were not released when pci_iomap() return
    error in the rtw_pci_io_mapping() function. add pci_release_regions() to
    fix it.
    
    Fixes: e3037485c68ec1a ("rtw88: new Realtek 802.11ac driver")
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Acked-by: Yan-Hsuan Chuang <yhchuang@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200504083442.3033-1-zhengdejin5@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd7662d6036e0ef9c999d72122b404295261218b
Author: Tomasz Figa <tfiga@chromium.org>
Date:   Sat Apr 11 19:37:10 2020 +0200

    media: staging: ipu3: Fix stale list entries on parameter queue failure
    
    [ Upstream commit 735a02f1bbc2c5e6e9cdbf0222948ff03ff7ab2d ]
    
    When queuing parameters fails, current code bails out without deleting
    the corresponding vb2 buffer from the driver buffer list, but the buffer
    is returned to vb2. This leads to stale list entries and a crash when
    the driver stops streaming:
    
    [  224.935561] ipu3-imgu 0000:00:05.0: set parameters failed.
    [  224.998932] ipu3-imgu 0000:00:05.0: set parameters failed.
    [  225.064430] ipu3-imgu 0000:00:05.0: set parameters failed.
    [  225.128534] ipu3-imgu 0000:00:05.0: set parameters failed.
    [  225.194945] ipu3-imgu 0000:00:05.0: set parameters failed.
    [  225.360363] ------------[ cut here ]------------
    [  225.360372] WARNING: CPU: 0 PID: 6704 at
    drivers/media/common/videobuf2/videobuf2-core.c:927
    vb2_buffer_done+0x20f/0x21a [videobuf2_common]
    [  225.360374] Modules linked in: snd_seq_dummy snd_seq snd_seq_device
    veth bridge stp llc tun nf_nat_tftp nf_conntrack_tftp nf_nat_ftp
    nf_conntrack_ftp esp6 ah6 ip6t_REJECT ip6t_ipv6header cmac rfcomm uinput
    ipu3_imgu(C) ipu3_cio2 iova videobuf2_v4l2 videobuf2_common
    videobuf2_dma_sg videobuf2_memops ov13858 ov5670 v4l2_fwnode dw9714
    acpi_als xt_MASQUERADE fuse iio_trig_sysfs cros_ec_sensors_ring
    cros_ec_light_prox cros_ec_sensors cros_ec_sensors_core
    industrialio_triggered_buffer kfifo_buf industrialio
    cros_ec_sensorsupport cdc_ether btusb btrtl btintel btbcm usbnet
    bluetooth ecdh_generic ecc hid_google_hammer iwlmvm iwl7000_mac80211
    r8152 mii lzo_rle lzo_compress iwlwifi zram cfg80211 joydev
    [  225.360400] CPU: 0 PID: 6704 Comm: CameraDeviceOps Tainted: G
    C        5.4.30 #5
    [  225.360402] Hardware name: HP Soraka/Soraka, BIOS
    Google_Soraka.10431.106.0 12/03/2019
    [  225.360405] RIP: 0010:vb2_buffer_done+0x20f/0x21a [videobuf2_common]
    [  225.360408] Code: 5e 41 5f 5d e9 e0 16 5a d4 41 8b 55 08 48 c7 c7 8f
    8b 5c c0 48 c7 c6 36 9a 5c c0 44 89 f9 31 c0 e8 a5 1c 5b d4 e9 53 fe ff
    ff <0f> 0b eb a3 e8 12 d7 43 d4 eb 97 0f 1f 44 00 00 55 48 89 e5 41 56
    [  225.360410] RSP: 0018:ffff9468ab32fba8 EFLAGS: 00010297
    [  225.360412] RAX: ffff8aa7a51577a8 RBX: dead000000000122 RCX:
    ffff8aa7a51577a8
    [  225.360414] RDX: 0000000000000000 RSI: 0000000000000006 RDI:
    ffff8aa7a5157400
    [  225.360416] RBP: ffff9468ab32fbd8 R08: ffff8aa64e47e600 R09:
    0000000000000000
    [  225.360418] R10: 0000000000000000 R11: ffffffffc06036e6 R12:
    dead000000000100
    [  225.360420] R13: ffff8aa7820f1940 R14: ffff8aa7a51577a8 R15:
    0000000000000006
    [  225.360422] FS:  00007c1146ffd700(0000) GS:ffff8aa7baa00000(0000)
    knlGS:0000000000000000
    [  225.360424] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  225.360426] CR2: 00007aea3473a000 CR3: 00000000537d6004 CR4:
    00000000003606f0
    [  225.360427] Call Trace:
    [  225.360434]  imgu_return_all_buffers+0x6f/0x8e [ipu3_imgu]
    [  225.360438]  imgu_vb2_stop_streaming+0xd6/0xf0 [ipu3_imgu]
    [  225.360441]  __vb2_queue_cancel+0x33/0x22d [videobuf2_common]
    [  225.360443]  vb2_core_streamoff+0x16/0x78 [videobuf2_common]
    [  225.360448]  __video_do_ioctl+0x33d/0x42a
    [  225.360452]  video_usercopy+0x34a/0x615
    [  225.360455]  ? video_ioctl2+0x16/0x16
    [  225.360458]  v4l2_ioctl+0x46/0x53
    [  225.360462]  do_vfs_ioctl+0x50a/0x787
    [  225.360465]  ksys_ioctl+0x58/0x83
    [  225.360468]  __x64_sys_ioctl+0x1a/0x1e
    [  225.360470]  do_syscall_64+0x54/0x68
    [  225.360474]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  225.360476] RIP: 0033:0x7c118030f497
    [  225.360479] Code: 8a 66 90 48 8b 05 d1 d9 2b 00 64 c7 00 26 00 00 00
    48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f
    05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d a1 d9 2b 00 f7 d8 64 89 01 48
    [  225.360480] RSP: 002b:00007c1146ffa5a8 EFLAGS: 00000246 ORIG_RAX:
    0000000000000010
    [  225.360483] RAX: ffffffffffffffda RBX: 00007c1140010018 RCX:
    00007c118030f497
    [  225.360484] RDX: 00007c114001019c RSI: 0000000040045613 RDI:
    000000000000004c
    [  225.360486] RBP: 00007c1146ffa700 R08: 00007c1140010048 R09:
    0000000000000000
    [  225.360488] R10: 0000000000000000 R11: 0000000000000246 R12:
    00007c11400101b0
    [  225.360489] R13: 00007c1140010200 R14: 00007c1140010048 R15:
    0000000000000001
    [  225.360492] ---[ end trace 73625ecfbd1c930e ]---
    [  225.360498] general protection fault: 0000 [#1] PREEMPT SMP PTI
    [  225.360501] CPU: 0 PID: 6704 Comm: CameraDeviceOps Tainted: G
    WC        5.4.30 #5
    [  225.360502] Hardware name: HP Soraka/Soraka, BIOS
    Google_Soraka.10431.106.0 12/03/2019
    [  225.360505] RIP: 0010:imgu_return_all_buffers+0x52/0x8e [ipu3_imgu]
    [  225.360507] Code: d4 49 8b 85 70 0a 00 00 49 81 c5 70 0a 00 00 49 39
    c5 74 3b 49 bc 00 01 00 00 00 00 ad de 49 8d 5c 24 22 4c 8b 30 48 8b 48
    08 <49> 89 4e 08 4c 89 31 4c 89 20 48 89 58 08 48 8d b8 58 fc ff ff 44
    [  225.360509] RSP: 0018:ffff9468ab32fbe8 EFLAGS: 00010293
    [  225.360511] RAX: ffff8aa7a51577a8 RBX: dead000000000122 RCX:
    dead000000000122
    [  225.360512] RDX: 0000000000000000 RSI: 0000000000000006 RDI:
    ffff8aa7a5157400
    [  225.360514] RBP: ffff9468ab32fc18 R08: ffff8aa64e47e600 R09:
    0000000000000000
    [  225.360515] R10: 0000000000000000 R11: ffffffffc06036e6 R12:
    dead000000000100
    [  225.360517] R13: ffff8aa7820f1940 R14: dead000000000100 R15:
    0000000000000006
    [  225.360519] FS:  00007c1146ffd700(0000) GS:ffff8aa7baa00000(0000)
    knlGS:0000000000000000
    [  225.360521] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  225.360523] CR2: 00007aea3473a000 CR3: 00000000537d6004 CR4:
    00000000003606f0
    [  225.360525] Call Trace:
    [  225.360528]  imgu_vb2_stop_streaming+0xd6/0xf0 [ipu3_imgu]
    [  225.360531]  __vb2_queue_cancel+0x33/0x22d [videobuf2_common]
    [  225.360534]  vb2_core_streamoff+0x16/0x78 [videobuf2_common]
    [  225.360537]  __video_do_ioctl+0x33d/0x42a
    [  225.360540]  video_usercopy+0x34a/0x615
    [  225.360542]  ? video_ioctl2+0x16/0x16
    [  225.360546]  v4l2_ioctl+0x46/0x53
    [  225.360548]  do_vfs_ioctl+0x50a/0x787
    [  225.360551]  ksys_ioctl+0x58/0x83
    [  225.360554]  __x64_sys_ioctl+0x1a/0x1e
    [  225.360556]  do_syscall_64+0x54/0x68
    [  225.360559]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  225.360561] RIP: 0033:0x7c118030f497
    [  225.360563] Code: 8a 66 90 48 8b 05 d1 d9 2b 00 64 c7 00 26 00 00 00
    48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f
    05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d a1 d9 2b 00 f7 d8 64 89 01 48
    [  225.360565] RSP: 002b:00007c1146ffa5a8 EFLAGS: 00000246 ORIG_RAX:
    0000000000000010
    [  225.360567] RAX: ffffffffffffffda RBX: 00007c1140010018 RCX:
    00007c118030f497
    [  225.360569] RDX: 00007c114001019c RSI: 0000000040045613 RDI:
    000000000000004c
    [  225.360570] RBP: 00007c1146ffa700 R08: 00007c1140010048 R09:
    0000000000000000
    [  225.360572] R10: 0000000000000000 R11: 0000000000000246 R12:
    00007c11400101b0
    [  225.360574] R13: 00007c1140010200 R14: 00007c1140010048 R15:
    0000000000000001
    [  225.360576] Modules linked in: snd_seq_dummy snd_seq snd_seq_device
    veth bridge stp llc tun nf_nat_tftp nf_conntrack_tftp nf_nat_ftp
    nf_conntrack_ftp esp6 ah6 ip6t_REJECT ip6t_ipv6header cmac rfcomm uinput
    ipu3_imgu(C) ipu3_cio2 iova videobuf2_v4l2 videobuf2_common
    videobuf2_dma_sg videobuf2_memops ov13858 ov567
    
    Fix this by moving the list_del() call just below the list_first_entry()
    call when the buffer no longer needs to be in the list.
    
    Fixes: 8ecc7c9da013 ("media: staging/intel-ipu3: parameter buffer refactoring")
    Signed-off-by: Tomasz Figa <tfiga@chromium.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a0c9941912542dfdf4e3a27a065f4a73374de08
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Mon May 4 18:05:18 2020 +0100

    arm64: cacheflush: Fix KGDB trap detection
    
    [ Upstream commit ab8ad279ceac4fc78ae4dcf1a26326e05695e537 ]
    
    flush_icache_range() contains a bodge to avoid issuing IPIs when the kgdb
    trap handler is running because issuing IPIs is unsafe (and not needed)
    in this execution context. However the current test, based on
    kgdb_connected is flawed: it both over-matches and under-matches.
    
    The over match occurs because kgdb_connected is set when gdb attaches
    to the stub and remains set during normal running. This is relatively
    harmelss because in almost all cases irq_disabled() will be false.
    
    The under match is more serious. When kdb is used instead of kgdb to access
    the debugger then kgdb_connected is not set in all the places that the
    debug core updates sw breakpoints (and hence flushes the icache). This
    can lead to deadlock.
    
    Fix by replacing the ad-hoc check with the proper kgdb macro. This also
    allows us to drop the #ifdef wrapper.
    
    Fixes: 3b8c9f1cdfc5 ("arm64: IPI each CPU after invalidating the I-cache for kernel mappings")
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200504170518.2959478-1-daniel.thompson@linaro.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12d4dac2be77dc453938a2b8c2bf830812daae87
Author: Wen Gong <wgong@codeaurora.org>
Date:   Mon May 4 12:03:14 2020 +0300

    ath10k: remove the max_sched_scan_reqs value
    
    [ Upstream commit d431f8939c1419854dfe89dd345387f5397c6edd ]
    
    The struct cfg80211_wowlan of NET_DETECT WoWLAN feature share the same
    struct cfg80211_sched_scan_request together with scheduled scan request
    feature, and max_sched_scan_reqs of wiphy is only used for sched scan,
    and ath10k does not support scheduled scan request feature, so ath10k
    does not set flag NL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR, but ath10k
    set max_sched_scan_reqs of wiphy to a non zero value 1, then function
    nl80211_add_commands_unsplit of cfg80211 will set it support command
    NL80211_CMD_START_SCHED_SCAN because max_sched_scan_reqs is a non zero
    value, but actually ath10k not support it, then it leads a mismatch result
    for sched scan of cfg80211, then application shill found the mismatch and
    stop running case of MAC random address scan and then the case fail.
    
    After remove max_sched_scan_reqs value, it keeps match for sched scan and
    case of MAC random address scan pass.
    
    Tested with QCA6174 SDIO with firmware WLAN.RMH.4.4.1-00029.
    Tested with QCA6174 PCIe with firmware WLAN.RM.4.4.1-00110-QCARMSWP-1.
    
    Fixes: ce834e280f2f875 ("ath10k: support NET_DETECT WoWLAN feature")
    Signed-off-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20191114050001.4658-1-wgong@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c573a13f72fbb27fd4af1e4103d5622183bd8886
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon May 4 10:06:29 2020 +0200

    efi/libstub/x86: Work around LLVM ELF quirk build regression
    
    [ Upstream commit f77767ed5f4d398b29119563155e4ece2dfeee13 ]
    
    When building the x86 EFI stub with Clang, the libstub Makefile rules
    that manipulate the ELF object files may throw an error like:
    
        STUBCPY drivers/firmware/efi/libstub/efi-stub-helper.stub.o
      strip: drivers/firmware/efi/libstub/efi-stub-helper.stub.o: Failed to find link section for section 10
      objcopy: drivers/firmware/efi/libstub/efi-stub-helper.stub.o: Failed to find link section for section 10
    
    This is the result of a LLVM feature [0] where symbol references are
    stored in a LLVM specific .llvm_addrsig section in a non-transparent way,
    causing generic ELF tools such as strip or objcopy to choke on them.
    
    So force the compiler not to emit these sections, by passing the
    appropriate command line option.
    
    [0] https://sourceware.org/bugzilla/show_bug.cgi?id=23817
    
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Collingbourne <pcc@google.com>
    Cc: Sami Tolvanen <samitolvanen@google.com>
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa15b59b1ea2fdb30c5532d6bbf8e11c9c1b1a38
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Sun May 3 09:52:11 2020 +0000

    net: ena: fix error returning in ena_com_get_hash_function()
    
    [ Upstream commit e9a1de378dd46375f9abfd8de1e6f59ee114a793 ]
    
    In case the "func" parameter is NULL we now return "-EINVAL".
    This shouldn't happen in general, but when it does happen, this is the
    proper way to handle it.
    
    We also check func for NULL in the beginning of the function, as there
    is no reason to do all the work and realize in the end of the function
    it was useless.
    
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84c8498320d2877369273ec84105ed5666cfc37f
Author: Mark Starovoytov <mstarovoitov@marvell.com>
Date:   Thu Apr 30 11:04:34 2020 +0300

    net: atlantic: make hw_get_regs optional
    
    [ Upstream commit d0f23741c202c685447050713907f3be39a985ee ]
    
    This patch fixes potential crash in case if hw_get_regs is NULL.
    
    Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f664eda61a04701c14d3c0f6b30ee837de955f4
Author: Huaixin Chang <changhuaixin@linux.alibaba.com>
Date:   Mon Apr 20 10:44:21 2020 +0800

    sched/fair: Refill bandwidth before scaling
    
    [ Upstream commit 5a6d6a6ccb5f48ca8cf7c6d64ff83fd9c7999390 ]
    
    In order to prevent possible hardlockup of sched_cfs_period_timer()
    loop, loop count is introduced to denote whether to scale quota and
    period or not. However, scale is done between forwarding period timer
    and refilling cfs bandwidth runtime, which means that period timer is
    forwarded with old "period" while runtime is refilled with scaled
    "quota".
    
    Move do_sched_cfs_period_timer() before scaling to solve this.
    
    Fixes: 2e8e19226398 ("sched/fair: Limit sched_cfs_period_timer() loop to avoid hard lockup")
    Signed-off-by: Huaixin Chang <changhuaixin@linux.alibaba.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Reviewed-by: Phil Auld <pauld@redhat.com>
    Link: https://lkml.kernel.org/r/20200420024421.22442-3-changhuaixin@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91517e9518301fa5e661c91e152c148cbd3ff064
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Apr 28 19:57:59 2020 +0200

    x86,smap: Fix smap_{save,restore}() alternatives
    
    [ Upstream commit 1ff865e343c2b59469d7e41d370a980a3f972c71 ]
    
    As reported by objtool:
    
      lib/ubsan.o: warning: objtool: .altinstr_replacement+0x0: alternative modifies stack
      lib/ubsan.o: warning: objtool: .altinstr_replacement+0x7: alternative modifies stack
    
    the smap_{save,restore}() alternatives violate (the newly enforced)
    rule on stack invariance. That is, due to there only being a single
    ORC table it must be valid to any alternative. These alternatives
    violate this with the direct result that unwinds will not be correct
    when it hits between the PUSH and POP instructions.
    
    Rewrite the functions to only have a conditional jump.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lkml.kernel.org/r/20200429101802.GI13592@hirez.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fc5d5834b372a70f28212c77847dea42cdc2713
Author: Evan Green <evgreen@chromium.org>
Date:   Mon Apr 27 16:32:48 2020 -0700

    spi: pxa2xx: Apply CS clk quirk to BXT
    
    [ Upstream commit 6eefaee4f2d366a389da0eb95e524ba82bf358c4 ]
    
    With a couple allies at Intel, and much badgering, I got confirmation
    from Intel that at least BXT suffers from the same SPI chip-select
    issue as Cannonlake (and beyond). The issue being that after going
    through runtime suspend/resume, toggling the chip-select line without
    also sending data does nothing.
    
    Add the quirk to BXT to briefly toggle dynamic clock gating off and
    on, forcing the fabric to wake up enough to notice the CS register
    change.
    
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Cc: Shobhit Srivastava <shobhit.srivastava@intel.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427163238.1.Ib1faaabe236e37ea73be9b8dcc6aa034cb3c8804@changeid
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 269e7b43f2b4654f9f79e185ae425f2d72c6df37
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Apr 28 18:21:04 2020 -0700

    libbpf: Fix memory leak and possible double-free in hashmap__clear
    
    [ Upstream commit 229bf8bf4d910510bc1a2fd0b89bd467cd71050d ]
    
    Fix memory leak in hashmap_clear() not freeing hashmap_entry structs for each
    of the remaining entries. Also NULL-out bucket list to prevent possible
    double-free between hashmap__clear() and hashmap__free().
    
    Running test_progs-asan flavor clearly showed this problem.
    
    Reported-by: Alston Tang <alston64@fb.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200429012111.277390-5-andriin@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 072d23eef6003386d05424411522578fa75b6814
Author: Gavin Shan <gshan@redhat.com>
Date:   Tue Apr 28 09:57:00 2020 +1000

    arm64/kernel: Fix range on invalidating dcache for boot page tables
    
    [ Upstream commit 9d2d75ede59bc1edd8561f2ee9d4702a5ea0ae30 ]
    
    Prior to commit 8eb7e28d4c642c31 ("arm64/mm: move runtime pgds to
    rodata"), idmap_pgd_dir, tramp_pg_dir, reserved_ttbr0, swapper_pg_dir,
    and init_pg_dir were contiguous at the end of the kernel image. The
    maintenance at the end of __create_page_tables assumed these were
    contiguous, and affected everything from the start of idmap_pg_dir
    to the end of init_pg_dir.
    
    That commit moved all but init_pg_dir into the .rodata section, with
    other data placed between idmap_pg_dir and init_pg_dir, but did not
    update the maintenance. Hence the maintenance is performed on much
    more data than necessary (but as the bootloader previously made this
    clean to the PoC there is no functional problem).
    
    As we only alter idmap_pg_dir, and init_pg_dir, we only need to perform
    maintenance for these. As the other dirs are in .rodata, the bootloader
    will have initialised them as expected and cleaned them to the PoC. The
    kernel will initialize them as necessary after enabling the MMU.
    
    This patch reworks the maintenance to only cover the idmap_pg_dir and
    init_pg_dir to avoid this unnecessary work.
    
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/20200427235700.112220-1-gshan@redhat.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 614722f1ffd23de075900ef58edce1450acfb6ed
Author: limingyu <limingyu@uniontech.com>
Date:   Wed Apr 22 17:01:19 2020 +0800

    drm/amdgpu: Init data to avoid oops while reading pp_num_states.
    
    [ Upstream commit 6f81b2d047c59eb77cd04795a44245d6a52cdaec ]
    
    For chip like CHIP_OLAND with si enabled(amdgpu.si_support=1),
    the amdgpu will expose pp_num_states to the /sys directory.
    In this moment, read the pp_num_states file will excute the
    amdgpu_get_pp_num_states func. In our case, the data hasn't
    been initialized, so the kernel will access some ilegal
    address, trigger the segmentfault and system will reboot soon:
    
        uos@uos-PC:~$ cat /sys/devices/pci0000\:00/0000\:00\:00.0/0000\:01\:00
        .0/pp_num_states
    
        Message from syslogd@uos-PC at Apr 22 09:26:20 ...
         kernel:[   82.154129] Internal error: Oops: 96000004 [#1] SMP
    
    This patch aims to fix this problem, avoid that reading file
    triggers the kernel sementfault.
    
    Signed-off-by: limingyu <limingyu@uniontech.com>
    Signed-off-by: zhoubinbin <zhoubinbin@uniontech.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2a244e7480881f17f42d334ae28cdb17444f86a
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Apr 16 12:14:18 2020 +0200

    spi: spi-mem: Fix Dual/Quad modes on Octal-capable devices
    
    [ Upstream commit 80300a7d5f2d7178335652f41d2e55ba898b4ec1 ]
    
    Currently buswidths 2 and 4 are rejected for a device that advertises
    Octal capabilities.  Allow these buswidths, just like is done for
    buswidth 2 and Quad-capable devices.
    
    Fixes: b12a084c8729ef42 ("spi: spi-mem: add support for octal mode I/O data transfer")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200416101418.14379-1-geert+renesas@glider.be
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07d45406db6995b58b62ddb44c6b32f873255730
Author: Julien Thierry <jthierry@redhat.com>
Date:   Fri Mar 27 15:28:41 2020 +0000

    objtool: Ignore empty alternatives
    
    [ Upstream commit 7170cf47d16f1ba29eca07fd818870b7af0a93a5 ]
    
    The .alternatives section can contain entries with no original
    instructions. Objtool will currently crash when handling such an entry.
    
    Just skip that entry, but still give a warning to discourage useless
    entries.
    
    Signed-off-by: Julien Thierry <jthierry@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1121685ca1bd5b8b9a11898abd63c95ea5fb78ae
Author: Brad Love <brad@nextdimension.cc>
Date:   Thu Nov 14 21:03:57 2019 +0100

    media: si2157: Better check for running tuner in init
    
    [ Upstream commit e955f959ac52e145f27ff2be9078b646d0352af0 ]
    
    Getting the Xtal trim property to check if running is less error prone.
    Reset if_frequency if state is unknown.
    
    Replaces the previous "garbage check".
    
    Signed-off-by: Brad Love <brad@nextdimension.cc>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18b2a6f250cc13b9065628af4369bae8aefa9ee5
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Apr 7 11:32:37 2020 +0200

    media: vicodec: Fix error codes in probe function
    
    [ Upstream commit f36592e7b343d853edf44d3545bb68961c0949a4 ]
    
    If these functions fail then we return success, but we should instead
    preserve negative error code and return that.
    
    Fixes: fde649b418d1 ("media: vicodec: Register another node for stateless decoder")
    Fixes: c022a4a95722 ("media: vicodec: add struct for encoder/decoder instance")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9f8f0c24203eae421ecc69d5d8667648b3b392f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 8 18:26:48 2020 +0200

    crypto: ccp -- don't "select" CONFIG_DMADEVICES
    
    [ Upstream commit eebac678556d6927f09a992872f4464cf3aecc76 ]
    
    DMADEVICES is the top-level option for the slave DMA
    subsystem, and should not be selected by device drivers,
    as this can cause circular dependencies such as:
    
    drivers/net/ethernet/freescale/Kconfig:6:error: recursive dependency detected!
    drivers/net/ethernet/freescale/Kconfig:6:       symbol NET_VENDOR_FREESCALE depends on PPC_BESTCOMM
    drivers/dma/bestcomm/Kconfig:6: symbol PPC_BESTCOMM depends on DMADEVICES
    drivers/dma/Kconfig:6:  symbol DMADEVICES is selected by CRYPTO_DEV_SP_CCP
    drivers/crypto/ccp/Kconfig:10:  symbol CRYPTO_DEV_SP_CCP depends on CRYPTO
    crypto/Kconfig:16:      symbol CRYPTO is selected by LIBCRC32C
    lib/Kconfig:222:        symbol LIBCRC32C is selected by LIQUIDIO
    drivers/net/ethernet/cavium/Kconfig:65: symbol LIQUIDIO depends on PTP_1588_CLOCK
    drivers/ptp/Kconfig:8:  symbol PTP_1588_CLOCK is implied by FEC
    drivers/net/ethernet/freescale/Kconfig:23:      symbol FEC depends on NET_VENDOR_FREESCALE
    
    The LIQUIDIO driver causing this problem is addressed in a
    separate patch, but this change is needed to prevent it from
    happening again.
    
    Using "depends on DMADEVICES" is what we do for all other
    implementations of slave DMA controllers as well.
    
    Fixes: b3c2fee5d66b ("crypto: ccp - Ensure all dependencies are specified")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68aeaeac683b82b8dc2f696449a8d13256ce32f3
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Fri Mar 13 00:47:09 2020 +0100

    media: imx: imx7-mipi-csis: Cleanup and fix subdev pad format handling
    
    [ Upstream commit d321dd233b9f2bb407b8e6b4759408f09ec207c3 ]
    
    The subdev set pad format operation currently misbehaves in multiple ways:
    
    - mipi_csis_try_format() unconditionally stores the format in the device
      state, even for V4L2_SUBDEV_FORMAT_TRY.
    
    - The format is never stored in the pad cfg, but the pad cfg format
      always overwrites the format requested by the user.
    
    - The sink format is not propagated to the source.
    
    Fix all this by reworking the set format operation as follows:
    
    1. For the source pad, turn set() into get() as the source format is not
       modifiable.
    2. Validate the requested format and updated the stored format
       accordingly.
    3. Return the format actually set.
    4. Propagate the format from sink to source.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff41c7b3c7db7f35df451f4cad4ceb55de7fda20
Author: Bingbu Cao <bingbu.cao@intel.com>
Date:   Tue Mar 24 05:16:48 2020 +0100

    media: staging: imgu: do not hold spinlock during freeing mmu page table
    
    [ Upstream commit e1ebe9f9c88e5a78fcc4670a9063c9b3cd87dda4 ]
    
    ImgU need set the mmu page table in memory as uncached, and set back
    to write-back when free the page table by set_memory_wb(),
    set_memory_wb() can not do flushing without interrupt, so the spinlock
    should not be hold during ImgU page alloc and free, the interrupt
    should be enabled during memory cache flush.
    
    This patch release spinlock before freeing pages table.
    
    Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
    Reviewed-by: Tomasz Figa <tfiga@chromium.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22710f6c35a30c67f32bcaaa1f013f7ed5a4e9f7
Author: Bogdan Togorean <bogdan.togorean@analog.com>
Date:   Mon Apr 13 14:35:08 2020 +0300

    drm: bridge: adv7511: Extend list of audio sample rates
    
    [ Upstream commit b97b6a1f6e14a25d1e1ca2a46c5fa3e2ca374e22 ]
    
    ADV7511 support sample rates up to 192kHz. CTS and N parameters should
    be computed accordingly so this commit extend the list up to maximum
    supported sample rate.
    
    Signed-off-by: Bogdan Togorean <bogdan.togorean@analog.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Signed-off-by: Andrzej Hajda <a.hajda@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200413113513.86091-2-bogdan.togorean@analog.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30c5d951a557ae2dd003a797e1766e735cb898d9
Author: Maharaja Kennadyrajan <mkenna@codeaurora.org>
Date:   Thu Mar 26 18:36:36 2020 +0200

    ath10k: Fix the race condition in firmware dump work queue
    
    [ Upstream commit 3d1c60460fb2823a19ead9e6ec8f184dd7271aa7 ]
    
    There is a race condition, when the user writes 'hw-restart' and
    'hard' in the simulate_fw_crash debugfs file without any delay.
    In the above scenario, the firmware dump work queue(scheduled by
    'hard') should be handled gracefully, while the target is in the
    'hw-restart'.
    
    Tested HW: QCA9984
    Tested FW: 10.4-3.9.0.2-00044
    
    Co-developed-by: Govindaraj Saminathan <gsamin@codeaurora.org>
    Signed-off-by: Govindaraj Saminathan <gsamin@codeaurora.org>
    Signed-off-by: Maharaja Kennadyrajan <mkenna@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1585213077-28439-1-git-send-email-mkenna@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fc5719b85ec044dc0824930bc375ab23991577c
Author: Christian König <christian.koenig@amd.com>
Date:   Thu Mar 12 12:03:34 2020 +0100

    drm/amdgpu: fix and cleanup amdgpu_gem_object_close v4
    
    [ Upstream commit 82c416b13cb7d22b96ec0888b296a48dff8a09eb ]
    
    The problem is that we can't add the clear fence to the BO
    when there is an exclusive fence on it since we can't
    guarantee the the clear fence will complete after the
    exclusive one.
    
    To fix this refactor the function and also add the exclusive
    fence as shared to the resv object.
    
    v2: fix warning
    v3: add excl fence as shared instead
    v4: squash in fix for fence handling in amdgpu_gem_object_close
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: xinhui pan <xinhui.pan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3ec5b536fc1ba869cab1958a2be7ac331dc5caf
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed May 27 13:37:00 2020 +0200

    ACPI: GED: use correct trigger type field in _Exx / _Lxx handling
    
    commit e5c399b0bd6490c12c0af2a9eaa9d7cd805d52c9 upstream.
    
    Commit ea6f3af4c5e63f69 ("ACPI: GED: add support for _Exx / _Lxx handler
    methods") added a reference to the 'triggering' field of either the
    normal or the extended ACPI IRQ resource struct, but inadvertently used
    the wrong pointer in the latter case. Note that both pointers refer to the
    same union, and the 'triggering' field appears at the same offset in both
    struct types, so it currently happens to work by accident. But let's fix
    it nonetheless
    
    Fixes: ea6f3af4c5e63f69 ("ACPI: GED: add support for _Exx / _Lxx handler methods")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
