commit 6c6f924f9c6294944ee6efb1bbd8cdb853582e50
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 31 12:55:57 2018 +0100

    Linux 4.9.79

commit f12d0602633decf073796f3aaa59eec7ff2da9e2
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Mon Jan 22 20:11:06 2018 +0000

    nfsd: auth: Fix gid sorting when rootsquash enabled
    
    commit 1995266727fa8143897e89b55f5d3c79aa828420 upstream.
    
    Commit bdcf0a423ea1 ("kernel: make groups_sort calling a responsibility
    group_info allocators") appears to break nfsd rootsquash in a pretty
    major way.
    
    It adds a call to groups_sort() inside the loop that copies/squashes
    gids, which means the valid gids are sorted along with the following
    garbage.  The net result is that the highest numbered valid gids are
    replaced with any lower-valued garbage gids, possibly including 0.
    
    We should sort only once, after filling in all the gids.
    
    Fixes: bdcf0a423ea1 ("kernel: make groups_sort calling a responsibility ...")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Acked-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Wolfgang Walter <linux@stwm.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f531fbb06a56361d4a9807bbb16db4facc8537d3
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jan 29 02:49:01 2018 +0100

    bpf: reject stores into ctx via st and xadd
    
    [ upstream commit f37a8cb84cce18762e8f86a70bd6a49a66ab964c ]
    
    Alexei found that verifier does not reject stores into context
    via BPF_ST instead of BPF_STX. And while looking at it, we
    also should not allow XADD variant of BPF_STX.
    
    The context rewriter is only assuming either BPF_LDX_MEM- or
    BPF_STX_MEM-type operations, thus reject anything other than
    that so that assumptions in the rewriter properly hold. Add
    test cases as well for BPF selftests.
    
    Fixes: d691f9e8d440 ("bpf: allow programs to write to certain skb fields")
    Reported-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 265d7657c9baf09d57eb386d0374e912e9649626
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Jan 29 02:49:00 2018 +0100

    bpf: fix 32-bit divide by zero
    
    [ upstream commit 68fda450a7df51cff9e5a4d4a4d9d0d5f2589153 ]
    
    due to some JITs doing if (src_reg == 0) check in 64-bit mode
    for div/mod operations mask upper 32-bits of src register
    before doing the check
    
    Fixes: 622582786c9e ("net: filter: x86: internal BPF JIT")
    Fixes: 7a12b5031c6b ("sparc64: Add eBPF JIT.")
    Reported-by: syzbot+48340bb518e88849e2e3@syzkaller.appspotmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4606077802f2c6ef7aff5185d9f7d99a50784ffd
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 29 02:48:59 2018 +0100

    bpf: fix divides by zero
    
    [ upstream commit c366287ebd698ef5e3de300d90cd62ee9ee7373e ]
    
    Divides by zero are not nice, lets avoid them if possible.
    
    Also do_div() seems not needed when dealing with 32bit operands,
    but this seems a minor detail.
    
    Fixes: bd4cf0ed331a ("net: filter: rework/optimize internal BPF interpreter's instruction set")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cb917aa1f1e03df9a4c29b363e3900d73508fa8
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jan 29 02:48:58 2018 +0100

    bpf: avoid false sharing of map refcount with max_entries
    
    [ upstream commit be95a845cc4402272994ce290e3ad928aff06cb9 ]
    
    In addition to commit b2157399cc98 ("bpf: prevent out-of-bounds
    speculation") also change the layout of struct bpf_map such that
    false sharing of fast-path members like max_entries is avoided
    when the maps reference counter is altered. Therefore enforce
    them to be placed into separate cachelines.
    
    pahole dump after change:
    
      struct bpf_map {
            const struct bpf_map_ops  * ops;                 /*     0     8 */
            struct bpf_map *           inner_map_meta;       /*     8     8 */
            void *                     security;             /*    16     8 */
            enum bpf_map_type          map_type;             /*    24     4 */
            u32                        key_size;             /*    28     4 */
            u32                        value_size;           /*    32     4 */
            u32                        max_entries;          /*    36     4 */
            u32                        map_flags;            /*    40     4 */
            u32                        pages;                /*    44     4 */
            u32                        id;                   /*    48     4 */
            int                        numa_node;            /*    52     4 */
            bool                       unpriv_array;         /*    56     1 */
    
            /* XXX 7 bytes hole, try to pack */
    
            /* --- cacheline 1 boundary (64 bytes) --- */
            struct user_struct *       user;                 /*    64     8 */
            atomic_t                   refcnt;               /*    72     4 */
            atomic_t                   usercnt;              /*    76     4 */
            struct work_struct         work;                 /*    80    32 */
            char                       name[16];             /*   112    16 */
            /* --- cacheline 2 boundary (128 bytes) --- */
    
            /* size: 128, cachelines: 2, members: 17 */
            /* sum members: 121, holes: 1, sum holes: 7 */
      };
    
    Now all entries in the first cacheline are read only throughout
    the life time of the map, set up once during map creation. Overall
    struct size and number of cachelines doesn't change from the
    reordering. struct bpf_map is usually first member and embedded
    in map structs in specific map implementations, so also avoid those
    members to sit at the end where it could potentially share the
    cacheline with first map values e.g. in the array since remote
    CPUs could trigger map updates just as well for those (easily
    dirtying members like max_entries intentionally as well) while
    having subsequent values in cache.
    
    Quoting from Google's Project Zero blog [1]:
    
      Additionally, at least on the Intel machine on which this was
      tested, bouncing modified cache lines between cores is slow,
      apparently because the MESI protocol is used for cache coherence
      [8]. Changing the reference counter of an eBPF array on one
      physical CPU core causes the cache line containing the reference
      counter to be bounced over to that CPU core, making reads of the
      reference counter on all other CPU cores slow until the changed
      reference counter has been written back to memory. Because the
      length and the reference counter of an eBPF array are stored in
      the same cache line, this also means that changing the reference
      counter on one physical CPU core causes reads of the eBPF array's
      length to be slow on other physical CPU cores (intentional false
      sharing).
    
    While this doesn't 'control' the out-of-bounds speculation through
    masking the index as in commit b2157399cc98, triggering a manipulation
    of the map's reference counter is really trivial, so lets not allow
    to easily affect max_entries from it.
    
    Splitting to separate cachelines also generally makes sense from
    a performance perspective anyway in that fast-path won't have a
    cache miss if the map gets pinned, reused in other progs, etc out
    of control path, thus also avoids unintentional false sharing.
    
      [1] https://googleprojectzero.blogspot.ch/2018/01/reading-privileged-memory-with-side.html
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcabc6d008856356258f86e96bfcf3806acf9f38
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jan 29 02:48:57 2018 +0100

    bpf: arsh is not supported in 32 bit alu thus reject it
    
    [ upstream commit 7891a87efc7116590eaba57acc3c422487802c6f ]
    
    The following snippet was throwing an 'unknown opcode cc' warning
    in BPF interpreter:
    
      0: (18) r0 = 0x0
      2: (7b) *(u64 *)(r10 -16) = r0
      3: (cc) (u32) r0 s>>= (u32) r0
      4: (95) exit
    
    Although a number of JITs do support BPF_ALU | BPF_ARSH | BPF_{K,X}
    generation, not all of them do and interpreter does neither. We can
    leave existing ones and implement it later in bpf-next for the
    remaining ones, but reject this properly in verifier for the time
    being.
    
    Fixes: 17a5267067f3 ("bpf: verifier (add verifier core)")
    Reported-by: syzbot+93c4904c5c70348a6890@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3d6dd6a66c1bf01a36926705db4687c7d0d4734
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Jan 29 02:48:56 2018 +0100

    bpf: introduce BPF_JIT_ALWAYS_ON config
    
    [ upstream commit 290af86629b25ffd1ed6232c4e9107da031705cb ]
    
    The BPF interpreter has been used as part of the spectre 2 attack CVE-2017-5715.
    
    A quote from goolge project zero blog:
    "At this point, it would normally be necessary to locate gadgets in
    the host kernel code that can be used to actually leak data by reading
    from an attacker-controlled location, shifting and masking the result
    appropriately and then using the result of that as offset to an
    attacker-controlled address for a load. But piecing gadgets together
    and figuring out which ones work in a speculation context seems annoying.
    So instead, we decided to use the eBPF interpreter, which is built into
    the host kernel - while there is no legitimate way to invoke it from inside
    a VM, the presence of the code in the host kernel's text section is sufficient
    to make it usable for the attack, just like with ordinary ROP gadgets."
    
    To make attacker job harder introduce BPF_JIT_ALWAYS_ON config
    option that removes interpreter from the kernel in favor of JIT-only mode.
    So far eBPF JIT is supported by:
    x64, arm64, arm32, sparc64, s390, powerpc64, mips64
    
    The start of JITed program is randomized and code page is marked as read-only.
    In addition "constant blinding" can be turned on with net.core.bpf_jit_harden
    
    v2->v3:
    - move __bpf_prog_ret0 under ifdef (Daniel)
    
    v1->v2:
    - fix init order, test_bpf and cBPF (Daniel's feedback)
    - fix offloaded bpf (Jakub's feedback)
    - add 'return 0' dummy in case something can invoke prog->bpf_func
    - retarget bpf tree. For bpf-next the patch would need one extra hunk.
      It will be sent when the trees are merged back to net-next
    
    Considered doing:
      int bpf_jit_enable __read_mostly = BPF_EBPF_JIT_DEFAULT;
    but it seems better to land the patch as-is and in bpf-next remove
    bpf_jit_enable global variable from all JITs, consolidate in one place
    and remove this jit_init() function.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5226bb3b95515d7f6f2e1c11ac78b612e0056342
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Jan 29 02:48:55 2018 +0100

    bpf: fix bpf_tail_call() x64 JIT
    
    [ upstream commit 90caccdd8cc0215705f18b92771b449b01e2474a ]
    
    - bpf prog_array just like all other types of bpf array accepts 32-bit index.
      Clarify that in the comment.
    - fix x64 JIT of bpf_tail_call which was incorrectly loading 8 instead of 4 bytes
    - tighten corresponding check in the interpreter to stay consistent
    
    The JIT bug can be triggered after introduction of BPF_F_NUMA_NODE flag
    in commit 96eabe7a40aa in 4.14. Before that the map_flags would stay zero and
    though JIT code is wrong it will check bounds correctly.
    Hence two fixes tags. All other JITs don't have this problem.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Fixes: 96eabe7a40aa ("bpf: Allow selecting numa node during map creation")
    Fixes: b52f00e6a715 ("x86: bpf_jit: implement bpf_tail_call() helper")
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c964ad34f6d9c5c907e5cc2f1a855d044346aa8a
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 29 02:48:54 2018 +0100

    x86: bpf_jit: small optimization in emit_bpf_tail_call()
    
    [ upstream commit 84ccac6e7854ebbfb56d2fc6d5bef9be49bb304c ]
    
    Saves 4 bytes replacing following instructions :
    
    lea rax, [rsi + rdx * 8 + offsetof(...)]
    mov rax, qword ptr [rax]
    cmp rax, 0
    
    by :
    
    mov rax, [rsi + rdx * 8 + offsetof(...)]
    test rax, rax
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c98ff7299b404f110167883695f81080723e6e15
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jan 26 14:54:32 2018 +0100

    hrtimer: Reset hrtimer cpu base proper on CPU hotplug
    
    commit d5421ea43d30701e03cadc56a38854c36a8b4433 upstream.
    
    The hrtimer interrupt code contains a hang detection and mitigation
    mechanism, which prevents that a long delayed hrtimer interrupt causes a
    continous retriggering of interrupts which prevent the system from making
    progress. If a hang is detected then the timer hardware is programmed with
    a certain delay into the future and a flag is set in the hrtimer cpu base
    which prevents newly enqueued timers from reprogramming the timer hardware
    prior to the chosen delay. The subsequent hrtimer interrupt after the delay
    clears the flag and resumes normal operation.
    
    If such a hang happens in the last hrtimer interrupt before a CPU is
    unplugged then the hang_detected flag is set and stays that way when the
    CPU is plugged in again. At that point the timer hardware is not armed and
    it cannot be armed because the hang_detected flag is still active, so
    nothing clears that flag. As a consequence the CPU does not receive hrtimer
    interrupts and no timers expire on that CPU which results in RCU stalls and
    other malfunctions.
    
    Clear the flag along with some other less critical members of the hrtimer
    cpu base to ensure starting from a clean state when a CPU is plugged in.
    
    Thanks to Paul, Sebastian and Anna-Maria for their help to get down to the
    root cause of that hard to reproduce heisenbug. Once understood it's
    trivial and certainly justifies a brown paperbag.
    
    Fixes: 41d2e4949377 ("hrtimer: Tune hrtimer_interrupt hang logic")
    Reported-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sebastian Sewior <bigeasy@linutronix.de>
    Cc: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Link: https://lkml.kernel.org/r/alpine.DEB.2.20.1801261447590.2067@nanos
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f3a6cadf494f378b7839de14063793259ad5626
Author: Jia Zhang <zhang.jia@linux.alibaba.com>
Date:   Tue Jan 23 11:41:32 2018 +0100

    x86/microcode/intel: Extend BDW late-loading further with LLC size check
    
    commit 7e702d17ed138cf4ae7c00e8c00681ed464587c7 upstream.
    
    Commit b94b73733171 ("x86/microcode/intel: Extend BDW late-loading with a
    revision check") reduced the impact of erratum BDF90 for Broadwell model
    79.
    
    The impact can be reduced further by checking the size of the last level
    cache portion per core.
    
    Tony: "The erratum says the problem only occurs on the large-cache SKUs.
    So we only need to avoid the update if we are on a big cache SKU that is
    also running old microcode."
    
    For more details, see erratum BDF90 in document #334165 (Intel Xeon
    Processor E7-8800/4800 v4 Product Family Specification Update) from
    September 2017.
    
    Fixes: b94b73733171 ("x86/microcode/intel: Extend BDW late-loading with a revision check")
    Signed-off-by: Jia Zhang <zhang.jia@linux.alibaba.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Tony Luck <tony.luck@intel.com>
    Link: https://lkml.kernel.org/r/1516321542-31161-1-git-send-email-zhang.jia@linux.alibaba.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc1932c69835928dcb6259c744043dd03028cdee
Author: Xiao Liang <xiliang@redhat.com>
Date:   Mon Jan 22 14:12:52 2018 +0800

    perf/x86/amd/power: Do not load AMD power module on !AMD platforms
    
    commit 40d4071ce2d20840d224b4a77b5dc6f752c9ab15 upstream.
    
    The AMD power module can be loaded on non AMD platforms, but unload fails
    with the following Oops:
    
     BUG: unable to handle kernel NULL pointer dereference at           (null)
     IP: __list_del_entry_valid+0x29/0x90
     Call Trace:
      perf_pmu_unregister+0x25/0xf0
      amd_power_pmu_exit+0x1c/0xd23 [power]
      SyS_delete_module+0x1a8/0x2b0
      ? exit_to_usermode_loop+0x8f/0xb0
      entry_SYSCALL_64_fastpath+0x20/0x83
    
    Return -ENODEV instead of 0 from the module init function if the CPU does
    not match.
    
    Fixes: c7ab62bfbe0e ("perf/x86/amd/power: Add AMD accumulated power reporting mechanism")
    Signed-off-by: Xiao Liang <xiliang@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20180122061252.6394-1-xiliang@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eecfa2eeefe3caef4c8d6b2284f6066c76ab26a1
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 17 14:21:13 2018 -0800

    flow_dissector: properly cap thoff field
    
    
    [ Upstream commit d0c081b49137cd3200f2023c0875723be66e7ce5 ]
    
    syzbot reported yet another crash [1] that is caused by
    insufficient validation of DODGY packets.
    
    Two bugs are happening here to trigger the crash.
    
    1) Flow dissection leaves with incorrect thoff field.
    
    2) skb_probe_transport_header() sets transport header to this invalid
    thoff, even if pointing after skb valid data.
    
    3) qdisc_pkt_len_init() reads out-of-bound data because it
    trusts tcp_hdrlen(skb)
    
    Possible fixes :
    
    - Full flow dissector validation before injecting bad DODGY packets in
    the stack.
     This approach was attempted here : https://patchwork.ozlabs.org/patch/
    861874/
    
    - Have more robust functions in the core.
      This might be needed anyway for stable versions.
    
    This patch fixes the flow dissection issue.
    
    [1]
    CPU: 1 PID: 3144 Comm: syzkaller271204 Not tainted 4.15.0-rc4-mm1+ #49
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:355 [inline]
     kasan_report+0x23b/0x360 mm/kasan/report.c:413
     __asan_report_load2_noabort+0x14/0x20 mm/kasan/report.c:432
     __tcp_hdrlen include/linux/tcp.h:35 [inline]
     tcp_hdrlen include/linux/tcp.h:40 [inline]
     qdisc_pkt_len_init net/core/dev.c:3160 [inline]
     __dev_queue_xmit+0x20d3/0x2200 net/core/dev.c:3465
     dev_queue_xmit+0x17/0x20 net/core/dev.c:3554
     packet_snd net/packet/af_packet.c:2943 [inline]
     packet_sendmsg+0x3ad5/0x60a0 net/packet/af_packet.c:2968
     sock_sendmsg_nosec net/socket.c:628 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:638
     sock_write_iter+0x31a/0x5d0 net/socket.c:907
     call_write_iter include/linux/fs.h:1776 [inline]
     new_sync_write fs/read_write.c:469 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:482
     vfs_write+0x189/0x510 fs/read_write.c:544
     SYSC_write fs/read_write.c:589 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:581
     entry_SYSCALL_64_fastpath+0x1f/0x96
    
    Fixes: 34fad54c2537 ("net: __skb_flow_dissect() must cap its return value")
    Fixes: a6e544b0a88b ("flow_dissector: Jump to exit code in __skb_flow_dissect")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18717ee28ef5c0285ff969d1e9357529a8a9233f
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Jan 15 11:37:29 2018 -0800

    tun: fix a memory leak for tfile->tx_array
    
    
    [ Upstream commit 4df0bfc79904b7169dc77dcce44598b1545721f9 ]
    
    tfile->tun could be detached before we close the tun fd,
    via tun_detach_all(), so it should not be used to check for
    tfile->tx_array.
    
    As Jason suggested, we probably have to clean it up
    unconditionally both in __tun_deatch() and tun_detach_all(),
    but this requires to check if it is initialized or not.
    Currently skb_array_cleanup() doesn't have such a check,
    so I check it in the caller and introduce a helper function,
    it is a bit ugly but we can always improve it in net-next.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Fixes: 1576d9860599 ("tun: switch to use skb array for tx")
    Cc: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1105145cb3d5eee496de1d55aaea160c78e1c5b5
Author: Yuval Mintz <yuvalm@mellanox.com>
Date:   Wed Jan 24 10:02:09 2018 +0100

    mlxsw: spectrum_router: Don't log an error on missing neighbor
    
    
    [ Upstream commit 1ecdaea02ca6bfacf2ecda500dc1af51e9780c42 ]
    
    Driver periodically samples all neighbors configured in device
    in order to update the kernel regarding their state. When finding
    an entry configured in HW that doesn't show in neigh_lookup()
    driver logs an error message.
    This introduces a race when removing multiple neighbors -
    it's possible that a given entry would still be configured in HW
    as its removal is still being processed but is already removed
    from the kernel's neighbor tables.
    
    Simply remove the error message and gracefully accept such events.
    
    Fixes: c723c735fa6b ("mlxsw: spectrum_router: Periodically update the kernel's neigh table")
    Fixes: 60f040ca11b9 ("mlxsw: spectrum_router: Periodically dump active IPv6 neighbours")
    Signed-off-by: Yuval Mintz <yuvalm@mellanox.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3110e2134c9718a1f3c091873769d1d9b621bb87
Author: Willem de Bruijn <willemb@google.com>
Date:   Fri Jan 19 09:29:18 2018 -0500

    gso: validate gso_type in GSO handlers
    
    
    [ Upstream commit 121d57af308d0cf943f08f4738d24d3966c38cd9 ]
    
    Validate gso_type during segmentation as SKB_GSO_DODGY sources
    may pass packets where the gso_type does not match the contents.
    
    Syzkaller was able to enter the SCTP gso handler with a packet of
    gso_type SKB_GSO_TCPV4.
    
    On entry of transport layer gso handlers, verify that the gso_type
    matches the transport protocol.
    
    Fixes: 90017accff61 ("sctp: Add GSO support")
    Link: http://lkml.kernel.org/r/<001a1137452496ffc305617e5fe0@google.com>
    Reported-by: syzbot+fee64147a25aecd48055@syzkaller.appspotmail.com
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc99c6d59adf7daf62522b09e25af72267c997c8
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Thu Jan 18 20:51:12 2018 +0300

    ip6_gre: init dev->mtu and dev->hard_header_len correctly
    
    
    [ Upstream commit 128bb975dc3c25d00de04e503e2fe0a780d04459 ]
    
    Commit b05229f44228 ("gre6: Cleanup GREv6 transmit path,
    call common GRE functions") moved dev->mtu initialization
    from ip6gre_tunnel_setup() to ip6gre_tunnel_init(), as a
    result, the previously set values, before ndo_init(), are
    reset in the following cases:
    
    * rtnl_create_link() can update dev->mtu from IFLA_MTU
      parameter.
    
    * ip6gre_tnl_link_config() is invoked before ndo_init() in
      netlink and ioctl setup, so ndo_init() can reset MTU
      adjustments with the lower device MTU as well, dev->mtu
      and dev->hard_header_len.
    
      Not applicable for ip6gretap because it has one more call
      to ip6gre_tnl_link_config(tunnel, 1) in ip6gre_tap_init().
    
    Fix the first case by updating dev->mtu with 'tb[IFLA_MTU]'
    parameter if a user sets it manually on a device creation,
    and fix the second one by moving ip6gre_tnl_link_config()
    call after register_netdevice().
    
    Fixes: b05229f44228 ("gre6: Cleanup GREv6 transmit path, call common GRE functions")
    Fixes: db2ec95d1ba4 ("ip6_gre: Fix MTU setting")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1711ba166e5f7148bc41b5e24f7f282ffc055515
Author: Ivan Vecera <cera@cera.cz>
Date:   Fri Jan 19 20:23:50 2018 +0100

    be2net: restore properly promisc mode after queues reconfiguration
    
    
    [ Upstream commit 52acf06451930eb4cefabd5ecea56e2d46c32f76 ]
    
    The commit 622190669403 ("be2net: Request RSS capability of Rx interface
    depending on number of Rx rings") modified be_update_queues() so the
    IFACE (HW representation of the netdevice) is destroyed and then
    re-created. This causes a regression because potential promiscuous mode
    is not restored properly during be_open() because the driver thinks
    that the HW has promiscuous mode already enabled.
    
    Note that Lancer is not affected by this bug because RX-filter flags are
    disabled during be_close() for this chipset.
    
    Cc: Sathya Perla <sathya.perla@broadcom.com>
    Cc: Ajit Khaparde <ajit.khaparde@broadcom.com>
    Cc: Sriharsha Basavapatna <sriharsha.basavapatna@broadcom.com>
    Cc: Somnath Kotur <somnath.kotur@broadcom.com>
    
    Fixes: 622190669403 ("be2net: Request RSS capability of Rx interface depending on number of Rx rings")
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00f9e47c6f9d9d25e1bf9cd5f58652d74e36d567
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Wed Jan 10 16:24:45 2018 +0100

    ppp: unlock all_ppp_mutex before registering device
    
    
    [ Upstream commit 0171c41835591e9aa2e384b703ef9a6ae367c610 ]
    
    ppp_dev_uninit(), which is the .ndo_uninit() handler of PPP devices,
    needs to lock pn->all_ppp_mutex. Therefore we mustn't call
    register_netdevice() with pn->all_ppp_mutex already locked, or we'd
    deadlock in case register_netdevice() fails and calls .ndo_uninit().
    
    Fortunately, we can unlock pn->all_ppp_mutex before calling
    register_netdevice(). This lock protects pn->units_idr, which isn't
    used in the device registration process.
    
    However, keeping pn->all_ppp_mutex locked during device registration
    did ensure that no device in transient state would be published in
    pn->units_idr. In practice, unlocking it before calling
    register_netdevice() doesn't change this property: ppp_unit_register()
    is called with 'ppp_mutex' locked and all searches done in
    pn->units_idr hold this lock too.
    
    Fixes: 8cb775bc0a34 ("ppp: fix device unregistration upon netns deletion")
    Reported-and-tested-by: syzbot+367889b9c9e279219175@syzkaller.appspotmail.com
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 260eb694b5a4bd3424a7c445128fb5a784e95e3d
Author: Jim Westfall <jwestfall@surrealistic.net>
Date:   Sun Jan 14 04:18:51 2018 -0800

    ipv4: Make neigh lookup keys for loopback/point-to-point devices be INADDR_ANY
    
    
    [ Upstream commit cd9ff4de0107c65d69d02253bb25d6db93c3dbc1 ]
    
    Map all lookup neigh keys to INADDR_ANY for loopback/point-to-point devices
    to avoid making an entry for every remote ip the device needs to talk to.
    
    This used the be the old behavior but became broken in a263b3093641f
    (ipv4: Make neigh lookups directly in output packet path) and later removed
    in 0bb4087cbec0 (ipv4: Fix neigh lookup keying over loopback/point-to-point
    devices) because it was broken.
    
    Signed-off-by: Jim Westfall <jwestfall@surrealistic.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 014510b11781c7ba17b4e2c25720ce15233c712f
Author: Jim Westfall <jwestfall@surrealistic.net>
Date:   Sun Jan 14 04:18:50 2018 -0800

    net: Allow neigh contructor functions ability to modify the primary_key
    
    
    [ Upstream commit 096b9854c04df86f03b38a97d40b6506e5730919 ]
    
    Use n->primary_key instead of pkey to account for the possibility that a neigh
    constructor function may have modified the primary_key value.
    
    Signed-off-by: Jim Westfall <jwestfall@surrealistic.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66c16a22e3b141152c2bc85236b48372b2b1e984
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Mon Jan 22 16:06:37 2018 -0500

    vmxnet3: repair memory leak
    
    
    [ Upstream commit 848b159835ddef99cc4193083f7e786c3992f580 ]
    
    with the introduction of commit
    b0eb57cb97e7837ebb746404c2c58c6f536f23fa, it appears that rq->buf_info
    is improperly handled.  While it is heap allocated when an rx queue is
    setup, and freed when torn down, an old line of code in
    vmxnet3_rq_destroy was not properly removed, leading to rq->buf_info[0]
    being set to NULL prior to its being freed, causing a memory leak, which
    eventually exhausts the system on repeated create/destroy operations
    (for example, when  the mtu of a vmxnet3 interface is changed
    frequently.
    
    Fix is pretty straight forward, just move the NULL set to after the
    free.
    
    Tested by myself with successful results
    
    Applies to net, and should likely be queued for stable, please
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Reported-By: boyang@redhat.com
    CC: boyang@redhat.com
    CC: Shrikrishna Khare <skhare@vmware.com>
    CC: "VMware, Inc." <pv-drivers@vmware.com>
    CC: David S. Miller <davem@davemloft.net>
    Acked-by: Shrikrishna Khare <skhare@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e52703d0746ee35326623c5442e9eec0139ffeb
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jan 10 12:50:25 2018 -0800

    tipc: fix a memory leak in tipc_nl_node_get_link()
    
    
    [ Upstream commit 59b36613e85fb16ebf9feaf914570879cd5c2a21 ]
    
    When tipc_node_find_by_name() fails, the nlmsg is not
    freed.
    
    While on it, switch to a goto label to properly
    free it.
    
    Fixes: be9c086715c ("tipc: narrow down exposure of struct tipc_node")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f056e7def4236bf5279da38410c93acee164d5a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jan 15 17:01:36 2018 +0800

    sctp: return error if the asoc has been peeled off in sctp_wait_for_sndbuf
    
    
    [ Upstream commit a0ff660058b88d12625a783ce9e5c1371c87951f ]
    
    After commit cea0cc80a677 ("sctp: use the right sk after waking up from
    wait_buf sleep"), it may change to lock another sk if the asoc has been
    peeled off in sctp_wait_for_sndbuf.
    
    However, the asoc's new sk could be already closed elsewhere, as it's in
    the sendmsg context of the old sk that can't avoid the new sk's closing.
    If the sk's last one refcnt is held by this asoc, later on after putting
    this asoc, the new sk will be freed, while under it's own lock.
    
    This patch is to revert that commit, but fix the old issue by returning
    error under the old sk's lock.
    
    Fixes: cea0cc80a677 ("sctp: use the right sk after waking up from wait_buf sleep")
    Reported-by: syzbot+ac6ea7baa4432811eb50@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e3534ea657e8e072e480b4a36c743458c5c852d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jan 15 17:02:00 2018 +0800

    sctp: do not allow the v4 socket to bind a v4mapped v6 address
    
    
    [ Upstream commit c5006b8aa74599ce19104b31d322d2ea9ff887cc ]
    
    The check in sctp_sockaddr_af is not robust enough to forbid binding a
    v4mapped v6 addr on a v4 socket.
    
    The worse thing is that v4 socket's bind_verify would not convert this
    v4mapped v6 addr to a v4 addr. syzbot even reported a crash as the v4
    socket bound a v6 addr.
    
    This patch is to fix it by doing the common sa.sa_family check first,
    then AF_INET check for v4mapped v6 addrs.
    
    Fixes: 7dab83de50c7 ("sctp: Support ipv6only AF_INET6 sockets.")
    Reported-by: syzbot+7b7b518b1228d2743963@syzkaller.appspotmail.com
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f51492d1bd5f7376d8175edd266b808d58df21f
Author: Francois Romieu <romieu@fr.zoreil.com>
Date:   Fri Jan 26 01:53:26 2018 +0100

    r8169: fix memory corruption on retrieval of hardware statistics.
    
    
    [ Upstream commit a78e93661c5fd30b9e1dee464b2f62f966883ef7 ]
    
    Hardware statistics retrieval hurts in tight invocation loops.
    
    Avoid extraneous write and enforce strict ordering of writes targeted to
    the tally counters dump area address registers.
    
    Signed-off-by: Francois Romieu <romieu@fr.zoreil.com>
    Tested-by: Oliver Freyermuth <o.freyermuth@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bd21b158e07e0b8c5a2ce832305a0ebfe42c480
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Mon Jan 22 18:06:37 2018 +0100

    pppoe: take ->needed_headroom of lower device into account on xmit
    
    
    [ Upstream commit 02612bb05e51df8489db5e94d0cf8d1c81f87b0c ]
    
    In pppoe_sendmsg(), reserving dev->hard_header_len bytes of headroom
    was probably fine before the introduction of ->needed_headroom in
    commit f5184d267c1a ("net: Allow netdevices to specify needed head/tailroom").
    
    But now, virtual devices typically advertise the size of their overhead
    in dev->needed_headroom, so we must also take it into account in
    skb_reserve().
    Allocation size of skb is also updated to take dev->needed_tailroom
    into account and replace the arbitrary 32 bytes with the real size of
    a PPPoE header.
    
    This issue was discovered by syzbot, who connected a pppoe socket to a
    gre device which had dev->header_ops->create == ipgre_header and
    dev->hard_header_len == 0. Therefore, PPPoE didn't reserve any
    headroom, and dev_hard_header() crashed when ipgre_header() tried to
    prepend its header to skb->data.
    
    skbuff: skb_under_panic: text:000000001d390b3a len:31 put:24
    head:00000000d8ed776f data:000000008150e823 tail:0x7 end:0xc0 dev:gre0
    ------------[ cut here ]------------
    kernel BUG at net/core/skbuff.c:104!
    invalid opcode: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
        (ftrace buffer empty)
    Modules linked in:
    CPU: 1 PID: 3670 Comm: syzkaller801466 Not tainted
    4.15.0-rc7-next-20180115+ #97
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:skb_panic+0x162/0x1f0 net/core/skbuff.c:100
    RSP: 0018:ffff8801d9bd7840 EFLAGS: 00010282
    RAX: 0000000000000083 RBX: ffff8801d4f083c0 RCX: 0000000000000000
    RDX: 0000000000000083 RSI: 1ffff1003b37ae92 RDI: ffffed003b37aefc
    RBP: ffff8801d9bd78a8 R08: 1ffff1003b37ae8a R09: 0000000000000000
    R10: 0000000000000001 R11: 0000000000000000 R12: ffffffff86200de0
    R13: ffffffff84a981ad R14: 0000000000000018 R15: ffff8801d2d34180
    FS:  00000000019c4880(0000) GS:ffff8801db300000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000208bc000 CR3: 00000001d9111001 CR4: 00000000001606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      skb_under_panic net/core/skbuff.c:114 [inline]
      skb_push+0xce/0xf0 net/core/skbuff.c:1714
      ipgre_header+0x6d/0x4e0 net/ipv4/ip_gre.c:879
      dev_hard_header include/linux/netdevice.h:2723 [inline]
      pppoe_sendmsg+0x58e/0x8b0 drivers/net/ppp/pppoe.c:890
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg+0xca/0x110 net/socket.c:640
      sock_write_iter+0x31a/0x5d0 net/socket.c:909
      call_write_iter include/linux/fs.h:1775 [inline]
      do_iter_readv_writev+0x525/0x7f0 fs/read_write.c:653
      do_iter_write+0x154/0x540 fs/read_write.c:932
      vfs_writev+0x18a/0x340 fs/read_write.c:977
      do_writev+0xfc/0x2a0 fs/read_write.c:1012
      SYSC_writev fs/read_write.c:1085 [inline]
      SyS_writev+0x27/0x30 fs/read_write.c:1082
      entry_SYSCALL_64_fastpath+0x29/0xa0
    
    Admittedly PPPoE shouldn't be allowed to run on non Ethernet-like
    interfaces, but reserving space for ->needed_headroom is a more
    fundamental issue that needs to be addressed first.
    
    Same problem exists for __pppoe_xmit(), which also needs to take
    dev->needed_headroom into account in skb_cow_head().
    
    Fixes: f5184d267c1a ("net: Allow netdevices to specify needed head/tailroom")
    Reported-by: syzbot+ed0838d0fa4c4f2b528e20286e6dc63effc7c14d@syzkaller.appspotmail.com
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf67be7a1a21c4d15593d7bacff5a59e30749b74
Author: Dan Streetman <ddstreet@ieee.org>
Date:   Thu Jan 18 16:14:26 2018 -0500

    net: tcp: close sock if net namespace is exiting
    
    
    [ Upstream commit 4ee806d51176ba7b8ff1efd81f271d7252e03a1d ]
    
    When a tcp socket is closed, if it detects that its net namespace is
    exiting, close immediately and do not wait for FIN sequence.
    
    For normal sockets, a reference is taken to their net namespace, so it will
    never exit while the socket is open.  However, kernel sockets do not take a
    reference to their net namespace, so it may begin exiting while the kernel
    socket is still open.  In this case if the kernel socket is a tcp socket,
    it will stay open trying to complete its close sequence.  The sock's dst(s)
    hold a reference to their interface, which are all transferred to the
    namespace's loopback interface when the real interfaces are taken down.
    When the namespace tries to take down its loopback interface, it hangs
    waiting for all references to the loopback interface to release, which
    results in messages like:
    
    unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    These messages continue until the socket finally times out and closes.
    Since the net namespace cleanup holds the net_mutex while calling its
    registered pernet callbacks, any new net namespace initialization is
    blocked until the current net namespace finishes exiting.
    
    After this change, the tcp socket notices the exiting net namespace, and
    closes immediately, releasing its dst(s) and their reference to the
    loopback interface, which lets the net namespace continue exiting.
    
    Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1711407
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=97811
    Signed-off-by: Dan Streetman <ddstreet@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a44d91150f3365968f6d83abfb76c4dd92bda168
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 18 19:59:19 2018 -0800

    net: qdisc_pkt_len_init() should be more robust
    
    
    [ Upstream commit 7c68d1a6b4db9012790af7ac0f0fdc0d2083422a ]
    
    Without proper validation of DODGY packets, we might very well
    feed qdisc_pkt_len_init() with invalid GSO packets.
    
    tcp_hdrlen() might access out-of-bound data, so let's use
    skb_header_pointer() and proper checks.
    
    Whole story is described in commit d0c081b49137 ("flow_dissector:
    properly cap thoff field")
    
    We have the goal of validating DODGY packets earlier in the stack,
    so we might very well revert this fix in the future.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Reported-by: syzbot+9da69ebac7dddd804552@syzkaller.appspotmail.com
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae16964f2154266f411b639ef101869ac3ae0b5
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Jan 19 11:50:46 2018 +0100

    net: igmp: fix source address check for IGMPv3 reports
    
    
    [ Upstream commit ad23b750933ea7bf962678972a286c78a8fa36aa ]
    
    Commit "net: igmp: Use correct source address on IGMPv3 reports"
    introduced a check to validate the source address of locally generated
    IGMPv3 packets.
    Instead of checking the local interface address directly, it uses
    inet_ifa_match(fl4->saddr, ifa), which checks if the address is on the
    local subnet (or equal to the point-to-point address if used).
    
    This breaks for point-to-point interfaces, so check against
    ifa->ifa_local directly.
    
    Cc: Kevin Cernekee <cernekee@chromium.org>
    Fixes: a46182b00290 ("net: igmp: Use correct source address on IGMPv3 reports")
    Reported-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 283498b4ca3534777cd28d17ebffd2e8f3fb0716
Author: Yuiko Oshino <yuiko.oshino@microchip.com>
Date:   Mon Jan 15 13:24:28 2018 -0500

    lan78xx: Fix failure in USB Full Speed
    
    
    [ Upstream commit a5b1379afbfabf91e3a689e82ac619a7157336b3 ]
    
    Fix initialize the uninitialized tx_qlen to an appropriate value when USB
    Full Speed is used.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Signed-off-by: Yuiko Oshino <yuiko.oshino@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2ceff11b46e6eed2a3138811864aaa645754127
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 11 22:31:18 2018 -0800

    ipv6: ip6_make_skb() needs to clear cork.base.dst
    
    
    [ Upstream commit 95ef498d977bf44ac094778fd448b98af158a3e6 ]
    
    In my last patch, I missed fact that cork.base.dst was not initialized
    in ip6_make_skb() :
    
    If ip6_setup_cork() returns an error, we might attempt a dst_release()
    on some random pointer.
    
    Fixes: 862c03ee1deb ("ipv6: fix possible mem leaks in ipv6_make_skb()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb50d8c9169ee0e90cd7a733d65cb86876d795c7
Author: Mike Maloney <maloney@google.com>
Date:   Wed Jan 10 12:45:10 2018 -0500

    ipv6: fix udpv6 sendmsg crash caused by too small MTU
    
    
    [ Upstream commit 749439bfac6e1a2932c582e2699f91d329658196 ]
    
    The logic in __ip6_append_data() assumes that the MTU is at least large
    enough for the headers.  A device's MTU may be adjusted after being
    added while sendmsg() is processing data, resulting in
    __ip6_append_data() seeing any MTU.  For an mtu smaller than the size of
    the fragmentation header, the math results in a negative 'maxfraglen',
    which causes problems when refragmenting any previous skb in the
    skb_write_queue, leaving it possibly malformed.
    
    Instead sendmsg returns EINVAL when the mtu is calculated to be less
    than IPV6_MIN_MTU.
    
    Found by syzkaller:
    kernel BUG at ./include/linux/skbuff.h:2064!
    invalid opcode: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 1 PID: 14216 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    task: ffff8801d0b68580 task.stack: ffff8801ac6b8000
    RIP: 0010:__skb_pull include/linux/skbuff.h:2064 [inline]
    RIP: 0010:__ip6_make_skb+0x18cf/0x1f70 net/ipv6/ip6_output.c:1617
    RSP: 0018:ffff8801ac6bf570 EFLAGS: 00010216
    RAX: 0000000000010000 RBX: 0000000000000028 RCX: ffffc90003cce000
    RDX: 00000000000001b8 RSI: ffffffff839df06f RDI: ffff8801d9478ca0
    RBP: ffff8801ac6bf780 R08: ffff8801cc3f1dbc R09: 0000000000000000
    R10: ffff8801ac6bf7a0 R11: 43cb4b7b1948a9e7 R12: ffff8801cc3f1dc8
    R13: ffff8801cc3f1d40 R14: 0000000000001036 R15: dffffc0000000000
    FS:  00007f43d740c700(0000) GS:ffff8801dc100000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f7834984000 CR3: 00000001d79b9000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     ip6_finish_skb include/net/ipv6.h:911 [inline]
     udp_v6_push_pending_frames+0x255/0x390 net/ipv6/udp.c:1093
     udpv6_sendmsg+0x280d/0x31a0 net/ipv6/udp.c:1363
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:762
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     SYSC_sendto+0x352/0x5a0 net/socket.c:1750
     SyS_sendto+0x40/0x50 net/socket.c:1718
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f43d740bc08 EFLAGS: 00000216 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00000000007180a8 RCX: 00000000004512e9
    RDX: 000000000000002e RSI: 0000000020d08000 RDI: 0000000000000005
    RBP: 0000000000000086 R08: 00000000209c1000 R09: 000000000000001c
    R10: 0000000000040800 R11: 0000000000000216 R12: 00000000004b9c69
    R13: 00000000ffffffff R14: 0000000000000005 R15: 00000000202c2000
    Code: 9e 01 fe e9 c5 e8 ff ff e8 7f 9e 01 fe e9 4a ea ff ff 48 89 f7 e8 52 9e 01 fe e9 aa eb ff ff e8 a8 b6 cf fd 0f 0b e8 a1 b6 cf fd <0f> 0b 49 8d 45 78 4d 8d 45 7c 48 89 85 78 fe ff ff 49 8d 85 ba
    RIP: __skb_pull include/linux/skbuff.h:2064 [inline] RSP: ffff8801ac6bf570
    RIP: __ip6_make_skb+0x18cf/0x1f70 net/ipv6/ip6_output.c:1617 RSP: ffff8801ac6bf570
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Mike Maloney <maloney@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b0d3e81cdecb92b12c9d7924749a6f62f855790
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Mon Jan 22 20:06:42 2018 +0000

    ipv6: Fix getsockopt() for sockets with default IPV6_AUTOFLOWLABEL
    
    
    [ Upstream commit e9191ffb65d8e159680ce0ad2224e1acbde6985c ]
    
    Commit 513674b5a2c9 ("net: reevalulate autoflowlabel setting after
    sysctl setting") removed the initialisation of
    ipv6_pinfo::autoflowlabel and added a second flag to indicate
    whether this field or the net namespace default should be used.
    
    The getsockopt() handling for this case was not updated, so it
    currently returns 0 for all sockets for which IPV6_AUTOFLOWLABEL is
    not explicitly enabled.  Fix it to return the effective value, whether
    that has been set at the socket or net namespace level.
    
    Fixes: 513674b5a2c9 ("net: reevalulate autoflowlabel setting after sysctl ...")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bb5ae9718f64c3fe09f2210a7a5628055529425
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Fri Jan 26 15:14:16 2018 +0300

    dccp: don't restart ccid2_hc_tx_rto_expire() if sk in closed state
    
    
    [ Upstream commit dd5684ecae3bd8e44b644f50e2c12c7e57fdfef5 ]
    
    ccid2_hc_tx_rto_expire() timer callback always restarts the timer
    again and can run indefinitely (unless it is stopped outside), and after
    commit 120e9dabaf55 ("dccp: defer ccid_hc_tx_delete() at dismantle time"),
    which moved ccid_hc_tx_delete() (also includes sk_stop_timer()) from
    dccp_destroy_sock() to sk_destruct(), this started to happen quite often.
    The timer prevents releasing the socket, as a result, sk_destruct() won't
    be called.
    
    Found with LTP/dccp_ipsec tests running on the bonding device,
    which later couldn't be unloaded after the tests were completed:
    
      unregister_netdevice: waiting for bond0 to become free. Usage count = 148
    
    Fixes: 2a91aa396739 ("[DCCP] CCID2: Initial CCID2 (TCP-Like) implementation")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f6c581bcb3cd5a248acbbf8a91930d13d6474f1
Author: Greg KH <gregkh@linuxfoundation.org>
Date:   Wed Mar 8 19:03:44 2017 +0100

    eventpoll.h: add missing epoll event masks
    
    commit 7e040726850a106587485c21bdacc0bfc8a0cbed upstream.
    
    [resend due to me forgetting to cc: linux-api the first time around I
    posted these back on Feb 23]
    
    From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    For some reason these values are not in the uapi header file, so any
    libc has to define it themselves.  To prevent them from needing to do
    this, just have the kernel provide the correct values.
    
    Reported-by: Elliott Hughes <enh@google.com>
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a0be5afbfbb1d14efdc98a6615fc52082243bd1
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Fri Jan 26 16:23:02 2018 +0000

    vsyscall: Fix permissions for emulate mode with KAISER/PTI
    
    The backport of KAISER to 4.4 turned vsyscall emulate mode into native
    mode.  Add a vsyscall_pgprot variable to hold the correct page
    protections, like Borislav and Hugh did for 3.2 and 3.18.
    
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1be7d46e775c2fbec57bbce7190b66fbb7c58d1b
Author: Thomas Meyer <thomas@m3y3r.de>
Date:   Sun Aug 20 13:26:04 2017 +0200

    um: link vmlinux with -no-pie
    
    commit 883354afbc109c57f925ccc19840055193da0cc0 upstream.
    
    Debian's gcc defaults to pie. The global Makefile already defines the -fno-pie option.
    Link UML dynamic kernel image also with -no-pie to fix the build.
    
    Signed-off-by: Thomas Meyer <thomas@m3y3r.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Cc: Bernie Innocenti <codewiz@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d680db722516dbf2d564d2118127270b88b1b663
Author: Martin Brandenburg <martin@omnibond.com>
Date:   Thu Jan 25 19:39:44 2018 -0500

    orangefs: fix deadlock; do not write i_size in read_iter
    
    commit 6793f1c450b1533a5e9c2493490de771d38b24f9 upstream.
    
    After do_readv_writev, the inode cache is invalidated anyway, so i_size
    will never be read.  It will be fetched from the server which will also
    know about updates from other machines.
    
    Fixes deadlock on 32-bit SMP.
    
    See https://marc.info/?l=linux-fsdevel&m=151268557427760&w=2
    
    Signed-off-by: Martin Brandenburg <martin@omnibond.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42f0aba58e00aedc395460e621896532d009c64f
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Fri Jan 19 09:43:39 2018 -0800

    Input: trackpoint - force 3 buttons if 0 button is reported
    
    commit f5d07b9e98022d50720e38aa936fc11c67868ece upstream.
    
    Lenovo introduced trackpoint compatible sticks with minimum PS/2 commands.
    They supposed to reply with 0x02, 0x03, or 0x04 in response to the
    "Read Extended ID" command, so we would know not to try certain extended
    commands. Unfortunately even some trackpoints reporting the original IBM
    version (0x01 firmware 0x0e) now respond with incorrect data to the "Get
    Extended Buttons" command:
    
     thinkpad_acpi: ThinkPad BIOS R0DET87W (1.87 ), EC unknown
     thinkpad_acpi: Lenovo ThinkPad E470, model 20H1004SGE
    
     psmouse serio2: trackpoint: IBM TrackPoint firmware: 0x0e, buttons: 0/0
    
    Since there are no trackpoints without buttons, let's assume the trackpoint
    has 3 buttons when we get 0 response to the extended buttons query.
    
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=196253
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19a7db1e2ef38865a704ea4dfd178b02a8026ada
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Wed May 3 14:51:51 2017 -0700

    mm: fix 100% CPU kswapd busyloop on unreclaimable nodes
    
    commit c73322d098e4b6f5f0f0fa1330bf57e218775539 upstream.
    
    Patch series "mm: kswapd spinning on unreclaimable nodes - fixes and
    cleanups".
    
    Jia reported a scenario in which the kswapd of a node indefinitely spins
    at 100% CPU usage.  We have seen similar cases at Facebook.
    
    The kernel's current method of judging its ability to reclaim a node (or
    whether to back off and sleep) is based on the amount of scanned pages
    in proportion to the amount of reclaimable pages.  In Jia's and our
    scenarios, there are no reclaimable pages in the node, however, and the
    condition for backing off is never met.  Kswapd busyloops in an attempt
    to restore the watermarks while having nothing to work with.
    
    This series reworks the definition of an unreclaimable node based not on
    scanning but on whether kswapd is able to actually reclaim pages in
    MAX_RECLAIM_RETRIES (16) consecutive runs.  This is the same criteria
    the page allocator uses for giving up on direct reclaim and invoking the
    OOM killer.  If it cannot free any pages, kswapd will go to sleep and
    leave further attempts to direct reclaim invocations, which will either
    make progress and re-enable kswapd, or invoke the OOM killer.
    
    Patch #1 fixes the immediate problem Jia reported, the remainder are
    smaller fixlets, cleanups, and overall phasing out of the old method.
    
    Patch #6 is the odd one out.  It's a nice cleanup to get_scan_count(),
    and directly related to #5, but in itself not relevant to the series.
    
    If the whole series is too ambitious for 4.11, I would consider the
    first three patches fixes, the rest cleanups.
    
    This patch (of 9):
    
    Jia He reports a problem with kswapd spinning at 100% CPU when
    requesting more hugepages than memory available in the system:
    
    $ echo 4000 >/proc/sys/vm/nr_hugepages
    
    top - 13:42:59 up  3:37,  1 user,  load average: 1.09, 1.03, 1.01
    Tasks:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
    %Cpu(s):  0.0 us, 12.5 sy,  0.0 ni, 85.5 id,  2.0 wa,  0.0 hi,  0.0 si,  0.0 st
    KiB Mem:  31371520 total, 30915136 used,   456384 free,      320 buffers
    KiB Swap:  6284224 total,   115712 used,  6168512 free.    48192 cached Mem
    
      PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
       76 root      20   0       0      0      0 R 100.0 0.000 217:17.29 kswapd3
    
    At that time, there are no reclaimable pages left in the node, but as
    kswapd fails to restore the high watermarks it refuses to go to sleep.
    
    Kswapd needs to back away from nodes that fail to balance.  Up until
    commit 1d82de618ddd ("mm, vmscan: make kswapd reclaim in terms of
    nodes") kswapd had such a mechanism.  It considered zones whose
    theoretically reclaimable pages it had reclaimed six times over as
    unreclaimable and backed away from them.  This guard was erroneously
    removed as the patch changed the definition of a balanced node.
    
    However, simply restoring this code wouldn't help in the case reported
    here: there *are* no reclaimable pages that could be scanned until the
    threshold is met.  Kswapd would stay awake anyway.
    
    Introduce a new and much simpler way of backing off.  If kswapd runs
    through MAX_RECLAIM_RETRIES (16) cycles without reclaiming a single
    page, make it back off from the node.  This is the same number of shots
    direct reclaim takes before declaring OOM.  Kswapd will go to sleep on
    that node until a direct reclaimer manages to reclaim some pages, thus
    proving the node reclaimable again.
    
    [hannes@cmpxchg.org: check kswapd failure against the cumulative nr_reclaimed count]
      Link: http://lkml.kernel.org/r/20170306162410.GB2090@cmpxchg.org
    [shakeelb@google.com: fix condition for throttle_direct_reclaim]
      Link: http://lkml.kernel.org/r/20170314183228.20152-1-shakeelb@google.com
    Link: http://lkml.kernel.org/r/20170228214007.5621-2-hannes@cmpxchg.org
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reported-by: Jia He <hejianet@gmail.com>
    Tested-by: Jia He <hejianet@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Hillf Danton <hillf.zj@alibaba-inc.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dmitry Shmidt <dimitrysh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e62b0c661f65e985327f4bc542688630265b0311
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 24 15:28:17 2018 +0100

    Revert "module: Add retpoline tag to VERMAGIC"
    
    commit 5132ede0fe8092b043dae09a7cc32b8ae7272baa upstream.
    
    This reverts commit 6cfb521ac0d5b97470883ff9b7facae264b7ab12.
    
    Turns out distros do not want to make retpoline as part of their "ABI",
    so this patch should not have been merged.  Sorry Andi, this was my
    fault, I suggested it when your original patch was the "correct" way of
    doing this instead.
    
    Reported-by: Jiri Kosina <jikos@kernel.org>
    Fixes: 6cfb521ac0d5 ("module: Add retpoline tag to VERMAGIC")
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: David Woodhouse <dwmw@amazon.co.uk>
    Cc: rusty@rustcorp.com.au
    Cc: arjan.van.de.ven@intel.com
    Cc: jeyu@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c41bb027ed63db9e7a6b2c4c3c5e2e4df1ccb8cf
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Mon Oct 9 13:33:19 2017 +0200

    scsi: libiscsi: fix shifting of DID_REQUEUE host byte
    
    commit eef9ffdf9cd39b2986367bc8395e2772bc1284ba upstream.
    
    The SCSI host byte should be shifted left by 16 in order to have
    scsi_decide_disposition() do the right thing (.i.e. requeue the
    command).
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Fixes: 661134ad3765 ("[SCSI] libiscsi, bnx2i: make bound ep check common")
    Cc: Lee Duncan <lduncan@suse.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Bart Van Assche <Bart.VanAssche@sandisk.com>
    Cc: Chris Leech <cleech@redhat.com>
    Acked-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b50205cf8b9c7bd10572c97f7ca9fecfd9aec7b
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Tue Jun 13 13:35:51 2017 +0200

    fs/fcntl: f_setown, avoid undefined behaviour
    
    commit fc3dc67471461c0efcb1ed22fb7595121d65fad9 upstream.
    
    fcntl(0, F_SETOWN, 0x80000000) triggers:
    UBSAN: Undefined behaviour in fs/fcntl.c:118:7
    negation of -2147483648 cannot be represented in type 'int':
    CPU: 1 PID: 18261 Comm: syz-executor Not tainted 4.8.1-0-syzkaller #1
    ...
    Call Trace:
    ...
     [<ffffffffad8f0868>] ? f_setown+0x1d8/0x200
     [<ffffffffad8f19a9>] ? SyS_fcntl+0x999/0xf30
     [<ffffffffaed1fb00>] ? entry_SYSCALL_64_fastpath+0x23/0xc1
    
    Fix that by checking the arg parameter properly (against INT_MAX) before
    "who = -who". And return immediatelly with -EINVAL in case it is wrong.
    Note that according to POSIX we can return EINVAL:
        http://pubs.opengroup.org/onlinepubs/9699919799/functions/fcntl.html
    
        [EINVAL]
            The cmd argument is F_SETOWN and the value of the argument
            is not valid as a process or process group identifier.
    
    [v2] returns an error, v1 used to fail silently
    [v3] implement proper check for the bad value INT_MIN
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Jeff Layton <jlayton@poochiereds.net>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: linux-fsdevel@vger.kernel.org
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ccfbd4d6f02ff010dcc59e439f19864ad3a4efa
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Thu Jun 22 16:35:04 2017 -0400

    reiserfs: don't preallocate blocks for extended attributes
    
    commit 54930dfeb46e978b447af0fb8ab4e181c1bf9d7a upstream.
    
    Most extended attributes will fit in a single block.  More importantly,
    we drop the reference to the inode while holding the transaction open
    so the preallocated blocks aren't released.  As a result, the inode
    may be evicted before it's removed from the transaction's prealloc list
    which can cause memory corruption.
    
    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d25282b75ea7da56ca7b1a11f7a9c4970fc5e0
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Thu Jun 22 16:47:34 2017 -0400

    reiserfs: fix race in prealloc discard
    
    commit 08db141b5313ac2f64b844fb5725b8d81744b417 upstream.
    
    The main loop in __discard_prealloc is protected by the reiserfs write lock
    which is dropped across schedules like the BKL it replaced.  The problem is
    that it checks the value, calls a routine that schedules, and then adjusts
    the state.  As a result, two threads that are calling
    reiserfs_prealloc_discard at the same time can race when one calls
    reiserfs_free_prealloc_block, the lock is dropped, and the other calls
    reiserfs_free_prealloc_block with the same block number.  In the right
    circumstances, it can cause the prealloc count to go negative.
    
    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 898eeca02a55e354c42a7aa5cdfebf16c3742f44
Author: Kevin Cernekee <cernekee@chromium.org>
Date:   Tue Dec 5 15:42:41 2017 -0800

    netfilter: xt_osf: Add missing permission checks
    
    commit 916a27901de01446bcf57ecca4783f6cff493309 upstream.
    
    The capability check in nfnetlink_rcv() verifies that the caller
    has CAP_NET_ADMIN in the namespace that "owns" the netlink socket.
    However, xt_osf_fingers is shared by all net namespaces on the
    system.  An unprivileged user can create user and net namespaces
    in which he holds CAP_NET_ADMIN to bypass the netlink_net_capable()
    check:
    
        vpnns -- nfnl_osf -f /tmp/pf.os
    
        vpnns -- nfnl_osf -f /tmp/pf.os -d
    
    These non-root operations successfully modify the systemwide OS
    fingerprint list.  Add new capable() checks so that they can't.
    
    Signed-off-by: Kevin Cernekee <cernekee@chromium.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Acked-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c3184ea80322347287bc7e57f782d77f478e73c
Author: Kevin Cernekee <cernekee@chromium.org>
Date:   Sun Dec 3 12:12:45 2017 -0800

    netfilter: nfnetlink_cthelper: Add missing permission checks
    
    commit 4b380c42f7d00a395feede754f0bc2292eebe6e5 upstream.
    
    The capability check in nfnetlink_rcv() verifies that the caller
    has CAP_NET_ADMIN in the namespace that "owns" the netlink socket.
    However, nfnl_cthelper_list is shared by all net namespaces on the
    system.  An unprivileged user can create user and net namespaces
    in which he holds CAP_NET_ADMIN to bypass the netlink_net_capable()
    check:
    
        $ nfct helper list
        nfct v1.4.4: netlink error: Operation not permitted
        $ vpnns -- nfct helper list
        {
                .name = ftp,
                .queuenum = 0,
                .l3protonum = 2,
                .l4protonum = 6,
                .priv_data_len = 24,
                .status = enabled,
        };
    
    Add capable() checks in nfnetlink_cthelper, as this is cleaner than
    trying to generalize the solution.
    
    Signed-off-by: Kevin Cernekee <cernekee@chromium.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Acked-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2915f16bdce204621695e7a0dfcd5f73b120cccb
Author: Seunghun Han <kkamagui@gmail.com>
Date:   Wed Apr 26 16:18:08 2017 +0800

    ACPICA: Namespace: fix operand cache leak
    
    commit 3b2d69114fefa474fca542e51119036dceb4aa6f upstream.
    
    ACPICA commit a23325b2e583556eae88ed3f764e457786bf4df6
    
    I found some ACPI operand cache leaks in ACPI early abort cases.
    
    Boot log of ACPI operand cache leak is as follows:
    >[    0.174332] ACPI: Added _OSI(Module Device)
    >[    0.175504] ACPI: Added _OSI(Processor Device)
    >[    0.176010] ACPI: Added _OSI(3.0 _SCP Extensions)
    >[    0.177032] ACPI: Added _OSI(Processor Aggregator Device)
    >[    0.178284] ACPI: SCI (IRQ16705) allocation failed
    >[    0.179352] ACPI Exception: AE_NOT_ACQUIRED, Unable to install
    System Control Interrupt handler (20160930/evevent-131)
    >[    0.180008] ACPI: Unable to start the ACPI Interpreter
    >[    0.181125] ACPI Error: Could not remove SCI handler
    (20160930/evmisc-281)
    >[    0.184068] kmem_cache_destroy Acpi-Operand: Slab cache still has
    objects
    >[    0.185358] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc3 #2
    >[    0.186820] Hardware name: innotek gmb_h virtual_box/virtual_box, BIOS
    virtual_box 12/01/2006
    >[    0.188000] Call Trace:
    >[    0.188000]  ? dump_stack+0x5c/0x7d
    >[    0.188000]  ? kmem_cache_destroy+0x224/0x230
    >[    0.188000]  ? acpi_sleep_proc_init+0x22/0x22
    >[    0.188000]  ? acpi_os_delete_cache+0xa/0xd
    >[    0.188000]  ? acpi_ut_delete_caches+0x3f/0x7b
    >[    0.188000]  ? acpi_terminate+0x5/0xf
    >[    0.188000]  ? acpi_init+0x288/0x32e
    >[    0.188000]  ? __class_create+0x4c/0x80
    >[    0.188000]  ? video_setup+0x7a/0x7a
    >[    0.188000]  ? do_one_initcall+0x4e/0x1b0
    >[    0.188000]  ? kernel_init_freeable+0x194/0x21a
    >[    0.188000]  ? rest_init+0x80/0x80
    >[    0.188000]  ? kernel_init+0xa/0x100
    >[    0.188000]  ? ret_from_fork+0x25/0x30
    
    When early abort is occurred due to invalid ACPI information, Linux kernel
    terminates ACPI by calling acpi_terminate() function. The function calls
    acpi_ns_terminate() function to delete namespace data and ACPI operand cache
    (acpi_gbl_module_code_list).
    
    But the deletion code in acpi_ns_terminate() function is wrapped in
    ACPI_EXEC_APP definition, therefore the code is only executed when the
    definition exists. If the define doesn't exist, ACPI operand cache
    (acpi_gbl_module_code_list) is leaked, and stack dump is shown in kernel log.
    
    This causes a security threat because the old kernel (<= 4.9) shows memory
    locations of kernel functions in stack dump, therefore kernel ASLR can be
    neutralized.
    
    To fix ACPI operand leak for enhancing security, I made a patch which
    removes the ACPI_EXEC_APP define in acpi_ns_terminate() function for
    executing the deletion code unconditionally.
    
    Link: https://github.com/acpica/acpica/commit/a23325b2
    Signed-off-by: Seunghun Han <kkamagui@gmail.com>
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a53accd9c397f836858defa475720a65b5dd662
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Dec 30 02:27:31 2016 +0100

    ACPI / scan: Prefer devices without _HID/_CID for _ADR matching
    
    commit c2a6bbaf0c5f90463a7011a295bbdb7e33c80b51 upstream.
    
    The way acpi_find_child_device() works currently is that, if there
    are two (or more) devices with the same _ADR value in the same
    namespace scope (which is not specifically allowed by the spec and
    the OS behavior in that case is not defined), the first one of them
    found to be present (with the help of _STA) will be returned.
    
    This covers the majority of cases, but is not sufficient if some of
    the devices in question have a _HID (or _CID) returning some valid
    ACPI/PNP device IDs (which is disallowed by the spec) and the
    ASL writers' expectation appears to be that the OS will match
    devices without a valid ACPI/PNP device ID against a given bus
    address first.
    
    To cover this special case as well, modify find_child_checks()
    to prefer devices without ACPI/PNP device IDs over devices that
    have them.
    
    Suggested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 542cde0e3cc27bd4d6cbfa596d9278d3c97bc193
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Wed Dec 14 15:06:07 2016 -0800

    ipc: msg, make msgrcv work with LONG_MIN
    
    commit 999898355e08ae3b92dfd0a08db706e0c6703d30 upstream.
    
    When LONG_MIN is passed to msgrcv, one would expect to recieve any
    message.  But convert_mode does *msgtyp = -*msgtyp and -LONG_MIN is
    undefined.  In particular, with my gcc -LONG_MIN produces -LONG_MIN
    again.
    
    So handle this case properly by assigning LONG_MAX to *msgtyp if
    LONG_MIN was specified as msgtyp to msgrcv.
    
    This code:
      long msg[] = { 100, 200 };
      int m = msgget(IPC_PRIVATE, IPC_CREAT | 0644);
      msgsnd(m, &msg, sizeof(msg), 0);
      msgrcv(m, &msg, sizeof(msg), LONG_MIN, 0);
    
    produces currently nothing:
    
      msgget(IPC_PRIVATE, IPC_CREAT|0644)     = 65538
      msgsnd(65538, {100, "\310\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"}, 16, 0) = 0
      msgrcv(65538, ...
    
    Except a UBSAN warning:
    
      UBSAN: Undefined behaviour in ipc/msg.c:745:13
      negation of -9223372036854775808 cannot be represented in type 'long int':
    
    With the patch, I see what I expect:
    
      msgget(IPC_PRIVATE, IPC_CREAT|0644)     = 0
      msgsnd(0, {100, "\310\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"}, 16, 0) = 0
      msgrcv(0, {100, "\310\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"}, 16, -9223372036854775808, 0) = 16
    
    Link: http://lkml.kernel.org/r/20161024082633.10148-1-jslaby@suse.cz
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 685cce58f1c2e4fb5dbc891edf3e1bbca217ed3e
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Wed Nov 15 17:38:30 2017 -0800

    mm, page_alloc: fix potential false positive in __zone_watermark_ok
    
    commit b050e3769c6b4013bb937e879fc43bf1847ee819 upstream.
    
    Since commit 97a16fc82a7c ("mm, page_alloc: only enforce watermarks for
    order-0 allocations"), __zone_watermark_ok() check for high-order
    allocations will shortcut per-migratetype free list checks for
    ALLOC_HARDER allocations, and return true as long as there's free page
    of any migratetype.  The intention is that ALLOC_HARDER can allocate
    from MIGRATE_HIGHATOMIC free lists, while normal allocations can't.
    
    However, as a side effect, the watermark check will then also return
    true when there are pages only on the MIGRATE_ISOLATE list, or (prior to
    CMA conversion to ZONE_MOVABLE) on the MIGRATE_CMA list.  Since the
    allocation cannot actually obtain isolated pages, and might not be able
    to obtain CMA pages, this can result in a false positive.
    
    The condition should be rare and perhaps the outcome is not a fatal one.
    Still, it's better if the watermark check is correct.  There also
    shouldn't be a performance tradeoff here.
    
    Link: http://lkml.kernel.org/r/20171102125001.23708-1-vbabka@suse.cz
    Fixes: 97a16fc82a7c ("mm, page_alloc: only enforce watermarks for order-0 allocations")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 714c19ef57a5271c14ab6d1b5878f5662a0b3034
Author: Doug Berger <opendmb@gmail.com>
Date:   Mon Jul 10 15:49:44 2017 -0700

    cma: fix calculation of aligned offset
    
    commit e048cb32f69038aa1c8f11e5c1b331be4181659d upstream.
    
    The align_offset parameter is used by bitmap_find_next_zero_area_off()
    to represent the offset of map's base from the previous alignment
    boundary; the function ensures that the returned index, plus the
    align_offset, honors the specified align_mask.
    
    The logic introduced by commit b5be83e308f7 ("mm: cma: align to physical
    address, not CMA region position") has the cma driver calculate the
    offset to the *next* alignment boundary.  In most cases, the base
    alignment is greater than that specified when making allocations,
    resulting in a zero offset whether we align up or down.  In the example
    given with the commit, the base alignment (8MB) was half the requested
    alignment (16MB) so the math also happened to work since the offset is
    8MB in both directions.  However, when requesting allocations with an
    alignment greater than twice that of the base, the returned index would
    not be correctly aligned.
    
    Also, the align_order arguments of cma_bitmap_aligned_mask() and
    cma_bitmap_aligned_offset() should not be negative so the argument type
    was made unsigned.
    
    Fixes: b5be83e308f7 ("mm: cma: align to physical address, not CMA region position")
    Link: http://lkml.kernel.org/r/20170628170742.2895-1-opendmb@gmail.com
    Signed-off-by: Angus Clark <angus@angusclark.org>
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Gregory Fong <gregory.0xf0@gmail.com>
    Cc: Doug Berger <opendmb@gmail.com>
    Cc: Angus Clark <angus@angusclark.org>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shiraz Hashim <shashim@codeaurora.org>
    Cc: Jaewon Kim <jaewon31.kim@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc0e2174b092638f1146d792a8be71ab90a7e56d
Author: Michal Hocko <mhocko@suse.com>
Date:   Fri May 12 15:46:26 2017 -0700

    hwpoison, memcg: forcibly uncharge LRU pages
    
    commit 18365225f0440d09708ad9daade2ec11275c3df9 upstream.
    
    Laurent Dufour has noticed that hwpoinsoned pages are kept charged.  In
    his particular case he has hit a bad_page("page still charged to
    cgroup") when onlining a hwpoison page.  While this looks like something
    that shouldn't happen in the first place because onlining hwpages and
    returning them to the page allocator makes only little sense it shows a
    real problem.
    
    hwpoison pages do not get freed usually so we do not uncharge them (at
    least not since commit 0a31bc97c80c ("mm: memcontrol: rewrite uncharge
    API")).  Each charge pins memcg (since e8ea14cc6ead ("mm: memcontrol:
    take a css reference for each charged page")) as well and so the
    mem_cgroup and the associated state will never go away.  Fix this leak
    by forcibly uncharging a LRU hwpoisoned page in delete_from_lru_cache().
    We also have to tweak uncharge_list because it cannot rely on zero ref
    count for these pages.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Fixes: 0a31bc97c80c ("mm: memcontrol: rewrite uncharge API")
    Link: http://lkml.kernel.org/r/20170502185507.GB19165@dhcp22.suse.cz
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Laurent Dufour <ldufour@linux.vnet.ibm.com>
    Tested-by: Laurent Dufour <ldufour@linux.vnet.ibm.com>
    Reviewed-by: Balbir Singh <bsingharora@gmail.com>
    Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c57664bd12997742da5e12556e328e1ec0b5b654
Author: Michal Hocko <mhocko@suse.com>
Date:   Mon Jul 10 15:49:51 2017 -0700

    mm/mmap.c: do not blow on PROT_NONE MAP_FIXED holes in the stack
    
    commit 561b5e0709e4a248c67d024d4d94b6e31e3edf2f upstream.
    
    Commit 1be7107fbe18 ("mm: larger stack guard gap, between vmas") has
    introduced a regression in some rust and Java environments which are
    trying to implement their own stack guard page.  They are punching a new
    MAP_FIXED mapping inside the existing stack Vma.
    
    This will confuse expand_{downwards,upwards} into thinking that the
    stack expansion would in fact get us too close to an existing non-stack
    vma which is a correct behavior wrt safety.  It is a real regression on
    the other hand.
    
    Let's work around the problem by considering PROT_NONE mapping as a part
    of the stack.  This is a gros hack but overflowing to such a mapping
    would trap anyway an we only can hope that usespace knows what it is
    doing and handle it propely.
    
    Fixes: 1be7107fbe18 ("mm: larger stack guard gap, between vmas")
    Link: http://lkml.kernel.org/r/20170705182849.GA18027@dhcp22.suse.cz
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Debugged-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d8c402e0c46ce630746e081c904068af455b1e5
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Oct 28 09:45:29 2016 +0100

    drivers: base: cacheinfo: fix boot error message when acpi is enabled
    
    commit 55877ef45fbd7f975d078426866b7d1a2435dcc3 upstream.
    
    ARM64 enables both CONFIG_OF and CONFIG_ACPI and the firmware can pass
    both ACPI tables and the device tree. Based on the kernel parameter, one
    of the two will be chosen. If acpi is enabled, then device tree is not
    unflattened.
    
    Currently ARM64 platforms report:
    "
            Failed to find cpu0 device node
            Unable to detect cache hierarchy from DT for CPU 0
    "
    which is incorrect when booting with ACPI. Also latest ACPI v6.1 has no
    support for cache properties/hierarchy.
    
    This patch adds check for unflattened device tree and also returns as
    "not supported" if ACPI is runtime enabled.
    
    It also removes the reference to DT from the error message as the cache
    hierarchy can be detected from the firmware(OF/DT/ACPI)
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5aaa5a2836d86e3b6559200422c153a4dfb6d66
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Oct 28 09:45:28 2016 +0100

    drivers: base: cacheinfo: fix x86 with CONFIG_OF enabled
    
    commit fac51482577d5e05bbb0efa8d602a3c2111098bf upstream.
    
    With CONFIG_OF enabled on x86, we get the following error on boot:
    "
            Failed to find cpu0 device node
            Unable to detect cache hierarchy from DT for CPU 0
    "
    and the cacheinfo fails to get populated in the corresponding sysfs
    entries. This is because cache_setup_of_node looks for of_node for
    setting up the shared cpu_map without checking that it's already
    populated in the architecture specific callback.
    
    In order to indicate that the shared cpu_map is already populated, this
    patch introduces a boolean `cpu_map_populated` in struct cpu_cacheinfo
    that can be used by the generic code to skip cache_shared_cpu_map_setup.
    
    This patch also sets that boolean for x86.
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 318e17d09cbc40593ce42194ece3ecd1a464cc5e
Author: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
Date:   Tue Apr 25 16:44:03 2017 -0500

    Prevent timer value 0 for MWAITX
    
    commit 88d879d29f9cc0de2d930b584285638cdada6625 upstream.
    
    Newer hardware has uncovered a bug in the software implementation of
    using MWAITX for the delay function. A value of 0 for the timer is meant
    to indicate that a timeout will not be used to exit MWAITX. On newer
    hardware this can result in MWAITX never returning, resulting in NMI
    soft lockup messages being printed. On older hardware, some of the other
    conditions under which MWAITX can exit masked this issue. The AMD APM
    does not currently document this and will be updated.
    
    Please refer to http://marc.info/?l=kvm&m=148950623231140 for
    information regarding NMI soft lockup messages on an AMD Ryzen 1800X.
    This has been root-caused as a 0 passed to MWAITX causing it to wait
    indefinitely.
    
    This change has the added benefit of avoiding the unnecessary setup of
    MONITORX/MWAITX when the delay value is zero.
    
    Signed-off-by: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
    Link: http://lkml.kernel.org/r/1493156643-29366-1-git-send-email-Janakarajan.Natarajan@amd.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45ee9d5e97a4c6814a166c4ddf5c7c3764084270
Author: Punit Agrawal <punitagrawal@gmail.com>
Date:   Thu Jan 4 18:24:33 2018 +0000

    KVM: arm/arm64: Check pagesize when allocating a hugepage at Stage 2
    
    commit c507babf10ead4d5c8cca704539b170752a8ac84 upstream.
    
    KVM only supports PMD hugepages at stage 2 but doesn't actually check
    that the provided hugepage memory pagesize is PMD_SIZE before populating
    stage 2 entries.
    
    In cases where the backing hugepage size is smaller than PMD_SIZE (such
    as when using contiguous hugepages), KVM can end up creating stage 2
    mappings that extend beyond the supplied memory.
    
    Fix this by checking for the pagesize of userspace vma before creating
    PMD hugepage at stage 2.
    
    Fixes: 66b3923a1a0f77a ("arm64: hugetlb: add support for PTE contiguous bit")
    Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41e4aa17bc02430db764b748e990bdc392347f0d
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Jan 16 19:30:14 2018 +0100

    can: af_can: canfd_rcv(): replace WARN_ONCE by pr_warn_once
    
    commit d4689846881d160a4d12a514e991a740bcb5d65a upstream.
    
    If an invalid CANFD frame is received, from a driver or from a tun
    interface, a Kernel warning is generated.
    
    This patch replaces the WARN_ONCE by a simple pr_warn_once, so that a
    kernel, bootet with panic_on_warn, does not panic. A printk seems to be
    more appropriate here.
    
    Reported-by: syzbot+e3b775f40babeff6e68b@syzkaller.appspotmail.com
    Suggested-by: Dmitry Vyukov <dvyukov@google.com>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40bf2c0c1c9ec9c3a17afac43fcd18b39759defd
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Jan 16 19:30:14 2018 +0100

    can: af_can: can_rcv(): replace WARN_ONCE by pr_warn_once
    
    commit 8cb68751c115d176ec851ca56ecfbb411568c9e8 upstream.
    
    If an invalid CAN frame is received, from a driver or from a tun
    interface, a Kernel warning is generated.
    
    This patch replaces the WARN_ONCE by a simple pr_warn_once, so that a
    kernel, bootet with panic_on_warn, does not panic. A printk seems to be
    more appropriate here.
    
    Reported-by: syzbot+4386709c0c1284dca827@syzkaller.appspotmail.com
    Suggested-by: Dmitry Vyukov <dvyukov@google.com>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69e78e7214e39c084fcafdfb83b4d13d21b0008b
Author: Jonathan Dieter <jdieter@lesbg.com>
Date:   Mon Feb 27 10:31:03 2017 +0200

    usbip: Fix potential format overflow in userspace tools
    
    commit e5dfa3f902b9a642ae8c6997d57d7c41e384a90b upstream.
    
    The usbip userspace tools call sprintf()/snprintf() and don't check for
    the return value which can lead the paths to overflow, truncating the
    final file in the path.
    
    More urgently, GCC 7 now warns that these aren't checked with
    -Wformat-overflow, and with -Werror enabled in configure.ac, that makes
    these tools unbuildable.
    
    This patch fixes these problems by replacing sprintf() with snprintf() in
    one place and adding checks for the return value of snprintf().
    
    Reviewed-by: Peter Senna Tschudin <peter.senna@gmail.com>
    Signed-off-by: Jonathan Dieter <jdieter@lesbg.com>
    Acked-by: Shuah Khan <shuahkh@osg.samsung.com>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 853c39f239eb89cfd91ee03257c624aaac0575c6
Author: Jonathan Dieter <jdieter@lesbg.com>
Date:   Mon Feb 27 10:31:04 2017 +0200

    usbip: Fix implicit fallthrough warning
    
    commit cfd6ed4537a9e938fa76facecd4b9cd65b6d1563 upstream.
    
    GCC 7 now warns when switch statements fall through implicitly, and with
    -Werror enabled in configure.ac, that makes these tools unbuildable.
    
    We fix this by notifying the compiler that this particular case statement
    is meant to fall through.
    
    Reviewed-by: Peter Senna Tschudin <peter.senna@gmail.com>
    Signed-off-by: Jonathan Dieter <jdieter@lesbg.com>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce601a07bc504b4748f8e7a34896684f79514e51
Author: Shuah Khan <shuah@kernel.org>
Date:   Thu Dec 7 14:16:49 2017 -0700

    usbip: prevent vhci_hcd driver from leaking a socket pointer address
    
    commit 2f2d0088eb93db5c649d2a5e34a3800a8a935fc5 upstream.
    
    When a client has a USB device attached over IP, the vhci_hcd driver is
    locally leaking a socket pointer address via the
    
    /sys/devices/platform/vhci_hcd/status file (world-readable) and in debug
    output when "usbip --debug port" is run.
    
    Fix it to not leak. The socket pointer address is not used at the moment
    and it was made visible as a convenient way to find IP address from socket
    pointer address by looking up /proc/net/{tcp,tcp6}.
    
    As this opens a security hole, the fix replaces socket pointer address with
    sockfd.
    
    Reported-by: Secunia Research <vuln@secunia.com>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c26ee198fcacda157918a9b211ba1f111e1ed9b
Author: Martin Brandenburg <martin@omnibond.com>
Date:   Mon Jan 22 15:44:52 2018 -0500

    orangefs: initialize op on loop restart in orangefs_devreq_read
    
    commit a0ec1ded22e6a6bc41981fae22406835b006a66e upstream.
    
    In orangefs_devreq_read, there is a loop which picks an op off the list
    of pending ops.  If the loop fails to find an op, there is nothing to
    read, and it returns EAGAIN.  If the op has been given up on, the loop
    is restarted via a goto.  The bug is that the variable which the found
    op is written to is not reinitialized, so if there are no more eligible
    ops on the list, the code runs again on the already handled op.
    
    This is triggered by interrupting a process while the op is being copied
    to the client-core.  It's a fairly small window, but it's there.
    
    Signed-off-by: Martin Brandenburg <martin@omnibond.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb39345e73141e4ae4529168965c37024cb3acb3
Author: Martin Brandenburg <martin@omnibond.com>
Date:   Mon Jan 22 15:44:51 2018 -0500

    orangefs: use list_for_each_entry_safe in purge_waiting_ops
    
    commit 0afc0decf247f65b7aba666a76a0a68adf4bc435 upstream.
    
    set_op_state_purged can delete the op.
    
    Signed-off-by: Martin Brandenburg <martin@omnibond.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c36c940cd4aab393c09d457e2414423ac92bd339
Author: Andy Lutomirski <luto@kernel.org>
Date:   Fri Dec 9 10:24:05 2016 -0800

    x86/asm/32: Make sync_core() handle missing CPUID on all 32-bit kernels
    
    commit 1c52d859cb2d417e7216d3e56bb7fea88444cec9 upstream.
    
    We support various non-Intel CPUs that don't have the CPUID
    instruction, so the M486 test was wrong.  For now, fix it with a big
    hammer: handle missing CPUID on all 32-bit CPUs.
    
    Reported-by: One Thousand Gnomes <gnomes@lxorguk.ukuu.org.uk>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Matthew Whitehead <tedheadster@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Henrique de Moraes Holschuh <hmh@hmh.eng.br>
    Cc: Andrew Cooper <andrew.cooper3@citrix.com>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: xen-devel <Xen-devel@lists.xen.org>
    Link: http://lkml.kernel.org/r/685bd083a7c036f7769510b6846315b17d6ba71f.1481307769.git.luto@kernel.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Zhang, Ning A" <ning.a.zhang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
