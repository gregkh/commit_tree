commit e9b75c60f91a359cb0e1b2d0a9ed1c81485215e2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Jul 21 09:00:45 2019 +0200

    Linux 5.2.2

commit 760d269d9ec9da668dd7cd85503e55871c5f281a
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Tue Jul 9 08:34:02 2019 +0200

    x86/entry/32: Fix ENDPROC of common_spurious
    
    [ Upstream commit 1cbec37b3f9cff074a67bef4fc34b30a09958a0a ]
    
    common_spurious is currently ENDed erroneously. common_interrupt is used
    in its ENDPROC. So fix this mistake.
    
    Found by my asm macros rewrite patchset.
    
    Fixes: f8a8fe61fec8 ("x86/irq: Seperate unused system vectors from spurious entry again")
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20190709063402.19847-1-jslaby@suse.cz
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d9584d642f8545dd8cb66a49e67b525b5a699a6
Author: Haren Myneni <haren@linux.vnet.ibm.com>
Date:   Tue Jun 18 12:09:22 2019 -0700

    crypto/NX: Set receive window credits to max number of CRBs in RxFIFO
    
    commit e52d484d9869eb291140545746ccbe5ffc7c9306 upstream.
    
    System gets checkstop if RxFIFO overruns with more requests than the
    maximum possible number of CRBs in FIFO at the same time. The max number
    of requests per window is controlled by window credits. So find max
    CRBs from FIFO size and set it to receive window credits.
    
    Fixes: b0d6c9bab5e4 ("crypto/nx: Add P9 NX support for 842 compression engine")
    CC: stable@vger.kernel.org # v4.14+
    Signed-off-by:Haren Myneni <haren@us.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 4509f315cc8224ebdd02639c8a3f24dc63c9cb38
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Jun 24 07:20:16 2019 +0000

    crypto: talitos - fix hash on SEC1.
    
    commit 58cdbc6d2263beb36954408522762bbe73169306 upstream.
    
    On SEC1, hash provides wrong result when performing hashing in several
    steps with input data SG list has more than one element. This was
    detected with CONFIG_CRYPTO_MANAGER_EXTRA_TESTS:
    
    [   44.185947] alg: hash: md5-talitos test failed (wrong result) on test vector 6, cfg="random: may_sleep use_finup src_divs=[<reimport>25.88%@+8063, <flush>24.19%@+9588, 28.63%@+16333, <reimport>4.60%@+6756, 16.70%@+16281] dst_divs=[71.61%@alignmask+16361, 14.36%@+7756, 14.3%@+"
    [   44.325122] alg: hash: sha1-talitos test failed (wrong result) on test vector 3, cfg="random: inplace use_final src_divs=[<flush,nosimd>16.56%@+16378, <reimport>52.0%@+16329, 21.42%@alignmask+16380, 10.2%@alignmask+16380] iv_offset=39"
    [   44.493500] alg: hash: sha224-talitos test failed (wrong result) on test vector 4, cfg="random: use_final nosimd src_divs=[<reimport>52.27%@+7401, <reimport>17.34%@+16285, <flush>17.71%@+26, 12.68%@+10644] iv_offset=43"
    [   44.673262] alg: hash: sha256-talitos test failed (wrong result) on test vector 4, cfg="random: may_sleep use_finup src_divs=[<reimport>60.6%@+12790, 17.86%@+1329, <reimport>12.64%@alignmask+16300, 8.29%@+15, 0.40%@+13506, <reimport>0.51%@+16322, <reimport>0.24%@+16339] dst_divs"
    
    This is due to two issues:
    - We have an overlap between the buffer used for copying the input
    data (SEC1 doesn't do scatter/gather) and the chained descriptor.
    - Data copy is wrong when the previous hash left less than one
    blocksize of data to hash, implying a complement of the previous
    block with a few bytes from the new request.
    
    Fix it by:
    - Moving the second descriptor after the buffer, as moving the buffer
    after the descriptor would make it more complex for other cipher
    operations (AEAD, ABLKCIPHER)
    - Skip the bytes taken from the new request to complete the previous
    one by moving the SG list forward.
    
    Fixes: 37b5e8897eb5 ("crypto: talitos - chain in buffered data for ahash on SEC1")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c506680ae8c5e7860758e068591903628bd477fd
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Jun 24 07:20:15 2019 +0000

    crypto: talitos - move struct talitos_edesc into talitos.h
    
    commit d44769e4ccb636e8238adbc151f25467a536711b upstream.
    
    Moves struct talitos_edesc into talitos.h so that it can be used
    from any place in talitos.c
    
    It will be required for next patch ("crypto: talitos - fix hash
    on SEC1")
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90c7a327a9448acc3c0dbaafe89061b18767ee6c
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Tue Jun 18 13:12:20 2019 +0200

    s390/qdio: don't touch the dsci in tiqdio_add_input_queues()
    
    commit ac6639cd3db607d386616487902b4cc1850a7be5 upstream.
    
    Current code sets the dsci to 0x00000080. Which doesn't make any sense,
    as the indicator area is located in the _left-most_ byte.
    
    Worse: if the dsci is the _shared_ indicator, this potentially clears
    the indication of activity for a _different_ device.
    tiqdio_thinint_handler() will then have no reason to call that device's
    IRQ handler, and the device ends up stalling.
    
    Fixes: d0c9d4a89fff ("[S390] qdio: set correct bit in dsci")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c26226c589f98630f9af4f904b4619336944651f
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Tue Jun 18 11:25:59 2019 +0200

    s390/qdio: (re-)initialize tiqdio list entries
    
    commit e54e4785cb5cb4896cf4285964aeef2125612fb2 upstream.
    
    When tiqdio_remove_input_queues() removes a queue from the tiq_list as
    part of qdio_shutdown(), it doesn't re-initialize the queue's list entry
    and the prev/next pointers go stale.
    
    If a subsequent qdio_establish() fails while sending the ESTABLISH cmd,
    it calls qdio_shutdown() again in QDIO_IRQ_STATE_ERR state and
    tiqdio_remove_input_queues() will attempt to remove the queue entry a
    second time. This dereferences the stale pointers, and bad things ensue.
    Fix this by re-initializing the list entry after removing it from the
    list.
    
    For good practice also initialize the list entry when the queue is first
    allocated, and remove the quirky checks that papered over this omission.
    Note that prior to
    commit e521813468f7 ("s390/qdio: fix access to uninitialized qdio_q fields"),
    these checks were bogus anyway.
    
    setup_queues_misc() clears the whole queue struct, and thus needs to
    re-init the prev/next pointers as well.
    
    Fixes: 779e6e1c724d ("[S390] qdio: new qdio driver.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bbbf5bbe7bf7511cc6f96c223acab631f6f1f82
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Mon Jun 17 14:02:41 2019 +0200

    s390: fix stfle zero padding
    
    commit 4f18d869ffd056c7858f3d617c71345cf19be008 upstream.
    
    The stfle inline assembly returns the number of double words written
    (condition code 0) or the double words it would have written
    (condition code 3), if the memory array it got as parameter would have
    been large enough.
    
    The current stfle implementation assumes that the array is always
    large enough and clears those parts of the array that have not been
    written to with a subsequent memset call.
    
    If however the array is not large enough memset will get a negative
    length parameter, which means that memset clears memory until it gets
    an exception and the kernel crashes.
    
    To fix this simply limit the maximum length. Move also the inline
    assembly to an extra function to avoid clobbering of register 0, which
    might happen because of the added min_t invocation together with code
    instrumentation.
    
    The bug was introduced with commit 14375bc4eb8d ("[S390] cleanup
    facility list handling") but was rather harmless, since it would only
    write to a rather large array. It became a potential problem with
    commit 3ab121ab1866 ("[S390] kernel: Add z/VM LGR detection"). Since
    then it writes to an array with only four double words, while some
    machines already deliver three double words. As soon as machines have
    a facility bit within the fifth double a crash on IPL would happen.
    
    Fixes: 14375bc4eb8d ("[S390] cleanup facility list handling")
    Cc: <stable@vger.kernel.org> # v2.6.37+
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb48afc69d1528e979ee79699c0096e7d7365626
Author: Philipp Rudo <prudo@linux.ibm.com>
Date:   Fri Jun 28 17:38:05 2019 +0200

    s390/ipl: Fix detection of has_secure attribute
    
    commit 1b2be2071aca9aab22e3f902bcb0fca46a1d3b00 upstream.
    
    Use the correct bit for detection of the machine capability associated
    with the has_secure attribute. It is expected that the underlying
    platform (including hypervisors) unsets the bit when they don't provide
    secure ipl for their guests.
    
    Fixes: c9896acc7851 ("s390/ipl: Provide has_secure sysfs attribute")
    Cc: stable@vger.kernel.org # 5.2
    Signed-off-by: Philipp Rudo <prudo@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 175713c121e112d26cb6bed177597722b2e15840
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 3 15:39:25 2019 +0200

    ARC: hide unused function unw_hdr_alloc
    
    commit fd5de2721ea7d16e2b16c4049ac49f229551b290 upstream.
    
    As kernelci.org reports, this function is not used in
    vdk_hs38_defconfig:
    
    arch/arc/kernel/unwind.c:188:14: warning: 'unw_hdr_alloc' defined but not used [-Wunused-function]
    
    Fixes: bc79c9a72165 ("ARC: dw2 unwind: Reinstante unwinding out of modules")
    Link: https://kernelci.org/build/id/5d1cae3f59b514300340c132/logs/
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f29cd95ca0b3e3d02bcef3542eeccf5e4bf476d4
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 28 13:11:54 2019 +0200

    x86/irq: Seperate unused system vectors from spurious entry again
    
    commit f8a8fe61fec8006575699559ead88b0b833d5cad upstream.
    
    Quite some time ago the interrupt entry stubs for unused vectors in the
    system vector range got removed and directly mapped to the spurious
    interrupt vector entry point.
    
    Sounds reasonable, but it's subtly broken. The spurious interrupt vector
    entry point pushes vector number 0xFF on the stack which makes the whole
    logic in __smp_spurious_interrupt() pointless.
    
    As a consequence any spurious interrupt which comes from a vector != 0xFF
    is treated as a real spurious interrupt (vector 0xFF) and not
    acknowledged. That subsequently stalls all interrupt vectors of equal and
    lower priority, which brings the system to a grinding halt.
    
    This can happen because even on 64-bit the system vector space is not
    guaranteed to be fully populated. A full compile time handling of the
    unused vectors is not possible because quite some of them are conditonally
    populated at runtime.
    
    Bring the entry stubs back, which wastes 160 bytes if all stubs are unused,
    but gains the proper handling back. There is no point to selectively spare
    some of the stubs which are known at compile time as the required code in
    the IDT management would be way larger and convoluted.
    
    Do not route the spurious entries through common_interrupt and do_IRQ() as
    the original code did. Route it to smp_spurious_interrupt() which evaluates
    the vector number and acts accordingly now that the real vector numbers are
    handed in.
    
    Fixup the pr_warn so the actual spurious vector (0xff) is clearly
    distiguished from the other vectors and also note for the vectored case
    whether it was pending in the ISR or not.
    
     "Spurious APIC interrupt (vector 0xFF) on CPU#0, should never happen."
     "Spurious interrupt vector 0xed on CPU#1. Acked."
     "Spurious interrupt vector 0xee on CPU#1. Not pending!."
    
    Fixes: 2414e021ac8d ("x86: Avoid building unused IRQ entry stubs")
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Jan Beulich <jbeulich@suse.com>
    Link: https://lkml.kernel.org/r/20190628111440.550568228@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d15169864ee9a535ddd11e479abb3e8428470ce7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 28 13:11:53 2019 +0200

    x86/irq: Handle spurious interrupt after shutdown gracefully
    
    commit b7107a67f0d125459fe41f86e8079afd1a5e0b15 upstream.
    
    Since the rework of the vector management, warnings about spurious
    interrupts have been reported. Robert provided some more information and
    did an initial analysis. The following situation leads to these warnings:
    
       CPU 0                  CPU 1               IO_APIC
    
                                                  interrupt is raised
                                                  sent to CPU1
                              Unable to handle
                              immediately
                              (interrupts off,
                               deep idle delay)
       mask()
       ...
       free()
         shutdown()
         synchronize_irq()
         clear_vector()
                              do_IRQ()
                                -> vector is clear
    
    Before the rework the vector entries of legacy interrupts were statically
    assigned and occupied precious vector space while most of them were
    unused. Due to that the above situation was handled silently because the
    vector was handled and the core handler of the assigned interrupt
    descriptor noticed that it is shut down and returned.
    
    While this has been usually observed with legacy interrupts, this situation
    is not limited to them. Any other interrupt source, e.g. MSI, can cause the
    same issue.
    
    After adding proper synchronization for level triggered interrupts, this
    can only happen for edge triggered interrupts where the IO-APIC obviously
    cannot provide information about interrupts in flight.
    
    While the spurious warning is actually harmless in this case it worries
    users and driver developers.
    
    Handle it gracefully by marking the vector entry as VECTOR_SHUTDOWN instead
    of VECTOR_UNUSED when the vector is freed up.
    
    If that above late handling happens the spurious detector will not complain
    and switch the entry to VECTOR_UNUSED. Any subsequent spurious interrupt on
    that line will trigger the spurious warning as before.
    
    Fixes: 464d12309e1b ("x86/vector: Switch IOAPIC to global reservation mode")
    Reported-by: Robert Hodaszi <Robert.Hodaszi@digi.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>-
    Tested-by: Robert Hodaszi <Robert.Hodaszi@digi.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Link: https://lkml.kernel.org/r/20190628111440.459647741@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd5f4b9a33bb3eb7bbb6c3c8bf1400a7062ae10c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 28 13:11:52 2019 +0200

    x86/ioapic: Implement irq_get_irqchip_state() callback
    
    commit dfe0cf8b51b07e56ded571e3de0a4a9382517231 upstream.
    
    When an interrupt is shut down in free_irq() there might be an inflight
    interrupt pending in the IO-APIC remote IRR which is not yet serviced. That
    means the interrupt has been sent to the target CPUs local APIC, but the
    target CPU is in a state which delays the servicing.
    
    So free_irq() would proceed to free resources and to clear the vector
    because synchronize_hardirq() does not see an interrupt handler in
    progress.
    
    That can trigger a spurious interrupt warning, which is harmless and just
    confuses users, but it also can leave the remote IRR in a stale state
    because once the handler is invoked the interrupt resources might be freed
    already and therefore acknowledgement is not possible anymore.
    
    Implement the irq_get_irqchip_state() callback for the IO-APIC irq chip. The
    callback is invoked from free_irq() via __synchronize_hardirq(). Check the
    remote IRR bit of the interrupt and return 'in flight' if it is set and the
    interrupt is configured in level mode. For edge mode the remote IRR has no
    meaning.
    
    As this is only meaningful for level triggered interrupts this won't cure
    the potential spurious interrupt warning for edge triggered interrupts, but
    the edge trigger case does not result in stale hardware state. This has to
    be addressed at the vector/interrupt entry level seperately.
    
    Fixes: 464d12309e1b ("x86/vector: Switch IOAPIC to global reservation mode")
    Reported-by: Robert Hodaszi <Robert.Hodaszi@digi.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Link: https://lkml.kernel.org/r/20190628111440.370295517@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4999a2a3a483beae98be84965a932add165e6e8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 28 13:11:51 2019 +0200

    genirq: Add optional hardware synchronization for shutdown
    
    commit 62e0468650c30f0298822c580f382b16328119f6 upstream.
    
    free_irq() ensures that no hardware interrupt handler is executing on a
    different CPU before actually releasing resources and deactivating the
    interrupt completely in a domain hierarchy.
    
    But that does not catch the case where the interrupt is on flight at the
    hardware level but not yet serviced by the target CPU. That creates an
    interesing race condition:
    
       CPU 0                  CPU 1               IRQ CHIP
    
                                                  interrupt is raised
                                                  sent to CPU1
                              Unable to handle
                              immediately
                              (interrupts off,
                               deep idle delay)
       mask()
       ...
       free()
         shutdown()
         synchronize_irq()
         release_resources()
                              do_IRQ()
                                -> resources are not available
    
    That might be harmless and just trigger a spurious interrupt warning, but
    some interrupt chips might get into a wedged state.
    
    Utilize the existing irq_get_irqchip_state() callback for the
    synchronization in free_irq().
    
    synchronize_hardirq() is not using this mechanism as it might actually
    deadlock unter certain conditions, e.g. when called with interrupts
    disabled and the target CPU is the one on which the synchronization is
    invoked. synchronize_irq() uses it because that function cannot be called
    from non preemtible contexts as it might sleep.
    
    No functional change intended and according to Marc the existing GIC
    implementations where the driver supports the callback should be able
    to cope with that core change. Famous last words.
    
    Fixes: 464d12309e1b ("x86/vector: Switch IOAPIC to global reservation mode")
    Reported-by: Robert Hodaszi <Robert.Hodaszi@digi.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Marc Zyngier <marc.zyngier@arm.com>
    Link: https://lkml.kernel.org/r/20190628111440.279463375@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41e95c3449ef098f8c05a778f23b1b9b0b54d3b7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 28 13:11:50 2019 +0200

    genirq: Fix misleading synchronize_irq() documentation
    
    commit 1d21f2af8571c6a6a44e7c1911780614847b0253 upstream.
    
    The function might sleep, so it cannot be called from interrupt
    context. Not even with care.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Link: https://lkml.kernel.org/r/20190628111440.189241552@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5db47f4300fafb8f9bf2c95036160f76d5ce73f5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 28 13:11:49 2019 +0200

    genirq: Delay deactivation in free_irq()
    
    commit 4001d8e8762f57d418b66e4e668601791900a1dd upstream.
    
    When interrupts are shutdown, they are immediately deactivated in the
    irqdomain hierarchy. While this looks obviously correct there is a subtle
    issue:
    
    There might be an interrupt in flight when free_irq() is invoking the
    shutdown. This is properly handled at the irq descriptor / primary handler
    level, but the deactivation might completely disable resources which are
    required to acknowledge the interrupt.
    
    Split the shutdown code and deactivate the interrupt after synchronization
    in free_irq(). Fixup all other usage sites where this is not an issue to
    invoke the combined shutdown_and_deactivate() function instead.
    
    This still might be an issue if the interrupt in flight servicing is
    delayed on a remote CPU beyond the invocation of synchronize_irq(), but
    that cannot be handled at that level and needs to be handled in the
    synchronize_irq() context.
    
    Fixes: f8264e34965a ("irqdomain: Introduce new interfaces to support hierarchy irqdomains")
    Reported-by: Robert Hodaszi <Robert.Hodaszi@digi.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Link: https://lkml.kernel.org/r/20190628111440.098196390@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f1733eaeccc95e8ae7dfa38a9026c68e6d55257
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Mon Jun 17 14:23:54 2019 -0400

    firmware: improve LSM/IMA security behaviour
    
    commit 2472d64af2d3561954e2f05365a67692bb852f2a upstream.
    
    The firmware loader queries if LSM/IMA permits it to load firmware
    via the sysfs fallback. Unfortunately, the code does the opposite:
    it expressly permits sysfs fw loading if security_kernel_load_data(
    LOADING_FIRMWARE) returns -EACCES. This happens because a
    zero-on-success return value is cast to a bool that's true on success.
    
    Fix the return value handling so we get the correct behaviour.
    
    Fixes: 6e852651f28e ("firmware: add call to LSM hook before firmware sysfs fallback")
    Cc: Stable <stable@vger.kernel.org>
    Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Cc: Kees Cook <keescook@chromium.org>
    To: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afe692c61fcac99df5b21974f042777d584a4afa
Author: James Morse <james.morse@arm.com>
Date:   Mon Jun 24 18:36:56 2019 +0100

    drivers: base: cacheinfo: Ensure cpu hotplug work is done before Intel RDT
    
    commit 83b44fe343b5abfcb1b2261289bd0cfcfcfd60a8 upstream.
    
    The cacheinfo structures are alloced/freed by cpu online/offline
    callbacks. Originally these were only used by sysfs to expose the
    cache topology to user space. Without any in-kernel dependencies
    CPUHP_AP_ONLINE_DYN was an appropriate choice.
    
    resctrl has started using these structures to identify CPUs that
    share a cache. It updates its 'domain' structures from cpu
    online/offline callbacks. These depend on the cacheinfo structures
    (resctrl_online_cpu()->domain_add_cpu()->get_cache_id()->
     get_cpu_cacheinfo()).
    These also run as CPUHP_AP_ONLINE_DYN.
    
    Now that there is an in-kernel dependency, move the cacheinfo
    work earlier so we know its done before resctrl's CPUHP_AP_ONLINE_DYN
    work runs.
    
    Fixes: 2264d9c74dda1 ("x86/intel_rdt: Build structures for each resource based on cache topology")
    Cc: <stable@vger.kernel.org>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Link: https://lore.kernel.org/r/20190624173656.202407-1-james.morse@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 744da332c458bd730cf53f180121236cc66e2b69
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Jul 11 20:52:18 2019 -0700

    nilfs2: do not use unexported cpu_to_le32()/le32_to_cpu() in uapi header
    
    commit c32cc30c0544f13982ee0185d55f4910319b1a79 upstream.
    
    cpu_to_le32/le32_to_cpu is defined in include/linux/byteorder/generic.h,
    which is not exported to user-space.
    
    UAPI headers must use the ones prefixed with double-underscore.
    
    Detected by compile-testing exported headers:
    
      include/linux/nilfs2_ondisk.h: In function `nilfs_checkpoint_set_snapshot':
      include/linux/nilfs2_ondisk.h:536:17: error: implicit declaration of function `cpu_to_le32' [-Werror=implicit-function-declaration]
        cp->cp_flags = cpu_to_le32(le32_to_cpu(cp->cp_flags) |  \
                       ^
      include/linux/nilfs2_ondisk.h:552:1: note: in expansion of macro `NILFS_CHECKPOINT_FNS'
       NILFS_CHECKPOINT_FNS(SNAPSHOT, snapshot)
       ^~~~~~~~~~~~~~~~~~~~
      include/linux/nilfs2_ondisk.h:536:29: error: implicit declaration of function `le32_to_cpu' [-Werror=implicit-function-declaration]
        cp->cp_flags = cpu_to_le32(le32_to_cpu(cp->cp_flags) |  \
                                   ^
      include/linux/nilfs2_ondisk.h:552:1: note: in expansion of macro `NILFS_CHECKPOINT_FNS'
       NILFS_CHECKPOINT_FNS(SNAPSHOT, snapshot)
       ^~~~~~~~~~~~~~~~~~~~
      include/linux/nilfs2_ondisk.h: In function `nilfs_segment_usage_set_clean':
      include/linux/nilfs2_ondisk.h:622:19: error: implicit declaration of function `cpu_to_le64' [-Werror=implicit-function-declaration]
        su->su_lastmod = cpu_to_le64(0);
                         ^~~~~~~~~~~
    
    Link: http://lkml.kernel.org/r/20190605053006.14332-1-yamada.masahiro@socionext.com
    Fixes: e63e88bc53ba ("nilfs2: move ioctl interface and disk layout to uapi separately")
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Joe Perches <joe@perches.com>
    Cc: <stable@vger.kernel.org>    [4.9+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d405dcfad8598854e4fef061b5753270d2fc4e8
Author: Cole Rogers <colerogers@disroot.org>
Date:   Mon Jul 1 00:47:48 2019 -0700

    Input: synaptics - enable SMBUS on T480 thinkpad trackpad
    
    commit abbe3acd7d72ab4633ade6bd24e8306b67e0add3 upstream.
    
    Thinkpad t480 laptops had some touchpad features disabled, resulting in the
    loss of pinch to activities in GNOME, on wayland, and other touch gestures
    being slower. This patch adds the touchpad of the t480 to the smbus_pnp_ids
    whitelist to enable the extra features. In my testing this does not break
    suspend (on fedora, with wayland, and GNOME, using the rc-6 kernel), while
    also fixing the feature on a T480.
    
    Signed-off-by: Cole Rogers <colerogers@disroot.org>
    Acked-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3ab1824187ec6de071a527d213b87c7918fb2c0
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Wed Apr 17 11:13:20 2019 +0300

    e1000e: start network tx queue only when link is up
    
    commit d17ba0f616a08f597d9348c372d89b8c0405ccf3 upstream.
    
    Driver does not want to keep packets in Tx queue when link is lost.
    But present code only reset NIC to flush them, but does not prevent
    queuing new packets. Moreover reset sequence itself could generate
    new packets via netconsole and NIC falls into endless reset loop.
    
    This patch wakes Tx queue only when NIC is ready to send packets.
    
    This is proper fix for problem addressed by commit 0f9e980bf5ee
    ("e1000e: fix cyclic resets at link up with active tx").
    
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Suggested-by: Alexander Duyck <alexander.duyck@gmail.com>
    Tested-by: Joseph Yasi <joe.yasi@gmail.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Tested-by: Oleksandr Natalenko <oleksandr@redhat.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb1f1b27b3269190231c492ba5dd36ac4c2449db
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Wed Apr 17 11:13:16 2019 +0300

    Revert "e1000e: fix cyclic resets at link up with active tx"
    
    commit caff422ea81e144842bc44bab408d85ac449377b upstream.
    
    This reverts commit 0f9e980bf5ee1a97e2e401c846b2af989eb21c61.
    
    That change cased false-positive warning about hardware hang:
    
    e1000e: eth0 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: Rx/Tx
    IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready
    e1000e 0000:00:1f.6 eth0: Detected Hardware Unit Hang:
       TDH                  <0>
       TDT                  <1>
       next_to_use          <1>
       next_to_clean        <0>
    buffer_info[next_to_clean]:
       time_stamp           <fffba7a7>
       next_to_watch        <0>
       jiffies              <fffbb140>
       next_to_watch.status <0>
    MAC Status             <40080080>
    PHY Status             <7949>
    PHY 1000BASE-T Status  <0>
    PHY Extended Status    <3000>
    PCI Status             <10>
    e1000e: eth0 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: Rx/Tx
    
    Besides warning everything works fine.
    Original issue will be fixed property in following patch.
    
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Reported-by: Joseph Yasi <joe.yasi@gmail.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=203175
    Tested-by: Joseph Yasi <joe.yasi@gmail.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Tested-by: Oleksandr Natalenko <oleksandr@redhat.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
