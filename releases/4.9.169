commit df62169c33a1d06fbe8d0a411c250f230e64b44c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 17 08:36:48 2019 +0200

    Linux 4.9.169

commit 5b86e010f02bba2ef344422bc945e7f46d14e126
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri Apr 5 16:20:47 2019 +0100

    PCI: Add function 1 DMA alias quirk for Marvell 9170 SATA controller
    
    commit 9cde402a59770a0669d895399c13407f63d7d209 upstream.
    
    There is a Marvell 88SE9170 PCIe SATA controller I found on a board here.
    Some quick testing with the ARM SMMU enabled reveals that it suffers from
    the same requester ID mixup problems as the other Marvell chips listed
    already.
    
    Add the PCI vendor/device ID to the list of chips which need the
    workaround.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aea59964f5bb0092e15ee2a86bc2b0c1551a2589
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Thu Apr 4 11:08:40 2019 -0700

    xtensa: fix return_address
    
    commit ada770b1e74a77fff2d5f539bf6c42c25f4784db upstream.
    
    return_address returns the address that is one level higher in the call
    stack than requested in its argument, because level 0 corresponds to its
    caller's return address. Use requested level as the number of stack
    frames to skip.
    
    This fixes the address reported by might_sleep and friends.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d1e1da10c3a77e0f3f33c6f6649f75be9b3db5d
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Tue Mar 19 12:36:10 2019 +0000

    sched/fair: Do not re-read ->h_load_next during hierarchical load calculation
    
    commit 0e9f02450da07fc7b1346c8c32c771555173e397 upstream.
    
    A NULL pointer dereference bug was reported on a distribution kernel but
    the same issue should be present on mainline kernel. It occured on s390
    but should not be arch-specific.  A partial oops looks like:
    
      Unable to handle kernel pointer dereference in virtual kernel address space
      ...
      Call Trace:
        ...
        try_to_wake_up+0xfc/0x450
        vhost_poll_wakeup+0x3a/0x50 [vhost]
        __wake_up_common+0xbc/0x178
        __wake_up_common_lock+0x9e/0x160
        __wake_up_sync_key+0x4e/0x60
        sock_def_readable+0x5e/0x98
    
    The bug hits any time between 1 hour to 3 days. The dereference occurs
    in update_cfs_rq_h_load when accumulating h_load. The problem is that
    cfq_rq->h_load_next is not protected by any locking and can be updated
    by parallel calls to task_h_load. Depending on the compiler, code may be
    generated that re-reads cfq_rq->h_load_next after the check for NULL and
    then oops when reading se->avg.load_avg. The dissassembly showed that it
    was possible to reread h_load_next after the check for NULL.
    
    While this does not appear to be an issue for later compilers, it's still
    an accident if the correct code is generated. Full locking in this path
    would have high overhead so this patch uses READ_ONCE to read h_load_next
    only once and check for NULL before dereferencing. It was confirmed that
    there were no further oops after 10 days of testing.
    
    As Peter pointed out, it is also necessary to use WRITE_ONCE() to avoid any
    potential problems with store tearing.
    
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Fixes: 685207963be9 ("sched: Move h_load calculation to task_h_load()")
    Link: https://lkml.kernel.org/r/20190319123610.nsivgf3mjbjjesxb@techsingularity.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 356bcb7b4eaa2fb92332344b5d1c1e47103b6999
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Apr 4 18:12:17 2019 +0300

    xen: Prevent buffer overflow in privcmd ioctl
    
    commit 42d8644bd77dd2d747e004e367cb0c895a606f39 upstream.
    
    The "call" variable comes from the user in privcmd_ioctl_hypercall().
    It's an offset into the hypercall_page[] which has (PAGE_SIZE / 32)
    elements.  We need to put an upper bound on it to prevent an out of
    bounds access.
    
    Cc: stable@vger.kernel.org
    Fixes: 1246ae0bb992 ("xen: add variable hypercall caller")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79bedcb095bdc5c83db65180b414a8b0ac89b91d
Author: Helge Deller <deller@gmx.de>
Date:   Fri Jan 12 22:44:00 2018 +0100

    parisc: Use cr16 interval timers unconditionally on qemu
    
    commit 5ffa8518851f1401817c15d2a7eecc0373c26ff9 upstream.
    
    When running on qemu we know that the (emulated) cr16 cpu-internal
    clocks are syncronized. So let's use them unconditionally on qemu.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org # 4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32810f94a69cc7b4bd3f3f7d1ca3a27248961bb7
Author: Will Deacon <will@kernel.org>
Date:   Mon Apr 8 12:45:09 2019 +0100

    arm64: futex: Fix FUTEX_WAKE_OP atomic ops with non-zero result value
    
    commit 045afc24124d80c6998d9c770844c67912083506 upstream.
    
    Rather embarrassingly, our futex() FUTEX_WAKE_OP implementation doesn't
    explicitly set the return value on the non-faulting path and instead
    leaves it holding the result of the underlying atomic operation. This
    means that any FUTEX_WAKE_OP atomic operation which computes a non-zero
    value will be reported as having failed. Regrettably, I wrote the buggy
    code back in 2011 and it was upstreamed as part of the initial arm64
    support in 2012.
    
    The reasons we appear to get away with this are:
    
      1. FUTEX_WAKE_OP is rarely used and therefore doesn't appear to get
         exercised by futex() test applications
    
      2. If the result of the atomic operation is zero, the system call
         behaves correctly
    
      3. Prior to version 2.25, the only operation used by GLIBC set the
         futex to zero, and therefore worked as expected. From 2.25 onwards,
         FUTEX_WAKE_OP is not used by GLIBC at all.
    
    Fix the implementation by ensuring that the return value is either 0
    to indicate that the atomic operation completed successfully, or -EFAULT
    if we encountered a fault when accessing the user mapping.
    
    Cc: <stable@kernel.org>
    Fixes: 6170a97460db ("arm64: Atomic operations")
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff7a56ee2e86f4af65f1390877a6c9c8777db83a
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Mar 11 08:57:42 2019 +0100

    ARM: dts: at91: Fix typo in ISC_D0 on PC9
    
    commit e7dfb6d04e4715be1f3eb2c60d97b753fd2e4516 upstream.
    
    The function argument for the ISC_D0 on PC9 was incorrect. According to
    the documentation it should be 'C' aka 3.
    
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Reviewed-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Fixes: 7f16cb676c00 ("ARM: at91/dt: add sama5d2 pinmux")
    Cc: <stable@vger.kernel.org> # v4.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 208d25a7ae49746d7ff08efcea6cc4e190fa6cfb
Author: Cornelia Huck <cohuck@redhat.com>
Date:   Mon Apr 8 14:33:22 2019 +0200

    virtio: Honour 'may_reduce_num' in vring_create_virtqueue
    
    commit cf94db21905333e610e479688add629397a4b384 upstream.
    
    vring_create_virtqueue() allows the caller to specify via the
    may_reduce_num parameter whether the vring code is allowed to
    allocate a smaller ring than specified.
    
    However, the split ring allocation code tries to allocate a
    smaller ring on allocation failure regardless of what the
    caller specified. This may cause trouble for e.g. virtio-pci
    in legacy mode, which does not support ring resizing. (The
    packed ring code does not resize in any case.)
    
    Let's fix this by bailing out immediately in the split ring code
    if the requested size cannot be allocated and may_reduce_num has
    not been specified.
    
    While at it, fix a typo in the usage instructions.
    
    Fixes: 2a2d1382fe9d ("virtio: Add improved queue allocation API")
    Cc: stable@vger.kernel.org # v4.6+
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Jens Freimann <jfreimann@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97491c03592c3e6586172b40982e581ed7ede3c3
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Mon Mar 25 11:10:26 2019 -0700

    genirq: Respect IRQCHIP_SKIP_SET_WAKE in irq_chip_set_wake_parent()
    
    commit 325aa19598e410672175ed50982f902d4e3f31c5 upstream.
    
    If a child irqchip calls irq_chip_set_wake_parent() but its parent irqchip
    has the IRQCHIP_SKIP_SET_WAKE flag set an error is returned.
    
    This is inconsistent behaviour vs. set_irq_wake_real() which returns 0 when
    the irqchip has the IRQCHIP_SKIP_SET_WAKE flag set. It doesn't attempt to
    walk the chain of parents and set irq wake on any chips that don't have the
    flag set either. If the intent is to call the .irq_set_wake() callback of
    the parent irqchip, then we expect irqchip implementations to omit the
    IRQCHIP_SKIP_SET_WAKE flag and implement an .irq_set_wake() function that
    calls irq_chip_set_wake_parent().
    
    The problem has been observed on a Qualcomm sdm845 device where set wake
    fails on any GPIO interrupts after applying work in progress wakeup irq
    patches to the GPIO driver. The chain of chips looks like this:
    
         QCOM GPIO -> QCOM PDC (SKIP) -> ARM GIC (SKIP)
    
    The GPIO controllers parent is the QCOM PDC irqchip which in turn has ARM
    GIC as parent.  The QCOM PDC irqchip has the IRQCHIP_SKIP_SET_WAKE flag
    set, and so does the grandparent ARM GIC.
    
    The GPIO driver doesn't know if the parent needs to set wake or not, so it
    unconditionally calls irq_chip_set_wake_parent() causing this function to
    return a failure because the parent irqchip (PDC) doesn't have the
    .irq_set_wake() callback set. Returning 0 instead makes everything work and
    irqs from the GPIO controller can be configured for wakeup.
    
    Make it consistent by returning 0 (success) from irq_chip_set_wake_parent()
    when a parent chip has IRQCHIP_SKIP_SET_WAKE set.
    
    [ tglx: Massaged changelog ]
    
    Fixes: 08b55e2a9208e ("genirq: Add irqchip_set_wake_parent")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-gpio@vger.kernel.org
    Cc: Lina Iyer <ilina@codeaurora.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190325181026.247796-1-swboyd@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 056066d8a769aa87f280f00c6c2d802ecc2c7a6b
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Wed Apr 10 16:27:51 2019 -0400

    block: do not leak memory in bio_copy_user_iov()
    
    commit a3761c3c91209b58b6f33bf69dd8bb8ec0c9d925 upstream.
    
    When bio_add_pc_page() fails in bio_copy_user_iov() we should free
    the page we just allocated otherwise we are leaking it.
    
    Cc: linux-block@vger.kernel.org
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ac411b49fd636a53d3c117caa71af44a604859d
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Mar 26 10:49:56 2019 +0000

    Btrfs: do not allow trimming when a fs is mounted with the nologreplay option
    
    commit f35f06c35560a86e841631f0243b83a984dc11a9 upstream.
    
    Whan a filesystem is mounted with the nologreplay mount option, which
    requires it to be mounted in RO mode as well, we can not allow discard on
    free space inside block groups, because log trees refer to extents that
    are not pinned in a block group's free space cache (pinning the extents is
    precisely the first phase of replaying a log tree).
    
    So do not allow the fitrim ioctl to do anything when the filesystem is
    mounted with the nologreplay option, because later it can be mounted RW
    without that option, which causes log replay to happen and result in
    either a failure to replay the log trees (leading to a mount failure), a
    crash or some silent corruption.
    
    Reported-by: Darrick J. Wong <darrick.wong@oracle.com>
    Fixes: 96da09192cda ("btrfs: Introduce new mount option to disable tree log replay")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4a40058ac9e6447a05626a0ba51ffc58a834f7b
Author: S.j. Wang <shengjiu.wang@nxp.com>
Date:   Wed Feb 27 06:31:12 2019 +0000

    ASoC: fsl_esai: fix channel swap issue when stream starts
    
    commit 0ff4e8c61b794a4bf6c854ab071a1abaaa80f358 upstream.
    
    There is very low possibility ( < 0.1% ) that channel swap happened
    in beginning when multi output/input pin is enabled. The issue is
    that hardware can't send data to correct pin in the beginning with
    the normal enable flow.
    
    This is hardware issue, but there is no errata, the workaround flow
    is that: Each time playback/recording, firstly clear the xSMA/xSMB,
    then enable TE/RE, then enable xSMB and xSMA (xSMB must be enabled
    before xSMA). Which is to use the xSMA as the trigger start register,
    previously the xCR_TE or xCR_RE is the bit for starting.
    
    Fixes commit 43d24e76b698 ("ASoC: fsl_esai: Add ESAI CPU DAI driver")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Acked-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a25d4ede3f6fc3b35da90c2ac22a5081c25a75d8
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Apr 5 18:38:53 2019 -0700

    include/linux/bitrev.h: fix constant bitrev
    
    commit 6147e136ff5071609b54f18982dea87706288e21 upstream.
    
    clang points out with hundreds of warnings that the bitrev macros have a
    problem with constant input:
    
      drivers/hwmon/sht15.c:187:11: error: variable '__x' is uninitialized when used within its own initialization
            [-Werror,-Wuninitialized]
              u8 crc = bitrev8(data->val_status & 0x0F);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      include/linux/bitrev.h:102:21: note: expanded from macro 'bitrev8'
              __constant_bitrev8(__x) :                       \
              ~~~~~~~~~~~~~~~~~~~^~~~
      include/linux/bitrev.h:67:11: note: expanded from macro '__constant_bitrev8'
              u8 __x = x;                     \
                 ~~~   ^
    
    Both the bitrev and the __constant_bitrev macros use an internal
    variable named __x, which goes horribly wrong when passing one to the
    other.
    
    The obvious fix is to rename one of the variables, so this adds an extra
    '_'.
    
    It seems we got away with this because
    
     - there are only a few drivers using bitrev macros
    
     - usually there are no constant arguments to those
    
     - when they are constant, they tend to be either 0 or (unsigned)-1
       (drivers/isdn/i4l/isdnhdlc.o, drivers/iio/amplifiers/ad8366.c) and
       give the correct result by pure chance.
    
    In fact, the only driver that I could find that gets different results
    with this is drivers/net/wan/slic_ds26522.c, which in turn is a driver
    for fairly rare hardware (adding the maintainer to Cc for testing).
    
    Link: http://lkml.kernel.org/r/20190322140503.123580-1-arnd@arndb.de
    Fixes: 556d2f055bf6 ("ARM: 8187/1: add CONFIG_HAVE_ARCH_BITREVERSE to support rbit instruction")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Zhao Qiang <qiang.zhao@nxp.com>
    Cc: Yalin Wang <yalin.wang@sonymobile.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a957aa573c1e8c4e2bed1fa253b70ec6008fbde8
Author: Helge Deller <deller@gmx.de>
Date:   Tue Apr 2 12:13:27 2019 +0200

    parisc: Detect QEMU earlier in boot process
    
    commit d006e95b5561f708d0385e9677ffe2c46f2ae345 upstream.
    
    While adding LASI support to QEMU, I noticed that the QEMU detection in
    the kernel happens much too late. For example, when a LASI chip is found
    by the kernel, it registers the LASI LED driver as well.  But when we
    run on QEMU it makes sense to avoid spending unnecessary CPU cycles, so
    we need to access the running_on_QEMU flag earlier than before.
    
    This patch now makes the QEMU detection the fist task of the Linux
    kernel by moving it to where the kernel enters the C-coding.
    
    Fixes: 310d82784fb4 ("parisc: qemu idle sleep support")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c35bf96aba0ca6bd6c7e5e180bc43d1a0f0c43f7
Author: Zubin Mithra <zsm@chromium.org>
Date:   Thu Apr 4 14:33:55 2019 -0700

    ALSA: seq: Fix OOB-reads from strlcpy
    
    commit 212ac181c158c09038c474ba68068be49caecebb upstream.
    
    When ioctl calls are made with non-null-terminated userspace strings,
    strlcpy causes an OOB-read from within strlen. Fix by changing to use
    strscpy instead.
    
    Signed-off-by: Zubin Mithra <zsm@chromium.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3320acb47874c0977dd49d8adc19d5047f52f1a
Author: Sheena Mira-ato <sheena.mira-ato@alliedtelesis.co.nz>
Date:   Mon Apr 1 13:04:42 2019 +1300

    ip6_tunnel: Match to ARPHRD_TUNNEL6 for dev type
    
    [ Upstream commit b2e54b09a3d29c4db883b920274ca8dca4d9f04d ]
    
    The device type for ip6 tunnels is set to
    ARPHRD_TUNNEL6. However, the ip4ip6_err function
    is expecting the device type of the tunnel to be
    ARPHRD_TUNNEL.  Since the device types do not
    match, the function exits and the ICMP error
    packet is not sent to the originating host. Note
    that the device type for IPv4 tunnels is set to
    ARPHRD_TUNNEL.
    
    Fix is to expect a tunnel device type of
    ARPHRD_TUNNEL6 instead.  Now the tunnel device
    type matches and the ICMP error packet is sent
    to the originating host.
    
    Signed-off-by: Sheena Mira-ato <sheena.mira-ato@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77b924d94dd7a7719933ba9d97a7ba4d19d09d00
Author: Li RongQing <lirongqing@baidu.com>
Date:   Fri Mar 29 09:18:02 2019 +0800

    net: ethtool: not call vzalloc for zero sized memory request
    
    [ Upstream commit 3d8830266ffc28c16032b859e38a0252e014b631 ]
    
    NULL or ZERO_SIZE_PTR will be returned for zero sized memory
    request, and derefencing them will lead to a segfault
    
    so it is unnecessory to call vzalloc for zero sized memory
    request and not call functions which maybe derefence the
    NULL allocated memory
    
    this also fixes a possible memory leak if phy_ethtool_get_stats
    returns error, memory should be freed before exit
    
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Reviewed-by: Wang Li <wangli39@baidu.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6996763856e1fb27ccae260e41fd73a3fff56678
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 27 08:21:30 2019 -0700

    netns: provide pure entropy for net_hash_mix()
    
    [ Upstream commit 355b98553789b646ed97ad801a619ff898471b92 ]
    
    net_hash_mix() currently uses kernel address of a struct net,
    and is used in many places that could be used to reveal this
    address to a patient attacker, thus defeating KASLR, for
    the typical case (initial net namespace, &init_net is
    not dynamically allocated)
    
    I believe the original implementation tried to avoid spending
    too many cycles in this function, but security comes first.
    
    Also provide entropy regardless of CONFIG_NET_NS.
    
    Fixes: 0b4419162aa6 ("netns: introduce the net_hash_mix "salt" for hashes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Amit Klein <aksecurity@gmail.com>
    Reported-by: Benny Pinkas <benny@pinkas.net>
    Cc: Pavel Emelyanov <xemul@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a739f1ad0b12f73afc176b2788c6d0f4e9cc739
Author: Yuval Avnery <yuvalav@mellanox.com>
Date:   Mon Mar 11 06:18:24 2019 +0200

    net/mlx5e: Add a lock on tir list
    
    [ Upstream commit 80a2a9026b24c6bd34b8d58256973e22270bedec ]
    
    Refresh tirs is looping over a global list of tirs while netdevs are
    adding and removing tirs from that list. That is why a lock is
    required.
    
    Fixes: 724b2aa15126 ("net/mlx5e: TIRs management refactoring")
    Signed-off-by: Yuval Avnery <yuvalav@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e302e8e10b05165ed21273539a1e6a83ab93e9e
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Mon Apr 8 17:39:54 2019 -0400

    bnxt_en: Improve RX consumer index validity check.
    
    [ Upstream commit a1b0e4e684e9c300b9e759b46cb7a0147e61ddff ]
    
    There is logic to check that the RX/TPA consumer index is the expected
    index to work around a hardware problem.  However, the potentially bad
    consumer index is first used to index into an array to reference an entry.
    This can potentially crash if the bad consumer index is beyond legal
    range.  Improve the logic to use the consumer index for dereferencing
    after the validity check and log an error message.
    
    Fixes: fa7e28127a5a ("bnxt_en: Add workaround to detect bad opaque in rx completion (part 2)")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebd153c6835cd8e3b4ab4eccf0042655f1d3ebb1
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Mon Apr 8 17:39:55 2019 -0400

    bnxt_en: Reset device on RX buffer errors.
    
    [ Upstream commit 8e44e96c6c8e8fb80b84a2ca11798a8554f710f2 ]
    
    If the RX completion indicates RX buffers errors, the RX ring will be
    disabled by firmware and no packets will be received on that ring from
    that point on.  Recover by resetting the device.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f5d628adc1dd5542f7d1a08b2bbd808c1186c7e
Author: Stephen Suryaputra <ssuryaextr@gmail.com>
Date:   Mon Apr 1 09:17:32 2019 -0400

    vrf: check accept_source_route on the original netdevice
    
    [ Upstream commit 8c83f2df9c6578ea4c5b940d8238ad8a41b87e9e ]
    
    Configuration check to accept source route IP options should be made on
    the incoming netdevice when the skb->dev is an l3mdev master. The route
    lookup for the source route next hop also needs the incoming netdev.
    
    v2->v3:
    - Simplify by passing the original netdevice down the stack (per David
      Ahern).
    
    Signed-off-by: Stephen Suryaputra <ssuryaextr@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 051ca6a515a8cfd2b88b0b7f53a1ecb60e0881a6
Author: Koen De Schepper <koen.de_schepper@nokia-bell-labs.com>
Date:   Thu Apr 4 12:24:02 2019 +0000

    tcp: Ensure DCTCP reacts to losses
    
    [ Upstream commit aecfde23108b8e637d9f5c5e523b24fb97035dc3 ]
    
    RFC8257 §3.5 explicitly states that "A DCTCP sender MUST react to
    loss episodes in the same way as conventional TCP".
    
    Currently, Linux DCTCP performs no cwnd reduction when losses
    are encountered. Optionally, the dctcp_clamp_alpha_on_loss resets
    alpha to its maximal value if a RTO happens. This behavior
    is sub-optimal for at least two reasons: i) it ignores losses
    triggering fast retransmissions; and ii) it causes unnecessary large
    cwnd reduction in the future if the loss was isolated as it resets
    the historical term of DCTCP's alpha EWMA to its maximal value (i.e.,
    denoting a total congestion). The second reason has an especially
    noticeable effect when using DCTCP in high BDP environments, where
    alpha normally stays at low values.
    
    This patch replace the clamping of alpha by setting ssthresh to
    half of cwnd for both fast retransmissions and RTOs, at most once
    per RTT. Consequently, the dctcp_clamp_alpha_on_loss module parameter
    has been removed.
    
    The table below shows experimental results where we measured the
    drop probability of a PIE AQM (not applying ECN marks) at a
    bottleneck in the presence of a single TCP flow with either the
    alpha-clamping option enabled or the cwnd halving proposed by this
    patch. Results using reno or cubic are given for comparison.
    
                              |  Link   |   RTT    |    Drop
                     TCP CC   |  speed  | base+AQM | probability
            ==================|=========|==========|============
                        CUBIC |  40Mbps |  7+20ms  |    0.21%
                         RENO |         |          |    0.19%
            DCTCP-CLAMP-ALPHA |         |          |   25.80%
             DCTCP-HALVE-CWND |         |          |    0.22%
            ------------------|---------|----------|------------
                        CUBIC | 100Mbps |  7+20ms  |    0.03%
                         RENO |         |          |    0.02%
            DCTCP-CLAMP-ALPHA |         |          |   23.30%
             DCTCP-HALVE-CWND |         |          |    0.04%
            ------------------|---------|----------|------------
                        CUBIC | 800Mbps |   1+1ms  |    0.04%
                         RENO |         |          |    0.05%
            DCTCP-CLAMP-ALPHA |         |          |   18.70%
             DCTCP-HALVE-CWND |         |          |    0.06%
    
    We see that, without halving its cwnd for all source of losses,
    DCTCP drives the AQM to large drop probabilities in order to keep
    the queue length under control (i.e., it repeatedly faces RTOs).
    Instead, if DCTCP reacts to all source of losses, it can then be
    controlled by the AQM using similar drop levels than cubic or reno.
    
    Signed-off-by: Koen De Schepper <koen.de_schepper@nokia-bell-labs.com>
    Signed-off-by: Olivier Tilmans <olivier.tilmans@nokia-bell-labs.com>
    Cc: Bob Briscoe <research@bobbriscoe.net>
    Cc: Lawrence Brakmo <brakmo@fb.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Daniel Borkmann <borkmann@iogearbox.net>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Andrew Shewmaker <agshew@gmail.com>
    Cc: Glenn Judd <glenn.judd@morganstanley.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57601d32dece9d91a6219818c6c66576f817ac7a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 16:58:15 2019 +0800

    sctp: initialize _pad of sockaddr_in before copying to user memory
    
    [ Upstream commit 09279e615c81ce55e04835970601ae286e3facbe ]
    
    Syzbot report a kernel-infoleak:
    
      BUG: KMSAN: kernel-infoleak in _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
      Call Trace:
        _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
        copy_to_user include/linux/uaccess.h:174 [inline]
        sctp_getsockopt_peer_addrs net/sctp/socket.c:5911 [inline]
        sctp_getsockopt+0x1668e/0x17f70 net/sctp/socket.c:7562
        ...
      Uninit was stored to memory at:
        sctp_transport_init net/sctp/transport.c:61 [inline]
        sctp_transport_new+0x16d/0x9a0 net/sctp/transport.c:115
        sctp_assoc_add_peer+0x532/0x1f70 net/sctp/associola.c:637
        sctp_process_param net/sctp/sm_make_chunk.c:2548 [inline]
        sctp_process_init+0x1a1b/0x3ed0 net/sctp/sm_make_chunk.c:2361
        ...
      Bytes 8-15 of 16 are uninitialized
    
    It was caused by that th _pad field (the 8-15 bytes) of a v4 addr (saved in
    struct sockaddr_in) wasn't initialized, but directly copied to user memory
    in sctp_getsockopt_peer_addrs().
    
    So fix it by calling memset(addr->v4.sin_zero, 0, 8) to initialize _pad of
    sockaddr_in before copying it to user memory in sctp_v4_addr_to_user(), as
    sctp_v6_addr_to_user() does.
    
    Reported-by: syzbot+86b5c7c236a22616a72f@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Tested-by: Alexander Potapenko <glider@google.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f8b25866727c2ea72e5b2ee4e00276e671a7512
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Mar 27 15:26:01 2019 +0100

    qmi_wwan: add Olicard 600
    
    [ Upstream commit 6289d0facd9ebce4cc83e5da39e15643ee998dc5 ]
    
    This is a Qualcomm based device with a QMI function on interface 4.
    It is mode switched from 2020:2030 using a standard eject message.
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  6 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2020 ProdID=2031 Rev= 2.32
    S:  Manufacturer=Mobile Connect
    S:  Product=Mobile Connect
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 6 Cfg#= 1 Atr=80 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=89(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=(none)
    E:  Ad=8a(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=125us
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12ff23da758517d5c618b6f59f5818e9ad6d8542
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Thu Mar 28 07:36:00 2019 +0100

    openvswitch: fix flow actions reallocation
    
    [ Upstream commit f28cd2af22a0c134e4aa1c64a70f70d815d473fb ]
    
    The flow action buffer can be resized if it's not big enough to contain
    all the requested flow actions. However, this resize doesn't take into
    account the new requested size, the buffer is only increased by a factor
    of 2x. This might be not enough to contain the new data, causing a
    buffer overflow, for example:
    
    [   42.044472] =============================================================================
    [   42.045608] BUG kmalloc-96 (Not tainted): Redzone overwritten
    [   42.046415] -----------------------------------------------------------------------------
    
    [   42.047715] Disabling lock debugging due to kernel taint
    [   42.047716] INFO: 0x8bf2c4a5-0x720c0928. First byte 0x0 instead of 0xcc
    [   42.048677] INFO: Slab 0xbc6d2040 objects=29 used=18 fp=0xdc07dec4 flags=0x2808101
    [   42.049743] INFO: Object 0xd53a3464 @offset=2528 fp=0xccdcdebb
    
    [   42.050747] Redzone 76f1b237: cc cc cc cc cc cc cc cc                          ........
    [   42.051839] Object d53a3464: 6b 6b 6b 6b 6b 6b 6b 6b 0c 00 00 00 6c 00 00 00  kkkkkkkk....l...
    [   42.053015] Object f49a30cc: 6c 00 0c 00 00 00 00 00 00 00 00 03 78 a3 15 f6  l...........x...
    [   42.054203] Object acfe4220: 20 00 02 00 ff ff ff ff 00 00 00 00 00 00 00 00   ...............
    [   42.055370] Object 21024e91: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   42.056541] Object 070e04c3: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   42.057797] Object 948a777a: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   42.059061] Redzone 8bf2c4a5: 00 00 00 00                                      ....
    [   42.060189] Padding a681b46e: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
    
    Fix by making sure the new buffer is properly resized to contain all the
    requested data.
    
    BugLink: https://bugs.launchpad.net/bugs/1813244
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Acked-by: Pravin B Shelar <pshelar@ovn.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1aa69beac4d88dfb892a95ee04fe6f932803952
Author: Mao Wenan <maowenan@huawei.com>
Date:   Thu Mar 28 17:10:56 2019 +0800

    net: rds: force to destroy connection if t_sock is NULL in rds_tcp_kill_sock().
    
    [ Upstream commit cb66ddd156203daefb8d71158036b27b0e2caf63 ]
    
    When it is to cleanup net namespace, rds_tcp_exit_net() will call
    rds_tcp_kill_sock(), if t_sock is NULL, it will not call
    rds_conn_destroy(), rds_conn_path_destroy() and rds_tcp_conn_free() to free
    connection, and the worker cp_conn_w is not stopped, afterwards the net is freed in
    net_drop_ns(); While cp_conn_w rds_connect_worker() will call rds_tcp_conn_path_connect()
    and reference 'net' which has already been freed.
    
    In rds_tcp_conn_path_connect(), rds_tcp_set_callbacks() will set t_sock = sock before
    sock->ops->connect, but if connect() is failed, it will call
    rds_tcp_restore_callbacks() and set t_sock = NULL, if connect is always
    failed, rds_connect_worker() will try to reconnect all the time, so
    rds_tcp_kill_sock() will never to cancel worker cp_conn_w and free the
    connections.
    
    Therefore, the condition !tc->t_sock is not needed if it is going to do
    cleanup_net->rds_tcp_exit_net->rds_tcp_kill_sock, because tc->t_sock is always
    NULL, and there is on other path to cancel cp_conn_w and free
    connection. So this patch is to fix this.
    
    rds_tcp_kill_sock():
    ...
    if (net != c_net || !tc->t_sock)
    ...
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    
    ==================================================================
    BUG: KASAN: use-after-free in inet_create+0xbcc/0xd28
    net/ipv4/af_inet.c:340
    Read of size 4 at addr ffff8003496a4684 by task kworker/u8:4/3721
    
    CPU: 3 PID: 3721 Comm: kworker/u8:4 Not tainted 5.1.0 #11
    Hardware name: linux,dummy-virt (DT)
    Workqueue: krdsd rds_connect_worker
    Call trace:
     dump_backtrace+0x0/0x3c0 arch/arm64/kernel/time.c:53
     show_stack+0x28/0x38 arch/arm64/kernel/traps.c:152
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x120/0x188 lib/dump_stack.c:113
     print_address_description+0x68/0x278 mm/kasan/report.c:253
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x21c/0x348 mm/kasan/report.c:409
     __asan_report_load4_noabort+0x30/0x40 mm/kasan/report.c:429
     inet_create+0xbcc/0xd28 net/ipv4/af_inet.c:340
     __sock_create+0x4f8/0x770 net/socket.c:1276
     sock_create_kern+0x50/0x68 net/socket.c:1322
     rds_tcp_conn_path_connect+0x2b4/0x690 net/rds/tcp_connect.c:114
     rds_connect_worker+0x108/0x1d0 net/rds/threads.c:175
     process_one_work+0x6e8/0x1700 kernel/workqueue.c:2153
     worker_thread+0x3b0/0xdd0 kernel/workqueue.c:2296
     kthread+0x2f0/0x378 kernel/kthread.c:255
     ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:1117
    
    Allocated by task 687:
     save_stack mm/kasan/kasan.c:448 [inline]
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xd4/0x180 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x14/0x20 mm/kasan/kasan.c:490
     slab_post_alloc_hook mm/slab.h:444 [inline]
     slab_alloc_node mm/slub.c:2705 [inline]
     slab_alloc mm/slub.c:2713 [inline]
     kmem_cache_alloc+0x14c/0x388 mm/slub.c:2718
     kmem_cache_zalloc include/linux/slab.h:697 [inline]
     net_alloc net/core/net_namespace.c:384 [inline]
     copy_net_ns+0xc4/0x2d0 net/core/net_namespace.c:424
     create_new_namespaces+0x300/0x658 kernel/nsproxy.c:107
     unshare_nsproxy_namespaces+0xa0/0x198 kernel/nsproxy.c:206
     ksys_unshare+0x340/0x628 kernel/fork.c:2577
     __do_sys_unshare kernel/fork.c:2645 [inline]
     __se_sys_unshare kernel/fork.c:2643 [inline]
     __arm64_sys_unshare+0x38/0x58 kernel/fork.c:2643
     __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]
     invoke_syscall arch/arm64/kernel/syscall.c:47 [inline]
     el0_svc_common+0x168/0x390 arch/arm64/kernel/syscall.c:83
     el0_svc_handler+0x60/0xd0 arch/arm64/kernel/syscall.c:129
     el0_svc+0x8/0xc arch/arm64/kernel/entry.S:960
    
    Freed by task 264:
     save_stack mm/kasan/kasan.c:448 [inline]
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x114/0x220 mm/kasan/kasan.c:521
     kasan_slab_free+0x10/0x18 mm/kasan/kasan.c:528
     slab_free_hook mm/slub.c:1370 [inline]
     slab_free_freelist_hook mm/slub.c:1397 [inline]
     slab_free mm/slub.c:2952 [inline]
     kmem_cache_free+0xb8/0x3a8 mm/slub.c:2968
     net_free net/core/net_namespace.c:400 [inline]
     net_drop_ns.part.6+0x78/0x90 net/core/net_namespace.c:407
     net_drop_ns net/core/net_namespace.c:406 [inline]
     cleanup_net+0x53c/0x6d8 net/core/net_namespace.c:569
     process_one_work+0x6e8/0x1700 kernel/workqueue.c:2153
     worker_thread+0x3b0/0xdd0 kernel/workqueue.c:2296
     kthread+0x2f0/0x378 kernel/kthread.c:255
     ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:1117
    
    The buggy address belongs to the object at ffff8003496a3f80
     which belongs to the cache net_namespace of size 7872
    The buggy address is located 1796 bytes inside of
     7872-byte region [ffff8003496a3f80, ffff8003496a5e40)
    The buggy address belongs to the page:
    page:ffff7e000d25a800 count:1 mapcount:0 mapping:ffff80036ce4b000
    index:0x0 compound_mapcount: 0
    flags: 0xffffe0000008100(slab|head)
    raw: 0ffffe0000008100 dead000000000100 dead000000000200 ffff80036ce4b000
    raw: 0000000000000000 0000000080040004 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8003496a4580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8003496a4600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8003496a4680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
     ffff8003496a4700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8003496a4780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Fixes: 467fa15356ac("RDS-TCP: Support multiple RDS-TCP listen endpoints, one per netns.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b09d697afce2e42f8850be647c7645045b546e7d
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Mar 29 12:19:46 2019 +0100

    kcm: switch order of device registration to fix a crash
    
    [ Upstream commit 3c446e6f96997f2a95bf0037ef463802162d2323 ]
    
    When kcm is loaded while many processes try to create a KCM socket, a
    crash occurs:
     BUG: unable to handle kernel NULL pointer dereference at 000000000000000e
     IP: mutex_lock+0x27/0x40 kernel/locking/mutex.c:240
     PGD 8000000016ef2067 P4D 8000000016ef2067 PUD 3d6e9067 PMD 0
     Oops: 0002 [#1] SMP KASAN PTI
     CPU: 0 PID: 7005 Comm: syz-executor.5 Not tainted 4.12.14-396-default #1 SLE15-SP1 (unreleased)
     RIP: 0010:mutex_lock+0x27/0x40 kernel/locking/mutex.c:240
     RSP: 0018:ffff88000d487a00 EFLAGS: 00010246
     RAX: 0000000000000000 RBX: 000000000000000e RCX: 1ffff100082b0719
     ...
     CR2: 000000000000000e CR3: 000000004b1bc003 CR4: 0000000000060ef0
     Call Trace:
      kcm_create+0x600/0xbf0 [kcm]
      __sock_create+0x324/0x750 net/socket.c:1272
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. kcm_create tries to do "net_generic(net,
    kcm_net_id)". but kcm_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with mutiple processes doing socket(PF_KCM, ...)
    and one process doing module removal.
    
    Fixes: ab7ac4eb9832 ("kcm: Kernel Connection Multiplexor module")
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2164e967d85e708efd769b5d432445046711cfb0
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Thu Apr 4 16:37:53 2019 +0200

    ipv6: sit: reset ip header pointer in ipip6_rcv
    
    [ Upstream commit bb9bd814ebf04f579be466ba61fc922625508807 ]
    
    ipip6 tunnels run iptunnel_pull_header on received skbs. This can
    determine the following use-after-free accessing iph pointer since
    the packet will be 'uncloned' running pskb_expand_head if it is a
    cloned gso skb (e.g if the packet has been sent though a veth device)
    
    [  706.369655] BUG: KASAN: use-after-free in ipip6_rcv+0x1678/0x16e0 [sit]
    [  706.449056] Read of size 1 at addr ffffe01b6bd855f5 by task ksoftirqd/1/=
    [  706.669494] Hardware name: HPE ProLiant m400 Server/ProLiant m400 Server, BIOS U02 08/19/2016
    [  706.771839] Call trace:
    [  706.801159]  dump_backtrace+0x0/0x2f8
    [  706.845079]  show_stack+0x24/0x30
    [  706.884833]  dump_stack+0xe0/0x11c
    [  706.925629]  print_address_description+0x68/0x260
    [  706.982070]  kasan_report+0x178/0x340
    [  707.025995]  __asan_report_load1_noabort+0x30/0x40
    [  707.083481]  ipip6_rcv+0x1678/0x16e0 [sit]
    [  707.132623]  tunnel64_rcv+0xd4/0x200 [tunnel4]
    [  707.185940]  ip_local_deliver_finish+0x3b8/0x988
    [  707.241338]  ip_local_deliver+0x144/0x470
    [  707.289436]  ip_rcv_finish+0x43c/0x14b0
    [  707.335447]  ip_rcv+0x628/0x1138
    [  707.374151]  __netif_receive_skb_core+0x1670/0x2600
    [  707.432680]  __netif_receive_skb+0x28/0x190
    [  707.482859]  process_backlog+0x1d0/0x610
    [  707.529913]  net_rx_action+0x37c/0xf68
    [  707.574882]  __do_softirq+0x288/0x1018
    [  707.619852]  run_ksoftirqd+0x70/0xa8
    [  707.662734]  smpboot_thread_fn+0x3a4/0x9e8
    [  707.711875]  kthread+0x2c8/0x350
    [  707.750583]  ret_from_fork+0x10/0x18
    
    [  707.811302] Allocated by task 16982:
    [  707.854182]  kasan_kmalloc.part.1+0x40/0x108
    [  707.905405]  kasan_kmalloc+0xb4/0xc8
    [  707.948291]  kasan_slab_alloc+0x14/0x20
    [  707.994309]  __kmalloc_node_track_caller+0x158/0x5e0
    [  708.053902]  __kmalloc_reserve.isra.8+0x54/0xe0
    [  708.108280]  __alloc_skb+0xd8/0x400
    [  708.150139]  sk_stream_alloc_skb+0xa4/0x638
    [  708.200346]  tcp_sendmsg_locked+0x818/0x2b90
    [  708.251581]  tcp_sendmsg+0x40/0x60
    [  708.292376]  inet_sendmsg+0xf0/0x520
    [  708.335259]  sock_sendmsg+0xac/0xf8
    [  708.377096]  sock_write_iter+0x1c0/0x2c0
    [  708.424154]  new_sync_write+0x358/0x4a8
    [  708.470162]  __vfs_write+0xc4/0xf8
    [  708.510950]  vfs_write+0x12c/0x3d0
    [  708.551739]  ksys_write+0xcc/0x178
    [  708.592533]  __arm64_sys_write+0x70/0xa0
    [  708.639593]  el0_svc_handler+0x13c/0x298
    [  708.686646]  el0_svc+0x8/0xc
    
    [  708.739019] Freed by task 17:
    [  708.774597]  __kasan_slab_free+0x114/0x228
    [  708.823736]  kasan_slab_free+0x10/0x18
    [  708.868703]  kfree+0x100/0x3d8
    [  708.905320]  skb_free_head+0x7c/0x98
    [  708.948204]  skb_release_data+0x320/0x490
    [  708.996301]  pskb_expand_head+0x60c/0x970
    [  709.044399]  __iptunnel_pull_header+0x3b8/0x5d0
    [  709.098770]  ipip6_rcv+0x41c/0x16e0 [sit]
    [  709.146873]  tunnel64_rcv+0xd4/0x200 [tunnel4]
    [  709.200195]  ip_local_deliver_finish+0x3b8/0x988
    [  709.255596]  ip_local_deliver+0x144/0x470
    [  709.303692]  ip_rcv_finish+0x43c/0x14b0
    [  709.349705]  ip_rcv+0x628/0x1138
    [  709.388413]  __netif_receive_skb_core+0x1670/0x2600
    [  709.446943]  __netif_receive_skb+0x28/0x190
    [  709.497120]  process_backlog+0x1d0/0x610
    [  709.544169]  net_rx_action+0x37c/0xf68
    [  709.589131]  __do_softirq+0x288/0x1018
    
    [  709.651938] The buggy address belongs to the object at ffffe01b6bd85580
                    which belongs to the cache kmalloc-1024 of size 1024
    [  709.804356] The buggy address is located 117 bytes inside of
                    1024-byte region [ffffe01b6bd85580, ffffe01b6bd85980)
    [  709.946340] The buggy address belongs to the page:
    [  710.003824] page:ffff7ff806daf600 count:1 mapcount:0 mapping:ffffe01c4001f600 index:0x0
    [  710.099914] flags: 0xfffff8000000100(slab)
    [  710.149059] raw: 0fffff8000000100 dead000000000100 dead000000000200 ffffe01c4001f600
    [  710.242011] raw: 0000000000000000 0000000000380038 00000001ffffffff 0000000000000000
    [  710.334966] page dumped because: kasan: bad access detected
    
    Fix it resetting iph pointer after iptunnel_pull_header
    
    Fixes: a09a4c8dd1ec ("tunnels: Remove encapsulation offloads on decap")
    Tested-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e33684f9bc4c2bf01c4b6e63048e79b830cacbe1
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Tue Apr 2 19:38:04 2019 +0800

    ipv6: Fix dangling pointer when ipv6 fragment
    
    [ Upstream commit ef0efcd3bd3fd0589732b67fb586ffd3c8705806 ]
    
    At the beginning of ip6_fragment func, the prevhdr pointer is
    obtained in the ip6_find_1stfragopt func.
    However, all the pointers pointing into skb header may change
    when calling skb_checksum_help func with
    skb->ip_summed = CHECKSUM_PARTIAL condition.
    The prevhdr pointe will be dangling if it is not reloaded after
    calling __skb_linearize func in skb_checksum_help func.
    
    Here, I add a variable, nexthdr_offset, to evaluate the offset,
    which does not changes even after calling __skb_linearize func.
    
    Fixes: 405c92f7a541 ("ipv6: add defensive check for CHECKSUM_PARTIAL skbs in ip_fragment")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wenhao Zhang <zhangwenhao8@huawei.com>
    Reported-by: syzbot+e8ce541d095e486074fc@syzkaller.appspotmail.com
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b7984e8ff3b2c9e8685ffee04097ba927347f39
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jan 21 17:26:42 2019 +0100

    tty: ldisc: add sysctl to prevent autoloading of ldiscs
    
    commit 7c0cca7c847e6e019d67b7d793efbbe3b947d004 upstream.
    
    By default, the kernel will automatically load the module of any line
    dicipline that is asked for.  As this sometimes isn't the safest thing
    to do, provide a sysctl to disable this feature.
    
    By default, we set this to 'y' as that is the historical way that Linux
    has worked, and we do not want to break working systems.  But in the
    future, perhaps this can default to 'n' to prevent this functionality.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 942ddc0de8efb52c43250033c7c6091f15e191f5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Apr 5 15:39:26 2019 +0200

    tty: mark Siemens R3964 line discipline as BROKEN
    
    commit c7084edc3f6d67750f50d4183134c4fb5712a5c8 upstream.
    
    The n_r3964 line discipline driver was written in a different time, when
    SMP machines were rare, and users were trusted to do the right thing.
    Since then, the world has moved on but not this code, it has stayed
    rooted in the past with its lovely hand-crafted list structures and
    loads of "interesting" race conditions all over the place.
    
    After attempting to clean up most of the issues, I just gave up and am
    now marking the driver as BROKEN so that hopefully someone who has this
    hardware will show up out of the woodwork (I know you are out there!)
    and will help with debugging a raft of changes that I had laying around
    for the code, but was too afraid to commit as odds are they would break
    things.
    
    Many thanks to Jann and Linus for pointing out the initial problems in
    this codebase, as well as many reviews of my attempts to fix the issues.
    It was a case of whack-a-mole, and as you can see, the mole won.
    
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit da6c4933cd5795e115124e50f93bc5426dec19a0
Author: Yueyi Li <liyueyi@live.com>
Date:   Mon Dec 24 07:40:07 2018 +0000

    arm64: kaslr: Reserve size of ARM64_MEMSTART_ALIGN in linear region
    
    [ Upstream commit c8a43c18a97845e7f94ed7d181c11f41964976a2 ]
    
    When KASLR is enabled (CONFIG_RANDOMIZE_BASE=y), the top 4K of kernel
    virtual address space may be mapped to physical addresses despite being
    reserved for ERR_PTR values.
    
    Fix the randomization of the linear region so that we avoid mapping the
    last page of the virtual address space.
    
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: liyueyi <liyueyi@live.com>
    [will: rewrote commit message; merged in suggestion from Ard]
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin (Microsoft) <sashal@kernel.org>

commit 91f69a3c910f97215e8f49207497084c472d1fa3
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:30 2019 +1000

    powerpc/security: Fix spectre_v2 reporting
    
    commit 92edf8df0ff2ae86cc632eeca0e651fd8431d40d upstream.
    
    When I updated the spectre_v2 reporting to handle software count cache
    flush I got the logic wrong when there's no software count cache
    enabled at all.
    
    The result is that on systems with the software count cache flush
    disabled we print:
    
      Mitigation: Indirect branch cache disabled, Software count cache flush
    
    Which correctly indicates that the count cache is disabled, but
    incorrectly says the software count cache flush is enabled.
    
    The root of the problem is that we are trying to handle all
    combinations of options. But we know now that we only expect to see
    the software count cache flush enabled if the other options are false.
    
    So split the two cases, which simplifies the logic and fixes the bug.
    We were also missing a space before "(hardware accelerated)".
    
    The result is we see one of:
    
      Mitigation: Indirect branch serialisation (kernel only)
      Mitigation: Indirect branch cache disabled
      Mitigation: Software count cache flush
      Mitigation: Software count cache flush (hardware accelerated)
    
    Fixes: ee13cb249fab ("powerpc/64s: Add support for software count cache flush")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Michael Neuling <mikey@neuling.org>
    Reviewed-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 012c2776114436b5a18a5fdd8ca342c148e8117f
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Apr 11 21:46:29 2019 +1000

    powerpc/fsl: Fix the flush of branch predictor.
    
    commit 27da80719ef132cf8c80eb406d5aeb37dddf78cc upstream.
    
    The commit identified below adds MC_BTB_FLUSH macro only when
    CONFIG_PPC_FSL_BOOK3E is defined. This results in the following error
    on some configs (seen several times with kisskb randconfig_defconfig)
    
    arch/powerpc/kernel/exceptions-64e.S:576: Error: Unrecognized opcode: `mc_btb_flush'
    make[3]: *** [scripts/Makefile.build:367: arch/powerpc/kernel/exceptions-64e.o] Error 1
    make[2]: *** [scripts/Makefile.build:492: arch/powerpc/kernel] Error 2
    make[1]: *** [Makefile:1043: arch/powerpc] Error 2
    make: *** [Makefile:152: sub-make] Error 2
    
    This patch adds a blank definition of MC_BTB_FLUSH for other cases.
    
    Fixes: 10c5e83afd4a ("powerpc/fsl: Flush the branch predictor at each kernel entry (64bit)")
    Cc: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    Reviewed-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38f573eec26fa4d07a2f1732bc0636bcd4f4d962
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:28 2019 +1000

    powerpc/fsl: Fixed warning: orphan section `__btb_flush_fixup'
    
    commit 039daac5526932ec731e4499613018d263af8b3e upstream.
    
    Fixed the following build warning:
    powerpc-linux-gnu-ld: warning: orphan section `__btb_flush_fixup' from
    `arch/powerpc/kernel/head_44x.o' being placed in section
    `__btb_flush_fixup'.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ac0d2b12434c7a0069f051f5000833ec2c88e90
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:27 2019 +1000

    powerpc/fsl: Update Spectre v2 reporting
    
    commit dfa88658fb0583abb92e062c7a9cd5a5b94f2a46 upstream.
    
    Report branch predictor state flush as a mitigation for
    Spectre variant 2.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 487bea70ea9886d7860af15e8d413d8d5c9873e7
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:26 2019 +1000

    powerpc/fsl: Enable runtime patching if nospectre_v2 boot arg is used
    
    commit 3bc8ea8603ae4c1e09aca8de229ad38b8091fcb3 upstream.
    
    If the user choses not to use the mitigations, replace
    the code sequence with nops.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b0392afd333e0dc78f9a0b50951b5a5e1b74e02
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:25 2019 +1000

    powerpc/fsl: Flush branch predictor when entering KVM
    
    commit e7aa61f47b23afbec41031bc47ca8d6cb6516abc upstream.
    
    Switching from the guest to host is another place
    where the speculative accesses can be exploited.
    Flush the branch predictor when entering KVM.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1152947cea025cc832df454be283f5cb99baa81
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:24 2019 +1000

    powerpc/fsl: Flush the branch predictor at each kernel entry (32 bit)
    
    commit 7fef436295bf6c05effe682c8797dfcb0deb112a upstream.
    
    In order to protect against speculation attacks on
    indirect branches, the branch predictor is flushed at
    kernel entry to protect for the following situations:
    - userspace process attacking another userspace process
    - userspace process attacking the kernel
    Basically when the privillege level change (i.e.the kernel
    is entered), the branch predictor state is flushed.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd8bf94d03d1f35c8792760d9d67428f2abc3fb1
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:23 2019 +1000

    powerpc/fsl: Flush the branch predictor at each kernel entry (64bit)
    
    commit 10c5e83afd4a3f01712d97d3bb1ae34d5b74a185 upstream.
    
    In order to protect against speculation attacks on
    indirect branches, the branch predictor is flushed at
    kernel entry to protect for the following situations:
    - userspace process attacking another userspace process
    - userspace process attacking the kernel
    Basically when the privillege level change (i.e. the
    kernel is entered), the branch predictor state is flushed.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7133df4c86d9e853e12469a3a5c363fb75981429
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:22 2019 +1000

    powerpc/fsl: Add nospectre_v2 command line argument
    
    commit f633a8ad636efb5d4bba1a047d4a0f1ef719aa06 upstream.
    
    When the command line argument is present, the Spectre variant 2
    mitigations are disabled.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1101a6297c97c126c485d2f5209547bbbb8b332
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:21 2019 +1000

    powerpc/fsl: Emulate SPRN_BUCSR register
    
    commit 98518c4d8728656db349f875fcbbc7c126d4c973 upstream.
    
    In order to flush the branch predictor the guest kernel performs
    writes to the BUCSR register which is hypervisor privilleged. However,
    the branch predictor is flushed at each KVM entry, so the branch
    predictor has been already flushed, so just return as soon as possible
    to guest.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    [mpe: Tweak comment formatting]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1eb1ddbdf5c019d90c690495dc545696c86ed3ce
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:20 2019 +1000

    powerpc/fsl: Fix spectre_v2 mitigations reporting
    
    commit 7d8bad99ba5a22892f0cad6881289fdc3875a930 upstream.
    
    Currently for CONFIG_PPC_FSL_BOOK3E the spectre_v2 file is incorrect:
    
      $ cat /sys/devices/system/cpu/vulnerabilities/spectre_v2
      "Mitigation: Software count cache flush"
    
    Which is wrong. Fix it to report vulnerable for now.
    
    Fixes: ee13cb249fab ("powerpc/64s: Add support for software count cache flush")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5188172929d63775332476e32be735ca1416a8af
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:19 2019 +1000

    powerpc/fsl: Add macro to flush the branch predictor
    
    commit 1cbf8990d79ff69da8ad09e8a3df014e1494462b upstream.
    
    The BUCSR register can be used to invalidate the entries in the
    branch prediction mechanisms.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d91460f2d0efc0fe6a197fc739e30edab6070456
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:18 2019 +1000

    powerpc/fsl: Add infrastructure to fixup branch predictor flush
    
    commit 76a5eaa38b15dda92cd6964248c39b5a6f3a4e9d upstream.
    
    In order to protect against speculation attacks (Spectre
    variant 2) on NXP PowerPC platforms, the branch predictor
    should be flushed when the privillege level is changed.
    This patch is adding the infrastructure to fixup at runtime
    the code sections that are performing the branch predictor flush
    depending on a boot arg parameter which is added later in a
    separate patch.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae361096d6857727275631d1d64bcd8fec2d8f25
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:17 2019 +1000

    powerpc/powernv: Query firmware for count cache flush settings
    
    commit 99d54754d3d5f896a8f616b0b6520662bc99d66b upstream.
    
    Look for fw-features properties to determine the appropriate settings
    for the count cache flush, and then call the generic powerpc code to
    set it up based on the security feature flags.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e745d1518d7a3766841d06f7846d4217253817ed
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:16 2019 +1000

    powerpc/pseries: Query hypervisor for count cache flush settings
    
    commit ba72dc171954b782a79d25e0f4b3ed91090c3b1e upstream.
    
    Use the existing hypercall to determine the appropriate settings for
    the count cache flush, and then call the generic powerpc code to set
    it up based on the security feature flags.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98f6dedbcb1fe30ee9e7eeafd220269ae75b8afd
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:15 2019 +1000

    powerpc/64s: Add support for software count cache flush
    
    commit ee13cb249fabdff8b90aaff61add347749280087 upstream.
    
    Some CPU revisions support a mode where the count cache needs to be
    flushed by software on context switch. Additionally some revisions may
    have a hardware accelerated flush, in which case the software flush
    sequence can be shortened.
    
    If we detect the appropriate flag from firmware we patch a branch
    into _switch() which takes us to a count cache flush sequence.
    
    That sequence in turn may be patched to return early if we detect that
    the CPU supports accelerating the flush sequence in hardware.
    
    Add debugfs support for reporting the state of the flush, as well as
    runtime disabling it.
    
    And modify the spectre_v2 sysfs file to report the state of the
    software flush.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f4fed0185515cc6da36ac718969fa12537a6868
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:14 2019 +1000

    powerpc/64s: Add new security feature flags for count cache flush
    
    commit dc8c6cce9a26a51fc19961accb978217a3ba8c75 upstream.
    
    Add security feature flags to indicate the need for software to flush
    the count cache on context switch, and for the presence of a hardware
    assisted count cache flush.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6482f0d6af10262ca6586327090a47f2feaf0fea
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:13 2019 +1000

    powerpc/asm: Add a patch_site macro & helpers for patching instructions
    
    commit 06d0bbc6d0f56dacac3a79900e9a9a0d5972d818 upstream.
    
    Add a macro and some helper C functions for patching single asm
    instructions.
    
    The gas macro means we can do something like:
    
      1:    nop
            patch_site 1b, patch__foo
    
    Which is less visually distracting than defining a GLOBAL symbol at 1,
    and also doesn't pollute the symbol table which can confuse eg. perf.
    
    These are obviously similar to our existing feature sections, but are
    not automatically patched based on CPU/MMU features, rather they are
    designed to be manually patched by C code at some arbitrary point.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25ea29564244de9271db9359b4190adf76822998
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:12 2019 +1000

    powerpc/fsl: Sanitize the syscall table for NXP PowerPC 32 bit platforms
    
    commit c28218d4abbf4f2035495334d8bfcba64bda4787 upstream.
    
    Used barrier_nospec to sanitize the syscall table.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a299c074951665af5c20b3650a343722bbb70f5b
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:11 2019 +1000

    powerpc/fsl: Add barrier_nospec implementation for NXP PowerPC Book3E
    
    commit ebcd1bfc33c7a90df941df68a6e5d4018c022fba upstream.
    
    Implement the barrier_nospec as a isync;sync instruction sequence.
    The implementation uses the infrastructure built for BOOK3S 64.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    [mpe: Split out of larger patch]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a96e47d164fc386cafbc2344d2833980ca9fa04e
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:10 2019 +1000

    powerpc/64: Make meltdown reporting Book3S 64 specific
    
    commit 406d2b6ae3420f5bb2b3db6986dc6f0b6dbb637b upstream.
    
    In a subsequent patch we will enable building security.c for Book3E.
    However the NXP platforms are not vulnerable to Meltdown, so make the
    Meltdown vulnerability reporting PPC_BOOK3S_64 specific.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    [mpe: Split out of larger patch]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37336b688f91a2010418c3c0158ae3dc74ce3ac2
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:09 2019 +1000

    powerpc/64: Call setup_barrier_nospec() from setup_arch()
    
    commit af375eefbfb27cbb5b831984e66d724a40d26b5c upstream.
    
    Currently we require platform code to call setup_barrier_nospec(). But
    if we add an empty definition for the !CONFIG_PPC_BARRIER_NOSPEC case
    then we can call it in setup_arch().
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f8703f281e114cfab0856024f54dc1ff3ef1f36
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:08 2019 +1000

    powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC
    
    commit 179ab1cbf883575c3a585bcfc0f2160f1d22a149 upstream.
    
    Add a config symbol to encode which platforms support the
    barrier_nospec speculation barrier. Currently this is just Book3S 64
    but we will add Book3E in a future patch.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ec00d224fb3931bfbb6e57473aeadee5d7455d4
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:07 2019 +1000

    powerpc/64: Make stf barrier PPC_BOOK3S_64 specific.
    
    commit 6453b532f2c8856a80381e6b9a1f5ea2f12294df upstream.
    
    NXP Book3E platforms are not vulnerable to speculative store
    bypass, so make the mitigations PPC_BOOK3S_64 specific.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78749d1a7a08c21510d457fe27d5a14b1181a85b
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Thu Apr 11 21:46:06 2019 +1000

    powerpc/64: Disable the speculation barrier from the command line
    
    commit cf175dc315f90185128fb061dc05b6fbb211aa2f upstream.
    
    The speculation barrier can be disabled from the command line
    with the parameter: "nospectre_v1".
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee617f5807c7a3722c2b9c19ab227deb7a0ff3c0
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:05 2019 +1000

    powerpc64s: Show ori31 availability in spectre_v1 sysfs file not v2
    
    commit 6d44acae1937b81cf8115ada8958e04f601f3f2e upstream.
    
    When I added the spectre_v2 information in sysfs, I included the
    availability of the ori31 speculation barrier.
    
    Although the ori31 barrier can be used to mitigate v2, it's primarily
    intended as a spectre v1 mitigation. Spectre v2 is mitigated by
    hardware changes.
    
    So rework the sysfs files to show the ori31 information in the
    spectre_v1 file, rather than v2.
    
    Currently we display eg:
    
      $ grep . spectre_v*
      spectre_v1:Mitigation: __user pointer sanitization
      spectre_v2:Mitigation: Indirect branch cache disabled, ori31 speculation barrier enabled
    
    After:
    
      $ grep . spectre_v*
      spectre_v1:Mitigation: __user pointer sanitization, ori31 speculation barrier enabled
      spectre_v2:Mitigation: Indirect branch cache disabled
    
    Fixes: d6fbe1c55c55 ("powerpc/64s: Wire up cpu_show_spectre_v2()")
    Cc: stable@vger.kernel.org # v4.17+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7493c9818df017a945621ea9b57ae54801fb9b7
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Apr 11 21:46:04 2019 +1000

    powerpc/64s: Enhance the information in cpu_show_spectre_v1()
    
    commit a377514519b9a20fa1ea9adddbb4129573129cef upstream.
    
    We now have barrier_nospec as mitigation so print it in
    cpu_show_spectre_v1() when enabled.
    
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86dfa514c79cf1779a932256e78ce3e055ee58b0
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:03 2019 +1000

    powerpc/64: Use barrier_nospec in syscall entry
    
    commit 51973a815c6b46d7b23b68d6af371ad1c9d503ca upstream.
    
    Our syscall entry is done in assembly so patch in an explicit
    barrier_nospec.
    
    Based on a patch by Michal Suchanek.
    
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86341b2fea2cae64807135859fa499537d5ddede
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 11 21:46:02 2019 +1000

    powerpc: Use barrier_nospec in copy_from_user()
    
    commit ddf35cf3764b5a182b178105f57515b42e2634f8 upstream.
    
    Based on the x86 commit doing the same.
    
    See commit 304ec1b05031 ("x86/uaccess: Use __uaccess_begin_nospec()
    and uaccess_try_nospec") and b3bbfb3fb5d2 ("x86: Introduce
    __uaccess_begin_nospec() and uaccess_try_nospec") for more detail.
    
    In all cases we are ordering the load from the potentially
    user-controlled pointer vs a previous branch based on an access_ok()
    check or similar.
    
    Base on a patch from Michal Suchanek.
    
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1217b4a5acec3da22eee7088b2649bc827eb14e
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Apr 11 21:46:01 2019 +1000

    powerpc/64s: Enable barrier_nospec based on firmware settings
    
    commit cb3d6759a93c6d0aea1c10deb6d00e111c29c19c upstream.
    
    Check what firmware told us and enable/disable the barrier_nospec as
    appropriate.
    
    We err on the side of enabling the barrier, as it's no-op on older
    systems, see the comment for more detail.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73b0f626499c15b268f7d49d6871d49508edaa56
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Apr 11 21:46:00 2019 +1000

    powerpc/64s: Patch barrier_nospec in modules
    
    commit 815069ca57c142eb71d27439bc27f41a433a67b3 upstream.
    
    Note that unlike RFI which is patched only in kernel the nospec state
    reflects settings at the time the module was loaded.
    
    Iterating all modules and re-patching every time the settings change
    is not implemented.
    
    Based on lwsync patching.
    
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c38a84d45862be06ac418618981631eddbda741
Author: Michael Neuling <mikey@neuling.org>
Date:   Thu Apr 11 21:45:59 2019 +1000

    powerpc: Avoid code patching freed init sections
    
    commit 51c3c62b58b357e8d35e4cc32f7b4ec907426fe3 upstream.
    
    This stops us from doing code patching in init sections after they've
    been freed.
    
    In this chain:
      kvm_guest_init() ->
        kvm_use_magic_page() ->
          fault_in_pages_readable() ->
             __get_user() ->
               __get_user_nocheck() ->
                 barrier_nospec();
    
    We have a code patching location at barrier_nospec() and
    kvm_guest_init() is an init function. This whole chain gets inlined,
    so when we free the init section (hence kvm_guest_init()), this code
    goes away and hence should no longer be patched.
    
    We seen this as userspace memory corruption when using a memory
    checker while doing partition migration testing on powervm (this
    starts the code patching post migration via
    /sys/kernel/mobility/migration). In theory, it could also happen when
    using /sys/kernel/debug/powerpc/barrier_nospec.
    
    Cc: stable@vger.kernel.org # 4.13+
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3286f1a71e3ccb80c53add0e6b322fc73544b77
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Apr 11 21:45:58 2019 +1000

    powerpc/64s: Add support for ori barrier_nospec patching
    
    commit 2eea7f067f495e33b8b116b35b5988ab2b8aec55 upstream.
    
    Based on the RFI patching. This is required to be able to disable the
    speculation barrier.
    
    Only one barrier type is supported and it does nothing when the
    firmware does not enable it. Also re-patching modules is not supported
    So the only meaningful thing that can be done is patching out the
    speculation barrier at boot when the user says it is not wanted.
    
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4314e774ce40e08e763996fc6f6220a1ef1dbc2c
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Apr 11 21:45:57 2019 +1000

    powerpc/64s: Add barrier_nospec
    
    commit a6b3964ad71a61bb7c61d80a60bea7d42187b2eb upstream.
    
    A no-op form of ori (or immediate of 0 into r31 and the result stored
    in r31) has been re-tasked as a speculation barrier. The instruction
    only acts as a barrier on newer machines with appropriate firmware
    support. On older CPUs it remains a harmless no-op.
    
    Implement barrier_nospec using this instruction.
    
    mpe: The semantics of the instruction are believed to be that it
    prevents execution of subsequent instructions until preceding branches
    have been fully resolved and are no longer executing speculatively.
    There is no further documentation available at this time.
    
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10f1dea70f7ed207b5f0f05416bcae2eaf4672ef
Author: Andreas Schwab <schwab@linux-m68k.org>
Date:   Thu Apr 11 21:45:56 2019 +1000

    powerpc: Fix invalid use of register expressions
    
    commit 8a583c0a8d316d8ea52ea78491174ab1a3e9ef9d upstream.
    
    binutils >= 2.26 now warns about misuse of register expressions in
    assembler operands that are actually literals, for example:
    
      arch/powerpc/kernel/entry_64.S:535: Warning: invalid register expression
    
    In practice these are almost all uses of r0 that should just be a
    literal 0.
    
    Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>
    [mpe: Mention r0 is almost always the culprit, fold in purgatory change]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7eceaf5bbfc0ecc0efc89b1f7318e44ea87391cc
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Apr 5 18:38:45 2019 -0700

    lib/string.c: implement a basic bcmp
    
    [ Upstream commit 5f074f3e192f10c9fade898b9b3b8812e3d83342 ]
    
    A recent optimization in Clang (r355672) lowers comparisons of the
    return value of memcmp against zero to comparisons of the return value
    of bcmp against zero.  This helps some platforms that implement bcmp
    more efficiently than memcmp.  glibc simply aliases bcmp to memcmp, but
    an optimized implementation is in the works.
    
    This results in linkage failures for all targets with Clang due to the
    undefined symbol.  For now, just implement bcmp as a tailcail to memcmp
    to unbreak the build.  This routine can be further optimized in the
    future.
    
    Other ideas discussed:
    
     * A weak alias was discussed, but breaks for architectures that define
       their own implementations of memcmp since aliases to declarations are
       not permitted (only definitions). Arch-specific memcmp
       implementations typically declare memcmp in C headers, but implement
       them in assembly.
    
     * -ffreestanding also is used sporadically throughout the kernel.
    
     * -fno-builtin-bcmp doesn't work when doing LTO.
    
    Link: https://bugs.llvm.org/show_bug.cgi?id=41035
    Link: https://code.woboq.org/userspace/glibc/string/memcmp.c.html#bcmp
    Link: https://github.com/llvm/llvm-project/commit/8e16d73346f8091461319a7dfc4ddd18eedcff13
    Link: https://github.com/ClangBuiltLinux/linux/issues/416
    Link: http://lkml.kernel.org/r/20190313211335.165605-1-ndesaulniers@google.com
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Reported-by: Adhemerval Zanella <adhemerval.zanella@linaro.org>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: James Y Knight <jyknight@google.com>
    Suggested-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Suggested-by: Nathan Chancellor <natechancellor@gmail.com>
    Suggested-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: David Laight <David.Laight@ACULAB.COM>
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 408d67a0fecf4cfe7869f518211ae278ee44376e
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Thu Dec 6 11:12:31 2018 -0800

    x86/vdso: Drop implicit common-page-size linker flag
    
    GNU linker's -z common-page-size's default value is based on the target
    architecture. arch/x86/entry/vdso/Makefile sets it to the architecture
    default, which is implicit and redundant. Drop it.
    
    Fixes: 2aae950b21e4 ("x86_64: Add vDSO for x86-64 with gettimeofday/clock_gettime/getcpu")
    Reported-by: Dmitry Golovin <dima@golovin.in>
    Reported-by: Bill Wendling <morbo@google.com>
    Suggested-by: Dmitry Golovin <dima@golovin.in>
    Suggested-by: Rui Ueyama <ruiu@google.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Fangrui Song <maskray@google.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20181206191231.192355-1-ndesaulniers@google.com
    Link: https://bugs.llvm.org/show_bug.cgi?id=38774
    Link: https://github.com/ClangBuiltLinux/linux/issues/31
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94c0c4f033eee2304a98cf30a141f9dae35d3a62
Author: Alistair Strachan <astrachan@google.com>
Date:   Fri Aug 3 10:39:31 2018 -0700

    x86: vdso: Use $LD instead of $CC to link
    
    The vdso{32,64}.so can fail to link with CC=clang when clang tries to find
    a suitable GCC toolchain to link these libraries with.
    
    /usr/bin/ld: arch/x86/entry/vdso/vclock_gettime.o:
      access beyond end of merged section (782)
    
    This happens because the host environment leaked into the cross compiler
    environment due to the way clang searches for suitable GCC toolchains.
    
    Clang is a retargetable compiler, and each invocation of it must provide
    --target=<something> --gcc-toolchain=<something> to allow it to find the
    correct binutils for cross compilation. These flags had been added to
    KBUILD_CFLAGS, but the vdso code uses CC and not KBUILD_CFLAGS (for various
    reasons) which breaks clang's ability to find the correct linker when cross
    compiling.
    
    Most of the time this goes unnoticed because the host linker is new enough
    to work anyway, or is incompatible and skipped, but this cannot be reliably
    assumed.
    
    This change alters the vdso makefile to just use LD directly, which
    bypasses clang and thus the searching problem. The makefile will just use
    ${CROSS_COMPILE}ld instead, which is always what we want. This matches the
    method used to link vmlinux.
    
    This drops references to DISABLE_LTO; this option doesn't seem to be set
    anywhere, and not knowing what its possible values are, it's not clear how
    to convert it from CC to LD flag.
    
    Signed-off-by: Alistair Strachan <astrachan@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: kernel-team@android.com
    Cc: joel@joelfernandes.org
    Cc: Andi Kleen <andi.kleen@intel.com>
    Link: https://lkml.kernel.org/r/20180803173931.117515-1-astrachan@google.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1347aa2a4d9a5ebd6b4fb7720c43e5e5be68c198
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Mon Feb 11 11:30:04 2019 -0800

    kbuild: clang: choose GCC_TOOLCHAIN_DIR not on LD
    
    commit ad15006cc78459d059af56729c4d9bed7c7fd860 upstream.
    
    This causes an issue when trying to build with `make LD=ld.lld` if
    ld.lld and the rest of your cross tools aren't in the same directory
    (ex. /usr/local/bin) (as is the case for Android's build system), as the
    GCC_TOOLCHAIN_DIR then gets set based on `which $(LD)` which will point
    where LLVM tools are, not GCC/binutils tools are located.
    
    Instead, select the GCC_TOOLCHAIN_DIR based on another tool provided by
    binutils for which LLVM does not provide a substitute for, such as
    elfedit.
    
    Fixes: 785f11aa595b ("kbuild: Add better clang cross build support")
    Link: https://github.com/ClangBuiltLinux/linux/issues/341
    Suggested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d8b1fd22eacd0ba4ae9a9c547094690b4487b65
Author: Breno Leitao <leitao@debian.org>
Date:   Mon Apr 8 16:32:38 2019 +1000

    powerpc/tm: Limit TM code inside PPC_TRANSACTIONAL_MEM
    
    [ Upstream commit 897bc3df8c5aebb54c32d831f917592e873d0559 ]
    
    Commit e1c3743e1a20 ("powerpc/tm: Set MSR[TS] just prior to recheckpoint")
    moved a code block around and this block uses a 'msr' variable outside of
    the CONFIG_PPC_TRANSACTIONAL_MEM, however the 'msr' variable is declared
    inside a CONFIG_PPC_TRANSACTIONAL_MEM block, causing a possible error when
    CONFIG_PPC_TRANSACTION_MEM is not defined.
    
            error: 'msr' undeclared (first use in this function)
    
    This is not causing a compilation error in the mainline kernel, because
    'msr' is being used as an argument of MSR_TM_ACTIVE(), which is defined as
    the following when CONFIG_PPC_TRANSACTIONAL_MEM is *not* set:
    
            #define MSR_TM_ACTIVE(x) 0
    
    This patch just fixes this issue avoiding the 'msr' variable usage outside
    the CONFIG_PPC_TRANSACTIONAL_MEM block, avoiding trusting in the
    MSR_TM_ACTIVE() definition.
    
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Biedl <linux-kernel.bfrz@manchmal.in-ulm.de>
    Fixes: e1c3743e1a20 ("powerpc/tm: Set MSR[TS] just prior to recheckpoint")
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39dbf53c9bb89bebae8aac458eaa806e578d267c
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Dec 14 13:19:07 2017 -0800

    x86/power: Make restore_processor_context() sane
    
    [ Upstream commit 7ee18d677989e99635027cee04c878950e0752b9 ]
    
    My previous attempt to fix a couple of bugs in __restore_processor_context():
    
      5b06bbcfc2c6 ("x86/power: Fix some ordering bugs in __restore_processor_context()")
    
    ... introduced yet another bug, breaking suspend-resume.
    
    Rather than trying to come up with a minimal fix, let's try to clean it up
    for real.  This patch fixes quite a few things:
    
     - The old code saved a nonsensical subset of segment registers.
       The only registers that need to be saved are those that contain
       userspace state or those that can't be trivially restored without
       percpu access working.  (On x86_32, we can restore percpu access
       by writing __KERNEL_PERCPU to %fs.  On x86_64, it's easier to
       save and restore the kernel's GSBASE.)  With this patch, we
       restore hardcoded values to the kernel state where applicable and
       explicitly restore the user state after fixing all the descriptor
       tables.
    
     - We used to use an unholy mix of inline asm and C helpers for
       segment register access.  Let's get rid of the inline asm.
    
    This fixes the reported s2ram hangs and make the code all around
    more logical.
    
    Analyzed-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reported-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Tested-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Tested-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bpetkov@suse.de>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Fixes: 5b06bbcfc2c6 ("x86/power: Fix some ordering bugs in __restore_processor_context()")
    Link: http://lkml.kernel.org/r/398ee68e5c0f766425a7b746becfc810840770ff.1513286253.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d72b48521648fc9ffc7c1299da519e905f83aab2
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Dec 14 13:19:06 2017 -0800

    x86/power/32: Move SYSENTER MSR restoration to fix_processor_context()
    
    [ Upstream commit 896c80bef4d3b357814a476663158aaf669d0fb3 ]
    
    x86_64 restores system call MSRs in fix_processor_context(), and
    x86_32 restored them along with segment registers.  The 64-bit
    variant makes more sense, so move the 32-bit code to match the
    64-bit code.
    
    No side effects are expected to runtime behavior.
    
    Tested-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bpetkov@suse.de>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Link: http://lkml.kernel.org/r/65158f8d7ee64dd6bbc6c1c83b3b34aaa854e3ae.1513286253.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61f1e184f2a9fe0df7ba491734f7dcba0a384db0
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Dec 14 13:19:05 2017 -0800

    x86/power/64: Use struct desc_ptr for the IDT in struct saved_context
    
    [ Upstream commit 090edbe23ff57940fca7f57d9165ce57a826bd7a ]
    
    x86_64's saved_context nonsensically used separate idt_limit and
    idt_base fields and then cast &idt_limit to struct desc_ptr *.
    
    This was correct (with -fno-strict-aliasing), but it's confusing,
    served no purpose, and required #ifdeffery. Simplify this by
    using struct desc_ptr directly.
    
    No change in functionality.
    
    Tested-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bpetkov@suse.de>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Zhang Rui <rui.zhang@intel.com>
    Link: http://lkml.kernel.org/r/967909ce38d341b01d45eff53e278e2728a3a93a.1513286253.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57578e52610a65386aade4db21059604537f4ed0
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Nov 30 07:57:57 2017 -0800

    x86/power: Fix some ordering bugs in __restore_processor_context()
    
    [ Upstream commit 5b06bbcfc2c621da3009da8decb7511500c293ed ]
    
    __restore_processor_context() had a couple of ordering bugs.  It
    restored GSBASE after calling load_gs_index(), and the latter can
    call into tracing code.  It also tried to restore segment registers
    before restoring the LDT, which is straight-up wrong.
    
    Reorder the code so that we restore GSBASE, then the descriptor
    tables, then the segments.
    
    This fixes two bugs.  First, it fixes a regression that broke resume
    under certain configurations due to irqflag tracing in
    native_load_gs_index().  Second, it fixes resume when the userspace
    process that initiated suspect had funny segments.  The latter can be
    reproduced by compiling this:
    
    // SPDX-License-Identifier: GPL-2.0
    /*
     * ldt_echo.c - Echo argv[1] while using an LDT segment
     */
    
    int main(int argc, char **argv)
    {
            int ret;
            size_t len;
            char *buf;
    
            const struct user_desc desc = {
                    .entry_number    = 0,
                    .base_addr       = 0,
                    .limit           = 0xfffff,
                    .seg_32bit       = 1,
                    .contents        = 0, /* Data, grow-up */
                    .read_exec_only  = 0,
                    .limit_in_pages  = 1,
                    .seg_not_present = 0,
                    .useable         = 0
            };
    
            if (argc != 2)
                    errx(1, "Usage: %s STRING", argv[0]);
    
            len = asprintf(&buf, "%s\n", argv[1]);
            if (len < 0)
                    errx(1, "Out of memory");
    
            ret = syscall(SYS_modify_ldt, 1, &desc, sizeof(desc));
            if (ret < -1)
                    errno = -ret;
            if (ret)
                    err(1, "modify_ldt");
    
            asm volatile ("movw %0, %%es" :: "rm" ((unsigned short)7));
            write(1, buf, len);
            return 0;
    }
    
    and running ldt_echo >/sys/power/mem
    
    Without the fix, the latter causes a triple fault on resume.
    
    Fixes: ca37e57bbe0c ("x86/entry/64: Add missing irqflags tracing to native_load_gs_index()")
    Reported-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: https://lkml.kernel.org/r/6b31721ea92f51ea839e79bd97ade4a75b1eeea2.1512057304.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
