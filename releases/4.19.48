commit e109a984cf380b4b80418b7477c970bfeb428325
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jun 4 08:02:35 2019 +0200

    Linux 4.19.48

commit ca75a9fc5ba4e33b0170c395f9c70451ebfbbb56
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab69a230421065b48ef93d3e6daf332e71c931dc
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99dcf4a4dd2e102aa843ef2cf9ab65c89e9d56df
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Wed Feb 13 18:21:31 2019 -0500

    xen/pciback: Don't disable PCI_COMMAND on PCI device reset.
    
    commit 7681f31ec9cdacab4fd10570be924f2cef6669ba upstream.
    
    There is no need for this at all. Worst it means that if
    the guest tries to write to BARs it could lead (on certain
    platforms) to PCI SERR errors.
    
    Please note that with af6fc858a35b90e89ea7a7ee58e66628c55c776b
    "xen-pciback: limit guest control of command register"
    a guest is still allowed to enable those control bits (safely), but
    is not allowed to disable them and that therefore a well behaved
    frontend which enables things before using them will still
    function correctly.
    
    This is done via an write to the configuration register 0x4 which
    triggers on the backend side:
    command_write
      \- pci_enable_device
         \- pci_enable_device_flags
            \- do_pci_enable_device
               \- pcibios_enable_device
                  \-pci_enable_resourcess
                    [which enables the PCI_COMMAND_MEMORY|PCI_COMMAND_IO]
    
    However guests (and drivers) which don't do this could cause
    problems, including the security issues which XSA-120 sought
    to address.
    
    Reported-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Reviewed-by: Prarit Bhargava <prarit@redhat.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0276ebf16675f3745d8b6f384dcf917e1379eda2
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Dec 31 00:14:15 2018 +0900

    jump_label: move 'asm goto' support test to Kconfig
    
    commit e9666d10a5677a494260d60d1fa0b73cc7646eb3 upstream.
    
    Currently, CONFIG_JUMP_LABEL just means "I _want_ to use jump label".
    
    The jump label is controlled by HAVE_JUMP_LABEL, which is defined
    like this:
    
      #if defined(CC_HAVE_ASM_GOTO) && defined(CONFIG_JUMP_LABEL)
      # define HAVE_JUMP_LABEL
      #endif
    
    We can improve this by testing 'asm goto' support in Kconfig, then
    make JUMP_LABEL depend on CC_HAS_ASM_GOTO.
    
    Ugly #ifdef HAVE_JUMP_LABEL will go away, and CONFIG_JUMP_LABEL will
    match to the real kernel capability.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    [nc: Fix trivial conflicts in 4.19
         arch/xtensa/kernel/jump_label.c doesn't exist yet
         Ensured CC_HAVE_ASM_GOTO and HAVE_JUMP_LABEL were sufficiently
         eliminated]
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 753328727cab4116410f2a3c150826ab6c555d6a
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sun Aug 26 03:16:29 2018 +0900

    compiler.h: give up __compiletime_assert_fallback()
    
    commit 81b45683487a51b0f4d3b29d37f20d6d078544e4 upstream.
    
    __compiletime_assert_fallback() is supposed to stop building earlier
    by using the negative-array-size method in case the compiler does not
    support "error" attribute, but has never worked like that.
    
    You can simply try:
    
        BUILD_BUG_ON(1);
    
    GCC immediately terminates the build, but Clang does not report
    anything because Clang does not support the "error" attribute now.
    It will later fail at link time, but __compiletime_assert_fallback()
    is not working at least.
    
    The root cause is commit 1d6a0d19c855 ("bug.h: prevent double evaluation
    of `condition' in BUILD_BUG_ON").  Prior to that commit, BUILD_BUG_ON()
    was checked by the negative-array-size method *and* the link-time trick.
    Since that commit, the negative-array-size is not effective because
    '__cond' is no longer constant.  As the comment in <linux/build_bug.h>
    says, GCC (and Clang as well) only emits the error for obvious cases.
    
    When '__cond' is a variable,
    
        ((void)sizeof(char[1 - 2 * __cond]))
    
    ... is not obvious for the compiler to know the array size is negative.
    
    Reverting that commit would break BUILD_BUG() because negative-size-array
    is evaluated before the code is optimized out.
    
    Let's give up __compiletime_assert_fallback().  This commit does not
    change the current behavior since it just rips off the useless code.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd45cd4530ebc7c846f83b26fef526f4c960d1ee
Author: ndesaulniers@google.com <ndesaulniers@google.com>
Date:   Wed Oct 31 12:39:01 2018 -0700

    include/linux/compiler*.h: define asm_volatile_goto
    
    commit 8bd66d147c88bd441178c7b4c774ae5a185f19b8 upstream.
    
    asm_volatile_goto should also be defined for other compilers that support
    asm goto.
    
    Fixes commit 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h
    mutually exclusive").
    
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bb9c7e42836887cf5e3feabca754b7e56623f96
Author: Daniel Axtens <dja@axtens.net>
Date:   Fri May 17 01:40:02 2019 +1000

    crypto: vmx - ghash: do nosimd fallback manually
    
    commit 357d065a44cdd77ed5ff35155a989f2a763e96ef upstream.
    
    VMX ghash was using a fallback that did not support interleaving simd
    and nosimd operations, leading to failures in the extended test suite.
    
    If I understood correctly, Eric's suggestion was to use the same
    data format that the generic code uses, allowing us to call into it
    with the same contexts. I wasn't able to get that to work - I think
    there's a very different key structure and data layout being used.
    
    So instead steal the arm64 approach and perform the fallback
    operations directly if required.
    
    Fixes: cc333cd68dfa ("crypto: vmx - Adding GHASH routines for VMX module")
    Cc: stable@vger.kernel.org # v4.1+
    Reported-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Tested-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb6cf4f3704b6f058f312a6d228c56698313e1fa
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue May 21 19:02:02 2019 -0700

    net/tls: don't ignore netdev notifications if no TLS features
    
    [ Upstream commit c3f4a6c39cf269a40d45f813c05fa830318ad875 ]
    
    On device surprise removal path (the notifier) we can't
    bail just because the features are disabled.  They may
    have been enabled during the lifetime of the device.
    This bug leads to leaking netdev references and
    use-after-frees if there are active connections while
    device features are cleared.
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb69403ec2ff56bc587873b88a55812fce39d617
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue May 21 19:02:01 2019 -0700

    net/tls: fix state removal with feature flags off
    
    [ Upstream commit 3686637e507b48525fcea6fb91e1988bdbc14530 ]
    
    TLS offload drivers shouldn't (and currently don't) block
    the TLS offload feature changes based on whether there are
    active offloaded connections or not.
    
    This seems to be a good idea, because we want the admin to
    be able to disable the TLS offload at any time, and there
    is no clean way of disabling it for active connections
    (TX side is quite problematic).  So if features are cleared
    existing connections will stay offloaded until they close,
    and new connections will not attempt offload to a given
    device.
    
    However, the offload state removal handling is currently
    broken if feature flags get cleared while there are
    active TLS offloads.
    
    RX side will completely bail from cleanup, even on normal
    remove path, leaving device state dangling, potentially
    causing issues when the 5-tuple is reused.  It will also
    fail to release the netdev reference.
    
    Remove the RX-side warning message, in next release cycle
    it should be printed when features are disabled, rather
    than when connection dies, but for that we need a more
    efficient method of finding connection of a given netdev
    (a'la BPF offload code).
    
    Fixes: 4799ac81e52a ("tls: Add rx inline crypto offload")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27d8ad1d8ea9b9c80ae13556c34927ad83a4355d
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed May 22 19:12:54 2019 -0400

    bnxt_en: Fix aggregation buffer leak under OOM condition.
    
    [ Upstream commit 296d5b54163964b7ae536b8b57dfbd21d4e868e1 ]
    
    For every RX packet, the driver replenishes all buffers used for that
    packet and puts them back into the RX ring and RX aggregation ring.
    In one code path where the RX packet has one RX buffer and one or more
    aggregation buffers, we missed recycling the aggregation buffer(s) if
    we are unable to allocate a new SKB buffer.  This leads to the
    aggregation ring slowly running out of buffers over time.  Fix it
    by properly recycling the aggregation buffers.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Rakesh Hemnani <rhemnani@fb.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1a926fc68c7610b59df314e8fd549c3a8bad147
Author: Weifeng Voon <weifeng.voon@intel.com>
Date:   Tue May 21 13:38:38 2019 +0800

    net: stmmac: dma channel control register need to be init first
    
    stmmac_init_chan() needs to be called before stmmac_init_rx_chan() and
    stmmac_init_tx_chan(). This is because if PBLx8 is to be used,
    "DMA_CH(#i)_Control.PBLx8" needs to be set before programming
    "DMA_CH(#i)_TX_Control.TxPBL" and "DMA_CH(#i)_RX_Control.RxPBL".
    
    Fixes: 47f2a9ce527a ("net: stmmac: dma channel init prepared for multiple queues")
    Reviewed-by: Zhang, Baoli <baoli.zhang@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1db0bcc27c78e9b28ca02bf39d645adf0c1acd76
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Thu May 23 12:55:10 2019 -0700

    net/mlx5e: Disable rxhash when CQE compress is enabled
    
    [ Upstream commit c0194e2d0ef0e5ce5e21a35640d23a706827ae28 ]
    
    When CQE compression is enabled (Multi-host systems), compressed CQEs
    might arrive to the driver rx, compressed CQEs don't have a valid hash
    offload and the driver already reports a hash value of 0 and invalid hash
    type on the skb for compressed CQEs, but this is not good enough.
    
    On a congested PCIe, where CQE compression will kick in aggressively,
    gro will deliver lots of out of order packets due to the invalid hash
    and this might cause a serious performance drop.
    
    The only valid solution, is to disable rxhash offload at all when CQE
    compression is favorable (Multi-host systems).
    
    Fixes: 7219ab34f184 ("net/mlx5e: CQE compression")
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0d95806b05d2cf0fe90707596a00b239fc8d69e
Author: Parav Pandit <parav@mellanox.com>
Date:   Fri May 10 10:40:08 2019 -0500

    net/mlx5: Allocate root ns memory using kzalloc to match kfree
    
    [ Upstream commit 25fa506b70cadb580c1e9cbd836d6417276d4bcd ]
    
    root ns is yet another fs core node which is freed using kfree() by
    tree_put_node().
    Rest of the other fs core objects are also allocated using kmalloc
    variants.
    
    However, root ns memory is allocated using kvzalloc().
    Hence allocate root ns memory using kzalloc().
    
    Fixes: 2530236303d9e ("net/mlx5_core: Flow steering tree initialization")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4421d31753ecb45321be2341380e47c93d678ec5
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06442f45e5cfc0fa0ecc6adb7ba5ae8b863f7dad
Author: Parav Pandit <parav@mellanox.com>
Date:   Fri May 10 10:26:23 2019 -0500

    net/mlx5: Avoid double free in fs init error unwinding path
    
    [ Upstream commit 9414277a5df3669c67e818708c0f881597e0118e ]
    
    In below code flow, for ingress acl table root ns memory leads
    to double free.
    
    mlx5_init_fs
      init_ingress_acls_root_ns()
        init_ingress_acl_root_ns
           kfree(steering->esw_ingress_root_ns);
           /* steering->esw_ingress_root_ns is not marked NULL */
      mlx5_cleanup_fs
        cleanup_ingress_acls_root_ns
           steering->esw_ingress_root_ns non NULL check passes.
           kfree(steering->esw_ingress_root_ns);
           /* double free */
    
    Similar issue exist for other tables.
    
    Hence zero out the pointers to not process the table again.
    
    Fixes: 9b93ab981e3bf ("net/mlx5: Separate ingress/egress namespaces for each vport")
    Fixes: 40c3eebb49e51 ("net/mlx5: Add support in RDMA RX steering")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb836d014e3773122c58e9fb6d5c1a6859fd68a1
Author: Kloetzke Jan <Jan.Kloetzke@preh.de>
Date:   Tue May 21 13:18:40 2019 +0000

    usbnet: fix kernel crash after disconnect
    
    [ Upstream commit ad70411a978d1e6e97b1e341a7bde9a79af0c93d ]
    
    When disconnecting cdc_ncm the kernel sporadically crashes shortly
    after the disconnect:
    
      [   57.868812] Unable to handle kernel NULL pointer dereference at virtual address 00000000
      ...
      [   58.006653] PC is at 0x0
      [   58.009202] LR is at call_timer_fn+0xec/0x1b4
      [   58.013567] pc : [<0000000000000000>] lr : [<ffffff80080f5130>] pstate: 00000145
      [   58.020976] sp : ffffff8008003da0
      [   58.024295] x29: ffffff8008003da0 x28: 0000000000000001
      [   58.029618] x27: 000000000000000a x26: 0000000000000100
      [   58.034941] x25: 0000000000000000 x24: ffffff8008003e68
      [   58.040263] x23: 0000000000000000 x22: 0000000000000000
      [   58.045587] x21: 0000000000000000 x20: ffffffc68fac1808
      [   58.050910] x19: 0000000000000100 x18: 0000000000000000
      [   58.056232] x17: 0000007f885aff8c x16: 0000007f883a9f10
      [   58.061556] x15: 0000000000000001 x14: 000000000000006e
      [   58.066878] x13: 0000000000000000 x12: 00000000000000ba
      [   58.072201] x11: ffffffc69ff1db30 x10: 0000000000000020
      [   58.077524] x9 : 8000100008001000 x8 : 0000000000000001
      [   58.082847] x7 : 0000000000000800 x6 : ffffff8008003e70
      [   58.088169] x5 : ffffffc69ff17a28 x4 : 00000000ffff138b
      [   58.093492] x3 : 0000000000000000 x2 : 0000000000000000
      [   58.098814] x1 : 0000000000000000 x0 : 0000000000000000
      ...
      [   58.205800] [<          (null)>]           (null)
      [   58.210521] [<ffffff80080f5298>] expire_timers+0xa0/0x14c
      [   58.215937] [<ffffff80080f542c>] run_timer_softirq+0xe8/0x128
      [   58.221702] [<ffffff8008081120>] __do_softirq+0x298/0x348
      [   58.227118] [<ffffff80080a6304>] irq_exit+0x74/0xbc
      [   58.232009] [<ffffff80080e17dc>] __handle_domain_irq+0x78/0xac
      [   58.237857] [<ffffff8008080cf4>] gic_handle_irq+0x80/0xac
      ...
    
    The crash happens roughly 125..130ms after the disconnect. This
    correlates with the 'delay' timer that is started on certain USB tx/rx
    errors in the URB completion handler.
    
    The problem is a race of usbnet_stop() with usbnet_start_xmit(). In
    usbnet_stop() we call usbnet_terminate_urbs() to cancel all URBs in
    flight. This only makes sense if no new URBs are submitted
    concurrently, though. But the usbnet_start_xmit() can run at the same
    time on another CPU which almost unconditionally submits an URB. The
    error callback of the new URB will then schedule the timer after it was
    already stopped.
    
    The fix adds a check if the tx queue is stopped after the tx list lock
    has been taken. This should reliably prevent the submission of new URBs
    while usbnet_terminate_urbs() does its job. The same thing is done on
    the rx side even though it might be safe due to other flags that are
    checked there.
    
    Signed-off-by: Jan Klötzke <Jan.Kloetzke@preh.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 191989817df9f09216a9a295915a8daa317a99b7
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Wed May 22 10:05:09 2019 +0000

    net: stmmac: fix reset gpio free missing
    
    [ Upstream commit 49ce881c0d4c4a7a35358d9dccd5f26d0e56fc61 ]
    
    Commit 984203ceff27 ("net: stmmac: mdio: remove reset gpio free")
    removed the reset gpio free, when the driver is unbinded or rmmod,
    we miss the gpio free.
    
    This patch uses managed API to request the reset gpio, so that the
    gpio could be freed properly.
    
    Fixes: 984203ceff27 ("net: stmmac: mdio: remove reset gpio free")
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ab96847314056f094e919b366db6bb16be58f56
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Thu May 23 09:32:31 2019 +0300

    net: sched: don't use tc_action->order during action dump
    
    [ Upstream commit 4097e9d250fb17958c1d9b94538386edd3f20144 ]
    
    Function tcf_action_dump() relies on tc_action->order field when starting
    nested nla to send action data to userspace. This approach breaks in
    several cases:
    
    - When multiple filters point to same shared action, tc_action->order field
      is overwritten each time it is attached to filter. This causes filter
      dump to output action with incorrect attribute for all filters that have
      the action in different position (different order) from the last set
      tc_action->order value.
    
    - When action data is displayed using tc action API (RTM_GETACTION), action
      order is overwritten by tca_action_gd() according to its position in
      resulting array of nl attributes, which will break filter dump for all
      filters attached to that shared action that expect it to have different
      order value.
    
    Don't rely on tc_action->order when dumping actions. Set nla according to
    action position in resulting array of actions instead.
    
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f737a4307dcc85ca850b1fc8e29899922ffed7
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue May 28 10:34:42 2019 +0100

    net: phy: marvell10g: report if the PHY fails to boot firmware
    
    [ Upstream commit 3d3ced2ec5d71b99d72ae6910fbdf890bc2eccf0 ]
    
    Some boards do not have the PHY firmware programmed in the 3310's flash,
    which leads to the PHY not working as expected.  Warn the user when the
    PHY fails to boot the firmware and refuse to initialise.
    
    Fixes: 20b2af32ff3f ("net: phy: add Marvell Alaska X 88X3310 10Gigabit PHY support")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Tested-by: Maxime Chevallier <maxime.chevallier@bootlin.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2d4b2feb0571d96a46003838cdd96ba6f489750
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Wed May 29 15:59:48 2019 +0200

    net: mvpp2: fix bad MVPP2_TXQ_SCHED_TOKEN_CNTR_REG queue value
    
    [ Upstream commit 21808437214637952b61beaba6034d97880fbeb3 ]
    
    MVPP2_TXQ_SCHED_TOKEN_CNTR_REG() expects the logical queue id but
    the current code is passing the global tx queue offset, so it ends
    up writing to unknown registers (between 0x8280 and 0x82fc, which
    seemed to be unused by the hardware). This fixes the issue by using
    the logical queue id instead.
    
    Fixes: 3f518509dedc ("ethernet: Add new driver for Marvell Armada 375 network unit")
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de9d6a730cc008f2bb62efc5894f2a367426fa7a
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Mon May 27 11:04:17 2019 +0000

    net: mvneta: Fix err code path of probe
    
    [ Upstream commit d484e06e25ebb937d841dac02ac1fe76ec7d4ddd ]
    
    Fix below issues in err code path of probe:
    1. we don't need to unregister_netdev() because the netdev isn't
    registered.
    2. when register_netdev() fails, we also need to destroy bm pool for
    HWBM case.
    
    Fixes: dc35a10f68d3 ("net: mvneta: bm: add support for hardware buffer management")
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39fd0dc4a5565a1df7d84b1c92d2050233b15b5a
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 29 15:36:10 2019 -0700

    net-gro: fix use-after-free read in napi_gro_frags()
    
    [ Upstream commit a4270d6795b0580287453ea55974d948393e66ef ]
    
    If a network driver provides to napi_gro_frags() an
    skb with a page fragment of exactly 14 bytes, the call
    to gro_pull_from_frag0() will 'consume' the fragment
    by calling skb_frag_unref(skb, 0), and the page might
    be freed and reused.
    
    Reading eth->h_proto at the end of napi_frags_skb() might
    read mangled data, or crash under specific debugging features.
    
    BUG: KASAN: use-after-free in napi_frags_skb net/core/dev.c:5833 [inline]
    BUG: KASAN: use-after-free in napi_gro_frags+0xc6f/0xd10 net/core/dev.c:5841
    Read of size 2 at addr ffff88809366840c by task syz-executor599/8957
    
    CPU: 1 PID: 8957 Comm: syz-executor599 Not tainted 5.2.0-rc1+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load_n_noabort+0xf/0x20 mm/kasan/generic_report.c:142
     napi_frags_skb net/core/dev.c:5833 [inline]
     napi_gro_frags+0xc6f/0xd10 net/core/dev.c:5841
     tun_get_user+0x2f3c/0x3ff0 drivers/net/tun.c:1991
     tun_chr_write_iter+0xbd/0x156 drivers/net/tun.c:2037
     call_write_iter include/linux/fs.h:1872 [inline]
     do_iter_readv_writev+0x5f8/0x8f0 fs/read_write.c:693
     do_iter_write fs/read_write.c:970 [inline]
     do_iter_write+0x184/0x610 fs/read_write.c:951
     vfs_writev+0x1b3/0x2f0 fs/read_write.c:1015
     do_writev+0x15b/0x330 fs/read_write.c:1058
    
    Fixes: a50e233c50db ("net-gro: restore frag0 optimization")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4294c3475035b5f06f878bebadbeb3bf6d63b962
Author: Andy Duan <fugang.duan@nxp.com>
Date:   Thu May 23 01:55:28 2019 +0000

    net: fec: fix the clk mismatch in failed_reset path
    
    [ Upstream commit ce8d24f9a5965a58c588f9342689702a1024433c ]
    
    Fix the clk mismatch in the error path "failed_reset" because
    below error path will disable clk_ahb and clk_ipg directly, it
    should use pm_runtime_put_noidle() instead of pm_runtime_put()
    to avoid to call runtime resume callback.
    
    Reported-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
    Tested-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 566dc17b993d53c73b8930d5b2b55102a16a5956
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Wed May 29 07:02:11 2019 +0000

    net: dsa: mv88e6xxx: fix handling of upper half of STATS_TYPE_PORT
    
    [ Upstream commit 84b3fd1fc9592d431e23b077e692fa4e3fd0f086 ]
    
    Currently, the upper half of a 4-byte STATS_TYPE_PORT statistic ends
    up in bits 47:32 of the return value, instead of bits 31:16 as they
    should.
    
    Fixes: 6e46e2d821bb ("net: dsa: mv88e6xxx: Fix u64 statistics")
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d04f32c88612f2433bef14ac71d23fbd815e8c4
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon May 27 17:35:52 2019 -0700

    llc: fix skb leak in llc_build_and_send_ui_pkt()
    
    [ Upstream commit 8fb44d60d4142cd2a440620cd291d346e23c131e ]
    
    If llc_mac_hdr_init() returns an error, we must drop the skb
    since no llc_build_and_send_ui_pkt() caller will take care of this.
    
    BUG: memory leak
    unreferenced object 0xffff8881202b6800 (size 2048):
      comm "syz-executor907", pid 7074, jiffies 4294943781 (age 8.590s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        1a 00 07 40 00 00 00 00 00 00 00 00 00 00 00 00  ...@............
      backtrace:
        [<00000000e25b5abe>] kmemleak_alloc_recursive include/linux/kmemleak.h:55 [inline]
        [<00000000e25b5abe>] slab_post_alloc_hook mm/slab.h:439 [inline]
        [<00000000e25b5abe>] slab_alloc mm/slab.c:3326 [inline]
        [<00000000e25b5abe>] __do_kmalloc mm/slab.c:3658 [inline]
        [<00000000e25b5abe>] __kmalloc+0x161/0x2c0 mm/slab.c:3669
        [<00000000a1ae188a>] kmalloc include/linux/slab.h:552 [inline]
        [<00000000a1ae188a>] sk_prot_alloc+0xd6/0x170 net/core/sock.c:1608
        [<00000000ded25bbe>] sk_alloc+0x35/0x2f0 net/core/sock.c:1662
        [<000000002ecae075>] llc_sk_alloc+0x35/0x170 net/llc/llc_conn.c:950
        [<00000000551f7c47>] llc_ui_create+0x7b/0x140 net/llc/af_llc.c:173
        [<0000000029027f0e>] __sock_create+0x164/0x250 net/socket.c:1430
        [<000000008bdec225>] sock_create net/socket.c:1481 [inline]
        [<000000008bdec225>] __sys_socket+0x69/0x110 net/socket.c:1523
        [<00000000b6439228>] __do_sys_socket net/socket.c:1532 [inline]
        [<00000000b6439228>] __se_sys_socket net/socket.c:1530 [inline]
        [<00000000b6439228>] __x64_sys_socket+0x1e/0x30 net/socket.c:1530
        [<00000000cec820c1>] do_syscall_64+0x76/0x1a0 arch/x86/entry/common.c:301
        [<000000000c32554f>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    BUG: memory leak
    unreferenced object 0xffff88811d750d00 (size 224):
      comm "syz-executor907", pid 7074, jiffies 4294943781 (age 8.600s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 f0 0c 24 81 88 ff ff 00 68 2b 20 81 88 ff ff  ...$.....h+ ....
      backtrace:
        [<0000000053026172>] kmemleak_alloc_recursive include/linux/kmemleak.h:55 [inline]
        [<0000000053026172>] slab_post_alloc_hook mm/slab.h:439 [inline]
        [<0000000053026172>] slab_alloc_node mm/slab.c:3269 [inline]
        [<0000000053026172>] kmem_cache_alloc_node+0x153/0x2a0 mm/slab.c:3579
        [<00000000fa8f3c30>] __alloc_skb+0x6e/0x210 net/core/skbuff.c:198
        [<00000000d96fdafb>] alloc_skb include/linux/skbuff.h:1058 [inline]
        [<00000000d96fdafb>] alloc_skb_with_frags+0x5f/0x250 net/core/skbuff.c:5327
        [<000000000a34a2e7>] sock_alloc_send_pskb+0x269/0x2a0 net/core/sock.c:2225
        [<00000000ee39999b>] sock_alloc_send_skb+0x32/0x40 net/core/sock.c:2242
        [<00000000e034d810>] llc_ui_sendmsg+0x10a/0x540 net/llc/af_llc.c:933
        [<00000000c0bc8445>] sock_sendmsg_nosec net/socket.c:652 [inline]
        [<00000000c0bc8445>] sock_sendmsg+0x54/0x70 net/socket.c:671
        [<000000003b687167>] __sys_sendto+0x148/0x1f0 net/socket.c:1964
        [<00000000922d78d9>] __do_sys_sendto net/socket.c:1976 [inline]
        [<00000000922d78d9>] __se_sys_sendto net/socket.c:1972 [inline]
        [<00000000922d78d9>] __x64_sys_sendto+0x2a/0x30 net/socket.c:1972
        [<00000000cec820c1>] do_syscall_64+0x76/0x1a0 arch/x86/entry/common.c:301
        [<000000000c32554f>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 442176668ecfd6bee8f4f26bef3312ea37a312a0
Author: David Ahern <dsahern@gmail.com>
Date:   Wed May 22 15:12:18 2019 -0700

    ipv6: Fix redirect with VRF
    
    [ Upstream commit 31680ac265802397937d75461a2809a067b9fb93 ]
    
    IPv6 redirect is broken for VRF. __ip6_route_redirect walks the FIB
    entries looking for an exact match on ifindex. With VRF the flowi6_oif
    is updated by l3mdev_update_flow to the l3mdev index and the
    FLOWI_FLAG_SKIP_NH_OIF set in the flags to tell the lookup to skip the
    device match. For redirects the device match is requires so use that
    flag to know when the oif needs to be reset to the skb device index.
    
    Fixes: ca254490c8df ("net: Add VRF support to IPv6 stack")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed753b394321a2e41b5fe567e165f29116e772a3
Author: Mike Manning <mmanning@vyatta.att-mail.com>
Date:   Mon May 20 19:57:17 2019 +0100

    ipv6: Consider sk_bound_dev_if when binding a raw socket to an address
    
    [ Upstream commit 72f7cfab6f93a8ea825fab8ccfb016d064269f7f ]
    
    IPv6 does not consider if the socket is bound to a device when binding
    to an address. The result is that a socket can be bound to eth0 and
    then bound to the address of eth1. If the device is a VRF, the result
    is that a socket can only be bound to an address in the default VRF.
    
    Resolve by considering the device if sk_bound_dev_if is set.
    
    Signed-off-by: Mike Manning <mmanning@vyatta.att-mail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Tested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46702dd5d504d99546b8f1c0ff4c67de78f959e1
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 22 18:35:16 2019 -0700

    ipv4/igmp: fix build error if !CONFIG_IP_MULTICAST
    
    [ Upstream commit 903869bd10e6719b9df6718e785be7ec725df59f ]
    
    ip_sf_list_clear_all() needs to be defined even if !CONFIG_IP_MULTICAST
    
    Fixes: 3580d04aa674 ("ipv4/igmp: fix another memory leak in igmpv3_del_delrec()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9f94e480f3ed951f3fb6693b3b0b19811e67f66
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 22 16:51:22 2019 -0700

    ipv4/igmp: fix another memory leak in igmpv3_del_delrec()
    
    [ Upstream commit 3580d04aa674383c42de7b635d28e52a1e5bc72c ]
    
    syzbot reported memory leaks [1] that I have back tracked to
    a missing cleanup from igmpv3_del_delrec() when
    (im->sfmode != MCAST_INCLUDE)
    
    Add ip_sf_list_clear_all() and kfree_pmc() helpers to explicitely
    handle the cleanups before freeing.
    
    [1]
    
    BUG: memory leak
    unreferenced object 0xffff888123e32b00 (size 64):
      comm "softirq", pid 0, jiffies 4294942968 (age 8.010s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 e0 00 00 01 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000006105011b>] kmemleak_alloc_recursive include/linux/kmemleak.h:55 [inline]
        [<000000006105011b>] slab_post_alloc_hook mm/slab.h:439 [inline]
        [<000000006105011b>] slab_alloc mm/slab.c:3326 [inline]
        [<000000006105011b>] kmem_cache_alloc_trace+0x13d/0x280 mm/slab.c:3553
        [<000000004bba8073>] kmalloc include/linux/slab.h:547 [inline]
        [<000000004bba8073>] kzalloc include/linux/slab.h:742 [inline]
        [<000000004bba8073>] ip_mc_add1_src net/ipv4/igmp.c:1961 [inline]
        [<000000004bba8073>] ip_mc_add_src+0x36b/0x400 net/ipv4/igmp.c:2085
        [<00000000a46a65a0>] ip_mc_msfilter+0x22d/0x310 net/ipv4/igmp.c:2475
        [<000000005956ca89>] do_ip_setsockopt.isra.0+0x1795/0x1930 net/ipv4/ip_sockglue.c:957
        [<00000000848e2d2f>] ip_setsockopt+0x3b/0xb0 net/ipv4/ip_sockglue.c:1246
        [<00000000b9db185c>] udp_setsockopt+0x4e/0x90 net/ipv4/udp.c:2616
        [<000000003028e438>] sock_common_setsockopt+0x38/0x50 net/core/sock.c:3130
        [<0000000015b65589>] __sys_setsockopt+0x98/0x120 net/socket.c:2078
        [<00000000ac198ef0>] __do_sys_setsockopt net/socket.c:2089 [inline]
        [<00000000ac198ef0>] __se_sys_setsockopt net/socket.c:2086 [inline]
        [<00000000ac198ef0>] __x64_sys_setsockopt+0x26/0x30 net/socket.c:2086
        [<000000000a770437>] do_syscall_64+0x76/0x1a0 arch/x86/entry/common.c:301
        [<00000000d3adb93b>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 9c8bb163ae78 ("igmp, mld: Fix memory leak in igmpv3/mld_del_delrec()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Hangbin Liu <liuhangbin@gmail.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07480da0c8a1979e0973d6dd783b6aed966dccf6
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 27 12:40:33 2019 -0700

    inet: switch IP ID generator to siphash
    
    [ Upstream commit df453700e8d81b1bdafdf684365ee2b9431fb702 ]
    
    According to Amit Klein and Benny Pinkas, IP ID generation is too weak
    and might be used by attackers.
    
    Even with recent net_hash_mix() fix (netns: provide pure entropy for net_hash_mix())
    having 64bit key and Jenkins hash is risky.
    
    It is time to switch to siphash and its 128bit keys.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Amit Klein <aksecurity@gmail.com>
    Reported-by: Benny Pinkas <benny@pinkas.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c9144e7899680ef12edf6c7003c9d5b1ac6cc1c
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Thu May 23 20:41:44 2019 +0530

    cxgb4: offload VLAN flows regardless of VLAN ethtype
    
    [ Upstream commit b5730061d1056abf317caea823b94d6e12b5b4f6 ]
    
    VLAN flows never get offloaded unless ivlan_vld is set in filter spec.
    It's not compulsory for vlan_ethtype to be set.
    
    So, always enable ivlan_vld bit for offloading VLAN flows regardless of
    vlan_ethtype is set or not.
    
    Fixes: ad9af3e09c (cxgb4: add tc flower match support for vlan)
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cde0a2508452783152b4bf4b9055e9c55916be4
Author: Jarod Wilson <jarod@redhat.com>
Date:   Fri May 24 09:49:28 2019 -0400

    bonding/802.3ad: fix slave link initialization transition states
    
    [ Upstream commit 334031219a84b9994594015aab85ed7754c80176 ]
    
    Once in a while, with just the right timing, 802.3ad slaves will fail to
    properly initialize, winding up in a weird state, with a partner system
    mac address of 00:00:00:00:00:00. This started happening after a fix to
    properly track link_failure_count tracking, where an 802.3ad slave that
    reported itself as link up in the miimon code, but wasn't able to get a
    valid speed/duplex, started getting set to BOND_LINK_FAIL instead of
    BOND_LINK_DOWN. That was the proper thing to do for the general "my link
    went down" case, but has created a link initialization race that can put
    the interface in this odd state.
    
    The simple fix is to instead set the slave link to BOND_LINK_DOWN again,
    if the link has never been up (last_link_up == 0), so the link state
    doesn't bounce from BOND_LINK_DOWN to BOND_LINK_FAIL -- it hasn't failed
    in this case, it simply hasn't been up yet, and this prevents the
    unnecessary state change from DOWN to FAIL and getting stuck in an init
    failure w/o a partner mac.
    
    Fixes: ea53abfab960 ("bonding/802.3ad: fix link_failure_count tracking")
    CC: Jay Vosburgh <j.vosburgh@gmail.com>
    CC: Veaceslav Falico <vfalico@gmail.com>
    CC: Andy Gospodarek <andy@greyhouse.net>
    CC: "David S. Miller" <davem@davemloft.net>
    CC: netdev@vger.kernel.org
    Tested-by: Heesoon Kim <Heesoon.Kim@stratus.com>
    Signed-off-by: Jarod Wilson <jarod@redhat.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
