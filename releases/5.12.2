commit 96e86bea450b3a00af5dc7ba5382f1b241e4306a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri May 7 12:53:26 2021 +0200

    Linux 5.12.2
    
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Jason Self <jason@bluehome.net>
    Link: https://lore.kernel.org/r/20210505112324.956720416@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7b0208ee370b89d20486fae71cd9abb759819c1
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Wed Feb 24 22:56:28 2021 +0100

    perf/core: Fix unconditional security_locked_down() call
    
    commit 08ef1af4de5fe7de9c6d69f1e22e51b66e385d9b upstream.
    
    Currently, the lockdown state is queried unconditionally, even though
    its result is used only if the PERF_SAMPLE_REGS_INTR bit is set in
    attr.sample_type. While that doesn't matter in case of the Lockdown LSM,
    it causes trouble with the SELinux's lockdown hook implementation.
    
    SELinux implements the locked_down hook with a check whether the current
    task's type has the corresponding "lockdown" class permission
    ("integrity" or "confidentiality") allowed in the policy. This means
    that calling the hook when the access control decision would be ignored
    generates a bogus permission check and audit record.
    
    Fix this by checking sample_type first and only calling the hook when
    its result would be honored.
    
    Fixes: b0c8fdc7fdb7 ("lockdown: Lock down perf when in confidentiality mode")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Paul Moore <paul@paul-moore.com>
    Link: https://lkml.kernel.org/r/20210224215628.192519-1-omosnace@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4571c859f59d1b3360b1dbfdc9d8c8072ba3785
Author: Mark Pearson <markpearson@lenovo.com>
Date:   Wed Apr 7 17:20:15 2021 -0400

    platform/x86: thinkpad_acpi: Correct thermal sensor allocation
    
    commit 6759e18e5cd8745a5dfc5726e4a3db5281ec1639 upstream.
    
    On recent Thinkpad platforms it was reported that temp sensor 11 was
    always incorrectly displaying 66C. It turns out the reason for this is
    that this location in EC RAM is not a temperature sensor but is the
    power supply ID (offset 0xC2).
    
    Based on feedback from the Lenovo firmware team the EC RAM version can
    be determined and for the current version (3) only the 0x78 to 0x7F
    range is used for temp sensors. I don't have any details for earlier
    versions so I have left the implementation unaltered there.
    
    Note - in this block only 0x78 and 0x79 are officially designated (CPU &
    GPU sensors). The use of the other locations in the block will vary from
    platform to platform; but the existing logic to detect a sensor presence
    holds.
    
    Signed-off-by: Mark Pearson <markpearson@lenovo.com>
    Link: https://lore.kernel.org/r/20210407212015.298222-1-markpearson@lenovo.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88cd0fca2e66e0f17c7721544480133c44f61ec6
Author: Chris Chiu <chris.chiu@canonical.com>
Date:   Wed Apr 21 01:46:51 2021 +0800

    USB: Add reset-resume quirk for WD19's Realtek Hub
    
    commit ca91fd8c7643d93bfc18a6fec1a0d3972a46a18a upstream.
    
    Realtek Hub (0bda:5487) in Dell Dock WD19 sometimes fails to work
    after the system resumes from suspend with remote wakeup enabled
    device connected:
    [ 1947.640907] hub 5-2.3:1.0: hub_ext_port_status failed (err = -71)
    [ 1947.641208] usb 5-2.3-port5: cannot disable (err = -71)
    [ 1947.641401] hub 5-2.3:1.0: hub_ext_port_status failed (err = -71)
    [ 1947.641450] usb 5-2.3-port4: cannot reset (err = -71)
    
    Information of this hub:
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 10 Spd=480  MxCh= 5
    D:  Ver= 2.10 Cls=09(hub  ) Sub=00 Prot=02 MxPS=64 #Cfgs=  1
    P:  Vendor=0bda ProdID=5487 Rev= 1.47
    S:  Manufacturer=Dell Inc.
    S:  Product=Dell dock
    C:* #Ifs= 1 Cfg#= 1 Atr=e0 MxPwr=  0mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=01 Driver=hub
    E:  Ad=81(I) Atr=03(Int.) MxPS=   1 Ivl=256ms
    I:* If#= 0 Alt= 1 #EPs= 1 Cls=09(hub  ) Sub=00 Prot=02 Driver=hub
    E:  Ad=81(I) Atr=03(Int.) MxPS=   1 Ivl=256ms
    
    The failure results from the ETIMEDOUT by chance when turning on
    the suspend feature for the specified port of the hub. The port
    seems to be in an unknown state so the hub_activate during resume
    fails the hub_port_status, then the hub will fail to work.
    
    The quirky hub needs the reset-resume quirk to function correctly.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Chris Chiu <chris.chiu@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210420174651.6202-1-chris.chiu@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd551ee52d62d94bf3509d56406e0fb4063b62eb
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Mon Apr 12 21:54:53 2021 +0800

    USB: Add LPM quirk for Lenovo ThinkPad USB-C Dock Gen2 Ethernet
    
    commit 8f23fe35ff1e5491b4d279323a8209a31f03ae65 upstream.
    
    This is another branded 8153 device that doesn't work well with LPM
    enabled:
    [ 400.597506] r8152 5-1.1:1.0 enx482ae3a2a6f0: Tx status -71
    
    So disable LPM to resolve the issue.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    BugLink: https://bugs.launchpad.net/bugs/1922651
    Link: https://lore.kernel.org/r/20210412135455.791971-1-kai.heng.feng@canonical.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26d91f8414fe1820d251d347a4c8836d375ce4fa
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 26 08:33:49 2021 +0200

    ALSA: usb-audio: Fix implicit sync clearance at stopping stream
    
    commit 988cc17552606be67a956cf8cd6ff504cfc5d643 upstream.
    
    The recent endpoint management change for implicit feedback mode added
    a clearance of ep->sync_sink (formerly ep->sync_slave) pointer at
    snd_usb_endpoint_stop() to assure no leftover for the feedback from
    the already stopped capture stream.  This turned out to cause a
    regression, however, when full-duplex streams were running and only a
    capture was stopped.  Because of the above clearance of ep->sync_sink
    pointer, no more feedback is done, hence the playback will stall.
    
    This patch fixes the ep->sync_sink clearance to be done only after all
    endpoints are released, for addressing the regression.
    
    Reported-and-tested-by: Lucas Endres <jaffa225man@gmail.com>
    Fixes: bf6313a0ff76 ("ALSA: usb-audio: Refactor endpoint management")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210426063349.18601-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 617920eb5554948d629dcbefbfd80ab02345d65b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 7 16:45:49 2021 +0200

    ALSA: usb-audio: Add MIDI quirk for Vox ToneLab EX
    
    commit 64f40f9be14106e7df0098c427cb60be645bddb7 upstream.
    
    ToneLab EX guitar pedal device requires the same quirk like ToneLab ST
    for supporting the MIDI.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=212593
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210407144549.1530-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d34e074fb4f4f09039aa4a30354f8f7f54123d8
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Mon Apr 12 12:00:37 2021 +0200

    ovl: allow upperdir inside lowerdir
    
    commit 708fa01597fa002599756bf56a96d0de1677375c upstream.
    
    Commit 146d62e5a586 ("ovl: detect overlapping layers") made sure we don't
    have overlapping layers, but it also broke the arguably valid use case of
    
     mount -olowerdir=/,upperdir=/subdir,..
    
    where upperdir overlaps lowerdir on the same filesystem.  This has been
    causing regressions.
    
    Revert the check, but only for the specific case where upperdir and/or
    workdir are subdirectories of lowerdir.  Any other overlap (e.g. lowerdir
    is subdirectory of upperdir, etc) case is crazy, so leave the check in
    place for those.
    
    Overlaps are detected at lookup time too, so reverting the mount time check
    should be safe.
    
    Fixes: 146d62e5a586 ("ovl: detect overlapping layers")
    Cc: <stable@vger.kernel.org> # v5.2
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d587cfaef72b1b6f4b2774827123bce91f497cc8
Author: Mickaël Salaün <mic@linux.microsoft.com>
Date:   Mon Mar 29 18:49:07 2021 +0200

    ovl: fix leaked dentry
    
    commit eaab1d45cdb4bb0c846bd23c3d666d5b90af7b41 upstream.
    
    Since commit 6815f479ca90 ("ovl: use only uppermetacopy state in
    ovl_lookup()"), overlayfs doesn't put temporary dentry when there is a
    metacopy error, which leads to dentry leaks when shutting down the related
    superblock:
    
      overlayfs: refusing to follow metacopy origin for (/file0)
      ...
      BUG: Dentry (____ptrval____){i=3f33,n=file3}  still in use (1) [unmount of overlay overlay]
      ...
      WARNING: CPU: 1 PID: 432 at umount_check.cold+0x107/0x14d
      CPU: 1 PID: 432 Comm: unmount-overlay Not tainted 5.12.0-rc5 #1
      ...
      RIP: 0010:umount_check.cold+0x107/0x14d
      ...
      Call Trace:
       d_walk+0x28c/0x950
       ? dentry_lru_isolate+0x2b0/0x2b0
       ? __kasan_slab_free+0x12/0x20
       do_one_tree+0x33/0x60
       shrink_dcache_for_umount+0x78/0x1d0
       generic_shutdown_super+0x70/0x440
       kill_anon_super+0x3e/0x70
       deactivate_locked_super+0xc4/0x160
       deactivate_super+0xfa/0x140
       cleanup_mnt+0x22e/0x370
       __cleanup_mnt+0x1a/0x30
       task_work_run+0x139/0x210
       do_exit+0xb0c/0x2820
       ? __kasan_check_read+0x1d/0x30
       ? find_held_lock+0x35/0x160
       ? lock_release+0x1b6/0x660
       ? mm_update_next_owner+0xa20/0xa20
       ? reacquire_held_locks+0x3f0/0x3f0
       ? __sanitizer_cov_trace_const_cmp4+0x22/0x30
       do_group_exit+0x135/0x380
       __do_sys_exit_group.isra.0+0x20/0x20
       __x64_sys_exit_group+0x3c/0x50
       do_syscall_64+0x45/0x70
       entry_SYSCALL_64_after_hwframe+0x44/0xae
      ...
      VFS: Busy inodes after unmount of overlay. Self-destruct in 5 seconds.  Have a nice day...
    
    This fix has been tested with a syzkaller reproducer.
    
    Cc: Amir Goldstein <amir73il@gmail.com>
    Cc: <stable@vger.kernel.org> # v5.8+
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: 6815f479ca90 ("ovl: use only uppermetacopy state in ovl_lookup()")
    Signed-off-by: Mickaël Salaün <mic@linux.microsoft.com>
    Link: https://lore.kernel.org/r/20210329164907.2133175-1-mic@digikod.net
    Reviewed-by: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03c649dee8b1eb5600212a249542a70f47a5ab40
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Apr 21 10:40:07 2021 -0700

    net: qrtr: Avoid potential use after free in MHI send
    
    commit 47a017f33943278570c072bc71681809b2567b3a upstream.
    
    It is possible that the MHI ul_callback will be invoked immediately
    following the queueing of the skb for transmission, leading to the
    callback decrementing the refcount of the associated sk and freeing the
    skb.
    
    As such the dereference of skb and the increment of the sk refcount must
    happen before the skb is queued, to avoid the skb to be used after free
    and potentially the sk to drop its last refcount..
    
    Fixes: 6e728f321393 ("net: qrtr: Add MHI transport layer")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0356e50a7fa65e9b27cf3363a8f8188608859182
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Apr 29 15:19:37 2021 +0000

    bpf: Fix leakage of uninitialized bpf stack under speculation
    
    commit 801c6058d14a82179a7ee17a4b532cac6fad067f upstream.
    
    The current implemented mechanisms to mitigate data disclosure under
    speculation mainly address stack and map value oob access from the
    speculative domain. However, Piotr discovered that uninitialized BPF
    stack is not protected yet, and thus old data from the kernel stack,
    potentially including addresses of kernel structures, could still be
    extracted from that 512 bytes large window. The BPF stack is special
    compared to map values since it's not zero initialized for every
    program invocation, whereas map values /are/ zero initialized upon
    their initial allocation and thus cannot leak any prior data in either
    domain. In the non-speculative domain, the verifier ensures that every
    stack slot read must have a prior stack slot write by the BPF program
    to avoid such data leaking issue.
    
    However, this is not enough: for example, when the pointer arithmetic
    operation moves the stack pointer from the last valid stack offset to
    the first valid offset, the sanitation logic allows for any intermediate
    offsets during speculative execution, which could then be used to
    extract any restricted stack content via side-channel.
    
    Given for unprivileged stack pointer arithmetic the use of unknown
    but bounded scalars is generally forbidden, we can simply turn the
    register-based arithmetic operation into an immediate-based arithmetic
    operation without the need for masking. This also gives the benefit
    of reducing the needed instructions for the operation. Given after
    the work in 7fedb63a8307 ("bpf: Tighten speculative pointer arithmetic
    mask"), the aux->alu_limit already holds the final immediate value for
    the offset register with the known scalar. Thus, a simple mov of the
    immediate to AX register with using AX as the source for the original
    instruction is sufficient and possible now in this case.
    
    Reported-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cf64d8679ca1cb20cf57d6a88bfee79a0922a66
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Apr 30 16:21:46 2021 +0200

    bpf: Fix masking negation logic upon negative dst register
    
    commit b9b34ddbe2076ade359cd5ce7537d5ed019e9807 upstream.
    
    The negation logic for the case where the off_reg is sitting in the
    dst register is not correct given then we cannot just invert the add
    to a sub or vice versa. As a fix, perform the final bitwise and-op
    unconditionally into AX from the off_reg, then move the pointer from
    the src to dst and finally use AX as the source for the original
    pointer arithmetic operation such that the inversion yields a correct
    result. The single non-AX mov in between is possible given constant
    blinding is retaining it as it's not an immediate based operation.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d68d22ee943c6e54edfe0a37269c426c2925b7bc
Author: Imre Deak <imre.deak@intel.com>
Date:   Wed Jan 27 20:19:09 2021 +0200

    drm/i915: Disable runtime power management during shutdown
    
    commit 7962893ecb853aa7c8925ce237ab6c4274cfc1c7 upstream.
    
    At least on some TGL platforms PUNIT wants to access some display HW
    registers, but it doesn't handle display power management (disabling DC
    states as required) and so this register access will lead to a hang. To
    prevent this disable runtime power management for poweroff and reboot.
    
    v2:
    - Add code comment clarifying the requirement of display power states.
      (Ville)
    
    Reported-and-tested-by: Khaled Almahallawy <khaled.almahallawy@intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Khaled Almahallawy <khaled.almahallawy@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210127181909.128094-1-imre.deak@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 507b1ece3c65bcdafd7dc40770af39a9b762506b
Author: Phillip Potter <phil@philpotter.co.uk>
Date:   Thu Apr 1 23:36:07 2021 +0100

    net: usb: ax88179_178a: initialize local variables before use
    
    commit bd78980be1a68d14524c51c4b4170782fada622b upstream.
    
    Use memset to initialize local array in drivers/net/usb/ax88179_178a.c, and
    also set a local u16 and u32 variable to 0. Fixes a KMSAN found uninit-value bug
    reported by syzbot at:
    https://syzkaller.appspot.com/bug?id=00371c73c72f72487c1d0bfe0cc9d00de339d5aa
    
    Reported-by: syzbot+4993e4a0e237f1b53747@syzkaller.appspotmail.com
    Signed-off-by: Phillip Potter <phil@philpotter.co.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 671c54ea8c7ff47bd88444f3fffb65bf9799ce43
Author: Jonathon Reinhart <jonathon.reinhart@gmail.com>
Date:   Mon Apr 12 00:24:53 2021 -0400

    netfilter: conntrack: Make global sysctls readonly in non-init netns
    
    commit 2671fa4dc0109d3fb581bc3078fdf17b5d9080f6 upstream.
    
    These sysctls point to global variables:
    - NF_SYSCTL_CT_MAX (&nf_conntrack_max)
    - NF_SYSCTL_CT_EXPECT_MAX (&nf_ct_expect_max)
    - NF_SYSCTL_CT_BUCKETS (&nf_conntrack_htable_size_user)
    
    Because their data pointers are not updated to point to per-netns
    structures, they must be marked read-only in a non-init_net ns.
    Otherwise, changes in any net namespace are reflected in (leaked into)
    all other net namespaces. This problem has existed since the
    introduction of net namespaces.
    
    The current logic marks them read-only only if the net namespace is
    owned by an unprivileged user (other than init_user_ns).
    
    Commit d0febd81ae77 ("netfilter: conntrack: re-visit sysctls in
    unprivileged namespaces") "exposes all sysctls even if the namespace is
    unpriviliged." Since we need to mark them readonly in any case, we can
    forego the unprivileged user check altogether.
    
    Fixes: d0febd81ae77 ("netfilter: conntrack: re-visit sysctls in unprivileged namespaces")
    Signed-off-by: Jonathon Reinhart <Jonathon.Reinhart@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 902b955f965d68426f7dbf353814d8b3984696c6
Author: Romain Naour <romain.naour@gmail.com>
Date:   Tue Apr 20 22:12:10 2021 +0100

    mips: Do not include hi and lo in clobber list for R6
    
    commit 1d7ba0165d8206ac073f7ac3b14fc0836b66eae7 upstream.
    
    From [1]
    "GCC 10 (PR 91233) won't silently allow registers that are not
    architecturally available to be present in the clobber list anymore,
    resulting in build failure for mips*r6 targets in form of:
    ...
    .../sysdep.h:146:2: error: the register ‘lo’ cannot be clobbered in ‘asm’ for the current target
      146 |  __asm__ volatile (      \
          |  ^~~~~~~
    
    This is because base R6 ISA doesn't define hi and lo registers w/o DSP
    extension. This patch provides the alternative clobber list for r6 targets
    that won't include those registers."
    
    Since kernel 5.4 and mips support for generic vDSO [2], the kernel fail to
    build for mips r6 cpus with gcc 10 for the same reason as glibc.
    
    [1] https://sourceware.org/git/?p=glibc.git;a=commit;h=020b2a97bb15f807c0482f0faee2184ed05bcad8
    [2] '24640f233b46 ("mips: Add support for generic vDSO")'
    
    Signed-off-by: Romain Naour <romain.naour@gmail.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
