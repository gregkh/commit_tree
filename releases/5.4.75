commit 6e97ed6efa701db070da0054b055c085895aba86
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 5 11:43:38 2020 +0100

    Linux 5.4.75
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201103203249.448706377@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ce4da84e5f479b8a2e402589c0713cd9fcefff9
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Oct 16 16:56:30 2020 +0200

    staging: octeon: Drop on uncorrectable alignment or FCS error
    
    commit 49d28ebdf1e30d806410eefc7de0a7a1ca5d747c upstream.
    
    Currently in case of alignment or FCS error if the packet cannot be
    corrected it's still not dropped. Report the error properly and drop the
    packet while making the code around a little bit more readable.
    
    Fixes: 80ff0fd3ab64 ("Staging: Add octeon-ethernet driver files.")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201016145630.41852-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b869f6b67274926600824e8702106d5cb62734fd
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Oct 16 12:18:57 2020 +0200

    staging: octeon: repair "fixed-link" support
    
    commit 179f5dc36b0a1aa31538d7d8823deb65c39847b3 upstream.
    
    The PHYs must be registered once in device probe function, not in device
    open callback because it's only possible to register them once.
    
    Fixes: a25e278020bf ("staging: octeon: support fixed-link phys")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201016101858.11374-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15506ee68893711b5fb20c76d433fb49928574ea
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Wed Oct 21 13:21:42 2020 +0100

    staging: comedi: cb_pcidas: Allow 2-channel commands for AO subdevice
    
    commit 647a6002cb41d358d9ac5de101a8a6dc74748a59 upstream.
    
    The "cb_pcidas" driver supports asynchronous commands on the analog
    output (AO) subdevice for those boards that have an AO FIFO.  The code
    (in `cb_pcidas_ao_check_chanlist()` and `cb_pcidas_ao_cmd()`) to
    validate and set up the command supports output to a single channel or
    to two channels simultaneously (the boards have two AO channels).
    However, the code in `cb_pcidas_auto_attach()` that initializes the
    subdevices neglects to initialize the AO subdevice's `len_chanlist`
    member, leaving it set to 0, but the Comedi core will "correct" it to 1
    if the driver neglected to set it.  This limits commands to use a single
    channel (either channel 0 or 1), but the limit should be two channels.
    Set the AO subdevice's `len_chanlist` member to be the same value as the
    `n_chan` member, which will be 2.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20201021122142.81628-1-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d934fe936fd6c52417d408529b5d45714bea247
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Mon Oct 12 21:24:04 2020 +0800

    staging: fieldbus: anybuss: jump to correct label in an error path
    
    commit 7e97e4cbf30026b49b0145c3bfe06087958382c5 upstream.
    
    In current code, controller_probe() misses to call ida_simple_remove()
    in an error path. Jump to correct label to fix it.
    
    Fixes: 17614978ed34 ("staging: fieldbus: anybus-s: support the Arcx anybus controller")
    Reviewed-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201012132404.113031-1-jingxiangfeng@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fd792948e76d473f30a39d2d74d539abeda6153
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Oct 29 17:24:09 2020 +0000

    KVM: arm64: Fix AArch32 handling of DBGD{CCINT,SCRext} and DBGVCR
    
    commit 4a1c2c7f63c52ccb11770b5ae25920a6b79d3548 upstream.
    
    The DBGD{CCINT,SCRext} and DBGVCR register entries in the cp14 array
    are missing their target register, resulting in all accesses being
    targetted at the guard sysreg (indexed by __INVALID_SYSREG__).
    
    Point the emulation code at the actual register entries.
    
    Fixes: bdfb4b389c8d ("arm64: KVM: add trap handlers for AArch32 debug registers")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201029172409.2768336-1-maz@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cb29cdd50439e89e349119c936ebb9000d180bf
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Oct 22 21:41:00 2020 +0300

    device property: Don't clear secondary pointer for shared primary firmware node
    
    commit 99aed9227073fb34ce2880cbc7063e04185a65e1 upstream.
    
    It appears that firmware nodes can be shared between devices. In such case
    when a (child) device is about to be deleted, its firmware node may be shared
    and ACPI_COMPANION_SET(..., NULL) call for it breaks the secondary link
    of the shared primary firmware node.
    
    In order to prevent that, check, if the device has a parent and parent's
    firmware node is shared with its child, and avoid crashing the link.
    
    Fixes: c15e1bdda436 ("device property: Fix the secondary firmware node handling in set_primary_fwnode()")
    Reported-by: Ferry Toth <fntoth@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Tested-by: Ferry Toth <fntoth@gmail.com>
    Cc: 5.9+ <stable@vger.kernel.org> # 5.9+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26086875476fe188846f482109a5bc931756fe44
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Oct 22 21:40:59 2020 +0300

    device property: Keep secondary firmware node secondary by type
    
    commit d5dcce0c414fcbfe4c2037b66ac69ea5f9b3f75c upstream.
    
    Behind primary and secondary we understand the type of the nodes
    which might define their ordering. However, if primary node gone,
    we can't maintain the ordering by definition of the linked list.
    Thus, by ordering secondary node becomes first in the list.
    But in this case the meaning of it is still secondary (or auxiliary).
    The type of the node is maintained by the secondary pointer in it:
    
            secondary pointer               Meaning
            NULL or valid                   primary node
            ERR_PTR(-ENODEV)                secondary node
    
    So, if by some reason we do the following sequence of calls
    
            set_primary_fwnode(dev, NULL);
            set_primary_fwnode(dev, primary);
    
    we should preserve secondary node.
    
    This concept is supported by the description of set_primary_fwnode()
    along with implementation of set_secondary_fwnode(). Hence, fix
    the commit c15e1bdda436 to follow this as well.
    
    Fixes: c15e1bdda436 ("device property: Fix the secondary firmware node handling in set_primary_fwnode()")
    Cc: Ferry Toth <fntoth@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Tested-by: Ferry Toth <fntoth@gmail.com>
    Cc: 5.9+ <stable@vger.kernel.org> # 5.9+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e793fc391351b1231cc615a995bb7692b741bf90
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Aug 4 21:26:49 2020 +0200

    ARM: s3c24xx: fix missing system reset
    
    commit f6d7cde84f6c5551586c8b9b68d70f8e6dc9a000 upstream.
    
    Commit f6361c6b3880 ("ARM: S3C24XX: remove separate restart code")
    removed usage of the watchdog reset platform code in favor of the
    Samsung SoC watchdog driver.  However the latter was not selected thus
    S3C24xx platforms lost reset abilities.
    
    Cc: <stable@vger.kernel.org>
    Fixes: f6361c6b3880 ("ARM: S3C24XX: remove separate restart code")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2937774ef43aee8675c1219a37240e7a2b2c523f
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Sep 10 17:41:49 2020 +0200

    ARM: samsung: fix PM debug build with DEBUG_LL but !MMU
    
    commit 7be0d19c751b02db778ca95e3274d5ea7f31891c upstream.
    
    Selecting CONFIG_SAMSUNG_PM_DEBUG (depending on CONFIG_DEBUG_LL) but
    without CONFIG_MMU leads to build errors:
    
      arch/arm/plat-samsung/pm-debug.c: In function ‘s3c_pm_uart_base’:
      arch/arm/plat-samsung/pm-debug.c:57:2: error:
        implicit declaration of function ‘debug_ll_addr’ [-Werror=implicit-function-declaration]
    
    Fixes: 99b2fc2b8b40 ("ARM: SAMSUNG: Use debug_ll_addr() to get UART base address")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200910154150.3318-1-krzk@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0808ca98e67e914ac48cc8f11910509d3b04379c
Author: Frank Wunderlich <frank-w@public-files.de>
Date:   Mon Sep 7 09:05:17 2020 +0200

    arm: dts: mt7623: add missing pause for switchport
    
    commit 36f0a5fc5284838c544218666c63ee8cfa46a9c3 upstream.
    
    port6 of mt7530 switch (= cpu port 0) on bananapi-r2 misses pause option
    which causes rx drops on running iperf.
    
    Fixes: f4ff257cd160 ("arm: dts: mt7623: add support for Bananapi R2 (BPI-R2) board")
    Signed-off-by: Frank Wunderlich <frank-w@public-files.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200907070517.51715-1-linux@fw-web.de
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3d8023e064764a99aafbdfcf92632df23a1164e
Author: Helge Deller <deller@gmx.de>
Date:   Mon Oct 19 16:57:50 2020 +0200

    hil/parisc: Disable HIL driver when it gets stuck
    
    commit 879bc2d27904354b98ca295b6168718e045c4aa2 upstream.
    
    When starting a HP machine with HIL driver but without an HIL keyboard
    or HIL mouse attached, it may happen that data written to the HIL loop
    gets stuck (e.g. because the transaction queue is full).  Usually one
    will then have to reboot the machine because all you see is and endless
    output of:
     Transaction add failed: transaction already queued?
    
    In the higher layers hp_sdc_enqueue_transaction() is called to queued up
    a HIL packet. This function returns an error code, and this patch adds
    the necessary checks for this return code and disables the HIL driver if
    further packets can't be sent.
    
    Tested on a HP 730 and a HP 715/64 machine.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81190a9efde0159ba255d9d629e50b4dda51d043
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Mon Oct 26 09:12:10 2020 +0000

    cachefiles: Handle readpage error correctly
    
    commit 9480b4e75b7108ee68ecf5bc6b4bd68e8031c521 upstream.
    
    If ->readpage returns an error, it has already unlocked the page.
    
    Fixes: 5e929b33c393 ("CacheFiles: Handle truncate unlocking the page we're reading")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bf2a744a4e77d340700c83b40b7f859deac7d03
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Fri Oct 9 15:08:31 2020 +0800

    arm64: berlin: Select DW_APB_TIMER_OF
    
    commit b0fc70ce1f028e14a37c186d9f7a55e51439b83a upstream.
    
    Berlin SoCs always contain some DW APB timers which can be used as an
    always-on broadcast timer.
    
    Link: https://lore.kernel.org/r/20201009150536.214181fb@xhacker.debian
    Cc: <stable@vger.kernel.org> # v3.14+
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2313d7818b979f8b3751f052a8db34a7ed26780
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 26 13:15:23 2020 -0700

    tty: make FONTX ioctl use the tty pointer they were actually passed
    
    commit 90bfdeef83f1d6c696039b6a917190dcbbad3220 upstream.
    
    Some of the font tty ioctl's always used the current foreground VC for
    their operations.  Don't do that then.
    
    This fixes a data race on fg_console.
    
    Side note: both Michael Ellerman and Jiri Slaby point out that all these
    ioctls are deprecated, and should probably have been removed long ago,
    and everything seems to be using the KDFONTOP ioctl instead.
    
    In fact, Michael points out that it looks like busybox's loadfont
    program seems to have switched over to using KDFONTOP exactly _because_
    of this bug (ahem.. 12 years ago ;-).
    
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Acked-by: Jiri Slaby <jirislaby@kernel.org>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit beb5d0dfc154298e3e59a0abfb7ac3723278cc6f
Author: Evan Quan <evan.quan@amd.com>
Date:   Wed Sep 2 16:10:10 2020 +0800

    drm/amd/pm: increase mclk switch threshold to 200 us
    
    commit 83da6eea3af669ee0b1f1bc05ffd6150af984994 upstream.
    
    To avoid underflow seen on Polaris10 with some 3440x1440
    144Hz displays. As the threshold of 190 us cuts too close
    to minVBlankTime of 192 us.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 071b3300c9516ada95b82c2b65d9e2d9b81dbd23
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Thu Oct 15 17:41:15 2020 +0800

    mmc: sdhci: Use Auto CMD Auto Select only when v4_mode is true
    
    commit b3e1ea16fb39fb6e1a1cf1dbdd6738531de3dc7d upstream.
    
    sdhci-of-dwcmshc meets an eMMC read performance regression with below
    command after commit 427b6514d095 ("mmc: sdhci: Add Auto CMD Auto
    Select support"):
    
    dd if=/dev/mmcblk0 of=/dev/null bs=8192 count=100000
    
    Before the commit, the above command gives 120MB/s
    After the commit, the above command gives 51.3 MB/s
    
    So it looks like sdhci-of-dwcmshc expects Version 4 Mode for Auto
    CMD Auto Select. Fix the performance degradation by ensuring v4_mode
    is true to use Auto CMD Auto Select.
    
    Fixes: 427b6514d095 ("mmc: sdhci: Add Auto CMD Auto Select support")
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201015174115.4cf2c19a@xhacker.debian
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb4e2a67e19369da0f2fd8903bc59cce6c5481c8
Author: Michael Walle <michael@walle.cc>
Date:   Fri Oct 23 00:23:37 2020 +0200

    mmc: sdhci-of-esdhc: set timeout to max before tuning
    
    commit 0add6e9b88d0632a25323aaf4987dbacb0e4ae64 upstream.
    
    On rare occations there is the following error:
    
      mmc0: Tuning timeout, falling back to fixed sampling clock
    
    There are SD cards which takes a significant longer time to reply to the
    first CMD19 command. The eSDHC takes the data timeout value into account
    during the tuning period. The SDHCI core doesn't explicitly set this
    timeout for the tuning procedure. Thus on the slow cards, there might be
    a spurious "Buffer Read Ready" interrupt, which in turn triggers a wrong
    sequence of events. In the end this will lead to an unsuccessful tuning
    procedure and to the above error.
    
    To workaround this, set the timeout to the maximum value (which is the
    best we can do) and the SDHCI core will take care of the proper timeout
    handling.
    
    Fixes: ba49cbd0936e ("mmc: sdhci-of-esdhc: add tuning support")
    Signed-off-by: Michael Walle <michael@walle.cc>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201022222337.19857-1-michael@walle.cc
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7e1a637eae9c6fbae8e8aa98c4b6f9952d27887
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Oct 20 08:22:53 2020 +1000

    drm/ttm: fix eviction valuable range check.
    
    commit fea456d82c19d201c21313864105876deabe148b upstream.
    
    This was adding size to start, but pfn and start are in pages,
    so it should be using num_pages.
    
    Not sure this fixes anything in the real world, just noticed it
    during refactoring.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20201019222257.1684769-2-airlied@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b60edf37d5d34f5375de90b7ba68bc59cced5c68
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Oct 20 09:36:31 2020 +0800

    ext4: fix invalid inode checksum
    
    commit 1322181170bb01bce3c228b82ae3d5c6b793164f upstream.
    
    During the stability test, there are some errors:
      ext4_lookup:1590: inode #6967: comm fsstress: iget: checksum invalid.
    
    If the inode->i_iblocks too big and doesn't set huge file flag, checksum
    will not be recalculated when update the inode information to it's buffer.
    If other inode marks the buffer dirty, then the inconsistent inode will
    be flushed to disk.
    
    Fix this problem by checking i_blocks in advance.
    
    Cc: stable@kernel.org
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Link: https://lore.kernel.org/r/20201020013631.3796673-1-luomeng12@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae05fdc6d60a48d44f1ed9329218c9c6407ff818
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Aug 29 10:54:02 2020 +0800

    ext4: fix error handling code in add_new_gdb
    
    commit c9e87161cc621cbdcfc472fa0b2d81c63780c8f5 upstream.
    
    When ext4_journal_get_write_access() fails, we should
    terminate the execution flow and release n_group_desc,
    iloc.bh, dind and gdb_bh.
    
    Cc: stable@kernel.org
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20200829025403.3139-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0de3cf2f28642a181707418b5ed55c115d8d0b1
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Sep 22 09:24:56 2020 -0700

    ext4: fix leaking sysfs kobject after failed mount
    
    commit cb8d53d2c97369029cc638c9274ac7be0a316c75 upstream.
    
    ext4_unregister_sysfs() only deletes the kobject.  The reference to it
    needs to be put separately, like ext4_put_super() does.
    
    This addresses the syzbot report
    "memory leak in kobject_set_name_vargs (3)"
    (https://syzkaller.appspot.com/bug?extid=9f864abad79fae7c17e1).
    
    Reported-by: syzbot+9f864abad79fae7c17e1@syzkaller.appspotmail.com
    Fixes: 72ba74508b28 ("ext4: release sysfs kobject when failing to enable quotas on mount")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20200922162456.93657-1-ebiggers@kernel.org
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b11e9dd66e3a1d306a2d5697299a99537250b7ec
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Thu Oct 8 22:42:56 2020 +0200

    vringh: fix __vringh_iov() when riov and wiov are different
    
    commit 5745bcfbbf89b158416075374254d3c013488f21 upstream.
    
    If riov and wiov are both defined and they point to different
    objects, only riov is initialized. If the wiov is not initialized
    by the caller, the function fails returning -EINVAL and printing
    "Readable desc 0x... after writable" error message.
    
    This issue happens when descriptors have both readable and writable
    buffers (eg. virtio-blk devices has virtio_blk_outhdr in the readable
    buffer and status as last byte of writable buffer) and we call
    __vringh_iov() to get both type of buffers in two different iovecs.
    
    Let's replace the 'else if' clause with 'if' to initialize both
    riov and wiov if they are not NULL.
    
    As checkpatch pointed out, we also avoid crashing the kernel
    when riov and wiov are both NULL, replacing BUG() with WARN_ON()
    and returning -EINVAL.
    
    Fixes: f87d0fbb5798 ("vringh: host-side implementation of virtio rings.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20201008204256.162292-1-sgarzare@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cfbc13ab3f00df35612929143bad651a2eafcc8
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Mon Oct 19 22:22:42 2020 +0800

    ring-buffer: Return 0 on success from ring_buffer_resize()
    
    commit 0a1754b2a97efa644aa6e84d1db5b17c42251483 upstream.
    
    We don't need to check the new buffer size, and the return value
    had confused resize_buffer_duplicate_size().
    ...
            ret = ring_buffer_resize(trace_buf->buffer,
                    per_cpu_ptr(size_buf->data,cpu_id)->entries, cpu_id);
            if (ret == 0)
                    per_cpu_ptr(trace_buf->data, cpu_id)->entries =
                            per_cpu_ptr(size_buf->data, cpu_id)->entries;
    ...
    
    Link: https://lkml.kernel.org/r/20201019142242.11560-1-hqjagain@gmail.com
    
    Cc: stable@vger.kernel.org
    Fixes: d60da506cbeb3 ("tracing: Add a resize function to make one buffer equivalent to another buffer")
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0db6e7161e3333a2a119e592cc215909d53d8ecc
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Sun Oct 4 19:04:22 2020 +0100

    9P: Cast to loff_t before multiplying
    
    commit f5f7ab168b9a60e12a4b8f2bb6fcc91321dc23c1 upstream.
    
    On 32-bit systems, this multiplication will overflow for files larger
    than 4GB.
    
    Link: http://lkml.kernel.org/r/20201004180428.14494-2-willy@infradead.org
    Cc: stable@vger.kernel.org
    Fixes: fb89b45cdfdc ("9P: introduction of a new cache=mmap model.")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51135ffbb54d01d77038bd01edbc54b875a0be03
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Wed Oct 7 20:06:48 2020 +0200

    libceph: clear con->out_msg on Policy::stateful_server faults
    
    commit 28e1581c3b4ea5f98530064a103c6217bedeea73 upstream.
    
    con->out_msg must be cleared on Policy::stateful_server
    (!CEPH_MSG_CONNECT_LOSSY) faults.  Not doing so botches the
    reconnection attempt, because after writing the banner the
    messenger moves on to writing the data section of that message
    (either from where it got interrupted by the connection reset or
    from the beginning) instead of writing struct ceph_msg_connect.
    This results in a bizarre error message because the server
    sends CEPH_MSGR_TAG_BADPROTOVER but we think we wrote struct
    ceph_msg_connect:
    
      libceph: mds0 (1)172.21.15.45:6828 socket error on write
      ceph: mds0 reconnect start
      libceph: mds0 (1)172.21.15.45:6829 socket closed (con state OPEN)
      libceph: mds0 (1)172.21.15.45:6829 protocol version mismatch, my 32 != server's 32
      libceph: mds0 (1)172.21.15.45:6829 protocol version mismatch
    
    AFAICT this bug goes back to the dawn of the kernel client.
    The reason it survived for so long is that only MDS sessions
    are stateful and only two MDS messages have a data section:
    CEPH_MSG_CLIENT_RECONNECT (always, but reconnecting is rare)
    and CEPH_MSG_CLIENT_REQUEST (only when xattrs are involved).
    The connection has to get reset precisely when such message
    is being sent -- in this case it was the former.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/47723
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4fdbedef767143cfce7218086c6b3b39bc42373
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Sun Oct 4 19:04:24 2020 +0100

    ceph: promote to unsigned long long before shifting
    
    commit c403c3a2fbe24d4ed33e10cabad048583ebd4edf upstream.
    
    On 32-bit systems, this shift will overflow for files larger than 4GB.
    
    Cc: stable@vger.kernel.org
    Fixes: 61f68816211e ("ceph: check caps in filemap_fault and page_mkwrite")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cdccb4761e54d12e9cb5f19864c2b747115f82b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Oct 23 09:46:54 2020 +0200

    drm/amd/display: Fix kernel panic by dal_gpio_open() error
    
    commit 920bb38c518408fa2600eaefa0af9e82cf48f166 upstream.
    
    Currently both error code paths handled in dal_gpio_open_ex() issues
    ASSERT_CRITICAL(), and this leads to a kernel panic unnecessarily if
    CONFIG_KGDB is enabled.  Since basically both are non-critical errors
    and can be recovered, drop those assert calls and use a safer one,
    BREAK_TO_DEBUGGER(), for allowing the debugging, instead.
    
    BugLink: https://bugzilla.opensuse.org/show_bug.cgi?id=1177973
    Cc: <stable@vger.kernel.org>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7e22dbc662db61309ff6d8dc345b161b0962a30
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Oct 23 09:46:55 2020 +0200

    drm/amd/display: Don't invoke kgdb_breakpoint() unconditionally
    
    commit 8b7dc1fe1a5c1093551f6cd7dfbb941bd9081c2e upstream.
    
    ASSERT_CRITICAL() invokes kgdb_breakpoint() whenever either
    CONFIG_KGDB or CONFIG_HAVE_KGDB is set.  This, however, may lead to a
    kernel panic when no kdb stuff is attached, since the
    kgdb_breakpoint() call issues INT3.  It's nothing but a surprise for
    normal end-users.
    
    For avoiding the pitfall, make the kgdb_breakpoint() call only when
    CONFIG_DEBUG_KERNEL_DC is set.
    
    https://bugzilla.opensuse.org/show_bug.cgi?id=1177973
    Cc: <stable@vger.kernel.org>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1628cdacfb0b8bd390e8bce81ea481dc9986f13
Author: Christian König <christian.koenig@amd.com>
Date:   Mon Oct 12 13:09:36 2020 +0200

    drm/amdgpu: increase the reserved VM size to 2MB
    
    commit 55bb919be4e4973cd037a04f527ecc6686800437 upstream.
    
    Ideally this should be a multiple of the VM block size.
    2MB should at least fit for Vega/Navi.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Madhav Chauhan <madhav.chauhan@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adff3a805c9748116597605c596cd16de080a286
Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
Date:   Wed Oct 14 13:12:30 2020 -0400

    drm/amd/display: Avoid MST manager resource leak.
    
    commit 5dff80bdce9e385af5716ed083f9e33e814484ab upstream.
    
    On connector destruction call drm_dp_mst_topology_mgr_destroy
    to release resources allocated in drm_dp_mst_topology_mgr_init.
    Do it only if MST manager was initilized before otherwsie a crash
    is seen on driver unload/device unplug.
    
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e460aa7353da2e4044f1ec0693ce2080865623a
Author: Jay Cornwall <jay.cornwall@amd.com>
Date:   Sat Oct 17 08:38:43 2020 -0500

    drm/amdkfd: Use same SQ prefetch setting as amdgpu
    
    commit d56b1980d7efe9ef08469e856fc0703d0cef65e4 upstream.
    
    0 causes instruction fetch stall at cache line boundary under some
    conditions on Navi10. A non-zero prefetch is the preferred default
    in any case.
    
    Fixes soft hang in Luxmark.
    
    Signed-off-by: Jay Cornwall <jay.cornwall@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d417026c408187cf676d3d2d5920fcdc5eafd079
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Oct 15 14:57:46 2020 +0800

    drm/amdgpu: correct the gpu reset handling for job != NULL case
    
    commit 207ac684792560acdb9e06f9d707ebf63c84b0e0 upstream.
    
    Current code wrongly treat all cases as job == NULL.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-and-tested-by: Jane Jian <Jane.Jian@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9887a48d49f0fa67f123fa601745929c2749c9e7
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Wed Sep 9 17:41:53 2020 -0400

    drm/amd/display: Increase timeout for DP Disable
    
    commit 37b7cb10f07c1174522faafc1d51c6591b1501d4 upstream.
    
    [WHY]
    When disabling DP video, the current REG_WAIT timeout
    of 50ms is too low for certain cases with very high
    VSYNC intervals.
    
    [HOW]
    Increase the timeout to 102ms, so that
    refresh rates as low as 10Hz can be handled properly.
    
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 987d3814c92c1288a29cf482ab4b0bc2e1db6857
Author: Madhav Chauhan <madhav.chauhan@amd.com>
Date:   Fri Oct 16 18:03:07 2020 +0530

    drm/amdgpu: don't map BO in reserved region
    
    commit c4aa8dff6091cc9536aeb255e544b0b4ba29faf4 upstream.
    
    2MB area is reserved at top inside VM.
    
    Suggested-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Madhav Chauhan <madhav.chauhan@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c58d5e0c754c0cd11c226a5061beea26414c067
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sun Sep 20 23:12:38 2020 +0200

    i2c: imx: Fix external abort on interrupt in exit paths
    
    commit e50e4f0b85be308a01b830c5fbdffc657e1a6dd0 upstream.
    
    If interrupt comes late, during probe error path or device remove (could
    be triggered with CONFIG_DEBUG_SHIRQ), the interrupt handler
    i2c_imx_isr() will access registers with the clock being disabled.  This
    leads to external abort on non-linefetch on Toradex Colibri VF50 module
    (with Vybrid VF5xx):
    
        Unhandled fault: external abort on non-linefetch (0x1008) at 0x8882d003
        Internal error: : 1008 [#1] ARM
        Modules linked in:
        CPU: 0 PID: 1 Comm: swapper Not tainted 5.7.0 #607
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
          (i2c_imx_isr) from [<8017009c>] (free_irq+0x25c/0x3b0)
          (free_irq) from [<805844ec>] (release_nodes+0x178/0x284)
          (release_nodes) from [<80580030>] (really_probe+0x10c/0x348)
          (really_probe) from [<80580380>] (driver_probe_device+0x60/0x170)
          (driver_probe_device) from [<80580630>] (device_driver_attach+0x58/0x60)
          (device_driver_attach) from [<805806bc>] (__driver_attach+0x84/0xc0)
          (__driver_attach) from [<8057e228>] (bus_for_each_dev+0x68/0xb4)
          (bus_for_each_dev) from [<8057f3ec>] (bus_add_driver+0x144/0x1ec)
          (bus_add_driver) from [<80581320>] (driver_register+0x78/0x110)
          (driver_register) from [<8010213c>] (do_one_initcall+0xa8/0x2f4)
          (do_one_initcall) from [<80c0100c>] (kernel_init_freeable+0x178/0x1dc)
          (kernel_init_freeable) from [<80807048>] (kernel_init+0x8/0x110)
          (kernel_init) from [<80100114>] (ret_from_fork+0x14/0x20)
    
    Additionally, the i2c_imx_isr() could wake up the wait queue
    (imx_i2c_struct->queue) before its initialization happens.
    
    The resource-managed framework should not be used for interrupt handling,
    because the resource will be released too late - after disabling clocks.
    The interrupt handler is not prepared for such case.
    
    Fixes: 1c4b6c3bcf30 ("i2c: imx: implement bus recovery")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da3ccf5b20458d1ceafc399130cb47aaac56428b
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Sep 14 17:45:48 2020 +0200

    rtc: rx8010: don't modify the global rtc ops
    
    commit d3b14296da69adb7825022f3224ac6137eb30abf upstream.
    
    The way the driver is implemented is buggy for the (admittedly unlikely)
    use case where there are two RTCs with one having an interrupt configured
    and the second not. This is caused by the fact that we use a global
    rtc_class_ops struct which we modify depending on whether the irq number
    is present or not.
    
    Fix it by using two const ops structs with and without alarm operations.
    While at it: not being able to request a configured interrupt is an error
    so don't ignore it and bail out of probe().
    
    Fixes: ed13d89b08e3 ("rtc: Add Epson RX8010SJ RTC driver")
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200914154601.32245-2-brgl@bgdev.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e17afa6d1de3d7ce7b2cc49fa2eb8c0e26962746
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sat Oct 17 16:13:37 2020 -0700

    ia64: fix build error with !COREDUMP
    
    commit 7404840d87557c4092bf0272bce5e0354c774bf9 upstream.
    
    Fix linkage error when CONFIG_BINFMT_ELF is selected but CONFIG_COREDUMP
    is not:
    
        ia64-linux-ld: arch/ia64/kernel/elfcore.o: in function `elf_core_write_extra_phdrs':
        elfcore.c:(.text+0x172): undefined reference to `dump_emit'
        ia64-linux-ld: arch/ia64/kernel/elfcore.o: in function `elf_core_write_extra_data':
        elfcore.c:(.text+0x2b2): undefined reference to `dump_emit'
    
    Fixes: 1fcccbac89f5 ("elf coredump: replace ELF_CORE_EXTRA_* macros by functions")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200819064146.12529-1-krzk@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da3bb6fa23f1a4a2f0efa625621106d1d3e5892c
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Jun 1 17:12:31 2020 +0800

    ubi: check kthread_should_stop() after the setting of task state
    
    commit d005f8c6588efcfbe88099b6edafc6f58c84a9c1 upstream.
    
    A detach hung is possible when a race occurs between the detach process
    and the ubi background thread. The following sequences outline the race:
    
      ubi thread: if (list_empty(&ubi->works)...
    
      ubi detach: set_bit(KTHREAD_SHOULD_STOP, &kthread->flags)
                  => by kthread_stop()
                  wake_up_process()
                  => ubi thread is still running, so 0 is returned
    
      ubi thread: set_current_state(TASK_INTERRUPTIBLE)
                  schedule()
                  => ubi thread will never be scheduled again
    
      ubi detach: wait_for_completion()
                  => hung task!
    
    To fix that, we need to check kthread_should_stop() after we set the
    task state, so the ubi thread will either see the stop bit and exit or
    the task state is reset to runnable such that it isn't scheduled out
    indefinitely.
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 801c135ce73d5df1ca ("UBI: Unsorted Block Images")
    Reported-by: syzbot+853639d0cb16c31c7a14@syzkaller.appspotmail.com
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d0beeebd15d86482b5accf2d1e94c3b71571193
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Oct 22 03:16:22 2020 -0700

    ARC: perf: redo the pct irq missing in device-tree handling
    
    commit 8c42a5c02bec6c7eccf08957be3c6c8fccf9790b upstream.
    
    commit feb92d7d3813456c11dce21 "(ARC: perf: don't bail setup if pct irq
    missing in device-tree)" introduced a silly brown-paper bag bug:
    The assignment and comparison in an if statement were not bracketed
    correctly leaving the order of evaluation undefined.
    
    |
    | if (has_interrupts && (irq = platform_get_irq(pdev, 0) >= 0)) {
    |                           ^^^                         ^^^^
    
    And given such a chance, the compiler will bite you hard, fully entitled
    to generating this piece of beauty:
    
    |
    | # if (has_interrupts && (irq = platform_get_irq(pdev, 0) >= 0)) {
    |
    | bl.d @platform_get_irq  <-- irq returned in r0
    |
    | setge r2, r0, 0       <-- r2 is bool 1 or 0 if irq >= 0 true/false
    | brlt.d r0, 0, @.L114
    |
    | st_s  r2,[sp]         <-- irq saved is bool 1 or 0, not actual return val
    | st    1,[r3,160]      # arc_pmu.18_29->irq <-- drops bool and assumes 1
    |
    | # return __request_percpu_irq(irq, handler, 0,
    |
    | bl.d @__request_percpu_irq;
    | mov_s r0,1       <-- drops even bool and assumes 1 which fails
    
    With the snafu fixed, everything is as expected.
    
    | bl.d @platform_get_irq        <-- returns irq in r0
    |
    | mov_s r2,r0
    | brlt.d r2, 0, @.L112
    |
    | st_s  r0,[sp]                 <-- irq isaved is actual return value above
    | st    r0,[r13,160]    #arc_pmu.18_27->irq
    |
    | bl.d @__request_percpu_irq    <-- r0 unchanged so actual irq returned
    | add r4,r4,r12 #, tmp363, __ptr
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46881159583318cf84e9210d794ae820f7196dca
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Mon Sep 28 22:11:35 2020 +0200

    perf python scripting: Fix printable strings in python3 scripts
    
    commit 6fcd5ddc3b1467b3586972ef785d0d926ae4cdf4 upstream.
    
    Hagen reported broken strings in python3 tracepoint scripts:
    
      make PYTHON=python3
      perf record -e sched:sched_switch -a -- sleep 5
      perf script --gen-script py
      perf script -s ./perf-script.py
    
      [..]
      sched__sched_switch      7 563231.759525792        0 swapper   prev_comm=bytearray(b'swapper/7\x00\x00\x00\x00\x00\x00\x00'), prev_pid=0, prev_prio=120, prev_state=, next_comm=bytearray(b'mutex-thread-co\x00'),
    
    The problem is in the is_printable_array function that does not take the
    zero byte into account and claim such string as not printable, so the
    code will create byte array instead of string.
    
    Committer testing:
    
    After this fix:
    
    sched__sched_switch 3 484522.497072626  1158680 kworker/3:0-eve  prev_comm=kworker/3:0, prev_pid=1158680, prev_prio=120, prev_state=I, next_comm=swapper/3, next_pid=0, next_prio=120
    Sample: {addr=0, cpu=3, datasrc=84410401, datasrc_decode=N/A|SNP N/A|TLB N/A|LCK N/A, ip=18446744071841817196, period=1, phys_addr=0, pid=1158680, tid=1158680, time=484522497072626, transaction=0, values=[(0, 0)], weight=0}
    
    sched__sched_switch 4 484522.497085610  1225814 perf             prev_comm=perf, prev_pid=1225814, prev_prio=120, prev_state=, next_comm=migration/4, next_pid=30, next_prio=0
    Sample: {addr=0, cpu=4, datasrc=84410401, datasrc_decode=N/A|SNP N/A|TLB N/A|LCK N/A, ip=18446744071841817196, period=1, phys_addr=0, pid=1225814, tid=1225814, time=484522497085610, transaction=0, values=[(0, 0)], weight=0}
    
    Fixes: 249de6e07458 ("perf script python: Fix string vs byte array resolving")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Hagen Paul Pfeifer <hagen@jauu.net>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200928201135.3633850-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a99cbd20a5c511ad7b1b96730bc87fcba80e21d1
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Tue Sep 29 20:45:31 2020 +0800

    ubifs: mount_ubifs: Release authentication resource in error handling path
    
    commit e2a05cc7f8229e150243cdae40f2af9021d67a4a upstream.
    
    Release the authentication related resource in some error handling
    branches in mount_ubifs().
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>  # 4.20+
    Fixes: d8a22773a12c6d7 ("ubifs: Enable authentication support")
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ba6324ca9c4a1f4fc24c3620ae41fc10239a4cf
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Tue Sep 29 20:45:30 2020 +0800

    ubifs: Don't parse authentication mount options in remount process
    
    commit bb674a4d4de1032837fcbf860a63939e66f0b7ad upstream.
    
    There is no need to dump authentication options while remounting,
    because authentication initialization can only be doing once in
    the first mount process. Dumping authentication mount options in
    remount process may cause memory leak if UBIFS has already been
    mounted with old authentication mount options.
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>  # 4.20+
    Fixes: d8a22773a12c6d7 ("ubifs: Enable authentication support")
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 748057df47b90b338ec60ec784ae7f3c9161094a
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Tue Sep 29 20:45:29 2020 +0800

    ubifs: Fix a memleak after dumping authentication mount options
    
    commit 47f6d9ce45b03a40c34b668a9884754c58122b39 upstream.
    
    Fix a memory leak after dumping authentication mount options in error
    handling branch.
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>  # 4.20+
    Fixes: d8a22773a12c6d7 ("ubifs: Enable authentication support")
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc202c839b5d38096210a7b466313af0c8fe2202
Author: Richard Weinberger <richard@nod.at>
Date:   Mon Sep 28 20:58:59 2020 +0200

    ubifs: journal: Make sure to not dirty twice for auth nodes
    
    commit 78c7d49f55d8631b67c09f9bfbe8155211a9ea06 upstream.
    
    When removing the last reference of an inode the size of an auth node
    is already part of write_len. So we must not call ubifs_add_auth_dirt().
    Call it only when needed.
    
    Cc: <stable@vger.kernel.org>
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Kristof Havasi <havasiefr@gmail.com>
    Fixes: 6a98bc4614de ("ubifs: Add authentication nodes to journal")
    Reported-and-tested-by: Kristof Havasi <havasiefr@gmail.com>
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a779274697600a8269722f80d2599204bba0fe58
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Jun 1 17:10:36 2020 +0800

    ubifs: xattr: Fix some potential memory leaks while iterating entries
    
    commit f2aae745b82c842221f4f233051f9ac641790959 upstream.
    
    Fix some potential memory leaks in error handling branches while
    iterating xattr entries. For example, function ubifs_tnc_remove_ino()
    forgets to free pxent if it exists. Similar problems also exist in
    ubifs_purge_xattrs(), ubifs_add_orphan() and ubifs_jnl_write_inode().
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 1e51764a3c2ac05a2 ("UBIFS: add new flash file system")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 213c836b239658f808c63d058b442ad81a399eb3
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Jun 1 17:10:37 2020 +0800

    ubifs: dent: Fix some potential memory leaks while iterating entries
    
    commit 58f6e78a65f1fcbf732f60a7478ccc99873ff3ba upstream.
    
    Fix some potential memory leaks in error handling branches while
    iterating dent entries. For example, function dbg_check_dir()
    forgets to free pdent if it exists.
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 1e51764a3c2ac05a2 ("UBIFS: add new flash file system")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1ea3c4a4302ee33da9f2684e049c19806074c3e
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Thu Oct 1 18:58:56 2020 -0400

    NFSD: Add missing NFSv2 .pc_func methods
    
    commit 6b3dccd48de8a4c650b01499a0b09d1e2279649e upstream.
    
    There's no protection in nfsd_dispatch() against a NULL .pc_func
    helpers. A malicious NFS client can trigger a crash by invoking the
    unused/unsupported NFSv2 ROOT or WRITECACHE procedures.
    
    The current NFSD dispatcher does not support returning a void reply
    to a non-NULL procedure, so the reply to both of these is wrong, for
    the moment.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da86bb4c214fd70f9c6f17a130878c423ef156d2
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Fri Oct 16 09:25:45 2020 -0400

    NFSv4.2: support EXCHGID4_FLAG_SUPP_FENCE_OPS 4.2 EXCHANGE_ID flag
    
    commit 8c39076c276be0b31982e44654e2c2357473258a upstream.
    
    RFC 7862 introduced a new flag that either client or server is
    allowed to set: EXCHGID4_FLAG_SUPP_FENCE_OPS.
    
    Client needs to update its bitmask to allow for this flag value.
    
    v2: changed minor version argument to unsigned int
    
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c342001cab7f058d6fbf50f05ca4ea499c985ad9
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Fri Sep 25 15:48:39 2020 -0400

    NFSv4: Wait for stateid updates after CLOSE/OPEN_DOWNGRADE
    
    commit b4868b44c5628995fdd8ef2e24dda73cef963a75 upstream.
    
    Since commit 0e0cb35b417f ("NFSv4: Handle NFS4ERR_OLD_STATEID in
    CLOSE/OPEN_DOWNGRADE") the following livelock may occur if a CLOSE races
    with the update of the nfs_state:
    
    Process 1           Process 2           Server
    =========           =========           ========
     OPEN file
                        OPEN file
                                            Reply OPEN (1)
                                            Reply OPEN (2)
     Update state (1)
     CLOSE file (1)
                                            Reply OLD_STATEID (1)
     CLOSE file (2)
                                            Reply CLOSE (-1)
                        Update state (2)
                        wait for state change
     OPEN file
                        wake
     CLOSE file
     OPEN file
                        wake
     CLOSE file
     ...
                        ...
    
    We can avoid this situation by not issuing an immediate retry with a bumped
    seqid when CLOSE/OPEN_DOWNGRADE receives NFS4ERR_OLD_STATEID.  Instead,
    take the same approach used by OPEN and wait at least 5 seconds for
    outstanding stateid updates to complete if we can detect that we're out of
    sequence.
    
    Note that after this change it is still possible (though unlikely) that
    CLOSE waits a full 5 seconds, bumps the seqid, and retries -- and that
    attempt races with another OPEN at the same time.  In order to avoid this
    race (which would result in the livelock), update
    nfs_need_update_open_stateid() to handle the case where:
     - the state is NFS_OPEN_STATE, and
     - the stateid doesn't match the current open stateid
    
    Finally, nfs_need_update_open_stateid() is modified to be idempotent and
    renamed to better suit the purpose of signaling that the stateid passed
    is the next stateid in sequence.
    
    Fixes: 0e0cb35b417f ("NFSv4: Handle NFS4ERR_OLD_STATEID in CLOSE/OPEN_DOWNGRADE")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 415043c3ec0dea6bf3a347f2ce22b0461b9e161a
Author: Michael Neuling <mikey@neuling.org>
Date:   Tue Oct 13 15:37:40 2020 +1100

    powerpc: Fix undetected data corruption with P9N DD2.1 VSX CI load emulation
    
    commit 1da4a0272c5469169f78cd76cf175ff984f52f06 upstream.
    
    __get_user_atomic_128_aligned() stores to kaddr using stvx which is a
    VMX store instruction, hence kaddr must be 16 byte aligned otherwise
    the store won't occur as expected.
    
    Unfortunately when we call __get_user_atomic_128_aligned() in
    p9_hmi_special_emu(), the buffer we pass as kaddr (ie. vbuf) isn't
    guaranteed to be 16B aligned. This means that the write to vbuf in
    __get_user_atomic_128_aligned() has the bottom bits of the address
    truncated. This results in other local variables being
    overwritten. Also vbuf will not contain the correct data which results
    in the userspace emulation being wrong and hence undetected user data
    corruption.
    
    In the past we've been mostly lucky as vbuf has ended up aligned but
    this is fragile and isn't always true. CONFIG_STACKPROTECTOR in
    particular can change the stack arrangement enough that our luck runs
    out.
    
    This issue only occurs on POWER9 Nimbus <= DD2.1 bare metal.
    
    The fix is to align vbuf to a 16 byte boundary.
    
    Fixes: 5080332c2c89 ("powerpc/64s: Add workaround for P9 vector CI load issue")
    Cc: stable@vger.kernel.org # v4.15+
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201013043741.743413-1-mikey@neuling.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94e27f13694c04334b8c55e60cfcf1c13e5a5f5d
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Sep 11 10:29:15 2020 +0000

    powerpc/powermac: Fix low_sleep_handler with KUAP and KUEP
    
    commit 2c637d2df4ee4830e9d3eb2bd5412250522ce96e upstream.
    
    low_sleep_handler() has an hardcoded restore of segment registers
    that doesn't take KUAP and KUEP into account.
    
    Use head_32's load_segment_registers() routine instead.
    
    Fixes: a68c31fc01ef ("powerpc/32s: Implement Kernel Userspace Access Protection")
    Fixes: 31ed2b13c48d ("powerpc/32s: Implement Kernel Userspace Execution Prevention.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/21b05f7298c1b18f73e6e5b4cd5005aafa24b6da.1599820109.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61ed8c1b940d7b1c833cceabb0888d1771754f87
Author: Mahesh Salgaonkar <mahesh@linux.ibm.com>
Date:   Tue Oct 6 13:02:18 2020 +0530

    powerpc/powernv/elog: Fix race while processing OPAL error log event.
    
    commit aea948bb80b478ddc2448f7359d574387521a52d upstream.
    
    Every error log reported by OPAL is exported to userspace through a
    sysfs interface and notified using kobject_uevent(). The userspace
    daemon (opal_errd) then reads the error log and acknowledges the error
    log is saved safely to disk. Once acknowledged the kernel removes the
    respective sysfs file entry causing respective resources to be
    released including kobject.
    
    However it's possible the userspace daemon may already be scanning
    elog entries when a new sysfs elog entry is created by the kernel.
    User daemon may read this new entry and ack it even before kernel can
    notify userspace about it through kobject_uevent() call. If that
    happens then we have a potential race between
    elog_ack_store->kobject_put() and kobject_uevent which can lead to
    use-after-free of a kernfs object resulting in a kernel crash. eg:
    
      BUG: Unable to handle kernel data access on read at 0x6b6b6b6b6b6b6bfb
      Faulting instruction address: 0xc0000000008ff2a0
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA PowerNV
      CPU: 27 PID: 805 Comm: irq/29-opal-elo Not tainted 5.9.0-rc2-gcc-8.2.0-00214-g6f56a67bcbb5-dirty #363
      ...
      NIP kobject_uevent_env+0xa0/0x910
      LR  elog_event+0x1f4/0x2d0
      Call Trace:
        0x5deadbeef0000122 (unreliable)
        elog_event+0x1f4/0x2d0
        irq_thread_fn+0x4c/0xc0
        irq_thread+0x1c0/0x2b0
        kthread+0x1c4/0x1d0
        ret_from_kernel_thread+0x5c/0x6c
    
    This patch fixes this race by protecting the sysfs file
    creation/notification by holding a reference count on kobject until we
    safely send kobject_uevent().
    
    The function create_elog_obj() returns the elog object which if used
    by caller function will end up in use-after-free problem again.
    However, the return value of create_elog_obj() function isn't being
    used today and there is no need as well. Hence change it to return
    void to make this fix complete.
    
    Fixes: 774fea1a38c6 ("powerpc/powernv: Read OPAL error log and export it through sysfs")
    Cc: stable@vger.kernel.org # v3.15+
    Reported-by: Oliver O'Halloran <oohall@gmail.com>
    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Reviewed-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
    [mpe: Rework the logic to use a single return, reword comments, add oops]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201006122051.190176-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7850dd0851a3b36118a81302cf1bf6a207786811
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Wed Oct 7 17:18:34 2020 +0530

    powerpc/memhotplug: Make lmb size 64bit
    
    commit 301d2ea6572386245c5d2d2dc85c3b5a737b85ac upstream.
    
    Similar to commit 89c140bbaeee ("pseries: Fix 64 bit logical memory block panic")
    make sure different variables tracking lmb_size are updated to be 64 bit.
    
    This was found by code audit.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201007114836.282468-3-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa03b7f21a3edcee18190c2a4ddccc0b4128dc5
Author: Joel Stanley <joel@jms.id.au>
Date:   Wed Sep 2 09:30:11 2020 +0930

    powerpc: Warn about use of smt_snooze_delay
    
    commit a02f6d42357acf6e5de6ffc728e6e77faf3ad217 upstream.
    
    It's not done anything for a long time. Save the percpu variable, and
    emit a warning to remind users to not expect it to do anything.
    
    This uses pr_warn_once instead of pr_warn_ratelimit as testing
    'ppc64_cpu --smt=off' on a 24 core / 4 SMT system showed the warning
    to be noisy, as the online/offline loop is slow.
    
    Fixes: 3fa8cad82b94 ("powerpc/pseries/cpuidle: smt-snooze-delay cleanup.")
    Cc: stable@vger.kernel.org # v3.14
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Acked-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200902000012.3440389-1-joel@jms.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 240baebeda09e1e010fff58acc9183992f41f638
Author: Andrew Donnellan <ajd@linux.ibm.com>
Date:   Thu Aug 20 14:45:12 2020 +1000

    powerpc/rtas: Restrict RTAS requests from userspace
    
    commit bd59380c5ba4147dcbaad3e582b55ccfd120b764 upstream.
    
    A number of userspace utilities depend on making calls to RTAS to retrieve
    information and update various things.
    
    The existing API through which we expose RTAS to userspace exposes more
    RTAS functionality than we actually need, through the sys_rtas syscall,
    which allows root (or anyone with CAP_SYS_ADMIN) to make any RTAS call they
    want with arbitrary arguments.
    
    Many RTAS calls take the address of a buffer as an argument, and it's up to
    the caller to specify the physical address of the buffer as an argument. We
    allocate a buffer (the "RMO buffer") in the Real Memory Area that RTAS can
    access, and then expose the physical address and size of this buffer in
    /proc/powerpc/rtas/rmo_buffer. Userspace is expected to read this address,
    poke at the buffer using /dev/mem, and pass an address in the RMO buffer to
    the RTAS call.
    
    However, there's nothing stopping the caller from specifying whatever
    address they want in the RTAS call, and it's easy to construct a series of
    RTAS calls that can overwrite arbitrary bytes (even without /dev/mem
    access).
    
    Additionally, there are some RTAS calls that do potentially dangerous
    things and for which there are no legitimate userspace use cases.
    
    In the past, this would not have been a particularly big deal as it was
    assumed that root could modify all system state freely, but with Secure
    Boot and lockdown we need to care about this.
    
    We can't fundamentally change the ABI at this point, however we can address
    this by implementing a filter that checks RTAS calls against a list
    of permitted calls and forces the caller to use addresses within the RMO
    buffer.
    
    The list is based off the list of calls that are used by the librtas
    userspace library, and has been tested with a number of existing userspace
    RTAS utilities. For compatibility with any applications we are not aware of
    that require other calls, the filter can be turned off at build time.
    
    Cc: stable@vger.kernel.org
    Reported-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200820044512.7543-1-ajd@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 551bf7c4bc24918c3629c1984910fe48cba68f85
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Tue Sep 15 08:53:50 2020 +0200

    s390/stp: add locking to sysfs functions
    
    commit b3bd02495cb339124f13135d51940cf48d83e5cb upstream.
    
    The sysfs function might race with stp_work_fn. To prevent that,
    add the required locking. Another issue is that the sysfs functions
    are checking the stp_online flag, but this flag just holds the user
    setting whether STP is enabled. Add a flag to clock_sync_flag whether
    stp_info holds valid data and use that instead.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Reviewed-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58a7dc5f521a14f93482fe9bf829a9dbf653ed92
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Wed Oct 14 22:34:56 2020 +0100

    MIPS: DEC: Restore bootmem reservation for firmware working memory area
    
    commit cf3af0a4d3b62ab48e0b90180ea161d0f5d4953f upstream.
    
    Fix a crash on DEC platforms starting with:
    
    VFS: Mounted root (nfs filesystem) on device 0:11.
    Freeing unused PROM memory: 124k freed
    BUG: Bad page state in process swapper  pfn:00001
    page:(ptrval) refcount:0 mapcount:-128 mapping:00000000 index:0x1 pfn:0x1
    flags: 0x0()
    raw: 00000000 00000100 00000122 00000000 00000001 00000000 ffffff7f 00000000
    page dumped because: nonzero mapcount
    Modules linked in:
    CPU: 0 PID: 1 Comm: swapper Not tainted 5.9.0-00858-g865c50e1d279 #1
    Stack : 8065dc48 0000000b 8065d2b8 9bc27dcc 80645bfc 9bc259a4 806a1b97 80703124
            80710000 8064a900 00000001 80099574 806b116c 1000ec00 9bc27d88 806a6f30
            00000000 00000000 80645bfc 00000000 31232039 80706ba4 2e392e35 8039f348
            2d383538 00000070 0000000a 35363867 00000000 806c2830 80710000 806b0000
            80710000 8064a900 00000001 81000000 00000000 00000000 8035af2c 80700000
            ...
    Call Trace:
    [<8004bc5c>] show_stack+0x34/0x104
    [<8015675c>] bad_page+0xfc/0x128
    [<80157714>] free_pcppages_bulk+0x1f4/0x5dc
    [<801591cc>] free_unref_page+0xc0/0x130
    [<8015cb04>] free_reserved_area+0x144/0x1d8
    [<805abd78>] kernel_init+0x20/0x100
    [<80046070>] ret_from_kernel_thread+0x14/0x1c
    Disabling lock debugging due to kernel taint
    
    caused by an attempt to free bootmem space that as from
    commit b93ddc4f9156 ("mips: Reserve memory for the kernel image resources")
    has not been anymore reserved due to the removal of generic MIPS arch code
    that used to reserve all the memory from the beginning of RAM up to the
    kernel load address.
    
    This memory does need to be reserved on DEC platforms however as it is
    used by REX firmware as working area, as per the TURBOchannel firmware
    specification[1]:
    
    Table 2-2  REX Memory Regions
    -------------------------------------------------------------------------
            Starting        Ending
    Region  Address         Address         Use
    -------------------------------------------------------------------------
    0       0xa0000000      0xa000ffff      Restart block, exception vectors,
                                            REX stack and bss
    1       0xa0010000      0xa0017fff      Keyboard or tty drivers
    
    2       0xa0018000      0xa001f3ff 1)   CRT driver
    
    3       0xa0020000      0xa002ffff      boot, cnfg, init and t objects
    
    4       0xa0020000      0xa002ffff      64KB scratch space
    -------------------------------------------------------------------------
    1) Note that the last 3 Kbytes of region 2 are reserved for backward
    compatibility with previous system software.
    -------------------------------------------------------------------------
    
    (this table uses KSEG2 unmapped virtual addresses, which in the MIPS
    architecture are offset from physical addresses by a fixed value of
    0xa0000000 and therefore the regions referred do correspond to the
    beginning of the physical address space) and we call into the firmware
    on several occasions throughout the bootstrap process.  It is believed
    that pre-REX firmware used with non-TURBOchannel DEC platforms has the
    same requirements, as hinted by note #1 cited.
    
    Recreate the discarded reservation then, in DEC platform code, removing
    the crash.
    
    References:
    
    [1] "TURBOchannel Firmware Specification", On-line version,
        EK-TCAAD-FS-004, Digital Equipment Corporation, January 1993,
        Chapter 2 "System Module Firmware", p. 2-5
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Fixes: b93ddc4f9156 ("mips: Reserve memory for the kernel image resources")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit 73597ab2a9b9ab069779aaf1ef8551b8569247e6
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Wed Oct 7 17:18:33 2020 +0530

    powerpc/drmem: Make lmb_size 64 bit
    
    commit ec72024e35dddb88a81e40071c87ceb18b5ee835 upstream.
    
    Similar to commit 89c140bbaeee ("pseries: Fix 64 bit logical memory block panic")
    make sure different variables tracking lmb_size are updated to be 64 bit.
    
    This was found by code audit.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Acked-by: Nathan Lynch <nathanl@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201007114836.282468-2-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 829c0a9634b916487969edde88a06039fd26f349
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:41 2020 +0100

    iio:gyro:itg3200: Fix timestamp alignment and prevent data leak.
    
    commit 10ab7cfd5522f0041028556dac864a003e158556 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 16 byte array of smaller elements on the stack.
    This is fixed by using an explicit c structure. As there are no
    holes in the structure, there is no possiblity of data leakage
    in this case.
    
    The explicit alignment of ts is not strictly necessary but potentially
    makes the code slightly less fragile.  It also removes the possibility
    of this being cut and paste into another driver where the alignment
    isn't already true.
    
    Fixes: 36e0371e7764 ("iio:itg3200: Use iio_push_to_buffers_with_timestamp()")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-6-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f4f75df4b47f4f1e6c153f822e747297882621c
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:51:01 2020 +0100

    iio:adc:ti-adc12138 Fix alignment issue with timestamp
    
    commit 293e809b2e8e608b65a949101aaf7c0bd1224247 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    
    We move to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak apart from previous readings. Note that previously
    no leak at all could occur, but previous readings should never
    be a problem.
    
    In this case the timestamp location depends on what other channels
    are enabled. As such we can't use a structure without misleading
    by suggesting only one possible timestamp location.
    
    Fixes: 50a6edb1b6e0 ("iio: adc: add ADC12130/ADC12132/ADC12138 ADC driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-26-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96a5134423ae881f01076922914f4e2cd845c1e7
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:51:00 2020 +0100

    iio:adc:ti-adc0832 Fix alignment issue with timestamp
    
    commit 39e91f3be4cba51c1560bcda3a343ed1f64dc916 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    
    We fix this issues by moving to a suitable structure in the iio_priv()
    data with alignment explicitly requested.  This data is allocated
    with kzalloc so no data can leak apart from previous readings.
    Note that previously no data could leak 'including' previous readings
    but I don't think it is an issue to potentially leak them like
    this now does.
    
    In this case the postioning of the timestamp is depends on what
    other channels are enabled. As such we cannot use a structure to
    make the alignment explicit as it would be missleading by suggesting
    only one possible location for the timestamp.
    
    Fixes: 815bbc87462a ("iio: ti-adc0832: add triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-25-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8c59abdbc6b0c93235f699f4d68740e67d6d646
Author: Tobias Jordan <kernel@cdqe.de>
Date:   Sat Sep 26 18:19:46 2020 +0200

    iio: adc: gyroadc: fix leak of device node iterator
    
    commit da4410d4078ba4ead9d6f1027d6db77c5a74ecee upstream.
    
    Add missing of_node_put calls when exiting the for_each_child_of_node
    loop in rcar_gyroadc_parse_subdevs early.
    
    Also add goto-exception handling for the error paths in that loop.
    
    Fixes: 059c53b32329 ("iio: adc: Add Renesas GyroADC driver")
    Signed-off-by: Tobias Jordan <kernel@cdqe.de>
    Link: https://lore.kernel.org/r/20200926161946.GA10240@agrajag.zerfleddert.de
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad877be5b983a740800e02ec5bb70f4f1ddf4c94
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:44 2020 +0100

    iio:light:si1145: Fix timestamp alignment and prevent data leak.
    
    commit 0456ecf34d466261970e0ff92b2b9c78a4908637 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 24 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable array in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    Depending on the enabled channels, the  location of the timestamp
    can be at various aligned offsets through the buffer.  As such we
    any use of a structure to enforce this alignment would incorrectly
    suggest a single location for the timestamp.  Comments adjusted to
    express this clearly in the code.
    
    Fixes: ac45e57f1590 ("iio: light: Add driver for Silabs si1132, si1141/2/3 and si1145/6/7 ambient light, uv index and proximity sensors")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-9-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4f02a81c7e6ce74be47ff7ba45b60c39e82eb5b
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sun Oct 4 16:03:07 2020 +0200

    dmaengine: dma-jz4780: Fix race in jz4780_dma_tx_status
    
    commit baf6fd97b16ea8f981b8a8b04039596f32fc2972 upstream.
    
    The jz4780_dma_tx_status() function would check if a channel's cookie
    state was set to 'completed', and if not, it would enter the critical
    section. However, in that time frame, the jz4780_dma_chan_irq() function
    was able to set the cookie to 'completed', and clear the jzchan->vchan
    pointer, which was deferenced in the critical section of the first
    function.
    
    Fix this race by checking the channel's cookie state after entering the
    critical function and not before.
    
    Fixes: d894fc6046fe ("dmaengine: jz4780: add driver for the Ingenic JZ4780 DMA controller")
    Cc: stable@vger.kernel.org # v4.0
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Reported-by: Artur Rojek <contact@artur-rojek.eu>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Link: https://lore.kernel.org/r/20201004140307.885556-1-paul@crapouillou.net
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f707ccb2f10cb7c6388f8ba8ffab1c38b47c02d8
Author: Jan Kara <jack@suse.cz>
Date:   Tue Sep 22 12:20:14 2020 +0200

    udf: Fix memory leak when mounting
    
    commit a7be300de800e755714c71103ae4a0d205e41e99 upstream.
    
    udf_process_sequence() allocates temporary array for processing
    partition descriptors on volume which it fails to free. Free the array
    when it is not needed anymore.
    
    Fixes: 7b78fd02fb19 ("udf: Fix handling of Partition Descriptors")
    CC: stable@vger.kernel.org
    Reported-by: syzbot+128f4dd6e796c98b3760@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93da9dcee2d2de4b59066fc36741a63d9c906292
Author: Jason Gerecke <jason.gerecke@wacom.com>
Date:   Wed Sep 23 13:14:56 2020 -0700

    HID: wacom: Avoid entering wacom_wac_pen_report for pad / battery
    
    commit d9216d753b2b1406b801243b12aaf00a5ce5b861 upstream.
    
    It has recently been reported that the "heartbeat" report from devices
    like the 2nd-gen Intuos Pro (PTH-460, PTH-660, PTH-860) or the 2nd-gen
    Bluetooth-enabled Intuos tablets (CTL-4100WL, CTL-6100WL) can cause the
    driver to send a spurious BTN_TOUCH=0 once per second in the middle of
    drawing. This can result in broken lines while drawing on Chrome OS.
    
    The source of the issue has been traced back to a change which modified
    the driver to only call `wacom_wac_pad_report()` once per report instead
    of once per collection. As part of this change, pad-handling code was
    removed from `wacom_wac_collection()` under the assumption that the
    `WACOM_PEN_FIELD` and `WACOM_TOUCH_FIELD` checks would not be satisfied
    when a pad or battery collection was being processed.
    
    To be clear, the macros `WACOM_PAD_FIELD` and `WACOM_PEN_FIELD` do not
    currently check exclusive conditions. In fact, most "pad" fields will
    also appear to be "pen" fields simply due to their presence inside of
    a Digitizer application collection. Because of this, the removal of
    the check from `wacom_wac_collection()` just causes pad / battery
    collections to instead trigger a call to `wacom_wac_pen_report()`
    instead. The pen report function in turn resets the tip switch state
    just prior to exiting, resulting in the observed BTN_TOUCH=0 symptom.
    
    To correct this, we restore a version of the `WACOM_PAD_FIELD` check
    in `wacom_wac_collection()` and return early. This effectively prevents
    pad / battery collections from being reported until the very end of the
    report as originally intended.
    
    Fixes: d4b8efeb46d9 ("HID: wacom: generic: Correct pad syncing")
    Cc: stable@vger.kernel.org # v4.17+
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Tested-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87d398f348b8a2d5246d3670a93fb63d4fd9f62a
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Mon Oct 19 10:55:17 2020 +0200

    vt: keyboard, extend func_buf_lock to readers
    
    commit 82e61c3909db51d91b9d3e2071557b6435018b80 upstream.
    
    Both read-side users of func_table/func_buf need locking. Without that,
    one can easily confuse the code by repeatedly setting altering strings
    like:
    while (1)
            for (a = 0; a < 2; a++) {
                    struct kbsentry kbs = {};
                    strcpy((char *)kbs.kb_string, a ? ".\n" : "88888\n");
                    ioctl(fd, KDSKBSENT, &kbs);
            }
    
    When that program runs, one can get unexpected output by holding F1
    (note the unxpected period on the last line):
    .
    88888
    .8888
    
    So protect all accesses to 'func_table' (and func_buf) by preexisting
    'func_buf_lock'.
    
    It is easy in 'k_fn' handler as 'puts_queue' is expected not to sleep.
    On the other hand, KDGKBSENT needs a local (atomic) copy of the string
    because copy_to_user can sleep. Use already allocated, but unused
    'kbs->kb_string' for that purpose.
    
    Note that the program above needs at least CAP_SYS_TTY_CONFIG.
    
    This depends on the previous patch and on the func_buf_lock lock added
    in commit 46ca3f735f34 (tty/vt: fix write/write race in ioctl(KDSKBSENT)
    handler) in 5.2.
    
    Likely fixes CVE-2020-25656.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20201019085517.10176-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb4c460e2e0628786872a85315ff310ddaebed24
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Mon Oct 19 10:55:16 2020 +0200

    vt: keyboard, simplify vt_kdgkbsent
    
    commit 6ca03f90527e499dd5e32d6522909e2ad390896b upstream.
    
    Use 'strlen' of the string, add one for NUL terminator and simply do
    'copy_to_user' instead of the explicit 'for' loop. This makes the
    KDGKBSENT case more compact.
    
    The only thing we need to take care about is NULL 'func_table[i]'. Use
    an empty string in that case.
    
    The original check for overflow could never trigger as the func_buf
    strings are always shorter or equal to 'struct kbsentry's.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20201019085517.10176-1-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c16ca600657820b95ded8bb8d07136329c86036
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Oct 19 11:15:23 2020 +0100

    drm/i915: Force VT'd workarounds when running as a guest OS
    
    commit 8195400f7ea95399f721ad21f4d663a62c65036f upstream.
    
    If i915.ko is being used as a passthrough device, it does not know if
    the host is using intel_iommu. Mixing the iommu and gfx causes a few
    issues (such as scanout overfetch) which we need to workaround inside
    the driver, so if we detect we are running under a hypervisor, also
    assume the device access is being virtualised.
    
    Reported-by: Stefan Fritsch <sf@sfritsch.de>
    Suggested-by: Stefan Fritsch <sf@sfritsch.de>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Stefan Fritsch <sf@sfritsch.de>
    Cc: stable@vger.kernel.org
    Tested-by: Stefan Fritsch <sf@sfritsch.de>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201019101523.4145-1-chris@chris-wilson.co.uk
    (cherry picked from commit f566fdcd6cc49a9d5b5d782f56e3e7cb243f01b8)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94478c1dc57d88413c7927a303522eafad83c1dc
Author: Ran Wang <ran.wang_1@nxp.com>
Date:   Sat Oct 10 14:03:08 2020 +0800

    usb: host: fsl-mph-dr-of: check return of dma_set_mask()
    
    commit 3cd54a618834430a26a648d880dd83d740f2ae30 upstream.
    
    fsl_usb2_device_register() should stop init if dma_set_mask() return
    error.
    
    Fixes: cae058610465 ("drivers/usb/host: fsl: Set DMA_MASK of usb platform device")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Ran Wang <ran.wang_1@nxp.com>
    Link: https://lore.kernel.org/r/20201010060308.33693-1-ran.wang_1@nxp.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75d0d4ff5970e613d636cf9448cd9fbd18826306
Author: Li Jun <jun.li@nxp.com>
Date:   Mon Oct 12 19:03:12 2020 +0800

    usb: typec: tcpm: reset hard_reset_count for any disconnect
    
    commit 2d9c6442a9c81f4f8dee678d0b3c183173ab1e2d upstream.
    
    Current tcpm_detach() only reset hard_reset_count if port->attached
    is true, this may cause this counter clear is missed if the CC
    disconnect event is generated after tcpm_port_reset() is done
    by other events, e.g. VBUS off comes first before CC disconect for
    a power sink, in that case the first tcpm_detach() will only clear
    port->attached flag but leave hard_reset_count there because
    tcpm_port_is_disconnected() is still false, then later tcpm_detach()
    by CC disconnect will directly return due to port->attached is cleared,
    finally this will result tcpm will not try hard reset or error recovery
    for later attach.
    
    ChiYuan reported this issue on his platform with below tcpm trace:
    After power sink session setup after hard reset 2 times, detach
    from the power source and then attach:
    [ 4848.046358] VBUS off
    [ 4848.046384] state change SNK_READY -> SNK_UNATTACHED
    [ 4848.050908] Setting voltage/current limit 0 mV 0 mA
    [ 4848.050936] polarity 0
    [ 4848.052593] Requesting mux state 0, usb-role 0, orientation 0
    [ 4848.053222] Start toggling
    [ 4848.086500] state change SNK_UNATTACHED -> TOGGLING
    [ 4848.089983] CC1: 0 -> 0, CC2: 3 -> 3 [state TOGGLING, polarity 0, connected]
    [ 4848.089993] state change TOGGLING -> SNK_ATTACH_WAIT
    [ 4848.090031] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @200 ms
    [ 4848.141162] CC1: 0 -> 0, CC2: 3 -> 0 [state SNK_ATTACH_WAIT, polarity 0, disconnected]
    [ 4848.141170] state change SNK_ATTACH_WAIT -> SNK_ATTACH_WAIT
    [ 4848.141184] pending state change SNK_ATTACH_WAIT -> SNK_UNATTACHED @20 ms
    [ 4848.163156] state change SNK_ATTACH_WAIT -> SNK_UNATTACHED [delayed 20 ms]
    [ 4848.163162] Start toggling
    [ 4848.216918] CC1: 0 -> 0, CC2: 0 -> 3 [state TOGGLING, polarity 0, connected]
    [ 4848.216954] state change TOGGLING -> SNK_ATTACH_WAIT
    [ 4848.217080] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @200 ms
    [ 4848.231771] CC1: 0 -> 0, CC2: 3 -> 0 [state SNK_ATTACH_WAIT, polarity 0, disconnected]
    [ 4848.231800] state change SNK_ATTACH_WAIT -> SNK_ATTACH_WAIT
    [ 4848.231857] pending state change SNK_ATTACH_WAIT -> SNK_UNATTACHED @20 ms
    [ 4848.256022] state change SNK_ATTACH_WAIT -> SNK_UNATTACHED [delayed20 ms]
    [ 4848.256049] Start toggling
    [ 4848.871148] VBUS on
    [ 4848.885324] CC1: 0 -> 0, CC2: 0 -> 3 [state TOGGLING, polarity 0, connected]
    [ 4848.885372] state change TOGGLING -> SNK_ATTACH_WAIT
    [ 4848.885548] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @200 ms
    [ 4849.088240] state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED [delayed200 ms]
    [ 4849.088284] state change SNK_DEBOUNCED -> SNK_ATTACHED
    [ 4849.088291] polarity 1
    [ 4849.088769] Requesting mux state 1, usb-role 2, orientation 2
    [ 4849.088895] state change SNK_ATTACHED -> SNK_STARTUP
    [ 4849.088907] state change SNK_STARTUP -> SNK_DISCOVERY
    [ 4849.088915] Setting voltage/current limit 5000 mV 0 mA
    [ 4849.088927] vbus=0 charge:=1
    [ 4849.090505] state change SNK_DISCOVERY -> SNK_WAIT_CAPABILITIES
    [ 4849.090828] pending state change SNK_WAIT_CAPABILITIES -> SNK_READY @240 ms
    [ 4849.335878] state change SNK_WAIT_CAPABILITIES -> SNK_READY [delayed240 ms]
    
    this patch fix this issue by clear hard_reset_count at any cases
    of cc disconnect, í.e. don't check port->attached flag.
    
    Fixes: 4b4e02c83167 ("typec: tcpm: Move out of staging")
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: ChiYuan Huang <cy_huang@richtek.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Link: https://lore.kernel.org/r/1602500592-3817-1-git-send-email-jun.li@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 543432d078c015a27e259032bac7ce90f3fe33e9
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Mon Oct 19 19:07:02 2020 +0200

    usb: cdc-acm: fix cooldown mechanism
    
    commit 38203b8385bf6283537162bde7d499f830964711 upstream.
    
    Commit a4e7279cd1d1 ("cdc-acm: introduce a cool down") is causing
    regression if there is some USB error, such as -EPROTO.
    
    This has been reported on some samples of the Odroid-N2 using the Combee II
    Zibgee USB dongle.
    
    > struct acm *acm = container_of(work, struct acm, work)
    
    is incorrect in case of a delayed work and causes warnings, usually from
    the workqueue:
    
    > WARNING: CPU: 0 PID: 0 at kernel/workqueue.c:1474 __queue_work+0x480/0x528.
    
    When this happens, USB eventually stops working completely after a while.
    Also the ACM_ERROR_DELAY bit is never set, so the cooldown mechanism
    previously introduced cannot be triggered and acm_submit_read_urb() is
    never called.
    
    This changes makes the cdc-acm driver use a single delayed work, fixing the
    pointer arithmetic in acm_softint() and set the ACM_ERROR_DELAY when the
    cooldown mechanism appear to be needed.
    
    Fixes: a4e7279cd1d1 ("cdc-acm: introduce a cool down")
    Cc: Oliver Neukum <oneukum@suse.com>
    Reported-by: Pascal Vizeli <pascal.vizeli@nabucasa.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20201019170702.150534-1-jbrunet@baylibre.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2850f148cd7fde40b24108a168ed84f58195314b
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Wed Sep 2 18:43:04 2020 -0700

    usb: dwc3: gadget: END_TRANSFER before CLEAR_STALL command
    
    commit d97c78a1908e59a1fdbcbece87cd0440b5d7a1f2 upstream.
    
    According the programming guide (for all DWC3 IPs), when the driver
    handles ClearFeature(halt) request, it should issue CLEAR_STALL command
    _after_ the END_TRANSFER command completes. The END_TRANSFER command may
    take some time to complete. So, delay the ClearFeature(halt) request
    control status stage and wait for END_TRANSFER command completion
    interrupt. Only after END_TRANSFER command completes that the driver
    may issue CLEAR_STALL command.
    
    Cc: stable@vger.kernel.org
    Fixes: cb11ea56f37a ("usb: dwc3: gadget: Properly handle ClearFeature(halt)")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 206dcd6ce82f1b5ae6f357694c3688693a1e22cd
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Wed Sep 2 18:42:58 2020 -0700

    usb: dwc3: gadget: Resume pending requests after CLEAR_STALL
    
    commit c503672abe1348f10f5a54a662336358c6e1a297 upstream.
    
    The function driver may queue new requests right after halting the
    endpoint (i.e. queue new requests while the endpoint is stalled).
    There's no restriction preventing it from doing so. However, dwc3
    currently drops those requests after CLEAR_STALL. The driver should only
    drop started requests. Keep the pending requests in the pending list to
    resume and process them after the host issues ClearFeature(Halt) to the
    endpoint.
    
    Cc: stable@vger.kernel.org
    Fixes: cb11ea56f37a ("usb: dwc3: gadget: Properly handle ClearFeature(halt)")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97224cdc0440b006b60239b90cd2c1ffb8bb23aa
Author: Li Jun <jun.li@nxp.com>
Date:   Tue Jul 28 20:42:40 2020 +0800

    usb: dwc3: core: don't trigger runtime pm when remove driver
    
    commit 266d0493900ac5d6a21cdbe6b1624ed2da94d47a upstream.
    
    No need to trigger runtime pm in driver removal, otherwise if user
    disable auto suspend via sys file, runtime suspend may be entered,
    which will call dwc3_core_exit() again and there will be clock disable
    not balance warning:
    
    [ 2026.820154] xhci-hcd xhci-hcd.0.auto: remove, state 4
    [ 2026.825268] usb usb2: USB disconnect, device number 1
    [ 2026.831017] xhci-hcd xhci-hcd.0.auto: USB bus 2 deregistered
    [ 2026.836806] xhci-hcd xhci-hcd.0.auto: remove, state 4
    [ 2026.842029] usb usb1: USB disconnect, device number 1
    [ 2026.848029] xhci-hcd xhci-hcd.0.auto: USB bus 1 deregistered
    [ 2026.865889] ------------[ cut here ]------------
    [ 2026.870506] usb2_ctrl_root_clk already disabled
    [ 2026.875082] WARNING: CPU: 0 PID: 731 at drivers/clk/clk.c:958
    clk_core_disable+0xa0/0xa8
    [ 2026.883170] Modules linked in: dwc3(-) phy_fsl_imx8mq_usb [last
    unloaded: dwc3]
    [ 2026.890488] CPU: 0 PID: 731 Comm: rmmod Not tainted
    5.8.0-rc7-00280-g9d08cca-dirty #245
    [ 2026.898489] Hardware name: NXP i.MX8MQ EVK (DT)
    [ 2026.903020] pstate: 20000085 (nzCv daIf -PAN -UAO BTYPE=--)
    [ 2026.908594] pc : clk_core_disable+0xa0/0xa8
    [ 2026.912777] lr : clk_core_disable+0xa0/0xa8
    [ 2026.916958] sp : ffff8000121b39a0
    [ 2026.920271] x29: ffff8000121b39a0 x28: ffff0000b11f3700
    [ 2026.925583] x27: 0000000000000000 x26: ffff0000b539c700
    [ 2026.930895] x25: 000001d7e44e1232 x24: ffff0000b76fa800
    [ 2026.936208] x23: ffff0000b76fa6f8 x22: ffff800008d01040
    [ 2026.941520] x21: ffff0000b539ce00 x20: ffff0000b7105000
    [ 2026.946832] x19: ffff0000b7105000 x18: 0000000000000010
    [ 2026.952144] x17: 0000000000000001 x16: 0000000000000000
    [ 2026.957456] x15: ffff0000b11f3b70 x14: ffffffffffffffff
    [ 2026.962768] x13: ffff8000921b36f7 x12: ffff8000121b36ff
    [ 2026.968080] x11: ffff8000119e1000 x10: ffff800011bf26d0
    [ 2026.973392] x9 : 0000000000000000 x8 : ffff800011bf3000
    [ 2026.978704] x7 : ffff800010695d68 x6 : 0000000000000252
    [ 2026.984016] x5 : ffff0000bb9881f0 x4 : 0000000000000000
    [ 2026.989327] x3 : 0000000000000027 x2 : 0000000000000023
    [ 2026.994639] x1 : ac2fa471aa7cab00 x0 : 0000000000000000
    [ 2026.999951] Call trace:
    [ 2027.002401]  clk_core_disable+0xa0/0xa8
    [ 2027.006238]  clk_core_disable_lock+0x20/0x38
    [ 2027.010508]  clk_disable+0x1c/0x28
    [ 2027.013911]  clk_bulk_disable+0x34/0x50
    [ 2027.017758]  dwc3_core_exit+0xec/0x110 [dwc3]
    [ 2027.022122]  dwc3_suspend_common+0x84/0x188 [dwc3]
    [ 2027.026919]  dwc3_runtime_suspend+0x74/0x9c [dwc3]
    [ 2027.031712]  pm_generic_runtime_suspend+0x28/0x40
    [ 2027.036419]  genpd_runtime_suspend+0xa0/0x258
    [ 2027.040777]  __rpm_callback+0x88/0x140
    [ 2027.044526]  rpm_callback+0x20/0x80
    [ 2027.048015]  rpm_suspend+0xd0/0x418
    [ 2027.051503]  __pm_runtime_suspend+0x58/0xa0
    [ 2027.055693]  dwc3_runtime_idle+0x7c/0x90 [dwc3]
    [ 2027.060224]  __rpm_callback+0x88/0x140
    [ 2027.063973]  rpm_idle+0x78/0x150
    [ 2027.067201]  __pm_runtime_idle+0x58/0xa0
    [ 2027.071130]  dwc3_remove+0x64/0xc0 [dwc3]
    [ 2027.075140]  platform_drv_remove+0x28/0x48
    [ 2027.079239]  device_release_driver_internal+0xf4/0x1c0
    [ 2027.084377]  driver_detach+0x4c/0xd8
    [ 2027.087954]  bus_remove_driver+0x54/0xa8
    [ 2027.091877]  driver_unregister+0x2c/0x58
    [ 2027.095799]  platform_driver_unregister+0x10/0x18
    [ 2027.100509]  dwc3_driver_exit+0x14/0x1408 [dwc3]
    [ 2027.105129]  __arm64_sys_delete_module+0x178/0x218
    [ 2027.109922]  el0_svc_common.constprop.0+0x68/0x160
    [ 2027.114714]  do_el0_svc+0x20/0x80
    [ 2027.118031]  el0_sync_handler+0x88/0x190
    [ 2027.121953]  el0_sync+0x140/0x180
    [ 2027.125267] ---[ end trace 027f4f8189958f1f ]---
    [ 2027.129976] ------------[ cut here ]------------
    
    Fixes: fc8bb91bc83e ("usb: dwc3: implement runtime PM")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 726f638e7cd1ac994db3fbe5817f9c0f186e9196
Author: Li Jun <jun.li@nxp.com>
Date:   Tue Jul 28 20:42:41 2020 +0800

    usb: dwc3: core: add phy cleanup for probe error handling
    
    commit 03c1fd622f72c7624c81b64fdba4a567ae5ee9cb upstream.
    
    Add the phy cleanup if dwc3 mode init fail, which is the missing part of
    de-init for dwc3 core init.
    
    Fixes: c499ff71ff2a ("usb: dwc3: core: re-factor init and exit paths")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f935b70cf724ba77f21189e0335954c75804451e
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Sep 24 01:21:18 2020 -0700

    usb: dwc3: gadget: Check MPS of the request length
    
    commit ca3df3468eec87f6374662f7de425bc44c3810c1 upstream.
    
    When preparing for SG, not all the entries are prepared at once. When
    resume, don't use the remaining request length to calculate for MPS
    alignment. Use the entire request->length to do that.
    
    Cc: stable@vger.kernel.org
    Fixes: 5d187c0454ef ("usb: dwc3: gadget: Don't setup more than requested")
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c9e86c933eaf0bcd579f26453f76e1114a8d834
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Sep 24 01:21:43 2020 -0700

    usb: dwc3: ep0: Fix ZLP for OUT ep0 requests
    
    commit 66706077dc89c66a4777a4c6298273816afb848c upstream.
    
    The current ZLP handling for ep0 requests is only for control IN
    requests. For OUT direction, DWC3 needs to check and setup for MPS
    alignment.
    
    Usually, control OUT requests can indicate its transfer size via the
    wLength field of the control message. So usb_request->zero is usually
    not needed for OUT direction. To handle ZLP OUT for control endpoint,
    make sure the TRB is MPS size.
    
    Cc: stable@vger.kernel.org
    Fixes: c7fcdeb2627c ("usb: dwc3: ep0: simplify EP0 state machine")
    Fixes: d6e5a549cc4d ("usb: dwc3: simplify ZLP handling")
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3468cbceb563ac37cc7e96c87bc9fd1931d2b297
Author: Raymond Tan <raymond.tan@intel.com>
Date:   Fri Aug 21 16:11:01 2020 +0300

    usb: dwc3: pci: Allow Elkhart Lake to utilize DSM method for PM functionality
    
    commit a609ce2a13360d639b384b6ca783b38c1247f2db upstream.
    
    Similar to some other IA platforms, Elkhart Lake too depends on the
    PMU register write to request transition of Dx power state.
    
    Thus, we add the PCI_DEVICE_ID_INTEL_EHLLP to the list of devices that
    shall execute the ACPI _DSM method during D0/D3 sequence.
    
    [heikki.krogerus@linux.intel.com: included Fixes tag]
    
    Fixes: dbb0569de852 ("usb: dwc3: pci: Add Support for Intel Elkhart Lake Devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Raymond Tan <raymond.tan@intel.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2600a131e1f619769bb6970a5d73474466f1c78d
Author: Sandeep Singh <sandeep.singh@amd.com>
Date:   Wed Oct 28 22:31:23 2020 +0200

    usb: xhci: Workaround for S3 issue on AMD SNPS 3.0 xHC
    
    commit 2a632815683d2d34df52b701a36fe5ac6654e719 upstream.
    
    On some platform of AMD, S3 fails with HCE and SRE errors. To fix this,
    need to disable a bit which is enable in sparse controller.
    
    Cc: stable@vger.kernel.org #v4.19+
    Signed-off-by: Sanket Goswami <Sanket.Goswami@amd.com>
    Signed-off-by: Sandeep Singh <sandeep.singh@amd.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20201028203124.375344-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c964d386e84918522c8d2f36e5c1d2ae6ec1ec20
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 12 11:55:24 2020 +0100

    btrfs: fix readahead hang and use-after-free after removing a device
    
    commit 66d204a16c94f24ad08290a7663ab67e7fc04e82 upstream.
    
    Very sporadically I had test case btrfs/069 from fstests hanging (for
    years, it is not a recent regression), with the following traces in
    dmesg/syslog:
    
      [162301.160628] BTRFS info (device sdc): dev_replace from /dev/sdd (devid 2) to /dev/sdg started
      [162301.181196] BTRFS info (device sdc): scrub: finished on devid 4 with status: 0
      [162301.287162] BTRFS info (device sdc): dev_replace from /dev/sdd (devid 2) to /dev/sdg finished
      [162513.513792] INFO: task btrfs-transacti:1356167 blocked for more than 120 seconds.
      [162513.514318]       Not tainted 5.9.0-rc6-btrfs-next-69 #1
      [162513.514522] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [162513.514747] task:btrfs-transacti state:D stack:    0 pid:1356167 ppid:     2 flags:0x00004000
      [162513.514751] Call Trace:
      [162513.514761]  __schedule+0x5ce/0xd00
      [162513.514765]  ? _raw_spin_unlock_irqrestore+0x3c/0x60
      [162513.514771]  schedule+0x46/0xf0
      [162513.514844]  wait_current_trans+0xde/0x140 [btrfs]
      [162513.514850]  ? finish_wait+0x90/0x90
      [162513.514864]  start_transaction+0x37c/0x5f0 [btrfs]
      [162513.514879]  transaction_kthread+0xa4/0x170 [btrfs]
      [162513.514891]  ? btrfs_cleanup_transaction+0x660/0x660 [btrfs]
      [162513.514894]  kthread+0x153/0x170
      [162513.514897]  ? kthread_stop+0x2c0/0x2c0
      [162513.514902]  ret_from_fork+0x22/0x30
      [162513.514916] INFO: task fsstress:1356184 blocked for more than 120 seconds.
      [162513.515192]       Not tainted 5.9.0-rc6-btrfs-next-69 #1
      [162513.515431] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [162513.515680] task:fsstress        state:D stack:    0 pid:1356184 ppid:1356177 flags:0x00004000
      [162513.515682] Call Trace:
      [162513.515688]  __schedule+0x5ce/0xd00
      [162513.515691]  ? _raw_spin_unlock_irqrestore+0x3c/0x60
      [162513.515697]  schedule+0x46/0xf0
      [162513.515712]  wait_current_trans+0xde/0x140 [btrfs]
      [162513.515716]  ? finish_wait+0x90/0x90
      [162513.515729]  start_transaction+0x37c/0x5f0 [btrfs]
      [162513.515743]  btrfs_attach_transaction_barrier+0x1f/0x50 [btrfs]
      [162513.515753]  btrfs_sync_fs+0x61/0x1c0 [btrfs]
      [162513.515758]  ? __ia32_sys_fdatasync+0x20/0x20
      [162513.515761]  iterate_supers+0x87/0xf0
      [162513.515765]  ksys_sync+0x60/0xb0
      [162513.515768]  __do_sys_sync+0xa/0x10
      [162513.515771]  do_syscall_64+0x33/0x80
      [162513.515774]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [162513.515781] RIP: 0033:0x7f5238f50bd7
      [162513.515782] Code: Bad RIP value.
      [162513.515784] RSP: 002b:00007fff67b978e8 EFLAGS: 00000206 ORIG_RAX: 00000000000000a2
      [162513.515786] RAX: ffffffffffffffda RBX: 000055b1fad2c560 RCX: 00007f5238f50bd7
      [162513.515788] RDX: 00000000ffffffff RSI: 000000000daf0e74 RDI: 000000000000003a
      [162513.515789] RBP: 0000000000000032 R08: 000000000000000a R09: 00007f5239019be0
      [162513.515791] R10: fffffffffffff24f R11: 0000000000000206 R12: 000000000000003a
      [162513.515792] R13: 00007fff67b97950 R14: 00007fff67b97906 R15: 000055b1fad1a340
      [162513.515804] INFO: task fsstress:1356185 blocked for more than 120 seconds.
      [162513.516064]       Not tainted 5.9.0-rc6-btrfs-next-69 #1
      [162513.516329] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [162513.516617] task:fsstress        state:D stack:    0 pid:1356185 ppid:1356177 flags:0x00000000
      [162513.516620] Call Trace:
      [162513.516625]  __schedule+0x5ce/0xd00
      [162513.516628]  ? _raw_spin_unlock_irqrestore+0x3c/0x60
      [162513.516634]  schedule+0x46/0xf0
      [162513.516647]  wait_current_trans+0xde/0x140 [btrfs]
      [162513.516650]  ? finish_wait+0x90/0x90
      [162513.516662]  start_transaction+0x4d7/0x5f0 [btrfs]
      [162513.516679]  btrfs_setxattr_trans+0x3c/0x100 [btrfs]
      [162513.516686]  __vfs_setxattr+0x66/0x80
      [162513.516691]  __vfs_setxattr_noperm+0x70/0x200
      [162513.516697]  vfs_setxattr+0x6b/0x120
      [162513.516703]  setxattr+0x125/0x240
      [162513.516709]  ? lock_acquire+0xb1/0x480
      [162513.516712]  ? mnt_want_write+0x20/0x50
      [162513.516721]  ? rcu_read_lock_any_held+0x8e/0xb0
      [162513.516723]  ? preempt_count_add+0x49/0xa0
      [162513.516725]  ? __sb_start_write+0x19b/0x290
      [162513.516727]  ? preempt_count_add+0x49/0xa0
      [162513.516732]  path_setxattr+0xba/0xd0
      [162513.516739]  __x64_sys_setxattr+0x27/0x30
      [162513.516741]  do_syscall_64+0x33/0x80
      [162513.516743]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [162513.516745] RIP: 0033:0x7f5238f56d5a
      [162513.516746] Code: Bad RIP value.
      [162513.516748] RSP: 002b:00007fff67b97868 EFLAGS: 00000202 ORIG_RAX: 00000000000000bc
      [162513.516750] RAX: ffffffffffffffda RBX: 0000000000000001 RCX: 00007f5238f56d5a
      [162513.516751] RDX: 000055b1fbb0d5a0 RSI: 00007fff67b978a0 RDI: 000055b1fbb0d470
      [162513.516753] RBP: 000055b1fbb0d5a0 R08: 0000000000000001 R09: 00007fff67b97700
      [162513.516754] R10: 0000000000000004 R11: 0000000000000202 R12: 0000000000000004
      [162513.516756] R13: 0000000000000024 R14: 0000000000000001 R15: 00007fff67b978a0
      [162513.516767] INFO: task fsstress:1356196 blocked for more than 120 seconds.
      [162513.517064]       Not tainted 5.9.0-rc6-btrfs-next-69 #1
      [162513.517365] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [162513.517763] task:fsstress        state:D stack:    0 pid:1356196 ppid:1356177 flags:0x00004000
      [162513.517780] Call Trace:
      [162513.517786]  __schedule+0x5ce/0xd00
      [162513.517789]  ? _raw_spin_unlock_irqrestore+0x3c/0x60
      [162513.517796]  schedule+0x46/0xf0
      [162513.517810]  wait_current_trans+0xde/0x140 [btrfs]
      [162513.517814]  ? finish_wait+0x90/0x90
      [162513.517829]  start_transaction+0x37c/0x5f0 [btrfs]
      [162513.517845]  btrfs_attach_transaction_barrier+0x1f/0x50 [btrfs]
      [162513.517857]  btrfs_sync_fs+0x61/0x1c0 [btrfs]
      [162513.517862]  ? __ia32_sys_fdatasync+0x20/0x20
      [162513.517865]  iterate_supers+0x87/0xf0
      [162513.517869]  ksys_sync+0x60/0xb0
      [162513.517872]  __do_sys_sync+0xa/0x10
      [162513.517875]  do_syscall_64+0x33/0x80
      [162513.517878]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [162513.517881] RIP: 0033:0x7f5238f50bd7
      [162513.517883] Code: Bad RIP value.
      [162513.517885] RSP: 002b:00007fff67b978e8 EFLAGS: 00000206 ORIG_RAX: 00000000000000a2
      [162513.517887] RAX: ffffffffffffffda RBX: 000055b1fad2c560 RCX: 00007f5238f50bd7
      [162513.517889] RDX: 0000000000000000 RSI: 000000007660add2 RDI: 0000000000000053
      [162513.517891] RBP: 0000000000000032 R08: 0000000000000067 R09: 00007f5239019be0
      [162513.517893] R10: fffffffffffff24f R11: 0000000000000206 R12: 0000000000000053
      [162513.517895] R13: 00007fff67b97950 R14: 00007fff67b97906 R15: 000055b1fad1a340
      [162513.517908] INFO: task fsstress:1356197 blocked for more than 120 seconds.
      [162513.518298]       Not tainted 5.9.0-rc6-btrfs-next-69 #1
      [162513.518672] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [162513.519157] task:fsstress        state:D stack:    0 pid:1356197 ppid:1356177 flags:0x00000000
      [162513.519160] Call Trace:
      [162513.519165]  __schedule+0x5ce/0xd00
      [162513.519168]  ? _raw_spin_unlock_irqrestore+0x3c/0x60
      [162513.519174]  schedule+0x46/0xf0
      [162513.519190]  wait_current_trans+0xde/0x140 [btrfs]
      [162513.519193]  ? finish_wait+0x90/0x90
      [162513.519206]  start_transaction+0x4d7/0x5f0 [btrfs]
      [162513.519222]  btrfs_create+0x57/0x200 [btrfs]
      [162513.519230]  lookup_open+0x522/0x650
      [162513.519246]  path_openat+0x2b8/0xa50
      [162513.519270]  do_filp_open+0x91/0x100
      [162513.519275]  ? find_held_lock+0x32/0x90
      [162513.519280]  ? lock_acquired+0x33b/0x470
      [162513.519285]  ? do_raw_spin_unlock+0x4b/0xc0
      [162513.519287]  ? _raw_spin_unlock+0x29/0x40
      [162513.519295]  do_sys_openat2+0x20d/0x2d0
      [162513.519300]  do_sys_open+0x44/0x80
      [162513.519304]  do_syscall_64+0x33/0x80
      [162513.519307]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [162513.519309] RIP: 0033:0x7f5238f4a903
      [162513.519310] Code: Bad RIP value.
      [162513.519312] RSP: 002b:00007fff67b97758 EFLAGS: 00000246 ORIG_RAX: 0000000000000055
      [162513.519314] RAX: ffffffffffffffda RBX: 00000000ffffffff RCX: 00007f5238f4a903
      [162513.519316] RDX: 0000000000000000 RSI: 00000000000001b6 RDI: 000055b1fbb0d470
      [162513.519317] RBP: 00007fff67b978c0 R08: 0000000000000001 R09: 0000000000000002
      [162513.519319] R10: 00007fff67b974f7 R11: 0000000000000246 R12: 0000000000000013
      [162513.519320] R13: 00000000000001b6 R14: 00007fff67b97906 R15: 000055b1fad1c620
      [162513.519332] INFO: task btrfs:1356211 blocked for more than 120 seconds.
      [162513.519727]       Not tainted 5.9.0-rc6-btrfs-next-69 #1
      [162513.520115] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [162513.520508] task:btrfs           state:D stack:    0 pid:1356211 ppid:1356178 flags:0x00004002
      [162513.520511] Call Trace:
      [162513.520516]  __schedule+0x5ce/0xd00
      [162513.520519]  ? _raw_spin_unlock_irqrestore+0x3c/0x60
      [162513.520525]  schedule+0x46/0xf0
      [162513.520544]  btrfs_scrub_pause+0x11f/0x180 [btrfs]
      [162513.520548]  ? finish_wait+0x90/0x90
      [162513.520562]  btrfs_commit_transaction+0x45a/0xc30 [btrfs]
      [162513.520574]  ? start_transaction+0xe0/0x5f0 [btrfs]
      [162513.520596]  btrfs_dev_replace_finishing+0x6d8/0x711 [btrfs]
      [162513.520619]  btrfs_dev_replace_by_ioctl.cold+0x1cc/0x1fd [btrfs]
      [162513.520639]  btrfs_ioctl+0x2a25/0x36f0 [btrfs]
      [162513.520643]  ? do_sigaction+0xf3/0x240
      [162513.520645]  ? find_held_lock+0x32/0x90
      [162513.520648]  ? do_sigaction+0xf3/0x240
      [162513.520651]  ? lock_acquired+0x33b/0x470
      [162513.520655]  ? _raw_spin_unlock_irq+0x24/0x50
      [162513.520657]  ? lockdep_hardirqs_on+0x7d/0x100
      [162513.520660]  ? _raw_spin_unlock_irq+0x35/0x50
      [162513.520662]  ? do_sigaction+0xf3/0x240
      [162513.520671]  ? __x64_sys_ioctl+0x83/0xb0
      [162513.520672]  __x64_sys_ioctl+0x83/0xb0
      [162513.520677]  do_syscall_64+0x33/0x80
      [162513.520679]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [162513.520681] RIP: 0033:0x7fc3cd307d87
      [162513.520682] Code: Bad RIP value.
      [162513.520684] RSP: 002b:00007ffe30a56bb8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
      [162513.520686] RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 00007fc3cd307d87
      [162513.520687] RDX: 00007ffe30a57a30 RSI: 00000000ca289435 RDI: 0000000000000003
      [162513.520689] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
      [162513.520690] R10: 0000000000000008 R11: 0000000000000202 R12: 0000000000000003
      [162513.520692] R13: 0000557323a212e0 R14: 00007ffe30a5a520 R15: 0000000000000001
      [162513.520703]
                      Showing all locks held in the system:
      [162513.520712] 1 lock held by khungtaskd/54:
      [162513.520713]  #0: ffffffffb40a91a0 (rcu_read_lock){....}-{1:2}, at: debug_show_all_locks+0x15/0x197
      [162513.520728] 1 lock held by in:imklog/596:
      [162513.520729]  #0: ffff8f3f0d781400 (&f->f_pos_lock){+.+.}-{3:3}, at: __fdget_pos+0x4d/0x60
      [162513.520782] 1 lock held by btrfs-transacti/1356167:
      [162513.520784]  #0: ffff8f3d810cc848 (&fs_info->transaction_kthread_mutex){+.+.}-{3:3}, at: transaction_kthread+0x4a/0x170 [btrfs]
      [162513.520798] 1 lock held by btrfs/1356190:
      [162513.520800]  #0: ffff8f3d57644470 (sb_writers#15){.+.+}-{0:0}, at: mnt_want_write_file+0x22/0x60
      [162513.520805] 1 lock held by fsstress/1356184:
      [162513.520806]  #0: ffff8f3d576440e8 (&type->s_umount_key#62){++++}-{3:3}, at: iterate_supers+0x6f/0xf0
      [162513.520811] 3 locks held by fsstress/1356185:
      [162513.520812]  #0: ffff8f3d57644470 (sb_writers#15){.+.+}-{0:0}, at: mnt_want_write+0x20/0x50
      [162513.520815]  #1: ffff8f3d80a650b8 (&type->i_mutex_dir_key#10){++++}-{3:3}, at: vfs_setxattr+0x50/0x120
      [162513.520820]  #2: ffff8f3d57644690 (sb_internal#2){.+.+}-{0:0}, at: start_transaction+0x40e/0x5f0 [btrfs]
      [162513.520833] 1 lock held by fsstress/1356196:
      [162513.520834]  #0: ffff8f3d576440e8 (&type->s_umount_key#62){++++}-{3:3}, at: iterate_supers+0x6f/0xf0
      [162513.520838] 3 locks held by fsstress/1356197:
      [162513.520839]  #0: ffff8f3d57644470 (sb_writers#15){.+.+}-{0:0}, at: mnt_want_write+0x20/0x50
      [162513.520843]  #1: ffff8f3d506465e8 (&type->i_mutex_dir_key#10){++++}-{3:3}, at: path_openat+0x2a7/0xa50
      [162513.520846]  #2: ffff8f3d57644690 (sb_internal#2){.+.+}-{0:0}, at: start_transaction+0x40e/0x5f0 [btrfs]
      [162513.520858] 2 locks held by btrfs/1356211:
      [162513.520859]  #0: ffff8f3d810cde30 (&fs_info->dev_replace.lock_finishing_cancel_unmount){+.+.}-{3:3}, at: btrfs_dev_replace_finishing+0x52/0x711 [btrfs]
      [162513.520877]  #1: ffff8f3d57644690 (sb_internal#2){.+.+}-{0:0}, at: start_transaction+0x40e/0x5f0 [btrfs]
    
    This was weird because the stack traces show that a transaction commit,
    triggered by a device replace operation, is blocking trying to pause any
    running scrubs but there are no stack traces of blocked tasks doing a
    scrub.
    
    After poking around with drgn, I noticed there was a scrub task that was
    constantly running and blocking for shorts periods of time:
    
      >>> t = find_task(prog, 1356190)
      >>> prog.stack_trace(t)
      #0  __schedule+0x5ce/0xcfc
      #1  schedule+0x46/0xe4
      #2  schedule_timeout+0x1df/0x475
      #3  btrfs_reada_wait+0xda/0x132
      #4  scrub_stripe+0x2a8/0x112f
      #5  scrub_chunk+0xcd/0x134
      #6  scrub_enumerate_chunks+0x29e/0x5ee
      #7  btrfs_scrub_dev+0x2d5/0x91b
      #8  btrfs_ioctl+0x7f5/0x36e7
      #9  __x64_sys_ioctl+0x83/0xb0
      #10 do_syscall_64+0x33/0x77
      #11 entry_SYSCALL_64+0x7c/0x156
    
    Which corresponds to:
    
    int btrfs_reada_wait(void *handle)
    {
        struct reada_control *rc = handle;
        struct btrfs_fs_info *fs_info = rc->fs_info;
    
        while (atomic_read(&rc->elems)) {
            if (!atomic_read(&fs_info->reada_works_cnt))
                reada_start_machine(fs_info);
            wait_event_timeout(rc->wait, atomic_read(&rc->elems) == 0,
                              (HZ + 9) / 10);
        }
    (...)
    
    So the counter "rc->elems" was set to 1 and never decreased to 0, causing
    the scrub task to loop forever in that function. Then I used the following
    script for drgn to check the readahead requests:
    
      $ cat dump_reada.py
      import sys
      import drgn
      from drgn import NULL, Object, cast, container_of, execscript, \
          reinterpret, sizeof
      from drgn.helpers.linux import *
    
      mnt_path = b"/home/fdmanana/btrfs-tests/scratch_1"
    
      mnt = None
      for mnt in for_each_mount(prog, dst = mnt_path):
          pass
    
      if mnt is None:
          sys.stderr.write(f'Error: mount point {mnt_path} not found\n')
          sys.exit(1)
    
      fs_info = cast('struct btrfs_fs_info *', mnt.mnt.mnt_sb.s_fs_info)
    
      def dump_re(re):
          nzones = re.nzones.value_()
          print(f're at {hex(re.value_())}')
          print(f'\t logical {re.logical.value_()}')
          print(f'\t refcnt {re.refcnt.value_()}')
          print(f'\t nzones {nzones}')
          for i in range(nzones):
              dev = re.zones[i].device
              name = dev.name.str.string_()
              print(f'\t\t dev id {dev.devid.value_()} name {name}')
          print()
    
      for _, e in radix_tree_for_each(fs_info.reada_tree):
          re = cast('struct reada_extent *', e)
          dump_re(re)
    
      $ drgn dump_reada.py
      re at 0xffff8f3da9d25ad8
              logical 38928384
              refcnt 1
              nzones 1
                     dev id 0 name b'/dev/sdd'
      $
    
    So there was one readahead extent with a single zone corresponding to the
    source device of that last device replace operation logged in dmesg/syslog.
    Also the ID of that zone's device was 0 which is a special value set in
    the source device of a device replace operation when the operation finishes
    (constant BTRFS_DEV_REPLACE_DEVID set at btrfs_dev_replace_finishing()),
    confirming again that device /dev/sdd was the source of a device replace
    operation.
    
    Normally there should be as many zones in the readahead extent as there are
    devices, and I wasn't expecting the extent to be in a block group with a
    'single' profile, so I went and confirmed with the following drgn script
    that there weren't any single profile block groups:
    
      $ cat dump_block_groups.py
      import sys
      import drgn
      from drgn import NULL, Object, cast, container_of, execscript, \
          reinterpret, sizeof
      from drgn.helpers.linux import *
    
      mnt_path = b"/home/fdmanana/btrfs-tests/scratch_1"
    
      mnt = None
      for mnt in for_each_mount(prog, dst = mnt_path):
          pass
    
      if mnt is None:
          sys.stderr.write(f'Error: mount point {mnt_path} not found\n')
          sys.exit(1)
    
      fs_info = cast('struct btrfs_fs_info *', mnt.mnt.mnt_sb.s_fs_info)
    
      BTRFS_BLOCK_GROUP_DATA = (1 << 0)
      BTRFS_BLOCK_GROUP_SYSTEM = (1 << 1)
      BTRFS_BLOCK_GROUP_METADATA = (1 << 2)
      BTRFS_BLOCK_GROUP_RAID0 = (1 << 3)
      BTRFS_BLOCK_GROUP_RAID1 = (1 << 4)
      BTRFS_BLOCK_GROUP_DUP = (1 << 5)
      BTRFS_BLOCK_GROUP_RAID10 = (1 << 6)
      BTRFS_BLOCK_GROUP_RAID5 = (1 << 7)
      BTRFS_BLOCK_GROUP_RAID6 = (1 << 8)
      BTRFS_BLOCK_GROUP_RAID1C3 = (1 << 9)
      BTRFS_BLOCK_GROUP_RAID1C4 = (1 << 10)
    
      def bg_flags_string(bg):
          flags = bg.flags.value_()
          ret = ''
          if flags & BTRFS_BLOCK_GROUP_DATA:
              ret = 'data'
          if flags & BTRFS_BLOCK_GROUP_METADATA:
              if len(ret) > 0:
                  ret += '|'
              ret += 'meta'
          if flags & BTRFS_BLOCK_GROUP_SYSTEM:
              if len(ret) > 0:
                  ret += '|'
              ret += 'system'
          if flags & BTRFS_BLOCK_GROUP_RAID0:
              ret += ' raid0'
          elif flags & BTRFS_BLOCK_GROUP_RAID1:
              ret += ' raid1'
          elif flags & BTRFS_BLOCK_GROUP_DUP:
              ret += ' dup'
          elif flags & BTRFS_BLOCK_GROUP_RAID10:
              ret += ' raid10'
          elif flags & BTRFS_BLOCK_GROUP_RAID5:
              ret += ' raid5'
          elif flags & BTRFS_BLOCK_GROUP_RAID6:
              ret += ' raid6'
          elif flags & BTRFS_BLOCK_GROUP_RAID1C3:
              ret += ' raid1c3'
          elif flags & BTRFS_BLOCK_GROUP_RAID1C4:
              ret += ' raid1c4'
          else:
              ret += ' single'
    
          return ret
    
      def dump_bg(bg):
          print()
          print(f'block group at {hex(bg.value_())}')
          print(f'\t start {bg.start.value_()} length {bg.length.value_()}')
          print(f'\t flags {bg.flags.value_()} - {bg_flags_string(bg)}')
    
      bg_root = fs_info.block_group_cache_tree.address_of_()
      for bg in rbtree_inorder_for_each_entry('struct btrfs_block_group', bg_root, 'cache_node'):
          dump_bg(bg)
    
      $ drgn dump_block_groups.py
    
      block group at 0xffff8f3d673b0400
             start 22020096 length 16777216
             flags 258 - system raid6
    
      block group at 0xffff8f3d53ddb400
             start 38797312 length 536870912
             flags 260 - meta raid6
    
      block group at 0xffff8f3d5f4d9c00
             start 575668224 length 2147483648
             flags 257 - data raid6
    
      block group at 0xffff8f3d08189000
             start 2723151872 length 67108864
             flags 258 - system raid6
    
      block group at 0xffff8f3db70ff000
             start 2790260736 length 1073741824
             flags 260 - meta raid6
    
      block group at 0xffff8f3d5f4dd800
             start 3864002560 length 67108864
             flags 258 - system raid6
    
      block group at 0xffff8f3d67037000
             start 3931111424 length 2147483648
             flags 257 - data raid6
      $
    
    So there were only 2 reasons left for having a readahead extent with a
    single zone: reada_find_zone(), called when creating a readahead extent,
    returned NULL either because we failed to find the corresponding block
    group or because a memory allocation failed. With some additional and
    custom tracing I figured out that on every further ocurrence of the
    problem the block group had just been deleted when we were looping to
    create the zones for the readahead extent (at reada_find_extent()), so we
    ended up with only one zone in the readahead extent, corresponding to a
    device that ends up getting replaced.
    
    So after figuring that out it became obvious why the hang happens:
    
    1) Task A starts a scrub on any device of the filesystem, except for
       device /dev/sdd;
    
    2) Task B starts a device replace with /dev/sdd as the source device;
    
    3) Task A calls btrfs_reada_add() from scrub_stripe() and it is currently
       starting to scrub a stripe from block group X. This call to
       btrfs_reada_add() is the one for the extent tree. When btrfs_reada_add()
       calls reada_add_block(), it passes the logical address of the extent
       tree's root node as its 'logical' argument - a value of 38928384;
    
    4) Task A then enters reada_find_extent(), called from reada_add_block().
       It finds there isn't any existing readahead extent for the logical
       address 38928384, so it proceeds to the path of creating a new one.
    
       It calls btrfs_map_block() to find out which stripes exist for the block
       group X. On the first iteration of the for loop that iterates over the
       stripes, it finds the stripe for device /dev/sdd, so it creates one
       zone for that device and adds it to the readahead extent. Before getting
       into the second iteration of the loop, the cleanup kthread deletes block
       group X because it was empty. So in the iterations for the remaining
       stripes it does not add more zones to the readahead extent, because the
       calls to reada_find_zone() returned NULL because they couldn't find
       block group X anymore.
    
       As a result the new readahead extent has a single zone, corresponding to
       the device /dev/sdd;
    
    4) Before task A returns to btrfs_reada_add() and queues the readahead job
       for the readahead work queue, task B finishes the device replace and at
       btrfs_dev_replace_finishing() swaps the device /dev/sdd with the new
       device /dev/sdg;
    
    5) Task A returns to reada_add_block(), which increments the counter
       "->elems" of the reada_control structure allocated at btrfs_reada_add().
    
       Then it returns back to btrfs_reada_add() and calls
       reada_start_machine(). This queues a job in the readahead work queue to
       run the function reada_start_machine_worker(), which calls
       __reada_start_machine().
    
       At __reada_start_machine() we take the device list mutex and for each
       device found in the current device list, we call
       reada_start_machine_dev() to start the readahead work. However at this
       point the device /dev/sdd was already freed and is not in the device
       list anymore.
    
       This means the corresponding readahead for the extent at 38928384 is
       never started, and therefore the "->elems" counter of the reada_control
       structure allocated at btrfs_reada_add() never goes down to 0, causing
       the call to btrfs_reada_wait(), done by the scrub task, to wait forever.
    
    Note that the readahead request can be made either after the device replace
    started or before it started, however in pratice it is very unlikely that a
    device replace is able to start after a readahead request is made and is
    able to complete before the readahead request completes - maybe only on a
    very small and nearly empty filesystem.
    
    This hang however is not the only problem we can have with readahead and
    device removals. When the readahead extent has other zones other than the
    one corresponding to the device that is being removed (either by a device
    replace or a device remove operation), we risk having a use-after-free on
    the device when dropping the last reference of the readahead extent.
    
    For example if we create a readahead extent with two zones, one for the
    device /dev/sdd and one for the device /dev/sde:
    
    1) Before the readahead worker starts, the device /dev/sdd is removed,
       and the corresponding btrfs_device structure is freed. However the
       readahead extent still has the zone pointing to the device structure;
    
    2) When the readahead worker starts, it only finds device /dev/sde in the
       current device list of the filesystem;
    
    3) It starts the readahead work, at reada_start_machine_dev(), using the
       device /dev/sde;
    
    4) Then when it finishes reading the extent from device /dev/sde, it calls
       __readahead_hook() which ends up dropping the last reference on the
       readahead extent through the last call to reada_extent_put();
    
    5) At reada_extent_put() it iterates over each zone of the readahead extent
       and attempts to delete an element from the device's 'reada_extents'
       radix tree, resulting in a use-after-free, as the device pointer of the
       zone for /dev/sdd is now stale. We can also access the device after
       dropping the last reference of a zone, through reada_zone_release(),
       also called by reada_extent_put().
    
    And a device remove suffers the same problem, however since it shrinks the
    device size down to zero before removing the device, it is very unlikely to
    still have readahead requests not completed by the time we free the device,
    the only possibility is if the device has a very little space allocated.
    
    While the hang problem is exclusive to scrub, since it is currently the
    only user of btrfs_reada_add() and btrfs_reada_wait(), the use-after-free
    problem affects any path that triggers readhead, which includes
    btree_readahead_hook() and __readahead_hook() (a readahead worker can
    trigger readahed for the children of a node) for example - any path that
    ends up calling reada_add_block() can trigger the use-after-free after a
    device is removed.
    
    So fix this by waiting for any readahead requests for a device to complete
    before removing a device, ensuring that while waiting for existing ones no
    new ones can be made.
    
    This problem has been around for a very long time - the readahead code was
    added in 2011, device remove exists since 2008 and device replace was
    introduced in 2013, hard to pick a specific commit for a git Fixes tag.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfda50e882f57c709ca91f5659af87e915e5af4e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 12 11:55:23 2020 +0100

    btrfs: fix use-after-free on readahead extent after failure to create it
    
    commit 83bc1560e02e25c6439341352024ebe8488f4fbd upstream.
    
    If we fail to find suitable zones for a new readahead extent, we end up
    leaving a stale pointer in the global readahead extents radix tree
    (fs_info->reada_tree), which can trigger the following trace later on:
    
      [13367.696354] BUG: kernel NULL pointer dereference, address: 00000000000000b0
      [13367.696802] #PF: supervisor read access in kernel mode
      [13367.697249] #PF: error_code(0x0000) - not-present page
      [13367.697721] PGD 0 P4D 0
      [13367.698171] Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      [13367.698632] CPU: 6 PID: 851214 Comm: btrfs Tainted: G        W         5.9.0-rc6-btrfs-next-69 #1
      [13367.699100] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      [13367.700069] RIP: 0010:__lock_acquire+0x20a/0x3970
      [13367.700562] Code: ff 1f 0f b7 c0 48 0f (...)
      [13367.701609] RSP: 0018:ffffb14448f57790 EFLAGS: 00010046
      [13367.702140] RAX: 0000000000000000 RBX: 29b935140c15e8cf RCX: 0000000000000000
      [13367.702698] RDX: 0000000000000002 RSI: ffffffffb3d66bd0 RDI: 0000000000000046
      [13367.703240] RBP: ffff8a52ba8ac040 R08: 00000c2866ad9288 R09: 0000000000000001
      [13367.703783] R10: 0000000000000001 R11: 00000000b66d9b53 R12: ffff8a52ba8ac9b0
      [13367.704330] R13: 0000000000000000 R14: ffff8a532b6333e8 R15: 0000000000000000
      [13367.704880] FS:  00007fe1df6b5700(0000) GS:ffff8a5376600000(0000) knlGS:0000000000000000
      [13367.705438] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [13367.705995] CR2: 00000000000000b0 CR3: 000000022cca8004 CR4: 00000000003706e0
      [13367.706565] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [13367.707127] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [13367.707686] Call Trace:
      [13367.708246]  ? ___slab_alloc+0x395/0x740
      [13367.708820]  ? reada_add_block+0xae/0xee0 [btrfs]
      [13367.709383]  lock_acquire+0xb1/0x480
      [13367.709955]  ? reada_add_block+0xe0/0xee0 [btrfs]
      [13367.710537]  ? reada_add_block+0xae/0xee0 [btrfs]
      [13367.711097]  ? rcu_read_lock_sched_held+0x5d/0x90
      [13367.711659]  ? kmem_cache_alloc_trace+0x8d2/0x990
      [13367.712221]  ? lock_acquired+0x33b/0x470
      [13367.712784]  _raw_spin_lock+0x34/0x80
      [13367.713356]  ? reada_add_block+0xe0/0xee0 [btrfs]
      [13367.713966]  reada_add_block+0xe0/0xee0 [btrfs]
      [13367.714529]  ? btrfs_root_node+0x15/0x1f0 [btrfs]
      [13367.715077]  btrfs_reada_add+0x117/0x170 [btrfs]
      [13367.715620]  scrub_stripe+0x21e/0x10d0 [btrfs]
      [13367.716141]  ? kvm_sched_clock_read+0x5/0x10
      [13367.716657]  ? __lock_acquire+0x41e/0x3970
      [13367.717184]  ? scrub_chunk+0x60/0x140 [btrfs]
      [13367.717697]  ? find_held_lock+0x32/0x90
      [13367.718254]  ? scrub_chunk+0x60/0x140 [btrfs]
      [13367.718773]  ? lock_acquired+0x33b/0x470
      [13367.719278]  ? scrub_chunk+0xcd/0x140 [btrfs]
      [13367.719786]  scrub_chunk+0xcd/0x140 [btrfs]
      [13367.720291]  scrub_enumerate_chunks+0x270/0x5c0 [btrfs]
      [13367.720787]  ? finish_wait+0x90/0x90
      [13367.721281]  btrfs_scrub_dev+0x1ee/0x620 [btrfs]
      [13367.721762]  ? rcu_read_lock_any_held+0x8e/0xb0
      [13367.722235]  ? preempt_count_add+0x49/0xa0
      [13367.722710]  ? __sb_start_write+0x19b/0x290
      [13367.723192]  btrfs_ioctl+0x7f5/0x36f0 [btrfs]
      [13367.723660]  ? __fget_files+0x101/0x1d0
      [13367.724118]  ? find_held_lock+0x32/0x90
      [13367.724559]  ? __fget_files+0x101/0x1d0
      [13367.724982]  ? __x64_sys_ioctl+0x83/0xb0
      [13367.725399]  __x64_sys_ioctl+0x83/0xb0
      [13367.725802]  do_syscall_64+0x33/0x80
      [13367.726188]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [13367.726574] RIP: 0033:0x7fe1df7add87
      [13367.726948] Code: 00 00 00 48 8b 05 09 91 (...)
      [13367.727763] RSP: 002b:00007fe1df6b4d48 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [13367.728179] RAX: ffffffffffffffda RBX: 000055ce1fb596a0 RCX: 00007fe1df7add87
      [13367.728604] RDX: 000055ce1fb596a0 RSI: 00000000c400941b RDI: 0000000000000003
      [13367.729021] RBP: 0000000000000000 R08: 00007fe1df6b5700 R09: 0000000000000000
      [13367.729431] R10: 00007fe1df6b5700 R11: 0000000000000246 R12: 00007ffd922b07de
      [13367.729842] R13: 00007ffd922b07df R14: 00007fe1df6b4e40 R15: 0000000000802000
      [13367.730275] Modules linked in: btrfs blake2b_generic xor (...)
      [13367.732638] CR2: 00000000000000b0
      [13367.733166] ---[ end trace d298b6805556acd9 ]---
    
    What happens is the following:
    
    1) At reada_find_extent() we don't find any existing readahead extent for
       the metadata extent starting at logical address X;
    
    2) So we proceed to create a new one. We then call btrfs_map_block() to get
       information about which stripes contain extent X;
    
    3) After that we iterate over the stripes and create only one zone for the
       readahead extent - only one because reada_find_zone() returned NULL for
       all iterations except for one, either because a memory allocation failed
       or it couldn't find the block group of the extent (it may have just been
       deleted);
    
    4) We then add the new readahead extent to the readahead extents radix
       tree at fs_info->reada_tree;
    
    5) Then we iterate over each zone of the new readahead extent, and find
       that the device used for that zone no longer exists, because it was
       removed or it was the source device of a device replace operation.
       Since this left 'have_zone' set to 0, after finishing the loop we jump
       to the 'error' label, call kfree() on the new readahead extent and
       return without removing it from the radix tree at fs_info->reada_tree;
    
    6) Any future call to reada_find_extent() for the logical address X will
       find the stale pointer in the readahead extents radix tree, increment
       its reference counter, which can trigger the use-after-free right
       away or return it to the caller reada_add_block() that results in the
       use-after-free of the example trace above.
    
    So fix this by making sure we delete the readahead extent from the radix
    tree if we fail to setup zones for it (when 'have_zone = 0').
    
    Fixes: 319450211842ba ("btrfs: reada: bypass adding extent when all zone failed")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 834a61b2123ba89d576385afb11a37148fa76170
Author: Daniel Xu <dxu@dxuuu.xyz>
Date:   Thu Oct 8 18:09:10 2020 -0700

    btrfs: tree-checker: validate number of chunk stripes and parity
    
    commit 85d07fbe09efd1c529ff3e025e2f0d2c6c96a1b7 upstream.
    
    If there's no parity and num_stripes < ncopies, a crafted image can
    trigger a division by zero in calc_stripe_length().
    
    The image was generated through fuzzing.
    
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=209587
    Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cedc54ad3d47af758d4a317e350534c85780939
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 29 08:53:54 2020 -0400

    btrfs: cleanup cow block on error
    
    commit 572c83acdcdafeb04e70aa46be1fa539310be20c upstream.
    
    In fstest btrfs/064 a transaction abort in __btrfs_cow_block could lead
    to a system lockup. It gets stuck trying to write back inodes, and the
    write back thread was trying to lock an extent buffer:
    
      $ cat /proc/2143497/stack
      [<0>] __btrfs_tree_lock+0x108/0x250
      [<0>] lock_extent_buffer_for_io+0x35e/0x3a0
      [<0>] btree_write_cache_pages+0x15a/0x3b0
      [<0>] do_writepages+0x28/0xb0
      [<0>] __writeback_single_inode+0x54/0x5c0
      [<0>] writeback_sb_inodes+0x1e8/0x510
      [<0>] wb_writeback+0xcc/0x440
      [<0>] wb_workfn+0xd7/0x650
      [<0>] process_one_work+0x236/0x560
      [<0>] worker_thread+0x55/0x3c0
      [<0>] kthread+0x13a/0x150
      [<0>] ret_from_fork+0x1f/0x30
    
    This is because we got an error while COWing a block, specifically here
    
            if (test_bit(BTRFS_ROOT_SHAREABLE, &root->state)) {
                    ret = btrfs_reloc_cow_block(trans, root, buf, cow);
                    if (ret) {
                            btrfs_abort_transaction(trans, ret);
                            return ret;
                    }
            }
    
      [16402.241552] BTRFS: Transaction aborted (error -2)
      [16402.242362] WARNING: CPU: 1 PID: 2563188 at fs/btrfs/ctree.c:1074 __btrfs_cow_block+0x376/0x540
      [16402.249469] CPU: 1 PID: 2563188 Comm: fsstress Not tainted 5.9.0-rc6+ #8
      [16402.249936] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      [16402.250525] RIP: 0010:__btrfs_cow_block+0x376/0x540
      [16402.252417] RSP: 0018:ffff9cca40e578b0 EFLAGS: 00010282
      [16402.252787] RAX: 0000000000000025 RBX: 0000000000000002 RCX: ffff9132bbd19388
      [16402.253278] RDX: 00000000ffffffd8 RSI: 0000000000000027 RDI: ffff9132bbd19380
      [16402.254063] RBP: ffff9132b41a49c0 R08: 0000000000000000 R09: 0000000000000000
      [16402.254887] R10: 0000000000000000 R11: ffff91324758b080 R12: ffff91326ef17ce0
      [16402.255694] R13: ffff91325fc0f000 R14: ffff91326ef176b0 R15: ffff9132815e2000
      [16402.256321] FS:  00007f542c6d7b80(0000) GS:ffff9132bbd00000(0000) knlGS:0000000000000000
      [16402.256973] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [16402.257374] CR2: 00007f127b83f250 CR3: 0000000133480002 CR4: 0000000000370ee0
      [16402.257867] Call Trace:
      [16402.258072]  btrfs_cow_block+0x109/0x230
      [16402.258356]  btrfs_search_slot+0x530/0x9d0
      [16402.258655]  btrfs_lookup_file_extent+0x37/0x40
      [16402.259155]  __btrfs_drop_extents+0x13c/0xd60
      [16402.259628]  ? btrfs_block_rsv_migrate+0x4f/0xb0
      [16402.259949]  btrfs_replace_file_extents+0x190/0x820
      [16402.260873]  btrfs_clone+0x9ae/0xc00
      [16402.261139]  btrfs_extent_same_range+0x66/0x90
      [16402.261771]  btrfs_remap_file_range+0x353/0x3b1
      [16402.262333]  vfs_dedupe_file_range_one.part.0+0xd5/0x140
      [16402.262821]  vfs_dedupe_file_range+0x189/0x220
      [16402.263150]  do_vfs_ioctl+0x552/0x700
      [16402.263662]  __x64_sys_ioctl+0x62/0xb0
      [16402.264023]  do_syscall_64+0x33/0x40
      [16402.264364]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [16402.264862] RIP: 0033:0x7f542c7d15cb
      [16402.266901] RSP: 002b:00007ffd35944ea8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [16402.267627] RAX: ffffffffffffffda RBX: 00000000009d1968 RCX: 00007f542c7d15cb
      [16402.268298] RDX: 00000000009d2490 RSI: 00000000c0189436 RDI: 0000000000000003
      [16402.268958] RBP: 00000000009d2520 R08: 0000000000000036 R09: 00000000009d2e64
      [16402.269726] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000002
      [16402.270659] R13: 000000000001f000 R14: 00000000009d1970 R15: 00000000009d2e80
      [16402.271498] irq event stamp: 0
      [16402.271846] hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      [16402.272497] hardirqs last disabled at (0): [<ffffffff910dbf59>] copy_process+0x6b9/0x1ba0
      [16402.273343] softirqs last  enabled at (0): [<ffffffff910dbf59>] copy_process+0x6b9/0x1ba0
      [16402.273905] softirqs last disabled at (0): [<0000000000000000>] 0x0
      [16402.274338] ---[ end trace 737874a5a41a8236 ]---
      [16402.274669] BTRFS: error (device dm-9) in __btrfs_cow_block:1074: errno=-2 No such entry
      [16402.276179] BTRFS info (device dm-9): forced readonly
      [16402.277046] BTRFS: error (device dm-9) in btrfs_replace_file_extents:2723: errno=-2 No such entry
      [16402.278744] BTRFS: error (device dm-9) in __btrfs_cow_block:1074: errno=-2 No such entry
      [16402.279968] BTRFS: error (device dm-9) in __btrfs_cow_block:1074: errno=-2 No such entry
      [16402.280582] BTRFS info (device dm-9): balance: ended with status: -30
    
    The problem here is that as soon as we allocate the new block it is
    locked and marked dirty in the btree inode.  This means that we could
    attempt to writeback this block and need to lock the extent buffer.
    However we're not unlocking it here and thus we deadlock.
    
    Fix this by unlocking the cow block if we have any errors inside of
    __btrfs_cow_block, and also free it so we do not leak it.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3ce2d0fb8b28823573a5e9051e473f5c5e870bb
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Sep 22 10:37:01 2020 +0800

    btrfs: tree-checker: fix false alert caused by legacy btrfs root item
    
    commit 1465af12e254a68706e110846f59cf0f09683184 upstream.
    
    Commit 259ee7754b67 ("btrfs: tree-checker: Add ROOT_ITEM check")
    introduced btrfs root item size check, however btrfs root item has two
    versions, the legacy one which just ends before generation_v2 member, is
    smaller than current btrfs root item size.
    
    This caused btrfs kernel to reject valid but old tree root leaves.
    
    Fix this problem by also allowing legacy root item, since kernel can
    already handle them pretty well and upgrade to newer root item format
    when needed.
    
    Reported-by: Martin Steigerwald <martin@lichtvoll.de>
    Fixes: 259ee7754b67 ("btrfs: tree-checker: Add ROOT_ITEM check")
    CC: stable@vger.kernel.org # 5.4+
    Tested-By: Martin Steigerwald <martin@lichtvoll.de>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b82b8aba08d436b075226a448881b98807981f2
Author: Denis Efremov <efremov@linux.com>
Date:   Mon Sep 21 20:03:35 2020 +0300

    btrfs: use kvzalloc() to allocate clone_roots in btrfs_ioctl_send()
    
    commit 8eb2fd00153a3a96a19c62ac9c6d48c2efebe5e8 upstream.
    
    btrfs_ioctl_send() used open-coded kvzalloc implementation earlier.
    The code was accidentally replaced with kzalloc() call [1]. Restore
    the original code by using kvzalloc() to allocate sctx->clone_roots.
    
    [1] https://patchwork.kernel.org/patch/9757891/#20529627
    
    Fixes: 818e010bf9d0 ("btrfs: replace opencoded kvzalloc with the helper")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec4b82fc322a56aa68777f0fb1e14ff57d1f857
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 21 14:13:30 2020 +0100

    btrfs: send, recompute reference path after orphanization of a directory
    
    commit 9c2b4e0347067396ceb3ae929d6888c81d610259 upstream.
    
    During an incremental send, when an inode has multiple new references we
    might end up emitting rename operations for orphanizations that have a
    source path that is no longer valid due to a previous orphanization of
    some directory inode. This causes the receiver to fail since it tries
    to rename a path that does not exists.
    
    Example reproducer:
    
      $ cat reproducer.sh
      #!/bin/bash
    
      mkfs.btrfs -f /dev/sdi >/dev/null
      mount /dev/sdi /mnt/sdi
    
      touch /mnt/sdi/f1
      touch /mnt/sdi/f2
      mkdir /mnt/sdi/d1
      mkdir /mnt/sdi/d1/d2
    
      # Filesystem looks like:
      #
      # .                           (ino 256)
      # |----- f1                   (ino 257)
      # |----- f2                   (ino 258)
      # |----- d1/                  (ino 259)
      #        |----- d2/           (ino 260)
    
      btrfs subvolume snapshot -r /mnt/sdi /mnt/sdi/snap1
      btrfs send -f /tmp/snap1.send /mnt/sdi/snap1
    
      # Now do a series of changes such that:
      #
      # *) inode 258 has one new hardlink and the previous name changed
      #
      # *) both names conflict with the old names of two other inodes:
      #
      #    1) the new name "d1" conflicts with the old name of inode 259,
      #       under directory inode 256 (root)
      #
      #    2) the new name "d2" conflicts with the old name of inode 260
      #       under directory inode 259
      #
      # *) inodes 259 and 260 now have the old names of inode 258
      #
      # *) inode 257 is now located under inode 260 - an inode with a number
      #    smaller than the inode (258) for which we created a second hard
      #    link and swapped its names with inodes 259 and 260
      #
      ln /mnt/sdi/f2 /mnt/sdi/d1/f2_link
      mv /mnt/sdi/f1 /mnt/sdi/d1/d2/f1
    
      # Swap d1 and f2.
      mv /mnt/sdi/d1 /mnt/sdi/tmp
      mv /mnt/sdi/f2 /mnt/sdi/d1
      mv /mnt/sdi/tmp /mnt/sdi/f2
    
      # Swap d2 and f2_link
      mv /mnt/sdi/f2/d2 /mnt/sdi/tmp
      mv /mnt/sdi/f2/f2_link /mnt/sdi/f2/d2
      mv /mnt/sdi/tmp /mnt/sdi/f2/f2_link
    
      # Filesystem now looks like:
      #
      # .                                (ino 256)
      # |----- d1                        (ino 258)
      # |----- f2/                       (ino 259)
      #        |----- f2_link/           (ino 260)
      #        |       |----- f1         (ino 257)
      #        |
      #        |----- d2                 (ino 258)
    
      btrfs subvolume snapshot -r /mnt/sdi /mnt/sdi/snap2
      btrfs send -f /tmp/snap2.send -p /mnt/sdi/snap1 /mnt/sdi/snap2
    
      mkfs.btrfs -f /dev/sdj >/dev/null
      mount /dev/sdj /mnt/sdj
    
      btrfs receive -f /tmp/snap1.send /mnt/sdj
      btrfs receive -f /tmp/snap2.send /mnt/sdj
    
      umount /mnt/sdi
      umount /mnt/sdj
    
    When executed the receive of the incremental stream fails:
    
      $ ./reproducer.sh
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap1'
      At subvol /mnt/sdi/snap1
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap2'
      At subvol /mnt/sdi/snap2
      At subvol snap1
      At snapshot snap2
      ERROR: rename d1/d2 -> o260-6-0 failed: No such file or directory
    
    This happens because:
    
    1) When processing inode 257 we end up computing the name for inode 259
       because it is an ancestor in the send snapshot, and at that point it
       still has its old name, "d1", from the parent snapshot because inode
       259 was not yet processed. We then cache that name, which is valid
       until we start processing inode 259 (or set the progress to 260 after
       processing its references);
    
    2) Later we start processing inode 258 and collecting all its new
       references into the list sctx->new_refs. The first reference in the
       list happens to be the reference for name "d1" while the reference for
       name "d2" is next (the last element of the list).
       We compute the full path "d1/d2" for this second reference and store
       it in the reference (its ->full_path member). The path used for the
       new parent directory was "d1" and not "f2" because inode 259, the
       new parent, was not yet processed;
    
    3) When we start processing the new references at process_recorded_refs()
       we start with the first reference in the list, for the new name "d1".
       Because there is a conflicting inode that was not yet processed, which
       is directory inode 259, we orphanize it, renaming it from "d1" to
       "o259-6-0";
    
    4) Then we start processing the new reference for name "d2", and we
       realize it conflicts with the reference of inode 260 in the parent
       snapshot. So we issue an orphanization operation for inode 260 by
       emitting a rename operation with a destination path of "o260-6-0"
       and a source path of "d1/d2" - this source path is the value we
       stored in the reference earlier at step 2), corresponding to the
       ->full_path member of the reference, however that path is no longer
       valid due to the orphanization of the directory inode 259 in step 3).
       This makes the receiver fail since the path does not exists, it should
       have been "o259-6-0/d2".
    
    Fix this by recomputing the full path of a reference before emitting an
    orphanization if we previously orphanized any directory, since that
    directory could be a parent in the new path. This is a rare scenario so
    keeping it simple and not checking if that previously orphanized directory
    is in fact an ancestor of the inode we are trying to orphanize.
    
    A test case for fstests follows soon.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2dcc9b03b7f70aa66e9998689a18eb2a39b1cb6
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 21 14:13:29 2020 +0100

    btrfs: send, orphanize first all conflicting inodes when processing references
    
    commit 98272bb77bf4cc20ed1ffca89832d713e70ebf09 upstream.
    
    When doing an incremental send it is possible that when processing the new
    references for an inode we end up issuing rename or link operations that
    have an invalid path, which contains the orphanized name of a directory
    before we actually orphanized it, causing the receiver to fail.
    
    The following reproducer triggers such scenario:
    
      $ cat reproducer.sh
      #!/bin/bash
    
      mkfs.btrfs -f /dev/sdi >/dev/null
      mount /dev/sdi /mnt/sdi
    
      touch /mnt/sdi/a
      touch /mnt/sdi/b
      mkdir /mnt/sdi/testdir
      # We want "a" to have a lower inode number then "testdir" (257 vs 259).
      mv /mnt/sdi/a /mnt/sdi/testdir/a
    
      # Filesystem looks like:
      #
      # .                           (ino 256)
      # |----- testdir/             (ino 259)
      # |          |----- a         (ino 257)
      # |
      # |----- b                    (ino 258)
    
      btrfs subvolume snapshot -r /mnt/sdi /mnt/sdi/snap1
      btrfs send -f /tmp/snap1.send /mnt/sdi/snap1
    
      # Now rename 259 to "testdir_2", then change the name of 257 to
      # "testdir" and make it a direct descendant of the root inode (256).
      # Also create a new link for inode 257 with the old name of inode 258.
      # By swapping the names and location of several inodes and create a
      # nasty dependency chain of rename and link operations.
      mv /mnt/sdi/testdir/a /mnt/sdi/a2
      touch /mnt/sdi/testdir/a
      mv /mnt/sdi/b /mnt/sdi/b2
      ln /mnt/sdi/a2 /mnt/sdi/b
      mv /mnt/sdi/testdir /mnt/sdi/testdir_2
      mv /mnt/sdi/a2 /mnt/sdi/testdir
    
      # Filesystem now looks like:
      #
      # .                            (ino 256)
      # |----- testdir_2/            (ino 259)
      # |          |----- a          (ino 260)
      # |
      # |----- testdir               (ino 257)
      # |----- b                     (ino 257)
      # |----- b2                    (ino 258)
    
      btrfs subvolume snapshot -r /mnt/sdi /mnt/sdi/snap2
      btrfs send -f /tmp/snap2.send -p /mnt/sdi/snap1 /mnt/sdi/snap2
    
      mkfs.btrfs -f /dev/sdj >/dev/null
      mount /dev/sdj /mnt/sdj
    
      btrfs receive -f /tmp/snap1.send /mnt/sdj
      btrfs receive -f /tmp/snap2.send /mnt/sdj
    
      umount /mnt/sdi
      umount /mnt/sdj
    
    When running the reproducer, the receive of the incremental send stream
    fails:
    
      $ ./reproducer.sh
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap1'
      At subvol /mnt/sdi/snap1
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap2'
      At subvol /mnt/sdi/snap2
      At subvol snap1
      At snapshot snap2
      ERROR: link b -> o259-6-0/a failed: No such file or directory
    
    The problem happens because of the following:
    
    1) Before we start iterating the list of new references for inode 257,
       we generate its current path and store it at @valid_path, done at
       the very beginning of process_recorded_refs(). The generated path
       is "o259-6-0/a", containing the orphanized name for inode 259;
    
    2) Then we iterate over the list of new references, which has the
       references "b" and "testdir" in that specific order;
    
    3) We process reference "b" first, because it is in the list before
       reference "testdir". We then issue a link operation to create
       the new reference "b" using a target path corresponding to the
       content at @valid_path, which corresponds to "o259-6-0/a".
       However we haven't yet orphanized inode 259, its name is still
       "testdir", and not "o259-6-0". The orphanization of 259 did not
       happen yet because we will process the reference named "testdir"
       for inode 257 only in the next iteration of the loop that goes
       over the list of new references.
    
    Fix the issue by having a preliminar iteration over all the new references
    at process_recorded_refs(). This iteration is responsible only for doing
    the orphanization of other inodes that have and old reference that
    conflicts with one of the new references of the inode we are currently
    processing. The emission of rename and link operations happen now in the
    next iteration of the new references.
    
    A test case for fstests will follow soon.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1cf034899b6a48adc84e8ff0087fe323c91f5a0
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 14 15:27:50 2020 +0100

    btrfs: reschedule if necessary when logging directory items
    
    commit bb56f02f26fe23798edb1b2175707419b28c752a upstream.
    
    Logging directories with many entries can take a significant amount of
    time, and in some cases monopolize a cpu/core for a long time if the
    logging task doesn't happen to block often enough.
    
    Johannes and Lu Fengqi reported test case generic/041 triggering a soft
    lockup when the kernel has CONFIG_SOFTLOCKUP_DETECTOR=y. For this test
    case we log an inode with 3002 hard links, and because the test removed
    one hard link before fsyncing the file, the inode logging causes the
    parent directory do be logged as well, which has 6004 directory items to
    log (3002 BTRFS_DIR_ITEM_KEY items plus 3002 BTRFS_DIR_INDEX_KEY items),
    so it can take a significant amount of time and trigger the soft lockup.
    
    So just make tree-log.c:log_dir_items() reschedule when necessary,
    releasing the current search path before doing so and then resume from
    where it was before the reschedule.
    
    The stack trace produced when the soft lockup happens is the following:
    
    [10480.277653] watchdog: BUG: soft lockup - CPU#2 stuck for 22s! [xfs_io:28172]
    [10480.279418] Modules linked in: dm_thin_pool dm_persistent_data (...)
    [10480.284915] irq event stamp: 29646366
    [10480.285987] hardirqs last  enabled at (29646365): [<ffffffff85249b66>] __slab_alloc.constprop.0+0x56/0x60
    [10480.288482] hardirqs last disabled at (29646366): [<ffffffff8579b00d>] irqentry_enter+0x1d/0x50
    [10480.290856] softirqs last  enabled at (4612): [<ffffffff85a00323>] __do_softirq+0x323/0x56c
    [10480.293615] softirqs last disabled at (4483): [<ffffffff85800dbf>] asm_call_on_stack+0xf/0x20
    [10480.296428] CPU: 2 PID: 28172 Comm: xfs_io Not tainted 5.9.0-rc4-default+ #1248
    [10480.298948] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba527-rebuilt.opensuse.org 04/01/2014
    [10480.302455] RIP: 0010:__slab_alloc.constprop.0+0x19/0x60
    [10480.304151] Code: 86 e8 31 75 21 00 66 66 2e 0f 1f 84 00 00 00 (...)
    [10480.309558] RSP: 0018:ffffadbe09397a58 EFLAGS: 00000282
    [10480.311179] RAX: ffff8a495ab92840 RBX: 0000000000000282 RCX: 0000000000000006
    [10480.313242] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff85249b66
    [10480.315260] RBP: ffff8a497d04b740 R08: 0000000000000001 R09: 0000000000000001
    [10480.317229] R10: ffff8a497d044800 R11: ffff8a495ab93c40 R12: 0000000000000000
    [10480.319169] R13: 0000000000000000 R14: 0000000000000c40 R15: ffffffffc01daf70
    [10480.321104] FS:  00007fa1dc5c0e40(0000) GS:ffff8a497da00000(0000) knlGS:0000000000000000
    [10480.323559] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [10480.325235] CR2: 00007fa1dc5befb8 CR3: 0000000004f8a006 CR4: 0000000000170ea0
    [10480.327259] Call Trace:
    [10480.328286]  ? overwrite_item+0x1f0/0x5a0 [btrfs]
    [10480.329784]  __kmalloc+0x831/0xa20
    [10480.331009]  ? btrfs_get_32+0xb0/0x1d0 [btrfs]
    [10480.332464]  overwrite_item+0x1f0/0x5a0 [btrfs]
    [10480.333948]  log_dir_items+0x2ee/0x570 [btrfs]
    [10480.335413]  log_directory_changes+0x82/0xd0 [btrfs]
    [10480.336926]  btrfs_log_inode+0xc9b/0xda0 [btrfs]
    [10480.338374]  ? init_once+0x20/0x20 [btrfs]
    [10480.339711]  btrfs_log_inode_parent+0x8d3/0xd10 [btrfs]
    [10480.341257]  ? dget_parent+0x97/0x2e0
    [10480.342480]  btrfs_log_dentry_safe+0x3a/0x50 [btrfs]
    [10480.343977]  btrfs_sync_file+0x24b/0x5e0 [btrfs]
    [10480.345381]  do_fsync+0x38/0x70
    [10480.346483]  __x64_sys_fsync+0x10/0x20
    [10480.347703]  do_syscall_64+0x2d/0x70
    [10480.348891]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [10480.350444] RIP: 0033:0x7fa1dc80970b
    [10480.351642] Code: 0f 05 48 3d 00 f0 ff ff 77 45 c3 0f 1f 40 00 48 (...)
    [10480.356952] RSP: 002b:00007fffb3d081d0 EFLAGS: 00000293 ORIG_RAX: 000000000000004a
    [10480.359458] RAX: ffffffffffffffda RBX: 0000562d93d45e40 RCX: 00007fa1dc80970b
    [10480.361426] RDX: 0000562d93d44ab0 RSI: 0000562d93d45e60 RDI: 0000000000000003
    [10480.363367] RBP: 0000000000000001 R08: 0000000000000000 R09: 00007fa1dc7b2a40
    [10480.365317] R10: 0000562d93d0e366 R11: 0000000000000293 R12: 0000000000000001
    [10480.367299] R13: 0000562d93d45290 R14: 0000562d93d45e40 R15: 0000562d93d45e60
    
    Link: https://lore.kernel.org/linux-btrfs/20180713090216.GC575@fnst.localdomain/
    Reported-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    CC: stable@vger.kernel.org # 4.4+
    Tested-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 223b462744b38d8ac1e64b5e58713880e49ea093
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Sep 3 21:30:12 2020 +0800

    btrfs: improve device scanning messages
    
    commit 79dae17d8d44b2d15779e332180080af45df5352 upstream.
    
    Systems booting without the initramfs seems to scan an unusual kind
    of device path (/dev/root). And at a later time, the device is updated
    to the correct path. We generally print the process name and PID of the
    process scanning the device but we don't capture the same information if
    the device path is rescanned with a different pathname.
    
    The current message is too long, so drop the unnecessary UUID and add
    process name and PID.
    
    While at this also update the duplicate device warning to include the
    process name and PID so the messages are consistent
    
    CC: stable@vger.kernel.org # 4.19+
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=89721
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5f2a5091263e9b6e983049a2dd5dd8fa571b25d
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Jul 24 14:46:09 2020 +0800

    btrfs: qgroup: fix wrong qgroup metadata reserve for delayed inode
    
    commit b4c5d8fdfff3e2b6c4fa4a5043e8946dff500f8c upstream.
    
    For delayed inode facility, qgroup metadata is reserved for it, and
    later freed.
    
    However we're freeing more bytes than we reserved.
    In btrfs_delayed_inode_reserve_metadata():
    
            num_bytes = btrfs_calc_metadata_size(fs_info, 1);
            ...
                    ret = btrfs_qgroup_reserve_meta_prealloc(root,
                                    fs_info->nodesize, true);
                    ...
                    if (!ret) {
                            node->bytes_reserved = num_bytes;
    
    But in btrfs_delayed_inode_release_metadata():
    
            if (qgroup_free)
                    btrfs_qgroup_free_meta_prealloc(node->root,
                                    node->bytes_reserved);
            else
                    btrfs_qgroup_convert_reserved_meta(node->root,
                                    node->bytes_reserved);
    
    This means, we're always releasing more qgroup metadata rsv than we have
    reserved.
    
    This won't trigger selftest warning, as btrfs qgroup metadata rsv has
    extra protection against cases like quota enabled half-way.
    
    But we still need to fix this problem any way.
    
    This patch will use the same num_bytes for qgroup metadata rsv so we
    could handle it correctly.
    
    Fixes: f218ea6c4792 ("btrfs: delayed-inode: Remove wrong qgroup meta reservation calls")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e2f16dd611b9cc29ea3bce7a0dd9360cf0c01cd
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Tue Sep 22 21:11:06 2020 +0800

    PM: runtime: Remove link state checks in rpm_get/put_supplier()
    
    commit d12544fb2aa9944b180c35914031a8384ab082c1 upstream.
    
    To support runtime PM for hisi SAS driver (the driver is in directory
    drivers/scsi/hisi_sas), we add device link between scsi_device->sdev_gendev
    (consumer device) and hisi_hba->dev(supplier device) with flags
    DL_FLAG_PM_RUNTIME | DL_FLAG_RPM_ACTIVE.
    
    After runtime suspended consumers and supplier, unload the dirver which
    causes a hung.
    
    We found that it called function device_release_driver_internal() to
    release the supplier device (hisi_hba->dev), as the device link was
    busy, it set the device link state to DL_STATE_SUPPLIER_UNBIND, and
    then it called device_release_driver_internal() to release the consumer
    device (scsi_device->sdev_gendev).
    
    Then it would try to call pm_runtime_get_sync() to resume the consumer
    device, but because consumer-supplier relation existed, it would try
    to resume the supplier first, but as the link state was already
    DL_STATE_SUPPLIER_UNBIND, so it skipped resuming the supplier and only
    resumed the consumer which hanged (it sends IOs to resume scsi_device
    while the SAS controller is suspended).
    
    Simple flow is as follows:
    
    device_release_driver_internal -> (supplier device)
        if device_links_busy ->
            device_links_unbind_consumers ->
                ...
                WRITE_ONCE(link->status, DL_STATE_SUPPLIER_UNBIND)
                device_release_driver_internal (consumer device)
        pm_runtime_get_sync -> (consumer device)
            ...
            __rpm_callback ->
                rpm_get_suppliers ->
                    if link->state == DL_STATE_SUPPLIER_UNBIND -> skip the action of resuming the supplier
                    ...
        pm_runtime_clean_up_links
        ...
    
    Correct suspend/resume ordering between a supplier device and its consumer
    devices (resume the supplier device before resuming consumer devices, and
    suspend consumer devices before suspending the supplier device) should be
    guaranteed by runtime PM, but the state checks in rpm_get_supplier() and
    rpm_put_supplier() break this rule, so remove them.
    
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    [ rjw: Subject and changelog edits ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0bdb5b16392754b930a50d56a43ff29f5cdb160
Author: Quinn Tran <qutran@marvell.com>
Date:   Tue Sep 29 03:21:50 2020 -0700

    scsi: qla2xxx: Fix crash on session cleanup with unload
    
    commit 50457dab670f396557e60c07f086358460876353 upstream.
    
    On unload, session cleanup prematurely gave the signal for driver unload
    path to advance.
    
    Link: https://lore.kernel.org/r/20200929102152.32278-6-njavali@marvell.com
    Fixes: 726b85487067 ("qla2xxx: Add framework for async fabric discovery")
    Cc: stable@vger.kernel.org
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0ef0e2299f5ab0ee6f34c7e0c6e41b3341bf64c
Author: Helge Deller <deller@gmx.de>
Date:   Thu Oct 22 11:00:05 2020 +0200

    scsi: mptfusion: Fix null pointer dereferences in mptscsih_remove()
    
    commit 2f4843b172c2c0360ee7792ad98025fae7baefde upstream.
    
    The mptscsih_remove() function triggers a kernel oops if the Scsi_Host
    pointer (ioc->sh) is NULL, as can be seen in this syslog:
    
     ioc0: LSI53C1030 B2: Capabilities={Initiator,Target}
     Begin: Waiting for root file system ...
     scsi host2: error handler thread failed to spawn, error = -4
     mptspi: ioc0: WARNING - Unable to register controller with SCSI subsystem
     Backtrace:
      [<000000001045b7cc>] mptspi_probe+0x248/0x3d0 [mptspi]
      [<0000000040946470>] pci_device_probe+0x1ac/0x2d8
      [<0000000040add668>] really_probe+0x1bc/0x988
      [<0000000040ade704>] driver_probe_device+0x160/0x218
      [<0000000040adee24>] device_driver_attach+0x160/0x188
      [<0000000040adef90>] __driver_attach+0x144/0x320
      [<0000000040ad7c78>] bus_for_each_dev+0xd4/0x158
      [<0000000040adc138>] driver_attach+0x4c/0x80
      [<0000000040adb3ec>] bus_add_driver+0x3e0/0x498
      [<0000000040ae0130>] driver_register+0xf4/0x298
      [<00000000409450c4>] __pci_register_driver+0x78/0xa8
      [<000000000007d248>] mptspi_init+0x18c/0x1c4 [mptspi]
    
    This patch adds the necessary NULL-pointer checks.  Successfully tested on
    a HP C8000 parisc workstation with buggy SCSI drives.
    
    Link: https://lore.kernel.org/r/20201022090005.GA9000@ls3530.fritz.box
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fc2cbba40693892d19ca8edba765a3d7bd9d3a3
Author: Martin Fuzzey <martin.fuzzey@flowbird.group>
Date:   Wed Sep 30 10:36:46 2020 +0200

    w1: mxc_w1: Fix timeout resolution problem leading to bus error
    
    commit c9723750a699c3bd465493ac2be8992b72ccb105 upstream.
    
    On my platform (i.MX53) bus access sometimes fails with
            w1_search: max_slave_count 64 reached, will continue next search.
    
    The reason is the use of jiffies to implement a 200us timeout in
    mxc_w1_ds2_touch_bit().
    On some platforms the jiffies timer resolution is insufficient for this.
    
    Fix by replacing jiffies by ktime_get().
    
    For consistency apply the same change to the other use of jiffies in
    mxc_w1_ds2_reset_bus().
    
    Fixes: f80b2581a706 ("w1: mxc_w1: Optimize mxc_w1_ds2_touch_bit()")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Martin Fuzzey <martin.fuzzey@flowbird.group>
    Link: https://lore.kernel.org/r/1601455030-6607-1-git-send-email-martin.fuzzey@flowbird.group
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a034ea12bdd4bdb844460248827483f8f43126d5
Author: Wei Huang <wei.huang2@amd.com>
Date:   Sun Oct 18 22:57:41 2020 -0500

    acpi-cpufreq: Honor _PSD table setting on new AMD CPUs
    
    commit 5368512abe08a28525d9b24abbfc2a72493e8dba upstream.
    
    acpi-cpufreq has a old quirk that overrides the _PSD table supplied by
    BIOS on AMD CPUs. However the _PSD table of new AMD CPUs (Family 19h+)
    now accurately reports the P-state dependency of CPU cores. Hence this
    quirk needs to be fixed in order to support new CPUs' frequency control.
    
    Fixes: acd316248205 ("acpi-cpufreq: Add quirk to disable _PSD usage on all AMD CPUs")
    Signed-off-by: Wei Huang <wei.huang2@amd.com>
    [ rjw: Subject edit ]
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f9d9a007e59be420c5d0de4ff8e3e7310ef7fd4
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Oct 5 19:13:46 2020 +0200

    ACPI: EC: PM: Drop ec_no_wakeup check from acpi_ec_dispatch_gpe()
    
    commit e0e9ce390d7bc6a705653d4a8aa4ea92c9a65e53 upstream.
    
    It turns out that in some cases there are EC events to flush in
    acpi_ec_dispatch_gpe() even though the ec_no_wakeup kernel parameter
    is set and the EC GPE is disabled while sleeping, so drop the
    ec_no_wakeup check that prevents those events from being processed
    from acpi_ec_dispatch_gpe().
    
    Reported-by: Todd Brandt <todd.e.brandt@linux.intel.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0adf4dbae9c049155e5a7e09db60eb59a7866a90
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Oct 5 19:13:15 2020 +0200

    ACPI: EC: PM: Flush EC work unconditionally after wakeup
    
    commit 5e92442bb4121562231e6daf8a2d1306cb5f8805 upstream.
    
    Commit 607b9df63057 ("ACPI: EC: PM: Avoid flushing EC work when EC
    GPE is inactive") has been reported to cause some power button wakeup
    events to be missed on some systems, so modify acpi_ec_dispatch_gpe()
    to call acpi_ec_flush_work() unconditionally to effectively reverse
    the changes made by that commit.
    
    Also note that the problem which prompted commit 607b9df63057 is not
    reproducible any more on the affected machine.
    
    Fixes: 607b9df63057 ("ACPI: EC: PM: Avoid flushing EC work when EC GPE is inactive")
    Reported-by: Raymond Tan <raymond.tan@intel.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7f52fd6e0ef5fb62d6137de53c52a61403b4ddc
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri Oct 2 07:10:12 2020 +0200

    PCI/ACPI: Whitelist hotplug ports for D3 if power managed by ACPI
    
    commit c6e331312ebfb52b7186e5d82d517d68b4d2f2d8 upstream.
    
    Recent laptops with dual AMD GPUs fail to suspend the discrete GPU, thus
    causing lockups on system sleep and high power consumption at runtime.
    The discrete GPU would normally be suspended to D3cold by turning off
    ACPI _PR3 Power Resources of the Root Port above the GPU.
    
    However on affected systems, the Root Port is hotplug-capable and
    pci_bridge_d3_possible() only allows hotplug ports to go to D3 if they
    belong to a Thunderbolt device or if the Root Port possesses a
    "HotPlugSupportInD3" ACPI property.  Neither is the case on affected
    laptops.  The reason for whitelisting only specific, known to work
    hotplug ports for D3 is that there have been reports of SkyLake Xeon-SP
    systems raising Hardware Error NMIs upon suspending their hotplug ports:
    https://lore.kernel.org/linux-pci/20170503180426.GA4058@otc-nc-03/
    
    But if a hotplug port is power manageable by ACPI (as can be detected
    through presence of Power Resources and corresponding _PS0 and _PS3
    methods) then it ought to be safe to suspend it to D3.  To this end,
    amend acpi_pci_bridge_d3() to whitelist such ports for D3.
    
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/1222
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/1252
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/1304
    Reported-and-tested-by: Arthur Borsboom <arthurborsboom@gmail.com>
    Reported-and-tested-by: matoro <matoro@airmail.cc>
    Reported-by: Aaron Zakhrov <aaron.zakhrov@gmail.com>
    Reported-by: Michal Rostecki <mrostecki@suse.com>
    Reported-by: Shai Coleman <git@shaicoleman.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6341984bef17a91fa91d8d9d7b31feeb81b70475
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Mon Oct 12 14:04:46 2020 +0100

    ACPI: debug: don't allow debugging when ACPI is disabled
    
    commit 0fada277147ffc6d694aa32162f51198d4f10d94 upstream.
    
    If ACPI is disabled then loading the acpi_dbg module will result in the
    following splat when lock debugging is enabled.
    
      DEBUG_LOCKS_WARN_ON(lock->magic != lock)
      WARNING: CPU: 0 PID: 1 at kernel/locking/mutex.c:938 __mutex_lock+0xa10/0x1290
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.9.0-rc8+ #103
      Hardware name: linux,dummy-virt (DT)
      Call trace:
       dump_backtrace+0x0/0x4d8
       show_stack+0x34/0x48
       dump_stack+0x174/0x1f8
       panic+0x360/0x7a0
       __warn+0x244/0x2ec
       report_bug+0x240/0x398
       bug_handler+0x50/0xc0
       call_break_hook+0x160/0x1d8
       brk_handler+0x30/0xc0
       do_debug_exception+0x184/0x340
       el1_dbg+0x48/0xb0
       el1_sync_handler+0x170/0x1c8
       el1_sync+0x80/0x100
       __mutex_lock+0xa10/0x1290
       mutex_lock_nested+0x6c/0xc0
       acpi_register_debugger+0x40/0x88
       acpi_aml_init+0xc4/0x114
       do_one_initcall+0x24c/0xb10
       kernel_init_freeable+0x690/0x728
       kernel_init+0x20/0x1e8
       ret_from_fork+0x10/0x18
    
    This is because acpi_debugger.lock has not been initialized as
    acpi_debugger_init() is not called when ACPI is disabled.  Fail module
    loading to avoid this and any subsequent problems that might arise by
    trying to debug AML when ACPI is disabled.
    
    Fixes: 8cfb0cdf07e2 ("ACPI / debugger: Add IO interface to access debugger functionalities")
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a5f62a3c6942b280835cb7a35319f14ae947396
Author: Alex Hung <alex.hung@canonical.com>
Date:   Sun Sep 13 16:34:03 2020 -0600

    ACPI: video: use ACPI backlight for HP 635 Notebook
    
    commit b226faab4e7890bbbccdf794e8b94276414f9058 upstream.
    
    The default backlight interface is AMD's radeon_bl0 which does not
    work on this system, so use the ACPI backlight interface on it
    instead.
    
    BugLink: https://bugs.launchpad.net/bugs/1894667
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Alex Hung <alex.hung@canonical.com>
    [ rjw: Changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9578d7381432e4ea64e2d4120305370fe4904392
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Sep 27 22:50:42 2020 +0100

    ACPI / extlog: Check for RDMSR failure
    
    commit 7cecb47f55e00282f972a1e0b09136c8cd938221 upstream.
    
    extlog_init() uses rdmsrl() to read an MSR, which on older CPUs
    provokes a error message at boot:
    
        unchecked MSR access error: RDMSR from 0x179 at rIP: 0xcd047307 (native_read_msr+0x7/0x40)
    
    Use rdmsrl_safe() instead, and return -ENODEV if it fails.
    
    Reported-by: jim@photojim.ca
    References: https://bugs.debian.org/971058
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e25b44cc2eb9317864426a262445fe52d9fe02c
Author: dmitry.torokhov@gmail.com <dmitry.torokhov@gmail.com>
Date:   Sun Oct 4 22:11:25 2020 -0700

    ACPI: button: fix handling lid state changes when input device closed
    
    commit 21988a8e51479ceffe7b0568b170effabb708dfe upstream.
    
    The original intent of 84d3f6b76447 was to delay evaluating lid state until
    all drivers have been loaded, with input device being opened from userspace
    serving as a signal for this condition. Let's ensure that state updates
    happen even if userspace closed (or in the future inhibited) input device.
    
    Note that if we go through suspend/resume cycle we assume the system has
    been fully initialized even if LID input device has not been opened yet.
    
    This has a side-effect of fixing access to input->users outside of
    input->mutex protections by the way of eliminating said accesses and using
    driver private flag.
    
    Fixes: 84d3f6b76447 ("ACPI / button: Delay acpi_lid_initialize_state() until first user space open")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c75b77cb9f014031e05b2dcc9c0ff5ad57fbeda5
Author: Ashish Sangwan <ashishsangwan2@gmail.com>
Date:   Mon Oct 5 02:22:43 2020 -0700

    NFS: fix nfs_path in case of a rename retry
    
    commit 247db73560bc3e5aef6db50c443c3c0db115bc93 upstream.
    
    We are generating incorrect path in case of rename retry because
    we are restarting from wrong dentry. We should restart from the
    dentry which was received in the call to nfs_path.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Ashish Sangwan <ashishsangwan2@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8a6a2ed4b7d1c3c8631eeb6d00572bc853094a8
Author: Jan Kara <jack@suse.cz>
Date:   Fri Sep 4 10:58:51 2020 +0200

    fs: Don't invalidate page buffers in block_write_full_page()
    
    commit 6dbf7bb555981fb5faf7b691e8f6169fc2b2e63b upstream.
    
    If block_write_full_page() is called for a page that is beyond current
    inode size, it will truncate page buffers for the page and return 0.
    This logic has been added in 2.5.62 in commit 81eb69062588 ("fix ext3
    BUG due to race with truncate") in history.git tree to fix a problem
    with ext3 in data=ordered mode. This particular problem doesn't exist
    anymore because ext3 is long gone and ext4 handles ordered data
    differently. Also normally buffers are invalidated by truncate code and
    there's no need to specially handle this in ->writepage() code.
    
    This invalidation of page buffers in block_write_full_page() is causing
    issues to filesystems (e.g. ext4 or ocfs2) when block device is shrunk
    under filesystem's hands and metadata buffers get discarded while being
    tracked by the journalling layer. Although it is obviously "not
    supported" it can cause kernel crashes like:
    
    [ 7986.689400] BUG: unable to handle kernel NULL pointer dereference at
    +0000000000000008
    [ 7986.697197] PGD 0 P4D 0
    [ 7986.699724] Oops: 0002 [#1] SMP PTI
    [ 7986.703200] CPU: 4 PID: 203778 Comm: jbd2/dm-3-8 Kdump: loaded Tainted: G
    +O     --------- -  - 4.18.0-147.5.0.5.h126.eulerosv2r9.x86_64 #1
    [ 7986.716438] Hardware name: Huawei RH2288H V3/BC11HGSA0, BIOS 1.57 08/11/2015
    [ 7986.723462] RIP: 0010:jbd2_journal_grab_journal_head+0x1b/0x40 [jbd2]
    ...
    [ 7986.810150] Call Trace:
    [ 7986.812595]  __jbd2_journal_insert_checkpoint+0x23/0x70 [jbd2]
    [ 7986.818408]  jbd2_journal_commit_transaction+0x155f/0x1b60 [jbd2]
    [ 7986.836467]  kjournald2+0xbd/0x270 [jbd2]
    
    which is not great. The crash happens because bh->b_private is suddently
    NULL although BH_JBD flag is still set (this is because
    block_invalidatepage() cleared BH_Mapped flag and subsequent bh lookup
    found buffer without BH_Mapped set, called init_page_buffers() which has
    rewritten bh->b_private). So just remove the invalidation in
    block_write_full_page().
    
    Note that the buffer cache invalidation when block device changes size
    is already careful to avoid similar problems by using
    invalidate_mapping_pages() which skips busy buffers so it was only this
    odd block_write_full_page() behavior that could tear down bdev buffers
    under filesystem's hands.
    
    Reported-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    CC: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f3cb993a6f206a2c4e598a640fd3013cd3358ad
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jul 28 13:22:08 2020 +0200

    media: uvcvideo: Fix uvc_ctrl_fixup_xu_info() not having any effect
    
    commit 93df48d37c3f03886d84831992926333e7810640 upstream.
    
    uvc_ctrl_add_info() calls uvc_ctrl_get_flags() which will override
    the fixed-up flags set by uvc_ctrl_fixup_xu_info().
    
    uvc_ctrl_init_xu_ctrl() already calls uvc_ctrl_get_flags() before
    calling uvc_ctrl_add_info(), so the uvc_ctrl_get_flags() call in
    uvc_ctrl_add_info() is not necessary for xu ctrls.
    
    This commit moves the uvc_ctrl_get_flags() call for normal controls
    from uvc_ctrl_add_info() to uvc_ctrl_init_ctrl(), so that we no longer
    call uvc_ctrl_get_flags() twice for xu controls and so that we no longer
    override the fixed-up flags set by uvc_ctrl_fixup_xu_info().
    
    This fixes the xu motor controls not working properly on a Logitech
    046d:08cc, and presumably also on the other Logitech models which have
    a quirk for this in the uvc_ctrl_fixup_xu_info() function.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ac92a5e5fd76ca866ac7279dd8954304110379f
Author: Marek Behún <marek.behun@nic.cz>
Date:   Fri Sep 18 00:32:58 2020 +0200

    leds: bcm6328, bcm6358: use devres LED registering function
    
    commit ff5c89d44453e7ad99502b04bf798a3fc32c758b upstream.
    
    These two drivers do not provide remove method and use devres for
    allocation of other resources, yet they use led_classdev_register
    instead of the devres variant, devm_led_classdev_register.
    
    Fix this.
    
    Signed-off-by: Marek Behún <marek.behun@nic.cz>
    Cc: Álvaro Fernández Rojas <noltari@gmail.com>
    Cc: Kevin Cernekee <cernekee@gmail.com>
    Cc: Jaedon Shin <jaedon.shin@gmail.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a908e29705ee0cadccf53b729bdd8f005d1b771f
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Aug 17 09:00:00 2020 +0200

    extcon: ptn5150: Fix usage of atomic GPIO with sleeping GPIO chips
    
    commit 6aaad58c872db062f7ea2761421ca748bd0931cc upstream.
    
    The driver uses atomic version of gpiod_set_value() without any real
    reason.  It is called in a workqueue under mutex so it could sleep
    there.  Changing it to "can_sleep" flavor allows to use the driver with
    all GPIO chips.
    
    Fixes: 4ed754de2d66 ("extcon: Add support for ptn5150 extcon driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Vijai Kumar K <vijaikumar.kanagarajan@gmail.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 004fb028f22cb21a4fb767ac010d325ab6c06cdb
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Sep 1 17:27:03 2020 +0200

    spi: sprd: Release DMA channel also on probe deferral
    
    commit 687a2e76186dcfa42f22c14b655c3fb159839e79 upstream.
    
    If dma_request_chan() for TX channel fails with EPROBE_DEFER, the RX
    channel would not be released and on next re-probe it would be requested
    second time.
    
    Fixes: 386119bc7be9 ("spi: sprd: spi: sprd: Add DMA mode support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Chunyan Zhang <zhang.lyra@gmail.com>
    Link: https://lore.kernel.org/r/20200901152713.18629-1-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d789e1c5b1ce2fbaca88fdefd550f37bb73885e6
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Sep 8 16:47:38 2020 -0500

    perf/x86/amd/ibs: Fix raw sample data accumulation
    
    commit 36e1be8ada994d509538b3b1d0af8b63c351e729 upstream.
    
    Neither IbsBrTarget nor OPDATA4 are populated in IBS Fetch mode.
    Don't accumulate them into raw sample user data in that case.
    
    Also, in Fetch mode, add saving the IBS Fetch Control Extended MSR.
    
    Technically, there is an ABI change here with respect to the IBS raw
    sample data format, but I don't see any perf driver version information
    being included in perf.data file headers, but, existing users can detect
    whether the size of the sample record has reduced by 8 bytes to
    determine whether the IBS driver has this fix.
    
    Fixes: 904cb3677f3a ("perf/x86/amd/ibs: Update IBS MSRs and feature definitions")
    Reported-by: Stephane Eranian <stephane.eranian@google.com>
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200908214740.18097-6-kim.phillips@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e2a324641f9f70b304d702d3c5b56a232fe78b3
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Sep 8 16:47:37 2020 -0500

    perf/x86/amd/ibs: Don't include randomized bits in get_ibs_op_count()
    
    commit 680d69635005ba0e58fe3f4c52fc162b8fc743b0 upstream.
    
    get_ibs_op_count() adds hardware's current count (IbsOpCurCnt) bits
    to its count regardless of hardware's valid status.
    
    According to the PPR for AMD Family 17h Model 31h B0 55803 Rev 0.54,
    if the counter rolls over, valid status is set, and the lower 7 bits
    of IbsOpCurCnt are randomized by hardware.
    
    Don't include those bits in the driver's event count.
    
    Fixes: 8b1e13638d46 ("perf/x86-ibs: Fix usage of IBS op current count")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206537
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9a48ff99961cb9c1bbb735066892e37da23f9da
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Sep 28 06:47:26 2020 -0700

    perf/x86/intel: Fix Ice Lake event constraint table
    
    commit 010cb00265f150bf82b23c02ad1fb87ce5c781e1 upstream.
    
    An error occues when sampling non-PEBS INST_RETIRED.PREC_DIST(0x01c0)
    event.
    
      perf record -e cpu/event=0xc0,umask=0x01/ -- sleep 1
      Error:
      The sys_perf_event_open() syscall returned with 22 (Invalid argument)
      for event (cpu/event=0xc0,umask=0x01/).
      /bin/dmesg | grep -i perf may provide additional information.
    
    The idxmsk64 of the event is set to 0. The event never be successfully
    scheduled.
    
    The event should be limit to the fixed counter 0.
    
    Fixes: 6017608936c1 ("perf/x86/intel: Add Icelake support")
    Reported-by: Yi, Ammy <ammy.yi@intel.com>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200928134726.13090-1-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3674b0445b70e49105f03db7f3ac16eea1051d8c
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Aug 26 10:00:46 2020 -0700

    selftests/x86/fsgsbase: Test PTRACE_PEEKUSER for GSBASE with invalid LDT GS
    
    commit 1b9abd1755ad947d7c9913e92e7837b533124c90 upstream.
    
    This tests commit:
    
      8ab49526b53d ("x86/fsgsbase/64: Fix NULL deref in 86_fsgsbase_read_task")
    
    Unpatched kernels will OOPS.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/c618ae86d1f757e01b1a8e79869f553cb88acf9a.1598461151.git.luto@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d1c48227780432605bd6e79b60171886c44da30
Author: Jann Horn <jannh@google.com>
Date:   Mon Oct 5 03:44:01 2020 +0200

    seccomp: Make duplicate listener detection non-racy
    
    commit dfe719fef03d752f1682fa8aeddf30ba501c8555 upstream.
    
    Currently, init_listener() tries to prevent adding a filter with
    SECCOMP_FILTER_FLAG_NEW_LISTENER if one of the existing filters already
    has a listener. However, this check happens without holding any lock that
    would prevent another thread from concurrently installing a new filter
    (potentially with a listener) on top of the ones we already have.
    
    Theoretically, this is also a data race: The plain load from
    current->seccomp.filter can race with concurrent writes to the same
    location.
    
    Fix it by moving the check into the region that holds the siglock to guard
    against concurrent TSYNC.
    
    (The "Fixes" tag points to the commit that introduced the theoretical
    data race; concurrent installation of another filter with TSYNC only
    became possible later, in commit 51891498f2da ("seccomp: allow TSYNC and
    USER_NOTIF together").)
    
    Fixes: 6a21cc50f0c7 ("seccomp: add a return code to trap to userspace")
    Reviewed-by: Tycho Andersen <tycho@tycho.pizza>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201005014401.490175-1-jannh@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 470c8c409e1c8e8f2fafa94c6269dedd59c96b54
Author: Raul E Rangel <rrangel@chromium.org>
Date:   Mon Sep 28 15:59:20 2020 -0600

    mmc: sdhci-acpi: AMDI0040: Set SDHCI_QUIRK2_PRESET_VALUE_BROKEN
    
    commit f23cc3ba491af77395cea3f9d51204398729f26b upstream.
    
    This change fixes HS400 tuning for devices with invalid presets.
    
    SDHCI presets are not currently used for eMMC HS/HS200/HS400, but are
    used for DDR52. The HS400 retuning sequence is:
    
        HS400->DDR52->HS->HS200->Perform Tuning->HS->HS400
    
    This means that when HS400 tuning happens, we transition through DDR52
    for a very brief period. This causes presets to be enabled
    unintentionally and stay enabled when transitioning back to HS200 or
    HS400. Some firmware has invalid presets, so we end up with driver
    strengths that can cause I/O problems.
    
    Fixes: 34597a3f60b1 ("mmc: sdhci-acpi: Add support for ACPI HID of AMD Controller with HS400")
    Signed-off-by: Raul E Rangel <rrangel@chromium.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200928154718.1.Icc21d4b2f354e83e26e57e270dc952f5fe0b0a40@changeid
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f56e94b6f7c7d1a07814b07f78268a0e6922357
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Aug 18 13:45:08 2020 +0300

    mmc: sdhci: Add LTR support for some Intel BYT based controllers
    
    commit 46f4a69ec8ed6ab9f6a6172afe50df792c8bc1b6 upstream.
    
    Some Intel BYT based host controllers support the setting of latency
    tolerance.  Accordingly, implement the PM QoS ->set_latency_tolerance()
    callback.  The raw register values are also exposed via debugfs.
    
    Intel EHL controllers require this support.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: cb3a7d4a0aec4e ("mmc: sdhci-pci: Add support for Intel EHL")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200818104508.7149-1-adrian.hunter@intel.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b91d4797b3da0a0644e31cbc2f41a14a61472ab6
Author: Song Liu <songliubraving@fb.com>
Date:   Mon Oct 5 09:35:21 2020 -0700

    md/raid5: fix oops during stripe resizing
    
    commit b44c018cdf748b96b676ba09fdbc5b34fc443ada upstream.
    
    KoWei reported crash during raid5 reshape:
    
    [ 1032.252932] Oops: 0002 [#1] SMP PTI
    [...]
    [ 1032.252943] RIP: 0010:memcpy_erms+0x6/0x10
    [...]
    [ 1032.252947] RSP: 0018:ffffba1ac0c03b78 EFLAGS: 00010286
    [ 1032.252949] RAX: 0000784ac0000000 RBX: ffff91bec3d09740 RCX: 0000000000001000
    [ 1032.252951] RDX: 0000000000001000 RSI: ffff91be6781c000 RDI: 0000784ac0000000
    [ 1032.252953] RBP: ffffba1ac0c03bd8 R08: 0000000000001000 R09: ffffba1ac0c03bf8
    [ 1032.252954] R10: 0000000000000000 R11: 0000000000000000 R12: ffffba1ac0c03bf8
    [ 1032.252955] R13: 0000000000001000 R14: 0000000000000000 R15: 0000000000000000
    [ 1032.252958] FS:  0000000000000000(0000) GS:ffff91becf500000(0000) knlGS:0000000000000000
    [ 1032.252959] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1032.252961] CR2: 0000784ac0000000 CR3: 000000031780a002 CR4: 00000000001606e0
    [ 1032.252962] Call Trace:
    [ 1032.252969]  ? async_memcpy+0x179/0x1000 [async_memcpy]
    [ 1032.252977]  ? raid5_release_stripe+0x8e/0x110 [raid456]
    [ 1032.252982]  handle_stripe_expansion+0x15a/0x1f0 [raid456]
    [ 1032.252988]  handle_stripe+0x592/0x1270 [raid456]
    [ 1032.252993]  handle_active_stripes.isra.0+0x3cb/0x5a0 [raid456]
    [ 1032.252999]  raid5d+0x35c/0x550 [raid456]
    [ 1032.253002]  ? schedule+0x42/0xb0
    [ 1032.253006]  ? schedule_timeout+0x10e/0x160
    [ 1032.253011]  md_thread+0x97/0x160
    [ 1032.253015]  ? wait_woken+0x80/0x80
    [ 1032.253019]  kthread+0x104/0x140
    [ 1032.253022]  ? md_start_sync+0x60/0x60
    [ 1032.253024]  ? kthread_park+0x90/0x90
    [ 1032.253027]  ret_from_fork+0x35/0x40
    
    This is because cache_size_mutex was unlocked too early in resize_stripes,
    which races with grow_one_stripe() that grow_one_stripe() allocates a
    stripe with wrong pool_size.
    
    Fix this issue by unlocking cache_size_mutex after updating pool_size.
    
    Cc: <stable@vger.kernel.org> # v4.4+
    Reported-by: KoWei Sung <winders@amazon.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7aa5d578fedeb7fa672654fe293ef2defcecf23
Author: Chao Leng <lengchao@huawei.com>
Date:   Mon Oct 12 16:10:40 2020 +0800

    nvme-rdma: fix crash when connect rejected
    
    [ Upstream commit 43efdb8e870ee0f58633fd579aa5b5185bf5d39e ]
    
    A crash can happened when a connect is rejected.   The host establishes
    the connection after received ConnectReply, and then continues to send
    the fabrics Connect command.  If the controller does not receive the
    ReadyToUse capsule, host may receive a ConnectReject reply.
    
    Call nvme_rdma_destroy_queue_ib after the host received the
    RDMA_CM_EVENT_REJECTED event.  Then when the fabrics Connect command
    times out, nvme_rdma_timeout calls nvme_rdma_complete_rq to fail the
    request.  A crash happenes due to use after free in
    nvme_rdma_complete_rq.
    
    nvme_rdma_destroy_queue_ib is redundant when handling the
    RDMA_CM_EVENT_REJECTED event as nvme_rdma_destroy_queue_ib is already
    called in connection failure handler.
    
    Signed-off-by: Chao Leng <lengchao@huawei.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c421c082088ef10baec2612cea5973907a6acc21
Author: Douglas Gilbert <dgilbert@interlog.com>
Date:   Thu Oct 15 14:57:35 2020 -0400

    sgl_alloc_order: fix memory leak
    
    [ Upstream commit b2a182a40278bc5849730e66bca01a762188ed86 ]
    
    sgl_alloc_order() can fail when 'length' is large on a memory
    constrained system. When order > 0 it will potentially be
    making several multi-page allocations with the later ones more
    likely to fail than the earlier one. So it is important that
    sgl_alloc_order() frees up any pages it has obtained before
    returning NULL. In the case when order > 0 it calls the wrong
    free page function and leaks. In testing the leak was
    sufficient to bring down my 8 GiB laptop with OOM.
    
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 742fd49cf811ca164489e339b862e3fb8e240a73
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Oct 13 22:45:14 2020 -0400

    nbd: make the config put is called before the notifying the waiter
    
    [ Upstream commit 87aac3a80af5cbad93e63250e8a1e19095ba0d30 ]
    
    There has one race case for ceph's rbd-nbd tool. When do mapping
    it may fail with EBUSY from ioctl(nbd, NBD_DO_IT), but actually
    the nbd device has already unmaped.
    
    It dues to if just after the wake_up(), the recv_work() is scheduled
    out and defers calling the nbd_config_put(), though the map process
    has exited the "nbd->recv_task" is not cleared.
    
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b71dbaf08f9f5b8fafdeca143c7ed89ed62c1030
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:24 2020 +0200

    ARM: dts: s5pv210: remove dedicated 'audio-subsystem' node
    
    [ Upstream commit 6c17a2974abf68a58517f75741b15c4aba42b4b8 ]
    
    The 'audio-subsystem' node is an artificial creation, not representing
    real hardware.  The hardware is described by its nodes - AUDSS clock
    controller and I2S0.
    
    Remove the 'audio-subsystem' node along with its undocumented compatible
    to fix dtbs_check warnings like:
    
      audio-subsystem: $nodename:0: 'audio-subsystem' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-9-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ad1464467e7fa1a9daf9933e20b041f8f0ada16
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:23 2020 +0200

    ARM: dts: s5pv210: move PMU node out of clock controller
    
    [ Upstream commit bb98fff84ad1ea321823759edaba573a16fa02bd ]
    
    The Power Management Unit (PMU) is a separate device which has little
    common with clock controller.  Moving it to one level up (from clock
    controller child to SoC) allows to remove fake simple-bus compatible and
    dtbs_check warnings like:
    
      clock-controller@e0100000: $nodename:0:
        'clock-controller@e0100000' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-8-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a9024f6e29f6113f607ae75a64537fde2b71b09
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:22 2020 +0200

    ARM: dts: s5pv210: move fixed clocks under root node
    
    [ Upstream commit d38cae370e5f2094cbc38db3082b8e9509ae52ce ]
    
    The fixed clocks are kept under dedicated 'external-clocks' node, thus a
    fake 'reg' was added.  This is not correct with dtschema as fixed-clock
    binding does not have a 'reg' property.  Moving fixed clocks out of
    'soc' to root node fixes multiple dtbs_check warnings:
    
      external-clocks: $nodename:0: 'external-clocks' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
      external-clocks: #size-cells:0:0: 0 is not one of [1, 2]
      external-clocks: oscillator@0:reg:0: [0] is too short
      external-clocks: oscillator@1:reg:0: [1] is too short
      external-clocks: 'ranges' is a required property
      oscillator@0: 'reg' does not match any of the regexes: 'pinctrl-[0-9]+'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-7-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c1b47e8aa4317534df3fd97a400e50c3ba61d87
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:21 2020 +0200

    ARM: dts: s5pv210: remove DMA controller bus node name to fix dtschema warnings
    
    [ Upstream commit ea4e792f3c8931fffec4d700cf6197d84e9f35a6 ]
    
    There is no need to keep DMA controller nodes under AMBA bus node.
    Remove the "amba" node to fix dtschema warnings like:
    
      amba: $nodename:0: 'amba' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-6-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6029d9bc68de0674d3ed12d4661b34d4a276f50
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 26 14:37:59 2020 +0300

    memory: emif: Remove bogus debugfs error handling
    
    [ Upstream commit fd22781648080cc400772b3c68aa6b059d2d5420 ]
    
    Callers are generally not supposed to check the return values from
    debugfs functions.  Debugfs functions never return NULL so this error
    handling will never trigger.  (Historically debugfs functions used to
    return a mix of NULL and error pointers but it was eventually deemed too
    complicated for something which wasn't intended to be used in normal
    situations).
    
    Delete all the error handling.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Link: https://lore.kernel.org/r/20200826113759.GF393664@mwanda
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f98e2843b692fdc2e78c83a88c99cddfd6bd1cd
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 10 14:02:48 2020 -0700

    ARM: dts: omap4: Fix sgx clock rate for 4430
    
    [ Upstream commit 19d3e9a0bdd57b90175f30390edeb06851f5f9f3 ]
    
    We currently have a different clock rate for droid4 compared to the
    stock v3.0.8 based Android Linux kernel:
    
    # cat /sys/kernel/debug/clk/dpll_*_m7x2_ck/clk_rate
    266666667
    307200000
    # cat /sys/kernel/debug/clk/l3_gfx_cm:clk:0000:0/clk_rate
    307200000
    
    Let's fix this by configuring sgx to use 153.6 MHz instead of 307.2 MHz.
    Looks like also at least duover needs this change to avoid hangs, so
    let's apply it for all 4430.
    
    This helps a bit with thermal issues that seem to be related to memory
    corruption when using sgx. It seems that other driver related issues
    still remain though.
    
    Cc: Arthur Demchenkov <spinal.by@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c70f909e7ad6a8c2b94b3db0d598333abb1526f9
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Jul 17 21:33:21 2020 +0900

    arm64: dts: renesas: ulcb: add full-pwr-cycle-in-suspend into eMMC nodes
    
    [ Upstream commit 992d7a8b88c83c05664b649fc54501ce58e19132 ]
    
    Add full-pwr-cycle-in-suspend property to do a graceful shutdown of
    the eMMC device in system suspend.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1594989201-24228-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2dca8845c37923200751b9b3f87d6d7320dc07f
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Fri Oct 9 09:32:56 2020 +1000

    cifs: handle -EINTR in cifs_setattr
    
    [ Upstream commit c6cc4c5a72505a0ecefc9b413f16bec512f38078 ]
    
    RHBZ: 1848178
    
    Some calls that set attributes, like utimensat(), are not supposed to return
    -EINTR and thus do not have handlers for this in glibc which causes us
    to leak -EINTR to the applications which are also unprepared to handle it.
    
    For example tar will break if utimensat() return -EINTR and abort unpacking
    the archive. Other applications may break too.
    
    To handle this we add checks, and retry, for -EINTR in cifs_setattr()
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c78eb161c26550d07abb545473f607bfa251357
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Oct 14 22:01:09 2020 +0530

    gfs2: add validation checks for size of superblock
    
    [ Upstream commit 0ddc5154b24c96f20e94d653b0a814438de6032b ]
    
    In gfs2_check_sb(), no validation checks are performed with regards to
    the size of the superblock.
    syzkaller detected a slab-out-of-bounds bug that was primarily caused
    because the block size for a superblock was set to zero.
    A valid size for a superblock is a power of 2 between 512 and PAGE_SIZE.
    Performing validation checks and ensuring that the size of the superblock
    is valid fixes this bug.
    
    Reported-by: syzbot+af90d47a37376844e731@syzkaller.appspotmail.com
    Tested-by: syzbot+af90d47a37376844e731@syzkaller.appspotmail.com
    Suggested-by: Andrew Price <anprice@redhat.com>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    [Minor code reordering.]
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f7e4bfadfe935d285918cad51b15d151175fdcc
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Mon Oct 12 14:13:09 2020 +0100

    gfs2: use-after-free in sysfs deregistration
    
    [ Upstream commit c2a04b02c060c4858762edce4674d5cba3e5a96f ]
    
    syzkaller found the following splat with CONFIG_DEBUG_KOBJECT_RELEASE=y:
    
      Read of size 1 at addr ffff000028e896b8 by task kworker/1:2/228
    
      CPU: 1 PID: 228 Comm: kworker/1:2 Tainted: G S                5.9.0-rc8+ #101
      Hardware name: linux,dummy-virt (DT)
      Workqueue: events kobject_delayed_cleanup
      Call trace:
       dump_backtrace+0x0/0x4d8
       show_stack+0x34/0x48
       dump_stack+0x174/0x1f8
       print_address_description.constprop.0+0x5c/0x550
       kasan_report+0x13c/0x1c0
       __asan_report_load1_noabort+0x34/0x60
       memcmp+0xd0/0xd8
       gfs2_uevent+0xc4/0x188
       kobject_uevent_env+0x54c/0x1240
       kobject_uevent+0x2c/0x40
       __kobject_del+0x190/0x1d8
       kobject_delayed_cleanup+0x2bc/0x3b8
       process_one_work+0x96c/0x18c0
       worker_thread+0x3f0/0xc30
       kthread+0x390/0x498
       ret_from_fork+0x10/0x18
    
      Allocated by task 1110:
       kasan_save_stack+0x28/0x58
       __kasan_kmalloc.isra.0+0xc8/0xe8
       kasan_kmalloc+0x10/0x20
       kmem_cache_alloc_trace+0x1d8/0x2f0
       alloc_super+0x64/0x8c0
       sget_fc+0x110/0x620
       get_tree_bdev+0x190/0x648
       gfs2_get_tree+0x50/0x228
       vfs_get_tree+0x84/0x2e8
       path_mount+0x1134/0x1da8
       do_mount+0x124/0x138
       __arm64_sys_mount+0x164/0x238
       el0_svc_common.constprop.0+0x15c/0x598
       do_el0_svc+0x60/0x150
       el0_svc+0x34/0xb0
       el0_sync_handler+0xc8/0x5b4
       el0_sync+0x15c/0x180
    
      Freed by task 228:
       kasan_save_stack+0x28/0x58
       kasan_set_track+0x28/0x40
       kasan_set_free_info+0x24/0x48
       __kasan_slab_free+0x118/0x190
       kasan_slab_free+0x14/0x20
       slab_free_freelist_hook+0x6c/0x210
       kfree+0x13c/0x460
    
    Use the same pattern as f2fs + ext4 where the kobject destruction must
    complete before allowing the FS itself to be freed.  This means that we
    need an explicit free_sbd in the callers.
    
    Cc: Bob Peterson <rpeterso@redhat.com>
    Cc: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    [Also go to fail_free when init_names fails.]
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b58c55ba81c55e5428efd2c0dcd8bd9c0283c9e
Author: Fabiano Rosas <farosas@linux.ibm.com>
Date:   Fri Sep 11 01:16:07 2020 -0300

    KVM: PPC: Book3S HV: Do not allocate HPT for a nested guest
    
    [ Upstream commit 05e6295dc7de859c9d56334805485c4d20bebf25 ]
    
    The current nested KVM code does not support HPT guests. This is
    informed/enforced in some ways:
    
    - Hosts < P9 will not be able to enable the nested HV feature;
    
    - The nested hypervisor MMU capabilities will not contain
      KVM_CAP_PPC_MMU_HASH_V3;
    
    - QEMU reflects the MMU capabilities in the
      'ibm,arch-vec-5-platform-support' device-tree property;
    
    - The nested guest, at 'prom_parse_mmu_model' ignores the
      'disable_radix' kernel command line option if HPT is not supported;
    
    - The KVM_PPC_CONFIGURE_V3_MMU ioctl will fail if trying to use HPT.
    
    There is, however, still a way to start a HPT guest by using
    max-compat-cpu=power8 at the QEMU machine options. This leads to the
    guest being set to use hash after QEMU calls the KVM_PPC_ALLOCATE_HTAB
    ioctl.
    
    With the guest set to hash, the nested hypervisor goes through the
    entry path that has no knowledge of nesting (kvmppc_run_vcpu) and
    crashes when it tries to execute an hypervisor-privileged (mtspr
    HDEC) instruction at __kvmppc_vcore_entry:
    
    root@L1:~ $ qemu-system-ppc64 -machine pseries,max-cpu-compat=power8 ...
    
    <snip>
    [  538.543303] CPU: 83 PID: 25185 Comm: CPU 0/KVM Not tainted 5.9.0-rc4 #1
    [  538.543355] NIP:  c00800000753f388 LR: c00800000753f368 CTR: c0000000001e5ec0
    [  538.543417] REGS: c0000013e91e33b0 TRAP: 0700   Not tainted  (5.9.0-rc4)
    [  538.543470] MSR:  8000000002843033 <SF,VEC,VSX,FP,ME,IR,DR,RI,LE>  CR: 22422882  XER: 20040000
    [  538.543546] CFAR: c00800000753f4b0 IRQMASK: 3
                   GPR00: c0080000075397a0 c0000013e91e3640 c00800000755e600 0000000080000000
                   GPR04: 0000000000000000 c0000013eab19800 c000001394de0000 00000043a054db72
                   GPR08: 00000000003b1652 0000000000000000 0000000000000000 c0080000075502e0
                   GPR12: c0000000001e5ec0 c0000007ffa74200 c0000013eab19800 0000000000000008
                   GPR16: 0000000000000000 c00000139676c6c0 c000000001d23948 c0000013e91e38b8
                   GPR20: 0000000000000053 0000000000000000 0000000000000001 0000000000000000
                   GPR24: 0000000000000001 0000000000000001 0000000000000000 0000000000000001
                   GPR28: 0000000000000001 0000000000000053 c0000013eab19800 0000000000000001
    [  538.544067] NIP [c00800000753f388] __kvmppc_vcore_entry+0x90/0x104 [kvm_hv]
    [  538.544121] LR [c00800000753f368] __kvmppc_vcore_entry+0x70/0x104 [kvm_hv]
    [  538.544173] Call Trace:
    [  538.544196] [c0000013e91e3640] [c0000013e91e3680] 0xc0000013e91e3680 (unreliable)
    [  538.544260] [c0000013e91e3820] [c0080000075397a0] kvmppc_run_core+0xbc8/0x19d0 [kvm_hv]
    [  538.544325] [c0000013e91e39e0] [c00800000753d99c] kvmppc_vcpu_run_hv+0x404/0xc00 [kvm_hv]
    [  538.544394] [c0000013e91e3ad0] [c0080000072da4fc] kvmppc_vcpu_run+0x34/0x48 [kvm]
    [  538.544472] [c0000013e91e3af0] [c0080000072d61b8] kvm_arch_vcpu_ioctl_run+0x310/0x420 [kvm]
    [  538.544539] [c0000013e91e3b80] [c0080000072c7450] kvm_vcpu_ioctl+0x298/0x778 [kvm]
    [  538.544605] [c0000013e91e3ce0] [c0000000004b8c2c] sys_ioctl+0x1dc/0xc90
    [  538.544662] [c0000013e91e3dc0] [c00000000002f9a4] system_call_exception+0xe4/0x1c0
    [  538.544726] [c0000013e91e3e20] [c00000000000d140] system_call_common+0xf0/0x27c
    [  538.544787] Instruction dump:
    [  538.544821] f86d1098 60000000 60000000 48000099 e8ad0fe8 e8c500a0 e9264140 75290002
    [  538.544886] 7d1602a6 7cec42a6 40820008 7d0807b4 <7d164ba6> 7d083a14 f90d10a0 480104fd
    [  538.544953] ---[ end trace 74423e2b948c2e0c ]---
    
    This patch makes the KVM_PPC_ALLOCATE_HTAB ioctl fail when running in
    the nested hypervisor, causing QEMU to abort.
    
    Reported-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
    Signed-off-by: Fabiano Rosas <farosas@linux.ibm.com>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7d7920a7f6614e32ebdae205e108ccc2d85d9af
Author: Jan Kara <jack@suse.cz>
Date:   Thu Oct 15 13:03:30 2020 +0200

    ext4: Detect already used quota file early
    
    [ Upstream commit e0770e91424f694b461141cbc99adf6b23006b60 ]
    
    When we try to use file already used as a quota file again (for the same
    or different quota type), strange things can happen. At the very least
    lockdep annotations may be wrong but also inode flags may be wrongly set
    / reset. When the file is used for two quota types at once we can even
    corrupt the file and likely crash the kernel. Catch all these cases by
    checking whether passed file is already used as quota file and bail
    early in that case.
    
    This fixes occasional generic/219 failure due to lockdep complaint.
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Reported-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20201015110330.28716-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d01b6332079910051ae08b763c84018e37a2f425
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Fri Aug 7 16:59:02 2020 +0530

    drivers: watchdog: rdc321x_wdt: Fix race condition bugs
    
    [ Upstream commit 4b2e7f99cdd314263c9d172bc17193b8b6bba463 ]
    
    In rdc321x_wdt_probe(), rdc321x_wdt_device.queue is initialized
    after misc_register(), hence if ioctl is called before its
    initialization which can call rdc321x_wdt_start() function,
    it will see an uninitialized value of rdc321x_wdt_device.queue,
    hence initialize it before misc_register().
    Also, rdc321x_wdt_device.default_ticks is accessed in reset()
    function called from write callback, thus initialize it before
    misc_register().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20200807112902.28764-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 229bdf0b13198d1c4ef0fa1f1c3ab05b2e0d4075
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Oct 12 09:54:04 2020 +0530

    net: 9p: initialize sun_server.sun_path to have addr's value only when addr is valid
    
    [ Upstream commit 7ca1db21ef8e0e6725b4d25deed1ca196f7efb28 ]
    
    In p9_fd_create_unix, checking is performed to see if the addr (passed
    as an argument) is NULL or not.
    However, no check is performed to see if addr is a valid address, i.e.,
    it doesn't entirely consist of only 0's.
    The initialization of sun_server.sun_path to be equal to this faulty
    addr value leads to an uninitialized variable, as detected by KMSAN.
    Checking for this (faulty addr) and returning a negative error number
    appropriately, resolves this issue.
    
    Link: http://lkml.kernel.org/r/20201012042404.2508-1-anant.thazhemadam@gmail.com
    Reported-by: syzbot+75d51fe5bf4ebe988518@syzkaller.appspotmail.com
    Tested-by: syzbot+75d51fe5bf4ebe988518@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 660e2d9d14174a06da03d29c3a6e01e40b47f60b
Author: Tero Kristo <t-kristo@ti.com>
Date:   Mon Sep 7 11:25:59 2020 +0300

    clk: ti: clockdomain: fix static checker warning
    
    [ Upstream commit b7a7943fe291b983b104bcbd2f16e8e896f56590 ]
    
    Fix a memory leak induced by not calling clk_put after doing of_clk_get.
    
    Reported-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Link: https://lore.kernel.org/r/20200907082600.454-3-t-kristo@ti.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f66125e1c4df1eb634732d78ebecc96ee902d5fb
Author: Chris Lew <clew@codeaurora.org>
Date:   Wed Jun 24 22:15:18 2020 +0530

    rpmsg: glink: Use complete_all for open states
    
    [ Upstream commit 4fcdaf6e28d11e2f3820d54dd23cd12a47ddd44e ]
    
    The open_req and open_ack completion variables are the state variables
    to represet a remote channel as open. Use complete_all so there are no
    races with waiters and using completion_done.
    
    Signed-off-by: Chris Lew <clew@codeaurora.org>
    Signed-off-by: Arun Kumar Neelakantam <aneela@codeaurora.org>
    Signed-off-by: Deepak Kumar Singh <deesin@codeaurora.org>
    Link: https://lore.kernel.org/r/1593017121-7953-2-git-send-email-deesin@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfcfccd0507534737a19055d1f7d424c376aa559
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Mon Oct 12 05:10:51 2020 -0400

    bnxt_en: Log unknown link speed appropriately.
    
    [ Upstream commit 8eddb3e7ce124dd6375d3664f1aae13873318b0f ]
    
    If the VF virtual link is set to always enabled, the speed may be
    unknown when the physical link is down.  The driver currently logs
    the link speed as 4294967295 Mbps which is SPEED_UNKNOWN.  Modify
    the link up log message as "speed unknown" which makes more sense.
    
    Reviewed-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/1602493854-29283-7-git-send-email-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78452408bb3e488b11243698acb7322a22be3d36
Author: Zhao Heming <heming.zhao@suse.com>
Date:   Tue Oct 6 00:00:24 2020 +0800

    md/bitmap: md_bitmap_get_counter returns wrong blocks
    
    [ Upstream commit d837f7277f56e70d82b3a4a037d744854e62f387 ]
    
    md_bitmap_get_counter() has code:
    
    ```
        if (bitmap->bp[page].hijacked ||
            bitmap->bp[page].map == NULL)
            csize = ((sector_t)1) << (bitmap->chunkshift +
                          PAGE_COUNTER_SHIFT - 1);
    ```
    
    The minus 1 is wrong, this branch should report 2048 bits of space.
    With "-1" action, this only report 1024 bit of space.
    
    This bug code returns wrong blocks, but it doesn't inflence bitmap logic:
    1. Most callers focus this function return value (the counter of offset),
       not the parameter blocks.
    2. The bug is only triggered when hijacked is true or map is NULL.
       the hijacked true condition is very rare.
       the "map == null" only true when array is creating or resizing.
    3. Even the caller gets wrong blocks, current code makes caller just to
       call md_bitmap_get_counter() one more time.
    
    Signed-off-by: Zhao Heming <heming.zhao@suse.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ebdad05129ed4ecfe32e559b7df116e85b1d9f6
Author: Anand Jain <anand.jain@oracle.com>
Date:   Sat Sep 5 01:34:22 2020 +0800

    btrfs: fix replace of seed device
    
    [ Upstream commit c6a5d954950c5031444173ad2195efc163afcac9 ]
    
    If you replace a seed device in a sprouted fs, it appears to have
    successfully replaced the seed device, but if you look closely, it
    didn't.  Here is an example.
    
      $ mkfs.btrfs /dev/sda
      $ btrfstune -S1 /dev/sda
      $ mount /dev/sda /btrfs
      $ btrfs device add /dev/sdb /btrfs
      $ umount /btrfs
      $ btrfs device scan --forget
      $ mount -o device=/dev/sda /dev/sdb /btrfs
      $ btrfs replace start -f /dev/sda /dev/sdc /btrfs
      $ echo $?
      0
    
      BTRFS info (device sdb): dev_replace from /dev/sda (devid 1) to /dev/sdc started
      BTRFS info (device sdb): dev_replace from /dev/sda (devid 1) to /dev/sdc finished
    
      $ btrfs fi show
      Label: none  uuid: ab2c88b7-be81-4a7e-9849-c3666e7f9f4f
              Total devices 2 FS bytes used 256.00KiB
              devid    1 size 3.00GiB used 520.00MiB path /dev/sdc
              devid    2 size 3.00GiB used 896.00MiB path /dev/sdb
    
      Label: none  uuid: 10bd3202-0415-43af-96a8-d5409f310a7e
              Total devices 1 FS bytes used 128.00KiB
              devid    1 size 3.00GiB used 536.00MiB path /dev/sda
    
    So as per the replace start command and kernel log replace was successful.
    Now let's try to clean mount.
    
      $ umount /btrfs
      $ btrfs device scan --forget
    
      $ mount -o device=/dev/sdc /dev/sdb /btrfs
      mount: /btrfs: wrong fs type, bad option, bad superblock on /dev/sdb, missing codepage or helper program, or other error.
    
      [  636.157517] BTRFS error (device sdc): failed to read chunk tree: -2
      [  636.180177] BTRFS error (device sdc): open_ctree failed
    
    That's because per dev items it is still looking for the original seed
    device.
    
     $ btrfs inspect-internal dump-tree -d /dev/sdb
    
            item 0 key (DEV_ITEMS DEV_ITEM 1) itemoff 16185 itemsize 98
                    devid 1 total_bytes 3221225472 bytes_used 545259520
                    io_align 4096 io_width 4096 sector_size 4096 type 0
                    generation 6 start_offset 0 dev_group 0
                    seek_speed 0 bandwidth 0
                    uuid 59368f50-9af2-4b17-91da-8a783cc418d4  <--- seed uuid
                    fsid 10bd3202-0415-43af-96a8-d5409f310a7e  <--- seed fsid
            item 1 key (DEV_ITEMS DEV_ITEM 2) itemoff 16087 itemsize 98
                    devid 2 total_bytes 3221225472 bytes_used 939524096
                    io_align 4096 io_width 4096 sector_size 4096 type 0
                    generation 0 start_offset 0 dev_group 0
                    seek_speed 0 bandwidth 0
                    uuid 56a0a6bc-4630-4998-8daf-3c3030c4256a  <- sprout uuid
                    fsid ab2c88b7-be81-4a7e-9849-c3666e7f9f4f <- sprout fsid
    
    But the replaced target has the following uuid+fsid in its superblock
    which doesn't match with the expected uuid+fsid in its devitem.
    
      $ btrfs in dump-super /dev/sdc | egrep '^generation|dev_item.uuid|dev_item.fsid|devid'
      generation    20
      dev_item.uuid 59368f50-9af2-4b17-91da-8a783cc418d4
      dev_item.fsid ab2c88b7-be81-4a7e-9849-c3666e7f9f4f [match]
      dev_item.devid        1
    
    So if you provide the original seed device the mount shall be
    successful.  Which so long happening in the test case btrfs/163.
    
      $ btrfs device scan --forget
      $ mount -o device=/dev/sda /dev/sdb /btrfs
    
    Fix in this patch:
    If a seed is not sprouted then there is no replacement of it, because of
    its read-only filesystem with a read-only device. Similarly, in the case
    of a sprouted filesystem, the seed device is still read only. So, mark
    it as you can't replace a seed device, you can only add a new device and
    then delete the seed device. If replace is attempted then returns
    -EINVAL.
    
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f145a1193ea8c87a11f3d58a96ce665832cbb13
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Thu Sep 24 15:17:54 2020 +0800

    ARC: [dts] fix the errors detected by dtbs_check
    
    [ Upstream commit 05b1be68c4d6d76970025e6139bfd735c2256ee5 ]
    
    xxx/arc/boot/dts/axs101.dt.yaml: dw-apb-ictl@e0012000: $nodename:0: \
    'dw-apb-ictl@e0012000' does not match '^interrupt-controller(@[0-9a-f,]+)*$'
     From schema: xxx/interrupt-controller/snps,dw-apb-ictl.yaml
    
    The node name of the interrupt controller must start with
    "interrupt-controller" instead of "dw-apb-ictl".
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5759f38a63dbc0130080d925af557e9cdc63b7bf
Author: Fangzhi Zuo <Jerry.Zuo@amd.com>
Date:   Mon Sep 21 17:52:43 2020 -0400

    drm/amd/display: HDMI remote sink need mode validation for Linux
    
    [ Upstream commit 95d620adb48f7728e67d82f56f756e8d451cf8d2 ]
    
    [Why]
    Currently mode validation is bypassed if remote sink exists. That
    leads to mode set issue when a BW bottle neck exists in the link path,
    e.g., a DP-to-HDMI converter that only supports HDMI 1.4.
    
    Any invalid mode passed to Linux user space will cause the modeset
    failure due to limitation of Linux user space implementation.
    
    [How]
    Mode validation is skipped only if in edid override. For real remote
    sink, clock limit check should be done for HDMI remote sink.
    
    Have HDMI related remote sink going through mode validation to
    elimiate modes which pixel clock exceeds BW limitation.
    
    Signed-off-by: Fangzhi Zuo <Jerry.Zuo@amd.com>
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Eryk Brol <eryk.brol@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ef6095d65872de3e42eff559ad06a150840d7d8
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Sep 4 14:09:58 2020 +0800

    power: supply: test_power: add missing newlines when printing parameters by sysfs
    
    [ Upstream commit c07fa6c1631333f02750cf59f22b615d768b4d8f ]
    
    When I cat some module parameters by sysfs, it displays as follows.
    It's better to add a newline for easy reading.
    
    root@syzkaller:~# cd /sys/module/test_power/parameters/
    root@syzkaller:/sys/module/test_power/parameters# cat ac_online
    onroot@syzkaller:/sys/module/test_power/parameters# cat battery_present
    trueroot@syzkaller:/sys/module/test_power/parameters# cat battery_health
    goodroot@syzkaller:/sys/module/test_power/parameters# cat battery_status
    dischargingroot@syzkaller:/sys/module/test_power/parameters# cat battery_technology
    LIONroot@syzkaller:/sys/module/test_power/parameters# cat usb_online
    onroot@syzkaller:/sys/module/test_power/parameters#
    
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf5a6124f23725d8510b1fba976a4f341f5d1925
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Sep 30 22:05:45 2020 +0800

    ACPI: HMAT: Fix handling of changes from ACPI 6.2 to ACPI 6.3
    
    [ Upstream commit 2c5b9bde95c96942f2873cea6ef383c02800e4a8 ]
    
    In ACPI 6.3, the Memory Proximity Domain Attributes Structure
    changed substantially.  One of those changes was that the flag
    for "Memory Proximity Domain field is valid" was deprecated.
    
    This was because the field "Proximity Domain for the Memory"
    became a required field and hence having a validity flag makes
    no sense.
    
    So the correct logic is to always assume the field is there.
    Current code assumes it never is.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37464a8a7f68373536f76fd9dbaa5293a88f1823
Author: Diana Craciun <diana.craciun@oss.nxp.com>
Date:   Tue Sep 29 11:54:38 2020 +0300

    bus/fsl_mc: Do not rely on caller to provide non NULL mc_io
    
    [ Upstream commit 5026cf605143e764e1785bbf9158559d17f8d260 ]
    
    Before destroying the mc_io, check first that it was
    allocated.
    
    Reviewed-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
    Acked-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
    Signed-off-by: Diana Craciun <diana.craciun@oss.nxp.com>
    Link: https://lore.kernel.org/r/20200929085441.17448-11-diana.craciun@oss.nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0606a8df86fe0cc0e03869cf2f6d01dec554b163
Author: Xie He <xie.he.0141@gmail.com>
Date:   Mon Sep 28 05:56:43 2020 -0700

    drivers/net/wan/hdlc_fr: Correctly handle special skb->protocol values
    
    [ Upstream commit 8306266c1d51aac9aa7aa907fe99032a58c6382c ]
    
    The fr_hard_header function is used to prepend the header to skbs before
    transmission. It is used in 3 situations:
    1) When a control packet is generated internally in this driver;
    2) When a user sends an skb on an Ethernet-emulating PVC device;
    3) When a user sends an skb on a normal PVC device.
    
    These 3 situations need to be handled differently by fr_hard_header.
    Different headers should be prepended to the skb in different situations.
    
    Currently fr_hard_header distinguishes these 3 situations using
    skb->protocol. For situation 1 and 2, a special skb->protocol value
    will be assigned before calling fr_hard_header, so that it can recognize
    these 2 situations. All skb->protocol values other than these special ones
    are treated by fr_hard_header as situation 3.
    
    However, it is possible that in situation 3, the user sends an skb with
    one of the special skb->protocol values. In this case, fr_hard_header
    would incorrectly treat it as situation 1 or 2.
    
    This patch tries to solve this issue by using skb->dev instead of
    skb->protocol to distinguish between these 3 situations. For situation
    1, skb->dev would be NULL; for situation 2, skb->dev->type would be
    ARPHRD_ETHER; and for situation 3, skb->dev->type would be ARPHRD_DLCI.
    
    This way fr_hard_header would be able to distinguish these 3 situations
    correctly regardless what skb->protocol value the user tries to use in
    situation 3.
    
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 592cbc0a6a83c06e245365e127c5452a400c8aec
Author: Wright Feng <wright.feng@cypress.com>
Date:   Mon Sep 28 00:49:22 2020 -0500

    brcmfmac: Fix warning message after dongle setup failed
    
    [ Upstream commit 6aa5a83a7ed8036c1388a811eb8bdfa77b21f19c ]
    
    Brcmfmac showed warning message in fweh.c when checking the size of event
    queue which is not initialized. Therefore, we only cancel the worker and
    reset event handler only when it is initialized.
    
    [  145.505899] brcmfmac 0000:02:00.0: brcmf_pcie_setup: Dongle setup
    [  145.929970] ------------[ cut here ]------------
    [  145.929994] WARNING: CPU: 0 PID: 288 at drivers/net/wireless/broadcom/brcm80211/brcmfmac/fweh.c:312
    brcmf_fweh_detach+0xbc/0xd0 [brcmfmac]
    ...
    [  145.930029] Call Trace:
    [  145.930036]  brcmf_detach+0x77/0x100 [brcmfmac]
    [  145.930043]  brcmf_pcie_remove+0x79/0x130 [brcmfmac]
    [  145.930046]  pci_device_remove+0x39/0xc0
    [  145.930048]  device_release_driver_internal+0x141/0x200
    [  145.930049]  device_release_driver+0x12/0x20
    [  145.930054]  brcmf_pcie_setup+0x101/0x3c0 [brcmfmac]
    [  145.930060]  brcmf_fw_request_done+0x11d/0x1f0 [brcmfmac]
    [  145.930062]  ? lock_timer_base+0x7d/0xa0
    [  145.930063]  ? internal_add_timer+0x1f/0xa0
    [  145.930064]  ? add_timer+0x11a/0x1d0
    [  145.930066]  ? __kmalloc_track_caller+0x18c/0x230
    [  145.930068]  ? kstrdup_const+0x23/0x30
    [  145.930069]  ? add_dr+0x46/0x80
    [  145.930070]  ? devres_add+0x3f/0x50
    [  145.930072]  ? usermodehelper_read_unlock+0x15/0x20
    [  145.930073]  ? _request_firmware+0x288/0xa20
    [  145.930075]  request_firmware_work_func+0x36/0x60
    [  145.930077]  process_one_work+0x144/0x360
    [  145.930078]  worker_thread+0x4d/0x3c0
    [  145.930079]  kthread+0x112/0x150
    [  145.930080]  ? rescuer_thread+0x340/0x340
    [  145.930081]  ? kthread_park+0x60/0x60
    [  145.930083]  ret_from_fork+0x25/0x30
    
    Signed-off-by: Wright Feng <wright.feng@cypress.com>
    Signed-off-by: Chi-hsien Lin <chi-hsien.lin@cypress.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200928054922.44580-3-wright.feng@cypress.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf9cc49cd881139d56bdd7303ee897d8ff35b383
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Tue Aug 18 22:24:25 2020 +0800

    ACPI: Add out of bounds and numa_off protections to pxm_to_node()
    
    [ Upstream commit 8a3decac087aa897df5af04358c2089e52e70ac4 ]
    
    The function should check the validity of the pxm value before using
    it to index the pxm_to_node_map[] array.
    
    Whilst hardening this code may be good in general, the main intent
    here is to enable following patches that use this function to replace
    acpi_map_pxm_to_node() for non SRAT usecases which should return
    NO_NUMA_NODE for PXM entries not matching with those in SRAT.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Barry Song <song.bao.hua@hisilicon.com>
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5880a0d1c83536e02502d014f24c186b127effdd
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Mon Sep 21 09:15:08 2020 -0700

    xfs: don't free rt blocks when we're doing a REMAP bunmapi call
    
    [ Upstream commit 8df0fa39bdd86ca81a8d706a6ed9d33cc65ca625 ]
    
    When callers pass XFS_BMAPI_REMAP into xfs_bunmapi, they want the extent
    to be unmapped from the given file fork without the extent being freed.
    We do this for non-rt files, but we forgot to do this for realtime
    files.  So far this isn't a big deal since nobody makes a bunmapi call
    to a rt file with the REMAP flag set, but don't leave a logic bomb.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7551e2f4fddd49968ee7f6beba6baacff6235663
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Tue Dec 10 09:00:13 2019 +0000

    can: flexcan: disable clocks during stop mode
    
    [ Upstream commit 02f71c6605e1f8259c07f16178330db766189a74 ]
    
    Disable clocks while CAN core is in stop mode.
    
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Tested-by: Sean Nyekjaer <sean@geanix.com>
    Link: https://lore.kernel.org/r/20191210085721.9853-2-qiangqing.zhang@nxp.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64129ad98b74b47120da035e723ceccf75a65323
Author: Zhengyuan Liu <liuzhengyuan@tj.kylinos.cn>
Date:   Mon Sep 21 10:39:36 2020 +0800

    arm64/mm: return cpu_all_mask when node is NUMA_NO_NODE
    
    [ Upstream commit a194c5f2d2b3a05428805146afcabe5140b5d378 ]
    
    The @node passed to cpumask_of_node() can be NUMA_NO_NODE, in that
    case it will trigger the following WARN_ON(node >= nr_node_ids) due to
    mismatched data types of @node and @nr_node_ids. Actually we should
    return cpu_all_mask just like most other architectures do if passed
    NUMA_NO_NODE.
    
    Also add a similar check to the inline cpumask_of_node() in numa.h.
    
    Signed-off-by: Zhengyuan Liu <liuzhengyuan@tj.kylinos.cn>
    Reviewed-by: Gavin Shan <gshan@redhat.com>
    Link: https://lore.kernel.org/r/20200921023936.21846-1-liuzhengyuan@tj.kylinos.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea888a14ac6e563f4289c95049bbd49a8e8c42a3
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Wed Jul 8 16:09:53 2020 -0400

    SUNRPC: Mitigate cond_resched() in xprt_transmit()
    
    [ Upstream commit 6f9f17287e78e5049931af2037b15b26d134a32a ]
    
    The original purpose of this expensive call is to prevent a long
    queue of requests from blocking other work.
    
    The cond_resched() call is unnecessary after just a single send
    operation.
    
    For longer queues, instead of invoking the kernel scheduler, simply
    release the transport send lock and return to the RPC scheduler.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f7f437277ac745697c24e01012c234f958d10c9
Author: Peter Chen <peter.chen@nxp.com>
Date:   Fri Sep 18 16:17:49 2020 +0300

    usb: xhci: omit duplicate actions when suspending a runtime suspended host.
    
    [ Upstream commit 18a367e8947d72dd91b6fc401e88a2952c6363f7 ]
    
    If the xhci-plat.c is the platform driver, after the runtime pm is
    enabled, the xhci_suspend is called if nothing is connected on
    the port. When the system goes to suspend, it will call xhci_suspend again
    if USB wakeup is enabled.
    
    Since the runtime suspend wakeup setting is not always the same as
    system suspend wakeup setting, eg, at runtime suspend we always need
    wakeup if the controller is in low power mode; but at system suspend,
    we may not need wakeup. So, we move the judgement after changing
    wakeup setting.
    
    [commit message rewording -Mathias]
    
    Reviewed-by: Jun Li <jun.li@nxp.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200918131752.16488-8-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fd52a21ab570e80f84f39e12affce42a5300e91
Author: Linu Cherian <lcherian@marvell.com>
Date:   Wed Sep 16 13:17:35 2020 -0600

    coresight: Make sysfs functional on topologies with per core sink
    
    [ Upstream commit 6d578258b955fc8888e1bbd9a8fefe7b10065a84 ]
    
    Coresight driver assumes sink is common across all the ETMs,
    and tries to build a path between ETM and the first enabled
    sink found using bus based search. This breaks sysFS usage
    on implementations that has multiple per core sinks in
    enabled state.
    
    To fix this, coresight_get_enabled_sink API is updated to
    do a connection based search starting from the given source,
    instead of bus based search.
    With sink selection using sysfs depecrated for perf interface,
    provision for reset is removed as well in this API.
    
    Signed-off-by: Linu Cherian <lcherian@marvell.com>
    [Fixed indentation problem and removed obsolete comment]
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200916191737.4001561-15-mathieu.poirier@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2502107a9ccd23c36331eeff575fe0f29f3ddc75
Author: Lang Dai <lang.dai@intel.com>
Date:   Mon Sep 14 11:26:41 2020 +0800

    uio: free uio id after uio file node is freed
    
    [ Upstream commit 8fd0e2a6df262539eaa28b0a2364cca10d1dc662 ]
    
    uio_register_device() do two things.
    1) get an uio id from a global pool, e.g. the id is <A>
    2) create file nodes like /sys/class/uio/uio<A>
    
    uio_unregister_device() do two things.
    1) free the uio id <A> and return it to the global pool
    2) free the file node /sys/class/uio/uio<A>
    
    There is a situation is that one worker is calling uio_unregister_device(),
    and another worker is calling uio_register_device().
    If the two workers are X and Y, they go as below sequence,
    1) X free the uio id <AAA>
    2) Y get an uio id <AAA>
    3) Y create file node /sys/class/uio/uio<AAA>
    4) X free the file note /sys/class/uio/uio<AAA>
    Then it will failed at the 3rd step and cause the phenomenon we saw as it
    is creating a duplicated file node.
    
    Failure reports as follows:
    sysfs: cannot create duplicate filename '/class/uio/uio10'
    Call Trace:
       sysfs_do_create_link_sd.isra.2+0x9e/0xb0
       sysfs_create_link+0x25/0x40
       device_add+0x2c4/0x640
       __uio_register_device+0x1c5/0x576 [uio]
       adf_uio_init_bundle_dev+0x231/0x280 [intel_qat]
       adf_uio_register+0x1c0/0x340 [intel_qat]
       adf_dev_start+0x202/0x370 [intel_qat]
       adf_dev_start_async+0x40/0xa0 [intel_qat]
       process_one_work+0x14d/0x410
       worker_thread+0x4b/0x460
       kthread+0x105/0x140
     ? process_one_work+0x410/0x410
     ? kthread_bind+0x40/0x40
     ret_from_fork+0x1f/0x40
     Code: 85 c0 48 89 c3 74 12 b9 00 10 00 00 48 89 c2 31 f6 4c 89 ef
     e8 ec c4 ff ff 4c 89 e2 48 89 de 48 c7 c7 e8 b4 ee b4 e8 6a d4 d7
     ff <0f> 0b 48 89 df e8 20 fa f3 ff 5b 41 5c 41 5d 5d c3 66 0f 1f 84
    ---[ end trace a7531c1ed5269e84 ]---
     c6xxvf b002:00:00.0: Failed to register UIO devices
     c6xxvf b002:00:00.0: Failed to register UIO devices
    
    Signed-off-by: Lang Dai <lang.dai@intel.com>
    
    Link: https://lore.kernel.org/r/1600054002-17722-1-git-send-email-lang.dai@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16b9e40d2989871df227d032af7f9a79bb1556bd
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Sep 17 13:26:00 2020 +0200

    USB: adutux: fix debugging
    
    [ Upstream commit c56150c1bc8da5524831b1dac2eec3c67b89f587 ]
    
    Handling for removal of the controller was missing at one place.
    Add it.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20200917112600.26508-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65052761eeb9931c7478dd578e3616857e0d4b66
Author: Alain Volmat <avolmat@me.com>
Date:   Mon Aug 31 08:10:11 2020 +0200

    cpufreq: sti-cpufreq: add stih418 support
    
    [ Upstream commit 01a163c52039e9426c7d3d3ab16ca261ad622597 ]
    
    The STiH418 can be controlled the same way as STiH407 &
    STiH410 regarding cpufreq.
    
    Signed-off-by: Alain Volmat <avolmat@me.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eab702ee94587333b256eba7f9f1c9cfed57c32
Author: Zong Li <zong.li@sifive.com>
Date:   Mon Aug 31 15:33:49 2020 +0800

    riscv: Define AT_VECTOR_SIZE_ARCH for ARCH_DLINFO
    
    [ Upstream commit b5fca7c55f9fbab5ad732c3bce00f31af6ba5cfa ]
    
    AT_VECTOR_SIZE_ARCH should be defined with the maximum number of
    NEW_AUX_ENT entries that ARCH_DLINFO can contain, but it wasn't defined
    for RISC-V at all even though ARCH_DLINFO will contain one NEW_AUX_ENT
    for the VDSO address.
    
    Signed-off-by: Zong Li <zong.li@sifive.com>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Reviewed-by: Pekka Enberg <penberg@kernel.org>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7762afa04fd4810e88f380cf066c1d5945fb7b7b
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Thu Sep 10 10:31:05 2020 +0200

    samples/bpf: Fix possible deadlock in xdpsock
    
    [ Upstream commit 5a2a0dd88f0f267ac5953acd81050ae43a82201f ]
    
    Fix a possible deadlock in the l2fwd application in xdpsock that can
    occur when there is no space in the Tx ring. There are two ways to get
    the kernel to consume entries in the Tx ring: calling sendto() to make
    it send packets and freeing entries from the completion ring, as the
    kernel will not send a packet if there is no space for it to add a
    completion entry in the completion ring. The Tx loop in l2fwd only
    used to call sendto(). This patches adds cleaning the completion ring
    in that loop.
    
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/1599726666-8431-3-git-send-email-magnus.karlsson@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58c80462e4671f9f146d6424328f1d68412769fa
Author: Yonghong Song <yhs@fb.com>
Date:   Thu Sep 10 13:27:18 2020 -0700

    selftests/bpf: Define string const as global for test_sysctl_prog.c
    
    [ Upstream commit 6e057fc15a2da4ee03eb1fa6889cf687e690106e ]
    
    When tweaking llvm optimizations, I found that selftest build failed
    with the following error:
      libbpf: elf: skipping unrecognized data section(6) .rodata.str1.1
      libbpf: prog 'sysctl_tcp_mem': bad map relo against '.L__const.is_tcp_mem.tcp_mem_name'
              in section '.rodata.str1.1'
      Error: failed to open BPF object file: Relocation failed
      make: *** [/work/net-next/tools/testing/selftests/bpf/test_sysctl_prog.skel.h] Error 255
      make: *** Deleting file `/work/net-next/tools/testing/selftests/bpf/test_sysctl_prog.skel.h'
    
    The local string constant "tcp_mem_name" is put into '.rodata.str1.1' section
    which libbpf cannot handle. Using untweaked upstream llvm, "tcp_mem_name"
    is completely inlined after loop unrolling.
    
    Commit 7fb5eefd7639 ("selftests/bpf: Fix test_sysctl_loop{1, 2}
    failure due to clang change") solved a similar problem by defining
    the string const as a global. Let us do the same here
    for test_sysctl_prog.c so it can weather future potential llvm changes.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20200910202718.956042-1-yhs@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f71fb76a312719226f010249c55f6269f4d9a57
Author: Daniel W. S. Almeida <dwlsalmeida@gmail.com>
Date:   Fri Aug 7 10:35:30 2020 +0200

    media: uvcvideo: Fix dereference of out-of-bound list iterator
    
    [ Upstream commit f875bcc375c738bf2f599ff2e1c5b918dbd07c45 ]
    
    Fixes the following coccinelle report:
    
    drivers/media/usb/uvc/uvc_ctrl.c:1860:5-11:
    ERROR: invalid reference to the index variable of the iterator on line 1854
    
    by adding a boolean variable to check if the loop has found the
    
    Found using - Coccinelle (http://coccinelle.lip6.fr)
    
    [Replace cursor variable with bool found]
    
    Signed-off-by: Daniel W. S. Almeida <dwlsalmeida@gmail.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4801ffdd6962ad70f32aa6e7d8fc9cfc4789ab81
Author: Yonghong Song <yhs@fb.com>
Date:   Tue Sep 8 10:57:02 2020 -0700

    bpf: Permit map_ptr arithmetic with opcode add and offset 0
    
    [ Upstream commit 7c6967326267bd5c0dded0a99541357d70dd11ac ]
    
    Commit 41c48f3a98231 ("bpf: Support access
    to bpf map fields") added support to access map fields
    with CORE support. For example,
    
                struct bpf_map {
                        __u32 max_entries;
                } __attribute__((preserve_access_index));
    
                struct bpf_array {
                        struct bpf_map map;
                        __u32 elem_size;
                } __attribute__((preserve_access_index));
    
                struct {
                        __uint(type, BPF_MAP_TYPE_ARRAY);
                        __uint(max_entries, 4);
                        __type(key, __u32);
                        __type(value, __u32);
                } m_array SEC(".maps");
    
                SEC("cgroup_skb/egress")
                int cg_skb(void *ctx)
                {
                        struct bpf_array *array = (struct bpf_array *)&m_array;
    
                        /* .. array->map.max_entries .. */
                }
    
    In kernel, bpf_htab has similar structure,
    
                struct bpf_htab {
                        struct bpf_map map;
                        ...
                }
    
    In the above cg_skb(), to access array->map.max_entries, with CORE, the clang will
    generate two builtin's.
                base = &m_array;
                /* access array.map */
                map_addr = __builtin_preserve_struct_access_info(base, 0, 0);
                /* access array.map.max_entries */
                max_entries_addr = __builtin_preserve_struct_access_info(map_addr, 0, 0);
                max_entries = *max_entries_addr;
    
    In the current llvm, if two builtin's are in the same function or
    in the same function after inlining, the compiler is smart enough to chain
    them together and generates like below:
                base = &m_array;
                max_entries = *(base + reloc_offset); /* reloc_offset = 0 in this case */
    and we are fine.
    
    But if we force no inlining for one of functions in test_map_ptr() selftest, e.g.,
    check_default(), the above two __builtin_preserve_* will be in two different
    functions. In this case, we will have code like:
       func check_hash():
                reloc_offset_map = 0;
                base = &m_array;
                map_base = base + reloc_offset_map;
                check_default(map_base, ...)
       func check_default(map_base, ...):
                max_entries = *(map_base + reloc_offset_max_entries);
    
    In kernel, map_ptr (CONST_PTR_TO_MAP) does not allow any arithmetic.
    The above "map_base = base + reloc_offset_map" will trigger a verifier failure.
      ; VERIFY(check_default(&hash->map, map));
      0: (18) r7 = 0xffffb4fe8018a004
      2: (b4) w1 = 110
      3: (63) *(u32 *)(r7 +0) = r1
       R1_w=invP110 R7_w=map_value(id=0,off=4,ks=4,vs=8,imm=0) R10=fp0
      ; VERIFY_TYPE(BPF_MAP_TYPE_HASH, check_hash);
      4: (18) r1 = 0xffffb4fe8018a000
      6: (b4) w2 = 1
      7: (63) *(u32 *)(r1 +0) = r2
       R1_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R2_w=invP1 R7_w=map_value(id=0,off=4,ks=4,vs=8,imm=0) R10=fp0
      8: (b7) r2 = 0
      9: (18) r8 = 0xffff90bcb500c000
      11: (18) r1 = 0xffff90bcb500c000
      13: (0f) r1 += r2
      R1 pointer arithmetic on map_ptr prohibited
    
    To fix the issue, let us permit map_ptr + 0 arithmetic which will
    result in exactly the same map_ptr.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20200908175702.2463625-1-yhs@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7f7b77ee507ace0edfda7b14efa189eb926bc2e
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Jun 30 15:14:38 2020 -0700

    kgdb: Make "kgdbcon" work properly with "kgdb_earlycon"
    
    [ Upstream commit b18b099e04f450cdc77bec72acefcde7042bd1f3 ]
    
    On my system the kernel processes the "kgdb_earlycon" parameter before
    the "kgdbcon" parameter.  When we setup "kgdb_earlycon" we'll end up
    in kgdb_register_callbacks() and "kgdb_use_con" won't have been set
    yet so we'll never get around to starting "kgdbcon".  Let's remedy
    this by detecting that the IO module was already registered when
    setting "kgdb_use_con" and registering the console then.
    
    As part of this, to avoid pre-declaring things, move the handling of
    the "kgdbcon" further down in the file.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200630151422.1.I4aa062751ff5e281f5116655c976dff545c09a46@changeid
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77fa5e15c933a1ec812de61ad709c00aa51e96ae
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Aug 29 22:01:09 2020 +0900

    ia64: kprobes: Use generic kretprobe trampoline handler
    
    [ Upstream commit e792ff804f49720ce003b3e4c618b5d996256a18 ]
    
    Use the generic kretprobe trampoline handler. Don't use
    framepointer verification.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/159870606883.1229682.12331813108378725668.stgit@devnote2
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3142fe7ff63b92e6efac0b75e4e7941f338bc53
Author: John Ogness <john.ogness@linutronix.de>
Date:   Wed Aug 12 09:37:22 2020 +0206

    printk: reduce LOG_BUF_SHIFT range for H8300
    
    [ Upstream commit 550c10d28d21bd82a8bb48debbb27e6ed53262f6 ]
    
    The .bss section for the h8300 is relatively small. A value of
    CONFIG_LOG_BUF_SHIFT that is larger than 19 will create a static
    printk ringbuffer that is too large. Limit the range appropriately
    for the H8300.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: John Ogness <john.ogness@linutronix.de>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Link: https://lore.kernel.org/r/20200812073122.25412-1-john.ogness@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80685a94f7c41f8e817d8588ef4e8afb3667101a
Author: Valentin Schneider <valentin.schneider@arm.com>
Date:   Sat Aug 29 14:00:16 2020 +0100

    arm64: topology: Stop using MPIDR for topology information
    
    [ Upstream commit 3102bc0e6ac752cc5df896acb557d779af4d82a1 ]
    
    In the absence of ACPI or DT topology data, we fallback to haphazardly
    decoding *something* out of MPIDR. Sadly, the contents of that register are
    mostly unusable due to the implementation leniancy and things like Aff0
    having to be capped to 15 (despite being encoded on 8 bits).
    
    Consider a simple system with a single package of 32 cores, all under the
    same LLC. We ought to be shoving them in the same core_sibling mask, but
    MPIDR is going to look like:
    
      | CPU  | 0 | ... | 15 | 16 | ... | 31 |
      |------+---+-----+----+----+-----+----+
      | Aff0 | 0 | ... | 15 |  0 | ... | 15 |
      | Aff1 | 0 | ... |  0 |  1 | ... |  1 |
      | Aff2 | 0 | ... |  0 |  0 | ... |  0 |
    
    Which will eventually yield
    
      core_sibling(0-15)  == 0-15
      core_sibling(16-31) == 16-31
    
    NUMA woes
    =========
    
    If we try to play games with this and set up NUMA boundaries within those
    groups of 16 cores via e.g. QEMU:
    
      # Node0: 0-9; Node1: 10-19
      $ qemu-system-aarch64 <blah> \
        -smp 20 -numa node,cpus=0-9,nodeid=0 -numa node,cpus=10-19,nodeid=1
    
    The scheduler's MC domain (all CPUs with same LLC) is going to be built via
    
      arch_topology.c::cpu_coregroup_mask()
    
    In there we try to figure out a sensible mask out of the topology
    information we have. In short, here we'll pick the smallest of NUMA or
    core sibling mask.
    
      node_mask(CPU9)    == 0-9
      core_sibling(CPU9) == 0-15
    
    MC mask for CPU9 will thus be 0-9, not a problem.
    
      node_mask(CPU10)    == 10-19
      core_sibling(CPU10) == 0-15
    
    MC mask for CPU10 will thus be 10-19, not a problem.
    
      node_mask(CPU16)    == 10-19
      core_sibling(CPU16) == 16-19
    
    MC mask for CPU16 will thus be 16-19... Uh oh. CPUs 16-19 are in two
    different unique MC spans, and the scheduler has no idea what to make of
    that. That triggers the WARN_ON() added by commit
    
      ccf74128d66c ("sched/topology: Assert non-NUMA topology masks don't (partially) overlap")
    
    Fixing MPIDR-derived topology
    =============================
    
    We could try to come up with some cleverer scheme to figure out which of
    the available masks to pick, but really if one of those masks resulted from
    MPIDR then it should be discarded because it's bound to be bogus.
    
    I was hoping to give MPIDR a chance for SMT, to figure out which threads are
    in the same core using Aff1-3 as core ID, but Sudeep and Robin pointed out
    to me that there are systems out there where *all* cores have non-zero
    values in their higher affinity fields (e.g. RK3288 has "5" in all of its
    cores' MPIDR.Aff1), which would expose a bogus core ID to userspace.
    
    Stop using MPIDR for topology information. When no other source of topology
    information is available, mark each CPU as its own core and its NUMA node
    as its LLC domain.
    
    Signed-off-by: Valentin Schneider <valentin.schneider@arm.com>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Link: https://lore.kernel.org/r/20200829130016.26106-1-valentin.schneider@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7975367a005f6675aca53efd48f2f02d073037e8
Author: Antonio Borneo <antonio.borneo@st.com>
Date:   Wed Jul 1 21:42:34 2020 +0200

    drm/bridge/synopsys: dsi: add support for non-continuous HS clock
    
    [ Upstream commit c6d94e37bdbb6dfe7e581e937a915ab58399b8a5 ]
    
    Current code enables the HS clock when video mode is started or to
    send out a HS command, and disables the HS clock to send out a LP
    command. This is not what DSI spec specify.
    
    Enable HS clock either in command and in video mode.
    Set automatic HS clock management for panels and devices that
    support non-continuous HS clock.
    
    Signed-off-by: Antonio Borneo <antonio.borneo@st.com>
    Tested-by: Philippe Cornu <philippe.cornu@st.com>
    Reviewed-by: Philippe Cornu <philippe.cornu@st.com>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200701194234.18123-1-yannick.fertre@st.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3fb88a51c047e768634a9a6de5c9743119c3924
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Sat Aug 22 11:45:28 2020 +0530

    mmc: via-sdmmc: Fix data race bug
    
    [ Upstream commit 87d7ad089b318b4f319bf57f1daa64eb6d1d10ad ]
    
    via_save_pcictrlreg() should be called with host->lock held
    as it writes to pm_pcictrl_reg, otherwise there can be a race
    condition between via_sd_suspend() and via_sdc_card_detect().
    The same pattern is used in the function via_reset_pcictrl()
    as well, where via_save_pcictrlreg() is called with host->lock
    held.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Link: https://lore.kernel.org/r/20200822061528.7035-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67e18c92e0818005b2caf892e4a274eefaa65e1b
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Fri Jul 3 11:20:32 2020 +0200

    media: imx274: fix frame interval handling
    
    [ Upstream commit 49b20d981d723fae5a93843c617af2b2c23611ec ]
    
    1) the numerator and/or denominator might be 0, in that case
       fall back to the default frame interval. This is per the spec
       and this caused a v4l2-compliance failure.
    
    2) the updated frame interval wasn't returned in the s_frame_interval
       subdev op.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reviewed-by: Luca Ceresoli <luca@lucaceresoli.net>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 448e5004ad855cbdf6be187715caa84db877a23f
Author: Tom Rix <trix@redhat.com>
Date:   Mon Aug 10 21:25:18 2020 +0200

    media: tw5864: check status of tw5864_frameinterval_get
    
    [ Upstream commit 780d815dcc9b34d93ae69385a8465c38d423ff0f ]
    
    clang static analysis reports this problem
    
    tw5864-video.c:773:32: warning: The left expression of the compound
      assignment is an uninitialized value.
      The computed value will also be garbage
            fintv->stepwise.max.numerator *= std_max_fps;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
    
    stepwise.max is set with frameinterval, which comes from
    
            ret = tw5864_frameinterval_get(input, &frameinterval);
            fintv->stepwise.step = frameinterval;
            fintv->stepwise.min = frameinterval;
            fintv->stepwise.max = frameinterval;
            fintv->stepwise.max.numerator *= std_max_fps;
    
    When tw5864_frameinterval_get() fails, frameinterval is not
    set. So check the status and fix another similar problem.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47ab020f32909a79017ace45eab7912dcd37ae4a
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Mon Aug 17 11:38:27 2020 -0700

    usb: typec: tcpm: During PR_SWAP, source caps should be sent only after tSwapSourceStart
    
    [ Upstream commit 6bbe2a90a0bb4af8dd99c3565e907fe9b5e7fd88 ]
    
    The patch addresses the compliance test failures while running
    TD.PD.CP.E3, TD.PD.CP.E4, TD.PD.CP.E5 of the "Deterministic PD
    Compliance MOI" test plan published in https://www.usb.org/usbc.
    For a product to be Type-C compliant, it's expected that these tests
    are run on usb.org certified Type-C compliance tester as mentioned in
    https://www.usb.org/usbc.
    
    The purpose of the tests TD.PD.CP.E3, TD.PD.CP.E4, TD.PD.CP.E5 is to
    verify the PR_SWAP response of the device. While doing so, the test
    asserts that Source Capabilities message is NOT received from the test
    device within tSwapSourceStart min (20 ms) from the time the last bit
    of GoodCRC corresponding to the RS_RDY message sent by the UUT was
    sent. If it does then the test fails.
    
    This is in line with the requirements from the USB Power Delivery
    Specification Revision 3.0, Version 1.2:
    "6.6.8.1 SwapSourceStartTimer
    The SwapSourceStartTimer Shall be used by the new Source, after a
    Power Role Swap or Fast Role Swap, to ensure that it does not send
    Source_Capabilities Message before the new Sink is ready to receive
    the
    Source_Capabilities Message. The new Source Shall Not send the
    Source_Capabilities Message earlier than tSwapSourceStart after the
    last bit of the EOP of GoodCRC Message sent in response to the PS_RDY
    Message sent by the new Source indicating that its power supply is
    ready."
    
    The patch makes sure that TCPM does not send the Source_Capabilities
    Message within tSwapSourceStart(20ms) by transitioning into
    SRC_STARTUP only after  tSwapSourceStart(20ms).
    
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20200817183828.1895015-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5472c5d1d505fc214799a098b42912ed6799e709
Author: Xia Jiang <xia.jiang@mediatek.com>
Date:   Fri Aug 14 09:11:35 2020 +0200

    media: platform: Improve queue set up flow for bug fixing
    
    [ Upstream commit 5095a6413a0cf896ab468009b6142cb0fe617e66 ]
    
    Add checking created buffer size follow in mtk_jpeg_queue_setup().
    
    Reviewed-by: Tomasz Figa <tfiga@chromium.org>
    Signed-off-by: Xia Jiang <xia.jiang@mediatek.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a85688062852cb2dec93dfda83239fd400ac8a2
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Aug 20 12:47:16 2020 +0200

    media: videodev2.h: RGB BT2020 and HSV are always full range
    
    [ Upstream commit b305dfe2e93434b12d438434461b709641f62af4 ]
    
    The default RGB quantization range for BT.2020 is full range (just as for
    all the other RGB pixel encodings), not limited range.
    
    Update the V4L2_MAP_QUANTIZATION_DEFAULT macro and documentation
    accordingly.
    
    Also mention that HSV is always full range and cannot be limited range.
    
    When RGB BT2020 was introduced in V4L2 it was not clear whether it should
    be limited or full range, but full range is the right (and consistent)
    choice.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac437801e3c212e183ac373f75c3d75dbacf2dc8
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Aug 26 10:00:45 2020 -0700

    selftests/x86/fsgsbase: Reap a forgotten child
    
    [ Upstream commit ab2dd173330a3f07142e68cd65682205036cd00f ]
    
    The ptrace() test forgot to reap its child.  Reap it.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/e7700a503f30e79ab35a63103938a19893dbeff2.1598461151.git.luto@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 581940d9b9c85b3869e2897112e03ec8e9f69c8a
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Wed Aug 19 17:37:56 2020 +0300

    drm/brige/megachips: Add checking if ge_b850v3_lvds_init() is working correctly
    
    [ Upstream commit f688a345f0d7a6df4dd2aeca8e4f3c05e123a0ee ]
    
    If ge_b850v3_lvds_init() does not allocate memory for ge_b850v3_lvds_ptr,
    then a null pointer dereference is accessed.
    
    The patch adds checking of the return value of ge_b850v3_lvds_init().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200819143756.30626-1-lutovinova@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed0bd7b12939e1ccc60529c48c489bc7602ad102
Author: Sathishkumar Muruganandam <murugana@codeaurora.org>
Date:   Fri Aug 14 13:46:11 2020 +0530

    ath10k: fix VHT NSS calculation when STBC is enabled
    
    [ Upstream commit 99f41b8e43b8b4b31262adb8ac3e69088fff1289 ]
    
    When STBC is enabled, NSTS_SU value need to be accounted for VHT NSS
    calculation for SU case.
    
    Without this fix, 1SS + STBC enabled case was reported wrongly as 2SS
    in radiotap header on monitor mode capture.
    
    Tested-on: QCA9984 10.4-3.10-00047
    
    Signed-off-by: Sathishkumar Muruganandam <murugana@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1597392971-3897-1-git-send-email-murugana@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b30a5c8d9defdad0e0fccf232809614f184889ff
Author: Wen Gong <wgong@codeaurora.org>
Date:   Fri Aug 14 18:17:08 2020 +0300

    ath10k: start recovery process when payload length exceeds max htc length for sdio
    
    [ Upstream commit 2fd3c8f34d08af0a6236085f9961866ad92ef9ec ]
    
    When simulate random transfer fail for sdio write and read, it happened
    "payload length exceeds max htc length" and recovery later sometimes.
    
    Test steps:
    1. Add config and update kernel:
    CONFIG_FAIL_MMC_REQUEST=y
    CONFIG_FAULT_INJECTION=y
    CONFIG_FAULT_INJECTION_DEBUG_FS=y
    
    2. Run simulate fail:
    cd /sys/kernel/debug/mmc1/fail_mmc_request
    echo 10 > probability
    echo 10 > times # repeat until hitting issues
    
    3. It happened payload length exceeds max htc length.
    [  199.935506] ath10k_sdio mmc1:0001:1: payload length 57005 exceeds max htc length: 4088
    ....
    [  264.990191] ath10k_sdio mmc1:0001:1: payload length 57005 exceeds max htc length: 4088
    
    4. after some time, such as 60 seconds, it start recovery which triggered
    by wmi command timeout for periodic scan.
    [  269.229232] ieee80211 phy0: Hardware restart was requested
    [  269.734693] ath10k_sdio mmc1:0001:1: device successfully recovered
    
    The simulate fail of sdio is not a real sdio transter fail, it only
    set an error status in mmc_should_fail_request after the transfer end,
    actually the transfer is success, then sdio_io_rw_ext_helper will
    return error status and stop transfer the left data. For example,
    the really RX len is 286 bytes, then it will split to 2 blocks in
    sdio_io_rw_ext_helper, one is 256 bytes, left is 30 bytes, if the
    first 256 bytes get an error status by mmc_should_fail_request,then
    the left 30 bytes will not read in this RX operation. Then when the
    next RX arrive, the left 30 bytes will be considered as the header
    of the read, the top 4 bytes of the 30 bytes will be considered as
    lookaheads, but actually the 4 bytes is not the lookaheads, so the len
    from this lookaheads is not correct, it exceeds max htc length 4088
    sometimes. When happened exceeds, the buffer chain is not matched between
    firmware and ath10k, then it need to start recovery ASAP. Recently then
    recovery will be started by wmi command timeout, but it will be long time
    later, for example, it is 60+ seconds later from the periodic scan, if
    it does not have periodic scan, it will be longer.
    
    Start recovery when it happened "payload length exceeds max htc length"
    will be reasonable.
    
    This patch only effect sdio chips.
    
    Tested with QCA6174 SDIO with firmware WLAN.RMH.4.4.1-00029.
    
    Signed-off-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200108031957.22308-3-wgong@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 759721fb58862b67e97a178e6e5341c39900edb5
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jul 20 12:18:45 2020 -0700

    video: fbdev: pvr2fb: initialize variables
    
    [ Upstream commit 8e1ba47c60bcd325fdd097cd76054639155e5d2e ]
    
    clang static analysis reports this repesentative error
    
    pvr2fb.c:1049:2: warning: 1st function call argument
      is an uninitialized value [core.CallAndMessage]
            if (*cable_arg)
            ^~~~~~~~~~~~~~~
    
    Problem is that cable_arg depends on the input loop to
    set the cable_arg[0].  If it does not, then some random
    value from the stack is used.
    
    A similar problem exists for output_arg.
    
    So initialize cable_arg and output_arg.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200720191845.20115-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2844ba3d37cba994fc9e591e7bed17c7a0408d7
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Wed Oct 7 13:55:16 2020 -0700

    xfs: fix realtime bitmap/summary file truncation when growing rt volume
    
    [ Upstream commit f4c32e87de7d66074d5612567c5eac7325024428 ]
    
    The realtime bitmap and summary files are regular files that are hidden
    away from the directory tree.  Since they're regular files, inode
    inactivation will try to purge what it thinks are speculative
    preallocations beyond the incore size of the file.  Unfortunately,
    xfs_growfs_rt forgets to update the incore size when it resizes the
    inodes, with the result that inactivating the rt inodes at unmount time
    will cause their contents to be truncated.
    
    Fix this by updating the incore size when we change the ondisk size as
    part of updating the superblock.  Note that we don't do this when we're
    allocating blocks to the rt inodes because we actually want those blocks
    to get purged if the growfs fails.
    
    This fixes corruption complaints from the online rtsummary checker when
    running xfs/233.  Since that test requires rmap, one can also trigger
    this by growing an rt volume, cycling the mount, and creating rt files.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a10ed3b55fed6bdcaf67853bac0f15f2f3453aec
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sat Sep 19 16:04:14 2020 +0200

    power: supply: bq27xxx: report "not charging" on all types
    
    [ Upstream commit 7bf738ba110722b63e9dc8af760d3fb2aef25593 ]
    
    Commit 6f24ff97e323 ("power: supply: bq27xxx_battery: Add the
    BQ27Z561 Battery monitor") and commit d74534c27775 ("power:
    bq27xxx_battery: Add support for additional bq27xxx family devices")
    added support for new device types by copying most of the code and
    adding necessary quirks.
    
    However they did not copy the code in bq27xxx_battery_status()
    responsible for returning POWER_SUPPLY_STATUS_NOT_CHARGING.
    
    Unify the bq27xxx_battery_status() so for all types when charger is
    supplied, it will return "not charging" status.
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 036b0f4d7671f9195433a0ee988f7b72f29aef26
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Tue Aug 4 12:11:47 2020 -0400

    NFS4: Fix oops when copy_file_range is attempted with NFS4.0 source
    
    [ Upstream commit d8a6ad913c286d4763ae20b14c02fe6f39d7cd9f ]
    
    The following oops is seen during xfstest/565 when the 'test'
    (source of the copy) is NFS4.0 and 'scratch' (destination) is NFS4.2
    [   59.692458] run fstests generic/565 at 2020-08-01 05:50:35
    [   60.613588] BUG: kernel NULL pointer dereference, address: 0000000000000008
    [   60.624970] #PF: supervisor read access in kernel mode
    [   60.627671] #PF: error_code(0x0000) - not-present page
    [   60.630347] PGD 0 P4D 0
    [   60.631853] Oops: 0000 [#1] SMP PTI
    [   60.634086] CPU: 6 PID: 2828 Comm: xfs_io Kdump: loaded Not tainted 5.8.0-rc3 #1
    [   60.637676] Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
    [   60.639901] RIP: 0010:nfs4_check_serverowner_major_id+0x5/0x30 [nfsv4]
    [   60.642719] Code: 89 ff e8 3e b3 b8 e1 e9 71 fe ff ff 41 bc da d8 ff ff e9 c3 fe ff ff e8 e9 9d 08 e2 66 0f 1f 84 00 00 00 00 00 66 66 66 66 90 <8b> 57 08 31 c0 3b 56 08 75 12 48 83 c6 0c 48 83 c7 0c e8 c4 97 bb
    [   60.652629] RSP: 0018:ffffc265417f7e10 EFLAGS: 00010287
    [   60.655379] RAX: ffffa0664b066400 RBX: 0000000000000000 RCX: 0000000000000001
    [   60.658754] RDX: ffffa066725fb000 RSI: ffffa066725fd000 RDI: 0000000000000000
    [   60.662292] RBP: 0000000000020000 R08: 0000000000020000 R09: 0000000000000000
    [   60.666189] R10: 0000000000000003 R11: 0000000000000000 R12: ffffa06648258d00
    [   60.669914] R13: 0000000000000000 R14: 0000000000000000 R15: ffffa06648258100
    [   60.673645] FS:  00007faa9fb35800(0000) GS:ffffa06677d80000(0000) knlGS:0000000000000000
    [   60.677698] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   60.680773] CR2: 0000000000000008 CR3: 0000000203f14000 CR4: 00000000000406e0
    [   60.684476] Call Trace:
    [   60.685809]  nfs4_copy_file_range+0xfc/0x230 [nfsv4]
    [   60.688704]  vfs_copy_file_range+0x2ee/0x310
    [   60.691104]  __x64_sys_copy_file_range+0xd6/0x210
    [   60.693527]  do_syscall_64+0x4d/0x90
    [   60.695512]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   60.698006] RIP: 0033:0x7faa9febc1bd
    
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13081d5ddb5882bf13e7884103d4f7f43c9b0f68
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 6 23:24:35 2020 +0100

    ARM: 8997/2: hw_breakpoint: Handle inexact watchpoint addresses
    
    [ Upstream commit 22c9e58299e5f18274788ce54c03d4fb761e3c5d ]
    
    This is commit fdfeff0f9e3d ("arm64: hw_breakpoint: Handle inexact
    watchpoint addresses") but ported to arm32, which has the same
    problem.
    
    This problem was found by Android CTS tests, notably the
    "watchpoint_imprecise" test [1].  I tested locally against a copycat
    (simplified) version of the test though.
    
    [1] https://android.googlesource.com/platform/bionic/+/master/tests/sys_ptrace_test.cpp
    
    Link: https://lkml.kernel.org/r/20191019111216.1.I82eae759ca6dc28a245b043f485ca490e3015321@changeid
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df5b07f2172a159a4d9f0c280e6ecddba992ba35
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri Oct 2 14:17:35 2020 -0700

    f2fs: handle errors of f2fs_get_meta_page_nofail
    
    [ Upstream commit 86f33603f8c51537265ff7ac0320638fd2cbdb1b ]
    
    First problem is we hit BUG_ON() in f2fs_get_sum_page given EIO on
    f2fs_get_meta_page_nofail().
    
    Quick fix was not to give any error with infinite loop, but syzbot caught
    a case where it goes to that loop from fuzzed image. In turned out we abused
    f2fs_get_meta_page_nofail() like in the below call stack.
    
    - f2fs_fill_super
     - f2fs_build_segment_manager
      - build_sit_entries
       - get_current_sit_page
    
    INFO: task syz-executor178:6870 can't die for more than 143 seconds.
    task:syz-executor178 state:R
     stack:26960 pid: 6870 ppid:  6869 flags:0x00004006
    Call Trace:
    
    Showing all locks held in the system:
    1 lock held by khungtaskd/1179:
     #0: ffffffff8a554da0 (rcu_read_lock){....}-{1:2}, at: debug_show_all_locks+0x53/0x260 kernel/locking/lockdep.c:6242
    1 lock held by systemd-journal/3920:
    1 lock held by in:imklog/6769:
     #0: ffff88809eebc130 (&f->f_pos_lock){+.+.}-{3:3}, at: __fdget_pos+0xe9/0x100 fs/file.c:930
    1 lock held by syz-executor178/6870:
     #0: ffff8880925120e0 (&type->s_umount_key#47/1){+.+.}-{3:3}, at: alloc_super+0x201/0xaf0 fs/super.c:229
    
    Actually, we didn't have to use _nofail in this case, since we could return
    error to mount(2) already with the error handler.
    
    As a result, this patch tries to 1) remove _nofail callers as much as possible,
    2) deal with error case in last remaining caller, f2fs_get_sum_page().
    
    Reported-by: syzbot+ee250ac8137be41d7b13@syzkaller.appspotmail.com
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15c7ec03ddb8ec7990d9d903cf29c0afa33403be
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Jun 4 13:23:17 2020 +0200

    um: change sigio_spinlock to a mutex
    
    [ Upstream commit f2d05059e15af3f70502074f4e3a504530af504a ]
    
    Lockdep complains at boot:
    
    =============================
    [ BUG: Invalid wait context ]
    5.7.0-05093-g46d91ecd597b #98 Not tainted
    -----------------------------
    swapper/1 is trying to lock:
    0000000060931b98 (&desc[i].request_mutex){+.+.}-{3:3}, at: __setup_irq+0x11d/0x623
    other info that might help us debug this:
    context-{4:4}
    1 lock held by swapper/1:
     #0: 000000006074fed8 (sigio_spinlock){+.+.}-{2:2}, at: sigio_lock+0x1a/0x1c
    stack backtrace:
    CPU: 0 PID: 1 Comm: swapper Not tainted 5.7.0-05093-g46d91ecd597b #98
    Stack:
     7fa4fab0 6028dfd1 0000002a 6008bea5
     7fa50700 7fa50040 7fa4fac0 6028e016
     7fa4fb50 6007f6da 60959c18 00000000
    Call Trace:
     [<60023a0e>] show_stack+0x13b/0x155
     [<6028e016>] dump_stack+0x2a/0x2c
     [<6007f6da>] __lock_acquire+0x515/0x15f2
     [<6007eb50>] lock_acquire+0x245/0x273
     [<6050d9f1>] __mutex_lock+0xbd/0x325
     [<6050dc76>] mutex_lock_nested+0x1d/0x1f
     [<6008e27e>] __setup_irq+0x11d/0x623
     [<6008e8ed>] request_threaded_irq+0x169/0x1a6
     [<60021eb0>] um_request_irq+0x1ee/0x24b
     [<600234ee>] write_sigio_irq+0x3b/0x76
     [<600383ca>] sigio_broken+0x146/0x2e4
     [<60020bd8>] do_one_initcall+0xde/0x281
    
    Because we hold sigio_spinlock and then get into requesting
    an interrupt with a mutex.
    
    Change the spinlock to a mutex to avoid that.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb9b18150e3f843b37fe99d712ec4d7a9fd131f7
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Sep 24 19:07:04 2020 +0200

    s390/startup: avoid save_area_sync overflow
    
    [ Upstream commit 2835c2ea95d50625108e47a459e1a47f6be836ce ]
    
    Currently we overflow save_area_sync and write over
    save_area_async. Although this is not a real problem make
    startup_pgm_check_handler consistent with late pgm check handler and
    store [%r0,%r7] directly into gpregs_save_area.
    
    Reviewed-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9804eda4a97569bae944b64b3c657397648c5fdf
Author: Chao Yu <chao@kernel.org>
Date:   Tue Sep 29 09:23:12 2020 +0800

    f2fs: fix to check segment boundary during SIT page readahead
    
    [ Upstream commit 6a257471fa42c8c9c04a875cd3a2a22db148e0f0 ]
    
    As syzbot reported:
    
    kernel BUG at fs/f2fs/segment.h:657!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 16220 Comm: syz-executor.0 Not tainted 5.9.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:f2fs_ra_meta_pages+0xa51/0xdc0 fs/f2fs/segment.h:657
    Call Trace:
     build_sit_entries fs/f2fs/segment.c:4195 [inline]
     f2fs_build_segment_manager+0x4b8a/0xa3c0 fs/f2fs/segment.c:4779
     f2fs_fill_super+0x377d/0x6b80 fs/f2fs/super.c:3633
     mount_bdev+0x32e/0x3f0 fs/super.c:1417
     legacy_get_tree+0x105/0x220 fs/fs_context.c:592
     vfs_get_tree+0x89/0x2f0 fs/super.c:1547
     do_new_mount fs/namespace.c:2875 [inline]
     path_mount+0x1387/0x2070 fs/namespace.c:3192
     do_mount fs/namespace.c:3205 [inline]
     __do_sys_mount fs/namespace.c:3413 [inline]
     __se_sys_mount fs/namespace.c:3390 [inline]
     __x64_sys_mount+0x27f/0x300 fs/namespace.c:3390
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    @blkno in f2fs_ra_meta_pages could exceed max segment count, causing panic
    in following sanity check in current_sit_addr(), add check condition to
    avoid this issue.
    
    Reported-by: syzbot+3698081bcf0bb2d12174@syzkaller.appspotmail.com
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1544dcb514ad322d08ef711609f8bd2cd6a5465e
Author: Chao Yu <chao@kernel.org>
Date:   Tue Sep 29 09:22:50 2020 +0800

    f2fs: fix uninit-value in f2fs_lookup
    
    [ Upstream commit 6d7ab88a98c1b7a47c228f8ffb4f44d631eaf284 ]
    
    As syzbot reported:
    
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:122
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:219
     f2fs_lookup+0xe05/0x1a80 fs/f2fs/namei.c:503
     lookup_open fs/namei.c:3082 [inline]
     open_last_lookups fs/namei.c:3177 [inline]
     path_openat+0x2729/0x6a90 fs/namei.c:3365
     do_filp_open+0x2b8/0x710 fs/namei.c:3395
     do_sys_openat2+0xa88/0x1140 fs/open.c:1168
     do_sys_open fs/open.c:1184 [inline]
     __do_compat_sys_openat fs/open.c:1242 [inline]
     __se_compat_sys_openat+0x2a4/0x310 fs/open.c:1240
     __ia32_compat_sys_openat+0x56/0x70 fs/open.c:1240
     do_syscall_32_irqs_on arch/x86/entry/common.c:80 [inline]
     __do_fast_syscall_32+0x129/0x180 arch/x86/entry/common.c:139
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:162
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:205
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    
    In f2fs_lookup(), @res_page could be used before being initialized,
    because in __f2fs_find_entry(), once F2FS_I(dir)->i_current_depth was
    been fuzzed to zero, then @res_page will never be initialized, causing
    this kmsan warning, relocating @res_page initialization place to fix
    this bug.
    
    Reported-by: syzbot+0eac6f0bbd558fd866d7@syzkaller.appspotmail.com
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40b357f7436dce5ee5432e9c8b120d07545627b7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Sep 21 20:45:44 2020 +0800

    f2fs: add trace exit in exception path
    
    [ Upstream commit 9b66482282888d02832b7d90239e1cdb18e4b431 ]
    
    Missing the trace exit in f2fs_sync_dirty_inodes
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eab8974aea88f4b46dfb524c6679aa09baeb145
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon Sep 14 14:52:18 2020 +1000

    sparc64: remove mm_cpumask clearing to fix kthread_use_mm race
    
    [ Upstream commit bafb056ce27940c9994ea905336aa8f27b4f7275 ]
    
    The de facto (and apparently uncommented) standard for using an mm had,
    thanks to this code in sparc if nothing else, been that you must have a
    reference on mm_users *and that reference must have been obtained with
    mmget()*, i.e., from a thread with a reference to mm_users that had used
    the mm.
    
    The introduction of mmget_not_zero() in commit d2005e3f41d4
    ("userfaultfd: don't pin the user memory in userfaultfd_file_create()")
    allowed mm_count holders to aoperate on user mappings asynchronously
    from the actual threads using the mm, but they were not to load those
    mappings into their TLB (i.e., walking vmas and page tables is okay,
    kthread_use_mm() is not).
    
    io_uring 2b188cc1bb857 ("Add io_uring IO interface") added code which
    does a kthread_use_mm() from a mmget_not_zero() refcount.
    
    The problem with this is code which previously assumed mm == current->mm
    and mm->mm_users == 1 implies the mm will remain single-threaded at
    least until this thread creates another mm_users reference, has now
    broken.
    
    arch/sparc/kernel/smp_64.c:
    
        if (atomic_read(&mm->mm_users) == 1) {
            cpumask_copy(mm_cpumask(mm), cpumask_of(cpu));
            goto local_flush_and_out;
        }
    
    vs fs/io_uring.c
    
        if (unlikely(!(ctx->flags & IORING_SETUP_SQPOLL) ||
                     !mmget_not_zero(ctx->sqo_mm)))
            return -EFAULT;
        kthread_use_mm(ctx->sqo_mm);
    
    mmget_not_zero() could come in right after the mm_users == 1 test, then
    kthread_use_mm() which sets its CPU in the mm_cpumask. That update could
    be lost if cpumask_copy() occurs afterward.
    
    I propose we fix this by allowing mmget_not_zero() to be a first-class
    reference, and not have this obscure undocumented and unchecked
    restriction.
    
    The basic fix for sparc64 is to remove its mm_cpumask clearing code. The
    optimisation could be effectively restored by sending IPIs to mm_cpumask
    members and having them remove themselves from mm_cpumask. This is more
    tricky so I leave it as an exercise for someone with a sparc64 SMP.
    powerpc has a (currently similarly broken) example.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200914045219.3736466-4-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d59323cff67def586fcf8ca66fa60892650c1c5
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon Sep 14 14:52:17 2020 +1000

    powerpc: select ARCH_WANT_IRQS_OFF_ACTIVATE_MM
    
    [ Upstream commit 66acd46080bd9e5ad2be4b0eb1d498d5145d058e ]
    
    powerpc uses IPIs in some situations to switch a kernel thread away
    from a lazy tlb mm, which is subject to the TLB flushing race
    described in the changelog introducing ARCH_WANT_IRQS_OFF_ACTIVATE_MM.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200914045219.3736466-3-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82e93f94ac653d57373f1368a4dcb066d24af490
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon Sep 14 14:52:16 2020 +1000

    mm: fix exec activate_mm vs TLB shootdown and lazy tlb switching race
    
    [ Upstream commit d53c3dfb23c45f7d4f910c3a3ca84bf0a99c6143 ]
    
    Reading and modifying current->mm and current->active_mm and switching
    mm should be done with irqs off, to prevent races seeing an intermediate
    state.
    
    This is similar to commit 38cf307c1f20 ("mm: fix kthread_use_mm() vs TLB
    invalidate"). At exec-time when the new mm is activated, the old one
    should usually be single-threaded and no longer used, unless something
    else is holding an mm_users reference (which may be possible).
    
    Absent other mm_users, there is also a race with preemption and lazy tlb
    switching. Consider the kernel_execve case where the current thread is
    using a lazy tlb active mm:
    
      call_usermodehelper()
        kernel_execve()
          old_mm = current->mm;
          active_mm = current->active_mm;
          *** preempt *** -------------------->  schedule()
                                                   prev->active_mm = NULL;
                                                   mmdrop(prev active_mm);
                                                 ...
                          <--------------------  schedule()
          current->mm = mm;
          current->active_mm = mm;
          if (!old_mm)
              mmdrop(active_mm);
    
    If we switch back to the kernel thread from a different mm, there is a
    double free of the old active_mm, and a missing free of the new one.
    
    Closing this race only requires interrupts to be disabled while ->mm
    and ->active_mm are being switched, but the TLB problem requires also
    holding interrupts off over activate_mm. Unfortunately not all archs
    can do that yet, e.g., arm defers the switch if irqs are disabled and
    expects finish_arch_post_lock_switch() to be called to complete the
    flush; um takes a blocking lock in activate_mm().
    
    So as a first step, disable interrupts across the mm/active_mm updates
    to close the lazy tlb preempt race, and provide an arch option to
    extend that to activate_mm which allows architectures doing IPI based
    TLB shootdowns to close the second race.
    
    This is a bit ugly, but in the interest of fixing the bug and backporting
    before all architectures are converted this is a compromise.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200914045219.3736466-2-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc17b990ee90c07ce041722a588678681001d4a7
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Tue Aug 4 10:54:05 2020 +1000

    powerpc/powernv/smp: Fix spurious DBG() warning
    
    [ Upstream commit f6bac19cf65c5be21d14a0c9684c8f560f2096dd ]
    
    When building with W=1 we get the following warning:
    
     arch/powerpc/platforms/powernv/smp.c: In function ‘pnv_smp_cpu_kill_self’:
     arch/powerpc/platforms/powernv/smp.c:276:16: error: suggest braces around
            empty body in an ‘if’ statement [-Werror=empty-body]
       276 |      cpu, srr1);
           |                ^
     cc1: all warnings being treated as errors
    
    The full context is this block:
    
     if (srr1 && !generic_check_cpu_restart(cpu))
            DBG("CPU%d Unexpected exit while offline srr1=%lx!\n",
                            cpu, srr1);
    
    When building with DEBUG undefined DBG() expands to nothing and GCC emits
    the warning due to the lack of braces around an empty statement.
    
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200804005410.146094-2-oohall@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2db7590371520735366639647352b44c0eeda11f
Author: Mateusz Nosek <mateusznosek0@gmail.com>
Date:   Sun Sep 27 02:08:58 2020 +0200

    futex: Fix incorrect should_fail_futex() handling
    
    [ Upstream commit 921c7ebd1337d1a46783d7e15a850e12aed2eaa0 ]
    
    If should_futex_fail() returns true in futex_wake_pi(), then the 'ret'
    variable is set to -EFAULT and then immediately overwritten. So the failure
    injection is non-functional.
    
    Fix it by actually leaving the function and returning -EFAULT.
    
    The Fixes tag is kinda blury because the initial commit which introduced
    failure injection was already sloppy, but the below mentioned commit broke
    it completely.
    
    [ tglx: Massaged changelog ]
    
    Fixes: 6b4f4bc9cb22 ("locking/futex: Allow low-level atomic operations to return -EAGAIN")
    Signed-off-by: Mateusz Nosek <mateusznosek0@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200927000858.24219-1-mateusznosek0@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87d9ac94c7e77fb44d275912f467376cc115c840
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Fri May 8 07:28:19 2020 +0200

    ata: sata_nv: Fix retrieving of active qcs
    
    [ Upstream commit 8e4c309f9f33b76c09daa02b796ef87918eee494 ]
    
    ata_qc_complete_multiple() has to be called with the tags physically
    active, that is the hw tag is at bit 0. ap->qc_active has the same tag
    at bit ATA_TAG_INTERNAL instead, so call ata_qc_get_active() to fix that
    up. This is done in the vein of 8385d756e114 ("libata: Fix retrieving of
    active qcs").
    
    Fixes: 28361c403683 ("libata: add extra internal command")
    Tested-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da8e2fbe458c4b3baaf1da5957347b9bcf858af3
Author: Alok Prasad <palok@marvell.com>
Date:   Wed Oct 21 11:50:08 2020 +0000

    RDMA/qedr: Fix memory leak in iWARP CM
    
    [ Upstream commit a2267f8a52eea9096861affd463f691be0f0e8c9 ]
    
    Fixes memory leak in iWARP CM
    
    Fixes: e411e0587e0d ("RDMA/qedr: Add iWARP connection management functions")
    Link: https://lore.kernel.org/r/20201021115008.28138-1-palok@marvell.com
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Alok Prasad <palok@marvell.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d90dd1599cf3518e072ac141a1a0996bdf27cef5
Author: Amit Cohen <amcohen@nvidia.com>
Date:   Sat Oct 24 16:37:33 2020 +0300

    mlxsw: core: Fix use-after-free in mlxsw_emad_trans_finish()
    
    [ Upstream commit 0daf2bf5a2dcf33d446b76360908f109816e2e21 ]
    
    Each EMAD transaction stores the skb used to issue the EMAD request
    ('trans->tx_skb') so that the request could be retried in case of a
    timeout. The skb can be freed when a corresponding response is received
    or as part of the retry logic (e.g., failed retransmit, exceeded maximum
    number of retries).
    
    The two tasks (i.e., response processing and retransmits) are
    synchronized by the atomic 'trans->active' field which ensures that
    responses to inactive transactions are ignored.
    
    In case of a failed retransmit the transaction is finished and all of
    its resources are freed. However, the current code does not mark it as
    inactive. Syzkaller was able to hit a race condition in which a
    concurrent response is processed while the transaction's resources are
    being freed, resulting in a use-after-free [1].
    
    Fix the issue by making sure to mark the transaction as inactive after a
    failed retransmit and free its resources only if a concurrent task did
    not already do that.
    
    [1]
    BUG: KASAN: use-after-free in consume_skb+0x30/0x370
    net/core/skbuff.c:833
    Read of size 4 at addr ffff88804f570494 by task syz-executor.0/1004
    
    CPU: 0 PID: 1004 Comm: syz-executor.0 Not tainted 5.8.0-rc7+ #68
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xf6/0x16e lib/dump_stack.c:118
     print_address_description.constprop.0+0x1c/0x250
    mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     check_memory_region_inline mm/kasan/generic.c:186 [inline]
     check_memory_region+0x14e/0x1b0 mm/kasan/generic.c:192
     instrument_atomic_read include/linux/instrumented.h:56 [inline]
     atomic_read include/asm-generic/atomic-instrumented.h:27 [inline]
     refcount_read include/linux/refcount.h:147 [inline]
     skb_unref include/linux/skbuff.h:1044 [inline]
     consume_skb+0x30/0x370 net/core/skbuff.c:833
     mlxsw_emad_trans_finish+0x64/0x1c0 drivers/net/ethernet/mellanox/mlxsw/core.c:592
     mlxsw_emad_process_response drivers/net/ethernet/mellanox/mlxsw/core.c:651 [inline]
     mlxsw_emad_rx_listener_func+0x5c9/0xac0 drivers/net/ethernet/mellanox/mlxsw/core.c:672
     mlxsw_core_skb_receive+0x4df/0x770 drivers/net/ethernet/mellanox/mlxsw/core.c:2063
     mlxsw_pci_cqe_rdq_handle drivers/net/ethernet/mellanox/mlxsw/pci.c:595 [inline]
     mlxsw_pci_cq_tasklet+0x12a6/0x2520 drivers/net/ethernet/mellanox/mlxsw/pci.c:651
     tasklet_action_common.isra.0+0x13f/0x3e0 kernel/softirq.c:550
     __do_softirq+0x223/0x964 kernel/softirq.c:292
     asm_call_on_stack+0x12/0x20 arch/x86/entry/entry_64.S:711
    
    Allocated by task 1006:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc mm/kasan/common.c:494 [inline]
     __kasan_kmalloc.constprop.0+0xc2/0xd0 mm/kasan/common.c:467
     slab_post_alloc_hook mm/slab.h:586 [inline]
     slab_alloc_node mm/slub.c:2824 [inline]
     slab_alloc mm/slub.c:2832 [inline]
     kmem_cache_alloc+0xcd/0x2e0 mm/slub.c:2837
     __build_skb+0x21/0x60 net/core/skbuff.c:311
     __netdev_alloc_skb+0x1e2/0x360 net/core/skbuff.c:464
     netdev_alloc_skb include/linux/skbuff.h:2810 [inline]
     mlxsw_emad_alloc drivers/net/ethernet/mellanox/mlxsw/core.c:756 [inline]
     mlxsw_emad_reg_access drivers/net/ethernet/mellanox/mlxsw/core.c:787 [inline]
     mlxsw_core_reg_access_emad+0x1ab/0x1420 drivers/net/ethernet/mellanox/mlxsw/core.c:1817
     mlxsw_reg_trans_query+0x39/0x50 drivers/net/ethernet/mellanox/mlxsw/core.c:1831
     mlxsw_sp_sb_pm_occ_clear drivers/net/ethernet/mellanox/mlxsw/spectrum_buffers.c:260 [inline]
     mlxsw_sp_sb_occ_max_clear+0xbff/0x10a0 drivers/net/ethernet/mellanox/mlxsw/spectrum_buffers.c:1365
     mlxsw_devlink_sb_occ_max_clear+0x76/0xb0 drivers/net/ethernet/mellanox/mlxsw/core.c:1037
     devlink_nl_cmd_sb_occ_max_clear_doit+0x1ec/0x280 net/core/devlink.c:1765
     genl_family_rcv_msg_doit net/netlink/genetlink.c:669 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:714 [inline]
     genl_rcv_msg+0x617/0x980 net/netlink/genetlink.c:731
     netlink_rcv_skb+0x152/0x440 net/netlink/af_netlink.c:2470
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:742
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x53a/0x750 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x850/0xd90 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0x150/0x190 net/socket.c:671
     ____sys_sendmsg+0x6d8/0x840 net/socket.c:2359
     ___sys_sendmsg+0xff/0x170 net/socket.c:2413
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2446
     do_syscall_64+0x56/0xa0 arch/x86/entry/common.c:384
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 73:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x12c/0x170 mm/kasan/common.c:455
     slab_free_hook mm/slub.c:1474 [inline]
     slab_free_freelist_hook mm/slub.c:1507 [inline]
     slab_free mm/slub.c:3072 [inline]
     kmem_cache_free+0xbe/0x380 mm/slub.c:3088
     kfree_skbmem net/core/skbuff.c:622 [inline]
     kfree_skbmem+0xef/0x1b0 net/core/skbuff.c:616
     __kfree_skb net/core/skbuff.c:679 [inline]
     consume_skb net/core/skbuff.c:837 [inline]
     consume_skb+0xe1/0x370 net/core/skbuff.c:831
     mlxsw_emad_trans_finish+0x64/0x1c0 drivers/net/ethernet/mellanox/mlxsw/core.c:592
     mlxsw_emad_transmit_retry.isra.0+0x9d/0xc0 drivers/net/ethernet/mellanox/mlxsw/core.c:613
     mlxsw_emad_trans_timeout_work+0x43/0x50 drivers/net/ethernet/mellanox/mlxsw/core.c:625
     process_one_work+0xa3e/0x17a0 kernel/workqueue.c:2269
     worker_thread+0x9e/0x1050 kernel/workqueue.c:2415
     kthread+0x355/0x470 kernel/kthread.c:291
     ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:293
    
    The buggy address belongs to the object at ffff88804f5703c0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 212 bytes inside of
     224-byte region [ffff88804f5703c0, ffff88804f5704a0)
    The buggy address belongs to the page:
    page:ffffea00013d5c00 refcount:1 mapcount:0 mapping:0000000000000000
    index:0x0
    flags: 0x100000000000200(slab)
    raw: 0100000000000200 dead000000000100 dead000000000122 ffff88806c625400
    raw: 0000000000000000 00000000000c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88804f570380: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff88804f570400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88804f570480: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff88804f570500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff88804f570580: 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc fc
    
    Fixes: caf7297e7ab5f ("mlxsw: core: Introduce support for asynchronous EMAD register access")
    Signed-off-by: Amit Cohen <amcohen@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7e7de28d10656a7128ba80d06434fc84f18ff50
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Wed Oct 14 07:30:51 2020 +0200

    x86/unwind/orc: Fix inactive tasks with stack pointer in %sp on GCC 10 compiled kernels
    
    [ Upstream commit f2ac57a4c49d40409c21c82d23b5706df9b438af ]
    
    GCC 10 optimizes the scheduler code differently than its predecessors.
    
    When CONFIG_DEBUG_SECTION_MISMATCH=y, the Makefile forces GCC not
    to inline some functions (-fno-inline-functions-called-once). Before GCC
    10, "no-inlined" __schedule() starts with the usual prologue:
    
      push %bp
      mov %sp, %bp
    
    So the ORC unwinder simply picks stack pointer from %bp and
    unwinds from __schedule() just perfectly:
    
      $ cat /proc/1/stack
      [<0>] ep_poll+0x3e9/0x450
      [<0>] do_epoll_wait+0xaa/0xc0
      [<0>] __x64_sys_epoll_wait+0x1a/0x20
      [<0>] do_syscall_64+0x33/0x40
      [<0>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    But now, with GCC 10, there is no %bp prologue in __schedule():
    
      $ cat /proc/1/stack
      <nothing>
    
    The ORC entry of the point in __schedule() is:
    
      sp:sp+88 bp:last_sp-48 type:call end:0
    
    In this case, nobody subtracts sizeof "struct inactive_task_frame" in
    __unwind_start(). The struct is put on the stack by __switch_to_asm() and
    only then __switch_to_asm() stores %sp to task->thread.sp. But we start
    unwinding from a point in __schedule() (stored in frame->ret_addr by
    'call') and not in __switch_to_asm().
    
    So for these example values in __unwind_start():
    
      sp=ffff94b50001fdc8 bp=ffff8e1f41d29340 ip=__schedule+0x1f0
    
    The stack is:
    
      ffff94b50001fdc8: ffff8e1f41578000 # struct inactive_task_frame
      ffff94b50001fdd0: 0000000000000000
      ffff94b50001fdd8: ffff8e1f41d29340
      ffff94b50001fde0: ffff8e1f41611d40 # ...
      ffff94b50001fde8: ffffffff93c41920 # bx
      ffff94b50001fdf0: ffff8e1f41d29340 # bp
      ffff94b50001fdf8: ffffffff9376cad0 # ret_addr (and end of the struct)
    
    0xffffffff9376cad0 is __schedule+0x1f0 (after the call to
    __switch_to_asm).  Now follow those 88 bytes from the ORC entry (sp+88).
    The entry is correct, __schedule() really pushes 48 bytes (8*7) + 32 bytes
    via subq to store some local values (like 4U below). So to unwind, look
    at the offset 88-sizeof(long) = 0x50 from here:
    
      ffff94b50001fe00: ffff8e1f41578618
      ffff94b50001fe08: 00000cc000000255
      ffff94b50001fe10: 0000000500000004
      ffff94b50001fe18: 7793fab6956b2d00 # NOTE (see below)
      ffff94b50001fe20: ffff8e1f41578000
      ffff94b50001fe28: ffff8e1f41578000
      ffff94b50001fe30: ffff8e1f41578000
      ffff94b50001fe38: ffff8e1f41578000
      ffff94b50001fe40: ffff94b50001fed8
      ffff94b50001fe48: ffff8e1f41577ff0
      ffff94b50001fe50: ffffffff9376cf12
    
    Here                ^^^^^^^^^^^^^^^^ is the correct ret addr from
    __schedule(). It translates to schedule+0x42 (insn after a call to
    __schedule()).
    
    BUT, unwind_next_frame() tries to take the address starting from
    0xffff94b50001fdc8. That is exactly from thread.sp+88-sizeof(long) =
    0xffff94b50001fdc8+88-8 = 0xffff94b50001fe18, which is garbage marked as
    NOTE above. So this quits the unwinding as 7793fab6956b2d00 is obviously
    not a kernel address.
    
    There was a fix to skip 'struct inactive_task_frame' in
    unwind_get_return_address_ptr in the following commit:
    
      187b96db5ca7 ("x86/unwind/orc: Fix unwind_get_return_address_ptr() for inactive tasks")
    
    But we need to skip the struct already in the unwinder proper. So
    subtract the size (increase the stack pointer) of the structure in
    __unwind_start() directly. This allows for removal of the code added by
    commit 187b96db5ca7 completely, as the address is now at
    '(unsigned long *)state->sp - 1', the same as in the generic case.
    
    [ mingo: Cleaned up the changelog a bit, for better readability. ]
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Bug: https://bugzilla.suse.com/show_bug.cgi?id=1176907
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20201014053051.24199-1-jslaby@suse.cz
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6937c143e3d3dee432b77213ce546128fcb34995
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Oct 12 14:26:24 2020 +0100

    firmware: arm_scmi: Add missing Rx size re-initialisation
    
    [ Upstream commit 9724722fde8f9bbd2b87340f00b9300c9284001e ]
    
    Few commands provide the list of description partially and require
    to be called consecutively until all the descriptors are fetched
    completely. In such cases, we don't release the buffers and reuse
    them for consecutive transmits.
    
    However, currently we don't reset the Rx size which will be set as
    per the response for the last transmit. This may result in incorrect
    response size being interpretted as the firmware may repond with size
    greater than the one set but we read only upto the size set by previous
    response.
    
    Let us reset the receive buffer size to max possible in such cases as
    we don't know the exact size of the response.
    
    Link:  https://lore.kernel.org/r/20201012141746.32575-1-sudeep.holla@arm.com
    Fixes: b6f20ff8bd94 ("firmware: arm_scmi: add common infrastructure and support for base protocol")
    Reported-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aedcfe9a02f869b053f1acd901da1f8f89c43dcd
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Thu Oct 8 16:37:22 2020 +0200

    firmware: arm_scmi: Fix ARCH_COLD_RESET
    
    [ Upstream commit 45b9e04d5ba0b043783dfe2b19bb728e712cb32e ]
    
    The defination for ARCH_COLD_RESET is wrong. Let us fix it according to
    the SCMI specification.
    
    Link: https://lore.kernel.org/r/20201008143722.21888-5-etienne.carriere@linaro.org
    Fixes: 95a15d80aa0d ("firmware: arm_scmi: Add RESET protocol in SCMI v2.0")
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85d9d02a49e29f9805d221ea249a4cd0c16c5fe2
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 14 14:01:02 2020 +0200

    xen/events: block rogue events for some time
    
    commit 5f7f77400ab5b357b5fdb7122c3442239672186c upstream.
    
    In order to avoid high dom0 load due to rogue guests sending events at
    high frequency, block those events in case there was no action needed
    in dom0 to handle the events.
    
    This is done by adding a per-event counter, which set to zero in case
    an EOI without the XEN_EOI_FLAG_SPURIOUS is received from a backend
    driver, and incremented when this flag has been set. In case the
    counter is 2 or higher delay the EOI by 1 << (cnt - 2) jiffies, but
    not more than 1 second.
    
    In order not to waste memory shorten the per-event refcnt to two bytes
    (it should normally never exceed a value of 2). Add an overflow check
    to evtchn_get() to make sure the 2 bytes really won't overflow.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d628c330fa6e1fe58b00624d46b4ce0a2502f54
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:30 2020 +0200

    xen/events: defer eoi in case of excessive number of events
    
    commit e99502f76271d6bc4e374fe368c50c67a1fd3070 upstream.
    
    In case rogue guests are sending events at high frequency it might
    happen that xen_evtchn_do_upcall() won't stop processing events in
    dom0. As this is done in irq handling a crash might be the result.
    
    In order to avoid that, delay further inter-domain events after some
    time in xen_evtchn_do_upcall() by forcing eoi processing into a
    worker on the same cpu, thus inhibiting new events coming in.
    
    The time after which eoi processing is to be delayed is configurable
    via a new module parameter "event_loop_timeout" which specifies the
    maximum event loop time in jiffies (default: 2, the value was chosen
    after some tests showing that a value of 2 was the lowest with an
    only slight drop of dom0 network throughput while multiple guests
    performed an event storm).
    
    How long eoi processing will be delayed can be specified via another
    parameter "event_eoi_delay" (again in jiffies, default 10, again the
    value was chosen after testing with different delay values).
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25c23f03345764ec290566f502c2bce84c2a458f
Author: Juergen Gross <jgross@suse.com>
Date:   Sun Sep 13 14:23:02 2020 +0200

    xen/events: use a common cpu hotplug hook for event channels
    
    commit 7beb290caa2adb0a399e735a1e175db9aae0523a upstream.
    
    Today only fifo event channels have a cpu hotplug callback. In order
    to prepare for more percpu (de)init work move that callback into
    events_base.c and add percpu_init() and percpu_deinit() hooks to
    struct evtchn_ops.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d6a66e21722df4ad2ea2eba1e3bc7b62911dbc
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:29 2020 +0200

    xen/events: switch user event channels to lateeoi model
    
    commit c44b849cee8c3ac587da3b0980e01f77500d158c upstream.
    
    Instead of disabling the irq when an event is received and enabling
    it again when handled by the user process use the lateeoi model.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48b533aa838d1cf49e717775cb625caf86770a34
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:29 2020 +0200

    xen/pciback: use lateeoi irq binding
    
    commit c2711441bc961b37bba0615dd7135857d189035f upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving pcifront use the lateeoi irq
    binding for pciback and unmask the event channel only just before
    leaving the event handling function.
    
    Restructure the handling to support that scheme. Basically an event can
    come in for two reasons: either a normal request for a pciback action,
    which is handled in a worker, or in case the guest has finished an AER
    request which was requested by pciback.
    
    When an AER request is issued to the guest and a normal pciback action
    is currently active issue an EOI early in order to be able to receive
    another event when the AER request has been finished by the guest.
    
    Let the worker processing the normal requests run until no further
    request is pending, instead of starting a new worker ion that case.
    Issue the EOI only just before leaving the worker.
    
    This scheme allows to drop calling the generic function
    xen_pcibk_test_and_schedule_op() after processing of any request as
    the handling of both request types is now separated more cleanly.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9396de462aa6e9f289f2876de8540ba340bd0f89
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:28 2020 +0200

    xen/pvcallsback: use lateeoi irq binding
    
    commit c8d647a326f06a39a8e5f0f1af946eacfa1835f8 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving pvcallsfront use the lateeoi
    irq binding for pvcallsback and unmask the event channel only after
    handling all write requests, which are the ones coming in via an irq.
    
    This requires modifying the logic a little bit to not require an event
    for each write request, but to keep the ioworker running until no
    further data is found on the ring page to be processed.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5441639a38df4c416fdfa68eecbafe4a782bbd2d
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:28 2020 +0200

    xen/scsiback: use lateeoi irq binding
    
    commit 86991b6e7ea6c613b7692f65106076943449b6b7 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving scsifront use the lateeoi
    irq binding for scsiback and unmask the event channel only just before
    leaving the event handling function.
    
    In case of a ring protocol error don't issue an EOI in order to avoid
    the possibility to use that for producing an event storm. This at once
    will result in no further call of scsiback_irq_fn(), so the ring_error
    struct member can be dropped and scsiback_do_cmd_fn() can signal the
    protocol error via a negative return value.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6ea898e56029b8ea77f7696b496629b7b644c79
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:28 2020 +0200

    xen/netback: use lateeoi irq binding
    
    commit 23025393dbeb3b8b3b60ebfa724cdae384992e27 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving netfront use the lateeoi
    irq binding for netback and unmask the event channel only just before
    going to sleep waiting for new events.
    
    Make sure not to issue an EOI when none is pending by introducing an
    eoi_pending element to struct xenvif_queue.
    
    When no request has been consumed set the spurious flag when sending
    the EOI for an interrupt.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ade6bd5af7f9fe27af96fe92b4d50b81c2de0d91
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:27 2020 +0200

    xen/blkback: use lateeoi irq binding
    
    commit 01263a1fabe30b4d542f34c7e2364a22587ddaf2 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving blkfront use the lateeoi
    irq binding for blkback and unmask the event channel only after
    processing all pending requests.
    
    As the thread processing requests is used to do purging work in regular
    intervals an EOI may be sent only after having received an event. If
    there was no pending I/O request flag the EOI as spurious.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df54eca9ae8aace17463f2e8402fcc62efddd0d5
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:27 2020 +0200

    xen/events: add a new "late EOI" evtchn framework
    
    commit 54c9de89895e0a36047fcc4ae754ea5b8655fb9d upstream.
    
    In order to avoid tight event channel related IRQ loops add a new
    framework of "late EOI" handling: the IRQ the event channel is bound
    to will be masked until the event has been handled and the related
    driver is capable to handle another event. The driver is responsible
    for unmasking the event channel via the new function xen_irq_lateeoi().
    
    This is similar to binding an event channel to a threaded IRQ, but
    without having to structure the driver accordingly.
    
    In order to support a future special handling in case a rogue guest
    is sending lots of unsolicited events, add a flag to xen_irq_lateeoi()
    which can be set by the caller to indicate the event was a spurious
    one.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44a455e06d87b09a54dd8a679751ae54fef8e371
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Oct 20 06:52:55 2020 +0200

    xen/events: fix race in evtchn_fifo_unmask()
    
    commit f01337197419b7e8a492e83089552b77d3b5fb90 upstream.
    
    Unmasking a fifo event channel can result in unmasking it twice, once
    directly in the kernel and once via a hypercall in case the event was
    pending.
    
    Fix that by doing the local unmask only if the event is not pending.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bea575a10691a99b03d5e9055f3079040b59868
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:27 2020 +0200

    xen/events: add a proper barrier to 2-level uevent unmasking
    
    commit 4d3fe31bd993ef504350989786858aefdb877daa upstream.
    
    A follow-up patch will require certain write to happen before an event
    channel is unmasked.
    
    While the memory barrier is not strictly necessary for all the callers,
    the main one will need it. In order to avoid an extra memory barrier
    when using fifo event channels, mandate evtchn_unmask() to provide
    write ordering.
    
    The 2-level event handling unmask operation is missing an appropriate
    barrier, so add it. Fifo event channels are fine in this regard due to
    using sync_cmpxchg().
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a01379671d67d34f254cc81f42cf854aa628f3a3
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 7 15:47:27 2020 +0200

    xen/events: avoid removing an event channel while handling it
    
    commit 073d0552ead5bfc7a3a9c01de590e924f11b5dd2 upstream.
    
    Today it can happen that an event channel is being removed from the
    system while the event handling loop is active. This can lead to a
    race resulting in crashes or WARN() splats when trying to access the
    irq_info structure related to the event channel.
    
    Fix this problem by using a rwlock taken as reader in the event
    handling loop and as writer when deallocating the irq_info structure.
    
    As the observed problem was a NULL dereference in evtchn_from_irq()
    make this function more robust against races by testing the irq_info
    pointer to be not NULL before dereferencing it.
    
    And finally make all accesses to evtchn_to_irq[row][col] atomic ones
    in order to avoid seeing partial updates of an array element in irq
    handling. Note that irq handling can be entered only for event channels
    which have been valid before, so any not populated row isn't a problem
    in this regard, as rows are only ever added and never removed.
    
    This is XSA-331.
    
    Cc: stable@vger.kernel.org
    Reported-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Reported-by: Jinoh Kang <luke1337@theori.io>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
