commit b10ab5e2c476b69689bc0c46d309471b597c880c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 19 09:08:09 2019 +0200

    Linux 4.14.145

commit 25a9b1e3f444212af2b52f03da00d03494f94804
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Aug 28 10:56:48 2019 +0200

    x86/build: Add -Wnoaddress-of-packed-member to REALMODE_CFLAGS, to silence GCC9 build warning
    
    commit 42e0e95474fc6076b5cd68cab8fa0340a1797a72 upstream.
    
    One of the very few warnings I have in the current build comes from
    arch/x86/boot/edd.c, where I get the following with a gcc9 build:
    
       arch/x86/boot/edd.c: In function ‘query_edd’:
       arch/x86/boot/edd.c:148:11: warning: taking address of packed member of ‘struct boot_params’ may result in an unaligned pointer value [-Waddress-of-packed-member]
         148 |  mbrptr = boot_params.edd_mbr_sig_buffer;
             |           ^~~~~~~~~~~
    
    This warning triggers because we throw away all the CFLAGS and then make
    a new set for REALMODE_CFLAGS, so the -Wno-address-of-packed-member we
    added in the following commit is not present:
    
      6f303d60534c ("gcc-9: silence 'address-of-packed-member' warning")
    
    The simplest solution for now is to adjust the warning for this version
    of CFLAGS as well, but it would definitely make sense to examine whether
    REALMODE_CFLAGS could be derived from CFLAGS, so that it picks up changes
    in the compiler flags environment automatically.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Acked-by: Borislav Petkov <bp@alien8.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0fc60701db5231f390a2565995ad9a758bbf119
Author: Jean Delvare <jdelvare@suse.de>
Date:   Sun Jul 28 18:42:55 2019 +0200

    nvmem: Use the same permissions for eeprom as for nvmem
    
    commit e70d8b287301eb6d7c7761c6171c56af62110ea3 upstream.
    
    The compatibility "eeprom" attribute is currently root-only no
    matter what the configuration says. The "nvmem" attribute does
    respect the setting of the root_only configuration bit, so do the
    same for "eeprom".
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Fixes: b6c217ab9be6 ("nvmem: Add backwards compatibility support for older EEPROM drivers.")
    Reviewed-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20190728184255.563332e6@endymion
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a75883f402214561a4e584d37d89a96a1f6931e8
Author: Steffen Dirkwinkel <s.dirkwinkel@beckhoff.com>
Date:   Tue Jun 18 15:31:02 2019 +0200

    platform/x86: pmc_atom: Add CB4063 Beckhoff Automation board to critclk_systems DMI table
    
    commit 9452fbf5c6cf5f470e0748fe7a14a683e7765f7a upstream.
    
    The CB4063 board uses pmc_plt_clk* clocks for ethernet controllers. This
    adds it to the critclk_systems DMI table so the clocks are marked as
    CLK_CRITICAL and not turned off.
    
    Fixes: 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    Signed-off-by: Steffen Dirkwinkel <s.dirkwinkel@beckhoff.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d83ad53cbc8a3d4fa313d3bac8dd072c2aa14b37
Author: Mario Limonciello <mario.limonciello@dell.com>
Date:   Mon Aug 19 12:04:08 2019 -0500

    Revert "Bluetooth: btusb: driver to enable the usb-wakeup feature"
    
    commit 1ffdb51f28e8ec6be0a2b812c1765b5cf5c44a8f upstream.
    
    This reverts commit a0085f2510e8976614ad8f766b209448b385492f.
    
    This commit has caused regressions in notebooks that support suspend
    to idle such as the XPS 9360, XPS 9370 and XPS 9380.
    
    These notebooks will wakeup from suspend to idle from an unsolicited
    advertising packet from an unpaired BLE device.
    
    In a bug report it was sugggested that this is caused by a generic
    lack of LE privacy support.  Revert this commit until that behavior
    can be avoided by the kernel.
    
    Fixes: a0085f2510e8 ("Bluetooth: btusb: driver to enable the usb-wakeup feature")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=200039
    Link: https://marc.info/?l=linux-bluetooth&m=156441081612627&w=2
    Link: https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/750073/
    CC: Bastien Nocera <hadess@hadess.net>
    CC: Christian Kellner <ckellner@redhat.com>
    CC: Sukumar Ghorai <sukumar.ghorai@intel.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9251e586a1dffd9f964a2a770f6dc82d175ddcb5
Author: Nishka Dasgupta <nishkadg.linux@gmail.com>
Date:   Sat Jul 6 19:00:21 2019 +0530

    drm/mediatek: mtk_drm_drv.c: Add of_node_put() before goto
    
    commit 165d42c012be69900f0e2f8545626cb9e7d4a832 upstream.
    
    Each iteration of for_each_child_of_node puts the previous
    node, but in the case of a goto from the middle of the loop, there is
    no put, thus causing a memory leak. Hence add an of_node_put before the
    goto in two places.
    Issue found with Coccinelle.
    
    Fixes: 119f5173628a (drm/mediatek: Add DRM Driver for Mediatek SoC MT8173)
    
    Signed-off-by: Nishka Dasgupta <nishkadg.linux@gmail.com>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08d9995712c4ab83a323b0405cce8894d3e74110
Author: Andrew F. Davis <afd@ti.com>
Date:   Tue May 28 11:55:10 2019 -0400

    firmware: ti_sci: Always request response from firmware
    
    commit 66f030eac257a572fbedab3d9646d87d647351fd upstream.
    
    TI-SCI firmware will only respond to messages when the
    TI_SCI_FLAG_REQ_ACK_ON_PROCESSED flag is set. Most messages already do
    this, set this for the ones that do not.
    
    This will be enforced in future firmware that better match the TI-SCI
    specifications, this patch will not break users of existing firmware.
    
    Fixes: aa276781a64a ("firmware: Add basic support for TI System Control Interface (TI-SCI) protocol")
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Acked-by: Nishanth Menon <nm@ti.com>
    Tested-by: Alejandro Hernandez <ajhernandez@ti.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e438f83914e75fd4f0dc2933e4b7f023bf55cc36
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:15 2019 +0000

    crypto: talitos - HMAC SNOOP NO AFEU mode requires SW icv checking.
    
    commit 4bbfb839259a9c96a0be872e16f7471b7136aee5 upstream.
    
    In that mode, hardware ICV verification is not supported.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 7405c8d7ff97 ("crypto: talitos - templates for AEAD using HMAC_SNOOP_NO_AFEU")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ced240dd3c97542c1a8d0c2cf577e57091fc4921
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:14 2019 +0000

    crypto: talitos - Do not modify req->cryptlen on decryption.
    
    commit 7ede4c36cf7c6516986ee9d75b197c8bf73ea96f upstream.
    
    For decrypt, req->cryptlen includes the size of the authentication
    part while all functions of the driver expect cryptlen to be
    the size of the encrypted data.
    
    As it is not expected to change req->cryptlen, this patch
    implements local calculation of cryptlen.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 9c4a79653b35 ("crypto: talitos - Freescale integrated security engine (SEC) driver")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c06f2796b2181e59e26bb660e0241d2eb451a02b
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:13 2019 +0000

    crypto: talitos - fix ECB algs ivsize
    
    commit d84cc9c9524ec5973a337533e6d8ccd3e5f05f2b upstream.
    
    ECB's ivsize must be 0.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 5e75ae1b3cef ("crypto: talitos - add new crypto modes")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcd29f7a35ad77bee6ef1a192d18c56ec1f4e49b
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:12 2019 +0000

    crypto: talitos - check data blocksize in ablkcipher.
    
    commit ee483d32ee1a1a7f7d7e918fbc350c790a5af64a upstream.
    
    When data size is not a multiple of the alg's block size,
    the SEC generates an error interrupt and dumps the registers.
    And for NULL size, the SEC does just nothing and the interrupt
    is awaited forever.
    
    This patch ensures the data size is correct before submitting
    the request to the SEC engine.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 4de9d0b547b9 ("crypto: talitos - Add ablkcipher algorithms")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de12345c4bf686d9b9552773b4c03f96e4e68750
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:11 2019 +0000

    crypto: talitos - fix CTR alg blocksize
    
    commit b9a05b6041cb9810a291315569b2af0d63c3680a upstream.
    
    CTR has a blocksize of 1.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 5e75ae1b3cef ("crypto: talitos - add new crypto modes")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dbb17c438ad0705b9b6b2de7a082342f93ed32b
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:10 2019 +0000

    crypto: talitos - check AES key size
    
    commit 1ba34e71e9e56ac29a52e0d42b6290f3dc5bfd90 upstream.
    
    Although the HW accepts any size and silently truncates
    it to the correct length, the extra tests expects EINVAL
    to be returned when the key size is not valid.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 4de9d0b547b9 ("crypto: talitos - Add ablkcipher algorithms")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5432923a6b208b253d95d95cee72d0508c803421
Author: Muchun Song <smuchun@gmail.com>
Date:   Sat Jul 27 11:21:22 2019 +0800

    driver core: Fix use-after-free and double free on glue directory
    
    commit ac43432cb1f5c2950408534987e57c2071e24d8f upstream.
    
    There is a race condition between removing glue directory and adding a new
    device under the glue dir. It can be reproduced in following test:
    
    CPU1:                                         CPU2:
    
    device_add()
      get_device_parent()
        class_dir_create_and_add()
          kobject_add_internal()
            create_dir()    // create glue_dir
    
                                                  device_add()
                                                    get_device_parent()
                                                      kobject_get() // get glue_dir
    
    device_del()
      cleanup_glue_dir()
        kobject_del(glue_dir)
    
                                                    kobject_add()
                                                      kobject_add_internal()
                                                        create_dir() // in glue_dir
                                                          sysfs_create_dir_ns()
                                                            kernfs_create_dir_ns(sd)
    
          sysfs_remove_dir() // glue_dir->sd=NULL
          sysfs_put()        // free glue_dir->sd
    
                                                              // sd is freed
                                                              kernfs_new_node(sd)
                                                                kernfs_get(glue_dir)
                                                                kernfs_add_one()
                                                                kernfs_put()
    
    Before CPU1 remove last child device under glue dir, if CPU2 add a new
    device under glue dir, the glue_dir kobject reference count will be
    increase to 2 via kobject_get() in get_device_parent(). And CPU2 has
    been called kernfs_create_dir_ns(), but not call kernfs_new_node().
    Meanwhile, CPU1 call sysfs_remove_dir() and sysfs_put(). This result in
    glue_dir->sd is freed and it's reference count will be 0. Then CPU2 call
    kernfs_get(glue_dir) will trigger a warning in kernfs_get() and increase
    it's reference count to 1. Because glue_dir->sd is freed by CPU1, the next
    call kernfs_add_one() by CPU2 will fail(This is also use-after-free)
    and call kernfs_put() to decrease reference count. Because the reference
    count is decremented to 0, it will also call kmem_cache_free() to free
    the glue_dir->sd again. This will result in double free.
    
    In order to avoid this happening, we also should make sure that kernfs_node
    for glue_dir is released in CPU1 only when refcount for glue_dir kobj is
    1 to fix this race.
    
    The following calltrace is captured in kernel 4.14 with the following patch
    applied:
    
    commit 726e41097920 ("drivers: core: Remove glue dirs from sysfs earlier")
    
    --------------------------------------------------------------------------
    [    3.633703] WARNING: CPU: 4 PID: 513 at .../fs/kernfs/dir.c:494
                    Here is WARN_ON(!atomic_read(&kn->count) in kernfs_get().
    ....
    [    3.633986] Call trace:
    [    3.633991]  kernfs_create_dir_ns+0xa8/0xb0
    [    3.633994]  sysfs_create_dir_ns+0x54/0xe8
    [    3.634001]  kobject_add_internal+0x22c/0x3f0
    [    3.634005]  kobject_add+0xe4/0x118
    [    3.634011]  device_add+0x200/0x870
    [    3.634017]  _request_firmware+0x958/0xc38
    [    3.634020]  request_firmware_into_buf+0x4c/0x70
    ....
    [    3.634064] kernel BUG at .../mm/slub.c:294!
                    Here is BUG_ON(object == fp) in set_freepointer().
    ....
    [    3.634346] Call trace:
    [    3.634351]  kmem_cache_free+0x504/0x6b8
    [    3.634355]  kernfs_put+0x14c/0x1d8
    [    3.634359]  kernfs_create_dir_ns+0x88/0xb0
    [    3.634362]  sysfs_create_dir_ns+0x54/0xe8
    [    3.634366]  kobject_add_internal+0x22c/0x3f0
    [    3.634370]  kobject_add+0xe4/0x118
    [    3.634374]  device_add+0x200/0x870
    [    3.634378]  _request_firmware+0x958/0xc38
    [    3.634381]  request_firmware_into_buf+0x4c/0x70
    --------------------------------------------------------------------------
    
    Fixes: 726e41097920 ("drivers: core: Remove glue dirs from sysfs earlier")
    Signed-off-by: Muchun Song <smuchun@gmail.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Prateek Sood <prsood@codeaurora.org>
    Link: https://lore.kernel.org/r/20190727032122.24639-1-smuchun@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0369bbfe7ad21c1aea7b6379542eae810c8da278
Author: Richard Weinberger <richard@nod.at>
Date:   Tue May 14 22:31:08 2019 +0200

    ubifs: Correctly use tnc_next() in search_dh_cookie()
    
    commit bacfa94b08027b9f66ede7044972e3b066766b3e upstream.
    
    Commit c877154d307f fixed an uninitialized variable and optimized
    the function to not call tnc_next() in the first iteration of the
    loop. While this seemed perfectly legit and wise, it turned out to
    be illegal.
    If the lookup function does not find an exact match it will rewind
    the cursor by 1.
    The rewinded cursor will not match the name hash we are looking for
    and this results in a spurious -ENOENT.
    So we need to move to the next entry in case of an non-exact match,
    but not if the match was exact.
    
    While we are here, update the documentation to avoid further confusion.
    
    Cc: Hyunchul Lee <hyc.lee@gmail.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Fixes: c877154d307f ("ubifs: Fix uninitialized variable in search_dh_cookie()")
    Fixes: 781f675e2d7e ("ubifs: Fix unlink code wrt. double hash lookups")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75183476fea19b831e5814e5144d3136f3ee09c4
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Thu May 9 13:27:22 2019 -0600

    PCI: Always allow probing with driver_override
    
    commit 2d2f4273cbe9058d1f5a518e5e880d27d7b3b30f upstream.
    
    Commit 0e7df22401a3 ("PCI: Add sysfs sriov_drivers_autoprobe to control
    VF driver binding") introduced the sriov_drivers_autoprobe attribute
    which allows users to prevent the kernel from automatically probing a
    driver for new VFs as they are created.  This allows VFs to be spawned
    without automatically binding the new device to a host driver, such as
    in cases where the user intends to use the device only with a meta
    driver like vfio-pci.  However, the current implementation prevents any
    use of drivers_probe with the VF while sriov_drivers_autoprobe=0.  This
    blocks the now current general practice of setting driver_override
    followed by using drivers_probe to bind a device to a specified driver.
    
    The kernel never automatically sets a driver_override therefore it seems
    we can assume a driver_override reflects the intent of the user.  Also,
    probing a device using a driver_override match seems outside the scope
    of the 'auto' part of sriov_drivers_autoprobe.  Therefore, let's allow
    driver_override matches regardless of sriov_drivers_autoprobe, which we
    can do by simply testing if a driver_override is set for a device as a
    'can probe' condition.
    
    Fixes: 0e7df22401a3 ("PCI: Add sysfs sriov_drivers_autoprobe to control VF driver binding")
    Link: https://lore.kernel.org/lkml/155742996741.21878.569845487290798703.stgit@gimli.home
    Link: https://lore.kernel.org/linux-pci/155672991496.20698.4279330795743262888.stgit@gimli.home/T/#u
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd7674f398043f34afa70723a874c15c8e9033a2
Author: Xiaolei Li <xiaolei.li@mediatek.com>
Date:   Tue May 7 18:25:41 2019 +0800

    mtd: rawnand: mtk: Fix wrongly assigned OOB buffer pointer issue
    
    commit 336d4b138be2dad372b67a2388e42805c48aaa38 upstream.
    
    One main goal of the function mtk_nfc_update_ecc_stats is to check
    whether sectors are all empty. If they are empty, set these sectors's
    data buffer and OOB buffer as 0xff.
    
    But now, the sector OOB buffer pointer is wrongly assigned. We always
    do memset from sector 0.
    
    To fix this issue, pass start sector number to make OOB buffer pointer
    be properly assigned.
    
    Fixes: 1d6b1e464950 ("mtd: mediatek: driver for MTK Smart Device")
    Signed-off-by: Xiaolei Li <xiaolei.li@mediatek.com>
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f15b4d221f45904bd70b66b82be9bde62808068d
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri May 3 14:22:08 2019 -0700

    clk: rockchip: Don't yell about bad mmc phases when getting
    
    commit 6943b839721ad4a31ad2bacf6e71b21f2dfe3134 upstream.
    
    At boot time, my rk3288-veyron devices yell with 8 lines that look
    like this:
      [    0.000000] rockchip_mmc_get_phase: invalid clk rate
    
    This is because the clock framework at clk_register() time tries to
    get the phase but we don't have a parent yet.
    
    While the errors appear to be harmless they are still ugly and, in
    general, we don't want yells like this in the log unless they are
    important.
    
    There's no real reason to be yelling here.  We can still return
    -EINVAL to indicate that the phase makes no sense without a parent.
    If someone really tries to do tuning and the clock is reported as 0
    then we'll see the yells in rockchip_mmc_set_phase().
    
    Fixes: 4bf59902b500 ("clk: rockchip: Prevent calculating mmc phase if clock rate is zero")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73cacb9bb9ed76ff1bf10688adea5dfc19849d37
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Mon Apr 29 09:52:38 2019 +0200

    drm/meson: Add support for XBGR8888 & ABGR8888 formats
    
    commit 5ffff4415f9eeae834960226770963e2947e17eb upstream.
    
    Add missing XBGR8888 & ABGR8888 formats variants from the primary plane.
    
    Fixes: bbbe775ec5b5 ("drm: Add support for Amlogic Meson Graphic Controller")
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190429075238.7884-1-narmstrong@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 219daed86530a0f5def0405c7d01551873de708b
Author: Suraj Jitindar Singh <sjitindarsingh@gmail.com>
Date:   Wed Mar 6 12:10:38 2019 +1100

    powerpc: Add barrier_nospec to raw_copy_in_user()
    
    commit 6fbcdd59094ade30db63f32316e9502425d7b256 upstream.
    
    Commit ddf35cf3764b ("powerpc: Use barrier_nospec in copy_from_user()")
    Added barrier_nospec before loading from user-controlled pointers. The
    intention was to order the load from the potentially user-controlled
    pointer vs a previous branch based on an access_ok() check or similar.
    
    In order to achieve the same result, add a barrier_nospec to the
    raw_copy_in_user() function before loading from such a user-controlled
    pointer.
    
    Fixes: ddf35cf3764b ("powerpc: Use barrier_nospec in copy_from_user()")
    Signed-off-by: Suraj Jitindar Singh <sjitindarsingh@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 263c71d2d440ed6a9d36e822970c9b5cce98811b
Author: Paul Burton <paulburton@kernel.org>
Date:   Mon Jan 28 22:21:17 2019 +0000

    MIPS: VDSO: Use same -m%-float cflag as the kernel proper
    
    commit 0648e50e548d881d025b9419a1a168753c8e2bf7 upstream.
    
    The MIPS VDSO build currently doesn't provide the -msoft-float flag to
    the compiler as the kernel proper does. This results in an attempt to
    use the compiler's default floating point configuration, which can be
    problematic in cases where this is incompatible with the target CPU's
    -march= flag. For example decstation_defconfig fails to build using
    toolchains in which gcc was configured --with-fp-32=xx with the
    following error:
    
        LDS     arch/mips/vdso/vdso.lds
      cc1: error: '-march=r3000' requires '-mfp32'
      make[2]: *** [scripts/Makefile.build:379: arch/mips/vdso/vdso.lds] Error 1
    
    The kernel proper avoids this error because we build with the
    -msoft-float compiler flag, rather than using the compiler's default.
    Pass this flag through to the VDSO build so that it too becomes agnostic
    to the toolchain's floating point configuration.
    
    Note that this is filtered out from KBUILD_CFLAGS rather than simply
    always using -msoft-float such that if we switch the kernel to use
    -mno-float in the future the VDSO will automatically inherit the change.
    
    The VDSO doesn't actually include any floating point code, and its
    .MIPS.abiflags section is already manually generated to specify that
    it's compatible with any floating point ABI. As such this change should
    have no effect on the resulting VDSO, apart from fixing the build
    failure for affected toolchains.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Kevin Hilman <khilman@baylibre.com>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Kevin Hilman <khilman@baylibre.com>
    References: https://lore.kernel.org/linux-mips/1477843551-21813-1-git-send-email-linux@roeck-us.net/
    References: https://kernelci.org/build/id/5c4e4ae059b5142a249ad004/logs/
    Fixes: ebb5e78cc634 ("MIPS: Initial implementation of a VDSO")
    Cc: Maciej W. Rozycki <macro@linux-mips.org>
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # v4.4+
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b74b71a37b6dc55f6d8716e8dbda87ea9aa4fd
Author: Paul Burton <paulburton@kernel.org>
Date:   Tue Dec 12 09:57:47 2017 +0000

    MIPS: VDSO: Prevent use of smp_processor_id()
    
    commit 351fdddd366245c0fb4636f32edfb4198c8d6b8c upstream.
    
    VDSO code should not be using smp_processor_id(), since it is executed
    in user mode.
    Introduce a VDSO-specific path which will cause a compile-time
    or link-time error (depending upon support for __compiletime_error) if
    the VDSO ever incorrectly attempts to use smp_processor_id().
    
    [Matt Redfearn <matt.redfearn@imgtec.com>: Move before change to
    smp_processor_id in series]
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/17932/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@linux-mips.org
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 370ade836975679b65a7633d33c631a24267a26e
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sat Sep 14 00:26:27 2019 +0200

    KVM: nVMX: handle page fault in vmread
    
    commit f7eea636c3d505fe6f1d1066234f1aaf7171b681 upstream.
    
    The implementation of vmread to memory is still incomplete, as it
    lacks the ability to do vmread to I/O memory just like vmptrst.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69b416ef9c05eeb438f16eee392f1b24e023aa9c
Author: Fuqian Huang <huangfq.daxian@gmail.com>
Date:   Thu Sep 12 12:18:17 2019 +0800

    KVM: x86: work around leak of uninitialized stack contents
    
    commit 541ab2aeb28251bf7135c7961f3a6080eebcc705 upstream.
    
    Emulation of VMPTRST can incorrectly inject a page fault
    when passed an operand that points to an MMIO address.
    The page fault will use uninitialized kernel stack memory
    as the CR2 and error code.
    
    The right behavior would be to abort the VM with a KVM_EXIT_INTERNAL_ERROR
    exit to userspace; however, it is not an easy fix, so for now just ensure
    that the error code and CR2 are zero.
    
    Signed-off-by: Fuqian Huang <huangfq.daxian@gmail.com>
    Cc: stable@vger.kernel.org
    [add comment]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd1b7efe8e04ef259e7beb2f68af8d4f7a7e9d8e
Author: Thomas Huth <thuth@redhat.com>
Date:   Thu Sep 12 13:54:38 2019 +0200

    KVM: s390: Do not leak kernel stack data in the KVM_S390_INTERRUPT ioctl
    
    commit 53936b5bf35e140ae27e4bbf0447a61063f400da upstream.
    
    When the userspace program runs the KVM_S390_INTERRUPT ioctl to inject
    an interrupt, we convert them from the legacy struct kvm_s390_interrupt
    to the new struct kvm_s390_irq via the s390int_to_s390irq() function.
    However, this function does not take care of all types of interrupts
    that we can inject into the guest later (see do_inject_vcpu()). Since we
    do not clear out the s390irq values before calling s390int_to_s390irq(),
    there is a chance that we copy random data from the kernel stack which
    could be leaked to the userspace later.
    
    Specifically, the problem exists with the KVM_S390_INT_PFAULT_INIT
    interrupt: s390int_to_s390irq() does not handle it, and the function
    __inject_pfault_init() later copies irq->u.ext which contains the
    random kernel stack data. This data can then be leaked either to
    the guest memory in __deliver_pfault_init(), or the userspace might
    retrieve it directly with the KVM_S390_GET_IRQ_STATE ioctl.
    
    Fix it by handling that interrupt type in s390int_to_s390irq(), too,
    and by making sure that the s390irq struct is properly pre-initialized.
    And while we're at it, make sure that s390int_to_s390irq() now
    directly returns -EINVAL for unknown interrupt types, so that we
    immediately get a proper error code in case we add more interrupt
    types to do_inject_vcpu() without updating s390int_to_s390irq()
    sometime in the future.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Link: https://lore.kernel.org/kvm/20190912115438.25761-1-thuth@redhat.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3426b361703541faf8223b79f2a3dee553d6bb9f
Author: Yunfeng Ye <yeyunfeng@huawei.com>
Date:   Wed Sep 4 20:46:25 2019 +0800

    genirq: Prevent NULL pointer dereference in resend_irqs()
    
    commit eddf3e9c7c7e4d0707c68d1bb22cc6ec8aef7d4a upstream.
    
    The following crash was observed:
    
      Unable to handle kernel NULL pointer dereference at 0000000000000158
      Internal error: Oops: 96000004 [#1] SMP
      pc : resend_irqs+0x68/0xb0
      lr : resend_irqs+0x64/0xb0
      ...
      Call trace:
       resend_irqs+0x68/0xb0
       tasklet_action_common.isra.6+0x84/0x138
       tasklet_action+0x2c/0x38
       __do_softirq+0x120/0x324
       run_ksoftirqd+0x44/0x60
       smpboot_thread_fn+0x1ac/0x1e8
       kthread+0x134/0x138
       ret_from_fork+0x10/0x18
    
    The reason for this is that the interrupt resend mechanism happens in soft
    interrupt context, which is a asynchronous mechanism versus other
    operations on interrupts. free_irq() does not take resend handling into
    account. Thus, the irq descriptor might be already freed before the resend
    tasklet is executed. resend_irqs() does not check the return value of the
    interrupt descriptor lookup and derefences the return value
    unconditionally.
    
      1):
      __setup_irq
        irq_startup
          check_irq_resend  // activate softirq to handle resend irq
      2):
      irq_domain_free_irqs
        irq_free_descs
          free_desc
            call_rcu(&desc->rcu, delayed_free_desc)
      3):
      __do_softirq
        tasklet_action
          resend_irqs
            desc = irq_to_desc(irq)
            desc->handle_irq(desc)  // desc is NULL --> Ooops
    
    Fix this by adding a NULL pointer check in resend_irqs() before derefencing
    the irq descriptor.
    
    Fixes: a4633adcdbc1 ("[PATCH] genirq: add genirq sw IRQ-retrigger")
    Signed-off-by: Yunfeng Ye <yeyunfeng@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1630ae13-5c8e-901e-de09-e740b6a426a7@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a8683c33a1188dee924f75366211ccafc50703a
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Sep 10 15:26:49 2019 +0100

    Btrfs: fix assertion failure during fsync and use of stale transaction
    
    commit 410f954cb1d1c79ae485dd83a175f21954fd87cd upstream.
    
    Sometimes when fsync'ing a file we need to log that other inodes exist and
    when we need to do that we acquire a reference on the inodes and then drop
    that reference using iput() after logging them.
    
    That generally is not a problem except if we end up doing the final iput()
    (dropping the last reference) on the inode and that inode has a link count
    of 0, which can happen in a very short time window if the logging path
    gets a reference on the inode while it's being unlinked.
    
    In that case we end up getting the eviction callback, btrfs_evict_inode(),
    invoked through the iput() call chain which needs to drop all of the
    inode's items from its subvolume btree, and in order to do that, it needs
    to join a transaction at the helper function evict_refill_and_join().
    However because the task previously started a transaction at the fsync
    handler, btrfs_sync_file(), it has current->journal_info already pointing
    to a transaction handle and therefore evict_refill_and_join() will get
    that transaction handle from btrfs_join_transaction(). From this point on,
    two different problems can happen:
    
    1) evict_refill_and_join() will often change the transaction handle's
       block reserve (->block_rsv) and set its ->bytes_reserved field to a
       value greater than 0. If evict_refill_and_join() never commits the
       transaction, the eviction handler ends up decreasing the reference
       count (->use_count) of the transaction handle through the call to
       btrfs_end_transaction(), and after that point we have a transaction
       handle with a NULL ->block_rsv (which is the value prior to the
       transaction join from evict_refill_and_join()) and a ->bytes_reserved
       value greater than 0. If after the eviction/iput completes the inode
       logging path hits an error or it decides that it must fallback to a
       transaction commit, the btrfs fsync handle, btrfs_sync_file(), gets a
       non-zero value from btrfs_log_dentry_safe(), and because of that
       non-zero value it tries to commit the transaction using a handle with
       a NULL ->block_rsv and a non-zero ->bytes_reserved value. This makes
       the transaction commit hit an assertion failure at
       btrfs_trans_release_metadata() because ->bytes_reserved is not zero but
       the ->block_rsv is NULL. The produced stack trace for that is like the
       following:
    
       [192922.917158] assertion failed: !trans->bytes_reserved, file: fs/btrfs/transaction.c, line: 816
       [192922.917553] ------------[ cut here ]------------
       [192922.917922] kernel BUG at fs/btrfs/ctree.h:3532!
       [192922.918310] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC PTI
       [192922.918666] CPU: 2 PID: 883 Comm: fsstress Tainted: G        W         5.1.4-btrfs-next-47 #1
       [192922.919035] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
       [192922.919801] RIP: 0010:assfail.constprop.25+0x18/0x1a [btrfs]
       (...)
       [192922.920925] RSP: 0018:ffffaebdc8a27da8 EFLAGS: 00010286
       [192922.921315] RAX: 0000000000000051 RBX: ffff95c9c16a41c0 RCX: 0000000000000000
       [192922.921692] RDX: 0000000000000000 RSI: ffff95cab6b16838 RDI: ffff95cab6b16838
       [192922.922066] RBP: ffff95c9c16a41c0 R08: 0000000000000000 R09: 0000000000000000
       [192922.922442] R10: ffffaebdc8a27e70 R11: 0000000000000000 R12: ffff95ca731a0980
       [192922.922820] R13: 0000000000000000 R14: ffff95ca84c73338 R15: ffff95ca731a0ea8
       [192922.923200] FS:  00007f337eda4e80(0000) GS:ffff95cab6b00000(0000) knlGS:0000000000000000
       [192922.923579] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
       [192922.923948] CR2: 00007f337edad000 CR3: 00000001e00f6002 CR4: 00000000003606e0
       [192922.924329] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [192922.924711] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
       [192922.925105] Call Trace:
       [192922.925505]  btrfs_trans_release_metadata+0x10c/0x170 [btrfs]
       [192922.925911]  btrfs_commit_transaction+0x3e/0xaf0 [btrfs]
       [192922.926324]  btrfs_sync_file+0x44c/0x490 [btrfs]
       [192922.926731]  do_fsync+0x38/0x60
       [192922.927138]  __x64_sys_fdatasync+0x13/0x20
       [192922.927543]  do_syscall_64+0x60/0x1c0
       [192922.927939]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
       (...)
       [192922.934077] ---[ end trace f00808b12068168f ]---
    
    2) If evict_refill_and_join() decides to commit the transaction, it will
       be able to do it, since the nested transaction join only increments the
       transaction handle's ->use_count reference counter and it does not
       prevent the transaction from getting committed. This means that after
       eviction completes, the fsync logging path will be using a transaction
       handle that refers to an already committed transaction. What happens
       when using such a stale transaction can be unpredictable, we are at
       least having a use-after-free on the transaction handle itself, since
       the transaction commit will call kmem_cache_free() against the handle
       regardless of its ->use_count value, or we can end up silently losing
       all the updates to the log tree after that iput() in the logging path,
       or using a transaction handle that in the meanwhile was allocated to
       another task for a new transaction, etc, pretty much unpredictable
       what can happen.
    
    In order to fix both of them, instead of using iput() during logging, use
    btrfs_add_delayed_iput(), so that the logging path of fsync never drops
    the last reference on an inode, that step is offloaded to a safe context
    (usually the cleaner kthread).
    
    The assertion failure issue was sporadically triggered by the test case
    generic/475 from fstests, which loads the dm error target while fsstress
    is running, which lead to fsync failing while logging inodes with -EIO
    errors and then trying later to commit the transaction, triggering the
    assertion failure.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a26cf23ddf7311edd0237a3c010bc11f068f3dce
Author: Kent Gibson <warthog618@gmail.com>
Date:   Mon Sep 9 03:24:06 2019 +0000

    gpio: fix line flag validation in lineevent_create
    
    commit 5ca2f54b597c816df54ff1b28eb99cf7262b955d upstream.
    
    lineevent_create should not allow any of GPIOHANDLE_REQUEST_OUTPUT,
    GPIOHANDLE_REQUEST_OPEN_DRAIN or GPIOHANDLE_REQUEST_OPEN_SOURCE to be set.
    
    Fixes: d7c51b47ac11 ("gpio: userspace ABI for reading/writing GPIO lines")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca73cdcaead3a64250c5323c296b87acceaf1ac6
Author: Kent Gibson <warthog618@gmail.com>
Date:   Mon Sep 9 03:22:18 2019 +0000

    gpio: fix line flag validation in linehandle_create
    
    commit e95fbc130a162ba9ad956311b95aa0da269eea48 upstream.
    
    linehandle_create should not allow both GPIOHANDLE_REQUEST_INPUT
    and GPIOHANDLE_REQUEST_OUTPUT to be set.
    
    Fixes: d7c51b47ac11 ("gpio: userspace ABI for reading/writing GPIO lines")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b09f44b80e6a42007bafa8725a2a816b9dff266
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Aug 27 22:28:35 2019 +0200

    gpiolib: acpi: Add gpiolib_acpi_run_edge_events_on_boot option and blacklist
    
    commit 61f7f7c8f978b1c0d80e43c83b7d110ca0496eb4 upstream.
    
    Another day; another DSDT bug we need to workaround...
    
    Since commit ca876c7483b6 ("gpiolib-acpi: make sure we trigger edge events
    at least once on boot") we call _AEI edge handlers at boot.
    
    In some rare cases this causes problems. One example of this is the Minix
    Neo Z83-4 mini PC, this device has a clear DSDT bug where it has some copy
    and pasted code for dealing with Micro USB-B connector host/device role
    switching, while the mini PC does not even have a micro-USB connector.
    This code, which should not be there, messes with the DDC data pin from
    the HDMI connector (switching it to GPIO mode) breaking HDMI support.
    
    To avoid problems like this, this commit adds a new
    gpiolib_acpi.run_edge_events_on_boot kernel commandline option, which
    allows disabling the running of _AEI edge event handlers at boot.
    
    The default value is -1/auto which uses a DMI based blacklist, the initial
    version of this blacklist contains the Neo Z83-4 fixing the HDMI breakage.
    
    Cc: stable@vger.kernel.org
    Cc: Daniel Drake <drake@endlessm.com>
    Cc: Ian W MORRISON <ianwmorrison@gmail.com>
    Reported-by: Ian W MORRISON <ianwmorrison@gmail.com>
    Suggested-by: Ian W MORRISON <ianwmorrison@gmail.com>
    Fixes: ca876c7483b6 ("gpiolib-acpi: make sure we trigger edge events at least once on boot")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20190827202835.213456-1-hdegoede@redhat.com
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Ian W MORRISON <ianwmorrison@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f1303882e7c0b5ebd65d5ef3540fadc63d5ad4e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Sep 16 16:59:01 2019 +0200

    Revert "MIPS: SiByte: Enable swiotlb for SWARM, LittleSur and BigSur"
    
    This reverts commit c85acbf72786a5901a2170b2145761ed7cf06429 which is
    commit e4849aff1e169b86c561738daf8ff020e9de1011 upstream
    
    Guenter writes:
            Upstream commit e4849aff1e16 ("MIPS: SiByte: Enable swiotlb for SWARM,
            LittleSur and BigSur") results in build failures in v4.4.y and v4.14.y.
    
            make bigsur_defconfig:
    
            warning: (SIBYTE_SWARM && SIBYTE_SENTOSA && SIBYTE_BIGSUR && SWIOTLB_XEN && AMD_IOMMU) selects SWIOTLB which has unmet direct dependencies (CAVIUM_OCTEON_SOC || MACH_LOONGSON64 && CPU_LOONGSON3 || NLM_XLP_BOARD || NLM_XLR_BOARD)
            warning: (SIBYTE_SWARM && SIBYTE_SENTOSA && SIBYTE_BIGSUR && SWIOTLB_XEN && AMD_IOMMU) selects SWIOTLB which has unmet direct dependencies (CAVIUM_OCTEON_SOC || MACH_LOONGSON64 && CPU_LOONGSON3 || NLM_XLP_BOARD || NLM_XLR_BOARD)
    
            and the actual build:
    
            lib/swiotlb.o: In function `swiotlb_tbl_map_single':
            (.text+0x1c0): undefined reference to `iommu_is_span_boundary'
            Makefile:1021: recipe for target 'vmlinux' failed
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Maciej W. Rozycki <macro@linux-mips.org>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72fed359692bc1fa6727d52327c4ed940cad7b1d
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Thu Jun 6 12:07:15 2019 +0200

    btrfs: correctly validate compression type
    
    commit aa53e3bfac7205fb3a8815ac1c937fd6ed01b41e upstream.
    
    Nikolay reported the following KASAN splat when running btrfs/048:
    
    [ 1843.470920] ==================================================================
    [ 1843.471971] BUG: KASAN: slab-out-of-bounds in strncmp+0x66/0xb0
    [ 1843.472775] Read of size 1 at addr ffff888111e369e2 by task btrfs/3979
    
    [ 1843.473904] CPU: 3 PID: 3979 Comm: btrfs Not tainted 5.2.0-rc3-default #536
    [ 1843.475009] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [ 1843.476322] Call Trace:
    [ 1843.476674]  dump_stack+0x7c/0xbb
    [ 1843.477132]  ? strncmp+0x66/0xb0
    [ 1843.477587]  print_address_description+0x114/0x320
    [ 1843.478256]  ? strncmp+0x66/0xb0
    [ 1843.478740]  ? strncmp+0x66/0xb0
    [ 1843.479185]  __kasan_report+0x14e/0x192
    [ 1843.479759]  ? strncmp+0x66/0xb0
    [ 1843.480209]  kasan_report+0xe/0x20
    [ 1843.480679]  strncmp+0x66/0xb0
    [ 1843.481105]  prop_compression_validate+0x24/0x70
    [ 1843.481798]  btrfs_xattr_handler_set_prop+0x65/0x160
    [ 1843.482509]  __vfs_setxattr+0x71/0x90
    [ 1843.483012]  __vfs_setxattr_noperm+0x84/0x130
    [ 1843.483606]  vfs_setxattr+0xac/0xb0
    [ 1843.484085]  setxattr+0x18c/0x230
    [ 1843.484546]  ? vfs_setxattr+0xb0/0xb0
    [ 1843.485048]  ? __mod_node_page_state+0x1f/0xa0
    [ 1843.485672]  ? _raw_spin_unlock+0x24/0x40
    [ 1843.486233]  ? __handle_mm_fault+0x988/0x1290
    [ 1843.486823]  ? lock_acquire+0xb4/0x1e0
    [ 1843.487330]  ? lock_acquire+0xb4/0x1e0
    [ 1843.487842]  ? mnt_want_write_file+0x3c/0x80
    [ 1843.488442]  ? debug_lockdep_rcu_enabled+0x22/0x40
    [ 1843.489089]  ? rcu_sync_lockdep_assert+0xe/0x70
    [ 1843.489707]  ? __sb_start_write+0x158/0x200
    [ 1843.490278]  ? mnt_want_write_file+0x3c/0x80
    [ 1843.490855]  ? __mnt_want_write+0x98/0xe0
    [ 1843.491397]  __x64_sys_fsetxattr+0xba/0xe0
    [ 1843.492201]  ? trace_hardirqs_off_thunk+0x1a/0x1c
    [ 1843.493201]  do_syscall_64+0x6c/0x230
    [ 1843.493988]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 1843.495041] RIP: 0033:0x7fa7a8a7707a
    [ 1843.495819] Code: 48 8b 0d 21 de 2b 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 49 89 ca b8 be 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d ee dd 2b 00 f7 d8 64 89 01 48
    [ 1843.499203] RSP: 002b:00007ffcb73bca38 EFLAGS: 00000202 ORIG_RAX: 00000000000000be
    [ 1843.500210] RAX: ffffffffffffffda RBX: 00007ffcb73bda9d RCX: 00007fa7a8a7707a
    [ 1843.501170] RDX: 00007ffcb73bda9d RSI: 00000000006dc050 RDI: 0000000000000003
    [ 1843.502152] RBP: 00000000006dc050 R08: 0000000000000000 R09: 0000000000000000
    [ 1843.503109] R10: 0000000000000002 R11: 0000000000000202 R12: 00007ffcb73bda91
    [ 1843.504055] R13: 0000000000000003 R14: 00007ffcb73bda82 R15: ffffffffffffffff
    
    [ 1843.505268] Allocated by task 3979:
    [ 1843.505771]  save_stack+0x19/0x80
    [ 1843.506211]  __kasan_kmalloc.constprop.5+0xa0/0xd0
    [ 1843.506836]  setxattr+0xeb/0x230
    [ 1843.507264]  __x64_sys_fsetxattr+0xba/0xe0
    [ 1843.507886]  do_syscall_64+0x6c/0x230
    [ 1843.508429]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [ 1843.509558] Freed by task 0:
    [ 1843.510188] (stack is not available)
    
    [ 1843.511309] The buggy address belongs to the object at ffff888111e369e0
                    which belongs to the cache kmalloc-8 of size 8
    [ 1843.514095] The buggy address is located 2 bytes inside of
                    8-byte region [ffff888111e369e0, ffff888111e369e8)
    [ 1843.516524] The buggy address belongs to the page:
    [ 1843.517561] page:ffff88813f478d80 refcount:1 mapcount:0 mapping:ffff88811940c300 index:0xffff888111e373b8 compound_mapcount: 0
    [ 1843.519993] flags: 0x4404000010200(slab|head)
    [ 1843.520951] raw: 0004404000010200 ffff88813f48b008 ffff888119403d50 ffff88811940c300
    [ 1843.522616] raw: ffff888111e373b8 000000000016000f 00000001ffffffff 0000000000000000
    [ 1843.524281] page dumped because: kasan: bad access detected
    
    [ 1843.525936] Memory state around the buggy address:
    [ 1843.526975]  ffff888111e36880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 1843.528479]  ffff888111e36900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 1843.530138] >ffff888111e36980: fc fc fc fc fc fc fc fc fc fc fc fc 02 fc fc fc
    [ 1843.531877]                                                        ^
    [ 1843.533287]  ffff888111e36a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 1843.534874]  ffff888111e36a80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 1843.536468] ==================================================================
    
    This is caused by supplying a too short compression value ('lz') in the
    test-case and comparing it to 'lzo' with strncmp() and a length of 3.
    strncmp() read past the 'lz' when looking for the 'o' and thus caused an
    out-of-bounds read.
    
    Introduce a new check 'btrfs_compress_is_valid_type()' which not only
    checks the user-supplied value against known compression types, but also
    employs checks for too short values.
    
    
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    Fixes: 272e5326c783 ("btrfs: prop: fix vanished compression property after failed set")
    CC: stable@vger.kernel.org # 5.1+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fae7ff46beb2445153ba500c134dba606b81ea20
Author: David Sterba <dsterba@suse.com>
Date:   Tue Oct 31 17:24:26 2017 +0100

    btrfs: compression: add helper for type to string conversion
    
    commit e128f9c3f7242318e1c76d204c7ae32bc878b8c7 upstream.
    
    There are several places opencoding this conversion, add a helper now
    that we have 3 compression algorithms.
    
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f37ed9bc10eca7e771ad3c14bfd04bdd29bcf37a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Sep 10 18:56:57 2019 +0800

    tun: fix use-after-free when register netdev failed
    
    [ Upstream commit 77f22f92dff8e7b45c7786a430626d38071d4670 ]
    
    I got a UAF repport in tun driver when doing fuzzy test:
    
    [  466.269490] ==================================================================
    [  466.271792] BUG: KASAN: use-after-free in tun_chr_read_iter+0x2ca/0x2d0
    [  466.271806] Read of size 8 at addr ffff888372139250 by task tun-test/2699
    [  466.271810]
    [  466.271824] CPU: 1 PID: 2699 Comm: tun-test Not tainted 5.3.0-rc1-00001-g5a9433db2614-dirty #427
    [  466.271833] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    [  466.271838] Call Trace:
    [  466.271858]  dump_stack+0xca/0x13e
    [  466.271871]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271890]  print_address_description+0x79/0x440
    [  466.271906]  ? vprintk_func+0x5e/0xf0
    [  466.271920]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271935]  __kasan_report+0x15c/0x1df
    [  466.271958]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271976]  kasan_report+0xe/0x20
    [  466.271987]  tun_chr_read_iter+0x2ca/0x2d0
    [  466.272013]  do_iter_readv_writev+0x4b7/0x740
    [  466.272032]  ? default_llseek+0x2d0/0x2d0
    [  466.272072]  do_iter_read+0x1c5/0x5e0
    [  466.272110]  vfs_readv+0x108/0x180
    [  466.299007]  ? compat_rw_copy_check_uvector+0x440/0x440
    [  466.299020]  ? fsnotify+0x888/0xd50
    [  466.299040]  ? __fsnotify_parent+0xd0/0x350
    [  466.299064]  ? fsnotify_first_mark+0x1e0/0x1e0
    [  466.304548]  ? vfs_write+0x264/0x510
    [  466.304569]  ? ksys_write+0x101/0x210
    [  466.304591]  ? do_preadv+0x116/0x1a0
    [  466.304609]  do_preadv+0x116/0x1a0
    [  466.309829]  do_syscall_64+0xc8/0x600
    [  466.309849]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.309861] RIP: 0033:0x4560f9
    [  466.309875] Code: 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    [  466.309889] RSP: 002b:00007ffffa5166e8 EFLAGS: 00000206 ORIG_RAX: 0000000000000127
    [  466.322992] RAX: ffffffffffffffda RBX: 0000000000400460 RCX: 00000000004560f9
    [  466.322999] RDX: 0000000000000003 RSI: 00000000200008c0 RDI: 0000000000000003
    [  466.323007] RBP: 00007ffffa516700 R08: 0000000000000004 R09: 0000000000000000
    [  466.323014] R10: 0000000000000000 R11: 0000000000000206 R12: 000000000040cb10
    [  466.323021] R13: 0000000000000000 R14: 00000000006d7018 R15: 0000000000000000
    [  466.323057]
    [  466.323064] Allocated by task 2605:
    [  466.335165]  save_stack+0x19/0x80
    [  466.336240]  __kasan_kmalloc.constprop.8+0xa0/0xd0
    [  466.337755]  kmem_cache_alloc+0xe8/0x320
    [  466.339050]  getname_flags+0xca/0x560
    [  466.340229]  user_path_at_empty+0x2c/0x50
    [  466.341508]  vfs_statx+0xe6/0x190
    [  466.342619]  __do_sys_newstat+0x81/0x100
    [  466.343908]  do_syscall_64+0xc8/0x600
    [  466.345303]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.347034]
    [  466.347517] Freed by task 2605:
    [  466.348471]  save_stack+0x19/0x80
    [  466.349476]  __kasan_slab_free+0x12e/0x180
    [  466.350726]  kmem_cache_free+0xc8/0x430
    [  466.351874]  putname+0xe2/0x120
    [  466.352921]  filename_lookup+0x257/0x3e0
    [  466.354319]  vfs_statx+0xe6/0x190
    [  466.355498]  __do_sys_newstat+0x81/0x100
    [  466.356889]  do_syscall_64+0xc8/0x600
    [  466.358037]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.359567]
    [  466.360050] The buggy address belongs to the object at ffff888372139100
    [  466.360050]  which belongs to the cache names_cache of size 4096
    [  466.363735] The buggy address is located 336 bytes inside of
    [  466.363735]  4096-byte region [ffff888372139100, ffff88837213a100)
    [  466.367179] The buggy address belongs to the page:
    [  466.368604] page:ffffea000dc84e00 refcount:1 mapcount:0 mapping:ffff8883df1b4f00 index:0x0 compound_mapcount: 0
    [  466.371582] flags: 0x2fffff80010200(slab|head)
    [  466.372910] raw: 002fffff80010200 dead000000000100 dead000000000122 ffff8883df1b4f00
    [  466.375209] raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    [  466.377778] page dumped because: kasan: bad access detected
    [  466.379730]
    [  466.380288] Memory state around the buggy address:
    [  466.381844]  ffff888372139100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.384009]  ffff888372139180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.386131] >ffff888372139200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.388257]                                                  ^
    [  466.390234]  ffff888372139280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.392512]  ffff888372139300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.394667] ==================================================================
    
    tun_chr_read_iter() accessed the memory which freed by free_netdev()
    called by tun_set_iff():
    
            CPUA                                           CPUB
      tun_set_iff()
        alloc_netdev_mqs()
        tun_attach()
                                                      tun_chr_read_iter()
                                                        tun_get()
                                                        tun_do_read()
                                                          tun_ring_recv()
        register_netdevice() <-- inject error
        goto err_detach
        tun_detach_all() <-- set RCV_SHUTDOWN
        free_netdev() <-- called from
                         err_free_dev path
          netdev_freemem() <-- free the memory
                            without check refcount
          (In this path, the refcount cannot prevent
           freeing the memory of dev, and the memory
           will be used by dev_put() called by
           tun_chr_read_iter() on CPUB.)
                                                         (Break from tun_ring_recv(),
                                                         because RCV_SHUTDOWN is set)
                                                       tun_put()
                                                         dev_put() <-- use the memory
                                                                       freed by netdev_freemem()
    
    Put the publishing of tfile->tun after register_netdevice(),
    so tun_get() won't get the tun pointer that freed by
    err_detach path if register_netdevice() failed.
    
    Fixes: eb0fb363f920 ("tuntap: attach queue 0 before registering netdevice")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Suggested-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7de5d0c7e7b86141824cb01824fb47999dd803d5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a6429364bc1c5bd898f3975086ae16d1b1af0f6
Author: Neal Cardwell <ncardwell@google.com>
Date:   Mon Sep 9 16:56:02 2019 -0400

    tcp: fix tcp_ecn_withdraw_cwr() to clear TCP_ECN_QUEUE_CWR
    
    [ Upstream commit af38d07ed391b21f7405fa1f936ca9686787d6d2 ]
    
    Fix tcp_ecn_withdraw_cwr() to clear the correct bit:
    TCP_ECN_QUEUE_CWR.
    
    Rationale: basically, TCP_ECN_DEMAND_CWR is a bit that is purely about
    the behavior of data receivers, and deciding whether to reflect
    incoming IP ECN CE marks as outgoing TCP th->ece marks. The
    TCP_ECN_QUEUE_CWR bit is purely about the behavior of data senders,
    and deciding whether to send CWR. The tcp_ecn_withdraw_cwr() function
    is only called from tcp_undo_cwnd_reduction() by data senders during
    an undo, so it should zero the sender-side state,
    TCP_ECN_QUEUE_CWR. It does not make sense to stop the reflection of
    incoming CE bits on incoming data packets just because outgoing
    packets were spuriously retransmitted.
    
    The bug has been reproduced with packetdrill to manifest in a scenario
    with RFC3168 ECN, with an incoming data packet with CE bit set and
    carrying a TCP timestamp value that causes cwnd undo. Before this fix,
    the IP CE bit was ignored and not reflected in the TCP ECE header bit,
    and sender sent a TCP CWR ('W') bit on the next outgoing data packet,
    even though the cwnd reduction had been undone.  After this fix, the
    sender properly reflects the CE bit and does not set the W bit.
    
    Note: the bug actually predates 2005 git history; this Fixes footer is
    chosen to be the oldest SHA1 I have tested (from Sep 2007) for which
    the patch applies cleanly (since before this commit the code was in a
    .h file).
    
    Fixes: bdf1ee5d3bd3 ("[TCP]: Move code from tcp_ecn.h to tcp*.c and tcp.h & remove it")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 701234af94565f715e7017d1fd0958747ff9b969
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Sep 2 23:24:21 2019 +0800

    sctp: use transport pf_retrans in sctp_do_8_2_transport_strike
    
    [ Upstream commit 10eb56c582c557c629271f1ee31e15e7a9b2558b ]
    
    Transport should use its own pf_retrans to do the error_count
    check, instead of asoc's. Otherwise, it's meaningless to make
    pf_retrans per transport.
    
    Fixes: 5aa93bcf66f4 ("sctp: Implement quick failover draft from tsvwg")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e90daafad0dc80374bd204a404f030a5efa0b3ac
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Sep 11 18:02:39 2019 +0200

    sctp: Fix the link time qualifier of 'sctp_ctrlsock_exit()'
    
    [ Upstream commit b456d72412ca8797234449c25815e82f4e1426c0 ]
    
    The '.exit' functions from 'pernet_operations' structure should be marked
    as __net_exit, not __net_init.
    
    Fixes: 8e2d61e0aed2 ("sctp: fix race on protocol/netns initialization")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc243e2427cef2a5dd7367cb0e0b846503350ffe
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Sep 8 13:40:51 2019 -0700

    sch_hhf: ensure quantum and hhf_non_hh_weight are non-zero
    
    [ Upstream commit d4d6ec6dac07f263f06d847d6f732d6855522845 ]
    
    In case of TCA_HHF_NON_HH_WEIGHT or TCA_HHF_QUANTUM is zero,
    it would make no progress inside the loop in hhf_dequeue() thus
    kernel would get stuck.
    
    Fix this by checking this corner case in hhf_change().
    
    Fixes: 10239edf86f1 ("net-qdisc-hhf: Heavy-Hitter Filter (HHF) qdisc")
    Reported-by: syzbot+bc6297c11f19ee807dc2@syzkaller.appspotmail.com
    Reported-by: syzbot+041483004a7f45f1f20a@syzkaller.appspotmail.com
    Reported-by: syzbot+55be5f513bed37fc4367@syzkaller.appspotmail.com
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Terry Lam <vtlam@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37a791c19a92a416ef00c0b5e4ee4d31d7094989
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Thu Sep 5 19:46:18 2019 +0300

    net: phylink: Fix flow control resolution
    
    [ Upstream commit 63b2ed4e10b2e6c913e1d8cdd728e7fba4115a3d ]
    
    Regarding to IEEE 802.3-2015 standard section 2
    28B.3 Priority resolution - Table 28-3 - Pause resolution
    
    In case of Local device Pause=1 AsymDir=0, Link partner
    Pause=1 AsymDir=1, Local device resolution should be enable PAUSE
    transmit, disable PAUSE receive.
    And in case of Local device Pause=1 AsymDir=1, Link partner
    Pause=1 AsymDir=0, Local device resolution should be enable PAUSE
    receive, disable PAUSE transmit.
    
    Fixes: 9525ae83959b ("phylink: add phylink infrastructure")
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Reported-by: Shaul Ben-Mayor <shaulb@marvell.com>
    Acked-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55fb612bef7fd237fb70068e2b6ff1cd1543a8ef
Author: Shmulik Ladkani <shmulik@metanetworks.com>
Date:   Fri Sep 6 12:23:50 2019 +0300

    net: gso: Fix skb_segment splat when splitting gso_size mangled skb having linear-headed frag_list
    
    [ Upstream commit 3dcbdb134f329842a38f0e6797191b885ab00a00 ]
    
    Historically, support for frag_list packets entering skb_segment() was
    limited to frag_list members terminating on exact same gso_size
    boundaries. This is verified with a BUG_ON since commit 89319d3801d1
    ("net: Add frag_list support to skb_segment"), quote:
    
        As such we require all frag_list members terminate on exact MSS
        boundaries.  This is checked using BUG_ON.
        As there should only be one producer in the kernel of such packets,
        namely GRO, this requirement should not be difficult to maintain.
    
    However, since commit 6578171a7ff0 ("bpf: add bpf_skb_change_proto helper"),
    the "exact MSS boundaries" assumption no longer holds:
    An eBPF program using bpf_skb_change_proto() DOES modify 'gso_size', but
    leaves the frag_list members as originally merged by GRO with the
    original 'gso_size'. Example of such programs are bpf-based NAT46 or
    NAT64.
    
    This lead to a kernel BUG_ON for flows involving:
     - GRO generating a frag_list skb
     - bpf program performing bpf_skb_change_proto() or bpf_skb_adjust_room()
     - skb_segment() of the skb
    
    See example BUG_ON reports in [0].
    
    In commit 13acc94eff12 ("net: permit skb_segment on head_frag frag_list skb"),
    skb_segment() was modified to support the "gso_size mangling" case of
    a frag_list GRO'ed skb, but *only* for frag_list members having
    head_frag==true (having a page-fragment head).
    
    Alas, GRO packets having frag_list members with a linear kmalloced head
    (head_frag==false) still hit the BUG_ON.
    
    This commit adds support to skb_segment() for a 'head_skb' packet having
    a frag_list whose members are *non* head_frag, with gso_size mangled, by
    disabling SG and thus falling-back to copying the data from the given
    'head_skb' into the generated segmented skbs - as suggested by Willem de
    Bruijn [1].
    
    Since this approach involves the penalty of skb_copy_and_csum_bits()
    when building the segments, care was taken in order to enable this
    solution only when required:
     - untrusted gso_size, by testing SKB_GSO_DODGY is set
       (SKB_GSO_DODGY is set by any gso_size mangling functions in
        net/core/filter.c)
     - the frag_list is non empty, its item is a non head_frag, *and* the
       headlen of the given 'head_skb' does not match the gso_size.
    
    [0]
    https://lore.kernel.org/netdev/20190826170724.25ff616f@pixies/
    https://lore.kernel.org/netdev/9265b93f-253d-6b8c-f2b8-4b54eff1835c@fb.com/
    
    [1]
    https://lore.kernel.org/netdev/CA+FuTSfVsgNDi7c=GUU8nMg2hWxF2SjCNLXetHeVPdnxAW5K-w@mail.gmail.com/
    
    Fixes: 6578171a7ff0 ("bpf: add bpf_skb_change_proto helper")
    Suggested-by: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 219471beb6be6474fc9ef60ed8680886aaa51c75
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Tue Sep 10 14:02:57 2019 -0600

    net: Fix null de-reference of device refcount
    
    [ Upstream commit 10cc514f451a0f239aa34f91bc9dc954a9397840 ]
    
    In event of failure during register_netdevice, free_netdev is
    invoked immediately. free_netdev assumes that all the netdevice
    refcounts have been dropped prior to it being called and as a
    result frees and clears out the refcount pointer.
    
    However, this is not necessarily true as some of the operations
    in the NETDEV_UNREGISTER notifier handlers queue RCU callbacks for
    invocation after a grace period. The IPv4 callback in_dev_rcu_put
    tries to access the refcount after free_netdev is called which
    leads to a null de-reference-
    
    44837.761523:   <6> Unable to handle kernel paging request at
                        virtual address 0000004a88287000
    44837.761651:   <2> pc : in_dev_finish_destroy+0x4c/0xc8
    44837.761654:   <2> lr : in_dev_finish_destroy+0x2c/0xc8
    44837.762393:   <2> Call trace:
    44837.762398:   <2>  in_dev_finish_destroy+0x4c/0xc8
    44837.762404:   <2>  in_dev_rcu_put+0x24/0x30
    44837.762412:   <2>  rcu_nocb_kthread+0x43c/0x468
    44837.762418:   <2>  kthread+0x118/0x128
    44837.762424:   <2>  ret_from_fork+0x10/0x1c
    
    Fix this by waiting for the completion of the call_rcu() in
    case of register_netdevice errors.
    
    Fixes: 93ee31f14f6f ("[NET]: Fix free_netdev on register_netdev failure.")
    Cc: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b710b0ec2b3c0957e7ab434b33153f47fbae60e
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Sep 5 19:36:37 2019 -0700

    isdn/capi: check message length in capi_write()
    
    [ Upstream commit fe163e534e5eecdfd7b5920b0dfd24c458ee85d6 ]
    
    syzbot reported:
    
        BUG: KMSAN: uninit-value in capi_write+0x791/0xa90 drivers/isdn/capi/capi.c:700
        CPU: 0 PID: 10025 Comm: syz-executor379 Not tainted 4.20.0-rc7+ #2
        Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
        Call Trace:
          __dump_stack lib/dump_stack.c:77 [inline]
          dump_stack+0x173/0x1d0 lib/dump_stack.c:113
          kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
          __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
          capi_write+0x791/0xa90 drivers/isdn/capi/capi.c:700
          do_loop_readv_writev fs/read_write.c:703 [inline]
          do_iter_write+0x83e/0xd80 fs/read_write.c:961
          vfs_writev fs/read_write.c:1004 [inline]
          do_writev+0x397/0x840 fs/read_write.c:1039
          __do_sys_writev fs/read_write.c:1112 [inline]
          __se_sys_writev+0x9b/0xb0 fs/read_write.c:1109
          __x64_sys_writev+0x4a/0x70 fs/read_write.c:1109
          do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
          entry_SYSCALL_64_after_hwframe+0x63/0xe7
        [...]
    
    The problem is that capi_write() is reading past the end of the message.
    Fix it by checking the message's length in the needed places.
    
    Reported-and-tested-by: syzbot+0849c524d9c634f5ae66@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0826d3daa672048da6180b466b1f4e35b92efb0c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Sep 10 13:29:59 2019 +0200

    ipv6: Fix the link time qualifier of 'ping_v6_proc_exit_net()'
    
    [ Upstream commit d23dbc479a8e813db4161a695d67da0e36557846 ]
    
    The '.exit' functions from 'pernet_operations' structure should be marked
    as __net_exit, not __net_init.
    
    Fixes: d862e5461423 ("net: ipv6: Implement /proc/net/icmp6.")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31c82003609e0ee459cf0499c7366e33c6eb6501
Author: Bjørn Mork <bjorn@mork.no>
Date:   Thu Sep 12 10:42:00 2019 +0200

    cdc_ether: fix rndis support for Mediatek based smartphones
    
    [ Upstream commit 4d7ffcf3bf1be98d876c570cab8fc31d9fa92725 ]
    
    A Mediatek based smartphone owner reports problems with USB
    tethering in Linux.  The verbose USB listing shows a rndis_host
    interface pair (e0/01/03 + 10/00/00), but the driver fails to
    bind with
    
    [  355.960428] usb 1-4: bad CDC descriptors
    
    The problem is a failsafe test intended to filter out ACM serial
    functions using the same 02/02/ff class/subclass/protocol as RNDIS.
    The serial functions are recognized by their non-zero bmCapabilities.
    
    No RNDIS function with non-zero bmCapabilities were known at the time
    this failsafe was added. But it turns out that some Wireless class
    RNDIS functions are using the bmCapabilities field. These functions
    are uniquely identified as RNDIS by their class/subclass/protocol, so
    the failing test can safely be disabled.  The same applies to the two
    types of Misc class RNDIS functions.
    
    Applying the failsafe to Communication class functions only retains
    the original functionality, and fixes the problem for the Mediatek based
    smartphone.
    
    Tow examples of CDC functional descriptors with non-zero bmCapabilities
    from Wireless class RNDIS functions are:
    
    0e8d:000a  Mediatek Crosscall Spider X5 3G Phone
    
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x0f
              connection notifications
              sends break
              line coding and serial state
              get/set/clear comm features
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          1
    
    and
    
    19d2:1023  ZTE K4201-z
    
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          1
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
    
    The Mediatek example is believed to apply to most smartphones with
    Mediatek firmware.  The ZTE example is most likely also part of a larger
    family of devices/firmwares.
    
    Suggested-by: Lars Melin <larsm17@gmail.com>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0344ead5d24e7fc434f8fe5626eef184e95dfadd
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Fri Sep 6 11:47:02 2019 +0200

    bridge/mdb: remove wrong use of NLM_F_MULTI
    
    [ Upstream commit 94a72b3f024fc7e9ab640897a1e38583a470659d ]
    
    NLM_F_MULTI must be used only when a NLMSG_DONE message is sent at the end.
    In fact, NLMSG_DONE is sent only at the end of a dump.
    
    Libraries like libnl will wait forever for NLMSG_DONE.
    
    Fixes: 949f1e39a617 ("bridge: mdb: notify on router port add and del")
    CC: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
