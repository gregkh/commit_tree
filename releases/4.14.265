commit 21ad423fe5210f5aa50bd43f9ae99b655090a227
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Feb 8 18:16:30 2022 +0100

    Linux 4.14.265
    
    Link: https://lore.kernel.org/r/20220207103755.604121441@linuxfoundation.org
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Slade Watkins <slade@sladewatkins.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19cfb877245a4b882cd71e1c56c0b7a527a06384
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Mon Jan 17 17:41:47 2022 +0530

    ext4: fix error handling in ext4_restore_inline_data()
    
    commit 897026aaa73eb2517dfea8d147f20ddb0b813044 upstream.
    
    While running "./check -I 200 generic/475" it sometimes gives below
    kernel BUG(). Ideally we should not call ext4_write_inline_data() if
    ext4_create_inline_data() has failed.
    
    <log snip>
    [73131.453234] kernel BUG at fs/ext4/inline.c:223!
    
    <code snip>
     212 static void ext4_write_inline_data(struct inode *inode, struct ext4_iloc *iloc,
     213                                    void *buffer, loff_t pos, unsigned int len)
     214 {
    <...>
     223         BUG_ON(!EXT4_I(inode)->i_inline_off);
     224         BUG_ON(pos + len > EXT4_I(inode)->i_inline_size);
    
    This patch handles the error and prints out a emergency msg saying potential
    data loss for the given inode (since we couldn't restore the original
    inline_data due to some previous error).
    
    [ 9571.070313] EXT4-fs (dm-0): error restoring inline_data for inode -- potential data loss! (inode 1703982, error -30)
    
    Reported-by: Eric Whitney <enwlinux@gmail.com>
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/9f4cd7dfd54fa58ff27270881823d94ddf78dd07.1642416995.git.riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89b53c8fa11ebc5499aa386cb4e586d804299bd4
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Jan 24 21:55:03 2022 +0300

    EDAC/xgene: Fix deferred probing
    
    commit dfd0dfb9a7cc04acf93435b440dd34c2ca7b4424 upstream.
    
    The driver overrides error codes returned by platform_get_irq_optional()
    to -EINVAL for some strange reason, so if it returns -EPROBE_DEFER, the
    driver will fail the probe permanently instead of the deferred probing.
    Switch to propagating the proper error codes to platform driver code
    upwards.
    
      [ bp: Massage commit message. ]
    
    Fixes: 0d4429301c4a ("EDAC: Add APM X-Gene SoC EDAC driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220124185503.6720-3-s.shtylyov@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 924e4e505250ffbd17a4ca83d618a2f82dd4b58b
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Jan 24 21:55:02 2022 +0300

    EDAC/altera: Fix deferred probing
    
    commit 279eb8575fdaa92c314a54c0d583c65e26229107 upstream.
    
    The driver overrides the error codes returned by platform_get_irq() to
    -ENODEV for some strange reason, so if it returns -EPROBE_DEFER, the
    driver will fail the probe permanently instead of the deferred probing.
    Switch to propagating the proper error codes to platform driver code
    upwards.
    
      [ bp: Massage commit message. ]
    
    Fixes: 71bcada88b0f ("edac: altera: Add Altera SDRAM EDAC support")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220124185503.6720-2-s.shtylyov@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90f283f9338b80ca283abb4c5015252ae2e1f428
Author: Riwen Lu <luriwen@kylinos.cn>
Date:   Thu Jan 6 16:46:09 2022 +0800

    rtc: cmos: Evaluate century appropriate
    
    commit ff164ae39b82ee483b24579c8e22a13a8ce5bd04 upstream.
    
    There's limiting the year to 2069. When setting the rtc year to 2070,
    reading it returns 1970. Evaluate century starting from 19 to count the
    correct year.
    
    $ sudo date -s 20700106
    Mon 06 Jan 2070 12:00:00 AM CST
    $ sudo hwclock -w
    $ sudo hwclock -r
    1970-01-06 12:00:49.604968+08:00
    
    Fixes: 2a4daadd4d3e5071 ("rtc: cmos: ignore bogus century byte")
    
    Signed-off-by: Riwen Lu <luriwen@kylinos.cn>
    Acked-by: Eric Wong <e@80x24.org>
    Reviewed-by: Mateusz Jończyk <mat.jonczyk@o2.pl>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20220106084609.1223688-1-luriwen@kylinos.cn
    Signed-off-by: Mateusz Jończyk <mat.jonczyk@o2.pl> # preparation for stable
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bc71d9f210f6f8eb84e1698f9e79dfddd4ea086
Author: Muhammad Usama Anjum <usama.anjum@collabora.com>
Date:   Thu Jan 27 22:44:46 2022 +0500

    selftests: futex: Use variable MAKE instead of make
    
    commit b9199181a9ef8252e47e207be8c23e1f50662620 upstream.
    
    Recursive make commands should always use the variable MAKE, not the
    explicit command name ‘make’. This has benefits and removes the
    following warning when multiple jobs are used for the build:
    
    make[2]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
    
    Fixes: a8ba798bc8ec ("selftests: enable O and KBUILD_OUTPUT")
    Signed-off-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Reviewed-by: André Almeida <andrealmeid@collabora.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78778ffb7c70b02a4f4e4283dd8a95581fcd85ff
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Wed Jan 26 13:13:38 2022 -0800

    nfsd: nfsd4_setclientid_confirm mistakenly expires confirmed client.
    
    commit ab451ea952fe9d7afefae55ddb28943a148247fe upstream.
    
    From RFC 7530 Section 16.34.5:
    
    o  The server has not recorded an unconfirmed { v, x, c, *, * } and
       has recorded a confirmed { v, x, c, *, s }.  If the principals of
       the record and of SETCLIENTID_CONFIRM do not match, the server
       returns NFS4ERR_CLID_INUSE without removing any relevant leased
       client state, and without changing recorded callback and
       callback_ident values for client { x }.
    
    The current code intends to do what the spec describes above but
    it forgot to set 'old' to NULL resulting to the confirmed client
    to be expired.
    
    Fixes: 2b63482185e6 ("nfsd: fix clid_inuse on mount with security change")
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Reviewed-by: Bruce Fields <bfields@fieldses.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 471085571f926a1fe6b1bed095638994dbf23990
Author: John Meneghini <jmeneghi@redhat.com>
Date:   Mon Jan 24 09:51:10 2022 -0500

    scsi: bnx2fc: Make bnx2fc_recv_frame() mp safe
    
    commit 936bd03405fc83ba039d42bc93ffd4b88418f1d3 upstream.
    
    Running tests with a debug kernel shows that bnx2fc_recv_frame() is
    modifying the per_cpu lport stats counters in a non-mpsafe way.  Just boot
    a debug kernel and run the bnx2fc driver with the hardware enabled.
    
    [ 1391.699147] BUG: using smp_processor_id() in preemptible [00000000] code: bnx2fc_
    [ 1391.699160] caller is bnx2fc_recv_frame+0xbf9/0x1760 [bnx2fc]
    [ 1391.699174] CPU: 2 PID: 4355 Comm: bnx2fc_l2_threa Kdump: loaded Tainted: G    B
    [ 1391.699180] Hardware name: HP ProLiant DL120 G7, BIOS J01 07/01/2013
    [ 1391.699183] Call Trace:
    [ 1391.699188]  dump_stack_lvl+0x57/0x7d
    [ 1391.699198]  check_preemption_disabled+0xc8/0xd0
    [ 1391.699205]  bnx2fc_recv_frame+0xbf9/0x1760 [bnx2fc]
    [ 1391.699215]  ? do_raw_spin_trylock+0xb5/0x180
    [ 1391.699221]  ? bnx2fc_npiv_create_vports.isra.0+0x4e0/0x4e0 [bnx2fc]
    [ 1391.699229]  ? bnx2fc_l2_rcv_thread+0xb7/0x3a0 [bnx2fc]
    [ 1391.699240]  bnx2fc_l2_rcv_thread+0x1af/0x3a0 [bnx2fc]
    [ 1391.699250]  ? bnx2fc_ulp_init+0xc0/0xc0 [bnx2fc]
    [ 1391.699258]  kthread+0x364/0x420
    [ 1391.699263]  ? _raw_spin_unlock_irq+0x24/0x50
    [ 1391.699268]  ? set_kthread_struct+0x100/0x100
    [ 1391.699273]  ret_from_fork+0x22/0x30
    
    Restore the old get_cpu/put_cpu code with some modifications to reduce the
    size of the critical section.
    
    Link: https://lore.kernel.org/r/20220124145110.442335-1-jmeneghi@redhat.com
    Fixes: d576a5e80cd0 ("bnx2fc: Improve stats update mechanism")
    Tested-by: Guangwu Zhang <guazhang@redhat.com>
    Acked-by: Saurav Kashyap <skashyap@marvell.com>
    Signed-off-by: John Meneghini <jmeneghi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 656d093c43c83d39b77ec35228d838aa14a2f45f
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jan 27 13:13:34 2022 +0000

    ASoC: fsl: Add missing error handling in pcm030_fabric_probe
    
    commit fb25621da5702c104ce0a48de5b174ced09e5b4e upstream.
    
    Add the missing platform_device_put() and platform_device_del()
    before return from pcm030_fabric_probe in the error handling case.
    
    Fixes: c912fa913446 ("ASoC: fsl: register the wm9712-codec")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220127131336.30214-1-linmq006@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f557350a12a287ced1ba6531a2c1f75569b669
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 24 15:24:09 2022 +0300

    drm/i915/overlay: Prevent divide by zero bugs in scaling
    
    commit 90a3d22ff02b196d5884e111f39271a1d4ee8e3e upstream.
    
    Smatch detected a divide by zero bug in check_overlay_scaling().
    
        drivers/gpu/drm/i915/display/intel_overlay.c:976 check_overlay_scaling()
        error: potential divide by zero bug '/ rec->dst_height'.
        drivers/gpu/drm/i915/display/intel_overlay.c:980 check_overlay_scaling()
        error: potential divide by zero bug '/ rec->dst_width'.
    
    Prevent this by ensuring that the dst height and width are non-zero.
    
    Fixes: 02e792fbaadb ("drm/i915: implement drmmode overlay support v4")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220124122409.GA31673@kili
    (cherry picked from commit cf5b64f7f10b28bebb9b7c9d25e7aee5cbe43918)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20d8cc43d14db8472af5f6d75f23db56f8c52bd8
Author: Lior Nahmanson <liorna@nvidia.com>
Date:   Sun Jan 30 13:37:52 2022 +0200

    net: macsec: Verify that send_sci is on when setting Tx sci explicitly
    
    commit d0cfa548dbde354de986911d3913897b5448faad upstream.
    
    When setting Tx sci explicit, the Rx side is expected to use this
    sci and not recalculate it from the packet.However, in case of Tx sci
    is explicit and send_sci is off, the receiver is wrongly recalculate
    the sci from the source MAC address which most likely be different
    than the explicit sci.
    
    Fix by preventing such configuration when macsec newlink is established
    and return EINVAL error code on such cases.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Lior Nahmanson <liorna@nvidia.com>
    Reviewed-by: Raed Salem <raeds@nvidia.com>
    Signed-off-by: Raed Salem <raeds@nvidia.com>
    Link: https://lore.kernel.org/r/1643542672-29403-1-git-send-email-raeds@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3333342393f80fcde4df0c7c5a19065191138bd
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:25 2022 +0100

    net: ieee802154: Return meaningful error codes from the netlink helpers
    
    commit 79c37ca73a6e9a33f7b2b7783ba6af07a448c8a9 upstream.
    
    Returning -1 does not indicate anything useful.
    
    Use a standard and meaningful error code instead.
    
    Fixes: a26c5fd7622d ("nl802154: add support for security layer")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-6-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1c277b0ed2a13e7de923b5f03bc23586eceb851
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:24 2022 +0100

    net: ieee802154: ca8210: Stop leaking skb's
    
    commit 621b24b09eb61c63f262da0c9c5f0e93348897e5 upstream.
    
    Upon error the ieee802154_xmit_complete() helper is not called. Only
    ieee802154_wake_queue() is called manually. We then leak the skb
    structure.
    
    Free the skb structure upon error before returning.
    
    Fixes: ded845a781a5 ("ieee802154: Add CA8210 IEEE 802.15.4 device driver")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-5-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a44ae6b73994bfc5e378497aaa0431d55cefc958
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Jan 26 11:04:47 2022 +0000

    spi: meson-spicc: add IRQ check in meson_spicc_probe
    
    commit e937440f7fc444a3e3f1fb75ea65292d6f433a44 upstream.
    
    This check misses checking for  platform_get_irq()'s call and may passes
    the negative error codes to devm_request_irq(), which takes unsigned IRQ #,
    causing it to fail with -EINVAL, overriding an original error code.
    Stop calling devm_request_irq() with invalid IRQ #s.
    
    Fixes: 454fa271bc4e ("spi: Add Meson SPICC driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220126110447.24549-1-linmq006@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f7212e078ef0254e4c14ca485a29e0adf2daa44
Author: Benjamin Gaignard <benjamin.gaignard@collabora.com>
Date:   Mon Jan 31 15:17:08 2022 +0100

    spi: mediatek: Avoid NULL pointer crash in interrupt
    
    commit f83a96e5f033fbbd21764705cb9c04234b96218e upstream.
    
    In some case, like after a transfer timeout, master->cur_msg pointer
    is NULL which led to a kernel crash when trying to use master->cur_msg->spi.
    mtk_spi_can_dma(), pointed by master->can_dma, doesn't use this parameter
    avoid the problem by setting NULL as second parameter.
    
    Fixes: a568231f46322 ("spi: mediatek: Add spi bus for Mediatek MT8173")
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@collabora.com>
    Link: https://lore.kernel.org/r/20220131141708.888710-1-benjamin.gaignard@collabora.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c944c224e2997963c79b2ccd5f84f492a4b3ecf3
Author: Kamal Dasu <kdasu.kdev@gmail.com>
Date:   Thu Jan 27 13:53:59 2022 -0500

    spi: bcm-qspi: check for valid cs before applying chip select
    
    commit 2cbd27267ffe020af1442b95ec57f59a157ba85c upstream.
    
    Apply only valid chip select value. This change fixes case where chip
    select is set to initial value of '-1' during probe and  PM supend and
    subsequent resume can try to use the value with undefined behaviour.
    Also in case where gpio based chip select, the check in
    bcm_qspi_chip_select() shall prevent undefined behaviour on resume.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Kamal Dasu <kdasu.kdev@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220127185359.27322-1-kdasu.kdev@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88feee79a418470b6d5837bc932af141e69ea277
Author: Joerg Roedel <jroedel@suse.de>
Date:   Fri Feb 4 12:55:37 2022 +0100

    iommu/amd: Fix loop timeout issue in iommu_ga_log_enable()
    
    commit 9b45a7738eec52bf0f5d8d3d54e822962781c5f2 upstream.
    
    The polling loop for the register change in iommu_ga_log_enable() needs
    to have a udelay() in it.  Otherwise the CPU might be faster than the
    IOMMU hardware and wrongly trigger the WARN_ON() further down the code
    stream. Use a 10us for udelay(), has there is some hardware where
    activation of the GA log can take more than a 100ms.
    
    A future optimization should move the activation check of the GA log
    to the point where it gets used for the first time. But that is a
    bigger change and not suitable for a fix.
    
    Fixes: 8bda0cfbdc1a ("iommu/amd: Detect and initialize guest vAPIC log")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/r/20220204115537.3894-1-joro@8bytes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0c685ba99961b1dd894b2e470e692a539770f6d
Author: Guoqing Jiang <guoqing.jiang@linux.dev>
Date:   Fri Jan 28 11:10:02 2022 +0800

    iommu/vt-d: Fix potential memory leak in intel_setup_irq_remapping()
    
    commit 99e675d473eb8cf2deac1376a0f840222fc1adcf upstream.
    
    After commit e3beca48a45b ("irqdomain/treewide: Keep firmware node
    unconditionally allocated"). For tear down scenario, fn is only freed
    after fail to allocate ir_domain, though it also should be freed in case
    dmar_enable_qi returns error.
    
    Besides free fn, irq_domain and ir_msi_domain need to be removed as well
    if intel_setup_irq_remapping fails to enable queued invalidation.
    
    Improve the rewinding path by add out_free_ir_domain and out_free_fwnode
    lables per Baolu's suggestion.
    
    Fixes: e3beca48a45b ("irqdomain/treewide: Keep firmware node unconditionally allocated")
    Suggested-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Guoqing Jiang <guoqing.jiang@linux.dev>
    Link: https://lore.kernel.org/r/20220119063640.16864-1-guoqing.jiang@linux.dev
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20220128031002.2219155-3-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf7eb532dd6acbbbe1da5570fab659cc96d64148
Author: Leon Romanovsky <leon@kernel.org>
Date:   Mon Jan 31 11:45:26 2022 +0200

    RDMA/mlx4: Don't continue event handler after memory allocation failure
    
    commit f3136c4ce7acf64bee43135971ca52a880572e32 upstream.
    
    The failure to allocate memory during MLX4_DEV_EVENT_PORT_MGMT_CHANGE
    event handler will cause skip the assignment logic, but
    ib_dispatch_event() will be called anyway.
    
    Fix it by calling to return instead of break after memory allocation
    failure.
    
    Fixes: 00f5ce99dc6e ("mlx4: Use port management change event instead of smp_snoop")
    Link: https://lore.kernel.org/r/12a0e83f18cfad4b5f62654f141e240d04915e10.1643622264.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Håkon Bugge <haakon.bugge@oracle.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c237216a64908a086a8f4b2a8016d7291dc26bad
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Thu Feb 3 22:42:09 2022 -0500

    block: bio-integrity: Advance seed correctly for larger interval sizes
    
    commit b13e0c71856817fca67159b11abac350e41289f5 upstream.
    
    Commit 309a62fa3a9e ("bio-integrity: bio_integrity_advance must update
    integrity seed") added code to update the integrity seed value when
    advancing a bio. However, it failed to take into account that the
    integrity interval might be larger than the 512-byte block layer
    sector size. This broke bio splitting on PI devices with 4KB logical
    blocks.
    
    The seed value should be advanced by bio_integrity_intervals() and not
    the number of sectors.
    
    Cc: Dmitry Monakhov <dmonakhov@openvz.org>
    Cc: stable@vger.kernel.org
    Fixes: 309a62fa3a9e ("bio-integrity: bio_integrity_advance must update integrity seed")
    Tested-by: Dmitry Ivanov <dmitry.ivanov2@hpe.com>
    Reported-by: Alexey Lyashkov <alexey.lyashkov@hpe.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Link: https://lore.kernel.org/r/20220204034209.4193-1-martin.petersen@oracle.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 909d3ec1bf9f0ec534bfc081b77c0836fea7b0e2
Author: Nick Lopez <github@glowingmonkey.org>
Date:   Sat Jan 22 01:19:06 2022 -0700

    drm/nouveau: fix off by one in BIOS boundary checking
    
    commit 1b777d4d9e383d2744fc9b3a09af6ec1893c8b1a upstream.
    
    Bounds checking when parsing init scripts embedded in the BIOS reject
    access to the last byte. This causes driver initialization to fail on
    Apple eMac's with GeForce 2 MX GPUs, leaving the system with no working
    console.
    
    This is probably only seen on OpenFirmware machines like PowerPC Macs
    because the BIOS image provided by OF is only the used parts of the ROM,
    not a power-of-two blocks read from PCI directly so PCs always have
    empty bytes at the end that are never accessed.
    
    Signed-off-by: Nick Lopez <github@glowingmonkey.org>
    Fixes: 4d4e9907ff572 ("drm/nouveau/bios: guard against out-of-bounds accesses to image")
    Cc: <stable@vger.kernel.org> # v4.10+
    Reviewed-by: Ilia Mirkin <imirkin@alum.mit.edu>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220122081906.2633061-1-github@glowingmonkey.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54abca038e287d3746dd40016514670a7f654c5c
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 24 15:32:53 2022 +0000

    ASoC: ops: Reject out of bounds values in snd_soc_put_xr_sx()
    
    commit 4cf28e9ae6e2e11a044be1bcbcfa1b0d8675fe4d upstream.
    
    We don't currently validate that the values being set are within the range
    we advertised to userspace as being valid, do so and reject any values
    that are out of range.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220124153253.3548853-4-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4977491e4b3aad8567f57e2a9992d251410c1db3
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 24 15:32:52 2022 +0000

    ASoC: ops: Reject out of bounds values in snd_soc_put_volsw_sx()
    
    commit 4f1e50d6a9cf9c1b8c859d449b5031cacfa8404e upstream.
    
    We don't currently validate that the values being set are within the range
    we advertised to userspace as being valid, do so and reject any values
    that are out of range.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220124153253.3548853-3-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 586ef863c94354a7e00e5ae5ef01443d1dc99bc7
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 24 15:32:51 2022 +0000

    ASoC: ops: Reject out of bounds values in snd_soc_put_volsw()
    
    commit 817f7c9335ec01e0f5e8caffc4f1dcd5e458a4c0 upstream.
    
    We don't currently validate that the values being set are within the range
    we advertised to userspace as being valid, do so and reject any values
    that are out of range.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220124153253.3548853-2-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ddff8f376629f4d642ea17e733bbf8cc7e24b11
Author: Paul Moore <paul@paul-moore.com>
Date:   Thu Jan 13 18:54:38 2022 -0500

    audit: improve audit queue handling when "audit=1" on cmdline
    
    commit f26d04331360d42dbd6b58448bd98e4edbfbe1c5 upstream.
    
    When an admin enables audit at early boot via the "audit=1" kernel
    command line the audit queue behavior is slightly different; the
    audit subsystem goes to greater lengths to avoid dropping records,
    which unfortunately can result in problems when the audit daemon is
    forcibly stopped for an extended period of time.
    
    This patch makes a number of changes designed to improve the audit
    queuing behavior so that leaving the audit daemon in a stopped state
    for an extended period does not cause a significant impact to the
    system.
    
    - kauditd_send_queue() is now limited to looping through the
      passed queue only once per call.  This not only prevents the
      function from looping indefinitely when records are returned
      to the current queue, it also allows any recovery handling in
      kauditd_thread() to take place when kauditd_send_queue()
      returns.
    
    - Transient netlink send errors seen as -EAGAIN now cause the
      record to be returned to the retry queue instead of going to
      the hold queue.  The intention of the hold queue is to store,
      perhaps for an extended period of time, the events which led
      up to the audit daemon going offline.  The retry queue remains
      a temporary queue intended to protect against transient issues
      between the kernel and the audit daemon.
    
    - The retry queue is now limited by the audit_backlog_limit
      setting, the same as the other queues.  This allows admins
      to bound the size of all of the audit queues on the system.
    
    - kauditd_rehold_skb() now returns records to the end of the
      hold queue to ensure ordering is preserved in the face of
      recent changes to kauditd_send_queue().
    
    Cc: stable@vger.kernel.org
    Fixes: 5b52330bbfe63 ("audit: fix auditd/kernel connection state tracking")
    Fixes: f4b3ee3c85551 ("audit: improve robustness of the audit queue handling")
    Reported-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Tested-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 899e0319b3f58d85ac9a2f1d2895a71a275e2f4e
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 31 18:23:58 2022 -0800

    af_packet: fix data-race in packet_setsockopt / packet_setsockopt
    
    commit e42e70ad6ae2ae511a6143d2e8da929366e58bd9 upstream.
    
    When packet_setsockopt( PACKET_FANOUT_DATA ) reads po->fanout,
    no lock is held, meaning that another thread can change po->fanout.
    
    Given that po->fanout can only be set once during the socket lifetime
    (it is only cleared from fanout_release()), we can use
    READ_ONCE()/WRITE_ONCE() to document the race.
    
    BUG: KCSAN: data-race in packet_setsockopt / packet_setsockopt
    
    write to 0xffff88813ae8e300 of 8 bytes by task 14653 on cpu 0:
     fanout_add net/packet/af_packet.c:1791 [inline]
     packet_setsockopt+0x22fe/0x24a0 net/packet/af_packet.c:3931
     __sys_setsockopt+0x209/0x2a0 net/socket.c:2180
     __do_sys_setsockopt net/socket.c:2191 [inline]
     __se_sys_setsockopt net/socket.c:2188 [inline]
     __x64_sys_setsockopt+0x62/0x70 net/socket.c:2188
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    read to 0xffff88813ae8e300 of 8 bytes by task 14654 on cpu 1:
     packet_setsockopt+0x691/0x24a0 net/packet/af_packet.c:3935
     __sys_setsockopt+0x209/0x2a0 net/socket.c:2180
     __do_sys_setsockopt net/socket.c:2191 [inline]
     __se_sys_setsockopt net/socket.c:2188 [inline]
     __x64_sys_setsockopt+0x62/0x70 net/socket.c:2188
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x0000000000000000 -> 0xffff888106f8c000
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 14654 Comm: syz-executor.3 Not tainted 5.16.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 47dceb8ecdc1 ("packet: add classic BPF fanout mode")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20220201022358.330621-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d9211678c0f0624f74cdff36117ab8316697bb8
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 31 17:21:06 2022 -0800

    rtnetlink: make sure to refresh master_dev/m_ops in __rtnl_newlink()
    
    commit c6f6f2444bdbe0079e41914a35081530d0409963 upstream.
    
    While looking at one unrelated syzbot bug, I found the replay logic
    in __rtnl_newlink() to potentially trigger use-after-free.
    
    It is better to clear master_dev and m_ops inside the loop,
    in case we have to replay it.
    
    Fixes: ba7d49b1f0f8 ("rtnetlink: provide api for getting and setting slave info")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jiri Pirko <jiri@nvidia.com>
    Link: https://lore.kernel.org/r/20220201012106.216495-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 617f9934bb37993b9813832516f318ba874bcb7d
Author: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>
Date:   Thu Jan 27 14:50:03 2022 +0530

    net: amd-xgbe: Fix skb data length underflow
    
    commit 5aac9108a180fc06e28d4e7fb00247ce603b72ee upstream.
    
    There will be BUG_ON() triggered in include/linux/skbuff.h leading to
    intermittent kernel panic, when the skb length underflow is detected.
    
    Fix this by dropping the packet if such length underflows are seen
    because of inconsistencies in the hardware descriptors.
    
    Fixes: 622c36f143fc ("amd-xgbe: Fix jumbo MTU processing on newer hardware")
    Suggested-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Link: https://lore.kernel.org/r/20220127092003.2812745-1-Shyam-sundar.S-k@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c517b169c2185b84deee8fba0b49962affaaa04e
Author: Raju Rangoju <Raju.Rangoju@amd.com>
Date:   Thu Jan 27 11:32:22 2022 +0530

    net: amd-xgbe: ensure to reset the tx_timer_active flag
    
    commit 7674b7b559b683478c3832527c59bceb169e701d upstream.
    
    Ensure to reset the tx_timer_active flag in xgbe_stop(),
    otherwise a port restart may result in tx timeout due to
    uncleared flag.
    
    Fixes: c635eaacbf77 ("amd-xgbe: Remove Tx coalescing")
    Co-developed-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
    Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
    Signed-off-by: Raju Rangoju <Raju.Rangoju@amd.com>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Link: https://lore.kernel.org/r/20220127060222.453371-1-Raju.Rangoju@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56ecacbd73769b3142ed83bf9c1a2ebb7a761eb0
Author: Georgi Valkov <gvalkov@abv.bg>
Date:   Tue Feb 1 08:16:18 2022 +0100

    ipheth: fix EOVERFLOW in ipheth_rcvbulk_callback
    
    commit 63e4b45c82ed1bde979da7052229a4229ce9cabf upstream.
    
    When rx_buf is allocated we need to account for IPHETH_IP_ALIGN,
    which reduces the usable size by 2 bytes. Otherwise we have 1512
    bytes usable instead of 1514, and if we receive more than 1512
    bytes, ipheth_rcvbulk_callback is called with status -EOVERFLOW,
    after which the driver malfunctiones and all communication stops.
    
    Resolves ipheth 2-1:4.2: ipheth_rcvbulk_callback: urb status: -75
    
    Fixes: f33d9e2b48a3 ("usbnet: ipheth: fix connectivity with iOS 14")
    Signed-off-by: Georgi Valkov <gvalkov@abv.bg>
    Tested-by: Jan Kiszka <jan.kiszka@siemens.com>
    Link: https://lore.kernel.org/all/B60B8A4B-92A0-49B3-805D-809A2433B46C@abv.bg/
    Link: https://lore.kernel.org/all/24851bd2769434a5fc24730dce8e8a984c5a4505.1643699778.git.jan.kiszka@siemens.com/
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fc2e2f5d1f5aa18a88a58250bec436013044040
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Feb 3 13:41:55 2022 +0100

    netfilter: nat: limit port clash resolution attempts
    
    commit a504b703bb1da526a01593da0e4be2af9d9f5fa8 upstream.
    
    In case almost or all available ports are taken, clash resolution can
    take a very long time, resulting in soft lockup.
    
    This can happen when many to-be-natted hosts connect to same
    destination:port (e.g. a proxy) and all connections pass the same SNAT.
    
    Pick a random offset in the acceptable range, then try ever smaller
    number of adjacent port numbers, until either the limit is reached or a
    useable port was found.  This results in at most 248 attempts
    (128 + 64 + 32 + 16 + 8, i.e. 4 restarts with new search offset)
    instead of 64000+,
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Vimal Agrawal <vimal.agrawal@sophos.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64212979d93de3993cbbaf2833309088f618c430
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Feb 3 13:41:54 2022 +0100

    netfilter: nat: remove l4 protocol port rovers
    
    commit 6ed5943f8735e2b778d92ea4d9805c0a1d89bc2b upstream.
    
    This is a leftover from days where single-cpu systems were common:
    Store last port used to resolve a clash to use it as a starting point when
    the next conflict needs to be resolved.
    
    When we have parallel attempt to connect to same address:port pair,
    its likely that both cores end up computing the same "available" port,
    as both use same starting port, and newly used ports won't become
    visible to other cores until the conntrack gets confirmed later.
    
    One of the cores then has to drop the packet at insertion time because
    the chosen new tuple turns out to be in use after all.
    
    Lets simplify this: remove port rover and use a pseudo-random starting
    point.
    
    Note that this doesn't make netfilter default to 'fully random' mode;
    the 'rover' was only used if NAT could not reuse source port as-is.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6824208b59a4727b8a8653f83d8e685584d04606
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu May 17 01:44:11 2018 +0200

    bpf: fix truncated jump targets on heavy expansions
    
    commit 050fad7c4534c13c8eb1d9c2ba66012e014773cb upstream.
    
    Recently during testing, I ran into the following panic:
    
      [  207.892422] Internal error: Accessing user space memory outside uaccess.h routines: 96000004 [#1] SMP
      [  207.901637] Modules linked in: binfmt_misc [...]
      [  207.966530] CPU: 45 PID: 2256 Comm: test_verifier Tainted: G        W         4.17.0-rc3+ #7
      [  207.974956] Hardware name: FOXCONN R2-1221R-A4/C2U4N_MB, BIOS G31FB18A 03/31/2017
      [  207.982428] pstate: 60400005 (nZCv daif +PAN -UAO)
      [  207.987214] pc : bpf_skb_load_helper_8_no_cache+0x34/0xc0
      [  207.992603] lr : 0xffff000000bdb754
      [  207.996080] sp : ffff000013703ca0
      [  207.999384] x29: ffff000013703ca0 x28: 0000000000000001
      [  208.004688] x27: 0000000000000001 x26: 0000000000000000
      [  208.009992] x25: ffff000013703ce0 x24: ffff800fb4afcb00
      [  208.015295] x23: ffff00007d2f5038 x22: ffff00007d2f5000
      [  208.020599] x21: fffffffffeff2a6f x20: 000000000000000a
      [  208.025903] x19: ffff000009578000 x18: 0000000000000a03
      [  208.031206] x17: 0000000000000000 x16: 0000000000000000
      [  208.036510] x15: 0000ffff9de83000 x14: 0000000000000000
      [  208.041813] x13: 0000000000000000 x12: 0000000000000000
      [  208.047116] x11: 0000000000000001 x10: ffff0000089e7f18
      [  208.052419] x9 : fffffffffeff2a6f x8 : 0000000000000000
      [  208.057723] x7 : 000000000000000a x6 : 00280c6160000000
      [  208.063026] x5 : 0000000000000018 x4 : 0000000000007db6
      [  208.068329] x3 : 000000000008647a x2 : 19868179b1484500
      [  208.073632] x1 : 0000000000000000 x0 : ffff000009578c08
      [  208.078938] Process test_verifier (pid: 2256, stack limit = 0x0000000049ca7974)
      [  208.086235] Call trace:
      [  208.088672]  bpf_skb_load_helper_8_no_cache+0x34/0xc0
      [  208.093713]  0xffff000000bdb754
      [  208.096845]  bpf_test_run+0x78/0xf8
      [  208.100324]  bpf_prog_test_run_skb+0x148/0x230
      [  208.104758]  sys_bpf+0x314/0x1198
      [  208.108064]  el0_svc_naked+0x30/0x34
      [  208.111632] Code: 91302260 f9400001 f9001fa1 d2800001 (29500680)
      [  208.117717] ---[ end trace 263cb8a59b5bf29f ]---
    
    The program itself which caused this had a long jump over the whole
    instruction sequence where all of the inner instructions required
    heavy expansions into multiple BPF instructions. Additionally, I also
    had BPF hardening enabled which requires once more rewrites of all
    constant values in order to blind them. Each time we rewrite insns,
    bpf_adj_branches() would need to potentially adjust branch targets
    which cross the patchlet boundary to accommodate for the additional
    delta. Eventually that lead to the case where the target offset could
    not fit into insn->off's upper 0x7fff limit anymore where then offset
    wraps around becoming negative (in s16 universe), or vice versa
    depending on the jump direction.
    
    Therefore it becomes necessary to detect and reject any such occasions
    in a generic way for native eBPF and cBPF to eBPF migrations. For
    the latter we can simply check bounds in the bpf_convert_filter()'s
    BPF_EMIT_JMP helper macro and bail out once we surpass limits. The
    bpf_patch_insn_single() for native eBPF (and cBPF to eBPF in case
    of subsequent hardening) is a bit more complex in that we need to
    detect such truncations before hitting the bpf_prog_realloc(). Thus
    the latter is split into an extra pass to probe problematic offsets
    on the original program in order to fail early. With that in place
    and carefully tested I no longer hit the panic and the rewrites are
    rejected properly. The above example panic I've seen on bpf-next,
    though the issue itself is generic in that a guard against this issue
    in bpf seems more appropriate in this case.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [ab: Dropped BPF_PSEUDO_CALL hardening, introoduced in 4.16]
    Signed-off-by: Alessio Balsini <balsini@android.com>
    Acked-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e742ffe6834001f8f4ca1762ae68a9cee1b8f07
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 26 17:10:21 2022 -0800

    ipv4: tcp: send zero IPID in SYNACK messages
    
    [ Upstream commit 970a5a3ea86da637471d3cd04d513a0755aba4bf ]
    
    In commit 431280eebed9 ("ipv4: tcp: send zero IPID for RST and
    ACK sent in SYN-RECV and TIME-WAIT state") we took care of some
    ctl packets sent by TCP.
    
    It turns out we need to use a similar strategy for SYNACK packets.
    
    By default, they carry IP_DF and IPID==0, but there are ways
    to ask them to use the hashed IP ident generator and thus
    be used to build off-path attacks.
    (Ref: Off-Path TCP Exploits of the Mixed IPID Assignment)
    
    One of this way is to force (before listener is started)
    echo 1 >/proc/sys/net/ipv4/ip_no_pmtu_disc
    
    Another way is using forged ICMP ICMP_FRAG_NEEDED
    with a very small MTU (like 68) to force a false return from
    ip_dont_fragment()
    
    In this patch, ip_build_and_send_pkt() uses the following
    heuristics.
    
    1) Most SYNACK packets are smaller than IPV4_MIN_MTU and therefore
    can use IP_DF regardless of the listener or route pmtu setting.
    
    2) In case the SYNACK packet is bigger than IPV4_MIN_MTU,
    we use prandom_u32() generator instead of the IPv4 hashed ident one.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Ray Che <xijiache@gmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Cc: Geoff Alexander <alexandg@cs.unm.edu>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 225d15ac0257195aed4b81a680dd38905438108b
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 26 16:51:16 2022 -0800

    ipv4: raw: lock the socket in raw_bind()
    
    [ Upstream commit 153a0d187e767c68733b8e9f46218eb1f41ab902 ]
    
    For some reason, raw_bind() forgot to lock the socket.
    
    BUG: KCSAN: data-race in __ip4_datagram_connect / raw_bind
    
    write to 0xffff8881170d4308 of 4 bytes by task 5466 on cpu 0:
     raw_bind+0x1b0/0x250 net/ipv4/raw.c:739
     inet_bind+0x56/0xa0 net/ipv4/af_inet.c:443
     __sys_bind+0x14b/0x1b0 net/socket.c:1697
     __do_sys_bind net/socket.c:1708 [inline]
     __se_sys_bind net/socket.c:1706 [inline]
     __x64_sys_bind+0x3d/0x50 net/socket.c:1706
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    read to 0xffff8881170d4308 of 4 bytes by task 5468 on cpu 1:
     __ip4_datagram_connect+0xb7/0x7b0 net/ipv4/datagram.c:39
     ip4_datagram_connect+0x2a/0x40 net/ipv4/datagram.c:89
     inet_dgram_connect+0x107/0x190 net/ipv4/af_inet.c:576
     __sys_connect_file net/socket.c:1900 [inline]
     __sys_connect+0x197/0x1b0 net/socket.c:1917
     __do_sys_connect net/socket.c:1927 [inline]
     __se_sys_connect net/socket.c:1924 [inline]
     __x64_sys_connect+0x3d/0x50 net/socket.c:1924
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x00000000 -> 0x0003007f
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 5468 Comm: syz-executor.5 Not tainted 5.17.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bbdfb71d2898a9d6e777a948a7484903a4ad2c3
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Mon Jan 24 11:29:54 2022 +0800

    yam: fix a memory leak in yam_siocdevprivate()
    
    [ Upstream commit 29eb31542787e1019208a2e1047bb7c76c069536 ]
    
    ym needs to be free when ym->cmd != SIOCYAMSMCS.
    
    Fixes: 0781168e23a2 ("yam: fix a missing-check bug")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 610b3125f478519be892e856dbd081073cde5c6c
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Fri Jan 21 18:59:20 2022 -0800

    ibmvnic: don't spin in tasklet
    
    [ Upstream commit 48079e7fdd0269d66b1d7d66ae88bd03162464ad ]
    
    ibmvnic_tasklet() continuously spins waiting for responses to all
    capability requests. It does this to avoid encountering an error
    during initialization of the vnic. However if there is a bug in the
    VIOS and we do not receive a response to one or more queries the
    tasklet ends up spinning continuously leading to hard lock ups.
    
    If we fail to receive a message from the VIOS it is reasonable to
    timeout the login attempt rather than spin indefinitely in the tasklet.
    
    Fixes: 249168ad07cd ("ibmvnic: Make CRQ interrupt tasklet wait for all capabilities crqs")
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Reviewed-by: Dany Madden <drt@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d9f8ba28f3747ca0f910a363e46f1114856dbbe
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Sun Jan 16 19:18:44 2022 +0100

    drm/msm/dsi: invalid parameter check in msm_dsi_phy_enable
    
    commit 5e761a2287234bc402ba7ef07129f5103bcd775c upstream.
    
    The function performs a check on the "phy" input parameter, however, it
    is used before the check.
    
    Initialize the "dev" variable after the sanity check to avoid a possible
    NULL pointer dereference.
    
    Fixes: 5c8290284402b ("drm/msm/dsi: Split PHY drivers to separate files")
    Addresses-Coverity-ID: 1493860 ("Null pointer dereference")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20220116181844.7400-1-jose.exposito89@gmail.com
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5379baa383b904a821a403719d6157f377c5ba41
Author: Xianting Tian <xianting.tian@linux.alibaba.com>
Date:   Wed Jan 12 20:33:34 2022 +0800

    drm/msm: Fix wrong size calculation
    
    commit 0a727b459ee39bd4c5ced19d6024258ac87b6b2e upstream.
    
    For example, memory-region in .dts as below,
            reg = <0x0 0x50000000 0x0 0x20000000>
    
    We can get below values,
    struct resource r;
    r.start = 0x50000000;
    r.end   = 0x6fffffff;
    
    So the size should be:
    size = r.end - r.start + 1 = 0x20000000
    
    Signed-off-by: Xianting Tian <xianting.tian@linux.alibaba.com>
    Fixes: 072f1f9168ed ("drm/msm: add support for "stolen" mem")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20220112123334.749776-1-xianting.tian@linux.alibaba.com
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3de38a5f0c7a02aa77ea3a60ce672850d2188a7
Author: Jianguo Wu <wujianguo@chinatelecom.cn>
Date:   Fri Jan 21 17:15:31 2022 +0800

    net-procfs: show net devices bound packet types
    
    commit 1d10f8a1f40b965d449e8f2d5ed7b96a7c138b77 upstream.
    
    After commit:7866a621043f ("dev: add per net_device packet type chains"),
    we can not get packet types that are bound to a specified net device by
    /proc/net/ptype, this patch fix the regression.
    
    Run "tcpdump -i ens192 udp -nns0" Before and after apply this patch:
    
    Before:
      [root@localhost ~]# cat /proc/net/ptype
      Type Device      Function
      0800          ip_rcv
      0806          arp_rcv
      86dd          ipv6_rcv
    
    After:
      [root@localhost ~]# cat /proc/net/ptype
      Type Device      Function
      ALL  ens192   tpacket_rcv
      0800          ip_rcv
      0806          arp_rcv
      86dd          ipv6_rcv
    
    v1 -> v2:
      - fix the regression rather than adding new /proc API as
        suggested by Stephen Hemminger.
    
    Fixes: 7866a621043f ("dev: add per net_device packet type chains")
    Signed-off-by: Jianguo Wu <wujianguo@chinatelecom.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db6cd55bb92a87c3aab2039b69613729f1bbb037
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Thu Jan 6 18:24:03 2022 -0500

    NFSv4: nfs_atomic_open() can race when looking up a non-regular file
    
    commit 1751fc1db36f6f411709e143d5393f92d12137a9 upstream.
    
    If the file type changes back to being a regular file on the server
    between the failed OPEN and our LOOKUP, then we need to re-run the OPEN.
    
    Fixes: 0dd2b474d0b6 ("nfs: implement i_op->atomic_open()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 516f348b759f6a92819820a3f56d678458e22cc8
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Thu Jan 6 18:24:02 2022 -0500

    NFSv4: Handle case where the lookup of a directory fails
    
    commit ac795161c93699d600db16c1a8cc23a65a1eceaf upstream.
    
    If the application sets the O_DIRECTORY flag, and tries to open a
    regular file, nfs_atomic_open() will punt to doing a regular lookup.
    If the server then returns a regular file, we will happily return a
    file descriptor with uninitialised open state.
    
    The fix is to return the expected ENOTDIR error in these cases.
    
    Reported-by: Lyu Tao <tao.lyu@epfl.ch>
    Fixes: 0dd2b474d0b6 ("nfs: implement i_op->atomic_open()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a2cfad2d6222e0ade2f491806cba7ff705ec14d
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Jan 6 11:48:52 2022 -0800

    hwmon: (lm90) Reduce maximum conversion rate for G781
    
    [ Upstream commit a66c5ed539277b9f2363bbace0dba88b85b36c26 ]
    
    According to its datasheet, G781 supports a maximum conversion rate value
    of 8 (62.5 ms). However, chips labeled G781 and G780 were found to only
    support a maximum conversion rate value of 7 (125 ms). On the other side,
    chips labeled G781-1 and G784 were found to support a conversion rate value
    of 8. There is no known means to distinguish G780 from G781 or G784; all
    chips report the same manufacturer ID and chip revision.
    Setting the conversion rate register value to 8 on chips not supporting
    it causes unexpected behavior since the real conversion rate is set to 0
    (16 seconds) if a value of 8 is written into the conversion rate register.
    Limit the conversion rate register value to 7 for all G78x chips to avoid
    the problem.
    
    Fixes: ae544f64cc7b ("hwmon: (lm90) Add support for GMT G781")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 853f58791145b6d7e6d2b6ff2a982119e920e21a
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 26 17:10:22 2022 -0800

    ipv4: avoid using shared IP generator for connected sockets
    
    commit 23f57406b82de51809d5812afd96f210f8b627f3 upstream.
    
    ip_select_ident_segs() has been very conservative about using
    the connected socket private generator only for packets with IP_DF
    set, claiming it was needed for some VJ compression implementations.
    
    As mentioned in this referenced document, this can be abused.
    (Ref: Off-Path TCP Exploits of the Mixed IPID Assignment)
    
    Before switching to pure random IPID generation and possibly hurt
    some workloads, lets use the private inet socket generator.
    
    Not only this will remove one vulnerability, this will also
    improve performance of TCP flows using pmtudisc==IP_PMTUDISC_DONT
    
    Fixes: 73f156a6e8c1 ("inetpeer: get rid of ip_id_count")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reported-by: Ray Che <xijiache@gmail.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86885cdf623bf04db03662bcd8292739481dcd69
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Jan 22 06:40:56 2022 -0500

    ping: fix the sk_bound_dev_if match in ping_lookup
    
    commit 2afc3b5a31f9edf3ef0f374f5d70610c79c93a42 upstream.
    
    When 'ping' changes to use PING socket instead of RAW socket by:
    
       # sysctl -w net.ipv4.ping_group_range="0 100"
    
    the selftests 'router_broadcast.sh' will fail, as such command
    
      # ip vrf exec vrf-h1 ping -I veth0 198.51.100.255 -b
    
    can't receive the response skb by the PING socket. It's caused by mismatch
    of sk_bound_dev_if and dif in ping_rcv() when looking up the PING socket,
    as dif is vrf-h1 if dif's master was set to vrf-h1.
    
    This patch is to fix this regression by also checking the sk_bound_dev_if
    against sdif so that the packets can stil be received even if the socket
    is not bound to the vrf device but to the real iif.
    
    Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c38023032a598ec6263e008d62c7f02def72d5c7
Author: Congyu Liu <liu3101@purdue.edu>
Date:   Tue Jan 18 14:20:13 2022 -0500

    net: fix information leakage in /proc/net/ptype
    
    commit 47934e06b65637c88a762d9c98329ae6e3238888 upstream.
    
    In one net namespace, after creating a packet socket without binding
    it to a device, users in other net namespaces can observe the new
    `packet_type` added by this packet socket by reading `/proc/net/ptype`
    file. This is minor information leakage as packet socket is
    namespace aware.
    
    Add a net pointer in `packet_type` to keep the net namespace of
    of corresponding packet socket. In `ptype_seq_show`, this net pointer
    must be checked when it is not NULL.
    
    Fixes: 2feb27dbe00c ("[NETNS]: Minor information leak via /proc/net/ptype file.")
    Signed-off-by: Congyu Liu <liu3101@purdue.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ce961a393e58f924468d6d5c9e7d22f90375198
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Thu Jan 20 10:05:46 2022 +0200

    ipv6_tunnel: Rate limit warning messages
    
    commit 6cee105e7f2ced596373951d9ea08dacc3883c68 upstream.
    
    The warning messages can be invoked from the data path for every packet
    transmitted through an ip6gre netdev, leading to high CPU utilization.
    
    Fix that by rate limiting the messages.
    
    Fixes: 09c6bbf090ec ("[IPV6]: Do mandatory IPv6 tunnel endpoint checks in realtime")
    Reported-by: Maksym Yaremchuk <maksymy@nvidia.com>
    Tested-by: Maksym Yaremchuk <maksymy@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Amit Cohen <amcohen@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c93a290c862ccfa404e42d7420565730d67cbff9
Author: John Meneghini <jmeneghi@redhat.com>
Date:   Fri Jan 14 23:00:44 2022 -0500

    scsi: bnx2fc: Flush destroy_work queue before calling bnx2fc_interface_put()
    
    commit 847f9ea4c5186fdb7b84297e3eeed9e340e83fce upstream.
    
    The bnx2fc_destroy() functions are removing the interface before calling
    destroy_work. This results multiple WARNings from sysfs_remove_group() as
    the controller rport device attributes are removed too early.
    
    Replace the fcoe_port's destroy_work queue. It's not needed.
    
    The problem is easily reproducible with the following steps.
    
    Example:
    
      $ dmesg -w &
      $ systemctl enable --now fcoe
      $ fipvlan -s -c ens2f1
      $ fcoeadm -d ens2f1.802
      [  583.464488] host2: libfc: Link down on port (7500a1)
      [  583.472651] bnx2fc: 7500a1 - rport not created Yet!!
      [  583.490468] ------------[ cut here ]------------
      [  583.538725] sysfs group 'power' not found for kobject 'rport-2:0-0'
      [  583.568814] WARNING: CPU: 3 PID: 192 at fs/sysfs/group.c:279 sysfs_remove_group+0x6f/0x80
      [  583.607130] Modules linked in: dm_service_time 8021q garp mrp stp llc bnx2fc cnic uio rpcsec_gss_krb5 auth_rpcgss nfsv4 ...
      [  583.942994] CPU: 3 PID: 192 Comm: kworker/3:2 Kdump: loaded Not tainted 5.14.0-39.el9.x86_64 #1
      [  583.984105] Hardware name: HP ProLiant DL120 G7, BIOS J01 07/01/2013
      [  584.016535] Workqueue: fc_wq_2 fc_rport_final_delete [scsi_transport_fc]
      [  584.050691] RIP: 0010:sysfs_remove_group+0x6f/0x80
      [  584.074725] Code: ff 5b 48 89 ef 5d 41 5c e9 ee c0 ff ff 48 89 ef e8 f6 b8 ff ff eb d1 49 8b 14 24 48 8b 33 48 c7 c7 ...
      [  584.162586] RSP: 0018:ffffb567c15afdc0 EFLAGS: 00010282
      [  584.188225] RAX: 0000000000000000 RBX: ffffffff8eec4220 RCX: 0000000000000000
      [  584.221053] RDX: ffff8c1586ce84c0 RSI: ffff8c1586cd7cc0 RDI: ffff8c1586cd7cc0
      [  584.255089] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffb567c15afc00
      [  584.287954] R10: ffffb567c15afbf8 R11: ffffffff8fbe7f28 R12: ffff8c1486326400
      [  584.322356] R13: ffff8c1486326480 R14: ffff8c1483a4a000 R15: 0000000000000004
      [  584.355379] FS:  0000000000000000(0000) GS:ffff8c1586cc0000(0000) knlGS:0000000000000000
      [  584.394419] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [  584.421123] CR2: 00007fe95a6f7840 CR3: 0000000107674002 CR4: 00000000000606e0
      [  584.454888] Call Trace:
      [  584.466108]  device_del+0xb2/0x3e0
      [  584.481701]  device_unregister+0x13/0x60
      [  584.501306]  bsg_unregister_queue+0x5b/0x80
      [  584.522029]  bsg_remove_queue+0x1c/0x40
      [  584.541884]  fc_rport_final_delete+0xf3/0x1d0 [scsi_transport_fc]
      [  584.573823]  process_one_work+0x1e3/0x3b0
      [  584.592396]  worker_thread+0x50/0x3b0
      [  584.609256]  ? rescuer_thread+0x370/0x370
      [  584.628877]  kthread+0x149/0x170
      [  584.643673]  ? set_kthread_struct+0x40/0x40
      [  584.662909]  ret_from_fork+0x22/0x30
      [  584.680002] ---[ end trace 53575ecefa942ece ]---
    
    Link: https://lore.kernel.org/r/20220115040044.1013475-1-jmeneghi@redhat.com
    Fixes: 0cbf32e1681d ("[SCSI] bnx2fc: Avoid calling bnx2fc_if_destroy with unnecessary locks")
    Tested-by: Guangwu Zhang <guazhang@redhat.com>
    Co-developed-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: John Meneghini <jmeneghi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d249b8962192f2d13f9f2c950b916f7bf4b4dda5
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Mon Jan 10 10:47:37 2022 -0800

    rpmsg: char: Fix race between the release of rpmsg_eptdev and cdev
    
    commit 7a534ae89e34e9b51acb5a63dd0f88308178b46a upstream.
    
    struct rpmsg_eptdev contains a struct cdev. The current code frees
    the rpmsg_eptdev struct in rpmsg_eptdev_destroy(), but the cdev is
    a managed object, therefore its release is not predictable and the
    rpmsg_eptdev could be freed before the cdev is entirely released.
    
    The cdev_device_add/del() API was created to address this issue
    (see commit '233ed09d7fda ("chardev: add helper function to register
    char devs with a struct device")'), use it instead of cdev add/del().
    
    Fixes: c0cdc19f84a4 ("rpmsg: Driver for user space endpoint interface")
    Suggested-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220110104706.v6.2.Idde68b05b88d4a2e6e54766c653f3a6d9e419ce6@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74d85e9fbc7022a4011102c7474a9c7aeb704a35
Author: Sujit Kautkar <sujitka@chromium.org>
Date:   Mon Jan 10 10:47:36 2022 -0800

    rpmsg: char: Fix race between the release of rpmsg_ctrldev and cdev
    
    commit b7fb2dad571d1e21173c06cef0bced77b323990a upstream.
    
    struct rpmsg_ctrldev contains a struct cdev. The current code frees
    the rpmsg_ctrldev struct in rpmsg_ctrldev_release_device(), but the
    cdev is a managed object, therefore its release is not predictable
    and the rpmsg_ctrldev could be freed before the cdev is entirely
    released, as in the backtrace below.
    
    [   93.625603] ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x7c
    [   93.636115] WARNING: CPU: 0 PID: 12 at lib/debugobjects.c:488 debug_print_object+0x13c/0x1b0
    [   93.644799] Modules linked in: veth xt_cgroup xt_MASQUERADE rfcomm algif_hash algif_skcipher af_alg uinput ip6table_nat fuse uvcvideo videobuf2_vmalloc venus_enc venus_dec videobuf2_dma_contig hci_uart btandroid btqca snd_soc_rt5682_i2c bluetooth qcom_spmi_temp_alarm snd_soc_rt5682v
    [   93.715175] CPU: 0 PID: 12 Comm: kworker/0:1 Tainted: G    B             5.4.163-lockdep #26
    [   93.723855] Hardware name: Google Lazor (rev3 - 8) with LTE (DT)
    [   93.730055] Workqueue: events kobject_delayed_cleanup
    [   93.735271] pstate: 60c00009 (nZCv daif +PAN +UAO)
    [   93.740216] pc : debug_print_object+0x13c/0x1b0
    [   93.744890] lr : debug_print_object+0x13c/0x1b0
    [   93.749555] sp : ffffffacf5bc7940
    [   93.752978] x29: ffffffacf5bc7940 x28: dfffffd000000000
    [   93.758448] x27: ffffffacdb11a800 x26: dfffffd000000000
    [   93.763916] x25: ffffffd0734f856c x24: dfffffd000000000
    [   93.769389] x23: 0000000000000000 x22: ffffffd0733c35b0
    [   93.774860] x21: ffffffd0751994a0 x20: ffffffd075ec27c0
    [   93.780338] x19: ffffffd075199100 x18: 00000000000276e0
    [   93.785814] x17: 0000000000000000 x16: dfffffd000000000
    [   93.791291] x15: ffffffffffffffff x14: 6e6968207473696c
    [   93.796768] x13: 0000000000000000 x12: ffffffd075e2b000
    [   93.802244] x11: 0000000000000001 x10: 0000000000000000
    [   93.807723] x9 : d13400dff1921900 x8 : d13400dff1921900
    [   93.813200] x7 : 0000000000000000 x6 : 0000000000000000
    [   93.818676] x5 : 0000000000000080 x4 : 0000000000000000
    [   93.824152] x3 : ffffffd0732a0fa4 x2 : 0000000000000001
    [   93.829628] x1 : ffffffacf5bc7580 x0 : 0000000000000061
    [   93.835104] Call trace:
    [   93.837644]  debug_print_object+0x13c/0x1b0
    [   93.841963]  __debug_check_no_obj_freed+0x25c/0x3c0
    [   93.846987]  debug_check_no_obj_freed+0x18/0x20
    [   93.851669]  slab_free_freelist_hook+0xbc/0x1e4
    [   93.856346]  kfree+0xfc/0x2f4
    [   93.859416]  rpmsg_ctrldev_release_device+0x78/0xb8
    [   93.864445]  device_release+0x84/0x168
    [   93.868310]  kobject_cleanup+0x12c/0x298
    [   93.872356]  kobject_delayed_cleanup+0x10/0x18
    [   93.876948]  process_one_work+0x578/0x92c
    [   93.881086]  worker_thread+0x804/0xcf8
    [   93.884963]  kthread+0x2a8/0x314
    [   93.888303]  ret_from_fork+0x10/0x18
    
    The cdev_device_add/del() API was created to address this issue (see
    commit '233ed09d7fda ("chardev: add helper function to register char
    devs with a struct device")'), use it instead of cdev add/del().
    
    Fixes: c0cdc19f84a4 ("rpmsg: Driver for user space endpoint interface")
    Signed-off-by: Sujit Kautkar <sujitka@chromium.org>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220110104706.v6.1.Iaac908f3e3149a89190ce006ba166e2d3fd247a3@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ea6fbb9c4520f5d5004c67a8e27cbfc1ccc7b3a
Author: Joe Damato <jdamato@fastly.com>
Date:   Wed Dec 8 17:56:33 2021 -0800

    i40e: fix unsigned stat widths
    
    commit 3b8428b84539c78fdc8006c17ebd25afd4722d51 upstream.
    
    Change i40e_update_vsi_stats and struct i40e_vsi to use u64 fields to match
    the width of the stats counters in struct i40e_rx_queue_stats.
    
    Update debugfs code to use the correct format specifier for u64.
    
    Fixes: 41c445ff0f48 ("i40e: main driver core")
    Signed-off-by: Joe Damato <jdamato@fastly.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b15744ec0bbe7d4401217bb53303ced6f2e8f98
Author: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
Date:   Thu Oct 28 13:51:14 2021 +0000

    i40e: Increase delay to 1 s after global EMP reset
    
    commit 9b13bd53134c9ddd544a790125199fdbdb505e67 upstream.
    
    Recently simplified i40e_rebuild causes that FW sometimes
    is not ready after NVM update, the ping does not return.
    
    Increase the delay in case of EMP reset.
    Old delay of 300 ms was introduced for specific cards for 710 series.
    Now it works for all the cards and delay was increased.
    
    Fixes: 1fa51a650e1d ("i40e: Add delay after EMP reset for firmware to recover")
    Signed-off-by: Arkadiusz Kubalewski <arkadiusz.kubalewski@intel.com>
    Signed-off-by: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03cc25cb5ac288ba79f8de88d6224ca360be1c9a
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Oct 8 18:58:40 2021 +0200

    lkdtm: Fix content of section containing lkdtm_rodata_do_nothing()
    
    commit bc93a22a19eb2b68a16ecf04cdf4b2ed65aaf398 upstream.
    
    On a kernel without CONFIG_STRICT_KERNEL_RWX, running EXEC_RODATA
    test leads to "Illegal instruction" failure.
    
    Looking at the content of rodata_objcopy.o, we see that the
    function content zeroes only:
    
            Disassembly of section .rodata:
    
            0000000000000000 <.lkdtm_rodata_do_nothing>:
               0:   00 00 00 00     .long 0x0
    
    Add the contents flag in order to keep the content of the section
    while renaming it.
    
            Disassembly of section .rodata:
    
            0000000000000000 <.lkdtm_rodata_do_nothing>:
               0:   4e 80 00 20     blr
    
    Fixes: e9e08a07385e ("lkdtm: support llvm-objcopy")
    Cc: stable@vger.kernel.org
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/8900731fbc05fb8b0de18af7133a8fc07c3c53a1.1633712176.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Dec 22 13:07:31 2021 +0000

    powerpc/32: Fix boot failure with GCC latent entropy plugin
    
    commit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.
    
    Boot fails with GCC latent entropy plugin enabled.
    
    This is due to early boot functions trying to access 'latent_entropy'
    global data while the kernel is not relocated at its final
    destination yet.
    
    As there is no way to tell GCC to use PTRRELOC() to access it,
    disable latent entropy plugin in early_32.o and feature-fixups.o and
    code-patching.o
    
    Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")
    Cc: stable@vger.kernel.org # v4.9+
    Reported-by: Erhard Furtner <erhard_f@mailbox.org>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217
    Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04bc20338c3808cd02ed63d0d3d74a5524eb3b7f
Author: Marek Behún <kabel@kernel.org>
Date:   Wed Jan 19 17:44:55 2022 +0100

    net: sfp: ignore disabled SFP node
    
    commit 2148927e6ed43a1667baf7c2ae3e0e05a44b51a0 upstream.
    
    Commit ce0aa27ff3f6 ("sfp: add sfp-bus to bridge between network devices
    and sfp cages") added code which finds SFP bus DT node even if the node
    is disabled with status = "disabled". Because of this, when phylink is
    created, it ends with non-null .sfp_bus member, even though the SFP
    module is not probed (because the node is disabled).
    
    We need to ignore disabled SFP bus node.
    
    Fixes: ce0aa27ff3f6 ("sfp: add sfp-bus to bridge between network devices and sfp cages")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Cc: stable@vger.kernel.org # 2203cbf2c8b5 ("net: sfp: move fwnode parsing into sfp-bus layer")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [ backport to 4.14 ]
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e7a3e4b4e77f55e14a15158e046215e1a0e5ba1
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Fri Jan 21 17:55:19 2022 -0800

    usb: typec: tcpm: Do not disconnect while receiving VBUS off
    
    commit 90b8aa9f5b09edae6928c0561f933fec9f7a9987 upstream.
    
    With some chargers, vbus might momentarily raise above VSAFE5V and fall
    back to 0V before tcpm gets to read port->tcpc->get_vbus. This will
    will report a VBUS off event causing TCPM to transition to
    SNK_UNATTACHED where it should be waiting in either SNK_ATTACH_WAIT
    or SNK_DEBOUNCED state. This patch makes TCPM avoid vbus off events
    while in SNK_ATTACH_WAIT or SNK_DEBOUNCED state.
    
    Stub from the spec:
        "4.5.2.2.4.2 Exiting from AttachWait.SNK State
        A Sink shall transition to Unattached.SNK when the state of both
        the CC1 and CC2 pins is SNK.Open for at least tPDDebounce.
        A DRP shall transition to Unattached.SRC when the state of both
        the CC1 and CC2 pins is SNK.Open for at least tPDDebounce."
    
    [23.194131] CC1: 0 -> 0, CC2: 0 -> 5 [state SNK_UNATTACHED, polarity 0, connected]
    [23.201777] state change SNK_UNATTACHED -> SNK_ATTACH_WAIT [rev3 NONE_AMS]
    [23.209949] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @ 170 ms [rev3 NONE_AMS]
    [23.300579] VBUS off
    [23.300668] state change SNK_ATTACH_WAIT -> SNK_UNATTACHED [rev3 NONE_AMS]
    [23.301014] VBUS VSAFE0V
    [23.301111] Start toggling
    
    Fixes: f0690a25a140b8 ("staging: typec: USB Type-C Port Manager (tcpm)")
    Cc: stable@vger.kernel.org
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Link: https://lore.kernel.org/r/20220122015520.332507-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 546ba238535d925254e0b3f12012a5c55801e2f3
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Jan 24 15:23:45 2022 -0500

    USB: core: Fix hang in usb_kill_urb by adding memory barriers
    
    commit 26fbe9772b8c459687930511444ce443011f86bf upstream.
    
    The syzbot fuzzer has identified a bug in which processes hang waiting
    for usb_kill_urb() to return.  It turns out the issue is not unlinking
    the URB; that works just fine.  Rather, the problem arises when the
    wakeup notification that the URB has completed is not received.
    
    The reason is memory-access ordering on SMP systems.  In outline form,
    usb_kill_urb() and __usb_hcd_giveback_urb() operating concurrently on
    different CPUs perform the following actions:
    
    CPU 0                                   CPU 1
    ----------------------------            ---------------------------------
    usb_kill_urb():                         __usb_hcd_giveback_urb():
      ...                                     ...
      atomic_inc(&urb->reject);               atomic_dec(&urb->use_count);
      ...                                     ...
      wait_event(usb_kill_urb_queue,
            atomic_read(&urb->use_count) == 0);
                                              if (atomic_read(&urb->reject))
                                                    wake_up(&usb_kill_urb_queue);
    
    Confining your attention to urb->reject and urb->use_count, you can
    see that the overall pattern of accesses on CPU 0 is:
    
            write urb->reject, then read urb->use_count;
    
    whereas the overall pattern of accesses on CPU 1 is:
    
            write urb->use_count, then read urb->reject.
    
    This pattern is referred to in memory-model circles as SB (for "Store
    Buffering"), and it is well known that without suitable enforcement of
    the desired order of accesses -- in the form of memory barriers -- it
    is entirely possible for one or both CPUs to execute their reads ahead
    of their writes.  The end result will be that sometimes CPU 0 sees the
    old un-decremented value of urb->use_count while CPU 1 sees the old
    un-incremented value of urb->reject.  Consequently CPU 0 ends up on
    the wait queue and never gets woken up, leading to the observed hang
    in usb_kill_urb().
    
    The same pattern of accesses occurs in usb_poison_urb() and the
    failure pathway of usb_hcd_submit_urb().
    
    The problem is fixed by adding suitable memory barriers.  To provide
    proper memory-access ordering in the SB pattern, a full barrier is
    required on both CPUs.  The atomic_inc() and atomic_dec() accesses
    themselves don't provide any memory ordering, but since they are
    present, we can use the optimized smp_mb__after_atomic() memory
    barrier in the various routines to obtain the desired effect.
    
    This patch adds the necessary memory barriers.
    
    CC: <stable@vger.kernel.org>
    Reported-and-tested-by: syzbot+76629376e06e2c2ad626@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/Ye8K0QYee0Q0Nna2@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 973e0d9e5fcd975bd95ddf544b279f764940b835
Author: Pavankumar Kondeti <quic_pkondeti@quicinc.com>
Date:   Sat Jan 22 08:33:22 2022 +0530

    usb: gadget: f_sourcesink: Fix isoc transfer for USB_SPEED_SUPER_PLUS
    
    commit 904edf8aeb459697129be5fde847e2a502f41fd9 upstream.
    
    Currently when gadget enumerates in super speed plus, the isoc
    endpoint request buffer size is not calculated correctly. Fix
    this by checking the gadget speed against USB_SPEED_SUPER_PLUS
    and update the request buffer size.
    
    Fixes: 90c4d05780d4 ("usb: fix various gadgets null ptr deref on 10gbps cabling.")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Pavankumar Kondeti <quic_pkondeti@quicinc.com>
    Link: https://lore.kernel.org/r/1642820602-20619-1-git-send-email-quic_pkondeti@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddc9a4635a84eecb044d2ef69c3a185b45289711
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Mon Jan 17 15:00:39 2022 +0000

    usb: common: ulpi: Fix crash in ulpi_match()
    
    commit 2e3dd4a6246945bf84ea6f478365d116e661554c upstream.
    
    Commit 7495af930835 ("ARM: multi_v7_defconfig: Enable drivers for
    DragonBoard 410c") enables the CONFIG_PHY_QCOM_USB_HS for the ARM
    multi_v7_defconfig. Enabling this Kconfig is causing the kernel to crash
    on the Tegra20 Ventana platform in the ulpi_match() function.
    
    The Qualcomm USB HS PHY driver that is enabled by CONFIG_PHY_QCOM_USB_HS,
    registers a ulpi_driver but this driver does not provide an 'id_table',
    so when ulpi_match() is called on the Tegra20 Ventana platform, it
    crashes when attempting to deference the id_table pointer which is not
    valid. The Qualcomm USB HS PHY driver uses device-tree for matching the
    ULPI driver with the device and so fix this crash by using device-tree
    for matching if the id_table is not valid.
    
    Fixes: ef6a7bcfb01c ("usb: ulpi: Support device discovery via DT")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20220117150039.44058-1-jonathanh@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 093768ce6736c8b8f647c8a1a8c76f9bceb32d5a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Jan 24 15:14:40 2022 -0500

    usb-storage: Add unusual-devs entry for VL817 USB-SATA bridge
    
    commit 5b67b315037250a61861119683e7fcb509deea25 upstream.
    
    Two people have reported (and mentioned numerous other reports on the
    web) that VIA's VL817 USB-SATA bridge does not work with the uas
    driver.  Typical log messages are:
    
    [ 3606.232149] sd 14:0:0:0: [sdg] tag#2 uas_zap_pending 0 uas-tag 1 inflight: CMD
    [ 3606.232154] sd 14:0:0:0: [sdg] tag#2 CDB: Write(16) 8a 00 00 00 00 00 18 0c c9 80 00 00 00 80 00 00
    [ 3606.306257] usb 4-4.4: reset SuperSpeed Plus Gen 2x1 USB device number 11 using xhci_hcd
    [ 3606.328584] scsi host14: uas_eh_device_reset_handler success
    
    Surprisingly, the devices do seem to work okay for some other people.
    The cause of the differing behaviors is not known.
    
    In the hope of getting the devices to work for the most users, even at
    the possible cost of degraded performance for some, this patch adds an
    unusual_devs entry for the VL817 to block it from binding to the uas
    driver by default.  Users will be able to override this entry by means
    of a module parameter, if they want.
    
    CC: <stable@vger.kernel.org>
    Reported-by: DocMAX <mail@vacharakis.de>
    Reported-and-tested-by: Thomas Weißschuh <linux@weissschuh.net>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/Ye8IsK2sjlEv1rqU@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c232096d4fe58b71d367424233e0b63c71cd7e9
Author: Cameron Williams <cang1@live.co.uk>
Date:   Mon Jan 24 09:42:23 2022 +0000

    tty: Add support for Brainboxes UC cards.
    
    commit 152d1afa834c84530828ee031cf07a00e0fc0b8c upstream.
    
    This commit adds support for the some of the Brainboxes PCI range of
    cards, including the UC-101, UC-235/246, UC-257, UC-268, UC-275/279,
    UC-302, UC-310, UC-313, UC-320/324, UC-346, UC-357, UC-368
    and UC-420/431.
    
    Signed-off-by: Cameron Williams <cang1@live.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/AM5PR0202MB2564688493F7DD9B9C610827C45E9@AM5PR0202MB2564.eurprd02.prod.outlook.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c353403a30d242c201f026dd4e746d4c844ff599
Author: daniel.starke@siemens.com <daniel.starke@siemens.com>
Date:   Thu Jan 20 02:18:57 2022 -0800

    tty: n_gsm: fix SW flow control encoding/handling
    
    commit 8838b2af23caf1ff0610caef2795d6668a013b2d upstream.
    
    n_gsm is based on the 3GPP 07.010 and its newer version is the 3GPP 27.010.
    See https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=1516
    The changes from 07.010 to 27.010 are non-functional. Therefore, I refer to
    the newer 27.010 here. Chapter 5.2.7.3 states that DC1 (XON) and DC3 (XOFF)
    are the control characters defined in ISO/IEC 646. These shall be quoted if
    seen in the data stream to avoid interpretation as flow control characters.
    
    ISO/IEC 646 refers to the set of ISO standards described as the ISO
    7-bit coded character set for information interchange. Its final version
    is also known as ITU T.50.
    See https://www.itu.int/rec/T-REC-T.50-199209-I/en
    
    To abide the standard it is needed to quote DC1 and DC3 correctly if these
    are seen as data bytes and not as control characters. The current
    implementation already tries to enforce this but fails to catch all
    defined cases. 3GPP 27.010 chapter 5.2.7.3 clearly states that the most
    significant bit shall be ignored for DC1 and DC3 handling. The current
    implementation handles only the case with the most significant bit set 0.
    Cases in which DC1 and DC3 have the most significant bit set 1 are left
    unhandled.
    
    This patch fixes this by masking the data bytes with ISO_IEC_646_MASK (only
    the 7 least significant bits set 1) before comparing them with XON
    (a.k.a. DC1) and XOFF (a.k.a. DC3) when testing which byte values need
    quotation via byte stuffing.
    
    Fixes: e1eaea46bb40 ("tty: n_gsm line discipline")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220120101857.2509-1-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80784aa62956c0b4f47c10bd0017fb609c4a9f96
Author: Valentin Caron <valentin.caron@foss.st.com>
Date:   Tue Jan 11 17:44:41 2022 +0100

    serial: stm32: fix software flow control transfer
    
    commit 037b91ec7729524107982e36ec4b40f9b174f7a2 upstream.
    
    x_char is ignored by stm32_usart_start_tx() when xmit buffer is empty.
    
    Fix start_tx condition to allow x_char to be sent.
    
    Fixes: 48a6092fb41f ("serial: stm32-usart: Add STM32 USART Driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Erwan Le Ray <erwan.leray@foss.st.com>
    Signed-off-by: Valentin Caron <valentin.caron@foss.st.com>
    Link: https://lore.kernel.org/r/20220111164441.6178-3-valentin.caron@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f781482034ea6452fbe27dad6b820914ae0d0e84
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jan 5 16:09:57 2022 +0100

    netfilter: nft_payload: do not update layer 4 checksum when mangling fragments
    
    commit 4e1860a3863707e8177329c006d10f9e37e097a8 upstream.
    
    IP fragments do not come with the transport header, hence skip bogus
    layer 4 checksum updates.
    
    Fixes: 1814096980bb ("netfilter: nft_payload: layer 4 checksum adjustment for pseudoheader fields")
    Reported-and-tested-by: Steffen Weinreich <steve@weinreich.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2ab8958cfbfb65340877cfe45715bdd1efd2633
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jan 13 19:44:20 2022 +0100

    PM: wakeup: simplify the output logic of pm_show_wakelocks()
    
    commit c9d967b2ce40d71e968eb839f36c936b8a9cf1ea upstream.
    
    The buffer handling in pm_show_wakelocks() is tricky, and hopefully
    correct.  Ensure it really is correct by using sysfs_emit_at() which
    handles all of the tricky string handling logic in a PAGE_SIZE buffer
    for us automatically as this is a sysfs file being read from.
    
    Reviewed-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a312cbdb9045a52e5c1fec4ac7b86895f508dc76
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jan 17 18:22:13 2022 +0100

    udf: Fix NULL ptr deref when converting from inline format
    
    commit 7fc3b7c2981bbd1047916ade327beccb90994eee upstream.
    
    udf_expand_file_adinicb() calls directly ->writepage to write data
    expanded into a page. This however misses to setup inode for writeback
    properly and so we can crash on inode->i_wb dereference when submitting
    page for IO like:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000158
      #PF: supervisor read access in kernel mode
    ...
      <TASK>
      __folio_start_writeback+0x2ac/0x350
      __block_write_full_page+0x37d/0x490
      udf_expand_file_adinicb+0x255/0x400 [udf]
      udf_file_write_iter+0xbe/0x1b0 [udf]
      new_sync_write+0x125/0x1c0
      vfs_write+0x28e/0x400
    
    Fix the problem by marking the page dirty and going through the standard
    writeback path to write the page. Strictly speaking we would not even
    have to write the page but we want to catch e.g. ENOSPC errors early.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    CC: stable@vger.kernel.org
    Fixes: 52ebea749aae ("writeback: make backing_dev_info host cgroup-specific bdi_writebacks")
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fdf975173dc5acbd6e25b451bcbd558ba9d839a
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jan 18 09:57:25 2022 +0100

    udf: Restore i_lenAlloc when inode expansion fails
    
    commit ea8569194b43f0f01f0a84c689388542c7254a1f upstream.
    
    When we fail to expand inode from inline format to a normal format, we
    restore inode to contain the original inline formatting but we forgot to
    set i_lenAlloc back. The mismatch between i_lenAlloc and i_size was then
    causing further problems such as warnings and lost data down the line.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    CC: stable@vger.kernel.org
    Fixes: 7e49b6f2480c ("udf: Convert UDF to new truncate calling sequence")
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c9094d5c9d9acfd00d929f5ae25a60ee26fe54f
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Tue Jan 18 17:58:03 2022 +0100

    scsi: zfcp: Fix failed recovery on gone remote port with non-NPIV FCP devices
    
    commit 8c9db6679be4348b8aae108e11d4be2f83976e30 upstream.
    
    Suppose we have an environment with a number of non-NPIV FCP devices
    (virtual HBAs / FCP devices / zfcp "adapter"s) sharing the same physical
    FCP channel (HBA port) and its I_T nexus. Plus a number of storage target
    ports zoned to such shared channel. Now one target port logs out of the
    fabric causing an RSCN. Zfcp reacts with an ADISC ELS and subsequent port
    recovery depending on the ADISC result. This happens on all such FCP
    devices (in different Linux images) concurrently as they all receive a copy
    of this RSCN. In the following we look at one of those FCP devices.
    
    Requests other than FSF_QTCB_FCP_CMND can be slow until they get a
    response.
    
    Depending on which requests are affected by slow responses, there are
    different recovery outcomes. Here we want to fix failed recoveries on port
    or adapter level by avoiding recovery requests that can be slow.
    
    We need the cached N_Port_ID for the remote port "link" test with ADISC.
    Just before sending the ADISC, we now intentionally forget the old cached
    N_Port_ID. The idea is that on receiving an RSCN for a port, we have to
    assume that any cached information about this port is stale.  This forces a
    fresh new GID_PN [FC-GS] nameserver lookup on any subsequent recovery for
    the same port. Since we typically can still communicate with the nameserver
    efficiently, we now reach steady state quicker: Either the nameserver still
    does not know about the port so we stop recovery, or the nameserver already
    knows the port potentially with a new N_Port_ID and we can successfully and
    quickly perform open port recovery.  For the one case, where ADISC returns
    successfully, we re-initialize port->d_id because that case does not
    involve any port recovery.
    
    This also solves a problem if the storage WWPN quickly logs into the fabric
    again but with a different N_Port_ID. Such as on virtual WWPN takeover
    during target NPIV failover.
    [https://www.redbooks.ibm.com/abstracts/redp5477.html] In that case the
    RSCN from the storage FDISC was ignored by zfcp and we could not
    successfully recover the failover. On some later failback on the storage,
    we could have been lucky if the virtual WWPN got the same old N_Port_ID
    from the SAN switch as we still had cached.  Then the related RSCN
    triggered a successful port reopen recovery.  However, there is no
    guarantee to get the same N_Port_ID on NPIV FDISC.
    
    Even though NPIV-enabled FCP devices are not affected by this problem, this
    code change optimizes recovery time for gone remote ports as a side effect.
    The timely drop of cached N_Port_IDs prevents unnecessary slow open port
    attempts.
    
    While the problem might have been in code before v2.6.32 commit
    799b76d09aee ("[SCSI] zfcp: Decouple gid_pn requests from erp") this fix
    depends on the gid_pn_work introduced with that commit, so we mark it as
    culprit to satisfy fix dependencies.
    
    Note: Point-to-point remote port is already handled separately and gets its
    N_Port_ID from the cached peer_d_id. So resetting port->d_id in general
    does not affect PtP.
    
    Link: https://lore.kernel.org/r/20220118165803.3667947-1-maier@linux.ibm.com
    Fixes: 799b76d09aee ("[SCSI] zfcp: Decouple gid_pn requests from erp")
    Cc: <stable@vger.kernel.org> #2.6.32+
    Suggested-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3f1adb203a04343e41171feeda34da1fb58768b
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Jan 20 16:23:19 2022 +0100

    s390/hypfs: include z/VM guests with access control group set
    
    commit 663d34c8df98740f1e90241e78e456d00b3c6cad upstream.
    
    Currently if z/VM guest is allowed to retrieve hypervisor performance
    data globally for all guests (privilege class B) the query is formed in a
    way to include all guests but the group name is left empty. This leads to
    that z/VM guests which have access control group set not being included
    in the results (even local vm).
    
    Change the query group identifier from empty to "any" to retrieve
    information about all guests from any groups (or without a group set).
    
    Cc: stable@vger.kernel.org
    Fixes: 31cb4bd31a48 ("[S390] Hypervisor filesystem (s390_hypfs) for z/VM")
    Reviewed-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a539c08d743d9910631448da78af5e961664c0e
Author: Brian Gix <brian.gix@intel.com>
Date:   Wed Nov 24 12:16:28 2021 -0800

    Bluetooth: refactor malicious adv data check
    
    commit 899663be5e75dc0174dc8bda0b5e6826edf0b29a upstream.
    
    Check for out-of-bound read was being performed at the end of while
    num_reports loop, and would fill journal with false positives. Added
    check to beginning of loop processing so that it doesn't get checked
    after ptr has been advanced.
    
    Signed-off-by: Brian Gix <brian.gix@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: syphyr <syphyr@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
