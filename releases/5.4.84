commit 8a866bdbbac227a99b0b37e03679908642f58aec
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 16 10:56:59 2020 +0100

    Linux 5.4.84
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201214172543.302523401@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2c5dc84ac51da90cadcb12554c69bdd5ac7aeeb
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Fri Nov 13 22:51:59 2020 -0800

    compiler.h: fix barrier_data() on clang
    
    commit 3347acc6fcd4ee71ad18a9ff9d9dac176b517329 upstream.
    
    Commit 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h
    mutually exclusive") neglected to copy barrier_data() from
    compiler-gcc.h into compiler-clang.h.
    
    The definition in compiler-gcc.h was really to work around clang's more
    aggressive optimization, so this broke barrier_data() on clang, and
    consequently memzero_explicit() as well.
    
    For example, this results in at least the memzero_explicit() call in
    lib/crypto/sha256.c:sha256_transform() being optimized away by clang.
    
    Fix this by moving the definition of barrier_data() into compiler.h.
    
    Also move the gcc/clang definition of barrier() into compiler.h,
    __memory_barrier() is icc-specific (and barrier() is already defined
    using it in compiler-intel.h) and doesn't belong in compiler.h.
    
    [rdunlap@infradead.org: fix ALPHA builds when SMP is not enabled]
    
    Link: https://lkml.kernel.org/r/20201101231835.4589-1-rdunlap@infradead.org
    Fixes: 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h mutually exclusive")
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201014212631.207844-1-nivedita@alum.mit.edu
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [nd: backport to account for missing
      commit e506ea451254a ("compiler.h: Split {READ,WRITE}_ONCE definitions out into rwonce.h")
      commit d08b9f0ca6605 ("scs: Add support for Clang's Shadow Call Stack (SCS)")]
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69dc72f058c9b98f9b66bed184cfab7c2e9f49b0
Author: Minchan Kim <minchan@kernel.org>
Date:   Sat Dec 5 22:14:51 2020 -0800

    mm/zsmalloc.c: drop ZSMALLOC_PGTABLE_MAPPING
    
    commit e91d8d78237de8d7120c320b3645b7100848f24d upstream.
    
    While I was doing zram testing, I found sometimes decompression failed
    since the compression buffer was corrupted.  With investigation, I found
    below commit calls cond_resched unconditionally so it could make a
    problem in atomic context if the task is reschedule.
    
      BUG: sleeping function called from invalid context at mm/vmalloc.c:108
      in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 946, name: memhog
      3 locks held by memhog/946:
       #0: ffff9d01d4b193e8 (&mm->mmap_lock#2){++++}-{4:4}, at: __mm_populate+0x103/0x160
       #1: ffffffffa3d53de0 (fs_reclaim){+.+.}-{0:0}, at: __alloc_pages_slowpath.constprop.0+0xa98/0x1160
       #2: ffff9d01d56b8110 (&zspage->lock){.+.+}-{3:3}, at: zs_map_object+0x8e/0x1f0
      CPU: 0 PID: 946 Comm: memhog Not tainted 5.9.3-00011-gc5bfc0287345-dirty #316
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1 04/01/2014
      Call Trace:
        unmap_kernel_range_noflush+0x2eb/0x350
        unmap_kernel_range+0x14/0x30
        zs_unmap_object+0xd5/0xe0
        zram_bvec_rw.isra.0+0x38c/0x8e0
        zram_rw_page+0x90/0x101
        bdev_write_page+0x92/0xe0
        __swap_writepage+0x94/0x4a0
        pageout+0xe3/0x3a0
        shrink_page_list+0xb94/0xd60
        shrink_inactive_list+0x158/0x460
    
    We can fix this by removing the ZSMALLOC_PGTABLE_MAPPING feature (which
    contains the offending calling code) from zsmalloc.
    
    Even though this option showed some amount improvement(e.g., 30%) in
    some arm32 platforms, it has been headache to maintain since it have
    abused APIs[1](e.g., unmap_kernel_range in atomic context).
    
    Since we are approaching to deprecate 32bit machines and already made
    the config option available for only builtin build since v5.8, lastly it
    has been not default option in zsmalloc, it's time to drop the option
    for better maintenance.
    
    [1] http://lore.kernel.org/linux-mm/20201105170249.387069-1-minchan@kernel.org
    
    Fixes: e47110e90584 ("mm/vunmap: add cond_resched() in vunmap_pmd_range")
    Signed-off-by: Minchan Kim <minchan@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Harish Sriram <harish@linux.ibm.com>
    Cc: Uladzislau Rezki <urezki@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201117202916.GA3856507@google.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3349f1e4cf6d3fd84e6ef55cea5d615d0bd8032c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 10 21:18:22 2020 +0100

    x86/apic/vector: Fix ordering in vector assignment
    
    commit 190113b4c6531c8e09b31d5235f9b5175cbb0f72 upstream.
    
    Prarit reported that depending on the affinity setting the
    
     ' irq $N: Affinity broken due to vector space exhaustion.'
    
    message is showing up in dmesg, but the vector space on the CPUs in the
    affinity mask is definitely not exhausted.
    
    Shung-Hsi provided traces and analysis which pinpoints the problem:
    
    The ordering of trying to assign an interrupt vector in
    assign_irq_vector_any_locked() is simply wrong if the interrupt data has a
    valid node assigned. It does:
    
     1) Try the intersection of affinity mask and node mask
     2) Try the node mask
     3) Try the full affinity mask
     4) Try the full online mask
    
    Obviously #2 and #3 are in the wrong order as the requested affinity
    mask has to take precedence.
    
    In the observed cases #1 failed because the affinity mask did not contain
    CPUs from node 0. That made it allocate a vector from node 0, thereby
    breaking affinity and emitting the misleading message.
    
    Revert the order of #2 and #3 so the full affinity mask without the node
    intersection is tried before actually affinity is broken.
    
    If no node is assigned then only the full affinity mask and if that fails
    the full online mask is tried.
    
    Fixes: d6ffc6ac83b1 ("x86/vector: Respect affinity mask in irq descriptor")
    Reported-by: Prarit Bhargava <prarit@redhat.com>
    Reported-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87ft4djtyp.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3c1d51868f33ea4979ec8f61fc183a5ebfa8a7a
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Dec 3 21:07:03 2020 -0800

    x86/membarrier: Get rid of a dubious optimization
    
    commit a493d1ca1a03b532871f1da27f8dbda2b28b04c4 upstream.
    
    sync_core_before_usermode() had an incorrect optimization.  If the kernel
    returns from an interrupt, it can get to usermode without IRET. It just has
    to schedule to a different task in the same mm and do SYSRET.  Fortunately,
    there were no callers of sync_core_before_usermode() that could have had
    in_irq() or in_nmi() equal to true, because it's only ever called from the
    scheduler.
    
    While at it, clarify a related comment.
    
    Fixes: 70216e18e519 ("membarrier: Provide core serializing command, *_SYNC_CORE")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/5afc7632be1422f91eaf7611aaaa1b5b8580a086.1607058304.git.luto@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6346ed69bc7c84161c07875bf3e0f5523b4bca8d
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Wed Nov 11 11:09:45 2020 -0500

    x86/mm/mem_encrypt: Fix definition of PMD_FLAGS_DEC_WP
    
    commit 29ac40cbed2bc06fa218ca25d7f5e280d3d08a25 upstream.
    
    The PAT bit is in different locations for 4k and 2M/1G page table
    entries.
    
    Add a definition for _PAGE_LARGE_CACHE_MASK to represent the three
    caching bits (PWT, PCD, PAT), similar to _PAGE_CACHE_MASK for 4k pages,
    and use it in the definition of PMD_FLAGS_DEC_WP to get the correct PAT
    index for write-protected pages.
    
    Fixes: 6ebcb060713f ("x86/mm: Add support to encrypt the kernel in-place")
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20201111160946.147341-1-nivedita@alum.mit.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258d646f006b1f5ab1b43b6eefefd0b5648fa89a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Dec 3 15:18:26 2020 +0300

    scsi: be2iscsi: Revert "Fix a theoretical leak in beiscsi_create_eqs()"
    
    commit eeaf06af6f87e1dba371fbe42674e6f963220b9c upstream.
    
    My patch caused kernel Oopses and delays in boot.  Revert it.
    
    The problem was that I moved the "mem->dma = paddr;" before the call to
    be_fill_queue().  But the first thing that the be_fill_queue() function
    does is memset the whole struct to zero which overwrites the assignment.
    
    Link: https://lore.kernel.org/r/X8jXkt6eThjyVP1v@mwanda
    Fixes: 38b2db564d9a ("scsi: be2iscsi: Fix a theoretical leak in beiscsi_create_eqs()")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d5fc53439a1adc8b4b57b49bbce7cc2e9bb0919
Author: Miles Chen <miles.chen@mediatek.com>
Date:   Fri Dec 11 13:36:31 2020 -0800

    proc: use untagged_addr() for pagemap_read addresses
    
    commit 40d6366e9d86d9a67b5642040e76082fdb5bdcf9 upstream.
    
    When we try to visit the pagemap of a tagged userspace pointer, we find
    that the start_vaddr is not correct because of the tag.
    To fix it, we should untag the userspace pointers in pagemap_read().
    
    I tested with 5.10-rc4 and the issue remains.
    
    Explanation from Catalin in [1]:
    
     "Arguably, that's a user-space bug since tagged file offsets were never
      supported. In this case it's not even a tag at bit 56 as per the arm64
      tagged address ABI but rather down to bit 47. You could say that the
      problem is caused by the C library (malloc()) or whoever created the
      tagged vaddr and passed it to this function. It's not a kernel
      regression as we've never supported it.
    
      Now, pagemap is a special case where the offset is usually not
      generated as a classic file offset but rather derived by shifting a
      user virtual address. I guess we can make a concession for pagemap
      (only) and allow such offset with the tag at bit (56 - PAGE_SHIFT + 3)"
    
    My test code is based on [2]:
    
    A userspace pointer which has been tagged by 0xb4: 0xb400007662f541c8
    
    userspace program:
    
      uint64 OsLayer::VirtualToPhysical(void *vaddr) {
            uint64 frame, paddr, pfnmask, pagemask;
            int pagesize = sysconf(_SC_PAGESIZE);
            off64_t off = ((uintptr_t)vaddr) / pagesize * 8; // off = 0xb400007662f541c8 / pagesize * 8 = 0x5a00003b317aa0
            int fd = open(kPagemapPath, O_RDONLY);
            ...
    
            if (lseek64(fd, off, SEEK_SET) != off || read(fd, &frame, 8) != 8) {
                    int err = errno;
                    string errtxt = ErrorString(err);
                    if (fd >= 0)
                            close(fd);
                    return 0;
            }
      ...
      }
    
    kernel fs/proc/task_mmu.c:
    
      static ssize_t pagemap_read(struct file *file, char __user *buf,
                    size_t count, loff_t *ppos)
      {
            ...
            src = *ppos;
            svpfn = src / PM_ENTRY_BYTES; // svpfn == 0xb400007662f54
            start_vaddr = svpfn << PAGE_SHIFT; // start_vaddr == 0xb400007662f54000
            end_vaddr = mm->task_size;
    
            /* watch out for wraparound */
            // svpfn == 0xb400007662f54
            // (mm->task_size >> PAGE) == 0x8000000
            if (svpfn > mm->task_size >> PAGE_SHIFT) // the condition is true because of the tag 0xb4
                    start_vaddr = end_vaddr;
    
            ret = 0;
            while (count && (start_vaddr < end_vaddr)) { // we cannot visit correct entry because start_vaddr is set to end_vaddr
                    int len;
                    unsigned long end;
                    ...
            }
            ...
      }
    
    [1] https://lore.kernel.org/patchwork/patch/1343258/
    [2] https://github.com/stressapptest/stressapptest/blob/master/src/os.cc#L158
    
    Link: https://lkml.kernel.org/r/20201204024347.8295-1-miles.chen@mediatek.com
    Signed-off-by: Miles Chen <miles.chen@mediatek.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Marco Elver <elver@google.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Song Bao Hua (Barry Song) <song.bao.hua@hisilicon.com>
    Cc: <stable@vger.kernel.org>    [5.4-]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6472d3ae6ef5831e9db6df63257019ac5edcec76
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Dec 11 13:36:38 2020 -0800

    kbuild: avoid static_assert for genksyms
    
    commit 14dc3983b5dff513a90bd5a8cc90acaf7867c3d0 upstream.
    
    genksyms does not know or care about the _Static_assert() built-in, and
    sometimes falls back to ignoring the later symbols, which causes
    undefined behavior such as
    
      WARNING: modpost: EXPORT symbol "ethtool_set_ethtool_phy_ops" [vmlinux] version generation failed, symbol will not be versioned.
      ld: net/ethtool/common.o: relocation R_AARCH64_ABS32 against `__crc_ethtool_set_ethtool_phy_ops' can not be used when making a shared object
      net/ethtool/common.o:(_ftrace_annotated_branch+0x0): dangerous relocation: unsupported relocation
    
    Redefine static_assert for genksyms to avoid that.
    
    Link: https://lkml.kernel.org/r/20201203230955.1482058-1-arnd@kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Michal Marek <michal.lkml@markovi.net>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Rikard Falkeborn <rikard.falkeborn@gmail.com>
    Cc: Marco Elver <elver@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cd7084a2a032c91ce4f282d28c7a526e2deebad
Author: Manasi Navare <manasi.d.navare@intel.com>
Date:   Fri Dec 4 12:58:04 2020 -0800

    drm/i915/display/dp: Compute the correct slice count for VDSC on DP
    
    commit f6cbe49be65ed800863ac5ba695555057363f9c2 upstream.
    
    This patch fixes the slice count computation algorithm
    for calculating the slice count based on Peak pixel rate
    and the max slice width allowed on the DSC engines.
    We need to ensure slice count > min slice count req
    as per DP spec based on peak pixel rate and that it is
    greater than min slice count based on the max slice width
    advertised by DPCD. So use max of these two.
    In the prev patch we were using min of these 2 causing it
    to violate the max slice width limitation causing a blank
    screen on 8K@60.
    
    Fixes: d9218c8f6cf4 ("drm/i915/dp: Add helpers for Compressed BPP and Slice Count for DSC")
    Cc: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: <stable@vger.kernel.org> # v5.0+
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201204205804.25225-1-manasi.d.navare@intel.com
    (cherry picked from commit d371d6ea92ad2a47f42bbcaa786ee5f6069c9c14)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60c1c68fae5ed1fc74707f5820062bb134ccff43
Author: Bean Huo <beanhuo@micron.com>
Date:   Wed Dec 2 21:23:20 2020 +0100

    mmc: block: Fixup condition for CMD13 polling for RPMB requests
    
    commit 6246d7c9d15aaff0bc3863f67900c6a6e6be921b upstream.
    
    The CMD13 polling is needed for commands with R1B responses. In commit
    a0d4c7eb71dd ("mmc: block: Add CMD13 polling for MMC IOCTLS with R1B
    response"), the intent was to introduce this for requests targeted to the
    RPMB partition. However, the condition to trigger the polling loop became
    wrong, leading to unnecessary polling. Let's fix the condition to avoid
    this.
    
    Fixes: a0d4c7eb71dd ("mmc: block: Add CMD13 polling for MMC IOCTLS with R1B response")
    Cc: stable@vger.kernel.org
    Reported-by: Zhan Liu <zliua@micron.com>
    Signed-off-by: Zhan Liu <zliua@micron.com>
    Signed-off-by: Bean Huo <beanhuo@micron.com>
    Link: https://lore.kernel.org/r/20201202202320.22165-1-huobean@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 974aa59837edcf457d6abce04500fd832e9a32cb
Author: Coiby Xu <coiby.xu@gmail.com>
Date:   Wed Nov 25 21:03:19 2020 +0800

    pinctrl: amd: remove debounce filter setting in IRQ type setting
    
    commit 47a0001436352c9853d72bf2071e85b316d688a2 upstream.
    
    Debounce filter setting should be independent from IRQ type setting
    because according to the ACPI specs, there are separate arguments for
    specifying debounce timeout and IRQ type in GpioIo() and GpioInt().
    
    Together with commit 06abe8291bc31839950f7d0362d9979edc88a666
    ("pinctrl: amd: fix incorrect way to disable debounce filter") and
    Andy's patch "gpiolib: acpi: Take into account debounce settings" [1],
    this will fix broken touchpads for laptops whose BIOS set the
    debounce timeout to a relatively large value. For example, the BIOS
    of Lenovo AMD gaming laptops including Legion-5 15ARH05 (R7000),
    Legion-5P (R7000P) and IdeaPad Gaming 3 15ARH05, set the debounce
    timeout to 124.8ms. This led to the kernel receiving only ~7 HID
    reports per second from the Synaptics touchpad
    (MSFT0001:00 06CB:7F28).
    
    Existing touchpads like [2][3] are not troubled by this bug because
    the debounce timeout has been set to 0 by the BIOS before enabling
    the debounce filter in setting IRQ type.
    
    [1] https://lore.kernel.org/linux-gpio/20201111222008.39993-11-andriy.shevchenko@linux.intel.com/
        8dcb7a15a585 ("gpiolib: acpi: Take into account debounce settings")
    [2] https://github.com/Syniurge/i2c-amd-mp2/issues/11#issuecomment-721331582
    [3] https://forum.manjaro.org/t/random-short-touchpad-freezes/30832/28
    
    Signed-off-by: Coiby Xu <coiby.xu@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-gpio/CAHp75VcwiGREBUJ0A06EEw-SyabqYsp%2Bdqs2DpSrhaY-2GVdAA%40mail.gmail.com/
    BugLink: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1887190
    Link: https://lore.kernel.org/r/20201125130320.311059-1-coiby.xu@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 457f5289b7e712ea1ae431574d8f7bf21f4e8eca
Author: Chris Chiu <chiu@endlessos.org>
Date:   Wed Dec 9 20:24:47 2020 -0800

    Input: i8042 - add Acer laptops to the i8042 reset list
    
    commit ce6520b0eafad5962ffc21dc47cd7bd3250e9045 upstream.
    
    The touchpad operates in Basic Mode by default in the Acer BIOS
    setup, but some Aspire/TravelMate models require the i8042 to be
    reset in order to be correctly detected.
    
    Signed-off-by: Chris Chiu <chiu@endlessos.org>
    Link: https://lore.kernel.org/r/20201207071250.15021-1-chiu@endlessos.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf596f3906e93e490affe783041cb7179e144005
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Dec 9 20:13:24 2020 -0800

    Input: cm109 - do not stomp on control URB
    
    commit 82e06090473289ce63e23fdeb8737aad59b10645 upstream.
    
    We need to make sure we are not stomping on the control URB that was
    issued when opening the device when attempting to toggle buzzer.
    To do that we need to mark it as pending in cm109_open().
    
    Reported-and-tested-by: syzbot+150f793ac5bc18eee150@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2d113aca34f95f87dae00e4170659ed01528eb2
Author: Libo Chen <libo.chen@oracle.com>
Date:   Fri Nov 20 18:12:43 2020 -0800

    ktest.pl: Fix incorrect reboot for grub2bls
    
    commit 271e0c9dce1b02a825b3cc1a7aa1fab7c381d44b upstream.
    
    This issue was first noticed when I was testing different kernels on
    Oracle Linux 8 which as Fedora 30+ adopts BLS as default. Even though a
    kernel entry was added successfully and the index of that kernel entry was
    retrieved correctly, ktest still wouldn't reboot the system into
    user-specified kernel.
    
    The bug was spotted in subroutine reboot_to where the if-statement never
    checks for REBOOT_TYPE "grub2bls", therefore the desired entry will not be
    set for the next boot.
    
    Add a check for "grub2bls" so that $grub_reboot $grub_number can
    be run before a reboot if REBOOT_TYPE is "grub2bls" then we can boot to
    the correct kernel.
    
    Link: https://lkml.kernel.org/r/20201121021243.1532477-1-libo.chen@oracle.com
    
    Cc: stable@vger.kernel.org
    Fixes: ac2466456eaa ("ktest: introduce grub2bls REBOOT_TYPE option")
    Signed-off-by: Libo Chen <libo.chen@oracle.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 181088e37b1dc51c5d880d83da8b9530cd5748e0
Author: Pankaj Sharma <pankj.sharma@samsung.com>
Date:   Thu Nov 26 10:21:42 2020 +0530

    can: m_can: m_can_dev_setup(): add support for bosch mcan version 3.3.0
    
    [ Upstream commit 5c7d55bded77da6db7c5d249610e3a2eed730b3c ]
    
    Add support for mcan bit timing and control mode according to bosch mcan IP
    version 3.3.0. The mcan version read from the Core Release field of CREL
    register would be 33. Accordingly the properties are to be set for mcan v3.3.0
    
    Signed-off-by: Pankaj Sharma <pankj.sharma@samsung.com>
    Link: https://lore.kernel.org/r/1606366302-5520-1-git-send-email-pankj.sharma@samsung.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38b1dbc1229cf66a7df007591cf91e2e68e55b35
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Nov 24 12:04:54 2020 +0100

    platform/x86: touchscreen_dmi: Add info for the Irbis TW118 tablet
    
    [ Upstream commit c9aa128080cbce92f8715a9328f88d8ca3134279 ]
    
    Add touchscreen info for the Irbis TW118 tablet.
    
    Reported-and-tested-by: russianneuromancer <russianneuromancer@ya.ru>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201124110454.114286-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fa99f6f8f600f36085a2c0c0292a2973696e3a4
Author: Max Verevkin <me@maxverevkin.tk>
Date:   Tue Nov 24 15:16:52 2020 +0200

    platform/x86: intel-vbtn: Support for tablet mode on HP Pavilion 13 x360 PC
    
    [ Upstream commit 8b205d3e1bf52ab31cdd5c55f87c87a227793d84 ]
    
    The Pavilion 13 x360 PC has a chassis-type which does not indicate it is
    a convertible, while it is actually a convertible. Add it to the
    dmi_switches_allow_list.
    
    Signed-off-by: Max Verevkin <me@maxverevkin.tk>
    Link: https://lore.kernel.org/r/20201124131652.11165-1-me@maxverevkin.tk
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21aa2d1f2bfb8386cc3364836e879b43579531dd
Author: Timo Witte <timo.witte@gmail.com>
Date:   Tue Aug 4 02:14:23 2020 +0200

    platform/x86: acer-wmi: add automatic keyboard background light toggle key as KEY_LIGHTS_TOGGLE
    
    [ Upstream commit 9e7a005ad56aa7d6ea5830c5ffcc60bf35de380b ]
    
    Got a dmesg message on my AMD Renoir based Acer laptop:
    "acer_wmi: Unknown key number - 0x84" when toggling keyboard
    background light
    
    Signed-off-by: Timo Witte <timo.witte@gmail.com>
    Reviewed-by: "Lee, Chun-Yi" <jlee@suse.com>
    Link: https://lore.kernel.org/r/20200804001423.36778-1-timo.witte@gmail.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 010e6e816f5486d4fe62f76686358e29a57da50e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 9 11:35:50 2020 +0100

    platform/x86: thinkpad_acpi: Add BAT1 is primary battery quirk for Thinkpad Yoga 11e 4th gen
    
    [ Upstream commit c986a7024916c92a775fc8d853fba3cae1d5fde4 ]
    
    The Thinkpad Yoga 11e 4th gen with the N3450 / Celeron CPU only has
    one battery which is named BAT1 instead of the expected BAT0, add a
    quirk for this. This fixes not being able to set the charging tresholds
    on this model; and this alsoe fixes the following errors in dmesg:
    
    ACPI: \_SB_.PCI0.LPCB.EC__.HKEY: BCTG evaluated but flagged as error
    thinkpad_acpi: Error probing battery 2
    battery: extension failed to load: ThinkPad Battery Extension
    battery: extension unregistered: ThinkPad Battery Extension
    
    Note that the added quirk is for the "R0K" BIOS versions which are
    used on the Thinkpad Yoga 11e 4th gen's with a Celeron CPU, there
    is a separate "R0L" BIOS for the i3/i5 based versions. This may also
    need the same quirk, but if that really is necessary is unknown.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201109103550.16265-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4778a11e0500cc9519ae59cefaa6df81de9e1f22
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Nov 6 15:01:30 2020 +0100

    platform/x86: thinkpad_acpi: Do not report SW_TABLET_MODE on Yoga 11e
    
    [ Upstream commit f2eae1888cf22590c38764b8fa3c989c0283870e ]
    
    The Yoga 11e series has 2 accelerometers described by a BOSC0200 ACPI node.
    This setup relies on a Windows service which reads both accelerometers and
    then calculates the angle between the 2 halves to determine laptop / tent /
    tablet mode and then reports the calculated mode back to the EC by calling
    special ACPI methods on the BOSC0200 node.
    
    The bmc150 iio driver does not support this (it involves double
    calculations requiring sqrt and arccos so this really needs to be done
    in userspace), as a result of this on the Yoga 11e the thinkpad_acpi
    code always reports SW_TABLET_MODE=0, starting with GNOME 3.38 reporting
    SW_TABLET_MODE=0 causes GNOME to:
    
    1. Not show the onscreen keyboard when a text-input field is focussed
       with the touchscreen.
    2. Disable accelerometer based auto display-rotation.
    
    This makes sense when in laptop-mode but not when in tablet-mode. But
    since for the Yoga 11e the thinkpad_acpi code always reports
    SW_TABLET_MODE=0, GNOME does not know when the device is in tablet-mode.
    
    Stop reporting the broken (always 0) SW_TABLET_MODE on Yoga 11e models
    to fix this.
    
    Note there are plans for userspace to support 360 degree hinges style
    2-in-1s with 2 accelerometers and figure out the mode by itself, see:
    https://gitlab.freedesktop.org/hadess/iio-sensor-proxy/-/issues/216
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201106140130.46820-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb5e28ffe39aca586e18f6f7232e9486f7aecddb
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Mon Nov 16 16:20:26 2020 +0000

    arm64: tegra: Disable the ACONNECT for Jetson TX2
    
    [ Upstream commit fb319496935b7475a863a00c76895e8bb3216704 ]
    
    Commit ff4c371d2bc0 ("arm64: defconfig: Build ADMA and ACONNECT driver")
    enable the Tegra ADMA and ACONNECT drivers and this is causing resume
    from system suspend to fail on Jetson TX2. Resume is failing because the
    ACONNECT driver is being resumed before the BPMP driver, and the ACONNECT
    driver is attempting to power on a power-domain that is provided by the
    BPMP. While a proper fix for the resume sequencing problem is identified,
    disable the ACONNECT for Jetson TX2 temporarily to avoid breaking system
    suspend.
    
    Please note that ACONNECT driver is used by the Audio Processing Engine
    (APE) on Tegra, but because there is no mainline support for APE on
    Jetson TX2 currently, disabling the ACONNECT does not disable any useful
    feature at the moment.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7e271337402c995c4cc8c81a95ac37c90ac41c7
Author: Hao Si <si.hao@zte.com.cn>
Date:   Tue Oct 20 10:18:32 2020 +0800

    soc: fsl: dpio: Get the cpumask through cpumask_of(cpu)
    
    [ Upstream commit 2663b3388551230cbc4606a40fabf3331ceb59e4 ]
    
    The local variable 'cpumask_t mask' is in the stack memory, and its address
    is assigned to 'desc->affinity' in 'irq_set_affinity_hint()'.
    But the memory area where this variable is located is at risk of being
    modified.
    
    During LTP testing, the following error was generated:
    
    Unable to handle kernel paging request at virtual address ffff000012e9b790
    Mem abort info:
      ESR = 0x96000007
      Exception class = DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
    Data abort info:
      ISV = 0, ISS = 0x00000007
      CM = 0, WnR = 0
    swapper pgtable: 4k pages, 48-bit VAs, pgdp = 0000000075ac5e07
    [ffff000012e9b790] pgd=00000027dbffe003, pud=00000027dbffd003,
    pmd=00000027b6d61003, pte=0000000000000000
    Internal error: Oops: 96000007 [#1] PREEMPT SMP
    Modules linked in: xt_conntrack
    Process read_all (pid: 20171, stack limit = 0x0000000044ea4095)
    CPU: 14 PID: 20171 Comm: read_all Tainted: G    B   W
    Hardware name: NXP Layerscape LX2160ARDB (DT)
    pstate: 80000085 (Nzcv daIf -PAN -UAO)
    pc : irq_affinity_hint_proc_show+0x54/0xb0
    lr : irq_affinity_hint_proc_show+0x4c/0xb0
    sp : ffff00001138bc10
    x29: ffff00001138bc10 x28: 0000ffffd131d1e0
    x27: 00000000007000c0 x26: ffff8025b9480dc0
    x25: ffff8025b9480da8 x24: 00000000000003ff
    x23: ffff8027334f8300 x22: ffff80272e97d000
    x21: ffff80272e97d0b0 x20: ffff8025b9480d80
    x19: ffff000009a49000 x18: 0000000000000000
    x17: 0000000000000000 x16: 0000000000000000
    x15: 0000000000000000 x14: 0000000000000000
    x13: 0000000000000000 x12: 0000000000000040
    x11: 0000000000000000 x10: ffff802735b79b88
    x9 : 0000000000000000 x8 : 0000000000000000
    x7 : ffff000009a49848 x6 : 0000000000000003
    x5 : 0000000000000000 x4 : ffff000008157d6c
    x3 : ffff00001138bc10 x2 : ffff000012e9b790
    x1 : 0000000000000000 x0 : 0000000000000000
    Call trace:
     irq_affinity_hint_proc_show+0x54/0xb0
     seq_read+0x1b0/0x440
     proc_reg_read+0x80/0xd8
     __vfs_read+0x60/0x178
     vfs_read+0x94/0x150
     ksys_read+0x74/0xf0
     __arm64_sys_read+0x24/0x30
     el0_svc_common.constprop.0+0xd8/0x1a0
     el0_svc_handler+0x34/0x88
     el0_svc+0x10/0x14
    Code: f9001bbf 943e0732 f94066c2 b4000062 (f9400041)
    ---[ end trace b495bdcb0b3b732b ]---
    Kernel panic - not syncing: Fatal exception
    SMP: stopping secondary CPUs
    SMP: failed to stop secondary CPUs 0,2-4,6,8,11,13-15
    Kernel Offset: disabled
    CPU features: 0x0,21006008
    Memory Limit: none
    ---[ end Kernel panic - not syncing: Fatal exception ]---
    
    Fix it by using 'cpumask_of(cpu)' to get the cpumask.
    
    Signed-off-by: Hao Si <si.hao@zte.com.cn>
    Signed-off-by: Lin Chen <chen.lin5@zte.com.cn>
    Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37aa8318ed437000c1b046e663407a138ed47a2c
Author: Ran Wang <ran.wang_1@nxp.com>
Date:   Mon Nov 23 10:57:15 2020 +0800

    spi: spi-nxp-fspi: fix fspi panic by unexpected interrupts
    
    [ Upstream commit 71d80563b0760a411cd90a3680536f5d887fff6b ]
    
    Given the case that bootloader(such as UEFI)'s FSPI driver might not
    handle all interrupts before loading kernel, those legacy interrupts
    would assert immidiately once kernel's FSPI driver enable them. Further,
    if it was FSPI_INTR_IPCMDDONE, the irq handler nxp_fspi_irq_handler()
    would call complete(&f->c) to notify others. However, f->c might not be
    initialized yet at that time, then cause kernel panic.
    
    Of cause, we should fix this issue within bootloader. But it would be
    better to have this pacth to make dirver more robust (by clearing all
    interrupt status bits before enabling interrupts).
    
    Suggested-by: Han Xu <han.xu@nxp.com>
    Signed-off-by: Ran Wang <ran.wang_1@nxp.com>
    Link: https://lore.kernel.org/r/20201123025715.14635-1-ran.wang_1@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 864fbeab8c99ac195098993cb2b6f17a51b0dd54
Author: Xu Qiang <xuqiang36@huawei.com>
Date:   Sat Nov 7 10:42:26 2020 +0000

    irqchip/gic-v3-its: Unconditionally save/restore the ITS state on suspend
    
    [ Upstream commit 74cde1a53368aed4f2b4b54bf7030437f64a534b ]
    
    On systems without HW-based collections (i.e. anything except GIC-500),
    we rely on firmware to perform the ITS save/restore. This doesn't
    really work, as although FW can properly save everything, it cannot
    fully restore the state of the command queue (the read-side is reset
    to the head of the queue). This results in the ITS consuming previously
    processed commands, potentially corrupting the state.
    
    Instead, let's always save the ITS state on suspend, disabling it in the
    process, and restore the full state on resume. This saves us from broken
    FW as long as it doesn't enable the ITS by itself (for which we can't do
    anything).
    
    This amounts to simply dropping the ITS_FLAGS_SAVE_SUSPEND_STATE.
    
    Signed-off-by: Xu Qiang <xuqiang36@huawei.com>
    [maz: added warning on resume, rewrote commit message]
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201107104226.14282-1-xuqiang36@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47fac0ccf775d7218bd9b165f1ecd26df182f290
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Fri Nov 20 16:40:13 2020 -0600

    ibmvnic: skip tx timeout reset while in resetting
    
    [ Upstream commit 855a631a4c11458a9cef1ab79c1530436aa95fae ]
    
    Sometimes it takes longer than 5 seconds (watchdog timeout) to complete
    failover, migration, and other resets. In stead of scheduling another
    timeout reset, we wait for the current one to complete.
    
    Suggested-by: Brian King <brking@linux.vnet.ibm.com>
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Reviewed-by: Dany Madden <drt@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0450df6d0f77ac781cbd10e29e55d1162c6bd9b
Author: Georgi Djakov <georgi.djakov@linaro.org>
Date:   Wed Nov 18 13:10:44 2020 +0200

    interconnect: qcom: qcs404: Remove GPU and display RPM IDs
    
    [ Upstream commit 7ab1e9117607485df977bb6e271be5c5ad649a4c ]
    
    The following errors are noticed during boot on a QCS404 board:
    [    2.926647] qcom_icc_rpm_smd_send mas 6 error -6
    [    2.934573] qcom_icc_rpm_smd_send mas 8 error -6
    
    These errors show when we try to configure the GPU and display nodes.
    Since these particular nodes aren't supported on RPM and are purely
    local, we should just change their mas_rpm_id to -1 to avoid any
    requests being sent for these master IDs.
    
    Reviewed-by: Mike Tipton <mdtipton@codeaurora.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20201118111044.26056-1-georgi.djakov@linaro.org
    Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adad2bc9f303c8a6cab94a4766d436d66e812a54
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    [ Upstream commit 73cc291c270248567245f084dcdf5078069af6b5 ]
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b184e9800867917bd9e0837a4d2385c061f014e3
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Nov 6 16:59:27 2020 -0800

    ARC: stack unwinding: don't assume non-current task is sleeping
    
    [ Upstream commit e42404fa10fd11fe72d0a0e149a321d10e577715 ]
    
    To start stack unwinding (SP, PC and BLINK) are needed. When the
    explicit execution context (pt_regs etc) is not available, unwinder
    assumes the task is sleeping (in __switch_to()) and fetches SP and BLINK
    from kernel mode stack.
    
    But this assumption is not true, specially in a SMP system, when top
    runs on 1 core, there may be active running processes on all cores.
    
    So when unwinding non courrent tasks, ensure they are NOT running.
    
    And while at it, handle the self unwinding case explicitly.
    
    This came out of investigation of a customer reported hang with
    rcutorture+top
    
    Link: https://github.com/foss-for-synopsys-dwc-arc-processors/linux/issues/31
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ed74a01220632a41c20d942497f998531749f82
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Oct 16 17:08:32 2020 +0800

    arm64: dts: broadcom: clear the warnings caused by empty dma-ranges
    
    [ Upstream commit 2013a4b684b6eb614ee5c9a3c07b0ae6f5ca96d9 ]
    
    The scripts/dtc/checks.c requires that the node have empty "dma-ranges"
    property must have the same "#address-cells" and "#size-cells" values as
    the parent node. Otherwise, the following warnings is reported:
    
    arch/arm64/boot/dts/broadcom/stingray/stingray-usb.dtsi:7.3-14: Warning \
    (dma_ranges_format): /usb:dma-ranges: empty "dma-ranges" property but \
    its #address-cells (1) differs from / (2)
    arch/arm64/boot/dts/broadcom/stingray/stingray-usb.dtsi:7.3-14: Warning \
    (dma_ranges_format): /usb:dma-ranges: empty "dma-ranges" property but \
    its #size-cells (1) differs from / (2)
    
    Arnd Bergmann figured out why it's necessary:
    Also note that the #address-cells=<1> means that any device under
    this bus is assumed to only support 32-bit addressing, and DMA will
    have to go through a slow swiotlb in the absence of an IOMMU.
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Link: https://lore.kernel.org/r/20201016090833.1892-2-thunder.leizhen@huawei.com'
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acac3f7d7d2283a1b8bc1e1c286dcd6c96e573e4
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Mon Nov 16 23:09:13 2020 +1100

    powerpc: Drop -me200 addition to build flags
    
    [ Upstream commit e02152ba2810f7c88cb54e71cda096268dfa9241 ]
    
    Currently a build with CONFIG_E200=y will fail with:
    
      Error: invalid switch -me200
      Error: unrecognized option -me200
    
    Upstream binutils has never supported an -me200 option. Presumably it
    was supported at some point by either a fork or Freescale internal
    binutils.
    
    We can't support code that we can't even build test, so drop the
    addition of -me200 to the build flags, so we can at least build with
    CONFIG_E200=y.
    
    Reported-by: Németh Márton <nm127@freemail.hu>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Scott Wood <oss@buserror.net>
    Link: https://lore.kernel.org/r/20201116120913.165317-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8012a30b9e16865dcbb36a06c82186451c2b465b
Author: Sara Sharon <sara.sharon@intel.com>
Date:   Sat Nov 7 10:50:11 2020 +0200

    iwlwifi: mvm: fix kernel panic in case of assert during CSA
    
    [ Upstream commit fe56d05ee6c87f6a1a8c7267affd92c9438249cc ]
    
    During CSA, we briefly nullify the phy context, in __iwl_mvm_unassign_vif_chanctx.
    In case we have a FW assert right after it, it remains NULL though.
    We end up running into endless loop due to mac80211 trying repeatedly to
    move us to ASSOC state, and we keep returning -EINVAL. Later down the road
    we hit a kernel panic.
    
    Detect and avoid this endless loop.
    
    Signed-off-by: Sara Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201107104557.d64de2c17bff.Iedd0d2afa20a2aacba5259a5cae31cb3a119a4eb@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c90527770b88274b3cba9e88b2729a545d0ca35e
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat Nov 7 10:50:10 2020 +0200

    iwlwifi: pcie: set LTR to avoid completion timeout
    
    [ Upstream commit edb625208d84aef179e3f16590c1c582fc5fdae6 ]
    
    On some platforms, the preset values aren't correct and then we may
    get a completion timeout in the firmware. Change the LTR configuration
    to avoid that. The firmware will do some more complex reinit of this
    later, but for the boot process we use ~250usec.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201107104557.d83d591c05ba.I42885c9fb500bc08b9a4c07c4ff3d436cc7a3c84@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d411a07d6c0422db53cb58e8001c6824b6434163
Author: Markus Reichl <m.reichl@fivetechno.de>
Date:   Wed Nov 4 17:23:55 2020 +0100

    arm64: dts: rockchip: Assign a fixed index to mmc devices on rk3399 boards.
    
    [ Upstream commit 0011c6d182774fc781fb9e115ebe8baa356029ae ]
    
    Recently introduced async probe on mmc devices can shuffle block IDs.
    Pin them to fixed values to ease booting in environments where UUIDs
    are not practical. Use newly introduced aliases for mmcblk devices from [1].
    
    [1]
    https://patchwork.kernel.org/patch/11747669/
    
    Signed-off-by: Markus Reichl <m.reichl@fivetechno.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20201104162356.1251-1-m.reichl@fivetechno.de
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e6cae4e81812ac2eefe7cf7c3007cbd7d4bb1db
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Oct 22 16:51:03 2020 +0300

    iwlwifi: pcie: limit memory read spin time
    
    [ Upstream commit 04516706bb99889986ddfa3a769ed50d2dc7ac13 ]
    
    When we read device memory, we lock a spinlock, write the address we
    want to read from the device and then spin in a loop reading the data
    in 32-bit quantities from another register.
    
    As the description makes clear, this is rather inefficient, incurring
    a PCIe bus transaction for every read. In a typical device today, we
    want to read 786k SMEM if it crashes, leading to 192k register reads.
    Occasionally, we've seen the whole loop take over 20 seconds and then
    triggering the soft lockup detector.
    
    Clearly, it is unreasonable to spin here for such extended periods of
    time.
    
    To fix this, break the loop down into an outer and an inner loop, and
    break out of the inner loop if more than half a second elapsed. To
    avoid too much overhead, check for that only every 128 reads, though
    there's no particular reason for that number. Then, unlock and relock
    to obtain NIC access again, reprogram the start address and continue.
    
    This will keep (interrupt) latencies on the CPU down to a reasonable
    time.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Mordechay Goodstein <mordechay.goodstein@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201022165103.45878a7e49aa.I3b9b9c5a10002915072312ce75b68ed5b3dc6e14@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 591afbc97c18be8baf4387bc4ca9b26864a3c623
Author: Fangrui Song <maskray@google.com>
Date:   Mon Nov 2 17:23:58 2020 -0800

    x86/lib: Change .weak to SYM_FUNC_START_WEAK for arch/x86/lib/mem*_64.S
    
    commit 4d6ffa27b8e5116c0abb318790fd01d4e12d75e6 upstream.
    
    Commit
    
      393f203f5fd5 ("x86_64: kasan: add interceptors for memset/memmove/memcpy functions")
    
    added .weak directives to arch/x86/lib/mem*_64.S instead of changing the
    existing ENTRY macros to WEAK. This can lead to the assembly snippet
    
      .weak memcpy
      ...
      .globl memcpy
    
    which will produce a STB_WEAK memcpy with GNU as but STB_GLOBAL memcpy
    with LLVM's integrated assembler before LLVM 12. LLVM 12 (since
    https://reviews.llvm.org/D90108) will error on such an overridden symbol
    binding.
    
    Commit
    
      ef1e03152cb0 ("x86/asm: Make some functions local")
    
    changed ENTRY in arch/x86/lib/memcpy_64.S to SYM_FUNC_START_LOCAL, which
    was ineffective due to the preceding .weak directive.
    
    Use the appropriate SYM_FUNC_START_WEAK instead.
    
    Fixes: 393f203f5fd5 ("x86_64: kasan: add interceptors for memset/memmove/memcpy functions")
    Fixes: ef1e03152cb0 ("x86/asm: Make some functions local")
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201103012358.168682-1-maskray@google.com
    [nd: backport due to missing commit e9b9d020c487 ("x86/asm: Annotate aliases")]
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 018b05e0f05bf010d82bb0e379165ecce537b2aa
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Mon Nov 9 10:35:28 2020 -0800

    Kbuild: do not emit debug info for assembly with LLVM_IAS=1
    
    commit b8a9092330da2030496ff357272f342eb970d51b upstream.
    
    Clang's integrated assembler produces the warning for assembly files:
    
    warning: DWARF2 only supports one section per compilation unit
    
    If -Wa,-gdwarf-* is unspecified, then debug info is not emitted for
    assembly sources (it is still emitted for C sources).  This will be
    re-enabled for newer DWARF versions in a follow up patch.
    
    Enables defconfig+CONFIG_DEBUG_INFO to build cleanly with
    LLVM=1 LLVM_IAS=1 for x86_64 and arm64.
    
    Cc: <stable@vger.kernel.org>
    Link: https://github.com/ClangBuiltLinux/linux/issues/716
    Reported-by: Dmitry Golovin <dima@golovin.in>
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Suggested-by: Dmitry Golovin <dima@golovin.in>
    Suggested-by: Nathan Chancellor <natechancellor@gmail.com>
    Suggested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Reviewed-by: Fangrui Song <maskray@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    [nd: backport to avoid conflicts from:
      commit 10e68b02c861 ("Makefile: support compressed debug info")
      commit 7b16994437c7 ("Makefile: Improve compressed debug info support detection")
      commit 695afd3d7d58 ("kbuild: Simplify DEBUG_INFO Kconfig handling")]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
