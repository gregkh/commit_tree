commit d79b8577dfb7d02cada8c6671d39d10c09af891b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed May 8 07:19:12 2019 +0200

    Linux 4.9.174

commit b445316bcfee939eb5cae2477ffc9cda2bca6bab
Author: Jacopo Mondi <jacopo+renesas@jmondi.org>
Date:   Fri Dec 29 07:22:26 2017 -0500

    media: v4l2: i2c: ov7670: Fix PLL bypass register values
    
    commit 61da76beef1e4f0b6ba7be4f8d0cf0dac7ce1f55 upstream.
    
    The following commits:
    commit f6dd927f34d6 ("[media] media: ov7670: calculate framerate properly for ov7675")
    commit 04ee6d92047e ("[media] media: ov7670: add possibility to bypass pll for ov7675")
    introduced the ability to bypass PLL multiplier and use input clock (xvclk)
    as pixel clock output frequency for ov7675 sensor.
    
    PLL is bypassed using register DBLV[7:6], according to ov7670 and ov7675
    sensor manuals. Macros used to set DBLV register seem wrong in the
    driver, as their values do not match what reported in the datasheet.
    
    Fix by changing DBLV_* macros to use bits [7:6] and set bits [3:0] to
    default 0x0a reserved value (according to datasheets).
    
    While at there, remove a write to DBLV register in
    "ov7675_set_framerate()" that over-writes the previous one to the same
    register that takes "info->pll_bypass" flag into account instead of setting PLL
    multiplier to 4x unconditionally.
    
    And, while at there, since "info->pll_bypass" is only used in
    set/get_framerate() functions used by ov7675 only, it is not necessary
    to check for the device id at probe time to make sure that when using
    ov7670 "info->pll_bypass" is set to false.
    
    Fixes: f6dd927f34d6 ("[media] media: ov7670: calculate framerate properly for ov7675")
    
    Signed-off-by: Jacopo Mondi <jacopo+renesas@jmondi.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbf8a8421733f8e228e95addfed721ed02c6f105
Author: Tony Luck <tony.luck@intel.com>
Date:   Mon Feb 25 12:59:40 2019 -0800

    x86/mce: Improve error message when kernel cannot recover, p2
    
    commit 41f035a86b5b72a4f947c38e94239d20d595352a upstream.
    
    In
    
      c7d606f560e4 ("x86/mce: Improve error message when kernel cannot recover")
    
    a case was added for a machine check caused by a DATA access to poison
    memory from the kernel. A case should have been added also for an
    uncorrectable error during an instruction fetch in the kernel.
    
    Add that extra case so the error message now reads:
    
      mce: [Hardware Error]: Machine check: Instruction fetch error in kernel
    
    Fixes: c7d606f560e4 ("x86/mce: Improve error message when kernel cannot recover")
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Pu Wen <puwen@hygon.cn>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190225205940.15226-1-tony.luck@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 869d1e4564cb7a9f6770f6b0858244233134b0bc
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Fri Dec 21 21:18:52 2018 +0100

    selinux: never allow relabeling on context mounts
    
    commit a83d6ddaebe541570291205cb538e35ad4ff94f9 upstream.
    
    In the SECURITY_FS_USE_MNTPOINT case we never want to allow relabeling
    files/directories, so we should never set the SBLABEL_MNT flag. The
    'special handling' in selinux_is_sblabel_mnt() is only intended for when
    the behavior is set to SECURITY_FS_USE_GENFS.
    
    While there, make the logic in selinux_is_sblabel_mnt() more explicit
    and add a BUILD_BUG_ON() to make sure that introducing a new
    SECURITY_FS_USE_* forces a review of the logic.
    
    Fixes: d5f3a5f6e7e7 ("selinux: add security in-core xattr support for pstore and debugfs")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Reviewed-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fe9014436877193a1962ab1f6d1e2a45725b63f
Author: Anson Huang <anson.huang@nxp.com>
Date:   Wed Apr 3 15:14:44 2019 -0700

    Input: snvs_pwrkey - initialize necessary driver data before enabling IRQ
    
    commit bf2a7ca39fd3ab47ef71c621a7ee69d1813b1f97 upstream.
    
    SNVS IRQ is requested before necessary driver data initialized,
    if there is a pending IRQ during driver probe phase, kernel
    NULL pointer panic will occur in IRQ handler. To avoid such
    scenario, just initialize necessary driver data before enabling
    IRQ. This patch is inspired by NXP's internal kernel tree.
    
    Fixes: d3dc6e232215 ("input: keyboard: imx: add snvs power key driver")
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea3a2341de48b068f3f30269b679608c9bd76567
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Jan 25 10:34:51 2019 -0800

    scsi: RDMA/srpt: Fix a credit leak for aborted commands
    
    commit 40ca8757291ca7a8775498112d320205b2a2e571 upstream.
    
    Make sure that the next time a response is sent to the initiator that the
    credit it had allocated for the aborted request gets freed.
    
    Cc: Doug Ledford <dledford@redhat.com>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: Nicholas Bellinger <nab@linux-iscsi.org>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Fixes: 131e6abc674e ("target: Add TFO->abort_task for aborted task resources release") # v3.15
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17b600cce96c3a181054b4fa1ff88ea71f97fb66
Author: Jeremy Fertic <jeremyfertic@gmail.com>
Date:   Sat Dec 22 21:57:43 2018 -0700

    staging: iio: adt7316: fix the dac write calculation
    
    commit 78accaea117c1ae878774974fab91ac4a0b0e2b0 upstream.
    
    The lsb calculation is not masking the correct bits from the user input.
    Subtract 1 from (1 << offset) to correctly set up the mask to be applied
    to user input.
    
    The lsb register stores its value starting at the bit 7 position.
    adt7316_store_DAC() currently assumes the value is at the other end of the
    register. Shift the lsb value before storing it in a new variable lsb_reg,
    and write this variable to the lsb register.
    
    Fixes: 35f6b6b86ede ("staging: iio: new ADT7316/7/8 and ADT7516/7/9 driver")
    Signed-off-by: Jeremy Fertic <jeremyfertic@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c5a4013e6cff5eeeb249c023db83ad4a086c0e1
Author: Jeremy Fertic <jeremyfertic@gmail.com>
Date:   Sat Dec 22 21:57:42 2018 -0700

    staging: iio: adt7316: fix the dac read calculation
    
    commit 45130fb030aec26ac28b4bb23344901df3ec3b7f upstream.
    
    The calculation of the current dac value is using the wrong bits of the
    dac lsb register. Create two macros to shift the lsb register value into
    lsb position, depending on whether the dac is 10 or 12 bit. Initialize
    data to 0 so, with an 8 bit dac, the msb register value can be bitwise
    ORed with data.
    
    Fixes: 35f6b6b86ede ("staging: iio: new ADT7316/7/8 and ADT7516/7/9 driver")
    Signed-off-by: Jeremy Fertic <jeremyfertic@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ea81e9cca6663d7a3c070ef87661772b81fe0ef
Author: Jeremy Fertic <jeremyfertic@gmail.com>
Date:   Tue Dec 11 17:55:00 2018 -0700

    staging: iio: adt7316: allow adt751x to use internal vref for all dacs
    
    commit 10bfe7cc1739c22f0aa296b39e53f61e9e3f4d99 upstream.
    
    With adt7516/7/9, internal vref is available for dacs a and b, dacs c and
    d, or all dacs. The driver doesn't currently support internal vref for all
    dacs. Change the else if to an if so both bits are checked rather than
    just one or the other.
    
    Signed-off-by: Jeremy Fertic <jeremyfertic@gmail.com>
    Fixes: 35f6b6b86ede ("staging: iio: new ADT7316/7/8 and ADT7516/7/9 driver")
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdeec03e7ea085af475b73928222b308aadbcbde
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Thu May 2 15:29:47 2019 +0000

    perf/x86/amd: Update generic hardware cache events for Family 17h
    
    commit 0e3b74e26280f2cf8753717a950b97d424da6046 upstream.
    
    Add a new amd_hw_cache_event_ids_f17h assignment structure set
    for AMD families 17h and above, since a lot has changed.  Specifically:
    
    L1 Data Cache
    
    The data cache access counter remains the same on Family 17h.
    
    For DC misses, PMCx041's definition changes with Family 17h,
    so instead we use the L2 cache accesses from L1 data cache
    misses counter (PMCx060,umask=0xc8).
    
    For DC hardware prefetch events, Family 17h breaks compatibility
    for PMCx067 "Data Prefetcher", so instead, we use PMCx05a "Hardware
    Prefetch DC Fills."
    
    L1 Instruction Cache
    
    PMCs 0x80 and 0x81 (32-byte IC fetches and misses) are backward
    compatible on Family 17h.
    
    For prefetches, we remove the erroneous PMCx04B assignment which
    counts how many software data cache prefetch load instructions were
    dispatched.
    
    LL - Last Level Cache
    
    Removing PMCs 7D, 7E, and 7F assignments, as they do not exist
    on Family 17h, where the last level cache is L3.  L3 counters
    can be accessed using the existing AMD Uncore driver.
    
    Data TLB
    
    On Intel machines, data TLB accesses ("dTLB-loads") are assigned
    to counters that count load/store instructions retired.  This
    is inconsistent with instruction TLB accesses, where Intel
    implementations report iTLB misses that hit in the STLB.
    
    Ideally, dTLB-loads would count higher level dTLB misses that hit
    in lower level TLBs, and dTLB-load-misses would report those
    that also missed in those lower-level TLBs, therefore causing
    a page table walk.  That would be consistent with instruction
    TLB operation, remove the redundancy between dTLB-loads and
    L1-dcache-loads, and prevent perf from producing artificially
    low percentage ratios, i.e. the "0.01%" below:
    
            42,550,869      L1-dcache-loads
            41,591,860      dTLB-loads
                 4,802      dTLB-load-misses          #    0.01% of all dTLB cache hits
             7,283,682      L1-dcache-stores
             7,912,392      dTLB-stores
                   310      dTLB-store-misses
    
    On AMD Families prior to 17h, the "Data Cache Accesses" counter is
    used, which is slightly better than load/store instructions retired,
    but still counts in terms of individual load/store operations
    instead of TLB operations.
    
    So, for AMD Families 17h and higher, this patch assigns "dTLB-loads"
    to a counter for L1 dTLB misses that hit in the L2 dTLB, and
    "dTLB-load-misses" to a counter for L1 DTLB misses that caused
    L2 DTLB misses and therefore also caused page table walks.  This
    results in a much more accurate view of data TLB performance:
    
            60,961,781      L1-dcache-loads
                 4,601      dTLB-loads
                   963      dTLB-load-misses          #   20.93% of all dTLB cache hits
    
    Note that for all AMD families, data loads and stores are combined
    in a single accesses counter, so no 'L1-dcache-stores' are reported
    separately, and stores are counted with loads in 'L1-dcache-loads'.
    
    Also note that the "% of all dTLB cache hits" string is misleading
    because (a) "dTLB cache": although TLBs can be considered caches for
    page tables, in this context, it can be misinterpreted as data cache
    hits because the figures are similar (at least on Intel), and (b) not
    all those loads (technically accesses) technically "hit" at that
    hardware level.  "% of all dTLB accesses" would be more clear/accurate.
    
    Instruction TLB
    
    On Intel machines, 'iTLB-loads' measure iTLB misses that hit in the
    STLB, and 'iTLB-load-misses' measure iTLB misses that also missed in
    the STLB and completed a page table walk.
    
    For AMD Family 17h and above, for 'iTLB-loads' we replace the
    erroneous instruction cache fetches counter with PMCx084
    "L1 ITLB Miss, L2 ITLB Hit".
    
    For 'iTLB-load-misses' we still use PMCx085 "L1 ITLB Miss,
    L2 ITLB Miss", but set a 0xff umask because without it the event
    does not get counted.
    
    Branch Predictor (BPU)
    
    PMCs 0xc2 and 0xc3 continue to be valid across all AMD Families.
    
    Node Level Events
    
    Family 17h does not have a PMCx0e9 counter, and corresponding counters
    have not been made available publicly, so for now, we mark them as
    unsupported for Families 17h and above.
    
    Reference:
    
      "Open-Source Register Reference For AMD Family 17h Processors Models 00h-2Fh"
      Released 7/17/2018, Publication #56255, Revision 3.03:
      https://www.amd.com/system/files/TechDocs/56255_OSRR.pdf
    
    [ mingo: tidied up the line breaks. ]
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Martin Liška <mliska@suse.cz>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Pu Wen <puwen@hygon.cn>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thomas Lendacky <Thomas.Lendacky@amd.com>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-perf-users@vger.kernel.org
    Fixes: e40ed1542dd7 ("perf/x86: Add perf support for AMD family-17h processors")
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3025f7bc22c687a75cc3d376cf2f92dd1695c538
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 25 16:50:43 2019 +0100

    ARM: iop: don't use using 64-bit DMA masks
    
    [ Upstream commit 2125801ccce19249708ca3245d48998e70569ab8 ]
    
    clang warns about statically defined DMA masks from the DMA_BIT_MASK
    macro with length 64:
    
     arch/arm/mach-iop13xx/setup.c:303:35: error: shift count >= width of type [-Werror,-Wshift-count-overflow]
     static u64 iop13xx_adma_dmamask = DMA_BIT_MASK(64);
                                      ^~~~~~~~~~~~~~~~
     include/linux/dma-mapping.h:141:54: note: expanded from macro 'DMA_BIT_MASK'
     #define DMA_BIT_MASK(n) (((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
                                                          ^ ~~~
    
    The ones in iop shouldn't really be 64 bit masks, so changing them
    to what the driver can support avoids the warning.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfe6268cb9267ec03e42d9d6800ec5323dea7cd2
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 25 16:50:42 2019 +0100

    ARM: orion: don't use using 64-bit DMA masks
    
    [ Upstream commit cd92d74d67c811dc22544430b9ac3029f5bd64c5 ]
    
    clang warns about statically defined DMA masks from the DMA_BIT_MASK
    macro with length 64:
    
    arch/arm/plat-orion/common.c:625:29: error: shift count >= width of type [-Werror,-Wshift-count-overflow]
                    .coherent_dma_mask      = DMA_BIT_MASK(64),
                                              ^~~~~~~~~~~~~~~~
    include/linux/dma-mapping.h:141:54: note: expanded from macro 'DMA_BIT_MASK'
     #define DMA_BIT_MASK(n) (((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
    
    The ones in orion shouldn't really be 64 bit masks, so changing them
    to what the driver can support avoids the warning.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71f8374fafac67534c8295683cfd39eb504a1cb7
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Tue Feb 19 08:49:56 2019 -0800

    xsysace: Fix error handling in ace_setup
    
    [ Upstream commit 47b16820c490149c2923e8474048f2c6e7557cab ]
    
    If xace hardware reports a bad version number, the error handling code
    in ace_setup() calls put_disk(), followed by queue cleanup. However, since
    the disk data structure has the queue pointer set, put_disk() also
    cleans and releases the queue. This results in blk_cleanup_queue()
    accessing an already released data structure, which in turn may result
    in a crash such as the following.
    
    [   10.681671] BUG: Kernel NULL pointer dereference at 0x00000040
    [   10.681826] Faulting instruction address: 0xc0431480
    [   10.682072] Oops: Kernel access of bad area, sig: 11 [#1]
    [   10.682251] BE PAGE_SIZE=4K PREEMPT Xilinx Virtex440
    [   10.682387] Modules linked in:
    [   10.682528] CPU: 0 PID: 1 Comm: swapper Tainted: G        W         5.0.0-rc6-next-20190218+ #2
    [   10.682733] NIP:  c0431480 LR: c043147c CTR: c0422ad8
    [   10.682863] REGS: cf82fbe0 TRAP: 0300   Tainted: G        W          (5.0.0-rc6-next-20190218+)
    [   10.683065] MSR:  00029000 <CE,EE,ME>  CR: 22000222  XER: 00000000
    [   10.683236] DEAR: 00000040 ESR: 00000000
    [   10.683236] GPR00: c043147c cf82fc90 cf82ccc0 00000000 00000000 00000000 00000002 00000000
    [   10.683236] GPR08: 00000000 00000000 c04310bc 00000000 22000222 00000000 c0002c54 00000000
    [   10.683236] GPR16: 00000000 00000001 c09aa39c c09021b0 c09021dc 00000007 c0a68c08 00000000
    [   10.683236] GPR24: 00000001 ced6d400 ced6dcf0 c0815d9c 00000000 00000000 00000000 cedf0800
    [   10.684331] NIP [c0431480] blk_mq_run_hw_queue+0x28/0x114
    [   10.684473] LR [c043147c] blk_mq_run_hw_queue+0x24/0x114
    [   10.684602] Call Trace:
    [   10.684671] [cf82fc90] [c043147c] blk_mq_run_hw_queue+0x24/0x114 (unreliable)
    [   10.684854] [cf82fcc0] [c04315bc] blk_mq_run_hw_queues+0x50/0x7c
    [   10.685002] [cf82fce0] [c0422b24] blk_set_queue_dying+0x30/0x68
    [   10.685154] [cf82fcf0] [c0423ec0] blk_cleanup_queue+0x34/0x14c
    [   10.685306] [cf82fd10] [c054d73c] ace_probe+0x3dc/0x508
    [   10.685445] [cf82fd50] [c052d740] platform_drv_probe+0x4c/0xb8
    [   10.685592] [cf82fd70] [c052abb0] really_probe+0x20c/0x32c
    [   10.685728] [cf82fda0] [c052ae58] driver_probe_device+0x68/0x464
    [   10.685877] [cf82fdc0] [c052b500] device_driver_attach+0xb4/0xe4
    [   10.686024] [cf82fde0] [c052b5dc] __driver_attach+0xac/0xfc
    [   10.686161] [cf82fe00] [c0528428] bus_for_each_dev+0x80/0xc0
    [   10.686314] [cf82fe30] [c0529b3c] bus_add_driver+0x144/0x234
    [   10.686457] [cf82fe50] [c052c46c] driver_register+0x88/0x15c
    [   10.686610] [cf82fe60] [c09de288] ace_init+0x4c/0xac
    [   10.686742] [cf82fe80] [c0002730] do_one_initcall+0xac/0x330
    [   10.686888] [cf82fee0] [c09aafd0] kernel_init_freeable+0x34c/0x478
    [   10.687043] [cf82ff30] [c0002c6c] kernel_init+0x18/0x114
    [   10.687188] [cf82ff40] [c000f2f0] ret_from_kernel_thread+0x14/0x1c
    [   10.687349] Instruction dump:
    [   10.687435] 3863ffd4 4bfffd70 9421ffd0 7c0802a6 93c10028 7c9e2378 93e1002c 38810008
    [   10.687637] 7c7f1b78 90010034 4bfffc25 813f008c <81290040> 75290100 4182002c 80810008
    [   10.688056] ---[ end trace 13c9ff51d41b9d40 ]---
    
    Fix the problem by setting the disk queue pointer to NULL before calling
    put_disk(). A more comprehensive fix might be to rearrange the code
    to check the hardware version before initializing data structures,
    but I don't know if this would have undesirable side effects, and
    it would increase the complexity of backporting the fix to older kernels.
    
    Fixes: 74489a91dd43a ("Add support for Xilinx SystemACE CompactFlash interface")
    Acked-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb85c7b2b89611ba85932bb19a48c5ee06a9af5f
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Apr 5 18:39:30 2019 -0700

    sh: fix multiple function definition build errors
    
    [ Upstream commit acaf892ecbf5be7710ae05a61fd43c668f68ad95 ]
    
    Many of the sh CPU-types have their own plat_irq_setup() and
    arch_init_clk_ops() functions, so these same (empty) functions in
    arch/sh/boards/of-generic.c are not needed and cause build errors.
    
    If there is some case where these empty functions are needed, they can
    be retained by marking them as "__weak" while at the same time making
    builds that do not need them succeed.
    
    Fixes these build errors:
    
    arch/sh/boards/of-generic.o: In function `plat_irq_setup':
    (.init.text+0x134): multiple definition of `plat_irq_setup'
    arch/sh/kernel/cpu/sh2/setup-sh7619.o:(.init.text+0x30): first defined here
    arch/sh/boards/of-generic.o: In function `arch_init_clk_ops':
    (.init.text+0x118): multiple definition of `arch_init_clk_ops'
    arch/sh/kernel/cpu/sh2/clock-sh7619.o:(.init.text+0x0): first defined here
    
    Link: http://lkml.kernel.org/r/9ee4e0c5-f100-86a2-bd4d-1d3287ceab31@infradead.org
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kbuild test robot <lkp@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: Rich Felker <dalias@libc.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d57e4ae3622ed13fb34b1cd336c6f280d842818b
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Fri Apr 5 18:39:06 2019 -0700

    hugetlbfs: fix memory leak for resv_map
    
    [ Upstream commit 58b6e5e8f1addd44583d61b0a03c0f5519527e35 ]
    
    When mknod is used to create a block special file in hugetlbfs, it will
    allocate an inode and kmalloc a 'struct resv_map' via resv_map_alloc().
    inode->i_mapping->private_data will point the newly allocated resv_map.
    However, when the device special file is opened bd_acquire() will set
    inode->i_mapping to bd_inode->i_mapping.  Thus the pointer to the
    allocated resv_map is lost and the structure is leaked.
    
    Programs to reproduce:
            mount -t hugetlbfs nodev hugetlbfs
            mknod hugetlbfs/dev b 0 0
            exec 30<> hugetlbfs/dev
            umount hugetlbfs/
    
    resv_map structures are only needed for inodes which can have associated
    page allocations.  To fix the leak, only allocate resv_map for those
    inodes which could possibly be associated with page allocations.
    
    Link: http://lkml.kernel.org/r/20190401213101.16476-1-mike.kravetz@oracle.com
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Reported-by: Yufen Yu <yuyufen@huawei.com>
    Suggested-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2332a9a614e309f766bae0f22ecf7a3268f9b26c
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Thu Apr 4 16:46:46 2019 +0800

    net: hns: Fix WARNING when remove HNS driver with SMMU enabled
    
    [ Upstream commit 8601a99d7c0256b7a7fdd1ab14cf6c1f1dfcadc6 ]
    
    When enable SMMU, remove HNS driver will cause a WARNING:
    
    [  141.924177] WARNING: CPU: 36 PID: 2708 at drivers/iommu/dma-iommu.c:443 __iommu_dma_unmap+0xc0/0xc8
    [  141.954673] Modules linked in: hns_enet_drv(-)
    [  141.963615] CPU: 36 PID: 2708 Comm: rmmod Tainted: G        W         5.0.0-rc1-28723-gb729c57de95c-dirty #32
    [  141.983593] Hardware name: Huawei D05/D05, BIOS Hisilicon D05 UEFI Nemo 1.8 RC0 08/31/2017
    [  142.000244] pstate: 60000005 (nZCv daif -PAN -UAO)
    [  142.009886] pc : __iommu_dma_unmap+0xc0/0xc8
    [  142.018476] lr : __iommu_dma_unmap+0xc0/0xc8
    [  142.027066] sp : ffff000013533b90
    [  142.033728] x29: ffff000013533b90 x28: ffff8013e6983600
    [  142.044420] x27: 0000000000000000 x26: 0000000000000000
    [  142.055113] x25: 0000000056000000 x24: 0000000000000015
    [  142.065806] x23: 0000000000000028 x22: ffff8013e66eee68
    [  142.076499] x21: ffff8013db919800 x20: 0000ffffefbff000
    [  142.087192] x19: 0000000000001000 x18: 0000000000000007
    [  142.097885] x17: 000000000000000e x16: 0000000000000001
    [  142.108578] x15: 0000000000000019 x14: 363139343a70616d
    [  142.119270] x13: 6e75656761705f67 x12: 0000000000000000
    [  142.129963] x11: 00000000ffffffff x10: 0000000000000006
    [  142.140656] x9 : 1346c1aa88093500 x8 : ffff0000114de4e0
    [  142.151349] x7 : 6662666578303d72 x6 : ffff0000105ffec8
    [  142.162042] x5 : 0000000000000000 x4 : 0000000000000000
    [  142.172734] x3 : 00000000ffffffff x2 : ffff0000114de500
    [  142.183427] x1 : 0000000000000000 x0 : 0000000000000035
    [  142.194120] Call trace:
    [  142.199030]  __iommu_dma_unmap+0xc0/0xc8
    [  142.206920]  iommu_dma_unmap_page+0x20/0x28
    [  142.215335]  __iommu_unmap_page+0x40/0x60
    [  142.223399]  hnae_unmap_buffer+0x110/0x134
    [  142.231639]  hnae_free_desc+0x6c/0x10c
    [  142.239177]  hnae_fini_ring+0x14/0x34
    [  142.246540]  hnae_fini_queue+0x2c/0x40
    [  142.254080]  hnae_put_handle+0x38/0xcc
    [  142.261619]  hns_nic_dev_remove+0x54/0xfc [hns_enet_drv]
    [  142.272312]  platform_drv_remove+0x24/0x64
    [  142.280552]  device_release_driver_internal+0x17c/0x20c
    [  142.291070]  driver_detach+0x4c/0x90
    [  142.298259]  bus_remove_driver+0x5c/0xd8
    [  142.306148]  driver_unregister+0x2c/0x54
    [  142.314037]  platform_driver_unregister+0x10/0x18
    [  142.323505]  hns_nic_dev_driver_exit+0x14/0xf0c [hns_enet_drv]
    [  142.335248]  __arm64_sys_delete_module+0x214/0x25c
    [  142.344891]  el0_svc_common+0xb0/0x10c
    [  142.352430]  el0_svc_handler+0x24/0x80
    [  142.359968]  el0_svc+0x8/0x7c0
    [  142.366104] ---[ end trace 60ad1cd58e63c407 ]---
    
    The tx ring buffer map when xmit and unmap when xmit done. So in
    hnae_init_ring() did not map tx ring buffer, but in hnae_fini_ring()
    have a unmap operation for tx ring buffer, which is already unmapped
    when xmit done, than cause this WARNING.
    
    The hnae_alloc_buffers() is called in hnae_init_ring(),
    so the hnae_free_buffers() should be in hnae_fini_ring(), not in
    hnae_free_desc().
    
    In hnae_fini_ring(), adds a check is_rx_ring() as in hnae_init_ring().
    When the ring buffer is tx ring, adds a piece of code to ensure that
    the tx ring is unmap.
    
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d146f68b2cbc927e3dee9e86ea1dcf3633b9ee9
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Thu Apr 4 16:46:43 2019 +0800

    net: hns: Use NAPI_POLL_WEIGHT for hns driver
    
    [ Upstream commit acb1ce15a61154aa501891d67ebf79bc9ea26818 ]
    
    When the HNS driver loaded, always have an error print:
    "netif_napi_add() called with weight 256"
    
    This is because the kernel checks the NAPI polling weights
    requested by drivers and it prints an error message if a driver
    requests a weight bigger than 64.
    
    So use NAPI_POLL_WEIGHT to fix it.
    
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b36a29e554207428f889249170b45dfeff71931b
Author: Liubin Shu <shuliubin@huawei.com>
Date:   Thu Apr 4 16:46:42 2019 +0800

    net: hns: fix KASAN: use-after-free in hns_nic_net_xmit_hw()
    
    [ Upstream commit 3a39a12ad364a9acd1038ba8da67cd8430f30de4 ]
    
    This patch is trying to fix the issue due to:
    [27237.844750] BUG: KASAN: use-after-free in hns_nic_net_xmit_hw+0x708/0xa18[hns_enet_drv]
    
    After hnae_queue_xmit() in hns_nic_net_xmit_hw(), can be
    interrupted by interruptions, and than call hns_nic_tx_poll_one()
    to handle the new packets, and free the skb. So, when turn back to
    hns_nic_net_xmit_hw(), calling skb->len will cause use-after-free.
    
    This patch update tx ring statistics in hns_nic_tx_poll_one() to
    fix the bug.
    
    Signed-off-by: Liubin Shu <shuliubin@huawei.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cdaf16efabddb9a839157a1a4b7a716b1e38978
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon Apr 1 16:10:52 2019 +0000

    scsi: storvsc: Fix calculation of sub-channel count
    
    [ Upstream commit 382e06d11e075a40b4094b6ef809f8d4bcc7ab2a ]
    
    When the number of sub-channels offered by Hyper-V is >= the number of CPUs
    in the VM, calculate the correct number of sub-channels.  The current code
    produces one too many.
    
    This scenario arises only when the number of CPUs is artificially
    restricted (for example, with maxcpus=<n> on the kernel boot line), because
    Hyper-V normally offers a sub-channel count < number of CPUs.  While the
    current code doesn't break, the extra sub-channel is unbalanced across the
    CPUs (for example, a total of 5 channels on a VM with 4 CPUs).
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Long Li <longli@microsoft.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a4973dd1ca199a7c091c6c081089c305e353afc
Author: Xose Vazquez Perez <xose.vazquez@gmail.com>
Date:   Sat Mar 30 15:43:31 2019 +0100

    scsi: core: add new RDAC LENOVO/DE_Series device
    
    [ Upstream commit 1cb1d2c64e812928fe0a40b8f7e74523d0283dbe ]
    
    Blacklist "Universal Xport" LUN. It's used for in-band storage array
    management.  Also add model to the rdac dh family.
    
    Cc: Martin Wilck <mwilck@suse.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: NetApp RDAC team <ng-eseries-upstream-maintainers@netapp.com>
    Cc: Christophe Varoqui <christophe.varoqui@opensvc.com>
    Cc: James E.J. Bottomley <jejb@linux.vnet.ibm.com>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: SCSI ML <linux-scsi@vger.kernel.org>
    Cc: DM ML <dm-devel@redhat.com>
    Signed-off-by: Xose Vazquez Perez <xose.vazquez@gmail.com>
    Reviewed-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53ffab7df38455ac578e51e6bfaa0707eaf70f29
Author: Louis Taylor <louis@kragniz.eu>
Date:   Wed Apr 3 12:36:20 2019 -0600

    vfio/pci: use correct format characters
    
    [ Upstream commit 426b046b748d1f47e096e05bdcc6fb4172791307 ]
    
    When compiling with -Wformat, clang emits the following warnings:
    
    drivers/vfio/pci/vfio_pci.c:1601:5: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                    ^~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1601:13: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                            ^~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1601:21: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                                    ^~~~~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1601:32: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                                               ^~~~~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1605:5: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                    ^~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1605:13: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                            ^~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1605:21: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                                    ^~~~~~~~~
    
    drivers/vfio/pci/vfio_pci.c:1605:32: warning: format specifies type
          'unsigned short' but the argument has type 'unsigned int' [-Wformat]
                                    vendor, device, subvendor, subdevice,
                                                               ^~~~~~~~~
    The types of these arguments are unconditionally defined, so this patch
    updates the format character to the correct ones for unsigned ints.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/378
    Signed-off-by: Louis Taylor <louis@kragniz.eu>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92700e02beea1d163b7ed465e49b29a66d896575
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Tue Apr 2 12:26:36 2019 +0200

    rtc: da9063: set uie_unsupported when relevant
    
    [ Upstream commit 882c5e552ffd06856de42261460f46e18319d259 ]
    
    The DA9063AD doesn't support alarms on any seconds and its granularity is
    the minute. Set uie_unsupported in that case.
    
    Reported-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Tested-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: Steve Twiss <stwiss.opensource@diasemi.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ef8447ab8972a283e8c986f3a43682ae83dd5e9
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 26 01:43:37 2019 +0000

    debugfs: fix use-after-free on symlink traversal
    
    [ Upstream commit 93b919da64c15b90953f96a536e5e61df896ca57 ]
    
    symlink body shouldn't be freed without an RCU delay.  Switch debugfs to
    ->destroy_inode() and use of call_rcu(); free both the inode and symlink
    body in the callback.  Similar to solution for bpf, only here it's even
    more obvious that ->evict_inode() can be dropped.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff250f4c804f342695c35e1a39b63666086f2cab
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 26 01:39:50 2019 +0000

    jffs2: fix use-after-free on symlink traversal
    
    [ Upstream commit 4fdcfab5b5537c21891e22e65996d4d0dd8ab4ca ]
    
    free the symlink body after the same RCU delay we have for freeing the
    struct inode itself, so that traversal during RCU pathwalk wouldn't step
    into freed memory.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc498ade714d878cbb2a51cbd06b41d0a7a60531
Author: Aaro Koskinen <aaro.koskinen@nokia.com>
Date:   Wed Mar 27 22:35:40 2019 +0200

    net: stmmac: don't log oversized frames
    
    [ Upstream commit 057a0c5642a2ff2db7c421cdcde34294a23bf37b ]
    
    This is log is harmful as it can trigger multiple times per packet. Delete
    it.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0eb5f93597b385d8596ae986335f39cd8ba9342b
Author: Aaro Koskinen <aaro.koskinen@nokia.com>
Date:   Wed Mar 27 22:35:39 2019 +0200

    net: stmmac: fix dropping of multi-descriptor RX frames
    
    [ Upstream commit 8ac0c24fe1c256af6644caf3d311029440ec2fbd ]
    
    Packets without the last descriptor set should be dropped early. If we
    receive a frame larger than the DMA buffer, the HW will continue using the
    next descriptor. Driver mistakes these as individual frames, and sometimes
    a truncated frame (without the LD set) may look like a valid packet.
    
    This fixes a strange issue where the system replies to 4098-byte ping
    although the MTU/DMA buffer size is set to 4096, and yet at the same
    time it's logging an oversized packet.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2207295c459d564a5078156d0861ca8014f2978e
Author: Aaro Koskinen <aaro.koskinen@nokia.com>
Date:   Wed Mar 27 22:35:38 2019 +0200

    net: stmmac: don't overwrite discard_frame status
    
    [ Upstream commit 1b746ce8b397e58f9e40ce5c63b7198de6930482 ]
    
    If we have error bits set, the discard_frame status will get overwritten
    by checksum bit checks, which might set the status back to good one.
    Fix by checking the COE status only if the frame is good.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e89db5da9d559c8b822f1d70c180428917c4a9d
Author: Konstantin Khorenko <khorenko@virtuozzo.com>
Date:   Thu Mar 28 13:29:21 2019 +0300

    bonding: show full hw address in sysfs for slave entries
    
    [ Upstream commit 18bebc6dd3281955240062655a4df35eef2c46b3 ]
    
    Bond expects ethernet hwaddr for its slave, but it can be longer than 6
    bytes - infiniband interface for example.
    
     # cat /sys/devices/<skipped>/net/ib0/address
     80:00:02:08:fe:80:00:00:00:00:00:00:7c:fe:90:03:00:be:5d:e1
    
     # cat /sys/devices/<skipped>/net/ib0/bonding_slave/perm_hwaddr
     80:00:02:08:fe:80
    
    So print full hwaddr in sysfs "bonding_slave/perm_hwaddr" as well.
    
    Signed-off-by: Konstantin Khorenko <khorenko@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa075d3d5122a82a2012197ad0820565d1d62c52
Author: Omri Kahalon <omrik@mellanox.com>
Date:   Sun Feb 24 16:31:08 2019 +0200

    net/mlx5: E-Switch, Fix esw manager vport indication for more vport commands
    
    [ Upstream commit eca4a928585ac08147e5cc8e2111ecbc6279ee31 ]
    
    Traditionally, the PF (Physical Function) which resides on vport 0 was
    the E-switch manager. Since the ECPF (Embedded CPU Physical Function),
    which resides on vport 0xfffe, was introduced as the E-Switch manager,
    the assumption that the E-switch manager is on vport 0 is incorrect.
    
    Since the eswitch code already uses the actual vport value, all we
    need is to always set other_vport=1.
    
    Signed-off-by: Omri Kahalon <omrik@mellanox.com>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c40fc01511db545805582751cd51eedaa1a9332b
Author: Arvind Sankar <niveditas98@gmail.com>
Date:   Sat Mar 2 11:01:17 2019 -0500

    igb: Fix WARN_ONCE on runtime suspend
    
    [ Upstream commit dabb8338be533c18f50255cf39ff4f66d4dabdbe ]
    
    The runtime_suspend device callbacks are not supposed to save
    configuration state or change the power state. Commit fb29f76cc566
    ("igb: Fix an issue that PME is not enabled during runtime suspend")
    changed the driver to not save configuration state during runtime
    suspend, however the driver callback still put the device into a
    low-power state. This causes a warning in the pci pm core and results in
    pci_pm_runtime_suspend not calling pci_save_state or pci_finish_runtime_suspend.
    
    Fix this by not changing the power state either, leaving that to pci pm
    core, and make the same change for suspend callback as well.
    
    Also move a couple of defines into the appropriate header file instead
    of inline in the .c file.
    
    Fixes: fb29f76cc566 ("igb: Fix an issue that PME is not enabled during runtime suspend")
    Signed-off-by: Arvind Sankar <niveditas98@gmail.com>
    Reviewed-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8223fbcdc1fe3b6184a209bc7f28d90520545fe7
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Feb 23 14:27:10 2019 +0100

    batman-adv: Reduce tt_global hash refcnt only for removed entry
    
    [ Upstream commit f131a56880d10932931e74773fb8702894a94a75 ]
    
    The batadv_hash_remove is a function which searches the hashtable for an
    entry using a needle, a hashtable bucket selection function and a compare
    function. It will lock the bucket list and delete an entry when the compare
    function matches it with the needle. It returns the pointer to the
    hlist_node which matches or NULL when no entry matches the needle.
    
    The batadv_tt_global_free is not itself protected in anyway to avoid that
    any other function is modifying the hashtable between the search for the
    entry and the call to batadv_hash_remove. It can therefore happen that the
    entry either doesn't exist anymore or an entry was deleted which is not the
    same object as the needle. In such an situation, the reference counter (for
    the reference stored in the hashtable) must not be reduced for the needle.
    Instead the reference counter of the actually removed entry has to be
    reduced.
    
    Otherwise the reference counter will underflow and the object might be
    freed before all its references were dropped. The kref helpers reported
    this problem as:
    
      refcount_t: underflow; use-after-free.
    
    Fixes: 7683fdc1e886 ("batman-adv: protect the local and the global trans-tables with rcu")
    Reported-by: Martin Weinelt <martin@linuxlounge.net>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Acked-by: Antonio Quartulli <a@unstable.cc>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33a5be314b38eb8a9df1a724818d3097a70702c9
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Feb 23 14:27:10 2019 +0100

    batman-adv: Reduce tt_local hash refcnt only for removed entry
    
    [ Upstream commit 3d65b9accab4a7ed5038f6df403fbd5e298398c7 ]
    
    The batadv_hash_remove is a function which searches the hashtable for an
    entry using a needle, a hashtable bucket selection function and a compare
    function. It will lock the bucket list and delete an entry when the compare
    function matches it with the needle. It returns the pointer to the
    hlist_node which matches or NULL when no entry matches the needle.
    
    The batadv_tt_local_remove is not itself protected in anyway to avoid that
    any other function is modifying the hashtable between the search for the
    entry and the call to batadv_hash_remove. It can therefore happen that the
    entry either doesn't exist anymore or an entry was deleted which is not the
    same object as the needle. In such an situation, the reference counter (for
    the reference stored in the hashtable) must not be reduced for the needle.
    Instead the reference counter of the actually removed entry has to be
    reduced.
    
    Otherwise the reference counter will underflow and the object might be
    freed before all its references were dropped. The kref helpers reported
    this problem as:
    
      refcount_t: underflow; use-after-free.
    
    Fixes: ef72706a0543 ("batman-adv: protect tt_local_entry from concurrent delete events")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b3ea9ff779af0bf3eec8209e4dac634477ed478
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Feb 23 14:27:10 2019 +0100

    batman-adv: Reduce claim hash refcnt only for removed entry
    
    [ Upstream commit 4ba104f468bbfc27362c393815d03aa18fb7a20f ]
    
    The batadv_hash_remove is a function which searches the hashtable for an
    entry using a needle, a hashtable bucket selection function and a compare
    function. It will lock the bucket list and delete an entry when the compare
    function matches it with the needle. It returns the pointer to the
    hlist_node which matches or NULL when no entry matches the needle.
    
    The batadv_bla_del_claim is not itself protected in anyway to avoid that
    any other function is modifying the hashtable between the search for the
    entry and the call to batadv_hash_remove. It can therefore happen that the
    entry either doesn't exist anymore or an entry was deleted which is not the
    same object as the needle. In such an situation, the reference counter (for
    the reference stored in the hashtable) must not be reduced for the needle.
    Instead the reference counter of the actually removed entry has to be
    reduced.
    
    Otherwise the reference counter will underflow and the object might be
    freed before all its references were dropped. The kref helpers reported
    this problem as:
    
      refcount_t: underflow; use-after-free.
    
    Fixes: 23721387c409 ("batman-adv: add basic bridge loop avoidance code")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 214122d6a1aeb535dd4a288329e3c5c0b6e3ae3b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Mar 20 11:32:14 2019 +0100

    rtc: sh: Fix invalid alarm warning for non-enabled alarm
    
    [ Upstream commit 15d82d22498784966df8e4696174a16b02cc1052 ]
    
    When no alarm has been programmed on RSK-RZA1, an error message is
    printed during boot:
    
        rtc rtc0: invalid alarm value: 2019-03-14T255:255:255
    
    sh_rtc_read_alarm_value() returns 0xff when querying a hardware alarm
    field that is not enabled.  __rtc_read_alarm() validates the received
    alarm values, and fills in missing fields when needed.
    While 0xff is handled fine for the year, month, and day fields, and
    corrected as considered being out-of-range, this is not the case for the
    hour, minute, and second fields, where -1 is expected for missing
    fields.
    
    Fix this by returning -1 instead, as this value is handled fine for all
    fields.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee3d9abe0981232c30d6e91f8d3ea2ae5327b0d9
Author: He, Bo <bo.he@intel.com>
Date:   Thu Mar 14 02:28:21 2019 +0000

    HID: debug: fix race condition with between rdesc_show() and device removal
    
    [ Upstream commit cef0d4948cb0a02db37ebfdc320e127c77ab1637 ]
    
    There is a race condition that could happen if hid_debug_rdesc_show()
    is running while hdev is in the process of going away (device removal,
    system suspend, etc) which could result in NULL pointer dereference:
    
             BUG: unable to handle kernel paging request at 0000000783316040
             CPU: 1 PID: 1512 Comm: getevent Tainted: G     U     O 4.19.20-quilt-2e5dc0ac-00029-gc455a447dd55 #1
             RIP: 0010:hid_dump_device+0x9b/0x160
             Call Trace:
              hid_debug_rdesc_show+0x72/0x1d0
              seq_read+0xe0/0x410
              full_proxy_read+0x5f/0x90
              __vfs_read+0x3a/0x170
              vfs_read+0xa0/0x150
              ksys_read+0x58/0xc0
              __x64_sys_read+0x1a/0x20
              do_syscall_64+0x55/0x110
              entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Grab driver_input_lock to make sure the input device exists throughout the
    whole process of dumping the rdesc.
    
    [jkosina@suse.cz: update changelog a bit]
    Signed-off-by: he, bo <bo.he@intel.com>
    Signed-off-by: "Zhang, Jun" <jun.zhang@intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72bbf78c4dfcfdb9b7e3efed7e5abe426697e171
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Thu Mar 14 00:24:02 2019 -0500

    HID: logitech: check the return value of create_singlethread_workqueue
    
    [ Upstream commit 6c44b15e1c9076d925d5236ddadf1318b0a25ce2 ]
    
    create_singlethread_workqueue may fail and return NULL. The fix checks if it is
    NULL to avoid NULL pointer dereference.  Also, the fix moves the call of
    create_singlethread_workqueue earlier to avoid resource-release issues.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87b622f949e4cfe8bc6aa0db724aeef71784f7a6
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Wed Mar 13 18:54:59 2019 +0100

    nvme-loop: init nvmet_ctrl fatal_err_work when allocate
    
    [ Upstream commit d11de63f2b519f0a162b834013b6d3a46dbf3886 ]
    
    After commit 4d43d395fe (workqueue: Try to catch flush_work() without
    INIT_WORK()), it can cause warning when delete nvme-loop device, trace
    like:
    
    [   76.601272] Call Trace:
    [   76.601646]  ? del_timer+0x72/0xa0
    [   76.602156]  __cancel_work_timer+0x1ae/0x270
    [   76.602791]  cancel_work_sync+0x14/0x20
    [   76.603407]  nvmet_ctrl_free+0x1b7/0x2f0 [nvmet]
    [   76.604091]  ? free_percpu+0x168/0x300
    [   76.604652]  nvmet_sq_destroy+0x106/0x240 [nvmet]
    [   76.605346]  nvme_loop_destroy_admin_queue+0x30/0x60 [nvme_loop]
    [   76.606220]  nvme_loop_shutdown_ctrl+0xc3/0xf0 [nvme_loop]
    [   76.607026]  nvme_loop_delete_ctrl_host+0x19/0x30 [nvme_loop]
    [   76.607871]  nvme_do_delete_ctrl+0x75/0xb0
    [   76.608477]  nvme_sysfs_delete+0x7d/0xc0
    [   76.609057]  dev_attr_store+0x24/0x40
    [   76.609603]  sysfs_kf_write+0x4c/0x60
    [   76.610144]  kernfs_fop_write+0x19a/0x260
    [   76.610742]  __vfs_write+0x1c/0x60
    [   76.611246]  vfs_write+0xfa/0x280
    [   76.611739]  ksys_write+0x6e/0x120
    [   76.612238]  __x64_sys_write+0x1e/0x30
    [   76.612787]  do_syscall_64+0xbf/0x3a0
    [   76.613329]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    We fix it by moving fatal_err_work init to nvmet_alloc_ctrl(), which may
    more reasonable.
    
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c65c7660b6ebd9a8bdb0fa1583f4aeaac1bbec6
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Apr 19 13:52:38 2019 -0400

    USB: core: Fix bug caused by duplicate interface PM usage counter
    
    commit c2b71462d294cf517a0bc6e4fd6424d7cee5596f upstream.
    
    The syzkaller fuzzer reported a bug in the USB hub driver which turned
    out to be caused by a negative runtime-PM usage counter.  This allowed
    a hub to be runtime suspended at a time when the driver did not expect
    it.  The symptom is a WARNING issued because the hub's status URB is
    submitted while it is already active:
    
            URB 0000000031fb463e submitted while active
            WARNING: CPU: 0 PID: 2917 at drivers/usb/core/urb.c:363
    
    The negative runtime-PM usage count was caused by an unfortunate
    design decision made when runtime PM was first implemented for USB.
    At that time, USB class drivers were allowed to unbind from their
    interfaces without balancing the usage counter (i.e., leaving it with
    a positive count).  The core code would take care of setting the
    counter back to 0 before allowing another driver to bind to the
    interface.
    
    Later on when runtime PM was implemented for the entire kernel, the
    opposite decision was made: Drivers were required to balance their
    runtime-PM get and put calls.  In order to maintain backward
    compatibility, however, the USB subsystem adapted to the new
    implementation by keeping an independent usage counter for each
    interface and using it to automatically adjust the normal usage
    counter back to 0 whenever a driver was unbound.
    
    This approach involves duplicating information, but what is worse, it
    doesn't work properly in cases where a USB class driver delays
    decrementing the usage counter until after the driver's disconnect()
    routine has returned and the counter has been adjusted back to 0.
    Doing so would cause the usage counter to become negative.  There's
    even a warning about this in the USB power management documentation!
    
    As it happens, this is exactly what the hub driver does.  The
    kick_hub_wq() routine increments the runtime-PM usage counter, and the
    corresponding decrement is carried out by hub_event() in the context
    of the hub_wq work-queue thread.  This work routine may sometimes run
    after the driver has been unbound from its interface, and when it does
    it causes the usage counter to go negative.
    
    It is not possible for hub_disconnect() to wait for a pending
    hub_event() call to finish, because hub_disconnect() is called with
    the device lock held and hub_event() acquires that lock.  The only
    feasible fix is to reverse the original design decision: remove the
    duplicate interface-specific usage counter and require USB drivers to
    balance their runtime PM gets and puts.  As far as I know, all
    existing drivers currently do this.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: syzbot+7634edaea4d0b341c625@syzkaller.appspotmail.com
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bbbb95a4b5729f5601938ac7d37394c1ba5e30e
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 15 11:51:38 2019 -0400

    USB: core: Fix unterminated string returned by usb_string()
    
    commit c01c348ecdc66085e44912c97368809612231520 upstream.
    
    Some drivers (such as the vub300 MMC driver) expect usb_string() to
    return a properly NUL-terminated string, even when an error occurs.
    (In fact, vub300's probe routine doesn't bother to check the return
    code from usb_string().)  When the driver goes on to use an
    unterminated string, it leads to kernel errors such as
    stack-out-of-bounds, as found by the syzkaller USB fuzzer.
    
    An out-of-range string index argument is not at all unlikely, given
    that some devices don't provide string descriptors and therefore list
    0 as the value for their string indexes.  This patch makes
    usb_string() return a properly terminated empty string along with the
    -EINVAL error code when an out-of-range index is encountered.
    
    And since a USB string index is a single-byte value, indexes >= 256
    are just as invalid as values of 0 or below.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: syzbot+b75b85111c10b8d680f1@syzkaller.appspotmail.com
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 616ba129e17606f485dc325e0eef745c5e069e48
Author: Malte Leip <malte@leip.net>
Date:   Sun Apr 14 12:00:12 2019 +0200

    usb: usbip: fix isoc packet num validation in get_pipe
    
    commit c409ca3be3c6ff3a1eeb303b191184e80d412862 upstream.
    
    Change the validation of number_of_packets in get_pipe to compare the
    number of packets to a fixed maximum number of packets allowed, set to
    be 1024. This number was chosen due to it being used by other drivers as
    well, for example drivers/usb/host/uhci-q.c
    
    Background/reason:
    The get_pipe function in stub_rx.c validates the number of packets in
    isochronous mode and aborts with an error if that number is too large,
    in order to prevent malicious input from possibly triggering large
    memory allocations. This was previously done by checking whether
    pdu->u.cmd_submit.number_of_packets is bigger than the number of packets
    that would be needed for pdu->u.cmd_submit.transfer_buffer_length bytes
    if all except possibly the last packet had maximum length, given by
    usb_endpoint_maxp(epd) *  usb_endpoint_maxp_mult(epd). This leads to an
    error if URBs with packets shorter than the maximum possible length are
    submitted, which is allowed according to
    Documentation/driver-api/usb/URB.rst and occurs for example with the
    snd-usb-audio driver.
    
    Fixes: c6688ef9f297 ("usbip: fix stub_rx: harden CMD_SUBMIT path to handle malicious input")
    Signed-off-by: Malte Leip <malte@leip.net>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f6bbb66cf8103428644aee961b259729e368fd6
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 22 11:16:04 2019 -0400

    USB: w1 ds2490: Fix bug caused by improper use of altsetting array
    
    commit c114944d7d67f24e71562fcfc18d550ab787e4d4 upstream.
    
    The syzkaller USB fuzzer spotted a slab-out-of-bounds bug in the
    ds2490 driver.  This bug is caused by improper use of the altsetting
    array in the usb_interface structure (the array's entries are not
    always stored in numerical order), combined with a naive assumption
    that all interfaces probed by the driver will have the expected number
    of altsettings.
    
    The bug can be fixed by replacing references to the possibly
    non-existent intf->altsetting[alt] entry with the guaranteed-to-exist
    intf->cur_altsetting entry.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: syzbot+d65f673b847a1a96cdba@syzkaller.appspotmail.com
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 965cc8406cf38d6e535b264f5906211c3e5e33b7
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Apr 23 14:48:29 2019 -0400

    USB: yurex: Fix protection fault after device removal
    
    commit ef61eb43ada6c1d6b94668f0f514e4c268093ff3 upstream.
    
    The syzkaller USB fuzzer found a general-protection-fault bug in the
    yurex driver.  The fault occurs when a device has been unplugged; the
    driver's interrupt-URB handler logs an error message referring to the
    device by name, after the device has been unregistered and its name
    deallocated.
    
    This problem is caused by the fact that the interrupt URB isn't
    cancelled until the driver's private data structure is released, which
    can happen long after the device is gone.  The cure is to make sure
    that the interrupt URB is killed before yurex_disconnect() returns;
    this is exactly the sort of thing that usb_poison_urb() was meant for.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: syzbot+2eb9121678bdb36e6d57@syzkaller.appspotmail.com
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff5ca554b16608b2a35665210e62b5afb4429f51
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 16 17:34:00 2018 +0100

    caif: reduce stack size with KASAN
    
    commit ce6289661b14a8b391d90db918c91b6d6da6540a upstream.
    
    When CONFIG_KASAN is set, we can use relatively large amounts of kernel
    stack space:
    
    net/caif/cfctrl.c:555:1: warning: the frame size of 1600 bytes is larger than 1280 bytes [-Wframe-larger-than=]
    
    This adds convenience wrappers around cfpkt_extr_head(), which is responsible
    for most of the stack growth. With those wrapper functions, gcc apparently
    starts reusing the stack slots for each instance, thus avoiding the
    problem.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee254b4d2912ea566e95f605c50b5265e585522a
Author: Kristina Martsenko <kristina.martsenko@arm.com>
Date:   Fri Jun 9 16:35:53 2017 +0100

    arm64: mm: don't print out page table entries on EL0 faults
    
    commit bf396c09c2447a787d02af34cf167e953f85fa42 upstream.
    
    When we take a fault from EL0 that can't be handled, we print out the
    page table entries associated with the faulting address. This allows
    userspace to print out any current page table entries, including kernel
    (TTBR1) entries. Exposing kernel mappings like this could pose a
    security risk, so don't print out page table information on EL0 faults.
    (But still print it out for EL1 faults.) This also follows the same
    behaviour as x86, printing out page table entries on kernel mode faults
    but not user mode faults.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Kristina Martsenko <kristina.martsenko@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cec5be38780b94fdeebfa9b9803c90327ed9656
Author: Kristina Martsenko <kristina.martsenko@arm.com>
Date:   Fri Jun 9 16:35:52 2017 +0100

    arm64: mm: print out correct page table entries
    
    commit 67ce16ec15ce9d97d3d85e72beabbc5d7017193e upstream.
    
    When we take a fault that can't be handled, we print out the page table
    entries associated with the faulting address. In some cases we currently
    print out the wrong entries. For a faulting TTBR1 address, we sometimes
    print out TTBR0 table entries instead, and for a faulting TTBR0 address
    we sometimes print out TTBR1 table entries. Fix this by choosing the
    tables based on the faulting address.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Kristina Martsenko <kristina.martsenko@arm.com>
    [will: zero-extend addrs to 64-bit, don't walk swapper w/ TTBR0 addr]
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d01a64da40355b3274f0f7f746019809184b72c
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Tue Apr 10 16:30:39 2018 -0700

    kasan: prevent compiler from optimizing away memset in tests
    
    commit 69ca372c100fba99c78ef826a1795aa86e4f01a8 upstream.
    
    A compiler can optimize away memset calls by replacing them with mov
    instructions.  There are KASAN tests that specifically test that KASAN
    correctly handles memset calls so we don't want this optimization to
    happen.
    
    The solution is to add -fno-builtin flag to test_kasan.ko
    
    Link: http://lkml.kernel.org/r/105ec9a308b2abedb1a0d1fdced0c22d765e4732.1519924383.git.andreyknvl@google.com
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Nick Terrell <terrelln@fb.com>
    Cc: Chris Mason <clm@fb.com>
    Cc: Yury Norov <ynorov@caviumnetworks.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: "Paul E . McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Jeff Layton <jlayton@redhat.com>
    Cc: "Jason A . Donenfeld" <Jason@zx2c4.com>
    Cc: Kostya Serebryany <kcc@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df214256a9020628df271824fac6faa2a4378b77
Author: Will Deacon <will@kernel.org>
Date:   Tue Feb 13 13:14:09 2018 +0000

    arm64: proc: Set PTE_NG for table entries to avoid traversing them twice
    
    commit 2ce77f6d8a9ae9ce6d80397d88bdceb84a2004cd upstream.
    
    When KASAN is enabled, the swapper page table contains many identical
    mappings of the zero page, which can lead to a stall during boot whilst
    the G -> nG code continually walks the same page table entries looking
    for global mappings.
    
    This patch sets the nG bit (bit 11, which is IGNORED) in table entries
    after processing the subtree so we can easily skip them if we see them
    a second time.
    
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe71230d9a02d267742c893e8acfd870beadc01e
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Feb 6 15:36:48 2018 -0800

    kasan: remove redundant initialization of variable 'real_size'
    
    commit 48c232395431c23d35cf3b4c5a090bd793316578 upstream.
    
    Variable real_size is initialized with a value that is never read, it is
    re-assigned a new value later on, hence the initialization is redundant
    and can be removed.
    
    Cleans up clang warning:
    
      lib/test_kasan.c:422:21: warning: Value stored to 'real_size' during its initialization is never read
    
    Link: http://lkml.kernel.org/r/20180206144950.32457-1-colin.king@canonical.com
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30ca85a54edd0a22890e7004e5fe613b34d9d2b2
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 2 13:31:58 2017 -0700

    kasan: avoid -Wmaybe-uninitialized warning
    
    commit e7701557bfdd81ff44cab13a80439319a735d8e2 upstream.
    
    gcc-7 produces this warning:
    
      mm/kasan/report.c: In function 'kasan_report':
      mm/kasan/report.c:351:3: error: 'info.first_bad_addr' may be used uninitialized in this function [-Werror=maybe-uninitialized]
         print_shadow_for_address(info->first_bad_addr);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      mm/kasan/report.c:360:27: note: 'info.first_bad_addr' was declared here
    
    The code seems fine as we only print info.first_bad_addr when there is a
    shadow, and we always initialize it in that case, but this is relatively
    hard for gcc to figure out after the latest rework.
    
    Adding an intialization to the most likely value together with the other
    struct members shuts up that warning.
    
    Fixes: b235b9808664 ("kasan: unify report headers")
    Link: https://patchwork.kernel.org/patch/9641417/
    Link: http://lkml.kernel.org/r/20170725152739.4176967-1-arnd@arndb.de
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: Alexander Potapenko <glider@google.com>
    Suggested-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51a27f037fb328d55389252ae67bcc2b9d70e7ac
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Mar 16 16:40:21 2017 -0700

    kasan: add a prototype of task_struct to avoid warning
    
    commit 5be9b730b09c45c358bbfe7f51d254e306cccc07 upstream.
    
    Add a prototype of task_struct to fix below warning on arm64.
    
      In file included from arch/arm64/kernel/probes/kprobes.c:19:0:
      include/linux/kasan.h:81:132: error: 'struct task_struct' declared inside parameter list will not be visible outside of this definition or declaration [-Werror]
       static inline void kasan_unpoison_task_stack(struct task_struct *task) {}
    
    As same as other types (kmem_cache, page, and vm_struct) this adds a
    prototype of task_struct data structure on top of kasan.h.
    
    [arnd] A related warning was fixed before, but now appears in a
    different line in the same file in v4.11-rc2.  The patch from Masami
    Hiramatsu still seems appropriate, so let's take his version.
    
    Fixes: 71af2ed5eeea ("kasan, sched/headers: Remove <linux/sched.h> from <linux/kasan.h>")
    Link: https://patchwork.kernel.org/patch/9569839/
    Link: http://lkml.kernel.org/r/20170313141517.3397802-1-arnd@arndb.de
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Alexander Potapenko <glider@google.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b46a4c22fe9bfbdc337bdf347df37def9a171511
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Mar 6 19:06:40 2017 +0000

    arm64: kasan: avoid bad virt_to_pfn()
    
    commit b0de0ccc8b9edd8846828e0ecdc35deacdf186b0 upstream.
    
    Booting a v4.11-rc1 kernel with DEBUG_VIRTUAL and KASAN enabled produces
    the following splat (trimmed for brevity):
    
    [    0.000000] virt_to_phys used for non-linear address: ffff200008080000 (0xffff200008080000)
    [    0.000000] WARNING: CPU: 0 PID: 0 at arch/arm64/mm/physaddr.c:14 __virt_to_phys+0x48/0x70
    [    0.000000] PC is at __virt_to_phys+0x48/0x70
    [    0.000000] LR is at __virt_to_phys+0x48/0x70
    [    0.000000] Call trace:
    [    0.000000] [<ffff2000080b1ac0>] __virt_to_phys+0x48/0x70
    [    0.000000] [<ffff20000a03b86c>] kasan_init+0x1c0/0x498
    [    0.000000] [<ffff20000a034018>] setup_arch+0x2fc/0x948
    [    0.000000] [<ffff20000a030c68>] start_kernel+0xb8/0x570
    [    0.000000] [<ffff20000a0301e8>] __primary_switched+0x6c/0x74
    
    This is because we use virt_to_pfn() on a kernel image address when
    trying to figure out its nid, so that we can allocate its shadow from
    the same node.
    
    As with other recent changes, this patch uses lm_alias() to solve this.
    
    We could instead use NUMA_NO_NODE, as x86 does for all shadow
    allocations, though we'll likely want the "real" memory shadow to be
    backed from its corresponding nid anyway, so we may as well be
    consistent and find the nid for the image shadow.
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Acked-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0143f6a53a9aa653ce802090e9fdc47f459fa8a
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Mon Jan 9 12:00:23 2017 -0600

    x86/unwind: Disable KASAN checks for non-current tasks
    
    commit 84936118bdf37bda513d4a361c38181a216427e0 upstream.
    
    There are a handful of callers to save_stack_trace_tsk() and
    show_stack() which try to unwind the stack of a task other than current.
    In such cases, it's remotely possible that the task is running on one
    CPU while the unwinder is reading its stack from another CPU, causing
    the unwinder to see stack corruption.
    
    These cases seem to be mostly harmless.  The unwinder has checks which
    prevent it from following bad pointers beyond the bounds of the stack.
    So it's not really a bug as long as the caller understands that
    unwinding another task will not always succeed.
    
    In such cases, it's possible that the unwinder may read a KASAN-poisoned
    region of the stack.  Account for that by using READ_ONCE_NOCHECK() when
    reading the stack of another task.
    
    Use READ_ONCE() when reading the stack of the current task, since KASAN
    warnings can still be useful for finding bugs in that case.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Miroslav Benes <mbenes@suse.cz>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/4c575eb288ba9f73d498dfe0acde2f58674598f1.1483978430.git.jpoimboe@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6fc6221f0a41ec5a81defd31a62840a577a8b27
Author: Laura Abbott <labbott@redhat.com>
Date:   Tue Jan 10 13:35:44 2017 -0800

    mm/kasan: Switch to using __pa_symbol and lm_alias
    
    commit 5c6a84a3f4558a6115fef1b59343c7ae56b3abc3 upstream.
    
    __pa_symbol is the correct API to find the physical address of symbols.
    Switch to it to allow for debugging APIs to work correctly. Other
    functions such as p*d_populate may call __pa internally. Ensure that the
    address passed is in the linear region by calling lm_alias.
    
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a67f81c85e93462b6395c582a10d36d7f9ae6f1c
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Fri Dec 2 11:42:21 2016 -0600

    x86/suspend: fix false positive KASAN warning on suspend/resume
    
    commit b53f40db59b27b62bc294c30506b02a0cae47e0b upstream.
    
    Resuming from a suspend operation is showing a KASAN false positive
    warning:
    
      BUG: KASAN: stack-out-of-bounds in unwind_get_return_address+0x11d/0x130 at addr ffff8803867d7878
      Read of size 8 by task pm-suspend/7774
      page:ffffea000e19f5c0 count:0 mapcount:0 mapping:          (null) index:0x0
      flags: 0x2ffff0000000000()
      page dumped because: kasan: bad access detected
      CPU: 0 PID: 7774 Comm: pm-suspend Tainted: G    B           4.9.0-rc7+ #8
      Hardware name: Gigabyte Technology Co., Ltd. Z170X-UD5/Z170X-UD5-CF, BIOS F5 03/07/2016
      Call Trace:
        dump_stack+0x63/0x82
        kasan_report_error+0x4b4/0x4e0
        ? acpi_hw_read_port+0xd0/0x1ea
        ? kfree_const+0x22/0x30
        ? acpi_hw_validate_io_request+0x1a6/0x1a6
        __asan_report_load8_noabort+0x61/0x70
        ? unwind_get_return_address+0x11d/0x130
        unwind_get_return_address+0x11d/0x130
        ? unwind_next_frame+0x97/0xf0
        __save_stack_trace+0x92/0x100
        save_stack_trace+0x1b/0x20
        save_stack+0x46/0xd0
        ? save_stack_trace+0x1b/0x20
        ? save_stack+0x46/0xd0
        ? kasan_kmalloc+0xad/0xe0
        ? kasan_slab_alloc+0x12/0x20
        ? acpi_hw_read+0x2b6/0x3aa
        ? acpi_hw_validate_register+0x20b/0x20b
        ? acpi_hw_write_port+0x72/0xc7
        ? acpi_hw_write+0x11f/0x15f
        ? acpi_hw_read_multiple+0x19f/0x19f
        ? memcpy+0x45/0x50
        ? acpi_hw_write_port+0x72/0xc7
        ? acpi_hw_write+0x11f/0x15f
        ? acpi_hw_read_multiple+0x19f/0x19f
        ? kasan_unpoison_shadow+0x36/0x50
        kasan_kmalloc+0xad/0xe0
        kasan_slab_alloc+0x12/0x20
        kmem_cache_alloc_trace+0xbc/0x1e0
        ? acpi_get_sleep_type_data+0x9a/0x578
        acpi_get_sleep_type_data+0x9a/0x578
        acpi_hw_legacy_wake_prep+0x88/0x22c
        ? acpi_hw_legacy_sleep+0x3c7/0x3c7
        ? acpi_write_bit_register+0x28d/0x2d3
        ? acpi_read_bit_register+0x19b/0x19b
        acpi_hw_sleep_dispatch+0xb5/0xba
        acpi_leave_sleep_state_prep+0x17/0x19
        acpi_suspend_enter+0x154/0x1e0
        ? trace_suspend_resume+0xe8/0xe8
        suspend_devices_and_enter+0xb09/0xdb0
        ? printk+0xa8/0xd8
        ? arch_suspend_enable_irqs+0x20/0x20
        ? try_to_freeze_tasks+0x295/0x600
        pm_suspend+0x6c9/0x780
        ? finish_wait+0x1f0/0x1f0
        ? suspend_devices_and_enter+0xdb0/0xdb0
        state_store+0xa2/0x120
        ? kobj_attr_show+0x60/0x60
        kobj_attr_store+0x36/0x70
        sysfs_kf_write+0x131/0x200
        kernfs_fop_write+0x295/0x3f0
        __vfs_write+0xef/0x760
        ? handle_mm_fault+0x1346/0x35e0
        ? do_iter_readv_writev+0x660/0x660
        ? __pmd_alloc+0x310/0x310
        ? do_lock_file_wait+0x1e0/0x1e0
        ? apparmor_file_permission+0x18/0x20
        ? security_file_permission+0x73/0x1c0
        ? rw_verify_area+0xbd/0x2b0
        vfs_write+0x149/0x4a0
        SyS_write+0xd9/0x1c0
        ? SyS_read+0x1c0/0x1c0
        entry_SYSCALL_64_fastpath+0x1e/0xad
      Memory state around the buggy address:
       ffff8803867d7700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ffff8803867d7780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      >ffff8803867d7800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4
                                                                      ^
       ffff8803867d7880: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
       ffff8803867d7900: 00 00 00 f1 f1 f1 f1 04 f4 f4 f4 f3 f3 f3 f3 00
    
    KASAN instrumentation poisons the stack when entering a function and
    unpoisons it when exiting the function.  However, in the suspend path,
    some functions never return, so their stack never gets unpoisoned,
    resulting in stale KASAN shadow data which can cause later false
    positive warnings like the one above.
    
    Reported-by: Scott Bauer <scott.bauer@intel.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0558dfcd0425cf1e7ed2fdf825681aec75fd96b
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Thu Apr 25 00:33:00 2019 +0200

    net: phy: marvell: Fix buffer overrun with stats counters
    
    [ Upstream commit fdfdf86720a34527f777cbe0d8599bf0528fa146 ]
    
    marvell_get_sset_count() returns how many statistics counters there
    are. If the PHY supports fibre, there are 3, otherwise two.
    
    marvell_get_strings() does not make this distinction, and always
    returns 3 strings. This then often results in writing past the end
    of the buffer for the strings.
    
    Fixes: 2170fef78a40 ("Marvell phy: add field to get errors from fiber link.")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c3215b53cc901881be27faedcc5734d3a391c09
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Thu Apr 25 22:31:50 2019 -0400

    bnxt_en: Improve multicast address setup logic.
    
    [ Upstream commit b4e30e8e7ea1d1e35ffd64ca46f7d9a7f227b4bf ]
    
    The driver builds a list of multicast addresses and sends it to the
    firmware when the driver's ndo_set_rx_mode() is called.  In rare
    cases, the firmware can fail this call if internal resources to
    add multicast addresses are exhausted.  In that case, we should
    try the call again by setting the ALL_MCAST flag which is more
    guaranteed to succeed.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71061f1a8f1630240c5b0b0d5b39ce708e7eb5ff
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Apr 29 11:53:18 2019 -0400

    packet: validate msg_namelen in send directly
    
    [ Upstream commit 486efdc8f6ce802b27e15921d2353cc740c55451 ]
    
    Packet sockets in datagram mode take a destination address. Verify its
    length before passing to dev_hard_header.
    
    Prior to 2.6.14-rc3, the send code ignored sll_halen. This is
    established behavior. Directly compare msg_namelen to dev->addr_len.
    
    Change v1->v2: initialize addr in all paths
    
    Fixes: 6b8d95f1795c4 ("packet: validate address length if non-zero")
    Suggested-by: David Laight <David.Laight@aculab.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 493cbb3e9e83afef3418dcef3b6f951d2888f300
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Apr 25 12:06:54 2019 -0400

    ipv6: invert flowlabel sharing check in process and user mode
    
    [ Upstream commit 95c169251bf734aa555a1e8043e4d88ec97a04ec ]
    
    A request for a flowlabel fails in process or user exclusive mode must
    fail if the caller pid or uid does not match. Invert the test.
    
    Previously, the test was unsafe wrt PID recycling, but indeed tested
    for inequality: fl1->owner != fl->owner
    
    Fixes: 4f82f45730c68 ("net ip6 flowlabel: Make owner a union of struct pid* and kuid_t")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf533f481bc106e9319128f5decc84c81b7dd02e
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 27 16:49:06 2019 -0700

    ipv6/flowlabel: wait rcu grace period before put_pid()
    
    [ Upstream commit 6c0afef5fb0c27758f4d52b2210c61b6bd8b4470 ]
    
    syzbot was able to catch a use-after-free read in pid_nr_ns() [1]
    
    ip6fl_seq_show() seems to use RCU protection, dereferencing fl->owner.pid
    but fl_free() releases fl->owner.pid before rcu grace period is started.
    
    [1]
    
    BUG: KASAN: use-after-free in pid_nr_ns+0x128/0x140 kernel/pid.c:407
    Read of size 4 at addr ffff888094012a04 by task syz-executor.0/18087
    
    CPU: 0 PID: 18087 Comm: syz-executor.0 Not tainted 5.1.0-rc6+ #89
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/generic_report.c:131
     pid_nr_ns+0x128/0x140 kernel/pid.c:407
     ip6fl_seq_show+0x2f8/0x4f0 net/ipv6/ip6_flowlabel.c:794
     seq_read+0xad3/0x1130 fs/seq_file.c:268
     proc_reg_read+0x1fe/0x2c0 fs/proc/inode.c:227
     do_loop_readv_writev fs/read_write.c:701 [inline]
     do_loop_readv_writev fs/read_write.c:688 [inline]
     do_iter_read+0x4a9/0x660 fs/read_write.c:922
     vfs_readv+0xf0/0x160 fs/read_write.c:984
     kernel_readv fs/splice.c:358 [inline]
     default_file_splice_read+0x475/0x890 fs/splice.c:413
     do_splice_to+0x12a/0x190 fs/splice.c:876
     splice_direct_to_actor+0x2d2/0x970 fs/splice.c:953
     do_splice_direct+0x1da/0x2a0 fs/splice.c:1062
     do_sendfile+0x597/0xd00 fs/read_write.c:1443
     __do_sys_sendfile64 fs/read_write.c:1498 [inline]
     __se_sys_sendfile64 fs/read_write.c:1490 [inline]
     __x64_sys_sendfile64+0x15a/0x220 fs/read_write.c:1490
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458da9
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f300d24bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000028
    RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 0000000000458da9
    RDX: 00000000200000c0 RSI: 0000000000000008 RDI: 0000000000000007
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 000000000000005a R11: 0000000000000246 R12: 00007f300d24c6d4
    R13: 00000000004c5fa3 R14: 00000000004da748 R15: 00000000ffffffff
    
    Allocated by task 17543:
     save_stack+0x45/0xd0 mm/kasan/common.c:75
     set_track mm/kasan/common.c:87 [inline]
     __kasan_kmalloc mm/kasan/common.c:497 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:470
     kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:505
     slab_post_alloc_hook mm/slab.h:437 [inline]
     slab_alloc mm/slab.c:3393 [inline]
     kmem_cache_alloc+0x11a/0x6f0 mm/slab.c:3555
     alloc_pid+0x55/0x8f0 kernel/pid.c:168
     copy_process.part.0+0x3b08/0x7980 kernel/fork.c:1932
     copy_process kernel/fork.c:1709 [inline]
     _do_fork+0x257/0xfd0 kernel/fork.c:2226
     __do_sys_clone kernel/fork.c:2333 [inline]
     __se_sys_clone kernel/fork.c:2327 [inline]
     __x64_sys_clone+0xbf/0x150 kernel/fork.c:2327
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 7789:
     save_stack+0x45/0xd0 mm/kasan/common.c:75
     set_track mm/kasan/common.c:87 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:459
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:467
     __cache_free mm/slab.c:3499 [inline]
     kmem_cache_free+0x86/0x260 mm/slab.c:3765
     put_pid.part.0+0x111/0x150 kernel/pid.c:111
     put_pid+0x20/0x30 kernel/pid.c:105
     fl_free+0xbe/0xe0 net/ipv6/ip6_flowlabel.c:102
     ip6_fl_gc+0x295/0x3e0 net/ipv6/ip6_flowlabel.c:152
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:293
    
    The buggy address belongs to the object at ffff888094012a00
     which belongs to the cache pid_2 of size 88
    The buggy address is located 4 bytes inside of
     88-byte region [ffff888094012a00, ffff888094012a58)
    The buggy address belongs to the page:
    page:ffffea0002500480 count:1 mapcount:0 mapping:ffff88809a483080 index:0xffff888094012980
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea00018a3508 ffffea0002524a88 ffff88809a483080
    raw: ffff888094012980 ffff888094012000 000000010000001b 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888094012900: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
     ffff888094012980: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
    >ffff888094012a00: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
                       ^
     ffff888094012a80: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
     ffff888094012b00: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
    
    Fixes: 4f82f45730c6 ("net ip6 flowlabel: Make owner a union of struct pid * and kuid_t")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcb37e6d310c458447b6ae2eccf045a1ceaa3698
Author: Shmulik Ladkani <shmulik@metanetworks.com>
Date:   Mon Apr 29 16:39:30 2019 +0300

    ipv4: ip_do_fragment: Preserve skb_iif during fragmentation
    
    [ Upstream commit d2f0c961148f65bc73eda72b9fa3a4e80973cb49 ]
    
    Previously, during fragmentation after forwarding, skb->skb_iif isn't
    preserved, i.e. 'ip_copy_metadata' does not copy skb_iif from given
    'from' skb.
    
    As a result, ip_do_fragment's creates fragments with zero skb_iif,
    leading to inconsistent behavior.
    
    Assume for example an eBPF program attached at tc egress (post
    forwarding) that examines __sk_buff->ingress_ifindex:
     - the correct iif is observed if forwarding path does not involve
       fragmentation/refragmentation
     - a bogus iif is observed if forwarding path involves
       fragmentation/refragmentatiom
    
    Fix, by preserving skb_iif during 'ip_copy_metadata'.
    
    Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9daeb29a4c8c579de8dddf9036e14aed1663a99
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Apr 28 18:04:11 2019 +0200

    ALSA: line6: use dynamic buffers
    
    commit e5c812e84f0dece3400d5caf42522287e6ef139f upstream.
    
    The line6 driver uses a lot of USB buffers off of the stack, which is
    not allowed on many systems, causing the driver to crash on some of
    them.  Fix this up by dynamically allocating the buffers with kmalloc()
    which allows for proper DMA-able memory.
    
    Reported-by: Christo Gouws <gouws.christo@gmail.com>
    Reported-by: Alan Stern <stern@rowland.harvard.edu>
    Tested-by: Christo Gouws <gouws.christo@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
