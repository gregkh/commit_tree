commit 0bb1a5e5aa1728a2c501cdd916923ef44fc07e2f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Nov 10 07:43:01 2018 -0800

    Linux 4.9.136

commit 65cb24de03f1c8e00a4fedf416b80a4e8f8a6ef2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 1 13:02:38 2018 -0700

    posix-timers: Sanitize overrun handling
    
    [ Upstream commit 78c9c4dfbf8c04883941445a195276bb4bb92c76 ]
    
    The posix timer overrun handling is broken because the forwarding functions
    can return a huge number of overruns which does not fit in an int. As a
    consequence timer_getoverrun(2) and siginfo::si_overrun can turn into
    random number generators.
    
    The k_clock::timer_forward() callbacks return a 64 bit value now. Make
    k_itimer::ti_overrun[_last] 64bit as well, so the kernel internal
    accounting is correct. 3Remove the temporary (int) casts.
    
    Add a helper function which clamps the overrun value returned to user space
    via timer_getoverrun(2) or siginfo::si_overrun limited to a positive value
    between 0 and INT_MAX. INT_MAX is an indicator for user space that the
    overrun value has been clamped.
    
    Reported-by: Team OWL337 <icytxw@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Link: https://lkml.kernel.org/r/20180626132705.018623573@linutronix.de
    [florian: Make patch apply to v4.9.135]
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b77fb6c9912d0b97a3c468c52b18d1447062c4
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Jan 16 10:33:05 2018 +0100

    net: fs_enet: do not call phy_stop() in interrupts
    
    [ Upstream commit f8b39039cbf2a15f2b8c9f081e1cbd5dee00aaf5 ]
    
    In case of TX timeout, fs_timeout() calls phy_stop(), which
    triggers the following BUG_ON() as we are in interrupt.
    
    [92708.199889] kernel BUG at drivers/net/phy/mdio_bus.c:482!
    [92708.204985] Oops: Exception in kernel mode, sig: 5 [#1]
    [92708.210119] PREEMPT
    [92708.212107] CMPC885
    [92708.214216] CPU: 0 PID: 3 Comm: ksoftirqd/0 Tainted: G        W       4.9.61 #39
    [92708.223227] task: c60f0a40 task.stack: c6104000
    [92708.227697] NIP: c02a84bc LR: c02a947c CTR: c02a93d8
    [92708.232614] REGS: c6105c70 TRAP: 0700   Tainted: G        W        (4.9.61)
    [92708.241193] MSR: 00021032 <ME,IR,DR,RI>[92708.244818]   CR: 24000822  XER: 20000000
    [92708.248767]
    GPR00: c02a947c c6105d20 c60f0a40 c62b4c00 00000005 0000001f c069aad8 0001a688
    GPR08: 00000007 00000100 c02a93d8 00000000 000005fc 00000000 c6213240 c06338e4
    GPR16: 00000001 c06330d4 c0633094 00000000 c0680000 c6104000 c6104000 00000000
    GPR24: 00000200 00000000 ffffffff 00000004 00000078 00009032 00000000 c62b4c00
    NIP [c02a84bc] mdiobus_read+0x20/0x74
    [92708.281517] LR [c02a947c] kszphy_config_intr+0xa4/0xc4
    [92708.286547] Call Trace:
    [92708.288980] [c6105d20] [c6104000] 0xc6104000 (unreliable)
    [92708.294339] [c6105d40] [c02a947c] kszphy_config_intr+0xa4/0xc4
    [92708.300098] [c6105d50] [c02a5330] phy_stop+0x60/0x9c
    [92708.305007] [c6105d60] [c02c84d0] fs_timeout+0xdc/0x110
    [92708.310197] [c6105d80] [c035cd48] dev_watchdog+0x268/0x2a0
    [92708.315593] [c6105db0] [c0060288] call_timer_fn+0x34/0x17c
    [92708.321014] [c6105dd0] [c00605f0] run_timer_softirq+0x21c/0x2e4
    [92708.326887] [c6105e50] [c001e19c] __do_softirq+0xf4/0x2f4
    [92708.332207] [c6105eb0] [c001e3c8] run_ksoftirqd+0x2c/0x40
    [92708.337560] [c6105ec0] [c003b420] smpboot_thread_fn+0x1f0/0x258
    [92708.343405] [c6105ef0] [c003745c] kthread+0xbc/0xd0
    [92708.348217] [c6105f40] [c000c400] ret_from_kernel_thread+0x5c/0x64
    [92708.354275] Instruction dump:
    [92708.357207] 7c0803a6 bbc10018 38210020 4e800020 7c0802a6 9421ffe0 54290024 bfc10018
    [92708.364865] 90010024 7c7f1b78 81290008 552902ee <0f090000> 3bc3002c 7fc3f378 90810008
    [92708.372711] ---[ end trace 42b05441616fafd7 ]---
    
    This patch moves fs_timeout() actions into an async worker.
    
    Fixes: commit 48257c4f168e5 ("Add fs_enet ethernet network driver, for several embedded platforms")
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b462075e089d30fd37a5c44a5cda3a25907bbe5a
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Oct 12 17:53:12 2018 -0700

    x86/time: Correct the attribute on jiffies' definition
    
    commit 53c13ba8ed39e89f21a0b98f4c8a241bb44e483d upstream.
    
    Clang warns that the declaration of jiffies in include/linux/jiffies.h
    doesn't match the definition in arch/x86/time/kernel.c:
    
    arch/x86/kernel/time.c:29:42: warning: section does not match previous declaration [-Wsection]
    __visible volatile unsigned long jiffies __cacheline_aligned = INITIAL_JIFFIES;
                                             ^
    ./include/linux/cache.h:49:4: note: expanded from macro '__cacheline_aligned'
                     __section__(".data..cacheline_aligned")))
                     ^
    ./include/linux/jiffies.h:81:31: note: previous attribute is here
    extern unsigned long volatile __cacheline_aligned_in_smp __jiffy_arch_data jiffies;
                                  ^
    ./arch/x86/include/asm/cache.h:20:2: note: expanded from macro '__cacheline_aligned_in_smp'
            __page_aligned_data
            ^
    ./include/linux/linkage.h:39:29: note: expanded from macro '__page_aligned_data'
    #define __page_aligned_data     __section(.data..page_aligned) __aligned(PAGE_SIZE)
                                    ^
    ./include/linux/compiler_attributes.h:233:56: note: expanded from macro '__section'
    #define __section(S)                    __attribute__((__section__(#S)))
                                                           ^
    1 warning generated.
    
    The declaration was changed in commit 7c30f352c852 ("jiffies.h: declare
    jiffies and jiffies_64 with ____cacheline_aligned_in_smp") but wasn't
    updated here. Make them match so Clang no longer warns.
    
    Fixes: 7c30f352c852 ("jiffies.h: declare jiffies and jiffies_64 with ____cacheline_aligned_in_smp")
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181013005311.28617-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fad9fd1a6cc4d020438952820a4da85156e6a27
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Oct 11 12:38:27 2018 +0200

    x86/percpu: Fix this_cpu_read()
    
    commit b59167ac7bafd804c91e49ad53c6d33a7394d4c8 upstream.
    
    Eric reported that a sequence count loop using this_cpu_read() got
    optimized out. This is wrong, this_cpu_read() must imply READ_ONCE()
    because the interface is IRQ-safe, therefore an interrupt can have
    changed the per-cpu value.
    
    Fixes: 7c3576d261ce ("[PATCH] i386: Convert PDA into the percpu section")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Cc: hpa@zytor.com
    Cc: eric.dumazet@gmail.com
    Cc: bp@alien8.de
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181011104019.748208519@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc1fccc7cd0af546fc1732e0128aa711c857b4fe
Author: Phil Auld <pauld@redhat.com>
Date:   Mon Oct 8 10:36:40 2018 -0400

    sched/fair: Fix throttle_list starvation with low CFS quota
    
    commit baa9be4ffb55876923dc9716abc0a448e510ba30 upstream.
    
    With a very low cpu.cfs_quota_us setting, such as the minimum of 1000,
    distribute_cfs_runtime may not empty the throttled_list before it runs
    out of runtime to distribute. In that case, due to the change from
    c06f04c7048 to put throttled entries at the head of the list, later entries
    on the list will starve.  Essentially, the same X processes will get pulled
    off the list, given CPU time and then, when expired, get put back on the
    head of the list where distribute_cfs_runtime will give runtime to the same
    set of processes leaving the rest.
    
    Fix the issue by setting a bit in struct cfs_bandwidth when
    distribute_cfs_runtime is running, so that the code in throttle_cfs_rq can
    decide to put the throttled entry on the tail or the head of the list.  The
    bit is set/cleared by the callers of distribute_cfs_runtime while they hold
    cfs_bandwidth->lock.
    
    This is easy to reproduce with a handful of CPU consumers. I use 'crash' on
    the live system. In some cases you can simply look at the throttled list and
    see the later entries are not changing:
    
      crash> list cfs_rq.throttled_list -H 0xffff90b54f6ade40 -s cfs_rq.runtime_remaining | paste - - | awk '{print $1"  "$4}' | pr -t -n3
        1     ffff90b56cb2d200  -976050
        2     ffff90b56cb2cc00  -484925
        3     ffff90b56cb2bc00  -658814
        4     ffff90b56cb2ba00  -275365
        5     ffff90b166a45600  -135138
        6     ffff90b56cb2da00  -282505
        7     ffff90b56cb2e000  -148065
        8     ffff90b56cb2fa00  -872591
        9     ffff90b56cb2c000  -84687
       10     ffff90b56cb2f000  -87237
       11     ffff90b166a40a00  -164582
    
      crash> list cfs_rq.throttled_list -H 0xffff90b54f6ade40 -s cfs_rq.runtime_remaining | paste - - | awk '{print $1"  "$4}' | pr -t -n3
        1     ffff90b56cb2d200  -994147
        2     ffff90b56cb2cc00  -306051
        3     ffff90b56cb2bc00  -961321
        4     ffff90b56cb2ba00  -24490
        5     ffff90b166a45600  -135138
        6     ffff90b56cb2da00  -282505
        7     ffff90b56cb2e000  -148065
        8     ffff90b56cb2fa00  -872591
        9     ffff90b56cb2c000  -84687
       10     ffff90b56cb2f000  -87237
       11     ffff90b166a40a00  -164582
    
    Sometimes it is easier to see by finding a process getting starved and looking
    at the sched_info:
    
      crash> task ffff8eb765994500 sched_info
      PID: 7800   TASK: ffff8eb765994500  CPU: 16  COMMAND: "cputest"
        sched_info = {
          pcount = 8,
          run_delay = 697094208,
          last_arrival = 240260125039,
          last_queued = 240260327513
        },
      crash> task ffff8eb765994500 sched_info
      PID: 7800   TASK: ffff8eb765994500  CPU: 16  COMMAND: "cputest"
        sched_info = {
          pcount = 8,
          run_delay = 697094208,
          last_arrival = 240260125039,
          last_queued = 240260327513
        },
    
    Signed-off-by: Phil Auld <pauld@redhat.com>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Fixes: c06f04c70489 ("sched: Fix potential near-infinite distribute_cfs_runtime() loop")
    Link: http://lkml.kernel.org/r/20181008143639.GA4019@pauld.bos.csb
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ddf3c21ef274532c4d3d835ef12dd4df77f13f7
Author: Mikhail Nikiforov <jackxviichaos@gmail.com>
Date:   Mon Oct 15 11:17:56 2018 -0700

    Input: elan_i2c - add ACPI ID for Lenovo IdeaPad 330-15IGM
    
    commit 13c1c5e4d7f887cba36c5e3df3faa22071c1469f upstream.
    
    Add ELAN061C to the ACPI table to support Elan touchpad found in Lenovo
    IdeaPad 330-15IGM.
    
    Signed-off-by: Mikhail Nikiforov <jackxviichaos@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdbb426f6e1c397ae567f1d38a522270d9cfe2e9
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 15 16:55:04 2018 -0400

    USB: fix the usbfs flag sanitization for control transfers
    
    commit 665c365a77fbfeabe52694aedf3446d5f2f1ce42 upstream.
    
    Commit 7a68d9fb8510 ("USB: usbdevfs: sanitize flags more") checks the
    transfer flags for URBs submitted from userspace via usbfs.  However,
    the check for whether the USBDEVFS_URB_SHORT_NOT_OK flag should be
    allowed for a control transfer was added in the wrong place, before
    the code has properly determined the direction of the control
    transfer.  (Control transfers are special because for them, the
    direction is set by the bRequestType byte of the Setup packet rather
    than direction bit of the endpoint address.)
    
    This patch moves code which sets up the allow_short flag for control
    transfers down after is_in has been set to the correct value.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: syzbot+24a30223a4b609bb802e@syzkaller.appspotmail.com
    Fixes: 7a68d9fb8510 ("USB: usbdevfs: sanitize flags more")
    CC: Oliver Neukum <oneukum@suse.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4121be5950ead355c4c3e08543f585e9e7100a20
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 12:16:45 2018 +0200

    usb: gadget: storage: Fix Spectre v1 vulnerability
    
    commit 9ae24af3669111d418242caec8dd4ebd9ba26860 upstream.
    
    num can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/usb/gadget/function/f_mass_storage.c:3177 fsg_lun_make() warn:
    potential spectre issue 'fsg_opts->common->luns' [r] (local cap)
    
    Fix this by sanitizing num before using it to index
    fsg_opts->common->luns
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Felipe Balbi <felipe.balbi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25c1b59c21dddc85d15c9e8610547f8f6816ade9
Author: Tobias Herzog <t-herzog@gmx.de>
Date:   Sat Sep 22 22:11:11 2018 +0200

    cdc-acm: correct counting of UART states in serial state notification
    
    commit f976d0e5747ca65ccd0fb2a4118b193d70aa1836 upstream.
    
    The usb standard ("Universal Serial Bus Class Definitions for Communication
    Devices") distiguishes between "consistent signals" (DSR, DCD), and
    "irregular signals" (break, ring, parity error, framing error, overrun).
    The bits of "irregular signals" are set, if this error/event occurred on
    the device side and are immeadeatly unset, if the serial state notification
    was sent.
    Like other drivers of real serial ports do, just the occurence of those
    events should be counted in serial_icounter_struct (but no 1->0
    transitions).
    
    Signed-off-by: Tobias Herzog <t-herzog@gmx.de>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fcfb1d41f8d70dfd23cb0d91a9f061f53847b0c
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 16:32:40 2018 +0200

    IB/ucm: Fix Spectre v1 vulnerability
    
    commit 0295e39595e1146522f2722715dba7f7fba42217 upstream.
    
    hdr.cmd can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/infiniband/core/ucm.c:1127 ib_ucm_write() warn: potential
    spectre issue 'ucm_cmd_table' [r] (local cap)
    
    Fix this by sanitizing hdr.cmd before using it to index
    ucm_cmd_table.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eacbd9c55f743b0940fe2d8cf27ef72ac2725f44
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 16:59:01 2018 +0200

    RDMA/ucma: Fix Spectre v1 vulnerability
    
    commit a3671a4f973ee9d9621d60166cc3b037c397d604 upstream.
    
    hdr.cmd can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/infiniband/core/ucma.c:1686 ucma_write() warn: potential
    spectre issue 'ucma_cmd_table' [r] (local cap)
    
    Fix this by sanitizing hdr.cmd before using it to index
    ucm_cmd_table.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1b2b8680bce0c989d79ba970d9293536f5a938d
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Oct 2 23:29:11 2018 +0800

    drm/edid: Add 6 bpc quirk for BOE panel in HP Pavilion 15-n233sl
    
    commit 0711a43b6d84ff9189adfbf83c8bbf56eef794bf upstream.
    
    There's another panel that reports "DFP 1.x compliant TMDS" but it
    supports 6bpc instead of 8 bpc.
    
    Apply 6 bpc quirk for the panel to fix it.
    
    BugLink: https://bugs.launchpad.net/bugs/1794387
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181002152911.4370-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dd400eda5dbcfea6d05b19deedfcf5cab4ceb9c
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 15:06:41 2018 +0200

    ptp: fix Spectre v1 vulnerability
    
    commit efa61c8cf2950ab5c0e66cff3cabe2a2b24e81ba upstream.
    
    pin_index can be indirectly controlled by user-space, hence leading
    to a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/ptp/ptp_chardev.c:253 ptp_ioctl() warn: potential spectre issue
    'ops->pin_config' [r] (local cap)
    
    Fix this by sanitizing pin_index before using it to index
    ops->pin_config, and before passing it as an argument to
    function ptp_set_pinfunc(), in which it is used to index
    info->pin_config.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 186c5856dc5ac1f80655c58a2dfefa1d187f6417
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Oct 17 15:23:26 2018 +0100

    cachefiles: fix the race between cachefiles_bury_object() and rmdir(2)
    
    commit 169b803397499be85bdd1e3d07d6f5e3d4bd669e upstream.
    
    the victim might've been rmdir'ed just before the lock_rename();
    unlike the normal callers, we do not look the source up after the
    parents are locked - we know it beforehand and just recheck that it's
    still the child of what used to be its parent.  Unfortunately,
    the check is too weak - we don't spot a dead directory since its
    ->d_parent is unchanged, dentry is positive, etc.  So we sail all
    the way to ->rename(), with hosting filesystems _not_ expecting
    to be asked renaming an rmdir'ed subdirectory.
    
    The fix is easy, fortunately - the lock on parent is sufficient for
    making IS_DEADDIR() on child safe.
    
    Cc: stable@vger.kernel.org
    Fixes: 9ae326a69004 (CacheFiles: A cache that backs onto a mounted filesystem)
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bb68aaf6436ef43f2f4ceb00149aaa82474648c
Author: Brian Foster <bfoster@redhat.com>
Date:   Sat Nov 3 19:15:24 2018 +0200

    xfs: truncate transaction does not modify the inobt
    
    [ Upstream commit a606ebdb859e78beb757dfefa08001df366e2ef5 ]
    
    The truncate transaction does not ever modify the inode btree, but
    includes an associated log reservation. Update
    xfs_calc_itruncate_reservation() to remove the reservation
    associated with inobt updates.
    
    [Amir:  This commit was merged for kernel v4.16 and a twin commit was
            merged for xfsprogs v4.16. As a result, a small xfs filesystem
            formatted with features -m rmapbt=1,reflink=1 using mkfs.xfs
            version >= v4.16 cannot be mounted with kernel < v4.16.
    
            For example, xfstests generic/17{1,2,3} format a small fs and
            when trying to mount it, they fail with an assert on this very
            demonic line:
    
     XFS (vdc): Log size 3075 blocks too small, minimum size is 3717 blocks
     XFS (vdc): AAIEEE! Log failed size checks. Abort!
     XFS: Assertion failed: 0, file: src/linux/fs/xfs/xfs_log.c, line: 666
    
            The simple solution for stable kernels is to apply this patch,
            because mkfs.xfs v4.16 is already in the wild, so we have to
            assume that xfs filesystems with a "too small" log exist.
            Regardless, xfsprogs maintainers should also consider reverting
            the twin patch to stop creating those filesystems for the sake
            of users with unpatched kernels.]
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Cc: <stable@vger.kernel.org> # v4.9+
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Reviewed-by: Darrick J . Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee74e3561a026785521ded15211f619ba1f5da49
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Aug 29 17:02:16 2018 +0200

    gpio: mxs: Get rid of external API call
    
    [ Upstream commit 833eacc7b5913da9896bacd30db7d490aa777868 ]
    
    The MXS driver was calling back into the GPIO API from
    its irqchip. This is not very elegant, as we are a driver,
    let's just shortcut back into the gpio_chip .get() function
    instead.
    
    This is a tricky case since the .get() callback is not in
    this file, instead assigned by bgpio_init(). Calling the
    function direcly in the gpio_chip is however the lesser
    evil.
    
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Janusz Uzycki <j.uzycki@elproma.com.pl>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29872c3eb6f76bbbe690bc890d3db7a9cf224153
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Oct 2 19:31:24 2017 +0100

    ahci: don't ignore result code of ahci_reset_controller()
    
    [ Upstream commit d312fefea8387503375f728855c9a62de20c9665 ]
    
    ahci_pci_reset_controller() calls ahci_reset_controller(), which may
    fail, but ignores the result code and always returns success. This
    may result in failures like below
    
      ahci 0000:02:00.0: version 3.0
      ahci 0000:02:00.0: enabling device (0000 -> 0003)
      ahci 0000:02:00.0: SSS flag set, parallel bus scan disabled
      ahci 0000:02:00.0: controller reset failed (0xffffffff)
      ahci 0000:02:00.0: failed to stop engine (-5)
        ... repeated many times ...
      ahci 0000:02:00.0: failed to stop engine (-5)
      Unable to handle kernel paging request at virtual address ffff0000093f9018
        ...
      PC is at ahci_stop_engine+0x5c/0xd8 [libahci]
      LR is at ahci_deinit_port.constprop.12+0x1c/0xc0 [libahci]
        ...
      [<ffff000000a17014>] ahci_stop_engine+0x5c/0xd8 [libahci]
      [<ffff000000a196b4>] ahci_deinit_port.constprop.12+0x1c/0xc0 [libahci]
      [<ffff000000a197d8>] ahci_init_controller+0x80/0x168 [libahci]
      [<ffff000000a260f8>] ahci_pci_init_controller+0x60/0x68 [ahci]
      [<ffff000000a26f94>] ahci_init_one+0x75c/0xd88 [ahci]
      [<ffff000008430324>] local_pci_probe+0x3c/0xb8
      [<ffff000008431728>] pci_device_probe+0x138/0x170
      [<ffff000008585e54>] driver_probe_device+0x2dc/0x458
      [<ffff0000085860e4>] __driver_attach+0x114/0x118
      [<ffff000008583ca8>] bus_for_each_dev+0x60/0xa0
      [<ffff000008585638>] driver_attach+0x20/0x28
      [<ffff0000085850b0>] bus_add_driver+0x1f0/0x2a8
      [<ffff000008586ae0>] driver_register+0x60/0xf8
      [<ffff00000842f9b4>] __pci_register_driver+0x3c/0x48
      [<ffff000000a3001c>] ahci_pci_driver_init+0x1c/0x1000 [ahci]
      [<ffff000008083918>] do_one_initcall+0x38/0x120
    
    where an obvious hardware level failure results in an unnecessary 15 second
    delay and a subsequent crash.
    
    So record the result code of ahci_reset_controller() and relay it, rather
    than ignoring it.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79d47dd686d09ad32af1ad2f9191dbc43909bf86
Author: Jia-Ju Bai <baijiaju1990@163.com>
Date:   Tue Oct 3 10:25:22 2017 +0800

    crypto: shash - Fix a sleep-in-atomic bug in shash_setkey_unaligned
    
    [ Upstream commit 9039f3ef446e9ffa200200c934f049add9e58426 ]
    
    The SCTP program may sleep under a spinlock, and the function call path is:
    sctp_generate_t3_rtx_event (acquire the spinlock)
      sctp_do_sm
        sctp_side_effects
          sctp_cmd_interpreter
            sctp_make_init_ack
              sctp_pack_cookie
                crypto_shash_setkey
                  shash_setkey_unaligned
                    kmalloc(GFP_KERNEL)
    
    For the same reason, the orinoco driver may sleep in interrupt handler,
    and the function call path is:
    orinoco_rx_isr_tasklet
      orinoco_rx
        orinoco_mic
          crypto_shash_setkey
            shash_setkey_unaligned
              kmalloc(GFP_KERNEL)
    
    To fix it, GFP_KERNEL is replaced with GFP_ATOMIC.
    This bug is found by my static analysis tool and my code review.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@163.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eba69ae2afef955377e17b746ef14c5a245f4bdb
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Nov 2 09:54:00 2018 -0400

    Revert "x86/mm: Expand static page table for fixmap space"
    
    This reverts commit 3a8304b7ad2e291777e8499e39390145d932a2fd, which was
    upstream commit 05ab1d8a4b36ee912b7087c6da127439ed0a903e.
    
    Ben Hutchings writes:
    
    This backport is incorrect.  The part that updated __startup_64() in
    arch/x86/kernel/head64.c was dropped, presumably because that function
    doesn't exist in 4.9.  However that seems to be an essential of the
    fix.  In 4.9 the startup_64 routine in arch/x86/kernel/head_64.S would
    need to be changed instead.
    
    I also found that this introduces new boot-time warnings on some
    systems if CONFIG_DEBUG_WX is enabled.
    
    So, unless someone provides fixes for those issues, I think this should
    be reverted for the 4.9 branch.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ced272d8da2029f488edc12dd03b354a88c6cbc5
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Thu Oct 18 21:25:07 2018 +0200

    ip6_tunnel: Fix encapsulation layout
    
    [ Upstream commit d4d576f5ab7edcb757bb33e6a5600666a0b1232d ]
    
    Commit 058214a4d1df ("ip6_tun: Add infrastructure for doing
    encapsulation") added the ip6_tnl_encap() call in ip6_tnl_xmit(), before
    the call to ipv6_push_frag_opts() to append the IPv6 Tunnel Encapsulation
    Limit option (option 4, RFC 2473, par. 5.1) to the outer IPv6 header.
    
    As long as the option didn't actually end up in generated packets, this
    wasn't an issue. Then commit 89a23c8b528b ("ip6_tunnel: Fix missing tunnel
    encapsulation limit option") fixed sending of this option, and the
    resulting layout, e.g. for FoU, is:
    
    .-------------------.------------.----------.-------------------.----- - -
    | Outer IPv6 Header | UDP header | Option 4 | Inner IPv6 Header | Payload
    '-------------------'------------'----------'-------------------'----- - -
    
    Needless to say, FoU and GUE (at least) won't work over IPv6. The option
    is appended by default, and I couldn't find a way to disable it with the
    current iproute2.
    
    Turn this into a more reasonable:
    
    .-------------------.----------.------------.-------------------.----- - -
    | Outer IPv6 Header | Option 4 | UDP header | Inner IPv6 Header | Payload
    '-------------------'----------'------------'-------------------'----- - -
    
    With this, and with 84dad55951b0 ("udp6: fix encap return code for
    resubmitting"), FoU and GUE work again over IPv6.
    
    Fixes: 058214a4d1df ("ip6_tun: Add infrastructure for doing encapsulation")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9819741aeec7ac15c4428b32fe97fe9f40218917
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Mon Oct 29 20:36:43 2018 +0000

    rtnetlink: Disallow FDB configuration for non-Ethernet device
    
    [ Upstream commit da71577545a52be3e0e9225a946e5fd79cfab015 ]
    
    When an FDB entry is configured, the address is validated to have the
    length of an Ethernet address, but the device for which the address is
    configured can be of any type.
    
    The above can result in the use of uninitialized memory when the address
    is later compared against existing addresses since 'dev->addr_len' is
    used and it may be greater than ETH_ALEN, as with ip6tnl devices.
    
    Fix this by making sure that FDB entries are only configured for
    Ethernet devices.
    
    BUG: KMSAN: uninit-value in memcmp+0x11d/0x180 lib/string.c:863
    CPU: 1 PID: 4318 Comm: syz-executor998 Not tainted 4.19.0-rc3+ #49
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x14b/0x190 lib/dump_stack.c:113
      kmsan_report+0x183/0x2b0 mm/kmsan/kmsan.c:956
      __msan_warning+0x70/0xc0 mm/kmsan/kmsan_instr.c:645
      memcmp+0x11d/0x180 lib/string.c:863
      dev_uc_add_excl+0x165/0x7b0 net/core/dev_addr_lists.c:464
      ndo_dflt_fdb_add net/core/rtnetlink.c:3463 [inline]
      rtnl_fdb_add+0x1081/0x1270 net/core/rtnetlink.c:3558
      rtnetlink_rcv_msg+0xa0b/0x1530 net/core/rtnetlink.c:4715
      netlink_rcv_skb+0x36e/0x5f0 net/netlink/af_netlink.c:2454
      rtnetlink_rcv+0x50/0x60 net/core/rtnetlink.c:4733
      netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
      netlink_unicast+0x1638/0x1720 net/netlink/af_netlink.c:1343
      netlink_sendmsg+0x1205/0x1290 net/netlink/af_netlink.c:1908
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xe70/0x1290 net/socket.c:2114
      __sys_sendmsg net/socket.c:2152 [inline]
      __do_sys_sendmsg net/socket.c:2161 [inline]
      __se_sys_sendmsg+0x2a3/0x3d0 net/socket.c:2159
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2159
      do_syscall_64+0xb8/0x100 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440ee9
    Code: e8 cc ab 02 00 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48 89 f7
    48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff
    ff 0f 83 bb 0a fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fff6a93b518 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 0000000000440ee9
    RDX: 0000000000000000 RSI: 0000000020000240 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 000000000000b4b0
    R13: 0000000000401ec0 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:256 [inline]
      kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:181
      kmsan_kmalloc+0x98/0x100 mm/kmsan/kmsan_hooks.c:91
      kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:100
      slab_post_alloc_hook mm/slab.h:446 [inline]
      slab_alloc_node mm/slub.c:2718 [inline]
      __kmalloc_node_track_caller+0x9e7/0x1160 mm/slub.c:4351
      __kmalloc_reserve net/core/skbuff.c:138 [inline]
      __alloc_skb+0x2f5/0x9e0 net/core/skbuff.c:206
      alloc_skb include/linux/skbuff.h:996 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
      netlink_sendmsg+0xb49/0x1290 net/netlink/af_netlink.c:1883
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xe70/0x1290 net/socket.c:2114
      __sys_sendmsg net/socket.c:2152 [inline]
      __do_sys_sendmsg net/socket.c:2161 [inline]
      __se_sys_sendmsg+0x2a3/0x3d0 net/socket.c:2159
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2159
      do_syscall_64+0xb8/0x100 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    v2:
    * Make error message more specific (David)
    
    Fixes: 090096bf3db1 ("net: generic fdb support for drivers without ndo_fdb_<op>")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-and-tested-by: syzbot+3a288d5f5530b901310e@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+d53ab4e92a1db04110ff@syzkaller.appspotmail.com
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Cc: David Ahern <dsahern@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c49b5e584e0927d02770e37304d89032a65b269
Author: Dimitris Michailidis <dmichail@google.com>
Date:   Fri Oct 19 17:07:13 2018 -0700

    net: fix pskb_trim_rcsum_slow() with odd trim offset
    
    [ Upstream commit d55bef5059dd057bd077155375c581b49d25be7e ]
    
    We've been getting checksum errors involving small UDP packets, usually
    59B packets with 1 extra non-zero padding byte. netdev_rx_csum_fault()
    has been complaining that HW is providing bad checksums. Turns out the
    problem is in pskb_trim_rcsum_slow(), introduced in commit 88078d98d1bb
    ("net: pskb_trim_rcsum() and CHECKSUM_COMPLETE are friends").
    
    The source of the problem is that when the bytes we are trimming start
    at an odd address, as in the case of the 1 padding byte above,
    skb_checksum() returns a byte-swapped value. We cannot just combine this
    with skb->csum using csum_sub(). We need to use csum_block_sub() here
    that takes into account the parity of the start address and handles the
    swapping.
    
    Matches existing code in __skb_postpull_rcsum() and esp_remove_trailer().
    
    Fixes: 88078d98d1bb ("net: pskb_trim_rcsum() and CHECKSUM_COMPLETE are friends")
    Signed-off-by: Dimitris Michailidis <dmichail@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0376b839cc55eca3c66de48f2a39788dfc97e2ab
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Nov 1 12:02:37 2018 -0700

    net: drop skb on failure in ip_check_defrag()
    
    [ Upstream commit 7de414a9dd91426318df7b63da024b2b07e53df5 ]
    
    Most callers of pskb_trim_rcsum() simply drop the skb when
    it fails, however, ip_check_defrag() still continues to pass
    the skb up to stack. This is suspicious.
    
    In ip_check_defrag(), after we learn the skb is an IP fragment,
    passing the skb to callers makes no sense, because callers expect
    fragments are defrag'ed on success. So, dropping the skb when we
    can't defrag it is reasonable.
    
    Note, prior to commit 88078d98d1bb, this is not a big problem as
    checksum will be fixed up anyway. After it, the checksum is not
    correct on failure.
    
    Found this during code review.
    
    Fixes: 88078d98d1bb ("net: pskb_trim_rcsum() and CHECKSUM_COMPLETE are friends")
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 210c21f1ffe1d07dbb2ea2f874923b3b1959a6c2
Author: Tobias Jungel <tobias.jungel@gmail.com>
Date:   Sun Oct 28 12:54:10 2018 +0100

    bonding: fix length of actor system
    
    [ Upstream commit 414dd6fb9a1a1b59983aea7bf0f79f0085ecc5b8 ]
    
    The attribute IFLA_BOND_AD_ACTOR_SYSTEM is sent to user space having the
    length of sizeof(bond->params.ad_actor_system) which is 8 byte. This
    patch aligns the length to ETH_ALEN to have the same MAC address exposed
    as using sysfs.
    
    Fixes: f87fda00b6ed2 ("bonding: prevent out of bound accesses")
    Signed-off-by: Tobias Jungel <tobias.jungel@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0223d1f78f50770b4455c106b96c820fd45f1f7
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Mon Oct 8 10:49:35 2018 -0500

    ethtool: fix a privilege escalation bug
    
    [ Upstream commit 58f5bbe331c566f49c9559568f982202a278aa78 ]
    
    In dev_ethtool(), the eth command 'ethcmd' is firstly copied from the
    use-space buffer 'useraddr' and checked to see whether it is
    ETHTOOL_PERQUEUE. If yes, the sub-command 'sub_cmd' is further copied from
    the user space. Otherwise, 'sub_cmd' is the same as 'ethcmd'. Next,
    according to 'sub_cmd', a permission check is enforced through the function
    ns_capable(). For example, the permission check is required if 'sub_cmd' is
    ETHTOOL_SCOALESCE, but it is not necessary if 'sub_cmd' is
    ETHTOOL_GCOALESCE, as suggested in the comment "Allow some commands to be
    done by anyone". The following execution invokes different handlers
    according to 'ethcmd'. Specifically, if 'ethcmd' is ETHTOOL_PERQUEUE,
    ethtool_set_per_queue() is called. In ethtool_set_per_queue(), the kernel
    object 'per_queue_opt' is copied again from the user-space buffer
    'useraddr' and 'per_queue_opt.sub_command' is used to determine which
    operation should be performed. Given that the buffer 'useraddr' is in the
    user space, a malicious user can race to change the sub-command between the
    two copies. In particular, the attacker can supply ETHTOOL_PERQUEUE and
    ETHTOOL_GCOALESCE to bypass the permission check in dev_ethtool(). Then
    before ethtool_set_per_queue() is called, the attacker changes
    ETHTOOL_GCOALESCE to ETHTOOL_SCOALESCE. In this way, the attacker can
    bypass the permission check and execute ETHTOOL_SCOALESCE.
    
    This patch enforces a check in ethtool_set_per_queue() after the second
    copy from 'useraddr'. If the sub-command is different from the one obtained
    in the first copy in dev_ethtool(), an error code EINVAL will be returned.
    
    Fixes: f38d138a7da6 ("net/ethtool: support set coalesce per queue")
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 242e6f52a0cd1b5526a093e6bb39cec2b76b0284
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue Oct 30 14:10:49 2018 +0800

    vhost: Fix Spectre V1 vulnerability
    
    [ Upstream commit ff002269a4ee9c769dbf9365acef633ebcbd6cbe ]
    
    The idx in vhost_vring_ioctl() was controlled by userspace, hence a
    potential exploitation of the Spectre variant 1 vulnerability.
    
    Fixing this by sanitizing idx before using it to index d->vqs.
    
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b0bb7e515b2292da2be1286b994ad1cf1096af3
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Tue Oct 16 15:18:17 2018 -0300

    sctp: fix race on sctp_id2asoc
    
    [ Upstream commit b336decab22158937975293aea79396525f92bb3 ]
    
    syzbot reported an use-after-free involving sctp_id2asoc.  Dmitry Vyukov
    helped to root cause it and it is because of reading the asoc after it
    was freed:
    
            CPU 1                       CPU 2
    (working on socket 1)            (working on socket 2)
                                     sctp_association_destroy
    sctp_id2asoc
       spin lock
         grab the asoc from idr
       spin unlock
                                       spin lock
                                         remove asoc from idr
                                       spin unlock
                                       free(asoc)
       if asoc->base.sk != sk ... [*]
    
    This can only be hit if trying to fetch asocs from different sockets. As
    we have a single IDR for all asocs, in all SCTP sockets, their id is
    unique on the system. An application can try to send stuff on an id
    that matches on another socket, and the if in [*] will protect from such
    usage. But it didn't consider that as that asoc may belong to another
    socket, it may be freed in parallel (read: under another socket lock).
    
    We fix it by moving the checks in [*] into the protected region. This
    fixes it because the asoc cannot be freed while the lock is held.
    
    Reported-by: syzbot+c7dd55d7aec49d48e49a@syzkaller.appspotmail.com
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01a2ff110120315b768f63a10cffb7ae48d68902
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Oct 18 19:56:01 2018 +0200

    r8169: fix NAPI handling under high load
    
    [ Upstream commit 6b839b6cf9eada30b086effb51e5d6076bafc761 ]
    
    rtl_rx() and rtl_tx() are called only if the respective bits are set
    in the interrupt status register. Under high load NAPI may not be
    able to process all data (work_done == budget) and it will schedule
    subsequent calls to the poll callback.
    rtl_ack_events() however resets the bits in the interrupt status
    register, therefore subsequent calls to rtl8169_poll() won't call
    rtl_rx() and rtl_tx() - chip interrupts are still disabled.
    
    Fix this by calling rtl_rx() and rtl_tx() independent of the bits
    set in the interrupt status register. Both functions will detect
    if there's nothing to do for them.
    
    Fixes: da78dbff2e05 ("r8169: remove work from irq handler.")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33424e7ca00c657a1eba09ca6da54f0f45d8f5b6
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Tue Oct 23 16:04:31 2018 -0600

    net: udp: fix handling of CHECKSUM_COMPLETE packets
    
    [ Upstream commit db4f1be3ca9b0ef7330763d07bf4ace83ad6f913 ]
    
    Current handling of CHECKSUM_COMPLETE packets by the UDP stack is
    incorrect for any packet that has an incorrect checksum value.
    
    udp4/6_csum_init() will both make a call to
    __skb_checksum_validate_complete() to initialize/validate the csum
    field when receiving a CHECKSUM_COMPLETE packet. When this packet
    fails validation, skb->csum will be overwritten with the pseudoheader
    checksum so the packet can be fully validated by software, but the
    skb->ip_summed value will be left as CHECKSUM_COMPLETE so that way
    the stack can later warn the user about their hardware spewing bad
    checksums. Unfortunately, leaving the SKB in this state can cause
    problems later on in the checksum calculation.
    
    Since the the packet is still marked as CHECKSUM_COMPLETE,
    udp_csum_pull_header() will SUBTRACT the checksum of the UDP header
    from skb->csum instead of adding it, leaving us with a garbage value
    in that field. Once we try to copy the packet to userspace in the
    udp4/6_recvmsg(), we'll make a call to skb_copy_and_csum_datagram_msg()
    to checksum the packet data and add it in the garbage skb->csum value
    to perform our final validation check.
    
    Since the value we're validating is not the proper checksum, it's possible
    that the folded value could come out to 0, causing us not to drop the
    packet. Instead, we believe that the packet was checksummed incorrectly
    by hardware since skb->ip_summed is still CHECKSUM_COMPLETE, and we attempt
    to warn the user with netdev_rx_csum_fault(skb->dev);
    
    Unfortunately, since this is the UDP path, skb->dev has been overwritten
    by skb->dev_scratch and is no longer a valid pointer, so we end up
    reading invalid memory.
    
    This patch addresses this problem in two ways:
            1) Do not use the dev pointer when calling netdev_rx_csum_fault()
               from skb_copy_and_csum_datagram_msg(). Since this gets called
               from the UDP path where skb->dev has been overwritten, we have
               no way of knowing if the pointer is still valid. Also for the
               sake of consistency with the other uses of
               netdev_rx_csum_fault(), don't attempt to call it if the
               packet was checksummed by software.
    
            2) Add better CHECKSUM_COMPLETE handling to udp4/6_csum_init().
               If we receive a packet that's CHECKSUM_COMPLETE that fails
               verification (i.e. skb->csum_valid == 0), check who performed
               the calculation. It's possible that the checksum was done in
               software by the network stack earlier (such as Netfilter's
               CONNTRACK module), and if that says the checksum is bad,
               we can drop the packet immediately instead of waiting until
               we try and copy it to userspace. Otherwise, we need to
               mark the SKB as CHECKSUM_NONE, since the skb->csum field
               no longer contains the full packet checksum after the
               call to __skb_checksum_validate_complete().
    
    Fixes: e6afc8ace6dd ("udp: remove headers from UDP packets before queueing")
    Fixes: c84d949057ca ("udp: copy skb->truesize in the first cache line")
    Cc: Sam Kumar <samanthakumar@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b9a62c58d4d6493bac8e6130ccb67cc8c8bb4c5
Author: Niklas Cassel <niklas.cassel@linaro.org>
Date:   Wed Oct 31 16:08:10 2018 +0100

    net: stmmac: Fix stmmac_mdio_reset() when building stmmac as modules
    
    [ Upstream commit 30549aab146ccb1275230c3b4b4bc6b4181fd54e ]
    
    When building stmmac, it is only possible to select CONFIG_DWMAC_GENERIC,
    or any of the glue drivers, when CONFIG_STMMAC_PLATFORM is set.
    The only exception is CONFIG_STMMAC_PCI.
    
    When calling of_mdiobus_register(), it will call our ->reset()
    callback, which is set to stmmac_mdio_reset().
    
    Most of the code in stmmac_mdio_reset() is protected by a
    "#if defined(CONFIG_STMMAC_PLATFORM)", which will evaluate
    to false when CONFIG_STMMAC_PLATFORM=m.
    
    Because of this, the phy reset gpio will only be pulled when
    stmmac is built as built-in, but not when built as modules.
    
    Fix this by using "#if IS_ENABLED()" instead of "#if defined()".
    
    Signed-off-by: Niklas Cassel <niklas.cassel@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f57ef24f811ccca74df04cc39b30e023654d9e99
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Thu Oct 18 09:36:46 2018 -0500

    net: socket: fix a missing-check bug
    
    [ Upstream commit b6168562c8ce2bd5a30e213021650422e08764dc ]
    
    In ethtool_ioctl(), the ioctl command 'ethcmd' is checked through a switch
    statement to see whether it is necessary to pre-process the ethtool
    structure, because, as mentioned in the comment, the structure
    ethtool_rxnfc is defined with padding. If yes, a user-space buffer 'rxnfc'
    is allocated through compat_alloc_user_space(). One thing to note here is
    that, if 'ethcmd' is ETHTOOL_GRXCLSRLALL, the size of the buffer 'rxnfc' is
    partially determined by 'rule_cnt', which is actually acquired from the
    user-space buffer 'compat_rxnfc', i.e., 'compat_rxnfc->rule_cnt', through
    get_user(). After 'rxnfc' is allocated, the data in the original user-space
    buffer 'compat_rxnfc' is then copied to 'rxnfc' through copy_in_user(),
    including the 'rule_cnt' field. However, after this copy, no check is
    re-enforced on 'rxnfc->rule_cnt'. So it is possible that a malicious user
    race to change the value in the 'compat_rxnfc->rule_cnt' between these two
    copies. Through this way, the attacker can bypass the previous check on
    'rule_cnt' and inject malicious data. This can cause undefined behavior of
    the kernel and introduce potential security risk.
    
    This patch avoids the above issue via copying the value acquired by
    get_user() to 'rxnfc->rule_cn', if 'ethcmd' is ETHTOOL_GRXCLSRLALL.
    
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3628c3dddaf68e792cd311a2654dacf7136c72a5
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Oct 26 15:51:06 2018 -0700

    net: sched: gred: pass the right attribute to gred_change_table_def()
    
    [ Upstream commit 38b4f18d56372e1e21771ab7b0357b853330186c ]
    
    gred_change_table_def() takes a pointer to TCA_GRED_DPS attribute,
    and expects it will be able to interpret its contents as
    struct tc_gred_sopt.  Pass the correct gred attribute, instead of
    TCA_OPTIONS.
    
    This bug meant the table definition could never be changed after
    Qdisc was initialized (unless whatever TCA_OPTIONS contained both
    passed netlink validation and was a valid struct tc_gred_sopt...).
    
    Old behaviour:
    $ ip link add type dummy
    $ tc qdisc replace dev dummy0 parent root handle 7: \
         gred setup vqs 4 default 0
    $ tc qdisc replace dev dummy0 parent root handle 7: \
         gred setup vqs 4 default 0
    RTNETLINK answers: Invalid argument
    
    Now:
    $ ip link add type dummy
    $ tc qdisc replace dev dummy0 parent root handle 7: \
         gred setup vqs 4 default 0
    $ tc qdisc replace dev dummy0 parent root handle 7: \
         gred setup vqs 4 default 0
    $ tc qdisc replace dev dummy0 parent root handle 7: \
         gred setup vqs 4 default 0
    
    Fixes: f62d6b936df5 ("[PKT_SCHED]: GRED: Use central VQ change procedure")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f86c55c6d0d8293917ca88347384480c321e3825
Author: David Ahern <dsahern@gmail.com>
Date:   Fri Oct 19 10:00:19 2018 -0700

    net/ipv6: Fix index counter for unicast addresses in in6_dump_addrs
    
    [ Upstream commit 4ba4c566ba8448a05e6257e0b98a21f1a0d55315 ]
    
    The loop wants to skip previously dumped addresses, so loops until
    current index >= saved index. If the message fills it wants to save
    the index for the next address to dump - ie., the one that did not
    fit in the current message.
    
    Currently, it is incrementing the index counter before comparing to the
    saved index, and then the saved index is off by 1 - it assumes the
    current address is going to fit in the message.
    
    Change the index handling to increment only after a succesful dump.
    
    Fixes: 502a2ffd7376a ("ipv6: convert idev_list to list macros")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa23c2207d2911d04df76001cd98d212cedfe69b
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Oct 11 11:15:13 2018 -0700

    llc: set SOCK_RCU_FREE in llc_sap_add_socket()
    
    [ Upstream commit 5a8e7aea953bdb6d4da13aff6f1e7f9c62023499 ]
    
    WHen an llc sock is added into the sk_laddr_hash of an llc_sap,
    it is not marked with SOCK_RCU_FREE.
    
    This causes that the sock could be freed while it is still being
    read by __llc_lookup_established() with RCU read lock. sock is
    refcounted, but with RCU read lock, nothing prevents the readers
    getting a zero refcnt.
    
    Fix it by setting SOCK_RCU_FREE in llc_sap_add_socket().
    
    Reported-by: syzbot+11e05f04c15e03be5254@syzkaller.appspotmail.com
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 510e6c3bd51ac59c0ff2296c2ce84529ac7cfbfc
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Wed Oct 24 14:37:21 2018 +0200

    ipv6/ndisc: Preserve IPv6 control buffer if protocol error handlers are called
    
    [ Upstream commit ee1abcf689353f36d9322231b4320926096bdee0 ]
    
    Commit a61bbcf28a8c ("[NET]: Store skb->timestamp as offset to a base
    timestamp") introduces a neighbour control buffer and zeroes it out in
    ndisc_rcv(), as ndisc_recv_ns() uses it.
    
    Commit f2776ff04722 ("[IPV6]: Fix address/interface handling in UDP and
    DCCP, according to the scoping architecture.") introduces the usage of the
    IPv6 control buffer in protocol error handlers (e.g. inet6_iif() in
    present-day __udp6_lib_err()).
    
    Now, with commit b94f1c0904da ("ipv6: Use icmpv6_notify() to propagate
    redirect, instead of rt6_redirect()."), we call protocol error handlers
    from ndisc_redirect_rcv(), after the control buffer is already stolen and
    some parts are already zeroed out. This implies that inet6_iif() on this
    path will always return zero.
    
    This gives unexpected results on UDP socket lookup in __udp6_lib_err(), as
    we might actually need to match sockets for a given interface.
    
    Instead of always claiming the control buffer in ndisc_rcv(), do that only
    when needed.
    
    Fixes: b94f1c0904da ("ipv6: Use icmpv6_notify() to propagate redirect, instead of rt6_redirect().")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36521206587218e1883c865496c80f48112a746a
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 12 18:58:53 2018 -0700

    ipv6: mcast: fix a use-after-free in inet6_mc_check
    
    [ Upstream commit dc012f3628eaecfb5ba68404a5c30ef501daf63d ]
    
    syzbot found a use-after-free in inet6_mc_check [1]
    
    The problem here is that inet6_mc_check() uses rcu
    and read_lock(&iml->sflock)
    
    So the fact that ip6_mc_leave_src() is called under RTNL
    and the socket lock does not help us, we need to acquire
    iml->sflock in write mode.
    
    In the future, we should convert all this stuff to RCU.
    
    [1]
    BUG: KASAN: use-after-free in ipv6_addr_equal include/net/ipv6.h:521 [inline]
    BUG: KASAN: use-after-free in inet6_mc_check+0xae7/0xb40 net/ipv6/mcast.c:649
    Read of size 8 at addr ffff8801ce7f2510 by task syz-executor0/22432
    
    CPU: 1 PID: 22432 Comm: syz-executor0 Not tainted 4.19.0-rc7+ #280
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c4/0x2b4 lib/dump_stack.c:113
     print_address_description.cold.8+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     ipv6_addr_equal include/net/ipv6.h:521 [inline]
     inet6_mc_check+0xae7/0xb40 net/ipv6/mcast.c:649
     __raw_v6_lookup+0x320/0x3f0 net/ipv6/raw.c:98
     ipv6_raw_deliver net/ipv6/raw.c:183 [inline]
     raw6_local_deliver+0x3d3/0xcb0 net/ipv6/raw.c:240
     ip6_input_finish+0x467/0x1aa0 net/ipv6/ip6_input.c:345
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_input+0xe9/0x600 net/ipv6/ip6_input.c:426
     ip6_mc_input+0x48a/0xd20 net/ipv6/ip6_input.c:503
     dst_input include/net/dst.h:450 [inline]
     ip6_rcv_finish+0x17a/0x330 net/ipv6/ip6_input.c:76
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ipv6_rcv+0x120/0x640 net/ipv6/ip6_input.c:271
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4913
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5023
     netif_receive_skb_internal+0x12c/0x620 net/core/dev.c:5126
     napi_frags_finish net/core/dev.c:5664 [inline]
     napi_gro_frags+0x75a/0xc90 net/core/dev.c:5737
     tun_get_user+0x3189/0x4250 drivers/net/tun.c:1923
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:1968
     call_write_iter include/linux/fs.h:1808 [inline]
     do_iter_readv_writev+0x8b0/0xa80 fs/read_write.c:680
     do_iter_write+0x185/0x5f0 fs/read_write.c:959
     vfs_writev+0x1f1/0x360 fs/read_write.c:1004
     do_writev+0x11a/0x310 fs/read_write.c:1039
     __do_sys_writev fs/read_write.c:1112 [inline]
     __se_sys_writev fs/read_write.c:1109 [inline]
     __x64_sys_writev+0x75/0xb0 fs/read_write.c:1109
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457421
    Code: 75 14 b8 14 00 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 34 b5 fb ff c3 48 83 ec 08 e8 1a 2d 00 00 48 89 04 24 b8 14 00 00 00 0f 05 <48> 8b 3c 24 48 89 c2 e8 63 2d 00 00 48 89 d0 48 83 c4 08 48 3d 01
    RSP: 002b:00007f2d30ecaba0 EFLAGS: 00000293 ORIG_RAX: 0000000000000014
    RAX: ffffffffffffffda RBX: 000000000000003e RCX: 0000000000457421
    RDX: 0000000000000001 RSI: 00007f2d30ecabf0 RDI: 00000000000000f0
    RBP: 0000000020000500 R08: 00000000000000f0 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000293 R12: 00007f2d30ecb6d4
    R13: 00000000004c4890 R14: 00000000004d7b90 R15: 00000000ffffffff
    
    Allocated by task 22437:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     __do_kmalloc mm/slab.c:3718 [inline]
     __kmalloc+0x14e/0x760 mm/slab.c:3727
     kmalloc include/linux/slab.h:518 [inline]
     sock_kmalloc+0x15a/0x1f0 net/core/sock.c:1983
     ip6_mc_source+0x14dd/0x1960 net/ipv6/mcast.c:427
     do_ipv6_setsockopt.isra.9+0x3afb/0x45d0 net/ipv6/ipv6_sockglue.c:743
     ipv6_setsockopt+0xbd/0x170 net/ipv6/ipv6_sockglue.c:933
     rawv6_setsockopt+0x59/0x140 net/ipv6/raw.c:1069
     sock_common_setsockopt+0x9a/0xe0 net/core/sock.c:3038
     __sys_setsockopt+0x1ba/0x3c0 net/socket.c:1902
     __do_sys_setsockopt net/socket.c:1913 [inline]
     __se_sys_setsockopt net/socket.c:1910 [inline]
     __x64_sys_setsockopt+0xbe/0x150 net/socket.c:1910
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 22430:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kfree+0xcf/0x230 mm/slab.c:3813
     __sock_kfree_s net/core/sock.c:2004 [inline]
     sock_kfree_s+0x29/0x60 net/core/sock.c:2010
     ip6_mc_leave_src+0x11a/0x1d0 net/ipv6/mcast.c:2448
     __ipv6_sock_mc_close+0x20b/0x4e0 net/ipv6/mcast.c:310
     ipv6_sock_mc_close+0x158/0x1d0 net/ipv6/mcast.c:328
     inet6_release+0x40/0x70 net/ipv6/af_inet6.c:452
     __sock_release+0xd7/0x250 net/socket.c:579
     sock_close+0x19/0x20 net/socket.c:1141
     __fput+0x385/0xa30 fs/file_table.c:278
     ____fput+0x15/0x20 fs/file_table.c:309
     task_work_run+0x1e8/0x2a0 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:193 [inline]
     exit_to_usermode_loop+0x318/0x380 arch/x86/entry/common.c:166
     prepare_exit_to_usermode arch/x86/entry/common.c:197 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:268 [inline]
     do_syscall_64+0x6be/0x820 arch/x86/entry/common.c:293
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801ce7f2500
     which belongs to the cache kmalloc-192 of size 192
    The buggy address is located 16 bytes inside of
     192-byte region [ffff8801ce7f2500, ffff8801ce7f25c0)
    The buggy address belongs to the page:
    page:ffffea000739fc80 count:1 mapcount:0 mapping:ffff8801da800040 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0006f6e548 ffffea000737b948 ffff8801da800040
    raw: 0000000000000000 ffff8801ce7f2000 0000000100000010 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801ce7f2400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801ce7f2480: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    >ffff8801ce7f2500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                             ^
     ffff8801ce7f2580: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8801ce7f2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f2d007016f36f6844a6d2a442c305d68aeb5f61
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Sat Oct 27 12:07:47 2018 +0300

    net: bridge: remove ipv6 zero address check in mcast queries
    
    commit 0fe5119e267f3e3d8ac206895f5922195ec55a8a upstream.
    
    Recently a check was added which prevents marking of routers with zero
    source address, but for IPv6 that cannot happen as the relevant RFCs
    actually forbid such packets:
    RFC 2710 (MLDv1):
    "To be valid, the Query message MUST
     come from a link-local IPv6 Source Address, be at least 24 octets
     long, and have a correct MLD checksum."
    
    Same goes for RFC 3810.
    
    And also it can be seen as a requirement in ipv6_mc_check_mld_query()
    which is used by the bridge to validate the message before processing
    it. Thus any queries with :: source address won't be processed anyway.
    So just remove the check for zero IPv6 source address from the query
    processing function.
    
    Fixes: 5a2de63fd1a5 ("bridge: do not add port to router list when receives query with source 0.0.0.0")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4959af07741c892846d450028daf0e5cb2a9eac
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Oct 26 10:28:43 2018 +0800

    bridge: do not add port to router list when receives query with source 0.0.0.0
    
    commit 5a2de63fd1a59c30c02526d427bc014b98adf508 upstream.
    
    Based on RFC 4541, 2.1.1.  IGMP Forwarding Rules
    
      The switch supporting IGMP snooping must maintain a list of
      multicast routers and the ports on which they are attached.  This
      list can be constructed in any combination of the following ways:
    
      a) This list should be built by the snooping switch sending
         Multicast Router Solicitation messages as described in IGMP
         Multicast Router Discovery [MRDISC].  It may also snoop
         Multicast Router Advertisement messages sent by and to other
         nodes.
    
      b) The arrival port for IGMP Queries (sent by multicast routers)
         where the source address is not 0.0.0.0.
    
    We should not add the port to router list when receives query with source
    0.0.0.0.
    
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Acked-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a7f15eacc1f0ed17913c9bf2a77b606e3eee37d
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Thu Jul 5 15:15:27 2018 +0200

    perf tools: Disable parallelism for 'make clean'
    
    [ Upstream commit da15fc2fa9c07b23db8f5e479bd8a9f0d741ca07 ]
    
    The Yocto build system does a 'make clean' when rebuilding due to
    changed dependencies, and that consistently fails for me (causing the
    whole BSP build to fail) with errors such as
    
    | find: '[...]/perf/1.0-r9/perf-1.0/plugin_mac80211.so': No such file or directory
    | find: '[...]/perf/1.0-r9/perf-1.0/plugin_mac80211.so': No such file or directory
    | find: find: '[...]/perf/1.0-r9/perf-1.0/libtraceevent.a''[...]/perf/1.0-r9/perf-1.0/libtraceevent.a': No such file or directory: No such file or directory
    |
    [...]
    | find: cannot delete '/mnt/xfs/devel/pil/yocto/tmp-glibc/work/wandboard-oe-linux-gnueabi/perf/1.0-r9/perf-1.0/util/.pstack.o.cmd': No such file or directory
    
    Apparently (despite the comment), 'make clean' ends up launching
    multiple sub-makes that all want to remove the same things - perhaps
    this only happens in combination with a O=... parameter. In any case, we
    don't lose much by explicitly disabling the parallelism for the clean
    target, and it makes automated builds much more reliable.
    
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20180705131527.19749-1-linux@rasmusvillemoes.dk
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2edec22d18758c9b29301ded2291f051d65422e9
Author: Sasha Levin <sashal@kernel.org>
Date:   Wed Oct 31 11:06:10 2018 -0400

    Revert "netfilter: ipv6: nf_defrag: drop skb dst before queueing"
    
    This reverts commit ad8b1ffc3efae2f65080bdb11145c87d299b8f9a.
    
    From Florian Westphal <fw@strlen.de>:
    
            It causes kernel crash for locally generated ipv6 fragments
            when netfilter ipv6 defragmentation is used.
    
            The faulty commit is not essential for -stable, it only
            delays netns teardown for longer than needed when that netns
            still has ipv6 frags queued.  Much better than crash :-/
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31e29bafe9148f0e509119e826b7f453055bcbb0
Author: Kimmo Rautkoski <ext-kimmo.rautkoski@vaisala.com>
Date:   Sat Oct 20 22:44:42 2018 +0300

    mtd: spi-nor: Add support for is25wp series chips
    
    [ Upstream commit d616f81cdd2a21edfa90a595a4e9b143f5ba8414 ]
    
    Added support for is25wp032, is25wp064 and is25wp128.
    
    Signed-off-by: Kimmo Rautkoski <ext-kimmo.rautkoski@vaisala.com>
    Reviewed-by: Marek Vasut <marek.vasut@gmail.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    [ Adrian Bunk: Trivial adaption to changed context. ]
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9dbac7caac2d7137dd9ecb9a02025f3cf1ad55d6
Author: Khazhismel Kumykov <khazhy@google.com>
Date:   Fri Oct 12 21:34:40 2018 -0700

    fs/fat/fatent.c: add cond_resched() to fat_count_free_clusters()
    
    [ Upstream commit ac081c3be3fae6d0cc3e1862507fca3862d30b67 ]
    
    On non-preempt kernels this loop can take a long time (more than 50 ticks)
    processing through entries.
    
    Link: http://lkml.kernel.org/r/20181010172623.57033-1-khazhy@google.com
    Signed-off-by: Khazhismel Kumykov <khazhy@google.com>
    Acked-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bdb3af6a9538de3bc04939adc952347062c6a0e
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Oct 9 11:21:29 2018 +0300

    net: ena: fix NULL dereference due to untimely napi initialization
    
    [ Upstream commit 78a55d05def95144ca5fa9a64c49b2a0636a9866 ]
    
    napi poll functions should be initialized before running request_irq(),
    to handle a rare condition where there is a pending interrupt, causing
    the ISR to fire immediately while the poll function wasn't set yet,
    causing a NULL dereference.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2daa0b5ec29630377c6d14b3d943e1c5c2a65577
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 8 15:46:11 2018 +0100

    rxrpc: Only take the rwind and mtu values from latest ACK
    
    [ Upstream commit 298bc15b2079c324e82d0a6fda39c3d762af7282 ]
    
    Move the out-of-order and duplicate ACK packet check to before the call to
    rxrpc_input_ackinfo() so that the receive window size and MTU size are only
    checked in the latest ACK packet and don't regress.
    
    Fixes: 248f219cb8bc ("rxrpc: Rewrite the data and ack handling code")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9ec661f2dc887eb13a81a1d61538c5d3ed27a66
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 8 15:46:01 2018 +0100

    rxrpc: Don't check RXRPC_CALL_TX_LAST after calling rxrpc_rotate_tx_window()
    
    [ Upstream commit c479d5f2c2e1ce609da08c075054440d97ddff52 ]
    
    We should only call the function to end a call's Tx phase if we rotated the
    marked-last packet out of the transmission buffer.
    
    Make rxrpc_rotate_tx_window() return an indication of whether it just
    rotated the packet marked as the last out of the transmit buffer, carrying
    the information out of the locked section in that function.
    
    We can then check the return value instead of examining RXRPC_CALL_TX_LAST.
    
    Fixes: 70790dbe3f66 ("rxrpc: Pass the last Tx packet marker in the annotation buffer")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb1083d83fb5cd02b2f472502723d776878a3675
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Sep 12 08:23:01 2018 +0200

    ARM: dts: imx53-qsb: disable 1.2GHz OPP
    
    [ Upstream commit eea96566c189c77e5272585984eb2729881a2f1d ]
    
    The maximum CPU frequency for the i.MX53 QSB is 1GHz, so disable the
    1.2GHz OPP. This makes the board work again with configs that have
    cpufreq enabled like imx_v6_v7_defconfig on which the board stopped
    working with the addition of cpufreq-dt support.
    
    Fixes: 791f416608 ("ARM: dts: imx53: add cpufreq-dt support")
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fc0fb03319a9576197427986633a7da91a310cf
Author: Sandipan Das <sandipan@linux.ibm.com>
Date:   Thu Jul 26 22:47:33 2018 +0530

    perf tests: Fix indexing when invoking subtests
    
    [ Upstream commit aa90f9f9554616d5738f7bedb4a8f0e5e14d1bc6 ]
    
    Recently, the subtest numbering was changed to start from 1.  While it
    is fine for displaying results, this should not be the case when the
    subtests are actually invoked.
    
    Typically, the subtests are stored in zero-indexed arrays and invoked
    based on the index passed to the main test function.  Since the index
    now starts from 1, the second subtest in the array (index 1) gets
    invoked instead of the first (index 0).  This applies to all of the
    following subtests but for the last one, the subtest always fails
    because it does not meet the boundary condition of the subtest index
    being lesser than the number of subtests.
    
    This can be observed on powerpc64 and x86_64 systems running Fedora 28
    as shown below.
    
    Before:
    
      # perf test "builtin clang support"
      55: builtin clang support                                 :
      55.1: builtin clang compile C source to IR                : Ok
      55.2: builtin clang compile C source to ELF object        : FAILED!
    
      # perf test "LLVM search and compile"
      38: LLVM search and compile                               :
      38.1: Basic BPF llvm compile                              : Ok
      38.2: kbuild searching                                    : Ok
      38.3: Compile source for BPF prologue generation          : Ok
      38.4: Compile source for BPF relocation                   : FAILED!
    
      # perf test "BPF filter"
      40: BPF filter                                            :
      40.1: Basic BPF filtering                                 : Ok
      40.2: BPF pinning                                         : Ok
      40.3: BPF prologue generation                             : Ok
      40.4: BPF relocation checker                              : FAILED!
    
    After:
    
      # perf test "builtin clang support"
      55: builtin clang support                                 :
      55.1: builtin clang compile C source to IR                : Ok
      55.2: builtin clang compile C source to ELF object        : Ok
    
      # perf test "LLVM search and compile"
      38: LLVM search and compile                               :
      38.1: Basic BPF llvm compile                              : Ok
      38.2: kbuild searching                                    : Ok
      38.3: Compile source for BPF prologue generation          : Ok
      38.4: Compile source for BPF relocation                   : Ok
    
      # perf test "BPF filter"
      40: BPF filter                                            :
      40.1: Basic BPF filtering                                 : Ok
      40.2: BPF pinning                                         : Ok
      40.3: BPF prologue generation                             : Ok
      40.4: BPF relocation checker                              : Ok
    
    Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
    Reported-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Hendrik Brueckner <brueckner@linux.ibm.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Fixes: 9ef0112442bd ("perf test: Fix subtest number when showing results")
    Link: http://lkml.kernel.org/r/20180726171733.33208-1-sandipan@linux.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52f305530ab6e5915b5e5ee0cb9525df42f2b691
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon May 14 11:57:23 2018 +0300

    xhci: Fix USB3 NULL pointer dereference at logical disconnect.
    
    [ Upstream commit 2278446e2b7cd33ad894b32e7eb63afc7db6c86e ]
    
    Hub driver will try to disable a USB3 device twice at logical disconnect,
    racing with xhci_free_dev() callback from the first port disable.
    
    This can be triggered with "udisksctl power-off --block-device <disk>"
    or by writing "1" to the "remove" sysfs file for a USB3 device
    in 4.17-rc4.
    
    USB3 devices don't have a similar disabled link state as USB2 devices,
    and use a U3 suspended link state instead. In this state the port
    is still enabled and connected.
    
    hub_port_connect() first disconnects the device, then later it notices
    that device is still enabled (due to U3 states) it will try to disable
    the port again (set to U3).
    
    The xhci_free_dev() called during device disable is async, so checking
    for existing xhci->devs[i] when setting link state to U3 the second time
    was successful, even if device was being freed.
    
    The regression was caused by, and whole thing revealed by,
    Commit 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    which sets xhci->devs[i]->udev to NULL before xhci_virt_dev() returned.
    and causes a NULL pointer dereference the second time we try to set U3.
    
    Fix this by checking xhci->devs[i]->udev exists before setting link state.
    
    The original patch went to stable so this fix needs to be applied there as
    well.
    
    Fixes: 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    Cc: <stable@vger.kernel.org>
    Reported-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Tested-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97d34e8ea0719828c723e333d97918e9a4590cb2
Author: Daniel Mack <daniel@zonque.org>
Date:   Mon Oct 8 22:03:57 2018 +0200

    libertas: call into generic suspend code before turning off power
    
    [ Upstream commit 4f666675cdff0b986195413215eb062b7da6586f ]
    
    When powering down a SDIO connected card during suspend, make sure to call
    into the generic lbs_suspend() function before pulling the plug. This will
    make sure the card is successfully deregistered from the system to avoid
    communication to the card starving out.
    
    Fixes: 7444a8092906 ("libertas: fix suspend and resume for SDIO connected cards")
    Signed-off-by: Daniel Mack <daniel@zonque.org>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43832bec7647dd6f16ea2af92d44d12a474494c6
Author: Christophe Jaillet <christophe.jaillet@wanadoo.fr>
Date:   Mon Jun 11 20:15:11 2018 +0200

    IB/mlx4: Fix an error handling path in 'mlx4_ib_rereg_user_mr()'
    
    [ Upstream commit 3dc7c7badb7502ec3e3aa817a8bdd9e53aa54c52 ]
    
    Before returning -EPERM we should release some resources, as already done
    in the other error handling path of the function.
    
    Fixes: d8f9cc328c88 ("IB/mlx4: Mark user MR as writable if actual virtual memory is writable")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72b33231a7146da003205e080769d4d4db44fd71
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 19 13:35:53 2018 +0300

    x86/paravirt: Fix some warning messages
    
    [ Upstream commit 571d0563c8881595f4ab027aef9ed1c55e3e7b7c ]
    
    The first argument to WARN_ONCE() is a condition.
    
    Fixes: 5800dc5c19f3 ("x86/paravirt: Fix spectre-v2 mitigations for paravirt guests")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Alok Kataria <akataria@vmware.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: virtualization@lists.linux-foundation.org
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180919103553.GD9238@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f11f358460c96a0c2eb37c906a05b6d6f35be24a
Author: Phil Reid <preid@electromag.com.au>
Date:   Tue Jun 5 14:15:10 2018 +0800

    iio: buffer: fix the function signature to match implementation
    
    [ Upstream commit 92397a6c38d139d50fabbe9e2dc09b61d53b2377 ]
    
    linux/iio/buffer-dma.h was not updated to when length was changed to
    unsigned int.
    
    Fixes: c043ec1ca5ba ("iio:buffer: make length types match kfifo types")
    Signed-off-by: Phil Reid <preid@electromag.com.au>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9dde4194610916019ce87172b06dddc428738c3
Author: Daniel Verkamp <daniel.verkamp@intel.com>
Date:   Thu Apr 12 09:16:13 2018 -0600

    nvmet: fix space padding in serial number
    
    [ Upstream commit c73996984902516745bc587d5e8a0b2e034aea05 ]
    
    Commit 42de82a8b544 previously attempted to fix this, and it did
    correctly pad the MN and FR fields with spaces, but the SN field still
    contains 0 bytes.  The current code fills out the first 16 bytes with
    hex2bin, leaving the last 4 bytes zeroed.  Rather than adding a lot of
    error-prone math to avoid overwriting SN twice, just set the whole thing
    to spaces up front (it's only 20 bytes).
    
    Fixes: 42de82a8b544 ("nvmet: don't report 0-bytes in serial number")
    Signed-off-by: Daniel Verkamp <daniel.verkamp@intel.com>
    Reviewed-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba559a578e7f7b4c095a2589208c3e7ae5cd0e1d
Author: Andreas Born <futur.andy@googlemail.com>
Date:   Sat Aug 12 00:36:55 2017 +0200

    bonding: ratelimit failed speed/duplex update warning
    
    [ Upstream commit 11e9d7829dd08dbafb24517fe922f11c3a8a9dc2 ]
    
    bond_miimon_commit() handles the UP transition for each slave of a bond
    in the case of MII. It is triggered 10 times per second for the default
    MII Polling interval of 100ms. For device drivers that do not implement
    __ethtool_get_link_ksettings() the call to bond_update_speed_duplex()
    fails persistently while the MII status could remain UP. That is, in
    this and other cases where the speed/duplex update keeps failing over a
    longer period of time while the MII state is UP, a warning is printed
    every MII polling interval.
    
    To address these excessive warnings net_ratelimit() should be used.
    Printing a warning once would not be sufficient since the call to
    bond_update_speed_duplex() could recover to succeed and fail again
    later. In that case there would be no new indication what went wrong.
    
    Fixes: b5bf0f5b16b9c (bonding: correctly update link status during mii-commit phase)
    Signed-off-by: Andreas Born <futur.andy@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8576adcc101dc5d3308c2dbd81dbc651ce70b0b4
Author: Govindarajulu Varadarajan <gvaradar@cisco.com>
Date:   Mon Jun 18 10:01:05 2018 -0700

    enic: do not overwrite error code
    
    [ Upstream commit 56f772279a762984f6e9ebbf24a7c829faba5712 ]
    
    In failure path, we overwrite err to what vnic_rq_disable() returns. In
    case it returns 0, enic_open() returns success in case of error.
    
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Fixes: e8588e268509 ("enic: enable rq before updating rq descriptors")
    Signed-off-by: Govindarajulu Varadarajan <gvaradar@cisco.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e697f95532ddb0e6ae93ed01c276030655d36b4
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Thu Jun 21 14:00:20 2018 +0100

    xen-netfront: Fix mismatched rtnl_unlock
    
    [ Upstream commit cb257783c2927b73614b20f915a91ff78aa6f3e8 ]
    
    Fixes: f599c64fdf7d ("xen-netfront: Fix race between device setup and open")
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24b71d1895f591f3779895c206e6d1ae29462e11
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Mar 15 14:18:00 2018 -0700

    sparc64: Fix regression in pmdp_invalidate().
    
    [ Upstream commit cfb61b5e3e09f8b49bc4d685429df75f45127adc ]
    
    pmdp_invalidate() was changed to update the pmd atomically
    (to not lose dirty/access bits) and return the original pmd
    value.
    
    However, in doing so, we lost a lot of the essential work that
    set_pmd_at() does, namely to update hugepage mapping counts and
    queuing up the batched TLB flush entry.
    
    Thus we were not flushing entries out of the TLB when making
    such PMD changes.
    
    Fix this by abstracting the accounting work of set_pmd_at() out into a
    separate function, and call it from pmdp_establish().
    
    Fixes: a8e654f01cb7 ("sparc64: update pmdp_invalidate() to return old pmd value")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43bbab662dc99fdfef6d8928a204d103651d54f8
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Thu Jun 21 14:00:21 2018 +0100

    xen-netfront: Update features after registering netdev
    
    [ Upstream commit 45c8184c1bed1ca8a7f02918552063a00b909bf5 ]
    
    Update the features after calling register_netdev() otherwise the
    device features are not set up correctly and it not possible to change
    the MTU of the device. After this change, the features reported by
    ethtool match the device's features before the commit which introduced
    the issue and it is possible to change the device's MTU.
    
    Fixes: f599c64fdf7d ("xen-netfront: Fix race between device setup and open")
    Reported-by: Liam Shepherd <liam@dancer.es>
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acfbd2866fe960eaca671b20329927c7a5697acc
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Tue Mar 20 09:58:51 2018 -0300

    test_bpf: Fix testing with CONFIG_BPF_JIT_ALWAYS_ON=y on other arches
    
    [ Upstream commit 52fda36d63bfc8c8e8ae5eda8eb5ac6f52cd67ed ]
    
    Function bpf_fill_maxinsns11 is designed to not be able to be JITed on
    x86_64. So, it fails when CONFIG_BPF_JIT_ALWAYS_ON=y, and
    commit 09584b406742 ("bpf: fix selftests/bpf test_kmod.sh failure when
    CONFIG_BPF_JIT_ALWAYS_ON=y") makes sure that failure is detected on that
    case.
    
    However, it does not fail on other architectures, which have a different
    JIT compiler design. So, test_bpf has started to fail to load on those.
    
    After this fix, test_bpf loads fine on both x86_64 and ppc64el.
    
    Fixes: 09584b406742 ("bpf: fix selftests/bpf test_kmod.sh failure when CONFIG_BPF_JIT_ALWAYS_ON=y")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Reviewed-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dba8e960a541d7d81e9237065b5116f144e15077
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Apr 27 17:17:35 2018 +0200

    ALSA: hda - Fix incorrect usage of IS_REACHABLE()
    
    [ Upstream commit 6a30abaa40b62aed46ef12ea4c16c48565bdb376 ]
    
    The commit c469652bb5e8 ("ALSA: hda - Use IS_REACHABLE() for
    dependency on input") simplified the dependencies with IS_REACHABLE()
    macro, but it broke due to its incorrect usage: it should have been
    IS_REACHABLE(CONFIG_INPUT) instead of IS_REACHABLE(INPUT).
    
    Fixes: c469652bb5e8 ("ALSA: hda - Use IS_REACHABLE() for dependency on input")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da92e8a2d986ac1c3a8c613b4760b6dccd359bb3
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Oct 23 13:41:51 2017 +0200

    futex: futex_wake_op, do not fail on invalid op
    
    [ Upstream commit e78c38f6bdd900b2ad9ac9df8eff58b745dc5b3c ]
    
    In commit 30d6e0a4190d ("futex: Remove duplicated code and fix undefined
    behaviour"), I let FUTEX_WAKE_OP to fail on invalid op.  Namely when op
    should be considered as shift and the shift is out of range (< 0 or > 31).
    
    But strace's test suite does this madness:
    
      futex(0x7fabd78bcffc, 0x5, 0xfacefeed, 0xb, 0x7fabd78bcffc, 0xa0caffee);
      futex(0x7fabd78bcffc, 0x5, 0xfacefeed, 0xb, 0x7fabd78bcffc, 0xbadfaced);
      futex(0x7fabd78bcffc, 0x5, 0xfacefeed, 0xb, 0x7fabd78bcffc, 0xffffffff);
    
    When I pick the first 0xa0caffee, it decodes as:
    
      0x80000000 & 0xa0caffee: oparg is shift
      0x70000000 & 0xa0caffee: op is FUTEX_OP_OR
      0x0f000000 & 0xa0caffee: cmp is FUTEX_OP_CMP_EQ
      0x00fff000 & 0xa0caffee: oparg is sign-extended 0xcaf = -849
      0x00000fff & 0xa0caffee: cmparg is sign-extended 0xfee = -18
    
    That means the op tries to do this:
    
      (futex |= (1 << (-849))) == -18
    
    which is completely bogus. The new check of op in the code is:
    
            if (encoded_op & (FUTEX_OP_OPARG_SHIFT << 28)) {
                    if (oparg < 0 || oparg > 31)
                            return -EINVAL;
                    oparg = 1 << oparg;
            }
    
    which results obviously in the "Invalid argument" errno:
    
      FAIL: futex
      ===========
    
      futex(0x7fabd78bcffc, 0x5, 0xfacefeed, 0xb, 0x7fabd78bcffc, 0xa0caffee) = -1: Invalid argument
      futex.test: failed test: ../futex failed with code 1
    
    So let us soften the failure to print only a (ratelimited) message, crop
    the value and continue as if it were right.  When userspace keeps up, we
    can switch this to return -EINVAL again.
    
    [v2] Do not return 0 immediatelly, proceed with the cropped value.
    
    Fixes: 30d6e0a4190d ("futex: Remove duplicated code and fix undefined behaviour")
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Darren Hart <dvhart@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2b9a0def3e99bfa064364dc6c21b5eccb06db2e
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Thu Apr 5 14:57:11 2018 +0200

    cifs: Use ULL suffix for 64-bit constant
    
    [ Upstream commit 3995bbf53bd2047f2720c6fdd4bf38f6d942a0c0 ]
    
    On 32-bit (e.g. with m68k-linux-gnu-gcc-4.1):
    
        fs/cifs/inode.c: In function ‘simple_hashstr’:
        fs/cifs/inode.c:713: warning: integer constant is too large for ‘long’ type
    
    Fixes: 7ea884c77e5c97f1 ("smb3: Fix root directory when server returns inode number of zero")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6279fc56944b4d244aaa96a7da0cd3c413dd2ac4
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Thu Jul 20 16:14:55 2017 +0200

    perf/core: Fix locking for children siblings group read
    
    [ Upstream commit 2aeb1883547626d82c597cce2c99f0b9c62e2425 ]
    
    We're missing ctx lock when iterating children siblings
    within the perf_read path for group reading. Following
    race and crash can happen:
    
    User space doing read syscall on event group leader:
    
    T1:
      perf_read
        lock event->ctx->mutex
        perf_read_group
          lock leader->child_mutex
          __perf_read_group_add(child)
            list_for_each_entry(sub, &leader->sibling_list, group_entry)
    
    ---->   sub might be invalid at this point, because it could
            get removed via perf_event_exit_task_context in T2
    
    Child exiting and cleaning up its events:
    
    T2:
      perf_event_exit_task_context
        lock ctx->mutex
        list_for_each_entry_safe(child_event, next, &child_ctx->event_list,...
          perf_event_exit_event(child)
            lock ctx->lock
            perf_group_detach(child)
            unlock ctx->lock
    
    ---->   child is removed from sibling_list without any sync
            with T1 path above
    
            ...
            free_event(child)
    
    Before the child is removed from the leader's child_list,
    (and thus is omitted from perf_read_group processing), we
    need to ensure that perf_read_group touches child's
    siblings under its ctx->lock.
    
    Peter further notes:
    
    | One additional note; this bug got exposed by commit:
    |
    |   ba5213ae6b88 ("perf/core: Correct event creation with PERF_FORMAT_GROUP")
    |
    | which made it possible to actually trigger this code-path.
    
    Tested-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: ba5213ae6b88 ("perf/core: Correct event creation with PERF_FORMAT_GROUP")
    Link: http://lkml.kernel.org/r/20170720141455.2106-1-jolsa@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f6590d6fa992e6218d8b0c6329374fb36503242
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Oct 10 17:07:12 2017 +0200

    macsec: fix memory leaks when skb_to_sgvec fails
    
    [ Upstream commit 5aba2ba5030b66a6f8c93049b718556f9aacd7c6 ]
    
    Fixes: cda7ea690350 ("macsec: check return value of skb_to_sgvec always")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65b05d03a57830691900451b902d37c383a9224b
Author: James Chapman <jchapman@katalix.com>
Date:   Wed Jan 3 22:48:06 2018 +0000

    l2tp: remove configurable payload offset
    
    [ Upstream commit 900631ee6a2651dc4fbaecb8ef9fa5f1e3378853 ]
    
    If L2TP_ATTR_OFFSET is set to a non-zero value in L2TPv3 tunnels, it
    results in L2TPv3 packets being transmitted which might not be
    compliant with the L2TPv3 RFC. This patch has l2tp ignore the offset
    setting and send all packets with no offset.
    
    In more detail:
    
    L2TPv2 supports a variable offset from the L2TPv2 header to the
    payload. The offset value is indicated by an optional field in the
    L2TP header.  Our L2TP implementation already detects the presence of
    the optional offset and skips that many bytes when handling data
    received packets. All transmitted packets are always transmitted with
    no offset.
    
    L2TPv3 has no optional offset field in the L2TPv3 packet
    header. Instead, L2TPv3 defines optional fields in a "Layer-2 Specific
    Sublayer". At the time when the original L2TP code was written, there
    was talk at IETF of offset being implemented in a new Layer-2 Specific
    Sublayer. A L2TP_ATTR_OFFSET netlink attribute was added so that this
    offset could be configured and the intention was to allow it to be
    also used to set the tx offset for L2TPv2. However, no L2TPv3 offset
    was ever specified and the L2TP_ATTR_OFFSET parameter was forgotten
    about.
    
    Setting L2TP_ATTR_OFFSET results in L2TPv3 packets being transmitted
    with the specified number of bytes padding between L2TPv3 header and
    payload. This is not compliant with L2TPv3 RFC3931. This change
    removes the configurable offset altogether while retaining
    L2TP_ATTR_OFFSET for backwards compatibility. Any L2TP_ATTR_OFFSET
    value is ignored.
    
    Signed-off-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1680ca362dad7f0ae4db4ab8b20629dc015a85ba
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Wed Jul 5 10:14:59 2017 +0200

    iio: pressure: zpa2326: Remove always-true check which confuses gcc
    
    [ Upstream commit f61dfff2f5b9fcb087bf5c444bc44b444709588f ]
    
    With gcc 4.1.2:
    
        drivers/iio/pressure/zpa2326.c: In function ‘zpa2326_wait_oneshot_completion’:
        drivers/iio/pressure/zpa2326.c:868: warning: ‘ret’ may be used uninitialized in this function
    
    When testing for "timeout < 0", timeout is already guaranteed to be
    strict negative, so the branch is always taken, and ret is thus always
    initialized.  But (some version of) gcc is not smart enough to notice.
    
    Remove the check to fix this.
    As there is no other code in between assigning the error codes and
    returning them, the error codes can be returned immediately, and the
    intermediate variable can be dropped.
    Drop the "else" to please checkpatch.
    
    Fixes: e7215fe4d51e69c9 ("iio: pressure: zpa2326: report interrupted case as failure")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfdf8be7dcc2fa84be2f6560e414f82d0176baa7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 28 15:59:13 2016 +0100

    module: fix DEBUG_SET_MODULE_RONX typo
    
    [ Upstream commit 4d217a5adccf5e806790c37c61cc374a08bd7381 ]
    
    The newly added 'rodata_enabled' global variable is protected by
    the wrong #ifdef, leading to a link error when CONFIG_DEBUG_SET_MODULE_RONX
    is turned on:
    
    kernel/module.o: In function `disable_ro_nx':
    module.c:(.text.unlikely.disable_ro_nx+0x88): undefined reference to `rodata_enabled'
    kernel/module.o: In function `module_disable_ro':
    module.c:(.text.module_disable_ro+0x8c): undefined reference to `rodata_enabled'
    kernel/module.o: In function `module_enable_ro':
    module.c:(.text.module_enable_ro+0xb0): undefined reference to `rodata_enabled'
    
    CONFIG_SET_MODULE_RONX does not exist, so use the correct one instead.
    
    Fixes: 39290b389ea2 ("module: extend 'rodata=off' boot cmdline parameter to module mappings")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jessica Yu <jeyu@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c87dd592a7660b510f633384f184fe7d711964e9
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Tue Apr 3 23:38:45 2018 +0100

    drm/msm: Fix possible null dereference on failure of get_pages()
    
    [ Upstream commit 3976626ea3d2011f8fd3f3a47070a8b792018253 ]
    
    Commit 62e3a3e342af changed get_pages() to initialise
    msm_gem_object::pages before trying to initialise msm_gem_object::sgt,
    so that put_pages() would properly clean up pages in the failure
    case.
    
    However, this means that put_pages() now needs to check that
    msm_gem_object::sgt is not null before trying to clean it up, and
    this check was only applied to part of the cleanup code.  Move
    it all into the conditional block.  (Strictly speaking we don't
    need to make the kfree() conditional, but since we can't avoid
    checking for null ourselves we may as well do so.)
    
    Fixes: 62e3a3e342af ("drm/msm: fix leak in failed get_pages")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Reviewed-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97d65c1b6e73e1e8ade19713a981bc55003bd798
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Jul 6 15:31:46 2017 +0100

    Btrfs: incremental send, fix invalid memory access
    
    [ Upstream commit 24e52b11e0ca788513b945a87b57cc0522a92933 ]
    
    When doing an incremental send, while processing an extent that changed
    between the parent and send snapshots and that extent was an inline extent
    in the parent snapshot, it's possible to access a memory region beyond
    the end of leaf if the inline extent is very small and it is the first
    item in a leaf.
    
    An example scenario is described below.
    
    The send snapshot has the following leaf:
    
     leaf 33865728 items 33 free space 773 generation 46 owner 5
     fs uuid ab7090d8-dafd-4fb9-9246-723b6d2e2fb7
     chunk uuid 2d16478c-c704-4ab9-b574-68bff2281b1f
            (...)
            item 14 key (335 EXTENT_DATA 0) itemoff 3052 itemsize 53
                    generation 36 type 1 (regular)
                    extent data disk byte 12791808 nr 4096
                    extent data offset 0 nr 4096 ram 4096
                    extent compression 0 (none)
            item 15 key (335 EXTENT_DATA 8192) itemoff 2999 itemsize 53
                    generation 36 type 1 (regular)
                    extent data disk byte 138170368 nr 225280
                    extent data offset 0 nr 225280 ram 225280
                    extent compression 0 (none)
            (...)
    
    And the parent snapshot has the following leaf:
    
     leaf 31272960 items 17 free space 17 generation 31 owner 5
     fs uuid ab7090d8-dafd-4fb9-9246-723b6d2e2fb7
     chunk uuid 2d16478c-c704-4ab9-b574-68bff2281b1f
            item 0 key (335 EXTENT_DATA 0) itemoff 3951 itemsize 44
                    generation 31 type 0 (inline)
                    inline extent data size 23 ram_bytes 613 compression 1 (zlib)
            (...)
    
    When computing the send stream, it is detected that the extent of inode
    335, at file offset 0, and at fs/btrfs/send.c:is_extent_unchanged() we
    grab the leaf from the parent snapshot and access the inline extent item.
    However, before jumping to the 'out' label, we access the 'offset' and
    'disk_bytenr' fields of the extent item, which should not be done for
    inline extents since the inlined data starts at the offset of the
    'disk_bytenr' field and can be very small. For example accessing the
    'offset' field of the file extent item results in the following trace:
    
    [  599.705368] general protection fault: 0000 [#1] PREEMPT SMP
    [  599.706296] Modules linked in: btrfs psmouse i2c_piix4 ppdev acpi_cpufreq serio_raw parport_pc i2c_core evdev tpm_tis tpm_tis_core sg pcspkr parport tpm button su$
    [  599.709340] CPU: 7 PID: 5283 Comm: btrfs Not tainted 4.10.0-rc8-btrfs-next-46+ #1
    [  599.709340] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014
    [  599.709340] task: ffff88023eedd040 task.stack: ffffc90006658000
    [  599.709340] RIP: 0010:read_extent_buffer+0xdb/0xf4 [btrfs]
    [  599.709340] RSP: 0018:ffffc9000665ba00 EFLAGS: 00010286
    [  599.709340] RAX: db73880000000000 RBX: 0000000000000000 RCX: 0000000000000001
    [  599.709340] RDX: ffffc9000665ba60 RSI: db73880000000000 RDI: ffffc9000665ba5f
    [  599.709340] RBP: ffffc9000665ba30 R08: 0000000000000001 R09: ffff88020dc5e098
    [  599.709340] R10: 0000000000001000 R11: 0000160000000000 R12: 6db6db6db6db6db7
    [  599.709340] R13: ffff880000000000 R14: 0000000000000000 R15: ffff88020dc5e088
    [  599.709340] FS:  00007f519555a8c0(0000) GS:ffff88023f3c0000(0000) knlGS:0000000000000000
    [  599.709340] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  599.709340] CR2: 00007f1411afd000 CR3: 0000000235f8e000 CR4: 00000000000006e0
    [  599.709340] Call Trace:
    [  599.709340]  btrfs_get_token_64+0x93/0xce [btrfs]
    [  599.709340]  ? printk+0x48/0x50
    [  599.709340]  btrfs_get_64+0xb/0xd [btrfs]
    [  599.709340]  process_extent+0x3a1/0x1106 [btrfs]
    [  599.709340]  ? btree_read_extent_buffer_pages+0x5/0xef [btrfs]
    [  599.709340]  changed_cb+0xb03/0xb3d [btrfs]
    [  599.709340]  ? btrfs_get_token_32+0x7a/0xcc [btrfs]
    [  599.709340]  btrfs_compare_trees+0x432/0x53d [btrfs]
    [  599.709340]  ? process_extent+0x1106/0x1106 [btrfs]
    [  599.709340]  btrfs_ioctl_send+0x960/0xe26 [btrfs]
    [  599.709340]  btrfs_ioctl+0x181b/0x1fed [btrfs]
    [  599.709340]  ? trace_hardirqs_on_caller+0x150/0x1ac
    [  599.709340]  vfs_ioctl+0x21/0x38
    [  599.709340]  ? vfs_ioctl+0x21/0x38
    [  599.709340]  do_vfs_ioctl+0x611/0x645
    [  599.709340]  ? rcu_read_unlock+0x5b/0x5d
    [  599.709340]  ? __fget+0x6d/0x79
    [  599.709340]  SyS_ioctl+0x57/0x7b
    [  599.709340]  entry_SYSCALL_64_fastpath+0x18/0xad
    [  599.709340] RIP: 0033:0x7f51945eec47
    [  599.709340] RSP: 002b:00007ffc21c13e98 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [  599.709340] RAX: ffffffffffffffda RBX: ffffffff81096459 RCX: 00007f51945eec47
    [  599.709340] RDX: 00007ffc21c13f20 RSI: 0000000040489426 RDI: 0000000000000004
    [  599.709340] RBP: ffffc9000665bf98 R08: 00007f519450d700 R09: 00007f519450d700
    [  599.709340] R10: 00007f519450d9d0 R11: 0000000000000202 R12: 0000000000000046
    [  599.709340] R13: ffffc9000665bf78 R14: 0000000000000000 R15: 00007f5195574040
    [  599.709340]  ? trace_hardirqs_off_caller+0x43/0xb1
    [  599.709340] Code: 29 f0 49 39 d8 4c 0f 47 c3 49 03 81 58 01 00 00 44 89 c1 4c 01 c2 4c 29 c3 48 c1 f8 03 49 0f af c4 48 c1 e0 0c 4c 01 e8 48 01 c6 <f3> a4 31 f6 4$
    [  599.709340] RIP: read_extent_buffer+0xdb/0xf4 [btrfs] RSP: ffffc9000665ba00
    [  599.762057] ---[ end trace fe00d7af61b9f49e ]---
    
    This is because the 'offset' field starts at an offset of 37 bytes
    (offsetof(struct btrfs_file_extent_item, offset)), has a length of 8
    bytes and therefore attemping to read it causes a 1 byte access beyond
    the end of the leaf, as the first item's content in a leaf is located
    at the tail of the leaf, the item size is 44 bytes and the offset of
    that field plus its length (37 + 8 = 45) goes beyond the item's size
    by 1 byte.
    
    So fix this by accessing the 'offset' and 'disk_bytenr' fields after
    jumping to the 'out' label if we are processing an inline extent. We
    move the reading operation of the 'disk_bytenr' field too because we
    have the same problem as for the 'offset' field explained above when
    the inline data is less then 8 bytes. The access to the 'generation'
    field is also moved but just for the sake of grouping access to all
    the fields.
    
    Fixes: e1cbfd7bf6da ("Btrfs: send, fix file hole not being preserved due to inline extent")
    Cc: <stable@vger.kernel.org>  # v4.12+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9629cf8ef9ad67f685d5367ede20a3573c4a15de
Author: Alex Estrin <alex.estrin@intel.com>
Date:   Tue Sep 26 06:06:22 2017 -0700

    Revert "IB/ipoib: Update broadcast object if PKey value was changed in index 0"
    
    [ Upstream commit 612601d0013f03de9dc134809f242ba6da9ca252 ]
    
    commit 9a9b8112699d will cause core to fail UD QP from being destroyed
    on ipoib unload, therefore cause resources leakage.
    On pkey change event above patch modifies mgid before calling underlying
    driver to detach it from QP. Drivers' detach_mcast() will fail to find
    modified mgid it was never given to attach in a first place.
    Core qp->usecnt will never go down, so ib_destroy_qp() will fail.
    
    IPoIB driver actually does take care of new broadcast mgid based on new
    pkey by destroying an old mcast object in ipoib_mcast_dev_flush())
    ....
            if (priv->broadcast) {
                    rb_erase(&priv->broadcast->rb_node, &priv->multicast_tree);
                    list_add_tail(&priv->broadcast->list, &remove_list);
                    priv->broadcast = NULL;
            }
    ...
    
    then in restarted ipoib_macst_join_task() creating a new broadcast mcast
    object, sending join request and on completion tells the driver to attach
    to reinitialized QP:
    ...
    if (!priv->broadcast) {
    ...
            broadcast = ipoib_mcast_alloc(dev, 0);
    ...
            memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,
                   sizeof (union ib_gid));
            priv->broadcast = broadcast;
    ...
    
    Fixes: 9a9b8112699d ("IB/ipoib: Update broadcast object if PKey value was changed in index 0")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Alex Estrin <alex.estrin@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78ba91de8325aebe39dce2a389511e1e704e00d4
Author: Anjali Singhai Jain <anjali.singhai@intel.com>
Date:   Fri Sep 1 13:42:49 2017 -0700

    i40e: avoid NVM acquire deadlock during NVM update
    
    [ Upstream commit 09f79fd49d94cda5837e9bfd0cb222232b3b6d9f ]
    
    X722 devices use the AdminQ to access the NVM, and this requires taking
    the AdminQ lock. Because of this, we lock the AdminQ during
    i40e_read_nvm(), which is also called in places where the lock is
    already held, such as the firmware update path which wants to lock once
    and then unlock when finished after performing several tasks.
    
    Although this should have only affected X722 devices, commit
    96a39aed25e6 ("i40e: Acquire NVM lock before reads on all devices",
    2016-12-02) added locking for all NVM reads, regardless of device
    family.
    
    This resulted in us accidentally causing NVM acquire timeouts on all
    devices, causing failed firmware updates which left the eeprom in
    a corrupt state.
    
    Create unsafe non-locked variants of i40e_read_nvm_word and
    i40e_read_nvm_buffer, __i40e_read_nvm_word and __i40e_read_nvm_buffer
    respectively. These variants will not take the NVM lock and are expected
    to only be called in places where the NVM lock is already held if
    needed.
    
    Since the only caller of i40e_read_nvm_buffer() was in such a path,
    remove it entirely in favor of the unsafe version. If necessary we can
    always add it back in the future.
    
    Additionally, we now need to hold the NVM lock in i40e_validate_checksum
    because the call to i40e_calc_nvm_checksum now assumes that the NVM lock
    is held. We can further move the call to read I40E_SR_SW_CHECKSUM_WORD
    up a bit so that we do not need to acquire the NVM lock twice.
    
    This should resolve firmware updates and also fix potential raise that
    could have caused the driver to report an invalid NVM checksum upon
    driver load.
    
    Reported-by: Stefan Assmann <sassmann@kpanic.de>
    Fixes: 96a39aed25e6 ("i40e: Acquire NVM lock before reads on all devices", 2016-12-02)
    Signed-off-by: Anjali Singhai Jain <anjali.singhai@intel.com>
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e6abb88d03e6f2cc0c0b374bc729a95035b332f
Author: Gabriel Krisman Bertazi <krisman@collabora.co.uk>
Date:   Fri Mar 17 15:14:09 2017 -0300

    drm: bochs: Don't remove uninitialized fbdev framebuffer
    
    [ Upstream commit 4fa13dbe8c86382a846584e65c47bce09297f75b ]
    
    In the same spirit of the fix for QXL in commit 861078381ba5 ("drm: qxl:
    Don't alloc fbdev if emulation is not supported"), prevent the Oops in
    the unbind path of Bochs if fbdev emulation is disabled.
    
    [  112.176009] Oops: 0002 [#1] SMP
    [  112.176009] Modules linked in: bochs_drm
    [  112.176009] CPU: 0 PID: 3002 Comm: bash Not tainted 4.11.0-rc1+ #111
    [  112.176009] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.3-20161025_171302-gandalf 04/01/2014
    [  112.176009] task: ffff8800743bbac0 task.stack: ffffc90000b5c000
    [  112.176009] RIP: 0010:mutex_lock+0x18/0x30
    [  112.176009] RSP: 0018:ffffc90000b5fc78 EFLAGS: 00010246
    [  112.176009] RAX: 0000000000000000 RBX: 0000000000000260 RCX: 0000000000000000
    [  112.176009] RDX: ffff8800743bbac0 RSI: ffff8800787176e0 RDI: 0000000000000260
    [  112.176009] RBP: ffffc90000b5fc80 R08: ffffffff00000000 R09: 00000000ffffffff
    [  112.176009] R10: ffff88007b463650 R11: 0000000000000000 R12: 0000000000000260
    [  112.176009] R13: ffff8800787176e0 R14: ffffffffa0003068 R15: 0000000000000060
    [  112.176009] FS:  00007f20564c7b40(0000) GS:ffff88007ce00000(0000) knlGS:0000000000000000
    [  112.176009] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  112.176009] CR2: 0000000000000260 CR3: 000000006b89c000 CR4: 00000000000006f0
    [  112.176009] Call Trace:
    [  112.176009]  drm_mode_object_unregister+0x1e/0x50
    [  112.176009]  drm_framebuffer_unregister_private+0x15/0x20
    [  112.176009]  bochs_fbdev_fini+0x57/0x70 [bochs_drm]
    [  112.176009]  bochs_unload+0x16/0x50 [bochs_drm]
    [  112.176009]  drm_dev_unregister+0x37/0xd0
    [  112.176009]  drm_put_dev+0x31/0x60
    [  112.176009]  bochs_pci_remove+0x10/0x20 [bochs_drm]
    [  112.176009]  pci_device_remove+0x34/0xb0
    [  112.176009]  device_release_driver_internal+0x150/0x200
    [  112.176009]  device_release_driver+0xd/0x10
    [  112.176009]  unbind_store+0x108/0x150
    [  112.176009]  drv_attr_store+0x20/0x30
    [  112.176009]  sysfs_kf_write+0x32/0x40
    [  112.176009]  kernfs_fop_write+0x10b/0x190
    [  112.176009]  __vfs_write+0x23/0x120
    [  112.176009]  ? security_file_permission+0x36/0xb0
    [  112.176009]  ? rw_verify_area+0x49/0xb0
    [  112.176009]  vfs_write+0xb0/0x190
    [  112.176009]  SyS_write+0x41/0xa0
    [  112.176009]  entry_SYSCALL_64_fastpath+0x1a/0xa9
    [  112.176009] RIP: 0033:0x7f2055bd5620
    [  112.176009] RSP: 002b:00007ffed2f487d8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [  112.176009] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f2055bd5620
    [  112.176009] RDX: 000000000000000d RSI: 0000000000ee0008 RDI: 0000000000000001
    [  112.176009] RBP: 0000000000000001 R08: 00007f2055e94760 R09: 00007f20564c7b40
    [  112.176009] R10: 0000000000000073 R11: 0000000000000246 R12: 0000000000000000
    [  112.176009] R13: 00007ffed2f48d70 R14: 0000000000000000 R15: 0000000000000000
    [  112.176009] Code: 00 00 00 55 be 02 00 00 00 48 89 e5 e8 62 fb ff ff 5d c3 55 48 89 e5 53 48 89 fb e8 53 e9 ff ff 65 48 8b 14 25 40 c4 00 00 31 c0 <f0> 48 0f b1 13 48 85 c0 74 08 48 89 df e8c6 ff ff ff 5b 5d c3
    [  112.176009] RIP: mutex_lock+0x18/0x30 RSP: ffffc90000b5fc78
    [  112.176009] CR2: 0000000000000260
    [  112.205622] ---[ end trace 76189cd7a9bdd155 ]---
    
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.co.uk>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170317181409.4183-1-krisman@collabora.co.uk
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9388bd235b271f0c67084d6dd52a80440550e585
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Tue Mar 20 21:05:48 2018 +0000

    scsi: qla2xxx: Avoid double completion of abort command
    
    [ Upstream commit 3a9910d7b686546dcc9986e790af17e148f1c888 ]
    
    qla2x00_tmf_sp_done() now deletes the timer that will run
    qla2x00_tmf_iocb_timeout(), but doesn't check whether the timer already
    expired.  Check the return value from del_timer() to avoid calling
    complete() a second time.
    
    Fixes: 4440e46d5db7 ("[SCSI] qla2xxx: Add IOCB Abort command asynchronous ...")
    Fixes: 1514839b3664 ("scsi: qla2xxx: Fix NULL pointer crash due to active ...")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Acked-by: Himanshu Madhani <himanshu.madhani@cavium.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d287f1dab98c20bb9fd3c044b7f913ed17b4ad22
Author: Noa Osherovich <noaos@mellanox.com>
Date:   Sun Feb 25 13:39:51 2018 +0200

    IB/mlx5: Avoid passing an invalid QP type to firmware
    
    [ Upstream commit e7b169f34403becd3c9fd3b6e46614ab788f2187 ]
    
    During QP creation, the mlx5 driver translates the QP type to an
    internal value which is passed on to FW. There was no check to make
    sure that the translated value is valid, and -EINVAL was coerced into
    the mailbox command.
    
    Current firmware refuses this as an invalid QP type, but future/past
    firmware may do something else.
    
    Fixes: 09a7d9eca1a6c ('{net,IB}/mlx5: QP/XRCD commands via mlx5 ifc')
    Reviewed-by: Ilya Lesokhin <ilyal@mellanox.com>
    Signed-off-by: Noa Osherovich <noaos@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a96406d4394498dab805beca195d41e0e34f5d87
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Dec 14 15:33:08 2017 -0800

    mm/frame_vector.c: release a semaphore in 'get_vaddr_frames()'
    
    [ Upstream commit 1f704fd0d14043e76e80f6b8b2251b9b2cedcca6 ]
    
    A semaphore is acquired before this check, so we must release it before
    leaving.
    
    Link: http://lkml.kernel.org/r/20171211211009.4971-1-christophe.jaillet@wanadoo.fr
    Fixes: b7f0554a56f2 ("mm: fail get_vaddr_frames() for filesystem-dax mappings")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: David Sterba <dsterba@suse.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b7c09a5f74ad25dd2e3ee6d43732f9a0e0c1ff3
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Jan 19 16:08:49 2017 -0500

    nbd: only set MSG_MORE when we have more to send
    
    [ Upstream commit d61b7f972dab2a7d187c38254845546dfc8eed85 ]
    
    A user noticed that write performance was horrible over loopback and we
    traced it to an inversion of when we need to set MSG_MORE.  It should be
    set when we have more bvec's to send, not when we are on the last bvec.
    This patch made the test go from 20 iops to 78k iops.
    
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Fixes: 429a787be679 ("nbd: fix use-after-free of rq/bio in the xmit path")
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 150b28b45a35d9f056abaf047760cb906b35fca3
Author: Doug Ledford <dledford@redhat.com>
Date:   Mon Oct 9 09:11:32 2017 -0400

    IB/rxe: put the pool on allocation failure
    
    [ Upstream commit 6b9f8970cd30929cb6b372fa44fa66da9e59c650 ]
    
    If the allocation of elem fails, it is not sufficient to simply check
    for NULL and return.  We need to also put our reference on the pool or
    else we will leave the pool with a permanent ref count and we will never
    be able to free it.
    
    Fixes: 4831ca9e4a8e ("IB/rxe: check for allocation failure on elem")
    Suggested-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e6474b253556343e9b0f685a5824c86aebae763
Author: Alex Vesker <valex@mellanox.com>
Date:   Thu Dec 21 17:38:27 2017 +0200

    IB/ipoib: Fix lockdep issue found on ipoib_ib_dev_heavy_flush
    
    [ Upstream commit 1f80bd6a6cc8358b81194e1f5fc16449947396ec ]
    
    The locking order of vlan_rwsem (LOCK A) and then rtnl (LOCK B),
    contradicts other flows such as ipoib_open possibly causing a deadlock.
    To prevent this deadlock heavy flush is called with RTNL locked and
    only then tries to acquire vlan_rwsem.
    This deadlock is possible only when there are child interfaces.
    
    [  140.941758] ======================================================
    [  140.946276] WARNING: possible circular locking dependency detected
    [  140.950950] 4.15.0-rc1+ #9 Tainted: G           O
    [  140.954797] ------------------------------------------------------
    [  140.959424] kworker/u32:1/146 is trying to acquire lock:
    [  140.963450]  (rtnl_mutex){+.+.}, at: [<ffffffffc083516a>] __ipoib_ib_dev_flush+0x2da/0x4e0 [ib_ipoib]
    [  140.970006]
    but task is already holding lock:
    [  140.975141]  (&priv->vlan_rwsem){++++}, at: [<ffffffffc0834ee1>] __ipoib_ib_dev_flush+0x51/0x4e0 [ib_ipoib]
    [  140.982105]
    which lock already depends on the new lock.
    [  140.990023]
    the existing dependency chain (in reverse order) is:
    [  140.998650]
    -> #1 (&priv->vlan_rwsem){++++}:
    [  141.005276]        down_read+0x4d/0xb0
    [  141.009560]        ipoib_open+0xad/0x120 [ib_ipoib]
    [  141.014400]        __dev_open+0xcb/0x140
    [  141.017919]        __dev_change_flags+0x1a4/0x1e0
    [  141.022133]        dev_change_flags+0x23/0x60
    [  141.025695]        devinet_ioctl+0x704/0x7d0
    [  141.029156]        sock_do_ioctl+0x20/0x50
    [  141.032526]        sock_ioctl+0x221/0x300
    [  141.036079]        do_vfs_ioctl+0xa6/0x6d0
    [  141.039656]        SyS_ioctl+0x74/0x80
    [  141.042811]        entry_SYSCALL_64_fastpath+0x1f/0x96
    [  141.046891]
    -> #0 (rtnl_mutex){+.+.}:
    [  141.051701]        lock_acquire+0xd4/0x220
    [  141.055212]        __mutex_lock+0x88/0x970
    [  141.058631]        __ipoib_ib_dev_flush+0x2da/0x4e0 [ib_ipoib]
    [  141.063160]        __ipoib_ib_dev_flush+0x71/0x4e0 [ib_ipoib]
    [  141.067648]        process_one_work+0x1f5/0x610
    [  141.071429]        worker_thread+0x4a/0x3f0
    [  141.074890]        kthread+0x141/0x180
    [  141.078085]        ret_from_fork+0x24/0x30
    [  141.081559]
    
    other info that might help us debug this:
    [  141.088967]  Possible unsafe locking scenario:
    [  141.094280]        CPU0                    CPU1
    [  141.097953]        ----                    ----
    [  141.101640]   lock(&priv->vlan_rwsem);
    [  141.104771]                                lock(rtnl_mutex);
    [  141.109207]                                lock(&priv->vlan_rwsem);
    [  141.114032]   lock(rtnl_mutex);
    [  141.116800]
     *** DEADLOCK ***
    
    Fixes: b4b678b06f6e ("IB/ipoib: Grab rtnl lock on heavy flush when calling ndo_open/stop")
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a4d2c93ed19c8a5fbad95b95c0c91e3f0d84f8d
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Aug 28 13:40:51 2018 +0200

    ipv6: fix cleanup ordering for ip6_mr failure
    
    [ Upstream commit afe49de44c27a89e8e9631c44b5ffadf6ace65e2 ]
    
    Commit 15e668070a64 ("ipv6: reorder icmpv6_init() and ip6_mr_init()")
    moved the cleanup label for ipmr_fail, but should have changed the
    contents of the cleanup labels as well. Now we can end up cleaning up
    icmpv6 even though it hasn't been initialized (jump to icmp_fail or
    ipmr_fail).
    
    Simply undo things in the reverse order of their initialization.
    
    Example of panic (triggered by faking a failure of icmpv6_init):
    
        kasan: GPF could be caused by NULL-ptr deref or user memory access
        general protection fault: 0000 [#1] PREEMPT SMP KASAN PTI
        [...]
        RIP: 0010:__list_del_entry_valid+0x79/0x160
        [...]
        Call Trace:
         ? lock_release+0x8a0/0x8a0
         unregister_pernet_operations+0xd4/0x560
         ? ops_free_list+0x480/0x480
         ? down_write+0x91/0x130
         ? unregister_pernet_subsys+0x15/0x30
         ? down_read+0x1b0/0x1b0
         ? up_read+0x110/0x110
         ? kmem_cache_create_usercopy+0x1b4/0x240
         unregister_pernet_subsys+0x1d/0x30
         icmpv6_cleanup+0x1d/0x30
         inet6_init+0x1b5/0x23f
    
    Fixes: 15e668070a64 ("ipv6: reorder icmpv6_init() and ip6_mr_init()")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16bcf48aa374e3d17d83f2b06c39a414d131a70f
Author: Kalle Valo <kvalo@qca.qualcomm.com>
Date:   Mon Feb 13 12:38:43 2017 +0200

    ath10k: convert warning about non-existent OTP board id to debug message
    
    [ Upstream commit 7be52c03bbf7c8f53211ed13810d64dcb2bc7168 ]
    
    Currently ath10k unncessarily warns about board id not available from OTP:
    
    ath10k_pci 0000:02:00.0: pci irq msi oper_irq_mode 2 irq_mode 0 reset_mode 0
    ath10k_pci 0000:02:00.0: qca988x hw2.0 target 0x4100016c chip_id 0x043202ff sub 0000:0000
    ath10k_pci 0000:02:00.0: kconfig debug 1 debugfs 1 tracing 1 dfs 1 testmode 1
    ath10k_pci 0000:02:00.0: firmware ver 10.2.4.70.9-2 api 5 features no-p2p,raw-mode crc32 b8d50af5
    ath10k_pci 0000:02:00.0: board id is not exist in otp, ignore it
    ath10k_pci 0000:02:00.0: board_file api 1 bmi_id N/A crc32 bebc7c08
    ath10k_pci 0000:02:00.0: htt-ver 2.1 wmi-op 5 htt-op 2 cal otp max-sta 128 raw 0 hwcrypto 1
    
    But not all boards have the board id in OTP so this is not a problem and no
    need to confuse the user with that info. So this can be safely changed to a
    debug message.
    
    Also fix grammar in the debug message.
    
    Fixes: d2e202c06ca4 ("ath10k: ignore configuring the incorrect board_id")
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddf39e0f3cc2fada80d2795ca60777ec77fe6a7d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue May 16 09:11:33 2017 +0200

    ALSA: hda - No loopback on ALC299 codec
    
    [ Upstream commit fa16b69f1299004b60b625f181143500a246e5cb ]
    
    ALC299 has no loopback mixer, but the driver still tries to add a beep
    control over the mixer NID which leads to the error at accessing it.
    This patch fixes it by properly declaring mixer_nid=0 for this codec.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=195775
    Fixes: 28f1f9b26cee ("ALSA: hda/realtek - Add new codec ID ALC299")
    Cc: stable@vger.kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54ad2bbe34800024bebadfa9141da298af37bf86
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 26 20:56:07 2017 +0800

    sctp: use right member as the param of list_for_each_entry
    
    [ Upstream commit a8dd397903a6e57157f6265911f7d35681364427 ]
    
    Commit d04adf1b3551 ("sctp: reset owner sk for data chunks on out queues
    when migrating a sock") made a mistake that using 'list' as the param of
    list_for_each_entry to traverse the retransmit, sacked and abandoned
    queues, while chunks are using 'transmitted_list' to link into these
    queues.
    
    It could cause NULL dereference panic if there are chunks in any of these
    queues when peeling off one asoc.
    
    So use the chunk member 'transmitted_list' instead in this patch.
    
    Fixes: d04adf1b3551 ("sctp: reset owner sk for data chunks on out queues when migrating a sock")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ef75f51c5d5b7cc10df4f3ec0db5ef3f9ad6253
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Nov 15 09:35:02 2017 +0100

    net: cdc_ncm: GetNtbFormat endian fix
    
    [ Upstream commit 6314dab4b8fb8493d810e175cb340376052c69b6 ]
    
    The GetNtbFormat and SetNtbFormat requests operate on 16 bit little
    endian values. We get away with ignoring this most of the time, because
    we only care about USB_CDC_NCM_NTB16_FORMAT which is 0x0000.  This
    fails for USB_CDC_NCM_NTB32_FORMAT.
    
    Fix comparison between LE value from device and constant by converting
    the constant to LE.
    
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Fixes: 2b02c20ce0c2 ("cdc_ncm: Set NTB format again after altsetting switch for Huawei devices")
    Cc: Enrico Mioso <mrkiko.rs@gmail.com>
    Cc: Christian Panton <christian@panton.org>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Acked-By: Enrico Mioso <mrkiko.rs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 855bf147245c294ff9ed54a04b242f4a6976269b
Author: Eric Ren <zren@suse.com>
Date:   Fri Jun 23 15:08:55 2017 -0700

    ocfs2: fix deadlock caused by recursive locking in xattr
    
    [ Upstream commit 8818efaaacb78c60a9d90c5705b6c99b75d7d442 ]
    
    Another deadlock path caused by recursive locking is reported.  This
    kind of issue was introduced since commit 743b5f1434f5 ("ocfs2: take
    inode lock in ocfs2_iop_set/get_acl()").  Two deadlock paths have been
    fixed by commit b891fa5024a9 ("ocfs2: fix deadlock issue when taking
    inode lock at vfs entry points").  Yes, we intend to fix this kind of
    case in incremental way, because it's hard to find out all possible
    paths at once.
    
    This one can be reproduced like this.  On node1, cp a large file from
    home directory to ocfs2 mountpoint.  While on node2, run
    setfacl/getfacl.  Both nodes will hang up there.  The backtraces:
    
    On node1:
      __ocfs2_cluster_lock.isra.39+0x357/0x740 [ocfs2]
      ocfs2_inode_lock_full_nested+0x17d/0x840 [ocfs2]
      ocfs2_write_begin+0x43/0x1a0 [ocfs2]
      generic_perform_write+0xa9/0x180
      __generic_file_write_iter+0x1aa/0x1d0
      ocfs2_file_write_iter+0x4f4/0xb40 [ocfs2]
      __vfs_write+0xc3/0x130
      vfs_write+0xb1/0x1a0
      SyS_write+0x46/0xa0
    
    On node2:
      __ocfs2_cluster_lock.isra.39+0x357/0x740 [ocfs2]
      ocfs2_inode_lock_full_nested+0x17d/0x840 [ocfs2]
      ocfs2_xattr_set+0x12e/0xe80 [ocfs2]
      ocfs2_set_acl+0x22d/0x260 [ocfs2]
      ocfs2_iop_set_acl+0x65/0xb0 [ocfs2]
      set_posix_acl+0x75/0xb0
      posix_acl_xattr_set+0x49/0xa0
      __vfs_setxattr+0x69/0x80
      __vfs_setxattr_noperm+0x72/0x1a0
      vfs_setxattr+0xa7/0xb0
      setxattr+0x12d/0x190
      path_setxattr+0x9f/0xb0
      SyS_setxattr+0x14/0x20
    
    Fix this one by using ocfs2_inode_{lock|unlock}_tracker, which is
    exported by commit 439a36b8ef38 ("ocfs2/dlmglue: prepare tracking logic
    to avoid recursive cluster lock").
    
    Link: http://lkml.kernel.org/r/20170622014746.5815-1-zren@suse.com
    Fixes: 743b5f1434f5 ("ocfs2: take inode lock in ocfs2_iop_set/get_acl()")
    Signed-off-by: Eric Ren <zren@suse.com>
    Reported-by: Thomas Voegtle <tv@lio96.de>
    Tested-by: Thomas Voegtle <tv@lio96.de>
    Reviewed-by: Joseph Qi <jiangqi903@gmail.com>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f3005096fae363c4536958850322375ad657968
Author: Mintz, Yuval <Yuval.Mintz@cavium.com>
Date:   Thu Apr 6 15:58:28 2017 +0300

    qed: Warn PTT usage by wrong hw-function
    
    [ Upstream commit 3a50d3518dcba44f8a0f9356b7140fe1499984ea ]
    
    PTT entries are per-hwfn; If some errneous flow is trying
    to use a PTT belonging to a differnet hwfn warn user, as this
    can break every register accessing flow later and is very hard
    to root-cause.
    
    Signed-off-by: Yuval Mintz <Yuval.Mintz@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0136b8acfeebe0d31a679c8311524b92d5cc987
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Jun 30 19:42:54 2017 +0200

    iio: adc: Revert "axp288: Drop bogus AXP288_ADC_TS_PIN_CTRL register modifications"
    
    [ Upstream commit 631b010abc5b57009c6a8328f51492665f6ef310 ]
    
    Inheriting the ADC BIAS current settings from the BIOS instead of
    hardcoding then causes the AXP288 to disable charging (I think it
    mis-detects an overheated battery) on at least one model tablet.
    
    So lets go back to hard coding the values, this reverts
    commit fa2849e9649b ("iio: adc: axp288: Drop bogus
    AXP288_ADC_TS_PIN_CTRL register modifications"), fixing charging not
    working on the model tablet in question.
    
    The exact cause is not fully understood, hence the revert to a known working
    state.
    
    Cc: stable@vger.kernel.org
    Reported-by: Umberto Ixxo <sfumato1977@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 271b4a840228a810202d154354328b8e83a91846
Author: Dag Moxnes <dag.moxnes@oracle.com>
Date:   Wed Apr 25 13:22:01 2018 +0200

    rds: ib: Fix missing call to rds_ib_dev_put in rds_ib_setup_qp
    
    [ Upstream commit 91a825290ca4eae88603bc811bf74a45f94a3f46 ]
    
    The function rds_ib_setup_qp is calling rds_ib_get_client_data and
    should correspondingly call rds_ib_dev_put. This call was lost in
    the non-error path with the introduction of error handling done in
    commit 3b12f73a5c29 ("rds: ib: add error handle")
    
    Signed-off-by: Dag Moxnes <dag.moxnes@oracle.com>
    Reviewed-by: Håkon Bugge <haakon.bugge@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2c87f5bf2121cfd2337e75ab75dc384c6410226
Author: Aditya Shankar <aditya.shankar@microchip.com>
Date:   Fri Apr 7 17:24:58 2017 +0530

    staging: wilc1000: Fix problem with wrong vif index
    
    [ Upstream commit 0e490657c7214cce33fbca3d88227298c5c968ae ]
    
    The vif->idx value is always 0 for two interfaces.
    
    wl->vif_num = 0;
    
    loop {
         ...
    
         vif->idx = wl->vif_num;
         ...
         wl->vif_num = i;
          ....
         i++;
         ...
    }
    
    At present, vif->idx is assigned the value of wl->vif_num
    at the beginning of this block and device is initialized
    based on this index value.
    In the next iteration, wl->vif_num is still 0 as it is only updated
    later but gets assigned to vif->idx in the beginning. This causes problems
    later when we try to reference a particular interface and also while
    configuring the firmware.
    
    This patch moves the assignment to vif->idx from the beginning
    of the block to after wl->vif_num is updated with latest value of i.
    
    Fixes: commit 735bb39ca3be ("staging: wilc1000: simplify vif[i]->ndev accesses")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Aditya Shankar <aditya.shankar@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7334e28569550a9e6bc62070c3ce1d80e39d2cbe
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Fri Dec 8 17:31:37 2017 +0200

    ptr_ring: fix up after recent ptr_ring changes
    
    [ Upstream commit 5790eabc6e7c3ce2d6ca2e3bbf4de467ce2b64b3 ]
    
    Add more stubs to make it build.
    
    Fixes: 81fbfe8a ("ptr_ring: use kmalloc_array()")
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 503c394139c94e263401ea59b1553e1916e110f2
Author: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
Date:   Fri Sep 29 09:32:53 2017 +0200

    clk: samsung: Fix m2m scaler clock on Exynos542x
    
    [ Upstream commit c07c1a0f68d0f2f7ca9aff924e2772526027b019 ]
    
    The TOP "aclk400_mscl" clock should be kept enabled all the time
    to allow proper access to power management control for MSC power
    domain and devices that are a part of it. This change is required
    for the scaler to work properly after domain power on/off sequence.
    
    Fixes: 318fa46cc60d ("clk/samsung: exynos542x: mark some clocks as critical")
    Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a34dcf51b8a6a05dc544349c5b2e23097bbdbdce
Author: Vignesh R <vigneshr@ti.com>
Date:   Fri Jul 7 11:52:52 2017 +0530

    usb: dwc3: omap: remove IRQ_NOAUTOEN used with shared irq
    
    [ Upstream commit ee249b4554947de3be77be4e9e6077b20c0fe055 ]
    
    IRQ_NOAUTOEN cannot be used with shared IRQs, since commit 04c848d39879
    ("genirq: Warn when IRQ_NOAUTOEN is used with shared interrupts") and
    kernel now throws a warn dump. But OMAP DWC3 driver uses this flag. As
    per commit 12a7f17fac5b ("usb: dwc3: omap: fix race of pm runtime with
    irq handler in probe") that introduced this flag, PM runtime can race
    with IRQ handler when deferred probing happens due to extcon,
    therefore IRQ_NOAUTOEN needs to be set so that irq is not enabled until
    extcon is registered.
    
    Remove setting of IRQ_NOAUTOEN and move the registration of
    shared irq to a point after dwc3_omap_extcon_register() and
    of_platform_populate(). This avoids possibility of probe deferring and
    above said race condition.
    
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bbba613477faee424f98e0df95b63b7cbee4cbd
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Jul 28 19:28:57 2017 +0900

    usb: renesas_usbhs: gadget: fix unused-but-set-variable warning
    
    [ Upstream commit b7d44c36a6f6d956e1539e0dd42f98b26e5a4684 ]
    
    The commit b8b9c974afee ("usb: renesas_usbhs: gadget: disable all eps
    when the driver stops") causes the unused-but-set-variable warning.
    But, if the usbhsg_ep_disable() will return non-zero value, udc/core.c
    doesn't clear the ep->enabled flag. So, this driver should not return
    non-zero value, if the pipe is zero because this means the pipe is
    already disabled. Otherwise, the ep->enabled flag is never cleared
    when the usbhsg_ep_disable() is called by the renesas_usbhs driver first.
    
    Fixes: b8b9c974afee ("usb: renesas_usbhs: gadget: disable all eps when the driver stops")
    Fixes: 11432050f070 ("usb: renesas_usbhs: gadget: fix NULL pointer dereference in ep_disable()")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dd952b45b3b6547b2f029035832e4845fccbbf7
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Aug 9 19:55:24 2017 +0900

    usb: renesas_usbhs: gadget: fix spin_lock_init() for &uep->lock
    
    [ Upstream commit 14a8d4bfc2102f85ce097563d151370c91c1898a ]
    
    This patch fixes an issue that the spin_lock_init() is not called
    for almost all pipes. Otherwise, the lockdep output the following
    message when we connect a usb cable using g_ncm:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
    
    Reported-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Fixes: b8b9c974afee ("usb: renesas_usbhs: gadget: disable all eps when the driver stops")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dde6c974c50107e6166a9dd3964ab48898e05e7
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Thu Oct 19 14:14:29 2017 +0300

    net/mlx5: Fix health work queue spin lock to IRQ safe
    
    [ Upstream commit 6377ed0bbae6fa28853e1679d068a9106c8a8908 ]
    
    spin_lock/unlock of health->wq_lock should be IRQ safe.
    It was changed to spin_lock_irqsave since adding commit 0179720d6be2
    ("net/mlx5: Introduce trigger_health_work function") which uses
    spin_lock from asynchronous event (IRQ) context.
    Thus, all spin_lock/unlock of health->wq_lock should have been moved
    to IRQ safe mode.
    However, one occurrence on new code using this lock missed that
    change, resulting in possible deadlock:
      kernel: Possible unsafe locking scenario:
      kernel:       CPU0
      kernel:       ----
      kernel:  lock(&(&health->wq_lock)->rlock);
      kernel:  <Interrupt>
      kernel:    lock(&(&health->wq_lock)->rlock);
      kernel: #012 *** DEADLOCK ***
    
    Fixes: 2a0165a034ac ("net/mlx5: Cancel delayed recovery work when unloading the driver")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cdc70f39bda78afacf11065ae5cca2adcbf0008
Author: Björn Töpel <bjorn.topel@intel.com>
Date:   Wed Jun 21 18:41:34 2017 +0200

    perf probe: Fix probe definition for inlined functions
    
    [ Upstream commit 7598f8bc1383ffd77686cb4e92e749bef3c75937 ]
    
    In commit 613f050d68a8 ("perf probe: Fix to probe on gcc generated
    functions in modules"), the offset from symbol is, incorrectly, added
    to the trace point address. This leads to incorrect probe trace points
    for inlined functions and when using relative line number on symbols.
    
    Prior this patch:
      $ perf probe -m nf_nat -D in_range
      p:probe/in_range nf_nat:in_range.isra.9+0
      $ perf probe -m i40e -D i40e_clean_rx_irq
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+2212
      $ perf probe -m i40e -D i40e_clean_rx_irq:16
      p:probe/i40e_clean_rx_irq i40e:i40e_lan_xmit_frame+626
    
    After:
      $ perf probe -m nf_nat -D in_range
      p:probe/in_range nf_nat:in_range.isra.9+0
      $ perf probe -m i40e -D i40e_clean_rx_irq
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+1106
      $ perf probe -m i40e -D i40e_clean_rx_irq:16
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+2665
    
    Committer testing:
    
    Using 'pfunct', a tool found in the 'dwarves' package [1], one can ask what are
    the functions that while not being explicitely marked as inline, were inlined
    by the compiler:
    
      # pfunct --cc_inlined /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko | head
      __ew32
      e1000_regdump
      e1000e_dump_ps_pages
      e1000_desc_unused
      e1000e_systim_to_hwtstamp
      e1000e_rx_hwtstamp
      e1000e_update_rdt_wa
      e1000e_update_tdt_wa
      e1000_put_txbuf
      e1000_consume_page
    
    Then ask 'perf probe' to produce the kprobe_tracer probe definitions for two of
    them:
    
      # perf probe -m e1000e -D e1000e_rx_hwtstamp
      p:probe/e1000e_rx_hwtstamp e1000e:e1000_receive_skb+74
    
      # perf probe -m e1000e -D e1000_consume_page
      p:probe/e1000_consume_page e1000e:e1000_clean_jumbo_rx_irq+876
      p:probe/e1000_consume_page_1 e1000e:e1000_clean_jumbo_rx_irq+1506
      p:probe/e1000_consume_page_2 e1000e:e1000_clean_rx_irq_ps+1074
    
    Now lets concentrate on the 'e1000_consume_page' one, that was inlined twice in
    e1000_clean_jumbo_rx_irq(), lets see what readelf says about the DWARF tags for
    that function:
    
      $ readelf -wi /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
      <SNIP>
      <1><13e27b>: Abbrev Number: 121 (DW_TAG_subprogram)
        <13e27c>   DW_AT_name        : (indirect string, offset: 0xa8945): e1000_clean_jumbo_rx_irq
        <13e287>   DW_AT_low_pc      : 0x17a30
      <3><13e6ef>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13e6f0>   DW_AT_abstract_origin: <0x13ed2c>
        <13e6f4>   DW_AT_low_pc      : 0x17be6
      <SNIP>
      <1><13ed2c>: Abbrev Number: 142 (DW_TAG_subprogram)
         <13ed2e>   DW_AT_name        : (indirect string, offset: 0xa54c3): e1000_consume_page
    
    So, the first time in e1000_clean_jumbo_rx_irq() where e1000_consume_page() is
    inlined is at PC 0x17be6, which subtracted from e1000_clean_jumbo_rx_irq()'s
    address, gives us the offset we should use in the probe definition:
    
      0x17be6 - 0x17a30 = 438
    
    but above we have 876, which is twice as much.
    
    Lets see the second inline expansion of e1000_consume_page() in
    e1000_clean_jumbo_rx_irq():
    
      <3><13e86e>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13e86f>   DW_AT_abstract_origin: <0x13ed2c>
        <13e873>   DW_AT_low_pc      : 0x17d21
    
      0x17d21 - 0x17a30 = 753
    
    So we where adding it at twice the offset from the containing function as we
    should.
    
    And then after this patch:
    
      # perf probe -m e1000e -D e1000e_rx_hwtstamp
      p:probe/e1000e_rx_hwtstamp e1000e:e1000_receive_skb+37
    
      # perf probe -m e1000e -D e1000_consume_page
      p:probe/e1000_consume_page e1000e:e1000_clean_jumbo_rx_irq+438
      p:probe/e1000_consume_page_1 e1000e:e1000_clean_jumbo_rx_irq+753
      p:probe/e1000_consume_page_2 e1000e:e1000_clean_jumbo_rx_irq+1353
      #
    
    Which matches the two first expansions and shows that because we were
    doubling the offset it would spill over the next function:
    
      readelf -sw /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
       673: 0000000000017a30  1626 FUNC    LOCAL  DEFAULT    2 e1000_clean_jumbo_rx_irq
       674: 0000000000018090  2013 FUNC    LOCAL  DEFAULT    2 e1000_clean_rx_irq_ps
    
    This is the 3rd inline expansion of e1000_consume_page() in
    e1000_clean_jumbo_rx_irq():
    
       <3><13ec77>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13ec78>   DW_AT_abstract_origin: <0x13ed2c>
        <13ec7c>   DW_AT_low_pc      : 0x17f79
    
      0x17f79 - 0x17a30 = 1353
    
     So:
    
       0x17a30 + 2 * 1353 = 0x184c2
    
      And:
    
       0x184c2 - 0x18090 = 1074
    
    Which explains the bogus third expansion for e1000_consume_page() to end up at:
    
       p:probe/e1000_consume_page_2 e1000e:e1000_clean_rx_irq_ps+1074
    
    All fixed now :-)
    
    [1] https://git.kernel.org/pub/scm/devel/pahole/pahole.git/
    
    Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 613f050d68a8 ("perf probe: Fix to probe on gcc generated functions in modules")
    Link: http://lkml.kernel.org/r/20170621164134.5701-1-bjorn.topel@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d19a505207edee6f6b2c214c7c11e9a8294fd2c
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Jun 9 16:54:28 2017 -0300

    perf evsel: Fix probing of precise_ip level for default cycles event
    
    [ Upstream commit 7a1ac110c22eb726684c837544a2d42c33e07be7 ]
    
    Since commit 18e7a45af91a ("perf/x86: Reject non sampling events with
    precise_ip") returns -EINVAL for sys_perf_event_open() with an attribute
    with (attr.precise_ip > 0 && attr.sample_period == 0), just like is done
    in the routine used to probe the max precise level when no events were
    passed to 'perf record' or 'perf top', i.e.:
    
            perf_evsel__new_cycles()
                    perf_event_attr__set_max_precise_ip()
    
    The x86 code, in x86_pmu_hw_config(), which is called all the way from
    sys_perf_event_open() did, starting with the aforementioned commit:
    
                    /* There's no sense in having PEBS for non sampling events: */
                    if (!is_sampling_event(event))
                            return -EINVAL;
    
    Which makes it fail for cycles:ppp, cycles:pp and cycles:p, always using
    just the non precise cycles variant.
    
    To make sure that this is the case, I tested it, before this patch,
    with:
    
      # perf probe -L x86_pmu_hw_config
      <x86_pmu_hw_config@/home/acme/git/linux/arch/x86/events/core.c:0>
            0  int x86_pmu_hw_config(struct perf_event *event)
            1  {
            2         if (event->attr.precise_ip) {
    <SNIP>
           17                 if (event->attr.precise_ip > precise)
           18                         return -EOPNOTSUPP;
    
                              /* There's no sense in having PEBS for non sampling events: */
           21                 if (!is_sampling_event(event))
           22                         return -EINVAL;
                      }
    <SNIP>
      # perf probe x86_pmu_hw_config:22
      Added new events:
        probe:x86_pmu_hw_config (on x86_pmu_hw_config:22)
        probe:x86_pmu_hw_config_1 (on x86_pmu_hw_config:22)
    
      You can now use it in all perf tools, such as:
    
            perf record -e probe:x86_pmu_hw_config_1 -aR sleep 1
    
      # perf trace -e perf_event_open,probe:x86_pmu_hwconfig*/max-stack=16/ perf record usleep 1
         0.000 ( 0.015 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8ba110, cpu: -1, group_fd: -1      ) ...
         0.015 (         ): probe:x86_pmu_hw_config:(ffffffff9c0065e1))
                                           x86_pmu_hw_config ([kernel.kallsyms])
                                           hsw_hw_config ([kernel.kallsyms])
                                           x86_pmu_event_init ([kernel.kallsyms])
                                           perf_try_init_event ([kernel.kallsyms])
                                           perf_event_alloc ([kernel.kallsyms])
                                           SYSC_perf_event_open ([kernel.kallsyms])
                                           sys_perf_event_open ([kernel.kallsyms])
                                           do_syscall_64 ([kernel.kallsyms])
                                           return_from_SYSCALL_64 ([kernel.kallsyms])
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
                                           perf_evsel__new_cycles (/home/acme/bin/perf)
                                           perf_evlist__add_default (/home/acme/bin/perf)
                                           cmd_record (/home/acme/bin/perf)
                                           run_builtin (/home/acme/bin/perf)
                                           handle_internal_command (/home/acme/bin/perf)
         0.000 ( 0.021 ms): perf/4150  ... [continued]: perf_event_open()) = -1 EINVAL Invalid argument
         0.023 ( 0.002 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8ba110, cpu: -1, group_fd: -1      ) ...
         0.025 (         ): probe:x86_pmu_hw_config:(ffffffff9c0065e1))
                                           x86_pmu_hw_config ([kernel.kallsyms])
                                           hsw_hw_config ([kernel.kallsyms])
                                           x86_pmu_event_init ([kernel.kallsyms])
                                           perf_try_init_event ([kernel.kallsyms])
                                           perf_event_alloc ([kernel.kallsyms])
                                           SYSC_perf_event_open ([kernel.kallsyms])
                                           sys_perf_event_open ([kernel.kallsyms])
                                           do_syscall_64 ([kernel.kallsyms])
                                           return_from_SYSCALL_64 ([kernel.kallsyms])
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
                                           perf_evsel__new_cycles (/home/acme/bin/perf)
                                           perf_evlist__add_default (/home/acme/bin/perf)
                                           cmd_record (/home/acme/bin/perf)
                                           run_builtin (/home/acme/bin/perf)
                                           handle_internal_command (/home/acme/bin/perf)
         0.023 ( 0.004 ms): perf/4150  ... [continued]: perf_event_open()) = -1 EINVAL Invalid argument
         0.028 ( 0.002 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8ba110, cpu: -1, group_fd: -1      ) ...
         0.030 (         ): probe:x86_pmu_hw_config:(ffffffff9c0065e1))
                                           x86_pmu_hw_config ([kernel.kallsyms])
                                           hsw_hw_config ([kernel.kallsyms])
                                           x86_pmu_event_init ([kernel.kallsyms])
                                           perf_try_init_event ([kernel.kallsyms])
                                           perf_event_alloc ([kernel.kallsyms])
                                           SYSC_perf_event_open ([kernel.kallsyms])
                                           sys_perf_event_open ([kernel.kallsyms])
                                           do_syscall_64 ([kernel.kallsyms])
                                           return_from_SYSCALL_64 ([kernel.kallsyms])
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
                                           perf_evsel__new_cycles (/home/acme/bin/perf)
                                           perf_evlist__add_default (/home/acme/bin/perf)
                                           cmd_record (/home/acme/bin/perf)
                                           run_builtin (/home/acme/bin/perf)
                                           handle_internal_command (/home/acme/bin/perf)
         0.028 ( 0.004 ms): perf/4150  ... [continued]: perf_event_open()) = -1 EINVAL Invalid argument
        41.018 ( 0.012 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8b5dd0, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
        41.065 ( 0.011 ms): perf/4150 perf_event_open(attr_uptr: 0x3c7db78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
        41.080 ( 0.006 ms): perf/4150 perf_event_open(attr_uptr: 0x3c7db78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
        41.103 ( 0.010 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), group_fd: -1, flags: FD_CLOEXEC) = 4
        41.115 ( 0.006 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), cpu: 1, group_fd: -1, flags: FD_CLOEXEC) = 5
        41.122 ( 0.004 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), cpu: 2, group_fd: -1, flags: FD_CLOEXEC) = 6
        41.128 ( 0.008 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), cpu: 3, group_fd: -1, flags: FD_CLOEXEC) = 8
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.017 MB perf.data (2 samples) ]
      #
    
    I.e. that return -EINVAL in x86_pmu_hw_config() is hit three times.
    
    So fix it by just setting attr.sample_period
    
    Now, after this patch:
    
      # perf trace --max-stack=2 -e perf_event_open,probe:x86_pmu_hw_config* perf record usleep 1
      [ perf record: Woken up 1 times to write data ]
         0.000 ( 0.017 ms): perf/8469 perf_event_open(attr_uptr: 0x7ffe36c27d10, pid: -1, cpu: 3, group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_open_cloexec_flag (/home/acme/bin/perf)
         0.050 ( 0.031 ms): perf/8469 perf_event_open(attr_uptr: 0x24ebb78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evlist__config (/home/acme/bin/perf)
         0.092 ( 0.040 ms): perf/8469 perf_event_open(attr_uptr: 0x24ebb78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evlist__config (/home/acme/bin/perf)
         0.143 ( 0.007 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, cpu: -1, group_fd: -1           ) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
         0.161 ( 0.007 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
         0.171 ( 0.005 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), cpu: 1, group_fd: -1, flags: FD_CLOEXEC) = 5
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
         0.180 ( 0.007 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), cpu: 2, group_fd: -1, flags: FD_CLOEXEC) = 6
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
         0.190 ( 0.005 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), cpu: 3, group_fd: -1, flags: FD_CLOEXEC) = 8
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
      [ perf record: Captured and wrote 0.017 MB perf.data (7 samples) ]
      #
    
    The probe one called from perf_event_attr__set_max_precise_ip() works
    the first time, with attr.precise_ip = 3, wit hthe next ones being the
    per cpu ones for the cycles:ppp event.
    
    And here is the text from a report and alternative proposed patch by
    Thomas-Mich Richter:
    
     ---
    
    On s390 the counter and sampling facility do not support a precise IP
    skid level and sometimes returns EOPNOTSUPP when structure member
    precise_ip in struct perf_event_attr is not set to zero.
    
    On s390 commnd 'perf record -- true' fails with error EOPNOTSUPP.  This
    happens only when no events are specified on command line.
    
    The functions called are
    ...
      --> perf_evlist__add_default
          --> perf_evsel__new_cycles
              --> perf_event_attr__set_max_precise_ip
    
    The last function determines the value of structure member precise_ip by
    invoking the perf_event_open() system call and checking the return code.
    The first successful open is the value for precise_ip.
    
    However the value is determined without setting member sample_period and
    indicates no sampling.
    
    On s390 the counter facility and sampling facility are different.  The
    above procedure determines a precise_ip value of 3 using the counter
    facility. Later it uses the sampling facility with a value of 3 and
    fails with EOPNOTSUPP.
    
     ---
    
    v2: Older compilers (e.g. gcc 4.4.7) don't support referencing members
        of unnamed union members in the container struct initialization, so
        move from:
    
            struct perf_event_attr attr = {
                    ...
                    .sample_period = 1,
            };
    
    to right after it as:
    
            struct perf_event_attr attr = {
                    ...
            };
    
            attr.sample_period = 1;
    
    v3: We need to reset .sample_period to 0 to let the users of
    perf_evsel__new_cycles() to properly setup attr.sample_period or
    attr.sample_freq. Reported by Ingo Molnar.
    
    Reported-and-Acked-by: Thomas-Mich Richter <tmricht@linux.vnet.ibm.com>
    Acked-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Fixes: 18e7a45af91a ("perf/x86: Reject non sampling events with precise_ip")
    Link: http://lkml.kernel.org/n/tip-yv6nnkl7tzqocrm0hl3x7vf1@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d28f9a3aeee9529d5890d4164931c4d668ea8f6
Author: Gal Pressman <galp@mellanox.com>
Date:   Mon Jun 19 18:25:59 2017 +0300

    net/mlx5: Fix driver load error flow when firmware is stuck
    
    [ Upstream commit 8ce59b16b4b6eacedaec1f7b652b4781cdbfe15f ]
    
    When wait for firmware init fails, previous code would mistakenly
    return success and cause inconsistency in the driver state.
    
    Fixes: 6c780a0267b8 ("net/mlx5: Wait for FW readiness before initializing command interface")
    Signed-off-by: Gal Pressman <galp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fdeb3e0bb1d513828aec374749958ccb5ab8922
Author: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
Date:   Sat Jun 17 11:38:05 2017 +0800

    ip6_tunnel: Correct tos value in collect_md mode
    
    [ Upstream commit 46f8cd9d2fc1e4e8b82b53a0007f6c92e80c930b ]
    
    Same as ip_gre, geneve and vxlan, use key->tos as traffic class value.
    
    CC: Peter Dawson <petedaws@gmail.com>
    Fixes: 0e9a709560db ("ip6_tunnel, ip6_gre: fix setting of DSCP on
    encapsulated packets”)
    Signed-off-by: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
    Acked-by: Peter Dawson <peter.a.dawson@boeing.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8013d43a0bf15cd9bf17acb827ae9f8d1b720708
Author: Talat Batheesh <talatb@mellanox.com>
Date:   Sun Jan 21 05:30:42 2018 +0200

    net/mlx5e: Fix fixpoint divide exception in mlx5e_am_stats_compare
    
    [ Upstream commit e58edaa4863583b54409444f11b4f80dff0af1cd ]
    
    Helmut reported a bug about division by zero while
    running traffic and doing physical cable pull test.
    
    When the cable unplugged the ppms become zero, so when
    dividing the current ppms by the previous ppms in the
    next dim iteration there is division by zero.
    
    This patch prevent this division for both ppms and epms.
    
    Fixes: c3164d2fc48f ("net/mlx5e: Added BW check for DIM decision mechanism")
    Reported-by: Helmut Grauer <helmut.grauer@de.ibm.com>
    Signed-off-by: Talat Batheesh <talatb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 538f9d939030ea535ace82cf2d3d4cc061e60713
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Jun 10 12:01:50 2017 -0400

    ufs: we need to sync inode before freeing it
    
    [ Upstream commit 67a70017fa0a152657bc7e337e69bb9c9f5549bf ]
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f33ed8438676d4731e0ea66f592ea4cd0e8fa96b
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Fri May 26 17:44:23 2017 -0600

    Btrfs: clear EXTENT_DEFRAG bits in finish_ordered_io
    
    [ Upstream commit 452e62b71fbbefe2646fad3a968371a026936c6d ]
    
    Before this, we use 'filled' mode here, ie. if all range has been
    filled with EXTENT_DEFRAG bits, get to clear it, but if the defrag
    range joins the adjacent delalloc range, then we'll have EXTENT_DEFRAG
    bits in extent_state until releasing this inode's pages, and that
    prevents extent_data from being freed.
    
    This clears the bit if any was found within the ordered extent.
    
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Chris Mason <clm@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30037edd16f4b43eafdaf8bbfd5c00fb9666004f
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Jun 5 10:04:52 2017 +0100

    net: stmmac: ensure jumbo_frm error return is correctly checked for -ve value
    
    [ Upstream commit 594238158bf748c285f0a73222cd9b7ccf3c525d ]
    
    The current comparison of entry < 0 will never be true since entry is an
    unsigned integer. Make entry an int to ensure -ve error return values
    from the call to jumbo_frm are correctly being caught.
    
    Detected by CoverityScan, CID#1238760 ("Macro compares unsigned to 0")
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03a1d0be64ba74b50252e32944b42967d98d155a
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Jun 2 20:35:51 2017 -0700

    elevator: fix truncation of icq_cache_name
    
    [ Upstream commit 9bd2bbc01d17ddd567cc0f81f77fe1163e497462 ]
    
    gcc 7.1 reports the following warning:
    
        block/elevator.c: In function ‘elv_register’:
        block/elevator.c:898:5: warning: ‘snprintf’ output may be truncated before the last format character [-Wformat-truncation=]
             "%s_io_cq", e->elevator_name);
             ^~~~~~~~~~
        block/elevator.c:897:3: note: ‘snprintf’ output between 7 and 22 bytes into a destination of size 21
           snprintf(e->icq_cache_name, sizeof(e->icq_cache_name),
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             "%s_io_cq", e->elevator_name);
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    The bug is that the name of the icq_cache is 6 characters longer than
    the elevator name, but only ELV_NAME_MAX + 5 characters were reserved
    for it --- so in the case of a maximum-length elevator name, the 'q'
    character in "_io_cq" would be truncated by snprintf().  Fix it by
    reserving ELV_NAME_MAX + 6 characters instead.
    
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Bart Van Assche <Bart.VanAssche@sandisk.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b51100d8ac51c85301e23be31b1515136dc4ddd
Author: Marek Vasut <marex@denx.de>
Date:   Sat Jun 3 11:57:21 2017 -0700

    gpu: ipu-v3: Fix CSI selection for VDIC
    
    [ Upstream commit b7dfee2433576f1f030cb84cdb04b70f36554992 ]
    
    The description of the CSI_SEL bit in the i.MX6 reference manual is
    incorrect. It states "This bit defines which CSI is the input to the
    IC. This bit is effective only if IC_INPUT is bit cleared".
    
    From experiment it was found this is in fact not correct. The CSI_SEL
    bit selects which CSI is input to _both_ the VDIC _and_ the IC. If the
    IC_INPUT bit is set so that the IC is receiving from the VDIC, the IC
    ignores the CSI_SEL bit, but CSI_SEL still selects which CSI the VDIC
    receives from in that case.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Steve Longerbeam <steve_longerbeam@mentor.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b5407843691b119e5af6a53c0826bd2719f7648
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed May 24 15:31:57 2017 +0100

    ARM: 8677/1: boot/compressed: fix decompressor header layout for v7-M
    
    [ Upstream commit 06a4b6d009a1b74a6ec46c5418b46cc53a79fcb8 ]
    
    As reported by Patrice, the header layout of the decompressor is
    incorrect when building for v7-M. In this case, the __nop macro
    resolves to 'mov r0, r0', which is emitted as a narrow encoding,
    resulting in the header data fields to end up at lower offsets than
    required.
    
    Given the variety of targets we need to support with the same code,
    the startup sequence is a bit of a jumble, and uses instructions
    and macros whose encoding widths cannot be specified (badr), or only
    exist in a narrow encoding (bx)
    
    So force the use of a wide encoding in __nop, and replace the start
    sequence with a simple jump to the label marking the start of code,
    preceded by a Thumb2 mode switch if required (using explicit wide
    encodings where appropriate). The label itself can be moved to the
    start of code [where it belongs] due to the larger range of branch
    instructions as compared to adr instructions.
    
    Reported-by: Patrice CHOTARD <patrice.chotard@st.com>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d58f0b059948ac33abcf9ea6ea9623aab71169f1
Author: Christian Sünkenberg <christian.suenkenberg@student.kit.edu>
Date:   Sun Jun 4 19:18:39 2017 +0200

    x86/cpu/cyrix: Add alternative Device ID of Geode GX1 SoC
    
    [ Upstream commit ae1d557d8f30cb097b4d1f2ab04fa294588ee1cf ]
    
    A SoC variant of Geode GX1, notably NSC branded SC1100, seems to
    report an inverted Device ID in its DIR0 configuration register,
    specifically 0xb instead of the expected 0x4.
    
    Catch this presumably quirky version so it's properly recognized
    as GX1 and has its cache switched to write-back mode, which provides
    a significant performance boost in most workloads.
    
    SC1100's datasheet "Geode™ SC1100 Information Appliance On a Chip",
    states in section 1.1.7.1 "Device ID" that device identification
    values are specified in SC1100's device errata. These, however,
    seem to not have been publicly released.
    
    Wading through a number of boot logs and /proc/cpuinfo dumps found on
    pastebin and blogs, this patch should mostly be relevant for a number
    of now admittedly aging Soekris NET4801 and PC Engines WRAP devices,
    the latter being the platform this issue was discovered on.
    Performance impact was verified using "openssl speed", with
    write-back caching scaling throughput between -3% and +41%.
    
    Signed-off-by: Christian Sünkenberg <christian.suenkenberg@student.kit.edu>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1496596719.26725.14.camel@student.kit.edu
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ba5909c8c7b9b8853734fcc2fa1299bae24ec46
Author: Chopra, Manish <Manish.Chopra@cavium.com>
Date:   Fri Jun 2 06:52:54 2017 -0700

    qlcnic: Fix tunnel offload for 82xx adapters
    
    [ Upstream commit 4bd7ef0b033721b659b9357057e76d1ced95c1da ]
    
    Qlogic's 82xx series adapter doesn't support
    tunnel offloads, driver incorrectly assumes that it is
    supported and causes firmware hang while running tunnel IO.
    
    This patch fixes this by not advertising tunnel offloads
    for 82xx adapters.
    
    Signed-off-by: Manish Chopra <manish.chopra@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23bf0b4ab024a7eff1469b0f9ceb8ce3d60c6b8a
Author: Thor Thayer <thor.thayer@linux.intel.com>
Date:   Wed May 31 14:28:47 2017 -0500

    net: ethernet: stmmac: Fix altr_tse_pcs SGMII Initialization
    
    [ Upstream commit 77032732d0e89b83c3bca75b857a1f63e9efb44b ]
    
    Fix NETDEV WATCHDOG timeout on startup by adding missing register
    writes that properly setup SGMII.
    
    Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
    Acked-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9f4be67be832d6b8917e70ea45c2683bf0f4913
Author: Tejun Heo <tj@kernel.org>
Date:   Wed May 31 14:26:26 2017 -0400

    libata: fix error checking in in ata_parse_force_one()
    
    [ Upstream commit f7cf69ae171592d133c69b9adaa5de7cfb6038ea ]
    
    ata_parse_force_one() was incorrectly comparing @p to @endp when it
    should have been comparing @id.  The only consequence is that it may
    end up using an invalid port number in "libata.force" module param
    instead of rejecting it.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Petru-Florin Mihancea <petrum@gmail.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=195785
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd500b357b81df3b0827fe1e6a7d0debe6506494
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat May 27 00:27:25 2017 +0200

    mac80211: fix TX aggregation start/stop callback race
    
    [ Upstream commit 7a7c0a6438b8e7636d5a22e572892cc234f68297 ]
    
    When starting or stopping an aggregation session, one of the steps
    is that the driver calls back to mac80211 that the start/stop can
    proceed. This is handled by queueing up a fake SKB and processing
    it from the normal iface/sdata work. Since this isn't flushed when
    disassociating, the following race is possible:
    
     * associate
     * start aggregation session
     * driver callback
     * disassociate
     * associate again to the same AP
     * callback processing runs, leading to a WARN_ON() that
       the TID hadn't requested aggregation
    
    If the second association isn't to the same AP, there would only
    be a message printed ("Could not find station: <addr>"), but the
    same race could happen.
    
    Fix this by not going the whole detour with a fake SKB etc. but
    simply looking up the aggregation session in the driver callback,
    marking it with a START_CB/STOP_CB bit and then scheduling the
    regular aggregation work that will now process these bits as well.
    This also simplifies the code and gets rid of the whole problem
    with allocation failures of said skb, which could have left the
    session in limbo.
    
    Reported-by: Jouni Malinen <j@w1.fi>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 942630bb4c9e7a69b08c939de470e174f8ce8a82
Author: Jane Chu <jane.chu@oracle.com>
Date:   Thu May 25 13:51:20 2017 -0600

    arch/sparc: increase CONFIG_NODES_SHIFT on SPARC64 to 5
    
    [ Upstream commit 7485af89a6fd48f7e6fab2505d2364d1817723e6 ]
    
    SPARC M6-32 platform has (2^5) NUMA nodes, so need to bump up the
    CONFIG_NODES_SHIFT to 5.
    
    Orabug: 25577754
    
    Signed-off-by: Jane Chu <jane.chu@oracle.com>
    Reviewed-by: Bob Picco <bob.picco@oracle.com>
    Reviewed-by: Atish Patra <atish.patra@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c375d28caa735bf1987a4cf225d7d89e7f5bb8dc
Author: Shreyas NC <shreyas.nc@intel.com>
Date:   Mon May 15 19:44:30 2017 +0530

    ASoC: Intel: Skylake: Fix to parse consecutive string tkns in manifest
    
    [ Upstream commit 0a716776914ed9d7ca90b48041e6767693bfb672 ]
    
    Element size in the manifest should be updated for each token, so that the
    loop can parse all the string elements in the manifest. This was not
    happening when more than two string elements appear consecutively, as it is
    not updated with correct string element size. Fixed with this patch.
    
    Signed-off-by: Shreyas NC <shreyas.nc@intel.com>
    Signed-off-by: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
    Acked-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cb2faefc12acc7757f8bec803c7ac6e336e0295
Author: Jeremy Linton <lintonrjeremy@gmail.com>
Date:   Sat Apr 8 02:18:40 2017 -0500

    reset: hi6220: Set module license so that it can be loaded
    
    [ Upstream commit 4497a224f759cd8350e07382307b55f870ef0df2 ]
    
    The hi6220_reset driver can be built as a standalone module
    yet it cannot be loaded because it depends on GPL exported symbols.
    
    Lets set the module license so that the module loads, and things like
    the on-board kirin drm starts working.
    
    Signed-off-by: Jeremy Linton <lintonrjeremy@gmail.com>
    Reviewed-by: Xinliang Liu <xinliang.liu@linaro.org>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa0b7f94ce43f0859690ef9755b94fc9121634e2
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Tue May 9 16:00:28 2017 +0530

    ata: sata_rcar: Handle return value of clk_prepare_enable
    
    [ Upstream commit 5dc63fdcc09f47fb226b8bc7d83a61feb787d817 ]
    
    Here, Clock enable can failed. So adding an error check for
    clk_prepare_enable.
    
    tj: minor style updates
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b1cfa2e9db6168bcbccafa1e3c0dce32e0d33ee
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Fri Apr 7 10:43:15 2017 +0800

    btrfs: fiemap: Cache and merge fiemap extent before submit it to user
    
    [ Upstream commit 4751832da990a927c37526ae67b9226ea01eb99e ]
    
    [BUG]
    Cycle mount btrfs can cause fiemap to return different result.
    Like:
     # mount /dev/vdb5 /mnt/btrfs
     # dd if=/dev/zero bs=16K count=4 oflag=dsync of=/mnt/btrfs/file
     # xfs_io -c "fiemap -v" /mnt/btrfs/file
     /mnt/test/file:
     EXT: FILE-OFFSET      BLOCK-RANGE      TOTAL FLAGS
       0: [0..127]:        25088..25215       128   0x1
     # umount /mnt/btrfs
     # mount /dev/vdb5 /mnt/btrfs
     # xfs_io -c "fiemap -v" /mnt/btrfs/file
     /mnt/test/file:
     EXT: FILE-OFFSET      BLOCK-RANGE      TOTAL FLAGS
       0: [0..31]:         25088..25119        32   0x0
       1: [32..63]:        25120..25151        32   0x0
       2: [64..95]:        25152..25183        32   0x0
       3: [96..127]:       25184..25215        32   0x1
    But after above fiemap, we get correct merged result if we call fiemap
    again.
     # xfs_io -c "fiemap -v" /mnt/btrfs/file
     /mnt/test/file:
     EXT: FILE-OFFSET      BLOCK-RANGE      TOTAL FLAGS
       0: [0..127]:        25088..25215       128   0x1
    
    [REASON]
    Btrfs will try to merge extent map when inserting new extent map.
    
    btrfs_fiemap(start=0 len=(u64)-1)
    |- extent_fiemap(start=0 len=(u64)-1)
       |- get_extent_skip_holes(start=0 len=64k)
       |  |- btrfs_get_extent_fiemap(start=0 len=64k)
       |     |- btrfs_get_extent(start=0 len=64k)
       |        |  Found on-disk (ino, EXTENT_DATA, 0)
       |        |- add_extent_mapping()
       |        |- Return (em->start=0, len=16k)
       |
       |- fiemap_fill_next_extent(logic=0 phys=X len=16k)
       |
       |- get_extent_skip_holes(start=0 len=64k)
       |  |- btrfs_get_extent_fiemap(start=0 len=64k)
       |     |- btrfs_get_extent(start=16k len=48k)
       |        |  Found on-disk (ino, EXTENT_DATA, 16k)
       |        |- add_extent_mapping()
       |        |  |- try_merge_map()
       |        |     Merge with previous em start=0 len=16k
       |        |     resulting em start=0 len=32k
       |        |- Return (em->start=0, len=32K)    << Merged result
       |- Stripe off the unrelated range (0~16K) of return em
       |- fiemap_fill_next_extent(logic=16K phys=X+16K len=16K)
          ^^^ Causing split fiemap extent.
    
    And since in add_extent_mapping(), em is already merged, in next
    fiemap() call, we will get merged result.
    
    [FIX]
    Here we introduce a new structure, fiemap_cache, which records previous
    fiemap extent.
    
    And will always try to merge current fiemap_cache result before calling
    fiemap_fill_next_extent().
    Only when we failed to merge current fiemap extent with cached one, we
    will call fiemap_fill_next_extent() to submit cached one.
    
    So by this method, we can merge all fiemap extents.
    
    It can also be done in fs/ioctl.c, however the problem is if
    fieinfo->fi_extents_max == 0, we have no space to cache previous fiemap
    extent.
    So I choose to merge it in btrfs.
    
    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Reviewed-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 311058153732dc691ca973ee16f6e6901bbb36ab
Author: Phil Elwell <phil@raspberrypi.org>
Date:   Tue May 9 10:04:30 2017 +0100

    ARM: dts: bcm283x: Reserve first page for firmware
    
    [ Upstream commit b0804ed0cadd7e38d94d2f15cdcc0d9695818856 ]
    
    The Raspberry Pi startup stub files for multi-core BCM283X processors
    make the secondary CPUs spin until the corresponding mailbox is
    written. These stubs are loaded at physical address 0x00000xxx (as seen
    by the ARMs), but this page will be reused by the kernel unless it is
    explicitly reserved, causing the waiting cores to execute random code.
    
    Use the /memreserve/ Device Tree directive to mark the first page as
    off-limits to the kernel.
    
    See: https://github.com/raspberrypi/linux/issues/1989
    Signed-off-by: Phil Elwell <phil@raspberrypi.org>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 451d498b7b10160155bf3fd4d25cee5ae5a129d7
Author: Mohammed Shafi Shajakhan <mohammed@qti.qualcomm.com>
Date:   Mon Mar 20 20:52:46 2017 +0530

    ath10k: fix NAPI enable/disable symmetry for AHB interface
    
    [ Upstream commit a7595a820b07db9ac0d8f479ff62002bdd32a05a ]
    
    Move NAPI enable to 'ath10k_ahb_hif_start' from
    'ath10k_ahb_hif_power_up'. This is to maintain the symmetry
    of calling napi_enable() from ath10k_ahb_hif_start() so that it
    matches with  napi_disable() being called from ath10k_pci_hif_stop().
    
    This change is based on the crash fix from Kalle for PCI interface in
    commit 1427228d5869 ("ath10k: fix napi crash during rmmod when probe
    firmware fails").
    
    Signed-off-by: Mohammed Shafi Shajakhan <mohammed@qti.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e6250bcd163d96062d156c1d6c2cbd83f2e66ad
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Fri Oct 13 21:09:30 2017 -0400

    bnxt_en: Don't use rtnl lock to protect link change logic in workqueue.
    
    [ Upstream commit e2dc9b6e38fa3919e63d6d7905da70ca41cbf908 ]
    
    As a further improvement to the PF/VF link change logic, use a private
    mutex instead of the rtnl lock to protect link change logic.  With the
    new mutex, we don't have to take the rtnl lock in the workqueue when
    we have to handle link related functions.  If the VF and PF drivers
    are running on the same host and both take the rtnl lock and one is
    waiting for the other, it will cause timeout.  This patch fixes these
    timeouts.
    
    Fixes: 90c694bb7181 ("bnxt_en: Fix RTNL lock usage on bnxt_update_link().")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f48581af308e6007e306b5b97744cbc7250e42a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Aug 22 12:28:41 2017 +0200

    tipc: fix a race condition of releasing subscriber object
    
    [ Upstream commit fd849b7c41f0fabfe783d0691a63c5518e8ebc99 ]
    
    No matter whether a request is inserted into workqueue as a work item
    to cancel a subscription or to delete a subscription's subscriber
    asynchronously, the work items may be executed in different workers.
    As a result, it doesn't mean that one request which is raised prior to
    another request is definitely handled before the latter. By contrast,
    if the latter request is executed before the former request, below
    error may happen:
    
    [  656.183644] BUG: spinlock bad magic on CPU#0, kworker/u8:0/12117
    [  656.184487] general protection fault: 0000 [#1] SMP
    [  656.185160] Modules linked in: tipc ip6_udp_tunnel udp_tunnel 9pnet_virtio 9p 9pnet virtio_net virtio_pci virtio_ring virtio [last unloaded: ip6_udp_tunnel]
    [  656.187003] CPU: 0 PID: 12117 Comm: kworker/u8:0 Not tainted 4.11.0-rc7+ #6
    [  656.187920] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [  656.188690] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [  656.189371] task: ffff88003f5cec40 task.stack: ffffc90004448000
    [  656.190157] RIP: 0010:spin_bug+0xdd/0xf0
    [  656.190678] RSP: 0018:ffffc9000444bcb8 EFLAGS: 00010202
    [  656.191375] RAX: 0000000000000034 RBX: ffff88003f8d1388 RCX: 0000000000000000
    [  656.192321] RDX: ffff88003ba13708 RSI: ffff88003ba0cd08 RDI: ffff88003ba0cd08
    [  656.193265] RBP: ffffc9000444bcd0 R08: 0000000000000030 R09: 000000006b6b6b6b
    [  656.194208] R10: ffff8800bde3e000 R11: 00000000000001b4 R12: 6b6b6b6b6b6b6b6b
    [  656.195157] R13: ffffffff81a3ca64 R14: ffff88003f8d1388 R15: ffff88003f8d13a0
    [  656.196101] FS:  0000000000000000(0000) GS:ffff88003ba00000(0000) knlGS:0000000000000000
    [  656.197172] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  656.197935] CR2: 00007f0b3d2e6000 CR3: 000000003ef9e000 CR4: 00000000000006f0
    [  656.198873] Call Trace:
    [  656.199210]  do_raw_spin_lock+0x66/0xa0
    [  656.199735]  _raw_spin_lock_bh+0x19/0x20
    [  656.200258]  tipc_subscrb_subscrp_delete+0x28/0xf0 [tipc]
    [  656.200990]  tipc_subscrb_rcv_cb+0x45/0x260 [tipc]
    [  656.201632]  tipc_receive_from_sock+0xaf/0x100 [tipc]
    [  656.202299]  tipc_recv_work+0x2b/0x60 [tipc]
    [  656.202872]  process_one_work+0x157/0x420
    [  656.203404]  worker_thread+0x69/0x4c0
    [  656.203898]  kthread+0x138/0x170
    [  656.204328]  ? process_one_work+0x420/0x420
    [  656.204889]  ? kthread_create_on_node+0x40/0x40
    [  656.205527]  ret_from_fork+0x29/0x40
    [  656.206012] Code: 48 8b 0c 25 00 c5 00 00 48 c7 c7 f0 24 a3 81 48 81 c1 f0 05 00 00 65 8b 15 61 ef f5 7e e8 9a 4c 09 00 4d 85 e4 44 8b 4b 08 74 92 <45> 8b 84 24 40 04 00 00 49 8d 8c 24 f0 05 00 00 eb 8d 90 0f 1f
    [  656.208504] RIP: spin_bug+0xdd/0xf0 RSP: ffffc9000444bcb8
    [  656.209798] ---[ end trace e2a800e6eb0770be ]---
    
    In above scenario, the request of deleting subscriber was performed
    earlier than the request of canceling a subscription although the
    latter was issued before the former, which means tipc_subscrb_delete()
    was called before tipc_subscrp_cancel(). As a result, when
    tipc_subscrb_subscrp_delete() called by tipc_subscrp_cancel() was
    executed to cancel a subscription, the subscription's subscriber
    refcnt had been decreased to 1. After tipc_subscrp_delete() where
    the subscriber was freed because its refcnt was decremented to zero,
    but the subscriber's lock had to be released, as a consequence, panic
    happened.
    
    By contrast, if we increase subscriber's refcnt before
    tipc_subscrb_subscrp_delete() is called in tipc_subscrp_cancel(),
    the panic issue can be avoided.
    
    Fixes: d094c4d5f5c7 ("tipc: add subscription refcount to avoid invalid delete")
    Reported-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2185dbac9e81c1b757bc41bb77e7dd97edbf78e1
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Aug 23 10:43:02 2017 -0400

    tipc: Fix tipc_sk_reinit handling of -EAGAIN
    
    [ Upstream commit 6c7e983b220f89e03286dc70a41c7ef3a8b409df ]
    
    In 9dbbfb0ab6680c6a85609041011484e6658e7d3c function tipc_sk_reinit
    had additional logic added to loop in the event that function
    rhashtable_walk_next() returned -EAGAIN. No worries.
    
    However, if rhashtable_walk_start returns -EAGAIN, it does "continue",
    and therefore skips the call to rhashtable_walk_stop(). That has
    the effect of calling rcu_read_lock() without its paired call to
    rcu_read_unlock(). Since rcu_read_lock() may be nested, the problem
    may not be apparent for a while, especially since resize events may
    be rare. But the comments to rhashtable_walk_start() state:
    
     * ...Note that we take the RCU lock in all
     * cases including when we return an error.  So you must always call
     * rhashtable_walk_stop to clean up.
    
    This patch replaces the continue with a goto and label to ensure a
    matching call to rhashtable_walk_stop().
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b06b7882f7b43b2add69cd0389f94df2f54f55d0
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Thu Jul 6 15:48:40 2017 +0300

    net/mlx5: Fix command completion after timeout access invalid structure
    
    [ Upstream commit 061870800efb4e3d1ad4082a2569363629bdfcfc ]
    
    Completion on timeout should not free the driver command entry structure
    as it will need to access it again once real completion event from FW
    will occur.
    
    Fixes: 73dd3a4839c1 ('net/mlx5: Avoid using pending command interface slots')
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Cc: kernel-team@fb.com
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e35f290445948076088975a2578b015e46d33408
Author: Zhao Qiang <qiang.zhao@nxp.com>
Date:   Mon Dec 18 10:26:43 2017 +0800

    net: phy: marvell: Limit 88m1101 autoneg errata to 88E1145 as well.
    
    [ Upstream commit c505873eaece2b4aefd07d339dc7e1400e0235ac ]
    
    88E1145 also need this autoneg errata.
    
    Fixes: f2899788353c ("net: phy: marvell: Limit errata to 88m1101")
    Signed-off-by: Zhao Qiang <qiang.zhao@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cd731e952df562312ea1a7c459807382acb9f8b
Author: Max Gurtovoy <maxg@mellanox.com>
Date:   Sun Jul 30 01:45:08 2017 +0300

    nvme-pci: fix CMB sysfs file removal in reset path
    
    [ Upstream commit 1c78f7735b2bdd0afbe5d14c5c8b6d8d381b6f13 ]
    
    Currently we create the sysfs entry even if we fail mapping
    it. In that case, the unmapping will not remove the sysfs created
    file. There is no good reason to create a sysfs entry for a non
    working CMB and show his characteristics.
    
    Fixes: f63572dff ("nvme: unmap CMB and remove sysfs file in reset path")
    Signed-off-by: Max Gurtovoy <maxg@mellanox.com>
    Reviewed-by: Stephen Bates <sbates@raithlin.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7d5fa96ef7bee036b751af01f62ade7d482b13d
Author: Jia-Ju Bai <baijiaju1990@163.com>
Date:   Mon Jun 5 20:23:40 2017 +0800

    rxe: Fix a sleep-in-atomic bug in post_one_send
    
    [ Upstream commit 07d432bb97f19dd5e784175152f9fce3b2646133 ]
    
    The driver may sleep under a spin lock, and the function call path is:
    post_one_send (acquire the lock by spin_lock_irqsave)
      init_send_wqe
        copy_from_user --> may sleep
    
    There is no flow that makes "qp->is_user" true, and copy_from_user may
    cause bug when a non-user pointer is used. So the lines of copy_from_user
    and check of "qp->is_user" are removed.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@163.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Acked-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0da0e51729959e047e2e6f4a8e3554826b8cc607
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon May 22 15:08:31 2017 +0300

    orangefs: off by ones in xattr size checks
    
    [ Upstream commit 5f13e58767a53ebb54265e03c0c4a67650286263 ]
    
    A previous patch which claimed to remove off by ones actually introduced
    them.
    
    strlen() returns the length of the string not including the NUL
    character.  We are using strcpy() to copy "name" into a buffer which is
    ORANGEFS_MAX_XATTR_NAMELEN characters long.  We should make sure to
    leave space for the NUL, otherwise we're writing one character beyond
    the end of the buffer.
    
    Fixes: e675c5ec51fe ("orangefs: clean up oversize xattr validation")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01acd933d6184a7626f5e0dac1ad0cb794aa74a5
Author: Noa Osherovich <noaos@mellanox.com>
Date:   Mon Jun 12 11:14:02 2017 +0300

    IB/core: Fix the validations of a multicast LID in attach or detach operations
    
    [ Upstream commit 5236333592244557a19694a51337df6ac018f0a7 ]
    
    RoCE Annex (A16.9.10/11) declares that during attach (detach) QP to a
    multicast group, if the QP is associated with a RoCE port, the
    multicast group MLID is unused and is ignored.
    
    During attach or detach multicast, when the QP is associated with a
    port, it is enough to check the port's link layer and validate the
    LID only if it is Infiniband. Otherwise, avoid validating the
    multicast LID.
    
    Fixes: 8561eae60ff9 ("IB/core: For multicast functions, verify that LIDs are multicast LIDs")
    Signed-off-by: Noa Osherovich <noaos@mellanox.com>
    Reviewed-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fd3be2cbb16f871a1e66faab3ac6d408bf7f644
Author: Alaa Hleihel <alaa@mellanox.com>
Date:   Tue Feb 13 12:18:27 2018 +0200

    IB/ipoib: Do not warn if IPoIB debugfs doesn't exist
    
    [ Upstream commit 14fa91e0fef8e4d6feb8b1fa2a807828e0abe815 ]
    
    netdev_wait_allrefs() could rebroadcast NETDEV_UNREGISTER event
    multiple times until all refs are gone, which will result in calling
    ipoib_delete_debug_files multiple times and printing a warning.
    
    Remove the WARN_ONCE since checks of NULL pointers before calling
    debugfs_remove are not needed.
    
    Fixes: 771a52584096 ("IB/IPoIB: ibX: failed to create mcg debug file")
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5a92c4b4b077e7d8b55e13eb357059ba82d13de
Author: Lee, Chun-Yi <joeyli.kernel@gmail.com>
Date:   Fri Apr 28 16:23:59 2017 +0800

    platform/x86: acer-wmi: setup accelerometer when ACPI device was found
    
    [ Upstream commit f9ac89f5ad613b462339e845aeb8494646fd9be2 ]
    
    The 98d610c3739a patch was introduced since v4.11-rc1 that it causes
    that the accelerometer input device will not be created on workable
    machines because the HID string comparing logic is wrong.
    
    And, the patch doesn't prevent that the accelerometer input device
    be created on the machines that have no BST0001. That's because
    the acpi_get_devices() returns success even it didn't find any
    match device.
    
    This patch fixed the HID string comparing logic of BST0001 device.
    And, it also makes sure that the acpi_get_devices() returns
    acpi_handle for BST0001.
    
    Fixes: 98d610c3739a ("acer-wmi: setup accelerometer when machine has appropriate notify event")
    Reference: https://bugzilla.kernel.org/show_bug.cgi?id=193761
    Reported-by: Samuel Sieb <samuel-kbugs@sieb.net>
    Signed-off-by: "Lee, Chun-Yi" <jlee@suse.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23e983e27aaff6357bb851d91b593d83a9a6552c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Aug 3 14:13:46 2017 +0800

    ipv6: set rt6i_protocol properly in the route when it is installed
    
    [ Upstream commit b91d532928dff2141ea9c107c3e73104d9843767 ]
    
    After commit c2ed1880fd61 ("net: ipv6: check route protocol when
    deleting routes"), ipv6 route checks rt protocol when trying to
    remove a rt entry.
    
    It introduced a side effect causing 'ip -6 route flush cache' not
    to work well. When flushing caches with iproute, all route caches
    get dumped from kernel then removed one by one by sending DELROUTE
    requests to kernel for each cache.
    
    The thing is iproute sends the request with the cache whose proto
    is set with RTPROT_REDIRECT by rt6_fill_node() when kernel dumps
    it. But in kernel the rt_cache protocol is still 0, which causes
    the cache not to be matched and removed.
    
    So the real reason is rt6i_protocol in the route is not set when
    it is allocated. As David Ahern's suggestion, this patch is to
    set rt6i_protocol properly in the route when it is installed and
    remove the codes setting rtm_protocol according to rt6i_flags in
    rt6_fill_node.
    
    This is also an improvement to keep rt6i_protocol consistent with
    rtm_protocol.
    
    Fixes: c2ed1880fd61 ("net: ipv6: check route protocol when deleting routes")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Suggested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d4260b280d0c3666a3e5f348e83e85735678eb4
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Fri May 19 14:37:53 2017 -0500

    efi/fb: Correct PCI_STD_RESOURCE_END usage
    
    [ Upstream commit 92a16c86299c64f58f320e491977408ba31b8c3c ]
    
    PCI_STD_RESOURCE_END is (confusingly) the index of the last valid BAR, not
    the *number* of BARs.  To iterate through all possible BARs, we need to
    include PCI_STD_RESOURCE_END.
    
    Fixes: 55d728a40d36 ("efi/fb: Avoid reconfiguration of BAR that covers the framebuffer")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08ae439c95d164e9c0022e0511f4fbb4deffd220
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Thu Feb 16 21:20:45 2017 +0000

    i2c: bcm2835: Avoid possible NULL ptr dereference
    
    [ Upstream commit ababb08938df7ac245d30a58b95b94ecf8dc04fc ]
    
    Since commit e2474541032d ("bcm2835: Fix hang for writing messages
    larger than 16 bytes") the interrupt handler is prone to a possible
    NULL pointer dereference. This could happen if an interrupt fires
    before curr_msg is set by bcm2835_i2c_xfer_msg() and randomly occurs
    on the RPi 3. Even this is an unexpected behavior the driver must
    handle that with an error instead of a crash.
    
    Reported-by: Peter Robinson <pbrobinson@gmail.com>
    Fixes: e2474541032d ("bcm2835: Fix hang for writing messages larger than 16 bytes")
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Acked-by: Noralf Trønnes <noralf@tronnes.org>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e431e0ca94716a5470f81da2e9cc9aeed3a2d09
Author: Dongdong Liu <liudongdong3@huawei.com>
Date:   Thu Dec 28 17:53:32 2017 +0800

    PCI: Disable MSI for HiSilicon Hip06/Hip07 only in Root Port mode
    
    [ Upstream commit deb86999323661c019ef2740eb9d479d1e526b5c ]
    
    HiSilicon Hip06/Hip07 can operate as either a Root Port or an Endpoint.  It
    always advertises an MSI capability, but it can only generate MSIs when in
    Endpoint mode.
    
    The device has the same Vendor and Device IDs in both modes, so check the
    Class Code and disable MSI only when operating as a Root Port.
    
    [bhelgaas: changelog]
    Fixes: 72f2ff0deb87 ("PCI: Disable MSI for HiSilicon Hip06/Hip07 Root Ports")
    Signed-off-by: Dongdong Liu <liudongdong3@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Zhou Wang <wangzhou1@hisilicon.com>
    Cc: stable@vger.kernel.org      # v4.11+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccebc75e2e519ecf0e0e7ad3a9172e8a81445ab3
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Thu Nov 30 15:05:59 2017 -0500

    ACPI: sysfs: Make ACPI GPE mask kernel parameter cover all GPEs
    
    [ Upstream commit 0f27cff8597d86f881ea8274b49b63b678c14a3c ]
    
    The acpi_mask_gpe= kernel parameter documentation states that the range
    of mask is 128 GPEs (0x00 to 0x7F).  The acpi_masked_gpes mask is a u64 so
    only 64 GPEs (0x00 to 0x3F) can really be masked.
    
    Use a bitmap of size 0xFF instead of a u64 for the GPE mask so 256
    GPEs can be masked.
    
    Fixes: 9c4aa1eecb48 (ACPI / sysfs: Provide quirk mechanism to prevent GPE flooding)
    Signed-off-by: Prarit Bharava <prarit@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c9e873c73b1f4d371204f82e8ff5ed44df32ff7
Author: Christian Grönke <c.groenke@infodas.de>
Date:   Tue Jun 26 10:12:18 2018 +0000

    igb: Remove superfluous reset to PHY and page 0 selection
    
    [ Upstream commit 2a83fba6cae89dd9c0625e68ff8ffff791c67ac0 ]
    
    This patch reverts two previous applied patches to fix an issue
    that appeared when using SGMII based SFP modules. In the current
    state the driver will try to reset the PHY before obtaining the
    phy_addr of the SGMII attached PHY. That leads to an error in
    e1000_write_phy_reg_sgmii_82575. Causing the initialization to
    fail:
    
        igb: Intel(R) Gigabit Ethernet Network Driver - version 5.4.0-k
        igb: Copyright (c) 2007-2014 Intel Corporation.
        igb: probe of ????:??:??.? failed with error -3
    
    The patches being reverted are:
    
        commit 182785335447957409282ca745aa5bc3968facee
        Author: Aaron Sierra <asierra@xes-inc.com>
        Date:   Tue Nov 29 10:03:56 2016 -0600
    
            igb: reset the PHY before reading the PHY ID
    
        commit 440aeca4b9858248d8f16d724d9fa87a4f65fa33
        Author: Matwey V Kornilov <matwey@sai.msu.ru>
        Date:   Thu Nov 24 13:32:48 2016 +0300
    
             igb: Explicitly select page 0 at initialization
    
    The first reverted patch directly causes the problem mentioned above.
    In case of SGMII the phy_addr is not known at this point and will
    only be obtained by 'igb_get_phy_id_82575' further down in the code.
    The second removed patch selects forces selection of page 0 in the
    PHY. Something that the reset tries to address as well.
    
    As pointed out by Alexander Duzck, the patch below fixes the same
    issue but in the proper location:
    
        commit 4e684f59d760a2c7c716bb60190783546e2d08a1
        Author: Chris J Arges <christopherarges@gmail.com>
        Date:   Wed Nov 2 09:13:42 2016 -0500
    
            igb: Workaround for igb i210 firmware issue
    
    Reverts: 440aeca4b9858248d8f16d724d9fa87a4f65fa33.
    Reverts: 182785335447957409282ca745aa5bc3968facee.
    
    Signed-off-by: Christian Grönke <c.groenke@infodas.de>
    Reviewed-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adb298bcf45ec26a20e7302fb2b7c646bcf85cea
Author: Sheng Yong <shengyong1@huawei.com>
Date:   Sat Apr 22 10:39:20 2017 +0800

    f2fs: fix multiple f2fs_add_link() having same name for inline dentry
    
    [ Upstream commit d3bb910c15d75ee3340311c64a1c05985bb663a3 ]
    
    Commit 88c5c13a5027 (f2fs: fix multiple f2fs_add_link() calls having
    same name) does not cover the scenario where inline dentry is enabled.
    In that case, F2FS_I(dir)->task will be NULL, and __f2fs_add_link will
    lookup dentries one more time.
    
    This patch fixes it by moving the assigment of current task to a upper
    level to cover both normal and inline dentry.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 88c5c13a5027 (f2fs: fix multiple f2fs_add_link() calls having same name)
    Signed-off-by: Sheng Yong <shengyong1@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7e08447c3d89d310c755f1606ae58aabaf44405
Author: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
Date:   Thu Mar 2 09:21:33 2017 -0800

    scsi: aacraid: Fix typo in blink status
    
    [ Upstream commit 934767c56b0d9dbb95a40e9e6e4d9dcdc3a165ad ]
    
    The return status of the adapter check on KERNEL_PANIC is supposed to be
    the upper 16 bits of the OMR status register.
    
    Fixes: c421530bf848604e (scsi: aacraid: Reorder Adpater status check)
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
    Reviewed-by: Dave Carroll <david.carroll@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ca11792acbabf6cb2fdef8ab8fcf1a887892127
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Tue Aug 8 13:22:30 2017 +0100

    MIPS: Handle non word sized instructions when examining frame
    
    [ Upstream commit 11887ed172a6960673f130dad8f8fb42778f64d7 ]
    
    Commit 34c2f668d0f6b ("MIPS: microMIPS: Add unaligned access support.")
    added fairly broken support for handling 16bit microMIPS instructions in
    get_frame_info(). It adjusts the instruction pointer by 16bits in the
    case of a 16bit sp move instruction, but not any other 16bit
    instruction.
    
    Commit b6c7a324df37 ("MIPS: Fix get_frame_info() handling of microMIPS
    function size") goes some way to fixing get_frame_info() to iterate over
    microMIPS instuctions, but the instruction pointer is still manipulated
    using a postincrement, and is of union mips_instruction type. Since the
    union is sized to the largest member (a word), but microMIPS
    instructions are a mix of halfword and word sizes, the function does not
    always iterate correctly, ending up misaligned with the instruction
    stream and interpreting it incorrectly.
    
    Since the instruction modifying the stack pointer is usually the first
    in the function, that one is usually handled correctly. But the
    instruction which saves the return address to the sp is some variable
    number of instructions into the frame and is frequently missed due to
    not being on a word boundary, leading to incomplete walking of the
    stack.
    
    Fix this by incrementing the instruction pointer based on the size of
    the previously decoded instruction (& remove the hack introduced by
    commit 34c2f668d0f6b ("MIPS: microMIPS: Add unaligned access support.")
    which adjusts the instruction pointer in the case of a 16bit sp move
    instruction, but not any other).
    
    Fixes: 34c2f668d0f6b ("MIPS: microMIPS: Add unaligned access support.")
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/16953/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 416ca41754e2d7bfb08ae12b28a4b926f22d7356
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Tue Aug 8 13:22:33 2017 +0100

    MIPS: microMIPS: Fix decoding of swsp16 instruction
    
    [ Upstream commit cea8cd498f4f1c30ea27e3664b3c671e495c4fce ]
    
    When the immediate encoded in the instruction is accessed, it is sign
    extended due to being a signed value being assigned to a signed integer.
    The ISA specifies that this operation is an unsigned operation.
    The sign extension leads us to incorrectly decode:
    
    801e9c8e:       cbf1            sw      ra,68(sp)
    
    As having an immediate of 1073741809.
    
    Since the instruction format does not specify signed/unsigned, and this
    is currently the only location to use this instuction format, change it
    to an unsigned immediate.
    
    Fixes: bb9bc4689b9c ("MIPS: Calculate microMIPS ra properly when unwinding the stack")
    Suggested-by: Paul Burton <paul.burton@imgtec.com>
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Reviewed-by: James Hogan <james.hogan@imgtec.com>
    Cc: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: Miodrag Dinic <miodrag.dinic@imgtec.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: David Daney <david.daney@cavium.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/16957/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de4c175c6359ee791ecdb3a86c760afc286b5e5e
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Feb 24 14:59:30 2017 -0800

    mm/memory_hotplug.c: fix overflow in test_pages_in_a_zone()
    
    [ Upstream commit d6d8c8a48291b929b2e039f220f0b62958cccfea ]
    
    When mainline introduced commit a96dfddbcc04 ("base/memory, hotplug: fix
    a kernel oops in show_valid_zones()"), it obtained the valid start and
    end pfn from the given pfn range.  The valid start pfn can fix the
    actual issue, but it introduced another issue.  The valid end pfn will
    may exceed the given end_pfn.
    
    Although the incorrect overflow will not result in actual problem at
    present, but I think it need to be fixed.
    
    [toshi.kani@hpe.com: remove assumption that end_pfn is aligned by MAX_ORDER_NR_PAGES]
    Fixes: a96dfddbcc04 ("base/memory, hotplug: fix a kernel oops in show_valid_zones()")
    Link: http://lkml.kernel.org/r/1486467299-22648-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 698f6acd22d3944f67cc54ae881f34aeafae96c5
Author: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
Date:   Tue Oct 24 19:50:06 2017 +0530

    perf symbols: Fix memory corruption because of zero length symbols
    
    [ Upstream commit 331c7cb307971eac38e9470340e10c87855bf4bc ]
    
    Perf top is often crashing at very random locations on powerpc.  After
    investigating, I found the crash only happens when sample is of zero
    length symbol. Powerpc kernel has many such symbols which does not
    contain length details in vmlinux binary and thus start and end
    addresses of such symbols are same.
    
    Structure
    
      struct sym_hist {
            u64                   nr_samples;
            u64                   period;
            struct sym_hist_entry addr[0];
      };
    
    has last member 'addr[]' of size zero. 'addr[]' is an array of addresses
    that belongs to one symbol (function). If function consist of 100
    instructions, 'addr' points to an array of 100 'struct sym_hist_entry'
    elements. For zero length symbol, it points to the *empty* array, i.e.
    no members in the array and thus offset 0 is also invalid for such
    array.
    
      static int __symbol__inc_addr_samples(...)
      {
            ...
            offset = addr - sym->start;
            h = annotation__histogram(notes, evidx);
            h->nr_samples++;
            h->addr[offset].nr_samples++;
            h->period += sample->period;
            h->addr[offset].period += sample->period;
            ...
      }
    
    Here, when 'addr' is same as 'sym->start', 'offset' becomes 0, which is
    valid for normal symbols but *invalid* for zero length symbols and thus
    updating h->addr[offset] causes memory corruption.
    
    Fix this by adding one dummy element for zero length symbols.
    
    Link: https://lkml.org/lkml/2016/10/10/148
    Fixes: edee44be5919 ("perf annotate: Don't throw error for zero length symbols")
    Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Kim Phillips <kim.phillips@arm.com>
    Cc: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Taeung Song <treeze.taeung@gmail.com>
    Link: http://lkml.kernel.org/r/1508854806-10542-1-git-send-email-ravi.bangoria@linux.vnet.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 063cc21634ce9755b999aaa275594796d30f2c47
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Fri Oct 5 08:48:27 2018 -0500

    net: cxgb3_main: fix a missing-check bug
    
    [ Upstream commit 2c05d88818ab6571816b93edce4d53703870d7ae ]
    
    In cxgb_extension_ioctl(), the command of the ioctl is firstly copied from
    the user-space buffer 'useraddr' to 'cmd' and checked through the
    switch statement. If the command is not as expected, an error code
    EOPNOTSUPP is returned. In the following execution, i.e., the cases of the
    switch statement, the whole buffer of 'useraddr' is copied again to a
    specific data structure, according to what kind of command is requested.
    However, after the second copy, there is no re-check on the newly-copied
    command. Given that the buffer 'useraddr' is in the user space, a malicious
    user can race to change the command between the two copies. By doing so,
    the attacker can supply malicious data to the kernel and cause undefined
    behavior.
    
    This patch adds a re-check in each case of the switch statement if there is
    a second copy in that case, to re-check whether the command obtained in the
    second copy is the same as the one in the first copy. If not, an error code
    EINVAL is returned.
    
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d130c0b8b9747e16b163110c4d3f4ab1153a1d93
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Tue Oct 2 14:23:45 2018 +0100

    declance: Fix continuation with the adapter identification message
    
    [ Upstream commit fe3a83af6a50199bf250fa331e94216912f79395 ]
    
    Fix a commit 4bcc595ccd80 ("printk: reinstate KERN_CONT for printing
    continuation lines") regression with the `declance' driver, which caused
    the adapter identification message to be split between two lines, e.g.:
    
    declance.c: v0.011 by Linux MIPS DECstation task force
    tc6: PMAD-AA
    , addr = 08:00:2b:1b:2a:6a, irq = 14
    tc6: registered as eth0.
    
    Address that properly, by printing identification with a single call,
    making the messages now look like:
    
    declance.c: v0.011 by Linux MIPS DECstation task force
    tc6: PMAD-AA, addr = 08:00:2b:1b:2a:6a, irq = 14
    tc6: registered as eth0.
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Fixes: 4bcc595ccd80 ("printk: reinstate KERN_CONT for printing continuation lines")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cdc244ad907a640a107aaebafe0d9ff9472603f
Author: Rickard x Andersson <rickaran@axis.com>
Date:   Tue Oct 2 14:49:32 2018 +0200

    net: fec: fix rare tx timeout
    
    [ Upstream commit 657ade07df72847f591ccdb36bd9b91ed0edbac3 ]
    
    During certain heavy network loads TX could time out
    with TX ring dump.
    TX is sometimes never restarted after reaching
    "tx_stop_threshold" because function "fec_enet_tx_queue"
    only tests the first queue.
    
    In addition the TX timeout callback function failed to
    recover because it also operated only on the first queue.
    
    Signed-off-by: Rickard x Andersson <rickaran@axis.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1db12c42ad3db0fcc004c26c9e68d72b95a21e3
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Sep 21 07:07:06 2018 -0700

    perf/x86/intel/uncore: Fix PCI BDF address of M3UPI on SKX
    
    [ Upstream commit 9d92cfeaf5215158d26d2991be7f7ff865cb98f3 ]
    
    The counters on M3UPI Link 0 and Link 3 don't count properly, and writing
    0 to these counters may causes system crash on some machines.
    
    The PCI BDF addresses of the M3UPI in the current code are incorrect.
    
    The correct addresses should be:
    
      D18:F1        0x204D
      D18:F2        0x204E
      D18:F5        0x204D
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: cd34cd97b7b4 ("perf/x86/intel/uncore: Add Skylake server uncore support")
    Link: http://lkml.kernel.org/r/1537538826-55489-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d0836664071f1bbe891efb342b815b6b0738ba4
Author: Jiri Olsa <jolsa@redhat.com>
Date:   Sun Sep 23 18:13:43 2018 +0200

    perf/ring_buffer: Prevent concurent ring buffer access
    
    [ Upstream commit cd6fb677ce7e460c25bdd66f689734102ec7d642 ]
    
    Some of the scheduling tracepoints allow the perf_tp_event
    code to write to ring buffer under different cpu than the
    code is running on.
    
    This results in corrupted ring buffer data demonstrated in
    following perf commands:
    
      # perf record -e 'sched:sched_switch,sched:sched_wakeup' perf bench sched messaging
      # Running 'sched/messaging' benchmark:
      # 20 sender and receiver processes per group
      # 10 groups == 400 processes run
    
           Total time: 0.383 [sec]
      [ perf record: Woken up 8 times to write data ]
      0x42b890 [0]: failed to process type: -1765585640
      [ perf record: Captured and wrote 4.825 MB perf.data (29669 samples) ]
    
      # perf report --stdio
      0x42b890 [0]: failed to process type: -1765585640
    
    The reason for the corruption are some of the scheduling tracepoints,
    that have __perf_task dfined and thus allow to store data to another
    cpu ring buffer:
    
      sched_waking
      sched_wakeup
      sched_wakeup_new
      sched_stat_wait
      sched_stat_sleep
      sched_stat_iowait
      sched_stat_blocked
    
    The perf_tp_event function first store samples for current cpu
    related events defined for tracepoint:
    
        hlist_for_each_entry_rcu(event, head, hlist_entry)
          perf_swevent_event(event, count, &data, regs);
    
    And then iterates events of the 'task' and store the sample
    for any task's event that passes tracepoint checks:
    
      ctx = rcu_dereference(task->perf_event_ctxp[perf_sw_context]);
    
      list_for_each_entry_rcu(event, &ctx->event_list, event_entry) {
        if (event->attr.type != PERF_TYPE_TRACEPOINT)
          continue;
        if (event->attr.config != entry->type)
          continue;
    
        perf_swevent_event(event, count, &data, regs);
      }
    
    Above code can race with same code running on another cpu,
    ending up with 2 cpus trying to store under the same ring
    buffer, which is specifically not allowed.
    
    This patch prevents the problem, by allowing only events with the same
    current cpu to receive the event.
    
    NOTE: this requires the use of (per-task-)per-cpu buffers for this
    feature to work; perf-record does this.
    
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    [peterz: small edits to Changelog]
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Vagin <avagin@openvz.org>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: e6dab5ffab59 ("perf/trace: Add ability to set a target task for events")
    Link: http://lkml.kernel.org/r/20180923161343.GB15054@krava
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9752f87b5851c0142e8fa59a79a648d736164682
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:56 2018 -0700

    smsc95xx: Check for Wake-on-LAN modes
    
    [ Upstream commit c530c471ba37bdd9fe1c7185b01455c00ae606fb ]
    
    The driver does not check for Wake-on-LAN modes specified by an user,
    but will conditionally set the device as wake-up enabled or not based on
    that, which could be a very confusing user experience.
    
    Fixes: e0e474a83c18 ("smsc95xx: add wol magic packet support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a1e903398bf6d10053f5d9f51828ca320ed8b2a
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:55 2018 -0700

    smsc75xx: Check for Wake-on-LAN modes
    
    [ Upstream commit 9c734b2769a73eea2e9e9767c0e0bf839ff23679 ]
    
    The driver does not check for Wake-on-LAN modes specified by an user,
    but will conditionally set the device as wake-up enabled or not based on
    that, which could be a very confusing user experience.
    
    Fixes: 6c636503260d ("smsc75xx: add wol magic packet support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abbb3f1081f39fe5fe00b2bfda9478c744a048b3
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:54 2018 -0700

    r8152: Check for supported Wake-on-LAN Modes
    
    [ Upstream commit f2750df1548bd8a2b060eb609fc43ca82811af4c ]
    
    The driver does not check for Wake-on-LAN modes specified by an user,
    but will conditionally set the device as wake-up enabled or not based on
    that, which could be a very confusing user experience.
    
    Fixes: 21ff2e8976b1 ("r8152: support WOL")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ee87afc5b9bb992569e2bb87cea54304dc0cdb7
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:53 2018 -0700

    sr9800: Check for supported Wake-on-LAN modes
    
    [ Upstream commit c5cb93e994ffb43b7b3b1ff10b9f928f54574a36 ]
    
    The driver currently silently accepts unsupported Wake-on-LAN modes
    (other than WAKE_PHY or WAKE_MAGIC) without reporting that to the user,
    which is confusing.
    
    Fixes: 19a38d8e0aa3 ("USB2NET : SR9800 : One chip USB2.0 USB2NET SR9800 Device Driver Support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6226d311cd15696e520bf9567ff22df07d5c4842
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:52 2018 -0700

    lan78xx: Check for supported Wake-on-LAN modes
    
    [ Upstream commit eb9ad088f96653a26b340f7c447c44cf023d5cdc ]
    
    The driver supports a fair amount of Wake-on-LAN modes, but is not
    checking that the user specified one that is supported.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Woojung Huh <Woojung.Huh@Microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a0b24576e9d9e8e02e4aed7464bdd653e5b2d94
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:51 2018 -0700

    ax88179_178a: Check for supported Wake-on-LAN modes
    
    [ Upstream commit 5ba6b4aa9a410c5e2c6417df52b5e2118ea9b467 ]
    
    The driver currently silently accepts unsupported Wake-on-LAN modes
    (other than WAKE_PHY or WAKE_MAGIC) without reporting that to the user,
    which is confusing.
    
    Fixes: e2ca90c276e1 ("ax88179_178a: ASIX AX88179_178A USB 3.0/2.0 to gigabit ethernet adapter driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0da7461884057f8876cf4bd448415af6ebaf7e97
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Sep 28 16:18:50 2018 -0700

    asix: Check for supported Wake-on-LAN modes
    
    [ Upstream commit c4ce446e33d7a0e978256ac6fea4c80e59d9de5f ]
    
    The driver currently silently accepts unsupported Wake-on-LAN modes
    (other than WAKE_PHY or WAKE_MAGIC) without reporting that to the user,
    which is confusing.
    
    Fixes: 2e55cc7210fe ("[PATCH] USB: usbnet (3/9) module for ASIX Ethernet adapters")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 207928c6345176d7663131295710081b0419e0fe
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Sep 24 15:17:03 2018 -0700

    qed: Avoid constant logical operation warning in qed_vf_pf_acquire
    
    [ Upstream commit 1c492a9d55ba99079210ed901dd8a5423f980487 ]
    
    Clang warns when a constant is used in a boolean context as it thinks a
    bitwise operation may have been intended.
    
    drivers/net/ethernet/qlogic/qed/qed_vf.c:415:27: warning: use of logical
    '&&' with constant operand [-Wconstant-logical-operand]
            if (!p_iov->b_pre_fp_hsi &&
                                     ^
    drivers/net/ethernet/qlogic/qed/qed_vf.c:415:27: note: use '&' for a
    bitwise operation
            if (!p_iov->b_pre_fp_hsi &&
                                     ^~
                                     &
    drivers/net/ethernet/qlogic/qed/qed_vf.c:415:27: note: remove constant
    to silence this warning
            if (!p_iov->b_pre_fp_hsi &&
                                    ~^~
    1 warning generated.
    
    This has been here since commit 1fe614d10f45 ("qed: Relax VF firmware
    requirements") and I am not entirely sure why since 0 isn't a special
    case. Just remove the statement causing Clang to warn since it isn't
    required.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/126
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9afd2a2dbb084d6ac03c959edbe1a5d3ab53ad96
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Sep 24 14:34:53 2018 -0700

    qed: Avoid implicit enum conversion in qed_roce_mode_to_flavor
    
    [ Upstream commit d3a315795b4ce8b105a64a90699103121bde04a8 ]
    
    Clang warns when one enumerated type is implicitly converted to another.
    
    drivers/net/ethernet/qlogic/qed/qed_roce.c:153:12: warning: implicit
    conversion from enumeration type 'enum roce_mode' to different
    enumeration type 'enum roce_flavor' [-Wenum-conversion]
                    flavor = ROCE_V2_IPV6;
                           ~ ^~~~~~~~~~~~
    drivers/net/ethernet/qlogic/qed/qed_roce.c:156:12: warning: implicit
    conversion from enumeration type 'enum roce_mode' to different
    enumeration type 'enum roce_flavor' [-Wenum-conversion]
                    flavor = MAX_ROCE_MODE;
                           ~ ^~~~~~~~~~~~~
    2 warnings generated.
    
    Use the appropriate values from the expected type, roce_flavor:
    
    ROCE_V2_IPV6 = RROCE_IPV6 = 2
    MAX_ROCE_MODE = MAX_ROCE_FLAVOR = 3
    
    While we're add it, ditch the local variable flavor, we can just return
    the value directly from the switch statement.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/125
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8641700477533c354d6733aeafc97f5ac5ca21e6
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Wed Sep 26 18:11:22 2018 +0200

    pxa168fb: prepare the clock
    
    [ Upstream commit d85536cde91fcfed6fb8d983783bd2b92c843939 ]
    
    Add missing prepare/unprepare operations for fbi->clk,
    this fixes following kernel warning:
    
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 1 at drivers/clk/clk.c:874 clk_core_enable+0x2c/0x1b0
      Enabling unprepared disp0_clk
      Modules linked in:
      CPU: 0 PID: 1 Comm: swapper Not tainted 4.18.0-rc8-00032-g02b43ddd4f21-dirty #25
      Hardware name: Marvell MMP2 (Device Tree Support)
      [<c010f7cc>] (unwind_backtrace) from [<c010cc6c>] (show_stack+0x10/0x14)
      [<c010cc6c>] (show_stack) from [<c011dab4>] (__warn+0xd8/0xf0)
      [<c011dab4>] (__warn) from [<c011db10>] (warn_slowpath_fmt+0x44/0x6c)
      [<c011db10>] (warn_slowpath_fmt) from [<c043898c>] (clk_core_enable+0x2c/0x1b0)
      [<c043898c>] (clk_core_enable) from [<c0439ec8>] (clk_core_enable_lock+0x18/0x2c)
      [<c0439ec8>] (clk_core_enable_lock) from [<c0436698>] (pxa168fb_probe+0x464/0x6ac)
      [<c0436698>] (pxa168fb_probe) from [<c04779a0>] (platform_drv_probe+0x48/0x94)
      [<c04779a0>] (platform_drv_probe) from [<c0475bec>] (driver_probe_device+0x328/0x470)
      [<c0475bec>] (driver_probe_device) from [<c0475de4>] (__driver_attach+0xb0/0x124)
      [<c0475de4>] (__driver_attach) from [<c0473c38>] (bus_for_each_dev+0x64/0xa0)
      [<c0473c38>] (bus_for_each_dev) from [<c0474ee0>] (bus_add_driver+0x1b8/0x230)
      [<c0474ee0>] (bus_add_driver) from [<c0476a20>] (driver_register+0xac/0xf0)
      [<c0476a20>] (driver_register) from [<c0102dd4>] (do_one_initcall+0xb8/0x1f0)
      [<c0102dd4>] (do_one_initcall) from [<c0b010a0>] (kernel_init_freeable+0x294/0x2e0)
      [<c0b010a0>] (kernel_init_freeable) from [<c07e9eb8>] (kernel_init+0x8/0x10c)
      [<c07e9eb8>] (kernel_init) from [<c01010e8>] (ret_from_fork+0x14/0x2c)
      Exception stack(0xd008bfb0 to 0xd008bff8)
      bfa0:                                     00000000 00000000 00000000 00000000
      bfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
      bfe0: 00000000 00000000 00000000 00000000 00000013 00000000
      ---[ end trace c0af40f9e2ed7cb4 ]---
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    [b.zolnierkie: enhance patch description a bit]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83e158f93d6628ff4a94294b2ae1f83b9152bcd6
Author: Matias Karhumaa <matias.karhumaa@gmail.com>
Date:   Wed Sep 26 09:13:46 2018 +0300

    Bluetooth: SMP: fix crash in unpairing
    
    [ Upstream commit cb28c306b93b71f2741ce1a5a66289db26715f4d ]
    
    In case unpair_device() was called through mgmt interface at the same time
    when pairing was in progress, Bluetooth kernel module crash was seen.
    
    [  600.351225] general protection fault: 0000 [#1] SMP PTI
    [  600.351235] CPU: 1 PID: 11096 Comm: btmgmt Tainted: G           OE     4.19.0-rc1+ #1
    [  600.351238] Hardware name: Dell Inc. Latitude E5440/08RCYC, BIOS A18 05/14/2017
    [  600.351272] RIP: 0010:smp_chan_destroy.isra.10+0xce/0x2c0 [bluetooth]
    [  600.351276] Code: c0 0f 84 b4 01 00 00 80 78 28 04 0f 84 53 01 00 00 4d 85 ed 0f 85 ab 00 00 00 48 8b 08 48 8b 50 08 be 10 00 00 00 48 89 51 08 <48> 89 0a 48 b9 00 02 00 00 00 00 ad de 48 89 48 08 48 8b 83 00 01
    [  600.351279] RSP: 0018:ffffa9be839b3b50 EFLAGS: 00010246
    [  600.351282] RAX: ffff9c999ac565a0 RBX: ffff9c9996e98c00 RCX: ffff9c999aa28b60
    [  600.351285] RDX: dead000000000200 RSI: 0000000000000010 RDI: ffff9c999e403500
    [  600.351287] RBP: ffffa9be839b3b70 R08: 0000000000000000 R09: ffffffff92a25c00
    [  600.351290] R10: ffffa9be839b3ae8 R11: 0000000000000001 R12: ffff9c995375b800
    [  600.351292] R13: 0000000000000000 R14: ffff9c99619a5000 R15: ffff9c9962a01c00
    [  600.351295] FS:  00007fb2be27c700(0000) GS:ffff9c999e880000(0000) knlGS:0000000000000000
    [  600.351298] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  600.351300] CR2: 00007fb2bdadbad0 CR3: 000000041c328001 CR4: 00000000001606e0
    [  600.351302] Call Trace:
    [  600.351325]  smp_failure+0x4f/0x70 [bluetooth]
    [  600.351345]  smp_cancel_pairing+0x74/0x80 [bluetooth]
    [  600.351370]  unpair_device+0x1c1/0x330 [bluetooth]
    [  600.351399]  hci_sock_sendmsg+0x960/0x9f0 [bluetooth]
    [  600.351409]  ? apparmor_socket_sendmsg+0x1e/0x20
    [  600.351417]  sock_sendmsg+0x3e/0x50
    [  600.351422]  sock_write_iter+0x85/0xf0
    [  600.351429]  do_iter_readv_writev+0x12b/0x1b0
    [  600.351434]  do_iter_write+0x87/0x1a0
    [  600.351439]  vfs_writev+0x98/0x110
    [  600.351443]  ? ep_poll+0x16d/0x3d0
    [  600.351447]  ? ep_modify+0x73/0x170
    [  600.351451]  do_writev+0x61/0xf0
    [  600.351455]  ? do_writev+0x61/0xf0
    [  600.351460]  __x64_sys_writev+0x1c/0x20
    [  600.351465]  do_syscall_64+0x5a/0x110
    [  600.351471]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  600.351474] RIP: 0033:0x7fb2bdb62fe0
    [  600.351477] Code: 73 01 c3 48 8b 0d b8 6e 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 69 c7 2c 00 00 75 10 b8 14 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 de 80 01 00 48 89 04 24
    [  600.351479] RSP: 002b:00007ffe062cb8f8 EFLAGS: 00000246 ORIG_RAX: 0000000000000014
    [  600.351484] RAX: ffffffffffffffda RBX: 000000000255b3d0 RCX: 00007fb2bdb62fe0
    [  600.351487] RDX: 0000000000000001 RSI: 00007ffe062cb920 RDI: 0000000000000004
    [  600.351490] RBP: 00007ffe062cb920 R08: 000000000255bd80 R09: 0000000000000000
    [  600.351494] R10: 0000000000000353 R11: 0000000000000246 R12: 0000000000000001
    [  600.351497] R13: 00007ffe062cbbe0 R14: 0000000000000000 R15: 0000000000000000
    [  600.351501] Modules linked in: algif_hash algif_skcipher af_alg cmac ipt_MASQUERADE nf_conntrack_netlink nfnetlink xfrm_user xfrm_algo iptable_nat nf_nat_ipv4 xt_addrtype iptable_filter ip_tables xt_conntrack x_tables nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 libcrc32c br_netfilter bridge stp llc overlay arc4 nls_iso8859_1 dm_crypt intel_rapl x86_pkg_temp_thermal intel_powerclamp coretemp dell_laptop kvm_intel crct10dif_pclmul dell_smm_hwmon crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64 crypto_simd cryptd glue_helper intel_cstate intel_rapl_perf uvcvideo videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_common videodev media hid_multitouch input_leds joydev serio_raw dell_wmi snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic dell_smbios dcdbas sparse_keymap
    [  600.351569]  snd_hda_intel btusb snd_hda_codec btrtl btbcm btintel snd_hda_core bluetooth(OE) snd_hwdep snd_pcm iwlmvm ecdh_generic wmi_bmof dell_wmi_descriptor snd_seq_midi mac80211 snd_seq_midi_event lpc_ich iwlwifi snd_rawmidi snd_seq snd_seq_device snd_timer cfg80211 snd soundcore mei_me mei dell_rbtn dell_smo8800 mac_hid parport_pc ppdev lp parport autofs4 hid_generic usbhid hid i915 nouveau kvmgt vfio_mdev mdev vfio_iommu_type1 vfio kvm irqbypass i2c_algo_bit ttm drm_kms_helper syscopyarea sysfillrect sysimgblt mxm_wmi psmouse ahci sdhci_pci cqhci libahci fb_sys_fops sdhci drm e1000e video wmi
    [  600.351637] ---[ end trace e49e9f1df09c94fb ]---
    [  600.351664] RIP: 0010:smp_chan_destroy.isra.10+0xce/0x2c0 [bluetooth]
    [  600.351666] Code: c0 0f 84 b4 01 00 00 80 78 28 04 0f 84 53 01 00 00 4d 85 ed 0f 85 ab 00 00 00 48 8b 08 48 8b 50 08 be 10 00 00 00 48 89 51 08 <48> 89 0a 48 b9 00 02 00 00 00 00 ad de 48 89 48 08 48 8b 83 00 01
    [  600.351669] RSP: 0018:ffffa9be839b3b50 EFLAGS: 00010246
    [  600.351672] RAX: ffff9c999ac565a0 RBX: ffff9c9996e98c00 RCX: ffff9c999aa28b60
    [  600.351674] RDX: dead000000000200 RSI: 0000000000000010 RDI: ffff9c999e403500
    [  600.351676] RBP: ffffa9be839b3b70 R08: 0000000000000000 R09: ffffffff92a25c00
    [  600.351679] R10: ffffa9be839b3ae8 R11: 0000000000000001 R12: ffff9c995375b800
    [  600.351681] R13: 0000000000000000 R14: ffff9c99619a5000 R15: ffff9c9962a01c00
    [  600.351684] FS:  00007fb2be27c700(0000) GS:ffff9c999e880000(0000) knlGS:0000000000000000
    [  600.351686] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  600.351689] CR2: 00007fb2bdadbad0 CR3: 000000041c328001 CR4: 00000000001606e0
    
    Crash happened because list_del_rcu() was called twice for smp->ltk. This
    was possible if unpair_device was called right after ltk was generated
    but before keys were distributed.
    
    In this commit smp_cancel_pairing was refactored to cancel pairing if it
    is in progress and otherwise just removes keys. Once keys are removed from
    rcu list, pointers to smp context's keys are set to NULL to make sure
    removed list items are not accessed later.
    
    This commit also adjusts the functionality of mgmt unpair_device() little
    bit. Previously pairing was canceled only if pairing was in state that
    keys were already generated. With this commit unpair_device() cancels
    pairing already in earlier states.
    
    Bug was found by fuzzing kernel SMP implementation using Synopsys
    Defensics.
    
    Reported-by: Pekka Oikarainen <pekka.oikarainen@synopsys.com>
    Signed-off-by: Matias Karhumaa <matias.karhumaa@gmail.com>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dfa0f7fd953c3e097ccfd520005b504cee19841
Author: Martin Willi <martin@strongswan.org>
Date:   Tue Sep 25 09:51:02 2018 +0200

    mac80211_hwsim: do not omit multicast announce of first added radio
    
    [ Upstream commit 28ef8b49a338dc1844e86b7954cfffc7dfa2660a ]
    
    The allocation of hwsim radio identifiers uses a post-increment from 0,
    so the first radio has idx 0. This idx is explicitly excluded from
    multicast announcements ever since, but it is unclear why.
    
    Drop that idx check and announce the first radio as well. This makes
    userspace happy if it relies on these events.
    
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e93cd9e17e0c101b7203d69be3f1d7f51f6b5a1
Author: Masashi Honma <masashi.honma@gmail.com>
Date:   Tue Sep 25 11:15:00 2018 +0900

    nl80211: Fix possible Spectre-v1 for NL80211_TXRATE_HT
    
    [ Upstream commit 30fe6d50eb088783c8729c7d930f65296b2b3fa7 ]
    
    Use array_index_nospec() to sanitize ridx with respect to speculation.
    
    Signed-off-by: Masashi Honma <masashi.honma@gmail.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83eb6dd71d241f9e84a087a539c91623e971cff7
Author: Zhao Qiang <qiang.zhao@nxp.com>
Date:   Thu Feb 1 14:54:32 2018 +0800

    soc: fsl: qe: Fix copy/paste bug in ucc_get_tdm_sync_shift()
    
    [ Upstream commit 96fc74333f84cfdf8d434c6c07254e215e2aad00 ]
    
    There is a copy and paste bug so we accidentally use the RX_ shift when
    we're in TX_ mode.
    
    Fixes: bb8b2062aff3 ("fsl/qe: setup clock source for TDM mode")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Zhao Qiang <qiang.zhao@nxp.com>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    (cherry picked from commit 3cb31b634052ed458922e0c8e2b4b093d7fb60b9)
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fce84f75e518f9368d371f05e5f48e9b48496e42
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Thu Aug 23 23:36:00 2018 +0200

    soc: fsl: qbman: qman: avoid allocating from non existing gen_pool
    
    [ Upstream commit 64e9e22e68512da8df3c9a7430f07621e48db3c2 ]
    
    If the qman driver didn't probe, calling qman_alloc_fqid_range,
    qman_alloc_pool_range or qman_alloc_cgrid_range (as done in dpaa_eth) will
    pass a NULL pointer to gen_pool_alloc, leading to a NULL pointer
    dereference.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Reviewed-by: Roy Pledge <roy.pledge@nxp.com>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    (cherry picked from commit f72487a2788aa70c3aee1d0ebd5470de9bac953a)
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05bdb6d96456e36fe962dc62856d9aab3a87b70b
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Tue Sep 25 08:32:50 2018 +0200

    net: macb: Clean 64b dma addresses if they are not detected
    
    [ Upstream commit e1e5d8a9fe737d94ccc0ccbaf0c97f69a8f3e000 ]
    
    Clear ADDR64 dma bit in DMACFG register in case that HW_DMA_CAP_64B is
    not detected on 64bit system.
    The issue was observed when bootloader(u-boot) does not check macb
    feature at DCFG6 register (DAW64_OFFSET) and enabling 64bit dma support
    by default. Then macb driver is reading DMACFG register back and only
    adding 64bit dma configuration but not cleaning it out.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8114c2b2806584d01f9c98c64765be3e3df4527f
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Sep 19 17:14:01 2018 -0700

    ARM: dts: BCM63xx: Fix incorrect interrupt specifiers
    
    [ Upstream commit 3ab97942d0213b6583a5408630a8cbbfbf54730f ]
    
    A number of our interrupts were incorrectly specified, fix both the PPI
    and SPI interrupts to be correct.
    
    Fixes: b5762cacc411 ("ARM: bcm63138: add NAND DT support")
    Fixes: 46d4bca0445a ("ARM: BCM63XX: add BCM63138 minimal Device Tree")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de500b94790b9ddcc2cf24621a2c4c6a371c544c
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Wed Sep 19 13:54:56 2018 -0600

    xfrm: validate template mode
    
    [ Upstream commit 32bf94fb5c2ec4ec842152d0e5937cd4bb6738fa ]
    
    XFRM mode parameters passed as part of the user templates
    in the IP_XFRM_POLICY are never properly validated. Passing
    values other than valid XFRM modes can cause stack-out-of-bounds
    reads to occur later in the XFRM processing:
    
    [  140.535608] ================================================================
    [  140.543058] BUG: KASAN: stack-out-of-bounds in xfrm_state_find+0x17e4/0x1cc4
    [  140.550306] Read of size 4 at addr ffffffc0238a7a58 by task repro/5148
    [  140.557369]
    [  140.558927] Call trace:
    [  140.558936] dump_backtrace+0x0/0x388
    [  140.558940] show_stack+0x24/0x30
    [  140.558946] __dump_stack+0x24/0x2c
    [  140.558949] dump_stack+0x8c/0xd0
    [  140.558956] print_address_description+0x74/0x234
    [  140.558960] kasan_report+0x240/0x264
    [  140.558963] __asan_report_load4_noabort+0x2c/0x38
    [  140.558967] xfrm_state_find+0x17e4/0x1cc4
    [  140.558971] xfrm_resolve_and_create_bundle+0x40c/0x1fb8
    [  140.558975] xfrm_lookup+0x238/0x1444
    [  140.558977] xfrm_lookup_route+0x48/0x11c
    [  140.558984] ip_route_output_flow+0x88/0xc4
    [  140.558991] raw_sendmsg+0xa74/0x266c
    [  140.558996] inet_sendmsg+0x258/0x3b0
    [  140.559002] sock_sendmsg+0xbc/0xec
    [  140.559005] SyS_sendto+0x3a8/0x5a8
    [  140.559008] el0_svc_naked+0x34/0x38
    [  140.559009]
    [  140.592245] page dumped because: kasan: bad access detected
    [  140.597981] page_owner info is not active (free page?)
    [  140.603267]
    [  140.653503] ================================================================
    
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27171e1e33ce6616e0406bb929a978a34ba24214
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Thu Sep 13 16:48:08 2018 +0100

    ARM: 8799/1: mm: fix pci_ioremap_io() offset check
    
    [ Upstream commit 3a58ac65e2d7969bcdf1b6acb70fa4d12a88e53e ]
    
    IO_SPACE_LIMIT is the ending address of the PCI IO space, i.e
    something like 0xfffff (and not 0x100000).
    
    Therefore, when offset = 0xf0000 is passed as argument, this function
    fails even though the offset + SZ_64K fits below the
    IO_SPACE_LIMIT. This makes the last chunk of 64 KB of the I/O space
    not usable as it cannot be mapped.
    
    This patch fixes that by substracing 1 to offset + SZ_64K, so that we
    compare the addrss of the last byte of the I/O space against
    IO_SPACE_LIMIT instead of the address of the first byte of what is
    after the I/O space.
    
    Fixes: c2794437091a4 ("ARM: Add fixed PCI i/o mapping")
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e36e7b024a86145de12c771ec8b6e5ef65033187
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Sep 5 13:34:02 2018 +0200

    mac80211: TDLS: fix skb queue/priority assignment
    
    [ Upstream commit cb59bc14e830028d2244861216df038165d7625d ]
    
    If the TDLS setup happens over a connection to an AP that
    doesn't have QoS, we nevertheless assign a non-zero TID
    (skb->priority) and queue mapping, which may confuse us or
    drivers later.
    
    Fix it by just assigning the special skb->priority and then
    using ieee80211_select_queue() just like other data frames
    would go through.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48741cac1a885e922877d80c76b6176b34251f0f
Author: Jouni Malinen <jouni@codeaurora.org>
Date:   Wed Sep 5 18:52:22 2018 +0300

    cfg80211: Address some corner cases in scan result channel updating
    
    [ Upstream commit 119f94a6fefcc76d47075b83d2b73d04c895df78 ]
    
    cfg80211_get_bss_channel() is used to update the RX channel based on the
    available frame payload information (channel number from DSSS Parameter
    Set element or HT Operation element). This is needed on 2.4 GHz channels
    where frames may be received on neighboring channels due to overlapping
    frequency range.
    
    This might of some use on the 5 GHz band in some corner cases, but
    things are more complex there since there is no n:1 or 1:n mapping
    between channel numbers and frequencies due to multiple different
    starting frequencies in different operating classes. This could result
    in ieee80211_channel_to_frequency() returning incorrect frequency and
    ieee80211_get_channel() returning incorrect channel information (or
    indication of no match). In the previous implementation, this could
    result in some scan results being dropped completely, e.g., for the 4.9
    GHz channels. That prevented connection to such BSSs.
    
    Fix this by using the driver-provided channel pointer if
    ieee80211_get_channel() does not find matching channel data for the
    channel number in the frame payload and if the scan is done with 5 MHz
    or 10 MHz channel bandwidth. While doing this, also add comments
    describing what the function is trying to achieve to make it easier to
    understand what happens here and why.
    
    Signed-off-by: Jouni Malinen <jouni@codeaurora.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 147953b66723a592bf97d565088b2411fde9cf57
Author: Bob Copeland <me@bobcopeland.com>
Date:   Wed Sep 5 06:22:59 2018 -0400

    mac80211: fix pending queue hang due to TX_DROP
    
    [ Upstream commit 6eae4a6c2be387fec41b0d2782c4fffb57159498 ]
    
    In our environment running lots of mesh nodes, we are seeing the
    pending queue hang periodically, with the debugfs queues file showing
    lines such as:
    
        00: 0x00000000/348
    
    i.e. there are a large number of frames but no stop reason set.
    
    One way this could happen is if queue processing from the pending
    tasklet exited early without processing all frames, and without having
    some future event (incoming frame, stop reason flag, ...) to reschedule
    it.
    
    Exactly this can occur today if ieee80211_tx() returns false due to
    packet drops or power-save buffering in the tx handlers.  In the
    past, this function would return true in such cases, and the change
    to false doesn't seem to be intentional.  Fix this case by reverting
    to the previous behavior.
    
    Fixes: bb42f2d13ffc ("mac80211: Move reorder-sensitive TX handlers to after TXQ dequeue")
    Signed-off-by: Bob Copeland <bobcopeland@fb.com>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 411a3f2588d18741c1aece86c377edd69445c888
Author: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
Date:   Wed Sep 5 08:06:12 2018 +0300

    cfg80211: reg: Init wiphy_idx in regulatory_hint_core()
    
    [ Upstream commit 24f33e64fcd0d50a4b1a8e5b41bd0257aa66b0e8 ]
    
    Core regulatory hints didn't set wiphy_idx to WIPHY_IDX_INVALID. Since
    the regulatory request is zeroed, wiphy_idx was always implicitly set to
    0. This resulted in updating only phy #0.
    Fix that.
    
    Fixes: 806a9e39670b ("cfg80211: make regulatory_request use wiphy_idx instead of wiphy")
    Signed-off-by: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    [add fixes tag]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e97d6b1f751bdd377ff175e2d2e0ef892904d0e
Author: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
Date:   Wed Sep 5 08:06:13 2018 +0300

    mac80211: Always report TX status
    
    [ Upstream commit 8682250b3c1b75a45feb7452bc413d004cfe3778 ]
    
    If a frame is dropped for any reason, mac80211 wouldn't report the TX
    status back to user space.
    
    As the user space may rely on the TX_STATUS to kick its state
    machines, resends etc, it's better to just report this frame as not
    acked instead.
    
    Signed-off-by: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7faa369673bd9198f2a512017dc94747b2a14c41
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Aug 31 08:38:49 2018 -0300

    xfrm6: call kfree_skb when skb is toobig
    
    [ Upstream commit 215ab0f021c9fea3c18b75e7d522400ee6a49990 ]
    
    After commit d6990976af7c5d8f55903bfb4289b6fb030bf754 ("vti6: fix PMTU caching
    and reporting on xmit"), some too big skbs might be potentially passed down to
    __xfrm6_output, causing it to fail to transmit but not free the skb, causing a
    leak of skb, and consequentially a leak of dst references.
    
    After running pmtu.sh, that shows as failure to unregister devices in a namespace:
    
    [  311.397671] unregister_netdevice: waiting for veth_b to become free. Usage count = 1
    
    The fix is to call kfree_skb in case of transmit failures.
    
    Fixes: dd767856a36e ("xfrm6: Don't call icmpv6_send on local error")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89cb86e9d42e1676840ca791ac233f51bceb9d4f
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Wed Aug 1 13:45:11 2018 +0200

    xfrm: Validate address prefix lengths in the xfrm selector.
    
    [ Upstream commit 07bf7908950a8b14e81aa1807e3c667eab39287a ]
    
    We don't validate the address prefix lengths in the xfrm
    selector we got from userspace. This can lead to undefined
    behaviour in the address matching functions if the prefix
    is too big for the given address family. Fix this by checking
    the prefixes and refuse SA/policy insertation when a prefix
    is invalid.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Air Icy <icytxw@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
