commit c97bfb7e6e7955dbd6c9b6bff6db2b24c0a3e15e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Jul 8 15:32:21 2018 +0200

    Linux 4.17.5

commit ef663149701ffd3fd1f5e9599523ec52a6164654
Author: Sean Nyekjaer <sean@geanix.com>
Date:   Tue May 22 19:45:09 2018 +0200

    ARM: dts: imx6q: Use correct SDMA script for SPI5 core
    
    commit df07101e1c4a29e820df02f9989a066988b160e6 upstream.
    
    According to the reference manual the shp_2_mcu / mcu_2_shp
    scripts must be used for devices connected through the SPBA.
    
    This fixes an issue we saw with DMA transfers.
    Sometimes the SPI controller RX FIFO was not empty after a DMA
    transfer and the driver got stuck in the next PIO transfer when
    it read one word more than expected.
    
    commit dd4b487b32a35 ("ARM: dts: imx6: Use correct SDMA script
    for SPI cores") is fixing the same issue but only for SPI1 - 4.
    
    Fixes: 677940258dd8e ("ARM: dts: imx6q: enable dma for ecspi5")
    Signed-off-by: Sean Nyekjaer <sean.nyekjaer@prevas.dk>
    Reviewed-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b77816b86b957e61560a5829deea0dca993b078a
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Mon Jun 25 13:24:27 2018 +0300

    x86/mm: Don't free P4D table when it is folded at runtime
    
    commit 0e311d237d7f3022b7dafb639b42541bfb42fe94 upstream.
    
    When the P4D page table layer is folded at runtime, the p4d_free()
    should do nothing, the same as in <asm-generic/pgtable-nop4d.h>.
    
    It seems this bug should cause double-free in efi_call_phys_epilog(),
    but I don't know how to trigger that code path, so I can't confirm that
    by testing.
    
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reviewed-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org # 4.17
    Fixes: 98219dda2ab5 ("x86/mm: Fold p4d page table layer at runtime")
    Link: http://lkml.kernel.org/r/20180625102427.15015-1-aryabinin@virtuozzo.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54fb3c180d05e9dfda892a93413514e99f0cbb19
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Tue Jun 5 10:52:23 2018 +0200

    ARM64: dts: meson-gxl-s905x-p212: Add phy-supply for usb0
    
    commit d511b3e4087eedbe11c7496c396432b8b7c2d7d9 upstream.
    
    Like LibreTech-CC, the USB0 needs the 5V regulator to be enabled to power the
    devices on the P212 Reference Design based boards.
    
    Fixes: b9f07cb4f41f ("ARM64: dts: meson-gxl-s905x-p212: enable the USB controller")
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 012007a1dd19a437583a7b45018aaef14642093c
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Jun 11 22:16:33 2018 +0900

    netfilter: nf_tables: use WARN_ON_ONCE instead of BUG_ON in nft_do_chain()
    
    commit adc972c5b88829d38ede08b1069718661c7330ae upstream.
    
    When depth of chain is bigger than NFT_JUMP_STACK_SIZE, the nft_do_chain
    crashes. But there is no need to crash hard here.
    
    Suggested-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 735c001bfb3bcf07eb2ea006a99ddcd90d864fad
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Jun 12 18:36:19 2018 +0200

    netfilter: xt_connmark: fix list corruption on rmmod
    
    commit fc6ddbecce440df74fb4491c17c372b52cf5be83 upstream.
    
    This needs to use xt_unregister_targets, else new revision is left
    on the list which then causes list to point to a target struct that has been free'd.
    
    Fixes: 472a73e00757 ("netfilter: xt_conntrack: Support bit-shifting for CONNMARK & MARK targets.")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33e021ba64e9d9c7e8b6c5faa328996c83531261
Author: Vincent Bernat <vincent@bernat.im>
Date:   Sun May 20 13:03:38 2018 +0200

    netfilter: ip6t_rpfilter: provide input interface for route lookup
    
    commit cede24d1b21d68d84ac5a36c44f7d37daadcc258 upstream.
    
    In commit 47b7e7f82802, this bit was removed at the same time the
    RT6_LOOKUP_F_IFACE flag was removed. However, it is needed when
    link-local addresses are used, which is a very common case: when
    packets are routed, neighbor solicitations are done using link-local
    addresses. For example, the following neighbor solicitation is not
    matched by "-m rpfilter":
    
        IP6 fe80::5254:33ff:fe00:1 > ff02::1:ff00:3: ICMP6, neighbor
        solicitation, who has 2001:db8::5254:33ff:fe00:3, length 32
    
    Commit 47b7e7f82802 doesn't quite explain why we shouldn't use
    RT6_LOOKUP_F_IFACE in the rpfilter case. I suppose the interface check
    later in the function would make it redundant. However, the remaining
    of the routing code is using RT6_LOOKUP_F_IFACE when there is no
    source address (which matches rpfilter's case with a non-unicast
    destination, like with neighbor solicitation).
    
    Signed-off-by: Vincent Bernat <vincent@bernat.im>
    Fixes: 47b7e7f82802 ("netfilter: don't set F_IFACE on ipv6 fib lookups")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3642628920063b47471a40d93891b0781564efe8
Author: Kenneth Graunke <kenneth@whitecape.org>
Date:   Fri Jun 15 20:06:05 2018 +0100

    drm/i915: Enable provoking vertex fix on Gen9 systems.
    
    commit 7a3727f385dc64773db1c144f6b15c1e9d4735bb upstream.
    
    The SF and clipper units mishandle the provoking vertex in some cases,
    which can cause misrendering with shaders that use flat shaded inputs.
    
    There are chicken bits in 3D_CHICKEN3 (for SF) and FF_SLICE_CHICKEN
    (for the clipper) that work around the issue.  These registers are
    unfortunately not part of the logical context (even the power context),
    and so we must reload them every time we start executing in a context.
    
    Bugzilla: https://bugs.freedesktop.org/103047
    Signed-off-by: Kenneth Graunke <kenneth@whitecape.org>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180615190605.16238-1-chris@chris-wilson.co.uk
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: stable@vger.kernel.org
    (cherry picked from commit b77422f80337d363eed60c8c48db9cb6e33085c9)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3d16447e8cac5a1d6da87a952d2bf6a1421ff68
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 13 19:05:53 2018 +0300

    drm/i915: Turn off g4x DP port in .post_disable()
    
    commit 4dccc4d517481282e84335c7acbfd7a1481004b8 upstream.
    
    While Bspec doesn't list a specific sequence for turning off the DP port
    on g4x we are getting an underrun if the port is disabled in the
    .disable() hook. Looks like the pipe stops when the port stops, and by
    that time the plane disable may not have completed yet. Also the plane(s)
    seem to end up in some wonky state when this happens as they also signal
    another underrun immediately after we turn them back on during the next
    enable sequence.
    
    We could add a vblank wait in .disable() to avoid wedging the planes,
    but I assume we're still tripping up the pipe in some way. So it seems
    better to me to just follow the ILK+ sequence and turn off the DP port
    in .post_disable() instead. This sequence doesn't seem to suffer from
    this problem. Could be it was always the intended sequence for DP and
    the gen4 bspec was just never updated to include it.
    
    Originally we used the bad sequence even on ilk+, but I changed that
    in commit 08aff3fe26ae ("drm/i915: Move DP port disable to post_disable
    for pch platforms") as it was causing issues on those platforms as well.
    I left out g4x then only because I didn't have the hardware to test it.
    Now that I do it's fairly clear that the ilk+ sequence is also the
    right choice for g4x.
    
    v2: Fix whitespace fail (Jani)
        Mention the ilk+ commit (Jani)
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180613160553.11664-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit 51a9f6dfc00d35f927ecfaf6f0ae8ebaba39b3fe)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3e3408135bd30c28444bce40c3e1800aeffb8ba
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 13 19:05:52 2018 +0300

    drm/i915: Disallow interlaced modes on g4x DP outputs
    
    commit 1e34f1d36804be1a446212a33ca5397bf0e5acdd upstream.
    
    Looks like interlaced DP output doesn't work on g4x either. Not all
    that surprising considering we already established that interlaced
    DP output is busted on VLV/CHV.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180613160553.11664-1-ville.syrjala@linux.intel.com
    (cherry picked from commit 929168c5f3df5d9ea0ef426c33e971157d045eab)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea6ac2b5cf18c50321208952f3ff91810174926d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jun 11 23:02:55 2018 +0300

    drm/i915: Fix PIPESTAT irq ack on i965/g4x
    
    commit 4dc055c9cc8b3dac966b54d3cd5cf463a988299b upstream.
    
    On i965/g4x IIR is edge triggered. So in order for IIR to notice that
    there is still a pending interrupt we have to force and edge in ISR.
    For the ISR/IIR pipe event bits we can do that by temporarily
    clearing all the PIPESTAT enable bits when we ack the status bits.
    This will force the ISR pipe event bit low, and it can then go back
    high when we restore the PIPESTAT enable bits.
    
    This avoids the following race:
    1. stat = read(PIPESTAT)
    2. an enabled PIPESTAT status bit goes high
    3. write(PIPESTAT, enable|stat);
    4. write(IIR, PIPE_EVENT)
    
    The end result is IIR==0 and ISR!=0. This can lead to nasty
    vblank wait/flip_done timeouts if another interrupt source
    doesn't trick us into looking at the PIPESTAT status bits despite
    the IIR PIPE_EVENT bit being low.
    
    Before i965 IIR was level triggered so this problem can't actually
    happen there. And curiously VLV/CHV went back to the level triggered
    scheme as well. But for simplicity we'll use the same i965/g4x
    compatible code for all platforms.
    
    Cc: stable@vger.kernel.org
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=106033
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=105225
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=106030
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180611200258.27121-1-ville.syrjala@linux.intel.com
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    (cherry picked from commit 132c27c97cb958f637dc05adc35a61b47779bcd8)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d85341e000f14c18abec5d97a008432d4cd30426
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu May 24 15:54:03 2018 +0300

    drm/i915: Allow DBLSCAN user modes with eDP/LVDS/DSI
    
    commit 541ab84d2b6ea79021d5df0b54d81600334fa2a4 upstream.
    
    When encountering a connector with the scaling mode property both
    intel and modesetting ddxs sometimes add tons of DBLSCAN modes
    to the output's mode list. The idea presumably being that since the
    output will be going through the panel fitter anyway we can pretend
    to use any kind of mode.
    
    Sadly that means we can't reject user modes with the DBLSCAN flag
    until we know whether we're going to be using the panel's native
    mode or the user mode directly. Doing otherwise means X clients using
    xf86vidmode/xrandr will get a protocol error (and often self
    terminate as a result) when the kernel refuses to use the requested
    mode with the DBLSCAN flag.
    
    To undo the regression we'll move the DBLSCAN checks into the
    connector->mode_valid() and encoder->compute_config() hooks.
    
    Cc: stable@vger.kernel.org
    Cc: Vito Caputo <vcaputo@pengaru.com>
    Reported-by: Vito Caputo <vcaputo@pengaru.com>
    Fixes: e995ca0b8139 ("drm/i915: Provide a device level .mode_valid() hook")
    References: https://lkml.org/lkml/2018/5/21/715
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180524125403.23445-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=106804
    Tested-by: Arkadiusz Miskiewicz <arekm@maven.pl>
    (cherry picked from commit e4dd27aadd205417a2e9ea9902b698a0252ec3a0)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cdd39e51ccaa3a1ed0a034a68d80defd4046cd8
Author: Shirish S <shirish.s@amd.com>
Date:   Tue Jun 26 09:32:39 2018 +0530

    drm/amd/display: release spinlock before committing updates to stream
    
    commit 4de9f38bb2cce3a4821ffb8a83d6b08f6e37d905 upstream.
    
    Currently, amdgpu_do_flip() spinlocks crtc->dev->event_lock and
    releases it only after committing updates to the stream.
    
    dc_commit_updates_for_stream() should be moved out of
    spinlock for the below reasons:
    
    1. event_lock is supposed to protect access to acrct->pflip_status _only_
    2. dc_commit_updates_for_stream() has potential sleep's
       and also its not appropriate to be  in an atomic state
       for such long sequences of code.
    
    Signed-off-by: Shirish S <shirish.s@amd.com>
    Suggested-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd044fd4840505bfa58a92542a57737c23dba482
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Jun 21 16:48:26 2018 -0400

    drm/amdgpu: Count disabled CRTCs in commit tail earlier
    
    commit fe2a19652918a5247418aed48a247414a5e45fe2 upstream.
    
    This fixes a regression I accidentally reduced that was picked up by
    kasan, where we were checking the CRTC atomic states after DRM's helpers
    had already freed them. Example:
    
    ==================================================================
    BUG: KASAN: use-after-free in amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
    Read of size 1 at addr ffff8803a697b071 by task kworker/u16:0/7
    
    CPU: 7 PID: 7 Comm: kworker/u16:0 Tainted: G           O      4.18.0-rc1Lyude-Upstream+ #1
    Hardware name: HP HP ZBook 15 G4/8275, BIOS P70 Ver. 01.21 05/02/2018
    Workqueue: events_unbound commit_work [drm_kms_helper]
    Call Trace:
     dump_stack+0xc1/0x169
     ? dump_stack_print_info.cold.1+0x42/0x42
     ? kmsg_dump_rewind_nolock+0xd9/0xd9
     ? printk+0x9f/0xc5
     ? amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
     print_address_description+0x6c/0x23c
     ? amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
     kasan_report.cold.6+0x241/0x2fd
     amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
     ? commit_planes_to_stream.constprop.45+0x13b0/0x13b0 [amdgpu]
     ? cpu_load_update_active+0x290/0x290
     ? finish_task_switch+0x2bd/0x840
     ? __switch_to_asm+0x34/0x70
     ? read_word_at_a_time+0xe/0x20
     ? strscpy+0x14b/0x460
     ? drm_atomic_helper_wait_for_dependencies+0x47d/0x7e0 [drm_kms_helper]
     commit_tail+0x96/0xe0 [drm_kms_helper]
     process_one_work+0x88a/0x1360
     ? create_worker+0x540/0x540
     ? __sched_text_start+0x8/0x8
     ? move_queued_task+0x760/0x760
     ? call_rcu_sched+0x20/0x20
     ? vsnprintf+0xcda/0x1350
     ? wait_woken+0x1c0/0x1c0
     ? mutex_unlock+0x1d/0x40
     ? init_timer_key+0x190/0x230
     ? schedule+0xea/0x390
     ? __schedule+0x1ea0/0x1ea0
     ? need_to_create_worker+0xe4/0x210
     ? init_worker_pool+0x700/0x700
     ? try_to_del_timer_sync+0xbf/0x110
     ? del_timer+0x120/0x120
     ? __mutex_lock_slowpath+0x10/0x10
     worker_thread+0x196/0x11f0
     ? flush_rcu_work+0x50/0x50
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x40/0x70
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x40/0x70
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x40/0x70
     ? __schedule+0x7d6/0x1ea0
     ? migrate_swap_stop+0x850/0x880
     ? __sched_text_start+0x8/0x8
     ? save_stack+0x8c/0xb0
     ? kasan_kmalloc+0xbf/0xe0
     ? kmem_cache_alloc_trace+0xe4/0x190
     ? kthread+0x98/0x390
     ? ret_from_fork+0x35/0x40
     ? ret_from_fork+0x35/0x40
     ? deactivate_slab.isra.67+0x3c4/0x5c0
     ? kthread+0x98/0x390
     ? kthread+0x98/0x390
     ? set_track+0x76/0x120
     ? schedule+0xea/0x390
     ? __schedule+0x1ea0/0x1ea0
     ? wait_woken+0x1c0/0x1c0
     ? kasan_unpoison_shadow+0x30/0x40
     ? parse_args.cold.15+0x17a/0x17a
     ? flush_rcu_work+0x50/0x50
     kthread+0x2d4/0x390
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x35/0x40
    
    Allocated by task 1124:
     kasan_kmalloc+0xbf/0xe0
     kmem_cache_alloc_trace+0xe4/0x190
     dm_crtc_duplicate_state+0x78/0x130 [amdgpu]
     drm_atomic_get_crtc_state+0x147/0x410 [drm]
     page_flip_common+0x57/0x230 [drm_kms_helper]
     drm_atomic_helper_page_flip+0xa6/0x110 [drm_kms_helper]
     drm_mode_page_flip_ioctl+0xc4b/0x10a0 [drm]
     drm_ioctl_kernel+0x1d4/0x260 [drm]
     drm_ioctl+0x433/0x920 [drm]
     amdgpu_drm_ioctl+0x11d/0x290 [amdgpu]
     do_vfs_ioctl+0x1a1/0x13d0
     ksys_ioctl+0x60/0x90
     __x64_sys_ioctl+0x6f/0xb0
     do_syscall_64+0x147/0x440
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 1124:
     __kasan_slab_free+0x12e/0x180
     kfree+0x92/0x1a0
     drm_atomic_state_default_clear+0x315/0xc40 [drm]
     __drm_atomic_state_free+0x35/0xd0 [drm]
     drm_atomic_helper_update_plane+0xac/0x350 [drm_kms_helper]
     __setplane_internal+0x2d6/0x840 [drm]
     drm_mode_cursor_universal+0x41e/0xbe0 [drm]
     drm_mode_cursor_common+0x49f/0x880 [drm]
     drm_mode_cursor_ioctl+0xd8/0x130 [drm]
     drm_ioctl_kernel+0x1d4/0x260 [drm]
     drm_ioctl+0x433/0x920 [drm]
     amdgpu_drm_ioctl+0x11d/0x290 [amdgpu]
     do_vfs_ioctl+0x1a1/0x13d0
     ksys_ioctl+0x60/0x90
     __x64_sys_ioctl+0x6f/0xb0
     do_syscall_64+0x147/0x440
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff8803a697b068
     which belongs to the cache kmalloc-1024 of size 1024
    The buggy address is located 9 bytes inside of
     1024-byte region [ffff8803a697b068, ffff8803a697b468)
    The buggy address belongs to the page:
    page:ffffea000e9a5e00 count:1 mapcount:0 mapping:ffff88041e00efc0 index:0x0 compound_mapcount: 0
    flags: 0x8000000000008100(slab|head)
    raw: 8000000000008100 ffffea000ecbc208 ffff88041e000c70 ffff88041e00efc0
    raw: 0000000000000000 0000000000170017 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8803a697af00: fb fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8803a697af80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff8803a697b000: fc fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb
                                                                 ^
     ffff8803a697b080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8803a697b100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    So, we fix this by counting the number of CRTCs this atomic commit disabled
    early on in the function before their atomic states have been freed, then use
    that count later to do the appropriate number of RPM puts at the end of the
    function.
    
    Acked-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 97028037a38ae ("drm/amdgpu: Grab/put runtime PM references in atomic_commit_tail()")
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: Michel Dänzer <michel@daenzer.net>
    Reported-by: Michel Dänzer <michel@daenzer.net>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26dc4e9607da358cb5896554806188459d768613
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Thu Jun 21 11:27:46 2018 +0200

    drm/amdgpu: GPU vs CPU page size fixes in amdgpu_vm_bo_split_mapping
    
    commit 38e624a18f9a05b8c894409be6b14709a7206c7c upstream.
    
    start / last / max_entries are numbers of GPU pages, pfn / count are
    numbers of CPU pages. Convert between them accordingly.
    
    Fixes badness on systems with > 4K page size.
    
    Cc: stable@vger.kernel.org
    Bugzilla: https://bugs.freedesktop.org/106258
    Reported-by: Matt Corallo <freedesktop@bluematt.me>
    Tested-by: foxbat@ruin.net
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 762c9d721efe5ebcd541e3478cecbb725ef810ea
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Fri Jun 15 11:06:56 2018 +0200

    drm/amdgpu: Update pin_size values before unpinning BO
    
    commit 34d6d59986abb1d2cb5415a49b6c50f51ba1d2e4 upstream.
    
    At least in theory, ttm_bo_validate may move the BO, in which case the
    pin_size accounting would be inconsistent with when the BO was pinned.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c56ec3c2434f7f5437d3450772d83f7bc8eb6e81
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Thu Jun 14 13:02:07 2018 +0200

    drm/amdgpu: Make amdgpu_vram_mgr_bo_invisible_size always accurate
    
    commit 7303b39e46b2f523334591f05fd9566cf929eb26 upstream.
    
    Even BOs with AMDGPU_GEM_CREATE_NO_CPU_ACCESS may end up at least
    partially in CPU visible VRAM, in particular when all VRAM is visible.
    
    v2:
    * Don't take VRAM mgr spinlock, not needed (Christian König)
    * Make loop logic simpler and clearer.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0a6f952d2087e815ab51a898956e848728682d5
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Tue Jun 12 12:07:33 2018 +0200

    drm/amdgpu: Refactor amdgpu_vram_mgr_bo_invisible_size helper
    
    commit 5e9244ff585239630f15f8ad8e676bc91a94ca9e upstream.
    
    Preparation for the following fix, no functional change intended.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95861afae4198d4917904d22ca073c04020e03fe
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Fri Jun 8 12:58:15 2018 +0200

    drm/amdgpu: Use kvmalloc_array for allocating VRAM manager nodes array
    
    commit 6fa39bc1e01dab8b4f54b23e95a181a2ed5a2d38 upstream.
    
    It can be quite big, and there's no need for it to be physically
    contiguous. This is less likely to fail under memory pressure (has
    actually happened while running piglit).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 734b9e8abfa2e9b2a2289b1b9697b31d0ab4fc63
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Tue May 8 11:33:42 2018 -0400

    drm/amdgpu: Don't default to DC support for Kaveri and older
    
    commit d9fda248046ac035f18a6e663f2f9245b4bf9470 upstream.
    
    We've had a number of users report failures to detect and light up
    display with DC with LVDS and VGA. These connector types are not
    currently supported with DC. I'd like to add support but unfortunately
    don't have a system with LVDS or VGA available.
    
    In order not to cause regressions we should probably fallback to the
    non-DC driver for ASICs that support VGA and LVDS.
    
    These ASICs are:
     * Bonaire
     * Kabini
     * Kaveri
     * Mullins
    
    ASIC support can always be force enabled with amdgpu.dc=1
    
    v2: Keep Hawaii on DC
    v3: Added Mullins to the list
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5f04b3af30a6615e215545c451f750969209437
Author: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
Date:   Wed Jun 13 10:16:47 2018 +0200

    Revert "drm/sun4i: Handle DRM_BUS_FLAG_PIXDATA_*EDGE"
    
    commit 58b3d02f066e5b1480d80bd308c545526eea3250 upstream.
    
    This reverts commit 2c17a4368aad2b88b68e4390c819e226cf320f70.
    
    The offending commit triggers a run-time fault when accessing the panel
    element of the sun4i_tcon structure when no such panel is attached.
    
    It was apparently assumed in said commit that a panel is always used with
    the TCON. Although it is often the case, this is not always true.
    For instance a bridge might be used instead of a panel.
    
    This issue was discovered using an A13-OLinuXino, that uses the TCON
    in RGB mode for a simple DAC-based VGA bridge.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180613081647.31183-1-paul.kocialkowski@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88059664f0c21445ec458587b84e9158348013d9
Author: Stefan Agner <stefan@agner.ch>
Date:   Sun Jun 17 10:48:22 2018 +0200

    drm/atmel-hlcdc: check stride values in the first plane
    
    commit 9fcf2b3c1c0276650fea537c71b513d27d929b05 upstream.
    
    The statement always evaluates to true since the struct fields
    are arrays. This has shown up as a warning when compiling with
    clang:
      warning: address of array 'desc->layout.xstride' will always
          evaluate to 'true' [-Wpointer-bool-conversion]
    
    Check for values in the first plane instead.
    
    Fixes: 1a396789f65a ("drm: add Atmel HLCDC Display Controller support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180617084826.31885-1-stefan@agner.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af810a3c7b7fef32b5e89b5e30921c6293396b21
Author: Jeremy Cline <jcline@redhat.com>
Date:   Fri Jun 1 16:05:32 2018 -0400

    drm/qxl: Call qxl_bo_unref outside atomic context
    
    commit 889ad63d41eea20184b0483e7e585e5b20fb6cfe upstream.
    
    "qxl_bo_unref" may sleep, but calling "qxl_release_map" causes
    "preempt_disable()" to be called and "preempt_enable()" isn't called
    until "qxl_release_unmap" is used. Move the call to "qxl_bo_unref" out
    from in between the two to avoid sleeping from an atomic context.
    
    This issue can be demonstrated on a kernel with CONFIG_LOCKDEP=y by
    creating a VM using QXL, using a desktop environment using Xorg, then
    moving the cursor on or off a window.
    
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1571128
    Fixes: 9428088c90b6 ("drm/qxl: reapply cursor after resetting primary")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20180601200532.13619-1-jcline@redhat.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc3af1abbba4354778c8811fa64d7c86b616753d
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Apr 6 21:10:53 2018 -0400

    drm/i915/dp: Send DPCD ON for MST before phy_up
    
    commit be1c63c8017bb00a4041abace6cc1e9f0bf26aa9 upstream.
    
    When doing a modeset where the sink is transitioning from D3 to D0 , it
    would sometimes be possible for the initial power_up_phy() to start
    timing out. This would only be observed in the last action before the
    sink went into D3 mode was intel_dp_sink_dpms(DRM_MODE_DPMS_OFF). We
    originally thought this might be an issue with us accidentally shutting
    off the aux block when putting the sink into D3, but since the DP spec
    mandates that sinks must wake up within 1ms while we have 100ms to
    respond to an ESI irq, this didn't really add up. Turns out that the
    problem is more subtle then that:
    
    It turns out that the timeout is from us not enabling DPMS on the MST
    hub before actually trying to initiate sideband communications. This
    would cause the first sideband communication (power_up_phy()), to start
    timing out because the sink wasn't ready to respond. Afterwards, we
    would call intel_dp_sink_dpms(DRM_MODE_DPMS_ON) in
    intel_ddi_pre_enable_dp(), which would actually result in waking up the
    sink so that sideband requests would work again.
    
    Since DPMS is what lets us actually bring the hub up into a state where
    sideband communications become functional again, we just need to make
    sure to enable DPMS on the display before attempting to perform sideband
    communications.
    
    Changes since v1:
    - Remove comment above if (!intel_dp->is_mst) - vsryjala
    - Move intel_dp_sink_dpms() for MST into intel_dp_post_disable_mst() to
      keep enable/disable paths symmetrical
    - Improve commit message - dhnkrn
    Changes since v2:
    - Only send DPMS off when we're disabling the last sink, and only send
      DPMS on when we're enabling the first sink - dhnkrn
    Changes since v3:
    - Check against is_mst, not intel_dp->is_mst - dhnkrn/vsyrjala
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: ad260ab32a4d9 ("drm/i915/dp: Write to SET_POWER dpcd to enable MST hub.")
    Link: https://patchwork.freedesktop.org/patch/msgid/20180407011053.22437-1-lyude@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6a16c9a66bdc98a2334b0e68491870803a932bf
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Fri Apr 27 09:09:52 2018 -0400

    drm/amd/display: Clear connector's edid pointer
    
    commit 5326c4525d1b2d5f1519268dd305e19c9bd4ef56 upstream.
    
    Clear connector's edid pointer on coonnector update, when unplugging
    the display.
    
    Fix poison EDID when hotplugging on previously used connector.
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b98b0fd6bba04473aa4090826c20bb00709bc4b8
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Tue Apr 3 15:34:01 2018 +1000

    drm/sti: Depend on OF rather than selecting it
    
    commit c9fea6f4379c72b7c59e1efceab09a35bc7eac43 upstream.
    
    Commit cc6b741c6f63 ("drm: sti: remove useless fields from vtg
    structure") reworked some code inside of this driver and made it select
    CONFIG_OF. This results in the entire OF layer being enabled when
    building an allmodconfig on ia64. OF on ia64 is completely unsupported
    so this isn't a great state of affairs.
    
    The 0day robot noticed a link-time failure on ia64 caused by
    using of_node_to_nid() in an otherwise unrelated driver. The
    generic fallback for of_node_to_nid() only exists when:
    
            defined(CONFIG_OF) && defined(CONFIG_NUMA) == false
    
    Since CONFIG_NUMA is usually selected for IA64 we get the link failure.
    Fix this by making the driver depend on OF rather than selecting it,
    odds are that was the original intent.
    
    Link: https://lists.01.org/pipermail/kbuild-all/2018-March/045172.html
    Fixes: cc6b741c6f63 ("drm: sti: remove useless fields from vtg structure")
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Vincent Abriou <vincent.abriou@st.com>
    Cc: David Airlie <airlied@linux.ie>
    Cc: dri-devel@lists.freedesktop.org
    Cc: linux-ia64@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Philippe Cornu <philippe.cornu@st.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180403053401.30045-1-oohall@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15169d615cb127885ef61c8703fedf7ae4e5b997
Author: Junwei Zhang <Jerry.Zhang@amd.com>
Date:   Tue Jun 5 17:31:51 2018 +0800

    drm/amdgpu: fix clear_all and replace handling in the VM (v2)
    
    commit 387f49e5467244b7bcb4cad0946a5d0fcade5f92 upstream.
    
    v2: assign bo_va as well
    
    We need to put the lose ends on the invalid list because it is possible
    that we need to split up huge pages for them.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Junwei Zhang <Jerry.Zhang@amd.com> (v2)
    Reviewed-by: David Zhou <david1.zhou@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b7c313d247670947b2d78fffd94b5c05631e609
Author: Lyude Paul <lyude@redhat.com>
Date:   Mon Jun 4 15:35:03 2018 -0400

    drm/amdgpu: Grab/put runtime PM references in atomic_commit_tail()
    
    commit 97028037a38ae40c0e06789b71038d3a6045a413 upstream.
    
    So, unfortunately I recently made the discovery that in the upstream
    kernel, the only reason that amdgpu is not currently suffering from
    issues with runtime PM putting the GPU into suspend while it's driving
    displays is due to the fact that on most prime systems, we have sound
    devices associated with the GPU that hold their own runtime PM ref for
    the GPU.
    
    What this means however, is that in the event that there isn't any kind
    of sound device active (which can easily be reproduced by building a
    kernel with sound drivers disabled), the GPU will fall asleep even when
    there's displays active. This appears to be in part due to the fact that
    amdgpu has not actually ever relied on it's rpm_idle() function to be
    the only thing keeping it running, and normally grabs it's own power
    references whenever there are displays active (as can be seen with the
    original pre-DC codepath in amdgpu_display_crtc_set_config() in
    amdgpu_display.c). This means it's very likely that this bug was
    introduced during the switch over the DC.
    
    So to fix this, we start grabbing runtime PM references every time we
    enable a previously disabled CRTC in atomic_commit_tail(). This appears
    to be the correct solution, as it matches up with what i915 does in
    i915/intel_runtime_pm.c.
    
    The one sideaffect of this is that we ignore the variable that the
    pre-DC code used to use for tracking when it needed runtime PM refs,
    adev->have_disp_power_ref. This is mainly because there's no way for a
    driver to tell whether or not all of it's CRTCs are enabled or disabled
    when we've begun committing an atomic state, as there may be CRTC
    commits happening in parallel that aren't contained within the atomic
    state being committed. So, it's safer to just get/put a reference for
    each CRTC being enabled or disabled in the new atomic state.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Christian König <christian.koenig@amd.com>.
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit beb52f8d5c161313902ca3ec8d6a42ed7952de3f
Author: Huang Rui <ray.huang@amd.com>
Date:   Wed May 23 11:18:43 2018 +0800

    drm/amdgpu: fix the missed vcn fw version report
    
    commit a0b2ac29415bb44d1c212184c1385a1abe68db5c upstream.
    
    It missed vcn.fw_version setting when init vcn microcode, and it will be used to
    report vcn ucode version via amdgpu_firmware_info sysfs interface.
    
    Signed-off-by: Huang Rui <ray.huang@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e19da0b5b0bec37343e602b5b9a67dd09336bd3c
Author: Rex Zhu <Rex.Zhu@amd.com>
Date:   Tue Apr 10 17:49:56 2018 +0800

    drm/amdgpu: Add APU support in vi_set_vce_clocks
    
    commit 08ebb6e9f4fd7098c28e0ebbb42847cf0488ebb8 upstream.
    
    1. fix set vce clocks failed on Cz/St
       which lead 1s delay when boot up.
    2. remove the workaround in vce_v3_0.c
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Acked-by: Shirish S <shirish.s@amd.com>
    Signed-off-by: Rex Zhu <Rex.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea54c0431f95a00a93d6348dbf7591939948e352
Author: Rex Zhu <Rex.Zhu@amd.com>
Date:   Tue Apr 10 17:17:22 2018 +0800

    drm/amdgpu: Add APU support in vi_set_uvd_clocks
    
    commit 819a23f83e3b2513cffbef418458a47ca02c36b3 upstream.
    
    fix the issue set uvd clock failed on CZ/ST
    which lead 1s delay when boot up.
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Acked-by: Shirish S <shirish.s@amd.com>
    Signed-off-by: Rex Zhu <Rex.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b69c0f9c2c8541d5c5b2203efd6cb9b6bf9c7df
Author: Alexander Potapenko <glider@google.com>
Date:   Thu Jun 14 12:23:09 2018 +0200

    vt: prevent leaking uninitialized data to userspace via /dev/vcs*
    
    commit 21eff69aaaa0e766ca0ce445b477698dc6a9f55a upstream.
    
    KMSAN reported an infoleak when reading from /dev/vcs*:
    
      BUG: KMSAN: kernel-infoleak in vcs_read+0x18ba/0x1cc0
      Call Trace:
      ...
       kmsan_copy_to_user+0x7a/0x160 mm/kmsan/kmsan.c:1253
       copy_to_user ./include/linux/uaccess.h:184
       vcs_read+0x18ba/0x1cc0 drivers/tty/vt/vc_screen.c:352
       __vfs_read+0x1b2/0x9d0 fs/read_write.c:416
       vfs_read+0x36c/0x6b0 fs/read_write.c:452
      ...
      Uninit was created at:
       kmsan_save_stack_with_flags mm/kmsan/kmsan.c:279
       kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:189
       kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:315
       __kmalloc+0x13a/0x350 mm/slub.c:3818
       kmalloc ./include/linux/slab.h:517
       vc_allocate+0x438/0x800 drivers/tty/vt/vt.c:787
       con_install+0x8c/0x640 drivers/tty/vt/vt.c:2880
       tty_driver_install_tty drivers/tty/tty_io.c:1224
       tty_init_dev+0x1b5/0x1020 drivers/tty/tty_io.c:1324
       tty_open_by_driver drivers/tty/tty_io.c:1959
       tty_open+0x17b4/0x2ed0 drivers/tty/tty_io.c:2007
       chrdev_open+0xc25/0xd90 fs/char_dev.c:417
       do_dentry_open+0xccc/0x1440 fs/open.c:794
       vfs_open+0x1b6/0x2f0 fs/open.c:908
      ...
      Bytes 0-79 of 240 are uninitialized
    
    Consistently allocating |vc_screenbuf| with kzalloc() fixes the problem
    
    Reported-by: syzbot+17a8efdf800000@syzkaller.appspotmail.com
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb2abeb2a8dc35a5ba1fb8d95d19f5fa713dc894
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jun 13 17:08:59 2018 +0200

    serdev: fix memleak on module unload
    
    commit bc6cf3669d22371f573ab0305b3abf13887c0786 upstream.
    
    Make sure to free all resources associated with the ida on module
    exit.
    
    Fixes: cd6484e1830b ("serdev: Introduce new bus for serial attached devices")
    Cc: stable <stable@vger.kernel.org>     # 4.11
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fb029f9a80cdcac1ba20d194e7ad5678272b347
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Jun 6 21:00:41 2018 +0300

    serial: 8250_pci: Remove stalled entries in blacklist
    
    commit 20dcff436e9fcd2e106b0ccc48a52206bc176d70 upstream.
    
    After the commit
    
      7d8905d06405 ("serial: 8250_pci: Enable device after we check black list")
    
    pure serial multi-port cards, such as CH355, got blacklisted and thus
    not being enumerated anymore. Previously, it seems, blacklisting them
    was on purpose to shut up pciserial_init_one() about record duplication.
    
    So, remove the entries from blacklist in order to get cards enumerated.
    
    Fixes: 7d8905d06405 ("serial: 8250_pci: Enable device after we check black list")
    Reported-by: Matt Turner <mattst88@gmail.com>
    Cc: Sergej Pupykin <ml@sergej.pp.ru>
    Cc: Alexandr Petrenko <petrenkoas83@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-and-Tested-by: Matt Turner <mattst88@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19dc0ed2e4009d3bb72a7be124fd8a75ffdd01e2
Author: Leonard Crestez <leonard.crestez@nxp.com>
Date:   Thu Jun 7 21:52:50 2018 +0300

    iio: mma8452: Fix ignoring MMA8452_INT_DRDY
    
    commit b02ec67a8e38875cdc5f9214be885022f11c0017 upstream.
    
    Interrupts are ignored if no event bit is set in the status status
    register and this breaks the buffer interface. No data is shown when
    running "iio_generic_buffer -n mma8451 -a" and interrupt counts go
    crazy.
    
    Fix by not returning IRQ_NONE if DRDY is set.
    
    Fixes: 605f72de137a ("iio: accel: mma8452: improvements to handle
    multiple events")
    
    Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
    cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 129cdc94d447b726da86906ce722773daffe4d36
Author: Laura Abbott <labbott@redhat.com>
Date:   Mon Jun 11 11:06:53 2018 -0700

    staging: android: ion: Return an ERR_PTR in ion_map_kernel
    
    commit 0a2bc00341dcfcc793c0dbf4f8d43adf60458b05 upstream.
    
    The expected return value from ion_map_kernel is an ERR_PTR. The error
    path for a vmalloc failure currently just returns NULL, triggering
    a warning in ion_buffer_kmap_get. Encode the vmalloc failure as an ERR_PTR.
    
    Reported-by: syzbot+55b1d9f811650de944c6@syzkaller.appspotmail.com
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8ac143bb1a829a5320d9b8be2a4f2f37a5e4935
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat May 26 09:53:14 2018 +0900

    n_tty: Access echo_* variables carefully.
    
    commit ebec3f8f5271139df618ebdf8427e24ba102ba94 upstream.
    
    syzbot is reporting stalls at __process_echoes() [1]. This is because
    since ldata->echo_commit < ldata->echo_tail becomes true for some reason,
    the discard loop is serving as almost infinite loop. This patch tries to
    avoid falling into ldata->echo_commit < ldata->echo_tail situation by
    making access to echo_* variables more carefully.
    
    Since reset_buffer_flags() is called without output_lock held, it should
    not touch echo_* variables. And omit a call to reset_buffer_flags() from
    n_tty_open() by using vzalloc().
    
    Since add_echo_byte() is called without output_lock held, it needs memory
    barrier between storing into echo_buf[] and incrementing echo_head counter.
    echo_buf() needs corresponding memory barrier before reading echo_buf[].
    Lack of handling the possibility of not-yet-stored multi-byte operation
    might be the reason of falling into ldata->echo_commit < ldata->echo_tail
    situation, for if I do WARN_ON(ldata->echo_commit == tail + 1) prior to
    echo_buf(ldata, tail + 1), the WARN_ON() fires.
    
    Also, explicitly masking with buffer for the former "while" loop, and
    use ldata->echo_commit > tail for the latter "while" loop.
    
    [1] https://syzkaller.appspot.com/bug?id=17f23b094cd80df750e5b0f8982c521ee6bcbf40
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+108696293d7a21ab688f@syzkaller.appspotmail.com>
    Cc: Peter Hurley <peter@hurleysoftware.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd4a7a84e66fcafa1d40e011c9088232ad873ad5
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat May 26 09:53:13 2018 +0900

    n_tty: Fix stall at n_tty_receive_char_special().
    
    commit 3d63b7e4ae0dc5e02d28ddd2fa1f945defc68d81 upstream.
    
    syzbot is reporting stalls at n_tty_receive_char_special() [1]. This is
    because comparison is not working as expected since ldata->read_head can
    change at any moment. Mitigate this by explicitly masking with buffer size
    when checking condition for "while" loops.
    
    [1] https://syzkaller.appspot.com/bug?id=3d7481a346958d9469bebbeb0537d5f056bdd6e8
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+18df353d7540aa6b5467@syzkaller.appspotmail.com>
    Fixes: bc5a5e3f45d04784 ("n_tty: Don't wrap input buffer indices at buffer size")
    Cc: stable <stable@vger.kernel.org>
    Cc: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fde5e5c8ad905898cc32421a5dcdd59cc3cc475b
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Thu Jun 21 16:19:42 2018 +0300

    xhci: Fix kernel oops in trace_xhci_free_virt_device
    
    commit d850c1658328e757635a46763783c6fd56390dcb upstream.
    
    commit 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    set dev->udev pointer to NULL in xhci_free_dev(), it will cause kernel
    panic in trace_xhci_free_virt_device. This patch reimplement the trace
    function trace_xhci_free_virt_device, remove dev->udev dereference and
    added more useful parameters to show in the trace function,it also makes
    sure dev->udev is not NULL before calling trace_xhci_free_virt_device.
    This issue happened when xhci-hcd trace is enabled and USB devices hot
    plug test. Original use-after-free patch went to stable so this needs so
    be applied there as well.
    
    [ 1092.022457] usb 2-4: USB disconnect, device number 6
    [ 1092.092772] BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
    [ 1092.101694] PGD 0 P4D 0
    [ 1092.104601] Oops: 0000 [#1] SMP
    [ 1092.207734] Workqueue: usb_hub_wq hub_event
    [ 1092.212507] RIP: 0010:trace_event_raw_event_xhci_log_virt_dev+0x6c/0xf0
    [ 1092.220050] RSP: 0018:ffff8c252e883d28 EFLAGS: 00010086
    [ 1092.226024] RAX: ffff8c24af86fa84 RBX: 0000000000000003 RCX: ffff8c25255c2a01
    [ 1092.234130] RDX: 0000000000000000 RSI: 00000000aef55009 RDI: ffff8c252e883d28
    [ 1092.242242] RBP: ffff8c252550e2c0 R08: ffff8c24af86fa84 R09: 0000000000000a70
    [ 1092.250364] R10: 0000000000000a70 R11: 0000000000000000 R12: ffff8c251f21a000
    [ 1092.258468] R13: 000000000000000c R14: ffff8c251f21a000 R15: ffff8c251f432f60
    [ 1092.266572] FS:  0000000000000000(0000) GS:ffff8c252e880000(0000) knlGS:0000000000000000
    [ 1092.275757] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1092.282281] CR2: 0000000000000000 CR3: 0000000154209001 CR4: 00000000003606e0
    [ 1092.290384] Call Trace:
    [ 1092.293156]  <IRQ>
    [ 1092.295439]  xhci_free_virt_device.part.34+0x182/0x1a0
    [ 1092.301288]  handle_cmd_completion+0x7ac/0xfa0
    [ 1092.306336]  ? trace_event_raw_event_xhci_log_trb+0x6e/0xa0
    [ 1092.312661]  xhci_irq+0x3e8/0x1f60
    [ 1092.316524]  __handle_irq_event_percpu+0x75/0x180
    [ 1092.321876]  handle_irq_event_percpu+0x20/0x50
    [ 1092.326922]  handle_irq_event+0x36/0x60
    [ 1092.331273]  handle_edge_irq+0x6d/0x180
    [ 1092.335644]  handle_irq+0x16/0x20
    [ 1092.339417]  do_IRQ+0x41/0xc0
    [ 1092.342782]  common_interrupt+0xf/0xf
    [ 1092.346955]  </IRQ>
    
    Fixes: 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef271d2346a8535a9f3744c242c4a92a6386e956
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Jun 21 16:43:19 2018 +0300

    usb: typec: ucsi: Fix for incorrect status data issue
    
    commit 68816e16b4789f2d05e77b6dcb77564cf5d6a8d8 upstream.
    
    According to UCSI Specification, Connector Change Event only
    means a change in the Connector Status and Operation Mode
    fields of the STATUS data structure. So any other change
    should create another event.
    
    Unfortunately on some platforms the firmware acting as PPM
    (platform policy manager - usually embedded controller
    firmware) still does not report any other status changes if
    there is a connector change event. So if the connector power
    or data role was changed when a device was plugged to the
    connector, the driver does not get any indication about
    that. The port will show wrong roles if that happens.
    
    To fix the issue, always checking the data and power role
    together with a connector change event.
    
    Fixes: c1b0bc2dabfa ("usb: typec: Add support for UCSI interface")
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f55125880270e90b3dfcac774cbd43611fbf23b
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Jun 21 16:43:18 2018 +0300

    usb: typec: ucsi: acpi: Workaround for cache mode issue
    
    commit 1f9f9d168ce619608572b01771c47a41b15429e6 upstream.
    
    This fixes an issue where the driver fails with an error:
    
            ioremap error for 0x3f799000-0x3f79a000, requested 0x2, got 0x0
    
    On some platforms the UCSI ACPI mailbox SystemMemory
    Operation Region may be setup before the driver has been
    loaded. That will lead into the driver failing to map the
    mailbox region, as it has been already marked as write-back
    memory. acpi_os_ioremap() for x86 uses ioremap_cache()
    unconditionally.
    
    When the issue happens, the embedded controller has a
    pending query event for the UCSI notification right after
    boot-up which causes the operation region to be setup before
    UCSI driver has been loaded.
    
    The fix is to notify acpi core that the driver is about to
    access memory region which potentially overlaps with an
    operation region right before mapping it.
    acpi_release_memory() will check if the memory has already
    been setup (mapped) by acpi core, and deactivate it (unmap)
    if it has. The driver is then able to map the memory with
    ioremap_nocache() and set the memtype to uncached for the
    region.
    
    Reported-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Fixes: 8243edf44152 ("usb: typec: ucsi: Add ACPI driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba710ae7b73736021255479b3ed5927bcde5b2ae
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Jun 21 16:43:17 2018 +0300

    acpi: Add helper for deactivating memory region
    
    commit d2d2e3c46be5d6dd8001d0eebdf7cafb9bc7006b upstream.
    
    Sometimes memory resource may be overlapping with
    SystemMemory Operation Region by design, for example if the
    memory region is used as a mailbox for communication with a
    firmware in the system. One occasion of such mailboxes is
    USB Type-C Connector System Software Interface (UCSI).
    
    With regions like that, it is important that the driver is
    able to map the memory with the requirements it has. For
    example, the driver should be allowed to map the memory as
    non-cached memory. However, if the operation region has been
    accessed before the driver has mapped the memory, the memory
    has been marked as write-back by the time the driver is
    loaded. That means the driver will fail to map the memory
    if it expects non-cached memory.
    
    To work around the problem, introducing helper that the
    drivers can use to temporarily deactivate (unmap)
    SystemMemory Operation Regions that overlap with their
    IO memory.
    
    Fixes: 8243edf44152 ("usb: typec: ucsi: Add ACPI driver")
    Cc: stable@vger.kernel.org
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86c44bd95669943ad886319b7815cf30c5937017
Author: Peter Chen <peter.chen@nxp.com>
Date:   Tue Jun 12 09:53:01 2018 +0800

    usb: typec: tcpm: fix logbuffer index is wrong if _tcpm_log is re-entered
    
    commit d5a4f93511b7000183c0d528739b824752139f79 upstream.
    
    The port->logbuffer_head may be wrong if the two processes enters
    _tcpm_log at the mostly same time. The 2nd process enters _tcpm_log
    before the 1st process update the index, then the 2nd process will
    not allocate logbuffer, when the 2nd process tries to use log buffer,
    the index has already updated by the 1st process, so it will get
    NULL pointer for updated logbuffer, the error message like below:
    
            tcpci 0-0050: Log buffer index 6 is NULL
    
    Cc: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Jun Li <jun.li@nxp.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f557c6876e5402b022d147df56944839f1294f3
Author: William Wu <william.wu@rock-chips.com>
Date:   Mon May 21 18:12:00 2018 +0800

    usb: dwc2: fix the incorrect bitmaps for the ports of multi_tt hub
    
    commit 8760675932ddb614e83702117d36ea644050c609 upstream.
    
    The dwc2_get_ls_map() use ttport to reference into the
    bitmap if we're on a multi_tt hub. But the bitmaps index
    from 0 to (hub->maxchild - 1), while the ttport index from
    1 to hub->maxchild. This will cause invalid memory access
    when the number of ttport is hub->maxchild.
    
    Without this patch, I can easily meet a Kernel panic issue
    if connect a low-speed USB mouse with the max port of FE2.1
    multi-tt hub (1a40:0201) on rk3288 platform.
    
    Fixes: 9f9f09b048f5 ("usb: dwc2: host: Totally redo the microframe scheduler")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Minas Harutyunyan hminas@synopsys.com>
    Signed-off-by: William Wu <william.wu@rock-chips.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4c541363fbc73fe3329b2911e0dbcf0c5ed1ebd
Author: Karoly Pados <pados@pados.hu>
Date:   Sat Jun 9 13:26:08 2018 +0200

    USB: serial: cp210x: add Silicon Labs IDs for Windows Update
    
    commit 2f839823382748664b643daa73f41ee0cc01ced6 upstream.
    
    Silicon Labs defines alternative VID/PID pairs for some chips that when
    used will automatically install drivers for Windows users without manual
    intervention. Unfortunately, these IDs are not recognized by the Linux
    module, so using these IDs improves user experience on one platform but
    degrades it on Linux. This patch addresses this problem.
    
    Signed-off-by: Karoly Pados <pados@pados.hu>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5d06d6cc9435fd2f0425a8ddcd228f18cef7817
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jun 18 10:24:03 2018 +0200

    USB: serial: cp210x: add CESINEL device ids
    
    commit 24160628a34af962ac99f2f58e547ac3c4cbd26f upstream.
    
    Add device ids for CESINEL products.
    
    Reported-by: Carlos Barcala Lara <cabl@cesinel.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66147e5bebaa888379523b87486ca5301c2a6961
Author: Houston Yaroschoff <hstn@4ever3.net>
Date:   Mon Jun 11 12:39:09 2018 +0200

    usb: cdc_acm: Add quirk for Uniden UBC125 scanner
    
    commit 4a762569a2722b8a48066c7bacf0e1dc67d17fa1 upstream.
    
    Uniden UBC125 radio scanner has USB interface which fails to work
    with cdc_acm driver:
      usb 1-1.5: new full-speed USB device number 4 using xhci_hcd
      cdc_acm 1-1.5:1.0: Zero length descriptor references
      cdc_acm: probe of 1-1.5:1.0 failed with error -22
    
    Adding the NO_UNION_NORMAL quirk for the device fixes the issue:
      usb 1-4: new full-speed USB device number 15 using xhci_hcd
      usb 1-4: New USB device found, idVendor=1965, idProduct=0018
      usb 1-4: New USB device strings: Mfr=1, Product=2, SerialNumber=3
      usb 1-4: Product: UBC125XLT
      usb 1-4: Manufacturer: Uniden Corp.
      usb 1-4: SerialNumber: 0001
      cdc_acm 1-4:1.0: ttyACM0: USB ACM device
    
    `lsusb -v` of the device:
    
      Bus 001 Device 015: ID 1965:0018 Uniden Corporation
      Device Descriptor:
        bLength                18
        bDescriptorType         1
        bcdUSB               2.00
        bDeviceClass            2 Communications
        bDeviceSubClass         0
        bDeviceProtocol         0
        bMaxPacketSize0        64
        idVendor           0x1965 Uniden Corporation
        idProduct          0x0018
        bcdDevice            0.01
        iManufacturer           1 Uniden Corp.
        iProduct                2 UBC125XLT
        iSerial                 3 0001
        bNumConfigurations      1
        Configuration Descriptor:
          bLength                 9
          bDescriptorType         2
          wTotalLength           48
          bNumInterfaces          2
          bConfigurationValue     1
          iConfiguration          0
          bmAttributes         0x80
            (Bus Powered)
          MaxPower              500mA
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        0
            bAlternateSetting       0
            bNumEndpoints           1
            bInterfaceClass         2 Communications
            bInterfaceSubClass      2 Abstract (modem)
            bInterfaceProtocol      0 None
            iInterface              0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x87  EP 7 IN
              bmAttributes            3
                Transfer Type            Interrupt
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0008  1x 8 bytes
              bInterval              10
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        1
            bAlternateSetting       0
            bNumEndpoints           2
            bInterfaceClass        10 CDC Data
            bInterfaceSubClass      0 Unused
            bInterfaceProtocol      0
            iInterface              0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x81  EP 1 IN
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0040  1x 64 bytes
              bInterval               0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x02  EP 2 OUT
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0040  1x 64 bytes
              bInterval               0
      Device Status:     0x0000
        (Bus Powered)
    
    Signed-off-by: Houston Yaroschoff <hstn@4ever3.net>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
