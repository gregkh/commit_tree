commit 92905e331aea278665c4b27fbb13c4547a8bcbb0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 29 13:00:49 2017 +0200

    Linux 4.9.35

commit 855b08e57777f54a7f26563a3061a385f6d04ebc
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Fri Jun 16 09:36:35 2017 +0100

    brcmfmac: fix uninitialized warning in brcmf_usb_probe_phase2()
    
    commit 35abcd4f9f303ac4f10f99b3f7e993e5f2e6fa37 upstream.
    
    This fixes the following warning:
    
      drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c: In function
      'brcmf_usb_probe_phase2':
      drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c:1198:2:
      warning: 'devinfo' may be used uninitialized in this function
      [-Wmaybe-uninitialized]
        mutex_unlock(&devinfo->dev_init_lock);
    
    Fixes: 6d0507a777fb ("brcmfmac: add parameter to pass error code in firmware callback")
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Reported-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21eaaa76b701df5becdc6163cb88eeb7915ba629
Author: Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>
Date:   Mon Mar 20 20:15:53 2017 +0300

    jump label: fix passing kbuild_cflags when checking for asm goto support
    
    commit 7292ae3d5a18fb922be496e6bb687647193569b4 upstream.
    
    The latest change of asm goto support check added passing of KBUILD_CFLAGS
    to compiler.  When these flags reference gcc plugins that are not built yet,
    the check fails.
    
    When one runs "make bzImage" followed by "make modules", the kernel is always
    built with HAVE_JUMP_LABEL disabled, while the modules are built depending on
    CONFIG_JUMP_LABEL.  If HAVE_JUMP_LABEL macro happens to be different, modules
    are built with undefined references, e.g.:
    
    ERROR: "static_key_slow_inc" [net/netfilter/xt_TEE.ko] undefined!
    ERROR: "static_key_slow_dec" [net/netfilter/xt_TEE.ko] undefined!
    ERROR: "static_key_slow_dec" [net/netfilter/nft_meta.ko] undefined!
    ERROR: "static_key_slow_inc" [net/netfilter/nft_meta.ko] undefined!
    ERROR: "nf_hooks_needed" [net/netfilter/ipvs/ip_vs.ko] undefined!
    ERROR: "nf_hooks_needed" [net/ipv6/ipv6.ko] undefined!
    ERROR: "static_key_count" [net/ipv6/ipv6.ko] undefined!
    ERROR: "static_key_slow_inc" [net/ipv6/ipv6.ko] undefined!
    
    This change moves the check before all these references are added
    to KBUILD_CFLAGS.  This is correct because subsequent KBUILD_CFLAGS
    modifications are not relevant to this check.
    
    Reported-by: Anton V. Boyarshinov <boyarsh@altlinux.org>
    Fixes: 35f860f9ba6a ("jump label: pass kbuild_cflags when checking for asm goto support")
    Signed-off-by: Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>
    Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: David Lin <dtwlin@google.com>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffa96c1a6afe251d667ae9a9d83f1ef87c3b029e
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue May 30 16:21:51 2017 +0100

    net: phy: fix marvell phy status reading
    
    commit 898805e0cdf7fd860ec21bf661d3a0285a3defbd upstream.
    
    The Marvell driver incorrectly provides phydev->lp_advertising as the
    logical and of the link partner's advert and our advert.  This is
    incorrect - this field is supposed to store the link parter's unmodified
    advertisment.
    
    This allows ethtool to report the correct link partner auto-negotiation
    status.
    
    Fixes: be937f1f89ca ("Marvell PHY m88e1111 driver fix")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5da6415e427beaca48ae4f0d7385e2bcdba5b308
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Mon Apr 17 01:38:05 2017 +0200

    spi: double time out tolerance
    
    commit 833bfade96561216aa2129516a5926a0326860a2 upstream.
    
    The generic SPI code calculates how long the issued transfer would take
    and adds 100ms in addition to the timeout as tolerance. On my 500 MHz
    Lantiq Mips SoC I am getting timeouts from the SPI like this when the
    system boots up:
    
    m25p80 spi32766.4: SPI transfer timed out
    blk_update_request: I/O error, dev mtdblock3, sector 2
    SQUASHFS error: squashfs_read_data failed to read block 0x6e
    
    After increasing the tolerance for the timeout to 200ms I haven't seen
    these SPI transfer time outs any more.
    The Lantiq SPI driver in use here has an extra work queue in between,
    which gets triggered when the controller send the last word and the
    hardware FIFOs used for reading and writing are only 8 words long.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25c7794ed046e9190200983e330f221170cb2b0a
Author: Matthias Reichl <hias@horus.com>
Date:   Mon Feb 20 20:01:16 2017 +0100

    dmaengine: bcm2835: Fix cyclic DMA period splitting
    
    commit 2201ac6129fa162ac24da089a034bb0971648ebb upstream.
    
    The code responsible for splitting periods into chunks that
    can be handled by the DMA controller missed to update total_len,
    the number of bytes processed in the current period, when there
    are more chunks to follow.
    
    Therefore total_len was stuck at 0 and the code didn't work at all.
    This resulted in a wrong control block layout and audio issues because
    the cyclic DMA callback wasn't executing on period boundaries.
    
    Fix this by adding the missing total_len update.
    
    Signed-off-by: Matthias Reichl <hias@horus.com>
    Signed-off-by: Martin Sperl <kernel@martin.sperl.org>
    Tested-by: Clive Messer <clive.messer@digitaldreamtime.co.uk>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81135c71bde3346a39cec07b4a0b5de1f5fabdf1
Author: Yendapally Reddy Dhananjaya Reddy <yendapally.reddy@broadcom.com>
Date:   Wed Feb 8 17:14:26 2017 -0500

    net: phy: Initialize mdio clock at probe function
    
    commit bb1a619735b4660f21bce3e728b937640024b4ad upstream.
    
    USB PHYs need the MDIO clock divisor enabled earlier to work.
    Initialize mdio clock divisor in probe function. The ext bus
    bit available in the same register will be used by mdio mux
    to enable external mdio.
    
    Signed-off-by: Yendapally Reddy Dhananjaya Reddy <yendapally.reddy@broadcom.com>
    Fixes: ddc24ae1 ("net: phy: Broadcom iProc MDIO bus driver")
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jon Mason <jon.mason@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 948c4f17ab7ed9342e3dfdff88bb31266fe72790
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Thu Feb 2 10:57:40 2017 +0100

    rt2x00: avoid introducing a USB dependency in the rt2x00lib module
    
    commit 6232c17438ed01f43665197db5a98a4a4f77ef47 upstream.
    
    As reported by Felix:
    
    Though protected by an ifdef, introducing an usb symbol dependency in
    the rt2x00lib module is a major inconvenience for distributions that
    package kernel modules split into individual packages.
    
    Get rid of this unnecessary dependency by calling the usb related
    function from a more suitable place.
    
    Cc: Vishal Thanki <vishalthanki@gmail.com>
    Reported-by: Felix Fietkau <nbd@nbd.name>
    Fixes: 8b4c0009313f ("rt2x00usb: Use usb anchor to manage URB")
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 225969acc0f15aa2bc34602889ce040d4b51f2d4
Author: William Wu <william.wu@rock-chips.com>
Date:   Tue Apr 25 17:45:48 2017 +0800

    usb: gadget: f_fs: avoid out of bounds access on comp_desc
    
    commit b7f73850bb4fac1e2209a4dd5e636d39be92f42c upstream.
    
    Companion descriptor is only used for SuperSpeed endpoints,
    if the endpoints are HighSpeed or FullSpeed, the Companion
    descriptor will not allocated, so we can only access it if
    gadget is SuperSpeed.
    
    I can reproduce this issue on Rockchip platform rk3368 SoC
    which supports USB 2.0, and use functionfs for ADB. Kernel
    build with CONFIG_KASAN=y and CONFIG_SLUB_DEBUG=y report
    the following BUG:
    
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in ffs_func_set_alt+0x224/0x3a0 at addr ffffffc0601f6509
    Read of size 1 by task swapper/0/0
    ============================================================================
    BUG kmalloc-256 (Not tainted): kasan: bad access detected
    ----------------------------------------------------------------------------
    
    Disabling lock debugging due to kernel taint
    INFO: Allocated in ffs_func_bind+0x52c/0x99c age=1275 cpu=0 pid=1
    alloc_debug_processing+0x128/0x17c
    ___slab_alloc.constprop.58+0x50c/0x610
    __slab_alloc.isra.55.constprop.57+0x24/0x34
    __kmalloc+0xe0/0x250
    ffs_func_bind+0x52c/0x99c
    usb_add_function+0xd8/0x1d4
    configfs_composite_bind+0x48c/0x570
    udc_bind_to_driver+0x6c/0x170
    usb_udc_attach_driver+0xa4/0xd0
    gadget_dev_desc_UDC_store+0xcc/0x118
    configfs_write_file+0x1a0/0x1f8
    __vfs_write+0x64/0x174
    vfs_write+0xe4/0x200
    SyS_write+0x68/0xc8
    el0_svc_naked+0x24/0x28
    INFO: Freed in inode_doinit_with_dentry+0x3f0/0x7c4 age=1275 cpu=7 pid=247
    ...
    Call trace:
    [<ffffff900808aab4>] dump_backtrace+0x0/0x230
    [<ffffff900808acf8>] show_stack+0x14/0x1c
    [<ffffff90084ad420>] dump_stack+0xa0/0xc8
    [<ffffff90082157cc>] print_trailer+0x188/0x198
    [<ffffff9008215948>] object_err+0x3c/0x4c
    [<ffffff900821b5ac>] kasan_report+0x324/0x4dc
    [<ffffff900821aa38>] __asan_load1+0x24/0x50
    [<ffffff90089eb750>] ffs_func_set_alt+0x224/0x3a0
    [<ffffff90089d3760>] composite_setup+0xdcc/0x1ac8
    [<ffffff90089d7394>] android_setup+0x124/0x1a0
    [<ffffff90089acd18>] _setup+0x54/0x74
    [<ffffff90089b6b98>] handle_ep0+0x3288/0x4390
    [<ffffff90089b9b44>] dwc_otg_pcd_handle_out_ep_intr+0x14dc/0x2ae4
    [<ffffff90089be85c>] dwc_otg_pcd_handle_intr+0x1ec/0x298
    [<ffffff90089ad680>] dwc_otg_pcd_irq+0x10/0x20
    [<ffffff9008116328>] handle_irq_event_percpu+0x124/0x3ac
    [<ffffff9008116610>] handle_irq_event+0x60/0xa0
    [<ffffff900811af30>] handle_fasteoi_irq+0x10c/0x1d4
    [<ffffff9008115568>] generic_handle_irq+0x30/0x40
    [<ffffff90081159b4>] __handle_domain_irq+0xac/0xdc
    [<ffffff9008080e9c>] gic_handle_irq+0x64/0xa4
    ...
    Memory state around the buggy address:
      ffffffc0601f6400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ffffffc0601f6480: 00 00 00 00 00 00 00 00 00 00 06 fc fc fc fc fc
     >ffffffc0601f6500: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
                           ^
      ffffffc0601f6580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffffffc0601f6600: fc fc fc fc fc fc fc fc 00 00 00 00 00 00 00 00
    ==================================================================
    
    Signed-off-by: William Wu <william.wu@rock-chips.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Jerry Zhang <zhangjerry@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5306119473b2dceb63de2e1aa0e6b81de432d039
Author: Joël Esponde <joel.esponde@honeywell.com>
Date:   Wed Nov 23 12:47:40 2016 +0100

    mtd: spi-nor: fix spansion quad enable
    
    commit 807c16253319ee6ccf8873ae64f070f7eb532cd5 upstream.
    
    With the S25FL127S nor flash part, each writing to the configuration
    register takes hundreds of ms. During that  time, no more accesses to
    the flash should be done (even reads).
    
    This commit adds a wait loop after the register writing until the flash
    finishes its work.
    
    This issue could make rootfs mounting fail when the latter was done too
    much closely to this quad enable bit setting step. And in this case, a
    driver as UBIFS may try to recover the filesystem and may broke it
    completely.
    
    Signed-off-by: Joël Esponde <joel.esponde@honeywell.com>
    Signed-off-by: Cyrille Pitchen <cyrille.pitchen@atmel.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcd015f733a74552eeefc5d70f55125c33eaa5d2
Author: Tobias Wolf <dev-NTEO@vplace.de>
Date:   Wed Nov 23 10:40:07 2016 +0100

    of: Add check to of_scan_flat_dt() before accessing initial_boot_params
    
    commit 3ec754410cb3e931a6c4920b1a150f21a94a2bf4 upstream.
    
    An empty __dtb_start to __dtb_end section might result in
    initial_boot_params being null for arch/mips/ralink. This showed that the
    boot process hangs indefinitely in of_scan_flat_dt().
    
    Signed-off-by: Tobias Wolf <dev-NTEO@vplace.de>
    Cc: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/14605/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2060387421109ac389dd209355918b566fc6f84
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jun 15 00:12:24 2017 +0100

    rxrpc: Fix several cases where a padded len isn't checked in ticket decode
    
    commit 5f2f97656ada8d811d3c1bef503ced266fcd53a0 upstream.
    
    This fixes CVE-2017-7482.
    
    When a kerberos 5 ticket is being decoded so that it can be loaded into an
    rxrpc-type key, there are several places in which the length of a
    variable-length field is checked to make sure that it's not going to
    overrun the available data - but the data is padded to the nearest
    four-byte boundary and the code doesn't check for this extra.  This could
    lead to the size-remaining variable wrapping and the data pointer going
    over the end of the buffer.
    
    Fix this by making the various variable-length data checks use the padded
    length.
    
    Reported-by: 石磊 <shilei-c@360.cn>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.c.dionne@auristor.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 581659a878200a4e2c15548e3df6a7b82e170cb8
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Jun 15 11:12:28 2017 -0400

    drm/amdgpu: adjust default display clock
    
    commit 52b482b0f4fd6d5267faf29fe91398e203f3c230 upstream.
    
    Increase the default display clock on newer asics to
    accomodate some high res modes with really high refresh
    rates.
    
    bug: https://bugs.freedesktop.org/show_bug.cgi?id=93826
    Acked-by: Chunming Zhou <david1.zhou@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 217e035d5120de80a6b2224878e157ebb4a390b8
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Jun 15 10:55:11 2017 -0400

    drm/amdgpu/atom: fix ps allocation size for EnableDispPowerGating
    
    commit 05b4017b37f1fce4b7185f138126dd8decdb381f upstream.
    
    We were using the wrong structure which lead to an overflow
    on some boards.
    
    bug: https://bugs.freedesktop.org/show_bug.cgi?id=101387
    Acked-by: Chunming Zhou <david1.zhou@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4b8d1e8441003ee4e3e68f5cc0296e8e5d5e61f
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jun 19 15:59:58 2017 -0400

    drm/radeon: add a quirk for Toshiba Satellite L20-183
    
    commit acfd6ee4fa7ebeee75511825fe02be3f7ac1d668 upstream.
    
    Fixes resume from suspend.
    
    bug: https://bugzilla.kernel.org/show_bug.cgi?id=196121
    Reported-by: Przemek <soprwa@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61ea7c2817bdcdef0f5240b180d1cc073a2c4388
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jun 19 12:52:47 2017 -0400

    drm/radeon: add a PX quirk for another K53TK variant
    
    commit 4eb59793cca00b0e629b6d55b5abb5acb82c5868 upstream.
    
    Disable PX on these systems.
    
    bug: https://bugs.freedesktop.org/show_bug.cgi?id=101491
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3900f24aa6fac681b2c141a6e359c0cd1fed9676
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Wed Jun 7 20:29:50 2017 -0700

    iscsi-target: Reject immediate data underflow larger than SCSI transfer length
    
    commit abb85a9b512e8ca7ad04a5a8a6db9664fe644974 upstream.
    
    When iscsi WRITE underflow occurs there are two different scenarios
    that can happen.
    
    Normally in practice, when an EDTL vs. SCSI CDB TRANSFER LENGTH
    underflow is detected, the iscsi immediate data payload is the
    smaller SCSI CDB TRANSFER LENGTH.
    
    That is, when a host fabric LLD is using a fixed size EDTL for
    a specific control CDB, the SCSI CDB TRANSFER LENGTH and actual
    SCSI payload ends up being smaller than EDTL.  In iscsi, this
    means the received iscsi immediate data payload matches the
    smaller SCSI CDB TRANSFER LENGTH, because there is no more
    SCSI payload to accept beyond SCSI CDB TRANSFER LENGTH.
    
    However, it's possible for a malicous host to send a WRITE
    underflow where EDTL is larger than SCSI CDB TRANSFER LENGTH,
    but incoming iscsi immediate data actually matches EDTL.
    
    In the wild, we've never had a iscsi host environment actually
    try to do this.
    
    For this special case, it's wrong to truncate part of the
    control CDB payload and continue to process the command during
    underflow when immediate data payload received was larger than
    SCSI CDB TRANSFER LENGTH, so go ahead and reject and drop the
    bogus payload as a defensive action.
    
    Note this potential bug was originally relaxed by the following
    for allowing WRITE underflow in MSFT FCP host environments:
    
       commit c72c5250224d475614a00c1d7e54a67f77cd3410
       Author: Roland Dreier <roland@purestorage.com>
       Date:   Wed Jul 22 15:08:18 2015 -0700
    
          target: allow underflow/overflow for PR OUT etc. commands
    
    Cc: Roland Dreier <roland@purestorage.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 463440e6de4a53e9441c5aadb027d4ab5ea2a3c8
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Sat Jun 3 05:35:47 2017 -0700

    iscsi-target: Fix delayed logout processing greater than SECONDS_FOR_LOGOUT_COMP
    
    commit 105fa2f44e504c830697b0c794822112d79808dc upstream.
    
    This patch fixes a BUG() in iscsit_close_session() that could be
    triggered when iscsit_logout_post_handler() execution from within
    tx thread context was not run for more than SECONDS_FOR_LOGOUT_COMP
    (15 seconds), and the TCP connection didn't already close before
    then forcing tx thread context to automatically exit.
    
    This would manifest itself during explicit logout as:
    
    [33206.974254] 1 connection(s) still exist for iSCSI session to iqn.1993-08.org.debian:01:3f5523242179
    [33206.980184] INFO: NMI handler (kgdb_nmi_handler) took too long to run: 2100.772 msecs
    [33209.078643] ------------[ cut here ]------------
    [33209.078646] kernel BUG at drivers/target/iscsi/iscsi_target.c:4346!
    
    Normally when explicit logout attempt fails, the tx thread context
    exits and iscsit_close_connection() from rx thread context does the
    extra cleanup once it detects conn->conn_logout_remove has not been
    cleared by the logout type specific post handlers.
    
    To address this special case, if the logout post handler in tx thread
    context detects conn->tx_thread_active has already been cleared, simply
    return and exit in order for existing iscsit_close_connection()
    logic from rx thread context do failed logout cleanup.
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Tested-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Tested-by: Gary Guo <ghg@datera.io>
    Tested-by: Chu Yuan Lin <cyl@datera.io>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f576d53d854b336affc844c616055b518e53bff
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Fri Jun 2 20:00:17 2017 -0700

    target: Fix kref->refcount underflow in transport_cmd_finish_abort
    
    commit 73d4e580ccc5c3e05cea002f18111f66c9c07034 upstream.
    
    This patch fixes a se_cmd->cmd_kref underflow during CMD_T_ABORTED
    when a fabric driver drops it's second reference from below the
    target_core_tmr.c based callers of transport_cmd_finish_abort().
    
    Recently with the conversion of kref to refcount_t, this bug was
    manifesting itself as:
    
    [705519.601034] refcount_t: underflow; use-after-free.
    [705519.604034] INFO: NMI handler (kgdb_nmi_handler) took too long to run: 20116.512 msecs
    [705539.719111] ------------[ cut here ]------------
    [705539.719117] WARNING: CPU: 3 PID: 26510 at lib/refcount.c:184 refcount_sub_and_test+0x33/0x51
    
    Since the original kref atomic_t based kref_put() didn't check for
    underflow and only invoked the final callback when zero was reached,
    this bug did not manifest in practice since all se_cmd memory is
    using preallocated tags.
    
    To address this, go ahead and propigate the existing return from
    transport_put_cmd() up via transport_cmd_finish_abort(), and
    change transport_cmd_finish_abort() + core_tmr_handle_tas_abort()
    callers to only do their local target_put_sess_cmd() if necessary.
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Tested-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Himanshu Madhani <himanshu.madhani@qlogic.com>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Tested-by: Gary Guo <ghg@datera.io>
    Tested-by: Chu Yuan Lin <cyl@datera.io>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99f66b5182a4f3d89563634f2fe156d4629b9c10
Author: Will Deacon <will@kernel.org>
Date:   Thu Jun 8 16:44:22 2017 -0700

    arm64/vdso: Fix nsec handling for CLOCK_MONOTONIC_RAW
    
    commit dbb236c1ceb697a559e0694ac4c9e7b9131d0b16 upstream.
    
    Recently vDSO support for CLOCK_MONOTONIC_RAW was added in
    49eea433b326 ("arm64: Add support for CLOCK_MONOTONIC_RAW in
    clock_gettime() vDSO"). Noticing that the core timekeeping code
    never set tkr_raw.xtime_nsec, the vDSO implementation didn't
    bother exposing it via the data page and instead took the
    unshifted tk->raw_time.tv_nsec value which was then immediately
    shifted left in the vDSO code.
    
    Unfortunately, by accellerating the MONOTONIC_RAW clockid, it
    uncovered potential 1ns time inconsistencies caused by the
    timekeeping core not handing sub-ns resolution.
    
    Now that the core code has been fixed and is actually setting
    tkr_raw.xtime_nsec, we need to take that into account in the
    vDSO by adding it to the shifted raw_time value, in order to
    fix the user-visible inconsistency. Rather than do that at each
    use (and expand the data page in the process), instead perform
    the shift/addition operation when populating the data page and
    remove the shift from the vDSO code entirely.
    
    [jstultz: minor whitespace tweak, tried to improve commit
     message to make it more clear this fixes a regression]
    Reported-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Daniel Mentz <danielmentz@google.com>
    Acked-by: Kevin Brodsky <kevin.brodsky@arm.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-4-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a53bfdda06ac114c42796b4193aee10a8108bca1
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:21 2017 -0700

    time: Fix CLOCK_MONOTONIC_RAW sub-nanosecond accounting
    
    commit 3d88d56c5873f6eebe23e05c3da701960146b801 upstream.
    
    Due to how the MONOTONIC_RAW accumulation logic was handled,
    there is the potential for a 1ns discontinuity when we do
    accumulations. This small discontinuity has for the most part
    gone un-noticed, but since ARM64 enabled CLOCK_MONOTONIC_RAW
    in their vDSO clock_gettime implementation, we've seen failures
    with the inconsistency-check test in kselftest.
    
    This patch addresses the issue by using the same sub-ns
    accumulation handling that CLOCK_MONOTONIC uses, which avoids
    the issue for in-kernel users.
    
    Since the ARM64 vDSO implementation has its own clock_gettime
    calculation logic, this patch reduces the frequency of errors,
    but failures are still seen. The ARM64 vDSO will need to be
    updated to include the sub-nanosecond xtime_nsec values in its
    calculation for this issue to be completely fixed.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Daniel Mentz <danielmentz@google.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Kevin Brodsky <kevin.brodsky@arm.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-3-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02a37ccd6347897b9227c8ff7f11526321ec2048
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    commit ceea5e3771ed2378668455fa21861bead7504df5 upstream.
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c81d034bd09aeac70ad0e0a51d281659fff304a8
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Jun 12 12:47:34 2017 +0100

    brcmfmac: unbind all devices upon failure in firmware callback
    
    commit 7a51461fc2da82a6c565a3ee65c41c197f28225d upstream.
    
    When request firmware fails, brcmf_ops_sdio_remove is being called and
    brcmf_bus freed. In such circumstancies if you do a suspend/resume cycle
    the kernel hangs on resume due a NULL pointer dereference in resume
    function. So in brcmf_sdio_firmware_callback() we need to unbind the
    driver from both sdio_func devices when firmware load failure is indicated.
    
    Tested-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba2d8d67875c67fdbd676a3990bbf99064826b03
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Jun 12 12:47:33 2017 +0100

    brcmfmac: use firmware callback upon failure to load
    
    commit 03fb0e8393fae8ebb6710a99387853ed0becbc8e upstream.
    
    When firmware loading failed the code used to unbind the device provided
    by the calling code. However, for the sdio driver two devices are bound
    and both need to be released upon failure. The callback has been extended
    with parameter to pass error code so add that in this commit upon firmware
    loading failure.
    
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dd15bd62221be131279340d2b91a3b993365a72
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Jun 12 12:47:32 2017 +0100

    brcmfmac: add parameter to pass error code in firmware callback
    
    commit 6d0507a777fbc533f7f1bf5664a81982dd50dece upstream.
    
    Extend the parameters in the firmware callback so it can be called
    upon success and failure. This allows the caller to properly clear
    all resources in the failure path. Right now the error code is
    always zero, ie. success.
    
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20d8f785f9749a9fb4522ff255a7df60b2314cb2
Author: Daniel Drake <drake@endlessm.com>
Date:   Mon Jun 19 19:48:52 2017 -0700

    Input: i8042 - add Fujitsu Lifebook AH544 to notimeout list
    
    commit 817ae460c784f32cd45e60b2b1b21378c3c6a847 upstream.
    
    Without this quirk, the touchpad is not responsive on this product, with
    the following message repeated in the logs:
    
     psmouse serio1: bad data from KBC - timeout
    
    Add it to the notimeout list alongside other similar Fujitsu laptops.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eaa481dfb4c405abe02000662ad4e1d7c48f742
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Wed Jun 14 00:12:00 2017 +0530

    powerpc/64s: Handle data breakpoints in Radix mode
    
    commit d89ba5353f301971dd7d2f9fdf25c4432728f38e upstream.
    
    On Power9, trying to use data breakpoints throws the splat shown
    below. This is because the check for a data breakpoint in DSISR is in
    do_hash_page(), which is not called when in Radix mode.
    
      Unable to handle kernel paging request for data at address 0xc000000000e19218
      Faulting instruction address: 0xc0000000001155e8
      cpu 0x0: Vector: 300 (Data Access) at [c0000000ef1e7b20]
      pc: c0000000001155e8: find_pid_ns+0x48/0xe0
      lr: c000000000116ac4: find_task_by_vpid+0x44/0x90
      sp: c0000000ef1e7da0
      msr: 9000000000009033
      dar: c000000000e19218
      dsisr: 400000
    
    Move the check to handle_page_fault() so as to catch data breakpoints
    in both Hash and Radix MMU modes.
    
    We have to change the check in do_hash_page() against 0xa410 to use
    0xa450, so as to include the value of (DSISR_DABRMATCH << 16).
    
    There are two sites that call handle_page_fault() when in Radix, both
    already pass DSISR in r4.
    
    Fixes: caca285e5ab4 ("powerpc/mm/radix: Use STD_MMU_64 to properly isolate hash related code")
    Reported-by: Shriya R. Kulkarni <shriykul@in.ibm.com>
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    [mpe: Fix the fall-through case on hash, we need to reload DSISR]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 414f51ceb6ffbdd66e185357e40d59832cc33433
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Jun 1 16:18:15 2017 +0530

    powerpc/kprobes: Pause function_graph tracing during jprobes handling
    
    commit a9f8553e935f26cb5447f67e280946b0923cd2dc upstream.
    
    This fixes a crash when function_graph and jprobes are used together.
    This is essentially commit 237d28db036e ("ftrace/jprobes/x86: Fix
    conflict between jprobes and function graph tracing"), but for powerpc.
    
    Jprobes breaks function_graph tracing since the jprobe hook needs to use
    jprobe_return(), which never returns back to the hook, but instead to
    the original jprobe'd function. The solution is to momentarily pause
    function_graph tracing before invoking the jprobe hook and re-enable it
    when returning back to the original jprobe'd function.
    
    Fixes: 6794c78243bf ("powerpc64: port of the function graph tracer")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f719f20abe2a52fff61ffc3b230308279b841475
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue Jun 13 04:31:16 2017 -0500

    signal: Only reschedule timers on signals timers have sent
    
    commit 57db7e4a2d92c2d3dfbca4ef8057849b2682436b upstream.
    
    Thomas Gleixner  wrote:
    > The CRIU support added a 'feature' which allows a user space task to send
    > arbitrary (kernel) signals to itself. The changelog says:
    >
    >   The kernel prevents sending of siginfo with positive si_code, because
    >   these codes are reserved for kernel.  I think we can allow a task to
    >   send such a siginfo to itself.  This operation should not be dangerous.
    >
    > Quite contrary to that claim, it turns out that it is outright dangerous
    > for signals with info->si_code == SI_TIMER. The following code sequence in
    > a user space task allows to crash the kernel:
    >
    >    id = timer_create(CLOCK_XXX, ..... signo = SIGX);
    >    timer_set(id, ....);
    >    info->si_signo = SIGX;
    >    info->si_code = SI_TIMER:
    >    info->_sifields._timer._tid = id;
    >    info->_sifields._timer._sys_private = 2;
    >    rt_[tg]sigqueueinfo(..., SIGX, info);
    >    sigemptyset(&sigset);
    >    sigaddset(&sigset, SIGX);
    >    rt_sigtimedwait(sigset, info);
    >
    > For timers based on CLOCK_PROCESS_CPUTIME_ID, CLOCK_THREAD_CPUTIME_ID this
    > results in a kernel crash because sigwait() dequeues the signal and the
    > dequeue code observes:
    >
    >   info->si_code == SI_TIMER && info->_sifields._timer._sys_private != 0
    >
    > which triggers the following callchain:
    >
    >  do_schedule_next_timer() -> posix_cpu_timer_schedule() -> arm_timer()
    >
    > arm_timer() executes a list_add() on the timer, which is already armed via
    > the timer_set() syscall. That's a double list add which corrupts the posix
    > cpu timer list. As a consequence the kernel crashes on the next operation
    > touching the posix cpu timer list.
    >
    > Posix clocks which are internally implemented based on hrtimers are not
    > affected by this because hrtimer_start() can handle already armed timers
    > nicely, but it's a reliable way to trigger the WARN_ON() in
    > hrtimer_forward(), which complains about calling that function on an
    > already armed timer.
    
    This problem has existed since the posix timer code was merged into
    2.5.63. A few releases earlier in 2.5.60 ptrace gained the ability to
    inject not just a signal (which linux has supported since 1.0) but the
    full siginfo of a signal.
    
    The core problem is that the code will reschedule in response to
    signals getting dequeued not just for signals the timers sent but
    for other signals that happen to a si_code of SI_TIMER.
    
    Avoid this confusion by testing to see if the queued signal was
    preallocated as all timer signals are preallocated, and so far
    only the timer code preallocates signals.
    
    Move the check for if a timer needs to be rescheduled up into
    collect_signal where the preallocation check must be performed,
    and pass the result back to dequeue_signal where the code reschedules
    timers.   This makes it clear why the code cares about preallocated
    timers.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    History Tree: https://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    Reference: 66dd34ad31e5 ("signal: allow to send any siginfo to itself")
    Reference: 1669ce53e2ff ("Add PTRACE_GETSIGINFO and PTRACE_SETSIGINFO")
    Fixes: db8b50ba75f2 ("[PATCH] POSIX clocks & timers")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99afebe8fef928457b931f2d596168240ea5e328
Author: Sebastian Parschauer <sparschauer@suse.de>
Date:   Tue Jun 6 13:53:13 2017 +0200

    HID: Add quirk for Dell PIXART OEM mouse
    
    commit 3db28271f0feae129262d30e41384a7c4c767987 upstream.
    
    This mouse is also known under other IDs. It needs the quirk
    ALWAYS_POLL or will disconnect in runlevel 1 or 3.
    
    Signed-off-by: Sebastian Parschauer <sparschauer@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdf300d6105d8d95cb7821476cd84c47d0192623
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Mon Jun 19 19:46:00 2017 +0530

    cxgb4: notify uP to route ctrlq compl to rdma rspq
    
    commit dec6b33163d24e2c19ba521c89fffbaab53ae986 upstream.
    
    During the module initialisation there is a possible race
    (basically race between uld and lld) where neither the uld
    nor lld notifies the uP about where to route the ctrl queue
    completions. LLD skips notifying uP as the rdma queues were
    not created by then (will leave it to ULD to notify the uP).
    As the ULD comes up, it also skips notifying the uP as the
    flag FULL_INIT_DONE is not set yet (ULD assumes that the
    interface is not up yet).
    
    Consequently, this race between uld and lld leaves uP
    unnotified about where to send the ctrl queue completions
    to, leading to iwarp RI_RES WR failure.
    
    Here is the race:
    
    CPU 0                                   CPU1
    
    - allocates nic rx queus
    - t4_sge_alloc_ctrl_txq()
    (if rdma rsp queues exists,
    tell uP to route ctrl queue
    compl to rdma rspq)
                                    - acquires the mutex_lock
                                    - allocates rdma response queues
                                    - if FULL_INIT_DONE set,
                                      tell uP to route ctrl queue compl
                                      to rdma rspq
                                    - relinquishes mutex_lock
    - acquires the mutex_lock
    - enable_rx()
    - set FULL_INIT_DONE
    - relinquishes mutex_lock
    
    This patch fixes the above issue.
    
    Fixes: e7519f9926f1('cxgb4: avoid enabling napi twice to the same queue')
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Acked-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb6dc831b5cfdf8faa9255d6dd7b9b1b1265921d
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Tue Jun 6 16:58:58 2017 -0700

    CIFS: Improve readdir verbosity
    
    commit dcd87838c06f05ab7650b249ebf0d5b57ae63e1e upstream.
    
    Downgrade the loglevel for SMB2 to prevent filling the log
    with messages if e.g. readdir was interrupted. Also make SMB2
    and SMB1 codepaths do the same logging during readdir.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <smfrench@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f1527e359f4245bfaf9c3047427f3a2abcdb508
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Jun 6 16:47:22 2017 +1000

    KVM: PPC: Book3S HV: Context-switch EBB registers properly
    
    commit ca8efa1df1d15a1795a2da57f9f6aada6ed6b946 upstream.
    
    This adds code to save the values of three SPRs (special-purpose
    registers) used by userspace to control event-based branches (EBBs),
    which are essentially interrupts that get delivered directly to
    userspace.  These registers are loaded up with guest values when
    entering the guest, and their values are saved when exiting the
    guest, but we were not saving the host values and restoring them
    before going back to userspace.
    
    On POWER8 this would only affect userspace programs which explicitly
    request the use of EBBs and also use the KVM_RUN ioctl, since the
    only source of EBBs on POWER8 is the PMU, and there is an explicit
    enable bit in the PMU registers (and those PMU registers do get
    properly context-switched between host and guest).  On POWER9 there
    is provision for externally-generated EBBs, and these are not subject
    to the control in the PMU registers.
    
    Since these registers only affect userspace, we can save them when
    we first come in from userspace and restore them before returning to
    userspace, rather than saving/restoring the host values on every
    guest entry/exit.  Similarly, we don't need to worry about their
    values on offline secondary threads since they execute in the context
    of the idle task, which never executes in userspace.
    
    Fixes: b005255e12a3 ("KVM: PPC: Book3S HV: Context-switch new POWER8 SPRs", 2014-01-08)
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 468aa930c0a299f07ee449fd9c204d48852af372
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu Jun 15 16:10:27 2017 +1000

    KVM: PPC: Book3S HV: Preserve userspace HTM state properly
    
    commit 46a704f8409f79fd66567ad3f8a7304830a84293 upstream.
    
    If userspace attempts to call the KVM_RUN ioctl when it has hardware
    transactional memory (HTM) enabled, the values that it has put in the
    HTM-related SPRs TFHAR, TFIAR and TEXASR will get overwritten by
    guest values.  To fix this, we detect this condition and save those
    SPR values in the thread struct, and disable HTM for the task.  If
    userspace goes to access those SPRs or the HTM facility in future,
    a TM-unavailable interrupt will occur and the handler will reload
    those SPRs and re-enable HTM.
    
    If userspace has started a transaction and suspended it, we would
    currently lose the transactional state in the guest entry path and
    would almost certainly get a "TM Bad Thing" interrupt, which would
    cause the host to crash.  To avoid this, we detect this case and
    return from the KVM_RUN ioctl with an EINVAL error, with the KVM
    exit reason set to KVM_EXIT_FAIL_ENTRY.
    
    Fixes: b005255e12a3 ("KVM: PPC: Book3S HV: Context-switch new POWER8 SPRs", 2014-01-08)
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df3a787b3a71ec9dffddad9704e28a809fa9fdc7
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Mon Jun 19 08:02:28 2017 +0200

    KVM: s390: gaccess: fix real-space designation asce handling for gmap shadows
    
    commit addb63c18a0d52a9ce2611d039f981f7b6148d2b upstream.
    
    For real-space designation asces the asce origin part is only a token.
    The asce token origin must not be used to generate an effective
    address for storage references. This however is erroneously done
    within kvm_s390_shadow_tables().
    
    Furthermore within the same function the wrong parts of virtual
    addresses are used to generate a corresponding real address
    (e.g. the region second index is used as region first index).
    
    Both of the above can result in incorrect address translations. Only
    for real space designations with a token origin of zero and addresses
    below one megabyte the translation was correct.
    
    Furthermore replace a "!asce.r" statement with a "!*fake" statement to
    make it more obvious that a specific condition has nothing to do with
    the architecture, but with the fake handling of real space designations.
    
    Fixes: 3218f7094b6b ("s390/mm: support real-space for gmap shadows")
    Cc: David Hildenbrand <david@redhat.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5220378bd91c081d2371070cedccffcb7008f1bf
Author: Kan Liang <Kan.liang@intel.com>
Date:   Mon Jun 19 07:26:09 2017 -0700

    perf/x86/intel: Add 1G DTLB load/store miss support for SKL
    
    commit fb3a5055cd7098f8d1dd0cd38d7172211113255f upstream.
    
    Current DTLB load/store miss events (0x608/0x649) only counts 4K,2M and
    4M page size.
    Need to extend the events to support any page size (4K/2M/4M/1G).
    
    The complete DTLB load/store miss events are:
    
      DTLB_LOAD_MISSES.WALK_COMPLETED               0xe08
      DTLB_STORE_MISSES.WALK_COMPLETED              0xe49
    
    Signed-off-by: Kan Liang <Kan.liang@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: eranian@google.com
    Link: http://lkml.kernel.org/r/20170619142609.11058-1-kan.liang@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c679fe729c258f09f169d9e3f8551b6e91d97e2
Author: Ilya Matveychikov <matvejchikov@gmail.com>
Date:   Fri Jun 23 15:08:49 2017 -0700

    lib/cmdline.c: fix get_options() overflow while parsing ranges
    
    commit a91e0f680bcd9e10c253ae8b62462a38bd48f09f upstream.
    
    When using get_options() it's possible to specify a range of numbers,
    like 1-100500.  The problem is that it doesn't track array size while
    calling internally to get_range() which iterates over the range and
    fills the memory with numbers.
    
    Link: http://lkml.kernel.org/r/2613C75C-B04D-4BFF-82A6-12F97BA0F620@gmail.com
    Signed-off-by: Ilya V. Matveychikov <matvejchikov@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc6eecff3d9594b2d5b9f41d4b480dba720e00ca
Author: NeilBrown <neilb@suse.com>
Date:   Fri Jun 23 15:08:43 2017 -0700

    autofs: sanity check status reported with AUTOFS_DEV_IOCTL_FAIL
    
    commit 9fa4eb8e490a28de40964b1b0e583d8db4c7e57c upstream.
    
    If a positive status is passed with the AUTOFS_DEV_IOCTL_FAIL ioctl,
    autofs4_d_automount() will return
    
       ERR_PTR(status)
    
    with that status to follow_automount(), which will then dereference an
    invalid pointer.
    
    So treat a positive status the same as zero, and map to ENOENT.
    
    See comment in systemd src/core/automount.c::automount_send_ready().
    
    Link: http://lkml.kernel.org/r/871sqwczx5.fsf@notabene.neil.brown.name
    Signed-off-by: NeilBrown <neilb@suse.com>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b660fcbc64ebd8a9a0acd12f15e3dc1ab0480b2
Author: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
Date:   Thu Jun 15 19:16:48 2017 +0530

    powerpc/perf: Fix oops when kthread execs user process
    
    commit bf05fc25f268cd62f147f368fe65ad3e5b04fe9f upstream.
    
    When a kthread calls call_usermodehelper() the steps are:
      1. allocate current->mm
      2. load_elf_binary()
      3. populate current->thread.regs
    
    While doing this, interrupts are not disabled. If there is a perf
    interrupt in the middle of this process (i.e. step 1 has completed
    but not yet reached to step 3) and if perf tries to read userspace
    regs, kernel oops with following log:
    
      Unable to handle kernel paging request for data at address 0x00000000
      Faulting instruction address: 0xc0000000000da0fc
      ...
      Call Trace:
      perf_output_sample_regs+0x6c/0xd0
      perf_output_sample+0x4e4/0x830
      perf_event_output_forward+0x64/0x90
      __perf_event_overflow+0x8c/0x1e0
      record_and_restart+0x220/0x5c0
      perf_event_interrupt+0x2d8/0x4d0
      performance_monitor_exception+0x54/0x70
      performance_monitor_common+0x158/0x160
      --- interrupt: f01 at avtab_search_node+0x150/0x1a0
          LR = avtab_search_node+0x100/0x1a0
      ...
      load_elf_binary+0x6e8/0x15a0
      search_binary_handler+0xe8/0x290
      do_execveat_common.isra.14+0x5f4/0x840
      call_usermodehelper_exec_async+0x170/0x210
      ret_from_kernel_thread+0x5c/0x7c
    
    Fix it by setting abi to PERF_SAMPLE_REGS_ABI_NONE when userspace
    pt_regs are not set.
    
    Fixes: ed4a4ef85cf5 ("powerpc/perf: Add support for sampling interrupt register state")
    Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d6848e491df6abbf5fb5b1fabb7a5df2e2b8f4f
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Jun 23 15:08:57 2017 -0700

    fs/exec.c: account for argv/envp pointers
    
    commit 98da7d08850fb8bdeb395d6368ed15753304aa0c upstream.
    
    When limiting the argv/envp strings during exec to 1/4 of the stack limit,
    the storage of the pointers to the strings was not included.  This means
    that an exec with huge numbers of tiny strings could eat 1/4 of the stack
    limit in strings and then additional space would be later used by the
    pointers to the strings.
    
    For example, on 32-bit with a 8MB stack rlimit, an exec with 1677721
    single-byte strings would consume less than 2MB of stack, the max (8MB /
    4) amount allowed, but the pointers to the strings would consume the
    remaining additional stack space (1677721 * 4 == 6710884).
    
    The result (1677721 + 6710884 == 8388605) would exhaust stack space
    entirely.  Controlling this stack exhaustion could result in
    pathological behavior in setuid binaries (CVE-2017-1000365).
    
    [akpm@linux-foundation.org: additional commenting from Kees]
    Fixes: b6a2fea39318 ("mm: variable length argument support")
    Link: http://lkml.kernel.org/r/20170622001720.GA32173@beast
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Rik van Riel <riel@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Qualys Security Advisory <qsa@qualys.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 552a14a572a21cac91d190b38ac1a8aba9730f35
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jun 14 16:20:32 2017 +0200

    ALSA: pcm: Don't treat NULL chmap as a fatal error
    
    commit 2deaeaf102d692cb6f764123b1df7aa118a8e97c upstream.
    
    The standard PCM chmap helper callbacks treat the NULL info->chmap as
    a fatal error and spews the kernel warning with stack trace when
    CONFIG_SND_DEBUG is on.  This was OK, originally it was supposed to be
    always static and non-NULL.  But, as the recent addition of Intel LPE
    audio driver shows, the chmap content may vary dynamically, and it can
    be even NULL when disconnected.  The user still sees the kernel
    warning unnecessarily.
    
    For clearing such a confusion, this patch simply removes the
    snd_BUG_ON() in each place, just returns an error without warning.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c9c55a0f5764337ff4429ae6e15c3b6a45d1124
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jun 11 16:08:21 2017 +0900

    ALSA: firewire-lib: Fix stall of process context at packet error
    
    commit 4a9bfafc64f44ef83de4e00ca1b57352af6cd8c2 upstream.
    
    At Linux v3.5, packet processing can be done in process context of ALSA
    PCM application as well as software IRQ context for OHCI 1394. Below is
    an example of the callgraph (some calls are omitted).
    
    ioctl(2) with e.g. HWSYNC
    (sound/core/pcm_native.c)
    ->snd_pcm_common_ioctl1()
      ->snd_pcm_hwsync()
        ->snd_pcm_stream_lock_irq
        (sound/core/pcm_lib.c)
        ->snd_pcm_update_hw_ptr()
          ->snd_pcm_udpate_hw_ptr0()
            ->struct snd_pcm_ops.pointer()
            (sound/firewire/*)
            = Each handler on drivers in ALSA firewire stack
              (sound/firewire/amdtp-stream.c)
              ->amdtp_stream_pcm_pointer()
                (drivers/firewire/core-iso.c)
                ->fw_iso_context_flush_completions()
                  ->struct fw_card_driver.flush_iso_completion()
                  (drivers/firewire/ohci.c)
                  = flush_iso_completions()
                    ->struct fw_iso_context.callback.sc
                    (sound/firewire/amdtp-stream.c)
                    = in_stream_callback() or out_stream_callback()
                      ->...
        ->snd_pcm_stream_unlock_irq
    
    When packet queueing error occurs or detecting invalid packets in
    'in_stream_callback()' or 'out_stream_callback()', 'snd_pcm_stop_xrun()'
    is called on local CPU with disabled IRQ.
    
    (sound/firewire/amdtp-stream.c)
    in_stream_callback() or out_stream_callback()
    ->amdtp_stream_pcm_abort()
      ->snd_pcm_stop_xrun()
        ->snd_pcm_stream_lock_irqsave()
        ->snd_pcm_stop()
        ->snd_pcm_stream_unlock_irqrestore()
    
    The process is stalled on the CPU due to attempt to acquire recursive lock.
    
    [  562.630853] INFO: rcu_sched detected stalls on CPUs/tasks:
    [  562.630861]      2-...: (1 GPs behind) idle=37d/140000000000000/0 softirq=38323/38323 fqs=7140
    [  562.630862]      (detected by 3, t=15002 jiffies, g=21036, c=21035, q=5933)
    [  562.630866] Task dump for CPU 2:
    [  562.630867] alsa-source-OXF R  running task        0  6619      1 0x00000008
    [  562.630870] Call Trace:
    [  562.630876]  ? vt_console_print+0x79/0x3e0
    [  562.630880]  ? msg_print_text+0x9d/0x100
    [  562.630883]  ? up+0x32/0x50
    [  562.630885]  ? irq_work_queue+0x8d/0xa0
    [  562.630886]  ? console_unlock+0x2b6/0x4b0
    [  562.630888]  ? vprintk_emit+0x312/0x4a0
    [  562.630892]  ? dev_vprintk_emit+0xbf/0x230
    [  562.630895]  ? do_sys_poll+0x37a/0x550
    [  562.630897]  ? dev_printk_emit+0x4e/0x70
    [  562.630900]  ? __dev_printk+0x3c/0x80
    [  562.630903]  ? _raw_spin_lock+0x20/0x30
    [  562.630909]  ? snd_pcm_stream_lock+0x31/0x50 [snd_pcm]
    [  562.630914]  ? _snd_pcm_stream_lock_irqsave+0x2e/0x40 [snd_pcm]
    [  562.630918]  ? snd_pcm_stop_xrun+0x16/0x70 [snd_pcm]
    [  562.630922]  ? in_stream_callback+0x3e6/0x450 [snd_firewire_lib]
    [  562.630925]  ? handle_ir_packet_per_buffer+0x8e/0x1a0 [firewire_ohci]
    [  562.630928]  ? ohci_flush_iso_completions+0xa3/0x130 [firewire_ohci]
    [  562.630932]  ? fw_iso_context_flush_completions+0x15/0x20 [firewire_core]
    [  562.630935]  ? amdtp_stream_pcm_pointer+0x2d/0x40 [snd_firewire_lib]
    [  562.630938]  ? pcm_capture_pointer+0x19/0x20 [snd_oxfw]
    [  562.630943]  ? snd_pcm_update_hw_ptr0+0x47/0x3d0 [snd_pcm]
    [  562.630945]  ? poll_select_copy_remaining+0x150/0x150
    [  562.630947]  ? poll_select_copy_remaining+0x150/0x150
    [  562.630952]  ? snd_pcm_update_hw_ptr+0x10/0x20 [snd_pcm]
    [  562.630956]  ? snd_pcm_hwsync+0x45/0xb0 [snd_pcm]
    [  562.630960]  ? snd_pcm_common_ioctl1+0x1ff/0xc90 [snd_pcm]
    [  562.630962]  ? futex_wake+0x90/0x170
    [  562.630966]  ? snd_pcm_capture_ioctl1+0x136/0x260 [snd_pcm]
    [  562.630970]  ? snd_pcm_capture_ioctl+0x27/0x40 [snd_pcm]
    [  562.630972]  ? do_vfs_ioctl+0xa3/0x610
    [  562.630974]  ? vfs_read+0x11b/0x130
    [  562.630976]  ? SyS_ioctl+0x79/0x90
    [  562.630978]  ? entry_SYSCALL_64_fastpath+0x1e/0xad
    
    This commit fixes the above bug. This assumes two cases:
    1. Any error is detected in software IRQ context of OHCI 1394 context.
    In this case, PCM substream should be aborted in packet handler. On the
    other hand, it should not be done in any process context. TO distinguish
    these two context, use 'in_interrupt()' macro.
    2. Any error is detect in process context of ALSA PCM application.
    In this case, PCM substream should not be aborted in packet handler
    because PCM substream lock is acquired. The task to abort PCM substream
    should be done in ALSA PCM core. For this purpose, SNDRV_PCM_POS_XRUN is
    returned at 'struct snd_pcm_ops.pointer()'.
    
    Suggested-by: Clemens Ladisch <clemens@ladisch.de>
    Fixes: e9148dddc3c7("ALSA: firewire-lib: flush completed packets when reading PCM position")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ae2cb91a6365a6472fad7f04785cc0420ea5ada
Author: Jan Beulich <jbeulich@suse.com>
Date:   Tue Jun 13 16:28:27 2017 -0400

    xen-blkback: don't leak stack data via response ring
    
    commit 089bc0143f489bd3a4578bdff5f4ca68fb26f341 upstream.
    
    Rather than constructing a local structure instance on the stack, fill
    the fields directly on the shared ring, just like other backends do.
    Build on the fact that all response structure flavors are actually
    identical (the old code did make this assumption too).
    
    This is XSA-216.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5c49c1703ae906a8f41f58aabd5258a06fc9e6d
Author: Juergen Gross <jgross@suse.com>
Date:   Thu May 18 17:28:47 2017 +0200

    xen/blkback: fix disconnect while I/Os in flight
    
    commit 46464411307746e6297a034a9983a22c9dfc5a0c upstream.
    
    Today disconnecting xen-blkback is broken in case there are still
    I/Os in flight: xen_blkif_disconnect() will bail out early without
    releasing all resources in the hope it will be called again when
    the last request has terminated. This, however, won't happen as
    xen_blkif_free() won't be called on termination of the last running
    request: xen_blkif_put() won't decrement the blkif refcnt to 0 as
    xen_blkif_disconnect() didn't finish before thus some xen_blkif_put()
    calls in xen_blkif_disconnect() didn't happen.
    
    To solve this deadlock xen_blkif_disconnect() and
    xen_blkif_alloc_rings() shouldn't use xen_blkif_put() and
    xen_blkif_get() but use some other way to do their accounting of
    resources.
    
    This at once fixes another error in xen_blkif_disconnect(): when it
    returned early with -EBUSY for another ring than 0 it would call
    xen_blkif_put() again for already handled rings on a subsequent call.
    This will lead to inconsistencies in the refcnt handling.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Steven Haigh <netwiz@crc.id.au>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e051f17bd048d96eb533f1b8f436f3b27c6109b
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Wed May 3 11:13:46 2017 +0800

    clk: sunxi-ng: a31: Correct lcd1-ch1 clock register offset
    
    commit 38b8f823864707eb1cf331d2247608c419ed388c upstream.
    
    The register offset for the lcd1-ch1 clock was incorrectly pointing to
    the lcd0-ch1 clock. This resulted in the lcd0-ch1 clock being disabled
    when the clk core disables unused clocks. This then stops the simplefb
    HDMI output path.
    
    Reported-by: Bob Ham <rah@settrans.net>
    Fixes: c6e6c96d8fa6 ("clk: sunxi-ng: Add A31/A31s clocks")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
