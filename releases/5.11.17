commit feaeae9aef5e0cf1c2afad3ca403f6451125c77d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 28 13:41:51 2021 +0200

    Linux 5.11.17
    
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20210426072819.666570770@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 469633d344ba25e37b317dcf687f306ebe0c2bd4
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 21 09:45:13 2021 +0200

    USB: CDC-ACM: fix poison/unpoison imbalance
    
    commit a8b3b519618f30a87a304c4e120267ce6f8dc68a upstream.
    
    suspend() does its poisoning conditionally, resume() does it
    unconditionally. On a device with combined interfaces this
    will balance, on a device with two interfaces the counter will
    go negative and resubmission will fail.
    
    Both actions need to be done conditionally.
    
    Fixes: 6069e3e927c8f ("USB: cdc-acm: untangle a circular dependency between callback and softint")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210421074513.4327-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f000005da31f6947f843ce6b3e3a960540c6e00
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Apr 26 10:11:49 2021 +0200

    net: hso: fix NULL-deref on disconnect regression
    
    commit 2ad5692db72874f02b9ad551d26345437ea4f7f3 upstream.
    
    Commit 8a12f8836145 ("net: hso: fix null-ptr-deref during tty device
    unregistration") fixed the racy minor allocation reported by syzbot, but
    introduced an unconditional NULL-pointer dereference on every disconnect
    instead.
    
    Specifically, the serial device table must no longer be accessed after
    the minor has been released by hso_serial_tty_unregister().
    
    Fixes: 8a12f8836145 ("net: hso: fix null-ptr-deref during tty device unregistration")
    Cc: stable@vger.kernel.org
    Cc: Anirudh Rayabharam <mail@anirudhrb.com>
    Reported-by: Leonardo Antoniazzi <leoanto@aruba.it>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Anirudh Rayabharam <mail@anirudhrb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b05db6d4d0a9e82de9219549b0a07a9294ba8fe9
Author: Mike Galbraith <efault@gmx.de>
Date:   Fri Apr 16 14:02:07 2021 +0200

    x86/crash: Fix crash_setup_memmap_entries() out-of-bounds access
    
    commit 5849cdf8c120e3979c57d34be55b92d90a77a47e upstream.
    
    Commit in Fixes: added support for kexec-ing a kernel on panic using a
    new system call. As part of it, it does prepare a memory map for the new
    kernel.
    
    However, while doing so, it wrongly accesses memory it has not
    allocated: it accesses the first element of the cmem->ranges[] array in
    memmap_exclude_ranges() but it has not allocated the memory for it in
    crash_setup_memmap_entries(). As KASAN reports:
    
      BUG: KASAN: vmalloc-out-of-bounds in crash_setup_memmap_entries+0x17e/0x3a0
      Write of size 8 at addr ffffc90000426008 by task kexec/1187
    
      (gdb) list *crash_setup_memmap_entries+0x17e
      0xffffffff8107cafe is in crash_setup_memmap_entries (arch/x86/kernel/crash.c:322).
      317                                      unsigned long long mend)
      318     {
      319             unsigned long start, end;
      320
      321             cmem->ranges[0].start = mstart;
      322             cmem->ranges[0].end = mend;
      323             cmem->nr_ranges = 1;
      324
      325             /* Exclude elf header region */
      326             start = image->arch.elf_load_addr;
      (gdb)
    
    Make sure the ranges array becomes a single element allocated.
    
     [ bp: Write a proper commit message. ]
    
    Fixes: dd5f726076cc ("kexec: support for kexec on panic using new system call")
    Signed-off-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Dave Young <dyoung@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/725fa3dc1da2737f0f6188a1a9701bead257ea9d.camel@gmx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3588df93d99d5cbdca1b40e7f7d17c431ed8e90a
Author: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
Date:   Fri Apr 16 15:46:15 2021 -0700

    ia64: tools: remove duplicate definition of ia64_mf() on ia64
    
    [ Upstream commit f4bf09dc3aaa4b07cd15630f2023f68cb2668809 ]
    
    The ia64_mf() macro defined in tools/arch/ia64/include/asm/barrier.h is
    already defined in <asm/gcc_intrin.h> on ia64 which causes libbpf
    failing to build:
    
        CC       /usr/src/linux/tools/bpf/bpftool//libbpf/staticobjs/libbpf.o
      In file included from /usr/src/linux/tools/include/asm/barrier.h:24,
                       from /usr/src/linux/tools/include/linux/ring_buffer.h:4,
                       from libbpf.c:37:
      /usr/src/linux/tools/include/asm/../../arch/ia64/include/asm/barrier.h:43: error: "ia64_mf" redefined [-Werror]
         43 | #define ia64_mf()       asm volatile ("mf" ::: "memory")
            |
      In file included from /usr/include/ia64-linux-gnu/asm/intrinsics.h:20,
                       from /usr/include/ia64-linux-gnu/asm/swab.h:11,
                       from /usr/include/linux/swab.h:8,
                       from /usr/include/linux/byteorder/little_endian.h:13,
                       from /usr/include/ia64-linux-gnu/asm/byteorder.h:5,
                       from /usr/src/linux/tools/include/uapi/linux/perf_event.h:20,
                       from libbpf.c:36:
      /usr/include/ia64-linux-gnu/asm/gcc_intrin.h:382: note: this is the location of the previous definition
        382 | #define ia64_mf() __asm__ volatile ("mf" ::: "memory")
            |
      cc1: all warnings being treated as errors
    
    Thus, remove the definition from tools/arch/ia64/include/asm/barrier.h.
    
    Signed-off-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d571012a0242966fe42ea334e46d07ea11f700f0
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Apr 16 15:46:09 2021 -0700

    ia64: fix discontig.c section mismatches
    
    [ Upstream commit e2af9da4f867a1a54f1252bf3abc1a5c63951778 ]
    
    Fix IA64 discontig.c Section mismatch warnings.
    
    When CONFIG_SPARSEMEM=y and CONFIG_MEMORY_HOTPLUG=y, the functions
    computer_pernodesize() and scatter_node_data() should not be marked as
    __meminit because they are needed after init, on any memory hotplug
    event.  Also, early_nr_cpus_node() is called by compute_pernodesize(),
    so early_nr_cpus_node() cannot be __meminit either.
    
      WARNING: modpost: vmlinux.o(.text.unlikely+0x1612): Section mismatch in reference from the function arch_alloc_nodedata() to the function .meminit.text:compute_pernodesize()
      The function arch_alloc_nodedata() references the function __meminit compute_pernodesize().
      This is often because arch_alloc_nodedata lacks a __meminit annotation or the annotation of compute_pernodesize is wrong.
    
      WARNING: modpost: vmlinux.o(.text.unlikely+0x1692): Section mismatch in reference from the function arch_refresh_nodedata() to the function .meminit.text:scatter_node_data()
      The function arch_refresh_nodedata() references the function __meminit scatter_node_data().
      This is often because arch_refresh_nodedata lacks a __meminit annotation or the annotation of scatter_node_data is wrong.
    
      WARNING: modpost: vmlinux.o(.text.unlikely+0x1502): Section mismatch in reference from the function compute_pernodesize() to the function .meminit.text:early_nr_cpus_node()
      The function compute_pernodesize() references the function __meminit early_nr_cpus_node().
      This is often because compute_pernodesize lacks a __meminit annotation or the annotation of early_nr_cpus_node is wrong.
    
    Link: https://lkml.kernel.org/r/20210411001201.3069-1-rdunlap@infradead.org
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Mike Rapoport <rppt@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f7a140e43ca7acd3202c9ad20456cbba918e681
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Apr 16 15:46:03 2021 -0700

    csky: change a Kconfig symbol name to fix e1000 build error
    
    [ Upstream commit d199161653d612b8fb96ac51bfd5b2d2782ecef3 ]
    
    e1000's #define of CONFIG_RAM_BASE conflicts with a Kconfig symbol in
    arch/csky/Kconfig.
    
    The symbol in e1000 has been around longer, so change arch/csky/ to use
    DRAM_BASE instead of RAM_BASE to remove the conflict.  (although e1000
    is also a 2-line change)
    
    Link: https://lkml.kernel.org/r/20210411055335.7111-1-rdunlap@infradead.org
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Acked-by: Guo Ren <guoren@kernel.org>
    Cc: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d19a9e8b8233438d41afc03f0cd226ae74dd953
Author: Wan Jiabing <wanjiabing@vivo.com>
Date:   Wed Apr 14 19:31:48 2021 +0800

    cavium/liquidio: Fix duplicate argument
    
    [ Upstream commit 416dcc5ce9d2a810477171c62ffa061a98f87367 ]
    
    Fix the following coccicheck warning:
    
    ./drivers/net/ethernet/cavium/liquidio/cn66xx_regs.h:413:6-28:
    duplicated argument to & or |
    
    The CN6XXX_INTR_M1UPB0_ERR here is duplicate.
    Here should be CN6XXX_INTR_M1UNB0_ERR.
    
    Signed-off-by: Wan Jiabing <wanjiabing@vivo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7868f01aebc045da72c29494b1382f71e6029bc
Author: Michael Brown <mbrown@fensystems.co.uk>
Date:   Tue Apr 13 16:25:12 2021 +0100

    xen-netback: Check for hotplug-status existence before watching
    
    [ Upstream commit 2afeec08ab5c86ae21952151f726bfe184f6b23d ]
    
    The logic in connect() is currently written with the assumption that
    xenbus_watch_pathfmt() will return an error for a node that does not
    exist.  This assumption is incorrect: xenstore does allow a watch to
    be registered for a nonexistent node (and will send notifications
    should the node be subsequently created).
    
    As of commit 1f2565780 ("xen-netback: remove 'hotplug-status' once it
    has served its purpose"), this leads to a failure when a domU
    transitions into XenbusStateConnected more than once.  On the first
    domU transition into Connected state, the "hotplug-status" node will
    be deleted by the hotplug_status_changed() callback in dom0.  On the
    second or subsequent domU transition into Connected state, the
    hotplug_status_changed() callback will therefore never be invoked, and
    so the backend will remain stuck in InitWait.
    
    This failure prevents scenarios such as reloading the xen-netfront
    module within a domU, or booting a domU via iPXE.  There is
    unfortunately no way for the domU to work around this dom0 bug.
    
    Fix by explicitly checking for existence of the "hotplug-status" node,
    thereby creating the behaviour that was previously assumed to exist.
    
    Signed-off-by: Michael Brown <mbrown@fensystems.co.uk>
    Reviewed-by: Paul Durrant <paul@xen.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 569df2316993d8485c10da9dc7b024321124c95a
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Mon Apr 12 17:41:01 2021 +0800

    arm64: kprobes: Restore local irqflag if kprobes is cancelled
    
    [ Upstream commit 738fa58ee1328481d1d7889e7c430b3401c571b9 ]
    
    If instruction being single stepped caused a page fault, the kprobes
    is cancelled to let the page fault handler continue as a normal page
    fault. But the local irqflags are disabled so cpu will restore pstate
    with DAIF masked. After pagefault is serviced, the kprobes is
    triggerred again, we overwrite the saved_irqflag by calling
    kprobes_save_local_irqflag(). NOTE, DAIF is masked in this new saved
    irqflag. After kprobes is serviced, the cpu pstate is retored with
    DAIF masked.
    
    This patch is inspired by one patch for riscv from Liao Chang.
    
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20210412174101.6bfb0594@xhacker.debian
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaabcb715243be5c7db0613e532a697732825a40
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Fri Apr 9 00:15:21 2021 +0200

    s390/entry: save the caller of psw_idle
    
    [ Upstream commit a994eddb947ea9ebb7b14d9a1267001699f0a136 ]
    
    Currently psw_idle does not allocate a stack frame and does not
    save its r14 and r15 into the save area. Even though this is valid from
    call ABI point of view, because psw_idle does not make any calls
    explicitly, in reality psw_idle is an entry point for controlled
    transition into serving interrupts. So, in practice, psw_idle stack
    frame is analyzed during stack unwinding. Depending on build options
    that r14 slot in the save area of psw_idle might either contain a value
    saved by previous sibling call or complete garbage.
    
      [task    0000038000003c28] do_ext_irq+0xd6/0x160
      [task    0000038000003c78] ext_int_handler+0xba/0xe8
      [task   *0000038000003dd8] psw_idle_exit+0x0/0x8 <-- pt_regs
     ([task    0000038000003dd8] 0x0)
      [task    0000038000003e10] default_idle_call+0x42/0x148
      [task    0000038000003e30] do_idle+0xce/0x160
      [task    0000038000003e70] cpu_startup_entry+0x36/0x40
      [task    0000038000003ea0] arch_call_rest_init+0x76/0x80
    
    So, to make a stacktrace nicer and actually point for the real caller of
    psw_idle in this frequently occurring case, make psw_idle save its r14.
    
      [task    0000038000003c28] do_ext_irq+0xd6/0x160
      [task    0000038000003c78] ext_int_handler+0xba/0xe8
      [task   *0000038000003dd8] psw_idle_exit+0x0/0x6 <-- pt_regs
     ([task    0000038000003dd8] arch_cpu_idle+0x3c/0xd0)
      [task    0000038000003e10] default_idle_call+0x42/0x148
      [task    0000038000003e30] do_idle+0xce/0x160
      [task    0000038000003e70] cpu_startup_entry+0x36/0x40
      [task    0000038000003ea0] arch_call_rest_init+0x76/0x80
    
    Reviewed-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50ef92b0d109f614534880e543d527a3135797ab
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri Apr 9 16:28:05 2021 +0800

    dmaengine: tegra20: Fix runtime PM imbalance on error
    
    [ Upstream commit 917a3200b9f467a154999c7572af345f2470aaf4 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/20210409082805.23643-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8804e6fb289d16a5c421eebbd4d45783d648462
Author: Phillip Potter <phil@philpotter.co.uk>
Date:   Sun Apr 11 12:28:24 2021 +0100

    net: geneve: check skb is large enough for IPv4/IPv6 header
    
    [ Upstream commit 6628ddfec7580882f11fdc5c194a8ea781fdadfa ]
    
    Check within geneve_xmit_skb/geneve6_xmit_skb that sk_buff structure
    is large enough to include IPv4 or IPv6 header, and reject if not. The
    geneve_xmit_skb portion and overall idea was contributed by Eric Dumazet.
    Fixes a KMSAN-found uninit-value bug reported by syzbot at:
    https://syzkaller.appspot.com/bug?id=abe95dc3e3e9667fc23b8d81f29ecad95c6f106f
    
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+2e406a9ac75bb71d4b7a@syzkaller.appspotmail.com
    Signed-off-by: Phillip Potter <phil@philpotter.co.uk>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b9c42fdd6ee40a316672e2052d729bac4ae2583
Author: Angelo Dureghello <angelo@kernel-space.org>
Date:   Sun Feb 28 20:08:28 2021 +0100

    m68k: fix flatmem memory model setup
    
    [ Upstream commit d2bd44c4c05d043fb65cfdf26c54e6d8b94a4b41 ]
    
    Detected a broken boot on mcf54415, likely introduced from
    
    commit 4bfc848e0981
    ("m68k/mm: enable use of generic memory_model.h for !DISCONTIGMEM")
    
    Fix ARCH_PFN_OFFSET to be a pfn.
    
    Signed-off-by: Angelo Dureghello <angelo@kernel-space.org>
    Acked-by: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1baa29c660b8b75c1cd06e743d9faca7ee323b1f
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Mar 24 15:10:32 2021 +0200

    ARM: dts: Fix swapped mmc order for omap3
    
    [ Upstream commit a1ebdb3741993f853865d1bd8f77881916ad53a7 ]
    
    Also some omap3 devices like n900 seem to have eMMC and micro-sd swapped
    around with commit 21b2cec61c04 ("mmc: Set PROBE_PREFER_ASYNCHRONOUS for
    drivers that existed in v4.4").
    
    Let's fix the issue with aliases as discussed on the mailing lists. While
    the mmc aliases should be board specific, let's first fix the issue with
    minimal changes.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c37076738ff4080d49b2dd01402e3aff5d130614
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Mar 7 06:06:29 2021 +0200

    dmaengine: xilinx: dpdma: Fix race condition in done IRQ
    
    [ Upstream commit 868833fbffbe51c487df4f95d4de9194264a4b30 ]
    
    The active descriptor pointer is accessed from different contexts,
    including different interrupt handlers, and its access must be protected
    by the channel's lock. This wasn't done in the done IRQ handler. Fix it.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Link: https://lore.kernel.org/r/20210307040629.29308-3-laurent.pinchart@ideasonboard.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cea1e229a5fab9a3e201385735fce01992dac4ac
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Mar 7 06:06:28 2021 +0200

    dmaengine: xilinx: dpdma: Fix descriptor issuing on video group
    
    [ Upstream commit 1cbd44666216278bbb6a55bcb6b9283702171c77 ]
    
    When multiple channels are part of a video group, the transfer is
    triggered only when all channels in the group are ready. The logic to do
    so is incorrect, as it causes the descriptors for all channels but the
    last one in a group to not being pushed to the hardware. Fix it.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Link: https://lore.kernel.org/r/20210307040629.29308-2-laurent.pinchart@ideasonboard.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77ac7b25a80e7a303c803230cc1595d976bfd1ae
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Jan 14 19:29:28 2021 +0800

    soc: qcom: geni: shield geni_icc_get() for ACPI boot
    
    [ Upstream commit 0c9fdcdba68208270ae85d39600ea97da1718344 ]
    
    Currently, GENI devices like i2c-qcom-geni fails to probe in ACPI boot,
    if interconnect support is enabled.  That's because interconnect driver
    only supports DT right now.  As interconnect is not necessarily required
    for basic function of GENI devices, let's shield geni_icc_get() call,
    and then all other ICC calls become nop due to NULL icc_path, so that
    GENI devices keep working for ACPI boot.
    
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Link: https://lore.kernel.org/r/20210114112928.11368-1-shawn.guo@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b490f73c55b832c8d1ed1abfc7467639465fc5a
Author: Jiapeng Zhong <abaci-bugfix@linux.alibaba.com>
Date:   Wed Jan 20 15:34:30 2021 +0800

    HID: wacom: Assign boolean values to a bool variable
    
    [ Upstream commit e29c62ffb008829dc8bcc0a2ec438adc25a8255e ]
    
    Fix the following coccicheck warnings:
    
    ./drivers/hid/wacom_wac.c:2536:2-6: WARNING: Assignment of
    0/1 to bool variable.
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Jiapeng Zhong <abaci-bugfix@linux.alibaba.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8d689368e504610d4ee622f7bd827ade448cb20
Author: Douglas Gilbert <dgilbert@interlog.com>
Date:   Sat Jan 9 17:36:58 2021 -0500

    HID cp2112: fix support for multiple gpiochips
    
    [ Upstream commit 2a2b09c867fdac63f430a45051e7bd0c46edc381 ]
    
    In lk 5.11.0-rc2 connecting a USB based Silicon Labs HID to I2C
    bridge evaluation board (CP2112EK) causes this warning:
      gpio gpiochip0: (cp2112_gpio): detected irqchip that is shared
           with multiple gpiochips: please fix the driver
    
    Simply copy what other gpio related drivers do to fix this
    particular warning: replicate the struct irq_chip object in each
    device instance rather than have a static object which makes that
    object (incorrectly) shared by each device.
    
    Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf9c9d615a9d772ba34a81ef6fac91f263cdbc35
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Thu Mar 4 05:19:57 2021 -0800

    HID: alps: fix error return code in alps_input_configured()
    
    [ Upstream commit fa8ba6e5dc0e78e409e503ddcfceef5dd96527f4 ]
    
    When input_register_device() fails, no error return code is assigned.
    To fix this bug, ret is assigned with -ENOENT as error return code.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cf8067cc96becd0d728af149878000700d27e85
Author: Luke D Jones <luke@ljones.dev>
Date:   Fri Feb 19 10:10:02 2021 +1300

    HID: asus: Add support for 2021 ASUS N-Key keyboard
    
    [ Upstream commit 9a0b44fbfea1932196a4879b44a37dd182e984c5 ]
    
    Some new 2021 version of ASUS gamer laptops are using an updated
    N-Key keyboard with the PID of 0x19b6. This version is using the
    same init sequence and brightness control as the 0x1866 keyboard.
    
    Signed-off-by: Luke D Jones <luke@ljones.dev>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e2d9f1d52c67ea943e9b8ba50576224a79f9268
Author: Shou-Chieh Hsu <shouchieh@chromium.org>
Date:   Tue Mar 2 11:58:01 2021 +0800

    HID: google: add don USB id
    
    [ Upstream commit 36b87cf302a4f13f8b4344bcf98f67405a145e2f ]
    
    Add 1 additional hammer-like device.
    
    Signed-off-by: Shou-Chieh Hsu <shouchieh@chromium.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48189362d36a1eea371e295cad845a69c4def65e
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Thu Apr 15 17:27:44 2021 +0800

    perf map: Fix error return code in maps__clone()
    
    [ Upstream commit c6f87141254d16e281e4b4431af7316895207b8f ]
    
    Although 'err' has been initialized to -ENOMEM, but it will be reassigned
    by the "err = unwind__prepare_access(...)" statement in the for loop. So
    that, the value of 'err' is unknown when map__clone() failed.
    
    Fixes: 6c502584438bda63 ("perf unwind: Call unwind__prepare_access for forked thread")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: zhen lei <thunder.leizhen@huawei.com>
    Link: http://lore.kernel.org/lkml/20210415092744.3793-1-thunder.leizhen@huawei.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 508a1c43118e0f7d0268233a186d2e3112f290b5
Author: Leo Yan <leo.yan@linaro.org>
Date:   Tue Apr 20 23:15:53 2021 +0800

    perf auxtrace: Fix potential NULL pointer dereference
    
    [ Upstream commit b14585d9f18dc617e975815570fe836be656b1da ]
    
    In the function auxtrace_parse_snapshot_options(), the callback pointer
    "itr->parse_snapshot_options" can be NULL if it has not been set during
    the AUX record initialization.  This can cause tool crashing if the
    callback pointer "itr->parse_snapshot_options" is dereferenced without
    performing NULL check.
    
    Add a NULL check for the pointer "itr->parse_snapshot_options" before
    invoke the callback.
    
    Fixes: d20031bb63dd6dde ("perf tools: Add AUX area tracing Snapshot Mode")
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Tiezhu Yang <yangtiezhu@loongson.cn>
    Link: http://lore.kernel.org/lkml/20210420151554.2031768-1-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31216482abe66f2a7a5b776bf52ab4215e8ba130
Author: Jim Mattson <jmattson@google.com>
Date:   Wed Apr 21 17:18:34 2021 -0700

    perf/x86/kvm: Fix Broadwell Xeon stepping in isolation_ucodes[]
    
    [ Upstream commit 4b2f1e59229b9da319d358828cdfa4ddbc140769 ]
    
    The only stepping of Broadwell Xeon parts is stepping 1. Fix the
    relevant isolation_ucodes[] entry, which previously enumerated
    stepping 2.
    
    Although the original commit was characterized as an optimization, it
    is also a workaround for a correctness issue.
    
    If a PMI arrives between kvm's call to perf_guest_get_msrs() and the
    subsequent VM-entry, a stale value for the IA32_PEBS_ENABLE MSR may be
    restored at the next VM-exit. This is because, unbeknownst to kvm, PMI
    throttling may clear bits in the IA32_PEBS_ENABLE MSR. CPUs with "PEBS
    isolation" don't suffer from this issue, because perf_guest_get_msrs()
    doesn't report the IA32_PEBS_ENABLE value.
    
    Fixes: 9b545c04abd4f ("perf/x86/kvm: Avoid unnecessary work in guest filtering")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Peter Shier <pshier@google.com>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/20210422001834.1748319-1-jmattson@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2c79105a90323a2a93484c85f9ac419ae9b183d
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Thu Apr 15 14:22:43 2021 -0700

    perf/x86/intel/uncore: Remove uncore extra PCI dev HSWEP_PCI_PCU_3
    
    [ Upstream commit 9d480158ee86ad606d3a8baaf81e6b71acbfd7d5 ]
    
    There may be a kernel panic on the Haswell server and the Broadwell
    server, if the snbep_pci2phy_map_init() return error.
    
    The uncore_extra_pci_dev[HSWEP_PCI_PCU_3] is used in the cpu_init() to
    detect the existence of the SBOX, which is a MSR type of PMON unit.
    The uncore_extra_pci_dev is allocated in the uncore_pci_init(). If the
    snbep_pci2phy_map_init() returns error, perf doesn't initialize the
    PCI type of the PMON units, so the uncore_extra_pci_dev will not be
    allocated. But perf may continue initializing the MSR type of PMON
    units. A null dereference kernel panic will be triggered.
    
    The sockets in a Haswell server or a Broadwell server are identical.
    Only need to detect the existence of the SBOX once.
    Current perf probes all available PCU devices and stores them into the
    uncore_extra_pci_dev. It's unnecessary.
    Use the pci_get_device() to replace the uncore_extra_pci_dev. Only
    detect the existence of the SBOX on the first available PCU device once.
    
    Factor out hswep_has_limit_sbox(), since the Haswell server and the
    Broadwell server uses the same way to detect the existence of the SBOX.
    
    Add some macros to replace the magic number.
    
    Fixes: 5306c31c5733 ("perf/x86/uncore/hsw-ep: Handle systems with only two SBOXes")
    Reported-by: Steve Wahl <steve.wahl@hpe.com>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Steve Wahl <steve.wahl@hpe.com>
    Link: https://lkml.kernel.org/r/1618521764-100923-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d558fcdb17139728347bccc60a16af3e639649d2
Author: Ali Saidi <alisaidi@amazon.com>
Date:   Thu Apr 15 17:27:11 2021 +0000

    locking/qrwlock: Fix ordering in queued_write_lock_slowpath()
    
    [ Upstream commit 84a24bf8c52e66b7ac89ada5e3cfbe72d65c1896 ]
    
    While this code is executed with the wait_lock held, a reader can
    acquire the lock without holding wait_lock.  The writer side loops
    checking the value with the atomic_cond_read_acquire(), but only truly
    acquires the lock when the compare-and-exchange is completed
    successfully which isn’t ordered. This exposes the window between the
    acquire and the cmpxchg to an A-B-A problem which allows reads
    following the lock acquisition to observe values speculatively before
    the write lock is truly acquired.
    
    We've seen a problem in epoll where the reader does a xchg while
    holding the read lock, but the writer can see a value change out from
    under it.
    
      Writer                                | Reader
      --------------------------------------------------------------------------------
      ep_scan_ready_list()                  |
      |- write_lock_irq()                   |
          |- queued_write_lock_slowpath()   |
            |- atomic_cond_read_acquire()   |
                                            | read_lock_irqsave(&ep->lock, flags);
         --> (observes value before unlock) |  chain_epi_lockless()
         |                                  |    epi->next = xchg(&ep->ovflist, epi);
         |                                  | read_unlock_irqrestore(&ep->lock, flags);
         |                                  |
         |     atomic_cmpxchg_relaxed()     |
         |-- READ_ONCE(ep->ovflist);        |
    
    A core can order the read of the ovflist ahead of the
    atomic_cmpxchg_relaxed(). Switching the cmpxchg to use acquire
    semantics addresses this issue at which point the atomic_cond_read can
    be switched to use relaxed semantics.
    
    Fixes: b519b56e378ee ("locking/qrwlock: Use atomic_cond_read_acquire() when spinning in qrwlock")
    Signed-off-by: Ali Saidi <alisaidi@amazon.com>
    [peterz: use try_cmpxchg()]
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Steve Capper <steve.capper@arm.com>
    Acked-by: Will Deacon <will@kernel.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Tested-by: Steve Capper <steve.capper@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da63d034f87b637d81460fad3711e3c504206e9b
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Mar 24 10:38:26 2021 +0100

    bpf: Tighten speculative pointer arithmetic mask
    
    [ Upstream commit 7fedb63a8307dda0ec3b8969a3b233a1dd7ea8e0 ]
    
    This work tightens the offset mask we use for unprivileged pointer arithmetic
    in order to mitigate a corner case reported by Piotr and Benedict where in
    the speculative domain it is possible to advance, for example, the map value
    pointer by up to value_size-1 out-of-bounds in order to leak kernel memory
    via side-channel to user space.
    
    Before this change, the computed ptr_limit for retrieve_ptr_limit() helper
    represents largest valid distance when moving pointer to the right or left
    which is then fed as aux->alu_limit to generate masking instructions against
    the offset register. After the change, the derived aux->alu_limit represents
    the largest potential value of the offset register which we mask against which
    is just a narrower subset of the former limit.
    
    For minimal complexity, we call sanitize_ptr_alu() from 2 observation points
    in adjust_ptr_min_max_vals(), that is, before and after the simulated alu
    operation. In the first step, we retieve the alu_state and alu_limit before
    the operation as well as we branch-off a verifier path and push it to the
    verification stack as we did before which checks the dst_reg under truncation,
    in other words, when the speculative domain would attempt to move the pointer
    out-of-bounds.
    
    In the second step, we retrieve the new alu_limit and calculate the absolute
    distance between both. Moreover, we commit the alu_state and final alu_limit
    via update_alu_sanitation_state() to the env's instruction aux data, and bail
    out from there if there is a mismatch due to coming from different verification
    paths with different states.
    
    Reported-by: Piotr Krysiuk <piotras@gmail.com>
    Reported-by: Benedict Schlueter <benedict.schlueter@rub.de>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Tested-by: Benedict Schlueter <benedict.schlueter@rub.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f5cfb7f36ea3ae0866c1bf0d1effa5b88366c28
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Mar 23 15:05:48 2021 +0100

    bpf: Refactor and streamline bounds check into helper
    
    [ Upstream commit 073815b756c51ba9d8384d924c5d1c03ca3d1ae4 ]
    
    Move the bounds check in adjust_ptr_min_max_vals() into a small helper named
    sanitize_check_bounds() in order to simplify the former a bit.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b725ea5d104caea250427899f4e2e3ab15b4fc
Author: Andrei Matei <andreimatei1@gmail.com>
Date:   Sat Feb 6 20:10:24 2021 -0500

    bpf: Allow variable-offset stack access
    
    [ Upstream commit 01f810ace9ed37255f27608a0864abebccf0aab3 ]
    
    Before this patch, variable offset access to the stack was dissalowed
    for regular instructions, but was allowed for "indirect" accesses (i.e.
    helpers). This patch removes the restriction, allowing reading and
    writing to the stack through stack pointers with variable offsets. This
    makes stack-allocated buffers more usable in programs, and brings stack
    pointers closer to other types of pointers.
    
    The motivation is being able to use stack-allocated buffers for data
    manipulation. When the stack size limit is sufficient, allocating
    buffers on the stack is simpler than per-cpu arrays, or other
    alternatives.
    
    In unpriviledged programs, variable-offset reads and writes are
    disallowed (they were already disallowed for the indirect access case)
    because the speculative execution checking code doesn't support them.
    Additionally, when writing through a variable-offset stack pointer, if
    any pointers are in the accessible range, there's possilibities of later
    leaking pointers because the write cannot be tracked precisely.
    
    Writes with variable offset mark the whole range as initialized, even
    though we don't know which stack slots are actually written. This is in
    order to not reject future reads to these slots. Note that this doesn't
    affect writes done through helpers; like before, helpers need the whole
    stack range to be initialized to begin with.
    All the stack slots are in range are considered scalars after the write;
    variable-offset register spills are not tracked.
    
    For reads, all the stack slots in the variable range needs to be
    initialized (but see above about what writes do), otherwise the read is
    rejected. All register spilled in stack slots that might be read are
    marked as having been read, however reads through such pointers don't do
    register filling; the target register will always be either a scalar or
    a constant zero.
    
    Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20210207011027.676572-2-andreimatei1@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 759fb61184a23c0b41406300466cf32266c28c0b
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Wed Apr 14 11:47:40 2021 +0100

    arm64: dts: allwinner: Revert SD card CD GPIO for Pine64-LTS
    
    [ Upstream commit 4d09ccc4a81e7de6b002482af554d8b5626f5041 ]
    
    Commit 941432d00768 ("arm64: dts: allwinner: Drop non-removable from
    SoPine/LTS SD card") enabled the card detect GPIO for the SOPine module,
    along the way with the Pine64-LTS, which share the same base .dtsi.
    
    This was based on the observation that the Pine64-LTS has as "push-push"
    SD card socket, and that the schematic mentions the card detect GPIO.
    
    After having received two reports about failing SD card access with that
    patch, some more research and polls on that subject revealed that there
    are at least two different versions of the Pine64-LTS out there:
    - On some boards (including mine) the card detect pin is "stuck" at
      high, regardless of an microSD card being inserted or not.
    - On other boards the card-detect is working, but is active-high, by
      virtue of an explicit inverter circuit, as shown in the schematic.
    
    To cover all versions of the board out there, and don't take any chances,
    let's revert the introduction of the active-low CD GPIO, but let's use
    the broken-cd property for the Pine64-LTS this time. That should avoid
    regressions and should work for everyone, even allowing SD card changes
    now.
    The SOPine card detect has proven to be working, so let's keep that
    GPIO in place.
    
    Fixes: 941432d00768 ("arm64: dts: allwinner: Drop non-removable from SoPine/LTS SD card")
    Reported-by: Michael Weiser <michael.weiser@gmx.de>
    Reported-by: Daniel Kulesz <kuleszdl@posteo.org>
    Suggested-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Tested-by: Michael Weiser <michael.weiser@gmx.de>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20210414104740.31497-1-andre.przywara@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5045b3921d6c62171560916cd3bd78570c599de8
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Apr 15 16:03:56 2021 +0300

    pinctrl: core: Show pin numbers for the controllers with base = 0
    
    [ Upstream commit 482715ff0601c836152b792f06c353464d826b9b ]
    
    The commit f1b206cf7c57 ("pinctrl: core: print gpio in pins debugfs file")
    enabled GPIO pin number and label in debugfs for pin controller. However,
    it limited that feature to the chips where base is positive number. This,
    in particular, excluded chips where base is 0 for the historical or backward
    compatibility reasons. Refactor the code to include the latter as well.
    
    Fixes: f1b206cf7c57 ("pinctrl: core: print gpio in pins debugfs file")
    Cc: Drew Fustini <drew@beagleboard.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Drew Fustini <drew@beagleboard.org>
    Reviewed-by: Drew Fustini <drew@beagleboard.org>
    Link: https://lore.kernel.org/r/20210415130356.15885-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 785bdb3f1c1c83ee2f38afe8b0bc73f229fae598
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Apr 21 18:05:02 2021 +0200

    block: return -EBUSY when there are open partitions in blkdev_reread_part
    
    [ Upstream commit 68e6582e8f2dc32fd2458b9926564faa1fb4560e ]
    
    The switch to go through blkdev_get_by_dev means we now ignore the
    return value from bdev_disk_changed in __blkdev_get.  Add a manual
    check to restore the old semantics.
    
    Fixes: 4601b4b130de ("block: reopen the device in blkdev_reread_part")
    Reported-by: Karel Zak <kzak@redhat.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20210421160502.447418-1-hch@lst.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bb0a482019e962bfd67263723f2fb24241afb80
Author: Yuanyuan Zhong <yzhong@purestorage.com>
Date:   Mon Apr 12 17:17:59 2021 -0600

    pinctrl: lewisburg: Update number of pins in community
    
    [ Upstream commit 196d941753297d0ca73c563ccd7d00be049ec226 ]
    
    When updating pin names for Intel Lewisburg, the numbers of pins were
    left behind. Update them accordingly.
    
    Fixes: e66ff71fd0db ("pinctrl: lewisburg: Update pin list according to v1.1v6")
    Signed-off-by: Yuanyuan Zhong <yzhong@purestorage.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d219743da96cc097d021559c1f15243e02d900df
Author: Eli Cohen <elic@nvidia.com>
Date:   Sun Apr 11 11:36:46 2021 +0300

    vdpa/mlx5: Set err = -ENOMEM in case dma_map_sg_attrs fails
    
    [ Upstream commit be286f84e33da1a7f83142b64dbd86f600e73363 ]
    
    Set err = -ENOMEM if dma_map_sg_attrs() fails so the function reutrns
    error.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20210411083646.910546-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39c8d760d44cb3fa0d67e8cd505df81cf4d80999
Author: James Bottomley <James.Bottomley@HansenPartnership.com>
Date:   Wed Apr 21 15:42:47 2021 -0700

    KEYS: trusted: Fix TPM reservation for seal/unseal
    
    [ Upstream commit 9d5171eab462a63e2fbebfccf6026e92be018f20 ]
    
    The original patch 8c657a0590de ("KEYS: trusted: Reserve TPM for seal
    and unseal operations") was correct on the mailing list:
    
    https://lore.kernel.org/linux-integrity/20210128235621.127925-4-jarkko@kernel.org/
    
    But somehow got rebased so that the tpm_try_get_ops() in
    tpm2_seal_trusted() got lost.  This causes an imbalanced put of the
    TPM ops and causes oopses on TIS based hardware.
    
    This fix puts back the lost tpm_try_get_ops()
    
    Fixes: 8c657a0590de ("KEYS: trusted: Reserve TPM for seal and unseal operations")
    Reported-by: Mimi Zohar <zohar@linux.ibm.com>
    Acked-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7bb634881bf347b7c5636de436a221b1275af09
Author: Tony Lindgren <tony@atomide.com>
Date:   Sat Apr 17 11:38:39 2021 +0300

    gpio: omap: Save and restore sysconfig
    
    [ Upstream commit ddd8d94ca31e768c76cf8bfe34ba7b10136b3694 ]
    
    As we are using cpu_pm to save and restore context, we must also save and
    restore the GPIO sysconfig register. This is needed because we are not
    calling PM runtime functions at all with cpu_pm.
    
    We need to save the sysconfig on idle as it's value can get reconfigured by
    PM runtime and can be different from the init time value. Device specific
    flags like "ti,no-idle-on-init" can affect the init value.
    
    Fixes: b764a5863fd8 ("gpio: omap: Remove custom PM calls and use cpu_pm instead")
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3044b14174a31e49c891d2131f57a55ca4c78edb
Author: Jiansong Chen <Jiansong.Chen@amd.com>
Date:   Mon Apr 19 16:33:22 2021 +0800

    drm/amdgpu: fix GCR_GENERAL_CNTL offset for dimgrey_cavefish
    
    commit 24d034528ef06ad94cfcf4394beac0443ab1b16d upstream.
    
    dimgrey_cavefish has similar gc_10_3 ip with sienna_cichlid,
    so follow its registers offset setting.
    
    Signed-off-by: Jiansong Chen <Jiansong.Chen@amd.com>
    Reviewed-by: Tao Zhou <tao.zhou1@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 517b45ce44dfb686a5401c27636680bdee00209c
Author: Philip Yang <Philip.Yang@amd.com>
Date:   Thu Apr 1 00:22:23 2021 -0400

    drm/amdgpu: reserve fence slot to update page table
    
    commit d42a5b639d15622ece5b9dd12dafd9776efa2593 upstream.
    
    Forgot to reserve a fence slot to use sdma to update page table, cause
    below kernel BUG backtrace to handle vm retry fault while application is
    exiting.
    
    [  133.048143] kernel BUG at /home/yangp/git/compute_staging/kernel/drivers/dma-buf/dma-resv.c:281!
    [  133.048487] Workqueue: events amdgpu_irq_handle_ih1 [amdgpu]
    [  133.048506] RIP: 0010:dma_resv_add_shared_fence+0x204/0x280
    [  133.048672]  amdgpu_vm_sdma_commit+0x134/0x220 [amdgpu]
    [  133.048788]  amdgpu_vm_bo_update_range+0x220/0x250 [amdgpu]
    [  133.048905]  amdgpu_vm_handle_fault+0x202/0x370 [amdgpu]
    [  133.049031]  gmc_v9_0_process_interrupt+0x1ab/0x310 [amdgpu]
    [  133.049165]  ? kgd2kfd_interrupt+0x9a/0x180 [amdgpu]
    [  133.049289]  ? amdgpu_irq_dispatch+0xb6/0x240 [amdgpu]
    [  133.049408]  amdgpu_irq_dispatch+0xb6/0x240 [amdgpu]
    [  133.049534]  amdgpu_ih_process+0x9b/0x1c0 [amdgpu]
    [  133.049657]  amdgpu_irq_handle_ih1+0x21/0x60 [amdgpu]
    [  133.049669]  process_one_work+0x29f/0x640
    [  133.049678]  worker_thread+0x39/0x3f0
    [  133.049685]  ? process_one_work+0x640/0x640
    
    Signed-off-by: Philip Yang <Philip.Yang@amd.com>
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.11.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6da01fd5e429f47fe8df2a37a563801d8706441c
Author: Simon Ser <contact@emersion.fr>
Date:   Fri Mar 26 17:59:44 2021 +0100

    amd/display: allow non-linear multi-planar formats
    
    commit 9ebb6bc0125dfb1e65a53eea4aeecc63d4d6ec2d upstream.
    
    Accept non-linear buffers which use a multi-planar format, as long
    as they don't use DCC.
    
    Tested on GFX9 with NV12.
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Harry Wentland <hwentlan@amd.com>
    Cc: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Cc: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Reviewed-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99e396d86582e4be02c717e93126de5d83f7b8a6
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Apr 23 14:28:51 2021 -0700

    coda: fix reference counting in coda_file_mmap error path
    
    commit 9da29c7f77cd04e5c9150e30f047521b6f20a918 upstream.
    
    mmap_region() now calls fput() on the vma->vm_file.
    
    So we need to drop the extra reference on the coda file instead of the
    host file.
    
    Link: https://lkml.kernel.org/r/20210421132012.82354-1-christian.koenig@amd.com
    Fixes: 1527f926fd04 ("mm: mmap: fix fput in error path v2")
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Acked-by: Jan Harkes <jaharkes@cs.cmu.edu>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: <stable@vger.kernel.org>    [5.11+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f65c0fdb7db2750677bf2cb53e62d7d205c20ab5
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Apr 23 14:28:54 2021 -0700

    ovl: fix reference counting in ovl_mmap error path
    
    commit 2896900e22f8212606a1837d89a6bbce314ceeda upstream.
    
    mmap_region() now calls fput() on the vma->vm_file.
    
    Fix this by using vma_set_file() so it doesn't need to be handled
    manually here any more.
    
    Link: https://lkml.kernel.org/r/20210421132012.82354-2-christian.koenig@amd.com
    Fixes: 1527f926fd04 ("mm: mmap: fix fput in error path v2")
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jan Harkes <jaharkes@cs.cmu.edu>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: <stable@vger.kernel.org>    [5.11+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f96788e307803d3a255c808d38002d329c38ee0
Author: Xie Yongji <xieyongji@bytedance.com>
Date:   Mon Apr 12 17:55:12 2021 +0800

    vhost-vdpa: protect concurrent access to vhost device iotlb
    
    commit a9d064524fc3cf463b3bb14fa63de78aafb40dab upstream.
    
    Protect vhost device iotlb by vhost_dev->mutex. Otherwise,
    it might cause corruption of the list and interval tree in
    struct vhost_iotlb if userspace sends the VHOST_IOTLB_MSG_V2
    message concurrently.
    
    Fixes: 4c8cf318("vhost: introduce vDPA-based backend")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xie Yongji <xieyongji@bytedance.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20210412095512.178-1-xieyongji@bytedance.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
