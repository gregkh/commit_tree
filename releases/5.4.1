commit 79438f37a69a80822333c86acb06a71abce1bce3
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 29 10:10:32 2019 +0100

    Linux 5.4.1

commit fcddcfa746ad108e5a9bc00ddd0cd24cc7b4d2fd
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Nov 13 21:05:44 2019 +1100

    KVM: PPC: Book3S HV: Flush link stack on guest exit to host kernel
    
    commit af2e8c68b9c5403f77096969c516f742f5bb29e0 upstream.
    
    On some systems that are vulnerable to Spectre v2, it is up to
    software to flush the link stack (return address stack), in order to
    protect against Spectre-RSB.
    
    When exiting from a guest we do some house keeping and then
    potentially exit to C code which is several stack frames deep in the
    host kernel. We will then execute a series of returns without
    preceeding calls, opening up the possiblity that the guest could have
    poisoned the link stack, and direct speculative execution of the host
    to a gadget of some sort.
    
    To prevent this we add a flush of the link stack on exit from a guest.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79f6bca3bc524d8b2e29bbc96ad541d13d6d9547
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Nov 13 21:05:41 2019 +1100

    powerpc/book3s64: Fix link stack flush on context switch
    
    commit 39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad upstream.
    
    In commit ee13cb249fab ("powerpc/64s: Add support for software count
    cache flush"), I added support for software to flush the count
    cache (indirect branch cache) on context switch if firmware told us
    that was the required mitigation for Spectre v2.
    
    As part of that code we also added a software flush of the link
    stack (return address stack), which protects against Spectre-RSB
    between user processes.
    
    That is all correct for CPUs that activate that mitigation, which is
    currently Power9 Nimbus DD2.3.
    
    What I got wrong is that on older CPUs, where firmware has disabled
    the count cache, we also need to flush the link stack on context
    switch.
    
    To fix it we create a new feature bit which is not set by firmware,
    which tells us we need to flush the link stack. We set that when
    firmware tells us that either of the existing Spectre v2 mitigations
    are enabled.
    
    Then we adjust the patching code so that if we see that feature bit we
    enable the link stack flush. If we're also told to flush the count
    cache in software then we fall through and do that also.
    
    On the older CPUs we don't need to do do the software count cache
    flush, firmware has disabled it, so in that case we patch in an early
    return after the link stack flush.
    
    The naming of some of the functions is awkward after this patch,
    because they're called "count cache" but they also do link stack. But
    we'll fix that up in a later commit to ease backporting.
    
    This is the fix for CVE-2019-18660.
    
    Reported-by: Anthony Steinhauser <asteinhauser@google.com>
    Fixes: ee13cb249fab ("powerpc/64s: Add support for software count cache flush")
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14c274e717567445c84504a7259dd7b23fb96074
Author: Bernd Porr <mail@berndporr.me.uk>
Date:   Mon Nov 18 23:07:59 2019 +0000

    staging: comedi: usbduxfast: usbduxfast_ai_cmdtest rounding error
    
    commit 5618332e5b955b4bff06d0b88146b971c8dd7b32 upstream.
    
    The userspace comedilib function 'get_cmd_generic_timed' fills
    the cmd structure with an informed guess and then calls the
    function 'usbduxfast_ai_cmdtest' in this driver repeatedly while
    'usbduxfast_ai_cmdtest' is modifying the cmd struct until it
    no longer changes. However, because of rounding errors this never
    converged because 'steps = (cmd->convert_arg * 30) / 1000' and then
    back to 'cmd->convert_arg = (steps * 1000) / 30' won't be the same
    because of rounding errors. 'Steps' should only be converted back to
    the 'convert_arg' if 'steps' has actually been modified. In addition
    the case of steps being 0 wasn't checked which is also now done.
    
    Signed-off-by: Bernd Porr <mail@berndporr.me.uk>
    Cc: <stable@vger.kernel.org> # 4.4+
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20191118230759.1727-1-mail@berndporr.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6618825699ae6f6ffe71bb328407a1bea6aca88c
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Wed Nov 13 11:14:05 2019 +0100

    USB: serial: option: add support for Foxconn T77W968 LTE modules
    
    commit f0797095423e6ea3b4be61134ee353c7f504d440 upstream.
    
    These are the Foxconn-branded variants of the Dell DW5821e modules,
    same USB layout as those. The device exposes AT, NMEA and DIAG ports
    in both USB configurations.
    
    P:  Vendor=0489 ProdID=e0b4 Rev=03.18
    S:  Manufacturer=FII
    S:  Product=T77W968 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    P:  Vendor=0489 ProdID=e0b4 Rev=03.18
    S:  Manufacturer=FII
    S:  Product=T77W968 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 7 Cfg#= 2 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    [ johan: drop id defines ]
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 191243c6503ebf6f2f0b0072cc3f3fdb451f7675
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Thu Nov 7 11:55:08 2019 +0100

    USB: serial: option: add support for DW5821e with eSIM support
    
    commit 957c31ea082e3fe5196f46d5b04018b10de47400 upstream.
    
    The device exposes AT, NMEA and DIAG ports in both USB configurations.
    Exactly same layout as the default DW5821e module, just a different
    vid/pid.
    
    P:  Vendor=413c ProdID=81e0 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5821e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    P:  Vendor=413c ProdID=81e0 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5821e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 7 Cfg#= 2 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef50d287de8e73e7e60206920458865c8174df4e
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 7 14:21:19 2019 +0100

    USB: serial: mos7840: fix remote wakeup
    
    commit 92fe35fb9c70a00d8fbbf5bd6172c921dd9c7815 upstream.
    
    The driver was setting the device remote-wakeup feature during probe in
    violation of the USB specification (which says it should only be set
    just prior to suspending the device). This could potentially waste
    power during suspend as well as lead to spurious wakeups.
    
    Note that USB core would clear the remote-wakeup feature at first
    resume.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c380833817e911c1404e80ddca99162a23d36c3c
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 7 14:21:18 2019 +0100

    USB: serial: mos7720: fix remote wakeup
    
    commit ea422312a462696093b5db59d294439796cba4ad upstream.
    
    The driver was setting the device remote-wakeup feature during probe in
    violation of the USB specification (which says it should only be set
    just prior to suspending the device). This could potentially waste
    power during suspend as well as lead to spurious wakeups.
    
    Note that USB core would clear the remote-wakeup feature at first
    resume.
    
    Fixes: 0f64478cbc7a ("USB: add USB serial mos7720 driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 076b084d68a7521379b20f97311b2e758da06376
Author: Pavel Löbl <pavel@loebl.cz>
Date:   Fri Nov 1 08:01:50 2019 +0100

    USB: serial: mos7840: add USB ID to support Moxa UPort 2210
    
    commit e696d00e65e81d46e911f24b12e441037bf11b38 upstream.
    
    Add USB ID for MOXA UPort 2210. This device contains mos7820 but
    it passes GPIO0 check implemented by driver and it's detected as
    mos7840. Hence product id check is added to force mos7820 mode.
    
    Signed-off-by: Pavel Löbl <pavel@loebl.cz>
    Cc: stable <stable@vger.kernel.org>
    [ johan: rename id defines and add vendor-id check ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04484bed9f24895dcf5068bf7e2b8d7b0718ee79
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Nov 6 13:49:01 2019 +0100

    appledisplay: fix error handling in the scheduled work
    
    commit 91feb01596e5efc0cc922cc73f5583114dccf4d2 upstream.
    
    The work item can operate on
    
    1. stale memory left over from the last transfer
    the actual length of the data transfered needs to be checked
    2. memory already freed
    the error handling in appledisplay_probe() needs
    to cancel the work in that case
    
    Reported-and-tested-by: syzbot+495dab1f175edc9c2f13@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191106124902.7765-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 878389a536df97d8160d0227186ef2f030f4d447
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 7 15:28:55 2019 +0100

    USB: chaoskey: fix error case of a timeout
    
    commit 92aa5986f4f7b5a8bf282ca0f50967f4326559f5 upstream.
    
    In case of a timeout or if a signal aborts a read
    communication with the device needs to be ended
    lest we overwrite an active URB the next time we
    do IO to the device, as the URB may still be active.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191107142856.16774-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e8311ef18ebb18376fd22b31835c86e72f6bb18
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Nov 18 10:21:19 2019 +0100

    usb-serial: cp201x: support Mark-10 digital force gauge
    
    commit 347bc8cb26388791c5881a3775cb14a3f765a674 upstream.
    
    Add support for the Mark-10 digital force gauge device to the cp201x
    driver.
    
    Based on a report and a larger patch from Joel Jennings
    
    Reported-by: Joel Jennings <joel.jennings@makeitlabs.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191118092119.GA153852@kroah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 274e0f1aee19221dd985061c525adddcd418d71e
Author: Suwan Kim <suwan.kim027@gmail.com>
Date:   Mon Nov 11 23:10:35 2019 +0900

    usbip: Fix uninitialized symbol 'nents' in stub_recv_cmd_submit()
    
    commit 2a9125317b247f2cf35c196f968906dcf062ae2d upstream.
    
    Smatch reported that nents is not initialized and used in
    stub_recv_cmd_submit(). nents is currently initialized by sgl_alloc()
    and used to allocate multiple URBs when host controller doesn't
    support scatter-gather DMA. The use of uninitialized nents means that
    buf_len is zero and use_sg is true. But buffer length should not be
    zero when an URB uses scatter-gather DMA.
    
    To prevent this situation, add the conditional that checks buf_len
    and use_sg. And move the use of nents right after the sgl_alloc() to
    avoid the use of uninitialized nents.
    
    If the error occurs, it adds SDEV_EVENT_ERROR_MALLOC and stub_priv
    will be released by stub event handler and connection will be shut
    down.
    
    Fixes: ea44d190764b ("usbip: Implement SG support to vhci-hcd and stub driver")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suwan Kim <suwan.kim027@gmail.com>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191111141035.27788-1-suwan.kim027@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b6ae97d2356e875d6b9113e46cce5ca700ed67f
Author: Hewenliang <hewenliang4@huawei.com>
Date:   Fri Oct 25 00:35:15 2019 -0400

    usbip: tools: fix fd leakage in the function of read_attr_usbip_status
    
    commit 26a4d4c00f85cb844dd11dd35e848b079c2f5e8f upstream.
    
    We should close the fd before the return of read_attr_usbip_status.
    
    Fixes: 3391ba0e2792 ("usbip: tools: Extract generic code to be shared with vudc backend")
    Signed-off-by: Hewenliang <hewenliang4@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191025043515.20053-1-hewenliang4@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c22dc75848f8c6404b1a213aba68b712f17eee3
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Nov 12 16:49:39 2019 +0100

    USBIP: add config dependency for SGL_ALLOC
    
    commit 1ec13abac58b6f24e32f0d3081ef4e7456e62ed8 upstream.
    
    USBIP uses lib/scatterlist.h
    Hence it needs to set CONFIG_SGL_ALLOC
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20191112154939.21217-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b730b2ceb2cfd953031242cd562f0b17cd6d6e07
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 22 14:20:00 2019 +0100

    ALSA: hda - Disable audio component for legacy Nvidia HDMI codecs
    
    commit 5a858e79c911330678b5a9be91a24830e94a0dc9 upstream.
    
    The old Nvidia chips have multiple HD-audio codecs on the same
    HD-audio controller, and this doesn't work as expected with the current
    audio component binding that is implemented under the one-codec-per-
    controller assumption; at the probe time, the driver leads to several
    kernel WARNING messages.
    
    For the proper support, we may change the pin2port and port2pin to
    traverse the codec list per the given pin number, but this needs more
    development and testing.
    
    As a quick workaround, instead, this patch drops the binding in the
    audio side for these legacy chips since the audio component support in
    nouveau graphics driver is still not merged (hence it's basically
    unused).
    
    [ Unlike the original commit, this patch actually disables the audio
      component binding for all Nvidia chips, not only for legacy chips.
      It doesn't matter much, though: nouveau gfx driver still doesn't
      provide the audio component binding on 5.4.y, so it's only a
      placeholder for now.  Also, another difference from the original
      commit is that this removes the nvhdmi_audio_ops and other
      definitions completely in order to avoid a compile warning due to
      unused stuff.  -- tiwai ]
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205625
    Fixes: ade49db337a9 ("ALSA: hda/hdmi - Allow audio component for AMD/ATI and Nvidia HDMI")
    Link: https://lore.kernel.org/r/20191122132000.4460-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5567384fec53d7187bca4e367ba717c678ad0069
Author: A Sun <as1033x@comcast.net>
Date:   Fri Sep 6 09:17:20 2019 -0300

    media: mceusb: fix out of bounds read in MCE receiver buffer
    
    commit e43148645d18efc3072b1ba45afaa3f385299e55 upstream.
    
    Fix multiple cases of out of bounds (OOB) read associated with
    MCE device receive/input data handling.
    
    In reference for the OOB cases below, the incoming/read (byte) data
    format when the MCE device responds to a command is:
        { cmd_prefix, subcmd, data0, data1, ... }
    where cmd_prefix are:
        MCE_CMD_PORT_SYS
        MCE_CMD_PORT_IR
    and subcmd examples are:
        MCE_RSP_GETPORTSTATUS
        MCE_RSP_EQIRNUMPORTS
        ...
    Response size dynamically depends on cmd_prefix and subcmd.
    So data0, data1, ... may or may not be present on input.
    Multiple responses may return in a single receiver buffer.
    
    The trigger condition for OOB read is typically random or
    corrupt input data that fills the mceusb receiver buffer.
    
    Case 1:
    
    mceusb_handle_command() reads data0 (var hi) and data1 (var lo)
    regardless of whether the response includes such data.
    If { cmd_prefix, subcmd } is at the end of the receiver buffer,
    read past end of buffer occurs.
    
    This case was reported by
    KASAN: slab-out-of-bounds Read in mceusb_dev_recv
    https://syzkaller.appspot.com/bug?extid=c7fdb6cb36e65f2fe8c9
    
    Fix: In mceusb_handle_command(), change variable hi and lo to
    pointers, and dereference only when required.
    
    Case 2:
    
    If response with data is truncated at end of buffer after
    { cmd_prefix, subcmd }, mceusb_handle_command() reads past
    end of buffer for data0, data1, ...
    
    Fix: In mceusb_process_ir_data(), check response size with
    remaining buffer size before invoking mceusb_handle_command().
    +    if (i + ir->rem < buf_len)
                mceusb_handle_command(ir, &ir->buf_in[i - 1]);
    
    Case 3:
    
    mceusb_handle_command() handles invalid/bad response such as
    { 0x??, MCE_RSP_GETPORTSTATUS } of length 2 as a response
    { MCE_CMD_PORT_SYS, MCE_RSP_GETPORTSTATUS, data0, ... }
    of length 7. Read OOB occurs for non-existent data0, data1, ...
    Cause is mceusb_handle_command() does not check cmd_prefix value.
    
    Fix: mceusb_handle_command() must test both cmd_prefix and subcmd.
    
    Case 4:
    
    mceusb_process_ir_data() receiver parser state SUBCMD is
    possible at start (i=0) of receiver buffer resulting in buffer
    offset=-1 passed to mceusb_dev_printdata().
    Bad offset results in OOB read before start of buffer.
    
    [1214218.580308] mceusb 1-1.3:1.0: rx data[0]: 00 80 (length=2)
    [1214218.580323] mceusb 1-1.3:1.0: Unknown command 0x00 0x80
    ...
    [1214218.580406] mceusb 1-1.3:1.0: rx data[14]: 7f 7f (length=2)
    [1214218.679311] mceusb 1-1.3:1.0: rx data[-1]: 80 90 (length=2)
    [1214218.679325] mceusb 1-1.3:1.0: End of raw IR data
    [1214218.679340] mceusb 1-1.3:1.0: rx data[1]: 7f 7f (length=2)
    
    Fix: If parser_state is SUBCMD after processing receiver buffer,
    reset parser_state to CMD_HEADER.
    In effect, discard cmd_prefix at end of receiver buffer.
    In mceusb_dev_printdata(), abort if buffer offset is out of bounds.
    
    Case 5:
    
    If response with data is truncated at end of buffer after
    { cmd_prefix, subcmd }, mceusb_dev_printdata() reads past
    end of buffer for data0, data1, ...
    while decoding the response to print out.
    
    Fix: In mceusb_dev_printdata(), remove unneeded buffer offset
    adjustments (var start and var skip) associated with MCE gen1 header.
    Test for truncated MCE cmd response (compare offset+len with buf_len)
    and skip decoding of incomplete response.
    Move IR data tracing to execute before the truncation test.
    
    Signed-off-by: A Sun <as1033x@comcast.net>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eff2ccdfd2a6d91b27405d4eed25061fa778acbc
Author: Sean Young <sean@mess.org>
Date:   Wed Oct 16 14:19:15 2019 -0300

    media: imon: invalid dereference in imon_touch_event
    
    commit f3f5ba42c58d56d50f539854d8cc188944e96087 upstream.
    
    The touch timer is set up in intf1. If the second interface does not exist,
    the timer and touch input device are not setup and we get the following
    error, when touch events are reported via intf0.
    
    kernel BUG at kernel/time/timer.c:956!
    invalid opcode: 0000 [#1] SMP KASAN
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.0-rc1+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__mod_timer kernel/time/timer.c:956 [inline]
    RIP: 0010:__mod_timer kernel/time/timer.c:949 [inline]
    RIP: 0010:mod_timer+0x5a2/0xb50 kernel/time/timer.c:1100
    Code: 45 10 c7 44 24 14 ff ff ff ff 48 89 44 24 08 48 8d 45 20 48 c7 44 24 18 00 00 00 00 48 89 04 24 e9 5a fc ff ff e8 ae ce 0e 00 <0f> 0b e8 a7 ce 0e 00 4c 89 74 24 20 e9 37 fe ff ff e8 98 ce 0e 00
    RSP: 0018:ffff8881db209930 EFLAGS: 00010006
    RAX: ffffffff86c2b200 RBX: 00000000ffffa688 RCX: ffffffff83efc583
    RDX: 0000000000000100 RSI: ffffffff812f4d82 RDI: ffff8881d2356200
    RBP: ffff8881d23561e8 R08: ffffffff86c2b200 R09: ffffed103a46abeb
    R10: ffffed103a46abea R11: ffff8881d2355f53 R12: dffffc0000000000
    R13: 1ffff1103b64132d R14: ffff8881d2355f50 R15: 0000000000000006
    FS:  0000000000000000(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f75e2799000 CR3: 00000001d3b07000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     imon_touch_event drivers/media/rc/imon.c:1348 [inline]
     imon_incoming_packet.isra.0+0x2546/0x2f10 drivers/media/rc/imon.c:1603
     usb_rx_callback_intf0+0x151/0x1e0 drivers/media/rc/imon.c:1734
     __usb_hcd_giveback_urb+0x1f2/0x470 drivers/usb/core/hcd.c:1654
     usb_hcd_giveback_urb+0x368/0x420 drivers/usb/core/hcd.c:1719
     dummy_timer+0x120f/0x2fa2 drivers/usb/gadget/udc/dummy_hcd.c:1965
     call_timer_fn+0x179/0x650 kernel/time/timer.c:1404
     expire_timers kernel/time/timer.c:1449 [inline]
     __run_timers kernel/time/timer.c:1773 [inline]
     __run_timers kernel/time/timer.c:1740 [inline]
     run_timer_softirq+0x5e3/0x1490 kernel/time/timer.c:1786
     __do_softirq+0x221/0x912 kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0x178/0x1a0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x12f/0x500 arch/x86/kernel/apic/apic.c:1137
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     </IRQ>
    RIP: 0010:default_idle+0x28/0x2e0 arch/x86/kernel/process.c:581
    Code: 90 90 41 56 41 55 65 44 8b 2d 44 3a 8f 7a 41 54 55 53 0f 1f 44 00 00 e8 36 ee d0 fb e9 07 00 00 00 0f 00 2d fa dd 4f 00 fb f4 <65> 44 8b 2d 20 3a 8f 7a 0f 1f 44 00 00 5b 5d 41 5c 41 5d 41 5e c3
    RSP: 0018:ffffffff86c07da8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13
    RAX: 0000000000000007 RBX: ffffffff86c2b200 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: 0000000000000006 RDI: ffffffff86c2ba4c
    RBP: fffffbfff0d85640 R08: ffffffff86c2b200 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x3b6/0x500 kernel/sched/idle.c:263
     cpu_startup_entry+0x14/0x20 kernel/sched/idle.c:355
     start_kernel+0x82a/0x864 init/main.c:784
     secondary_startup_64+0xa4/0xb0 arch/x86/kernel/head_64.S:241
    Modules linked in:
    
    Reported-by: syzbot+f49d12d34f2321cf4df2@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b96f53c1659385cc660e82542879d59f7cfc16ee
Author: Vito Caputo <vcaputo@pengaru.com>
Date:   Sun Oct 13 23:08:45 2019 -0300

    media: cxusb: detect cxusb_ctrl_msg error in query
    
    commit ca8f245f284eeffa56f3b7a5eb6fc503159ee028 upstream.
    
    Don't use uninitialized ircode[] in cxusb_rc_query() when
    cxusb_ctrl_msg() fails to populate its contents.
    
    syzbot reported:
    
    dvb-usb: bulk message failed: -22 (1/-30591)
    =====================================================
    BUG: KMSAN: uninit-value in ir_lookup_by_scancode drivers/media/rc/rc-main.c:494 [inline]
    BUG: KMSAN: uninit-value in rc_g_keycode_from_table drivers/media/rc/rc-main.c:582 [inline]
    BUG: KMSAN: uninit-value in rc_keydown+0x1a6/0x6f0 drivers/media/rc/rc-main.c:816
    CPU: 1 PID: 11436 Comm: kworker/1:2 Not tainted 5.3.0-rc7+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events dvb_usb_read_remote_control
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x191/0x1f0 lib/dump_stack.c:113
     kmsan_report+0x13a/0x2b0 mm/kmsan/kmsan_report.c:108
     __msan_warning+0x73/0xe0 mm/kmsan/kmsan_instr.c:250
     bsearch+0x1dd/0x250 lib/bsearch.c:41
     ir_lookup_by_scancode drivers/media/rc/rc-main.c:494 [inline]
     rc_g_keycode_from_table drivers/media/rc/rc-main.c:582 [inline]
     rc_keydown+0x1a6/0x6f0 drivers/media/rc/rc-main.c:816
     cxusb_rc_query+0x2e1/0x360 drivers/media/usb/dvb-usb/cxusb.c:548
     dvb_usb_read_remote_control+0xf9/0x290 drivers/media/usb/dvb-usb/dvb-usb-remote.c:261
     process_one_work+0x1572/0x1ef0 kernel/workqueue.c:2269
     worker_thread+0x111b/0x2460 kernel/workqueue.c:2415
     kthread+0x4b5/0x4f0 kernel/kthread.c:256
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:355
    
    Uninit was stored to memory at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:150 [inline]
     kmsan_internal_chain_origin+0xd2/0x170 mm/kmsan/kmsan.c:314
     __msan_chain_origin+0x6b/0xe0 mm/kmsan/kmsan_instr.c:184
     rc_g_keycode_from_table drivers/media/rc/rc-main.c:583 [inline]
     rc_keydown+0x2c4/0x6f0 drivers/media/rc/rc-main.c:816
     cxusb_rc_query+0x2e1/0x360 drivers/media/usb/dvb-usb/cxusb.c:548
     dvb_usb_read_remote_control+0xf9/0x290 drivers/media/usb/dvb-usb/dvb-usb-remote.c:261
     process_one_work+0x1572/0x1ef0 kernel/workqueue.c:2269
     worker_thread+0x111b/0x2460 kernel/workqueue.c:2415
     kthread+0x4b5/0x4f0 kernel/kthread.c:256
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:355
    
    Local variable description: ----ircode@cxusb_rc_query
    Variable was created at:
     cxusb_rc_query+0x4d/0x360 drivers/media/usb/dvb-usb/cxusb.c:543
     dvb_usb_read_remote_control+0xf9/0x290 drivers/media/usb/dvb-usb/dvb-usb-remote.c:261
    
    Signed-off-by: Vito Caputo <vcaputo@pengaru.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acfcb05fbdb8ee3aad4359372c1b238a366b5355
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Jul 30 09:48:27 2019 +0200

    media: b2c2-flexcop-usb: add sanity checking
    
    commit 1b976fc6d684e3282914cdbe7a8d68fdce19095c upstream.
    
    The driver needs an isochronous endpoint to be present. It will
    oops in its absence. Add checking for it.
    
    Reported-by: syzbot+d93dff37e6a89431c158@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc12e3da6ac8d8ff7869ac1d40baeca1312808eb
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Mon Jul 29 23:14:55 2019 -0300

    media: uvcvideo: Fix error path in control parsing failure
    
    commit 8c279e9394cade640ed86ec6c6645a0e7df5e0b6 upstream.
    
    When parsing the UVC control descriptors fails, the error path tries to
    cleanup a media device that hasn't been initialised, potentially
    resulting in a crash. Fix this by initialising the media device before
    the error handling path can be reached.
    
    Fixes: 5a254d751e52 ("[media] uvcvideo: Register a v4l2_device")
    Reported-by: syzbot+c86454eb3af9e8a4da20@syzkaller.appspotmail.com
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc3b55ef2c840bb2746b2d8121a0788de84f7fac
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:46 2019 +0100

    futex: Prevent exit livelock
    
    commit 3ef240eaff36b8119ac9e2ea17cbf41179c930ba upstream.
    
    Oleg provided the following test case:
    
    int main(void)
    {
            struct sched_param sp = {};
    
            sp.sched_priority = 2;
            assert(sched_setscheduler(0, SCHED_FIFO, &sp) == 0);
    
            int lock = vfork();
            if (!lock) {
                    sp.sched_priority = 1;
                    assert(sched_setscheduler(0, SCHED_FIFO, &sp) == 0);
                    _exit(0);
            }
    
            syscall(__NR_futex, &lock, FUTEX_LOCK_PI, 0,0,0);
            return 0;
    }
    
    This creates an unkillable RT process spinning in futex_lock_pi() on a UP
    machine or if the process is affine to a single CPU. The reason is:
    
     parent                                 child
    
      set FIFO prio 2
    
      vfork()                       ->      set FIFO prio 1
       implies wait_for_child()             sched_setscheduler(...)
                                            exit()
                                            do_exit()
                                            ....
                                            mm_release()
                                              tsk->futex_state = FUTEX_STATE_EXITING;
                                              exit_futex(); (NOOP in this case)
                                              complete() --> wakes parent
      sys_futex()
        loop infinite because
        tsk->futex_state == FUTEX_STATE_EXITING
    
    The same problem can happen just by regular preemption as well:
    
      task holds futex
      ...
      do_exit()
        tsk->futex_state = FUTEX_STATE_EXITING;
    
      --> preemption (unrelated wakeup of some other higher prio task, e.g. timer)
    
      switch_to(other_task)
    
      return to user
      sys_futex()
            loop infinite as above
    
    Just for the fun of it the futex exit cleanup could trigger the wakeup
    itself before the task sets its futex state to DEAD.
    
    To cure this, the handling of the exiting owner is changed so:
    
       - A refcount is held on the task
    
       - The task pointer is stored in a caller visible location
    
       - The caller drops all locks (hash bucket, mmap_sem) and blocks
         on task::futex_exit_mutex. When the mutex is acquired then
         the exiting task has completed the cleanup and the state
         is consistent and can be reevaluated.
    
    This is not a pretty solution, but there is no choice other than returning
    an error code to user space, which would break the state consistency
    guarantee and open another can of problems including regressions.
    
    For stable backports the preparatory commits ac31c7ff8624 .. ba31c1a48538
    are required as well, but for anything older than 5.3.y the backports are
    going to be provided when this hits mainline as the other dependencies for
    those kernels are definitely not stable material.
    
    Fixes: 778e9a9c3e71 ("pi-futex: fix exit races and locking problems")
    Reported-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Stable Team <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20191106224557.041676471@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56690612a91e23170036d6180ee8ca2f0270c10d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:45 2019 +0100

    futex: Provide distinct return value when owner is exiting
    
    commit ac31c7ff8624409ba3c4901df9237a616c187a5d upstream.
    
    attach_to_pi_owner() returns -EAGAIN for various cases:
    
     - Owner task is exiting
     - Futex value has changed
    
    The caller drops the held locks (hash bucket, mmap_sem) and retries the
    operation. In case of the owner task exiting this can result in a live
    lock.
    
    As a preparatory step for seperating those cases, provide a distinct return
    value (EBUSY) for the owner exiting case.
    
    No functional change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.935606117@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3ba1e8d5c7dddcd36415e9f341274967f073794
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:44 2019 +0100

    futex: Add mutex around futex exit
    
    commit 3f186d974826847a07bc7964d79ec4eded475ad9 upstream.
    
    The mutex will be used in subsequent changes to replace the busy looping of
    a waiter when the futex owner is currently executing the exit cleanup to
    prevent a potential live lock.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.845798895@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 172b09ddc38d1b77b502df3ff7d5c925595b6026
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:43 2019 +0100

    futex: Provide state handling for exec() as well
    
    commit af8cbda2cfcaa5515d61ec500498d46e9a8247e2 upstream.
    
    exec() attempts to handle potentially held futexes gracefully by running
    the futex exit handling code like exit() does.
    
    The current implementation has no protection against concurrent incoming
    waiters. The reason is that the futex state cannot be set to
    FUTEX_STATE_DEAD after the cleanup because the task struct is still active
    and just about to execute the new binary.
    
    While its arguably buggy when a task holds a futex over exec(), for
    consistency sake the state handling can at least cover the actual futex
    exit cleanup section. This provides state consistency protection accross
    the cleanup. As the futex state of the task becomes FUTEX_STATE_OK after the
    cleanup has been finished, this cannot prevent subsequent attempts to
    attach to the task in case that the cleanup was not successfull in mopping
    up all leftovers.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.753355618@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 398902dbc8464d4e1bdf77bf1e4716a283ff5562
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:42 2019 +0100

    futex: Sanitize exit state handling
    
    commit 4a8e991b91aca9e20705d434677ac013974e0e30 upstream.
    
    Instead of having a smp_mb() and an empty lock/unlock of task::pi_lock move
    the state setting into to the lock section.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.645603214@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2f4e10676f7c1ae38a881afa265585365730c81
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:41 2019 +0100

    futex: Mark the begin of futex exit explicitly
    
    commit 18f694385c4fd77a09851fd301236746ca83f3cb upstream.
    
    Instead of relying on PF_EXITING use an explicit state for the futex exit
    and set it in the futex exit function. This moves the smp barrier and the
    lock/unlock serialization into the futex code.
    
    As with the DEAD state this is restricted to the exit path as exec
    continues to use the same task struct.
    
    This allows to simplify that logic in a next step.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.539409004@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 350a30ce849da8736601ba28ae3d5f3f10804343
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:40 2019 +0100

    futex: Set task::futex_state to DEAD right after handling futex exit
    
    commit f24f22435dcc11389acc87e5586239c1819d217c upstream.
    
    Setting task::futex_state in do_exit() is rather arbitrarily placed for no
    reason. Move it into the futex code.
    
    Note, this is only done for the exit cleanup as the exec cleanup cannot set
    the state to FUTEX_STATE_DEAD because the task struct is still in active
    use.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.439511191@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bcee233700efc9a038b30bea25cc04163da4020
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:39 2019 +0100

    futex: Split futex_mm_release() for exit/exec
    
    commit 150d71584b12809144b8145b817e83b81158ae5f upstream.
    
    To allow separate handling of the futex exit state in the futex exit code
    for exit and exec, split futex_mm_release() into two functions and invoke
    them from the corresponding exit/exec_mm_release() callsites.
    
    Preparatory only, no functional change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.332094221@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d7e93588fe2843e7bac3b258a8ad91049b2c4b5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:38 2019 +0100

    exit/exec: Seperate mm_release()
    
    commit 4610ba7ad877fafc0a25a30c6c82015304120426 upstream.
    
    mm_release() contains the futex exit handling. mm_release() is called from
    do_exit()->exit_mm() and from exec()->exec_mm().
    
    In the exit_mm() case PF_EXITING and the futex state is updated. In the
    exec_mm() case these states are not touched.
    
    As the futex exit code needs further protections against exit races, this
    needs to be split into two functions.
    
    Preparatory only, no functional change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.240518241@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52507cfaffe900c4d23931e9863bd54b4b980d65
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:37 2019 +0100

    futex: Replace PF_EXITPIDONE with a state
    
    commit 3d4775df0a89240f671861c6ab6e8d59af8e9e41 upstream.
    
    The futex exit handling relies on PF_ flags. That's suboptimal as it
    requires a smp_mb() and an ugly lock/unlock of the exiting tasks pi_lock in
    the middle of do_exit() to enforce the observability of PF_EXITING in the
    futex code.
    
    Add a futex_state member to task_struct and convert the PF_EXITPIDONE logic
    over to the new state. The PF_EXITING dependency will be cleaned up in a
    later step.
    
    This prepares for handling various futex exit issues later.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.149449274@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8012f98f92b6567ad42e2dec1d2d3739df1c5f96
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 6 22:55:36 2019 +0100

    futex: Move futex exit handling into futex code
    
    commit ba31c1a48538992316cc71ce94fa9cd3e7b427c0 upstream.
    
    The futex exit handling is #ifdeffed into mm_release() which is not pretty
    to begin with. But upcoming changes to address futex exit races need to add
    more functionality to this exit code.
    
    Split it out into a function, move it into futex code and make the various
    futex exit functions static.
    
    Preparatory only and no functional change.
    
    Folded build fix from Borislav.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20191106224556.049705556@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba386ec3d7cfcfcb7a8b3efa417354a7794ec578
Author: Kai Shen <shenkai8@huawei.com>
Date:   Thu Nov 7 05:08:17 2019 +0000

    cpufreq: Add NULL checks to show() and store() methods of cpufreq
    
    commit e6e8df07268c1f75dd9215536e2ce4587b70f977 upstream.
    
    Add NULL checks to show() and store() in cpufreq.c to avoid attempts
    to invoke a NULL callback.
    
    Though some interfaces of cpufreq are set as read-only, users can
    still get write permission using chmod which can lead to a kernel
    crash, as follows:
    
    chmod +w /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    echo 1 >  /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    
    This bug was found in linux 4.19.
    
    Signed-off-by: Kai Shen <shenkai8@huawei.com>
    Reported-by: Feilong Lin <linfeilong@huawei.com>
    Reviewed-by: Feilong Lin <linfeilong@huawei.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    [ rjw: Subject & changelog ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3143cd5f000bf5141a56c9f28545faf09e8e0163
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 7 12:09:53 2019 -0300

    media: usbvision: Fix races among open, close, and disconnect
    
    commit 9e08117c9d4efc1e1bc6fce83dab856d9fd284b6 upstream.
    
    Visual inspection of the usbvision driver shows that it suffers from
    three races between its open, close, and disconnect handlers.  In
    particular, the driver is careful to update its usbvision->user and
    usbvision->remove_pending flags while holding the private mutex, but:
    
            usbvision_v4l2_close() and usbvision_radio_close() don't hold
            the mutex while they check the value of
            usbvision->remove_pending;
    
            usbvision_disconnect() doesn't hold the mutex while checking
            the value of usbvision->user; and
    
            also, usbvision_v4l2_open() and usbvision_radio_open() don't
            check whether the device has been unplugged before allowing
            the user to open the device files.
    
    Each of these can potentially lead to usbvision_release() being called
    twice and use-after-free errors.
    
    This patch fixes the races by reading the flags while the mutex is
    still held and checking for pending removes before allowing an open to
    succeed.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddac4e34010ac954c840274d4c0b0fd4eabc09ae
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 7 12:09:04 2019 -0300

    media: usbvision: Fix invalid accesses after device disconnect
    
    commit c7a191464078262bf799136317c95824e26a222b upstream.
    
    The syzbot fuzzer found two invalid-access bugs in the usbvision
    driver.  These bugs occur when userspace keeps the device file open
    after the device has been disconnected and usbvision_disconnect() has
    set usbvision->dev to NULL:
    
            When the device file is closed, usbvision_radio_close() tries
            to issue a usb_set_interface() call, passing the NULL pointer
            as its first argument.
    
            If userspace performs a querycap ioctl call, vidioc_querycap()
            calls usb_make_path() with the same NULL pointer.
    
    This patch fixes the problems by making the appropriate tests
    beforehand.  Note that vidioc_querycap() is protected by
    usbvision->v4l2_lock, acquired in a higher layer of the V4L2
    subsystem.
    
    Reported-and-tested-by: syzbot+7fa38a608b1075dfd634@syzkaller.appspotmail.com
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa7ad7e991e6cb0c3a1825dbe7f78c2a8116ccc
Author: Alexander Popov <alex.popov@linux.com>
Date:   Sun Nov 3 23:17:19 2019 +0100

    media: vivid: Fix wrong locking that causes race conditions on streaming stop
    
    commit 6dcd5d7a7a29c1e4b8016a06aed78cd650cd8c27 upstream.
    
    There is the same incorrect approach to locking implemented in
    vivid_stop_generating_vid_cap(), vivid_stop_generating_vid_out() and
    sdr_cap_stop_streaming().
    
    These functions are called during streaming stopping with vivid_dev.mutex
    locked. And they all do the same mistake while stopping their kthreads,
    which need to lock this mutex as well. See the example from
    vivid_stop_generating_vid_cap():
      /* shutdown control thread */
      vivid_grab_controls(dev, false);
      mutex_unlock(&dev->mutex);
      kthread_stop(dev->kthread_vid_cap);
      dev->kthread_vid_cap = NULL;
      mutex_lock(&dev->mutex);
    
    But when this mutex is unlocked, another vb2_fop_read() can lock it
    instead of vivid_thread_vid_cap() and manipulate the buffer queue.
    That causes a use-after-free access later.
    
    To fix those issues let's:
      1. avoid unlocking the mutex in vivid_stop_generating_vid_cap(),
    vivid_stop_generating_vid_out() and sdr_cap_stop_streaming();
      2. use mutex_trylock() with schedule_timeout_uninterruptible() in
    the loops of the vivid kthread handlers.
    
    Signed-off-by: Alexander Popov <alex.popov@linux.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Tested-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v3.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92edb64da943463aa19dd7997b943cf548500ea2
Author: Vandana BN <bnvandana@gmail.com>
Date:   Mon Sep 9 06:43:31 2019 -0300

    media: vivid: Set vid_cap_streaming and vid_out_streaming to true
    
    commit b4add02d2236fd5f568db141cfd8eb4290972eb3 upstream.
    
    When vbi stream is started, followed by video streaming,
    the vid_cap_streaming and vid_out_streaming were not being set to true,
    which would cause the video stream to stop when vbi stream is stopped.
    This patch allows to set vid_cap_streaming and vid_out_streaming to true.
    According to Hans Verkuil it appears that these 'if (dev->kthread_vid_cap)'
    checks are a left-over from the original vivid development and should never
    have been there.
    
    Signed-off-by: Vandana BN <bnvandana@gmail.com>
    Cc: <stable@vger.kernel.org>      # for v3.18 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9756233a20d80a3a86d8553179956653b02cb543
Author: Geoffrey D. Bennett <g@b4.vu>
Date:   Mon Nov 11 00:13:56 2019 +1030

    ALSA: usb-audio: Fix Scarlett 6i6 Gen 2 port data
    
    commit ce3cba788a1b7b8aed9380c3035d9e850884bd2d upstream.
    
    The s6i6_gen2_info.ports[] array had the Mixer and PCM port type
    entries in the wrong place. Use designators to explicitly specify the
    array elements being set.
    
    Fixes: 9e4d5c1be21f ("ALSA: usb-audio: Scarlett Gen 2 mixer interface")
    Signed-off-by: Geoffrey D. Bennett <g@b4.vu>
    Tested-by: Alex Fellows <alex.fellows@gmail.com>
    Tested-by: Markus Schroetter <project.m.schroetter@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191110134356.GA31589@b4.vu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d0dc91e847b9ea7e315ad15e4b1da30ca7b0a30
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 22 12:28:40 2019 +0100

    ALSA: usb-audio: Fix NULL dereference at parsing BADD
    
    commit 9435f2bb66874a0c4dd25e7c978957a7ca2c93b1 upstream.
    
    snd_usb_mixer_controls_badd() that parses UAC3 BADD profiles misses a
    NULL check for the given interfaces.  When a malformed USB descriptor
    is passed, this may lead to an Oops, as spotted by syzkaller.
    Skip the iteration if the interface doesn't exist for avoiding the
    crash.
    
    Fixes: 17156f23e93c ("ALSA: usb: add UAC3 BADD profiles support")
    Reported-by: syzbot+a36ab65c6653d7ccdd62@syzkaller.appspotmail.com
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191122112840.24797-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82ca3ab31b9cf23b86436a85381e4c5757bc6b80
Author: Yang Tao <yang.tao172@zte.com.cn>
Date:   Wed Nov 6 22:55:35 2019 +0100

    futex: Prevent robust futex exit race
    
    commit ca16d5bee59807bf04deaab0a8eccecd5061528c upstream.
    
    Robust futexes utilize the robust_list mechanism to allow the kernel to
    release futexes which are held when a task exits. The exit can be voluntary
    or caused by a signal or fault. This prevents that waiters block forever.
    
    The futex operations in user space store a pointer to the futex they are
    either locking or unlocking in the op_pending member of the per task robust
    list.
    
    After a lock operation has succeeded the futex is queued in the robust list
    linked list and the op_pending pointer is cleared.
    
    After an unlock operation has succeeded the futex is removed from the
    robust list linked list and the op_pending pointer is cleared.
    
    The robust list exit code checks for the pending operation and any futex
    which is queued in the linked list. It carefully checks whether the futex
    value is the TID of the exiting task. If so, it sets the OWNER_DIED bit and
    tries to wake up a potential waiter.
    
    This is race free for the lock operation but unlock has two race scenarios
    where waiters might not be woken up. These issues can be observed with
    regular robust pthread mutexes. PI aware pthread mutexes are not affected.
    
    (1) Unlocking task is killed after unlocking the futex value in user space
        before being able to wake a waiter.
    
            pthread_mutex_unlock()
                    |
                    V
            atomic_exchange_rel (&mutex->__data.__lock, 0)
                            <------------------------killed
                lll_futex_wake ()                   |
                                                    |
                                                    |(__lock = 0)
                                                    |(enter kernel)
                                                    |
                                                    V
                                                do_exit()
                                                exit_mm()
                                              mm_release()
                                            exit_robust_list()
                                            handle_futex_death()
                                                    |
                                                    |(__lock = 0)
                                                    |(uval = 0)
                                                    |
                                                    V
            if ((uval & FUTEX_TID_MASK) != task_pid_vnr(curr))
                    return 0;
    
        The sanity check which ensures that the user space futex is owned by
        the exiting task prevents the wakeup of waiters which in consequence
        block infinitely.
    
    (2) Waiting task is killed after a wakeup and before it can acquire the
        futex in user space.
    
            OWNER                         WAITER
                                    futex_wait()
       pthread_mutex_unlock()               |
                    |                       |
                    |(__lock = 0)           |
                    |                       |
                    V                       |
             futex_wake() ------------>  wakeup()
                                            |
                                            |(return to userspace)
                                            |(__lock = 0)
                                            |
                                            V
                            oldval = mutex->__data.__lock
                                              <-----------------killed
        atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,  |
                            id | assume_other_futex_waiters, 0)      |
                                                                     |
                                                                     |
                                                       (enter kernel)|
                                                                     |
                                                                     V
                                                             do_exit()
                                                            |
                                                            |
                                                            V
                                            handle_futex_death()
                                            |
                                            |(__lock = 0)
                                            |(uval = 0)
                                            |
                                            V
            if ((uval & FUTEX_TID_MASK) != task_pid_vnr(curr))
                    return 0;
    
        The sanity check which ensures that the user space futex is owned
        by the exiting task prevents the wakeup of waiters, which seems to
        be correct as the exiting task does not own the futex value, but
        the consequence is that other waiters wont be woken up and block
        infinitely.
    
    In both scenarios the following conditions are true:
    
       - task->robust_list->list_op_pending != NULL
       - user space futex value == 0
       - Regular futex (not PI)
    
    If these conditions are met then it is reasonably safe to wake up a
    potential waiter in order to prevent the above problems.
    
    As this might be a false positive it can cause spurious wakeups, but the
    waiter side has to handle other types of unrelated wakeups, e.g. signals
    gracefully anyway. So such a spurious wakeup will not affect the
    correctness of these operations.
    
    This workaround must not touch the user space futex value and cannot set
    the OWNER_DIED bit because the lock value is 0, i.e. uncontended. Setting
    OWNER_DIED in this case would result in inconsistent state and subsequently
    in malfunction of the owner died handling in user space.
    
    The rest of the user space state is still consistent as no other task can
    observe the list_op_pending entry in the exiting tasks robust list.
    
    The eventually woken up waiter will observe the uncontended lock value and
    take it over.
    
    [ tglx: Massaged changelog and comment. Made the return explicit and not
            depend on the subsequent check and added constants to hand into
            handle_futex_death() instead of plain numbers. Fixed a few coding
            style issues. ]
    
    Fixes: 0771dfefc9e5 ("[PATCH] lightweight robust futexes: core")
    Signed-off-by: Yang Tao <yang.tao172@zte.com.cn>
    Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1573010582-35297-1-git-send-email-wang.yi59@zte.com.cn
    Link: https://lkml.kernel.org/r/20191106224555.943191378@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95443fc0d77695e011fb4c6a326183dea40b4d6f
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Nov 24 08:50:03 2019 -0800

    x86/entry/32: Fix FIXUP_ESPFIX_STACK with user CR3
    
    commit 4a13b0e3e10996b9aa0b45a764ecfe49f6fcd360 upstream.
    
    UNWIND_ESPFIX_STACK needs to read the GDT, and the GDT mapping that
    can be accessed via %fs is not mapped in the user pagetables.  Use
    SGDT to find the cpu_entry_area mapping and read the espfix offset
    from that instead.
    
    Reported-and-tested-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd923d2b574ab48659e2c6aa12677a7600f4ab03
Author: Ingo Molnar <mingo@kernel.org>
Date:   Sun Nov 24 11:21:44 2019 +0100

    x86/pti/32: Calculate the various PTI cpu_entry_area sizes correctly, make the CPU_ENTRY_AREA_PAGES assert precise
    
    commit 05b042a1944322844eaae7ea596d5f154166d68a upstream.
    
    When two recent commits that increased the size of the 'struct cpu_entry_area'
    were merged in -tip, the 32-bit defconfig build started failing on the following
    build time assert:
    
      ./include/linux/compiler.h:391:38: error: call to ‘__compiletime_assert_189’ declared with attribute error: BUILD_BUG_ON failed: CPU_ENTRY_AREA_PAGES * PAGE_SIZE < CPU_ENTRY_AREA_MAP_SIZE
      arch/x86/mm/cpu_entry_area.c:189:2: note: in expansion of macro ‘BUILD_BUG_ON’
      In function ‘setup_cpu_entry_area_ptes’,
    
    Which corresponds to the following build time assert:
    
            BUILD_BUG_ON(CPU_ENTRY_AREA_PAGES * PAGE_SIZE < CPU_ENTRY_AREA_MAP_SIZE);
    
    The purpose of this assert is to sanity check the fixed-value definition of
    CPU_ENTRY_AREA_PAGES arch/x86/include/asm/pgtable_32_types.h:
    
            #define CPU_ENTRY_AREA_PAGES    (NR_CPUS * 41)
    
    The '41' is supposed to match sizeof(struct cpu_entry_area)/PAGE_SIZE, which value
    we didn't want to define in such a low level header, because it would cause
    dependency hell.
    
    Every time the size of cpu_entry_area is changed, we have to adjust CPU_ENTRY_AREA_PAGES
    accordingly - and this assert is checking that constraint.
    
    But the assert is both imprecise and buggy, primarily because it doesn't
    include the single readonly IDT page that is mapped at CPU_ENTRY_AREA_BASE
    (which begins at a PMD boundary).
    
    This bug was hidden by the fact that by accident CPU_ENTRY_AREA_PAGES is defined
    too large upstream (v5.4-rc8):
    
            #define CPU_ENTRY_AREA_PAGES    (NR_CPUS * 40)
    
    While 'struct cpu_entry_area' is 155648 bytes, or 38 pages. So we had two extra
    pages, which hid the bug.
    
    The following commit (not yet upstream) increased the size to 40 pages:
    
      x86/iopl: ("Restrict iopl() permission scope")
    
    ... but increased CPU_ENTRY_AREA_PAGES only 41 - i.e. shortening the gap
    to just 1 extra page.
    
    Then another not-yet-upstream commit changed the size again:
    
      880a98c33996: ("x86/cpu_entry_area: Add guard page for entry stack on 32bit")
    
    Which increased the cpu_entry_area size from 38 to 39 pages, but
    didn't change CPU_ENTRY_AREA_PAGES (kept it at 40). This worked
    fine, because we still had a page left from the accidental 'reserve'.
    
    But when these two commits were merged into the same tree, the
    combined size of cpu_entry_area grew from 38 to 40 pages, while
    CPU_ENTRY_AREA_PAGES finally caught up to 40 as well.
    
    Which is fine in terms of functionality, but the assert broke:
    
            BUILD_BUG_ON(CPU_ENTRY_AREA_PAGES * PAGE_SIZE < CPU_ENTRY_AREA_MAP_SIZE);
    
    because CPU_ENTRY_AREA_MAP_SIZE is the total size of the area,
    which is 1 page larger due to the IDT page.
    
    To fix all this, change the assert to two precise asserts:
    
            BUILD_BUG_ON((CPU_ENTRY_AREA_PAGES+1)*PAGE_SIZE != CPU_ENTRY_AREA_MAP_SIZE);
            BUILD_BUG_ON(CPU_ENTRY_AREA_TOTAL_SIZE != CPU_ENTRY_AREA_MAP_SIZE);
    
    This takes the IDT page into account, and also connects the size-based
    define of CPU_ENTRY_AREA_TOTAL_SIZE with the address-subtraction based
    define of CPU_ENTRY_AREA_MAP_SIZE.
    
    Also clean up some of the names which made it rather confusing:
    
     - 'CPU_ENTRY_AREA_TOT_SIZE' wasn't actually the 'total' size of
       the cpu-entry-area, but the per-cpu array size, so rename this
       to CPU_ENTRY_AREA_ARRAY_SIZE.
    
     - Introduce CPU_ENTRY_AREA_TOTAL_SIZE that _is_ the total mapping
       size, with the IDT included.
    
     - Add comments where '+1' denotes the IDT mapping - it wasn't
       obvious and took me about 3 hours to decode...
    
    Finally, because this particular commit is actually applied after
    this patch:
    
      880a98c33996: ("x86/cpu_entry_area: Add guard page for entry stack on 32bit")
    
    Fix the CPU_ENTRY_AREA_PAGES value from 40 pages to the correct 39 pages.
    
    All future commits that change cpu_entry_area will have to adjust
    this value precisely.
    
    As a side note, we should probably attempt to remove CPU_ENTRY_AREA_PAGES
    and derive its value directly from the structure, without causing
    header hell - but that is an adventure for another day! :-)
    
    Fixes: 880a98c33996: ("x86/cpu_entry_area: Add guard page for entry stack on 32bit")
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92f8c688b2ce3600dab434eb0c97d458db00f742
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 11:58:32 2019 -0800

    selftests/x86/sigreturn/32: Invalidate DS and ES when abusing the kernel
    
    commit 4d2fa82d98d2d296043a04eb517d7dbade5b13b8 upstream.
    
    If the kernel accidentally uses DS or ES while the user values are
    loaded, it will work fine for sane userspace.  In the interest of
    simulating maximally insane userspace, make sigreturn_32 zero out DS
    and ES for the nasty parts so that inadvertent use of these segments
    will crash.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72e521b167ffba300d3381699718f8757e5559e7
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 12:59:13 2019 -0800

    selftests/x86/mov_ss_trap: Fix the SYSENTER test
    
    commit 8caa016bfc129f2c925d52da43022171d1d1de91 upstream.
    
    For reasons that I haven't quite fully diagnosed, running
    mov_ss_trap_32 on a 32-bit kernel results in an infinite loop in
    userspace.  This appears to be because the hacky SYSENTER test
    doesn't segfault as desired; instead it corrupts the program state
    such that it infinite loops.
    
    Fix it by explicitly clearing EBP before doing SYSENTER.  This will
    give a more reliable segfault.
    
    Fixes: 59c2a7226fc5 ("x86/selftests: Add mov_to_ss test")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e74c494a20df1fbd096d3fa60e39bc3f06863bd6
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 20 15:02:26 2019 +0100

    x86/entry/32: Fix NMI vs ESPFIX
    
    commit 895429076512e9d1cf5428181076299c90713159 upstream.
    
    When the NMI lands on an ESPFIX_SS, we are on the entry stack and must
    swizzle, otherwise we'll run do_nmi() on the entry stack, which is
    BAD.
    
    Also, similar to the normal exception path, we need to correct the
    ESPFIX magic before leaving the entry stack, otherwise pt_regs will
    present a non-flat stack pointer.
    
    Tested by running sigreturn_32 concurrent with perf-record.
    
    Fixes: e5862d0515ad ("x86/entry/32: Leave the kernel via trampoline stack")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 778226c41e6a146f13bd6bd09390a9dd3f946f32
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 10:10:49 2019 +0100

    x86/entry/32: Unwind the ESPFIX stack earlier on exception entry
    
    commit a1a338e5b6fe9e0a39c57c232dc96c198bb53e47 upstream.
    
    Right now, we do some fancy parts of the exception entry path while SS
    might have a nonzero base: we fill in regs->ss and regs->sp, and we
    consider switching to the kernel stack. This results in regs->ss and
    regs->sp referring to a non-flat stack and it may result in
    overflowing the entry stack. The former issue means that we can try to
    call iret_exc on a non-flat stack, which doesn't work.
    
    Tested with selftests/x86/sigreturn_32.
    
    Fixes: 45d7b255747c ("x86/entry/32: Enter the kernel via trampoline stack")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9352a3a1eee47e80ab8a3b977b2b9b97298b7157
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 09:56:36 2019 +0100

    x86/entry/32: Move FIXUP_FRAME after pushing %fs in SAVE_ALL
    
    commit 82cb8a0b1d8d07817b5d59f7fa1438e1fceafab2 upstream.
    
    This will allow us to get percpu access working before FIXUP_FRAME,
    which will allow us to unwind ESPFIX earlier.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81a204f1b4baf284189162743be282178929148d
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 09:49:33 2019 +0100

    x86/entry/32: Use %ss segment where required
    
    commit 4c4fd55d3d59a41ddfa6ecba7e76928921759f43 upstream.
    
    When re-building the IRET frame we use %eax as an destination %esp,
    make sure to then also match the segment for when there is a nonzero
    SS base (ESPFIX).
    
    [peterz: Changelog and minor edits]
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fbd1f06b635139a7616ad831deb4fd79cdb8c86
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 20 13:05:06 2019 +0100

    x86/entry/32: Fix IRET exception
    
    commit 40ad2199580e248dce2a2ebb722854180c334b9e upstream.
    
    As reported by Lai, the commit 3c88c692c287 ("x86/stackframe/32:
    Provide consistent pt_regs") wrecked the IRET EXTABLE entry by making
    .Lirq_return not point at IRET.
    
    Fix this by placing IRET_FRAME in RESTORE_REGS, to mirror how
    FIXUP_FRAME is part of SAVE_ALL.
    
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Reported-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90964a3fb580be5926c8986d046bace2ad565ebe
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 21 00:40:24 2019 +0100

    x86/cpu_entry_area: Add guard page for entry stack on 32bit
    
    commit 880a98c339961eaa074393e3a2117cbe9125b8bb upstream.
    
    The entry stack in the cpu entry area is protected against overflow by the
    readonly GDT on 64-bit, but on 32-bit the GDT needs to be writeable and
    therefore does not trigger a fault on stack overflow.
    
    Add a guard page.
    
    Fixes: c482feefe1ae ("x86/entry/64: Make cpu_entry_area.tss read-only")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 987e90450a1cf7d79b70016cec36543cd05551b7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 21 00:40:23 2019 +0100

    x86/pti/32: Size initial_page_table correctly
    
    commit f490e07c53d66045d9d739e134145ec9b38653d3 upstream.
    
    Commit 945fd17ab6ba ("x86/cpu_entry_area: Sync cpu_entry_area to
    initial_page_table") introduced the sync for the initial page table for
    32bit.
    
    sync_initial_page_table() uses clone_pgd_range() which does the update for
    the kernel page table. If PTI is enabled it also updates the user space
    page table counterpart, which is assumed to be in the next page after the
    target PGD.
    
    At this point in time 32-bit did not have PTI support, so the user space
    page table update was not taking place.
    
    The support for PTI on 32-bit which was introduced later on, did not take
    that into account and missed to add the user space counter part for the
    initial page table.
    
    As a consequence sync_initial_page_table() overwrites any data which is
    located in the page behing initial_page_table causing random failures,
    e.g. by corrupting doublefault_tss and wreckaging the doublefault handler
    on 32bit.
    
    Fix it by adding a "user" page table right after initial_page_table.
    
    Fixes: 7757d607c6b3 ("x86/pti: Allow CONFIG_PAGE_TABLE_ISOLATION for x86_32")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2867004c1dc27a9259224e1d6a042b9b2b6152e0
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Nov 21 11:50:12 2019 +0100

    x86/doublefault/32: Fix stack canaries in the double fault handler
    
    commit 3580d0b29cab08483f84a16ce6a1151a1013695f upstream.
    
    The double fault TSS was missing GS setup, which is needed for stack
    canaries to work.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 274ad46fb74dcbeef466307eb1b3204cbc68a370
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Nov 11 15:32:59 2019 +0100

    x86/xen/32: Simplify ring check in xen_iret_crit_fixup()
    
    commit 922eea2ce5c799228d9ff1be9890e6873ce8fff6 upstream.
    
    This can be had with two instead of six insns, by just checking the high
    CS.RPL bit.
    
    Also adjust the comment - there would be no #GP in the mentioned cases, as
    there's no segment limit violation or alike. Instead there'd be #PF, but
    that one reports the target EIP of said branch, not the address of the
    branch insn itself.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lkml.kernel.org/r/a5986837-01eb-7bf8-bf42-4d3084d6a1f5@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f74e73ec3fb98fd7694bf3896dd29c2a22dd922
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Nov 11 15:32:12 2019 +0100

    x86/xen/32: Make xen_iret_crit_fixup() independent of frame layout
    
    commit 29b810f5a5ec127d3143770098e05981baa3eb77 upstream.
    
    Now that SS:ESP always get saved by SAVE_ALL, this also needs to be
    accounted for in xen_iret_crit_fixup(). Otherwise the old_ax value gets
    interpreted as EFLAGS, and hence VM86 mode appears to be active all the
    time, leading to random "vm86_32: no user_vm86: BAD" log messages alongside
    processes randomly crashing.
    
    Since following the previous model (sitting after SAVE_ALL) would further
    complicate the code _and_ retain the dependency of xen_iret_crit_fixup() on
    frame manipulations done by entry_32.S, switch things around and do the
    adjustment ahead of SAVE_ALL.
    
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: Stable Team <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/32d8713d-25a7-84ab-b74b-aa3e88abce6b@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4614bc96554b9ce53c4f53a0e5862640ad4ed33b
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Nov 18 16:21:12 2019 +0100

    x86/stackframe/32: Repair 32-bit Xen PV
    
    commit 81ff2c37f9e5d77593928df0536d86443195fd64 upstream.
    
    Once again RPL checks have been introduced which don't account for a 32-bit
    kernel living in ring 1 when running in a PV Xen domain. The case in
    FIXUP_FRAME has been preventing boot.
    
    Adjust BUG_IF_WRONG_CR3 as well to guard against future uses of the macro
    on a code path reachable when running in PV mode under Xen; I have to admit
    that I stopped at a certain point trying to figure out whether there are
    present ones.
    
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Stable Team <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/0fad341f-b7f5-f859-d55d-f0084ee7087e@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abf404dfa5c5e05138088e072175485c12fbfbf9
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Sep 23 15:09:58 2019 -0500

    nbd: prevent memory leak
    
    commit 03bf73c315edca28f47451913177e14cd040a216 upstream.
    
    In nbd_add_socket when krealloc succeeds, if nsock's allocation fail the
    reallocted memory is leak. The correct behaviour should be assigning the
    reallocted memory to config->socks right after success.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b77206ad5b09d3895a03cc608ca82d5aecde0f2
Author: Waiman Long <longman@redhat.com>
Date:   Fri Nov 15 11:14:45 2019 -0500

    x86/speculation: Fix redundant MDS mitigation message
    
    commit cd5a2aa89e847bdda7b62029d94e95488d73f6b2 upstream.
    
    Since MDS and TAA mitigations are inter-related for processors that are
    affected by both vulnerabilities, the followiing confusing messages can
    be printed in the kernel log:
    
      MDS: Vulnerable
      MDS: Mitigation: Clear CPU buffers
    
    To avoid the first incorrect message, defer the printing of MDS
    mitigation after the TAA mitigation selection has been done. However,
    that has the side effect of printing TAA mitigation first before MDS
    mitigation.
    
     [ bp: Check box is affected/mitigations are disabled first before
       printing and massage. ]
    
    Suggested-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Mark Gross <mgross@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20191115161445.30809-3-longman@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75cad94d032b9ef500bc12004a3c695a9e85c729
Author: Waiman Long <longman@redhat.com>
Date:   Fri Nov 15 11:14:44 2019 -0500

    x86/speculation: Fix incorrect MDS/TAA mitigation status
    
    commit 64870ed1b12e235cfca3f6c6da75b542c973ff78 upstream.
    
    For MDS vulnerable processors with TSX support, enabling either MDS or
    TAA mitigations will enable the use of VERW to flush internal processor
    buffers at the right code path. IOW, they are either both mitigated
    or both not. However, if the command line options are inconsistent,
    the vulnerabilites sysfs files may not report the mitigation status
    correctly.
    
    For example, with only the "mds=off" option:
    
      vulnerabilities/mds:Vulnerable; SMT vulnerable
      vulnerabilities/tsx_async_abort:Mitigation: Clear CPU buffers; SMT vulnerable
    
    The mds vulnerabilities file has wrong status in this case. Similarly,
    the taa vulnerability file will be wrong with mds mitigation on, but
    taa off.
    
    Change taa_select_mitigation() to sync up the two mitigation status
    and have them turned off if both "mds=off" and "tsx_async_abort=off"
    are present.
    
    Update documentation to emphasize the fact that both "mds=off" and
    "tsx_async_abort=off" have to be specified together for processors that
    are affected by both TAA and MDS to be effective.
    
     [ bp: Massage and add kernel-parameters.txt change too. ]
    
    Fixes: 1b42f017415b ("x86/speculation/taa: Add mitigation for TSX Async Abort")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: linux-doc@vger.kernel.org
    Cc: Mark Gross <mgross@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20191115161445.30809-2-longman@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5bc6816fc325571ca038ce80be0ab296dce900d
Author: Alexander Kapshuk <alexander.kapshuk@gmail.com>
Date:   Tue Sep 24 07:46:59 2019 +0300

    x86/insn: Fix awk regexp warnings
    
    commit 700c1018b86d0d4b3f1f2d459708c0cdf42b521d upstream.
    
    gawk 5.0.1 generates the following regexp warnings:
    
      GEN      /home/sasha/torvalds/tools/objtool/arch/x86/lib/inat-tables.c
      awk: ../arch/x86/tools/gen-insn-attr-x86.awk:260: warning: regexp escape sequence `\:' is not a known regexp operator
      awk: ../arch/x86/tools/gen-insn-attr-x86.awk:350: (FILENAME=../arch/x86/lib/x86-opcode-map.txt FNR=41) warning: regexp escape sequence `\&' is  not a known regexp operator
    
    Ealier versions of gawk are not known to generate these warnings. The
    gawk manual referenced below does not list characters ':' and '&' as
    needing escaping, so 'unescape' them. See
    
      https://www.gnu.org/software/gawk/manual/html_node/Escape-Sequences.html
    
    for more info.
    
    Running diff on the output generated by the script before and after
    applying the patch reported no differences.
    
     [ bp: Massage commit message. ]
    
    [ Caught the respective tools header discrepancy. ]
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Alexander Kapshuk <alexander.kapshuk@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190924044659.3785-1-alexander.kapshuk@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ac794da75da6e3a2c24bbf971fad4aa300ee03b
Author: John Pittman <jpittman@redhat.com>
Date:   Mon Nov 11 16:43:20 2019 -0800

    md/raid10: prevent access of uninitialized resync_pages offset
    
    commit 45422b704db392a6d79d07ee3e3670b11048bd53 upstream.
    
    Due to unneeded multiplication in the out_free_pages portion of
    r10buf_pool_alloc(), when using a 3-copy raid10 layout, it is
    possible to access a resync_pages offset that has not been
    initialized.  This access translates into a crash of the system
    within resync_free_pages() while passing a bad pointer to
    put_page().  Remove the multiplication, preventing access to the
    uninitialized area.
    
    Fixes: f0250618361db ("md: raid10: don't use bio's vec table to manage resync pages")
    Cc: stable@vger.kernel.org # 4.12+
    Signed-off-by: John Pittman <jpittman@redhat.com>
    Suggested-by: David Jeffery <djeffery@redhat.com>
    Reviewed-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 191355a2cf0f232e79b6f4983c4d2775f0e1afd0
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Wed Nov 20 17:27:39 2019 -0500

    Revert "dm crypt: use WQ_HIGHPRI for the IO and crypt workqueues"
    
    commit f612b2132db529feac4f965f28a1b9258ea7c22b upstream.
    
    This reverts commit a1b89132dc4f61071bdeaab92ea958e0953380a1.
    
    Revert required hand-patching due to subsequent changes that were
    applied since commit a1b89132dc4f61071bdeaab92ea958e0953380a1.
    
    Requires: ed0302e83098d ("dm crypt: make workqueue names device-specific")
    Cc: stable@vger.kernel.org
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=199857
    Reported-by: Vito Caputo <vcaputo@pengaru.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68c5b8cb267c090aada64a490745cec73cbfaf8b
Author: Adam Ford <aford173@gmail.com>
Date:   Wed Oct 2 06:46:26 2019 -0500

    Revert "Bluetooth: hci_ll: set operational frequency earlier"
    
    commit cef456cd354ef485f12d57000c455e83e416a2b6 upstream.
    
    As nice as it would be to update firmware faster, that patch broke
    at least two different boards, an OMAP4+WL1285 based Motorola Droid
    4, as reported by Sebasian Reichel and the Logic PD i.MX6Q +
    WL1837MOD.
    
    This reverts commit a2e02f38eff84f199c8e32359eb213f81f270047.
    
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Acked-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 457c529fc15e8eed301618e9c86203b155228031
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Fri Sep 6 23:54:23 2019 +0200

    ath10k: restore QCA9880-AR1A (v1) detection
    
    commit f8914a14623a79b73f72b2b1ee4cd9b2cb91b735 upstream.
    
    This patch restores the old behavior that read
    the chip_id on the QCA988x before resetting the
    chip. This needs to be done in this order since
    the unsupported QCA988x AR1A chips fall off the
    bus when resetted. Otherwise the next MMIO Op
    after the reset causes a BUS ERROR and panic.
    
    Cc: stable@vger.kernel.org
    Fixes: 1a7fecb766c8 ("ath10k: reset chip before reading chip_id in probe")
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a807b1b4e7e401bdc9be0b66eb979fe4bba434d
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Jul 24 23:31:08 2019 -0700

    ath10k: Fix HOST capability QMI incompatibility
    
    commit 7165ef890a4c44cf16db66b82fd78448f4bde6ba upstream.
    
    The introduction of 768ec4c012ac ("ath10k: update HOST capability QMI
    message") served the purpose of supporting the new and extended HOST
    capability QMI message.
    
    But while the new message adds a slew of optional members it changes the
    data type of the "daemon_support" member, which means that older
    versions of the firmware will fail to decode the incoming request
    message.
    
    There is no way to detect this breakage from Linux and there's no way to
    recover from sending the wrong message (i.e. we can't just try one
    format and then fallback to the other), so a quirk is introduced in
    DeviceTree to indicate to the driver that the firmware requires the 8bit
    version of this message.
    
    Cc: stable@vger.kernel.org
    Fixes: 768ec4c012ac ("ath10k: update HOST capability qmi message")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0126be140997f6d8080511c0dbbe9360b5632057
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27 upstream.
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3064134f882f0acebb1e7d6f660a1e0b06b5a4f1
Author: Denis Efremov <efremov@linux.com>
Date:   Fri Sep 27 01:56:04 2019 +0300

    ath9k_hw: fix uninitialized variable data
    
    commit 80e84f36412e0c5172447b6947068dca0d04ee82 upstream.
    
    Currently, data variable in ar9003_hw_thermo_cal_apply() could be
    uninitialized if ar9300_otp_read_word() will fail to read the value.
    Initialize data variable with 0 to prevent an undefined behavior. This
    will be enough to handle error case when ar9300_otp_read_word() fails.
    
    Fixes: 80fe43f2bbd5 ("ath9k_hw: Read and configure thermocal for AR9462")
    Cc: Rajkumar Manoharan <rmanohar@qca.qualcomm.com>
    Cc: John W. Linville <linville@tuxdriver.com>
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b47a3043a24a25e9bf4c9e8a65be2803ecd1ca9
Author: Tomas Bortoli <tomasbortoli@gmail.com>
Date:   Fri Nov 1 21:42:44 2019 +0100

    Bluetooth: Fix invalid-free in bcsp_close()
    
    commit cf94da6f502d8caecabd56b194541c873c8a7a3c upstream.
    
    Syzbot reported an invalid-free that I introduced fixing a memleak.
    
    bcsp_recv() also frees bcsp->rx_skb but never nullifies its value.
    Nullify bcsp->rx_skb every time it is freed.
    
    Signed-off-by: Tomas Bortoli <tomasbortoli@gmail.com>
    Reported-by: syzbot+a0d209a4676664613e76@syzkaller.appspotmail.com
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
