commit 6b9830fecd4a87d7ebb4d93484fef00f46d0fa0f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Aug 27 09:30:50 2020 +0200

    Linux 5.7.19
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c0496e929d32bb00461cc865495f5db68ab4aca
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Sat Aug 8 11:37:13 2020 -0700

    binfmt_flat: revert "binfmt_flat: don't offset the data start"
    
    commit 2217b982624680d19a80ebb4600d05c8586c4f96 upstream.
    
    binfmt_flat loader uses the gap between text and data to store data
    segment pointers for the libraries. Even in the absence of shared
    libraries it stores at least one pointer to the executable's own data
    segment. Text and data can go back to back in the flat binary image and
    without offsetting data segment last few instructions in the text
    segment may get corrupted by the data segment pointer.
    
    Fix it by reverting commit a2357223c50a ("binfmt_flat: don't offset the
    data start").
    
    Cc: stable@vger.kernel.org
    Fixes: a2357223c50a ("binfmt_flat: don't offset the data start")
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bb568ce748783deb682a048664312e71fd30644
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 28 00:58:40 2020 +1000

    powerpc/64s: Don't init FSCR_DSCR in __init_FSCR()
    
    commit 0828137e8f16721842468e33df0460044a0c588b upstream.
    
    __init_FSCR() was added originally in commit 2468dcf641e4 ("powerpc:
    Add support for context switching the TAR register") (Feb 2013), and
    only set FSCR_TAR.
    
    At that point FSCR (Facility Status and Control Register) was not
    context switched, so the setting was permanent after boot.
    
    Later we added initialisation of FSCR_DSCR to __init_FSCR(), in commit
    54c9b2253d34 ("powerpc: Set DSCR bit in FSCR setup") (Mar 2013), again
    that was permanent after boot.
    
    Then commit 2517617e0de6 ("powerpc: Fix context switch DSCR on
    POWER8") (Aug 2013) added a limited context switch of FSCR, just the
    FSCR_DSCR bit was context switched based on thread.dscr_inherit. That
    commit said "This clears the H/FSCR DSCR bit initially", but it
    didn't, it left the initialisation of FSCR_DSCR in __init_FSCR().
    However the initial context switch from init_task to pid 1 would clear
    FSCR_DSCR because thread.dscr_inherit was 0.
    
    That commit also introduced the requirement that FSCR_DSCR be clear
    for user processes, so that we can take the facility unavailable
    interrupt in order to manage dscr_inherit.
    
    Then in commit 152d523e6307 ("powerpc: Create context switch helpers
    save_sprs() and restore_sprs()") (Dec 2015) FSCR was added to
    thread_struct. However it still wasn't fully context switched, we just
    took the existing value and set FSCR_DSCR if the new thread had
    dscr_inherit set. FSCR was still initialised at boot to FSCR_DSCR |
    FSCR_TAR, but that value was not propagated into the thread_struct, so
    the initial context switch set FSCR_DSCR back to 0.
    
    Finally commit b57bd2de8c6c ("powerpc: Improve FSCR init and context
    switching") (Jun 2016) added a full context switch of the FSCR, and
    added an initialisation of init_task.thread.fscr to FSCR_TAR |
    FSCR_EBB, but omitted FSCR_DSCR.
    
    The end result is that swapper runs with FSCR_DSCR set because of the
    initialisation in __init_FSCR(), but no other processes do, they use
    the value from init_task.thread.fscr.
    
    Having FSCR_DSCR set for swapper allows it to access SPR 3 from
    userspace, but swapper never runs userspace, so it has no useful
    effect. It's also confusing to have the value initialised in two
    places to two different values.
    
    So remove FSCR_DSCR from __init_FSCR(), this at least gets us to the
    point where there's a single value of FSCR, even if it's still set in
    two places.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Tested-by: Alistair Popple <alistair@popple.id.au>
    Link: https://lore.kernel.org/r/20200527145843.2761782-1-mpe@ellerman.id.au
    Cc: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4c87df0d21c564c0af4ff4ca7a6288bc1348fbe
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Mon Aug 17 16:34:07 2020 +0300

    ethtool: Don't omit the netlink reply if no features were changed
    
    [ Upstream commit f01204ec8be7ea5e8f0230a7d4200e338d563bde ]
    
    The legacy ethtool userspace tool shows an error when no features could
    be changed. It's useful to have a netlink reply to be able to show this
    error when __netdev_update_features wasn't called, for example:
    
    1. ethtool -k eth0
       large-receive-offload: off
    2. ethtool -K eth0 rx-fcs on
    3. ethtool -K eth0 lro on
       Could not change any device features
       rx-lro: off [requested on]
    4. ethtool -K eth0 lro on
       # The output should be the same, but without this patch the kernel
       # doesn't send the reply, and ethtool is unable to detect the error.
    
    This commit makes ethtool-netlink always return a reply when requested,
    and it still avoids unnecessary calls to __netdev_update_features if the
    wanted features haven't changed.
    
    Fixes: 0980bfcd6954 ("ethtool: set netdev features with FEATURES_SET request")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55fc3b4d9999b5d0e52a4e7496ce6706ce65148a
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Mon Aug 17 16:34:06 2020 +0300

    ethtool: Account for hw_features in netlink interface
    
    [ Upstream commit 2847bfed888fbb8bf4c8e8067fd6127538c2c700 ]
    
    ethtool-netlink ignores dev->hw_features and may confuse the drivers by
    asking them to enable features not in the hw_features bitmask. For
    example:
    
    1. ethtool -k eth0
       tls-hw-tx-offload: off [fixed]
    2. ethtool -K eth0 tls-hw-tx-offload on
       tls-hw-tx-offload: on
    3. ethtool -k eth0
       tls-hw-tx-offload: on [fixed]
    
    Fitler out dev->hw_features from req_wanted to fix it and to resemble
    the legacy ethtool behavior.
    
    Fixes: 0980bfcd6954 ("ethtool: set netdev features with FEATURES_SET request")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca9af4625ca592950f6229ffa36f50ba244bbd6f
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Mon Aug 17 16:34:05 2020 +0300

    ethtool: Fix preserving of wanted feature bits in netlink interface
    
    [ Upstream commit 840110a4eae190dcbb9907d68216d5d1d9f25839 ]
    
    Currently, ethtool-netlink calculates new wanted bits as:
    (req_wanted & req_mask) | (old_active & ~req_mask)
    
    It completely discards the old wanted bits, so they are forgotten with
    the next ethtool command. Sample steps to reproduce:
    
    1. ethtool -k eth0
       tx-tcp-segmentation: on # TSO is on from the beginning
    2. ethtool -K eth0 tx off
       tx-tcp-segmentation: off [not requested]
    3. ethtool -k eth0
       tx-tcp-segmentation: off [requested on]
    4. ethtool -K eth0 rx off # Some change unrelated to TSO
    5. ethtool -k eth0
       tx-tcp-segmentation: off # "Wanted on" is forgotten
    
    This commit fixes it by changing the formula to:
    (req_wanted & req_mask) | (old_wanted & ~req_mask),
    where old_active was replaced by old_wanted to account for the wanted
    bits.
    
    The shortcut condition for the case where nothing was changed now
    compares wanted bitmasks, instead of wanted to active.
    
    Fixes: 0980bfcd6954 ("ethtool: set netdev features with FEATURES_SET request")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c296f30ba8c39044002dd0d17fe15df33964e59a
Author: Shay Agroskin <shayagr@amazon.com>
Date:   Wed Aug 19 20:28:38 2020 +0300

    net: ena: Make missed_tx stat incremental
    
    [ Upstream commit ccd143e5150f24b9ba15145c7221b61dd9e41021 ]
    
    Most statistics in ena driver are incremented, meaning that a stat's
    value is a sum of all increases done to it since driver/queue
    initialization.
    
    This patch makes all statistics this way, effectively making missed_tx
    statistic incremental.
    Also added a comment regarding rx_drops and tx_drops to make it
    clearer how these counters are calculated.
    
    Fixes: 11095fdb712b ("net: ena: add statistics for missed tx packets")
    Signed-off-by: Shay Agroskin <shayagr@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31ee37fc7fb6a5b0bc6a752c048486cb40eebf47
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e6165e8e3bde6869f2711b326316b8e769ac721
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Aug 20 15:34:47 2020 +0800

    tipc: call rcu_read_lock() in tipc_aead_encrypt_done()
    
    [ Upstream commit f6db9096416209474090d64d8284e7c16c3d8873 ]
    
    b->media->send_msg() requires rcu_read_lock(), as we can see
    elsewhere in tipc,  tipc_bearer_xmit, tipc_bearer_xmit_skb
    and tipc_bearer_bc_xmit().
    
    Syzbot has reported this issue as:
    
      net/tipc/bearer.c:466 suspicious rcu_dereference_check() usage!
      Workqueue: cryptd cryptd_queue_worker
      Call Trace:
       tipc_l2_send_msg+0x354/0x420 net/tipc/bearer.c:466
       tipc_aead_encrypt_done+0x204/0x3a0 net/tipc/crypto.c:761
       cryptd_aead_crypt+0xe8/0x1d0 crypto/cryptd.c:739
       cryptd_queue_worker+0x118/0x1b0 crypto/cryptd.c:181
       process_one_work+0x94c/0x1670 kernel/workqueue.c:2269
       worker_thread+0x64c/0x1120 kernel/workqueue.c:2415
       kthread+0x3b5/0x4a0 kernel/kthread.c:291
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    So fix it by calling rcu_read_lock() in tipc_aead_encrypt_done()
    for b->media->send_msg().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: syzbot+47bbc6b678d317cccbe0@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 790874ffe2c121cadac188ccab6faf8343ba2dd4
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Aug 20 16:30:52 2020 +0200

    net/smc: Prevent kernel-infoleak in __smc_diag_dump()
    
    [ Upstream commit ce51f63e63c52a4e1eee4dd040fb0ba0af3b43ab ]
    
    __smc_diag_dump() is potentially copying uninitialized kernel stack memory
    into socket buffers, since the compiler may leave a 4-byte hole near the
    beginning of `struct smcd_diag_dmbinfo`. Fix it by initializing `dinfo`
    with memset().
    
    Fixes: 4b1b7d3b30a6 ("net/smc: add SMC-D diag support")
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb1a1c016ebadf87db872785f4bb4e1a80039c75
Author: David Laight <David.Laight@ACULAB.COM>
Date:   Wed Aug 19 14:40:52 2020 +0000

    net: sctp: Fix negotiation of the number of data streams.
    
    [ Upstream commit ab921f3cdbec01c68705a7ade8bec628d541fc2b ]
    
    The number of output and input streams was never being reduced, eg when
    processing received INIT or INIT_ACK chunks.
    The effect is that DATA chunks can be sent with invalid stream ids
    and then discarded by the remote system.
    
    Fixes: 2075e50caf5ea ("sctp: convert to genradix")
    Signed-off-by: David Laight <david.laight@aculab.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfc6e25c15f8575a7122ecdc69dfa953f7853847
Author: Alaa Hleihel <alaa@mellanox.com>
Date:   Wed Aug 19 18:24:10 2020 +0300

    net/sched: act_ct: Fix skb double-free in tcf_ct_handle_fragments() error flow
    
    [ Upstream commit eda814b97dfb8d9f4808eb2f65af9bd3705c4cae ]
    
    tcf_ct_handle_fragments() shouldn't free the skb when ip_defrag() call
    fails. Otherwise, we will cause a double-free bug.
    In such cases, just return the error to the caller.
    
    Fixes: b57dc7c13ea9 ("net/sched: Introduce action ct")
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de55a7e72fcab43e7f3efa23049d06706246f485
Author: Necip Fazil Yildiran <necip@google.com>
Date:   Mon Aug 17 15:54:48 2020 +0000

    net: qrtr: fix usage of idr in port assignment to socket
    
    [ Upstream commit 8dfddfb79653df7c38a9c8c4c034f242a36acee9 ]
    
    Passing large uint32 sockaddr_qrtr.port numbers for port allocation
    triggers a warning within idr_alloc() since the port number is cast
    to int, and thus interpreted as a negative number. This leads to
    the rejection of such valid port numbers in qrtr_port_assign() as
    idr_alloc() fails.
    
    To avoid the problem, switch to idr_alloc_u32() instead.
    
    Fixes: bdabad3e363d ("net: Add Qualcomm IPC router")
    Reported-by: syzbot+f31428628ef672716ea8@syzkaller.appspotmail.com
    Signed-off-by: Necip Fazil Yildiran <necip@google.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 206cac12e7b0fef25dea196322b7daaaecdfb76e
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Sat Aug 22 15:06:36 2020 +0300

    net: nexthop: don't allow empty NHA_GROUP
    
    [ Upstream commit eeaac3634ee0e3f35548be35275efeca888e9b23 ]
    
    Currently the nexthop code will use an empty NHA_GROUP attribute, but it
    requires at least 1 entry in order to function properly. Otherwise we
    end up derefencing null or random pointers all over the place due to not
    having any nh_grp_entry members allocated, nexthop code relies on having at
    least the first member present. Empty NHA_GROUP doesn't make any sense so
    just disallow it.
    Also add a WARN_ON for any future users of nexthop_create_group().
    
     BUG: kernel NULL pointer dereference, address: 0000000000000080
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 0 P4D 0
     Oops: 0000 [#1] SMP
     CPU: 0 PID: 558 Comm: ip Not tainted 5.9.0-rc1+ #93
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-2.fc32 04/01/2014
     RIP: 0010:fib_check_nexthop+0x4a/0xaa
     Code: 0f 84 83 00 00 00 48 c7 02 80 03 f7 81 c3 40 80 fe fe 75 12 b8 ea ff ff ff 48 85 d2 74 6b 48 c7 02 40 03 f7 81 c3 48 8b 40 10 <48> 8b 80 80 00 00 00 eb 36 80 78 1a 00 74 12 b8 ea ff ff ff 48 85
     RSP: 0018:ffff88807983ba00 EFLAGS: 00010213
     RAX: 0000000000000000 RBX: ffff88807983bc00 RCX: 0000000000000000
     RDX: ffff88807983bc00 RSI: 0000000000000000 RDI: ffff88807bdd0a80
     RBP: ffff88807983baf8 R08: 0000000000000dc0 R09: 000000000000040a
     R10: 0000000000000000 R11: ffff88807bdd0ae8 R12: 0000000000000000
     R13: 0000000000000000 R14: ffff88807bea3100 R15: 0000000000000001
     FS:  00007f10db393700(0000) GS:ffff88807dc00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000080 CR3: 000000007bd0f004 CR4: 00000000003706f0
     Call Trace:
      fib_create_info+0x64d/0xaf7
      fib_table_insert+0xf6/0x581
      ? __vma_adjust+0x3b6/0x4d4
      inet_rtm_newroute+0x56/0x70
      rtnetlink_rcv_msg+0x1e3/0x20d
      ? rtnl_calcit.isra.0+0xb8/0xb8
      netlink_rcv_skb+0x5b/0xac
      netlink_unicast+0xfa/0x17b
      netlink_sendmsg+0x334/0x353
      sock_sendmsg_nosec+0xf/0x3f
      ____sys_sendmsg+0x1a0/0x1fc
      ? copy_msghdr_from_user+0x4c/0x61
      ___sys_sendmsg+0x63/0x84
      ? handle_mm_fault+0xa39/0x11b5
      ? sockfd_lookup_light+0x72/0x9a
      __sys_sendmsg+0x50/0x6e
      do_syscall_64+0x54/0xbe
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7f10dacc0bb7
     Code: d8 64 89 02 48 c7 c0 ff ff ff ff eb cd 66 0f 1f 44 00 00 8b 05 9a 4b 2b 00 85 c0 75 2e 48 63 ff 48 63 d2 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 01 c3 48 8b 15 b1 f2 2a 00 f7 d8 64 89 02 48
     RSP: 002b:00007ffcbe628bf8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 00007ffcbe628f80 RCX: 00007f10dacc0bb7
     RDX: 0000000000000000 RSI: 00007ffcbe628c60 RDI: 0000000000000003
     RBP: 000000005f41099c R08: 0000000000000001 R09: 0000000000000008
     R10: 00000000000005e9 R11: 0000000000000246 R12: 0000000000000000
     R13: 0000000000000000 R14: 00007ffcbe628d70 R15: 0000563a86c6e440
     Modules linked in:
     CR2: 0000000000000080
    
    CC: David Ahern <dsahern@gmail.com>
    Fixes: 430a049190de ("nexthop: Add support for nexthop groups")
    Reported-by: syzbot+a61aa19b0c14c8770bd9@syzkaller.appspotmail.com
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72e6a4353a22ad996f6213d6ce4cf244a98b41d8
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Sat Aug 15 04:44:31 2020 -0400

    net: Fix potential wrong skb->protocol in skb_vlan_untag()
    
    [ Upstream commit 55eff0eb7460c3d50716ed9eccf22257b046ca92 ]
    
    We may access the two bytes after vlan_hdr in vlan_set_encap_proto(). So
    we should pull VLAN_HLEN + sizeof(unsigned short) in skb_vlan_untag() or
    we may access the wrong data.
    
    Fixes: 0d5501c1c828 ("net: Always untag vlan-tagged traffic on input.")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41ab1c624b215f9e0783bbad258e57126ef79749
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Wed Aug 19 13:53:58 2020 +1200

    gre6: Fix reception with IP6_TNL_F_RCV_DSCP_COPY
    
    [ Upstream commit 272502fcb7cda01ab07fc2fcff82d1d2f73d43cc ]
    
    When receiving an IPv4 packet inside an IPv6 GRE packet, and the
    IP6_TNL_F_RCV_DSCP_COPY flag is set on the tunnel, the IPv4 header would
    get corrupted. This is due to the common ip6_tnl_rcv() function assuming
    that the inner header is always IPv6. This patch checks the tunnel
    protocol for IPv4 inner packets, but still defaults to IPv6.
    
    Fixes: 308edfdf1563 ("gre6: Cleanup GREv6 receive path, call common GRE functions")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
