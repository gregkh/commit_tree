commit c555efaf14026c7751fa68d87403a5eb5ae7dcaf
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 12 19:21:46 2019 +0100

    Linux 4.19.84

commit 46a4a014c48e64e28970ca775bb7adf4778821af
Author: Junaid Shahid <junaids@google.com>
Date:   Fri Nov 1 00:14:14 2019 +0100

    kvm: x86: mmu: Recovery of shattered NX large pages
    
    commit 1aa9b9572b10529c2e64e2b8f44025d86e124308 upstream.
    
    The page table pages corresponding to broken down large pages are zapped in
    FIFO order, so that the large page can potentially be recovered, if it is
    not longer being used for execution.  This removes the performance penalty
    for walking deeper EPT page tables.
    
    By default, one large page will last about one hour once the guest
    reaches a steady state.
    
    Signed-off-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6082f2e28887bcef66d9b3b5710fd3491a722f0b
Author: Junaid Shahid <junaids@google.com>
Date:   Fri Nov 1 00:14:08 2019 +0100

    kvm: Add helper function for creating VM worker threads
    
    commit c57c80467f90e5504c8df9ad3555d2c78800bf94 upstream.
    
    Add a function to create a kernel thread associated with a given VM. In
    particular, it ensures that the worker thread inherits the priority and
    cgroups of the calling thread.
    
    Signed-off-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5219505fcbb640e273a0d51c19c38de0100ec5a9
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 4 12:22:02 2019 +0100

    kvm: mmu: ITLB_MULTIHIT mitigation
    
    commit b8e8c8303ff28c61046a4d0f6ea99aea609a7dc0 upstream.
    
    With some Intel processors, putting the same virtual address in the TLB
    as both a 4 KiB and 2 MiB page can confuse the instruction fetch unit
    and cause the processor to issue a machine check resulting in a CPU lockup.
    
    Unfortunately when EPT page tables use huge pages, it is possible for a
    malicious guest to cause this situation.
    
    Add a knob to mark huge pages as non-executable. When the nx_huge_pages
    parameter is enabled (and we are using EPT), all huge pages are marked as
    NX. If the guest attempts to execute in one of those pages, the page is
    broken down into 4K pages, which are then marked executable.
    
    This is not an issue for shadow paging (except nested EPT), because then
    the host is in control of TLB flushes and the problematic situation cannot
    happen.  With nested EPT, again the nested guest can cause problems shadow
    and direct EPT is treated in the same way.
    
    [ tglx: Fixup default to auto and massage wording a bit ]
    
    Originally-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db77548b16521501a287f0e5c8e7754ba35c0193
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sun Oct 27 09:36:37 2019 +0100

    KVM: vmx, svm: always run with EFER.NXE=1 when shadow paging is active
    
    commit 9167ab79936206118cc60e47dcb926c3489f3bd5 upstream.
    
    VMX already does so if the host has SMEP, in order to support the combination of
    CR0.WP=1 and CR4.SMEP=1.  However, it is perfectly safe to always do so, and in
    fact VMX also ends up running with EFER.NXE=1 on old processors that lack the
    "load EFER" controls, because it may help avoiding a slow MSR write.
    
    SVM does not have similar code, but it should since recent AMD processors do
    support SMEP.  So this patch makes the code for the two vendors simpler and
    more similar, while fixing an issue with CR0.WP=1 and CR4.SMEP=1 on AMD.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37dfbc8ba7631c3e8fa249056318cad1d7f09f7c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jul 4 05:14:13 2019 -0400

    KVM: x86: add tracepoints around __direct_map and FNAME(fetch)
    
    commit 335e192a3fa415e1202c8b9ecdaaecd643f823cc upstream.
    
    These are useful in debugging shadow paging.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ef1fae24d58dbd2aac8386dbac1c0dba708fd29
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sun Jun 30 08:36:21 2019 -0400

    KVM: x86: change kvm_mmu_page_get_gfn BUG_ON to WARN_ON
    
    commit e9f2a760b158551bfbef6db31d2cae45ab8072e5 upstream.
    
    Note that in such a case it is quite likely that KVM will BUG_ON
    in __pte_list_remove when the VM is closed.  However, there is no
    immediate risk of memory corruption in the host so a WARN_ON is
    enough and it lets you gather traces for debugging.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b182093d1c7012e0d5dd756ce4b4636d0e7c8c39
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sun Jun 23 19:15:49 2019 +0200

    KVM: x86: remove now unneeded hugepage gfn adjustment
    
    commit d679b32611c0102ce33b9e1a4e4b94854ed1812a upstream.
    
    After the previous patch, the low bits of the gfn are masked in
    both FNAME(fetch) and __direct_map, so we do not need to clear them
    in transparent_hugepage_adjust.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e79234ce5765dd9ce329746cea88cc5b903b1254
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 24 13:06:21 2019 +0200

    KVM: x86: make FNAME(fetch) and __direct_map more similar
    
    commit 3fcf2d1bdeb6a513523cb2c77012a6b047aa859c upstream.
    
    These two functions are basically doing the same thing through
    kvm_mmu_get_page, link_shadow_page and mmu_set_spte; yet, for historical
    reasons, their code looks very different.  This patch tries to take the
    best of each and make them very similar, so that it is easy to understand
    changes that apply to both of them.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8aaac30686233108e8a8648f95dd4ec0e0123389
Author: Junaid Shahid <junaids@google.com>
Date:   Thu Jan 3 16:22:21 2019 -0800

    kvm: mmu: Do not release the page inside mmu_set_spte()
    
    commit 43fdcda96e2550c6d1c46fb8a78801aa2f7276ed upstream.
    
    Release the page at the call-site where it was originally acquired.
    This makes the exit code cleaner for most call sites, since they
    do not need to duplicate code between success and the failure
    label.
    
    Signed-off-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30d8d8d6cd928b5bc8547aca6d8eb30b334d5451
Author: Junaid Shahid <junaids@google.com>
Date:   Thu Jan 3 17:14:28 2019 -0800

    kvm: Convert kvm_lock to a mutex
    
    commit 0d9ce162cf46c99628cc5da9510b959c7976735b upstream.
    
    It doesn't seem as if there is any particular need for kvm_lock to be a
    spinlock, so convert the lock to a mutex so that sleepable functions (in
    particular cond_resched()) can be called while holding it.
    
    Signed-off-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a991063ce57684a2259688886643cf1c430f8188
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Oct 11 11:59:48 2019 +0200

    kvm: x86, powerpc: do not allow clearing largepages debugfs entry
    
    commit 833b45de69a6016c4b0cebe6765d526a31a81580 upstream.
    
    The largepages debugfs entry is incremented/decremented as shadow
    pages are created or destroyed.  Clearing it will result in an
    underflow, which is harmless to KVM but ugly (and could be
    misinterpreted by tools that use debugfs information), so make
    this particular statistic read-only.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm-ppc@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 580c79e7e3e50afbd5a69b2b6ab2c61c5225f48e
Author: Gomez Iglesias, Antonio <antonio.gomez.iglesias@intel.com>
Date:   Mon Nov 4 12:22:03 2019 +0100

    Documentation: Add ITLB_MULTIHIT documentation
    
    commit 7f00cc8d4a51074eb0ad4c3f16c15757b1ddfb7d upstream.
    
    Add the initial ITLB_MULTIHIT documentation.
    
    [ tglx: Add it to the index so it gets actually built. ]
    
    Signed-off-by: Antonio Gomez Iglesias <antonio.gomez.iglesias@intel.com>
    Signed-off-by: Nelson D'Souza <nelson.dsouza@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db5ae6596ae2ba03f66cfeceea4b65e35785600a
Author: Tyler Hicks <tyhicks@canonical.com>
Date:   Mon Nov 4 12:22:02 2019 +0100

    cpu/speculation: Uninline and export CPU mitigations helpers
    
    commit 731dc9df975a5da21237a18c3384f811a7a41cc6 upstream.
    
    A kernel module may need to check the value of the "mitigations=" kernel
    command line parameter as part of its setup when the module needs
    to perform software mitigations for a CPU flaw.
    
    Uninline and export the helper functions surrounding the cpu_mitigations
    enum to allow for their usage from a module.
    
    Lastly, privatize the enum and cpu_mitigations variable since the value of
    cpu_mitigations can be checked with the exported helper functions.
    
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 955607466ace0455164cf391a93c23918022e8e8
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Mon Nov 4 12:22:01 2019 +0100

    x86/cpu: Add Tremont to the cpu vulnerability whitelist
    
    commit cad14885a8d32c1c0d8eaa7bf5c0152a22b6080e upstream.
    
    Add the new cpu family ATOM_TREMONT_D to the cpu vunerability
    whitelist. ATOM_TREMONT_D is not affected by X86_BUG_ITLB_MULTIHIT.
    
    ATOM_TREMONT_D might have mitigations against other issues as well, but
    only the ITLB multihit mitigation is confirmed at this point.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9aa6b73a407b714c9aac44734eb4045c893c6f7
Author: Vineela Tummalapalli <vineela.tummalapalli@intel.com>
Date:   Mon Nov 4 12:22:01 2019 +0100

    x86/bugs: Add ITLB_MULTIHIT bug infrastructure
    
    commit db4d30fbb71b47e4ecb11c4efa5d8aad4b03dfae upstream.
    
    Some processors may incur a machine check error possibly resulting in an
    unrecoverable CPU lockup when an instruction fetch encounters a TLB
    multi-hit in the instruction TLB. This can occur when the page size is
    changed along with either the physical address or cache type. The relevant
    erratum can be found here:
    
       https://bugzilla.kernel.org/show_bug.cgi?id=205195
    
    There are other processors affected for which the erratum does not fully
    disclose the impact.
    
    This issue affects both bare-metal x86 page tables and EPT.
    
    It can be mitigated by either eliminating the use of large pages or by
    using careful TLB invalidations when changing the page size in the page
    tables.
    
    Just like Spectre, Meltdown, L1TF and MDS, a new bit has been allocated in
    MSR_IA32_ARCH_CAPABILITIES (PSCHANGE_MC_NO) and will be set on CPUs which
    are mitigated against this issue.
    
    Signed-off-by: Vineela Tummalapalli <vineela.tummalapalli@intel.com>
    Co-developed-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 415bb221a07038f7a54c4187f1aef1e8e2a4925f
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Nov 6 20:26:46 2019 -0600

    x86/speculation/taa: Fix printing of TAA_MSG_SMT on IBRS_ALL CPUs
    
    commit 012206a822a8b6ac09125bfaa210a95b9eb8f1c1 upstream.
    
    For new IBRS_ALL CPUs, the Enhanced IBRS check at the beginning of
    cpu_bugs_smt_update() causes the function to return early, unintentionally
    skipping the MDS and TAA logic.
    
    This is not a problem for MDS, because there appears to be no overlap
    between IBRS_ALL and MDS-affected CPUs.  So the MDS mitigation would be
    disabled and nothing would need to be done in this function anyway.
    
    But for TAA, the TAA_MSG_SMT string will never get printed on Cascade
    Lake and newer.
    
    The check is superfluous anyway: when 'spectre_v2_enabled' is
    SPECTRE_V2_IBRS_ENHANCED, 'spectre_v2_user' is always
    SPECTRE_V2_USER_NONE, and so the 'spectre_v2_user' switch statement
    handles it appropriately by doing nothing.  So just remove the check.
    
    Fixes: 1b42f017415b ("x86/speculation/taa: Add mitigation for TSX Async Abort")
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ad7466ddf2d78ad2e3f700ed69b694b9f232896
Author: Michal Hocko <mhocko@suse.com>
Date:   Wed Oct 23 12:35:50 2019 +0200

    x86/tsx: Add config options to set tsx=on|off|auto
    
    commit db616173d787395787ecc93eef075fa975227b10 upstream.
    
    There is a general consensus that TSX usage is not largely spread while
    the history shows there is a non trivial space for side channel attacks
    possible. Therefore the tsx is disabled by default even on platforms
    that might have a safe implementation of TSX according to the current
    knowledge. This is a fair trade off to make.
    
    There are, however, workloads that really do benefit from using TSX and
    updating to a newer kernel with TSX disabled might introduce a
    noticeable regressions. This would be especially a problem for Linux
    distributions which will provide TAA mitigations.
    
    Introduce config options X86_INTEL_TSX_MODE_OFF, X86_INTEL_TSX_MODE_ON
    and X86_INTEL_TSX_MODE_AUTO to control the TSX feature. The config
    setting can be overridden by the tsx cmdline options.
    
     [ bp: Text cleanups from Josh. ]
    
    Suggested-by: Borislav Petkov <bpetkov@suse.de>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3bf6b3ff55a549cef225bb25724aa7858377c15
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:32:55 2019 +0200

    x86/speculation/taa: Add documentation for TSX Async Abort
    
    commit a7a248c593e4fd7a67c50b5f5318fe42a0db335e upstream.
    
    Add the documenation for TSX Async Abort. Include the description of
    the issue, how to check the mitigation state, control the mitigation,
    guidance for system administrators.
    
     [ bp: Add proper SPDX tags, touch ups by Josh and me. ]
    
    Co-developed-by: Antonio Gomez Iglesias <antonio.gomez.iglesias@intel.com>
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Antonio Gomez Iglesias <antonio.gomez.iglesias@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2402432d55576a2c35546c72d19893a21edbf133
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:28:57 2019 +0200

    x86/tsx: Add "auto" option to the tsx= cmdline parameter
    
    commit 7531a3596e3272d1f6841e0d601a614555dc6b65 upstream.
    
    Platforms which are not affected by X86_BUG_TAA may want the TSX feature
    enabled. Add "auto" option to the TSX cmdline parameter. When tsx=auto
    disable TSX when X86_BUG_TAA is present, otherwise enable TSX.
    
    More details on X86_BUG_TAA can be found here:
    https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/tsx_async_abort.html
    
     [ bp: Extend the arg buffer to accommodate "auto\0". ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0808f06dfa1adca8e81716cf773db8c8f1c07b9
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:23:33 2019 +0200

    kvm/x86: Export MDS_NO=0 to guests when TSX is enabled
    
    commit e1d38b63acd843cfdd4222bf19a26700fd5c699e upstream.
    
    Export the IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0 to guests on TSX
    Async Abort(TAA) affected hosts that have TSX enabled and updated
    microcode. This is required so that the guests don't complain,
    
      "Vulnerable: Clear CPU buffers attempted, no microcode"
    
    when the host has the updated microcode to clear CPU buffers.
    
    Microcode update also adds support for MSR_IA32_TSX_CTRL which is
    enumerated by the ARCH_CAP_TSX_CTRL bit in IA32_ARCH_CAPABILITIES MSR.
    Guests can't do this check themselves when the ARCH_CAP_TSX_CTRL bit is
    not exported to the guests.
    
    In this case export MDS_NO=0 to the guests. When guests have
    CPUID.MD_CLEAR=1, they deploy MDS mitigation which also mitigates TAA.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15dfa5d706df85506a527c5572be5ff322031a01
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:19:51 2019 +0200

    x86/speculation/taa: Add sysfs reporting for TSX Async Abort
    
    commit 6608b45ac5ecb56f9e171252229c39580cc85f0f upstream.
    
    Add the sysfs reporting file for TSX Async Abort. It exposes the
    vulnerability and the mitigation state similar to the existing files for
    the other hardware vulnerabilities.
    
    Sysfs file path is:
    /sys/devices/system/cpu/vulnerabilities/tsx_async_abort
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c58ea8525bf6df7f4df2692784d2ce315201895
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 11:30:45 2019 +0200

    x86/speculation/taa: Add mitigation for TSX Async Abort
    
    commit 1b42f017415b46c317e71d41c34ec088417a1883 upstream.
    
    TSX Async Abort (TAA) is a side channel vulnerability to the internal
    buffers in some Intel processors similar to Microachitectural Data
    Sampling (MDS). In this case, certain loads may speculatively pass
    invalid data to dependent operations when an asynchronous abort
    condition is pending in a TSX transaction.
    
    This includes loads with no fault or assist condition. Such loads may
    speculatively expose stale data from the uarch data structures as in
    MDS. Scope of exposure is within the same-thread and cross-thread. This
    issue affects all current processors that support TSX, but do not have
    ARCH_CAP_TAA_NO (bit 8) set in MSR_IA32_ARCH_CAPABILITIES.
    
    On CPUs which have their IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0,
    CPUID.MD_CLEAR=1 and the MDS mitigation is clearing the CPU buffers
    using VERW or L1D_FLUSH, there is no additional mitigation needed for
    TAA. On affected CPUs with MDS_NO=1 this issue can be mitigated by
    disabling the Transactional Synchronization Extensions (TSX) feature.
    
    A new MSR IA32_TSX_CTRL in future and current processors after a
    microcode update can be used to control the TSX feature. There are two
    bits in that MSR:
    
    * TSX_CTRL_RTM_DISABLE disables the TSX sub-feature Restricted
    Transactional Memory (RTM).
    
    * TSX_CTRL_CPUID_CLEAR clears the RTM enumeration in CPUID. The other
    TSX sub-feature, Hardware Lock Elision (HLE), is unconditionally
    disabled with updated microcode but still enumerated as present by
    CPUID(EAX=7).EBX{bit4}.
    
    The second mitigation approach is similar to MDS which is clearing the
    affected CPU buffers on return to user space and when entering a guest.
    Relevant microcode update is required for the mitigation to work.  More
    details on this approach can be found here:
    
      https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html
    
    The TSX feature can be controlled by the "tsx" command line parameter.
    If it is force-enabled then "Clear CPU buffers" (MDS mitigation) is
    deployed. The effective mitigation state can be read from sysfs.
    
     [ bp:
       - massage + comments cleanup
       - s/TAA_MITIGATION_TSX_DISABLE/TAA_MITIGATION_TSX_DISABLED/g - Josh.
       - remove partial TAA mitigation in update_mds_branch_idle() - Josh.
       - s/tsx_async_abort_cmdline/tsx_async_abort_parse_cmdline/g
     ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8eb348ae40878a5a0a4de444fa5d2ea8a539f6c
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 11:01:53 2019 +0200

    x86/cpu: Add a "tsx=" cmdline option with TSX disabled by default
    
    commit 95c5824f75f3ba4c9e8e5a4b1a623c95390ac266 upstream.
    
    Add a kernel cmdline parameter "tsx" to control the Transactional
    Synchronization Extensions (TSX) feature. On CPUs that support TSX
    control, use "tsx=on|off" to enable or disable TSX. Not specifying this
    option is equivalent to "tsx=off". This is because on certain processors
    TSX may be used as a part of a speculative side channel attack.
    
    Carve out the TSX controlling functionality into a separate compilation
    unit because TSX is a CPU feature while the TSX async abort control
    machinery will go to cpu/bugs.c.
    
     [ bp: - Massage, shorten and clear the arg buffer.
           - Clarifications of the tsx= possible options - Josh.
           - Expand on TSX_CTRL availability - Pawan. ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37cf9ef900ccb3183c84b2181291b23927cf8002
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 10:52:35 2019 +0200

    x86/cpu: Add a helper function x86_read_arch_cap_msr()
    
    commit 286836a70433fb64131d2590f4bf512097c255e1 upstream.
    
    Add a helper function to read the IA32_ARCH_CAPABILITIES MSR.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4002d16a2ae1e3bdc0aa36ce5089bd62b4b9eab6
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 10:45:50 2019 +0200

    x86/msr: Add the IA32_TSX_CTRL MSR
    
    commit c2955f270a84762343000f103e0640d29c7a96f3 upstream.
    
    Transactional Synchronization Extensions (TSX) may be used on certain
    processors as part of a speculative side channel attack.  A microcode
    update for existing processors that are vulnerable to this attack will
    add a new MSR - IA32_TSX_CTRL to allow the system administrator the
    option to disable TSX as one of the possible mitigations.
    
    The CPUs which get this new MSR after a microcode upgrade are the ones
    which do not set MSR_IA32_ARCH_CAPABILITIES.MDS_NO (bit 5) because those
    CPUs have CPUID.MD_CLEAR, i.e., the VERW implementation which clears all
    CPU buffers takes care of the TAA case as well.
    
      [ Note that future processors that are not vulnerable will also
        support the IA32_TSX_CTRL MSR. ]
    
    Add defines for the new IA32_TSX_CTRL MSR and its bits.
    
    TSX has two sub-features:
    
    1. Restricted Transactional Memory (RTM) is an explicitly-used feature
       where new instructions begin and end TSX transactions.
    2. Hardware Lock Elision (HLE) is implicitly used when certain kinds of
       "old" style locks are used by software.
    
    Bit 7 of the IA32_ARCH_CAPABILITIES indicates the presence of the
    IA32_TSX_CTRL MSR.
    
    There are two control bits in IA32_TSX_CTRL MSR:
    
      Bit 0: When set, it disables the Restricted Transactional Memory (RTM)
             sub-feature of TSX (will force all transactions to abort on the
             XBEGIN instruction).
    
      Bit 1: When set, it disables the enumeration of the RTM and HLE feature
             (i.e. it will make CPUID(EAX=7).EBX{bit4} and
              CPUID(EAX=7).EBX{bit11} read as 0).
    
    The other TSX sub-feature, Hardware Lock Elision (HLE), is
    unconditionally disabled by the new microcode but still enumerated
    as present by CPUID(EAX=7).EBX{bit4}, unless disabled by
    IA32_TSX_CTRL_MSR[1] - TSX_CTRL_CPUID_CLEAR.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbf38b17a892bd1cd06eda6a11b88bbae1875bac
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Aug 19 17:24:07 2019 +0200

    KVM: x86: use Intel speculation bugs and features as derived in generic x86 code
    
    commit 0c54914d0c52a15db9954a76ce80fee32cf318f4 upstream.
    
    Similar to AMD bits, set the Intel bits from the vendor-independent
    feature and bug flags, because KVM_GET_SUPPORTED_CPUID does not care
    about the vendor and they should be set on AMD processors as well.
    
    Suggested-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fee619bb813648ea90bf024171acfaaec2f031fc
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Mon Nov 11 08:13:24 2019 -0800

    drm/i915/cmdparser: Fix jump whitelist clearing
    
    commit ea0b163b13ffc52818c079adb00d55e227a6da6f upstream.
    
    When a jump_whitelist bitmap is reused, it needs to be cleared.
    Currently this is done with memset() and the size calculation assumes
    bitmaps are made of 32-bit words, not longs.  So on 64-bit
    architectures, only the first half of the bitmap is cleared.
    
    If some whitelist bits are carried over between successive batches
    submitted on the same context, this will presumably allow embedding
    the rogue instructions that we're trying to reject.
    
    Use bitmap_zero() instead, which gets the calculation right.
    
    Fixes: f8c08d8faee5 ("drm/i915/cmdparser: Add support for backward jumps")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 255ed51599dea571ac15afc676b2705cf2f83975
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Jul 9 18:24:27 2018 +0300

    drm/i915/gen8+: Add RC6 CTX corruption WA
    
    commit 7e34f4e4aad3fd34c02b294a3cf2321adf5b4438 upstream.
    
    In some circumstances the RC6 context can get corrupted. We can detect
    this and take the required action, that is disable RC6 and runtime PM.
    The HW recovers from the corrupted state after a system suspend/resume
    cycle, so detect the recovery and re-enable RC6 and runtime PM.
    
    v2: rebase (Mika)
    v3:
    - Move intel_suspend_gt_powersave() to the end of the GEM suspend
      sequence.
    - Add commit message.
    v4:
    - Rebased on intel_uncore_forcewake_put(i915->uncore, ...) API
      change.
    v5: rebased on gem/gt split (Mika)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 011b7173cbdbd1a5f1826656693ea51516f15dc1
Author: Uma Shankar <uma.shankar@intel.com>
Date:   Tue Aug 7 21:15:35 2018 +0530

    drm/i915: Lower RM timeout to avoid DSI hard hangs
    
    commit 1d85a299c4db57c55e0229615132c964d17aa765 upstream.
    
    In BXT/APL, device 2 MMIO reads from MIPI controller requires its PLL
    to be turned ON. When MIPI PLL is turned off (MIPI Display is not
    active or connected), and someone (host or GT engine) tries to read
    MIPI registers, it causes hard hang. This is a hardware restriction
    or limitation.
    
    Driver by itself doesn't read MIPI registers when MIPI display is off.
    But any userspace application can submit unprivileged batch buffer for
    execution. In that batch buffer there can be mmio reads. And these
    reads are allowed even for unprivileged applications. If these
    register reads are for MIPI DSI controller and MIPI display is not
    active during that time, then the MMIO read operation causes system
    hard hang and only way to recover is hard reboot. A genuine
    process/application won't submit batch buffer like this and doesn't
    cause any issue. But on a compromised system, a malign userspace
    process/app can generate such batch buffer and can trigger system
    hard hang (denial of service attack).
    
    The fix is to lower the internal MMIO timeout value to an optimum
    value of 950us as recommended by hardware team. If the timeout is
    beyond 1ms (which will hit for any value we choose if MMIO READ on a
    DSI specific register is performed without PLL ON), it causes the
    system hang. But if the timeout value is lower than it will be below
    the threshold (even if timeout happens) and system will not get into
    a hung state. This will avoid a system hang without losing any
    programming or GT interrupts, taking the worst case of lowest CDCLK
    frequency and early DC5 abort into account.
    
    Signed-off-by: Uma Shankar <uma.shankar@intel.com>
    Reviewed-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7bda639a17fe92b66b8bb28e81b558cb8678c85
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Sep 20 09:45:10 2018 -0700

    drm/i915/cmdparser: Ignore Length operands during command matching
    
    commit 926abff21a8f29ef159a3ac893b05c6e50e043c3 upstream.
    
    Some of the gen instruction macros (e.g. MI_DISPLAY_FLIP) have the
    length directly encoded in them. Since these are used directly in
    the tables, the Length becomes part of the comparison used for
    matching during parsing. Thus, if the cmd being parsed has a
    different length to that in the table, it is not matched and the
    cmd is accepted via the default variable length path.
    
    Fix by masking out everything except the Opcode in the cmd tables
    
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e53c71a69138059c8a4dcd1f9a2967c85fede64
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Sep 20 09:58:36 2018 -0700

    drm/i915/cmdparser: Add support for backward jumps
    
    commit f8c08d8faee5567803c8c533865296ca30286bbf upstream.
    
    To keep things manageable, the pre-gen9 cmdparser does not
    attempt to track any form of nested BB_START's. This did not
    prevent usermode from using nested starts, or even chained
    batches because the cmdparser is not strictly enforced pre gen9.
    
    Instead, the existence of a nested BB_START would cause the batch
    to be emitted in insecure mode, and any privileged capabilities
    would not be available.
    
    For Gen9, the cmdparser becomes mandatory (for BCS at least), and
    so not providing any form of nested BB_START support becomes
    overly restrictive. Any such batch will simply not run.
    
    We make heavy use of backward jumps in igt, and it is much easier
    to add support for this restricted subset of nested jumps, than to
    rewrite the whole of our test suite to avoid them.
    
    Add the required logic to support limited backward jumps, to
    instructions that have already been validated by the parser.
    
    Note that it's not sufficient to simply approve any BB_START
    that jumps backwards in the buffer because this would allow an
    attacker to embed a rogue instruction sequence within the
    operand words of a harmless instruction (say LRI) and jump to
    that.
    
    We introduce a bit array to track every instr offset successfully
    validated, and test the target of BB_START against this. If the
    target offset hits, it is re-written to the same offset in the
    shadow buffer and the BB_START cmd is allowed.
    
    Note: This patch deliberately ignores checkpatch issues in the
    cmdtables, in order to match the style of the surrounding code.
    We'll correct the entire file in one go in a later patch.
    
    v2: set dispatch secure late (Mika)
    v3: rebase (Mika)
    v4: Clear whitelist on each parse
    Minor review updates (Chris)
    v5: Correct backward jump batching
    v6: fix compilation error due to struct eb shuffle (Mika)
    
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f27bc2b5950dccac563706a764aa0c2d387db8e9
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Sep 27 10:23:17 2018 -0700

    drm/i915/cmdparser: Use explicit goto for error paths
    
    commit 0546a29cd884fb8184731c79ab008927ca8859d0 upstream.
    
    In the next patch we will be adding a second valid
    termination condition which will require a small
    amount of refactoring to share logic with the BB_END
    case.
    
    Refactor all error conditions to jump to a dedicated
    exit path, with 'break' reserved only for a successful
    parse.
    
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdd77c6b4be41d35000611e2dc9a17a3db808976
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Mon Apr 23 11:12:15 2018 -0700

    drm/i915: Add gen9 BCS cmdparsing
    
    commit 0f2f39758341df70202ae1c42d5a1e4ee392b6d3 upstream.
    
    For gen9 we enable cmdparsing on the BCS ring, specifically
    to catch inadvertent accesses to sensitive registers
    
    Unlike gen7/hsw, we use the parser only to block certain
    registers. We can rely on h/w to block restricted commands,
    so the command tables only provide enough info to allow the
    parser to delineate each command, and identify commands that
    access registers.
    
    Note: This patch deliberately ignores checkpatch issues in
    favour of matching the style of the surrounding code. We'll
    correct the entire file in one go in a later patch.
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fea688c5dd8197fe1ad14a5a2596fee36f993bb8
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Wed Aug 1 09:45:50 2018 -0700

    drm/i915: Allow parsing of unsized batches
    
    commit 435e8fc059dbe0eec823a75c22da2972390ba9e0 upstream.
    
    In "drm/i915: Add support for mandatory cmdparsing" we introduced the
    concept of mandatory parsing. This allows the cmdparser to be invoked
    even when user passes batch_len=0 to the execbuf ioctl's.
    
    However, the cmdparser needs to know the extents of the buffer being
    scanned. Refactor the code to ensure the cmdparser uses the actual
    object size, instead of the incoming length, if user passes 0.
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ce726b61c577344655436d6bf49a13e911b6f0a
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Tue May 22 13:59:06 2018 -0700

    drm/i915: Support ro ppgtt mapped cmdparser shadow buffers
    
    commit 4f7af1948abcb18b4772fe1bcd84d7d27d96258c upstream.
    
    For Gen7, the original cmdparser motive was to permit limited
    use of register read/write instructions in unprivileged BB's.
    This worked by copying the user supplied bb to a kmd owned
    bb, and running it in secure mode, from the ggtt, only if
    the scanner finds no unsafe commands or registers.
    
    For Gen8+ we can't use this same technique because running bb's
    from the ggtt also disables access to ppgtt space. But we also
    do not actually require 'secure' execution since we are only
    trying to reduce the available command/register set. Instead we
    will copy the user buffer to a kmd owned read-only bb in ppgtt,
    and run in the usual non-secure mode.
    
    Note that ro pages are only supported by ppgtt (not ggtt), but
    luckily that's exactly what we need.
    
    Add the required paths to map the shadow buffer to ppgtt ro for Gen8+
    
    v2: IS_GEN7/IS_GEN (Mika)
    v3: rebase
    v4: rebase
    v5: rebase
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc3510fe6f6bcee80279238daf1c5de4d6570210
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Wed Aug 1 09:33:59 2018 -0700

    drm/i915: Add support for mandatory cmdparsing
    
    commit 311a50e76a33d1e029563c24b2ff6db0c02b5afe upstream.
    
    The existing cmdparser for gen7 can be bypassed by specifying
    batch_len=0 in the execbuf call. This is safe because bypassing
    simply reduces the cmd-set available.
    
    In a later patch we will introduce cmdparsing for gen9, as a
    security measure, which must be strictly enforced since without
    it we are vulnerable to DoS attacks.
    
    Introduce the concept of 'required' cmd parsing that cannot be
    bypassed by submitting zero-length bb's.
    
    v2: rebase (Mika)
    v2: rebase (Mika)
    v3: fix conflict on engine flags (Mika)
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fba4207cf15e462c8b388bde1dabb1b64eca21b0
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Fri Jun 8 10:05:26 2018 -0700

    drm/i915: Remove Master tables from cmdparser
    
    commit 66d8aba1cd6db34af10de465c0d52af679288cb6 upstream.
    
    The previous patch has killed support for secure batches
    on gen6+, and hence the cmdparsers master tables are
    now dead code. Remove them.
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1ff77080fa1828dfd67b3082053da1fbb80dfff
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Fri Jun 8 08:53:46 2018 -0700

    drm/i915: Disable Secure Batches for gen6+
    
    commit 44157641d448cbc0c4b73c5231d2b911f0cb0427 upstream.
    
    Retroactively stop reporting support for secure batches
    through the api for gen6+ so that older binaries trigger
    the fallback path instead.
    
    Older binaries use secure batches pre gen6 to access resources
    that are not available to normal usermode processes. However,
    all known userspace explicitly checks for HAS_SECURE_BATCHES
    before relying on the secure batch feature.
    
    Since there are no known binaries relying on this for newer gens
    we can kill secure batches from gen6, via I915_PARAM_HAS_SECURE_BATCHES.
    
    v2: rebase (Mika)
    v3: rebase (Mika)
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4b1abdc6b181cb78a072b95557ae392d423c3eb
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Fri Apr 20 14:26:01 2018 -0700

    drm/i915: Rename gen7 cmdparser tables
    
    commit 0a2f661b6c21815a7fa60e30babe975fee8e73c6 upstream.
    
    We're about to introduce some new tables for later gens, and the
    current naming for the gen7 tables will no longer make sense.
    
    v2: rebase
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e238e05ec2dc714a32955c3a7e316f462e6743c9
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Nov 8 17:08:50 2019 +0100

    vsock/virtio: fix sock refcnt holding during the shutdown
    
    [ Upstream commit ad8a7220355d39cddce8eac1cea9677333e8b821 ]
    
    The "42f5cda5eaf4" commit rightly set SOCK_DONE on peer shutdown,
    but there is an issue if we receive the SHUTDOWN(RDWR) while the
    virtio_transport_close_timeout() is scheduled.
    In this case, when the timeout fires, the SOCK_DONE is already
    set and the virtio_transport_close_timeout() will not call
    virtio_transport_reset() and virtio_transport_do_close().
    This causes that both sockets remain open and will never be released,
    preventing the unloading of [virtio|vhost]_transport modules.
    
    This patch fixes this issue, calling virtio_transport_reset() and
    virtio_transport_do_close() when we receive the SHUTDOWN(RDWR)
    and there is nothing left to read.
    
    Fixes: 42f5cda5eaf4 ("vsock/virtio: set SOCK_DONE on peer shutdown")
    Cc: Stephen Barber <smbarber@chromium.org>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e7e3f16901d7575b9455d84587ba911f04e875f
Author: Steve Moskovchenko <stevemo@skydio.com>
Date:   Tue Apr 2 23:28:56 2019 -0700

    iio: imu: mpu6050: Fix FIFO layout for ICM20602
    
    [ Upstream commit 1615fe41a1959a2ee2814ba62736b2bb54e9802a ]
    
    The MPU6050 driver has recently gained support for the
    ICM20602 IMU, which is very similar to MPU6xxx. However,
    the ICM20602's FIFO data specifically includes temperature
    readings, which were not present on MPU6xxx parts. As a
    result, the driver will under-read the ICM20602's FIFO
    register, causing the same (partial) sample to be returned
    for all reads, until the FIFO overflows.
    
    Fix this by adding a table of scan elements specifically
    for the ICM20602, which takes the extra temperature data
    into consideration.
    
    While we're at it, fix the temperature offset and scaling
    on ICM20602, since it uses different scale/offset constants
    than the rest of the MPU6xxx devices.
    
    Signed-off-by: Steve Moskovchenko <stevemo@skydio.com>
    Fixes: 22904bdff978 ("iio: imu: mpu6050: Add support for the ICM 20602 IMU")
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99ea48af7bd9366633b1887f8463027268254a56
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Nov 4 21:38:43 2019 -0800

    net: prevent load/store tearing on sk->sk_stamp
    
    [ Upstream commit f75359f3ac855940c5718af10ba089b8977bf339 ]
    
    Add a couple of READ_ONCE() and WRITE_ONCE() to prevent
    load-tearing and store-tearing in sock_read_timestamp()
    and sock_write_timestamp()
    
    This might prevent another KCSAN report.
    
    Fixes: 3a0ed3e96197 ("sock: Make sock->sk_stamp thread-safe")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Deepa Dinamani <deepa.kernel@gmail.com>
    Acked-by: Deepa Dinamani <deepa.kernel@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d32629dcd1e5de76185dbff8fb2b1f3f28a2aa52
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Thu Oct 10 19:18:14 2019 +0200

    netfilter: ipset: Copy the right MAC address in hash:ip,mac IPv6 sets
    
    [ Upstream commit 97664bc2c77e2b65cdedddcae2643fc93291d958 ]
    
    Same as commit 1b4a75108d5b ("netfilter: ipset: Copy the right MAC
    address in bitmap:ip,mac and hash:ip,mac sets"), another copy and paste
    went wrong in commit 8cc4ccf58379 ("netfilter: ipset: Allow matching on
    destination MAC address for mac and ipmac sets").
    
    When I fixed this for IPv4 in 1b4a75108d5b, I didn't realise that
    hash:ip,mac sets also support IPv6 as family, and this is covered by a
    separate function, hash_ipmac6_kadt().
    
    In hash:ip,mac sets, the first dimension is the IP address, and the
    second dimension is the MAC address: check the IPSET_DIM_TWO_SRC flag
    in flags while deciding which MAC address to copy, destination or
    source.
    
    This way, mixing source and destination matches for the two dimensions
    of ip,mac hash type works as expected, also for IPv6. With this setup:
    
      ip netns add A
      ip link add veth1 type veth peer name veth2 netns A
      ip addr add 2001:db8::1/64 dev veth1
      ip -net A addr add 2001:db8::2/64 dev veth2
      ip link set veth1 up
      ip -net A link set veth2 up
    
      dst=$(ip netns exec A cat /sys/class/net/veth2/address)
    
      ip netns exec A ipset create test_hash hash:ip,mac family inet6
      ip netns exec A ipset add test_hash 2001:db8::1,${dst}
      ip netns exec A ip6tables -A INPUT -p icmpv6 --icmpv6-type 135 -j ACCEPT
      ip netns exec A ip6tables -A INPUT -m set ! --match-set test_hash src,dst -j DROP
    
    ipset now correctly matches a test packet:
    
      # ping -c1 2001:db8::2 >/dev/null
      # echo $?
      0
    
    Reported-by: Chen, Yi <yiche@redhat.com>
    Fixes: 8cc4ccf58379 ("netfilter: ipset: Allow matching on destination MAC address for mac and ipmac sets")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5833560d54fdf7a33bdde78bf45bfdc67a297e86
Author: Suwan Kim <suwan.kim027@gmail.com>
Date:   Tue Oct 22 18:30:17 2019 +0900

    usbip: Fix free of unallocated memory in vhci tx
    
    [ Upstream commit d4d8257754c3300ea2a465dadf8d2b02c713c920 ]
    
    iso_buffer should be set to NULL after use and free in the while loop.
    In the case of isochronous URB in the while loop, iso_buffer is
    allocated and after sending it to server, buffer is deallocated. And
    then, if the next URB in the while loop is not a isochronous pipe,
    iso_buffer still holds the previously deallocated buffer address and
    kfree tries to free wrong buffer address.
    
    Fixes: ea44d190764b ("usbip: Implement SG support to vhci-hcd and stub driver")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Suwan Kim <suwan.kim027@gmail.com>
    Reviewed-by: Julia Lawall <julia.lawall@lip6.fr>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20191022093017.8027-1-suwan.kim027@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6890b4bc3d2bd1716f63d1c1db91a397876cd82a
Author: Tejun Heo <tj@kernel.org>
Date:   Fri Nov 8 12:18:29 2019 -0800

    cgroup,writeback: don't switch wbs immediately on dead wbs if the memcg is dead
    
    commit 65de03e251382306a4575b1779c57c87889eee49 upstream.
    
    cgroup writeback tries to refresh the associated wb immediately if the
    current wb is dead.  This is to avoid keeping issuing IOs on the stale
    wb after memcg - blkcg association has changed (ie. when blkcg got
    disabled / enabled higher up in the hierarchy).
    
    Unfortunately, the logic gets triggered spuriously on inodes which are
    associated with dead cgroups.  When the logic is triggered on dead
    cgroups, the attempt fails only after doing quite a bit of work
    allocating and initializing a new wb.
    
    While c3aab9a0bd91 ("mm/filemap.c: don't initiate writeback if mapping
    has no dirty pages") alleviated the issue significantly as it now only
    triggers when the inode has dirty pages.  However, the condition can
    still be triggered before the inode is switched to a different cgroup
    and the logic simply doesn't make sense.
    
    Skip the immediate switching if the associated memcg is dying.
    
    This is a simplified version of the following two patches:
    
     * https://lore.kernel.org/linux-mm/20190513183053.GA73423@dennisz-mbp/
     * http://lkml.kernel.org/r/156355839560.2063.5265687291430814589.stgit@buzz
    
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Fixes: e8a7abf5a5bd ("writeback: disassociate inodes from dying bdi_writebacks")
    Acked-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3b3c0a14615c495118acc4bdca23d53eea46ed2
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Mon Sep 23 15:34:45 2019 -0700

    mm/filemap.c: don't initiate writeback if mapping has no dirty pages
    
    commit c3aab9a0bd91b696a852169479b7db1ece6cbf8c upstream.
    
    Functions like filemap_write_and_wait_range() should do nothing if inode
    has no dirty pages or pages currently under writeback.  But they anyway
    construct struct writeback_control and this does some atomic operations if
    CONFIG_CGROUP_WRITEBACK=y - on fast path it locks inode->i_lock and
    updates state of writeback ownership, on slow path might be more work.
    Current this path is safely avoided only when inode mapping has no pages.
    
    For example generic_file_read_iter() calls filemap_write_and_wait_range()
    at each O_DIRECT read - pretty hot path.
    
    This patch skips starting new writeback if mapping has no dirty tags set.
    If writeback is already in progress filemap_write_and_wait_range() will
    wait for it.
    
    Link: http://lkml.kernel.org/r/156378816804.1087.8607636317907921438.stgit@buzz
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 285eb6af435179562bcff22da727bf23532943e1
Author: Jean-Baptiste Maneyrol <JManeyrol@invensense.com>
Date:   Wed Oct 16 14:43:28 2019 +0000

    iio: imu: inv_mpu6050: fix no data on MPU6050
    
    [ Upstream commit 6e82ae6b8d11b948b74e71396efd8e074c415f44 ]
    
    Some chips have a fifo overflow bit issue where the bit is always
    set. The result is that every data is dropped.
    
    Change fifo overflow management by checking fifo count against
    a maximum value.
    
    Add fifo size in chip hardware set of values.
    
    Fixes: f5057e7b2dba ("iio: imu: inv_mpu6050: better fifo overflow handling")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jean-Baptiste Maneyrol <jmaneyrol@invensense.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d888a80727ab578761be2217c397308383614cad
Author: Randolph Maaßen <gaireg@gaireg.de>
Date:   Mon Jan 28 19:50:03 2019 +0100

    iio: imu: mpu6050: Add support for the ICM 20602 IMU
    
    [ Upstream commit 22904bdff97839960bd98b3452a583b1daee628b ]
    
    The Invensense ICM-20602 is a 6-axis MotionTracking device that
    combines a 3-axis gyroscope and an 3-axis accelerometer. It is very
    similar to the ICM-20608 imu which is already supported by the mpu6050
    driver. The main difference is that the ICM-20602 has the i2c bus
    disable bit in a separate register.
    
    Signed-off-by: Randolph Maaßen <gaireg@gaireg.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 522128128dec59914af58649c1be87ea9841743e
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Nov 5 08:09:51 2019 -0800

    blkcg: make blkcg_print_stat() print stats only for online blkgs
    
    [ Upstream commit b0814361a25cba73a224548843ed92d8ea78715a ]
    
    blkcg_print_stat() iterates blkgs under RCU and doesn't test whether
    the blkg is online.  This can call into pd_stat_fn() on a pd which is
    still being initialized leading to an oops.
    
    The heaviest operation - recursively summing up rwstat counters - is
    already done while holding the queue_lock.  Expand queue_lock to cover
    the other operations and skip the blkg if it isn't online yet.  The
    online state is protected by both blkcg and queue locks, so this
    guarantees that only online blkgs are processed.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Roman Gushchin <guro@fb.com>
    Cc: Josef Bacik <jbacik@fb.com>
    Fixes: 903d23f0a354 ("blk-cgroup: allow controllers to output their own stats")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30b969392cf25a586a856a5de73cb8acbe6345da
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 18 11:08:42 2019 +0200

    pinctrl: cherryview: Fix irq_valid_mask calculation
    
    [ Upstream commit 63bdef6cd6941917c823b9cc9aa0219d19fcb716 ]
    
    Commit 03c4749dd6c7 ("gpio / ACPI: Drop unnecessary ACPI GPIO to Linux
    GPIO translation") has made the cherryview gpio numbers sparse, to get
    a 1:1 mapping between ACPI pin numbers and gpio numbers in Linux.
    
    This has greatly simplified things, but the code setting the
    irq_valid_mask was not updated for this, so the valid mask is still in
    the old "compressed" numbering with the gaps in the pin numbers skipped,
    which is wrong as irq_valid_mask needs to be expressed in gpio numbers.
    
    This results in the following error on devices using pin 24 (0x0018) on
    the north GPIO controller as an ACPI event source:
    
    [    0.422452] cherryview-pinctrl INT33FF:01: Failed to translate GPIO to IRQ
    
    This has been reported (by email) to be happening on a Caterpillar CAT T20
    tablet and I've reproduced this myself on a Medion Akoya e2215t 2-in-1.
    
    This commit uses the pin number instead of the compressed index into
    community->pins to clear the correct bits in irq_valid_mask for GPIOs
    using GPEs for interrupts, fixing these errors and in case of the
    Medion Akoya e2215t also fixing the LID switch not working.
    
    Cc: stable@vger.kernel.org
    Fixes: 03c4749dd6c7 ("gpio / ACPI: Drop unnecessary ACPI GPIO to Linux GPIO translation")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca79bb7e1168726a64f5dfbe409e9d9b3e1350e1
Author: Shuning Zhang <sunny.s.zhang@oracle.com>
Date:   Tue Nov 5 21:16:34 2019 -0800

    ocfs2: protect extent tree in ocfs2_prepare_inode_for_write()
    
    [ Upstream commit e74540b285569d2b1e14fe7aee92297078f235ce ]
    
    When the extent tree is modified, it should be protected by inode
    cluster lock and ip_alloc_sem.
    
    The extent tree is accessed and modified in the
    ocfs2_prepare_inode_for_write, but isn't protected by ip_alloc_sem.
    
    The following is a case.  The function ocfs2_fiemap is accessing the
    extent tree, which is modified at the same time.
    
      kernel BUG at fs/ocfs2/extent_map.c:475!
      invalid opcode: 0000 [#1] SMP
      Modules linked in: tun ocfs2 ocfs2_nodemanager configfs ocfs2_stackglue [...]
      CPU: 16 PID: 14047 Comm: o2info Not tainted 4.1.12-124.23.1.el6uek.x86_64 #2
      Hardware name: Oracle Corporation ORACLE SERVER X7-2L/ASM, MB MECH, X7-2L, BIOS 42040600 10/19/2018
      task: ffff88019487e200 ti: ffff88003daa4000 task.ti: ffff88003daa4000
      RIP: ocfs2_get_clusters_nocache.isra.11+0x390/0x550 [ocfs2]
      Call Trace:
        ocfs2_fiemap+0x1e3/0x430 [ocfs2]
        do_vfs_ioctl+0x155/0x510
        SyS_ioctl+0x81/0xa0
        system_call_fastpath+0x18/0xd8
      Code: 18 48 c7 c6 60 7f 65 a0 31 c0 bb e2 ff ff ff 48 8b 4a 40 48 8b 7a 28 48 c7 c2 78 2d 66 a0 e8 38 4f 05 00 e9 28 fe ff ff 0f 1f 00 <0f> 0b 66 0f 1f 44 00 00 bb 86 ff ff ff e9 13 fe ff ff 66 0f 1f
      RIP  ocfs2_get_clusters_nocache.isra.11+0x390/0x550 [ocfs2]
      ---[ end trace c8aa0c8180e869dc ]---
      Kernel panic - not syncing: Fatal exception
      Kernel Offset: disabled
    
    This issue can be reproduced every week in a production environment.
    
    This issue is related to the usage mode.  If others use ocfs2 in this
    mode, the kernel will panic frequently.
    
    [akpm@linux-foundation.org: coding style fixes]
    [Fix new warning due to unused function by removing said function - Linus ]
    Link: http://lkml.kernel.org/r/1568772175-2906-2-git-send-email-sunny.s.zhang@oracle.com
    Signed-off-by: Shuning Zhang <sunny.s.zhang@oracle.com>
    Reviewed-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Gang He <ghe@suse.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Joseph Qi <jiangqi903@gmail.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c655a11196899636a03d4d3d989c08c017fa24b
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Oct 14 12:51:04 2019 +0300

    pinctrl: intel: Avoid potential glitches if pin is in GPIO mode
    
    [ Upstream commit 29c2c6aa32405dfee4a29911a51ba133edcedb0f ]
    
    When consumer requests a pin, in order to be on the safest side,
    we switch it first to GPIO mode followed by immediate transition
    to the input state. Due to posted writes it's luckily to be a single
    I/O transaction.
    
    However, if firmware or boot loader already configures the pin
    to the GPIO mode, user expects no glitches for the requested pin.
    We may check if the pin is pre-configured and leave it as is
    till the actual consumer toggles its state to avoid glitches.
    
    Fixes: 7981c0015af2 ("pinctrl: intel: Add Intel Sunrisepoint pin controller and GPIO support")
    Depends-on: f5a26acf0162 ("pinctrl: intel: Initialize GPIO properly when used through irqchip")
    Cc: stable@vger.kernel.org
    Cc: fei.yang@intel.com
    Reported-by: Oliver Barta <oliver.barta@aptiv.com>
    Reported-by: Malin Jonsson <malin.jonsson@ericsson.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 713adf6dd32723d8d8b1dbb0d1d36c46adf722d5
Author: Wenwen Wang <wenwen@cs.uga.edu>
Date:   Mon Aug 12 00:59:21 2019 -0500

    e1000: fix memory leaks
    
    [ Upstream commit 8472ba62154058b64ebb83d5f57259a352d28697 ]
    
    In e1000_set_ringparam(), 'tx_old' and 'rx_old' are not deallocated if
    e1000_up() fails, leading to memory leaks. Refactor the code to fix this
    issue.
    
    Signed-off-by: Wenwen Wang <wenwen@cs.uga.edu>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a05571772cc9a002542ff14a1adff6908a851ee
Author: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
Date:   Thu Aug 15 13:55:20 2019 -0700

    igb: Fix constant media auto sense switching when no cable is connected
    
    [ Upstream commit 8d5cfd7f76a2414e23c74bb8858af7540365d985 ]
    
    At least on the i350 there is an annoying behavior that is maybe also
    present on 82580 devices, but was probably not noticed yet as MAS is not
    widely used.
    
    If no cable is connected on both fiber/copper ports the media auto sense
    code will constantly swap between them as part of the watchdog task and
    produce many unnecessary kernel log messages.
    
    The swap code responsible for this behavior (switching to fiber) should
    not be executed if the current media type is copper and there is no signal
    detected on the fiber port. In this case we can safely wait until the
    AUTOSENSE_EN bit is cleared.
    
    Signed-off-by: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1baab8352d80e7ac2b2d2785b7962c6af10c633c
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri Nov 1 20:17:25 2019 +0800

    net: ethernet: arc: add the missed clk_disable_unprepare
    
    [ Upstream commit 4202e219edd6cc164c042e16fa327525410705ae ]
    
    The remove misses to disable and unprepare priv->macclk like what is done
    when probe fails.
    Add the missed call in remove.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24523745ed41373c7d62b1556525623e5b0c5c6a
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Oct 31 18:40:32 2019 -0400

    NFSv4: Don't allow a cached open with a revoked delegation
    
    [ Upstream commit be3df3dd4c70ee020587a943a31b98a0fb4b6424 ]
    
    If the delegation is marked as being revoked, we must not use it
    for cached opens.
    
    Fixes: 869f9dfa4d6d ("NFSv4: Fix races between nfs_remove_bad_delegation() and delegation return")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 440a748ed6df3dc0f1488e0e704821d159295eab
Author: Felipe Balbi <felipe.balbi@linux.intel.com>
Date:   Thu Oct 31 11:07:13 2019 +0200

    usb: dwc3: gadget: fix race when disabling ep with cancelled xfers
    
    [ Upstream commit d8eca64eec7103ab1fbabc0a187dbf6acfb2af93 ]
    
    When disabling an endpoint which has cancelled requests, we should
    make sure to giveback requests that are currently pending in the
    cancelled list, otherwise we may fall into a situation where command
    completion interrupt fires after endpoint has been disabled, therefore
    causing a splat.
    
    Fixes: fec9095bdef4 "usb: dwc3: gadget: remove wait_end_transfer"
    Reported-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Link: https://lore.kernel.org/r/20191031090713.1452818-1-felipe.balbi@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e66f52eb3f292b7f70376c512d8e11d9d58241a0
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Wed Oct 30 15:32:13 2019 +0000

    hv_netvsc: Fix error handling in netvsc_attach()
    
    [ Upstream commit 719b85c336ed35565d0f3982269d6f684087bb00 ]
    
    If rndis_filter_open() fails, we need to remove the rndis device created
    in earlier steps, before returning an error code. Otherwise, the retry of
    netvsc_attach() from its callers will fail and hang.
    
    Fixes: 7b2ee50c0cd5 ("hv_netvsc: common detach logic")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99d5f18cebbf3f01f269368923e9b9c3ac134700
Author: Michael Strauss <michael.strauss@amd.com>
Date:   Thu Oct 3 11:54:15 2019 -0400

    drm/amd/display: Passive DP->HDMI dongle detection fix
    
    [ Upstream commit bc2fde42e2418808dbfc04de1a6da91d7d31cf1a ]
    
    [WHY]
    i2c_read is called to differentiate passive DP->HDMI and DP->DVI-D dongles
    The call is expected to fail in DVI-D case but pass in HDMI case
    Some HDMI dongles have a chance to fail as well, causing misdetection as DVI-D
    
    [HOW]
    Retry i2c_read to ensure failed result is valid
    
    Signed-off-by: Michael Strauss <michael.strauss@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5edbf9c45cec143526d9d1708d216228a197cd8
Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
Date:   Thu Oct 24 15:44:10 2019 -0400

    drm/amdgpu: If amdgpu_ib_schedule fails return back the error.
    
    [ Upstream commit 57c0f58e9f562089de5f0b60da103677d232374c ]
    
    Use ERR_PTR to return back the error happened during amdgpu_ib_schedule.
    
    Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b651ddc15e7adfe6ce969a5dc2787281ac12214a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 21 17:17:21 2019 +0200

    iommu/amd: Apply the same IVRS IOAPIC workaround to Acer Aspire A315-41
    
    [ Upstream commit ad3e8da2d422c63c13819a53d3c5ea9312cc0b9d ]
    
    Acer Aspire A315-41 requires the very same workaround as the existing
    quirk for Dell Latitude 5495.  Add the new entry for that.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1137799
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 214e4f0ecdd1e697387f738d84cf56619dd17f86
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sat Oct 26 21:04:27 2019 +0300

    net: mscc: ocelot: refuse to overwrite the port's native vlan
    
    [ Upstream commit b9cd75e6689560140dadaed98eb4b41aad75d55d ]
    
    The switch driver keeps a "vid" variable per port, which signifies _the_
    VLAN ID that is stripped on that port's egress (aka the native VLAN on a
    trunk port).
    
    That is the way the hardware is designed (mostly). The port->vid is
    programmed into REW:PORT:PORT_VLAN_CFG:PORT_VID and the rewriter is told
    to send all traffic as tagged except the one having port->vid.
    
    There exists a possibility of finer-grained egress untagging decisions:
    using the VCAP IS1 engine, one rule can be added to match every
    VLAN-tagged frame whose VLAN should be untagged, and set POP_CNT=1 as
    action. However, the IS1 can hold at most 512 entries, and the VLANs are
    in the order of 6 * 4096.
    
    So the code is fine for now. But this sequence of commands:
    
    $ bridge vlan add dev swp0 vid 1 pvid untagged
    $ bridge vlan add dev swp0 vid 2 untagged
    
    makes untagged and pvid-tagged traffic be sent out of swp0 as tagged
    with VID 1, despite user's request.
    
    Prevent that from happening. The user should temporarily remove the
    existing untagged VLAN (1 in this case), add it back as tagged, and then
    add the new untagged VLAN (2 in this case).
    
    Cc: Antoine Tenart <antoine.tenart@bootlin.com>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Fixes: 7142529f1688 ("net: mscc: ocelot: add VLAN filtering")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5aedcc8aa8be3e0bb280a812e1a08e767cda70f2
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sat Oct 26 21:04:26 2019 +0300

    net: mscc: ocelot: fix vlan_filtering when enslaving to bridge before link is up
    
    [ Upstream commit 1c44ce560b4de639f237b458be1729489ff44d0a ]
    
    Background information: the driver operates the hardware in a mode where
    a single VLAN can be transmitted as untagged on a particular egress
    port. That is the "native VLAN on trunk port" use case. Its value is
    held in port->vid.
    
    Consider the following command sequence (no network manager, all
    interfaces are down, debugging prints added by me):
    
    $ ip link add dev br0 type bridge vlan_filtering 1
    $ ip link set dev swp0 master br0
    
    Kernel code path during last command:
    
    br_add_slave -> ocelot_netdevice_port_event (NETDEV_CHANGEUPPER):
    [   21.401901] ocelot_vlan_port_apply: port 0 vlan aware 0 pvid 0 vid 0
    
    br_add_slave -> nbp_vlan_init -> switchdev_port_attr_set -> ocelot_port_attr_set (SWITCHDEV_ATTR_ID_BRIDGE_VLAN_FILTERING):
    [   21.413335] ocelot_vlan_port_apply: port 0 vlan aware 1 pvid 0 vid 0
    
    br_add_slave -> nbp_vlan_init -> nbp_vlan_add -> br_switchdev_port_vlan_add -> switchdev_port_obj_add -> ocelot_port_obj_add -> ocelot_vlan_vid_add
    [   21.667421] ocelot_vlan_port_apply: port 0 vlan aware 1 pvid 1 vid 1
    
    So far so good. The bridge has replaced the driver's default pvid used
    in standalone mode (0) with its own default_pvid (1). The port's vid
    (native VLAN) has also changed from 0 to 1.
    
    $ ip link set dev swp0 up
    
    [   31.722956] 8021q: adding VLAN 0 to HW filter on device swp0
    do_setlink -> dev_change_flags -> vlan_vid_add -> ocelot_vlan_rx_add_vid -> ocelot_vlan_vid_add:
    [   31.728700] ocelot_vlan_port_apply: port 0 vlan aware 1 pvid 1 vid 0
    
    The 8021q module uses the .ndo_vlan_rx_add_vid API on .ndo_open to make
    ports be able to transmit and receive 802.1p-tagged traffic by default.
    This API is supposed to offload a VLAN sub-interface, which for a switch
    port means to add a VLAN that is not a pvid, and tagged on egress.
    
    But the driver implementation of .ndo_vlan_rx_add_vid is wrong: it adds
    back vid 0 as "egress untagged". Now back to the initial paragraph:
    there is a single untagged VID that the driver keeps track of, and that
    has just changed from 1 (the pvid) to 0. So this breaks the bridge
    core's expectation, because it has changed vid 1 from untagged to
    tagged, when what the user sees is.
    
    $ bridge vlan
    port    vlan ids
    swp0     1 PVID Egress Untagged
    
    br0      1 PVID Egress Untagged
    
    But curiously, instead of manifesting itself as "untagged and
    pvid-tagged traffic gets sent as tagged on egress", the bug:
    
    - is hidden when vlan_filtering=0
    - manifests as dropped traffic when vlan_filtering=1, due to this setting:
    
            if (port->vlan_aware && !port->vid)
                    /* If port is vlan-aware and tagged, drop untagged and priority
                     * tagged frames.
                     */
                    val |= ANA_PORT_DROP_CFG_DROP_UNTAGGED_ENA |
                           ANA_PORT_DROP_CFG_DROP_PRIO_S_TAGGED_ENA |
                           ANA_PORT_DROP_CFG_DROP_PRIO_C_TAGGED_ENA;
    
    which would have made sense if it weren't for this bug. The setting's
    intention was "this is a trunk port with no native VLAN, so don't accept
    untagged traffic". So the driver was never expecting to set VLAN 0 as
    the value of the native VLAN, 0 was just encoding for "invalid".
    
    So the fix is to not send 802.1p traffic as untagged, because that would
    change the port's native vlan to 0, unbeknownst to the bridge, and
    trigger unexpected code paths in the driver.
    
    Cc: Antoine Tenart <antoine.tenart@bootlin.com>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Fixes: 7142529f1688 ("net: mscc: ocelot: add VLAN filtering")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Reviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b956e63e2f39ac3a17e1064546c30d331dc85b0
Author: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
Date:   Fri Oct 25 21:48:22 2019 +0800

    net: hisilicon: Fix "Trying to free already-free IRQ"
    
    [ Upstream commit 63a41746827cb16dc6ad0d4d761ab4e7dda7a0c3 ]
    
    When rmmod hip04_eth.ko, we can get the following warning:
    
    Task track: rmmod(1623)>bash(1591)>login(1581)>init(1)
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 1623 at kernel/irq/manage.c:1557 __free_irq+0xa4/0x2ac()
    Trying to free already-free IRQ 200
    Modules linked in: ping(O) pramdisk(O) cpuinfo(O) rtos_snapshot(O) interrupt_ctrl(O) mtdblock mtd_blkdevrtfs nfs_acl nfs lockd grace sunrpc xt_tcpudp ipt_REJECT iptable_filter ip_tables x_tables nf_reject_ipv
    CPU: 0 PID: 1623 Comm: rmmod Tainted: G           O    4.4.193 #1
    Hardware name: Hisilicon A15
    [<c020b408>] (rtos_unwind_backtrace) from [<c0206624>] (show_stack+0x10/0x14)
    [<c0206624>] (show_stack) from [<c03f2be4>] (dump_stack+0xa0/0xd8)
    [<c03f2be4>] (dump_stack) from [<c021a780>] (warn_slowpath_common+0x84/0xb0)
    [<c021a780>] (warn_slowpath_common) from [<c021a7e8>] (warn_slowpath_fmt+0x3c/0x68)
    [<c021a7e8>] (warn_slowpath_fmt) from [<c026876c>] (__free_irq+0xa4/0x2ac)
    [<c026876c>] (__free_irq) from [<c0268a14>] (free_irq+0x60/0x7c)
    [<c0268a14>] (free_irq) from [<c0469e80>] (release_nodes+0x1c4/0x1ec)
    [<c0469e80>] (release_nodes) from [<c0466924>] (__device_release_driver+0xa8/0x104)
    [<c0466924>] (__device_release_driver) from [<c0466a80>] (driver_detach+0xd0/0xf8)
    [<c0466a80>] (driver_detach) from [<c0465e18>] (bus_remove_driver+0x64/0x8c)
    [<c0465e18>] (bus_remove_driver) from [<c02935b0>] (SyS_delete_module+0x198/0x1e0)
    [<c02935b0>] (SyS_delete_module) from [<c0202ed0>] (__sys_trace_return+0x0/0x10)
    ---[ end trace bb25d6123d849b44 ]---
    
    Currently "rmmod hip04_eth.ko" call free_irq more than once
    as devres_release_all and hip04_remove both call free_irq.
    This results in a 'Trying to free already-free IRQ' warning.
    To solve the problem free_irq has been moved out of hip04_remove.
    
    Signed-off-by: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f09b99c883e82fd5d28a529e11e66c2e887da636
Author: Will Deacon <will@kernel.org>
Date:   Fri Oct 25 12:06:02 2019 +0100

    fjes: Handle workqueue allocation failure
    
    [ Upstream commit 85ac30fa2e24f628e9f4f9344460f4015d33fd7d ]
    
    In the highly unlikely event that we fail to allocate either of the
    "/txrx" or "/control" workqueues, we should bail cleanly rather than
    blindly march on with NULL queue pointer(s) installed in the
    'fjes_adapter' instance.
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Reported-by: Nicolas Waisman <nico@semmle.com>
    Link: https://lore.kernel.org/lkml/CADJ_3a8WFrs5NouXNqS5WYe7rebFP+_A5CheeqAyD_p7DFJJcg@mail.gmail.com/
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6376736d016f71ed1d70ee0eb78583c8b29d0852
Author: Anton Eidelman <anton@lightbitslabs.com>
Date:   Fri Oct 18 11:32:50 2019 -0700

    nvme-multipath: fix possible io hang after ctrl reconnect
    
    [ Upstream commit af8fd0424713a2adb812d10d55e86718152cf656 ]
    
    The following scenario results in an IO hang:
    1) ctrl completes a request with NVME_SC_ANA_TRANSITION.
       NVME_NS_ANA_PENDING bit in ns->flags is set and ana_work is triggered.
    2) ana_work: nvme_read_ana_log() tries to get the ANA log page from the ctrl.
       This fails because ctrl disconnects.
       Therefore nvme_update_ns_ana_state() is not called
       and NVME_NS_ANA_PENDING bit in ns->flags is not cleared.
    3) ctrl reconnects: nvme_mpath_init(ctrl,...) calls
       nvme_read_ana_log(ctrl, groups_only=true).
       However, nvme_update_ana_state() does not update namespaces
       because nr_nsids = 0 (due to groups_only mode).
    4) scan_work calls nvme_validate_ns() finds the ns and re-validates OK.
    
    Result:
    The ctrl is now live but NVME_NS_ANA_PENDING bit in ns->flags is still set.
    Consequently ctrl will never be considered a viable path by __nvme_find_path().
    IO will hang if ctrl is the only or the last path to the namespace.
    
    More generally, while ctrl is reconnecting, its ANA state may change.
    And because nvme_mpath_init() requests ANA log in groups_only mode,
    these changes are not propagated to the existing ctrl namespaces.
    This may result in a mal-function or an IO hang.
    
    Solution:
    nvme_mpath_init() will nvme_read_ana_log() with groups_only set to false.
    This will not harm the new ctrl case (no namespaces present),
    and will make sure the ANA state of namespaces gets updated after reconnect.
    
    Note: Another option would be for nvme_mpath_init() to invoke
    nvme_parse_ana_log(..., nvme_set_ns_ana_state) for each existing namespace.
    
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1372527e6876d36786f9f56b9e71ce97bf0dd5d8
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu Oct 24 16:38:04 2019 +1000

    scsi: qla2xxx: stop timer in shutdown path
    
    [ Upstream commit d3566abb1a1e7772116e4d50fb6a58d19c9802e5 ]
    
    In shutdown/reboot paths, the timer is not stopped:
    
      qla2x00_shutdown
      pci_device_shutdown
      device_shutdown
      kernel_restart_prepare
      kernel_restart
      sys_reboot
    
    This causes lockups (on powerpc) when firmware config space access calls
    are interrupted by smp_send_stop later in reboot.
    
    Fixes: e30d1756480dc ("[SCSI] qla2xxx: Addition of shutdown callback handler.")
    Link: https://lore.kernel.org/r/20191024063804.14538-1-npiggin@gmail.com
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2bab3ed456cc405471f8735e1c325491ca7278b
Author: Lijun Ou <oulijun@huawei.com>
Date:   Sat Oct 26 14:56:35 2019 +0800

    RDMA/hns: Prevent memory leaks of eq->buf_list
    
    [ Upstream commit b681a0529968d2261aa15d7a1e78801b2c06bb07 ]
    
    eq->buf_list->buf and eq->buf_list should also be freed when eqe_hop_num
    is set to 0, or there will be memory leaks.
    
    Fixes: a5073d6054f7 ("RDMA/hns: Add eq support of hip08")
    Link: https://lore.kernel.org/r/1572072995-11277-3-git-send-email-liweihang@hisilicon.com
    Signed-off-by: Lijun Ou <oulijun@huawei.com>
    Signed-off-by: Weihang Li <liweihang@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55ca083474872de81033ec64585005fcf3cb0304
Author: Potnuri Bharat Teja <bharat@chelsio.com>
Date:   Fri Oct 25 18:04:40 2019 +0530

    RDMA/iw_cxgb4: Avoid freeing skb twice in arp failure case
    
    [ Upstream commit d4934f45693651ea15357dd6c7c36be28b6da884 ]
    
    _put_ep_safe() and _put_pass_ep_safe() free the skb before it is freed by
    process_work(). fix double free by freeing the skb only in process_work().
    
    Fixes: 1dad0ebeea1c ("iw_cxgb4: Avoid touch after free error in ARP failure handlers")
    Link: https://lore.kernel.org/r/1572006880-5800-1-git-send-email-bharat@chelsio.com
    Signed-off-by: Dakshaja Uppalapati <dakshaja@chelsio.com>
    Signed-off-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e36be7959326f3b49653e64f46612ca6a5b98fd2
Author: GwanYeong Kim <gy741.kim@gmail.com>
Date:   Fri Oct 18 03:22:23 2019 +0000

    usbip: tools: Fix read_usb_vudc_device() error path handling
    
    [ Upstream commit 28df0642abbf6d66908a2858922a7e4b21cdd8c2 ]
    
    This isn't really accurate right. fread() doesn't always
    return 0 in error. It could return < number of elements
    and set errno.
    
    Signed-off-by: GwanYeong Kim <gy741.kim@gmail.com>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20191018032223.4644-1-gy741.kim@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd9561a53d263745f48768e23b02d08bdde1c5b3
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 22 16:32:03 2019 +0200

    USB: ldusb: use unsigned size format specifiers
    
    [ Upstream commit 88f6bf3846ee90bf33aa1ce848cd3bfb3229f4a4 ]
    
    A recent info-leak bug manifested itself along with warning about a
    negative buffer overflow:
    
            ldusb 1-1:0.28: Read buffer overflow, -131383859965943 bytes dropped
    
    when it was really a rather large positive one.
    
    A sanity check that prevents this has now been put in place, but let's
    fix up the size format specifiers, which should all be unsigned.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191022143203.5260-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c753113ae714e0329e5fe926da07e325c83aad66
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 28 10:52:35 2019 -0400

    USB: Skip endpoints with 0 maxpacket length
    
    [ Upstream commit d482c7bb0541d19dea8bff437a9f3c5563b5b2d2 ]
    
    Endpoints with a maxpacket length of 0 are probably useless.  They
    can't transfer any data, and it's not at all unlikely that an HCD will
    crash or hang when trying to handle an URB for such an endpoint.
    
    Currently the USB core does not check for endpoints having a maxpacket
    value of 0.  This patch adds a check, printing a warning and skipping
    over any endpoints it catches.
    
    Now, the USB spec does not rule out endpoints having maxpacket = 0.
    But since they wouldn't have any practical use, there doesn't seem to
    be any good reason for us to accept them.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1910281050420.1485-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef38f4d123d069abad8ef4bf73a3dfcafe69f2be
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Oct 25 07:43:13 2019 -0700

    perf/x86/uncore: Fix event group support
    
    [ Upstream commit 75be6f703a141b048590d659a3954c4fedd30bba ]
    
    The events in the same group don't start or stop simultaneously.
    Here is the ftrace when enabling event group for uncore_iio_0:
    
      # perf stat -e "{uncore_iio_0/event=0x1/,uncore_iio_0/event=0xe/}"
    
                <idle>-0     [000] d.h.  8959.064832: read_msr: a41, value
      b2b0b030              //Read counter reg of IIO unit0 counter0
                <idle>-0     [000] d.h.  8959.064835: write_msr: a48, value
      400001                        //Write Ctrl reg of IIO unit0 counter0 to enable
      counter0. <------ Although counter0 is enabled, Unit Ctrl is still
      freezed. Nothing will count. We are still good here.
                <idle>-0     [000] d.h.  8959.064836: read_msr: a40, value
      30100                   //Read Unit Ctrl reg of IIO unit0
                <idle>-0     [000] d.h.  8959.064838: write_msr: a40, value
      30000                 //Write Unit Ctrl reg of IIO unit0 to enable all
      counters in the unit by clear Freeze bit  <------Unit0 is un-freezed.
      Counter0 has been enabled. Now it starts counting. But counter1 has not
      been enabled yet. The issue starts here.
                <idle>-0     [000] d.h.  8959.064846: read_msr: a42, value 0
                            //Read counter reg of IIO unit0 counter1
                <idle>-0     [000] d.h.  8959.064847: write_msr: a49, value
      40000e                        //Write Ctrl reg of IIO unit0 counter1 to enable
      counter1.   <------ Now, counter1 just starts to count. Counter0 has
      been running for a while.
    
    Current code un-freezes the Unit Ctrl right after the first counter is
    enabled. The subsequent group events always loses some counter values.
    
    Implement pmu_enable and pmu_disable support for uncore, which can help
    to batch hardware accesses.
    
    No one uses uncore_enable_box and uncore_disable_box. Remove them.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: linux-drivers-review@eclists.intel.com
    Cc: linux-perf@eclists.intel.com
    Fixes: 087bfbb03269 ("perf/x86: Add generic Intel uncore PMU support")
    Link: https://lkml.kernel.org/r/1572014593-31591-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f14751658a015cd74deb06d7650ce4ff857d9fad
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Wed Oct 23 10:09:55 2019 -0500

    perf/x86/amd/ibs: Handle erratum #420 only on the affected CPU family (10h)
    
    [ Upstream commit e431e79b60603079d269e0c2a5177943b95fa4b6 ]
    
    This saves us writing the IBS control MSR twice when disabling the
    event.
    
    I searched revision guides for all families since 10h, and did not
    find occurrence of erratum #420, nor anything remotely similar:
    so we isolate the secondary MSR write to family 10h only.
    
    Also unconditionally update the count mask for IBS Op implementations
    that have read & writeable current count (CurCnt) fields in addition
    to the MaxCnt field.  These bits were reserved on prior
    implementations, and therefore shouldn't have negative impact.
    
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: c9574fe0bdb9 ("perf/x86-ibs: Implement workaround for IBS erratum #420")
    Link: https://lkml.kernel.org/r/20191023150955.30292-2-kim.phillips@amd.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b99e97b275a1be576f1e900c105081c102ae45a
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Wed Oct 23 10:09:54 2019 -0500

    perf/x86/amd/ibs: Fix reading of the IBS OpData register and thus precise RIP validity
    
    [ Upstream commit 317b96bb14303c7998dbcd5bc606bd8038fdd4b4 ]
    
    The loop that reads all the IBS MSRs into *buf stopped one MSR short of
    reading the IbsOpData register, which contains the RipInvalid status bit.
    
    Fix the offset_max assignment so the MSR gets read, so the RIP invalid
    evaluation is based on what the IBS h/w output, instead of what was
    left in memory.
    
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: d47e8238cd76 ("perf/x86-ibs: Take instruction pointer from ibs sample")
    Link: https://lkml.kernel.org/r/20191023150955.30292-1-kim.phillips@amd.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45944c4a7743e4d4b8fd9a66407aa3d3047a73a3
Author: Yinbo Zhu <yinbo.zhu@nxp.com>
Date:   Mon Jul 29 14:46:07 2019 +0800

    usb: dwc3: remove the call trace of USBx_GFLADJ
    
    [ Upstream commit a7d9874c6f3fbc8d25cd9ceba35b6822612c4ebf ]
    
    layerscape board sometimes reported some usb call trace, that is due to
    kernel sent LPM tokerns automatically when it has no pending transfers
    and think that the link is idle enough to enter L1, which procedure will
    ask usb register has a recovery,then kernel will compare USBx_GFLADJ and
    set GFLADJ_30MHZ, GFLADJ_30MHZ_REG until GFLADJ_30MHZ is equal 0x20, if
    the conditions were met then issue occur, but whatever the conditions
    whether were met that usb is all need keep GFLADJ_30MHZ of value is 0x20
    (xhci spec ask use GFLADJ_30MHZ to adjust any offset from clock source
    that generates the clock that drives the SOF counter, 0x20 is default
    value of it)That is normal logic, so need remove the call trace.
    
    Signed-off-by: Yinbo Zhu <yinbo.zhu@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dff38149cec4e0ddf78280540393e1fb5268397f
Author: Peter Chen <peter.chen@nxp.com>
Date:   Mon Aug 26 15:10:55 2019 -0400

    usb: gadget: configfs: fix concurrent issue between composite APIs
    
    [ Upstream commit 1a1c851bbd706ea9f3a9756c2d3db28523506d3b ]
    
    We meet several NULL pointer issues if configfs_composite_unbind
    and composite_setup (or composite_disconnect) are running together.
    These issues occur when do the function switch stress test, the
    configfs_compsoite_unbind is called from user mode by
    echo "" to /sys/../UDC entry, and meanwhile, the setup interrupt
    or disconnect interrupt occurs by hardware. The composite_setup
    will get the cdev from get_gadget_data, but configfs_composite_unbind
    will set gadget data as NULL, so the NULL pointer issue occurs.
    This concurrent is hard to reproduce by native kernel, but can be
    reproduced by android kernel.
    
    In this commit, we introduce one spinlock belongs to structure
    gadget_info since we can't use the same spinlock in usb_composite_dev
    due to exclusive running together between composite_setup and
    configfs_composite_unbind. And one bit flag 'unbind' to indicate the
    code is at unbind routine, this bit is needed due to we release the
    lock at during configfs_composite_unbind sometimes, and composite_setup
    may be run at that time.
    
    Several oops:
    
    oops 1:
    android_work: sent uevent USB_STATE=CONNECTED
    configfs-gadget gadget: super-speed config #1: b
    android_work: sent uevent USB_STATE=CONFIGURED
    init: Received control message 'start' for 'adbd' from pid: 3515 (system_server)
    Unable to handle kernel NULL pointer dereference at virtual address 0000002a
    init: Received control message 'stop' for 'adbd' from pid: 3375 (/vendor/bin/hw/android.hardware.usb@1.1-servic)
    Mem abort info:
      Exception class = DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
    Data abort info:
      ISV = 0, ISS = 0x00000004
      CM = 0, WnR = 0
    user pgtable: 4k pages, 48-bit VAs, pgd = ffff8008f1b7f000
    [000000000000002a] *pgd=0000000000000000
    Internal error: Oops: 96000004 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 4 PID: 2457 Comm: irq/125-5b11000 Not tainted 4.14.98-07846-g0b40a9b-dirty #16
    Hardware name: Freescale i.MX8QM MEK (DT)
    task: ffff8008f2a98000 task.stack: ffff00000b7b8000
    PC is at composite_setup+0x44/0x1508
    LR is at android_setup+0xb8/0x13c
    pc : [<ffff0000089ffb3c>] lr : [<ffff000008a032fc>] pstate: 800001c5
    sp : ffff00000b7bbb80
    x29: ffff00000b7bbb80 x28: ffff8008f2a3c010
    x27: 0000000000000001 x26: 0000000000000000                                                          [1232/1897]
    audit: audit_lost=25791 audit_rate_limit=5 audit_backlog_limit=64
    x25: 00000000ffffffa1 x24: ffff8008f2a3c010
    audit: rate limit exceeded
    x23: 0000000000000409 x22: ffff000009c8e000
    x21: ffff8008f7a8b428 x20: ffff00000afae000
    x19: ffff0000089ff000 x18: 0000000000000000
    x17: 0000000000000000 x16: ffff0000082b7c9c
    x15: 0000000000000000 x14: f1866f5b952aca46
    x13: e35502e30d44349c x12: 0000000000000008
    x11: 0000000000000008 x10: 0000000000000a30
    x9 : ffff00000b7bbd00 x8 : ffff8008f2a98a90
    x7 : ffff8008f27a9c90 x6 : 0000000000000001
    x5 : 0000000000000000 x4 : 0000000000000001
    x3 : 0000000000000000 x2 : 0000000000000006
    x1 : ffff0000089ff8d0 x0 : 732a010310b9ed00
    
    X7: 0xffff8008f27a9c10:
    9c10  00000002 00000000 00000001 00000000 13110000 ffff0000 00000002 00208040
    9c30  00000000 00000000 00000000 00000000 00000000 00000005 00000029 00000000
    9c50  00051778 00000001 f27a8e00 ffff8008 00000005 00000000 00000078 00000078
    9c70  00000078 00000000 09031d48 ffff0000 00100000 00000000 00400000 00000000
    9c90  00000001 00000000 00000000 00000000 00000000 00000000 ffefb1a0 ffff8008
    9cb0  f27a9ca8 ffff8008 00000000 00000000 b9d88037 00000173 1618a3eb 00000001
    9cd0  870a792a 0000002e 16188fe6 00000001 0000242b 00000000 00000000 00000000
    using random self ethernet address
    9cf0  019a4646 00000000 000547f3 00000000 ecfd6c33 00000002 00000000
    using random host ethernet address
     00000000
    
    X8: 0xffff8008f2a98a10:
    8a10  00000000 00000000 f7788d00 ffff8008 00000001 00000000 00000000 00000000
    8a30  eb218000 ffff8008 f2a98000 ffff8008 f2a98000 ffff8008 09885000 ffff0000
    8a50  f34df480 ffff8008 00000000 00000000 f2a98648 ffff8008 09c8e000 ffff0000
    8a70  fff2c800 ffff8008 09031d48 ffff0000 0b7bbd00 ffff0000 0b7bbd00 ffff0000
    8a90  080861bc ffff0000 00000000 00000000 00000000 00000000 00000000 00000000
    8ab0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8ad0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8af0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    
    X21: 0xffff8008f7a8b3a8:
    b3a8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b3c8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b3e8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b408  00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000
    b428  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b448  0053004d 00540046 00300031 00010030 eb07b520 ffff8008 20011201 00000003
    b468  e418d109 0104404e 00010302 00000000 eb07b558 ffff8008 eb07b558 ffff8008
    b488  f7a8b488 ffff8008 f7a8b488 ffff8008 f7a8b300 ffff8008 00000000 00000000
    
    X24: 0xffff8008f2a3bf90:
    bf90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfd0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    c010  00000000 00000000 f2a3c018 ffff8008 f2a3c018 ffff8008 08a067dc ffff0000
    c030  f2a5a000 ffff8008 091c3650 ffff0000 f716fd18 ffff8008 f716fe30 ffff8008
    c050  f2ce4a30 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    c070  f76c8010 ffff8008 f2ce4b00 ffff8008 095cac68 ffff0000 f2a5a028 ffff8008
    
    X28: 0xffff8008f2a3bf90:
    bf90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfd0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    c010  00000000 00000000 f2a3c018 ffff8008 f2a3c018 ffff8008 08a067dc ffff0000
    c030  f2a5a000 ffff8008 091c3650 ffff0000 f716fd18 ffff8008 f716fe30 ffff8008
    c050  f2ce4a30 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    c070  f76c8010 ffff8008 f2ce4b00 ffff8008 095cac68 ffff0000 f2a5a028 ffff8008
    
    Process irq/125-5b11000 (pid: 2457, stack limit = 0xffff00000b7b8000)
    Call trace:
    Exception stack(0xffff00000b7bba40 to 0xffff00000b7bbb80)
    ba40: 732a010310b9ed00 ffff0000089ff8d0 0000000000000006 0000000000000000
    ba60: 0000000000000001 0000000000000000 0000000000000001 ffff8008f27a9c90
    ba80: ffff8008f2a98a90 ffff00000b7bbd00 0000000000000a30 0000000000000008
    baa0: 0000000000000008 e35502e30d44349c f1866f5b952aca46 0000000000000000
    bac0: ffff0000082b7c9c 0000000000000000 0000000000000000 ffff0000089ff000
    bae0: ffff00000afae000 ffff8008f7a8b428 ffff000009c8e000 0000000000000409
    bb00: ffff8008f2a3c010 00000000ffffffa1 0000000000000000 0000000000000001
    bb20: ffff8008f2a3c010 ffff00000b7bbb80 ffff000008a032fc ffff00000b7bbb80
    bb40: ffff0000089ffb3c 00000000800001c5 ffff00000b7bbb80 732a010310b9ed00
    bb60: ffffffffffffffff ffff0000080f777c ffff00000b7bbb80 ffff0000089ffb3c
    [<ffff0000089ffb3c>] composite_setup+0x44/0x1508
    [<ffff000008a032fc>] android_setup+0xb8/0x13c
    [<ffff0000089bd9a8>] cdns3_ep0_delegate_req+0x44/0x70
    [<ffff0000089bdff4>] cdns3_check_ep0_interrupt_proceed+0x33c/0x654
    [<ffff0000089bca44>] cdns3_device_thread_irq_handler+0x4b0/0x4bc
    [<ffff0000089b77b4>] cdns3_thread_irq+0x48/0x68
    [<ffff000008145bf0>] irq_thread_fn+0x28/0x88
    [<ffff000008145e38>] irq_thread+0x13c/0x228
    [<ffff0000080fed70>] kthread+0x104/0x130
    [<ffff000008085064>] ret_from_fork+0x10/0x18
    
    oops2:
    composite_disconnect: Calling disconnect on a Gadget that is                      not connected
    android_work: did not send uevent (0 0           (null))
    init: Received control message 'stop' for 'adbd' from pid: 3359 (/vendor/bin/hw/android.hardware.usb@1.1-service.imx)
    init: Sending signal 9 to service 'adbd' (pid 22343) process group...
    ------------[ cut here ]------------
    audit: audit_lost=180038 audit_rate_limit=5 audit_backlog_limit=64
    audit: rate limit exceeded
    WARNING: CPU: 0 PID: 3468 at kernel_imx/drivers/usb/gadget/composite.c:2009 composite_disconnect+0x80/0x88
    Modules linked in:
    CPU: 0 PID: 3468 Comm: HWC-UEvent-Thre Not tainted 4.14.98-07846-g0b40a9b-dirty #16
    Hardware name: Freescale i.MX8QM MEK (DT)
    task: ffff8008f2349c00 task.stack: ffff00000b0a8000
    PC is at composite_disconnect+0x80/0x88
    LR is at composite_disconnect+0x80/0x88
    pc : [<ffff0000089ff9b0>] lr : [<ffff0000089ff9b0>] pstate: 600001c5
    sp : ffff000008003dd0
    x29: ffff000008003dd0 x28: ffff8008f2349c00
    x27: ffff000009885018 x26: ffff000008004000
    Timeout for IPC response!
    x25: ffff000009885018 x24: ffff000009c8e280
    x23: ffff8008f2d98010 x22: 00000000000001c0
    x21: ffff8008f2d98394 x20: ffff8008f2d98010
    x19: 0000000000000000 x18: 0000e3956f4f075a
    fxos8700 4-001e: i2c block read acc failed
    x17: 0000e395735727e8 x16: ffff00000829f4d4
    x15: ffffffffffffffff x14: 7463656e6e6f6320
    x13: 746f6e2009090920 x12: 7369207461687420
    x11: 7465676461472061 x10: 206e6f207463656e
    x9 : 6e6f637369642067 x8 : ffff000009c8e280
    x7 : ffff0000086ca6cc x6 : ffff000009f15e78
    x5 : 0000000000000000 x4 : 0000000000000000
    x3 : ffffffffffffffff x2 : c3f28b86000c3900
    x1 : c3f28b86000c3900 x0 : 000000000000004e
    
    X20: 0xffff8008f2d97f90:
    7f90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7fb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    libprocessgroup: Failed to kill process cgroup uid 0 pid 22343 in 215ms, 1 processes remain
    7fd0
    Timeout for IPC response!
     00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    using random self ethernet address
    7ff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    8010  00000100 00000000 f2d98018 ffff8008 f2d98018 ffff8008 08a067dc
    using random host ethernet address
     ffff0000
    8030  f206d800 ffff8008 091c3650 ffff0000 f7957b18 ffff8008 f7957730 ffff8008
    8050  f716a630 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    8070  f76c8010 ffff8008 f716a800 ffff8008 095cac68 ffff0000 f206d828 ffff8008
    
    X21: 0xffff8008f2d98314:
    8314  ffff8008 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8334  00000000 00000000 00000000 00000000 00000000 08a04cf4 ffff0000 00000000
    8354  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8374  00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000
    8394  e4bbe4bb 0f230000 ffff0000 0afae000 ffff0000 ae001000 00000000 f206d400
    Timeout for IPC response!
    83b4  ffff8008 00000000 00000000 f7957b18 ffff8008 f7957718 ffff8008 f7957018
    83d4  ffff8008 f7957118 ffff8008 f7957618 ffff8008 f7957818 ffff8008 f7957918
    83f4  ffff8008 f7957d18 ffff8008 00000000 00000000 00000000 00000000 00000000
    
    X23: 0xffff8008f2d97f90:
    7f90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7fb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7fd0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7ff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    8010  00000100 00000000 f2d98018 ffff8008 f2d98018 ffff8008 08a067dc ffff0000
    8030  f206d800 ffff8008 091c3650 ffff0000 f7957b18 ffff8008 f7957730 ffff8008
    8050  f716a630 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    8070  f76c8010 ffff8008 f716a800 ffff8008 095cac68 ffff0000 f206d828 ffff8008
    
    X28: 0xffff8008f2349b80:
    9b80  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9ba0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9bc0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9be0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9c00  00000022 00000000 ffffffff ffffffff 00010001 00000000 00000000 00000000
    9c20  0b0a8000 ffff0000 00000002 00404040 00000000 00000000 00000000 00000000
    9c40  00000001 00000000 00000001 00000000 001ebd44 00000001 f390b800 ffff8008
    9c60  00000000 00000001 00000070 00000070 00000070 00000000 09031d48 ffff0000
    
    Call trace:
    Exception stack(0xffff000008003c90 to 0xffff000008003dd0)
    3c80:                                   000000000000004e c3f28b86000c3900
    3ca0: c3f28b86000c3900 ffffffffffffffff 0000000000000000 0000000000000000
    3cc0: ffff000009f15e78 ffff0000086ca6cc ffff000009c8e280 6e6f637369642067
    3ce0: 206e6f207463656e 7465676461472061 7369207461687420 746f6e2009090920
    3d00: 7463656e6e6f6320 ffffffffffffffff ffff00000829f4d4 0000e395735727e8
    3d20: 0000e3956f4f075a 0000000000000000 ffff8008f2d98010 ffff8008f2d98394
    3d40: 00000000000001c0 ffff8008f2d98010 ffff000009c8e280 ffff000009885018
    3d60: ffff000008004000 ffff000009885018 ffff8008f2349c00 ffff000008003dd0
    3d80: ffff0000089ff9b0 ffff000008003dd0 ffff0000089ff9b0 00000000600001c5
    3da0: ffff8008f33f2cd8 0000000000000000 0000ffffffffffff 0000000000000000
    init: Received control message 'start' for 'adbd' from pid: 3359 (/vendor/bin/hw/android.hardware.usb@1.1-service.imx)
    3dc0: ffff000008003dd0 ffff0000089ff9b0
    [<ffff0000089ff9b0>] composite_disconnect+0x80/0x88
    [<ffff000008a044d4>] android_disconnect+0x3c/0x68
    [<ffff0000089ba9f8>] cdns3_device_irq_handler+0xfc/0x2c8
    [<ffff0000089b84c0>] cdns3_irq+0x44/0x94
    [<ffff00000814494c>] __handle_irq_event_percpu+0x60/0x24c
    [<ffff000008144c0c>] handle_irq_event+0x58/0xc0
    [<ffff00000814873c>] handle_fasteoi_irq+0x98/0x180
    [<ffff000008143a10>] generic_handle_irq+0x24/0x38
    [<ffff000008144170>] __handle_domain_irq+0x60/0xac
    [<ffff0000080819c4>] gic_handle_irq+0xd4/0x17c
    
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10eb9abd21bad2a9726f50557b38924cb8d81ccd
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Sep 29 21:41:45 2019 -0500

    usb: dwc3: pci: prevent memory leak in dwc3_pci_probe
    
    [ Upstream commit 9bbfceea12a8f145097a27d7c7267af25893c060 ]
    
    In dwc3_pci_probe a call to platform_device_alloc allocates a device
    which is correctly put in case of error except one case: when the call to
    platform_device_add_properties fails it directly returns instead of
    going to error handling. This commit replaces return with the goto.
    
    Fixes: 1a7b12f69a94 ("usb: dwc3: pci: Supply device properties via driver data")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c73ccf65e1696662d3a5ea38a7647f515890c299
Author: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
Date:   Tue Oct 1 13:16:48 2019 +0530

    usb: gadget: composite: Fix possible double free memory bug
    
    [ Upstream commit 1c20c89b0421b52b2417bb0f62a611bc669eda1d ]
    
    composite_dev_cleanup call from the failure of configfs_composite_bind
    frees up the cdev->os_desc_req and cdev->req. If the previous calls of
    bind and unbind is successful these will carry stale values.
    
    Consider the below sequence of function calls:
    configfs_composite_bind()
            composite_dev_prepare()
                    - Allocate cdev->req, cdev->req->buf
            composite_os_desc_req_prepare()
                    - Allocate cdev->os_desc_req, cdev->os_desc_req->buf
    configfs_composite_unbind()
            composite_dev_cleanup()
                    - free the cdev->os_desc_req->buf and cdev->req->buf
    Next composition switch
    configfs_composite_bind()
            - If it fails goto err_comp_cleanup will call the
              composite_dev_cleanup() function
            composite_dev_cleanup()
                    - calls kfree up with the stale values of cdev->req->buf and
                      cdev->os_desc_req from the previous configfs_composite_bind
                      call. The free call on these stale values leads to double free.
    
    Hence, Fix this issue by setting request and buffer pointer to NULL after
    kfree.
    
    Signed-off-by: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26d31e1c3ab299cbccc077f6beb3535892aad345
Author: Cristian Birsan <cristian.birsan@microchip.com>
Date:   Fri Oct 4 20:10:54 2019 +0300

    usb: gadget: udc: atmel: Fix interrupt storm in FIFO mode.
    
    [ Upstream commit ba3a1a915c49cc3023e4ddfc88f21e7514e82aa4 ]
    
    Fix interrupt storm generated by endpoints when working in FIFO mode.
    The TX_COMPLETE interrupt is used only by control endpoints processing.
    Do not enable it for other types of endpoints.
    
    Fixes: 914a3f3b3754 ("USB: add atmel_usba_udc driver")
    Signed-off-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88912019b49ca22ff10f34550e162d9e791130ae
Author: Nikhil Badola <nikhil.badola@freescale.com>
Date:   Mon Oct 21 18:21:51 2019 +0800

    usb: fsl: Check memory resource before releasing it
    
    [ Upstream commit bc1e3a2dd0c9954fd956ac43ca2876bbea018c01 ]
    
    Check memory resource existence before releasing it to avoid NULL
    pointer dereference
    
    Signed-off-by: Nikhil Badola <nikhil.badola@freescale.com>
    Reviewed-by: Ran Wang <ran.wang_1@nxp.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a2675a2d97a68332fa5c33043038bfeb31455a8
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:55 2019 +0000

    macsec: fix refcnt leak in module exit routine
    
    [ Upstream commit 2bce1ebed17da54c65042ec2b962e3234bad5b47 ]
    
    When a macsec interface is created, it increases a refcnt to a lower
    device(real device). when macsec interface is deleted, the refcnt is
    decreased in macsec_free_netdev(), which is ->priv_destructor() of
    macsec interface.
    
    The problem scenario is this.
    When nested macsec interfaces are exiting, the exit routine of the
    macsec module makes refcnt leaks.
    
    Test commands:
        ip link add dummy0 type dummy
        ip link add macsec0 link dummy0 type macsec
        ip link add macsec1 link macsec0 type macsec
        modprobe -rv macsec
    
    [  208.629433] unregister_netdevice: waiting for macsec0 to become free. Usage count = 1
    
    Steps of exit routine of macsec module are below.
    1. Calls ->dellink() in __rtnl_link_unregister().
    2. Checks refcnt and wait refcnt to be 0 if refcnt is not 0 in
    netdev_run_todo().
    3. Calls ->priv_destruvtor() in netdev_run_todo().
    
    Step2 checks refcnt, but step3 decreases refcnt.
    So, step2 waits forever.
    
    This patch makes the macsec module do not hold a refcnt of the lower
    device because it already holds a refcnt of the lower device with
    netdev_upper_dev_link().
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d0ca85ad4241c83abd10a61070353f53dd8023f
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:52 2019 +0000

    bonding: fix unexpected IFF_BONDING bit unset
    
    [ Upstream commit 65de65d9033750d2cf1b336c9d6e9da3a8b5cc6e ]
    
    The IFF_BONDING means bonding master or bonding slave device.
    ->ndo_add_slave() sets IFF_BONDING flag and ->ndo_del_slave() unsets
    IFF_BONDING flag.
    
    bond0<--bond1
    
    Both bond0 and bond1 are bonding device and these should keep having
    IFF_BONDING flag until they are removed.
    But bond1 would lose IFF_BONDING at ->ndo_del_slave() because that routine
    do not check whether the slave device is the bonding type or not.
    This patch adds the interface type check routine before removing
    IFF_BONDING flag.
    
    Test commands:
        ip link add bond0 type bond
        ip link add bond1 type bond
        ip link set bond1 master bond0
        ip link set bond1 nomaster
        ip link del bond1 type bond
        ip link add bond1 type bond
    
    Splat looks like:
    [  226.665555] proc_dir_entry 'bonding/bond1' already registered
    [  226.666440] WARNING: CPU: 0 PID: 737 at fs/proc/generic.c:361 proc_register+0x2a9/0x3e0
    [  226.667571] Modules linked in: bonding af_packet sch_fq_codel ip_tables x_tables unix
    [  226.668662] CPU: 0 PID: 737 Comm: ip Not tainted 5.4.0-rc3+ #96
    [  226.669508] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  226.670652] RIP: 0010:proc_register+0x2a9/0x3e0
    [  226.671612] Code: 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 39 01 00 00 48 8b 04 24 48 89 ea 48 c7 c7 a0 0b 14 9f 48 8b b0 e
    0 00 00 00 e8 07 e7 88 ff <0f> 0b 48 c7 c7 40 2d a5 9f e8 59 d6 23 01 48 8b 4c 24 10 48 b8 00
    [  226.675007] RSP: 0018:ffff888050e17078 EFLAGS: 00010282
    [  226.675761] RAX: dffffc0000000008 RBX: ffff88805fdd0f10 RCX: ffffffff9dd344e2
    [  226.676757] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffff88806c9f6b8c
    [  226.677751] RBP: ffff8880507160f3 R08: ffffed100d940019 R09: ffffed100d940019
    [  226.678761] R10: 0000000000000001 R11: ffffed100d940018 R12: ffff888050716008
    [  226.679757] R13: ffff8880507160f2 R14: dffffc0000000000 R15: ffffed100a0e2c1e
    [  226.680758] FS:  00007fdc217cc0c0(0000) GS:ffff88806c800000(0000) knlGS:0000000000000000
    [  226.681886] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  226.682719] CR2: 00007f49313424d0 CR3: 0000000050e46001 CR4: 00000000000606f0
    [  226.683727] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  226.684725] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  226.685681] Call Trace:
    [  226.687089]  proc_create_seq_private+0xb3/0xf0
    [  226.687778]  bond_create_proc_entry+0x1b3/0x3f0 [bonding]
    [  226.691458]  bond_netdev_event+0x433/0x970 [bonding]
    [  226.692139]  ? __module_text_address+0x13/0x140
    [  226.692779]  notifier_call_chain+0x90/0x160
    [  226.693401]  register_netdevice+0x9b3/0xd80
    [  226.694010]  ? alloc_netdev_mqs+0x854/0xc10
    [  226.694629]  ? netdev_change_features+0xa0/0xa0
    [  226.695278]  ? rtnl_create_link+0x2ed/0xad0
    [  226.695849]  bond_newlink+0x2a/0x60 [bonding]
    [  226.696422]  __rtnl_newlink+0xb9f/0x11b0
    [  226.696968]  ? rtnl_link_unregister+0x220/0x220
    [ ... ]
    
    Fixes: 0b680e753724 ("[PATCH] bonding: Add priv_flag to avoid event mishandling")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50e31318b5259ac66e177d324b4410215823cfa7
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 23 09:53:03 2019 -0700

    ipvs: move old_secure_tcp into struct netns_ipvs
    
    [ Upstream commit c24b75e0f9239e78105f81c5f03a751641eb07ef ]
    
    syzbot reported the following issue :
    
    BUG: KCSAN: data-race in update_defense_level / update_defense_level
    
    read to 0xffffffff861a6260 of 4 bytes by task 3006 on cpu 1:
     update_defense_level+0x621/0xb30 net/netfilter/ipvs/ip_vs_ctl.c:177
     defense_work_handler+0x3d/0xd0 net/netfilter/ipvs/ip_vs_ctl.c:225
     process_one_work+0x3d4/0x890 kernel/workqueue.c:2269
     worker_thread+0xa0/0x800 kernel/workqueue.c:2415
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    write to 0xffffffff861a6260 of 4 bytes by task 7333 on cpu 0:
     update_defense_level+0xa62/0xb30 net/netfilter/ipvs/ip_vs_ctl.c:205
     defense_work_handler+0x3d/0xd0 net/netfilter/ipvs/ip_vs_ctl.c:225
     process_one_work+0x3d4/0x890 kernel/workqueue.c:2269
     worker_thread+0xa0/0x800 kernel/workqueue.c:2415
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 7333 Comm: kworker/0:5 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events defense_work_handler
    
    Indeed, old_secure_tcp is currently a static variable, while it
    needs to be a per netns variable.
    
    Fixes: a0840e2e165a ("IPVS: netns, ip_vs_ctl local vars moved to ipvs struct.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 102f4078fbdded8407f59d6e0b022ea89e20f33a
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Sat Oct 19 17:34:35 2019 +0200

    ipvs: don't ignore errors in case refcounting ip_vs module fails
    
    [ Upstream commit 62931f59ce9cbabb934a431f48f2f1f441c605ac ]
    
    if the IPVS module is removed while the sync daemon is starting, there is
    a small gap where try_module_get() might fail getting the refcount inside
    ip_vs_use_count_inc(). Then, the refcounts of IPVS module are unbalanced,
    and the subsequent call to stop_sync_thread() causes the following splat:
    
     WARNING: CPU: 0 PID: 4013 at kernel/module.c:1146 module_put.part.44+0x15b/0x290
      Modules linked in: ip_vs(-) nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 veth ip6table_filter ip6_tables iptable_filter binfmt_misc intel_rapl_msr intel_rapl_common crct10dif_pclmul crc32_pclmul ext4 mbcache jbd2 ghash_clmulni_intel snd_hda_codec_generic ledtrig_audio snd_hda_intel snd_intel_nhlt snd_hda_codec snd_hda_core snd_hwdep snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd glue_helper joydev pcspkr snd_timer virtio_balloon snd soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs libcrc32c ata_generic pata_acpi virtio_net net_failover virtio_blk failover virtio_console qxl drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ata_piix ttm crc32c_intel serio_raw drm virtio_pci libata virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod [last unloaded: nf_defrag_ipv6]
      CPU: 0 PID: 4013 Comm: modprobe Tainted: G        W         5.4.0-rc1.upstream+ #741
      Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
      RIP: 0010:module_put.part.44+0x15b/0x290
      Code: 04 25 28 00 00 00 0f 85 18 01 00 00 48 83 c4 68 5b 5d 41 5c 41 5d 41 5e 41 5f c3 89 44 24 28 83 e8 01 89 c5 0f 89 57 ff ff ff <0f> 0b e9 78 ff ff ff 65 8b 1d 67 83 26 4a 89 db be 08 00 00 00 48
      RSP: 0018:ffff888050607c78 EFLAGS: 00010297
      RAX: 0000000000000003 RBX: ffffffffc1420590 RCX: ffffffffb5db0ef9
      RDX: 0000000000000000 RSI: 0000000000000004 RDI: ffffffffc1420590
      RBP: 00000000ffffffff R08: fffffbfff82840b3 R09: fffffbfff82840b3
      R10: 0000000000000001 R11: fffffbfff82840b2 R12: 1ffff1100a0c0f90
      R13: ffffffffc1420200 R14: ffff88804f533300 R15: ffff88804f533ca0
      FS:  00007f8ea9720740(0000) GS:ffff888053800000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f3245abe000 CR3: 000000004c28a006 CR4: 00000000001606f0
      Call Trace:
       stop_sync_thread+0x3a3/0x7c0 [ip_vs]
       ip_vs_sync_net_cleanup+0x13/0x50 [ip_vs]
       ops_exit_list.isra.5+0x94/0x140
       unregister_pernet_operations+0x29d/0x460
       unregister_pernet_device+0x26/0x60
       ip_vs_cleanup+0x11/0x38 [ip_vs]
       __x64_sys_delete_module+0x2d5/0x400
       do_syscall_64+0xa5/0x4e0
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      RIP: 0033:0x7f8ea8bf0db7
      Code: 73 01 c3 48 8b 0d b9 80 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 b8 b0 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 89 80 2c 00 f7 d8 64 89 01 48
      RSP: 002b:00007ffcd38d2fe8 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000000002436240 RCX: 00007f8ea8bf0db7
      RDX: 0000000000000000 RSI: 0000000000000800 RDI: 00000000024362a8
      RBP: 0000000000000000 R08: 00007f8ea8eba060 R09: 00007f8ea8c658a0
      R10: 00007ffcd38d2a60 R11: 0000000000000206 R12: 0000000000000000
      R13: 0000000000000001 R14: 00000000024362a8 R15: 0000000000000000
      irq event stamp: 4538
      hardirqs last  enabled at (4537): [<ffffffffb6193dde>] quarantine_put+0x9e/0x170
      hardirqs last disabled at (4538): [<ffffffffb5a0556a>] trace_hardirqs_off_thunk+0x1a/0x20
      softirqs last  enabled at (4522): [<ffffffffb6f8ebe9>] sk_common_release+0x169/0x2d0
      softirqs last disabled at (4520): [<ffffffffb6f8eb3e>] sk_common_release+0xbe/0x2d0
    
    Check the return value of ip_vs_use_count_inc() and let its caller return
    proper error. Inside do_ip_vs_set_ctl() the module is already refcounted,
    we don't need refcount/derefcount there. Finally, in register_ip_vs_app()
    and start_sync_thread(), take the module refcount earlier and ensure it's
    released in the error path.
    
    Change since v1:
     - better return values in case of failure of ip_vs_use_count_inc(),
       thanks to Julian Anastasov
     - no need to increase/decrease the module refcount in ip_vs_set_ctl(),
       thanks to Julian Anastasov
    
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81de0b500baa16de7dbd30577445851ef93743f4
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Oct 14 11:03:15 2019 +0200

    netfilter: nf_flow_table: set timeout before insertion into hashes
    
    [ Upstream commit daf61b026f4686250e6afa619e6d7b49edc61df7 ]
    
    Other garbage collector might remove an entry not fully set up yet.
    
    [570953.958293] RIP: 0010:memcmp+0x9/0x50
    [...]
    [570953.958567]  flow_offload_hash_cmp+0x1e/0x30 [nf_flow_table]
    [570953.958585]  flow_offload_lookup+0x8c/0x110 [nf_flow_table]
    [570953.958606]  nf_flow_offload_ip_hook+0x135/0xb30 [nf_flow_table]
    [570953.958624]  nf_flow_offload_inet_hook+0x35/0x37 [nf_flow_table_inet]
    [570953.958646]  nf_hook_slow+0x3c/0xb0
    [570953.958664]  __netif_receive_skb_core+0x90f/0xb10
    [570953.958678]  ? ip_rcv_finish+0x82/0xa0
    [570953.958692]  __netif_receive_skb_one_core+0x3b/0x80
    [570953.958711]  __netif_receive_skb+0x18/0x60
    [570953.958727]  netif_receive_skb_internal+0x45/0xf0
    [570953.958741]  napi_gro_receive+0xcd/0xf0
    [570953.958764]  ixgbe_clean_rx_irq+0x432/0xe00 [ixgbe]
    [570953.958782]  ixgbe_poll+0x27b/0x700 [ixgbe]
    [570953.958796]  net_rx_action+0x284/0x3c0
    [570953.958817]  __do_softirq+0xcc/0x27c
    [570953.959464]  irq_exit+0xe8/0x100
    [570953.960097]  do_IRQ+0x59/0xe0
    [570953.960734]  common_interrupt+0xf/0xf
    
    Fixes: 43c8f131184f ("netfilter: nf_flow_table: fix missing error check for rhashtable_insert_fast")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d45fc2ed472b25649e3086713ba09227915ca8a6
Author: Himanshu Madhani <hmadhani@marvell.com>
Date:   Tue Oct 22 12:36:42 2019 -0700

    scsi: qla2xxx: Initialized mailbox to prevent driver load failure
    
    [ Upstream commit c2ff2a36eff60efb5e123c940115216d6bf65684 ]
    
    This patch fixes issue with Gen7 adapter in a blade environment where one
    of the ports will not be detected by driver. Firmware expects mailbox 11 to
    be set or cleared by driver for newer ISP.
    
    Following message is seen in the log file:
    
    [   18.810892] qla2xxx [0000:d8:00.0]-1820:1: **** Failed=102 mb[0]=4005 mb[1]=37 mb[2]=20 mb[3]=8
    [   18.819596]  cmd=2 ****
    
    [mkp: typos]
    
    Link: https://lore.kernel.org/r/20191022193643.7076-2-hmadhani@marvell.com
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6612a3dbad8dbc2d6b7d6892d24fa8b77fa8d65
Author: Daniel Wagner <dwagner@suse.de>
Date:   Tue Oct 22 09:21:12 2019 +0200

    scsi: lpfc: Honor module parameter lpfc_use_adisc
    
    [ Upstream commit 0fd103ccfe6a06e40e2d9d8c91d96332cc9e1239 ]
    
    The initial lpfc_desc_set_adisc implementation in commit
    dea3101e0a5c ("lpfc: add Emulex FC driver version 8.0.28") enabled ADISC if
    
            cfg_use_adisc && RSCN_MODE && FCP_2_DEVICE
    
    In commit 92d7f7b0cde3 ("[SCSI] lpfc: NPIV: add NPIV support on top of
    SLI-3") this changed to
    
            (cfg_use_adisc && RSC_MODE) || FCP_2_DEVICE
    
    and later in commit ffc954936b13 ("[SCSI] lpfc 8.3.13: FC Discovery Fixes
    and enhancements.") to
    
            (cfg_use_adisc && RSC_MODE) || (FCP_2_DEVICE && FCP_TARGET)
    
    A customer reports that after a devloss, an ADISC failure is logged. It
    turns out the ADISC flag is set even the user explicitly set lpfc_use_adisc
    = 0.
    
    [Sat Dec 22 22:55:58 2018] lpfc 0000:82:00.0: 2:(0):0203 Devloss timeout on WWPN 50:01:43:80:12:8e:40:20 NPort x05df00 Data: x82000000 x8 xa
    [Sat Dec 22 23:08:20 2018] lpfc 0000:82:00.0: 2:(0):2755 ADISC failure DID:05DF00 Status:x9/x70000
    
    [mkp: fixed Hannes' email]
    
    Fixes: 92d7f7b0cde3 ("[SCSI] lpfc: NPIV: add NPIV support on top of SLI-3")
    Cc: Dick Kennedy <dick.kennedy@broadcom.com>
    Cc: James Smart <james.smart@broadcom.com>
    Link: https://lore.kernel.org/r/20191022072112.132268-1-dwagner@suse.de
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Daniel Wagner <dwagner@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e80e5614770524c07b680edf70f533af308c56e
Author: Hillf Danton <hdanton@sina.com>
Date:   Mon Oct 21 12:01:57 2019 +0200

    net: openvswitch: free vport unless register_netdevice() succeeds
    
    [ Upstream commit 9464cc37f3671ee69cb1c00662b5e1f113a96b23 ]
    
    syzbot found the following crash on:
    
    HEAD commit:    1e78030e Merge tag 'mmc-v5.3-rc1' of git://git.kernel.org/..
    git tree:       upstream
    console output: https://syzkaller.appspot.com/x/log.txt?x=148d3d1a600000
    kernel config:  https://syzkaller.appspot.com/x/.config?x=30cef20daf3e9977
    dashboard link: https://syzkaller.appspot.com/bug?extid=13210896153522fe1ee5
    compiler:       gcc (GCC) 9.0.0 20181231 (experimental)
    syz repro:      https://syzkaller.appspot.com/x/repro.syz?x=136aa8c4600000
    C reproducer:   https://syzkaller.appspot.com/x/repro.c?x=109ba792600000
    
    =====================================================================
    BUG: memory leak
    unreferenced object 0xffff8881207e4100 (size 128):
       comm "syz-executor032", pid 7014, jiffies 4294944027 (age 13.830s)
       hex dump (first 32 bytes):
         00 70 16 18 81 88 ff ff 80 af 8c 22 81 88 ff ff  .p........."....
         00 b6 23 17 81 88 ff ff 00 00 00 00 00 00 00 00  ..#.............
       backtrace:
         [<000000000eb78212>] kmemleak_alloc_recursive  include/linux/kmemleak.h:43 [inline]
         [<000000000eb78212>] slab_post_alloc_hook mm/slab.h:522 [inline]
         [<000000000eb78212>] slab_alloc mm/slab.c:3319 [inline]
         [<000000000eb78212>] kmem_cache_alloc_trace+0x145/0x2c0 mm/slab.c:3548
         [<00000000006ea6c6>] kmalloc include/linux/slab.h:552 [inline]
         [<00000000006ea6c6>] kzalloc include/linux/slab.h:748 [inline]
         [<00000000006ea6c6>] ovs_vport_alloc+0x37/0xf0  net/openvswitch/vport.c:130
         [<00000000f9a04a7d>] internal_dev_create+0x24/0x1d0  net/openvswitch/vport-internal_dev.c:164
         [<0000000056ee7c13>] ovs_vport_add+0x81/0x190  net/openvswitch/vport.c:199
         [<000000005434efc7>] new_vport+0x19/0x80 net/openvswitch/datapath.c:194
         [<00000000b7b253f1>] ovs_dp_cmd_new+0x22f/0x410  net/openvswitch/datapath.c:1614
         [<00000000e0988518>] genl_family_rcv_msg+0x2ab/0x5b0  net/netlink/genetlink.c:629
         [<00000000d0cc9347>] genl_rcv_msg+0x54/0x9c net/netlink/genetlink.c:654
         [<000000006694b647>] netlink_rcv_skb+0x61/0x170  net/netlink/af_netlink.c:2477
         [<0000000088381f37>] genl_rcv+0x29/0x40 net/netlink/genetlink.c:665
         [<00000000dad42a47>] netlink_unicast_kernel  net/netlink/af_netlink.c:1302 [inline]
         [<00000000dad42a47>] netlink_unicast+0x1ec/0x2d0  net/netlink/af_netlink.c:1328
         [<0000000067e6b079>] netlink_sendmsg+0x270/0x480  net/netlink/af_netlink.c:1917
         [<00000000aab08a47>] sock_sendmsg_nosec net/socket.c:637 [inline]
         [<00000000aab08a47>] sock_sendmsg+0x54/0x70 net/socket.c:657
         [<000000004cb7c11d>] ___sys_sendmsg+0x393/0x3c0 net/socket.c:2311
         [<00000000c4901c63>] __sys_sendmsg+0x80/0xf0 net/socket.c:2356
         [<00000000c10abb2d>] __do_sys_sendmsg net/socket.c:2365 [inline]
         [<00000000c10abb2d>] __se_sys_sendmsg net/socket.c:2363 [inline]
         [<00000000c10abb2d>] __x64_sys_sendmsg+0x23/0x30 net/socket.c:2363
    
    BUG: memory leak
    unreferenced object 0xffff88811723b600 (size 64):
       comm "syz-executor032", pid 7014, jiffies 4294944027 (age 13.830s)
       hex dump (first 32 bytes):
         01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  ................
         00 00 00 00 00 00 00 00 02 00 00 00 05 35 82 c1  .............5..
       backtrace:
         [<00000000352f46d8>] kmemleak_alloc_recursive  include/linux/kmemleak.h:43 [inline]
         [<00000000352f46d8>] slab_post_alloc_hook mm/slab.h:522 [inline]
         [<00000000352f46d8>] slab_alloc mm/slab.c:3319 [inline]
         [<00000000352f46d8>] __do_kmalloc mm/slab.c:3653 [inline]
         [<00000000352f46d8>] __kmalloc+0x169/0x300 mm/slab.c:3664
         [<000000008e48f3d1>] kmalloc include/linux/slab.h:557 [inline]
         [<000000008e48f3d1>] ovs_vport_set_upcall_portids+0x54/0xd0  net/openvswitch/vport.c:343
         [<00000000541e4f4a>] ovs_vport_alloc+0x7f/0xf0  net/openvswitch/vport.c:139
         [<00000000f9a04a7d>] internal_dev_create+0x24/0x1d0  net/openvswitch/vport-internal_dev.c:164
         [<0000000056ee7c13>] ovs_vport_add+0x81/0x190  net/openvswitch/vport.c:199
         [<000000005434efc7>] new_vport+0x19/0x80 net/openvswitch/datapath.c:194
         [<00000000b7b253f1>] ovs_dp_cmd_new+0x22f/0x410  net/openvswitch/datapath.c:1614
         [<00000000e0988518>] genl_family_rcv_msg+0x2ab/0x5b0  net/netlink/genetlink.c:629
         [<00000000d0cc9347>] genl_rcv_msg+0x54/0x9c net/netlink/genetlink.c:654
         [<000000006694b647>] netlink_rcv_skb+0x61/0x170  net/netlink/af_netlink.c:2477
         [<0000000088381f37>] genl_rcv+0x29/0x40 net/netlink/genetlink.c:665
         [<00000000dad42a47>] netlink_unicast_kernel  net/netlink/af_netlink.c:1302 [inline]
         [<00000000dad42a47>] netlink_unicast+0x1ec/0x2d0  net/netlink/af_netlink.c:1328
         [<0000000067e6b079>] netlink_sendmsg+0x270/0x480  net/netlink/af_netlink.c:1917
         [<00000000aab08a47>] sock_sendmsg_nosec net/socket.c:637 [inline]
         [<00000000aab08a47>] sock_sendmsg+0x54/0x70 net/socket.c:657
         [<000000004cb7c11d>] ___sys_sendmsg+0x393/0x3c0 net/socket.c:2311
         [<00000000c4901c63>] __sys_sendmsg+0x80/0xf0 net/socket.c:2356
    
    BUG: memory leak
    unreferenced object 0xffff8881228ca500 (size 128):
       comm "syz-executor032", pid 7015, jiffies 4294944622 (age 7.880s)
       hex dump (first 32 bytes):
         00 f0 27 18 81 88 ff ff 80 ac 8c 22 81 88 ff ff  ..'........"....
         40 b7 23 17 81 88 ff ff 00 00 00 00 00 00 00 00  @.#.............
       backtrace:
         [<000000000eb78212>] kmemleak_alloc_recursive  include/linux/kmemleak.h:43 [inline]
         [<000000000eb78212>] slab_post_alloc_hook mm/slab.h:522 [inline]
         [<000000000eb78212>] slab_alloc mm/slab.c:3319 [inline]
         [<000000000eb78212>] kmem_cache_alloc_trace+0x145/0x2c0 mm/slab.c:3548
         [<00000000006ea6c6>] kmalloc include/linux/slab.h:552 [inline]
         [<00000000006ea6c6>] kzalloc include/linux/slab.h:748 [inline]
         [<00000000006ea6c6>] ovs_vport_alloc+0x37/0xf0  net/openvswitch/vport.c:130
         [<00000000f9a04a7d>] internal_dev_create+0x24/0x1d0  net/openvswitch/vport-internal_dev.c:164
         [<0000000056ee7c13>] ovs_vport_add+0x81/0x190  net/openvswitch/vport.c:199
         [<000000005434efc7>] new_vport+0x19/0x80 net/openvswitch/datapath.c:194
         [<00000000b7b253f1>] ovs_dp_cmd_new+0x22f/0x410  net/openvswitch/datapath.c:1614
         [<00000000e0988518>] genl_family_rcv_msg+0x2ab/0x5b0  net/netlink/genetlink.c:629
         [<00000000d0cc9347>] genl_rcv_msg+0x54/0x9c net/netlink/genetlink.c:654
         [<000000006694b647>] netlink_rcv_skb+0x61/0x170  net/netlink/af_netlink.c:2477
         [<0000000088381f37>] genl_rcv+0x29/0x40 net/netlink/genetlink.c:665
         [<00000000dad42a47>] netlink_unicast_kernel  net/netlink/af_netlink.c:1302 [inline]
         [<00000000dad42a47>] netlink_unicast+0x1ec/0x2d0  net/netlink/af_netlink.c:1328
         [<0000000067e6b079>] netlink_sendmsg+0x270/0x480  net/netlink/af_netlink.c:1917
         [<00000000aab08a47>] sock_sendmsg_nosec net/socket.c:637 [inline]
         [<00000000aab08a47>] sock_sendmsg+0x54/0x70 net/socket.c:657
         [<000000004cb7c11d>] ___sys_sendmsg+0x393/0x3c0 net/socket.c:2311
         [<00000000c4901c63>] __sys_sendmsg+0x80/0xf0 net/socket.c:2356
         [<00000000c10abb2d>] __do_sys_sendmsg net/socket.c:2365 [inline]
         [<00000000c10abb2d>] __se_sys_sendmsg net/socket.c:2363 [inline]
         [<00000000c10abb2d>] __x64_sys_sendmsg+0x23/0x30 net/socket.c:2363
    =====================================================================
    
    The function in net core, register_netdevice(), may fail with vport's
    destruction callback either invoked or not. After commit 309b66970ee2
    ("net: openvswitch: do not free vport if register_netdevice() is failed."),
    the duty to destroy vport is offloaded from the driver OTOH, which ends
    up in the memory leak reported.
    
    It is fixed by releasing vport unless device is registered successfully.
    To do that, the callback assignment is defered until device is registered.
    
    Reported-by: syzbot+13210896153522fe1ee5@syzkaller.appspotmail.com
    Fixes: 309b66970ee2 ("net: openvswitch: do not free vport if register_netdevice() is failed.")
    Cc: Taehee Yoo <ap420073@gmail.com>
    Cc: Greg Rose <gvrose8192@gmail.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Hillf Danton <hdanton@sina.com>
    Acked-by: Pravin B Shelar <pshelar@ovn.org>
    [sbrivio: this was sent to dev@openvswitch.org and never made its way
     to netdev -- resending original patch]
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: Greg Rose <gvrose8192@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 027253315d70bb5e69d007428563d2679e1ce014
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Oct 11 16:34:19 2019 +0300

    RDMA/uverbs: Prevent potential underflow
    
    [ Upstream commit a9018adfde809d44e71189b984fa61cc89682b5e ]
    
    The issue is in drivers/infiniband/core/uverbs_std_types_cq.c in the
    UVERBS_HANDLER(UVERBS_METHOD_CQ_CREATE) function.  We check that:
    
            if (attr.comp_vector >= attrs->ufile->device->num_comp_vectors) {
    
    But we don't check if "attr.comp_vector" is negative.  It could
    potentially lead to an array underflow.  My concern would be where
    cq->vector is used in the create_cq() function from the cxgb4 driver.
    
    And really "attr.comp_vector" is appears as a u32 to user space so that's
    the right type to use.
    
    Fixes: 9ee79fce3642 ("IB/core: Add completion queue (cq) object actions")
    Link: https://lore.kernel.org/r/20191011133419.GA22905@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d582769add688a4c0760873a3492f03ac4471539
Author: Hannes Reinecke <hare@suse.com>
Date:   Fri Oct 18 16:04:58 2019 +0200

    scsi: qla2xxx: fixup incorrect usage of host_byte
    
    [ Upstream commit 66cf50e65b183c863825f5c28a818e3f47a72e40 ]
    
    DRIVER_ERROR is a a driver byte setting, not a host byte.  The qla2xxx
    driver should rather return DID_ERROR here to be in line with the other
    drivers.
    
    Link: https://lore.kernel.org/r/20191018140458.108278-1-hare@suse.de
    Signed-off-by: Hannes Reinecke <hare@suse.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42de3a902443b64c6e3cf9c61d9cd6f30b2c0d67
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Tue Sep 24 22:20:34 2019 -0500

    net/mlx5: prevent memory leak in mlx5_fpga_conn_create_cq
    
    [ Upstream commit c8c2a057fdc7de1cd16f4baa51425b932a42eb39 ]
    
    In mlx5_fpga_conn_create_cq if mlx5_vector2eqn fails the allocated
    memory should be released.
    
    Fixes: 537a50574175 ("net/mlx5: FPGA, Add high-speed connection routines")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7dfdcd9407f30ea86acb3b43fcfd3a92ce6a41fa
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Tue Sep 24 11:29:09 2019 +0300

    net/mlx5e: TX, Fix consumer index of error cqe dump
    
    [ Upstream commit 61ea02d2c13106116c6e4916ac5d9dd41151c959 ]
    
    The completion queue consumer index increments upon a call to
    mlx5_cqwq_pop().
    When dumping an error CQE, the index is already incremented.
    Decrease one for the print command.
    
    Fixes: 16cc14d81733 ("net/mlx5e: Dump xmit error completions")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48dd71289ca3594002910c24f26cc37c46a5dd44
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Tue Oct 8 00:07:30 2019 +0300

    RDMA/qedr: Fix reported firmware version
    
    [ Upstream commit b806c94ee44e53233b8ce6c92d9078d9781786a5 ]
    
    Remove spaces from the reported firmware version string.
    Actual value:
    $ cat /sys/class/infiniband/qedr0/fw_ver
    8. 37. 7. 0
    
    Expected value:
    $ cat /sys/class/infiniband/qedr0/fw_ver
    8.37.7.0
    
    Fixes: ec72fce401c6 ("qedr: Add support for RoCE HW init")
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Acked-by: Michal Kalderon <michal.kalderon@marvell.com>
    Link: https://lore.kernel.org/r/20191007210730.7173-1-kamalheib1@gmail.com
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6208c2bfe2249df0156e6f1df5ea4e71ad496839
Author: Potnuri Bharat Teja <bharat@chelsio.com>
Date:   Thu Oct 3 16:13:53 2019 +0530

    iw_cxgb4: fix ECN check on the passive accept
    
    [ Upstream commit 612e0486ad0845c41ac10492e78144f99e326375 ]
    
    pass_accept_req() is using the same skb for handling accept request and
    sending accept reply to HW. Here req and rpl structures are pointing to
    same skb->data which is over written by INIT_TP_WR() and leads to
    accessing corrupt req fields in accept_cr() while checking for ECN flags.
    Reordered code in accept_cr() to fetch correct req fields.
    
    Fixes: 92e7ae7172 ("iw_cxgb4: Choose appropriate hw mtu index and ISS for iWARP connections")
    Signed-off-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Link: https://lore.kernel.org/r/20191003104353.11590-1-bharat@chelsio.com
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89aa9e2626f409ebef9153373cc66c07c635c59a
Author: Rafi Wiener <rafiw@mellanox.com>
Date:   Wed Oct 2 15:02:43 2019 +0300

    RDMA/mlx5: Clear old rate limit when closing QP
    
    [ Upstream commit c8973df2da677f375f8b12b6eefca2f44c8884d5 ]
    
    Before QP is closed it changes to ERROR state, when this happens
    the QP was left with old rate limit that was already removed from
    the table.
    
    Fixes: 7d29f349a4b9 ("IB/mlx5: Properly adjust rate limit on QP state transitions")
    Signed-off-by: Rafi Wiener <rafiw@mellanox.com>
    Signed-off-by: Oleg Kuporosov <olegk@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Link: https://lore.kernel.org/r/20191002120243.16971-1-leon@kernel.org
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6706b2ec108f9a026d36457b0242acd4823723b
Author: Zhang Lixu <lixu.zhang@intel.com>
Date:   Wed Oct 16 08:15:59 2019 +0800

    HID: intel-ish-hid: fix wrong error handling in ishtp_cl_alloc_tx_ring()
    
    [ Upstream commit 16ff7bf6dbcc6f77d2eec1ac9120edf44213c2f1 ]
    
    When allocating tx ring buffers failed, should free tx buffers, not rx buffers.
    
    Signed-off-by: Zhang Lixu <lixu.zhang@intel.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 113a154ef2f23980edc9605c0da294de5567eb51
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Oct 9 17:11:30 2019 +0800

    dmaengine: sprd: Fix the possible memory leak issue
    
    [ Upstream commit ec1ac309596a7bdf206743b092748205f6cd5720 ]
    
    If we terminate the channel to free all descriptors associated with this
    channel, we will leak the memory of current descriptor if the current
    descriptor is not completed, since it had been deteled from the desc_issued
    list and have not been added into the desc_completed list.
    
    Thus we should check if current descriptor is completed or not, when freeing
    the descriptors associated with one channel, if not, we should free it to
    avoid this issue.
    
    Fixes: 9b3b8171f7f4 ("dmaengine: sprd: Add Spreadtrum DMA driver")
    Reported-by: Zhenfang Wang <zhenfang.wang@unisoc.com>
    Tested-by: Zhenfang Wang <zhenfang.wang@unisoc.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Link: https://lore.kernel.org/r/170dbbc6d5366b6fa974ce2d366652e23a334251.1570609788.git.baolin.wang@linaro.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6040f96d5147046499a155f8e40eee03146eccb1
Author: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Date:   Thu Sep 26 16:20:58 2019 +0530

    dmaengine: xilinx_dma: Fix control reg update in vdma_channel_set_config
    
    [ Upstream commit 6c6de1ddb1be3840f2ed5cc9d009a622720940c9 ]
    
    In vdma_channel_set_config clear the delay, frame count and master mask
    before updating their new values. It avoids programming incorrect state
    when input parameters are different from default.
    
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Acked-by: Appana Durga Kedareswara rao <appana.durga.rao@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/1569495060-18117-3-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78e7e0248eb82bd14b8c2738fbde7646abab2d42
Author: Nicolas Boichat <drinkcat@chromium.org>
Date:   Thu Oct 3 11:17:59 2019 +0800

    HID: google: add magnemite/masterball USB ids
    
    [ Upstream commit 9e4dbc4646a84b2562ea7c64a542740687ff7daf ]
    
    Add 2 additional hammer-like devices.
    
    Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8181146cd7de890cdfdda68ddc3730250887d7fc
Author: Vidya Sagar <vidyas@nvidia.com>
Date:   Thu Jul 4 20:34:28 2019 +0530

    PCI: tegra: Enable Relaxed Ordering only for Tegra20 & Tegra30
    
    commit 7be142caabc4780b13a522c485abc806de5c4114 upstream.
    
    The PCI Tegra controller conversion to a device tree configurable
    driver in commit d1523b52bff3 ("PCI: tegra: Move PCIe driver
    to drivers/pci/host") implied that code for the driver can be
    compiled in for a kernel supporting multiple platforms.
    
    Unfortunately, a blind move of the code did not check that some of the
    quirks that were applied in arch/arm (eg enabling Relaxed Ordering on
    all PCI devices - since the quirk hook erroneously matches PCI_ANY_ID
    for both Vendor-ID and Device-ID) are now applied in all kernels that
    compile the PCI Tegra controlled driver, DT and ACPI alike.
    
    This is completely wrong, in that enablement of Relaxed Ordering is only
    required by default in Tegra20 platforms as described in the Tegra20
    Technical Reference Manual (available at
    https://developer.nvidia.com/embedded/downloads#?search=tegra%202 in
    Section 34.1, where it is mentioned that Relaxed Ordering bit needs to
    be enabled in its root ports to avoid deadlock in hardware) and in the
    Tegra30 platforms for the same reasons (unfortunately not documented
    in the TRM).
    
    There is no other strict requirement on PCI devices Relaxed Ordering
    enablement on any other Tegra platforms or PCI host bridge driver.
    
    Fix this quite upsetting situation by limiting the vendor and device IDs
    to which the Relaxed Ordering quirk applies to the root ports in
    question, reported above.
    
    Signed-off-by: Vidya Sagar <vidyas@nvidia.com>
    [lorenzo.pieralisi@arm.com: completely rewrote the commit log/fixes tag]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2dd254bde5cdac24e7774584d6f3c2c61fe09e5
Author: Suwan Kim <suwan.kim027@gmail.com>
Date:   Wed Aug 28 12:27:41 2019 +0900

    usbip: Implement SG support to vhci-hcd and stub driver
    
    commit ea44d190764b4422af4d1c29eaeb9e69e353b406 upstream.
    
    There are bugs on vhci with usb 3.0 storage device. In USB, each SG
    list entry buffer should be divisible by the bulk max packet size.
    But with native SG support, this problem doesn't matter because the
    SG buffer is treated as contiguous buffer. But without native SG
    support, USB storage driver breaks SG list into several URBs and the
    error occurs because of a buffer size of URB that cannot be divided
    by the bulk max packet size. The error situation is as follows.
    
    When USB Storage driver requests 31.5 KB data and has SG list which
    has 3584 bytes buffer followed by 7 4096 bytes buffer for some
    reason. USB Storage driver splits this SG list into several URBs
    because VHCI doesn't support SG and sends them separately. So the
    first URB buffer size is 3584 bytes. When receiving data from device,
    USB 3.0 device sends data packet of 1024 bytes size because the max
    packet size of BULK pipe is 1024 bytes. So device sends 4096 bytes.
    But the first URB buffer has only 3584 bytes buffer size. So host
    controller terminates the transfer even though there is more data to
    receive. So, vhci needs to support SG transfer to prevent this error.
    
    In this patch, vhci supports SG regardless of whether the server's
    host controller supports SG or not, because stub driver splits SG
    list into several URBs if the server's host controller doesn't
    support SG.
    
    To support SG, vhci sets URB_DMA_MAP_SG flag in urb->transfer_flags
    if URB has SG list and this flag will tell stub driver to use SG
    list. After receiving urb from stub driver, vhci clear URB_DMA_MAP_SG
    flag to avoid unnecessary DMA unmapping in HCD.
    
    vhci sends each SG list entry to stub driver. Then, stub driver sees
    the total length of the buffer and allocates SG table and pages
    according to the total buffer length calling sgl_alloc(). After stub
    driver receives completed URB, it again sends each SG list entry to
    vhci.
    
    If the server's host controller doesn't support SG, stub driver
    breaks a single SG request into several URBs and submits them to
    the server's host controller. When all the split URBs are completed,
    stub driver reassembles the URBs into a single return command and
    sends it to vhci.
    
    Moreover, in the situation where vhci supports SG, but stub driver
    does not, or vice versa, usbip works normally. Because there is no
    protocol modification, there is no problem in communication between
    server and client even if the one has a kernel without SG support.
    
    In the case of vhci supports SG and stub driver doesn't, because
    vhci sends only the total length of the buffer to stub driver as
    it did before the patch applied, stub driver only needs to allocate
    the required length of buffers using only kmalloc() regardless of
    whether vhci supports SG or not. But stub driver has to allocate
    buffer with kmalloc() as much as the total length of SG buffer which
    is quite huge when vhci sends SG request, so it has overhead in
    buffer allocation in this situation.
    
    If stub driver needs to send data buffer to vhci because of IN pipe,
    stub driver also sends only total length of buffer as metadata and
    then sends real data as vhci does. Then vhci receive data from stub
    driver and store it to the corresponding buffer of SG list entry.
    
    And for the case of stub driver supports SG and vhci doesn't, since
    the USB storage driver checks that vhci doesn't support SG and sends
    the request to stub driver by splitting the SG list into multiple
    URBs, stub driver allocates a buffer for each URB with kmalloc() as
    it did before this patch.
    
    * Test environment
    
    Test uses two difference machines and two different kernel version
    to make mismatch situation between the client and the server where
    vhci supports SG, but stub driver does not, or vice versa. All tests
    are conducted in both full SG support that both vhci and stub support
    SG and half SG support that is the mismatch situation. Test kernel
    version is 5.3-rc6 with commit "usb: add a HCD_DMA flag instead of
    guestimating DMA capabilities" to avoid unnecessary DMA mapping and
    unmapping.
    
     - Test kernel version
        - 5.3-rc6 with SG support
        - 5.1.20-200.fc29.x86_64 without SG support
    
    * SG support test
    
     - Test devices
        - Super-speed storage device - SanDisk Ultra USB 3.0
        - High-speed storage device - SMI corporation USB 2.0 flash drive
    
     - Test description
    
    Test read and write operation of mass storage device that uses the
    BULK transfer. In test, the client reads and writes files whose size
    is over 1G and it works normally.
    
    * Regression test
    
     - Test devices
        - Super-speed device - Logitech Brio webcam
        - High-speed device  - Logitech C920 HD Pro webcam
        - Full-speed device  - Logitech bluetooth mouse
                             - Britz BR-Orion speaker
        - Low-speed device   - Logitech wired mouse
    
     - Test description
    
    Moving and click test for mouse. To test the webcam, use gnome-cheese.
    To test the speaker, play music and video on the client. All works
    normally.
    
    * VUDC compatibility test
    
    VUDC also works well with this patch. Tests are done with two USB
    gadget created by CONFIGFS USB gadget. Both use the BULK pipe.
    
            1. Serial gadget
            2. Mass storage gadget
    
     - Serial gadget test
    
    Serial gadget on the host sends and receives data using cat command
    on the /dev/ttyGS<N>. The client uses minicom to communicate with
    the serial gadget.
    
     - Mass storage gadget test
    
    After connecting the gadget with vhci, use "dd" to test read and
    write operation on the client side.
    
    Read  - dd if=/dev/sd<N> iflag=direct of=/dev/null bs=1G count=1
    Write - dd if=<my file path> iflag=direct of=/dev/sd<N> bs=1G count=1
    
    Signed-off-by: Suwan Kim <suwan.kim027@gmail.com>
    Acked-by: Shuah khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20190828032741.12234-1-suwan.kim027@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f865ae473c16fb2b8b8601fa04f4f6517ad557b3
Author: Shuah Khan <shuah@kernel.org>
Date:   Thu Jan 24 14:46:42 2019 -0700

    usbip: Fix vhci_urb_enqueue() URB null transfer buffer error path
    
    commit 2c904963b1dd2acd4bc785b6c72e10a6283c2081 upstream.
    
    Fix vhci_urb_enqueue() to print debug msg and return error instead of
    failing with BUG_ON.
    
    Signed-off-by: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9c0fc4a7ccd9fc28e78685d17c1943839c5579a
Author: Qian Cai <cai@lca.pw>
Date:   Tue Aug 20 14:40:55 2019 -0400

    sched/fair: Fix -Wunused-but-set-variable warnings
    
    commit 763a9ec06c409dcde2a761aac4bb83ff3938e0b3 upstream.
    
    Commit:
    
       de53fd7aedb1 ("sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices")
    
    introduced a few compilation warnings:
    
      kernel/sched/fair.c: In function '__refill_cfs_bandwidth_runtime':
      kernel/sched/fair.c:4365:6: warning: variable 'now' set but not used [-Wunused-but-set-variable]
      kernel/sched/fair.c: In function 'start_cfs_bandwidth':
      kernel/sched/fair.c:4992:6: warning: variable 'overrun' set but not used [-Wunused-but-set-variable]
    
    Also, __refill_cfs_bandwidth_runtime() does no longer update the
    expiration time, so fix the comments accordingly.
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Reviewed-by: Dave Chiluk <chiluk+linux@indeed.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: pauld@redhat.com
    Fixes: de53fd7aedb1 ("sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices")
    Link: https://lkml.kernel.org/r/1566326455-8038-1-git-send-email-cai@lca.pw
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 502bd151448c2c76a927b26783e5538875c534ff
Author: Dave Chiluk <chiluk+linux@indeed.com>
Date:   Tue Jul 23 11:44:26 2019 -0500

    sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices
    
    commit de53fd7aedb100f03e5d2231cfce0e4993282425 upstream.
    
    It has been observed, that highly-threaded, non-cpu-bound applications
    running under cpu.cfs_quota_us constraints can hit a high percentage of
    periods throttled while simultaneously not consuming the allocated
    amount of quota. This use case is typical of user-interactive non-cpu
    bound applications, such as those running in kubernetes or mesos when
    run on multiple cpu cores.
    
    This has been root caused to cpu-local run queue being allocated per cpu
    bandwidth slices, and then not fully using that slice within the period.
    At which point the slice and quota expires. This expiration of unused
    slice results in applications not being able to utilize the quota for
    which they are allocated.
    
    The non-expiration of per-cpu slices was recently fixed by
    'commit 512ac999d275 ("sched/fair: Fix bandwidth timer clock drift
    condition")'. Prior to that it appears that this had been broken since
    at least 'commit 51f2176d74ac ("sched/fair: Fix unlocked reads of some
    cfs_b->quota/period")' which was introduced in v3.16-rc1 in 2014. That
    added the following conditional which resulted in slices never being
    expired.
    
    if (cfs_rq->runtime_expires != cfs_b->runtime_expires) {
            /* extend local deadline, drift is bounded above by 2 ticks */
            cfs_rq->runtime_expires += TICK_NSEC;
    
    Because this was broken for nearly 5 years, and has recently been fixed
    and is now being noticed by many users running kubernetes
    (https://github.com/kubernetes/kubernetes/issues/67577) it is my opinion
    that the mechanisms around expiring runtime should be removed
    altogether.
    
    This allows quota already allocated to per-cpu run-queues to live longer
    than the period boundary. This allows threads on runqueues that do not
    use much CPU to continue to use their remaining slice over a longer
    period of time than cpu.cfs_period_us. However, this helps prevent the
    above condition of hitting throttling while also not fully utilizing
    your cpu quota.
    
    This theoretically allows a machine to use slightly more than its
    allotted quota in some periods. This overflow would be bounded by the
    remaining quota left on each per-cpu runqueueu. This is typically no
    more than min_cfs_rq_runtime=1ms per cpu. For CPU bound tasks this will
    change nothing, as they should theoretically fully utilize all of their
    quota in each period. For user-interactive tasks as described above this
    provides a much better user/application experience as their cpu
    utilization will more closely match the amount they requested when they
    hit throttling. This means that cpu limits no longer strictly apply per
    period for non-cpu bound applications, but that they are still accurate
    over longer timeframes.
    
    This greatly improves performance of high-thread-count, non-cpu bound
    applications with low cfs_quota_us allocation on high-core-count
    machines. In the case of an artificial testcase (10ms/100ms of quota on
    80 CPU machine), this commit resulted in almost 30x performance
    improvement, while still maintaining correct cpu quota restrictions.
    That testcase is available at https://github.com/indeedeng/fibtest.
    
    Fixes: 512ac999d275 ("sched/fair: Fix bandwidth timer clock drift condition")
    Signed-off-by: Dave Chiluk <chiluk+linux@indeed.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Phil Auld <pauld@redhat.com>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: John Hammond <jhammond@indeed.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Kyle Anderson <kwa@yelp.com>
    Cc: Gabriel Munos <gmunoz@netflix.com>
    Cc: Peter Oskolkov <posk@posk.io>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Brendan Gregg <bgregg@netflix.com>
    Link: https://lkml.kernel.org/r/1563900266-19734-2-git-send-email-chiluk+linux@indeed.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ebee4875eab0dd55d68ee61beaed55561377e01
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Oct 22 17:45:14 2019 +0200

    ALSA: usb-audio: Fix copy&paste error in the validator
    
    commit ba8bf0967a154796be15c4983603aad0b05c3138 upstream.
    
    The recently introduced USB-audio descriptor validator had a stupid
    copy&paste error that may lead to an unexpected overlook of too short
    descriptors for processing and extension units.  It's likely the cause
    of the report triggered by syzkaller fuzzer.  Let's fix it.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Reported-by: syzbot+0620f79a1978b1133fd7@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/s5hsgnkdbsl.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0051889243d34bcf834396be3a255b529b29f1e
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Aug 26 16:45:50 2019 +0300

    ALSA: usb-audio: remove some dead code
    
    commit b39e077fcb283dd96dd251a3abeba585402c61fe upstream.
    
    We recently cleaned up the error handling in commit 52c3e317a857 ("ALSA:
    usb-audio: Unify the release of usb_mixer_elem_info objects") but
    accidentally left this stray return.
    
    Fixes: 52c3e317a857 ("ALSA: usb-audio: Unify the release of usb_mixer_elem_info objects")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f6c5200269998f0066e1bd4db931297b7b2b906
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Aug 26 13:55:21 2019 +0200

    ALSA: usb-audio: Fix possible NULL dereference at create_yamaha_midi_quirk()
    
    commit 60849562a5db4a1eee2160167e4dce4590d3eafe upstream.
    
    The previous addition of descriptor validation may lead to a NULL
    dereference at create_yamaha_midi_quirk() when either injd or outjd is
    NULL.  Add proper non-NULL checks.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a0cdf210b94f1cfbbab6687c82421784242702b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Aug 23 12:38:07 2019 +0200

    ALSA: usb-audio: Clean up check_input_term()
    
    commit e0ccdef92653f8867e2d1667facfd3c23699f540 upstream.
    
    The primary changes in this patch are cleanups of __check_input_term()
    and move to a non-nested switch-case block by evaluating the pair of
    UAC version and the unit type, as we've done for parse_audio_unit().
    Also each parser is split into the function for readability.
    
    Now, a slight behavior change by this cleanup is the handling of
    processing and extension units.  Formerly we've dealt with them
    differently between UAC1/2 and UAC3; the latter returns an error if no
    input sources are available, while the former continues to parse.
    
    In this patch, unify the behavior in all cases: when input sources are
    available, it parses recursively, then override the type and the id,
    as well as channel information if not provided yet.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9feeaa50e5b4b0b71259d918a36ecf9059e60796
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 22 09:25:27 2019 +0200

    ALSA: usb-audio: Remove superfluous bLength checks
    
    commit b8e4f1fdfa422398c2d6c47bfb7d1feb3046d70a upstream.
    
    Now that we got the more comprehensive validation code for USB-audio
    descriptors, the check of overflow in each descriptor unit parser
    became superfluous.  Drop some of the obvious cases.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0e164f66e7515d8e01ca1bf256107bd8a38d177
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 22 08:23:10 2019 +0200

    ALSA: usb-audio: Unify the release of usb_mixer_elem_info objects
    
    commit 52c3e317a857091fd746e15179a637f32be4d337 upstream.
    
    Instead of the direct kfree() calls, introduce a new local helper to
    release the usb_mixer_elem_info object.  This will be extended to do
    more than a single kfree() in the later patches.
    
    Also, use the standard goto instead of multiple calls in
    parse_audio_selector_unit() error paths.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dae4d839e54923da529eb77406acd92b3ce1037a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 15 16:30:39 2019 +0200

    ALSA: usb-audio: Simplify parse_audio_unit()
    
    commit 68e9fde245591d18200f8a9054cac22339437adb upstream.
    
    Minor code refactoring by combining the UAC version and the type in
    the switch-case flow, so that we reduce the indentation and
    redundancy.  One good bonus is that the duplicated definition of the
    same type value (e.g. UAC2_EFFECT_UNIT) can be handled more cleanly.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17821e2fb16752f5d363fb5c3f8aab4df41b9bcc
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 20 17:17:09 2019 +0200

    ALSA: usb-audio: More validations of descriptor units
    
    commit 57f8770620e9b51c61089751f0b5ad3dbe376ff2 upstream.
    
    Introduce a new helper to validate each audio descriptor unit before
    and check the unit before actually accessing it.  This should harden
    against the OOB access cases with malformed descriptors that have been
    recently frequently reported by fuzzers.
    
    The existing descriptor checks are still kept although they become
    superfluous after this patch.  They'll be cleaned up eventually
    later.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e36cf8edb5812e378b57511263d1a0a9172eeb9
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Aug 3 11:51:18 2019 -0400

    configfs: fix a deadlock in configfs_symlink()
    
    commit 351e5d869e5ac10cb40c78b5f2d7dfc816ad4587 upstream.
    
    Configfs abuses symlink(2).  Unlike the normal filesystems, it
    wants the target resolved at symlink(2) time, like link(2) would've
    done.  The problem is that ->symlink() is called with the parent
    directory locked exclusive, so resolving the target inside the
    ->symlink() is easily deadlocked.
    
    Short of really ugly games in sys_symlink() itself, all we can
    do is to unlock the parent before resolving the target and
    relock it after.  However, that invalidates the checks done
    by the caller of ->symlink(), so we have to
            * check that dentry is still where it used to be
    (it couldn't have been moved, but it could've been unhashed)
            * recheck that it's still negative (somebody else
    might've successfully created a symlink with the same name
    while we were looking the target up)
            * recheck the permissions on the parent directory.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dfc45be875a378c2a3a4d6ed8e668ec8eb75073
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Aug 31 09:43:43 2019 +0200

    configfs: provide exclusion between IO and removals
    
    commit b0841eefd9693827afb9888235e26ddd098f9cef upstream.
    
    Make sure that attribute methods are not called after the item
    has been removed from the tree.  To do so, we
            * at the point of no return in removals, grab ->frag_sem
    exclusive and mark the fragment dead.
            * call the methods of attributes with ->frag_sem taken
    shared and only after having verified that the fragment is still
    alive.
    
            The main benefit is for method instances - they are
    guaranteed that the objects they are accessing *and* all ancestors
    are still there.  Another win is that we don't need to bother
    with extra refcount on config_item when opening a file -
    the item will be alive for as long as it stays in the tree, and
    we won't touch it/attributes/any associated data after it's
    been removed from the tree.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25c118d8d158655513b25f7861e84d10820c0987
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Aug 25 19:56:13 2019 -0400

    configfs: new object reprsenting tree fragments
    
    commit 47320fbe11a6059ae502c9c16b668022fdb4cf76 upstream.
    
    Refcounted, hangs of configfs_dirent, created by operations that add
    fragments to configfs tree (mkdir and configfs_register_{subsystem,group}).
    Will be used in the next commit to provide exclusion between fragment
    removal and ->show/->store calls.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65524d647e9d7c185a33701ced4ef0dbf581ea5a
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Aug 29 23:13:30 2019 -0400

    configfs_register_group() shouldn't be (and isn't) called in rmdirable parts
    
    commit f19e4ed1e1edbfa3c9ccb9fed17759b7d6db24c6 upstream.
    
    revert cc57c07343bd "configfs: fix registered group removal"
    It was an attempt to handle something that fundamentally doesn't
    work - configfs_register_group() should never be done in a part
    of tree that can be rmdir'ed.  And in mainline it never had been,
    so let's not borrow trouble; the fix was racy anyway, it would take
    a lot more to make that work and desired semantics is not clear.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bd63490c1ddc72c96c363e1ae828ebed6aa2b86
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Aug 30 11:30:03 2019 -0400

    configfs: stash the data we need into configfs_buffer at open time
    
    commit ff4dd081977da56566a848f071aed8fa92d604a1 upstream.
    
    simplifies the ->read()/->write()/->release() instances nicely
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7be2debb769092c7c07b9a866b055d8bee5afaf
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 23 10:27:05 2019 +0200

    can: peak_usb: fix slab info leak
    
    commit f7a1337f0d29b98733c8824e165fca3371d7d4fd upstream.
    
    Fix a small slab info leak due to a failure to clear the command buffer
    at allocation.
    
    The first 16 bytes of the command buffer are always sent to the device
    in pcan_usb_send_cmd() even though only the first two may have been
    initialised in case no argument payload is provided (e.g. when waiting
    for a response).
    
    Fixes: bb4785551f64 ("can: usb: PEAK-System Technik USB adapters driver core")
    Cc: stable <stable@vger.kernel.org>     # 3.4
    Reported-by: syzbot+863724e7128e14b26732@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce9b94da0e043b7b0ec1bd3d0e451d956acff9c1
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 12:29:13 2019 +0200

    can: mcba_usb: fix use-after-free on disconnect
    
    commit 4d6636498c41891d0482a914dd570343a838ad79 upstream.
    
    The driver was accessing its driver data after having freed it.
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Cc: stable <stable@vger.kernel.org>     # 4.12
    Cc: Remigiusz Kołłątaj <remigiusz.kollataj@mobica.com>
    Reported-by: syzbot+e29b17e5042bbc56fae9@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a9e37f2029ffb888bf913722fc2086f1fdec2a7
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sat Sep 28 22:29:05 2019 +0800

    can: dev: add missing of_node_put() after calling of_get_child_by_name()
    
    commit db9ee384f6f71f7c5296ce85b7c1a2a2527e7c72 upstream.
    
    of_node_put() needs to be called when the device node which is got
    from of_get_child_by_name() finished using.
    
    Fixes: 2290aefa2e90 ("can: dev: Add support for limiting configured bitrate")
    Cc: Franklin S Cooper Jr <fcooper@ti.com>
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9289226f69822de0b716c0fbfc31db0283f14e2b
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Sep 19 21:44:38 2019 -0500

    can: gs_usb: gs_can_open(): prevent memory leak
    
    commit fb5be6a7b4863ecc44963bb80ca614584b6c7817 upstream.
    
    In gs_can_open() if usb_submit_urb() fails the allocated urb should be
    released.
    
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f5c59428843cef2a5cab4504f81ed21d1fcd9fa
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Oct 9 15:48:48 2019 +0200

    can: rx-offload: can_rx_offload_queue_sorted(): fix error handling, avoid skb mem leak
    
    commit ca913f1ac024559ebc17f0b599af262f0ad997c9 upstream.
    
    If the rx-offload skb_queue is full can_rx_offload_queue_sorted() will
    not queue the skb and return with an error.
    
    None of the callers of this function, issue a kfree_skb() to free the
    not queued skb. This results in a memory leak.
    
    This patch fixes the problem by freeing the skb in case of a full queue.
    The return value is adjusted to -ENOBUFS to better reflect the actual
    problem.
    
    The device stats handling is left to the callers, as this function might
    be used in both the rx and tx path.
    
    Fixes: 55059f2b7f86 ("can: rx-offload: introduce can_rx_offload_get_echo_skb() and can_rx_offload_queue_sorted() functions")
    Cc: linux-stable <stable@vger.kernel.org>
    Cc: Martin Hundebøll <martin@geanix.com>
    Reported-by: Martin Hundebøll <martin@geanix.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef502d5a84d6cee904d18759f6069a34f6ff8098
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Tue Oct 8 10:35:44 2019 +0200

    can: peak_usb: fix a potential out-of-sync while decoding packets
    
    commit de280f403f2996679e2607384980703710576fed upstream.
    
    When decoding a buffer received from PCAN-USB, the first timestamp read in
    a packet is a 16-bit coded time base, and the next ones are an 8-bit
    offset to this base, regardless of the type of packet read.
    
    This patch corrects a potential loss of synchronization by using a
    timestamp index read from the buffer, rather than an index of received
    data packets, to determine on the sizeof the timestamp to be read from the
    packet being decoded.
    
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Fixes: 46be265d3388 ("can: usb: PEAK-System Technik PCAN-USB specific part")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ae08111ca70d31813b26b12231793080da4b4e9
Author: Kurt Van Dijck <dev.kurt@vandijck-laurijssen.be>
Date:   Tue Oct 1 09:40:36 2019 +0200

    can: c_can: c_can_poll(): only read status register after status IRQ
    
    commit 3cb3eaac52c0f145d895f4b6c22834d5f02b8569 upstream.
    
    When the status register is read without the status IRQ pending, the
    chip may not raise the interrupt line for an upcoming status interrupt
    and the driver may miss a status interrupt.
    
    It is critical that the BUSOFF status interrupt is forwarded to the
    higher layers, since no more interrupts will follow without
    intervention.
    
    Thanks to Wolfgang and Joe for bringing up the first idea.
    
    Signed-off-by: Kurt Van Dijck <dev.kurt@vandijck-laurijssen.be>
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Cc: Joe Burmeister <joe.burmeister@devtank.co.uk>
    Fixes: fa39b54ccf28 ("can: c_can: Get rid of pointless interrupts")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0327c7818da27b018464c0b9f541c5d276c57172
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Thu Aug 15 08:00:26 2019 +0000

    can: flexcan: disable completely the ECC mechanism
    
    commit 5e269324db5adb2f5f6ec9a93a9c7b0672932b47 upstream.
    
    The ECC (memory error detection and correction) mechanism can be
    activated or not, controlled by the ECCDIS bit in CAN_MECR. When
    disabled, updates on indications and reporting registers are stopped.
    So if want to disable ECC completely, had better assert ECCDIS bit, not
    just mask the related interrupts.
    
    Fixes: cdce844865be ("can: flexcan: add vf610 support for FlexCAN")
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46265660e5baea9d2120c55a887f89835c43b717
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 12:29:14 2019 +0200

    can: usb_8dev: fix use-after-free on disconnect
    
    commit 3759739426186a924675651b388d1c3963c5710e upstream.
    
    The driver was accessing its driver data after having freed it.
    
    Fixes: 0024d8ad1639 ("can: usb_8dev: Add support for USB2CAN interface from 8 devices")
    Cc: stable <stable@vger.kernel.org>     # 3.9
    Cc: Bernd Krumboeck <b.krumboeck@gmail.com>
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8a76e300e37fea82662b9aadbb1f01514e78feb
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Wed Nov 6 13:58:15 2019 -0800

    SMB3: Fix persistent handles reconnect
    
    commit d243af7ab9feb49f11f2c0050d2077e2d9556f9b upstream.
    
    When the client hits a network reconnect, it re-opens every open
    file with a create context to reconnect a persistent handle. All
    create context types should be 8-bytes aligned but the padding
    was missed for that one. As a result, some servers don't allow
    us to reconnect handles and return an error. The problem occurs
    when the problematic context is not at the end of the create
    request packet. Fix this by adding a proper padding at the end
    of the reconnect persistent handle context.
    
    Cc: Stable <stable@vger.kernel.org> # 4.19.x
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caddaf43b02403d42a2f6c5c05f7ca12da79cff4
Author: Jan Beulich <jbeulich@suse.com>
Date:   Tue Oct 29 10:34:19 2019 +0100

    x86/apic/32: Avoid bogus LDR warnings
    
    commit fe6f85ca121e9c74e7490fe66b0c5aae38e332c3 upstream.
    
    The removal of the LDR initialization in the bigsmp_32 APIC code unearthed
    a problem in setup_local_APIC().
    
    The code checks unconditionally for a mismatch of the logical APIC id by
    comparing the early APIC id which was initialized in get_smp_config() with
    the actual LDR value in the APIC.
    
    Due to the removal of the bogus LDR initialization the check now can
    trigger on bigsmp_32 APIC systems emitting a warning for every booting
    CPU. This is of course a false positive because the APIC is not using
    logical destination mode.
    
    Restrict the check and the possibly resulting fixup to systems which are
    actually using the APIC in logical destination mode.
    
    [ tglx: Massaged changelog and added Cc stable ]
    
    Fixes: bae3a8d3308 ("x86/apic: Do not initialize LDR and DFR for bigsmp")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/666d8f91-b5a8-1afd-7add-821e72a35f03@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc1a91dc4917c81a5a090a61fae0f4db57dda7bc
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Oct 28 09:06:51 2019 +0200

    intel_th: pci: Add Jasper Lake PCH support
    
    commit 9d55499d8da49e9261e95a490f3fda41d955f505 upstream.
    
    This adds support for Intel TH on Jasper Lake PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191028070651.9770-8-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9d3aea1dca2ef51bce371cd684d412d67775778
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Oct 28 09:06:50 2019 +0200

    intel_th: pci: Add Comet Lake PCH support
    
    commit 3adbb5718dd5264666ddbc2b9b43799d292e9cb6 upstream.
    
    This adds support for Intel TH on Comet Lake PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191028070651.9770-7-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64997ee49c8cd3b374e62e2ecaebdfc213510215
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Aug 24 17:49:55 2019 +0300

    netfilter: ipset: Fix an error code in ip_set_sockfn_get()
    
    commit 30b7244d79651460ff114ba8f7987ed94c86b99a upstream.
    
    The copy_to_user() function returns the number of bytes remaining to be
    copied.  In this code, that positive return is checked at the end of the
    function and we return zero/success.  What we should do instead is
    return -EFAULT.
    
    Fixes: a7b4f989a629 ("netfilter: ipset: IP set core support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b0e60f6a48bc07ef694347ed15b163bf9c76ff8
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Oct 31 11:06:24 2019 +0100

    netfilter: nf_tables: Align nft_expr private data to 64-bit
    
    commit 250367c59e6ba0d79d702a059712d66edacd4a1a upstream.
    
    Invoking the following commands on a 32-bit architecture with strict
    alignment requirements (such as an ARMv7-based Raspberry Pi) results
    in an alignment exception:
    
     # nft add table ip test-ip4
     # nft add chain ip test-ip4 output { type filter hook output priority 0; }
     # nft add rule  ip test-ip4 output quota 1025 bytes
    
    Alignment trap: not handling instruction e1b26f9f at [<7f4473f8>]
    Unhandled fault: alignment exception (0x001) at 0xb832e824
    Internal error: : 1 [#1] PREEMPT SMP ARM
    Hardware name: BCM2835
    [<7f4473fc>] (nft_quota_do_init [nft_quota])
    [<7f447448>] (nft_quota_init [nft_quota])
    [<7f4260d0>] (nf_tables_newrule [nf_tables])
    [<7f4168dc>] (nfnetlink_rcv_batch [nfnetlink])
    [<7f416bd0>] (nfnetlink_rcv [nfnetlink])
    [<8078b334>] (netlink_unicast)
    [<8078b664>] (netlink_sendmsg)
    [<8071b47c>] (sock_sendmsg)
    [<8071bd18>] (___sys_sendmsg)
    [<8071ce3c>] (__sys_sendmsg)
    [<8071ce94>] (sys_sendmsg)
    
    The reason is that nft_quota_do_init() calls atomic64_set() on an
    atomic64_t which is only aligned to 32-bit, not 64-bit, because it
    succeeds struct nft_expr in memory which only contains a 32-bit pointer.
    Fix by aligning the nft_expr private data to 64-bit.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.13+
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2dae80b5b666550f8f544bdf638c11fa86edafd0
Author: Ondrej Jirman <megous@megous.com>
Date:   Mon Oct 28 22:49:14 2019 +0100

    ARM: sunxi: Fix CPU powerdown on A83T
    
    commit e690053e97e7a9c968df9a97cef9089dfa8e6a44 upstream.
    
    PRCM_PWROFF_GATING_REG has CPU0 at bit 4 on A83T. So without this
    patch, instead of gating the CPU0, the whole cluster was power gated,
    when shutting down first CPU in the cluster.
    
    Fixes: 6961275e72a8c1 ("ARM: sun8i: smp: Add support for A83T")
    Signed-off-by: Ondrej Jirman <megous@megous.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Maxime Ripard <mripard@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20b9e094dcd342bbd029cc6129abd559e406b9f0
Author: Andreas Klinger <ak@it-klinger.de>
Date:   Sun Oct 6 16:29:56 2019 +0200

    iio: srf04: fix wrong limitation in distance measuring
    
    commit 431f7667bd6889a274913162dfd19cce9d84848e upstream.
    
    The measured time value in the driver is limited to the maximum distance
    which can be read by the sensor. This limitation was wrong and is fixed
    by this patch.
    
    It also takes into account that we are supporting a variety of sensors
    today and that the recently added sensors have a higher maximum
    distance range.
    
    Changes in v2:
    - Added a Tested-by
    
    Suggested-by: Zbyněk Kocur <zbynek.kocur@fel.cvut.cz>
    Tested-by: Zbyněk Kocur <zbynek.kocur@fel.cvut.cz>
    Signed-off-by: Andreas Klinger <ak@it-klinger.de>
    Cc:<Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bee45b44b13e97ee4a646d48004fb6db18f90a16
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Tue Oct 8 17:15:37 2019 +0300

    iio: imu: adis16480: make sure provided frequency is positive
    
    commit 24e1eb5c0d78cfb9750b690bbe997d4d59170258 upstream.
    
    It could happen that either `val` or `val2` [provided from userspace] is
    negative. In that case the computed frequency could get a weird value.
    
    Fix this by checking that neither of the 2 variables is negative, and check
    that the computed result is not-zero.
    
    Fixes: e4f959390178 ("iio: imu: adis16480 switch sampling frequency attr to core support")
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a428996147e2bc4d011cc69f12627cc14e23da72
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Fri Oct 25 17:04:20 2019 +0200

    iio: adc: stm32-adc: fix stopping dma
    
    commit e6afcf6c598d6f3a0c9c408bfeddb3f5730608b0 upstream.
    
    There maybe a race when using dmaengine_terminate_all(). The predisable
    routine may call iio_triggered_buffer_predisable() prior to a pending DMA
    callback.
    Adopt dmaengine_terminate_sync() to ensure there's no pending DMA request
    before calling iio_triggered_buffer_predisable().
    
    Fixes: 2763ea0585c9 ("iio: adc: stm32: add optional dma support")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78a1d6cdd3021715d431df617304c290036faae4
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Oct 29 13:53:29 2019 +0000

    ceph: add missing check in d_revalidate snapdir handling
    
    commit 1f08529c84cfecaf1261ed9b7e17fab18541c58f upstream.
    
    We should not play with dcache without parent locked...
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f9657793a6eea9d9e1f27b26deda0f77ecc4684
Author: Luis Henriques <lhenriques@suse.com>
Date:   Fri Oct 25 14:05:24 2019 +0100

    ceph: fix use-after-free in __ceph_remove_cap()
    
    commit ea60ed6fcf29eebc78f2ce91491e6309ee005a01 upstream.
    
    KASAN reports a use-after-free when running xfstest generic/531, with the
    following trace:
    
    [  293.903362]  kasan_report+0xe/0x20
    [  293.903365]  rb_erase+0x1f/0x790
    [  293.903370]  __ceph_remove_cap+0x201/0x370
    [  293.903375]  __ceph_remove_caps+0x4b/0x70
    [  293.903380]  ceph_evict_inode+0x4e/0x360
    [  293.903386]  evict+0x169/0x290
    [  293.903390]  __dentry_kill+0x16f/0x250
    [  293.903394]  dput+0x1c6/0x440
    [  293.903398]  __fput+0x184/0x330
    [  293.903404]  task_work_run+0xb9/0xe0
    [  293.903410]  exit_to_usermode_loop+0xd3/0xe0
    [  293.903413]  do_syscall_64+0x1a0/0x1c0
    [  293.903417]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This happens because __ceph_remove_cap() may queue a cap release
    (__ceph_queue_cap_release) which can be scheduled before that cap is
    removed from the inode list with
    
            rb_erase(&cap->ci_node, &ci->i_caps);
    
    And, when this finally happens, the use-after-free will occur.
    
    This can be fixed by removing the cap from the inode list before being
    removed from the session list, and thus eliminating the risk of an UAF.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3840610d60b2e80bf49dba78d5dd9711cfd2207b
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Nov 6 15:41:05 2019 +0000

    arm64: Do not mask out PTE_RDONLY in pte_same()
    
    commit 6767df245f4736d0cf0c6fb7cf9cf94b27414245 upstream.
    
    Following commit 73e86cb03cf2 ("arm64: Move PTE_RDONLY bit handling out
    of set_pte_at()"), the PTE_RDONLY bit is no longer managed by
    set_pte_at() but built into the PAGE_* attribute definitions.
    Consequently, pte_same() must include this bit when checking two PTEs
    for equality.
    
    Remove the arm64-specific pte_same() function, practically reverting
    commit 747a70e60b72 ("arm64: Fix copy-on-write referencing in HugeTLB")
    
    Fixes: 73e86cb03cf2 ("arm64: Move PTE_RDONLY bit handling out of set_pte_at()")
    Cc: <stable@vger.kernel.org> # 4.14.x-
    Cc: Will Deacon <will@kernel.org>
    Cc: Steve Capper <steve.capper@arm.com>
    Reported-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56f270a1d72c6afcdfd92385682d96965305bc0f
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Aug 30 02:11:35 2019 +0800

    soundwire: bus: set initial value to port_status
    
    commit f1fac63af678b2fc1044ca71fedf1f2ae8bf7c3b upstream.
    
    port_status[port_num] are assigned for each port_num in some if
    conditions. So some of the port_status may not be initialized.
    
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20190829181135.16049-1-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a06efc745c37e62888142671e23624f136c3117
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Oct 3 12:13:54 2019 +0200

    soundwire: depend on ACPI
    
    commit 52eb063d153ac310058fbaa91577a72c0e7a7169 upstream.
    
    The device cannot be probed on !ACPI and gives this warning:
    
    drivers/soundwire/slave.c:16:12: warning: ‘sdw_slave_add’ defined but
    not used [-Wunused-function]
     static int sdw_slave_add(struct sdw_bus *bus,
                ^~~~~~~~~~~~~
    
    Cc: stable@vger.kernel.org
    Fixes: 7c3cd189b86d ("soundwire: Add Master registration")
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Link: https://lore.kernel.org/r/bd685232ea511251eeb9554172f1524eabf9a46e.1570097621.git.msuchanek@suse.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a81a4637456b75e6e2b2a81911c4ea960c7f8cae
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Nov 6 11:59:46 2019 -0800

    HID: wacom: generic: Treat serial number and related fields as unsigned
    
    commit ff479731c3859609530416a18ddb3db5db019b66 upstream.
    
    The HID descriptors for most Wacom devices oddly declare the serial
    number and other related fields as signed integers. When these numbers
    are ingested by the HID subsystem, they are automatically sign-extended
    into 32-bit integers. We treat the fields as unsigned elsewhere in the
    kernel and userspace, however, so this sign-extension causes problems.
    In particular, the sign-extended tool ID sent to userspace as ABS_MISC
    does not properly match unsigned IDs used by xf86-input-wacom and libwacom.
    
    We introduce a function 'wacom_s32tou' that can undo the automatic sign
    extension performed by 'hid_snto32'. We call this function when processing
    the serial number and related fields to ensure that we are dealing with
    and reporting the unsigned form. We opt to use this method rather than
    adding a descriptor fixup in 'wacom_hid_usage_quirk' since it should be
    more robust in the face of future devices.
    
    Ref: https://github.com/linuxwacom/input-wacom/issues/134
    Fixes: f85c9dc678 ("HID: wacom: generic: Support tool ID and additional tool types")
    CC: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3fdd0c1a3d0d15d3367216e60304ca28475f66b
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Oct 30 10:21:28 2019 -0400

    drm/radeon: fix si_enable_smc_cac() failed issue
    
    commit 2c409ba81be25516afe05ae27a4a15da01740b01 upstream.
    
    Need to set the dte flag on this asic.
    
    Port the fix from amdgpu:
    5cb818b861be114 ("drm/amd/amdgpu: fix si_enable_smc_cac() failed issue")
    
    Reviewed-by: Yong Zhao <yong.zhao@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f39fbd05f921636c84b997e34b0c644759ee68c6
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Nov 5 00:27:11 2019 +0100

    perf tools: Fix time sorting
    
    commit 722ddfde366fd46205456a9c5ff9b3359dc9a75e upstream.
    
    The final sort might get confused when the comparison is done over
    bigger numbers than int like for -s time.
    
    Check the following report for longer workloads:
    
      $ perf report -s time -F time,overhead --stdio
    
    Fix hist_entry__sort() to properly return int64_t and not possible cut
    int.
    
    Fixes: 043ca389a318 ("perf tools: Use hpp formats to sort final output")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org # v3.16+
    Link: http://lore.kernel.org/lkml/20191104232711.16055-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66d53cd683a82eabecdc1367bfa9a0abce5d1e13
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Sep 26 19:16:41 2019 -0600

    tools: gpio: Use !building_out_of_srctree to determine srctree
    
    commit 4a6a6f5c4aeedb72db871d60bfcca89835f317aa upstream.
    
    make TARGETS=gpio kselftest fails with:
    
    Makefile:23: tools/build/Makefile.include: No such file or directory
    
    When the gpio tool make is invoked from tools Makefile, srctree is
    cleared and the current logic check for srctree equals to empty
    string to determine srctree location from CURDIR.
    
    When the build in invoked from selftests/gpio Makefile, the srctree
    is set to "." and the same logic used for srctree equals to empty is
    needed to determine srctree.
    
    Check building_out_of_srctree undefined as the condition for both
    cases to fix "make TARGETS=gpio kselftest" build failure.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e358a02761106abcfaac5eb8c59e44ba923e8ca
Author: Kevin Hao <haokexin@gmail.com>
Date:   Tue Nov 5 21:16:57 2019 -0800

    dump_stack: avoid the livelock of the dump_lock
    
    commit 5cbf2fff3bba8d3c6a4d47c1754de1cf57e2b01f upstream.
    
    In the current code, we use the atomic_cmpxchg() to serialize the output
    of the dump_stack(), but this implementation suffers the thundering herd
    problem.  We have observed such kind of livelock on a Marvell cn96xx
    board(24 cpus) when heavily using the dump_stack() in a kprobe handler.
    Actually we can let the competitors to wait for the releasing of the
    lock before jumping to atomic_cmpxchg().  This will definitely mitigate
    the thundering herd problem.  Thanks Linus for the suggestion.
    
    [akpm@linux-foundation.org: fix comment]
    Link: http://lkml.kernel.org/r/20191030031637.6025-1-haokexin@gmail.com
    Fixes: b58d977432c8 ("dump_stack: serialize the output from dump_stack()")
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c944fc51f0a798071967288144c9f9859864259
Author: Michal Hocko <mhocko@suse.com>
Date:   Tue Nov 5 21:16:40 2019 -0800

    mm, vmstat: hide /proc/pagetypeinfo from normal users
    
    commit abaed0112c1db08be15a784a2c5c8a8b3063cdd3 upstream.
    
    /proc/pagetypeinfo is a debugging tool to examine internal page
    allocator state wrt to fragmentation.  It is not very useful for any
    other use so normal users really do not need to read this file.
    
    Waiman Long has noticed that reading this file can have negative side
    effects because zone->lock is necessary for gathering data and that a)
    interferes with the page allocator and its users and b) can lead to hard
    lockups on large machines which have very long free_list.
    
    Reduce both issues by simply not exporting the file to regular users.
    
    Link: http://lkml.kernel.org/r/20191025072610.18526-2-mhocko@kernel.org
    Fixes: 467c996c1e19 ("Print out statistics in relation to fragmentation avoidance to /proc/pagetypeinfo")
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Waiman Long <longman@redhat.com>
    Acked-by: Mel Gorman <mgorman@suse.de>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Waiman Long <longman@redhat.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Cc: Jann Horn <jannh@google.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2686f71fdcc5533bb5cecda8caeff5fedb6f1da1
Author: Yang Shi <yang.shi@linux.alibaba.com>
Date:   Tue Nov 5 21:16:30 2019 -0800

    mm: thp: handle page cache THP correctly in PageTransCompoundMap
    
    commit 169226f7e0d275c1879551f37484ef6683579a5c upstream.
    
    We have a usecase to use tmpfs as QEMU memory backend and we would like
    to take the advantage of THP as well.  But, our test shows the EPT is
    not PMD mapped even though the underlying THP are PMD mapped on host.
    The number showed by /sys/kernel/debug/kvm/largepage is much less than
    the number of PMD mapped shmem pages as the below:
    
      7f2778200000-7f2878200000 rw-s 00000000 00:14 262232 /dev/shm/qemu_back_mem.mem.Hz2hSf (deleted)
      Size:            4194304 kB
      [snip]
      AnonHugePages:         0 kB
      ShmemPmdMapped:   579584 kB
      [snip]
      Locked:                0 kB
    
      cat /sys/kernel/debug/kvm/largepages
      12
    
    And some benchmarks do worse than with anonymous THPs.
    
    By digging into the code we figured out that commit 127393fbe597 ("mm:
    thp: kvm: fix memory corruption in KVM with THP enabled") checks if
    there is a single PTE mapping on the page for anonymous THP when setting
    up EPT map.  But the _mapcount < 0 check doesn't work for page cache THP
    since every subpage of page cache THP would get _mapcount inc'ed once it
    is PMD mapped, so PageTransCompoundMap() always returns false for page
    cache THP.  This would prevent KVM from setting up PMD mapped EPT entry.
    
    So we need handle page cache THP correctly.  However, when page cache
    THP's PMD gets split, kernel just remove the map instead of setting up
    PTE map like what anonymous THP does.  Before KVM calls get_user_pages()
    the subpages may get PTE mapped even though it is still a THP since the
    page cache THP may be mapped by other processes at the mean time.
    
    Checking its _mapcount and whether the THP has PTE mapped or not.
    Although this may report some false negative cases (PTE mapped by other
    processes), it looks not trivial to make this accurate.
    
    With this fix /sys/kernel/debug/kvm/largepage would show reasonable
    pages are PMD mapped by EPT as the below:
    
      7fbeaee00000-7fbfaee00000 rw-s 00000000 00:14 275464 /dev/shm/qemu_back_mem.mem.SKUvat (deleted)
      Size:            4194304 kB
      [snip]
      AnonHugePages:         0 kB
      ShmemPmdMapped:   557056 kB
      [snip]
      Locked:                0 kB
    
      cat /sys/kernel/debug/kvm/largepages
      271
    
    And the benchmarks are as same as anonymous THPs.
    
    [yang.shi@linux.alibaba.com: v4]
      Link: http://lkml.kernel.org/r/1571865575-42913-1-git-send-email-yang.shi@linux.alibaba.com
    Link: http://lkml.kernel.org/r/1571769577-89735-1-git-send-email-yang.shi@linux.alibaba.com
    Fixes: dd78fedde4b9 ("rmap: support file thp")
    Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
    Reported-by: Gang Deng <gavin.dg@linux.alibaba.com>
    Tested-by: Gang Deng <gavin.dg@linux.alibaba.com>
    Suggested-by: Hugh Dickins <hughd@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dfa51beacac6616dc460746238ecc5fe658b676
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Tue Nov 5 21:16:27 2019 -0800

    mm, meminit: recalculate pcpu batch and high limits after init completes
    
    commit 3e8fc0075e24338b1117cdff6a79477427b8dbed upstream.
    
    Deferred memory initialisation updates zone->managed_pages during the
    initialisation phase but before that finishes, the per-cpu page
    allocator (pcpu) calculates the number of pages allocated/freed in
    batches as well as the maximum number of pages allowed on a per-cpu
    list.  As zone->managed_pages is not up to date yet, the pcpu
    initialisation calculates inappropriately low batch and high values.
    
    This increases zone lock contention quite severely in some cases with
    the degree of severity depending on how many CPUs share a local zone and
    the size of the zone.  A private report indicated that kernel build
    times were excessive with extremely high system CPU usage.  A perf
    profile indicated that a large chunk of time was lost on zone->lock
    contention.
    
    This patch recalculates the pcpu batch and high values after deferred
    initialisation completes for every populated zone in the system.  It was
    tested on a 2-socket AMD EPYC 2 machine using a kernel compilation
    workload -- allmodconfig and all available CPUs.
    
    mmtests configuration: config-workload-kernbench-max Configuration was
    modified to build on a fresh XFS partition.
    
    kernbench
                                    5.4.0-rc3              5.4.0-rc3
                                      vanilla           resetpcpu-v2
    Amean     user-256    13249.50 (   0.00%)    16401.31 * -23.79%*
    Amean     syst-256    14760.30 (   0.00%)     4448.39 *  69.86%*
    Amean     elsp-256      162.42 (   0.00%)      119.13 *  26.65%*
    Stddev    user-256       42.97 (   0.00%)       19.15 (  55.43%)
    Stddev    syst-256      336.87 (   0.00%)        6.71 (  98.01%)
    Stddev    elsp-256        2.46 (   0.00%)        0.39 (  84.03%)
    
                       5.4.0-rc3    5.4.0-rc3
                         vanilla resetpcpu-v2
    Duration User       39766.24     49221.79
    Duration System     44298.10     13361.67
    Duration Elapsed      519.11       388.87
    
    The patch reduces system CPU usage by 69.86% and total build time by
    26.65%.  The variance of system CPU usage is also much reduced.
    
    Before, this was the breakdown of batch and high values over all zones
    was:
    
        256               batch: 1
        256               batch: 63
        512               batch: 7
        256               high:  0
        256               high:  378
        512               high:  42
    
    512 pcpu pagesets had a batch limit of 7 and a high limit of 42.  After
    the patch:
    
        256               batch: 1
        768               batch: 63
        256               high:  0
        768               high:  378
    
    [mgorman@techsingularity.net: fix merge/linkage snafu]
      Link: http://lkml.kernel.org/r/20191023084705.GD3016@techsingularity.netLink: http://lkml.kernel.org/r/20191021094808.28824-2-mgorman@techsingularity.net
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Qian Cai <cai@lca.pw>
    Cc: <stable@vger.kernel.org>    [4.1+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e6bf4bc3a88e4b84e5c4ec50143a71a61503336
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Nov 5 21:17:13 2019 -0800

    mm: memcontrol: fix network errors from failing __GFP_ATOMIC charges
    
    commit 869712fd3de5a90b7ba23ae1272278cddc66b37b upstream.
    
    While upgrading from 4.16 to 5.2, we noticed these allocation errors in
    the log of the new kernel:
    
      SLUB: Unable to allocate memory on node -1, gfp=0xa20(GFP_ATOMIC)
        cache: tw_sock_TCPv6(960:helper-logs), object size: 232, buffer size: 240, default order: 1, min order: 0
        node 0: slabs: 5, objs: 170, free: 0
    
            slab_out_of_memory+1
            ___slab_alloc+969
            __slab_alloc+14
            kmem_cache_alloc+346
            inet_twsk_alloc+60
            tcp_time_wait+46
            tcp_fin+206
            tcp_data_queue+2034
            tcp_rcv_state_process+784
            tcp_v6_do_rcv+405
            __release_sock+118
            tcp_close+385
            inet_release+46
            __sock_release+55
            sock_close+17
            __fput+170
            task_work_run+127
            exit_to_usermode_loop+191
            do_syscall_64+212
            entry_SYSCALL_64_after_hwframe+68
    
    accompanied by an increase in machines going completely radio silent
    under memory pressure.
    
    One thing that changed since 4.16 is e699e2c6a654 ("net, mm: account
    sock objects to kmemcg"), which made these slab caches subject to cgroup
    memory accounting and control.
    
    The problem with that is that cgroups, unlike the page allocator, do not
    maintain dedicated atomic reserves.  As a cgroup's usage hovers at its
    limit, atomic allocations - such as done during network rx - can fail
    consistently for extended periods of time.  The kernel is not able to
    operate under these conditions.
    
    We don't want to revert the culprit patch, because it indeed tracks a
    potentially substantial amount of memory used by a cgroup.
    
    We also don't want to implement dedicated atomic reserves for cgroups.
    There is no point in keeping a fixed margin of unused bytes in the
    cgroup's memory budget to accomodate a consumer that is impossible to
    predict - we'd be wasting memory and get into configuration headaches,
    not unlike what we have going with min_free_kbytes.  We do this for
    physical mem because we have to, but cgroups are an accounting game.
    
    Instead, account these privileged allocations to the cgroup, but let
    them bypass the configured limit if they have to.  This way, we get the
    benefits of accounting the consumed memory and have it exert pressure on
    the rest of the cgroup, but like with the page allocator, we shift the
    burden of reclaimining on behalf of atomic allocations onto the regular
    allocations that can block.
    
    Link: http://lkml.kernel.org/r/20191022233708.365764-1-hannes@cmpxchg.org
    Fixes: e699e2c6a654 ("net, mm: account sock objects to kmemcg")
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Suleiman Souhlal <suleiman@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.18+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ecc16351a841de64541165481ad61fd6a3d1aee
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 5 14:43:16 2019 +0100

    ALSA: hda/ca0132 - Fix possible workqueue stall
    
    commit 15c2b3cc09a31620914955cb2a89c277c18ee999 upstream.
    
    The unsolicited event handler for the headphone jack on CA0132 codec
    driver tries to reschedule the another delayed work with
    cancel_delayed_work_sync().  It's no good idea, unfortunately,
    especially after we changed the work queue to the standard global
    one; this may lead to a stall because both works are using the same
    global queue.
    
    Fix it by dropping the _sync but does call cancel_delayed_work()
    instead.
    
    Fixes: 993884f6a26c ("ALSA: hda/ca0132 - Delay HP amp turnon.")
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1155836
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191105134316.19294-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6921b160991223665642594d9ce64652e8c06a9a
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Nov 3 00:09:20 2019 +0900

    ALSA: bebob: fix to detect configured source of sampling clock for Focusrite Saffire Pro i/o series
    
    commit 706ad6746a66546daf96d4e4a95e46faf6cf689a upstream.
    
    For Focusrite Saffire Pro i/o, the lowest 8 bits of register represents
    configured source of sampling clock. The next lowest 8 bits represents
    whether the configured source is actually detected or not just after
    the register is changed for the source.
    
    Current implementation evaluates whole the register to detect configured
    source. This results in failure due to the next lowest 8 bits when the
    source is connected in advance.
    
    This commit fixes the bug.
    
    Fixes: 25784ec2d034 ("ALSA: bebob: Add support for Focusrite Saffire/SaffirePro series")
    Cc: <stable@vger.kernel.org> # v3.16+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191102150920.20367-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b85472244b7051538047ddd32ae0a897928df35b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Nov 6 17:55:47 2019 +0100

    ALSA: timer: Fix incorrectly assigned timer instance
    
    commit e7af6307a8a54f0b873960b32b6a644f2d0fbd97 upstream.
    
    The clean up commit 41672c0c24a6 ("ALSA: timer: Simplify error path in
    snd_timer_open()") unified the error handling code paths with the
    standard goto, but it introduced a subtle bug: the timer instance is
    stored in snd_timer_open() incorrectly even if it returns an error.
    This may eventually lead to UAF, as spotted by fuzzer.
    
    The culprit is the snd_timer_open() code checks the
    SNDRV_TIMER_IFLG_EXCLUSIVE flag with the common variable timeri.
    This variable is supposed to be the newly created instance, but we
    (ab-)used it for a temporary check before the actual creation of a
    timer instance.  After that point, there is another check for the max
    number of instances, and it bails out if over the threshold.  Before
    the refactoring above, it worked fine because the code returned
    directly from that point.  After the refactoring, however, it jumps to
    the unified error path that stores the timeri variable in return --
    even if it returns an error.  Unfortunately this stored value is kept
    in the caller side (snd_timer_user_tselect()) in tu->timeri.  This
    causes inconsistency later, as if the timer was successfully
    assigned.
    
    In this patch, we fix it by not re-using timeri variable but a
    temporary variable for testing the exclusive connection, so timeri
    remains NULL at that point.
    
    Fixes: 41672c0c24a6 ("ALSA: timer: Simplify error path in snd_timer_open()")
    Reported-and-tested-by: Tristan Madani <tristmd@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191106165547.23518-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 107451b87ea548b9ac6a744d0f2fb14ee962f3aa
Author: Salil Mehta <salil.mehta@huawei.com>
Date:   Thu Nov 7 17:09:53 2019 +0000

    net: hns: Fix the stray netpoll locks causing deadlock in NAPI path
    
    [ Upstream commit bf5a6b4c474c589244dc25ee1af2c3c829228ef8 ]
    
    This patch fixes the problem of the spin locks, originally
    meant for the netpoll path of hns driver, causing deadlock in
    the normal NAPI poll path. The issue happened due to the presence
    of the stray leftover spin lock code related to the netpoll,
    whose support was earlier removed from the HNS[1], got activated
    due to enabling of NET_POLL_CONTROLLER switch.
    
    Earlier background:
    The netpoll handling code originally had this bug(as identified
    by Marc Zyngier[2]) of wrong spin lock API being used which did
    not disable the interrupts and hence could cause locking issues.
    i.e. if the lock were first acquired in context to thread like
    'ip' util and this lock if ever got later acquired again in
    context to the interrupt context like TX/RX (Interrupts could
    always pre-empt the lock holding task and acquire the lock again)
    and hence could cause deadlock.
    
    Proposed Solution:
    1. If the netpoll was enabled in the HNS driver, which is not
       right now, we could have simply used spin_[un]lock_irqsave()
    2. But as netpoll is disabled, therefore, it is best to get rid
       of the existing locks and stray code for now. This should
       solve the problem reported by Marc.
    
    [1] https://git.kernel.org/torvalds/c/4bd2c03be7
    [2] https://patchwork.ozlabs.org/patch/1189139/
    
    Fixes: 4bd2c03be707 ("net: hns: remove ndo_poll_controller")
    Cc: lipeng <lipeng321@huawei.com>
    Cc: Yisen Zhuang <yisen.zhuang@huawei.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: David S. Miller <davem@davemloft.net>
    Reported-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26e398dcb3f1b80817bfd6e66745ce5ffdaf7357
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 7 09:26:19 2019 -0800

    ipv6: fixes rt6_probe() and fib6_nh->last_probe init
    
    [ Upstream commit 1bef4c223b8588cf50433bdc2c6953d82949b3b3 ]
    
    While looking at a syzbot KCSAN report [1], I found multiple
    issues in this code :
    
    1) fib6_nh->last_probe has an initial value of 0.
    
       While probably okay on 64bit kernels, this causes an issue
       on 32bit kernels since the time_after(jiffies, 0 + interval)
       might be false ~24 days after boot (for HZ=1000)
    
    2) The data-race found by KCSAN
       I could use READ_ONCE() and WRITE_ONCE(), but we also can
       take the opportunity of not piling-up too many rt6_probe_deferred()
       works by using instead cmpxchg() so that only one cpu wins the race.
    
    [1]
    BUG: KCSAN: data-race in find_match / find_match
    
    write to 0xffff8880bb7aabe8 of 8 bytes by interrupt on cpu 1:
     rt6_probe net/ipv6/route.c:663 [inline]
     find_match net/ipv6/route.c:757 [inline]
     find_match+0x5bd/0x790 net/ipv6/route.c:733
     __find_rr_leaf+0xe3/0x780 net/ipv6/route.c:831
     find_rr_leaf net/ipv6/route.c:852 [inline]
     rt6_select net/ipv6/route.c:896 [inline]
     fib6_table_lookup+0x383/0x650 net/ipv6/route.c:2164
     ip6_pol_route+0xee/0x5c0 net/ipv6/route.c:2200
     ip6_pol_route_output+0x48/0x60 net/ipv6/route.c:2452
     fib6_rule_lookup+0x3d6/0x470 net/ipv6/fib6_rules.c:117
     ip6_route_output_flags_noref+0x16b/0x230 net/ipv6/route.c:2484
     ip6_route_output_flags+0x50/0x1a0 net/ipv6/route.c:2497
     ip6_dst_lookup_tail+0x25d/0xc30 net/ipv6/ip6_output.c:1049
     ip6_dst_lookup_flow+0x68/0x120 net/ipv6/ip6_output.c:1150
     inet6_csk_route_socket+0x2f7/0x420 net/ipv6/inet6_connection_sock.c:106
     inet6_csk_xmit+0x91/0x1f0 net/ipv6/inet6_connection_sock.c:121
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
     tcp_transmit_skb net/ipv4/tcp_output.c:1185 [inline]
     tcp_xmit_probe_skb+0x19b/0x1d0 net/ipv4/tcp_output.c:3735
    
    read to 0xffff8880bb7aabe8 of 8 bytes by interrupt on cpu 0:
     rt6_probe net/ipv6/route.c:657 [inline]
     find_match net/ipv6/route.c:757 [inline]
     find_match+0x521/0x790 net/ipv6/route.c:733
     __find_rr_leaf+0xe3/0x780 net/ipv6/route.c:831
     find_rr_leaf net/ipv6/route.c:852 [inline]
     rt6_select net/ipv6/route.c:896 [inline]
     fib6_table_lookup+0x383/0x650 net/ipv6/route.c:2164
     ip6_pol_route+0xee/0x5c0 net/ipv6/route.c:2200
     ip6_pol_route_output+0x48/0x60 net/ipv6/route.c:2452
     fib6_rule_lookup+0x3d6/0x470 net/ipv6/fib6_rules.c:117
     ip6_route_output_flags_noref+0x16b/0x230 net/ipv6/route.c:2484
     ip6_route_output_flags+0x50/0x1a0 net/ipv6/route.c:2497
     ip6_dst_lookup_tail+0x25d/0xc30 net/ipv6/ip6_output.c:1049
     ip6_dst_lookup_flow+0x68/0x120 net/ipv6/ip6_output.c:1150
     inet6_csk_route_socket+0x2f7/0x420 net/ipv6/inet6_connection_sock.c:106
     inet6_csk_xmit+0x91/0x1f0 net/ipv6/inet6_connection_sock.c:121
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 18894 Comm: udevd Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: cc3a86c802f0 ("ipv6: Change rt6_probe to take a fib6_nh")
    Fixes: f547fac624be ("ipv6: rate-limit probes for neighbourless routes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05b761423d67c06252a858d3cc14e80aead36773
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Tue Nov 5 23:50:14 2019 +0200

    net: mscc: ocelot: fix NULL pointer on LAG slave removal
    
    [ Upstream commit 3b3eed8eec47259939ee6c3d58aea1c311ddee3b ]
    
    lag_upper_info may be NULL on slave removal.
    
    Fixes: dc96ee3730fc ("net: mscc: ocelot: add bonding support")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cfc967ef584ad0e514e6445d599d254db777530
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Tue Nov 5 23:50:13 2019 +0200

    net: mscc: ocelot: don't handle netdev events for other netdevs
    
    [ Upstream commit 7afb3e575e5aa9f5a200a3eb3f45d8130f6d6601 ]
    
    The check that the event is actually for this device should be moved
    from the "port" handler to the net device handler.
    
    Otherwise the port handler will deny bonding configuration for other
    net devices in the same system (like enetc in the LS1028A) that don't
    have the lag_upper_info->tx_type restriction that ocelot has.
    
    Fixes: dc96ee3730fc ("net: mscc: ocelot: add bonding support")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6fdbaeef1f2e76c11ef466513a12b5f77ee6da9
Author: Manish Chopra <manishc@marvell.com>
Date:   Fri Nov 8 02:42:30 2019 -0800

    qede: fix NULL pointer deref in __qede_remove()
    
    [ Upstream commit deabc87111c690097c03765ea017cd500f7376fc ]
    
    While rebooting the system with SR-IOV vfs enabled leads
    to below crash due to recurrence of __qede_remove() on the VF
    devices (first from .shutdown() flow of the VF itself and
    another from PF's .shutdown() flow executing pci_disable_sriov())
    
    This patch adds a safeguard in __qede_remove() flow to fix this,
    so that driver doesn't attempt to remove "already removed" devices.
    
    [  194.360134] BUG: unable to handle kernel NULL pointer dereference at 00000000000008dc
    [  194.360227] IP: [<ffffffffc03553c4>] __qede_remove+0x24/0x130 [qede]
    [  194.360304] PGD 0
    [  194.360325] Oops: 0000 [#1] SMP
    [  194.360360] Modules linked in: tcp_lp fuse tun bridge stp llc devlink bonding ip_set nfnetlink ib_isert iscsi_target_mod ib_srpt target_core_mod ib_srp scsi_transport_srp scsi_tgt ib_ipoib ib_umad rpcrdma sunrpc rdma_ucm ib_uverbs ib_iser rdma_cm iw_cm ib_cm libiscsi scsi_transport_iscsi dell_smbios iTCO_wdt iTCO_vendor_support dell_wmi_descriptor dcdbas vfat fat pcc_cpufreq skx_edac intel_powerclamp coretemp intel_rapl iosf_mbi kvm_intel kvm irqbypass crc32_pclmul ghash_clmulni_intel aesni_intel lrw gf128mul glue_helper ablk_helper cryptd qedr ib_core pcspkr ses enclosure joydev ipmi_ssif sg i2c_i801 lpc_ich mei_me mei wmi ipmi_si ipmi_devintf ipmi_msghandler tpm_crb acpi_pad acpi_power_meter xfs libcrc32c sd_mod crc_t10dif crct10dif_generic crct10dif_pclmul crct10dif_common crc32c_intel mgag200
    [  194.361044]  qede i2c_algo_bit drm_kms_helper qed syscopyarea sysfillrect nvme sysimgblt fb_sys_fops ttm nvme_core mpt3sas crc8 ptp drm pps_core ahci raid_class scsi_transport_sas libahci libata drm_panel_orientation_quirks nfit libnvdimm dm_mirror dm_region_hash dm_log dm_mod [last unloaded: ip_tables]
    [  194.361297] CPU: 51 PID: 7996 Comm: reboot Kdump: loaded Not tainted 3.10.0-1062.el7.x86_64 #1
    [  194.361359] Hardware name: Dell Inc. PowerEdge MX840c/0740HW, BIOS 2.4.6 10/15/2019
    [  194.361412] task: ffff9cea9b360000 ti: ffff9ceabebdc000 task.ti: ffff9ceabebdc000
    [  194.361463] RIP: 0010:[<ffffffffc03553c4>]  [<ffffffffc03553c4>] __qede_remove+0x24/0x130 [qede]
    [  194.361534] RSP: 0018:ffff9ceabebdfac0  EFLAGS: 00010282
    [  194.361570] RAX: 0000000000000000 RBX: ffff9cd013846098 RCX: 0000000000000000
    [  194.361621] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff9cd013846098
    [  194.361668] RBP: ffff9ceabebdfae8 R08: 0000000000000000 R09: 0000000000000000
    [  194.361715] R10: 00000000bfe14201 R11: ffff9ceabfe141e0 R12: 0000000000000000
    [  194.361762] R13: ffff9cd013846098 R14: 0000000000000000 R15: ffff9ceab5e48000
    [  194.361810] FS:  00007f799c02d880(0000) GS:ffff9ceacb0c0000(0000) knlGS:0000000000000000
    [  194.361865] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  194.361903] CR2: 00000000000008dc CR3: 0000001bdac76000 CR4: 00000000007607e0
    [  194.361953] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  194.362002] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  194.362051] PKRU: 55555554
    [  194.362073] Call Trace:
    [  194.362109]  [<ffffffffc0355500>] qede_remove+0x10/0x20 [qede]
    [  194.362180]  [<ffffffffb97d0f3e>] pci_device_remove+0x3e/0xc0
    [  194.362240]  [<ffffffffb98b3c52>] __device_release_driver+0x82/0xf0
    [  194.362285]  [<ffffffffb98b3ce3>] device_release_driver+0x23/0x30
    [  194.362343]  [<ffffffffb97c86d4>] pci_stop_bus_device+0x84/0xa0
    [  194.362388]  [<ffffffffb97c87e2>] pci_stop_and_remove_bus_device+0x12/0x20
    [  194.362450]  [<ffffffffb97f153f>] pci_iov_remove_virtfn+0xaf/0x160
    [  194.362496]  [<ffffffffb97f1aec>] sriov_disable+0x3c/0xf0
    [  194.362534]  [<ffffffffb97f1bc3>] pci_disable_sriov+0x23/0x30
    [  194.362599]  [<ffffffffc02f83c3>] qed_sriov_disable+0x5e3/0x650 [qed]
    [  194.362658]  [<ffffffffb9622df6>] ? kfree+0x106/0x140
    [  194.362709]  [<ffffffffc02cc0c0>] ? qed_free_stream_mem+0x70/0x90 [qed]
    [  194.362754]  [<ffffffffb9622df6>] ? kfree+0x106/0x140
    [  194.362803]  [<ffffffffc02cd659>] qed_slowpath_stop+0x1a9/0x1d0 [qed]
    [  194.362854]  [<ffffffffc035544e>] __qede_remove+0xae/0x130 [qede]
    [  194.362904]  [<ffffffffc03554e0>] qede_shutdown+0x10/0x20 [qede]
    [  194.362956]  [<ffffffffb97cf90a>] pci_device_shutdown+0x3a/0x60
    [  194.363010]  [<ffffffffb98b180b>] device_shutdown+0xfb/0x1f0
    [  194.363066]  [<ffffffffb94b66c6>] kernel_restart_prepare+0x36/0x40
    [  194.363107]  [<ffffffffb94b66e2>] kernel_restart+0x12/0x60
    [  194.363146]  [<ffffffffb94b6959>] SYSC_reboot+0x229/0x260
    [  194.363196]  [<ffffffffb95f200d>] ? handle_mm_fault+0x39d/0x9b0
    [  194.363253]  [<ffffffffb942b621>] ? __switch_to+0x151/0x580
    [  194.363304]  [<ffffffffb9b7ec28>] ? __schedule+0x448/0x9c0
    [  194.363343]  [<ffffffffb94b69fe>] SyS_reboot+0xe/0x10
    [  194.363387]  [<ffffffffb9b8bede>] system_call_fastpath+0x25/0x2a
    [  194.363430] Code: f9 e9 37 ff ff ff 90 0f 1f 44 00 00 55 48 89 e5 41 57 41 56 41 55 4c 8d af 98 00 00 00 41 54 4c 89 ef 41 89 f4 53 e8 4c e4 55 f9 <80> b8 dc 08 00 00 01 48 89 c3 4c 8d b8 c0 08 00 00 4c 8b b0 c0
    [  194.363712] RIP  [<ffffffffc03553c4>] __qede_remove+0x24/0x130 [qede]
    [  194.363764]  RSP <ffff9ceabebdfac0>
    [  194.363791] CR2: 00000000000008dc
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Sudarsana Kalluru <skalluru@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 956b38853517d55af18b6c74039f485f9b3fcd96
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 7 09:33:20 2019 +0800

    NFC: st21nfca: fix double free
    
    [ Upstream commit 99a8efbb6e30b72ac98cecf81103f847abffb1e5 ]
    
    The variable nfcid_skb is not changed in the callee nfc_hci_get_param()
    if error occurs. Consequently, the freed variable nfcid_skb will be
    freed again, resulting in a double free bug. Set nfcid_skb to NULL after
    releasing it to fix the bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1143496c9632f36ebed57312877b92fd4082d886
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 7 14:29:50 2019 +0800

    nfc: netlink: fix double device reference drop
    
    [ Upstream commit 025ec40b81d785a98f76b8bdb509ac10773b4f12 ]
    
    The function nfc_put_device(dev) is called twice to drop the reference
    to dev when there is no associated local llcp. Remove one of them to fix
    the bug.
    
    Fixes: 52feb444a903 ("NFC: Extend netlink interface for LTO, RW, and MIUX parameters support")
    Fixes: d9b8d8e19b07 ("NFC: llcp: Service Name Lookup netlink interface")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 760a1f7f22ee8f7636a00a57707df5095364f0e0
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Nov 5 16:34:07 2019 +0800

    NFC: fdp: fix incorrect free object
    
    [ Upstream commit 517ce4e93368938b204451285e53014549804868 ]
    
    The address of fw_vsc_cfg is on stack. Releasing it with devm_kfree() is
    incorrect, which may result in a system crash or other security impacts.
    The expected object to free is *fw_vsc_cfg.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5580091ce7d9555447c06508b55b95c0b79c6266
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Thu Nov 7 11:57:01 2019 +0100

    net: usb: qmi_wwan: add support for DW5821e with eSIM support
    
    [ Upstream commit e497df686e8fed8c1dd69179010656362858edb3 ]
    
    Exactly same layout as the default DW5821e module, just a different
    vid/pid.
    
    The QMI interface is exposed in USB configuration #1:
    
    P:  Vendor=413c ProdID=81e0 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5821e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fd218071f2148e0bcf2122ea5d481cf209a5aa7
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Mon Nov 4 17:54:22 2019 -0700

    net: qualcomm: rmnet: Fix potential UAF when unregistering
    
    [ Upstream commit e7a86c687e64ab24f88330ad24ecc9442ce40c5a ]
    
    During the exit/unregistration process of the RmNet driver, the function
    rmnet_unregister_real_device() is called to handle freeing the driver's
    internal state and removing the RX handler on the underlying physical
    device. However, the order of operations this function performs is wrong
    and can lead to a use after free of the rmnet_port structure.
    
    Before calling netdev_rx_handler_unregister(), this port structure is
    freed with kfree(). If packets are received on any RmNet devices before
    synchronize_net() completes, they will attempt to use this already-freed
    port structure when processing the packet. As such, before cleaning up any
    other internal state, the RX handler must be unregistered in order to
    guarantee that no further packets will arrive on the device.
    
    Fixes: ceed73a2cf4a ("drivers: net: ethernet: qualcomm: rmnet: Initial implementation")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9bda52f8f3ed21fbec800d682141bf7d2858111
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 7 20:08:19 2019 -0800

    net: fix data-race in neigh_event_send()
    
    [ Upstream commit 1b53d64435d56902fc234ff2507142d971a09687 ]
    
    KCSAN reported the following data-race [1]
    
    The fix will also prevent the compiler from optimizing out
    the condition.
    
    [1]
    
    BUG: KCSAN: data-race in neigh_resolve_output / neigh_resolve_output
    
    write to 0xffff8880a41dba78 of 8 bytes by interrupt on cpu 1:
     neigh_event_send include/net/neighbour.h:443 [inline]
     neigh_resolve_output+0x78/0x480 net/core/neighbour.c:1474
     neigh_output include/net/neighbour.h:511 [inline]
     ip_finish_output2+0x4af/0xe40 net/ipv4/ip_output.c:228
     __ip_finish_output net/ipv4/ip_output.c:308 [inline]
     __ip_finish_output+0x23a/0x490 net/ipv4/ip_output.c:290
     ip_finish_output+0x41/0x160 net/ipv4/ip_output.c:318
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip_output+0xdf/0x210 net/ipv4/ip_output.c:432
     dst_output include/net/dst.h:436 [inline]
     ip_local_out+0x74/0x90 net/ipv4/ip_output.c:125
     __ip_queue_xmit+0x3a8/0xa40 net/ipv4/ip_output.c:532
     ip_queue_xmit+0x45/0x60 include/net/ip.h:237
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
     tcp_transmit_skb net/ipv4/tcp_output.c:1185 [inline]
     __tcp_retransmit_skb+0x4bd/0x15f0 net/ipv4/tcp_output.c:2976
     tcp_retransmit_skb+0x36/0x1a0 net/ipv4/tcp_output.c:2999
     tcp_retransmit_timer+0x719/0x16d0 net/ipv4/tcp_timer.c:515
     tcp_write_timer_handler+0x42d/0x510 net/ipv4/tcp_timer.c:598
     tcp_write_timer+0xd1/0xf0 net/ipv4/tcp_timer.c:618
    
    read to 0xffff8880a41dba78 of 8 bytes by interrupt on cpu 0:
     neigh_event_send include/net/neighbour.h:442 [inline]
     neigh_resolve_output+0x57/0x480 net/core/neighbour.c:1474
     neigh_output include/net/neighbour.h:511 [inline]
     ip_finish_output2+0x4af/0xe40 net/ipv4/ip_output.c:228
     __ip_finish_output net/ipv4/ip_output.c:308 [inline]
     __ip_finish_output+0x23a/0x490 net/ipv4/ip_output.c:290
     ip_finish_output+0x41/0x160 net/ipv4/ip_output.c:318
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip_output+0xdf/0x210 net/ipv4/ip_output.c:432
     dst_output include/net/dst.h:436 [inline]
     ip_local_out+0x74/0x90 net/ipv4/ip_output.c:125
     __ip_queue_xmit+0x3a8/0xa40 net/ipv4/ip_output.c:532
     ip_queue_xmit+0x45/0x60 include/net/ip.h:237
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
     tcp_transmit_skb net/ipv4/tcp_output.c:1185 [inline]
     __tcp_retransmit_skb+0x4bd/0x15f0 net/ipv4/tcp_output.c:2976
     tcp_retransmit_skb+0x36/0x1a0 net/ipv4/tcp_output.c:2999
     tcp_retransmit_timer+0x719/0x16d0 net/ipv4/tcp_timer.c:515
     tcp_write_timer_handler+0x42d/0x510 net/ipv4/tcp_timer.c:598
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fbfdb2de4a1ae9680641358ca3d09a1c6286c48
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Nov 8 10:00:44 2019 +0000

    net: ethernet: octeon_mgmt: Account for second possible VLAN header
    
    [ Upstream commit e4dd5608033efe7b6030cde359bfdbaeb73bc22d ]
    
    Octeon's input ring-buffer entry has 14 bits-wide size field, so to account
    for second possible VLAN header max_mtu must be further reduced.
    
    Fixes: 109cc16526c6d ("ethernet/cavium: use core min/max MTU checking")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88f8c39912bc727e2531a5fab0361a1caa9d1a35
Author: David Ahern <dsahern@kernel.org>
Date:   Thu Nov 7 18:29:52 2019 +0000

    ipv4: Fix table id reference in fib_sync_down_addr
    
    [ Upstream commit e0a312629fefa943534fc46f7bfbe6de3fdaf463 ]
    
    Hendrik reported routes in the main table using source address are not
    removed when the address is removed. The problem is that fib_sync_down_addr
    does not account for devices in the default VRF which are associated
    with the main table. Fix by updating the table id reference.
    
    Fixes: 5a56a0b3a45d ("net: Don't delete routes in different VRFs")
    Reported-by: Hendrik Donner <hd@os-cillation.de>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ddabef8906706dbec4dcac8c5507c6349c61aea
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 7 09:48:01 2019 +0100

    CDC-NCM: handle incomplete transfer of MTU
    
    [ Upstream commit 332f989a3b0041b810836c5c3747e59aad7e9d0b ]
    
    A malicious device may give half an answer when asked
    for its MTU. The driver will proceed after this with
    a garbage MTU. Anything but a complete answer must be treated
    as an error.
    
    V2: used sizeof as request by Alexander
    
    Reported-and-tested-by: syzbot+0631d878823ce2411636@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27b5f4bf5ba95b452d98ecaec4eed67ff2e05f67
Author: Jay Vosburgh <jay.vosburgh@canonical.com>
Date:   Fri Nov 1 21:56:42 2019 -0700

    bonding: fix state transition issue in link monitoring
    
    [ Upstream commit 1899bb325149e481de31a4f32b59ea6f24e176ea ]
    
    Since de77ecd4ef02 ("bonding: improve link-status update in
    mii-monitoring"), the bonding driver has utilized two separate variables
    to indicate the next link state a particular slave should transition to.
    Each is used to communicate to a different portion of the link state
    change commit logic; one to the bond_miimon_commit function itself, and
    another to the state transition logic.
    
            Unfortunately, the two variables can become unsynchronized,
    resulting in incorrect link state transitions within bonding.  This can
    cause slaves to become stuck in an incorrect link state until a
    subsequent carrier state transition.
    
            The issue occurs when a special case in bond_slave_netdev_event
    sets slave->link directly to BOND_LINK_FAIL.  On the next pass through
    bond_miimon_inspect after the slave goes carrier up, the BOND_LINK_FAIL
    case will set the proposed next state (link_new_state) to BOND_LINK_UP,
    but the new_link to BOND_LINK_DOWN.  The setting of the final link state
    from new_link comes after that from link_new_state, and so the slave
    will end up incorrectly in _DOWN state.
    
            Resolve this by combining the two variables into one.
    
    Reported-by: Aleksei Zakharov <zakharov.a.g@yandex.ru>
    Reported-by: Sha Zhang <zhangsha.zhang@huawei.com>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Fixes: de77ecd4ef02 ("bonding: improve link-status update in mii-monitoring")
    Signed-off-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
