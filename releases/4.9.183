commit 72f67fd749dba12f6412b8d57e680b435c3f284a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jun 22 08:17:25 2019 +0200

    Linux 4.9.183

commit 77beb274790656702dbca6d1e698da522d56c069
Author: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
Date:   Fri Dec 14 11:55:52 2018 +0100

    Abort file_remove_privs() for non-reg. files
    
    commit f69e749a49353d96af1a293f56b5b56de59c668a upstream.
    
    file_remove_privs() might be called for non-regular files, e.g.
    blkdev inode. There is no reason to do its job on things
    like blkdev inodes, pipes, or cdevs. Hence, abort if
    file does not refer to a regular inode.
    
    AV: more to the point, for devices there might be any number of
    inodes refering to given device.  Which one to strip the permissions
    from, even if that made any sense in the first place?  All of them
    will be observed with contents modified, after all.
    
    Found by LockDoc (Alexander Lochmann, Horst Schirmeier and Olaf
    Spinczyk)
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
    Signed-off-by: Horst Schirmeier <horst.schirmeier@tu-dortmund.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7219a58c57de1b5046154c2267ac70f9fcdee6f8
Author: Amit Cohen <amitc@mellanox.com>
Date:   Wed May 29 10:59:45 2019 +0300

    mlxsw: spectrum: Prevent force of 56G
    
    [ Upstream commit 275e928f19117d22f6d26dee94548baf4041b773 ]
    
    Force of 56G is not supported by hardware in Ethernet devices. This
    configuration fails with a bad parameter error from firmware.
    
    Add check of this case. Instead of trying to set 56G with autoneg off,
    return a meaningful error.
    
    Fixes: 56ade8fe3fe1 ("mlxsw: spectrum: Add initial support for Spectrum ASIC")
    Signed-off-by: Amit Cohen <amitc@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d28cf14a89c400fa55f6f9a9a4ca3bc34094b34
Author: Jason Yan <yanaijie@huawei.com>
Date:   Tue May 14 10:42:39 2019 +0800

    scsi: libsas: delete sas port if expander discover failed
    
    [ Upstream commit 3b0541791453fbe7f42867e310e0c9eb6295364d ]
    
    The sas_port(phy->port) allocated in sas_ex_discover_expander() will not be
    deleted when the expander failed to discover. This will cause resource leak
    and a further issue of kernel BUG like below:
    
    [159785.843156]  port-2:17:29: trying to add phy phy-2:17:29 fails: it's
    already part of another port
    [159785.852144] ------------[ cut here  ]------------
    [159785.856833] kernel BUG at drivers/scsi/scsi_transport_sas.c:1086!
    [159785.863000] Internal error: Oops - BUG: 0 [#1] SMP
    [159785.867866] CPU: 39 PID: 16993 Comm: kworker/u96:2 Tainted: G
    W  OE     4.19.25-vhulk1901.1.0.h111.aarch64 #1
    [159785.878458] Hardware name: Huawei Technologies Co., Ltd.
    Hi1620EVBCS/Hi1620EVBCS, BIOS Hi1620 CS B070 1P TA 03/21/2019
    [159785.889231] Workqueue: 0000:74:02.0_disco_q sas_discover_domain
    [159785.895224] pstate: 40c00009 (nZcv daif +PAN +UAO)
    [159785.900094] pc : sas_port_add_phy+0x188/0x1b8
    [159785.904524] lr : sas_port_add_phy+0x188/0x1b8
    [159785.908952] sp : ffff0001120e3b80
    [159785.912341] x29: ffff0001120e3b80 x28: 0000000000000000
    [159785.917727] x27: ffff802ade8f5400 x26: ffff0000681b7560
    [159785.923111] x25: ffff802adf11a800 x24: ffff0000680e8000
    [159785.928496] x23: ffff802ade8f5728 x22: ffff802ade8f5708
    [159785.933880] x21: ffff802adea2db40 x20: ffff802ade8f5400
    [159785.939264] x19: ffff802adea2d800 x18: 0000000000000010
    [159785.944649] x17: 00000000821bf734 x16: ffff00006714faa0
    [159785.950033] x15: ffff0000e8ab4ecf x14: 7261702079646165
    [159785.955417] x13: 726c612073277469 x12: ffff00006887b830
    [159785.960802] x11: ffff00006773eaa0 x10: 7968702079687020
    [159785.966186] x9 : 0000000000002453 x8 : 726f702072656874
    [159785.971570] x7 : 6f6e6120666f2074 x6 : ffff802bcfb21290
    [159785.976955] x5 : ffff802bcfb21290 x4 : 0000000000000000
    [159785.982339] x3 : ffff802bcfb298c8 x2 : 337752b234c2ab00
    [159785.987723] x1 : 337752b234c2ab00 x0 : 0000000000000000
    [159785.993108] Process kworker/u96:2 (pid: 16993, stack limit =
    0x0000000072dae094)
    [159786.000576] Call trace:
    [159786.003097]  sas_port_add_phy+0x188/0x1b8
    [159786.007179]  sas_ex_get_linkrate.isra.5+0x134/0x140
    [159786.012130]  sas_ex_discover_expander+0x128/0x408
    [159786.016906]  sas_ex_discover_dev+0x218/0x4c8
    [159786.021249]  sas_ex_discover_devices+0x9c/0x1a8
    [159786.025852]  sas_discover_root_expander+0x134/0x160
    [159786.030802]  sas_discover_domain+0x1b8/0x1e8
    [159786.035148]  process_one_work+0x1b4/0x3f8
    [159786.039230]  worker_thread+0x54/0x470
    [159786.042967]  kthread+0x134/0x138
    [159786.046269]  ret_from_fork+0x10/0x18
    [159786.049918] Code: 91322300 f0004402 91178042 97fe4c9b (d4210000)
    [159786.056083] Modules linked in: hns3_enet_ut(OE) hclge(OE) hnae3(OE)
    hisi_sas_test_hw(OE) hisi_sas_test_main(OE) serdes(OE)
    [159786.067202] ---[ end trace 03622b9e2d99e196  ]---
    [159786.071893] Kernel panic - not syncing: Fatal exception
    [159786.077190] SMP: stopping secondary CPUs
    [159786.081192] Kernel Offset: disabled
    [159786.084753] CPU features: 0x2,a2a00a38
    
    Fixes: 2908d778ab3e ("[SCSI] aic94xx: new driver")
    Reported-by: Jian Luo <luojian5@huawei.com>
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    CC: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20471399cedc640f49323f31b48241cdcfe998e5
Author: Lianbo Jiang <lijiang@redhat.com>
Date:   Mon May 27 08:59:34 2019 +0800

    scsi: smartpqi: properly set both the DMA mask and the coherent DMA mask
    
    [ Upstream commit 1d94f06e7f5df4064ef336b7b710f50143b64a53 ]
    
    When SME is enabled, the smartpqi driver won't work on the HP DL385 G10
    machine, which causes the failure of kernel boot because it fails to
    allocate pqi error buffer. Please refer to the kernel log:
    ....
    [    9.431749] usbcore: registered new interface driver uas
    [    9.441524] Microsemi PQI Driver (v1.1.4-130)
    [    9.442956] i40e 0000:04:00.0: fw 6.70.48768 api 1.7 nvm 10.2.5
    [    9.447237] smartpqi 0000:23:00.0: Microsemi Smart Family Controller found
             Starting dracut initqueue hook...
    [  OK  ] Started Show Plymouth Boot Scre[    9.471654] Broadcom NetXtreme-C/E driver bnxt_en v1.9.1
    en.
    [  OK  ] Started Forward Password Requests to Plymouth Directory Watch.
    [[0;[    9.487108] smartpqi 0000:23:00.0: failed to allocate PQI error buffer
    ....
    [  139.050544] dracut-initqueue[949]: Warning: dracut-initqueue timeout - starting timeout scripts
    [  139.589779] dracut-initqueue[949]: Warning: dracut-initqueue timeout - starting timeout scripts
    
    Basically, the fact that the coherent DMA mask value wasn't set caused the
    driver to fall back to SWIOTLB when SME is active.
    
    For correct operation, lets call the dma_set_mask_and_coherent() to
    properly set the mask for both streaming and coherent, in order to inform
    the kernel about the devices DMA addressing capabilities.
    
    Signed-off-by: Lianbo Jiang <lijiang@redhat.com>
    Acked-by: Don Brace <don.brace@microsemi.com>
    Tested-by: Don Brace <don.brace@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a0c974d23778001eb80debd49d8d0baedcf530f
Author: Varun Prakash <varun@chelsio.com>
Date:   Wed May 22 20:10:55 2019 +0530

    scsi: libcxgbi: add a check for NULL pointer in cxgbi_check_route()
    
    [ Upstream commit cc555759117e8349088e0c5d19f2f2a500bafdbd ]
    
    ip_dev_find() can return NULL so add a check for NULL pointer.
    
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b25b0c790c566275ac6fbeefd6d90c9a56f64ab
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue May 28 13:10:46 2019 +0900

    net: sh_eth: fix mdio access in sh_eth_close() for R-Car Gen2 and RZ/A1 SoCs
    
    [ Upstream commit 315ca92dd863fecbffc0bb52ae0ac11e0398726a ]
    
    The sh_eth_close() resets the MAC and then calls phy_stop()
    so that mdio read access result is incorrect without any error
    according to kernel trace like below:
    
    ifconfig-216   [003] .n..   109.133124: mdio_access: ee700000.ethernet-ffffffff read  phy:0x01 reg:0x00 val:0xffff
    
    According to the hardware manual, the RMII mode should be set to 1
    before operation the Ethernet MAC. However, the previous code was not
    set to 1 after the driver issued the soft_reset in sh_eth_dev_exit()
    so that the mdio read access result seemed incorrect. To fix the issue,
    this patch adds a condition and set the RMII mode register in
    sh_eth_dev_exit() for R-Car Gen2 and RZ/A1 SoCs.
    
    Note that when I have tried to move the sh_eth_dev_exit() calling
    after phy_stop() on sh_eth_close(), but it gets worse (kernel panic
    happened and it seems that a register is accessed while the clock is
    off).
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5590c4921f2004faf1c128cb40a47fea61b236f1
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu May 23 16:36:32 2019 +1000

    KVM: PPC: Book3S HV: Don't take kvm->lock around kvm_for_each_vcpu
    
    [ Upstream commit 5a3f49364c3ffa1107bd88f8292406e98c5d206c ]
    
    Currently the HV KVM code takes the kvm->lock around calls to
    kvm_for_each_vcpu() and kvm_get_vcpu_by_id() (which can call
    kvm_for_each_vcpu() internally).  However, that leads to a lock
    order inversion problem, because these are called in contexts where
    the vcpu mutex is held, but the vcpu mutexes nest within kvm->lock
    according to Documentation/virtual/kvm/locking.txt.  Hence there
    is a possibility of deadlock.
    
    To fix this, we simply don't take the kvm->lock mutex around these
    calls.  This is safe because the implementations of kvm_for_each_vcpu()
    and kvm_get_vcpu_by_id() have been designed to be able to be called
    locklessly.
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fffbde146c6d0bf1d57478f86431a6605cd61982
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Wed May 29 11:54:00 2019 +1000

    KVM: PPC: Book3S: Use new mutex to synchronize access to rtas token list
    
    [ Upstream commit 1659e27d2bc1ef47b6d031abe01b467f18cb72d9 ]
    
    Currently the Book 3S KVM code uses kvm->lock to synchronize access
    to the kvm->arch.rtas_tokens list.  Because this list is scanned
    inside kvmppc_rtas_hcall(), which is called with the vcpu mutex held,
    taking kvm->lock cause a lock inversion problem, which could lead to
    a deadlock.
    
    To fix this, we add a new mutex, kvm->arch.rtas_token_lock, which nests
    inside the vcpu mutexes, and use that instead of kvm->lock when
    accessing the rtas token list.
    
    This removes the lockdep_assert_held() in kvmppc_rtas_tokens_free().
    At this point we don't hold the new mutex, but that is OK because
    kvmppc_rtas_tokens_free() is only called when the whole VM is being
    destroyed, and at that point nothing can be looking up a token in
    the list.
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83a91e47809798aa24b0d97f8b00012bf81a4b25
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue May 28 09:14:30 2019 -0700

    ia64: fix build errors by exporting paddr_to_nid()
    
    [ Upstream commit 9a626c4a6326da4433a0d4d4a8a7d1571caf1ed3 ]
    
    Fix build errors on ia64 when DISCONTIGMEM=y and NUMA=y by
    exporting paddr_to_nid().
    
    Fixes these build errors:
    
    ERROR: "paddr_to_nid" [sound/core/snd-pcm.ko] undefined!
    ERROR: "paddr_to_nid" [net/sunrpc/sunrpc.ko] undefined!
    ERROR: "paddr_to_nid" [fs/cifs/cifs.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/video/fbdev/core/fb.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/usb/mon/usbmon.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/usb/core/usbcore.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/md/raid1.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/md/dm-mod.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/md/dm-crypt.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/md/dm-bufio.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/ide/ide-core.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/ide/ide-cd_mod.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/gpu/drm/drm.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/char/agp/agpgart.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/block/nbd.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/block/loop.ko] undefined!
    ERROR: "paddr_to_nid" [drivers/block/brd.ko] undefined!
    ERROR: "paddr_to_nid" [crypto/ccm.ko] undefined!
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: linux-ia64@vger.kernel.org
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38df6778442a5713b6d714b9085315c95ab8884e
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Wed May 22 16:46:01 2019 +0200

    perf record: Fix s390 missing module symbol and warning for non-root users
    
    [ Upstream commit 6738028dd57df064b969d8392c943ef3b3ae705d ]
    
    Command 'perf record' and 'perf report' on a system without kernel
    debuginfo packages uses /proc/kallsyms and /proc/modules to find
    addresses for kernel and module symbols. On x86 this works for root and
    non-root users.
    
    On s390, when invoked as non-root user, many of the following warnings
    are shown and module symbols are missing:
    
        proc/{kallsyms,modules} inconsistency while looking for
            "[sha1_s390]" module!
    
    Command 'perf record' creates a list of module start addresses by
    parsing the output of /proc/modules and creates a PERF_RECORD_MMAP
    record for the kernel and each module. The following function call
    sequence is executed:
    
      machine__create_kernel_maps
        machine__create_module
          modules__parse
            machine__create_module --> for each line in /proc/modules
              arch__fix_module_text_start
    
    Function arch__fix_module_text_start() is s390 specific. It opens
    file /sys/module/<name>/sections/.text to extract the module's .text
    section start address. On s390 the module loader prepends a header
    before the first section, whereas on x86 the module's text section
    address is identical the the module's load address.
    
    However module section files are root readable only. For non-root the
    read operation fails and machine__create_module() returns an error.
    Command perf record does not generate any PERF_RECORD_MMAP record
    for loaded modules. Later command perf report complains about missing
    module maps.
    
    To fix this function arch__fix_module_text_start() always returns
    success. For root users there is no change, for non-root users
    the module's load address is used as module's text start address
    (the prepended header then counts as part of the text section).
    
    This enable non-root users to use module symbols and avoid the
    warning when perf report is executed.
    
    Output before:
    
      [tmricht@m83lp54 perf]$ ./perf report -D | fgrep MMAP
      0 0x168 [0x50]: PERF_RECORD_MMAP ... x [kernel.kallsyms]_text
    
    Output after:
    
      [tmricht@m83lp54 perf]$ ./perf report -D | fgrep MMAP
      0 0x168 [0x50]: PERF_RECORD_MMAP ... x [kernel.kallsyms]_text
      0 0x1b8 [0x98]: PERF_RECORD_MMAP ... x /lib/modules/.../autofs4.ko.xz
      0 0x250 [0xa8]: PERF_RECORD_MMAP ... x /lib/modules/.../sha_common.ko.xz
      0 0x2f8 [0x98]: PERF_RECORD_MMAP ... x /lib/modules/.../des_generic.ko.xz
    
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Link: http://lkml.kernel.org/r/20190522144601.50763-4-tmricht@linux.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f64ee932e96ce23ed0752211c7ae1a2d82aff4d
Author: Shawn Landden <shawn@git.icu>
Date:   Sat May 18 15:32:38 2019 -0300

    perf data: Fix 'strncat may truncate' build failure with recent gcc
    
    [ Upstream commit 97acec7df172cd1e450f81f5e293c0aa145a2797 ]
    
    This strncat() is safe because the buffer was allocated with zalloc(),
    however gcc doesn't know that. Since the string always has 4 non-null
    bytes, just use memcpy() here.
    
        CC       /home/shawn/linux/tools/perf/util/data-convert-bt.o
      In file included from /usr/include/string.h:494,
                       from /home/shawn/linux/tools/lib/traceevent/event-parse.h:27,
                       from util/data-convert-bt.c:22:
      In function ‘strncat’,
          inlined from ‘string_set_value’ at util/data-convert-bt.c:274:4:
      /usr/include/powerpc64le-linux-gnu/bits/string_fortified.h:136:10: error: ‘__builtin_strncat’ output may be truncated copying 4 bytes from a string of length 4 [-Werror=stringop-truncation]
        136 |   return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));
            |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Shawn Landden <shawn@git.icu>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    LPU-Reference: 20190518183238.10954-1-shawn@git.icu
    Link: https://lkml.kernel.org/n/tip-289f1jice17ta7tr3tstm9jm@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79cb505ab224564f335bb8e012d3afad7c726812
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Thu Jan 3 16:48:15 2019 +0530

    configfs: Fix use-after-free when accessing sd->s_dentry
    
    [ Upstream commit f6122ed2a4f9c9c1c073ddf6308d1b2ac10e0781 ]
    
    In the vfs_statx() context, during path lookup, the dentry gets
    added to sd->s_dentry via configfs_attach_attr(). In the end,
    vfs_statx() kills the dentry by calling path_put(), which invokes
    configfs_d_iput(). Ideally, this dentry must be removed from
    sd->s_dentry but it doesn't if the sd->s_count >= 3. As a result,
    sd->s_dentry is holding reference to a stale dentry pointer whose
    memory is already freed up. This results in use-after-free issue,
    when this stale sd->s_dentry is accessed later in
    configfs_readdir() path.
    
    This issue can be easily reproduced, by running the LTP test case -
    sh fs_racer_file_list.sh /config
    (https://github.com/linux-test-project/ltp/blob/master/testcases/kernel/fs/racer/fs_racer_file_list.sh)
    
    Fixes: 76ae281f6307 ('configfs: fix race between dentry put and lookup')
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8557793a2fea4f2b7006ea7b97d3f67532b2503d
Author: Yingjoe Chen <yingjoe.chen@mediatek.com>
Date:   Tue May 7 22:20:32 2019 +0800

    i2c: dev: fix potential memory leak in i2cdev_ioctl_rdwr
    
    [ Upstream commit a0692f0eef91354b62c2b4c94954536536be5425 ]
    
    If I2C_M_RECV_LEN check failed, msgs[i].buf allocated by memdup_user
    will not be freed. Pump index up so it will be freed.
    
    Fixes: 838bfa6049fb ("i2c-dev: Add support for I2C_M_RECV_LEN")
    Signed-off-by: Yingjoe Chen <yingjoe.chen@mediatek.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dbd598836fca322226d5085030950990a5fd093
Author: Kees Cook <keescook@chromium.org>
Date:   Fri May 24 13:20:19 2019 -0700

    net: tulip: de4x5: Drop redundant MODULE_DEVICE_TABLE()
    
    [ Upstream commit 3e66b7cc50ef921121babc91487e1fb98af1ba6e ]
    
    Building with Clang reports the redundant use of MODULE_DEVICE_TABLE():
    
    drivers/net/ethernet/dec/tulip/de4x5.c:2110:1: error: redefinition of '__mod_eisa__de4x5_eisa_ids_device_table'
    MODULE_DEVICE_TABLE(eisa, de4x5_eisa_ids);
    ^
    ./include/linux/module.h:229:21: note: expanded from macro 'MODULE_DEVICE_TABLE'
    extern typeof(name) __mod_##type##__##name##_device_table               \
                        ^
    <scratch space>:90:1: note: expanded from here
    __mod_eisa__de4x5_eisa_ids_device_table
    ^
    drivers/net/ethernet/dec/tulip/de4x5.c:2100:1: note: previous definition is here
    MODULE_DEVICE_TABLE(eisa, de4x5_eisa_ids);
    ^
    ./include/linux/module.h:229:21: note: expanded from macro 'MODULE_DEVICE_TABLE'
    extern typeof(name) __mod_##type##__##name##_device_table               \
                        ^
    <scratch space>:85:1: note: expanded from here
    __mod_eisa__de4x5_eisa_ids_device_table
    ^
    
    This drops the one further from the table definition to match the common
    use of MODULE_DEVICE_TABLE().
    
    Fixes: 07563c711fbc ("EISA bus MODALIAS attributes support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 246c1dd5fbe2644396b134c9ea1b31bfdb5281b8
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu May 23 15:00:41 2019 -0700

    gpio: fix gpio-adp5588 build errors
    
    [ Upstream commit e9646f0f5bb62b7d43f0968f39d536cfe7123b53 ]
    
    The gpio-adp5588 driver uses interfaces that are provided by
    GPIOLIB_IRQCHIP, so select that symbol in its Kconfig entry.
    
    Fixes these build errors:
    
    ../drivers/gpio/gpio-adp5588.c: In function ‘adp5588_irq_handler’:
    ../drivers/gpio/gpio-adp5588.c:266:26: error: ‘struct gpio_chip’ has no member named ‘irq’
                dev->gpio_chip.irq.domain, gpio));
                              ^
    ../drivers/gpio/gpio-adp5588.c: In function ‘adp5588_irq_setup’:
    ../drivers/gpio/gpio-adp5588.c:298:2: error: implicit declaration of function ‘gpiochip_irqchip_add_nested’ [-Werror=implicit-function-declaration]
      ret = gpiochip_irqchip_add_nested(&dev->gpio_chip,
      ^
    ../drivers/gpio/gpio-adp5588.c:307:2: error: implicit declaration of function ‘gpiochip_set_nested_irqchip’ [-Werror=implicit-function-declaration]
      gpiochip_set_nested_irqchip(&dev->gpio_chip,
      ^
    
    Fixes: 459773ae8dbb ("gpio: adp5588-gpio: support interrupt controller")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: linux-gpio@vger.kernel.org
    Reviewed-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abfdce3894a7379477dbc2ca9060f2ecefb23efc
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri May 17 13:52:32 2019 +0200

    perf/ring_buffer: Add ordering to rb->nest increment
    
    [ Upstream commit 3f9fbe9bd86c534eba2faf5d840fd44c6049f50e ]
    
    Similar to how decrementing rb->next too early can cause data_head to
    (temporarily) be observed to go backward, so too can this happen when
    we increment too late.
    
    This barrier() ensures the rb->head load happens after the increment,
    both the one in the 'goto again' path, as the one from
    perf_output_get_handle() -- albeit very unlikely to matter for the
    latter.
    
    Suggested-by: Yabin Cui <yabinc@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: acme@kernel.org
    Cc: mark.rutland@arm.com
    Cc: namhyung@kernel.org
    Fixes: ef60777c9abd ("perf: Optimize the perf_output() path by removing IRQ-disables")
    Link: http://lkml.kernel.org/r/20190517115418.309516009@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a446eb58bd570d4876dfaca0fe900fe31b8e7792
Author: Yabin Cui <yabinc@google.com>
Date:   Fri May 17 13:52:31 2019 +0200

    perf/ring_buffer: Fix exposing a temporarily decreased data_head
    
    [ Upstream commit 1b038c6e05ff70a1e66e3e571c2e6106bdb75f53 ]
    
    In perf_output_put_handle(), an IRQ/NMI can happen in below location and
    write records to the same ring buffer:
    
            ...
            local_dec_and_test(&rb->nest)
            ...                          <-- an IRQ/NMI can happen here
            rb->user_page->data_head = head;
            ...
    
    In this case, a value A is written to data_head in the IRQ, then a value
    B is written to data_head after the IRQ. And A > B. As a result,
    data_head is temporarily decreased from A to B. And a reader may see
    data_head < data_tail if it read the buffer frequently enough, which
    creates unexpected behaviors.
    
    This can be fixed by moving dec(&rb->nest) to after updating data_head,
    which prevents the IRQ/NMI above from updating data_head.
    
    [ Split up by peterz. ]
    
    Signed-off-by: Yabin Cui <yabinc@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: mark.rutland@arm.com
    Fixes: ef60777c9abd ("perf: Optimize the perf_output() path by removing IRQ-disables")
    Link: http://lkml.kernel.org/r/20190517115418.224478157@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b28e79457666906c47ae8cbc3cae94ec272bca35
Author: Frank van der Linden <fllinden@amazon.com>
Date:   Wed May 22 22:17:45 2019 +0000

    x86/CPU/AMD: Don't force the CPB cap when running under a hypervisor
    
    [ Upstream commit 2ac44ab608705948564791ce1d15d43ba81a1e38 ]
    
    For F17h AMD CPUs, the CPB capability ('Core Performance Boost') is forcibly set,
    because some versions of that chip incorrectly report that they do not have it.
    
    However, a hypervisor may filter out the CPB capability, for good
    reasons. For example, KVM currently does not emulate setting the CPB
    bit in MSR_K7_HWCR, and unchecked MSR access errors will be thrown
    when trying to set it as a guest:
    
            unchecked MSR access error: WRMSR to 0xc0010015 (tried to write 0x0000000001000011) at rIP: 0xffffffff890638f4 (native_write_msr+0x4/0x20)
    
            Call Trace:
            boost_set_msr+0x50/0x80 [acpi_cpufreq]
            cpuhp_invoke_callback+0x86/0x560
            sort_range+0x20/0x20
            cpuhp_thread_fun+0xb0/0x110
            smpboot_thread_fn+0xef/0x160
            kthread+0x113/0x130
            kthread_create_worker_on_cpu+0x70/0x70
            ret_from_fork+0x35/0x40
    
    To avoid this issue, don't forcibly set the CPB capability for a CPU
    when running under a hypervisor.
    
    Signed-off-by: Frank van der Linden <fllinden@amazon.com>
    Acked-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bp@alien8.de
    Cc: jiaxun.yang@flygoat.com
    Fixes: 0237199186e7 ("x86/CPU/AMD: Set the CPB bit unconditionally on F17h")
    Link: http://lkml.kernel.org/r/20190522221745.GA15789@dev-dsk-fllinden-2c-c1893d73.us-west-2.amazon.com
    [ Minor edits to the changelog. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f13d6b305a5cf528580fb9b6b3e6221075be3ff2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed May 22 11:45:13 2019 +0300

    mISDN: make sure device name is NUL terminated
    
    [ Upstream commit ccfb62f27beb295103e9392462b20a6ed807d0ea ]
    
    The user can change the device_name with the IMSETDEVNAME ioctl, but we
    need to ensure that the user's name is NUL terminated.  Otherwise it
    could result in a buffer overflow when we copy the name back to the user
    with IMGETDEVINFO ioctl.
    
    I also changed two strcpy() calls which handle the name to strscpy().
    Hopefully, there aren't any other ways to create a too long name, but
    it's nice to do this as a kernel hardening measure.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b11278eb5a231cc4b2109170e5ec4e69e43ed3a0
Author: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
Date:   Wed May 15 12:14:04 2019 +0530

    selftests: netfilter: missing error check when setting up veth interface
    
    [ Upstream commit 82ce6eb1dd13fd12e449b2ee2c2ec051e6f52c43 ]
    
    A test for the basic NAT functionality uses ip command which needs veth
    device. There is a condition where the kernel support for veth is not
    compiled into the kernel and the test script breaks. This patch contains
    code for reasonable error display and correct code exit.
    
    Signed-off-by: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20850f886496ba496ea6687e8517d194f2e5b01e
Author: Stephane Eranian <eranian@google.com>
Date:   Mon May 20 17:52:46 2019 -0700

    perf/x86/intel/ds: Fix EVENT vs. UEVENT PEBS constraints
    
    [ Upstream commit 23e3983a466cd540ffdd2bbc6e0c51e31934f941 ]
    
    This patch fixes an bug revealed by the following commit:
    
      6b89d4c1ae85 ("perf/x86/intel: Fix INTEL_FLAGS_EVENT_CONSTRAINT* masking")
    
    That patch modified INTEL_FLAGS_EVENT_CONSTRAINT() to only look at the event code
    when matching a constraint. If code+umask were needed, then the
    INTEL_FLAGS_UEVENT_CONSTRAINT() macro was needed instead.
    This broke with some of the constraints for PEBS events.
    
    Several of them, including the one used for cycles:p, cycles:pp, cycles:ppp
    fell in that category and caused the event to be rejected in PEBS mode.
    In other words, on some platforms a cmdline such as:
    
      $ perf top -e cycles:pp
    
    would fail with -EINVAL.
    
    This patch fixes this bug by properly using INTEL_FLAGS_UEVENT_CONSTRAINT()
    when needed in the PEBS constraint tables.
    
    Reported-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Stephane Eranian <eranian@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: kan.liang@intel.com
    Link: http://lkml.kernel.org/r/20190521005246.423-1-eranian@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d8d4137ccb1bf16f57cb26ee4e5c5368310758b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 19 19:15:29 2019 +0200

    Revert "staging: vc04_services: prevent integer overflow in create_pagelist()"
    
    This reverts commit cf07331c8827c9e9e0b4274c9b60204c18592241 which was
    commit ca641bae6da977d638458e78cd1487b6160a2718 upstream.
    
    Martin writes:
            This commit breaks the kernel build because the vchiq_pagelist_info
            struct is not defined in v4.9.182.
    
            It was only added in v4.10, in commit
            4807f2c0e684e907c501cb96049809d7a957dbc2.
    
    Reported-by: Martin Weinelt <martin@linuxlounge.net>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce8bda09f597f964536c38392087702d8c9b451e
Author: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
Date:   Tue Jun 11 17:38:37 2019 +0200

    sunhv: Fix device naming inconsistency between sunhv_console and sunhv_reg
    
    [ Upstream commit 07a6d63eb1b54b5fb38092780fe618dfe1d96e23 ]
    
    In d5a2aa24, the name in struct console sunhv_console was changed from "ttyS"
    to "ttyHV" while the name in struct uart_ops sunhv_pops remained unchanged.
    
    This results in the hypervisor console device to be listed as "ttyHV0" under
    /proc/consoles while the device node is still named "ttyS0":
    
    root@osaka:~# cat /proc/consoles
    ttyHV0               -W- (EC p  )    4:64
    tty0                 -WU (E     )    4:1
    root@osaka:~# readlink /sys/dev/char/4:64
    ../../devices/root/f02836f0/f0285690/tty/ttyS0
    root@osaka:~#
    
    This means that any userland code which tries to determine the name of the
    device file of the hypervisor console device can not rely on the information
    provided by /proc/consoles. In particular, booting current versions of debian-
    installer inside a SPARC LDOM will fail with the installer unable to determine
    the console device.
    
    After renaming the device in struct uart_ops sunhv_pops to "ttyHV" as well,
    the inconsistency is fixed and it is possible again to determine the name
    of the device file of the hypervisor console device by reading the contents
    of /proc/console:
    
    root@osaka:~# cat /proc/consoles
    ttyHV0               -W- (EC p  )    4:64
    tty0                 -WU (E     )    4:1
    root@osaka:~# readlink /sys/dev/char/4:64
    ../../devices/root/f02836f0/f0285690/tty/ttyHV0
    root@osaka:~#
    
    With this change, debian-installer works correctly when installing inside
    a SPARC LDOM.
    
    Signed-off-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c55ce1da3d25c851b878af036ac804a36a03061a
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jun 15 16:28:48 2019 -0700

    neigh: fix use-after-free read in pneigh_get_next
    
    [ Upstream commit f3e92cb8e2eb8c27d109e6fd73d3a69a8c09e288 ]
    
    Nine years ago, I added RCU handling to neighbours, not pneighbours.
    (pneigh are not commonly used)
    
    Unfortunately I missed that /proc dump operations would use a
    common entry and exit point : neigh_seq_start() and neigh_seq_stop()
    
    We need to read_lock(tbl->lock) or risk use-after-free while
    iterating the pneigh structures.
    
    We might later convert pneigh to RCU and revert this patch.
    
    sysbot reported :
    
    BUG: KASAN: use-after-free in pneigh_get_next.isra.0+0x24b/0x280 net/core/neighbour.c:3158
    Read of size 8 at addr ffff888097f2a700 by task syz-executor.0/9825
    
    CPU: 1 PID: 9825 Comm: syz-executor.0 Not tainted 5.2.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     pneigh_get_next.isra.0+0x24b/0x280 net/core/neighbour.c:3158
     neigh_seq_next+0xdb/0x210 net/core/neighbour.c:3240
     seq_read+0x9cf/0x1110 fs/seq_file.c:258
     proc_reg_read+0x1fc/0x2c0 fs/proc/inode.c:221
     do_loop_readv_writev fs/read_write.c:714 [inline]
     do_loop_readv_writev fs/read_write.c:701 [inline]
     do_iter_read+0x4a4/0x660 fs/read_write.c:935
     vfs_readv+0xf0/0x160 fs/read_write.c:997
     kernel_readv fs/splice.c:359 [inline]
     default_file_splice_read+0x475/0x890 fs/splice.c:414
     do_splice_to+0x127/0x180 fs/splice.c:877
     splice_direct_to_actor+0x2d2/0x970 fs/splice.c:954
     do_splice_direct+0x1da/0x2a0 fs/splice.c:1063
     do_sendfile+0x597/0xd00 fs/read_write.c:1464
     __do_sys_sendfile64 fs/read_write.c:1525 [inline]
     __se_sys_sendfile64 fs/read_write.c:1511 [inline]
     __x64_sys_sendfile64+0x1dd/0x220 fs/read_write.c:1511
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4592c9
    Code: fd b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f4aab51dc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000028
    RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 00000000004592c9
    RDX: 0000000000000000 RSI: 0000000000000004 RDI: 0000000000000005
    RBP: 000000000075bf20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000246 R12: 00007f4aab51e6d4
    R13: 00000000004c689d R14: 00000000004db828 R15: 00000000ffffffff
    
    Allocated by task 9827:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:503
     __do_kmalloc mm/slab.c:3660 [inline]
     __kmalloc+0x15c/0x740 mm/slab.c:3669
     kmalloc include/linux/slab.h:552 [inline]
     pneigh_lookup+0x19c/0x4a0 net/core/neighbour.c:731
     arp_req_set_public net/ipv4/arp.c:1010 [inline]
     arp_req_set+0x613/0x720 net/ipv4/arp.c:1026
     arp_ioctl+0x652/0x7f0 net/ipv4/arp.c:1226
     inet_ioctl+0x2a0/0x340 net/ipv4/af_inet.c:926
     sock_do_ioctl+0xd8/0x2f0 net/socket.c:1043
     sock_ioctl+0x3ed/0x780 net/socket.c:1194
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0xd5f/0x1380 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 9824:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3432 [inline]
     kfree+0xcf/0x220 mm/slab.c:3755
     pneigh_ifdown_and_unlock net/core/neighbour.c:812 [inline]
     __neigh_ifdown+0x236/0x2f0 net/core/neighbour.c:356
     neigh_ifdown+0x20/0x30 net/core/neighbour.c:372
     arp_ifdown+0x1d/0x21 net/ipv4/arp.c:1274
     inetdev_destroy net/ipv4/devinet.c:319 [inline]
     inetdev_event+0xa14/0x11f0 net/ipv4/devinet.c:1544
     notifier_call_chain+0xc2/0x230 kernel/notifier.c:95
     __raw_notifier_call_chain kernel/notifier.c:396 [inline]
     raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:403
     call_netdevice_notifiers_info+0x3f/0x90 net/core/dev.c:1749
     call_netdevice_notifiers_extack net/core/dev.c:1761 [inline]
     call_netdevice_notifiers net/core/dev.c:1775 [inline]
     rollback_registered_many+0x9b9/0xfc0 net/core/dev.c:8178
     rollback_registered+0x109/0x1d0 net/core/dev.c:8220
     unregister_netdevice_queue net/core/dev.c:9267 [inline]
     unregister_netdevice_queue+0x1ee/0x2c0 net/core/dev.c:9260
     unregister_netdevice include/linux/netdevice.h:2631 [inline]
     __tun_detach+0xd8a/0x1040 drivers/net/tun.c:724
     tun_detach drivers/net/tun.c:741 [inline]
     tun_chr_close+0xe0/0x180 drivers/net/tun.c:3451
     __fput+0x2ff/0x890 fs/file_table.c:280
     ____fput+0x16/0x20 fs/file_table.c:313
     task_work_run+0x145/0x1c0 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:185 [inline]
     exit_to_usermode_loop+0x273/0x2c0 arch/x86/entry/common.c:168
     prepare_exit_to_usermode arch/x86/entry/common.c:199 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:279 [inline]
     do_syscall_64+0x58e/0x680 arch/x86/entry/common.c:304
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff888097f2a700
     which belongs to the cache kmalloc-64 of size 64
    The buggy address is located 0 bytes inside of
     64-byte region [ffff888097f2a700, ffff888097f2a740)
    The buggy address belongs to the page:
    page:ffffea00025fca80 refcount:1 mapcount:0 mapping:ffff8880aa400340 index:0x0
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea000250d548 ffffea00025726c8 ffff8880aa400340
    raw: 0000000000000000 ffff888097f2a000 0000000100000020 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888097f2a600: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
     ffff888097f2a680: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    >ffff888097f2a700: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
                       ^
     ffff888097f2a780: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff888097f2a800: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    
    Fixes: 767e97e1e0db ("neigh: RCU conversion of struct neighbour")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c77a1c6f6c2a69a42a24423d889bc8e662b97db
Author: Jeremy Sowden <jeremy@azazel.net>
Date:   Sun Jun 16 16:54:37 2019 +0100

    lapb: fixed leak of control-blocks.
    
    [ Upstream commit 6be8e297f9bcea666ea85ac7a6cd9d52d6deaf92 ]
    
    lapb_register calls lapb_create_cb, which initializes the control-
    block's ref-count to one, and __lapb_insert_cb, which increments it when
    adding the new block to the list of blocks.
    
    lapb_unregister calls __lapb_remove_cb, which decrements the ref-count
    when removing control-block from the list of blocks, and calls lapb_put
    itself to decrement the ref-count before returning.
    
    However, lapb_unregister also calls __lapb_devtostruct to look up the
    right control-block for the given net_device, and __lapb_devtostruct
    also bumps the ref-count, which means that when lapb_unregister returns
    the ref-count is still 1 and the control-block is leaked.
    
    Call lapb_put after __lapb_devtostruct to fix leak.
    
    Reported-by: syzbot+afb980676c836b4a0afa@syzkaller.appspotmail.com
    Signed-off-by: Jeremy Sowden <jeremy@azazel.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90612f877ef40b86f6aa516827f6e7e1b41a99b2
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jun 6 14:32:34 2019 -0700

    ipv6: flowlabel: fl6_sock_lookup() must use atomic_inc_not_zero
    
    [ Upstream commit 65a3c497c0e965a552008db8bc2653f62bc925a1 ]
    
    Before taking a refcount, make sure the object is not already
    scheduled for deletion.
    
    Same fix is needed in ipv6_flowlabel_opt()
    
    Fixes: 18367681a10b ("ipv6 flowlabel: Convert np->ipv6_fl_list to RCU.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6ac0cec5b03cdba63850ec384161212123bd3ce
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Fri Jun 14 17:48:36 2019 +0200

    be2net: Fix number of Rx queues used for flow hashing
    
    [ Upstream commit 718f4a2537089ea41903bf357071306163bc7c04 ]
    
    Number of Rx queues used for flow hashing returned by the driver is
    incorrect and this bug prevents user to use the last Rx queue in
    indirection table.
    
    Let's say we have a NIC with 6 combined queues:
    
    [root@sm-03 ~]# ethtool -l enp4s0f0
    Channel parameters for enp4s0f0:
    Pre-set maximums:
    RX:             5
    TX:             5
    Other:          0
    Combined:       6
    Current hardware settings:
    RX:             0
    TX:             0
    Other:          0
    Combined:       6
    
    Default indirection table maps all (6) queues equally but the driver
    reports only 5 rings available.
    
    [root@sm-03 ~]# ethtool -x enp4s0f0
    RX flow hash indirection table for enp4s0f0 with 5 RX ring(s):
        0:      0     1     2     3     4     5     0     1
        8:      2     3     4     5     0     1     2     3
       16:      4     5     0     1     2     3     4     5
       24:      0     1     2     3     4     5     0     1
    ...
    
    Now change indirection table somehow:
    
    [root@sm-03 ~]# ethtool -X enp4s0f0 weight 1 1
    [root@sm-03 ~]# ethtool -x enp4s0f0
    RX flow hash indirection table for enp4s0f0 with 6 RX ring(s):
        0:      0     0     0     0     0     0     0     0
    ...
       64:      1     1     1     1     1     1     1     1
    ...
    
    Now it is not possible to change mapping back to equal (default) state:
    
    [root@sm-03 ~]# ethtool -X enp4s0f0 equal 6
    Cannot set RX flow hash configuration: Invalid argument
    
    Fixes: 594ad54a2c3b ("be2net: Add support for setting and getting rx flow hash options")
    Reported-by: Tianhao <tizhao@redhat.com>
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e219236342f4645dfdedf541fdd7a8cce6ec94c7
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jun 15 16:40:52 2019 -0700

    ax25: fix inconsistent lock state in ax25_destroy_timer
    
    [ Upstream commit d4d5d8e83c9616aeef28a2869cea49cc3fb35526 ]
    
    Before thread in process context uses bh_lock_sock()
    we must disable bh.
    
    sysbot reported :
    
    WARNING: inconsistent lock state
    5.2.0-rc3+ #32 Not tainted
    
    inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    blkid/26581 [HC0[0]:SC1[1]:HE1:SE0] takes:
    00000000e0da85ee (slock-AF_AX25){+.?.}, at: spin_lock include/linux/spinlock.h:338 [inline]
    00000000e0da85ee (slock-AF_AX25){+.?.}, at: ax25_destroy_timer+0x53/0xc0 net/ax25/af_ax25.c:275
    {SOFTIRQ-ON-W} state was registered at:
      lock_acquire+0x16f/0x3f0 kernel/locking/lockdep.c:4303
      __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
      _raw_spin_lock+0x2f/0x40 kernel/locking/spinlock.c:151
      spin_lock include/linux/spinlock.h:338 [inline]
      ax25_rt_autobind+0x3ca/0x720 net/ax25/ax25_route.c:429
      ax25_connect.cold+0x30/0xa4 net/ax25/af_ax25.c:1221
      __sys_connect+0x264/0x330 net/socket.c:1834
      __do_sys_connect net/socket.c:1845 [inline]
      __se_sys_connect net/socket.c:1842 [inline]
      __x64_sys_connect+0x73/0xb0 net/socket.c:1842
      do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    irq event stamp: 2272
    hardirqs last  enabled at (2272): [<ffffffff810065f3>] trace_hardirqs_on_thunk+0x1a/0x1c
    hardirqs last disabled at (2271): [<ffffffff8100660f>] trace_hardirqs_off_thunk+0x1a/0x1c
    softirqs last  enabled at (1522): [<ffffffff87400654>] __do_softirq+0x654/0x94c kernel/softirq.c:320
    softirqs last disabled at (2267): [<ffffffff81449010>] invoke_softirq kernel/softirq.c:374 [inline]
    softirqs last disabled at (2267): [<ffffffff81449010>] irq_exit+0x180/0x1d0 kernel/softirq.c:414
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(slock-AF_AX25);
      <Interrupt>
        lock(slock-AF_AX25);
    
     *** DEADLOCK ***
    
    1 lock held by blkid/26581:
     #0: 0000000010fd154d ((&ax25->dtimer)){+.-.}, at: lockdep_copy_map include/linux/lockdep.h:175 [inline]
     #0: 0000000010fd154d ((&ax25->dtimer)){+.-.}, at: call_timer_fn+0xe0/0x720 kernel/time/timer.c:1312
    
    stack backtrace:
    CPU: 1 PID: 26581 Comm: blkid Not tainted 5.2.0-rc3+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_usage_bug.cold+0x393/0x4a2 kernel/locking/lockdep.c:2935
     valid_state kernel/locking/lockdep.c:2948 [inline]
     mark_lock_irq kernel/locking/lockdep.c:3138 [inline]
     mark_lock+0xd46/0x1370 kernel/locking/lockdep.c:3513
     mark_irqflags kernel/locking/lockdep.c:3391 [inline]
     __lock_acquire+0x159f/0x5490 kernel/locking/lockdep.c:3745
     lock_acquire+0x16f/0x3f0 kernel/locking/lockdep.c:4303
     __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
     _raw_spin_lock+0x2f/0x40 kernel/locking/spinlock.c:151
     spin_lock include/linux/spinlock.h:338 [inline]
     ax25_destroy_timer+0x53/0xc0 net/ax25/af_ax25.c:275
     call_timer_fn+0x193/0x720 kernel/time/timer.c:1322
     expire_timers kernel/time/timer.c:1366 [inline]
     __run_timers kernel/time/timer.c:1685 [inline]
     __run_timers kernel/time/timer.c:1653 [inline]
     run_timer_softirq+0x66f/0x1740 kernel/time/timer.c:1698
     __do_softirq+0x25c/0x94c kernel/softirq.c:293
     invoke_softirq kernel/softirq.c:374 [inline]
     irq_exit+0x180/0x1d0 kernel/softirq.c:414
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x13b/0x550 arch/x86/kernel/apic/apic.c:1068
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:806
     </IRQ>
    RIP: 0033:0x7f858d5c3232
    Code: 8b 61 08 48 8b 84 24 d8 00 00 00 4c 89 44 24 28 48 8b ac 24 d0 00 00 00 4c 8b b4 24 e8 00 00 00 48 89 7c 24 68 48 89 4c 24 78 <48> 89 44 24 58 8b 84 24 e0 00 00 00 89 84 24 84 00 00 00 8b 84 24
    RSP: 002b:00007ffcaf0cf5c0 EFLAGS: 00000206 ORIG_RAX: ffffffffffffff13
    RAX: 00007f858d7d27a8 RBX: 00007f858d7d8820 RCX: 00007f858d3940d8
    RDX: 00007ffcaf0cf798 RSI: 00000000f5e616f3 RDI: 00007f858d394fee
    RBP: 0000000000000000 R08: 00007ffcaf0cf780 R09: 00007f858d7db480
    R10: 0000000000000000 R11: 0000000009691a75 R12: 0000000000000005
    R13: 00000000f5e616f3 R14: 0000000000000000 R15: 00007ffcaf0cf798
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2eaaeb34fb17d3964b85febf1b7cf3b2eec947e1
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Wed Dec 5 17:00:09 2018 +0200

    rtc: pcf8523: don't return invalid date when battery is low
    
    commit ecb4a353d3afd45b9bb30c85d03ee113a0589079 upstream.
    
    The RTC_VL_READ ioctl reports the low battery condition. Still,
    pcf8523_rtc_read_time() happily returns invalid dates in this case.
    Check the battery health on pcf8523_rtc_read_time() to avoid that.
    
    Reported-by: Erik Čuk <erik.cuk@domel.com>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e528bed1c6e766dd97032cfc8d10260c9bda4d4
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Wed May 15 17:27:49 2019 +0200

    USB: serial: option: add Telit 0x1260 and 0x1261 compositions
    
    commit f3dfd4072c3ee6e287f501a18b5718b185d6a940 upstream.
    
    Added support for Telit LE910Cx 0x1260 and 0x1261 compositions.
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88b6e9c52762149b6fd9852c64e6d944878b3faf
Author: Jörgen Storvist <jorgen.storvist@gmail.com>
Date:   Mon May 13 18:37:52 2019 +0200

    USB: serial: option: add support for Simcom SIM7500/SIM7600 RNDIS mode
    
    commit 5417a7e482962952e622eabd60cd3600dd65dedf upstream.
    
    Added IDs for Simcom SIM7500/SIM7600 series cellular module in RNDIS
    mode. Reserved the interface for ADB.
    
    T:  Bus=03 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  7 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=1e0e ProdID=9011 Rev=03.18
    S:  Manufacturer=SimTech, Incorporated
    S:  Product=SimTech, Incorporated
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 8 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=02 Prot=ff Driver=rndis_host
    I:  If#=0x1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    I:  If#=0x2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x6 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x7 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    Signed-off-by: Jörgen Storvist <jorgen.storvist@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a771124200b3e8ceefed20e9e54820652ed4376
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Tue May 14 17:35:42 2019 +1200

    USB: serial: pl2303: add Allied Telesis VT-Kit3
    
    commit c5f81656a18b271976a86724dadd8344e54de74e upstream.
    
    This is adds the vendor and device id for the AT-VT-Kit3 which is a
    pl2303-based device.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dece7534de60570c91e0c2d6cba04a1d7dbeb180
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Jun 4 00:20:49 2019 +0800

    USB: usb-storage: Add new ID to ums-realtek
    
    commit 1a6dd3fea131276a4fc44ae77b0f471b0b473577 upstream.
    
    There is one more Realtek card reader requires ums-realtek to work
    correctly.
    
    Add the device ID to support it.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1a0ee5e723e076460a30139ce5d5030261b7c0a
Author: Marco Zatta <marco@zatta.me>
Date:   Sat Jun 1 09:52:57 2019 +0200

    USB: Fix chipmunk-like voice when using Logitech C270 for recording audio.
    
    commit bd21f0222adab64974b7d1b4b8c7ce6b23e9ea4d upstream.
    
    This patch fixes the chipmunk-like voice that manifets randomly when
    using the integrated mic of the Logitech Webcam HD C270.
    
    The issue was solved initially for this device by commit 2394d67e446b
    ("USB: add RESET_RESUME for webcams shown to be quirky") but it was then
    reintroduced by e387ef5c47dd ("usb: Add USB_QUIRK_RESET_RESUME for all
    Logitech UVC webcams"). This patch is to have the fix back.
    
    Signed-off-by: Marco Zatta <marco@zatta.me>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d67e5668f1620475ef9d008a22f27350bef021c
Author: Martin Schiller <ms@dev.tdt.de>
Date:   Mon Feb 18 07:37:30 2019 +0100

    usb: dwc2: Fix DMA cache alignment issues
    
    commit 4a4863bf2e7932e584a3a462d3c6daf891142ddc upstream.
    
    Insert a padding between data and the stored_xfer_buffer pointer to
    ensure they are not on the same cache line.
    
    Otherwise, the stored_xfer_buffer gets corrupted for IN URBs on
    non-cache-coherent systems. (In my case: Lantiq xRX200 MIPS)
    
    Fixes: 3bc04e28a030 ("usb: dwc2: host: Get aligned DMA in a more supported way")
    Fixes: 56406e017a88 ("usb: dwc2: Fix DMA alignment to start at allocated boundary")
    Cc: <stable@vger.kernel.org>
    Tested-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36796bd8999aac9c83a8c9f7d3411a34a0768dd6
Author: Murray McAllister <murray.mcallister@gmail.com>
Date:   Sat May 11 18:01:37 2019 +1200

    drm/vmwgfx: NULL pointer dereference from vmw_cmd_dx_view_define()
    
    commit bcd6aa7b6cbfd6f985f606c6f76046d782905820 upstream.
    
    If SVGA_3D_CMD_DX_DEFINE_RENDERTARGET_VIEW is called with a surface
    ID of SVGA3D_INVALID_ID, the srf struct will remain NULL after
    vmw_cmd_res_check(), leading to a null pointer dereference in
    vmw_view_add().
    
    Cc: <stable@vger.kernel.org>
    Fixes: d80efd5cb3de ("drm/vmwgfx: Initial DX support")
    Signed-off-by: Murray McAllister <murray.mcallister@gmail.com>
    Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a47f9e9eccaec7110291ea993eccf9c8704275fb
Author: Murray McAllister <murray.mcallister@gmail.com>
Date:   Mon May 20 21:57:34 2019 +1200

    drm/vmwgfx: integer underflow in vmw_cmd_dx_set_shader() leading to an invalid read
    
    commit 5ed7f4b5eca11c3c69e7c8b53e4321812bc1ee1e upstream.
    
    If SVGA_3D_CMD_DX_SET_SHADER is called with a shader ID
    of SVGA3D_INVALID_ID, and a shader type of
    SVGA3D_SHADERTYPE_INVALID, the calculated binding.shader_slot
    will be 4294967295, leading to an out-of-bounds read in vmw_binding_loc()
    when the offset is calculated.
    
    Cc: <stable@vger.kernel.org>
    Fixes: d80efd5cb3de ("drm/vmwgfx: Initial DX support")
    Signed-off-by: Murray McAllister <murray.mcallister@gmail.com>
    Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c867a67ca6473235b7e114ff2367f69d5c3a62bb
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri May 24 16:06:23 2019 +0200

    KVM: s390: fix memory slot handling for KVM_SET_USER_MEMORY_REGION
    
    [ Upstream commit 19ec166c3f39fe1d3789888a74cc95544ac266d4 ]
    
    kselftests exposed a problem in the s390 handling for memory slots.
    Right now we only do proper memory slot handling for creation of new
    memory slots. Neither MOVE, nor DELETION are handled properly. Let us
    implement those.
    
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 438f4dc0a11995bf790c7c00fec9fd9f06cc33f0
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 20 17:34:30 2019 +0200

    KVM: x86/pmu: do not mask the value that is written to fixed PMUs
    
    [ Upstream commit 2924b52117b2812e9633d5ea337333299166d373 ]
    
    According to the SDM, for MSR_IA32_PERFCTR0/1 "the lower-order 32 bits of
    each MSR may be written with any value, and the high-order 8 bits are
    sign-extended according to the value of bit 31", but the fixed counters
    in real hardware are limited to the width of the fixed counters ("bits
    beyond the width of the fixed-function counter are reserved and must be
    written as zeros").  Fix KVM to do the same.
    
    Reported-by: Nadav Amit <nadav.amit@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a667fc6f22deec640cb32a98ded51d27d811d38f
Author: Bernd Eckstein <3erndeckstein@gmail.com>
Date:   Mon May 20 17:31:09 2019 +0200

    usbnet: ipheth: fix racing condition
    
    [ Upstream commit 94d250fae48e6f873d8362308f5c4d02cd1b1fd2 ]
    
    Fix a racing condition in ipheth.c that can lead to slow performance.
    
    Bug: In ipheth_tx(), netif_wake_queue() may be called on the callback
    ipheth_sndbulk_callback(), _before_ netif_stop_queue() is called.
    When this happens, the queue is stopped longer than it needs to be,
    thus reducing network performance.
    
    Fix: Move netif_stop_queue() in front of usb_submit_urb(). Now the order
    is always correct. In case, usb_submit_urb() fails, the queue is woken up
    again as callback will not fire.
    
    Testing: This racing condition is usually not noticeable, as it has to
    occur very frequently to slowdown the network. The callback from the USB
    is usually triggered slow enough, so the situation does not appear.
    However, on a Ubuntu Linux on VMWare Workstation, running on Windows 10,
    the we loose the race quite often and the following speedup can be noticed:
    
    Without this patch: Download:  4.10 Mbit/s, Upload:  4.01 Mbit/s
    With this patch:    Download: 36.23 Mbit/s, Upload: 17.61 Mbit/s
    
    Signed-off-by: Oliver Zweigle <Oliver.Zweigle@faro.com>
    Signed-off-by: Bernd Eckstein <3ernd.Eckstein@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c3e2d74d3ff4b03d0a0f6843cb1ace40b64bda8
Author: Kees Cook <keescook@chromium.org>
Date:   Mon May 20 15:37:49 2019 -0700

    selftests/timers: Add missing fflush(stdout) calls
    
    [ Upstream commit fe48319243a626c860fd666ca032daacc2ba84a5 ]
    
    When running under a pipe, some timer tests would not report output in
    real-time because stdout flushes were missing after printf()s that lacked
    a newline. This adds them to restore real-time status output that humans
    can enjoy.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d9ab8b1865478709df3f390e321e81471d9e483
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sat May 4 17:48:29 2019 +0100

    scsi: bnx2fc: fix incorrect cast to u64 on shift operation
    
    [ Upstream commit d0c0d902339249c75da85fd9257a86cbb98dfaa5 ]
    
    Currently an int is being shifted and the result is being cast to a u64
    which leads to undefined behaviour if the shift is more than 31 bits. Fix
    this by casting the integer value 1 to u64 before the shift operation.
    
    Addresses-Coverity: ("Bad shift operation")
    Fixes: 7b594769120b ("[SCSI] bnx2fc: Handle REC_TOV error code from firmware")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Saurav Kashyap <skashyap@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3acca2a1cbdfcc6064551b9502fe62be7cc23b6b
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue May 14 14:30:06 2019 +0530

    arm64/mm: Inhibit huge-vmap with ptdump
    
    [ Upstream commit 7ba36eccb3f83983a651efd570b4f933ecad1b5c ]
    
    The arm64 ptdump code can race with concurrent modification of the
    kernel page tables. At the time this was added, this was sound as:
    
    * Modifications to leaf entries could result in stale information being
      logged, but would not result in a functional problem.
    
    * Boot time modifications to non-leaf entries (e.g. freeing of initmem)
      were performed when the ptdump code cannot be invoked.
    
    * At runtime, modifications to non-leaf entries only occurred in the
      vmalloc region, and these were strictly additive, as intermediate
      entries were never freed.
    
    However, since commit:
    
      commit 324420bf91f6 ("arm64: add support for ioremap() block mappings")
    
    ... it has been possible to create huge mappings in the vmalloc area at
    runtime, and as part of this existing intermediate levels of table my be
    removed and freed.
    
    It's possible for the ptdump code to race with this, and continue to
    walk tables which have been freed (and potentially poisoned or
    reallocated). As a result of this, the ptdump code may dereference bogus
    addresses, which could be fatal.
    
    Since huge-vmap is a TLB and memory optimization, we can disable it when
    the runtime ptdump code is in use to avoid this problem.
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Fixes: 324420bf91f60582 ("arm64: add support for ioremap() block mappings")
    Acked-by: Ard Biesheuvel <ard.biesheuvel@arm.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eb60cfbd65bf82b43e6bf19aa1edb02503c343d
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon May 6 17:26:49 2019 -0700

    scsi: lpfc: add check for loss of ndlp when sending RRQ
    
    [ Upstream commit c8cb261a072c88ca1aff0e804a30db4c7606521b ]
    
    There was a missing qualification of a valid ndlp structure when calling to
    send an RRQ for an abort.  Add the check.
    
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Tested-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32f99125fe6227128ec4e8996884db74b9dc3062
Author: Young Xiao <YangX92@hotmail.com>
Date:   Fri Apr 12 15:45:06 2019 +0800

    Drivers: misc: fix out-of-bounds access in function param_set_kgdbts_var
    
    [ Upstream commit b281218ad4311a0342a40cb02fb17a363df08b48 ]
    
    There is an out-of-bounds access to "config[len - 1]" array when the
    variable "len" is zero.
    
    See commit dada6a43b040 ("kgdboc: fix KASAN global-out-of-bounds bug
    in param_set_kgdboc_var()") for details.
    
    Signed-off-by: Young Xiao <YangX92@hotmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 881a09fbbe957eaff923270a17b15d20a852589b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Apr 11 19:58:32 2019 +0200

    Revert "ALSA: seq: Protect in-kernel ioctl calls with mutex"
    
    [ Upstream commit f0654ba94e33699b295ce4f3dc73094db6209035 ]
    
    This reverts commit feb689025fbb6f0aa6297d3ddf97de945ea4ad32.
    
    The fix attempt was incorrect, leading to the mutex deadlock through
    the close of OSS sequencer client.  The proper fix needs more
    consideration, so let's revert it now.
    
    Fixes: feb689025fbb ("ALSA: seq: Protect in-kernel ioctl calls with mutex")
    Reported-by: syzbot+47ded6c0f23016cde310@syzkaller.appspotmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8763ac70dd9f701380e87d527e63877229b9beda
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 9 18:04:17 2019 +0200

    ALSA: seq: Fix race of get-subscription call vs port-delete ioctls
    
    [ Upstream commit 2eabc5ec8ab4d4748a82050dfcb994119b983750 ]
    
    The snd_seq_ioctl_get_subscription() retrieves the port subscriber
    information as a pointer, while the object isn't protected, hence it
    may be deleted before the actual reference.  This race was spotted by
    syzkaller and may lead to a UAF.
    
    The fix is simply copying the data in the lookup function that
    performs in the rwsem to protect against the deletion.
    
    Reported-by: syzbot+9437020c82413d00222d@syzkaller.appspotmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcdbccdcbb13212f3cf6557db6c49a4782cbf5d2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 9 17:35:22 2019 +0200

    ALSA: seq: Protect in-kernel ioctl calls with mutex
    
    [ Upstream commit feb689025fbb6f0aa6297d3ddf97de945ea4ad32 ]
    
    ALSA OSS sequencer calls the ioctl function indirectly via
    snd_seq_kernel_client_ctl().  While we already applied the protection
    against races between the normal ioctls and writes via the client's
    ioctl_mutex, this code path was left untouched.  And this seems to be
    the cause of still remaining some rare UAF as spontaneously triggered
    by syzkaller.
    
    For the sake of robustness, wrap the ioctl_mutex also for the call via
    snd_seq_kernel_client_ctl(), too.
    
    Reported-by: syzbot+e4c8abb920efa77bace9@syzkaller.appspotmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9eb92de722ce8e2073ef4fb07484aab439c22da
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Mar 7 19:54:25 2019 +0100

    x86/uaccess, kcov: Disable stack protector
    
    [ Upstream commit 40ea97290b08be2e038b31cbb33097d1145e8169 ]
    
    New tooling noticed this mishap:
    
      kernel/kcov.o: warning: objtool: write_comp_data()+0x138: call to __stack_chk_fail() with UACCESS enabled
      kernel/kcov.o: warning: objtool: __sanitizer_cov_trace_pc()+0xd9: call to __stack_chk_fail() with UACCESS enabled
    
    All the other instrumentation (KASAN,UBSAN) also have stack protector
    disabled.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14f12a7280d58de6904d6680e7d1f73eb6c3cf28
Author: S.j. Wang <shengjiu.wang@nxp.com>
Date:   Wed May 15 06:42:18 2019 +0000

    ASoC: fsl_asrc: Fix the issue about unsupported rate
    
    commit b06c58c2a1eed571ea2a6640fdb85b7b00196b1e upstream.
    
    When the output sample rate is [8kHz, 30kHz], the limitation
    of the supported ratio range is [1/24, 8]. In the driver
    we use (8kHz, 30kHz) instead of [8kHz, 30kHz].
    So this patch is to fix this issue and the potential rounding
    issue with divider.
    
    Fixes: fff6e03c7b65 ("ASoC: fsl_asrc: add support for 8-30kHz
    output sample rate")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Acked-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a95c142f86422ac13a6be373425f948432ccb7d
Author: S.j. Wang <shengjiu.wang@nxp.com>
Date:   Thu May 16 06:04:29 2019 +0000

    ASoC: cs42xx8: Add regcache mask dirty
    
    commit ad6eecbfc01c987e0253371f274c3872042e4350 upstream.
    
    Add regcache_mark_dirty before regcache_sync for power
    of codec may be lost at suspend, then all the register
    need to be reconfigured.
    
    Fixes: 0c516b4ff85c ("ASoC: cs42xx8: Add codec driver
    support for CS42448/CS42888")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df260f7a037164aa1a617bb9728a7a6c44117e9e
Author: Tejun Heo <tj@kernel.org>
Date:   Wed May 29 13:46:25 2019 -0700

    cgroup: Use css_tryget() instead of css_tryget_online() in task_get_css()
    
    commit 18fa84a2db0e15b02baa5d94bdb5bd509175d2f6 upstream.
    
    A PF_EXITING task can stay associated with an offline css.  If such
    task calls task_get_css(), it can get stuck indefinitely.  This can be
    triggered by BSD process accounting which writes to a file with
    PF_EXITING set when racing against memcg disable as in the backtrace
    at the end.
    
    After this change, task_get_css() may return a css which was already
    offline when the function was called.  None of the existing users are
    affected by this change.
    
      INFO: rcu_sched self-detected stall on CPU
      INFO: rcu_sched detected stalls on CPUs/tasks:
      ...
      NMI backtrace for cpu 0
      ...
      Call Trace:
       <IRQ>
       dump_stack+0x46/0x68
       nmi_cpu_backtrace.cold.2+0x13/0x57
       nmi_trigger_cpumask_backtrace+0xba/0xca
       rcu_dump_cpu_stacks+0x9e/0xce
       rcu_check_callbacks.cold.74+0x2af/0x433
       update_process_times+0x28/0x60
       tick_sched_timer+0x34/0x70
       __hrtimer_run_queues+0xee/0x250
       hrtimer_interrupt+0xf4/0x210
       smp_apic_timer_interrupt+0x56/0x110
       apic_timer_interrupt+0xf/0x20
       </IRQ>
      RIP: 0010:balance_dirty_pages_ratelimited+0x28f/0x3d0
      ...
       btrfs_file_write_iter+0x31b/0x563
       __vfs_write+0xfa/0x140
       __kernel_write+0x4f/0x100
       do_acct_process+0x495/0x580
       acct_process+0xb9/0xdb
       do_exit+0x748/0xa00
       do_group_exit+0x3a/0xa0
       get_signal+0x254/0x560
       do_signal+0x23/0x5c0
       exit_to_usermode_loop+0x5d/0xa0
       prepare_exit_to_usermode+0x53/0x80
       retint_user+0x8/0x8
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: stable@vger.kernel.org # v4.2+
    Fixes: ec438699a9ae ("cgroup, block: implement task_get_css() and use it in bio_associate_current()")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cf6bb23ac29912ff0bbb2c1ecc6dae37a8056d7
Author: Coly Li <colyli@suse.de>
Date:   Mon Jun 10 06:13:34 2019 +0800

    bcache: fix stack corruption by PRECEDING_KEY()
    
    commit 31b90956b124240aa8c63250243ae1a53585c5e2 upstream.
    
    Recently people report bcache code compiled with gcc9 is broken, one of
    the buggy behavior I observe is that two adjacent 4KB I/Os should merge
    into one but they don't. Finally it turns out to be a stack corruption
    caused by macro PRECEDING_KEY().
    
    See how PRECEDING_KEY() is defined in bset.h,
    437 #define PRECEDING_KEY(_k)                                       \
    438 ({                                                              \
    439         struct bkey *_ret = NULL;                               \
    440                                                                 \
    441         if (KEY_INODE(_k) || KEY_OFFSET(_k)) {                  \
    442                 _ret = &KEY(KEY_INODE(_k), KEY_OFFSET(_k), 0);  \
    443                                                                 \
    444                 if (!_ret->low)                                 \
    445                         _ret->high--;                           \
    446                 _ret->low--;                                    \
    447         }                                                       \
    448                                                                 \
    449         _ret;                                                   \
    450 })
    
    At line 442, _ret points to address of a on-stack variable combined by
    KEY(), the life range of this on-stack variable is in line 442-446,
    once _ret is returned to bch_btree_insert_key(), the returned address
    points to an invalid stack address and this address is overwritten in
    the following called bch_btree_iter_init(). Then argument 'search' of
    bch_btree_iter_init() points to some address inside stackframe of
    bch_btree_iter_init(), exact address depends on how the compiler
    allocates stack space. Now the stack is corrupted.
    
    Fixes: 0eacac22034c ("bcache: PRECEDING_KEY()")
    Signed-off-by: Coly Li <colyli@suse.de>
    Reviewed-by: Rolf Fokkens <rolf@rolffokkens.nl>
    Reviewed-by: Pierre JUHEN <pierre.juhen@orange.fr>
    Tested-by: Shenghui Wang <shhuiw@foxmail.com>
    Tested-by: Pierre JUHEN <pierre.juhen@orange.fr>
    Cc: Kent Overstreet <kent.overstreet@gmail.com>
    Cc: Nix <nix@esperi.org.uk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6545c8a24d329e05624a7d323f04c93f0348b885
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Jun 11 17:48:18 2019 +0100

    i2c: acorn: fix i2c warning
    
    commit ca21f851cc9643af049226d57fabc3c883ea648e upstream.
    
    The Acorn i2c driver (for RiscPC) triggers the "i2c adapter has no name"
    warning in the I2C core driver, resulting in the RTC being inaccessible.
    Fix this.
    
    Fixes: 2236baa75f70 ("i2c: Sanity checks on adapter registration")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 607a79adcb46e31be2c7c810ac7c9df3bb040cb8
Author: Hans Verkuil <hans.verkuil@cisco.com>
Date:   Sat May 12 10:44:02 2018 -0400

    media: v4l2-ioctl: clear fields in s_parm
    
    commit 8a7c5594c02022ca5fa7fb603e11b3e1feb76ed5 upstream.
    
    Zero the reserved capture/output array.
    
    Zero the extendedmode (it is never used in drivers).
    
    Clear all flags in capture/outputmode except for V4L2_MODE_HIGHQUALITY,
    as that is the only valid flag.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Cc: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 122be5afdf7ba7afd60e65d9b781353da823088e
Author: Jann Horn <jannh@google.com>
Date:   Wed May 29 13:31:57 2019 +0200

    ptrace: restore smp_rmb() in __ptrace_may_access()
    
    commit f6581f5b55141a95657ef5742cf6a6bfa20a109f upstream.
    
    Restore the read memory barrier in __ptrace_may_access() that was deleted
    a couple years ago. Also add comments on this barrier and the one it pairs
    with to explain why they're there (as far as I understand).
    
    Fixes: bfedb589252c ("mm: Add a user_ns owner to mm_struct and fix ptrace permission checks")
    Cc: stable@vger.kernel.org
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fc1de48326fd22b1e1be4fa050fb3a710fe2327
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue May 28 18:46:37 2019 -0500

    signal/ptrace: Don't leak unitialized kernel memory with PTRACE_PEEK_SIGINFO
    
    [ Upstream commit f6e2aa91a46d2bc79fce9b93a988dbe7655c90c0 ]
    
    Recently syzbot in conjunction with KMSAN reported that
    ptrace_peek_siginfo can copy an uninitialized siginfo to userspace.
    Inspecting ptrace_peek_siginfo confirms this.
    
    The problem is that off when initialized from args.off can be
    initialized to a negaive value.  At which point the "if (off >= 0)"
    test to see if off became negative fails because off started off
    negative.
    
    Prevent the core problem by adding a variable found that is only true
    if a siginfo is found and copied to a temporary in preparation for
    being copied to userspace.
    
    Prevent args.off from being truncated when being assigned to off by
    testing that off is <= the maximum possible value of off.  Convert off
    to an unsigned long so that we should not have to truncate args.off,
    we have well defined overflow behavior so if we add another check we
    won't risk fighting undefined compiler behavior, and so that we have a
    type whose maximum value is easy to test for.
    
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+0d602a1b0d8c95bdf299@syzkaller.appspotmail.com
    Fixes: 84c751bd4aeb ("ptrace: add ability to retrieve signals without removing from a queue (v4)")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9d0c83c8d23ff93c5c72bff031c0d5ac1014a9f
Author: Wengang Wang <wen.gang.wang@oracle.com>
Date:   Thu Jun 13 15:56:01 2019 -0700

    fs/ocfs2: fix race in ocfs2_dentry_attach_lock()
    
    commit be99ca2716972a712cde46092c54dee5e6192bf8 upstream.
    
    ocfs2_dentry_attach_lock() can be executed in parallel threads against the
    same dentry.  Make that race safe.  The race is like this:
    
                thread A                               thread B
    
    (A1) enter ocfs2_dentry_attach_lock,
    seeing dentry->d_fsdata is NULL,
    and no alias found by
    ocfs2_find_local_alias, so kmalloc
    a new ocfs2_dentry_lock structure
    to local variable "dl", dl1
    
                   .....
    
                                        (B1) enter ocfs2_dentry_attach_lock,
                                        seeing dentry->d_fsdata is NULL,
                                        and no alias found by
                                        ocfs2_find_local_alias so kmalloc
                                        a new ocfs2_dentry_lock structure
                                        to local variable "dl", dl2.
    
                                                       ......
    
    (A2) set dentry->d_fsdata with dl1,
    call ocfs2_dentry_lock() and increase
    dl1->dl_lockres.l_ro_holders to 1 on
    success.
                  ......
    
                                        (B2) set dentry->d_fsdata with dl2
                                        call ocfs2_dentry_lock() and increase
                                        dl2->dl_lockres.l_ro_holders to 1 on
                                        success.
    
                                                      ......
    
    (A3) call ocfs2_dentry_unlock()
    and decrease
    dl2->dl_lockres.l_ro_holders to 0
    on success.
                 ....
    
                                        (B3) call ocfs2_dentry_unlock(),
                                        decreasing
                                        dl2->dl_lockres.l_ro_holders, but
                                        see it's zero now, panic
    
    Link: http://lkml.kernel.org/r/20190529174636.22364-1-wen.gang.wang@oracle.com
    Signed-off-by: Wengang Wang <wen.gang.wang@oracle.com>
    Reported-by: Daniel Sobe <daniel.sobe@nxp.com>
    Tested-by: Daniel Sobe <daniel.sobe@nxp.com>
    Reviewed-by: Changwei Ge <gechangwei@live.cn>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bf23a04c2e39677942e9274a168d1490c5006c7
Author: Shakeel Butt <shakeelb@google.com>
Date:   Thu Jun 13 15:55:49 2019 -0700

    mm/list_lru.c: fix memory leak in __memcg_init_list_lru_node
    
    commit 3510955b327176fd4cbab5baa75b449f077722a2 upstream.
    
    Syzbot reported following memory leak:
    
    ffffffffda RBX: 0000000000000003 RCX: 0000000000441f79
    BUG: memory leak
    unreferenced object 0xffff888114f26040 (size 32):
      comm "syz-executor626", pid 7056, jiffies 4294948701 (age 39.410s)
      hex dump (first 32 bytes):
        40 60 f2 14 81 88 ff ff 40 60 f2 14 81 88 ff ff  @`......@`......
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
         slab_post_alloc_hook mm/slab.h:439 [inline]
         slab_alloc mm/slab.c:3326 [inline]
         kmem_cache_alloc_trace+0x13d/0x280 mm/slab.c:3553
         kmalloc include/linux/slab.h:547 [inline]
         __memcg_init_list_lru_node+0x58/0xf0 mm/list_lru.c:352
         memcg_init_list_lru_node mm/list_lru.c:375 [inline]
         memcg_init_list_lru mm/list_lru.c:459 [inline]
         __list_lru_init+0x193/0x2a0 mm/list_lru.c:626
         alloc_super+0x2e0/0x310 fs/super.c:269
         sget_userns+0x94/0x2a0 fs/super.c:609
         sget+0x8d/0xb0 fs/super.c:660
         mount_nodev+0x31/0xb0 fs/super.c:1387
         fuse_mount+0x2d/0x40 fs/fuse/inode.c:1236
         legacy_get_tree+0x27/0x80 fs/fs_context.c:661
         vfs_get_tree+0x2e/0x120 fs/super.c:1476
         do_new_mount fs/namespace.c:2790 [inline]
         do_mount+0x932/0xc50 fs/namespace.c:3110
         ksys_mount+0xab/0x120 fs/namespace.c:3319
         __do_sys_mount fs/namespace.c:3333 [inline]
         __se_sys_mount fs/namespace.c:3330 [inline]
         __x64_sys_mount+0x26/0x30 fs/namespace.c:3330
         do_syscall_64+0x76/0x1a0 arch/x86/entry/common.c:301
         entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This is a simple off by one bug on the error path.
    
    Link: http://lkml.kernel.org/r/20190528043202.99980-1-shakeelb@google.com
    Fixes: 60d3fd32a7a9 ("list_lru: introduce per-memcg lists")
    Reported-by: syzbot+f90a420dfe2b1b03cb2c@syzkaller.appspotmail.com
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: <stable@vger.kernel.org>    [4.0+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0d8639da780ceca37223fa89e2c8971664927a3
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jun 11 16:32:59 2019 +0200

    libata: Extend quirks for the ST1000LM024 drives with NOLPM quirk
    
    commit 31f6264e225fb92cf6f4b63031424f20797c297d upstream.
    
    We've received a bugreport that using LPM with ST1000LM024 drives leads
    to system lockups. So it seems that these models are buggy in more then
    1 way. Add NOLPM quirk to the existing quirks entry for BROKEN_FPDMA_AA.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1571330
    Cc: stable@vger.kernel.org
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d370caca5df97de4f111ba80048c29cd80e89833
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jun 9 19:29:12 2019 +0900

    ALSA: oxfw: allow PCM capture for Stanton SCS.1m
    
    commit d8fa87c368f5b4096c4746894fdcc195da285df1 upstream.
    
    Stanton SCS.1m can transfer isochronous packet with Multi Bit Linear
    Audio data channels, therefore it allows software to capture PCM
    substream. However, ALSA oxfw driver doesn't.
    
    This commit changes the driver to add one PCM substream for capture
    direction.
    
    Fixes: de5126cc3c0b ("ALSA: oxfw: add stream format quirk for SCS.1 models")
    Cc: <stable@vger.kernel.org> # v4.5+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb0c8bbd9df7d81c6b4aa5694aeb8bf0f479abd0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Apr 12 11:37:19 2019 +0200

    ALSA: seq: Cover unsubscribe_port() in list_mutex
    
    commit 7c32ae35fbf9cffb7aa3736f44dec10c944ca18e upstream.
    
    The call of unsubscribe_port() which manages the group count and
    module refcount from delete_and_unsubscribe_port() looks racy; it's
    not covered by the group list lock, and it's likely a cause of the
    reported unbalance at port deletion.  Let's move the call inside the
    group list_mutex to plug the hole.
    
    Reported-by: syzbot+e4c8abb920efa77bace9@syzkaller.appspotmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e0c41ca896aa2487112742a76142ab84e85dc9d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 13 09:28:42 2019 +0200

    Revert "Bluetooth: Align minimum encryption key size for LE and BR/EDR connections"
    
    This reverts commit 745f5c5f2ac14ac1cbb7fe3cbdc893c9d1af1356 which is
    commit d5bb334a8e171b262e48f378bd2096c0ea458265 upstream.
    
    Lots of people have reported issues with this patch, and as there does
    not seem to be a fix going into Linus's kernel tree any time soon,
    revert the commit in the stable trees so as to get people's machines
    working properly again.
    
    Reported-by: Vasily Khoruzhick <anarsoul@gmail.com>
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Cc: Jeremy Cline <jeremy@jcline.org>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: Johan Hedberg <johan.hedberg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1beeb0459cb2145e1eb99b7f5751b29205a0205e
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Feb 18 15:34:12 2019 +0100

    ARM: exynos: Fix undefined instruction during Exynos5422 resume
    
    [ Upstream commit 4d8e3e951a856777720272ce27f2c738a3eeef8c ]
    
    During early system resume on Exynos5422 with performance counters enabled
    the following kernel oops happens:
    
        Internal error: Oops - undefined instruction: 0 [#1] PREEMPT SMP ARM
        Modules linked in:
        CPU: 0 PID: 1433 Comm: bash Tainted: G        W         5.0.0-rc5-next-20190208-00023-gd5fb5a8a13e6-dirty #5480
        Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
        ...
        Flags: nZCv  IRQs off  FIQs off  Mode SVC_32  ISA ARM  Segment none
        Control: 10c5387d  Table: 4451006a  DAC: 00000051
        Process bash (pid: 1433, stack limit = 0xb7e0e22f)
        ...
        (reset_ctrl_regs) from [<c0112ad0>] (dbg_cpu_pm_notify+0x1c/0x24)
        (dbg_cpu_pm_notify) from [<c014c840>] (notifier_call_chain+0x44/0x84)
        (notifier_call_chain) from [<c014cbc0>] (__atomic_notifier_call_chain+0x7c/0x128)
        (__atomic_notifier_call_chain) from [<c01ffaac>] (cpu_pm_notify+0x30/0x54)
        (cpu_pm_notify) from [<c055116c>] (syscore_resume+0x98/0x3f4)
        (syscore_resume) from [<c0189350>] (suspend_devices_and_enter+0x97c/0xe74)
        (suspend_devices_and_enter) from [<c0189fb8>] (pm_suspend+0x770/0xc04)
        (pm_suspend) from [<c0187740>] (state_store+0x6c/0xcc)
        (state_store) from [<c09fa698>] (kobj_attr_store+0x14/0x20)
        (kobj_attr_store) from [<c030159c>] (sysfs_kf_write+0x4c/0x50)
        (sysfs_kf_write) from [<c0300620>] (kernfs_fop_write+0xfc/0x1e0)
        (kernfs_fop_write) from [<c0282be8>] (__vfs_write+0x2c/0x160)
        (__vfs_write) from [<c0282ea4>] (vfs_write+0xa4/0x16c)
        (vfs_write) from [<c0283080>] (ksys_write+0x40/0x8c)
        (ksys_write) from [<c0101000>] (ret_fast_syscall+0x0/0x28)
    
    Undefined instruction is triggered during CP14 reset, because bits: #16
    (Secure privileged invasive debug disabled) and #17 (Secure privileged
    noninvasive debug disable) are set in DSCR. Those bits depend on SPNIDEN
    and SPIDEN lines, which are provided by Secure JTAG hardware block. That
    block in turn is powered from cluster 0 (big/Eagle), but the Exynos5422
    boots on cluster 1 (LITTLE/KFC).
    
    To fix this issue it is enough to turn on the power on the cluster 0 for
    a while. This lets the Secure JTAG block to propagate the needed signals
    to LITTLE/KFC cores and change their DSCR.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7650c74b6ef62186cf187e26ef77bcecb2d7a07
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Tue Mar 19 19:40:08 2019 +0900

    pwm: Fix deadlock warning when removing PWM device
    
    [ Upstream commit 347ab9480313737c0f1aaa08e8f2e1a791235535 ]
    
    This patch fixes deadlock warning if removing PWM device
    when CONFIG_PROVE_LOCKING is enabled.
    
    This issue can be reproceduced by the following steps on
    the R-Car H3 Salvator-X board if the backlight is disabled:
    
     # cd /sys/class/pwm/pwmchip0
     # echo 0 > export
     # ls
     device  export  npwm  power  pwm0  subsystem  uevent  unexport
     # cd device/driver
     # ls
     bind  e6e31000.pwm  uevent  unbind
     # echo e6e31000.pwm > unbind
    
    [   87.659974] ======================================================
    [   87.666149] WARNING: possible circular locking dependency detected
    [   87.672327] 5.0.0 #7 Not tainted
    [   87.675549] ------------------------------------------------------
    [   87.681723] bash/2986 is trying to acquire lock:
    [   87.686337] 000000005ea0e178 (kn->count#58){++++}, at: kernfs_remove_by_name_ns+0x50/0xa0
    [   87.694528]
    [   87.694528] but task is already holding lock:
    [   87.700353] 000000006313b17c (pwm_lock){+.+.}, at: pwmchip_remove+0x28/0x13c
    [   87.707405]
    [   87.707405] which lock already depends on the new lock.
    [   87.707405]
    [   87.715574]
    [   87.715574] the existing dependency chain (in reverse order) is:
    [   87.723048]
    [   87.723048] -> #1 (pwm_lock){+.+.}:
    [   87.728017]        __mutex_lock+0x70/0x7e4
    [   87.732108]        mutex_lock_nested+0x1c/0x24
    [   87.736547]        pwm_request_from_chip.part.6+0x34/0x74
    [   87.741940]        pwm_request_from_chip+0x20/0x40
    [   87.746725]        export_store+0x6c/0x1f4
    [   87.750820]        dev_attr_store+0x18/0x28
    [   87.754998]        sysfs_kf_write+0x54/0x64
    [   87.759175]        kernfs_fop_write+0xe4/0x1e8
    [   87.763615]        __vfs_write+0x40/0x184
    [   87.767619]        vfs_write+0xa8/0x19c
    [   87.771448]        ksys_write+0x58/0xbc
    [   87.775278]        __arm64_sys_write+0x18/0x20
    [   87.779721]        el0_svc_common+0xd0/0x124
    [   87.783986]        el0_svc_compat_handler+0x1c/0x24
    [   87.788858]        el0_svc_compat+0x8/0x18
    [   87.792947]
    [   87.792947] -> #0 (kn->count#58){++++}:
    [   87.798260]        lock_acquire+0xc4/0x22c
    [   87.802353]        __kernfs_remove+0x258/0x2c4
    [   87.806790]        kernfs_remove_by_name_ns+0x50/0xa0
    [   87.811836]        remove_files.isra.1+0x38/0x78
    [   87.816447]        sysfs_remove_group+0x48/0x98
    [   87.820971]        sysfs_remove_groups+0x34/0x4c
    [   87.825583]        device_remove_attrs+0x6c/0x7c
    [   87.830197]        device_del+0x11c/0x33c
    [   87.834201]        device_unregister+0x14/0x2c
    [   87.838638]        pwmchip_sysfs_unexport+0x40/0x4c
    [   87.843509]        pwmchip_remove+0xf4/0x13c
    [   87.847773]        rcar_pwm_remove+0x28/0x34
    [   87.852039]        platform_drv_remove+0x24/0x64
    [   87.856651]        device_release_driver_internal+0x18c/0x21c
    [   87.862391]        device_release_driver+0x14/0x1c
    [   87.867175]        unbind_store+0xe0/0x124
    [   87.871265]        drv_attr_store+0x20/0x30
    [   87.875442]        sysfs_kf_write+0x54/0x64
    [   87.879618]        kernfs_fop_write+0xe4/0x1e8
    [   87.884055]        __vfs_write+0x40/0x184
    [   87.888057]        vfs_write+0xa8/0x19c
    [   87.891887]        ksys_write+0x58/0xbc
    [   87.895716]        __arm64_sys_write+0x18/0x20
    [   87.900154]        el0_svc_common+0xd0/0x124
    [   87.904417]        el0_svc_compat_handler+0x1c/0x24
    [   87.909289]        el0_svc_compat+0x8/0x18
    [   87.913378]
    [   87.913378] other info that might help us debug this:
    [   87.913378]
    [   87.921374]  Possible unsafe locking scenario:
    [   87.921374]
    [   87.927286]        CPU0                    CPU1
    [   87.931808]        ----                    ----
    [   87.936331]   lock(pwm_lock);
    [   87.939293]                                lock(kn->count#58);
    [   87.945120]                                lock(pwm_lock);
    [   87.950599]   lock(kn->count#58);
    [   87.953908]
    [   87.953908]  *** DEADLOCK ***
    [   87.953908]
    [   87.959821] 4 locks held by bash/2986:
    [   87.963563]  #0: 00000000ace7bc30 (sb_writers#6){.+.+}, at: vfs_write+0x188/0x19c
    [   87.971044]  #1: 00000000287991b2 (&of->mutex){+.+.}, at: kernfs_fop_write+0xb4/0x1e8
    [   87.978872]  #2: 00000000f739d016 (&dev->mutex){....}, at: device_release_driver_internal+0x40/0x21c
    [   87.988001]  #3: 000000006313b17c (pwm_lock){+.+.}, at: pwmchip_remove+0x28/0x13c
    [   87.995481]
    [   87.995481] stack backtrace:
    [   87.999836] CPU: 0 PID: 2986 Comm: bash Not tainted 5.0.0 #7
    [   88.005489] Hardware name: Renesas Salvator-X board based on r8a7795 ES1.x (DT)
    [   88.012791] Call trace:
    [   88.015235]  dump_backtrace+0x0/0x190
    [   88.018891]  show_stack+0x14/0x1c
    [   88.022204]  dump_stack+0xb0/0xec
    [   88.025514]  print_circular_bug.isra.32+0x1d0/0x2e0
    [   88.030385]  __lock_acquire+0x1318/0x1864
    [   88.034388]  lock_acquire+0xc4/0x22c
    [   88.037958]  __kernfs_remove+0x258/0x2c4
    [   88.041874]  kernfs_remove_by_name_ns+0x50/0xa0
    [   88.046398]  remove_files.isra.1+0x38/0x78
    [   88.050487]  sysfs_remove_group+0x48/0x98
    [   88.054490]  sysfs_remove_groups+0x34/0x4c
    [   88.058580]  device_remove_attrs+0x6c/0x7c
    [   88.062671]  device_del+0x11c/0x33c
    [   88.066154]  device_unregister+0x14/0x2c
    [   88.070070]  pwmchip_sysfs_unexport+0x40/0x4c
    [   88.074421]  pwmchip_remove+0xf4/0x13c
    [   88.078163]  rcar_pwm_remove+0x28/0x34
    [   88.081906]  platform_drv_remove+0x24/0x64
    [   88.085996]  device_release_driver_internal+0x18c/0x21c
    [   88.091215]  device_release_driver+0x14/0x1c
    [   88.095478]  unbind_store+0xe0/0x124
    [   88.099048]  drv_attr_store+0x20/0x30
    [   88.102704]  sysfs_kf_write+0x54/0x64
    [   88.106359]  kernfs_fop_write+0xe4/0x1e8
    [   88.110275]  __vfs_write+0x40/0x184
    [   88.113757]  vfs_write+0xa8/0x19c
    [   88.117065]  ksys_write+0x58/0xbc
    [   88.120374]  __arm64_sys_write+0x18/0x20
    [   88.124291]  el0_svc_common+0xd0/0x124
    [   88.128034]  el0_svc_compat_handler+0x1c/0x24
    [   88.132384]  el0_svc_compat+0x8/0x18
    
    The sysfs unexport in pwmchip_remove() is completely asymmetric
    to what we do in pwmchip_add_with_polarity() and commit 0733424c9ba9
    ("pwm: Unexport children before chip removal") is a strong indication
    that this was wrong to begin with. We should just move
    pwmchip_sysfs_unexport() where it belongs, which is right after
    pwmchip_sysfs_unexport_children(). In that case, we do not need
    separate functions anymore either.
    
    We also really want to remove sysfs irrespective of whether or not
    the chip will be removed as a result of pwmchip_remove(). We can only
    assume that the driver will be gone after that, so we shouldn't leave
    any dangling sysfs files around.
    
    This warning disappears if we move pwmchip_sysfs_unexport() to
    the top of pwmchip_remove(), pwmchip_sysfs_unexport_children().
    That way it is also outside of the pwm_lock section, which indeed
    doesn't seem to be needed.
    
    Moving the pwmchip_sysfs_export() call outside of that section also
    seems fine and it'd be perfectly symmetric with pwmchip_remove() again.
    
    So, this patch fixes them.
    
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    [shimoda: revise the commit log and code]
    Fixes: 76abbdde2d95 ("pwm: Add sysfs interface")
    Fixes: 0733424c9ba9 ("pwm: Unexport children before chip removal")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Hoan Nguyen An <na-hoan@jinso.co.jp>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd22c1207ab145eb9e03aa772e299d120b2eea91
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Mar 14 21:02:17 2019 +0100

    ARM: dts: exynos: Always enable necessary APIO_1V8 and ABB_1V8 regulators on Arndale Octa
    
    [ Upstream commit 5ab99cf7d5e96e3b727c30e7a8524c976bd3723d ]
    
    The PVDD_APIO_1V8 (LDO2) and PVDD_ABB_1V8 (LDO8) regulators were turned
    off by Linux kernel as unused.  However they supply critical parts of
    SoC so they should be always on:
    
    1. PVDD_APIO_1V8 supplies SYS pins (gpx[0-3], PSHOLD), HDMI level shift,
       RTC, VDD1_12 (DRAM internal 1.8 V logic), pull-up for PMIC interrupt
       lines, TTL/UARTR level shift, reset pins and SW-TACT1 button.
       It also supplies unused blocks like VDDQ_SRAM (for SROM controller) and
       VDDQ_GPIO (gpm7, gpy7).
       The LDO2 cannot be turned off (S2MPS11 keeps it on anyway) so
       marking it "always-on" only reflects its real status.
    
    2. PVDD_ABB_1V8 supplies Adaptive Body Bias Generator for ARM cores,
       memory and Mali (G3D).
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ed354026f0d262be9fb3d9042eef10daef3bf8f
Author: Christoph Vogtländer <c.vogtlaender@sigma-surface-science.com>
Date:   Tue Mar 12 14:38:46 2019 +0530

    pwm: tiehrpwm: Update shadow register for disabling PWMs
    
    [ Upstream commit b00ef53053191d3025c15e8041699f8c9d132daf ]
    
    It must be made sure that immediate mode is not already set, when
    modifying shadow register value in ehrpwm_pwm_disable(). Otherwise
    modifications to the action-qualifier continuous S/W force
    register(AQSFRC) will be done in the active register.
    This may happen when both channels are being disabled. In this case,
    only the first channel state will be recorded as disabled in the shadow
    register. Later, when enabling the first channel again, the second
    channel would be enabled as well. Setting RLDCSF to zero, first, ensures
    that the shadow register is updated as desired.
    
    Fixes: 38dabd91ff0b ("pwm: tiehrpwm: Fix disabling of output of PWMs")
    Signed-off-by: Christoph Vogtländer <c.vogtlaender@sigma-surface-science.com>
    [vigneshr@ti.com: Improve commit message]
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e09a5cb80b31b011bcc9748af04fb39e58af107d
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Mar 18 18:39:30 2019 +0300

    dmaengine: idma64: Use actual device for DMA transfers
    
    [ Upstream commit 5ba846b1ee0792f5a596b9b0b86d6e8cdebfab06 ]
    
    Intel IOMMU, when enabled, tries to find the domain of the device,
    assuming it's a PCI one, during DMA operations, such as mapping or
    unmapping. Since we are splitting the actual PCI device to couple of
    children via MFD framework (see drivers/mfd/intel-lpss.c for details),
    the DMA device appears to be a platform one, and thus not an actual one
    that performs DMA. In a such situation IOMMU can't find or allocate
    a proper domain for its operations. As a result, all DMA operations are
    failed.
    
    In order to fix this, supply parent of the platform device
    to the DMA engine framework and fix filter functions accordingly.
    
    We may rely on the fact that parent is a real PCI device, because no
    other configuration is present in the wild.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> [for tty parts]
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd8afa955da7c94785c8d7b0f64d04b1d99991c2
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Mar 25 15:43:18 2019 -0700

    gpio: gpio-omap: add check for off wake capable gpios
    
    [ Upstream commit da38ef3ed10a09248e13ae16530c2c6d448dc47d ]
    
    We are currently assuming all GPIOs are non-wakeup capable GPIOs as we
    not configuring the bank->non_wakeup_gpios like we used to earlier with
    platform_data.
    
    Let's add omap_gpio_is_off_wakeup_capable() to make the handling clearer
    while considering that later patches may want to configure SoC specific
    bank->non_wakeup_gpios for the GPIOs in wakeup domain.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Cc: Russell King <rmk+kernel@armlinux.org.uk>
    Cc: Tero Kristo <t-kristo@ti.com>
    Reported-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d73c419cc5c528df713f91a802c8ead538563e1b
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Mon Mar 25 17:19:09 2019 -0500

    PCI: xilinx: Check for __get_free_pages() failure
    
    [ Upstream commit 699ca30162686bf305cdf94861be02eb0cf9bda2 ]
    
    If __get_free_pages() fails, return -ENOMEM to avoid a NULL pointer
    dereference.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cc334c336c839e1a22ecfbd4e0a9463a5cb0f83
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Mon Apr 1 17:46:58 2019 +0200

    video: imsttfb: fix potential NULL pointer dereferences
    
    [ Upstream commit 1d84353d205a953e2381044953b7fa31c8c9702d ]
    
    In case ioremap fails, the fix releases resources and returns
    -ENOMEM to avoid NULL pointer dereferences.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Cc: Aditya Pakki <pakki001@umn.edu>
    Cc: Finn Thain <fthain@telegraphics.com.au>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [b.zolnierkie: minor patch summary fixup]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b509b1c0ece2b166fb2400bd331068b9cbe4c2fe
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Mon Apr 1 17:46:58 2019 +0200

    video: hgafb: fix potential NULL pointer dereference
    
    [ Upstream commit ec7f6aad57ad29e4e66cc2e18e1e1599ddb02542 ]
    
    When ioremap fails, hga_vram should not be dereferenced. The fix
    check the failure to avoid NULL pointer dereference.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Cc: Aditya Pakki <pakki001@umn.edu>
    Cc: Ferenc Bakonyi <fero@drama.obuda.kando.hu>
    [b.zolnierkie: minor patch summary fixup]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0bb05936cd8d332b07669ad421693d0743f334a
Author: Marek Vasut <marek.vasut+renesas@gmail.com>
Date:   Mon Mar 25 12:41:01 2019 +0100

    PCI: rcar: Fix 64bit MSI message address handling
    
    [ Upstream commit 954b4b752a4c4e963b017ed8cef4c453c5ed308d ]
    
    The MSI message address in the RC address space can be 64 bit. The
    R-Car PCIe RC supports such a 64bit MSI message address as well.
    The code currently uses virt_to_phys(__get_free_pages()) to obtain
    a reserved page for the MSI message address, and the return value
    of which can be a 64 bit physical address on 64 bit system.
    
    However, the driver only programs PCIEMSIALR register with the bottom
    32 bits of the virt_to_phys(__get_free_pages()) return value and does
    not program the top 32 bits into PCIEMSIAUR, but rather programs the
    PCIEMSIAUR register with 0x0. This worked fine on older 32 bit R-Car
    SoCs, however may fail on new 64 bit R-Car SoCs.
    
    Since from a PCIe controller perspective, an inbound MSI is a memory
    write to a special address (in case of this controller, defined by
    the value in PCIEMSIAUR:PCIEMSIALR), which triggers an interrupt, but
    never hits the DRAM _and_ because allocation of an MSI by a PCIe card
    driver obtains the MSI message address by reading PCIEMSIAUR:PCIEMSIALR
    in rcar_msi_setup_irqs(), incorrectly programmed PCIEMSIAUR cannot
    cause memory corruption or other issues.
    
    There is however the possibility that if virt_to_phys(__get_free_pages())
    returned address above the 32bit boundary _and_ PCIEMSIAUR was programmed
    to 0x0 _and_ if the system had physical RAM at the address matching the
    value of PCIEMSIALR, a PCIe card driver could allocate a buffer with a
    physical address matching the value of PCIEMSIALR and a remote write to
    such a buffer by a PCIe card would trigger a spurious MSI.
    
    Fixes: e015f88c368d ("PCI: rcar: Add support for R-Car H3 to pcie-rcar")
    Signed-off-by: Marek Vasut <marek.vasut+renesas@gmail.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Phil Edworthy <phil.edworthy@renesas.com>
    Cc: Simon Horman <horms+renesas@verge.net.au>
    Cc: Wolfram Sang <wsa@the-dreams.de>
    Cc: linux-renesas-soc@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd2179349526a8ed9d588834b910c9fe9cde4afa
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Fri Mar 15 02:29:43 2019 -0500

    PCI: rcar: Fix a potential NULL pointer dereference
    
    [ Upstream commit f0d14edd2ba43b995bef4dd5da5ffe0ae19321a1 ]
    
    In case __get_free_pages() fails and returns NULL, fix the return
    value to -ENOMEM and release resources to avoid dereferencing a
    NULL pointer.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fddf0c44fb08778afe6fe24280232e8ba629e5f
Author: Junxiao Chang <junxiao.chang@intel.com>
Date:   Mon Apr 8 17:40:22 2019 +0800

    platform/x86: intel_pmc_ipc: adding error handling
    
    [ Upstream commit e61985d0550df8c2078310202aaad9b41049c36c ]
    
    If punit or telemetry device initialization fails, pmc driver should
    unregister and return failure.
    
    This change is to fix a kernel panic when removing kernel module
    intel_pmc_ipc.
    
    Fixes: 48c1917088ba ("platform:x86: Add Intel telemetry platform device")
    Signed-off-by: Junxiao Chang <junxiao.chang@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b19d72a41c7a5e2738b93fbbc8113ea07abf0e5
Author: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
Date:   Fri Mar 22 13:27:21 2019 -0500

    PCI: rpadlpar: Fix leaked device_node references in add/remove paths
    
    [ Upstream commit fb26228bfc4ce3951544848555c0278e2832e618 ]
    
    The find_dlpar_node() helper returns a device node with its reference
    incremented.  Both the add and remove paths use this helper for find the
    appropriate node, but fail to release the reference when done.
    
    Annotate the find_dlpar_node() helper with a comment about the incremented
    reference count and call of_node_put() on the obtained device_node in the
    add and remove paths.  Also, fixup a reference leak in the find_vio_slot()
    helper where we fail to call of_node_put() on the vdevice node after we
    iterate over its children.
    
    Signed-off-by: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db2d470b5ede718309b8aa68999cf8462c827fc1
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Thu Mar 28 23:49:16 2019 -0700

    ARM: dts: imx6qdl: Specify IMX6QDL_CLK_IPG as "ipg" clock to SDMA
    
    [ Upstream commit b14c872eebc501b9640b04f4a152df51d6eaf2fc ]
    
    Since 25aaa75df1e6 SDMA driver uses clock rates of "ipg" and "ahb"
    clock to determine if it needs to configure the IP block as operating
    at 1:1 or 1:2 clock ratio (ACR bit in SDMAARM_CONFIG). Specifying both
    clocks as IMX6QDL_CLK_SDMA results in driver incorrectly thinking that
    ratio is 1:1 which results in broken SDMA funtionality(this at least
    breaks RAVE SP serdev driver on RDU2). Fix the code to specify
    IMX6QDL_CLK_IPG as "ipg" clock for SDMA, to avoid detecting incorrect
    clock ratio.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Reviewed-by: Lucas Stach <l.stach@pengutronix.de>
    Cc: Angus Ainslie (Purism) <angus@akkea.ca>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Tested-by: Adam Ford <aford173@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 343ef407bee8f722aa28303a37f8753e41224991
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Thu Mar 28 23:49:17 2019 -0700

    ARM: dts: imx6sx: Specify IMX6SX_CLK_IPG as "ipg" clock to SDMA
    
    [ Upstream commit 8979117765c19edc3b01cc0ef853537bf93eea4b ]
    
    Since 25aaa75df1e6 SDMA driver uses clock rates of "ipg" and "ahb"
    clock to determine if it needs to configure the IP block as operating
    at 1:1 or 1:2 clock ratio (ACR bit in SDMAARM_CONFIG). Specifying both
    clocks as IMX6SX_CLK_SDMA results in driver incorrectly thinking that
    ratio is 1:1 which results in broken SDMA funtionality. Fix the code
    to specify IMX6SX_CLK_IPG as "ipg" clock for SDMA, to avoid detecting
    incorrect clock ratio.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Angus Ainslie (Purism) <angus@akkea.ca>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f95ee8880a39c016e2b5943df2c4ad31a7fcd582
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Thu Mar 28 23:49:19 2019 -0700

    ARM: dts: imx6ul: Specify IMX6UL_CLK_IPG as "ipg" clock to SDMA
    
    [ Upstream commit 7b3132ecefdd1fcdf6b86e62021d0e55ea8034db ]
    
    Since 25aaa75df1e6 SDMA driver uses clock rates of "ipg" and "ahb"
    clock to determine if it needs to configure the IP block as operating
    at 1:1 or 1:2 clock ratio (ACR bit in SDMAARM_CONFIG). Specifying both
    clocks as IMX6UL_CLK_SDMA results in driver incorrectly thinking that
    ratio is 1:1 which results in broken SDMA funtionality. Fix the code
    to specify IMX6UL_CLK_IPG as "ipg" clock for SDMA, to avoid detecting
    incorrect clock ratio.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Angus Ainslie (Purism) <angus@akkea.ca>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92e28089c852343759ac1603ad479cb522430d4d
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Thu Mar 28 23:49:18 2019 -0700

    ARM: dts: imx7d: Specify IMX7D_CLK_IPG as "ipg" clock to SDMA
    
    [ Upstream commit 412b032a1dc72fc9d1c258800355efa6671b6315 ]
    
    Since 25aaa75df1e6 SDMA driver uses clock rates of "ipg" and "ahb"
    clock to determine if it needs to configure the IP block as operating
    at 1:1 or 1:2 clock ratio (ACR bit in SDMAARM_CONFIG). Specifying both
    clocks as IMX7D_CLK_SDMA results in driver incorrectly thinking that
    ratio is 1:1 which results in broken SDMA funtionality. Fix the code
    to specify IMX7D_CLK_IPG as "ipg" clock for SDMA, to avoid detecting
    incorrect clock ratio.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Angus Ainslie (Purism) <angus@akkea.ca>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaebc23308ea6c0e2ce4e6cb6f382a5ec29eb225
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Thu Mar 28 23:49:21 2019 -0700

    ARM: dts: imx6sx: Specify IMX6SX_CLK_IPG as "ahb" clock to SDMA
    
    [ Upstream commit cc839d0f8c284fcb7591780b568f13415bbb737c ]
    
    Since 25aaa75df1e6 SDMA driver uses clock rates of "ipg" and "ahb"
    clock to determine if it needs to configure the IP block as operating
    at 1:1 or 1:2 clock ratio (ACR bit in SDMAARM_CONFIG). Specifying both
    clocks as IMX6SL_CLK_SDMA results in driver incorrectly thinking that
    ratio is 1:1 which results in broken SDMA funtionality. Fix the code
    to specify IMX6SL_CLK_AHB as "ahb" clock for SDMA, to avoid detecting
    incorrect clock ratio.
    
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Angus Ainslie (Purism) <angus@akkea.ca>
    Cc: Chris Healy <cphealy@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72a7c442bdf3598847dd12541ac25d719a83ec5b
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Apr 11 16:21:53 2019 -0700

    clk: rockchip: Turn on "aclk_dmac1" for suspend on rk3288
    
    [ Upstream commit 57a20248ef3e429dc822f0774bc4e00136c46c83 ]
    
    Experimentally it can be seen that going into deep sleep (specifically
    setting PMU_CLR_DMA and PMU_CLR_BUS in RK3288_PMU_PWRMODE_CON1)
    appears to fail unless "aclk_dmac1" is on.  The failure is that the
    system never signals that it made it into suspend on the GLOBAL_PWROFF
    pin and it just hangs.
    
    NOTE that it's confirmed that it's the actual suspend that fails, not
    one of the earlier calls to read/write registers.  Specifically if you
    comment out the "PMU_GLOBAL_INT_DISABLE" setting in
    rk3288_slp_mode_set() and then comment out the "cpu_do_idle()" call in
    rockchip_lpmode_enter() then you can exercise the whole suspend path
    without any crashing.
    
    This is currently not a problem with suspend upstream because there is
    no current way to exercise the deep suspend code.  However, anyone
    trying to make it work will run into this issue.
    
    This was not a problem on shipping rk3288-based Chromebooks because
    those devices all ran on an old kernel based on 3.14.  On that kernel
    "aclk_dmac1" appears to be left on all the time.
    
    There are several ways to skin this problem.
    
    A) We could add "aclk_dmac1" to the list of critical clocks and that
    apperas to work, but presumably that wastes power.
    
    B) We could keep a list of "struct clk" objects to enable at suspend
    time in clk-rk3288.c and use the standard clock APIs.
    
    C) We could make the rk3288-pmu driver keep a list of clocks to enable
    at suspend time.  Presumably this would require a dts and bindings
    change.
    
    D) We could just whack the clock on in the existing syscore suspend
    function where we whack a bunch of other clocks.  This is particularly
    easy because we know for sure that the clock's only parent
    ("aclk_cpu") is a critical clock so we don't need to do anything more
    than ungate it.
    
    In this case I have chosen D) because it seemed like the least work,
    but any of the other options would presumably also work fine.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Elaine Zhang <zhangqing@rock-chips.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a1de21ca49140ef8088bbb8d322c2ade58ccfac
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Mar 7 15:56:51 2019 -0700

    soc: mediatek: pwrap: Zero initialize rdata in pwrap_init_cipher
    
    [ Upstream commit 89e28da82836530f1ac7a3a32fecc31f22d79b3e ]
    
    When building with -Wsometimes-uninitialized, Clang warns:
    
    drivers/soc/mediatek/mtk-pmic-wrap.c:1358:6: error: variable 'rdata' is
    used uninitialized whenever '||' condition is true
    [-Werror,-Wsometimes-uninitialized]
    
    If pwrap_write returns non-zero, pwrap_read will not be called to
    initialize rdata, meaning that we will use some random uninitialized
    stack value in our print statement. Zero initialize rdata in case this
    happens.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/401
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9823dc87a2e3b0d0310b83212259eba56a1efbd4
Author: Enrico Granata <egranata@chromium.org>
Date:   Wed Apr 3 15:40:36 2019 -0700

    platform/chrome: cros_ec_proto: check for NULL transfer function
    
    [ Upstream commit 94d4e7af14a1170e34cf082d92e4c02de9e9fb88 ]
    
    As new transfer mechanisms are added to the EC codebase, they may
    not support v2 of the EC protocol.
    
    If the v3 initial handshake transfer fails, the kernel will try
    and call cmd_xfer as a fallback. If v2 is not supported, cmd_xfer
    will be NULL, and the code will end up causing a kernel panic.
    
    Add a check for NULL before calling the transfer function, along
    with a helpful comment explaining how one might end up in this
    situation.
    
    Signed-off-by: Enrico Granata <egranata@chromium.org>
    Reviewed-by: Jett Rink <jettrink@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f460e08e1c5ec5a355384107356d61c3cff328fd
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Wed Apr 17 09:18:50 2019 -0500

    x86/PCI: Fix PCI IRQ routing table memory leak
    
    [ Upstream commit ea094d53580f40c2124cef3d072b73b2425e7bfd ]
    
    In pcibios_irq_init(), the PCI IRQ routing table 'pirq_table' is first
    found through pirq_find_routing_table().  If the table is not found and
    CONFIG_PCI_BIOS is defined, the table is then allocated in
    pcibios_get_irq_routing_table() using kmalloc().  Later, if the I/O APIC is
    used, this table is actually not used.  In that case, the allocated table
    is not freed, which is a memory leak.
    
    Free the allocated table if it is not used.
    
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    [bhelgaas: added Ingo's reviewed-by, since the only change since v1 was to
    use the irq_routing_table local variable name he suggested]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 101e808f7e75da2e0e9fb5aefc2bc3c92209eacd
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Fri Apr 12 16:37:30 2019 -0400

    nfsd: allow fh_want_write to be called twice
    
    [ Upstream commit 0b8f62625dc309651d0efcb6a6247c933acd8b45 ]
    
    A fuzzer recently triggered lockdep warnings about potential sb_writers
    deadlocks caused by fh_want_write().
    
    Looks like we aren't careful to pair each fh_want_write() with an
    fh_drop_write().
    
    It's not normally a problem since fh_put() will call fh_drop_write() for
    us.  And was OK for NFSv3 where we'd do one operation that might call
    fh_want_write(), and then put the filehandle.
    
    But an NFSv4 protocol fuzzer can do weird things like call unlink twice
    in a compound, and then we get into trouble.
    
    I'm a little worried about this approach of just leaving everything to
    fh_put().  But I think there are probably a lot of
    fh_want_write()/fh_drop_write() imbalances so for now I think we need it
    to be more forgiving.
    
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4edf907dcd42d1d5790b54db472d08ee67c348a2
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Wed Mar 27 10:15:19 2019 +0000

    fuse: retrieve: cap requested size to negotiated max_write
    
    [ Upstream commit 7640682e67b33cab8628729afec8ca92b851394f ]
    
    FUSE filesystem server and kernel client negotiate during initialization
    phase, what should be the maximum write size the client will ever issue.
    Correspondingly the filesystem server then queues sys_read calls to read
    requests with buffer capacity large enough to carry request header + that
    max_write bytes. A filesystem server is free to set its max_write in
    anywhere in the range between [1*page, fc->max_pages*page]. In particular
    go-fuse[2] sets max_write by default as 64K, wheres default fc->max_pages
    corresponds to 128K. Libfuse also allows users to configure max_write, but
    by default presets it to possible maximum.
    
    If max_write is < fc->max_pages*page, and in NOTIFY_RETRIEVE handler we
    allow to retrieve more than max_write bytes, corresponding prepared
    NOTIFY_REPLY will be thrown away by fuse_dev_do_read, because the
    filesystem server, in full correspondence with server/client contract, will
    be only queuing sys_read with ~max_write buffer capacity, and
    fuse_dev_do_read throws away requests that cannot fit into server request
    buffer. In turn the filesystem server could get stuck waiting indefinitely
    for NOTIFY_REPLY since NOTIFY_RETRIEVE handler returned OK which is
    understood by clients as that NOTIFY_REPLY was queued and will be sent
    back.
    
    Cap requested size to negotiate max_write to avoid the problem.  This
    aligns with the way NOTIFY_RETRIEVE handler works, which already
    unconditionally caps requested retrieve size to fuse_conn->max_pages.  This
    way it should not hurt NOTIFY_RETRIEVE semantic if we return less data than
    was originally requested.
    
    Please see [1] for context where the problem of stuck filesystem was hit
    for real, how the situation was traced and for more involving patch that
    did not make it into the tree.
    
    [1] https://marc.info/?l=linux-fsdevel&m=155057023600853&w=2
    [2] https://github.com/hanwen/go-fuse
    
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Cc: Jakob Unterwurzacher <jakobunt@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit faa4dc52b4b227344bd66ac0fda6475749263d8b
Author: Jorge Ramirez-Ortiz <jorge.ramirez-ortiz@linaro.org>
Date:   Sat Apr 13 11:32:58 2019 +0100

    nvmem: core: fix read buffer in place
    
    [ Upstream commit 2fe518fecb3a4727393be286db9804cd82ee2d91 ]
    
    When the bit_offset in the cell is zero, the pointer to the msb will
    not be properly initialized (ie, will still be pointing to the first
    byte in the buffer).
    
    This being the case, if there are bits to clear in the msb, those will
    be left untouched while the mask will incorrectly clear bit positions
    on the first byte.
    
    This commit also makes sure that any byte unused in the cell is
    cleared.
    
    Signed-off-by: Jorge Ramirez-Ortiz <jorge.ramirez-ortiz@linaro.org>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5844c4b20d5fab7f05b171e1a959e3c19355fa8b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 30 12:18:28 2019 +0200

    ALSA: hda - Register irq handler after the chip initialization
    
    [ Upstream commit f495222e28275222ab6fd93813bd3d462e16d340 ]
    
    Currently the IRQ handler in HD-audio controller driver is registered
    before the chip initialization.  That is, we have some window opened
    between the azx_acquire_irq() call and the CORB/RIRB setup.  If an
    interrupt is triggered in this small window, the IRQ handler may
    access to the uninitialized RIRB buffer, which leads to a NULL
    dereference Oops.
    
    This is usually no big problem since most of Intel chips do register
    the IRQ via MSI, and we've already fixed the order of the IRQ
    enablement and the CORB/RIRB setup in the former commit b61749a89f82
    ("sound: enable interrupt after dma buffer initialization"), hence the
    IRQ won't be triggered in that room.  However, some platforms use a
    shared IRQ, and this may allow the IRQ trigger by another source.
    
    Another possibility is the kdump environment: a stale interrupt might
    be present in there, the IRQ handler can be falsely triggered as well.
    
    For covering this small race, let's move the azx_acquire_irq() call
    after hda_intel_init_chip() call.  Although this is a bit radical
    change, it can cover more widely than checking the CORB/RIRB setup
    locally in the callee side.
    
    Reported-by: Liwei Song <liwei.song@windriver.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea091c8495fb2ef718437bc6a1069b943e50c891
Author: Lu Baolu <baolu.lu@linux.intel.com>
Date:   Thu May 2 09:34:25 2019 +0800

    iommu/vt-d: Set intel_iommu_gfx_mapped correctly
    
    [ Upstream commit cf1ec4539a50bdfe688caad4615ca47646884316 ]
    
    The intel_iommu_gfx_mapped flag is exported by the Intel
    IOMMU driver to indicate whether an IOMMU is used for the
    graphic device. In a virtualized IOMMU environment (e.g.
    QEMU), an include-all IOMMU is used for graphic device.
    This flag is found to be clear even the IOMMU is used.
    
    Cc: Ashok Raj <ashok.raj@intel.com>
    Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: Kevin Tian <kevin.tian@intel.com>
    Reported-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Fixes: c0771df8d5297 ("intel-iommu: Export a flag indicating that the IOMMU is used for iGFX.")
    Suggested-by: Kevin Tian <kevin.tian@intel.com>
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5604d89545e7ceab1ae00f1f13b9317c9765d593
Author: Vladimir Zapolskiy <vz@mleia.com>
Date:   Tue Mar 12 01:54:25 2019 +0200

    watchdog: fix compile time error of pretimeout governors
    
    [ Upstream commit a223770bfa7b6647f3a70983257bd89f9cafce46 ]
    
    CONFIG_WATCHDOG_PRETIMEOUT_GOV build symbol adds watchdog_pretimeout.o
    object to watchdog.o, the latter is compiled only if CONFIG_WATCHDOG_CORE
    is selected, so it rightfully makes sense to add it as a dependency.
    
    The change fixes the next compilation errors, if CONFIG_WATCHDOG_CORE=n
    and CONFIG_WATCHDOG_PRETIMEOUT_GOV=y are selected:
    
      drivers/watchdog/pretimeout_noop.o: In function `watchdog_gov_noop_register':
      drivers/watchdog/pretimeout_noop.c:35: undefined reference to `watchdog_register_governor'
      drivers/watchdog/pretimeout_noop.o: In function `watchdog_gov_noop_unregister':
      drivers/watchdog/pretimeout_noop.c:40: undefined reference to `watchdog_unregister_governor'
    
      drivers/watchdog/pretimeout_panic.o: In function `watchdog_gov_panic_register':
      drivers/watchdog/pretimeout_panic.c:35: undefined reference to `watchdog_register_governor'
      drivers/watchdog/pretimeout_panic.o: In function `watchdog_gov_panic_unregister':
      drivers/watchdog/pretimeout_panic.c:40: undefined reference to `watchdog_unregister_governor'
    
    Reported-by: Kuo, Hsuan-Chi <hckuo2@illinois.edu>
    Fixes: ff84136cb6a4 ("watchdog: add watchdog pretimeout governor framework")
    Signed-off-by: Vladimir Zapolskiy <vz@mleia.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 236048e53b5b21f38ae1ee3d2841a93c83205aba
Author: Georg Hofmann <georg@hofmannsweb.com>
Date:   Mon Apr 8 21:25:54 2019 +0200

    watchdog: imx2_wdt: Fix set_timeout for big timeout values
    
    [ Upstream commit b07e228eee69601addba98b47b1a3850569e5013 ]
    
    The documentated behavior is: if max_hw_heartbeat_ms is implemented, the
    minimum of the set_timeout argument and max_hw_heartbeat_ms should be used.
    This patch implements this behavior.
    Previously only the first 7bits were used and the input argument was
    returned.
    
    Signed-off-by: Georg Hofmann <georg@hofmannsweb.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4aa215d0230222375c385559d98be8f119626a05
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Apr 10 11:11:23 2019 -0700

    uml: fix a boot splat wrt use of cpu_all_mask
    
    [ Upstream commit 689a58605b63173acb0a8cf954af6a8f60440c93 ]
    
    Memory: 509108K/542612K available (3835K kernel code, 919K rwdata, 1028K rodata, 129K init, 211K bss, 33504K reserved, 0K cma-reserved)
    NR_IRQS: 15
    clocksource: timer: mask: 0xffffffffffffffff max_cycles: 0x1cd42e205, max_idle_ns: 881590404426 ns
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:458 clockevents_register_device+0x72/0x140
    posix-timer cpumask == cpu_all_mask, using cpu_possible_mask instead
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc4-00048-ged79cc87302b #4
    Stack:
     604ebda0 603c5370 604ebe20 6046fd17
     00000000 6006fcbb 604ebdb0 603c53b5
     604ebe10 6003bfc4 604ebdd0 9000001ca
    Call Trace:
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] ? clockevents_register_device+0x72/0x140
     [<6001f16e>] show_stack+0x13b/0x155
     [<603c5370>] ? dump_stack_print_info+0xe2/0xeb
     [<6006fcbb>] ? printk+0x0/0x94
     [<603c53b5>] dump_stack+0x2a/0x2c
     [<6003bfc4>] __warn+0x10e/0x13e
     [<60070320>] ? vprintk_func+0xc8/0xcf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6003c08b>] warn_slowpath_fmt+0x97/0x99
     [<600311a1>] ? set_signals+0x0/0x3f
     [<6003bff4>] ? warn_slowpath_fmt+0x0/0x99
     [<600842cb>] ? tick_oneshot_mode_active+0x44/0x4f
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6007d2d5>] ? __clocksource_select+0x20/0x1b1
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] clockevents_register_device+0x72/0x140
     [<60031192>] ? get_signals+0x0/0xf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60002eec>] um_timer_setup+0xc8/0xca
     [<60001b59>] start_kernel+0x47f/0x57e
     [<600035bc>] start_kernel_proc+0x49/0x4d
     [<6006c483>] ? kmsg_dump_register+0x82/0x8a
     [<6001de62>] new_thread_handler+0x81/0xb2
     [<60003571>] ? kmsg_dumper_stdout_init+0x1a/0x1c
     [<60020c75>] uml_finishsetup+0x54/0x59
    
    random: get_random_bytes called from init_oops_id+0x27/0x34 with crng_init=0
    ---[ end trace 00173d0117a88acb ]---
    Calibrating delay loop... 6941.90 BogoMIPS (lpj=34709504)
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: linux-um@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4681101c840f701fb5341eea038c43cc55bc8ef
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sun May 5 11:03:12 2019 +0800

    configfs: fix possible use-after-free in configfs_register_group
    
    [ Upstream commit 35399f87e271f7cf3048eab00a421a6519ac8441 ]
    
    In configfs_register_group(), if create_default_group() failed, we
    forget to unlink the group. It will left a invalid item in the parent list,
    which may trigger the use-after-free issue seen below:
    
    BUG: KASAN: use-after-free in __list_add_valid+0xd4/0xe0 lib/list_debug.c:26
    Read of size 8 at addr ffff8881ef61ae20 by task syz-executor.0/5996
    
    CPU: 1 PID: 5996 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xa9/0x10e lib/dump_stack.c:113
     print_address_description+0x65/0x270 mm/kasan/report.c:187
     kasan_report+0x149/0x18d mm/kasan/report.c:317
     __list_add_valid+0xd4/0xe0 lib/list_debug.c:26
     __list_add include/linux/list.h:60 [inline]
     list_add_tail include/linux/list.h:93 [inline]
     link_obj+0xb0/0x190 fs/configfs/dir.c:759
     link_group+0x1c/0x130 fs/configfs/dir.c:784
     configfs_register_group+0x56/0x1e0 fs/configfs/dir.c:1751
     configfs_register_default_group+0x72/0xc0 fs/configfs/dir.c:1834
     ? 0xffffffffc1be0000
     iio_sw_trigger_init+0x23/0x1000 [industrialio_sw_trigger]
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f494ecbcc58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003
    RBP: 00007f494ecbcc70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f494ecbd6bc
    R13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004
    
    Allocated by task 5987:
     set_track mm/kasan/common.c:87 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:497
     kmalloc include/linux/slab.h:545 [inline]
     kzalloc include/linux/slab.h:740 [inline]
     configfs_register_default_group+0x4c/0xc0 fs/configfs/dir.c:1829
     0xffffffffc1bd0023
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 5987:
     set_track mm/kasan/common.c:87 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:459
     slab_free_hook mm/slub.c:1429 [inline]
     slab_free_freelist_hook mm/slub.c:1456 [inline]
     slab_free mm/slub.c:3003 [inline]
     kfree+0xe1/0x270 mm/slub.c:3955
     configfs_register_default_group+0x9a/0xc0 fs/configfs/dir.c:1836
     0xffffffffc1bd0023
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881ef61ae00
     which belongs to the cache kmalloc-192 of size 192
    The buggy address is located 32 bytes inside of
     192-byte region [ffff8881ef61ae00, ffff8881ef61aec0)
    The buggy address belongs to the page:
    page:ffffea0007bd8680 count:1 mapcount:0 mapping:ffff8881f6c03000 index:0xffff8881ef61a700
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 ffffea0007ca4740 0000000500000005 ffff8881f6c03000
    raw: ffff8881ef61a700 000000008010000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881ef61ad00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8881ef61ad80: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    >ffff8881ef61ae00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                   ^
     ffff8881ef61ae80: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8881ef61af00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 5cf6a51e6062 ("configfs: allow dynamic group creation")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dff15a2de0e09f18eff67a7e5ade19eb4fb00eaf
Author: Chao Yu <chao@kernel.org>
Date:   Mon Apr 15 15:30:51 2019 +0800

    f2fs: fix to do sanity check on valid block count of segment
    
    [ Upstream commit e95bcdb2fefa129f37bd9035af1d234ca92ee4ef ]
    
    As Jungyeon reported in bugzilla:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=203233
    
    - Overview
    When mounting the attached crafted image and running program, following errors are reported.
    Additionally, it hangs on sync after running program.
    
    The image is intentionally fuzzed from a normal f2fs image for testing.
    Compile options for F2FS are as follows.
    CONFIG_F2FS_FS=y
    CONFIG_F2FS_STAT_FS=y
    CONFIG_F2FS_FS_XATTR=y
    CONFIG_F2FS_FS_POSIX_ACL=y
    CONFIG_F2FS_CHECK_FS=y
    
    - Reproduces
    cc poc_13.c
    mkdir test
    mount -t f2fs tmp.img test
    cp a.out test
    cd test
    sudo ./a.out
    sync
    
    - Kernel messages
     F2FS-fs (sdb): Bitmap was wrongly set, blk:4608
     kernel BUG at fs/f2fs/segment.c:2102!
     RIP: 0010:update_sit_entry+0x394/0x410
     Call Trace:
      f2fs_allocate_data_block+0x16f/0x660
      do_write_page+0x62/0x170
      f2fs_do_write_node_page+0x33/0xa0
      __write_node_page+0x270/0x4e0
      f2fs_sync_node_pages+0x5df/0x670
      f2fs_write_checkpoint+0x372/0x1400
      f2fs_sync_fs+0xa3/0x130
      f2fs_do_sync_file+0x1a6/0x810
      do_fsync+0x33/0x60
      __x64_sys_fsync+0xb/0x10
      do_syscall_64+0x43/0xf0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    sit.vblocks and sum valid block count in sit.valid_map may be
    inconsistent, segment w/ zero vblocks will be treated as free
    segment, while allocating in free segment, we may allocate a
    free block, if its bitmap is valid previously, it can cause
    kernel crash due to bitmap verification failure.
    
    Anyway, to avoid further serious metadata inconsistence and
    corruption, it is necessary and worth to detect SIT
    inconsistence. So let's enable check_block_count() to verify
    vblocks and valid_map all the time rather than do it only
    CONFIG_F2FS_CHECK_FS is enabled.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b6531673a2c085f72842d798d88b009ba727f5a
Author: Chao Yu <chao@kernel.org>
Date:   Mon Apr 15 15:28:33 2019 +0800

    f2fs: fix to clear dirty inode in error path of f2fs_iget()
    
    [ Upstream commit 546d22f070d64a7b96f57c93333772085d3a5e6d ]
    
    As Jungyeon reported in bugzilla:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=203217
    
    - Overview
    When mounting the attached crafted image and running program, I got this error.
    Additionally, it hangs on sync after running the program.
    
    The image is intentionally fuzzed from a normal f2fs image for testing and I enabled option CONFIG_F2FS_CHECK_FS on.
    
    - Reproduces
    cc poc_test_05.c
    mkdir test
    mount -t f2fs tmp.img test
    sudo ./a.out
    sync
    
    - Messages
     kernel BUG at fs/f2fs/inode.c:707!
     RIP: 0010:f2fs_evict_inode+0x33f/0x3a0
     Call Trace:
      evict+0xba/0x180
      f2fs_iget+0x598/0xdf0
      f2fs_lookup+0x136/0x320
      __lookup_slow+0x92/0x140
      lookup_slow+0x30/0x50
      walk_component+0x1c1/0x350
      path_lookupat+0x62/0x200
      filename_lookup+0xb3/0x1a0
      do_readlinkat+0x56/0x110
      __x64_sys_readlink+0x16/0x20
      do_syscall_64+0x43/0xf0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    During inode loading, __recover_inline_status() can recovery inode status
    and set inode dirty, once we failed in following process, it will fail
    the check in f2fs_evict_inode, result in trigger BUG_ON().
    
    Let's clear dirty inode in error path of f2fs_iget() to avoid panic.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cdbcbefd1d09272a9d4de94d87f6c45b86b651c
Author: Chao Yu <chao@kernel.org>
Date:   Mon Apr 15 15:28:37 2019 +0800

    f2fs: fix to avoid panic in do_recover_data()
    
    [ Upstream commit 22d61e286e2d9097dae36f75ed48801056b77cac ]
    
    As Jungyeon reported in bugzilla:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=203227
    
    - Overview
    When mounting the attached crafted image, following errors are reported.
    Additionally, it hangs on sync after trying to mount it.
    
    The image is intentionally fuzzed from a normal f2fs image for testing.
    Compile options for F2FS are as follows.
    CONFIG_F2FS_FS=y
    CONFIG_F2FS_STAT_FS=y
    CONFIG_F2FS_FS_XATTR=y
    CONFIG_F2FS_FS_POSIX_ACL=y
    CONFIG_F2FS_CHECK_FS=y
    
    - Reproduces
    mkdir test
    mount -t f2fs tmp.img test
    sync
    
    - Messages
     kernel BUG at fs/f2fs/recovery.c:549!
     RIP: 0010:recover_data+0x167a/0x1780
     Call Trace:
      f2fs_recover_fsync_data+0x613/0x710
      f2fs_fill_super+0x1043/0x1aa0
      mount_bdev+0x16d/0x1a0
      mount_fs+0x4a/0x170
      vfs_kern_mount+0x5d/0x100
      do_mount+0x200/0xcf0
      ksys_mount+0x79/0xc0
      __x64_sys_mount+0x1c/0x20
      do_syscall_64+0x43/0xf0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    During recovery, if ofs_of_node is inconsistent in between recovered
    node page and original checkpointed node page, let's just fail recovery
    instead of making kernel panic.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ab0886e03e48abe0ea0e8c9aabbd0ca533dafb3
Author: Miroslav Lichvar <mlichvar@redhat.com>
Date:   Wed Apr 17 10:48:33 2019 +0200

    ntp: Allow TAI-UTC offset to be set to zero
    
    [ Upstream commit fdc6bae940ee9eb869e493990540098b8c0fd6ab ]
    
    The ADJ_TAI adjtimex mode sets the TAI-UTC offset of the system clock.
    It is typically set by NTP/PTP implementations and it is automatically
    updated by the kernel on leap seconds. The initial value is zero (which
    applications may interpret as unknown), but this value cannot be set by
    adjtimex. This limitation seems to go back to the original "nanokernel"
    implementation by David Mills.
    
    Change the ADJ_TAI check to accept zero as a valid TAI-UTC offset in
    order to allow setting it back to the initial value.
    
    Fixes: 153b5d054ac2 ("ntp: support for TAI")
    Suggested-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Miroslav Lichvar <mlichvar@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Link: https://lkml.kernel.org/r/20190417084833.7401-1-mlichvar@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7541cb8df432cc60676f1be6d59044d944151e8
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Mon Apr 1 19:57:48 2019 +0200

    pwm: meson: Use the spin-lock only to protect register modifications
    
    [ Upstream commit f173747fffdf037c791405ab4f1ec0eb392fc48e ]
    
    Holding the spin-lock for all of the code in meson_pwm_apply() can
    result in a "BUG: scheduling while atomic". This can happen because
    clk_get_rate() (which is called from meson_pwm_calc()) may sleep.
    Only hold the spin-lock when modifying registers to solve this.
    
    The reason why we need a spin-lock in the driver is because the
    REG_MISC_AB register is shared between the two channels provided by one
    PWM controller. The only functions where REG_MISC_AB is modified are
    meson_pwm_enable() and meson_pwm_disable() so the register reads/writes
    in there need to be protected by the spin-lock.
    
    The original code also used the spin-lock to protect the values in
    struct meson_pwm_channel. This could be necessary if two consumers can
    use the same PWM channel. However, PWM core doesn't allow this so we
    don't need to protect the values in struct meson_pwm_channel with a
    lock.
    
    Fixes: 211ed630753d2f ("pwm: Add support for Meson PWM Controller")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ba76bf2137bfaff9a0e23317e27b0d66f7af01b
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Mon May 13 12:01:31 2019 -0500

    objtool: Don't use ignore flag for fake jumps
    
    [ Upstream commit e6da9567959e164f82bc81967e0d5b10dee870b4 ]
    
    The ignore flag is set on fake jumps in order to keep
    add_jump_destinations() from setting their jump_dest, since it already
    got set when the fake jump was created.
    
    But using the ignore flag is a bit of a hack.  It's normally used to
    skip validation of an instruction, which doesn't really make sense for
    fake jumps.
    
    Also, after the next patch, using the ignore flag for fake jumps can
    trigger a false "why am I validating an ignored function?" warning.
    
    Instead just add an explicit check in add_jump_destinations() to skip
    fake jumps.
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/71abc072ff48b2feccc197723a9c52859476c068.1557766718.git.jpoimboe@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad067e4fa39a12478e698d1bf62b746942259432
Author: Matt Redfearn <matt.redfearn@thinci.com>
Date:   Wed Apr 24 13:22:27 2019 +0000

    drm/bridge: adv7511: Fix low refresh rate selection
    
    [ Upstream commit 67793bd3b3948dc8c8384b6430e036a30a0ecb43 ]
    
    The driver currently sets register 0xfb (Low Refresh Rate) based on the
    value of mode->vrefresh. Firstly, this field is specified to be in Hz,
    but the magic numbers used by the code are Hz * 1000. This essentially
    leads to the low refresh rate always being set to 0x01, since the
    vrefresh value will always be less than 24000. Fix the magic numbers to
    be in Hz.
    Secondly, according to the comment in drm_modes.h, the field is not
    supposed to be used in a functional way anyway. Instead, use the helper
    function drm_mode_vrefresh().
    
    Fixes: 9c8af882bf12 ("drm: Add adv7511 encoder driver")
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Matt Redfearn <matt.redfearn@thinci.com>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190424132210.26338-1-matt.redfearn@thinci.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35dd88b1510f63ba47e47ce130ec1aab19f5177f
Author: Stephane Eranian <eranian@google.com>
Date:   Mon May 13 17:34:00 2019 -0700

    perf/x86/intel: Allow PEBS multi-entry in watermark mode
    
    [ Upstream commit c7a286577d7592720c2f179aadfb325a1ff48c95 ]
    
    This patch fixes a restriction/bug introduced by:
    
       583feb08e7f7 ("perf/x86/intel: Fix handling of wakeup_events for multi-entry PEBS")
    
    The original patch prevented using multi-entry PEBS when wakeup_events != 0.
    However given that wakeup_events is part of a union with wakeup_watermark, it
    means that in watermark mode, PEBS multi-entry is also disabled which is not the
    intent. This patch fixes this by checking is watermark mode is enabled.
    
    Signed-off-by: Stephane Eranian <eranian@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: jolsa@redhat.com
    Cc: kan.liang@intel.com
    Cc: vincent.weaver@maine.edu
    Fixes: 583feb08e7f7 ("perf/x86/intel: Fix handling of wakeup_events for multi-entry PEBS")
    Link: http://lkml.kernel.org/r/20190514003400.224340-1-eranian@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59e1b23b064a770ec59247ed7ce5c7d66d2151f8
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 14 08:03:45 2019 -0800

    mfd: twl6040: Fix device init errors for ACCCTL register
    
    [ Upstream commit 48171d0ea7caccf21c9ee3ae75eb370f2a756062 ]
    
    I noticed that we can get a -EREMOTEIO errors on at least omap4 duovero:
    
    twl6040 0-004b: Failed to write 2d = 19: -121
    
    And then any following register access will produce errors.
    
    There 2d offset above is register ACCCTL that gets written on twl6040
    powerup. With error checking added to the related regcache_sync() call,
    the -EREMOTEIO error is reproducable on twl6040 powerup at least
    duovero.
    
    To fix the error, we need to wait until twl6040 is accessible after the
    powerup. Based on tests on omap4 duovero, we need to wait over 8ms after
    powerup before register write will complete without failures. Let's also
    make sure we warn about possible errors too.
    
    Note that we have twl6040_patch[] reg_sequence with the ACCCTL register
    configuration and regcache_sync() will write the new value to ACCCTL.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 381a96852fedf7814746363e540f56678f34bea8
Author: Binbin Wu <binbin.wu@intel.com>
Date:   Mon Apr 8 16:09:10 2019 +0800

    mfd: intel-lpss: Set the device in reset state when init
    
    [ Upstream commit dad06532292d77f37fbe831a02948a593500f682 ]
    
    In virtualized setup, when system reboots due to warm
    reset interrupt storm is seen.
    
    Call Trace:
    <IRQ>
    dump_stack+0x70/0xa5
    __report_bad_irq+0x2e/0xc0
    note_interrupt+0x248/0x290
    ? add_interrupt_randomness+0x30/0x220
    handle_irq_event_percpu+0x54/0x80
    handle_irq_event+0x39/0x60
    handle_fasteoi_irq+0x91/0x150
    handle_irq+0x108/0x180
    do_IRQ+0x52/0xf0
    common_interrupt+0xf/0xf
    </IRQ>
    RIP: 0033:0x76fc2cfabc1d
    Code: 24 28 bf 03 00 00 00 31 c0 48 8d 35 63 77 0e 00 48 8d 15 2e
    94 0e 00 4c 89 f9 49 89 d9 4c 89 d3 e8 b8 e2 01 00 48 8b 54 24 18
    <48> 89 ef 48 89 de 4c 89 e1 e8 d5 97 01 00 84 c0 74 2d 48 8b 04
    24
    RSP: 002b:00007ffd247c1fc0 EFLAGS: 00000293 ORIG_RAX: ffffffffffffffda
    RAX: 0000000000000000 RBX: 00007ffd247c1ff0 RCX: 000000000003d3ce
    RDX: 0000000000000000 RSI: 00007ffd247c1ff0 RDI: 000076fc2cbb6010
    RBP: 000076fc2cded010 R08: 00007ffd247c2210 R09: 00007ffd247c22a0
    R10: 000076fc29465470 R11: 0000000000000000 R12: 00007ffd247c1fc0
    R13: 000076fc2ce8e470 R14: 000076fc27ec9960 R15: 0000000000000414
    handlers:
    [<000000000d3fa913>] idma64_irq
    Disabling IRQ #27
    
    To avoid interrupt storm, set the device in reset state
    before bringing out the device from reset state.
    
    Changelog v2:
    - correct the subject line by adding "mfd: "
    
    Signed-off-by: Binbin Wu <binbin.wu@intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef0bdc8d7b1c80040ec2ba9ada7c963655471590
Author: Daniel Gomez <dagmcr@gmail.com>
Date:   Mon Apr 22 21:09:50 2019 +0200

    mfd: tps65912-spi: Add missing of table registration
    
    [ Upstream commit 9e364e87ad7f2c636276c773d718cda29d62b741 ]
    
    MODULE_DEVICE_TABLE(of, <of_match_table> should be called to complete DT
    OF mathing mechanism and register it.
    
    Before this patch:
    modinfo drivers/mfd/tps65912-spi.ko | grep alias
    alias:          spi:tps65912
    
    After this patch:
    modinfo drivers/mfd/tps65912-spi.ko | grep alias
    alias:          of:N*T*Cti,tps65912C*
    alias:          of:N*T*Cti,tps65912
    alias:          spi:tps65912
    
    Reported-by: Javier Martinez Canillas <javier@dowhile0.org>
    Signed-off-by: Daniel Gomez <dagmcr@gmail.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bad5f0b76853dedc0ff46887d020a7d7a4350b08
Author: Amit Kucheria <amit.kucheria@linaro.org>
Date:   Wed Mar 20 18:47:52 2019 +0530

    drivers: thermal: tsens: Don't print error message on -EPROBE_DEFER
    
    [ Upstream commit fc7d18cf6a923cde7f5e7ba2c1105bb106d3e29a ]
    
    We print a calibration failure message on -EPROBE_DEFER from
    nvmem/qfprom as follows:
    [    3.003090] qcom-tsens 4a9000.thermal-sensor: version: 1.4
    [    3.005376] qcom-tsens 4a9000.thermal-sensor: tsens calibration failed
    [    3.113248] qcom-tsens 4a9000.thermal-sensor: version: 1.4
    
    This confuses people when, in fact, calibration succeeds later when
    nvmem/qfprom device is available. Don't print this message on a
    -EPROBE_DEFER.
    
    Signed-off-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e74cb9e009cf37a39b767f341365eb9548d8ba86
Author: Cyrill Gorcunov <gorcunov@gmail.com>
Date:   Mon May 13 17:15:40 2019 -0700

    kernel/sys.c: prctl: fix false positive in validate_prctl_map()
    
    [ Upstream commit a9e73998f9d705c94a8dca9687633adc0f24a19a ]
    
    While validating new map we require the @start_data to be strictly less
    than @end_data, which is fine for regular applications (this is why this
    nit didn't trigger for that long).  These members are set from executable
    loaders such as elf handers, still it is pretty valid to have a loadable
    data section with zero size in file, in such case the start_data is equal
    to end_data once kernel loader finishes.
    
    As a result when we're trying to restore such programs the procedure fails
    and the kernel returns -EINVAL.  From the image dump of a program:
    
     | "mm_start_code": "0x400000",
     | "mm_end_code": "0x8f5fb4",
     | "mm_start_data": "0xf1bfb0",
     | "mm_end_data": "0xf1bfb0",
    
    Thus we need to change validate_prctl_map from strictly less to less or
    equal operator use.
    
    Link: http://lkml.kernel.org/r/20190408143554.GY1421@uranus.lan
    Fixes: f606b77f1a9e3 ("prctl: PR_SET_MM -- introduce PR_SET_MM_MAP operation")
    Signed-off-by: Cyrill Gorcunov <gorcunov@gmail.com>
    Cc: Andrey Vagin <avagin@gmail.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dd334518f438e7cd406820f77dafc096d8fd6fb
Author: Qian Cai <cai@lca.pw>
Date:   Mon May 13 17:16:31 2019 -0700

    mm/slab.c: fix an infinite loop in leaks_show()
    
    [ Upstream commit 745e10146c31b1c6ed3326286704ae251b17f663 ]
    
    "cat /proc/slab_allocators" could hang forever on SMP machines with
    kmemleak or object debugging enabled due to other CPUs running do_drain()
    will keep making kmemleak_object or debug_objects_cache dirty and unable
    to escape the first loop in leaks_show(),
    
    do {
            set_store_user_clean(cachep);
            drain_cpu_caches(cachep);
            ...
    
    } while (!is_store_user_clean(cachep));
    
    For example,
    
    do_drain
      slabs_destroy
        slab_destroy
          kmem_cache_free
            __cache_free
              ___cache_free
                kmemleak_free_recursive
                  delete_object_full
                    __delete_object
                      put_object
                        free_object_rcu
                          kmem_cache_free
                            cache_free_debugcheck --> dirty kmemleak_object
    
    One approach is to check cachep->name and skip both kmemleak_object and
    debug_objects_cache in leaks_show().  The other is to set store_user_clean
    after drain_cpu_caches() which leaves a small window between
    drain_cpu_caches() and set_store_user_clean() where per-CPU caches could
    be dirty again lead to slightly wrong information has been stored but
    could also speed up things significantly which sounds like a good
    compromise.  For example,
    
     # cat /proc/slab_allocators
     0m42.778s # 1st approach
     0m0.737s  # 2nd approach
    
    [akpm@linux-foundation.org: tweak comment]
    Link: http://lkml.kernel.org/r/20190411032635.10325-1-cai@lca.pw
    Fixes: d31676dfde25 ("mm/slab: alternative implementation for DEBUG_SLAB_LEAK")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aab90fdbb31a616e69533521d45aa302fd275dd0
Author: Yue Hu <huyue2@yulong.com>
Date:   Mon May 13 17:16:37 2019 -0700

    mm/cma_debug.c: fix the break condition in cma_maxchunk_get()
    
    [ Upstream commit f0fd50504a54f5548eb666dc16ddf8394e44e4b7 ]
    
    If not find zero bit in find_next_zero_bit(), it will return the size
    parameter passed in, so the start bit should be compared with bitmap_maxno
    rather than cma->count.  Although getting maxchunk is working fine due to
    zero value of order_per_bit currently, the operation will be stuck if
    order_per_bit is set as non-zero.
    
    Link: http://lkml.kernel.org/r/20190319092734.276-1-zbestahu@gmail.com
    Signed-off-by: Yue Hu <huyue2@yulong.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Dmitry Safonov <d.safonov@partner.samsung.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f759452ba7c8876d20f1bc4c3687f32bb1488f3
Author: Yue Hu <huyue2@yulong.com>
Date:   Mon May 13 17:18:14 2019 -0700

    mm/cma.c: fix crash on CMA allocation if bitmap allocation fails
    
    [ Upstream commit 1df3a339074e31db95c4790ea9236874b13ccd87 ]
    
    f022d8cb7ec7 ("mm: cma: Don't crash on allocation if CMA area can't be
    activated") fixes the crash issue when activation fails via setting
    cma->count as 0, same logic exists if bitmap allocation fails.
    
    Link: http://lkml.kernel.org/r/20190325081309.6004-1-zbestahu@gmail.com
    Signed-off-by: Yue Hu <huyue2@yulong.com>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 121100e4798f7760747283259610829c2206ebd1
Author: Linxu Fang <fanglinxu@huawei.com>
Date:   Mon May 13 17:19:17 2019 -0700

    mem-hotplug: fix node spanned pages when we have a node with only ZONE_MOVABLE
    
    [ Upstream commit 299c83dce9ea3a79bb4b5511d2cb996b6b8e5111 ]
    
    342332e6a925 ("mm/page_alloc.c: introduce kernelcore=mirror option") and
    later patches rewrote the calculation of node spanned pages.
    
    e506b99696a2 ("mem-hotplug: fix node spanned pages when we have a movable
    node"), but the current code still has problems,
    
    When we have a node with only zone_movable and the node id is not zero,
    the size of node spanned pages is double added.
    
    That's because we have an empty normal zone, and zone_start_pfn or
    zone_end_pfn is not between arch_zone_lowest_possible_pfn and
    arch_zone_highest_possible_pfn, so we need to use clamp to constrain the
    range just like the commit <96e907d13602> (bootmem: Reimplement
    __absent_pages_in_range() using for_each_mem_pfn_range()).
    
    e.g.
    Zone ranges:
      DMA      [mem 0x0000000000001000-0x0000000000ffffff]
      DMA32    [mem 0x0000000001000000-0x00000000ffffffff]
      Normal   [mem 0x0000000100000000-0x000000023fffffff]
    Movable zone start for each node
      Node 0: 0x0000000100000000
      Node 1: 0x0000000140000000
    Early memory node ranges
      node   0: [mem 0x0000000000001000-0x000000000009efff]
      node   0: [mem 0x0000000000100000-0x00000000bffdffff]
      node   0: [mem 0x0000000100000000-0x000000013fffffff]
      node   1: [mem 0x0000000140000000-0x000000023fffffff]
    
    node 0 DMA      spanned:0xfff   present:0xf9e   absent:0x61
    node 0 DMA32    spanned:0xff000 present:0xbefe0 absent:0x40020
    node 0 Normal   spanned:0       present:0       absent:0
    node 0 Movable  spanned:0x40000 present:0x40000 absent:0
    On node 0 totalpages(node_present_pages): 1048446
    node_spanned_pages:1310719
    node 1 DMA      spanned:0           present:0           absent:0
    node 1 DMA32    spanned:0           present:0           absent:0
    node 1 Normal   spanned:0x100000    present:0x100000    absent:0
    node 1 Movable  spanned:0x100000    present:0x100000    absent:0
    On node 1 totalpages(node_present_pages): 2097152
    node_spanned_pages:2097152
    Memory: 6967796K/12582392K available (16388K kernel code, 3686K rwdata,
    4468K rodata, 2160K init, 10444K bss, 5614596K reserved, 0K
    cma-reserved)
    
    It shows that the current memory of node 1 is double added.
    After this patch, the problem is fixed.
    
    node 0 DMA      spanned:0xfff   present:0xf9e   absent:0x61
    node 0 DMA32    spanned:0xff000 present:0xbefe0 absent:0x40020
    node 0 Normal   spanned:0       present:0       absent:0
    node 0 Movable  spanned:0x40000 present:0x40000 absent:0
    On node 0 totalpages(node_present_pages): 1048446
    node_spanned_pages:1310719
    node 1 DMA      spanned:0           present:0           absent:0
    node 1 DMA32    spanned:0           present:0           absent:0
    node 1 Normal   spanned:0           present:0           absent:0
    node 1 Movable  spanned:0x100000    present:0x100000    absent:0
    On node 1 totalpages(node_present_pages): 1048576
    node_spanned_pages:1048576
    memory: 6967796K/8388088K available (16388K kernel code, 3686K rwdata,
    4468K rodata, 2160K init, 10444K bss, 1420292K reserved, 0K
    cma-reserved)
    
    Link: http://lkml.kernel.org/r/1554178276-10372-1-git-send-email-fanglinxu@huawei.com
    Signed-off-by: Linxu Fang <fanglinxu@huawei.com>
    Cc: Taku Izumi <izumi.taku@jp.fujitsu.com>
    Cc: Xishi Qiu <qiuxishi@huawei.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Pavel Tatashin <pavel.tatashin@microsoft.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c2e04117d67fca72aeeda5e8037afdf612239ad
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Mon May 13 17:19:38 2019 -0700

    hugetlbfs: on restore reserve error path retain subpool reservation
    
    [ Upstream commit 0919e1b69ab459e06df45d3ba6658d281962db80 ]
    
    When a huge page is allocated, PagePrivate() is set if the allocation
    consumed a reservation.  When freeing a huge page, PagePrivate is checked.
    If set, it indicates the reservation should be restored.  PagePrivate
    being set at free huge page time mostly happens on error paths.
    
    When huge page reservations are created, a check is made to determine if
    the mapping is associated with an explicitly mounted filesystem.  If so,
    pages are also reserved within the filesystem.  The default action when
    freeing a huge page is to decrement the usage count in any associated
    explicitly mounted filesystem.  However, if the reservation is to be
    restored the reservation/use count within the filesystem should not be
    decrementd.  Otherwise, a subsequent page allocation and free for the same
    mapping location will cause the file filesystem usage to go 'negative'.
    
    Filesystem                         Size  Used Avail Use% Mounted on
    nodev                              4.0G -4.0M  4.1G    - /opt/hugepool
    
    To fix, when freeing a huge page do not adjust filesystem usage if
    PagePrivate() is set to indicate the reservation should be restored.
    
    I did not cc stable as the problem has been around since reserves were
    added to hugetlbfs and nobody has noticed.
    
    Link: http://lkml.kernel.org/r/20190328234704.27083-2-mike.kravetz@oracle.com
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98e17edae54b97132c9f21b2837dbb233c6dac1e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 14 15:41:48 2019 -0700

    ARM: prevent tracing IPI_CPU_BACKTRACE
    
    [ Upstream commit be167862ae7dd85c56d385209a4890678e1b0488 ]
    
    Patch series "compiler: allow all arches to enable
    CONFIG_OPTIMIZE_INLINING", v3.
    
    This patch (of 11):
    
    When function tracing for IPIs is enabled, we get a warning for an
    overflow of the ipi_types array with the IPI_CPU_BACKTRACE type as
    triggered by raise_nmi():
    
      arch/arm/kernel/smp.c: In function 'raise_nmi':
      arch/arm/kernel/smp.c:489:2: error: array subscript is above array bounds [-Werror=array-bounds]
        trace_ipi_raise(target, ipi_types[ipinr]);
    
    This is a correct warning as we actually overflow the array here.
    
    This patch raise_nmi() to call __smp_cross_call() instead of
    smp_cross_call(), to avoid calling into ftrace.  For clarification, I'm
    also adding a two new code comments describing how this one is special.
    
    The warning appears to have shown up after commit e7273ff49acf ("ARM:
    8488/1: Make IPI_CPU_BACKTRACE a "non-secure" SGI"), which changed the
    number assignment from '15' to '8', but as far as I can tell has existed
    since the IPI tracepoints were first introduced.  If we decide to
    backport this patch to stable kernels, we probably need to backport
    e7273ff49acf as well.
    
    [yamada.masahiro@socionext.com: rebase on v5.1-rc1]
    Link: http://lkml.kernel.org/r/20190423034959.13525-2-yamada.masahiro@socionext.com
    Fixes: e7273ff49acf ("ARM: 8488/1: Make IPI_CPU_BACKTRACE a "non-secure" SGI")
    Fixes: 365ec7b17327 ("ARM: add IPI tracepoints") # v3.17
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: Mathieu Malaterre <malat@debian.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Stefan Agner <stefan@agner.ch>
    Cc: Boris Brezillon <bbrezillon@kernel.org>
    Cc: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Brian Norris <computersforpeace@gmail.com>
    Cc: Marek Vasut <marek.vasut@gmail.com>
    Cc: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b5598c8ad118d0f9d3c6b3850e1f09c7d512487
Author: Li Rongqing <lirongqing@baidu.com>
Date:   Tue May 14 15:46:20 2019 -0700

    ipc: prevent lockup on alloc_msg and free_msg
    
    [ Upstream commit d6a2946a88f524a47cc9b79279667137899db807 ]
    
    msgctl10 of ltp triggers the following lockup When CONFIG_KASAN is
    enabled on large memory SMP systems, the pages initialization can take a
    long time, if msgctl10 requests a huge block memory, and it will block
    rcu scheduler, so release cpu actively.
    
    After adding schedule() in free_msg, free_msg can not be called when
    holding spinlock, so adding msg to a tmp list, and free it out of
    spinlock
    
      rcu: INFO: rcu_preempt detected stalls on CPUs/tasks:
      rcu:     Tasks blocked on level-1 rcu_node (CPUs 16-31): P32505
      rcu:     Tasks blocked on level-1 rcu_node (CPUs 48-63): P34978
      rcu:     (detected by 11, t=35024 jiffies, g=44237529, q=16542267)
      msgctl10        R  running task    21608 32505   2794 0x00000082
      Call Trace:
       preempt_schedule_irq+0x4c/0xb0
       retint_kernel+0x1b/0x2d
      RIP: 0010:__is_insn_slot_addr+0xfb/0x250
      Code: 82 1d 00 48 8b 9b 90 00 00 00 4c 89 f7 49 c1 ee 03 e8 59 83 1d 00 48 b8 00 00 00 00 00 fc ff df 4c 39 eb 48 89 9d 58 ff ff ff <41> c6 04 06 f8 74 66 4c 8d 75 98 4c 89 f1 48 c1 e9 03 48 01 c8 48
      RSP: 0018:ffff88bce041f758 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13
      RAX: dffffc0000000000 RBX: ffffffff8471bc50 RCX: ffffffff828a2a57
      RDX: dffffc0000000000 RSI: dffffc0000000000 RDI: ffff88bce041f780
      RBP: ffff88bce041f828 R08: ffffed15f3f4c5b3 R09: ffffed15f3f4c5b3
      R10: 0000000000000001 R11: ffffed15f3f4c5b2 R12: 000000318aee9b73
      R13: ffffffff8471bc50 R14: 1ffff1179c083ef0 R15: 1ffff1179c083eec
       kernel_text_address+0xc1/0x100
       __kernel_text_address+0xe/0x30
       unwind_get_return_address+0x2f/0x50
       __save_stack_trace+0x92/0x100
       create_object+0x380/0x650
       __kmalloc+0x14c/0x2b0
       load_msg+0x38/0x1a0
       do_msgsnd+0x19e/0xcf0
       do_syscall_64+0x117/0x400
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      rcu: INFO: rcu_preempt detected stalls on CPUs/tasks:
      rcu:     Tasks blocked on level-1 rcu_node (CPUs 0-15): P32170
      rcu:     (detected by 14, t=35016 jiffies, g=44237525, q=12423063)
      msgctl10        R  running task    21608 32170  32155 0x00000082
      Call Trace:
       preempt_schedule_irq+0x4c/0xb0
       retint_kernel+0x1b/0x2d
      RIP: 0010:lock_acquire+0x4d/0x340
      Code: 48 81 ec c0 00 00 00 45 89 c6 4d 89 cf 48 8d 6c 24 20 48 89 3c 24 48 8d bb e4 0c 00 00 89 74 24 0c 48 c7 44 24 20 b3 8a b5 41 <48> c1 ed 03 48 c7 44 24 28 b4 25 18 84 48 c7 44 24 30 d0 54 7a 82
      RSP: 0018:ffff88af83417738 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff13
      RAX: dffffc0000000000 RBX: ffff88bd335f3080 RCX: 0000000000000002
      RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff88bd335f3d64
      RBP: ffff88af83417758 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000001 R11: ffffed13f3f745b2 R12: 0000000000000000
      R13: 0000000000000002 R14: 0000000000000000 R15: 0000000000000000
       is_bpf_text_address+0x32/0xe0
       kernel_text_address+0xec/0x100
       __kernel_text_address+0xe/0x30
       unwind_get_return_address+0x2f/0x50
       __save_stack_trace+0x92/0x100
       save_stack+0x32/0xb0
       __kasan_slab_free+0x130/0x180
       kfree+0xfa/0x2d0
       free_msg+0x24/0x50
       do_msgrcv+0x508/0xe60
       do_syscall_64+0x117/0x400
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Davidlohr said:
     "So after releasing the lock, the msg rbtree/list is empty and new
      calls will not see those in the newly populated tmp_msg list, and
      therefore they cannot access the delayed msg freeing pointers, which
      is good. Also the fact that the node_cache is now freed before the
      actual messages seems to be harmless as this is wanted for
      msg_insert() avoiding GFP_ATOMIC allocations, and after releasing the
      info->lock the thing is freed anyway so it should not change things"
    
    Link: http://lkml.kernel.org/r/1552029161-4957-1-git-send-email-lirongqing@baidu.com
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
    Reviewed-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 726f69d32719db4543409b637bd163e30efe07e5
Author: Christian Brauner <christian@brauner.io>
Date:   Tue May 14 15:44:55 2019 -0700

    sysctl: return -EINVAL if val violates minmax
    
    [ Upstream commit e260ad01f0aa9e96b5386d5cd7184afd949dc457 ]
    
    Currently when userspace gives us a values that overflow e.g.  file-max
    and other callers of __do_proc_doulongvec_minmax() we simply ignore the
    new value and leave the current value untouched.
    
    This can be problematic as it gives the illusion that the limit has
    indeed be bumped when in fact it failed.  This commit makes sure to
    return EINVAL when an overflow is detected.  Please note that this is a
    userspace facing change.
    
    Link: http://lkml.kernel.org/r/20190210203943.8227-4-christian@brauner.io
    Signed-off-by: Christian Brauner <christian@brauner.io>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Waiman Long <longman@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc2df631124d0df171a3b405211920776db80052
Author: Hou Tao <houtao1@huawei.com>
Date:   Tue May 14 15:44:32 2019 -0700

    fs/fat/file.c: issue flush after the writeback of FAT
    
    [ Upstream commit bd8309de0d60838eef6fb575b0c4c7e95841cf73 ]
    
    fsync() needs to make sure the data & meta-data of file are persistent
    after the return of fsync(), even when a power-failure occurs later.  In
    the case of fat-fs, the FAT belongs to the meta-data of file, so we need
    to issue a flush after the writeback of FAT instead before.
    
    Also bail out early when any stage of fsync fails.
    
    Link: http://lkml.kernel.org/r/20190409030158.136316-1-houtao1@huawei.com
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Acked-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 506e0ced8dc3f2cccca5e72e9aeb572e0315c367
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Tue May 14 15:44:49 2019 -0700

    rapidio: fix a NULL pointer dereference when create_workqueue() fails
    
    [ Upstream commit 23015b22e47c5409620b1726a677d69e5cd032ba ]
    
    In case create_workqueue fails, the fix releases resources and returns
    -ENOMEM to avoid NULL pointer dereference.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Acked-by: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
