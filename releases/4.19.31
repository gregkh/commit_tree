commit a2cddfe2ce6e9108341820fff8af46713685b2cb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Mar 23 20:10:14 2019 +0100

    Linux 4.19.31

commit 3053cb9701cdb12919fc7ad815aa022182cb8f07
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Mon Feb 18 18:10:08 2019 +0100

    s390/setup: fix boot crash for machine without EDAT-1
    
    commit 86a86804e4f18fc3880541b3d5a07f4df0fe29cb upstream.
    
    The fix to make WARN work in the early boot code created a problem
    on older machines without EDAT-1. The setup_lowcore_dat_on function
    uses the pointer from lowcore_ptr[0] to set the DAT bit in the new
    PSWs. That does not work if the kernel page table is set up with
    4K pages as the prefix address maps to absolute zero.
    
    To make this work the PSWs need to be changed with via address 0 in
    form of the S390_lowcore definition.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Cornelia Huck <cohuck@redhat.com>
    Fixes: 94f85ed3e2f8 ("s390/setup: fix early warning messages")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e578f90d8a9cb6d4ae2e6cadc8aaab6e9a2aa656
Author: Coly Li <colyli@suse.de>
Date:   Sat Feb 9 12:53:11 2019 +0800

    bcache: use (REQ_META|REQ_PRIO) to indicate bio for metadata
    
    commit dc7292a5bcb4c878b076fca2ac3fc22f81b8f8df upstream.
    
    In 'commit 752f66a75aba ("bcache: use REQ_PRIO to indicate bio for
    metadata")' REQ_META is replaced by REQ_PRIO to indicate metadata bio.
    This assumption is not always correct, e.g. XFS uses REQ_META to mark
    metadata bio other than REQ_PRIO. This is why Nix noticed that bcache
    does not cache metadata for XFS after the above commit.
    
    Thanks to Dave Chinner, he explains the difference between REQ_META and
    REQ_PRIO from view of file system developer. Here I quote part of his
    explanation from mailing list,
       REQ_META is used for metadata. REQ_PRIO is used to communicate to
       the lower layers that the submitter considers this IO to be more
       important that non REQ_PRIO IO and so dispatch should be expedited.
    
       IOWs, if the filesystem considers metadata IO to be more important
       that user data IO, then it will use REQ_PRIO | REQ_META rather than
       just REQ_META.
    
    Then it seems bios with REQ_META or REQ_PRIO should both be cached for
    performance optimation, because they are all probably low I/O latency
    demand by upper layer (e.g. file system).
    
    So in this patch, when we want to decide whether to bypass the cache,
    REQ_META and REQ_PRIO are both checked. Then both metadata and
    high priority I/O requests will be handled properly.
    
    Reported-by: Nix <nix@esperi.org.uk>
    Signed-off-by: Coly Li <colyli@suse.de>
    Reviewed-by: Andre Noll <maan@tuebingen.mpg.de>
    Tested-by: Nix <nix@esperi.org.uk>
    Cc: stable@vger.kernel.org
    Cc: Dave Chinner <david@fromorbit.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ffb710b03d5172594ed013951a31b5f28875322
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 23 14:39:25 2019 -0800

    KVM: nVMX: Ignore limit checks on VMX instructions using flat segments
    
    commit 34333cc6c2cb021662fd32e24e618d1b86de95bf upstream.
    
    Regarding segments with a limit==0xffffffff, the SDM officially states:
    
        When the effective limit is FFFFFFFFH (4 GBytes), these accesses may
        or may not cause the indicated exceptions.  Behavior is
        implementation-specific and may vary from one execution to another.
    
    In practice, all CPUs that support VMX ignore limit checks for "flat
    segments", i.e. an expand-up data or code segment with base=0 and
    limit=0xffffffff.  This is subtly different than wrapping the effective
    address calculation based on the address size, as the flat segment
    behavior also applies to accesses that would wrap the 4g boundary, e.g.
    a 4-byte access starting at 0xffffffff will access linear addresses
    0xffffffff, 0x0, 0x1 and 0x2.
    
    Fixes: f9eb4af67c9d ("KVM: nVMX: VMX instructions: add checks for #GP/#SS exceptions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29b515c27c0abd6933dc86a6c374658f85828244
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 23 14:39:24 2019 -0800

    KVM: nVMX: Apply addr size mask to effective address for VMX instructions
    
    commit 8570f9e881e3fde98801bb3a47eef84dd934d405 upstream.
    
    The address size of an instruction affects the effective address, not
    the virtual/linear address.  The final address may still be truncated,
    e.g. to 32-bits outside of long mode, but that happens irrespective of
    the address size, e.g. a 32-bit address size can yield a 64-bit virtual
    address when using FS/GS with a non-zero base.
    
    Fixes: 064aea774768 ("KVM: nVMX: Decoding memory operands of VMX instructions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ce0ffeb68b6b78c5186add2295d961226b0bbf9
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 23 14:39:23 2019 -0800

    KVM: nVMX: Sign extend displacements of VMX instr's mem operands
    
    commit 946c522b603f281195af1df91837a1d4d1eb3bc9 upstream.
    
    The VMCS.EXIT_QUALIFCATION field reports the displacements of memory
    operands for various instructions, including VMX instructions, as a
    naturally sized unsigned value, but masks the value by the addr size,
    e.g. given a ModRM encoded as -0x28(%ebp), the -0x28 displacement is
    reported as 0xffffffd8 for a 32-bit address size.  Despite some weird
    wording regarding sign extension, the SDM explicitly states that bits
    beyond the instructions address size are undefined:
    
        In all cases, bits of this field beyond the instructionâ€™s address
        size are undefined.
    
    Failure to sign extend the displacement results in KVM incorrectly
    treating a negative displacement as a large positive displacement when
    the address size of the VMX instruction is smaller than KVM's native
    size, e.g. a 32-bit address size on a 64-bit KVM.
    
    The very original decoding, added by commit 064aea774768 ("KVM: nVMX:
    Decoding memory operands of VMX instructions"), sort of modeled sign
    extension by truncating the final virtual/linear address for a 32-bit
    address size.  I.e. it messed up the effective address but made it work
    by adjusting the final address.
    
    When segmentation checks were added, the truncation logic was kept
    as-is and no sign extension logic was introduced.  In other words, it
    kept calculating the wrong effective address while mostly generating
    the correct virtual/linear address.  As the effective address is what's
    used in the segment limit checks, this results in KVM incorreclty
    injecting #GP/#SS faults due to non-existent segment violations when
    a nested VMM uses negative displacements with an address size smaller
    than KVM's native address size.
    
    Using the -0x28(%ebp) example, an EBP value of 0x1000 will result in
    KVM using 0x100000fd8 as the effective address when checking for a
    segment limit violation.  This causes a 100% failure rate when running
    a 32-bit KVM build as L1 on top of a 64-bit KVM L0.
    
    Fixes: f9eb4af67c9d ("KVM: nVMX: VMX instructions: add checks for #GP/#SS exceptions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c235af5a10f24463c037e6575a2e1195e74fa201
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Feb 5 13:01:13 2019 -0800

    KVM: x86/mmu: Do not cache MMIO accesses while memslots are in flux
    
    commit ddfd1730fd829743e41213e32ccc8b4aa6dc8325 upstream.
    
    When installing new memslots, KVM sets bit 0 of the generation number to
    indicate that an update is in-progress.  Until the update is complete,
    there are no guarantees as to whether a vCPU will see the old or the new
    memslots.  Explicity prevent caching MMIO accesses so as to avoid using
    an access cached from the old memslots after the new memslots have been
    installed.
    
    Note that it is unclear whether or not disabling caching during the
    update window is strictly necessary as there is no definitive
    documentation as to what ordering guarantees KVM provides with respect
    to updating memslots.  That being said, the MMIO spte code does not
    allow reusing sptes created while an update is in-progress, and the
    associated documentation explicitly states:
    
        We do not want to use an MMIO sptes created with an odd generation
        number, ...  If KVM is unlucky and creates an MMIO spte while the
        low bit is 1, the next access to the spte will always be a cache miss.
    
    At the very least, disabling the per-vCPU MMIO cache during updates will
    make its behavior consistent with the MMIO spte behavior and
    documentation.
    
    Fixes: 56f17dd3fbc4 ("kvm: x86: fix stale mmio cache bug")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 656e9e5d5529aed6fcbeab584959dea382549d1b
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Feb 5 13:01:12 2019 -0800

    KVM: x86/mmu: Detect MMIO generation wrap in any address space
    
    commit e1359e2beb8b0a1188abc997273acbaedc8ee791 upstream.
    
    The check to detect a wrap of the MMIO generation explicitly looks for a
    generation number of zero.  Now that unique memslots generation numbers
    are assigned to each address space, only address space 0 will get a
    generation number of exactly zero when wrapping.  E.g. when address
    space 1 goes from 0x7fffe to 0x80002, the MMIO generation number will
    wrap to 0x2.  Adjust the MMIO generation to strip the address space
    modifier prior to checking for a wrap.
    
    Fixes: 4bd518f1598d ("KVM: use separate generations for each address space")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23ad135ae66f7f2b743885b47867c2bd636baf1f
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Feb 5 12:54:17 2019 -0800

    KVM: Call kvm_arch_memslots_updated() before updating memslots
    
    commit 152482580a1b0accb60676063a1ac57b2d12daf6 upstream.
    
    kvm_arch_memslots_updated() is at this point in time an x86-specific
    hook for handling MMIO generation wraparound.  x86 stashes 19 bits of
    the memslots generation number in its MMIO sptes in order to avoid
    full page fault walks for repeat faults on emulated MMIO addresses.
    Because only 19 bits are used, wrapping the MMIO generation number is
    possible, if unlikely.  kvm_arch_memslots_updated() alerts x86 that
    the generation has changed so that it can invalidate all MMIO sptes in
    case the effective MMIO generation has wrapped so as to avoid using a
    stale spte, e.g. a (very) old spte that was created with generation==0.
    
    Given that the purpose of kvm_arch_memslots_updated() is to prevent
    consuming stale entries, it needs to be called before the new generation
    is propagated to memslots.  Invalidating the MMIO sptes after updating
    memslots means that there is a window where a vCPU could dereference
    the new memslots generation, e.g. 0, and incorrectly reuse an old MMIO
    spte that was created with (pre-wrap) generation==0.
    
    Fixes: e59dbe09f8e6 ("KVM: Introduce kvm_arch_memslots_updated()")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 585715ef18bf147fb11b1f0731eb6d6f50fbdb45
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Wed Jan 30 15:45:18 2019 -0500

    drm/amd/display: don't call dm_pp_ function from an fpu block
    
    commit 59d3191f14dc18881fec1172c7096b7863622803 upstream.
    
    Powerplay functions called from dm_pp_* functions tend to do a
    mutex_lock which isn't safe to do inside a kernel_fpu_begin/end block as
    those will disable/enable preemption.
    
    Rearrange the dm_pp_get_clock_levels_by_type_with_voltage calls to make
    sure they happen outside of kernel_fpu_begin/end.
    
    Cc: stable@vger.kernel.org
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17982c6a649b556b4f9ef43b65277e5462cb4044
Author: Evan Quan <evan.quan@amd.com>
Date:   Mon Feb 25 16:44:36 2019 +0800

    drm/amd/powerplay: correct power reading on fiji
    
    commit f5742ec36422a39b57f0256e4847f61b3c432f8c upstream.
    
    Set sampling period as 500ms to provide a smooth power
    reading output. Also, correct the register for power
    reading.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 808b1c1e28e8e319a71550e321d94eea79a4aa06
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Fri Feb 15 14:29:26 2019 -0600

    drm/radeon/evergreen_cs: fix missing break in switch statement
    
    commit cc5034a5d293dd620484d1d836aa16c6764a1c8c upstream.
    
    Add missing break statement in order to prevent the code from falling
    through to case CB_TARGET_MASK.
    
    This bug was found thanks to the ongoing efforts to enable
    -Wimplicit-fallthrough.
    
    Fixes: dd220a00e8bd ("drm/radeon/kms: add support for streamout v7")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bc6e5673949e12adfbb8aca740e171b0e32609c
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Fri Jan 25 16:03:00 2019 +0100

    drm/fb-helper: generic: Fix drm_fbdev_client_restore()
    
    commit 78de14c23e031420aa5f61973583635eccd6cd2a upstream.
    
    If fbdev setup has failed, lastclose will give a NULL pointer deref:
    
    [   77.794295] [drm:drm_lastclose]
    [   77.794414] [drm:drm_lastclose] driver lastclose completed
    [   77.794660] Unable to handle kernel NULL pointer dereference at virtual address 00000014
    [   77.809460] pgd = b376b71b
    [   77.818275] [00000014] *pgd=175ba831, *pte=00000000, *ppte=00000000
    [   77.830813] Internal error: Oops: 17 [#1] ARM
    [   77.840963] Modules linked in: mi0283qt mipi_dbi tinydrm raspberrypi_hwmon gpio_backlight backlight snd_bcm2835(C) bcm2835_rng rng_core
    [   77.865203] CPU: 0 PID: 527 Comm: lt-modetest Tainted: G         C        5.0.0-rc1+ #1
    [   77.879525] Hardware name: BCM2835
    [   77.889185] PC is at restore_fbdev_mode+0x20/0x164
    [   77.900261] LR is at drm_fb_helper_restore_fbdev_mode_unlocked+0x54/0x9c
    [   78.002446] Process lt-modetest (pid: 527, stack limit = 0x7a3d5c14)
    [   78.291030] Backtrace:
    [   78.300815] [<c04f2d0c>] (restore_fbdev_mode) from [<c04f4708>] (drm_fb_helper_restore_fbdev_mode_unlocked+0x54/0x9c)
    [   78.319095]  r9:d8a8a288 r8:d891acf0 r7:d7697910 r6:00000000 r5:d891ac00 r4:d891ac00
    [   78.334432] [<c04f46b4>] (drm_fb_helper_restore_fbdev_mode_unlocked) from [<c04f47e8>] (drm_fbdev_client_restore+0x18/0x20)
    [   78.353296]  r8:d76978c0 r7:d7697910 r6:d7697950 r5:d7697800 r4:d891ac00 r3:c04f47d0
    [   78.368689] [<c04f47d0>] (drm_fbdev_client_restore) from [<c051b6b4>] (drm_client_dev_restore+0x7c/0xc0)
    [   78.385982] [<c051b638>] (drm_client_dev_restore) from [<c04f8fd0>] (drm_lastclose+0xc4/0xd4)
    [   78.402332]  r8:d76978c0 r7:d7471080 r6:c0e0c088 r5:d8a85e00 r4:d7697800
    [   78.416688] [<c04f8f0c>] (drm_lastclose) from [<c04f9088>] (drm_release+0xa8/0x10c)
    [   78.431929]  r5:d8a85e00 r4:d7697800
    [   78.442989] [<c04f8fe0>] (drm_release) from [<c02640c4>] (__fput+0x104/0x1c8)
    [   78.457740]  r8:d5ccea10 r7:d96cfb10 r6:00000008 r5:d74c1b90 r4:d8a8a280
    [   78.472043] [<c0263fc0>] (__fput) from [<c02641ec>] (____fput+0x18/0x1c)
    [   78.486363]  r10:00000006 r9:d7722000 r8:c01011c4 r7:00000000 r6:c0ebac6c r5:d892a340
    [   78.501869]  r4:d8a8a280
    [   78.512002] [<c02641d4>] (____fput) from [<c013ef1c>] (task_work_run+0x98/0xac)
    [   78.527186] [<c013ee84>] (task_work_run) from [<c010cc54>] (do_work_pending+0x4f8/0x570)
    [   78.543238]  r7:d7722030 r6:00000004 r5:d7723fb0 r4:00000000
    [   78.556825] [<c010c75c>] (do_work_pending) from [<c0101034>] (slow_work_pending+0xc/0x20)
    [   78.674256] ---[ end trace 70d3a60cf739be3b ]---
    
    Fix by using drm_fb_helper_lastclose() which checks if fbdev is in use.
    
    Fixes: 9060d7f49376 ("drm/fb-helper: Finish the generic fbdev emulation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190125150300.33268-1-noralf@tronnes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87bfc7b695bd6e9d74e78925b53f19f750e34acd
Author: Steve Longerbeam <slongerbeam@gmail.com>
Date:   Mon Jan 21 21:35:51 2019 -0200

    media: imx: csi: Stop upstream before disabling IDMA channel
    
    commit 4bc1ab41eee9d02ad2483bf8f51a7b72e3504eba upstream.
    
    Move upstream stream off to just after receiving the last EOF completion
    and disabling the CSI (and thus before disabling the IDMA channel) in
    csi_stop(). For symmetry also move upstream stream on to beginning of
    csi_start().
    
    Doing this makes csi_s_stream() more symmetric with prp_s_stream() which
    will require the same change to fix a hard lockup.
    
    Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
    Cc: stable@vger.kernel.org      # for 4.13 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54b9412023917d2bd56d21c76d6908f9de4e3091
Author: Steve Longerbeam <slongerbeam@gmail.com>
Date:   Mon Jan 21 21:35:50 2019 -0200

    media: imx: csi: Disable CSI immediately after last EOF
    
    commit 2e0fe66e0a136252f4d89dbbccdcb26deb867eb8 upstream.
    
    Disable the CSI immediately after receiving the last EOF before stream
    off (and thus before disabling the IDMA channel). Do this by moving the
    wait for EOF completion into a new function csi_idmac_wait_last_eof().
    
    This fixes a complete system hard lockup on the SabreAuto when streaming
    from the ADV7180, by repeatedly sending a stream off immediately followed
    by stream on:
    
    while true; do v4l2-ctl  -d4 --stream-mmap --stream-count=3; done
    
    Eventually this either causes the system lockup or EOF timeouts at all
    subsequent stream on, until a system reset.
    
    The lockup occurs when disabling the IDMA channel at stream off. Disabling
    the CSI before disabling the IDMA channel appears to be a reliable fix for
    the hard lockup.
    
    Fixes: 4a34ec8e470cb ("[media] media: imx: Add CSI subdev driver")
    
    Reported-by: Gaël PORTAY <gael.portay@collabora.com>
    Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
    Cc: stable@vger.kernel.org      # for 4.13 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73236bf581e96eb48808fea522351ed81e24c9cc
Author: Lucas A. M. Magalhães <lucmaga@gmail.com>
Date:   Mon Jan 21 20:05:01 2019 -0500

    media: vimc: Add vimc-streamer for stream control
    
    commit adc589d2a20808fb99d46a78175cd023f2040338 upstream.
    
    Add a linear pipeline logic for the stream control. It's created by
    walking backwards on the entity graph. When the stream starts it will
    simply loop through the pipeline calling the respective process_frame
    function of each entity.
    
    Fixes: f2fe89061d797 ("vimc: Virtual Media Controller core, capture
    and sensor")
    
    Cc: stable@vger.kernel.org # for v4.20
    Signed-off-by: Lucas A. M. Magalhães <lucmaga@gmail.com>
    Acked-by: Helen Koike <helen.koike@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    [hverkuil-cisco@xs4all.nl: fixed small space-after-tab issue in the patch]
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29e8c9ae99c78b14b7b1bc5bd80ee1163bcc0777
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed Jan 30 05:09:41 2019 -0500

    media: uvcvideo: Avoid NULL pointer dereference at the end of streaming
    
    commit 9dd0627d8d62a7ddb001a75f63942d92b5336561 upstream.
    
    The UVC video driver converts the timestamp from hardware specific unit
    to one known by the kernel at the time when the buffer is dequeued. This
    is fine in general, but the streamoff operation consists of the
    following steps (among other things):
    
    1. uvc_video_clock_cleanup --- the hardware clock sample array is
       released and the pointer to the array is set to NULL,
    
    2. buffers in active state are returned to the user and
    
    3. buf_finish callback is called on buffers that are prepared.
       buf_finish includes calling uvc_video_clock_update that accesses the
       hardware clock sample array.
    
    The above is serialised by a queue specific mutex. Address the problem
    by skipping the clock conversion if the hardware clock sample array is
    already released.
    
    Fixes: 9c0863b1cc48 ("[media] vb2: call buf_finish from __queue_cancel")
    
    Reported-by: Chiranjeevi Rapolu <chiranjeevi.rapolu@intel.com>
    Tested-by: Chiranjeevi Rapolu <chiranjeevi.rapolu@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77b4e7454bbdce6ee69e92d676dbfb20909b1d35
Author: French, Nicholas A <naf@ou.edu>
Date:   Sun Dec 9 02:11:18 2018 -0500

    media: lgdt330x: fix lock status reporting
    
    commit 1b4fd9de6ec7f3722c2b3e08cc5ad171c11f93be upstream.
    
    A typo in code cleanup commit db9c1007bc07 ("media: lgdt330x: do
    some cleanups at status logic") broke the FE_HAS_LOCK reporting
    for 3303 chips by inadvertently modifying the register mask.
    
    The broken lock status is critial as it prevents video capture
    cards from reporting signal strength, scanning for channels,
    and capturing video.
    
    Fix regression by reverting mask change.
    
    Cc: stable@vger.kernel.org # Kernel 4.17+
    Fixes: db9c1007bc07 ("media: lgdt330x: do some cleanups at status logic")
    Signed-off-by: Nick French <naf@ou.edu>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Tested-by: Adam Stylinski <kungfujesus06@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6039128dc6bf5b422eedd81006e221bca4b67c4b
Author: Steve Longerbeam <slongerbeam@gmail.com>
Date:   Mon Jan 21 21:35:52 2019 -0200

    media: imx: prpencvf: Stop upstream before disabling IDMA channel
    
    commit a19c22677377b87e4354f7306f46ad99bc982a9f upstream.
    
    Upstream must be stopped immediately after receiving the last EOF and
    before disabling the IDMA channel. This can be accomplished by moving
    upstream stream off to just after receiving the last EOF completion in
    prp_stop(). For symmetry also move upstream stream on to end of
    prp_start().
    
    This fixes a complete system hard lockup on the SabreAuto when streaming
    from the ADV7180, by repeatedly sending a stream off immediately followed
    by stream on:
    
    while true; do v4l2-ctl  -d1 --stream-mmap --stream-count=3; done
    
    Eventually this either causes the system lockup or EOF timeouts at all
    subsequent stream on, until a system reset.
    
    The lockup occurs when disabling the IDMA channel at stream off. Stopping
    the video data stream entering the IDMA channel before disabling the
    channel itself appears to be a reliable fix for the hard lockup.
    
    Fixes: f0d9c8924e2c3 ("[media] media: imx: Add IC subdev drivers")
    
    Reported-by: Gaël PORTAY <gael.portay@collabora.com>
    Tested-by: Gaël PORTAY <gael.portay@collabora.com>
    Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
    Cc: stable@vger.kernel.org      # for 4.13 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e97a32a5a3bc8c472886f23929a89265299ceaf6
Author: Zhang, Jun <jun.zhang@intel.com>
Date:   Tue Dec 18 06:55:01 2018 -0800

    rcu: Do RCU GP kthread self-wakeup from softirq and interrupt
    
    commit 1d1f898df6586c5ea9aeaf349f13089c6fa37903 upstream.
    
    The rcu_gp_kthread_wake() function is invoked when it might be necessary
    to wake the RCU grace-period kthread.  Because self-wakeups are normally
    a useless waste of CPU cycles, if rcu_gp_kthread_wake() is invoked from
    this kthread, it naturally refuses to do the wakeup.
    
    Unfortunately, natural though it might be, this heuristic fails when
    rcu_gp_kthread_wake() is invoked from an interrupt or softirq handler
    that interrupted the grace-period kthread just after the final check of
    the wait-event condition but just before the schedule() call.  In this
    case, a wakeup is required, even though the call to rcu_gp_kthread_wake()
    is within the RCU grace-period kthread's context.  Failing to provide
    this wakeup can result in grace periods failing to start, which in turn
    results in out-of-memory conditions.
    
    This race window is quite narrow, but it actually did happen during real
    testing.  It would of course need to be fixed even if it was strictly
    theoretical in nature.
    
    This patch does not Cc stable because it does not apply cleanly to
    earlier kernel versions.
    
    Fixes: 48a7639ce80c ("rcu: Make callers awaken grace-period kthread")
    Reported-by: "He, Bo" <bo.he@intel.com>
    Co-developed-by: "Zhang, Jun" <jun.zhang@intel.com>
    Co-developed-by: "He, Bo" <bo.he@intel.com>
    Co-developed-by: "xiao, jin" <jin.xiao@intel.com>
    Co-developed-by: Bai, Jie A <jie.a.bai@intel.com>
    Signed-off: "Zhang, Jun" <jun.zhang@intel.com>
    Signed-off: "He, Bo" <bo.he@intel.com>
    Signed-off: "xiao, jin" <jin.xiao@intel.com>
    Signed-off: Bai, Jie A <jie.a.bai@intel.com>
    Signed-off-by: "Zhang, Jun" <jun.zhang@intel.com>
    [ paulmck: Switch from !in_softirq() to "!in_interrupt() &&
      !in_serving_softirq() to avoid redundant wakeups and to also handle the
      interrupt-handler scenario as well as the softirq-handler scenario that
      actually occurred in testing. ]
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>
    Link: https://lkml.kernel.org/r/CD6925E8781EFD4D8E11882D20FC406D52A11F61@SHSMSX104.ccr.corp.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bce45a547546488f861e8824905b18dbbdfeecda
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Fri Feb 8 18:30:58 2019 +0200

    tpm: Unify the send callback behaviour
    
    commit f5595f5baa30e009bf54d0d7653a9a0cc465be60 upstream.
    
    The send() callback should never return length as it does not in every
    driver except tpm_crb in the success case. The reason is that the main
    transmit functionality only cares about whether the transmit was
    successful or not and ignores the count completely.
    
    Suggested-by: Stefan Berger <stefanb@linux.ibm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Tested-by: Alexander Steffen <Alexander.Steffen@infineon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af0c1bd0c5e90dfd1f4e83d61af57783993b0d1b
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Mon Feb 4 15:59:43 2019 +0200

    tpm/tpm_crb: Avoid unaligned reads in crb_recv()
    
    commit 3d7a850fdc1a2e4d2adbc95cc0fc962974725e88 upstream.
    
    The current approach to read first 6 bytes from the response and then tail
    of the response, can cause the 2nd memcpy_fromio() to do an unaligned read
    (e.g. read 32-bit word from address aligned to a 16-bits), depending on how
    memcpy_fromio() is implemented. If this happens, the read will fail and the
    memory controller will fill the read with 1's.
    
    This was triggered by 170d13ca3a2f, which should be probably refined to
    check and react to the address alignment. Before that commit, on x86
    memcpy_fromio() turned out to be memcpy(). By a luck GCC has done the right
    thing (from tpm_crb's perspective) for us so far, but we should not rely on
    that. Thus, it makes sense to fix this also in tpm_crb, not least because
    the fix can be then backported to stable kernels and make them more robust
    when compiled in differing environments.
    
    Cc: stable@vger.kernel.org
    Cc: James Morris <jmorris@namei.org>
    Cc: Tomas Winkler <tomas.winkler@intel.com>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Fixes: 30fc8d138e91 ("tpm: TPM 2.0 CRB Interface")
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Acked-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc3b79d487e83481f15973d82edefc197dbf495e
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Mon Mar 4 16:48:54 2019 -0600

    md: Fix failed allocation of md_register_thread
    
    commit e406f12dde1a8375d77ea02d91f313fb1a9c6aec upstream.
    
    mddev->sync_thread can be set to NULL on kzalloc failure downstream.
    The patch checks for such a scenario and frees allocated resources.
    
    Committer node:
    
    Added similar fix to raid5.c, as suggested by Guoqing.
    
    Cc: stable@vger.kernel.org # v3.16+
    Acked-by: Guoqing Jiang <gqjiang@suse.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01088750f25e0fdbe8508ee681ca20142dfdb2e6
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 1 12:35:36 2019 +0200

    perf intel-pt: Fix divide by zero when TSC is not available
    
    commit 076333870c2f5bdd9b6d31e7ca1909cf0c84cbfa upstream.
    
    When TSC is not available, "timeless" decoding is used but a divide by
    zero occurs if perf_time_to_tsc() is called.
    
    Ensure the divisor is not zero.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org # v4.9+
    Link: https://lkml.kernel.org/n/tip-1i4j0wqoc8vlbkcizqqxpsf4@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30cedf18d1e238514ef26da3afbd41e5c8a3ba07
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Wed Feb 27 08:57:29 2019 -0800

    perf/x86/intel/uncore: Fix client IMC events return huge result
    
    commit 8041ffd36f42d8521d66dd1e236feb58cecd68bc upstream.
    
    The client IMC bandwidth events currently return very large values:
    
      $ perf stat -e uncore_imc/data_reads/ -e uncore_imc/data_writes/ -I 10000 -a
    
      10.000117222 34,788.76 MiB uncore_imc/data_reads/
      10.000117222 8.26 MiB uncore_imc/data_writes/
      20.000374584 34,842.89 MiB uncore_imc/data_reads/
      20.000374584 10.45 MiB uncore_imc/data_writes/
      30.000633299 37,965.29 MiB uncore_imc/data_reads/
      30.000633299 323.62 MiB uncore_imc/data_writes/
      40.000891548 41,012.88 MiB uncore_imc/data_reads/
      40.000891548 6.98 MiB uncore_imc/data_writes/
      50.001142480 1,125,899,906,621,494.75 MiB uncore_imc/data_reads/
      50.001142480 6.97 MiB uncore_imc/data_writes/
    
    The client IMC events are freerunning counters. They still use the
    old event encoding format (0x1 for data_read and 0x2 for data write).
    The counter bit width is calculated by common code, which assume that
    the standard encoding format is used for the freerunning counters.
    Error bit width information is calculated.
    
    The patch intends to convert the old client IMC event encoding to the
    standard encoding format.
    
    Current common code uses event->attr.config which directly copy from
    user space. We should not implicitly modify it for a converted event.
    The event->hw.config is used to replace the event->attr.config in
    common code.
    
    For client IMC events, the event->attr.config is used to calculate a
    converted event with standard encoding format in the custom
    event_init(). The converted event is stored in event->hw.config.
    For other events of freerunning counters, they already use the standard
    encoding format. The same value as event->attr.config is assigned to
    event->hw.config in common event_init().
    
    Reported-by: Jin Yao <yao.jin@linux.intel.com>
    Tested-by: Jin Yao <yao.jin@linux.intel.com>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: stable@kernel.org # v4.18+
    Fixes: 9aae1780e7e8 ("perf/x86/intel/uncore: Clean up client IMC uncore")
    Link: https://lkml.kernel.org/r/20190227165729.1861-1-kan.liang@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a46a8cdfea3c91bde519f24dd8c2bd9bde1da081
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Feb 6 12:39:44 2019 +0200

    perf intel-pt: Fix overlap calculation for padding
    
    commit 5a99d99e3310a565b0cf63f785b347be9ee0da45 upstream.
    
    Auxtrace records might have up to 7 bytes of padding appended. Adjust
    the overlap accordingly.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20190206103947.15750-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa592fc0bde56960c677f8d1a18ae8cdcc7d783b
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Feb 6 12:39:43 2019 +0200

    perf auxtrace: Define auxtrace record alignment
    
    commit c3fcadf0bb765faf45d6d562246e1d08885466df upstream.
    
    Define auxtrace record alignment so that it can be referenced elsewhere.
    
    Note this is preparation for patch "perf intel-pt: Fix overlap calculation
    for padding"
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20190206103947.15750-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8f691f29d9131d00610d1f8622e011b11e13319
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Jan 9 11:18:30 2019 +0200

    perf tools: Fix split_kallsyms_for_kcore() for trampoline symbols
    
    commit d6d457451eb94fa747dc202765592eb8885a7352 upstream.
    
    Kallsyms symbols do not have a size, so the size becomes the distance to
    the next symbol.
    
    Consequently the recently added trampoline symbols end up with large
    sizes because the trampolines are some distance from one another and the
    main kernel map.
    
    However, symbols that end outside their map can disrupt the symbol tree
    because, after mapping, it can appear incorrectly that they overlap
    other symbols.
    
    Add logic to truncate symbol size to the end of the corresponding map.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: d83212d5dd67 ("kallsyms, x86: Export addresses of PTI entry trampolines")
    Link: http://lkml.kernel.org/r/20190109091835.5570-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e25353a0ac447d67deede6ebade98eb938c76213
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Feb 6 12:39:45 2019 +0200

    perf intel-pt: Fix CYC timestamp calculation after OVF
    
    commit 03997612904866abe7cdcc992784ef65cb3a4b81 upstream.
    
    CYC packet timestamp calculation depends upon CBR which was being
    cleared upon overflow (OVF). That can cause errors due to failing to
    synchronize with sideband events. Even if a CBR change has been lost,
    the old CBR is still a better estimate than zero. So remove the clearing
    of CBR.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20190206103947.15750-4-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e5a054b0f70cc9ce423acd2c93a92d1475ad911
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Mar 6 11:07:24 2019 -0600

    x86/unwind/orc: Fix ORC unwind table alignment
    
    commit f76a16adc485699f95bb71fce114f97c832fe664 upstream.
    
    The .orc_unwind section is a packed array of 6-byte structs.  It's
    currently aligned to 6 bytes, which is causing warnings in the LLD
    linker.
    
    Six isn't a power of two, so it's not a valid alignment value.  The
    actual alignment doesn't matter much because it's an array of packed
    structs.  An alignment of two is sufficient.  In reality it always gets
    aligned to four bytes because it comes immediately after the
    4-byte-aligned .orc_unwind_ip section.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Reported-by: Dmitry Golovin <dima@golovin.in>
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://github.com/ClangBuiltLinux/linux/issues/218
    Link: https://lkml.kernel.org/r/d55027ee95fe73e952dcd8be90aebd31b0095c45.1551892041.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b05581b8ba9c6c84290f3390c552ea78b77bddea
Author: Nicolas Pitre <nico@fluxnic.net>
Date:   Mon Feb 11 19:36:41 2019 -0500

    vt: perform safe console erase in the right order
    
    commit a6dbe442755999960ca54a9b8ecfd9606be0ea75 upstream.
    
    Commit 4b4ecd9cb853 ("vt: Perform safe console erase only once") removed
    what appeared to be an extra call to scr_memsetw(). This missed the fact
    that set_origin() must be called before clearing the screen otherwise
    old screen content gets restored on the screen when using vgacon. Let's
    fix that by moving all the scrollback handling to flush_scrollback()
    where it logically belongs, and invoking it before the actual screen
    clearing in csi_J(), making the code simpler in the end.
    
    Reported-by: Matthew Whitehead <tedheadster@gmail.com>
    Signed-off-by: Nicolas Pitre <nico@linaro.org>
    Tested-by: Matthew Whitehead <tedheadster@gmail.com>
    Fixes: 4b4ecd9cb853 ("vt: Perform safe console erase only once")
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ca85aac1213ffe90d8503521fb57bed4c2cabd4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 22 19:46:32 2019 +0100

    stable-kernel-rules.rst: add link to networking patch queue
    
    commit a41e8f25fa8f8f67360d88eb0eebbabe95a64bdf upstream.
    
    The networking maintainer keeps a public list of the patches being
    queued up for the next round of stable releases.  Be sure to check there
    before asking for a patch to be applied so that you do not waste
    people's time.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 622afe5c7449625eafdf376cf7d44a59f4ced620
Author: Daniel Axtens <dja@axtens.net>
Date:   Sat Feb 9 12:52:53 2019 +0800

    bcache: never writeback a discard operation
    
    commit 9951379b0ca88c95876ad9778b9099e19a95d566 upstream.
    
    Some users see panics like the following when performing fstrim on a
    bcached volume:
    
    [  529.803060] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
    [  530.183928] #PF error: [normal kernel read fault]
    [  530.412392] PGD 8000001f42163067 P4D 8000001f42163067 PUD 1f42168067 PMD 0
    [  530.750887] Oops: 0000 [#1] SMP PTI
    [  530.920869] CPU: 10 PID: 4167 Comm: fstrim Kdump: loaded Not tainted 5.0.0-rc1+ #3
    [  531.290204] Hardware name: HP ProLiant DL360 Gen9/ProLiant DL360 Gen9, BIOS P89 12/27/2015
    [  531.693137] RIP: 0010:blk_queue_split+0x148/0x620
    [  531.922205] Code: 60 38 89 55 a0 45 31 db 45 31 f6 45 31 c9 31 ff 89 4d 98 85 db 0f 84 7f 04 00 00 44 8b 6d 98 4c 89 ee 48 c1 e6 04 49 03 70 78 <8b> 46 08 44 8b 56 0c 48
    8b 16 44 29 e0 39 d8 48 89 55 a8 0f 47 c3
    [  532.838634] RSP: 0018:ffffb9b708df39b0 EFLAGS: 00010246
    [  533.093571] RAX: 00000000ffffffff RBX: 0000000000046000 RCX: 0000000000000000
    [  533.441865] RDX: 0000000000000200 RSI: 0000000000000000 RDI: 0000000000000000
    [  533.789922] RBP: ffffb9b708df3a48 R08: ffff940d3b3fdd20 R09: 0000000000000000
    [  534.137512] R10: ffffb9b708df3958 R11: 0000000000000000 R12: 0000000000000000
    [  534.485329] R13: 0000000000000000 R14: 0000000000000000 R15: ffff940d39212020
    [  534.833319] FS:  00007efec26e3840(0000) GS:ffff940d1f480000(0000) knlGS:0000000000000000
    [  535.224098] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  535.504318] CR2: 0000000000000008 CR3: 0000001f4e256004 CR4: 00000000001606e0
    [  535.851759] Call Trace:
    [  535.970308]  ? mempool_alloc_slab+0x15/0x20
    [  536.174152]  ? bch_data_insert+0x42/0xd0 [bcache]
    [  536.403399]  blk_mq_make_request+0x97/0x4f0
    [  536.607036]  generic_make_request+0x1e2/0x410
    [  536.819164]  submit_bio+0x73/0x150
    [  536.980168]  ? submit_bio+0x73/0x150
    [  537.149731]  ? bio_associate_blkg_from_css+0x3b/0x60
    [  537.391595]  ? _cond_resched+0x1a/0x50
    [  537.573774]  submit_bio_wait+0x59/0x90
    [  537.756105]  blkdev_issue_discard+0x80/0xd0
    [  537.959590]  ext4_trim_fs+0x4a9/0x9e0
    [  538.137636]  ? ext4_trim_fs+0x4a9/0x9e0
    [  538.324087]  ext4_ioctl+0xea4/0x1530
    [  538.497712]  ? _copy_to_user+0x2a/0x40
    [  538.679632]  do_vfs_ioctl+0xa6/0x600
    [  538.853127]  ? __do_sys_newfstat+0x44/0x70
    [  539.051951]  ksys_ioctl+0x6d/0x80
    [  539.212785]  __x64_sys_ioctl+0x1a/0x20
    [  539.394918]  do_syscall_64+0x5a/0x110
    [  539.568674]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    We have observed it where both:
    1) LVM/devmapper is involved (bcache backing device is LVM volume) and
    2) writeback cache is involved (bcache cache_mode is writeback)
    
    On one machine, we can reliably reproduce it with:
    
     # echo writeback > /sys/block/bcache0/bcache/cache_mode
       (not sure whether above line is required)
     # mount /dev/bcache0 /test
     # for i in {0..10}; do
            file="$(mktemp /test/zero.XXX)"
            dd if=/dev/zero of="$file" bs=1M count=256
            sync
            rm $file
        done
      # fstrim -v /test
    
    Observing this with tracepoints on, we see the following writes:
    
    fstrim-18019 [022] .... 91107.302026: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 4260112 + 196352 hit 0 bypass 1
    fstrim-18019 [022] .... 91107.302050: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 4456464 + 262144 hit 0 bypass 1
    fstrim-18019 [022] .... 91107.302075: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 4718608 + 81920 hit 0 bypass 1
    fstrim-18019 [022] .... 91107.302094: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 5324816 + 180224 hit 0 bypass 1
    fstrim-18019 [022] .... 91107.302121: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 5505040 + 262144 hit 0 bypass 1
    fstrim-18019 [022] .... 91107.302145: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 5767184 + 81920 hit 0 bypass 1
    fstrim-18019 [022] .... 91107.308777: bcache_write: 73f95583-561c-408f-a93a-4cbd2498f5c8 inode 0  DS 6373392 + 180224 hit 1 bypass 0
    <crash>
    
    Note the final one has different hit/bypass flags.
    
    This is because in should_writeback(), we were hitting a case where
    the partial stripe condition was returning true and so
    should_writeback() was returning true early.
    
    If that hadn't been the case, it would have hit the would_skip test, and
    as would_skip == s->iop.bypass == true, should_writeback() would have
    returned false.
    
    Looking at the git history from 'commit 72c270612bd3 ("bcache: Write out
    full stripes")', it looks like the idea was to optimise for raid5/6:
    
           * If a stripe is already dirty, force writes to that stripe to
             writeback mode - to help build up full stripes of dirty data
    
    To fix this issue, make sure that should_writeback() on a discard op
    never returns true.
    
    More details of debugging:
    https://www.spinics.net/lists/linux-bcache/msg06996.html
    
    Previous reports:
     - https://bugzilla.kernel.org/show_bug.cgi?id=201051
     - https://bugzilla.kernel.org/show_bug.cgi?id=196103
     - https://www.spinics.net/lists/linux-bcache/msg06885.html
    
    (Coly Li: minor modification to follow maximum 75 chars per line rule)
    
    Cc: Kent Overstreet <koverstreet@google.com>
    Cc: stable@vger.kernel.org
    Fixes: 72c270612bd3 ("bcache: Write out full stripes")
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd73824636cb3ae03a3f01e6ffb5aed6d8f57a67
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Fri Mar 8 15:23:11 2019 +0530

    PM / wakeup: Rework wakeup source timer cancellation
    
    commit 1fad17fb1bbcd73159c2b992668a6957ecc5af8a upstream.
    
    If wakeup_source_add() is called right after wakeup_source_remove()
    for the same wakeup source, timer_setup() may be called for a
    potentially scheduled timer which is incorrect.
    
    To avoid that, move the wakeup source timer cancellation from
    wakeup_source_drop() to wakeup_source_remove().
    
    Moreover, make wakeup_source_remove() clear the timer function after
    canceling the timer to let wakeup_source_not_registered() treat
    unregistered wakeup sources in the same way as the ones that have
    never been registered.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: 4.4+ <stable@vger.kernel.org> # 4.4+
    [ rjw: Subject, changelog, merged two patches together ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43bceddcd7e2aa182d8a04c37682e9b49948e925
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Wed Feb 20 12:54:50 2019 -0500

    svcrpc: fix UDP on servers with lots of threads
    
    commit b7e5034cbecf5a65b7bfdc2b20a8378039577706 upstream.
    
    James Pearson found that an NFS server stopped responding to UDP
    requests if started with more than 1017 threads.
    
    sv_max_mesg is about 2^20, so that is probably where the calculation
    performed by
    
            svc_sock_setbufsize(svsk->sk_sock,
                                (serv->sv_nrthreads+3) * serv->sv_max_mesg,
                                (serv->sv_nrthreads+3) * serv->sv_max_mesg);
    
    starts to overflow an int.
    
    Reported-by: James Pearson <jcpearson@gmail.com>
    Tested-by: James Pearson <jcpearson@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4af185feb9df8fae93717df2fe31e51d89139172
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Fri Mar 1 12:13:34 2019 -0500

    NFSv4.1: Reinitialise sequence results before retransmitting a request
    
    commit c1dffe0bf7f9c3d57d9f237a7cb2a81e62babd2b upstream.
    
    If we have to retransmit a request, we should ensure that we reinitialise
    the sequence results structure, since in the event of a signal
    we need to treat the request as if it had not been sent.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ecab6ab1c22726d2c439b587d103700f72210b4b
Author: Yihao Wu <wuyihao@linux.alibaba.com>
Date:   Wed Mar 6 21:03:50 2019 +0800

    nfsd: fix wrong check in write_v4_end_grace()
    
    commit dd838821f0a29781b185cd8fb8e48d5c177bd838 upstream.
    
    Commit 62a063b8e7d1 "nfsd4: fix crash on writing v4_end_grace before
    nfsd startup" is trying to fix a NULL dereference issue, but it
    mistakenly checks if the nfsd server is started. So fix it.
    
    Fixes: 62a063b8e7d1 "nfsd4: fix crash on writing v4_end_grace before nfsd startup"
    Cc: stable@vger.kernel.org
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Signed-off-by: Yihao Wu <wuyihao@linux.alibaba.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8056912c1c75fc27127dd7d092c197e01c63b6ad
Author: NeilBrown <neilb@suse.com>
Date:   Mon Mar 4 14:08:22 2019 +1100

    nfsd: fix memory corruption caused by readdir
    
    commit b602345da6cbb135ba68cf042df8ec9a73da7981 upstream.
    
    If the result of an NFSv3 readdir{,plus} request results in the
    "offset" on one entry having to be split across 2 pages, and is sized
    so that the next directory entry doesn't fit in the requested size,
    then memory corruption can happen.
    
    When encode_entry() is called after encoding the last entry that fits,
    it notices that ->offset and ->offset1 are set, and so stores the
    offset value in the two pages as required.  It clears ->offset1 but
    *does not* clear ->offset.
    
    Normally this omission doesn't matter as encode_entry_baggage() will
    be called, and will set ->offset to a suitable value (not on a page
    boundary).
    But in the case where cd->buflen < elen and nfserr_toosmall is
    returned, ->offset is not reset.
    
    This means that nfsd3proc_readdirplus will see ->offset with a value 4
    bytes before the end of a page, and ->offset1 set to NULL.
    It will try to write 8bytes to ->offset.
    If we are lucky, the next page will be read-only, and the system will
      BUG: unable to handle kernel paging request at...
    
    If we are unlucky, some innocent page will have the first 4 bytes
    corrupted.
    
    nfsd3proc_readdir() doesn't even check for ->offset1, it just blindly
    writes 8 bytes to the offset wherever it is.
    
    Fix this by clearing ->offset after it is used, and copying the
    ->offset handling code from nfsd3_proc_readdirplus into
    nfsd3_proc_readdir.
    
    (Note that the commit hash in the Fixes tag is from the 'history'
     tree - this bug predates git).
    
    Fixes: 0b1d57cf7654 ("[PATCH] kNFSd: Fix nfs3 dentry encoding")
    Fixes-URL: https://git.kernel.org/pub/scm/linux/kernel/git/history/history.git/commit/?id=0b1d57cf7654
    Cc: stable@vger.kernel.org (v2.6.12+)
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10a68cdf1035689fe9bfb5e413110cefad510508
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Feb 21 10:47:00 2019 -0500

    nfsd: fix performance-limiting session calculation
    
    commit c54f24e338ed2a35218f117a4a1afb5f9e2b4e64 upstream.
    
    We're unintentionally limiting the number of slots per nfsv4.1 session
    to 10.  Often more than 10 simultaneous RPCs are needed for the best
    performance.
    
    This calculation was meant to prevent any one client from using up more
    than a third of the limit we set for total memory use across all clients
    and sessions.  Instead, it's limiting the client to a third of the
    maximum for a single session.
    
    Fix this.
    
    Reported-by: Chris Tracy <ctracy@engr.scu.edu>
    Cc: stable@vger.kernel.org
    Fixes: de766e570413 "nfsd: give out fewer session slots as limit approaches"
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c648caf630db6f2e3429459b6a7fa4760275c58
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Fri Feb 15 16:08:25 2019 -0500

    NFS: Don't recoalesce on error in nfs_pageio_complete_mirror()
    
    commit 8127d82705998568b52ac724e28e00941538083d upstream.
    
    If the I/O completion failed with a fatal error, then we should just
    exit nfs_pageio_complete_mirror() rather than try to recoalesce.
    
    Fixes: a7d42ddb3099 ("nfs: add mirroring support to pgio layer")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org # v4.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63b0ee126f7ea398e3e68ae7e57598e080865a18
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Fri Feb 15 14:59:52 2019 -0500

    NFS: Fix an I/O request leakage in nfs_do_recoalesce
    
    commit 4d91969ed4dbcefd0e78f77494f0cb8fada9048a upstream.
    
    Whether we need to exit early, or just reprocess the list, we
    must not lost track of the request which failed to get recoalesced.
    
    Fixes: 03d5eb65b538 ("NFS: Fix a memory leak in nfs_do_recoalesce")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org # v4.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be74fddc976e40a2a535168182783d82154d66e8
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed Feb 13 09:21:38 2019 -0500

    NFS: Fix I/O request leakages
    
    commit f57dcf4c72113c745d83f1c65f7291299f65c14f upstream.
    
    When we fail to add the request to the I/O queue, we currently leave it
    to the caller to free the failed request. However since some of the
    requests that fail are actually created by nfs_pageio_add_request()
    itself, and are not passed back the caller, this leads to a leakage
    issue, which can again cause page locks to leak.
    
    This commit addresses the leakage by freeing the created requests on
    error, using desc->pg_completion_ops->error_cleanup()
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Fixes: a7d42ddb30997 ("nfs: add mirroring support to pgio layer")
    Cc: stable@vger.kernel.org # v4.0: c18b96a1b862: nfs: clean up rest of reqs
    Cc: stable@vger.kernel.org # v4.0: d600ad1f2bdb: NFS41: pop some layoutget
    Cc: stable@vger.kernel.org # v4.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ea4f347662c4d4eb53eade5c4a188f3699373be
Author: Pavel Machek <pavel@ucw.cz>
Date:   Thu Dec 27 20:52:21 2018 +0100

    cpcap-charger: generate events for userspace
    
    commit fd10606f93a149a9f3d37574e5385b083b4a7b32 upstream.
    
    The driver doesn't generate uevents on charger connect/disconnect.
    This leads to UPower not detecting when AC is on or off... and that is
    bad.
    
    Reported by Arthur D. on github (
    https://github.com/maemo-leste/bugtracker/issues/206 ), thanks to
    Merlijn Wajer for suggesting a fix.
    
    Cc: stable@kernel.org
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce02d82c4e1aaf2fd6ef40a43e5e7ace3c817088
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Jan 22 10:56:36 2019 -0600

    mfd: sm501: Fix potential NULL pointer dereference
    
    commit ae7b8eda27b33b1f688dfdebe4d46f690a8f9162 upstream.
    
    There is a potential NULL pointer dereference in case devm_kzalloc()
    fails and returns NULL.
    
    Fix this by adding a NULL check on *lookup*
    
    This bug was detected with the help of Coccinelle.
    
    Fixes: b2e63555592f ("i2c: gpio: Convert to use descriptors")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5579d97e92f70d9e728b614e7d7d3cb3afbef245
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Mar 6 08:29:34 2019 -0500

    dm integrity: limit the rate of error messages
    
    commit 225557446856448039a9e495da37b72c20071ef2 upstream.
    
    When using dm-integrity underneath md-raid, some tests with raid
    auto-correction trigger large amounts of integrity failures - and all
    these failures print an error message. These messages can bring the
    system to a halt if the system is using serial console.
    
    Fix this by limiting the rate of error messages - it improves the speed
    of raid recovery and avoids the hang.
    
    Fixes: 7eada909bfd7a ("dm: add integrity target")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7668d6e45f3a0f4caade465e2df969a1948fc3a4
Author: NeilBrown <neil@brown.name>
Date:   Sun Jan 6 21:06:25 2019 +1100

    dm: fix to_sector() for 32bit
    
    commit 0bdb50c531f7377a9da80d3ce2d61f389c84cb30 upstream.
    
    A dm-raid array with devices larger than 4GB won't assemble on
    a 32 bit host since _check_data_dev_sectors() was added in 4.16.
    This is because to_sector() treats its argument as an "unsigned long"
    which is 32bits (4GB) on a 32bit host.  Using "unsigned long long"
    is more correct.
    
    Kernels as early as 4.2 can have other problems due to to_sector()
    being used on the size of a device.
    
    Fixes: 0cf4503174c1 ("dm raid: add support for the MD RAID0 personality")
    cc: stable@vger.kernel.org (v4.2+)
    Reported-and-tested-by: Guillaume Perréal <gperreal@free.fr>
    Signed-off-by: NeilBrown <neil@brown.name>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a441fdaf8c3034436fb6045ee285e515628fc555
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Jan 28 11:08:54 2019 +0800

    ipmi_si: fix use-after-free of resource->name
    
    commit 401e7e88d4ef80188ffa07095ac00456f901b8c4 upstream.
    
    When we excute the following commands, we got oops
    rmmod ipmi_si
    cat /proc/ioports
    
    [ 1623.482380] Unable to handle kernel paging request at virtual address ffff00000901d478
    [ 1623.482382] Mem abort info:
    [ 1623.482383]   ESR = 0x96000007
    [ 1623.482385]   Exception class = DABT (current EL), IL = 32 bits
    [ 1623.482386]   SET = 0, FnV = 0
    [ 1623.482387]   EA = 0, S1PTW = 0
    [ 1623.482388] Data abort info:
    [ 1623.482389]   ISV = 0, ISS = 0x00000007
    [ 1623.482390]   CM = 0, WnR = 0
    [ 1623.482393] swapper pgtable: 4k pages, 48-bit VAs, pgdp = 00000000d7d94a66
    [ 1623.482395] [ffff00000901d478] pgd=000000dffbfff003, pud=000000dffbffe003, pmd=0000003f5d06e003, pte=0000000000000000
    [ 1623.482399] Internal error: Oops: 96000007 [#1] SMP
    [ 1623.487407] Modules linked in: ipmi_si(E) nls_utf8 isofs rpcrdma ib_iser ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_umad rdma_cm ib_cm dm_mirror dm_region_hash dm_log iw_cm dm_mod aes_ce_blk crypto_simd cryptd aes_ce_cipher ses ghash_ce sha2_ce enclosure sha256_arm64 sg sha1_ce hisi_sas_v2_hw hibmc_drm sbsa_gwdt hisi_sas_main ip_tables mlx5_ib ib_uverbs marvell ib_core mlx5_core ixgbe mdio hns_dsaf ipmi_devintf hns_enet_drv ipmi_msghandler hns_mdio [last unloaded: ipmi_si]
    [ 1623.532410] CPU: 30 PID: 11438 Comm: cat Kdump: loaded Tainted: G            E     5.0.0-rc3+ #168
    [ 1623.541498] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.37 11/21/2017
    [ 1623.548822] pstate: a0000005 (NzCv daif -PAN -UAO)
    [ 1623.553684] pc : string+0x28/0x98
    [ 1623.557040] lr : vsnprintf+0x368/0x5e8
    [ 1623.560837] sp : ffff000013213a80
    [ 1623.564191] x29: ffff000013213a80 x28: ffff00001138abb5
    [ 1623.569577] x27: ffff000013213c18 x26: ffff805f67d06049
    [ 1623.574963] x25: 0000000000000000 x24: ffff00001138abb5
    [ 1623.580349] x23: 0000000000000fb7 x22: ffff0000117ed000
    [ 1623.585734] x21: ffff000011188fd8 x20: ffff805f67d07000
    [ 1623.591119] x19: ffff805f67d06061 x18: ffffffffffffffff
    [ 1623.596505] x17: 0000000000000200 x16: 0000000000000000
    [ 1623.601890] x15: ffff0000117ed748 x14: ffff805f67d07000
    [ 1623.607276] x13: ffff805f67d0605e x12: 0000000000000000
    [ 1623.612661] x11: 0000000000000000 x10: 0000000000000000
    [ 1623.618046] x9 : 0000000000000000 x8 : 000000000000000f
    [ 1623.623432] x7 : ffff805f67d06061 x6 : fffffffffffffffe
    [ 1623.628817] x5 : 0000000000000012 x4 : ffff00000901d478
    [ 1623.634203] x3 : ffff0a00ffffff04 x2 : ffff805f67d07000
    [ 1623.639588] x1 : ffff805f67d07000 x0 : ffffffffffffffff
    [ 1623.644974] Process cat (pid: 11438, stack limit = 0x000000008d4cbc10)
    [ 1623.651592] Call trace:
    [ 1623.654068]  string+0x28/0x98
    [ 1623.657071]  vsnprintf+0x368/0x5e8
    [ 1623.660517]  seq_vprintf+0x70/0x98
    [ 1623.668009]  seq_printf+0x7c/0xa0
    [ 1623.675530]  r_show+0xc8/0xf8
    [ 1623.682558]  seq_read+0x330/0x440
    [ 1623.689877]  proc_reg_read+0x78/0xd0
    [ 1623.697346]  __vfs_read+0x60/0x1a0
    [ 1623.704564]  vfs_read+0x94/0x150
    [ 1623.711339]  ksys_read+0x6c/0xd8
    [ 1623.717939]  __arm64_sys_read+0x24/0x30
    [ 1623.725077]  el0_svc_common+0x120/0x148
    [ 1623.732035]  el0_svc_handler+0x30/0x40
    [ 1623.738757]  el0_svc+0x8/0xc
    [ 1623.744520] Code: d1000406 aa0103e2 54000149 b4000080 (39400085)
    [ 1623.753441] ---[ end trace f91b6a4937de9835 ]---
    [ 1623.760871] Kernel panic - not syncing: Fatal exception
    [ 1623.768935] SMP: stopping secondary CPUs
    [ 1623.775718] Kernel Offset: disabled
    [ 1623.781998] CPU features: 0x002,21006008
    [ 1623.788777] Memory Limit: none
    [ 1623.798329] Starting crashdump kernel...
    [ 1623.805202] Bye!
    
    If io_setup is called successful in try_smi_init() but try_smi_init()
    goes out_err before calling ipmi_register_smi(), so ipmi_unregister_smi()
    will not be called while removing module. It leads to the resource that
    allocated in io_setup() can not be freed, but the name(DEVICE_NAME) of
    resource is freed while removing the module. It causes use-after-free
    when cat /proc/ioports.
    
    Fix this by calling io_cleanup() while try_smi_init() goes to out_err.
    and don't call io_cleanup() until io_setup() returns successful to avoid
    warning prints.
    
    Fixes: 93c303d2045b ("ipmi_si: Clean up shutdown a bit")
    Cc: stable@vger.kernel.org
    Reported-by: NuoHan Qiao <qiaonuohan@huawei.com>
    Suggested-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cbae9fa85ce300122e2b3dc274210b0db80cb4f
Author: Dave Martin <Dave.Martin@arm.com>
Date:   Thu Feb 21 11:42:32 2019 +0000

    arm64: KVM: Fix architecturally invalid reset value for FPEXC32_EL2
    
    commit c88b093693ccbe41991ef2e9b1d251945e6e54ed upstream.
    
    Due to what looks like a typo dating back to the original addition
    of FPEXC32_EL2 handling, KVM currently initialises this register to
    an architecturally invalid value.
    
    As a result, the VECITR field (RES1) in bits [10:8] is initialised
    with 0, and the two reserved (RES0) bits [6:5] are initialised with
    1.  (In the Common VFP Subarchitecture as specified by ARMv7-A,
    these two bits were IMP DEF.  ARMv8-A removes them.)
    
    This patch changes the reset value from 0x70 to 0x700, which
    reflects the architectural constraints and is presumably what was
    originally intended.
    
    Cc: <stable@vger.kernel.org> # 4.12.x-
    Cc: Christoffer Dall <christoffer.dall@arm.com>
    Fixes: 62a89c44954f ("arm64: KVM: 32bit handling of coprocessor traps")
    Signed-off-by: Dave Martin <Dave.Martin@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c113a7fb017b0bf30e393a852ce8d642a1b46c00
Author: Will Deacon <will@kernel.org>
Date:   Fri Mar 1 13:28:01 2019 +0000

    arm64: debug: Ensure debug handlers check triggering exception level
    
    commit 6bd288569b50bc89fa5513031086746968f585cb upstream.
    
    Debug exception handlers may be called for exceptions generated both by
    user and kernel code. In many cases, this is checked explicitly, but
    in other cases things either happen to work by happy accident or they
    go slightly wrong. For example, executing 'brk #4' from userspace will
    enter the kprobes code and be ignored, but the instruction will be
    retried forever in userspace instead of delivering a SIGTRAP.
    
    Fix this issue in the most stable-friendly fashion by simply adding
    explicit checks of the triggering exception level to all of our debug
    exception handlers.
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85c8ea220f89aacc6981eb6188b65a5d4c8d1eee
Author: Julien Thierry <julien.thierry.kdev@gmail.com>
Date:   Thu Jan 31 14:58:39 2019 +0000

    arm64: Fix HCR.TGE status for NMI contexts
    
    commit 5870970b9a828d8693aa6d15742573289d7dbcd0 upstream.
    
    When using VHE, the host needs to clear HCR_EL2.TGE bit in order
    to interact with guest TLBs, switching from EL2&0 translation regime
    to EL1&0.
    
    However, some non-maskable asynchronous event could happen while TGE is
    cleared like SDEI. Because of this address translation operations
    relying on EL2&0 translation regime could fail (tlb invalidation,
    userspace access, ...).
    
    Fix this by properly setting HCR_EL2.TGE when entering NMI context and
    clear it if necessary when returning to the interrupted context.
    
    Signed-off-by: Julien Thierry <julien.thierry@arm.com>
    Suggested-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: linux-arch@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58691e6a93d8a1f7f4e71e10a8d3ba88fd73e80a
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Thu Jan 3 14:14:08 2019 -0600

    ARM: s3c24xx: Fix boolean expressions in osiris_dvs_notify
    
    commit e2477233145f2156434afb799583bccd878f3e9f upstream.
    
    Fix boolean expressions by using logical AND operator '&&' instead of
    bitwise operator '&'.
    
    This issue was detected with the help of Coccinelle.
    
    Fixes: 4fa084af28ca ("ARM: OSIRIS: DVS (Dynamic Voltage Scaling) supoort.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    [krzk: Fix -Wparentheses warning]
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6d004b3dd7014c4c0ab3530764725ce6812f9da
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Jan 29 16:37:55 2019 +0000

    powerpc/traps: Fix the message printed when stack overflows
    
    commit 9bf3d3c4e4fd82c7174f4856df372ab2a71005b9 upstream.
    
    Today's message is useless:
    
      [   42.253267] Kernel stack overflow in process (ptrval), r1=c65500b0
    
    This patch fixes it:
    
      [   66.905235] Kernel stack overflow in process sh[356], r1=c65560b0
    
    Fixes: ad67b74d2469 ("printk: hash addresses printed with %p")
    Cc: stable@vger.kernel.org # v4.15+
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    [mpe: Use task_pid_nr()]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 461a52a448937271cad6ba857f17d25f1685339d
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Jan 22 14:11:24 2019 +0000

    powerpc/traps: fix recoverability of machine check handling on book3s/32
    
    commit 0bbea75c476b77fa7d7811d6be911cc7583e640f upstream.
    
    Looks like book3s/32 doesn't set RI on machine check, so
    checking RI before calling die() will always be fatal
    allthought this is not an issue in most cases.
    
    Fixes: b96672dd840f ("powerpc: Machine check interrupt is a non-maskable interrupt")
    Fixes: daf00ae71dad ("powerpc/traps: restore recoverability of machine_check interrupts")
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baed68a953ac6e7c10ff37e604fcc95cfff81bd9
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Fri Feb 22 22:55:31 2019 +0530

    powerpc/hugetlb: Don't do runtime allocation of 16G pages in LPAR configuration
    
    commit 35f2806b481f5b9207f25e1886cba5d1c4d12cc7 upstream.
    
    We added runtime allocation of 16G pages in commit 4ae279c2c96a
    ("powerpc/mm/hugetlb: Allow runtime allocation of 16G.") That was done
    to enable 16G allocation on PowerNV and KVM config. In case of KVM
    config, we mostly would have the entire guest RAM backed by 16G
    hugetlb pages for this to work. PAPR do support partial backing of
    guest RAM with hugepages via ibm,expected#pages node of memory node in
    the device tree. This means rest of the guest RAM won't be backed by
    16G contiguous pages in the host and hence a hash page table insertion
    can fail in such case.
    
    An example error message will look like
    
      hash-mmu: mm: Hashing failure ! EA=0x7efc00000000 access=0x8000000000000006 current=readback
      hash-mmu:     trap=0x300 vsid=0x67af789 ssize=1 base psize=14 psize 14 pte=0xc000000400000386
      readback[12260]: unhandled signal 7 at 00007efc00000000 nip 00000000100012d0 lr 000000001000127c code 2
    
    This patch address that by preventing runtime allocation of 16G
    hugepages in LPAR config. To allocate 16G hugetlb one need to kernel
    command line hugepagesz=16G hugepages=<number of 16G pages>
    
    With radix translation mode we don't run into this issue.
    
    This change will prevent runtime allocation of 16G hugetlb pages on
    kvm with hash translation mode. However, with the current upstream it
    was observed that 16G hugetlbfs backed guest doesn't boot at all.
    
    We observe boot failure with the below message:
      [131354.647546] KVM: map_vrma at 0 failed, ret=-4
    
    That means this patch is not resulting in an observable regression.
    Once we fix the boot issue with 16G hugetlb backed memory, we need to
    use ibm,expected#pages memory node attribute to indicate 16G page
    reservation to the guest. This will also enable partial backing of
    guest RAM with 16G pages.
    
    Fixes: 4ae279c2c96a ("powerpc/mm/hugetlb: Allow runtime allocation of 16G.")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d2e929c3bae4c30afd1b00fdbe6f7d477e13e8c
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Feb 14 11:08:29 2019 +1100

    powerpc/ptrace: Simplify vr_get/set() to avoid GCC warning
    
    commit ca6d5149d2ad0a8d2f9c28cbe379802260a0a5e0 upstream.
    
    GCC 8 warns about the logic in vr_get/set(), which with -Werror breaks
    the build:
    
      In function ‘user_regset_copyin’,
          inlined from ‘vr_set’ at arch/powerpc/kernel/ptrace.c:628:9:
      include/linux/regset.h:295:4: error: ‘memcpy’ offset [-527, -529] is
      out of the bounds [0, 16] of object ‘vrsave’ with type ‘union
      <anonymous>’ [-Werror=array-bounds]
      arch/powerpc/kernel/ptrace.c: In function ‘vr_set’:
      arch/powerpc/kernel/ptrace.c:623:5: note: ‘vrsave’ declared here
         } vrsave;
    
    This has been identified as a regression in GCC, see GCC bug 88273.
    
    However we can avoid the warning and also simplify the logic and make
    it more robust.
    
    Currently we pass -1 as end_pos to user_regset_copyout(). This says
    "copy up to the end of the regset".
    
    The definition of the regset is:
            [REGSET_VMX] = {
                    .core_note_type = NT_PPC_VMX, .n = 34,
                    .size = sizeof(vector128), .align = sizeof(vector128),
                    .active = vr_active, .get = vr_get, .set = vr_set
            },
    
    The end is calculated as (n * size), ie. 34 * sizeof(vector128).
    
    In vr_get/set() we pass start_pos as 33 * sizeof(vector128), meaning
    we can copy up to sizeof(vector128) into/out-of vrsave.
    
    The on-stack vrsave is defined as:
      union {
              elf_vrreg_t reg;
              u32 word;
      } vrsave;
    
    And elf_vrreg_t is:
      typedef __vector128 elf_vrreg_t;
    
    So there is no bug, but we rely on all those sizes lining up,
    otherwise we would have a kernel stack exposure/overwrite on our
    hands.
    
    Rather than relying on that we can pass an explict end_pos based on
    the sizeof(vrsave). The result should be exactly the same but it's
    more obviously not over-reading/writing the stack and it avoids the
    compiler warning.
    
    Reported-by: Meelis Roos <mroos@linux.ee>
    Reported-by: Mathieu Malaterre <malat@debian.org>
    Cc: stable@vger.kernel.org
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Meelis Roos <mroos@linux.ee>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 344996a835d4200537ecee634e4911da887d197e
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Fri Feb 8 14:33:19 2019 +0000

    powerpc: Fix 32-bit KVM-PR lockup and host crash with MacOS guest
    
    commit fe1ef6bcdb4fca33434256a802a3ed6aacf0bd2f upstream.
    
    Commit 8792468da5e1 "powerpc: Add the ability to save FPU without
    giving it up" unexpectedly removed the MSR_FE0 and MSR_FE1 bits from
    the bitmask used to update the MSR of the previous thread in
    __giveup_fpu() causing a KVM-PR MacOS guest to lockup and panic the
    host kernel.
    
    Leaving FE0/1 enabled means unrelated processes might receive FPEs
    when they're not expecting them and crash. In particular if this
    happens to init the host will then panic.
    
    eg (transcribed):
      qemu-system-ppc[837]: unhandled signal 8 at 12cc9ce4 nip 12cc9ce4 lr 12cc9ca4 code 0
      systemd[1]: unhandled signal 8 at 202f02e0 nip 202f02e0 lr 001003d4 code 0
      Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Reinstate these bits to the MSR bitmask to enable MacOS guests to run
    under 32-bit KVM-PR once again without issue.
    
    Fixes: 8792468da5e1 ("powerpc: Add the ability to save FPU without giving it up")
    Cc: stable@vger.kernel.org # v4.6+
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bf8ff7bc6678840b5de668e81689d3fac0bcfdc
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Feb 12 11:58:29 2019 +1100

    powerpc/powernv: Don't reprogram SLW image on every KVM guest entry/exit
    
    commit 19f8a5b5be2898573a5e1dc1db93e8d40117606a upstream.
    
    Commit 24be85a23d1f ("powerpc/powernv: Clear PECE1 in LPCR via stop-api
    only on Hotplug", 2017-07-21) added two calls to opal_slw_set_reg()
    inside pnv_cpu_offline(), with the aim of changing the LPCR value in
    the SLW image to disable wakeups from the decrementer while a CPU is
    offline.  However, pnv_cpu_offline() gets called each time a secondary
    CPU thread is woken up to participate in running a KVM guest, that is,
    not just when a CPU is offlined.
    
    Since opal_slw_set_reg() is a very slow operation (with observed
    execution times around 20 milliseconds), this means that an offline
    secondary CPU can often be busy doing the opal_slw_set_reg() call
    when the primary CPU wants to grab all the secondary threads so that
    it can run a KVM guest.  This leads to messages like "KVM: couldn't
    grab CPU n" being printed and guest execution failing.
    
    There is no need to reprogram the SLW image on every KVM guest entry
    and exit.  So that we do it only when a CPU is really transitioning
    between online and offline, this moves the calls to
    pnv_program_cpu_hotplug_lpcr() into pnv_smp_cpu_kill_self().
    
    Fixes: 24be85a23d1f ("powerpc/powernv: Clear PECE1 in LPCR via stop-api only on Hotplug")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6f03d6078b1e26d908dd31325f3139a6f9d78e3
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Jan 25 12:03:55 2019 +0000

    powerpc/83xx: Also save/restore SPRG4-7 during suspend
    
    commit 36da5ff0bea2dc67298150ead8d8471575c54c7d upstream.
    
    The 83xx has 8 SPRG registers and uses at least SPRG4
    for DTLB handling LRU.
    
    Fixes: 2319f1239592 ("powerpc/mm: e300c2/c3/c4 TLB errata workaround")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0934990125a094965547ccd9961cabc3e67f47d
Author: Jordan Niethe <jniethe5@gmail.com>
Date:   Wed Feb 27 14:02:29 2019 +1100

    powerpc/powernv: Make opal log only readable by root
    
    commit 7b62f9bd2246b7d3d086e571397c14ba52645ef1 upstream.
    
    Currently the opal log is globally readable. It is kernel policy to
    limit the visibility of physical addresses / kernel pointers to root.
    Given this and the fact the opal log may contain this information it
    would be better to limit the readability to root.
    
    Fixes: bfc36894a48b ("powerpc/powernv: Add OPAL message log interface")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
    Reviewed-by: Stewart Smith <stewart@linux.ibm.com>
    Reviewed-by: Andrew Donnellan <andrew.donnellan@au1.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b5305504709393a8a171209288fcb708f31a663
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Feb 21 19:08:37 2019 +0000

    powerpc/wii: properly disable use of BATs when requested.
    
    commit 6d183ca8baec983dc4208ca45ece3c36763df912 upstream.
    
    'nobats' kernel parameter or some options like CONFIG_DEBUG_PAGEALLOC
    deny the use of BATS for mapping memory.
    
    This patch makes sure that the specific wii RAM mapping function
    takes it into account as well.
    
    Fixes: de32400dd26e ("wii: use both mem1 and mem2 as ram")
    Cc: stable@vger.kernel.org
    Reviewed-by: Jonathan Neuschafer <j.neuschaefer@gmx.net>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40b97853c200ab932d24fc20e67c7a68b6a644ea
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed Feb 27 11:45:30 2019 +0000

    powerpc/32: Clear on-stack exception marker upon exception return
    
    commit 9580b71b5a7863c24a9bd18bcd2ad759b86b1eff upstream.
    
    Clear the on-stack STACK_FRAME_REGS_MARKER on exception exit in order
    to avoid confusing stacktrace like the one below.
    
      Call Trace:
      [c0e9dca0] [c01c42a0] print_address_description+0x64/0x2bc (unreliable)
      [c0e9dcd0] [c01c4684] kasan_report+0xfc/0x180
      [c0e9dd10] [c0895130] memchr+0x24/0x74
      [c0e9dd30] [c00a9e38] msg_print_text+0x124/0x574
      [c0e9dde0] [c00ab710] console_unlock+0x114/0x4f8
      [c0e9de40] [c00adc60] vprintk_emit+0x188/0x1c4
      --- interrupt: c0e9df00 at 0x400f330
          LR = init_stack+0x1f00/0x2000
      [c0e9de80] [c00ae3c4] printk+0xa8/0xcc (unreliable)
      [c0e9df20] [c0c27e44] early_irq_init+0x38/0x108
      [c0e9df50] [c0c15434] start_kernel+0x310/0x488
      [c0e9dff0] [00003484] 0x3484
    
    With this patch the trace becomes:
    
      Call Trace:
      [c0e9dca0] [c01c42c0] print_address_description+0x64/0x2bc (unreliable)
      [c0e9dcd0] [c01c46a4] kasan_report+0xfc/0x180
      [c0e9dd10] [c0895150] memchr+0x24/0x74
      [c0e9dd30] [c00a9e58] msg_print_text+0x124/0x574
      [c0e9dde0] [c00ab730] console_unlock+0x114/0x4f8
      [c0e9de40] [c00adc80] vprintk_emit+0x188/0x1c4
      [c0e9de80] [c00ae3e4] printk+0xa8/0xcc
      [c0e9df20] [c0c27e44] early_irq_init+0x38/0x108
      [c0e9df50] [c0c15434] start_kernel+0x310/0x488
      [c0e9dff0] [00003484] 0x3484
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7dad095f35adff2d4e82a60780ef51a4f05fb8b
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Tue Mar 5 16:17:58 2019 -0500

    security/selinux: fix SECURITY_LSM_NATIVE_LABELS on reused superblock
    
    commit 3815a245b50124f0865415dcb606a034e97494d4 upstream.
    
    In the case when we're reusing a superblock, selinux_sb_clone_mnt_opts()
    fails to set set_kern_flags, with the result that
    nfs_clone_sb_security() incorrectly clears NFS_CAP_SECURITY_LABEL.
    
    The result is that if you mount the same NFS filesystem twice, NFS
    security labels are turned off, even if they would work fine if you
    mounted the filesystem only once.
    
    ("fixes" may be not exactly the right tag, it may be more like
    "fixed-other-cases-but-missed-this-one".)
    
    Cc: Scott Mayhew <smayhew@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 0b4d3452b8b4 "security/selinux: allow security_sb_clone_mnt_opts..."
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Acked-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4f6f82c9edc20387d51bc53081d1510c3943f31
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Mar 9 00:07:34 2019 +0800

    selinux: add the missing walk_size + len check in selinux_sctp_bind_connect
    
    commit 292c997a1970f8d1e1dfa354ed770a22f7b5a434 upstream.
    
    As does in __sctp_connect(), when checking addrs in a while loop, after
    get the addr len according to sa_family, it's necessary to do the check
    walk_size + af->sockaddr_len > addrs_size to make sure it won't access
    an out-of-bounds addr.
    
    The same thing is needed in selinux_sctp_bind_connect(), otherwise an
    out-of-bounds issue can be triggered:
    
      [14548.772313] BUG: KASAN: slab-out-of-bounds in selinux_sctp_bind_connect+0x1aa/0x1f0
      [14548.927083] Call Trace:
      [14548.938072]  dump_stack+0x9a/0xe9
      [14548.953015]  print_address_description+0x65/0x22e
      [14548.996524]  kasan_report.cold.6+0x92/0x1a6
      [14549.015335]  selinux_sctp_bind_connect+0x1aa/0x1f0
      [14549.036947]  security_sctp_bind_connect+0x58/0x90
      [14549.058142]  __sctp_setsockopt_connectx+0x5a/0x150 [sctp]
      [14549.081650]  sctp_setsockopt.part.24+0x1322/0x3ce0 [sctp]
    
    Cc: stable@vger.kernel.org
    Fixes: d452930fd3b9 ("selinux: Add SCTP support")
    Reported-by: Chunyu Hu <chuhu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 584f390d1039e06512f716f5c30567fdc3763a17
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Thu Feb 21 11:24:09 2019 -0500

    jbd2: fix compile warning when using JBUFFER_TRACE
    
    commit 01215d3edb0f384ddeaa5e4a22c1ae5ff634149f upstream.
    
    The jh pointer may be used uninitialized in the two cases below and the
    compiler complain about it when enabling JBUFFER_TRACE macro, fix them.
    
    In file included from fs/jbd2/transaction.c:19:0:
    fs/jbd2/transaction.c: In function ‘jbd2_journal_get_undo_access’:
    ./include/linux/jbd2.h:1637:38: warning: ‘jh’ is used uninitialized in this function [-Wuninitialized]
     #define JBUFFER_TRACE(jh, info) do { printk("%s: %d\n", __func__, jh->b_jcount);} while (0)
                                          ^
    fs/jbd2/transaction.c:1219:23: note: ‘jh’ was declared here
      struct journal_head *jh;
                           ^
    In file included from fs/jbd2/transaction.c:19:0:
    fs/jbd2/transaction.c: In function ‘jbd2_journal_dirty_metadata’:
    ./include/linux/jbd2.h:1637:38: warning: ‘jh’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     #define JBUFFER_TRACE(jh, info) do { printk("%s: %d\n", __func__, jh->b_jcount);} while (0)
                                          ^
    fs/jbd2/transaction.c:1332:23: note: ‘jh’ was declared here
      struct journal_head *jh;
                           ^
    
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbe4bc993836f64e8c26b109addc1ac6eb997bab
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Sun Feb 10 23:23:04 2019 -0500

    jbd2: clear dirty flag when revoking a buffer from an older transaction
    
    commit 904cdbd41d749a476863a0ca41f6f396774f26e4 upstream.
    
    Now, we capture a data corruption problem on ext4 while we're truncating
    an extent index block. Imaging that if we are revoking a buffer which
    has been journaled by the committing transaction, the buffer's jbddirty
    flag will not be cleared in jbd2_journal_forget(), so the commit code
    will set the buffer dirty flag again after refile the buffer.
    
    fsx                               kjournald2
                                      jbd2_journal_commit_transaction
    jbd2_journal_revoke                commit phase 1~5...
     jbd2_journal_forget
       belongs to older transaction    commit phase 6
       jbddirty not clear               __jbd2_journal_refile_buffer
                                         __jbd2_journal_unfile_buffer
                                          test_clear_buffer_jbddirty
                                           mark_buffer_dirty
    
    Finally, if the freed extent index block was allocated again as data
    block by some other files, it may corrupt the file data after writing
    cached pages later, such as during unmount time. (In general,
    clean_bdev_aliases() related helpers should be invoked after
    re-allocation to prevent the above corruption, but unfortunately we
    missed it when zeroout the head of extra extent blocks in
    ext4_ext_handle_unwritten_extents()).
    
    This patch mark buffer as freed and set j_next_transaction to the new
    transaction when it already belongs to the committing transaction in
    jbd2_journal_forget(), so that commit code knows it should clear dirty
    bits when it is done with the buffer.
    
    This problem can be reproduced by xfstests generic/455 easily with
    seeds (3246 3247 3248 3249).
    
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3545324fba52a541ad70d3f2d187ff13432ed279
Author: Jay Dolan <jay.dolan@accesio.com>
Date:   Tue Feb 12 21:43:12 2019 -0800

    serial: 8250_pci: Have ACCES cards that use the four port Pericom PI7C9X7954 chip use the pci_pericom_setup()
    
    commit 78d3820b9bd39028727c6aab7297b63c093db343 upstream.
    
    The four port Pericom chips have the fourth port at the wrong address.
    Make use of quirk to fix it.
    
    Fixes: c8d192428f52 ("serial: 8250: added acces i/o products quad and octal serial cards")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Jay Dolan <jay.dolan@accesio.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8225bb965f29bcf28f15fa47e37c799ca7a2f691
Author: Jay Dolan <jay.dolan@accesio.com>
Date:   Tue Feb 12 21:43:11 2019 -0800

    serial: 8250_pci: Fix number of ports for ACCES serial cards
    
    commit b896b03bc7fce43a07012cc6bf5e2ab2fddf3364 upstream.
    
    Have the correct number of ports created for ACCES serial cards. Two port
    cards show up as four ports, and four port cards show up as eight.
    
    Fixes: c8d192428f52 ("serial: 8250: added acces i/o products quad and octal serial cards")
    Signed-off-by: Jay Dolan <jay.dolan@accesio.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d0b55bb2aec89c1b10000a2871c3f3f9c427eee
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Feb 24 13:00:53 2019 +0100

    serial: 8250_of: assume reg-shift of 2 for mrvl,mmp-uart
    
    commit f4817843e39ce78aace0195a57d4e8500a65a898 upstream.
    
    There are two other drivers that bind to mrvl,mmp-uart and both of them
    assume register shift of 2 bits. There are device trees that lack the
    property and rely on that assumption.
    
    If this driver wins the race to bind to those devices, it should behave
    the same as the older deprecated driver.
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4b021ec4b5afdfe651fd9bc401081456c44cdbe
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Fri Feb 15 18:45:08 2019 +0200

    serial: uartps: Fix stuck ISR if RX disabled with non-empty FIFO
    
    commit 7abab1605139bc41442864c18f9573440f7ca105 upstream.
    
    If RX is disabled while there are still unprocessed bytes in RX FIFO,
    cdns_uart_handle_rx() called from interrupt handler will get stuck in
    the receive loop as read bytes will not get removed from the RX FIFO
    and CDNS_UART_SR_RXEMPTY bit will never get set.
    
    Avoid the stuck handler by checking first if RX is disabled. port->lock
    protects against race with RX-disabling functions.
    
    This HW behavior was mentioned by Nathan Rossi in 43e98facc4a3 ("tty:
    xuartps: Fix RX hang, and TX corruption in termios call") which fixed a
    similar issue in cdns_uart_set_termios().
    The behavior can also be easily verified by e.g. setting
    CDNS_UART_CR_RX_DIS at the beginning of cdns_uart_handle_rx() - the
    following loop will then get stuck.
    
    Resetting the FIFO using RXRST would not set RXEMPTY either so simply
    issuing a reset after RX-disable would not work.
    
    I observe this frequently on a ZynqMP board during heavy RX load at 1M
    baudrate when the reader process exits and thus RX gets disabled.
    
    Fixes: 61ec9016988f ("tty/serial: add support for Xilinx PS UART")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9920eb4003c5e0f1447c2125c5c8e101b5ad8b8f
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Mar 6 14:35:15 2019 -0500

    bpf: only test gso type on gso packets
    
    [ Upstream commit 4c3024debf62de4c6ac6d3cb4c0063be21d4f652 ]
    
    BPF can adjust gso only for tcp bytestreams. Fail on other gso types.
    
    But only on gso packets. It does not touch this field if !gso_size.
    
    Fixes: b90efd225874 ("bpf: only adjust gso_size on bytestream protocols")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 206fa92c9d523dad266511dc69aa75c9a79369ec
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Tue Mar 5 11:04:08 2019 +0000

    drm/i915: Relax mmap VMA check
    
    [ Upstream commit ca22f32a6296cbfa29de56328c8505560a18cfa8 ]
    
    Legacy behaviour was to allow non-page-aligned mmap requests, as does the
    linux mmap(2) implementation by virtue of automatically rounding up for
    the caller.
    
    To avoid breaking legacy userspace relax the newly introduced fix.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Fixes: 5c4604e757ba ("drm/i915: Prevent a race during I915_GEM_MMAP ioctl with WC set")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Adam Zabrocki <adamza@microsoft.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v4.0+
    Cc: Akash Goel <akash.goel@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190305110409.28633-1-tvrtko.ursulin@linux.intel.com
    (cherry picked from commit a90e1948efb648f567444f87f3c19b2a0787affd)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 116a9e31237cd99c8aac653a3b08f41f9c5b90e7
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Nov 28 15:31:37 2018 +0100

    can: flexcan: FLEXCAN_IFLAG_MB: add () around macro argument
    
    [ Upstream commit 22233f7bf2c99ef52ec19d30876a12d2f725972e ]
    
    This patch fixes the following checkpatch warning:
    
    | Macro argument 'x' may be better as '(x)' to avoid precedence issues
    
    Fixes: cbffaf7aa09e ("can: flexcan: Always use last mailbox for TX")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f29e4c2dbb1d8fc3f636e79c41492d6b0e5cae1
Author: Mark Walton <mark.walton@serialtek.com>
Date:   Thu Feb 28 15:46:36 2019 +0000

    gpio: pca953x: Fix dereference of irq data in shutdown
    
    commit c378b3aa015931a46c91d6ccc2fe04d97801d060 upstream.
    
    If a PCA953x gpio was used as an interrupt and then released,
    the shutdown function was trying to extract the pca953x_chip
    pointer directly from the irq_data, but in reality was getting
    the gpio_chip structure.
    
    The net effect was that the subsequent writes to the data
    structure corrupted data in the gpio_chip structure, which wasn't
    immediately obvious until attempting to use the GPIO again in the
    future, at which point the kernel panics.
    
    This fix correctly extracts the pca953x_chip structure via the
    gpio_chip structure, as is correctly done in the other irq
    functions.
    
    Fixes: 0a70fe00efea ("gpio: pca953x: Clear irq trigger type on irq shutdown")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mark Walton <mark.walton@serialtek.com>
    Reviewed-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e86a57ecdfac68330a19a87bdb995acc31898cbb
Author: Loic Poulain <loic.poulain@linaro.org>
Date:   Wed Jan 30 11:48:07 2019 -0500

    media: i2c: ov5640: Fix post-reset delay
    
    commit 1d4c41f3d887bcd66e82cb2fda124533dad8808a upstream.
    
    According to the ov5640 specification (2.7 power up sequence), host can
    access the sensor's registers 20ms after reset. Trying to access them
    before leads to undefined behavior and result in sporadic initialization
    errors.
    
    Signed-off-by: Loic Poulain <loic.poulain@linaro.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Cc: Adam Ford <aford173@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f9614d0540b35b018a4ddb21d1a184e098f6758
Author: Sowjanya Komatineni <skomatineni@nvidia.com>
Date:   Tue Feb 12 11:06:44 2019 -0800

    i2c: tegra: fix maximum transfer size
    
    commit f4e3f4ae1d9c9330de355f432b69952e8cef650c upstream.
    
    Tegra186 and prior supports maximum 4K bytes per packet transfer
    including 12 bytes of packet header.
    
    This patch fixes max write length limit to account packet header
    size for transfers.
    
    Cc: stable@vger.kernel.org # 4.4+
    
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25970b517db1a6a12ca410c20321c6160d70f07a
Author: QiaoChong <qiaochong@loongson.cn>
Date:   Sat Feb 9 20:59:07 2019 +0000

    parport_pc: fix find_superio io compare code, should use equal test.
    
    commit 21698fd57984cd28207d841dbdaa026d6061bceb upstream.
    
    In the original code before 181bf1e815a2 the loop was continuing until
    it finds the first matching superios[i].io and p->base.
    But after 181bf1e815a2 the logic changed and the loop now returns the
    pointer to the first mismatched array element which is then used in
    get_superio_dma() and get_superio_irq() and thus returning the wrong
    value.
    Fix the condition so that it now returns the correct pointer.
    
    Fixes: 181bf1e815a2 ("parport_pc: clean up the modified while loops using for")
    Cc: Alan Cox <alan@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: QiaoChong <qiaochong@loongson.cn>
    [rewrite the commit message]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57c29a08c4cf82884406016950716c2e01cb5a40
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Thu Jan 24 15:11:53 2019 +0200

    intel_th: Don't reference unassigned outputs
    
    commit 9ed3f22223c33347ed963e7c7019cf2956dd4e37 upstream.
    
    When an output port driver is removed, also remove references to it from
    any masters. Failing to do this causes a NULL ptr dereference when
    configuring another output port:
    
    > BUG: unable to handle kernel NULL pointer dereference at 000000000000000d
    > RIP: 0010:master_attr_store+0x9d/0x160 [intel_th_gth]
    > Call Trace:
    > dev_attr_store+0x1b/0x30
    > sysfs_kf_write+0x3c/0x50
    > kernfs_fop_write+0x125/0x1a0
    > __vfs_write+0x3a/0x190
    > ? __vfs_write+0x5/0x190
    > ? _cond_resched+0x1a/0x50
    > ? rcu_all_qs+0x5/0xb0
    > ? __vfs_write+0x5/0x190
    > vfs_write+0xb8/0x1b0
    > ksys_write+0x55/0xc0
    > __x64_sys_write+0x1a/0x20
    > do_syscall_64+0x5a/0x140
    > entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: b27a6a3f97b9 ("intel_th: Add Global Trace Hub driver")
    CC: stable@vger.kernel.org # v4.4+
    Reported-by: Ammy Yi <ammy.yi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c835b4417c18fc2868a38d4689274e3daed5c32b
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Jan 23 17:44:16 2019 +0300

    device property: Fix the length used in PROPERTY_ENTRY_STRING()
    
    commit 2b6e492467c78183bb629bb0a100ea3509b615a5 upstream.
    
    With string type property entries we need to use
    sizeof(const char *) instead of the number of characters as
    the length of the entry.
    
    If the string was shorter then sizeof(const char *),
    attempts to read it would have failed with -EOVERFLOW. The
    problem has been hidden because all build-in string
    properties have had a string longer then 8 characters until
    now.
    
    Fixes: a85f42047533 ("device property: helper macros for property entry creation")
    Cc: 4.5+ <stable@vger.kernel.org> # 4.5+
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93c8a44a8297dd2b7caffeeb47e2c2256608b8ca
Author: Zev Weiss <zev@bewilderbeest.net>
Date:   Mon Mar 11 23:28:02 2019 -0700

    kernel/sysctl.c: add missing range check in do_proc_dointvec_minmax_conv
    
    commit 8cf7630b29701d364f8df4a50e4f1f5e752b2778 upstream.
    
    This bug has apparently existed since the introduction of this function
    in the pre-git era (4500e91754d3 in Thomas Gleixner's history.git,
    "[NET]: Add proc_dointvec_userhz_jiffies, use it for proper handling of
    neighbour sysctls.").
    
    As a minimal fix we can simply duplicate the corresponding check in
    do_proc_dointvec_conv().
    
    Link: http://lkml.kernel.org/r/20190207123426.9202-3-zev@bewilderbeest.net
    Signed-off-by: Zev Weiss <zev@bewilderbeest.net>
    Cc: Brendan Higgins <brendanhiggins@google.com>
    Cc: Iurii Zaikin <yzaikin@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: <stable@vger.kernel.org>    [2.6.2+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09417dd35e377d927fe10ca8acf2e9876585df35
Author: Jan Stancek <jstancek@redhat.com>
Date:   Tue Mar 5 15:50:08 2019 -0800

    mm/memory.c: do_fault: avoid usage of stale vm_area_struct
    
    commit fc8efd2ddfed3f343c11b693e87140ff358d7ff5 upstream.
    
    LTP testcase mtest06 [1] can trigger a crash on s390x running 5.0.0-rc8.
    This is a stress test, where one thread mmaps/writes/munmaps memory area
    and other thread is trying to read from it:
    
      CPU: 0 PID: 2611 Comm: mmap1 Not tainted 5.0.0-rc8+ #51
      Hardware name: IBM 2964 N63 400 (z/VM 6.4.0)
      Krnl PSW : 0404e00180000000 00000000001ac8d8 (__lock_acquire+0x7/0x7a8)
      Call Trace:
      ([<0000000000000000>]           (null))
       [<00000000001adae4>] lock_acquire+0xec/0x258
       [<000000000080d1ac>] _raw_spin_lock_bh+0x5c/0x98
       [<000000000012a780>] page_table_free+0x48/0x1a8
       [<00000000002f6e54>] do_fault+0xdc/0x670
       [<00000000002fadae>] __handle_mm_fault+0x416/0x5f0
       [<00000000002fb138>] handle_mm_fault+0x1b0/0x320
       [<00000000001248cc>] do_dat_exception+0x19c/0x2c8
       [<000000000080e5ee>] pgm_check_handler+0x19e/0x200
    
    page_table_free() is called with NULL mm parameter, but because "0" is a
    valid address on s390 (see S390_lowcore), it keeps going until it
    eventually crashes in lockdep's lock_acquire.  This crash is
    reproducible at least since 4.14.
    
    Problem is that "vmf->vma" used in do_fault() can become stale.  Because
    mmap_sem may be released, other threads can come in, call munmap() and
    cause "vma" be returned to kmem cache, and get zeroed/re-initialized and
    re-used:
    
    handle_mm_fault                           |
      __handle_mm_fault                       |
        do_fault                              |
          vma = vmf->vma                      |
          do_read_fault                       |
            __do_fault                        |
              vma->vm_ops->fault(vmf);        |
                mmap_sem is released          |
                                              |
                                              | do_munmap()
                                              |   remove_vma_list()
                                              |     remove_vma()
                                              |       vm_area_free()
                                              |         # vma is released
                                              | ...
                                              | # same vma is allocated
                                              | # from kmem cache
                                              | do_mmap()
                                              |   vm_area_alloc()
                                              |     memset(vma, 0, ...)
                                              |
          pte_free(vma->vm_mm, ...);          |
            page_table_free                   |
              spin_lock_bh(&mm->context.lock);|
                <crash>                       |
    
    Cache mm_struct to avoid using potentially stale "vma".
    
    [1] https://github.com/linux-test-project/ltp/blob/master/testcases/kernel/mem/mtest06/mmap1.c
    
    Link: http://lkml.kernel.org/r/5b3fdf19e2a5be460a384b936f5b56e13733f1b8.1551595137.git.jstancek@redhat.com
    Signed-off-by: Jan Stancek <jstancek@redhat.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Reviewed-by: Matthew Wilcox <willy@infradead.org>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Reviewed-by: Minchan Kim <minchan@kernel.org>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Huang Ying <ying.huang@intel.com>
    Cc: Souptick Joarder <jrdr.linux@gmail.com>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1ddc7b785b4ad724994834ffc671d620be1d060
Author: Roman Penyaev <rpenyaev@suse.de>
Date:   Tue Mar 5 15:43:20 2019 -0800

    mm/vmalloc: fix size check for remap_vmalloc_range_partial()
    
    commit 401592d2e095947344e10ec0623adbcd58934dd4 upstream.
    
    When VM_NO_GUARD is not set area->size includes adjacent guard page,
    thus for correct size checking get_vm_area_size() should be used, but
    not area->size.
    
    This fixes possible kernel oops when userspace tries to mmap an area on
    1 page bigger than was allocated by vmalloc_user() call: the size check
    inside remap_vmalloc_range_partial() accounts non-existing guard page
    also, so check successfully passes but vmalloc_to_page() returns NULL
    (guard page does not physically exist).
    
    The following code pattern example should trigger an oops:
    
      static int oops_mmap(struct file *file, struct vm_area_struct *vma)
      {
            void *mem;
    
            mem = vmalloc_user(4096);
            BUG_ON(!mem);
            /* Do not care about mem leak */
    
            return remap_vmalloc_range(vma, mem, 0);
      }
    
    And userspace simply mmaps size + PAGE_SIZE:
    
      mmap(NULL, 8192, PROT_WRITE|PROT_READ, MAP_PRIVATE, fd, 0);
    
    Possible candidates for oops which do not have any explicit size
    checks:
    
       *** drivers/media/usb/stkwebcam/stk-webcam.c:
       v4l_stk_mmap[789]   ret = remap_vmalloc_range(vma, sbuf->buffer, 0);
    
    Or the following one:
    
       *** drivers/video/fbdev/core/fbmem.c
       static int
       fb_mmap(struct file *file, struct vm_area_struct * vma)
            ...
            res = fb->fb_mmap(info, vma);
    
    Where fb_mmap callback calls remap_vmalloc_range() directly without any
    explicit checks:
    
       *** drivers/video/fbdev/vfb.c
       static int vfb_mmap(struct fb_info *info,
                 struct vm_area_struct *vma)
       {
           return remap_vmalloc_range(vma, (void *)info->fix.smem_start, vma->vm_pgoff);
       }
    
    Link: http://lkml.kernel.org/r/20190103145954.16942-2-rpenyaev@suse.de
    Signed-off-by: Roman Penyaev <rpenyaev@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: "Luis R. Rodriguez" <mcgrof@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 234c0cc982211bb5539db632f31490bf0ad54827
Author: zhongjiang <zhongjiang@huawei.com>
Date:   Tue Mar 5 15:41:16 2019 -0800

    mm: hwpoison: fix thp split handing in soft_offline_in_use_page()
    
    commit 46612b751c4941c5c0472ddf04027e877ae5990f upstream.
    
    When soft_offline_in_use_page() runs on a thp tail page after pmd is
    split, we trigger the following VM_BUG_ON_PAGE():
    
      Memory failure: 0x3755ff: non anonymous thp
      __get_any_page: 0x3755ff: unknown zero refcount page type 2fffff80000000
      Soft offlining pfn 0x34d805 at process virtual address 0x20fff000
      page:ffffea000d360140 count:0 mapcount:0 mapping:0000000000000000 index:0x1
      flags: 0x2fffff80000000()
      raw: 002fffff80000000 ffffea000d360108 ffffea000d360188 0000000000000000
      raw: 0000000000000001 0000000000000000 00000000ffffffff 0000000000000000
      page dumped because: VM_BUG_ON_PAGE(page_ref_count(page) == 0)
      ------------[ cut here ]------------
      kernel BUG at ./include/linux/mm.h:519!
    
    soft_offline_in_use_page() passed refcount and page lock from tail page
    to head page, which is not needed because we can pass any subpage to
    split_huge_page().
    
    Naoya had fixed a similar issue in c3901e722b29 ("mm: hwpoison: fix thp
    split handling in memory_failure()").  But he missed fixing soft
    offline.
    
    Link: http://lkml.kernel.org/r/1551452476-24000-1-git-send-email-zhongjiang@huawei.com
    Fixes: 61f5d698cc97 ("mm: re-enable THP")
    Signed-off-by: zhongjiang <zhongjiang@huawei.com>
    Acked-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>    [4.5+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7fd1a968c5dc7db5a35c081b107b2417f5959a5
Author: Phuong Nguyen <phuong.nguyen.xw@renesas.com>
Date:   Thu Jan 17 17:44:17 2019 +0900

    dmaengine: usb-dmac: Make DMAC system sleep callbacks explicit
    
    commit d9140a0da4a230a03426d175145989667758aa6a upstream.
    
    This commit fixes the issue that USB-DMAC hangs silently after system
    resumes on R-Car Gen3 hence renesas_usbhs will not work correctly
    when using USB-DMAC for bulk transfer e.g. ethernet or serial
    gadgets.
    
    The issue can be reproduced by these steps:
     1. modprobe g_serial
     2. Suspend and resume system.
     3. connect a usb cable to host side
     4. Transfer data from Host to Target
     5. cat /dev/ttyGS0 (Target side)
     6. echo "test" > /dev/ttyACM0 (Host side)
    
    The 'cat' will not result anything. However, system still can work
    normally.
    
    Currently, USB-DMAC driver does not have system sleep callbacks hence
    this driver relies on the PM core to force runtime suspend/resume to
    suspend and reinitialize USB-DMAC during system resume. After
    the commit 17218e0092f8 ("PM / genpd: Stop/start devices without
    pm_runtime_force_suspend/resume()"), PM core will not force
    runtime suspend/resume anymore so this issue happens.
    
    To solve this, make system suspend resume explicit by using
    pm_runtime_force_{suspend,resume}() as the system sleep callbacks.
    SET_NOIRQ_SYSTEM_SLEEP_PM_OPS() is used to make sure USB-DMAC
    suspended after and initialized before renesas_usbhs."
    
    Signed-off-by: Phuong Nguyen <phuong.nguyen.xw@renesas.com>
    Signed-off-by: Hiroyuki Yokoyama <hiroyuki.yokoyama.vx@renesas.com>
    Cc: <stable@vger.kernel.org> # v4.16+
    [shimoda: revise the commit log and add Cc tag]
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 822e2185343938667fbb4e51ec2cd5dd5b2ae632
Author: Nikolaus Voss <nikolaus.voss@loewensteinmedical.de>
Date:   Wed Feb 20 16:11:38 2019 +0100

    usb: typec: tps6598x: handle block writes separately with plain-I2C adapters
    
    commit 8a863a608d47fa5d9dd15cf841817f73f804cf91 upstream.
    
    Commit 1a2f474d328f handles block _reads_ separately with plain-I2C
    adapters, but the problem described with regmap-i2c not handling
    SMBus block transfers (i.e. read and writes) correctly also exists
    with writes.
    
    As workaround, this patch adds a block write function the same way
    1a2f474d328f adds a block read function.
    
    Fixes: 1a2f474d328f ("usb: typec: tps6598x: handle block reads separately with plain-I2C adapters")
    Fixes: 0a4c005bd171 ("usb: typec: driver for TI TPS6598x USB Power Delivery controllers")
    Signed-off-by: Nikolaus Voss <nikolaus.voss@loewensteinmedical.de>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8415e718a06b96402c19efa03455e890502b8c39
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Feb 24 18:36:22 2019 +0300

    usb: chipidea: tegra: Fix missed ci_hdrc_remove_device()
    
    commit 563b9372f7ec57e44e8f9a8600c5107d7ffdd166 upstream.
    
    The ChipIdea's platform device need to be unregistered on Tegra's driver
    module removal.
    
    Fixes: dfebb5f43a78827a ("usb: chipidea: Add support for Tegra20/30/114/124")
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Peter Chen <peter.chen@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1c1ef7b4d63c18a1853f874e298cadc98b829f7
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sun Jan 27 23:09:21 2019 -0300

    clk: ingenic: Fix doc of ingenic_cgu_div_info
    
    commit 7ca4c922aad2e3c46767a12f80d01c6b25337b59 upstream.
    
    The 'div' field does not represent a number of bits used to divide
    (understand: right-shift) the divider, but a number itself used to
    divide the divider.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Maarten ter Huurne <maarten@treewalker.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a04611fc26655c0d817cfee73a133657685647f
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sun Jan 27 23:09:20 2019 -0300

    clk: ingenic: Fix round_rate misbehaving with non-integer dividers
    
    commit bc5d922c93491878c44c9216e9d227c7eeb81d7f upstream.
    
    Take a parent rate of 180 MHz, and a requested rate of 4.285715 MHz.
    This results in a theorical divider of 41.999993 which is then rounded
    up to 42. The .round_rate function would then return (180 MHz / 42) as
    the clock, rounded down, so 4.285714 MHz.
    
    Calling clk_set_rate on 4.285714 MHz would round the rate again, and
    give a theorical divider of 42,0000028, now rounded up to 43, and the
    rate returned would be (180 MHz / 43) which is 4.186046 MHz, aka. not
    what we requested.
    
    Fix this by rounding up the divisions.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Maarten ter Huurne <maarten@treewalker.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33e7604ac8fd3b0e995bff4dbf0e25d36e9e8611
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Feb 21 12:45:52 2019 +0100

    clk: samsung: exynos5: Fix kfree() of const memory on setting driver_override
    
    commit 785c9f411eb2d9a6076d3511c631587d5e676bf3 upstream.
    
    Platform driver driver_override field should not be initialized from
    const memory because the core later kfree() it.  If driver_override is
    manually set later through sysfs, kfree() of old value leads to:
    
        $ echo "new_value" > /sys/bus/platform/drivers/.../driver_override
    
        kernel BUG at ../mm/slub.c:3960!
        Internal error: Oops - BUG: 0 [#1] PREEMPT SMP ARM
        ...
        (kfree) from [<c058e8c0>] (platform_set_driver_override+0x84/0xac)
        (platform_set_driver_override) from [<c058e908>] (driver_override_store+0x20/0x34)
        (driver_override_store) from [<c031f778>] (kernfs_fop_write+0x100/0x1dc)
        (kernfs_fop_write) from [<c0296de8>] (__vfs_write+0x2c/0x17c)
        (__vfs_write) from [<c02970c4>] (vfs_write+0xa4/0x188)
        (vfs_write) from [<c02972e8>] (ksys_write+0x4c/0xac)
        (ksys_write) from [<c0101000>] (ret_fast_syscall+0x0/0x28)
    
    The clk-exynos5-subcmu driver uses override only for the purpose of
    creating meaningful names for children devices (matching names of power
    domains, e.g. DISP, MFC).  The driver_override was not developed for
    this purpose so just switch to default names of devices to fix the
    issue.
    
    Fixes: b06a532bf1fa ("clk: samsung: Add Exynos5 sub-CMU clock driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d1de1e6d266f273f77f7323c7ef5ee87650bd4a
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Feb 21 12:45:51 2019 +0100

    clk: samsung: exynos5: Fix possible NULL pointer exception on platform_device_alloc() failure
    
    commit 5f0b6216ea381b43c0dff88702d6cc5673d63922 upstream.
    
    During initialization of subdevices if platform_device_alloc() failed,
    returned NULL pointer will be later dereferenced.  Add proper error
    paths to exynos5_clk_register_subcmu().  The return value of this
    function is still ignored because at this stage of init there is nothing
    we can do.
    
    Fixes: b06a532bf1fa ("clk: samsung: Add Exynos5 sub-CMU clock driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9aba7a8fd163b8a58a25505692542c184ab44b7f
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Feb 11 14:59:07 2019 -0800

    clk: clk-twl6040: Fix imprecise external abort for pdmclk
    
    commit 5ae51d67aec95f6f9386aa8dd5db424964895575 upstream.
    
    I noticed that modprobe clk-twl6040 can fail after a cold boot with:
    abe_cm:clk:0010:0: failed to enable
    ...
    Unhandled fault: imprecise external abort (0x1406) at 0xbe896b20
    
    WARNING: CPU: 1 PID: 29 at drivers/clk/clk.c:828 clk_core_disable_lock+0x18/0x24
    ...
    (clk_core_disable_lock) from [<c0123534>] (_disable_clocks+0x18/0x90)
    (_disable_clocks) from [<c0124040>] (_idle+0x17c/0x244)
    (_idle) from [<c0125ad4>] (omap_hwmod_idle+0x24/0x44)
    (omap_hwmod_idle) from [<c053a038>] (sysc_runtime_suspend+0x48/0x108)
    (sysc_runtime_suspend) from [<c06084c4>] (__rpm_callback+0x144/0x1d8)
    (__rpm_callback) from [<c0608578>] (rpm_callback+0x20/0x80)
    (rpm_callback) from [<c0607034>] (rpm_suspend+0x120/0x694)
    (rpm_suspend) from [<c0607a78>] (__pm_runtime_idle+0x60/0x84)
    (__pm_runtime_idle) from [<c053aaf0>] (sysc_probe+0x874/0xf2c)
    (sysc_probe) from [<c05fecd4>] (platform_drv_probe+0x48/0x98)
    
    After searching around for a similar issue, I came across an earlier fix
    that never got merged upstream in the Android tree for glass-omap-xrr02.
    There is patch "MFD: twl6040-codec: Implement PDMCLK cold temp errata"
    by Misael Lopez Cruz <misael.lopez@ti.com>.
    
    Based on my observations, this fix is also needed when cold booting
    devices, and not just for deeper idle modes. Since we now have a clock
    driver for pdmclk, let's fix the issue in twl6040_pdmclk_prepare().
    
    Cc: Misael Lopez Cruz <misael.lopez@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e02a5f5aba3f414a36b49148fa9a5c0b63965ae
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Feb 8 11:25:23 2019 +0900

    clk: uniphier: Fix update register for CPU-gear
    
    commit 521282237b9d78b9bff423ec818becd4c95841c2 upstream.
    
    Need to set the update bit in UNIPHIER_CLK_CPUGEAR_UPD to update
    the CPU-gear value.
    
    Fixes: d08f1f0d596c ("clk: uniphier: add CPU-gear change (cpufreq) support")
    Cc: linux-stable@vger.kernel.org
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Acked-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62600af3a7cb11d20439f745451db96bde7ff08c
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jan 29 17:17:24 2019 +0100

    ext2: Fix underflow in ext2_max_size()
    
    commit 1c2d14212b15a60300a2d4f6364753e87394c521 upstream.
    
    When ext2 filesystem is created with 64k block size, ext2_max_size()
    will return value less than 0. Also, we cannot write any file in this fs
    since the sb->maxbytes is less than 0. The core of the problem is that
    the size of block index tree for such large block size is more than
    i_blocks can carry. So fix the computation to count with this
    possibility.
    
    File size limits computed with the new function for the full range of
    possible block sizes look like:
    
    bits file_size
    10     17247252480
    11    275415851008
    12   2196873666560
    13   2197948973056
    14   2198486220800
    15   2198754754560
    16   2198888906752
    
    CC: stable@vger.kernel.org
    Reported-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c335b49379b5cd509e441822fa7c4317cee7f5aa
Author: Vaibhav Jain <vaibhav@linux.ibm.com>
Date:   Tue Jan 29 16:36:18 2019 +0530

    cxl: Wrap iterations over afu slices inside 'afu_list_lock'
    
    commit edeb304f659792fb5bab90d7d6f3408b4c7301fb upstream.
    
    Within cxl module, iteration over array 'adapter->afu' may be racy
    at few points as it might be simultaneously read during an EEH and its
    contents being set to NULL while driver is being unloaded or unbound
    from the adapter. This might result in a NULL pointer to 'struct afu'
    being de-referenced during an EEH thereby causing a kernel oops.
    
    This patch fixes this by making sure that all access to the array
    'adapter->afu' is wrapped within the context of spin-lock
    'adapter->afu_list_lock'.
    
    Fixes: 9e8df8a21963 ("cxl: EEH support")
    Cc: stable@vger.kernel.org # v4.3+
    Acked-by: Andrew Donnellan <andrew.donnellan@au1.ibm.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Acked-by: Christophe Lombard <clombard@linux.vnet.ibm.com>
    Signed-off-by: Vaibhav Jain <vaibhav@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54674984d4780a8d7f2a938e69918b09e02fa79f
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Tue Feb 26 08:45:35 2019 -0800

    IB/hfi1: Close race condition on user context disable and close
    
    commit bc5add09764c123f58942a37c8335247e683d234 upstream.
    
    When disabling and removing a receive context, it is possible for an
    asynchronous event (i.e IRQ) to occur.  Because of this, there is a race
    between cleaning up the context, and the context being used by the
    asynchronous event.
    
    cpu 0  (context cleanup)
        rc->ref_count-- (ref_count == 0)
        hfi1_rcd_free()
    cpu 1  (IRQ (with rcd index))
            rcd_get_by_index()
            lock
            ref_count+++     <-- reference count race (WARNING)
            return rcd
            unlock
    cpu 0
        hfi1_free_ctxtdata() <-- incorrect free location
        lock
        remove rcd from array
        unlock
        free rcd
    
    This race will cause the following WARNING trace:
    
    WARNING: CPU: 0 PID: 175027 at include/linux/kref.h:52 hfi1_rcd_get_by_index+0x84/0xa0 [hfi1]
    CPU: 0 PID: 175027 Comm: IMB-MPI1 Kdump: loaded Tainted: G OE ------------ 3.10.0-957.el7.x86_64 #1
    Hardware name: Intel Corporation S2600KP/S2600KP, BIOS SE5C610.86B.11.01.0076.C4.111920150602 11/19/2015
    Call Trace:
      dump_stack+0x19/0x1b
      __warn+0xd8/0x100
      warn_slowpath_null+0x1d/0x20
      hfi1_rcd_get_by_index+0x84/0xa0 [hfi1]
      is_rcv_urgent_int+0x24/0x90 [hfi1]
      general_interrupt+0x1b6/0x210 [hfi1]
      __handle_irq_event_percpu+0x44/0x1c0
      handle_irq_event_percpu+0x32/0x80
      handle_irq_event+0x3c/0x60
      handle_edge_irq+0x7f/0x150
      handle_irq+0xe4/0x1a0
      do_IRQ+0x4d/0xf0
      common_interrupt+0x162/0x162
    
    The race can also lead to a use after free which could be similar to:
    
    general protection fault: 0000 1 SMP
    CPU: 71 PID: 177147 Comm: IMB-MPI1 Kdump: loaded Tainted: G W OE ------------ 3.10.0-957.el7.x86_64 #1
    Hardware name: Intel Corporation S2600KP/S2600KP, BIOS SE5C610.86B.11.01.0076.C4.111920150602 11/19/2015
    task: ffff9962a8098000 ti: ffff99717a508000 task.ti: ffff99717a508000 __kmalloc+0x94/0x230
    Call Trace:
      ? hfi1_user_sdma_process_request+0x9c8/0x1250 [hfi1]
      hfi1_user_sdma_process_request+0x9c8/0x1250 [hfi1]
      hfi1_aio_write+0xba/0x110 [hfi1]
      do_sync_readv_writev+0x7b/0xd0
      do_readv_writev+0xce/0x260
      ? handle_mm_fault+0x39d/0x9b0
      ? pick_next_task_fair+0x5f/0x1b0
      ? sched_clock_cpu+0x85/0xc0
      ? __schedule+0x13a/0x890
      vfs_writev+0x35/0x60
      SyS_writev+0x7f/0x110
      system_call_fastpath+0x22/0x27
    
    Use the appropriate kref API to verify access.
    
    Reorder context cleanup to ensure context removal before cleanup occurs
    correctly.
    
    Cc: stable@vger.kernel.org # v4.14.0+
    Fixes: f683c80ca68e ("IB/hfi1: Resolve kernel panics by reference counting receive contexts")
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09bc2f5a16a91f241a2e842900996796bee240b8
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Wed Feb 27 17:52:19 2019 +0100

    PCI: dwc: skip MSI init if MSIs have been explicitly disabled
    
    commit 3afc8299f39a27b60e1519a28e18878ce878e7dd upstream.
    
    Since 7c5925afbc58 (PCI: dwc: Move MSI IRQs allocation to IRQ domains
    hierarchical API) the MSI init claims one of the controller IRQs as a
    chained IRQ line for the MSI controller. On some designs, like the i.MX6,
    this line is shared with a PCIe legacy IRQ. When the line is claimed for
    the MSI domain, any device trying to use this legacy IRQs will fail to
    request this IRQ line.
    
    As MSI and legacy IRQs are already mutually exclusive on the DWC core,
    as the core won't forward any legacy IRQs once any MSI has been enabled,
    users wishing to use legacy IRQs already need to explictly disable MSI
    support (usually via the pci=nomsi kernel commandline option). To avoid
    any issues with MSI conflicting with legacy IRQs, just skip all of the
    DWC MSI initalization, including the IRQ line claim, when MSI is disabled.
    
    Fixes: 7c5925afbc58 ("PCI: dwc: Move MSI IRQs allocation to IRQ domains hierarchical API")
    Tested-by: Tim Harvey <tharvey@gateworks.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Gustavo Pimentel <gustavo.pimentel@synopsys.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13a9d14fbf1b9b562cc08b3e8f966e145ed1b6bf
Author: Dongdong Liu <liudongdong3@huawei.com>
Date:   Mon Feb 11 15:02:59 2019 +0800

    PCI/DPC: Fix print AER status in DPC event handling
    
    commit 9f08a5d896ce43380314c34ed3f264c8e6075b80 upstream.
    
    Previously dpc_handler() called aer_get_device_error_info() without
    initializing info->severity, so aer_get_device_error_info() relied on
    uninitialized data.
    
    Add dpc_get_aer_uncorrect_severity() to read the port's AER status, mask,
    and severity registers and set info->severity.
    
    Also, clear the port's AER fatal error status bits.
    
    Fixes: 8aefa9b0d910 ("PCI/DPC: Print AER status in DPC event handling")
    Signed-off-by: Dongdong Liu <liudongdong3@huawei.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Keith Busch <keith.busch@intel.com>
    Cc: stable@vger.kernel.org      # v4.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c733cf4abfba34e54e83bcb4ac4733203647e339
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Fri Jan 4 17:59:07 2019 -0600

    PCI/ASPM: Use LTR if already enabled by platform
    
    commit 10ecc818ea7319b5d0d2b4e1aa6a77323e776f76 upstream.
    
    RussianNeuroMancer reported that the Intel 7265 wifi on a Dell Venue 11 Pro
    7140 table stopped working after wakeup from suspend and bisected the
    problem to 9ab105deb60f ("PCI/ASPM: Disable ASPM L1.2 Substate if we don't
    have LTR").  David Ward reported the same problem on a Dell Latitude 7350.
    
    After af8bb9f89838 ("PCI/ACPI: Request LTR control from platform before
    using it"), we don't enable LTR unless the platform has granted LTR control
    to us.  In addition, we don't notice if the platform had already enabled
    LTR itself.
    
    After 9ab105deb60f ("PCI/ASPM: Disable ASPM L1.2 Substate if we don't have
    LTR"), we avoid using LTR if we don't think the path to the device has LTR
    enabled.
    
    The combination means that if the platform itself enables LTR but declines
    to give the OS control over LTR, we unnecessarily avoided using ASPM L1.2.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=201469
    Fixes: 9ab105deb60f ("PCI/ASPM: Disable ASPM L1.2 Substate if we don't have LTR")
    Fixes: af8bb9f89838 ("PCI/ACPI: Request LTR control from platform before using it")
    Reported-by: RussianNeuroMancer <russianneuromancer@ya.ru>
    Reported-by: David Ward <david.ward@ll.mit.edu>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org      # v4.18+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a4fdc649ca9ac3b7b4fd363ec713d6d8ef38046
Author: Jan Kara <jack@suse.cz>
Date:   Mon Feb 11 13:30:32 2019 -0500

    ext4: fix crash during online resizing
    
    commit f96c3ac8dfc24b4e38fc4c2eba5fea2107b929d1 upstream.
    
    When computing maximum size of filesystem possible with given number of
    group descriptor blocks, we forget to include s_first_data_block into
    the number of blocks. Thus for filesystems with non-zero
    s_first_data_block it can happen that computed maximum filesystem size
    is actually lower than current filesystem size which confuses the code
    and eventually leads to a BUG_ON in ext4_alloc_group_tables() hitting on
    flex_gd->count == 0. The problem can be reproduced like:
    
    truncate -s 100g /tmp/image
    mkfs.ext4 -b 1024 -E resize=262144 /tmp/image 32768
    mount -t ext4 -o loop /tmp/image /mnt
    resize2fs /dev/loop0 262145
    resize2fs /dev/loop0 300000
    
    Fix the problem by properly including s_first_data_block into the
    computed number of filesystem blocks.
    
    Fixes: 1c6bd7173d66 "ext4: convert file system to meta_bg if needed..."
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0d876c77705c1dd2df2d89e040bf570755cd676
Author: yangerkun <yangerkun@huawei.com>
Date:   Mon Feb 11 00:35:06 2019 -0500

    ext4: add mask of ext4 flags to swap
    
    commit abdc644e8cbac2e9b19763680e5a7cf9bab2bee7 upstream.
    
    The reason is that while swapping two inode, we swap the flags too.
    Some flags such as EXT4_JOURNAL_DATA_FL can really confuse the things
    since we're not resetting the address operations structure.  The
    simplest way to keep things sane is to restrict the flags that can be
    swapped.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 048bfb5bc05f7be392f025cdcd655878e88a4eaf
Author: yangerkun <yangerkun@huawei.com>
Date:   Mon Feb 11 00:14:02 2019 -0500

    ext4: update quota information while swapping boot loader inode
    
    commit aa507b5faf38784defe49f5e64605ac3c4425e26 upstream.
    
    While do swap between two inode, they swap i_data without update
    quota information. Also, swap_inode_boot_loader can do "revert"
    somtimes, so update the quota while all operations has been finished.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 071f68163cc0e98d543685a188dc2d909b6bb464
Author: yangerkun <yangerkun@huawei.com>
Date:   Mon Feb 11 00:05:24 2019 -0500

    ext4: cleanup pagecache before swap i_data
    
    commit a46c68a318b08f819047843abf349aeee5d10ac2 upstream.
    
    While do swap, we should make sure there has no new dirty page since we
    should swap i_data between two inode:
    1.We should lock i_mmap_sem with write to avoid new pagecache from mmap
    read/write;
    2.Change filemap_flush to filemap_write_and_wait and move them to the
    space protected by inode lock to avoid new pagecache from buffer read/write.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdf9941b770748eb007bbe98df618b0c705b7745
Author: yangerkun <yangerkun@huawei.com>
Date:   Mon Feb 11 00:02:05 2019 -0500

    ext4: fix check of inode in swap_inode_boot_loader
    
    commit 67a11611e1a5211f6569044fbf8150875764d1d0 upstream.
    
    Before really do swap between inode and boot inode, something need to
    check to avoid invalid or not permitted operation, like does this inode
    has inline data. But the condition check should be protected by inode
    lock to avoid change while swapping. Also some other condition will not
    change between swapping, but there has no problem to do this under inode
    lock.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae228aca576d529415da66c7e1209d631f68dee7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Mar 7 11:22:41 2019 +0100

    cpufreq: pxa2xx: remove incorrect __init annotation
    
    commit 9505b98ccddc454008ca7efff90044e3e857c827 upstream.
    
    pxa_cpufreq_init_voltages() is marked __init but usually inlined into
    the non-__init pxa_cpufreq_init() function. When building with clang,
    it can stay as a standalone function in a discarded section, and produce
    this warning:
    
    WARNING: vmlinux.o(.text+0x616a00): Section mismatch in reference from the function pxa_cpufreq_init() to the function .init.text:pxa_cpufreq_init_voltages()
    The function pxa_cpufreq_init() references
    the function __init pxa_cpufreq_init_voltages().
    This is often because pxa_cpufreq_init lacks a __init
    annotation or the annotation of pxa_cpufreq_init_voltages is wrong.
    
    Fixes: 50e77fcd790e ("ARM: pxa: remove __init from cpufreq_driver->init()")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f65b34d0f979a95e88d969b402b10951956248bb
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Mon Feb 4 02:48:54 2019 -0500

    cpufreq: tegra124: add missing of_node_put()
    
    commit 446fae2bb5395f3028d8e3aae1508737e5a72ea1 upstream.
    
    of_cpu_device_node_get() will increase the refcount of device_node,
    it is necessary to call of_node_put() at the end to release the
    refcount.
    
    Fixes: 9eb15dbbfa1a2 ("cpufreq: Add cpufreq driver for Tegra124")
    Cc: <stable@vger.kernel.org> # 4.4+
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33565a76a7b23ad7b28709bfa8841debb421de61
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Feb 20 16:41:18 2019 +0530

    cpufreq: kryo: Release OPP tables on module removal
    
    commit 0334906c06967142c8805fbe88acf787f65d3d26 upstream.
    
    Commit 5ad7346b4ae2 ("cpufreq: kryo: Add module remove and exit") made
    it possible to build the kryo cpufreq driver as a module, but it failed
    to release all the resources, i.e. OPP tables, when the module is
    unloaded.
    
    This patch fixes it by releasing the OPP tables, by calling
    dev_pm_opp_put_supported_hw() for them, from the
    qcom_cpufreq_kryo_remove() routine. The array of pointers to the OPP
    tables is also allocated dynamically now in qcom_cpufreq_kryo_probe(),
    as the pointers will be required while releasing the resources.
    
    Compile tested only.
    
    Cc: 4.18+ <stable@vger.kernel.org> # v4.18+
    Fixes: 5ad7346b4ae2 ("cpufreq: kryo: Add module remove and exit")
    Reviewed-by: Georgi Djakov <georgi.djakov@linaro.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee7d297fba245621060952d3575dbc7303d0873a
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Feb 13 01:11:19 2019 +0900

    x86/kprobes: Prohibit probing on optprobe template code
    
    commit 0192e6535ebe9af68614198ced4fd6d37b778ebf upstream.
    
    Prohibit probing on optprobe template code, since it is not
    a code but a template instruction sequence. If we modify
    this template, copied template must be broken.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrea Righi <righi.andrea@gmail.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Fixes: 9326638cbee2 ("kprobes, x86: Use NOKPROBE_SYMBOL() instead of __kprobes annotation")
    Link: http://lkml.kernel.org/r/154998787911.31052.15274376330136234452.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a477075ebab3bde73a6f65944882bd9cd2fc82f8
Author: Doug Berger <opendmb@gmail.com>
Date:   Wed Feb 20 14:15:28 2019 -0800

    irqchip/brcmstb-l2: Use _irqsave locking variants in non-interrupt code
    
    commit 33517881ede742107f416533b8c3e4abc56763da upstream.
    
    Using the irq_gc_lock/irq_gc_unlock functions in the suspend and
    resume functions creates the opportunity for a deadlock during
    suspend, resume, and shutdown. Using the irq_gc_lock_irqsave/
    irq_gc_unlock_irqrestore variants prevents this possible deadlock.
    
    Cc: stable@vger.kernel.org
    Fixes: 7f646e92766e2 ("irqchip: brcmstb-l2: Add Broadcom Set Top Box Level-2 interrupt controller")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    [maz: tidied up $SUBJECT]
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8666ede18ec96cff451e021761e321c32a1cc14
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Sun Feb 10 05:24:10 2019 +0000

    irqchip/gic-v3-its: Avoid parsing _indirect_ twice for Device table
    
    commit 8d565748b6035eeda18895c213396a4c9fac6a4c upstream.
    
    In current logic, its_parse_indirect_baser() will be invoked twice
    when allocating Device tables. Add a *break* to omit the unnecessary
    and annoying (might be ...) invoking.
    
    Fixes: 32bd44dc19de ("irqchip/gic-v3-its: Fix the incorrect parsing of VCPU table size")
    Cc: stable@vger.kernel.org
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b92fad6995c31e5a5a923dd602c7c26f0199057b
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Feb 10 20:47:49 2019 +0100

    libertas_tf: don't set URB_ZERO_PACKET on IN USB transfer
    
    commit 607076a904c435f2677fadaadd4af546279db68b upstream.
    
    It doesn't make sense and the USB core warns on each submit of such
    URB, easily flooding the message buffer with tracebacks.
    
    Analogous issue was fixed in regular libertas driver in commit 6528d8804780
    ("libertas: don't set URB_ZERO_PACKET on IN USB transfer").
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Reviewed-by: Steve deRosier <derosier@cal-sierra.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02c55be588b10afc0c91ff50930717ec08c31c84
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Tue Jan 15 14:54:47 2019 -0800

    soc: qcom: rpmh: Avoid accessing freed memory from batch API
    
    commit baef1c90aac7e5bf13f0360a3b334825a23d31a1 upstream.
    
    Using the batch API from the interconnect driver sometimes leads to a
    KASAN error due to an access to freed memory. This is easier to trigger
    with threadirqs on the kernel commandline.
    
     BUG: KASAN: use-after-free in rpmh_tx_done+0x114/0x12c
     Read of size 1 at addr fffffff51414ad84 by task irq/110-apps_rs/57
    
     CPU: 0 PID: 57 Comm: irq/110-apps_rs Tainted: G        W         4.19.10 #72
     Call trace:
      dump_backtrace+0x0/0x2f8
      show_stack+0x20/0x2c
      __dump_stack+0x20/0x28
      dump_stack+0xcc/0x10c
      print_address_description+0x74/0x240
      kasan_report+0x250/0x26c
      __asan_report_load1_noabort+0x20/0x2c
      rpmh_tx_done+0x114/0x12c
      tcs_tx_done+0x450/0x768
      irq_forced_thread_fn+0x58/0x9c
      irq_thread+0x120/0x1dc
      kthread+0x248/0x260
      ret_from_fork+0x10/0x18
    
     Allocated by task 385:
      kasan_kmalloc+0xac/0x148
      __kmalloc+0x170/0x1e4
      rpmh_write_batch+0x174/0x540
      qcom_icc_set+0x8dc/0x9ac
      icc_set+0x288/0x2e8
      a6xx_gmu_stop+0x320/0x3c0
      a6xx_pm_suspend+0x108/0x124
      adreno_suspend+0x50/0x60
      pm_generic_runtime_suspend+0x60/0x78
      __rpm_callback+0x214/0x32c
      rpm_callback+0x54/0x184
      rpm_suspend+0x3f8/0xa90
      pm_runtime_work+0xb4/0x178
      process_one_work+0x544/0xbc0
      worker_thread+0x514/0x7d0
      kthread+0x248/0x260
      ret_from_fork+0x10/0x18
    
     Freed by task 385:
      __kasan_slab_free+0x12c/0x1e0
      kasan_slab_free+0x10/0x1c
      kfree+0x134/0x588
      rpmh_write_batch+0x49c/0x540
      qcom_icc_set+0x8dc/0x9ac
      icc_set+0x288/0x2e8
      a6xx_gmu_stop+0x320/0x3c0
      a6xx_pm_suspend+0x108/0x124
      adreno_suspend+0x50/0x60
     cr50_spi spi5.0: SPI transfer timed out
      pm_generic_runtime_suspend+0x60/0x78
      __rpm_callback+0x214/0x32c
      rpm_callback+0x54/0x184
      rpm_suspend+0x3f8/0xa90
      pm_runtime_work+0xb4/0x178
      process_one_work+0x544/0xbc0
      worker_thread+0x514/0x7d0
      kthread+0x248/0x260
      ret_from_fork+0x10/0x18
    
     The buggy address belongs to the object at fffffff51414ac80
      which belongs to the cache kmalloc-512 of size 512
     The buggy address is located 260 bytes inside of
      512-byte region [fffffff51414ac80, fffffff51414ae80)
     The buggy address belongs to the page:
     page:ffffffbfd4505200 count:1 mapcount:0 mapping:fffffff51e00c680 index:0x0 compound_mapcount: 0
     flags: 0x4000000000008100(slab|head)
     raw: 4000000000008100 ffffffbfd4529008 ffffffbfd44f9208 fffffff51e00c680
     raw: 0000000000000000 0000000000200020 00000001ffffffff 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      fffffff51414ac80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      fffffff51414ad00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     >fffffff51414ad80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                        ^
      fffffff51414ae00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      fffffff51414ae80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    The batch API sets the same completion for each rpmh message that's sent
    and then loops through all the messages and waits for that single
    completion declared on the stack to be completed before returning from
    the function and freeing the message structures. Unfortunately, some
    messages may still be in process and 'stuck' in the TCS. At some later
    point, the tcs_tx_done() interrupt will run and try to process messages
    that have already been freed at the end of rpmh_write_batch(). This will
    in turn access the 'needs_free' member of the rpmh_request structure and
    cause KASAN to complain. Furthermore, if there's a message that's
    completed in rpmh_tx_done() and freed immediately after the complete()
    call is made we'll be racing with potentially freed memory when
    accessing the 'needs_free' member:
    
            CPU0                         CPU1
            ----                         ----
            rpmh_tx_done()
             complete(&compl)
                                         wait_for_completion(&compl)
                                         kfree(rpm_msg)
             if (rpm_msg->needs_free)
             <KASAN warning splat>
    
    Let's fix this by allocating a chunk of completions for each message and
    waiting for all of them to be completed before returning from the batch
    API. Alternatively, we could wait for the last message in the batch, but
    that may be a more complicated change because it looks like
    tcs_tx_done() just iterates through the indices of the queue and
    completes each message instead of tracking the last inserted message and
    completing that first.
    
    Fixes: c8790cb6da58 ("drivers: qcom: rpmh: add support for batch RPMH request")
    Cc: Lina Iyer <ilina@codeaurora.org>
    Cc: "Raju P.L.S.S.S.N" <rplsssn@codeaurora.org>
    Cc: Matthias Kaehlcke <mka@chromium.org>
    Cc: Evan Green <evgreen@chromium.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Lina Iyer <ilina@codeaurora.org>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 898488e2988c83555309743d7ce6ffe1f135c6a8
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Feb 14 15:17:20 2019 +0000

    Btrfs: fix corruption reading shared and compressed extents after hole punching
    
    commit 8e928218780e2f1cf2f5891c7575e8f0b284fcce upstream.
    
    In the past we had data corruption when reading compressed extents that
    are shared within the same file and they are consecutive, this got fixed
    by commit 005efedf2c7d0 ("Btrfs: fix read corruption of compressed and
    shared extents") and by commit 808f80b46790f ("Btrfs: update fix for read
    corruption of compressed and shared extents"). However there was a case
    that was missing in those fixes, which is when the shared and compressed
    extents are referenced with a non-zero offset. The following shell script
    creates a reproducer for this issue:
    
      #!/bin/bash
    
      mkfs.btrfs -f /dev/sdc &> /dev/null
      mount -o compress /dev/sdc /mnt/sdc
    
      # Create a file with 3 consecutive compressed extents, each has an
      # uncompressed size of 128Kb and a compressed size of 4Kb.
      for ((i = 1; i <= 3; i++)); do
          head -c 4096 /dev/zero
          for ((j = 1; j <= 31; j++)); do
              head -c 4096 /dev/zero | tr '\0' "\377"
          done
      done > /mnt/sdc/foobar
      sync
    
      echo "Digest after file creation:   $(md5sum /mnt/sdc/foobar)"
    
      # Clone the first extent into offsets 128K and 256K.
      xfs_io -c "reflink /mnt/sdc/foobar 0 128K 128K" /mnt/sdc/foobar
      xfs_io -c "reflink /mnt/sdc/foobar 0 256K 128K" /mnt/sdc/foobar
      sync
    
      echo "Digest after cloning:         $(md5sum /mnt/sdc/foobar)"
    
      # Punch holes into the regions that are already full of zeroes.
      xfs_io -c "fpunch 0 4K" /mnt/sdc/foobar
      xfs_io -c "fpunch 128K 4K" /mnt/sdc/foobar
      xfs_io -c "fpunch 256K 4K" /mnt/sdc/foobar
      sync
    
      echo "Digest after hole punching:   $(md5sum /mnt/sdc/foobar)"
    
      echo "Dropping page cache..."
      sysctl -q vm.drop_caches=1
      echo "Digest after hole punching:   $(md5sum /mnt/sdc/foobar)"
    
      umount /dev/sdc
    
    When running the script we get the following output:
    
      Digest after file creation:   5a0888d80d7ab1fd31c229f83a3bbcc8  /mnt/sdc/foobar
      linked 131072/131072 bytes at offset 131072
      128 KiB, 1 ops; 0.0033 sec (36.960 MiB/sec and 295.6830 ops/sec)
      linked 131072/131072 bytes at offset 262144
      128 KiB, 1 ops; 0.0015 sec (78.567 MiB/sec and 628.5355 ops/sec)
      Digest after cloning:         5a0888d80d7ab1fd31c229f83a3bbcc8  /mnt/sdc/foobar
      Digest after hole punching:   5a0888d80d7ab1fd31c229f83a3bbcc8  /mnt/sdc/foobar
      Dropping page cache...
      Digest after hole punching:   fba694ae8664ed0c2e9ff8937e7f1484  /mnt/sdc/foobar
    
    This happens because after reading all the pages of the extent in the
    range from 128K to 256K for example, we read the hole at offset 256K
    and then when reading the page at offset 260K we don't submit the
    existing bio, which is responsible for filling all the page in the
    range 128K to 256K only, therefore adding the pages from range 260K
    to 384K to the existing bio and submitting it after iterating over the
    entire range. Once the bio completes, the uncompressed data fills only
    the pages in the range 128K to 256K because there's no more data read
    from disk, leaving the pages in the range 260K to 384K unfilled. It is
    just a slightly different variant of what was solved by commit
    005efedf2c7d0 ("Btrfs: fix read corruption of compressed and shared
    extents").
    
    Fix this by forcing a bio submit, during readpages(), whenever we find a
    compressed extent map for a page that is different from the extent map
    for the previous page or has a different starting offset (in case it's
    the same compressed extent), instead of the extent map's original start
    offset.
    
    A test case for fstests follows soon.
    
    Reported-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Fixes: 808f80b46790f ("Btrfs: update fix for read corruption of compressed and shared extents")
    Fixes: 005efedf2c7d0 ("Btrfs: fix read corruption of compressed and shared extents")
    Cc: stable@vger.kernel.org # 4.3+
    Tested-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a00f7fd0fbf87faca8737e45193bada759744cb
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Mon Feb 18 11:28:37 2019 +0100

    btrfs: ensure that a DUP or RAID1 block group has exactly two stripes
    
    commit 349ae63f40638a28c6fce52e8447c2d14b84cc0c upstream.
    
    We recently had a customer issue with a corrupted filesystem. When
    trying to mount this image btrfs panicked with a division by zero in
    calc_stripe_length().
    
    The corrupt chunk had a 'num_stripes' value of 1. calc_stripe_length()
    takes this value and divides it by the number of copies the RAID profile
    is expected to have to calculate the amount of data stripes. As a DUP
    profile is expected to have 2 copies this division resulted in 1/2 = 0.
    Later then the 'data_stripes' variable is used as a divisor in the
    stripe length calculation which results in a division by 0 and thus a
    kernel panic.
    
    When encountering a filesystem with a DUP block group and a
    'num_stripes' value unequal to 2, refuse mounting as the image is
    corrupted and will lead to unexpected behaviour.
    
    Code inspection showed a RAID1 block group has the same issues.
    
    Fixes: e06cd3dd7cea ("Btrfs: add validadtion checks for chunk loading")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e24f5a1ebb199c8dcd84f7b91fe8ba120ecfe32
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Dec 13 21:16:56 2018 +0000

    Btrfs: setup a nofs context for memory allocation at __btrfs_set_acl
    
    commit a0873490660246db587849a9e172f2b7b21fa88a upstream.
    
    We are holding a transaction handle when setting an acl, therefore we can
    not allocate the xattr value buffer using GFP_KERNEL, as we could deadlock
    if reclaim is triggered by the allocation, therefore setup a nofs context.
    
    Fixes: 39a27ec1004e8 ("btrfs: use GFP_KERNEL for xattr and acl allocations")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61f9209676e854973a8b7aaed93de16f727c4a32
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Dec 13 21:16:45 2018 +0000

    Btrfs: setup a nofs context for memory allocation at btrfs_create_tree()
    
    commit b89f6d1fcb30a8cbdc18ce00c7d93792076af453 upstream.
    
    We are holding a transaction handle when creating a tree, therefore we can
    not allocate the root using GFP_KERNEL, as we could deadlock if reclaim is
    triggered by the allocation, therefore setup a nofs context.
    
    Fixes: 74e4d82757f74 ("btrfs: let callers of btrfs_alloc_root pass gfp flags")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcbf12e23d99fc4b2edc3b4764d8709fe11dedd5
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed Jan 16 16:23:24 2019 +1100

    m68k: Add -ffreestanding to CFLAGS
    
    commit 28713169d879b67be2ef2f84dcf54905de238294 upstream.
    
    This patch fixes a build failure when using GCC 8.1:
    
    /usr/bin/ld: block/partitions/ldm.o: in function `ldm_parse_tocblock':
    block/partitions/ldm.c:153: undefined reference to `strcmp'
    
    This is caused by a new optimization which effectively replaces a
    strncmp() call with a strcmp() call. This affects a number of strncmp()
    call sites in the kernel.
    
    The entire class of optimizations is avoided with -fno-builtin, which
    gets enabled by -ffreestanding. This may avoid possible future build
    failures in case new optimizations appear in future compilers.
    
    I haven't done any performance measurements with this patch but I did
    count the function calls in a defconfig build. For example, there are now
    23 more sprintf() calls and 39 fewer strcpy() calls. The effect on the
    other libc functions is smaller.
    
    If this harms performance we can tackle that regression by optimizing
    the call sites, ideally using semantic patches. That way, clang and ICC
    builds might benfit too.
    
    Cc: stable@vger.kernel.org
    Reference: https://marc.info/?l=linux-m68k&m=154514816222244&w=2
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 205f149f1a358fc2a054461dd1432e52263cbc1e
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Wed Jan 30 14:01:57 2019 -0500

    ovl: Do not lose security.capability xattr over metadata file copy-up
    
    commit 993a0b2aec52754f0897b1dab4c453be8217cae5 upstream.
    
    If a file has been copied up metadata only, and later data is copied up,
    upper loses any security.capability xattr it has (underlying filesystem
    clears it as upon file write).
    
    From a user's point of view, this is just a file copy-up and that should
    not result in losing security.capability xattr.  Hence, before data copy
    up, save security.capability xattr (if any) and restore it on upper after
    data copy up is complete.
    
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Fixes: 0c2888749363 ("ovl: A new xattr OVL_XATTR_METACOPY for file on upper")
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f048ae2d25f94490c15320ccc6ed8b6587f1258
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Fri Jan 11 19:37:00 2019 +0100

    ovl: During copy up, first copy up data and then xattrs
    
    commit 5f32879ea35523b9842bdbdc0065e13635caada2 upstream.
    
    If a file with capability set (and hence security.capability xattr) is
    written kernel clears security.capability xattr. For overlay, during file
    copy up if xattrs are copied up first and then data is, copied up. This
    means data copy up will result in clearing of security.capability xattr
    file on lower has. And this can result into surprises. If a lower file has
    CAP_SETUID, then it should not be cleared over copy up (if nothing was
    actually written to file).
    
    This also creates problems with chown logic where it first copies up file
    and then tries to clear setuid bit. But by that time security.capability
    xattr is already gone (due to data copy up), and caller gets -ENODATA.
    This has been reported by Giuseppe here.
    
    https://github.com/containers/libpod/issues/2015#issuecomment-447824842
    
    Fix this by copying up data first and then metadta. This is a regression
    which has been introduced by my commit as part of metadata only copy up
    patches.
    
    TODO: There will be some corner cases where a file is copied up metadata
    only and later data copy up happens and that will clear security.capability
    xattr. Something needs to be done about that too.
    
    Fixes: bd64e57586d3 ("ovl: During copy up, first copy up metadata and then data")
    Cc: <stable@vger.kernel.org> # v4.19+
    Reported-by: Giuseppe Scrivano <gscrivan@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2af926fd52fc287a92fc782ce074f349d86966aa
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55 upstream.
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c2123ff43122bb9e0578198391ee3cf752049d6
Author: Varad Gautam <vrd@amazon.de>
Date:   Thu Jan 24 14:03:06 2019 +0100

    fs/devpts: always delete dcache dentry-s in dput()
    
    commit 73052b0daee0b750b39af18460dfec683e4f5887 upstream.
    
    d_delete only unhashes an entry if it is reached with
    dentry->d_lockref.count != 1. Prior to commit 8ead9dd54716 ("devpts:
    more pty driver interface cleanups"), d_delete was called on a dentry
    from devpts_pty_kill with two references held, which would trigger the
    unhashing, and the subsequent dputs would release it.
    
    Commit 8ead9dd54716 reworked devpts_pty_kill to stop acquiring the second
    reference from d_find_alias, and the d_delete call left the dentries
    still on the hashed list without actually ever being dropped from dcache
    before explicit cleanup. This causes the number of negative dentries for
    devpts to pile up, and an `ls /dev/pts` invocation can take seconds to
    return.
    
    Provide always_delete_dentry() from simple_dentry_operations
    as .d_delete for devpts, to make the dentry be dropped from dcache.
    
    Without this cleanup, the number of dentries in /dev/pts/ can be grown
    arbitrarily as:
    
    `python -c 'import pty; pty.spawn(["ls", "/dev/pts"])'`
    
    A systemtap probe on dcache_readdir to count d_subdirs shows this count
    to increase with each pty spawn invocation above:
    
    probe kernel.function("dcache_readdir") {
        subdirs = &@cast($file->f_path->dentry, "dentry")->d_subdirs;
        p = subdirs;
        p = @cast(p, "list_head")->next;
        i = 0
        while (p != subdirs) {
          p = @cast(p, "list_head")->next;
          i = i+1;
        }
        printf("number of dentries: %d\n", i);
    }
    
    Fixes: 8ead9dd54716 ("devpts: more pty driver interface cleanups")
    Signed-off-by: Varad Gautam <vrd@amazon.de>
    Reported-by: Zheng Wang <wanz@amazon.de>
    Reported-by: Brandon Schwartz <bsschwar@amazon.de>
    Root-caused-by: Maximilian Heyne <mheyne@amazon.de>
    Root-caused-by: Nicolas Pernas Maradei <npernas@amazon.de>
    CC: David Woodhouse <dwmw@amazon.co.uk>
    CC: Maximilian Heyne <mheyne@amazon.de>
    CC: Stefan Nuernberger <snu@amazon.de>
    CC: Amit Shah <aams@amazon.de>
    CC: Linus Torvalds <torvalds@linux-foundation.org>
    CC: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    CC: Al Viro <viro@ZenIV.linux.org.uk>
    CC: Christian Brauner <christian.brauner@ubuntu.com>
    CC: Eric W. Biederman <ebiederm@xmission.com>
    CC: Matthew Wilcox <willy@infradead.org>
    CC: Eric Biggers <ebiggers@google.com>
    CC: <stable@vger.kernel.org> # 4.9+
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8ae662b400f6a4e2ff0467386fe8e12e615fa60
Author: Himanshu Madhani <hmadhani@marvell.com>
Date:   Fri Feb 15 14:37:12 2019 -0800

    scsi: qla2xxx: Fix LUN discovery if loop id is not assigned yet by firmware
    
    commit ec322937a7f152d68755dc8316523bf6f831b48f upstream.
    
    This patch fixes LUN discovery when loop ID is not yet assigned by the
    firmware during driver load/sg_reset operations. Driver will now search for
    new loop id before retrying login.
    
    Fixes: 48acad099074 ("scsi: qla2xxx: Fix N2N link re-connect")
    Cc: stable@vger.kernel.org #4.19
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4a9fd5652d5f28cba7ad6bff6f94fefb78f404e
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Jan 25 10:34:56 2019 -0800

    scsi: target/iscsi: Avoid iscsit_release_commands_from_conn() deadlock
    
    commit 32e36bfbcf31452a854263e7c7f32fbefc4b44d8 upstream.
    
    When using SCSI passthrough in combination with the iSCSI target driver
    then cmd->t_state_lock may be obtained from interrupt context. Hence, all
    code that obtains cmd->t_state_lock from thread context must disable
    interrupts first. This patch avoids that lockdep reports the following:
    
    WARNING: inconsistent lock state
    4.18.0-dbg+ #1 Not tainted
    --------------------------------
    inconsistent {HARDIRQ-ON-W} -> {IN-HARDIRQ-W} usage.
    iscsi_ttx/1800 [HC1[1]:SC0[2]:HE0:SE0] takes:
    000000006e7b0ceb (&(&cmd->t_state_lock)->rlock){?...}, at: target_complete_cmd+0x47/0x2c0 [target_core_mod]
    {HARDIRQ-ON-W} state was registered at:
     lock_acquire+0xd2/0x260
     _raw_spin_lock+0x32/0x50
     iscsit_close_connection+0x97e/0x1020 [iscsi_target_mod]
     iscsit_take_action_for_connection_exit+0x108/0x200 [iscsi_target_mod]
     iscsi_target_rx_thread+0x180/0x190 [iscsi_target_mod]
     kthread+0x1cf/0x1f0
     ret_from_fork+0x24/0x30
    irq event stamp: 1281
    hardirqs last  enabled at (1279): [<ffffffff970ade79>] __local_bh_enable_ip+0xa9/0x160
    hardirqs last disabled at (1281): [<ffffffff97a008a5>] interrupt_entry+0xb5/0xd0
    softirqs last  enabled at (1278): [<ffffffff977cd9a1>] lock_sock_nested+0x51/0xc0
    softirqs last disabled at (1280): [<ffffffffc07a6e04>] ip6_finish_output2+0x124/0xe40 [ipv6]
    
    other info that might help us debug this:
    Possible unsafe locking scenario:
    
          CPU0
          ----
     lock(&(&cmd->t_state_lock)->rlock);
     <Interrupt>
       lock(&(&cmd->t_state_lock)->rlock);

commit 852a4ab292bbc878eb137cbc2197b7282c71ba5e
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Tue Feb 12 16:21:05 2019 -0500

    scsi: sd: Optimal I/O size should be a multiple of physical block size
    
    commit a83da8a4509d3ebfe03bb7fffce022e4d5d4764f upstream.
    
    It was reported that some devices report an OPTIMAL TRANSFER LENGTH of
    0xFFFF blocks. That looks bogus, especially for a device with a
    4096-byte physical block size.
    
    Ignore OPTIMAL TRANSFER LENGTH if it is not a multiple of the device's
    reported physical block size.
    
    To make the sanity checking conditionals more readable--and to
    facilitate printing warnings--relocate the checking to a helper
    function. No functional change aside from the printks.
    
    Cc: <stable@vger.kernel.org>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199759
    Reported-by: Christoph Anton Mitterer <calestyo@scientia.net>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6e738e2b5fff96de2af39f15838fd21671aacf3
Author: Sagar Biradar <sagar.biradar@microchip.com>
Date:   Thu Mar 7 23:26:41 2019 -0800

    scsi: aacraid: Fix performance issue on logical drives
    
    commit 0015437cc046e5ec2b57b00ff8312b8d432eac7c upstream.
    
    Fix performance issue where the queue depth for SmartIOC logical volumes is
    set to 1, and allow the usual logical volume code to be executed
    
    Fixes: a052865fe287 (aacraid: Set correct Queue Depth for HBA1000 RAW disks)
    Cc: stable@vger.kernel.org
    Signed-off-by: Sagar Biradar <Sagar.Biradar@microchip.com>
    Reviewed-by: Dave Carroll <david.carroll@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd8a0e65693521bb9592e1516aa3cd66f8ec3fa7
Author: Felipe Franciosi <felipe@nutanix.com>
Date:   Wed Feb 27 16:10:34 2019 +0000

    scsi: virtio_scsi: don't send sc payload with tmfs
    
    commit 3722e6a52174d7c3a00e6f5efd006ca093f346c1 upstream.
    
    The virtio scsi spec defines struct virtio_scsi_ctrl_tmf as a set of
    device-readable records and a single device-writable response entry:
    
        struct virtio_scsi_ctrl_tmf
        {
            // Device-readable part
            le32 type;
            le32 subtype;
            u8 lun[8];
            le64 id;
            // Device-writable part
            u8 response;
        }
    
    The above should be organised as two descriptor entries (or potentially
    more if using VIRTIO_F_ANY_LAYOUT), but without any extra data after "le64
    id" or after "u8 response".
    
    The Linux driver doesn't respect that, with virtscsi_abort() and
    virtscsi_device_reset() setting cmd->sc before calling virtscsi_tmf().  It
    results in the original scsi command payload (or writable buffers) added to
    the tmf.
    
    This fixes the problem by leaving cmd->sc zeroed out, which makes
    virtscsi_kick_cmd() add the tmf to the control vq without any payload.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felipe Franciosi <felipe@nutanix.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1653307cf0e7e1fd1af51390f8ae650d74d77f58
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Mon Jan 21 13:19:43 2019 +0100

    s390/virtio: handle find on invalid queue gracefully
    
    commit 3438b2c039b4bf26881786a1f3450f016d66ad11 upstream.
    
    A queue with a capacity of zero is clearly not a valid virtio queue.
    Some emulators report zero queue size if queried with an invalid queue
    index. Instead of crashing in this case let us just return -ENOENT. To
    make that work properly, let us fix the notifier cleanup logic as well.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b52bdf53130ac5db6bf5cac564466207a0d484bd
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Thu Feb 14 15:40:56 2019 +0100

    s390/setup: fix early warning messages
    
    commit 8727638426b0aea59d7f904ad8ddf483f9234f88 upstream.
    
    The setup_lowcore() function creates a new prefix page for the boot CPU.
    The PSW mask for the system_call, external interrupt, i/o interrupt and
    the program check handler have the DAT bit set in this new prefix page.
    
    At the time setup_lowcore is called the system still runs without virtual
    address translation, the paging_init() function creates the kernel page
    table and loads the CR13 with the kernel ASCE.
    
    Any code between setup_lowcore() and the end of paging_init() that has
    a BUG or WARN statement will create a program check that can not be
    handled correctly as there is no kernel page table yet.
    
    To allow early WARN statements initially setup the lowcore with DAT off
    and set the DAT bit only after paging_init() has completed.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e19ca3fe6cf230a0e5df70da7acade133f2b670c
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Jan 12 20:17:18 2019 -0600

    clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability
    
    commit c950ca8c35eeb32224a63adc47e12f9e226da241 upstream.
    
    The Allwinner A64 SoC is known[1] to have an unstable architectural
    timer, which manifests itself most obviously in the time jumping forward
    a multiple of 95 years[2][3]. This coincides with 2^56 cycles at a
    timer frequency of 24 MHz, implying that the time went slightly backward
    (and this was interpreted by the kernel as it jumping forward and
    wrapping around past the epoch).
    
    Investigation revealed instability in the low bits of CNTVCT at the
    point a high bit rolls over. This leads to power-of-two cycle forward
    and backward jumps. (Testing shows that forward jumps are about twice as
    likely as backward jumps.) Since the counter value returns to normal
    after an indeterminate read, each "jump" really consists of both a
    forward and backward jump from the software perspective.
    
    Unless the kernel is trapping CNTVCT reads, a userspace program is able
    to read the register in a loop faster than it changes. A test program
    running on all 4 CPU cores that reported jumps larger than 100 ms was
    run for 13.6 hours and reported the following:
    
     Count | Event
    -------+---------------------------
      9940 | jumped backward      699ms
       268 | jumped backward     1398ms
         1 | jumped backward     2097ms
     16020 | jumped forward       175ms
      6443 | jumped forward       699ms
      2976 | jumped forward      1398ms
         9 | jumped forward    356516ms
         9 | jumped forward    357215ms
         4 | jumped forward    714430ms
         1 | jumped forward   3578440ms
    
    This works out to a jump larger than 100 ms about every 5.5 seconds on
    each CPU core.
    
    The largest jump (almost an hour!) was the following sequence of reads:
        0x0000007fffffffff → 0x00000093feffffff → 0x0000008000000000
    
    Note that the middle bits don't necessarily all read as all zeroes or
    all ones during the anomalous behavior; however the low 10 bits checked
    by the function in this patch have never been observed with any other
    value.
    
    Also note that smaller jumps are much more common, with backward jumps
    of 2048 (2^11) cycles observed over 400 times per second on each core.
    (Of course, this is partially explained by lower bits rolling over more
    frequently.) Any one of these could have caused the 95 year time skip.
    
    Similar anomalies were observed while reading CNTPCT (after patching the
    kernel to allow reads from userspace). However, the CNTPCT jumps are
    much less frequent, and only small jumps were observed. The same program
    as before (except now reading CNTPCT) observed after 72 hours:
    
     Count | Event
    -------+---------------------------
        17 | jumped backward      699ms
        52 | jumped forward       175ms
      2831 | jumped forward       699ms
         5 | jumped forward      1398ms
    
    Further investigation showed that the instability in CNTPCT/CNTVCT also
    affected the respective timer's TVAL register. The following values were
    observed immediately after writing CNVT_TVAL to 0x10000000:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000000d4a2d8bfff | 0x10003fff | 0x000000d4b2d8bfff | +0x00004000
     0x000000d4a2d94000 | 0x0fffffff | 0x000000d4b2d97fff | -0x00004000
     0x000000d4a2d97fff | 0x10003fff | 0x000000d4b2d97fff | +0x00004000
     0x000000d4a2d9c000 | 0x0fffffff | 0x000000d4b2d9ffff | -0x00004000
    
    The pattern of errors in CNTV_TVAL seemed to depend on exactly which
    value was written to it. For example, after writing 0x10101010:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000001ac3effffff | 0x1110100f | 0x000001ac4f10100f | +0x1000000
     0x000001ac40000000 | 0x1010100f | 0x000001ac5110100f | -0x1000000
     0x000001ac58ffffff | 0x1110100f | 0x000001ac6910100f | +0x1000000
     0x000001ac66000000 | 0x1010100f | 0x000001ac7710100f | -0x1000000
     0x000001ac6affffff | 0x1110100f | 0x000001ac7b10100f | +0x1000000
     0x000001ac6e000000 | 0x1010100f | 0x000001ac7f10100f | -0x1000000
    
    I was also twice able to reproduce the issue covered by Allwinner's
    workaround[4], that writing to TVAL sometimes fails, and both CVAL and
    TVAL are left with entirely bogus values. One was the following values:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL
    --------------------+------------+--------------------------------------
     0x000000d4a2d6014c | 0x8fbd5721 | 0x000000d132935fff (615s in the past)
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    
    ========================================================================
    
    Because the CPU can read the CNTPCT/CNTVCT registers faster than they
    change, performing two reads of the register and comparing the high bits
    (like other workarounds) is not a workable solution. And because the
    timer can jump both forward and backward, no pair of reads can
    distinguish a good value from a bad one. The only way to guarantee a
    good value from consecutive reads would be to read _three_ times, and
    take the middle value only if the three values are 1) each unique and
    2) increasing. This takes at minimum 3 counter cycles (125 ns), or more
    if an anomaly is detected.
    
    However, since there is a distinct pattern to the bad values, we can
    optimize the common case (1022/1024 of the time) to a single read by
    simply ignoring values that match the error pattern. This still takes no
    more than 3 cycles in the worst case, and requires much less code. As an
    additional safety check, we still limit the loop iteration to the number
    of max-frequency (1.2 GHz) CPU cycles in three 24 MHz counter periods.
    
    For the TVAL registers, the simple solution is to not use them. Instead,
    read or write the CVAL and calculate the TVAL value in software.
    
    Although the manufacturer is aware of at least part of the erratum[4],
    there is no official name for it. For now, use the kernel-internal name
    "UNKNOWN1".
    
    [1]: https://github.com/armbian/build/commit/a08cd6fe7ae9
    [2]: https://forum.armbian.com/topic/3458-a64-datetime-clock-issue/
    [3]: https://irclog.whitequark.org/linux-sunxi/2018-01-26
    [4]: https://github.com/Allwinner-Homlet/H6-BSP4.9-linux/blob/master/drivers/clocksource/arm_arch_timer.c#L272
    
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Tested-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef8062e20614c121495ccd568e1480ecf5cf5e73
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c upstream.
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1f45c10df2ef8d0cd5e301bd73299a94ecb417f
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    commit a5719a40aef956ba704f2aa1c7b977224d60fa96 upstream.
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06607b1b6cc9eb5a6138e21099feff026cfc23e5
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Tue Feb 12 21:51:18 2019 +0000

    regulator: s2mpa01: Fix step values for some LDOs
    
    commit 28c4f730d2a44f2591cb104091da29a38dac49fe upstream.
    
    The step values for some of the LDOs appears to be incorrect, resulting
    in incorrect voltages (or at least, ones which are different from the
    Samsung 3.4 vendor kernel).
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c288e34df1281f6fc51983a60c3da318560c9975
Author: Mark Zhang <markz@nvidia.com>
Date:   Thu Jan 10 12:11:16 2019 +0800

    regulator: max77620: Initialize values for DT properties
    
    commit 0ab66b3c326ef8f77dae9f528118966365757c0c upstream.
    
    If regulator DT node doesn't exist, its of_parse_cb callback
    function isn't called. Then all values for DT properties are
    filled with zero. This leads to wrong register update for
    FPS and POK settings.
    
    Signed-off-by: Jinyoung Park <jinyoungp@nvidia.com>
    Signed-off-by: Mark Zhang <markz@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 462aee48a8a20c80ff42cad95f6bf6c4436ec085
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sat Feb 9 18:14:14 2019 +0100

    regulator: s2mps11: Fix steps for buck7, buck8 and LDO35
    
    commit 56b5d4ea778c1b0989c5cdb5406d4a488144c416 upstream.
    
    LDO35 uses 25 mV step, not 50 mV.  Bucks 7 and 8 use 12.5 mV step
    instead of 6.25 mV.  Wrong step caused over-voltage (LDO35) or
    under-voltage (buck7 and 8) if regulators were used (e.g. on Exynos5420
    Arndale Octa board).
    
    Cc: <stable@vger.kernel.org>
    Fixes: cb74685ecb39 ("regulator: s2mps11: Add samsung s2mps11 regulator driver")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15ead7e2a11e0f86aa3692ec4801e8f69ef64e46
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Feb 19 23:21:28 2019 +0300

    spi: pxa2xx: Setup maximum supported DMA transfer length
    
    commit ef070b4e4aa25bb5f8632ad196644026c11903bf upstream.
    
    When the commit b6ced294fb61
    
       ("spi: pxa2xx: Switch to SPI core DMA mapping functionality")
    
    switches to SPI core provided DMA helpers, it missed to setup maximum
    supported DMA transfer length for the controller and thus users
    mistakenly try to send more data than supported with the following
    warning:
    
      ili9341 spi-PRP0001:01: DMA disabled for transfer length 153600 greater than 65536
    
    Setup maximum supported DMA transfer length in order to make users know
    the limit.
    
    Fixes: b6ced294fb61 ("spi: pxa2xx: Switch to SPI core DMA mapping functionality")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e51c5ec99597005400184fcd165d71c875bba367
Author: Vignesh R <vigneshr@ti.com>
Date:   Tue Jan 29 13:14:22 2019 +0530

    spi: ti-qspi: Fix mmap read when more than one CS in use
    
    commit 673c865efbdc5fec3cc525c46d71844d42c60072 upstream.
    
    Commit 4dea6c9b0b64 ("spi: spi-ti-qspi: add mmap mode read support") has
    has got order of parameter wrong when calling regmap_update_bits() to
    select CS for mmap access. Mask and value arguments are interchanged.
    Code will work on a system with single slave, but fails when more than
    one CS is in use. Fix this by correcting the order of parameters when
    calling regmap_update_bits().
    
    Fixes: 4dea6c9b0b64 ("spi: spi-ti-qspi: add mmap mode read support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d98ecb141a65ccea0ddef82b5cf3a1d5a777695
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Wed Jan 23 12:48:11 2019 +0100

    netfilter: ipt_CLUSTERIP: fix warning unused variable cn
    
    commit 206b8cc514d7ff2b79dd2d5ad939adc7c493f07a upstream.
    
    When CONFIG_PROC_FS isn't set the variable cn isn't used.
    
    net/ipv4/netfilter/ipt_CLUSTERIP.c: In function ‘clusterip_net_exit’:
    net/ipv4/netfilter/ipt_CLUSTERIP.c:849:24: warning: unused variable ‘cn’ [-Wunused-variable]
      struct clusterip_net *cn = clusterip_pernet(net);
                            ^~
    
    Rework so the variable 'cn' is declared inside "#ifdef CONFIG_PROC_FS".
    
    Fixes: b12f7bad5ad3 ("netfilter: ipt_CLUSTERIP: remove wrong WARN_ON_ONCE in netns exit routine")
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bd9959aa110af7c10e698ab7720026c6b178921
Author: Jiong Wu <lohengrin1024@gmail.com>
Date:   Fri Mar 1 00:18:33 2019 +0800

    mmc:fix a bug when max_discard is 0
    
    commit d4721339dcca7def04909a8e60da43c19a24d8bf upstream.
    
    The original purpose of the code I fix is to replace max_discard with
    max_trim if max_trim is less than max_discard. When max_discard is 0
    we should replace max_discard with max_trim as well, because
    max_discard equals 0 happens only when the max_do_calc_max_discard
    process is overflowed, so if mmc_can_trim(card) is true, max_discard
    should be replaced by an available max_trim.
    However, in the original code, there are two lines of code interfere
    the right process.
    1) if (max_discard && mmc_can_trim(card))
    when max_discard is 0, it skips the process checking if max_discard
    needs to be replaced with max_trim.
    2) if (max_trim < max_discard)
    the condition is false when max_discard is 0. it also skips the process
    that replaces max_discard with max_trim, in fact, we should replace the
    0-valued max_discard with max_trim.
    
    Signed-off-by: Jiong Wu <Lohengrin1024@gmail.com>
    Fixes: b305882fbc87 (mmc: core: optimize mmc_calc_max_discard)
    Cc: stable@vger.kernel.org # v4.17+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2946910ed8377100a3f23a558a8bc8fd83d0302a
Author: BOUGH CHEN <haibo.chen@nxp.com>
Date:   Thu Dec 27 11:20:24 2018 +0000

    mmc: sdhci-esdhc-imx: fix HS400 timing issue
    
    commit de0a0decf2edfc5b0c782915f4120cf990a9bd13 upstream.
    
    Now tuning reset will be done when the timing is MMC_TIMING_LEGACY/
    MMC_TIMING_MMC_HS/MMC_TIMING_SD_HS. But for timing MMC_TIMING_MMC_HS,
    we can not do tuning reset, otherwise HS400 timing is not right.
    
    Here is the process of init HS400, first finish tuning in HS200 mode,
    then switch to HS mode and 8 bit DDR mode, finally switch to HS400
    mode. If we do tuning reset in HS mode, this will cause HS400 mode
    lost the tuning setting, which will cause CRC error.
    
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Cc: stable@vger.kernel.org # v4.12+
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: d9370424c948 ("mmc: sdhci-esdhc-imx: reset tuning circuit when power on mmc card")
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c19b9673487e3b9bcabd401e920553d074f6cba2
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Mar 11 18:41:03 2019 +0200

    ACPI / device_sysfs: Avoid OF modalias creation for removed device
    
    commit f16eb8a4b096514ac06fb25bf599dcc792899b3d upstream.
    
    If SSDT overlay is loaded via ConfigFS and then unloaded the device,
    we would like to have OF modalias for, already gone. Thus, acpi_get_name()
    returns no allocated buffer for such case and kernel crashes afterwards:
    
     ACPI: Host-directed Dynamic ACPI Table Unload
     ads7950 spi-PRP0001:00: Dropping the link to regulator.0
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
     #PF error: [normal kernel read fault]
     PGD 80000000070d6067 P4D 80000000070d6067 PUD 70d0067 PMD 0
     Oops: 0000 [#1] SMP PTI
     CPU: 0 PID: 40 Comm: kworker/u4:2 Not tainted 5.0.0+ #96
     Hardware name: Intel Corporation Merrifield/BODEGA BAY, BIOS 542 2015.01.21:18.19.48
     Workqueue: kacpi_hotplug acpi_device_del_work_fn
     RIP: 0010:create_of_modalias.isra.1+0x4c/0x150
     Code: 00 00 48 89 44 24 18 31 c0 48 8d 54 24 08 48 c7 44 24 10 00 00 00 00 48 c7 44 24 08 ff ff ff ff e8 7a b0 03 00 48 8b 4c 24 10 <0f> b6 01 84 c0 74 27 48 c7 c7 00 09 f4 a5 0f b6 f0 8d 50 20 f6 04
     RSP: 0000:ffffa51040297c10 EFLAGS: 00010246
     RAX: 0000000000001001 RBX: 0000000000000785 RCX: 0000000000000000
     RDX: 0000000000001001 RSI: 0000000000000286 RDI: ffffa2163dc042e0
     RBP: ffffa216062b1196 R08: 0000000000001001 R09: ffffa21639873000
     R10: ffffffffa606761d R11: 0000000000000001 R12: ffffa21639873218
     R13: ffffa2163deb5060 R14: ffffa216063d1010 R15: 0000000000000000
     FS:  0000000000000000(0000) GS:ffffa2163e000000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000000 CR3: 0000000007114000 CR4: 00000000001006f0
     Call Trace:
      __acpi_device_uevent_modalias+0xb0/0x100
      spi_uevent+0xd/0x40
    
     ...
    
    In order to fix above let create_of_modalias() check the status returned
    by acpi_get_name() and bail out in case of failure.
    
    Fixes: 8765c5ba1949 ("ACPI / scan: Rework modalias creation when "compatible" is present")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=201381
    Reported-by: Ferry Toth <fntoth@gmail.com>
    Tested-by: Ferry Toth<fntoth@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: 4.1+ <stable@vger.kernel.org> # 4.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 468ff43f627413fa4b92c899cf4a0d51b225de58
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Mar 7 10:11:19 2019 +0100

    xen: fix dom0 boot on huge systems
    
    commit 01bd2ac2f55a1916d81dace12fa8d7ae1c79b5ea upstream.
    
    Commit f7c90c2aa40048 ("x86/xen: don't write ptes directly in 32-bit
    PV guests") introduced a regression for booting dom0 on huge systems
    with lots of RAM (in the TB range).
    
    Reason is that on those hosts the p2m list needs to be moved early in
    the boot process and this requires temporary page tables to be created.
    Said commit modified xen_set_pte_init() to use a hypercall for writing
    a PTE, but this requires the page table being in the direct mapped
    area, which is not the case for the temporary page tables used in
    xen_relocate_p2m().
    
    As the page tables are completely written before being linked to the
    actual address space instead of set_pte() a plain write to memory can
    be used in xen_relocate_p2m().
    
    Fixes: f7c90c2aa40048 ("x86/xen: don't write ptes directly in 32-bit PV guests")
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24d5097655ebf33160880721b663041dea083110
Author: Jann Horn <jannh@google.com>
Date:   Wed Feb 20 17:54:43 2019 +0100

    tracing/perf: Use strndup_user() instead of buggy open-coded version
    
    commit 83540fbc8812a580b6ad8f93f4c29e62e417687e upstream.
    
    The first version of this method was missing the check for
    `ret == PATH_MAX`; then such a check was added, but it didn't call kfree()
    on error, so there was still a small memory leak in the error case.
    Fix it by using strndup_user() instead of open-coding it.
    
    Link: http://lkml.kernel.org/r/20190220165443.152385-1-jannh@google.com
    
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 0eadcc7a7bc0 ("perf/core: Fix perf_uprobe_init()")
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f27077e5f5c5a468733b09893db86169c1c3b0a9
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Feb 13 20:29:06 2019 +0800

    tracing: Do not free iter->trace in fail path of tracing_open_pipe()
    
    commit e7f0c424d0806b05d6f47be9f202b037eb701707 upstream.
    
    Commit d716ff71dd12 ("tracing: Remove taking of trace_types_lock in
    pipe files") use the current tracer instead of the copy in
    tracing_open_pipe(), but it forget to remove the freeing sentence in
    the error path.
    
    There's an error path that can call kfree(iter->trace) after the iter->trace
    was assigned to tr->current_trace, which would be bad to free.
    
    Link: http://lkml.kernel.org/r/1550060946-45984-1-git-send-email-yi.zhang@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: d716ff71dd12 ("tracing: Remove taking of trace_types_lock in pipe files")
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebca08d7e8628616ce21c5687a41fb594702f38b
Author: Tom Zanussi <tom.zanussi@linux.intel.com>
Date:   Mon Feb 4 15:07:24 2019 -0600

    tracing: Use strncpy instead of memcpy for string keys in hist triggers
    
    commit 9f0bbf3115ca9f91f43b7c74e9ac7d79f47fc6c2 upstream.
    
    Because there may be random garbage beyond a string's null terminator,
    it's not correct to copy the the complete character array for use as a
    hist trigger key.  This results in multiple histogram entries for the
    'same' string key.
    
    So, in the case of a string key, use strncpy instead of memcpy to
    avoid copying in the extra bytes.
    
    Before, using the gdbus entries in the following hist trigger as an
    example:
    
      # echo 'hist:key=comm' > /sys/kernel/debug/tracing/events/sched/sched_waking/trigger
      # cat /sys/kernel/debug/tracing/events/sched/sched_waking/hist
    
      ...
    
      { comm: ImgDecoder #4                      } hitcount:        203
      { comm: gmain                              } hitcount:        213
      { comm: gmain                              } hitcount:        216
      { comm: StreamTrans #73                    } hitcount:        221
      { comm: mozStorage #3                      } hitcount:        230
      { comm: gdbus                              } hitcount:        233
      { comm: StyleThread#5                      } hitcount:        253
      { comm: gdbus                              } hitcount:        256
      { comm: gdbus                              } hitcount:        260
      { comm: StyleThread#4                      } hitcount:        271
    
      ...
    
      # cat /sys/kernel/debug/tracing/events/sched/sched_waking/hist | egrep gdbus | wc -l
      51
    
    After:
    
      # cat /sys/kernel/debug/tracing/events/sched/sched_waking/hist | egrep gdbus | wc -l
      1
    
    Link: http://lkml.kernel.org/r/50c35ae1267d64eee975b8125e151e600071d4dc.1549309756.git.tom.zanussi@linux.intel.com
    
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 79e577cbce4c4 ("tracing: Support string type key properly")
    Signed-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43eaa6cc17753f31768ddf1ed314e36abc0f2580
Author: Pavel Shilovsky <piastryyy@gmail.com>
Date:   Mon Mar 4 17:48:01 2019 -0800

    CIFS: Fix read after write for files with read caching
    
    commit 6dfbd84684700cb58b34e8602c01c12f3d2595c8 upstream.
    
    When we have a READ lease for a file and have just issued a write
    operation to the server we need to purge the cache and set oplock/lease
    level to NONE to avoid reading stale data. Currently we do that
    only if a write operation succedeed thus not covering cases when
    a request was sent to the server but a negative error code was
    returned later for some other reasons (e.g. -EIOCBQUEUED or -EINTR).
    Fix this by turning off caching regardless of the error code being
    returned.
    
    The patches fixes generic tests 075 and 112 from the xfs-tests.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc8e8ad962a8add17737ec29396bb7a754907e52
Author: Pavel Shilovsky <piastryyy@gmail.com>
Date:   Mon Mar 4 14:02:50 2019 -0800

    CIFS: Do not skip SMB2 message IDs on send failures
    
    commit c781af7e0c1fed9f1d0e0ec31b86f5b21a8dca17 upstream.
    
    When we hit failures during constructing MIDs or sending PDUs
    through the network, we end up not using message IDs assigned
    to the packet. The next SMB packet will skip those message IDs
    and continue with the next one. This behavior may lead to a server
    not granting us credits until we use the skipped IDs. Fix this by
    reverting the current ID to the original value if any errors occur
    before we push the packet through the network stack.
    
    This patch fixes the generic/310 test from the xfs-tests.
    
    Cc: <stable@vger.kernel.org> # 4.19.x
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ed9f22e28dd3a2b18f65ee5442882ebded6413e
Author: Pavel Shilovsky <piastryyy@gmail.com>
Date:   Wed Feb 13 15:43:08 2019 -0800

    CIFS: Do not reset lease state to NONE on lease break
    
    commit 7b9b9edb49ad377b1e06abf14354c227e9ac4b06 upstream.
    
    Currently on lease break the client sets a caching level twice:
    when oplock is detected and when oplock is processed. While the
    1st attempt sets the level to the value provided by the server,
    the 2nd one resets the level to None unconditionally.
    This happens because the oplock/lease processing code was changed
    to avoid races between page cache flushes and oplock breaks.
    The commit c11f1df5003d534 ("cifs: Wait for writebacks to complete
    before attempting write.") fixed the races for oplocks but didn't
    apply the same changes for leases resulting in overwriting the
    server granted value to None. Fix this by properly processing
    lease breaks.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41e2d1c43c87512e6209b3aa2429056d45179065
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Jan 24 17:33:46 2019 +0100

    crypto: arm64/aes-ccm - fix bugs in non-NEON fallback routine
    
    commit 969e2f59d589c15f6aaf306e590dde16f12ea4b3 upstream.
    
    Commit 5092fcf34908 ("crypto: arm64/aes-ce-ccm: add non-SIMD generic
    fallback") introduced C fallback code to replace the NEON routines
    when invoked from a context where the NEON is not available (i.e.,
    from the context of a softirq taken while the NEON is already being
    used in kernel process context)
    
    Fix two logical flaws in the MAC calculation of the associated data.
    
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Fixes: 5092fcf34908 ("crypto: arm64/aes-ce-ccm: add non-SIMD generic fallback")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5a5bded80a6d1719ed88e452fa5a19103cb2c0e
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Jan 24 17:33:45 2019 +0100

    crypto: arm64/aes-ccm - fix logical bug in AAD MAC handling
    
    commit eaf46edf6ea89675bd36245369c8de5063a0272c upstream.
    
    The NEON MAC calculation routine fails to handle the case correctly
    where there is some data in the buffer, and the input fills it up
    exactly. In this case, we enter the loop at the end with w8 == 0,
    while a negative value is assumed, and so the loop carries on until
    the increment of the 32-bit counter wraps around, which is quite
    obviously wrong.
    
    So omit the loop altogether in this case, and exit right away.
    
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Fixes: a3fd82105b9d1 ("arm64/crypto: AES in CCM mode using ARMv8 Crypto ...")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66700c89f0ab3f210b58ebb3c53a736546d7c2d5
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:39 2019 -0800

    crypto: x86/morus - fix handling chunked inputs and MAY_SLEEP
    
    commit 2060e284e9595fc3baed6e035903c05b93266555 upstream.
    
    The x86 MORUS implementations all fail the improved AEAD tests because
    they produce the wrong result with some data layouts.  The issue is that
    they assume that if the skcipher_walk API gives 'nbytes' not aligned to
    the walksize (a.k.a. walk.stride), then it is the end of the data.  In
    fact, this can happen before the end.
    
    Also, when the CRYPTO_TFM_REQ_MAY_SLEEP flag is given, they can
    incorrectly sleep in the skcipher_walk_*() functions while preemption
    has been disabled by kernel_fpu_begin().
    
    Fix these bugs.
    
    Fixes: 56e8e57fc3a7 ("crypto: morus - Add common SIMD glue code for MORUS")
    Cc: <stable@vger.kernel.org> # v4.18+
    Cc: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a9fcf4a9f1f5f756f50e558df2da790e2936cf0
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:40 2019 -0800

    crypto: x86/aesni-gcm - fix crash on empty plaintext
    
    commit 3af349639597fea582a93604734d717e59a0e223 upstream.
    
    gcmaes_crypt_by_sg() dereferences the NULL pointer returned by
    scatterwalk_ffwd() when encrypting an empty plaintext and the source
    scatterlist ends immediately after the associated data.
    
    Fix it by only fast-forwarding to the src/dst data scatterlists if the
    data length is nonzero.
    
    This bug is reproduced by the "rfc4543(gcm(aes))" test vectors when run
    with the new AEAD test manager.
    
    Fixes: e845520707f8 ("crypto: aesni - Update aesni-intel_glue to use scatter/gather")
    Cc: <stable@vger.kernel.org> # v4.17+
    Cc: Dave Watson <davejwatson@fb.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d2a5172caa42bc5e57d9aea74e43f394a381bad
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:38 2019 -0800

    crypto: x86/aegis - fix handling chunked inputs and MAY_SLEEP
    
    commit ba6771c0a0bc2fac9d6a8759bab8493bd1cffe3b upstream.
    
    The x86 AEGIS implementations all fail the improved AEAD tests because
    they produce the wrong result with some data layouts.  The issue is that
    they assume that if the skcipher_walk API gives 'nbytes' not aligned to
    the walksize (a.k.a. walk.stride), then it is the end of the data.  In
    fact, this can happen before the end.
    
    Also, when the CRYPTO_TFM_REQ_MAY_SLEEP flag is given, they can
    incorrectly sleep in the skcipher_walk_*() functions while preemption
    has been disabled by kernel_fpu_begin().
    
    Fix these bugs.
    
    Fixes: 1d373d4e8e15 ("crypto: x86 - Add optimized AEGIS implementations")
    Cc: <stable@vger.kernel.org> # v4.18+
    Cc: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 574c19d97e6bc4ff6a7d83eb20be46713bc45285
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Jan 23 20:57:35 2019 -0800

    crypto: testmgr - skip crc32c context test for ahash algorithms
    
    commit eb5e6730db98fcc4b51148b4a819fa4bf864ae54 upstream.
    
    Instantiating "cryptd(crc32c)" causes a crypto self-test failure because
    the crypto_alloc_shash() in alg_test_crc32c() fails.  This is because
    cryptd(crc32c) is an ahash algorithm, not a shash algorithm; so it can
    only be accessed through the ahash API, unlike shash algorithms which
    can be accessed through both the ahash and shash APIs.
    
    As the test is testing the shash descriptor format which is only
    applicable to shash algorithms, skip it for ahash algorithms.
    
    (Note that it's still important to fix crypto self-test failures even
     for weird algorithm instantiations like cryptd(crc32c) that no one
     would really use; in fips_enabled mode unprivileged users can use them
     to panic the kernel, and also they prevent treating a crypto self-test
     failure as a bug when fuzzing the kernel.)
    
    Fixes: 8e3ee85e68c5 ("crypto: crc32c - Test descriptor context format")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6c703f15872408d04410dd8c77926f7eb8dff8b
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jan 6 18:47:43 2019 -0800

    crypto: skcipher - set CRYPTO_TFM_NEED_KEY if ->setkey() fails
    
    commit b1f6b4bf416b49f00f3abc49c639371cdecaaad1 upstream.
    
    Some algorithms have a ->setkey() method that is not atomic, in the
    sense that setting a key can fail after changes were already made to the
    tfm context.  In this case, if a key was already set the tfm can end up
    in a state that corresponds to neither the old key nor the new key.
    
    For example, in lrw.c, if gf128mul_init_64k_bbe() fails due to lack of
    memory, then priv::table will be left NULL.  After that, encryption with
    that tfm will cause a NULL pointer dereference.
    
    It's not feasible to make all ->setkey() methods atomic, especially ones
    that have to key multiple sub-tfms.  Therefore, make the crypto API set
    CRYPTO_TFM_NEED_KEY if ->setkey() fails and the algorithm requires a
    key, to prevent the tfm from being used until a new key is set.
    
    [Cc stable mainly because when introducing the NEED_KEY flag I changed
     AF_ALG to rely on it; and unlike in-kernel crypto API users, AF_ALG
     previously didn't have this problem.  So these "incompletely keyed"
     states became theoretically accessible via AF_ALG -- though, the
     opportunities for causing real mischief seem pretty limited.]
    
    Fixes: f8d33fac8480 ("crypto: skcipher - prevent using skciphers without setting key")
    Cc: <stable@vger.kernel.org> # v4.16+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb1ae0aadbf19053173cea30a530816eee9ca6ed
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 3 20:16:13 2019 -0800

    crypto: pcbc - remove bogus memcpy()s with src == dest
    
    commit 251b7aea34ba3c4d4fdfa9447695642eb8b8b098 upstream.
    
    The memcpy()s in the PCBC implementation use walk->iv as both the source
    and destination, which has undefined behavior.  These memcpy()'s are
    actually unneeded, because walk->iv is already used to hold the previous
    plaintext block XOR'd with the previous ciphertext block.  Thus,
    walk->iv is already updated to its final value.
    
    So remove the broken and unnecessary memcpy()s.
    
    Fixes: 91652be5d1b9 ("[CRYPTO] pcbc: Add Propagated CBC template")
    Cc: <stable@vger.kernel.org> # v2.6.21+
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0bfdac6a4718f2973bea8ef9e0233fbf62440be
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:37 2019 -0800

    crypto: morus - fix handling chunked inputs
    
    commit d644f1c8746ed24f81075480f9e9cb3777ae8d65 upstream.
    
    The generic MORUS implementations all fail the improved AEAD tests
    because they produce the wrong result with some data layouts.  The issue
    is that they assume that if the skcipher_walk API gives 'nbytes' not
    aligned to the walksize (a.k.a. walk.stride), then it is the end of the
    data.  In fact, this can happen before the end.  Fix them.
    
    Fixes: 396be41f16fd ("crypto: morus - Add generic MORUS AEAD implementations")
    Cc: <stable@vger.kernel.org> # v4.18+
    Cc: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc410d2d840598717a67abc124c8f48496a15727
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jan 6 18:47:42 2019 -0800

    crypto: hash - set CRYPTO_TFM_NEED_KEY if ->setkey() fails
    
    commit ba7d7433a0e998c902132bd47330e355a1eaa894 upstream.
    
    Some algorithms have a ->setkey() method that is not atomic, in the
    sense that setting a key can fail after changes were already made to the
    tfm context.  In this case, if a key was already set the tfm can end up
    in a state that corresponds to neither the old key nor the new key.
    
    It's not feasible to make all ->setkey() methods atomic, especially ones
    that have to key multiple sub-tfms.  Therefore, make the crypto API set
    CRYPTO_TFM_NEED_KEY if ->setkey() fails and the algorithm requires a
    key, to prevent the tfm from being used until a new key is set.
    
    Note: we can't set CRYPTO_TFM_NEED_KEY for OPTIONAL_KEY algorithms, so
    ->setkey() for those must nevertheless be atomic.  That's fine for now
    since only the crc32 and crc32c algorithms set OPTIONAL_KEY, and it's
    not intended that OPTIONAL_KEY be used much.
    
    [Cc stable mainly because when introducing the NEED_KEY flag I changed
     AF_ALG to rely on it; and unlike in-kernel crypto API users, AF_ALG
     previously didn't have this problem.  So these "incompletely keyed"
     states became theoretically accessible via AF_ALG -- though, the
     opportunities for causing real mischief seem pretty limited.]
    
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76f21678d64f48123e74210428d5460f606607d2
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sun Jan 27 10:16:53 2019 +0100

    crypto: arm64/crct10dif - revert to C code for short inputs
    
    commit d72b9d4acd548251f55b16843fc7a05dc5c80de8 upstream.
    
    The SIMD routine ported from x86 used to have a special code path
    for inputs < 16 bytes, which got lost somewhere along the way.
    Instead, the current glue code aligns the input pointer to 16 bytes,
    which is not really necessary on this architecture (although it
    could be beneficial to performance to expose aligned data to the
    the NEON routine), but this could result in inputs of less than
    16 bytes to be passed in. This not only fails the new extended
    tests that Eric has implemented, it also results in the code
    reading past the end of the input, which could potentially result
    in crashes when dealing with less than 16 bytes of input at the
    end of a page which is followed by an unmapped page.
    
    So update the glue code to only invoke the NEON routine if the
    input is at least 16 bytes.
    
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Reviewed-by: Eric Biggers <ebiggers@kernel.org>
    Fixes: 6ef5737f3931 ("crypto: arm64/crct10dif - port x86 SSE implementation to arm64")
    Cc: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bca5a9a5dcdd81dfc39b4c7ca06861740fb6f90
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:42 2019 -0800

    crypto: arm64/aes-neonbs - fix returning final keystream block
    
    commit 12455e320e19e9cc7ad97f4ab89c280fe297387c upstream.
    
    The arm64 NEON bit-sliced implementation of AES-CTR fails the improved
    skcipher tests because it sometimes produces the wrong ciphertext.  The
    bug is that the final keystream block isn't returned from the assembly
    code when the number of non-final blocks is zero.  This can happen if
    the input data ends a few bytes after a page boundary.  In this case the
    last bytes get "encrypted" by XOR'ing them with uninitialized memory.
    
    Fix the assembly code to return the final keystream block when needed.
    
    Fixes: 88a3f582bea9 ("crypto: arm64/aes - don't use IV buffer to return final keystream block")
    Cc: <stable@vger.kernel.org> # v4.11+
    Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0beb34b865e37fee268fecbe17e37d1ce59b48ff
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sun Jan 27 10:16:52 2019 +0100

    crypto: arm/crct10dif - revert to C code for short inputs
    
    commit 62fecf295e3c48be1b5f17c440b93875b9adb4d6 upstream.
    
    The SIMD routine ported from x86 used to have a special code path
    for inputs < 16 bytes, which got lost somewhere along the way.
    Instead, the current glue code aligns the input pointer to permit
    the NEON routine to use special versions of the vld1 instructions
    that assume 16 byte alignment, but this could result in inputs of
    less than 16 bytes to be passed in. This not only fails the new
    extended tests that Eric has implemented, it also results in the
    code reading past the end of the input, which could potentially
    result in crashes when dealing with less than 16 bytes of input
    at the end of a page which is followed by an unmapped page.
    
    So update the glue code to only invoke the NEON routine if the
    input is at least 16 bytes.
    
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Reviewed-by: Eric Biggers <ebiggers@kernel.org>
    Fixes: 1d481f1cd892 ("crypto: arm/crct10dif - port x86 SSE implementation to ARM")
    Cc: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c152af938cec61614955a631b8f70278428ac34
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:36 2019 -0800

    crypto: aegis - fix handling chunked inputs
    
    commit 0f533e67d26f228ea5dfdacc8a4bdeb487af5208 upstream.
    
    The generic AEGIS implementations all fail the improved AEAD tests
    because they produce the wrong result with some data layouts.  The issue
    is that they assume that if the skcipher_walk API gives 'nbytes' not
    aligned to the walksize (a.k.a. walk.stride), then it is the end of the
    data.  In fact, this can happen before the end.  Fix them.
    
    Fixes: f606a88e5823 ("crypto: aegis - Add generic AEGIS AEAD implementations")
    Cc: <stable@vger.kernel.org> # v4.18+
    Cc: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 736807d6915735c0e8f6ac5bae45e9ce04fe8c50
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jan 6 18:47:44 2019 -0800

    crypto: aead - set CRYPTO_TFM_NEED_KEY if ->setkey() fails
    
    commit 6ebc97006b196aafa9df0497fdfa866cf26f259b upstream.
    
    Some algorithms have a ->setkey() method that is not atomic, in the
    sense that setting a key can fail after changes were already made to the
    tfm context.  In this case, if a key was already set the tfm can end up
    in a state that corresponds to neither the old key nor the new key.
    
    For example, in gcm.c, if the kzalloc() fails due to lack of memory,
    then the CTR part of GCM will have the new key but GHASH will not.
    
    It's not feasible to make all ->setkey() methods atomic, especially ones
    that have to key multiple sub-tfms.  Therefore, make the crypto API set
    CRYPTO_TFM_NEED_KEY if ->setkey() fails, to prevent the tfm from being
    used until a new key is set.
    
    [Cc stable mainly because when introducing the NEED_KEY flag I changed
     AF_ALG to rely on it; and unlike in-kernel crypto API users, AF_ALG
     previously didn't have this problem.  So these "incompletely keyed"
     states became theoretically accessible via AF_ALG -- though, the
     opportunities for causing real mischief seem pretty limited.]
    
    Fixes: dc26c17f743a ("crypto: aead - prevent using AEADs without setting key")
    Cc: <stable@vger.kernel.org> # v4.16+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a8b048430c124175a28514e2ed7cb8230998ccc
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Jan 6 11:41:29 2019 -0500

    fix cgroup_do_mount() handling of failure exits
    
    commit 399504e21a10be16dd1408ba0147367d9d82a10c upstream.
    
    same story as with last May fixes in sysfs (7b745a4e4051
    "unfuck sysfs_mount()"); new_sb is left uninitialized
    in case of early errors in kernfs_mount_ns() and papering
    over it by treating any error from kernfs_mount_ns() as
    equivalent to !new_ns ends up conflating the cases when
    objects had never been transferred to a superblock with
    ones when that has happened and resulting new superblock
    had been dropped.  Easily fixed (same way as in sysfs
    case).  Additionally, there's a superblock leak on
    kernfs_node_dentry() failure *and* a dentry leak inside
    kernfs_node_dentry() itself - the latter on probably
    impossible errors, but the former not impossible to trigger
    (as the matter of fact, injecting allocation failures
    at that point *does* trigger it).
    
    Cc: stable@kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b8da135a4cce7163edabc829669398eebd1f7d0
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Wed Feb 6 13:04:53 2019 +1100

    libnvdimm: Fix altmap reservation size calculation
    
    commit 07464e88365e9236febaca9ed1a2e2006d8bc952 upstream.
    
    Libnvdimm reserves the first 8K of pfn and devicedax namespaces to
    store a superblock describing the namespace. This 8K reservation
    is contained within the altmap area which the kernel uses for the
    vmemmap backing for the pages within the namespace. The altmap
    allows for some pages at the start of the altmap area to be reserved
    and that mechanism is used to protect the superblock from being
    re-used as vmemmap backing.
    
    The number of PFNs to reserve is calculated using:
    
            PHYS_PFN(SZ_8K)
    
    Which is implemented as:
    
     #define PHYS_PFN(x) ((unsigned long)((x) >> PAGE_SHIFT))
    
    So on systems where PAGE_SIZE is greater than 8K the reservation
    size is truncated to zero and the superblock area is re-used as
    vmemmap backing. As a result all the namespace information stored
    in the superblock (i.e. if it's a PFN or DAX namespace) is lost
    and the namespace needs to be re-created to get access to the
    contents.
    
    This patch fixes this by using PFN_UP() rather than PHYS_PFN() to ensure
    that at least one page is reserved. On systems with a 4K pages size this
    patch should have no effect.
    
    Cc: stable@vger.kernel.org
    Cc: Dan Williams <dan.j.williams@intel.com>
    Fixes: ac515c084be9 ("libnvdimm, pmem, pfn: move pfn setup to the core")
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 696c37524beb991c600cf17b43cab2fce4a23113
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jan 24 17:33:06 2019 -0800

    libnvdimm/pmem: Honor force_raw for legacy pmem regions
    
    commit fa7d2e639cd90442d868dfc6ca1d4cc9d8bf206e upstream.
    
    For recovery, where non-dax access is needed to a given physical address
    range, and testing, allow the 'force_raw' attribute to override the
    default establishment of a dev_pagemap.
    
    Otherwise without this capability it is possible to end up with a
    namespace that can not be activated due to corrupted info-block, and one
    that can not be repaired due to a section collision.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 004f1afbe199 ("libnvdimm, pmem: direct map legacy pmem by default")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a89ed7aa14031a3ba3371e81293dcb5e16d92ec
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Tue Jan 22 10:48:09 2019 +0800

    libnvdimm, pfn: Fix over-trim in trim_pfn_device()
    
    commit f101ada7da6551127d192c2f1742c1e9e0f62799 upstream.
    
    When trying to see whether current nd_region intersects with others,
    trim_pfn_device() has already calculated the *size* to be expanded to
    SECTION size.
    
    Do not double append 'adjust' to 'size' when calculating whether the end
    of a region collides with the next pmem region.
    
    Fixes: ae86cbfef381 "libnvdimm, pfn: Pad pfn namespaces relative to other regions"
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b88d92ea9d2baef67910564878024d56f233ea7
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Jan 15 10:47:00 2019 -0800

    libnvdimm/label: Clear 'updating' flag after label-set update
    
    commit 966d23a006ca7b44ac8cf4d0c96b19785e0c3da0 upstream.
    
    The UEFI 2.7 specification sets expectations that the 'updating' flag is
    eventually cleared. To date, the libnvdimm core has never adhered to
    that protocol. The policy of the core matches the policy of other
    multi-device info-block formats like MD-Software-RAID that expect
    administrator intervention on inconsistent info-blocks, not automatic
    invalidation.
    
    However, some pre-boot environments may unfortunately attempt to "clean
    up" the labels and invalidate a set when it fails to find at least one
    "non-updating" label in the set. Clear the updating flag after set
    updates to minimize the window of vulnerability to aggressive pre-boot
    environments.
    
    Ideally implementations would not write to the label area outside of
    creating namespaces.
    
    Note that this only minimizes the window, it does not close it as the
    system can still crash while clearing the flag and the set can be
    subsequently deleted / invalidated by the pre-boot environment.
    
    Fixes: f524bf271a5c ("libnvdimm: write pmem label set")
    Cc: <stable@vger.kernel.org>
    Cc: Kelly Couch <kelly.j.couch@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4dfb94a075483a0326acf21d09dcbe0ed0bdc56
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Feb 13 09:01:13 2019 -0800

    nfit/ars: Attempt short-ARS even in the no_init_ars case
    
    commit fa3ed4d981b1fc19acdd07fcb152a4bd3706892b upstream.
    
    The no_init_ars option is meant to prevent long-ARS, but short-ARS
    should be allowed to grab any immediate results.
    
    Fixes: bc6ba8085842 ("nfit, address-range-scrub: rework and simplify ARS...")
    Cc: <stable@vger.kernel.org>
    Reported-by: Erwin Tsaur <erwin.tsaur@oracle.com>
    Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6defe76600be4a89f60804f9c7aea019da313fe
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Feb 13 08:58:40 2019 -0800

    nfit/ars: Attempt a short-ARS whenever the ARS state is idle at boot
    
    commit c6c5df293bf1b488cf8459aac658aecfdccb13a9 upstream.
    
    If query-ARS reports that ARS has stopped and requires continuation
    attempt to retrieve short-ARS results before continuing the long
    operation.
    
    Fixes: bc6ba8085842 ("nfit, address-range-scrub: rework and simplify ARS...")
    Cc: <stable@vger.kernel.org>
    Reported-by: Krzysztof Rusocki <krzysztof.rusocki@intel.com>
    Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5878c4f084dc6b1386dad03970bb61ad5e9dc4b
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Feb 7 14:56:50 2019 -0800

    acpi/nfit: Fix bus command validation
    
    commit ebe9f6f19d80d8978d16078dff3d5bd93ad8d102 upstream.
    
    Commit 11189c1089da "acpi/nfit: Fix command-supported detection" broke
    ND_CMD_CALL for bus-level commands. The "func = cmd" assumption is only
    valid for:
    
        ND_CMD_ARS_CAP
        ND_CMD_ARS_START
        ND_CMD_ARS_STATUS
        ND_CMD_CLEAR_ERROR
    
    The function number otherwise needs to be pulled from the command
    payload for:
    
        NFIT_CMD_TRANSLATE_SPA
        NFIT_CMD_ARS_INJECT_SET
        NFIT_CMD_ARS_INJECT_CLEAR
        NFIT_CMD_ARS_INJECT_GET
    
    Update cmd_to_func() for the bus case and call it in the common path.
    
    Fixes: 11189c1089da ("acpi/nfit: Fix command-supported detection")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    Reported-by: Grzegorz Burzynski <grzegorz.burzynski@intel.com>
    Tested-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8df25eb903c5786312ba886828afff3544b854e6
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jan 30 01:23:01 2019 +0000

    nfit: acpi_nfit_ctl(): Check out_obj->type in the right place
    
    commit 43f89877f26671c6309cd87d7364b1a3e66e71cf upstream.
    
    In the case of ND_CMD_CALL, we should also check out_obj->type.
    
    The patch uses out_obj->type, which is a short alias to
    out_obj->package.type.
    
    Fixes: 31eca76ba2fc ("nfit, libnvdimm: limited/whitelisted dimm command marshaling mechanism")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eabd7d248e2146abe5909eff29806e8b090dc459
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Thu Feb 21 14:19:17 2019 +0200

    stm class: Prevent division by zero
    
    commit bf7cbaae0831252b416f375ca9b1027ecd4642dd upstream.
    
    Using STP_POLICY_ID_SET ioctl command with dummy_stm device, or any STM
    device that supplies zero mmio channel size, will trigger a division by
    zero bug in the kernel.
    
    Prevent this by disallowing channel widths other than 1 for such devices.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 7bd1d4093c2f ("stm class: Introduce an abstraction for System Trace Module devices")
    CC: stable@vger.kernel.org # v4.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3139fbb3b00f61218121b36ebe32c82857a57df
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Fri Feb 22 22:35:32 2019 -0800

    tmpfs: fix uninitialized return value in shmem_link
    
    [ Upstream commit 29b00e609960ae0fcff382f4c7079dd0874a5311 ]
    
    When we made the shmem_reserve_inode call in shmem_link conditional, we
    forgot to update the declaration for ret so that it always has a known
    value.  Dan Carpenter pointed out this deficiency in the original patch.
    
    Fixes: 1062af920c07 ("tmpfs: fix link accounting when a tmpfile is linked in")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: Matej Kupljen <matej.kupljen@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3f62d3eab0beff6877c2035d6a6f556f8d921a0
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Feb 22 07:27:41 2019 -0300

    selftests: fib_tests: sleep after changing carrier. again.
    
    [ Upstream commit af548a27b158d548d41e56255e6eaca1658cc3be ]
    
    Just like commit e2ba732a1681 ("selftests: fib_tests: sleep after
    changing carrier"), wait one second to allow linkwatch to propagate the
    carrier change to the stack.
    
    There are two sets of carrier tests. The first slept after the carrier
    was set to off, and when the second set ran, it was likely that the
    linkwatch would be able to run again without much delay, reducing the
    likelihood of a race. However, if you run 'fib_tests.sh -t carrier' on a
    loop, you will quickly notice the failures.
    
    Sleeping on the second set of tests make the failures go away.
    
    Cc: David Ahern <dsahern@gmail.com>
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cd89bf632b2903591fae34b5f0cf11dbf28638b
Author: Mao Wenan <maowenan@huawei.com>
Date:   Fri Feb 22 14:57:23 2019 +0800

    net: set static variable an initial value in atl2_probe()
    
    [ Upstream commit 4593403fa516a5a4cffe6883c5062d60932cbfbe ]
    
    cards_found is a static variable, but when it enters atl2_probe(),
    cards_found is set to zero, the value is not consistent with last probe,
    so next behavior is not our expect.
    
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29e4bfbc79b44a49f435592cea95db0b4ff51897
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Feb 20 19:07:32 2019 -0500

    bnxt_en: Wait longer for the firmware message response to complete.
    
    [ Upstream commit 0000b81a063b5f3ab82fa18041c28327ce72c312 ]
    
    The code waits up to 20 usec for the firmware response to complete
    once we've seen the valid response header in the buffer.  It turns
    out that in some scenarios, this wait time is not long enough.
    Extend it to 150 usec and use usleep_range() instead of udelay().
    
    Fixes: 9751e8e71487 ("bnxt_en: reduce timeout on initial HWRM calls")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4baeab7e084af2cf55c9c1ec97214fa9c2afcf4
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Feb 20 19:07:31 2019 -0500

    bnxt_en: Fix typo in firmware message timeout logic.
    
    [ Upstream commit 67681d02aaa1db9044a16df4ca9c77cde1221a3e ]
    
    The logic that polls for the firmware message response uses a shorter
    sleep interval for the first few passes.  But there was a typo so it
    was using the wrong counter (larger counter) for these short sleep
    passes.  The result is a slightly shorter timeout period for these
    firmware messages than intended.  Fix it by using the proper counter.
    
    Fixes: 9751e8e71487 ("bnxt_en: reduce timeout on initial HWRM calls")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a40fa9498707b49c78b84481390eb40831a3ab1b
Author: Jiong Wang <jiong.wang@netronome.com>
Date:   Fri Feb 22 22:36:04 2019 +0000

    nfp: bpf: fix ALU32 high bits clearance bug
    
    [ Upstream commit f036ebd9bfbe1e91a3d855e85e05fc5ff156b641 ]
    
    NFP BPF JIT compiler is doing a couple of small optimizations when jitting
    ALU imm instructions, some of these optimizations could save code-gen, for
    example:
    
      A & -1 =  A
      A |  0 =  A
      A ^  0 =  A
    
    However, for ALU32, high 32-bit of the 64-bit register should still be
    cleared according to ISA semantics.
    
    Fixes: cd7df56ed3e6 ("nfp: add BPF to NFP code translator")
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ca1faa52be70fd08ba08b8c4039c06c944d45de
Author: Jiong Wang <jiong.wang@netronome.com>
Date:   Fri Feb 22 22:36:03 2019 +0000

    nfp: bpf: fix code-gen bug on BPF_ALU | BPF_XOR | BPF_K
    
    [ Upstream commit 71c190249f0ced5b26377ea6bf829ab3af77a40c ]
    
    The intended optimization should be A ^ 0 = A, not A ^ -1 = A.
    
    Fixes: cd7df56ed3e6 ("nfp: add BPF to NFP code translator")
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4523507c52b8a4125fa0a2c7e4e423b3e566426b
Author: Vadim Lomovtsev <vlomovtsev@marvell.com>
Date:   Wed Feb 20 11:02:44 2019 +0000

    net: thunderx: add nicvf_send_msg_to_pf result check for set_rx_mode_task
    
    [ Upstream commit 7db730d9d2f7b6af6aeac621b1890ea477a0cb8d ]
    
    The rx_set_mode invokes number of messages to be send to PF for receive
    mode configuration. In case if there any issues we need to stop sending
    messages and release allocated memory.
    
    This commit is to implement check of nicvf_msg_send_to_pf() result.
    
    Signed-off-by: Vadim Lomovtsev <vlomovtsev@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17bc53e73d0cee1ed38ddce8eaa6f23d3f1b9737
Author: Vadim Lomovtsev <vlomovtsev@marvell.com>
Date:   Wed Feb 20 11:02:43 2019 +0000

    net: thunderx: make CFG_DONE message to run through generic send-ack sequence
    
    [ Upstream commit 0dd563b9a62c4cbabf5d4fd6596440c2491e72b1 ]
    
    At the end of NIC VF initialization VF sends CFG_DONE message to PF without
    using nicvf_msg_send_to_pf routine. This potentially could re-write data in
    mailbox. This commit is to implement common way of sending CFG_DONE message
    by the same way with other configuration messages by using
    nicvf_send_msg_to_pf() routine.
    
    Signed-off-by: Vadim Lomovtsev <vlomovtsev@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02f8211b75c96fdfbfb6b25601c1b363686aa38b
Author: Alban Crequy <alban@kinvolk.io>
Date:   Fri Feb 22 14:19:08 2019 +0100

    bpf, lpm: fix lookup bug in map_delete_elem
    
    [ Upstream commit 7c0cdf0b3940f63d9777c3fcf250a2f83859ca54 ]
    
    trie_delete_elem() was deleting an entry even though it was not matching
    if the prefixlen was correct. This patch adds a check on matchlen.
    
    Reproducer:
    
    $ sudo bpftool map create /sys/fs/bpf/mylpm type lpm_trie key 8 value 1 entries 128 name mylpm flags 1
    $ sudo bpftool map update pinned /sys/fs/bpf/mylpm key hex 10 00 00 00 aa bb cc dd value hex 01
    $ sudo bpftool map dump pinned /sys/fs/bpf/mylpm
    key: 10 00 00 00 aa bb cc dd  value: 01
    Found 1 element
    $ sudo bpftool map delete pinned /sys/fs/bpf/mylpm key hex 10 00 00 00 ff ff ff ff
    $ echo $?
    0
    $ sudo bpftool map dump pinned /sys/fs/bpf/mylpm
    Found 0 elements
    
    A similar reproducer is added in the selftests.
    
    Without the patch:
    
    $ sudo ./tools/testing/selftests/bpf/test_lpm_map
    test_lpm_map: test_lpm_map.c:485: test_lpm_delete: Assertion `bpf_map_delete_elem(map_fd, key) == -1 && errno == ENOENT' failed.
    Aborted
    
    With the patch: test_lpm_map runs without errors.
    
    Fixes: e454cf595853 ("bpf: Implement map_delete_elem for BPF_MAP_TYPE_LPM_TRIE")
    Cc: Craig Gallek <kraig@google.com>
    Signed-off-by: Alban Crequy <alban@kinvolk.io>
    Acked-by: Craig Gallek <kraig@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5f37906ecb7347d3ef56a68a476264adf895f79
Author: Li RongQing <lirongqing@baidu.com>
Date:   Tue Feb 19 13:12:40 2019 +0800

    mac80211_hwsim: propagate genlmsg_reply return code
    
    [ Upstream commit 17407715240456448e4989bee46ffc93991add83 ]
    
    genlmsg_reply can fail, so propagate its return code
    
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee01ac61d1d4c9bc4ad9036f4c4a56176b6d0392
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Feb 19 22:53:50 2019 +0100

    phonet: fix building with clang
    
    [ Upstream commit 6321aa197547da397753757bd84c6ce64b3e3d89 ]
    
    clang warns about overflowing the data[] member in the struct pnpipehdr:
    
    net/phonet/pep.c:295:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            if (hdr->data[4] == PEP_IND_READY)
                                ^         ~
    include/net/phonet/pep.h:66:3: note: array 'data' declared here
                    u8              data[1];
    
    Using a flexible array member at the end of the struct avoids the
    warning, but since we cannot have a flexible array member inside
    of the union, each index now has to be moved back by one, which
    makes it a little uglier.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Rémi Denis-Courmont <remi@remlab.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b9187e7df64541571f06388af92f769dc207bdf
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Feb 21 13:44:49 2019 -0800

    ARCv2: don't assume core 0x54 has dual issue
    
    [ Upstream commit 7b2e932f633bcb7b190fc7031ce6dac75f8c3472 ]
    
    The first release of core4 (0x54) was dual issue only (HS4x).
    Newer releases allow hardware to be configured as single issue (HS3x)
    or dual issue.
    
    Prevent accessing a HS4x only aux register in HS3x, which otherwise
    leads to illegal instruction exceptions
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3220aa9b00650b1bffa71321044518ceb303f405
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Jun 6 10:20:37 2018 -0700

    ARCv2: support manual regfile save on interrupts
    
    [ Upstream commit e494239a007e601448110ac304fe055951f9de3b ]
    
    There's a hardware bug which affects the HSDK platform, triggered by
    micro-ops for auto-saving regfile on taken interrupt. The workaround is
    to inhibit autosave.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74b4dcea67568ae55996814049a7bf2ffb8ff9fb
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Feb 5 10:07:07 2019 -0800

    ARC: uacces: remove lp_start, lp_end from clobber list
    
    [ Upstream commit d5e3c55e01d8b1774b37b4647c30fb22f1d39077 ]
    
    Newer ARC gcc handles lp_start, lp_end in a different way and doesn't
    like them in the clobber list.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fc69e55f370f74e4daa94719f8949621b8882f8
Author: Eugeniy Paltsev <eugeniy.paltsev@synopsys.com>
Date:   Wed Jan 30 19:32:40 2019 +0300

    ARCv2: lib: memcpy: fix doing prefetchw outside of buffer
    
    [ Upstream commit f8a15f97664178f27dfbf86a38f780a532cb6df0 ]
    
    ARCv2 optimized memcpy uses PREFETCHW instruction for prefetching the
    next cache line but doesn't ensure that the line is not past the end of
    the buffer. PRETECHW changes the line ownership and marks it dirty,
    which can cause data corruption if this area is used for DMA IO.
    
    Fix the issue by avoiding the PREFETCHW. This leads to performance
    degradation but it is OK as we'll introduce new memcpy implementation
    optimized for unaligned memory access using.
    
    We also cut off all PREFETCH instructions at they are quite useless
    here:
     * we call PREFETCH right before LOAD instruction call.
     * we copy 16 or 32 bytes of data (depending on CONFIG_ARC_HAS_LL64)
       in a main logical loop. so we call PREFETCH 4 times (or 2 times)
       for each L1 cache line (in case of 64B L1 cache Line which is
       default case). Obviously this is not optimal.
    
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c049f1957874158390b14ccedf4036730abb308
Author: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Date:   Mon Jan 28 09:45:01 2019 -0800

    ixgbe: fix older devices that do not support IXGBE_MRQC_L3L4TXSWEN
    
    [ Upstream commit 156a67a9065e3339be85f811d1b13b920e50d73b ]
    
    The enabling L3/L4 filtering for transmit switched packets for all
    devices caused unforeseen issue on older devices when trying to send UDP
    traffic in an ordered sequence.  This bit was originally intended for X550
    devices, which supported this feature, so limit the scope of this bit to
    only X550 devices.
    
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 064a61d3e7b50b686ba4358e5ae4cacca90bd834
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Thu Feb 21 08:48:09 2019 -0800

    tmpfs: fix link accounting when a tmpfile is linked in
    
    [ Upstream commit 1062af920c07f5b54cf5060fde3339da6df0cf6b ]
    
    tmpfs has a peculiarity of accounting hard links as if they were
    separate inodes: so that when the number of inodes is limited, as it is
    by default, a user cannot soak up an unlimited amount of unreclaimable
    dcache memory just by repeatedly linking a file.
    
    But when v3.11 added O_TMPFILE, and the ability to use linkat() on the
    fd, we missed accommodating this new case in tmpfs: "df -i" shows that
    an extra "inode" remains accounted after the file is unlinked and the fd
    closed and the actual inode evicted.  If a user repeatedly links
    tmpfiles into a tmpfs, the limit will be hit (ENOSPC) even after they
    are deleted.
    
    Just skip the extra reservation from shmem_link() in this case: there's
    a sense in which this first link of a tmpfile is then cheaper than a
    hard link of another file, but the accounting works out, and there's
    still good limiting, so no need to do anything more complicated.
    
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.1902182134370.7035@eggly.anvils
    Fixes: f4e0c30c191 ("allow the temp files created by open() to be linked to")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reported-by: Matej Kupljen <matej.kupljen@gmail.com>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6e9d6e290028b0a6b83b563fad9fafa7f1d515e
Author: Michal Hocko <mhocko@suse.com>
Date:   Wed Feb 20 22:19:54 2019 -0800

    mm: handle lru_add_drain_all for UP properly
    
    [ Upstream commit 6ea183d60c469560e7b08a83c9804299e84ec9eb ]
    
    Since for_each_cpu(cpu, mask) added by commit 2d3854a37e8b767a
    ("cpumask: introduce new API, without changing anything") did not
    evaluate the mask argument if NR_CPUS == 1 due to CONFIG_SMP=n,
    lru_add_drain_all() is hitting WARN_ON() at __flush_work() added by
    commit 4d43d395fed12463 ("workqueue: Try to catch flush_work() without
    INIT_WORK().") by unconditionally calling flush_work() [1].
    
    Workaround this issue by using CONFIG_SMP=n specific lru_add_drain_all
    implementation.  There is no real need to defer the implementation to
    the workqueue as the draining is going to happen on the local cpu.  So
    alias lru_add_drain_all to lru_add_drain which does all the necessary
    work.
    
    [akpm@linux-foundation.org: fix various build warnings]
    [1] https://lkml.kernel.org/r/18a30387-6aa5-6123-e67c-57579ecc3f38@roeck-us.net
    Link: http://lkml.kernel.org/r/20190213124334.GH4525@dhcp22.suse.cz
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Debugged-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3a9c9be0eb42d6374445b5f13698e6e1df13f26
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Fri Feb 15 13:55:47 2019 +0000

    net: marvell: mvneta: fix DMA debug warning
    
    [ Upstream commit a8fef9ba58c9966ddb1fec916d8d8137c9d8bc89 ]
    
    Booting 4.20 on SolidRun Clearfog issues this warning with DMA API
    debug enabled:
    
    WARNING: CPU: 0 PID: 555 at kernel/dma/debug.c:1230 check_sync+0x514/0x5bc
    mvneta f1070000.ethernet: DMA-API: device driver tries to sync DMA memory it has not allocated [device address=0x000000002dd7dc00] [size=240 bytes]
    Modules linked in: ahci mv88e6xxx dsa_core xhci_plat_hcd xhci_hcd devlink armada_thermal marvell_cesa des_generic ehci_orion phy_armada38x_comphy mcp3021 spi_orion evbug sfp mdio_i2c ip_tables x_tables
    CPU: 0 PID: 555 Comm: bridge-network- Not tainted 4.20.0+ #291
    Hardware name: Marvell Armada 380/385 (Device Tree)
    [<c0019638>] (unwind_backtrace) from [<c0014888>] (show_stack+0x10/0x14)
    [<c0014888>] (show_stack) from [<c07f54e0>] (dump_stack+0x9c/0xd4)
    [<c07f54e0>] (dump_stack) from [<c00312bc>] (__warn+0xf8/0x124)
    [<c00312bc>] (__warn) from [<c00313b0>] (warn_slowpath_fmt+0x38/0x48)
    [<c00313b0>] (warn_slowpath_fmt) from [<c00b0370>] (check_sync+0x514/0x5bc)
    [<c00b0370>] (check_sync) from [<c00b04f8>] (debug_dma_sync_single_range_for_cpu+0x6c/0x74)
    [<c00b04f8>] (debug_dma_sync_single_range_for_cpu) from [<c051bd14>] (mvneta_poll+0x298/0xf58)
    [<c051bd14>] (mvneta_poll) from [<c0656194>] (net_rx_action+0x128/0x424)
    [<c0656194>] (net_rx_action) from [<c000a230>] (__do_softirq+0xf0/0x540)
    [<c000a230>] (__do_softirq) from [<c00386e0>] (irq_exit+0x124/0x144)
    [<c00386e0>] (irq_exit) from [<c009b5e0>] (__handle_domain_irq+0x58/0xb0)
    [<c009b5e0>] (__handle_domain_irq) from [<c03a63c4>] (gic_handle_irq+0x48/0x98)
    [<c03a63c4>] (gic_handle_irq) from [<c0009a10>] (__irq_svc+0x70/0x98)
    ...
    
    This appears to be caused by mvneta_rx_hwbm() calling
    dma_sync_single_range_for_cpu() with the wrong struct device pointer,
    as the buffer manager device pointer is used to map and unmap the
    buffer.  Fix this.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e52578889c8e4e2a36148a1e07df15d6afc0f2a9
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Feb 11 12:09:19 2019 +0100

    ARM: tegra: Restore DT ABI on Tegra124 Chromebooks
    
    [ Upstream commit 94d9b9337d09bdd27735005b3251d97ab29f7273 ]
    
    Commit 482997699ef0 ("ARM: tegra: Fix unit_address_vs_reg DTC warnings
    for /memory") inadventently broke device tree ABI by adding a unit-
    address to the "/memory" node because the device tree compiler flagged
    the missing unit-address as a warning.
    
    Tegra124 Chromebooks (a.k.a. Nyan) use a bootloader that relies on the
    full name of the memory node in device tree being exactly "/memory". It
    can be argued whether this was a good decision or not, and some other
    bootloaders (such as U-Boot) do accept a unit-address in the name of the
    node, but the device tree is an ABI and we can't break existing setups
    just because the device tree compiler considers it bad practice to omit
    the unit-address nowadays.
    
    This partially reverts the offending commit and restores device tree ABI
    compatibility.
    
    Fixes: 482997699ef0 ("ARM: tegra: Fix unit_address_vs_reg DTC warnings for /memory")
    Reported-by: Tristan Bastian <tristan-c.bastian@gmx.de>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Tristan Bastian <tristan-c.bastian@gmx.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f715466a3f23befef85f1556eaf3055664904c6d
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Wed Feb 20 11:43:05 2019 +0000

    arm64: Relax GIC version check during early boot
    
    [ Upstream commit 74698f6971f25d045301139413578865fc2bd8f9 ]
    
    Updates to the GIC architecture allow ID_AA64PFR0_EL1.GIC to have
    values other than 0 or 1. At the moment, Linux is quite strict in the
    way it handles this field at early boot stage (cpufeature is fine) and
    will refuse to use the system register CPU interface if it doesn't
    find the value 1.
    
    Fixes: 021f653791ad17e03f98aaa7fb933816ae16f161 ("irqchip: gic-v3: Initial support for GICv3")
    Reported-by: Chase Conklin <Chase.Conklin@arm.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f97f712523763bdfdfbd1d527c99b470d4ac2e3
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Fri Feb 15 16:30:42 2019 +0100

    ARM: dts: armada-xp: fix Armada XP boards NAND description
    
    [ Upstream commit 6fc979179c98d2591784937d5618edc3e5cd31c1 ]
    
    Commit 3b79919946cd2cf4dac47842afc9a893acec4ed7 ("ARM: dts:
    armada-370-xp: update NAND node with new bindings") updated some
    Marvell Armada DT description to use the new NAND controller bindings,
    but did it incorrectly for a number of boards: armada-xp-gp,
    armada-xp-db and armada-xp-lenovo-ix4-300d. Due to this, the NAND is
    no longer detected on those platforms.
    
    This commit fixes that by properly using the new NAND DT binding. This
    commit was runtime-tested on Armada XP GP, the two other platforms are
    only compile-tested.
    
    Fixes: 3b79919946cd2 ("ARM: dts: armada-370-xp: update NAND node with new bindings")
    Cc: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4d14f616050ef42fe69f53f5f7a1c87b37281c0
Author: Michal Kalderon <michal.kalderon@marvell.com>
Date:   Mon Feb 18 15:24:03 2019 +0200

    qed: Fix iWARP syn packet mac address validation.
    
    [ Upstream commit 8be3dadf04050c2907760ec1955ca1c8fbc25585 ]
    
    The ll2 forwards all syn packets to the driver without validating the mac
    address. Add validation check in the driver's iWARP listener flow and drop
    the packet if it isn't intended for the device.
    
    Signed-off-by: Ariel Elior <ariel.elior@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 821c67748623221ac90592d130d0a542b30e0aa3
Author: Michal Kalderon <michal.kalderon@marvell.com>
Date:   Mon Feb 18 15:24:02 2019 +0200

    qed: Fix iWARP buffer size provided for syn packet processing.
    
    [ Upstream commit 9addc92730df55e2c05e8d3f69267a89d65bcba8 ]
    
    The assumption that the maximum size of a syn packet is 128 bytes
    is wrong. Tunneling headers were not accounted for.
    Allocate buffers large enough for mtu.
    
    Signed-off-by: Ariel Elior <ariel.elior@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90fc2f95c41819f33bbc95eba714df41f46280d1
Author: Bard liao <yung-chuan.liao@linux.intel.com>
Date:   Sun Feb 17 21:23:47 2019 +0800

    ASoC: topology: free created components in tplg load error
    
    [ Upstream commit 304017d31df36fb61eb2ed3ebf65fb6870b3c731 ]
    
    Topology resources are no longer needed if any element failed to load.
    
    Signed-off-by: Bard liao <yung-chuan.liao@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edd7b6b9be979d8c4b0cdb3a369b636d7d397e75
Author: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
Date:   Mon Feb 4 11:21:29 2019 -0800

    mailbox: bcm-flexrm-mailbox: Fix FlexRM ring flush timeout issue
    
    [ Upstream commit d7bf31a0f85faaf63c63c39d55154825a1eaaea9 ]
    
    RING_CONTROL reg was not written due to wrong address, hence all
    the subsequent ring flush was timing out.
    
    Fixes: a371c10ea4b3 ("mailbox: bcm-flexrm-mailbox: Fix FlexRM ring flush sequence")
    
    Signed-off-by: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
    Signed-off-by: Ray Jui <ray.jui@broadcom.com>
    Reviewed-by: Scott Branden <scott.branden@broadcom.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ac400b7c5e8c0b2d3b4c60176bd58138b956a58
Author: Tobias Brunner <tobias@strongswan.org>
Date:   Mon Feb 18 10:49:39 2019 +0100

    xfrm: Fix inbound traffic via XFRM interfaces across network namespaces
    
    [ Upstream commit 660899ddf06ae8bb5bbbd0a19418b739375430c5 ]
    
    After moving an XFRM interface to another namespace it stays associated
    with the original namespace (net in `struct xfrm_if` and the list keyed
    with `xfrmi_net_id`), allowing processes in the new namespace to use
    SAs/policies that were created in the original namespace.  For instance,
    this allows a keying daemon in one namespace to establish IPsec SAs for
    other namespaces without processes there having access to the keys or IKE
    credentials.
    
    This worked fine for outbound traffic, however, for inbound traffic the
    lookup for the interfaces and the policies used the incorrect namespace
    (the one the XFRM interface was moved to).
    
    Fixes: f203b76d7809 ("xfrm: Add virtual xfrm interfaces")
    Signed-off-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a532134236151b46af88e63719263c424697f83
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Feb 16 00:20:54 2019 +0300

    net: mv643xx_eth: disable clk on error path in mv643xx_eth_shared_probe()
    
    [ Upstream commit e928b5d6b75e239feb9c6d5488974b6646a0ebc8 ]
    
    If mv643xx_eth_shared_of_probe() fails, mv643xx_eth_shared_probe()
    leaves clk enabled.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a139d6a318de30168ac7b51bb44108ca4748fe25
Author: Beniamino Galvani <bgalvani@redhat.com>
Date:   Fri Feb 15 13:20:42 2019 +0100

    qmi_wwan: apply SET_DTR quirk to Sierra WP7607
    
    [ Upstream commit 97dc47a1308a3af46a09b1546cfb869f2e382a81 ]
    
    The 1199:68C0 USB ID is reused by Sierra WP7607 which requires the DTR
    quirk to be detected. Apply QMI_QUIRK_SET_DTR unconditionally as
    already done for other IDs shared between different devices.
    
    Signed-off-by: Beniamino Galvani <bgalvani@redhat.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13cb60c3c915959d83a4cd8e63dd86f9a299880c
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Feb 9 02:01:01 2019 +0100

    pinctrl: meson: meson8b: fix the sdxc_a data 1..3 pins
    
    [ Upstream commit c17abcfa93bf0be5e48bb011607d237ac2bfc839 ]
    
    Fix the mismatch between the "sdxc_d13_1_a" pin group definition from
    meson8b_cbus_groups and the entry in sdxc_a_groups ("sdxc_d0_13_1_a").
    This makes it possible to use "sdxc_d13_1_a" in device-tree files to
    route the MMC data 1..3 pins to GPIOX_1..3.
    
    Fixes: 0fefcb6876d0d6 ("pinctrl: Add support for Meson8b")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90a86d00af1a379255e051a9f446366ffe9fe5b6
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Feb 15 12:16:52 2019 -0800

    net: dsa: bcm_sf2: Do not assume DSA master supports WoL
    
    [ Upstream commit c3152ec4c0691e351f35a2f63347a464b5f35151 ]
    
    We assume in the bcm_sf2 driver that the DSA master network device
    supports ethtool_ops::{get,set}_wol operations, which is not a given.
    Avoid de-referencing potentially non-existent function pointers and
    check them as we should.
    
    Fixes: 96e65d7f3f88 ("net: dsa: bcm_sf2: add support for Wake-on-LAN")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d33f5a0febfa6abe3f4fa0db540e4eb634f4ec5b
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Feb 15 12:16:51 2019 -0800

    net: systemport: Fix reception of BPDUs
    
    [ Upstream commit a40061ea2e39494104602b3048751341bda374a1 ]
    
    SYSTEMPORT has its RXCHK parser block that attempts to validate the
    packet structures, unfortunately setting the L2 header check bit will
    cause Bridge PDUs (BPDUs) to be incorrectly rejected because they look
    like LLC/SNAP packets with a non-IPv4 or non-IPv6 Ethernet Type.
    
    Fixes: 4e8aedfe78c7 ("net: systemport: Turn on offloads by default")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3491857f429200630f4bfc400ff51fc2ed2e5a6c
Author: Anoob Soman <anoob.soman@citrix.com>
Date:   Wed Feb 13 13:21:39 2019 +0800

    scsi: libiscsi: Fix race between iscsi_xmit_task and iscsi_complete_task
    
    [ Upstream commit 79edd00dc6a96644d76b4a1cb97d94d49e026768 ]
    
    When a target sends Check Condition, whilst initiator is busy xmiting
    re-queued data, could lead to race between iscsi_complete_task() and
    iscsi_xmit_task() and eventually crashing with the following kernel
    backtrace.
    
    [3326150.987523] ALERT: BUG: unable to handle kernel NULL pointer dereference at 0000000000000078
    [3326150.987549] ALERT: IP: [<ffffffffa05ce70d>] iscsi_xmit_task+0x2d/0xc0 [libiscsi]
    [3326150.987571] WARN: PGD 569c8067 PUD 569c9067 PMD 0
    [3326150.987582] WARN: Oops: 0002 [#1] SMP
    [3326150.987593] WARN: Modules linked in: tun nfsv3 nfs fscache dm_round_robin
    [3326150.987762] WARN: CPU: 2 PID: 8399 Comm: kworker/u32:1 Tainted: G O 4.4.0+2 #1
    [3326150.987774] WARN: Hardware name: Dell Inc. PowerEdge R720/0W7JN5, BIOS 2.5.4 01/22/2016
    [3326150.987790] WARN: Workqueue: iscsi_q_13 iscsi_xmitworker [libiscsi]
    [3326150.987799] WARN: task: ffff8801d50f3800 ti: ffff8801f5458000 task.ti: ffff8801f5458000
    [3326150.987810] WARN: RIP: e030:[<ffffffffa05ce70d>] [<ffffffffa05ce70d>] iscsi_xmit_task+0x2d/0xc0 [libiscsi]
    [3326150.987825] WARN: RSP: e02b:ffff8801f545bdb0 EFLAGS: 00010246
    [3326150.987831] WARN: RAX: 00000000ffffffc3 RBX: ffff880282d2ab20 RCX: ffff88026b6ac480
    [3326150.987842] WARN: RDX: 0000000000000000 RSI: 00000000fffffe01 RDI: ffff880282d2ab20
    [3326150.987852] WARN: RBP: ffff8801f545bdc8 R08: 0000000000000000 R09: 0000000000000008
    [3326150.987862] WARN: R10: 0000000000000000 R11: 000000000000fe88 R12: 0000000000000000
    [3326150.987872] WARN: R13: ffff880282d2abe8 R14: ffff880282d2abd8 R15: ffff880282d2ac08
    [3326150.987890] WARN: FS: 00007f5a866b4840(0000) GS:ffff88028a640000(0000) knlGS:0000000000000000
    [3326150.987900] WARN: CS: e033 DS: 0000 ES: 0000 CR0: 0000000080050033
    [3326150.987907] WARN: CR2: 0000000000000078 CR3: 0000000070244000 CR4: 0000000000042660
    [3326150.987918] WARN: Stack:
    [3326150.987924] WARN: ffff880282d2ad58 ffff880282d2ab20 ffff880282d2abe8 ffff8801f545be18
    [3326150.987938] WARN: ffffffffa05cea90 ffff880282d2abf8 ffff88026b59cc80 ffff88026b59cc00
    [3326150.987951] WARN: ffff88022acf32c0 ffff880289491800 ffff880255a80800 0000000000000400
    [3326150.987964] WARN: Call Trace:
    [3326150.987975] WARN: [<ffffffffa05cea90>] iscsi_xmitworker+0x2f0/0x360 [libiscsi]
    [3326150.987988] WARN: [<ffffffff8108862c>] process_one_work+0x1fc/0x3b0
    [3326150.987997] WARN: [<ffffffff81088f95>] worker_thread+0x2a5/0x470
    [3326150.988006] WARN: [<ffffffff8159cad8>] ? __schedule+0x648/0x870
    [3326150.988015] WARN: [<ffffffff81088cf0>] ? rescuer_thread+0x300/0x300
    [3326150.988023] WARN: [<ffffffff8108ddf5>] kthread+0xd5/0xe0
    [3326150.988031] WARN: [<ffffffff8108dd20>] ? kthread_stop+0x110/0x110
    [3326150.988040] WARN: [<ffffffff815a0bcf>] ret_from_fork+0x3f/0x70
    [3326150.988048] WARN: [<ffffffff8108dd20>] ? kthread_stop+0x110/0x110
    [3326150.988127] ALERT: RIP [<ffffffffa05ce70d>] iscsi_xmit_task+0x2d/0xc0 [libiscsi]
    [3326150.988138] WARN: RSP <ffff8801f545bdb0>
    [3326150.988144] WARN: CR2: 0000000000000078
    [3326151.020366] WARN: ---[ end trace 1c60974d4678d81b ]---
    
    Commit 6f8830f5bbab ("scsi: libiscsi: add lock around task lists to fix
    list corruption regression") introduced "taskqueuelock" to fix list
    corruption during the race, but this wasn't enough.
    
    Re-setting of conn->task to NULL, could race with iscsi_xmit_task().
    iscsi_complete_task()
    {
        ....
        if (conn->task == task)
            conn->task = NULL;
    }
    
    conn->task in iscsi_xmit_task() could be NULL and so will be task.
    __iscsi_get_task(task) will crash (NullPtr de-ref), trying to access
    refcount.
    
    iscsi_xmit_task()
    {
        struct iscsi_task *task = conn->task;
    
        __iscsi_get_task(task);
    }
    
    This commit will take extra conn->session->back_lock in iscsi_xmit_task()
    to ensure iscsi_xmit_task() waits for iscsi_complete_task(), if
    iscsi_complete_task() wins the race.  If iscsi_xmit_task() wins the race,
    iscsi_xmit_task() increments task->refcount
    (__iscsi_get_task) ensuring iscsi_complete_task() will not iscsi_free_task().
    
    Signed-off-by: Anoob Soman <anoob.soman@citrix.com>
    Signed-off-by: Bob Liu <bob.liu@oracle.com>
    Acked-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 726832821903bdd75ea9a409ba12fa60069a8268
Author: David Howells <dhowells@redhat.com>
Date:   Thu Feb 14 16:20:25 2019 +0000

    keys: Fix dependency loop between construction record and auth key
    
    [ Upstream commit 822ad64d7e46a8e2c8b8a796738d7b657cbb146d ]
    
    In the request_key() upcall mechanism there's a dependency loop by which if
    a key type driver overrides the ->request_key hook and the userspace side
    manages to lose the authorisation key, the auth key and the internal
    construction record (struct key_construction) can keep each other pinned.
    
    Fix this by the following changes:
    
     (1) Killing off the construction record and using the auth key instead.
    
     (2) Including the operation name in the auth key payload and making the
         payload available outside of security/keys/.
    
     (3) The ->request_key hook is given the authkey instead of the cons
         record and operation name.
    
    Changes (2) and (3) allow the auth key to naturally be cleaned up if the
    keyring it is in is destroyed or cleared or the auth key is unlinked.
    
    Fixes: 7ee02a316600 ("keys: Fix dependency loop between construction record and auth key")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fac71ac376345d5eb8a8da645c0a3da7a42dd6b3
Author: David Howells <dhowells@redhat.com>
Date:   Thu Feb 14 16:20:15 2019 +0000

    assoc_array: Fix shortcut creation
    
    [ Upstream commit bb2ba2d75a2d673e76ddaf13a9bd30d6a8b1bb08 ]
    
    Fix the creation of shortcuts for which the length of the index key value
    is an exact multiple of the machine word size.  The problem is that the
    code that blanks off the unused bits of the shortcut value malfunctions if
    the number of bits in the last word equals machine word size.  This is due
    to the "<<" operator being given a shift of zero in this case, and so the
    mask that should be all zeros is all ones instead.  This causes the
    subsequent masking operation to clear everything rather than clearing
    nothing.
    
    Ordinarily, the presence of the hash at the beginning of the tree index key
    makes the issue very hard to test for, but in this case, it was encountered
    due to a development mistake that caused the hash output to be either 0
    (keyring) or 1 (non-keyring) only.  This made it susceptible to the
    keyctl/unlink/valid test in the keyutils package.
    
    The fix is simply to skip the blanking if the shift would be 0.  For
    example, an index key that is 64 bits long would produce a 0 shift and thus
    a 'blank' of all 1s.  This would then be inverted and AND'd onto the
    index_key, incorrectly clearing the entire last word.
    
    Fixes: 3cb989501c26 ("Add a generic associative array implementation.")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84657a1ba9bd5c9f9c94e8d857ae57dcb5abbcce
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Wed Feb 6 18:43:24 2019 +0100

    ARM: 8835/1: dma-mapping: Clear DMA ops on teardown
    
    [ Upstream commit fc67e6f120a388b611d94cc40baf99a5cc56b283 ]
    
    Installing the appropriate non-IOMMU DMA ops in arm_iommu_detch_device()
    serves the case where IOMMU-aware drivers choose to control their own
    mapping but still make DMA API calls, however it also affects the case
    when the arch code itself tears down the mapping upon driver unbinding,
    where the ops now get left in place and can inhibit arch_setup_dma_ops()
    on subsequent re-probe attempts.
    
    Fix the latter case by making sure that arch_teardown_dma_ops() cleans
    up whenever the ops were automatically installed by its counterpart.
    
    Reported-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Fixes: 1874619a7df4 "ARM: dma-mapping: Set proper DMA ops in arm_iommu_detach_device()"
    Tested-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Tested-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 978e0388c22b910d4c07639e199cd4c2c9787648
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Thu Feb 7 13:33:21 2019 -0700

    af_key: unconditionally clone on broadcast
    
    [ Upstream commit fc2d5cfdcfe2ab76b263d91429caa22451123085 ]
    
    Attempting to avoid cloning the skb when broadcasting by inflating
    the refcount with sock_hold/sock_put while under RCU lock is dangerous
    and violates RCU principles. It leads to subtle race conditions when
    attempting to free the SKB, as we may reference sockets that have
    already been freed by the stack.
    
    Unable to handle kernel paging request at virtual address 6b6b6b6b6b6c4b
    [006b6b6b6b6b6c4b] address between user and kernel address ranges
    Internal error: Oops: 96000004 [#1] PREEMPT SMP
    task: fffffff78f65b380 task.stack: ffffff8049a88000
    pc : sock_rfree+0x38/0x6c
    lr : skb_release_head_state+0x6c/0xcc
    Process repro (pid: 7117, stack limit = 0xffffff8049a88000)
    Call trace:
            sock_rfree+0x38/0x6c
            skb_release_head_state+0x6c/0xcc
            skb_release_all+0x1c/0x38
            __kfree_skb+0x1c/0x30
            kfree_skb+0xd0/0xf4
            pfkey_broadcast+0x14c/0x18c
            pfkey_sendmsg+0x1d8/0x408
            sock_sendmsg+0x44/0x60
            ___sys_sendmsg+0x1d0/0x2a8
            __sys_sendmsg+0x64/0xb4
            SyS_sendmsg+0x34/0x4c
            el0_svc_naked+0x34/0x38
    Kernel panic - not syncing: Fatal exception
    
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7c68a1b9a16e861d58c634c8462f6a72e317366
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Sun Feb 10 12:52:35 2019 -0800

    bpf: fix lockdep false positive in stackmap
    
    [ Upstream commit 3defaf2f15b2bfd86c6664181ac009e91985f8ac ]
    
    Lockdep warns about false positive:
    [   11.211460] ------------[ cut here ]------------
    [   11.211936] DEBUG_LOCKS_WARN_ON(depth <= 0)
    [   11.211985] WARNING: CPU: 0 PID: 141 at ../kernel/locking/lockdep.c:3592 lock_release+0x1ad/0x280
    [   11.213134] Modules linked in:
    [   11.214954] RIP: 0010:lock_release+0x1ad/0x280
    [   11.223508] Call Trace:
    [   11.223705]  <IRQ>
    [   11.223874]  ? __local_bh_enable+0x7a/0x80
    [   11.224199]  up_read+0x1c/0xa0
    [   11.224446]  do_up_read+0x12/0x20
    [   11.224713]  irq_work_run_list+0x43/0x70
    [   11.225030]  irq_work_run+0x26/0x50
    [   11.225310]  smp_irq_work_interrupt+0x57/0x1f0
    [   11.225662]  irq_work_interrupt+0xf/0x20
    
    since rw_semaphore is released in a different task vs task that locked the sema.
    It is expected behavior.
    Fix the warning with up_read_non_owner() and rwsem_release() annotation.
    
    Fixes: bae77c5eb5b2 ("bpf: enable stackmap with build_id in nmi context")
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 413e398520823d1a583bd35053e8472764310795
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Feb 7 14:54:16 2019 -0500

    bpf: only adjust gso_size on bytestream protocols
    
    [ Upstream commit b90efd2258749e04e1b3f71ef0d716f2ac2337e0 ]
    
    bpf_skb_change_proto and bpf_skb_adjust_room change skb header length.
    For GSO packets they adjust gso_size to maintain the same MTU.
    
    The gso size can only be safely adjusted on bytestream protocols.
    Commit d02f51cbcf12 ("bpf: fix bpf_skb_adjust_net/bpf_skb_proto_xlat
    to deal with gso sctp skbs") excluded SKB_GSO_SCTP.
    
    Since then type SKB_GSO_UDP_L4 has been added, whose contents are one
    gso_size unit per datagram. Also exclude these.
    
    Move from a blacklist to a whitelist check to future proof against
    additional such new GSO types, e.g., for fraglist based GRO.
    
    Fixes: bec1f6f69736 ("udp: generate gso with UDP_SEGMENT")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da3495301cda16f72bf5957c9ad2bf3993936f7e
Author: Dietmar Eggemann <dietmar.eggemann@arm.com>
Date:   Mon Jan 21 14:42:42 2019 +0100

    ARM: 8824/1: fix a migrating irq bug when hotplug cpu
    
    [ Upstream commit 1b5ba350784242eb1f899bcffd95d2c7cff61e84 ]
    
    Arm TC2 fails cpu hotplug stress test.
    
    This issue was tracked down to a missing copy of the new affinity
    cpumask for the vexpress-spc interrupt into struct
    irq_common_data.affinity when the interrupt is migrated in
    migrate_one_irq().
    
    Fix it by replacing the arm specific hotplug cpu migration with the
    generic irq code.
    
    This is the counterpart implementation to commit 217d453d473c ("arm64:
    fix a migrating irq bug when hotplug cpu").
    
    Tested with cpu hotplug stress test on Arm TC2 (multi_v7_defconfig plus
    CONFIG_ARM_BIG_LITTLE_CPUFREQ=y and CONFIG_ARM_VEXPRESS_SPC_CPUFREQ=y).
    The vexpress-spc interrupt (irq=22) on this board is affine to CPU0.
    Its affinity cpumask now changes correctly e.g. from 0 to 1-4 when
    CPU0 is hotplugged out.
    
    Suggested-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b92eaed36c4b312db10ae71415209f25ad8e2341
Author: Martin Willi <martin@strongswan.org>
Date:   Mon Jan 28 09:35:35 2019 +0100

    esp: Skip TX bytes accounting when sending from a request socket
    
    [ Upstream commit 09db51241118aeb06e1c8cd393b45879ce099b36 ]
    
    On ESP output, sk_wmem_alloc is incremented for the added padding if a
    socket is associated to the skb. When replying with TCP SYNACKs over
    IPsec, the associated sk is a casted request socket, only. Increasing
    sk_wmem_alloc on a request socket results in a write at an arbitrary
    struct offset. In the best case, this produces the following WARNING:
    
    WARNING: CPU: 1 PID: 0 at lib/refcount.c:102 esp_output_head+0x2e4/0x308 [esp4]
    refcount_t: addition on 0; use-after-free.
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.0.0-rc3 #2
    Hardware name: Marvell Armada 380/385 (Device Tree)
    [...]
    [<bf0ff354>] (esp_output_head [esp4]) from [<bf1006a4>] (esp_output+0xb8/0x180 [esp4])
    [<bf1006a4>] (esp_output [esp4]) from [<c05dee64>] (xfrm_output_resume+0x558/0x664)
    [<c05dee64>] (xfrm_output_resume) from [<c05d07b0>] (xfrm4_output+0x44/0xc4)
    [<c05d07b0>] (xfrm4_output) from [<c05956bc>] (tcp_v4_send_synack+0xa8/0xe8)
    [<c05956bc>] (tcp_v4_send_synack) from [<c0586ad8>] (tcp_conn_request+0x7f4/0x948)
    [<c0586ad8>] (tcp_conn_request) from [<c058c404>] (tcp_rcv_state_process+0x2a0/0xe64)
    [<c058c404>] (tcp_rcv_state_process) from [<c05958ac>] (tcp_v4_do_rcv+0xf0/0x1f4)
    [<c05958ac>] (tcp_v4_do_rcv) from [<c0598a4c>] (tcp_v4_rcv+0xdb8/0xe20)
    [<c0598a4c>] (tcp_v4_rcv) from [<c056eb74>] (ip_protocol_deliver_rcu+0x2c/0x2dc)
    [<c056eb74>] (ip_protocol_deliver_rcu) from [<c056ee6c>] (ip_local_deliver_finish+0x48/0x54)
    [<c056ee6c>] (ip_local_deliver_finish) from [<c056eecc>] (ip_local_deliver+0x54/0xec)
    [<c056eecc>] (ip_local_deliver) from [<c056efac>] (ip_rcv+0x48/0xb8)
    [<c056efac>] (ip_rcv) from [<c0519c2c>] (__netif_receive_skb_one_core+0x50/0x6c)
    [...]
    
    The issue triggers only when not using TCP syncookies, as for syncookies
    no socket is associated.
    
    Fixes: cac2661c53f3 ("esp4: Avoid skb_cow_data whenever possible")
    Fixes: 03e2a30f6a27 ("esp6: Avoid skb_cow_data whenever possible")
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f3b4f96861913008f96ceaedabad7605b164345
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Wed Jan 23 00:59:11 2019 +0000

    clk: sunxi: A31: Fix wrong AHB gate number
    
    [ Upstream commit ee0b27a3a4da0b0ed2318aa092f8856896e9450b ]
    
    According to the manual the gate clock for MMC3 is at bit 11, and NAND1
    is controlled by bit 12.
    
    Fix the gate bit definitions in the clock driver.
    
    Fixes: c6e6c96d8fa6 ("clk: sunxi-ng: Add A31/A31s clocks")
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cacf3c0d82889b7628e98952bf1207aff398389a
Author: Eugene Loh <eugene.loh@oracle.com>
Date:   Thu Jan 17 14:46:00 2019 -0800

    kallsyms: Handle too long symbols in kallsyms.c
    
    [ Upstream commit 6db2983cd8064808141ccefd75218f5b4345ffae ]
    
    When checking for symbols with excessively long names,
    account for null terminating character.
    
    Fixes: f3462aa952cf ("Kbuild: Handle longer symbols in kallsyms.c")
    Signed-off-by: Eugene Loh <eugene.loh@oracle.com>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 980f44f8dd8a1396d3e64f8e21f5d329a018e6d5
Author: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
Date:   Tue Jan 22 09:16:19 2019 +0100

    clk: sunxi-ng: v3s: Fix TCON reset de-assert bit
    
    [ Upstream commit 5c59801f7018acba11b12de59017a3fcdcf7421d ]
    
    According to the datasheet and the reference code from Allwinner, the
    bit used to de-assert the TCON reset is bit 4, not bit 3.
    
    Fix it in the V3s CCU driver.
    
    Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5050f03ff0b12cdf02811318b425e5ddfe85b631
Author: Gabriel Fernandez <gabriel.fernandez@st.com>
Date:   Sat Feb 16 21:10:16 2019 -0800

    Input: st-keyscan - fix potential zalloc NULL dereference
    
    [ Upstream commit 2439d37e1bf8a34d437573c086572abe0f3f1b15 ]
    
    This patch fixes the following static checker warning:
    
    drivers/input/keyboard/st-keyscan.c:156 keyscan_probe()
    error: potential zalloc NULL dereference: 'keypad_data->input_dev'
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Gabriel Fernandez <gabriel.fernandez@st.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf26feccf99c0ab036a0e7ffb94634dd905096a5
Author: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
Date:   Sat Feb 9 00:38:45 2019 +0100

    auxdisplay: ht16k33: fix potential user-after-free on module unload
    
    [ Upstream commit 69ef9bc54715fb1cb7786ada15774e469e822209 ]
    
    On module unload/remove, we need to ensure that work does not run
    after we have freed resources. Concretely, cancel_delayed_work()
    may return while the callback function is still running.
    
    From kernel/workqueue.c:
    
        The work callback function may still be running on return,
        unless it returns true and the work doesn't re-arm itself.
        Explicitly flush or use cancel_delayed_work_sync() to wait on it.
    
    Link: https://lore.kernel.org/lkml/20190204220952.30761-1-TheSven73@googlemail.com/
    Reported-by: Sven Van Asbroeck <thesven73@gmail.com>
    Reviewed-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Acked-by: Robin van der Gracht <robin@protonic.nl>
    Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e770d996ea4d0646a4b1baf2be8bb56d649a9ff
Author: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
Date:   Thu Dec 27 16:42:25 2018 +0100

    i2c: bcm2835: Clear current buffer pointers and counts after a transfer
    
    [ Upstream commit f275a4659484716259cc46268d9043424e51cf0f ]
    
    The driver's interrupt handler checks whether a message is currently
    being handled with the curr_msg pointer. When it is NULL, the interrupt
    is considered to be unexpected. Similarly, the i2c_start_transfer
    routine checks for the remaining number of messages to handle in
    num_msgs.
    
    However, these values are never cleared and always keep the message and
    number relevant to the latest transfer (which might be done already and
    the underlying message memory might have been freed).
    
    When an unexpected interrupt hits with the DONE bit set, the isr will
    then try to access the flags field of the curr_msg structure, leading
    to a fatal page fault.
    
    The msg_buf and msg_buf_remaining fields are also never cleared at the
    end of the transfer, which can lead to similar pitfalls.
    
    Fix these issues by introducing a cleanup function and always calling
    it after a transfer is finished.
    
    Fixes: e2474541032d ("i2c: bcm2835: Fix hang for writing messages larger than 16 bytes")
    Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Acked-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9ce9aea3f63ba11921aae156c9e57f2e0ba0dee
Author: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date:   Tue Feb 5 16:42:53 2019 +0530

    i2c: cadence: Fix the hold bit setting
    
    [ Upstream commit d358def706880defa4c9e87381c5bf086a97d5f9 ]
    
    In case the hold bit is not needed we are carrying the old values.
    Fix the same by resetting the bit when not needed.
    
    Fixes the sporadic i2c bus lockups on National Instruments
    Zynq-based devices.
    
    Fixes: df8eb5691c48 ("i2c: Add driver for Cadence I2C controller")
    Reported-by: Kyle Roeschley <kyle.roeschley@ni.com>
    Acked-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
    Tested-by: Kyle Roeschley <kyle.roeschley@ni.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f622a7d512c567d24cfde1059002ffbb0bf1cb0
Author: Huang Zijiang <huang.zijiang@zte.com.cn>
Date:   Thu Feb 14 14:41:45 2019 +0800

    net: hns: Fix object reference leaks in hns_dsaf_roce_reset()
    
    [ Upstream commit c969c6e7ab8cb42b5c787c567615474fdbad9d6a ]
    
    The of_find_device_by_node() takes a reference to the underlying device
    structure, we should release that reference.
    
    Signed-off-by: Huang Zijiang <huang.zijiang@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33e83ea302c0b50c16b932c95334632654392094
Author: Jann Horn <jannh@google.com>
Date:   Wed Feb 13 22:45:59 2019 +0100

    mm: page_alloc: fix ref bias in page_frag_alloc() for 1-byte allocs
    
    [ Upstream commit 2c2ade81741c66082f8211f0b96cf509cc4c0218 ]
    
    The basic idea behind ->pagecnt_bias is: If we pre-allocate the maximum
    number of references that we might need to create in the fastpath later,
    the bump-allocation fastpath only has to modify the non-atomic bias value
    that tracks the number of extra references we hold instead of the atomic
    refcount. The maximum number of allocations we can serve (under the
    assumption that no allocation is made with size 0) is nc->size, so that's
    the bias used.
    
    However, even when all memory in the allocation has been given away, a
    reference to the page is still held; and in the `offset < 0` slowpath, the
    page may be reused if everyone else has dropped their references.
    This means that the necessary number of references is actually
    `nc->size+1`.
    
    Luckily, from a quick grep, it looks like the only path that can call
    page_frag_alloc(fragsz=1) is TAP with the IFF_NAPI_FRAGS flag, which
    requires CAP_NET_ADMIN in the init namespace and is only intended to be
    used for kernel testing and fuzzing.
    
    To test for this issue, put a `WARN_ON(page_ref_count(page) == 0)` in the
    `offset < 0` path, below the virt_to_page() call, and then repeatedly call
    writev() on a TAP device with IFF_TAP|IFF_NO_PI|IFF_NAPI_FRAGS|IFF_NAPI,
    with a vector consisting of 15 elements containing 1 byte each.
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9503ade1bf7a51fc0fc02ab400fdbc0a131244e
Author: Rajneesh Bhardwaj <rajneesh.bhardwaj@linux.intel.com>
Date:   Thu Feb 14 17:27:08 2019 +0530

    x86/CPU: Add Icelake model number
    
    [ Upstream commit 8cd8f0ce0d6aafe661cb3d6781c8b82bc696c04d ]
    
    Add the CPUID model number of Icelake (ICL) mobile processors to the
    Intel family list. Icelake U/Y series uses model number 0x7E.
    
    Signed-off-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: "David E. Box" <david.e.box@intel.com>
    Cc: dvhart@infradead.org
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: platform-driver-x86@vger.kernel.org
    Cc: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190214115712.19642-2-rajneesh.bhardwaj@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 388f3adb2729ca6ce74a9147fe5cc5c12f36018b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 13 11:23:04 2019 +0300

    net: dsa: bcm_sf2: potential array overflow in bcm_sf2_sw_suspend()
    
    [ Upstream commit 8d6ea932856c7087ce8c3d0e79494b7d5386f962 ]
    
    The value of ->num_ports comes from bcm_sf2_sw_probe() and it is less
    than or equal to DSA_MAX_PORTS.  The ds->ports[] array is used inside
    the dsa_is_user_port() and dsa_is_cpu_port() functions.  The ds->ports[]
    array is allocated in dsa_switch_alloc() and it has ds->num_ports
    elements so this leads to a static checker warning about a potential out
    of bounds read.
    
    Fixes: 8cfa94984c9c ("net: dsa: bcm_sf2: add suspend/resume callbacks")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ab49fd5b0728778500fa9c88e2dc174651bdd14
Author: Bill Kuzeja <William.Kuzeja@stratus.com>
Date:   Tue Feb 12 09:29:50 2019 -0500

    scsi: qla2xxx: Fix panic from use after free in qla2x00_async_tm_cmd
    
    [ Upstream commit 388a49959ee4e4e99f160241d9599efa62cd4299 ]
    
    In qla2x00_async_tm_cmd, we reference off sp after it has been freed.  This
    caused a panic on a system running a slub debug kernel. Since fcport is
    passed in anyways, just use that instead.
    
    Signed-off-by: Bill Kuzeja <william.kuzeja@stratus.com>
    Acked-by: Giridhar Malavali <gmalavali@marvell.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53dcaeeff14577c80518ca7f144a462dfe689ada
Author: Qian Cai <cai@lca.pw>
Date:   Tue Feb 12 15:36:03 2019 -0800

    Revert "mm: use early_pfn_to_nid in page_ext_init"
    
    [ Upstream commit 2f1ee0913ce58efe7f18fbd518bd54c598559b89 ]
    
    This reverts commit fe53ca54270a ("mm: use early_pfn_to_nid in
    page_ext_init").
    
    When booting a system with "page_owner=on",
    
    start_kernel
      page_ext_init
        invoke_init_callbacks
          init_section_page_ext
            init_page_owner
              init_early_allocated_pages
                init_zones_in_node
                  init_pages_in_zone
                    lookup_page_ext
                      page_to_nid
    
    The issue here is that page_to_nid() will not work since some page flags
    have no node information until later in page_alloc_init_late() due to
    DEFERRED_STRUCT_PAGE_INIT.  Hence, it could trigger an out-of-bounds
    access with an invalid nid.
    
      UBSAN: Undefined behaviour in ./include/linux/mm.h:1104:50
      index 7 is out of range for type 'zone [5]'
    
    Also, kernel will panic since flags were poisoned earlier with,
    
    CONFIG_DEBUG_VM_PGFLAGS=y
    CONFIG_NODE_NOT_IN_PAGE_FLAGS=n
    
    start_kernel
      setup_arch
        pagetable_init
          paging_init
            sparse_init
              sparse_init_nid
                memblock_alloc_try_nid_raw
    
    It did not handle it well in init_pages_in_zone() which ends up calling
    page_to_nid().
    
      page:ffffea0004200000 is uninitialized and poisoned
      raw: ffffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffff
      raw: ffffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffff
      page dumped because: VM_BUG_ON_PAGE(PagePoisoned(p))
      page_owner info is not active (free page?)
      kernel BUG at include/linux/mm.h:990!
      RIP: 0010:init_page_owner+0x486/0x520
    
    This means that assumptions behind commit fe53ca54270a ("mm: use
    early_pfn_to_nid in page_ext_init") are incomplete.  Therefore, revert
    the commit for now.  A proper way to move the page_owner initialization
    to sooner is to hook into memmap initialization.
    
    Link: http://lkml.kernel.org/r/20190115202812.75820-1-cai@lca.pw
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Michal Hocko <mhocko@kernel.org>
    Cc: Pasha Tatashin <Pavel.Tatashin@microsoft.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Yang Shi <yang.shi@linaro.org>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b1a7762e0dac5db42a003009fdcb425f10baa07
Author: Yu Zhao <yuzhao@google.com>
Date:   Tue Feb 12 15:35:58 2019 -0800

    mm/gup: fix gup_pmd_range() for dax
    
    [ Upstream commit 414fd080d125408cb15d04ff4907e1dd8145c8c7 ]
    
    For dax pmd, pmd_trans_huge() returns false but pmd_huge() returns true
    on x86.  So the function works as long as hugetlb is configured.
    However, dax doesn't depend on hugetlb.
    
    Link: http://lkml.kernel.org/r/20190111034033.601-1-yuzhao@google.com
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Huang Ying <ying.huang@intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Keith Busch <keith.busch@intel.com>
    Cc: "Michael S . Tsirkin" <mst@redhat.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Wei Yang <richard.weiyang@gmail.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c023d86b3645fc2671bf2a7677fd208744edbb1
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Wed Feb 6 06:09:43 2019 -0500

    NFS: Don't use page_file_mapping after removing the page
    
    [ Upstream commit d2ceb7e57086750ea6198a31fd942d98099a0786 ]
    
    If nfs_page_async_flush() removes the page from the mapping, then we can't
    use page_file_mapping() on it as nfs_updatepate() is wont to do when
    receiving an error.  Instead, push the mapping to the stack before the page
    is possibly truncated.
    
    Fixes: 8fc75bed96bb ("NFS: Fix up return value on fatal errors in nfs_page_async_flush()")
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d84bc704b91ed915677d5506ba32514f2b62f09c
Author: Nicolas Morey-Chaisemartin <nmoreychaisemartin@suse.com>
Date:   Tue Feb 5 18:21:02 2019 +0100

    xprtrdma: Make sure Send CQ is allocated on an existing compvec
    
    [ Upstream commit a4cb5bdb754afe21f3e9e7164213e8600cf69427 ]
    
    Make sure the device has at least 2 completion vectors
    before allocating to compvec#1
    
    Fixes: a4699f5647f3 (xprtrdma: Put Send CQ in IB_POLL_WORKQUEUE mode)
    Signed-off-by: Nicolas Morey-Chaisemartin <nmoreychaisemartin@suse.com>
    Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e01f2b0821ea9b68a485fdb94f3e86e6a40f913c
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Tue Jan 29 16:34:04 2019 +0800

    floppy: check_events callback should not return a negative number
    
    [ Upstream commit 96d7cb932e826219ec41ac02e5af037ffae6098c ]
    
    floppy_check_events() is supposed to return bit flags to say which
    events occured. We should return zero to say that no event flags are
    set.  Only BIT(0) and BIT(1) are used in the caller. And .check_events
    interface also expect to return an unsigned int value.
    
    However, after commit a0c80efe5956, it may return -EINTR (-4u).
    Here, both BIT(0) and BIT(1) are cleared. So this patch shouldn't
    affect runtime, but it obviously is still worth fixing.
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: a0c80efe5956 ("floppy: fix lock_fdc() signal handling")
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ca2ef674d742b4283908f5df8ba523d38a58d91
Author: Andrea Claudi <aclaudi@redhat.com>
Date:   Mon Feb 11 16:14:39 2019 +0100

    ipvs: fix dependency on nf_defrag_ipv6
    
    [ Upstream commit 098e13f5b21d3398065fce8780f07a3ef62f4812 ]
    
    ipvs relies on nf_defrag_ipv6 module to manage IPv6 fragmentation,
    but lacks proper Kconfig dependencies and does not explicitly
    request defrag features.
    
    As a result, if netfilter hooks are not loaded, when IPv6 fragmented
    packet are handled by ipvs only the first fragment makes through.
    
    Fix it properly declaring the dependency on Kconfig and registering
    netfilter hooks on ip_vs_add_service() and ip_vs_new_dest().
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Andrea Claudi <aclaudi@redhat.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Acked-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29452f665c2f6805d8e28dd3aaf17a5bba44c702
Author: Jianchao Wang <jianchao.w.wang@oracle.com>
Date:   Tue Feb 12 09:56:25 2019 +0800

    blk-mq: insert rq with DONTPREP to hctx dispatch list when requeue
    
    [ Upstream commit aef1897cd36dcf5e296f1d2bae7e0d268561b685 ]
    
    When requeue, if RQF_DONTPREP, rq has contained some driver
    specific data, so insert it to hctx dispatch list to avoid any
    merge. Take scsi as example, here is the trace event log (no
    io scheduler, because RQF_STARTED would prevent merging),
    
       kworker/0:1H-339   [000] ...1  2037.209289: block_rq_insert: 8,0 R 4096 () 32768 + 8 [kworker/0:1H]
    scsi_inert_test-1987  [000] ....  2037.220465: block_bio_queue: 8,0 R 32776 + 8 [scsi_inert_test]
    scsi_inert_test-1987  [000] ...2  2037.220466: block_bio_backmerge: 8,0 R 32776 + 8 [scsi_inert_test]
       kworker/0:1H-339   [000] ....  2047.220913: block_rq_issue: 8,0 R 8192 () 32768 + 16 [kworker/0:1H]
    scsi_inert_test-1996  [000] ..s1  2047.221007: block_rq_complete: 8,0 R () 32768 + 8 [0]
    scsi_inert_test-1996  [000] .Ns1  2047.221045: block_rq_requeue: 8,0 R () 32776 + 8 [0]
       kworker/0:1H-339   [000] ...1  2047.221054: block_rq_insert: 8,0 R 4096 () 32776 + 8 [kworker/0:1H]
       kworker/0:1H-339   [000] ...1  2047.221056: block_rq_issue: 8,0 R 4096 () 32776 + 8 [kworker/0:1H]
    scsi_inert_test-1986  [000] ..s1  2047.221119: block_rq_complete: 8,0 R () 32776 + 8 [0]
    
    (32768 + 8) was requeued by scsi_queue_insert and had RQF_DONTPREP.
    Then it was merged with (32776 + 8) and issued. Due to RQF_DONTPREP,
    the sdb only contained the part of (32768 + 8), then only that part
    was completed. The lucky thing was that scsi_io_completion detected
    it and requeued the remaining part. So we didn't get corrupted data.
    However, the requeue of (32776 + 8) is not expected.
    
    Suggested-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jianchao Wang <jianchao.w.wang@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0e6b0d7e09cac5db40a4feab6b0a2a1897eecc8
Author: Francesco Ruggeri <fruggeri@arista.com>
Date:   Sun Feb 10 11:58:29 2019 -0800

    netfilter: compat: initialize all fields in xt_init
    
    [ Upstream commit 8d29d16d21342a0c86405d46de0c4ac5daf1760f ]
    
    If a non zero value happens to be in xt[NFPROTO_BRIDGE].cur at init
    time, the following panic can be caused by running
    
    % ebtables -t broute -F BROUTING
    
    from a 32-bit user level on a 64-bit kernel. This patch replaces
    kmalloc_array with kcalloc when allocating xt.
    
    [  474.680846] BUG: unable to handle kernel paging request at 0000000009600920
    [  474.687869] PGD 2037006067 P4D 2037006067 PUD 2038938067 PMD 0
    [  474.693838] Oops: 0000 [#1] SMP
    [  474.697055] CPU: 9 PID: 4662 Comm: ebtables Kdump: loaded Not tainted 4.19.17-11302235.AroraKernelnext.fc18.x86_64 #1
    [  474.707721] Hardware name: Supermicro X9DRT/X9DRT, BIOS 3.0 06/28/2013
    [  474.714313] RIP: 0010:xt_compat_calc_jump+0x2f/0x63 [x_tables]
    [  474.720201] Code: 40 0f b6 ff 55 31 c0 48 6b ff 70 48 03 3d dc 45 00 00 48 89 e5 8b 4f 6c 4c 8b 47 60 ff c9 39 c8 7f 2f 8d 14 08 d1 fa 48 63 fa <41> 39 34 f8 4c 8d 0c fd 00 00 00 00 73 05 8d 42 01 eb e1 76 05 8d
    [  474.739023] RSP: 0018:ffffc9000943fc58 EFLAGS: 00010207
    [  474.744296] RAX: 0000000000000000 RBX: ffffc90006465000 RCX: 0000000002580249
    [  474.751485] RDX: 00000000012c0124 RSI: fffffffff7be17e9 RDI: 00000000012c0124
    [  474.758670] RBP: ffffc9000943fc58 R08: 0000000000000000 R09: ffffffff8117cf8f
    [  474.765855] R10: ffffc90006477000 R11: 0000000000000000 R12: 0000000000000001
    [  474.773048] R13: 0000000000000000 R14: ffffc9000943fcb8 R15: ffffc9000943fcb8
    [  474.780234] FS:  0000000000000000(0000) GS:ffff88a03f840000(0063) knlGS:00000000f7ac7700
    [  474.788612] CS:  0010 DS: 002b ES: 002b CR0: 0000000080050033
    [  474.794632] CR2: 0000000009600920 CR3: 0000002037422006 CR4: 00000000000606e0
    [  474.802052] Call Trace:
    [  474.804789]  compat_do_replace+0x1fb/0x2a3 [ebtables]
    [  474.810105]  compat_do_ebt_set_ctl+0x69/0xe6 [ebtables]
    [  474.815605]  ? try_module_get+0x37/0x42
    [  474.819716]  compat_nf_setsockopt+0x4f/0x6d
    [  474.824172]  compat_ip_setsockopt+0x7e/0x8c
    [  474.828641]  compat_raw_setsockopt+0x16/0x3a
    [  474.833220]  compat_sock_common_setsockopt+0x1d/0x24
    [  474.838458]  __compat_sys_setsockopt+0x17e/0x1b1
    [  474.843343]  ? __check_object_size+0x76/0x19a
    [  474.847960]  __ia32_compat_sys_socketcall+0x1cb/0x25b
    [  474.853276]  do_fast_syscall_32+0xaf/0xf6
    [  474.857548]  entry_SYSENTER_compat+0x6b/0x7a
    
    Signed-off-by: Francesco Ruggeri <fruggeri@arista.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5a244451145dada85954f8c2e82adca0d40a2a6
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Wed Feb 6 13:17:21 2019 +0200

    mac80211: Fix Tx aggregation session tear down with ITXQs
    
    [ Upstream commit 6157ca0d6bfe437691b1e98a62e2efe12b6714da ]
    
    When mac80211 requests the low level driver to stop an ongoing
    Tx aggregation, the low level driver is expected to call
    ieee80211_stop_tx_ba_cb_irqsafe() to indicate that it is ready
    to stop the session. The callback in turn schedules a worker
    to complete the session tear down, which in turn also handles
    the relevant state for the intermediate Tx queue.
    
    However, as this flow in asynchronous, the intermediate queue
    should be stopped and not continue servicing frames, as in
    such a case frames that are dequeued would be marked as part
    of an aggregation, although the aggregation is already been
    stopped.
    
    Fix this by stopping the intermediate Tx queue, before
    calling the low level driver to stop the Tx aggregation.
    
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bff33ba4f9ca12110a35da806c2a4a21a6e90cf1
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Feb 6 13:17:12 2019 +0200

    mac80211: call drv_ibss_join() on restart
    
    [ Upstream commit 4926b51bfaa6d36bd6f398fb7698679d3962e19d ]
    
    If a driver does any significant activity in its ibss_join method,
    then it will very well expect that to be called during restart,
    before any stations are added. Do that.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 134891e124dac25020a234fd376e4117d05922e1
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Thu Feb 7 14:39:40 2019 -0800

    Input: matrix_keypad - use flush_delayed_work()
    
    [ Upstream commit a342083abe576db43594a32d458a61fa81f7cb32 ]
    
    We should be using flush_delayed_work() instead of flush_work() in
    matrix_keypad_stop() to ensure that we are not missing work that is
    scheduled but not yet put in the workqueue (i.e. its delay timer has not
    expired yet).
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e91dc2092f7f056e08a3ca617e38e30413cc610f
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Thu Feb 7 14:22:42 2019 -0800

    Input: ps2-gpio - flush TX work when closing port
    
    [ Upstream commit 33a841ce5cef4ca6c18ad333248b6d273f54c839 ]
    
    To ensure that TX work is not running after serio port has been torn down,
    let's flush it when closing the port.
    
    Reported-by: Sven Van Asbroeck <thesven73@gmail.com>
    Acked-by: Danilo Krummrich <danilokrummrich@dk-develop.de>
    Reviewed-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fe714b750cb8c8be5521548a208f623a7d2b51b
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Feb 5 13:52:26 2019 -0800

    Input: cap11xx - switch to using set_brightness_blocking()
    
    [ Upstream commit 628442880af8c201d307a45f3862a7a17df8a189 ]
    
    Updating LED state requires access to regmap and therefore we may sleep,
    so we could not do that directly form set_brightness() method.
    Historically we used private work to adjust the brightness, but with the
    introduction of set_brightness_blocking() we no longer need it.
    
    As a bonus, not having our own work item means we do not have
    use-after-free issue as we neglected to cancel outstanding work on
    driver unbind.
    
    Reported-by: Sven Van Asbroeck <thesven73@gmail.com>
    Reviewed-by: Sven Van Asbroeck <TheSven73@googlemail.com>
    Acked-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f49f7007de5933e02228909a7ee95d71e5a44bc8
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Dec 12 11:49:47 2018 +0000

    ARM: OMAP2+: fix lack of timer interrupts on CPU1 after hotplug
    
    [ Upstream commit 50d6b3cf9403879911e06d69c7ef41e43f8f7b4b ]
    
    If we have a kernel configured for periodic timer interrupts, and we
    have cpuidle enabled, then we end up with CPU1 losing timer interupts
    after a hotplug.
    
    This can manifest itself in RCU stall warnings, or userspace becoming
    unresponsive.
    
    The problem is that the kernel initially wants to use the TWD timer
    for interrupts, but the TWD loses context when we enter the C3 cpuidle
    state.  Nothing reprograms the TWD after idle.
    
    We have solved this in the past by switching to broadcast timer ticks,
    and cpuidle44xx switches to that mode at boot time.  However, there is
    nothing to switch from periodic mode local timers after a hotplug
    operation.
    
    We call tick_broadcast_enter() in omap_enter_idle_coupled(), which one
    would expect would take care of the issue, but internally this only
    deals with one-shot local timers - tick_broadcast_enable() on the other
    hand only deals with periodic local timers.  So, we need to call both.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    [tony@atomide.com: just standardized the subject line]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f07d76481d575ec684ac583c2dc9be5c878149b
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Thu Feb 7 15:20:41 2019 +0100

    ASoC: samsung: Prevent clk_get_rate() calls in atomic context
    
    [ Upstream commit 860b454c2c0cbda6892954f5cdbbb48931b3c8db ]
    
    This patch moves clk_get_rate() call from trigger() to hw_params()
    callback to avoid calling sleeping clk API from atomic context
    and prevent deadlock as indicated below.
    
    Before this change clk_get_rate() was being called with same
    spinlock held as the one passed to the clk API when registering
    clocks exposed by the I2S driver.
    
    [   82.109780] BUG: sleeping function called from invalid context at kernel/locking/mutex.c:908
    [   82.117009] in_atomic(): 1, irqs_disabled(): 128, pid: 1554, name: speaker-test
    [   82.124235] 3 locks held by speaker-test/1554:
    [   82.128653]  #0: cc8c5328 (snd_pcm_link_rwlock){...-}, at: snd_pcm_stream_lock_irq+0x20/0x38
    [   82.137058]  #1: ec9eda17 (&(&substream->self_group.lock)->rlock){..-.}, at: snd_pcm_ioctl+0x900/0x1268
    [   82.146417]  #2: 6ac279bf (&(&pri_dai->spinlock)->rlock){..-.}, at: i2s_trigger+0x64/0x6d4
    [   82.154650] irq event stamp: 8144
    [   82.157949] hardirqs last  enabled at (8143): [<c0a0f574>] _raw_read_unlock_irq+0x24/0x5c
    [   82.166089] hardirqs last disabled at (8144): [<c0a0f6a8>] _raw_read_lock_irq+0x18/0x58
    [   82.174063] softirqs last  enabled at (8004): [<c01024e4>] __do_softirq+0x3a4/0x66c
    [   82.181688] softirqs last disabled at (7997): [<c012d730>] irq_exit+0x140/0x168
    [   82.188964] Preemption disabled at:
    [   82.188967] [<00000000>]   (null)
    [   82.195728] CPU: 6 PID: 1554 Comm: speaker-test Not tainted 5.0.0-rc5-00192-ga6e6caca8f03 #191
    [   82.204302] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   82.210376] [<c0111a54>] (unwind_backtrace) from [<c010d8f4>] (show_stack+0x10/0x14)
    [   82.218084] [<c010d8f4>] (show_stack) from [<c09ef004>] (dump_stack+0x90/0xc8)
    [   82.225278] [<c09ef004>] (dump_stack) from [<c0152980>] (___might_sleep+0x22c/0x2c8)
    [   82.232990] [<c0152980>] (___might_sleep) from [<c0a0a2e4>] (__mutex_lock+0x28/0xa3c)
    [   82.240788] [<c0a0a2e4>] (__mutex_lock) from [<c0a0ad80>] (mutex_lock_nested+0x1c/0x24)
    [   82.248763] [<c0a0ad80>] (mutex_lock_nested) from [<c04923dc>] (clk_prepare_lock+0x78/0xec)
    [   82.257079] [<c04923dc>] (clk_prepare_lock) from [<c049538c>] (clk_core_get_rate+0xc/0x5c)
    [   82.265309] [<c049538c>] (clk_core_get_rate) from [<c0766b18>] (i2s_trigger+0x490/0x6d4)
    [   82.273369] [<c0766b18>] (i2s_trigger) from [<c074fec4>] (soc_pcm_trigger+0x100/0x140)
    [   82.281254] [<c074fec4>] (soc_pcm_trigger) from [<c07378a0>] (snd_pcm_do_start+0x2c/0x30)
    [   82.289400] [<c07378a0>] (snd_pcm_do_start) from [<c07376cc>] (snd_pcm_action_single+0x38/0x78)
    [   82.298065] [<c07376cc>] (snd_pcm_action_single) from [<c073a450>] (snd_pcm_ioctl+0x910/0x1268)
    [   82.306734] [<c073a450>] (snd_pcm_ioctl) from [<c0292344>] (do_vfs_ioctl+0x90/0x9ec)
    [   82.314443] [<c0292344>] (do_vfs_ioctl) from [<c0292cd4>] (ksys_ioctl+0x34/0x60)
    [   82.321808] [<c0292cd4>] (ksys_ioctl) from [<c0101000>] (ret_fast_syscall+0x0/0x28)
    [   82.329431] Exception stack(0xeb875fa8 to 0xeb875ff0)
    [   82.334459] 5fa0:                   00033c18 b6e31000 00000004 00004142 00033d80 00033d80
    [   82.342605] 5fc0: 00033c18 b6e31000 00008000 00000036 00008000 00000000 beea38a8 00008000
    [   82.350748] 5fe0: b6e3142c beea384c b6da9a30 b6c9212c
    [   82.355789]
    [   82.357245] ======================================================
    [   82.363397] WARNING: possible circular locking dependency detected
    [   82.369551] 5.0.0-rc5-00192-ga6e6caca8f03 #191 Tainted: G        W
    [   82.376395] ------------------------------------------------------
    [   82.382548] speaker-test/1554 is trying to acquire lock:
    [   82.387834] 6d2007f4 (prepare_lock){+.+.}, at: clk_prepare_lock+0x78/0xec
    [   82.394593]
    [   82.394593] but task is already holding lock:
    [   82.400398] 6ac279bf (&(&pri_dai->spinlock)->rlock){..-.}, at: i2s_trigger+0x64/0x6d4
    [   82.408197]
    [   82.408197] which lock already depends on the new lock.
    [   82.416343]
    [   82.416343] the existing dependency chain (in reverse order) is:
    [   82.423795]
    [   82.423795] -> #1 (&(&pri_dai->spinlock)->rlock){..-.}:
    [   82.430472]        clk_mux_set_parent+0x34/0xb8
    [   82.434975]        clk_core_set_parent_nolock+0x1c4/0x52c
    [   82.440347]        clk_set_parent+0x38/0x6c
    [   82.444509]        of_clk_set_defaults+0xc8/0x308
    [   82.449186]        of_clk_add_provider+0x84/0xd0
    [   82.453779]        samsung_i2s_probe+0x408/0x5f8
    [   82.458376]        platform_drv_probe+0x48/0x98
    [   82.462879]        really_probe+0x224/0x3f4
    [   82.467037]        driver_probe_device+0x70/0x1c4
    [   82.471716]        bus_for_each_drv+0x44/0x8c
    [   82.476049]        __device_attach+0xa0/0x138
    [   82.480382]        bus_probe_device+0x88/0x90
    [   82.484715]        deferred_probe_work_func+0x6c/0xbc
    [   82.489741]        process_one_work+0x200/0x740
    [   82.494246]        worker_thread+0x2c/0x4c8
    [   82.498408]        kthread+0x128/0x164
    [   82.502131]        ret_from_fork+0x14/0x20
    [   82.506204]          (null)
    [   82.508976]
    [   82.508976] -> #0 (prepare_lock){+.+.}:
    [   82.514264]        __mutex_lock+0x60/0xa3c
    [   82.518336]        mutex_lock_nested+0x1c/0x24
    [   82.522756]        clk_prepare_lock+0x78/0xec
    [   82.527088]        clk_core_get_rate+0xc/0x5c
    [   82.531421]        i2s_trigger+0x490/0x6d4
    [   82.535494]        soc_pcm_trigger+0x100/0x140
    [   82.539913]        snd_pcm_do_start+0x2c/0x30
    [   82.544246]        snd_pcm_action_single+0x38/0x78
    [   82.549012]        snd_pcm_ioctl+0x910/0x1268
    [   82.553345]        do_vfs_ioctl+0x90/0x9ec
    [   82.557417]        ksys_ioctl+0x34/0x60
    [   82.561229]        ret_fast_syscall+0x0/0x28
    [   82.565477]        0xbeea384c
    [   82.568421]
    [   82.568421] other info that might help us debug this:
    [   82.568421]
    [   82.576394]  Possible unsafe locking scenario:
    [   82.576394]
    [   82.582285]        CPU0                    CPU1
    [   82.586792]        ----                    ----
    [   82.591297]   lock(&(&pri_dai->spinlock)->rlock);
    [   82.595977]                                lock(prepare_lock);
    [   82.601782]                                lock(&(&pri_dai->spinlock)->rlock);
    [   82.608975]   lock(prepare_lock);
    [   82.612268]
    [   82.612268]  *** DEADLOCK ***
    
    Fixes: 647d04f8e07a ("ASoC: samsung: i2s: Ensure the RCLK rate is properly determined")
    Reported-by: Krzysztof Kozłowski <krzk@kernel.org>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 459058f0e32940ffbdfba5852eda7db3d4cd0367
Author: James Morse <james.morse@arm.com>
Date:   Thu Jan 24 16:32:54 2019 +0000

    KVM: arm64: Forbid kprobing of the VHE world-switch code
    
    [ Upstream commit 7d82602909ed9c73b34ad26f05d10db4850a4f8c ]
    
    On systems with VHE the kernel and KVM's world-switch code run at the
    same exception level. Code that is only used on a VHE system does not
    need to be annotated as __hyp_text as it can reside anywhere in the
    kernel text.
    
    __hyp_text was also used to prevent kprobes from patching breakpoint
    instructions into this region, as this code runs at a different
    exception level. While this is no longer true with VHE, KVM still
    switches VBAR_EL1, meaning a kprobe's breakpoint executed in the
    world-switch code will cause a hyp-panic.
    
    echo "p:weasel sysreg_save_guest_state_vhe" > /sys/kernel/debug/tracing/kprobe_events
    echo 1 > /sys/kernel/debug/tracing/events/kprobes/weasel/enable
    lkvm run -k /boot/Image --console serial -p "console=ttyS0 earlycon=uart,mmio,0x3f8"
    
      # lkvm run -k /boot/Image -m 384 -c 3 --name guest-1474
      Info: Placing fdt at 0x8fe00000 - 0x8fffffff
      Info: virtio-mmio.devices=0x200@0x10000:36
    
      Info: virtio-mmio.devices=0x200@0x10200:37
    
      Info: virtio-mmio.devices=0x200@0x10400:38
    
    [  614.178186] Kernel panic - not syncing: HYP panic:
    [  614.178186] PS:404003c9 PC:ffff0000100d70e0 ESR:f2000004
    [  614.178186] FAR:0000000080080000 HPFAR:0000000000800800 PAR:1d00007edbadc0de
    [  614.178186] VCPU:00000000f8de32f1
    [  614.178383] CPU: 2 PID: 1482 Comm: kvm-vcpu-0 Not tainted 5.0.0-rc2 #10799
    [  614.178446] Call trace:
    [  614.178480]  dump_backtrace+0x0/0x148
    [  614.178567]  show_stack+0x24/0x30
    [  614.178658]  dump_stack+0x90/0xb4
    [  614.178710]  panic+0x13c/0x2d8
    [  614.178793]  hyp_panic+0xac/0xd8
    [  614.178880]  kvm_vcpu_run_vhe+0x9c/0xe0
    [  614.178958]  kvm_arch_vcpu_ioctl_run+0x454/0x798
    [  614.179038]  kvm_vcpu_ioctl+0x360/0x898
    [  614.179087]  do_vfs_ioctl+0xc4/0x858
    [  614.179174]  ksys_ioctl+0x84/0xb8
    [  614.179261]  __arm64_sys_ioctl+0x28/0x38
    [  614.179348]  el0_svc_common+0x94/0x108
    [  614.179401]  el0_svc_handler+0x38/0x78
    [  614.179487]  el0_svc+0x8/0xc
    [  614.179558] SMP: stopping secondary CPUs
    [  614.179661] Kernel Offset: disabled
    [  614.179695] CPU features: 0x003,2a80aa38
    [  614.179758] Memory Limit: none
    [  614.179858] ---[ end Kernel panic - not syncing: HYP panic:
    [  614.179858] PS:404003c9 PC:ffff0000100d70e0 ESR:f2000004
    [  614.179858] FAR:0000000080080000 HPFAR:0000000000800800 PAR:1d00007edbadc0de
    [  614.179858] VCPU:00000000f8de32f1 ]---
    
    Annotate the VHE world-switch functions that aren't marked
    __hyp_text using NOKPROBE_SYMBOL().
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Fixes: 3f5c90b890ac ("KVM: arm64: Introduce VHE-specific kvm_vcpu_run")
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04131dfcb9102cb339054fafb5da62348c9493c7
Author: Christoffer Dall <christoffer.dall@arm.com>
Date:   Thu Jan 10 15:33:52 2019 +0100

    KVM: arm/arm64: vgic: Always initialize the group of private IRQs
    
    [ Upstream commit ab2d5eb03dbb7b37a1c6356686fb48626ab0c93e ]
    
    We currently initialize the group of private IRQs during
    kvm_vgic_vcpu_init, and the value of the group depends on the GIC model
    we are emulating.  However, CPUs created before creating (and
    initializing) the VGIC might end up with the wrong group if the VGIC
    is created as GICv3 later.
    
    Since we have no enforced ordering of creating the VGIC and creating
    VCPUs, we can end up with part the VCPUs being properly intialized and
    the remaining incorrectly initialized.  That also means that we have no
    single place to do the per-cpu data structure initialization which
    depends on knowing the emulated GIC model (which is only the group
    field).
    
    This patch removes the incorrect comment from kvm_vgic_vcpu_init and
    initializes the group of all previously created VCPUs's private
    interrupts in vgic_init in addition to the existing initialization in
    kvm_vgic_vcpu_init.
    
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c831293622b217eb98d56e6c4a141b9a448dd0e7
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 20 13:07:40 2018 +0000

    arm/arm64: KVM: Don't panic on failure to properly reset system registers
    
    [ Upstream commit 20589c8cc47dce5854c8bf1b44a9fc63d798d26d ]
    
    Failing to properly reset system registers is pretty bad. But not
    quite as bad as bringing the whole machine down... So warn loudly,
    but slightly more gracefully.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b78379c33723a6239f463c66e440e58011546867
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 20 11:36:07 2018 +0000

    arm/arm64: KVM: Allow a VCPU to fully reset itself
    
    [ Upstream commit 358b28f09f0ab074d781df72b8a671edb1547789 ]
    
    The current kvm_psci_vcpu_on implementation will directly try to
    manipulate the state of the VCPU to reset it.  However, since this is
    not done on the thread that runs the VCPU, we can end up in a strangely
    corrupted state when the source and target VCPUs are running at the same
    time.
    
    Fix this by factoring out all reset logic from the PSCI implementation
    and forwarding the required information along with a request to the
    target VCPU.
    
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfe9b4d992cab1e336af90b359412a269cd5d328
Author: Christoffer Dall <christoffer.dall@arm.com>
Date:   Thu Dec 20 12:44:05 2018 +0100

    KVM: arm/arm64: Reset the VCPU without preemption and vcpu state loaded
    
    [ Upstream commit e761a927bc9a7ee6ceb7c4f63d5922dbced87f0d ]
    
    We have two ways to reset a vcpu:
    - either through VCPU_INIT
    - or through a PSCI_ON call
    
    The first one is easy to reason about. The second one is implemented
    in a more bizarre way, as it is the vcpu that handles PSCI_ON that
    resets the vcpu that is being powered-on. As we need to turn the logic
    around and have the target vcpu to reset itself, we must take some
    preliminary steps.
    
    Resetting the VCPU state modifies the system register state in memory,
    but this may interact with vcpu_load/vcpu_put if running with preemption
    disabled, which in turn may lead to corrupted system register state.
    
    Address this by disabling preemption and doing put/load if required
    around the reset logic.
    
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20604435e2f450332f7758ce8365764f99969c62
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Tue Feb 5 09:46:43 2019 +0900

    ASoC: rsnd: fixup rsnd_ssi_master_clk_start() user count check
    
    [ Upstream commit d9111d36024de07784f2e1ba2ccf70b16035f378 ]
    
    commit 4d230d1271064 ("ASoC: rsnd: fixup not to call clk_get/set
    under non-atomic") added new rsnd_ssi_prepare() and moved
    rsnd_ssi_master_clk_start() to .prepare.
    But, ssi user count (= ssi->usrcnt) is incremented at .init
    (= rsnd_ssi_init()).
    Because of these timing exchange, ssi->usrcnt check at
    rsnd_ssi_master_clk_start() should be adjusted.
    Otherwise, 2nd master clock setup will be no check.
    This patch fixup this issue.
    
    Fixes: commit 4d230d1271064 ("ASoC: rsnd: fixup not to call clk_get/set under non-atomic")
    Reported-by: Yusuke Goda <yusuke.goda.sx@renesas.com>
    Reported-by: Valentine Barshak <valentine.barshak@cogentembedded.com>
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Tested-by: Yusuke Goda <yusuke.goda.sx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e07aaaa7013e2697e609aa08c45354809786ba98
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Feb 5 10:22:27 2019 -0600

    ASoC: dapm: fix out-of-bounds accesses to DAPM lookup tables
    
    [ Upstream commit c16e12010060c6c7a31f08b4a99513064cb53b7d ]
    
    KASAN reports and additional traces point to out-of-bounds accesses to
    the dapm_up_seq and dapm_down_seq lookup tables. The indices used are
    larger than the array definition.
    
    Fix by adding missing entries for the new widget types in these two
    lookup tables, and align them with PGA values.
    
    Also the sequences for the following widgets were not defined. Since
    their values defaulted to zero, assign them explicitly
    
     snd_soc_dapm_input
     snd_soc_dapm_output
     snd_soc_dapm_vmid
     snd_soc_dapm_siggen
     snd_soc_dapm_sink
    
    Fixes: 8a70b4544ef4 ('ASoC: dapm: Add new widget type for constructing DAPM graphs on DSPs.').
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3f7a8b6faf899b032527c05fa89a68c83a960c2
Author: Yizhuo <yzhai003@ucr.edu>
Date:   Fri Jan 25 22:32:20 2019 -0800

    ARM: OMAP2+: Variable "reg" in function omap4_dsi_mux_pads() could be uninitialized
    
    [ Upstream commit dc30e70391376ba3987aeb856ae6d9c0706534f1 ]
    
    In function omap4_dsi_mux_pads(), local variable "reg" could
    be uninitialized if function regmap_read() returns -EINVAL.
    However, it will be used directly in the later context, which
    is potentially unsafe.
    
    Signed-off-by: Yizhuo <yzhai003@ucr.edu>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad4507bd2bf1c74bc0ec163e134baf3a3966edc8
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jan 22 08:21:01 2019 -0800

    ARM: dts: Configure clock parent for pwm vibra
    
    [ Upstream commit 0840242e887586268f665bf58d5e1a7d6ebf35ed ]
    
    Commit 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe
    them with ti-sysc") moved some omap4 timers to probe with ti-sysc
    interconnect target module. Turns out this broke pwm-omap-dmtimer
    for reparenting of the timer clock.
    
    With ti-sysc, we can now configure the clock sources in the dts with
    assigned-clocks and assigned-clock-parents.
    
    Fixes: 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe them with ti-sysc")
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bac70a89419abe43d516b40850a4b3a0134e7466
Author: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
Date:   Mon Jan 28 11:13:34 2019 -0800

    Input: pwm-vibra - stop regulator after disabling pwm, not before
    
    [ Upstream commit 94803aef3533676194c772383472636c453e3147 ]
    
    This patch fixes order of disable calls in pwm_vibrator_stop.
    Currently when starting device, we first enable vcc regulator and then
    setup and enable pwm. When stopping, we should do this in oposite order,
    so first disable pwm and then disable regulator.
    Previously order was the same as in start.
    
    Signed-off-by: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ed72d3f6f1d62a4759595e9c87c725bf110b95b
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Mon Jan 28 11:13:01 2019 -0800

    Input: pwm-vibra - prevent unbalanced regulator
    
    [ Upstream commit 3ca232df9921f083c3b37ba5fbc76f4d9046268b ]
    
    pwm_vibrator_stop disables the regulator, but it can be called from
    multiple places, even when the regulator is already disabled. Fix this
    by using regulator_is_enabled check when starting and stopping device.
    
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Signed-off-by: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98a137cd0484efc07318d6710e1990c939c78af6
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Wed Nov 21 12:39:47 2018 +0100

    s390/dasd: fix using offset into zero size array error
    
    [ Upstream commit 4a8ef6999bce998fa5813023a9a6b56eea329dba ]
    
    Dan Carpenter reported the following:
    
    The patch 52898025cf7d: "[S390] dasd: security and PSF update patch
    for EMC CKD ioctl" from Mar 8, 2010, leads to the following static
    checker warning:
    
            drivers/s390/block/dasd_eckd.c:4486 dasd_symm_io()
            error: using offset into zero size array 'psf_data[]'
    
    drivers/s390/block/dasd_eckd.c
      4458          /* Copy parms from caller */
      4459          rc = -EFAULT;
      4460          if (copy_from_user(&usrparm, argp, sizeof(usrparm)))
                                        ^^^^^^^
    The user can specify any "usrparm.psf_data_len".  They choose zero by
    mistake.
    
      4461                  goto out;
      4462          if (is_compat_task()) {
      4463                  /* Make sure pointers are sane even on 31 bit. */
      4464                  rc = -EINVAL;
      4465                  if ((usrparm.psf_data >> 32) != 0)
      4466                          goto out;
      4467                  if ((usrparm.rssd_result >> 32) != 0)
      4468                          goto out;
      4469                  usrparm.psf_data &= 0x7fffffffULL;
      4470                  usrparm.rssd_result &= 0x7fffffffULL;
      4471          }
      4472          /* alloc I/O data area */
      4473          psf_data = kzalloc(usrparm.psf_data_len, GFP_KERNEL
                                                             | GFP_DMA);
      4474          rssd_result = kzalloc(usrparm.rssd_result_len, GFP_KERNEL
                                                                   | GFP_DMA);
      4475          if (!psf_data || !rssd_result) {
    
    kzalloc() returns a ZERO_SIZE_PTR (0x16).
    
      4476                  rc = -ENOMEM;
      4477                  goto out_free;
      4478          }
      4479
      4480          /* get syscall header from user space */
      4481          rc = -EFAULT;
      4482          if (copy_from_user(psf_data,
      4483                             (void __user *)(unsigned long)
                                                             usrparm.psf_data,
      4484                             usrparm.psf_data_len))
    
    That all works great.
    
      4485                  goto out_free;
      4486          psf0 = psf_data[0];
      4487          psf1 = psf_data[1];
    
    But now we're assuming that "->psf_data_len" was at least 2 bytes.
    
    Fix this by checking the user specified length psf_data_len.
    
    Fixes: 52898025cf7d ("[S390] dasd: security and PSF update patch for EMC CKD ioctl")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdaf89ab8f77bae34c28c86dec857bc4ecdb0dae
Author: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Date:   Sat Jan 26 11:37:28 2019 +0100

    arm64: dts: rockchip: fix graph_port warning on rk3399 bob kevin and excavator
    
    [ Upstream commit 26cd8657c7e745686a4c54a5cccf721ede208a25 ]
    
    Ports are described by child 'port' nodes contained in the device node.
    'ports' is optional and is used to group all 'port' nodes which is not
    the case here.
    
    This patch fixes the following warnings:
    
    arch/arm64/boot/dts/rockchip/rk3399-gru-bob.dts:25.9-29.5: Warning (graph_port): /edp-panel/ports: graph port node name should be 'port'
    arch/arm64/boot/dts/rockchip/rk3399-gru-kevin.dts:46.9-50.5: Warningi (graph_port): /edp-panel/ports: graph port node name should be 'port'
    arch/arm64/boot/dts/rockchip/rk3399-sapphire-excavator.dts:94.9-98.5: Warning (graph_port): /edp-panel/ports: graph port node name should be 'port'
    
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f4a64b040c9bc27d07edfbdeb916d6240ca4b76
Author: Julien Thierry <julien.thierry.kdev@gmail.com>
Date:   Mon Jan 7 15:06:16 2019 +0000

    KVM: arm/arm64: vgic: Make vgic_dist->lpi_list_lock a raw_spinlock
    
    [ Upstream commit fc3bc475231e12e9c0142f60100cf84d077c79e1 ]
    
    vgic_dist->lpi_list_lock must always be taken with interrupts disabled as
    it is used in interrupt context.
    
    For configurations such as PREEMPT_RT_FULL, this means that it should
    be a raw_spinlock since RT spinlocks are interruptible.
    
    Signed-off-by: Julien Thierry <julien.thierry@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac696b0176b485933ca73d8cab01946d07efa988
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jan 22 09:03:08 2019 -0800

    clocksource: timer-ti-dm: Fix pwm dmtimer usage of fck reparenting
    
    [ Upstream commit 983a5a43ec254cd5ddf3254db80ca96e8f8bb2a4 ]
    
    Commit 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe
    them with ti-sysc") moved some omap4 timers to probe with ti-sysc
    interconnect target module. Turns out this broke pwm-omap-dmtimer
    where we now try to reparent the clock to itself with the following:
    
    omap_dm_timer_of_set_source: failed to set parent
    
    With ti-sysc, we can now configure the clock sources in the dts
    with assigned-clocks and assigned-clock-parents. So we should be able
    to remove omap_dm_timer_of_set_source with clean-up patches later on.
    But for now, let's just fix it first by checking if parent and fck
    are the same and bail out of so.
    
    Fixes: 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe them with ti-sysc")
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Tested-By: Andreas Kemnade <andreas@kemnade.info>
    Tested-By: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2c642a1a618295008fd28570a427cd9ecfe971c
Author: Shuming Fan <shumingf@realtek.com>
Date:   Tue Jan 22 15:50:09 2019 +0800

    ASoC: rt5682: Correct the setting while select ASRC clk for AD/DA filter
    
    [ Upstream commit 8077ec011b1ea26abb7ca786f28ecccfb352717f ]
    
    AD/DA ASRC function control two ASRC clock sources separately.
    Whether AD/DA filter select which clock source, we enable AD/DA ASRC
    function for all cases.
    
    Signed-off-by: Shuming Fan <shumingf@realtek.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35ad2e6d7e46335100fd276762f0971f53930f50
Author: Steve Longerbeam <slongerbeam@gmail.com>
Date:   Tue Oct 16 17:31:40 2018 -0700

    gpu: ipu-v3: Fix CSI offsets for imx53
    
    [ Upstream commit bb867d219fda7fbaabea3314702474c4eac2b91d ]
    
    The CSI offsets are wrong for both CSI0 and CSI1. They are at
    physical address 0x1e030000 and 0x1e038000 respectively.
    
    Fixes: 2ffd48f2e7 ("gpu: ipu-v3: Add Camera Sensor Interface unit")
    
    Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04c5c4c47c31a4ba2388e754f37e06b9116f60f4
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Sun Jan 13 09:47:42 2019 +0100

    drm/imx: imx-ldb: add missing of_node_puts
    
    [ Upstream commit aa3312012f103f91f123600bbf768b11c8f431bc ]
    
    The device node iterators perform an of_node_get on each
    iteration, so a jump out of the loop requires an of_node_put.
    
    Move the initialization channel->child = child; down to just
    before the call to imx_ldb_register so that intervening failures
    don't need to clear it.  Add a label at the end of the function to
    do all the of_node_puts.
    
    The semantic patch that finds part of this problem is as follows
    (http://coccinelle.lip6.fr):
    
    // <smpl>
    @@
    expression root,e;
    local idexpression child;
    iterator name for_each_child_of_node;
    @@
    
     for_each_child_of_node(root, child) {
       ... when != of_node_put(child)
           when != e = child
    (
       return child;
    |
    *  return ...;
    )
       ...
     }
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1640b52886156d37533111575cce16b13f6c707d
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Thu Dec 20 11:06:38 2018 +0300

    gpu: ipu-v3: Fix i.MX51 CSI control registers offset
    
    [ Upstream commit 2c0408dd0d8906b26fe8023889af7adf5e68b2c2 ]
    
    The CSI0/CSI1 registers offset is at +0xe030000/+0xe038000 relative
    to the control module registers on IPUv3EX.
    This patch fixes wrong values for i.MX51 CSI0/CSI1.
    
    Fixes: 2ffd48f2e7 ("gpu: ipu-v3: Add Camera Sensor Interface unit")
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a308622febe16b1b4285975fc8f586b9636b603d
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Mon Nov 5 16:36:07 2018 +0100

    drm/imx: ignore plane updates on disabled crtcs
    
    [ Upstream commit 4fb873c9648e383206e0a91cef9b03aa54066aca ]
    
    This patch fixes backtraces like the following when sending SIGKILL to a
    process with a currently pending plane update:
    
        [drm:ipu_plane_atomic_check] CRTC should be enabled
        [drm:drm_framebuffer_remove] *ERROR* failed to commit
        ------------[ cut here ]------------
        WARNING: CPU: 3 PID: 63 at drivers/gpu/drm/drm_framebuffer.c:926 drm_framebuffer_remove+0x47c/0x498
        atomic remove_fb failed with -22
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e0e1f9a1e41fabfb945c67fd91145fca230dbb7
Author: Zhang Zhijie <zhangzj@rock-chips.com>
Date:   Wed Feb 13 16:24:39 2019 +0800

    crypto: rockchip - update new iv to device in multiple operations
    
    commit c1c214adcb56d36433480c8fedf772498e7e539c upstream.
    
    For chain mode in cipher(eg. AES-CBC/DES-CBC), the iv is continuously
    updated in the operation. The new iv value should be written to device
    register by software.
    
    Reported-by: Eric Biggers <ebiggers@google.com>
    Fixes: 433cd2c617bf ("crypto: rockchip - add crypto driver for rk3288")
    Cc: <stable@vger.kernel.org> # v4.5+
    Signed-off-by: Zhang Zhijie <zhangzj@rock-chips.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aabf06712c2086168c5db9d96def40eaf6eb637
Author: Zhang Zhijie <zhangzj@rock-chips.com>
Date:   Wed Feb 13 16:24:38 2019 +0800

    crypto: rockchip - fix scatterlist nents error
    
    commit 4359669a087633132203c52d67dd8c31e09e7b2e upstream.
    
    In some cases, the nents of src scatterlist is different from
    dst scatterlist. So two variables are used to handle the nents
    of src&dst scatterlist.
    
    Reported-by: Eric Biggers <ebiggers@google.com>
    Fixes: 433cd2c617bf ("crypto: rockchip - add crypto driver for rk3288")
    Cc: <stable@vger.kernel.org> # v4.5+
    Signed-off-by: Zhang Zhijie <zhangzj@rock-chips.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c5d7703bbd04bc9e5743810dff430583afcb236
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 31 23:51:41 2019 -0800

    crypto: ahash - fix another early termination in hash walk
    
    commit 77568e535af7c4f97eaef1e555bf0af83772456c upstream.
    
    Hash algorithms with an alignmask set, e.g. "xcbc(aes-aesni)" and
    "michael_mic", fail the improved hash tests because they sometimes
    produce the wrong digest.  The bug is that in the case where a
    scatterlist element crosses pages, not all the data is actually hashed
    because the scatterlist walk terminates too early.  This happens because
    the 'nbytes' variable in crypto_hash_walk_done() is assigned the number
    of bytes remaining in the page, then later interpreted as the number of
    bytes remaining in the scatterlist element.  Fix it.
    
    Fixes: 900a081f6912 ("crypto: ahash - Fix early termination in hash walk")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a10e6b5bb34e7f94c138d64498e2f2aaad02d9a
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 3 20:16:11 2019 -0800

    crypto: cfb - remove bogus memcpy() with src == dest
    
    commit 6c2e322b3621dc8be72e5c86d4fdb587434ba625 upstream.
    
    The memcpy() in crypto_cfb_decrypt_inplace() uses walk->iv as both the
    source and destination, which has undefined behavior.  It is unneeded
    because walk->iv is already used to hold the previous ciphertext block;
    thus, walk->iv is already updated to its final value.  So, remove it.
    
    Also, note that in-place decryption is the only case where the previous
    ciphertext block is not directly available.  Therefore, as a related
    cleanup I also updated crypto_cfb_encrypt_segment() to directly use the
    previous ciphertext block rather than save it into walk->iv.  This makes
    it consistent with in-place encryption and out-of-place decryption; now
    only in-place decryption is different, because it has to be.
    
    Fixes: a7d85e06ed80 ("crypto: cfb - add support for Cipher FeedBack mode")
    Cc: <stable@vger.kernel.org> # v4.17+
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b1871d041d31cccbe17f070c317d785aaae621a
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 3 20:16:10 2019 -0800

    crypto: cfb - add missing 'chunksize' property
    
    commit 394a9e044702e6a8958a5e89d2a291605a587a2a upstream.
    
    Like some other block cipher mode implementations, the CFB
    implementation assumes that while walking through the scatterlist, a
    partial block does not occur until the end.  But the walk is incorrectly
    being done with a blocksize of 1, as 'cra_blocksize' is set to 1 (since
    CFB is a stream cipher) but no 'chunksize' is set.  This bug causes
    incorrect encryption/decryption for some scatterlist layouts.
    
    Fix it by setting the 'chunksize'.  Also extend the CFB test vectors to
    cover this bug as well as cases where the message length is not a
    multiple of the block size.
    
    Fixes: a7d85e06ed80 ("crypto: cfb - add support for Cipher FeedBack mode")
    Cc: <stable@vger.kernel.org> # v4.17+
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ed42ccca59db6c871f00c5746a769e5154324b6
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Tue Jan 15 15:43:17 2019 +0200

    crypto: ccree - don't copy zero size ciphertext
    
    commit 2b5ac17463dcb2411fed506edcf259a89bb538ba upstream.
    
    For decryption in CBC mode we need to save the last ciphertext block
    for use as the next IV. However, we were trying to do this also with
    zero sized ciphertext resulting in a panic.
    
    Fix this by only doing the copy if the ciphertext length is at least
    of IV size.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bdd345a384849d6d194dd84cd60b0ccc69fd8d1
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Tue Jan 15 15:43:15 2019 +0200

    crypto: ccree - unmap buffer before copying IV
    
    commit c139c72e2beb3e3db5148910b3962b7322e24374 upstream.
    
    We were copying the last ciphertext block into the IV field
    for CBC before removing the DMA mapping of the output buffer
    with the result of the buffer sometime being out-of-sync cache
    wise and were getting intermittent cases of bad output IV.
    
    Fix it by moving the DMA buffer unmapping before the copy.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Fixes: 00904aa0cd59 ("crypto: ccree - fix iv handling")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 009eeb9878b480cec08ade74e94e21e04cc45a24
Author: Hadar Gat <hadar.gat@arm.com>
Date:   Tue Jan 15 15:43:13 2019 +0200

    crypto: ccree - fix free of unallocated mlli buffer
    
    commit a49411959ea6d4915a9fd2a7eb5ba220e6284e9a upstream.
    
    In cc_unmap_aead_request(), call dma_pool_free() for mlli buffer only
    if an item is allocated from the pool and not always if there is a
    pool allocated.
    This fixes a kernel panic when trying to free a non-allocated item.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hadar Gat <hadar.gat@arm.com>
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f4c11b09770e06781acee7873fe24c345c38a2e
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Sat Jan 26 20:02:15 2019 +0200

    crypto: caam - fix DMA mapping of stack memory
    
    commit c19650d6ea99bcd903d3e55dd61860026c701339 upstream.
    
    Roland reports the following issue and provides a root cause analysis:
    
    "On a v4.19 i.MX6 system with IMA and CONFIG_DMA_API_DEBUG enabled, a
    warning is generated when accessing files on a filesystem for which IMA
    measurement is enabled:
    
        ------------[ cut here ]------------
        WARNING: CPU: 0 PID: 1 at kernel/dma/debug.c:1181 check_for_stack.part.9+0xd0/0x120
        caam_jr 2101000.jr0: DMA-API: device driver maps memory from stack [addr=b668049e]
        Modules linked in:
        CPU: 0 PID: 1 Comm: switch_root Not tainted 4.19.0-20181214-1 #2
        Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
        Backtrace:
        [<c010efb8>] (dump_backtrace) from [<c010f2d0>] (show_stack+0x20/0x24)
        [<c010f2b0>] (show_stack) from [<c08b04f4>] (dump_stack+0xa0/0xcc)
        [<c08b0454>] (dump_stack) from [<c012b610>] (__warn+0xf0/0x108)
        [<c012b520>] (__warn) from [<c012b680>] (warn_slowpath_fmt+0x58/0x74)
        [<c012b62c>] (warn_slowpath_fmt) from [<c0199acc>] (check_for_stack.part.9+0xd0/0x120)
        [<c01999fc>] (check_for_stack.part.9) from [<c019a040>] (debug_dma_map_page+0x144/0x174)
        [<c0199efc>] (debug_dma_map_page) from [<c065f7f4>] (ahash_final_ctx+0x5b4/0xcf0)
        [<c065f240>] (ahash_final_ctx) from [<c065b3c4>] (ahash_final+0x1c/0x20)
        [<c065b3a8>] (ahash_final) from [<c03fe278>] (crypto_ahash_op+0x38/0x80)
        [<c03fe240>] (crypto_ahash_op) from [<c03fe2e0>] (crypto_ahash_final+0x20/0x24)
        [<c03fe2c0>] (crypto_ahash_final) from [<c03f19a8>] (ima_calc_file_hash+0x29c/0xa40)
        [<c03f170c>] (ima_calc_file_hash) from [<c03f2b24>] (ima_collect_measurement+0x1dc/0x240)
        [<c03f2948>] (ima_collect_measurement) from [<c03f0a60>] (process_measurement+0x4c4/0x6b8)
        [<c03f059c>] (process_measurement) from [<c03f0cdc>] (ima_file_check+0x88/0xa4)
        [<c03f0c54>] (ima_file_check) from [<c02d8adc>] (path_openat+0x5d8/0x1364)
        [<c02d8504>] (path_openat) from [<c02dad24>] (do_filp_open+0x84/0xf0)
        [<c02daca0>] (do_filp_open) from [<c02cf50c>] (do_open_execat+0x84/0x1b0)
        [<c02cf488>] (do_open_execat) from [<c02d1058>] (__do_execve_file+0x43c/0x890)
        [<c02d0c1c>] (__do_execve_file) from [<c02d1770>] (sys_execve+0x44/0x4c)
        [<c02d172c>] (sys_execve) from [<c0101000>] (ret_fast_syscall+0x0/0x28)
        ---[ end trace 3455789a10e3aefd ]---
    
    The cause is that the struct ahash_request *req is created as a
    stack-local variable up in the stack (presumably somewhere in the IMA
    implementation), then passed down into the CAAM driver, which tries to
    dma_single_map the req->result (indirectly via map_seq_out_ptr_result)
    in order to make that buffer available for the CAAM to store the result
    of the following hash operation.
    
    The calling code doesn't know how req will be used by the CAAM driver,
    and there could be other such occurrences where stack memory is passed
    down to the CAAM driver. Therefore we should rather fix this issue in
    the CAAM driver where the requirements are known."
    
    Fix this problem by:
    -instructing the crypto engine to write the final hash in state->caam_ctx
    -subsequently memcpy-ing the final hash into req->result
    
    Cc: <stable@vger.kernel.org> # v4.19+
    Reported-by: Roland Hieber <rhi@pengutronix.de>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Tested-by: Roland Hieber <rhi@pengutronix.de>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74fd74e1fc8dc6cbbafcf274755d71dae640c823
Author: Pankaj Gupta <pankaj.gupta@nxp.com>
Date:   Fri Feb 1 07:18:20 2019 +0000

    crypto: caam - fixed handling of sg list
    
    commit 42e95d1f10dcf8b18b1d7f52f7068985b3dc5b79 upstream.
    
    when the source sg contains more than 1 fragment and
    destination sg contains 1 fragment, the caam driver
    mishandle the buffers to be sent to caam.
    
    Fixes: f2147b88b2b1 ("crypto: caam - Convert GCM to new AEAD interface")
    Cc: <stable@vger.kernel.org> # 4.2+
    Signed-off-by: Pankaj Gupta <pankaj.gupta@nxp.com>
    Signed-off-by: Arun Pathak <arun.pathak@nxp.com>
    Reviewed-by: Horia Geanta <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce36d9fafb43740b575bd7a75a0c378c89cfa4ed
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Feb 11 12:31:31 2019 -0600

    crypto: ccree - fix missing break in switch statement
    
    commit b5be853181a8d4a6e20f2073ccd273d6280cad88 upstream.
    
    Add missing break statement in order to prevent the code from falling
    through to case S_DIN_to_DES.
    
    This bug was found thanks to the ongoing efforts to enable
    -Wimplicit-fallthrough.
    
    Fixes: 63ee04c8b491 ("crypto: ccree - add skcipher support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32eeecf7ac87833e19defe9af0584509aca41473
Author: Franck LENORMAND <franck.lenormand@nxp.com>
Date:   Tue Feb 19 16:56:55 2019 +0200

    crypto: caam - fix hash context DMA unmap size
    
    commit 65055e2108847af5e577cc7ce6bde45ea136d29a upstream.
    
    When driver started using state->caam_ctxt for storing both running hash
    and final hash, it was not updated to handle different DMA unmap
    lengths.
    
    Cc: <stable@vger.kernel.org> # v4.19+
    Fixes: c19650d6ea99 ("crypto: caam - fix DMA mapping of stack memory")
    Signed-off-by: Franck LENORMAND <franck.lenormand@nxp.com>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd6ce0316e70c7d0848823b1351f6df28e1a1d09
Author: Zhi Jin <zhi.jin@intel.com>
Date:   Thu Sep 6 15:22:10 2018 +0800

    stm class: Fix an endless loop in channel allocation
    
    commit a1d75dad3a2c689e70a1c4e0214cca9de741d0aa upstream.
    
    There is a bug in the channel allocation logic that leads to an endless
    loop when looking for a contiguous range of channels in a range with a
    mixture of free and occupied channels. For example, opening three
    consequtive channels, closing the first two and requesting 4 channels in
    a row will trigger this soft lockup. The bug is that the search loop
    forgets to skip over the range once it detects that one channel in that
    range is occupied.
    
    Restore the original intent to the logic by fixing the omission.
    
    Signed-off-by: Zhi Jin <zhi.jin@intel.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 7bd1d4093c2f ("stm class: Introduce an abstraction for System Trace Module devices")
    CC: stable@vger.kernel.org # v4.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a253d1f3e490068fb017855da481762c53f01ab5
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Mon Feb 25 11:09:28 2019 +0200

    mei: bus: move hw module get/put to probe/release
    
    commit b5958faa34e2f99f3475ad89c52d98dfea079d33 upstream.
    
    Fix unbalanced module reference counting during internal reset, which
    prevents the drivers unloading.
    Tracking mei_me/txe modules on mei client bus via
    mei_cldev_enable/disable is error prone due to possible internal
    reset flow, where clients are disconnected underneath.
    Moving reference counting to probe and release of mei bus client
    driver solves this issue in simplest way, as each client provides only
    a single connection to a client bus driver.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02c0c70fb36e60f4548072803734552e86447b18
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Wed Feb 20 16:55:37 2019 +0200

    mei: hbm: clean the feature flags on link reset
    
    commit 37fd0b623023484ef6df79ed46f21f06ecc611ff upstream.
    
    The list of supported functions can be altered upon link reset,
    clean the flags to allow correct selections of supported
    features.
    
    Cc: <stable@vger.kernel.org> v4.19+
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbcb0a590ecb759aca55eed976d073f2717a5a12
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sat Feb 9 00:39:27 2019 +0100

    iio: adc: exynos-adc: Fix NULL pointer exception on unbind
    
    commit 2ea8bab4dd2a9014e723b28091831fa850b82d83 upstream.
    
    Fix NULL pointer exception on device unbind when device tree does not
    contain "has-touchscreen" property.  In such case the input device is
    not registered so it should not be unregistered.
    
        $ echo "12d10000.adc" > /sys/bus/platform/drivers/exynos-adc/unbind
    
        Unable to handle kernel NULL pointer dereference at virtual address 00000474
        ...
        (input_unregister_device) from [<c0772060>] (exynos_adc_remove+0x20/0x80)
        (exynos_adc_remove) from [<c0587d5c>] (platform_drv_remove+0x20/0x40)
        (platform_drv_remove) from [<c05860f0>] (device_release_driver_internal+0xdc/0x1ac)
        (device_release_driver_internal) from [<c0583ecc>] (unbind_store+0x60/0xd4)
        (unbind_store) from [<c031b89c>] (kernfs_fop_write+0x100/0x1e0)
        (kernfs_fop_write) from [<c029709c>] (__vfs_write+0x2c/0x17c)
        (__vfs_write) from [<c0297374>] (vfs_write+0xa4/0x184)
        (vfs_write) from [<c0297594>] (ksys_write+0x4c/0xac)
        (ksys_write) from [<c0101000>] (ret_fast_syscall+0x0/0x28)
    
    Fixes: 2bb8ad9b44c5 ("iio: exynos-adc: add experimental touchscreen support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f44122e065c8d1929e8f7fba06782d5c40712fc
Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
Date:   Tue Feb 19 16:29:28 2019 +0000

    ASoC: codecs: pcm186x: Fix energysense SLEEP bit
    
    commit 05bd7fcdd06b19a10f069af1bea3ad9abac038d7 upstream.
    
    The ADCs are sleeping when the SLEEP bit is set and running when it's
    cleared, so the bit should be inverted.
    Tested on pcm1863.
    
    Signed-off-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
    Acked-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d9e07582a7f5bee8f8440c0633a1f5b8eccdd5c
Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
Date:   Tue Feb 19 16:29:12 2019 +0000

    ASoC: codecs: pcm186x: fix wrong usage of DECLARE_TLV_DB_SCALE()
    
    commit fcf4daabf08079e6d09958a2992e7446ef8d0438 upstream.
    
    According to DS, the gain is between -12 dB and 40 dB, with a 0.5 dB step.
    Tested on pcm1863.
    
    Signed-off-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
    Acked-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 098e0f89a3417b19f3caf37d885edc866232865e
Author: S.j. Wang <shengjiu.wang@nxp.com>
Date:   Mon Feb 18 08:29:11 2019 +0000

    ASoC: fsl_esai: fix register setting issue in RIGHT_J mode
    
    commit cc29ea007347f39f4c5a4d27b0b555955a0277f9 upstream.
    
    The ESAI_xCR_xWA is xCR's bit, not the xCCR's bit, driver set it to
    wrong register, correct it.
    
    Fixes 43d24e76b698 ("ASoC: fsl_esai: Add ESAI CPU DAI driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Ackedy-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85bdc9daff4038720aa01de1ce7234659583b027
Author: zhengbin <zhengbin13@huawei.com>
Date:   Wed Mar 13 16:01:37 2019 +0800

    9p/net: fix memory leak in p9_client_create
    
    commit bb06c388fa20ae24cfe80c52488de718a7e3a53f upstream.
    
    If msize is less than 4096, we should close and put trans, destroy
    tagpool, not just free client. This patch fixes that.
    
    Link: http://lkml.kernel.org/m/1552464097-142659-1-git-send-email-zhengbin13@huawei.com
    Cc: stable@vger.kernel.org
    Fixes: 574d356b7a02 ("9p/net: put a lower bound on msize")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: zhengbin <zhengbin13@huawei.com>
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e08ba890dc29250fafdfa7c9dba62ccfeec8ef7f
Author: Hou Tao <houtao1@huawei.com>
Date:   Thu Jan 24 14:35:13 2019 +0800

    9p: use inode->i_lock to protect i_size_write() under 32-bit
    
    commit 5e3cc1ee1405a7eb3487ed24f786dec01b4cbe1f upstream.
    
    Use inode->i_lock to protect i_size_write(), else i_size_read() in
    generic_fillattr() may loop infinitely in read_seqcount_begin() when
    multiple processes invoke v9fs_vfs_getattr() or v9fs_vfs_getattr_dotl()
    simultaneously under 32-bit SMP environment, and a soft lockup will be
    triggered as show below:
    
      watchdog: BUG: soft lockup - CPU#5 stuck for 22s! [stat:2217]
      Modules linked in:
      CPU: 5 PID: 2217 Comm: stat Not tainted 5.0.0-rc1-00005-g7f702faf5a9e #4
      Hardware name: Generic DT based system
      PC is at generic_fillattr+0x104/0x108
      LR is at 0xec497f00
      pc : [<802b8898>]    lr : [<ec497f00>]    psr: 200c0013
      sp : ec497e20  ip : ed608030  fp : ec497e3c
      r10: 00000000  r9 : ec497f00  r8 : ed608030
      r7 : ec497ebc  r6 : ec497f00  r5 : ee5c1550  r4 : ee005780
      r3 : 0000052d  r2 : 00000000  r1 : ec497f00  r0 : ed608030
      Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
      Control: 10c5387d  Table: ac48006a  DAC: 00000051
      CPU: 5 PID: 2217 Comm: stat Not tainted 5.0.0-rc1-00005-g7f702faf5a9e #4
      Hardware name: Generic DT based system
      Backtrace:
      [<8010d974>] (dump_backtrace) from [<8010dc88>] (show_stack+0x20/0x24)
      [<8010dc68>] (show_stack) from [<80a1d194>] (dump_stack+0xb0/0xdc)
      [<80a1d0e4>] (dump_stack) from [<80109f34>] (show_regs+0x1c/0x20)
      [<80109f18>] (show_regs) from [<801d0a80>] (watchdog_timer_fn+0x280/0x2f8)
      [<801d0800>] (watchdog_timer_fn) from [<80198658>] (__hrtimer_run_queues+0x18c/0x380)
      [<801984cc>] (__hrtimer_run_queues) from [<80198e60>] (hrtimer_run_queues+0xb8/0xf0)
      [<80198da8>] (hrtimer_run_queues) from [<801973e8>] (run_local_timers+0x28/0x64)
      [<801973c0>] (run_local_timers) from [<80197460>] (update_process_times+0x3c/0x6c)
      [<80197424>] (update_process_times) from [<801ab2b8>] (tick_nohz_handler+0xe0/0x1bc)
      [<801ab1d8>] (tick_nohz_handler) from [<80843050>] (arch_timer_handler_virt+0x38/0x48)
      [<80843018>] (arch_timer_handler_virt) from [<80180a64>] (handle_percpu_devid_irq+0x8c/0x240)
      [<801809d8>] (handle_percpu_devid_irq) from [<8017ac20>] (generic_handle_irq+0x34/0x44)
      [<8017abec>] (generic_handle_irq) from [<8017b344>] (__handle_domain_irq+0x6c/0xc4)
      [<8017b2d8>] (__handle_domain_irq) from [<801022e0>] (gic_handle_irq+0x4c/0x88)
      [<80102294>] (gic_handle_irq) from [<80101a30>] (__irq_svc+0x70/0x98)
      [<802b8794>] (generic_fillattr) from [<8056b284>] (v9fs_vfs_getattr_dotl+0x74/0xa4)
      [<8056b210>] (v9fs_vfs_getattr_dotl) from [<802b8904>] (vfs_getattr_nosec+0x68/0x7c)
      [<802b889c>] (vfs_getattr_nosec) from [<802b895c>] (vfs_getattr+0x44/0x48)
      [<802b8918>] (vfs_getattr) from [<802b8a74>] (vfs_statx+0x9c/0xec)
      [<802b89d8>] (vfs_statx) from [<802b9428>] (sys_lstat64+0x48/0x78)
      [<802b93e0>] (sys_lstat64) from [<80101000>] (ret_fast_syscall+0x0/0x28)
    
    [dominique.martinet@cea.fr: updated comment to not refer to a function
    in another subsystem]
    Link: http://lkml.kernel.org/r/20190124063514.8571-2-houtao1@huawei.com
    Cc: stable@vger.kernel.org
    Fixes: 7549ae3e81cc ("9p: Use the i_size_[read, write]() macros instead of using inode->i_size directly.")
    Reported-by: Xing Gaopeng <xingaopeng@huawei.com>
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 573d423a9bd76b396954ddf847ff24d97658453d
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Nov 19 10:33:44 2018 -0500

    media: videobuf2-v4l2: drop WARN_ON in vb2_warn_zero_bytesused()
    
    commit 5e99456c20f712dcc13d9f6ca4278937d5367355 upstream.
    
    Userspace shouldn't set bytesused to 0 for output buffers.
    vb2_warn_zero_bytesused() warns about this (only once!), but it also
    calls WARN_ON(1), which is confusing since it is not immediately clear
    that it warns about a 0 value for bytesused.
    
    Just drop the WARN_ON as it serves no purpose.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Acked-by: Ezequiel Garcia <ezequiel@collabora.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Cc: Matthias Maennich <maennich@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
