commit a87f96283793d58b042618c689630db264715274
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Sep 12 13:40:23 2020 +0200

    Linux 4.19.145
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 044be307e550b4532960eadabfb6942de96751f0
Author: Roi Dayan <roid@mellanox.com>
Date:   Thu Aug 6 19:05:42 2020 -0700

    net/mlx5e: Don't support phys switch id if not in switchdev mode
    
    Support for phys switch id ndo added for representors and if
    we do not have representors there is no need to support it.
    Since each port return different switch id supporting this
    block support for creating bond over PFs and attaching to bridge
    in legacy mode.
    
    This bug doesn't exist upstream as the code got refactored and the
    netdev api is totally different.
    
    Fixes: cb67b832921c ("net/mlx5e: Introduce SRIOV VF representors")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f313bcb3b3d021f9b2f04f6d8464f8e9e309452
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Aug 26 12:40:06 2020 -0700

    net: disable netpoll on fresh napis
    
    [ Upstream commit 96e97bc07e90f175a8980a22827faf702ca4cb30 ]
    
    napi_disable() makes sure to set the NAPI_STATE_NPSVC bit to prevent
    netpoll from accessing rings before init is complete. However, the
    same is not done for fresh napi instances in netif_napi_add(),
    even though we expect NAPI instances to be added as disabled.
    
    This causes crashes during driver reconfiguration (enabling XDP,
    changing the channel count) - if there is any printk() after
    netif_napi_add() but before napi_enable().
    
    To ensure memory ordering is correct we need to use RCU accessors.
    
    Reported-by: Rob Sherwood <rsher@fb.com>
    Fixes: 2d8bff12699a ("netpoll: Close race condition between poll_one_napi and napi_disable")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 553d1bb7f4d1d2b86b7527c10be31b2f5f78bd8c
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84cfc87866b7e01b591999cc4cdd176d78a3a69c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Aug 21 14:59:38 2020 +0800

    sctp: not disable bh in the whole sctp_get_port_local()
    
    [ Upstream commit 3106ecb43a05dc3e009779764b9da245a5d082de ]
    
    With disabling bh in the whole sctp_get_port_local(), when
    snum == 0 and too many ports have been used, the do-while
    loop will take the cpu for a long time and cause cpu stuck:
    
      [ ] watchdog: BUG: soft lockup - CPU#11 stuck for 22s!
      [ ] RIP: 0010:native_queued_spin_lock_slowpath+0x4de/0x940
      [ ] Call Trace:
      [ ]  _raw_spin_lock+0xc1/0xd0
      [ ]  sctp_get_port_local+0x527/0x650 [sctp]
      [ ]  sctp_do_bind+0x208/0x5e0 [sctp]
      [ ]  sctp_autobind+0x165/0x1e0 [sctp]
      [ ]  sctp_connect_new_asoc+0x355/0x480 [sctp]
      [ ]  __sctp_connect+0x360/0xb10 [sctp]
    
    There's no need to disable bh in the whole function of
    sctp_get_port_local. So fix this cpu stuck by removing
    local_bh_disable() called at the beginning, and using
    spin_lock_bh() instead.
    
    The same thing was actually done for inet_csk_get_port() in
    Commit ea8add2b1903 ("tcp/dccp: better use of ephemeral
    ports in bind()").
    
    Thanks to Marcelo for pointing the buggy code out.
    
    v1->v2:
      - use cond_resched() to yield cpu to other tasks if needed,
        as Eric noticed.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2ece46d1004319a051d00cb6a38a1532bc90c73
Author: Kamil Lorenc <kamil@re-ws.pl>
Date:   Tue Sep 1 10:57:38 2020 +0200

    net: usb: dm9601: Add USB ID of Keenetic Plus DSL
    
    [ Upstream commit a609d0259183a841621f252e067f40f8cc25d6f6 ]
    
    Keenetic Plus DSL is a xDSL modem that uses dm9620 as its USB interface.
    
    Signed-off-by: Kamil Lorenc <kamil@re-ws.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3a5cb67767464b4c36f9dfc2d4bab3eee9a2d08
Author: Paul Moore <paul@paul-moore.com>
Date:   Fri Aug 21 16:34:52 2020 -0400

    netlabel: fix problems with mapping removal
    
    [ Upstream commit d3b990b7f327e2afa98006e7666fb8ada8ed8683 ]
    
    This patch fixes two main problems seen when removing NetLabel
    mappings: memory leaks and potentially extra audit noise.
    
    The memory leaks are caused by not properly free'ing the mapping's
    address selector struct when free'ing the entire entry as well as
    not properly cleaning up a temporary mapping entry when adding new
    address selectors to an existing entry.  This patch fixes both these
    problems such that kmemleak reports no NetLabel associated leaks
    after running the SELinux test suite.
    
    The potentially extra audit noise was caused by the auditing code in
    netlbl_domhsh_remove_entry() being called regardless of the entry's
    validity.  If another thread had already marked the entry as invalid,
    but not removed/free'd it from the list of mappings, then it was
    possible that an additional mapping removal audit record would be
    generated.  This patch fixes this by returning early from the removal
    function when the entry was previously marked invalid.  This change
    also had the side benefit of improving the code by decreasing the
    indentation level of large chunk of code by one (accounting for most
    of the diffstat).
    
    Fixes: 63c416887437 ("netlabel: Add network address selectors to the NetLabel/LSM domain mapping")
    Reported-by: Stephen Smalley <stephen.smalley.work@gmail.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 732fd460bb72fd51607311009b7d474a6e0e47f3
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Aug 31 11:20:02 2020 -0600

    block: ensure bdi->io_pages is always initialized
    
    [ Upstream commit de1b0ee490eafdf65fac9eef9925391a8369f2dc ]
    
    If a driver leaves the limit settings as the defaults, then we don't
    initialize bdi->io_pages. This means that file systems may need to
    work around bdi->io_pages == 0, which is somewhat messy.
    
    Initialize the default value just like we do for ->ra_pages.
    
    Cc: stable@vger.kernel.org
    Fixes: 9491ae4aade6 ("mm: don't cap request size based on read-ahead setting")
    Reported-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9244e838ac0d3d98887d44ea68bedf08a94ebabf
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Aug 23 16:55:37 2020 +0900

    ALSA; firewire-tascam: exclude Tascam FE-8 from detection
    
    Tascam FE-8 is known to support communication by asynchronous transaction
    only. The support can be implemented in userspace application and
    snd-firewire-ctl-services project has the support. However, ALSA
    firewire-tascam driver is bound to the model.
    
    This commit changes device entries so that the model is excluded. In a
    commit 53b3ffee7885 ("ALSA: firewire-tascam: change device probing
    processing"), I addressed to the concern that version field in
    configuration differs depending on installed firmware. However, as long
    as I checked, the version number is fixed. It's safe to return version
    number back to modalias.
    
    Fixes: 53b3ffee7885 ("ALSA: firewire-tascam: change device probing processing")
    Cc: <stable@vger.kernel.org> # 4.4+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200823075537.56255-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
