commit 807d174bcb26ffc9eeb944d39591a15059aa7cbc
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 20 16:49:17 2019 +0100

    Linux 5.3.12

commit b4f2692948fcb6cb262c5771d04d1abb0f0c87f1
Author: Jouni Hogander <jouni.hogander@unikie.com>
Date:   Wed Nov 13 12:08:01 2019 +0200

    slcan: Fix memory leak in error path
    
    commit ed50e1600b4483c049ce76e6bd3b665a6a9300ed upstream.
    
    This patch is fixing memory leak reported by Syzkaller:
    
    BUG: memory leak unreferenced object 0xffff888067f65500 (size 4096):
      comm "syz-executor043", pid 454, jiffies 4294759719 (age 11.930s)
      hex dump (first 32 bytes):
        73 6c 63 61 6e 30 00 00 00 00 00 00 00 00 00 00 slcan0..........
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
      backtrace:
        [<00000000a06eec0d>] __kmalloc+0x18b/0x2c0
        [<0000000083306e66>] kvmalloc_node+0x3a/0xc0
        [<000000006ac27f87>] alloc_netdev_mqs+0x17a/0x1080
        [<0000000061a996c9>] slcan_open+0x3ae/0x9a0
        [<000000001226f0f9>] tty_ldisc_open.isra.1+0x76/0xc0
        [<0000000019289631>] tty_set_ldisc+0x28c/0x5f0
        [<000000004de5a617>] tty_ioctl+0x48d/0x1590
        [<00000000daef496f>] do_vfs_ioctl+0x1c7/0x1510
        [<0000000059068dbc>] ksys_ioctl+0x99/0xb0
        [<000000009a6eb334>] __x64_sys_ioctl+0x78/0xb0
        [<0000000053d0332e>] do_syscall_64+0x16f/0x580
        [<0000000021b83b99>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
        [<000000008ea75434>] 0xffffffffffffffff
    
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Signed-off-by: Jouni Hogander <jouni.hogander@unikie.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bca362b1ca1735025fe7f17256bf72ae5682c54a
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Thu Nov 14 12:59:26 2019 +0000

    mmc: sdhci-of-at91: fix quirk2 overwrite
    
    commit fed23c5829ecab4ddc712d7b0046e59610ca3ba4 upstream.
    
    The quirks2 are parsed and set (e.g. from DT) before the quirk for broken
    HS200 is set in the driver.
    The driver needs to enable just this flag, not rewrite the whole quirk set.
    
    Fixes: 7871aa60ae00 ("mmc: sdhci-of-at91: add quirk for broken HS200")
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c31ef6d88bb6e3a26e6eb6b292003c9b9287da5
Author: Vinayak Menon <vinmenon@codeaurora.org>
Date:   Fri Nov 15 17:35:00 2019 -0800

    mm/page_io.c: do not free shared swap slots
    
    commit 5df373e95689b9519b8557da7c5bd0db0856d776 upstream.
    
    The following race is observed due to which a processes faulting on a
    swap entry, finds the page neither in swapcache nor swap.  This causes
    zram to give a zero filled page that gets mapped to the process,
    resulting in a user space crash later.
    
    Consider parent and child processes Pa and Pb sharing the same swap slot
    with swap_count 2.  Swap is on zram with SWP_SYNCHRONOUS_IO set.
    Virtual address 'VA' of Pa and Pb points to the shared swap entry.
    
    Pa                                       Pb
    
    fault on VA                              fault on VA
    do_swap_page                             do_swap_page
    lookup_swap_cache fails                  lookup_swap_cache fails
                                             Pb scheduled out
    swapin_readahead (deletes zram entry)
    swap_free (makes swap_count 1)
                                             Pb scheduled in
                                             swap_readpage (swap_count == 1)
                                             Takes SWP_SYNCHRONOUS_IO path
                                             zram enrty absent
                                             zram gives a zero filled page
    
    Fix this by making sure that swap slot is freed only when swap count
    drops down to one.
    
    Link: http://lkml.kernel.org/r/1571743294-14285-1-git-send-email-vinmenon@codeaurora.org
    Fixes: aa8d22a11da9 ("mm: swap: SWP_SYNCHRONOUS_IO: skip swapcache only if swapped page has no other reference")
    Signed-off-by: Vinayak Menon <vinmenon@codeaurora.org>
    Suggested-by: Minchan Kim <minchan@google.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be1da0e3e970282a1e94bdeed18a173bc1b08a16
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Nov 15 17:34:57 2019 -0800

    mm/memory_hotplug: fix try_offline_node()
    
    commit 2c91f8fc6c999fe10185d8ad99fda1759f662f70 upstream.
    
    try_offline_node() is pretty much broken right now:
    
     - The node span is updated when onlining memory, not when adding it. We
       ignore memory that was mever onlined. Bad.
    
     - We touch possible garbage memmaps. The pfn_to_nid(pfn) can easily
       trigger a kernel panic. Bad for memory that is offline but also bad
       for subsection hotadd with ZONE_DEVICE, whereby the memmap of the
       first PFN of a section might contain garbage.
    
     - Sections belonging to mixed nodes are not properly considered.
    
    As memory blocks might belong to multiple nodes, we would have to walk
    all pageblocks (or at least subsections) within present sections.
    However, we don't have a way to identify whether a memmap that is not
    online was initialized (relevant for ZONE_DEVICE).  This makes things
    more complicated.
    
    Luckily, we can piggy pack on the node span and the nid stored in memory
    blocks.  Currently, the node span is grown when calling
    move_pfn_range_to_zone() - e.g., when onlining memory, and shrunk when
    removing memory, before calling try_offline_node().  Sysfs links are
    created via link_mem_sections(), e.g., during boot or when adding
    memory.
    
    If the node still spans memory or if any memory block belongs to the
    nid, we don't set the node offline.  As memory blocks that span multiple
    nodes cannot get offlined, the nid stored in memory blocks is reliable
    enough (for such online memory blocks, the node still spans the memory).
    
    Introduce for_each_memory_block() to efficiently walk all memory blocks.
    
    Note: We will soon stop shrinking the ZONE_DEVICE zone and the node span
    when removing ZONE_DEVICE memory to fix similar issues (access of
    garbage memmaps) - until we have a reliable way to identify whether
    these memmaps were properly initialized.  This implies later, that once
    a node had ZONE_DEVICE memory, we won't be able to set a node offline -
    which should be acceptable.
    
    Since commit f1dd2cd13c4b ("mm, memory_hotplug: do not associate
    hotadded memory to zones until online") memory that is added is not
    assoziated with a zone/node (memmap not initialized).  The introducing
    commit 60a5a19e7419 ("memory-hotplug: remove sysfs file of node")
    already missed that we could have multiple nodes for a section and that
    the zone/node span is updated when onlining pages, not when adding them.
    
    I tested this by hotplugging two DIMMs to a memory-less and cpu-less
    NUMA node.  The node is properly onlined when adding the DIMMs.  When
    removing the DIMMs, the node is properly offlined.
    
    Masayoshi Mizuma reported:
    
    : Without this patch, memory hotplug fails as panic:
    :
    :  BUG: kernel NULL pointer dereference, address: 0000000000000000
    :  ...
    :  Call Trace:
    :   remove_memory_block_devices+0x81/0xc0
    :   try_remove_memory+0xb4/0x130
    :   __remove_memory+0xa/0x20
    :   acpi_memory_device_remove+0x84/0x100
    :   acpi_bus_trim+0x57/0x90
    :   acpi_bus_trim+0x2e/0x90
    :   acpi_device_hotplug+0x2b2/0x4d0
    :   acpi_hotplug_work_fn+0x1a/0x30
    :   process_one_work+0x171/0x380
    :   worker_thread+0x49/0x3f0
    :   kthread+0xf8/0x130
    :   ret_from_fork+0x35/0x40
    
    [david@redhat.com: v3]
      Link: http://lkml.kernel.org/r/20191102120221.7553-1-david@redhat.com
    Link: http://lkml.kernel.org/r/20191028105458.28320-1-david@redhat.com
    Fixes: 60a5a19e7419 ("memory-hotplug: remove sysfs file of node")
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online") # visiable after d0dc12e86b319
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Tested-by: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Cc: Tang Chen <tangchen@cn.fujitsu.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Keith Busch <keith.busch@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Nayna Jain <nayna@linux.ibm.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd7b48f6ca129015311f15f263e2ab735802886f
Author: Laura Abbott <labbott@redhat.com>
Date:   Fri Nov 15 17:34:50 2019 -0800

    mm: slub: really fix slab walking for init_on_free
    
    commit aea4df4c53f754cc229edde6c5465e481311cc49 upstream.
    
    Commit 1b7e816fc80e ("mm: slub: Fix slab walking for init_on_free")
    fixed one problem with the slab walking but missed a key detail: When
    walking the list, the head and tail pointers need to be updated since we
    end up reversing the list as a result.  Without doing this, bulk free is
    broken.
    
    One way this is exposed is a NULL pointer with slub_debug=F:
    
      =============================================================================
      BUG skbuff_head_cache (Tainted: G                T): Object already free
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x000000000d2d2f8f objects=16 used=3 fp=0x0000000064309071 flags=0x3fff00000000201
      BUG: kernel NULL pointer dereference, address: 0000000000000000
      Oops: 0000 [#1] PREEMPT SMP PTI
      RIP: 0010:print_trailer+0x70/0x1d5
      Call Trace:
       <IRQ>
       free_debug_processing.cold.37+0xc9/0x149
       __slab_free+0x22a/0x3d0
       kmem_cache_free_bulk+0x415/0x420
       __kfree_skb_flush+0x30/0x40
       net_rx_action+0x2dd/0x480
       __do_softirq+0xf0/0x246
       irq_exit+0x93/0xb0
       do_IRQ+0xa0/0x110
       common_interrupt+0xf/0xf
       </IRQ>
    
    Given we're now almost identical to the existing debugging code which
    correctly walks the list, combine with that.
    
    Link: https://lkml.kernel.org/r/20191104170303.GA50361@gandi.net
    Link: http://lkml.kernel.org/r/20191106222208.26815-1-labbott@redhat.com
    Fixes: 1b7e816fc80e ("mm: slub: Fix slab walking for init_on_free")
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Reported-by: Thibaut Sautereau <thibaut.sautereau@clip-os.org>
    Acked-by: David Rientjes <rientjes@google.com>
    Tested-by: Alexander Potapenko <glider@google.com>
    Acked-by: Alexander Potapenko <glider@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <clipos@ssi.gouv.fr>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c50b678b1c42a1c7653ff532b9825d4e1239fe90
Author: Roman Gushchin <guro@fb.com>
Date:   Fri Nov 15 17:34:46 2019 -0800

    mm: hugetlb: switch to css_tryget() in hugetlb_cgroup_charge_cgroup()
    
    commit 0362f326d86c645b5e96b7dbc3ee515986ed019d upstream.
    
    An exiting task might belong to an offline cgroup.  In this case an
    attempt to grab a cgroup reference from the task can end up with an
    infinite loop in hugetlb_cgroup_charge_cgroup(), because neither the
    cgroup will become online, neither the task will be migrated to a live
    cgroup.
    
    Fix this by switching over to css_tryget().  As css_tryget_online()
    can't guarantee that the cgroup won't go offline, in most cases the
    check doesn't make sense.  In this particular case users of
    hugetlb_cgroup_charge_cgroup() are not affected by this change.
    
    A similar problem is described by commit 18fa84a2db0e ("cgroup: Use
    css_tryget() instead of css_tryget_online() in task_get_css()").
    
    Link: http://lkml.kernel.org/r/20191106225131.3543616-2-guro@fb.com
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89ddfb734a06f98ed173477e632ae5c541864f9a
Author: Roman Gushchin <guro@fb.com>
Date:   Fri Nov 15 17:34:43 2019 -0800

    mm: memcg: switch to css_tryget() in get_mem_cgroup_from_mm()
    
    commit 00d484f354d85845991b40141d40ba9e5eb60faf upstream.
    
    We've encountered a rcu stall in get_mem_cgroup_from_mm():
    
      rcu: INFO: rcu_sched self-detected stall on CPU
      rcu: 33-....: (21000 ticks this GP) idle=6c6/1/0x4000000000000002 softirq=35441/35441 fqs=5017
      (t=21031 jiffies g=324821 q=95837) NMI backtrace for cpu 33
      <...>
      RIP: 0010:get_mem_cgroup_from_mm+0x2f/0x90
      <...>
       __memcg_kmem_charge+0x55/0x140
       __alloc_pages_nodemask+0x267/0x320
       pipe_write+0x1ad/0x400
       new_sync_write+0x127/0x1c0
       __kernel_write+0x4f/0xf0
       dump_emit+0x91/0xc0
       writenote+0xa0/0xc0
       elf_core_dump+0x11af/0x1430
       do_coredump+0xc65/0xee0
       get_signal+0x132/0x7c0
       do_signal+0x36/0x640
       exit_to_usermode_loop+0x61/0xd0
       do_syscall_64+0xd4/0x100
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The problem is caused by an exiting task which is associated with an
    offline memcg.  We're iterating over and over in the do {} while
    (!css_tryget_online()) loop, but obviously the memcg won't become online
    and the exiting task won't be migrated to a live memcg.
    
    Let's fix it by switching from css_tryget_online() to css_tryget().
    
    As css_tryget_online() cannot guarantee that the memcg won't go offline,
    the check is usually useless, except some rare cases when for example it
    determines if something should be presented to a user.
    
    A similar problem is described by commit 18fa84a2db0e ("cgroup: Use
    css_tryget() instead of css_tryget_online() in task_get_css()").
    
    Johannes:
    
    : The bug aside, it doesn't matter whether the cgroup is online for the
    : callers.  It used to matter when offlining needed to evacuate all charges
    : from the memcg, and so needed to prevent new ones from showing up, but we
    : don't care now.
    
    Link: http://lkml.kernel.org/r/20191106225131.3543616-1-guro@fb.com
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Shakeel Butt <shakeeb@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Michal Koutn <mkoutny@suse.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69f58f7cc486d40c329be5e1d716eb43671a7a2b
Author: Yang Shi <yang.shi@linux.alibaba.com>
Date:   Fri Nov 15 17:34:33 2019 -0800

    mm: mempolicy: fix the wrong return value and potential pages leak of mbind
    
    commit a85dfc305a21acfc48fa28a0fa0a0cb6ad496120 upstream.
    
    Commit d883544515aa ("mm: mempolicy: make the behavior consistent when
    MPOL_MF_MOVE* and MPOL_MF_STRICT were specified") fixed the return value
    of mbind() for a couple of corner cases.  But, it altered the errno for
    some other cases, for example, mbind() should return -EFAULT when part
    or all of the memory range specified by nodemask and maxnode points
    outside your accessible address space, or there was an unmapped hole in
    the specified memory range specified by addr and len.
    
    Fix this by preserving the errno returned by queue_pages_range().  And,
    the pagelist may be not empty even though queue_pages_range() returns
    error, put the pages back to LRU since mbind_range() is not called to
    really apply the policy so those pages should not be migrated, this is
    also the old behavior before the problematic commit.
    
    Link: http://lkml.kernel.org/r/1572454731-3925-1-git-send-email-yang.shi@linux.alibaba.com
    Fixes: d883544515aa ("mm: mempolicy: make the behavior consistent when MPOL_MF_MOVE* and MPOL_MF_STRICT were specified")
    Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
    Reported-by: Li Xinhai <lixinhai.lxh@gmail.com>
    Reviewed-by: Li Xinhai <lixinhai.lxh@gmail.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>    [4.19 and 5.2+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f12857f36e5c31894b3f7104dbc62f026ebf02c1
Author: Eric Auger <eric.auger@redhat.com>
Date:   Fri Nov 8 16:58:03 2019 +0100

    iommu/vt-d: Fix QI_DEV_IOTLB_PFSID and QI_DEV_EIOTLB_PFSID macros
    
    commit 4e7120d79edb31e4ee68e6f8421448e4603be1e9 upstream.
    
    For both PASID-based-Device-TLB Invalidate Descriptor and
    Device-TLB Invalidate Descriptor, the Physical Function Source-ID
    value is split according to this layout:
    
    PFSID[3:0] is set at offset 12 and PFSID[15:4] is put at offset 52.
    Fix the part laid out at offset 52.
    
    Fixes: 0f725561e1684 ("iommu/vt-d: Add definitions for PFSID")
    Signed-off-by: Eric Auger <eric.auger@redhat.com>
    Acked-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.19+
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 765cabc0a40770710d39740626c8733dbc559f5b
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Sun Nov 10 11:30:48 2019 +0000

    net: ethernet: dwmac-sun8i: Use the correct function in exit path
    
    commit 40a1dcee2d1846a24619fe9ca45c661ca0db7dda upstream.
    
    When PHY is not powered, the probe function fail and some resource are
    still unallocated.
    Furthermore some BUG happens:
    dwmac-sun8i 5020000.ethernet: EMAC reset timeout
    ------------[ cut here ]------------
    kernel BUG at /linux-next/net/core/dev.c:9844!
    
    So let's use the right function (stmmac_pltfr_remove) in the error path.
    
    Fixes: 9f93ac8d4085 ("net-next: stmmac: Add dwmac-sun8i")
    Cc: <stable@vger.kernel.org> # v4.15+
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f12f3277f06c0c8b403ac93c8a8fcd054238b5c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 8 21:34:24 2019 +0100

    ntp/y2038: Remove incorrect time_t truncation
    
    commit 2f5841349df281ecf8f81cc82d869b8476f0db0b upstream.
    
    A cast to 'time_t' was accidentally left in place during the
    conversion of __do_adjtimex() to 64-bit timestamps, so the
    resulting value is incorrectly truncated.
    
    Remove the cast so the 64-bit time gets propagated correctly.
    
    Fixes: ead25417f82e ("timex: use __kernel_timex internally")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191108203435.112759-2-arnd@arndb.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e8c90e7448c06a9bace21fc0b5ee6796720bb1c
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Tue Nov 12 14:47:56 2019 -0800

    Revert "drm/i915/ehl: Update MOCS table for EHL"
    
    commit ed77d88752aea56b33731aee42e7146379b90769 upstream.
    
    This reverts commit f4071997f1de016780ec6b79c63d90cd5886ee83.
    
    These extra EHL entries won't behave as expected without a bit more work
    on the kernel side so let's drop them until that kernel work has had a
    chance to land.  Userspace trying to use these new entries won't get the
    advantage of the new functionality these entries are meant to provide,
    but at least it won't misbehave.
    
    When we do add these back in the future, we'll probably want to
    explicitly use separate tables for ICL and EHL so that userspace
    software that mistakenly uses these entries (which are undefined on ICL)
    sees the same behavior it sees with all the other undefined entries.
    
    Cc: Francisco Jerez <francisco.jerez.plata@intel.com>
    Cc: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: <stable@vger.kernel.org> # v5.3+
    Fixes: f4071997f1de ("drm/i915/ehl: Update MOCS table for EHL")
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191112224757.25116-1-matthew.d.roper@intel.com
    Reviewed-by: Francisco Jerez <currojerez@riseup.net>
    (cherry picked from commit 046091758b50a5fff79726a31c1391614a3d84c8)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea40e7e4f6b81d1c6c3f018d1427cda4225f5ac1
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Fri Nov 1 16:20:24 2019 +0200

    drm/i915: update rawclk also on resume
    
    commit 2f216a8507153578efc309c821528a6b81628cd2 upstream.
    
    Since CNP it's possible for rawclk to have two different values, 19.2
    and 24 MHz. If the value indicated by SFUSE_STRAP register is different
    from the power on default for PCH_RAWCLK_FREQ, we'll end up having a
    mismatch between the rawclk hardware and software states after
    suspend/resume. On previous platforms this used to work by accident,
    because the power on defaults worked just fine.
    
    Update the rawclk also on resume. The natural place to do this would be
    intel_modeset_init_hw(), however VLV/CHV need it done before
    intel_power_domains_init_hw(). Thus put it there even if it feels
    slightly out of place.
    
    v2: Call intel_update_rawclck() in intel_power_domains_init_hw() for all
        platforms (Ville).
    
    Reported-by: Shawn Lee <shawn.c.lee@intel.com>
    Cc: Shawn Lee <shawn.c.lee@intel.com>
    Cc: Ville Syrjala <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Shawn Lee <shawn.c.lee@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191101142024.13877-1-jani.nikula@intel.com
    (cherry picked from commit 59ed05ccdded5eb18ce012eff3d01798ac8535fa)
    Cc: <stable@vger.kernel.org> # v4.15+
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9ed38e57483d63f40bb183582bf0dfad59f6211
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Nov 13 16:12:46 2019 -0700

    io_uring: ensure registered buffer import returns the IO length
    
    commit 5e559561a8d7e6d4adfce6aa8fbf3daa3dec1577 upstream.
    
    A test case was reported where two linked reads with registered buffers
    failed the second link always. This is because we set the expected value
    of a request in req->result, and if we don't get this result, then we
    fail the dependent links. For some reason the registered buffer import
    returned -ERROR/0, while the normal import returns -ERROR/length. This
    broke linked commands with registered buffers.
    
    Fix this by making io_import_fixed() correctly return the mapped length.
    
    Cc: stable@vger.kernel.org # v5.3
    Reported-by: 李通洲 <carter.li@eoitek.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d77bdcae8846c67630f6633c9b110137edb65e60
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Nov 3 13:55:43 2019 -0500

    ecryptfs_lookup_interpose(): lower_dentry->d_parent is not stable either
    
    commit 762c69685ff7ad5ad7fee0656671e20a0c9c864d upstream.
    
    We need to get the underlying dentry of parent; sure, absent the races
    it is the parent of underlying dentry, but there's nothing to prevent
    losing a timeslice to preemtion in the middle of evaluation of
    lower_dentry->d_parent->d_inode, having another process move lower_dentry
    around and have its (ex)parent not pinned anymore and freed on memory
    pressure.  Then we regain CPU and try to fetch ->d_inode from memory
    that is freed by that point.
    
    dentry->d_parent *is* stable here - it's an argument of ->lookup() and
    we are guaranteed that it won't be moved anywhere until we feed it
    to d_add/d_splice_alias.  So we safely go that way to get to its
    underlying dentry.
    
    Cc: stable@vger.kernel.org # since 2009 or so
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fecee4bb9445828c0e13e2adec4cc800e061def
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Nov 3 13:45:04 2019 -0500

    ecryptfs_lookup_interpose(): lower_dentry->d_inode is not stable
    
    commit e72b9dd6a5f17d0fb51f16f8685f3004361e83d0 upstream.
    
    lower_dentry can't go from positive to negative (we have it pinned),
    but it *can* go from negative to positive.  So fetching ->d_inode
    into a local variable, doing a blocking allocation, checking that
    now ->d_inode is non-NULL and feeding the value we'd fetched
    earlier to a function that won't accept NULL is not a good idea.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 001b43f3b4809e67ff32c09fdb6722b1cdb16e4a
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Oct 16 18:38:16 2019 +0800

    x86/quirks: Disable HPET on Intel Coffe Lake platforms
    
    commit fc5db58539b49351e76f19817ed1102bf7c712d0 upstream.
    
    Some Coffee Lake platforms have a skewed HPET timer once the SoCs entered
    PC10, which in consequence marks TSC as unstable because HPET is used as
    watchdog clocksource for TSC.
    
    Harry Pan tried to work around it in the clocksource watchdog code [1]
    thereby creating a circular dependency between HPET and TSC. This also
    ignores the fact, that HPET is not only unsuitable as watchdog clocksource
    on these systems, it becomes unusable in general.
    
    Disable HPET on affected platforms.
    
    Suggested-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203183
    Link: https://lore.kernel.org/lkml/20190516090651.1396-1-harry.pan@intel.com/ [1]
    Link: https://lkml.kernel.org/r/20191016103816.30650-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4483e3def11b61d95cb833e37f474de6c8052cd5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Nov 13 19:29:38 2019 +0100

    i2c: acpi: Force bus speed to 400KHz if a Silead touchscreen is present
    
    commit 7574c0db2e68c4d0bae9d415a683bdd8b2a761e9 upstream.
    
    Many cheap devices use Silead touchscreen controllers. Testing has shown
    repeatedly that these touchscreen controllers work fine at 400KHz, but for
    unknown reasons do not work properly at 100KHz. This has been seen on
    both ARM and x86 devices using totally different i2c controllers.
    
    On some devices the ACPI tables list another device at the same I2C-bus
    as only being capable of 100KHz, testing has shown that these other
    devices work fine at 400KHz (as can be expected of any recent I2C hw).
    
    This commit makes i2c_acpi_find_bus_speed() always return 400KHz if a
    Silead touchscreen controller is present, fixing the touchscreen not
    working on devices which ACPI tables' wrongly list another device on the
    same bus as only being capable of 100KHz.
    
    Specifically this fixes the touchscreen on the Jumper EZpad 6 m4 not
    working.
    
    Reported-by: youling 257 <youling257@gmail.com>
    Tested-by: youling 257 <youling257@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    [wsa: rewording warning a little]
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e3caefb0deb0a72baebb6781957b1df70fd3d13
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Fri Oct 4 16:49:34 2019 -0400

    IB/hfi1: Use a common pad buffer for 9B and 16B packets
    
    commit 22bb13653410424d9fce8d447506a41f8292f22f upstream.
    
    There is no reason for a different pad buffer for the two
    packet types.
    
    Expand the current buffer allocation to allow for both
    packet types.
    
    Fixes: f8195f3b14a0 ("IB/hfi1: Eliminate allocation while atomic")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Kaike Wan <kaike.wan@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Link: https://lore.kernel.org/r/20191004204934.26838.13099.stgit@awfm-01.aw.intel.com
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3790303544f441fd59345d00b7f024685bcbe007
Author: James Erwin <james.erwin@intel.com>
Date:   Fri Nov 1 15:20:59 2019 -0400

    IB/hfi1: Ensure full Gen3 speed in a Gen4 system
    
    commit a9c3c4c597704b3a1a2b9bef990e7d8a881f6533 upstream.
    
    If an hfi1 card is inserted in a Gen4 systems, the driver will avoid the
    gen3 speed bump and the card will operate at half speed.
    
    This is because the driver avoids the gen3 speed bump when the parent bus
    speed isn't identical to gen3, 8.0GT/s.  This is not compatible with gen4
    and newer speeds.
    
    Fix by relaxing the test to explicitly look for the lower capability
    speeds which inherently allows for gen4 and all future speeds.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Link: https://lore.kernel.org/r/20191101192059.106248.1699.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: James Erwin <james.erwin@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2bef05daedefa6cb807897254f465627121b081
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Fri Oct 25 15:58:42 2019 -0400

    IB/hfi1: TID RDMA WRITE should not return IB_WC_RNR_RETRY_EXC_ERR
    
    commit ce8e8087cf3b5b4f19d29248bfc7deef95525490 upstream.
    
    Normal RDMA WRITE request never returns IB_WC_RNR_RETRY_EXC_ERR to ULPs
    because it does not need post receive buffer on the responder side.
    Consequently, as an enhancement to normal RDMA WRITE request inside the
    hfi1 driver, TID RDMA WRITE request should not return such an error status
    to ULPs, although it does receive RNR NAKs from the responder when TID
    resources are not available. This behavior is violated when
    qp->s_rnr_retry_cnt is set in current hfi1 implementation.
    
    This patch enforces these semantics by avoiding any reaction to the updates
    of the RNR QP attributes.
    
    Fixes: 3c6cb20a0d17 ("IB/hfi1: Add TID RDMA WRITE functionality into RDMA verbs")
    Link: https://lore.kernel.org/r/20191025195842.106825.71532.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afbdf95e9a21fcda453dc3654f5acbfa7ec08820
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Fri Oct 25 15:58:36 2019 -0400

    IB/hfi1: Calculate flow weight based on QP MTU for TID RDMA
    
    commit c2be3865a1763c4be39574937e1aae27e917af4d upstream.
    
    For a TID RDMA WRITE request, a QP on the responder side could be put into
    a queue when a hardware flow is not available. A RNR NAK will be returned
    to the requester with a RNR timeout value based on the position of the QP
    in the queue. The tid_rdma_flow_wt variable is used to calculate the
    timeout value and is determined by using a MTU of 4096 at the module
    loading time. This could reduce the timeout value by half from the desired
    value, leading to excessive RNR retries.
    
    This patch fixes the issue by calculating the flow weight with the real
    MTU assigned to the QP.
    
    Fixes: 07b923701e38 ("IB/hfi1: Add functions to receive TID RDMA WRITE request")
    Link: https://lore.kernel.org/r/20191025195836.106825.77769.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c083380b08926dcff1ef38e5d71250fee2f92786
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Fri Oct 25 15:58:30 2019 -0400

    IB/hfi1: Ensure r_tid_ack is valid before building TID RDMA ACK packet
    
    commit c1abd865bd125015783286b353abb8da51644f59 upstream.
    
    The index r_tid_ack is used to indicate the next TID RDMA WRITE request to
    acknowledge in the ring s_ack_queue[] on the responder side and should be
    set to a valid index other than its initial value before r_tid_tail is
    advanced to the next TID RDMA WRITE request and particularly before a TID
    RDMA ACK is built. Otherwise, a NULL pointer dereference may result:
    
      BUG: unable to handle kernel paging request at ffff9a32d27abff8
      IP: [<ffffffffc0d87ea6>] hfi1_make_tid_rdma_pkt+0x476/0xcb0 [hfi1]
      PGD 2749032067 PUD 0
      Oops: 0000 1 SMP
      Modules linked in: osp(OE) ofd(OE) lfsck(OE) ost(OE) mgc(OE) osd_zfs(OE) lquota(OE) lustre(OE) lmv(OE) mdc(OE) lov(OE) fid(OE) fld(OE) ko2iblnd(OE) ptlrpc(OE) obdclass(OE) lnet(OE) libcfs(OE) ib_ipoib(OE) hfi1(OE) rdmavt(OE) nfsv3 nfs_acl rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs lockd grace fscache ib_isert iscsi_target_mod target_core_mod ib_ucm dm_mirror dm_region_hash dm_log mlx5_ib dm_mod zfs(POE) rpcrdma sunrpc rdma_ucm ib_uverbs opa_vnic ib_iser zunicode(POE) ib_umad zavl(POE) icp(POE) sb_edac intel_powerclamp coretemp rdma_cm intel_rapl iosf_mbi iw_cm libiscsi scsi_transport_iscsi kvm ib_cm iTCO_wdt mxm_wmi iTCO_vendor_support irqbypass crc32_pclmul ghash_clmulni_intel aesni_intel lrw gf128mul glue_helper ablk_helper cryptd zcommon(POE) znvpair(POE) pcspkr spl(OE) mei_me
      sg mei ioatdma lpc_ich joydev i2c_i801 shpchp ipmi_si ipmi_devintf ipmi_msghandler wmi acpi_power_meter ip_tables xfs libcrc32c sd_mod crc_t10dif crct10dif_generic mgag200 mlx5_core drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ixgbe ahci ttm mlxfw ib_core libahci devlink mdio crct10dif_pclmul crct10dif_common drm ptp libata megaraid_sas crc32c_intel i2c_algo_bit pps_core i2c_core dca [last unloaded: rdmavt]
      CPU: 15 PID: 68691 Comm: kworker/15:2H Kdump: loaded Tainted: P W OE ------------ 3.10.0-862.2.3.el7_lustre.x86_64 #1
      Hardware name: Intel Corporation S2600WTT/S2600WTT, BIOS SE5C610.86B.01.01.0016.033120161139 03/31/2016
      Workqueue: hfi0_0 _hfi1_do_tid_send [hfi1]
      task: ffff9a01f47faf70 ti: ffff9a11776a8000 task.ti: ffff9a11776a8000
      RIP: 0010:[<ffffffffc0d87ea6>] [<ffffffffc0d87ea6>] hfi1_make_tid_rdma_pkt+0x476/0xcb0 [hfi1]
      RSP: 0018:ffff9a11776abd08 EFLAGS: 00010002
      RAX: ffff9a32d27abfc0 RBX: ffff99f2d27aa000 RCX: 00000000ffffffff
      RDX: 0000000000000000 RSI: 0000000000000220 RDI: ffff99f2ffc05300
      RBP: ffff9a11776abd88 R08: 000000000001c310 R09: ffffffffc0d87ad4
      R10: 0000000000000000 R11: 0000000000000000 R12: ffff9a117a423c00
      R13: ffff9a117a423c00 R14: ffff9a03500c0000 R15: ffff9a117a423cb8
      FS: 0000000000000000(0000) GS:ffff9a117e9c0000(0000) knlGS:0000000000000000
      CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffff9a32d27abff8 CR3: 0000002748a0e000 CR4: 00000000001607e0
      Call Trace:
      [<ffffffffc0d88874>] _hfi1_do_tid_send+0x194/0x320 [hfi1]
      [<ffffffffaf0b2dff>] process_one_work+0x17f/0x440
      [<ffffffffaf0b3ac6>] worker_thread+0x126/0x3c0
      [<ffffffffaf0b39a0>] ? manage_workers.isra.24+0x2a0/0x2a0
      [<ffffffffaf0bae31>] kthread+0xd1/0xe0
      [<ffffffffaf0bad60>] ? insert_kthread_work+0x40/0x40
      [<ffffffffaf71f5f7>] ret_from_fork_nospec_begin+0x21/0x21
      [<ffffffffaf0bad60>] ? insert_kthread_work+0x40/0x40
      hfi1 0000:05:00.0: hfi1_0: reserved_op: opcode 0xf2, slot 2, rsv_used 1, rsv_ops 1
      Code: 00 00 41 8b 8d d8 02 00 00 89 c8 48 89 45 b0 48 c1 65 b0 06 48 8b 83 a0 01 00 00 48 01 45 b0 48 8b 45 b0 41 80 bd 10 03 00 00 00 <48> 8b 50 38 4c 8d 7a 50 74 45 8b b2 d0 00 00 00 85 f6 0f 85 72
      RIP [<ffffffffc0d87ea6>] hfi1_make_tid_rdma_pkt+0x476/0xcb0 [hfi1]
      RSP <ffff9a11776abd08>
      CR2: ffff9a32d27abff8
    
    This problem can happen if a RESYNC request is received before r_tid_ack
    is modified.
    
    This patch fixes the issue by making sure that r_tid_ack is set to a valid
    value before a TID RDMA ACK is built. Functions are defined to simplify
    the code.
    
    Fixes: 07b923701e38 ("IB/hfi1: Add functions to receive TID RDMA WRITE request")
    Fixes: 7cf0ad679de4 ("IB/hfi1: Add a function to receive TID RDMA RESYNC packet")
    Link: https://lore.kernel.org/r/20191025195830.106825.44022.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a5a32c2d6482d4fbb8a5f207885981debdf733c
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon Nov 11 14:12:27 2019 -0800

    KVM: MMU: Do not treat ZONE_DEVICE pages as being reserved
    
    commit a78986aae9b2988f8493f9f65a587ee433e83bc3 upstream.
    
    Explicitly exempt ZONE_DEVICE pages from kvm_is_reserved_pfn() and
    instead manually handle ZONE_DEVICE on a case-by-case basis.  For things
    like page refcounts, KVM needs to treat ZONE_DEVICE pages like normal
    pages, e.g. put pages grabbed via gup().  But for flows such as setting
    A/D bits or shifting refcounts for transparent huge pages, KVM needs to
    to avoid processing ZONE_DEVICE pages as the flows in question lack the
    underlying machinery for proper handling of ZONE_DEVICE pages.
    
    This fixes a hang reported by Adam Borowski[*] in dev_pagemap_cleanup()
    when running a KVM guest backed with /dev/dax memory, as KVM straight up
    doesn't put any references to ZONE_DEVICE pages acquired by gup().
    
    Note, Dan Williams proposed an alternative solution of doing put_page()
    on ZONE_DEVICE pages immediately after gup() in order to simplify the
    auditing needed to ensure is_zone_device_page() is called if and only if
    the backing device is pinned (via gup()).  But that approach would break
    kvm_vcpu_{un}map() as KVM requires the page to be pinned from map() 'til
    unmap() when accessing guest memory, unlike KVM's secondary MMU, which
    coordinates with mmu_notifier invalidations to avoid creating stale
    page references, i.e. doesn't rely on pages being pinned.
    
    [*] http://lkml.kernel.org/r/20190919115547.GA17963@angband.pl
    
    Reported-by: Adam Borowski <kilobyte@angband.pl>
    Analyzed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Dan Williams <dan.j.williams@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: 3565fce3a659 ("mm, x86: get_user_pages() for dax mappings")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a333a48e33938962bcc3b7ac64222e15795bd060
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri Nov 15 11:32:36 2019 -0800

    Input: synaptics-rmi4 - destroy F54 poller workqueue when removing
    
    commit ba60cf9f78f0d7c8e73c7390608f7f818ee68aa0 upstream.
    
    The driver forgets to destroy workqueue in remove() similarly to what is
    done when probe() fails. Add a call to destroy_workqueue() to fix it.
    
    Since unregistration will wait for the work to finish, we do not need to
    cancel/flush the work instance in remove().
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191114023405.31477-1-hslester96@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abc220de252600db220d2fc0c0538c764da56f06
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Tue Nov 12 16:47:08 2019 -0800

    Input: synaptics-rmi4 - clear IRQ enables for F54
    
    commit 549766ac2ac1f6c8bb85906bbcea759541bb19a2 upstream.
    
    The driver for F54 just polls the status and doesn't even have a IRQ
    handler registered. Make sure to disable all F54 IRQs, so we don't crash
    the kernel on a nonexistent handler.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Link: https://lore.kernel.org/r/20191105114402.6009-1-l.stach@pengutronix.de
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ffa897341104761c64d4fc8e749fa51f29cf49e
Author: Andrew Duggan <aduggan@synaptics.com>
Date:   Mon Nov 4 16:07:30 2019 -0800

    Input: synaptics-rmi4 - do not consume more data than we have (F11, F12)
    
    commit 5d40d95e7e64756cc30606c2ba169271704d47cb upstream.
    
    Currently, rmi_f11_attention() and rmi_f12_attention() functions update
    the attn_data data pointer and size based on the size of the expected
    size of the attention data. However, if the actual valid data in the
    attn buffer is less then the expected value then the updated data
    pointer will point to memory beyond the end of the attn buffer. Using
    the calculated valid_bytes instead will prevent this from happening.
    
    Signed-off-by: Andrew Duggan <aduggan@synaptics.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191025002527.3189-3-aduggan@synaptics.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5995d6552db04e1c72d2b85a6eda75a314a12dc
Author: Andrew Duggan <aduggan@synaptics.com>
Date:   Mon Nov 4 16:06:44 2019 -0800

    Input: synaptics-rmi4 - disable the relative position IRQ in the F12 driver
    
    commit f6aabe1ff1d9d7bad0879253011216438bdb2530 upstream.
    
    This patch fixes an issue seen on HID touchpads which report finger
    positions using RMI4 Function 12. The issue manifests itself as
    spurious button presses as described in:
    https://www.spinics.net/lists/linux-input/msg58618.html
    
    Commit 24d28e4f1271 ("Input: synaptics-rmi4 - convert irq distribution
    to irq_domain") switched the RMI4 driver to using an irq_domain to handle
    RMI4 function interrupts. Functions with more then one interrupt now have
    each interrupt mapped to their own IRQ and IRQ handler. The result of
    this change is that the F12 IRQ handler was now getting called twice. Once
    for the absolute data interrupt and once for the relative data interrupt.
    For HID devices, calling rmi_f12_attention() a second time causes the
    attn_data data pointer and size to be set incorrectly. When the touchpad
    button is pressed, F30 will generate an interrupt and attempt to read the
    F30 data from the invalid attn_data data pointer and report incorrect
    button events.
    
    This patch disables the F12 relative interrupt which prevents
    rmi_f12_attention() from being called twice.
    
    Signed-off-by: Andrew Duggan <aduggan@synaptics.com>
    Reported-by: Simon Wood <simon@mungewell.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191025002527.3189-2-aduggan@synaptics.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61be3895b44923955d94b6884d55ae9da49a4e4a
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Mon Nov 4 15:58:34 2019 -0800

    Input: synaptics-rmi4 - fix video buffer size
    
    commit 003f01c780020daa9a06dea1db495b553a868c29 upstream.
    
    The video buffer used by the queue is a vb2_v4l2_buffer, not a plain
    vb2_buffer. Using the wrong type causes the allocation of the buffer
    storage to be too small, causing a out of bounds write when
    __init_vb2_v4l2_buffer initializes the buffer.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Fixes: 3a762dbd5347 ("[media] Input: synaptics-rmi4 - add support for F54 diagnostics")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191104114454.10500-1-l.stach@pengutronix.de
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f040890fc2efba590d5e47dc13770946132e144
Author: Oliver Neukum <oneukum@suse.com>
Date:   Fri Nov 15 11:35:05 2019 -0800

    Input: ff-memless - kill timer in destroy()
    
    commit fa3a5a1880c91bb92594ad42dfe9eedad7996b86 upstream.
    
    No timer must be left running when the device goes away.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-and-tested-by: syzbot+b6c55daa701fc389e286@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1573726121.17351.3.camel@suse.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bbc2a7fabca1fa18cc02787fe559631d94a0303
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Wed Oct 9 17:02:30 2019 +0200

    cgroup: freezer: call cgroup_enter_frozen() with preemption disabled in ptrace_stop()
    
    commit 937c6b27c73e02cd4114f95f5c37ba2c29fadba1 upstream.
    
    ptrace_stop() does preempt_enable_no_resched() to avoid the preemption,
    but after that cgroup_enter_frozen() does spin_lock/unlock and this adds
    another preemption point.
    
    Reported-and-tested-by: Bruce Ashfield <bruce.ashfield@gmail.com>
    Fixes: 76f969e8948d ("cgroup: cgroup v2 freezer")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fdb261cdeff93dc9e36d10708996895d36f97d7
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Nov 8 16:11:56 2019 +0000

    Btrfs: fix log context list corruption after rename exchange operation
    
    commit e6c617102c7e4ac1398cb0b98ff1f0727755b520 upstream.
    
    During rename exchange we might have successfully log the new name in the
    source root's log tree, in which case we leave our log context (allocated
    on stack) in the root's list of log contextes. However we might fail to
    log the new name in the destination root, in which case we fallback to
    a transaction commit later and never sync the log of the source root,
    which causes the source root log context to remain in the list of log
    contextes. This later causes invalid memory accesses because the context
    was allocated on stack and after rename exchange finishes the stack gets
    reused and overwritten for other purposes.
    
    The kernel's linked list corruption detector (CONFIG_DEBUG_LIST=y) can
    detect this and report something like the following:
    
      [  691.489929] ------------[ cut here ]------------
      [  691.489947] list_add corruption. prev->next should be next (ffff88819c944530), but was ffff8881c23f7be4. (prev=ffff8881c23f7a38).
      [  691.489967] WARNING: CPU: 2 PID: 28933 at lib/list_debug.c:28 __list_add_valid+0x95/0xe0
      (...)
      [  691.489998] CPU: 2 PID: 28933 Comm: fsstress Not tainted 5.4.0-rc6-btrfs-next-62 #1
      [  691.490001] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014
      [  691.490003] RIP: 0010:__list_add_valid+0x95/0xe0
      (...)
      [  691.490007] RSP: 0018:ffff8881f0b3faf8 EFLAGS: 00010282
      [  691.490010] RAX: 0000000000000000 RBX: ffff88819c944530 RCX: 0000000000000000
      [  691.490011] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffffffffa2c497e0
      [  691.490013] RBP: ffff8881f0b3fe68 R08: ffffed103eaa4115 R09: ffffed103eaa4114
      [  691.490015] R10: ffff88819c944000 R11: ffffed103eaa4115 R12: 7fffffffffffffff
      [  691.490016] R13: ffff8881b4035610 R14: ffff8881e7b84728 R15: 1ffff1103e167f7b
      [  691.490019] FS:  00007f4b25ea2e80(0000) GS:ffff8881f5500000(0000) knlGS:0000000000000000
      [  691.490021] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [  691.490022] CR2: 00007fffbb2d4eec CR3: 00000001f2a4a004 CR4: 00000000003606e0
      [  691.490025] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [  691.490027] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [  691.490029] Call Trace:
      [  691.490058]  btrfs_log_inode_parent+0x667/0x2730 [btrfs]
      [  691.490083]  ? join_transaction+0x24a/0xce0 [btrfs]
      [  691.490107]  ? btrfs_end_log_trans+0x80/0x80 [btrfs]
      [  691.490111]  ? dget_parent+0xb8/0x460
      [  691.490116]  ? lock_downgrade+0x6b0/0x6b0
      [  691.490121]  ? rwlock_bug.part.0+0x90/0x90
      [  691.490127]  ? do_raw_spin_unlock+0x142/0x220
      [  691.490151]  btrfs_log_dentry_safe+0x65/0x90 [btrfs]
      [  691.490172]  btrfs_sync_file+0x9f1/0xc00 [btrfs]
      [  691.490195]  ? btrfs_file_write_iter+0x1800/0x1800 [btrfs]
      [  691.490198]  ? rcu_read_lock_any_held.part.11+0x20/0x20
      [  691.490204]  ? __do_sys_newstat+0x88/0xd0
      [  691.490207]  ? cp_new_stat+0x5d0/0x5d0
      [  691.490218]  ? do_fsync+0x38/0x60
      [  691.490220]  do_fsync+0x38/0x60
      [  691.490224]  __x64_sys_fdatasync+0x32/0x40
      [  691.490228]  do_syscall_64+0x9f/0x540
      [  691.490233]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [  691.490235] RIP: 0033:0x7f4b253ad5f0
      (...)
      [  691.490239] RSP: 002b:00007fffbb2d6078 EFLAGS: 00000246 ORIG_RAX: 000000000000004b
      [  691.490242] RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f4b253ad5f0
      [  691.490244] RDX: 00007fffbb2d5fe0 RSI: 00007fffbb2d5fe0 RDI: 0000000000000003
      [  691.490245] RBP: 000000000000000d R08: 0000000000000001 R09: 00007fffbb2d608c
      [  691.490247] R10: 00000000000002e8 R11: 0000000000000246 R12: 00000000000001f4
      [  691.490248] R13: 0000000051eb851f R14: 00007fffbb2d6120 R15: 00005635a498bda0
    
    This started happening recently when running some test cases from fstests
    like btrfs/004 for example, because support for rename exchange was added
    last week to fsstress from fstests.
    
    So fix this by deleting the log context for the source root from the list
    if we have logged the new name in the source root.
    
    Reported-by: Su Yue <Damenly_Su@gmx.com>
    Fixes: d4682ba03ef618 ("Btrfs: sync log after logging new name")
    CC: stable@vger.kernel.org # 4.19+
    Tested-by: Su Yue <Damenly_Su@gmx.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebd67c3df202e466e8d76bddcb42aced8fe3c6c2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 14 17:56:12 2019 +0100

    ALSA: usb-audio: Fix incorrect size check for processing/extension units
    
    commit 976a68f06b2ea49e2ab67a5f84919a8b105db8be upstream.
    
    The recently introduced unit descriptor validation had some bug for
    processing and extension units, it counts a bControlSize byte twice so
    it expected a bigger size than it should have been.  This seems
    resulting in a probe error on a few devices.
    
    Fix the calculation for proper checks of PU and EU.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191114165613.7422-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edea36e516324affd97dfc6d32960da59ce2130f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Nov 13 12:12:59 2019 +0100

    ALSA: usb-audio: Fix incorrect NULL check in create_yamaha_midi_quirk()
    
    commit cc9dbfa9707868fb0ca864c05e0c42d3f4d15cf2 upstream.
    
    The commit 60849562a5db ("ALSA: usb-audio: Fix possible NULL
    dereference at create_yamaha_midi_quirk()") added NULL checks in
    create_yamaha_midi_quirk(), but there was an overlook.  The code
    allows one of either injd or outjd is NULL, but the second if check
    made returning -ENODEV if any of them is NULL.  Fix it in a proper
    form.
    
    Fixes: 60849562a5db ("ALSA: usb-audio: Fix possible NULL dereference at create_yamaha_midi_quirk()")
    Reported-by: Pavel Machek <pavel@denx.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191113111259.24123-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38109496f3392c419b023554e8fdb621c695e2ea
Author: Henry Lin <henryl@nvidia.com>
Date:   Wed Nov 13 10:14:19 2019 +0800

    ALSA: usb-audio: not submit urb for stopped endpoint
    
    commit 528699317dd6dc722dccc11b68800cf945109390 upstream.
    
    While output urb's snd_complete_urb() is executing, calling
    prepare_outbound_urb() may cause endpoint stopped before
    prepare_outbound_urb() returns and result in next urb submitted
    to stopped endpoint. usb-audio driver cannot re-use it afterwards as
    the urb is still hold by usb stack.
    
    This change checks EP_FLAG_RUNNING flag after prepare_outbound_urb() again
    to let snd_complete_urb() know the endpoint already stopped and does not
    submit next urb. Below kind of error will be fixed:
    
    [  213.153103] usb 1-2: timeout: still 1 active urbs on EP #1
    [  213.164121] usb 1-2: cannot submit urb 0, error -16: unknown error
    
    Signed-off-by: Henry Lin <henryl@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191113021420.13377-1-henryl@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adaccbf1fbe8056a551fafa640b26fa7fbd8ff2b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Nov 9 19:16:58 2019 +0100

    ALSA: usb-audio: Fix missing error check at mixer resolution test
    
    commit 167beb1756791e0806365a3f86a0da10d7a327ee upstream.
    
    A check of the return value from get_cur_mix_raw() is missing at the
    resolution test code in get_min_max_with_quirks(), which may leave the
    variable untouched, leading to a random uninitialized value, as
    detected by syzkaller fuzzer.
    
    Add the missing return error check for fixing that.
    
    Reported-and-tested-by: syzbot+abe1ab7afc62c6bb6377@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191109181658.30368-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9932014fe3f9aae2190f92c12044d471641764fc
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Tue Nov 12 16:03:41 2019 +0100

    net/smc: fix refcount non-blocking connect() -part 2
    
    [ Upstream commit 6d6dd528d5af05dc2d0c773951ed68d630a0c3f1 ]
    
    If an SMC socket is immediately terminated after a non-blocking connect()
    has been called, a memory leak is possible.
    Due to the sock_hold move in
    commit 301428ea3708 ("net/smc: fix refcounting for non-blocking connect()")
    an extra sock_put() is needed in smc_connect_work(), if the internal
    TCP socket is aborted and cancels the sk_stream_wait_connect() of the
    connect worker.
    
    Reported-by: syzbot+4b73ad6fc767e576e275@syzkaller.appspotmail.com
    Fixes: 301428ea3708 ("net/smc: fix refcounting for non-blocking connect()")
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2db6bdfa82af8e21afbc890ca6d85fb4439330ee
Author: Aya Levin <ayal@mellanox.com>
Date:   Sun Nov 10 14:11:56 2019 +0200

    devlink: Add method for time-stamp on reporter's dump
    
    [ Upstream commit d279505b723cba058b604ed8cf9cd4c854e2a041 ]
    
    When setting the dump's time-stamp, use ktime_get_real in addition to
    jiffies. This simplifies the user space implementation and bypasses
    some inconsistent behavior with translating jiffies to current time.
    The time taken is transformed into nsec, to comply with y2038 issue.
    
    Fixes: c8e1da0bf923 ("devlink: Add health report functionality")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d160399ced723d52512bfdf84793629972801f2b
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Nov 12 18:21:52 2019 +0200

    dpaa2-eth: free already allocated channels on probe defer
    
    [ Upstream commit 5aa4277d4368c099223bbcd3a9086f3351a12ce9 ]
    
    The setup_dpio() function tries to allocate a number of channels equal
    to the number of CPUs online. When there are not enough DPCON objects
    already probed, the function will return EPROBE_DEFER. When this
    happens, the already allocated channels are not freed. This results in
    the incapacity of properly probing the next time around.
    Fix this by freeing the channels on the error path.
    
    Fixes: d7f5a9d89a55 ("dpaa2-eth: defer probe on object allocate")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4339c5380596576a310796633262cef407ffdd11
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Sat Nov 9 18:43:06 2019 +0800

    tcp: remove redundant new line from tcp_event_sk_skb
    
    [ Upstream commit dd3d792def0d4f33bbf319982b1878b0c8aaca34 ]
    
    This removes '\n' from trace event class tcp_event_sk_skb to avoid
    redundant new blank line and make output compact.
    
    Fixes: af4325ecc24f ("tcp: expose sk_state in tcp_retransmit_skb tracepoint")
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Yafang Shao <laoar.shao@gmail.com>
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6386726baa377638482cb6fa6632afb73c8b9de8
Author: Jouni Hogander <jouni.hogander@unikie.com>
Date:   Wed Nov 13 13:45:02 2019 +0200

    slip: Fix memory leak in slip_open error path
    
    [ Upstream commit 3b5a39979dafea9d0cd69c7ae06088f7a84cdafa ]
    
    Driver/net/can/slcan.c is derived from slip.c. Memory leak was detected
    by Syzkaller in slcan. Same issue exists in slip.c and this patch is
    addressing the leak in slip.c.
    
    Here is the slcan memory leak trace reported by Syzkaller:
    
    BUG: memory leak unreferenced object 0xffff888067f65500 (size 4096):
      comm "syz-executor043", pid 454, jiffies 4294759719 (age 11.930s)
      hex dump (first 32 bytes):
        73 6c 63 61 6e 30 00 00 00 00 00 00 00 00 00 00 slcan0..........
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
      backtrace:
        [<00000000a06eec0d>] __kmalloc+0x18b/0x2c0
        [<0000000083306e66>] kvmalloc_node+0x3a/0xc0
        [<000000006ac27f87>] alloc_netdev_mqs+0x17a/0x1080
        [<0000000061a996c9>] slcan_open+0x3ae/0x9a0
        [<000000001226f0f9>] tty_ldisc_open.isra.1+0x76/0xc0
        [<0000000019289631>] tty_set_ldisc+0x28c/0x5f0
        [<000000004de5a617>] tty_ioctl+0x48d/0x1590
        [<00000000daef496f>] do_vfs_ioctl+0x1c7/0x1510
        [<0000000059068dbc>] ksys_ioctl+0x99/0xb0
        [<000000009a6eb334>] __x64_sys_ioctl+0x78/0xb0
        [<0000000053d0332e>] do_syscall_64+0x16f/0x580
        [<0000000021b83b99>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
        [<000000008ea75434>] 0xfffffffffffffff
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Signed-off-by: Jouni Hogander <jouni.hogander@unikie.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac5d1468b21baef22d127d035f89f7d4b4332a0e
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Wed Nov 13 11:11:10 2019 +0100

    net: usb: qmi_wwan: add support for Foxconn T77W968 LTE modules
    
    [ Upstream commit 802753cb0b141cf5170ab97fe7e79f5ca10d06b0 ]
    
    These are the Foxconn-branded variants of the Dell DW5821e modules,
    same USB layout as those.
    
    The QMI interface is exposed in USB configuration #1:
    
    P:  Vendor=0489 ProdID=e0b4 Rev=03.18
    S:  Manufacturer=FII
    S:  Product=T77W968 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 478d9be8cbbd65bfae58096d3d7503879d4709f2
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Fri Nov 15 12:39:30 2019 +0100

    net/smc: fix fastopen for non-blocking connect()
    
    [ Upstream commit 8204df72bea1a7d83d0777add6da98a41dfbdc34 ]
    
    FASTOPEN does not work with SMC-sockets. Since SMC allows fallback to
    TCP native during connection start, the FASTOPEN setsockopts trigger
    this fallback, if the SMC-socket is still in state SMC_INIT.
    But if a FASTOPEN setsockopt is called after a non-blocking connect(),
    this is broken, and fallback does not make sense.
    This change complements
    commit cd2063604ea6 ("net/smc: avoid fallback in case of non-blocking connect")
    and fixes the syzbot reported problem "WARNING in smc_unhash_sk".
    
    Reported-by: syzbot+8488cc4cf1c9e09b8b86@syzkaller.appspotmail.com
    Fixes: e1bbdd570474 ("net/smc: reduce sock_put() for fallback sockets")
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22022bed38e2450940319ab7a20d535485aab82c
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri Nov 15 14:24:54 2019 +0800

    net: gemini: add missed free_netdev
    
    [ Upstream commit 18d647ae74116bfee38953978501cea2960a0c25 ]
    
    This driver forgets to free allocated netdev in remove like
    what is done in probe failure.
    Add the free to fix it.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9874481c52b48c9c2cbea3c580726b4b06d33464
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Sun Nov 10 16:31:23 2019 +0100

    mlxsw: core: Enable devlink reload only on probe
    
    [ Upstream commit 73a533ecf0af5f73ff72dd7c96d1c8598ca93649 ]
    
    Call devlink enable only during probe time and avoid deadlock
    during reload.
    
    Reported-by: Shalom Toledo <shalomt@mellanox.com>
    Fixes: 5a508a254bed ("devlink: disallow reload operation during device cleanup")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Tested-by: Shalom Toledo <shalomt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc82fbe89fe4bfd060713385cf3ee31de89c0340
Author: Guillaume Nault <gnault@redhat.com>
Date:   Fri Nov 15 18:29:52 2019 +0100

    ipmr: Fix skb headroom in ipmr_get_route().
    
    [ Upstream commit 7901cd97963d6cbde88fa25a4a446db3554c16c6 ]
    
    In route.c, inet_rtm_getroute_build_skb() creates an skb with no
    headroom. This skb is then used by inet_rtm_getroute() which may pass
    it to rt_fill_info() and, from there, to ipmr_get_route(). The later
    might try to reuse this skb by cloning it and prepending an IPv4
    header. But since the original skb has no headroom, skb_push() triggers
    skb_under_panic():
    
    skbuff: skb_under_panic: text:00000000ca46ad8a len:80 put:20 head:00000000cd28494e data:000000009366fd6b tail:0x3c end:0xec0 dev:veth0
    ------------[ cut here ]------------
    kernel BUG at net/core/skbuff.c:108!
    invalid opcode: 0000 [#1] SMP KASAN PTI
    CPU: 6 PID: 587 Comm: ip Not tainted 5.4.0-rc6+ #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-2.fc30 04/01/2014
    RIP: 0010:skb_panic+0xbf/0xd0
    Code: 41 a2 ff 8b 4b 70 4c 8b 4d d0 48 c7 c7 20 76 f5 8b 44 8b 45 bc 48 8b 55 c0 48 8b 75 c8 41 54 41 57 41 56 41 55 e8 75 dc 7a ff <0f> 0b 0f 1f 44 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00
    RSP: 0018:ffff888059ddf0b0 EFLAGS: 00010286
    RAX: 0000000000000086 RBX: ffff888060a315c0 RCX: ffffffff8abe4822
    RDX: 0000000000000000 RSI: 0000000000000008 RDI: ffff88806c9a79cc
    RBP: ffff888059ddf118 R08: ffffed100d9361b1 R09: ffffed100d9361b0
    R10: ffff88805c68aee3 R11: ffffed100d9361b1 R12: ffff88805d218000
    R13: ffff88805c689fec R14: 000000000000003c R15: 0000000000000ec0
    FS:  00007f6af184b700(0000) GS:ffff88806c980000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffc8204a000 CR3: 0000000057b40006 CR4: 0000000000360ee0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     skb_push+0x7e/0x80
     ipmr_get_route+0x459/0x6fa
     rt_fill_info+0x692/0x9f0
     inet_rtm_getroute+0xd26/0xf20
     rtnetlink_rcv_msg+0x45d/0x630
     netlink_rcv_skb+0x1a5/0x220
     rtnetlink_rcv+0x15/0x20
     netlink_unicast+0x305/0x3a0
     netlink_sendmsg+0x575/0x730
     sock_sendmsg+0xb5/0xc0
     ___sys_sendmsg+0x497/0x4f0
     __sys_sendmsg+0xcb/0x150
     __x64_sys_sendmsg+0x48/0x50
     do_syscall_64+0xd2/0xac0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Actually the original skb used to have enough headroom, but the
    reserve_skb() call was lost with the introduction of
    inet_rtm_getroute_build_skb() by commit 404eb77ea766 ("ipv4: support
    sport, dport and ip_proto in RTM_GETROUTE").
    
    We could reserve some headroom again in inet_rtm_getroute_build_skb(),
    but this function shouldn't be responsible for handling the special
    case of ipmr_get_route(). Let's handle that directly in
    ipmr_get_route() by calling skb_realloc_headroom() instead of
    skb_clone().
    
    Fixes: 404eb77ea766 ("ipv4: support sport, dport and ip_proto in RTM_GETROUTE")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56e6647acb69d3da9a6abe2d227bdcf6e0251146
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Sat Nov 9 11:29:46 2019 +0100

    devlink: disallow reload operation during device cleanup
    
    [ Upstream commit 5a508a254bed9a2e36a5fb96c9065532a6bf1e9c ]
    
    There is a race between driver code that does setup/cleanup of device
    and devlink reload operation that in some drivers works with the same
    code. Use after free could we easily obtained by running:
    
    while true; do
            echo "0000:00:10.0" >/sys/bus/pci/drivers/mlxsw_spectrum2/bind
            devlink dev reload pci/0000:00:10.0 &
            echo "0000:00:10.0" >/sys/bus/pci/drivers/mlxsw_spectrum2/unbind
    done
    
    Fix this by enabling reload only after setup of device is complete and
    disabling it at the beginning of the cleanup process.
    
    Reported-by: Ido Schimmel <idosch@mellanox.com>
    Fixes: 2d8dc5bbf4e7 ("devlink: Add support for reload")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02d391358185ac9ea51a7522561804db2fb46057
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 14 11:16:01 2019 +0100

    ax88172a: fix information leak on short answers
    
    [ Upstream commit a9a51bd727d141a67b589f375fe69d0e54c4fe22 ]
    
    If a malicious device gives a short MAC it can elicit up to
    5 bytes of leaked memory out of the driver. We need to check for
    ETH_ALEN instead.
    
    Reported-by: syzbot+a8d4acdad35e6bbca308@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb2b8d64e20f9d924f802936bdfd4d1cdcae5054
Author: Michael Schmitz <schmitzmic@gmail.com>
Date:   Tue Nov 5 15:49:10 2019 +1300

    scsi: core: Handle drivers which set sg_tablesize to zero
    
    commit 9393c8de628cf0968d81a17cc11841e42191e041 upstream.
    
    In scsi_mq_setup_tags(), cmd_size is calculated based on zero size for the
    scatter-gather list in case the low level driver uses SG_NONE in its host
    template.
    
    cmd_size is passed on to the block layer for calculation of the request
    size, and we've seen NULL pointer dereference errors from the block layer
    in drivers where SG_NONE is used and a mq IO scheduler is active,
    apparently as a consequence of this (see commit 68ab2d76e4be ("scsi:
    cxlflash: Set sg_tablesize to 1 instead of SG_NONE"), and a recent patch by
    Finn Thain converting the three m68k NFR5380 drivers to avoid setting
    SG_NONE).
    
    Try to avoid these errors by accounting for at least one sg list entry when
    calculating cmd_size, regardless of whether the low level driver set a zero
    sg_tablesize.
    
    Tested on 030 m68k with the atari_scsi driver - setting sg_tablesize to
    SG_NONE no longer results in a crash when loading this driver.
    
    CC: Finn Thain <fthain@telegraphics.com.au>
    Link: https://lore.kernel.org/r/1572922150-4358-1-git-send-email-schmitzmic@gmail.com
    Signed-off-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
