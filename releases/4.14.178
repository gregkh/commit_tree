commit 773e2b1cd56a17bab4cdd4fe7db12f2140951668
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat May 2 17:24:47 2020 +0200

    Linux 4.14.178

commit 97699864e36616399c7b98b17ea64548b7922523
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Apr 27 10:26:22 2020 -0400

    propagate_one(): mnt_set_mountpoint() needs mount_lock
    
    commit b0d3869ce9eeacbb1bbd541909beeef4126426d5 upstream.
    
    ... to protect the modification of mp->m_count done by it.  Most of
    the places that modify that thing also have namespace_lock held,
    but not all of them can do so, so we really need mount_lock here.
    Kudos to Piotr Krysiuk <piotras@gmail.com>, who'd spotted a related
    bug in pivot_root(2) (fixed unnoticed in 5.3); search for other
    similar turds has caught out this one.
    
    Cc: stable@kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c65024b37616749838ee74a8c9a57fbd875e10bd
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Mon Mar 16 15:00:38 2020 +0530

    ext4: check for non-zero journal inum in ext4_calculate_overhead
    
    commit f1eec3b0d0a849996ebee733b053efa71803dad5 upstream.
    
    While calculating overhead for internal journal, also check
    that j_inum shouldn't be 0. Otherwise we get below error with
    xfstests generic/050 with external journal (XXX_LOGDEV config) enabled.
    
    It could be simply reproduced with loop device with an external journal
    and marking blockdev as RO before mounting.
    
    [ 3337.146838] EXT4-fs error (device pmem1p2): ext4_get_journal_inode:4634: comm mount: inode #0: comm mount: iget: illegal inode #
    ------------[ cut here ]------------
    generic_make_request: Trying to write to read-only block-device pmem1p2 (partno 2)
    WARNING: CPU: 107 PID: 115347 at block/blk-core.c:788 generic_make_request_checks+0x6b4/0x7d0
    CPU: 107 PID: 115347 Comm: mount Tainted: G             L   --------- -t - 4.18.0-167.el8.ppc64le #1
    NIP:  c0000000006f6d44 LR: c0000000006f6d40 CTR: 0000000030041dd4
    <...>
    NIP [c0000000006f6d44] generic_make_request_checks+0x6b4/0x7d0
    LR [c0000000006f6d40] generic_make_request_checks+0x6b0/0x7d0
    <...>
    Call Trace:
    generic_make_request_checks+0x6b0/0x7d0 (unreliable)
    generic_make_request+0x3c/0x420
    submit_bio+0xd8/0x200
    submit_bh_wbc+0x1e8/0x250
    __sync_dirty_buffer+0xd0/0x210
    ext4_commit_super+0x310/0x420 [ext4]
    __ext4_error+0xa4/0x1e0 [ext4]
    __ext4_iget+0x388/0xe10 [ext4]
    ext4_get_journal_inode+0x40/0x150 [ext4]
    ext4_calculate_overhead+0x5a8/0x610 [ext4]
    ext4_fill_super+0x3188/0x3260 [ext4]
    mount_bdev+0x778/0x8f0
    ext4_mount+0x28/0x50 [ext4]
    mount_fs+0x74/0x230
    vfs_kern_mount.part.6+0x6c/0x250
    do_mount+0x2fc/0x1280
    sys_mount+0x158/0x180
    system_call+0x5c/0x70
    EXT4-fs (pmem1p2): no journal found
    EXT4-fs (pmem1p2): can't get journal size
    EXT4-fs (pmem1p2): mounted filesystem without journal. Opts: dax,norecovery
    
    Fixes: 3c816ded78bb ("ext4: use journal inode to determine journal overhead")
    Reported-by: Harish Sriram <harish@linux.ibm.com>
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200316093038.25485-1-riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b5a948a44bf78187636ce934e3f2e7bdb30ecf1
Author: Yuval Basson <ybason@marvell.com>
Date:   Sun Mar 29 20:32:49 2020 +0300

    qed: Fix use after free in qed_chain_free
    
    commit 8063f761cd7c17fc1d0018728936e0c33a25388a upstream.
    
    The qed_chain data structure was modified in
    commit 1a4a69751f4d ("qed: Chain support for external PBL") to support
    receiving an external pbl (due to iWARP FW requirements).
    The pages pointed to by the pbl are allocated in qed_chain_alloc
    and their virtual address are stored in an virtual addresses array to
    enable accessing and freeing the data. The physical addresses however
    weren't stored and were accessed directly from the external-pbl
    during free.
    
    Destroy-qp flow, leads to freeing the external pbl before the chain is
    freed, when the chain is freed it tries accessing the already freed
    external pbl, leading to a use-after-free. Therefore we need to store
    the physical addresses in additional to the virtual addresses in a
    new data structure.
    
    Fixes: 1a4a69751f4d ("qed: Chain support for external PBL")
    Signed-off-by: Michal Kalderon <mkalderon@marvell.com>
    Signed-off-by: Yuval Bason <ybason@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22dec5f46b404668d3bebe599ee4cff42501f7e7
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri May 10 22:06:38 2019 -0400

    ext4: unsigned int compared against zero
    
    commit fbbbbd2f28aec991f3fbc248df211550fbdfd58c upstream.
    
    There are two cases where u32 variables n and err are being checked
    for less than zero error values, the checks is always false because
    the variables are not signed. Fix this by making the variables ints.
    
    Addresses-Coverity: ("Unsigned compared against 0")
    Fixes: 345c0dbf3a30 ("ext4: protect journal inode's blocks using block_validity")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea8f7a3dfd66f9ad1f65b47159ff38d8c278e5d7
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed May 15 00:51:19 2019 -0400

    ext4: fix block validity checks for journal inodes using indirect blocks
    
    commit 170417c8c7bb2cbbdd949bf5c443c0c8f24a203b upstream.
    
    Commit 345c0dbf3a30 ("ext4: protect journal inode's blocks using
    block_validity") failed to add an exception for the journal inode in
    ext4_check_blockref(), which is the function used by ext4_get_branch()
    for indirect blocks.  This caused attempts to read from the ext3-style
    journals to fail with:
    
    [  848.968550] EXT4-fs error (device sdb7): ext4_get_branch:171: inode #8: block 30343695: comm jbd2/sdb7-8: invalid block
    
    Fix this by adding the missing exception check.
    
    Fixes: 345c0dbf3a30 ("ext4: protect journal inode's blocks using block_validity")
    Reported-by: Arthur Marsh <arthur.marsh@internode.on.net>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc3293a80acc469fbabc91bfbf2e65dc84377dc7
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed May 22 10:27:01 2019 -0400

    ext4: don't perform block validity checks on the journal inode
    
    commit 0a944e8a6c66ca04c7afbaa17e22bf208a8b37f0 upstream.
    
    Since the journal inode is already checked when we added it to the
    block validity's system zone, if we check it again, we'll just trigger
    a failure.
    
    This was causing failures like this:
    
    [   53.897001] EXT4-fs error (device sda): ext4_find_extent:909: inode
    #8: comm jbd2/sda-8: pblk 121667583 bad header/extent: invalid extent entries - magic f30a, entries 8, max 340(340), depth 0(0)
    [   53.931430] jbd2_journal_bmap: journal block not found at offset 49 on sda-8
    [   53.938480] Aborting journal on device sda-8.
    
    ... but only if the system was under enough memory pressure that
    logical->physical mapping for the journal inode gets pushed out of the
    extent cache.  (This is why it wasn't noticed earlier.)
    
    Fixes: 345c0dbf3a30 ("ext4: protect journal inode's blocks using block_validity")
    Reported-by: Dan Rue <dan.rue@linaro.org>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 795762468125a6412c089651e74f780bee154118
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Tue Apr 9 23:37:08 2019 -0400

    ext4: protect journal inode's blocks using block_validity
    
    commit 345c0dbf3a30872d9b204db96b5857cd00808cae upstream.
    
    Add the blocks which belong to the journal inode to block_validity's
    system zone so attempts to deallocate or overwrite the journal due a
    corrupted file system where the journal blocks are also claimed by
    another inode.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=202879
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit add40f8f1a84d7c8feb76e8ab7f197a5b0627bd8
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 19 12:29:13 2018 -0500

    ext4: avoid declaring fs inconsistent due to invalid file handles
    
    commit 8a363970d1dc38c4ec4ad575c862f776f468d057 upstream.
    
    If we receive a file handle, either from NFS or open_by_handle_at(2),
    and it points at an inode which has not been initialized, and the file
    system has metadata checksums enabled, we shouldn't try to get the
    inode, discover the checksum is invalid, and then declare the file
    system as being inconsistent.
    
    This can be reproduced by creating a test file system via "mke2fs -t
    ext4 -O metadata_csum /tmp/foo.img 8M", mounting it, cd'ing into that
    directory, and then running the following program.
    
    #define _GNU_SOURCE
    #include <fcntl.h>
    
    struct handle {
            struct file_handle fh;
            unsigned char fid[MAX_HANDLE_SZ];
    };
    
    int main(int argc, char **argv)
    {
            struct handle h = {{8, 1 }, { 12, }};
    
            open_by_handle_at(AT_FDCWD, &h.fh, O_RDONLY);
            return 0;
    }
    
    Google-Bug-Id: 120690101
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Ashwin H <ashwinh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 331999a770bb5e75b5dab906a9f6aad680bb0959
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Fri Apr 17 11:28:53 2020 +0200

    hwmon: (jc42) Fix name to have no illegal characters
    
    [ Upstream commit c843b382e61b5f28a3d917712c69a344f632387c ]
    
    The jc42 driver passes I2C client's name as hwmon device name. In case
    of device tree probed devices this ends up being part of the compatible
    string, "jc-42.4-temp". This name contains hyphens and the hwmon core
    doesn't like this:
    
    jc42 2-0018: hwmon: 'jc-42.4-temp' is not a valid name attribute, please fix
    
    This changes the name to "jc42" which doesn't have any illegal
    characters.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Link: https://lore.kernel.org/r/20200417092853.31206-1-s.hauer@pengutronix.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 019abc55c93d2442c0e0411f9677fbeeedd527dd
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Apr 13 23:33:05 2020 -0400

    ext4: convert BUG_ON's to WARN_ON's in mballoc.c
    
    [ Upstream commit 907ea529fc4c3296701d2bfc8b831dd2a8121a34 ]
    
    If the in-core buddy bitmap gets corrupted (or out of sync with the
    block bitmap), issue a WARN_ON and try to recover.  In most cases this
    involves skipping trying to allocate out of a particular block group.
    We can end up declaring the file system corrupted, which is fair,
    since the file system probably should be checked before we proceed any
    further.
    
    Link: https://lore.kernel.org/r/20200414035649.293164-1-tytso@mit.edu
    Google-Bug-Id: 34811296
    Google-Bug-Id: 34639169
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48eecff398154fc624f6477012245be620d291bc
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Apr 13 22:30:52 2020 -0400

    ext4: increase wait time needed before reuse of deleted inode numbers
    
    [ Upstream commit a17a9d935dc4a50acefaf319d58030f1da7f115a ]
    
    Current wait times have proven to be too short to protect against inode
    reuses that lead to metadata inconsistencies.
    
    Now that we will retry the inode allocation if we can't find any
    recently deleted inodes, it's a lot safer to increase the recently
    deleted time from 5 seconds to a minute.
    
    Link: https://lore.kernel.org/r/20200414023925.273867-1-tytso@mit.edu
    Google-Bug-Id: 36602237
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e68f07c8dd0bb4c874a77da3fc5799c5143456a
Author: yangerkun <yangerkun@huawei.com>
Date:   Wed Feb 26 12:10:02 2020 +0800

    ext4: use matching invalidatepage in ext4_writepage
    
    [ Upstream commit c2a559bc0e7ed5a715ad6b947025b33cb7c05ea7 ]
    
    Run generic/388 with journal data mode sometimes may trigger the warning
    in ext4_invalidatepage. Actually, we should use the matching invalidatepage
    in ext4_writepage.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200226041002.13914-1-yangerkun@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1659d5af518bfe9f26a3ee29e0234e0565e7a3b
Author: Fangrui Song <maskray@google.com>
Date:   Tue Apr 14 09:32:55 2020 -0700

    arm64: Delete the space separator in __emit_inst
    
    [ Upstream commit c9a4ef66450145a356a626c833d3d7b1668b3ded ]
    
    In assembly, many instances of __emit_inst(x) expand to a directive. In
    a few places __emit_inst(x) is used as an assembler macro argument. For
    example, in arch/arm64/kvm/hyp/entry.S
    
      ALTERNATIVE(nop, SET_PSTATE_PAN(1), ARM64_HAS_PAN, CONFIG_ARM64_PAN)
    
    expands to the following by the C preprocessor:
    
      alternative_insn nop, .inst (0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8)), 4, 1
    
    Both comma and space are separators, with an exception that content
    inside a pair of parentheses/quotes is not split, so the clang
    integrated assembler splits the arguments to:
    
       nop, .inst, (0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8)), 4, 1
    
    GNU as preprocesses the input with do_scrub_chars(). Its arm64 backend
    (along with many other non-x86 backends) sees:
    
      alternative_insn nop,.inst(0xd500401f|((0)<<16|(4)<<5)|((!!1)<<8)),4,1
      # .inst(...) is parsed as one argument
    
    while its x86 backend sees:
    
      alternative_insn nop,.inst (0xd500401f|((0)<<16|(4)<<5)|((!!1)<<8)),4,1
      # The extra space before '(' makes the whole .inst (...) parsed as two arguments
    
    The non-x86 backend's behavior is considered unintentional
    (https://sourceware.org/bugzilla/show_bug.cgi?id=25750).
    So drop the space separator inside `.inst (...)` to make the clang
    integrated assembler work.
    
    Suggested-by: Ilie Halip <ilie.halip@gmail.com>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/939
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd23dba918103f537793f8813237f53b9bdcaecb
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Mar 26 09:03:58 2020 +0100

    xen/xenbus: ensure xenbus_map_ring_valloc() returns proper grant status
    
    [ Upstream commit 6b51fd3f65a22e3d1471b18a1d56247e246edd46 ]
    
    xenbus_map_ring_valloc() maps a ring page and returns the status of the
    used grant (0 meaning success).
    
    There are Xen hypervisors which might return the value 1 for the status
    of a failed grant mapping due to a bug. Some callers of
    xenbus_map_ring_valloc() test for errors by testing the returned status
    to be less than zero, resulting in no error detected and crashing later
    due to a not available ring page.
    
    Set the return value of xenbus_map_ring_valloc() to GNTST_general_error
    in case the grant status reported by Xen is greater than zero.
    
    This is part of XSA-316.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Link: https://lore.kernel.org/r/20200326080358.1018-1-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0424695f8fc0edf363c32feed6a73fe6432f167d
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Apr 1 13:23:26 2020 -0500

    objtool: Support Clang non-section symbols in ORC dump
    
    [ Upstream commit 8782e7cab51b6bf01a5a86471dd82228af1ac185 ]
    
    Historically, the relocation symbols for ORC entries have only been
    section symbols:
    
      .text+0: sp:sp+8 bp:(und) type:call end:0
    
    However, the Clang assembler is aggressive about stripping section
    symbols.  In that case we will need to use function symbols:
    
      freezing_slow_path+0: sp:sp+8 bp:(und) type:call end:0
    
    In preparation for the generation of such entries in "objtool orc
    generate", add support for reading them in "objtool orc dump".
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/b811b5eb1a42602c3b523576dc5efab9ad1c174d.1585761021.git.jpoimboe@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b429bdee8242be5a22685c758bc658222e88a5c
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Apr 1 13:23:25 2020 -0500

    objtool: Fix CONFIG_UBSAN_TRAP unreachable warnings
    
    [ Upstream commit bd841d6154f5f41f8a32d3c1b0bc229e326e640a ]
    
    CONFIG_UBSAN_TRAP causes GCC to emit a UD2 whenever it encounters an
    unreachable code path.  This includes __builtin_unreachable().  Because
    the BUG() macro uses __builtin_unreachable() after it emits its own UD2,
    this results in a double UD2.  In this case objtool rightfully detects
    that the second UD2 is unreachable:
    
      init/main.o: warning: objtool: repair_env_string()+0x1c8: unreachable instruction
    
    We weren't able to figure out a way to get rid of the double UD2s, so
    just silence the warning.
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/6653ad73c6b59c049211bd7c11ed3809c20ee9f5.1585761021.git.jpoimboe@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b04bd4db63612609acc9b262aa9668464c3319b
Author: Bodo Stroesser <bstroesser@ts.fujitsu.com>
Date:   Wed Apr 8 15:26:10 2020 +0200

    scsi: target: fix PR IN / READ FULL STATUS for FC
    
    [ Upstream commit 8fed04eb79a74cbf471dfaa755900a51b37273ab ]
    
    Creation of the response to READ FULL STATUS fails for FC based
    reservations. Reason is the too high loop limit (< 24) in
    fc_get_pr_transport_id(). The string representation of FC WWPN is 23 chars
    long only ("11:22:33:44:55:66:77:88"). So when i is 23, the loop body is
    executed a last time for the ending '\0' of the string and thus hex2bin()
    reports an error.
    
    Link: https://lore.kernel.org/r/20200408132610.14623-3-bstroesser@ts.fujitsu.com
    Signed-off-by: Bodo Stroesser <bstroesser@ts.fujitsu.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27b8978b06883024a46fc38d8569100f48986984
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Sun Apr 12 13:11:11 2020 -0700

    xfs: fix partially uninitialized structure in xfs_reflink_remap_extent
    
    [ Upstream commit c142932c29e533ee892f87b44d8abc5719edceec ]
    
    In the reflink extent remap function, it turns out that uirec (the block
    mapping corresponding only to the part of the passed-in mapping that got
    unmapped) was not fully initialized.  Specifically, br_state was not
    being copied from the passed-in struct to the uirec.  This could lead to
    unpredictable results such as the reflinked mapping being marked
    unwritten in the destination file.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99f7af9f5b6e442cf650608854722885e282b9f3
Author: Olaf Hering <olaf@aepfle.de>
Date:   Tue Apr 7 19:27:39 2020 +0200

    x86: hyperv: report value of misc_features
    
    [ Upstream commit 97d9f1c43bedd400301d6f1eff54d46e8c636e47 ]
    
    A few kernel features depend on ms_hyperv.misc_features, but unlike its
    siblings ->features and ->hints, the value was never reported during boot.
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Link: https://lore.kernel.org/r/20200407172739.31371-1-olaf@aepfle.de
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37e30a7a8cb1c910c893f7490a74d09f61bfc8d6
Author: Luke Nelson <lukenels@cs.washington.edu>
Date:   Sat Apr 18 16:26:53 2020 -0700

    bpf, x86: Fix encoding for lower 8-bit registers in BPF_STX BPF_B
    
    [ Upstream commit aee194b14dd2b2bde6252b3acf57d36dccfc743a ]
    
    This patch fixes an encoding bug in emit_stx for BPF_B when the source
    register is BPF_REG_FP.
    
    The current implementation for BPF_STX BPF_B in emit_stx saves one REX
    byte when the operands can be encoded using Mod-R/M alone. The lower 8
    bits of registers %rax, %rbx, %rcx, and %rdx can be accessed without using
    a REX prefix via %al, %bl, %cl, and %dl, respectively. Other registers,
    (e.g., %rsi, %rdi, %rbp, %rsp) require a REX prefix to use their 8-bit
    equivalents (%sil, %dil, %bpl, %spl).
    
    The current code checks if the source for BPF_STX BPF_B is BPF_REG_1
    or BPF_REG_2 (which map to %rdi and %rsi), in which case it emits the
    required REX prefix. However, it misses the case when the source is
    BPF_REG_FP (mapped to %rbp).
    
    The result is that BPF_STX BPF_B with BPF_REG_FP as the source operand
    will read from register %ch instead of the correct %bpl. This patch fixes
    the problem by fixing and refactoring the check on which registers need
    the extra REX byte. Since no BPF registers map to %rsp, there is no need
    to handle %spl.
    
    Fixes: 622582786c9e0 ("net: filter: x86: internal BPF JIT")
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Luke Nelson <luke.r.nels@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200418232655.23870-1-luke.r.nels@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc0a359b484ef6e0f1c925367689f270580e8c07
Author: Yang Shi <yang.shi@linux.alibaba.com>
Date:   Mon Apr 20 18:14:17 2020 -0700

    mm: shmem: disable interrupt when acquiring info->lock in userfaultfd_copy path
    
    commit 94b7cc01da5a3cc4f3da5e0ff492ef008bb555d6 upstream.
    
    Syzbot reported the below lockdep splat:
    
        WARNING: possible irq lock inversion dependency detected
        5.6.0-rc7-syzkaller #0 Not tainted
        --------------------------------------------------------
        syz-executor.0/10317 just changed the state of lock:
        ffff888021d16568 (&(&info->lock)->rlock){+.+.}, at: spin_lock include/linux/spinlock.h:338 [inline]
        ffff888021d16568 (&(&info->lock)->rlock){+.+.}, at: shmem_mfill_atomic_pte+0x1012/0x21c0 mm/shmem.c:2407
        but this lock was taken by another, SOFTIRQ-safe lock in the past:
         (&(&xa->xa_lock)->rlock#5){..-.}
    
        and interrupts could create inverse lock ordering between them.
    
        other info that might help us debug this:
         Possible interrupt unsafe locking scenario:
    
               CPU0                    CPU1
               ----                    ----
          lock(&(&info->lock)->rlock);
                                       local_irq_disable();
                                       lock(&(&xa->xa_lock)->rlock#5);
                                       lock(&(&info->lock)->rlock);
          <Interrupt>
            lock(&(&xa->xa_lock)->rlock#5);
    
         *** DEADLOCK ***
    
    The full report is quite lengthy, please see:
    
      https://lore.kernel.org/linux-mm/alpine.LSU.2.11.2004152007370.13597@eggly.anvils/T/#m813b412c5f78e25ca8c6c7734886ed4de43f241d
    
    It is because CPU 0 held info->lock with IRQ enabled in userfaultfd_copy
    path, then CPU 1 is splitting a THP which held xa_lock and info->lock in
    IRQ disabled context at the same time.  If softirq comes in to acquire
    xa_lock, the deadlock would be triggered.
    
    The fix is to acquire/release info->lock with *_irq version instead of
    plain spin_{lock,unlock} to make it softirq safe.
    
    Fixes: 4c27fe4c4c84 ("userfaultfd: shmem: add shmem_mcopy_atomic_pte for userfaultfd support")
    Reported-by: syzbot+e27980339d305f2dbfd9@syzkaller.appspotmail.com
    Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: syzbot+e27980339d305f2dbfd9@syzkaller.appspotmail.com
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Link: http://lkml.kernel.org/r/1587061357-122619-1-git-send-email-yang.shi@linux.alibaba.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f24768983d207054df476aa5d940e756002168ed
Author: Ian Rogers <irogers@google.com>
Date:   Fri Apr 17 11:28:42 2020 -0700

    perf/core: fix parent pid/tid in task exit events
    
    commit f3bed55e850926614b9898fe982f66d2541a36a5 upstream.
    
    Current logic yields the child task as the parent.
    
    Before:
    $ perf record bash -c "perf list > /dev/null"
    $ perf script -D |grep 'FORK\|EXIT'
    4387036190981094 0x5a70 [0x30]: PERF_RECORD_FORK(10472:10472):(10470:10470)
    4387036606207580 0xf050 [0x30]: PERF_RECORD_EXIT(10472:10472):(10472:10472)
    4387036607103839 0x17150 [0x30]: PERF_RECORD_EXIT(10470:10470):(10470:10470)
                                                       ^
      Note the repeated values here -------------------/
    
    After:
    383281514043 0x9d8 [0x30]: PERF_RECORD_FORK(2268:2268):(2266:2266)
    383442003996 0x2180 [0x30]: PERF_RECORD_EXIT(2268:2268):(2266:2266)
    383451297778 0xb70 [0x30]: PERF_RECORD_EXIT(2266:2266):(2265:2265)
    
    Fixes: 94d5d1b2d891 ("perf_counter: Report the cloning task as parent on perf_counter_fork()")
    Reported-by: KP Singh <kpsingh@google.com>
    Signed-off-by: Ian Rogers <irogers@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200417182842.12522-1-irogers@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5388ae4224766b4c282d79dae6bfb2c6548234a
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Wed Apr 15 16:42:33 2020 +0200

    ARM: dts: bcm283x: Disable dsi0 node
    
    commit 90444b958461a5f8fc299ece0fe17eab15cba1e1 upstream.
    
    Since its inception the module was meant to be disabled by default, but
    the original commit failed to add the relevant property.
    
    Fixes: 4aba4cf82054 ("ARM: dts: bcm2835: Add the DSI module nodes and clocks")
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a49df6a1ccefdd8b0f815ae4e9b627888b2a57b1
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 14 12:27:08 2020 -0300

    net/cxgb4: Check the return from t4_query_params properly
    
    commit c799fca8baf18d1bbbbad6c3b736eefbde8bdb90 upstream.
    
    Positive return values are also failures that don't set val,
    although this probably can't happen. Fixes gcc 10 warning:
    
    drivers/net/ethernet/chelsio/cxgb4/t4_hw.c: In function ‘t4_phy_fw_ver’:
    drivers/net/ethernet/chelsio/cxgb4/t4_hw.c:3747:14: warning: ‘val’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     3747 |  *phy_fw_ver = val;
    
    Fixes: 01b6961410b7 ("cxgb4: Add PHY firmware support for T420-BT cards")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e38d5f1c5e3d7e9c6b840e4de815e2c7717c868
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Fri Mar 27 23:28:26 2020 +0100

    i2c: altera: use proper variable to hold errno
    
    commit edb2c9dd3948738ef030c32b948543e84f4d3f81 upstream.
    
    device_property_read_u32() returns errno or 0, so we should use the
    integer variable 'ret' and not the u32 'val' to hold the retval.
    
    Fixes: 0560ad576268 ("i2c: altera: Add Altera I2C Controller driver")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea0f3c4ef7a5499ce47aa3361a252c58efa75323
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Mar 27 07:50:40 2020 +0300

    nfsd: memory corruption in nfsd4_lock()
    
    commit e1e8399eee72e9d5246d4d1bcacd793debe34dd3 upstream.
    
    New struct nfsd4_blocked_lock allocated in find_or_allocate_block()
    does not initialized nbl_list and nbl_lru.
    If conflock allocation fails rollback can call list_del_init()
    access uninitialized fields and corrupt memory.
    
    v2: just initialize nbl_list and nbl_lru right after nbl allocation.
    
    Fixes: 76d348fadff5 ("nfsd: have nfsd4_lock use blocking locks for v4.1+ lock")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 851315332f7d419486ea706ee81791dd1addb870
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Mar 10 22:16:54 2020 +0800

    iio:ad7797: Use correct attribute_group
    
    commit 28535877ac5b2b84f0d394fd67a5ec71c0c48b10 upstream.
    
    It should use ad7797_attribute_group in ad7797_info,
    according to commit ("iio:ad7793: Add support for the ad7796 and ad7797").
    
    Scale is fixed for the ad7796 and not programmable, hence
    should not have the scale_available attribute.
    
    Fixes: fd1a8b912841 ("iio:ad7793: Add support for the ad7796 and ad7797")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2934e27a5bd1780e6d8534f37bed43fd6492222d
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Sat Mar 28 18:12:46 2020 -0700

    usb: gadget: udc: bdc: Remove unnecessary NULL checks in bdc_req_complete
    
    commit 09b04abb70f096333bef6bc95fa600b662e7ee13 upstream.
    
    When building with Clang + -Wtautological-pointer-compare:
    
    drivers/usb/gadget/udc/bdc/bdc_ep.c:543:28: warning: comparison of
    address of 'req->queue' equal to a null pointer is always false
    [-Wtautological-pointer-compare]
            if (req == NULL  || &req->queue == NULL || &req->usb_req == NULL)
                                 ~~~~~^~~~~    ~~~~
    drivers/usb/gadget/udc/bdc/bdc_ep.c:543:51: warning: comparison of
    address of 'req->usb_req' equal to a null pointer is always false
    [-Wtautological-pointer-compare]
            if (req == NULL  || &req->queue == NULL || &req->usb_req == NULL)
                                                        ~~~~~^~~~~~~    ~~~~
    2 warnings generated.
    
    As it notes, these statements will always evaluate to false so remove
    them.
    
    Fixes: efed421a94e6 ("usb: gadget: Add UDC driver for Broadcom USB3.0 device controller IP BDC")
    Link: https://github.com/ClangBuiltLinux/linux/issues/749
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1103775062540414c187835af57c7fcb45e6da63
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Fri Jan 31 16:25:50 2020 -0800

    usb: dwc3: gadget: Do link recovery for SS and SSP
    
    commit d0550cd20e52558ecf6847a0f96ebd5d944c17e4 upstream.
    
    The controller always supports link recovery for device in SS and SSP.
    Remove the speed limit check. Also, when the device is in RESUME or
    RESET state, it means the controller received the resume/reset request.
    The driver must send the link recovery to acknowledge the request. They
    are valid states for the driver to send link recovery.
    
    Fixes: 72246da40f37 ("usb: Introduce DesignWare USB3 DRD Driver")
    Fixes: ee5cd41c9117 ("usb: dwc3: Update speed checks for SuperSpeedPlus")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19e6af05a22a670eea3931cc0e83ca58cb3db298
Author: Tyler Hicks <tyhicks@canonical.com>
Date:   Fri Apr 12 21:59:25 2019 +0000

    binder: take read mode of mmap_sem in binder_alloc_free_page()
    
    commit 60d4885710836595192c42d3e04b27551d30ec91 upstream.
    
    Restore the behavior of locking mmap_sem for reading in
    binder_alloc_free_page(), as was first done in commit 3013bf62b67a
    ("binder: reduce mmap_sem write-side lock"). That change was
    inadvertently reverted by commit 5cec2d2e5839 ("binder: fix race between
    munmap() and direct reclaim").
    
    In addition, change the name of the label for the error path to
    accurately reflect that we're taking the lock for reading.
    
    Backporting note: This fix is only needed when *both* of the commits
    mentioned above are applied. That's an unlikely situation since they
    both landed during the development of v5.1 but only one of them is
    targeted for stable.
    
    Fixes: 5cec2d2e5839 ("binder: fix race between munmap() and direct reclaim")
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
    Acked-by: Todd Kjos <tkjos@android.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffd115f2dca955ce0782e801d488ecfaccde421f
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Thu Feb 20 20:04:03 2020 -0800

    include/uapi/linux/swab.h: fix userspace breakage, use __BITS_PER_LONG for swap
    
    commit 467d12f5c7842896d2de3ced74e4147ee29e97c8 upstream.
    
    QEMU has a funny new build error message when I use the upstream kernel
    headers:
    
          CC      block/file-posix.o
        In file included from /home/cborntra/REPOS/qemu/include/qemu/timer.h:4,
                         from /home/cborntra/REPOS/qemu/include/qemu/timed-average.h:29,
                         from /home/cborntra/REPOS/qemu/include/block/accounting.h:28,
                         from /home/cborntra/REPOS/qemu/include/block/block_int.h:27,
                         from /home/cborntra/REPOS/qemu/block/file-posix.c:30:
        /usr/include/linux/swab.h: In function `__swab':
        /home/cborntra/REPOS/qemu/include/qemu/bitops.h:20:34: error: "sizeof" is not defined, evaluates to 0 [-Werror=undef]
           20 | #define BITS_PER_LONG           (sizeof (unsigned long) * BITS_PER_BYTE)
              |                                  ^~~~~~
        /home/cborntra/REPOS/qemu/include/qemu/bitops.h:20:41: error: missing binary operator before token "("
           20 | #define BITS_PER_LONG           (sizeof (unsigned long) * BITS_PER_BYTE)
              |                                         ^
        cc1: all warnings being treated as errors
        make: *** [/home/cborntra/REPOS/qemu/rules.mak:69: block/file-posix.o] Error 1
        rm tests/qemu-iotests/socket_scm_helper.o
    
    This was triggered by commit d5767057c9a ("uapi: rename ext2_swab() to
    swab() and share globally in swab.h").  That patch is doing
    
      #include <asm/bitsperlong.h>
    
    but it uses BITS_PER_LONG.
    
    The kernel file asm/bitsperlong.h provide only __BITS_PER_LONG.
    
    Let us use the __ variant in swap.h
    
    Link: http://lkml.kernel.org/r/20200213142147.17604-1-borntraeger@de.ibm.com
    Fixes: d5767057c9a ("uapi: rename ext2_swab() to swab() and share globally in swab.h")
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Yury Norov <yury.norov@gmail.com>
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Joe Perches <joe@perches.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: William Breathitt Gray <vilhelm.gray@gmail.com>
    Cc: Torsten Hilbrich <torsten.hilbrich@secunet.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42fa3dc2692e5f0b215b9284efac4dfc070f5dab
Author: Liu Jian <liujian56@huawei.com>
Date:   Sun Mar 3 15:04:18 2019 +0800

    mtd: cfi: fix deadloop in cfi_cmdset_0002.c do_write_buffer
    
    commit d9b8a67b3b95a5c5aae6422b8113adc1c2485f2b upstream.
    
    In function do_write_buffer(), in the for loop, there is a case
    chip_ready() returns 1 while chip_good() returns 0, so it never
    break the loop.
    To fix this, chip_good() is enough and it should timeout if it stay
    bad for a while.
    
    Fixes: dfeae1073583("mtd: cfi_cmdset_0002: Change write buffer to check correct value")
    Signed-off-by: Yi Huaijie <yihuaijie@huawei.com>
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Reviewed-by: Tokunori Ikegami <ikegami_to@yahoo.co.jp>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5aec8f253540c6c3538ab72c2b14809c1a29e85
Author: Clement Leger <cleger@kalray.eu>
Date:   Fri Oct 4 09:37:36 2019 +0200

    remoteproc: Fix wrong rvring index computation
    
    commit 00a0eec59ddbb1ce966b19097d8a8d2f777e726a upstream.
    
    Index of rvring is computed using pointer arithmetic. However, since
    rvring->rvdev->vring is the base of the vring array, computation
    of rvring idx should be reversed. It previously lead to writing at negative
    indices in the resource table.
    
    Signed-off-by: Clement Leger <cleger@kalray.eu>
    Link: https://lore.kernel.org/r/20191004073736.8327-1-cleger@kalray.eu
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f970d41d54c5923b975b8886784ee4dc35c0e423
Author: kaixuxia <xiakaixu1987@gmail.com>
Date:   Tue Sep 3 21:06:50 2019 -0700

    xfs: Fix deadlock between AGI and AGF with RENAME_WHITEOUT
    
    commit bc56ad8c74b8588685c2875de0df8ab6974828ef upstream.
    
    When performing rename operation with RENAME_WHITEOUT flag, we will
    hold AGF lock to allocate or free extents in manipulating the dirents
    firstly, and then doing the xfs_iunlink_remove() call last to hold
    AGI lock to modify the tmpfile info, so we the lock order AGI->AGF.
    
    The big problem here is that we have an ordering constraint on AGF
    and AGI locking - inode allocation locks the AGI, then can allocate
    a new extent for new inodes, locking the AGF after the AGI. Hence
    the ordering that is imposed by other parts of the code is AGI before
    AGF. So we get an ABBA deadlock between the AGI and AGF here.
    
    Process A:
    Call trace:
     ? __schedule+0x2bd/0x620
     schedule+0x33/0x90
     schedule_timeout+0x17d/0x290
     __down_common+0xef/0x125
     ? xfs_buf_find+0x215/0x6c0 [xfs]
     down+0x3b/0x50
     xfs_buf_lock+0x34/0xf0 [xfs]
     xfs_buf_find+0x215/0x6c0 [xfs]
     xfs_buf_get_map+0x37/0x230 [xfs]
     xfs_buf_read_map+0x29/0x190 [xfs]
     xfs_trans_read_buf_map+0x13d/0x520 [xfs]
     xfs_read_agf+0xa6/0x180 [xfs]
     ? schedule_timeout+0x17d/0x290
     xfs_alloc_read_agf+0x52/0x1f0 [xfs]
     xfs_alloc_fix_freelist+0x432/0x590 [xfs]
     ? down+0x3b/0x50
     ? xfs_buf_lock+0x34/0xf0 [xfs]
     ? xfs_buf_find+0x215/0x6c0 [xfs]
     xfs_alloc_vextent+0x301/0x6c0 [xfs]
     xfs_ialloc_ag_alloc+0x182/0x700 [xfs]
     ? _xfs_trans_bjoin+0x72/0xf0 [xfs]
     xfs_dialloc+0x116/0x290 [xfs]
     xfs_ialloc+0x6d/0x5e0 [xfs]
     ? xfs_log_reserve+0x165/0x280 [xfs]
     xfs_dir_ialloc+0x8c/0x240 [xfs]
     xfs_create+0x35a/0x610 [xfs]
     xfs_generic_create+0x1f1/0x2f0 [xfs]
     ...
    
    Process B:
    Call trace:
     ? __schedule+0x2bd/0x620
     ? xfs_bmapi_allocate+0x245/0x380 [xfs]
     schedule+0x33/0x90
     schedule_timeout+0x17d/0x290
     ? xfs_buf_find+0x1fd/0x6c0 [xfs]
     __down_common+0xef/0x125
     ? xfs_buf_get_map+0x37/0x230 [xfs]
     ? xfs_buf_find+0x215/0x6c0 [xfs]
     down+0x3b/0x50
     xfs_buf_lock+0x34/0xf0 [xfs]
     xfs_buf_find+0x215/0x6c0 [xfs]
     xfs_buf_get_map+0x37/0x230 [xfs]
     xfs_buf_read_map+0x29/0x190 [xfs]
     xfs_trans_read_buf_map+0x13d/0x520 [xfs]
     xfs_read_agi+0xa8/0x160 [xfs]
     xfs_iunlink_remove+0x6f/0x2a0 [xfs]
     ? current_time+0x46/0x80
     ? xfs_trans_ichgtime+0x39/0xb0 [xfs]
     xfs_rename+0x57a/0xae0 [xfs]
     xfs_vn_rename+0xe4/0x150 [xfs]
     ...
    
    In this patch we move the xfs_iunlink_remove() call to
    before acquiring the AGF lock to preserve correct AGI/AGF locking
    order.
    
    [Minor massage required to backport to apply due to removal of
    out_bmap_cancel: error path label upstream as a result of code
    rework. Only change was to the last code block removed by the
    patch. Functionally equivalent to upstream.]
    
    Signed-off-by: kaixuxia <kaixuxia@tencent.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a63c07ef001fab45ef713fc7c9046bda0720b6c1
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Wed Oct 25 16:59:43 2017 -0700

    xfs: validate sb_logsunit is a multiple of the fs blocksize
    
    commit 9c92ee208b1faa0ef2cc899b85fd0607b6fac7fe upstream.
    
    Make sure the log stripe unit is sane before proceeding with mounting.
    AFAICT this means that logsunit has to be 0, 1, or a multiple of the fs
    block size.  Found this by setting the LSB of logsunit in xfs/350 and
    watching the system crash as soon as we try to write to the log.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7dd89cafddb1434a9e4475049d1ba74e443b1d6
Author: Kazuhiro Fujita <kazuhiro.fujita.jg@renesas.com>
Date:   Fri Mar 27 18:17:28 2020 +0000

    serial: sh-sci: Make sure status register SCxSR is read in correct sequence
    
    commit 3dc4db3662366306e54ddcbda4804acb1258e4ba upstream.
    
    For SCIF and HSCIF interfaces the SCxSR register holds the status of
    data that is to be read next from SCxRDR register, But where as for
    SCIFA and SCIFB interfaces SCxSR register holds status of data that is
    previously read from SCxRDR register.
    
    This patch makes sure the status register is read depending on the port
    types so that errors are caught accordingly.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Kazuhiro Fujita <kazuhiro.fujita.jg@renesas.com>
    Signed-off-by: Hao Bui <hao.bui.yg@renesas.com>
    Signed-off-by: KAZUMI HARADA <kazumi.harada.rh@renesas.com>
    Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/1585333048-31828-1-git-send-email-kazuhiro.fujita.jg@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4fc711ffae5ba43985e7f17060afa2455a8a0d3
Author: Udipto Goswami <ugoswami@codeaurora.org>
Date:   Thu Apr 2 10:15:21 2020 +0530

    usb: f_fs: Clear OS Extended descriptor counts to zero in ffs_data_reset()
    
    commit 1c2e54fbf1da5e5445a0ab132c862b02ccd8d230 upstream.
    
    For userspace functions using OS Descriptors, if a function also supplies
    Extended Property descriptors currently the counts and lengths stored in
    the ms_os_descs_ext_prop_{count,name_len,data_len} variables are not
    getting reset to 0 during an unbind or when the epfiles are closed. If
    the same function is re-bound and the descriptors are re-written, this
    results in those count/length variables to monotonically increase
    causing the VLA allocation in _ffs_func_bind() to grow larger and larger
    at each bind/unbind cycle and eventually fail to allocate.
    
    Fix this by clearing the ms_os_descs_ext_prop count & lengths to 0 in
    ffs_data_reset().
    
    Fixes: f0175ab51993 ("usb: gadget: f_fs: OS descriptors support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Udipto Goswami <ugoswami@codeaurora.org>
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    Reviewed-by: Manu Gautam <mgautam@codeaurora.org>
    Link: https://lore.kernel.org/r/20200402044521.9312-1-sallenki@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75fe195f72379ed62b2599bfb4e5348b533c8b4a
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:17:50 2020 +0200

    UAS: fix deadlock in error handling and PM flushing work
    
    commit f6cc6093a729ede1ff5658b493237c42b82ba107 upstream.
    
    A SCSI error handler and block runtime PM must not allocate
    memory with GFP_KERNEL. Furthermore they must not wait for
    tasks allocating memory with GFP_KERNEL.
    That means that they cannot share a workqueue with arbitrary tasks.
    
    Fix this for UAS using a private workqueue.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Fixes: f9dc024a2da1f ("uas: pre_reset and suspend: Fix a few races")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200415141750.811-2-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 629d46a6b162fe3226bee434ac893680cfd82ef5
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:17:49 2020 +0200

    UAS: no use logging any details in case of ENODEV
    
    commit 5963dec98dc52d52476390485f07a29c30c6a582 upstream.
    
    Once a device is gone, the internal state does not matter anymore.
    There is no need to spam the logs.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: 326349f824619 ("uas: add dead request list")
    Link: https://lore.kernel.org/r/20200415141750.811-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3edd90f1c5efe9cb31fe6646a767773e36ba8aa9
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 17:13:58 2020 +0200

    cdc-acm: introduce a cool down
    
    commit a4e7279cd1d19f48f0af2a10ed020febaa9ac092 upstream.
    
    Immediate submission in case of a babbling device can lead
    to a busy loop. Introducing a delayed work.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Jonas Karlsson <jonas.karlsson@actia.se>
    Link: https://lore.kernel.org/r/20200415151358.32664-2-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d87746ffb6e47fab8ef19b3d608edbc4924d2076
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 17:13:57 2020 +0200

    cdc-acm: close race betrween suspend() and acm_softint
    
    commit 0afccd7601514c4b83d8cc58c740089cc447051d upstream.
    
    Suspend increments a counter, then kills the URBs,
    then kills the scheduled work. The scheduled work, however,
    may reschedule the URBs. Fix this by having the work
    check the counter.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Jonas Karlsson <jonas.karlsson@actia.se>
    Link: https://lore.kernel.org/r/20200415151358.32664-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31ee8dfac96aa68a04b05fd7c573dd509a27ed0d
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Tue Apr 14 11:39:23 2020 +0100

    staging: vt6656: Power save stop wake_up_count wrap around.
    
    commit ea81c3486442f4643fc9825a2bb1b430b829bccd upstream.
    
    conf.listen_interval can sometimes be zero causing wake_up_count
    to wrap around up to many beacons too late causing
    CTRL-EVENT-BEACON-LOSS as in.
    
    wpa_supplicant[795]: message repeated 45 times: [..CTRL-EVENT-BEACON-LOSS ]
    
    Fixes: 43c93d9bf5e2 ("staging: vt6656: implement power saving code.")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/fce47bb5-7ca6-7671-5094-5c6107302f2b@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d28695365b95ffb35fbae1c31aa0a69a50e0dc3
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Sat Apr 18 22:01:49 2020 +0100

    staging: vt6656: Fix pairwise key entry save.
    
    commit 0b59f10b1d8fe8d50944f21f5d403df9303095a8 upstream.
    
    The problem is that the group key was saved as VNT_KEY_DEFAULTKEY
    was over written by the VNT_KEY_GROUP_ADDRESS index.
    
    mac80211 could not clear the mac_addr in the default key.
    
    The VNT_KEY_DEFAULTKEY is not necesscary so remove it and set as
    VNT_KEY_GROUP_ADDRESS.
    
    mac80211 can clear any key using vnt_mac_disable_keyentry.
    
    Fixes: f9ef05ce13e4 ("staging: vt6656: Fix pairwise key for non station modes")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/da2f7e7f-1658-1320-6eee-0f55770ca391@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44d8ca07ad2af23fb3e95357164037c19a4de489
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Sat Apr 18 17:43:24 2020 +0100

    staging: vt6656: Fix drivers TBTT timing counter.
    
    commit 09057742af98a39ebffa27fac4f889dc873132de upstream.
    
    The drivers TBTT counter is not synchronized with mac80211 timestamp.
    
    Reorder the functions and use vnt_update_next_tbtt to do the final
    synchronize.
    
    Fixes: c15158797df6 ("staging: vt6656: implement TSF counter")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/375d0b25-e8bc-c8f7-9b10-6cc705d486ee@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34e5e58843fb11ff655d9e9dccd7a923fd5bfa11
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Sat Apr 18 18:37:18 2020 +0100

    staging: vt6656: Fix calling conditions of vnt_set_bss_mode
    
    commit 664ba5180234593b4b8517530e8198bf2f7359e2 upstream.
    
    vnt_set_bss_mode needs to be called on all changes to BSS_CHANGED_BASIC_RATES,
    BSS_CHANGED_ERP_PREAMBLE and BSS_CHANGED_ERP_SLOT
    
    Remove all other calls and vnt_update_ifs which is called in vnt_set_bss_mode.
    
    Fixes an issue that preamble mode is not being updated correctly.
    
    Fixes: c12603576e06 ("staging: vt6656: Only call vnt_set_bss_mode on basic rates change.")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/44110801-6234-50d8-c583-9388f04b486c@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a35715fad2071792e3bb99112b355a3dc4b6f429
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Sat Apr 18 17:24:50 2020 +0100

    staging: vt6656: Don't set RCR_MULTICAST or RCR_BROADCAST by default.
    
    commit 0f8240bfc070033a4823b19883efd3d38c7735cc upstream.
    
    mac80211/users control whether multicast is on or off don't enable it by default.
    
    Fixes an issue when multicast/broadcast is always on allowing other beacons through
    in power save.
    
    Fixes: db8f37fa3355 ("staging: vt6656: mac80211 conversion: main_usb add functions...")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    Link: https://lore.kernel.org/r/2c24c33d-68c4-f343-bd62-105422418eac@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82f66b9dfa4c42b73a612466fac53d6d11250e9c
Author: Nicolas Pitre <nico@fluxnic.net>
Date:   Sat Mar 28 17:32:42 2020 -0400

    vt: don't hardcode the mem allocation upper bound
    
    commit 2717769e204e83e65b8819c5e2ef3e5b6639b270 upstream.
    
    The code in vc_do_resize() bounds the memory allocation size to avoid
    exceeding MAX_ORDER down the kzalloc() call chain and generating a
    runtime warning triggerable from user space. However, not only is it
    unwise to use a literal value here, but MAX_ORDER may also be
    configurable based on CONFIG_FORCE_MAX_ZONEORDER.
    Let's use KMALLOC_MAX_SIZE instead.
    
    Note that prior commit bb1107f7c605 ("mm, slab: make sure that
    KMALLOC_MAX_SIZE will fit into MAX_ORDER") the KMALLOC_MAX_SIZE value
    could not be relied upon.
    
    Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
    Cc: <stable@vger.kernel.org> # v4.10+
    Link: https://lore.kernel.org/r/nycvar.YSQ.7.76.2003281702410.2671@knanqh.ubzr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97b294d0e86b3544a3c410b77c640beca692724a
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:44:16 2020 +0800

    staging: comedi: Fix comedi_device refcnt leak in comedi_open
    
    commit 332e0e17ad49e084b7db670ef43b5eb59abd9e34 upstream.
    
    comedi_open() invokes comedi_dev_get_from_minor(), which returns a
    reference of the COMEDI device to "dev" with increased refcount.
    
    When comedi_open() returns, "dev" becomes invalid, so the refcount
    should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling path of
    comedi_open(). When "cfp" allocation is failed, the refcnt increased by
    comedi_dev_get_from_minor() is not decreased, causing a refcnt leak.
    
    Fix this issue by calling comedi_dev_put() on this error path when "cfp"
    allocation is failed.
    
    Fixes: 20f083c07565 ("staging: comedi: prepare support for per-file read and write subdevices")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/1587361459-83622-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 526e6fcb32164650e7b0aca9ee1c55da3f56d551
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Apr 6 15:20:15 2020 +0100

    staging: comedi: dt2815: fix writing hi byte of analog output
    
    commit ed87d33ddbcd9a1c3b5ae87995da34e6f51a862c upstream.
    
    The DT2815 analog output command is 16 bits wide, consisting of the
    12-bit sample value in bits 15 to 4, the channel number in bits 3 to 1,
    and a voltage or current selector in bit 0.  Both bytes of the 16-bit
    command need to be written in turn to a single 8-bit data register.
    However, the driver currently only writes the low 8-bits.  It is broken
    and appears to have always been broken.
    
    Electronic copies of the DT2815 User's Manual seem impossible to find
    online, but looking at the source code, a best guess for the sequence
    the driver intended to use to write the analog output command is as
    follows:
    
    1. Wait for the status register to read 0x00.
    2. Write the low byte of the command to the data register.
    3. Wait for the status register to read 0x80.
    4. Write the high byte of the command to the data register.
    
    Step 4 is missing from the driver.  Add step 4 to (hopefully) fix the
    driver.
    
    Also add a "FIXME" comment about setting bit 0 of the low byte of the
    command.  Supposedly, it is used to choose between voltage output and
    current output, but the current driver always sets it to 1.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200406142015.126982-1-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65b043bb6a73700154525166ca4fdacd0286931e
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Fri Apr 17 10:19:08 2020 +1200

    powerpc/setup_64: Set cache-line-size based on cache-block-size
    
    commit 94c0b013c98583614e1ad911e8795ca36da34a85 upstream.
    
    If {i,d}-cache-block-size is set and {i,d}-cache-line-size is not, use
    the block-size value for both. Per the devicetree spec cache-line-size
    is only needed if it differs from the block size.
    
    Originally the code would fallback from block size to line size. An
    error message was printed if both properties were missing.
    
    Later the code was refactored to use clearer names and logic but it
    inadvertently made line size a required property, meaning on systems
    without a line size property we fall back to the default from the
    cputable.
    
    On powernv (OPAL) platforms, since the introduction of device tree CPU
    features (5a61ef74f269 ("powerpc/64s: Support new device tree binding
    for discovering CPU features")), that has led to the wrong value being
    used, as the fallback value is incorrect for Power8/Power9 CPUs.
    
    The incorrect values flow through to the VDSO and also to the sysconf
    values, SC_LEVEL1_ICACHE_LINESIZE etc.
    
    Fixes: bd067f83b084 ("powerpc/64: Fix naming of cache block vs. cache line")
    Cc: stable@vger.kernel.org # v4.11+
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reported-by: Qian Cai <cai@lca.pw>
    [mpe: Add even more detail to change log]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200416221908.7886-1-chris.packham@alliedtelesis.co.nz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c78004318edacc8a4fc8ea7ad975012b0e941e67
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Mon Mar 23 09:19:33 2020 +0100

    ARM: imx: provide v7_cpu_resume() only on ARM_CPU_SUSPEND=y
    
    commit f1baca8896ae18e12c45552a4c4ae2086aa7e02c upstream.
    
    512a928affd5 ("ARM: imx: build v7_cpu_resume() unconditionally")
    introduced an unintended linker error for i.MX6 configurations that have
    ARM_CPU_SUSPEND=n which can happen if neither CONFIG_PM, CONFIG_CPU_IDLE,
    nor ARM_PSCI_FW are selected.
    
    Fix this by having v7_cpu_resume() compiled only when cpu_resume() it
    calls is available as well.
    
    The C declaration for the function remains unguarded to avoid future code
    inadvertently using a stub and introducing a regression to the bug the
    original commit fixed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 512a928affd5 ("ARM: imx: build v7_cpu_resume() unconditionally")
    Reported-by: Clemens Gruber <clemens.gruber@pqgruber.com>
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Tested-by: Roland Hieber <rhi@pengutronix.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 545f096414d09b7c021425f1dd155a1cea6c38ff
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Apr 17 10:08:09 2020 +0300

    iwlwifi: pcie: actually release queue memory in TVQM
    
    commit b98b33d5560a2d940f3b80f6768a6177bf3dfbc0 upstream.
    
    The iwl_trans_pcie_dyn_txq_free() function only releases the frames
    that may be left on the queue by calling iwl_pcie_gen2_txq_unmap(),
    but doesn't actually free the DMA ring or byte-count tables for the
    queue. This leads to pretty large memory leaks (at least before my
    queue size improvements), in particular in monitor/sniffer mode on
    channel hopping since this happens on every channel change.
    
    This was also now more evident after the move to a DMA pool for the
    byte count tables, showing messages such as
    
      BUG iwlwifi:bc (...): Objects remaining in iwlwifi:bc on __kmem_cache_shutdown()
    
    This fixes https://bugzilla.kernel.org/show_bug.cgi?id=206811.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Fixes: 6b35ff91572f ("iwlwifi: pcie: introduce a000 TX queues management")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20200417100405.f5f4c4193ec1.Id5feebc9b4318041913a9c89fc1378bb5454292c@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe77aec8265396b50c9a33512759c15a4ec5f8cb
Author: Gyeongtaek Lee <gt82.lee@samsung.com>
Date:   Sat Apr 18 13:13:20 2020 +0900

    ASoC: dapm: fixup dapm kcontrol widget
    
    commit ebf1474745b4373fdde0fcf32d9d1f369b50b212 upstream.
    
    snd_soc_dapm_kcontrol widget which is created by autodisable control
    should contain correct on_val, mask and shift because it is set when the
    widget is powered and changed value is applied on registers by following
    code in dapm_seq_run_coalesced().
    
                    mask |= w->mask << w->shift;
                    if (w->power)
                            value |= w->on_val << w->shift;
                    else
                            value |= w->off_val << w->shift;
    
    Shift on the mask in dapm_kcontrol_data_alloc() is removed to prevent
    double shift.
    And, on_val in dapm_kcontrol_set_value() is modified to get correct
    value in the dapm_seq_run_coalesced().
    
    Signed-off-by: Gyeongtaek Lee <gt82.lee@samsung.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/000001d61537$b212f620$1638e260$@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18441f7f5babc53e1bbbd2fdb57483c927cb5367
Author: Paul Moore <paul@paul-moore.com>
Date:   Mon Apr 20 16:24:34 2020 -0400

    audit: check the length of userspace generated audit records
    
    commit 763dafc520add02a1f4639b500c509acc0ea8e5b upstream.
    
    Commit 756125289285 ("audit: always check the netlink payload length
    in audit_receive_msg()") fixed a number of missing message length
    checks, but forgot to check the length of userspace generated audit
    records.  The good news is that you need CAP_AUDIT_WRITE to submit
    userspace audit records, which is generally only given to trusted
    processes, so the impact should be limited.
    
    Cc: stable@vger.kernel.org
    Fixes: 756125289285 ("audit: always check the netlink payload length in audit_receive_msg()")
    Reported-by: syzbot+49e69b4d71a420ceda3e@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33fda70c0f8382d72533f0d1c3f26e8bc76b480f
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:14:57 2020 -0400

    usb-storage: Add unusual_devs entry for JMicron JMS566
    
    commit 94f9c8c3c404ee1f7aaff81ad4f24aec4e34a78b upstream.
    
    Cyril Roelandt reports that his JMicron JMS566 USB-SATA bridge fails
    to handle WRITE commands with the FUA bit set, even though it claims
    to support FUA.  (Oddly enough, a later version of the same bridge,
    version 2.03 as opposed to 1.14, doesn't claim to support FUA.  Also
    oddly, the bridge _does_ support FUA when using the UAS transport
    instead of the Bulk-Only transport -- but this device was blacklisted
    for uas in commit bc3bdb12bbb3 ("usb-storage: Disable UAS on JMicron
    SATA enclosure") for apparently unrelated reasons.)
    
    This patch adds a usb-storage unusual_devs entry with the BROKEN_FUA
    flag.  This allows the bridge to work properly with usb-storage.
    
    Reported-and-tested-by: Cyril Roelandt <tipecaml@gmail.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2004221613110.11262-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37fe882533e93ff0d6e3606cdbb2a3d17d67cf8a
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Apr 17 12:59:59 2020 +0200

    tty: rocket, avoid OOB access
    
    commit 7127d24372bf23675a36edc64d092dc7fd92ebe8 upstream.
    
    init_r_port can access pc104 array out of bounds. pc104 is a 2D array
    defined to have 4 members. Each member has 8 submembers.
    * we can have more than 4 (PCI) boards, i.e. [board] can be OOB
    * line is not modulo-ed by anything, so the first line on the second
      board can be 4, on the 3rd 12 or alike (depending on previously
      registered boards). It's zero only on the first line of the first
      board. So even [line] can be OOB, quite soon (with the 2nd registered
      board already).
    
    This code is broken for ages, so just avoid the OOB accesses and don't
    try to fix it as we would need to find out the correct line number. Use
    the default: RS232, if we are out.
    
    Generally, if anyone needs to set the interface types, a module parameter
    is past the last thing that should be used for this purpose. The
    parameters' description says it's for ISA cards anyway.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: stable <stable@vger.kernel.org>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/20200417105959.15201-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f7818d90cc6b26d22d4375292ae74e767ee67f6
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Tue Apr 14 22:15:03 2020 +0300

    tty: hvc: fix buffer overflow during hvc_alloc().
    
    commit 9a9fc42b86c06120744555fea43fdcabe297c656 upstream.
    
    If there is a lot(more then 16) of virtio-console devices
    or virtio_console module is reloaded
    - buffers 'vtermnos' and 'cons_ops' are overflowed.
    In older kernels it overruns spinlock which leads to kernel freezing:
    https://bugzilla.redhat.com/show_bug.cgi?id=1786239
    
    To reproduce the issue, you can try simple script that
    loads/unloads module. Something like this:
    while [ 1 ]
    do
      modprobe virtio_console
      sleep 2
      modprobe -r virtio_console
      sleep 2
    done
    
    Description of problem:
    Guest get 'Call Trace' when loading module "virtio_console"
    and unloading it frequently - clearly reproduced on kernel-4.18.0:
    
    [   81.498208] ------------[ cut here ]------------
    [   81.499263] pvqspinlock: lock 0xffffffff92080020 has corrupted value 0xc0774ca0!
    [   81.501000] WARNING: CPU: 0 PID: 785 at kernel/locking/qspinlock_paravirt.h:500 __pv_queued_spin_unlock_slowpath+0xc0/0xd0
    [   81.503173] Modules linked in: virtio_console fuse xt_CHECKSUM ipt_MASQUERADE xt_conntrack ipt_REJECT nft_counter nf_nat_tftp nft_objref nf_conntrack_tftp tun bridge stp llc nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nf_tables_set nft_chain_nat_ipv6 nf_conntrack_ipv6 nf_defrag_ipv6 nf_nat_ipv6 nft_chain_route_ipv6 nft_chain_nat_ipv4 nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 nf_nat nf_conntrack nft_chain_route_ipv4 ip6_tables nft_compat ip_set nf_tables nfnetlink sunrpc bochs_drm drm_vram_helper ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm i2c_piix4 pcspkr crct10dif_pclmul crc32_pclmul joydev ghash_clmulni_intel ip_tables xfs libcrc32c sd_mod sg ata_generic ata_piix virtio_net libata crc32c_intel net_failover failover serio_raw virtio_scsi dm_mirror dm_region_hash dm_log dm_mod [last unloaded: virtio_console]
    [   81.517019] CPU: 0 PID: 785 Comm: kworker/0:2 Kdump: loaded Not tainted 4.18.0-167.el8.x86_64 #1
    [   81.518639] Hardware name: Red Hat KVM, BIOS 1.12.0-5.scrmod+el8.2.0+5159+d8aa4d83 04/01/2014
    [   81.520205] Workqueue: events control_work_handler [virtio_console]
    [   81.521354] RIP: 0010:__pv_queued_spin_unlock_slowpath+0xc0/0xd0
    [   81.522450] Code: 07 00 48 63 7a 10 e8 bf 64 f5 ff 66 90 c3 8b 05 e6 cf d6 01 85 c0 74 01 c3 8b 17 48 89 fe 48 c7 c7 38 4b 29 91 e8 3a 6c fa ff <0f> 0b c3 0f 0b 90 90 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 48
    [   81.525830] RSP: 0018:ffffb51a01ffbd70 EFLAGS: 00010282
    [   81.526798] RAX: 0000000000000000 RBX: 0000000000000010 RCX: 0000000000000000
    [   81.528110] RDX: ffff9e66f1826480 RSI: ffff9e66f1816a08 RDI: ffff9e66f1816a08
    [   81.529437] RBP: ffffffff9153ff10 R08: 000000000000026c R09: 0000000000000053
    [   81.530732] R10: 0000000000000000 R11: ffffb51a01ffbc18 R12: ffff9e66cd682200
    [   81.532133] R13: ffffffff9153ff10 R14: ffff9e6685569500 R15: ffff9e66cd682000
    [   81.533442] FS:  0000000000000000(0000) GS:ffff9e66f1800000(0000) knlGS:0000000000000000
    [   81.534914] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   81.535971] CR2: 00005624c55b14d0 CR3: 00000003a023c000 CR4: 00000000003406f0
    [   81.537283] Call Trace:
    [   81.537763]  __raw_callee_save___pv_queued_spin_unlock_slowpath+0x11/0x20
    [   81.539011]  .slowpath+0x9/0xe
    [   81.539585]  hvc_alloc+0x25e/0x300
    [   81.540237]  init_port_console+0x28/0x100 [virtio_console]
    [   81.541251]  handle_control_message.constprop.27+0x1c4/0x310 [virtio_console]
    [   81.542546]  control_work_handler+0x70/0x10c [virtio_console]
    [   81.543601]  process_one_work+0x1a7/0x3b0
    [   81.544356]  worker_thread+0x30/0x390
    [   81.545025]  ? create_worker+0x1a0/0x1a0
    [   81.545749]  kthread+0x112/0x130
    [   81.546358]  ? kthread_flush_work_fn+0x10/0x10
    [   81.547183]  ret_from_fork+0x22/0x40
    [   81.547842] ---[ end trace aa97649bd16c8655 ]---
    [   83.546539] general protection fault: 0000 [#1] SMP NOPTI
    [   83.547422] CPU: 5 PID: 3225 Comm: modprobe Kdump: loaded Tainted: G        W        --------- -  - 4.18.0-167.el8.x86_64 #1
    [   83.549191] Hardware name: Red Hat KVM, BIOS 1.12.0-5.scrmod+el8.2.0+5159+d8aa4d83 04/01/2014
    [   83.550544] RIP: 0010:__pv_queued_spin_lock_slowpath+0x19a/0x2a0
    [   83.551504] Code: c4 c1 ea 12 41 be 01 00 00 00 4c 8d 6d 14 41 83 e4 03 8d 42 ff 49 c1 e4 05 48 98 49 81 c4 40 a5 02 00 4c 03 24 c5 60 48 34 91 <49> 89 2c 24 b8 00 80 00 00 eb 15 84 c0 75 0a 41 0f b6 54 24 14 84
    [   83.554449] RSP: 0018:ffffb51a0323fdb0 EFLAGS: 00010202
    [   83.555290] RAX: 000000000000301c RBX: ffffffff92080020 RCX: 0000000000000001
    [   83.556426] RDX: 000000000000301d RSI: 0000000000000000 RDI: 0000000000000000
    [   83.557556] RBP: ffff9e66f196a540 R08: 000000000000028a R09: ffff9e66d2757788
    [   83.558688] R10: 0000000000000000 R11: 0000000000000000 R12: 646e61725f770b07
    [   83.559821] R13: ffff9e66f196a554 R14: 0000000000000001 R15: 0000000000180000
    [   83.560958] FS:  00007fd5032e8740(0000) GS:ffff9e66f1940000(0000) knlGS:0000000000000000
    [   83.562233] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   83.563149] CR2: 00007fd5022b0da0 CR3: 000000038c334000 CR4: 00000000003406e0
    
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200414191503.3471783-1-andrew@daynix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1988180a2eaa51c3e9c26e16d7a94424308e0658
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Apr 14 09:14:14 2020 +0200

    KVM: VMX: Enable machine check support for 32bit targets
    
    commit fb56baae5ea509e63c2a068d66a4d8ea91969fca upstream.
    
    There is no reason to limit the use of do_machine_check
    to 64bit targets. MCE handling works for both target familes.
    
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Sean Christopherson <sean.j.christopherson@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: a0861c02a981 ("KVM: Add VT-x machine check support")
    Signed-off-by: Uros Bizjak <ubizjak@gmail.com>
    Message-Id: <20200414071414.45636-1-ubizjak@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba46d6dcee90f57964d446c281ef53dea027f42d
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Apr 7 23:40:58 2020 -0700

    KVM: Check validity of resolved slot when searching memslots
    
    commit b6467ab142b708dd076f6186ca274f14af379c72 upstream.
    
    Check that the resolved slot (somewhat confusingly named 'start') is a
    valid/allocated slot before doing the final comparison to see if the
    specified gfn resides in the associated slot.  The resolved slot can be
    invalid if the binary search loop terminated because the search index
    was incremented beyond the number of used slots.
    
    This bug has existed since the binary search algorithm was introduced,
    but went unnoticed because KVM statically allocated memory for the max
    number of slots, i.e. the access would only be truly out-of-bounds if
    all possible slots were allocated and the specified gfn was less than
    the base of the lowest memslot.  Commit 36947254e5f98 ("KVM: Dynamically
    size memslot array based on number of used slots") eliminated the "all
    possible slots allocated" condition and made the bug embarrasingly easy
    to hit.
    
    Fixes: 9c1a5d38780e6 ("kvm: optimize GFN to memslot lookup with large slots amount")
    Reported-by: syzbot+d889b59b2bb87d4047a2@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200408064059.8957-2-sean.j.christopherson@intel.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f06d3a6c49499e2eebd47fffd584bfce5b3a38b
Author: George Wilson <gcwilson@linux.ibm.com>
Date:   Thu Mar 19 23:27:58 2020 -0400

    tpm: ibmvtpm: retry on H_CLOSED in tpm_ibmvtpm_send()
    
    commit eba5cf3dcb844c82f54d4a857e124824e252206d upstream.
    
    tpm_ibmvtpm_send() can fail during PowerVM Live Partition Mobility resume
    with an H_CLOSED return from ibmvtpm_send_crq().  The PAPR says, 'The
    "partner partition suspended" transport event disables the associated CRQ
    such that any H_SEND_CRQ hcall() to the associated CRQ returns H_Closed
    until the CRQ has been explicitly enabled using the H_ENABLE_CRQ hcall.'
    This patch adds a check in tpm_ibmvtpm_send() for an H_CLOSED return from
    ibmvtpm_send_crq() and in that case calls tpm_ibmvtpm_resume() and
    retries the ibmvtpm_send_crq() once.
    
    Cc: stable@vger.kernel.org # 3.7.x
    Fixes: 132f76294744 ("drivers/char/tpm: Add new device driver to support IBM vTPM")
    Reported-by: Linh Pham <phaml@us.ibm.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Signed-off-by: George Wilson <gcwilson@linux.ibm.com>
    Tested-by: Linh Pham <phaml@us.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fbd15e159f021126a2941d77f22a94b14ccf0e2
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Sun Apr 12 20:04:12 2020 +0300

    tpm/tpm_tis: Free IRQ if probing fails
    
    commit b160c94be5d2816b62c8ac338605668304242959 upstream.
    
    Call disable_interrupts() if we have to revert to polling in order not to
    unnecessarily reserve the IRQ for the life-cycle of the driver.
    
    Cc: stable@vger.kernel.org # 4.5.x
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: e3837e74a06d ("tpm_tis: Refactor the interrupt setup")
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b47d6d6f68a37e9e6f1fc1a1cd5d5e02e2171394
Author: Alexander Tsoy <alexander@tsoy.me>
Date:   Sat Apr 18 20:58:15 2020 +0300

    ALSA: usb-audio: Filter out unsupported sample rates on Focusrite devices
    
    commit 1c826792586f526a5a5cd21d55aad388f5bb0b23 upstream.
    
    Many Focusrite devices supports a limited set of sample rates per
    altsetting. These includes audio interfaces with ADAT ports:
     - Scarlett 18i6, 18i8 1st gen, 18i20 1st gen;
     - Scarlett 18i8 2nd gen, 18i20 2nd gen;
     - Scarlett 18i8 3rd gen, 18i20 3rd gen;
     - Clarett 2Pre USB, 4Pre USB, 8Pre USB.
    
    Maximum rate is exposed in the last 4 bytes of Format Type descriptor
    which has a non-standard bLength = 10.
    
    Tested-by: Alexey Skobkin <skobkin-ru@ya.ru>
    Signed-off-by: Alexander Tsoy <alexander@tsoy.me>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200418175815.12211-1-alexander@tsoy.me
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83c4d03d001eb25b563e8cb4919ad6c9a0c4b0dd
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Apr 23 12:54:19 2020 +0800

    ALSA: usb-audio: Fix usb audio refcnt leak when getting spdif
    
    commit 59e1947ca09ebd1cae147c08c7c41f3141233c84 upstream.
    
    snd_microii_spdif_default_get() invokes snd_usb_lock_shutdown(), which
    increases the refcount of the snd_usb_audio object "chip".
    
    When snd_microii_spdif_default_get() returns, local variable "chip"
    becomes invalid, so the refcount should be decreased to keep refcount
    balanced.
    
    The reference counting issue happens in several exception handling paths
    of snd_microii_spdif_default_get(). When those error scenarios occur
    such as usb_ifnum_to_if() returns NULL, the function forgets to decrease
    the refcnt increased by snd_usb_lock_shutdown(), causing a refcnt leak.
    
    Fix this issue by jumping to "end" label when those error scenarios
    occur.
    
    Fixes: 447d6275f0c2 ("ALSA: usb-audio: Add sanity checks for endpoint accesses")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1587617711-13200-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a73fb6720ac54928aee888ecea340be1fbcf2052
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Apr 23 14:18:31 2020 +0800

    ALSA: hda/realtek - Add new codec supported for ALC245
    
    commit 7fbdcd8301a84c09cebfa64f1317a6dafeec9188 upstream.
    
    Enable new codec supported for ALC245.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/8c0804738b2c42439f59c39c8437817f@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f025e57b4b50114e6041879e6626c0be3f11f60c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 20 09:55:29 2020 +0200

    ALSA: usx2y: Fix potential NULL dereference
    
    commit 7686e3485253635c529cdd5f416fc640abaf076f upstream.
    
    The error handling code in usX2Y_rate_set() may hit a potential NULL
    dereference when an error occurs before allocating all us->urb[].
    Add a proper NULL check for fixing the corner case.
    
    Reported-by: Lin Yi <teroincn@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200420075529.27203-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e21c20cf8b532259511cbeaef0db2a690d91f92d
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Mon Apr 20 18:14:23 2020 -0700

    tools/vm: fix cross-compile build
    
    commit cf01699ee220c38099eb3e43ce3d10690c8b7060 upstream.
    
    Commit 7ed1c1901fe5 ("tools: fix cross-compile var clobbering") moved
    the setup of the CC variable to tools/scripts/Makefile.include to make
    the behavior consistent across all the tools Makefiles.
    
    As the vm tools missed the include we end up with the wrong CC in a
    cross-compiling evironment.
    
    Fixes: 7ed1c1901fe5 (tools: fix cross-compile var clobbering)
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Martin Kelly <martin@martingkelly.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200416104748.25243-1-l.stach@pengutronix.de
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8f73ebf7293fff47b9bc4c86c103ff8009fc03f
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Mon Apr 20 18:14:04 2020 -0700

    mm/ksm: fix NULL pointer dereference when KSM zero page is enabled
    
    commit 56df70a63ed5d989c1d36deee94cae14342be6e9 upstream.
    
    find_mergeable_vma() can return NULL.  In this case, it leads to a crash
    when we access vm_mm(its offset is 0x40) later in write_protect_page.
    And this case did happen on our server.  The following call trace is
    captured in kernel 4.19 with the following patch applied and KSM zero
    page enabled on our server.
    
      commit e86c59b1b12d ("mm/ksm: improve deduplication of zero pages with colouring")
    
    So add a vma check to fix it.
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000040
      Oops: 0000 [#1] SMP NOPTI
      CPU: 9 PID: 510 Comm: ksmd Kdump: loaded Tainted: G OE 4.19.36.bsk.9-amd64 #4.19.36.bsk.9
      RIP: try_to_merge_one_page+0xc7/0x760
      Code: 24 58 65 48 33 34 25 28 00 00 00 89 e8 0f 85 a3 06 00 00 48 83 c4
            60 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 8b 46 08 a8 01 75 b8 <49>
            8b 44 24 40 4c 8d 7c 24 20 b9 07 00 00 00 4c 89 e6 4c 89 ff 48
      RSP: 0018:ffffadbdd9fffdb0 EFLAGS: 00010246
      RAX: ffffda83ffd4be08 RBX: ffffda83ffd4be40 RCX: 0000002c6e800000
      RDX: 0000000000000000 RSI: ffffda83ffd4be40 RDI: 0000000000000000
      RBP: ffffa11939f02ec0 R08: 0000000094e1a447 R09: 00000000abe76577
      R10: 0000000000000962 R11: 0000000000004e6a R12: 0000000000000000
      R13: ffffda83b1e06380 R14: ffffa18f31f072c0 R15: ffffda83ffd4be40
      FS: 0000000000000000(0000) GS:ffffa0da43b80000(0000) knlGS:0000000000000000
      CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000040 CR3: 0000002c77c0a003 CR4: 00000000007626e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
        ksm_scan_thread+0x115e/0x1960
        kthread+0xf5/0x130
        ret_from_fork+0x1f/0x30
    
    [songmuchun@bytedance.com: if the vma is out of date, just exit]
      Link: http://lkml.kernel.org/r/20200416025034.29780-1-songmuchun@bytedance.com
    [akpm@linux-foundation.org: add the conventional braces, replace /** with /*]
    Fixes: e86c59b1b12d ("mm/ksm: improve deduplication of zero pages with colouring")
    Co-developed-by: Xiongchun Duan <duanxiongchun@bytedance.com>
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: Claudio Imbrenda <imbrenda@linux.vnet.ibm.com>
    Cc: Markus Elfring <Markus.Elfring@web.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200416025034.29780-1-songmuchun@bytedance.com
    Link: http://lkml.kernel.org/r/20200414132905.83819-1-songmuchun@bytedance.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b73684f9f53922184d876293229bdcba546f77bf
Author: Longpeng <longpeng2@huawei.com>
Date:   Mon Apr 20 18:13:51 2020 -0700

    mm/hugetlb: fix a addressing exception caused by huge_pte_offset
    
    commit 3c1d7e6ccb644d517a12f73a7ff200870926f865 upstream.
    
    Our machine encountered a panic(addressing exception) after run for a
    long time and the calltrace is:
    
        RIP: hugetlb_fault+0x307/0xbe0
        RSP: 0018:ffff9567fc27f808  EFLAGS: 00010286
        RAX: e800c03ff1258d48 RBX: ffffd3bb003b69c0 RCX: e800c03ff1258d48
        RDX: 17ff3fc00eda72b7 RSI: 00003ffffffff000 RDI: e800c03ff1258d48
        RBP: ffff9567fc27f8c8 R08: e800c03ff1258d48 R09: 0000000000000080
        R10: ffffaba0704c22a8 R11: 0000000000000001 R12: ffff95c87b4b60d8
        R13: 00005fff00000000 R14: 0000000000000000 R15: ffff9567face8074
        FS:  00007fe2d9ffb700(0000) GS:ffff956900e40000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: ffffd3bb003b69c0 CR3: 000000be67374000 CR4: 00000000003627e0
        DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
        DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
        Call Trace:
          follow_hugetlb_page+0x175/0x540
          __get_user_pages+0x2a0/0x7e0
          __get_user_pages_unlocked+0x15d/0x210
          __gfn_to_pfn_memslot+0x3c5/0x460 [kvm]
          try_async_pf+0x6e/0x2a0 [kvm]
          tdp_page_fault+0x151/0x2d0 [kvm]
         ...
          kvm_arch_vcpu_ioctl_run+0x330/0x490 [kvm]
          kvm_vcpu_ioctl+0x309/0x6d0 [kvm]
          do_vfs_ioctl+0x3f0/0x540
          SyS_ioctl+0xa1/0xc0
          system_call_fastpath+0x22/0x27
    
    For 1G hugepages, huge_pte_offset() wants to return NULL or pudp, but it
    may return a wrong 'pmdp' if there is a race.  Please look at the
    following code snippet:
    
        ...
        pud = pud_offset(p4d, addr);
        if (sz != PUD_SIZE && pud_none(*pud))
            return NULL;
        /* hugepage or swap? */
        if (pud_huge(*pud) || !pud_present(*pud))
            return (pte_t *)pud;
    
        pmd = pmd_offset(pud, addr);
        if (sz != PMD_SIZE && pmd_none(*pmd))
            return NULL;
        /* hugepage or swap? */
        if (pmd_huge(*pmd) || !pmd_present(*pmd))
            return (pte_t *)pmd;
        ...
    
    The following sequence would trigger this bug:
    
     - CPU0: sz = PUD_SIZE and *pud = 0 , continue
     - CPU0: "pud_huge(*pud)" is false
     - CPU1: calling hugetlb_no_page and set *pud to xxxx8e7(PRESENT)
     - CPU0: "!pud_present(*pud)" is false, continue
     - CPU0: pmd = pmd_offset(pud, addr) and maybe return a wrong pmdp
    
    However, we want CPU0 to return NULL or pudp in this case.
    
    We must make sure there is exactly one dereference of pud and pmd.
    
    Signed-off-by: Longpeng <longpeng2@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Sean Christopherson <sean.j.christopherson@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200413010342.771-1-longpeng2@huawei.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5de393402985a04fcd6980d3701759e31e2cfff
Author: Jann Horn <jannh@google.com>
Date:   Mon Apr 20 18:14:11 2020 -0700

    vmalloc: fix remap_vmalloc_range() bounds checks
    
    commit bdebd6a2831b6fab69eb85cee74a8ba77f1a1cc2 upstream.
    
    remap_vmalloc_range() has had various issues with the bounds checks it
    promises to perform ("This function checks that addr is a valid
    vmalloc'ed area, and that it is big enough to cover the vma") over time,
    e.g.:
    
     - not detecting pgoff<<PAGE_SHIFT overflow
    
     - not detecting (pgoff<<PAGE_SHIFT)+usize overflow
    
     - not checking whether addr and addr+(pgoff<<PAGE_SHIFT) are the same
       vmalloc allocation
    
     - comparing a potentially wildly out-of-bounds pointer with the end of
       the vmalloc region
    
    In particular, since commit fc9702273e2e ("bpf: Add mmap() support for
    BPF_MAP_TYPE_ARRAY"), unprivileged users can cause kernel null pointer
    dereferences by calling mmap() on a BPF map with a size that is bigger
    than the distance from the start of the BPF map to the end of the
    address space.
    
    This could theoretically be used as a kernel ASLR bypass, by using
    whether mmap() with a given offset oopses or returns an error code to
    perform a binary search over the possible address range.
    
    To allow remap_vmalloc_range_partial() to verify that addr and
    addr+(pgoff<<PAGE_SHIFT) are in the same vmalloc region, pass the offset
    to remap_vmalloc_range_partial() instead of adding it to the pointer in
    remap_vmalloc_range().
    
    In remap_vmalloc_range_partial(), fix the check against
    get_vm_area_size() by using size comparisons instead of pointer
    comparisons, and add checks for pgoff.
    
    Fixes: 833423143c3a ("[PATCH] mm: introduce remap_vmalloc_range()")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: stable@vger.kernel.org
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: Andrii Nakryiko <andriin@fb.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: KP Singh <kpsingh@chromium.org>
    Link: http://lkml.kernel.org/r/20200415222312.236431-1-jannh@google.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 334c43f8d69fa5aa6487157b927ed9146e40786e
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Wed Aug 1 14:25:39 2018 -0700

    overflow.h: Add arithmetic shift helper
    
    commit 0c66847793d1982d1083dc6f7adad60fa265ce9c upstream.
    
    Add shift_overflow() helper to assist driver authors in ensuring that
    shift operations don't cause overflows or other odd conditions.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    [kees: tweaked comments and commit log, dropped unneeded assignment]
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17f673a9861cb15b98fcae1467647d7817e46109
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:09:51 2020 -0400

    USB: hub: Fix handling of connect changes during sleep
    
    commit 9f952e26295d977dbfc6fedeaf8c4f112c818d37 upstream.
    
    Commit 8099f58f1ecd ("USB: hub: Don't record a connect-change event
    during reset-resume") wasn't very well conceived.  The problem it
    tried to fix was that if a connect-change event occurred while the
    system was asleep (such as a device disconnecting itself from the bus
    when it is suspended and then reconnecting when it resumes)
    requiring a reset-resume during the system wakeup transition, the hub
    port's change_bit entry would remain set afterward.  This would cause
    the hub driver to believe another connect-change event had occurred
    after the reset-resume, which was wrong and would lead the driver to
    send unnecessary requests to the device (which could interfere with a
    firmware update).
    
    The commit tried to fix this by not setting the change_bit during the
    wakeup.  But this was the wrong thing to do; it means that when a
    device is unplugged while the system is asleep, the hub driver doesn't
    realize anything has happened: The change_bit flag which would tell it
    to handle the disconnect event is clear.
    
    The commit needs to be reverted and the problem fixed in a different
    way.  Fortunately an alternative solution was noted in the commit's
    Changelog: We can continue to set the change_bit entry in
    hub_activate() but then clear it when a reset-resume occurs.  That way
    the the hub driver will see the change_bit when a device is
    disconnected but won't see it when the device is still present.
    
    That's what this patch does.
    
    Reported-and-tested-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: 8099f58f1ecd ("USB: hub: Don't record a connect-change event during reset-resume")
    Tested-by: Paul Zimmerman <pauldzim@gmail.com>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2004221602480.11262-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b49aa64f1d2526de71ae0354d37026e5861ccb4b
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Sat Mar 28 16:18:11 2020 -0400

    USB: core: Fix free-while-in-use bug in the USB S-Glibrary
    
    commit 056ad39ee9253873522f6469c3364964a322912b upstream.
    
    FuzzUSB (a variant of syzkaller) found a free-while-still-in-use bug
    in the USB scatter-gather library:
    
    BUG: KASAN: use-after-free in atomic_read
    include/asm-generic/atomic-instrumented.h:26 [inline]
    BUG: KASAN: use-after-free in usb_hcd_unlink_urb+0x5f/0x170
    drivers/usb/core/hcd.c:1607
    Read of size 4 at addr ffff888065379610 by task kworker/u4:1/27
    
    CPU: 1 PID: 27 Comm: kworker/u4:1 Not tainted 5.5.11 #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.10.2-1ubuntu1 04/01/2014
    Workqueue: scsi_tmf_2 scmd_eh_abort_handler
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xce/0x128 lib/dump_stack.c:118
     print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374
     __kasan_report+0x153/0x1cb mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:639
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x152/0x1b0 mm/kasan/generic.c:192
     __kasan_check_read+0x11/0x20 mm/kasan/common.c:95
     atomic_read include/asm-generic/atomic-instrumented.h:26 [inline]
     usb_hcd_unlink_urb+0x5f/0x170 drivers/usb/core/hcd.c:1607
     usb_unlink_urb+0x72/0xb0 drivers/usb/core/urb.c:657
     usb_sg_cancel+0x14e/0x290 drivers/usb/core/message.c:602
     usb_stor_stop_transport+0x5e/0xa0 drivers/usb/storage/transport.c:937
    
    This bug occurs when cancellation of the S-G transfer races with
    transfer completion.  When that happens, usb_sg_cancel() may continue
    to access the transfer's URBs after usb_sg_wait() has freed them.
    
    The bug is caused by the fact that usb_sg_cancel() does not take any
    sort of reference to the transfer, and so there is nothing to prevent
    the URBs from being deallocated while the routine is trying to use
    them.  The fix is to take such a reference by incrementing the
    transfer's io->count field while the cancellation is in progres and
    decrementing it afterward.  The transfer's URBs are not deallocated
    until io->complete is triggered, which happens when io->count reaches
    zero.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: Kyungtae Kim <kt0755@gmail.com>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2003281615140.14837-100000@netrider.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90adc8923a5104d829af94e01176937502743125
Author: Jann Horn <jannh@google.com>
Date:   Wed Apr 1 09:46:19 2020 +0200

    USB: early: Handle AMD's spec-compliant identifiers, too
    
    commit 7dbdb53d72a51cea9b921d9dbba54be00752212a upstream.
    
    This fixes a bug that causes the USB3 early console to freeze after
    printing a single line on AMD machines because it can't parse the
    Transfer TRB properly.
    
    The spec at
    https://www.intel.com/content/dam/www/public/us/en/documents/technical-specifications/extensible-host-controler-interface-usb-xhci.pdf
    says in section "4.5.1 Device Context Index" that the Context Index,
    also known as Endpoint ID according to
    section "1.6 Terms and Abbreviations", is normally computed as
    `DCI = (Endpoint Number * 2) + Direction`, which matches the current
    definitions of XDBC_EPID_OUT and XDBC_EPID_IN.
    
    However, the numbering in a Debug Capability Context data structure is
    supposed to be different:
    Section "7.6.3.2 Endpoint Contexts and Transfer Rings" explains that a
    Debug Capability Context data structure has the endpoints mapped to indices
    0 and 1.
    
    Change XDBC_EPID_OUT/XDBC_EPID_IN to the spec-compliant values, add
    XDBC_EPID_OUT_INTEL/XDBC_EPID_IN_INTEL with Intel's incorrect values, and
    let xdbc_handle_tx_event() handle both.
    
    I have verified that with this patch applied, the USB3 early console works
    on both an Intel and an AMD machine.
    
    Fixes: aeb9dd1de98c ("usb/early: Add driver for xhci debug capability")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Link: https://lore.kernel.org/r/20200401074619.8024-1-jannh@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48f9c7b6d70a6c819c5c7c595186f0d86314c613
Author: Jonathan Cox <jonathan@jdcox.net>
Date:   Fri Apr 10 14:24:27 2020 -0700

    USB: Add USB_QUIRK_DELAY_CTRL_MSG and USB_QUIRK_DELAY_INIT for Corsair K70 RGB RAPIDFIRE
    
    commit be34a5854b4606bd7a160ad3cb43415d623596c7 upstream.
    
    The Corsair K70 RGB RAPIDFIRE needs the USB_QUIRK_DELAY_INIT and
    USB_QUIRK_DELAY_CTRL_MSG to function or it will randomly not
    respond on boot, just like other Corsair keyboards
    
    Signed-off-by: Jonathan Cox <jonathan@jdcox.net>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200410212427.2886-1-jonathan@jdcox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56d0f59a4ea93d3b550d9c5ef08c337b4acf8133
Author: Changming Liu <liu.changm@northeastern.edu>
Date:   Mon Apr 20 23:41:25 2020 -0400

    USB: sisusbvga: Change port variable from signed to unsigned
    
    commit 2df7405f79ce1674d73c2786fe1a8727c905d65b upstream.
    
    Change a bunch of arguments of wrapper functions which pass signed
    integer to an unsigned integer which might cause undefined behaviors
    when sign integer overflow.
    
    Signed-off-by: Changming Liu <liu.changm@northeastern.edu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/BL0PR06MB45482D71EA822D75A0E60A2EE5D50@BL0PR06MB4548.namprd06.prod.outlook.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e21c8c03af20932c15d8b1d3bb9cbad9607a6eab
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Mon Apr 27 11:34:12 2020 +0100

    fs/namespace.c: fix mountpoint reference counter race
    
    A race condition between threads updating mountpoint reference counter
    affects longterm releases 4.4.220, 4.9.220, 4.14.177 and 4.19.118.
    
    The mountpoint reference counter corruption may occur when:
    * one thread increments m_count member of struct mountpoint
      [under namespace_sem, but not holding mount_lock]
        pivot_root()
    * another thread simultaneously decrements the same m_count
      [under mount_lock, but not holding namespace_sem]
        put_mountpoint()
          unhash_mnt()
            umount_mnt()
              mntput_no_expire()
    
    To fix this race condition, grab mount_lock before updating m_count in
    pivot_root().
    
    Reference: CVE-2020-12114
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2dad369d0ee4c78467163c6a4a22f5b026e991d
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Apr 3 15:27:15 2020 +0200

    iio: xilinx-xadc: Fix sequencer configuration for aux channels in simultaneous mode
    
    commit 8bef455c8b1694547ee59e8b1939205ed9d901a6 upstream.
    
    The XADC has two internal ADCs. Depending on the mode it is operating in
    either one or both of them are used. The device manual calls this
    continuous (one ADC) and simultaneous (both ADCs) mode.
    
    The meaning of the sequencing register for the aux channels changes
    depending on the mode.
    
    In continuous mode each bit corresponds to one of the 16 aux channels. And
    the single ADC will convert them one by one in order.
    
    In simultaneous mode the aux channels are split into two groups the first 8
    channels are assigned to the first ADC and the other 8 channels to the
    second ADC. The upper 8 bits of the sequencing register are unused and the
    lower 8 bits control both ADCs. This means a bit needs to be set if either
    the corresponding channel from the first group or the second group (or
    both) are set.
    
    Currently the driver does not have the special handling required for
    simultaneous mode. Add it.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b77e5d0b4e8ae7d107717b12aab2967684c00a59
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Apr 3 15:27:14 2020 +0200

    iio: xilinx-xadc: Fix clearing interrupt when enabling trigger
    
    commit f954b098fbac4d183219ce5b42d76d6df2aed50a upstream.
    
    When enabling the trigger and unmasking the end-of-sequence (EOS) interrupt
    the EOS interrupt should be cleared from the status register. Otherwise it
    is possible that it was still set from a previous capture. If that is the
    case the interrupt would fire immediately even though no conversion has
    been done yet and stale data is being read from the device.
    
    The old code only clears the interrupt if the interrupt was previously
    unmasked. Which does not make much sense since the interrupt is always
    masked at this point and in addition masking the interrupt does not clear
    the interrupt from the status register. So the clearing needs to be done
    unconditionally.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34f3873793c9b11d57bf2d64b0a8791cd77c1ac8
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Apr 3 15:27:13 2020 +0200

    iio: xilinx-xadc: Fix ADC-B powerdown
    
    commit e44ec7794d88f918805d700240211a9ec05ed89d upstream.
    
    The check for shutting down the second ADC is inverted. This causes it to
    be powered down when it should be enabled. As a result channels that are
    supposed to be handled by the second ADC return invalid conversion results.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cb6fd58b54815335686ddf61a38640b0ea82ecf
Author: Olivier Moysan <olivier.moysan@st.com>
Date:   Mon Mar 9 11:02:12 2020 +0100

    iio: adc: stm32-adc: fix sleep in atomic context
    
    commit e2042d2936dfc84e9c600fe9b9d0039ca0e54b7d upstream.
    
    This commit fixes the following error:
    "BUG: sleeping function called from invalid context at kernel/irq/chip.c"
    
    In DMA mode suppress the trigger irq handler, and make the buffer
    transfers directly in DMA callback, instead.
    
    Fixes: 2763ea0585c9 ("iio: adc: stm32: add optional dma support")
    Signed-off-by: Olivier Moysan <olivier.moysan@st.com>
    Acked-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed412430664dabcb16bd1c82e20e417ef604a729
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Apr 19 09:19:26 2020 +0200

    ALSA: hda: Remove ASUS ROG Zenith from the blacklist
    
    [ Upstream commit a8cf44f085ac12c0b5b8750ebb3b436c7f455419 ]
    
    The commit 3c6fd1f07ed0 ("ALSA: hda: Add driver blacklist") added a
    new blacklist for the devices that are known to have empty codecs, and
    one of the entries was ASUS ROG Zenith II (PCI SSID 1043:874f).
    However, it turned out that the very same PCI SSID is used for the
    previous model that does have the valid HD-audio codecs and the change
    broke the sound on it.
    
    This patch reverts the corresponding entry as a temporary solution.
    Although Zenith II and co will see get the empty HD-audio bus again,
    it'd be merely resource wastes and won't affect the functionality,
    so it's no end of the world.  We'll need to address this later,
    e.g. by either switching to DMI string matching or using PCI ID &
    SSID pairs.
    
    Fixes: 3c6fd1f07ed0 ("ALSA: hda: Add driver blacklist")
    Reported-by: Johnathan Smithinovic <johnathan.smithinovic@gmx.at>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200419071926.22683-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d952266c3de93b6eea602803b3d6ad532c8fc0b
Author: Waiman Long <longman@redhat.com>
Date:   Sat Mar 21 21:11:25 2020 -0400

    KEYS: Avoid false positive ENOMEM error on key read
    
    [ Upstream commit 4f0882491a148059a52480e753b7f07fc550e188 ]
    
    By allocating a kernel buffer with a user-supplied buffer length, it
    is possible that a false positive ENOMEM error may be returned because
    the user-supplied length is just too large even if the system do have
    enough memory to hold the actual key data.
    
    Moreover, if the buffer length is larger than the maximum amount of
    memory that can be returned by kmalloc() (2^(MAX_ORDER-1) number of
    pages), a warning message will also be printed.
    
    To reduce this possibility, we set a threshold (PAGE_SIZE) over which we
    do check the actual key length first before allocating a buffer of the
    right size to hold it. The threshold is arbitrary, it is just used to
    trigger a buffer length check. It does not limit the actual key length
    as long as there is enough memory to satisfy the memory request.
    
    To further avoid large buffer allocation failure due to page
    fragmentation, kvmalloc() is used to allocate the buffer so that vmapped
    pages can be used when there is not a large enough contiguous set of
    pages available for allocation.
    
    In the extremely unlikely scenario that the key keeps on being changed
    and made longer (still <= buflen) in between 2 __keyctl_read_key()
    calls, the __keyctl_read_key() calling loop in keyctl_read_key() may
    have to be iterated a large number of times, but definitely not infinite.
    
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd7ecda215cda3e918d4fba2e5a4b9004196fe93
Author: David Ahern <dsahern@gmail.com>
Date:   Mon Apr 20 17:13:52 2020 -0600

    vrf: Check skb for XFRM_TRANSFORMED flag
    
    [ Upstream commit 16b9db1ce34ff00d6c18e82825125cfef0cdfb13 ]
    
    To avoid a loop with qdiscs and xfrms, check if the skb has already gone
    through the qdisc attached to the VRF device and then to the xfrm layer.
    If so, no need for a second redirect.
    
    Fixes: 193125dbd8eb ("net: Introduce VRF device driver")
    Reported-by: Trev Larock <trev@larock.ca>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0367dba6b8b7a42827ebbc67e8798a42bf5e4318
Author: David Ahern <dsahern@gmail.com>
Date:   Mon Apr 20 17:13:51 2020 -0600

    xfrm: Always set XFRM_TRANSFORMED in xfrm{4,6}_output_finish
    
    [ Upstream commit 0c922a4850eba2e668f73a3f1153196e09abb251 ]
    
    IPSKB_XFRM_TRANSFORMED and IP6SKB_XFRM_TRANSFORMED are skb flags set by
    xfrm code to tell other skb handlers that the packet has been passed
    through the xfrm output functions. Simplify the code and just always
    set them rather than conditionally based on netfilter enabled thus
    making the flag available for other users.
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a04a6dfda20a1fd0c47ae533c210638e0e064e09
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Apr 20 20:26:53 2020 -0700

    net: dsa: b53: Fix ARL register definitions
    
    [ Upstream commit c2e77a18a7ed65eb48f6e389b6a59a0fd753646a ]
    
    The ARL {MAC,VID} tuple and the forward entry were off by 0x10 bytes,
    which means that when we read/wrote from/to ARL bin index 0, we were
    actually accessing the ARLA_RWCTRL register.
    
    Fixes: 1da6df85c6fb ("net: dsa: b53: Implement ARL add/del/dump operations")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 938be9dfb0fc5e899a56a98336b7768fa8c6f7b5
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Apr 20 15:01:33 2020 +0000

    team: fix hang in team_mode_get()
    
    [ Upstream commit 1c30fbc76b8f0c07c92a8ca4cd7c456612e17eb5 ]
    
    When team mode is changed or set, the team_mode_get() is called to check
    whether the mode module is inserted or not. If the mode module is not
    inserted, it calls the request_module().
    In the request_module(), it creates a child process, which is
    the "modprobe" process and waits for the done of the child process.
    At this point, the following locks were used.
    down_read(&cb_lock()); by genl_rcv()
        genl_lock(); by genl_rcv_msc()
            rtnl_lock(); by team_nl_cmd_options_set()
                mutex_lock(&team->lock); by team_nl_team_get()
    
    Concurrently, the team module could be removed by rmmod or "modprobe -r"
    The __exit function of team module is team_module_exit(), which calls
    team_nl_fini() and it tries to acquire following locks.
    down_write(&cb_lock);
        genl_lock();
    Because of the genl_lock() and cb_lock, this process can't be finished
    earlier than request_module() routine.
    
    The problem secenario.
    CPU0                                     CPU1
    team_mode_get
        request_module()
                                             modprobe -r team_mode_roundrobin
                                                         team <--(B)
            modprobe team <--(A)
                team_mode_roundrobin
    
    By request_module(), the "modprobe team_mode_roundrobin" command
    will be executed. At this point, the modprobe process will decide
    that the team module should be inserted before team_mode_roundrobin.
    Because the team module is being removed.
    
    By the module infrastructure, the same module insert/remove operations
    can't be executed concurrently.
    So, (A) waits for (B) but (B) also waits for (A) because of locks.
    So that the hang occurs at this point.
    
    Test commands:
        while :
        do
            teamd -d &
            killall teamd &
            modprobe -rv team_mode_roundrobin &
        done
    
    The approach of this patch is to hold the reference count of the team
    module if the team module is compiled as a module. If the reference count
    of the team module is not zero while request_module() is being called,
    the team module will not be removed at that moment.
    So that the above scenario could not occur.
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5043538bce7a18ae76bf6c81e35241893d0615f
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Apr 17 07:10:23 2020 -0700

    tcp: cache line align MAX_TCP_HEADER
    
    [ Upstream commit 9bacd256f1354883d3c1402655153367982bba49 ]
    
    TCP stack is dumb in how it cooks its output packets.
    
    Depending on MAX_HEADER value, we might chose a bad ending point
    for the headers.
    
    If we align the end of TCP headers to cache line boundary, we
    make sure to always use the smallest number of cache lines,
    which always help.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62d3d1d4ff9e6090e3e79f62e0d21493b9b73170
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Apr 23 13:13:03 2020 +0800

    net/x25: Fix x25_neigh refcnt leak when receiving frame
    
    [ Upstream commit f35d12971b4d814cdb2f659d76b42f0c545270b6 ]
    
    x25_lapb_receive_frame() invokes x25_get_neigh(), which returns a
    reference of the specified x25_neigh object to "nb" with increased
    refcnt.
    
    When x25_lapb_receive_frame() returns, local variable "nb" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one path of
    x25_lapb_receive_frame(). When pskb_may_pull() returns false, the
    function forgets to decrease the refcnt increased by x25_get_neigh(),
    causing a refcnt leak.
    
    Fix this issue by calling x25_neigh_put() when pskb_may_pull() returns
    false.
    
    Fixes: cb101ed2c3c7 ("x25: Handle undersized/fragmented skbs")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8a15c1b91bb2e1a7feafa7ce6b0db6a8b762179
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:36:19 2020 +0800

    net: netrom: Fix potential nr_neigh refcnt leak in nr_add_node
    
    [ Upstream commit d03f228470a8c0a22b774d1f8d47071e0de4f6dd ]
    
    nr_add_node() invokes nr_neigh_get_dev(), which returns a local
    reference of the nr_neigh object to "nr_neigh" with increased refcnt.
    
    When nr_add_node() returns, "nr_neigh" becomes invalid, so the refcount
    should be decreased to keep refcount balanced.
    
    The issue happens in one normal path of nr_add_node(), which forgets to
    decrease the refcnt increased by nr_neigh_get_dev() and causes a refcnt
    leak. It should decrease the refcnt before the function returns like
    other normal paths do.
    
    Fix this issue by calling nr_neigh_put() before the nr_add_node()
    returns.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0388465ab6f945cab1d35eef4a83cc5823a82829
Author: Doug Berger <opendmb@gmail.com>
Date:   Thu Apr 23 15:44:17 2020 -0700

    net: bcmgenet: correct per TX/RX ring statistics
    
    [ Upstream commit a6d0b83f25073bdf08b8547aeff961a62c6ab229 ]
    
    The change to track net_device_stats per ring to better support SMP
    missed updating the rx_dropped member.
    
    The ndo_get_stats method is also needed to combine the results for
    ethtool statistics (-S) before filling in the ethtool structure.
    
    Fixes: 37a30b435b92 ("net: bcmgenet: Track per TX/RX rings statistics")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15d8e92bd3df4e864c5bee9a3b97c6134982be84
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Apr 20 13:29:40 2020 +0000

    macvlan: fix null dereference in macvlan_device_event()
    
    [ Upstream commit 4dee15b4fd0d61ec6bbd179238191e959d34cf7a ]
    
    In the macvlan_device_event(), the list_first_entry_or_null() is used.
    This function could return null pointer if there is no node.
    But, the macvlan module doesn't check the null pointer.
    So, null-ptr-deref would occur.
    
          bond0
            |
       +----+-----+
       |          |
    macvlan0   macvlan1
       |          |
     dummy0     dummy1
    
    The problem scenario.
    If dummy1 is removed,
    1. ->dellink() of dummy1 is called.
    2. NETDEV_UNREGISTER of dummy1 notification is sent to macvlan module.
    3. ->dellink() of macvlan1 is called.
    4. NETDEV_UNREGISTER of macvlan1 notification is sent to bond module.
    5. __bond_release_one() is called and it internally calls
       dev_set_mac_address().
    6. dev_set_mac_address() calls the ->ndo_set_mac_address() of macvlan1,
       which is macvlan_set_mac_address().
    7. macvlan_set_mac_address() calls the dev_set_mac_address() with dummy1.
    8. NETDEV_CHANGEADDR of dummy1 is sent to macvlan module.
    9. In the macvlan_device_event(), it calls list_first_entry_or_null().
    At this point, dummy1 and macvlan1 were removed.
    So, list_first_entry_or_null() will return NULL.
    
    Test commands:
        ip netns add nst
        ip netns exec nst ip link add bond0 type bond
        for i in {0..10}
        do
            ip netns exec nst ip link add dummy$i type dummy
            ip netns exec nst ip link add macvlan$i link dummy$i \
                    type macvlan mode passthru
            ip netns exec nst ip link set macvlan$i master bond0
        done
        ip netns del nst
    
    Splat looks like:
    [   40.585687][  T146] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] SMP DEI
    [   40.587249][  T146] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [   40.588342][  T146] CPU: 1 PID: 146 Comm: kworker/u8:2 Not tainted 5.7.0-rc1+ #532
    [   40.589299][  T146] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   40.590469][  T146] Workqueue: netns cleanup_net
    [   40.591045][  T146] RIP: 0010:macvlan_device_event+0x4e2/0x900 [macvlan]
    [   40.591905][  T146] Code: 00 00 00 00 00 fc ff df 80 3c 06 00 0f 85 45 02 00 00 48 89 da 48 b8 00 00 00 00 00 fc ff d2
    [   40.594126][  T146] RSP: 0018:ffff88806116f4a0 EFLAGS: 00010246
    [   40.594783][  T146] RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [   40.595653][  T146] RDX: 0000000000000000 RSI: ffff88806547ddd8 RDI: ffff8880540f1360
    [   40.596495][  T146] RBP: ffff88804011a808 R08: fffffbfff4fb8421 R09: fffffbfff4fb8421
    [   40.597377][  T146] R10: ffffffffa7dc2107 R11: 0000000000000000 R12: 0000000000000008
    [   40.598186][  T146] R13: ffff88804011a000 R14: ffff8880540f1000 R15: 1ffff1100c22de9a
    [   40.599012][  T146] FS:  0000000000000000(0000) GS:ffff888067800000(0000) knlGS:0000000000000000
    [   40.600004][  T146] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   40.600665][  T146] CR2: 00005572d3a807b8 CR3: 000000005fcf4003 CR4: 00000000000606e0
    [   40.601485][  T146] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   40.602461][  T146] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   40.603443][  T146] Call Trace:
    [   40.603871][  T146]  ? nf_tables_dump_setelem+0xa0/0xa0 [nf_tables]
    [   40.604587][  T146]  ? macvlan_uninit+0x100/0x100 [macvlan]
    [   40.605212][  T146]  ? __module_text_address+0x13/0x140
    [   40.605842][  T146]  notifier_call_chain+0x90/0x160
    [   40.606477][  T146]  dev_set_mac_address+0x28e/0x3f0
    [   40.607117][  T146]  ? netdev_notify_peers+0xc0/0xc0
    [   40.607762][  T146]  ? __module_text_address+0x13/0x140
    [   40.608440][  T146]  ? notifier_call_chain+0x90/0x160
    [   40.609097][  T146]  ? dev_set_mac_address+0x1f0/0x3f0
    [   40.609758][  T146]  dev_set_mac_address+0x1f0/0x3f0
    [   40.610402][  T146]  ? __local_bh_enable_ip+0xe9/0x1b0
    [   40.611071][  T146]  ? bond_hw_addr_flush+0x77/0x100 [bonding]
    [   40.611823][  T146]  ? netdev_notify_peers+0xc0/0xc0
    [   40.612461][  T146]  ? bond_hw_addr_flush+0x77/0x100 [bonding]
    [   40.613213][  T146]  ? bond_hw_addr_flush+0x77/0x100 [bonding]
    [   40.613963][  T146]  ? __local_bh_enable_ip+0xe9/0x1b0
    [   40.614631][  T146]  ? bond_time_in_interval.isra.31+0x90/0x90 [bonding]
    [   40.615484][  T146]  ? __bond_release_one+0x9f0/0x12c0 [bonding]
    [   40.616230][  T146]  __bond_release_one+0x9f0/0x12c0 [bonding]
    [   40.616949][  T146]  ? bond_enslave+0x47c0/0x47c0 [bonding]
    [   40.617642][  T146]  ? lock_downgrade+0x730/0x730
    [   40.618218][  T146]  ? check_flags.part.42+0x450/0x450
    [   40.618850][  T146]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   40.619519][  T146]  ? trace_hardirqs_on+0x30/0x180
    [   40.620117][  T146]  ? wait_for_completion+0x250/0x250
    [   40.620754][  T146]  bond_netdev_event+0x822/0x970 [bonding]
    [   40.621460][  T146]  ? __module_text_address+0x13/0x140
    [   40.622097][  T146]  notifier_call_chain+0x90/0x160
    [   40.622806][  T146]  rollback_registered_many+0x660/0xcf0
    [   40.623522][  T146]  ? netif_set_real_num_tx_queues+0x780/0x780
    [   40.624290][  T146]  ? notifier_call_chain+0x90/0x160
    [   40.624957][  T146]  ? netdev_upper_dev_unlink+0x114/0x180
    [   40.625686][  T146]  ? __netdev_adjacent_dev_unlink_neighbour+0x30/0x30
    [   40.626421][  T146]  ? mutex_is_locked+0x13/0x50
    [   40.627016][  T146]  ? unregister_netdevice_queue+0xf2/0x240
    [   40.627663][  T146]  unregister_netdevice_many.part.134+0x13/0x1b0
    [   40.628362][  T146]  default_device_exit_batch+0x2d9/0x390
    [   40.628987][  T146]  ? unregister_netdevice_many+0x40/0x40
    [   40.629615][  T146]  ? dev_change_net_namespace+0xcb0/0xcb0
    [   40.630279][  T146]  ? prepare_to_wait_exclusive+0x2e0/0x2e0
    [   40.630943][  T146]  ? ops_exit_list.isra.9+0x97/0x140
    [   40.631554][  T146]  cleanup_net+0x441/0x890
    [ ... ]
    
    Fixes: e289fd28176b ("macvlan: fix the problem when mac address changes for passthru mode")
    Reported-by: syzbot+5035b1f9dc7ea4558d5a@syzkaller.appspotmail.com
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 484ed10c38b13027e14cd7a7fc313d7367025609
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Thu Apr 23 13:40:47 2020 +0000

    macsec: avoid to set wrong mtu
    
    [ Upstream commit 7f327080364abccf923fa5a5b24e038eb0ba1407 ]
    
    When a macsec interface is created, the mtu is calculated with the lower
    interface's mtu value.
    If the mtu of lower interface is lower than the length, which is needed
    by macsec interface, macsec's mtu value will be overflowed.
    So, if the lower interface's mtu is too low, macsec interface's mtu
    should be set to 0.
    
    Test commands:
        ip link add dummy0 mtu 10 type dummy
        ip link add macsec0 link dummy0 type macsec
        ip link show macsec0
    
    Before:
        11: macsec0@dummy0: <BROADCAST,MULTICAST,M-DOWN> mtu 4294967274
    After:
        11: macsec0@dummy0: <BROADCAST,MULTICAST,M-DOWN> mtu 0
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7dff38799ee7f3e867a880b26697b03d3b74744
Author: John Haxby <john.haxby@oracle.com>
Date:   Sat Apr 18 16:30:49 2020 +0100

    ipv6: fix restrict IPV6_ADDRFORM operation
    
    [ Upstream commit 82c9ae440857840c56e05d4fb1427ee032531346 ]
    
    Commit b6f6118901d1 ("ipv6: restrict IPV6_ADDRFORM operation") fixed a
    problem found by syzbot an unfortunate logic error meant that it
    also broke IPV6_ADDRFORM.
    
    Rearrange the checks so that the earlier test is just one of the series
    of checks made before moving the socket from IPv6 to IPv4.
    
    Fixes: b6f6118901d1 ("ipv6: restrict IPV6_ADDRFORM operation")
    Signed-off-by: John Haxby <john.haxby@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e62f0f18405006eae5b362c6b3182cda1d1b3950
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Mon Apr 20 15:26:54 2020 +0530

    cxgb4: fix large delays in PTP synchronization
    
    [ Upstream commit bd019427bf3623ee3c7d2845cf921bbf4c14846c ]
    
    Fetching PTP sync information from mailbox is slow and can take
    up to 10 milliseconds. Reduce this unnecessary delay by directly
    reading the information from the corresponding registers.
    
    Fixes: 9c33e4208bce ("cxgb4: Add PTP Hardware Clock (PHC) support")
    Signed-off-by: Manoj Malviya <manojmalviya@chelsio.com>
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69e4bfba095a3a03015c35f6fbdfaafff5f8d26b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Sun Apr 26 09:06:17 2020 +0200

    mm, slub: restore the original intention of prefetch_freepointer()
    
    commit 0882ff9190e3bc51e2d78c3aadd7c690eeaa91d5 upstream.
    
    In SLUB, prefetch_freepointer() is used when allocating an object from
    cache's freelist, to make sure the next object in the list is cache-hot,
    since it's probable it will be allocated soon.
    
    Commit 2482ddec670f ("mm: add SLUB free list pointer obfuscation") has
    unintentionally changed the prefetch in a way where the prefetch is
    turned to a real fetch, and only the next->next pointer is prefetched.
    In case there is not a stream of allocations that would benefit from
    prefetching, the extra real fetch might add a useless cache miss to the
    allocation.  Restore the previous behavior.
    
    Link: http://lkml.kernel.org/r/20180809085245.22448-1-vbabka@suse.cz
    Fixes: 2482ddec670f ("mm: add SLUB free list pointer obfuscation")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Daniel Micay <danielmicay@gmail.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Matthias Schiffer <mschiffer@universe-factory.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf2b525b1831cc8e73ed1a2f5e44919bb4a556c0
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Oct 5 14:03:57 2019 +0200

    PCI/ASPM: Allow re-enabling Clock PM
    
    [ Upstream commit 35efea32b26f9aacc99bf07e0d2cdfba2028b099 ]
    
    Previously Clock PM could not be re-enabled after being disabled by
    pci_disable_link_state() because clkpm_capable was reset.  Change this by
    adding a clkpm_disable field similar to aspm_disable.
    
    Link: https://lore.kernel.org/r/4e8a66db-7d53-4a66-c26c-f0037ffaa705@gmail.com
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6f70697d02b5cfef26e531ff7a3dd1f3b0dd87d
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Apr 7 16:14:27 2020 +0200

    perf/core: Disable page faults when getting phys address
    
    [ Upstream commit d3296fb372bf7497b0e5d0478c4e7a677ec6f6e9 ]
    
    We hit following warning when running tests on kernel
    compiled with CONFIG_DEBUG_ATOMIC_SLEEP=y:
    
     WARNING: CPU: 19 PID: 4472 at mm/gup.c:2381 __get_user_pages_fast+0x1a4/0x200
     CPU: 19 PID: 4472 Comm: dummy Not tainted 5.6.0-rc6+ #3
     RIP: 0010:__get_user_pages_fast+0x1a4/0x200
     ...
     Call Trace:
      perf_prepare_sample+0xff1/0x1d90
      perf_event_output_forward+0xe8/0x210
      __perf_event_overflow+0x11a/0x310
      __intel_pmu_pebs_event+0x657/0x850
      intel_pmu_drain_pebs_nhm+0x7de/0x11d0
      handle_pmi_common+0x1b2/0x650
      intel_pmu_handle_irq+0x17b/0x370
      perf_event_nmi_handler+0x40/0x60
      nmi_handle+0x192/0x590
      default_do_nmi+0x6d/0x150
      do_nmi+0x2f9/0x3c0
      nmi+0x8e/0xd7
    
    While __get_user_pages_fast() is IRQ-safe, it calls access_ok(),
    which warns on:
    
      WARN_ON_ONCE(!in_task() && !pagefault_disabled())
    
    Peter suggested disabling page faults around __get_user_pages_fast(),
    which gets rid of the warning in access_ok() call.
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lkml.kernel.org/r/20200407141427.3184722-1-jolsa@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d42db7f280dd1650c831dee519f9c150c7bb66d
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 3 13:35:35 2020 -0800

    pwm: bcm2835: Dynamically allocate base
    
    [ Upstream commit 2c25b07e5ec119cab609e41407a1fb3fa61442f5 ]
    
    The newer 2711 and 7211 chips have two PWM controllers and failure to
    dynamically allocate the PWM base would prevent the second PWM
    controller instance being probed for succeeding with an -EEXIST error
    from alloc_pwms().
    
    Fixes: e5a06dc5ac1f ("pwm: Add BCM2835 PWM driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41fc491dfc3d69e79a5b82ef82843c900351ba76
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Mar 16 11:32:15 2020 +0100

    pwm: renesas-tpu: Fix late Runtime PM enablement
    
    [ Upstream commit d5a3c7a4536e1329a758e14340efd0e65252bd3d ]
    
    Runtime PM should be enabled before calling pwmchip_add(), as PWM users
    can appear immediately after the PWM chip has been added.
    Likewise, Runtime PM should always be disabled after the removal of the
    PWM chip, even if the latter failed.
    
    Fixes: 99b82abb0a35b073 ("pwm: Add Renesas TPU PWM driver")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f5000339321cb469bd68958b6e6dd30c4e2d0ee
Author: Cornelia Huck <cohuck@redhat.com>
Date:   Fri Mar 27 13:45:02 2020 +0100

    s390/cio: avoid duplicated 'ADD' uevents
    
    [ Upstream commit 05ce3e53f375295c2940390b2b429e506e07655c ]
    
    The common I/O layer delays the ADD uevent for subchannels and
    delegates generating this uevent to the individual subchannel
    drivers. The io_subchannel driver will do so when the associated
    ccw_device has been registered -- but unconditionally, so more
    ADD uevents will be generated if a subchannel has been unbound
    from the io_subchannel driver and later rebound.
    
    To fix this, only generate the ADD event if uevents were still
    suppressed for the device.
    
    Fixes: fa1a8c23eb7d ("s390: cio: Delay uevents for subchannels")
    Message-Id: <20200327124503.9794-2-cohuck@redhat.com>
    Reported-by: Boris Fiuczynski <fiuczy@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Boris Fiuczynski <fiuczy@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73240ee761ff17688cc5de7cebe8dba0057b7d1b
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Apr 10 14:34:13 2020 -0700

    ipc/util.c: sysvipc_find_ipc() should increase position index
    
    [ Upstream commit 89163f93c6f969da5811af5377cc10173583123b ]
    
    If seq_file .next function does not change position index, read after
    some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Link: http://lkml.kernel.org/r/b7a20945-e315-8bb0-21e6-3875c14a8494@virtuozzo.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1058a30206ebe17df1174dd08363122e552dd924
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 10 14:33:53 2020 -0700

    selftests: kmod: fix handling test numbers above 9
    
    [ Upstream commit 6d573a07528308eb77ec072c010819c359bebf6e ]
    
    get_test_count() and get_test_enabled() were broken for test numbers
    above 9 due to awk interpreting a field specification like '$0010' as
    octal rather than decimal.  Fix it by stripping the leading zeroes.
    
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jeff Vander Stoep <jeffv@google.com>
    Cc: Jessica Yu <jeyu@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: NeilBrown <neilb@suse.com>
    Link: http://lkml.kernel.org/r/20200318230515.171692-5-ebiggers@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a461aa9842bb737efe2ebc3e89b2a3dc2818c0e
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Apr 10 14:34:10 2020 -0700

    kernel/gcov/fs.c: gcov_seq_next() should increase position index
    
    [ Upstream commit f4d74ef6220c1eda0875da30457bef5c7111ab06 ]
    
    If seq_file .next function does not change position index, read after
    some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Waiman Long <longman@redhat.com>
    Link: http://lkml.kernel.org/r/f65c6ee7-bd00-f910-2f8a-37cc67e4ff88@virtuozzo.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e06e9ec81b953d4bb9f03f8a5eafbbd69a0456d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 2 20:53:57 2020 +0200

    ASoC: Intel: atom: Take the drv->lock mutex before calling sst_send_slot_map()
    
    [ Upstream commit 81630dc042af998b9f58cd8e2c29dab9777ea176 ]
    
    sst_send_slot_map() uses sst_fill_and_send_cmd_unlocked() because in some
    places it is called with the drv->lock mutex already held.
    
    So it must always be called with the mutex locked. This commit adds missing
    locking in the sst_set_be_modules() code-path.
    
    Fixes: 24c8d14192cc ("ASoC: Intel: mrfld: add DSP core controls")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200402185359.3424-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 304a02096a3ab59508a5ae0b078f06da215e4869
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Mar 24 15:58:50 2020 +0800

    scsi: iscsi: Report unbind session event when the target has been removed
    
    [ Upstream commit 13e60d3ba287d96eeaf1deaadba51f71578119a3 ]
    
    If the daemon is restarted or crashes while logging out of a session, the
    unbind session event sent by the kernel is not processed and is lost.  When
    the daemon starts again, the session can't be unbound because the daemon is
    waiting for the event message. However, the kernel has already logged out
    and the event will not be resent.
    
    When iscsid restart is complete, logout session reports error:
    
    Logging out of session [sid: 6, target: iqn.xxxxx, portal: xx.xx.xx.xx,3260]
    iscsiadm: Could not logout of [sid: 6, target: iscsiadm -m node iqn.xxxxx, portal: xx.xx.xx.xx,3260].
    iscsiadm: initiator reported error (9 - internal error)
    iscsiadm: Could not logout of all requested sessions
    
    Make sure the unbind event is emitted.
    
    [mkp: commit desc and applied by hand since patch was mangled]
    
    Link: https://lore.kernel.org/r/4eab1771-2cb3-8e79-b31c-923652340e99@huawei.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54cf27c79d50646481b4291ebef620d05da29405
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Mar 16 11:32:14 2020 +0100

    pwm: rcar: Fix late Runtime PM enablement
    
    [ Upstream commit 1451a3eed24b5fd6a604683f0b6995e0e7e16c79 ]
    
    Runtime PM should be enabled before calling pwmchip_add(), as PWM users
    can appear immediately after the PWM chip has been added.
    Likewise, Runtime PM should be disabled after the removal of the PWM
    chip.
    
    Fixes: ed6c1476bf7f16d5 ("pwm: Add support for R-Car PWM Timer")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 968b1dd03e74563d05b78f8b30227a521c982cce
Author: Yan, Zheng <zyan@redhat.com>
Date:   Tue Mar 10 19:34:20 2020 +0800

    ceph: don't skip updating wanted caps when cap is stale
    
    [ Upstream commit 0aa971b6fd3f92afef6afe24ef78d9bb14471519 ]
    
    1. try_get_cap_refs() fails to get caps and finds that mds_wanted
       does not include what it wants. It returns -ESTALE.
    2. ceph_get_caps() calls ceph_renew_caps(). ceph_renew_caps() finds
       that inode has cap, so it calls ceph_check_caps().
    3. ceph_check_caps() finds that issued caps (without checking if it's
       stale) already includes caps wanted by open file, so it skips
       updating wanted caps.
    
    Above events can cause an infinite loop inside ceph_get_caps().
    
    Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7435d3c34bd5e5b0a796211b05a947c32ab24127
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Fri Mar 6 09:34:20 2020 +0800

    ceph: return ceph_mdsc_do_request() errors from __get_parent()
    
    [ Upstream commit c6d50296032f0b97473eb2e274dc7cc5d0173847 ]
    
    Return the error returned by ceph_mdsc_do_request(). Otherwise,
    r_target_inode ends up being NULL this ends up returning ENOENT
    regardless of the error.
    
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9808cb4b2cc22ae3506509e27cc26c036b736f1
Author: James Smart <jsmart2021@gmail.com>
Date:   Sun Mar 22 11:12:53 2020 -0700

    scsi: lpfc: Fix kasan slab-out-of-bounds error in lpfc_unreg_login
    
    [ Upstream commit 38503943c89f0bafd9e3742f63f872301d44cbea ]
    
    The following kasan bug was called out:
    
     BUG: KASAN: slab-out-of-bounds in lpfc_unreg_login+0x7c/0xc0 [lpfc]
     Read of size 2 at addr ffff889fc7c50a22 by task lpfc_worker_3/6676
     ...
     Call Trace:
     dump_stack+0x96/0xe0
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     print_address_description.constprop.6+0x1b/0x220
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     __kasan_report.cold.9+0x37/0x7c
     ? lpfc_unreg_login+0x7c/0xc0 [lpfc]
     kasan_report+0xe/0x20
     lpfc_unreg_login+0x7c/0xc0 [lpfc]
     lpfc_sli_def_mbox_cmpl+0x334/0x430 [lpfc]
     ...
    
    When processing the completion of a "Reg Rpi" login mailbox command in
    lpfc_sli_def_mbox_cmpl, a call may be made to lpfc_unreg_login. The vpi is
    extracted from the completing mailbox context and passed as an input for
    the next. However, the vpi stored in the mailbox command context is an
    absolute vpi, which for SLI4 represents both base + offset.  When used with
    a non-zero base component, (function id > 0) this results in an
    out-of-range access beyond the allocated phba->vpi_ids array.
    
    Fix by subtracting the function's base value to get an accurate vpi number.
    
    Link: https://lore.kernel.org/r/20200322181304.37655-2-jsmart2021@gmail.com
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit deb946eeaa7f17f8fe91ed320e94411a73523454
Author: Tero Kristo <t-kristo@ti.com>
Date:   Thu Mar 12 11:58:06 2020 +0200

    watchdog: reset last_hw_keepalive time at start
    
    [ Upstream commit 982bb70517aef2225bad1d802887b733db492cc0 ]
    
    Currently the watchdog core does not initialize the last_hw_keepalive
    time during watchdog startup. This will cause the watchdog to be pinged
    immediately if enough time has passed from the system boot-up time, and
    some types of watchdogs like K3 RTI does not like this.
    
    To avoid the issue, setup the last_hw_keepalive time during watchdog
    startup.
    
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200302200426.6492-3-t-kristo@ti.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f400768a2a73a9d439b7e2e2c76851d3b71f207c
Author: Jeremy Sowden <jeremy@azazel.net>
Date:   Tue Mar 19 15:39:21 2019 +0000

    vti4: removed duplicate log message.
    
    commit 01ce31c57b3f07c91c9d45bbaf126124cce83a5d upstream.
    
    Removed info log-message if ipip tunnel registration fails during
    module-initialization: it adds nothing to the error message that is
    written on all failures.
    
    Fixes: dd9ee3444014e ("vti4: Fix a ipip packet processing bug in 'IPCOMP' virtual tunnel")
    Signed-off-by: Jeremy Sowden <jeremy@azazel.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ab07ea502ab75214580cd2ae4f6888d21f2dcb8
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu Oct 11 01:49:48 2018 +0000

    crypto: mxs-dcp - make symbols 'sha1_null_hash' and 'sha256_null_hash' static
    
    commit ce4e45842de3eb54b8dd6e081765d741f5b92b56 upstream.
    
    Fixes the following sparse warnings:
    
    drivers/crypto/mxs-dcp.c:39:15: warning:
     symbol 'sha1_null_hash' was not declared. Should it be static?
    drivers/crypto/mxs-dcp.c:43:15: warning:
     symbol 'sha256_null_hash' was not declared. Should it be static?
    
    Fixes: c709eebaf5c5 ("crypto: mxs-dcp - Fix SHA null hashes and output length")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 521eb0edffb28eb0c52d519b2d54ae05e1e5289d
Author: Rob Clark <robdclark@chromium.org>
Date:   Wed Sep 4 09:56:03 2019 -0700

    drm/msm: Use the correct dma_sync calls harder
    
    commit 9f614197c744002f9968e82c649fdf7fe778e1e7 upstream.
    
    Looks like the dma_sync calls don't do what we want on armv7 either.
    Fixes:
    
      Unable to handle kernel paging request at virtual address 50001000
      pgd = (ptrval)
      [50001000] *pgd=00000000
      Internal error: Oops: 805 [#1] SMP ARM
      Modules linked in:
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.3.0-rc6-00271-g9f159ae07f07 #4
      Hardware name: Freescale i.MX53 (Device Tree Support)
      PC is at v7_dma_clean_range+0x20/0x38
      LR is at __dma_page_cpu_to_dev+0x28/0x90
      pc : [<c011c76c>]    lr : [<c01181c4>]    psr: 20000013
      sp : d80b5a88  ip : de96c000  fp : d840ce6c
      r10: 00000000  r9 : 00000001  r8 : d843e010
      r7 : 00000000  r6 : 00008000  r5 : ddb6c000  r4 : 00000000
      r3 : 0000003f  r2 : 00000040  r1 : 50008000  r0 : 50001000
      Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
      Control: 10c5387d  Table: 70004019  DAC: 00000051
      Process swapper/0 (pid: 1, stack limit = 0x(ptrval))
    
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Fixes: 3de433c5b38a ("drm/msm: Use the correct dma_sync calls in msm_gem")
    Tested-by: Fabio Estevam <festevam@gmail.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfebac06dd5fde6abff56316c0451753daf5e92f
Author: David Howells <dhowells@redhat.com>
Date:   Fri Sep 28 00:51:20 2018 +0100

    keys: Fix the use of the C++ keyword "private" in uapi/linux/keyctl.h
    
    commit 2ecefa0a15fd0ef88b9cd5d15ceb813008136431 upstream.
    
    The keyctl_dh_params struct in uapi/linux/keyctl.h contains the symbol
    "private" which means that the header file will cause compilation failure
    if #included in to a C++ program.  Further, the patch that added the same
    struct to the keyutils package named the symbol "priv", not "private".
    
    The previous attempt to fix this (commit 8a2336e549d3) did so by simply
    renaming the kernel's copy of the field to dh_private, but this then breaks
    existing userspace and as such has been reverted (commit 8c0f9f5b309d).
    
    [And note, to those who think that wrapping the struct in extern "C" {}
     will work: it won't; that only changes how symbol names are presented to
     the assembler and linker.].
    
    Instead, insert an anonymous union around the "private" member and add a
    second member in there with the name "priv" to match the one in the
    keyutils package.  The "private" member is then wrapped in !__cplusplus
    cpp-conditionals to hide it from C++.
    
    Fixes: ddbb41148724 ("KEYS: Add KEYCTL_DH_COMPUTE command")
    Fixes: 8a2336e549d3 ("uapi/linux/keyctl.h: don't use C++ reserved keyword as a struct member name")
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Randy Dunlap <rdunlap@infradead.org>
    cc: Lubomir Rintel <lkundrak@v3.sk>
    cc: James Morris <jmorris@namei.org>
    cc: Mat Martineau <mathew.j.martineau@linux.intel.com>
    cc: Stephan Mueller <smueller@chronox.de>
    cc: Andrew Morton <akpm@linux-foundation.org>
    cc: Linus Torvalds <torvalds@linux-foundation.org>
    cc: stable@vger.kernel.org
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48eaa2b5d52c431769ebea561b6464271a832533
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Feb 28 14:32:48 2018 +0100

    net: ipv4: avoid unused variable warning for sysctl
    
    commit 773daa3caf5d3f87fdb1ab43e9c1b367a38fa394 upstream.
    
    The newly introudced ip_min_valid_pmtu variable is only used when
    CONFIG_SYSCTL is set:
    
    net/ipv4/route.c:135:12: error: 'ip_min_valid_pmtu' defined but not used [-Werror=unused-variable]
    
    This moves it to the other variables like it, to avoid the harmless
    warning.
    
    Fixes: c7272c2f1229 ("net: ipv4: don't allow setting net.ipv4.route.min_pmtu below 68")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcf49bd648195332352717a9a537765da6c2c23c
Author: Nicolai Stange <nstange@suse.de>
Date:   Mon Jan 8 15:54:44 2018 +0100

    net: ipv4: emulate READ_ONCE() on ->hdrincl bit-field in raw_sendmsg()
    
    commit 20b50d79974ea3192e8c3ab7faf4e536e5f14d8f upstream.
    
    Commit 8f659a03a0ba ("net: ipv4: fix for a race condition in
    raw_sendmsg") fixed the issue of possibly inconsistent ->hdrincl handling
    due to concurrent updates by reading this bit-field member into a local
    variable and using the thus stabilized value in subsequent tests.
    
    However, aforementioned commit also adds the (correct) comment that
    
      /* hdrincl should be READ_ONCE(inet->hdrincl)
       * but READ_ONCE() doesn't work with bit fields
       */
    
    because as it stands, the compiler is free to shortcut or even eliminate
    the local variable at its will.
    
    Note that I have not seen anything like this happening in reality and thus,
    the concern is a theoretical one.
    
    However, in order to be on the safe side, emulate a READ_ONCE() on the
    bit-field by doing it on the local 'hdrincl' variable itself:
    
            int hdrincl = inet->hdrincl;
            hdrincl = READ_ONCE(hdrincl);
    
    This breaks the chain in the sense that the compiler is not allowed
    to replace subsequent reads from hdrincl with reloads from inet->hdrincl.
    
    Fixes: 8f659a03a0ba ("net: ipv4: fix for a race condition in raw_sendmsg")
    Signed-off-by: Nicolai Stange <nstange@suse.de>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcb3929d3893b0968276fe973c9baa5c3b3ca2f5
Author: Dmitry Monakhov <dmonakhov@gmail.com>
Date:   Wed Nov 6 12:25:02 2019 +0000

    ext4: fix extent_status fragmentation for plain files
    
    commit 4068664e3cd2312610ceac05b74c4cf1853b8325 upstream.
    
    Extents are cached in read_extent_tree_block(); as a result, extents
    are not cached for inodes with depth == 0 when we try to find the
    extent using ext4_find_extent().  The result of the lookup is cached
    in ext4_map_blocks() but is only a subset of the extent on disk.  As a
    result, the contents of extents status cache can get very badly
    fragmented for certain workloads, such as a random 4k read workload.
    
    File size of /mnt/test is 33554432 (8192 blocks of 4096 bytes)
     ext:     logical_offset:        physical_offset: length:   expected: flags:
       0:        0..    8191:      40960..     49151:   8192:             last,eof
    
    $ perf record -e 'ext4:ext4_es_*' /root/bin/fio --name=t --direct=0 --rw=randread --bs=4k --filesize=32M --size=32M --filename=/mnt/test
    $ perf script | grep ext4_es_insert_extent | head -n 10
                 fio   131 [000]    13.975421:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [494/1) mapped 41454 status W
                 fio   131 [000]    13.975939:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [6064/1) mapped 47024 status W
                 fio   131 [000]    13.976467:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [6907/1) mapped 47867 status W
                 fio   131 [000]    13.976937:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [3850/1) mapped 44810 status W
                 fio   131 [000]    13.977440:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [3292/1) mapped 44252 status W
                 fio   131 [000]    13.977931:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [6882/1) mapped 47842 status W
                 fio   131 [000]    13.978376:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [3117/1) mapped 44077 status W
                 fio   131 [000]    13.978957:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [2896/1) mapped 43856 status W
                 fio   131 [000]    13.979474:           ext4:ext4_es_insert_extent: dev 253,0 ino 12 es [7479/1) mapped 48439 status W
    
    Fix this by caching the extents for inodes with depth == 0 in
    ext4_find_extent().
    
    [ Renamed ext4_es_cache_extents() to ext4_cache_extents() since this
      newly added function is not in extents_cache.c, and to avoid
      potential visual confusion with ext4_es_cache_extent().  -TYT ]
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@gmail.com>
    Link: https://lore.kernel.org/r/20191106122502.19986-1-dmonakhov@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
