commit b90344f7d6000deba0709d75225f30cbf79ec2f0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 24 11:26:46 2021 +0100

    Linux 5.4.108
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210322121922.372583154@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 819eb4d7a85e5b11da8596f01b1f2c53bc3211b2
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Wed Mar 10 13:20:40 2021 +0100

    cifs: Fix preauth hash corruption
    
    commit 05946d4b7a7349ae58bfa2d51ae832e64a394c2d upstream.
    
    smb311_update_preauth_hash() uses the shash in server->secmech without
    appropriate locking, and this can lead to sessions corrupting each
    other's preauth hashes.
    
    The following script can easily trigger the problem:
    
            #!/bin/sh -e
    
            NMOUNTS=10
            for i in $(seq $NMOUNTS);
                    mkdir -p /tmp/mnt$i
                    umount /tmp/mnt$i 2>/dev/null || :
            done
            while :; do
                    for i in $(seq $NMOUNTS); do
                            mount -t cifs //192.168.0.1/test /tmp/mnt$i -o ... &
                    done
                    wait
                    for i in $(seq $NMOUNTS); do
                            umount /tmp/mnt$i
                    done
            done
    
    Usually within seconds this leads to one or more of the mounts failing
    with the following errors, and a "Bad SMB2 signature for message" is
    seen in the server logs:
    
     CIFS: VFS: \\192.168.0.1 failed to connect to IPC (rc=-13)
     CIFS: VFS: cifs_mount failed w/return code = -13
    
    Fix it by holding the server mutex just like in the other places where
    the shashes are used.
    
    Fixes: 8bd68c6e47abff34e4 ("CIFS: implement v3.11 preauth integrity")
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    CC: <stable@vger.kernel.org>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    [aaptel: backport to kernel without CIFS_SESS_OP]
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf113ffd620da6750b2e24dad1a25702b27f8f7d
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Mar 12 10:20:33 2021 +0100

    x86/apic/of: Fix CPU devicetree-node lookups
    
    commit dd926880da8dbbe409e709c1d3c1620729a94732 upstream.
    
    Architectures that describe the CPU topology in devicetree and do not have
    an identity mapping between physical and logical CPU ids must override the
    default implementation of arch_match_cpu_phys_id().
    
    Failing to do so breaks CPU devicetree-node lookups using of_get_cpu_node()
    and of_cpu_device_node_get() which several drivers rely on. It also causes
    the CPU struct devices exported through sysfs to point to the wrong
    devicetree nodes.
    
    On x86, CPUs are described in devicetree using their APIC ids and those
    do not generally coincide with the logical ids, even if CPU0 typically
    uses APIC id 0.
    
    Add the missing implementation of arch_match_cpu_phys_id() so that CPU-node
    lookups work also with SMP.
    
    Apart from fixing the broken sysfs devicetree-node links this likely does
    not affect current users of mainline kernels on x86.
    
    Fixes: 4e07db9c8db8 ("x86/devicetree: Use CPU description from Device Tree")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20210312092033.26317-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 288be0ed9b36ad4cd4da1145e9ae07b143a41459
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Mar 17 15:38:52 2021 +0100

    genirq: Disable interrupts for force threaded handlers
    
    commit 81e2073c175b887398e5bca6c004efa89983f58d upstream.
    
    With interrupt force threading all device interrupt handlers are invoked
    from kernel threads. Contrary to hard interrupt context the invocation only
    disables bottom halfs, but not interrupts. This was an oversight back then
    because any code like this will have an issue:
    
    thread(irq_A)
      irq_handler(A)
        spin_lock(&foo->lock);
    
    interrupt(irq_B)
      irq_handler(B)
        spin_lock(&foo->lock);
    
    This has been triggered with networking (NAPI vs. hrtimers) and console
    drivers where printk() happens from an interrupt which interrupted the
    force threaded handler.
    
    Now people noticed and started to change the spin_lock() in the handler to
    spin_lock_irqsave() which affects performance or add IRQF_NOTHREAD to the
    interrupt request which in turn breaks RT.
    
    Fix the root cause and not the symptom and disable interrupts before
    invoking the force threaded handler which preserves the regular semantics
    and the usefulness of the interrupt force threading as a general debugging
    tool.
    
    For not RT this is not changing much, except that during the execution of
    the threaded handler interrupts are delayed until the handler
    returns. Vs. scheduling and softirq processing there is no difference.
    
    For RT kernels there is no issue.
    
    Fixes: 8d32a307e4fa ("genirq: Provide forced interrupt threading")
    Reported-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Link: https://lore.kernel.org/r/20210317143859.513307808@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8ebe853abcac83428e80059bac22efbec28f5a2
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Wed Mar 10 00:31:27 2021 -0800

    firmware/efi: Fix a use after bug in efi_mem_reserve_persistent
    
    commit 9ceee7d0841a8f7d7644021ba7d4cc1fbc7966e3 upstream.
    
    In the for loop in efi_mem_reserve_persistent(), prsv = rsv->next
    use the unmapped rsv. Use the unmapped pages will cause segment
    fault.
    
    Fixes: 18df7577adae6 ("efi/memreserve: deal with memreserve entries in unmapped memory")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31e17169a1166b14ce9269497ffa0c0dd07a1387
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Mar 10 08:33:19 2021 +0100

    efi: use 32-bit alignment for efi_guid_t literals
    
    commit fb98cc0b3af2ba4d87301dff2b381b12eee35d7d upstream.
    
    Commit 494c704f9af0 ("efi: Use 32-bit alignment for efi_guid_t") updated
    the type definition of efi_guid_t to ensure that it always appears
    sufficiently aligned (the UEFI spec is ambiguous about this, but given
    the fact that its EFI_GUID type is defined in terms of a struct carrying
    a uint32_t, the natural alignment is definitely >= 32 bits).
    
    However, we missed the EFI_GUID() macro which is used to instantiate
    efi_guid_t literals: that macro is still based on the guid_t type,
    which does not have a minimum alignment at all. This results in warnings
    such as
    
      In file included from drivers/firmware/efi/mokvar-table.c:35:
      include/linux/efi.h:1093:34: warning: passing 1-byte aligned argument to
          4-byte aligned parameter 2 of 'get_var' may result in an unaligned pointer
          access [-Walign-mismatch]
              status = get_var(L"SecureBoot", &EFI_GLOBAL_VARIABLE_GUID, NULL, &size,
                                              ^
      include/linux/efi.h:1101:24: warning: passing 1-byte aligned argument to
          4-byte aligned parameter 2 of 'get_var' may result in an unaligned pointer
          access [-Walign-mismatch]
              get_var(L"SetupMode", &EFI_GLOBAL_VARIABLE_GUID, NULL, &size, &setupmode);
    
    The distinction only matters on CPUs that do not support misaligned loads
    fully, but 32-bit ARM's load-multiple instructions fall into that category,
    and these are likely to be emitted by the compiler that built the firmware
    for loading word-aligned 128-bit GUIDs from memory
    
    So re-implement the initializer in terms of our own efi_guid_t type, so that
    the alignment becomes a property of the literal's type.
    
    Fixes: 494c704f9af0 ("efi: Use 32-bit alignment for efi_guid_t")
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1327
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 886dbe0e338b38272e0c98aa12da083efa624e49
Author: Shijie Luo <luoshijie1@huawei.com>
Date:   Fri Mar 12 01:50:51 2021 -0500

    ext4: fix potential error in ext4_do_update_inode
    
    commit 7d8bd3c76da1d94b85e6c9b7007e20e980bfcfe6 upstream.
    
    If set_large_file = 1 and errors occur in ext4_handle_dirty_metadata(),
    the error code will be overridden, go to out_brelse to avoid this
    situation.
    
    Signed-off-by: Shijie Luo <luoshijie1@huawei.com>
    Link: https://lore.kernel.org/r/20210312065051.36314-1-luoshijie1@huawei.com
    Cc: stable@kernel.org
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f65ae3a7ee3b9f47f6d205c6d04887101103248
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Fri Mar 5 20:05:08 2021 +0800

    ext4: do not try to set xattr into ea_inode if value is empty
    
    commit 6b22489911b726eebbf169caee52fea52013fbdd upstream.
    
    Syzbot report a warning that ext4 may create an empty ea_inode if set
    an empty extent attribute to a file on the file system which is no free
    blocks left.
    
      WARNING: CPU: 6 PID: 10667 at fs/ext4/xattr.c:1640 ext4_xattr_set_entry+0x10f8/0x1114 fs/ext4/xattr.c:1640
      ...
      Call trace:
       ext4_xattr_set_entry+0x10f8/0x1114 fs/ext4/xattr.c:1640
       ext4_xattr_block_set+0x1d0/0x1b1c fs/ext4/xattr.c:1942
       ext4_xattr_set_handle+0x8a0/0xf1c fs/ext4/xattr.c:2390
       ext4_xattr_set+0x120/0x1f0 fs/ext4/xattr.c:2491
       ext4_xattr_trusted_set+0x48/0x5c fs/ext4/xattr_trusted.c:37
       __vfs_setxattr+0x208/0x23c fs/xattr.c:177
      ...
    
    Now, ext4 try to store extent attribute into an external inode if
    ext4_xattr_block_set() return -ENOSPC, but for the case of store an
    empty extent attribute, store the extent entry into the extent
    attribute block is enough. A simple reproduce below.
    
      fallocate test.img -l 1M
      mkfs.ext4 -F -b 2048 -O ea_inode test.img
      mount test.img /mnt
      dd if=/dev/zero of=/mnt/foo bs=2048 count=500
      setfattr -n "user.test" /mnt/foo
    
    Reported-by: syzbot+98b881fdd8ebf45ab4ae@syzkaller.appspotmail.com
    Fixes: 9c6e7853c531 ("ext4: reserve space for xattr entries/names")
    Cc: stable@kernel.org
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20210305120508.298465-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 474aab4484369866b7247ba1bba3cb99323d0dc0
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Mar 3 21:17:02 2021 +0800

    ext4: find old entry again if failed to rename whiteout
    
    commit b7ff91fd030dc9d72ed91b1aab36e445a003af4f upstream.
    
    If we failed to add new entry on rename whiteout, we cannot reset the
    old->de entry directly, because the old->de could have moved from under
    us during make indexed dir. So find the old entry again before reset is
    needed, otherwise it may corrupt the filesystem as below.
    
      /dev/sda: Entry '00000001' in ??? (12) has deleted/unused inode 15. CLEARED.
      /dev/sda: Unattached inode 75
      /dev/sda: UNEXPECTED INCONSISTENCY; RUN fsck MANUALLY.
    
    Fixes: 6b4b8e6b4ad ("ext4: fix bug for rename with RENAME_WHITEOUT")
    Cc: stable@vger.kernel.org
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20210303131703.330415-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de2e1603c125d14281996f8d82687d4d7d3065f2
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Feb 1 18:47:09 2021 +0100

    x86: Introduce TS_COMPAT_RESTART to fix get_nr_restart_syscall()
    
    commit 8c150ba2fb5995c84a7a43848250d444a3329a7d upstream.
    
    The comment in get_nr_restart_syscall() says:
    
             * The problem is that we can get here when ptrace pokes
             * syscall-like values into regs even if we're not in a syscall
             * at all.
    
    Yes, but if not in a syscall then the
    
            status & (TS_COMPAT|TS_I386_REGS_POKED)
    
    check below can't really help:
    
            - TS_COMPAT can't be set
    
            - TS_I386_REGS_POKED is only set if regs->orig_ax was changed by
              32bit debugger; and even in this case get_nr_restart_syscall()
              is only correct if the tracee is 32bit too.
    
    Suppose that a 64bit debugger plays with a 32bit tracee and
    
            * Tracee calls sleep(2) // TS_COMPAT is set
            * User interrupts the tracee by CTRL-C after 1 sec and does
              "(gdb) call func()"
            * gdb saves the regs by PTRACE_GETREGS
            * does PTRACE_SETREGS to set %rip='func' and %orig_rax=-1
            * PTRACE_CONT           // TS_COMPAT is cleared
            * func() hits int3.
            * Debugger catches SIGTRAP.
            * Restore original regs by PTRACE_SETREGS.
            * PTRACE_CONT
    
    get_nr_restart_syscall() wrongly returns __NR_restart_syscall==219, the
    tracee calls ia32_sys_call_table[219] == sys_madvise.
    
    Add the sticky TS_COMPAT_RESTART flag which survives after return to user
    mode. It's going to be removed in the next step again by storing the
    information in the restart block. As a further cleanup it might be possible
    to remove also TS_I386_REGS_POKED with that.
    
    Test-case:
    
      $ cvs -d :pserver:anoncvs:anoncvs@sourceware.org:/cvs/systemtap co ptrace-tests
      $ gcc -o erestartsys-trap-debuggee ptrace-tests/tests/erestartsys-trap-debuggee.c --m32
      $ gcc -o erestartsys-trap-debugger ptrace-tests/tests/erestartsys-trap-debugger.c -lutil
      $ ./erestartsys-trap-debugger
      Unexpected: retval 1, errno 22
      erestartsys-trap-debugger: ptrace-tests/tests/erestartsys-trap-debugger.c:421
    
    Fixes: 609c19a385c8 ("x86/ptrace: Stop setting TS_COMPAT in ptrace code")
    Reported-by: Jan Kratochvil <jan.kratochvil@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210201174709.GA17895@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 076b60af926b3c6684bdf66b9d6a935493301a73
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Feb 1 18:46:49 2021 +0100

    x86: Move TS_COMPAT back to asm/thread_info.h
    
    commit 66c1b6d74cd7035e85c426f0af4aede19e805c8a upstream.
    
    Move TS_COMPAT back to asm/thread_info.h, close to TS_I386_REGS_POKED.
    
    It was moved to asm/processor.h by b9d989c7218a ("x86/asm: Move the
    thread_info::status field to thread_struct"), then later 37a8f7c38339
    ("x86/asm: Move 'status' from thread_struct to thread_info") moved the
    'status' field back but TS_COMPAT was forgotten.
    
    Preparatory patch to fix the COMPAT case for get_nr_restart_syscall()
    
    Fixes: 609c19a385c8 ("x86/ptrace: Stop setting TS_COMPAT in ptrace code")
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210201174649.GA17880@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27ddd2b59045ed6a39cd9e5d5ced9320c761826f
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Feb 1 18:46:41 2021 +0100

    kernel, fs: Introduce and use set_restart_fn() and arch_set_restart_data()
    
    commit 5abbe51a526253b9f003e9a0a195638dc882d660 upstream.
    
    Preparation for fixing get_nr_restart_syscall() on X86 for COMPAT.
    
    Add a new helper which sets restart_block->fn and calls a dummy
    arch_set_restart_data() helper.
    
    Fixes: 609c19a385c8 ("x86/ptrace: Stop setting TS_COMPAT in ptrace code")
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210201174641.GA17871@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f546965c3aaca36c97ee66b62fad48d56b87f3d1
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Mar 18 20:26:47 2021 +0100

    x86/ioapic: Ignore IRQ2 again
    
    commit a501b048a95b79e1e34f03cac3c87ff1e9f229ad upstream.
    
    Vitaly ran into an issue with hotplugging CPU0 on an Amazon instance where
    the matrix allocator claimed to be out of vectors. He analyzed it down to
    the point that IRQ2, the PIC cascade interrupt, which is supposed to be not
    ever routed to the IO/APIC ended up having an interrupt vector assigned
    which got moved during unplug of CPU0.
    
    The underlying issue is that IRQ2 for various reasons (see commit
    af174783b925 ("x86: I/O APIC: Never configure IRQ2" for details) is treated
    as a reserved system vector by the vector core code and is not accounted as
    a regular vector. The Amazon BIOS has an routing entry of pin2 to IRQ2
    which causes the IO/APIC setup to claim that interrupt which is granted by
    the vector domain because there is no sanity check. As a consequence the
    allocation counter of CPU0 underflows which causes a subsequent unplug to
    fail with:
    
      [ ... ] CPU 0 has 4294967295 vectors, 589 available. Cannot disable CPU
    
    There is another sanity check missing in the matrix allocator, but the
    underlying root cause is that the IO/APIC code lost the IRQ2 ignore logic
    during the conversion to irqdomains.
    
    For almost 6 years nobody complained about this wreckage, which might
    indicate that this requirement could be lifted, but for any system which
    actually has a PIC IRQ2 is unusable by design so any routing entry has no
    effect and the interrupt cannot be connected to a device anyway.
    
    Due to that and due to history biased paranoia reasons restore the IRQ2
    ignore logic and treat it as non existent despite a routing entry claiming
    otherwise.
    
    Fixes: d32932d02e18 ("x86/irq: Convert IOAPIC to use hierarchical irqdomain interfaces")
    Reported-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210318192819.636943062@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da326ba3b84aae8ac0513aa4725a49843f2f871e
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Mar 12 05:21:37 2021 -0800

    perf/x86/intel: Fix a crash caused by zero PEBS status
    
    commit d88d05a9e0b6d9356e97129d4ff9942d765f46ea upstream.
    
    A repeatable crash can be triggered by the perf_fuzzer on some Haswell
    system.
    https://lore.kernel.org/lkml/7170d3b-c17f-1ded-52aa-cc6d9ae999f4@maine.edu/
    
    For some old CPUs (HSW and earlier), the PEBS status in a PEBS record
    may be mistakenly set to 0. To minimize the impact of the defect, the
    commit was introduced to try to avoid dropping the PEBS record for some
    cases. It adds a check in the intel_pmu_drain_pebs_nhm(), and updates
    the local pebs_status accordingly. However, it doesn't correct the PEBS
    status in the PEBS record, which may trigger the crash, especially for
    the large PEBS.
    
    It's possible that all the PEBS records in a large PEBS have the PEBS
    status 0. If so, the first get_next_pebs_record_by_bit() in the
    __intel_pmu_pebs_event() returns NULL. The at = NULL. Since it's a large
    PEBS, the 'count' parameter must > 1. The second
    get_next_pebs_record_by_bit() will crash.
    
    Besides the local pebs_status, correct the PEBS status in the PEBS
    record as well.
    
    Fixes: 01330d7288e0 ("perf/x86: Allow zero PEBS status with only single active event")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1615555298-140216-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51a2b19b554c8c75ee2d253b87240309cd81f1fc
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Mon Mar 15 15:48:21 2021 -0600

    PCI: rpadlpar: Fix potential drc_name corruption in store functions
    
    commit cc7a0bb058b85ea03db87169c60c7cfdd5d34678 upstream.
    
    Both add_slot_store() and remove_slot_store() try to fix up the
    drc_name copied from the store buffer by placing a NUL terminator at
    nbyte + 1 or in place of a '\n' if present. However, the static buffer
    that we copy the drc_name data into is not zeroed and can contain
    anything past the n-th byte.
    
    This is problematic if a '\n' byte appears in that buffer after nbytes
    and the string copied into the store buffer was not NUL terminated to
    start with as the strchr() search for a '\n' byte will mark this
    incorrectly as the end of the drc_name string resulting in a drc_name
    string that contains garbage data after the n-th byte.
    
    Additionally it will cause us to overwrite that '\n' byte on the stack
    with NUL, potentially corrupting data on the stack.
    
    The following debugging shows an example of the drmgr utility writing
    "PHB 4543" to the add_slot sysfs attribute, but add_slot_store()
    logging a corrupted string value.
    
      drmgr: drmgr: -c phb -a -s PHB 4543 -d 1
      add_slot_store: drc_name = PHB 4543°|<82>!, rc = -19
    
    Fix this by using strscpy() instead of memcpy() to ensure the string
    is NUL terminated when copied into the static drc_name buffer.
    Further, since the string is now NUL terminated the code only needs to
    change '\n' to '\0' when present.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    [mpe: Reformat change log and add mention of possible stack corruption]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210315214821.452959-1-tyreld@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 796fc331c3cf1391bffbf97e590f8026963ff057
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Tue Mar 2 15:43:55 2021 +0100

    counter: stm32-timer-cnt: fix ceiling write max value
    
    commit e4c3e133294c0a292d21073899b05ebf530169bd upstream.
    
    The ceiling value isn't checked before writing it into registers. The user
    could write a value higher than the counter resolution (e.g. 16 or 32 bits
    indicated by max_arr). This makes most significant bits to be truncated.
    Fix it by checking the max_arr to report a range error [1] to the user.
    
    [1] https://lkml.org/lkml/2021/2/12/358
    
    Fixes: ad29937e206f ("counter: Add STM32 Timer quadrature encoder")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Acked-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1614696235-24088-1-git-send-email-fabrice.gasnier@foss.st.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 850ca1c0130af6611afc236457ff919c3d858ed6
Author: Ye Xiang <xiang.ye@intel.com>
Date:   Wed Mar 3 14:36:14 2021 +0800

    iio: hid-sensor-temperature: Fix issues of timestamp channel
    
    commit 141e7633aa4d2838d1f6ad5c74cccc53547c16ac upstream.
    
    This patch fixes 2 issues of timestamp channel:
    1. This patch ensures that there is sufficient space and correct
    alignment for the timestamp.
    2. Correct the timestamp channel scan index.
    
    Fixes: 59d0f2da3569 ("iio: hid: Add temperature sensor support")
    Signed-off-by: Ye Xiang <xiang.ye@intel.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210303063615.12130-4-xiang.ye@intel.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31a2e804ad4a415e233cc29e363c910159f1ff09
Author: Ye Xiang <xiang.ye@intel.com>
Date:   Sat Jan 30 18:25:30 2021 +0800

    iio: hid-sensor-prox: Fix scale not correct issue
    
    commit d68c592e02f6f49a88e705f13dfc1883432cf300 upstream.
    
    Currently, the proxy sensor scale is zero because it just return the
    exponent directly. To fix this issue, this patch use
    hid_sensor_format_scale to process the scale first then return the
    output.
    
    Fixes: 39a3a0138f61 ("iio: hid-sensors: Added Proximity Sensor Driver")
    Signed-off-by: Ye Xiang <xiang.ye@intel.com>
    Link: https://lore.kernel.org/r/20210130102530.31064-1-xiang.ye@intel.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa27c8749cfcae8dd6f87c1b674e9011fcea3bb
Author: Ye Xiang <xiang.ye@intel.com>
Date:   Wed Mar 3 14:36:12 2021 +0800

    iio: hid-sensor-humidity: Fix alignment issue of timestamp channel
    
    commit 37e89e574dc238a4ebe439543c5ab4fbb2f0311b upstream.
    
    This patch ensures that, there is sufficient space and correct
    alignment for the timestamp.
    
    Fixes: d7ed89d5aadf ("iio: hid: Add humidity sensor support")
    Signed-off-by: Ye Xiang <xiang.ye@intel.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210303063615.12130-2-xiang.ye@intel.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4458ae8d4001d9345a83e55389acb7a4ab7bf615
Author: Wilfried Wessner <wilfried.wessner@gmail.com>
Date:   Mon Feb 8 15:27:05 2021 +0100

    iio: adc: ad7949: fix wrong ADC result due to incorrect bit mask
    
    commit f890987fac8153227258121740a9609668c427f3 upstream.
    
    Fixes a wrong bit mask used for the ADC's result, which was caused by an
    improper usage of the GENMASK() macro. The bits higher than ADC's
    resolution are undefined and if not masked out correctly, a wrong result
    can be given. The GENMASK() macro indexing is zero based, so the mask has
    to go from [resolution - 1 , 0].
    
    Fixes: 7f40e0614317f ("iio:adc:ad7949: Add AD7949 ADC driver family")
    Signed-off-by: Wilfried Wessner <wilfried.wessner@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Charles-Antoine Couret <charles-antoine.couret@essensium.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210208142705.GA51260@ubuntu
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a605c095bb463ff9948f4fb7151068c63894fe81
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Mar 1 16:04:21 2021 +0800

    iio: gyro: mpu3050: Fix error handling in mpu3050_trigger_handler
    
    commit 6dbbbe4cfd398704b72b21c1d4a5d3807e909d60 upstream.
    
    There is one regmap_bulk_read() call in mpu3050_trigger_handler
    that we have caught its return value bug lack further handling.
    Check and terminate the execution flow just like the other three
    regmap_bulk_read() calls in this function.
    
    Fixes: 3904b28efb2c7 ("iio: gyro: Add driver for the MPU-3050 gyroscope")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20210301080421.13436-1-dinghao.liu@zju.edu.cn
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87163fbba6d22e00d1a25fd19bee9e68d8a97a56
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 16 22:42:13 2021 +0300

    iio: adis16400: Fix an error code in adis16400_initial_setup()
    
    commit a71266e454b5df10d019b06f5ebacd579f76be28 upstream.
    
    This is to silence a new Smatch warning:
    
        drivers/iio/imu/adis16400.c:492 adis16400_initial_setup()
        warn: sscanf doesn't return error codes
    
    If the condition "if (st->variant->flags & ADIS16400_HAS_SLOW_MODE) {"
    is false then we return 1 instead of returning 0 and probe will fail.
    
    Fixes: 72a868b38bdd ("iio: imu: check sscanf return value")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YCwgFb3JVG6qrlQ+@mwanda
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed0625334b9482ebbab79a334ebcb9dc8626e7a6
Author: Jonathan Albrieux <jonathan.albrieux@gmail.com>
Date:   Wed Jan 13 16:18:07 2021 +0100

    iio:adc:qcom-spmi-vadc: add default scale to LR_MUX2_BAT_ID channel
    
    commit 7d200b283aa049fcda0d43dd6e03e9e783d2799c upstream.
    
    Checking at both msm8909-pm8916.dtsi and msm8916.dtsi from downstream
    it is indicated that "batt_id" channel has to be scaled with the default
    function:
    
            chan@31 {
                    label = "batt_id";
                    reg = <0x31>;
                    qcom,decimation = <0>;
                    qcom,pre-div-channel-scaling = <0>;
                    qcom,calibration-type = "ratiometric";
                    qcom,scale-function = <0>;
                    qcom,hw-settle-time = <0xb>;
                    qcom,fast-avg-setup = <0>;
            };
    
    Change LR_MUX2_BAT_ID scaling accordingly.
    
    Signed-off-by: Jonathan Albrieux <jonathan.albrieux@gmail.com>
    Acked-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Fixes: 7c271eea7b8a ("iio: adc: spmi-vadc: Changes to support different scaling")
    Link: https://lore.kernel.org/r/20210113151808.4628-2-jonathan.albrieux@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08414c498b4bdf4d5b80e694b90cf4f6b38c78bb
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jan 24 19:50:34 2021 +0000

    iio:adc:stm32-adc: Add HAS_IOMEM dependency
    
    commit 121875b28e3bd7519a675bf8ea2c2e793452c2bd upstream.
    
    Seems that there are config combinations in which this driver gets enabled
    and hence selects the MFD, but with out HAS_IOMEM getting pulled in
    via some other route.  MFD is entirely contained in an
    if HAS_IOMEM block, leading to the build issue in this bugzilla.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=209889
    
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Link: https://lore.kernel.org/r/20210124195034.22576-1-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0a595269e62246f21e65581ee594005d07dc528
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Wed Mar 17 11:12:48 2021 -0700

    usb: typec: tcpm: Invoke power_supply_changed for tcpm-source-psy-
    
    commit 86629e098a077922438efa98dc80917604dfd317 upstream.
    
    tcpm-source-psy- does not invoke power_supply_changed API when
    one of the published power supply properties is changed.
    power_supply_changed needs to be called to notify
    userspace clients(uevents) and kernel clients.
    
    Fixes: f2a8aa053c176 ("typec: tcpm: Represent source supply through power_supply")
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210317181249.1062995-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4baade6fd6e5b332f8b90f2ef79316fe67fb0b36
Author: Jim Lin <jilin@nvidia.com>
Date:   Thu Mar 11 14:42:41 2021 +0800

    usb: gadget: configfs: Fix KASAN use-after-free
    
    commit 98f153a10da403ddd5e9d98a3c8c2bb54bb5a0b6 upstream.
    
    When gadget is disconnected, running sequence is like this.
    . composite_disconnect
    . Call trace:
      usb_string_copy+0xd0/0x128
      gadget_config_name_configuration_store+0x4
      gadget_config_name_attr_store+0x40/0x50
      configfs_write_file+0x198/0x1f4
      vfs_write+0x100/0x220
      SyS_write+0x58/0xa8
    . configfs_composite_unbind
    . configfs_composite_bind
    
    In configfs_composite_bind, it has
    "cn->strings.s = cn->configuration;"
    
    When usb_string_copy is invoked. it would
    allocate memory, copy input string, release previous pointed memory space,
    and use new allocated memory.
    
    When gadget is connected, host sends down request to get information.
    Call trace:
      usb_gadget_get_string+0xec/0x168
      lookup_string+0x64/0x98
      composite_setup+0xa34/0x1ee8
    
    If gadget is disconnected and connected quickly, in the failed case,
    cn->configuration memory has been released by usb_string_copy kfree but
    configfs_composite_bind hasn't been run in time to assign new allocated
    "cn->configuration" pointer to "cn->strings.s".
    
    When "strlen(s->s) of usb_gadget_get_string is being executed, the dangling
    memory is accessed, "BUG: KASAN: use-after-free" error occurs.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jim Lin <jilin@nvidia.com>
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Link: https://lore.kernel.org/r/1615444961-13376-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c92aebf2b0f311ec19f70ebe3669a2534ef1c203
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Thu Jun 18 17:13:38 2020 +0800

    USB: replace hardcode maximum usb string length by definition
    
    commit 81c7462883b0cc0a4eeef0687f80ad5b5baee5f6 upstream.
    
    Replace hardcoded maximum USB string length (126 bytes) by definition
    "USB_MAX_STRING_LEN".
    
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/1592471618-29428-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f89366164693bc7e59e41bcef3e20894767159da
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Mar 11 10:44:45 2021 +0000

    usbip: Fix incorrect double assignment to udc->ud.tcp_rx
    
    commit 9858af27e69247c5d04c3b093190a93ca365f33d upstream.
    
    Currently udc->ud.tcp_rx is being assigned twice, the second assignment
    is incorrect, it should be to udc->ud.tcp_tx instead of rx. Fix this.
    
    Fixes: 46613c9dfa96 ("usbip: fix vudc usbip_sockfd_store races leading to gpf")
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Addresses-Coverity: ("Unused value")
    Link: https://lore.kernel.org/r/20210311104445.7811-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 251949ec9d95b15841c565790d0a15f9bbb3a750
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Mar 17 15:06:54 2021 -0400

    usb-storage: Add quirk to defeat Kindle's automatic unload
    
    commit 546aa0e4ea6ed81b6c51baeebc4364542fa3f3a7 upstream.
    
    Matthias reports that the Amazon Kindle automatically removes its
    emulated media if it doesn't receive another SCSI command within about
    one second after a SYNCHRONIZE CACHE.  It does so even when the host
    has sent a PREVENT MEDIUM REMOVAL command.  The reason for this
    behavior isn't clear, although it's not hard to make some guesses.
    
    At any rate, the results can be unexpected for anyone who tries to
    access the Kindle in an unusual fashion, and in theory they can lead
    to data loss (for example, if one file is closed and synchronized
    while other files are still in the middle of being written).
    
    To avoid such problems, this patch creates a new usb-storage quirks
    flag telling the driver always to issue a REQUEST SENSE following a
    SYNCHRONIZE CACHE command, and adds an unusual_devs entry for the
    Kindle with the flag set.  This is sufficient to prevent the Kindle
    from doing its automatic unload, without interfering with proper
    operation.
    
    Another possible way to deal with this would be to increase the
    frequency of TEST UNIT READY polling that the kernel normally carries
    out for removable-media storage devices.  However that would increase
    the overall load on the system and it is not as reliable, because the
    user can override the polling interval.  Changing the driver's
    behavior is safer and has minimal overhead.
    
    CC: <stable@vger.kernel.org>
    Reported-and-tested-by: Matthias Schwarzott <zzam@gentoo.org>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20210317190654.GA497856@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b56afc2841d0935d87d9b473aa82c7ad5de4c1
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 15 14:04:27 2021 -0700

    nvme-rdma: fix possible hang when failing to set io queues
    
    [ Upstream commit c4c6df5fc84659690d4391d1fba155cd94185295 ]
    
    We only setup io queues for nvme controllers, and it makes absolutely no
    sense to allow a controller (re)connect without any I/O queues.  If we
    happen to fail setting the queue count for any reason, we should not allow
    this to be a successful reconnect as I/O has no chance in going through.
    Instead just fail and schedule another reconnect.
    
    Reported-by: Chao Leng <lengchao@huawei.com>
    Fixes: 711023071960 ("nvme-rdma: add a NVMe over Fabrics RDMA host driver")
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chao Leng <lengchao@huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b891d41d01f4629c3534263c28686344191223b7
Author: William Breathitt Gray <vilhelm.gray@gmail.com>
Date:   Fri Feb 26 10:29:31 2021 +0900

    counter: stm32-timer-cnt: Report count function when SLAVE_MODE_DISABLED
    
    [ Upstream commit fae6f62e6a580b663ecf42c2120a0898deae9137 ]
    
    When in SLAVE_MODE_DISABLED mode, the count still increases if the
    counter is enabled because an internal clock is used. This patch fixes
    the stm32_count_function_get() and stm32_count_function_set() functions
    to properly handle this behavior.
    
    Fixes: ad29937e206f ("counter: Add STM32 Timer quadrature encoder")
    Cc: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Reviewed-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Link: https://lore.kernel.org/r/20210226012931.161429-1-vilhelm.gray@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86fd6c0d22a5548f129c3f60d5bbf65824797719
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Wed Mar 10 22:30:05 2021 -0800

    scsi: myrs: Fix a double free in myrs_cleanup()
    
    commit 2bb817712e2f77486d6ee17e7efaf91997a685f8 upstream.
    
    In myrs_cleanup(), cs->mmio_base will be freed twice by iounmap().
    
    Link: https://lore.kernel.org/r/20210311063005.9963-1-lyl2019@mail.ustc.edu.cn
    Fixes: 77266186397c ("scsi: myrs: Add Mylex RAID controller (SCSI interface)")
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb46392d329ad68581f6715fd1b119dc8941a5b6
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 12 10:42:11 2021 +0300

    scsi: lpfc: Fix some error codes in debugfs
    
    commit 19f1bc7edf0f97186810e13a88f5b62069d89097 upstream.
    
    If copy_from_user() or kstrtoull() fail then the correct behavior is to
    return a negative error code.
    
    Link: https://lore.kernel.org/r/YEsbU/UxYypVrC7/@mwanda
    Fixes: f9bb2da11db8 ("[SCSI] lpfc 8.3.27: T10 additions for SLI4")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f925558e3f170c815eb796ed7ce72151c1e43f7
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Mon Mar 15 20:03:07 2021 +0800

    riscv: Correct SPARSEMEM configuration
    
    commit a5406a7ff56e63376c210b06072aa0ef23473366 upstream.
    
    There are two issues for RV32,
    1) if use FLATMEM, it is useless to enable SPARSEMEM_STATIC.
    2) if use SPARSMEM, both SPARSEMEM_VMEMMAP and SPARSEMEM_STATIC is enabled.
    
    Fixes: d95f1a542c3d ("RISC-V: Implement sparsemem")
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7db8f3be034d5d2dbdc53d5cb65ba92594ec2b9f
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sat Feb 27 23:20:23 2021 +0900

    kbuild: Fix <linux/version.h> for empty SUBLEVEL or PATCHLEVEL again
    
    commit 207da4c82ade9a6d59f7e794d737ba0748613fa2 upstream.
    
    Commit 78d3bb4483ba ("kbuild: Fix <linux/version.h> for empty SUBLEVEL
    or PATCHLEVEL") fixed the build error for empty SUBLEVEL or PATCHLEVEL
    by prepending a zero.
    
    Commit 9b82f13e7ef3 ("kbuild: clamp SUBLEVEL to 255") re-introduced
    this issue.
    
    This time, we cannot take the same approach because we have C code:
    
      #define LINUX_VERSION_PATCHLEVEL $(PATCHLEVEL)
      #define LINUX_VERSION_SUBLEVEL $(SUBLEVEL)
    
    Replace empty SUBLEVEL/PATCHLEVEL with a zero.
    
    Fixes: 9b82f13e7ef3 ("kbuild: clamp SUBLEVEL to 255")
    Reported-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-and-tested-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dad483b1ebc9c8ee804a1ae40b01d6b0c3664a2
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Mon Mar 1 02:22:40 2021 +0300

    net/qrtr: fix __netdev_alloc_skb call
    
    commit 093b036aa94e01a0bea31a38d7f0ee28a2749023 upstream.
    
    syzbot found WARNING in __alloc_pages_nodemask()[1] when order >= MAX_ORDER.
    It was caused by a huge length value passed from userspace to qrtr_tun_write_iter(),
    which tries to allocate skb. Since the value comes from the untrusted source
    there is no need to raise a warning in __alloc_pages_nodemask().
    
    [1] WARNING in __alloc_pages_nodemask+0x5f8/0x730 mm/page_alloc.c:5014
    Call Trace:
     __alloc_pages include/linux/gfp.h:511 [inline]
     __alloc_pages_node include/linux/gfp.h:524 [inline]
     alloc_pages_node include/linux/gfp.h:538 [inline]
     kmalloc_large_node+0x60/0x110 mm/slub.c:3999
     __kmalloc_node_track_caller+0x319/0x3f0 mm/slub.c:4496
     __kmalloc_reserve net/core/skbuff.c:150 [inline]
     __alloc_skb+0x4e4/0x5a0 net/core/skbuff.c:210
     __netdev_alloc_skb+0x70/0x400 net/core/skbuff.c:446
     netdev_alloc_skb include/linux/skbuff.h:2832 [inline]
     qrtr_endpoint_post+0x84/0x11b0 net/qrtr/qrtr.c:442
     qrtr_tun_write_iter+0x11f/0x1a0 net/qrtr/tun.c:98
     call_write_iter include/linux/fs.h:1901 [inline]
     new_sync_write+0x426/0x650 fs/read_write.c:518
     vfs_write+0x791/0xa30 fs/read_write.c:605
     ksys_write+0x12d/0x250 fs/read_write.c:658
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported-by: syzbot+80dccaee7c6630fa9dcf@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Acked-by: Alexander Lobakin <alobakin@pm.me>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0b09d547713e3ee8e6f3b77225ecdc9879819b1
Author: Daniel Kobras <kobras@puzzle-itc.de>
Date:   Sat Feb 27 00:04:37 2021 +0100

    sunrpc: fix refcount leak for rpc auth modules
    
    commit f1442d6349a2e7bb7a6134791bdc26cb776c79af upstream.
    
    If an auth module's accept op returns SVC_CLOSE, svc_process_common()
    enters a call path that does not call svc_authorise() before leaving the
    function, and thus leaks a reference on the auth module's refcount. Hence,
    make sure calls to svc_authenticate() and svc_authorise() are paired for
    all call paths, to make sure rpc auth modules can be unloaded.
    
    Signed-off-by: Daniel Kobras <kobras@puzzle-itc.de>
    Fixes: 4d712ef1db05 ("svcauth_gss: Close connection when dropping an incoming message")
    Link: https://lore.kernel.org/linux-nfs/3F1B347F-B809-478F-A1E9-0BE98E22B0F0@oracle.com/T/#t
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c57ea09365f4a6b32568b8ba6b98ae7d238cb0d
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Feb 23 15:17:46 2021 -0400

    vfio: IOMMU_API should be selected
    
    commit 179209fa12709a3df8888c323b37315da2683c24 upstream.
    
    As IOMMU_API is a kconfig without a description (eg does not show in the
    menu) the correct operator is select not 'depends on'. Using 'depends on'
    for this kind of symbol means VFIO is not selectable unless some other
    random kconfig has already enabled IOMMU_API for it.
    
    Fixes: cba3345cc494 ("vfio: VFIO core")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Message-Id: <1-v1-df057e0f92c3+91-vfio_arm_compile_test_jgg@nvidia.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b439aac773608c2b22fc4b5afe7b443cd2d9c373
Author: Timo Rothenpieler <timo@rothenpieler.org>
Date:   Tue Feb 23 00:36:19 2021 +0100

    svcrdma: disable timeouts on rdma backchannel
    
    commit 6820bf77864d5894ff67b5c00d7dba8f92011e3d upstream.
    
    This brings it in line with the regular tcp backchannel, which also has
    all those timeouts disabled.
    
    Prevents the backchannel from timing out, getting some async operations
    like server side copying getting stuck indefinitely on the client side.
    
    Signed-off-by: Timo Rothenpieler <timo@rothenpieler.org>
    Fixes: 5d252f90a800 ("svcrdma: Add class for RDMA backwards direction transport")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1ae8f16c2238ba5fd13420c0a4feb84ca3a1dea
Author: Joe Korty <joe.korty@concurrent-rt.com>
Date:   Fri Feb 26 09:38:20 2021 -0500

    NFSD: Repair misuse of sv_lock in 5.10.16-rt30.
    
    commit c7de87ff9dac5f396f62d584f3908f80ddc0e07b upstream.
    
    [ This problem is in mainline, but only rt has the chops to be
    able to detect it. ]
    
    Lockdep reports a circular lock dependency between serv->sv_lock and
    softirq_ctl.lock on system shutdown, when using a kernel built with
    CONFIG_PREEMPT_RT=y, and a nfs mount exists.
    
    This is due to the definition of spin_lock_bh on rt:
    
            local_bh_disable();
            rt_spin_lock(lock);
    
    which forces a softirq_ctl.lock -> serv->sv_lock dependency.  This is
    not a problem as long as _every_ lock of serv->sv_lock is a:
    
            spin_lock_bh(&serv->sv_lock);
    
    but there is one of the form:
    
            spin_lock(&serv->sv_lock);
    
    This is what is causing the circular dependency splat.  The spin_lock()
    grabs the lock without first grabbing softirq_ctl.lock via local_bh_disable.
    If later on in the critical region,  someone does a local_bh_disable, we
    get a serv->sv_lock -> softirq_ctrl.lock dependency established.  Deadlock.
    
    Fix is to make serv->sv_lock be locked with spin_lock_bh everywhere, no
    exceptions.
    
    [  OK  ] Stopped target NFS client services.
             Stopping Logout off all iSCSI sessions on shutdown...
             Stopping NFS server and services...
    [  109.442380]
    [  109.442385] ======================================================
    [  109.442386] WARNING: possible circular locking dependency detected
    [  109.442387] 5.10.16-rt30 #1 Not tainted
    [  109.442389] ------------------------------------------------------
    [  109.442390] nfsd/1032 is trying to acquire lock:
    [  109.442392] ffff994237617f60 ((softirq_ctrl.lock).lock){+.+.}-{2:2}, at: __local_bh_disable_ip+0xd9/0x270
    [  109.442405]
    [  109.442405] but task is already holding lock:
    [  109.442406] ffff994245cb00b0 (&serv->sv_lock){+.+.}-{0:0}, at: svc_close_list+0x1f/0x90
    [  109.442415]
    [  109.442415] which lock already depends on the new lock.
    [  109.442415]
    [  109.442416]
    [  109.442416] the existing dependency chain (in reverse order) is:
    [  109.442417]
    [  109.442417] -> #1 (&serv->sv_lock){+.+.}-{0:0}:
    [  109.442421]        rt_spin_lock+0x2b/0xc0
    [  109.442428]        svc_add_new_perm_xprt+0x42/0xa0
    [  109.442430]        svc_addsock+0x135/0x220
    [  109.442434]        write_ports+0x4b3/0x620
    [  109.442438]        nfsctl_transaction_write+0x45/0x80
    [  109.442440]        vfs_write+0xff/0x420
    [  109.442444]        ksys_write+0x4f/0xc0
    [  109.442446]        do_syscall_64+0x33/0x40
    [  109.442450]        entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  109.442454]
    [  109.442454] -> #0 ((softirq_ctrl.lock).lock){+.+.}-{2:2}:
    [  109.442457]        __lock_acquire+0x1264/0x20b0
    [  109.442463]        lock_acquire+0xc2/0x400
    [  109.442466]        rt_spin_lock+0x2b/0xc0
    [  109.442469]        __local_bh_disable_ip+0xd9/0x270
    [  109.442471]        svc_xprt_do_enqueue+0xc0/0x4d0
    [  109.442474]        svc_close_list+0x60/0x90
    [  109.442476]        svc_close_net+0x49/0x1a0
    [  109.442478]        svc_shutdown_net+0x12/0x40
    [  109.442480]        nfsd_destroy+0xc5/0x180
    [  109.442482]        nfsd+0x1bc/0x270
    [  109.442483]        kthread+0x194/0x1b0
    [  109.442487]        ret_from_fork+0x22/0x30
    [  109.442492]
    [  109.442492] other info that might help us debug this:
    [  109.442492]
    [  109.442493]  Possible unsafe locking scenario:
    [  109.442493]
    [  109.442493]        CPU0                    CPU1
    [  109.442494]        ----                    ----
    [  109.442495]   lock(&serv->sv_lock);
    [  109.442496]                                lock((softirq_ctrl.lock).lock);
    [  109.442498]                                lock(&serv->sv_lock);
    [  109.442499]   lock((softirq_ctrl.lock).lock);
    [  109.442501]
    [  109.442501]  *** DEADLOCK ***
    [  109.442501]
    [  109.442501] 3 locks held by nfsd/1032:
    [  109.442503]  #0: ffffffff93b49258 (nfsd_mutex){+.+.}-{3:3}, at: nfsd+0x19a/0x270
    [  109.442508]  #1: ffff994245cb00b0 (&serv->sv_lock){+.+.}-{0:0}, at: svc_close_list+0x1f/0x90
    [  109.442512]  #2: ffffffff93a81b20 (rcu_read_lock){....}-{1:2}, at: rt_spin_lock+0x5/0xc0
    [  109.442518]
    [  109.442518] stack backtrace:
    [  109.442519] CPU: 0 PID: 1032 Comm: nfsd Not tainted 5.10.16-rt30 #1
    [  109.442522] Hardware name: Supermicro X9DRL-3F/iF/X9DRL-3F/iF, BIOS 3.2 09/22/2015
    [  109.442524] Call Trace:
    [  109.442527]  dump_stack+0x77/0x97
    [  109.442533]  check_noncircular+0xdc/0xf0
    [  109.442546]  __lock_acquire+0x1264/0x20b0
    [  109.442553]  lock_acquire+0xc2/0x400
    [  109.442564]  rt_spin_lock+0x2b/0xc0
    [  109.442570]  __local_bh_disable_ip+0xd9/0x270
    [  109.442573]  svc_xprt_do_enqueue+0xc0/0x4d0
    [  109.442577]  svc_close_list+0x60/0x90
    [  109.442581]  svc_close_net+0x49/0x1a0
    [  109.442585]  svc_shutdown_net+0x12/0x40
    [  109.442588]  nfsd_destroy+0xc5/0x180
    [  109.442590]  nfsd+0x1bc/0x270
    [  109.442595]  kthread+0x194/0x1b0
    [  109.442600]  ret_from_fork+0x22/0x30
    [  109.518225] nfsd: last server has exited, flushing export cache
    [  OK  ] Stopped NFSv4 ID-name mapping service.
    [  OK  ] Stopped GSSAPI Proxy Daemon.
    [  OK  ] Stopped NFS Mount Daemon.
    [  OK  ] Stopped NFS status monitor for NFSv2/3 locking..
    
    Fixes: 719f8bcc883e ("svcrpc: fix xpt_list traversal locking on shutdown")
    Signed-off-by: Joe Korty <joe.korty@concurrent-rt.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c5fab560cb06c4e4bc719a3a7ce1787a5afde23
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Thu Feb 18 21:02:07 2021 -0500

    nfsd: Don't keep looking up unhashed files in the nfsd file cache
    
    commit d30881f573e565ebb5dbb50b31ed6106b5c81328 upstream.
    
    If a file is unhashed, then we're going to reject it anyway and retry,
    so make sure we skip it when we're doing the RCU lockless lookup.
    This avoids a number of unnecessary nfserr_jukebox returns from
    nfsd_file_acquire()
    
    Fixes: 65294c1f2c5e ("nfsd: add a new struct file caching facility to nfsd")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49545a7b8b3048ecce44f97f4393d03c80410003
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 15 15:34:51 2021 -0700

    nvmet: don't check iosqes,iocqes for discovery controllers
    
    commit d218a8a3003e84ab136e69a4e30dd4ec7dab2d22 upstream.
    
    From the base spec, Figure 78:
    
      "Controller Configuration, these fields are defined as parameters to
       configure an "I/O Controller (IOC)" and not to configure a "Discovery
       Controller (DC).
    
       ...
       If the controller does not support I/O queues, then this field shall
       be read-only with a value of 0h
    
    Just perform this check for I/O controllers.
    
    Fixes: a07b4970f464 ("nvmet: add a generic NVMe target")
    Reported-by: Belanger, Martin <Martin.Belanger@dell.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf7d7728d8a5e6740febf58759b6ede8275cd88e
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 15 14:08:11 2021 -0700

    nvme-tcp: fix a NULL deref when receiving a 0-length r2t PDU
    
    commit fd0823f405090f9f410fc3e3ff7efb52e7b486fa upstream.
    
    When the controller sends us a 0-length r2t PDU we should not attempt to
    try to set up a h2cdata PDU but rather conclude that this is a buggy
    controller (forward progress is not possible) and simply fail it
    immediately.
    
    Fixes: 3f2304f8c6d6 ("nvme-tcp: add NVMe over TCP host driver")
    Reported-by: Belanger, Martin <Martin.Belanger@dell.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36a4f9164cf6be00414c0f3b23976edbbcdef1c7
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 15 14:04:26 2021 -0700

    nvme-tcp: fix possible hang when failing to set io queues
    
    commit 72f572428b83d0bc7028e7c4326d1a5f45205e44 upstream.
    
    We only setup io queues for nvme controllers, and it makes absolutely no
    sense to allow a controller (re)connect without any I/O queues.  If we
    happen to fail setting the queue count for any reason, we should not
    allow this to be a successful reconnect as I/O has no chance in going
    through. Instead just fail and schedule another reconnect.
    
    Fixes: 3f2304f8c6d6 ("nvme-tcp: add NVMe over TCP host driver")
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81c1dbe1070c0da5526e7a99499342a8a10e675e
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Mar 15 10:32:07 2021 +0100

    nvme: fix Write Zeroes limitations
    
    commit b94e8cd2e6a94fc7563529ddc82726a7e77e04de upstream.
    
    We voluntarily limit the Write Zeroes sizes to the MDTS value provided by
    the hardware, but currently get the units wrong, so fix that.
    
    Fixes: 6e02318eaea5 ("nvme: add support for the Write Zeroes command")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Tested-by: Klaus Jensen <k.jensen@samsung.com>
    Reviewed-by: Klaus Jensen <k.jensen@samsung.com>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6712b7fcef9d1092e99733645cf52cfb3d482555
Author: David Howells <dhowells@redhat.com>
Date:   Tue Mar 9 08:27:39 2021 +0000

    afs: Stop listxattr() from listing "afs.*" attributes
    
    commit a7889c6320b9200e3fe415238f546db677310fa9 upstream.
    
    afs_listxattr() lists all the available special afs xattrs (i.e. those in
    the "afs.*" space), no matter what type of server we're dealing with.  But
    OpenAFS servers, for example, cannot deal with some of the extra-capable
    attributes that AuriStor (YFS) servers provide.  Unfortunately, the
    presence of the afs.yfs.* attributes causes errors[1] for anything that
    tries to read them if the server is of the wrong type.
    
    Fix the problem by removing afs_listxattr() so that none of the special
    xattrs are listed (AFS doesn't support xattrs).  It does mean, however,
    that getfattr won't list them, though they can still be accessed with
    getxattr() and setxattr().
    
    This can be tested with something like:
    
            getfattr -d -m ".*" /afs/example.com/path/to/file
    
    With this change, none of the afs.* attributes should be visible.
    
    Changes:
    ver #2:
     - Hide all of the afs.* xattrs, not just the ACL ones.
    
    Fixes: ae46578b963f ("afs: Get YFS ACLs and information through xattrs")
    Reported-by: Gaja Sophie Peters <gaja.peters@math.uni-hamburg.de>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Gaja Sophie Peters <gaja.peters@math.uni-hamburg.de>
    Reviewed-by: Jeffrey Altman <jaltman@auristor.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Link: http://lists.infradead.org/pipermail/linux-afs/2021-March/003502.html [1]
    Link: http://lists.infradead.org/pipermail/linux-afs/2021-March/003567.html # v1
    Link: http://lists.infradead.org/pipermail/linux-afs/2021-March/003573.html # v2
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c71b93323f37e9adce77dafc939d5f00533711d5
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Mon Mar 15 23:01:31 2021 +0530

    ASoC: simple-card-utils: Do not handle device clock
    
    commit 8ca88d53351cc58d535b2bfc7386835378fb0db2 upstream.
    
    This reverts commit 1e30f642cf29 ("ASoC: simple-card-utils: Fix device
    module clock"). The original patch ended up breaking following platform,
    which depends on set_sysclk() to configure internal PLL on wm8904 codec
    and expects simple-card-utils to not update the MCLK rate.
     - "arch/arm64/boot/dts/freescale/fsl-ls1028a-kontron-sl28-var3-ads2.dts"
    
    It would be best if codec takes care of setting MCLK clock via DAI
    set_sysclk() callback.
    
    Reported-by: Michael Walle <michael@walle.cc>
    Suggested-by: Mark Brown <broonie@kernel.org>
    Suggested-by: Michael Walle <michael@walle.cc>
    Fixes: 1e30f642cf29 ("ASoC: simple-card-utils: Fix device module clock")
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Tested-by: Michael Walle <michael@walle.cc>
    Link: https://lore.kernel.org/r/1615829492-8972-2-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e029384c1835e33eac9393211059d873d9df22df
Author: Pan Xiuli <xiuli.pan@linux.intel.com>
Date:   Mon Mar 8 18:41:27 2021 -0600

    ASoC: SOF: intel: fix wrong poll bits in dsp power down
    
    commit fd8299181995093948ec6ca75432e797b4a39143 upstream.
    
    The ADSPCS_SPA is Set Power Active bit. To check if DSP is powered
    down, we need to check ADSPCS_CPA, the Current Power Active bit.
    
    Fixes: 747503b1813a3 ("ASoC: SOF: Intel: Add Intel specific HDA DSP HW operations")
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Signed-off-by: Pan Xiuli <xiuli.pan@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210309004127.4940-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 626a484d1ec2eb2c2cb2d07e670b1c1eb3382cb8
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Mar 1 18:34:10 2021 -0600

    ASoC: SOF: Intel: unregister DMIC device on probe error
    
    commit 5bb0ecddb2a7f638d65e457f3da9fa334c967b14 upstream.
    
    We only unregister the platform device during the .remove operation,
    but if the probe fails we will never reach this sequence.
    
    Suggested-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Fixes: dd96daca6c83e ("ASoC: SOF: Intel: Add APL/CNL HW DSP support")
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
    Link: https://lore.kernel.org/r/20210302003410.1178535-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db3d39bcd66a14579785191fa4893964bfbd2be4
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Tue Feb 16 14:42:21 2021 +0300

    ASoC: fsl_ssi: Fix TDM slot setup for I2S mode
    
    commit 87263968516fb9507d6215d53f44052627fae8d8 upstream.
    
    When using the driver in I2S TDM mode, the _fsl_ssi_set_dai_fmt()
    function rewrites the number of slots previously set by the
    fsl_ssi_set_dai_tdm_slot() function to 2 by default.
    To fix this, let's use the saved slot count value or, if TDM
    is not used and the slot count is not set, proceed as before.
    
    Fixes: 4f14f5c11db1 ("ASoC: fsl_ssi: Fix number of words per frame for I2S-slave mode")
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Acked-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Link: https://lore.kernel.org/r/20210216114221.26635-1-shc_work@mail.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24c553371addc553655a76a18bb13fa573a7dedc
Author: David Sterba <dsterba@suse.com>
Date:   Mon Mar 15 15:18:24 2021 +0100

    btrfs: fix slab cache flags for free space tree bitmap
    
    commit 34e49994d0dcdb2d31d4d2908d04f4e9ce57e4d7 upstream.
    
    The free space tree bitmap slab cache is created with SLAB_RED_ZONE but
    that's a debugging flag and not always enabled. Also the other slabs are
    created with at least SLAB_MEM_SPREAD that we want as well to average
    the memory placement cost.
    
    Reported-by: Vlastimil Babka <vbabka@suse.cz>
    Fixes: 3acd48507dc4 ("btrfs: fix allocation of free space cache v1 bitmap pages")
    CC: stable@vger.kernel.org # 5.4+
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b3b99525c4f18e543f6ef17ef97c29f5694e8b4
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Mar 11 14:31:05 2021 +0000

    btrfs: fix race when cloning extent buffer during rewind of an old root
    
    commit dbcc7d57bffc0c8cac9dac11bec548597d59a6a5 upstream.
    
    While resolving backreferences, as part of a logical ino ioctl call or
    fiemap, we can end up hitting a BUG_ON() when replaying tree mod log
    operations of a root, triggering a stack trace like the following:
    
      ------------[ cut here ]------------
      kernel BUG at fs/btrfs/ctree.c:1210!
      invalid opcode: 0000 [#1] SMP KASAN PTI
      CPU: 1 PID: 19054 Comm: crawl_335 Tainted: G        W         5.11.0-2d11c0084b02-misc-next+ #89
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
      RIP: 0010:__tree_mod_log_rewind+0x3b1/0x3c0
      Code: 05 48 8d 74 10 (...)
      RSP: 0018:ffffc90001eb70b8 EFLAGS: 00010297
      RAX: 0000000000000000 RBX: ffff88812344e400 RCX: ffffffffb28933b6
      RDX: 0000000000000007 RSI: dffffc0000000000 RDI: ffff88812344e42c
      RBP: ffffc90001eb7108 R08: 1ffff11020b60a20 R09: ffffed1020b60a20
      R10: ffff888105b050f9 R11: ffffed1020b60a1f R12: 00000000000000ee
      R13: ffff8880195520c0 R14: ffff8881bc958500 R15: ffff88812344e42c
      FS:  00007fd1955e8700(0000) GS:ffff8881f5600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007efdb7928718 CR3: 000000010103a006 CR4: 0000000000170ee0
      Call Trace:
       btrfs_search_old_slot+0x265/0x10d0
       ? lock_acquired+0xbb/0x600
       ? btrfs_search_slot+0x1090/0x1090
       ? free_extent_buffer.part.61+0xd7/0x140
       ? free_extent_buffer+0x13/0x20
       resolve_indirect_refs+0x3e9/0xfc0
       ? lock_downgrade+0x3d0/0x3d0
       ? __kasan_check_read+0x11/0x20
       ? add_prelim_ref.part.11+0x150/0x150
       ? lock_downgrade+0x3d0/0x3d0
       ? __kasan_check_read+0x11/0x20
       ? lock_acquired+0xbb/0x600
       ? __kasan_check_write+0x14/0x20
       ? do_raw_spin_unlock+0xa8/0x140
       ? rb_insert_color+0x30/0x360
       ? prelim_ref_insert+0x12d/0x430
       find_parent_nodes+0x5c3/0x1830
       ? resolve_indirect_refs+0xfc0/0xfc0
       ? lock_release+0xc8/0x620
       ? fs_reclaim_acquire+0x67/0xf0
       ? lock_acquire+0xc7/0x510
       ? lock_downgrade+0x3d0/0x3d0
       ? lockdep_hardirqs_on_prepare+0x160/0x210
       ? lock_release+0xc8/0x620
       ? fs_reclaim_acquire+0x67/0xf0
       ? lock_acquire+0xc7/0x510
       ? poison_range+0x38/0x40
       ? unpoison_range+0x14/0x40
       ? trace_hardirqs_on+0x55/0x120
       btrfs_find_all_roots_safe+0x142/0x1e0
       ? find_parent_nodes+0x1830/0x1830
       ? btrfs_inode_flags_to_xflags+0x50/0x50
       iterate_extent_inodes+0x20e/0x580
       ? tree_backref_for_extent+0x230/0x230
       ? lock_downgrade+0x3d0/0x3d0
       ? read_extent_buffer+0xdd/0x110
       ? lock_downgrade+0x3d0/0x3d0
       ? __kasan_check_read+0x11/0x20
       ? lock_acquired+0xbb/0x600
       ? __kasan_check_write+0x14/0x20
       ? _raw_spin_unlock+0x22/0x30
       ? __kasan_check_write+0x14/0x20
       iterate_inodes_from_logical+0x129/0x170
       ? iterate_inodes_from_logical+0x129/0x170
       ? btrfs_inode_flags_to_xflags+0x50/0x50
       ? iterate_extent_inodes+0x580/0x580
       ? __vmalloc_node+0x92/0xb0
       ? init_data_container+0x34/0xb0
       ? init_data_container+0x34/0xb0
       ? kvmalloc_node+0x60/0x80
       btrfs_ioctl_logical_to_ino+0x158/0x230
       btrfs_ioctl+0x205e/0x4040
       ? __might_sleep+0x71/0xe0
       ? btrfs_ioctl_get_supported_features+0x30/0x30
       ? getrusage+0x4b6/0x9c0
       ? __kasan_check_read+0x11/0x20
       ? lock_release+0xc8/0x620
       ? __might_fault+0x64/0xd0
       ? lock_acquire+0xc7/0x510
       ? lock_downgrade+0x3d0/0x3d0
       ? lockdep_hardirqs_on_prepare+0x210/0x210
       ? lockdep_hardirqs_on_prepare+0x210/0x210
       ? __kasan_check_read+0x11/0x20
       ? do_vfs_ioctl+0xfc/0x9d0
       ? ioctl_file_clone+0xe0/0xe0
       ? lock_downgrade+0x3d0/0x3d0
       ? lockdep_hardirqs_on_prepare+0x210/0x210
       ? __kasan_check_read+0x11/0x20
       ? lock_release+0xc8/0x620
       ? __task_pid_nr_ns+0xd3/0x250
       ? lock_acquire+0xc7/0x510
       ? __fget_files+0x160/0x230
       ? __fget_light+0xf2/0x110
       __x64_sys_ioctl+0xc3/0x100
       do_syscall_64+0x37/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7fd1976e2427
      Code: 00 00 90 48 8b 05 (...)
      RSP: 002b:00007fd1955e5cf8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      RAX: ffffffffffffffda RBX: 00007fd1955e5f40 RCX: 00007fd1976e2427
      RDX: 00007fd1955e5f48 RSI: 00000000c038943b RDI: 0000000000000004
      RBP: 0000000001000000 R08: 0000000000000000 R09: 00007fd1955e6120
      R10: 0000557835366b00 R11: 0000000000000246 R12: 0000000000000004
      R13: 00007fd1955e5f48 R14: 00007fd1955e5f40 R15: 00007fd1955e5ef8
      Modules linked in:
      ---[ end trace ec8931a1c36e57be ]---
    
      (gdb) l *(__tree_mod_log_rewind+0x3b1)
      0xffffffff81893521 is in __tree_mod_log_rewind (fs/btrfs/ctree.c:1210).
      1205                     * the modification. as we're going backwards, we do the
      1206                     * opposite of each operation here.
      1207                     */
      1208                    switch (tm->op) {
      1209                    case MOD_LOG_KEY_REMOVE_WHILE_FREEING:
      1210                            BUG_ON(tm->slot < n);
      1211                            fallthrough;
      1212                    case MOD_LOG_KEY_REMOVE_WHILE_MOVING:
      1213                    case MOD_LOG_KEY_REMOVE:
      1214                            btrfs_set_node_key(eb, &tm->key, tm->slot);
    
    Here's what happens to hit that BUG_ON():
    
    1) We have one tree mod log user (through fiemap or the logical ino ioctl),
       with a sequence number of 1, so we have fs_info->tree_mod_seq == 1;
    
    2) Another task is at ctree.c:balance_level() and we have eb X currently as
       the root of the tree, and we promote its single child, eb Y, as the new
       root.
    
       Then, at ctree.c:balance_level(), we call:
    
          tree_mod_log_insert_root(eb X, eb Y, 1);
    
    3) At tree_mod_log_insert_root() we create tree mod log elements for each
       slot of eb X, of operation type MOD_LOG_KEY_REMOVE_WHILE_FREEING each
       with a ->logical pointing to ebX->start. These are placed in an array
       named tm_list.
       Lets assume there are N elements (N pointers in eb X);
    
    4) Then, still at tree_mod_log_insert_root(), we create a tree mod log
       element of operation type MOD_LOG_ROOT_REPLACE, ->logical set to
       ebY->start, ->old_root.logical set to ebX->start, ->old_root.level set
       to the level of eb X and ->generation set to the generation of eb X;
    
    5) Then tree_mod_log_insert_root() calls tree_mod_log_free_eb() with
       tm_list as argument. After that, tree_mod_log_free_eb() calls
       __tree_mod_log_insert() for each member of tm_list in reverse order,
       from highest slot in eb X, slot N - 1, to slot 0 of eb X;
    
    6) __tree_mod_log_insert() sets the sequence number of each given tree mod
       log operation - it increments fs_info->tree_mod_seq and sets
       fs_info->tree_mod_seq as the sequence number of the given tree mod log
       operation.
    
       This means that for the tm_list created at tree_mod_log_insert_root(),
       the element corresponding to slot 0 of eb X has the highest sequence
       number (1 + N), and the element corresponding to the last slot has the
       lowest sequence number (2);
    
    7) Then, after inserting tm_list's elements into the tree mod log rbtree,
       the MOD_LOG_ROOT_REPLACE element is inserted, which gets the highest
       sequence number, which is N + 2;
    
    8) Back to ctree.c:balance_level(), we free eb X by calling
       btrfs_free_tree_block() on it. Because eb X was created in the current
       transaction, has no other references and writeback did not happen for
       it, we add it back to the free space cache/tree;
    
    9) Later some other task T allocates the metadata extent from eb X, since
       it is marked as free space in the space cache/tree, and uses it as a
       node for some other btree;
    
    10) The tree mod log user task calls btrfs_search_old_slot(), which calls
        get_old_root(), and finally that calls __tree_mod_log_oldest_root()
        with time_seq == 1 and eb_root == eb Y;
    
    11) First iteration of the while loop finds the tree mod log element with
        sequence number N + 2, for the logical address of eb Y and of type
        MOD_LOG_ROOT_REPLACE;
    
    12) Because the operation type is MOD_LOG_ROOT_REPLACE, we don't break out
        of the loop, and set root_logical to point to tm->old_root.logical
        which corresponds to the logical address of eb X;
    
    13) On the next iteration of the while loop, the call to
        tree_mod_log_search_oldest() returns the smallest tree mod log element
        for the logical address of eb X, which has a sequence number of 2, an
        operation type of MOD_LOG_KEY_REMOVE_WHILE_FREEING and corresponds to
        the old slot N - 1 of eb X (eb X had N items in it before being freed);
    
    14) We then break out of the while loop and return the tree mod log operation
        of type MOD_LOG_ROOT_REPLACE (eb Y), and not the one for slot N - 1 of
        eb X, to get_old_root();
    
    15) At get_old_root(), we process the MOD_LOG_ROOT_REPLACE operation
        and set "logical" to the logical address of eb X, which was the old
        root. We then call tree_mod_log_search() passing it the logical
        address of eb X and time_seq == 1;
    
    16) Then before calling tree_mod_log_search(), task T adds a key to eb X,
        which results in adding a tree mod log operation of type
        MOD_LOG_KEY_ADD to the tree mod log - this is done at
        ctree.c:insert_ptr() - but after adding the tree mod log operation
        and before updating the number of items in eb X from 0 to 1...
    
    17) The task at get_old_root() calls tree_mod_log_search() and gets the
        tree mod log operation of type MOD_LOG_KEY_ADD just added by task T.
        Then it enters the following if branch:
    
        if (old_root && tm && tm->op != MOD_LOG_KEY_REMOVE_WHILE_FREEING) {
           (...)
        } (...)
    
        Calls read_tree_block() for eb X, which gets a reference on eb X but
        does not lock it - task T has it locked.
        Then it clones eb X while it has nritems set to 0 in its header, before
        task T sets nritems to 1 in eb X's header. From hereupon we use the
        clone of eb X which no other task has access to;
    
    18) Then we call __tree_mod_log_rewind(), passing it the MOD_LOG_KEY_ADD
        mod log operation we just got from tree_mod_log_search() in the
        previous step and the cloned version of eb X;
    
    19) At __tree_mod_log_rewind(), we set the local variable "n" to the number
        of items set in eb X's clone, which is 0. Then we enter the while loop,
        and in its first iteration we process the MOD_LOG_KEY_ADD operation,
        which just decrements "n" from 0 to (u32)-1, since "n" is declared with
        a type of u32. At the end of this iteration we call rb_next() to find the
        next tree mod log operation for eb X, that gives us the mod log operation
        of type MOD_LOG_KEY_REMOVE_WHILE_FREEING, for slot 0, with a sequence
        number of N + 1 (steps 3 to 6);
    
    20) Then we go back to the top of the while loop and trigger the following
        BUG_ON():
    
            (...)
            switch (tm->op) {
            case MOD_LOG_KEY_REMOVE_WHILE_FREEING:
                     BUG_ON(tm->slot < n);
                     fallthrough;
            (...)
    
        Because "n" has a value of (u32)-1 (4294967295) and tm->slot is 0.
    
    Fix this by taking a read lock on the extent buffer before cloning it at
    ctree.c:get_old_root(). This should be done regardless of the extent
    buffer having been freed and reused, as a concurrent task might be
    modifying it (while holding a write lock on it).
    
    Reported-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Link: https://lore.kernel.org/linux-btrfs/20210227155037.GN28049@hungrycats.org/
    Fixes: 834328a8493079 ("Btrfs: tree mod log's old roots could still be part of the tree")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3e438db75fb3e4df2e145d3b650f2a5bf251964
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Mar 16 09:59:18 2021 -0700

    ARM: 9044/1: vfp: use undef hook for VFP support detection
    
    commit 3cce9d44321e460e7c88cdec4e4537a6e9ad7c0d upstream.
    
    Commit f77ac2e378be9dd6 ("ARM: 9030/1: entry: omit FP emulation for UND
    exceptions taken in kernel mode") failed to take into account that there
    is in fact a case where we relied on this code path: during boot, the
    VFP detection code issues a read of FPSID, which will trigger an undef
    exception on cores that lack VFP support.
    
    So let's reinstate this logic using an undef hook which is registered
    only for the duration of the initcall to vpf_init(), and which sets
    VFP_arch to a non-zero value - as before - if no VFP support is present.
    
    Fixes: f77ac2e378be9dd6 ("ARM: 9030/1: entry: omit FP emulation for UND ...")
    Reported-by: "kernelci.org bot" <bot@kernelci.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a47b395d441d66e09eaa067a4aaaf65fc846f219
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Mar 15 16:19:52 2021 -0700

    ARM: 9030/1: entry: omit FP emulation for UND exceptions taken in kernel mode
    
    commit f77ac2e378be9dd61eb88728f0840642f045d9d1 upstream.
    
    There are a couple of problems with the exception entry code that deals
    with FP exceptions (which are reported as UND exceptions) when building
    the kernel in Thumb2 mode:
    - the conditional branch to vfp_kmode_exception in vfp_support_entry()
      may be out of range for its target, depending on how the linker decides
      to arrange the sections;
    - when the UND exception is taken in kernel mode, the emulation handling
      logic is entered via the 'call_fpe' label, which means we end up using
      the wrong value/mask pairs to match and detect the NEON opcodes.
    
    Since UND exceptions in kernel mode are unlikely to occur on a hot path
    (as opposed to the user mode version which is invoked for VFP support
    code and lazy restore), we can use the existing undef hook machinery for
    any kernel mode instruction emulation that is needed, including calling
    the existing vfp_kmode_exception() routine for unexpected cases. So drop
    the call to call_fpe, and instead, install an undef hook that will get
    called for NEON and VFP instructions that trigger an UND exception in
    kernel mode.
    
    While at it, make sure that the PC correction is accurate for the
    execution mode where the exception was taken, by checking the PSR
    Thumb bit.
    
    [nd: fix conflict in arch/arm/vfp/vfphw.S due to missing
         commit 2cbd1cc3dcd3 ("ARM: 8991/1: use VFP assembler mnemonics if
         available")]
    
    Fixes: eff8728fe698 ("vmlinux.lds.h: Add PGO and AutoFDO input sections")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Dmitry Osipenko <digetx@gmail.com>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34794bc0e7687950ed2c4a5c92504cd22a9466d2
Author: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
Date:   Wed Mar 10 14:23:37 2021 +0100

    s390/vtime: fix increased steal time accounting
    
    commit d54cb7d54877d529bc1e0e1f47a3dd082f73add3 upstream.
    
    Commit 152e9b8676c6e ("s390/vtime: steal time exponential moving average")
    inadvertently changed the input value for account_steal_time() from
    "cputime_to_nsecs(steal)" to just "steal", resulting in broken increased
    steal time accounting.
    
    Fix this by changing it back to "cputime_to_nsecs(steal)".
    
    Fixes: 152e9b8676c6e ("s390/vtime: steal time exponential moving average")
    Cc: <stable@vger.kernel.org> # 5.1
    Reported-by: Sabine Forkel <sabine.forkel@de.ibm.com>
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba4342094d71c4ceec2ef841dba2c26f49b2acfc
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Mar 19 15:47:25 2021 +0100

    Revert "PM: runtime: Update device status before letting suppliers suspend"
    
    commit 0cab893f409c53634d0d818fa414641cbcdb0dab upstream.
    
    Revert commit 44cc89f76464 ("PM: runtime: Update device status
    before letting suppliers suspend") that introduced a race condition
    into __rpm_callback() which allowed a concurrent rpm_resume() to
    run and resume the device prematurely after its status had been
    changed to RPM_SUSPENDED by __rpm_callback().
    
    Fixes: 44cc89f76464 ("PM: runtime: Update device status before letting suppliers suspend")
    Link: https://lore.kernel.org/linux-pm/24dfb6fc-5d54-6ee2-9195-26428b7ecf8a@intel.com/
    Reported-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62cf220630a07d9f3998fc0e132056a419046474
Author: Xiaoliang Yu <yxl_22@outlook.com>
Date:   Sat Mar 13 07:54:53 2021 +0800

    ALSA: hda/realtek: Apply headset-mic quirks for Xiaomi Redmibook Air
    
    commit e1c86210fe27428399643861b81b080eccd79f87 upstream.
    
    There is another fix for headset-mic problem on Redmibook (1d72:1602),
    it also works on Redmibook Air (1d72:1947), which has the same issue.
    
    Signed-off-by: Xiaoliang Yu <yxl_22@outlook.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/TYBP286MB02856DC016849DEA0F9B6A37EE6F9@TYBP286MB0285.JPNP286.PROD.OUTLOOK.COM
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 613fd762d188ba9692106dfd676f40c1d0e77b90
Author: Hui Wang <hui.wang@canonical.com>
Date:   Fri Mar 12 12:14:08 2021 +0800

    ALSA: hda: generic: Fix the micmute led init state
    
    commit 2bf44e0ee95f39cc54ea1b942f0a027e0181ca4e upstream.
    
    Recently we found the micmute led init state is not correct after
    freshly installing the ubuntu linux on a Lenovo AIO machine. The
    internal mic is not muted, but the micmute led is on and led mode is
    'follow mute'. If we mute internal mic, the led is keeping on, then
    unmute the internal mic, the led is off. And from then on, the
    micmute led will work correctly.
    
    So the micmute led init state is not correct. The led is controlled
    by codec gpio (ALC233_FIXUP_LENOVO_LINE2_MIC_HOTKEY), in the
    patch_realtek, the gpio data is set to 0x4 initially and the led is
    on with this data. In the hda_generic, the led_value is set to
    0 initially, suppose users set the 'capture switch' to on from
    user space and the micmute led should change to be off with this
    operation, but the check "if (val == spec->micmute_led.led_value)" in
    the call_micmute_led_update() will skip the led setting.
    
    To guarantee the led state will be set by the 1st time of changing
    "Capture Switch", set -1 to the init led_value.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20210312041408.3776-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a5f85603e6ef1841f1cf348ea2b05220c00d7c0
Author: Xiaoliang Yu <yxl_22@outlook.com>
Date:   Tue Mar 16 00:49:00 2021 +0800

    ALSA: hda/realtek: apply pin quirk for XiaomiNotebook Pro
    
    commit b95bc12e0412d14d5fc764f0b82631c7bcaf1959 upstream.
    
    Built-in microphone and combojack on Xiaomi Notebook Pro (1d72:1701) needs
    to be fixed, the existing quirk for Dell works well on that machine.
    
    Signed-off-by: Xiaoliang Yu <yxl_22@outlook.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/OS0P286MB02749B9E13920E6899902CD8EE6C9@OS0P286MB0274.JPNP286.PROD.OUTLOOK.COM
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d35c01a36451d805b9e5bcd4c7c0b1fbe4823fb
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Mar 12 18:34:07 2021 +0900

    ALSA: dice: fix null pointer dereference when node is disconnected
    
    commit dd7b836d6bc935df95c826f69ff4d051f5561604 upstream.
    
    When node is removed from IEEE 1394 bus, any transaction fails to the node.
    In the case, ALSA dice driver doesn't stop isochronous contexts even if
    they are running. As a result, null pointer dereference occurs in callback
    from the running context.
    
    This commit fixes the bug to release isochronous contexts always.
    
    Cc: <stable@vger.kernel.org> # v5.4 or later
    Fixes: e9f21129b8d8 ("ALSA: dice: support AMDTP domain")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20210312093407.23437-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0fc0e7bfda208b1afb3c983673720f1a6ac900d
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Wed Feb 24 14:57:52 2021 +0800

    ASoC: ak5558: Add MODULE_DEVICE_TABLE
    
    commit 80cffd2468ddb850e678f17841fc356930b2304a upstream.
    
    Add missed MODULE_DEVICE_TABLE for the driver can be loaded
    automatically at boot.
    
    Fixes: 920884777480 ("ASoC: ak5558: Add support for AK5558 ADC driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Link: https://lore.kernel.org/r/1614149872-25510-2-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a592a4c2889ec8b0b5f06e76ad90b84a6ca18ba2
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Wed Feb 24 14:57:51 2021 +0800

    ASoC: ak4458: Add MODULE_DEVICE_TABLE
    
    commit 4ec5b96775a88dd9b1c3ba1d23c43c478cab95a2 upstream.
    
    Add missed MODULE_DEVICE_TABLE for the driver can be loaded
    automatically at boot.
    
    Fixes: 08660086eff9 ("ASoC: ak4458: Add support for AK4458 DAC driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Link: https://lore.kernel.org/r/1614149872-25510-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
