commit 61385cc1db42b163c664429ab87d6399ea043c0d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 15 07:49:06 2016 +0100

    Linux 4.8.8

commit 8ed841d6c045c31c3309b70395b920cb707537d4
Author: Sumit Saxena <sumit.saxena@broadcom.com>
Date:   Wed Nov 9 02:59:42 2016 -0800

    scsi: megaraid_sas: fix macro MEGASAS_IS_LOGICAL to avoid regression
    
    commit 5e5ec1759dd663a1d5a2f10930224dd009e500e8 upstream.
    
    This patch will fix regression caused by commit 1e793f6fc0db ("scsi:
    megaraid_sas: Fix data integrity failure for JBOD (passthrough)
    devices").
    
    The problem was that the MEGASAS_IS_LOGICAL macro did not have braces
    and as a result the driver ended up exposing a lot of non-existing SCSI
    devices (all SCSI commands to channels 1,2,3 were returned as
    SUCCESS-DID_OK by driver).
    
    [mkp: clarified patch description]
    
    Fixes: 1e793f6fc0db920400574211c48f9157a37e3945
    Reported-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
    Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Tested-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Reviewed-by: Tomas Henzl <thenzl@redhat.com>
    Tested-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32f60e9b621fff93433fe398cedde009f184c63e
Author: Kashyap Desai <kashyap.desai@broadcom.com>
Date:   Fri Oct 21 06:33:32 2016 -0700

    scsi: megaraid_sas: Fix data integrity failure for JBOD (passthrough) devices
    
    commit 1e793f6fc0db920400574211c48f9157a37e3945 upstream.
    
    Commit 02b01e010afe ("megaraid_sas: return sync cache call with
    success") modified the driver to successfully complete SYNCHRONIZE_CACHE
    commands without passing them to the controller. Disk drive caches are
    only explicitly managed by controller firmware when operating in RAID
    mode. So this commit effectively disabled writeback cache flushing for
    any drives used in JBOD mode, leading to data integrity failures.
    
    [mkp: clarified patch description]
    
    Fixes: 02b01e010afeeb49328d35650d70721d2ca3fd59
    Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
    Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Reviewed-by: Tomas Henzl <thenzl@redhat.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb2ca7aac34929cc86bb419736080a20b8915f70
Author: Felipe Balbi <felipe.balbi@linux.intel.com>
Date:   Wed Oct 5 14:24:37 2016 +0300

    usb: dwc3: gadget: properly account queued requests
    
    commit a9c3ca5fae6bf73770f0576eaf57d5f1305ef4b3 upstream.
    
    Some requests could be accounted for multiple
    times. Let's fix that so each and every requests is
    accounted for only once.
    
    Fixes: 55a0237f8f47 ("usb: dwc3: gadget: use allocated/queued reqs for LST bit")
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38db26fb3ae5eaeb0badf2f84481533ba4b63cc1
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Thu Oct 27 16:30:06 2016 +0200

    arch/powerpc: Update parameters for csum_tcpudp_magic & csum_tcpudp_nofold
    
    [ Upstream commit f9d4286b9516b02e795214412d36885f572b57ad ]
    
    Commit 01cfbad "ipv4: Update parameters for csum_tcpudp_magic to their
    original types" changed parameters for csum_tcpudp_magic and
    csum_tcpudp_nofold for many platforms but not for PowerPC.
    
    Fixes: 01cfbad "ipv4: Update parameters for csum_tcpudp_magic to their original types"
    Cc: Alexander Duyck <aduyck@mirantis.com>
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a143c6022cef5f0a58317277a51674fb228fab3e
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Oct 26 11:23:07 2016 -0400

    packet: on direct_xmit, limit tso and csum to supported devices
    
    [ Upstream commit 104ba78c98808ae837d1f63aae58c183db5505df ]
    
    When transmitting on a packet socket with PACKET_VNET_HDR and
    PACKET_QDISC_BYPASS, validate device support for features requested
    in vnet_hdr.
    
    Drop TSO packets sent to devices that do not support TSO or have the
    feature disabled. Note that the latter currently do process those
    packets correctly, regardless of not advertising the feature.
    
    Because of SKB_GSO_DODGY, it is not sufficient to test device features
    with netif_needs_gso. Full validate_xmit_skb is needed.
    
    Switch to software checksum for non-TSO packets that request checksum
    offload if that device feature is unsupported or disabled. Note that
    similar to the TSO case, device drivers may perform checksum offload
    correctly even when not advertising it.
    
    When switching to software checksum, packets hit skb_checksum_help,
    which has two BUG_ON checksum not in linear segment. Packet sockets
    always allocate at least up to csum_start + csum_off + 2 as linear.
    
    Tested by running github.com/wdebruij/kerneltools/psock_txring_vnet.c
    
      ethtool -K eth0 tso off tx on
      psock_txring_vnet -d $dst -s $src -i eth0 -l 2000 -n 1 -q -v
      psock_txring_vnet -d $dst -s $src -i eth0 -l 2000 -n 1 -q -v -N
    
      ethtool -K eth0 tx off
      psock_txring_vnet -d $dst -s $src -i eth0 -l 1000 -n 1 -q -v -G
      psock_txring_vnet -d $dst -s $src -i eth0 -l 1000 -n 1 -q -v -G -N
    
    v2:
      - add EXPORT_SYMBOL_GPL(validate_xmit_skb_list)
    
    Fixes: d346a3fae3ff ("packet: introduce PACKET_QDISC_BYPASS socket option")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6289d9ac3fe6f3b1aaacbbbddff2ed2a9d9965a
Author: Eli Cooper <elicooper@gmx.com>
Date:   Wed Oct 26 10:11:09 2016 +0800

    ip6_tunnel: Update skb->protocol to ETH_P_IPV6 in ip6_tnl_xmit()
    
    [ Upstream commit ae148b085876fa771d9ef2c05f85d4b4bf09ce0d ]
    
    This patch updates skb->protocol to ETH_P_IPV6 in ip6_tnl_xmit() when an
    IPv6 header is installed to a socket buffer.
    
    This is not a cosmetic change.  Without updating this value, GSO packets
    transmitted through an ipip6 tunnel have the protocol of ETH_P_IP and
    skb_mac_gso_segment() will attempt to call gso_segment() for IPv4,
    which results in the packets being dropped.
    
    Fixes: b8921ca83eed ("ip4ip6: Support for GSO/GRO")
    Signed-off-by: Eli Cooper <elicooper@gmx.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9e086b9009a1cf189dd96abad95285bc9627624
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Tue Oct 25 14:27:39 2016 -0200

    sctp: validate chunk len before actually using it
    
    [ Upstream commit bf911e985d6bbaa328c20c3e05f4eb03de11fdd6 ]
    
    Andrey Konovalov reported that KASAN detected that SCTP was using a slab
    beyond the boundaries. It was caused because when handling out of the
    blue packets in function sctp_sf_ootb() it was checking the chunk len
    only after already processing the first chunk, validating only for the
    2nd and subsequent ones.
    
    The fix is to just move the check upwards so it's also validated for the
    1st chunk.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a37dce1b67926646dc3ad1b509f174c271e400f
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Mon Oct 24 20:18:27 2016 -0400

    net sched filters: fix notification of filter delete with proper handle
    
    [ Upstream commit 9ee7837449b3d6f0fcf9132c6b5e5aaa58cc67d4 ]
    
    Daniel says:
    
    While trying out [1][2], I noticed that tc monitor doesn't show the
    correct handle on delete:
    
    $ tc monitor
    qdisc clsact ffff: dev eno1 parent ffff:fff1
    filter dev eno1 ingress protocol all pref 49152 bpf handle 0x2a [...]
    deleted filter dev eno1 ingress protocol all pref 49152 bpf handle 0xf3be0c80
    
    some context to explain the above:
    The user identity of any tc filter is represented by a 32-bit
    identifier encoded in tcm->tcm_handle. Example 0x2a in the bpf filter
    above. A user wishing to delete, get or even modify a specific filter
    uses this handle to reference it.
    Every classifier is free to provide its own semantics for the 32 bit handle.
    Example: classifiers like u32 use schemes like 800:1:801 to describe
    the semantics of their filters represented as hash table, bucket and
    node ids etc.
    Classifiers also have internal per-filter representation which is different
    from this externally visible identity. Most classifiers set this
    internal representation to be a pointer address (which allows fast retrieval
    of said filters in their implementations). This internal representation
    is referenced with the "fh" variable in the kernel control code.
    
    When a user successfuly deletes a specific filter, by specifying the correct
    tcm->tcm_handle, an event is generated to user space which indicates
    which specific filter was deleted.
    
    Before this patch, the "fh" value was sent to user space as the identity.
    As an example what is shown in the sample bpf filter delete event above
    is 0xf3be0c80. This is infact a 32-bit truncation of 0xffff8807f3be0c80
    which happens to be a 64-bit memory address of the internal filter
    representation (address of the corresponding filter's struct cls_bpf_prog);
    
    After this patch the appropriate user identifiable handle as encoded
    in the originating request tcm->tcm_handle is generated in the event.
    One of the cardinal rules of netlink rules is to be able to take an
    event (such as a delete in this case) and reflect it back to the
    kernel and successfully delete the filter. This patch achieves that.
    
    Note, this issue has existed since the original TC action
    infrastructure code patch back in 2004 as found in:
    https://git.kernel.org/cgit/linux/kernel/git/history/history.git/commit/
    
    [1] http://patchwork.ozlabs.org/patch/682828/
    [2] http://patchwork.ozlabs.org/patch/682829/
    
    Fixes: 4e54c4816bfe ("[NET]: Add tc extensions infrastructure.")
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d46b19687feca220e933f8d92844151154a51775
Author: David Ahern <dsa@cumulusnetworks.com>
Date:   Mon Oct 24 12:27:23 2016 -0700

    net: ipv6: Do not consider link state for nexthop validation
    
    [ Upstream commit d5d32e4b76687f4df9ad3ba8d3702b7347f51fa6 ]
    
    Similar to IPv4, do not consider link state when validating next hops.
    
    Currently, if the link is down default routes can fail to insert:
     $ ip -6 ro add vrf blue default via 2100:2::64 dev eth2
     RTNETLINK answers: No route to host
    
    With this patch the command succeeds.
    
    Fixes: 8c14586fc320 ("net: ipv6: Use passed in table for nexthop lookups")
    Signed-off-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb77db88ea11e334816ceb5a537d775c1fc3fb72
Author: Tobias Brunner <tobias@strongswan.org>
Date:   Mon Oct 24 15:44:26 2016 +0200

    macsec: Fix header length if SCI is added if explicitly disabled
    
    [ Upstream commit e0f841f5cbf2a195c63f3441f3d8ef1cd2bdeeed ]
    
    Even if sending SCIs is explicitly disabled, the code that creates the
    Security Tag might still decide to add it (e.g. if multiple RX SCs are
    defined on the MACsec interface).
    But because the header length so far only depended on the configuration
    option the SCI overwrote the original frame's contents (EtherType and
    e.g. the beginning of the IP header) and if encrypted did not visibly
    end up in the packet, while the SC flag in the TCI field of the Security
    Tag was still set, resulting in invalid MACsec frames.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Tobias Brunner <tobias@strongswan.org>
    Acked-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 027ab3b8ee5a1dcb7d0f61175b3fb0d0a8afe0f0
Author: Stephen Hemminger <sthemmin@microsoft.com>
Date:   Sun Oct 23 21:32:47 2016 -0700

    netvsc: fix incorrect receive checksum offloading
    
    [ Upstream commit e52fed7177f74382f742c27de2cc5314790aebb6 ]
    
    The Hyper-V netvsc driver was looking at the incorrect status bits
    in the checksum info. It was setting the receive checksum unnecessary
    flag based on the IP header checksum being correct. The checksum
    flag is skb is about TCP and UDP checksum status. Because of this
    bug, any packet received with bad TCP checksum would be passed
    up the stack and to the application causing data corruption.
    The problem is reproducible via netcat and netem.
    
    This had a side effect of not doing receive checksum offload
    on IPv6. The driver was also also always doing checksum offload
    independent of the checksum setting done via ethtool.
    
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b75edf27a6c3ea4f6ef4fd6e5497cf0de1733e1b
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Oct 23 18:03:06 2016 -0700

    udp: fix IP_CHECKSUM handling
    
    [ Upstream commit 10df8e6152c6c400a563a673e9956320bfce1871 ]
    
    First bug was added in commit ad6f939ab193 ("ip: Add offset parameter to
    ip_cmsg_recv") : Tom missed that ipv4 udp messages could be received on
    AF_INET6 socket. ip_cmsg_recv(msg, skb) should have been replaced by
    ip_cmsg_recv_offset(msg, skb, sizeof(struct udphdr));
    
    Then commit e6afc8ace6dd ("udp: remove headers from UDP packets before
    queueing") forgot to adjust the offsets now UDP headers are pulled
    before skb are put in receive queue.
    
    Fixes: ad6f939ab193 ("ip: Add offset parameter to ip_cmsg_recv")
    Fixes: e6afc8ace6dd ("udp: remove headers from UDP packets before queueing")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Sam Kumar <samanthakumar@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Tested-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ee356021c4258d495edee4b00bd8ed14d5c5e8c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Oct 24 01:01:09 2016 +0800

    sctp: fix the panic caused by route update
    
    [ Upstream commit ecc515d7238f2cffac839069d56dc271141defa0 ]
    
    Commit 7303a1475008 ("sctp: identify chunks that need to be fragmented
    at IP level") made the chunk be fragmented at IP level in the next round
    if it's size exceed PMTU.
    
    But there still is another case, PMTU can be updated if transport's dst
    expires and transport's pmtu_pending is set in sctp_packet_transmit. If
    the new PMTU is less than the chunk, the same issue with that commit can
    be triggered.
    
    So we should drop this packet and let it retransmit in another round
    where it would be fragmented at IP level.
    
    This patch is to fix it by checking the chunk size after PMTU may be
    updated and dropping this packet if it's size exceed PMTU.
    
    Fixes: 90017accff61 ("sctp: Add GSO support")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@txudriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d90cbfaf5439361f56ef447d5e0d653233574f91
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Oct 21 14:13:24 2016 +0200

    net: sctp, forbid negative length
    
    [ Upstream commit a4b8e71b05c27bae6bad3bdecddbc6b68a3ad8cf ]
    
    Most of getsockopt handlers in net/sctp/socket.c check len against
    sizeof some structure like:
            if (len < sizeof(int))
                    return -EINVAL;
    
    On the first look, the check seems to be correct. But since len is int
    and sizeof returns size_t, int gets promoted to unsigned size_t too. So
    the test returns false for negative lengths. Yes, (-1 < sizeof(long)) is
    false.
    
    Fix this in sctp by explicitly checking len < 0 before any getsockopt
    handler is called.
    
    Note that sctp_getsockopt_events already handled the negative case.
    Since we added the < 0 check elsewhere, this one can be removed.
    
    If not checked, this is the result:
    UBSAN: Undefined behaviour in ../mm/page_alloc.c:2722:19
    shift exponent 52 is too large for 32-bit type 'int'
    CPU: 1 PID: 24535 Comm: syz-executor Not tainted 4.8.1-0-syzkaller #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014
     0000000000000000 ffff88006d99f2a8 ffffffffb2f7bdea 0000000041b58ab3
     ffffffffb4363c14 ffffffffb2f7bcde ffff88006d99f2d0 ffff88006d99f270
     0000000000000000 0000000000000000 0000000000000034 ffffffffb5096422
    Call Trace:
     [<ffffffffb3051498>] ? __ubsan_handle_shift_out_of_bounds+0x29c/0x300
    ...
     [<ffffffffb273f0e4>] ? kmalloc_order+0x24/0x90
     [<ffffffffb27416a4>] ? kmalloc_order_trace+0x24/0x220
     [<ffffffffb2819a30>] ? __kmalloc+0x330/0x540
     [<ffffffffc18c25f4>] ? sctp_getsockopt_local_addrs+0x174/0xca0 [sctp]
     [<ffffffffc18d2bcd>] ? sctp_getsockopt+0x10d/0x1b0 [sctp]
     [<ffffffffb37c1219>] ? sock_common_getsockopt+0xb9/0x150
     [<ffffffffb37be2f5>] ? SyS_getsockopt+0x1a5/0x270
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: linux-sctp@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64774617da37025abe8ccdbb1ad09425c37586ff
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Fri Oct 21 09:34:29 2016 -0200

    net: fec: Call swap_buffer() prior to IP header alignment
    
    [ Upstream commit 235bde1ed3f0fff0f68f367ec8807b89ea151258 ]
    
    Commit 3ac72b7b63d5 ("net: fec: align IP header in hardware") breaks
    networking on mx28.
    
    There is an erratum on mx28 (ENGR121613 - ENET big endian mode
    not compatible with ARM little endian) that requires an additional
    byte-swap operation to workaround this problem.
    
    So call swap_buffer() prior to performing the IP header alignment
    to restore network functionality on mx28.
    
    Fixes: 3ac72b7b63d5 ("net: fec: align IP header in hardware")
    Reported-and-tested-by: Henri Roosen <henri.roosen@ginzinger.com>
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6c82c2b707e50e65fc19a0bd36fdfc39e05a6a8
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Thu Oct 20 14:19:46 2016 -0700

    ipv4: use the right lock for ping_group_range
    
    [ Upstream commit 396a30cce15d084b2b1a395aa6d515c3d559c674 ]
    
    This reverts commit a681574c99be23e4d20b769bf0e543239c364af5
    ("ipv4: disable BH in set_ping_group_range()") because we never
    read ping_group_range in BH context (unlike local_port_range).
    
    Then, since we already have a lock for ping_group_range, those
    using ip_local_ports.lock for ping_group_range are clearly typos.
    
    We might consider to share a same lock for both ping_group_range
    and local_port_range w.r.t. space saving, but that should be for
    net-next.
    
    Fixes: a681574c99be ("ipv4: disable BH in set_ping_group_range()")
    Fixes: ba6b918ab234 ("ping: move ping_group_range out of CONFIG_SYSCTL")
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Eric Salo <salo@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8418193f705251d9903b8b0b9760e769b3f32efd
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 20 10:26:48 2016 -0700

    ipv4: disable BH in set_ping_group_range()
    
    [ Upstream commit a681574c99be23e4d20b769bf0e543239c364af5 ]
    
    In commit 4ee3bd4a8c746 ("ipv4: disable BH when changing ip local port
    range") Cong added BH protection in set_local_port_range() but missed
    that same fix was needed in set_ping_group_range()
    
    Fixes: b8f1a55639e6 ("udp: Add function to make source port for UDP tunnels")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Eric Salo <salo@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23c110c4cdbce17b6c5df90298168fc4b990ecc1
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Thu Oct 20 15:58:02 2016 +0200

    net: add recursion limit to GRO
    
    [ Upstream commit fcd91dd449867c6bfe56a81cabba76b829fd05cd ]
    
    Currently, GRO can do unlimited recursion through the gro_receive
    handlers.  This was fixed for tunneling protocols by limiting tunnel GRO
    to one level with encap_mark, but both VLAN and TEB still have this
    problem.  Thus, the kernel is vulnerable to a stack overflow, if we
    receive a packet composed entirely of VLAN headers.
    
    This patch adds a recursion counter to the GRO layer to prevent stack
    overflow.  When a gro_receive function hits the recursion limit, GRO is
    aborted for this skb and it is processed normally.  This recursion
    counter is put in the GRO CB, but could be turned into a percpu counter
    if we run out of space in the CB.
    
    Thanks to Vladimír Beneš <vbenes@redhat.com> for the initial bug report.
    
    Fixes: CVE-2016-7039
    Fixes: 9b174d88c257 ("net: Add Transparent Ethernet Bridging GRO support.")
    Fixes: 66e5133f19e9 ("vlan: Add GRO support for non hardware accelerated vlan")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Jiri Benc <jbenc@redhat.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Acked-by: Tom Herbert <tom@herbertland.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3bbd04b92fddeb25a798d44b0fb9c903b6038e8
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Oct 19 16:57:08 2016 +0300

    net: core: Correctly iterate over lower adjacency list
    
    [ Upstream commit e4961b0768852d9eb7383e1a5df178eacb714656 ]
    
    Tamir reported the following trace when processing ARP requests received
    via a vlan device on top of a VLAN-aware bridge:
    
     NMI watchdog: BUG: soft lockup - CPU#1 stuck for 22s! [swapper/1:0]
    [...]
     CPU: 1 PID: 0 Comm: swapper/1 Tainted: G        W       4.8.0-rc7 #1
     Hardware name: Mellanox Technologies Ltd. "MSN2100-CB2F"/"SA001017", BIOS 5.6.5 06/07/2016
     task: ffff88017edfea40 task.stack: ffff88017ee10000
     RIP: 0010:[<ffffffff815dcc73>]  [<ffffffff815dcc73>] netdev_all_lower_get_next_rcu+0x33/0x60
    [...]
     Call Trace:
      <IRQ>
      [<ffffffffa015de0a>] mlxsw_sp_port_lower_dev_hold+0x5a/0xa0 [mlxsw_spectrum]
      [<ffffffffa016f1b0>] mlxsw_sp_router_netevent_event+0x80/0x150 [mlxsw_spectrum]
      [<ffffffff810ad07a>] notifier_call_chain+0x4a/0x70
      [<ffffffff810ad13a>] atomic_notifier_call_chain+0x1a/0x20
      [<ffffffff815ee77b>] call_netevent_notifiers+0x1b/0x20
      [<ffffffff815f2eb6>] neigh_update+0x306/0x740
      [<ffffffff815f38ce>] neigh_event_ns+0x4e/0xb0
      [<ffffffff8165ea3f>] arp_process+0x66f/0x700
      [<ffffffff8170214c>] ? common_interrupt+0x8c/0x8c
      [<ffffffff8165ec29>] arp_rcv+0x139/0x1d0
      [<ffffffff816e505a>] ? vlan_do_receive+0xda/0x320
      [<ffffffff815e3794>] __netif_receive_skb_core+0x524/0xab0
      [<ffffffff815e6830>] ? dev_queue_xmit+0x10/0x20
      [<ffffffffa06d612d>] ? br_forward_finish+0x3d/0xc0 [bridge]
      [<ffffffffa06e5796>] ? br_handle_vlan+0xf6/0x1b0 [bridge]
      [<ffffffff815e3d38>] __netif_receive_skb+0x18/0x60
      [<ffffffff815e3dc0>] netif_receive_skb_internal+0x40/0xb0
      [<ffffffff815e3e4c>] netif_receive_skb+0x1c/0x70
      [<ffffffffa06d7856>] br_pass_frame_up+0xc6/0x160 [bridge]
      [<ffffffffa06d63d7>] ? deliver_clone+0x37/0x50 [bridge]
      [<ffffffffa06d656c>] ? br_flood+0xcc/0x160 [bridge]
      [<ffffffffa06d7b14>] br_handle_frame_finish+0x224/0x4f0 [bridge]
      [<ffffffffa06d7f94>] br_handle_frame+0x174/0x300 [bridge]
      [<ffffffff815e3599>] __netif_receive_skb_core+0x329/0xab0
      [<ffffffff81374815>] ? find_next_bit+0x15/0x20
      [<ffffffff8135e802>] ? cpumask_next_and+0x32/0x50
      [<ffffffff810c9968>] ? load_balance+0x178/0x9b0
      [<ffffffff815e3d38>] __netif_receive_skb+0x18/0x60
      [<ffffffff815e3dc0>] netif_receive_skb_internal+0x40/0xb0
      [<ffffffff815e3e4c>] netif_receive_skb+0x1c/0x70
      [<ffffffffa01544a1>] mlxsw_sp_rx_listener_func+0x61/0xb0 [mlxsw_spectrum]
      [<ffffffffa005c9f7>] mlxsw_core_skb_receive+0x187/0x200 [mlxsw_core]
      [<ffffffffa007332a>] mlxsw_pci_cq_tasklet+0x63a/0x9b0 [mlxsw_pci]
      [<ffffffff81091986>] tasklet_action+0xf6/0x110
      [<ffffffff81704556>] __do_softirq+0xf6/0x280
      [<ffffffff8109213f>] irq_exit+0xdf/0xf0
      [<ffffffff817042b4>] do_IRQ+0x54/0xd0
      [<ffffffff8170214c>] common_interrupt+0x8c/0x8c
    
    The problem is that netdev_all_lower_get_next_rcu() never advances the
    iterator, thereby causing the loop over the lower adjacency list to run
    forever.
    
    Fix this by advancing the iterator and avoid the infinite loop.
    
    Fixes: 7ce856aaaf13 ("mlxsw: spectrum: Add couple of lower device helper functions")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Tamir Winetroub <tamirw@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc5722f8f8f26b4c0a2e21cab62ebdde51a493c3
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Oct 18 18:59:34 2016 +0200

    rtnetlink: Add rtnexthop offload flag to compare mask
    
    [ Upstream commit 85dda4e5b0ee1f5b4e8cc93d39e475006bc61ccd ]
    
    The offload flag is a status flag and should not be used by
    FIB semantics for comparison.
    
    Fixes: 37ed9493699c ("rtnetlink: add RTNH_F_EXTERNAL flag for fib offload")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Reviewed-by: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ac3ca8c29335a3e89f478da9e9ebd261eb3eb0f
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Tue Oct 18 18:50:23 2016 +0200

    switchdev: Execute bridge ndos only for bridge ports
    
    [ Upstream commit 97c242902c209e7d46e365335db5202634484dcb ]
    
    We recently got the following warning after setting up a vlan device on
    top of an offloaded bridge and executing 'bridge link':
    
    WARNING: CPU: 0 PID: 18566 at drivers/net/ethernet/mellanox/mlxsw/spectrum_switchdev.c:81 mlxsw_sp_port_orig_get.part.9+0x55/0x70 [mlxsw_spectrum]
    [...]
     CPU: 0 PID: 18566 Comm: bridge Not tainted 4.8.0-rc7 #1
     Hardware name: Mellanox Technologies Ltd. Mellanox switch/Mellanox switch, BIOS 4.6.5 05/21/2015
      0000000000000286 00000000e64ab94f ffff880406e6f8f0 ffffffff8135eaa3
      0000000000000000 0000000000000000 ffff880406e6f930 ffffffff8108c43b
      0000005106e6f988 ffff8803df398840 ffff880403c60108 ffff880406e6f990
     Call Trace:
      [<ffffffff8135eaa3>] dump_stack+0x63/0x90
      [<ffffffff8108c43b>] __warn+0xcb/0xf0
      [<ffffffff8108c56d>] warn_slowpath_null+0x1d/0x20
      [<ffffffffa01420d5>] mlxsw_sp_port_orig_get.part.9+0x55/0x70 [mlxsw_spectrum]
      [<ffffffffa0142195>] mlxsw_sp_port_attr_get+0xa5/0xb0 [mlxsw_spectrum]
      [<ffffffff816f151f>] switchdev_port_attr_get+0x4f/0x140
      [<ffffffff816f15d0>] switchdev_port_attr_get+0x100/0x140
      [<ffffffff816f15d0>] switchdev_port_attr_get+0x100/0x140
      [<ffffffff816f1d6b>] switchdev_port_bridge_getlink+0x5b/0xc0
      [<ffffffff816f2680>] ? switchdev_port_fdb_dump+0x90/0x90
      [<ffffffff815f5427>] rtnl_bridge_getlink+0xe7/0x190
      [<ffffffff8161a1b2>] netlink_dump+0x122/0x290
      [<ffffffff8161b0df>] __netlink_dump_start+0x15f/0x190
      [<ffffffff815f5340>] ? rtnl_bridge_dellink+0x230/0x230
      [<ffffffff815fab46>] rtnetlink_rcv_msg+0x1a6/0x220
      [<ffffffff81208118>] ? __kmalloc_node_track_caller+0x208/0x2c0
      [<ffffffff815f5340>] ? rtnl_bridge_dellink+0x230/0x230
      [<ffffffff815fa9a0>] ? rtnl_newlink+0x890/0x890
      [<ffffffff8161cf54>] netlink_rcv_skb+0xa4/0xc0
      [<ffffffff815f56f8>] rtnetlink_rcv+0x28/0x30
      [<ffffffff8161c92c>] netlink_unicast+0x18c/0x240
      [<ffffffff8161ccdb>] netlink_sendmsg+0x2fb/0x3a0
      [<ffffffff815c5a48>] sock_sendmsg+0x38/0x50
      [<ffffffff815c6031>] SYSC_sendto+0x101/0x190
      [<ffffffff815c7111>] ? __sys_recvmsg+0x51/0x90
      [<ffffffff815c6b6e>] SyS_sendto+0xe/0x10
      [<ffffffff817017f2>] entry_SYSCALL_64_fastpath+0x1a/0xa4
    
    The problem is that the 8021q module propagates the call to
    ndo_bridge_getlink() via switchdev ops, but the switch driver doesn't
    recognize the netdev, as it's not offloaded.
    
    While we can ignore calls being made to non-bridge ports inside the
    driver, a better fix would be to push this check up to the switchdev
    layer.
    
    Note that these ndos can be called for non-bridged netdev, but this only
    happens in certain PF drivers which don't call the corresponding
    switchdev functions anyway.
    
    Fixes: 99f44bb3527b ("mlxsw: spectrum: Enable L3 interfaces on top of bridge devices")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Tamir Winetroub <tamirw@mellanox.com>
    Tested-by: Tamir Winetroub <tamirw@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63d82a2cbd0c54cf2d03f50a183f2feeb1dcc221
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Tue Oct 18 18:09:48 2016 +0200

    bridge: multicast: restore perm router ports on multicast enable
    
    [ Upstream commit 7cb3f9214dfa443c1ccc2be637dcc6344cc203f0 ]
    
    Satish reported a problem with the perm multicast router ports not getting
    reenabled after some series of events, in particular if it happens that the
    multicast snooping has been disabled and the port goes to disabled state
    then it will be deleted from the router port list, but if it moves into
    non-disabled state it will not be re-added because the mcast snooping is
    still disabled, and enabling snooping later does nothing.
    
    Here are the steps to reproduce, setup br0 with snooping enabled and eth1
    added as a perm router (multicast_router = 2):
    1. $ echo 0 > /sys/class/net/br0/bridge/multicast_snooping
    2. $ ip l set eth1 down
    ^ This step deletes the interface from the router list
    3. $ ip l set eth1 up
    ^ This step does not add it again because mcast snooping is disabled
    4. $ echo 1 > /sys/class/net/br0/bridge/multicast_snooping
    5. $ bridge -d -s mdb show
    <empty>
    
    At this point we have mcast enabled and eth1 as a perm router (value = 2)
    but it is not in the router list which is incorrect.
    
    After this change:
    1. $ echo 0 > /sys/class/net/br0/bridge/multicast_snooping
    2. $ ip l set eth1 down
    ^ This step deletes the interface from the router list
    3. $ ip l set eth1 up
    ^ This step does not add it again because mcast snooping is disabled
    4. $ echo 1 > /sys/class/net/br0/bridge/multicast_snooping
    5. $ bridge -d -s mdb show
    router ports on br0: eth1
    
    Note: we can directly do br_multicast_enable_port for all because the
    querier timer already has checks for the port state and will simply
    expire if it's in blocking/disabled. See the comment added by
    commit 9aa66382163e7 ("bridge: multicast: add a comment to
    br_port_state_selection about blocking state")
    
    Fixes: 561f1103a2b7 ("bridge: Add multicast_snooping sysfs toggle")
    Reported-by: Satish Ashok <sashok@cumulusnetworks.com>
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9a5921c393f8e14cd8857a582e9a500601419d4
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Oct 15 17:50:49 2016 +0200

    net: pktgen: remove rcu locking in pktgen_change_name()
    
    [ Upstream commit 9a0b1e8ba4061778897b544afc898de2163382f7 ]
    
    After Jesper commit back in linux-3.18, we trigger a lockdep
    splat in proc_create_data() while allocating memory from
    pktgen_change_name().
    
    This patch converts t->if_lock to a mutex, since it is now only
    used from control path, and adds proper locking to pktgen_change_name()
    
    1) pktgen_thread_lock to protect the outer loop (iterating threads)
    2) t->if_lock to protect the inner loop (iterating devices)
    
    Note that before Jesper patch, pktgen_change_name() was lacking proper
    protection, but lockdep was not able to detect the problem.
    
    Fixes: 8788370a1d4b ("pktgen: RCU-ify "if_list" to remove lock in next_to_run()")
    Reported-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2eeb5735dd04b651f97c7aaef1ca480937423fc2
Author: Brenden Blanco <bblanco@plumgrid.com>
Date:   Thu Oct 13 13:13:11 2016 -0700

    net/mlx4_en: fixup xdp tx irq to match rx
    
    [ Upstream commit 958b3d396d7f80755e2c2e6a8f873a669f38de10 ]
    
    In cases where the number of tx rings is not a multiple of the number of
    rx rings, the tx completion event will be handled on a different core
    from the transmit and population of the ring. Races on the ring will
    lead to a double-free of the page, and possibly other corruption.
    
    The rings are initialized by default with a valid multiple of rings,
    based on the number of cpus, therefore an invalid configuration requires
    ethtool to change the ring layout. For instance 'ethtool -L eth0 rx 9 tx
    8' will cause packets received on rx0, and XDP_TX'd to tx48, to be
    completed on cpu3 (48 % 9 == 3).
    
    Resolve this discrepancy by shifting the irq for the xdp tx queues to
    start again from 0, modulo rx_ring_num.
    
    Fixes: 9ecc2d86171a ("net/mlx4_en: add xdp forwarding and data write support")
    Reported-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Brenden Blanco <bblanco@plumgrid.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27bb6e31d32d12cbfc8e56c198c86961e01d6da2
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Oct 13 18:26:56 2016 +0200

    IB/ipoib: move back IB LL address into the hard header
    
    [ Upstream commit fc791b6335152c5278dc4a4991bcb2d329f806f9 ]
    
    After the commit 9207f9d45b0a ("net: preserve IP control block
    during GSO segmentation"), the GSO CB and the IPoIB CB conflict.
    That destroy the IPoIB address information cached there,
    causing a severe performance regression, as better described here:
    
    http://marc.info/?l=linux-kernel&m=146787279825501&w=2
    
    This change moves the data cached by the IPoIB driver from the
    skb control lock into the IPoIB hard header, as done before
    the commit 936d7de3d736 ("IPoIB: Stop lying about hard_header_len
    and use skb->cb to stash LL addresses").
    In order to avoid GRO issue, on packet reception, the IPoIB driver
    stash into the skb a dummy pseudo header, so that the received
    packets have actually a hard header matching the declared length.
    To avoid changing the connected mode maximum mtu, the allocated
    head buffer size is increased by the pseudo header length.
    
    After this commit, IPoIB performances are back to pre-regression
    value.
    
    v2 -> v3: rebased
    v1 -> v2: avoid changing the max mtu, increasing the head buf size
    
    Fixes: 9207f9d45b0a ("net: preserve IP control block during GSO segmentation")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f280126ec8d8250fd742fc633dd22a40b38f3f70
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Wed Oct 12 10:10:40 2016 +0200

    ipv6: correctly add local routes when lo goes up
    
    [ Upstream commit a220445f9f4382c36a53d8ef3e08165fa27f7e2c ]
    
    The goal of the patch is to fix this scenario:
     ip link add dummy1 type dummy
     ip link set dummy1 up
     ip link set lo down ; ip link set lo up
    
    After that sequence, the local route to the link layer address of dummy1 is
    not there anymore.
    
    When the loopback is set down, all local routes are deleted by
    addrconf_ifdown()/rt6_ifdown(). At this time, the rt6_info entry still
    exists, because the corresponding idev has a reference on it. After the rcu
    grace period, dst_rcu_free() is called, and thus ___dst_free(), which will
    set obsolete to DST_OBSOLETE_DEAD.
    
    In this case, init_loopback() is called before dst_rcu_free(), thus
    obsolete is still sets to something <= 0. So, the function doesn't add the
    route again. To avoid that race, let's check the rt6 refcnt instead.
    
    Fixes: 25fb6ca4ed9c ("net IPv6 : Fix broken IPv6 routing table after loopback down-up")
    Fixes: a881ae1f625c ("ipv6: don't call addrconf_dst_alloc again when enable lo")
    Fixes: 33d99113b110 ("ipv6: reallocate addrconf router for ipv6 address when lo device up")
    Reported-by: Francesco Santoro <francesco.santoro@6wind.com>
    Reported-by: Samuel Gauthier <samuel.gauthier@6wind.com>
    CC: Balakumaran Kannan <Balakumaran.Kannan@ap.sony.com>
    CC: Maruthi Thotad <Maruthi.Thotad@ap.sony.com>
    CC: Sabrina Dubroca <sd@queasysnail.net>
    CC: Hannes Frederic Sowa <hannes@stressinduktion.org>
    CC: Weilong Chen <chenweilong@huawei.com>
    CC: Gao feng <gaofeng@cn.fujitsu.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f3e77623916113d8987c345079d7e519b01274f
Author: Vadim Fedorenko <junk@yandex-team.ru>
Date:   Tue Oct 11 22:47:20 2016 +0300

    ip6_tunnel: fix ip6_tnl_lookup
    
    [ Upstream commit 68d00f332e0ba7f60f212be74ede290c9f873bc5 ]
    
    The commit ea3dc9601bda ("ip6_tunnel: Add support for wildcard tunnel
    endpoints.") introduces support for wildcards in tunnels endpoints,
    but in some rare circumstances ip6_tnl_lookup selects wrong tunnel
    interface relying only on source or destination address of the packet
    and not checking presence of wildcard in tunnels endpoints. Later in
    ip6_tnl_rcv this packets can be dicarded because of difference in
    ipproto even if fallback device have proper ipproto configuration.
    
    This patch adds checks of wildcard endpoint in tunnel avoiding such
    behavior
    
    Fixes: ea3dc9601bda ("ip6_tunnel: Add support for wildcard tunnel endpoints.")
    Signed-off-by: Vadim Fedorenko <junk@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a148a818df84f90e6dcb09d36ded7a3ee56e1ebd
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed Oct 12 22:14:53 2016 +0200

    net: phy: Trigger state machine on state change and not polling.
    
    [ Upstream commit 3c293f4e08b58ad5b78f78d89ca1fd41f87f8729 ]
    
    The phy_start() is used to indicate the PHY is now ready to do its
    work. The state is changed, normally to PHY_UP which means that both
    the MAC and the PHY are ready.
    
    If the phy driver is using polling, when the next poll happens, the
    state machine notices the PHY is now in PHY_UP, and kicks off
    auto-negotiation, if needed.
    
    If however, the PHY is using interrupts, there is no polling. The phy
    is stuck in PHY_UP until the next interrupt comes along. And there is
    no reason for the PHY to interrupt.
    
    Have phy_start() schedule the state machine to run, which both speeds
    up the polling use case, and makes the interrupt use case actually
    work.
    
    This problems exists whenever there is a state change which will not
    cause an interrupt. Trigger the state machine in these cases,
    e.g. phy_error().
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Cc: Kyle Roeschley <kyle.roeschley@ni.com>
    Tested-by: Kyle Roeschley <kyle.roeschley@ni.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a9099899a6a082a69d9ff1771f6df0aab84ceb9
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 12 19:01:45 2016 +0200

    ipv6: tcp: restore IP6CB for pktoptions skbs
    
    [ Upstream commit 8ce48623f0cf3d632e32448411feddccb693d351 ]
    
    Baozeng Ding reported following KASAN splat :
    
    BUG: KASAN: use-after-free in ip6_datagram_recv_specific_ctl+0x13f1/0x15c0 at addr ffff880029c84ec8
    Read of size 1 by task poc/25548
    Call Trace:
     [<ffffffff82cf43c9>] dump_stack+0x12e/0x185 /lib/dump_stack.c:15
     [<     inline     >] print_address_description /mm/kasan/report.c:204
     [<ffffffff817ced3b>] kasan_report_error+0x48b/0x4b0 /mm/kasan/report.c:283
     [<     inline     >] kasan_report /mm/kasan/report.c:303
     [<ffffffff817ced9e>] __asan_report_load1_noabort+0x3e/0x40 /mm/kasan/report.c:321
     [<ffffffff85c71da1>] ip6_datagram_recv_specific_ctl+0x13f1/0x15c0 /net/ipv6/datagram.c:687
     [<ffffffff85c734c3>] ip6_datagram_recv_ctl+0x33/0x40
     [<ffffffff85c0b07c>] do_ipv6_getsockopt.isra.4+0xaec/0x2150
     [<ffffffff85c0c7f6>] ipv6_getsockopt+0x116/0x230
     [<ffffffff859b5a12>] tcp_getsockopt+0x82/0xd0 /net/ipv4/tcp.c:3035
     [<ffffffff855fb385>] sock_common_getsockopt+0x95/0xd0 /net/core/sock.c:2647
     [<     inline     >] SYSC_getsockopt /net/socket.c:1776
     [<ffffffff855f8ba2>] SyS_getsockopt+0x142/0x230 /net/socket.c:1758
     [<ffffffff8685cdc5>] entry_SYSCALL_64_fastpath+0x23/0xc6
    Memory state around the buggy address:
     ffff880029c84d80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff880029c84e00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    > ffff880029c84e80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                                                  ^
     ffff880029c84f00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff880029c84f80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    He also provided a syzkaller reproducer.
    
    Issue is that ip6_datagram_recv_specific_ctl() expects to find IP6CB
    data that was moved at a different place in tcp_v6_rcv()
    
    This patch moves tcp_v6_restore_cb() up and calls it from
    tcp_v6_do_rcv() when np->pktoptions is set.
    
    Fixes: 971f10eca186 ("tcp: better TCP_SKB_CB layout to reduce cache line misses")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50b43ad1dce67ac96e3955b57d370461ac34d6c1
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Oct 11 10:56:45 2016 -0700

    net_sched: reorder pernet ops and act ops registrations
    
    [ Upstream commit ab102b80cef28c20b3ef7794806c3a982c6444fc ]
    
    Krister reported a kernel NULL pointer dereference after
    tcf_action_init_1() invokes a_o->init(), it is a race condition
    where one thread calling tcf_register_action() to initialize
    the netns data after putting act ops in the global list and
    the other thread searching the list and then calling
    a_o->init(net, ...).
    
    Fix this by moving the pernet ops registration before making
    the action ops visible. This is fine because: a) we don't
    rely on act_base in pernet ops->init(), b) in the worst case we
    have a fully initialized netns but ops is still not ready so
    new actions still can't be created.
    
    Reported-by: Krister Johansen <kjlx@templeofstupid.com>
    Tested-by: Krister Johansen <kjlx@templeofstupid.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dac04913ee27c921c97723cf4c6bd2bd277d6220
Author: Vlad Tsyrklevich <vlad@tsyrklevich.net>
Date:   Tue Oct 11 15:02:47 2016 +0200

    drivers/ptp: Fix kernel memory disclosure
    
    [ Upstream commit 02a9079c66341836c4914c33c06a73245060df2e ]
    
    The reserved field precise_offset->rsv is not cleared before being
    copied to user space, leaking kernel stack memory. Clear the struct
    before it's copied.
    
    Signed-off-by: Vlad Tsyrklevich <vlad@tsyrklevich.net>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f841d1555ad1f0075bfa6603842ff61d62dd28a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 6 04:13:18 2016 +0900

    netlink: do not enter direct reclaim from netlink_dump()
    
    [ Upstream commit d35c99ff77ecb2eb239731b799386f3b3637a31e ]
    
    Since linux-3.15, netlink_dump() can use up to 16384 bytes skb
    allocations.
    
    Due to struct skb_shared_info ~320 bytes overhead, we end up using
    order-3 (on x86) page allocations, that might trigger direct reclaim and
    add stress.
    
    The intent was really to attempt a large allocation but immediately
    fallback to a smaller one (order-1 on x86) in case of memory stress.
    
    On recent kernels (linux-4.4), we can remove __GFP_DIRECT_RECLAIM to
    meet the goal. Old kernels would need to remove __GFP_WAIT
    
    While we are at it, since we do an order-3 allocation, allow to use
    all the allocated bytes instead of 16384 to reduce syscalls during
    large dumps.
    
    iproute2 already uses 32KB recvmsg() buffer sizes.
    
    Alexei provided an initial patch downsizing to SKB_WITH_OVERHEAD(16384)
    
    Fixes: 9063e21fb026 ("netlink: autosize skb lengthes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Greg Thelen <gthelen@google.com>
    Reviewed-by: Greg Rose <grose@lightfleet.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5086cadf8fa45e88d26be2e27e6c17d08608e944
Author: Anoob Soman <anoob.soman@citrix.com>
Date:   Wed Oct 5 15:12:54 2016 +0100

    packet: call fanout_release, while UNREGISTERING a netdev
    
    [ Upstream commit 6664498280cf17a59c3e7cf1a931444c02633ed1 ]
    
    If a socket has FANOUT sockopt set, a new proto_hook is registered
    as part of fanout_add(). When processing a NETDEV_UNREGISTER event in
    af_packet, __fanout_unlink is called for all sockets, but prot_hook which was
    registered as part of fanout_add is not removed. Call fanout_release, on a
    NETDEV_UNREGISTER, which removes prot_hook and removes fanout from the
    fanout_list.
    
    This fixes BUG_ON(!list_empty(&dev->ptype_specific)) in netdev_run_todo()
    
    Signed-off-by: Anoob Soman <anoob.soman@citrix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fff1319fdacc7bde041920e31bddd0d77db2342
Author: Andrew Collins <acollins@cradlepoint.com>
Date:   Mon Oct 3 13:43:02 2016 -0600

    net: Add netdev all_adj_list refcnt propagation to fix panic
    
    [ Upstream commit 93409033ae653f1c9a949202fb537ab095b2092f ]
    
    This is a respin of a patch to fix a relatively easily reproducible kernel
    panic related to the all_adj_list handling for netdevs in recent kernels.
    
    The following sequence of commands will reproduce the issue:
    
    ip link add link eth0 name eth0.100 type vlan id 100
    ip link add link eth0 name eth0.200 type vlan id 200
    ip link add name testbr type bridge
    ip link set eth0.100 master testbr
    ip link set eth0.200 master testbr
    ip link add link testbr mac0 type macvlan
    ip link delete dev testbr
    
    This creates an upper/lower tree of (excuse the poor ASCII art):
    
                /---eth0.100-eth0
    mac0-testbr-
                \---eth0.200-eth0
    
    When testbr is deleted, the all_adj_lists are walked, and eth0 is deleted twice from
    the mac0 list. Unfortunately, during setup in __netdev_upper_dev_link, only one
    reference to eth0 is added, so this results in a panic.
    
    This change adds reference count propagation so things are handled properly.
    
    Matthias Schiffer reported a similar crash in batman-adv:
    
    https://github.com/freifunk-gluon/gluon/issues/680
    https://www.open-mesh.org/issues/247
    
    which this patch also seems to resolve.
    
    Signed-off-by: Andrew Collins <acollins@cradlepoint.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9caee42c800e21aa0510aaca894c59bf4b306258
Author: Shmulik Ladkani <shmulik.ladkani@gmail.com>
Date:   Thu Sep 29 12:10:40 2016 +0300

    net/sched: act_vlan: Push skb->data to mac_header prior calling skb_vlan_*() functions
    
    [ Upstream commit f39acc84aad10710e89835c60d3b6694c43a8dd9 ]
    
    Generic skb_vlan_push/skb_vlan_pop functions don't properly handle the
    case where the input skb data pointer does not point at the mac header:
    
    - They're doing push/pop, but fail to properly unwind data back to its
      original location.
      For example, in the skb_vlan_push case, any subsequent
      'skb_push(skb, skb->mac_len)' calls make the skb->data point 4 bytes
      BEFORE start of frame, leading to bogus frames that may be transmitted.
    
    - They update rcsum per the added/removed 4 bytes tag.
      Alas if data is originally after the vlan/eth headers, then these
      bytes were already pulled out of the csum.
    
    OTOH calling skb_vlan_push/skb_vlan_pop with skb->data at mac_header
    present no issues.
    
    act_vlan is the only caller to skb_vlan_*() that has skb->data pointing
    at network header (upon ingress).
    Other calles (ovs, bpf) already adjust skb->data at mac_header.
    
    This patch fixes act_vlan to point to the mac_header prior calling
    skb_vlan_*() functions, as other callers do.
    
    Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Pravin Shelar <pshelar@ovn.org>
    Cc: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c002dfd8adaadbbf36dfa2dacf00dbf178f02a46
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri Sep 30 16:56:45 2016 +0200

    net: pktgen: fix pkt_size
    
    [ Upstream commit 63d75463c91a5b5be7c0aca11ceb45ea5a0ae81d ]
    
    The commit 879c7220e828 ("net: pktgen: Observe needed_headroom
    of the device") increased the 'pkt_overhead' field value by
    LL_RESERVED_SPACE.
    As a side effect the generated packet size, computed as:
    
            /* Eth + IPh + UDPh + mpls */
            datalen = pkt_dev->cur_pkt_size - 14 - 20 - 8 -
                      pkt_dev->pkt_overhead;
    
    is decreased by the same value.
    The above changed slightly the behavior of existing pktgen users,
    and made the procfs interface somewhat inconsistent.
    Fix it by restoring the previous pkt_overhead value and using
    LL_RESERVED_SPACE as extralen in skb allocation.
    Also, change pktgen_alloc_skb() to only partially reserve
    the headroom to allow the caller to prefetch from ll header
    start.
    
    v1 -> v2:
     - fixed some typos in the comments
    
    Fixes: 879c7220e828 ("net: pktgen: Observe needed_headroom of the device")
    Suggested-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff1b27c3170620fe38f570f7766ed8f0cfe8ec83
Author: Gavin Schenk <g.schenk@eckelmann.de>
Date:   Fri Sep 30 11:46:10 2016 +0200

    net: fec: set mac address unconditionally
    
    [ Upstream commit b82d44d78480faff7456e9e0999acb9d38666057 ]
    
    If the mac address origin is not dt, you can only safely assign a mac
    address after "link up" of the device. If the link is off the clocks are
    disabled and because of issues assigning registers when clocks are off the
    new mac address cannot be written in .ndo_set_mac_address() on some soc's.
    This fix sets the mac address unconditionally in fec_restart(...) and
    ensures consistency between fec registers and the network layer.
    
    Signed-off-by: Gavin Schenk <g.schenk@eckelmann.de>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Fixes: 9638d19e4816 ("net: fec: add netif status check before set mac address")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
