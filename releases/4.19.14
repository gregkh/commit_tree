commit f630d3cc771e845af8ab9ac7a68746596ea0ec7c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 9 17:38:50 2019 +0100

    Linux 4.19.14

commit a4a929aa46b428f462d7308f1105f42b140ecc6b
Author: Paul Burton <paulburton@kernel.org>
Date:   Wed Nov 21 19:47:57 2018 -0800

    MIPS: Only include mmzone.h when CONFIG_NEED_MULTIPLE_NODES=y
    
    commit 66a4059ba72c23ae74a7c702894ff76c4b7eac1f upstream.
    
    MIPS' asm/mmzone.h includes the machine/platform mmzone.h
    unconditionally, but since commit bb53fdf395ee ("MIPS: c-r4k: Add
    r4k_blast_scache_node for Loongson-3") is included by asm/rk4cache.h for
    all r4k-style configs regardless of CONFIG_NEED_MULTIPLE_NODES.
    
    This is problematic when CONFIG_NEED_MULTIPLE_NODES=n because both the
    loongson3 & ip27 mmzone.h headers unconditionally define the NODE_DATA
    preprocessor macro which is aready defined by linux/mmzone.h, resulting
    in the following build error:
    
      In file included from ./arch/mips/include/asm/mmzone.h:10,
                       from ./arch/mips/include/asm/r4kcache.h:23,
                       from arch/mips/mm/c-r4k.c:33:
      ./arch/mips/include/asm/mach-loongson64/mmzone.h:48: error: "NODE_DATA" redefined [-Werror]
       #define NODE_DATA(n)  (&__node_data[(n)]->pglist)
    
      In file included from ./include/linux/topology.h:32,
                       from ./include/linux/irq.h:19,
                       from ./include/asm-generic/hardirq.h:13,
                       from ./arch/mips/include/asm/hardirq.h:16,
                       from ./include/linux/hardirq.h:9,
                       from arch/mips/mm/c-r4k.c:11:
      ./include/linux/mmzone.h:907: note: this is the location of the previous definition
       #define NODE_DATA(nid)  (&contig_page_data)
    
    Resolve this by only including the machine mmzone.h when
    CONFIG_NEED_MULTIPLE_NODES=y, which also removes the need for the empty
    mach-generic version of the header which we delete.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: bb53fdf395ee ("MIPS: c-r4k: Add r4k_blast_scache_node for Loongson-3")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit feb0be15ee8b70c0f819a5010652705109b1e128
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Nov 29 15:14:49 2018 +0100

    spi: bcm2835: Unbreak the build of esoteric configs
    
    commit 29bdedfd9cf40e59456110ca417a8cb672ac9b92 upstream.
    
    Commit e82b0b382845 ("spi: bcm2835: Fix race on DMA termination") broke
    the build with COMPILE_TEST=y on arches whose cmpxchg() requires 32-bit
    operands (xtensa, older arm ISAs).
    
    Fix by changing the dma_pending flag's type from bool to unsigned int.
    
    Fixes: e82b0b382845 ("spi: bcm2835: Fix race on DMA termination")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: Frank Pavlic <f.pavlic@kunbus.de>
    Cc: Martin Sperl <kernel@martin.sperl.org>
    Cc: Noralf Tr√∏nnes <noralf@tronnes.org>
    Cc: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62977aad0a521b1b4491873b14d10c29cdafe800
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Fri Oct 19 21:22:47 2018 +0300

    tpm: tpm_i2c_nuvoton: use correct command duration for TPM 2.x
    
    commit 2ba5780ce30549cf57929b01d8cba6fe656e31c5 upstream.
    
    tpm_i2c_nuvoton calculated commands duration using TPM 1.x
    values via tpm_calc_ordinal_duration() also for TPM 2.x chips.
    Call tpm2_calc_ordinal_duration() for retrieving ordinal
    duration for TPM 2.X chips.
    
    Cc: stable@vger.kernel.org
    Cc: Nayna Jain <nayna@linux.vnet.ibm.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Reviewed-by: Nayna Jain <nayna@linux.ibm.com>
    Tested-by: Nayna Jain <nayna@linux.ibm.com> (For TPM 2.0)
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f4a7b1badcfb5ef60ab0828c7b29c8487f397e9
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Tue Oct 16 16:37:16 2018 +0300

    tpm: tpm_try_transmit() refactor error flow.
    
    commit 01f54664a4db0d612de0ece8e0022f21f9374e9b upstream.
    
    First, rename out_no_locality to out_locality for bailing out on
    both tpm_cmd_ready() and tpm_request_locality() failure.
    Second, ignore the return value of go_to_idle() as  it may override
    the return value of the actual tpm operation, the go_to_idle() error
    will be caught on any consequent command.
    Last, fix the wrong 'goto out', that jumped back instead of forward.
    
    Cc: stable@vger.kernel.org
    Fixes: 627448e85c76 ("tpm: separate cmd_ready/go_idle from runtime_pm")
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 920735c63d8a44c664f0967721a0081f60d37fb0
Author: Will Deacon <will@kernel.org>
Date:   Thu Jan 3 17:45:07 2019 +0000

    arm64: compat: Avoid sending SIGILL for unallocated syscall numbers
    
    commit 169113ece0f29ebe884a6cfcf57c1ace04d8a36a upstream.
    
    The ARM Linux kernel handles the EABI syscall numbers as follows:
    
      0           - NR_SYSCALLS-1   : Invoke syscall via syscall table
      NR_SYSCALLS - 0xeffff         : -ENOSYS (to be allocated in future)
      0xf0000     - 0xf07ff         : Private syscall or -ENOSYS if not allocated
      > 0xf07ff                     : SIGILL
    
    Our compat code gets this wrong and ends up sending SIGILL in response
    to all syscalls greater than NR_SYSCALLS which have a value greater
    than 0x7ff in the bottom 16 bits.
    
    Fix this by defining the end of the ARM private syscall region and
    checking the syscall number against that directly. Update the comment
    while we're at it.
    
    Cc: <stable@vger.kernel.org>
    Cc: Dave Martin <Dave.Martin@arm.com>
    Reported-by: Pi-Hsun Shih <pihsun@chromium.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1817b2ccbd11cbbe64a3d38972ef924d9334d912
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Wed Oct 17 21:32:58 2018 +0100

    iommu/arm-smmu-v3: Fix big-endian CMD_SYNC writes
    
    commit 3cd508a8c1379427afb5e16c2e0a7c986d907853 upstream.
    
    When we insert the sync sequence number into the CMD_SYNC.MSIData field,
    we do so in CPU-native byte order, before writing out the whole command
    as explicitly little-endian dwords. Thus on big-endian systems, the SMMU
    will receive and write back a byteswapped version of sync_nr, which would
    be perfect if it were targeting a similarly-little-endian ITS, but since
    it's actually writing back to memory being polled by the CPUs, they're
    going to end up seeing the wrong thing.
    
    Since the SMMU doesn't care what the MSIData actually contains, the
    minimal-overhead solution is to simply add an extra byteswap initially,
    such that it then writes back the big-endian format directly.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 37de98f8f1cf ("iommu/arm-smmu-v3: Use CMD_SYNC completion MSI")
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f318d0cf26b15870af4d10321e2db3426d15f04e
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Dec 12 14:11:23 2018 -0600

    KVM: arm/arm64: vgic: Fix off-by-one bug in vgic_get_irq()
    
    commit c23b2e6fc4ca346018618266bcabd335c0a8a49e upstream.
    
    When using the nospec API, it should be taken into account that:
    
    "...if the CPU speculates past the bounds check then
     * array_index_nospec() will clamp the index within the range of [0,
     * size)."
    
    The above is part of the header for macro array_index_nospec() in
    linux/nospec.h
    
    Now, in this particular case, if intid evaluates to exactly VGIC_MAX_SPI
    or to exaclty VGIC_MAX_PRIVATE, the array_index_nospec() macro ends up
    returning VGIC_MAX_SPI - 1 or VGIC_MAX_PRIVATE - 1 respectively, instead
    of VGIC_MAX_SPI or VGIC_MAX_PRIVATE, which, based on the original logic:
    
            /* SGIs and PPIs */
            if (intid <= VGIC_MAX_PRIVATE)
                    return &vcpu->arch.vgic_cpu.private_irqs[intid];
    
            /* SPIs */
            if (intid <= VGIC_MAX_SPI)
                    return &kvm->arch.vgic.spis[intid - VGIC_NR_PRIVATE_IRQS];
    
    are valid values for intid.
    
    Fix this by calling array_index_nospec() macro with VGIC_MAX_PRIVATE + 1
    and VGIC_MAX_SPI + 1 as arguments for its parameter size.
    
    Fixes: 41b87599c743 ("KVM: arm/arm64: vgic: fix possible spectre-v1 in vgic_get_irq()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    [dropped the SPI part which was fixed separately]
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47ffaa7decc5ed224efe1da57e6d98fa451a8058
Author: Christoffer Dall <christoffer.dall@arm.com>
Date:   Tue Dec 11 12:51:03 2018 +0100

    KVM: arm/arm64: vgic-v2: Set active_source to 0 when restoring state
    
    commit 60c3ab30d8c2ff3a52606df03f05af2aae07dc6b upstream.
    
    When restoring the active state from userspace, we don't know which CPU
    was the source for the active state, and this is not architecturally
    exposed in any of the register state.
    
    Set the active_source to 0 in this case.  In the future, we can expand
    on this and exposse the information as additional information to
    userspace for GICv2 if anyone cares.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6318b1b7c90cf60e2a64918734201edcc0e22b3e
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Dec 4 17:11:19 2018 +0000

    KVM: arm/arm64: vgic: Cap SPIs to the VM-defined maximum
    
    commit bea2ef803ade3359026d5d357348842bca9edcf1 upstream.
    
    SPIs should be checked against the VMs specific configuration, and
    not the architectural maximum.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0fcc4d17cf46911c9609e1fc5af518864f96220
Author: Julien Thierry <julien.thierry.kdev@gmail.com>
Date:   Mon Nov 26 18:26:44 2018 +0000

    KVM: arm/arm64: vgic: Do not cond_resched_lock() with IRQs disabled
    
    commit 2e2f6c3c0b08eed3fcf7de3c7684c940451bdeb1 upstream.
    
    To change the active state of an MMIO, halt is requested for all vcpus of
    the affected guest before modifying the IRQ state. This is done by calling
    cond_resched_lock() in vgic_mmio_change_active(). However interrupts are
    disabled at this point and we cannot reschedule a vcpu.
    
    We actually don't need any of this, as kvm_arm_halt_guest ensures that
    all the other vcpus are out of the guest. Let's just drop that useless
    code.
    
    Signed-off-by: Julien Thierry <julien.thierry@arm.com>
    Suggested-by: Christoffer Dall <christoffer.dall@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce866af60e907fe9df4edcaca94e8ff74fac284f
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Wed Nov 7 02:39:13 2018 +0000

    rtc: m41t80: Correct alarm month range with RTC reads
    
    commit 3cc9ffbb1f51eb4320575a48e4805a8f52e0e26b upstream.
    
    Add the missing adjustment of the month range on alarm reads from the
    RTC, correcting an issue coming from commit 9c6dfed92c3e ("rtc: m41t80:
    add alarm functionality").  The range is 1-12 for hardware and 0-11 for
    `struct rtc_time', and is already correctly handled on alarm writes to
    the RTC.
    
    It was correct up until commit 48e9766726eb ("drivers/rtc/rtc-m41t80.c:
    remove disabled alarm functionality") too, which removed the previous
    implementation of alarm support.
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Fixes: 9c6dfed92c3e ("rtc: m41t80: add alarm functionality")
    References: 48e9766726eb ("drivers/rtc/rtc-m41t80.c: remove disabled alarm functionality")
    Cc: stable@vger.kernel.org # 4.7+
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit badd5690661b3fdee9e73863900ea082ad428078
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Wed Dec 12 18:57:44 2018 +0100

    ARM: dts: exynos: Specify I2S assigned clocks in proper node
    
    commit 8ac686d7dfed721102860ff2571e6b9f529ae81a upstream.
    
    The assigned parent clocks should be normally specified in the consumer
    device's DT node, this ensures respective driver always sees correct clock
    settings when required.
    
    This patch fixes regression in audio subsystem on Odroid XU3/XU4 boards
    that appeared after commits:
    
    commit 647d04f8e07a ("ASoC: samsung: i2s: Ensure the RCLK rate is properly determined")
    commit 995e73e55f46 ("ASoC: samsung: i2s: Fix rclk_srcrate handling")
    commit 48279c53fd1d ("ASoC: samsung: i2s: Prevent external abort on exynos5433 I2S1 access")
    
    Without this patch the driver gets wrong clock as the I2S function clock
    (op_clk) in probe() and effectively the clock which is finally assigned
    from DT is not being enabled/disabled in the runtime resume/suspend ops.
    
    Without the above listed commits the EXYNOS_I2S_BUS clock was always set
    as parent of CLK_I2S_RCLK_SRC regardless of DT settings so there was no issue
    with not enabled EXYNOS_SCLK_I2S.
    
    Cc: <stable@vger.kernel.org> # 4.17.x
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fa68518047b3e4e44389dc7ce8449e676a24e15
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Dec 18 14:59:09 2018 +0000

    arm/arm64: KVM: vgic: Force VM halt when changing the active state of GICv3 PPIs/SGIs
    
    commit 107352a24900fb458152b92a4e72fbdc83fd5510 upstream.
    
    We currently only halt the guest when a vCPU messes with the active
    state of an SPI. This is perfectly fine for GICv2, but isn't enough
    for GICv3, where all vCPUs can access the state of any other vCPU.
    
    Let's broaden the condition to include any GICv3 interrupt that
    has an active state (i.e. all but LPIs).
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ec9ea679c96fcd3767c39d7943e45e51797fa85
Author: Will Deacon <will@kernel.org>
Date:   Thu Dec 13 16:06:14 2018 +0000

    arm64: KVM: Avoid setting the upper 32 bits of VTCR_EL2 to 1
    
    commit df655b75c43fba0f2621680ab261083297fd6d16 upstream.
    
    Although bit 31 of VTCR_EL2 is RES1, we inadvertently end up setting all
    of the upper 32 bits to 1 as well because we define VTCR_EL2_RES1 as
    signed, which is sign-extended when assigning to kvm->arch.vtcr.
    
    Lucky for us, the architecture currently treats these upper bits as RES0
    so, whilst we've been naughty, we haven't set fire to anything yet.
    
    Cc: <stable@vger.kernel.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba77e8c7f7044394c213e1221e630943c3379a6b
Author: Paul Aurich <paul@darkrain42.org>
Date:   Mon Dec 31 14:13:34 2018 -0800

    smb3: fix large reads on encrypted connections
    
    commit 6d2f84eee098540ae857998fe32f29b9e2cd9613 upstream.
    
    When passing a large read to receive_encrypted_read(), ensure that the
    demultiplex_thread knows that a MID was processed.  Without this, those
    operations never complete.
    
    This is a similar issue/fix to lease break handling:
    commit 7af929d6d05ba5564139718e30d5bc96bdbc716a
    ("smb3: fix lease break problem introduced by compounding")
    
    CC: Stable <stable@vger.kernel.org> # 4.19+
    Fixes: b24df3e30cbf ("cifs: update receive_encrypted_standard to handle compounded responses")
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    Tested-by: Yves-Alexis Perez <corsac@corsac.net>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1827d1c439bc7e0e7e1341aabd7e0ca6b6e194f6
Author: Georgy A Bystrenin <gkot@altlinux.org>
Date:   Fri Dec 21 00:11:42 2018 -0600

    CIFS: Fix error mapping for SMB2_LOCK command which caused OFD lock problem
    
    commit 9a596f5b39593414c0ec80f71b94a226286f084e upstream.
    
    While resolving a bug with locks on samba shares found a strange behavior.
    When a file locked by one node and we trying to lock it from another node
    it fail with errno 5 (EIO) but in that case errno must be set to
    (EACCES | EAGAIN).
    This isn't happening when we try to lock file second time on same node.
    In this case it returns EACCES as expected.
    Also this issue not reproduces when we use SMB1 protocol (vers=1.0 in
    mount options).
    
    Further investigation showed that the mapping from status_to_posix_error
    is different for SMB1 and SMB2+ implementations.
    For SMB1 mapping is [NT_STATUS_LOCK_NOT_GRANTED to ERRlock]
    (See fs/cifs/netmisc.c line 66)
    but for SMB2+ mapping is [STATUS_LOCK_NOT_GRANTED to -EIO]
    (see fs/cifs/smb2maperror.c line 383)
    
    Quick changes in SMB2+ mapping from EIO to EACCES has fixed issue.
    
    BUG: https://bugzilla.kernel.org/show_bug.cgi?id=201971
    
    Signed-off-by: Georgy A Bystrenin <gkot@altlinux.org>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db825a79e07a76f84df139da3c7d44949f21604d
Author: Huacai Chen <chenhc@lemote.com>
Date:   Tue Dec 25 08:51:01 2018 +0800

    MIPS: Fix a R10000_LLSC_WAR logic in atomic.h
    
    commit db1ce3f5d01d2d6d5714aefba0159d2cb5167a0b upstream.
    
    Commit 4936084c2ee2 ("MIPS: Cleanup R10000_LLSC_WAR logic in atomic.h")
    introduce a mistake in atomic64_fetch_##op##_relaxed(), because it
    forget to delete R10000_LLSC_WAR in the if-condition. So fix it.
    
    Fixes: 4936084c2ee2 ("MIPS: Cleanup R10000_LLSC_WAR logic in atomic.h")
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Joshua Kinard <kumba@gentoo.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Steven J . Hill <Steven.Hill@cavium.com>
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34c512d883b32c2f74c4407b9819a9a9d5bcea4a
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Wed Jan 2 20:43:01 2019 +0200

    MIPS: OCTEON: mark RGMII interface disabled on OCTEON III
    
    commit edefae94b7b9f10d5efe32dece5a36e9d9ecc29e upstream.
    
    Commit 885872b722b7 ("MIPS: Octeon: Add Octeon III CN7xxx
    interface detection") added RGMII interface detection for OCTEON III,
    but it results in the following logs:
    
    [    7.165984] ERROR: Unsupported Octeon model in __cvmx_helper_rgmii_probe
    [    7.173017] ERROR: Unsupported Octeon model in __cvmx_helper_rgmii_probe
    
    The current RGMII routines are valid only for older OCTEONS that
    use GMX/ASX hardware blocks. On later chips AGL should be used,
    but support for that is missing in the mainline. Until that is added,
    mark the interface as disabled.
    
    Fixes: 885872b722b7 ("MIPS: Octeon: Add Octeon III CN7xxx interface detection")
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # 4.7+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb38b12e0b2bcd6c6a55e4ae7f085a8db27d1486
Author: Paul Burton <paulburton@kernel.org>
Date:   Tue Dec 4 23:44:12 2018 +0000

    MIPS: Expand MIPS32 ASIDs to 64 bits
    
    commit ff4dd232ec45a0e45ea69f28f069f2ab22b4908a upstream.
    
    ASIDs have always been stored as unsigned longs, ie. 32 bits on MIPS32
    kernels. This is problematic because it is feasible for the ASID version
    to overflow & wrap around to zero.
    
    We currently attempt to handle this overflow by simply setting the ASID
    version to 1, using asid_first_version(), but we make no attempt to
    account for the fact that there may be mm_structs with stale ASIDs that
    have versions which we now reuse due to the overflow & wrap around.
    
    Encountering this requires that:
    
      1) A struct mm_struct X is active on CPU A using ASID (V,n).
    
      2) That mm is not used on CPU A for the length of time that it takes
         for CPU A's asid_cache to overflow & wrap around to the same
         version V that the mm had in step 1. During this time tasks using
         the mm could either be sleeping or only scheduled on other CPUs.
    
      3) Some other mm Y becomes active on CPU A and is allocated the same
         ASID (V,n).
    
      4) mm X now becomes active on CPU A again, and now incorrectly has the
         same ASID as mm Y.
    
    Where struct mm_struct ASIDs are represented above in the format
    (version, EntryHi.ASID), and on a typical MIPS32 system version will be
    24 bits wide & EntryHi.ASID will be 8 bits wide.
    
    The length of time required in step 2 is highly dependent upon the CPU &
    workload, but for a hypothetical 2GHz CPU running a workload which
    generates a new ASID every 10000 cycles this period is around 248 days.
    Due to this long period of time & the fact that tasks need to be
    scheduled in just the right (or wrong, depending upon your inclination)
    way, this is obviously a difficult bug to encounter but it's entirely
    possible as evidenced by reports.
    
    In order to fix this, simply extend ASIDs to 64 bits even on MIPS32
    builds. This will extend the period of time required for the
    hypothetical system above to encounter the problem from 28 days to
    around 3 trillion years, which feels safely outside of the realms of
    possibility.
    
    The cost of this is slightly more generated code in some commonly
    executed paths, but this is pretty minimal:
    
                             | Code Size Gain | Percentage
      -----------------------|----------------|-------------
        decstation_defconfig |           +270 | +0.00%
            32r2el_defconfig |           +652 | +0.01%
            32r6el_defconfig |          +1000 | +0.01%
    
    I have been unable to measure any change in performance of the LMbench
    lat_ctx or lat_proc tests resulting from the 64b ASIDs on either
    32r2el_defconfig+interAptiv or 32r6el_defconfig+I6500 systems.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Suggested-by: James Hogan <jhogan@kernel.org>
    References: https://lore.kernel.org/linux-mips/80B78A8B8FEE6145A87579E8435D78C30205D5F3@fzex.ruijie.com.cn/
    References: https://lore.kernel.org/linux-mips/1488684260-18867-1-git-send-email-jiwei.sun@windriver.com/
    Cc: Jiwei Sun <jiwei.sun@windriver.com>
    Cc: Yu Huabing <yhb@ruijie.com.cn>
    Cc: stable@vger.kernel.org # 2.6.12+
    Cc: linux-mips@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88c61f5cb67d8132725d5fa0adb730f2bbe07f84
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Nov 15 15:53:56 2018 +0800

    MIPS: Align kernel load address to 64KB
    
    commit bec0de4cfad21bd284dbddee016ed1767a5d2823 upstream.
    
    KEXEC needs the new kernel's load address to be aligned on a page
    boundary (see sanity_check_segment_list()), but on MIPS the default
    vmlinuz load address is only explicitly aligned to 16 bytes.
    
    Since the largest PAGE_SIZE supported by MIPS kernels is 64KB, increase
    the alignment calculated by calc_vmlinuz_load_addr to 64KB.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/21131/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <james.hogan@mips.com>
    Cc: Steven J . Hill <Steven.Hill@cavium.com>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: <stable@vger.kernel.org> # 2.6.36+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76a9f7b4be2843b420ee17c9e27139e56078ffe4
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Nov 15 15:53:54 2018 +0800

    MIPS: Ensure pmd_present() returns false after pmd_mknotpresent()
    
    commit 92aa0718c9fa5160ad2f0e7b5bffb52f1ea1e51a upstream.
    
    This patch is borrowed from ARM64 to ensure pmd_present() returns false
    after pmd_mknotpresent(). This is needed for THP.
    
    References: 5bb1cc0ff9a6 ("arm64: Ensure pmd_present() returns false after pmd_mknotpresent()")
    Reviewed-by: James Hogan <jhogan@kernel.org>
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/21135/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <james.hogan@mips.com>
    Cc: Steven J . Hill <Steven.Hill@cavium.com>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: <stable@vger.kernel.org> # 3.8+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8ae2ae2aae55daab37cdfdd414108870f3d4fb3
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Nov 15 15:53:53 2018 +0800

    MIPS: c-r4k: Add r4k_blast_scache_node for Loongson-3
    
    commit bb53fdf395eed103f85061bfff3b116cee123895 upstream.
    
    For multi-node Loongson-3 (NUMA configuration), r4k_blast_scache() can
    only flush Node-0's scache. So we add r4k_blast_scache_node() by using
    (CAC_BASE | (node_id << NODE_ADDRSPACE_SHIFT)) instead of CKSEG0 as the
    start address.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    [paul.burton@mips.com: Include asm/mmzone.h from asm/r4kcache.h for
                           nid_to_addrbase(). Add asm/mach-generic/mmzone.h
                           to allow inclusion for all platforms.]
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/21129/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <james.hogan@mips.com>
    Cc: Steven J . Hill <Steven.Hill@cavium.com>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: <stable@vger.kernel.org> # 3.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62452b3511952ba8dfea771b5bf344491acee466
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Dec 20 17:45:43 2018 +0000

    MIPS: math-emu: Write-protect delay slot emulation pages
    
    commit adcc81f148d733b7e8e641300c5590a2cdc13bf3 upstream.
    
    Mapping the delay slot emulation page as both writeable & executable
    presents a security risk, in that if an exploit can write to & jump into
    the page then it can be used as an easy way to execute arbitrary code.
    
    Prevent this by mapping the page read-only for userland, and using
    access_process_vm() with the FOLL_FORCE flag to write to it from
    mips_dsemul().
    
    This will likely be less efficient due to copy_to_user_page() performing
    cache maintenance on a whole page, rather than a single line as in the
    previous use of flush_cache_sigtramp(). However this delay slot
    emulation code ought not to be running in any performance critical paths
    anyway so this isn't really a problem, and we can probably do better in
    copy_to_user_page() anyway in future.
    
    A major advantage of this approach is that the fix is small & simple to
    backport to stable kernels.
    
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 432c6bacbd0c ("MIPS: Use per-mm page to execute branch delay slot instructions")
    Cc: stable@vger.kernel.org # v4.8+
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Rich Felker <dalias@libc.org>
    Cc: David Daney <david.daney@cavium.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d642e0b630b0ab681362f46f27fc77a1f51a213e
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Dec 10 13:45:22 2018 -0500

    tools lib traceevent: Fix processing of dereferenced args in bprintk events
    
    commit f024cf085c423bac7512479f45c34ee9a24af7ce upstream.
    
    In the case that a bprintk event has a dereferenced pointer that is
    stored as a string, and there's more values to process (more args), the
    arg was not updated to point to the next arg after processing the
    dereferenced pointer, and it screwed up what was to be displayed.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: linux-trace-devel@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: 37db96bb49629 ("tools lib traceevent: Handle new pointer processing of bprint strings")
    Link: http://lkml.kernel.org/r/20181210134522.3f71e2ca@gandalf.local.home
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47af3cecd561eaea1084d3768759c14fb8be43eb
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Nov 8 11:12:47 2018 -0500

    media: v4l2-tpg: array index could become negative
    
    commit e5f71a27fa12c1a1b02ad478a568e76260f1815e upstream.
    
    text[s] is a signed char, so using that as index into the font8x16 array
    can result in negative indices. Cast it to u8 to be safe.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+ccf0a61ed12f2a7313ee@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>      # for v4.7 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 245fc1c7f688c8e6e5fe7076973a414755d18cf0
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Nov 8 07:23:37 2018 -0500

    media: vb2: check memory model for VIDIOC_CREATE_BUFS
    
    commit 62dcb4f41836bd3c44b5b651bb6df07ea4cb1551 upstream.
    
    vb2_core_create_bufs did not check if the memory model for newly added
    buffers is the same as for already existing buffers. It should return an
    error if they aren't the same.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+e1fb118a2ebb88031d21@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>      # for v4.16 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 845c7f6cbc98be49514e4d3ae790af5cba515aec
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Fri Nov 9 08:37:44 2018 -0500

    media: vivid: free bitmap_cap when updating std/timings/etc.
    
    commit 560ccb75c2caa6b1039dec1a53cd2ef526f5bf03 upstream.
    
    When vivid_update_format_cap() is called it should free any overlay
    bitmap since the compose size will change.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+0cc8e3cc63ca373722c6@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>      # for v3.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 257ad26e7e98c7ec60692f7efa704076a5d9f7a7
Author: Luca Ceresoli <luca@lucaceresoli.net>
Date:   Mon Nov 26 11:35:07 2018 -0500

    media: imx274: fix stack corruption in imx274_read_reg
    
    commit cea8c0077d6cf3a0cea2f18a8e914af78d46b2ff upstream.
    
    imx274_read_reg() takes a u8 pointer ("reg") and casts it to pass it
    to regmap_read(), which takes an unsigned int pointer. This results in
    a corrupted stack and random crashes.
    
    Fixes: 0985dd306f72 ("media: imx274: V4l2 driver for Sony imx274 CMOS sensor")
    
    Cc: stable@vger.kernel.org # for 4.15 and up
    Signed-off-by: Luca Ceresoli <luca@lucaceresoli.net>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ce31f635b23fb68555a6f3fc2c36789d70fdf62
Author: Sean Young <sean@mess.org>
Date:   Mon Oct 22 05:01:50 2018 -0400

    media: rc: cec devices do not have a lirc chardev
    
    commit e5bb9d3d755f128956ed467ae50b41d22bb680c6 upstream.
    
    This fixes an oops in ir_lirc_scancode_event().
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000038
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    CPU: 9 PID: 27687 Comm: kworker/9:2 Tainted: P¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† OE 4.18.12-200.fc28.x86_64 #1
    Hardware name: Supermicro C7X99-OCE-F/C7X99-OCE-F, BIOS 2.1a 06/15/2018
    Workqueue: events pulse8_irq_work_handler [pulse8_cec]
    RIP: 0010:ir_lirc_scancode_event+0x3d/0xb0 [rc_core]
    Code: 8d ae b4 07 00 00 49 81 c6 b8 07 00 00 53 e8 4a df c3 d5 48 89 ef 49 89 45 00 e8 4e 84 41 d6 49 8b 1e 49 89 c4 4c 39 f3 74 58 <8b> 43 38 8b 53 40 89 c1 2b 4b 3c 39 ca 72 41 21 d0 49 8b 7d 00 49
    RSP: 0018:ffffaa10e3c07d58 EFLAGS: 00010017
    RAX: 0000000000000002 RBX: 0000000000000000 RCX: 0000000000000018
    RDX: 0000000000000001 RSI: 00316245397fa93c RDI: ffff966d31c8d7b4
    RBP: ffff966d31c8d7b4 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000003 R11: ffffaa10e3c07e28 R12: 0000000000000002
    R13: ffffaa10e3c07d88 R14: ffff966d31c8d7b8 R15: 0000000000000073
    FS:¬† 0000000000000000(0000) GS:ffff966d3f440000(0000) knlGS:0000000000000000
    CS:¬† 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000038 CR3: 00000009d820a003 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    ¬†ir_do_keydown+0x75/0x260 [rc_core]
    ¬†rc_keydown+0x54/0xc0 [rc_core]
    ¬†cec_received_msg_ts+0xaa8/0xaf0 [cec]
    ¬†process_one_work+0x1a1/0x350
    ¬†worker_thread+0x30/0x380
    ¬†? pwq_unbound_release_workfn+0xd0/0xd0
    ¬†kthread+0x112/0x130
    ¬†? kthread_create_worker_on_cpu+0x70/0x70
    ¬†ret_from_fork+0x35/0x40
    Modules linked in: rc_tt_1500 dvb_usb_dvbsky dvb_usb_v2 uas usb_storage fuse vhost_net vhost tap xt_CHECKSUM iptable_mangle ip6t_REJECT nf_reject_ipv6 tun 8021q garp mrp xt_nat macvlan xfs devlink ebta
    ¬†si2157 si2168 cx25840 cx23885 kvm altera_ci tda18271 joydev ir_rc6_decoder rc_rc6_mce crct10dif_pclmul crc32_pclmul ghash_clmulni_intel intel_cstate intel_uncore altera_stapl m88ds3103 tveeprom cx2341
    ¬†mxm_wmi igb crc32c_intel megaraid_sas dca i2c_algo_bit wmi vfio_pci irqbypass vfio_virqfd vfio_iommu_type1 vfio i2c_dev
    CR2: 0000000000000038
    
    Cc: <stable@vger.kernel.org> # v4.16+
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f8cff22960b4b41e8aac2063f931c10d44fdc6c
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Wed Nov 14 03:37:53 2018 -0500

    media: cec-pin: fix broken tx_ignore_nack_until_eom error injection
    
    commit ac791f19a273a7fe254a7596f193af6534582a9f upstream.
    
    If the tx_ignore_nack_until_eom error injection was activated,
    then tx_nacked was never set instead of setting it when the last
    byte of the message was transmitted.
    
    As a result the transmit was marked as OK, when it should have
    been NACKed.
    
    Modify the condition so that it always sets tx_nacked when the
    last byte of the message was transmitted.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: <stable@vger.kernel.org>      # for v4.17 and up
    Signed-off-by: Hans Verkuil <hansverk@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 465153038583876e436cd371e4d36e6c8601e671
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Fri Oct 19 03:55:34 2018 -0400

    media: cec: keep track of outstanding transmits
    
    commit 32804fcb612bf867034a093f459415e485cf044b upstream.
    
    I noticed that repeatedly running 'cec-ctl --playback' would occasionally
    select 'Playback Device 2' instead of 'Playback Device 1', even though there
    were no other Playback devices in the HDMI topology. This happened both with
    'real' hardware and with the vivid CEC emulation, suggesting that this was an
    issue in the core code that claims a logical address.
    
    What 'cec-ctl --playback' does is to first clear all existing logical addresses,
    and immediately after that configure the new desired device type.
    
    The core code will poll the logical addresses trying to find a free address.
    When found it will issue a few standard messages as per the CEC spec and return.
    Those messages are queued up and will be transmitted asynchronously.
    
    What happens is that if you run two 'cec-ctl --playback' commands in quick
    succession, there is still a message of the first cec-ctl command being transmitted
    when you reconfigure the adapter again in the second cec-ctl command.
    
    When the logical addresses are cleared, then all information about outstanding
    transmits inside the CEC core is also cleared, and the core is no longer aware
    that there is still a transmit in flight.
    
    When the hardware finishes the transmit it calls transmit_done and the CEC core
    thinks it is actually in response of a POLL messages that is trying to find a
    free logical address. The result of all this is that the core thinks that the
    logical address for Playback Device 1 is in use, when it is really an earlier
    transmit that ended.
    
    The main transmit thread looks at adap->transmitting to check if a transmit
    is in progress, but that is set to NULL when the adapter is unconfigured.
    adap->transmitting represents the view of userspace, not that of the hardware.
    So when unconfiguring the adapter the message is marked aborted from the point
    of view of userspace, but seen from the PoV of the hardware it is still ongoing.
    
    So introduce a new bool transmit_in_progress that represents the hardware state
    and use that instead of adap->transmitting. Now the CEC core waits until the
    hardware finishes the transmit before starting a new transmit.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v4.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e534754ffd9313a7685265226f5e689fb25ecd5a
Author: Nava kishore Manne <nava.manne@xilinx.com>
Date:   Tue Dec 18 13:18:42 2018 +0100

    serial: uartps: Fix interrupt mask issue to handle the RX interrupts properly
    
    commit 260683137ab5276113fc322fdbbc578024185fee upstream.
    
    This patch Correct the RX interrupt mask value to handle the
    RX interrupts properly.
    
    Fixes: c8dbdc842d30 ("serial: xuartps: Rewrite the interrupt handling logic")
    Signed-off-by: Nava kishore Manne <nava.manne@xilinx.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5036fcd9b14516f62efae6ed0c42dfbb9798b643
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Wed Dec 26 19:54:07 2018 -0800

    f2fs: sanity check of xattr entry size
    
    commit 64beba0558fce7b59e9a8a7afd77290e82a22163 upstream.
    
    There is a security report where f2fs_getxattr() has a hole to expose wrong
    memory region when the image is malformed like this.
    
    f2fs_getxattr: entry->e_name_len: 4, size: 12288, buffer_size: 16384, len: 4
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58d7ab7163d9119a05c576506692a4d90ca22f65
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Dec 22 11:22:26 2018 +0100

    f2fs: fix validation of the block count in sanity_check_raw_super
    
    commit 88960068f25fcc3759455d85460234dcc9d43fef upstream.
    
    Treat "block_count" from struct f2fs_super_block as 64-bit little endian
    value in sanity_check_raw_super() because struct f2fs_super_block
    declares "block_count" as "__le64".
    
    This fixes a bug where the superblock validation fails on big endian
    devices with the following error:
      F2FS-fs (sda1): Wrong segment_count / block_count (61439 > 0)
      F2FS-fs (sda1): Can't find valid F2FS filesystem in 1th superblock
      F2FS-fs (sda1): Wrong segment_count / block_count (61439 > 0)
      F2FS-fs (sda1): Can't find valid F2FS filesystem in 2th superblock
    As result of this the partition cannot be mounted.
    
    With this patch applied the superblock validation works fine and the
    partition can be mounted again:
      F2FS-fs (sda1): Mounted with checkpoint version = 7c84
    
    My little endian x86-64 hardware was able to mount the partition without
    this fix.
    To confirm that mounting f2fs filesystems works on big endian machines
    again I tested this on a 32-bit MIPS big endian (lantiq) device.
    
    Fixes: 0cfe75c5b01199 ("f2fs: enhance sanity_check_raw_super() to avoid potential overflows")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce5b0057f7687fab11c23b586b94766b1fc40e96
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 22 18:58:46 2018 +0800

    f2fs: read page index before freeing
    
    commit 0ea295dd853e0879a9a30ab61f923c26be35b902 upstream.
    
    The function truncate_node frees the page with f2fs_put_page. However,
    the page index is read after that. So, the patch reads the index before
    freeing the page.
    
    Fixes: bf39c00a9a7f ("f2fs: drop obsolete node page when it is truncated")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9621ea6b9c4c8268d715785759678b401ff36509
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Sat Jan 5 11:45:13 2019 -0800

    dax: Use non-exclusive wait in wait_entry_unlocked()
    
    commit d8a706414af4827fc0b4b1c0c631c607351938b9 upstream.
    
    get_unlocked_entry() uses an exclusive wait because it is guaranteed to
    eventually obtain the lock and follow on with an unlock+wakeup cycle.
    The wait_entry_unlocked() path does not have the same guarantee. Rather
    than open-code an extra wakeup, just switch to a non-exclusive wait.
    
    Cc: Matthew Wilcox <willy@infradead.org>
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c555772c2a4e1042a12ea27413e93a89d01b04b7
Author: Matthew Wilcox <willy@infradead.org>
Date:   Sat Jan 5 11:45:08 2019 -0800

    dax: Don't access a freed inode
    
    commit 55e56f06ed71d9441f3abd5b1d3c1a870812b3fe upstream.
    
    After we drop the i_pages lock, the inode can be freed at any time.
    The get_unlocked_entry() code has no choice but to reacquire the lock,
    so it can't be used here.  Create a new wait_entry_unlocked() which takes
    care not to acquire the lock or dereference the address_space in any way.
    
    Fixes: c2a7d2a11552 ("filesystem-dax: Introduce dax_lock_mapping_entry()")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Matthew Wilcox <willy@infradead.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9935a12768851762089fda8e5a9daaf0231808e
Author: Breno Leitao <leitao@debian.org>
Date:   Mon Nov 26 18:12:00 2018 -0200

    powerpc/tm: Unset MSR[TS] if not recheckpointing
    
    commit 6f5b9f018f4c7686fd944d920209d1382d320e4e upstream.
    
    There is a TM Bad Thing bug that can be caused when you return from a
    signal context in a suspended transaction but with ucontext MSR[TS] unset.
    
    This forces regs->msr[TS] to be set at syscall entrance (since the CPU
    state is transactional). It also calls treclaim() to flush the transaction
    state, which is done based on the live (mfmsr) MSR state.
    
    Since user context MSR[TS] is not set, then restore_tm_sigcontexts() is not
    called, thus, not executing recheckpoint, keeping the CPU state as not
    transactional. When calling rfid, SRR1 will have MSR[TS] set, but the CPU
    state is non transactional, causing the TM Bad Thing with the following
    stack:
    
            [   33.862316] Bad kernel stack pointer 3fffd9dce3e0 at c00000000000c47c
            cpu 0x8: Vector: 700 (Program Check) at [c00000003ff7fd40]
                pc: c00000000000c47c: fast_exception_return+0xac/0xb4
                lr: 00003fff865f442c
                sp: 3fffd9dce3e0
               msr: 8000000102a03031
              current = 0xc00000041f68b700
              paca    = 0xc00000000fb84800   softe: 0        irq_happened: 0x01
                pid   = 1721, comm = tm-signal-sigre
            Linux version 4.9.0-3-powerpc64le (debian-kernel@lists.debian.org) (gcc version 6.3.0 20170516 (Debian 6.3.0-18) ) #1 SMP Debian 4.9.30-2+deb9u2 (2017-06-26)
            WARNING: exception is not recoverable, can't continue
    
    The same problem happens on 32-bits signal handler, and the fix is very
    similar, if tm_recheckpoint() is not executed, then regs->msr[TS] should be
    zeroed.
    
    This patch also fixes a sparse warning related to lack of indentation when
    CONFIG_PPC_TRANSACTIONAL_MEM is set.
    
    Fixes: 2b0a576d15e0e ("powerpc: Add new transactional memory state to the signal context")
    CC: Stable <stable@vger.kernel.org>     # 3.10+
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Tested-by: Michal Such√°nek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71cda0af36704d34daa9ce3887b71b59c6ed72b0
Author: Lyude Paul <lyude@redhat.com>
Date:   Sat Nov 24 17:57:05 2018 -0500

    brcmfmac: Fix out of bounds memory access during fw load
    
    commit b72c51a58e6d63ef673ac96b8ab5bc98799c5f7b upstream.
    
    I ended up tracking down some rather nasty issues with f2fs (and other
    filesystem modules) constantly crashing on my kernel down to a
    combination of out of bounds memory accesses, one of which was coming
    from brcmfmac during module load:
    
    [   30.891382] brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4356-sdio for chip BCM4356/2
    [   30.894437] ==================================================================
    [   30.901581] BUG: KASAN: global-out-of-bounds in brcmf_fw_alloc_request+0x42c/0x480 [brcmfmac]
    [   30.909935] Read of size 1 at addr ffff2000024865df by task kworker/6:2/387
    [   30.916805]
    [   30.918261] CPU: 6 PID: 387 Comm: kworker/6:2 Tainted: G           O      4.20.0-rc3Lyude-Test+ #19
    [   30.927251] Hardware name: amlogic khadas-vim2/khadas-vim2, BIOS 2018.07-rc2-armbian 09/11/2018
    [   30.935964] Workqueue: events brcmf_driver_register [brcmfmac]
    [   30.941641] Call trace:
    [   30.944058]  dump_backtrace+0x0/0x3e8
    [   30.947676]  show_stack+0x14/0x20
    [   30.950968]  dump_stack+0x130/0x1c4
    [   30.954406]  print_address_description+0x60/0x25c
    [   30.959066]  kasan_report+0x1b4/0x368
    [   30.962683]  __asan_report_load1_noabort+0x18/0x20
    [   30.967547]  brcmf_fw_alloc_request+0x42c/0x480 [brcmfmac]
    [   30.967639]  brcmf_sdio_probe+0x163c/0x2050 [brcmfmac]
    [   30.978035]  brcmf_ops_sdio_probe+0x598/0xa08 [brcmfmac]
    [   30.983254]  sdio_bus_probe+0x190/0x398
    [   30.983270]  really_probe+0x2a0/0xa70
    [   30.983296]  driver_probe_device+0x1b4/0x2d8
    [   30.994901]  __driver_attach+0x200/0x280
    [   30.994914]  bus_for_each_dev+0x10c/0x1a8
    [   30.994925]  driver_attach+0x38/0x50
    [   30.994935]  bus_add_driver+0x330/0x608
    [   30.994953]  driver_register+0x140/0x388
    [   31.013965]  sdio_register_driver+0x74/0xa0
    [   31.014076]  brcmf_sdio_register+0x14/0x60 [brcmfmac]
    [   31.023177]  brcmf_driver_register+0xc/0x18 [brcmfmac]
    [   31.023209]  process_one_work+0x654/0x1080
    [   31.032266]  worker_thread+0x4f0/0x1308
    [   31.032286]  kthread+0x2a8/0x320
    [   31.039254]  ret_from_fork+0x10/0x1c
    [   31.039269]
    [   31.044226] The buggy address belongs to the variable:
    [   31.044351]  brcmf_firmware_path+0x11f/0xfffffffffffd3b40 [brcmfmac]
    [   31.055601]
    [   31.057031] Memory state around the buggy address:
    [   31.061800]  ffff200002486480: 04 fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
    [   31.068983]  ffff200002486500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [   31.068993] >ffff200002486580: 00 00 00 00 00 00 00 00 fa fa fa fa 00 00 00 00
    [   31.068999]                                                     ^
    [   31.069017]  ffff200002486600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [   31.096521]  ffff200002486680: 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa
    [   31.096528] ==================================================================
    [   31.096533] Disabling lock debugging due to kernel taint
    
    It appears that when trying to determine the length of the string in the
    alternate firmware path, we make the mistake of not handling the case
    where the firmware path is empty correctly. Since strlen(mp_path) can
    return 0, we'll end up accessing mp_path[-1] when the firmware_path
    isn't provided through the module arguments.
    
    So, fix this by just setting the end char to '\0' by default, and only
    changing it if we have a non-zero length. Additionally, use strnlen()
    with BRCMF_FW_ALTPATH_LEN instead of strlen() just to be extra safe.
    
    Fixes: 2baa3aaee27f ("brcmfmac: introduce brcmf_fw_alloc_request() function")
    Cc: Hante Meuleman <hante.meuleman@broadcom.com>
    Cc: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Cc: Franky Lin <franky.lin@broadcom.com>
    Cc: Arend van Spriel <arend.vanspriel@broadcom.com>
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Cc: Arend Van Spriel <arend.vanspriel@broadcom.com>
    Cc: Himanshu Jha <himanshujha199640@gmail.com>
    Cc: Dan Haab <dhaab@luxul.com>
    Cc: Jia-Shyr Chuang <saint.chuang@cypress.com>
    Cc: Ian Molton <ian@mnementh.co.uk>
    Cc: <stable@vger.kernel.org> # v4.17+
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fad6c183e20b0375ebb003c6f93f523c0144479a
Author: Stijn Tintel <stijn@linux-ipv6.be>
Date:   Tue Dec 4 20:29:05 2018 +0200

    brcmfmac: fix roamoff=1 modparam
    
    commit 8c892df41500469729e0d662816300196e4f463d upstream.
    
    When the update_connect_param callback is set, nl80211 expects the flag
    WIPHY_FLAG_SUPPORTS_FW_ROAM to be set as well. However, this flag is
    only set when modparam roamoff=0, while the callback is set
    unconditionally. Since commit 7f9a3e150ec7 this causes a warning in
    wiphy_register, which breaks brcmfmac.
    
    Disable the update_connect_param callback when roamoff=0 to fix this.
    
    Fixes: 7f9a3e150ec7 ("nl80211: Update ERP info using NL80211_CMD_UPDATE_CONNECT_PARAMS")
    Cc: Stable <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9eec74b48477df26e65994115eecf7380374c49b
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Dec 11 10:19:45 2018 +0000

    Btrfs: send, fix race with transaction commits that create snapshots
    
    commit be6821f82c3cc36e026f5afd10249988852b35ea upstream.
    
    If we create a snapshot of a snapshot currently being used by a send
    operation, we can end up with send failing unexpectedly (returning
    -ENOENT error to user space for example). The following diagram shows
    how this happens.
    
                CPU 1                                   CPU2                                CPU3
    
     btrfs_ioctl_send()
      (...)
                                         create_snapshot()
                                          -> creates snapshot of a
                                             root used by the send
                                             task
                                          btrfs_commit_transaction()
                                           create_pending_snapshot()
      __get_inode_info()
       btrfs_search_slot()
        btrfs_search_slot_get_root()
         down_read commit_root_sem
    
         get reference on eb of the
         commit root
          -> eb with bytenr == X
    
         up_read commit_root_sem
    
                                            btrfs_cow_block(root node)
                                             btrfs_free_tree_block()
                                              -> creates delayed ref to
                                                 free the extent
    
                                           btrfs_run_delayed_refs()
                                            -> runs the delayed ref,
                                               adds extent to
                                               fs_info->pinned_extents
    
                                           btrfs_finish_extent_commit()
                                            unpin_extent_range()
                                             -> marks extent as free
                                                in the free space cache
    
                                          transaction commit finishes
    
                                                                           btrfs_start_transaction()
                                                                            (...)
                                                                            btrfs_cow_block()
                                                                             btrfs_alloc_tree_block()
                                                                              btrfs_reserve_extent()
                                                                               -> allocates extent at
                                                                                  bytenr == X
                                                                              btrfs_init_new_buffer(bytenr X)
                                                                               btrfs_find_create_tree_block()
                                                                                alloc_extent_buffer(bytenr X)
                                                                                 find_extent_buffer(bytenr X)
                                                                                  -> returns existing eb,
                                                                                     which the send task got
    
                                                                            (...)
                                                                             -> modifies content of the
                                                                                eb with bytenr == X
    
        -> uses an eb that now
           belongs to some other
           tree and no more matches
           the commit root of the
           snapshot, resuts will be
           unpredictable
    
    The consequences of this race can be various, and can lead to searches in
    the commit root performed by the send task failing unexpectedly (unable to
    find inode items, returning -ENOENT to user space, for example) or not
    failing because an inode item with the same number was added to the tree
    that reused the metadata extent, in which case send can behave incorrectly
    in the worst case or just fail later for some reason.
    
    Fix this by performing a copy of the commit root's extent buffer when doing
    a search in the context of a send operation.
    
    CC: stable@vger.kernel.org # 4.4.x: 1fc28d8e2e9: Btrfs: move get root out of btrfs_search_slot to a helper
    CC: stable@vger.kernel.org # 4.4.x: f9ddfd0592a: Btrfs: remove unused check of skip_locking
    CC: stable@vger.kernel.org # 4.4.x
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6911b074a0055f9b350d85fde530f61abbef2171
Author: Josef Bacik <jbacik@fb.com>
Date:   Fri Nov 30 11:52:14 2018 -0500

    btrfs: run delayed items before dropping the snapshot
    
    commit 0568e82dbe2510fc1fa664f58e5c997d3f1e649e upstream.
    
    With my delayed refs patches in place we started seeing a large amount
    of aborts in __btrfs_free_extent:
    
     BTRFS error (device sdb1): unable to find ref byte nr 91947008 parent 0 root 35964  owner 1 offset 0
     Call Trace:
      ? btrfs_merge_delayed_refs+0xaf/0x340
      __btrfs_run_delayed_refs+0x6ea/0xfc0
      ? btrfs_set_path_blocking+0x31/0x60
      btrfs_run_delayed_refs+0xeb/0x180
      btrfs_commit_transaction+0x179/0x7f0
      ? btrfs_check_space_for_delayed_refs+0x30/0x50
      ? should_end_transaction.isra.19+0xe/0x40
      btrfs_drop_snapshot+0x41c/0x7c0
      btrfs_clean_one_deleted_snapshot+0xb5/0xd0
      cleaner_kthread+0xf6/0x120
      kthread+0xf8/0x130
      ? btree_invalidatepage+0x90/0x90
      ? kthread_bind+0x10/0x10
      ret_from_fork+0x35/0x40
    
    This was because btrfs_drop_snapshot depends on the root not being
    modified while it's dropping the snapshot.  It will unlock the root node
    (and really every node) as it walks down the tree, only to re-lock it
    when it needs to do something.  This is a problem because if we modify
    the tree we could cow a block in our path, which frees our reference to
    that block.  Then once we get back to that shared block we'll free our
    reference to it again, and get ENOENT when trying to lookup our extent
    reference to that block in __btrfs_free_extent.
    
    This is ultimately happening because we have delayed items left to be
    processed for our deleted snapshot _after_ all of the inodes are closed
    for the snapshot.  We only run the delayed inode item if we're deleting
    the inode, and even then we do not run the delayed insertions or delayed
    removals.  These can be run at any point after our final inode does its
    last iput, which is what triggers the snapshot deletion.  We can end up
    with the snapshot deletion happening and then have the delayed items run
    on that file system, resulting in the above problem.
    
    This problem has existed forever, however my patches made it much easier
    to hit as I wake up the cleaner much more often to deal with delayed
    iputs, which made us more likely to start the snapshot dropping work
    before the transaction commits, which is when the delayed items would
    generally be run.  Before, generally speaking, we would run the delayed
    items, commit the transaction, and wakeup the cleaner thread to start
    deleting snapshots, which means we were less likely to hit this problem.
    You could still hit it if you had multiple snapshots to be deleted and
    ended up with lots of delayed items, but it was definitely harder.
    
    Fix for now by simply running all the delayed items before starting to
    drop the snapshot.  We could make this smarter in the future by making
    the delayed items per-root, and then simply drop any delayed items for
    roots that we are going to delete.  But for now just a quick and easy
    solution is the safest.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10b04210aabf4488930fac768994ff7d1d359ac3
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Nov 28 14:54:28 2018 +0000

    Btrfs: fix fsync of files with multiple hard links in new directories
    
    commit 41bd60676923822de1df2c50b3f9a10171f4338a upstream.
    
    The log tree has a long standing problem that when a file is fsync'ed we
    only check for new ancestors, created in the current transaction, by
    following only the hard link for which the fsync was issued. We follow the
    ancestors using the VFS' dget_parent() API. This means that if we create a
    new link for a file in a directory that is new (or in an any other new
    ancestor directory) and then fsync the file using an old hard link, we end
    up not logging the new ancestor, and on log replay that new hard link and
    ancestor do not exist. In some cases, involving renames, the file will not
    exist at all.
    
    Example:
    
      mkfs.btrfs -f /dev/sdb
      mount /dev/sdb /mnt
    
      mkdir /mnt/A
      touch /mnt/foo
      ln /mnt/foo /mnt/A/bar
      xfs_io -c fsync /mnt/foo
    
      <power failure>
    
    In this example after log replay only the hard link named 'foo' exists
    and directory A does not exist, which is unexpected. In other major linux
    filesystems, such as ext4, xfs and f2fs for example, both hard links exist
    and so does directory A after mounting again the filesystem.
    
    Checking if any new ancestors are new and need to be logged was added in
    2009 by commit 12fcfd22fe5b ("Btrfs: tree logging unlink/rename fixes"),
    however only for the ancestors of the hard link (dentry) for which the
    fsync was issued, instead of checking for all ancestors for all of the
    inode's hard links.
    
    So fix this by tracking the id of the last transaction where a hard link
    was created for an inode and then on fsync fallback to a full transaction
    commit when an inode has more than one hard link and at least one new hard
    link was created in the current transaction. This is the simplest solution
    since this is not a common use case (adding frequently hard links for
    which there's an ancestor created in the current transaction and then
    fsync the file). In case it ever becomes a common use case, a solution
    that consists of iterating the fs/subvol btree for each hard link and
    check if any ancestor is new, could be implemented.
    
    This solves many unexpected scenarios reported by Jayashree Mohan and
    Vijay Chidambaram, and for which there is a new test case for fstests
    under review.
    
    Fixes: 12fcfd22fe5b ("Btrfs: tree logging unlink/rename fixes")
    CC: stable@vger.kernel.org # 4.4+
    Reported-by: Vijay Chidambaram <vvijay03@gmail.com>
    Reported-by: Jayashree Mohan <jayashree2912@gmail.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7708a83090bab6e6c7348b0dae4f47681921ca1c
Author: Lu Fengqi <lufq.fnst@cn.fujitsu.com>
Date:   Thu Nov 29 17:31:32 2018 +0800

    btrfs: skip file_extent generation check for free_space_inode in run_delalloc_nocow
    
    commit 27a7ff554e8d349627a90bda275c527b7348adae upstream.
    
    The test case btrfs/001 with inode_cache mount option will encounter the
    following warning:
    
      WARNING: CPU: 1 PID: 23700 at fs/btrfs/inode.c:956 cow_file_range.isra.19+0x32b/0x430 [btrfs]
      CPU: 1 PID: 23700 Comm: btrfs Kdump: loaded Tainted: G        W  O      4.20.0-rc4-custom+ #30
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      RIP: 0010:cow_file_range.isra.19+0x32b/0x430 [btrfs]
      Call Trace:
       ? free_extent_buffer+0x46/0x90 [btrfs]
       run_delalloc_nocow+0x455/0x900 [btrfs]
       btrfs_run_delalloc_range+0x1a7/0x360 [btrfs]
       writepage_delalloc+0xf9/0x150 [btrfs]
       __extent_writepage+0x125/0x3e0 [btrfs]
       extent_write_cache_pages+0x1b6/0x3e0 [btrfs]
       ? __wake_up_common_lock+0x63/0xc0
       extent_writepages+0x50/0x80 [btrfs]
       do_writepages+0x41/0xd0
       ? __filemap_fdatawrite_range+0x9e/0xf0
       __filemap_fdatawrite_range+0xbe/0xf0
       btrfs_fdatawrite_range+0x1b/0x50 [btrfs]
       __btrfs_write_out_cache+0x42c/0x480 [btrfs]
       btrfs_write_out_ino_cache+0x84/0xd0 [btrfs]
       btrfs_save_ino_cache+0x551/0x660 [btrfs]
       commit_fs_roots+0xc5/0x190 [btrfs]
       btrfs_commit_transaction+0x2bf/0x8d0 [btrfs]
       btrfs_mksubvol+0x48d/0x4d0 [btrfs]
       btrfs_ioctl_snap_create_transid+0x170/0x180 [btrfs]
       btrfs_ioctl_snap_create_v2+0x124/0x180 [btrfs]
       btrfs_ioctl+0x123f/0x3030 [btrfs]
    
    The file extent generation of the free space inode is equal to the last
    snapshot of the file root, so the inode will be passed to cow_file_rage.
    But the inode was created and its extents were preallocated in
    btrfs_save_ino_cache, there are no cow copies on disk.
    
    The preallocated extent is not yet in the extent tree, and
    btrfs_cross_ref_exist will ignore the -ENOENT returned by
    check_committed_ref, so we can directly write the inode to the disk.
    
    Fixes: 78d4295b1eee ("btrfs: lift some btrfs_cross_ref_exist checks in nocow path")
    CC: stable@vger.kernel.org # 4.18+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Lu Fengqi <lufq.fnst@cn.fujitsu.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1f90eb019714c51f191f2c1abbfda7ebfaf7c35
Author: Anand Jain <anand.jain@oracle.com>
Date:   Sun Nov 11 22:22:18 2018 +0800

    btrfs: dev-replace: go back to suspend state if another EXCL_OP is running
    
    commit 05c49e6bc1e8866ecfd674ebeeb58cdbff9145c2 upstream.
    
    In a secnario where balance and replace co-exists as below,
    
      - start balance
      - pause balance
      - start replace
      - reboot
    
    and when system restarts, balance resumes first. Then the replace is
    attempted to restart but will fail as the EXCL_OP lock is already held
    by the balance. If so place the replace state back to
    BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED state.
    
    Fixes: 010a47bde9420 ("btrfs: add proper safety check before resuming dev-replace")
    CC: stable@vger.kernel.org # 4.18+
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28867a52e48d989a4c0f8476223a5d76918041f5
Author: Anand Jain <anand.jain@oracle.com>
Date:   Sun Nov 11 22:22:17 2018 +0800

    btrfs: dev-replace: go back to suspended state if target device is missing
    
    commit 0d228ece59a35a9b9e8ff0d40653234a6d90f61e upstream.
    
    At the time of forced unmount we place the running replace to
    BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED state, so when the system comes
    back and expect the target device is missing.
    
    Then let the replace state continue to be in
    BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED state instead of
    BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED as there isn't any matching scrub
    running as part of replace.
    
    Fixes: e93c89c1aaaa ("Btrfs: add new sources for device replace code")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 326ca6bd0fae2a164c47dcdd7f89a1da89f4cb11
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Wed Dec 19 12:11:03 2018 +0800

    cdc-acm: fix abnormal DATA RX issue for Mediatek Preloader.
    
    commit eafb27fa5283599ce6c5492ea18cf636a28222bb upstream.
    
    Mediatek Preloader is a proprietary embedded boot loader for loading
    Little Kernel and Linux into device DRAM.
    
    This boot loader also handle firmware update. Mediatek Preloader will be
    enumerated as a virtual COM port when the device is connected to Windows
    or Linux OS via CDC-ACM class driver. When the USB enumeration has been
    done, Mediatek Preloader will send out handshake command "READY" to PC
    actively instead of waiting command from the download tool.
    
    Since Linux 4.12, the commit "tty: reset termios state on device
    registration" (93857edd9829e144acb6c7e72d593f6e01aead66) causes Mediatek
    Preloader receiving some abnoraml command like "READYXX" as it sent.
    This will be recognized as an incorrect response. The behavior change
    also causes the download handshake fail. This change only affects
    subsequent connects if the reconnected device happens to get the same minor
    number.
    
    By disabling the ECHO termios flag could avoid this problem. However, it
    cannot be done by user space configuration when download tool open
    /dev/ttyACM0. This is because the device running Mediatek Preloader will
    send handshake command "READY" immediately once the CDC-ACM driver is
    ready.
    
    This patch wants to fix above problem by introducing "DISABLE_ECHO"
    property in driver_info. When Mediatek Preloader is connected, the
    CDC-ACM driver could disable ECHO flag in termios to avoid the problem.
    
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a2fbdd5b0204c823ec641ab9ddca23eb6fd0c33
Author: Tejun Heo <tj@kernel.org>
Date:   Thu Nov 8 12:15:15 2018 -0800

    cgroup: fix CSS_TASK_ITER_PROCS
    
    commit e9d81a1bc2c48ea9782e3e8b53875f419766ef47 upstream.
    
    CSS_TASK_ITER_PROCS implements process-only iteration by making
    css_task_iter_advance() skip tasks which aren't threadgroup leaders;
    however, when an iteration is started css_task_iter_start() calls the
    inner helper function css_task_iter_advance_css_set() instead of
    css_task_iter_advance().  As the helper doesn't have the skip logic,
    when the first task to visit is a non-leader thread, it doesn't get
    skipped correctly as shown in the following example.
    
      # ps -L 2030
        PID   LWP TTY      STAT   TIME COMMAND
       2030  2030 pts/0    Sl+    0:00 ./test-thread
       2030  2031 pts/0    Sl+    0:00 ./test-thread
      # mkdir -p /sys/fs/cgroup/x/a/b
      # echo threaded > /sys/fs/cgroup/x/a/cgroup.type
      # echo threaded > /sys/fs/cgroup/x/a/b/cgroup.type
      # echo 2030 > /sys/fs/cgroup/x/a/cgroup.procs
      # cat /sys/fs/cgroup/x/a/cgroup.threads
      2030
      2031
      # cat /sys/fs/cgroup/x/cgroup.procs
      2030
      # echo 2030 > /sys/fs/cgroup/x/a/b/cgroup.threads
      # cat /sys/fs/cgroup/x/cgroup.procs
      2031
      2030
    
    The last read of cgroup.procs is incorrectly showing non-leader 2031
    in cgroup.procs output.
    
    This can be fixed by updating css_task_iter_advance() to handle the
    first advance and css_task_iters_tart() to call
    css_task_iter_advance() instead of the inner helper.  After the fix,
    the same commands result in the following (correct) result:
    
      # ps -L 2062
        PID   LWP TTY      STAT   TIME COMMAND
       2062  2062 pts/0    Sl+    0:00 ./test-thread
       2062  2063 pts/0    Sl+    0:00 ./test-thread
      # mkdir -p /sys/fs/cgroup/x/a/b
      # echo threaded > /sys/fs/cgroup/x/a/cgroup.type
      # echo threaded > /sys/fs/cgroup/x/a/b/cgroup.type
      # echo 2062 > /sys/fs/cgroup/x/a/cgroup.procs
      # cat /sys/fs/cgroup/x/a/cgroup.threads
      2062
      2063
      # cat /sys/fs/cgroup/x/cgroup.procs
      2062
      # echo 2062 > /sys/fs/cgroup/x/a/b/cgroup.threads
      # cat /sys/fs/cgroup/x/cgroup.procs
      2062
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: "Michael Kerrisk (man-pages)" <mtk.manpages@gmail.com>
    Fixes: 8cfd8147df67 ("cgroup: implement cgroup v2 thread support")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99dcd45f274e10b0a4b04f2836218762ed2294d4
Author: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
Date:   Sat Oct 20 02:01:52 2018 +0300

    crypto: cfb - fix decryption
    
    commit fa4600734b74f74d9169c3015946d4722f8bcf79 upstream.
    
    crypto_cfb_decrypt_segment() incorrectly XOR'ed generated keystream with
    IV, rather than with data stream, resulting in incorrect decryption.
    Test vectors will be added in the next patch.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8e4b24ffbbbc296e521eebd5525a3031bdbac51
Author: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
Date:   Sat Oct 20 02:01:53 2018 +0300

    crypto: testmgr - add AES-CFB tests
    
    commit 7da66670775d201f633577f5b15a4bbeebaaa2b0 upstream.
    
    Add AES128/192/256-CFB testvectors from NIST SP800-38A.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc43a8afa8e37cd466000ee1b4995e8f8e7b615d
Author: Atul Gupta <atul.gupta@chelsio.com>
Date:   Fri Nov 30 14:31:48 2018 +0530

    crypto: chcr - small packet Tx stalls the queue
    
    commit c35828ea906a7c76632a0211e59c392903cd4615 upstream.
    
    Immediate packets sent to hardware should include the work
    request length in calculating the flits. WR occupy one flit and
    if not accounted result in invalid request which stalls the HW
    queue.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Atul Gupta <atul.gupta@chelsio.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fa6bead41baabd87abdffdd1d33d341069935af
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Thu Oct 18 19:50:43 2018 -0500

    crypto: cavium/nitrox - fix a DMA pool free failure
    
    commit 7172122be6a4712d699da4d261f92aa5ab3a78b8 upstream.
    
    In crypto_alloc_context(), a DMA pool is allocated through dma_pool_alloc()
    to hold the crypto context. The meta data of the DMA pool, including the
    pool used for the allocation 'ndev->ctx_pool' and the base address of the
    DMA pool used by the device 'dma', are then stored to the beginning of the
    pool. These meta data are eventually used in crypto_free_context() to free
    the DMA pool through dma_pool_free(). However, given that the DMA pool can
    also be accessed by the device, a malicious device can modify these meta
    data, especially when the device is controlled to deploy an attack. This
    can cause an unexpected DMA pool free failure.
    
    To avoid the above issue, this patch introduces a new structure
    crypto_ctx_hdr and a new field chdr in the structure nitrox_crypto_ctx hold
    the meta data information of the DMA pool after the allocation. Note that
    the original structure ctx_hdr is not changed to ensure the compatibility.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d095e1ba4165a375620b34656856fe1763978714
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Sun Nov 4 19:26:40 2018 +0100

    clk: sunxi-ng: Use u64 for calculation of NM rate
    
    commit 65b6657672388b72822e0367f06d41c1e3ffb5bb upstream.
    
    Allwinner H6 SoC has multiplier N range between 1 and 254. Since parent
    rate is 24MHz, intermediate result when calculating final rate easily
    overflows 32 bit variable.
    
    Because of that, introduce function for calculating clock rate which
    uses 64 bit variable for intermediate result.
    
    Fixes: 6174a1e24b0d ("clk: sunxi-ng: Add N-M-factor clock support")
    Fixes: ee28648cb2b4 ("clk: sunxi-ng: Remove the use of rational computations")
    
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36ef9d14fddaf4a71b7fe6e825ee3be58df6724e
Author: Johan Jonker <jbx9999@hotmail.com>
Date:   Sat Nov 3 23:54:13 2018 +0100

    clk: rockchip: fix typo in rk3188 spdif_frac parent
    
    commit 8b19faf6fae2867e2c177212c541e8ae36aa4d32 upstream.
    
    Fix typo in common_clk_branches.
    Make spdif_pre parent of spdif_frac.
    
    Fixes: 667464208989 ("clk: rockchip: include downstream muxes into fractional dividers")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Jonker <jbx9999@hotmail.com>
    Acked-by: Elaine Zhang <zhangqing@rock-chips.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e9c669859f65d68d2992b1f204bd9cd93715f93
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Nov 8 08:06:10 2018 +0100

    spi: bcm2835: Avoid finishing transfer prematurely in IRQ mode
    
    commit 56c1723426d3cfd4723bfbfce531d7b38bae6266 upstream.
    
    The IRQ handler bcm2835_spi_interrupt() first reads as much as possible
    from the RX FIFO, then writes as much as possible to the TX FIFO.
    Afterwards it decides whether the transfer is finished by checking if
    the TX FIFO is empty.
    
    If very few bytes were written to the TX FIFO, they may already have
    been transmitted by the time the FIFO's emptiness is checked.  As a
    result, the transfer will be declared finished and the chip will be
    reset without reading the corresponding received bytes from the RX FIFO.
    
    The odds of this happening increase with a high clock frequency (such
    that the TX FIFO drains quickly) and either passing "threadirqs" on the
    command line or enabling CONFIG_PREEMPT_RT_BASE (such that the IRQ
    handler may be preempted between filling the TX FIFO and checking its
    emptiness).
    
    Fix by instead checking whether rx_len has reached zero, which means
    that the transfer has been received in full.  This is also more
    efficient as it avoids one bus read access per interrupt.  Note that
    bcm2835_spi_transfer_one_poll() likewise uses rx_len to determine
    whether the transfer has finished.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Fixes: e34ff011c70e ("spi: bcm2835: move to the transfer_one driver model")
    Cc: stable@vger.kernel.org # v4.1+
    Cc: Mathias Duckeck <m.duckeck@kunbus.de>
    Cc: Frank Pavlic <f.pavlic@kunbus.de>
    Cc: Martin Sperl <kernel@martin.sperl.org>
    Cc: Noralf Tr√∏nnes <noralf@tronnes.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc8b83ff6a6968bb69b7e2ddf7cacaf33f1bd301
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Nov 8 08:06:10 2018 +0100

    spi: bcm2835: Fix book-keeping of DMA termination
    
    commit dbc944115eed48af110646992893dc43321368d8 upstream.
    
    If submission of a DMA TX transfer succeeds but submission of the
    corresponding RX transfer does not, the BCM2835 SPI driver terminates
    the TX transfer but neglects to reset the dma_pending flag to false.
    
    Thus, if the next transfer uses interrupt mode (because it is shorter
    than BCM2835_SPI_DMA_MIN_LENGTH) and runs into a timeout,
    dmaengine_terminate_all() will be called both for TX (once more) and
    for RX (which was never started in the first place).  Fix it.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Fixes: 3ecd37edaa2a ("spi: bcm2835: enable dma modes for transfers meeting certain conditions")
    Cc: stable@vger.kernel.org # v4.2+
    Cc: Mathias Duckeck <m.duckeck@kunbus.de>
    Cc: Frank Pavlic <f.pavlic@kunbus.de>
    Cc: Martin Sperl <kernel@martin.sperl.org>
    Cc: Noralf Tr√∏nnes <noralf@tronnes.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63f97d305aed08e7ed41cac823d4240481e0b4ef
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Nov 8 08:06:10 2018 +0100

    spi: bcm2835: Fix race on DMA termination
    
    commit e82b0b3828451c1cd331d9f304c6078fcd43b62e upstream.
    
    If a DMA transfer finishes orderly right when spi_transfer_one_message()
    determines that it has timed out, the callbacks bcm2835_spi_dma_done()
    and bcm2835_spi_handle_err() race to call dmaengine_terminate_all(),
    potentially leading to double termination.
    
    Prevent by atomically changing the dma_pending flag before calling
    dmaengine_terminate_all().
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Fixes: 3ecd37edaa2a ("spi: bcm2835: enable dma modes for transfers meeting certain conditions")
    Cc: stable@vger.kernel.org # v4.2+
    Cc: Mathias Duckeck <m.duckeck@kunbus.de>
    Cc: Frank Pavlic <f.pavlic@kunbus.de>
    Cc: Martin Sperl <kernel@martin.sperl.org>
    Cc: Noralf Tr√∏nnes <noralf@tronnes.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cb4f6559087e99c14f129bc1332c40e84fd0559
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 19 14:36:58 2018 -0500

    ext4: check for shutdown and r/o file system in ext4_write_inode()
    
    commit 18f2c4fcebf2582f96cbd5f2238f4f354a0e4847 upstream.
    
    If the file system has been shut down or is read-only, then
    ext4_write_inode() needs to bail out early.
    
    Also use jbd2_complete_transaction() instead of ext4_force_commit() so
    we only force a commit if it is needed.
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf2fd1f970405aeae0dc7cbf42d1ba82e7bf6b70
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 19 14:07:58 2018 -0500

    ext4: force inode writes when nfsd calls commit_metadata()
    
    commit fde872682e175743e0c3ef939c89e3c6008a1529 upstream.
    
    Some time back, nfsd switched from calling vfs_fsync() to using a new
    commit_metadata() hook in export_operations().  If the file system did
    not provide a commit_metadata() hook, it fell back to using
    sync_inode_metadata().  Unfortunately doesn't work on all file
    systems.  In particular, it doesn't work on ext4 due to how the inode
    gets journalled --- the VFS writeback code will not always call
    ext4_write_inode().
    
    So we need to provide our own ext4_nfs_commit_metdata() method which
    calls ext4_write_inode() directly.
    
    Google-Bug-Id: 121195940
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 263663888d2f00421887e251d93ebc52650a37ab
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 19 12:29:13 2018 -0500

    ext4: avoid declaring fs inconsistent due to invalid file handles
    
    commit 8a363970d1dc38c4ec4ad575c862f776f468d057 upstream.
    
    If we receive a file handle, either from NFS or open_by_handle_at(2),
    and it points at an inode which has not been initialized, and the file
    system has metadata checksums enabled, we shouldn't try to get the
    inode, discover the checksum is invalid, and then declare the file
    system as being inconsistent.
    
    This can be reproduced by creating a test file system via "mke2fs -t
    ext4 -O metadata_csum /tmp/foo.img 8M", mounting it, cd'ing into that
    directory, and then running the following program.
    
    #define _GNU_SOURCE
    #include <fcntl.h>
    
    struct handle {
            struct file_handle fh;
            unsigned char fid[MAX_HANDLE_SZ];
    };
    
    int main(int argc, char **argv)
    {
            struct handle h = {{8, 1 }, { 12, }};
    
            open_by_handle_at(AT_FDCWD, &h.fh, O_RDONLY);
            return 0;
    }
    
    Google-Bug-Id: 120690101
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6633fcb231a0864ca5c961a7664b137474ca3779
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 19 12:28:13 2018 -0500

    ext4: include terminating u32 in size of xattr entries when expanding inodes
    
    commit a805622a757b6d7f65def4141d29317d8e37b8a1 upstream.
    
    In ext4_expand_extra_isize_ea(), we calculate the total size of the
    xattr header, plus the xattr entries so we know how much of the
    beginning part of the xattrs to move when expanding the inode extra
    size.  We need to include the terminating u32 at the end of the xattr
    entries, or else if there is uninitialized, non-zero bytes after the
    xattr entries and before the xattr values, the list of xattr entries
    won't be properly terminated.
    
    Reported-by: Steve Graham <stgraham2000@gmail.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11bb168baef2dc9f613e021749b6f22966ae0959
Author: ruippan (ÊΩòÁùø) <ruippan@tencent.com>
Date:   Tue Dec 4 01:04:12 2018 -0500

    ext4: fix EXT4_IOC_GROUP_ADD ioctl
    
    commit e647e29196b7f802f8242c39ecb7cc937f5ef217 upstream.
    
    Commit e2b911c53584 ("ext4: clean up feature test macros with
    predicate functions") broke the EXT4_IOC_GROUP_ADD ioctl.  This was
    not noticed since only very old versions of resize2fs (before
    e2fsprogs 1.42) use this ioctl.  However, using a new kernel with an
    enterprise Linux userspace will cause attempts to use online resize to
    fail with "No reserved GDT blocks".
    
    Fixes: e2b911c53584 ("ext4: clean up feature test macros with predicate...")
    Cc: stable@kernel.org # v4.4
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: ruippan (ÊΩòÁùø) <ruippan@tencent.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d078853b87a929b9e37055932a7c873647327cb
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Tue Dec 4 00:06:53 2018 -0500

    ext4: missing unlock/put_page() in ext4_try_to_write_inline_data()
    
    commit 132d00becb31e88469334e1e62751c81345280e0 upstream.
    
    In case of error, ext4_try_to_write_inline_data() should unlock
    and release the page it holds.
    
    Fixes: f19d5870cbf7 ("ext4: add normal write support for inline data")
    Cc: stable@kernel.org # 3.8
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a1c177dd90348342ccf918423d91aebb1e32bfb
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Dec 3 23:28:02 2018 -0500

    ext4: fix possible use after free in ext4_quota_enable
    
    commit 61157b24e60fb3cd1f85f2c76a7b1d628f970144 upstream.
    
    The function frees qf_inode via iput but then pass qf_inode to
    lockdep_set_quota_inode on the failure path. This may result in a
    use-after-free bug. The patch frees df_inode only when it is never used.
    
    Fixes: daf647d2dd5 ("ext4: add lockdep annotations for i_data_sem")
    Cc: stable@kernel.org # 4.6
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b878c8a7f08f0c225b6a46ba1ac867e9c5d17807
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Nov 25 17:20:31 2018 -0500

    ext4: add ext4_sb_bread() to disambiguate ENOMEM cases
    
    commit fb265c9cb49e2074ddcdd4de99728aefdd3b3592 upstream.
    
    Today, when sb_bread() returns NULL, this can either be because of an
    I/O error or because the system failed to allocate the buffer.  Since
    it's an old interface, changing would require changing many call
    sites.
    
    So instead we create our own ext4_sb_bread(), which also allows us to
    set the REQ_META flag.
    
    Also fixed a problem in the xattr code where a NULL return in a
    function could also mean that the xattr was not found, which could
    lead to the wrong error getting returned to userspace.
    
    Fixes: ac27a0ec112a ("ext4: initial copy of files from ext3")
    Cc: stable@kernel.org # 2.6.19
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6665481e1c219c5bb22a40523de9e987538fd86b
Author: Greg Kurz <groug@kaod.org>
Date:   Tue Dec 11 18:58:21 2018 +0100

    ocxl: Fix endiannes bug in read_afu_name()
    
    commit 2f07229f02d4c55affccd11a61af4fd4b94dc436 upstream.
    
    The AFU Descriptor Template in the PCI config space has a Name Space
    field which is a 24 Byte ASCII character string of descriptive name
    space for the AFU. The OCXL driver read the string four characters at
    a time with pci_read_config_dword().
    
    This optimization is valid on a little-endian system since this is PCI,
    but a big-endian system ends up with each subset of four characters in
    reverse order.
    
    This could be fixed by switching to read characters one by one. Another
    option is to swap the bytes if we're big-endian.
    
    Go for the latter with le32_to_cpu().
    
    Cc: stable@vger.kernel.org      # v4.16
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Acked-by: Andrew Donnellan <andrew.donnellan@au1.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fbf78b2526831342973ba21654d0b9c79360e94
Author: Greg Kurz <groug@kaod.org>
Date:   Sun Dec 16 22:28:50 2018 +0100

    ocxl: Fix endiannes bug in ocxl_link_update_pe()
    
    commit e1e71e201703500f708bdeaf64660a2a178cb6a0 upstream.
    
    All fields in the PE are big-endian. Use cpu_to_be32() like everywhere
    else something is written to the PE. Otherwise a wrong TID will be used
    by the NPU. If this TID happens to point to an existing thread sharing
    the same mm, it could be woken up by error. This is highly improbable
    though. The likely outcome of this is the NPU not finding the target
    thread and forcing the AFU into sending an interrupt, which userspace
    is supposed to handle anyway.
    
    Fixes: e948e06fc63a ("ocxl: Expose the thread_id needed for wait on POWER9")
    Cc: stable@vger.kernel.org      # v4.18
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Acked-by: Andrew Donnellan <andrew.donnellan@au1.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65e4e67de33d4cba71b5d350f1c8096123aba107
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Nov 27 11:45:49 2018 -0300

    perf env: Also consider env->arch == NULL as local operation
    
    commit 804234f27180dcf9a25cb98a88d5212f65b7f3fd upstream.
    
    We'll set a new machine field based on env->arch, which for live mode,
    like with 'perf top' means we need to use uname() to figure the name of
    the arch, fix perf_env__arch() to consider both (env == NULL) and
    (env->arch == NULL) as local operation.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Cc: stable@vger.kernel.org # 4.19
    Link: https://lkml.kernel.org/n/tip-vcz4ufzdon7cwy8dm2ua53xk@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d124dd5c6acefd149f8c555675853d8cd08136a6
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Nov 11 18:45:24 2018 +0000

    perf pmu: Suppress potential format-truncation warning
    
    commit 11a64a05dc649815670b1be9fe63d205cb076401 upstream.
    
    Depending on which functions are inlined in util/pmu.c, the snprintf()
    calls in perf_pmu__parse_{scale,unit,per_pkg,snapshot}() might trigger a
    warning:
    
      util/pmu.c: In function 'pmu_aliases':
      util/pmu.c:178:31: error: '%s' directive output may be truncated writing up to 255 bytes into a region of size between 0 and 4095 [-Werror=format-truncation=]
        snprintf(path, PATH_MAX, "%s/%s.unit", dir, name);
                                   ^~
    
    I found this when trying to build perf from Linux 3.16 with gcc 8.
    However I can reproduce the problem in mainline if I force
    __perf_pmu__new_alias() to be inlined.
    
    Suppress this by using scnprintf() as has been done elsewhere in perf.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20181111184524.fux4taownc6ndbx6@decadent.org.uk
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 307dbd383650210ce97be436d0d517cbda782c65
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Nov 6 23:07:12 2018 +0200

    perf script: Use fallbacks for branch stacks
    
    commit 692d0e63324d2954a0c63a812a8588e97023a295 upstream.
    
    Branch stacks do not necessarily have the same cpumode as the 'ip'. Use
    the fallback functions in those cases.
    
    This patch depends on patch "perf tools: Add fallback functions for cases
    where cpumode is insufficient".
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: stable@vger.kernel.org # 4.19
    Link: http://lkml.kernel.org/r/20181106210712.12098-4-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39dad822b7854f4cd1f4f41eebefc65d277a19c1
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Nov 6 23:07:11 2018 +0200

    perf tools: Use fallback for sample_addr_correlates_sym() cases
    
    commit 225f99e0c811e23836c4911a2ff147e167dd1fe8 upstream.
    
    thread__resolve() is used in the sample_addr_correlates_sym() cases
    where 'addr' is a destination of a branch which does not necessarily
    have the same cpumode as the 'ip'. Use the fallback function in that
    case.
    
    This patch depends on patch "perf tools: Add fallback functions for
    cases where cpumode is insufficient".
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: stable@vger.kernel.org # 4.19
    Link: http://lkml.kernel.org/r/20181106210712.12098-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ada27a74438e0d3dd809aa17d9d7035ec4621e7
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Nov 6 23:07:10 2018 +0200

    perf thread: Add fallback functions for cases where cpumode is insufficient
    
    commit 8e80ad9983caeee09c3a0a1a37e05bff93becce4 upstream.
    
    For branch stacks or branch samples, the sample cpumode might not be
    correct because it applies only to the sample 'ip' and not necessary to
    'addr' or branch stack addresses. Add fallback functions that can be
    used to deal with those cases
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: stable@vger.kernel.org # 4.19
    Link: http://lkml.kernel.org/r/20181106210712.12098-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62977a9ba8dd8bafdf2190c1cfe6dfbc7f4d2569
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Nov 6 23:07:10 2018 +0200

    perf machine: Record if a arch has a single user/kernel address space
    
    commit ec1891afae740be581ecf5abc8bda74c4549203f upstream.
    
    Some architectures have a single address space for kernel and user
    addresses, which makes it possible to determine if an address is in
    kernel space or user space. Some don't, e.g.: sparc.
    
    Cache that info in perf_env so that, for instance, code needing to
    fallback failed symbol lookups at the kernel space in single address
    space arches can lookup at userspace.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: stable@vger.kernel.org # 4.19
    Link: http://lkml.kernel.org/r/20181106210712.12098-2-adrian.hunter@intel.com
    [ split from a larger patch ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf75d9382bc4c57873c4193f90685058b6adf934
Author: Alexey Brodkin <alexey.brodkin@synopsys.com>
Date:   Mon Nov 19 14:29:17 2018 +0300

    clocksource/drivers/arc_timer: Utilize generic sched_clock
    
    commit bf287607c80f24387fedb431a346dc67f25be12c upstream.
    
    It turned out we used to use default implementation of sched_clock()
    from kernel/sched/clock.c which was as precise as 1/HZ, i.e.
    by default we had 10 msec granularity of time measurement.
    
    Now given ARC built-in timers are clocked with the same frequency as
    CPU cores we may get much higher precision of time tracking.
    
    Thus we switch to generic sched_clock which really reads ARC hardware
    counters.
    
    This is especially helpful for measuring short events.
    That's what we used to have:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
             10.000000      task-clock (msec)         #    2.832 CPUs utilized
                     1      context-switches          #    0.100 K/sec
                     1      cpu-migrations            #    0.100 K/sec
                    63      page-faults               #    0.006 M/sec
               3049480      cycles                    #    0.305 GHz
               1091259      instructions              #    0.36  insn per cycle
                256828      branches                  #   25.683 M/sec
                 27026      branch-misses             #   10.52% of all branches
    
           0.003530687 seconds time elapsed
    
           0.000000000 seconds user
           0.010000000 seconds sys
    ------------------------------>8------------------------
    
    And now we'll see:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
              3.004322      task-clock (msec)         #    0.865 CPUs utilized
                     1      context-switches          #    0.333 K/sec
                     1      cpu-migrations            #    0.333 K/sec
                    63      page-faults               #    0.021 M/sec
               2986734      cycles                    #    0.994 GHz
               1087466      instructions              #    0.36  insn per cycle
                255209      branches                  #   84.947 M/sec
                 26002      branch-misses             #   10.19% of all branches
    
           0.003474829 seconds time elapsed
    
           0.003519000 seconds user
           0.000000000 seconds sys
    ------------------------------>8------------------------
    
    Note how much more meaningful is the second output - time spent for
    execution pretty much matches number of cycles spent (we're runnign
    @ 1GHz here).
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca3a6fd272bb446a240b0b5c29980e1ac54aaa40
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Fri Sep 28 17:41:26 2018 +0300

    DRM: UDL: get rid of useless vblank initialization
    
    commit 32e932e37e6b6e13b66add307192c7ddd40a781d upstream.
    
    UDL doesn't support vblank functionality so we don't need to
    initialize vblank here (we are able to send page flip
    completion events even without vblank initialization)
    
    Moreover current drm_vblank_init call with num_crtcs > 0 causes
    sending DRM_EVENT_FLIP_COMPLETE event with zero timestamp every
    time. This breaks userspace apps (for example weston) which
    relies on timestamp value.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180928144126.21598-1-Eugeniy.Paltsev@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29ac2218a9f88e9a459fbaaf6107e9f8438faa70
Author: Eric Anholt <eric@anholt.net>
Date:   Fri Sep 28 16:21:26 2018 -0700

    drm/v3d: Skip debugfs dumping GCA on platforms without GCA.
    
    commit 2f20fa8d12e859a03f68bdd81d75830141bc9ac9 upstream.
    
    Fixes an oops reading this debugfs entry on BCM7278.
    
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180928232126.4332-4-eric@anholt.net
    Fixes: 57692c94dcbe ("drm/v3d: Introduce a new DRM driver for Broadcom V3D V3.x+")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c56e89e4ebe916990de1dcec0f568948755eca4
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Thu Oct 11 11:12:34 2018 +0200

    platform-msi: Free descriptors in platform_msi_domain_free()
    
    commit 81b1e6e6a8590a19257e37a1633bec098d499c57 upstream.
    
    Since the addition of platform MSI support, there were two helpers
    supposed to allocate/free IRQs for a device:
    
        platform_msi_domain_alloc_irqs()
        platform_msi_domain_free_irqs()
    
    In these helpers, IRQ descriptors are allocated in the "alloc" routine
    while they are freed in the "free" one.
    
    Later, two other helpers have been added to handle IRQ domains on top
    of MSI domains:
    
        platform_msi_domain_alloc()
        platform_msi_domain_free()
    
    Seen from the outside, the logic is pretty close with the former
    helpers and people used it with the same logic as before: a
    platform_msi_domain_alloc() call should be balanced with a
    platform_msi_domain_free() call. While this is probably what was
    intended to do, the platform_msi_domain_free() does not remove/free
    the IRQ descriptor(s) created/inserted in
    platform_msi_domain_alloc().
    
    One effect of such situation is that removing a module that requested
    an IRQ will let one orphaned IRQ descriptor (with an allocated MSI
    entry) in the device descriptors list. Next time the module will be
    inserted back, one will observe that the allocation will happen twice
    in the MSI domain, one time for the remaining descriptor, one time for
    the new one. It also has the side effect to quickly overshoot the
    maximum number of allocated MSI and then prevent any module requesting
    an interrupt in the same domain to be inserted anymore.
    
    This situation has been met with loops of insertion/removal of the
    mvpp2.ko module (requesting 15 MSIs each time).
    
    Fixes: 552c494a7666 ("platform-msi: Allow creation of a MSI-based stacked irq domain")
    Cc: stable@vger.kernel.org
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9dae887cf649f68d053bb0a8cb87f748789c881
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon Dec 3 13:52:51 2018 -0800

    KVM: nVMX: Free the VMREAD/VMWRITE bitmaps if alloc_kvm_area() fails
    
    commit 1b3ab5ad1b8ad99bae76ec583809c5f5a31c707c upstream.
    
    Fixes: 34a1cd60d17f ("kvm: x86: vmx: move some vmx setting from vmx_init() to hardware_setup()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07cbcfc33fc96ed3a4ee02ed81d2989bef7ec084
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 6 17:31:19 2018 +0000

    arm64: KVM: Make VHE Stage-2 TLB invalidation operations non-interruptible
    
    commit c987876a80e7bcb98a839f10dca9ce7fda4feced upstream.
    
    Contrary to the non-VHE version of the TLB invalidation helpers, the VHE
    code  has interrupts enabled, meaning that we can take an interrupt in
    the middle of such a sequence, and start running something else with
    HCR_EL2.TGE cleared.
    
    That's really not a good idea.
    
    Take the heavy-handed option and disable interrupts in
    __tlb_switch_to_guest_vhe, restoring them in __tlb_switch_to_host_vhe.
    The latter also gain an ISB in order to make sure that TGE really has
    taken effect.
    
    Cc: stable@vger.kernel.org
    Acked-by: Christoffer Dall <christoffer.dall@arm.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edcf33b155fe65c4cf2f94759a0da35fe14e5c33
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Dec 20 14:21:08 2018 -0800

    KVM: x86: Use jmp to invoke kvm_spurious_fault() from .fixup
    
    commit e81434995081fd7efb755fd75576b35dbb0850b1 upstream.
    
    ____kvm_handle_fault_on_reboot() provides a generic exception fixup
    handler that is used to cleanly handle faults on VMX/SVM instructions
    during reboot (or at least try to).  If there isn't a reboot in
    progress, ____kvm_handle_fault_on_reboot() treats any exception as
    fatal to KVM and invokes kvm_spurious_fault(), which in turn generates
    a BUG() to get a stack trace and die.
    
    When it was originally added by commit 4ecac3fd6dc2 ("KVM: Handle
    virtualization instruction #UD faults during reboot"), the "call" to
    kvm_spurious_fault() was handcoded as PUSH+JMP, where the PUSH'd value
    is the RIP of the faulting instructing.
    
    The PUSH+JMP trickery is necessary because the exception fixup handler
    code lies outside of its associated function, e.g. right after the
    function.  An actual CALL from the .fixup code would show a slightly
    bogus stack trace, e.g. an extra "random" function would be inserted
    into the trace, as the return RIP on the stack would point to no known
    function (and the unwinder will likely try to guess who owns the RIP).
    
    Unfortunately, the JMP was replaced with a CALL when the macro was
    reworked to not spin indefinitely during reboot (commit b7c4145ba2eb
    "KVM: Don't spin on virt instruction faults during reboot").  This
    causes the aforementioned behavior where a bogus function is inserted
    into the stack trace, e.g. my builds like to blame free_kvm_area().
    
    Revert the CALL back to a JMP.  The changelog for commit b7c4145ba2eb
    ("KVM: Don't spin on virt instruction faults during reboot") contains
    nothing that indicates the switch to CALL was deliberate.  This is
    backed up by the fact that the PUSH <insn RIP> was left intact.
    
    Note that an alternative to the PUSH+JMP magic would be to JMP back
    to the "real" code and CALL from there, but that would require adding
    a JMP in the non-faulting path to avoid calling kvm_spurious_fault()
    and would add no value, i.e. the stack trace would be the same.
    
    Using CALL:
    
    ------------[ cut here ]------------
    kernel BUG at /home/sean/go/src/kernel.org/linux/arch/x86/kvm/x86.c:356!
    invalid opcode: 0000 [#1] SMP
    CPU: 4 PID: 1057 Comm: qemu-system-x86 Not tainted 4.20.0-rc6+ #75
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
    RIP: 0010:kvm_spurious_fault+0x5/0x10 [kvm]
    Code: <0f> 0b 66 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 41 55 49 89 fd 41
    RSP: 0018:ffffc900004bbcc8 EFLAGS: 00010046
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffffffffffff
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffff888273fd8000 R08: 00000000000003e8 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000784 R12: ffffc90000371fb0
    R13: 0000000000000000 R14: 000000026d763cf4 R15: ffff888273fd8000
    FS:  00007f3d69691700(0000) GS:ffff888277800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055f89bc56fe0 CR3: 0000000271a5a001 CR4: 0000000000362ee0
    Call Trace:
     free_kvm_area+0x1044/0x43ea [kvm_intel]
     ? vmx_vcpu_run+0x156/0x630 [kvm_intel]
     ? kvm_arch_vcpu_ioctl_run+0x447/0x1a40 [kvm]
     ? kvm_vcpu_ioctl+0x368/0x5c0 [kvm]
     ? kvm_vcpu_ioctl+0x368/0x5c0 [kvm]
     ? __set_task_blocked+0x38/0x90
     ? __set_current_blocked+0x50/0x60
     ? __fpu__restore_sig+0x97/0x490
     ? do_vfs_ioctl+0xa1/0x620
     ? __x64_sys_futex+0x89/0x180
     ? ksys_ioctl+0x66/0x70
     ? __x64_sys_ioctl+0x16/0x20
     ? do_syscall_64+0x4f/0x100
     ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    Modules linked in: vhost_net vhost tap kvm_intel kvm irqbypass bridge stp llc
    ---[ end trace 9775b14b123b1713 ]---
    
    Using JMP:
    
    ------------[ cut here ]------------
    kernel BUG at /home/sean/go/src/kernel.org/linux/arch/x86/kvm/x86.c:356!
    invalid opcode: 0000 [#1] SMP
    CPU: 6 PID: 1067 Comm: qemu-system-x86 Not tainted 4.20.0-rc6+ #75
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
    RIP: 0010:kvm_spurious_fault+0x5/0x10 [kvm]
    Code: <0f> 0b 66 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 41 55 49 89 fd 41
    RSP: 0018:ffffc90000497cd0 EFLAGS: 00010046
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffffffffffff
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffff88827058bd40 R08: 00000000000003e8 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000784 R12: ffffc90000369fb0
    R13: 0000000000000000 R14: 00000003c8fc6642 R15: ffff88827058bd40
    FS:  00007f3d7219e700(0000) GS:ffff888277900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f3d64001000 CR3: 0000000271c6b004 CR4: 0000000000362ee0
    Call Trace:
     vmx_vcpu_run+0x156/0x630 [kvm_intel]
     ? kvm_arch_vcpu_ioctl_run+0x447/0x1a40 [kvm]
     ? kvm_vcpu_ioctl+0x368/0x5c0 [kvm]
     ? kvm_vcpu_ioctl+0x368/0x5c0 [kvm]
     ? __set_task_blocked+0x38/0x90
     ? __set_current_blocked+0x50/0x60
     ? __fpu__restore_sig+0x97/0x490
     ? do_vfs_ioctl+0xa1/0x620
     ? __x64_sys_futex+0x89/0x180
     ? ksys_ioctl+0x66/0x70
     ? __x64_sys_ioctl+0x16/0x20
     ? do_syscall_64+0x4f/0x100
     ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    Modules linked in: vhost_net vhost tap kvm_intel kvm irqbypass bridge stp llc
    ---[ end trace f9daedb85ab3ddba ]---
    
    Fixes: b7c4145ba2eb ("KVM: Don't spin on virt instruction faults during reboot")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4910271928c2b97b004ca209584ceea5a0588ba8
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Dec 4 13:37:27 2018 -0800

    x86/mm: Drop usage of __flush_tlb_all() in kernel_physical_mapping_init()
    
    commit ba6f508d0ec4adb09f0a939af6d5e19cdfa8667d upstream.
    
    Commit:
    
      f77084d96355 "x86/mm/pat: Disable preemption around __flush_tlb_all()"
    
    addressed a case where __flush_tlb_all() is called without preemption
    being disabled. It also left a warning to catch other cases where
    preemption is not disabled.
    
    That warning triggers for the memory hotplug path which is also used for
    persistent memory enabling:
    
     WARNING: CPU: 35 PID: 911 at ./arch/x86/include/asm/tlbflush.h:460
     RIP: 0010:__flush_tlb_all+0x1b/0x3a
     [..]
     Call Trace:
      phys_pud_init+0x29c/0x2bb
      kernel_physical_mapping_init+0xfc/0x219
      init_memory_mapping+0x1a5/0x3b0
      arch_add_memory+0x2c/0x50
      devm_memremap_pages+0x3aa/0x610
      pmem_attach_disk+0x585/0x700 [nd_pmem]
    
    Andy wondered why a path that can sleep was using __flush_tlb_all() [1]
    and Dave confirmed the expectation for TLB flush is for modifying /
    invalidating existing PTE entries, but not initial population [2]. Drop
    the usage of __flush_tlb_all() in phys_{p4d,pud,pmd}_init() on the
    expectation that this path is only ever populating empty entries for the
    linear map. Note, at linear map teardown time there is a call to the
    all-cpu flush_tlb_all() to invalidate the removed mappings.
    
    [1]: https://lkml.kernel.org/r/9DFD717D-857D-493D-A606-B635D72BAC21@amacapital.net
    [2]: https://lkml.kernel.org/r/749919a4-cdb1-48a3-adb4-adb81a5fa0b5@intel.com
    
    [ mingo: Minor readability edits. ]
    
    Suggested-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: dave.hansen@intel.com
    Fixes: f77084d96355 ("x86/mm/pat: Disable preemption around __flush_tlb_all()")
    Link: http://lkml.kernel.org/r/154395944713.32119.15611079023837132638.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86ba6f66c9c16acd38c1bfa1cdf53a570d3e39a5
Author: Michal Hocko <mhocko@suse.com>
Date:   Tue Nov 13 19:49:10 2018 +0100

    x86/speculation/l1tf: Drop the swap storage limit restriction when l1tf=off
    
    commit 5b5e4d623ec8a34689df98e42d038a3b594d2ff9 upstream.
    
    Swap storage is restricted to max_swapfile_size (~16TB on x86_64) whenever
    the system is deemed affected by L1TF vulnerability. Even though the limit
    is quite high for most deployments it seems to be too restrictive for
    deployments which are willing to live with the mitigation disabled.
    
    We have a customer to deploy 8x 6,4TB PCIe/NVMe SSD swap devices which is
    clearly out of the limit.
    
    Drop the swap restriction when l1tf=off is specified. It also doesn't make
    much sense to warn about too much memory for the l1tf mitigation when it is
    forcefully disabled by the administrator.
    
    [ tglx: Folded the documentation delta change ]
    
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: <linux-mm@kvack.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181113184910.26697-1-mhocko@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeb5e53416965cea9a5186c6154b9f395a538740
Author: Patrick Dreyer <Patrick@Dreyer.name>
Date:   Sun Dec 23 10:06:35 2018 -0800

    Input: elan_i2c - add ACPI ID for touchpad in ASUS Aspire F5-573G
    
    commit 7db54c89f0b30a101584e09d3729144e6170059d upstream.
    
    This adds ELAN0501 to the ACPI table to support Elan touchpad found in ASUS
    Aspire F5-573G.
    
    Signed-off-by: Patrick Dreyer <Patrick.Dreyer@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1680565304c524fd94f913575ac802fb865181a
Author: Sanjeev Chugh <sanjeev_chugh@mentor.com>
Date:   Fri Dec 28 17:04:31 2018 -0800

    Input: atmel_mxt_ts - don't try to free unallocated kernel memory
    
    commit 1e3c336ad8f40f88a8961c434640920fe35cc08b upstream.
    
    If the user attempts to update Atmel device with an invalid configuration
    cfg file, error handling code is trying to free cfg file memory which is
    not allocated yet hence results into kernel crash.
    
    This patch fixes the order of memory free operations.
    
    Signed-off-by: Sanjeev Chugh <sanjeev_chugh@mentor.com>
    Fixes: a4891f105837 ("Input: atmel_mxt_ts - zero terminate config firmware file")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d648a9bdac4b9705e48f0131a71f264eca8fd520
Author: Sebastian Ott <sebott@linux.ibm.com>
Date:   Thu Oct 18 11:11:08 2018 +0200

    s390/pci: fix sleeping in atomic during hotplug
    
    commit 98dfd32620e970eb576ebce5ea39d905cb005e72 upstream.
    
    When triggered by pci hotplug (PEC 0x306) clp_get_state is called
    with spinlocks held resulting in the following warning:
    
    zpci: n/a: Event 0x306 reconfigured PCI function 0x0
    BUG: sleeping function called from invalid context at mm/page_alloc.c:4324
    in_atomic(): 1, irqs_disabled(): 0, pid: 98, name: kmcheck
    2 locks held by kmcheck/98:
    
    Change the allocation to use GFP_ATOMIC.
    
    Cc: stable@vger.kernel.org # 4.13+
    Signed-off-by: Sebastian Ott <sebott@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47148001ae12292984ba1b38d9babefb9a46cd3e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Dec 3 21:45:14 2018 +0100

    ASoC: intel: cht_bsw_max98090_ti: Add pmc_plt_clk_0 quirk for Chromebook Gnawty
    
    commit 94ea56cff506c769a509c5dd87904c7fe3806a81 upstream.
    
    The Gnawty model Chromebook uses pmc_plt_clk_0 instead of pmc_plt_clk_3
    for the mclk, just like the Clapper and Swanky models.
    
    This commit adds a DMI based quirk for this.
    
    This fixing audio no longer working on these devices after
    commit 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    that commit fixes us unnecessary keeping unused clocks on, but in case of
    the Gnawty that was breaking audio support since we were not using the
    right clock in the cht_bsw_max98090_ti machine driver.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=201787
    Cc: stable@vger.kernel.org
    Fixes: 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    Reported-and-tested-by: Jaime P√©rez <19.jaime.91@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4b6173e54ca9b80e4e75cbf2adf13a04c2c4f85
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Dec 2 13:21:22 2018 +0100

    ASoC: intel: cht_bsw_max98090_ti: Add pmc_plt_clk_0 quirk for Chromebook Clapper
    
    commit 984bfb398a3af6fa9b7e80165e524933b0616686 upstream.
    
    The Clapper model Chromebook uses pmc_plt_clk_0 instead of pmc_plt_clk_3
    for the mclk, just like the Swanky model.
    
    This commit adds a DMI based quirk for this.
    
    This fixing audio no longer working on these devices after
    commit 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    that commit fixes us unnecessary keeping unused clocks on, but in case of
    the Clapper that was breaking audio support since we were not using the
    right clock in the cht_bsw_max98090_ti machine driver.
    
    Cc: stable@vger.kernel.org
    Fixes: 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cd208cb934f26d80bf0a1f4da727da46f9a2eac
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Dec 19 16:30:07 2018 +0000

    staging: wilc1000: fix missing read_write setting when reading data
    
    commit c58eef061dda7d843dcc0ad6fea7e597d4c377c0 upstream.
    
    Currently the cmd.read_write setting is not initialized so it contains
    garbage from the stack.  Fix this by setting it to 0 to indicate a
    read is required.
    
    Detected by CoverityScan, CID#1357925 ("Uninitialized scalar variable")
    
    Fixes: c5c77ba18ea6 ("staging: wilc1000: Add SDIO/SPI 802.11 driver")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Ajay Singh <ajay.kathat@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80562cf3b1886d59f8a966807b4029e143198dc6
Author: Malcolm Priestley <tvboxspy@gmail.com>
Date:   Mon Nov 26 15:18:25 2018 -0500

    media: dvb-usb-v2: Fix incorrect use of transfer_flags URB_FREE_BUFFER
    
    commit 255095fa7f62ff09b6f61393414535c59c6b4cb0 upstream.
    
    commit 1a0c10ed7bb1 ("media: dvb-usb-v2: stop using coherent memory for
    URBs") incorrectly adds URB_FREE_BUFFER after every urb transfer.
    
    It cannot use this flag because it reconfigures the URBs accordingly
    to suit connected devices. In doing a call to usb_free_urb is made and
    invertedly frees the buffers.
    
    The stream buffer should remain constant while driver is up.
    
    Signed-off-by: Malcolm Priestley <tvboxspy@gmail.com>
    CC: stable@vger.kernel.org # v4.18+
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f295bc9b8c9c7c0a9a49fa39538277422679a5cf
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Dec 12 20:13:55 2018 +0300

    usb: roles: Add a description for the class to Kconfig
    
    commit c3788cd9963eb2e77de3c24142fb7c67b61f1a26 upstream.
    
    That makes the USB role switch support option visible and
    selectable for the user. The class driver is also moved to
    drivers/usb/roles/ directory.
    
    This will fix an issue that we have with the Intel USB role
    switch driver on systems that don't have USB Type-C connectors:
    
    Intel USB role switch driver depends on the USB role switch
    class as it should, but since there was no way for the user
    to enable the USB role switch class, there was also no way
    to select that driver. USB Type-C drivers select the USB
    role switch class which makes the Intel USB role switch
    driver available and therefore hides the problem.
    
    So in practice Intel USB role switch driver was depending on
    USB Type-C drivers.
    
    Fixes: f6fb9ec02be1 ("usb: roles: Add Intel xHCI USB role switch driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c1f18773406a39a9181f5905a727fb7cb00bf96
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Thu Dec 6 19:42:28 2018 +0100

    Revert "usb: dwc3: pci: Use devm functions to get the phy GPIOs"
    
    commit 3004cfd6204927c1294060b849029cf0c2651074 upstream.
    
    Commit 211f658b7b40 ("usb: dwc3: pci: Use devm functions to get
    the phy GPIOs") changed the code to claim the PHY GPIOs permanently
    for Intel Baytrail devices.
    
    This causes issues when the actual PHY driver attempts to claim the
    same GPIO descriptors. For example, tusb1210 now fails to probe with:
    
      tusb1210: probe of dwc3.0.auto.ulpi failed with error -16 (EBUSY)
    
    dwc3-pci needs to turn on the PHY once before dwc3 is loaded, but
    usually the PHY driver will then hold the GPIOs to turn off the
    PHY when requested (e.g. during suspend).
    
    To fix the problem, this reverts the commit to restore the old
    behavior to put the GPIOs immediately after usage.
    
    Link: https://www.spinics.net/lists/linux-usb/msg174681.html
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1ab9f3d69f6fe6865c4968b9f240487b4061d54
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Dec 9 20:01:29 2018 +0100

    usb: dwc2: disable power_down on Amlogic devices
    
    commit cc10ce0c51b13d1566d0ec1dcb472fb86330b391 upstream.
    
    Disable power_down by setting the parameter to
    DWC2_POWER_DOWN_PARAM_NONE. This fixes a problem on various Amlogic
    Meson SoCs where USB devices are only recognized when plugged in before
    booting Linux. A hot-plugged USB device was not detected even though the
    device got power (my USB thumb drive for example has an LED which lit
    up).
    
    A similar fix was implemented for Rockchip SoCs in commit c216765d3a1def
    ("usb: dwc2: disable power_down on rockchip devices"). That commit
    suggests that a change in the dwc2 driver is the cause because the
    default value for the "hibernate" parameter (which then got renamed to
    "power_down" to support other modes) was changed in the v4.17 merge
    window with:
    commit 6d23ee9caa6790 ("Merge tag 'usb-for-v4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb into usb-testing").
    
    Cc: <stable@vger.kernel.org> # 4.19
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Suggested-by: Christian Hewitt <christianshewitt@gmail.com>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4dbeba2addf148d8c629c3376eaafb3ab3ca10
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Tue Dec 18 20:04:25 2018 +0800

    usb: r8a66597: Fix a possible concurrency use-after-free bug in r8a66597_endpoint_disable()
    
    commit c85400f886e3d41e69966470879f635a2b50084c upstream.
    
    The function r8a66597_endpoint_disable() and r8a66597_urb_enqueue() may
    be concurrently executed.
    The two functions both access a possible shared variable "hep->hcpriv".
    
    This shared variable is freed by r8a66597_endpoint_disable() via the
    call path:
    r8a66597_endpoint_disable
      kfree(hep->hcpriv) (line 1995 in Linux-4.19)
    
    This variable is read by r8a66597_urb_enqueue() via the call path:
    r8a66597_urb_enqueue
      spin_lock_irqsave(&r8a66597->lock)
      init_pipe_info
        enable_r8a66597_pipe
          pipe = hep->hcpriv (line 802 in Linux-4.19)
    
    The read operation is protected by a spinlock, but the free operation
    is not protected by this spinlock, thus a concurrency use-after-free bug
    may occur.
    
    To fix this bug, the spin-lock and spin-unlock function calls in
    r8a66597_endpoint_disable() are moved to protect the free operation.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a5d034b5e86c70abb04ea7440255f47982bc2f7
Author: J√∂rgen Storvist <jorgen.storvist@gmail.com>
Date:   Fri Dec 21 14:40:44 2018 +0100

    USB: serial: option: add Fibocom NL678 series
    
    commit 4b2c01ad902ec02fa962b233decd2f14be3714ba upstream.
    
    Added USB serial option driver support for Fibocom NL678 series cellular
    module: VID 2cb7 and PIDs 0x0104 and 0x0105.
    Reserved network and ADB interfaces.
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=0104 Rev=03.10
    S:  Manufacturer=Fibocom
    S:  Product=Fibocom NL678-E Modem
    S:  SerialNumber=12345678
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  3 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=0105 Rev=03.10
    S:  Manufacturer=Fibocom
    S:  Product=Fibocom NL678-E Modem
    S:  SerialNumber=12345678
    C:  #Ifs= 7 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 4 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    I:  If#= 5 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    I:  If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    Signed-off-by: J√∂rgen Storvist <jorgen.storvist@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f37b8b18b54fc43f636980d8e0b8c057f039263e
Author: Scott Chen <scott@labau.com.tw>
Date:   Thu Dec 13 06:01:47 2018 -0500

    USB: serial: pl2303: add ids for Hewlett-Packard HP POS pole displays
    
    commit 8d503f206c336677954160ac62f0c7d9c219cd89 upstream.
    
    Add device ids to pl2303 for the HP POS pole displays:
    LM920:   03f0:026b
    TD620:   03f0:0956
    LD960TA: 03f0:4439
    LD220TA: 03f0:4349
    LM940:   03f0:5039
    
    Signed-off-by: Scott Chen <scott@labau.com.tw>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9339eaf7ff4fafe9d48cfe6e95e626adabd781a6
Author: Terin Stock <terin@terinstock.com>
Date:   Sun Sep 9 21:24:31 2018 -0700

    usb: dwc2: host: use hrtimer for NAK retries
    
    commit 6ed30a7d8ec29d3aba46e47aa8b4a44f077dda4e upstream.
    
    Modify the wait delay utilize the high resolution timer API to allow for
    more precisely scheduled callbacks.
    
    A previous commit added a 1ms retry delay after multiple consecutive
    NAKed transactions using jiffies. On systems with a low timer interrupt
    frequency, this delay may be significantly longer than specified,
    resulting in misbehavior with some USB devices.
    
    This scenario was reached on a Raspberry Pi 3B with a Macally FDD-USB
    floppy drive (identified as 0424:0fdc Standard Microsystems Corp.
    Floppy, based on the USB97CFDC USB FDC). With the relay delay, the drive
    would be unable to mount a disk, replying with NAKs until the device was
    reset.
    
    Using ktime, the delta between starting the timer (in dwc2_hcd_qh_add)
    and the callback function can be determined. With the original delay
    implementation, this value was consistently approximately 12ms. (output
    in us).
    
        <idle>-0     [000] ..s.  1600.559974: dwc2_wait_timer_fn: wait_timer delta: 11976
        <idle>-0     [000] ..s.  1600.571974: dwc2_wait_timer_fn: wait_timer delta: 11977
        <idle>-0     [000] ..s.  1600.583974: dwc2_wait_timer_fn: wait_timer delta: 11976
        <idle>-0     [000] ..s.  1600.595974: dwc2_wait_timer_fn: wait_timer delta: 11977
    
    After converting the relay delay to using a higher resolution timer, the
    delay was much closer to 1ms.
    
        <idle>-0     [000] d.h.  1956.553017: dwc2_wait_timer_fn: wait_timer delta: 1002
        <idle>-0     [000] d.h.  1956.554114: dwc2_wait_timer_fn: wait_timer delta: 1002
        <idle>-0     [000] d.h.  1957.542660: dwc2_wait_timer_fn: wait_timer delta: 1004
        <idle>-0     [000] d.h.  1957.543701: dwc2_wait_timer_fn: wait_timer delta: 1002
    
    The floppy drive operates properly with delays up to approximately 5ms,
    and sends NAKs for any delays that are longer.
    
    Fixes: 38d2b5fb75c1 ("usb: dwc2: host: Don't retry NAKed transactions right away")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: Terin Stock <terin@terinstock.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7882957c12834b30bd6c93069412cbfb1c6c8a
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Wed Dec 26 16:04:49 2018 +0530

    ALSA: hda/tegra: clear pending irq handlers
    
    commit 63d2a9ec310d8bcc955574220d4631aa55c1a80c upstream.
    
    Even after disabling interrupts on the module, it could be possible
    that irq handlers are still running. System hang is seen during
    suspend path. It was found that, there were pending writes on the
    HDA bus and clock was disabled by that time.
    
    Above mentioned issue is fixed by clearing any pending irq handlers
    before disabling clocks and returning from hda suspend.
    
    Suggested-by: Mohan Kumar <mkumard@nvidia.com>
    Suggested-by: Dara Ramesh <dramesh@nvidia.com>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22bc89a31109c501b4fd5c0061cc856b6d831466
Author: Jian-Hong Pan <jian-hong@endlessm.com>
Date:   Thu Dec 27 16:46:31 2018 +0800

    ALSA: hda/realtek: Enable the headset mic auto detection for ASUS laptops
    
    commit 82b01149ec94d746867d7f9156c44d775d4d2d67 upstream.
    
    The headset mic of ASUS laptops like UX533FD, UX433FN and UX333FA, whose
    CODEC is Realtek ALC294 has jack auto detection feature. This patch
    enables the feature.
    
    Fixes: 4e051106730d ("ALSA: hda/realtek: Enable audio jacks of ASUS UX533FD with ALC294")
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 302d9834ef2944459ac8937d100f6be795affc16
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Dec 15 19:03:21 2018 +0900

    ALSA: firewire-lib: use the same print format for 'without_header' tracepoints
    
    commit 5ef108c53e6efd695e32aad969638ccbc35b4be9 upstream.
    
    An initial commit to add tracepoints for packets without CIP headers
    uses different print formats for added tracepoints. However this is not
    convenient for users/developers to prepare debug tools.
    
    This commit uses the same format for the two tracepoints.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: b164d2fd6e49 ('ALSA: firewire_lib: add tracepoints for packets without CIP headers')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec7334b5ad18bb01327c957ad25797e5de07885e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Dec 15 19:03:20 2018 +0900

    ALSA: firewire-lib: fix wrong assignment for 'out_packet_without_header' tracepoint
    
    commit aa9a9e39b4f65733bf19d90cbd026e85a74efb99 upstream.
    
    An initial commit to add tracepoints for packets without CIP headers
    introduces a wrong assignment to 'data_blocks' value of
    'out_packet_without_header' tracepoint.
    
    This commit fixes the bug.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: b164d2fd6e49 ('ALSA: firewire_lib: add tracepoints for packets without CIP headers')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 438b26705896e8a540b5f124c2ecd6a71fadf522
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Dec 15 19:03:19 2018 +0900

    ALSA: firewire-lib: fix wrong handling payload_length as payload_quadlet
    
    commit ada79fa5a0b374dd2c2262137c734da7524a8263 upstream.
    
    In IEC 61883-1/6 engine of ALSA firewire stack, a packet handler has a
    second argument for 'the number of bytes in payload of isochronous
    packet'. However, an incoming packet handler without CIP header uses the
    value as 'the number of quadlets in the payload'. This brings userspace
    applications to receive the number of PCM frames as four times against
    real time.
    
    This commit fixes the bug.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: 3b196c394dd ('ALSA: firewire-lib: add no-header packet processing')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8be7cd59d37f8067a0eec305a52193983f7f246
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Dec 15 19:06:48 2018 +0900

    ALSA: fireface: fix for state to fetch PCM frames
    
    commit 3d16200a3e55a39caa1c88419cb559c00316f721 upstream.
    
    According to my memo at hand and saved records, writing 0x00000001 to
    SND_FF_REG_FETCH_PCM_FRAMES disables fetching PCM frames in corresponding
    channel, however current implement uses reversed logic. This results in
    muted volume in device side during playback.
    
    This commit corrects the bug.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: 76fdb3a9e13a ('ALSA: fireface: add support for Fireface 400')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ded351759d028734d1233eb24de8f165f0e4438
Author: Wandrille RONCE <w@ndrille.fr>
Date:   Wed Dec 19 14:52:44 2018 +0100

    ALSA: hda/realtek: Enable audio jacks of ASUS UX391UA with ALC294
    
    commit 9cf6533e8060d3896b88ea14b27f620e6504b84b upstream.
    
    By default, there is no sound on Asus UX391UA on Linux.
    
    This patch adds sound support on Asus UX391UA. Tested working by three
    different users.
    
    The problem has also been described at
    https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1784485
    
    Signed-off-by: Wandrille RONCE <w@ndrille.fr>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 691d06e60d9df91bc70d7b4568400bef1735c283
Author: Mantas Mikulƒónas <grawity@gmail.com>
Date:   Sun Dec 16 15:44:47 2018 +0200

    ALSA: hda: add mute LED support for HP EliteBook 840 G4
    
    commit 40906ebe3af6a48457151b3c6726b480f6a6cb13 upstream.
    
    Tested with 4.19.9.
    
    v2: Changed from CXT_FIXUP_MUTE_LED_GPIO to CXT_FIXUP_HP_DOCK because
        that's what the existing fixups for EliteBooks use.
    
    Signed-off-by: Mantas Mikulƒónas <grawity@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cec876b46e191b7569754c6ed5be76ee54d4669b
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Thu Dec 13 20:22:27 2018 +0100

    mtd: rawnand: omap2: Pass the parent of pdev to dma_request_chan()
    
    commit 9b432630e0150b777c423fdef6a7b8d17dfa70b6 upstream.
    
    Commit e1e6255c311b ("mtd: rawnand: omap2: convert driver to
    nand_scan()") moved part of the init code in the ->attach_chip hook
    and at the same time changed the struct device object passed to
    dma_request_chan() (&pdev->dev instead of pdev->dev.parent).
    
    Fixes: e1e6255c311b ("mtd: rawnand: omap2: convert driver to nand_scan()")
    Reported-by: Alexander Sverdlin <alexander.sverdlin@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Tested-by: Alexander Sverdlin <alexander.sverdlin@gmail.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cad883fd61284ede408ed5e7ac6a6689452d795
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Dec 11 18:38:28 2018 +0100

    mtd: rawnand: marvell: prevent timeouts on a loaded machine
    
    commit cafb56dd741e61c99709bcd2b193a9a1d36def3b upstream.
    
    marvell_nfc_wait_op() waits for completion during 'timeout_ms'
    milliseconds before throwing an error. While the logic is fine, the
    value of 'timeout_ms' is given by the core and actually correspond to
    the maximum time the NAND chip will take to complete the
    operation. Assuming there is no overhead in the propagation of the
    interrupt signal to the the NAND controller (through the Ready/Busy
    line), this delay does not take into account the latency of the
    operating system. For instance, for a page write, the delay given by
    the core is rounded up to 1ms. Hence, when the machine is over loaded,
    there is chances that this timeout will be reached.
    
    There are two ways to solve this issue that are not incompatible:
    1/ Enlarge the timeout value (if so, how much?).
    2/ Check after the waiting method if we did not miss any interrupt
    because of the OS latency (an interrupt is still pending). In this
    case, we assume the operation exited successfully.
    
    We choose the second approach that is a must in all cases, with the
    possibility to also modify the timeout value to be, e.g. at least 1
    second in all cases.
    
    Fixes: 02f26ecf8c77 ("mtd: nand: add reworked Marvell NAND controller driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5862094047825cc657f8df7cc6352d5b8a07a701
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 10 21:38:16 2018 +0100

    mtd: atmel-quadspi: disallow building on ebsa110
    
    commit 2a9d92fb3a1282a4659f1bb6d5684018846537b7 upstream.
    
    I ran into a link-time error with the atmel-quadspi driver on the
    EBSA110 platform:
    
    drivers/mtd/built-in.o: In function `atmel_qspi_run_command':
    :(.text+0x1ee3c): undefined reference to `_memcpy_toio'
    :(.text+0x1ee48): undefined reference to `_memcpy_fromio'
    
    The problem is that _memcpy_toio/_memcpy_fromio are not available on
    that platform, and we have to prevent building the driver there.
    
    In case we want to backport this to older kernels: between linux-4.8
    and linux-4.20, the Kconfig entry was in drivers/mtd/spi-nor/Kconfig
    but had the same problem.
    
    Link: https://lore.kernel.org/patchwork/patch/812860/
    Fixes: 161aaab8a067 ("mtd: atmel-quadspi: add driver for Atmel QSPI controller")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34fc0919348683d536740b4f615790c5a9b363ff
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Wed Dec 12 16:03:02 2018 +0200

    powerpc/fsl: Fix spectre_v2 mitigations reporting
    
    commit 7d8bad99ba5a22892f0cad6881289fdc3875a930 upstream.
    
    Currently for CONFIG_PPC_FSL_BOOK3E the spectre_v2 file is incorrect:
    
      $ cat /sys/devices/system/cpu/vulnerabilities/spectre_v2
      "Mitigation: Software count cache flush"
    
    Which is wrong. Fix it to report vulnerable for now.
    
    Fixes: ee13cb249fab ("powerpc/64s: Add support for software count cache flush")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb734900aa8341ee2d564ac0ab8a207f49e47cd3
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Dec 12 11:20:49 2018 -0600

    ALSA: emux: Fix potential Spectre v1 vulnerabilities
    
    commit 4aea96f4237cea0c51a8bc87c0db31f0f932f1f0 upstream.
    
    info.mode and info.port are indirectly controlled by user-space,
    hence leading to a potential exploitation of the Spectre variant 1
    vulnerability.
    
    These issues were detected with the help of Smatch:
    
    sound/synth/emux/emux_hwdep.c:72 snd_emux_hwdep_misc_mode() warn: potential spectre issue 'emu->portptrs[i]->ctrls' [w] (local cap)
    sound/synth/emux/emux_hwdep.c:75 snd_emux_hwdep_misc_mode() warn: potential spectre issue 'emu->portptrs' [w] (local cap)
    sound/synth/emux/emux_hwdep.c:75 snd_emux_hwdep_misc_mode() warn: potential spectre issue 'emu->portptrs[info.port]->ctrls' [w] (local cap)
    
    Fix this by sanitizing both info.mode and info.port before using them
    to index emu->portptrs[i]->ctrls, emu->portptrs[info.port]->ctrls and
    emu->portptrs.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56971d62c7591ea6dcec95b92c0762a6d1fa1ba9
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Dec 12 15:36:28 2018 -0600

    ALSA: pcm: Fix potential Spectre v1 vulnerability
    
    commit 94ffb030b6d31ec840bb811be455dd2e26a4f43e upstream.
    
    stream is indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    sound/core/pcm.c:140 snd_pcm_control_ioctl() warn: potential spectre issue 'pcm->streams' [r] (local cap)
    
    Fix this by sanitizing stream before using it to index pcm->streams
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d2270496891e57ba5485631ab51300a58f862b2
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Dec 18 11:52:16 2018 -0600

    ALSA: emu10k1: Fix potential Spectre v1 vulnerabilities
    
    commit 5ae4f61f012a097df93de2285070ec8e34716d29 upstream.
    
    ipcm->substream is indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    sound/pci/emu10k1/emufx.c:1031 snd_emu10k1_ipcm_poke() warn: potential spectre issue 'emu->fx8010.pcm' [r] (local cap)
    sound/pci/emu10k1/emufx.c:1075 snd_emu10k1_ipcm_peek() warn: potential spectre issue 'emu->fx8010.pcm' [r] (local cap)
    
    Fix this by sanitizing ipcm->substream before using it to index emu->fx8010.pcm
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67b6a811a5f092bef2c4ebef481c988b9244fc37
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Dec 18 11:18:34 2018 -0600

    ALSA: rme9652: Fix potential Spectre v1 vulnerability
    
    commit 0b84304ef5da92add8dc75a1b07879c5374cdb05 upstream.
    
    info->channel is indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    sound/pci/rme9652/hdsp.c:4100 snd_hdsp_channel_info() warn: potential spectre issue 'hdsp->channel_map' [r] (local cap)
    
    Fix this by sanitizing info->channel before using it to index hdsp->channel_map
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    Also, notice that I refactored the code a bit in order to get rid of the
    following checkpatch warning:
    
    ERROR: do not use assignment in if condition
    FILE: sound/pci/rme9652/hdsp.c:4103:
            if ((mapped_channel = hdsp->channel_map[info->channel]) < 0)
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91dea490a4e1c949c64981cf9c96caff17af5e75
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Wed Nov 28 10:19:36 2018 -0800

    IB/hfi1: Incorrect sizing of sge for PIO will OOPs
    
    commit dbc2970caef74e8ff41923d302aa6fb5a4812d0e upstream.
    
    An incorrect sge sizing in the HFI PIO path will cause an OOPs similar to
    this:
    
    BUG: unable to handle kernel NULL pointer dereference at (null)
    IP: [] hfi1_verbs_send_pio+0x3d8/0x530 [hfi1]
    PGD 0
    Oops: 0000 1 SMP
     Call Trace:
     ? hfi1_verbs_send_dma+0xad0/0xad0 [hfi1]
     hfi1_verbs_send+0xdf/0x250 [hfi1]
     ? make_rc_ack+0xa80/0xa80 [hfi1]
     hfi1_do_send+0x192/0x430 [hfi1]
     hfi1_do_send_from_rvt+0x10/0x20 [hfi1]
     rvt_post_send+0x369/0x820 [rdmavt]
     ib_uverbs_post_send+0x317/0x570 [ib_uverbs]
     ib_uverbs_write+0x26f/0x420 [ib_uverbs]
     ? security_file_permission+0x21/0xa0
     vfs_write+0xbd/0x1e0
     ? mntput+0x24/0x40
     SyS_write+0x7f/0xe0
     system_call_fastpath+0x16/0x1b
    
    Fix by adding the missing sizing check to correctly determine the sge
    length.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 648458fe97b5c0630435fa2b2cd65ba57ceb18e0
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sun Dec 30 13:16:12 2018 +0100

    r8169: fix WoL device wakeup enable
    
    [ Upstream commit 3bd8264511035dc97c902f03fa9f1d07f95f8f62 ]
    
    In rtl8169_runtime_resume() we configure WoL but don't set the device
    to wakeup-enabled. This prevents PME generation once the cable is
    re-plugged. Fix this by moving the call to device_set_wakeup_enable()
    to __rtl8169_set_wol().
    
    Fixes: 433f9d0ddcc6 ("r8169: improve saved_wolopts handling")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4a2ffe9029fd3e40513b1949b225d180900ef4e
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Mon Dec 17 11:26:38 2018 +0100

    net: Use __kernel_clockid_t in uapi net_stamp.h
    
    [ Upstream commit e2c4cf7f98a519eb4d95532bfa06bcaf3562fed5 ]
    
    Herton reports the following error when building a userspace program that
    includes net_stamp.h:
    
     In file included from foo.c:2:
     /usr/include/linux/net_tstamp.h:158:2: error: unknown type name
     ‚Äòclockid_t‚Äô
       clockid_t clockid; /* reference clockid */
       ^~~~~~~~~
    
    Fix it by using __kernel_clockid_t in place of clockid_t.
    
    Fixes: 80b14dee2bea ("net: Add a new socket option for a future transmit time.")
    Cc: Timothy Redaelli <tredaelli@redhat.com>
    Reported-by: Herton R. Krzesinski <herton@redhat.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Tested-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e15413d61d4e05f6d819fa165116b3d1781d2157
Author: Marcin Wojtas <mw@semihalf.com>
Date:   Tue Dec 11 13:56:49 2018 +0100

    net: mvneta: fix operation for 64K PAGE_SIZE
    
    [ Upstream commit e735fd55b94bb48363737db3b1d57627c1a16b47 ]
    
    Recent changes in the mvneta driver reworked allocation
    and handling of the ingress buffers to use entire pages.
    Apart from that in SW BM scenario the HW must be informed
    via PRXDQS about the biggest possible incoming buffer
    that can be propagated by RX descriptors.
    
    The BufferSize field was filled according to the MTU-dependent
    pkt_size value. Later change to PAGE_SIZE broke RX operation
    when usin 64K pages, as the field is simply too small.
    
    This patch conditionally limits the value passed to the BufferSize
    of the PRXDQS register, depending on the PAGE_SIZE used.
    On the occasion remove now unused frag_size field of the mvneta_port
    structure.
    
    Fixes: 562e2f467e71 ("net: mvneta: Improve the buffer allocation method for SWBM")
    Signed-off-by: Marcin Wojtas <mw@semihalf.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e97ecb19fee9eeb104a21bed14e9af78f5368117
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Sun Dec 2 15:45:53 2018 +0200

    net/mlx5e: RX, Fix wrong early return in receive queue poll
    
    [ Upstream commit bfc698254ba97b3e3e4ebbfae0ffa1f7e2fa0717 ]
    
    When the completion queue of the RQ is empty, do not immediately return.
    If left-over decompressed CQEs (from the previous cycle) were processed,
    need to go to the finalization part of the poll function.
    
    Bug exists only when CQE compression is turned ON.
    
    This solves the following issue:
    mlx5_core 0000:82:00.1: mlx5_eq_int:544:(pid 0): CQ error on CQN 0xc08, syndrome 0x1
    mlx5_core 0000:82:00.1 p4p2: mlx5e_cq_error_event: cqn=0x000c08 event=0x04
    
    Fixes: 4b7dfc992514 ("net/mlx5e: Early-return on empty completion queues")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e72e92914387eb66e3b75738073a23243c23613d
Author: Mikhael Goikhman <migo@mellanox.com>
Date:   Mon Nov 19 19:11:12 2018 +0200

    net/mlx5e: Remove unused UDP GSO remaining counter
    
    [ Upstream commit d13b224f431579fe2d712871d4265d7a22ca6c9c ]
    
    Remove tx_udp_seg_rem counter from ethtool output, as it is no longer
    being updated in the driver's data flow.
    
    Fixes: 3f44899ef2ce ("net/mlx5e: Use PARTIAL_GSO for UDP segmentation")
    Signed-off-by: Mikhael Goikhman <migo@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af93ac090110c761c78c5f8795dccf63dfa108ec
Author: Shalom Toledo <shalomt@mellanox.com>
Date:   Tue Dec 18 15:59:20 2018 +0000

    mlxsw: core: Increase timeout during firmware flash process
    
    [ Upstream commit cf0b70e71b32137ccf9c1f3dd9fb30cbf89b4322 ]
    
    During the firmware flash process, some of the EMADs get timed out, which
    causes the driver to send them again with a limit of 5 retries. There are
    some situations in which 5 retries is not enough and the EMAD access fails.
    If the failed EMAD was related to the flashing process, the driver fails
    the flashing.
    
    The reason for these timeouts during firmware flashing is cache misses in
    the CPU running the firmware. In case the CPU needs to fetch instructions
    from the flash when a firmware is flashed, it needs to wait for the
    flashing to complete. Since flashing takes time, it is possible for pending
    EMADs to timeout.
    
    Fix by increasing EMADs' timeout while flashing firmware.
    
    Fixes: ce6ef68f433f ("mlxsw: spectrum: Implement the ethtool flash_device callback")
    Signed-off-by: Shalom Toledo <shalomt@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8b01caff7d435e2b7589284048a641c1faf3858
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Sun Dec 9 23:27:01 2018 -0800

    qed: Fix command number mismatch between driver and the mfw
    
    [ Upstream commit c3db8d531045774aeee6e0f731ab15b0c450de45 ]
    
    The value for OEM_CFG_UPDATE command differs between driver and the
    Management firmware (mfw). Fix this gap with adding a reserved field.
    
    Fixes: cac6f691546b ("qed: Add support for Unified Fabric Port.")
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Ariel Elior <ariel.elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5696ca93120bec35904f2078f59e50bca3d827b1
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Wed Dec 19 18:00:12 2018 +0100

    net: mvpp2: fix the phylink mode validation
    
    [ Upstream commit 1b451fb2051b464b9758c09a3492104403252e2b ]
    
    The mvpp2_phylink_validate() sets all modes that are supported by a
    given PPv2 port. An mistake made the 10000baseT_Full mode being
    advertised in some cases when a port wasn't configured to perform at
    10G. This patch fixes this.
    
    Fixes: d97c9f4ab000 ("net: mvpp2: 1000baseX support")
    Reported-by: Russell King <linux@armlinux.org.uk>
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe65dfcca1b9888d9ee9bfc7652be98a099f671e
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Fri Nov 2 06:10:49 2018 +0200

    net/mlx5e: RX, Verify MPWQE stride size is in range
    
    [ Upstream commit e1c15b62b7015119d3e5915cd2ae3b89d59c2576 ]
    
    Add check of MPWQE stride size is within range supported by HW. In case
    calculated MPWQE stride size exceed range, linear SKB can't be used and
    we should use non linear MPWQE instead.
    
    Fixes: 619a8f2a42f1 ("net/mlx5e: Use linear SKB in Striding RQ")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78512e346836e27d0711a636160fb70749f379f7
Author: Tal Gilboa <talgi@mellanox.com>
Date:   Thu Nov 22 14:20:45 2018 +0200

    net/mlx5e: Cancel DIM work on close SQ
    
    [ Upstream commit fa2bf86bab4bbc61e5678a42a14e40075093a98f ]
    
    TXQ SQ closure is followed by closing the corresponding CQ. A pending
    DIM work would try to modify the now non-existing CQ.
    This would trigger an error:
    [85535.835926] mlx5_core 0000:af:00.0: mlx5_cmd_check:769:(pid 124399):
    MODIFY_CQ(0x403) op_mod(0x0) failed, status bad resource state(0x9), syndrome (0x1d7771)
    
    Fix by making sure to cancel any pending DIM work before destroying the SQ.
    
    Fixes: cbce4f444798 ("net/mlx5e: Enable adaptive-TX moderation")
    Signed-off-by: Tal Gilboa <talgi@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 935bc9ddd7747324b8dadb8a3b3f257ff84b7bba
Author: Allan W. Nielsen <allan.nielsen@microchip.com>
Date:   Thu Dec 20 09:37:17 2018 +0100

    mscc: Configured MAC entries should be locked.
    
    [ Upstream commit 8fd1a4affbdafda592f80cd01bf7a382a5ff2fe8 ]
    
    The MAC table in Ocelot supports auto aging (normal) and static entries.
    MAC entries that is manually configured should be static and not subject
    to aging.
    
    Fixes: a556c76adc05 ("net: mscc: Add initial Ocelot switch support")
    Signed-off-by: Allan Nielsen <allan.nielsen@microchip.com>
    Reviewed-by: Steen Hegelund <steen.hegelund@microchip.com>
    Signed-off-by: Steen Hegelund <steen.hegelund@microchip.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccc8b37473276bf7552369ff86406f90d947c2f6
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Wed Jan 2 13:29:27 2019 +0100

    ipv6: route: Fix return value of ip6_neigh_lookup() on neigh_create() error
    
    [ Upstream commit 7adf3246092f5e87ed0fa610e8088fae416c581f ]
    
    In ip6_neigh_lookup(), we must not return errors coming from
    neigh_create(): if creation of a neighbour entry fails, the lookup should
    return NULL, in the same way as it's done in __neigh_lookup().
    
    Otherwise, callers legitimately checking for a non-NULL return value of
    the lookup function might dereference an invalid pointer.
    
    For instance, on neighbour table overflow, ndisc_router_discovery()
    crashes ndisc_update() by passing ERR_PTR(-ENOBUFS) as 'neigh' argument.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Fixes: f8a1b43b709d ("net/ipv6: Create a neigh_lookup for FIB entries")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2210c2737e196a369e033de590d605247c2fb476
Author: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
Date:   Mon Dec 10 15:03:43 2018 -0800

    nfp: flower: ensure TCP flags can be placed in IPv6 frame
    
    [ Upstream commit 290974d434783624c13a9530a23c45f9c5ffe018 ]
    
    Previously we did not ensure tcp flags have a place to be stored
    when using IPv6. We correct this by including IPv6 key layer when
    we match tcp flags and the IPv6 key layer has not been included
    already.
    
    Fixes: 07e1671cfca5 ("nfp: flower: refactor shared ip header in match offload")
    Signed-off-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe3f820c18b01b8a5fc3ae220ad7d0d0d4ee7a8d
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Dec 28 23:28:21 2018 +0100

    net/ipv6: Fix a test against 'ipv6_find_idev()' return value
    
    [ Upstream commit 178fe94405bffbd1acd83b6ff3b40211185ae9c9 ]
    
    'ipv6_find_idev()' returns NULL on error, not an error pointer.
    Update the test accordingly and return -ENOBUFS, as already done in
    'addrconf_add_dev()', if NULL is returned.
    
    Fixes: ("ipv6: allow userspace to add IFA_F_OPTIMISTIC addresses")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ac4cc331bca6c759460fc948d19906f4f7f5831
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Thu Dec 20 21:20:10 2018 +0800

    ipv6: frags: Fix bogus skb->sk in reassembled packets
    
    [ Upstream commit d15f5ac8deea936d3adf629421a66a88b42b8a2f ]
    
    It was reported that IPsec would crash when it encounters an IPv6
    reassembled packet because skb->sk is non-zero and not a valid
    pointer.
    
    This is because skb->sk is now a union with ip_defrag_offset.
    
    This patch fixes this by resetting skb->sk when exiting from
    the reassembly code.
    
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Fixes: 219badfaade9 ("ipv6: frags: get rid of ip6frag_skb_cb/...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ed77be31e9564381d5b5329d1a529cccd219a94
Author: Alaa Hleihel <alaa@mellanox.com>
Date:   Sun Nov 25 11:46:09 2018 +0200

    net/mlx5e: Remove the false indication of software timestamping support
    
    [ Upstream commit 4765420439e758bfa4808392d18b0a4cb6f06065 ]
    
    mlx5 driver falsely advertises support of software timestamping.
    Fix it by removing the false indication.
    
    Fixes: ef9814deafd0 ("net/mlx5e: Add HW timestamping (TS) support")
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7942d5be49224bbd7cc8b5c589e1e670651021d1
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 16 23:25:12 2018 -0800

    tipc: check group dests after tipc_wait_for_cond()
    
    [ Upstream commit 3c6306d44082ef007a258ae1b86ea58e6974ee3f ]
    
    Similar to commit 143ece654f9f ("tipc: check tsk->group in tipc_wait_for_cond()")
    we have to reload grp->dests too after we re-take the sock lock.
    This means we need to move the dsts check after tipc_wait_for_cond()
    too.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+99f20222fc5018d2b97a@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71e848bd5e1ddd59d2bd31632fda585d3a6e6f1f
Author: Yuval Avnery <yuvalav@mellanox.com>
Date:   Thu Dec 13 02:26:46 2018 +0200

    net/mlx5: Typo fix in del_sw_hw_rule
    
    [ Upstream commit f0337889147c956721696553ffcc97212b0948fe ]
    
    Expression terminated with "," instead of ";", resulted in
    set_fte getting bad value for modify_enable_mask field.
    
    Fixes: bd5251dbf156 ("net/mlx5_core: Introduce flow steering destination of type counter")
    Signed-off-by: Yuval Avnery <yuvalav@mellanox.com>
    Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a1cbcf4f3ae99cebd5ffec118049497b332dbdf
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Dec 18 16:06:19 2018 +0100

    xen/netfront: tolerate frags with no data
    
    [ Upstream commit d81c5054a5d1d4999c7cdead7636b6cd4af83d36 ]
    
    At least old Xen net backends seem to send frags with no real data
    sometimes. In case such a fragment happens to occur with the frag limit
    already reached the frontend will BUG currently even if this situation
    is easily recoverable.
    
    Modify the BUG_ON() condition accordingly.
    
    Tested-by: Dietmar Hahn <dietmar.hahn@ts.fujitsu.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7c2162d5ab613543316282250b664a721196b44
Author: Jorgen Hansen <jhansen@vmware.com>
Date:   Tue Dec 18 00:34:06 2018 -0800

    VSOCK: Send reset control packet when socket is partially bound
    
    [ Upstream commit a915b982d8f5e4295f64b8dd37ce753874867e88 ]
    
    If a server side socket is bound to an address, but not in the listening
    state yet, incoming connection requests should receive a reset control
    packet in response. However, the function used to send the reset
    silently drops the reset packet if the sending socket isn't bound
    to a remote address (as is the case for a bound socket not yet in
    the listening state). This change fixes this by using the src
    of the incoming packet as destination for the reset packet in
    this case.
    
    Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
    Reviewed-by: Adit Ranadive <aditr@vmware.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: Jorgen Hansen <jhansen@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b23a36517493e7f1db21c1dda961799cde1c41a
Author: Jason Wang <jasowang@redhat.com>
Date:   Thu Dec 13 10:53:37 2018 +0800

    vhost: make sure used idx is seen before log in vhost_add_used_n()
    
    [ Upstream commit 841df922417eb82c835e93d4b93eb6a68c99d599 ]
    
    We miss a write barrier that guarantees used idx is updated and seen
    before log. This will let userspace sync and copy used ring before
    used idx is update. Fix this by adding a barrier before log_write().
    
    Fixes: 8dd014adfea6f ("vhost-net: mergeable buffers support")
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ce6d5aeafba9066eec0f93e85f463549f362dae
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 11:49:55 2018 -0800

    tipc: use lock_sock() in tipc_sk_reinit()
    
    [ Upstream commit 15ef70e286176165d28b0b8a969b422561a68dfc ]
    
    lock_sock() must be used in process context to be race-free with
    other lock_sock() callers, for example, tipc_release(). Otherwise
    using the spinlock directly can't serialize a parallel tipc_release().
    
    As it is blocking, we have to hold the sock refcnt before
    rhashtable_walk_stop() and release it after rhashtable_walk_start().
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to use generic rhashtable")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b66ecc4f0b36597ee993b93f3a3a161f8309bab4
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 12:45:45 2018 -0800

    tipc: fix a double kfree_skb()
    
    [ Upstream commit acb4a33e9856d5fa3384b87d3d8369229be06d31 ]
    
    tipc_udp_xmit() drops the packet on error, there is no
    need to drop it again.
    
    Fixes: ef20cd4dd163 ("tipc: introduce UDP replicast")
    Reported-and-tested-by: syzbot+eae585ba2cc2752d3704@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f404723deb695a00ea2cb7800b2c2135260dfcf8
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 23 21:45:56 2018 -0800

    tipc: fix a double free in tipc_enable_bearer()
    
    [ Upstream commit dc4501ff287547dea7ca10f1c580c741291a8760 ]
    
    bearer_disable() already calls kfree_rcu() to free struct tipc_bearer,
    we don't need to call kfree() again.
    
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Reported-by: syzbot+b981acf1fb240c0c128b@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2ee6fb9c675125f2f29cc95aae95b4489880f57
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 15:23:30 2018 -0800

    tipc: compare remote and local protocols in tipc_udp_enable()
    
    [ Upstream commit fb83ed496b9a654f60cd1d58a0e1e79ec5694808 ]
    
    When TIPC_NLA_UDP_REMOTE is an IPv6 mcast address but
    TIPC_NLA_UDP_LOCAL is an IPv4 address, a NULL-ptr deref is triggered
    as the UDP tunnel sock is initialized to IPv4 or IPv6 sock merely
    based on the protocol in local address.
    
    We should just error out when the remote address and local address
    have different protocols.
    
    Reported-by: syzbot+eb4da3a20fad2e52555d@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc6c13d5d5b47c8a1c0570176a3ad5887dc63b00
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Dec 11 21:43:51 2018 -0800

    tipc: check tsk->group in tipc_wait_for_cond()
    
    [ Upstream commit 143ece654f9f5b37bedea252a990be37e48ae3a5 ]
    
    tipc_wait_for_cond() drops socket lock before going to sleep,
    but tsk->group could be freed right after that release_sock().
    So we have to re-check and reload tsk->group after it wakes up.
    
    After this patch, tipc_wait_for_cond() returns -ERESTARTSYS when
    tsk->group is NULL, instead of continuing with the assumption of
    a non-NULL tsk->group.
    
    (It looks like 'dsts' should be re-checked and reloaded too, but
    it is a different bug.)
    
    Similar for tipc_send_group_unicast() and tipc_send_group_anycast().
    
    Reported-by: syzbot+10a9db47c3a0e13eb31c@syzkaller.appspotmail.com
    Fixes: b7d42635517f ("tipc: introduce flow control for group broadcast messages")
    Fixes: ee106d7f942d ("tipc: introduce group anycast messaging")
    Fixes: 27bd9ec027f3 ("tipc: introduce group unicast messaging")
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5217034871545298c4d38651ec1bcda67f74b28
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 20 15:28:56 2018 -0800

    tcp: fix a race in inet_diag_dump_icsk()
    
    [ Upstream commit f0c928d878e7d01b613c9ae5c971a6b1e473a938 ]
    
    Alexei reported use after frees in inet_diag_dump_icsk() [1]
    
    Because we use refcount_set() when various sockets are setup and
    inserted into ehash, we also need to make sure inet_diag_dump_icsk()
    wont race with the refcount_set() operations.
    
    Jonathan Lemon sent a patch changing net_twsk_hashdance() but
    other spots would need risky changes.
    
    Instead, fix inet_diag_dump_icsk() as this bug came with
    linux-4.10 only.
    
    [1] Quoting Alexei :
    
    First something iterating over sockets finds already freed tw socket:
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 2 PID: 2738 at lib/refcount.c:153 refcount_inc+0x26/0x30
    RIP: 0010:refcount_inc+0x26/0x30
    RSP: 0018:ffffc90004c8fbc0 EFLAGS: 00010282
    RAX: 000000000000002b RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88085ee9d680 RSI: ffff88085ee954c8 RDI: ffff88085ee954c8
    RBP: ffff88010ecbd2c0 R08: 0000000000000000 R09: 000000000000174c
    R10: ffffffff81e7c5a0 R11: 0000000000000000 R12: 0000000000000000
    R13: ffff8806ba9bf210 R14: ffffffff82304600 R15: ffff88010ecbd328
    FS:  00007f81f5a7d700(0000) GS:ffff88085ee80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f81e2a95000 CR3: 000000069b2eb006 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     inet_diag_dump_icsk+0x2b3/0x4e0 [inet_diag]  // sock_hold(sk); in net/ipv4/inet_diag.c:1002
     ? kmalloc_large_node+0x37/0x70
     ? __kmalloc_node_track_caller+0x1cb/0x260
     ? __alloc_skb+0x72/0x1b0
     ? __kmalloc_reserve.isra.40+0x2e/0x80
     __inet_diag_dump+0x3b/0x80 [inet_diag]
     netlink_dump+0x116/0x2a0
     netlink_recvmsg+0x205/0x3c0
     sock_read_iter+0x89/0xd0
     __vfs_read+0xf7/0x140
     vfs_read+0x8a/0x140
     SyS_read+0x3f/0xa0
     do_syscall_64+0x5a/0x100
    
    then a minute later twsk timer fires and hits two bad refcnts
    for this freed socket:
    
    refcount_t: decrement hit 0; leaking memory.
    WARNING: CPU: 31 PID: 0 at lib/refcount.c:228 refcount_dec+0x2e/0x40
    Modules linked in:
    RIP: 0010:refcount_dec+0x2e/0x40
    RSP: 0018:ffff88085f5c3ea8 EFLAGS: 00010296
    RAX: 000000000000002c RBX: ffff88010ecbd2c0 RCX: 000000000000083f
    RDX: 0000000000000000 RSI: 00000000000000f6 RDI: 000000000000003f
    RBP: ffffc90003c77280 R08: 0000000000000000 R09: 00000000000017d3
    R10: ffffffff81e7c5a0 R11: 0000000000000000 R12: ffffffff82ad2d80
    R13: ffffffff8182de00 R14: ffff88085f5c3ef8 R15: 0000000000000000
    FS:  0000000000000000(0000) GS:ffff88085f5c0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fbe42685250 CR3: 0000000002209001 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     inet_twsk_kill+0x9d/0xc0  // inet_twsk_bind_unhash(tw, hashinfo);
     call_timer_fn+0x29/0x110
     run_timer_softirq+0x36b/0x3a0
    
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 31 PID: 0 at lib/refcount.c:187 refcount_sub_and_test+0x46/0x50
    RIP: 0010:refcount_sub_and_test+0x46/0x50
    RSP: 0018:ffff88085f5c3eb8 EFLAGS: 00010296
    RAX: 0000000000000026 RBX: ffff88010ecbd2c0 RCX: 000000000000083f
    RDX: 0000000000000000 RSI: 00000000000000f6 RDI: 000000000000003f
    RBP: ffff88010ecbd358 R08: 0000000000000000 R09: 000000000000185b
    R10: ffffffff81e7c5a0 R11: 0000000000000000 R12: ffff88010ecbd358
    R13: ffffffff8182de00 R14: ffff88085f5c3ef8 R15: 0000000000000000
    FS:  0000000000000000(0000) GS:ffff88085f5c0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fbe42685250 CR3: 0000000002209001 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     inet_twsk_put+0x12/0x20  // inet_twsk_put(tw);
     call_timer_fn+0x29/0x110
     run_timer_softirq+0x36b/0x3a0
    
    Fixes: 67db3e4bfbc9 ("tcp: no longer hold ehash lock while calling tcp_get_info()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Jonathan Lemon <jonathan.lemon@gmail.com>
    Acked-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60f05dddf1eb5db3595e011f293eefa37cefae2e
Author: Deepa Dinamani <deepa.kernel@gmail.com>
Date:   Thu Dec 27 18:55:09 2018 -0800

    sock: Make sock->sk_stamp thread-safe
    
    [ Upstream commit 3a0ed3e9619738067214871e9cb826fa23b2ddb9 ]
    
    Al Viro mentioned (Message-ID
    <20170626041334.GZ10672@ZenIV.linux.org.uk>)
    that there is probably a race condition
    lurking in accesses of sk_stamp on 32-bit machines.
    
    sock->sk_stamp is of type ktime_t which is always an s64.
    On a 32 bit architecture, we might run into situations of
    unsafe access as the access to the field becomes non atomic.
    
    Use seqlocks for synchronization.
    This allows us to avoid using spinlocks for readers as
    readers do not need mutual exclusion.
    
    Another approach to solve this is to require sk_lock for all
    modifications of the timestamps. The current approach allows
    for timestamps to have their own lock: sk_stamp_lock.
    This allows for the patch to not compete with already
    existing critical sections, and side effects are limited
    to the paths in the patch.
    
    The addition of the new field maintains the data locality
    optimizations from
    commit 9115e8cd2a0c ("net: reorganize struct sock for better data
    locality")
    
    Note that all the instances of the sk_stamp accesses
    are either through the ioctl or the syscall recvmsg.
    
    Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fff7f717863055643cf93378d31801e1c6091ef1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Dec 10 18:00:52 2018 +0800

    sctp: initialize sin6_flowinfo for ipv6 addrs in sctp_inet6addr_event
    
    [ Upstream commit 4a2eb0c37b4759416996fbb4c45b932500cf06d3 ]
    
    syzbot reported a kernel-infoleak, which is caused by an uninitialized
    field(sin6_flowinfo) of addr->a.v6 in sctp_inet6addr_event().
    The call trace is as below:
    
      BUG: KMSAN: kernel-infoleak in _copy_to_user+0x19a/0x230 lib/usercopy.c:33
      CPU: 1 PID: 8164 Comm: syz-executor2 Not tainted 4.20.0-rc3+ #95
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
      Google 01/01/2011
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x32d/0x480 lib/dump_stack.c:113
        kmsan_report+0x12c/0x290 mm/kmsan/kmsan.c:683
        kmsan_internal_check_memory+0x32a/0xa50 mm/kmsan/kmsan.c:743
        kmsan_copy_to_user+0x78/0xd0 mm/kmsan/kmsan_hooks.c:634
        _copy_to_user+0x19a/0x230 lib/usercopy.c:33
        copy_to_user include/linux/uaccess.h:183 [inline]
        sctp_getsockopt_local_addrs net/sctp/socket.c:5998 [inline]
        sctp_getsockopt+0x15248/0x186f0 net/sctp/socket.c:7477
        sock_common_getsockopt+0x13f/0x180 net/core/sock.c:2937
        __sys_getsockopt+0x489/0x550 net/socket.c:1939
        __do_sys_getsockopt net/socket.c:1950 [inline]
        __se_sys_getsockopt+0xe1/0x100 net/socket.c:1947
        __x64_sys_getsockopt+0x62/0x80 net/socket.c:1947
        do_syscall_64+0xcf/0x110 arch/x86/entry/common.c:291
        entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    sin6_flowinfo is not really used by SCTP, so it will be fixed by simply
    setting it to 0.
    
    The issue exists since very beginning.
    Thanks Alexander for the reproducer provided.
    
    Reported-by: syzbot+ad5d327e6936a2e284be@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ec3976e29f238d142d74b8da749b60264665b5a
Author: J√∂rgen Storvist <jorgen.storvist@gmail.com>
Date:   Fri Dec 21 15:38:52 2018 +0100

    qmi_wwan: Add support for Fibocom NL678 series
    
    [ Upstream commit 7c3db4105ce8d69bcb5c04bfa9acd1e9119af8d5 ]
    
    Added support for Fibocom NL678 series cellular module QMI interface.
    Using QMI_QUIRK_SET_DTR required for Qualcomm MDM9x40 series chipsets.
    
    Signed-off-by: J√∂rgen Storvist <jorgen.storvist@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7934b17b8f8189bef0861cc978c1890058c5e12
Author: J√∂rgen Storvist <jorgen.storvist@gmail.com>
Date:   Thu Dec 13 17:00:35 2018 +0100

    qmi_wwan: Added support for Telit LN940 series
    
    [ Upstream commit 1986af16e8ed355822600c24b3d2f0be46b573df ]
    
    Added support for the Telit LN940 series cellular modules QMI interface.
    QMI_QUIRK_SET_DTR quirk requied for Qualcomm MDM9x40 chipset.
    
    Signed-off-by: J√∂rgen Storvist <jorgen.storvist@gmail.com>
    Acked-by: Bj√∏rn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a47e4db747f69fc6705ebe955c1e560be0d0ecc5
Author: J√∂rgen Storvist <jorgen.storvist@gmail.com>
Date:   Wed Dec 12 22:45:34 2018 +0100

    qmi_wwan: Added support for Fibocom NL668 series
    
    [ Upstream commit 110a1cc28bc383adb4885eff27e18c61ddebffb4 ]
    
    Added support for Fibocom NL668 series QMI interface.
    Using QMI_QUIRK_SET_DTR required for Qualcomm MDM9x07 chipsets.
    
    Signed-off-by: J√∂rgen Storvist <jorgen.storvist@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e36567284cf05217d67dfeb49161bb33ce16363
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 30 12:43:42 2018 -0800

    ptr_ring: wrap back ->producer in __ptr_ring_swap_queue()
    
    [ Upstream commit aff6db454599d62191aabc208930e891748e4322 ]
    
    __ptr_ring_swap_queue() tries to move pointers from the old
    ring to the new one, but it forgets to check if ->producer
    is beyond the new size at the end of the operation. This leads
    to an out-of-bound access in __ptr_ring_produce() as reported
    by syzbot.
    
    Reported-by: syzbot+8993c0fa96d57c399735@syzkaller.appspotmail.com
    Fixes: 5d49de532002 ("ptr_ring: resize support")
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4037ce1b28ca94b5b7952b3887777805197cb348
Author: Willem de Bruijn <willemb@google.com>
Date:   Sat Dec 22 16:53:45 2018 -0500

    packet: validate address length if non-zero
    
    [ Upstream commit 6b8d95f1795c42161dc0984b6863e95d6acf24ed ]
    
    Validate packet socket address length if a length is given. Zero
    length is equivalent to not setting an address.
    
    Fixes: 99137b7888f4 ("packet: validate address length")
    Reported-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a35c9c1712df97ec3cae9be876ac27814f47b0b6
Author: Willem de Bruijn <willemb@google.com>
Date:   Fri Dec 21 12:06:59 2018 -0500

    packet: validate address length
    
    [ Upstream commit 99137b7888f4058087895d035d81c6b2d31015c5 ]
    
    Packet sockets with SOCK_DGRAM may pass an address for use in
    dev_hard_header. Ensure that it is of sufficient length.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 781e26adfdea4e580e04247718010fcedfb9c715
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Dec 29 13:56:37 2018 -0800

    net/wan: fix a double free in x25_asy_open_tty()
    
    [ Upstream commit d5c7c745f254c6cb98b3b3f15fe789b8bd770c72 ]
    
    When x25_asy_open() fails, it already cleans up by itself,
    so its caller doesn't need to free the memory again.
    
    It seems we still have to call x25_asy_free() to clear the SLF_INUSE
    bit, so just set these pointers to NULL after kfree().
    
    Reported-and-tested-by: syzbot+5e5e969e525129229052@syzkaller.appspotmail.com
    Fixes: 3b780bed3138 ("x25_asy: Free x25_asy on x25_asy_open() failure.")
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f624d95c993781595371ec204f3fe7d2606e846c
Author: Ganesh Goudar <ganeshgr@chelsio.com>
Date:   Wed Dec 19 17:18:22 2018 +0530

    net/tls: allocate tls context using GFP_ATOMIC
    
    [ Upstream commit c6ec179a0082e2e76e3a72050c2b99d3d0f3da3f ]
    
    create_ctx can be called from atomic context, hence use
    GFP_ATOMIC instead of GFP_KERNEL.
    
    [  395.962599] BUG: sleeping function called from invalid context at mm/slab.h:421
    [  395.979896] in_atomic(): 1, irqs_disabled(): 0, pid: 16254, name: openssl
    [  395.996564] 2 locks held by openssl/16254:
    [  396.010492]  #0: 00000000347acb52 (sk_lock-AF_INET){+.+.}, at: do_tcp_setsockopt.isra.44+0x13b/0x9a0
    [  396.029838]  #1: 000000006c9552b5 (device_spinlock){+...}, at: tls_init+0x1d/0x280
    [  396.047675] CPU: 5 PID: 16254 Comm: openssl Tainted: G           O      4.20.0-rc6+ #25
    [  396.066019] Hardware name: Supermicro X10SRA-F/X10SRA-F, BIOS 2.0c 09/25/2017
    [  396.083537] Call Trace:
    [  396.096265]  dump_stack+0x5e/0x8b
    [  396.109876]  ___might_sleep+0x216/0x250
    [  396.123940]  kmem_cache_alloc_trace+0x1b0/0x240
    [  396.138800]  create_ctx+0x1f/0x60
    [  396.152504]  tls_init+0xbd/0x280
    [  396.166135]  tcp_set_ulp+0x191/0x2d0
    [  396.180035]  ? tcp_set_ulp+0x2c/0x2d0
    [  396.193960]  do_tcp_setsockopt.isra.44+0x148/0x9a0
    [  396.209013]  __sys_setsockopt+0x7c/0xe0
    [  396.223054]  __x64_sys_setsockopt+0x20/0x30
    [  396.237378]  do_syscall_64+0x4a/0x180
    [  396.251200]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: df9d4a178022 ("net/tls: sleeping function from invalid context")
    Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42e8bf856838f26b113b98bbdf8d616540b8033b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Dec 17 11:06:06 2018 +0300

    net: stmmac: Fix an error code in probe()
    
    [ Upstream commit b26322d2ac6c1c1087af73856531bb836f6963ca ]
    
    The function should return an error if create_singlethread_workqueue()
    fails.
    
    Fixes: 34877a15f787 ("net: stmmac: Rework and fix TX Timeout code")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e028017380f03abbb79df182469df5b9fffeb58a
Author: Myungho Jung <mhjungk@gmail.com>
Date:   Tue Dec 18 09:02:25 2018 -0800

    net/smc: fix TCP fallback socket release
    
    [ Upstream commit 78abe3d0dfad196959b1246003366e2610775ea6 ]
    
    clcsock can be released while kernel_accept() references it in TCP
    listen worker. Also, clcsock needs to wake up before released if TCP
    fallback is used and the clcsock is blocked by accept. Add a lock to
    safely release clcsock and call kernel_sock_shutdown() to wake up
    clcsock from accept in smc_release().
    
    Reported-by: syzbot+0bf2e01269f1274b4b03@syzkaller.appspotmail.com
    Reported-by: syzbot+e3132895630f957306bc@syzkaller.appspotmail.com
    Signed-off-by: Myungho Jung <mhjungk@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1bce7196b726f1578f7558af6f13c25157181e4
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Dec 29 13:56:38 2018 -0800

    netrom: fix locking in nr_find_socket()
    
    [ Upstream commit 7314f5480f3e37e570104dc5e0f28823ef849e72 ]
    
    nr_find_socket(), nr_find_peer() and nr_find_listener() lock the
    sock after finding it in the global list. However, the call path
    requires BH disabled for the sock lock consistently.
    
    Actually the locking is unnecessary at this point, we can just hold
    the sock refcnt to make sure it is not gone after we unlock the global
    list, and lock it later only when needed.
    
    Reported-and-tested-by: syzbot+f621cda8b7e598908efa@syzkaller.appspotmail.com
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d1edda006a542a29e1d5a68f4cd2b6a9386f613
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Tue Dec 18 16:57:04 2018 +0900

    net: phy: Fix the issue that netif always links up after resuming
    
    [ Upstream commit 8742beb50f2db903d3b6d69ddd81d67ce9914453 ]
    
    Even though the link is down before entering hibernation,
    there is an issue that the network interface always links up after resuming
    from hibernation.
    
    If the link is still down before enabling the network interface,
    and after resuming from hibernation, the phydev->state is forcibly set
    to PHY_UP in mdio_bus_phy_restore(), and the link becomes up.
    
    In suspend sequence, only if the PHY is attached, mdio_bus_phy_suspend()
    calls phy_stop_machine(), and mdio_bus_phy_resume() calls
    phy_start_machine().
    In resume sequence, it's enough to do the same as mdio_bus_phy_resume()
    because the state has been preserved.
    
    This patch fixes the issue by calling phy_start_machine() in
    mdio_bus_phy_restore() in the same way as mdio_bus_phy_resume().
    
    Fixes: bc87922ff59d ("phy: Move PHY PM operations into phy_device")
    Suggested-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3ba5b266e6bba422770a7201576220b8c609726
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Tue Dec 11 17:32:28 2018 +0100

    net: mvpp2: 10G modes aren't supported on all ports
    
    [ Upstream commit 006791772084383de779ef29f2e06f3a6e111e7d ]
    
    The mvpp2_phylink_validate() function sets all modes that are
    supported by a given PPv2 port. A recent change made all ports to
    advertise they support 10G modes in certain cases. This is not true,
    as only the port #0 can do so. This patch fixes it.
    
    Fixes: 01b3fd5ac97c ("net: mvpp2: fix detection of 10G SFP modules")
    Cc: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ea9c08a8692099916cdbd59281ee5863d3b30a9
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon Dec 17 10:02:42 2018 +0000

    net: macb: restart tx after tx used bit read
    
    [ Upstream commit 4298388574dae6168fa8940b3edc7ba965e8a7ab ]
    
    On some platforms (currently detected only on SAMA5D4) TX might stuck
    even the pachets are still present in DMA memories and TX start was
    issued for them. This happens due to race condition between MACB driver
    updating next TX buffer descriptor to be used and IP reading the same
    descriptor. In such a case, the "TX USED BIT READ" interrupt is asserted.
    GEM/MACB user guide specifies that if a "TX USED BIT READ" interrupt
    is asserted TX must be restarted. Restart TX if used bit is read and
    packets are present in software TX queue. Packets are removed from software
    TX queue if TX was successful for them (see macb_tx_interrupt()).
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5f9565c8d5ad3cf94982223cfcef1169b0bb60f
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Thu Dec 13 17:23:32 2018 +0100

    net: ipv4: do not handle duplicate fragments as overlapping
    
    [ Upstream commit ade446403bfb79d3528d56071a84b15351a139ad ]
    
    Since commit 7969e5c40dfd ("ip: discard IPv4 datagrams with overlapping
    segments.") IPv4 reassembly code drops the whole queue whenever an
    overlapping fragment is received. However, the test is written in a way
    which detects duplicate fragments as overlapping so that in environments
    with many duplicate packets, fragmented packets may be undeliverable.
    
    Add an extra test and for (potentially) duplicate fragment, only drop the
    new fragment rather than the whole queue. Only starting offset and length
    are checked, not the contents of the fragments as that would be too
    expensive. For similar reason, linear list ("run") of a rbtree node is not
    iterated, we only check if the new fragment is a subset of the interval
    covered by existing consecutive fragments.
    
    v2: instead of an exact check iterating through linear list of an rbtree
    node, only check if the new fragment is subset of the "run" (suggested
    by Eric Dumazet)
    
    Fixes: 7969e5c40dfd ("ip: discard IPv4 datagrams with overlapping segments.")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acb70d28fe63e5bf9795e935a382d4705f102056
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 2 04:24:20 2019 -0800

    net/hamradio/6pack: use mod_timer() to rearm timers
    
    [ Upstream commit 202700e30740c6568b5a6943662f3829566dd533 ]
    
    Using del_timer() + add_timer() is generally unsafe on SMP,
    as noticed by syzbot. Use mod_timer() instead.
    
    kernel BUG at kernel/time/timer.c:1136!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 1026 Comm: kworker/u4:4 Not tainted 4.20.0+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events_unbound flush_to_ldisc
    RIP: 0010:add_timer kernel/time/timer.c:1136 [inline]
    RIP: 0010:add_timer+0xa81/0x1470 kernel/time/timer.c:1134
    Code: 4d 89 7d 40 48 c7 85 70 fe ff ff 00 00 00 00 c7 85 7c fe ff ff ff ff ff ff 48 89 85 90 fe ff ff e9 e6 f7 ff ff e8 cf 42 12 00 <0f> 0b e8 c8 42 12 00 0f 0b e8 c1 42 12 00 4c 89 bd 60 fe ff ff e9
    RSP: 0018:ffff8880a7fdf5a8 EFLAGS: 00010293
    RAX: ffff8880a7846340 RBX: dffffc0000000000 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: ffffffff816f3ee1 RDI: ffff88808a514ff8
    RBP: ffff8880a7fdf760 R08: 0000000000000007 R09: ffff8880a7846c58
    R10: ffff8880a7846340 R11: 0000000000000000 R12: ffff88808a514ff8
    R13: ffff88808a514ff8 R14: ffff88808a514dc0 R15: 0000000000000030
    FS:  0000000000000000(0000) GS:ffff8880ae700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000000061c500 CR3: 00000000994d9000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     decode_prio_command drivers/net/hamradio/6pack.c:903 [inline]
     sixpack_decode drivers/net/hamradio/6pack.c:971 [inline]
     sixpack_receive_buf drivers/net/hamradio/6pack.c:457 [inline]
     sixpack_receive_buf+0xf9c/0x1470 drivers/net/hamradio/6pack.c:434
     tty_ldisc_receive_buf+0x164/0x1c0 drivers/tty/tty_buffer.c:465
     tty_port_default_receive_buf+0x114/0x190 drivers/tty/tty_port.c:38
     receive_buf drivers/tty/tty_buffer.c:481 [inline]
     flush_to_ldisc+0x3b2/0x590 drivers/tty/tty_buffer.c:533
     process_one_work+0xd0c/0x1ce0 kernel/workqueue.c:2153
     worker_thread+0x143/0x14a0 kernel/workqueue.c:2296
     kthread+0x357/0x430 kernel/kthread.c:246
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Andreas Koensgen <ajk@comnets.uni-bremen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 281731c8170accbec0f56e31b94bee62c0fcf2a4
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 14 06:46:49 2018 -0800

    net: clear skb->tstamp in forwarding paths
    
    [ Upstream commit 8203e2d844d34af247a151d8ebd68553a6e91785 ]
    
    Sergey reported that forwarding was no longer working
    if fq packet scheduler was used.
    
    This is caused by the recent switch to EDT model, since incoming
    packets might have been timestamped by __net_timestamp()
    
    __net_timestamp() uses ktime_get_real(), while fq expects packets
    using CLOCK_MONOTONIC base.
    
    The fix is to clear skb->tstamp in forwarding paths.
    
    Fixes: 80b14dee2bea ("net: Add a new socket option for a future transmit time.")
    Fixes: fb420d5d91c1 ("tcp/fq: move back to CLOCK_MONOTONIC")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Sergey Matyukevich <geomatsi@gmail.com>
    Tested-by: Sergey Matyukevich <geomatsi@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec820972c5436e45f398904af1bc715b969c3d5d
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 2 09:20:27 2019 -0800

    isdn: fix kernel-infoleak in capi_unlocked_ioctl
    
    [ Upstream commit d63967e475ae10f286dbd35e189cb241e0b1f284 ]
    
    Since capi_ioctl() copies 64 bytes after calling
    capi20_get_manufacturer() we need to ensure to not leak
    information to user.
    
    BUG: KMSAN: kernel-infoleak in _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
    CPU: 0 PID: 11245 Comm: syz-executor633 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     kmsan_internal_check_memory+0x9d4/0xb00 mm/kmsan/kmsan.c:704
     kmsan_copy_to_user+0xab/0xc0 mm/kmsan/kmsan_hooks.c:601
     _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
     capi_ioctl include/linux/uaccess.h:177 [inline]
     capi_unlocked_ioctl+0x1a0b/0x1bf0 drivers/isdn/capi/capi.c:939
     do_vfs_ioctl+0xebd/0x2bf0 fs/ioctl.c:46
     ksys_ioctl fs/ioctl.c:713 [inline]
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl+0x1da/0x270 fs/ioctl.c:718
     __x64_sys_ioctl+0x4a/0x70 fs/ioctl.c:718
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440019
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffdd4659fb8 EFLAGS: 00000213 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440019
    RDX: 0000000020000080 RSI: 00000000c0044306 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 00000000004018a0
    R13: 0000000000401930 R14: 0000000000000000 R15: 0000000000000000
    
    Local variable description: ----data.i@capi_unlocked_ioctl
    Variable was created at:
     capi_ioctl drivers/isdn/capi/capi.c:747 [inline]
     capi_unlocked_ioctl+0x82/0x1bf0 drivers/isdn/capi/capi.c:939
     do_vfs_ioctl+0xebd/0x2bf0 fs/ioctl.c:46
    
    Bytes 12-63 of 64 are uninitialized
    Memory access of size 64 starts at ffff88807ac5fce8
    Data copied to user address 0000000020000080
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Karsten Keil <isdn@linux-pingi.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cde81154f86e36df0fad21c23976cc8b80c01600
Author: Willem de Bruijn <willemb@google.com>
Date:   Sun Dec 30 17:24:36 2018 -0500

    ip: validate header length on virtual device xmit
    
    [ Upstream commit cb9f1b783850b14cbd7f87d061d784a666dfba1f ]
    
    KMSAN detected read beyond end of buffer in vti and sit devices when
    passing truncated packets with PF_PACKET. The issue affects additional
    ip tunnel devices.
    
    Extend commit 76c0ddd8c3a6 ("ip6_tunnel: be careful when accessing the
    inner header") and commit ccfec9e5cb2d ("ip_tunnel: be careful when
    accessing the inner header").
    
    Move the check to a separate helper and call at the start of each
    ndo_start_xmit function in net/ipv4 and net/ipv6.
    
    Minor changes:
    - convert dev_kfree_skb to kfree_skb on error path,
      as dev_kfree_skb calls consume_skb which is not for error paths.
    - use pskb_network_may_pull even though that is pedantic here,
      as the same as pskb_may_pull for devices without llheaders.
    - do not cache ipv6 hdrs if used only once
      (unsafe across pskb_may_pull, was more relevant to earlier patch)
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d2b652b0732bcf1536394e9d1fb37223cf541a1
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 21 07:47:51 2018 -0800

    ipv6: tunnels: fix two use-after-free
    
    [ Upstream commit cbb49697d5512ce9e61b45ce75d3ee43d7ea5524 ]
    
    xfrm6_policy_check() might have re-allocated skb->head, we need
    to reload ipv6 header pointer.
    
    sysbot reported :
    
    BUG: KASAN: use-after-free in __ipv6_addr_type+0x302/0x32f net/ipv6/addrconf_core.c:40
    Read of size 4 at addr ffff888191b8cb70 by task syz-executor2/1304
    
    CPU: 0 PID: 1304 Comm: syz-executor2 Not tainted 4.20.0-rc7+ #356
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x244/0x39d lib/dump_stack.c:113
     print_address_description.cold.7+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.8+0x242/0x309 mm/kasan/report.c:412
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:432
     __ipv6_addr_type+0x302/0x32f net/ipv6/addrconf_core.c:40
     ipv6_addr_type include/net/ipv6.h:403 [inline]
     ip6_tnl_get_cap+0x27/0x190 net/ipv6/ip6_tunnel.c:727
     ip6_tnl_rcv_ctl+0xdb/0x2a0 net/ipv6/ip6_tunnel.c:757
     vti6_rcv+0x336/0x8f3 net/ipv6/ip6_vti.c:321
     xfrm6_ipcomp_rcv+0x1a5/0x3a0 net/ipv6/xfrm6_protocol.c:132
     ip6_protocol_deliver_rcu+0x372/0x1940 net/ipv6/ip6_input.c:394
     ip6_input_finish+0x84/0x170 net/ipv6/ip6_input.c:434
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_input+0xe9/0x600 net/ipv6/ip6_input.c:443
    IPVS: ftp: loaded support on port[0] = 21
     ip6_mc_input+0x514/0x11c0 net/ipv6/ip6_input.c:537
     dst_input include/net/dst.h:450 [inline]
     ip6_rcv_finish+0x17a/0x330 net/ipv6/ip6_input.c:76
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ipv6_rcv+0x115/0x640 net/ipv6/ip6_input.c:272
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4973
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5083
     process_backlog+0x24e/0x7a0 net/core/dev.c:5923
     napi_poll net/core/dev.c:6346 [inline]
     net_rx_action+0x7fa/0x19b0 net/core/dev.c:6412
     __do_softirq+0x308/0xb7e kernel/softirq.c:292
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1027
     </IRQ>
     do_softirq.part.14+0x126/0x160 kernel/softirq.c:337
     do_softirq+0x19/0x20 kernel/softirq.c:340
     netif_rx_ni+0x521/0x860 net/core/dev.c:4569
     dev_loopback_xmit+0x287/0x8c0 net/core/dev.c:3576
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_finish_output2+0x193a/0x2930 net/ipv6/ip6_output.c:84
     ip6_fragment+0x2b06/0x3850 net/ipv6/ip6_output.c:727
     ip6_finish_output+0x6b7/0xc50 net/ipv6/ip6_output.c:152
     NF_HOOK_COND include/linux/netfilter.h:278 [inline]
     ip6_output+0x232/0x9d0 net/ipv6/ip6_output.c:171
     dst_output include/net/dst.h:444 [inline]
     ip6_local_out+0xc5/0x1b0 net/ipv6/output_core.c:176
     ip6_send_skb+0xbc/0x340 net/ipv6/ip6_output.c:1727
     ip6_push_pending_frames+0xc5/0xf0 net/ipv6/ip6_output.c:1747
     rawv6_push_pending_frames net/ipv6/raw.c:615 [inline]
     rawv6_sendmsg+0x3a3e/0x4b40 net/ipv6/raw.c:945
    kobject: 'queues' (0000000089e6eea2): kobject_add_internal: parent: 'tunl0', set: '<NULL>'
    kobject: 'queues' (0000000089e6eea2): kobject_uevent_env
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
    kobject: 'queues' (0000000089e6eea2): kobject_uevent_env: filter function caused the event to drop!
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     sock_write_iter+0x35e/0x5c0 net/socket.c:900
     call_write_iter include/linux/fs.h:1857 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6b8/0x9f0 fs/read_write.c:487
    kobject: 'rx-0' (00000000e2d902d9): kobject_add_internal: parent: 'queues', set: 'queues'
    kobject: 'rx-0' (00000000e2d902d9): kobject_uevent_env
     vfs_write+0x1fc/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
    kobject: 'rx-0' (00000000e2d902d9): fill_kobj_path: path = '/devices/virtual/net/tunl0/queues/rx-0'
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
    kobject: 'tx-0' (00000000443b70ac): kobject_add_internal: parent: 'queues', set: 'queues'
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457669
    Code: fd b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f9bd200bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457669
    RDX: 000000000000058f RSI: 00000000200033c0 RDI: 0000000000000003
    kobject: 'tx-0' (00000000443b70ac): kobject_uevent_env
    RBP: 000000000072bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f9bd200c6d4
    R13: 00000000004c2dcc R14: 00000000004da398 R15: 00000000ffffffff
    
    Allocated by task 1304:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     __do_kmalloc_node mm/slab.c:3684 [inline]
     __kmalloc_node_track_caller+0x50/0x70 mm/slab.c:3698
     __kmalloc_reserve.isra.41+0x41/0xe0 net/core/skbuff.c:140
     __alloc_skb+0x155/0x760 net/core/skbuff.c:208
    kobject: 'tx-0' (00000000443b70ac): fill_kobj_path: path = '/devices/virtual/net/tunl0/queues/tx-0'
     alloc_skb include/linux/skbuff.h:1011 [inline]
     __ip6_append_data.isra.49+0x2f1a/0x3f50 net/ipv6/ip6_output.c:1450
     ip6_append_data+0x1bc/0x2d0 net/ipv6/ip6_output.c:1619
     rawv6_sendmsg+0x15ab/0x4b40 net/ipv6/raw.c:938
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2116
     __sys_sendmsg+0x11d/0x280 net/socket.c:2154
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg net/socket.c:2161 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2161
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    kobject: 'gre0' (00000000cb1b2d7b): kobject_add_internal: parent: 'net', set: 'devices'
    
    Freed by task 1304:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kfree+0xcf/0x230 mm/slab.c:3817
     skb_free_head+0x93/0xb0 net/core/skbuff.c:553
     pskb_expand_head+0x3b2/0x10d0 net/core/skbuff.c:1498
     __pskb_pull_tail+0x156/0x18a0 net/core/skbuff.c:1896
     pskb_may_pull include/linux/skbuff.h:2188 [inline]
     _decode_session6+0xd11/0x14d0 net/ipv6/xfrm6_policy.c:150
     __xfrm_decode_session+0x71/0x140 net/xfrm/xfrm_policy.c:3272
    kobject: 'gre0' (00000000cb1b2d7b): kobject_uevent_env
     __xfrm_policy_check+0x380/0x2c40 net/xfrm/xfrm_policy.c:3322
     __xfrm_policy_check2 include/net/xfrm.h:1170 [inline]
     xfrm_policy_check include/net/xfrm.h:1175 [inline]
     xfrm6_policy_check include/net/xfrm.h:1185 [inline]
     vti6_rcv+0x4bd/0x8f3 net/ipv6/ip6_vti.c:316
     xfrm6_ipcomp_rcv+0x1a5/0x3a0 net/ipv6/xfrm6_protocol.c:132
     ip6_protocol_deliver_rcu+0x372/0x1940 net/ipv6/ip6_input.c:394
     ip6_input_finish+0x84/0x170 net/ipv6/ip6_input.c:434
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_input+0xe9/0x600 net/ipv6/ip6_input.c:443
     ip6_mc_input+0x514/0x11c0 net/ipv6/ip6_input.c:537
     dst_input include/net/dst.h:450 [inline]
     ip6_rcv_finish+0x17a/0x330 net/ipv6/ip6_input.c:76
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ipv6_rcv+0x115/0x640 net/ipv6/ip6_input.c:272
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4973
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5083
     process_backlog+0x24e/0x7a0 net/core/dev.c:5923
    kobject: 'gre0' (00000000cb1b2d7b): fill_kobj_path: path = '/devices/virtual/net/gre0'
     napi_poll net/core/dev.c:6346 [inline]
     net_rx_action+0x7fa/0x19b0 net/core/dev.c:6412
     __do_softirq+0x308/0xb7e kernel/softirq.c:292
    
    The buggy address belongs to the object at ffff888191b8cac0
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 176 bytes inside of
     512-byte region [ffff888191b8cac0, ffff888191b8ccc0)
    The buggy address belongs to the page:
    page:ffffea000646e300 count:1 mapcount:0 mapping:ffff8881da800940 index:0x0
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 ffffea0006eaaa48 ffffea00065356c8 ffff8881da800940
    raw: 0000000000000000 ffff888191b8c0c0 0000000100000006 0000000000000000
    page dumped because: kasan: bad access detected
    kobject: 'queues' (000000005fd6226e): kobject_add_internal: parent: 'gre0', set: '<NULL>'
    
    Memory state around the buggy address:
     ffff888191b8ca00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff888191b8ca80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    >ffff888191b8cb00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                 ^
     ffff888191b8cb80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888191b8cc00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 0d3c703a9d17 ("ipv6: Cleanup IPv6 tunnel receive path")
    Fixes: ed1efb2aefbb ("ipv6: Add support for IPsec virtual tunnel interfaces")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cae3c9cf9d7dc91d8fc1d2da557fe001413b76a6
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Dec 18 21:17:44 2018 -0800

    ipv6: explicitly initialize udp6_addr in udp_sock_create6()
    
    [ Upstream commit fb24274546310872eeeaf3d1d53799d8414aa0f2 ]
    
    syzbot reported the use of uninitialized udp6_addr::sin6_scope_id.
    We can just set ::sin6_scope_id to zero, as tunnels are unlikely
    to use an IPv6 address that needs a scope id and there is no
    interface to bind in this context.
    
    For net-next, it looks different as we have cfg->bind_ifindex there
    so we can probably call ipv6_iface_scope_id().
    
    Same for ::sin6_flowinfo, tunnels don't use it.
    
    Fixes: 8024e02879dd ("udp: Add udp_sock_create for UDP tunnels to open listener socket")
    Reported-by: syzbot+c56449ed3652e6720f30@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 360fb1db92dfe28145a12f48e6eefec2bf108a3a
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Dec 10 12:41:24 2018 -0600

    ipv4: Fix potential Spectre v1 vulnerability
    
    [ Upstream commit 5648451e30a0d13d11796574919a359025d52cce ]
    
    vr.vifi is indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    net/ipv4/ipmr.c:1616 ipmr_ioctl() warn: potential spectre issue 'mrt->vif_table' [r] (local cap)
    net/ipv4/ipmr.c:1690 ipmr_compat_ioctl() warn: potential spectre issue 'mrt->vif_table' [r] (local cap)
    
    Fix this by sanitizing vr.vifi before using it to index mrt->vif_table'
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32403fd3b529a6e226f41314aa901a192be19af1
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Dec 11 14:10:08 2018 -0600

    ip6mr: Fix potential Spectre v1 vulnerability
    
    [ Upstream commit 69d2c86766da2ded2b70281f1bf242cb0d58a778 ]
    
    vr.mifi is indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    net/ipv6/ip6mr.c:1845 ip6mr_ioctl() warn: potential spectre issue 'mrt->vif_table' [r] (local cap)
    net/ipv6/ip6mr.c:1919 ip6mr_compat_ioctl() warn: potential spectre issue 'mrt->vif_table' [r] (local cap)
    
    Fix this by sanitizing vr.mifi before using it to index mrt->vif_table'
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 110c877da975bc133e23bc104526790bea4ced58
Author: Willem de Bruijn <willemb@google.com>
Date:   Sun Dec 23 12:52:18 2018 -0500

    ieee802154: lowpan_header_create check must check daddr
    
    [ Upstream commit 40c3ff6d5e0809505a067dd423c110c5658c478c ]
    
    Packet sockets may call dev_header_parse with NULL daddr. Make
    lowpan_header_ops.create fail.
    
    Fixes: 87a93e4eceb4 ("ieee802154: change needed headroom/tailroom")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Alexander Aring <aring@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42b676c72e045ecf05d2c304700300115caf82f6
Author: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
Date:   Mon Dec 31 15:43:01 2018 -0600

    ibmveth: fix DMA unmap error in ibmveth_xmit_start error path
    
    [ Upstream commit 756af9c642329d54f048bac2a62f829b391f6944 ]
    
    Commit 33a48ab105a7 ("ibmveth: Fix DMA unmap error") fixed an issue in the
    normal code path of ibmveth_xmit_start() that was originally introduced by
    Commit 6e8ab30ec677 ("ibmveth: Add scatter-gather support"). This original
    fix missed the error path where dma_unmap_page is wrongly called on the
    header portion in descs[0] which was mapped with dma_map_single. As a
    result a failure to DMA map any of the frags results in a dmesg warning
    when CONFIG_DMA_API_DEBUG is enabled.
    
    ------------[ cut here ]------------
    DMA-API: ibmveth 30000002: device driver frees DMA memory with wrong function
      [device address=0x000000000a430000] [size=172 bytes] [mapped as page] [unmapped as single]
    WARNING: CPU: 1 PID: 8426 at kernel/dma/debug.c:1085 check_unmap+0x4fc/0xe10
    ...
    <snip>
    ...
    DMA-API: Mapped at:
    ibmveth_start_xmit+0x30c/0xb60
    dev_hard_start_xmit+0x100/0x450
    sch_direct_xmit+0x224/0x490
    __qdisc_run+0x20c/0x980
    __dev_queue_xmit+0x1bc/0xf20
    
    This fixes the API misuse by unampping descs[0] with dma_unmap_single.
    
    Fixes: 6e8ab30ec677 ("ibmveth: Add scatter-gather support")
    Signed-off-by: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c859adedd52984c15540f871f97beffdeea8e08
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Wed Dec 19 23:23:00 2018 +0100

    gro_cell: add napi_disable in gro_cells_destroy
    
    [ Upstream commit 8e1da73acded4751a93d4166458a7e640f37d26c ]
    
    Add napi_disable routine in gro_cells_destroy since starting from
    commit c42858eaf492 ("gro_cells: remove spinlock protecting receive
    queues") gro_cell_poll and gro_cells_destroy can run concurrently on
    napi_skbs list producing a kernel Oops if the tunnel interface is
    removed while gro_cell_poll is running. The following Oops has been
    triggered removing a vxlan device while the interface is receiving
    traffic
    
    [ 5628.948853] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
    [ 5628.949981] PGD 0 P4D 0
    [ 5628.950308] Oops: 0002 [#1] SMP PTI
    [ 5628.950748] CPU: 0 PID: 9 Comm: ksoftirqd/0 Not tainted 4.20.0-rc6+ #41
    [ 5628.952940] RIP: 0010:gro_cell_poll+0x49/0x80
    [ 5628.955615] RSP: 0018:ffffc9000004fdd8 EFLAGS: 00010202
    [ 5628.956250] RAX: 0000000000000000 RBX: ffffe8ffffc08150 RCX: 0000000000000000
    [ 5628.957102] RDX: 0000000000000000 RSI: ffff88802356bf00 RDI: ffffe8ffffc08150
    [ 5628.957940] RBP: 0000000000000026 R08: 0000000000000000 R09: 0000000000000000
    [ 5628.958803] R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000040
    [ 5628.959661] R13: ffffe8ffffc08100 R14: 0000000000000000 R15: 0000000000000040
    [ 5628.960682] FS:  0000000000000000(0000) GS:ffff88803ea00000(0000) knlGS:0000000000000000
    [ 5628.961616] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 5628.962359] CR2: 0000000000000008 CR3: 000000000221c000 CR4: 00000000000006b0
    [ 5628.963188] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 5628.964034] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 5628.964871] Call Trace:
    [ 5628.965179]  net_rx_action+0xf0/0x380
    [ 5628.965637]  __do_softirq+0xc7/0x431
    [ 5628.966510]  run_ksoftirqd+0x24/0x30
    [ 5628.966957]  smpboot_thread_fn+0xc5/0x160
    [ 5628.967436]  kthread+0x113/0x130
    [ 5628.968283]  ret_from_fork+0x3a/0x50
    [ 5628.968721] Modules linked in:
    [ 5628.969099] CR2: 0000000000000008
    [ 5628.969510] ---[ end trace 9d9dedc7181661fe ]---
    [ 5628.970073] RIP: 0010:gro_cell_poll+0x49/0x80
    [ 5628.972965] RSP: 0018:ffffc9000004fdd8 EFLAGS: 00010202
    [ 5628.973611] RAX: 0000000000000000 RBX: ffffe8ffffc08150 RCX: 0000000000000000
    [ 5628.974504] RDX: 0000000000000000 RSI: ffff88802356bf00 RDI: ffffe8ffffc08150
    [ 5628.975462] RBP: 0000000000000026 R08: 0000000000000000 R09: 0000000000000000
    [ 5628.976413] R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000040
    [ 5628.977375] R13: ffffe8ffffc08100 R14: 0000000000000000 R15: 0000000000000040
    [ 5628.978296] FS:  0000000000000000(0000) GS:ffff88803ea00000(0000) knlGS:0000000000000000
    [ 5628.979327] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 5628.980044] CR2: 0000000000000008 CR3: 000000000221c000 CR4: 00000000000006b0
    [ 5628.980929] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 5628.981736] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 5628.982409] Kernel panic - not syncing: Fatal exception in interrupt
    [ 5628.983307] Kernel Offset: disabled
    
    Fixes: c42858eaf492 ("gro_cells: remove spinlock protecting receive queues")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e881d8764ed9b04ae3e5c3e5d132acb75ef91ba
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Dec 29 13:56:36 2018 -0800

    ax25: fix a use-after-free in ax25_fillin_cb()
    
    [ Upstream commit c433570458e49bccea5c551df628d058b3526289 ]
    
    There are multiple issues here:
    
    1. After freeing dev->ax25_ptr, we need to set it to NULL otherwise
       we may use a dangling pointer.
    
    2. There is a race between ax25_setsockopt() and device notifier as
       reported by syzbot. Close it by holding RTNL lock.
    
    3. We need to test if dev->ax25_ptr is NULL before using it.
    
    Reported-and-tested-by: syzbot+ae6bb869cbed29b29040@syzkaller.appspotmail.com
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
