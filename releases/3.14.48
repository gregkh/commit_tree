commit 3cdf91941d7490ba1d0a72729a667c42b489b23a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jul 10 10:38:15 2015 -0700

    Linux 3.14.48

commit e480f9aceffa18e1692db54014bc2f660dcfdf3e
Author: David E. Box <david.e.box@linux.intel.com>
Date:   Wed Aug 27 14:40:39 2014 -0700

    x86/iosf: Add Kconfig prompt for IOSF_MBI selection
    
    commit aa8e4f22ab7773352ba3895597189b8097f2c307 upstream.
    
    Fixes an error in having the iosf build as 'default m'. On X86 SoC's the iosf
    sideband is the only way to access information for some registers, as opposed to
    through MSR's on other Intel architectures. While selecting IOSF_MBI is
    preferred, it does mean carrying extra code on non-SoC architectures. This
    exports the selection to the user, allowing those driver writers to compile out
    iosf code if it's not being built.
    
    Signed-off-by: David E. Box <david.e.box@linux.intel.com>
    Link: http://lkml.kernel.org/r/1409175640-32426-2-git-send-email-david.e.box@linux.intel.com
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Cc: William Dauchy <william@gandi.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60c800a8895b75b8be2a285b453761f19826327f
Author: Christoffer Dall <christoffer.dall@linaro.org>
Date:   Fri Mar 13 17:02:56 2015 +0000

    arm/arm64: KVM: Keep elrsr/aisr in sync with software model
    
    commit ae705930fca6322600690df9dc1c7d0516145a93 upstream.
    
    [Note the upstream one of this patch requires applying full GICv3 support
    but it's out of the scope of stable kernel. So this patch has a huge
    modification for stable kernel comparing to the upstream one.]
    
    There is an interesting bug in the vgic code, which manifests itself
    when the KVM run loop has a signal pending or needs a vmid generation
    rollover after having disabled interrupts but before actually switching
    to the guest.
    
    In this case, we flush the vgic as usual, but we sync back the vgic
    state and exit to userspace before entering the guest.  The consequence
    is that we will be syncing the list registers back to the software model
    using the GICH_ELRSR and GICH_EISR from the last execution of the guest,
    potentially overwriting a list register containing an interrupt.
    
    This showed up during migration testing where we would capture a state
    where the VM has masked the arch timer but there were no interrupts,
    resulting in a hung test.
    
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Reported-by: Alex Bennee <alex.bennee@linaro.org>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Alex Benn√©e <alex.bennee@linaro.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec86d15103a9b73c5f1decd2ea7bc12efecaa3c0
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Mar 10 19:07:00 2015 +0000

    arm64: KVM: Do not use pgd_index to index stage-2 pgd
    
    commit 04b8dc85bf4a64517e3cf20e409eeaa503b15cc1 upstream.
    
    [Since we don't backport commit c647355 (KVM: arm: Add initial dirty page
    locking support) for linux-3.14.y, there is no stage2_wp_range in
    arch/arm/kvm/mmu.c. So ignore the change in stage2_wp_range introduced
    by this patch.]
    
    The kernel's pgd_index macro is designed to index a normal, page
    sized array. KVM is a bit diffferent, as we can use concatenated
    pages to have a bigger address space (for example 40bit IPA with
    4kB pages gives us an 8kB PGD.
    
    In the above case, the use of pgd_index will always return an index
    inside the first 4kB, which makes a guest that has memory above
    0x8000000000 rather unhappy, as it spins forever in a page fault,
    whist the host happilly corrupts the lower pgd.
    
    The obvious fix is to get our own kvm_pgd_index that does the right
    thing(tm).
    
    Tested on X-Gene with a hacked kvmtool that put memory at a stupidly
    high address.
    
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ef8d0f1fbf99155d6167d279b38c4bd8ed6c73f
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Jan 11 14:10:11 2015 +0100

    arm64: KVM: Fix HCR setting for 32bit guests
    
    commit 801f6772cecea6cfc7da61aa197716ab64db5f9e upstream.
    
    Commit b856a59141b1 (arm/arm64: KVM: Reset the HCR on each vcpu
    when resetting the vcpu) moved the init of the HCR register to
    happen later in the init of a vcpu, but left out the fixup
    done in kvm_reset_vcpu when preparing for a 32bit guest.
    
    As a result, the 32bit guest is run as a 64bit guest, but the
    rest of the kernel still manages it as a 32bit. Fun follows.
    
    Moving the fixup to vcpu_reset_hcr solves the problem for good.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1df49967c0e481d6c5e6bf58e8aea9b3a0cc75d5
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Jan 11 14:10:10 2015 +0100

    arm64: KVM: Fix TLB invalidation by IPA/VMID
    
    commit 55e858b75808347378e5117c3c2339f46cc03575 upstream.
    
    It took about two years for someone to notice that the IPA passed
    to TLBI IPAS2E1IS must be shifted by 12 bits. Clearly our reviewing
    is not as good as it should be...
    
    Paper bag time for me.
    
    Reported-by: Mario Smarduch <m.smarduch@samsung.com>
    Tested-by: Mario Smarduch <m.smarduch@samsung.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6a758a8d3fb4d71639ab7c9bb0c25b666e2a262
Author: Christoffer Dall <christoffer.dall@linaro.org>
Date:   Fri Dec 12 21:19:23 2014 +0100

    arm/arm64: KVM: Require in-kernel vgic for the arch timers
    
    commit 05971120fca43e0357789a14b3386bb56eef2201 upstream.
    
    [Note this patch is a bit different from the original one as the names of
    vgic_initialized and kvm_vgic_init are different.]
    
    It is curently possible to run a VM with architected timers support
    without creating an in-kernel VGIC, which will result in interrupts from
    the virtual timer going nowhere.
    
    To address this issue, move the architected timers initialization to the
    time when we run a VCPU for the first time, and then only initialize
    (and enable) the architected timers if we have a properly created and
    initialized in-kernel VGIC.
    
    When injecting interrupts from the virtual timer to the vgic, the
    current setup should ensure that this never calls an on-demand init of
    the VGIC, which is the only call path that could return an error from
    kvm_vgic_inject_irq(), so capture the return value and raise a warning
    if there's an error there.
    
    We also change the kvm_timer_init() function from returning an int to be
    a void function, since the function always succeeds.
    
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc7fde84c9f0c8f8e62d01ed4c036b51c6b83c34
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Jan 7 08:10:09 2015 -0600

    vfs: Ignore unlocked mounts in fs_fully_visible
    
    commit ceeb0e5d39fcdf4dca2c997bf225c7fc49200b37 upstream.
    
    Limit the mounts fs_fully_visible considers to locked mounts.
    Unlocked can always be unmounted so considering them adds hassle
    but no security benefit.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32e55895a1c1fbdc1cfe5c75104d92810dbcbcbe
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sun May 24 09:25:00 2015 -0500

    vfs: Remove incorrect debugging WARN in prepend_path
    
    commit 93e3bce6287e1fb3e60d3324ed08555b5bbafa89 upstream.
    
    The warning message in prepend_path is unclear and outdated.  It was
    added as a warning that the mechanism for generating names of pseudo
    files had been removed from prepend_path and d_dname should be used
    instead.  Unfortunately the warning reads like a general warning,
    making it unclear what to do with it.
    
    Remove the warning.  The transition it was added to warn about is long
    over, and I added code several years ago which in rare cases causes
    the warning to fire on legitimate code, and the warning is now firing
    and scaring people for no good reason.
    
    Reported-by: Ivan Delalande <colona@arista.com>
    Reported-by: Omar Sandoval <osandov@osandov.com>
    Fixes: f48cfddc6729e ("vfs: In d_path don't call d_dname on a mount point")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb074edaffd8ef1e4532b4a4557b3ebeb9596184
Author: Jan Kara <jack@suse.cz>
Date:   Thu May 21 16:05:52 2015 +0200

    fs: Fix S_NOSEC handling
    
    commit 2426f3910069ed47c0cc58559a6d088af7920201 upstream.
    
    file_remove_suid() could mistakenly set S_NOSEC inode bit when root was
    modifying the file. As a result following writes to the file by ordinary
    user would avoid clearing suid or sgid bits.
    
    Fix the bug by checking actual mode bits before setting S_NOSEC.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18358e27d477847f49a509ed50f4b70bab8e8f8b
Author: Radim Krƒçm√°≈ô <rkrcmar@redhat.com>
Date:   Wed Jul 1 15:31:49 2015 +0200

    KVM: x86: make vapics_in_nmi_mode atomic
    
    commit 42720138b06301cc8a7ee8a495a6d021c4b6a9bc upstream.
    
    Writes were a bit racy, but hard to turn into a bug at the same time.
    (Particularly because modern Linux doesn't use this feature anymore.)
    
    Signed-off-by: Radim Krƒçm√°≈ô <rkrcmar@redhat.com>
    [Actually the next patch makes it much, much easier to trigger the race
     so I'm including this one for stable@ as well. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11ac9ad9ab48551a5bb17748d7e9d8676b28c692
Author: James Hogan <jhogan@kernel.org>
Date:   Mon Apr 27 15:07:16 2015 +0100

    MIPS: Fix KVM guest fixmap address
    
    commit 8e748c8d09a9314eedb5c6367d9acfaacddcdc88 upstream.
    
    KVM guest kernels for trap & emulate run in user mode, with a modified
    set of kernel memory segments. However the fixmap address is still in
    the normal KSeg3 region at 0xfffe0000 regardless, causing problems when
    cache alias handling makes use of them when handling copy on write.
    
    Therefore define FIXADDR_TOP as 0x7ffe0000 in the guest kernel mapped
    region when CONFIG_KVM_GUEST is defined.
    
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/9887/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38f69b4caebc05f39c8f27a7d84f4b283699f600
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Tue Jun 9 18:54:07 2015 -0500

    x86/PCI: Use host bridge _CRS info on Foxconn K8M890-8237A
    
    commit 1dace0116d0b05c967d94644fc4dfe96be2ecd3d upstream.
    
    The Foxconn K8M890-8237A has two PCI host bridges, and we can't assign
    resources correctly without the information from _CRS that tells us which
    address ranges are claimed by which bridge.  In the bugs mentioned below,
    we incorrectly assign a sound card address (this example is from 1033299):
    
      bus: 00 index 2 [mem 0x80000000-0xfcffffffff]
      ACPI: PCI Root Bridge [PCI0] (domain 0000 [bus 00-7f])
      pci_root PNP0A08:00: host bridge window [mem 0x80000000-0xbfefffff] (ignored)
      pci_root PNP0A08:00: host bridge window [mem 0xc0000000-0xdfffffff] (ignored)
      pci_root PNP0A08:00: host bridge window [mem 0xf0000000-0xfebfffff] (ignored)
      ACPI: PCI Root Bridge [PCI1] (domain 0000 [bus 80-ff])
      pci_root PNP0A08:01: host bridge window [mem 0xbff00000-0xbfffffff] (ignored)
      pci 0000:80:01.0: [1106:3288] type 0 class 0x000403
      pci 0000:80:01.0: reg 10: [mem 0xbfffc000-0xbfffffff 64bit]
      pci 0000:80:01.0: address space collision: [mem 0xbfffc000-0xbfffffff 64bit] conflicts with PCI Bus #00 [mem 0x80000000-0xfcffffffff]
      pci 0000:80:01.0: BAR 0: assigned [mem 0xfd00000000-0xfd00003fff 64bit]
      BUG: unable to handle kernel paging request at ffffc90000378000
      IP: [<ffffffffa0345f63>] azx_create+0x37c/0x822 [snd_hda_intel]
    
    We assigned 0xfd_0000_0000, but that is not in any of the host bridge
    windows, and the sound card doesn't work.
    
    Turn on pci=use_crs automatically for this system.
    
    Link: https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/931368
    Link: https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1033299
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c5e6d5cb727e1e3b9bde99752ef3b14d66db546
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Tue Jun 9 17:31:38 2015 -0500

    x86/PCI: Use host bridge _CRS info on systems with >32 bit addressing
    
    commit 3d9fecf6bfb8b12bc2f9a4c7109895a2a2bb9436 upstream.
    
    We enable _CRS on all systems from 2008 and later.  On older systems, we
    ignore _CRS and assume the whole physical address space (excluding RAM and
    other devices) is available for PCI devices, but on systems that support
    physical address spaces larger than 4GB, it's doubtful that the area above
    4GB is really available for PCI.
    
    After d56dbf5bab8c ("PCI: Allocate 64-bit BARs above 4G when possible"), we
    try to use that space above 4GB *first*, so we're more likely to put a
    device there.
    
    On Juan's Toshiba Satellite Pro U200, BIOS left the graphics, sound, 1394,
    and card reader devices unassigned (but only after Windows had been
    booted).  Only the sound device had a 64-bit BAR, so it was the only device
    placed above 4GB, and hence the only device that didn't work.
    
    Keep _CRS enabled even on pre-2008 systems if they support physical address
    space larger than 4GB.
    
    Fixes: d56dbf5bab8c ("PCI: Allocate 64-bit BARs above 4G when possible")
    Reported-and-tested-by: Juan Dayer <jdayer@outlook.com>
    Reported-and-tested-by: Alan Horsfield <alan@hazelgarth.co.uk>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=99221
    Link: https://bugzilla.opensuse.org/show_bug.cgi?id=907092
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28aab9ee15e3c16ca55581e0336f29afca5310fd
Author: Anton Blanchard <anton@samba.org>
Date:   Tue May 26 15:10:24 2015 +1000

    powerpc/perf: Fix book3s kernel to userspace backtraces
    
    commit 72e349f1124a114435e599479c9b8d14bfd1ebcd upstream.
    
    When we take a PMU exception or a software event we call
    perf_read_regs(). This overloads regs->result with a boolean that
    describes if we should use the sampled instruction address register
    (SIAR) or the regs.
    
    If the exception is in kernel, we start with the kernel regs and
    backtrace through the kernel stack. At this point we switch to the
    userspace regs and backtrace the user stack with perf_callchain_user().
    
    Unfortunately these regs have not got the perf_read_regs() treatment,
    so regs->result could be anything. If it is non zero,
    perf_instruction_pointer() decides to use the SIAR, and we get issues
    like this:
    
    0.11%  qemu-system-ppc  [kernel.kallsyms]        [k] _raw_spin_lock_irqsave
           |
           ---_raw_spin_lock_irqsave
              |
              |--52.35%-- 0
              |          |
              |          |--46.39%-- __hrtimer_start_range_ns
              |          |          kvmppc_run_core
              |          |          kvmppc_vcpu_run_hv
              |          |          kvmppc_vcpu_run
              |          |          kvm_arch_vcpu_ioctl_run
              |          |          kvm_vcpu_ioctl
              |          |          do_vfs_ioctl
              |          |          sys_ioctl
              |          |          system_call
              |          |          |
              |          |          |--67.08%-- _raw_spin_lock_irqsave <--- hi mum
              |          |          |          |
              |          |          |           --100.00%-- 0x7e714
              |          |          |                     0x7e714
    
    Notice the bogus _raw_spin_irqsave when we transition from kernel
    (system_call) to userspace (0x7e714). We inserted what was in the SIAR.
    
    Add a check in regs_use_siar() to check that the regs in question
    are from a PMU exception. With this fix the backtrace makes sense:
    
         0.47%  qemu-system-ppc  [kernel.vmlinux]         [k] _raw_spin_lock_irqsave
                |
                ---_raw_spin_lock_irqsave
                   |
                   |--53.83%-- 0
                   |          |
                   |          |--44.73%-- hrtimer_try_to_cancel
                   |          |          kvmppc_start_thread
                   |          |          kvmppc_run_core
                   |          |          kvmppc_vcpu_run_hv
                   |          |          kvmppc_vcpu_run
                   |          |          kvm_arch_vcpu_ioctl_run
                   |          |          kvm_vcpu_ioctl
                   |          |          do_vfs_ioctl
                   |          |          sys_ioctl
                   |          |          system_call
                   |          |          __ioctl
                   |          |          0x7e714
                   |          |          0x7e714
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68ca9e96712a044dde8a872792282d22e3c3fdd6
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon Mar 16 10:59:43 2015 +0000

    arm: KVM: force execution of HCPTR access on VM exit
    
    commit 85e84ba31039595995dae80b277378213602891b upstream.
    
    On VM entry, we disable access to the VFP registers in order to
    perform a lazy save/restore of these registers.
    
    On VM exit, we restore access, test if we did enable them before,
    and save/restore the guest/host registers if necessary. In this
    sequence, the FPEXC register is always accessed, irrespective
    of the trapping configuration.
    
    If the guest didn't touch the VFP registers, then the HCPTR access
    has now enabled such access, but we're missing a barrier to ensure
    architectural execution of the new HCPTR configuration. If the HCPTR
    access has been delayed/reordered, the subsequent access to FPEXC
    will cause a trap, which we aren't prepared to handle at all.
    
    The same condition exists when trapping to enable VFP for the guest.
    
    The fix is to introduce a barrier after enabling VFP access. In the
    vmexit case, it can be relaxed to only takes place if the guest hasn't
    accessed its view of the VFP registers, making the access to FPEXC safe.
    
    The set_hcptr macro is modified to deal with both vmenter/vmexit and
    vmtrap operations, and now takes an optional label that is branched to
    when the guest hasn't touched the VFP registers.
    
    Reported-by: Vikram Sethi <vikrams@codeaurora.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68c2e421b160403c686faf74937bbf8a34f417b8
Author: Joe Konno <joe.konno@intel.com>
Date:   Tue May 12 07:59:42 2015 -0700

    intel_pstate: set BYT MSR with wrmsrl_on_cpu()
    
    commit 0dd23f94251f49da99a6cbfb22418b2d757d77d6 upstream.
    
    Commit 007bea098b86 (intel_pstate: Add setting voltage value for
    baytrail P states.) introduced byt_set_pstate() with the assumption that
    it would always be run by the CPU whose MSR is to be written by it.  It
    turns out, however, that is not always the case in practice, so modify
    byt_set_pstate() to enforce the MSR write done by it to always happen on
    the right CPU.
    
    Fixes: 007bea098b86 (intel_pstate: Add setting voltage value for baytrail P states.)
    Signed-off-by: Joe Konno <joe.konno@intel.com>
    Acked-by: Kristen Carlson Accardi <kristen@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ef6b2a063acda7d334ee42f60670f21f774c200
Author: Joerg Roedel <jroedel@suse.de>
Date:   Thu Jun 18 10:48:34 2015 +0200

    iommu/amd: Handle large pages correctly in free_pagetable
    
    commit 0b3fff54bc01e8e6064d222a33e6fa7adabd94cd upstream.
    
    Make sure that we are skipping over large PTEs while walking
    the page-table tree.
    
    Fixes: 5c34c403b723 ("iommu/amd: Fix memory leak in free_pagetable")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e41a1e6577d29886470e21875e8d7daa3102cf90
Author: Horia Geant? <horia.geanta@freescale.com>
Date:   Mon May 11 20:04:49 2015 +0300

    Revert "crypto: talitos - convert to use be16_add_cpu()"
    
    commit 69d9cd8c592f1abce820dbce7181bbbf6812cfbd upstream.
    
    This reverts commit 7291a932c6e27d9768e374e9d648086636daf61c.
    
    The conversion to be16_add_cpu() is incorrect in case cryptlen is
    negative due to premature (i.e. before addition / subtraction)
    implicit conversion of cryptlen (int -> u16) leading to sign loss.
    
    Cc: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Signed-off-by: Horia Geanta <horia.geanta@freescale.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ff8c02b61bbe51db2294724d6183ac801204aca
Author: Horia Geant? <horia.geanta@freescale.com>
Date:   Mon May 11 20:03:24 2015 +0300

    crypto: talitos - avoid memleak in talitos_alg_alloc()
    
    commit 5fa7dadc898567ce14d6d6d427e7bd8ce6eb5d39 upstream.
    
    Fixes: 1d11911a8c57 ("crypto: talitos - fix warning: 'alg' may be used uninitialized in this function")
    Signed-off-by: Horia Geanta <horia.geanta@freescale.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab65d27cc4af1b2e72da2d9d098edcec99e491c6
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Mon Jun 29 10:41:03 2015 +0200

    sctp: Fix race between OOTB responce and route removal
    
    [ Upstream commit 29c4afc4e98f4dc0ea9df22c631841f9c220b944 ]
    
    There is NULL pointer dereference possible during statistics update if the route
    used for OOTB responce is removed at unfortunate time. If the route exists when
    we receive OOTB packet and we finally jump into sctp_packet_transmit() to send
    ABORT, but in the meantime route is removed under our feet, we take "no_route"
    path and try to update stats with IP_INC_STATS(sock_net(asoc->base.sk), ...).
    
    But sctp_ootb_pkt_new() used to prepare responce packet doesn't call
    sctp_transport_set_owner() and therefore there is no asoc associated with this
    packet. Probably temporary asoc just for OOTB responces is overkill, so just
    introduce a check like in all other places in sctp_packet_transmit(), where
    "asoc" is dereferenced.
    
    To reproduce this, one needs to
    0. ensure that sctp module is loaded (otherwise ABORT is not generated)
    1. remove default route on the machine
    2. while true; do
         ip route del [interface-specific route]
         ip route add [interface-specific route]
       done
    3. send enough OOTB packets (i.e. HB REQs) from another host to trigger ABORT
       responce
    
    On x86_64 the crash looks like this:
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
    IP: [<ffffffffa05ec9ac>] sctp_packet_transmit+0x63c/0x730 [sctp]
    PGD 0
    Oops: 0000 [#1] PREEMPT SMP
    Modules linked in: ...
    CPU: 0 PID: 0 Comm: swapper/0 Tainted: G           O    4.0.5-1-ARCH #1
    Hardware name: ...
    task: ffffffff818124c0 ti: ffffffff81800000 task.ti: ffffffff81800000
    RIP: 0010:[<ffffffffa05ec9ac>]  [<ffffffffa05ec9ac>] sctp_packet_transmit+0x63c/0x730 [sctp]
    RSP: 0018:ffff880127c037b8  EFLAGS: 00010296
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00000015ff66b480
    RDX: 00000015ff66b400 RSI: ffff880127c17200 RDI: ffff880123403700
    RBP: ffff880127c03888 R08: 0000000000017200 R09: ffffffff814625af
    R10: ffffea00047e4680 R11: 00000000ffffff80 R12: ffff8800b0d38a28
    R13: ffff8800b0d38a28 R14: ffff8800b3e88000 R15: ffffffffa05f24e0
    FS:  0000000000000000(0000) GS:ffff880127c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    CR2: 0000000000000020 CR3: 00000000c855b000 CR4: 00000000000007f0
    Stack:
     ffff880127c03910 ffff8800b0d38a28 ffffffff8189d240 ffff88011f91b400
     ffff880127c03828 ffffffffa05c94c5 0000000000000000 ffff8800baa1c520
     0000000000000000 0000000000000001 0000000000000000 0000000000000000
    Call Trace:
     <IRQ>
     [<ffffffffa05c94c5>] ? sctp_sf_tabort_8_4_8.isra.20+0x85/0x140 [sctp]
     [<ffffffffa05d6b42>] ? sctp_transport_put+0x52/0x80 [sctp]
     [<ffffffffa05d0bfc>] sctp_do_sm+0xb8c/0x19a0 [sctp]
     [<ffffffff810b0e00>] ? trigger_load_balance+0x90/0x210
     [<ffffffff810e0329>] ? update_process_times+0x59/0x60
     [<ffffffff812c7a40>] ? timerqueue_add+0x60/0xb0
     [<ffffffff810e0549>] ? enqueue_hrtimer+0x29/0xa0
     [<ffffffff8101f599>] ? read_tsc+0x9/0x10
     [<ffffffff8116d4b5>] ? put_page+0x55/0x60
     [<ffffffff810ee1ad>] ? clockevents_program_event+0x6d/0x100
     [<ffffffff81462b68>] ? skb_free_head+0x58/0x80
     [<ffffffffa029a10b>] ? chksum_update+0x1b/0x27 [crc32c_generic]
     [<ffffffff81283f3e>] ? crypto_shash_update+0xce/0xf0
     [<ffffffffa05d3993>] sctp_endpoint_bh_rcv+0x113/0x280 [sctp]
     [<ffffffffa05dd4e6>] sctp_inq_push+0x46/0x60 [sctp]
     [<ffffffffa05ed7a0>] sctp_rcv+0x880/0x910 [sctp]
     [<ffffffffa05ecb50>] ? sctp_packet_transmit_chunk+0xb0/0xb0 [sctp]
     [<ffffffffa05ecb70>] ? sctp_csum_update+0x20/0x20 [sctp]
     [<ffffffff814b05a5>] ? ip_route_input_noref+0x235/0xd30
     [<ffffffff81051d6b>] ? ack_ioapic_level+0x7b/0x150
     [<ffffffff814b27be>] ip_local_deliver_finish+0xae/0x210
     [<ffffffff814b2e15>] ip_local_deliver+0x35/0x90
     [<ffffffff814b2a15>] ip_rcv_finish+0xf5/0x370
     [<ffffffff814b3128>] ip_rcv+0x2b8/0x3a0
     [<ffffffff81474193>] __netif_receive_skb_core+0x763/0xa50
     [<ffffffff81476c28>] __netif_receive_skb+0x18/0x60
     [<ffffffff81476cb0>] netif_receive_skb_internal+0x40/0xd0
     [<ffffffff814776c8>] napi_gro_receive+0xe8/0x120
     [<ffffffffa03946aa>] rtl8169_poll+0x2da/0x660 [r8169]
     [<ffffffff8147896a>] net_rx_action+0x21a/0x360
     [<ffffffff81078dc1>] __do_softirq+0xe1/0x2d0
     [<ffffffff8107912d>] irq_exit+0xad/0xb0
     [<ffffffff8157d158>] do_IRQ+0x58/0xf0
     [<ffffffff8157b06d>] common_interrupt+0x6d/0x6d
     <EOI>
     [<ffffffff810e1218>] ? hrtimer_start+0x18/0x20
     [<ffffffffa05d65f9>] ? sctp_transport_destroy_rcu+0x29/0x30 [sctp]
     [<ffffffff81020c50>] ? mwait_idle+0x60/0xa0
     [<ffffffff810216ef>] arch_cpu_idle+0xf/0x20
     [<ffffffff810b731c>] cpu_startup_entry+0x3ec/0x480
     [<ffffffff8156b365>] rest_init+0x85/0x90
     [<ffffffff818eb035>] start_kernel+0x48b/0x4ac
     [<ffffffff818ea120>] ? early_idt_handlers+0x120/0x120
     [<ffffffff818ea339>] x86_64_start_reservations+0x2a/0x2c
     [<ffffffff818ea49c>] x86_64_start_kernel+0x161/0x184
    Code: 90 48 8b 80 b8 00 00 00 48 89 85 70 ff ff ff 48 83 bd 70 ff ff ff 00 0f 85 cd fa ff ff 48 89 df 31 db e8 18 63 e7 e0 48 8b 45 80 <48> 8b 40 20 48 8b 40 30 48 8b 80 68 01 00 00 65 48 ff 40 78 e9
    RIP  [<ffffffffa05ec9ac>] sctp_packet_transmit+0x63c/0x730 [sctp]
     RSP <ffff880127c037b8>
    CR2: 0000000000000020
    ---[ end trace 5aec7fd2dc983574 ]---
    Kernel panic - not syncing: Fatal exception in interrupt
    Kernel Offset: 0x0 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffff9fffffff)
    drm_kms_helper: panic occurred, switching back to text console
    ---[ end Kernel panic - not syncing: Fatal exception in interrupt
    
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54e774b960ed065ed7cce56481c3d401b7c3d2d8
Author: Mugunthan V N <mugunthanvnm@ti.com>
Date:   Thu Jun 25 22:21:02 2015 +0530

    net: phy: fix phy link up when limiting speed via device tree
    
    [ Upstream commit eb686231fce3770299760f24fdcf5ad041f44153 ]
    
    When limiting phy link speed using "max-speed" to 100mbps or less on a
    giga bit phy, phy never completes auto negotiation and phy state
    machine is held in PHY_AN. Fixing this issue by comparing the giga
    bit advertise though phydev->supported doesn't have it but phy has
    BMSR_ESTATEN set. So that auto negotiation is restarted as old and
    new advertise are different and link comes up fine.
    
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1df46092f1378c29d93eb78e7821821babe73158
Author: Christoph Paasch <cpaasch@apple.com>
Date:   Thu Jun 18 09:15:34 2015 -0700

    tcp: Do not call tcp_fastopen_reset_cipher from interrupt context
    
    [ Upstream commit dfea2aa654243f70dc53b8648d0bbdeec55a7df1 ]
    
    tcp_fastopen_reset_cipher really cannot be called from interrupt
    context. It allocates the tcp_fastopen_context with GFP_KERNEL and
    calls crypto_alloc_cipher, which allocates all kind of stuff with
    GFP_KERNEL.
    
    Thus, we might sleep when the key-generation is triggered by an
    incoming TFO cookie-request which would then happen in interrupt-
    context, as shown by enabling CONFIG_DEBUG_ATOMIC_SLEEP:
    
    [   36.001813] BUG: sleeping function called from invalid context at mm/slub.c:1266
    [   36.003624] in_atomic(): 1, irqs_disabled(): 0, pid: 1016, name: packetdrill
    [   36.004859] CPU: 1 PID: 1016 Comm: packetdrill Not tainted 4.1.0-rc7 #14
    [   36.006085] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
    [   36.008250]  00000000000004f2 ffff88007f8838a8 ffffffff8171d53a ffff880075a084a8
    [   36.009630]  ffff880075a08000 ffff88007f8838c8 ffffffff810967d3 ffff88007f883928
    [   36.011076]  0000000000000000 ffff88007f8838f8 ffffffff81096892 ffff88007f89be00
    [   36.012494] Call Trace:
    [   36.012953]  <IRQ>  [<ffffffff8171d53a>] dump_stack+0x4f/0x6d
    [   36.014085]  [<ffffffff810967d3>] ___might_sleep+0x103/0x170
    [   36.015117]  [<ffffffff81096892>] __might_sleep+0x52/0x90
    [   36.016117]  [<ffffffff8118e887>] kmem_cache_alloc_trace+0x47/0x190
    [   36.017266]  [<ffffffff81680d82>] ? tcp_fastopen_reset_cipher+0x42/0x130
    [   36.018485]  [<ffffffff81680d82>] tcp_fastopen_reset_cipher+0x42/0x130
    [   36.019679]  [<ffffffff81680f01>] tcp_fastopen_init_key_once+0x61/0x70
    [   36.020884]  [<ffffffff81680f2c>] __tcp_fastopen_cookie_gen+0x1c/0x60
    [   36.022058]  [<ffffffff816814ff>] tcp_try_fastopen+0x58f/0x730
    [   36.023118]  [<ffffffff81671788>] tcp_conn_request+0x3e8/0x7b0
    [   36.024185]  [<ffffffff810e3872>] ? __module_text_address+0x12/0x60
    [   36.025327]  [<ffffffff8167b2e1>] tcp_v4_conn_request+0x51/0x60
    [   36.026410]  [<ffffffff816727e0>] tcp_rcv_state_process+0x190/0xda0
    [   36.027556]  [<ffffffff81661f97>] ? __inet_lookup_established+0x47/0x170
    [   36.028784]  [<ffffffff8167c2ad>] tcp_v4_do_rcv+0x16d/0x3d0
    [   36.029832]  [<ffffffff812e6806>] ? security_sock_rcv_skb+0x16/0x20
    [   36.030936]  [<ffffffff8167cc8a>] tcp_v4_rcv+0x77a/0x7b0
    [   36.031875]  [<ffffffff816af8c3>] ? iptable_filter_hook+0x33/0x70
    [   36.032953]  [<ffffffff81657d22>] ip_local_deliver_finish+0x92/0x1f0
    [   36.034065]  [<ffffffff81657f1a>] ip_local_deliver+0x9a/0xb0
    [   36.035069]  [<ffffffff81657c90>] ? ip_rcv+0x3d0/0x3d0
    [   36.035963]  [<ffffffff81657569>] ip_rcv_finish+0x119/0x330
    [   36.036950]  [<ffffffff81657ba7>] ip_rcv+0x2e7/0x3d0
    [   36.037847]  [<ffffffff81610652>] __netif_receive_skb_core+0x552/0x930
    [   36.038994]  [<ffffffff81610a57>] __netif_receive_skb+0x27/0x70
    [   36.040033]  [<ffffffff81610b72>] process_backlog+0xd2/0x1f0
    [   36.041025]  [<ffffffff81611482>] net_rx_action+0x122/0x310
    [   36.042007]  [<ffffffff81076743>] __do_softirq+0x103/0x2f0
    [   36.042978]  [<ffffffff81723e3c>] do_softirq_own_stack+0x1c/0x30
    
    This patch moves the call to tcp_fastopen_init_key_once to the places
    where a listener socket creates its TFO-state, which always happens in
    user-context (either from the setsockopt, or implicitly during the
    listen()-call)
    
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Fixes: 222e83d2e0ae ("tcp: switch tcp_fastopen key generation to net_get_random_once")
    Signed-off-by: Christoph Paasch <cpaasch@apple.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f171360ae594c51a6bb01093b10f5742740e0c3d
Author: Julian Anastasov <ja@ssi.bg>
Date:   Tue Jun 16 22:56:39 2015 +0300

    neigh: do not modify unlinked entries
    
    [ Upstream commit 2c51a97f76d20ebf1f50fef908b986cb051fdff9 ]
    
    The lockless lookups can return entry that is unlinked.
    Sometimes they get reference before last neigh_cleanup_and_release,
    sometimes they do not need reference. Later, any
    modification attempts may result in the following problems:
    
    1. entry is not destroyed immediately because neigh_update
    can start the timer for dead entry, eg. on change to NUD_REACHABLE
    state. As result, entry lives for some time but is invisible
    and out of control.
    
    2. __neigh_event_send can run in parallel with neigh_destroy
    while refcnt=0 but if timer is started and expired refcnt can
    reach 0 for second time leading to second neigh_destroy and
    possible crash.
    
    Thanks to Eric Dumazet and Ying Xue for their work and analyze
    on the __neigh_event_send change.
    
    Fixes: 767e97e1e0db ("neigh: RCU conversion of struct neighbour")
    Fixes: a263b3093641 ("ipv4: Make neigh lookups directly in output packet path.")
    Fixes: 6fd6ce2056de ("ipv6: Do not depend on rt->n in ip6_finish_output2().")
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ce9d474d5357852241e982dd5e106aa1b929073
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Jun 17 15:59:34 2015 -0400

    packet: avoid out of bounds read in round robin fanout
    
    [ Upstream commit 468479e6043c84f5a65299cc07cb08a22a28c2b1 ]
    
    PACKET_FANOUT_LB computes f->rr_cur such that it is modulo
    f->num_members. It returns the old value unconditionally, but
    f->num_members may have changed since the last store. Ensure
    that the return value is always < num.
    
    When modifying the logic, simplify it further by replacing the loop
    with an unconditional atomic increment.
    
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06f6b596d3bde14318753a243dea62b80b3fc26f
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 16 07:59:11 2015 -0700

    packet: read num_members once in packet_rcv_fanout()
    
    [ Upstream commit f98f4514d07871da7a113dd9e3e330743fd70ae4 ]
    
    We need to tell compiler it must not read f->num_members multiple
    times. Otherwise testing if num is not zero is flaky, and we could
    attempt an invalid divide by 0 in fanout_demux_cpu()
    
    Note bug was present in packet_rcv_fanout_hash() and
    packet_rcv_fanout_lb() but final 3.1 had a simple location
    after commit 95ec3eb417115fb ("packet: Add 'cpu' fanout policy.")
    
    Fixes: dc99f600698dc ("packet: Add fanout support.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a3334dd56ef82f556c13adf41a035e0c205ac34
Author: Nikolay Aleksandrov <razor@blackwall.org>
Date:   Mon Jun 15 20:28:51 2015 +0300

    bridge: fix br_stp_set_bridge_priority race conditions
    
    [ Upstream commit 2dab80a8b486f02222a69daca6859519e05781d9 ]
    
    After the ->set() spinlocks were removed br_stp_set_bridge_priority
    was left running without any protection when used via sysfs. It can
    race with port add/del and could result in use-after-free cases and
    corrupted lists. Tested by running port add/del in a loop with stp
    enabled while setting priority in a loop, crashes are easily
    reproducible.
    The spinlocks around sysfs ->set() were removed in commit:
    14f98f258f19 ("bridge: range check STP parameters")
    There's also a race condition in the netlink priority support that is
    fixed by this change, but it was introduced recently and the fixes tag
    covers it, just in case it's needed the commit is:
    af615762e972 ("bridge: add ageing_time, stp_state, priority over netlink")
    
    Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
    Fixes: 14f98f258f19 ("bridge: range check STP parameters")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21eceec537c215824aa5939c0a4aab4a5a8978a4
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Fri Jun 12 10:16:41 2015 -0300

    sctp: fix ASCONF list handling
    
    [ Upstream commit 2d45a02d0166caf2627fe91897c6ffc3b19514c4 ]
    
    ->auto_asconf_splist is per namespace and mangled by functions like
    sctp_setsockopt_auto_asconf() which doesn't guarantee any serialization.
    
    Also, the call to inet_sk_copy_descendant() was backuping
    ->auto_asconf_list through the copy but was not honoring
    ->do_auto_asconf, which could lead to list corruption if it was
    different between both sockets.
    
    This commit thus fixes the list handling by using ->addr_wq_lock
    spinlock to protect the list. A special handling is done upon socket
    creation and destruction for that. Error handlig on sctp_init_sock()
    will never return an error after having initialized asconf, so
    sctp_destroy_sock() can be called without addrq_wq_lock. The lock now
    will be take on sctp_close_sock(), before locking the socket, so we
    don't do it in inverse order compared to sctp_addr_wq_timeout_handler().
    
    Instead of taking the lock on sctp_sock_migrate() for copying and
    restoring the list values, it's preferred to avoid rewritting it by
    implementing sctp_copy_descendant().
    
    Issue was found with a test application that kept flipping sysctl
    default_auto_asconf on and off, but one could trigger it by issuing
    simultaneous setsockopt() calls on multiple sockets or by
    creating/destroying sockets fast enough. This is only triggerable
    locally.
    
    Fixes: 9f7d653b67ae ("sctp: Add Auto-ASCONF support (core).")
    Reported-by: Ji Jianwen <jiji@redhat.com>
    Suggested-by: Neil Horman <nhorman@tuxdriver.com>
    Suggested-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00764c5282e8320c4938ed732d4d1df189880316
Author: Shaohua Li <shli@fb.com>
Date:   Thu Jun 11 16:50:48 2015 -0700

    net: don't wait for order-3 page allocation
    
    [ Upstream commit fb05e7a89f500cfc06ae277bdc911b281928995d ]
    
    We saw excessive direct memory compaction triggered by skb_page_frag_refill.
    This causes performance issues and add latency. Commit 5640f7685831e0
    introduces the order-3 allocation. According to the changelog, the order-3
    allocation isn't a must-have but to improve performance. But direct memory
    compaction has high overhead. The benefit of order-3 allocation can't
    compensate the overhead of direct memory compaction.
    
    This patch makes the order-3 page allocation atomic. If there is no memory
    pressure and memory isn't fragmented, the alloction will still success, so we
    don't sacrifice the order-3 benefit here. If the atomic allocation fails,
    direct memory compaction will not be triggered, skb_page_frag_refill will
    fallback to order-0 immediately, hence the direct memory compaction overhead is
    avoided. In the allocation failure case, kswapd is waken up and doing
    compaction, so chances are allocation could success next time.
    
    alloc_skb_with_frags is the same.
    
    The mellanox driver does similar thing, if this is accepted, we must fix
    the driver too.
    
    V3: fix the same issue in alloc_skb_with_frags as pointed out by Eric
    V2: make the changelog clearer
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Chris Mason <clm@fb.com>
    Cc: Debabrata Banerjee <dbavatar@gmail.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a3c14f438f91748cc2b2b51250e842a31920bfd
Author: Nikolay Aleksandrov <razor@blackwall.org>
Date:   Tue Jun 9 10:23:57 2015 -0700

    bridge: fix multicast router rlist endless loop
    
    [ Upstream commit 1a040eaca1a22f8da8285ceda6b5e4a2cb704867 ]
    
    Since the addition of sysfs multicast router support if one set
    multicast_router to "2" more than once, then the port would be added to
    the hlist every time and could end up linking to itself and thus causing an
    endless loop for rlist walkers.
    So to reproduce just do:
    echo 2 > multicast_router; echo 2 > multicast_router;
    in a bridge port and let some igmp traffic flow, for me it hangs up
    in br_multicast_flood().
    Fix this by adding a check in br_multicast_add_router() if the port is
    already linked.
    The reason this didn't happen before the addition of multicast_router
    sysfs entries is because there's a !hlist_unhashed check that prevents
    it.
    
    Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
    Fixes: 0909e11758bd ("bridge: Add multicast_router sysfs entries")
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1996810d460d49b8b181db861bd4755933ff62b6
Author: Sowmini Varadhan <sowmini.varadhan@oracle.com>
Date:   Tue Apr 21 10:30:41 2015 -0400

    sparc: Use GFP_ATOMIC in ldc_alloc_exp_dring() as it can be called in softirq context
    
    Upstream commit 671d773297969bebb1732e1cdc1ec03aa53c6be2
    
    Since it is possible for vnet_event_napi to end up doing
    vnet_control_pkt_engine -> ... -> vnet_send_attr ->
    vnet_port_alloc_tx_ring -> ldc_alloc_exp_dring -> kzalloc()
    (i.e., in softirq context), kzalloc() should be called with
    GFP_ATOMIC from ldc_alloc_exp_dring.
    
    Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
