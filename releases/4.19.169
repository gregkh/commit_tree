commit 43d555d83c3f1fb8168367ca5b47c3a6570ca487
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 19 18:22:39 2021 +0100

    Linux 4.19.169
    
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210118152502.441191888@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47b5fc25044c81190203fe73d84068bffa0dd73a
Author: Olaf Hering <olaf@aepfle.de>
Date:   Sun Oct 11 20:54:31 2020 +0200

    kbuild: enforce -Werror=return-type
    
    commit 172aad81a882443eefe1bd860c4eddc81b14dd5b upstream.
    
    Catch errors which at least gcc tolerates by default:
     warning: 'return' with no value, in function returning non-void [-Wreturn-type]
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1921060a11b30dedfa8732c83de382788811bb83
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Jan 9 20:01:21 2021 +0800

    netfilter: nf_nat: Fix memleak in nf_nat_init
    
    commit 869f4fdaf4ca7bb6e0d05caf6fa1108dddc346a7 upstream.
    
    When register_pernet_subsys() fails, nf_nat_bysource
    should be freed just like when nf_ct_extend_register()
    fails.
    
    Fixes: 1cd472bf036ca ("netfilter: nf_nat: add nat hook register functions to nf_nat")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b69a79c62c7055a7c36464092b45b25018958153
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Fri Jan 8 12:44:33 2021 +0100

    netfilter: conntrack: fix reading nf_conntrack_buckets
    
    commit f6351c3f1c27c80535d76cac2299aec44c36291e upstream.
    
    The old way of changing the conntrack hashsize runtime was through changing
    the module param via file /sys/module/nf_conntrack/parameters/hashsize. This
    was extended to sysctl change in commit 3183ab8997a4 ("netfilter: conntrack:
    allow increasing bucket size via sysctl too").
    
    The commit introduced second "user" variable nf_conntrack_htable_size_user
    which shadow actual variable nf_conntrack_htable_size. When hashsize is
    changed via module param this "user" variable isn't updated. This results in
    sysctl net/netfilter/nf_conntrack_buckets shows the wrong value when users
    update via the old way.
    
    This patch fix the issue by always updating "user" variable when reading the
    proc file. This will take care of changes to the actual variable without
    sysctl need to be aware.
    
    Fixes: 3183ab8997a4 ("netfilter: conntrack: allow increasing bucket size via sysctl too")
    Reported-by: Yoel Caspersen <yoel@kviknet.dk>
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1bf14dab44a1a668317a376e89d19065917e729
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 11 14:02:50 2021 +0100

    ALSA: fireface: Fix integer overflow in transmit_midi_msg()
    
    commit e7c22eeaff8565d9a8374f320238c251ca31480b upstream.
    
    As snd_ff.rx_bytes[] is unsigned int, and NSEC_PER_SEC is 1000000000L,
    the second multiplication in
    
        ff->rx_bytes[port] * 8 * NSEC_PER_SEC / 31250
    
    always overflows on 32-bit platforms, truncating the result.  Fix this
    by precalculating "NSEC_PER_SEC / 31250", which is an integer constant.
    
    Note that this assumes ff->rx_bytes[port] <= 16777.
    
    Fixes: 19174295788de77d ("ALSA: fireface: add transaction support")
    Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20210111130251.361335-2-geert+renesas@glider.be
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab2c8bb6615b604a79b4ccadce654d2081998201
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 11 14:02:51 2021 +0100

    ALSA: firewire-tascam: Fix integer overflow in midi_port_work()
    
    commit 9f65df9c589f249435255da37a5dd11f1bc86f4d upstream.
    
    As snd_fw_async_midi_port.consume_bytes is unsigned int, and
    NSEC_PER_SEC is 1000000000L, the second multiplication in
    
        port->consume_bytes * 8 * NSEC_PER_SEC / 31250
    
    always overflows on 32-bit platforms, truncating the result.  Fix this
    by precalculating "NSEC_PER_SEC / 31250", which is an integer constant.
    
    Note that this assumes port->consume_bytes <= 16777.
    
    Fixes: 531f471834227d03 ("ALSA: firewire-lib/firewire-tascam: localize async midi port")
    Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20210111130251.361335-3-geert+renesas@glider.be
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4cc93ec99d189964ad09fc8f51e99d5a414d986
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Wed Jan 6 18:19:05 2021 -0500

    dm: eliminate potential source of excessive kernel log noise
    
    commit 0378c625afe80eb3f212adae42cc33c9f6f31abf upstream.
    
    There wasn't ever a real need to log an error in the kernel log for
    ioctls issued with insufficient permissions. Simply return an error
    and if an admin/user is sufficiently motivated they can enable DM's
    dynamic debugging to see an explanation for why the ioctls were
    disallowed.
    
    Reported-by: Nir Soffer <nsoffer@redhat.com>
    Fixes: e980f62353c6 ("dm: don't allow ioctls to targets that don't map to whole devices")
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6ced16ce529dda32000b154e254f84118ffbd8e
Author: j.nixdorf@avm.de <j.nixdorf@avm.de>
Date:   Tue Jan 5 15:17:01 2021 +0100

    net: sunrpc: interpret the return value of kstrtou32 correctly
    
    commit 86b53fbf08f48d353a86a06aef537e78e82ba721 upstream.
    
    A return value of 0 means success. This is documented in lib/kstrtox.c.
    
    This was found by trying to mount an NFS share from a link-local IPv6
    address with the interface specified by its index:
    
      mount("[fe80::1%1]:/srv/nfs", "/mnt", "nfs", 0, "nolock,addr=fe80::1%1")
    
    Before this commit this failed with EINVAL and also caused the following
    message in dmesg:
    
      [...] NFS: bad IP address specified: addr=fe80::1%1
    
    The syscall using the same address based on the interface name instead
    of its index succeeds.
    
    Credits for this patch go to my colleague Christian Speich, who traced
    the origin of this bug to this line of code.
    
    Signed-off-by: Johannes Nixdorf <j.nixdorf@avm.de>
    Fixes: 00cfaa943ec3 ("replace strict_strto calls")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21a466aed724f6f2fb10635c982a50c0900ed8f3
Author: Jann Horn <jannh@google.com>
Date:   Tue Jan 12 15:49:04 2021 -0800

    mm, slub: consider rest of partial list if acquire_slab() fails
    
    commit 8ff60eb052eeba95cfb3efe16b08c9199f8121cf upstream.
    
    acquire_slab() fails if there is contention on the freelist of the page
    (probably because some other CPU is concurrently freeing an object from
    the page).  In that case, it might make sense to look for a different page
    (since there might be more remote frees to the page from other CPUs, and
    we don't want contention on struct page).
    
    However, the current code accidentally stops looking at the partial list
    completely in that case.  Especially on kernels without CONFIG_NUMA set,
    this means that get_partial() fails and new_slab_objects() falls back to
    new_slab(), allocating new pages.  This could lead to an unnecessary
    increase in memory fragmentation.
    
    Link: https://lkml.kernel.org/r/20201228130853.1871516-1-jannh@google.com
    Fixes: 7ced37197196 ("slub: Acquire_slab() avoid loop")
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Acked-by: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1f2d446fd8951d4ab772765c8b9008024f02f1a
Author: Mark Bloch <mbloch@nvidia.com>
Date:   Wed Jan 13 14:17:03 2021 +0200

    RDMA/mlx5: Fix wrong free of blue flame register on error
    
    commit 1c3aa6bd0b823105c2030af85d92d158e815d669 upstream.
    
    If the allocation of the fast path blue flame register fails, the driver
    should free the regular blue flame register allocated a statement above,
    not the one that it just failed to allocate.
    
    Fixes: 16c1975f1032 ("IB/mlx5: Create profile infrastructure to add and remove stages")
    Link: https://lore.kernel.org/r/20210113121703.559778-6-leon@kernel.org
    Reported-by: Hans Petter Selasky <hanss@nvidia.com>
    Signed-off-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25469b2e852311ddb1fa05b9a517972f252a892d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Dec 26 15:42:48 2020 +0800

    RDMA/usnic: Fix memleak in find_free_vf_and_create_qp_grp
    
    commit a306aba9c8d869b1fdfc8ad9237f1ed718ea55e6 upstream.
    
    If usnic_ib_qp_grp_create() fails at the first call, dev_list
    will not be freed on error, which leads to memleak.
    
    Fixes: e3cf00d0a87f ("IB/usnic: Add Cisco VIC low-level hardware driver")
    Link: https://lore.kernel.org/r/20201226074248.2893-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e45768d6a279b20fe4c51a41a6d18c54899d0e6
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 16 11:18:43 2020 +0100

    ext4: fix superblock checksum failure when setting password salt
    
    commit dfd56c2c0c0dbb11be939b804ddc8d5395ab3432 upstream.
    
    When setting password salt in the superblock, we forget to recompute the
    superblock checksum so it will not match until the next superblock
    modification which recomputes the checksum. Fix it.
    
    CC: Michael Halcrow <mhalcrow@google.com>
    Reported-by: Andreas Dilger <adilger@dilger.ca>
    Fixes: 9bd8212f981e ("ext4 crypto: add encryption policy and password salt support")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20201216101844.22917-8-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df7adeee7477c865fecdd43b55aee6cca0e9bb0a
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Jan 10 15:58:08 2021 -0500

    NFS: nfs_igrab_and_active must first reference the superblock
    
    commit 896567ee7f17a8a736cda8a28cc987228410a2ac upstream.
    
    Before referencing the inode, we must ensure that the superblock can be
    referenced. Otherwise, we can end up with iput() calling superblock
    operations that are no longer valid or accessible.
    
    Fixes: ea7c38fef0b7 ("NFSv4: Ensure we reference the inode for return-on-close in delegreturn")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2f9fbbc3fa20f066e20f1d676175e4af0e177ba
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed Jan 6 14:13:22 2021 -0500

    NFS/pNFS: Fix a leak of the layout 'plh_outstanding' counter
    
    commit cb2856c5971723910a86b7d1d0cf623d6919cbc4 upstream.
    
    If we exit _lgopen_prepare_attached() without setting a layout, we will
    currently leak the plh_outstanding counter.
    
    Fixes: 411ae722d10a ("pNFS: Wait for stale layoutget calls to complete in pnfs_update_layout()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87396ce3b5059916e81b6c3456a5c2b9b7636b5f
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Jan 4 13:35:46 2021 -0500

    pNFS: Mark layout for return if return-on-close was not sent
    
    commit 67bbceedc9bb8ad48993a8bd6486054756d711f4 upstream.
    
    If the layout return-on-close failed because the layoutreturn was never
    sent, then we should mark the layout for return again.
    
    Fixes: 9c47b18cf722 ("pNFS: Ensure we do clear the return-on-close layout stateid on fatal errors")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 825e0ffaad2cf1ca789a61ede31dab213618b648
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Fri Dec 11 05:12:51 2020 -0500

    NFS4: Fix use-after-free in trace_event_raw_event_nfs4_set_lock
    
    commit 3d1a90ab0ed93362ec8ac85cf291243c87260c21 upstream.
    
    It is only safe to call the tracepoint before rpc_put_task() because
    'data' is freed inside nfs4_lock_release (rpc_release).
    
    Fixes: 48c9579a1afe ("Adding stateid information to tracepoints")
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd75081acc7ea25b1b188b6504a20ab11d6148e9
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Dec 11 13:06:52 2020 +0300

    ASoC: Intel: fix error code cnl_set_dsp_D0()
    
    commit f373a811fd9a69fc8bafb9bcb41d2cfa36c62665 upstream.
    
    Return -ETIMEDOUT if the dsp boot times out instead of returning
    success.
    
    Fixes: cb6a55284629 ("ASoC: Intel: cnl: Add sst library functions for cnl platform")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/X9NEvCzuN+IObnTN@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 516d9690da133317fbe7bc92c5b1aff9b953af4c
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Thu Dec 17 16:08:12 2020 +0100

    ASoC: meson: axg-tdm-interface: fix loopback
    
    commit 671ee4db952449acde126965bf76817a3159040d upstream.
    
    When the axg-tdm-interface was introduced, the backend DAI was marked as an
    endpoint when DPCM was walking the DAPM graph to find a its BE.
    
    It is no longer the case since this
    commit 8dd26dff00c0 ("ASoC: dapm: Fix handling of custom_stop_condition on DAPM graph walks")
    Because of this, when DPCM finds a BE it does everything it needs on the
    DAIs but it won't power up the widgets between the FE and the BE if there
    is no actual endpoint after the BE.
    
    On meson-axg HWs, the loopback is a special DAI of the tdm-interface BE.
    It is only linked to the dummy codec since there no actual HW after it.
    >From the DAPM perspective, the DAI has no endpoint. Because of this, the TDM
    decoder, which is a widget between the FE and BE is not powered up.
    
    >From the user perspective, everything seems fine but no data is produced.
    
    Connecting the Loopback DAI to a dummy DAPM endpoint solves the problem.
    
    Fixes: 8dd26dff00c0 ("ASoC: dapm: Fix handling of custom_stop_condition on DAPM graph walks")
    Cc: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20201217150812.3247405-1-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fda4bb55c45bd9fdf490c39c3e567f0cea931e54
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jan 5 14:43:46 2021 -0500

    dump_common_audit_data(): fix racy accesses to ->d_name
    
    commit d36a1dd9f77ae1e72da48f4123ed35627848507d upstream.
    
    We are not guaranteed the locking environment that would prevent
    dentry getting renamed right under us.  And it's possible for
    old long name to be freed after rename, leading to UAF here.
    
    Cc: stable@kernel.org # v2.6.2+
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de581e41716795ce93506f3e5b0200048aa4439c
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Sun Jun 7 23:00:29 2020 +0200

    ima: Remove __init annotation from ima_pcrread()
    
    commit 8b8c704d913b0fe490af370631a4200e26334ec0 upstream.
    
    Commit 6cc7c266e5b4 ("ima: Call ima_calc_boot_aggregate() in
    ima_eventdigest_init()") added a call to ima_calc_boot_aggregate() so that
    the digest can be recalculated for the boot_aggregate measurement entry if
    the 'd' template field has been requested. For the 'd' field, only SHA1 and
    MD5 digests are accepted.
    
    Given that ima_eventdigest_init() does not have the __init annotation, all
    functions called should not have it. This patch removes __init from
    ima_pcrread().
    
    Cc: stable@vger.kernel.org
    Fixes:  6cc7c266e5b4 ("ima: Call ima_calc_boot_aggregate() in ima_eventdigest_init()")
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48d19197bdb47e2b0d6322eb82de0b383e12bf62
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Dec 30 16:20:05 2020 +0100

    ARM: picoxcell: fix missing interrupt-parent properties
    
    [ Upstream commit bac717171971176b78c72d15a8b6961764ab197f ]
    
    dtc points out that the interrupts for some devices are not parsable:
    
    picoxcell-pc3x2.dtsi:45.19-49.5: Warning (interrupts_property): /paxi/gem@30000: Missing interrupt-parent
    picoxcell-pc3x2.dtsi:51.21-55.5: Warning (interrupts_property): /paxi/dmac@40000: Missing interrupt-parent
    picoxcell-pc3x2.dtsi:57.21-61.5: Warning (interrupts_property): /paxi/dmac@50000: Missing interrupt-parent
    picoxcell-pc3x2.dtsi:233.21-237.5: Warning (interrupts_property): /rwid-axi/axi2pico@c0000000: Missing interrupt-parent
    
    There are two VIC instances, so it's not clear which one needs to be
    used. I found the BSP sources that reference VIC0, so use that:
    
    https://github.com/r1mikey/meta-picoxcell/blob/master/recipes-kernel/linux/linux-picochip-3.0/0001-picoxcell-support-for-Picochip-picoXcell-SoC.patch
    
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Link: https://lore.kernel.org/r/20201230152010.3914962-1-arnd@kernel.org'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0680689c609c7b2a15e52a9b9ca58fc2a04b2eee
Author: Craig Tatlor <ctatlor97@gmail.com>
Date:   Wed Dec 30 17:29:42 2020 +0200

    drm/msm: Call msm_init_vram before binding the gpu
    
    [ Upstream commit d863f0c7b536288e2bd40cbc01c10465dd226b11 ]
    
    vram.size is needed when binding a gpu without an iommu and is defined
    in msm_init_vram(), so run that before binding it.
    
    Signed-off-by: Craig Tatlor <ctatlor97@gmail.com>
    Reviewed-by: Brian Masney <masneyb@onstation.org>
    Tested-by: Alexey Minnekhanov <alexeymin@postmarketos.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0635fb429f9947229cd15f6b1c1c17dd30a1a2c3
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Dec 31 19:35:25 2020 +0800

    ACPI: scan: add stub acpi_create_platform_device() for !CONFIG_ACPI
    
    [ Upstream commit ee61cfd955a64a58ed35cbcfc54068fcbd486945 ]
    
    It adds a stub acpi_create_platform_device() for !CONFIG_ACPI build, so
    that caller doesn't have to deal with !CONFIG_ACPI build issue.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6029a081375ffd5ff6e0243874fbfd43f61a49a
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jan 5 20:15:15 2021 +1100

    net: ethernet: fs_enet: Add missing MODULE_LICENSE
    
    [ Upstream commit 445c6198fe7be03b7d38e66fe8d4b3187bc251d4 ]
    
    Since commit 1d6cd3929360 ("modpost: turn missing MODULE_LICENSE()
    into error") the ppc32_allmodconfig build fails with:
    
      ERROR: modpost: missing MODULE_LICENSE() in drivers/net/ethernet/freescale/fs_enet/mii-fec.o
      ERROR: modpost: missing MODULE_LICENSE() in drivers/net/ethernet/freescale/fs_enet/mii-bitbang.o
    
    Add the missing MODULE_LICENSEs to fix the build. Both files include a
    copyright header indicating they are GPL v2.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbea1b036fc697daa6e6e314e93a13019654ba00
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:36:22 2021 +0100

    misdn: dsp: select CONFIG_BITREVERSE
    
    [ Upstream commit 51049bd903a81307f751babe15a1df8d197884e8 ]
    
    Without this, we run into a link error
    
    arm-linux-gnueabi-ld: drivers/isdn/mISDN/dsp_audio.o: in function `dsp_audio_generate_law_tables':
    (.text+0x30c): undefined reference to `byte_rev_table'
    arm-linux-gnueabi-ld: drivers/isdn/mISDN/dsp_audio.o:(.text+0x5e4): more undefined references to `byte_rev_table' follow
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbeb334c999fccdf93399553dc430506c0c15076
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Jan 4 19:44:53 2021 -0800

    arch/arc: add copy_user_page() to <asm/page.h> to fix build error on ARC
    
    [ Upstream commit 8a48c0a3360bf2bf4f40c980d0ec216e770e58ee ]
    
    fs/dax.c uses copy_user_page() but ARC does not provide that interface,
    resulting in a build error.
    
    Provide copy_user_page() in <asm/page.h>.
    
    ../fs/dax.c: In function 'copy_cow_page_dax':
    ../fs/dax.c:702:2: error: implicit declaration of function 'copy_user_page'; did you mean 'copy_to_user_page'? [-Werror=implicit-function-declaration]
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: linux-snps-arc@lists.infradead.org
    Cc: Dan Williams <dan.j.williams@intel.com>
    #Acked-by: Vineet Gupta <vgupta@synopsys.com> # v1
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Jan Kara <jack@suse.cz>
    Cc: linux-fsdevel@vger.kernel.org
    Cc: linux-nvdimm@lists.01.org
    #Reviewed-by: Ira Weiny <ira.weiny@intel.com> # v2
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f8b5931be0bf003a8e90fcc93552089820fc2ee
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 10 10:44:33 2020 +0100

    bfq: Fix computation of shallow depth
    
    [ Upstream commit 6d4d273588378c65915acaf7b2ee74e9dd9c130a ]
    
    BFQ computes number of tags it allows to be allocated for each request type
    based on tag bitmap. However it uses 1 << bitmap.shift as number of
    available tags which is wrong. 'shift' is just an internal bitmap value
    containing logarithm of how many bits bitmap uses in each bitmap word.
    Thus number of tags allowed for some request types can be far to low.
    Use proper bitmap.depth which has the number of tags instead.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2095b9fc93c0704c4bb4185b0d3d962577f06650
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Fri Dec 18 11:55:37 2020 +0100

    ethernet: ucc_geth: fix definition and size of ucc_geth_tx_global_pram
    
    [ Upstream commit 887078de2a23689e29d6fa1b75d7cbc544c280be ]
    
    Table 8-53 in the QUICC Engine Reference manual shows definitions of
    fields up to a size of 192 bytes, not just 128. But in table 8-111,
    one does find the text
    
      Base Address of the Global Transmitter Parameter RAM Page. [...]
      The user needs to allocate 128 bytes for this page. The address must
      be aligned to the page size.
    
    I've checked both rev. 7 (11/2015) and rev. 9 (05/2018) of the manual;
    they both have this inconsistency (and the table numbers are the
    same).
    
    Adding a bit of debug printing, on my board the struct
    ucc_geth_tx_global_pram is allocated at offset 0x880, while
    the (opaque) ucc_geth_thread_data_tx gets allocated immediately
    afterwards, at 0x900. So whatever the engine writes into the thread
    data overlaps with the tail of the global tx pram (and devmem says
    that something does get written during a simple ping).
    
    I haven't observed any failure that could be attributed to this, but
    it seems to be the kind of thing that would be extremely hard to
    debug. So extend the struct definition so that we do allocate 192
    bytes.
    
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46bb14a3f3f40d7e3d6a791951197c6c8b191a0d
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Dec 14 10:10:45 2020 +0000

    btrfs: fix transaction leak and crash after RO remount caused by qgroup rescan
    
    [ Upstream commit cb13eea3b49055bd78e6ddf39defd6340f7379fc ]
    
    If we remount a filesystem in RO mode while the qgroup rescan worker is
    running, we can end up having it still running after the remount is done,
    and at unmount time we may end up with an open transaction that ends up
    never getting committed. If that happens we end up with several memory
    leaks and can crash when hardware acceleration is unavailable for crc32c.
    Possibly it can lead to other nasty surprises too, due to use-after-free
    issues.
    
    The following steps explain how the problem happens.
    
    1) We have a filesystem mounted in RW mode and the qgroup rescan worker is
       running;
    
    2) We remount the filesystem in RO mode, and never stop/pause the rescan
       worker, so after the remount the rescan worker is still running. The
       important detail here is that the rescan task is still running after
       the remount operation committed any ongoing transaction through its
       call to btrfs_commit_super();
    
    3) The rescan is still running, and after the remount completed, the
       rescan worker started a transaction, after it finished iterating all
       leaves of the extent tree, to update the qgroup status item in the
       quotas tree. It does not commit the transaction, it only releases its
       handle on the transaction;
    
    4) A filesystem unmount operation starts shortly after;
    
    5) The unmount task, at close_ctree(), stops the transaction kthread,
       which had not had a chance to commit the open transaction since it was
       sleeping and the commit interval (default of 30 seconds) has not yet
       elapsed since the last time it committed a transaction;
    
    6) So after stopping the transaction kthread we still have the transaction
       used to update the qgroup status item open. At close_ctree(), when the
       filesystem is in RO mode and no transaction abort happened (or the
       filesystem is in error mode), we do not expect to have any transaction
       open, so we do not call btrfs_commit_super();
    
    7) We then proceed to destroy the work queues, free the roots and block
       groups, etc. After that we drop the last reference on the btree inode
       by calling iput() on it. Since there are dirty pages for the btree
       inode, corresponding to the COWed extent buffer for the quotas btree,
       btree_write_cache_pages() is invoked to flush those dirty pages. This
       results in creating a bio and submitting it, which makes us end up at
       btrfs_submit_metadata_bio();
    
    8) At btrfs_submit_metadata_bio() we end up at the if-then-else branch
       that calls btrfs_wq_submit_bio(), because check_async_write() returned
       a value of 1. This value of 1 is because we did not have hardware
       acceleration available for crc32c, so BTRFS_FS_CSUM_IMPL_FAST was not
       set in fs_info->flags;
    
    9) Then at btrfs_wq_submit_bio() we call btrfs_queue_work() against the
       workqueue at fs_info->workers, which was already freed before by the
       call to btrfs_stop_all_workers() at close_ctree(). This results in an
       invalid memory access due to a use-after-free, leading to a crash.
    
    When this happens, before the crash there are several warnings triggered,
    since we have reserved metadata space in a block group, the delayed refs
    reservation, etc:
    
      ------------[ cut here ]------------
      WARNING: CPU: 4 PID: 1729896 at fs/btrfs/block-group.c:125 btrfs_put_block_group+0x63/0xa0 [btrfs]
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      CPU: 4 PID: 1729896 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_put_block_group+0x63/0xa0 [btrfs]
      Code: f0 01 00 00 48 39 c2 75 (...)
      RSP: 0018:ffffb270826bbdd8 EFLAGS: 00010206
      RAX: 0000000000000001 RBX: ffff947ed73e4000 RCX: ffff947ebc8b29c8
      RDX: 0000000000000001 RSI: ffffffffc0b150a0 RDI: ffff947ebc8b2800
      RBP: ffff947ebc8b2800 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff947ed73e4110
      R13: ffff947ed73e4160 R14: ffff947ebc8b2988 R15: dead000000000100
      FS:  00007f15edfea840(0000) GS:ffff9481ad600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f37e2893320 CR3: 0000000138f68001 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       btrfs_free_block_groups+0x17f/0x2f0 [btrfs]
       close_ctree+0x2ba/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15ee221ee7
      Code: ff 0b 00 f7 d8 64 89 01 48 (...)
      RSP: 002b:00007ffe9470f0f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f15ee347264 RCX: 00007f15ee221ee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 000056169701d000
      RBP: 0000561697018a30 R08: 0000000000000000 R09: 00007f15ee2e2be0
      R10: 000056169701efe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 000056169701d000 R14: 0000561697018b40 R15: 0000561697018c60
      irq event stamp: 0
      hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      hardirqs last disabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last  enabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      ---[ end trace dd74718fef1ed5c6 ]---
      ------------[ cut here ]------------
      WARNING: CPU: 2 PID: 1729896 at fs/btrfs/block-rsv.c:459 btrfs_release_global_block_rsv+0x70/0xc0 [btrfs]
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      CPU: 2 PID: 1729896 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_release_global_block_rsv+0x70/0xc0 [btrfs]
      Code: 48 83 bb b0 03 00 00 00 (...)
      RSP: 0018:ffffb270826bbdd8 EFLAGS: 00010206
      RAX: 000000000033c000 RBX: ffff947ed73e4000 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffffffffc0b0d8c1 RDI: 00000000ffffffff
      RBP: ffff947ebc8b7000 R08: 0000000000000001 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff947ed73e4110
      R13: ffff947ed73e5278 R14: dead000000000122 R15: dead000000000100
      FS:  00007f15edfea840(0000) GS:ffff9481aca00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000561a79f76e20 CR3: 0000000138f68006 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       btrfs_free_block_groups+0x24c/0x2f0 [btrfs]
       close_ctree+0x2ba/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15ee221ee7
      Code: ff 0b 00 f7 d8 64 89 01 (...)
      RSP: 002b:00007ffe9470f0f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f15ee347264 RCX: 00007f15ee221ee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 000056169701d000
      RBP: 0000561697018a30 R08: 0000000000000000 R09: 00007f15ee2e2be0
      R10: 000056169701efe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 000056169701d000 R14: 0000561697018b40 R15: 0000561697018c60
      irq event stamp: 0
      hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      hardirqs last disabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last  enabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      ---[ end trace dd74718fef1ed5c7 ]---
      ------------[ cut here ]------------
      WARNING: CPU: 2 PID: 1729896 at fs/btrfs/block-group.c:3377 btrfs_free_block_groups+0x25d/0x2f0 [btrfs]
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      CPU: 5 PID: 1729896 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_free_block_groups+0x25d/0x2f0 [btrfs]
      Code: ad de 49 be 22 01 00 (...)
      RSP: 0018:ffffb270826bbde8 EFLAGS: 00010206
      RAX: ffff947ebeae1d08 RBX: ffff947ed73e4000 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff947e9d823ae8 RDI: 0000000000000246
      RBP: ffff947ebeae1d08 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff947ebeae1c00
      R13: ffff947ed73e5278 R14: dead000000000122 R15: dead000000000100
      FS:  00007f15edfea840(0000) GS:ffff9481ad200000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f1475d98ea8 CR3: 0000000138f68005 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       close_ctree+0x2ba/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15ee221ee7
      Code: ff 0b 00 f7 d8 64 89 (...)
      RSP: 002b:00007ffe9470f0f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f15ee347264 RCX: 00007f15ee221ee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 000056169701d000
      RBP: 0000561697018a30 R08: 0000000000000000 R09: 00007f15ee2e2be0
      R10: 000056169701efe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 000056169701d000 R14: 0000561697018b40 R15: 0000561697018c60
      irq event stamp: 0
      hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      hardirqs last disabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last  enabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      ---[ end trace dd74718fef1ed5c8 ]---
      BTRFS info (device sdc): space_info 4 has 268238848 free, is not full
      BTRFS info (device sdc): space_info total=268435456, used=114688, pinned=0, reserved=16384, may_use=0, readonly=65536
      BTRFS info (device sdc): global_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): trans_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): chunk_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): delayed_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): delayed_refs_rsv: size 524288 reserved 0
    
    And the crash, which only happens when we do not have crc32c hardware
    acceleration, produces the following trace immediately after those
    warnings:
    
      stack segment: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      CPU: 2 PID: 1749129 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_queue_work+0x36/0x190 [btrfs]
      Code: 54 55 53 48 89 f3 (...)
      RSP: 0018:ffffb27082443ae8 EFLAGS: 00010282
      RAX: 0000000000000004 RBX: ffff94810ee9ad90 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff94810ee9ad90 RDI: ffff947ed8ee75a0
      RBP: a56b6b6b6b6b6b6b R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000007 R11: 0000000000000001 R12: ffff947fa9b435a8
      R13: ffff94810ee9ad90 R14: 0000000000000000 R15: ffff947e93dc0000
      FS:  00007f3cfe974840(0000) GS:ffff9481ac600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f1b42995a70 CR3: 0000000127638003 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       btrfs_wq_submit_bio+0xb3/0xd0 [btrfs]
       btrfs_submit_metadata_bio+0x44/0xc0 [btrfs]
       submit_one_bio+0x61/0x70 [btrfs]
       btree_write_cache_pages+0x414/0x450 [btrfs]
       ? kobject_put+0x9a/0x1d0
       ? trace_hardirqs_on+0x1b/0xf0
       ? _raw_spin_unlock_irqrestore+0x3c/0x60
       ? free_debug_processing+0x1e1/0x2b0
       do_writepages+0x43/0xe0
       ? lock_acquired+0x199/0x490
       __writeback_single_inode+0x59/0x650
       writeback_single_inode+0xaf/0x120
       write_inode_now+0x94/0xd0
       iput+0x187/0x2b0
       close_ctree+0x2c6/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f3cfebabee7
      Code: ff 0b 00 f7 d8 64 89 01 (...)
      RSP: 002b:00007ffc9c9a05f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f3cfecd1264 RCX: 00007f3cfebabee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 0000562b6b478000
      RBP: 0000562b6b473a30 R08: 0000000000000000 R09: 00007f3cfec6cbe0
      R10: 0000562b6b479fe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 0000562b6b478000 R14: 0000562b6b473b40 R15: 0000562b6b473c60
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      ---[ end trace dd74718fef1ed5cc ]---
    
    Finally when we remove the btrfs module (rmmod btrfs), there are several
    warnings about objects that were allocated from our slabs but were never
    freed, consequence of the transaction that was never committed and got
    leaked:
    
      =============================================================================
      BUG btrfs_delayed_ref_head (Tainted: G    B   W        ): Objects remaining in btrfs_delayed_ref_head on __kmem_cache_shutdown()
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x0000000094c2ae56 objects=24 used=2 fp=0x000000002bfa2521 flags=0x17fffc000010200
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       slab_err+0xb7/0xdc
       ? lock_acquired+0x199/0x490
       __kmem_cache_shutdown+0x1ac/0x3c0
       ? lock_release+0x20e/0x4c0
       kmem_cache_destroy+0x55/0x120
       btrfs_delayed_ref_exit+0x11/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      INFO: Object 0x0000000050cbdd61 @offset=12104
      INFO: Allocated in btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs] age=1894 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs]
            btrfs_free_tree_block+0x128/0x360 [btrfs]
            __btrfs_cow_block+0x489/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
            btrfs_mount+0x13b/0x3e0 [btrfs]
      INFO: Freed in __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs] age=4292 cpu=2 pid=1729526
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            commit_cowonly_roots+0xfb/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            sync_filesystem+0x74/0x90
            generic_shutdown_super+0x22/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      INFO: Object 0x0000000086e9b0ff @offset=12776
      INFO: Allocated in btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs] age=1900 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs]
            btrfs_alloc_tree_block+0x2bf/0x360 [btrfs]
            alloc_tree_block_no_bg_flush+0x4f/0x60 [btrfs]
            __btrfs_cow_block+0x12d/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
      INFO: Freed in __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs] age=3141 cpu=6 pid=1729803
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            btrfs_write_dirty_block_groups+0x17d/0x3d0 [btrfs]
            commit_cowonly_roots+0x248/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            close_ctree+0x113/0x2fa [btrfs]
            generic_shutdown_super+0x6c/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      kmem_cache_destroy btrfs_delayed_ref_head: Slab cache still has objects
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       kmem_cache_destroy+0x119/0x120
       btrfs_delayed_ref_exit+0x11/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 0b (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      =============================================================================
      BUG btrfs_delayed_tree_ref (Tainted: G    B   W        ): Objects remaining in btrfs_delayed_tree_ref on __kmem_cache_shutdown()
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x0000000011f78dc0 objects=37 used=2 fp=0x0000000032d55d91 flags=0x17fffc000010200
      CPU: 3 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       slab_err+0xb7/0xdc
       ? lock_acquired+0x199/0x490
       __kmem_cache_shutdown+0x1ac/0x3c0
       ? lock_release+0x20e/0x4c0
       kmem_cache_destroy+0x55/0x120
       btrfs_delayed_ref_exit+0x1d/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      INFO: Object 0x000000001a340018 @offset=4408
      INFO: Allocated in btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs] age=1917 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs]
            btrfs_free_tree_block+0x128/0x360 [btrfs]
            __btrfs_cow_block+0x489/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
            btrfs_mount+0x13b/0x3e0 [btrfs]
      INFO: Freed in __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs] age=4167 cpu=4 pid=1729795
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            btrfs_commit_transaction+0x60/0xc40 [btrfs]
            create_subvol+0x56a/0x990 [btrfs]
            btrfs_mksubvol+0x3fb/0x4a0 [btrfs]
            __btrfs_ioctl_snap_create+0x119/0x1a0 [btrfs]
            btrfs_ioctl_snap_create+0x58/0x80 [btrfs]
            btrfs_ioctl+0x1a92/0x36f0 [btrfs]
            __x64_sys_ioctl+0x83/0xb0
            do_syscall_64+0x33/0x80
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      INFO: Object 0x000000002b46292a @offset=13648
      INFO: Allocated in btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs] age=1923 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs]
            btrfs_alloc_tree_block+0x2bf/0x360 [btrfs]
            alloc_tree_block_no_bg_flush+0x4f/0x60 [btrfs]
            __btrfs_cow_block+0x12d/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
      INFO: Freed in __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs] age=3164 cpu=6 pid=1729803
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            commit_cowonly_roots+0xfb/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            close_ctree+0x113/0x2fa [btrfs]
            generic_shutdown_super+0x6c/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      kmem_cache_destroy btrfs_delayed_tree_ref: Slab cache still has objects
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       kmem_cache_destroy+0x119/0x120
       btrfs_delayed_ref_exit+0x1d/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      =============================================================================
      BUG btrfs_delayed_extent_op (Tainted: G    B   W        ): Objects remaining in btrfs_delayed_extent_op on __kmem_cache_shutdown()
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x00000000f145ce2f objects=22 used=1 fp=0x00000000af0f92cf flags=0x17fffc000010200
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       slab_err+0xb7/0xdc
       ? lock_acquired+0x199/0x490
       __kmem_cache_shutdown+0x1ac/0x3c0
       ? __mutex_unlock_slowpath+0x45/0x2a0
       kmem_cache_destroy+0x55/0x120
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      INFO: Object 0x000000004cf95ea8 @offset=6264
      INFO: Allocated in btrfs_alloc_tree_block+0x1e0/0x360 [btrfs] age=1931 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_alloc_tree_block+0x1e0/0x360 [btrfs]
            alloc_tree_block_no_bg_flush+0x4f/0x60 [btrfs]
            __btrfs_cow_block+0x12d/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
            btrfs_mount+0x13b/0x3e0 [btrfs]
      INFO: Freed in __btrfs_run_delayed_refs+0xabd/0x1290 [btrfs] age=3173 cpu=6 pid=1729803
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0xabd/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            commit_cowonly_roots+0xfb/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            close_ctree+0x113/0x2fa [btrfs]
            generic_shutdown_super+0x6c/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      kmem_cache_destroy btrfs_delayed_extent_op: Slab cache still has objects
      CPU: 3 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       kmem_cache_destroy+0x119/0x120
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      BTRFS: state leak: start 30408704 end 30425087 state 1 in tree 1 refs 1
    
    Fix this issue by having the remount path stop the qgroup rescan worker
    when we are remounting RO and teach the rescan worker to stop when a
    remount is in progress. If later a remount in RW mode happens, we are
    already resuming the qgroup rescan worker through the call to
    btrfs_qgroup_rescan_resume(), so we do not need to worry about that.
    
    Tested-by: Fabian Vogt <fvogt@suse.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14791a7216775dc8b0f7265cfdf5a2ff6d0cc51c
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 22 04:36:54 2020 +0900

    ARC: build: add boot_targets to PHONY
    
    [ Upstream commit 0cfccb3c04934cdef42ae26042139f16e805b5f7 ]
    
    The top-level boot_targets (uImage and uImage.*) should be phony
    targets. They just let Kbuild descend into arch/arc/boot/ and create
    files there.
    
    If a file exists in the top directory with the same name, the boot
    image will not be created.
    
    You can confirm it by the following steps:
    
      $ export CROSS_COMPILE=<your-arc-compiler-prefix>
      $ make -s ARCH=arc defconfig all   # vmlinux will be built
      $ touch uImage.gz
      $ make ARCH=arc uImage.gz
      CALL    scripts/atomic/check-atomics.sh
      CALL    scripts/checksyscalls.sh
      CHK     include/generated/compile.h
      # arch/arc/boot/uImage.gz is not created
    
    Specify the targets as PHONY to fix this.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0613d2ebad9b90ad48faf1a9e17b5162ee13277
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 22 04:36:53 2020 +0900

    ARC: build: add uImage.lzma to the top-level target
    
    [ Upstream commit f2712ec76a5433e5ec9def2bd52a95df1f96d050 ]
    
    arch/arc/boot/Makefile supports uImage.lzma, but you cannot do
    'make uImage.lzma' because the corresponding target is missing
    in arch/arc/Makefile. Add it.
    
    I also changed the assignment operator '+=' to ':=' since this is the
    only place where we expect this variable to be set.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d66065ef68b1d4953571d423652afaf67bb07c9
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 22 04:36:52 2020 +0900

    ARC: build: remove non-existing bootpImage from KBUILD_IMAGE
    
    [ Upstream commit 9836720911cfec25d3fbdead1c438bf87e0f2841 ]
    
    The deb-pkg builds for ARCH=arc fail.
    
      $ export CROSS_COMPILE=<your-arc-compiler-prefix>
      $ make -s ARCH=arc defconfig
      $ make ARCH=arc bindeb-pkg
      SORTTAB vmlinux
      SYSMAP  System.map
      MODPOST Module.symvers
      make KERNELRELEASE=5.10.0-rc4 ARCH=arc KBUILD_BUILD_VERSION=2 -f ./Makefile intdeb-pkg
      sh ./scripts/package/builddeb
      cp: cannot stat 'arch/arc/boot/bootpImage': No such file or directory
      make[4]: *** [scripts/Makefile.package:87: intdeb-pkg] Error 1
      make[3]: *** [Makefile:1527: intdeb-pkg] Error 2
      make[2]: *** [debian/rules:13: binary-arch] Error 2
      dpkg-buildpackage: error: debian/rules binary subprocess returned exit status 2
      make[1]: *** [scripts/Makefile.package:83: bindeb-pkg] Error 2
      make: *** [Makefile:1527: bindeb-pkg] Error 2
    
    The reason is obvious; arch/arc/Makefile sets $(boot)/bootpImage as
    the default image, but there is no rule to build it.
    
    Remove the meaningless KBUILD_IMAGE assignment so it will fallback
    to the default vmlinux. With this change, you can build the deb package.
    
    I removed the 'bootpImage' target as well. At best, it provides
    'make bootpImage' as an alias of 'make vmlinux', but I do not see
    much sense in doing so.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de12ae61c5e262ee1fc1dc636ef731303a88c7e5
Author: yangerkun <yangerkun@huawei.com>
Date:   Tue Jan 5 14:28:57 2021 +0800

    ext4: fix bug for rename with RENAME_WHITEOUT
    
    [ Upstream commit 6b4b8e6b4ad8553660421d6360678b3811d5deb9 ]
    
    We got a "deleted inode referenced" warning cross our fsstress test. The
    bug can be reproduced easily with following steps:
    
      cd /dev/shm
      mkdir test/
      fallocate -l 128M img
      mkfs.ext4 -b 1024 img
      mount img test/
      dd if=/dev/zero of=test/foo bs=1M count=128
      mkdir test/dir/ && cd test/dir/
      for ((i=0;i<1000;i++)); do touch file$i; done # consume all block
      cd ~ && renameat2(AT_FDCWD, /dev/shm/test/dir/file1, AT_FDCWD,
        /dev/shm/test/dir/dst_file, RENAME_WHITEOUT) # ext4_add_entry in
        ext4_rename will return ENOSPC!!
      cd /dev/shm/ && umount test/ && mount img test/ && ls -li test/dir/file1
      We will get the output:
      "ls: cannot access 'test/dir/file1': Structure needs cleaning"
      and the dmesg show:
      "EXT4-fs error (device loop0): ext4_lookup:1626: inode #2049: comm ls:
      deleted inode referenced: 139"
    
    ext4_rename will create a special inode for whiteout and use this 'ino'
    to replace the source file's dir entry 'ino'. Once error happens
    latter(the error above was the ENOSPC return from ext4_add_entry in
    ext4_rename since all space has been consumed), the cleanup do drop the
    nlink for whiteout, but forget to restore 'ino' with source file. This
    will trigger the bug describle as above.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@vger.kernel.org
    Fixes: cd808deced43 ("ext4: support RENAME_WHITEOUT")
    Link: https://lore.kernel.org/r/20210105062857.3566-1-yangerkun@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e04f28c767ea2c9ae08125c499232848f5f7a54a
Author: Leon Schuermann <leon@is.currently.online>
Date:   Mon Jan 11 20:03:13 2021 +0100

    r8152: Add Lenovo Powered USB-C Travel Hub
    
    commit cb82a54904a99df9e8f9e9d282046055dae5a730 upstream.
    
    This USB-C Hub (17ef:721e) based on the Realtek RTL8153B chip used to
    use the cdc_ether driver. However, using this driver, with the system
    suspended the device constantly sends pause-frames as soon as the
    receive buffer fills up. This causes issues with other devices, where
    some Ethernet switches stop forwarding packets altogether.
    
    Using the Realtek driver (r8152) fixes this issue. Pause frames are no
    longer sent while the host system is suspended.
    
    Signed-off-by: Leon Schuermann <leon@is.currently.online>
    Tested-by: Leon Schuermann <leon@is.currently.online>
    Link: https://lore.kernel.org/r/20210111190312.12589-2-leon@is.currently.online
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd712c8f5f4f46b1c4682109c5cacbe001459133
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Jan 12 14:54:47 2021 -0500

    dm integrity: fix the maximum number of arguments
    
    commit 17ffc193cdc6dc7a613d00d8ad47fc1f801b9bf0 upstream.
    
    Advance the maximum number of arguments from 9 to 15 to account for
    all potential feature flags that may be supplied.
    
    Linux 4.19 added "meta_device"
    (356d9d52e1221ba0c9f10b8b38652f78a5298329) and "recalculate"
    (a3fcf7253139609bf9ff901fbf955fba047e75dd) flags.
    
    Commit 468dfca38b1a6fbdccd195d875599cb7c8875cd9 added
    "sectors_per_bit" and "bitmap_flush_interval".
    
    Commit 84597a44a9d86ac949900441cea7da0af0f2f473 added
    "allow_discards".
    
    And the commit d537858ac8aaf4311b51240893add2fc62003b97 added
    "fix_padding".
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aef593d2c87598839d6200772c5aee8a9ecdcd9f
Author: Akilesh Kailash <akailash@google.com>
Date:   Mon Dec 28 07:14:07 2020 +0000

    dm snapshot: flush merged data before committing metadata
    
    commit fcc42338375a1e67b8568dbb558f8b784d0f3b01 upstream.
    
    If the origin device has a volatile write-back cache and the following
    events occur:
    
    1: After finishing merge operation of one set of exceptions,
       merge_callback() is invoked.
    2: Update the metadata in COW device tracking the merge completion.
       This update to COW device is flushed cleanly.
    3: System crashes and the origin device's cache where the recent
       merge was completed has not been flushed.
    
    During the next cycle when we read the metadata from the COW device,
    we will skip reading those metadata whose merge was completed in
    step (1). This will lead to data loss/corruption.
    
    To address this, flush the origin device post merge IO before
    updating the metadata.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Akilesh Kailash <akailash@google.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bba1a0da5bbdd938907cf7f5c3573b3d8e199074
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Jan 12 15:49:24 2021 -0800

    mm/hugetlb: fix potential missing huge page size info
    
    commit 0eb98f1588c2cc7a79816d84ab18a55d254f481c upstream.
    
    The huge page size is encoded for VM_FAULT_HWPOISON errors only.  So if
    we return VM_FAULT_HWPOISON, huge page size would just be ignored.
    
    Link: https://lkml.kernel.org/r/20210107123449.38481-1-linmiaohe@huawei.com
    Fixes: aa50d3a7aa81 ("Encode huge page size for VM_FAULT_HWPOISON errors")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56d772d831648da003bb18f8641e7973c3984915
Author: Dexuan Cui <decui@microsoft.com>
Date:   Thu Jan 7 23:23:48 2021 -0800

    ACPI: scan: Harden acpi_device_add() against device ID overflows
    
    commit a58015d638cd4e4555297b04bec9b49028369075 upstream.
    
    Linux VM on Hyper-V crashes with the latest mainline:
    
    [    4.069624] detected buffer overflow in strcpy
    [    4.077733] kernel BUG at lib/string.c:1149!
    ..
    [    4.085819] RIP: 0010:fortify_panic+0xf/0x11
    ...
    [    4.085819] Call Trace:
    [    4.085819]  acpi_device_add.cold.15+0xf2/0xfb
    [    4.085819]  acpi_add_single_object+0x2a6/0x690
    [    4.085819]  acpi_bus_check_add+0xc6/0x280
    [    4.085819]  acpi_ns_walk_namespace+0xda/0x1aa
    [    4.085819]  acpi_walk_namespace+0x9a/0xc2
    [    4.085819]  acpi_bus_scan+0x78/0x90
    [    4.085819]  acpi_scan_init+0xfa/0x248
    [    4.085819]  acpi_init+0x2c1/0x321
    [    4.085819]  do_one_initcall+0x44/0x1d0
    [    4.085819]  kernel_init_freeable+0x1ab/0x1f4
    
    This is because of the recent buffer overflow detection in the
    commit 6a39e62abbaf ("lib: string.h: detect intra-object overflow in
    fortified string functions")
    
    Here acpi_device_bus_id->bus_id can only hold 14 characters, while the
    the acpi_device_hid(device) returns a 22-char string
    "HYPER_V_GEN_COUNTER_V1".
    
    Per ACPI Spec v6.2, Section 6.1.5 _HID (Hardware ID), if the ID is a
    string, it must be of the form AAA#### or NNNN####, i.e. 7 chars or 8
    chars.
    
    The field bus_id in struct acpi_device_bus_id was originally defined as
    char bus_id[9], and later was enlarged to char bus_id[15] in 2007 in the
    commit bb0958544f3c ("ACPI: use more understandable bus_id for ACPI
    devices")
    
    Fix the issue by changing the field bus_id to const char *, and use
    kstrdup_const() to initialize it.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Tested-By: Jethro Beekman <jethro@fortanix.com>
    [ rjw: Subject change, whitespace adjustment ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e488a1781c22f2d350279bd5fce9da3de73f03f
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Sun Jan 10 14:21:05 2021 +0000

    MIPS: relocatable: fix possible boot hangup with KASLR enabled
    
    commit 69e976831cd53f9ba304fd20305b2025ecc78eab upstream.
    
    LLVM-built Linux triggered a boot hangup with KASLR enabled.
    
    arch/mips/kernel/relocate.c:get_random_boot() uses linux_banner,
    which is a string constant, as a random seed, but accesses it
    as an array of unsigned long (in rotate_xor()).
    When the address of linux_banner is not aligned to sizeof(long),
    such access emits unaligned access exception and hangs the kernel.
    
    Use PTR_ALIGN() to align input address to sizeof(long) and also
    align down the input length to prevent possible access-beyond-end.
    
    Fixes: 405bc8fd12f5 ("MIPS: Kernel: Implement KASLR using CONFIG_RELOCATABLE")
    Cc: stable@vger.kernel.org # 4.7+
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb735b01583e63501442cd806a62132abfa291ec
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Dec 16 23:39:56 2020 +0000

    MIPS: boot: Fix unaligned access with CONFIG_MIPS_RAW_APPENDED_DTB
    
    commit 4d4f9c1a17a3480f8fe523673f7232b254d724b7 upstream.
    
    The compressed payload is not necesarily 4-byte aligned, at least when
    compiling with Clang. In that case, the 4-byte value appended to the
    compressed payload that corresponds to the uncompressed kernel image
    size must be read using get_unaligned_le32().
    
    This fixes Clang-built kernels not booting on MIPS (tested on a Ingenic
    JZ4770 board).
    
    Fixes: b8f54f2cde78 ("MIPS: ZBOOT: copy appended dtb to the end of the kernel")
    Cc: <stable@vger.kernel.org> # v4.7
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ec3187d17c6915f02e40b2c7b1f41d0fdda1eb4
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Jan 8 13:19:38 2021 +0900

    tracing/kprobes: Do the notrace functions check without kprobes on ftrace
    
    commit 7bb83f6fc4ee84e95d0ac0d14452c2619fb3fe70 upstream.
    
    Enable the notrace function check on the architecture which doesn't
    support kprobes on ftrace but support dynamic ftrace. This notrace
    function check is not only for the kprobes on ftrace but also
    sw-breakpoint based kprobes.
    Thus there is no reason to limit this check for the arch which
    supports kprobes on ftrace.
    
    This also changes the dependency of Kconfig. Because kprobe event
    uses the function tracer's address list for identifying notrace
    function, if the CONFIG_DYNAMIC_FTRACE=n, it can not check whether
    the target function is notrace or not.
    
    Link: https://lkml.kernel.org/r/20210105065730.2634785-1-naveen.n.rao@linux.vnet.ibm.com
    Link: https://lkml.kernel.org/r/161007957862.114704.4512260007555399463.stgit@devnote2
    
    Cc: stable@vger.kernel.org
    Fixes: 45408c4f92506 ("tracing: kprobes: Prohibit probing on notrace function")
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0e0af83a8d701569382692a4ee1b232413b1e9e
Author: Wei Liu <wei.liu@kernel.org>
Date:   Tue Jan 5 17:50:43 2021 +0000

    x86/hyperv: check cpu mask after interrupt has been disabled
    
    commit ad0a6bad44758afa3b440c254a24999a0c7e35d5 upstream.
    
    We've observed crashes due to an empty cpu mask in
    hyperv_flush_tlb_others.  Obviously the cpu mask in question is changed
    between the cpumask_empty call at the beginning of the function and when
    it is actually used later.
    
    One theory is that an interrupt comes in between and a code path ends up
    changing the mask. Move the check after interrupt has been disabled to
    see if it fixes the issue.
    
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20210105175043.28325-1-wei.liu@kernel.org
    Reviewed-by:  Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97e71b5082702e25b1fc7dd15ce88aaf4c76cef4
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Sat Dec 12 17:20:12 2020 -0800

    ASoC: dapm: remove widget from dirty list on free
    
    commit 5c6679b5cb120f07652418524ab186ac47680b49 upstream.
    
    A widget's "dirty" list_head, much like its "list" list_head, eventually
    chains back to a list_head on the snd_soc_card itself. This means that
    the list can stick around even after the widget (or all widgets) have
    been freed. Currently, however, widgets that are in the dirty list when
    freed remain there, corrupting the entire list and leading to memory
    errors and undefined behavior when the list is next accessed or
    modified.
    
    I encountered this issue when a component failed to probe relatively
    late in snd_soc_bind_card(), causing it to bail out and call
    soc_cleanup_card_resources(), which eventually called
    snd_soc_dapm_free() with widgets that were still dirty from when they'd
    been added.
    
    Fixes: db432b414e20 ("ASoC: Do DAPM power checks only for widgets changed since last run")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/f8b5f031d50122bf1a9bfc9cae046badf4a7a31a.1607822410.git.tommyhebb@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
