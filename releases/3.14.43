commit 13253707013a08ce5a279ebd029fa10230172458
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun May 17 09:54:01 2015 -0700

    Linux 3.14.43

commit 05a7f8a1a490b6f747cc27fe91b8fc738e478bd3
Author: Will Deacon <will@kernel.org>
Date:   Fri Jul 25 16:29:12 2014 +0100

    kvm: arm64: vgic: fix hyp panic with 64k pages on juno platform
    
    commit 63afbe7a0ac184ef8485dac4914e87b211b5bfaa upstream.
    
    If the physical address of GICV isn't page-aligned, then we end up
    creating a stage-2 mapping of the page containing it, which causes us to
    map neighbouring memory locations directly into the guest.
    
    As an example, consider a platform with GICV at physical 0x2c02f000
    running a 64k-page host kernel. If qemu maps this into the guest at
    0x80010000, then guest physical addresses 0x80010000 - 0x8001efff will
    map host physical region 0x2c020000 - 0x2c02efff. Accesses to these
    physical regions may cause UNPREDICTABLE behaviour, for example, on the
    Juno platform this will cause an SError exception to EL3, which brings
    down the entire physical CPU resulting in RCU stalls / HYP panics / host
    crashing / wasted weeks of debugging.
    
    SBSA recommends that systems alias the 4k GICV across the bounding 64k
    region, in which case GICV physical could be described as 0x2c020000 in
    the above scenario.
    
    This patch fixes the problem by failing the vgic probe if the physical
    base address or the size of GICV aren't page-aligned. Note that this
    generated a warning in dmesg about freeing enabled IRQs, so I had to
    move the IRQ enabling later in the probe.
    
    Cc: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Gleb Natapov <gleb@kernel.org>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Joel Schopp <joel.schopp@amd.com>
    Cc: Don Dutile <ddutile@redhat.com>
    Acked-by: Peter Maydell <peter.maydell@linaro.org>
    Acked-by: Joel Schopp <joel.schopp@amd.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2472e12d94484e90012deedd355d13e0864b4801
Author: Will Deacon <will@kernel.org>
Date:   Fri May 2 16:24:14 2014 +0100

    arm64: kvm: use inner-shareable barriers for inner-shareable maintenance
    
    commit ee9e101c11478680d579bd20bb38a4d3e2514fe3 upstream.
    
    In order to ensure completion of inner-shareable maintenance instructions
    (cache and TLB) on AArch64, we can use the -ish suffix to the dsb
    instruction.
    
    This patch relaxes our dsb sy instructions to dsb ish where possible.
    
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab2fceb24e569422d819f7befec93158701eed99
Author: Haibin Wang <wanghaibin.wang@huawei.com>
Date:   Tue Apr 29 14:49:17 2014 +0800

    KVM: ARM: vgic: Fix the overlap check action about setting the GICD & GICC base address.
    
    commit 30c2117085bc4e05d091cee6eba79f069b41a9cd upstream.
    
    Currently below check in vgic_ioaddr_overlap will always succeed,
    because the vgic dist base and vgic cpu base are still kept UNDEF
    after initialization. The code as follows will be return forever.
    
            if (IS_VGIC_ADDR_UNDEF(dist) || IS_VGIC_ADDR_UNDEF(cpu))
                    return 0;
    
    So, before invoking the vgic_ioaddr_overlap, it needs to set the
    corresponding base address firstly.
    
    Signed-off-by: Haibin Wang <wanghaibin.wang@huawei.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45d0f76288a2459fe662ec50d804f304bc4bf73d
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri Apr 11 00:07:18 2014 +0200

    KVM: arm/arm64: vgic: fix GICD_ICFGR register accesses
    
    commit f2ae85b2ab3776b9e4e42e5b6fa090f40d396794 upstream.
    
    Since KVM internally represents the ICFGR registers by stuffing two
    of them into one word, the offset for accessing the internal
    representation and the one for the MMIO based access are different.
    So keep the original offset around, but adjust the internal array
    offset by one bit.
    
    Reported-by: Haibin Wang <wanghaibin.wang@huawei.com>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89f7e2b26c71280335352086e4085fc29704815d
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 14 18:00:55 2014 +0000

    ARM: KVM: trap VM system registers until MMU and caches are ON
    
    commit 8034699a42d68043b495c7e0cfafccd920707ec8 upstream.
    
    In order to be able to detect the point where the guest enables
    its MMU and caches, trap all the VM related system registers.
    
    Once we see the guest enabling both the MMU and the caches, we
    can go back to a saner mode of operation, which is to leave these
    registers in complete control of the guest.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45b1407eadaeeaee68e67f1c1eaa3db88f7d82ce
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Jan 22 10:20:09 2014 +0000

    ARM: KVM: add world-switch for AMAIR{0,1}
    
    commit af20814ee927ed888288d98917a766b4179c4fe0 upstream.
    
    HCR.TVM traps (among other things) accesses to AMAIR0 and AMAIR1.
    In order to minimise the amount of surprise a guest could generate by
    trying to access these registers with caches off, add them to the
    list of registers we switch/handle.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a4cd8a526d2da33f54a5582bab54e8c9294a98b
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Jan 22 09:43:38 2014 +0000

    ARM: KVM: introduce per-vcpu HYP Configuration Register
    
    commit ac30a11e8e92a03dbe236b285c5cbae0bf563141 upstream.
    
    So far, KVM/ARM used a fixed HCR configuration per guest, except for
    the VI/VF/VA bits to control the interrupt in absence of VGIC.
    
    With the upcoming need to dynamically reconfigure trapping, it becomes
    necessary to allow the HCR to be changed on a per-vcpu basis.
    
    The fix here is to mimic what KVM/arm64 already does: a per vcpu HCR
    field, initialized at setup time.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 159ef09b8f1d20834438e4d42281b1ccfbc77419
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 21 18:56:26 2014 +0000

    ARM: KVM: fix ordering of 64bit coprocessor accesses
    
    commit 547f781378a22b65c2ab468f235c23001b5924da upstream.
    
    Commit 240e99cbd00a (ARM: KVM: Fix 64-bit coprocessor handling)
    added an ordering dependency for the 64bit registers.
    
    The order described is: CRn, CRm, Op1, Op2, 64bit-first.
    
    Unfortunately, the implementation is: CRn, 64bit-first, CRm...
    
    Move the 64bit test to be last in order to match the documentation.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c316fc39e38d384ec3e68f946c131ca5b07e58a3
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 21 18:56:26 2014 +0000

    ARM: KVM: fix handling of trapped 64bit coprocessor accesses
    
    commit 46c214dd595381c880794413facadfa07fba5c95 upstream.
    
    Commit 240e99cbd00a (ARM: KVM: Fix 64-bit coprocessor handling)
    changed the way we match the 64bit coprocessor access from
    user space, but didn't update the trap handler for the same
    set of registers.
    
    The effect is that a trapped 64bit access is never matched, leading
    to a fault being injected into the guest. This went unnoticed as we
    didn't really trap any 64bit register so far.
    
    Placing the CRm field of the access into the CRn field of the matching
    structure fixes the problem. Also update the debug feature to emit the
    expected string in case of failing match.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ea88619b7222647f6ac518b41d166c0e3ca6db9
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 14 19:13:10 2014 +0000

    ARM: KVM: force cache clean on page fault when caches are off
    
    commit 159793001d7d85af17855630c94f0a176848e16b upstream.
    
    In order for a guest with caches disabled to observe data written
    contained in a given page, we need to make sure that page is
    committed to memory, and not just hanging in the cache (as guest
    accesses are completely bypassing the cache until it decides to
    enable it).
    
    For this purpose, hook into the coherent_cache_guest_page
    function and flush the region if the guest SCTLR
    register doesn't show the MMU and caches as being enabled.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a21780f3306fbfcf83d860c39709a802f2cb4ddf
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Jan 15 12:50:23 2014 +0000

    arm64: KVM: flush VM pages before letting the guest enable caches
    
    commit 9d218a1fcf4c6b759d442ef702842fae92e1ea61 upstream.
    
    When the guest runs with caches disabled (like in an early boot
    sequence, for example), all the writes are diectly going to RAM,
    bypassing the caches altogether.
    
    Once the MMU and caches are enabled, whatever sits in the cache
    becomes suddenly visible, which isn't what the guest expects.
    
    A way to avoid this potential disaster is to invalidate the cache
    when the MMU is being turned on. For this, we hook into the SCTLR_EL1
    trapping code, and scan the stage-2 page tables, invalidating the
    pages/sections that have already been mapped in.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7eafc3238958efc27b28debe88dc43fb04a3c36
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Feb 18 14:29:03 2014 +0000

    ARM: KVM: introduce kvm_p*d_addr_end
    
    commit a3c8bd31af260a17d626514f636849ee1cd1f63e upstream.
    
    The use of p*d_addr_end with stage-2 translation is slightly dodgy,
    as the IPA is 40bits, while all the p*d_addr_end helpers are
    taking an unsigned long (arm64 is fine with that as unligned long
    is 64bit).
    
    The fix is to introduce 64bit clean versions of the same helpers,
    and use them in the stage-2 page table code.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2e16cab79cce909aa2995ad729d7518e0b5bfa7
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 14 18:00:55 2014 +0000

    arm64: KVM: trap VM system registers until MMU and caches are ON
    
    commit 4d44923b17bff283c002ed961373848284aaff1b upstream.
    
    In order to be able to detect the point where the guest enables
    its MMU and caches, trap all the VM related system registers.
    
    Once we see the guest enabling both the MMU and the caches, we
    can go back to a saner mode of operation, which is to leave these
    registers in complete control of the guest.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30604b7e1f45ab263832a1ee49635fb7a59860e2
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 21 10:55:17 2014 +0000

    arm64: KVM: allows discrimination of AArch32 sysreg access
    
    commit 2072d29c46b73e39b3c6c56c6027af77086f45fd upstream.
    
    The current handling of AArch32 trapping is slightly less than
    perfect, as it is not possible (from a handler point of view)
    to distinguish it from an AArch64 access, nor to tell a 32bit
    from a 64bit access either.
    
    Fix this by introducing two additional flags:
    - is_aarch32: true if the access was made in AArch32 mode
    - is_32bit: true if is_aarch32 == true and a MCR/MRC instruction
      was used to perform the access (as opposed to MCRR/MRRC).
    
    This allows a handler to cover all the possible conditions in which
    a system register gets trapped.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad824e6606a2014e4422fc5161851c2419d22d05
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Jan 14 19:13:10 2014 +0000

    arm64: KVM: force cache clean on page fault when caches are off
    
    commit 2d58b733c87689d3d5144e4ac94ea861cc729145 upstream.
    
    In order for the guest with caches off to observe data written
    contained in a given page, we need to make sure that page is
    committed to memory, and not just hanging in the cache (as
    guest accesses are completely bypassing the cache until it
    decides to enable it).
    
    For this purpose, hook into the coherent_icache_guest_page
    function and flush the region if the guest SCTLR_EL1
    register doesn't show the MMU  and caches as being enabled.
    The function also get renamed to coherent_cache_guest_page.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Cc: Shannon Zhao <shannon.zhao@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cf2961ba6adaa14e06e1aa48fc65dadea49f9e2
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Oct 26 19:31:10 2014 -0400

    deal with deadlock in d_walk()
    
    commit ca5358ef75fc69fee5322a38a340f5739d997c10 upstream.
    
    ... by not hitting rename_retry for reasons other than rename having
    happened.  In other words, do _not_ restart when finding that
    between unlocking the child and locking the parent the former got
    into __dentry_kill().  Skip the killed siblings instead...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    [hujianyang: Backported to 3.14 refer to the work of Ben Hutchings in 3.2:
     - Adjust context to make __dentry_kill() apply to d_kill()]
    Signed-off-by: hujianyang <hujianyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d74ebe01a4fdfd0d1b95ca47dcd9f197653ca672
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Mon Apr 13 11:48:52 2015 +0800

    ACPICA: Utilities: Cleanup to remove useless ACPI_PRINTF/FORMAT_xxx helpers.
    
    commit 1d0a0b2f6df2bf2643fadc990eb143361eca6ada upstream.
    
    ACPICA commit b60612373a4ef63b64a57c124576d7ddb6d8efb6
    
    For physical addresses, since the address may exceed 32-bit address range
    after calculation, we should use 0x%8.8X%8.8X instead of ACPI_PRINTF_UINT
    and ACPI_FORMAT_UINT64() instead of
    ACPI_FORMAT_NATIVE_UINT()/ACPI_FORMAT_TO_UINT().
    
    This patch also removes above replaced macros as there are no users.
    
    This is a preparation to switch acpi_physical_address to 64-bit on 32-bit
    kernel builds.
    
    Link: https://github.com/acpica/acpica/commit/b6061237
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Dirk Behme <dirk.behme@gmail.com>
    Signed-off-by: George G. Davis <george_davis@mentor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea8214cf22e9df50e498b5cb544782c9869a5ee0
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Mon Apr 13 11:48:46 2015 +0800

    ACPICA: Utilities: Cleanup to convert physical address printing formats.
    
    commit cc2080b0e5a7c6c33ef5e9ffccbc2b8f6f861393 upstream.
    
    ACPICA commit 7f06739db43a85083a70371c14141008f20b2198
    
    For physical addresses, since the address may exceed 32-bit address range
    after calculation, we should use %8.8X%8.8X (see ACPI_FORMAT_UINT64()) to
    convert the %p formats.
    
    This is a preparation to switch acpi_physical_address to 64-bit on 32-bit
    kernel builds.
    
    Link: https://github.com/acpica/acpica/commit/7f06739d
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Dirk Behme <dirk.behme@gmail.com>
    [gdavis: Apply changes to drivers/acpi/acpica/{tbutils,tbxfload}.c]
    Signed-off-by: George G. Davis <george_davis@mentor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 914f37b462131cf47c6505f368ceb7c259930d6b
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Mon Apr 13 11:48:37 2015 +0800

    ACPICA: Utilities: Cleanup to enforce ACPI_PHYSADDR_TO_PTR()/ACPI_PTR_TO_PHYSADDR().
    
    commit 6d3fd3cc33d50e4c0d0c0bd172de02caaec3127c upstream.
    
    ACPICA commit 154f6d074dd38d6ebc0467ad454454e6c5c9ecdf
    
    There are code pieces converting pointers using "(acpi_physical_address) x"
    or "ACPI_CAST_PTR (t, x)" formats, this patch cleans up them.
    
    Known issues:
    1. Cleanup of "(ACPI_PHYSICAL_ADDRRESS) x" for a table field
       For the conversions around the table fields, it is better to fix it with
       alignment also fixed. So this patch doesn't modify such code. There
       should be no functional problem by leaving them unchanged.
    
    Link: https://github.com/acpica/acpica/commit/154f6d07
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Dirk Behme <dirk.behme@gmail.com>
    Signed-off-by: George G. Davis <george_davis@mentor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fe29f5b0c84b6baaee2484216c6ca1a978c8879
Author: Lv Zheng <lv.zheng@intel.com>
Date:   Mon Apr 13 11:48:18 2015 +0800

    ACPICA: Tables: Change acpi_find_root_pointer() to use acpi_physical_address.
    
    commit f254e3c57b9d952e987502aefa0804c177dd2503 upstream.
    
    ACPICA commit 7d9fd64397d7c38899d3dc497525f6e6b044e0e3
    
    OSPMs like Linux expect an acpi_physical_address returning value from
    acpi_find_root_pointer(). This triggers warnings if sizeof (acpi_size) doesn't
    equal to sizeof (acpi_physical_address):
      drivers/acpi/osl.c:275:3: warning: passing argument 1 of 'acpi_find_root_pointer' from incompatible pointer type [enabled by default]
      In file included from include/acpi/acpi.h:64:0,
                       from include/linux/acpi.h:36,
                       from drivers/acpi/osl.c:41:
      include/acpi/acpixf.h:433:1: note: expected 'acpi_size *' but argument is of type 'acpi_physical_address *'
    This patch corrects acpi_find_root_pointer().
    
    Link: https://github.com/acpica/acpica/commit/7d9fd643
    Signed-off-by: Lv Zheng <lv.zheng@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Dirk Behme <dirk.behme@gmail.com>
    Signed-off-by: George G. Davis <george_davis@mentor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30b0fd903d5b4d2bf995b22b36d32a7e5248778d
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Apr 18 02:53:25 2015 +0300

    sound/oss: fix deadlock in sequencer_ioctl(SNDCTL_SEQ_OUTOFBAND)
    
    commit bc26d4d06e337ade069f33d3f4377593b24e6e36 upstream.
    
    A deadlock can be initiated by userspace via ioctl(SNDCTL_SEQ_OUTOFBAND)
    on /dev/sequencer with TMR_ECHO midi event.
    
    In this case the control flow is:
    sound_ioctl()
    -> case SND_DEV_SEQ:
       case SND_DEV_SEQ2:
         sequencer_ioctl()
         -> case SNDCTL_SEQ_OUTOFBAND:
              spin_lock_irqsave(&lock,flags);
              play_event();
              -> case EV_TIMING:
                   seq_timing_event()
                   -> case TMR_ECHO:
                        seq_copy_to_input()
                        -> spin_lock_irqsave(&lock,flags);
    
    It seems that spin_lock_irqsave() around play_event() is not necessary,
    because the only other call location in seq_startplay() makes the call
    without acquiring spinlock.
    
    So, the patch just removes spinlocks around play_event().
    By the way, it removes unreachable code in seq_timing_event(),
    since (seq_mode == SEQ_2) case is handled in the beginning.
    
    Compile tested only.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8db826073e9a5e10a7e758f4fe5daec4bfa1eff3
Author: Takeshi Kihara <takeshi.kihara.df@renesas.com>
Date:   Thu Apr 30 02:03:51 2015 +0900

    mmc: sh_mmcif: Fix timeout value for command request
    
    commit bad4371d87d1d1ed1aecd9c9cc21c41ac3f289c8 upstream.
    
    f9fd54f22e ("mmc: sh_mmcif: Use msecs_to_jiffies() for host->timeout")
    changed the timeout value from 1000 jiffies to 1s. In the case where
    HZ is 1000 the values are the same. However, for smaller HZ values the
    timeout is now smaller, 1s instead of 10s in the case of HZ=100.
    
    Since the timeout occurs in spite of a normal data transfer a timeout of
    10s seems more appropriate. This restores the previous timeout in the
    case where HZ=100 and results in an increase over the previous timeout
    for larger values of HZ.
    
    Fixes: f9fd54f22e ("mmc: sh_mmcif: Use msecs_to_jiffies() for host->timeout")
    Signed-off-by: Takeshi Kihara <takeshi.kihara.df@renesas.com>
    [horms: rewrote changelog to refer to HZ]
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Yoshihiro Kaneko <ykaneko0929@gmail.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec41a70d94bf7ac9a37a29928bb08b6694d070ec
Author: Grygorii Strashko <Grygorii.Strashko@linaro.org>
Date:   Thu Apr 23 13:43:43 2015 +0300

    mmc: core: add missing pm event in mmc_pm_notify to fix hib restore
    
    commit 184af16b09360d6273fd6160e6ff7f8e2482ef23 upstream.
    
    The PM_RESTORE_PREPARE is not handled now in mmc_pm_notify(),
    as result mmc_rescan() could be scheduled and executed at
    late hibernation restore stages when MMC device is suspended
    already - which, in turn, will lead to system crash on TI dra7-evm board:
    
    WARNING: CPU: 0 PID: 3188 at drivers/bus/omap_l3_noc.c:148 l3_interrupt_handler+0x258/0x374()
    44000000.ocp:L3 Custom Error: MASTER MPU TARGET L4_PER1_P3 (Idle): Data Access in User mode during Functional access
    
    Hence, add missed PM_RESTORE_PREPARE PM event in mmc_pm_notify().
    
    Fixes: 4c2ef25fe0b8 (mmc: fix all hangs related to mmc/sd card...)
    Signed-off-by: Grygorii Strashko <Grygorii.Strashko@linaro.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d07cdb5ef78dddde752d22f3d20b48bfc3abcbf2
Author: Chuanxiao Dong <chuanxiao.dong@intel.com>
Date:   Tue Aug 12 12:01:30 2014 +0800

    mmc: card: Don't access RPMB partitions for normal read/write
    
    commit 4e93b9a6abc0d028daf3c8a00cb77b679d8a4df4 upstream.
    
    During kernel boot, it will try to read some logical sectors
    of each block device node for the possible partition table.
    
    But since RPMB partition is special and can not be accessed
    by normal eMMC read / write CMDs, it will cause below error
    messages during kernel boot:
    ...
     mmc0: Got data interrupt 0x00000002 even though no data operation was in progress.
     mmcblk0rpmb: error -110 transferring data, sector 0, nr 32, cmd response 0x900, card status 0xb00
     mmcblk0rpmb: retrying using single block read
     mmcblk0rpmb: timed out sending r/w cmd command, card status 0x400900
     mmcblk0rpmb: timed out sending r/w cmd command, card status 0x400900
     mmcblk0rpmb: timed out sending r/w cmd command, card status 0x400900
     mmcblk0rpmb: timed out sending r/w cmd command, card status 0x400900
     mmcblk0rpmb: timed out sending r/w cmd command, card status 0x400900
     mmcblk0rpmb: timed out sending r/w cmd command, card status 0x400900
     end_request: I/O error, dev mmcblk0rpmb, sector 0
     Buffer I/O error on device mmcblk0rpmb, logical block 0
     end_request: I/O error, dev mmcblk0rpmb, sector 8
     Buffer I/O error on device mmcblk0rpmb, logical block 1
     end_request: I/O error, dev mmcblk0rpmb, sector 16
     Buffer I/O error on device mmcblk0rpmb, logical block 2
     end_request: I/O error, dev mmcblk0rpmb, sector 24
     Buffer I/O error on device mmcblk0rpmb, logical block 3
    ...
    
    This patch will discard the access request in eMMC queue if
    it is RPMB partition access request. By this way, it avoids
    trigger above error messages.
    
    Fixes: 090d25fe224c ("mmc: core: Expose access to RPMB partition")
    Signed-off-by: Yunpeng Gao <yunpeng.gao@intel.com>
    Signed-off-by: Chuanxiao Dong <chuanxiao.dong@intel.com>
    Tested-by: Michael Shigorin <mike@altlinux.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0297ca701b77baa786f3fc24e9c35b970cf82476
Author: Doug Anderson <dianders@chromium.org>
Date:   Fri May 1 09:01:27 2015 -0700

    pinctrl: Don't just pretend to protect pinctrl_maps, do it for real
    
    commit c5272a28566b00cce79127ad382406e0a8650690 upstream.
    
    Way back, when the world was a simpler place and there was no war, no
    evil, and no kernel bugs, there was just a single pinctrl lock.  That
    was how the world was when (57291ce pinctrl: core device tree mapping
    table parsing support) was written.  In that case, there were
    instances where the pinctrl mutex was already held when
    pinctrl_register_map() was called, hence a "locked" parameter was
    passed to the function to indicate that the mutex was already locked
    (so we shouldn't lock it again).
    
    A few years ago in (42fed7b pinctrl: move subsystem mutex to
    pinctrl_dev struct), we switched to a separate pinctrl_maps_mutex.
    ...but (oops) we forgot to re-think about the whole "locked" parameter
    for pinctrl_register_map().  Basically the "locked" parameter appears
    to still refer to whether the bigger pinctrl_dev mutex is locked, but
    we're using it to skip locks of our (now separate) pinctrl_maps_mutex.
    
    That's kind of a bad thing(TM).  Probably nobody noticed because most
    of the calls to pinctrl_register_map happen at boot time and we've got
    synchronous device probing.  ...and even cases where we're
    asynchronous don't end up actually hitting the race too often.  ...but
    after banging my head against the wall for a bug that reproduced 1 out
    of 1000 reboots and lots of looking through kgdb, I finally noticed
    this.
    
    Anyway, we can now safely remove the "locked" parameter and go back to
    a war-free, evil-free, and kernel-bug-free world.
    
    Fixes: 42fed7ba44e4 ("pinctrl: move subsystem mutex to pinctrl_dev struct")
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f599720ae1435796054182a90622b64ab938038
Author: Christian König <christian.koenig@amd.com>
Date:   Thu May 7 15:19:24 2015 +0200

    drm/radeon: more strictly validate the UVD codec
    
    commit d52cdfa4a0c6406bbfb33206341eaf1fb1555994 upstream.
    
    MPEG 2/4 are only supported since UVD3.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bccb94f33d85268b68698079794bb6e6f5de7df
Author: Christian König <christian.koenig@amd.com>
Date:   Thu May 7 15:19:23 2015 +0200

    drm/radeon: make UVD handle checking more strict
    
    commit a1b403da70e038ca6c6c6fe434d1d873546873a3 upstream.
    
    Invalid messages can crash the hw otherwise.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90ad0e7f869d77c8fa845806bf17a68febcfa820
Author: Christian König <christian.koenig@amd.com>
Date:   Fri May 1 12:34:12 2015 +0200

    drm/radeon: disable semaphores for UVD V1 (v2)
    
    commit 013ead48a843442e63b9426e3bd5df18ca5d054a upstream.
    
    Hardware doesn't seem to work correctly, just block userspace in this case.
    
    v2: add missing defines
    
    Bugs: https://bugs.freedesktop.org/show_bug.cgi?id=85320
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 763abc9213593916d187cbe4e7398839b1ebb675
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon May 4 15:06:49 2015 +0200

    drm/i915: Add missing MacBook Pro models with dual channel LVDS
    
    commit 3916e3fd81021fb795bfbdb17f375b6b3685bced upstream.
    
    Single channel LVDS maxes out at 112 MHz. The 15" pre-retina models
    shipped with 1440x900 (106 MHz) by default or 1680x1050 (119 MHz)
    as a BTO option, both versions used dual channel LVDS even though
    the smaller one would have fit into a single channel.
    
    Notes:
      Bug report showing that the MacBookPro8,2 with 1440x900 uses dual
      channel LVDS (this lead to it being hardcoded in intel_lvds.c by
      Daniel Vetter with commit 618563e3945b9d0864154bab3c607865b557cecc):
        https://bugzilla.kernel.org/show_bug.cgi?id=42842
    
      If i915.lvds_channel_mode=2 is missing even though the machine needs
      it, every other vertical line is white and consequently, only the left
      half of the screen is visible (verified by myself on a MacBookPro9,1).
    
      Forum posting concerning a MacBookPro6,2 with 1440x900, author is
      using i915.lvds_channel_mode=2 on the kernel command line, proving
      that the machine uses dual channels:
        https://bbs.archlinux.org/viewtopic.php?id=185770
    
      Chi Mei N154C6-L04 with 1440x900 is a replacement panel for all
      MacBook Pro "A1286" models, and that model number encompasses the
      MacBookPro6,2 / 8,2 / 9,1. Page 17 of the panel's datasheet shows it's
      driven with dual channel LVDS:
        http://www.ebay.com/itm/-/400690878560
        http://www.everymac.com/ultimate-mac-lookup/?search_keywords=A1286
        http://www.taopanel.com/chimei/datasheet/N154C6-L04.pdf
    
      Those three 15" models, MacBookPro6,2 / 8,2 / 9,1, are the only ones
      with i915 graphics and dual channel LVDS, so that list should be
      complete. And the 8,2 is already in intel_lvds.c.
    
      Possible motivation to use dual channel LVDS even on the 1440x900
      models: Reduce the number of different parts, i.e. use identical logic
      boards and display cabling on both versions and the only differing
      component is the panel.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Acked-by: Jani Nikula <jani.nikula@intel.com>
    [Jani: included notes in the commit message for posterity]
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a35458e941133d9e113db2a0a4dad99015178555
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Mon Apr 20 16:02:33 2015 +0200

    ARM: ux500: Enable GPIO regulator for SD-card for snowball
    
    commit 11133db7a836b0cb411faa048f07a38e994d1382 upstream.
    
    Fixes: c94a4ab7af3f ("ARM: ux500: Disable the MMCI gpio-regulator by default")
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05b4327e19b16664bbcb21df61b788935f6f5d6a
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Mon Apr 20 16:02:32 2015 +0200

    ARM: ux500: Enable GPIO regulator for SD-card for HREF boards
    
    commit f9a8c3914ba85f19c3360b19612d77c47adb8942 upstream.
    
    Fixes: c94a4ab7af3f ("ARM: ux500: Disable the MMCI gpio-regulator by default")
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55687fa5a1c39c8ea66b8830a25d53258ce3ba26
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Mon Apr 20 16:02:31 2015 +0200

    ARM: ux500: Move GPIO regulator for SD-card into board DTSs
    
    commit 53d2669844263fd5fdc70f0eb6a2eb8a21086d8e upstream.
    
    The GPIO regulator for the SD-card isn't a ux500 SOC configuration, but
    instead it's specific to the board. Move the definition of it, into the
    board DTSs.
    
    Fixes: c94a4ab7af3f ("ARM: ux500: Disable the MMCI gpio-regulator by default")
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a505881f33bc692528b9bd194dd3f77d55ceb27
Author: Nicolas Schichan <nschichan@freebox.fr>
Date:   Wed May 6 18:31:56 2015 +0200

    ARM: net fix emit_udiv() for BPF_ALU | BPF_DIV | BPF_K intruction.
    
    commit 19fc99d0c6ba7d9b65456496b5bb2169d5f74cd0 upstream.
    
    In that case, emit_udiv() will be called with rn == ARM_R0 (r_scratch)
    and loading rm first into ARM_R0 will result in jit_udiv() function
    being called the same dividend and divisor. Fix that by loading rn
    first into ARM_R1 and then rm into ARM_R0.
    
    Signed-off-by: Nicolas Schichan <nschichan@freebox.fr>
    Fixes: aee636c4809f (bpf: do not use reciprocal divide)
    Acked-by: Mircea Gherzan <mgherzan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 616f4b45fb91844640c5ae40aa547c96cd90e5a0
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Tue Apr 14 11:50:13 2015 +0200

    ARM: mvebu: armada-xp-openblocks-ax3-4: Disable internal RTC
    
    commit 750e30d4076ae5e02ad13a376e96c95a2627742c upstream.
    
    There is no crystal connected to the internal RTC on the Open Block
    AX3. So let's disable it in order to prevent the kernel probing the
    driver uselessly. Eventually this patches removes the following
    warning message from the boot log:
    "rtc-mv d0010300.rtc: internal RTC not ticking"
    
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5cdd90cd72b16e49cec2357674f0d8c63e751df
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Tue Apr 14 11:05:04 2015 -0300

    ARM: dts: imx23-olinuxino: Fix polarity of LED GPIO
    
    commit cfe8c59762244251fd9a5e281d48808095ff4090 upstream.
    
    On imx23-olinuxino the LED turns on when level logic high is aplied to
    GPIO2_1.
    
    Fix the gpios property accordingly.
    
    Fixes: b34aa1850244 ("ARM: dts: imx23-olinuxino: Remove unneeded "default-on"")
    Reported-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a689c251d335a0401bdf199354a808e268465cf0
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Tue Apr 14 20:37:26 2015 +0000

    ARM: dts: imx23-olinuxino: Fix dr_mode of usb0
    
    commit 0fdebe1a2f4d3a8fc03754022fabf8ba95e131a3 upstream.
    
    The dr_mode of usb0 on imx233-olinuxino is left to default "otg".
    Since the green LED (GPIO2_1) on imx233-olinuxino is connected to the
    same pin as USB_OTG_ID it's possible to disable USB host by LED toggling:
    
    echo 0 > /sys/class/leds/green/brightness
    [ 1068.890000] ci_hdrc ci_hdrc.0: remove, state 1
    [ 1068.890000] usb usb1: USB disconnect, device number 1
    [ 1068.920000] usb 1-1: USB disconnect, device number 2
    [ 1068.920000] usb 1-1.1: USB disconnect, device number 3
    [ 1069.070000] usb 1-1.2: USB disconnect, device number 4
    [ 1069.450000] ci_hdrc ci_hdrc.0: USB bus 1 deregistered
    [ 1074.460000] ci_hdrc ci_hdrc.0: timeout waiting for 00000800 in 11
    
    This patch fixes the issue by setting dr_mode to "host" in the dts file.
    
    Reported-by: Harald Geyer <harald@ccbib.org>
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Reviewed-by: Fabio Estevam <fabio.estevam@freescale.com>
    Reviewed-by: Marek Vasut <marex@denx.de>
    Acked-by: Peter Chen <peter.chen@freescale.com>
    Fixes: b49312948285 ("ARM: dts: imx23-olinuxino: Add USB host support")
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14124c898eb28034b4bf16d9bb6cd671b734e143
Author: Marek Vasut <marex@denx.de>
Date:   Fri Apr 24 13:29:47 2015 +0200

    ARM: dts: imx28: Fix AUART4 TX-DMA interrupt name
    
    commit 4ada77e37a773168fea484899201e272ab44ba8b upstream.
    
    Fix a typo in the TX DMA interrupt name for AUART4.
    This patch makes AUART4 operational again.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Fixes: f30fb03d4d3a ("ARM: dts: add generic DMA device tree binding for mxs-dma")
    Acked-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82400a631f3eff06291d1da7d4f07e7e994fa26c
Author: Markus Pargmann <mpa@pengutronix.de>
Date:   Fri Apr 24 09:27:33 2015 +0200

    ARM: dts: imx25: Add #pwm-cells to pwm4
    
    commit f90d3f0d0a11fa77918fd5497cb616dd2faa8431 upstream.
    
    The property '#pwm-cells' is currently missing. It is not possible to
    use pwm4 without this property.
    
    Signed-off-by: Markus Pargmann <mpa@pengutronix.de>
    Fixes: 5658a68fb578 ("ARM i.MX25: Add devicetree")
    Reviewed-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee6ff2071f172a8b74ec733ba167e5a5f98786c3
Author: Rabin Vincent <rabin.vincent@axis.com>
Date:   Tue May 5 15:15:56 2015 +0200

    Revert "dm crypt: fix deadlock when async crypto algorithm returns -EBUSY"
    
    commit c0403ec0bb5a8c5b267fb7e16021bec0b17e4964 upstream.
    
    This reverts Linux 4.1-rc1 commit 0618764cb25f6fa9fb31152995de42a8a0496475.
    
    The problem which that commit attempts to fix actually lies in the
    Freescale CAAM crypto driver not dm-crypt.
    
    dm-crypt uses CRYPTO_TFM_REQ_MAY_BACKLOG.  This means the the crypto
    driver should internally backlog requests which arrive when the queue is
    full and process them later.  Until the crypto hw's queue becomes full,
    the driver returns -EINPROGRESS.  When the crypto hw's queue if full,
    the driver returns -EBUSY, and if CRYPTO_TFM_REQ_MAY_BACKLOG is set, is
    expected to backlog the request and process it when the hardware has
    queue space.  At the point when the driver takes the request from the
    backlog and starts processing it, it calls the completion function with
    a status of -EINPROGRESS.  The completion function is called (for a
    second time, in the case of backlogged requests) with a status/err of 0
    when a request is done.
    
    Crypto drivers for hardware without hardware queueing use the helpers,
    crypto_init_queue(), crypto_enqueue_request(), crypto_dequeue_request()
    and crypto_get_backlog() helpers to implement this behaviour correctly,
    while others implement this behaviour without these helpers (ccp, for
    example).
    
    dm-crypt (before the patch that needs reverting) uses this API
    correctly.  It queues up as many requests as the hw queues will allow
    (i.e. as long as it gets back -EINPROGRESS from the request function).
    Then, when it sees at least one backlogged request (gets -EBUSY), it
    waits till that backlogged request is handled (completion gets called
    with -EINPROGRESS), and then continues.  The references to
    af_alg_wait_for_completion() and af_alg_complete() in that commit's
    commit message are irrelevant because those functions only handle one
    request at a time, unlink dm-crypt.
    
    The problem is that the Freescale CAAM driver, which that commit
    describes as having being tested with, fails to implement the
    backlogging behaviour correctly.  In cam_jr_enqueue(), if the hardware
    queue is full, it simply returns -EBUSY without backlogging the request.
    What the observed deadlock was is not described in the commit message
    but it is obviously the wait_for_completion() in crypto_convert() where
    dm-crypto would wait for the completion being called with -EINPROGRESS
    in the case of backlogged requests.  This completion will never be
    completed due to the bug in the CAAM driver.
    
    Commit 0618764cb25 incorrectly made dm-crypt wait for every request,
    even when the driver/hardware queues are not full, which means that
    dm-crypt will never see -EBUSY.  This means that that commit will cause
    a performance regression on all crypto drivers which implement the API
    correctly.
    
    Revert it.  Correct backlog handling should be implemented in the CAAM
    driver instead.
    
    Cc'ing stable purely because commit 0618764cb25 did.  If for some reason
    a stable@ kernel did pick up commit 0618764cb25 it should get reverted.
    
    Signed-off-by: Rabin Vincent <rabin.vincent@axis.com>
    Reviewed-by: Horia Geanta <horia.geanta@freescale.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b5006e44303d157cc6a280240ab48a3badbd760
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Wed Apr 29 17:10:15 2015 -0400

    xen/events: Set irq_info->evtchn before binding the channel to CPU in __startup_pirq()
    
    commit 16e6bd5970c88a2ac018b84a5f1dd5c2ff1fdf2c upstream.
    
    .. because bind_evtchn_to_cpu(evtchn, cpu) will map evtchn to
    'info' and pass 'info' down to xen_evtchn_port_bind_to_cpu().
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Tested-by: Annie Li <annie.li@oracle.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9965d51efbd5a9cd6fa833d2839b4b80d78fa7df
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Wed Apr 29 17:10:14 2015 -0400

    xen/console: Update console event channel on resume
    
    commit b9d934f27c91b878c4b2e64299d6e419a4022f8d upstream.
    
    After a resume the hypervisor/tools may change console event
    channel number. We should re-query it.
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d7bed845185dfc8caf66c0b200b69d83741712f
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Wed Apr 29 17:10:12 2015 -0400

    xen/events: Clear cpu_evtchn_mask before resuming
    
    commit 5cec98834989a014a9560b1841649eaca95cf00e upstream.
    
    When a guest is resumed, the hypervisor may change event channel
    assignments. If this happens and the guest uses 2-level events it
    is possible for the interrupt to be claimed by wrong VCPU since
    cpu_evtchn_mask bits may be stale. This can happen even though
    evtchn_2l_bind_to_cpu() attempts to clear old bits: irq_info that
    is passed in is not necessarily the original one (from pre-migration
    times) but instead is freshly allocated during resume and so any
    information about which CPU the channel was bound to is lost.
    
    Thus we should clear the mask during resume.
    
    We also need to make sure that bits for xenstore and console channels
    are set when these two subsystems are resumed. While rebind_evtchn_irq()
    (which is invoked for both of them on a resume) calls irq_set_affinity(),
    the latter will in fact postpone setting affinity until handling the
    interrupt. But because cpu_evtchn_mask will have bits for these two
    cleared we won't be able to take the interrupt.
    
    With that in mind, we need to bind those two channels explicitly in
    rebind_evtchn_irq(). We will keep irq_set_affinity() so that we have a
    pass through generic irq affinity code later, in case something needs
    to be updated there as well.
    
    (Also replace cpumask_of(0) with cpumask_of(info->cpu) in
    rebind_evtchn_irq(): it should be set to zero in preceding
    xen_irq_info_evtchn_setup().)
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reported-by: Annie Li <annie.li@oracle.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcce45b5e7afc046164fefb4d1118547ef15710c
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Tue May 5 16:23:46 2015 -0700

    mm: soft-offline: fix num_poisoned_pages counting on concurrent events
    
    commit 602498f9aa43d4951eece3fd6ad95a6d0a78d537 upstream.
    
    If multiple soft offline events hit one free page/hugepage concurrently,
    soft_offline_page() can handle the free page/hugepage multiple times,
    which makes num_poisoned_pages counter increased more than once.  This
    patch fixes this wrong counting by checking TestSetPageHWPoison for normal
    papes and by checking the return value of dequeue_hwpoisoned_huge_page()
    for hugepages.
    
    Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Acked-by: Dean Nelson <dnelson@redhat.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d869a155cfdbe8314e36b732af6a22d76686ca4c
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Apr 21 16:49:13 2015 -0400

    writeback: use |1 instead of +1 to protect against div by zero
    
    commit 464d1387acb94dc43ba772b35242345e3d2ead1b upstream.
    
    mm/page-writeback.c has several places where 1 is added to the divisor
    to prevent division by zero exceptions; however, if the original
    divisor is equivalent to -1, adding 1 leads to division by zero.
    
    There are three places where +1 is used for this purpose - one in
    pos_ratio_polynom() and two in bdi_position_ratio().  The second one
    in bdi_position_ratio() actually triggered div-by-zero oops on a
    machine running a 3.10 kernel.  The divisor is
    
      x_intercept - bdi_setpoint + 1 == span + 1
    
    span is confirmed to be (u32)-1.  It isn't clear how it ended up that
    but it could be from write bandwidth calculation underflow fixed by
    c72efb658f7c ("writeback: fix possible underflow in write bandwidth
    calculation").
    
    At any rate, +1 isn't a proper protection against div-by-zero.  This
    patch converts all +1 protections to |1.  Note that
    bdi_update_dirty_ratelimit() was already using |1 before this patch.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4ef85962bda7f801bf0d28a0cf03f303c030771
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Tue May 5 16:23:35 2015 -0700

    mm/memory-failure: call shake_page() when error hits thp tail page
    
    commit 09789e5de18e4e442870b2d700831f5cb802eb05 upstream.
    
    Currently memory_failure() calls shake_page() to sweep pages out from
    pcplists only when the victim page is 4kB LRU page or thp head page.
    But we should do this for a thp tail page too.
    
    Consider that a memory error hits a thp tail page whose head page is on
    a pcplist when memory_failure() runs.  Then, the current kernel skips
    shake_pages() part, so hwpoison_user_mappings() returns without calling
    split_huge_page() nor try_to_unmap() because PageLRU of the thp head is
    still cleared due to the skip of shake_page().
    
    As a result, me_huge_page() runs for the thp, which is broken behavior.
    
    One effect is a leak of the thp.  And another is to fail to isolate the
    memory error, so later access to the error address causes another MCE,
    which kills the processes which used the thp.
    
    This patch fixes this problem by calling shake_page() for thp tail case.
    
    Fixes: 385de35722c9 ("thp: allow a hwpoisoned head page to be put back to LRU")
    Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Dean Nelson <dnelson@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Hidetoshi Seto <seto.hidetoshi@jp.fujitsu.com>
    Cc: Jin Dongming <jin.dongming@np.css.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c0b6322754c01a0424b0a5d7e8e0b964781fcc0
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri May 8 16:36:50 2015 -0500

    mnt: Fix fs_fully_visible to verify the root directory is visible
    
    commit 7e96c1b0e0f495c5a7450dc4aa7c9a24ba4305bd upstream.
    
    This fixes a dumb bug in fs_fully_visible that allows proc or sys to
    be mounted if there is a bind mount of part of /proc/ or /sys/ visible.
    
    Reported-by: Eric Windisch <ewindisch@docker.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be323587d27b8bfe18681ad98d941256bfdd8248
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Apr 21 17:42:09 2015 +0200

    gpio: sysfs: fix memory leaks and device hotplug
    
    commit 483d821108791092798f5d230686868112927044 upstream.
    
    Unregister GPIOs requested through sysfs at chip remove to avoid leaking
    the associated memory and sysfs entries.
    
    The stale sysfs entries prevented the gpio numbers from being exported
    when the gpio range was later reused (e.g. at device reconnect).
    
    This also fixes the related module-reference leak.
    
    Note that kernfs makes sure that any on-going sysfs operations finish
    before the class devices are unregistered and that further accesses
    fail.
    
    The chip exported flag is used to prevent gpiod exports during removal.
    This also makes it harder to trigger, but does not fix, the related race
    between gpiochip_remove and export_store, which is really a race with
    gpiod_request that needs to be addressed separately.
    
    Also note that this would prevent the crashes (e.g. NULL-dereferences)
    at reconnect that affects pre-3.18 kernels, as well as use-after-free on
    operations on open attribute files on pre-3.14 kernels (prior to
    kernfs).
    
    Fixes: d8f388d8dc8d ("gpio: sysfs interface")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 076b0314b8e3aac34713d700d52cbdfb74da2615
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 12 17:12:29 2015 +0100

    gpio: unregister gpiochip device before removing it
    
    commit 01cca93a9491ed95992523ff7e79dd9bfcdea8e0 upstream.
    
    Unregister gpiochip device (used to export information through sysfs)
    before removing it internally. This way removal will reverse addition.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23313ab5b924d46668ee17be8b273b8787beb5bb
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Mon Apr 20 14:01:11 2015 -0600

    RDMA/CMA: Canonize IPv4 on IPV6 sockets properly
    
    commit 285214409a9e5fceba2215461b4682b6069d8e77 upstream.
    
    When accepting a new IPv4 connect to an IPv6 socket, the CMA tries to
    canonize the address family to IPv4, but does not properly process
    the listening sockaddr to get the listening port, and does not properly
    set the address family of the canonized sockaddr.
    
    Fixes: e51060f08a61 ("IB: IP address based RDMA connection manager")
    
    Reported-By: Yotam Kenneth <yotamke@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Tested-by: Haggai Eran <haggaie@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63c3723947435afa0cb01bd3413189ba2a20d4c3
Author: Ryusuke Konishi <konishi.ryusuke@lab.ntt.co.jp>
Date:   Tue May 5 16:24:00 2015 -0700

    nilfs2: fix sanity check of btree level in nilfs_btree_root_broken()
    
    commit d8fd150fe3935e1692bf57c66691e17409ebb9c1 upstream.
    
    The range check for b-tree level parameter in nilfs_btree_root_broken()
    is wrong; it accepts the case of "level == NILFS_BTREE_LEVEL_MAX" even
    though the level is limited to values in the range of 0 to
    (NILFS_BTREE_LEVEL_MAX - 1).
    
    Since the level parameter is read from storage device and used to index
    nilfs_btree_path array whose element count is NILFS_BTREE_LEVEL_MAX, it
    can cause memory overrun during btree operations if the boundary value
    is set to the level parameter on device.
    
    This fixes the broken sanity check and adds a comment to clarify that
    the upper bound NILFS_BTREE_LEVEL_MAX is exclusive.
    
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@lab.ntt.co.jp>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c87e1582d7d4b37767c79a5a352340aea886c748
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Tue May 5 16:24:02 2015 -0700

    ocfs2: dlm: fix race between purge and get lock resource
    
    commit b1432a2a35565f538586774a03bf277c27fc267d upstream.
    
    There is a race window in dlm_get_lock_resource(), which may return a
    lock resource which has been purged.  This will cause the process to
    hang forever in dlmlock() as the ast msg can't be handled due to its
    lock resource not existing.
    
        dlm_get_lock_resource {
            ...
            spin_lock(&dlm->spinlock);
            tmpres = __dlm_lookup_lockres_full(dlm, lockid, namelen, hash);
            if (tmpres) {
                 spin_unlock(&dlm->spinlock);
                 >>>>>>>> race window, dlm_run_purge_list() may run and purge
                                  the lock resource
                 spin_lock(&tmpres->spinlock);
                 ...
                 spin_unlock(&tmpres->spinlock);
            }
        }
    
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Joseph Qi <joseph.qi@huawei.com>
    Cc: Mark Fasheh <mfasheh@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
