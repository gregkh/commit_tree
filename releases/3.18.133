commit 4c35624dcb3bce026bb08eb04085c187bafff863
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 26 09:44:29 2019 +0100

    Linux 3.18.133

commit aa2f510a0698c98a03c89aa18ec982a133c348b9
Author: Michal Hocko <mhocko@suse.com>
Date:   Fri Dec 28 00:38:17 2018 -0800

    mm, proc: be more verbose about unstable VMA flags in /proc/<pid>/smaps
    
    [ Upstream commit 7550c6079846a24f30d15ac75a941c8515dbedfb ]
    
    Patch series "THP eligibility reporting via proc".
    
    This series of three patches aims at making THP eligibility reporting much
    more robust and long term sustainable.  The trigger for the change is a
    regression report [2] and the long follow up discussion.  In short the
    specific application didn't have good API to query whether a particular
    mapping can be backed by THP so it has used VMA flags to workaround that.
    These flags represent a deep internal state of VMAs and as such they
    should be used by userspace with a great deal of caution.
    
    A similar has happened for [3] when users complained that VM_MIXEDMAP is
    no longer set on DAX mappings.  Again a lack of a proper API led to an
    abuse.
    
    The first patch in the series tries to emphasise that that the semantic of
    flags might change and any application consuming those should be really
    careful.
    
    The remaining two patches provide a more suitable interface to address [2]
    and provide a consistent API to query the THP status both for each VMA and
    process wide as well.  [1]
    
    http://lkml.kernel.org/r/20181120103515.25280-1-mhocko@kernel.org [2]
    http://lkml.kernel.org/r/http://lkml.kernel.org/r/alpine.DEB.2.21.1809241054050.224429@chino.kir.corp.google.com
    [3] http://lkml.kernel.org/r/20181002100531.GC4135@quack2.suse.cz
    
    This patch (of 3):
    
    Even though vma flags exported via /proc/<pid>/smaps are explicitly
    documented to be not guaranteed for future compatibility the warning
    doesn't go far enough because it doesn't mention semantic changes to those
    flags.  And they are important as well because these flags are a deep
    implementation internal to the MM code and the semantic might change at
    any time.
    
    Let's consider two recent examples:
    http://lkml.kernel.org/r/20181002100531.GC4135@quack2.suse.cz
    : commit e1fb4a086495 "dax: remove VM_MIXEDMAP for fsdax and device dax" has
    : removed VM_MIXEDMAP flag from DAX VMAs. Now our testing shows that in the
    : mean time certain customer of ours started poking into /proc/<pid>/smaps
    : and looks at VMA flags there and if VM_MIXEDMAP is missing among the VMA
    : flags, the application just fails to start complaining that DAX support is
    : missing in the kernel.
    
    http://lkml.kernel.org/r/alpine.DEB.2.21.1809241054050.224429@chino.kir.corp.google.com
    : Commit 1860033237d4 ("mm: make PR_SET_THP_DISABLE immediately active")
    : introduced a regression in that userspace cannot always determine the set
    : of vmas where thp is ineligible.
    : Userspace relies on the "nh" flag being emitted as part of /proc/pid/smaps
    : to determine if a vma is eligible to be backed by hugepages.
    : Previous to this commit, prctl(PR_SET_THP_DISABLE, 1) would cause thp to
    : be disabled and emit "nh" as a flag for the corresponding vmas as part of
    : /proc/pid/smaps.  After the commit, thp is disabled by means of an mm
    : flag and "nh" is not emitted.
    : This causes smaps parsing libraries to assume a vma is eligible for thp
    : and ends up puzzling the user on why its memory is not backed by thp.
    
    In both cases userspace was relying on a semantic of a specific VMA flag.
    The primary reason why that happened is a lack of a proper interface.
    While this has been worked on and it will be fixed properly, it seems that
    our wording could see some refinement and be more vocal about semantic
    aspect of these flags as well.
    
    Link: http://lkml.kernel.org/r/20181211143641.3503-2-mhocko@kernel.org
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Jan Kara <jack@suse.cz>
    Acked-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Acked-by: Mike Rapoport <rppt@linux.ibm.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Paul Oppenheimer <bepvte@gmail.com>
    Cc: William Kucharski <william.kucharski@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd1f97162fc55ef9a4637568974ffc5b43928c6f
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Fri Dec 28 00:32:50 2018 -0800

    ocfs2: fix panic due to unrecovered local alloc
    
    [ Upstream commit 532e1e54c8140188e192348c790317921cb2dc1c ]
    
    mount.ocfs2 ignore the inconsistent error that journal is clean but
    local alloc is unrecovered.  After mount, local alloc not empty, then
    reserver cluster didn't alloc a new local alloc window, reserveration
    map is empty(ocfs2_reservation_map.m_bitmap_len = 0), that triggered the
    following panic.
    
    This issue was reported at
    
      https://oss.oracle.com/pipermail/ocfs2-devel/2015-May/010854.html
    
    and was advised to fixed during mount.  But this is a very unusual
    inconsistent state, usually journal dirty flag should be cleared at the
    last stage of umount until every other things go right.  We may need do
    further debug to check that.  Any way to avoid possible futher
    corruption, mount should be abort and fsck should be run.
    
      (mount.ocfs2,1765,1):ocfs2_load_local_alloc:353 ERROR: Local alloc hasn't been recovered!
      found = 6518, set = 6518, taken = 8192, off = 15912372
      ocfs2: Mounting device (202,64) on (node 0, slot 3) with ordered data mode.
      o2dlm: Joining domain 89CEAC63CC4F4D03AC185B44E0EE0F3F ( 0 1 2 3 4 5 6 8 ) 8 nodes
      ocfs2: Mounting device (202,80) on (node 0, slot 3) with ordered data mode.
      o2hb: Region 89CEAC63CC4F4D03AC185B44E0EE0F3F (xvdf) is now a quorum device
      o2net: Accepted connection from node yvwsoa17p (num 7) at 172.22.77.88:7777
      o2dlm: Node 7 joins domain 64FE421C8C984E6D96ED12C55FEE2435 ( 0 1 2 3 4 5 6 7 8 ) 9 nodes
      o2dlm: Node 7 joins domain 89CEAC63CC4F4D03AC185B44E0EE0F3F ( 0 1 2 3 4 5 6 7 8 ) 9 nodes
      ------------[ cut here ]------------
      kernel BUG at fs/ocfs2/reservations.c:507!
      invalid opcode: 0000 [#1] SMP
      Modules linked in: ocfs2 rpcsec_gss_krb5 auth_rpcgss nfsv4 nfs fscache lockd grace ocfs2_dlmfs ocfs2_stack_o2cb ocfs2_dlm ocfs2_nodemanager ocfs2_stackglue configfs sunrpc ipt_REJECT nf_reject_ipv4 nf_conntrack_ipv4 nf_defrag_ipv4 iptable_filter ip_tables ip6t_REJECT nf_reject_ipv6 nf_conntrack_ipv6 nf_defrag_ipv6 xt_state nf_conntrack ip6table_filter ip6_tables ib_ipoib rdma_ucm ib_ucm ib_uverbs ib_umad rdma_cm ib_cm iw_cm ib_sa ib_mad ib_core ib_addr ipv6 ovmapi ppdev parport_pc parport xen_netfront fb_sys_fops sysimgblt sysfillrect syscopyarea acpi_cpufreq pcspkr i2c_piix4 i2c_core sg ext4 jbd2 mbcache2 sr_mod cdrom xen_blkfront pata_acpi ata_generic ata_piix floppy dm_mirror dm_region_hash dm_log dm_mod
      CPU: 0 PID: 4349 Comm: startWebLogic.s Not tainted 4.1.12-124.19.2.el6uek.x86_64 #2
      Hardware name: Xen HVM domU, BIOS 4.4.4OVM 09/06/2018
      task: ffff8803fb04e200 ti: ffff8800ea4d8000 task.ti: ffff8800ea4d8000
      RIP: 0010:[<ffffffffa05e96a8>]  [<ffffffffa05e96a8>] __ocfs2_resv_find_window+0x498/0x760 [ocfs2]
      Call Trace:
        ocfs2_resmap_resv_bits+0x10d/0x400 [ocfs2]
        ocfs2_claim_local_alloc_bits+0xd0/0x640 [ocfs2]
        __ocfs2_claim_clusters+0x178/0x360 [ocfs2]
        ocfs2_claim_clusters+0x1f/0x30 [ocfs2]
        ocfs2_convert_inline_data_to_extents+0x634/0xa60 [ocfs2]
        ocfs2_write_begin_nolock+0x1c6/0x1da0 [ocfs2]
        ocfs2_write_begin+0x13e/0x230 [ocfs2]
        generic_perform_write+0xbf/0x1c0
        __generic_file_write_iter+0x19c/0x1d0
        ocfs2_file_write_iter+0x589/0x1360 [ocfs2]
        __vfs_write+0xb8/0x110
        vfs_write+0xa9/0x1b0
        SyS_write+0x46/0xb0
        system_call_fastpath+0x18/0xd7
      Code: ff ff 8b 75 b8 39 75 b0 8b 45 c8 89 45 98 0f 84 e5 fe ff ff 45 8b 74 24 18 41 8b 54 24 1c e9 56 fc ff ff 85 c0 0f 85 48 ff ff ff <0f> 0b 48 8b 05 cf c3 de ff 48 ba 00 00 00 00 00 00 00 10 48 85
      RIP   __ocfs2_resv_find_window+0x498/0x760 [ocfs2]
       RSP <ffff8800ea4db668>
      ---[ end trace 566f07529f2edf3c ]---
      Kernel panic - not syncing: Fatal exception
      Kernel Offset: disabled
    
    Link: http://lkml.kernel.org/r/20181121020023.3034-2-junxiao.bi@oracle.com
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Yiwen Jiang <jiangyiwen@huawei.com>
    Acked-by: Joseph Qi <jiangqi903@gmail.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Changwei Ge <ge.changwei@h3c.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f95437eca3a40ed9f5a5fa62174c90bc86394af
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Dec 19 13:39:09 2018 +0100

    sysfs: Disable lockdep for driver bind/unbind files
    
    [ Upstream commit 4f4b374332ec0ae9c738ff8ec9bed5cd97ff9adc ]
    
    This is the much more correct fix for my earlier attempt at:
    
    https://lkml.org/lkml/2018/12/10/118
    
    Short recap:
    
    - There's not actually a locking issue, it's just lockdep being a bit
      too eager to complain about a possible deadlock.
    
    - Contrary to what I claimed the real problem is recursion on
      kn->count. Greg pointed me at sysfs_break_active_protection(), used
      by the scsi subsystem to allow a sysfs file to unbind itself. That
      would be a real deadlock, which isn't what's happening here. Also,
      breaking the active protection means we'd need to manually handle
      all the lifetime fun.
    
    - With Rafael we discussed the task_work approach, which kinda works,
      but has two downsides: It's a functional change for a lockdep
      annotation issue, and it won't work for the bind file (which needs
      to get the errno from the driver load function back to userspace).
    
    - Greg also asked why this never showed up: To hit this you need to
      unregister a 2nd driver from the unload code of your first driver. I
      guess only gpus do that. The bug has always been there, but only
      with a recent patch series did we add more locks so that lockdep
      built a chain from unbinding the snd-hda driver to the
      acpi_video_unregister call.
    
    Full lockdep splat:
    
    [12301.898799] ============================================
    [12301.898805] WARNING: possible recursive locking detected
    [12301.898811] 4.20.0-rc7+ #84 Not tainted
    [12301.898815] --------------------------------------------
    [12301.898821] bash/5297 is trying to acquire lock:
    [12301.898826] 00000000f61c6093 (kn->count#39){++++}, at: kernfs_remove_by_name_ns+0x3b/0x80
    [12301.898841] but task is already holding lock:
    [12301.898847] 000000005f634021 (kn->count#39){++++}, at: kernfs_fop_write+0xdc/0x190
    [12301.898856] other info that might help us debug this:
    [12301.898862]  Possible unsafe locking scenario:
    [12301.898867]        CPU0
    [12301.898870]        ----
    [12301.898874]   lock(kn->count#39);
    [12301.898879]   lock(kn->count#39);
    [12301.898883] *** DEADLOCK ***
    [12301.898891]  May be due to missing lock nesting notation
    [12301.898899] 5 locks held by bash/5297:
    [12301.898903]  #0: 00000000cd800e54 (sb_writers#4){.+.+}, at: vfs_write+0x17f/0x1b0
    [12301.898915]  #1: 000000000465e7c2 (&of->mutex){+.+.}, at: kernfs_fop_write+0xd3/0x190
    [12301.898925]  #2: 000000005f634021 (kn->count#39){++++}, at: kernfs_fop_write+0xdc/0x190
    [12301.898936]  #3: 00000000414ef7ac (&dev->mutex){....}, at: device_release_driver_internal+0x34/0x240
    [12301.898950]  #4: 000000003218fbdf (register_count_mutex){+.+.}, at: acpi_video_unregister+0xe/0x40
    [12301.898960] stack backtrace:
    [12301.898968] CPU: 1 PID: 5297 Comm: bash Not tainted 4.20.0-rc7+ #84
    [12301.898974] Hardware name: Hewlett-Packard HP EliteBook 8460p/161C, BIOS 68SCF Ver. F.01 03/11/2011
    [12301.898982] Call Trace:
    [12301.898989]  dump_stack+0x67/0x9b
    [12301.898997]  __lock_acquire+0x6ad/0x1410
    [12301.899003]  ? kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899010]  ? find_held_lock+0x2d/0x90
    [12301.899017]  ? mutex_spin_on_owner+0xe4/0x150
    [12301.899023]  ? find_held_lock+0x2d/0x90
    [12301.899030]  ? lock_acquire+0x90/0x180
    [12301.899036]  lock_acquire+0x90/0x180
    [12301.899042]  ? kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899049]  __kernfs_remove+0x296/0x310
    [12301.899055]  ? kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899060]  ? kernfs_name_hash+0xd/0x80
    [12301.899066]  ? kernfs_find_ns+0x6c/0x100
    [12301.899073]  kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899080]  bus_remove_driver+0x92/0xa0
    [12301.899085]  acpi_video_unregister+0x24/0x40
    [12301.899127]  i915_driver_unload+0x42/0x130 [i915]
    [12301.899160]  i915_pci_remove+0x19/0x30 [i915]
    [12301.899169]  pci_device_remove+0x36/0xb0
    [12301.899176]  device_release_driver_internal+0x185/0x240
    [12301.899183]  unbind_store+0xaf/0x180
    [12301.899189]  kernfs_fop_write+0x104/0x190
    [12301.899195]  __vfs_write+0x31/0x180
    [12301.899203]  ? rcu_read_lock_sched_held+0x6f/0x80
    [12301.899209]  ? rcu_sync_lockdep_assert+0x29/0x50
    [12301.899216]  ? __sb_start_write+0x13c/0x1a0
    [12301.899221]  ? vfs_write+0x17f/0x1b0
    [12301.899227]  vfs_write+0xb9/0x1b0
    [12301.899233]  ksys_write+0x50/0xc0
    [12301.899239]  do_syscall_64+0x4b/0x180
    [12301.899247]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [12301.899253] RIP: 0033:0x7f452ac7f7a4
    [12301.899259] Code: 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 80 00 00 00 00 8b 05 aa f0 2c 00 48 63 ff 85 c0 75 13 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 f3 c3 66 90 55 53 48 89 d5 48 89 f3 48 83
    [12301.899273] RSP: 002b:00007ffceafa6918 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [12301.899282] RAX: ffffffffffffffda RBX: 000000000000000d RCX: 00007f452ac7f7a4
    [12301.899288] RDX: 000000000000000d RSI: 00005612a1abf7c0 RDI: 0000000000000001
    [12301.899295] RBP: 00005612a1abf7c0 R08: 000000000000000a R09: 00005612a1c46730
    [12301.899301] R10: 000000000000000a R11: 0000000000000246 R12: 000000000000000d
    [12301.899308] R13: 0000000000000001 R14: 00007f452af4a740 R15: 000000000000000d
    
    Looking around I've noticed that usb and i2c already handle similar
    recursion problems, where a sysfs file can unbind the same type of
    sysfs somewhere else in the hierarchy. Relevant commits are:
    
    commit 356c05d58af05d582e634b54b40050c73609617b
    Author: Alan Stern <stern@rowland.harvard.edu>
    Date:   Mon May 14 13:30:03 2012 -0400
    
        sysfs: get rid of some lockdep false positives
    
    commit e9b526fe704812364bca07edd15eadeba163ebfb
    Author: Alexander Sverdlin <alexander.sverdlin@nsn.com>
    Date:   Fri May 17 14:56:35 2013 +0200
    
        i2c: suppress lockdep warning on delete_device
    
    Implement the same trick for driver bind/unbind.
    
    v2: Put the macro into bus.c (Greg).
    
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Ramalingam C <ramalingam.c@intel.com>
    Cc: Arend van Spriel <aspriel@gmail.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Bartosz Golaszewski <brgl@bgdev.pl>
    Cc: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: Vivek Gautam <vivek.gautam@codeaurora.org>
    Cc: Joe Perches <joe@perches.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98b701339c7664390620e68a1f3e2ea595e5a2dc
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed Dec 19 20:00:42 2018 +0900

    ALSA: bebob: fix model-id of unit for Apogee Ensemble
    
    [ Upstream commit 644b2e97405b0b74845e1d3c2b4fe4c34858062b ]
    
    This commit fixes hard-coded model-id for an unit of Apogee Ensemble with
    a correct value. This unit uses DM1500 ASIC produced ArchWave AG (formerly
    known as BridgeCo AG).
    
    I note that this model supports three modes in the number of data channels
    in tx/rx streams; 8 ch pairs, 10 ch pairs, 18 ch pairs. The mode is
    switched by Vendor-dependent AV/C command, like:
    
    $ cd linux-firewire-utils
    $ ./firewire-request /dev/fw1 fcp 0x00ff000003dbeb0600000000 (8ch pairs)
    $ ./firewire-request /dev/fw1 fcp 0x00ff000003dbeb0601000000 (10ch pairs)
    $ ./firewire-request /dev/fw1 fcp 0x00ff000003dbeb0602000000 (18ch pairs)
    
    When switching between different mode, the unit disappears from IEEE 1394
    bus, then appears on the bus with different combination of stream formats.
    In a mode of 18 ch pairs, available sampling rate is up to 96.0 kHz, else
    up to 192.0 kHz.
    
    $ ./hinawa-config-rom-printer /dev/fw1
    { 'bus-info': { 'adj': False,
                    'bmc': True,
                    'chip_ID': 21474898341,
                    'cmc': True,
                    'cyc_clk_acc': 100,
                    'generation': 2,
                    'imc': True,
                    'isc': True,
                    'link_spd': 2,
                    'max_ROM': 1,
                    'max_rec': 512,
                    'name': '1394',
                    'node_vendor_ID': 987,
                    'pmc': False},
      'root-directory': [ ['HARDWARE_VERSION', 19],
                          [ 'NODE_CAPABILITIES',
                            { 'addressing': {'64': True, 'fix': True, 'prv': False},
                              'misc': {'int': False, 'ms': False, 'spt': True},
                              'state': { 'atn': False,
                                         'ded': False,
                                         'drq': True,
                                         'elo': False,
                                         'init': False,
                                         'lst': True,
                                         'off': False},
                              'testing': {'bas': False, 'ext': False}}],
                          ['VENDOR', 987],
                          ['DESCRIPTOR', 'Apogee Electronics'],
                          ['MODEL', 126702],
                          ['DESCRIPTOR', 'Ensemble'],
                          ['VERSION', 5297],
                          [ 'UNIT',
                            [ ['SPECIFIER_ID', 41005],
                              ['VERSION', 65537],
                              ['MODEL', 126702],
                              ['DESCRIPTOR', 'Ensemble']]],
                          [ 'DEPENDENT_INFO',
                            [ ['SPECIFIER_ID', 2037],
                              ['VERSION', 1],
                              [(58, 'IMMEDIATE'), 16777159],
                              [(59, 'IMMEDIATE'), 1048576],
                              [(60, 'IMMEDIATE'), 16777159],
                              [(61, 'IMMEDIATE'), 6291456]]]]}
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d8db45d31789884302798495ce635a6df9de868
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Wed Oct 31 17:53:08 2018 -0400

    dm snapshot: Fix excessive memory usage and workqueue stalls
    
    [ Upstream commit 721b1d98fb517ae99ab3b757021cf81db41e67be ]
    
    kcopyd has no upper limit to the number of jobs one can allocate and
    issue. Under certain workloads this can lead to excessive memory usage
    and workqueue stalls. For example, when creating multiple dm-snapshot
    targets with a 4K chunk size and then writing to the origin through the
    page cache. Syncing the page cache causes a large number of BIOs to be
    issued to the dm-snapshot origin target, which itself issues an even
    larger (because of the BIO splitting taking place) number of kcopyd
    jobs.
    
    Running the following test, from the device mapper test suite [1],
    
      dmtest run --suite snapshot -n many_snapshots_of_same_volume_N
    
    , with 8 active snapshots, results in the kcopyd job slab cache growing
    to 10G. Depending on the available system RAM this can lead to the OOM
    killer killing user processes:
    
    [463.492878] kthreadd invoked oom-killer: gfp_mask=0x6040c0(GFP_KERNEL|__GFP_COMP),
                  nodemask=(null), order=1, oom_score_adj=0
    [463.492894] kthreadd cpuset=/ mems_allowed=0
    [463.492948] CPU: 7 PID: 2 Comm: kthreadd Not tainted 4.19.0-rc7 #3
    [463.492950] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
    [463.492952] Call Trace:
    [463.492964]  dump_stack+0x7d/0xbb
    [463.492973]  dump_header+0x6b/0x2fc
    [463.492987]  ? lockdep_hardirqs_on+0xee/0x190
    [463.493012]  oom_kill_process+0x302/0x370
    [463.493021]  out_of_memory+0x113/0x560
    [463.493030]  __alloc_pages_slowpath+0xf40/0x1020
    [463.493055]  __alloc_pages_nodemask+0x348/0x3c0
    [463.493067]  cache_grow_begin+0x81/0x8b0
    [463.493072]  ? cache_grow_begin+0x874/0x8b0
    [463.493078]  fallback_alloc+0x1e4/0x280
    [463.493092]  kmem_cache_alloc_node+0xd6/0x370
    [463.493098]  ? copy_process.part.31+0x1c5/0x20d0
    [463.493105]  copy_process.part.31+0x1c5/0x20d0
    [463.493115]  ? __lock_acquire+0x3cc/0x1550
    [463.493121]  ? __switch_to_asm+0x34/0x70
    [463.493129]  ? kthread_create_worker_on_cpu+0x70/0x70
    [463.493135]  ? finish_task_switch+0x90/0x280
    [463.493165]  _do_fork+0xe0/0x6d0
    [463.493191]  ? kthreadd+0x19f/0x220
    [463.493233]  kernel_thread+0x25/0x30
    [463.493235]  kthreadd+0x1bf/0x220
    [463.493242]  ? kthread_create_on_cpu+0x90/0x90
    [463.493248]  ret_from_fork+0x3a/0x50
    [463.493279] Mem-Info:
    [463.493285] active_anon:20631 inactive_anon:4831 isolated_anon:0
    [463.493285]  active_file:80216 inactive_file:80107 isolated_file:435
    [463.493285]  unevictable:0 dirty:51266 writeback:109372 unstable:0
    [463.493285]  slab_reclaimable:31191 slab_unreclaimable:3483521
    [463.493285]  mapped:526 shmem:4903 pagetables:1759 bounce:0
    [463.493285]  free:33623 free_pcp:2392 free_cma:0
    ...
    [463.493489] Unreclaimable slab info:
    [463.493513] Name                      Used          Total
    [463.493522] bio-6                   1028KB       1028KB
    [463.493525] bio-5                   1028KB       1028KB
    [463.493528] dm_snap_pending_exception     236783KB     243789KB
    [463.493531] dm_exception              41KB         42KB
    [463.493534] bio-4                   1216KB       1216KB
    [463.493537] bio-3                 439396KB     439396KB
    [463.493539] kcopyd_job           6973427KB    6973427KB
    ...
    [463.494340] Out of memory: Kill process 1298 (ruby2.3) score 1 or sacrifice child
    [463.494673] Killed process 1298 (ruby2.3) total-vm:435740kB, anon-rss:20180kB, file-rss:4kB, shmem-rss:0kB
    [463.506437] oom_reaper: reaped process 1298 (ruby2.3), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
    
    Moreover, issuing a large number of kcopyd jobs results in kcopyd
    hogging the CPU, while processing them. As a result, processing of work
    items, queued for execution on the same CPU as the currently running
    kcopyd thread, is stalled for long periods of time, hurting performance.
    Running the aforementioned test we get, in dmesg, messages like the
    following:
    
    [67501.194592] BUG: workqueue lockup - pool cpus=4 node=0 flags=0x0 nice=0 stuck for 27s!
    [67501.195586] Showing busy workqueues and worker pools:
    [67501.195591] workqueue events: flags=0x0
    [67501.195597]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195611]     pending: cache_reap
    [67501.195641] workqueue mm_percpu_wq: flags=0x8
    [67501.195645]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195656]     pending: vmstat_update
    [67501.195682] workqueue kblockd: flags=0x18
    [67501.195687]   pwq 5: cpus=2 node=0 flags=0x0 nice=-20 active=1/256
    [67501.195698]     pending: blk_timeout_work
    [67501.195753] workqueue kcopyd: flags=0x8
    [67501.195757]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195768]     pending: do_work [dm_mod]
    [67501.195802] workqueue kcopyd: flags=0x8
    [67501.195806]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195817]     pending: do_work [dm_mod]
    [67501.195834] workqueue kcopyd: flags=0x8
    [67501.195838]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195848]     pending: do_work [dm_mod]
    [67501.195881] workqueue kcopyd: flags=0x8
    [67501.195885]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195896]     pending: do_work [dm_mod]
    [67501.195920] workqueue kcopyd: flags=0x8
    [67501.195924]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=2/256
    [67501.195935]     in-flight: 67:do_work [dm_mod]
    [67501.195945]     pending: do_work [dm_mod]
    [67501.195961] pool 8: cpus=4 node=0 flags=0x0 nice=0 hung=27s workers=3 idle: 129 23765
    
    The root cause for these issues is the way dm-snapshot uses kcopyd. In
    particular, the lack of an explicit or implicit limit to the maximum
    number of in-flight COW jobs. The merging path is not affected because
    it implicitly limits the in-flight kcopyd jobs to one.
    
    Fix these issues by using a semaphore to limit the maximum number of
    in-flight kcopyd jobs. We grab the semaphore before allocating a new
    kcopyd job in start_copy() and start_full_bio() and release it after the
    job finishes in copy_callback().
    
    The initial semaphore value is configurable through a module parameter,
    to allow fine tuning the maximum number of in-flight COW jobs. Setting
    this parameter to zero initializes the semaphore to INT_MAX.
    
    A default value of 2048 maximum in-flight kcopyd jobs was chosen. This
    value was decided experimentally as a trade-off between memory
    consumption, stalling the kernel's workqueues and maintaining a high
    enough throughput.
    
    Re-running the aforementioned test:
    
      * Workqueue stalls are eliminated
      * kcopyd's job slab cache uses a maximum of 130MB
      * The time taken by the test to write to the snapshot-origin target is
        reduced from 05m20.48s to 03m26.38s
    
    [1] https://github.com/jthornber/device-mapper-test-suite
    
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Ilias Tsitsimpis <iliastsi@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4982226e1d2d65794f1cc7e2f2951763548f5ef6
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Wed Oct 31 17:53:09 2018 -0400

    dm kcopyd: Fix bug causing workqueue stalls
    
    [ Upstream commit d7e6b8dfc7bcb3f4f3a18313581f67486a725b52 ]
    
    When using kcopyd to run callbacks through dm_kcopyd_do_callback() or
    submitting copy jobs with a source size of 0, the jobs are pushed
    directly to the complete_jobs list, which could be under processing by
    the kcopyd thread. As a result, the kcopyd thread can continue running
    completed jobs indefinitely, without releasing the CPU, as long as
    someone keeps submitting new completed jobs through the aforementioned
    paths. Processing of work items, queued for execution on the same CPU as
    the currently running kcopyd thread, is thus stalled for excessive
    amounts of time, hurting performance.
    
    Running the following test, from the device mapper test suite [1],
    
      dmtest run --suite snapshot -n parallel_io_to_many_snaps_N
    
    , with 8 active snapshots, we get, in dmesg, messages like the
    following:
    
    [68899.948523] BUG: workqueue lockup - pool cpus=0 node=0 flags=0x0 nice=0 stuck for 95s!
    [68899.949282] Showing busy workqueues and worker pools:
    [68899.949288] workqueue events: flags=0x0
    [68899.949295]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=2/256
    [68899.949306]     pending: vmstat_shepherd, cache_reap
    [68899.949331] workqueue mm_percpu_wq: flags=0x8
    [68899.949337]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949345]     pending: vmstat_update
    [68899.949387] workqueue dm_bufio_cache: flags=0x8
    [68899.949392]   pwq 4: cpus=2 node=0 flags=0x0 nice=0 active=1/256
    [68899.949400]     pending: work_fn [dm_bufio]
    [68899.949423] workqueue kcopyd: flags=0x8
    [68899.949429]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949437]     pending: do_work [dm_mod]
    [68899.949452] workqueue kcopyd: flags=0x8
    [68899.949458]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=2/256
    [68899.949466]     in-flight: 13:do_work [dm_mod]
    [68899.949474]     pending: do_work [dm_mod]
    [68899.949487] workqueue kcopyd: flags=0x8
    [68899.949493]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949501]     pending: do_work [dm_mod]
    [68899.949515] workqueue kcopyd: flags=0x8
    [68899.949521]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949529]     pending: do_work [dm_mod]
    [68899.949541] workqueue kcopyd: flags=0x8
    [68899.949547]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949555]     pending: do_work [dm_mod]
    [68899.949568] pool 0: cpus=0 node=0 flags=0x0 nice=0 hung=95s workers=4 idle: 27130 27223 1084
    
    Fix this by splitting the complete_jobs list into two parts: A user
    facing part, named callback_jobs, and one used internally by kcopyd,
    retaining the name complete_jobs. dm_kcopyd_do_callback() and
    dispatch_job() now push their jobs to the callback_jobs list, which is
    spliced to the complete_jobs list once, every time the kcopyd thread
    wakes up. This prevents kcopyd from hogging the CPU indefinitely and
    causing workqueue stalls.
    
    Re-running the aforementioned test:
    
      * Workqueue stalls are eliminated
      * The maximum writing time among all targets is reduced from 09m37.10s
        to 06m04.85s and the total run time of the test is reduced from
        10m43.591s to 7m19.199s
    
    [1] https://github.com/jthornber/device-mapper-test-suite
    
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Ilias Tsitsimpis <iliastsi@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f7d2b60ce73ca8ac519cfcd9a79274d7239a5e8
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Dec 6 13:52:13 2018 -0300

    perf parse-events: Fix unchecked usage of strncpy()
    
    [ Upstream commit bd8d57fb7e25e9fcf67a9eef5fa13aabe2016e07 ]
    
    The strncpy() function may leave the destination string buffer
    unterminated, better use strlcpy() that we have a __weak fallback
    implementation for systems without it.
    
    This fixes this warning on an Alpine Linux Edge system with gcc 8.2:
    
      util/parse-events.c: In function 'print_symbol_events':
      util/parse-events.c:2465:4: error: 'strncpy' specified bound 100 equals destination size [-Werror=stringop-truncation]
          strncpy(name, syms->symbol, MAX_NAME_LEN);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In function 'print_symbol_events.constprop',
          inlined from 'print_events' at util/parse-events.c:2508:2:
      util/parse-events.c:2465:4: error: 'strncpy' specified bound 100 equals destination size [-Werror=stringop-truncation]
          strncpy(name, syms->symbol, MAX_NAME_LEN);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In function 'print_symbol_events.constprop',
          inlined from 'print_events' at util/parse-events.c:2511:2:
      util/parse-events.c:2465:4: error: 'strncpy' specified bound 100 equals destination size [-Werror=stringop-truncation]
          strncpy(name, syms->symbol, MAX_NAME_LEN);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      cc1: all warnings being treated as errors
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Fixes: 947b4ad1d198 ("perf list: Fix max event string size")
    Link: https://lkml.kernel.org/n/tip-b663e33bm6x8hrkie4uxh7u2@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b20a6d4059ad2941519fd33df3b06252f586614
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Dec 6 11:29:48 2018 -0300

    perf svghelper: Fix unchecked usage of strncpy()
    
    [ Upstream commit 2f5302533f306d5ee87bd375aef9ca35b91762cb ]
    
    The strncpy() function may leave the destination string buffer
    unterminated, better use strlcpy() that we have a __weak fallback
    implementation for systems without it.
    
    In this specific case this would only happen if fgets() was buggy, as
    its man page states that it should read one less byte than the size of
    the destination buffer, so that it can put the nul byte at the end of
    it, so it would never copy 255 non-nul chars, as fgets reads into the
    orig buffer at most 254 non-nul chars and terminates it. But lets just
    switch to strlcpy to keep the original intent and silence the gcc 8.2
    warning.
    
    This fixes this warning on an Alpine Linux Edge system with gcc 8.2:
    
      In function 'cpu_model',
          inlined from 'svg_cpu_box' at util/svghelper.c:378:2:
      util/svghelper.c:337:5: error: 'strncpy' output may be truncated copying 255 bytes from a string of length 255 [-Werror=stringop-truncation]
           strncpy(cpu_m, &buf[13], 255);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Fixes: f48d55ce7871 ("perf: Add a SVG helper library file")
    Link: https://lkml.kernel.org/n/tip-xzkoo0gyr56gej39ltivuh9g@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8734066c0e01e64cc07a1e6184a1f91fab9c44d
Author: Jonas Danielsson <jonas@orbital-systems.com>
Date:   Fri Oct 19 16:40:05 2018 +0200

    mmc: atmel-mci: do not assume idle after atmci_request_end
    
    [ Upstream commit ae460c115b7aa50c9a36cf78fced07b27962c9d0 ]
    
    On our AT91SAM9260 board we use the same sdio bus for wifi and for the
    sd card slot. This caused the atmel-mci to give the following splat on
    the serial console:
    
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 538 at drivers/mmc/host/atmel-mci.c:859 atmci_send_command+0x24/0x44
      Modules linked in:
      CPU: 0 PID: 538 Comm: mmcqd/0 Not tainted 4.14.76 #14
      Hardware name: Atmel AT91SAM9
      [<c000fccc>] (unwind_backtrace) from [<c000d3dc>] (show_stack+0x10/0x14)
      [<c000d3dc>] (show_stack) from [<c0017644>] (__warn+0xd8/0xf4)
      [<c0017644>] (__warn) from [<c0017704>] (warn_slowpath_null+0x1c/0x24)
      [<c0017704>] (warn_slowpath_null) from [<c033bb9c>] (atmci_send_command+0x24/0x44)
      [<c033bb9c>] (atmci_send_command) from [<c033e984>] (atmci_start_request+0x1f4/0x2dc)
      [<c033e984>] (atmci_start_request) from [<c033f3b4>] (atmci_request+0xf0/0x164)
      [<c033f3b4>] (atmci_request) from [<c0327108>] (mmc_start_request+0x280/0x2d0)
      [<c0327108>] (mmc_start_request) from [<c032800c>] (mmc_start_areq+0x230/0x330)
      [<c032800c>] (mmc_start_areq) from [<c03366f8>] (mmc_blk_issue_rw_rq+0xc4/0x310)
      [<c03366f8>] (mmc_blk_issue_rw_rq) from [<c03372c4>] (mmc_blk_issue_rq+0x118/0x5ac)
      [<c03372c4>] (mmc_blk_issue_rq) from [<c033781c>] (mmc_queue_thread+0xc4/0x118)
      [<c033781c>] (mmc_queue_thread) from [<c002daf8>] (kthread+0x100/0x118)
      [<c002daf8>] (kthread) from [<c000a580>] (ret_from_fork+0x14/0x34)
      ---[ end trace 594371ddfa284bd6 ]---
    
    This is:
      WARN_ON(host->cmd);
    
    This was fixed on our board by letting atmci_request_end determine what
    state we are in. Instead of unconditionally setting it to STATE_IDLE on
    STATE_END_REQUEST.
    
    Signed-off-by: Jonas Danielsson <jonas@orbital-systems.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0787de817878dcb147dc2f73bd141219f0b20ab
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 11 20:00:45 2018 +0900

    kconfig: fix memory leak when EOF is encountered in quotation
    
    [ Upstream commit fbac5977d81cb2b2b7e37b11c459055d9585273c ]
    
    An unterminated string literal followed by new line is passed to the
    parser (with "multi-line strings not supported" warning shown), then
    handled properly there.
    
    On the other hand, an unterminated string literal at end of file is
    never passed to the parser, then results in memory leak.
    
    [Test Code]
    
      ----------(Kconfig begin)----------
      source "Kconfig.inc"
    
      config A
              bool "a"
      -----------(Kconfig end)-----------
    
      --------(Kconfig.inc begin)--------
      config B
              bool "b\No new line at end of file
      ---------(Kconfig.inc end)---------
    
    [Summary from Valgrind]
    
      Before the fix:
    
        LEAK SUMMARY:
           definitely lost: 16 bytes in 1 blocks
           ...
    
      After the fix:
    
        LEAK SUMMARY:
           definitely lost: 0 bytes in 0 blocks
           ...
    
    Eliminate the memory leak path by handling this case. Of course, such
    a Kconfig file is wrong already, so I will add an error message later.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cd9a94403665fc5510731d1004b465faf66c1e1
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Nov 15 15:30:26 2018 +0100

    clk: imx6q: reset exclusive gates on init
    
    [ Upstream commit f7542d817733f461258fd3a47d77da35b2d9fc81 ]
    
    The exclusive gates may be set up in the wrong way by software running
    before the clock driver comes up. In that case the exclusive setup is
    locked in its initial state, as the complementary function can't be
    activated without disabling the initial setup first.
    
    To avoid this lock situation, reset the exclusive gates to the off
    state and allow the kernel to provide the proper setup.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Dong Aisheng <Aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ace487a93fb1e597b3859cf821c2e782a91ebb6
Author: David Disseldorp <ddiss@suse.de>
Date:   Wed Dec 5 13:18:34 2018 +0100

    scsi: target: use consistent left-aligned ASCII INQUIRY data
    
    [ Upstream commit 0de263577de5d5e052be5f4f93334e63cc8a7f0b ]
    
    spc5r17.pdf specifies:
    
      4.3.1 ASCII data field requirements
      ASCII data fields shall contain only ASCII printable characters (i.e.,
      code values 20h to 7Eh) and may be terminated with one or more ASCII null
      (00h) characters.  ASCII data fields described as being left-aligned
      shall have any unused bytes at the end of the field (i.e., highest
      offset) and the unused bytes shall be filled with ASCII space characters
      (20h).
    
    LIO currently space-pads the T10 VENDOR IDENTIFICATION and PRODUCT
    IDENTIFICATION fields in the standard INQUIRY data. However, the PRODUCT
    REVISION LEVEL field in the standard INQUIRY data as well as the T10 VENDOR
    IDENTIFICATION field in the INQUIRY Device Identification VPD Page are
    zero-terminated/zero-padded.
    
    Fix this inconsistency by using space-padding for all of the above fields.
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Bryant G. Ly <bly@catalogicsoftware.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a571a9e9d117a6466480bead1ce5ae956f5e828
Author: yupeng <yupeng0921@gmail.com>
Date:   Wed Dec 5 18:56:28 2018 -0800

    net: call sk_dst_reset when set SO_DONTROUTE
    
    [ Upstream commit 0fbe82e628c817e292ff588cd5847fc935e025f2 ]
    
    after set SO_DONTROUTE to 1, the IP layer should not route packets if
    the dest IP address is not in link scope. But if the socket has cached
    the dst_entry, such packets would be routed until the sk_dst_cache
    expires. So we should clean the sk_dst_cache when a user set
    SO_DONTROUTE option. Below are server/client python scripts which
    could reprodue this issue:
    
    server side code:
    
    ==========================================================================
    import socket
    import struct
    import time
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 9000))
    s.listen(1)
    sock, addr = s.accept()
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_DONTROUTE, struct.pack('i', 1))
    while True:
        sock.send(b'foo')
        time.sleep(1)
    ==========================================================================
    
    client side code:
    ==========================================================================
    import socket
    import time
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('server_address', 9000))
    while True:
        data = s.recv(1024)
        print(data)
    ==========================================================================
    
    Signed-off-by: yupeng <yupeng0921@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90463551f5c293d7653063bcf210b2641f49ff82
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Oct 18 16:03:06 2018 -0400

    media: firewire: Fix app_info parameter type in avc_ca{,_app}_info
    
    [ Upstream commit b2e9a4eda11fd2cb1e6714e9ad3f455c402568ff ]
    
    Clang warns:
    
    drivers/media/firewire/firedtv-avc.c:999:45: warning: implicit
    conversion from 'int' to 'char' changes value from 159 to -97
    [-Wconstant-conversion]
            app_info[0] = (EN50221_TAG_APP_INFO >> 16) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    drivers/media/firewire/firedtv-avc.c:1000:45: warning: implicit
    conversion from 'int' to 'char' changes value from 128 to -128
    [-Wconstant-conversion]
            app_info[1] = (EN50221_TAG_APP_INFO >>  8) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    drivers/media/firewire/firedtv-avc.c:1040:44: warning: implicit
    conversion from 'int' to 'char' changes value from 159 to -97
    [-Wconstant-conversion]
            app_info[0] = (EN50221_TAG_CA_INFO >> 16) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    drivers/media/firewire/firedtv-avc.c:1041:44: warning: implicit
    conversion from 'int' to 'char' changes value from 128 to -128
    [-Wconstant-conversion]
            app_info[1] = (EN50221_TAG_CA_INFO >>  8) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    4 warnings generated.
    
    Change app_info's type to unsigned char to match the type of the
    member msg in struct ca_msg, which is the only thing passed into the
    app_info parameter in this function.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/105
    
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15a6405ca56d36513b167afd936ef864b91f03f8
Author: Breno Leitao <leitao@debian.org>
Date:   Fri Nov 23 14:30:11 2018 -0200

    powerpc/pseries/cpuidle: Fix preempt warning
    
    [ Upstream commit 2b038cbc5fcf12a7ee1cc9bfd5da1e46dacdee87 ]
    
    When booting a pseries kernel with PREEMPT enabled, it dumps the
    following warning:
    
       BUG: using smp_processor_id() in preemptible [00000000] code: swapper/0/1
       caller is pseries_processor_idle_init+0x5c/0x22c
       CPU: 13 PID: 1 Comm: swapper/0 Not tainted 4.20.0-rc3-00090-g12201a0128bc-dirty #828
       Call Trace:
       [c000000429437ab0] [c0000000009c8878] dump_stack+0xec/0x164 (unreliable)
       [c000000429437b00] [c0000000005f2f24] check_preemption_disabled+0x154/0x160
       [c000000429437b90] [c000000000cab8e8] pseries_processor_idle_init+0x5c/0x22c
       [c000000429437c10] [c000000000010ed4] do_one_initcall+0x64/0x300
       [c000000429437ce0] [c000000000c54500] kernel_init_freeable+0x3f0/0x500
       [c000000429437db0] [c0000000000112dc] kernel_init+0x2c/0x160
       [c000000429437e20] [c00000000000c1d0] ret_from_kernel_thread+0x5c/0x6c
    
    This happens because the code calls get_lppaca() which calls
    get_paca() and it checks if preemption is disabled through
    check_preemption_disabled().
    
    Preemption should be disabled because the per CPU variable may make no
    sense if there is a preemption (and a CPU switch) after it reads the
    per CPU data and when it is used.
    
    In this device driver specifically, it is not a problem, because this
    code just needs to have access to one lppaca struct, and it does not
    matter if it is the current per CPU lppaca struct or not (i.e. when
    there is a preemption and a CPU migration).
    
    That said, the most appropriate fix seems to be related to avoiding
    the debug_smp_processor_id() call at get_paca(), instead of calling
    preempt_disable() before get_paca().
    
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec7f99261da9a20d63cbd273511a11a2efe698f2
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Sat Nov 3 16:38:18 2018 -0700

    pstore/ram: Do not treat empty buffers as valid
    
    [ Upstream commit 30696378f68a9e3dad6bfe55938b112e72af00c2 ]
    
    The ramoops backend currently calls persistent_ram_save_old() even
    if a buffer is empty. While this appears to work, it is does not seem
    like the right thing to do and could lead to future bugs so lets avoid
    that. It also prevents misleading prints in the logs which claim the
    buffer is valid.
    
    I got something like:
    
            found existing buffer, size 0, start 0
    
    When I was expecting:
    
            no valid data in buffer (sig = ...)
    
    This bails out early (and reports with pr_debug()), since it's an
    acceptable state.
    
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Co-developed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa1e3a488c3d9a6be13fb575de22625d476c98f6
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Fri Oct 19 03:30:20 2018 -0500

    jffs2: Fix use of uninitialized delayed_work, lockdep breakage
    
    [ Upstream commit a788c5272769ddbcdbab297cf386413eeac04463 ]
    
    jffs2_sync_fs makes the assumption that if CONFIG_JFFS2_FS_WRITEBUFFER
    is defined then a write buffer is available and has been initialized.
    However, this does is not the case when the mtd device has no
    out-of-band buffer:
    
    int jffs2_nand_flash_setup(struct jffs2_sb_info *c)
    {
            if (!c->mtd->oobsize)
                    return 0;
    ...
    
    The resulting call to cancel_delayed_work_sync passing a uninitialized
    (but zeroed) delayed_work struct forces lockdep to become disabled.
    
    [   90.050639] overlayfs: upper fs does not support tmpfile.
    [   90.652264] INFO: trying to register non-static key.
    [   90.662171] the code is fine but needs lockdep annotation.
    [   90.673090] turning off the locking correctness validator.
    [   90.684021] CPU: 0 PID: 1762 Comm: mount_root Not tainted 4.14.63 #0
    [   90.696672] Stack : 00000000 00000000 80d8f6a2 00000038 805f0000 80444600 8fe364f4 805dfbe7
    [   90.713349]         80563a30 000006e2 8068370c 00000001 00000000 00000001 8e2fdc48 ffffffff
    [   90.730020]         00000000 00000000 80d90000 00000000 00000106 00000000 6465746e 312e3420
    [   90.746690]         6b636f6c 03bf0000 f8000000 20676e69 00000000 80000000 00000000 8e2c2a90
    [   90.763362]         80d90000 00000001 00000000 8e2c2a90 00000003 80260dc0 08052098 80680000
    [   90.780033]         ...
    [   90.784902] Call Trace:
    [   90.789793] [<8000f0d8>] show_stack+0xb8/0x148
    [   90.798659] [<8005a000>] register_lock_class+0x270/0x55c
    [   90.809247] [<8005cb64>] __lock_acquire+0x13c/0xf7c
    [   90.818964] [<8005e314>] lock_acquire+0x194/0x1dc
    [   90.828345] [<8003f27c>] flush_work+0x200/0x24c
    [   90.837374] [<80041dfc>] __cancel_work_timer+0x158/0x210
    [   90.847958] [<801a8770>] jffs2_sync_fs+0x20/0x54
    [   90.857173] [<80125cf4>] iterate_supers+0xf4/0x120
    [   90.866729] [<80158fc4>] sys_sync+0x44/0x9c
    [   90.875067] [<80014424>] syscall_common+0x34/0x58
    
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Reviewed-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84a9b63d087c123f433b631f2847455287e1165e
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Tue Nov 13 22:42:44 2018 +0000

    MIPS: SiByte: Enable swiotlb for SWARM, LittleSur and BigSur
    
    [ Upstream commit e4849aff1e169b86c561738daf8ff020e9de1011 ]
    
    The Broadcom SiByte BCM1250, BCM1125, and BCM1125H SOCs have an onchip
    DRAM controller that supports memory amounts of up to 16GiB, and due to
    how the address decoder has been wired in the SOC any memory beyond 1GiB
    is actually mapped starting from 4GiB physical up, that is beyond the
    32-bit addressable limit[1].  Consequently if the maximum amount of
    memory has been installed, then it will span up to 19GiB.
    
    Many of the evaluation boards we support that are based on one of these
    SOCs have their memory soldered and the amount present fits in the
    32-bit address range.  The BCM91250A SWARM board however has actual DIMM
    slots and accepts, depending on the peripherals revision of the SOC, up
    to 4GiB or 8GiB of memory in commercially available JEDEC modules[2].
    I believe this is also the case with the BCM91250C2 LittleSur board.
    This means that up to either 3GiB or 7GiB of memory requires 64-bit
    addressing to access.
    
    I believe the BCM91480B BigSur board, which has the BCM1480 SOC instead,
    accepts at least as much memory, although I have no documentation or
    actual hardware available to verify that.
    
    Both systems have PCI slots installed for use by any PCI option boards,
    including ones that only support 32-bit addressing (additionally the
    32-bit PCI host bridge of the BCM1250, BCM1125, and BCM1125H SOCs limits
    addressing to 32-bits), and there is no IOMMU available.  Therefore for
    PCI DMA to work in the presence of memory beyond enable swiotlb for the
    affected systems.
    
    All the other SOC onchip DMA devices use 40-bit addressing and therefore
    can address the whole memory, so only enable swiotlb if PCI support and
    support for DMA beyond 4GiB have been both enabled in the configuration
    of the kernel.
    
    This shows up as follows:
    
    Broadcom SiByte BCM1250 B2 @ 800 MHz (SB1 rev 2)
    Board type: SiByte BCM91250A (SWARM)
    Determined physical RAM map:
     memory: 000000000fe7fe00 @ 0000000000000000 (usable)
     memory: 000000001ffffe00 @ 0000000080000000 (usable)
     memory: 000000000ffffe00 @ 00000000c0000000 (usable)
     memory: 0000000087fffe00 @ 0000000100000000 (usable)
    software IO TLB: mapped [mem 0xcbffc000-0xcfffc000] (64MB)
    
    in the bootstrap log and removes failures like these:
    
    defxx 0000:02:00.0: dma_direct_map_page: overflow 0x0000000185bc6080+4608 of device mask ffffffff bus mask 0
    fddi0: Receive buffer allocation failed
    fddi0: Adapter open failed!
    IP-Config: Failed to open fddi0
    defxx 0000:09:08.0: dma_direct_map_page: overflow 0x0000000185bc6080+4608 of device mask ffffffff bus mask 0
    fddi1: Receive buffer allocation failed
    fddi1: Adapter open failed!
    IP-Config: Failed to open fddi1
    
    when memory beyond 4GiB is handed out to devices that can only do 32-bit
    addressing.
    
    This updates commit cce335ae47e2 ("[MIPS] 64-bit Sibyte kernels need
    DMA32.").
    
    References:
    
    [1] "BCM1250/BCM1125/BCM1125H User Manual", Revision 1250_1125-UM100-R,
        Broadcom Corporation, 21 Oct 2002, Section 3: "System Overview",
        "Memory Map", pp. 34-38
    
    [2] "BCM91250A User Manual", Revision 91250A-UM100-R, Broadcom
        Corporation, 18 May 2004, Section 3: "Physical Description",
        "Supported DRAM", p. 23
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    [paul.burton@mips.com: Remove GPL text from dma.c; SPDX tag covers it]
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Patchwork: https://patchwork.linux-mips.org/patch/21108/
    References: cce335ae47e2 ("[MIPS] 64-bit Sibyte kernels need DMA32.")
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9eb72f770b84065d80ef4ae14c8bb8ed7b44156
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Jan 2 14:45:07 2019 +0800

    r8169: Add support for new Realtek Ethernet
    
    [ Upstream commit 36352991835ce99e46b4441dd0eb6980f9a83e8f ]
    
    There are two new Realtek Ethernet devices which are re-branded r8168h.
    Add the IDs to to support them.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reviewed-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e23a158230852272cb9ade03b4a0f4cba2682598
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Fri Nov 23 07:05:58 2018 -0500

    media: vb2: be sure to unlock mutex on errors
    
    commit c06ef2e9acef4cda1feee2ce055b8086e33d251a upstream.
    
    As reported by smatch:
    drivers/media/common/videobuf2/videobuf2-core.c: drivers/media/common/videobuf2/videobuf2-core.c:2159 vb2_mmap() warn: inconsistent returns 'mutex:&q->mmap_lock'.
      Locked on:   line 2148
      Unlocked on: line 2100
                   line 2108
                   line 2113
                   line 2118
                   line 2156
                   line 2159
    
    There is one error condition that doesn't unlock a mutex.
    
    Fixes: cd26d1c4d1bc ("media: vb2: vb2_mmap: move lock up")
    Reviewed-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 661fda25724868bef8224237e243585e1d3b5e86
Author: Ivan Mironov <mironov.ivan@gmail.com>
Date:   Tue Jan 8 12:23:53 2019 +0500

    drm/fb-helper: Ignore the value of fb_var_screeninfo.pixclock
    
    commit 66a8d5bfb518f9f12d47e1d2dce1732279f9451e upstream.
    
    Strict requirement of pixclock to be zero breaks support of SDL 1.2
    which contains hardcoded table of supported video modes with non-zero
    pixclock values[1].
    
    To better understand which pixclock values are considered valid and how
    driver should handle these values, I briefly examined few existing fbdev
    drivers and documentation in Documentation/fb/. And it looks like there
    are no strict rules on that and actual behaviour varies:
    
            * some drivers treat (pixclock == 0) as "use defaults" (uvesafb.c);
            * some treat (pixclock == 0) as invalid value which leads to
              -EINVAL (clps711x-fb.c);
            * some pass converted pixclock value to hardware (uvesafb.c);
            * some are trying to find nearest value from predefined table
              (vga16fb.c, video_gx.c).
    
    Given this, I believe that it should be safe to just ignore this value if
    changing is not supported. It seems that any portable fbdev application
    which was not written only for one specific device working under one
    specific kernel version should not rely on any particular behaviour of
    pixclock anyway.
    
    However, while enabling SDL1 applications to work out of the box when
    there is no /etc/fb.modes with valid settings, this change affects the
    video mode choosing logic in SDL. Depending on current screen
    resolution, contents of /etc/fb.modes and resolution requested by
    application, this may lead to user-visible difference (not always):
    image will be displayed in a right way, but it will be aligned to the
    left instead of center. There is no "right behaviour" here as well, as
    emulated fbdev, opposing to old fbdev drivers, simply ignores any
    requsts of video mode changes with resolutions smaller than current.
    
    The easiest way to reproduce this problem is to install sdl-sopwith[2],
    remove /etc/fb.modes file if it exists, and then try to run sopwith
    from console without X. At least in Fedora 29, sopwith may be simply
    installed from standard repositories.
    
    [1] SDL 1.2.15 source code, src/video/fbcon/SDL_fbvideo.c, vesa_timings
    [2] http://sdl-sopwith.sourceforge.net/
    
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Cc: stable@vger.kernel.org
    Fixes: 79e539453b34e ("DRM: i915: add mode setting support")
    Fixes: 771fe6b912fca ("drm/radeon: introduce kernel modesetting for radeon hardware")
    Fixes: 785b93ef8c309 ("drm/kms: move driver specific fb common code to helper functions (v2)")
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190108072353.28078-3-mironov.ivan@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a17189a0e107ee316b3fff61217f5a037357d65e
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu Nov 8 14:01:02 2018 +0100

    block/loop: Use global lock for ioctl() operation.
    
    commit 310ca162d779efee8a2dc3731439680f3e9c1e86 upstream.
    
    syzbot is reporting NULL pointer dereference [1] which is caused by
    race condition between ioctl(loop_fd, LOOP_CLR_FD, 0) versus
    ioctl(other_loop_fd, LOOP_SET_FD, loop_fd) due to traversing other
    loop devices at loop_validate_file() without holding corresponding
    lo->lo_ctl_mutex locks.
    
    Since ioctl() request on loop devices is not frequent operation, we don't
    need fine grained locking. Let's use global lock in order to allow safe
    traversal at loop_validate_file().
    
    Note that syzbot is also reporting circular locking dependency between
    bdev->bd_mutex and lo->lo_ctl_mutex [2] which is caused by calling
    blkdev_reread_part() with lock held. This patch does not address it.
    
    [1] https://syzkaller.appspot.com/bug?id=f3cfe26e785d85f9ee259f385515291d21bd80a3
    [2] https://syzkaller.appspot.com/bug?id=bf154052f0eea4bc7712499e4569505907d15889
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+bf89c128e05dd6c62523@syzkaller.appspotmail.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca554dae5b07f4c8db504e010a0f3e722177e12c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jan 14 18:34:02 2019 +0800

    sctp: allocate sctp_sockaddr_entry with kzalloc
    
    commit 400b8b9a2a17918f8ce00786f596f530e7f30d50 upstream.
    
    The similar issue as fixed in Commit 4a2eb0c37b47 ("sctp: initialize
    sin6_flowinfo for ipv6 addrs in sctp_inet6addr_event") also exists
    in sctp_inetaddr_event, as Alexander noticed.
    
    To fix it, allocate sctp_sockaddr_entry with kzalloc for both sctp
    ipv4 and ipv6 addresses, as does in sctp_v4/6_copy_addrlist().
    
    Reported-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reported-by: syzbot+ae0c70c0c2d40c51bb92@syzkaller.appspotmail.com
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f643372c915bbb9d11787b785890642fce3c1ab2
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Wed Jan 9 10:55:10 2019 -0500

    selinux: fix GPF on invalid policy
    
    commit 5b0e7310a2a33c06edc7eb81ffc521af9b2c5610 upstream.
    
    levdatum->level can be NULL if we encounter an error while loading
    the policy during sens_read prior to initializing it.  Make sure
    sens_destroy handles that case correctly.
    
    Reported-by: syzbot+6664500f0f18f07a5c0e@syzkaller.appspotmail.com
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8554867473096389ca0f5b75ee6a7eb9a965eb76
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Dec 20 10:35:11 2018 -0500

    sunrpc: handle ENOMEM in rpcb_getport_async
    
    commit 81c88b18de1f11f70c97f28ced8d642c00bb3955 upstream.
    
    If we ignore the error we'll hit a null dereference a little later.
    
    Reported-by: syzbot+4b98281f2401ab849f4b@syzkaller.appspotmail.com
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit babd8d8ca362ce44a2c9aaa9143a4b23e135be91
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Tue Nov 13 09:06:46 2018 -0500

    media: vb2: vb2_mmap: move lock up
    
    commit cd26d1c4d1bc947b56ae404998ae2276df7b39b7 upstream.
    
    If a filehandle is dup()ped, then it is possible to close it from one fd
    and call mmap from the other. This creates a race condition in vb2_mmap
    where it is using queue data that __vb2_queue_free (called from close())
    is in the process of releasing.
    
    By moving up the mutex_lock(mmap_lock) in vb2_mmap this race is avoided
    since __vb2_queue_free is called with the same mutex locked. So vb2_mmap
    now reads consistent buffer data.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Reported-by: syzbot+be93025dd45dccd8923c@syzkaller.appspotmail.com
    Signed-off-by: Hans Verkuil <hansverk@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c2350d7ef6b0e5e237701dee4038b7ca933d82a
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Oct 29 13:32:38 2018 -0400

    media: vivid: set min width/height to a value > 0
    
    commit 9729d6d282a6d7ce88e64c9119cecdf79edf4e88 upstream.
    
    The capture DV timings capabilities allowed for a minimum width and
    height of 0. So passing a timings struct with 0 values is allowed
    and will later cause a division by zero.
    
    Ensure that the width and height must be >= 16 to avoid this.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+57c3d83d71187054d56f@syzkaller.appspotmail.com
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16e187691b476fdd8d2866994e1e01077bed43dc
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Oct 29 06:15:31 2018 -0400

    media: vivid: fix error handling of kthread_run
    
    commit 701f49bc028edb19ffccd101997dd84f0d71e279 upstream.
    
    kthread_run returns an error pointer, but elsewhere in the code
    dev->kthread_vid_cap/out is checked against NULL.
    
    If kthread_run returns an error, then set the pointer to NULL.
    
    I chose this method over changing all kthread_vid_cap/out tests
    elsewhere since this is more robust.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+53d5b2df0d9744411e2e@syzkaller.appspotmail.com
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c089cbb7c47f485399af4f41b22b2f9c3de18c88
Author: Vlad Tsyrklevich <vlad@tsyrklevich.net>
Date:   Fri Jan 11 14:34:38 2019 +0100

    omap2fb: Fix stack memory disclosure
    
    commit a01421e4484327fe44f8e126793ed5a48a221e24 upstream.
    
    Using [1] for static analysis I found that the OMAPFB_QUERY_PLANE,
    OMAPFB_GET_COLOR_KEY, OMAPFB_GET_DISPLAY_INFO, and OMAPFB_GET_VRAM_INFO
    cases could all leak uninitialized stack memory--either due to
    uninitialized padding or 'reserved' fields.
    
    Fix them by clearing the shared union used to store copied out data.
    
    [1] https://github.com/vlad902/kernel-uninitialized-memory-checker
    
    Signed-off-by: Vlad Tsyrklevich <vlad@tsyrklevich.net>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Fixes: b39a982ddecf ("OMAP: DSS2: omapfb driver")
    Cc: security@kernel.org
    [b.zolnierkie: prefix patch subject with "omap2fb: "]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f884727597e0fe19e650c6683cf365921d808eb
Author: YunQiang Su <ysu@wavecomp.com>
Date:   Tue Jan 8 13:45:10 2019 +0800

    Disable MSI also when pcie-octeon.pcie_disable on
    
    commit a214720cbf50cd8c3f76bbb9c3f5c283910e9d33 upstream.
    
    Octeon has an boot-time option to disable pcie.
    
    Since MSI depends on PCI-E, we should also disable MSI also with
    this option is on in order to avoid inadvertently accessing PCIe
    registers.
    
    Signed-off-by: YunQiang Su <ysu@wavecomp.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: pburton@wavecomp.com
    Cc: linux-mips@vger.kernel.org
    Cc: aaro.koskinen@iki.fi
    Cc: stable@vger.kernel.org # v3.3+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14e1fc9488db174e66a53b8cdae4d88349d4b92c
Author: Jonathan Hunter <jonathanh@nvidia.com>
Date:   Tue Nov 13 08:56:31 2018 +0000

    mfd: tps6586x: Handle interrupts on suspend
    
    commit ac4ca4b9f4623ba5e1ea7a582f286567c611e027 upstream.
    
    The tps6586x driver creates an irqchip that is used by its various child
    devices for managing interrupts. The tps6586x-rtc device is one of its
    children that uses the tps6586x irqchip. When using the tps6586x-rtc as
    a wake-up device from suspend, the following is seen:
    
     PM: Syncing filesystems ... done.
     Freezing user space processes ... (elapsed 0.001 seconds) done.
     OOM killer disabled.
     Freezing remaining freezable tasks ... (elapsed 0.000 seconds) done.
     Disabling non-boot CPUs ...
     Entering suspend state LP1
     Enabling non-boot CPUs ...
     CPU1 is up
     tps6586x 3-0034: failed to read interrupt status
     tps6586x 3-0034: failed to read interrupt status
    
    The reason why the tps6586x interrupt status cannot be read is because
    the tps6586x interrupt is not masked during suspend and when the
    tps6586x-rtc interrupt occurs, to wake-up the device, the interrupt is
    seen before the i2c controller has been resumed in order to read the
    tps6586x interrupt status.
    
    The tps6586x-rtc driver sets it's interrupt as a wake-up source during
    suspend, which gets propagated to the parent tps6586x interrupt.
    However, the tps6586x-rtc driver cannot disable it's interrupt during
    suspend otherwise we would never be woken up and so the tps6586x must
    disable it's interrupt instead.
    
    Prevent the tps6586x interrupt handler from executing on exiting suspend
    before the i2c controller has been resumed by disabling the tps6586x
    interrupt on entering suspend and re-enabling it on resuming from
    suspend.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f5685a49afe2a2732d540bbe68e571b162e73bf
Author: Ivan Mironov <mironov.ivan@gmail.com>
Date:   Sun Dec 23 12:41:58 2018 +0500

    scsi: sd: Fix cache_type_store()
    
    commit 44759979a49bfd2d20d789add7fa81a21eb1a4ab upstream.
    
    Changing of caching mode via /sys/devices/.../scsi_disk/.../cache_type may
    fail if device responds to MODE SENSE command with DPOFUA flag set, and
    then checks this flag to be not set on MODE SELECT command.
    
    In this scenario, when trying to change cache_type, write always fails:
    
            # echo "none" >cache_type
            bash: echo: write error: Invalid argument
    
    And following appears in dmesg:
    
            [13007.865745] sd 1:0:1:0: [sda] Sense Key : Illegal Request [current]
            [13007.865753] sd 1:0:1:0: [sda] Add. Sense: Invalid field in parameter list
    
    From SBC-4 r15, 6.5.1 "Mode pages overview", description of DEVICE-SPECIFIC
    PARAMETER field in the mode parameter header:
            ...
            The write protect (WP) bit for mode data sent with a MODE SELECT
            command shall be ignored by the device server.
            ...
            The DPOFUA bit is reserved for mode data sent with a MODE SELECT
            command.
            ...
    
    The remaining bits in the DEVICE-SPECIFIC PARAMETER byte are also reserved
    and shall be set to zero.
    
    [mkp: shuffled commentary to commit description]
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d90b262c51ce9baa7ec0086a2cc252062a96d606
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Jan 16 10:31:09 2019 -0800

    Yama: Check for pid death before checking ancestry
    
    commit 9474f4e7cd71a633fa1ef93b7daefd44bbdfd482 upstream.
    
    It's possible that a pid has died before we take the rcu lock, in which
    case we can't walk the ancestry list as it may be detached. Instead, check
    for death first before doing the walk.
    
    Reported-by: syzbot+a9ac39bf55329e206219@syzkaller.appspotmail.com
    Fixes: 2d514487faf1 ("security: Yama LSM")
    Cc: stable@vger.kernel.org
    Suggested-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca225877ef6ec1a3b319f98b583341760f044f76
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Nov 21 14:05:45 2018 -0500

    btrfs: wait on ordered extents on abort cleanup
    
    commit 74d5d229b1bf60f93bff244b2dfc0eb21ec32a07 upstream.
    
    If we flip read-only before we initiate writeback on all dirty pages for
    ordered extents we've created then we'll have ordered extents left over
    on umount, which results in all sorts of bad things happening.  Fix this
    by making sure we wait on ordered extents if we have to do the aborted
    transaction cleanup stuff.
    
    generic/475 can produce this warning:
    
     [ 8531.177332] WARNING: CPU: 2 PID: 11997 at fs/btrfs/disk-io.c:3856 btrfs_free_fs_root+0x95/0xa0 [btrfs]
     [ 8531.183282] CPU: 2 PID: 11997 Comm: umount Tainted: G        W 5.0.0-rc1-default+ #394
     [ 8531.185164] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),BIOS rel-1.11.2-0-gf9626cc-prebuilt.qemu-project.org 04/01/2014
     [ 8531.187851] RIP: 0010:btrfs_free_fs_root+0x95/0xa0 [btrfs]
     [ 8531.193082] RSP: 0018:ffffb1ab86163d98 EFLAGS: 00010286
     [ 8531.194198] RAX: ffff9f3449494d18 RBX: ffff9f34a2695000 RCX:0000000000000000
     [ 8531.195629] RDX: 0000000000000002 RSI: 0000000000000001 RDI:0000000000000000
     [ 8531.197315] RBP: ffff9f344e930000 R08: 0000000000000001 R09:0000000000000000
     [ 8531.199095] R10: 0000000000000000 R11: ffff9f34494d4ff8 R12:ffffb1ab86163dc0
     [ 8531.200870] R13: ffff9f344e9300b0 R14: ffffb1ab86163db8 R15:0000000000000000
     [ 8531.202707] FS:  00007fc68e949fc0(0000) GS:ffff9f34bd800000(0000)knlGS:0000000000000000
     [ 8531.204851] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [ 8531.205942] CR2: 00007ffde8114dd8 CR3: 000000002dfbd000 CR4:00000000000006e0
     [ 8531.207516] Call Trace:
     [ 8531.208175]  btrfs_free_fs_roots+0xdb/0x170 [btrfs]
     [ 8531.210209]  ? wait_for_completion+0x5b/0x190
     [ 8531.211303]  close_ctree+0x157/0x350 [btrfs]
     [ 8531.212412]  generic_shutdown_super+0x64/0x100
     [ 8531.213485]  kill_anon_super+0x14/0x30
     [ 8531.214430]  btrfs_kill_super+0x12/0xa0 [btrfs]
     [ 8531.215539]  deactivate_locked_super+0x29/0x60
     [ 8531.216633]  cleanup_mnt+0x3b/0x70
     [ 8531.217497]  task_work_run+0x98/0xc0
     [ 8531.218397]  exit_to_usermode_loop+0x83/0x90
     [ 8531.219324]  do_syscall_64+0x15b/0x180
     [ 8531.220192]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
     [ 8531.221286] RIP: 0033:0x7fc68e5e4d07
     [ 8531.225621] RSP: 002b:00007ffde8116608 EFLAGS: 00000246 ORIG_RAX:00000000000000a6
     [ 8531.227512] RAX: 0000000000000000 RBX: 00005580c2175970 RCX:00007fc68e5e4d07
     [ 8531.229098] RDX: 0000000000000001 RSI: 0000000000000000 RDI:00005580c2175b80
     [ 8531.230730] RBP: 0000000000000000 R08: 00005580c2175ba0 R09:00007ffde8114e80
     [ 8531.232269] R10: 0000000000000000 R11: 0000000000000246 R12:00005580c2175b80
     [ 8531.233839] R13: 00007fc68eac61c4 R14: 00005580c2175a68 R15:0000000000000000
    
    Leaving a tree in the rb-tree:
    
    3853 void btrfs_free_fs_root(struct btrfs_root *root)
    3854 {
    3855         iput(root->ino_cache_inode);
    3856         WARN_ON(!RB_EMPTY_ROOT(&root->inode_tree));
    
    CC: stable@vger.kernel.org
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    [ add stacktrace ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98d2b2486aea705806f72626e02f29b8d6b8aa68
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Dec 16 23:23:22 2018 -0800

    crypto: authenc - fix parsing key with misaligned rta_len
    
    commit 8f9c469348487844328e162db57112f7d347c49f upstream.
    
    Keys for "authenc" AEADs are formatted as an rtattr containing a 4-byte
    'enckeylen', followed by an authentication key and an encryption key.
    crypto_authenc_extractkeys() parses the key to find the inner keys.
    
    However, it fails to consider the case where the rtattr's payload is
    longer than 4 bytes but not 4-byte aligned, and where the key ends
    before the next 4-byte aligned boundary.  In this case, 'keylen -=
    RTA_ALIGN(rta->rta_len);' underflows to a value near UINT_MAX.  This
    causes a buffer overread and crash during crypto_ahash_setkey().
    
    Fix it by restricting the rtattr payload to the expected size.
    
    Reproducer using AF_ALG:
    
            #include <linux/if_alg.h>
            #include <linux/rtnetlink.h>
            #include <sys/socket.h>
    
            int main()
            {
                    int fd;
                    struct sockaddr_alg addr = {
                            .salg_type = "aead",
                            .salg_name = "authenc(hmac(sha256),cbc(aes))",
                    };
                    struct {
                            struct rtattr attr;
                            __be32 enckeylen;
                            char keys[1];
                    } __attribute__((packed)) key = {
                            .attr.rta_len = sizeof(key),
                            .attr.rta_type = 1 /* CRYPTO_AUTHENC_KEYA_PARAM */,
                    };
    
                    fd = socket(AF_ALG, SOCK_SEQPACKET, 0);
                    bind(fd, (void *)&addr, sizeof(addr));
                    setsockopt(fd, SOL_ALG, ALG_SET_KEY, &key, sizeof(key));
            }
    
    It caused:
    
            BUG: unable to handle kernel paging request at ffff88007ffdc000
            PGD 2e01067 P4D 2e01067 PUD 2e04067 PMD 2e05067 PTE 0
            Oops: 0000 [#1] SMP
            CPU: 0 PID: 883 Comm: authenc Not tainted 4.20.0-rc1-00108-g00c9fe37a7f27 #13
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-20181126_142135-anatol 04/01/2014
            RIP: 0010:sha256_ni_transform+0xb3/0x330 arch/x86/crypto/sha256_ni_asm.S:155
            [...]
            Call Trace:
             sha256_ni_finup+0x10/0x20 arch/x86/crypto/sha256_ssse3_glue.c:321
             crypto_shash_finup+0x1a/0x30 crypto/shash.c:178
             shash_digest_unaligned+0x45/0x60 crypto/shash.c:186
             crypto_shash_digest+0x24/0x40 crypto/shash.c:202
             hmac_setkey+0x135/0x1e0 crypto/hmac.c:66
             crypto_shash_setkey+0x2b/0xb0 crypto/shash.c:66
             shash_async_setkey+0x10/0x20 crypto/shash.c:223
             crypto_ahash_setkey+0x2d/0xa0 crypto/ahash.c:202
             crypto_authenc_setkey+0x68/0x100 crypto/authenc.c:96
             crypto_aead_setkey+0x2a/0xc0 crypto/aead.c:62
             aead_setkey+0xc/0x10 crypto/algif_aead.c:526
             alg_setkey crypto/af_alg.c:223 [inline]
             alg_setsockopt+0xfe/0x130 crypto/af_alg.c:256
             __sys_setsockopt+0x6d/0xd0 net/socket.c:1902
             __do_sys_setsockopt net/socket.c:1913 [inline]
             __se_sys_setsockopt net/socket.c:1910 [inline]
             __x64_sys_setsockopt+0x1f/0x30 net/socket.c:1910
             do_syscall_64+0x4a/0x180 arch/x86/entry/common.c:290
             entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: e236d4a89a2f ("[CRYPTO] authenc: Move enckeylen into key itself")
    Cc: <stable@vger.kernel.org> # v2.6.25+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23009dc3d4ff659739659c10f386a10af628b59f
Author: JianJhen Chen <kchen@synology.com>
Date:   Sun Jan 6 11:28:13 2019 +0800

    net: bridge: fix a bug on using a neighbour cache entry without checking its state
    
    [ Upstream commit 4c84edc11b76590859b1e45dd676074c59602dc4 ]
    
    When handling DNAT'ed packets on a bridge device, the neighbour cache entry
    from lookup was used without checking its state. It means that a cache entry
    in the NUD_STALE state will be used directly instead of entering the NUD_DELAY
    state to confirm the reachability of the neighbor.
    
    This problem becomes worse after commit 2724680bceee ("neigh: Keep neighbour
    cache entries if number of them is small enough."), since all neighbour cache
    entries in the NUD_STALE state will be kept in the neighbour table as long as
    the number of cache entries does not exceed the value specified in gc_thresh1.
    
    This commit validates the state of a neighbour cache entry before using
    the entry.
    
    Signed-off-by: JianJhen Chen <kchen@synology.com>
    Reviewed-by: JinLin Chen <jlchen@synology.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c871bdbd02f71e31961dce3a70e77d450765f16
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Jan 8 23:27:06 2019 +0000

    packet: Do not leak dev refcounts on error exit
    
    [ Upstream commit d972f3dce8d161e2142da0ab1ef25df00e2f21a9 ]
    
    'dev' is non NULL when the addr_len check triggers so it must goto a label
    that does the dev_put otherwise dev will have a leaked refcount.
    
    This bug causes the ib_ipoib module to become unloadable when using
    systemd-network as it triggers this check on InfiniBand links.
    
    Fixes: 99137b7888f4 ("packet: validate address length")
    Reported-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d97ac0053d163657086eb81b9f6023059a3966d
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 8 04:06:14 2019 -0800

    ipv6: fix kernel-infoleak in ipv6_local_error()
    
    [ Upstream commit 7d033c9f6a7fd3821af75620a0257db87c2b552a ]
    
    This patch makes sure the flow label in the IPv6 header
    forged in ipv6_local_error() is initialized.
    
    BUG: KMSAN: kernel-infoleak in _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
    CPU: 1 PID: 24675 Comm: syz-executor1 Not tainted 4.20.0-rc7+ #4
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     kmsan_internal_check_memory+0x455/0xb00 mm/kmsan/kmsan.c:675
     kmsan_copy_to_user+0xab/0xc0 mm/kmsan/kmsan_hooks.c:601
     _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
     copy_to_user include/linux/uaccess.h:177 [inline]
     move_addr_to_user+0x2e9/0x4f0 net/socket.c:227
     ___sys_recvmsg+0x5d7/0x1140 net/socket.c:2284
     __sys_recvmsg net/socket.c:2327 [inline]
     __do_sys_recvmsg net/socket.c:2337 [inline]
     __se_sys_recvmsg+0x2fa/0x450 net/socket.c:2334
     __x64_sys_recvmsg+0x4a/0x70 net/socket.c:2334
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f8750c06c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002f
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000002000 RSI: 0000000020000400 RDI: 0000000000000005
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f8750c076d4
    R13: 00000000004c4a60 R14: 00000000004d8140 R15: 00000000ffffffff
    
    Uninit was stored to memory at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_save_stack mm/kmsan/kmsan.c:219 [inline]
     kmsan_internal_chain_origin+0x134/0x230 mm/kmsan/kmsan.c:439
     __msan_chain_origin+0x70/0xe0 mm/kmsan/kmsan_instr.c:200
     ipv6_recv_error+0x1e3f/0x1eb0 net/ipv6/datagram.c:475
     udpv6_recvmsg+0x398/0x2ab0 net/ipv6/udp.c:335
     inet_recvmsg+0x4fb/0x600 net/ipv4/af_inet.c:830
     sock_recvmsg_nosec net/socket.c:794 [inline]
     sock_recvmsg+0x1d1/0x230 net/socket.c:801
     ___sys_recvmsg+0x4d5/0x1140 net/socket.c:2278
     __sys_recvmsg net/socket.c:2327 [inline]
     __do_sys_recvmsg net/socket.c:2337 [inline]
     __se_sys_recvmsg+0x2fa/0x450 net/socket.c:2334
     __x64_sys_recvmsg+0x4a/0x70 net/socket.c:2334
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     ipv6_local_error+0x1a7/0x9e0 net/ipv6/datagram.c:334
     __ip6_append_data+0x129f/0x4fd0 net/ipv6/ip6_output.c:1311
     ip6_make_skb+0x6cc/0xcf0 net/ipv6/ip6_output.c:1775
     udpv6_sendmsg+0x3f8e/0x45d0 net/ipv6/udp.c:1384
     inet_sendmsg+0x54a/0x720 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     __sys_sendto+0x8c4/0xac0 net/socket.c:1788
     __do_sys_sendto net/socket.c:1800 [inline]
     __se_sys_sendto+0x107/0x130 net/socket.c:1796
     __x64_sys_sendto+0x6e/0x90 net/socket.c:1796
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    Bytes 4-7 of 28 are uninitialized
    Memory access of size 28 starts at ffff8881937bfce0
    Data copied to user address 0000000020000000
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ce837acc94fcea4621b84921d8b271234bed2dd
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Thu Jan 17 00:22:48 2019 +0000

    media: em28xx: Fix misplaced reset of dev->v4l::field_count
    
    The backport of commit afeaade90db4 "media: em28xx: make
    v4l2-compliance happier by starting sequence on zero" added a
    reset on em28xx_v4l2::field_count to em28xx_ctrl_notify(),
    but it should be done in em28xx_start_analog_streaming().
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c3b21c842deb09721015a8463087e3c262be385
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Fri Jan 4 15:55:26 2019 +0100

    can: gw: ensure DLC boundaries after CAN frame modification
    
    commit 0aaa81377c5a01f686bcdb8c7a6929a7bf330c68 upstream.
    
    Muyu Yu provided a POC where user root with CAP_NET_ADMIN can create a CAN
    frame modification rule that makes the data length code a higher value than
    the available CAN frame data size. In combination with a configured checksum
    calculation where the result is stored relatively to the end of the data
    (e.g. cgw_csum_xor_rel) the tail of the skb (e.g. frag_list pointer in
    skb_shared_info) can be rewritten which finally can cause a system crash.
    
    Michael Kubecek suggested to drop frames that have a DLC exceeding the
    available space after the modification process and provided a patch that can
    handle CAN FD frames too. Within this patch we also limit the length for the
    checksum calculations to the maximum of Classic CAN data length (8).
    
    CAN frames that are dropped by these additional checks are counted with the
    CGW_DELETED counter which indicates misconfigurations in can-gw rules.
    
    This fixes CVE-2019-3701.
    
    Reported-by: Muyu Yu <ieatmuttonchuan@gmail.com>
    Reported-by: Marcus Meissner <meissner@suse.de>
    Suggested-by: Michal Kubecek <mkubecek@suse.cz>
    Tested-by: Muyu Yu <ieatmuttonchuan@gmail.com>
    Tested-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: linux-stable <stable@vger.kernel.org> # >= v3.2
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 975156125866f2b9d6557e9cd9b00a29a6f4a909
Author: Dmitry Safonov <0x7f454c46@gmail.com>
Date:   Thu Nov 1 00:24:46 2018 +0000

    tty/ldsem: Wake up readers after timed out down_write()
    
    commit 231f8fd0cca078bd4396dd7e380db813ac5736e2 upstream.
    
    ldsem_down_read() will sleep if there is pending writer in the queue.
    If the writer times out, readers in the queue should be woken up,
    otherwise they may miss a chance to acquire the semaphore until the last
    active reader will do ldsem_up_read().
    
    There was a couple of reports where there was one active reader and
    other readers soft locked up:
      Showing all locks held in the system:
      2 locks held by khungtaskd/17:
       #0:  (rcu_read_lock){......}, at: watchdog+0x124/0x6d1
       #1:  (tasklist_lock){.+.+..}, at: debug_show_all_locks+0x72/0x2d3
      2 locks held by askfirst/123:
       #0:  (&tty->ldisc_sem){.+.+.+}, at: ldsem_down_read+0x46/0x58
       #1:  (&ldata->atomic_read_lock){+.+...}, at: n_tty_read+0x115/0xbe4
    
    Prevent readers wait for active readers to release ldisc semaphore.
    
    Link: lkml.kernel.org/r/20171121132855.ajdv4k6swzhvktl6@wfg-t540p.sh.intel.com
    Link: lkml.kernel.org/r/20180907045041.GF1110@shao2-debian
    Cc: Jiri Slaby <jslaby@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Reported-by: kernel test robot <rong.a.chen@intel.com>
    Signed-off-by: Dmitry Safonov <dima@arista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1c0a2b920e66a6cd90644e5cbbd861b755f40fa
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Mon Dec 24 14:44:52 2018 +0300

    sunrpc: use-after-free in svc_process_common()
    
    commit d4b09acf924b84bae77cad090a9d108e70b43643 upstream.
    
    if node have NFSv41+ mounts inside several net namespaces
    it can lead to use-after-free in svc_process_common()
    
    svc_process_common()
            /* Setup reply header */
            rqstp->rq_xprt->xpt_ops->xpo_prep_reply_hdr(rqstp); <<< HERE
    
    svc_process_common() can use incorrect rqstp->rq_xprt,
    its caller function bc_svc_process() takes it from serv->sv_bc_xprt.
    The problem is that serv is global structure but sv_bc_xprt
    is assigned per-netnamespace.
    
    According to Trond, the whole "let's set up rqstp->rq_xprt
    for the back channel" is nothing but a giant hack in order
    to work around the fact that svc_process_common() uses it
    to find the xpt_ops, and perform a couple of (meaningless
    for the back channel) tests of xpt_flags.
    
    All we really need in svc_process_common() is to be able to run
    rqstp->rq_xprt->xpt_ops->xpo_prep_reply_hdr()
    
    Bruce J Fields points that this xpo_prep_reply_hdr() call
    is an awfully roundabout way just to do "svc_putnl(resv, 0);"
    in the tcp case.
    
    This patch does not initialiuze rqstp->rq_xprt in bc_svc_process(),
    now it calls svc_process_common() with rqstp->rq_xprt = NULL.
    
    To adjust reply header svc_process_common() just check
    rqstp->rq_prot and calls svc_tcp_prep_reply_hdr() for tcp case.
    
    To handle rqstp->rq_xprt = NULL case in functions called from
    svc_process_common() patch intruduces net namespace pointer
    svc_rqst->rq_bc_net and adjust SVC_NET() definition.
    Some other function was also adopted to properly handle described case.
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Cc: stable@vger.kernel.org
    Fixes: 23c20ecd4475 ("NFS: callback up - users counting cleanup")
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    v2: - added lost extern svc_tcp_prep_reply_hdr()
        - context changes in svc_process_common()
        - dropped trace_svc_process() changes
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddcd89ca53138d4ad7cc2e18ba4f7d4a7fb4839f
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Jan 14 15:21:45 2019 -0800

    crypto: cts - fix crash on short inputs
    
    [It's a minimal fix for a bug that was fixed incidentally by a large
    refactoring in v4.8.]
    
    In the CTS template, when the input length is <= one block cipher block
    (e.g. <= 16 bytes for AES) pass the correct length to the underlying CBC
    transform rather than one block.  This matches the upstream behavior and
    makes the encryption/decryption operation correctly return -EINVAL when
    1 <= nbytes < bsize or succeed when nbytes == 0, rather than crashing.
    
    This was fixed upstream incidentally by a large refactoring,
    commit 0605c41cc53c ("crypto: cts - Convert to skcipher").  But
    syzkaller easily trips over this when running on older kernels, as it's
    easily reachable via AF_ALG.  Therefore, this patch makes the minimal
    fix for older kernels.
    
    Cc: linux-crypto@vger.kernel.org
    Fixes: 76cb9521795a ("[CRYPTO] cts: Add CTS mode required for Kerberos AES support")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96e2cd7a68cf2d2f4b110f915b9d13ca369f72df
Author: Yi Zeng <yizeng@asrmicro.com>
Date:   Wed Jan 9 15:33:07 2019 +0800

    i2c: dev: prevent adapter retries and timeout being set as minus value
    
    commit 6ebec961d59bccf65d08b13fc1ad4e6272a89338 upstream.
    
    If adapter->retries is set to a minus value from user space via ioctl,
    it will make __i2c_transfer and __i2c_smbus_xfer skip the calling to
    adapter->algo->master_xfer and adapter->algo->smbus_xfer that is
    registered by the underlying bus drivers, and return value 0 to all the
    callers. The bus driver will never be accessed anymore by all users,
    besides, the users may still get successful return value without any
    error or information log print out.
    
    If adapter->timeout is set to minus value from user space via ioctl,
    it will make the retrying loop in __i2c_transfer and __i2c_smbus_xfer
    always break after the the first try, due to the time_after always
    returns true.
    
    Signed-off-by: Yi Zeng <yizeng@asrmicro.com>
    [wsa: minor grammar updates to commit message]
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe19dc973bbd10a4e710b316b358d95df32f8d8d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Dec 30 18:25:00 2018 +0100

    ACPI: power: Skip duplicate power resource references in _PRx
    
    commit 7d7b467cb95bf29597b417d4990160d4ea6d69b9 upstream.
    
    Some ACPI tables contain duplicate power resource references like this:
    
            Name (_PR0, Package (0x04)  // _PR0: Power Resources for D0
            {
                P28P,
                P18P,
                P18P,
                CLK4
            })
    
    This causes a WARN_ON in sysfs_add_link_to_group() because we end up
    adding a link to the same acpi_device twice:
    
    sysfs: cannot create duplicate filename '/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A08:00/808622C1:00/OVTI2680:00/power_resources_D0/LNXPOWER:0a'
    CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.19.12-301.fc29.x86_64 #1
    Hardware name: Insyde CherryTrail/Type2 - Board Product Name, BIOS jumperx.T87.KFBNEEA02 04/13/2016
    Call Trace:
     dump_stack+0x5c/0x80
     sysfs_warn_dup.cold.3+0x17/0x2a
     sysfs_do_create_link_sd.isra.2+0xa9/0xb0
     sysfs_add_link_to_group+0x30/0x50
     acpi_power_expose_list+0x74/0xa0
     acpi_power_add_remove_device+0x50/0xa0
     acpi_add_single_object+0x26b/0x5f0
     acpi_bus_check_add+0xc4/0x250
     ...
    
    To address this issue, make acpi_extract_power_resources() check for
    duplicates and simply skip them when found.
    
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    [ rjw: Subject & changelog, comments ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67dd0eda360aed404325074b2bf6e18175a8d796
Author: Christoph Lameter <cl@linux.com>
Date:   Tue Jan 8 15:23:00 2019 -0800

    slab: alien caches must not be initialized if the allocation of the alien cache failed
    
    commit 09c2e76ed734a1d36470d257a778aaba28e86531 upstream.
    
    Callers of __alloc_alien() check for NULL.  We must do the same check in
    __alloc_alien_cache to avoid NULL pointer dereferences on allocation
    failures.
    
    Link: http://lkml.kernel.org/r/010001680f42f192-82b4e12e-1565-4ee0-ae1f-1e98974906aa-000000@email.amazonses.com
    Fixes: 49dfc304ba241 ("slab: use the lock on alien_cache, instead of the lock on array_cache")
    Fixes: c8522a3a5832b ("Slab: introduce alloc_alien")
    Signed-off-by: Christoph Lameter <cl@linux.com>
    Reported-by: syzbot+d6ed4ec679652b4fd4e4@syzkaller.appspotmail.com
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84fe5c6e95e6469d7d3360b6d0fa03f13dc41200
Author: Icenowy Zheng <icenowy@aosc.io>
Date:   Thu Jan 3 11:26:18 2019 +0800

    USB: storage: add quirk for SMI SM3350
    
    commit 0a99cc4b8ee83885ab9f097a3737d1ab28455ac0 upstream.
    
    The SMI SM3350 USB-UFS bridge controller cannot handle long sense request
    correctly and will make the chip refuse to do read/write when requested
    long sense.
    
    Add a bad sense quirk for it.
    
    Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a2cac02dc5d4a2633498620c22f3054248dc66c
Author: Icenowy Zheng <icenowy@aosc.io>
Date:   Thu Jan 3 11:26:17 2019 +0800

    USB: storage: don't insert sane sense for SPC3+ when bad sense specified
    
    commit c5603d2fdb424849360fe7e3f8c1befc97571b8c upstream.
    
    Currently the code will set US_FL_SANE_SENSE flag unconditionally if
    device claims SPC3+, however we should allow US_FL_BAD_SENSE flag to
    prevent this behavior, because SMI SM3350 UFS-USB bridge controller,
    which claims SPC4, will show strange behavior with 96-byte sense
    (put the chip into a wrong state that cannot read/write anything).
    
    Check the presence of US_FL_BAD_SENSE when assuming US_FL_SANE_SENSE on
    SPC4+ devices.
    
    Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93e95567e91824e4ab44bd8259426289c0b249ab
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Dec 28 16:15:41 2018 +0100

    usb: cdc-acm: send ZLP for Telit 3G Intel based modems
    
    commit 34aabf918717dd14e05051896aaecd3b16b53d95 upstream.
    
    Telit 3G Intel based modems require zero packet to be sent if
    out data size is equal to the endpoint max packet size.
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac72ab69de6686c9a4d65f0e44f13cdfb6255086
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Tue Jan 8 18:30:57 2019 +0000

    cifs: Fix potential OOB access of lock element array
    
    commit b9a74cde94957d82003fb9f7ab4777938ca851cd upstream.
    
    If maxBuf is small but non-zero, it could result in a zero sized lock
    element array which we would then try and access OOB.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de92e4baf2b85bbd6e33d2b11966a76391fc30de
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Thu Jan 10 11:27:28 2019 -0800

    CIFS: Do not hide EINTR after sending network packets
    
    commit ee13919c2e8d1f904e035ad4b4239029a8994131 upstream.
    
    Currently we hide EINTR code returned from sock_sendmsg()
    and return 0 instead. This makes a caller think that we
    successfully completed the network operation which is not
    true. Fix this by properly returning EINTR to callers.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c9c58b95e9f7c5687ca8b6227ce735d269c0585
Author: Andreas Larsson <andreas@gaisler.com>
Date:   Wed Nov 9 10:43:05 2016 +0100

    sparc32: Fix inverted invalid_frame_pointer checks on sigreturns
    
    commit 07b5ab3f71d318e52c18cc3b73c1d44c908aacfa upstream.
    
    Signed-off-by: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
