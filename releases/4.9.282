commit 9f6447b82e75839bc8a7f531daa43f74f292a0ba
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Sep 3 09:44:41 2021 +0200

    Linux 4.9.282
    
    Link: https://lore.kernel.org/r/20210901122248.920548099@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05f67ba7e6773d561866daf5346b19b7bcb991b9
Author: Denis Efremov <efremov@linux.com>
Date:   Sat Aug 7 10:37:02 2021 +0300

    Revert "floppy: reintroduce O_NDELAY fix"
    
    commit c7e9d0020361f4308a70cdfd6d5335e273eb8717 upstream.
    
    The patch breaks userspace implementations (e.g. fdutils) and introduces
    regressions in behaviour. Previously, it was possible to O_NDELAY open a
    floppy device with no media inserted or with write protected media without
    an error. Some userspace tools use this particular behavior for probing.
    
    It's not the first time when we revert this patch. Previous revert is in
    commit f2791e7eadf4 (Revert "floppy: refactor open() flags handling").
    
    This reverts commit 8a0c014cd20516ade9654fc13b51345ec58e7be8.
    
    Link: https://lore.kernel.org/linux-block/de10cb47-34d1-5a88-7751-225ca380f735@compro.net/
    Reported-by: Mark Hounschell <markh@compro.net>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Wim Osterholt <wim@djo.tudelft.nl>
    Cc: Kurt Garloff <kurt@garloff.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b52e6a380f8468f903ee034fdf9df9bec445df72
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Jun 22 10:56:47 2021 -0700

    KVM: x86/mmu: Treat NX as used (not reserved) for all !TDP shadow MMUs
    
    commit 112022bdb5bc372e00e6e43cb88ee38ea67b97bd upstream
    
    Mark NX as being used for all non-nested shadow MMUs, as KVM will set the
    NX bit for huge SPTEs if the iTLB mutli-hit mitigation is enabled.
    Checking the mitigation itself is not sufficient as it can be toggled on
    at any time and KVM doesn't reset MMU contexts when that happens.  KVM
    could reset the contexts, but that would require purging all SPTEs in all
    MMUs, for no real benefit.  And, KVM already forces EFER.NX=1 when TDP is
    disabled (for WP=0, SMEP=1, NX=0), so technically NX is never reserved
    for shadow MMUs.
    
    Fixes: b8e8c8303ff2 ("kvm: mmu: ITLB_MULTIHIT mitigation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210622175739.3610207-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [sudip: use old path and adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e787e97cb722343f3971474f36252652fccf4acf
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Tue Jul 7 15:26:03 2020 -0400

    fbmem: add margin check to fb_check_caps()
    
    commit a49145acfb975d921464b84fe00279f99827d816 upstream.
    
    A fb_ioctl() FBIOPUT_VSCREENINFO call with invalid xres setting
    or yres setting in struct fb_var_screeninfo will result in a
    KASAN: vmalloc-out-of-bounds failure in bitfill_aligned() as
    the margins are being cleared. The margins are cleared in
    chunks and if the xres setting or yres setting is a value of
    zero upto the chunk size, the failure will occur.
    
    Add a margin check to validate xres and yres settings.
    
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Reported-by: syzbot+e5fd3e65515b48c02a30@syzkaller.appspotmail.com
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Dhaval Giani <dhaval.giani@oracle.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1594149963-13801-1-git-send-email-george.kennedy@oracle.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 755a2f40dda2d6b2e3b8624cb052e68947ee4d1f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 30 08:55:18 2021 -0700

    vt_kdsetmode: extend console locking
    
    commit 2287a51ba822384834dafc1c798453375d1107c7 upstream.
    
    As per the long-suffering comment.
    
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 706938b1d0e23da591cc999c902351229b1d8c97
Author: Gerd Rausch <gerd.rausch@oracle.com>
Date:   Tue Aug 17 10:04:37 2021 -0700

    net/rds: dma_map_sg is entitled to merge entries
    
    [ Upstream commit fb4b1373dcab086d0619c29310f0466a0b2ceb8a ]
    
    Function "dma_map_sg" is entitled to merge adjacent entries
    and return a value smaller than what was passed as "nents".
    
    Subsequently "ib_map_mr_sg" needs to work with this value ("sg_dma_len")
    rather than the original "nents" parameter ("sg_len").
    
    This old RDS bug was exposed and reliably causes kernel panics
    (using RDMA operations "rds-stress -D") on x86_64 starting with:
    commit c588072bba6b ("iommu/vt-d: Convert intel iommu driver to the iommu ops")
    
    Simply put: Linux 5.11 and later.
    
    Signed-off-by: Gerd Rausch <gerd.rausch@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Link: https://lore.kernel.org/r/60efc69f-1f35-529d-a7ef-da0549cad143@oracle.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5b4eb81d780dc2010347d4266d25f3479bfded8
Author: Neeraj Upadhyay <neeraju@codeaurora.org>
Date:   Fri Jun 25 08:55:02 2021 +0530

    vringh: Use wiov->used to check for read/write desc order
    
    [ Upstream commit e74cfa91f42c50f7f649b0eca46aa049754ccdbd ]
    
    As __vringh_iov() traverses a descriptor chain, it populates
    each descriptor entry into either read or write vring iov
    and increments that iov's ->used member. So, as we iterate
    over a descriptor chain, at any point, (riov/wriov)->used
    value gives the number of descriptor enteries available,
    which are to be read or written by the device. As all read
    iovs must precede the write iovs, wiov->used should be zero
    when we are traversing a read descriptor. Current code checks
    for wiov->i, to figure out whether any previous entry in the
    current descriptor chain was a write descriptor. However,
    iov->i is only incremented, when these vring iovs are consumed,
    at a later point, and remain 0 in __vringh_iov(). So, correct
    the check for read and write descriptor order, to use
    wiov->used.
    
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Neeraj Upadhyay <neeraju@codeaurora.org>
    Link: https://lore.kernel.org/r/1624591502-4827-1-git-send-email-neeraju@codeaurora.org
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a8a6356d895eae726bd10562170039541f13ff3
Author: Parav Pandit <parav@nvidia.com>
Date:   Wed Jul 21 17:26:45 2021 +0300

    virtio: Improve vq->broken access to avoid any compiler optimization
    
    [ Upstream commit 60f0779862e4ab943810187752c462e85f5fa371 ]
    
    Currently vq->broken field is read by virtqueue_is_broken() in busy
    loop in one context by virtnet_send_command().
    
    vq->broken is set to true in other process context by
    virtio_break_device(). Reader and writer are accessing it without any
    synchronization. This may lead to a compiler optimization which may
    result to optimize reading vq->broken only once.
    
    Hence, force reading vq->broken on each invocation of
    virtqueue_is_broken() and also force writing it so that such
    update is visible to the readers.
    
    It is a theoretical fix that isn't yet encountered in the field.
    
    Signed-off-by: Parav Pandit <parav@nvidia.com>
    Link: https://lore.kernel.org/r/20210721142648.1525924-2-parav@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68e616e484740d26dd1ec7d29332095dc1bf9997
Author: Maxim Kiselev <bigunclemax@gmail.com>
Date:   Fri Aug 20 18:39:51 2021 +0300

    net: marvell: fix MVNETA_TX_IN_PRGRS bit number
    
    [ Upstream commit 359f4cdd7d78fdf8c098713b05fee950a730f131 ]
    
    According to Armada XP datasheet bit at 0 position is corresponding for
    TxInProg indication.
    
    Fixes: c5aff18204da ("net: mvneta: driver for Marvell Armada 370/XP network unit")
    Signed-off-by: Maxim Kiselev <bigunclemax@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41d5dfa408130433cc5f037ad89bed854bf936f7
Author: Shreyansh Chouhan <chouhan.shreyansh630@gmail.com>
Date:   Sat Aug 21 12:44:24 2021 +0530

    ip_gre: add validation for csum_start
    
    [ Upstream commit 1d011c4803c72f3907eccfc1ec63caefb852fcbf ]
    
    Validate csum_start in gre_handle_offloads before we call _gre_xmit so
    that we do not crash later when the csum_start value is used in the
    lco_csum function call.
    
    This patch deals with ipv4 code.
    
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Reported-by: syzbot+ff8e1b9f2f36481e2efc@syzkaller.appspotmail.com
    Signed-off-by: Shreyansh Chouhan <chouhan.shreyansh630@gmail.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8421250727bce7223058cb9cd5b67f580f545a8b
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Sun Jul 4 10:11:41 2021 +0300

    e1000e: Fix the max snoop/no-snoop latency for 10M
    
    [ Upstream commit 44a13a5d99c71bf9e1676d9e51679daf4d7b3d73 ]
    
    We should decode the latency and the max_latency before directly compare.
    The latency should be presented as lat_enc = scale x value:
    lat_enc_d = (lat_enc & 0x0x3ff) x (1U << (5*((max_ltr_enc & 0x1c00)
    >> 10)))
    
    Fixes: cf8fb73c23aa ("e1000e: add support for LTR on I217/I218")
    Suggested-by: Yee Li <seven.yi.lee@gmail.com>
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc5d2ff5d265a075b79224b2b48eec33845e5ab5
Author: Tuo Li <islituo@gmail.com>
Date:   Fri Aug 6 06:30:29 2021 -0700

    IB/hfi1: Fix possible null-pointer dereference in _extend_sdma_tx_descs()
    
    [ Upstream commit cbe71c61992c38f72c2b625b2ef25916b9f0d060 ]
    
    kmalloc_array() is called to allocate memory for tx->descp. If it fails,
    the function __sdma_txclean() is called:
      __sdma_txclean(dd, tx);
    
    However, in the function __sdma_txclean(), tx-descp is dereferenced if
    tx->num_desc is not zero:
      sdma_unmap_desc(dd, &tx->descp[0]);
    
    To fix this possible null-pointer dereference, assign the return value of
    kmalloc_array() to a local variable descp, and then assign it to tx->descp
    if it is not NULL. Otherwise, go to enomem.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Link: https://lore.kernel.org/r/20210806133029.194964-1-islituo@gmail.com
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Tested-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Acked-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b660089241de9f2870da4c8e9b6198a090fb9dd
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Aug 19 03:17:03 2021 +0200

    usb: dwc3: gadget: Fix dwc3_calc_trbs_left()
    
    commit 51f1954ad853d01ba4dc2b35dee14d8490ee05a1 upstream.
    
    We can't depend on the TRB's HWO bit to determine if the TRB ring is
    "full". A TRB is only available when the driver had processed it, not
    when the controller consumed and relinquished the TRB's ownership to the
    driver. Otherwise, the driver may overwrite unprocessed TRBs. This can
    happen when many transfer events accumulate and the system is slow to
    process them and/or when there are too many small requests.
    
    If a request is in the started_list, that means there is one or more
    unprocessed TRBs remained. Check this instead of the TRB's HWO bit
    whether the TRB ring is full.
    
    Fixes: c4233573f6ee ("usb: dwc3: gadget: prepare TRBs on update transfers too")
    Cc: <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/e91e975affb0d0d02770686afc3a5b9eb84409f6.1629335416.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 015936d12a8b579043731e28ffc450dd249375e9
Author: Zhengjun Zhang <zhangzhengjun@aicrobo.com>
Date:   Mon Aug 9 21:35:53 2021 +0800

    USB: serial: option: add new VID/PID to support Fibocom FG150
    
    commit 2829a4e3cf3a6ac2fa3cdb681b37574630fb9c1a upstream.
    
    Fibocom FG150 is a 5G module based on Qualcomm SDX55 platform,
    support Sub-6G band.
    
    Here are the outputs of lsusb -v and usb-devices:
    
    > T:  Bus=02 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    > D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    > P:  Vendor=2cb7 ProdID=010b Rev=04.14
    > S:  Manufacturer=Fibocom
    > S:  Product=Fibocom Modem_SN:XXXXXXXX
    > S:  SerialNumber=XXXXXXXX
    > C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    > I:  If#=0x0 Alt= 0 #EPs= 1 Cls=ef(misc ) Sub=04 Prot=01 Driver=rndis_host
    > I:  If#=0x1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    > I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    > I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    > I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    > Bus 002 Device 002: ID 2cb7:010b Fibocom Fibocom Modem_SN:XXXXXXXX
    > Device Descriptor:
    >   bLength                18
    >   bDescriptorType         1
    >   bcdUSB               3.20
    >   bDeviceClass            0
    >   bDeviceSubClass         0
    >   bDeviceProtocol         0
    >   bMaxPacketSize0         9
    >   idVendor           0x2cb7 Fibocom
    >   idProduct          0x010b
    >   bcdDevice            4.14
    >   iManufacturer           1 Fibocom
    >   iProduct                2 Fibocom Modem_SN:XXXXXXXX
    >   iSerial                 3 XXXXXXXX
    >   bNumConfigurations      1
    >   Configuration Descriptor:
    >     bLength                 9
    >     bDescriptorType         2
    >     wTotalLength       0x00e6
    >     bNumInterfaces          5
    >     bConfigurationValue     1
    >     iConfiguration          4 RNDIS_DUN_DIAG_ADB
    >     bmAttributes         0xa0
    >       (Bus Powered)
    >       Remote Wakeup
    >     MaxPower              896mA
    >     Interface Association:
    >       bLength                 8
    >       bDescriptorType        11
    >       bFirstInterface         0
    >       bInterfaceCount         2
    >       bFunctionClass        239 Miscellaneous Device
    >       bFunctionSubClass       4
    >       bFunctionProtocol       1
    >       iFunction               7 RNDIS
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        0
    >       bAlternateSetting       0
    >       bNumEndpoints           1
    >       bInterfaceClass       239 Miscellaneous Device
    >       bInterfaceSubClass      4
    >       bInterfaceProtocol      1
    >       iInterface              0
    >       ** UNRECOGNIZED:  05 24 00 10 01
    >       ** UNRECOGNIZED:  05 24 01 00 01
    >       ** UNRECOGNIZED:  04 24 02 00
    >       ** UNRECOGNIZED:  05 24 06 00 01
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x81  EP 1 IN
    >         bmAttributes            3
    >           Transfer Type            Interrupt
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0008  1x 8 bytes
    >         bInterval               9
    >         bMaxBurst               0
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        1
    >       bAlternateSetting       0
    >       bNumEndpoints           2
    >       bInterfaceClass        10 CDC Data
    >       bInterfaceSubClass      0
    >       bInterfaceProtocol      0
    >       iInterface              0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x8e  EP 14 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               6
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x0f  EP 15 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               6
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        2
    >       bAlternateSetting       0
    >       bNumEndpoints           3
    >       bInterfaceClass       255 Vendor Specific Class
    >       bInterfaceSubClass      0
    >       bInterfaceProtocol      0
    >       iInterface              0
    >       ** UNRECOGNIZED:  05 24 00 10 01
    >       ** UNRECOGNIZED:  05 24 01 00 00
    >       ** UNRECOGNIZED:  04 24 02 02
    >       ** UNRECOGNIZED:  05 24 06 00 00
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x83  EP 3 IN
    >         bmAttributes            3
    >           Transfer Type            Interrupt
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x000a  1x 10 bytes
    >         bInterval               9
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x82  EP 2 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x01  EP 1 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        3
    >       bAlternateSetting       0
    >       bNumEndpoints           2
    >       bInterfaceClass       255 Vendor Specific Class
    >       bInterfaceSubClass    255 Vendor Specific Subclass
    >       bInterfaceProtocol     48
    >       iInterface              0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x84  EP 4 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x02  EP 2 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        4
    >       bAlternateSetting       0
    >       bNumEndpoints           2
    >       bInterfaceClass       255 Vendor Specific Class
    >       bInterfaceSubClass     66
    >       bInterfaceProtocol      1
    >       iInterface              0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x03  EP 3 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x85  EP 5 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    > Binary Object Store Descriptor:
    >   bLength                 5
    >   bDescriptorType        15
    >   wTotalLength       0x0016
    >   bNumDeviceCaps          2
    >   USB 2.0 Extension Device Capability:
    >     bLength                 7
    >     bDescriptorType        16
    >     bDevCapabilityType      2
    >     bmAttributes   0x00000006
    >       BESL Link Power Management (LPM) Supported
    >   SuperSpeed USB Device Capability:
    >     bLength                10
    >     bDescriptorType        16
    >     bDevCapabilityType      3
    >     bmAttributes         0x00
    >     wSpeedsSupported   0x000f
    >       Device can operate at Low Speed (1Mbps)
    >       Device can operate at Full Speed (12Mbps)
    >       Device can operate at High Speed (480Mbps)
    >       Device can operate at SuperSpeed (5Gbps)
    >     bFunctionalitySupport   1
    >       Lowest fully-functional device speed is Full Speed (12Mbps)
    >     bU1DevExitLat           1 micro seconds
    >     bU2DevExitLat         500 micro seconds
    > Device Status:     0x0000
    >   (Bus Powered)
    
    Signed-off-by: Zhengjun Zhang <zhangzhengjun@aicrobo.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12b7e85f1b95b044c4a1ed1b7abfadd41857b836
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Aug 24 14:19:26 2021 +0200

    Revert "USB: serial: ch341: fix character loss at high transfer rates"
    
    commit df7b16d1c00ecb3da3a30c999cdb39f273c99a2f upstream.
    
    This reverts commit 3c18e9baee0ef97510dcda78c82285f52626764b.
    
    These devices do not appear to send a zero-length packet when the
    transfer size is a multiple of the bulk-endpoint max-packet size. This
    means that incoming data may not be processed by the driver until a
    short packet is received or the receive buffer is full.
    
    Revert back to using endpoint-sized receive buffers to avoid stalled
    reads.
    
    Reported-by: Paul Größel <pb.g@gmx.de>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=214131
    Fixes: 3c18e9baee0e ("USB: serial: ch341: fix character loss at high transfer rates")
    Cc: stable@vger.kernel.org
    Cc: Willy Tarreau <w@1wt.eu>
    Link: https://lore.kernel.org/r/20210824121926.19311-1-johan@kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f1a5e78b09dace7a899045c1a51ded3042a5569
Author: Stefan Mätje <stefan.maetje@esd.eu>
Date:   Wed Aug 25 23:52:27 2021 +0200

    can: usb: esd_usb2: esd_usb2_rx_event(): fix the interchange of the CAN RX and TX error counters
    
    commit 044012b52029204900af9e4230263418427f4ba4 upstream.
    
    This patch fixes the interchanged fetch of the CAN RX and TX error
    counters from the ESD_EV_CAN_ERROR_EXT message. The RX error counter
    is really in struct rx_msg::data[2] and the TX error counter is in
    struct rx_msg::data[3].
    
    Fixes: 96d8e90382dc ("can: Add driver for esd CAN-USB/2 device")
    Link: https://lore.kernel.org/r/20210825215227.4947-2-stefan.maetje@esd.eu
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Mätje <stefan.maetje@esd.eu>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f1a46968ee42c305820c036532317c54ba8ee93
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Jul 10 07:50:33 2021 -0700

    ARC: Fix CONFIG_STACKDEPOT
    
    [ Upstream commit bf79167fd86f3b97390fe2e70231d383526bd9cc ]
    
    Enabling CONFIG_STACKDEPOT results in the following build error.
    
    arc-elf-ld: lib/stackdepot.o: in function `filter_irq_stacks':
    stackdepot.c:(.text+0x456): undefined reference to `__irqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x456): undefined reference to `__irqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x476): undefined reference to `__irqentry_text_end'
    arc-elf-ld: stackdepot.c:(.text+0x476): undefined reference to `__irqentry_text_end'
    arc-elf-ld: stackdepot.c:(.text+0x484): undefined reference to `__softirqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x484): undefined reference to `__softirqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x48c): undefined reference to `__softirqentry_text_end'
    arc-elf-ld: stackdepot.c:(.text+0x48c): undefined reference to `__softirqentry_text_end'
    
    Other architectures address this problem by adding IRQENTRY_TEXT and
    SOFTIRQENTRY_TEXT to the text segment, so do the same here.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
