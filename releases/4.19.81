commit ef244c3088856cf048c77231653b4c92a7b2213c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Oct 29 09:20:09 2019 +0100

    Linux 4.19.81

commit 27414f90ff6e1d7f6657e4a820b04a7b2d760272
Author: Greg KH <gregkh@linuxfoundation.org>
Date:   Tue Oct 1 18:56:11 2019 +0200

    RDMA/cxgb4: Do not dma memory off of the stack
    
    commit 3840c5b78803b2b6cc1ff820100a74a092c40cbb upstream.
    
    Nicolas pointed out that the cxgb4 driver is doing dma off of the stack,
    which is generally considered a very bad thing.  On some architectures it
    could be a security problem, but odds are none of them actually run this
    driver, so it's just a "normal" bug.
    
    Resolve this by allocating the memory for a message off of the heap
    instead of the stack.  kmalloc() always will give us a proper memory
    location that DMA will work correctly from.
    
    Link: https://lore.kernel.org/r/20191001165611.GA3542072@kroah.com
    Reported-by: Nicolas Waisman <nico@semmle.com>
    Tested-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 054441182b51beca00f0c639b0119a1995143772
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Oct 15 08:49:27 2019 -0700

    blk-rq-qos: fix first node deletion of rq_qos_del()
    
    commit 307f4065b9d7c1e887e8bdfb2487e4638559fea1 upstream.
    
    rq_qos_del() incorrectly assigns the node being deleted to the head if
    it was the first on the list in the !prev path.  Fix it by iterating
    with ** instead.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: Josef Bacik <josef@toxicpanda.com>
    Fixes: a79050434b45 ("blk-rq-qos: refactor out common elements of blk-wbt")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ada40308a0db8332ede32e274c54a08efe7ff52
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Oct 14 13:25:00 2019 +0200

    PCI: PM: Fix pci_power_up()
    
    commit 45144d42f299455911cc29366656c7324a3a7c97 upstream.
    
    There is an arbitrary difference between the system resume and
    runtime resume code paths for PCI devices regarding the delay to
    apply when switching the devices from D3cold to D0.
    
    Namely, pci_restore_standard_config() used in the runtime resume
    code path calls pci_set_power_state() which in turn invokes
    __pci_start_power_transition() to power up the device through the
    platform firmware and that function applies the transition delay
    (as per PCI Express Base Specification Revision 2.0, Section 6.6.1).
    However, pci_pm_default_resume_early() used in the system resume
    code path calls pci_power_up() which doesn't apply the delay at
    all and that causes issues to occur during resume from
    suspend-to-idle on some systems where the delay is required.
    
    Since there is no reason for that difference to exist, modify
    pci_power_up() to follow pci_set_power_state() more closely and
    invoke __pci_start_power_transition() from there to call the
    platform firmware to power up the device (in case that's necessary).
    
    Fixes: db288c9c5f9d ("PCI / PM: restore the original behavior of pci_set_power_state()")
    Reported-by: Daniel Drake <drake@endlessm.com>
    Tested-by: Daniel Drake <drake@endlessm.com>
    Link: https://lore.kernel.org/linux-pm/CAD8Lp44TYxrMgPLkHCqF9hv6smEurMXvmmvmtyFhZ6Q4SE+dig@mail.gmail.com/T/#m21be74af263c6a34f36e0fc5c77c5449d9406925
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccb02adf3293c354a78a2f63f53030d6cb3eae27
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Oct 18 09:45:49 2019 +0200

    xen/netback: fix error path of xenvif_connect_data()
    
    commit 3d5c1a037d37392a6859afbde49be5ba6a70a6b3 upstream.
    
    xenvif_connect_data() calls module_put() in case of error. This is
    wrong as there is no related module_get().
    
    Remove the superfluous module_put().
    
    Fixes: 279f438e36c0a7 ("xen-netback: Don't destroy the netdev until the vif is shut down")
    Cc: <stable@vger.kernel.org> # 3.12
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Paul Durrant <paul@xen.org>
    Reviewed-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89ab39da1452d272007acc5912d4008047b86706
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Oct 9 01:29:10 2019 +0200

    cpufreq: Avoid cpufreq_suspend() deadlock on system shutdown
    
    commit 65650b35133ff20f0c9ef0abd5c3c66dbce3ae57 upstream.
    
    It is incorrect to set the cpufreq syscore shutdown callback pointer
    to cpufreq_suspend(), because that function cannot be run in the
    syscore stage of system shutdown for two reasons: (a) it may attempt
    to carry out actions depending on devices that have already been shut
    down at that point and (b) the RCU synchronization carried out by it
    may not be able to make progress then.
    
    The latter issue has been present since commit 45975c7d21a1 ("rcu:
    Define RCU-sched API in terms of RCU for Tree RCU PREEMPT builds"),
    but the former one has been there since commit 90de2a4aa9f3 ("cpufreq:
    suspend cpufreq governors on shutdown") regardless.
    
    Fix that by dropping cpufreq_syscore_ops altogether and making
    device_shutdown() call cpufreq_suspend() directly before shutting
    down devices, which is along the lines of what system-wide power
    management does.
    
    Fixes: 45975c7d21a1 ("rcu: Define RCU-sched API in terms of RCU for Tree RCU PREEMPT builds")
    Fixes: 90de2a4aa9f3 ("cpufreq: suspend cpufreq governors on shutdown")
    Reported-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: 4.0+ <stable@vger.kernel.org> # 4.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f19cbb3ab3f2472bef6965d6cd427a9e22b27a9
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Oct 5 13:21:01 2019 +0200

    memstick: jmb38x_ms: Fix an error handling path in 'jmb38x_ms_probe()'
    
    commit 28c9fac09ab0147158db0baeec630407a5e9b892 upstream.
    
    If 'jmb38x_ms_count_slots()' returns 0, we must undo the previous
    'pci_request_regions()' call.
    
    Goto 'err_out_int' to fix it.
    
    Fixes: 60fdd931d577 ("memstick: add support for JMicron jmb38x MemoryStick host controller")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b95aaae783fa422bc213337de29b710898ff8ec
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Oct 17 10:38:37 2019 +0800

    btrfs: tracepoints: Fix bad entry members of qgroup events
    
    commit 1b2442b4ae0f234daeadd90e153b466332c466d8 upstream.
    
    [BUG]
    For btrfs:qgroup_meta_reserve event, the trace event can output garbage:
    
      qgroup_meta_reserve: 9c7f6acc-b342-4037-bc47-7f6e4d2232d7: refroot=5(FS_TREE) type=DATA diff=2
      qgroup_meta_reserve: 9c7f6acc-b342-4037-bc47-7f6e4d2232d7: refroot=5(FS_TREE) type=0x258792 diff=2
    
    The @type can be completely garbage, as DATA type is not possible for
    trace_qgroup_meta_reserve() trace event.
    
    [CAUSE]
    Ther are several problems related to qgroup trace events:
    - Unassigned entry member
      Member entry::type of trace_qgroup_update_reserve() and
      trace_qgourp_meta_reserve() is not assigned
    
    - Redundant entry member
      Member entry::type is completely useless in
      trace_qgroup_meta_convert()
    
    Fixes: 4ee0d8832c2e ("btrfs: qgroup: Update trace events for metadata reservation")
    CC: stable@vger.kernel.org # 4.10+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b921b5bc47f33bb99189a8141d31e49528571d5
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Oct 16 16:28:52 2019 +0100

    Btrfs: check for the full sync flag while holding the inode lock during fsync
    
    commit ba0b084ac309283db6e329785c1dc4f45fdbd379 upstream.
    
    We were checking for the full fsync flag in the inode before locking the
    inode, which is racy, since at that that time it might not be set but
    after we acquire the inode lock some other task set it. One case where
    this can happen is on a system low on memory and some concurrent task
    failed to allocate an extent map and therefore set the full sync flag on
    the inode, to force the next fsync to work in full mode.
    
    A consequence of missing the full fsync flag set is hitting the problems
    fixed by commit 0c713cbab620 ("Btrfs: fix race between ranged fsync and
    writeback of adjacent ranges"), BUG_ON() when dropping extents from a log
    tree, hitting assertion failures at tree-log.c:copy_items() or all sorts
    of weird inconsistencies after replaying a log due to file extents items
    representing ranges that overlap.
    
    So just move the check such that it's done after locking the inode and
    before starting writeback again.
    
    Fixes: 0c713cbab620 ("Btrfs: fix race between ranged fsync and writeback of adjacent ranges")
    CC: stable@vger.kernel.org # 5.2+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac6bae2b524ddbd7bc0609b70331277c9146144c
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Oct 9 17:43:45 2019 +0100

    Btrfs: add missing extents release on file extent cluster relocation error
    
    commit 44db1216efe37bf670f8d1019cdc41658d84baf5 upstream.
    
    If we error out when finding a page at relocate_file_extent_cluster(), we
    need to release the outstanding extents counter on the relocation inode,
    set by the previous call to btrfs_delalloc_reserve_metadata(), otherwise
    the inode's block reserve size can never decrease to zero and metadata
    space is leaked. Therefore add a call to btrfs_delalloc_release_extents()
    in case we can't find the target page.
    
    Fixes: 8b62f87bad9c ("Btrfs: rework outstanding_extents")
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cd5be9832eb2e556bf3023113e4a5d5fc58891f
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Oct 10 10:39:26 2019 +0800

    btrfs: block-group: Fix a memory leak due to missing btrfs_put_block_group()
    
    commit 4b654acdae850f48b8250b9a578a4eaa518c7a6f upstream.
    
    In btrfs_read_block_groups(), if we have an invalid block group which
    has mixed type (DATA|METADATA) while the fs doesn't have MIXED_GROUPS
    feature, we error out without freeing the block group cache.
    
    This patch will add the missing btrfs_put_block_group() to prevent
    memory leak.
    
    Note for stable backports: the file to patch in versions <= 5.3 is
    fs/btrfs/extent-tree.c
    
    Fixes: 49303381f19a ("Btrfs: bail out if block group has different mixed flag")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5a10f7800ed4d9920ee523da84ddfd9e45968fb
Author: Patrick Williams <alpawi@amazon.com>
Date:   Tue Oct 1 10:51:38 2019 -0500

    pinctrl: armada-37xx: swap polarity on LED group
    
    commit b835d6953009dc350d61402a854b5a7178d8c615 upstream.
    
    The configuration registers for the LED group have inverted
    polarity, which puts the GPIO into open-drain state when used in
    GPIO mode.  Switch to '0' for GPIO and '1' for LED modes.
    
    Fixes: 87466ccd9401 ("pinctrl: armada-37xx: Add pin controller support for Armada 37xx")
    Signed-off-by: Patrick Williams <alpawi@amazon.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191001155154.99710-1-alpawi@amazon.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0e489aa5bd0416e996513c8c414d189b0f7e8fc
Author: Patrick Williams <alpawi@amazon.com>
Date:   Tue Oct 1 10:46:31 2019 -0500

    pinctrl: armada-37xx: fix control of pins 32 and up
    
    commit 20504fa1d2ffd5d03cdd9dc9c9dd4ed4579b97ef upstream.
    
    The 37xx configuration registers are only 32 bits long, so
    pins 32-35 spill over into the next register.  The calculation
    for the register address was done, but the bitmask was not, so
    any configuration to pin 32 or above resulted in a bitmask that
    overflowed and performed no action.
    
    Fix the register / offset calculation to also adjust the offset.
    
    Fixes: 5715092a458c ("pinctrl: armada-37xx: Add gpio support")
    Signed-off-by: Patrick Williams <alpawi@amazon.com>
    Acked-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191001154634.96165-1-alpawi@amazon.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e9d71802ddcbba83c28cce621e6863a643c9a44
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Sep 23 19:49:58 2019 -0700

    pinctrl: cherryview: restore Strago DMI workaround for all versions
    
    commit 260996c30f4f3a732f45045e3e0efe27017615e4 upstream.
    
    This is essentially a revert of:
    
    e3f72b749da2 pinctrl: cherryview: fix Strago DMI workaround
    86c5dd6860a6 pinctrl: cherryview: limit Strago DMI workarounds to version 1.0
    
    because even with 1.1 versions of BIOS there are some pins that are
    configured as interrupts but not claimed by any driver, and they
    sometimes fire up and result in interrupt storms that cause touchpad
    stop functioning and other issues.
    
    Given that we are unlikely to qualify another firmware version for a
    while it is better to keep the workaround active on all Strago boards.
    
    Reported-by: Alex Levin <levinale@chromium.org>
    Fixes: 86c5dd6860a6 ("pinctrl: cherryview: limit Strago DMI workarounds to version 1.0")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Alex Levin <levinale@chromium.org>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dedaa73c4c43bfc4b1fd261eafdad33bd45b353
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Oct 1 13:50:19 2019 -0700

    x86/apic/x2apic: Fix a NULL pointer deref when handling a dying cpu
    
    commit 7a22e03b0c02988e91003c505b34d752a51de344 upstream.
    
    Check that the per-cpu cluster mask pointer has been set prior to
    clearing a dying cpu's bit.  The per-cpu pointer is not set until the
    target cpu reaches smp_callin() during CPUHP_BRINGUP_CPU, whereas the
    teardown function, x2apic_dead_cpu(), is associated with the earlier
    CPUHP_X2APIC_PREPARE.  If an error occurs before the cpu is awakened,
    e.g. if do_boot_cpu() itself fails, x2apic_dead_cpu() will dereference
    the NULL pointer and cause a panic.
    
      smpboot: do_boot_cpu failed(-22) to wakeup CPU#1
      BUG: kernel NULL pointer dereference, address: 0000000000000008
      RIP: 0010:x2apic_dead_cpu+0x1a/0x30
      Call Trace:
       cpuhp_invoke_callback+0x9a/0x580
       _cpu_up+0x10d/0x140
       do_cpu_up+0x69/0xb0
       smp_init+0x63/0xa9
       kernel_init_freeable+0xd7/0x229
       ? rest_init+0xa0/0xa0
       kernel_init+0xa/0x100
       ret_from_fork+0x35/0x40
    
    Fixes: 023a611748fd5 ("x86/apic/x2apic: Simplify cluster management")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191001205019.5789-1-sean.j.christopherson@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1709917289cd1632251cb81cdacfaa93df1cee34
Author: Steve Wahl <steve.wahl@hpe.com>
Date:   Tue Sep 24 16:03:55 2019 -0500

    x86/boot/64: Make level2_kernel_pgt pages invalid outside kernel area
    
    commit 2aa85f246c181b1fa89f27e8e20c5636426be624 upstream.
    
    Our hardware (UV aka Superdome Flex) has address ranges marked
    reserved by the BIOS. Access to these ranges is caught as an error,
    causing the BIOS to halt the system.
    
    Initial page tables mapped a large range of physical addresses that
    were not checked against the list of BIOS reserved addresses, and
    sometimes included reserved addresses in part of the mapped range.
    Including the reserved range in the map allowed processor speculative
    accesses to the reserved range, triggering a BIOS halt.
    
    Used early in booting, the page table level2_kernel_pgt addresses 1
    GiB divided into 2 MiB pages, and it was set up to linearly map a full
     1 GiB of physical addresses that included the physical address range
    of the kernel image, as chosen by KASLR.  But this also included a
    large range of unused addresses on either side of the kernel image.
    And unlike the kernel image's physical address range, this extra
    mapped space was not checked against the BIOS tables of usable RAM
    addresses.  So there were times when the addresses chosen by KASLR
    would result in processor accessible mappings of BIOS reserved
    physical addresses.
    
    The kernel code did not directly access any of this extra mapped
    space, but having it mapped allowed the processor to issue speculative
    accesses into reserved memory, causing system halts.
    
    This was encountered somewhat rarely on a normal system boot, and much
    more often when starting the crash kernel if "crashkernel=512M,high"
    was specified on the command line (this heavily restricts the physical
    address of the crash kernel, in our case usually within 1 GiB of
    reserved space).
    
    The solution is to invalidate the pages of this table outside the kernel
    image's space before the page table is activated. It fixes this problem
    on our hardware.
    
     [ bp: Touchups. ]
    
    Signed-off-by: Steve Wahl <steve.wahl@hpe.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Brijesh Singh <brijesh.singh@amd.com>
    Cc: dimitri.sivanich@hpe.com
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jordan Borgner <mail@jordan-borgner.de>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: mike.travis@hpe.com
    Cc: russ.anderson@hpe.com
    Cc: stable@vger.kernel.org
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Cc: Zhenzhong Duan <zhenzhong.duan@oracle.com>
    Link: https://lkml.kernel.org/r/9c011ee51b081534a7a15065b1681d200298b530.1569358539.git.steve.wahl@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e49c84c51c3ab901c03fcfaa57b1d4df9cbe238e
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Oct 16 09:21:50 2019 -0400

    dm cache: fix bugs when a GFP_NOWAIT allocation fails
    
    commit 13bd677a472d534bf100bab2713efc3f9e3f5978 upstream.
    
    GFP_NOWAIT allocation can fail anytime - it doesn't wait for memory being
    available and it fails if the mempool is exhausted and there is not enough
    memory.
    
    If we go down this path:
      map_bio -> mg_start -> alloc_migration -> mempool_alloc(GFP_NOWAIT)
    we can see that map_bio() doesn't check the return value of mg_start(),
    and the bio is leaked.
    
    If we go down this path:
      map_bio -> mg_start -> mg_lock_writes -> alloc_prison_cell ->
      dm_bio_prison_alloc_cell_v2 -> mempool_alloc(GFP_NOWAIT) ->
      mg_lock_writes -> mg_complete
    the bio is ended with an error - it is unacceptable because it could
    cause filesystem corruption if the machine ran out of memory
    temporarily.
    
    Change GFP_NOWAIT to GFP_NOIO, so that the mempool code will properly
    wait until memory becomes available. mempool_alloc with GFP_NOIO can't
    fail, so remove the code paths that deal with allocation failure.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ce7528c4d4a1639530b6de98c92aa2a4d520ce9
Author: Prateek Sood <prsood@codeaurora.org>
Date:   Tue Oct 15 11:47:25 2019 +0530

    tracing: Fix race in perf_trace_buf initialization
    
    commit 6b1340cc00edeadd52ebd8a45171f38c8de2a387 upstream.
    
    A race condition exists while initialiazing perf_trace_buf from
    perf_trace_init() and perf_kprobe_init().
    
          CPU0                                        CPU1
    perf_trace_init()
      mutex_lock(&event_mutex)
        perf_trace_event_init()
          perf_trace_event_reg()
            total_ref_count == 0
            buf = alloc_percpu()
            perf_trace_buf[i] = buf
            tp_event->class->reg() //fails       perf_kprobe_init()
            goto fail                              perf_trace_event_init()
                                                     perf_trace_event_reg()
            fail:
              total_ref_count == 0
    
                                                       total_ref_count == 0
                                                       buf = alloc_percpu()
                                                       perf_trace_buf[i] = buf
                                                       tp_event->class->reg()
                                                       total_ref_count++
    
              free_percpu(perf_trace_buf[i])
              perf_trace_buf[i] = NULL
    
    Any subsequent call to perf_trace_event_reg() will observe total_ref_count > 0,
    causing the perf_trace_buf to be always NULL. This can result in perf_trace_buf
    getting accessed from perf_trace_buf_alloc() without being initialized. Acquiring
    event_mutex in perf_kprobe_init() before calling perf_trace_event_init() should
    fix this race.
    
    The race caused the following bug:
    
     Unable to handle kernel paging request at virtual address 0000003106f2003c
     Mem abort info:
       ESR = 0x96000045
       Exception class = DABT (current EL), IL = 32 bits
       SET = 0, FnV = 0
       EA = 0, S1PTW = 0
     Data abort info:
       ISV = 0, ISS = 0x00000045
       CM = 0, WnR = 1
     user pgtable: 4k pages, 39-bit VAs, pgdp = ffffffc034b9b000
     [0000003106f2003c] pgd=0000000000000000, pud=0000000000000000
     Internal error: Oops: 96000045 [#1] PREEMPT SMP
     Process syz-executor (pid: 18393, stack limit = 0xffffffc093190000)
     pstate: 80400005 (Nzcv daif +PAN -UAO)
     pc : __memset+0x20/0x1ac
     lr : memset+0x3c/0x50
     sp : ffffffc09319fc50
    
      __memset+0x20/0x1ac
      perf_trace_buf_alloc+0x140/0x1a0
      perf_trace_sys_enter+0x158/0x310
      syscall_trace_enter+0x348/0x7c0
      el0_svc_common+0x11c/0x368
      el0_svc_handler+0x12c/0x198
      el0_svc+0x8/0xc
    
    Ramdumps showed the following:
      total_ref_count = 3
      perf_trace_buf = (
          0x0 -> NULL,
          0x0 -> NULL,
          0x0 -> NULL,
          0x0 -> NULL)
    
    Link: http://lkml.kernel.org/r/1571120245-4186-1-git-send-email-prsood@codeaurora.org
    
    Cc: stable@vger.kernel.org
    Fixes: e12f03d7031a9 ("perf/core: Implement the 'perf_kprobe' PMU")
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Prateek Sood <prsood@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96202569b9fe58f6a2e73f6ace593fdd02b030c3
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Oct 22 10:39:40 2019 +0300

    perf/aux: Fix AUX output stopping
    
    commit f3a519e4add93b7b31a6616f0b09635ff2e6a159 upstream.
    
    Commit:
    
      8a58ddae2379 ("perf/core: Fix exclusive events' grouping")
    
    allows CAP_EXCLUSIVE events to be grouped with other events. Since all
    of those also happen to be AUX events (which is not the case the other
    way around, because arch/s390), this changes the rules for stopping the
    output: the AUX event may not be on its PMU's context any more, if it's
    grouped with a HW event, in which case it will be on that HW event's
    context instead. If that's the case, munmap() of the AUX buffer can't
    find and stop the AUX event, potentially leaving the last reference with
    the atomic context, which will then end up freeing the AUX buffer. This
    will then trip warnings:
    
    Fix this by using the context's PMU context when looking for events
    to stop, instead of the event's PMU context.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191022073940.61814-1-alexander.shishkin@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01332b03706686a8df32ed76ac564f679c3ad2e2
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Wed Oct 23 15:37:19 2019 -0700

    CIFS: Fix use after free of file info structures
    
    commit 1a67c415965752879e2e9fad407bc44fc7f25f23 upstream.
    
    Currently the code assumes that if a file info entry belongs
    to lists of open file handles of an inode and a tcon then
    it has non-zero reference. The recent changes broke that
    assumption when putting the last reference of the file info.
    There may be a situation when a file is being deleted but
    nothing prevents another thread to reference it again
    and start using it. This happens because we do not hold
    the inode list lock while checking the number of references
    of the file info structure. Fix this by doing the proper
    locking when doing the check.
    
    Fixes: 487317c99477d ("cifs: add spinlock for the openFileList to cifsInodeInfo")
    Fixes: cb248819d209d ("cifs: use cifsInodeInfo->open_file_lock while iterating to avoid a panic")
    Cc: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71cf88165ff0ac8c9dc570536542e409bea41281
Author: Roberto Bergantinos Corpas <rbergant@redhat.com>
Date:   Mon Oct 14 10:59:23 2019 +0200

    CIFS: avoid using MID 0xFFFF
    
    commit 03d9a9fe3f3aec508e485dd3dcfa1e99933b4bdb upstream.
    
    According to MS-CIFS specification MID 0xFFFF should not be used by the
    CIFS client, but we actually do. Besides, this has proven to cause races
    leading to oops between SendReceive2/cifs_demultiplex_thread. On SMB1,
    MID is a 2 byte value easy to reach in CurrentMid which may conflict with
    an oplock break notification request coming from server
    
    Signed-off-by: Roberto Bergantinos Corpas <rbergant@redhat.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4292745536d22a2320fe262fa181cb88ec9ba94a
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Apr 9 16:26:21 2019 +0100

    arm64: Enable workaround for Cavium TX2 erratum 219 when running SMT
    
    commit 93916beb70143c46bf1d2bacf814be3a124b253b upstream.
    
    It appears that the only case where we need to apply the TX2_219_TVM
    mitigation is when the core is in SMT mode. So let's condition the
    enabling on detecting a CPU whose MPIDR_EL1.Aff0 is non-zero.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d97e4a6d2b2f7c0895bbf0ea90be4fcd46df910c
Author: James Morse <james.morse@arm.com>
Date:   Mon Oct 14 18:19:18 2019 +0100

    EDAC/ghes: Fix Use after free in ghes_edac remove path
    
    commit 1e72e673b9d102ff2e8333e74b3308d012ddf75b upstream.
    
    ghes_edac models a single logical memory controller, and uses a global
    ghes_init variable to ensure only the first ghes_edac_register() will
    do anything.
    
    ghes_edac is registered the first time a GHES entry in the HEST is
    probed. There may be multiple entries, so subsequent attempts to
    register ghes_edac are silently ignored as the work has already been
    done.
    
    When a GHES entry is unregistered, it calls ghes_edac_unregister(),
    which free()s the memory behind the global variables in ghes_edac.
    
    But there may be multiple GHES entries, the next call to
    ghes_edac_unregister() will dereference the free()d memory, and attempt
    to free it a second time.
    
    This may also be triggered on a platform with one GHES entry, if the
    driver is unbound/re-bound and unbound. The re-bind step will do
    nothing because of ghes_init, the second unbind will then do the same
    work as the first.
    
    Doing the unregister work on the first call is unsafe, as another
    CPU may be processing a notification in ghes_edac_report_mem_error(),
    using the memory we are about to free.
    
    ghes_init is already half of the reference counting. We only need
    to do the register work for the first call, and the unregister work
    for the last. Add the unregister check.
    
    This means we no longer free ghes_edac's memory while there are
    GHES entries that may receive a notification.
    
    This was detected by KASAN and DEBUG_TEST_DRIVER_REMOVE.
    
     [ bp: merge into a single patch. ]
    
    Fixes: 0fe5f281f749 ("EDAC, ghes: Model a single, logical memory controller")
    Reported-by: John Garry <john.garry@huawei.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Robert Richter <rrichter@marvell.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20191014171919.85044-2-james.morse@arm.com
    Link: https://lkml.kernel.org/r/304df85b-8b56-b77e-1a11-aa23769f2e7c@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca65fe21981b36c4e8350ba9f400fe55d10be5a1
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 4 19:23:37 2019 +0200

    parisc: Fix vmap memory leak in ioremap()/iounmap()
    
    commit 513f7f747e1cba81f28a436911fba0b485878ebd upstream.
    
    Sven noticed that calling ioremap() and iounmap() multiple times leads
    to a vmap memory leak:
            vmap allocation for size 4198400 failed:
            use vmalloc=<size> to increase size
    
    It seems we missed calling vunmap() in iounmap().
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Noticed-by: Sven Schnelle <svens@stackframe.org>
    Cc: <stable@vger.kernel.org> # v3.16+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19e2ed7bfabec3c0310f711f258be515bf29d16f
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Oct 14 15:48:19 2019 -0700

    xtensa: drop EXPORT_SYMBOL for outs*/ins*
    
    commit 8b39da985194aac2998dd9e3a22d00b596cebf1e upstream.
    
    Custom outs*/ins* implementations are long gone from the xtensa port,
    remove matching EXPORT_SYMBOLs.
    This fixes the following build warnings issued by modpost since commit
    15bfc2348d54 ("modpost: check for static EXPORT_SYMBOL* functions"):
    
      WARNING: "insb" [vmlinux] is a static EXPORT_SYMBOL
      WARNING: "insw" [vmlinux] is a static EXPORT_SYMBOL
      WARNING: "insl" [vmlinux] is a static EXPORT_SYMBOL
      WARNING: "outsb" [vmlinux] is a static EXPORT_SYMBOL
      WARNING: "outsw" [vmlinux] is a static EXPORT_SYMBOL
      WARNING: "outsl" [vmlinux] is a static EXPORT_SYMBOL
    
    Cc: stable@vger.kernel.org
    Fixes: d38efc1f150f ("xtensa: adopt generic io routines")
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30cff8ab6ed71829772a1d63ffded28157a13cbc
Author: Jane Chu <jane.chu@oracle.com>
Date:   Mon Oct 14 14:12:29 2019 -0700

    mm/memory-failure: poison read receives SIGKILL instead of SIGBUS if mmaped more than once
    
    commit 3d7fed4ad8ccb691d217efbb0f934e6a4df5ef91 upstream.
    
    Mmap /dev/dax more than once, then read the poison location using
    address from one of the mappings.  The other mappings due to not having
    the page mapped in will cause SIGKILLs delivered to the process.
    SIGKILL succeeds over SIGBUS, so user process loses the opportunity to
    handle the UE.
    
    Although one may add MAP_POPULATE to mmap(2) to work around the issue,
    MAP_POPULATE makes mapping 128GB of pmem several magnitudes slower, so
    isn't always an option.
    
    Details -
    
      ndctl inject-error --block=10 --count=1 namespace6.0
    
      ./read_poison -x dax6.0 -o 5120 -m 2
      mmaped address 0x7f5bb6600000
      mmaped address 0x7f3cf3600000
      doing local read at address 0x7f3cf3601400
      Killed
    
    Console messages in instrumented kernel -
    
      mce: Uncorrected hardware memory error in user-access at edbe201400
      Memory failure: tk->addr = 7f5bb6601000
      Memory failure: address edbe201: call dev_pagemap_mapping_shift
      dev_pagemap_mapping_shift: page edbe201: no PUD
      Memory failure: tk->size_shift == 0
      Memory failure: Unable to find user space address edbe201 in read_poison
      Memory failure: tk->addr = 7f3cf3601000
      Memory failure: address edbe201: call dev_pagemap_mapping_shift
      Memory failure: tk->size_shift = 21
      Memory failure: 0xedbe201: forcibly killing read_poison:22434 because of failure to unmap corrupted page
        => to deliver SIGKILL
      Memory failure: 0xedbe201: Killing read_poison:22434 due to hardware memory corruption
        => to deliver SIGBUS
    
    Link: http://lkml.kernel.org/r/1565112345-28754-3-git-send-email-jane.chu@oracle.com
    Signed-off-by: Jane Chu <jane.chu@oracle.com>
    Suggested-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91eec7692b94cc249af34c7de6d153a372f001b1
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Oct 18 20:20:05 2019 -0700

    hugetlbfs: don't access uninitialized memmaps in pfn_range_valid_gigantic()
    
    commit f231fe4235e22e18d847e05cbe705deaca56580a upstream.
    
    Uninitialized memmaps contain garbage and in the worst case trigger
    kernel BUGs, especially with CONFIG_PAGE_POISONING.  They should not get
    touched.
    
    Let's make sure that we only consider online memory (managed by the
    buddy) that has initialized memmaps.  ZONE_DEVICE is not applicable.
    
    page_zone() will call page_to_nid(), which will trigger
    VM_BUG_ON_PGFLAGS(PagePoisoned(page), page) with CONFIG_PAGE_POISONING
    and CONFIG_DEBUG_VM_PGFLAGS when called on uninitialized memmaps.  This
    can be the case when an offline memory block (e.g., never onlined) is
    spanned by a zone.
    
    Note: As explained by Michal in [1], alloc_contig_range() will verify
    the range.  So it boils down to the wrong access in this function.
    
    [1] http://lkml.kernel.org/r/20180423000943.GO17484@dhcp22.suse.cz
    
    Link: http://lkml.kernel.org/r/20191015120717.4858-1-david@redhat.com
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online")      [visible after d0dc12e86b319]
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reported-by: Michal Hocko <mhocko@kernel.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: <stable@vger.kernel.org>    [4.13+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f712e3066f75996f49b60145f0329f9e078eeabd
Author: Qian Cai <cai@lca.pw>
Date:   Fri Oct 18 20:19:29 2019 -0700

    mm/page_owner: don't access uninitialized memmaps when reading /proc/pagetypeinfo
    
    commit a26ee565b6cd8dc2bf15ff6aa70bbb28f928b773 upstream.
    
    Uninitialized memmaps contain garbage and in the worst case trigger
    kernel BUGs, especially with CONFIG_PAGE_POISONING.  They should not get
    touched.
    
    For example, when not onlining a memory block that is spanned by a zone
    and reading /proc/pagetypeinfo with CONFIG_DEBUG_VM_PGFLAGS and
    CONFIG_PAGE_POISONING, we can trigger a kernel BUG:
    
      :/# echo 1 > /sys/devices/system/memory/memory40/online
      :/# echo 1 > /sys/devices/system/memory/memory42/online
      :/# cat /proc/pagetypeinfo > test.file
       page:fffff2c585200000 is uninitialized and poisoned
       raw: ffffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffff
       raw: ffffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffff
       page dumped because: VM_BUG_ON_PAGE(PagePoisoned(p))
       There is not page extension available.
       ------------[ cut here ]------------
       kernel BUG at include/linux/mm.h:1107!
       invalid opcode: 0000 [#1] SMP NOPTI
    
    Please note that this change does not affect ZONE_DEVICE, because
    pagetypeinfo_showmixedcount_print() is called from
    mm/vmstat.c:pagetypeinfo_showmixedcount() only for populated zones, and
    ZONE_DEVICE is never populated (zone->present_pages always 0).
    
    [david@redhat.com: move check to outer loop, add comment, rephrase description]
    Link: http://lkml.kernel.org/r/20191011140638.8160-1-david@redhat.com
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online") # visible after d0dc12e86b319
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
    Cc: Miles Chen <miles.chen@mediatek.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: <stable@vger.kernel.org>    [4.13+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb6932c5a473c7680c5e202a10f338c434d8a026
Author: Qian Cai <cai@lca.pw>
Date:   Mon Oct 14 14:11:51 2019 -0700

    mm/slub: fix a deadlock in show_slab_objects()
    
    commit e4f8e513c3d353c134ad4eef9fd0bba12406c7c8 upstream.
    
    A long time ago we fixed a similar deadlock in show_slab_objects() [1].
    However, it is apparently due to the commits like 01fb58bcba63 ("slab:
    remove synchronous synchronize_sched() from memcg cache deactivation
    path") and 03afc0e25f7f ("slab: get_online_mems for
    kmem_cache_{create,destroy,shrink}"), this kind of deadlock is back by
    just reading files in /sys/kernel/slab which will generate a lockdep
    splat below.
    
    Since the "mem_hotplug_lock" here is only to obtain a stable online node
    mask while racing with NUMA node hotplug, in the worst case, the results
    may me miscalculated while doing NUMA node hotplug, but they shall be
    corrected by later reads of the same files.
    
      WARNING: possible circular locking dependency detected
      ------------------------------------------------------
      cat/5224 is trying to acquire lock:
      ffff900012ac3120 (mem_hotplug_lock.rw_sem){++++}, at:
      show_slab_objects+0x94/0x3a8
    
      but task is already holding lock:
      b8ff009693eee398 (kn->count#45){++++}, at: kernfs_seq_start+0x44/0xf0
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #2 (kn->count#45){++++}:
             lock_acquire+0x31c/0x360
             __kernfs_remove+0x290/0x490
             kernfs_remove+0x30/0x44
             sysfs_remove_dir+0x70/0x88
             kobject_del+0x50/0xb0
             sysfs_slab_unlink+0x2c/0x38
             shutdown_cache+0xa0/0xf0
             kmemcg_cache_shutdown_fn+0x1c/0x34
             kmemcg_workfn+0x44/0x64
             process_one_work+0x4f4/0x950
             worker_thread+0x390/0x4bc
             kthread+0x1cc/0x1e8
             ret_from_fork+0x10/0x18
    
      -> #1 (slab_mutex){+.+.}:
             lock_acquire+0x31c/0x360
             __mutex_lock_common+0x16c/0xf78
             mutex_lock_nested+0x40/0x50
             memcg_create_kmem_cache+0x38/0x16c
             memcg_kmem_cache_create_func+0x3c/0x70
             process_one_work+0x4f4/0x950
             worker_thread+0x390/0x4bc
             kthread+0x1cc/0x1e8
             ret_from_fork+0x10/0x18
    
      -> #0 (mem_hotplug_lock.rw_sem){++++}:
             validate_chain+0xd10/0x2bcc
             __lock_acquire+0x7f4/0xb8c
             lock_acquire+0x31c/0x360
             get_online_mems+0x54/0x150
             show_slab_objects+0x94/0x3a8
             total_objects_show+0x28/0x34
             slab_attr_show+0x38/0x54
             sysfs_kf_seq_show+0x198/0x2d4
             kernfs_seq_show+0xa4/0xcc
             seq_read+0x30c/0x8a8
             kernfs_fop_read+0xa8/0x314
             __vfs_read+0x88/0x20c
             vfs_read+0xd8/0x10c
             ksys_read+0xb0/0x120
             __arm64_sys_read+0x54/0x88
             el0_svc_handler+0x170/0x240
             el0_svc+0x8/0xc
    
      other info that might help us debug this:
    
      Chain exists of:
        mem_hotplug_lock.rw_sem --> slab_mutex --> kn->count#45
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(kn->count#45);
                                     lock(slab_mutex);
                                     lock(kn->count#45);
        lock(mem_hotplug_lock.rw_sem);
    
       *** DEADLOCK ***
    
      3 locks held by cat/5224:
       #0: 9eff00095b14b2a0 (&p->lock){+.+.}, at: seq_read+0x4c/0x8a8
       #1: 0eff008997041480 (&of->mutex){+.+.}, at: kernfs_seq_start+0x34/0xf0
       #2: b8ff009693eee398 (kn->count#45){++++}, at:
      kernfs_seq_start+0x44/0xf0
    
      stack backtrace:
      Call trace:
       dump_backtrace+0x0/0x248
       show_stack+0x20/0x2c
       dump_stack+0xd0/0x140
       print_circular_bug+0x368/0x380
       check_noncircular+0x248/0x250
       validate_chain+0xd10/0x2bcc
       __lock_acquire+0x7f4/0xb8c
       lock_acquire+0x31c/0x360
       get_online_mems+0x54/0x150
       show_slab_objects+0x94/0x3a8
       total_objects_show+0x28/0x34
       slab_attr_show+0x38/0x54
       sysfs_kf_seq_show+0x198/0x2d4
       kernfs_seq_show+0xa4/0xcc
       seq_read+0x30c/0x8a8
       kernfs_fop_read+0xa8/0x314
       __vfs_read+0x88/0x20c
       vfs_read+0xd8/0x10c
       ksys_read+0xb0/0x120
       __arm64_sys_read+0x54/0x88
       el0_svc_handler+0x170/0x240
       el0_svc+0x8/0xc
    
    I think it is important to mention that this doesn't expose the
    show_slab_objects to use-after-free.  There is only a single path that
    might really race here and that is the slab hotplug notifier callback
    __kmem_cache_shrink (via slab_mem_going_offline_callback) but that path
    doesn't really destroy kmem_cache_node data structures.
    
    [1] http://lkml.iu.edu/hypermail/linux/kernel/1101.0/02850.html
    
    [akpm@linux-foundation.org: add comment explaining why we don't need mem_hotplug_lock]
    Link: http://lkml.kernel.org/r/1570192309-10132-1-git-send-email-cai@lca.pw
    Fixes: 01fb58bcba63 ("slab: remove synchronous synchronize_sched() from memcg cache deactivation path")
    Fixes: 03afc0e25f7f ("slab: get_online_mems for kmem_cache_{create,destroy,shrink}")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9792afbd630bd4a558f90454438dfc5e45e20ef0
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Oct 18 20:19:23 2019 -0700

    mm/memory-failure.c: don't access uninitialized memmaps in memory_failure()
    
    commit 96c804a6ae8c59a9092b3d5dd581198472063184 upstream.
    
    We should check for pfn_to_online_page() to not access uninitialized
    memmaps.  Reshuffle the code so we don't have to duplicate the error
    message.
    
    Link: http://lkml.kernel.org/r/20191009142435.3975-3-david@redhat.com
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online")      [visible after d0dc12e86b319]
    Acked-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.13+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01a44055a48aaf802382c27d96150bfe5630904d
Author: Faiz Abbas <faiz_abbas@ti.com>
Date:   Tue Oct 15 00:08:49 2019 +0530

    mmc: cqhci: Commit descriptors before setting the doorbell
    
    commit c07d0073b9ec80a139d07ebf78e9c30d2a28279e upstream.
    
    Add a write memory barrier to make sure that descriptors are actually
    written to memory, before ringing the doorbell.
    
    Signed-off-by: Faiz Abbas <faiz_abbas@ti.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ea856efef9f5c5a1a8e558ce67f72b37e2cd2a9
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Oct 18 20:19:20 2019 -0700

    fs/proc/page.c: don't access uninitialized memmaps in fs/proc/page.c
    
    commit aad5f69bc161af489dbb5934868bd347282f0764 upstream.
    
    There are three places where we access uninitialized memmaps, namely:
    - /proc/kpagecount
    - /proc/kpageflags
    - /proc/kpagecgroup
    
    We have initialized memmaps either when the section is online or when the
    page was initialized to the ZONE_DEVICE.  Uninitialized memmaps contain
    garbage and in the worst case trigger kernel BUGs, especially with
    CONFIG_PAGE_POISONING.
    
    For example, not onlining a DIMM during boot and calling /proc/kpagecount
    with CONFIG_PAGE_POISONING:
    
      :/# cat /proc/kpagecount > tmp.test
      BUG: unable to handle page fault for address: fffffffffffffffe
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 114616067 P4D 114616067 PUD 114618067 PMD 0
      Oops: 0000 [#1] SMP NOPTI
      CPU: 0 PID: 469 Comm: cat Not tainted 5.4.0-rc1-next-20191004+ #11
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.4
      RIP: 0010:kpagecount_read+0xce/0x1e0
      Code: e8 09 83 e0 3f 48 0f a3 02 73 2d 4c 89 e7 48 c1 e7 06 48 03 3d ab 51 01 01 74 1d 48 8b 57 08 480
      RSP: 0018:ffffa14e409b7e78 EFLAGS: 00010202
      RAX: fffffffffffffffe RBX: 0000000000020000 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: 00007f76b5595000 RDI: fffff35645000000
      RBP: 00007f76b5595000 R08: 0000000000000001 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000140000
      R13: 0000000000020000 R14: 00007f76b5595000 R15: ffffa14e409b7f08
      FS:  00007f76b577d580(0000) GS:ffff8f41bd400000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: fffffffffffffffe CR3: 0000000078960000 CR4: 00000000000006f0
      Call Trace:
       proc_reg_read+0x3c/0x60
       vfs_read+0xc5/0x180
       ksys_read+0x68/0xe0
       do_syscall_64+0x5c/0xa0
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    For now, let's drop support for ZONE_DEVICE from the three pseudo files
    in order to fix this.  To distinguish offline memory (with garbage
    memmap) from ZONE_DEVICE memory with properly initialized memmaps, we
    would have to check get_dev_pagemap() and pfn_zone_device_reserved()
    right now.  The usage of both (especially, special casing devmem) is
    frowned upon and needs to be reworked.
    
    The fundamental issue we have is:
    
            if (pfn_to_online_page(pfn)) {
                    /* memmap initialized */
            } else if (pfn_valid(pfn)) {
                    /*
                     * ???
                     * a) offline memory. memmap garbage.
                     * b) devmem: memmap initialized to ZONE_DEVICE.
                     * c) devmem: reserved for driver. memmap garbage.
                     * (d) devmem: memmap currently initializing - garbage)
                     */
            }
    
    We'll leave the pfn_zone_device_reserved() check in stable_page_flags()
    in place as that function is also used from memory failure.  We now no
    longer dump information about pages that are not in use anymore -
    offline.
    
    Link: http://lkml.kernel.org/r/20191009142435.3975-2-david@redhat.com
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online")      [visible after d0dc12e86b319]
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reported-by: Qian Cai <cai@lca.pw>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Toshiki Fukasawa <t-fukasawa@vx.jp.nec.com>
    Cc: Pankaj gupta <pagupta@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Anthony Yznaga <anthony.yznaga@oracle.com>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
    Cc: <stable@vger.kernel.org>    [4.13+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43a2a6c2f0fb0cf76fe8850cb054f63a8c8c7dbb
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Oct 18 20:19:16 2019 -0700

    drivers/base/memory.c: don't access uninitialized memmaps in soft_offline_page_store()
    
    commit 641fe2e9387a36f9ee01d7c69382d1fe147a5e98 upstream.
    
    Uninitialized memmaps contain garbage and in the worst case trigger kernel
    BUGs, especially with CONFIG_PAGE_POISONING.  They should not get touched.
    
    Right now, when trying to soft-offline a PFN that resides on a memory
    block that was never onlined, one gets a misleading error with
    CONFIG_PAGE_POISONING:
    
      :/# echo 5637144576 > /sys/devices/system/memory/soft_offline_page
      [   23.097167] soft offline: 0x150000 page already poisoned
    
    But the actual result depends on the garbage in the memmap.
    
    soft_offline_page() can only work with online pages, it returns -EIO in
    case of ZONE_DEVICE.  Make sure to only forward pages that are online
    (iow, managed by the buddy) and, therefore, have an initialized memmap.
    
    Add a check against pfn_to_online_page() and similarly return -EIO.
    
    Link: http://lkml.kernel.org/r/20191010141200.8985-1-david@redhat.com
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online")      [visible after d0dc12e86b319]
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Acked-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.13+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d5307c099afc9ce5fe89e8acf9b3c65104d0e08
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Oct 10 18:28:17 2019 +0200

    drm/amdgpu: Bail earlier when amdgpu.cik_/si_support is not set to 1
    
    commit 984d7a929ad68b7be9990fc9c5cfa5d5c9fc7942 upstream.
    
    Bail from the pci_driver probe function instead of from the drm_driver
    load function.
    
    This avoid /dev/dri/card0 temporarily getting registered and then
    unregistered again, sending unwanted add / remove udev events to
    userspace.
    
    Specifically this avoids triggering the (userspace) bug fixed by this
    plymouth merge-request:
    https://gitlab.freedesktop.org/plymouth/plymouth/merge_requests/59
    
    Note that despite that being a userspace bug, not sending unnecessary
    udev events is a good idea in general.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1490490
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11377c3e997eca9c9ff562fc4fc7a41a455bddf6
Author: Thomas Hellstrom <thellstrom@vmware.com>
Date:   Thu Sep 12 20:38:54 2019 +0200

    drm/ttm: Restore ttm prefaulting
    
    commit 941f2f72dbbe0cf8c2d6e0b180a8021a0ec477fa upstream.
    
    Commit 4daa4fba3a38 ("gpu: drm: ttm: Adding new return type vm_fault_t")
    broke TTM prefaulting. Since vmf_insert_mixed() typically always returns
    VM_FAULT_NOPAGE, prefaulting stops after the second PTE.
    
    Restore (almost) the original behaviour. Unfortunately we can no longer
    with the new vm_fault_t return type determine whether a prefaulting
    PTE insertion hit an already populated PTE, and terminate the insertion
    loop. Instead we continue with the pre-determined number of prefaults.
    
    Fixes: 4daa4fba3a38 ("gpu: drm: ttm: Adding new return type vm_fault_t")
    Cc: Souptick Joarder <jrdr.linux@gmail.com>
    Cc: Christian König <christian.koenig@amd.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Link: https://patchwork.freedesktop.org/patch/330387/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33af2a8ee304ee2deb618eebb534b52ce166467f
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Apr 2 11:30:37 2019 +0800

    drm/edid: Add 6 bpc quirk for SDC panel in Lenovo G50
    
    commit 11bcf5f78905b90baae8fb01e16650664ed0cb00 upstream.
    
    Another panel that needs 6BPC quirk.
    
    BugLink: https://bugs.launchpad.net/bugs/1819968
    Cc: <stable@vger.kernel.org> # v4.8+
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190402033037.21877-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24ca6289203266875c35d018ab01b872e302a6d6
Author: Will Deacon <will@kernel.org>
Date:   Fri Oct 4 10:51:31 2019 +0100

    mac80211: Reject malformed SSID elements
    
    commit 4152561f5da3fca92af7179dd538ea89e248f9d0 upstream.
    
    Although this shouldn't occur in practice, it's a good idea to bounds
    check the length field of the SSID element prior to using it for things
    like allocations or memcpy operations.
    
    Cc: <stable@vger.kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Reported-by: Nicolas Waisman <nico@semmle.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20191004095132.15777-1-will@kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73c066a9552a6d33ed7de002855337d1c966e8ce
Author: Will Deacon <will@kernel.org>
Date:   Fri Oct 4 10:51:32 2019 +0100

    cfg80211: wext: avoid copying malformed SSIDs
    
    commit 4ac2813cc867ae563a1ba5a9414bfb554e5796fa upstream.
    
    Ensure the SSID element is bounds-checked prior to invoking memcpy()
    with its length field, when copying to userspace.
    
    Cc: <stable@vger.kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Reported-by: Nicolas Waisman <nico@semmle.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20191004095132.15777-2-will@kernel.org
    [adjust commit log a bit]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83dc16707f6d6fc4f3ffebcfbbd6faf4847f15fe
Author: John Garry <john.garry@huawei.com>
Date:   Tue Oct 15 22:07:31 2019 +0800

    ACPI: CPPC: Set pcc_data[pcc_ss_id] to NULL in acpi_cppc_processor_exit()
    
    commit 56a0b978d42f58c7e3ba715cf65af487d427524d upstream.
    
    When enabling KASAN and DEBUG_TEST_DRIVER_REMOVE, I find this KASAN
    warning:
    
    [   20.872057] BUG: KASAN: use-after-free in pcc_data_alloc+0x40/0xb8
    [   20.878226] Read of size 4 at addr ffff00236cdeb684 by task swapper/0/1
    [   20.884826]
    [   20.886309] CPU: 19 PID: 1 Comm: swapper/0 Not tainted 5.4.0-rc1-00009-ge7f7df3db5bf-dirty #289
    [   20.894994] Hardware name: Huawei D06 /D06, BIOS Hisilicon D06 UEFI RC0 - V1.16.01 03/15/2019
    [   20.903505] Call trace:
    [   20.905942]  dump_backtrace+0x0/0x200
    [   20.909593]  show_stack+0x14/0x20
    [   20.912899]  dump_stack+0xd4/0x130
    [   20.916291]  print_address_description.isra.9+0x6c/0x3b8
    [   20.921592]  __kasan_report+0x12c/0x23c
    [   20.925417]  kasan_report+0xc/0x18
    [   20.928808]  __asan_load4+0x94/0xb8
    [   20.932286]  pcc_data_alloc+0x40/0xb8
    [   20.935938]  acpi_cppc_processor_probe+0x4e8/0xb08
    [   20.940717]  __acpi_processor_start+0x48/0xb0
    [   20.945062]  acpi_processor_start+0x40/0x60
    [   20.949235]  really_probe+0x118/0x548
    [   20.952887]  driver_probe_device+0x7c/0x148
    [   20.957059]  device_driver_attach+0x94/0xa0
    [   20.961231]  __driver_attach+0xa4/0x110
    [   20.965055]  bus_for_each_dev+0xe8/0x158
    [   20.968966]  driver_attach+0x30/0x40
    [   20.972531]  bus_add_driver+0x234/0x2f0
    [   20.976356]  driver_register+0xbc/0x1d0
    [   20.980182]  acpi_processor_driver_init+0x40/0xe4
    [   20.984875]  do_one_initcall+0xb4/0x254
    [   20.988700]  kernel_init_freeable+0x24c/0x2f8
    [   20.993047]  kernel_init+0x10/0x118
    [   20.996524]  ret_from_fork+0x10/0x18
    [   21.000087]
    [   21.001567] Allocated by task 1:
    [   21.004785]  save_stack+0x28/0xc8
    [   21.008089]  __kasan_kmalloc.isra.9+0xbc/0xd8
    [   21.012435]  kasan_kmalloc+0xc/0x18
    [   21.015913]  pcc_data_alloc+0x94/0xb8
    [   21.019564]  acpi_cppc_processor_probe+0x4e8/0xb08
    [   21.024343]  __acpi_processor_start+0x48/0xb0
    [   21.028689]  acpi_processor_start+0x40/0x60
    [   21.032860]  really_probe+0x118/0x548
    [   21.036512]  driver_probe_device+0x7c/0x148
    [   21.040684]  device_driver_attach+0x94/0xa0
    [   21.044855]  __driver_attach+0xa4/0x110
    [   21.048680]  bus_for_each_dev+0xe8/0x158
    [   21.052591]  driver_attach+0x30/0x40
    [   21.056155]  bus_add_driver+0x234/0x2f0
    [   21.059980]  driver_register+0xbc/0x1d0
    [   21.063805]  acpi_processor_driver_init+0x40/0xe4
    [   21.068497]  do_one_initcall+0xb4/0x254
    [   21.072322]  kernel_init_freeable+0x24c/0x2f8
    [   21.076667]  kernel_init+0x10/0x118
    [   21.080144]  ret_from_fork+0x10/0x18
    [   21.083707]
    [   21.085186] Freed by task 1:
    [   21.088056]  save_stack+0x28/0xc8
    [   21.091360]  __kasan_slab_free+0x118/0x180
    [   21.095445]  kasan_slab_free+0x10/0x18
    [   21.099183]  kfree+0x80/0x268
    [   21.102139]  acpi_cppc_processor_exit+0x1a8/0x1b8
    [   21.106832]  acpi_processor_stop+0x70/0x80
    [   21.110917]  really_probe+0x174/0x548
    [   21.114568]  driver_probe_device+0x7c/0x148
    [   21.118740]  device_driver_attach+0x94/0xa0
    [   21.122912]  __driver_attach+0xa4/0x110
    [   21.126736]  bus_for_each_dev+0xe8/0x158
    [   21.130648]  driver_attach+0x30/0x40
    [   21.134212]  bus_add_driver+0x234/0x2f0
    [   21.0x10/0x18
    [   21.161764]
    [   21.163244] The buggy address belongs to the object at ffff00236cdeb600
    [   21.163244]  which belongs to the cache kmalloc-256 of size 256
    [   21.175750] The buggy address is located 132 bytes inside of
    [   21.175750]  256-byte region [ffff00236cdeb600, ffff00236cdeb700)
    [   21.187473] The buggy address belongs to the page:
    [   21.192254] page:fffffe008d937a00 refcount:1 mapcount:0 mapping:ffff002370c0fa00 index:0x0 compound_mapcount: 0
    [   21.202331] flags: 0x1ffff00000010200(slab|head)
    [   21.206940] raw: 1ffff00000010200 dead000000000100 dead000000000122 ffff002370c0fa00
    [   21.214671] raw: 0000000000000000 00000000802a002a 00000001ffffffff 0000000000000000
    [   21.222400] page dumped because: kasan: bad access detected
    [   21.227959]
    [   21.229438] Memory state around the buggy address:
    [   21.234218]  ffff00236cdeb580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   21.241427]  ffff00236cdeb600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   21.248637] >ffff00236cdeb680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   21.255845]                    ^
    [   21.259062]  ffff00236cdeb700: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   21.266272]  ffff00236cdeb780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   21.273480] ==================================================================
    
    It seems that global pcc_data[pcc_ss_id] can be freed in
    acpi_cppc_processor_exit(), but we may later reference this value, so
    NULLify it when freed.
    
    Also remove the useless setting of data "pcc_channel_acquired", which
    we're about to free.
    
    Fixes: 85b1407bf6d2 ("ACPI / CPPC: Make CPPC ACPI driver aware of PCC subspace IDs")
    Signed-off-by: John Garry <john.garry@huawei.com>
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e367b029e61d9fdbb16844df2124cfdc686af4b
Author: Junya Monden <jmonden@jp.adit-jv.com>
Date:   Wed Oct 16 14:42:55 2019 +0200

    ASoC: rsnd: Reinitialize bit clock inversion flag for every format setting
    
    commit 22e58665a01006d05f0239621f7d41cacca96cc4 upstream.
    
    Unlike other format-related DAI parameters, rdai->bit_clk_inv flag
    is not properly re-initialized when setting format for new stream
    processing. The inversion, if requested, is then applied not to default,
    but to a previous value, which leads to SCKP bit in SSICR register being
    set incorrectly.
    Fix this by re-setting the flag to its initial value, determined by format.
    
    Fixes: 1a7889ca8aba3 ("ASoC: rsnd: fixup SND_SOC_DAIFMT_xB_xF behavior")
    Cc: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Cc: Jiada Wang <jiada_wang@mentor.com>
    Cc: Timo Wischer <twischer@de.adit-jv.com>
    Cc: stable@vger.kernel.org # v3.17+
    Signed-off-by: Junya Monden <jmonden@jp.adit-jv.com>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/20191016124255.7442-1-erosca@de.adit-jv.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0dd6a24255e9ac75395062adbdfc991b09bdea9
Author: Evan Green <evgreen@chromium.org>
Date:   Fri Oct 11 17:22:09 2019 -0700

    Input: synaptics-rmi4 - avoid processing unknown IRQs
    
    commit 363c53875aef8fce69d4a2d0873919ccc7d9e2ad upstream.
    
    rmi_process_interrupt_requests() calls handle_nested_irq() for
    each interrupt status bit it finds. If the irq domain mapping for
    this bit had not yet been set up, then it ends up calling
    handle_nested_irq(0), which causes a NULL pointer dereference.
    
    There's already code that masks the irq_status bits coming out of the
    hardware with current_irq_mask, presumably to avoid this situation.
    However current_irq_mask seems to more reflect the actual mask set
    in the hardware rather than the IRQs software has set up and registered
    for. For example, in rmi_driver_reset_handler(), the current_irq_mask
    is initialized based on what is read from the hardware. If the reset
    value of this mask enables IRQs that Linux has not set up yet, then
    we end up in this situation.
    
    There appears to be a third unused bitmask that used to serve this
    purpose, fn_irq_bits. Use that bitmask instead of current_irq_mask
    to avoid calling handle_nested_irq() on IRQs that have not yet been
    set up.
    
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Andrew Duggan <aduggan@synaptics.com>
    Link: https://lore.kernel.org/r/20191008223657.163366-1-evgreen@chromium.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa9402c14df686f477264d65f48ac9e0064ece7f
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Mon Sep 16 12:45:48 2019 -0700

    Input: da9063 - fix capability and drop KEY_SLEEP
    
    commit afce285b859cea91c182015fc9858ea58c26cd0e upstream.
    
    Since commit f889beaaab1c ("Input: da9063 - report KEY_POWER instead of
    KEY_SLEEP during power key-press") KEY_SLEEP isn't supported anymore. This
    caused input device to not generate any events if "dlg,disable-key-power"
    is set.
    
    Fix this by unconditionally setting KEY_POWER capability, and not
    declaring KEY_SLEEP.
    
    Fixes: f889beaaab1c ("Input: da9063 - report KEY_POWER instead of KEY_SLEEP during power key-press")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e254d435925928d0741ca510fad82c81287f2c8a
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Oct 9 10:35:36 2019 -0700

    scsi: ch: Make it possible to open a ch device multiple times again
    
    commit 6a0990eaa768dfb7064f06777743acc6d392084b upstream.
    
    Clearing ch->device in ch_release() is wrong because that pointer must
    remain valid until ch_remove() is called. This patch fixes the following
    crash the second time a ch device is opened:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000790
    RIP: 0010:scsi_device_get+0x5/0x60
    Call Trace:
     ch_open+0x4c/0xa0 [ch]
     chrdev_open+0xa2/0x1c0
     do_dentry_open+0x13a/0x380
     path_openat+0x591/0x1470
     do_filp_open+0x91/0x100
     do_sys_open+0x184/0x220
     do_syscall_64+0x5f/0x1a0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 085e56766f74 ("scsi: ch: add refcounting")
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191009173536.247889-1-bvanassche@acm.org
    Reported-by: Rob Turk <robtu@rtist.nl>
    Suggested-by: Rob Turk <robtu@rtist.nl>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c6905197c5ba2bb481058a74c235394a4203e8a
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Tue Oct 15 21:05:56 2019 +0800

    scsi: core: try to get module before removing device
    
    commit 77c301287ebae86cc71d03eb3806f271cb14da79 upstream.
    
    We have a test case like block/001 in blktests, which will create a scsi
    device by loading scsi_debug module and then try to delete the device by
    sysfs interface. At the same time, it may remove the scsi_debug module.
    
    And getting a invalid paging request BUG_ON as following:
    
    [   34.625854] BUG: unable to handle page fault for address: ffffffffa0016bb8
    [   34.629189] Oops: 0000 [#1] SMP PTI
    [   34.629618] CPU: 1 PID: 450 Comm: bash Tainted: G        W         5.4.0-rc3+ #473
    [   34.632524] RIP: 0010:scsi_proc_hostdir_rm+0x5/0xa0
    [   34.643555] CR2: ffffffffa0016bb8 CR3: 000000012cd88000 CR4: 00000000000006e0
    [   34.644545] Call Trace:
    [   34.644907]  scsi_host_dev_release+0x6b/0x1f0
    [   34.645511]  device_release+0x74/0x110
    [   34.646046]  kobject_put+0x116/0x390
    [   34.646559]  put_device+0x17/0x30
    [   34.647041]  scsi_target_dev_release+0x2b/0x40
    [   34.647652]  device_release+0x74/0x110
    [   34.648186]  kobject_put+0x116/0x390
    [   34.648691]  put_device+0x17/0x30
    [   34.649157]  scsi_device_dev_release_usercontext+0x2e8/0x360
    [   34.649953]  execute_in_process_context+0x29/0x80
    [   34.650603]  scsi_device_dev_release+0x20/0x30
    [   34.651221]  device_release+0x74/0x110
    [   34.651732]  kobject_put+0x116/0x390
    [   34.652230]  sysfs_unbreak_active_protection+0x3f/0x50
    [   34.652935]  sdev_store_delete.cold.4+0x71/0x8f
    [   34.653579]  dev_attr_store+0x1b/0x40
    [   34.654103]  sysfs_kf_write+0x3d/0x60
    [   34.654603]  kernfs_fop_write+0x174/0x250
    [   34.655165]  __vfs_write+0x1f/0x60
    [   34.655639]  vfs_write+0xc7/0x280
    [   34.656117]  ksys_write+0x6d/0x140
    [   34.656591]  __x64_sys_write+0x1e/0x30
    [   34.657114]  do_syscall_64+0xb1/0x400
    [   34.657627]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   34.658335] RIP: 0033:0x7f156f337130
    
    During deleting scsi target, the scsi_debug module have been removed. Then,
    sdebug_driver_template belonged to the module cannot be accessd, resulting
    in scsi_proc_hostdir_rm() BUG_ON.
    
    To fix the bug, we add scsi_device_get() in sdev_store_delete() to try to
    increase refcount of module, avoiding the module been removed.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191015130556.18061-1-yuyufen@huawei.com
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a675e73dfec484797eecb49fd89a433782cd610
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Tue Oct 1 16:48:39 2019 +0900

    scsi: core: save/restore command resid for error handling
    
    commit 8f8fed0cdbbd6cdbf28d9ebe662f45765d2f7d39 upstream.
    
    When a non-passthrough command is terminated with CHECK CONDITION, request
    sense is executed by hijacking the command descriptor. Since
    scsi_eh_prep_cmnd() and scsi_eh_restore_cmnd() do not save/restore the
    original command resid, the value returned on failure of the original
    command is lost and replaced with the value set by the execution of the
    request sense command. This value may in many instances be unaligned to the
    device sector size, causing sd_done() to print a warning message about the
    incorrect unaligned resid before the command is retried.
    
    Fix this problem by saving the original command residual in struct
    scsi_eh_save using scsi_eh_prep_cmnd() and restoring it in
    scsi_eh_restore_cmnd(). In addition, to make sure that the request sense
    command is executed with a correctly initialized command structure, also
    reset the residual to 0 in scsi_eh_prep_cmnd() after saving the original
    command value in struct scsi_eh_save.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191001074839.1994-1-damien.lemoal@wdc.com
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cea86f270e9e0a4e221ab2d169ae20c083eb4a0
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Sep 3 12:18:39 2019 +0200

    scsi: sd: Ignore a failure to sync cache due to lack of authorization
    
    commit 21e3d6c81179bbdfa279efc8de456c34b814cfd2 upstream.
    
    I've got a report about a UAS drive enclosure reporting back Sense: Logical
    unit access not authorized if the drive it holds is password protected.
    While the drive is obviously unusable in that state as a mass storage
    device, it still exists as a sd device and when the system is asked to
    perform a suspend of the drive, it will be sent a SYNCHRONIZE CACHE. If
    that fails due to password protection, the error must be ignored.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190903101840.16483-1-oneukum@suse.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3638ccda1009615d55d539970f61ddaab3ef9fc2
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Tue Oct 1 12:49:49 2019 +0200

    scsi: zfcp: fix reaction on bit error threshold notification
    
    commit 2190168aaea42c31bff7b9a967e7b045f07df095 upstream.
    
    On excessive bit errors for the FCP channel ingress fibre path, the channel
    notifies us.  Previously, we only emitted a kernel message and a trace
    record.  Since performance can become suboptimal with I/O timeouts due to
    bit errors, we now stop using an FCP device by default on channel
    notification so multipath on top can timely failover to other paths.  A new
    module parameter zfcp.ber_stop can be used to get zfcp old behavior.
    
    User explanation of new kernel message:
    
     * Description:
     * The FCP channel reported that its bit error threshold has been exceeded.
     * These errors might result from a problem with the physical components
     * of the local fibre link into the FCP channel.
     * The problem might be damage or malfunction of the cable or
     * cable connection between the FCP channel and
     * the adjacent fabric switch port or the point-to-point peer.
     * Find details about the errors in the HBA trace for the FCP device.
     * The zfcp device driver closed down the FCP device
     * to limit the performance impact from possible I/O command timeouts.
     * User action:
     * Check for problems on the local fibre link, ensure that fibre optics are
     * clean and functional, and all cables are properly plugged.
     * After the repair action, you can manually recover the FCP device by
     * writing "0" into its "failed" sysfs attribute.
     * If recovery through sysfs is not possible, set the CHPID of the device
     * offline and back online on the service element.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: <stable@vger.kernel.org> #2.6.30+
    Link: https://lore.kernel.org/r/20191001104949.42810-1-maier@linux.ibm.com
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d07c028d2bc9bc092982d1e40bb78bfdc886c76c
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Oct 14 12:02:01 2019 +0100

    staging: wlan-ng: fix exit return when sme->key_idx >= NUM_WEPKEYS
    
    commit 153c5d8191c26165dbbd2646448ca7207f7796d0 upstream.
    
    Currently the exit return path when sme->key_idx >= NUM_WEPKEYS is via
    label 'exit' and this checks if result is non-zero, however result has
    not been initialized and contains garbage.  Fix this by replacing the
    goto with a return with the error code.
    
    Addresses-Coverity: ("Uninitialized scalar variable")
    Fixes: 0ca6d8e74489 ("Staging: wlan-ng: replace switch-case statements with macro")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191014110201.9874-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4034a503058995e2adf03d27610e62f7c1bb3dab
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Oct 18 15:38:48 2019 -0700

    MIPS: tlbex: Fix build_restore_pagemask KScratch restore
    
    commit b42aa3fd5957e4daf4b69129e5ce752a2a53e7d6 upstream.
    
    build_restore_pagemask() will restore the value of register $1/$at when
    its restore_scratch argument is non-zero, and aims to do so by filling a
    branch delay slot. Commit 0b24cae4d535 ("MIPS: Add missing EHB in mtc0
    -> mfc0 sequence.") added an EHB instruction (Execution Hazard Barrier)
    prior to restoring $1 from a KScratch register, in order to resolve a
    hazard that can result in stale values of the KScratch register being
    observed. In particular, P-class CPUs from MIPS with out of order
    execution pipelines such as the P5600 & P6600 are affected.
    
    Unfortunately this EHB instruction was inserted in the branch delay slot
    causing the MFC0 instruction which performs the restoration to no longer
    execute along with the branch. The result is that the $1 register isn't
    actually restored, ie. the TLB refill exception handler clobbers it -
    which is exactly the problem the EHB is meant to avoid for the P-class
    CPUs.
    
    Similarly build_get_pgd_vmalloc() will restore the value of $1/$at when
    its mode argument equals refill_scratch, and suffers from the same
    problem.
    
    Fix this by in both cases moving the EHB earlier in the emitted code.
    There's no reason it needs to immediately precede the MFC0 - it simply
    needs to be between the MTC0 & MFC0.
    
    This bug only affects Cavium Octeon systems which use
    build_fast_tlb_refill_handler().
    
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Fixes: 0b24cae4d535 ("MIPS: Add missing EHB in mtc0 -> mfc0 sequence.")
    Cc: Dmitry Korotin <dkorotin@wavecomp.com>
    Cc: stable@vger.kernel.org # v3.15+
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f7e157464cd69fba9b00057770555dae25d7449
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Oct 18 17:19:54 2019 +0200

    USB: ldusb: fix read info leaks
    
    commit 7a6f22d7479b7a0b68eadd308a997dd64dda7dae upstream.
    
    Fix broken read implementation, which could be used to trigger slab info
    leaks.
    
    The driver failed to check if the custom ring buffer was still empty
    when waking up after having waited for more data. This would happen on
    every interrupt-in completion, even if no data had been added to the
    ring buffer (e.g. on disconnect events).
    
    Due to missing sanity checks and uninitialised (kmalloced) ring-buffer
    entries, this meant that huge slab info leaks could easily be triggered.
    
    Note that the empty-buffer check after wakeup is enough to fix the info
    leak on disconnect, but let's clear the buffer on allocation and add a
    sanity check to read() to prevent further leaks.
    
    Fixes: 2824bd250f0b ("[PATCH] USB: add ldusb driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Reported-by: syzbot+6fe95b826644f7f12b0b@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191018151955.25135-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b73a0e453bde4d6f23a4d090abdb6d02d6a5666
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 15 19:55:22 2019 +0200

    USB: usblp: fix use-after-free on disconnect
    
    commit 7a759197974894213621aa65f0571b51904733d6 upstream.
    
    A recent commit addressing a runtime PM use-count regression, introduced
    a use-after-free by not making sure we held a reference to the struct
    usb_interface for the lifetime of the driver data.
    
    Fixes: 9a31535859bf ("USB: usblp: fix runtime PM after driver unbind")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: syzbot+cd24df4d075c319ebfc5@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191015175522.18490-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28ab2c5f58996a7254f4b39ceb3c839e9f666bb7
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 10 14:58:34 2019 +0200

    USB: ldusb: fix memleak on disconnect
    
    commit b14a39048c1156cfee76228bf449852da2f14df8 upstream.
    
    If disconnect() races with release() after a process has been
    interrupted, release() could end up returning early and the driver would
    fail to free its driver data.
    
    Fixes: 2824bd250f0b ("[PATCH] USB: add ldusb driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191010125835.27031-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edd3e9c71cc810e440a21f827c4969bb2d62306a
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Oct 11 11:57:35 2019 +0200

    USB: serial: ti_usb_3410_5052: fix port-close races
    
    commit 6f1d1dc8d540a9aa6e39b9cb86d3a67bbc1c8d8d upstream.
    
    Fix races between closing a port and opening or closing another port on
    the same device which could lead to a failure to start or stop the
    shared interrupt URB. The latter could potentially cause a
    use-after-free or worse in the completion handler on driver unbind.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 068fcbe895cd391af73c373b7d09e71652998974
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Oct 14 14:18:30 2019 -0500

    usb: udc: lpc32xx: fix bad bit shift operation
    
    commit b987b66ac3a2bc2f7b03a0ba48a07dc553100c07 upstream.
    
    It seems that the right variable to use in this case is *i*, instead of
    *n*, otherwise there is an undefined behavior when right shifiting by more
    than 31 bits when multiplying n by 8; notice that *n* can take values
    equal or greater than 4 (4, 8, 16, ...).
    
    Also, notice that under the current conditions (bl = 3), we are skiping
    the handling of bytes 3, 7, 31... So, fix this by updating this logic
    and limit *bl* up to 4 instead of up to 3.
    
    This fix is based on function udc_stuff_fifo().
    
    Addresses-Coverity-ID: 1454834 ("Bad bit shift operation")
    Fixes: 24a28e428351 ("USB: gadget driver for LPC32xx")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Link: https://lore.kernel.org/r/20191014191830.GA10721@embeddedor
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ed43d2eb0ec0d82814a5fe310dfddbda4a136d8
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Oct 17 17:04:11 2019 +0200

    ALSA: hda - Force runtime PM on Nvidia HDMI codecs
    
    commit 94989e318b2f11e217e86bee058088064fa9a2e9 upstream.
    
    Przemysław Kopa reports that since commit b516ea586d71 ("PCI: Enable
    NVIDIA HDA controllers"), the discrete GPU Nvidia GeForce GT 540M on his
    2011 Samsung laptop refuses to runtime suspend, resulting in a power
    regression and excessive heat.
    
    Rivera Valdez witnesses the same issue with a GeForce GT 525M (GF108M)
    of the same era, as does another Arch Linux user named "R0AR" with a
    more recent GeForce GTX 1050 Ti (GP107M).
    
    The commit exposes the discrete GPU's HDA controller and all four codecs
    on the controller do not set the CLKSTOP and EPSS bits in the Supported
    Power States Response.  They also do not set the PS-ClkStopOk bit in the
    Get Power State Response.  hda_codec_runtime_suspend() therefore does
    not call snd_hdac_codec_link_down(), which prevents each codec and the
    PCI device from runtime suspending.
    
    The same issue is present on some AMD discrete GPUs and we addressed it
    by forcing runtime PM despite the bits not being set, see commit
    57cb54e53bdd ("ALSA: hda - Force to link down at runtime suspend on
    ATI/AMD HDMI").
    
    Do the same for Nvidia HDMI codecs.
    
    Fixes: b516ea586d71 ("PCI: Enable NVIDIA HDA controllers")
    Link: https://bbs.archlinux.org/viewtopic.php?pid=1865512
    Link: https://bugs.freedesktop.org/show_bug.cgi?id=75985#c81
    Reported-by: Przemysław Kopa <prymoo@gmail.com>
    Reported-by: Rivera Valdez <riveravaldez@ysinembargo.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: Daniel Drake <dan@reactivated.net>
    Cc: stable@vger.kernel.org # v5.3+
    Link: https://lore.kernel.org/r/3086bc75135c1e3567c5bc4f3cc4ff5cbf7a56c2.1571324194.git.lukas@wunner.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dda74810c9a7b404aabb484e14c30089abd5349
Author: Szabolcs Szőke <szszoke.code@gmail.com>
Date:   Fri Oct 11 19:19:36 2019 +0200

    ALSA: usb-audio: Disable quirks for BOSS Katana amplifiers
    
    commit 7571b6a17fcc5e4f6903f065a82d0e38011346ed upstream.
    
    BOSS Katana amplifiers cannot be used for recording or playback if quirks
    are applied
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=195223
    Signed-off-by: Szabolcs Szőke <szszoke.code@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191011171937.8013-1-szszoke.code@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c8a9a46ec577acdb84e28329eaee3d1252b0575
Author: Daniel Drake <drake@endlessm.com>
Date:   Thu Oct 17 16:15:01 2019 +0800

    ALSA: hda/realtek - Enable headset mic on Asus MJ401TA
    
    commit 8c8967a7dc01a25f57a0757fdca10987773cd1f2 upstream.
    
    On Asus MJ401TA (with Realtek ALC256), the headset mic is connected to
    pin 0x19, with default configuration value 0x411111f0 (indicating no
    physical connection).
    
    Enable this by quirking the pin. Mic jack detection was also tested and
    found to be working.
    
    This enables use of the headset mic on this product.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191017081501.17135-1-drake@endlessm.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30a83eb0a09de359e2fd324102f2b8c5836592fb
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu May 2 16:03:26 2019 +0800

    ALSA: hda/realtek - Add support for ALC711
    
    commit 83629532ce45ef9df1f297b419b9ea112045685d upstream.
    
    Support new codec ALC711.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5366778bf0ed67fbb8d86e3e488bf64695117569
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 10 14:58:35 2019 +0200

    USB: legousbtower: fix memleak on disconnect
    
    commit b6c03e5f7b463efcafd1ce141bd5a8fc4e583ae2 upstream.
    
    If disconnect() races with release() after a process has been
    interrupted, release() could end up returning early and the driver would
    fail to free its driver data.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191010125835.27031-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99b45e7a1ba17548fd95420dce36346956d04564
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Fri Oct 25 09:58:34 2019 -0700

    memfd: Fix locking when tagging pins
    
    The RCU lock is insufficient to protect the radix tree iteration as
    a deletion from the tree can occur before we take the spinlock to
    tag the entry.  In 4.19, this has manifested as a bug with the following
    trace:
    
    kernel BUG at lib/radix-tree.c:1429!
    invalid opcode: 0000 [#1] SMP KASAN PTI
    CPU: 7 PID: 6935 Comm: syz-executor.2 Not tainted 4.19.36 #25
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:radix_tree_tag_set+0x200/0x2f0 lib/radix-tree.c:1429
    Code: 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 89 44 24 10 e8 a3 29 7e fe 48 8b 44 24 10 48 0f ab 03 e9 d2 fe ff ff e8 90 29 7e fe <0f> 0b 48 c7 c7 e0 5a 87 84 e8 f0 e7 08 ff 4c 89 ef e8 4a ff ac fe
    RSP: 0018:ffff88837b13fb60 EFLAGS: 00010016
    RAX: 0000000000040000 RBX: ffff8883c5515d58 RCX: ffffffff82cb2ef0
    RDX: 0000000000000b72 RSI: ffffc90004cf2000 RDI: ffff8883c5515d98
    RBP: ffff88837b13fb98 R08: ffffed106f627f7e R09: ffffed106f627f7e
    R10: 0000000000000001 R11: ffffed106f627f7d R12: 0000000000000004
    R13: ffffea000d7fea80 R14: 1ffff1106f627f6f R15: 0000000000000002
    FS:  00007fa1b8df2700(0000) GS:ffff8883e2fc0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fa1b8df1db8 CR3: 000000037d4d2001 CR4: 0000000000160ee0
    Call Trace:
     memfd_tag_pins mm/memfd.c:51 [inline]
     memfd_wait_for_pins+0x2c5/0x12d0 mm/memfd.c:81
     memfd_add_seals mm/memfd.c:215 [inline]
     memfd_fcntl+0x33d/0x4a0 mm/memfd.c:247
     do_fcntl+0x589/0xeb0 fs/fcntl.c:421
     __do_sys_fcntl fs/fcntl.c:463 [inline]
     __se_sys_fcntl fs/fcntl.c:448 [inline]
     __x64_sys_fcntl+0x12d/0x180 fs/fcntl.c:448
     do_syscall_64+0xc8/0x580 arch/x86/entry/common.c:293
    
    The problem does not occur in mainline due to the XArray rewrite which
    changed the locking to exclude modification of the tree during iteration.
    At the time, nobody realised this was a bugfix.  Backport the locking
    changes to stable.
    
    Cc: stable@vger.kernel.org
    Reported-by: zhong jiang <zhongjiang@huawei.com>
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2770f80afde732f1ba3f9faff61c4d84156784d0
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 15 15:24:38 2019 +0800

    sctp: change sctp_prot .no_autobind with true
    
    [ Upstream commit 63dfb7938b13fa2c2fbcb45f34d065769eb09414 ]
    
    syzbot reported a memory leak:
    
      BUG: memory leak, unreferenced object 0xffff888120b3d380 (size 64):
      backtrace:
    
        [...] slab_alloc mm/slab.c:3319 [inline]
        [...] kmem_cache_alloc+0x13f/0x2c0 mm/slab.c:3483
        [...] sctp_bucket_create net/sctp/socket.c:8523 [inline]
        [...] sctp_get_port_local+0x189/0x5a0 net/sctp/socket.c:8270
        [...] sctp_do_bind+0xcc/0x200 net/sctp/socket.c:402
        [...] sctp_bindx_add+0x4b/0xd0 net/sctp/socket.c:497
        [...] sctp_setsockopt_bindx+0x156/0x1b0 net/sctp/socket.c:1022
        [...] sctp_setsockopt net/sctp/socket.c:4641 [inline]
        [...] sctp_setsockopt+0xaea/0x2dc0 net/sctp/socket.c:4611
        [...] sock_common_setsockopt+0x38/0x50 net/core/sock.c:3147
        [...] __sys_setsockopt+0x10f/0x220 net/socket.c:2084
        [...] __do_sys_setsockopt net/socket.c:2100 [inline]
    
    It was caused by when sending msgs without binding a port, in the path:
    inet_sendmsg() -> inet_send_prepare() -> inet_autobind() ->
    .get_port/sctp_get_port(), sp->bind_hash will be set while bp->port is
    not. Later when binding another port by sctp_setsockopt_bindx(), a new
    bucket will be created as bp->port is not set.
    
    sctp's autobind is supposed to call sctp_autobind() where it does all
    things including setting bp->port. Since sctp_autobind() is called in
    sctp_sendmsg() if the sk is not yet bound, it should have skipped the
    auto bind.
    
    THis patch is to avoid calling inet_autobind() in inet_send_prepare()
    by changing sctp_prot .no_autobind with true, also remove the unused
    .get_port.
    
    Reported-by: syzbot+d44f7bbebdea49dbc84a@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd8c21ca7022a45bc0a60d9e72fd6060103957f5
Author: Biao Huang <biao.huang@mediatek.com>
Date:   Tue Oct 15 11:24:44 2019 +0800

    net: stmmac: disable/enable ptp_ref_clk in suspend/resume flow
    
    [ Upstream commit e497c20e203680aba9ccf7bb475959595908ca7e ]
    
    disable ptp_ref_clk in suspend flow, and enable it in resume flow.
    
    Fixes: f573c0b9c4e0 ("stmmac: move stmmac_clk, pclk, clk_ptp_ref and stmmac_rst to platform structure")
    Signed-off-by: Biao Huang <biao.huang@mediatek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da4f0aed87d5981eca4fb947fc30fc7cfd3a5ae5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Aug 23 19:33:03 2019 +0800

    net: ipv6: fix listify ip6_rcv_finish in case of forwarding
    
    [ Upstream commit c7a42eb49212f93a800560662d17d5293960d3c3 ]
    
    We need a similar fix for ipv6 as Commit 0761680d5215 ("net: ipv4: fix
    listify ip_rcv_finish in case of forwarding") does for ipv4.
    
    This issue can be reprocuded by syzbot since Commit 323ebb61e32b ("net:
    use listified RX for handling GRO_NORMAL skbs") on net-next. The call
    trace was:
    
      kernel BUG at include/linux/skbuff.h:2225!
      RIP: 0010:__skb_pull include/linux/skbuff.h:2225 [inline]
      RIP: 0010:skb_pull+0xea/0x110 net/core/skbuff.c:1902
      Call Trace:
        sctp_inq_pop+0x2f1/0xd80 net/sctp/inqueue.c:202
        sctp_endpoint_bh_rcv+0x184/0x8d0 net/sctp/endpointola.c:385
        sctp_inq_push+0x1e4/0x280 net/sctp/inqueue.c:80
        sctp_rcv+0x2807/0x3590 net/sctp/input.c:256
        sctp6_rcv+0x17/0x30 net/sctp/ipv6.c:1049
        ip6_protocol_deliver_rcu+0x2fe/0x1660 net/ipv6/ip6_input.c:397
        ip6_input_finish+0x84/0x170 net/ipv6/ip6_input.c:438
        NF_HOOK include/linux/netfilter.h:305 [inline]
        NF_HOOK include/linux/netfilter.h:299 [inline]
        ip6_input+0xe4/0x3f0 net/ipv6/ip6_input.c:447
        dst_input include/net/dst.h:442 [inline]
        ip6_sublist_rcv_finish+0x98/0x1e0 net/ipv6/ip6_input.c:84
        ip6_list_rcv_finish net/ipv6/ip6_input.c:118 [inline]
        ip6_sublist_rcv+0x80c/0xcf0 net/ipv6/ip6_input.c:282
        ipv6_list_rcv+0x373/0x4b0 net/ipv6/ip6_input.c:316
        __netif_receive_skb_list_ptype net/core/dev.c:5049 [inline]
        __netif_receive_skb_list_core+0x5fc/0x9d0 net/core/dev.c:5097
        __netif_receive_skb_list net/core/dev.c:5149 [inline]
        netif_receive_skb_list_internal+0x7eb/0xe60 net/core/dev.c:5244
        gro_normal_list.part.0+0x1e/0xb0 net/core/dev.c:5757
        gro_normal_list net/core/dev.c:5755 [inline]
        gro_normal_one net/core/dev.c:5769 [inline]
        napi_frags_finish net/core/dev.c:5782 [inline]
        napi_gro_frags+0xa6a/0xea0 net/core/dev.c:5855
        tun_get_user+0x2e98/0x3fa0 drivers/net/tun.c:1974
        tun_chr_write_iter+0xbd/0x156 drivers/net/tun.c:2020
    
    Fixes: d8269e2cbf90 ("net: ipv6: listify ipv6_rcv() and ip6_rcv_finish()")
    Fixes: 323ebb61e32b ("net: use listified RX for handling GRO_NORMAL skbs")
    Reported-by: syzbot+eb349eeee854e389c36d@syzkaller.appspotmail.com
    Reported-by: syzbot+4a0643a653ac375612d1@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc2d858b3f7379d58e63936e834f3d00e260bf13
Author: Cédric Le Goater <clg@kaod.org>
Date:   Fri Oct 11 07:52:54 2019 +0200

    net/ibmvnic: Fix EOI when running in XIVE mode.
    
    [ Upstream commit 11d49ce9f7946dfed4dcf5dbde865c78058b50ab ]
    
    pSeries machines on POWER9 processors can run with the XICS (legacy)
    interrupt mode or with the XIVE exploitation interrupt mode. These
    interrupt contollers have different interfaces for interrupt
    management : XICS uses hcalls and XIVE loads and stores on a page.
    H_EOI being a XICS interface the enable_scrq_irq() routine can fail
    when the machine runs in XIVE mode.
    
    Fix that by calling the EOI handler of the interrupt chip.
    
    Fixes: f23e0643cd0b ("ibmvnic: Clear pending interrupt after device reset")
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f9d4e3c2954f0bb059062802209ee4258b19755
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Tue Oct 15 16:42:45 2019 +0200

    net: i82596: fix dma_alloc_attr for sni_82596
    
    [ Upstream commit 61c1d33daf7b5146f44d4363b3322f8cda6a6c43 ]
    
    Commit 7f683b920479 ("i825xx: switch to switch to dma_alloc_attrs")
    switched dma allocation over to dma_alloc_attr, but didn't convert
    the SNI part to request consistent DMA memory. This broke sni_82596
    since driver doesn't do dma_cache_sync for performance reasons.
    Fix this by using different DMA_ATTRs for lasi_82596 and sni_82596.
    
    Fixes: 7f683b920479 ("i825xx: switch to switch to dma_alloc_attrs")
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da0baae9a7256846304dfd38a48adc76be553185
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Oct 11 12:53:49 2019 -0700

    net: bcmgenet: Set phydev->dev_flags only for internal PHYs
    
    [ Upstream commit 92696286f3bb37ba50e4bd8d1beb24afb759a799 ]
    
    phydev->dev_flags is entirely dependent on the PHY device driver which
    is going to be used, setting the internal GENET PHY revision in those
    bits only makes sense when drivers/net/phy/bcm7xxx.c is the PHY driver
    being used.
    
    Fixes: 487320c54143 ("net: bcmgenet: communicate integrated PHY revision to PHY driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0f5839a483f5dc207aa2b587c619c57c096561b
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Oct 15 10:45:47 2019 -0700

    net: bcmgenet: Fix RGMII_MODE_EN value for GENET v1/2/3
    
    [ Upstream commit efb86fede98cdc70b674692ff617b1162f642c49 ]
    
    The RGMII_MODE_EN bit value was 0 for GENET versions 1 through 3, and
    became 6 for GENET v4 and above, account for that difference.
    
    Fixes: aa09677cba42 ("net: bcmgenet: add MDIO routines")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16d67acad8159707391e994f3c5b49e62bab7f04
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 14 11:22:30 2019 -0700

    net: avoid potential infinite loop in tc_ctl_action()
    
    [ Upstream commit 39f13ea2f61b439ebe0060393e9c39925c9ee28c ]
    
    tc_ctl_action() has the ability to loop forever if tcf_action_add()
    returns -EAGAIN.
    
    This special case has been done in case a module needed to be loaded,
    but it turns out that tcf_add_notify() could also return -EAGAIN
    if the socket sk_rcvbuf limit is hit.
    
    We need to separate the two cases, and only loop for the module
    loading case.
    
    While we are at it, add a limit of 10 attempts since unbounded
    loops are always scary.
    
    syzbot repro was something like :
    
    socket(PF_NETLINK, SOCK_RAW|SOCK_NONBLOCK, NETLINK_ROUTE) = 3
    write(3, ..., 38) = 38
    setsockopt(3, SOL_SOCKET, SO_RCVBUF, [0], 4) = 0
    sendmsg(3, {msg_name(0)=NULL, msg_iov(1)=[{..., 388}], msg_controllen=0, msg_flags=0x10}, ...)
    
    NMI backtrace for cpu 0
    CPU: 0 PID: 1054 Comm: khungtaskd Not tainted 5.4.0-rc1+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     nmi_cpu_backtrace.cold+0x70/0xb2 lib/nmi_backtrace.c:101
     nmi_trigger_cpumask_backtrace+0x23b/0x28b lib/nmi_backtrace.c:62
     arch_trigger_cpumask_backtrace+0x14/0x20 arch/x86/kernel/apic/hw_nmi.c:38
     trigger_all_cpu_backtrace include/linux/nmi.h:146 [inline]
     check_hung_uninterruptible_tasks kernel/hung_task.c:205 [inline]
     watchdog+0x9d0/0xef0 kernel/hung_task.c:289
     kthread+0x361/0x430 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    Sending NMI from CPU 0 to CPUs 1:
    NMI backtrace for cpu 1
    CPU: 1 PID: 8859 Comm: syz-executor910 Not tainted 5.4.0-rc1+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:arch_local_save_flags arch/x86/include/asm/paravirt.h:751 [inline]
    RIP: 0010:lockdep_hardirqs_off+0x1df/0x2e0 kernel/locking/lockdep.c:3453
    Code: 5c 08 00 00 5b 41 5c 41 5d 5d c3 48 c7 c0 58 1d f3 88 48 ba 00 00 00 00 00 fc ff df 48 c1 e8 03 80 3c 10 00 0f 85 d3 00 00 00 <48> 83 3d 21 9e 99 07 00 0f 84 b9 00 00 00 9c 58 0f 1f 44 00 00 f6
    RSP: 0018:ffff8880a6f3f1b8 EFLAGS: 00000046
    RAX: 1ffffffff11e63ab RBX: ffff88808c9c6080 RCX: 0000000000000000
    RDX: dffffc0000000000 RSI: 0000000000000000 RDI: ffff88808c9c6914
    RBP: ffff8880a6f3f1d0 R08: ffff88808c9c6080 R09: fffffbfff16be5d1
    R10: fffffbfff16be5d0 R11: 0000000000000003 R12: ffffffff8746591f
    R13: ffff88808c9c6080 R14: ffffffff8746591f R15: 0000000000000003
    FS:  00000000011e4880(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffffff600400 CR3: 00000000a8920000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     trace_hardirqs_off+0x62/0x240 kernel/trace/trace_preemptirq.c:45
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:108 [inline]
     _raw_spin_lock_irqsave+0x6f/0xcd kernel/locking/spinlock.c:159
     __wake_up_common_lock+0xc8/0x150 kernel/sched/wait.c:122
     __wake_up+0xe/0x10 kernel/sched/wait.c:142
     netlink_unlock_table net/netlink/af_netlink.c:466 [inline]
     netlink_unlock_table net/netlink/af_netlink.c:463 [inline]
     netlink_broadcast_filtered+0x705/0xb80 net/netlink/af_netlink.c:1514
     netlink_broadcast+0x3a/0x50 net/netlink/af_netlink.c:1534
     rtnetlink_send+0xdd/0x110 net/core/rtnetlink.c:714
     tcf_add_notify net/sched/act_api.c:1343 [inline]
     tcf_action_add+0x243/0x370 net/sched/act_api.c:1362
     tc_ctl_action+0x3b5/0x4bc net/sched/act_api.c:1410
     rtnetlink_rcv_msg+0x463/0xb00 net/core/rtnetlink.c:5386
     netlink_rcv_skb+0x177/0x450 net/netlink/af_netlink.c:2477
     rtnetlink_rcv+0x1d/0x30 net/core/rtnetlink.c:5404
     netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
     netlink_unicast+0x531/0x710 net/netlink/af_netlink.c:1328
     netlink_sendmsg+0x8a5/0xd60 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:637 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:657
     ___sys_sendmsg+0x803/0x920 net/socket.c:2311
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2356
     __do_sys_sendmsg net/socket.c:2365 [inline]
     __se_sys_sendmsg net/socket.c:2363 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2363
     do_syscall_64+0xfa/0x760 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x440939
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+cf0adbb9c28c8866c788@syzkaller.appspotmail.com
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fa80e64de33852d2ce03b1c293fd0c973152dff
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Wed Oct 16 20:52:09 2019 +0200

    ipv4: Return -ENETUNREACH if we can't create route but saddr is valid
    
    [ Upstream commit 595e0651d0296bad2491a4a29a7a43eae6328b02 ]
    
    ...instead of -EINVAL. An issue was found with older kernel versions
    while unplugging a NFS client with pending RPCs, and the wrong error
    code here prevented it from recovering once link is back up with a
    configured address.
    
    Incidentally, this is not an issue anymore since commit 4f8943f80883
    ("SUNRPC: Replace direct task wakeups from softirq context"), included
    in 5.2-rc7, had the effect of decoupling the forwarding of this error
    by using SO_ERROR in xs_wake_error(), as pointed out by Benjamin
    Coddington.
    
    To the best of my knowledge, this isn't currently causing any further
    issue, but the error code doesn't look appropriate anyway, and we
    might hit this in other paths as well.
    
    In detail, as analysed by Gonzalo Siero, once the route is deleted
    because the interface is down, and can't be resolved and we return
    -EINVAL here, this ends up, courtesy of inet_sk_rebuild_header(),
    as the socket error seen by tcp_write_err(), called by
    tcp_retransmit_timer().
    
    In turn, tcp_write_err() indirectly calls xs_error_report(), which
    wakes up the RPC pending tasks with a status of -EINVAL. This is then
    seen by call_status() in the SUN RPC implementation, which aborts the
    RPC call calling rpc_exit(), instead of handling this as a
    potentially temporary condition, i.e. as a timeout.
    
    Return -EINVAL only if the input parameters passed to
    ip_route_output_key_hash_rcu() are actually invalid (this is the case
    if the specified source address is multicast, limited broadcast or
    all zeroes), but return -ENETUNREACH in all cases where, at the given
    moment, the given source address doesn't allow resolving the route.
    
    While at it, drop the initialisation of err to -ENETUNREACH, which
    was added to __ip_route_output_key() back then by commit
    0315e3827048 ("net: Fix behaviour of unreachable, blackhole and
    prohibit routes"), but actually had no effect, as it was, and is,
    overwritten by the fib_lookup() return code assignment, and anyway
    ignored in all other branches, including the if (fl4->saddr) one:
    I find this rather confusing, as it would look like -ENETUNREACH is
    the "default" error, while that statement has no effect.
    
    Also note that after commit fc75fc8339e7 ("ipv4: dont create routes
    on down devices"), we would get -ENETUNREACH if the device is down,
    but -EINVAL if the source address is specified and we can't resolve
    the route, and this appears to be rather inconsistent.
    
    Reported-by: Stefan Walter <walteste@inf.ethz.ch>
    Analysed-by: Benjamin Coddington <bcodding@redhat.com>
    Analysed-by: Gonzalo Siero <gsierohu@redhat.com>
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ec0df4e3fee3b7f6d6e4d0753b24d6d952950dd
Author: Wei Wang <weiwan@google.com>
Date:   Wed Oct 16 12:03:15 2019 -0700

    ipv4: fix race condition between route lookup and invalidation
    
    [ Upstream commit 5018c59607a511cdee743b629c76206d9c9e6d7b ]
    
    Jesse and Ido reported the following race condition:
    <CPU A, t0> - Received packet A is forwarded and cached dst entry is
    taken from the nexthop ('nhc->nhc_rth_input'). Calls skb_dst_set()
    
    <t1> - Given Jesse has busy routers ("ingesting full BGP routing tables
    from multiple ISPs"), route is added / deleted and rt_cache_flush() is
    called
    
    <CPU B, t2> - Received packet B tries to use the same cached dst entry
    from t0, but rt_cache_valid() is no longer true and it is replaced in
    rt_cache_route() by the newer one. This calls dst_dev_put() on the
    original dst entry which assigns the blackhole netdev to 'dst->dev'
    
    <CPU A, t3> - dst_input(skb) is called on packet A and it is dropped due
    to 'dst->dev' being the blackhole netdev
    
    There are 2 issues in the v4 routing code:
    1. A per-netns counter is used to do the validation of the route. That
    means whenever a route is changed in the netns, users of all routes in
    the netns needs to redo lookup. v6 has an implementation of only
    updating fn_sernum for routes that are affected.
    2. When rt_cache_valid() returns false, rt_cache_route() is called to
    throw away the current cache, and create a new one. This seems
    unnecessary because as long as this route does not change, the route
    cache does not need to be recreated.
    
    To fully solve the above 2 issues, it probably needs quite some code
    changes and requires careful testing, and does not suite for net branch.
    
    So this patch only tries to add the deleted cached rt into the uncached
    list, so user could still be able to use it to receive packets until
    it's done.
    
    Fixes: 95c47f9cf5e0 ("ipv4: call dst_dev_put() properly")
    Signed-off-by: Wei Wang <weiwan@google.com>
    Reported-by: Ido Schimmel <idosch@idosch.org>
    Reported-by: Jesse Hathaway <jesse@mbuki-mvuki.org>
    Tested-by: Jesse Hathaway <jesse@mbuki-mvuki.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Cc: David Ahern <dsahern@gmail.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d3ad773b44501ce9c75a9ba9d56819d766063f7
Author: Yi Li <yilikernel@gmail.com>
Date:   Fri Oct 18 20:20:08 2019 -0700

    ocfs2: fix panic due to ocfs2_wq is null
    
    commit b918c43021baaa3648de09e19a4a3dd555a45f40 upstream.
    
    mount.ocfs2 failed when reading ocfs2 filesystem superblock encounters
    an error.  ocfs2_initialize_super() returns before allocating ocfs2_wq.
    ocfs2_dismount_volume() triggers the following panic.
    
      Oct 15 16:09:27 cnwarekv-205120 kernel: On-disk corruption discovered.Please run fsck.ocfs2 once the filesystem is unmounted.
      Oct 15 16:09:27 cnwarekv-205120 kernel: (mount.ocfs2,22804,44): ocfs2_read_locked_inode:537 ERROR: status = -30
      Oct 15 16:09:27 cnwarekv-205120 kernel: (mount.ocfs2,22804,44): ocfs2_init_global_system_inodes:458 ERROR: status = -30
      Oct 15 16:09:27 cnwarekv-205120 kernel: (mount.ocfs2,22804,44): ocfs2_init_global_system_inodes:491 ERROR: status = -30
      Oct 15 16:09:27 cnwarekv-205120 kernel: (mount.ocfs2,22804,44): ocfs2_initialize_super:2313 ERROR: status = -30
      Oct 15 16:09:27 cnwarekv-205120 kernel: (mount.ocfs2,22804,44): ocfs2_fill_super:1033 ERROR: status = -30
      ------------[ cut here ]------------
      Oops: 0002 [#1] SMP NOPTI
      CPU: 1 PID: 11753 Comm: mount.ocfs2 Tainted: G  E
            4.14.148-200.ckv.x86_64 #1
      Hardware name: Sugon H320-G30/35N16-US, BIOS 0SSDX017 12/21/2018
      task: ffff967af0520000 task.stack: ffffa5f05484000
      RIP: 0010:mutex_lock+0x19/0x20
      Call Trace:
        flush_workqueue+0x81/0x460
        ocfs2_shutdown_local_alloc+0x47/0x440 [ocfs2]
        ocfs2_dismount_volume+0x84/0x400 [ocfs2]
        ocfs2_fill_super+0xa4/0x1270 [ocfs2]
        ? ocfs2_initialize_super.isa.211+0xf20/0xf20 [ocfs2]
        mount_bdev+0x17f/0x1c0
        mount_fs+0x3a/0x160
    
    Link: http://lkml.kernel.org/r/1571139611-24107-1-git-send-email-yili@winhong.com
    Signed-off-by: Yi Li <yilikernel@gmail.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0933b0db7fb239be01270b25bf73884870d8c1e6
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Oct 9 13:12:37 2019 -0500

    Revert "drm/radeon: Fix EEH during kexec"
    
    [ Upstream commit 8d13c187c42e110625d60094668a8f778c092879 ]
    
    This reverts commit 6f7fe9a93e6c09bf988c5059403f5f88e17e21e6.
    
    This breaks some boards.  Maybe just enable this on PPC for
    now?
    
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=205147
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9457994a53d10a2606f5c80a5767d579ca2edb70
Author: Song Liu <songliubraving@fb.com>
Date:   Mon Oct 14 16:58:35 2019 -0700

    md/raid0: fix warning message for parameter default_layout
    
    [ Upstream commit 3874d73e06c9b9dc15de0b7382fc223986d75571 ]
    
    The message should match the parameter, i.e. raid0.default_layout.
    
    Fixes: c84a1372df92 ("md/raid0: avoid RAID0 data corruption due to layout confusion.")
    Cc: NeilBrown <neilb@suse.de>
    Reported-by: Ivan Topolsky <doktor.yak@gmail.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51f0c10890aa9d3315164063187cbf80368dc5a6
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Oct 15 12:54:17 2019 -0700

    libata/ahci: Fix PCS quirk application
    
    [ Upstream commit 09d6ac8dc51a033ae0043c1fe40b4d02563c2496 ]
    
    Commit c312ef176399 "libata/ahci: Drop PCS quirk for Denverton and
    beyond" got the polarity wrong on the check for which board-ids should
    have the quirk applied. The board type board_ahci_pcs7 is defined at the
    end of the list such that "pcs7" boards can be special cased in the
    future if they need the quirk. All prior Intel board ids "<
    board_ahci_pcs7" should proceed with applying the quirk.
    
    Reported-by: Andreas Friedrich <afrie@gmx.net>
    Reported-by: Stephen Douthit <stephend@silicom-usa.com>
    Fixes: c312ef176399 ("libata/ahci: Drop PCS quirk for Denverton and beyond")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bc5a4db9aa96989f131a92ee3d002e285b84596
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Fri Sep 27 16:30:27 2019 -0700

    namespace: fix namespace.pl script to support relative paths
    
    [ Upstream commit 82fdd12b95727640c9a8233c09d602e4518e71f7 ]
    
    The namespace.pl script does not work properly if objtree is not set to
    an absolute path. The do_nm function is run from within the find
    function, which changes directories.
    
    Because of this, appending objtree, $File::Find::dir, and $source, will
    return a path which is not valid from the current directory.
    
    This used to work when objtree was set to an absolute path when using
    "make namespacecheck". It appears to have not worked when calling
    ./scripts/namespace.pl directly.
    
    This behavior was changed in 7e1c04779efd ("kbuild: Use relative path
    for $(objtree)", 2014-05-14)
    
    Rather than fixing the Makefile to set objtree to an absolute path, just
    fix namespace.pl to work when srctree and objtree are relative. Also fix
    the script to use an absolute path for these by default.
    
    Use the File::Spec module for this purpose. It's been part of perl
    5 since 5.005.
    
    The curdir() function is used to get the current directory when the
    objtree and srctree aren't set in the environment.
    
    rel2abs() is used to convert possibly relative objtree and srctree
    environment variables to absolute paths.
    
    Finally, the catfile() function is used instead of string appending
    paths together, since this is more robust when joining paths together.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Tested-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6acbcd1429f1a00edffc881aba4ec021d21d879e
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri Oct 4 20:51:04 2019 +0800

    r8152: Set macpassthru in reset_resume callback
    
    [ Upstream commit a54cdeeb04fc719e4c7f19d6e28dba7ea86cee5b ]
    
    r8152 may fail to establish network connection after resume from system
    suspend.
    
    If the USB port connects to r8152 lost its power during system suspend,
    the MAC address was written before is lost. The reason is that The MAC
    address doesn't get written again in its reset_resume callback.
    
    So let's set MAC address again in reset_resume callback. Also remove
    unnecessary lock as no other locking attempt will happen during
    reset_resume.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cb5c7b06a0a5e3f3699673e49410a71cdbdf189
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Oct 2 17:08:18 2019 -0700

    lib: textsearch: fix escapes in example code
    
    [ Upstream commit 2105b52e30debe7f19f3218598d8ae777dcc6776 ]
    
    This textsearch code example does not need the '\' escapes and they can
    be misleading to someone reading the example. Also, gcc and sparse warn
    that the "\%d" is an unknown escape sequence.
    
    Fixes: 5968a70d7af5 ("textsearch: fix kernel-doc warnings and add kernel-api section")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: netdev@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50699af3609ce776d042c409153081679cdf22d0
Author: Yizhuo <yzhai003@ucr.edu>
Date:   Tue Oct 1 13:24:39 2019 -0700

    net: hisilicon: Fix usage of uninitialized variable in function mdio_sc_cfg_reg_write()
    
    [ Upstream commit 53de429f4e88f538f7a8ec2b18be8c0cd9b2c8e1 ]
    
    In function mdio_sc_cfg_reg_write(), variable "reg_value" could be
    uninitialized if regmap_read() fails. However, "reg_value" is used
    to decide the control flow later in the if statement, which is
    potentially unsafe.
    
    Signed-off-by: Yizhuo <yzhai003@ucr.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db1e664e2d8075536741caa3f1d99920cf7190c1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Sep 10 05:59:07 2019 +0200

    mips: Loongson: Fix the link time qualifier of 'serial_exit()'
    
    [ Upstream commit 25b69a889b638b0b7e51e2c4fe717a66bec0e566 ]
    
    'exit' functions should be marked as __exit, not __init.
    
    Fixes: 85cc028817ef ("mips: make loongsoon serial driver explicitly modular")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: chenhc@lemote.com
    Cc: ralf@linux-mips.org
    Cc: jhogan@kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: kernel-janitors@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b43bf6b103441b7235253eadfc19300f88864cda
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sun Sep 29 15:00:47 2019 +0800

    net: dsa: rtl8366rb: add missing of_node_put after calling of_get_child_by_name
    
    [ Upstream commit f32eb9d80470dab05df26b6efd02d653c72e6a11 ]
    
    of_node_put needs to be called when the device node which is got
    from of_get_child_by_name finished using.
    irq_domain_add_linear() also calls of_node_get() to increase refcount,
    so irq_domain will not be affected when it is released.
    
    Fixes: d8652956cf37 ("net: dsa: realtek-smi: Add Realtek SMI driver")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Vivien Didelot <vivien.didelot@gmail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a16a9c10b2b0d2df9fdca97b6b5a32f7991022da
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Sep 30 11:05:49 2019 +0200

    netfilter: nft_connlimit: disable bh on garbage collection
    
    [ Upstream commit 34a4c95abd25ab41fb390b985a08a651b1fa0b0f ]
    
    BH must be disabled when invoking nf_conncount_gc_list() to perform
    garbage collection, otherwise deadlock might happen.
    
      nf_conncount_add+0x1f/0x50 [nf_conncount]
      nft_connlimit_eval+0x4c/0xe0 [nft_connlimit]
      nft_dynset_eval+0xb5/0x100 [nf_tables]
      nft_do_chain+0xea/0x420 [nf_tables]
      ? sch_direct_xmit+0x111/0x360
      ? noqueue_init+0x10/0x10
      ? __qdisc_run+0x84/0x510
      ? tcp_packet+0x655/0x1610 [nf_conntrack]
      ? ip_finish_output2+0x1a7/0x430
      ? tcp_error+0x130/0x150 [nf_conntrack]
      ? nf_conntrack_in+0x1fc/0x4c0 [nf_conntrack]
      nft_do_chain_ipv4+0x66/0x80 [nf_tables]
      nf_hook_slow+0x44/0xc0
      ip_rcv+0xb5/0xd0
      ? ip_rcv_finish_core.isra.19+0x360/0x360
      __netif_receive_skb_one_core+0x52/0x70
      netif_receive_skb_internal+0x34/0xe0
      napi_gro_receive+0xba/0xe0
      e1000_clean_rx_irq+0x1e9/0x420 [e1000e]
      e1000e_poll+0xbe/0x290 [e1000e]
      net_rx_action+0x149/0x3b0
      __do_softirq+0xde/0x2d8
      irq_exit+0xba/0xc0
      do_IRQ+0x85/0xd0
      common_interrupt+0xf/0xf
      </IRQ>
      RIP: 0010:nf_conncount_gc_list+0x3b/0x130 [nf_conncount]
    
    Fixes: 2f971a8f4255 ("netfilter: nf_conncount: move all list iterations under spinlock")
    Reported-by: Laura Garcia Liebana <nevola@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13104599d07fe751c4b16b54beb2b2f74067dae9
Author: Miaoqing Pan <miaoqing@codeaurora.org>
Date:   Fri Sep 27 10:03:16 2019 +0800

    mac80211: fix txq null pointer dereference
    
    [ Upstream commit 8ed31a264065ae92058ce54aa3cc8da8d81dc6d7 ]
    
    If the interface type is P2P_DEVICE or NAN, read the file of
    '/sys/kernel/debug/ieee80211/phyx/netdev:wlanx/aqm' will get a
    NULL pointer dereference. As for those interface type, the
    pointer sdata->vif.txq is NULL.
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000011
    CPU: 1 PID: 30936 Comm: cat Not tainted 4.14.104 #1
    task: ffffffc0337e4880 task.stack: ffffff800cd20000
    PC is at ieee80211_if_fmt_aqm+0x34/0xa0 [mac80211]
    LR is at ieee80211_if_fmt_aqm+0x34/0xa0 [mac80211]
    [...]
    Process cat (pid: 30936, stack limit = 0xffffff800cd20000)
    [...]
    [<ffffff8000b7cd00>] ieee80211_if_fmt_aqm+0x34/0xa0 [mac80211]
    [<ffffff8000b7c414>] ieee80211_if_read+0x60/0xbc [mac80211]
    [<ffffff8000b7ccc4>] ieee80211_if_read_aqm+0x28/0x30 [mac80211]
    [<ffffff80082eff94>] full_proxy_read+0x2c/0x48
    [<ffffff80081eef00>] __vfs_read+0x2c/0xd4
    [<ffffff80081ef084>] vfs_read+0x8c/0x108
    [<ffffff80081ef494>] SyS_read+0x40/0x7c
    
    Signed-off-by: Miaoqing Pan <miaoqing@codeaurora.org>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/r/1569549796-8223-1-git-send-email-miaoqing@codeaurora.org
    [trim useless data from commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09c5a5bb0f26a8d39b5cde5b6fd01bc57f853372
Author: Miaoqing Pan <miaoqing@codeaurora.org>
Date:   Thu Sep 26 16:16:50 2019 +0800

    nl80211: fix null pointer dereference
    
    [ Upstream commit b501426cf86e70649c983c52f4c823b3c40d72a3 ]
    
    If the interface is not in MESH mode, the command 'iw wlanx mpath del'
    will cause kernel panic.
    
    The root cause is null pointer access in mpp_flush_by_proxy(), as the
    pointer 'sdata->u.mesh.mpp_paths' is NULL for non MESH interface.
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000068
    [...]
    PC is at _raw_spin_lock_bh+0x20/0x5c
    LR is at mesh_path_del+0x1c/0x17c [mac80211]
    [...]
    Process iw (pid: 4537, stack limit = 0xd83e0238)
    [...]
    [<c021211c>] (_raw_spin_lock_bh) from [<bf8c7648>] (mesh_path_del+0x1c/0x17c [mac80211])
    [<bf8c7648>] (mesh_path_del [mac80211]) from [<bf6cdb7c>] (extack_doit+0x20/0x68 [compat])
    [<bf6cdb7c>] (extack_doit [compat]) from [<c05c309c>] (genl_rcv_msg+0x274/0x30c)
    [<c05c309c>] (genl_rcv_msg) from [<c05c25d8>] (netlink_rcv_skb+0x58/0xac)
    [<c05c25d8>] (netlink_rcv_skb) from [<c05c2e14>] (genl_rcv+0x20/0x34)
    [<c05c2e14>] (genl_rcv) from [<c05c1f90>] (netlink_unicast+0x11c/0x204)
    [<c05c1f90>] (netlink_unicast) from [<c05c2420>] (netlink_sendmsg+0x30c/0x370)
    [<c05c2420>] (netlink_sendmsg) from [<c05886d0>] (sock_sendmsg+0x70/0x84)
    [<c05886d0>] (sock_sendmsg) from [<c0589f4c>] (___sys_sendmsg.part.3+0x188/0x228)
    [<c0589f4c>] (___sys_sendmsg.part.3) from [<c058add4>] (__sys_sendmsg+0x4c/0x70)
    [<c058add4>] (__sys_sendmsg) from [<c0208c80>] (ret_fast_syscall+0x0/0x44)
    Code: e2822c02 e2822001 e5832004 f590f000 (e1902f9f)
    ---[ end trace bbd717600f8f884d ]---
    
    Signed-off-by: Miaoqing Pan <miaoqing@codeaurora.org>
    Link: https://lore.kernel.org/r/1569485810-761-1-git-send-email-miaoqing@codeaurora.org
    [trim useless data from commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90a886b68faacff8955bd1864431ecf9060aa848
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Fri Sep 27 16:49:20 2019 +0100

    xen/efi: Set nonblocking callbacks
    
    [ Upstream commit df359f0d09dc029829b66322707a2f558cb720f7 ]
    
    Other parts of the kernel expect these nonblocking EFI callbacks to
    exist and crash when running under Xen. Since the implementations of
    xen_efi_set_variable() and xen_efi_query_variable_info() do not take any
    locks, use them for the nonblocking callbacks too.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d880444955ea5911c38c67ecb13a22f800dc766
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Mon Sep 30 11:39:52 2019 +0200

    MIPS: dts: ar9331: fix interrupt-controller size
    
    [ Upstream commit 0889d07f3e4b171c453b2aaf2b257f9074cdf624 ]
    
    It is two registers each of 4 byte.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Pengutronix Kernel Team <kernel@pengutronix.de>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: devicetree@vger.kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d0da953bd8e7fc9e429309c99efd347eedad39b
Author: Michal Vokáč <michal.vokac@ysoft.com>
Date:   Thu Sep 26 10:59:17 2019 +0200

    net: dsa: qca8k: Use up to 7 ports for all operations
    
    [ Upstream commit 7ae6d93c8f052b7a77ba56ed0f654e22a2876739 ]
    
    The QCA8K family supports up to 7 ports. So use the existing
    QCA8K_NUM_PORTS define to allocate the switch structure and limit all
    operations with the switch ports.
    
    This was not an issue until commit 0394a63acfe2 ("net: dsa: enable and
    disable all ports") disabled all unused ports. Since the unused ports 7-11
    are outside of the correct register range on this switch some registers
    were rewritten with invalid content.
    
    Fixes: 6b93fb46480a ("net-next: dsa: add new driver for qca8xxx family")
    Fixes: a0c02161ecfc ("net: dsa: variable number of ports")
    Fixes: 0394a63acfe2 ("net: dsa: enable and disable all ports")
    Signed-off-by: Michal Vokáč <michal.vokac@ysoft.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cd24f5edab8cad6c9c3b32addd8a2a6de06226b
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Mon Sep 30 11:54:50 2019 +0300

    ARM: dts: am4372: Set memory bandwidth limit for DISPC
    
    [ Upstream commit f90ec6cdf674248dcad85bf9af6e064bf472b841 ]
    
    Set memory bandwidth limit to filter out resolutions above 720p@60Hz to
    avoid underflow errors due to the bandwidth needs of higher resolutions.
    
    am43xx can not provide enough bandwidth to DISPC to correctly handle
    'high' resolutions.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 960019214539ce75398eaf38d31c77b86aadd739
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Tue Sep 17 17:47:12 2019 -0500

    ieee802154: ca8210: prevent memory leak
    
    [ Upstream commit 6402939ec86eaf226c8b8ae00ed983936b164908 ]
    
    In ca8210_probe the allocated pdata needs to be assigned to
    spi_device->dev.platform_data before calling ca8210_get_platform_data.
    Othrwise when ca8210_get_platform_data fails pdata cannot be released.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20190917224713.26371-1-navid.emamdoost@gmail.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec3817c62edeb1c4ec070a72901bd44cdf5b035d
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Sep 24 16:19:00 2019 -0700

    ARM: OMAP2+: Fix warnings with broken omap2_set_init_voltage()
    
    [ Upstream commit cf395f7ddb9ebc6b2d28d83b53d18aa4e7c19701 ]
    
    This code is currently unable to find the dts opp tables as ti-cpufreq
    needs to set them up first based on speed binning.
    
    We stopped initializing the opp tables with platform code years ago for
    device tree based booting with commit 92d51856d740 ("ARM: OMAP3+: do not
    register non-dt OPP tables for device tree boot"), and all of mach-omap2
    is now booting using device tree.
    
    We currently get the following errors on init:
    
    omap2_set_init_voltage: unable to find boot up OPP for vdd_mpu
    omap2_set_init_voltage: unable to set vdd_mpu
    omap2_set_init_voltage: unable to find boot up OPP for vdd_core
    omap2_set_init_voltage: unable to set vdd_core
    omap2_set_init_voltage: unable to find boot up OPP for vdd_iva
    omap2_set_init_voltage: unable to set vdd_iva
    
    Let's just drop the unused code. Nowadays ti-cpufreq should be used to
    to initialize things properly.
    
    Cc: Adam Ford <aford173@gmail.com>
    Cc: André Roth <neolynx@gmail.com>
    Cc: "H. Nikolaus Schaller" <hns@goldelico.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Tero Kristo <t-kristo@ti.com>
    Tested-by: Adam Ford <aford173@gmail.com> #logicpd-torpedo-37xx-devkit
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a23cd06c2cd2aab5728c1755616d2a1ffb95d6ac
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Sep 24 09:25:52 2019 -0700

    ARM: OMAP2+: Fix missing reset done flag for am3 and am43
    
    [ Upstream commit 8ad8041b98c665b6147e607b749586d6e20ba73a ]
    
    For ti,sysc-omap4 compatible devices with no sysstatus register, we do have
    reset done status available in the SOFTRESET bit that clears when the reset
    is done. This is documented for example in am437x TRM for DMTIMER_TIOCP_CFG
    register. The am335x TRM just says that SOFTRESET bit value 1 means reset is
    ongoing, but it behaves the same way clearing after reset is done.
    
    With the ti-sysc driver handling this automatically based on no sysstatus
    register defined, we see warnings if SYSC_HAS_RESET_STATUS is missing in the
    legacy platform data:
    
    ti-sysc 48042000.target-module: sysc_flags 00000222 != 00000022
    ti-sysc 48044000.target-module: sysc_flags 00000222 != 00000022
    ti-sysc 48046000.target-module: sysc_flags 00000222 != 00000022
    ...
    
    Let's fix these warnings by adding SYSC_HAS_RESET_STATUS. Let's also
    remove the useless parentheses while at it.
    
    If it turns out we do have ti,sysc-omap4 compatible devices without a
    working SOFTRESET bit we can set up additional quirk handling for it.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcff55e2559366b53c41beab33a0e28dd21b7b5b
Author: Quinn Tran <qutran@marvell.com>
Date:   Thu Sep 12 11:09:06 2019 -0700

    scsi: qla2xxx: Fix unbound sleep in fcport delete path.
    
    [ Upstream commit c3b6a1d397420a0fdd97af2f06abfb78adc370df ]
    
    There are instances, though rare, where a LOGO request cannot be sent out
    and the thread in free session done can wait indefinitely. Fix this by
    putting an upper bound to sleep.
    
    Link: https://lore.kernel.org/r/20190912180918.6436-3-hmadhani@marvell.com
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3d475c7d9b9d789e1e2c3b3307804ecd10749de
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Sat Sep 7 09:07:30 2019 +0800

    scsi: megaraid: disable device when probe failed after enabled device
    
    [ Upstream commit 70054aa39a013fa52eff432f2223b8bd5c0048f8 ]
    
    For pci device, need to disable device when probe failed after enabled
    device.
    
    Link: https://lore.kernel.org/r/1567818450-173315-1-git-send-email-chenxiang66@hisilicon.com
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    Reviewed-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6d91bd3fa35fb85ffbcaeb6f6ff332da13f8923
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Wed Sep 18 12:20:38 2019 +0800

    scsi: ufs: skip shutdown if hba is not powered
    
    [ Upstream commit f51913eef23f74c3bd07899dc7f1ed6df9e521d8 ]
    
    In some cases, hba may go through shutdown flow without successful
    initialization and then make system hang.
    
    For example, if ufshcd_change_power_mode() gets error and leads to
    ufshcd_hba_exit() to release resources of the host, future shutdown flow
    may hang the system since the host register will be accessed in unpowered
    state.
    
    To solve this issue, simply add checking to skip shutdown for above kind of
    situation.
    
    Link: https://lore.kernel.org/r/1568780438-28753-1-git-send-email-stanley.chu@mediatek.com
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Acked-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db783e05df551f48580b2b08965716a1368ac53a
Author: Balbir Singh <sblbir@amzn.com>
Date:   Wed Sep 18 00:27:20 2019 +0000

    nvme-pci: Fix a race in controller removal
    
    [ Upstream commit b224726de5e496dbf78147a66755c3d81e28bdd2 ]
    
    User space programs like udevd may try to read to partitions at the
    same time the driver detects a namespace is unusable, and may deadlock
    if revalidate_disk() is called while such a process is waiting to
    enter the frozen queue. On detecting a dead namespace, move the disk
    revalidate after unblocking dispatchers that may be holding bd_butex.
    
    changelog Suggested-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
