commit ce62d3c7a552d9b1e3471a189abcccbfe5b91ac8
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Nov 22 09:58:15 2020 +0100

    Linux 4.9.245
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201120104539.706905067@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b3d78747719dc1eea45d5b85bfb2e11998213d6
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Sat Nov 7 00:49:39 2020 -0800

    ACPI: GED: fix -Wformat
    
    commit 9debfb81e7654fe7388a49f45bc4d789b94c1103 upstream.
    
    Clang is more aggressive about -Wformat warnings when the format flag
    specifies a type smaller than the parameter. It turns out that gsi is an
    int. Fixes:
    
    drivers/acpi/evged.c:105:48: warning: format specifies type 'unsigned
    char' but the argument has type 'unsigned int' [-Wformat]
    trigger == ACPI_EDGE_SENSITIVE ? 'E' : 'L', gsi);
                                                ^~~
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/378
    Fixes: ea6f3af4c5e6 ("ACPI: GED: add support for _Exx / _Lxx handler methods")
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55f76704ecc5962ce1fd70c83a3433e5b112a06a
Author: David Edmondson <david.edmondson@oracle.com>
Date:   Tue Nov 3 12:04:00 2020 +0000

    KVM: x86: clflushopt should be treated as a no-op by emulation
    
    commit 51b958e5aeb1e18c00332e0b37c5d4e95a3eff84 upstream.
    
    The instruction emulator ignores clflush instructions, yet fails to
    support clflushopt. Treat both similarly.
    
    Fixes: 13e457e0eebf ("KVM: x86: Emulator does not decode clflush well")
    Signed-off-by: David Edmondson <david.edmondson@oracle.com>
    Message-Id: <20201103120400.240882-1-david.edmondson@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e99d5ec22e74a0cf1ff65b70aaf1f0b12b7b6d0f
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Oct 9 14:17:11 2020 +0200

    mac80211: always wind down STA state
    
    commit dcd479e10a0510522a5d88b29b8f79ea3467d501 upstream.
    
    When (for example) an IBSS station is pre-moved to AUTHORIZED
    before it's inserted, and then the insertion fails, we don't
    clean up the fast RX/TX states that might already have been
    created, since we don't go through all the state transitions
    again on the way down.
    
    Do that, if it hasn't been done already, when the station is
    freed. I considered only freeing the fast TX/RX state there,
    but we might add more state so it's more robust to wind down
    the state properly.
    
    Note that we warn if the station was ever inserted, it should
    have been properly cleaned up in that case, and the driver
    will probably not like things happening out of order.
    
    Reported-by: syzbot+2e293dbd67de2836ba42@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201009141710.7223b322a955.I95bd08b9ad0e039c034927cce0b75beea38e059b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 452e66f60880ac1fa1ca0a594fc1ebaee87fa35d
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Oct 26 13:36:17 2020 -0700

    Input: sunkbd - avoid use-after-free in teardown paths
    
    commit 77e70d351db7de07a46ac49b87a6c3c7a60fca7e upstream.
    
    We need to make sure we cancel the reinit work before we tear down the
    driver structures.
    
    Reported-by: Bodong Zhao <nopitydays@gmail.com>
    Tested-by: Bodong Zhao <nopitydays@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f268980d040ecad0631b9c767e14e6b09e61b20
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Oct 12 08:54:31 2020 +0000

    powerpc/8xx: Always fault when _PAGE_ACCESSED is not set
    
    commit 29daf869cbab69088fe1755d9dd224e99ba78b56 upstream.
    
    The kernel expects pte_young() to work regardless of CONFIG_SWAP.
    
    Make sure a minor fault is taken to set _PAGE_ACCESSED when it
    is not already set, regardless of the selection of CONFIG_SWAP.
    
    This adds at least 3 instructions to the TLB miss exception
    handlers fast path. Following patch will reduce this overhead.
    
    Also update the rotation instruction to the correct number of bits
    to reflect all changes done to _PAGE_ACCESSED over time.
    
    Fixes: d069cb4373fe ("powerpc/8xx: Don't touch ACCESSED when no SWAP.")
    Fixes: 5f356497c384 ("powerpc/8xx: remove unused _PAGE_WRITETHRU")
    Fixes: e0a8e0d90a9f ("powerpc/8xx: Handle PAGE_USER via APG bits")
    Fixes: 5b2753fc3e8a ("powerpc/8xx: Implementation of PAGE_EXEC")
    Fixes: a891c43b97d3 ("powerpc/8xx: Prepare handlers for _PAGE_HUGE for 512k pages.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/af834e8a0f1fa97bfae65664950f0984a70c4750.1602492856.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24b0ff1fc3d985c141677678b63f54caff0078f8
Author: Mike Looijmans <mike.looijmans@topic.nl>
Date:   Thu Mar 23 10:00:36 2017 +0100

    i2c: mux: pca954x: Add missing pca9546 definition to chip_desc
    
    commit dbe4d69d252e9e65c6c46826980b77b11a142065 upstream.
    
    The spec for the pca9546 was missing. This chip is the same as the pca9545
    except that it lacks interrupt lines. While the i2c_device_id table mapped
    the pca9546 to the pca9545 definition the compatible table did not.
    
    Signed-off-by: Mike Looijmans <mike.looijmans@topic.nl>
    Signed-off-by: Peter Rosin <peda@axentia.se>
    Cc: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17d1baef2d0d667668e9bf2d6a00edc1545915f7
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sun Sep 20 23:12:38 2020 +0200

    i2c: imx: Fix external abort on interrupt in exit paths
    
    commit e50e4f0b85be308a01b830c5fbdffc657e1a6dd0 upstream
    
    If interrupt comes late, during probe error path or device remove (could
    be triggered with CONFIG_DEBUG_SHIRQ), the interrupt handler
    i2c_imx_isr() will access registers with the clock being disabled.  This
    leads to external abort on non-linefetch on Toradex Colibri VF50 module
    (with Vybrid VF5xx):
    
        Unhandled fault: external abort on non-linefetch (0x1008) at 0x8882d003
        Internal error: : 1008 [#1] ARM
        Modules linked in:
        CPU: 0 PID: 1 Comm: swapper Not tainted 5.7.0 #607
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
          (i2c_imx_isr) from [<8017009c>] (free_irq+0x25c/0x3b0)
          (free_irq) from [<805844ec>] (release_nodes+0x178/0x284)
          (release_nodes) from [<80580030>] (really_probe+0x10c/0x348)
          (really_probe) from [<80580380>] (driver_probe_device+0x60/0x170)
          (driver_probe_device) from [<80580630>] (device_driver_attach+0x58/0x60)
          (device_driver_attach) from [<805806bc>] (__driver_attach+0x84/0xc0)
          (__driver_attach) from [<8057e228>] (bus_for_each_dev+0x68/0xb4)
          (bus_for_each_dev) from [<8057f3ec>] (bus_add_driver+0x144/0x1ec)
          (bus_add_driver) from [<80581320>] (driver_register+0x78/0x110)
          (driver_register) from [<8010213c>] (do_one_initcall+0xa8/0x2f4)
          (do_one_initcall) from [<80c0100c>] (kernel_init_freeable+0x178/0x1dc)
          (kernel_init_freeable) from [<80807048>] (kernel_init+0x8/0x110)
          (kernel_init) from [<80100114>] (ret_from_fork+0x14/0x20)
    
    Additionally, the i2c_imx_isr() could wake up the wait queue
    (imx_i2c_struct->queue) before its initialization happens.
    
    The resource-managed framework should not be used for interrupt handling,
    because the resource will be released too late - after disabling clocks.
    The interrupt handler is not prepared for such case.
    
    Fixes: 1c4b6c3bcf30 ("i2c: imx: implement bus recovery")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5c5b2d54eacae5c734b5cabfaa267dc70edff84
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Mar 8 14:25:17 2018 +0100

    i2c: imx: use clk notifier for rate changes
    
    commit 90ad2cbe88c22d0215225ab9594eeead0eb24fde upstream
    
    Instead of repeatedly calling clk_get_rate for each transfer, register
    a clock notifier to update the cached divider value each time the clock
    rate actually changes.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d67c5c60a4225d98e24381f2da8f449e50733e81
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:57:43 2020 +1100

    powerpc/64s: flush L1D after user accesses
    
    commit 9a32a7e78bd0cd9a9b6332cbdc345ee5ffd0c5de upstream.
    
    IBM Power9 processors can speculatively operate on data in the L1 cache before
    it has been completely validated, via a way-prediction mechanism. It is not possible
    for an attacker to determine the contents of impermissible memory using this method,
    since these systems implement a combination of hardware and software security measures
    to prevent scenarios where protected data could be leaked.
    
    However these measures don't address the scenario where an attacker induces
    the operating system to speculatively execute instructions using data that the
    attacker controls. This can be used for example to speculatively bypass "kernel
    user access prevention" techniques, as discovered by Anthony Steinhauser of
    Google's Safeside Project. This is not an attack by itself, but there is a possibility
    it could be used in conjunction with side-channels or other weaknesses in the
    privileged code to construct an attack.
    
    This issue can be mitigated by flushing the L1 cache between privilege boundaries
    of concern. This patch flushes the L1 cache after user accesses.
    
    This is part of the fix for CVE-2020-4788.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fbcbd259cf6ecab607efc7ad3a0f3d9bff3a325
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:57:42 2020 +1100

    powerpc/uaccess: Evaluate macro arguments once, before user access is allowed
    
    commit d02f6b7dab8228487268298ea1f21081c0b4b3eb upstream.
    
    get/put_user() can be called with nontrivial arguments. fs/proc/page.c
    has a good example:
    
        if (put_user(stable_page_flags(ppage), out)) {
    
    stable_page_flags() is quite a lot of code, including spin locks in
    the page allocator.
    
    Ensure these arguments are evaluated before user access is allowed.
    
    This improves security by reducing code with access to userspace, but
    it also fixes a PREEMPT bug with KUAP on powerpc/64s:
    stable_page_flags() is currently called with AMR set to allow writes,
    it ends up calling spin_unlock(), which can call preempt_schedule. But
    the task switch code can not be called with AMR set (it relies on
    interrupts saving the register), so this blows up.
    
    It's fine if the code inside allow_user_access() is preemptible,
    because a timer or IPI will save the AMR, but it's not okay to
    explicitly cause a reschedule.
    
    Fixes: de78a9c42a79 ("powerpc: Add a framework for Kernel Userspace Access Protection")
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200407041245.600651-1-npiggin@gmail.com
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d765c7b38bc7532b99e868e4df9f9b3156f2cb0c
Author: Andrew Donnellan <ajd@linux.ibm.com>
Date:   Fri Nov 20 10:57:41 2020 +1100

    powerpc: Fix __clear_user() with KUAP enabled
    
    commit 61e3acd8c693a14fc69b824cb5b08d02cb90a6e7 upstream.
    
    The KUAP implementation adds calls in clear_user() to enable and
    disable access to userspace memory. However, it doesn't add these to
    __clear_user(), which is used in the ptrace regset code.
    
    As there's only one direct user of __clear_user() (the regset code),
    and the time taken to set the AMR for KUAP purposes is going to
    dominate the cost of a quick access_ok(), there's not much point
    having a separate path.
    
    Rename __clear_user() to __arch_clear_user(), and make __clear_user()
    just call clear_user().
    
    Reported-by: syzbot+f25ecf4b2982d8c7a640@syzkaller-ppc64.appspotmail.com
    Reported-by: Daniel Axtens <dja@axtens.net>
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Fixes: de78a9c42a79 ("powerpc: Add a framework for Kernel Userspace Access Protection")
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    [mpe: Use __arch_clear_user() for the asm version like arm64 & nds32]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191209132221.15328-1-ajd@linux.ibm.com
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3853ff577423903917b7951bbf48bb198a96bd18
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Nov 20 10:57:40 2020 +1100

    powerpc: Implement user_access_begin and friends
    
    commit 5cd623333e7cf4e3a334c70529268b65f2a6c2c7 upstream.
    
    Today, when a function like strncpy_from_user() is called,
    the userspace access protection is de-activated and re-activated
    for every word read.
    
    By implementing user_access_begin and friends, the protection
    is de-activated at the beginning of the copy and re-activated at the
    end.
    
    Implement user_access_begin(), user_access_end() and
    unsafe_get_user(), unsafe_put_user() and unsafe_copy_to_user()
    
    For the time being, we keep user_access_save() and
    user_access_restore() as nops.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/36d4fbf9e56a75994aca4ee2214c77b26a5a8d35.1579866752.git.christophe.leroy@c-s.fr
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82973e9a1b814c3f0a11014fd84261f4c9e00e37
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Nov 20 10:57:39 2020 +1100

    powerpc: Add a framework for user access tracking
    
    Backported from commit de78a9c42a79 ("powerpc: Add a framework
    for Kernel Userspace Access Protection"). Here we don't try to
    add the KUAP framework, we just want the helper functions
    because we want to put uaccess flush helpers in them.
    
    In terms of fixes, we don't need commit 1d8f739b07bd ("powerpc/kuap:
    Fix set direction in allow/prevent_user_access()") as we don't have
    real KUAP. Likewise as all our allows are noops and all our prevents
    are just flushes, we don't need commit 9dc086f1e9ef ("powerpc/futex:
    Fix incorrect user access blocking") The other 2 fixes we do need.
    
    The original description is:
    
    This patch implements a framework for Kernel Userspace Access
    Protection.
    
    Then subarches will have the possibility to provide their own
    implementation by providing setup_kuap() and
    allow/prevent_user_access().
    
    Some platforms will need to know the area accessed and whether it is
    accessed from read, write or both. Therefore source, destination and
    size and handed over to the two functions.
    
    mpe: Rename to allow/prevent rather than unlock/lock, and add
    read/write wrappers. Drop the 32-bit code for now until we have an
    implementation for it. Add kuap to pt_regs for 64-bit as well as
    32-bit. Don't split strings, use pr_crit_ratelimited().
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa4bf9f38184ed7ca4916eb64f8c767d1e279c1f
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:57:38 2020 +1100

    powerpc/64s: flush L1D on kernel entry
    
    commit f79643787e0a0762d2409b7b8334e83f22d85695 upstream.
    
    IBM Power9 processors can speculatively operate on data in the L1 cache before
    it has been completely validated, via a way-prediction mechanism. It is not possible
    for an attacker to determine the contents of impermissible memory using this method,
    since these systems implement a combination of hardware and software security measures
    to prevent scenarios where protected data could be leaked.
    
    However these measures don't address the scenario where an attacker induces
    the operating system to speculatively execute instructions using data that the
    attacker controls. This can be used for example to speculatively bypass "kernel
    user access prevention" techniques, as discovered by Anthony Steinhauser of
    Google's Safeside Project. This is not an attack by itself, but there is a possibility
    it could be used in conjunction with side-channels or other weaknesses in the
    privileged code to construct an attack.
    
    This issue can be mitigated by flushing the L1 cache between privilege boundaries
    of concern. This patch flushes the L1 cache on kernel entry.
    
    This is part of the fix for CVE-2020-4788.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4eb53cb9f9f71bf615f344524eb195607501dd9e
Author: Daniel Axtens <dja@axtens.net>
Date:   Fri Nov 20 10:57:37 2020 +1100

    powerpc/64s: move some exception handlers out of line
    
    (backport only)
    
    We're about to grow the exception handlers, which will make a bunch of them
    no longer fit within the space available. We move them out of line.
    
    This is a fiddly and error-prone business, so in the interests of reviewability
    I haven't merged this in with the addition of the entry flush.
    
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6672e0ba87c7643ed2c86ac949d3dbaa7a8ae6d7
Author: Daniel Axtens <dja@axtens.net>
Date:   Fri Nov 20 10:57:36 2020 +1100

    powerpc/64s: Define MASKABLE_RELON_EXCEPTION_PSERIES_OOL
    
    Commit da2bc4644c75 ("powerpc/64s: Add new exception vector macros")
    adds:
    
    +#define __TRAMP_REAL_VIRT_OOL_MASKABLE(name, realvec)          \
    +       TRAMP_REAL_BEGIN(tramp_virt_##name);                            \
    +       MASKABLE_RELON_EXCEPTION_PSERIES_OOL(realvec, name##_common);   \
    
    However there's no reference there or anywhere else to
    MASKABLE_RELON_EXCEPTION_PSERIES_OOL and an attempt to use it
    unsurprisingly doesn't work.
    
    Add a definition provided by mpe.
    
    Fixes: da2bc4644c75 ("powerpc/64s: Add new exception vector macros")
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
