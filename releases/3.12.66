commit e5dbd4b84ad7bfe4653876f9ea4411e699fac9ce
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Oct 20 10:19:39 2016 +0200

    Linux 3.12.66

commit f949fcd7414197b8e04b07c480d36bc39332ff7b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 13 13:07:36 2016 -0700

    mm: remove gup_flags FOLL_WRITE games from __get_user_pages()
    
    commit 19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619 upstream.
    
    This is an ancient bug that was actually attempted to be fixed once
    (badly) by me eleven years ago in commit 4ceb5db9757a ("Fix
    get_user_pages() race for write access") but that was then undone due to
    problems on s390 by commit f33ea7f404e5 ("fix get_user_pages bug").
    
    In the meantime, the s390 situation has long been fixed, and we can now
    fix it by checking the pte_dirty() bit properly (and do it better).  The
    s390 dirty bit was implemented in abf09bed3cce ("s390/mm: implement
    software dirty bits") which made it into v3.9.  Earlier kernels will
    have to look at the page state itself.
    
    Also, the VM has become more scalable, and what used a purely
    theoretical race back then has become easier to trigger.
    
    To fix it, we introduce a new internal FOLL_COW flag to mark the "yes,
    we already did a COW" rather than play racy games with FOLL_WRITE that
    is very fundamental, and then use the pte dirty flag to validate that
    the FOLL_COW flag is still valid.
    
    Reported-and-tested-by: Phil "not Paul" Oester <kernel@linuxace.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: Michal Hocko <mhocko@suse.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: Nick Piggin <npiggin@gmail.com>
    Cc: Greg Thelen <gthelen@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7faace13ccd82ecf7030143f2ba30cfbd70bc6cb
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Mar 16 20:04:35 2016 -0700

    x86/build: Build compressed x86 kernels as PIE
    
    commit 6d92bc9d483aa1751755a66fee8fb39dffb088c0 upstream.
    
    The 32-bit x86 assembler in binutils 2.26 will generate R_386_GOT32X
    relocation to get the symbol address in PIC.  When the compressed x86
    kernel isn't built as PIC, the linker optimizes R_386_GOT32X relocations
    to their fixed symbol addresses.  However, when the compressed x86
    kernel is loaded at a different address, it leads to the following
    load failure:
    
      Failed to allocate space for phdrs
    
    during the decompression stage.
    
    If the compressed x86 kernel is relocatable at run-time, it should be
    compiled with -fPIE, instead of -fPIC, if possible and should be built as
    Position Independent Executable (PIE) so that linker won't optimize
    R_386_GOT32X relocation to its fixed symbol address.
    
    Older linkers generate R_386_32 relocations against locally defined
    symbols, _bss, _ebss, _got and _egot, in PIE.  It isn't wrong, just less
    optimal than R_386_RELATIVE.  But the x86 kernel fails to properly handle
    R_386_32 relocations when relocating the kernel.  To generate
    R_386_RELATIVE relocations, we mark _bss, _ebss, _got and _egot as
    hidden in both 32-bit and 64-bit x86 kernels.
    
    To build a 64-bit compressed x86 kernel as PIE, we need to disable the
    relocation overflow check to avoid relocation overflow errors. We do
    this with a new linker command-line option, -z noreloc-overflow, which
    got added recently:
    
     commit 4c10bbaa0912742322f10d9d5bb630ba4e15dfa7
     Author: H.J. Lu <hjl.tools@gmail.com>
     Date:   Tue Mar 15 11:07:06 2016 -0700
    
        Add -z noreloc-overflow option to x86-64 ld
    
        Add -z noreloc-overflow command-line option to the x86-64 ELF linker to
        disable relocation overflow check.  This can be used to avoid relocation
        overflow check if there will be no dynamic relocation overflow at
        run-time.
    
    The 64-bit compressed x86 kernel is built as PIE only if the linker supports
    -z noreloc-overflow.  So far 64-bit relocatable compressed x86 kernel
    boots fine even when it is built as a normal executable.
    
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    [ Edited the changelog and comments. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Paul Bolle <pebolle@tiscali.nl>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit bfce0a403535f6071a08d6365b8c4b3cfeba2d67
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Sep 5 10:45:47 2016 +0100

    brcmfmac: avoid potential stack overflow in brcmf_cfg80211_start_ap()
    
    commit ded89912156b1a47d940a0c954c43afbabd0c42c upstream.
    
    User-space can choose to omit NL80211_ATTR_SSID and only provide raw
    IE TLV data. When doing so it can provide SSID IE with length exceeding
    the allowed size. The driver further processes this IE copying it
    into a local variable without checking the length. Hence stack can be
    corrupted and used as exploit.
    
    Reported-by: Daxing Guo <freener.gdx@gmail.com>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Acked-by: Benjamin Poirier <bpoirier@suse.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 5637eef24a4fe22015ccbf4a5a4d0f1f7ad67190
Author: Jaewon Kim <jaewon31.kim@samsung.com>
Date:   Thu Jan 21 16:55:07 2016 -0800

    ratelimit: fix bug in time interval by resetting right begin time
    
    commit c2594bc37f4464bc74f2c119eb3269a643400aa0 upstream.
    
    rs->begin in ratelimit is set in two cases.
     1) when rs->begin was not initialized
     2) when rs->interval was passed
    
    For case #2, current ratelimit sets the begin to 0.  This incurrs
    improper suppression.  The begin value will be set in the next ratelimit
    call by 1).  Then the time interval check will be always false, and
    rs->printed will not be initialized.  Although enough time passed,
    ratelimit may return 0 if rs->printed is not less than rs->burst.  To
    reset interval properly, begin should be jiffies rather than 0.
    
    For an example code below:
    
        static DEFINE_RATELIMIT_STATE(mylimit, 1, 1);
        for (i = 1; i <= 10; i++) {
            if (__ratelimit(&mylimit))
                printk("ratelimit test count %d\n", i);
            msleep(3000);
        }
    
    test result in the current code shows suppression even there is 3 seconds sleep.
    
      [  78.391148] ratelimit test count 1
      [  81.295988] ratelimit test count 2
      [  87.315981] ratelimit test count 4
      [  93.336267] ratelimit test count 6
      [  99.356031] ratelimit test count 8
      [ 105.376367] ratelimit test count 10
    
    Signed-off-by: Jaewon Kim <jaewon31.kim@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 52342f2c308ee92f3e9516c4c2ceb5937bc881e7
Author: Junichi Nomura <j-nomura@ce.jp.nec.com>
Date:   Thu Oct 1 08:31:51 2015 +0000

    dm: fix AB-BA deadlock in __dm_destroy()
    
    commit 2a708cff93f1845b9239bc7d6310aef54e716c6a upstream.
    
    __dm_destroy() takes io_barrier SRCU lock (dm_get_live_table) and
    suspend_lock in reverse order.  Doing so can cause AB-BA deadlock:
    
      __dm_destroy                    dm_swap_table
      ---------------------------------------------------
                                      mutex_lock(suspend_lock)
      dm_get_live_table()
        srcu_read_lock(io_barrier)
                                      dm_sync_table()
                                        synchronize_srcu(io_barrier)
                                          .. waiting for dm_put_live_table()
      mutex_lock(suspend_lock)
        .. waiting for suspend_lock
    
    Fix this by taking the locks in proper order.
    
    Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
    Fixes: ab7c7bb6f4ab ("dm: hold suspend_lock while suspending device during device deletion")
    Acked-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
