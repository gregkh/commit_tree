commit 096998b11906dd79df5af4d688c9974342dd09f2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Aug 16 09:33:36 2016 +0200

    Linux 4.6.7

commit ce1afec0b14dc1cfb7b9777bec8833ffa216a6a8
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Thu Jul 14 23:02:47 2016 -0400

    ext4: fix reference counting bug on block allocation error
    
    commit 554a5ccc4e4a20c5f3ec859de0842db4b4b9c77e upstream.
    
    If we hit this error when mounted with errors=continue or
    errors=remount-ro:
    
        EXT4-fs error (device loop0): ext4_mb_mark_diskspace_used:2940: comm ext4.exe: Allocating blocks 5090-6081 which overlap fs metadata
    
    then ext4_mb_new_blocks() will call ext4_mb_release_context() and try to
    continue. However, ext4_mb_release_context() is the wrong thing to call
    here since we are still actually using the allocation context.
    
    Instead, just error out. We could retry the allocation, but there is a
    possibility of getting stuck in an infinite loop instead, so this seems
    safer.
    
    [ Fixed up so we don't return EAGAIN to userspace. --tytso ]
    
    Fixes: 8556e8f3b6 ("ext4: Don't allow new groups to be added during block allocation")
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d123a55f85f5116d686dac80c768ee5c34ec8e06
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Thu Jul 14 23:21:35 2016 -0400

    ext4: short-cut orphan cleanup on error
    
    commit c65d5c6c81a1f27dec5f627f67840726fcd146de upstream.
    
    If we encounter a filesystem error during orphan cleanup, we should stop.
    Otherwise, we may end up in an infinite loop where the same inode is
    processed again and again.
    
        EXT4-fs (loop0): warning: checktime reached, running e2fsck is recommended
        EXT4-fs error (device loop0): ext4_mb_generate_buddy:758: group 2, block bitmap and bg descriptor inconsistent: 6117 vs 0 free clusters
        Aborting journal on device loop0-8.
        EXT4-fs (loop0): Remounting filesystem read-only
        EXT4-fs error (device loop0) in ext4_free_blocks:4895: Journal has aborted
        EXT4-fs error (device loop0) in ext4_do_update_inode:4893: Journal has aborted
        EXT4-fs error (device loop0) in ext4_do_update_inode:4893: Journal has aborted
        EXT4-fs error (device loop0) in ext4_ext_remove_space:3068: IO failure
        EXT4-fs error (device loop0) in ext4_ext_truncate:4667: Journal has aborted
        EXT4-fs error (device loop0) in ext4_orphan_del:2927: Journal has aborted
        EXT4-fs error (device loop0) in ext4_do_update_inode:4893: Journal has aborted
        EXT4-fs (loop0): Inode 16 (00000000618192a0): orphan list check failed!
        [...]
        EXT4-fs (loop0): Inode 16 (0000000061819748): orphan list check failed!
        [...]
        EXT4-fs (loop0): Inode 16 (0000000061819bf0): orphan list check failed!
        [...]
    
    See-also: c9eb13a9105 ("ext4: fix hang when processing corrupted orphaned inode list")
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dac74db5be1ebef93b72dc5cc6c7d465716e87c
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Tue Jul 5 20:01:52 2016 -0400

    ext4: validate s_reserved_gdt_blocks on mount
    
    commit 5b9554dc5bf008ae7f68a52e3d7e76c0920938a2 upstream.
    
    If s_reserved_gdt_blocks is extremely large, it's possible for
    ext4_init_block_bitmap(), which is called when ext4 sets up an
    uninitialized block bitmap, to corrupt random kernel memory.  Add the
    same checks which e2fsck has --- it must never be larger than
    blocksize / sizeof(__u32) --- and then add a backup check in
    ext4_init_block_bitmap() in case the superblock gets modified after
    the file system is mounted.
    
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bf87f858424f2540d5560a506f68560c5dccf39
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Mon Jul 4 11:03:00 2016 -0400

    ext4: don't call ext4_should_journal_data() on the journal inode
    
    commit 6a7fd522a7c94cdef0a3b08acf8e6702056e635c upstream.
    
    If ext4_fill_super() fails early, it's possible for ext4_evict_inode()
    to call ext4_should_journal_data() before superblock options and flags
    are fully set up.  In that case, the iput() on the journal inode can
    end up causing a BUG().
    
    Work around this problem by reordering the tests so we only call
    ext4_should_journal_data() after we know it's not the journal inode.
    
    Fixes: 2d859db3e4 ("ext4: fix data corruption in inodes with journalled data")
    Fixes: 2b405bfa84 ("ext4: fix data=journal fast mount/umount hang")
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4034e22cc98e4285d141ec66ca6d05bf34e15a12
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jul 4 10:14:01 2016 -0400

    ext4: fix deadlock during page writeback
    
    commit 646caa9c8e196880b41cd3e3d33a2ebc752bdb85 upstream.
    
    Commit 06bd3c36a733 (ext4: fix data exposure after a crash) uncovered a
    deadlock in ext4_writepages() which was previously much harder to hit.
    After this commit xfstest generic/130 reproduces the deadlock on small
    filesystems.
    
    The problem happens when ext4_do_update_inode() sets LARGE_FILE feature
    and marks current inode handle as synchronous. That subsequently results
    in ext4_journal_stop() called from ext4_writepages() to block waiting for
    transaction commit while still holding page locks, reference to io_end,
    and some prepared bio in mpd structure each of which can possibly block
    transaction commit from completing and thus results in deadlock.
    
    Fix the problem by releasing page locks, io_end reference, and
    submitting prepared bio before calling ext4_journal_stop().
    
    [ Changed to defer the call to ext4_journal_stop() only if the handle
      is synchronous.  --tytso ]
    
    Reported-and-tested-by: Eryu Guan <eguan@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f69cb08919d521a89c52b5d341244a512bc296a6
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Thu Jun 30 11:53:46 2016 -0400

    ext4: check for extents that wrap around
    
    commit f70749ca42943faa4d4dcce46dfdcaadb1d0c4b6 upstream.
    
    An extent with lblock = 4294967295 and len = 1 will pass the
    ext4_valid_extent() test:
    
            ext4_lblk_t last = lblock + len - 1;
    
            if (len == 0 || lblock > last)
                    return 0;
    
    since last = 4294967295 + 1 - 1 = 4294967295. This would later trigger
    the BUG_ON(es->es_lblk + es->es_len < es->es_lblk) in ext4_es_end().
    
    We can simplify it by removing the - 1 altogether and changing the test
    to use lblock + len <= lblock, since now if len = 0, then lblock + 0 ==
    lblock and it fails, and if len > 0 then lblock + len > lblock in order
    to pass (i.e. it doesn't overflow).
    
    Fixes: 5946d0893 ("ext4: check for overlapping extents in ext4_valid_extent_entries()")
    Fixes: 2f974865f ("ext4: check for zero length extent explicitly")
    Cc: Eryu Guan <guaneryu@gmail.com>
    Signed-off-by: Phil Turnbull <phil.turnbull@oracle.com>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fbb33362c693b6e991f9ff4d08cb162bae683d2
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Thu Jun 16 16:48:52 2016 +0200

    serial: mvebu-uart: free the IRQ in ->shutdown()
    
    commit c2c1659b4f8f9e19fe82a4fd06cca4b3d59090ce upstream.
    
    As suggested by the serial port infrastructure documentation, the IRQ is
    requested in ->startup(). However, it is never freed in the ->shutdown()
    hook.
    
    With simple systems that open the serial port once for all and always
    have at least one process that keep the serial port opened, there was no
    problem. But with a more complicated system (*cough* systemd *cough*),
    the serial port is opened/closed many times, which at some point no
    processes having the serial port open at all. Due to this ->startup()
    gets called again, tries to request_irq() again, which fails.
    
    Fixes: 30530791a7a0 ("serial: mvebu-uart: initial support for Armada-3700 serial port")
    Cc: Ofer Heifetz <oferh@marvell.com>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c56d9bf4791cb9c243980dfa9a6908ee8fb7a950
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Jul 12 13:17:57 2016 +0800

    crypto: scatterwalk - Fix test in scatterwalk_done
    
    commit 5f070e81bee35f1b7bd1477bb223a873ff657803 upstream.
    
    When there is more data to be processed, the current test in
    scatterwalk_done may prevent us from calling pagedone even when
    we should.
    
    In particular, if we're on an SG entry spanning multiple pages
    where the last page is not a full page, we will incorrectly skip
    calling pagedone on the second last page.
    
    This patch fixes this by adding a separate test for whether we've
    reached the end of a page.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da4a784ef9f079d35afc9c744755e11cb675f7da
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed Jun 15 22:27:05 2016 +0800

    crypto: gcm - Filter out async ghash if necessary
    
    commit b30bdfa86431afbafe15284a3ad5ac19b49b88e3 upstream.
    
    As it is if you ask for a sync gcm you may actually end up with
    an async one because it does not filter out async implementations
    of ghash.
    
    This patch fixes this by adding the necessary filter when looking
    for ghash.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e52fe171cbe1ba444c7d3ecabc39af61a32390e
Author: Andreas Herrmann <aherrmann@suse.com>
Date:   Fri Jul 22 17:14:11 2016 +0200

    Revert "cpufreq: pcc-cpufreq: update default value of cpuinfo_transition_latency"
    
    commit da7d3abe1c9e5ebac2cf86f97e9e89888a5e2094 upstream.
    
    This reverts commit 790d849bf811a8ab5d4cd2cce0f6fda92f6aebf2.
    
    Using a v4.7-rc7 kernel on a HP ProLiant triggered following messages
    
     pcc-cpufreq: (v1.10.00) driver loaded with frequency limits: 1200 MHz, 2800 MHz
     cpufreq: ondemand governor failed, too long transition latency of HW, fallback to performance governor
    
    The last line was shown for each CPU in the system.
    Testing v4.5 (where commit 790d849b was integrated) triggered
    similar messages. Same behaviour on a 2nd HP Proliant system.
    
    So commit 790d849bf (cpufreq: pcc-cpufreq: update default value of
    cpuinfo_transition_latency) causes the system to use performance
    governor which, I guess, was not the intention of the patch.
    
    Enabling debug output in pcc-cpufreq provides following verbose output:
    
     pcc-cpufreq: (v1.10.00) driver loaded with frequency limits: 1200 MHz, 2800 MHz
     pcc_get_offset: for CPU 0: pcc_cpu_data input_offset: 0x44, pcc_cpu_data output_offset: 0x48
     init: policy->max is 2800000, policy->min is 1200000
     get: get_freq for CPU 0
     get: SUCCESS: (virtual) output_offset for cpu 0 is 0xffffc9000d7c0048, contains a value of: 0xff06. Speed is: 168000 MHz
     cpufreq: ondemand governor failed, too long transition latency of HW, fallback to performance governor
     target: CPU 0 should go to target freq: 2800000 (virtual) input_offset is 0xffffc9000d7c0044
     target: was SUCCESSFUL for cpu 0
    
    I am asking to revert 790d849bf to re-enable usage of ondemand
    governor with pcc-cpufreq.
    
    Fixes: 790d849bf (cpufreq: pcc-cpufreq: update default value of cpuinfo_transition_latency)
    Signed-off-by: Andreas Herrmann <aherrmann@suse.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec686b017167e4d306f295d21399d532783a69a0
Author: Wei Fang <fangwei1@huawei.com>
Date:   Wed Jul 6 11:32:20 2016 +0800

    fs/dcache.c: avoid soft-lockup in dput()
    
    commit 47be61845c775643f1aa4d2a54343549f943c94c upstream.
    
    We triggered soft-lockup under stress test which
    open/access/write/close one file concurrently on more than
    five different CPUs:
    
    WARN: soft lockup - CPU#0 stuck for 11s! [who:30631]
    ...
    [<ffffffc0003986f8>] dput+0x100/0x298
    [<ffffffc00038c2dc>] terminate_walk+0x4c/0x60
    [<ffffffc00038f56c>] path_lookupat+0x5cc/0x7a8
    [<ffffffc00038f780>] filename_lookup+0x38/0xf0
    [<ffffffc000391180>] user_path_at_empty+0x78/0xd0
    [<ffffffc0003911f4>] user_path_at+0x1c/0x28
    [<ffffffc00037d4fc>] SyS_faccessat+0xb4/0x230
    
    ->d_lock trylock may failed many times because of concurrently
    operations, and dput() may execute a long time.
    
    Fix this by replacing cpu_relax() with cond_resched().
    dput() used to be sleepable, so make it sleepable again
    should be safe.
    
    Signed-off-by: Wei Fang <fangwei1@huawei.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d80b5e1a002c9108fc3b298da7a1583f444fbe5
Author: Michal Hocko <mhocko@suse.com>
Date:   Thu Jul 28 15:48:44 2016 -0700

    Revert "mm, mempool: only set __GFP_NOMEMALLOC if there are free elements"
    
    commit 4e390b2b2f34b8daaabf2df1df0cf8f798b87ddb upstream.
    
    This reverts commit f9054c70d28b ("mm, mempool: only set __GFP_NOMEMALLOC
    if there are free elements").
    
    There has been a report about OOM killer invoked when swapping out to a
    dm-crypt device.  The primary reason seems to be that the swapout out IO
    managed to completely deplete memory reserves.  Ondrej was able to
    bisect and explained the issue by pointing to f9054c70d28b ("mm,
    mempool: only set __GFP_NOMEMALLOC if there are free elements").
    
    The reason is that the swapout path is not throttled properly because
    the md-raid layer needs to allocate from the generic_make_request path
    which means it allocates from the PF_MEMALLOC context.  dm layer uses
    mempool_alloc in order to guarantee a forward progress which used to
    inhibit access to memory reserves when using page allocator.  This has
    changed by f9054c70d28b ("mm, mempool: only set __GFP_NOMEMALLOC if
    there are free elements") which has dropped the __GFP_NOMEMALLOC
    protection when the memory pool is depleted.
    
    If we are running out of memory and the only way forward to free memory
    is to perform swapout we just keep consuming memory reserves rather than
    throttling the mempool allocations and allowing the pending IO to
    complete up to a moment when the memory is depleted completely and there
    is no way forward but invoking the OOM killer.  This is less than
    optimal.
    
    The original intention of f9054c70d28b was to help with the OOM
    situations where the oom victim depends on mempool allocation to make a
    forward progress.  David has mentioned the following backtrace:
    
      schedule
      schedule_timeout
      io_schedule_timeout
      mempool_alloc
      __split_and_process_bio
      dm_request
      generic_make_request
      submit_bio
      mpage_readpages
      ext4_readpages
      __do_page_cache_readahead
      ra_submit
      filemap_fault
      handle_mm_fault
      __do_page_fault
      do_page_fault
      page_fault
    
    We do not know more about why the mempool is depleted without being
    replenished in time, though.  In any case the dm layer shouldn't depend
    on any allocations outside of the dedicated pools so a forward progress
    should be guaranteed.  If this is not the case then the dm should be
    fixed rather than papering over the problem and postponing it to later
    by accessing more memory reserves.
    
    mempools are a mechanism to maintain dedicated memory reserves to
    guaratee forward progress.  Allowing them an unbounded access to the
    page allocator memory reserves is going against the whole purpose of
    this mechanism.
    
    Bisected by Ondrej Kozina.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Link: http://lkml.kernel.org/r/20160721145309.GR26379@dhcp22.suse.cz
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Ondrej Kozina <okozina@redhat.com>
    Reviewed-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: NeilBrown <neilb@suse.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Ondrej Kozina <okozina@redhat.com>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Cc: Mel Gorman <mgorman@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dac176f0234f69976922aef4b4878aa12854e1c3
Author: Wei Fang <fangwei1@huawei.com>
Date:   Mon Jul 25 21:17:04 2016 +0800

    fuse: fix wrong assignment of ->flags in fuse_send_init()
    
    commit 9446385f05c9af25fed53dbed3cc75763730be52 upstream.
    
    FUSE_HAS_IOCTL_DIR should be assigned to ->flags, it may be a typo.
    
    Signed-off-by: Wei Fang <fangwei1@huawei.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 69fe05c90ed5 ("fuse: add missing INIT flags")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d34c0dab9427f7753359854a6c2cce95ae1fb88d
Author: Maxim Patlasov <mpatlasov@virtuozzo.com>
Date:   Tue Jul 19 18:12:26 2016 -0700

    fuse: fuse_flush must check mapping->flags for errors
    
    commit 9ebce595f63a407c5cec98f98f9da8459b73740a upstream.
    
    fuse_flush() calls write_inode_now() that triggers writeback, but actual
    writeback will happen later, on fuse_sync_writes(). If an error happens,
    fuse_writepage_end() will set error bit in mapping->flags. So, we have to
    check mapping->flags after fuse_sync_writes().
    
    Signed-off-by: Maxim Patlasov <mpatlasov@virtuozzo.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 4d99ff8f12eb ("fuse: Turn writeback cache on")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bfc37232d0660891791409732b65b0044fe10f8
Author: Alexey Kuznetsov <kuznet@parallels.com>
Date:   Tue Jul 19 12:48:01 2016 -0700

    fuse: fsync() did not return IO errors
    
    commit ac7f052b9e1534c8248f814b6f0068ad8d4a06d2 upstream.
    
    Due to implementation of fuse writeback filemap_write_and_wait_range() does
    not catch errors. We have to do this directly after fuse_sync_writes()
    
    Signed-off-by: Alexey Kuznetsov <kuznet@virtuozzo.com>
    Signed-off-by: Maxim Patlasov <mpatlasov@virtuozzo.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 4d99ff8f12eb ("fuse: Turn writeback cache on")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75b523695f0fba607a4c100ecde2ff96c086b3fb
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jul 28 23:15:21 2016 +0200

    x86/power/64: Fix hibernation return address corruption
    
    commit 4ce827b4cc58bec7952591b96cce2b28553e4d5b upstream.
    
    In kernel bug 150021, a kernel panic was reported when restoring a
    hibernate image.  Only a picture of the oops was reported, so I can't
    paste the whole thing here.  But here are the most interesting parts:
    
      kernel tried to execute NX-protected page - exploit attempt? (uid: 0)
      BUG: unable to handle kernel paging request at ffff8804615cfd78
      ...
      RIP: ffff8804615cfd78
      RSP: ffff8804615f0000
      RBP: ffff8804615cfdc0
      ...
      Call Trace:
       do_signal+0x23
       exit_to_usermode_loop+0x64
       ...
    
    The RIP is on the same page as RBP, so it apparently started executing
    on the stack.
    
    The bug was bisected to commit ef0f3ed5a4ac (x86/asm/power: Create
    stack frames in hibernate_asm_64.S), which in retrospect seems quite
    dangerous, since that code saves and restores the stack pointer from a
    global variable ('saved_context').
    
    There are a lot of moving parts in the hibernate save and restore paths,
    so I don't know exactly what caused the panic.  Presumably, a FRAME_END
    was executed without the corresponding FRAME_BEGIN, or vice versa.  That
    would corrupt the return address on the stack and would be consistent
    with the details of the above panic.
    
    [ rjw: One major problem is that by the time the FRAME_BEGIN in
      restore_registers() is executed, the stack pointer value may not
      be valid any more.  Namely, the stack area pointed to by it
      previously may have been overwritten by some image memory contents
      and that page frame may now be used for whatever different purpose
      it had been allocated for before hibernation.  In that case, the
      FRAME_BEGIN will corrupt that memory. ]
    
    Instead of doing the frame pointer save/restore around the bounds of the
    affected functions, just do it around the call to swsusp_save().
    
    That has the same effect of ensuring that if swsusp_save() sleeps, the
    frame pointers will be correct.  It's also a much more obviously safe
    way to do it than the original patch.  And objtool still doesn't report
    any warnings.
    
    Fixes: ef0f3ed5a4ac (x86/asm/power: Create stack frames in hibernate_asm_64.S)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=150021
    Reported-by: Andre Reinke <andre.reinke@mailbox.org>
    Tested-by: Andre Reinke <andre.reinke@mailbox.org>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d5015109963e42f6b983b1fc131df6b85aa8ee1
Author: Borislav Petkov <bp@suse.de>
Date:   Mon Jun 6 17:10:43 2016 +0200

    x86/microcode: Fix suspend to RAM with builtin microcode
    
    commit 4b703305d98bf7350d4b2953ee39a3aa2eeb1778 upstream.
    
    Usually, after we have found the proper microcode blob for the current
    machine, we stash it away for later use with save_microcode_in_initrd().
    
    However, with builtin microcode which doesn't come from the initrd, we
    don't call that function because CONFIG_BLK_DEV_INITRD=n and even if
    set, we don't have a valid initrd.
    
    In order to fix this, let's make save_microcode_in_initrd() an
    fs_initcall which runs before rootfs_initcall() as this was the time it
    was called previously through:
    
     rootfs_initcall(populate_rootfs)
     |-> free_initrd()
         |-> free_initrd_mem()
             |-> save_microcode_in_initrd()
    
    Also, we make it run independently from initrd functionality being
    present or not.
    
    And since it is called in the microcode loader only now, we can also
    make it static.
    
    Reported-and-tested-by: Jim Bos <jim876@xs4all.nl>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1465225850-7352-3-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ac814ee96ec609cbf8de2234c562d459931120f
Author: Vladimir Davydov <vdavydov.dev@gmail.com>
Date:   Tue Aug 2 14:03:01 2016 -0700

    radix-tree: account nodes to memcg only if explicitly requested
    
    commit 05eb6e7263185a6bb0de9501ccf2addc52429414 upstream.
    
    Radix trees may be used not only for storing page cache pages, so
    unconditionally accounting radix tree nodes to the current memory cgroup
    is bad: if a radix tree node is used for storing data shared among
    different cgroups we risk pinning dead memory cgroups forever.
    
    So let's only account radix tree nodes if it was explicitly requested by
    passing __GFP_ACCOUNT to INIT_RADIX_TREE.  Currently, we only want to
    account page cache entries, so mark mapping->page_tree so.
    
    Fixes: 58e698af4c63 ("radix-tree: account radix_tree_node to memory cgroup")
    Link: http://lkml.kernel.org/r/1470057188-7864-1-git-send-email-vdavydov@virtuozzo.com
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efd09342a281356a159ac22392ba180d82e16800
Author: Fabian Frederick <fabf@skynet.be>
Date:   Tue Aug 2 14:03:07 2016 -0700

    sysv, ipc: fix security-layer leaking
    
    commit 9b24fef9f0410fb5364245d6cc2bd044cc064007 upstream.
    
    Commit 53dad6d3a8e5 ("ipc: fix race with LSMs") updated ipc_rcu_putref()
    to receive rcu freeing function but used generic ipc_rcu_free() instead
    of msg_rcu_free() which does security cleaning.
    
    Running LTP msgsnd06 with kmemleak gives the following:
    
      cat /sys/kernel/debug/kmemleak
    
      unreferenced object 0xffff88003c0a11f8 (size 8):
        comm "msgsnd06", pid 1645, jiffies 4294672526 (age 6.549s)
        hex dump (first 8 bytes):
          1b 00 00 00 01 00 00 00                          ........
        backtrace:
          kmemleak_alloc+0x23/0x40
          kmem_cache_alloc_trace+0xe1/0x180
          selinux_msg_queue_alloc_security+0x3f/0xd0
          security_msg_queue_alloc+0x2e/0x40
          newque+0x4e/0x150
          ipcget+0x159/0x1b0
          SyS_msgget+0x39/0x40
          entry_SYSCALL_64_fastpath+0x13/0x8f
    
    Manfred Spraul suggested to fix sem.c as well and Davidlohr Bueso to
    only use ipc_rcu_free in case of security allocation failure in newary()
    
    Fixes: 53dad6d3a8e ("ipc: fix race with LSMs")
    Link: http://lkml.kernel.org/r/1470083552-22966-1-git-send-email-fabf@skynet.be
    Signed-off-by: Fabian Frederick <fabf@skynet.be>
    Cc: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 199e5c223f1c0bf4b1c79b37a1a664a5d657ad5c
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Fri Jul 29 10:40:31 2016 +0200

    block: fix use-after-free in seq file
    
    commit 77da160530dd1dc94f6ae15a981f24e5f0021e84 upstream.
    
    I got a KASAN report of use-after-free:
    
        ==================================================================
        BUG: KASAN: use-after-free in klist_iter_exit+0x61/0x70 at addr ffff8800b6581508
        Read of size 8 by task trinity-c1/315
        =============================================================================
        BUG kmalloc-32 (Not tainted): kasan: bad access detected
        -----------------------------------------------------------------------------
    
        Disabling lock debugging due to kernel taint
        INFO: Allocated in disk_seqf_start+0x66/0x110 age=144 cpu=1 pid=315
                ___slab_alloc+0x4f1/0x520
                __slab_alloc.isra.58+0x56/0x80
                kmem_cache_alloc_trace+0x260/0x2a0
                disk_seqf_start+0x66/0x110
                traverse+0x176/0x860
                seq_read+0x7e3/0x11a0
                proc_reg_read+0xbc/0x180
                do_loop_readv_writev+0x134/0x210
                do_readv_writev+0x565/0x660
                vfs_readv+0x67/0xa0
                do_preadv+0x126/0x170
                SyS_preadv+0xc/0x10
                do_syscall_64+0x1a1/0x460
                return_from_SYSCALL_64+0x0/0x6a
        INFO: Freed in disk_seqf_stop+0x42/0x50 age=160 cpu=1 pid=315
                __slab_free+0x17a/0x2c0
                kfree+0x20a/0x220
                disk_seqf_stop+0x42/0x50
                traverse+0x3b5/0x860
                seq_read+0x7e3/0x11a0
                proc_reg_read+0xbc/0x180
                do_loop_readv_writev+0x134/0x210
                do_readv_writev+0x565/0x660
                vfs_readv+0x67/0xa0
                do_preadv+0x126/0x170
                SyS_preadv+0xc/0x10
                do_syscall_64+0x1a1/0x460
                return_from_SYSCALL_64+0x0/0x6a
    
        CPU: 1 PID: 315 Comm: trinity-c1 Tainted: G    B           4.7.0+ #62
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
         ffffea0002d96000 ffff880119b9f918 ffffffff81d6ce81 ffff88011a804480
         ffff8800b6581500 ffff880119b9f948 ffffffff8146c7bd ffff88011a804480
         ffffea0002d96000 ffff8800b6581500 fffffffffffffff4 ffff880119b9f970
        Call Trace:
         [<ffffffff81d6ce81>] dump_stack+0x65/0x84
         [<ffffffff8146c7bd>] print_trailer+0x10d/0x1a0
         [<ffffffff814704ff>] object_err+0x2f/0x40
         [<ffffffff814754d1>] kasan_report_error+0x221/0x520
         [<ffffffff8147590e>] __asan_report_load8_noabort+0x3e/0x40
         [<ffffffff83888161>] klist_iter_exit+0x61/0x70
         [<ffffffff82404389>] class_dev_iter_exit+0x9/0x10
         [<ffffffff81d2e8ea>] disk_seqf_stop+0x3a/0x50
         [<ffffffff8151f812>] seq_read+0x4b2/0x11a0
         [<ffffffff815f8fdc>] proc_reg_read+0xbc/0x180
         [<ffffffff814b24e4>] do_loop_readv_writev+0x134/0x210
         [<ffffffff814b4c45>] do_readv_writev+0x565/0x660
         [<ffffffff814b8a17>] vfs_readv+0x67/0xa0
         [<ffffffff814b8de6>] do_preadv+0x126/0x170
         [<ffffffff814b92ec>] SyS_preadv+0xc/0x10
    
    This problem can occur in the following situation:
    
    open()
     - pread()
        - .seq_start()
           - iter = kmalloc() // succeeds
           - seqf->private = iter
        - .seq_stop()
           - kfree(seqf->private)
     - pread()
        - .seq_start()
           - iter = kmalloc() // fails
        - .seq_stop()
           - class_dev_iter_exit(seqf->private) // boom! old pointer
    
    As the comment in disk_seqf_stop() says, stop is called even if start
    failed, so we need to reinitialise the private pointer to NULL when seq
    iteration stops.
    
    An alternative would be to set the private pointer to NULL when the
    kmalloc() in disk_seqf_start() fails.
    
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe128ba31e1ba507114668ddff15850e569415ce
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jul 27 11:42:38 2016 +0100

    x86/syscalls/64: Add compat_sys_keyctl for 32-bit userspace
    
    commit f7d665627e103e82d34306c7d3f6f46f387c0d8b upstream.
    
    x86_64 needs to use compat_sys_keyctl for 32-bit userspace rather than
    calling sys_keyctl(). The latter will work in a lot of cases, thereby
    hiding the issue.
    
    Reported-by: Stephan Mueller <smueller@chronox.de>
    Tested-by: Stephan Mueller <smueller@chronox.de>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: keyrings@vger.kernel.org
    Cc: linux-security-module@vger.kernel.org
    Link: http://lkml.kernel.org/r/146961615805.14395.5581949237156769439.stgit@warthog.procyon.org.uk
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65eee9e03dd0623a86b7ce1845f5d281d00e48d1
Author: Vladimir Davydov <vdavydov.dev@gmail.com>
Date:   Thu Aug 11 15:33:03 2016 -0700

    mm: memcontrol: fix memcg id ref counter on swap charge move
    
    commit 615d66c37c755c49ce022c9e5ac0875d27d2603d upstream.
    
    Since commit 73f576c04b94 ("mm: memcontrol: fix cgroup creation failure
    after many small jobs") swap entries do not pin memcg->css.refcnt
    directly.  Instead, they pin memcg->id.ref.  So we should adjust the
    reference counters accordingly when moving swap charges between cgroups.
    
    Fixes: 73f576c04b941 ("mm: memcontrol: fix cgroup creation failure after many small jobs")
    Link: http://lkml.kernel.org/r/9ce297c64954a42dc90b543bc76106c4a94f07e8.1470219853.git.vdavydov@virtuozzo.com
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d87f55bd871eafe1f954c43f4a4b2da16da7add
Author: Vladimir Davydov <vdavydov.dev@gmail.com>
Date:   Thu Aug 11 15:33:00 2016 -0700

    mm: memcontrol: fix swap counter leak on swapout from offline cgroup
    
    commit 1f47b61fb4077936465dcde872a4e5cc4fe708da upstream.
    
    An offline memory cgroup might have anonymous memory or shmem left
    charged to it and no swap.  Since only swap entries pin the id of an
    offline cgroup, such a cgroup will have no id and so an attempt to
    swapout its anon/shmem will not store memory cgroup info in the swap
    cgroup map.  As a result, memcg->swap or memcg->memsw will never get
    uncharged from it and any of its ascendants.
    
    Fix this by always charging swapout to the first ancestor cgroup that
    hasn't released its id yet.
    
    [hannes@cmpxchg.org: add comment to mem_cgroup_swapout]
    [vdavydov@virtuozzo.com: use WARN_ON_ONCE() in mem_cgroup_id_get_online()]
      Link: http://lkml.kernel.org/r/20160803123445.GJ13263@esperanza
    Fixes: 73f576c04b941 ("mm: memcontrol: fix cgroup creation failure after many small jobs")
    Link: http://lkml.kernel.org/r/5336daa5c9a32e776067773d9da655d2dc126491.1470219853.git.vdavydov@virtuozzo.com
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d71e050d60b37ab190d3638dddbd2fd133645ebd
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Wed Jun 22 21:55:01 2016 +0530

    powerpc/bpf/jit: Disable classic BPF JIT on ppc64le
    
    commit 844e3be47693f92a108cb1fb3b0606bf25e9c7a6 upstream.
    
    Classic BPF JIT was never ported completely to work on little endian
    powerpc. However, it can be enabled and will crash the system when used.
    As such, disable use of BPF JIT on ppc64le.
    
    Fixes: 7c105b63bd98 ("powerpc: Add CONFIG_CPU_LITTLE_ENDIAN kernel config option.")
    Reported-by: Thadeu Lima de Souza Cascardo <cascardo@redhat.com>
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Thadeu Lima de Souza Cascardo <cascardo@redhat.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77bf04650069868e5ddaf2a0511c232395989191
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Fri Jun 17 13:05:11 2016 +1000

    powerpc/eeh: Fix invalid cached PE primary bus
    
    commit a3aa256b7258b3d19f8b44557cc64525a993b941 upstream.
    
    The PE primary bus cannot be got from its child devices when having
    full hotplug in error recovery. The PE primary bus is cached, which
    is done in commit <05ba75f84864> ("powerpc/eeh: Fix stale cached primary
    bus"). In eeh_reset_device(), the flag (EEH_PE_PRI_BUS) is cleared
    before the PCI hot remove. eeh_pe_bus_get() then returns NULL as the
    PE primary bus in pnv_eeh_reset() and it crashes the kernel eventually.
    
    This fixes the issue by clearing the flag (EEH_PE_PRI_BUS) before the
    PCI hot add. With it, the PowerNV EEH reset backend (pnv_eeh_reset())
    can get valid PE primary bus through eeh_pe_bus_get().
    
    Fixes: 67086e32b564 ("powerpc/eeh: powerpc/eeh: Support error recovery for VF PE")
    Reported-by: Pridhiviraj Paidipeddi <ppaiddipe@in.ibm.com>
    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e80f40d42ea6e567346b9ae28d7f07a8b9dee0c
Author: Alden Tondettar <alden.tondettar@gmail.com>
Date:   Mon Apr 25 19:27:56 2016 -0700

    udf: Prevent stack overflow on corrupted filesystem mount
    
    commit a47241cdeee2689ee7089ec95cadfcf66588fbdb upstream.
    
    Presently, a corrupted or malicious UDF filesystem containing a very large
    number (or cycle) of Logical Volume Integrity Descriptor extent
    indirections may trigger a stack overflow and kernel panic in
    udf_load_logicalvolint() on mount.
    
    Replace the unnecessary recursion in udf_load_logicalvolint() with
    simple iteration. Set an arbitrary limit of 1000 indirections (which would
    have almost certainly overflowed the stack without this fix), and treat
    such cases as if there were no LVID.
    
    Signed-off-by: Alden Tondettar <alden.tondettar@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1537fac950d225042fb88e23e62320f63ee5e9d0
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Mon Apr 11 13:36:00 2016 -0600

    x86/mm/pat: Fix BUG_ON() in mmap_mem() on QEMU/i386
    
    commit 1886297ce0c8d563a08c8a8c4c0b97743e06cd37 upstream.
    
    The following BUG_ON() crash was reported on QEMU/i386:
    
      kernel BUG at arch/x86/mm/physaddr.c:79!
      Call Trace:
      phys_mem_access_prot_allowed
      mmap_mem
      ? mmap_region
      mmap_region
      do_mmap
      vm_mmap_pgoff
      SyS_mmap_pgoff
      do_int80_syscall_32
      entry_INT80_32
    
    after commit:
    
      edfe63ec97ed ("x86/mtrr: Fix Xorg crashes in Qemu sessions")
    
    PAT is now set to disabled state when MTRRs are disabled.
    Thus, reactivating the __pa(high_memory) check in
    phys_mem_access_prot_allowed().
    
    When CONFIG_DEBUG_VIRTUAL is set, __pa() calls __phys_addr(),
    which in turn calls slow_virt_to_phys() for 'high_memory'.
    Because 'high_memory' is set to (the max direct mapped virt
    addr + 1), it is not a valid virtual address.  Hence,
    slow_virt_to_phys() returns 0 and hit the BUG_ON.  Using
    __pa_nodebug() instead of __pa() will fix this BUG_ON.
    
    However, this code block, originally written for Pentiums and
    earlier, is no longer adequate since a 32-bit Xen guest has
    MTRRs disabled and supports ZONE_HIGHMEM.  In this setup,
    this code sets UC attribute for accessing RAM in high memory
    range.
    
    Delete this code block as it has been unused for a long time.
    
    Reported-by: kernel test robot <ying.huang@linux.intel.com>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1460403360-25441-1-git-send-email-toshi.kani@hpe.com
    Link: https://lkml.org/lkml/2016/4/1/608
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d855dbb77a8809726917a2f858fb35ef82cfaa94
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:42:03 2016 -0600

    x86/pat: Document the PAT initialization sequence
    
    commit b6350c21cfe8aa9d65e189509a23c0ea4b8362c2 upstream.
    
    Update PAT documentation to describe how PAT is initialized under
    various configurations.
    
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: elliott@hpe.com
    Cc: konrad.wilk@oracle.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-8-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ef71f4451a4b03e1102628a778438e82dfe21bb
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:42:02 2016 -0600

    x86/xen, pat: Remove PAT table init code from Xen
    
    commit 88ba281108ed0c25c9d292b48bd3f272fcb90dd0 upstream.
    
    Xen supports PAT without MTRRs for its guests.  In order to
    enable WC attribute, it was necessary for xen_start_kernel()
    to call pat_init_cache_modes() to update PAT table before
    starting guest kernel.
    
    Now that the kernel initializes PAT table to the BIOS handoff
    state when MTRR is disabled, this Xen-specific PAT init code
    is no longer necessary.  Delete it from xen_start_kernel().
    
    Also change __init_cache_modes() to a static function since
    PAT table should not be tweaked by other modules.
    
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Juergen Gross <jgross@suse.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: elliott@hpe.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-7-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d362fc5244b99c704fce3115ab70d197c6ce95a6
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:42:01 2016 -0600

    x86/mtrr: Fix PAT init handling when MTRR is disabled
    
    commit ad025a73f0e9344ac73ffe1b74c184033e08e7d5 upstream.
    
    get_mtrr_state() calls pat_init() on BSP even if MTRR is disabled.
    This results in calling pat_init() on BSP only since APs do not call
    pat_init() when MTRR is disabled.  This inconsistency between BSP
    and APs leads to undefined behavior.
    
    Make BSP's calling condition to pat_init() consistent with AP's,
    mtrr_ap_init() and mtrr_aps_init().
    
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: elliott@hpe.com
    Cc: konrad.wilk@oracle.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-6-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8095bbc27932868534ad6f3787879db0b9f2e29c
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:42:00 2016 -0600

    x86/mtrr: Fix Xorg crashes in Qemu sessions
    
    commit edfe63ec97ed8d4496225f7ba54c9ce4207c5431 upstream.
    
    A Xorg failure on qemu32 was reported as a regression [1] caused by
    commit 9cd25aac1f44 ("x86/mm/pat: Emulate PAT when it is disabled").
    
    This patch fixes the Xorg crash.
    
    Negative effects of this regression were the following two failures [2]
    in Xorg on QEMU with QEMU CPU model "qemu32" (-cpu qemu32), which were
    triggered by the fact that its virtual CPU does not support MTRRs.
    
     #1. copy_process() failed in the check in reserve_pfn_range()
    
        copy_process
         copy_mm
          dup_mm
           dup_mmap
            copy_page_range
             track_pfn_copy
              reserve_pfn_range
    
     A WC map request was tracked as WC in memtype, which set a PTE as
     UC (pgprot) per __cachemode2pte_tbl[].  This led to this error in
     reserve_pfn_range() called from track_pfn_copy(), which obtained
     a pgprot from a PTE.  It converts pgprot to page_cache_mode, which
     does not necessarily result in the original page_cache_mode since
     __cachemode2pte_tbl[] redirects multiple types to UC.
    
     #2. error path in copy_process() then hit WARN_ON_ONCE in
         untrack_pfn().
    
         x86/PAT: Xorg:509 map pfn expected mapping type uncached-
         minus for [mem 0xfd000000-0xfdffffff], got write-combining
          Call Trace:
         dump_stack
         warn_slowpath_common
         ? untrack_pfn
         ? untrack_pfn
         warn_slowpath_null
         untrack_pfn
         ? __kunmap_atomic
         unmap_single_vma
         ? pagevec_move_tail_fn
         unmap_vmas
         exit_mmap
         mmput
         copy_process.part.47
         _do_fork
         SyS_clone
         do_syscall_32_irqs_on
         entry_INT80_32
    
    These negative effects are caused by two separate bugs, but they
    can be addressed in separate patches.  Fixing the pat_init() issue
    described below addresses the root cause, and avoids Xorg to hit
    these cases.
    
    When the CPU does not support MTRRs, MTRR does not call pat_init(),
    which leaves PAT enabled without initializing PAT.  This pat_init()
    issue is a long-standing issue, but manifested as issue #1 (and then
    hit issue #2) with the above-mentioned commit because the memtype
    now tracks cache attribute with 'page_cache_mode'.
    
    This pat_init() issue existed before the commit, but we used pgprot
    in memtype.  Hence, we did not have issue #1 before.  But WC request
    resulted in WT in effect because WC pgrot is actually WT when PAT
    is not initialized.  This is not how it was designed to work.  When
    PAT is set to disable properly, WC is converted to UC.  The use of
    WT can result in a system crash if the target range does not support
    WT.  Fortunately, nobody ran into such issue before.
    
    To fix this pat_init() issue, PAT code has been enhanced to provide
    pat_disable() interface.  Call this interface when MTRRs are disabled.
    By setting PAT to disable properly, PAT bypasses the memtype check,
    and avoids issue #1.
    
      [1]: https://lkml.org/lkml/2016/3/3/828
      [2]: https://lkml.org/lkml/2016/3/4/775
    
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: elliott@hpe.com
    Cc: konrad.wilk@oracle.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-5-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22173e3b2681c27fa9d6f5437296400300384f11
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:41:59 2016 -0600

    x86/mm/pat: Replace cpu_has_pat with boot_cpu_has()
    
    commit d63dcf49cf5ae5605f4d14229e3888e104f294b1 upstream.
    
    Borislav Petkov suggested:
    
     > Please use on init paths boot_cpu_has(X86_FEATURE_PAT) and on fast
     > paths static_cpu_has(X86_FEATURE_PAT). No more of that cpu_has_XXX
     > ugliness.
    
    Replace the use of cpu_has_pat on init paths with boot_cpu_has().
    
    Suggested-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Robert Elliott <elliott@hpe.com>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: konrad.wilk@oracle.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-4-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69bf9ad98c881a1ce8e30e0ecd59ed91e0bc1af1
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:41:58 2016 -0600

    x86/mm/pat: Add pat_disable() interface
    
    commit 224bb1e5d67ba0f2872c98002d6a6f991ac6fd4a upstream.
    
    In preparation for fixing a regression caused by:
    
      9cd25aac1f44 ("x86/mm/pat: Emulate PAT when it is disabled")
    
    ... PAT needs to provide an interface that prevents the OS from
    initializing the PAT MSR.
    
    PAT MSR initialization must be done on all CPUs using the specific
    sequence of operations defined in the Intel SDM.  This requires MTRRs
    to be enabled since pat_init() is called as part of MTRR init
    from mtrr_rendezvous_handler().
    
    Make pat_disable() as the interface that prevents the OS from
    initializing the PAT MSR.  MTRR will call this interface when it
    cannot provide the SDM-defined sequence to initialize PAT.
    
    This also assures that pat_disable() called from pat_bsp_init()
    will set the PAT table properly when CPU does not support PAT.
    
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Robert Elliott <elliott@hpe.com>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: konrad.wilk@oracle.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-3-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d809898a57860bd1bbfdc98feafc4b73ef18863f
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Mar 23 15:41:57 2016 -0600

    x86/mm/pat: Add support of non-default PAT MSR setting
    
    commit 02f037d641dc6672be5cfe7875a48ab99b95b154 upstream.
    
    In preparation for fixing a regression caused by:
    
      9cd25aac1f44 ("x86/mm/pat: Emulate PAT when it is disabled")'
    
    ... PAT needs to support a case that PAT MSR is initialized with a
    non-default value.
    
    When pat_init() is called and PAT is disabled, it initializes the
    PAT table with the BIOS default value. Xen, however, sets PAT MSR
    with a non-default value to enable WC. This causes inconsistency
    between the PAT table and PAT MSR when PAT is set to disable on Xen.
    
    Change pat_init() to handle the PAT disable cases properly.  Add
    init_cache_modes() to handle two cases when PAT is set to disable.
    
     1. CPU supports PAT: Set PAT table to be consistent with PAT MSR.
     2. CPU does not support PAT: Set PAT table to be consistent with
        PWT and PCD bits in a PTE.
    
    Note, __init_cache_modes(), renamed from pat_init_cache_modes(),
    will be changed to a static function in a later patch.
    
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: elliott@hpe.com
    Cc: konrad.wilk@oracle.com
    Cc: paul.gortmaker@windriver.com
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/1458769323-24491-2-git-send-email-toshi.kani@hpe.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a66d3a833978b6b5363fda8f6bb46279c4ad3fc
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Jul 3 17:01:26 2016 -0400

    random: strengthen input validation for RNDADDTOENTCNT
    
    commit 86a574de4590ffe6fd3f3ca34cdcf655a78e36ec upstream.
    
    Don't allow RNDADDTOENTCNT or RNDADDENTROPY to accept a negative
    entropy value.  It doesn't make any sense to subtract from the entropy
    counter, and it can trigger a warning:
    
    random: negative entropy/overflow: pool input count -40000
    ------------[ cut here ]------------
    WARNING: CPU: 3 PID: 6828 at drivers/char/random.c:670[<      none
     >] credit_entropy_bits+0x21e/0xad0 drivers/char/random.c:670
    Modules linked in:
    CPU: 3 PID: 6828 Comm: a.out Not tainted 4.7.0-rc4+ #4
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
     ffffffff880b58e0 ffff88005dd9fcb0 ffffffff82cc838f ffffffff87158b40
     fffffbfff1016b1c 0000000000000000 0000000000000000 ffffffff87158b40
     ffffffff83283dae 0000000000000009 ffff88005dd9fcf8 ffffffff8136d27f
    Call Trace:
     [<     inline     >] __dump_stack lib/dump_stack.c:15
     [<ffffffff82cc838f>] dump_stack+0x12e/0x18f lib/dump_stack.c:51
     [<ffffffff8136d27f>] __warn+0x19f/0x1e0 kernel/panic.c:516
     [<ffffffff8136d48c>] warn_slowpath_null+0x2c/0x40 kernel/panic.c:551
     [<ffffffff83283dae>] credit_entropy_bits+0x21e/0xad0 drivers/char/random.c:670
     [<     inline     >] credit_entropy_bits_safe drivers/char/random.c:734
     [<ffffffff8328785d>] random_ioctl+0x21d/0x250 drivers/char/random.c:1546
     [<     inline     >] vfs_ioctl fs/ioctl.c:43
     [<ffffffff8185316c>] do_vfs_ioctl+0x18c/0xff0 fs/ioctl.c:674
     [<     inline     >] SYSC_ioctl fs/ioctl.c:689
     [<ffffffff8185405f>] SyS_ioctl+0x8f/0xc0 fs/ioctl.c:680
     [<ffffffff86a995c0>] entry_SYSCALL_64_fastpath+0x23/0xc1
    arch/x86/entry/entry_64.S:207
    ---[ end trace 5d4902b2ba842f1f ]---
    
    This was triggered using the test program:
    
    // autogenerated by syzkaller (http://github.com/google/syzkaller)
    
    int main() {
            int fd = open("/dev/random", O_RDWR);
            int val = -5000;
            ioctl(fd, RNDADDTOENTCNT, &val);
            return 0;
    }
    
    It's harmless in that (a) only root can trigger it, and (b) after
    complaining the code never does let the entropy count go negative, but
    it's better to simply not allow this userspace from passing in a
    negative entropy value altogether.
    
    Google-Bug-Id: #29575089
    Reported-By: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 141c47d95f6d09478fe53bcbb54c3155dc6de888
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Jun 15 10:21:34 2016 +0800

    regulator: qcom_smd: Remove list_voltage callback for rpm_smps_ldo_ops_fixed
    
    commit 43160ffd12c8d1d331362362eea3c70e04b6f9c4 upstream.
    
    Use regulator_list_voltage_linear_range in rpm_smps_ldo_ops_fixed is
    wrong because it is used for fixed regulator without any linear range.
    The rpm_smps_ldo_ops_fixed is used for pm8941_lnldo which has fixed_uV
    set and n_voltages = 1. In this case, regulator_list_voltage() can return
    rdev->desc->fixed_uV without .list_voltage implementation.
    
    Fixes: 3bfbb4d1a480 ("regulator: qcom_smd: add list_voltage callback")
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e495a5e3aac49954bdfea0013805a8c342bab85
Author: John Johansen <john.johansen@canonical.com>
Date:   Wed Nov 18 11:41:05 2015 -0800

    apparmor: fix ref count leak when profile sha1 hash is read
    
    commit 0b938a2e2cf0b0a2c8bac9769111545aff0fee97 upstream.
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb860ec1a5c4e4cb6a6697cd50b7a6d84516cfd0
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Fri Jun 17 19:17:49 2016 -0700

    IB/hfi1: Fix deadlock with txreq allocation slow path
    
    commit 2aee309d3e01447c55fdf89cef05a0e2be372655 upstream.
    
    A failure in the get_txreq() inline will result in a
    slow path retry using __get_txreq().
    
    __get_txreq() attempts to procure the qp s_lock, which
    is already held in all callers.
    
    Fix by deleting the s_lock maintenance in __get_txreq()
    and add sparse syntax hooks to future proof the code.
    
    Cc: Stable <stable@vger.kernel.org> # 4.6+
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ff49f18ef8203c03194f3cd39415a64195c3cb3
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Fri Jul 1 15:57:02 2016 -0700

    IB/hfi1: Correct issues with sc5 computation
    
    commit 896ce45da2c2f4abc508d443fdecde7de0b3fa7e upstream.
    
    There are several computatations of the sc in the
    ud receive routine.
    
    Besides the code duplication, all are wrong when the
    sc is greater than 15.   In that case the code incorrectly
    or's a 1 into the computed sc instead of 1 shifted left
    by 4.
    
    Fix precomputed sc5 by using an already implemented routine
    hdr2sc() and deleting flawed duplicated code.
    
    Cc: Stable <stable@vger.kernel.org> # 4.6+
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0416f25f81c757d01cec0622aac4c06247190e4a
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jul 27 11:43:37 2016 +0100

    KEYS: 64-bit MIPS needs to use compat_sys_keyctl for 32-bit userspace
    
    commit 20f06ed9f61a185c6dabd662c310bed6189470df upstream.
    
    MIPS64 needs to use compat_sys_keyctl for 32-bit userspace rather than
    calling sys_keyctl.  The latter will work in a lot of cases, thereby hiding
    the issue.
    
    Reported-by: Stephan Mueller <smueller@chronox.de>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-security-module@vger.kernel.org
    Cc: keyrings@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/13832/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6b25dc115a4642eb7cfc93477f9f3d57ebaf391
Author: Dave Weinstein <olorin@google.com>
Date:   Thu Jul 28 11:55:41 2016 -0700

    arm: oabi compat: add missing access checks
    
    commit 7de249964f5578e67b99699c5f0b405738d820a2 upstream.
    
    Add access checks to sys_oabi_epoll_wait() and sys_oabi_semtimedop().
    This fixes CVE-2016-3857, a local privilege escalation under
    CONFIG_OABI_COMPAT.
    
    Reported-by: Chiachih Wu <wuchiachih@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Dave Weinstein <olorin@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f28b1257b81a4a929792f31a6f1363c830ca4d
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Thu Jun 9 16:56:28 2016 +0300

    i2c: i801: Allow ACPI SystemIO OpRegion to conflict with PCI BAR
    
    commit a7ae81952cdab56a1277bd2f9ed7284c0f575120 upstream.
    
    Many Intel systems the BIOS declares a SystemIO OpRegion below the SMBus
    PCI device as can be seen in ACPI DSDT table from Lenovo Yoga 900:
    
      Device (SBUS)
      {
          OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
          Field (SMBI, ByteAcc, NoLock, Preserve)
          {
              HSTS,   8,
              Offset (0x02),
              HCON,   8,
              HCOM,   8,
              TXSA,   8,
              DAT0,   8,
              DAT1,   8,
              HBDR,   8,
              PECR,   8,
              RXSA,   8,
              SDAT,   16
          }
    
    There are also bunch of AML methods that that the BIOS can use to access
    these fields. Most of the systems in question AML methods accessing the
    SMBI OpRegion are never used.
    
    Now, because of this SMBI OpRegion many systems fail to load the SMBus
    driver with an error looking like one below:
    
      ACPI Warning: SystemIO range 0x0000000000003040-0x000000000000305F
           conflicts with OpRegion 0x0000000000003040-0x000000000000304F
           (\_SB.PCI0.SBUS.SMBI) (20160108/utaddress-255)
      ACPI: If an ACPI driver is available for this device, you should use
           it instead of the native driver
    
    The reason is that this SMBI OpRegion conflicts with the PCI BAR used by
    the SMBus driver.
    
    It turns out that we can install a custom SystemIO address space handler
    for the SMBus device to intercept all accesses through that OpRegion. This
    allows us to share the PCI BAR with the AML code if it for some reason is
    using it. We do not expect that this OpRegion handler will ever be called
    but if it is we print a warning and prevent all access from the SMBus
    driver itself.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=110041
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Reported-by: Pali Rohár <pali.rohar@gmail.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Tested-by: Pali Rohár <pali.rohar@gmail.com>
    Tested-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b8ba83a8d9e9f13f3e678acd3f689c2d02d57f5
Author: Soheil Hassas Yeganeh <soheil@google.com>
Date:   Fri Jul 29 09:34:02 2016 -0400

    tcp: consider recv buf for the initial window scale
    
    [ Upstream commit f626300a3e776ccc9671b0dd94698fb3aa315966 ]
    
    tcp_select_initial_window() intends to advertise a window
    scaling for the maximum possible window size. To do so,
    it considers the maximum of net.ipv4.tcp_rmem[2] and
    net.core.rmem_max as the only possible upper-bounds.
    However, users with CAP_NET_ADMIN can use SO_RCVBUFFORCE
    to set the socket's receive buffer size to values
    larger than net.ipv4.tcp_rmem[2] and net.core.rmem_max.
    Thus, SO_RCVBUFFORCE is effectively ignored by
    tcp_select_initial_window().
    
    To fix this, consider the maximum of net.ipv4.tcp_rmem[2],
    net.core.rmem_max and socket's initial buffer space.
    
    Fixes: b0573dea1fb3 ("[NET]: Introduce SO_{SND,RCV}BUFFORCE socket options")
    Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
    Suggested-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b52ddfbb978c791ef830924f9cfa30de715e97c
Author: Beniamino Galvani <bgalvani@redhat.com>
Date:   Tue Jul 26 12:24:53 2016 +0200

    macsec: ensure rx_sa is set when validation is disabled
    
    [ Upstream commit e3a3b626010a14fe067f163c2c43409d5afcd2a9 ]
    
    macsec_decrypt() is not called when validation is disabled and so
    macsec_skb_cb(skb)->rx_sa is not set; but it is used later in
    macsec_post_decrypt(), ensure that it's always initialized.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Beniamino Galvani <bgalvani@redhat.com>
    Acked-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6ec788ea5bc4195f792b5e4d5d84c15ac7b899d
Author: Manish Chopra <manish.chopra@qlogic.com>
Date:   Mon Jul 25 19:07:46 2016 +0300

    qed: Fix setting/clearing bit in completion bitmap
    
    [ Upstream commit 59d3f1ceb69b54569685d0c34dff16a1e0816b19 ]
    
    Slowpath completion handling is incorrectly changing
    SPQ_RING_SIZE bits instead of a single one.
    
    Fixes: 76a9a3642a0b ("qed: fix handling of concurrent ramrods")
    Signed-off-by: Manish Chopra <manish.chopra@qlogic.com>
    Signed-off-by: Yuval Mintz <Yuval.Mintz@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3090b1b2fc832cb09f60b14c269fa717b99ed2b5
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Sat Jul 23 07:43:50 2016 +0200

    net/irda: fix NULL pointer dereference on memory allocation failure
    
    [ Upstream commit d3e6952cfb7ba5f4bfa29d4803ba91f96ce1204d ]
    
    I ran into this:
    
        kasan: CONFIG_KASAN_INLINE enabled
        kasan: GPF could be caused by NULL-ptr deref or user memory access
        general protection fault: 0000 [#1] PREEMPT SMP KASAN
        CPU: 2 PID: 2012 Comm: trinity-c3 Not tainted 4.7.0-rc7+ #19
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
        task: ffff8800b745f2c0 ti: ffff880111740000 task.ti: ffff880111740000
        RIP: 0010:[<ffffffff82bbf066>]  [<ffffffff82bbf066>] irttp_connect_request+0x36/0x710
        RSP: 0018:ffff880111747bb8  EFLAGS: 00010286
        RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000069dd8358
        RDX: 0000000000000009 RSI: 0000000000000027 RDI: 0000000000000048
        RBP: ffff880111747c00 R08: 0000000000000000 R09: 0000000000000000
        R10: 0000000069dd8358 R11: 1ffffffff0759723 R12: 0000000000000000
        R13: ffff88011a7e4780 R14: 0000000000000027 R15: 0000000000000000
        FS:  00007fc738404700(0000) GS:ffff88011af00000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 00007fc737fdfb10 CR3: 0000000118087000 CR4: 00000000000006e0
        Stack:
         0000000000000200 ffff880111747bd8 ffffffff810ee611 ffff880119f1f220
         ffff880119f1f4f8 ffff880119f1f4f0 ffff88011a7e4780 ffff880119f1f232
         ffff880119f1f220 ffff880111747d58 ffffffff82bca542 0000000000000000
        Call Trace:
         [<ffffffff82bca542>] irda_connect+0x562/0x1190
         [<ffffffff825ae582>] SYSC_connect+0x202/0x2a0
         [<ffffffff825b4489>] SyS_connect+0x9/0x10
         [<ffffffff8100334c>] do_syscall_64+0x19c/0x410
         [<ffffffff83295ca5>] entry_SYSCALL64_slow_path+0x25/0x25
        Code: 41 89 ca 48 89 e5 41 57 41 56 41 55 41 54 41 89 d7 53 48 89 fb 48 83 c7 48 48 89 fa 41 89 f6 48 c1 ea 03 48 83 ec 20 4c 8b 65 10 <0f> b6 04 02 84 c0 74 08 84 c0 0f 8e 4c 04 00 00 80 7b 48 00 74
        RIP  [<ffffffff82bbf066>] irttp_connect_request+0x36/0x710
         RSP <ffff880111747bb8>
        ---[ end trace 4cda2588bc055b30 ]---
    
    The problem is that irda_open_tsap() can fail and leave self->tsap = NULL,
    and then irttp_connect_request() almost immediately dereferences it.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f59c73b9b368d20f12b6687cc5173cd9a6f6842b
Author: Mike Manning <mmanning@brocade.com>
Date:   Fri Jul 22 18:32:11 2016 +0100

    net: ipv6: Always leave anycast and multicast groups on link down
    
    [ Upstream commit ea06f7176413e2538d13bb85b65387d0917943d9 ]
    
    Default kernel behavior is to delete IPv6 addresses on link
    down, which entails deletion of the multicast and the
    subnet-router anycast addresses. These deletions do not
    happen with sysctl setting to keep global IPv6 addresses on
    link down, so every link down/up causes an increment of the
    anycast and multicast refcounts. These bogus refcounts may
    stop these addrs from being removed on subsequent calls to
    delete them. The solution is to leave the groups for the
    multicast and subnet anycast on link down for the callflow
    when global IPv6 addresses are kept.
    
    Fixes: f1705ec197e7 ("net: ipv6: Make address flushing on ifdown optional")
    Signed-off-by: Mike Manning <mmanning@brocade.com>
    Acked-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43b90d5fe8694d8cfb2e69a72a190d94e24b0d6f
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Fri Jul 22 14:56:20 2016 +0300

    bridge: Fix incorrect re-injection of LLDP packets
    
    [ Upstream commit baedbe55884c003819f5c8c063ec3d2569414296 ]
    
    Commit 8626c56c8279 ("bridge: fix potential use-after-free when hook
    returns QUEUE or STOLEN verdict") caused LLDP packets arriving through a
    bridge port to be re-injected to the Rx path with skb->dev set to the
    bridge device, but this breaks the lldpad daemon.
    
    The lldpad daemon opens a packet socket with protocol set to ETH_P_LLDP
    for any valid device on the system, which doesn't not include soft
    devices such as bridge and VLAN.
    
    Since packet sockets (ptype_base) are processed in the Rx path after the
    Rx handler, LLDP packets with skb->dev set to the bridge device never
    reach the lldpad daemon.
    
    Fix this by making the bridge's Rx handler re-inject LLDP packets with
    RX_HANDLER_PASS, which effectively restores the behaviour prior to the
    mentioned commit.
    
    This means netfilter will never receive LLDP packets coming through a
    bridge port, as I don't see a way in which we can have okfn() consume
    the packet without breaking existing behaviour. I've already carried out
    a similar fix for STP packets in commit 56fae404fb2c ("bridge: Fix
    incorrect re-injection of STP packets").
    
    Fixes: 8626c56c8279 ("bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 053554b934a6b228386c2ff925faaaa51712abed
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Jul 14 18:00:10 2016 +0200

    vlan: use a valid default mtu value for vlan over macsec
    
    [ Upstream commit 18d3df3eab23796d7f852f9c6bb60962b8372ced ]
    
    macsec can't cope with mtu frames which need vlan tag insertion, and
    vlan device set the default mtu equal to the underlying dev's one.
    By default vlan over macsec devices use invalid mtu, dropping
    all the large packets.
    This patch adds a netif helper to check if an upper vlan device
    needs mtu reduction. The helper is used during vlan devices
    initialization to set a valid default and during mtu updating to
    forbid invalid, too bit, mtu values.
    The helper currently only check if the lower dev is a macsec device,
    if we get more users, we need to update only the helper (possibly
    reserving an additional IFF bit).
    
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d50a80bb26099d166e710a4ba074216f06a0011d
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jul 15 15:42:52 2016 -0700

    net: bgmac: Fix infinite loop in bgmac_dma_tx_add()
    
    [ Upstream commit e86663c475d384ab5f46cb5637e9b7ad08c5c505 ]
    
    Nothing is decrementing the index "i" while we are cleaning up the
    fragments we could not successful transmit.
    
    Fixes: 9cde94506eacf ("bgmac: implement scatter/gather support")
    Reported-by: coverity (CID 1352048)
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f9aa4c1fc4462b79969fe05d2abf2f78c708ceb
Author: Beniamino Galvani <bgalvani@redhat.com>
Date:   Wed Jul 13 18:25:08 2016 +0200

    bonding: set carrier off for devices created through netlink
    
    [ Upstream commit 005db31d5f5f7c31cfdc43505d77eb3ca5cf8ec6 ]
    
    Commit e826eafa65c6 ("bonding: Call netif_carrier_off after
    register_netdevice") moved netif_carrier_off() from bond_init() to
    bond_create(), but the latter is called only for initial default
    devices and ones created through sysfs:
    
     $ modprobe bonding
     $ echo +bond1 > /sys/class/net/bonding_masters
     $ ip link add bond2 type bond
     $ grep "MII Status" /proc/net/bonding/*
     /proc/net/bonding/bond0:MII Status: down
     /proc/net/bonding/bond1:MII Status: down
     /proc/net/bonding/bond2:MII Status: up
    
    Ensure that carrier is initially off also for devices created through
    netlink.
    
    Signed-off-by: Beniamino Galvani <bgalvani@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdd635b438e23c309085a767d2517142356d6808
Author: Jason Baron <jbaron@akamai.com>
Date:   Thu Jul 14 11:38:40 2016 -0400

    tcp: enable per-socket rate limiting of all 'challenge acks'
    
    [ Upstream commit 083ae308280d13d187512b9babe3454342a7987e ]
    
    The per-socket rate limit for 'challenge acks' was introduced in the
    context of limiting ack loops:
    
    commit f2b2c582e824 ("tcp: mitigate ACK loops for connections as tcp_sock")
    
    And I think it can be extended to rate limit all 'challenge acks' on a
    per-socket basis.
    
    Since we have the global tcp_challenge_ack_limit, this patch allows for
    tcp_challenge_ack_limit to be set to a large value and effectively rely on
    the per-socket limit, or set tcp_challenge_ack_limit to a lower value and
    still prevents a single connections from consuming the entire challenge ack
    quota.
    
    It further moves in the direction of eliminating the global limit at some
    point, as Eric Dumazet has suggested. This a follow-up to:
    Subject: tcp: make challenge acks less predictable
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Neal Cardwell <ncardwell@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Yue Cao <ycao009@ucr.edu>
    Signed-off-by: Jason Baron <jbaron@akamai.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c679108b6e576f4da4e165f90e1227b2e357383
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Jul 10 10:04:02 2016 +0200

    tcp: make challenge acks less predictable
    
    [ Upstream commit 75ff39ccc1bd5d3c455b6822ab09e533c551f758 ]
    
    Yue Cao claims that current host rate limiting of challenge ACKS
    (RFC 5961) could leak enough information to allow a patient attacker
    to hijack TCP sessions. He will soon provide details in an academic
    paper.
    
    This patch increases the default limit from 100 to 1000, and adds
    some randomization so that the attacker can no longer hijack
    sessions without spending a considerable amount of probes.
    
    Based on initial analysis and patch from Linus.
    
    Note that we also have per socket rate limiting, so it is tempting
    to remove the host limit in the future.
    
    v2: randomize the count of challenge acks per second, not the period.
    
    Fixes: 282f23c6ee34 ("tcp: implement RFC 5961 3.2")
    Reported-by: Yue Cao <ycao009@ucr.edu>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2bd71e79379a989412608cc10f5e7e512924cca
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Jul 5 22:12:36 2016 -0700

    ppp: defer netns reference release for ppp channel
    
    [ Upstream commit 205e1e255c479f3fd77446415706463b282f94e4 ]
    
    Matt reported that we have a NULL pointer dereference
    in ppp_pernet() from ppp_connect_channel(),
    i.e. pch->chan_net is NULL.
    
    This is due to that a parallel ppp_unregister_channel()
    could happen while we are in ppp_connect_channel(), during
    which pch->chan_net set to NULL. Since we need a reference
    to net per channel, it makes sense to sync the refcnt
    with the life time of the channel, therefore we should
    release this reference when we destroy it.
    
    Fixes: 1f461dcdd296 ("ppp: take reference on channels netns")
    Reported-by: Matt Bennett <Matt.Bennett@alliedtelesis.co.nz>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: linux-ppp@vger.kernel.org
    Cc: Guillaume Nault <g.nault@alphalink.fr>
    Cc: Cyrill Gorcunov <gorcunov@openvz.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Cyrill Gorcunov <gorcunov@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fba582c0f4fa4896b17c41fca2447c312880f6fc
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jun 23 17:50:39 2016 -0700

    libnvdimm, pfn, dax: fix initialization vs autodetect for mode + alignment
    
    commit 1ee6667cd8d183b2fed12f97285f184431d2caf9 upstream.
    
    The updated ndctl unit tests discovered that if a pfn configuration with
    a 4K alignment is read from the namespace, that alignment will be
    ignored in favor of the default 2M alignment.  The result is that the
    configuration will fail initialization with a message like:
    
        dax6.1: bad offset: 0x22000 dax disabled align: 0x200000
    
    Fix this by allowing the alignment read from the info block to override
    the default which is 2M not 0 in the autodetect path.  This also fixes a
    similar problem with the mode and alignment settings silently being
    overwritten by the kernel when userspace has changed it.  We now will
    either overwrite the info block if userspace changes the uuid or fail
    and warn if a live setting disagrees with the info block.
    
    Cc: Micah Parrish <micah.parrish@hpe.com>
    Cc: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a093d23c14cd9646993bd7f05c5afcccdb6d3f40
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Mar 31 15:41:18 2016 -0700

    libnvdimm, dax: record the specified alignment of a dax-device instance
    
    commit 45a0dac0451136fa7ae34a6fea53ef6a136287ce upstream.
    
    We want to use the alignment as the allocation and mapping unit.
    Previously this information was only useful for establishing the data
    offset, but now it is important to remember the granularity for the
    later use.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
