commit 1a7aef62b47b00630e62a268d647f54ec93fb38c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Feb 25 11:15:44 2018 +0100

    Linux 4.15.6

commit 0e6f5f6c23678eed229ea1798441677660f3ebc7
Author: Michal Hocko <mhocko@suse.com>
Date:   Wed Feb 21 14:46:01 2018 -0800

    vmalloc: fix __GFP_HIGHMEM usage for vmalloc_32 on 32b systems
    
    commit 698d0831ba87b92ae10b15e8203cfd59f5a59a35 upstream.
    
    Kai Heng Feng has noticed that BUG_ON(PageHighMem(pg)) triggers in
    drivers/media/common/saa7146/saa7146_core.c since 19809c2da28a ("mm,
    vmalloc: use __GFP_HIGHMEM implicitly").
    
    saa7146_vmalloc_build_pgtable uses vmalloc_32 and it is reasonable to
    expect that the resulting page is not in highmem.  The above commit
    aimed to add __GFP_HIGHMEM only for those requests which do not specify
    any zone modifier gfp flag.  vmalloc_32 relies on GFP_VMALLOC32 which
    should do the right thing.  Except it has been missed that GFP_VMALLOC32
    is an alias for GFP_KERNEL on 32b architectures.  Thanks to Matthew to
    notice this.
    
    Fix the problem by unconditionally setting GFP_DMA32 in GFP_VMALLOC32
    for !64b arches (as a bailout).  This should do the right thing and use
    ZONE_NORMAL which should be always below 4G on 32b systems.
    
    Debugged by Matthew Wilcox.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Link: http://lkml.kernel.org/r/20180212095019.GX21609@dhcp22.suse.cz
    Fixes: 19809c2da28a ("mm, vmalloc: use __GFP_HIGHMEM implicitly‚Äù)
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Kai Heng Feng <kai.heng.feng@canonical.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc3a0d7d6b81a7889648f77cbbc1eba0558c13c6
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Sun Feb 18 11:05:16 2018 +0200

    mei: me: add cannon point device ids for 4th device
    
    commit 2a4ac172c2f257d28c47b90c9e381bec31edcc44 upstream.
    
    Add cannon point device ids for 4th (itouch) device.
    
    Cc: <stable@vger.kernel.org> 4.14+
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 772639d52fa5e0ed3f03c98112c192cad8eda279
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Sun Feb 18 11:05:15 2018 +0200

    mei: me: add cannon point device ids
    
    commit f8f4aa68a8ae98ed79c8fee3488c38a2f5d2de8c upstream.
    
    Add CNP LP and CNP H device ids for cannon lake
    and coffee lake platforms.
    
    Cc: <stable@vger.kernel.org> 4.14+
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f00b6feadde1053c64ccd88ed249762bd6ceea0
Author: Kamil Konieczny <k.konieczny@samsung.com>
Date:   Wed Feb 7 16:52:09 2018 +0100

    crypto: s5p-sss - Fix kernel Oops in AES-ECB mode
    
    commit c927b080c67e3e97193c81fc1d27f4251bf4e036 upstream.
    
    In AES-ECB mode crypt is done with key only, so any use of IV
    can cause kernel Oops. Use IV only in AES-CBC and AES-CTR.
    
    Signed-off-by: Kamil Konieczny <k.konieczny@partner.samsung.com>
    Reported-by: Anand Moon <linux.amoon@gmail.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Anand Moon <linux.amoon@gmail.com>
    Cc: stable@vger.kernel.org # can be applied after commit 8f9702aad138
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52718d4979404e8fc1066ec52f99df40002c1149
Author: Shuah Khan <shuah@kernel.org>
Date:   Fri Jan 26 11:56:50 2018 -0700

    usbip: keep usbip_device sockfd state in sync with tcp_socket
    
    commit 009f41aed4b3e11e6dc1e3c07377a10c20f1a5ed upstream.
    
    Keep usbip_device sockfd state in sync with tcp_socket. When tcp_socket
    is reset to null, reset sockfd to -1 to keep it in sync.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0537b3962ad97c903fbe0067f974e98f6769206
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Mon Feb 12 14:24:51 2018 +0200

    xhci: fix xhci debugfs errors in xhci_stop
    
    commit 11cd764dc9a030991880ad4d51db93918afa5822 upstream.
    
    In function xhci_stop, xhci_debugfs_exit called before xhci_mem_cleanup.
    xhci_debugfs_exit removed the xhci debugfs root nodes, xhci_mem_cleanup
    called function xhci_free_virt_devices_depth_first which in turn called
    function xhci_debugfs_remove_slot.
    Function xhci_debugfs_remove_slot removed the nodes for devices, the nodes
    folders are sub folder of xhci debugfs.
    
    It is unreasonable to remove xhci debugfs root folder before
    xhci debugfs sub folder. Function xhci_mem_cleanup should be called
    before function xhci_debugfs_exit.
    
    Fixes: 02b6fdc2a153 ("usb: xhci: Add debugfs interface for xHCI driver")
    Cc: <stable@vger.kernel.org> # v4.15
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11474eb609f4a7469d85109347f74ee8972925fa
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Mon Feb 12 14:24:50 2018 +0200

    xhci: xhci debugfs device nodes weren't removed after device plugged out
    
    commit 8c5a93ebf7ac56d47f879b3c7c2f8c83b40c2cdb upstream.
    
    There is a bug after plugged out USB device, the device and its ep00
    nodes are still kept, we need to remove the nodes in xhci_free_dev when
    USB device is plugged out.
    
    Fixes: 052f71e25a7e ("xhci: Fix xhci debugfs NULL pointer dereference in resume from hibernate")
    Cc: <stable@vger.kernel.org> # v4.15
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99cfcdcbfb385181a375207a61e3abc2e1428c29
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Mon Feb 12 14:24:49 2018 +0200

    xhci: Fix xhci debugfs devices node disappearance after hibernation
    
    commit d91676717261578f429d3577dbe9154b26e8abf7 upstream.
    
    During system resume from hibernation, xhci host is reset, all the
    nodes in devices folder are removed in xhci_mem_cleanup function.
    Later nodes in /sys/kernel/debug/usb/xhci/* are created again in
    function xhci_run, but the nodes already exist, so the nodes still
    keep the old ones, finally device nodes in xhci debugfs folder
    /sys/kernel/debug/usb/xhci/*/devices/* are disappeared.
    
    This fix removed xhci debugfs nodes before the nodes are re-created,
    so all the nodes in xhci debugfs can be re-created successfully.
    
    Fixes: 02b6fdc2a153 ("usb: xhci: Add debugfs interface for xHCI driver")
    Cc: <stable@vger.kernel.org> # v4.15
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 177b1a5bc8fee58e20b811eb1b226589e2c3991a
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Mon Feb 12 14:24:48 2018 +0200

    xhci: Fix NULL pointer in xhci debugfs
    
    commit fa2dfd0ec22e0069c84dfae162972cbbc7c75488 upstream.
    
    Commit dde634057da7 ("xhci: Fix use-after-free in xhci debugfs") causes a
    null pointer dereference while fixing xhci-debugfs usage of ring pointers
    that were freed during hibernate.
    
    The fix passed addresses to ring pointers instead, but forgot to do this
    change for the xhci_ring_trb_show function.
    
    The address of the ring pointer passed to xhci-debugfs was of a temporary
    ring pointer "new_ring" instead of the actual ring "ring" pointer. The
    temporary new_ring pointer will be set to NULL later causing the NULL
    pointer dereference.
    
    This issue was seen when reading xhci related files in debugfs:
    
    cat /sys/kernel/debug/usb/xhci/*/devices/*/ep*/trbs
    
    [  184.604861] BUG: unable to handle kernel NULL pointer dereference at (null)
    [  184.613776] IP: xhci_ring_trb_show+0x3a/0x890
    [  184.618733] PGD 264193067 P4D 264193067 PUD 263238067 PMD 0
    [  184.625184] Oops: 0000 [#1] SMP
    [  184.726410] RIP: 0010:xhci_ring_trb_show+0x3a/0x890
    [  184.731944] RSP: 0018:ffffba8243c0fd90 EFLAGS: 00010246
    [  184.737880] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00000000000295d6
    [  184.746020] RDX: 00000000000295d5 RSI: 0000000000000001 RDI: ffff971a6418d400
    [  184.754121] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    [  184.762222] R10: ffff971a64c98a80 R11: ffff971a62a00e40 R12: ffff971a62a85500
    [  184.770325] R13: 0000000000020000 R14: ffff971a6418d400 R15: ffff971a6418d400
    [  184.778448] FS:  00007fe725a79700(0000) GS:ffff971a6ec00000(0000) knlGS:0000000000000000
    [  184.787644] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  184.794168] CR2: 0000000000000000 CR3: 000000025f365005 CR4: 00000000003606f0
    [  184.802318] Call Trace:
    [  184.805094]  ? seq_read+0x281/0x3b0
    [  184.809068]  seq_read+0xeb/0x3b0
    [  184.812735]  full_proxy_read+0x4d/0x70
    [  184.817007]  __vfs_read+0x23/0x120
    [  184.820870]  vfs_read+0x91/0x130
    [  184.824538]  SyS_read+0x42/0x90
    [  184.828106]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    
    Fixes: dde634057da7 ("xhci: Fix use-after-free in xhci debugfs")
    Cc: <stable@vger.kernel.org> # v4.15
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ee8ad9e5267e9bc40e6fb365f5db69832ef6e73
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Thu Jan 25 14:30:45 2018 +0200

    staging: iio: ad5933: switch buffer mode to software
    
    commit 7d2b8e6aaf9ee87910c2337e1c59bb5d3e3ba8c5 upstream.
    
    Since commit 152a6a884ae1 ("staging:iio:accel:sca3000 move
    to hybrid hard / soft buffer design.")
    the buffer mechanism has changed and the
    INDIO_BUFFER_HARDWARE flag has been unused.
    
    Since commit 2d6ca60f3284 ("iio: Add a DMAengine framework
    based buffer")
    the INDIO_BUFFER_HARDWARE flag has been re-purposed for
    DMA buffers.
    
    This driver has lagged behind these changes, and
    in order for buffers to work, the INDIO_BUFFER_SOFTWARE
    needs to be used.
    
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Fixes: 2d6ca60f3284 ("iio: Add a DMAengine framework based buffer")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6991325a52afd1a7532da17bb3dff28c999f89a1
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Mon Jan 22 11:53:12 2018 +0200

    staging: iio: adc: ad7192: fix external frequency setting
    
    commit e31b617d0a63c6558485aaa730fd162faa95a766 upstream.
    
    The external clock frequency was set only when selecting
    the internal clock, which is fixed at 4.9152 Mhz.
    
    This is incorrect, since it should be set when any of
    the external clock or crystal settings is selected.
    
    Added range validation for the external (crystal/clock)
    frequency setting.
    Valid values are between 2.4576 and 5.12 Mhz.
    
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07bf5bad3f80ea4d051710a186901d3a4c76fcdb
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Feb 16 16:36:04 2018 +0100

    staging: fsl-mc: fix build testing on x86
    
    commit 02b7b2844c2ffd3b614ec2b9293e8c7f041d60da upstream.
    
    Selecting GENERIC_MSI_IRQ_DOMAIN on x86 causes a compile-time error in
    some configurations:
    
    drivers/base/platform-msi.c:37:19: error: field 'arg' has incomplete type
    
    On the other architectures, we are fine, but here we should have an additional
    dependency on X86_LOCAL_APIC so we can get the PCI_MSI_IRQ_DOMAIN symbol.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 008fdd7c3915f5fe5481289e66986f149d824ad5
Author: Todd Kjos <tkjos@android.com>
Date:   Wed Feb 7 13:57:37 2018 -0800

    binder: replace "%p" with "%pK"
    
    commit 8ca86f1639ec5890d400fff9211aca22d0a392eb upstream.
    
    The format specifier "%p" can leak kernel addresses. Use
    "%pK" instead. There were 4 remaining cases in binder.c.
    
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52f381e126bcd985711ee50ddddeb64d1b66dbe0
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Jan 30 23:11:24 2018 -0800

    binder: check for binder_thread allocation failure in binder_poll()
    
    commit f88982679f54f75daa5b8eff3da72508f1e7422f upstream.
    
    If the kzalloc() in binder_get_thread() fails, binder_poll()
    dereferences the resulting NULL pointer.
    
    Fix it by returning POLLERR if the memory allocation failed.
    
    This bug was found by syzkaller using fault injection.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: 457b9a6f09f0 ("Staging: android: add binder driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 664b80469038bffa402b39903f53ecc6a210ab64
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Feb 4 02:06:27 2018 +0000

    staging: android: ashmem: Fix a race condition in pin ioctls
    
    commit ce8a3a9e76d0193e2e8d74a06d275b3c324ca652 upstream.
    
    ashmem_pin_unpin() reads asma->file and asma->size before taking the
    ashmem_mutex, so it can race with other operations that modify them.
    
    Build-tested only.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dd13985a916de3f748b07255eaf4b7516921ae0
Author: Martijn Coenen <maco@android.com>
Date:   Fri Feb 16 09:47:15 2018 +0100

    ANDROID: binder: synchronize_rcu() when using POLLFREE.
    
    commit 5eeb2ca02a2f6084fc57ae5c244a38baab07033a upstream.
    
    To prevent races with ep_remove_waitqueue() removing the
    waitqueue at the same time.
    
    Reported-by: syzbot+a2a3c4909716e271487e@syzkaller.appspotmail.com
    Signed-off-by: Martijn Coenen <maco@android.com>
    Cc: stable <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87340f8409523e9741fcd803e7b75e26a03c5b36
Author: Todd Kjos <tkjos@android.com>
Date:   Wed Feb 7 12:38:47 2018 -0800

    ANDROID: binder: remove WARN() for redundant txn error
    
    commit e46a3b3ba7509cb7fda0e07bc7c63a2cd90f579b upstream.
    
    binder_send_failed_reply() is called when a synchronous
    transaction fails. It reports an error to the thread that
    is waiting for the completion. Given that the transaction
    is synchronous, there should never be more than 1 error
    response to that thread -- this was being asserted with
    a WARN().
    
    However, when exercising the driver with syzbot tests, cases
    were observed where multiple "synchronous" requests were
    sent without waiting for responses, so it is possible that
    multiple errors would be reported to the thread. This testing
    was conducted with panic_on_warn set which forced the crash.
    
    This is easily reproduced by sending back-to-back
    "synchronous" transactions without checking for any
    response (eg, set read_size to 0):
    
        bwr.write_buffer = (uintptr_t)&bc1;
        bwr.write_size = sizeof(bc1);
        bwr.read_buffer = (uintptr_t)&br;
        bwr.read_size = 0;
        ioctl(fd, BINDER_WRITE_READ, &bwr);
        sleep(1);
        bwr2.write_buffer = (uintptr_t)&bc2;
        bwr2.write_size = sizeof(bc2);
        bwr2.read_buffer = (uintptr_t)&br;
        bwr2.read_size = 0;
        ioctl(fd, BINDER_WRITE_READ, &bwr2);
        sleep(1);
    
    The first transaction is sent to the servicemanager and the reply
    fails because no VMA is set up by this client. After
    binder_send_failed_reply() is called, the BINDER_WORK_RETURN_ERROR
    is sitting on the thread's todo list since the read_size was 0 and
    the client is not waiting for a response.
    
    The 2nd transaction is sent and the BINDER_WORK_RETURN_ERROR has not
    been consumed, so the thread's reply_error.cmd is still set (normally
    cleared when the BINDER_WORK_RETURN_ERROR is handled). Therefore
    when the servicemanager attempts to reply to the 2nd failed
    transaction, the error is already set and it triggers this warning.
    
    This is a user error since it is not waiting for the synchronous
    transaction to complete. If it ever does check, it will see an
    error.
    
    Changed the WARN() to a pr_warn().
    
    Signed-off-by: Todd Kjos <tkjos@android.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f2f8993e0f69f4f8d5afe3873158f723daacb31
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Feb 15 16:59:49 2018 +0100

    dn_getsockoptdecnet: move nf_{get/set}sockopt outside sock lock
    
    commit dfec091439bb2acf763497cfc58f2bdfc67c56b7 upstream.
    
    After commit 3f34cfae1238 ("netfilter: on sockopt() acquire sock lock
    only in the required scope"), the caller of nf_{get/set}sockopt() must
    not hold any lock, but, in such changeset, I forgot to cope with DECnet.
    
    This commit addresses the issue moving the nf call outside the lock,
    in the dn_{get,set}sockopt() with the same schema currently used by
    ipv4 and ipv6. Also moves the unhandled sockopts of the end of the main
    switch statements, to improve code readability.
    
    Reported-by: Petr Vandrovec <petr@vandrovec.name>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=198791#c2
    Fixes: 3f34cfae1238 ("netfilter: on sockopt() acquire sock lock only in the required scope")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58fde5229c07c485bea5948a84af959ee0b8f791
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 10 22:06:48 2018 +0100

    arm64: dts: add #cooling-cells to CPU nodes
    
    commit acbf76ee05067c3942852019993f7beb69a0f45f upstream.
    
    dtc complains about the lack of #coolin-cells properties for the
    CPU nodes that are referred to as "cooling-device":
    
    arch/arm64/boot/dts/mediatek/mt8173-evb.dtb: Warning (cooling_device_property): Missing property '#cooling-cells' in node /cpus/cpu@0 or bad phandle (referred from /thermal-zones/cpu_thermal/cooling-maps/map@0:cooling-device[0])
    arch/arm64/boot/dts/mediatek/mt8173-evb.dtb: Warning (cooling_device_property): Missing property '#cooling-cells' in node /cpus/cpu@100 or bad phandle (referred from /thermal-zones/cpu_thermal/cooling-maps/map@1:cooling-device[0])
    
    Apparently this property must be '<2>' to match the binding.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    [arnd: backported to 4.15]
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d899f5a769944c070ae1c9768a1218d40f2a2bc
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 10 17:53:18 2018 +0100

    ARM: 8743/1: bL_switcher: add MODULE_LICENSE tag
    
    commit a21b4c10c7bf5b58112afa20d6fa829e8d74e3e6 upstream.
    
    Without this tag, we get a build warning:
    
    WARNING: modpost: missing MODULE_LICENSE() in arch/arm/common/bL_switcher_dummy_if.o
    
    For completeness, I'm also adding author and description fields.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa913592b110a33b4dab882f7ca5af3a5f8fb83a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jan 15 17:04:22 2018 +0100

    video: fbdev/mmp: add MODULE_LICENSE
    
    commit c1530ac5a3ce93a1f02adabc4508b5fbf862dfe2 upstream.
    
    Kbuild complains about the lack of a license tag in this driver:
    
    WARNING: modpost: missing MODULE_LICENSE() in drivers/video/fbdev/mmp/mmp_disp.o
    
    This adds the license, author and description tags.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0813c6ee1936bf9d6621d02d2b3ffe90e7e0f6b6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 10 17:34:45 2018 +0100

    ASoC: ux500: add MODULE_LICENSE tag
    
    commit 1783c9d7cb7bc3181b9271665959b87280d98d8e upstream.
    
    This adds MODULE_LICENSE/AUTHOR/DESCRIPTION tags to the ux500
    platform drivers, to avoid these build warnings:
    
    WARNING: modpost: missing MODULE_LICENSE() in sound/soc/ux500/snd-soc-ux500-plat-dma.o
    WARNING: modpost: missing MODULE_LICENSE() in sound/soc/ux500/snd-soc-ux500-mach-mop500.o
    
    The company no longer exists, so the email addresses of the authors
    don't work any more, but I've added them anyway for consistency.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31903777ab86ef581f4c5ed0a32ac5292beb317a
Author: Jesse Chan <jc@linux.com>
Date:   Mon Nov 20 13:33:25 2017 -0800

    soc: qcom: rmtfs_mem: add missing MODULE_DESCRIPTION/AUTHOR/LICENSE
    
    commit 3b229bdb54cc83061b4b7840e3532316cb1ac7ce upstream.
    
    This change resolves a new compile-time warning
    when built as a loadable module:
    
    WARNING: modpost: missing MODULE_LICENSE() in drivers/soc/qcom/rmtfs_mem.o
    see include/linux/module.h for more information
    
    This adds the license as "GPL v2", which matches the header of the file.
    
    MODULE_DESCRIPTION and MODULE_AUTHOR are also added.
    
    Signed-off-by: Jesse Chan <jc@linux.com>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d32de924430cf9e392f1c9070ff2063edb91faa
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jan 27 10:58:43 2018 -0800

    net_sched: gen_estimator: fix lockdep splat
    
    commit 40ca54e3a686f13117f3de0c443f8026dadf7c44 upstream.
    
    syzbot reported a lockdep splat in gen_new_estimator() /
    est_fetch_counters() when attempting to lock est->stats_lock.
    
    Since est_fetch_counters() is called from BH context from timer
    interrupt, we need to block BH as well when calling it from process
    context.
    
    Most qdiscs use per cpu counters and are immune to the problem,
    but net/sched/act_api.c and net/netfilter/xt_RATEEST.c are using
    a spinlock to protect their data. They both call gen_new_estimator()
    while object is created and not yet alive, so this bug could
    not trigger a deadlock, only a lockdep splat.
    
    Fixes: 1c0d32fde5bd ("net_sched: gen_estimator: complete rewrite of rate estimators")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78739d2c45ac673504d2ad9b0e219710bd7e042e
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Dec 12 11:39:04 2017 -0500

    net: avoid skb_warn_bad_offload on IS_ERR
    
    commit 8d74e9f88d65af8bb2e095aff506aa6eac755ada upstream.
    
    skb_warn_bad_offload warns when packets enter the GSO stack that
    require skb_checksum_help or vice versa. Do not warn on arbitrary
    bad packets. Packet sockets can craft many. Syzkaller was able to
    demonstrate another one with eth_type games.
    
    In particular, suppress the warning when segmentation returns an
    error, which is for reasons other than checksum offload.
    
    See also commit 36c92474498a ("net: WARN if skb_checksum_help() is
    called on skb requiring segmentation") for context on this warning.
    
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e980be6c7aa7a20797e450802b3ea9cba0755d2
Author: Sowmini Varadhan <sowmini.varadhan@oracle.com>
Date:   Thu Nov 30 11:11:29 2017 -0800

    rds: tcp: atomically purge entries from rds_tcp_conn_list during netns delete
    
    commit f10b4cff98c6977668434fbf5dd58695eeca2897 upstream.
    
    The rds_tcp_kill_sock() function parses the rds_tcp_conn_list
    to find the rds_connection entries marked for deletion as part
    of the netns deletion under the protection of the rds_tcp_conn_lock.
    Since the rds_tcp_conn_list tracks rds_tcp_connections (which
    have a 1:1 mapping with rds_conn_path), multiple tc entries in
    the rds_tcp_conn_list will map to a single rds_connection, and will
    be deleted as part of the rds_conn_destroy() operation that is
    done outside the rds_tcp_conn_lock.
    
    The rds_tcp_conn_list traversal done under the protection of
    rds_tcp_conn_lock should not leave any doomed tc entries in
    the list after the rds_tcp_conn_lock is released, else another
    concurrently executiong netns delete (for a differnt netns) thread
    may trip on these entries.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dfca224fe217d90eceb2bbff7f2620c0cb08d05
Author: Sowmini Varadhan <sowmini.varadhan@oracle.com>
Date:   Thu Nov 30 11:11:28 2017 -0800

    rds: tcp: correctly sequence cleanup on netns deletion.
    
    commit 681648e67d43cf269c5590ecf021ed481f4551fc upstream.
    
    Commit 8edc3affc077 ("rds: tcp: Take explicit refcounts on struct net")
    introduces a regression in rds-tcp netns cleanup. The cleanup_net(),
    (and thus rds_tcp_dev_event notification) is only called from put_net()
    when all netns refcounts go to 0, but this cannot happen if the
    rds_connection itself is holding a c_net ref that it expects to
    release in rds_tcp_kill_sock.
    
    Instead, the rds_tcp_kill_sock callback should make sure to
    tear down state carefully, ensuring that the socket teardown
    is only done after all data-structures and workqs that depend
    on it are quiesced.
    
    The original motivation for commit 8edc3affc077 ("rds: tcp: Take explicit
    refcounts on struct net") was to resolve a race condition reported by
    syzkaller where workqs for tx/rx/connect were triggered after the
    namespace was deleted. Those worker threads should have been
    cancelled/flushed before socket tear-down and indeed,
    rds_conn_path_destroy() does try to sequence this by doing
         /* cancel cp_send_w */
         /* cancel cp_recv_w */
         /* flush cp_down_w */
         /* free data structures */
    Here the "flush cp_down_w" will trigger rds_conn_shutdown and thus
    invoke rds_tcp_conn_path_shutdown() to close the tcp socket, so that
    we ought to have satisfied the requirement that "socket-close is
    done after all other dependent state is quiesced". However,
    rds_conn_shutdown has a bug in that it *always* triggers the reconnect
    workq (and if connection is successful, we always restart tx/rx
    workqs so with the right timing, we risk the race conditions reported
    by syzkaller).
    
    Netns deletion is like module teardown- no need to restart a
    reconnect in this case. We can use the c_destroy_in_prog bit
    to avoid restarting the reconnect.
    
    Fixes: 8edc3affc077 ("rds: tcp: Take explicit refcounts on struct net")
    Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7159107d7f9e99603709973d0ed18b7e938285a
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Feb 5 14:41:45 2018 -0800

    netfilter: xt_RATEEST: acquire xt_rateest_mutex for hash insert
    
    commit 7dc68e98757a8eccf8ca7a53a29b896f1eef1f76 upstream.
    
    rateest_hash is supposed to be protected by xt_rateest_mutex,
    and, as suggested by Eric, lookup and insert should be atomic,
    so we should acquire the xt_rateest_mutex once for both.
    
    So introduce a non-locking helper for internal use and keep the
    locking one for external.
    
    Reported-by: <syzbot+5cb189720978275e4c75@syzkaller.appspotmail.com>
    Fixes: 5859034d7eb8 ("[NETFILTER]: x_tables: add RATEEST target")
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d13e612e713cf320a80309f1f3840553f498c8b9
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jan 31 15:02:47 2018 -0800

    netfilter: xt_cgroup: initialize info->priv in cgroup_mt_check_v1()
    
    commit ba7cd5d95f25cc6005f687dabdb4e7a6063adda9 upstream.
    
    xt_cgroup_info_v1->priv is an internal pointer only used for kernel,
    we should not trust what user-space provides.
    
    Reported-by: <syzbot+4fbcfcc0d2e6592bd641@syzkaller.appspotmail.com>
    Fixes: c38c4597e4bf ("netfilter: implement xt_cgroup cgroup2 path match")
    Cc: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff225999c603f0efed8fdbb791bab039d133eda2
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Jan 30 19:01:40 2018 +0100

    netfilter: on sockopt() acquire sock lock only in the required scope
    
    commit 3f34cfae1238848fd53f25e5c8fd59da57901f4b upstream.
    
    Syzbot reported several deadlocks in the netfilter area caused by
    rtnl lock and socket lock being acquired with a different order on
    different code paths, leading to backtraces like the following one:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    4.15.0-rc9+ #212 Not tainted
    ------------------------------------------------------
    syzkaller041579/3682 is trying to acquire lock:
      (sk_lock-AF_INET6){+.+.}, at: [<000000008775e4dd>] lock_sock
    include/net/sock.h:1463 [inline]
      (sk_lock-AF_INET6){+.+.}, at: [<000000008775e4dd>]
    do_ipv6_setsockopt.isra.8+0x3c5/0x39d0 net/ipv6/ipv6_sockglue.c:167
    
    but task is already holding lock:
      (rtnl_mutex){+.+.}, at: [<000000004342eaa9>] rtnl_lock+0x17/0x20
    net/core/rtnetlink.c:74
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (rtnl_mutex){+.+.}:
            __mutex_lock_common kernel/locking/mutex.c:756 [inline]
            __mutex_lock+0x16f/0x1a80 kernel/locking/mutex.c:893
            mutex_lock_nested+0x16/0x20 kernel/locking/mutex.c:908
            rtnl_lock+0x17/0x20 net/core/rtnetlink.c:74
            register_netdevice_notifier+0xad/0x860 net/core/dev.c:1607
            tee_tg_check+0x1a0/0x280 net/netfilter/xt_TEE.c:106
            xt_check_target+0x22c/0x7d0 net/netfilter/x_tables.c:845
            check_target net/ipv6/netfilter/ip6_tables.c:538 [inline]
            find_check_entry.isra.7+0x935/0xcf0
    net/ipv6/netfilter/ip6_tables.c:580
            translate_table+0xf52/0x1690 net/ipv6/netfilter/ip6_tables.c:749
            do_replace net/ipv6/netfilter/ip6_tables.c:1165 [inline]
            do_ip6t_set_ctl+0x370/0x5f0 net/ipv6/netfilter/ip6_tables.c:1691
            nf_sockopt net/netfilter/nf_sockopt.c:106 [inline]
            nf_setsockopt+0x67/0xc0 net/netfilter/nf_sockopt.c:115
            ipv6_setsockopt+0x115/0x150 net/ipv6/ipv6_sockglue.c:928
            udpv6_setsockopt+0x45/0x80 net/ipv6/udp.c:1422
            sock_common_setsockopt+0x95/0xd0 net/core/sock.c:2978
            SYSC_setsockopt net/socket.c:1849 [inline]
            SyS_setsockopt+0x189/0x360 net/socket.c:1828
            entry_SYSCALL_64_fastpath+0x29/0xa0
    
    -> #0 (sk_lock-AF_INET6){+.+.}:
            lock_acquire+0x1d5/0x580 kernel/locking/lockdep.c:3914
            lock_sock_nested+0xc2/0x110 net/core/sock.c:2780
            lock_sock include/net/sock.h:1463 [inline]
            do_ipv6_setsockopt.isra.8+0x3c5/0x39d0 net/ipv6/ipv6_sockglue.c:167
            ipv6_setsockopt+0xd7/0x150 net/ipv6/ipv6_sockglue.c:922
            udpv6_setsockopt+0x45/0x80 net/ipv6/udp.c:1422
            sock_common_setsockopt+0x95/0xd0 net/core/sock.c:2978
            SYSC_setsockopt net/socket.c:1849 [inline]
            SyS_setsockopt+0x189/0x360 net/socket.c:1828
            entry_SYSCALL_64_fastpath+0x29/0xa0
    
    other info that might help us debug this:
    
      Possible unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(rtnl_mutex);
                                    lock(sk_lock-AF_INET6);
                                    lock(rtnl_mutex);
       lock(sk_lock-AF_INET6);
    
      *** DEADLOCK ***
    
    1 lock held by syzkaller041579/3682:
      #0:  (rtnl_mutex){+.+.}, at: [<000000004342eaa9>] rtnl_lock+0x17/0x20
    net/core/rtnetlink.c:74
    
    The problem, as Florian noted, is that nf_setsockopt() is always
    called with the socket held, even if the lock itself is required only
    for very tight scopes and only for some operation.
    
    This patch addresses the issues moving the lock_sock() call only
    where really needed, namely in ipv*_getorigdst(), so that nf_setsockopt()
    does not need anymore to acquire both locks.
    
    Fixes: 22265a5c3c10 ("netfilter: xt_TEE: resolve oif using netdevice notifiers")
    Reported-by: syzbot+a4c2dc980ac1af699b36@syzkaller.appspotmail.com
    Suggested-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b73f446d3c008744d660cb2bf0ec5a506caa8d4
Author: Dmitry Vyukov <dvyukov@google.com>
Date:   Tue Jan 30 15:21:34 2018 +0100

    netfilter: ipt_CLUSTERIP: fix out-of-bounds accesses in clusterip_tg_check()
    
    commit 1a38956cce5eabd7b74f94bab70265e4df83165e upstream.
    
    Commit 136e92bbec0a switched local_nodes from an array to a bitmask
    but did not add proper bounds checks. As the result
    clusterip_config_init_nodelist() can both over-read
    ipt_clusterip_tgt_info.local_nodes and over-write
    clusterip_config.local_nodes.
    
    Add bounds checks for both.
    
    Fixes: 136e92bbec0a ("[NETFILTER] CLUSTERIP: use a bitmap to store node responsibility data")
    Signed-off-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d666621792e648c94271e0606a5a073e7cbdbc5
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 24 17:16:09 2018 -0800

    netfilter: x_tables: avoid out-of-bounds reads in xt_request_find_{match|target}
    
    commit da17c73b6eb74aad3c3c0654394635675b623b3e upstream.
    
    It looks like syzbot found its way into netfilter territory.
    
    Issue here is that @name comes from user space and might
    not be null terminated.
    
    Out-of-bound reads happen, KASAN is not happy.
    
    v2 added similar fix for xt_request_find_target(),
    as Florian advised.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41e28eddda46ed94dca3bcf4bf948ae6499c2104
Author: Dmitry Vyukov <dvyukov@google.com>
Date:   Thu Dec 28 09:48:54 2017 +0100

    netfilter: x_tables: fix int overflow in xt_alloc_table_info()
    
    commit 889c604fd0b5f6d3b8694ade229ee44124de1127 upstream.
    
    syzkaller triggered OOM kills by passing ipt_replace.size = -1
    to IPT_SO_SET_REPLACE. The root cause is that SMP_ALIGN() in
    xt_alloc_table_info() causes int overflow and the size check passes
    when it should not. SMP_ALIGN() is no longer needed leftover.
    
    Remove SMP_ALIGN() call in xt_alloc_table_info().
    
    Reported-by: syzbot+4396883fa8c4f64e0175@syzkaller.appspotmail.com
    Signed-off-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 660e0b97128d90b174991a0e7b290d1d4c76de7c
Author: Dmitry Vyukov <dvyukov@google.com>
Date:   Tue Feb 6 15:40:28 2018 -0800

    kcov: detect double association with a single task
    
    commit a77660d231f8b3d84fd23ed482e0964f7aa546d6 upstream.
    
    Currently KCOV_ENABLE does not check if the current task is already
    associated with another kcov descriptor.  As the result it is possible
    to associate a single task with more than one kcov descriptor, which
    later leads to a memory leak of the old descriptor.  This relation is
    really meant to be one-to-one (task has only one back link).
    
    Extend validation to detect such misuse.
    
    Link: http://lkml.kernel.org/r/20180122082520.15716-1-dvyukov@google.com
    Fixes: 5c9a8750a640 ("kernel: add kcov code coverage")
    Signed-off-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: Shankara Pailoor <sp3485@columbia.edu>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a009a6388ceaf409f508886adb6d1db08caddf02
Author: Wanpeng Li <wanpeng.li@hotmail.com>
Date:   Wed Dec 13 10:46:40 2017 +0100

    KVM: x86: fix escape of guest dr6 to the host
    
    commit efdab992813fb2ed825745625b83c05032e9cda2 upstream.
    
    syzkaller reported:
    
       WARNING: CPU: 0 PID: 12927 at arch/x86/kernel/traps.c:780 do_debug+0x222/0x250
       CPU: 0 PID: 12927 Comm: syz-executor Tainted: G           OE    4.15.0-rc2+ #16
       RIP: 0010:do_debug+0x222/0x250
       Call Trace:
        <#DB>
        debug+0x3e/0x70
       RIP: 0010:copy_user_enhanced_fast_string+0x10/0x20
        </#DB>
        _copy_from_user+0x5b/0x90
        SyS_timer_create+0x33/0x80
        entry_SYSCALL_64_fastpath+0x23/0x9a
    
    The testcase sets a watchpoint (with perf_event_open) on a buffer that is
    passed to timer_create() as the struct sigevent argument.  In timer_create(),
    copy_from_user()'s rep movsb triggers the BP.  The testcase also sets
    the debug registers for the guest.
    
    However, KVM only restores host debug registers when the host has active
    watchpoints, which triggers a race condition when running the testcase with
    multiple threads.  The guest's DR6.BS bit can escape to the host before
    another thread invokes timer_create(), and do_debug() complains.
    
    The fix is to respect do_debug()'s dr6 invariant when leaving KVM.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krƒçm√°≈ô <rkrcmar@redhat.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Radim Krƒçm√°≈ô <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53712962126d8be88fd9cc80c64a3cf71628c74e
Author: Douglas Gilbert <dgilbert@interlog.com>
Date:   Sun Jan 14 17:00:48 2018 -0500

    blk_rq_map_user_iov: fix error override
    
    commit 69e0927b3774563c19b5fb32e91d75edc147fb62 upstream.
    
    During stress tests by syzkaller on the sg driver the block layer
    infrequently returns EINVAL. Closer inspection shows the block
    layer was trying to return ENOMEM (which is much more
    understandable) but for some reason overroad that useful error.
    
    Patch below does not show this (unchanged) line:
       ret =__blk_rq_map_user_iov(rq, map_data, &i, gfp_mask, copy);
    That 'ret' was being overridden when that function failed.
    
    Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 831a8a1297d16fb741f1111fdd22708758ef1f9c
Author: Laura Abbott <labbott@redhat.com>
Date:   Fri Jan 5 11:14:09 2018 -0800

    staging: android: ion: Switch from WARN to pr_warn
    
    commit e4e179a844f52e907e550f887d0a2171f1508af1 upstream.
    
    Syzbot reported a warning with Ion:
    
    WARNING: CPU: 0 PID: 3502 at drivers/staging/android/ion/ion-ioctl.c:73 ion_ioctl+0x2db/0x380 drivers/staging/android/ion/ion-ioctl.c:73
    Kernel panic - not syncing: panic_on_warn set ...
    
    This is a warning that validation of the ioctl fields failed. This was
    deliberately added as a warning to make it very obvious to developers that
    something needed to be fixed. In reality, this is overkill and disturbs
    fuzzing. Switch to pr_warn for a message instead.
    
    Reported-by: syzbot+fa2d5f63ee5904a0115a@syzkaller.appspotmail.com
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea4ce12b88fcfeeffcf8d95a861d6b7b4057f363
Author: Laura Abbott <labbott@redhat.com>
Date:   Fri Jan 5 11:14:08 2018 -0800

    staging: android: ion: Add __GFP_NOWARN for system contig heap
    
    commit 0c75f10312a35b149b2cebb1832316b35c2337ca upstream.
    
    syzbot reported a warning from Ion:
    
      WARNING: CPU: 1 PID: 3485 at mm/page_alloc.c:3926
    
      ...
       __alloc_pages_nodemask+0x9fb/0xd80 mm/page_alloc.c:4252
      alloc_pages_current+0xb6/0x1e0 mm/mempolicy.c:2036
      alloc_pages include/linux/gfp.h:492 [inline]
      ion_system_contig_heap_allocate+0x40/0x2c0
      drivers/staging/android/ion/ion_system_heap.c:374
      ion_buffer_create drivers/staging/android/ion/ion.c:93 [inline]
      ion_alloc+0x2c1/0x9e0 drivers/staging/android/ion/ion.c:420
      ion_ioctl+0x26d/0x380 drivers/staging/android/ion/ion-ioctl.c:84
      vfs_ioctl fs/ioctl.c:46 [inline]
      do_vfs_ioctl+0x1b1/0x1520 fs/ioctl.c:686
      SYSC_ioctl fs/ioctl.c:701 [inline]
      SyS_ioctl+0x8f/0xc0 fs/ioctl.c:692
    
    This is a warning about attempting to allocate order > MAX_ORDER. This
    is coming from a userspace Ion allocation request. Since userspace is
    free to request however much memory it wants (and the kernel is free to
    deny its allocation), silence the allocation attempt with __GFP_NOWARN
    in case it fails.
    
    Reported-by: syzbot+76e7efc4748495855a4d@syzkaller.appspotmail.com
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97fe1b796e9df28d02925b10682a16db06fa8d81
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Dec 18 16:40:26 2017 -0800

    crypto: x86/twofish-3way - Fix %rbp usage
    
    commit d8c7fe9f2a486a6e5f0d5229ca43807af5ab22c6 upstream.
    
    Using %rbp as a temporary register breaks frame pointer convention and
    breaks stack traces when unwinding from an interrupt in the crypto code.
    
    In twofish-3way, we can't simply replace %rbp with another register
    because there are none available.  Instead, we use the stack to hold the
    values that %rbp, %r11, and %r12 were holding previously.  Each of these
    values represents the half of the output from the previous Feistel round
    that is being passed on unchanged to the following round.  They are only
    used once per round, when they are exchanged with %rax, %rbx, and %rcx.
    
    As a result, we free up 3 registers (one per block) and can reassign
    them so that %rbp is not used, and additionally %r14 and %r15 are not
    used so they do not need to be saved/restored.
    
    There may be a small overhead caused by replacing 'xchg REG, REG' with
    the needed sequence 'mov MEM, REG; mov REG, MEM; mov REG, REG' once per
    round.  But, counterintuitively, when I tested "ctr-twofish-3way" on a
    Haswell processor, the new version was actually about 2% faster.
    (Perhaps 'xchg' is not as well optimized as plain moves.)
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78fb902b9f520322e47b2ca9c97702e925eee530
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Nov 2 09:52:27 2017 -0400

    media: pvrusb2: properly check endpoint types
    
    commit 72c27a68a2a3f650f0dc7891ee98f02283fc11af upstream.
    
    As syzkaller detected, pvrusb2 driver submits bulk urb withount checking
    the the endpoint type is actually blunk. Add a check.
    
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 2713 at drivers/usb/core/urb.c:449 usb_submit_urb+0xf8a/0x11d0
    Modules linked in:
    CPU: 1 PID: 2713 Comm: pvrusb2-context Not tainted
    4.14.0-rc1-42251-gebb2c2437d80 #210
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    task: ffff88006b7a18c0 task.stack: ffff880069978000
    RIP: 0010:usb_submit_urb+0xf8a/0x11d0 drivers/usb/core/urb.c:448
    RSP: 0018:ffff88006997f990 EFLAGS: 00010286
    RAX: 0000000000000029 RBX: ffff880063661900 RCX: 0000000000000000
    RDX: 0000000000000029 RSI: ffffffff86876d60 RDI: ffffed000d32ff24
    RBP: ffff88006997fa90 R08: 1ffff1000d32fdca R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 1ffff1000d32ff39
    R13: 0000000000000001 R14: 0000000000000003 R15: ffff880068bbed68
    FS:  0000000000000000(0000) GS:ffff88006c600000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000001032000 CR3: 000000006a0ff000 CR4: 00000000000006f0
    Call Trace:
     pvr2_send_request_ex+0xa57/0x1d80 drivers/media/usb/pvrusb2/pvrusb2-hdw.c:3645
     pvr2_hdw_check_firmware drivers/media/usb/pvrusb2/pvrusb2-hdw.c:1812
     pvr2_hdw_setup_low drivers/media/usb/pvrusb2/pvrusb2-hdw.c:2107
     pvr2_hdw_setup drivers/media/usb/pvrusb2/pvrusb2-hdw.c:2250
     pvr2_hdw_initialize+0x548/0x3c10 drivers/media/usb/pvrusb2/pvrusb2-hdw.c:2327
     pvr2_context_check drivers/media/usb/pvrusb2/pvrusb2-context.c:118
     pvr2_context_thread_func+0x361/0x8c0 drivers/media/usb/pvrusb2/pvrusb2-context.c:167
     kthread+0x3a1/0x470 kernel/kthread.c:231
     ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    Code: 48 8b 85 30 ff ff ff 48 8d b8 98 00 00 00 e8 ee 82 89 fe 45 89
    e8 44 89 f1 4c 89 fa 48 89 c6 48 c7 c7 40 c0 ea 86 e8 30 1b dc fc <0f>
    ff e9 9b f7 ff ff e8 aa 95 25 fd e9 80 f7 ff ff e8 50 74 f3
    ---[ end trace 6919030503719da6 ]---
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit c31124234485bcf2b0eacf87f8b151982f6ede84
Author: Paul Moore <paul@paul-moore.com>
Date:   Tue Dec 5 17:17:43 2017 -0500

    selinux: skip bounded transition processing if the policy isn't loaded
    
    commit 4b14752ec4e0d87126e636384cf37c8dd9df157c upstream.
    
    We can't do anything reasonable in security_bounded_transition() if we
    don't have a policy loaded, and in fact we could run into problems
    with some of the code inside expecting a policy.  Fix these problems
    like we do many others in security/selinux/ss/services.c by checking
    to see if the policy is loaded (ss_initialized) and returning quickly
    if it isn't.
    
    Reported-by: syzbot <syzkaller-bugs@googlegroups.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Stephen Smalley <sds@tycho.nsa.gov>
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81563ac61f5406e2fc461c6974c97a18787c1e71
Author: Paul Moore <paul@paul-moore.com>
Date:   Tue Nov 28 18:51:12 2017 -0500

    selinux: ensure the context is NUL terminated in security_context_to_sid_core()
    
    commit ef28df55ac27e1e5cd122e19fa311d886d47a756 upstream.
    
    The syzbot/syzkaller automated tests found a problem in
    security_context_to_sid_core() during early boot (before we load the
    SELinux policy) where we could potentially feed context strings without
    NUL terminators into the strcmp() function.
    
    We already guard against this during normal operation (after the SELinux
    policy has been loaded) by making a copy of the context strings and
    explicitly adding a NUL terminator to the end.  The patch extends this
    protection to the early boot case (no loaded policy) by moving the context
    copy earlier in security_context_to_sid_core().
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Reviewed-By: William Roberts <william.c.roberts@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62da989fd52d6e95c7ef7616d8a387028b7c17f6
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri Feb 9 17:45:50 2018 +0800

    ptr_ring: try vmalloc() when kmalloc() fails
    
    commit 0bf7800f1799b5b1fd7d4f024e9ece53ac489011 upstream.
    
    This patch switch to use kvmalloc_array() for using a vmalloc()
    fallback to help in case kmalloc() fails.
    
    Reported-by: syzbot+e4d4f9ddd4295539735d@syzkaller.appspotmail.com
    Fixes: 2e0ab8ca83c12 ("ptr_ring: array based FIFO for pointers")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62a273a47514ee033f4c872d07c8789eea43a1ba
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri Feb 9 17:45:49 2018 +0800

    ptr_ring: fail early if queue occupies more than KMALLOC_MAX_SIZE
    
    commit 6e6e41c3112276288ccaf80c70916779b84bb276 upstream.
    
    To avoid slab to warn about exceeded size, fail early if queue
    occupies more than KMALLOC_MAX_SIZE.
    
    Reported-by: syzbot+e4d4f9ddd4295539735d@syzkaller.appspotmail.com
    Fixes: 2e0ab8ca83c12 ("ptr_ring: array based FIFO for pointers")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de03f1a1c9e3a2fe442849596874f00e79bec737
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 15 14:47:15 2018 -0800

    tun: fix tun_napi_alloc_frags() frag allocator
    
    commit 43a08e0f58b3f236165029710a4e3b303815253b upstream.
    
    <Mark Rutland reported>
        While fuzzing arm64 v4.16-rc1 with Syzkaller, I've been hitting a
        misaligned atomic in __skb_clone:
    
    ¬†¬†¬†¬†¬†¬†¬†¬†atomic_inc(&(skb_shinfo(skb)->dataref));
    
       where dataref doesn't have the required natural alignment, and the
       atomic operation faults. e.g. i often see it aligned to a single
       byte boundary rather than a four byte boundary.
    
       AFAICT, the skb_shared_info is misaligned at the instant it's
       allocated in __napi_alloc_skb()  __napi_alloc_skb()
    </end of report>
    
    Problem is caused by tun_napi_alloc_frags() using
    napi_alloc_frag() with user provided seg sizes,
    leading to other users of this API getting unaligned
    page fragments.
    
    Since we would like to not necessarily add paddings or alignments to
    the frags that tun_napi_alloc_frags() attaches to the skb, switch to
    another page frag allocator.
    
    As a bonus skb_page_frag_refill() can use GFP_KERNEL allocations,
    meaning that we can not deplete memory reserves as easily.
    
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
