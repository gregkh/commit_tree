commit 991a0920e1acc1244b81c4308407e6ac0c8e8bd9
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 11 13:22:14 2020 +0100

    Linux 5.9.14
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201210142606.074509102@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f8ad899df8c159d0ac293eb7aafeea3a536bd3a
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Tue Dec 8 19:01:51 2020 +0100

    bpf: Fix propagation of 32-bit signed bounds from 64-bit bounds.
    
    commit b02709587ea3d699a608568ee8157d8db4fd8cae upstream.
    
    The 64-bit signed bounds should not affect 32-bit signed bounds unless the
    verifier knows that upper 32-bits are either all 1s or all 0s. For example the
    register with smin_value==1 doesn't mean that s32_min_value is also equal to 1,
    since smax_value could be larger than 32-bit subregister can hold.
    The verifier refines the smax/s32_max return value from certain helpers in
    do_refine_retval_range(). Teach the verifier to recognize that smin/s32_min
    value is also bounded. When both smin and smax bounds fit into 32-bit
    subregister the verifier can propagate those bounds.
    
    Fixes: 3f50f132d840 ("bpf: Verifier, do explicit ALU32 bounds tracking")
    Reported-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f03bcb61241789022e1e4c43b03a090a3429b170
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Dec 9 14:39:56 2020 -0800

    Revert "geneve: pull IP header before ECN decapsulation"
    
    commit c02bd115b1d25931159f89c7d9bf47a30f5d4b41 upstream.
    
    This reverts commit 4179b00c04d1 ("geneve: pull IP header before ECN decapsulation").
    
    Eric says: "network header should have been pulled already before
    hitting geneve_rx()". Let's revert the syzbot fix since it's causing
    more harm than good, and revisit.
    
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Fixes: 4179b00c04d1 ("geneve: pull IP header before ECN decapsulation")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=210569
    Link: https://lore.kernel.org/netdev/CANn89iJVWfb=2i7oU1=D55rOyQnBbbikf+Mc6XHMkY7YX-yGEw@mail.gmail.com/
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7a9b51b7e1fc8ca42856d1ecbba76165d29f55f
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Dec 3 13:50:50 2020 +0900

    x86/insn-eval: Use new for_each_insn_prefix() macro to loop over prefixes bytes
    
    commit 12cb908a11b2544b5f53e9af856e6b6a90ed5533 upstream
    
    Since insn.prefixes.nbytes can be bigger than the size of
    insn.prefixes.bytes[] when a prefix is repeated, the proper check must
    be
    
      insn.prefixes.bytes[i] != 0 and i < 4
    
    instead of using insn.prefixes.nbytes. Use the new
    for_each_insn_prefix() macro which does it correctly.
    
    Debugged by Kees Cook <keescook@chromium.org>.
    
     [ bp: Massage commit message. ]
    
    Fixes: 32d0b95300db ("x86/insn-eval: Add utility functions to get segment selector")
    Reported-by: syzbot+9b64b619f10f19d19a7c@syzkaller.appspotmail.com
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/160697104969.3146288.16329307586428270032.stgit@devnote2
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c2b4b4f9fa5b765b927e361e3d310bcb5773015
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Nov 25 23:50:17 2020 +0100

    netfilter: nftables_offload: build mask based from the matching bytes
    
    commit a5d45bc0dc50f9dd83703510e9804d813a9cac32 upstream.
    
    Userspace might match on prefix bytes of header fields if they are on
    the byte boundary, this requires that the mask is adjusted accordingly.
    Use NFT_OFFLOAD_MATCH_EXACT() for meta since prefix byte matching is not
    allowed for this type of selector.
    
    The bitwise expression might be optimized out by userspace, hence the
    kernel needs to infer the prefix from the number of payload bytes to
    match on. This patch adds nft_payload_offload_mask() to calculate the
    bitmask to match on the prefix.
    
    Fixes: c9626a2cbdb2 ("netfilter: nf_tables: add hardware offload support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10208757f7bac16b55b0eaf3b6908482eefc87cb
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Nov 25 23:50:07 2020 +0100

    netfilter: nftables_offload: set address type in control dissector
    
    commit 3c78e9e0d33a27ab8050e4492c03c6a1f8d0ed6b upstream.
    
    This patch adds nft_flow_rule_set_addr_type() to set the address type
    from the nft_payload expression accordingly.
    
    If the address type is not set in the control dissector then a rule that
    matches either on source or destination IP address does not work.
    
    After this patch, nft hardware offload generates the flow dissector
    configuration as tc-flower does to match on an IP address.
    
    This patch has been also tested functionally to make sure packets are
    filtered out by the NIC.
    
    This is also getting the code aligned with the existing netfilter flow
    offload infrastructure which is also setting the control dissector.
    
    Fixes: c9626a2cbdb2 ("netfilter: nf_tables: add hardware offload support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 182099ac9e83d7218ca373d72e263f62d2a51b76
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Nov 19 16:34:54 2020 +0100

    netfilter: nf_tables: avoid false-postive lockdep splat
    
    commit c0700dfa2cae44c033ed97dade8a2679c7d22a9d upstream.
    
    There are reports wrt lockdep splat in nftables, e.g.:
    ------------[ cut here ]------------
    WARNING: CPU: 2 PID: 31416 at net/netfilter/nf_tables_api.c:622
    lockdep_nfnl_nft_mutex_not_held+0x28/0x38 [nf_tables]
    ...
    
    These are caused by an earlier, unrelated bug such as a n ABBA deadlock
    in a different subsystem.
    In such an event, lockdep is disabled and lockdep_is_held returns true
    unconditionally.  This then causes the WARN() in nf_tables.
    
    Make the WARN conditional on lockdep still active to avoid this.
    
    Fixes: f102d66b335a417 ("netfilter: nf_tables: use dedicated mutex to guard transactions")
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Link: https://lore.kernel.org/linux-kselftest/CA+G9fYvFUpODs+NkSYcnwKnXm62tmP=ksLeBPmB+KFrB2rvCtQ@mail.gmail.com/
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec62f9cdf6d428b56b1964a5d90ee9b61492b6f5
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 24 17:45:23 2020 -0800

    Input: i8042 - fix error return code in i8042_setup_aux()
    
    commit 855b69857830f8d918d715014f05e59a3f7491a0 upstream.
    
    Fix to return a negative error code from the error handling case
    instead of 0 in function i8042_setup_aux(), as done elsewhere in this
    function.
    
    Fixes: f81134163fc7 ("Input: i8042 - use platform_driver_probe")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201123133420.4071187-1-luomeng12@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0654a224a9d82d62d2a51740eacc1a986570c810
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Nov 13 14:52:28 2020 -0800

    dm writecache: remove BUG() and fail gracefully instead
    
    commit 857c4c0a8b2888d806f4308c58f59a6a81a1dee9 upstream.
    
    Building on arch/s390/ results in this build error:
    
    cc1: some warnings being treated as errors
    ../drivers/md/dm-writecache.c: In function 'persistent_memory_claim':
    ../drivers/md/dm-writecache.c:323:1: error: no return statement in function returning non-void [-Werror=return-type]
    
    Fix this by replacing the BUG() with an -EOPNOTSUPP return.
    
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b85ca7d11c61e81a644d3658a86c79e0cec6c6a7
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Nov 16 22:10:58 2020 +0800

    i2c: qup: Fix error return code in qup_i2c_bam_schedule_desc()
    
    commit e9acf0298c664f825e6f1158f2a97341bf9e03ca upstream.
    
    Fix to return the error code from qup_i2c_change_state()
    instaed of 0 in qup_i2c_bam_schedule_desc().
    
    Fixes: fbf9921f8b35d9b2 ("i2c: qup: Fix error handling")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97783a290bf97374c5c542cb105bd0e064612cce
Author: Robert Foss <robert.foss@linaro.org>
Date:   Mon Nov 30 11:04:45 2020 +0100

    i2c: qcom: Fix IRQ error misassignement
    
    commit 14718b3e129b058cb716a60c6faf40ef68661c54 upstream.
    
    During cci_isr() errors read from register fields belonging to
    i2c master1 are currently assigned to the status field belonging to
    i2c master0. This patch corrects this error, and always assigns
    master1 errors to the status field of master1.
    
    Fixes: e517526195de ("i2c: Add Qualcomm CCI I2C driver")
    Reported-by: Loic Poulain <loic.poulain@linaro.org>
    Suggested-by: Loic Poulain <loic.poulain@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50b2164c66b67c32a4a8a38c7511aa76f73adbc7
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Dec 3 11:43:37 2020 +0300

    rtw88: debug: Fix uninitialized memory in debugfs code
    
    commit 74a8c816fa8fa7862df870660e9821abb56649fe upstream.
    
    This code does not ensure that the whole buffer is initialized and none
    of the callers check for errors so potentially none of the buffer is
    initialized.  Add a memset to eliminate this bug.
    
    Fixes: e3037485c68e ("rtw88: new Realtek 802.11ac driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/X8ilOfVz3pf0T5ec@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 312d5fc71f1b49862457ec3049a1f357d53771ad
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Nov 24 10:41:40 2020 -0600

    gfs2: Don't freeze the file system during unmount
    
    commit f39e7d3aae2934b1cfdd209b54c508e2552e9531 upstream.
    
    GFS2's freeze/thaw mechanism uses a special freeze glock to control its
    operation. It does this with a sync glock operation (glops.c) called
    freeze_go_sync. When the freeze glock is demoted (glock's do_xmote) the
    glops function causes the file system to be frozen. This is intended. However,
    GFS2's mount and unmount processes also hold the freeze glock to prevent other
    processes, perhaps on different cluster nodes, from mounting the frozen file
    system in read-write mode.
    
    Before this patch, there was no check in freeze_go_sync for whether a freeze
    in intended or whether the glock demote was caused by a normal unmount.
    So it was trying to freeze the file system it's trying to unmount, which
    ends up in a deadlock.
    
    This patch adds an additional check to freeze_go_sync so that demotes of the
    freeze glock are ignored if they come from the unmount process.
    
    Fixes: 20b329129009 ("gfs2: Fix regression in freeze_go_sync")
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0c5b2ebdf28fc91952ad70e60e15ce83278139e
Author: Alexander Aring <aahringo@redhat.com>
Date:   Sun Nov 22 18:10:24 2020 -0500

    gfs2: Fix deadlock dumping resource group glocks
    
    commit 16e6281b6b22b0178eab95c6a82502d7b10f67b8 upstream.
    
    Commit 0e539ca1bbbe ("gfs2: Fix NULL pointer dereference in gfs2_rgrp_dump")
    introduced additional locking in gfs2_rgrp_go_dump, which is also used for
    dumping resource group glocks via debugfs.  However, on that code path, the
    glock spin lock is already taken in dump_glock, and taking it again in
    gfs2_glock2rgrp leads to deadlock.  This can be reproduced with:
    
      $ mkfs.gfs2 -O -p lock_nolock /dev/FOO
      $ mount /dev/FOO /mnt/foo
      $ touch /mnt/foo/bar
      $ cat /sys/kernel/debug/gfs2/FOO/glocks
    
    Fix that by not taking the glock spin lock inside the go_dump callback.
    
    Fixes: 0e539ca1bbbe ("gfs2: Fix NULL pointer dereference in gfs2_rgrp_dump")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17c8d31778f52f98d648fcfef685df0b6115dd4f
Author: Luo Meng <luomeng12@huawei.com>
Date:   Mon Nov 23 21:38:39 2020 +0800

    ASoC: wm_adsp: fix error return code in wm_adsp_load()
    
    commit 3fba05a2832f93b4d0cd4204f771fdae0d823114 upstream.
    
    Fix to return a negative error code from the error handling case
    instead of 0 in function wm_adsp_load(), as done elsewhere in this
    function.
    
    Fixes: 170b1e123f38 ("ASoC: wm_adsp: Add support for new Halo core DSPs")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Acked-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20201123133839.4073787-1-luomeng12@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1716c9bd567bc6cdb3d18be78f36941a306b708d
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 7 13:17:25 2020 +0700

    tipc: fix a deadlock when flushing scheduled work
    
    commit d966ddcc38217a6110a6a0ff37ad2dee7d42e23e upstream.
    
    In the commit fdeba99b1e58
    ("tipc: fix use-after-free in tipc_bcast_get_mode"), we're trying
    to make sure the tipc_net_finalize_work work item finished if it
    enqueued. But calling flush_scheduled_work() is not just affecting
    above work item but either any scheduled work. This has turned out
    to be overkill and caused to deadlock as syzbot reported:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.9.0-rc2-next-20200828-syzkaller #0 Not tainted
    ------------------------------------------------------
    kworker/u4:6/349 is trying to acquire lock:
    ffff8880aa063d38 ((wq_completion)events){+.+.}-{0:0}, at: flush_workqueue+0xe1/0x13e0 kernel/workqueue.c:2777
    
    but task is already holding lock:
    ffffffff8a879430 (pernet_ops_rwsem){++++}-{3:3}, at: cleanup_net+0x9b/0xb10 net/core/net_namespace.c:565
    
    [...]
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(pernet_ops_rwsem);
                                   lock(&sb->s_type->i_mutex_key#13);
                                   lock(pernet_ops_rwsem);
      lock((wq_completion)events);
    
     *** DEADLOCK ***
    [...]
    
    v1:
    To fix the original issue, we replace above calling by introducing
    a bit flag. When a namespace cleaned-up, bit flag is set to zero and:
    - tipc_net_finalize functionial just does return immediately.
    - tipc_net_finalize_work does not enqueue into the scheduled work queue.
    
    v2:
    Use cancel_work_sync() helper to make sure ONLY the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+d5aa7e0385f6a5d0f4fd@syzkaller.appspotmail.com
    Fixes: fdeba99b1e58 ("tipc: fix use-after-free in tipc_bcast_get_mode")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 844fb0454edb19b61a77284f54399cadf264adc8
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 19 01:59:32 2020 -0800

    netfilter: ipset: prevent uninit-value in hash_ip6_add
    
    commit 68ad89de918e1c5a79c9c56127e5e31741fd517e upstream.
    
    syzbot found that we are not validating user input properly
    before copying 16 bytes [1].
    
    Using NLA_BINARY in ipaddr_policy[] for IPv6 address is not correct,
    since it ensures at most 16 bytes were provided.
    
    We should instead make sure user provided exactly 16 bytes.
    
    In old kernels (before v4.20), fix would be to remove the NLA_BINARY,
    since NLA_POLICY_EXACT_LEN() was not yet available.
    
    [1]
    BUG: KMSAN: uninit-value in hash_ip6_add+0x1cba/0x3a50 net/netfilter/ipset/ip_set_hash_gen.h:892
    CPU: 1 PID: 11611 Comm: syz-executor.0 Not tainted 5.10.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x5f/0xa0 mm/kmsan/kmsan_instr.c:197
     hash_ip6_add+0x1cba/0x3a50 net/netfilter/ipset/ip_set_hash_gen.h:892
     hash_ip6_uadt+0x976/0xbd0 net/netfilter/ipset/ip_set_hash_ip.c:267
     call_ad+0x329/0xd00 net/netfilter/ipset/ip_set_core.c:1720
     ip_set_ad+0x111f/0x1440 net/netfilter/ipset/ip_set_core.c:1808
     ip_set_uadd+0xf6/0x110 net/netfilter/ipset/ip_set_core.c:1833
     nfnetlink_rcv_msg+0xc7d/0xdf0 net/netfilter/nfnetlink.c:252
     netlink_rcv_skb+0x70a/0x820 net/netlink/af_netlink.c:2494
     nfnetlink_rcv+0x4f0/0x4380 net/netfilter/nfnetlink.c:600
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x11da/0x14b0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x173c/0x1840 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     ____sys_sendmsg+0xc7a/0x1240 net/socket.c:2353
     ___sys_sendmsg net/socket.c:2407 [inline]
     __sys_sendmsg+0x6d5/0x830 net/socket.c:2440
     __do_sys_sendmsg net/socket.c:2449 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2447
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2447
     do_syscall_64+0x9f/0x140 arch/x86/entry/common.c:48
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45deb9
    Code: 0d b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 db b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fe2e503fc78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000029ec0 RCX: 000000000045deb9
    RDX: 0000000000000000 RSI: 0000000020000140 RDI: 0000000000000003
    RBP: 000000000118bf60 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 000000000118bf2c
    R13: 000000000169fb7f R14: 00007fe2e50409c0 R15: 000000000118bf2c
    
    Uninit was stored to memory at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:121 [inline]
     kmsan_internal_chain_origin+0xad/0x130 mm/kmsan/kmsan.c:289
     __msan_chain_origin+0x57/0xa0 mm/kmsan/kmsan_instr.c:147
     ip6_netmask include/linux/netfilter/ipset/pfxlen.h:49 [inline]
     hash_ip6_netmask net/netfilter/ipset/ip_set_hash_ip.c:185 [inline]
     hash_ip6_uadt+0xb1c/0xbd0 net/netfilter/ipset/ip_set_hash_ip.c:263
     call_ad+0x329/0xd00 net/netfilter/ipset/ip_set_core.c:1720
     ip_set_ad+0x111f/0x1440 net/netfilter/ipset/ip_set_core.c:1808
     ip_set_uadd+0xf6/0x110 net/netfilter/ipset/ip_set_core.c:1833
     nfnetlink_rcv_msg+0xc7d/0xdf0 net/netfilter/nfnetlink.c:252
     netlink_rcv_skb+0x70a/0x820 net/netlink/af_netlink.c:2494
     nfnetlink_rcv+0x4f0/0x4380 net/netfilter/nfnetlink.c:600
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x11da/0x14b0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x173c/0x1840 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     ____sys_sendmsg+0xc7a/0x1240 net/socket.c:2353
     ___sys_sendmsg net/socket.c:2407 [inline]
     __sys_sendmsg+0x6d5/0x830 net/socket.c:2440
     __do_sys_sendmsg net/socket.c:2449 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2447
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2447
     do_syscall_64+0x9f/0x140 arch/x86/entry/common.c:48
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Uninit was stored to memory at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:121 [inline]
     kmsan_internal_chain_origin+0xad/0x130 mm/kmsan/kmsan.c:289
     kmsan_memcpy_memmove_metadata+0x25e/0x2d0 mm/kmsan/kmsan.c:226
     kmsan_memcpy_metadata+0xb/0x10 mm/kmsan/kmsan.c:246
     __msan_memcpy+0x46/0x60 mm/kmsan/kmsan_instr.c:110
     ip_set_get_ipaddr6+0x2cb/0x370 net/netfilter/ipset/ip_set_core.c:310
     hash_ip6_uadt+0x439/0xbd0 net/netfilter/ipset/ip_set_hash_ip.c:255
     call_ad+0x329/0xd00 net/netfilter/ipset/ip_set_core.c:1720
     ip_set_ad+0x111f/0x1440 net/netfilter/ipset/ip_set_core.c:1808
     ip_set_uadd+0xf6/0x110 net/netfilter/ipset/ip_set_core.c:1833
     nfnetlink_rcv_msg+0xc7d/0xdf0 net/netfilter/nfnetlink.c:252
     netlink_rcv_skb+0x70a/0x820 net/netlink/af_netlink.c:2494
     nfnetlink_rcv+0x4f0/0x4380 net/netfilter/nfnetlink.c:600
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x11da/0x14b0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x173c/0x1840 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     ____sys_sendmsg+0xc7a/0x1240 net/socket.c:2353
     ___sys_sendmsg net/socket.c:2407 [inline]
     __sys_sendmsg+0x6d5/0x830 net/socket.c:2440
     __do_sys_sendmsg net/socket.c:2449 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2447
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2447
     do_syscall_64+0x9f/0x140 arch/x86/entry/common.c:48
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:121 [inline]
     kmsan_internal_poison_shadow+0x5c/0xf0 mm/kmsan/kmsan.c:104
     kmsan_slab_alloc+0x8d/0xe0 mm/kmsan/kmsan_hooks.c:76
     slab_alloc_node mm/slub.c:2906 [inline]
     __kmalloc_node_track_caller+0xc61/0x15f0 mm/slub.c:4512
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x309/0xae0 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1094 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1176 [inline]
     netlink_sendmsg+0xdb8/0x1840 net/netlink/af_netlink.c:1894
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     ____sys_sendmsg+0xc7a/0x1240 net/socket.c:2353
     ___sys_sendmsg net/socket.c:2407 [inline]
     __sys_sendmsg+0x6d5/0x830 net/socket.c:2440
     __do_sys_sendmsg net/socket.c:2449 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2447
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2447
     do_syscall_64+0x9f/0x140 arch/x86/entry/common.c:48
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: a7b4f989a629 ("netfilter: ipset: IP set core support")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cecb2b21c1de948505ef1119499d37e20cb990df
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Nov 24 10:44:36 2020 -0500

    gfs2: check for empty rgrp tree in gfs2_ri_update
    
    commit 778721510e84209f78e31e2ccb296ae36d623f5e upstream.
    
    If gfs2 tries to mount a (corrupt) file system that has no resource
    groups it still tries to set preferences on the first one, which causes
    a kernel null pointer dereference. This patch adds a check to function
    gfs2_ri_update so this condition is detected and reported back as an
    error.
    
    Reported-by: syzbot+e3f23ce40269a4c9053a@syzkaller.appspotmail.com
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b1e68927e09bad4a29624e494fd7a73c1b7719b
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Thu Nov 26 20:21:40 2020 +0100

    can: af_can: can_rx_unregister(): remove WARN() statement from list operation sanity check
    
    commit d73ff9b7c4eacaba0fd956d14882bcae970f8307 upstream.
    
    To detect potential bugs in CAN protocol implementations (double removal of
    receiver entries) a WARN() statement has been used if no matching list item was
    found for removal.
    
    The fault injection issued by syzkaller was able to create a situation where
    the closing of a socket runs simultaneously to the notifier call chain for
    removing the CAN network device in use.
    
    This case is very unlikely in real life but it doesn't break anything.
    Therefore we just replace the WARN() statement with pr_warn() to preserve the
    notification for the CAN protocol development.
    
    Reported-by: syzbot+381d06e0c8eaacb8706f@syzkaller.appspotmail.com
    Reported-by: syzbot+d0ddd88c9a7432f041e6@syzkaller.appspotmail.com
    Reported-by: syzbot+76d62d3b8162883c7d11@syzkaller.appspotmail.com
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/r/20201126192140.14350-1-socketcan@hartkopp.net
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc6ca732f4a4dce79abd0fdeb81fc5c20e01fd0a
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Nov 30 08:36:48 2020 +0100

    lib/syscall: fix syscall registers retrieval on 32-bit platforms
    
    commit 4f134b89a24b965991e7c345b9a4591821f7c2a6 upstream.
    
    Lilith >_> and Claudio Bozzato of Cisco Talos security team reported
    that collect_syscall() improperly casts the syscall registers to 64-bit
    values leaking the uninitialized last 24 bytes on 32-bit platforms, that
    are visible in /proc/self/syscall.
    
    The cause is that info->data.args are u64 while syscall_get_arguments()
    uses longs, as hinted by the bogus pointer cast in the function.
    
    Let's just proceed like the other call places, by retrieving the
    registers into an array of longs before assigning them to the caller's
    array.  This was successfully tested on x86_64, i386 and ppc32.
    
    Reference: CVE-2020-28588, TALOS-2020-1211
    Fixes: 631b7abacd02 ("ptrace: Remove maxargs from task_current_syscall()")
    Cc: Greg KH <greg@kroah.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Michael Ellerman <mpe@ellerman.id.au> (ppc32)
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67dc2e5d2ec59da26581b27bacecc02db7b40858
Author: Roman Gushchin <guro@fb.com>
Date:   Sat Dec 5 22:14:45 2020 -0800

    mm: memcg/slab: fix obj_cgroup_charge() return value handling
    
    commit becaba65f62f88e553ec92ed98370e9d2b18e629 upstream.
    
    Commit 10befea91b61 ("mm: memcg/slab: use a single set of kmem_caches
    for all allocations") introduced a regression into the handling of the
    obj_cgroup_charge() return value.  If a non-zero value is returned
    (indicating of exceeding one of memory.max limits), the allocation
    should fail, instead of falling back to non-accounted mode.
    
    To make the code more readable, move memcg_slab_pre_alloc_hook() and
    memcg_slab_post_alloc_hook() calling conditions into bodies of these
    hooks.
    
    Fixes: 10befea91b61 ("mm: memcg/slab: use a single set of kmem_caches for all allocations")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201127161828.GD840171@carbon.dhcp.thefacebook.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc765e0f7c25464e64b62c241c774d88528565c6
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Mon Dec 7 03:19:20 2020 -0600

    iommu/amd: Set DTE[IntTabLen] to represent 512 IRTEs
    
    commit 4165bf015ba9454f45beaad621d16c516d5c5afe upstream.
    
    According to the AMD IOMMU spec, the commit 73db2fc595f3
    ("iommu/amd: Increase interrupt remapping table limit to 512 entries")
    also requires the interrupt table length (IntTabLen) to be set to 9
    (power of 2) in the device table mapping entry (DTE).
    
    Fixes: 73db2fc595f3 ("iommu/amd: Increase interrupt remapping table limit to 512 entries")
    Reported-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Link: https://lore.kernel.org/r/20201207091920.3052-1-suravee.suthikulpanit@amd.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ad9dd490a014372287cfd40abc73423654e2a81
Author: Alex Deucher <alexdeucher@gmail.com>
Date:   Wed Dec 9 10:42:22 2020 -0500

    Revert "amd/amdgpu: Disable VCN DPG mode for Picasso"
    
    This patch should not have been applied to stable.  It depends
    on changes in newer drivers.
    
    This reverts commit 756fec062e4b823bbbe10b95cbcfa84f948131c6.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/1402
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3861ec49e9e0627fc8b82f2fc3dfa16912e768f
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Sat Dec 5 22:15:12 2020 -0800

    hugetlb_cgroup: fix offline of hugetlb cgroup with reservations
    
    commit 7a5bde37983d37783161681ff7c6122dfd081791 upstream.
    
    Adrian Moreno was ruuning a kubernetes 1.19 + containerd/docker workload
    using hugetlbfs.  In this environment the issue is reproduced by:
    
     - Start a simple pod that uses the recently added HugePages medium
       feature (pod yaml attached)
    
     - Start a DPDK app. It doesn't need to run successfully (as in transfer
       packets) nor interact with real hardware. It seems just initializing
       the EAL layer (which handles hugepage reservation and locking) is
       enough to trigger the issue
    
     - Delete the Pod (or let it "Complete").
    
    This would result in a kworker thread going into a tight loop (top output):
    
       1425 root      20   0       0      0      0 R  99.7   0.0   5:22.45 kworker/28:7+cgroup_destroy
    
    'perf top -g' reports:
    
      -   63.28%     0.01%  [kernel]                    [k] worker_thread
         - 49.97% worker_thread
            - 52.64% process_one_work
               - 62.08% css_killed_work_fn
                  - hugetlb_cgroup_css_offline
                       41.52% _raw_spin_lock
                     - 2.82% _cond_resched
                          rcu_all_qs
                       2.66% PageHuge
            - 0.57% schedule
               - 0.57% __schedule
    
    We are spinning in the do-while loop in hugetlb_cgroup_css_offline.
    Worse yet, we are holding the master cgroup lock (cgroup_mutex) while
    infinitely spinning.  Little else can be done on the system as the
    cgroup_mutex can not be acquired.
    
    Do note that the issue can be reproduced by simply offlining a hugetlb
    cgroup containing pages with reservation counts.
    
    The loop in hugetlb_cgroup_css_offline is moving page counts from the
    cgroup being offlined to the parent cgroup.  This is done for each
    hstate, and is repeated until hugetlb_cgroup_have_usage returns false.
    The routine moving counts (hugetlb_cgroup_move_parent) is only moving
    'usage' counts.  The routine hugetlb_cgroup_have_usage is checking for
    both 'usage' and 'reservation' counts.  Discussion about what to do with
    reservation counts when reparenting was discussed here:
    
    https://lore.kernel.org/linux-kselftest/CAHS8izMFAYTgxym-Hzb_JmkTK1N_S9tGN71uS6MFV+R7swYu5A@mail.gmail.com/
    
    The decision was made to leave a zombie cgroup for with reservation
    counts.  Unfortunately, the code checking reservation counts was
    incorrectly added to hugetlb_cgroup_have_usage.
    
    To fix the issue, simply remove the check for reservation counts.  While
    fixing this issue, a related bug in hugetlb_cgroup_css_offline was
    noticed.  The hstate index is not reinitialized each time through the
    do-while loop.  Fix this as well.
    
    Fixes: 1adc4d419aa2 ("hugetlb_cgroup: add interface for charge/uncharge hugetlb reservations")
    Reported-by: Adrian Moreno <amorenoz@redhat.com>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Adrian Moreno <amorenoz@redhat.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Mina Almasry <almasrymina@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: Sandipan Das <sandipan@linux.ibm.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201203220242.158165-1-mike.kravetz@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 406572286ff504147e902f937db325873a3b3fa2
Author: Qian Cai <qcai@redhat.com>
Date:   Sat Dec 5 22:14:55 2020 -0800

    mm/swapfile: do not sleep with a spin lock held
    
    commit b11a76b37a5aa7b07c3e3eeeaae20b25475bddd3 upstream.
    
    We can't call kvfree() with a spin lock held, so defer it.  Fixes a
    might_sleep() runtime warning.
    
    Fixes: 873d7bcfd066 ("mm/swapfile.c: use kvzalloc for swap_info_struct allocation")
    Signed-off-by: Qian Cai <qcai@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201202151549.10350-1-qcai@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c07e0a85d52076a485e3ee6e485db3f1863dfd5b
Author: Yang Shi <shy828301@gmail.com>
Date:   Sat Dec 5 22:14:48 2020 -0800

    mm: list_lru: set shrinker map bit when child nr_items is not zero
    
    commit 8199be001a470209f5c938570cc199abb012fe53 upstream.
    
    When investigating a slab cache bloat problem, significant amount of
    negative dentry cache was seen, but confusingly they neither got shrunk
    by reclaimer (the host has very tight memory) nor be shrunk by dropping
    cache.  The vmcore shows there are over 14M negative dentry objects on
    lru, but tracing result shows they were even not scanned at all.
    
    Further investigation shows the memcg's vfs shrinker_map bit is not set.
    So the reclaimer or dropping cache just skip calling vfs shrinker.  So
    we have to reboot the hosts to get the memory back.
    
    I didn't manage to come up with a reproducer in test environment, and
    the problem can't be reproduced after rebooting.  But it seems there is
    race between shrinker map bit clear and reparenting by code inspection.
    The hypothesis is elaborated as below.
    
    The memcg hierarchy on our production environment looks like:
    
                    root
                   /    \
              system   user
    
    The main workloads are running under user slice's children, and it
    creates and removes memcg frequently.  So reparenting happens very often
    under user slice, but no task is under user slice directly.
    
    So with the frequent reparenting and tight memory pressure, the below
    hypothetical race condition may happen:
    
           CPU A                            CPU B
    reparent
        dst->nr_items == 0
                                     shrinker:
                                         total_objects == 0
        add src->nr_items to dst
        set_bit
                                         return SHRINK_EMPTY
                                         clear_bit
    child memcg offline
        replace child's kmemcg_id with
        parent's (in memcg_offline_kmem())
                                      list_lru_del() between shrinker runs
                                         see parent's kmemcg_id
                                         dec dst->nr_items
    reparent again
        dst->nr_items may go negative
        due to concurrent list_lru_del()
    
                                     The second run of shrinker:
                                         read nr_items without any
                                         synchronization, so it may
                                         see intermediate negative
                                         nr_items then total_objects
                                         may return 0 coincidently
    
                                         keep the bit cleared
        dst->nr_items != 0
        skip set_bit
        add scr->nr_item to dst
    
    After this point dst->nr_item may never go zero, so reparenting will not
    set shrinker_map bit anymore.  And since there is no task under user
    slice directly, so no new object will be added to its lru to set the
    shrinker map bit either.  That bit is kept cleared forever.
    
    How does list_lru_del() race with reparenting? It is because reparenting
    replaces children's kmemcg_id to parent's without protecting from
    nlru->lock, so list_lru_del() may see parent's kmemcg_id but actually
    deleting items from child's lru, but dec'ing parent's nr_items, so the
    parent's nr_items may go negative as commit 2788cf0c401c ("memcg:
    reparent list_lrus and free kmemcg_id on css offline") says.
    
    Since it is impossible that dst->nr_items goes negative and
    src->nr_items goes zero at the same time, so it seems we could set the
    shrinker map bit iff src->nr_items != 0.  We could synchronize
    list_lru_count_one() and reparenting with nlru->lock, but it seems
    checking src->nr_items in reparenting is the simplest and avoids lock
    contention.
    
    Fixes: fae91d6d8be5 ("mm/list_lru.c: set bit in memcg shrinker bitmap on first list_lru item appearance")
    Suggested-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Yang Shi <shy828301@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.19]
    Link: https://lkml.kernel.org/r/20201202171749.264354-1-shy828301@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4140456090f833dfc663ff08e92211f46b4c2c1a
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Sat Dec 5 22:14:42 2020 -0800

    coredump: fix core_pattern parse error
    
    commit 2bf509d96d84c3336d08375e8af34d1b85ee71c8 upstream.
    
    'format_corename()' will splite 'core_pattern' on spaces when it is in
    pipe mode, and take helper_argv[0] as the path to usermode executable.
    It works fine in most cases.
    
    However, if there is a space between '|' and '/file/path', such as
    '| /usr/lib/systemd/systemd-coredump %P %u %g', then helper_argv[0] will
    be parsed as '', and users will get a 'Core dump to | disabled'.
    
    It is not friendly to users, as the pattern above was valid previously.
    Fix this by ignoring the spaces between '|' and '/file/path'.
    
    Fixes: 315c69261dd3 ("coredump: split pipe command whitespace before expanding template")
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Paul Wise <pabs3@bonedaddy.net>
    Cc: Jakub Wilk <jwilk@jwilk.net> [https://bugs.debian.org/924398]
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/5fb62870.1c69fb81.8ef5d.af76@mx.google.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5655e4c9c96aaa469cdcc0747cbcc11bc78d339d
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Dec 3 13:50:37 2020 +0900

    x86/uprobes: Do not use prefixes.nbytes when looping over prefixes.bytes
    
    commit 4e9a5ae8df5b3365183150f6df49e49dece80d8c upstream.
    
    Since insn.prefixes.nbytes can be bigger than the size of
    insn.prefixes.bytes[] when a prefix is repeated, the proper check must
    be
    
      insn.prefixes.bytes[i] != 0 and i < 4
    
    instead of using insn.prefixes.nbytes.
    
    Introduce a for_each_insn_prefix() macro for this purpose. Debugged by
    Kees Cook <keescook@chromium.org>.
    
     [ bp: Massage commit message, sync with the respective header in tools/
       and drop "we". ]
    
    Fixes: 2b1444983508 ("uprobes, mm, x86: Add the ability to install and remove uprobes breakpoints")
    Reported-by: syzbot+9b64b619f10f19d19a7c@syzkaller.appspotmail.com
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/160697103739.3146288.7437620795200799020.stgit@devnote2
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 422e24487fceacc9cd961c39f93e74bbfd6dce05
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Dec 4 15:25:18 2020 -0500

    dm: remove invalid sparse __acquires and __releases annotations
    
    commit bde3808bc8c2741ad3d804f84720409aee0c2972 upstream.
    
    Fixes sparse warnings:
    drivers/md/dm.c:508:12: warning: context imbalance in 'dm_prepare_ioctl' - wrong count at exit
    drivers/md/dm.c:543:13: warning: context imbalance in 'dm_unprepare_ioctl' - wrong count at exit
    
    Fixes: 971888c46993f ("dm: hold DM table for duration of ioctl rather than use blkdev_get")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f602268285452217da920fffc7040d7cf274181
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Dec 4 15:19:27 2020 -0500

    dm: fix double RCU unlock in dm_dax_zero_page_range() error path
    
    commit f05c4403db5bba881d4964e731f6da35be46aabd upstream.
    
    Remove redundant dm_put_live_table() in dm_dax_zero_page_range() error
    path to fix sparse warning:
    drivers/md/dm.c:1208:9: warning: context imbalance in 'dm_dax_zero_page_range' - unexpected unlock
    
    Fixes: cdf6cdcd3b99a ("dm,dax: Add dax zero_page_range operation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f0612de7662fdd25f8de546b95e567ecceba175
Author: Sergei Shtepa <sergei.shtepa@veeam.com>
Date:   Wed Nov 11 15:55:46 2020 +0300

    dm: fix bug with RCU locking in dm_blk_report_zones
    
    commit 89478335718c98557f10470a9bc5c555b9261c4e upstream.
    
    The dm_get_live_table() function makes RCU read lock so
    dm_put_live_table() must be called even if dm_table map is not found.
    
    Fixes: e76239a3748c9 ("block: add a report_zones method")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sergei Shtepa <sergei.shtepa@veeam.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 732630a290d2c0f20c9c117d1b60fd2fade3b7b7
Author: Laurent Vivier <lvivier@redhat.com>
Date:   Thu Nov 26 09:28:52 2020 +0100

    powerpc/pseries: Pass MSI affinity to irq_create_mapping()
    
    commit 9ea69a55b3b9a71cded9726af591949c1138f235 upstream.
    
    With virtio multiqueue, normally each queue IRQ is mapped to a CPU.
    
    Commit 0d9f0a52c8b9f ("virtio_scsi: use virtio IRQ affinity") exposed
    an existing shortcoming of the arch code by moving virtio_scsi to
    the automatic IRQ affinity assignment.
    
    The affinity is correctly computed in msi_desc but this is not applied
    to the system IRQs.
    
    It appears the affinity is correctly passed to rtas_setup_msi_irqs() but
    lost at this point and never passed to irq_domain_alloc_descs()
    (see commit 06ee6d571f0e ("genirq: Add affinity hint to irq allocation"))
    because irq_create_mapping() doesn't take an affinity parameter.
    
    Use the new irq_create_mapping_affinity() function, which allows to forward
    the affinity setting from rtas_setup_msi_irqs() to irq_domain_alloc_descs().
    
    With this change, the virtqueues are correctly dispatched between the CPUs
    on pseries.
    
    Fixes: e75eafb9b039 ("genirq/msi: Switch to new irq spreading infrastructure")
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201126082852.1178497-3-lvivier@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b732e2c47f5925538917a34aff5ca7d120100a68
Author: Laurent Vivier <lvivier@redhat.com>
Date:   Thu Nov 26 09:28:51 2020 +0100

    genirq/irqdomain: Add an irq_create_mapping_affinity() function
    
    commit bb4c6910c8b41623104c2e64a30615682689a54d upstream.
    
    There is currently no way to convey the affinity of an interrupt
    via irq_create_mapping(), which creates issues for devices that
    expect that affinity to be managed by the kernel.
    
    In order to sort this out, rename irq_create_mapping() to
    irq_create_mapping_affinity() with an additional affinity parameter that
    can be passed down to irq_domain_alloc_descs().
    
    irq_create_mapping() is re-implemented as a wrapper around
    irq_create_mapping_affinity().
    
    No functional change.
    
    Fixes: e75eafb9b039 ("genirq/msi: Switch to new irq spreading infrastructure")
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201126082852.1178497-2-lvivier@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64316364fdaa5a447340ffe6f39b861826f8412e
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Sat Nov 28 17:07:21 2020 +1000

    powerpc/64s/powernv: Fix memory corruption when saving SLB entries on MCE
    
    commit a1ee28117077c3bf24e5ab6324c835eaab629c45 upstream.
    
    This can be hit by an HPT guest running on an HPT host and bring down
    the host, so it's quite important to fix.
    
    Fixes: 7290f3b3d3e6 ("powerpc/64s/powernv: machine check dump SLB contents")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201128070728.825934-2-npiggin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05b9eff050a5d12efa932ca2d7782abe866f8386
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Nov 10 07:45:13 2020 -0500

    dm writecache: fix the maximum number of arguments
    
    commit 67aa3ec3dbc43d6e34401d9b2a40040ff7bb57af upstream.
    
    Advance the maximum number of arguments to 16.
    This fixes issue where certain operations, combined with table
    configured args, exceed 10 arguments.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Cc: stable@vger.kernel.org # v4.18+
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b86b92f62480ef244bcb5a40f7a5c7e1021c549
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Nov 10 07:44:01 2020 -0500

    dm writecache: advance the number of arguments when reporting max_age
    
    commit e5d41cbca1b2036362c9e29d705d3a175a01eff8 upstream.
    
    When reporting the "max_age" value the number of arguments must
    advance by two.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Fixes: 3923d4854e18 ("dm writecache: implement gradual cleanup")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56306143ef9a4d07f92511a5ac81bbbc8b5c1cae
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Sun Nov 29 18:33:32 2020 +0000

    io_uring: fix recvmsg setup with compat buf-select
    
    commit 2d280bc8930ba9ed1705cfd548c6c8924949eaf1 upstream.
    
    __io_compat_recvmsg_copy_hdr() with REQ_F_BUFFER_SELECT reads out iov
    len but never assigns it to iov/fast_iov, leaving sr->len with garbage.
    Hopefully, following io_buffer_select() truncates it to the selected
    buffer size, but the value is still may be under what was specified.
    
    Cc: <stable@vger.kernel.org> # 5.7
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0d09be5a87f7b8662094be764d42da0d3f5876b
Author: Suganath Prabu S <suganath-prabu.subramani@broadcom.com>
Date:   Wed Nov 25 15:18:38 2020 +0530

    scsi: mpt3sas: Fix ioctl timeout
    
    commit 42f687038bcc34aa919e0e4c29b04e4cda3f6a79 upstream.
    
    Commit c1a6c5ac4278 ("scsi: mpt3sas: For NVME device, issue a protocol
    level reset") modified the ioctl path 'timeout' variable type to u8 from
    unsigned long, limiting the maximum timeout value that the driver can
    support to 255 seconds.
    
    If the management application is requesting a higher value the resulting
    timeout will be zero. The operation times out immediately and the ioctl
    request fails.
    
    Change datatype back to unsigned long.
    
    Link: https://lore.kernel.org/r/20201125094838.4340-1-suganath-prabu.subramani@broadcom.com
    Fixes: c1a6c5ac4278 ("scsi: mpt3sas: For NVME device, issue a protocol level reset")
    Cc: <stable@vger.kernel.org> #v4.18+
    Signed-off-by: Suganath Prabu S <suganath-prabu.subramani@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baaa49f71e26b82ca8752d63ab274a790b90de47
Author: Greg Kurz <groug@kaod.org>
Date:   Mon Nov 30 13:19:27 2020 +0100

    KVM: PPC: Book3S HV: XIVE: Fix vCPU id sanity check
    
    commit f54db39fbe40731c40aefdd3bc26e7d56d668c64 upstream.
    
    Commit 062cfab7069f ("KVM: PPC: Book3S HV: XIVE: Make VP block size
    configurable") updated kvmppc_xive_vcpu_id_valid() in a way that
    allows userspace to trigger an assertion in skiboot and crash the host:
    
    [  696.186248988,3] XIVE[ IC 08  ] eq_blk != vp_blk (0 vs. 1) for target 0x4300008c/0
    [  696.186314757,0] Assert fail: hw/xive.c:2370:0
    [  696.186342458,0] Aborting!
    xive-kvCPU 0043 Backtrace:
     S: 0000000031e2b8f0 R: 0000000030013840   .backtrace+0x48
     S: 0000000031e2b990 R: 000000003001b2d0   ._abort+0x4c
     S: 0000000031e2ba10 R: 000000003001b34c   .assert_fail+0x34
     S: 0000000031e2ba90 R: 0000000030058984   .xive_eq_for_target.part.20+0xb0
     S: 0000000031e2bb40 R: 0000000030059fdc   .xive_setup_silent_gather+0x2c
     S: 0000000031e2bc20 R: 000000003005a334   .opal_xive_set_vp_info+0x124
     S: 0000000031e2bd20 R: 00000000300051a4   opal_entry+0x134
     --- OPAL call token: 0x8a caller R1: 0xc000001f28563850 ---
    
    XIVE maintains the interrupt context state of non-dispatched vCPUs in
    an internal VP structure. We allocate a bunch of those on startup to
    accommodate all possible vCPUs. Each VP has an id, that we derive from
    the vCPU id for efficiency:
    
    static inline u32 kvmppc_xive_vp(struct kvmppc_xive *xive, u32 server)
    {
            return xive->vp_base + kvmppc_pack_vcpu_id(xive->kvm, server);
    }
    
    The KVM XIVE device used to allocate KVM_MAX_VCPUS VPs. This was
    limitting the number of concurrent VMs because the VP space is
    limited on the HW. Since most of the time, VMs run with a lot less
    vCPUs, commit 062cfab7069f ("KVM: PPC: Book3S HV: XIVE: Make VP
    block size configurable") gave the possibility for userspace to
    tune the size of the VP block through the KVM_DEV_XIVE_NR_SERVERS
    attribute.
    
    The check in kvmppc_pack_vcpu_id() was changed from
    
            cpu < KVM_MAX_VCPUS * xive->kvm->arch.emul_smt_mode
    
    to
    
            cpu < xive->nr_servers * xive->kvm->arch.emul_smt_mode
    
    The previous check was based on the fact that the VP block had
    KVM_MAX_VCPUS entries and that kvmppc_pack_vcpu_id() guarantees
    that packed vCPU ids are below KVM_MAX_VCPUS. We've changed the
    size of the VP block, but kvmppc_pack_vcpu_id() has nothing to
    do with it and it certainly doesn't ensure that the packed vCPU
    ids are below xive->nr_servers. kvmppc_xive_vcpu_id_valid() might
    thus return true when the VM was configured with a non-standard
    VSMT mode, even if the packed vCPU id is higher than what we
    expect. We end up using an unallocated VP id, which confuses
    OPAL. The assert in OPAL is probably abusive and should be
    converted to a regular error that the kernel can handle, but
    we shouldn't really use broken VP ids in the first place.
    
    Fix kvmppc_xive_vcpu_id_valid() so that it checks the packed
    vCPU id is below xive->nr_servers, which is explicitly what we
    want.
    
    Fixes: 062cfab7069f ("KVM: PPC: Book3S HV: XIVE: Make VP block size configurable")
    Cc: stable@vger.kernel.org # v5.5+
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/160673876747.695514.1809676603724514920.stgit@bahia.lan
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a587d49dccbb72e77a59ff0d25a41f4d5c8c63e
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Nov 26 14:08:41 2020 +0000

    drm/i915/gt: Program mocs:63 for cache eviction on gen9
    
    commit 777a7717d60ccdc9b84f35074f848d3f746fc3bf upstream.
    
    Ville noticed that the last mocs entry is used unconditionally by the HW
    when it performs cache evictions, and noted that while the value is not
    meant to be writable by the driver, we should program it to a reasonable
    value nevertheless.
    
    As it turns out, we can change the value of mocs:63 and the value we
    were programming into it would cause hard hangs in conjunction with
    atomic operations.
    
    v2: Add details from bspec about how it is used by HW
    
    Suggested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/2707
    Fixes: 3bbaba0ceaa2 ("drm/i915: Added Programming of the MOCS")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Jason Ekstrand <jason@jlekstrand.net>
    Cc: <stable@vger.kernel.org> # v4.3+
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201126140841.1982-1-chris@chris-wilson.co.uk
    (cherry picked from commit 977933b5da7c16f39295c4c1d4259a58ece65dbe)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cbaf4a8d36ac82985b68b47fcdb56a294901941
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Nov 24 18:35:21 2020 +0000

    drm/i915/gt: Limit frequency drop to RPe on parking
    
    commit aff76ab795364569b1cac58c1d0bc7df956e3899 upstream.
    
    We treat idling the GT (intel_rps_park) as a downclock event, and reduce
    the frequency we intend to restart the GT with. Since the two workloads
    are likely related (e.g. a compositor rendering every 16ms), we want to
    carry the frequency and load information from across the idling.
    However, we do also need to update the frequencies so that workloads
    that run for less than 1ms are autotuned by RPS (otherwise we leave
    compositors running at max clocks, draining excess power). Conversely,
    if we try to run too slowly, the next workload has to run longer. Since
    there is a hysteresis in the power graph, below a certain frequency
    running a short workload for longer consumes more energy than running it
    slightly higher for less time. The exact balance point is unknown
    beforehand, but measurements with 30fps media playback indicate that RPe
    is a better choice.
    
    Reported-by: Edward Baker <edward.baker@intel.com>
    Tested-by: Edward Baker <edward.baker@intel.com>
    Fixes: 043cd2d14ede ("drm/i915/gt: Leave rps->cur_freq on unpark")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Edward Baker <edward.baker@intel.com>
    Cc: Andi Shyti <andi.shyti@intel.com>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: <stable@vger.kernel.org> # v5.8+
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201124183521.28623-1-chris@chris-wilson.co.uk
    (cherry picked from commit f7ed83cc1925f0b8ce2515044d674354035c3af9)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32340631263cee18f6ae4a05eb6970542359e21a
Author: Venkata Ramana Nayana <venkata.ramana.nayana@intel.com>
Date:   Fri Nov 27 12:07:16 2020 +0000

    drm/i915/gt: Retain default context state across shrinking
    
    commit 78b2eb8a1f10f366681acad8d21c974c1f66791a upstream.
    
    As we use a shmemfs file to hold the context state, when not in use it
    may be swapped out, such as across suspend. Since we wrote into the
    shmemfs without marking the pages as dirty, the contents may be dropped
    instead of being written back to swap. On re-using the shmemfs file,
    such as creating a new context after resume, the contents of that file
    were likely garbage and so the new context could then hang the GPU.
    
    Simply mark the page as being written when copying into the shmemfs
    file, and it the new contents will be retained across swapout.
    
    Fixes: be1cb55a07bf ("drm/i915/gt: Keep a no-frills swappable copy of the default context state")
    Cc: Sudeep Dutt <sudeep.dutt@intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Ramalingam C <ramalingam.c@intel.com>
    Signed-off-by: CQ Tang <cq.tang@intel.com>
    Signed-off-by: Venkata Ramana Nayana <venkata.ramana.nayana@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: <stable@vger.kernel.org> # v5.8+
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127120718.454037-161-matthew.auld@intel.com
    (cherry picked from commit a9d71f76ccfd309f3bd5f7c9b60e91a4decae792)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c725702528bb3627ff1f3c44b10d4c79cbfa1d9b
Author: Boyuan Zhang <boyuan.zhang@amd.com>
Date:   Tue May 19 11:38:44 2020 -0400

    drm/amdgpu/vcn3.0: remove old DPG workaround
    
    commit efd6d85a18102241538dd1cc257948a0dbe6fae6 upstream.
    
    Port from VCN2.5
    SCRATCH2 is used to keep decode wptr as a workaround
    which fix a hardware DPG decode wptr update bug for
    vcn2.5 beforehand.
    
    Signed-off-by: Boyuan Zhang <boyuan.zhang@amd.com>
    Reviewed-by: James Zhu <James.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.9.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2731a93ad16204e890f52c6a773b526550e097a
Author: Boyuan Zhang <boyuan.zhang@amd.com>
Date:   Sun May 10 15:47:03 2020 -0400

    drm/amdgpu/vcn3.0: stall DPG when WPTR/RPTR reset
    
    commit ac2db9488cf21de0be7899c1e5963e5ac0ff351f upstream.
    
    Port from VCN2.5
    Add vcn dpg harware synchronization to fix race condition
    issue between vcn driver and hardware.
    
    Signed-off-by: Boyuan Zhang <boyuan.zhang@amd.com>
    Reviewed-by: James Zhu <James.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.9.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4560a448cb414b9f757c4900810d9c60d9f80cca
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Fri Nov 27 10:52:41 2020 +0200

    drm/omap: sdi: fix bridge enable/disable
    
    commit fd4e788e971ce763e50762d7b1a0048992949dd0 upstream.
    
    When the SDI output was converted to DRM bridge, the atomic versions of
    enable and disable funcs were used. This was not intended, as that would
    require implementing other atomic funcs too. This leads to:
    
    WARNING: CPU: 0 PID: 18 at drivers/gpu/drm/drm_bridge.c:708 drm_atomic_helper_commit_modeset_enables+0x134/0x268
    
    and display not working.
    
    Fix this by using the legacy enable/disable funcs.
    
    Fixes: 8bef8a6d5da81b909a190822b96805a47348146f ("drm/omap: sdi: Register a drm_bridge")
    Reported-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Tested-by: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Tested-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: stable@vger.kernel.org # v5.7+
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127085241.848461-1-tomi.valkeinen@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44de69467e37a94f574ce9025b490f164a1fb4f0
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Nov 18 13:08:21 2020 +0200

    thunderbolt: Fix use-after-free in remove_unplugged_switch()
    
    commit 600c0849cf86b75d86352f59745226273290986a upstream.
    
    Paulian reported a crash that happens when a dock is unplugged during
    hibernation:
    
    [78436.228217] thunderbolt 0-1: device disconnected
    [78436.228365] BUG: kernel NULL pointer dereference, address: 00000000000001e0
    ...
    [78436.228397] RIP: 0010:icm_free_unplugged_children+0x109/0x1a0
    ...
    [78436.228432] Call Trace:
    [78436.228439]  icm_rescan_work+0x24/0x30
    [78436.228444]  process_one_work+0x1a3/0x3a0
    [78436.228449]  worker_thread+0x30/0x370
    [78436.228454]  ? process_one_work+0x3a0/0x3a0
    [78436.228457]  kthread+0x13d/0x160
    [78436.228461]  ? kthread_park+0x90/0x90
    [78436.228465]  ret_from_fork+0x1f/0x30
    
    This happens because remove_unplugged_switch() calls tb_switch_remove()
    that releases the memory pointed by sw so the following lines reference
    to a memory that might be released already.
    
    Fix this by saving pointer to the parent device before calling
    tb_switch_remove().
    
    Reported-by: Paulian Bogdan Marinca <paulian@marinca.net>
    Fixes: 4f7c2e0d8765 ("thunderbolt: Make sure device runtime resume completes before taking domain lock")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f05f0db4db8bec05f4fa09d97870774f837ee9fe
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Dec 4 16:36:16 2020 -0500

    tracing: Fix userstacktrace option for instances
    
    commit bcee5278958802b40ee8b26679155a6d9231783e upstream.
    
    When the instances were able to use their own options, the userstacktrace
    option was left hardcoded for the top level. This made the instance
    userstacktrace option bascially into a nop, and will confuse users that set
    it, but nothing happens (I was confused when it happened to me!)
    
    Cc: stable@vger.kernel.org
    Fixes: 16270145ce6b ("tracing: Add trace options for core options to instances")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da4d792e74cecbee9c2e6f1a2db3dfd6849f6d45
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:20 2020 +0200

    i2c: imx: Don't generate STOP condition if arbitration has been lost
    
    commit 61e6fe59ede155881a622f5901551b1cc8748f6a upstream.
    
    If arbitration is lost, the master automatically changes to slave mode.
    I2SR_IBB may or may not be reset by hardware. Raising a STOP condition
    by resetting I2CR_MSTA has no effect and will not clear I2SR_IBB.
    
    So calling i2c_imx_bus_busy() is not required and would busy-wait until
    timeout.
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Tested (not extensively) on Vybrid VF500 (Toradex VF50):
    Tested-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org # Requires trivial backporting, simple remove
                               # the 3rd argument from the calls to
                               # i2c_imx_bus_busy().
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e385ea09b2e801cef1509e06bc691597aac80a99
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:19 2020 +0200

    i2c: imx: Check for I2SR_IAL after every byte
    
    commit 1de67a3dee7a279ebe4d892b359fe3696938ec15 upstream.
    
    Arbitration Lost (IAL) can happen after every single byte transfer. If
    arbitration is lost, the I2C hardware will autonomously switch from
    master mode to slave. If a transfer is not aborted in this state,
    consecutive transfers will not be executed by the hardware and will
    timeout.
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Tested (not extensively) on Vybrid VF500 (Toradex VF50):
    Tested-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12b2af654bac6ee44c751ee4fcb28cfd78e22ccb
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:18 2020 +0200

    i2c: imx: Fix reset of I2SR_IAL flag
    
    commit 384a9565f70a876c2e78e58c5ca0bbf0547e4f6d upstream.
    
    According to the "VFxxx Controller Reference Manual" (and the comment
    block starting at line 97), Vybrid requires writing a one for clearing
    an interrupt flag. Syncing the method for clearing I2SR_IIF in
    i2c_imx_isr().
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Fixes: 4b775022f6fd ("i2c: imx: add struct to hold more configurable quirks")
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f39e9137072f6bf539437add7364f7615a772e
Author: Alexander Gordeev <agordeev@linux.ibm.com>
Date:   Thu Nov 26 18:00:37 2020 +0100

    s390/pci: fix CPU address in MSI for directed IRQ
    
    commit a2bd4097b3ec242f4de4924db463a9c94530e03a upstream.
    
    The directed MSIs are delivered to CPUs whose address is
    written to the MSI message address. The current code assumes
    that a CPU logical number (as it is seen by the kernel)
    is also the CPU address.
    
    The above assumption is not correct, as the CPU address
    is rather the value returned by STAP instruction. That
    value does not necessarily match the kernel logical CPU
    number.
    
    Fixes: e979ce7bced2 ("s390/pci: provide support for CPU directed interrupts")
    Cc: <stable@vger.kernel.org> # v5.2+
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 651b1f3cee421367ca3827cdf50d364cbb10bad0
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Mon Nov 30 16:07:25 2020 +0100

    gfs2: Fix deadlock between gfs2_{create_inode,inode_lookup} and delete_work_func
    
    commit dd0ecf544125639e54056d851e4887dbb94b6d2f upstream.
    
    In gfs2_create_inode and gfs2_inode_lookup, make sure to cancel any pending
    delete work before taking the inode glock.  Otherwise, gfs2_cancel_delete_work
    may block waiting for delete_work_func to complete, and delete_work_func may
    block trying to acquire the inode glock in gfs2_inode_lookup.
    
    Reported-by: Alexander Aring <aahringo@redhat.com>
    Fixes: a0e3cc65fa29 ("gfs2: Turn gl_delete into a delayed work")
    Cc: stable@vger.kernel.org # v5.8+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a208228d2796abb1c38d7cecb7fd485107d751d
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Wed Nov 25 23:37:18 2020 +0100

    gfs2: Upgrade shared glocks for atime updates
    
    commit 82e938bd5382b322ce81e6cb8fd030987f2da022 upstream.
    
    Commit 20f829999c38 ("gfs2: Rework read and page fault locking") lifted
    the glock lock taking from the low-level ->readpage and ->readahead
    address space operations to the higher-level ->read_iter file and
    ->fault vm operations.  The glocks are still taken in LM_ST_SHARED mode
    only.  On filesystems mounted without the noatime option, ->read_iter
    sometimes needs to update the atime as well, though.  Right now, this
    leads to a failed locking mode assertion in gfs2_dirty_inode.
    
    Fix that by introducing a new update_time inode operation.  There, if
    the glock is held non-exclusively, upgrade it to an exclusive lock.
    
    Reported-by: Alexander Aring <aahringo@redhat.com>
    Fixes: 20f829999c38 ("gfs2: Rework read and page fault locking")
    Cc: stable@vger.kernel.org # v5.8+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ab2621b2ff6766ece20140aeb1da13175107e0a
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Thu Dec 3 19:46:08 2020 +0100

    cifs: add NULL check for ses->tcon_ipc
    
    commit 59463eb88829f646aed13283fd84d02a475334fe upstream.
    
    In some scenarios (DFS and BAD_NETWORK_NAME) set_root_set() can be
    called with a NULL ses->tcon_ipc.
    
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21ba03ff5aee160f66f7a595c2e99e4f23a20243
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Mon Nov 30 11:29:20 2020 +1000

    cifs: refactor create_sd_buf() and and avoid corrupting the buffer
    
    commit ea64370bcae126a88cd26a16f1abcc23ab2b9a55 upstream.
    
    When mounting with "idsfromsid" mount option, Azure
    corrupted the owner SIDs due to excessive padding
    caused by placing the owner fields at the end of the
    security descriptor on create.  Placing owners at the
    front of the security descriptor (rather than the end)
    is also safer, as the number of ACEs (that follow it)
    are variable.
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Suggested-by: Rohith Surabattula <rohiths@microsoft.com>
    CC: Stable <stable@vger.kernel.org> # v5.8
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08a257a3ff0c3947b5d8de06588a148d2ec2bcc2
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sat Nov 28 16:54:02 2020 -0300

    cifs: fix potential use-after-free in cifs_echo_request()
    
    commit 212253367dc7b49ed3fc194ce71b0992eacaecf2 upstream.
    
    This patch fixes a potential use-after-free bug in
    cifs_echo_request().
    
    For instance,
    
      thread 1
      --------
      cifs_demultiplex_thread()
        clean_demultiplex_info()
          kfree(server)
    
      thread 2 (workqueue)
      --------
      apic_timer_interrupt()
        smp_apic_timer_interrupt()
          irq_exit()
            __do_softirq()
              run_timer_softirq()
                call_timer_fn()
                  cifs_echo_request() <- use-after-free in server ptr
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60729f2188ec6df45461451a4cf5a109d2cc1173
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sat Nov 28 15:57:06 2020 -0300

    cifs: allow syscalls to be restarted in __smb_send_rqst()
    
    commit 6988a619f5b79e4efadea6e19dcfe75fbcd350b5 upstream.
    
    A customer has reported that several files in their multi-threaded app
    were left with size of 0 because most of the read(2) calls returned
    -EINTR and they assumed no bytes were read.  Obviously, they could
    have fixed it by simply retrying on -EINTR.
    
    We noticed that most of the -EINTR on read(2) were due to real-time
    signals sent by glibc to process wide credential changes (SIGRT_1),
    and its signal handler had been established with SA_RESTART, in which
    case those calls could have been automatically restarted by the
    kernel.
    
    Let the kernel decide to whether or not restart the syscalls when
    there is a signal pending in __smb_send_rqst() by returning
    -ERESTARTSYS.  If it can't, it will return -EINTR anyway.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd6bd84b19ac9d9cfd3c48eb8425f1dfabbb607a
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Nov 26 23:38:39 2020 +0530

    ftrace: Fix DYNAMIC_FTRACE_WITH_DIRECT_CALLS dependency
    
    commit 49a962c075dfa41c78e34784772329bc8784d217 upstream.
    
    DYNAMIC_FTRACE_WITH_DIRECT_CALLS should depend on
    DYNAMIC_FTRACE_WITH_REGS since we need ftrace_regs_caller().
    
    Link: https://lkml.kernel.org/r/fc4b257ea8689a36f086d2389a9ed989496ca63a.1606412433.git.naveen.n.rao@linux.vnet.ibm.com
    
    Cc: stable@vger.kernel.org
    Fixes: 763e34e74bb7d5c ("ftrace: Add register_ftrace_direct()")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 009b4bd377a92c32ef76223a15727037af3ded9c
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Nov 26 23:38:38 2020 +0530

    ftrace: Fix updating FTRACE_FL_TRAMP
    
    commit 4c75b0ff4e4bf7a45b5aef9639799719c28d0073 upstream.
    
    On powerpc, kprobe-direct.tc triggered FTRACE_WARN_ON() in
    ftrace_get_addr_new() followed by the below message:
      Bad trampoline accounting at: 000000004222522f (wake_up_process+0xc/0x20) (f0000001)
    
    The set of steps leading to this involved:
    - modprobe ftrace-direct-too
    - enable_probe
    - modprobe ftrace-direct
    - rmmod ftrace-direct <-- trigger
    
    The problem turned out to be that we were not updating flags in the
    ftrace record properly. From the above message about the trampoline
    accounting being bad, it can be seen that the ftrace record still has
    FTRACE_FL_TRAMP set though ftrace-direct module is going away. This
    happens because we are checking if any ftrace_ops has the
    FTRACE_FL_TRAMP flag set _before_ updating the filter hash.
    
    The fix for this is to look for any _other_ ftrace_ops that also needs
    FTRACE_FL_TRAMP.
    
    Link: https://lkml.kernel.org/r/56c113aa9c3e10c19144a36d9684c7882bf09af5.1606412433.git.naveen.n.rao@linux.vnet.ibm.com
    
    Cc: stable@vger.kernel.org
    Fixes: a124692b698b0 ("ftrace: Enable trampoline when rec count returns back to one")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b158d047fe6b7f3ccca36fc077ea653da527dca
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Nov 30 23:16:03 2020 -0500

    ring-buffer: Always check to put back before stamp when crossing pages
    
    commit 68e10d5ff512b503dcba1246ad5620f32035e135 upstream.
    
    The current ring buffer logic checks to see if the updating of the event
    buffer was interrupted, and if it is, it will try to fix up the before stamp
    with the write stamp to make them equal again. This logic is flawed, because
    if it is not interrupted, the two are guaranteed to be different, as the
    current event just updated the before stamp before allocation. This
    guarantees that the next event (this one or another interrupting one) will
    think it interrupted the time updates of a previous event and inject an
    absolute time stamp to compensate.
    
    The correct logic is to always update the timestamps when traversing to a
    new sub buffer.
    
    Cc: stable@vger.kernel.org
    Fixes: a389d86f7fd09 ("ring-buffer: Have nested events still record running time stamp")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68e17e0b384c1cf6355591fcc2d1be003fc31a86
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Sat Nov 28 10:15:17 2020 +0100

    ring-buffer: Set the right timestamp in the slow path of __rb_reserve_next()
    
    commit 8785f51a17083eee7c37606079c6447afc6ba102 upstream.
    
    In the slow path of __rb_reserve_next() a nested event(s) can happen
    between evaluating the timestamp delta of the current event and updating
    write_stamp via local_cmpxchg(); in this case the delta is not valid
    anymore and it should be set to 0 (same timestamp as the interrupting
    event), since the event that we are currently processing is not the last
    event in the buffer.
    
    Link: https://lkml.kernel.org/r/X8IVJcp1gRE+FJCJ@xps-13-7390
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lwn.net/Articles/831207
    Fixes: a389d86f7fd0 ("ring-buffer: Have nested events still record running time stamp")
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd3a46f25bb4ffc1f80fe1925a031a82982aeb14
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Nov 27 11:20:58 2020 -0500

    ring-buffer: Update write stamp with the correct ts
    
    commit 55ea4cf403800af2ce6b125bc3d853117e0c0456 upstream.
    
    The write stamp, used to calculate deltas between events, was updated with
    the stale "ts" value in the "info" structure, and not with the updated "ts"
    variable. This caused the deltas between events to be inaccurate, and when
    crossing into a new sub buffer, had time go backwards.
    
    Link: https://lkml.kernel.org/r/20201124223917.795844-1-elavila@google.com
    
    Cc: stable@vger.kernel.org
    Fixes: a389d86f7fd09 ("ring-buffer: Have nested events still record running time stamp")
    Reported-by: "J. Avila" <elavila@google.com>
    Tested-by: Daniel Mentz <danielmentz@google.com>
    Tested-by: Will McVicker <willmcvicker@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3555ab3552621852d89707b0f9cab7c5c27f8786
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 27 15:11:03 2020 +0100

    ALSA: hda/generic: Add option to enforce preferred_dacs pairs
    
    commit 242d990c158d5b1dabd166516e21992baef5f26a upstream.
    
    The generic parser accepts the preferred_dacs[] pairs as a hint for
    assigning a DAC to each pin, but this hint doesn't work always
    effectively.  Currently it's merely a secondary choice after the trial
    with the path index failed.  This made sometimes it difficult to
    assign DACs without mimicking the connection list and/or the badness
    table.
    
    This patch adds a new flag, obey_preferred_dacs, that changes the
    behavior of the parser.  As its name stands, the parser obeys the
    given preferred_dacs[] pairs by skipping the path index matching and
    giving a high penalty if no DAC is assigned by the pairs.  This mode
    will help for assigning the fixed DACs forcibly from the codec
    driver.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201127141104.11041-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bdd3fbe7b57864696b7e79ba6ec6bcaff14d2c0
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Nov 19 17:04:21 2020 +0800

    ALSA: hda/realtek - Fixed Dell AIO wrong sound tone
    
    commit 92666d45adcfd4a4a70580ff9f732309e16131f9 upstream.
    
    This platform only had one audio jack.
    If it plugged speaker then replug with speaker or headset, the sound
    tone will change to abnormal.
    Headset Mic also can't record when this issue was happen.
    
    [ Added a short comment about the COEF by tiwai ]
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/593c777dcfef4546aa050e105b8e53b5@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28a77b5db771148a9f403e9a8332474eaca816e9
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Nov 27 14:39:23 2020 +0800

    ALSA: hda/realtek - Add new codec supported for ALC897
    
    commit e5782a5d5054bf1e03cb7fbd87035037c2a22698 upstream.
    
    Enable new codec supported for ALC897.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b00520f304842aab8291eb8d9191bd8@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8edaac826ba958856f9d4838302cdd755a14011
Author: Jian-Hong Pan <jhp@endlessos.org>
Date:   Tue Nov 24 17:20:25 2020 +0800

    ALSA: hda/realtek: Enable headset of ASUS UX482EG & B9400CEA with ALC294
    
    commit eeacd80fcb29b769ea915cd06b7dd35e0bf0bc25 upstream.
    
    Some laptops like ASUS UX482EG & B9400CEA's headset audio does not work
    until the quirk ALC294_FIXUP_ASUS_HPE is applied.
    
    Signed-off-by: Jian-Hong Pan <jhp@endlessos.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201124092024.179540-1-jhp@endlessos.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3d9419b8f98f16014e86f80dc757d19c476dcac
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Nov 28 10:00:15 2020 +0100

    ALSA: hda/realtek: Add mute LED quirk to yet another HP x360 model
    
    commit aeedad2504997be262c98f6e3228173225a8d868 upstream.
    
    HP Spectre x360 Convertible 15" version (SSID 103c:827f) needs the
    same quirk to make the mute LED working like other models.
      System Information
        Manufacturer: HP
        Product Name: HP Spectre x360 Convertible 15-bl1XX
    
      Sound Codec:
        Codec: Realtek ALC295
        Vendor Id: 0x10ec0295
        Subsystem Id: 0x103c827f
        Revision Id: 0x100002
    
    Reported-by: <christoph.plattner@gmx.at>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201128090015.7743-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5e4d94b74f93b66252798ca08f6fdb0a4240268
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 27 15:11:04 2020 +0100

    ALSA: hda/realtek: Fix bass speaker DAC assignment on Asus Zephyrus G14
    
    commit c84bfedce60192c08455ee2d25dd13d19274a266 upstream.
    
    ASUS Zephyrus G14 has two speaker pins, and the auto-parser tries to
    assign an individual DAC to each pin as much as possible.
    Unfortunately the third DAC has no volume control unlike the two DACs,
    and this resulted in the inconsistent speaker volumes.
    
    As a workaround, wire both speaker pins to the same DAC by modifying
    the existing quirk (ALC289_FIXUP_ASUS_GA401) applied to this device.
    Since this quirk entry is chained by another, we need to avoid
    applying the DAC assignment change for it.  Luckily, there is another
    quirk entry (ALC289_FIXUP_ASUS_GA502) doing the very same thing, so we
    can chain to the GA502 quirk instead.
    
    Note that this patch uses a new flag of the generic parser,
    obey_preferred_dacs, for enforcing the DACs.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=210359
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201127141104.11041-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9920472eaa7c652c7abcad4911fa83b6ae5a4955
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Sun Nov 29 20:35:23 2020 +0100

    speakup: Reject setting the speakup line discipline outside of speakup
    
    commit f0992098cadb4c9c6a00703b66cafe604e178fea upstream.
    
    Speakup exposing a line discipline allows userland to try to use it,
    while it is deemed to be useless, and thus uselessly exposes potential
    bugs. One of them is simply that in such a case if the line sends data,
    spk_ttyio_receive_buf2 is called and crashes since spk_ttyio_synth
    is NULL.
    
    This change restricts the use of the speakup line discipline to
    speakup drivers, thus avoiding such kind of issues altogether.
    
    Cc: stable@vger.kernel.org
    Reported-by: Shisong Qin <qinshisong1205@gmail.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Tested-by: Shisong Qin <qinshisong1205@gmail.com>
    Link: https://lore.kernel.org/r/20201129193523.hm3f6n5xrn6fiyyc@function
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 730649666353d495cfa8eade6e7f57936d0466af
Author: Jann Horn <jannh@google.com>
Date:   Thu Dec 3 02:25:05 2020 +0100

    tty: Fix ->session locking
    
    commit c8bcd9c5be24fb9e6132e97da5a35e55a83e36b9 upstream.
    
    Currently, locking of ->session is very inconsistent; most places
    protect it using the legacy tty mutex, but disassociate_ctty(),
    __do_SAK(), tiocspgrp() and tiocgsid() don't.
    Two of the writers hold the ctrl_lock (because they already need it for
    ->pgrp), but __proc_set_tty() doesn't do that yet.
    
    On a PREEMPT=y system, an unprivileged user can theoretically abuse
    this broken locking to read 4 bytes of freed memory via TIOCGSID if
    tiocgsid() is preempted long enough at the right point. (Other things
    might also go wrong, especially if root-only ioctls are involved; I'm
    not sure about that.)
    
    Change the locking on ->session such that:
    
     - tty_lock() is held by all writers: By making disassociate_ctty()
       hold it. This should be fine because the same lock can already be
       taken through the call to tty_vhangup_session().
       The tricky part is that we need to shorten the area covered by
       siglock to be able to take tty_lock() without ugly retry logic; as
       far as I can tell, this should be fine, since nothing in the
       signal_struct is touched in the `if (tty)` branch.
     - ctrl_lock is held by all writers: By changing __proc_set_tty() to
       hold the lock a little longer.
     - All readers that aren't holding tty_lock() hold ctrl_lock: By
       adding locking to tiocgsid() and __do_SAK(), and expanding the area
       covered by ctrl_lock in tiocspgrp().
    
    Cc: stable@kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4203f474d4c3e93b3c2462e4f7954cf6e4832074
Author: Jann Horn <jannh@google.com>
Date:   Thu Dec 3 02:25:04 2020 +0100

    tty: Fix ->pgrp locking in tiocspgrp()
    
    commit 54ffccbf053b5b6ca4f6e45094b942fab92a25fc upstream.
    
    tiocspgrp() takes two tty_struct pointers: One to the tty that userspace
    passed to ioctl() (`tty`) and one to the TTY being changed (`real_tty`).
    These pointers are different when ioctl() is called with a master fd.
    
    To properly lock real_tty->pgrp, we must take real_tty->ctrl_lock.
    
    This bug makes it possible for racing ioctl(TIOCSPGRP, ...) calls on
    both sides of a PTY pair to corrupt the refcount of `struct pid`,
    leading to use-after-free errors.
    
    Fixes: 47f86834bbd4 ("redo locking of tty->pgrp")
    CC: stable@kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c07c7f0d913ee99b3cfa94bea33f353d4508d57
Author: Bjørn Mork <bjorn@mork.no>
Date:   Tue Dec 1 11:03:18 2020 +0100

    USB: serial: option: fix Quectel BG96 matching
    
    commit c98fff7332dbd6e028969f8c2bda3d7bc7a024d8 upstream.
    
    This is a partial revert of commit 2bb70f0a4b23 ("USB: serial:
    option: support dynamic Quectel USB compositions")
    
    The Quectel BG96 is different from most other modern Quectel modems,
    having serial functions with 3 endpoints using ff/ff/ff and ff/fe/ff
    class/subclass/protocol. Including it in the change to accommodate
    dynamic function mapping was incorrect.
    
    Revert to interface number matching for the BG96, assuming static
    layout of the RMNET function on interface 4. This restores support
    for the serial functions on interfaces 2 and 3.
    
    Full lsusb output for the BG96:
    
    Bus 002 Device 003: ID 2c7c:0296
    Device Descriptor:
     bLength                18
     bDescriptorType         1
     bcdUSB               2.00
     bDeviceClass            0 (Defined at Interface level)
     bDeviceSubClass         0
     bDeviceProtocol         0
     bMaxPacketSize0        64
     idVendor           0x2c7c
     idProduct          0x0296
     bcdDevice            0.00
     iManufacturer           3 Qualcomm, Incorporated
     iProduct                2 Qualcomm CDMA Technologies MSM
     iSerial                 4 d1098243
     bNumConfigurations      1
     Configuration Descriptor:
       bLength                 9
       bDescriptorType         2
       wTotalLength          145
       bNumInterfaces          5
       bConfigurationValue     1
       iConfiguration          1 Qualcomm Configuration
       bmAttributes         0xe0
         Self Powered
         Remote Wakeup
       MaxPower              500mA
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        0
         bAlternateSetting       0
         bNumEndpoints           2
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x81  EP 1 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x01  EP 1 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        1
         bAlternateSetting       0
         bNumEndpoints           2
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x82  EP 2 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x02  EP 2 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        2
         bAlternateSetting       0
         bNumEndpoints           3
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x83  EP 3 IN
           bmAttributes            3
             Transfer Type            Interrupt
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0040  1x 64 bytes
           bInterval               5
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x84  EP 4 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x03  EP 3 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        3
         bAlternateSetting       0
         bNumEndpoints           3
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    254
         bInterfaceProtocol    255
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x85  EP 5 IN
           bmAttributes            3
             Transfer Type            Interrupt
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0040  1x 64 bytes
           bInterval               5
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x86  EP 6 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x04  EP 4 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        4
         bAlternateSetting       0
         bNumEndpoints           3
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x87  EP 7 IN
           bmAttributes            3
             Transfer Type            Interrupt
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0040  1x 64 bytes
           bInterval               5
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x88  EP 8 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x05  EP 5 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
    Device Qualifier (for other device speed):
     bLength                10
     bDescriptorType         6
     bcdUSB               2.00
     bDeviceClass            0 (Defined at Interface level)
     bDeviceSubClass         0
     bDeviceProtocol         0
     bMaxPacketSize0        64
     bNumConfigurations      1
    Device Status:     0x0000
     (Bus Powered)
    
    Cc: Sebastian Sjoholm <sebastian.sjoholm@gmail.com>
    Fixes: 2bb70f0a4b23 ("USB: serial: option: support dynamic Quectel USB compositions")
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a02b029501b4b8d8ef5d69ead99983da90fbb69
Author: Giacinto Cifelli <gciofono@gmail.com>
Date:   Wed Nov 25 15:53:04 2020 +0100

    USB: serial: option: add support for Thales Cinterion EXS82
    
    commit 6d6556c04ebaeaf4e7fa8b791c97e2a7c41b38a3 upstream.
    
    There is a single option port in this modem, and it is used as debug port.
    
    lsusb -v for this device:
    
    Bus 001 Device 002: ID 1e2d:006c
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass          239 Miscellaneous Device
      bDeviceSubClass         2 ?
      bDeviceProtocol         1 Interface Association
      bMaxPacketSize0        64
      idVendor           0x1e2d
      idProduct          0x006c
      bcdDevice            0.00
      iManufacturer           4
      iProduct                3
      iSerial                 5
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength          243
        bNumInterfaces          7
        bConfigurationValue     1
        iConfiguration          2
        bmAttributes         0xe0
          Self Powered
          Remote Wakeup
        MaxPower              500mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol    255 Vendor Specific Protocol
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         1
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          2
          CDC Union:
            bMasterInterface        1
            bSlaveInterface         2
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         3
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          4
          CDC Union:
            bMasterInterface        3
            bSlaveInterface         4
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         5
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      6 Ethernet Networking
          bInterfaceProtocol      0
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC Ethernet:
            iMacAddress                      1 (??)
            bmEthernetStatistics    0x00000000
            wMaxSegmentSize              16384
            wNumberMCFilters            0x0001
            bNumberPowerFilters              0
          CDC Union:
            bMasterInterface        5
            bSlaveInterface         6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
    
    Signed-off-by: Giacinto Cifelli <gciofono@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80765816027c684031c69b6a11393c05c4e4c4ea
Author: Vincent Palatin <vpalatin@chromium.org>
Date:   Fri Nov 20 10:28:28 2020 +0100

    USB: serial: option: add Fibocom NL668 variants
    
    commit 5e4d659b10fde14403adb2e215df4a3168fe8465 upstream.
    
    Update the USB serial option driver support for the Fibocom NL668 Cat.4
    LTE modules as there are actually several different variants.
    Got clarifications from Fibocom, there are distinct products:
    - VID:PID 1508:1001, NL668 for IOT (no MBIM interface)
    - VID:PID 2cb7:01a0, NL668-AM and NL652-EU are laptop M.2 cards (with
      MBIM interfaces for Windows/Linux/Chrome OS), respectively for Americas
      and Europe.
    
    usb-devices output for the laptop M.2 cards:
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  4 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a0 Rev=03.18
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom NL652-EU Modem
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Vincent Palatin <vpalatin@chromium.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e1196c0a5f6797d3e5d68e123c9de2307423465
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Dec 3 10:11:59 2020 +0100

    USB: serial: ch341: sort device-id entries
    
    commit bf193bfc12dbc3754fc8a6e0e1e3702f1af2f772 upstream.
    
    Keep the device-id entries sorted to make it easier to add new ones in
    the right spot.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c80adb06ce9defea2c4bccd7446a17971cb1d7d
Author: Jan-Niklas Burfeind <kernel@aiyionpri.me>
Date:   Thu Dec 3 04:03:59 2020 +0100

    USB: serial: ch341: add new Product ID for CH341A
    
    commit 46ee4abb10a07bd8f8ce910ee6b4ae6a947d7f63 upstream.
    
    Add PID for CH340 that's found on a ch341 based Programmer made by keeyees.
    The specific device that contains the serial converter is described
    here: http://www.keeyees.com/a/Products/ej/36.html
    
    The driver works flawlessly as soon as the new PID (0x5512) is added to
    it.
    
    Signed-off-by: Jan-Niklas Burfeind <kernel@aiyionpri.me>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c6ceecfcf6d445f4d17afa9519a6d051e070685
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Dec 4 09:55:19 2020 +0100

    USB: serial: kl5kusb105: fix memleak on open
    
    commit 3f203f057edfcf6bd02c6b942799262bfcf31f73 upstream.
    
    Fix memory leak of control-message transfer buffer on successful open().
    
    Fixes: 6774d5f53271 ("USB: serial: kl5kusb105: fix open error path")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1407da34fe434da473bed205c80ea50480712af8
Author: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
Date:   Mon Nov 30 12:34:53 2020 -0800

    usb: gadget: f_fs: Use local copy of descriptors for userspace copy
    
    commit a4b98a7512f18534ce33a7e98e49115af59ffa00 upstream.
    
    The function may be unbound causing the ffs_ep and its descriptors
    to be freed while userspace is in the middle of an ioctl requesting
    the same descriptors. Avoid dangling pointer reference by first
    making a local copy of desctiptors before releasing the spinlock.
    
    Fixes: c559a3534109 ("usb: gadget: f_fs: add ioctl returning ep descriptor")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201130203453.28154-1-jackp@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
