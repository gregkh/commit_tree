commit 99661278215dc80915280cfab5c19dbdf5575424
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Nov 10 07:49:48 2018 -0800

    Linux 4.18.18

commit afc1e5e54138cd80a228dee0f2e0fe276137c291
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Oct 16 22:25:25 2018 +0200

    x86/fpu: Fix i486 + no387 boot crash by only saving FPU registers on context switch if there is an FPU
    
    commit 2224d616528194b02424c91c2ee254b3d29942c3 upstream.
    
    Booting an i486 with "no387 nofxsr" ends with with the following crash:
    
       math_emulate: 0060:c101987d
       Kernel panic - not syncing: Math emulation needed in kernel
    
    on the first context switch in user land.
    
    The reason is that copy_fpregs_to_fpstate() tries FNSAVE which does not work
    as the FPU is turned off.
    
    This bug was introduced in:
    
      f1c8cd0176078 ("x86/fpu: Change fpu->fpregs_active users to fpu->fpstate_active")
    
    Add a check for X86_FEATURE_FPU before trying to save FPU registers (we
    have such a check in switch_fpu_finish() already).
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Fixes: f1c8cd0176078 ("x86/fpu: Change fpu->fpregs_active users to fpu->fpstate_active")
    Link: http://lkml.kernel.org/r/20181016202525.29437-4-bigeasy@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5581e4eed999140fe48d4aa5cbe7fbd90e5f18ca
Author: Christoph Hellwig <hch@lst.de>
Date:   Sun Oct 14 09:52:08 2018 +0200

    x86/swiotlb: Enable swiotlb for > 4GiG RAM on 32-bit kernels
    
    commit 485734f3fc77c1eb77ffe138c027b9a4bf0178f3 upstream.
    
    We already build the swiotlb code for 32-bit kernels with PAE support,
    but the code to actually use swiotlb has only been enabled for 64-bit
    kernels for an unknown reason.
    
    Before Linux v4.18 we paper over this fact because the networking code,
    the SCSI layer and some random block drivers implemented their own
    bounce buffering scheme.
    
    [ mingo: Changelog fixes. ]
    
    Fixes: 21e07dba9fb1 ("scsi: reduce use of block bounce buffers")
    Fixes: ab74cfebafa3 ("net: remove the PCI_DMA_BUS_IS_PHYS check in illegal_highdma")
    Reported-by: Matthew Whitehead <tedheadster@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Matthew Whitehead <tedheadster@gmail.com>
    Cc: konrad.wilk@oracle.com
    Cc: iommu@lists.linux-foundation.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181014075208.2715-1-hch@lst.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 022601efef9ee3b2b91f349e48fdd8d5131bf2ec
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Oct 12 17:53:12 2018 -0700

    x86/time: Correct the attribute on jiffies' definition
    
    commit 53c13ba8ed39e89f21a0b98f4c8a241bb44e483d upstream.
    
    Clang warns that the declaration of jiffies in include/linux/jiffies.h
    doesn't match the definition in arch/x86/time/kernel.c:
    
    arch/x86/kernel/time.c:29:42: warning: section does not match previous declaration [-Wsection]
    __visible volatile unsigned long jiffies __cacheline_aligned = INITIAL_JIFFIES;
                                             ^
    ./include/linux/cache.h:49:4: note: expanded from macro '__cacheline_aligned'
                     __section__(".data..cacheline_aligned")))
                     ^
    ./include/linux/jiffies.h:81:31: note: previous attribute is here
    extern unsigned long volatile __cacheline_aligned_in_smp __jiffy_arch_data jiffies;
                                  ^
    ./arch/x86/include/asm/cache.h:20:2: note: expanded from macro '__cacheline_aligned_in_smp'
            __page_aligned_data
            ^
    ./include/linux/linkage.h:39:29: note: expanded from macro '__page_aligned_data'
    #define __page_aligned_data     __section(.data..page_aligned) __aligned(PAGE_SIZE)
                                    ^
    ./include/linux/compiler_attributes.h:233:56: note: expanded from macro '__section'
    #define __section(S)                    __attribute__((__section__(#S)))
                                                           ^
    1 warning generated.
    
    The declaration was changed in commit 7c30f352c852 ("jiffies.h: declare
    jiffies and jiffies_64 with ____cacheline_aligned_in_smp") but wasn't
    updated here. Make them match so Clang no longer warns.
    
    Fixes: 7c30f352c852 ("jiffies.h: declare jiffies and jiffies_64 with ____cacheline_aligned_in_smp")
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181013005311.28617-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d59cf0b1833cf040628ca4d48f4c0e1f78133bc
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Oct 11 12:38:27 2018 +0200

    x86/percpu: Fix this_cpu_read()
    
    commit b59167ac7bafd804c91e49ad53c6d33a7394d4c8 upstream.
    
    Eric reported that a sequence count loop using this_cpu_read() got
    optimized out. This is wrong, this_cpu_read() must imply READ_ONCE()
    because the interface is IRQ-safe, therefore an interrupt can have
    changed the per-cpu value.
    
    Fixes: 7c3576d261ce ("[PATCH] i386: Convert PDA into the percpu section")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Cc: hpa@zytor.com
    Cc: eric.dumazet@gmail.com
    Cc: bp@alien8.de
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181011104019.748208519@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1c0e525c43091fcbb64396ee9b8846cf7b4a070
Author: Zhimin Gu <kookoo.gu@intel.com>
Date:   Fri Sep 21 14:26:24 2018 +0800

    x86, hibernate: Fix nosave_regions setup for hibernation
    
    commit cc55f7537db6af371e9c1c6a71161ee40f918824 upstream.
    
    On 32bit systems, nosave_regions(non RAM areas) located between
    max_low_pfn and max_pfn are not excluded from hibernation snapshot
    currently, which may result in a machine check exception when
    trying to access these unsafe regions during hibernation:
    
    [  612.800453] Disabling lock debugging due to kernel taint
    [  612.805786] mce: [Hardware Error]: CPU 0: Machine Check Exception: 5 Bank 6: fe00000000801136
    [  612.814344] mce: [Hardware Error]: RIP !INEXACT! 60:<00000000d90be566> {swsusp_save+0x436/0x560}
    [  612.823167] mce: [Hardware Error]: TSC 1f5939fe276 ADDR dd000000 MISC 30e0000086
    [  612.830677] mce: [Hardware Error]: PROCESSOR 0:306c3 TIME 1529487426 SOCKET 0 APIC 0 microcode 24
    [  612.839581] mce: [Hardware Error]: Run the above through 'mcelog --ascii'
    [  612.846394] mce: [Hardware Error]: Machine check: Processor context corrupt
    [  612.853380] Kernel panic - not syncing: Fatal machine check
    [  612.858978] Kernel Offset: 0x18000000 from 0xc1000000 (relocation range: 0xc0000000-0xf7ffdfff)
    
    This is because on 32bit systems, pages above max_low_pfn are regarded
    as high memeory, and accessing unsafe pages might cause expected MCE.
    On the problematic 32bit system, there are reserved memory above low
    memory, which triggered the MCE:
    
    e820 memory mapping:
    [    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009d7ff] usable
    [    0.000000] BIOS-e820: [mem 0x000000000009d800-0x000000000009ffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
    [    0.000000] BIOS-e820: [mem 0x0000000000100000-0x00000000d160cfff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000d160d000-0x00000000d1613fff] ACPI NVS
    [    0.000000] BIOS-e820: [mem 0x00000000d1614000-0x00000000d1a44fff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000d1a45000-0x00000000d1ecffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000d1ed0000-0x00000000d7eeafff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000d7eeb000-0x00000000d7ffffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000d8000000-0x00000000d875ffff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000d8760000-0x00000000d87fffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000d8800000-0x00000000d8fadfff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000d8fae000-0x00000000d8ffffff] ACPI data
    [    0.000000] BIOS-e820: [mem 0x00000000d9000000-0x00000000da71bfff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000da71c000-0x00000000da7fffff] ACPI NVS
    [    0.000000] BIOS-e820: [mem 0x00000000da800000-0x00000000dbb8bfff] usable
    [    0.000000] BIOS-e820: [mem 0x00000000dbb8c000-0x00000000dbffffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000dd000000-0x00000000df1fffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000f8000000-0x00000000fbffffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000fec00000-0x00000000fec00fff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000fed00000-0x00000000fed03fff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000fed1c000-0x00000000fed1ffff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000fee00000-0x00000000fee00fff] reserved
    [    0.000000] BIOS-e820: [mem 0x00000000ff000000-0x00000000ffffffff] reserved
    [    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000041edfffff] usable
    
    Fix this problem by changing pfn limit from max_low_pfn to max_pfn.
    This fix does not impact 64bit system because on 64bit max_low_pfn
    is the same as max_pfn.
    
    Signed-off-by: Zhimin Gu <kookoo.gu@intel.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 227db93beac05f17760186a9b67b70d818e7f9c9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Oct 11 12:38:26 2018 +0200

    x86/tsc: Force inlining of cyc2ns bits
    
    commit 4907c68abd3f60f650f98d5a69d4ec77c0bde44f upstream.
    
    Looking at the asm for native_sched_clock() I noticed we don't inline
    enough. Mostly caused by sharing code with cyc2ns_read_begin(), which
    we didn't used to do. So mark all that __force_inline to make it DTRT.
    
    Fixes: 59eaef78bfea ("x86/tsc: Remodel cyc2ns to use seqcount_latch()")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: hpa@zytor.com
    Cc: eric.dumazet@gmail.com
    Cc: bp@alien8.de
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181011104019.695196158@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfc1a81b0143af0d7d87e3ad03f66d7f9598c470
Author: Phil Auld <pauld@redhat.com>
Date:   Mon Oct 8 10:36:40 2018 -0400

    sched/fair: Fix throttle_list starvation with low CFS quota
    
    commit baa9be4ffb55876923dc9716abc0a448e510ba30 upstream.
    
    With a very low cpu.cfs_quota_us setting, such as the minimum of 1000,
    distribute_cfs_runtime may not empty the throttled_list before it runs
    out of runtime to distribute. In that case, due to the change from
    c06f04c7048 to put throttled entries at the head of the list, later entries
    on the list will starve.  Essentially, the same X processes will get pulled
    off the list, given CPU time and then, when expired, get put back on the
    head of the list where distribute_cfs_runtime will give runtime to the same
    set of processes leaving the rest.
    
    Fix the issue by setting a bit in struct cfs_bandwidth when
    distribute_cfs_runtime is running, so that the code in throttle_cfs_rq can
    decide to put the throttled entry on the tail or the head of the list.  The
    bit is set/cleared by the callers of distribute_cfs_runtime while they hold
    cfs_bandwidth->lock.
    
    This is easy to reproduce with a handful of CPU consumers. I use 'crash' on
    the live system. In some cases you can simply look at the throttled list and
    see the later entries are not changing:
    
      crash> list cfs_rq.throttled_list -H 0xffff90b54f6ade40 -s cfs_rq.runtime_remaining | paste - - | awk '{print $1"  "$4}' | pr -t -n3
        1     ffff90b56cb2d200  -976050
        2     ffff90b56cb2cc00  -484925
        3     ffff90b56cb2bc00  -658814
        4     ffff90b56cb2ba00  -275365
        5     ffff90b166a45600  -135138
        6     ffff90b56cb2da00  -282505
        7     ffff90b56cb2e000  -148065
        8     ffff90b56cb2fa00  -872591
        9     ffff90b56cb2c000  -84687
       10     ffff90b56cb2f000  -87237
       11     ffff90b166a40a00  -164582
    
      crash> list cfs_rq.throttled_list -H 0xffff90b54f6ade40 -s cfs_rq.runtime_remaining | paste - - | awk '{print $1"  "$4}' | pr -t -n3
        1     ffff90b56cb2d200  -994147
        2     ffff90b56cb2cc00  -306051
        3     ffff90b56cb2bc00  -961321
        4     ffff90b56cb2ba00  -24490
        5     ffff90b166a45600  -135138
        6     ffff90b56cb2da00  -282505
        7     ffff90b56cb2e000  -148065
        8     ffff90b56cb2fa00  -872591
        9     ffff90b56cb2c000  -84687
       10     ffff90b56cb2f000  -87237
       11     ffff90b166a40a00  -164582
    
    Sometimes it is easier to see by finding a process getting starved and looking
    at the sched_info:
    
      crash> task ffff8eb765994500 sched_info
      PID: 7800   TASK: ffff8eb765994500  CPU: 16  COMMAND: "cputest"
        sched_info = {
          pcount = 8,
          run_delay = 697094208,
          last_arrival = 240260125039,
          last_queued = 240260327513
        },
      crash> task ffff8eb765994500 sched_info
      PID: 7800   TASK: ffff8eb765994500  CPU: 16  COMMAND: "cputest"
        sched_info = {
          pcount = 8,
          run_delay = 697094208,
          last_arrival = 240260125039,
          last_queued = 240260327513
        },
    
    Signed-off-by: Phil Auld <pauld@redhat.com>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Fixes: c06f04c70489 ("sched: Fix potential near-infinite distribute_cfs_runtime() loop")
    Link: http://lkml.kernel.org/r/20181008143639.GA4019@pauld.bos.csb
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 962bc4202bf0d7ff84deec4cdc6343a103c3c010
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Thu Oct 18 12:02:50 2018 +0200

    drm/sun4i: Fix an ulong overflow in the dotclock driver
    
    commit e84cb605e02f1b3d0aee8d7157419cd8aaa06038 upstream.
    
    The calculated ideal rate can easily overflow an unsigned long, thus
    making the best div selection buggy as soon as no ideal match is found
    before the overflow occurs.
    
    Fixes: 4731a72df273 ("drm/sun4i: request exact rates to our parents")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181018100250.12565-1-boris.brezillon@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05d586677df06a8abd499c45321fc6e0e34611e6
Author: Mikhail Nikiforov <jackxviichaos@gmail.com>
Date:   Mon Oct 15 11:17:56 2018 -0700

    Input: elan_i2c - add ACPI ID for Lenovo IdeaPad 330-15IGM
    
    commit 13c1c5e4d7f887cba36c5e3df3faa22071c1469f upstream.
    
    Add ELAN061C to the ACPI table to support Elan touchpad found in Lenovo
    IdeaPad 330-15IGM.
    
    Signed-off-by: Mikhail Nikiforov <jackxviichaos@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea6b10f79dd37354225f42a4c28d1a421e21f5b6
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Oct 18 22:12:34 2018 +0900

    tracing: Fix synthetic event to allow semicolon at end
    
    commit a360d9e4016c1fcf41553b37ad496870dc5723d0 upstream.
    
    Fix synthetic event to allow independent semicolon at end.
    
    The synthetic_events interface accepts a semicolon after the
    last word if there is no space.
    
     # echo "myevent u64 var;" >> synthetic_events
    
    But if there is a space, it returns an error.
    
     # echo "myevent u64 var ;" > synthetic_events
     sh: write error: Invalid argument
    
    This behavior is difficult for users to understand. Let's
    allow the last independent semicolon too.
    
    Link: http://lkml.kernel.org/r/153986835420.18251.2191216690677025744.stgit@devbox
    
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Tom Zanussi <tom.zanussi@linux.intel.com>
    Cc: stable@vger.kernel.org
    Fixes: commit 4b147936fa50 ("tracing: Add support for 'synthetic' events")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 762472aec1f982107519d548f1c4e3764f4fedd4
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Oct 18 22:12:05 2018 +0900

    tracing: Fix synthetic event to accept unsigned modifier
    
    commit 282447ba6b00c64678ffdf964f44e5c8b1c68377 upstream.
    
    Fix synthetic event to accept unsigned modifier for its field type
    correctly.
    
    Currently, synthetic_events interface returns error for "unsigned"
    modifiers as below;
    
     # echo "myevent unsigned long var" >> synthetic_events
     sh: write error: Invalid argument
    
    This is because argv_split() breaks "unsigned long" into "unsigned"
    and "long", but parse_synth_field() doesn't expected it.
    
    With this fix, synthetic_events can handle the "unsigned long"
    correctly like as below;
    
     # echo "myevent unsigned long var" >> synthetic_events
     # cat synthetic_events
     myevent        unsigned long var
    
    Link: http://lkml.kernel.org/r/153986832571.18251.8448135724590496531.stgit@devbox
    
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Tom Zanussi <tom.zanussi@linux.intel.com>
    Cc: stable@vger.kernel.org
    Fixes: commit 4b147936fa50 ("tracing: Add support for 'synthetic' events")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6b8e426bf8fb5393852966987810ba732f11588
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 15 16:55:04 2018 -0400

    USB: fix the usbfs flag sanitization for control transfers
    
    commit 665c365a77fbfeabe52694aedf3446d5f2f1ce42 upstream.
    
    Commit 7a68d9fb8510 ("USB: usbdevfs: sanitize flags more") checks the
    transfer flags for URBs submitted from userspace via usbfs.  However,
    the check for whether the USBDEVFS_URB_SHORT_NOT_OK flag should be
    allowed for a control transfer was added in the wrong place, before
    the code has properly determined the direction of the control
    transfer.  (Control transfers are special because for them, the
    direction is set by the bRequestType byte of the Setup packet rather
    than direction bit of the endpoint address.)
    
    This patch moves code which sets up the allow_short flag for control
    transfers down after is_in has been set to the correct value.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: syzbot+24a30223a4b609bb802e@syzkaller.appspotmail.com
    Fixes: 7a68d9fb8510 ("USB: usbdevfs: sanitize flags more")
    CC: Oliver Neukum <oneukum@suse.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a790c9e4d51fbb938c6602dde42bf36b44286343
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Mon Oct 1 18:53:05 2018 +0300

    usb: xhci: pci: Enable Intel USB role mux on Apollo Lake platforms
    
    commit c02588a352defaf985fc1816eb6232663159e1b8 upstream.
    
    Intel Apollo Lake has the same internal USB role mux as
    Intel Cherry Trail.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06a70c3f60b60474bff022d376902d832aa4f2c0
Author: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
Date:   Tue Oct 9 12:52:47 2018 +0800

    usb: roles: intel_xhci: Fix Unbalanced pm_runtime_enable
    
    commit 009b1948e153ae448f62f1887e2b58d0e05db51b upstream.
    
    Add missing pm_runtime_disable() to remove(), in order to avoid
    an Unbalanced pm_runtime_enable when the module is removed and
    re-probed.
    
    Error log:
    root@intel-corei7-64:~# modprobe -r intel_xhci_usb_role_switch
    root@intel-corei7-64:~# modprobe intel_xhci_usb_role_switch
    intel_xhci_usb_sw intel_xhci_usb_sw: Unbalanced pm_runtime_enable!
    
    Fixes: cb2968468605 (usb: roles: intel_xhci: Enable runtime PM)
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebe34fdc10ad81f8688bb2b68f447277d40db33f
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 12:16:45 2018 +0200

    usb: gadget: storage: Fix Spectre v1 vulnerability
    
    commit 9ae24af3669111d418242caec8dd4ebd9ba26860 upstream.
    
    num can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/usb/gadget/function/f_mass_storage.c:3177 fsg_lun_make() warn:
    potential spectre issue 'fsg_opts->common->luns' [r] (local cap)
    
    Fix this by sanitizing num before using it to index
    fsg_opts->common->luns
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Felipe Balbi <felipe.balbi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ae5849083f4bf5af72932a9982591ba374c248a
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Fri Oct 5 16:17:44 2018 -0600

    usb: usbip: Fix BUG: KASAN: slab-out-of-bounds in vhci_hub_control()
    
    commit 81f7567c51ad97668d1c3a48e8ecc482e64d4161 upstream.
    
    vhci_hub_control() accesses port_status array with out of bounds port
    value. Fix it to reference port_status[] only with a valid rhport value
    when invalid_rhport flag is true.
    
    The invalid_rhport flag is set early on after detecting in port value
    is within the bounds or not.
    
    The following is used reproduce the problem and verify the fix:
    C reproducer:   https://syzkaller.appspot.com/x/repro.c?x=14ed8ab6400000
    
    Reported-by: syzbot+bccc1fe10b70fadc78d0@syzkaller.appspotmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b69c7f45b2d344dcf38f6247ec872718a61a2166
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Oct 4 15:49:06 2018 +0200

    cdc-acm: fix race between reset and control messaging
    
    commit 9397940ed812b942c520e0c25ed4b2c64d57e8b9 upstream.
    
    If a device splits up a control message and a reset() happens
    between the parts, the message is lost and already recieved parts
    must be dropped.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Fixes: 1aba579f3cf51 ("cdc-acm: handle read pipe errors")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffc3136034c33ee907d42607b2851cab5dcfae7c
Author: Tobias Herzog <t-herzog@gmx.de>
Date:   Sat Sep 22 22:11:11 2018 +0200

    cdc-acm: correct counting of UART states in serial state notification
    
    commit f976d0e5747ca65ccd0fb2a4118b193d70aa1836 upstream.
    
    The usb standard ("Universal Serial Bus Class Definitions for Communication
    Devices") distiguishes between "consistent signals" (DSR, DCD), and
    "irregular signals" (break, ring, parity error, framing error, overrun).
    The bits of "irregular signals" are set, if this error/event occurred on
    the device side and are immeadeatly unset, if the serial state notification
    was sent.
    Like other drivers of real serial ports do, just the occurence of those
    events should be counted in serial_icounter_struct (but no 1->0
    transitions).
    
    Signed-off-by: Tobias Herzog <t-herzog@gmx.de>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4e6a27f3786c39a163f9620d90546ecfb102e36
Author: Tobias Herzog <t-herzog@gmx.de>
Date:   Sat Sep 22 22:11:10 2018 +0200

    cdc-acm: do not reset notification buffer index upon urb unlinking
    
    commit dae3ddba36f8c337fb59cef07d564da6fc9b7551 upstream.
    
    Resetting the write index of the notification buffer on urb unlink (e.g.
    closing a cdc-acm device from userspace) may lead to wrong interpretation
    of further received notifications, in case the index is not 0 when urb
    unlink happens (i.e. when parts of a notification already have been
    transferred). On the device side there is no "reset" of the notification
    transimission and thus we would get out of sync with the device.
    
    Signed-off-by: Tobias Herzog <t-herzog@gmx.de>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d375e3b466375708742b7635e12c15f87c51a2e
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 16:32:40 2018 +0200

    IB/ucm: Fix Spectre v1 vulnerability
    
    commit 0295e39595e1146522f2722715dba7f7fba42217 upstream.
    
    hdr.cmd can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/infiniband/core/ucm.c:1127 ib_ucm_write() warn: potential
    spectre issue 'ucm_cmd_table' [r] (local cap)
    
    Fix this by sanitizing hdr.cmd before using it to index
    ucm_cmd_table.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f99af5c551085c61c36f35bdb9cfcf7ec81372c
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 16:59:01 2018 +0200

    RDMA/ucma: Fix Spectre v1 vulnerability
    
    commit a3671a4f973ee9d9621d60166cc3b037c397d604 upstream.
    
    hdr.cmd can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/infiniband/core/ucma.c:1686 ucma_write() warn: potential
    spectre issue 'ucma_cmd_table' [r] (local cap)
    
    Fix this by sanitizing hdr.cmd before using it to index
    ucm_cmd_table.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a69c03dca8c12412bf29dec06e6f36af61e0c493
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Wed Oct 3 19:45:38 2018 +0300

    drm: fb-helper: Reject all pixel format changing requests
    
    commit db05c481977599236f12a85e55de9f5ab37b0a2c upstream.
    
    drm fbdev emulation doesn't support changing the pixel format at all,
    so reject all pixel format changing requests.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181003164538.5534-1-Eugeniy.Paltsev@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6dd29d7a92d8e51aa620ce5160b99f29e0f763e
Author: Clint Taylor <clinton.a.taylor@intel.com>
Date:   Fri Oct 5 14:52:15 2018 -0700

    drm/edid: VSDB yCBCr420 Deep Color mode bit definitions
    
    commit 9068e02f58740778d8270840657f1e250a2cc60f upstream.
    
    HDMI Forum VSDB YCBCR420 deep color capability bits are 2:0. Correct
    definitions in the header for the mask to work correctly.
    
    Fixes: e6a9a2c3dc43 ("drm/edid: parse ycbcr 420 deep color information")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=107893
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Clint Taylor <clinton.a.taylor@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1538776335-12569-1-git-send-email-clinton.a.taylor@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ef7c81f8d5f6166d4f55d42f1fe1ecb2ed41b43
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Oct 2 23:29:11 2018 +0800

    drm/edid: Add 6 bpc quirk for BOE panel in HP Pavilion 15-n233sl
    
    commit 0711a43b6d84ff9189adfbf83c8bbf56eef794bf upstream.
    
    There's another panel that reports "DFP 1.x compliant TMDS" but it
    supports 6bpc instead of 8 bpc.
    
    Apply 6 bpc quirk for the panel to fix it.
    
    BugLink: https://bugs.launchpad.net/bugs/1794387
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181002152911.4370-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32c95444f91bfb18232deb771bfcb8689367dc8f
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Oct 16 15:06:41 2018 +0200

    ptp: fix Spectre v1 vulnerability
    
    commit efa61c8cf2950ab5c0e66cff3cabe2a2b24e81ba upstream.
    
    pin_index can be indirectly controlled by user-space, hence leading
    to a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/ptp/ptp_chardev.c:253 ptp_ioctl() warn: potential spectre issue
    'ops->pin_config' [r] (local cap)
    
    Fix this by sanitizing pin_index before using it to index
    ops->pin_config, and before passing it as an argument to
    function ptp_set_pinfunc(), in which it is used to index
    info->pin_config.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc7f79df0f2a5cc781e7e8617b7448e51157311a
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Wed Oct 17 15:23:59 2018 +0100

    fscache: Fix out of bound read in long cookie keys
    
    commit fa520c47eaa15b9baa8ad66ac18da4a31679693b upstream.
    
    fscache_set_key() can incur an out-of-bounds read, reported by KASAN:
    
     BUG: KASAN: slab-out-of-bounds in fscache_alloc_cookie+0x5b3/0x680 [fscache]
     Read of size 4 at addr ffff88084ff056d4 by task mount.nfs/32615
    
    and also reported by syzbot at https://lkml.org/lkml/2018/7/8/236
    
      BUG: KASAN: slab-out-of-bounds in fscache_set_key fs/fscache/cookie.c:120 [inline]
      BUG: KASAN: slab-out-of-bounds in fscache_alloc_cookie+0x7a9/0x880 fs/fscache/cookie.c:171
      Read of size 4 at addr ffff8801d3cc8bb4 by task syz-executor907/4466
    
    This happens for any index_key_len which is not divisible by 4 and is
    larger than the size of the inline key, because the code allocates exactly
    index_key_len for the key buffer, but the hashing loop is stepping through
    it 4 bytes (u32) at a time in the buf[] array.
    
    Fix this by calculating how many u32 buffers we'll need by using
    DIV_ROUND_UP, and then using kcalloc() to allocate a precleared allocation
    buffer to hold the index_key, then using that same count as the hashing
    index limit.
    
    Fixes: ec0328e46d6e ("fscache: Maintain a catalogue of allocated cookies")
    Reported-by: syzbot+a95b989b2dde8e806af8@syzkaller.appspotmail.com
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bdc50b060ca6eebd0addaa640915e9f008b2539
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Oct 17 15:23:26 2018 +0100

    cachefiles: fix the race between cachefiles_bury_object() and rmdir(2)
    
    commit 169b803397499be85bdd1e3d07d6f5e3d4bd669e upstream.
    
    the victim might've been rmdir'ed just before the lock_rename();
    unlike the normal callers, we do not look the source up after the
    parents are locked - we know it beforehand and just recheck that it's
    still the child of what used to be its parent.  Unfortunately,
    the check is too weak - we don't spot a dead directory since its
    ->d_parent is unchanged, dentry is positive, etc.  So we sail all
    the way to ->rename(), with hosting filesystems _not_ expecting
    to be asked renaming an rmdir'ed subdirectory.
    
    The fix is easy, fortunately - the lock on parent is sufficient for
    making IS_DEADDIR() on child safe.
    
    Cc: stable@vger.kernel.org
    Fixes: 9ae326a69004 (CacheFiles: A cache that backs onto a mounted filesystem)
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ccc817d3fb0466300528e9152b00e5a1d187e8c
Author: David Howells <dhowells@redhat.com>
Date:   Wed Oct 17 15:23:45 2018 +0100

    fscache: Fix incomplete initialisation of inline key space
    
    commit 1ff22883b0b2f7a73eb2609ffe879c9fd96f6328 upstream.
    
    The inline key in struct rxrpc_cookie is insufficiently initialized,
    zeroing only 3 of the 4 slots, therefore an index_key_len between 13 and 15
    bytes will end up hashing uninitialized memory because the memcpy only
    partially fills the last buf[] element.
    
    Fix this by clearing fscache_cookie objects on allocation rather than using
    the slab constructor to initialise them.  We're going to pretty much fill
    in the entire struct anyway, so bringing it into our dcache writably
    shouldn't incur much overhead.
    
    This removes the need to do clearance in fscache_set_key() (where we aren't
    doing it correctly anyway).
    
    Also, we don't need to set cookie->key_len in fscache_set_key() as we
    already did it in the only caller, so remove that.
    
    Fixes: ec0328e46d6e ("fscache: Maintain a catalogue of allocated cookies")
    Reported-by: syzbot+a95b989b2dde8e806af8@syzkaller.appspotmail.com
    Reported-by: Eric Sandeen <sandeen@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e65c5ffc44adf6218dbd2b818257a8faf166a345
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Sep 6 21:25:37 2018 +0800

    clk: sunxi-ng: sun4i: Set VCO and PLL bias current to lowest setting
    
    commit 80a6ec7d5e1653208eb53f6738620dab98f6f50e upstream.
    
    The default mid-level PLL bias current setting interferes with sigma
    delta modulation. This manifests as decreased audio quality at lower
    sampling rates, which sounds like radio broadcast quality, and
    distortion noises at sampling rates at 48 kHz or above.
    
    Changing the bias current settings to the lowest gets rid of the
    noise.
    
    Fixes: de3448519194 ("clk: sunxi-ng: sun4i: Use sigma-delta modulation
                          for audio PLL")
    Cc: <stable@vger.kernel.org> # 4.15.x
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfb0622c2d958d6b04e093147cf6a2303a827627
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Aug 29 17:02:16 2018 +0200

    gpio: mxs: Get rid of external API call
    
    [ Upstream commit 833eacc7b5913da9896bacd30db7d490aa777868 ]
    
    The MXS driver was calling back into the GPIO API from
    its irqchip. This is not very elegant, as we are a driver,
    let's just shortcut back into the gpio_chip .get() function
    instead.
    
    This is a tricky case since the .get() callback is not in
    this file, instead assigned by bgpio_init(). Calling the
    function direcly in the gpio_chip is however the lesser
    evil.
    
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Janusz Uzycki <j.uzycki@elproma.com.pl>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6259258b48bb97743d126d3f1e110c38df54b2f
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Nov 1 22:29:53 2018 +0100

    bpf: fix partial copy of map_ptr when dst is scalar
    
    commit 0962590e553331db2cc0aef2dc35c57f6300dbbe upstream.
    
    ALU operations on pointers such as scalar_reg += map_value_ptr are
    handled in adjust_ptr_min_max_vals(). Problem is however that map_ptr
    and range in the register state share a union, so transferring state
    through dst_reg->range = ptr_reg->range is just buggy as any new
    map_ptr in the dst_reg is then truncated (or null) for subsequent
    checks. Fix this by adding a raw member and use it for copying state
    over to dst_reg.
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Edward Cree <ecree@solarflare.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d15a9f087040c3ec6ba4671a2771eb47f6cbdc7
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Mon Oct 22 20:56:46 2018 +0300

    vfs: swap names of {do,vfs}_clone_file_range()
    
    commit a725356b6659469d182d662f22d770d83d3bc7b5 upstream.
    
    Commit 031a072a0b8a ("vfs: call vfs_clone_file_range() under freeze
    protection") created a wrapper do_clone_file_range() around
    vfs_clone_file_range() moving the freeze protection to former, so
    overlayfs could call the latter.
    
    The more common vfs practice is to call do_xxx helpers from vfs_xxx
    helpers, where freeze protecction is taken in the vfs_xxx helper, so
    this anomality could be a source of confusion.
    
    It seems that commit 8ede205541ff ("ovl: add reflink/copyfile/dedup
    support") may have fallen a victim to this confusion -
    ovl_clone_file_range() calls the vfs_clone_file_range() helper in the
    hope of getting freeze protection on upper fs, but in fact results in
    overlayfs allowing to bypass upper fs freeze protection.
    
    Swap the names of the two helpers to conform to common vfs practice
    and call the correct helpers from overlayfs and nfsd.
    
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 031a072a0b8a ("vfs: call vfs_clone_file_range() under freeze...")
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de1341b7a671bff0f8a654df763191318ef585d7
Author: Alan Chiang <alanx.chiang@intel.com>
Date:   Wed Jul 25 11:20:22 2018 +0800

    eeprom: at24: Add support for address-width property
    
    [ Upstream commit a2b3bf4846e5eed62ea6abb096af2c950961033c ]
    
    Provide a flexible way to determine the addressing bits of eeprom.
    Pass the addressing bits to driver through address-width property.
    
    Signed-off-by: Alan Chiang <alanx.chiang@intel.com>
    Signed-off-by: Andy Yeh <andy.yeh@intel.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
