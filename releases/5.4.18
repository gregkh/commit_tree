commit 58c72057f662cee4ec2aaab9be1abeced884814a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 5 21:22:53 2020 +0000

    Linux 5.4.18

commit 3353852afe1e583e5b132e9220f56832a720dc47
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jan 22 12:23:25 2020 +0900

    tracing/uprobe: Fix to make trace_uprobe_filter alignment safe
    
    [ Upstream commit b61387cb732cf283d318b2165c44913525fe545f ]
    
    Commit 99c9a923e97a ("tracing/uprobe: Fix double perf_event
    linking on multiprobe uprobe") moved trace_uprobe_filter on
    trace_probe_event. However, since it introduced a flexible
    data structure with char array and type casting, the
    alignment of trace_uprobe_filter can be broken.
    
    This changes the type of the array to trace_uprobe_filter
    data strucure to fix it.
    
    Link: http://lore.kernel.org/r/20200120124022.GA14897@hirez.programming.kicks-ass.net
    Link: http://lkml.kernel.org/r/157966340499.5107.10978352478952144902.stgit@devnote2
    
    Fixes: 99c9a923e97a ("tracing/uprobe: Fix double perf_event linking on multiprobe uprobe")
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f9b8c5a46188eae6a409201e4cc5703e5639e48
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Oct 4 16:44:21 2019 +0200

    Revert "rsi: fix potential null dereference in rsi_probe()"
    
    [ Upstream commit c5dcf8f0e850a504235a0af51f73d51b6ddc0933 ]
    
    This reverts commit f170d44bc4ec2feae5f6206980e7ae7fbf0432a0.
    
    USB core will never call a USB-driver probe function with a NULL
    device-id pointer.
    
    Reverting before removing the existing checks in order to document this
    and prevent the offending commit from being "autoselected" for stable.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09d4a9c83c6821a74171aabcc785ddcec3c30697
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Wed Jan 22 20:07:52 2020 +0100

    ASoC: topology: fix soc_tplg_fe_link_create() - link->dobj initialization order
    
    [ Upstream commit 8ce1cbd6ce0b1bda0c980c64fee4c1e1378355f1 ]
    
    The code which checks the return value for snd_soc_add_dai_link() call
    in soc_tplg_fe_link_create() moved the snd_soc_add_dai_link() call before
    link->dobj members initialization.
    
    While it does not affect the latest kernels, the old soc-core.c code
    in the stable kernels is affected. The snd_soc_add_dai_link() function uses
    the link->dobj.type member to check, if the link structure is valid.
    
    Reorder the link->dobj initialization to make things work again.
    It's harmless for the recent code (and the structure should be properly
    initialized before other calls anyway).
    
    The problem is in stable linux-5.4.y since version 5.4.11 when the
    upstream commit 76d270364932 was applied.
    
    Fixes: 76d270364932 ("ASoC: topology: Check return value for snd_soc_add_dai_link()")
    Cc: Dragos Tarcatu <dragos_tarcatu@mentor.com>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20200122190752.3081016-1-perex@perex.cz
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52cf138f5cc1498cca585214fbf179c4ed247d5a
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Thu Jan 30 22:11:14 2020 -0800

    mm/migrate.c: also overwrite error when it is bigger than zero
    
    [ Upstream commit dfe9aa23cab7880a794db9eb2d176c00ed064eb6 ]
    
    If we get here after successfully adding page to list, err would be 1 to
    indicate the page is queued in the list.
    
    Current code has two problems:
    
      * on success, 0 is not returned
      * on error, if add_page_for_migratioin() return 1, and the following err1
        from do_move_pages_to_node() is set, the err1 is not returned since err
        is 1
    
    And these behaviors break the user interface.
    
    Link: http://lkml.kernel.org/r/20200119065753.21694-1-richardw.yang@linux.intel.com
    Fixes: e0153fc2c760 ("mm: move_pages: return valid node id in status if the page is already on the target node").
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20e1bbe5cfd7ecb27ca2430cdf6f395633123e94
Author: Jin Yao <yao.jin@linux.intel.com>
Date:   Wed Jan 8 03:17:45 2020 +0800

    perf report: Fix no libunwind compiled warning break s390 issue
    
    [ Upstream commit c3314a74f86dc00827e0945c8e5039fc3aebaa3c ]
    
    Commit 800d3f561659 ("perf report: Add warning when libunwind not
    compiled in") breaks the s390 platform. S390 uses libdw-dwarf-unwind for
    call chain unwinding and had no support for libunwind.
    
    So the warning "Please install libunwind development packages during the
    perf build." caused the confusion even if the call-graph is displayed
    correctly.
    
    This patch adds checking for HAVE_DWARF_SUPPORT, which is set when
    libdw-dwarf-unwind is compiled in.
    
    Fixes: 800d3f561659 ("perf report: Add warning when libunwind not compiled in")
    Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
    Reviewed-by: Thomas Richter <tmricht@linux.ibm.com>
    Tested-by: Thomas Richter <tmricht@linux.ibm.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jin Yao <yao.jin@intel.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200107191745.18415-1-yao.jin@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e16b302f691ce6c6baca5619d4a2046f817f4aa8
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Mon Jan 13 12:29:04 2020 -0500

    dm thin: fix use-after-free in metadata_pre_commit_callback
    
    [ Upstream commit a4a8d286586d4b28c8517a51db8d86954aadc74b ]
    
    dm-thin uses struct pool to hold the state of the pool. There may be
    multiple pool_c's pointing to a given pool, each pool_c represents a
    loaded target. pool_c's may be created and destroyed arbitrarily and the
    pool contains a reference count of pool_c's pointing to it.
    
    Since commit 694cfe7f31db3 ("dm thin: Flush data device before
    committing metadata") a pointer to pool_c is passed to
    dm_pool_register_pre_commit_callback and this function stores it in
    pmd->pre_commit_context. If this pool_c is freed, but pool is not
    (because there is another pool_c referencing it), we end up in a
    situation where pmd->pre_commit_context structure points to freed
    pool_c. It causes a crash in metadata_pre_commit_callback.
    
    Fix this by moving the dm_pool_register_pre_commit_callback() from
    pool_ctr() to pool_preresume(). This way the in-core thin-pool metadata
    is only ever armed with callback data whose lifetime matches the
    active thin-pool target.
    
    In should be noted that this fix preserves the ability to load a
    thin-pool table that uses a different data block device (that contains
    the same data) -- though it is unclear if that capability is still
    useful and/or needed.
    
    Fixes: 694cfe7f31db3 ("dm thin: Flush data device before committing metadata")
    Cc: stable@vger.kernel.org
    Reported-by: Zdenek Kabelac <zkabelac@redhat.com>
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35511d9471bee93dab7fa7750f41baf400f52160
Author: Yoshiki Komachi <komachi.yoshiki@gmail.com>
Date:   Fri Jan 17 16:05:32 2020 +0900

    flow_dissector: Fix to use new variables for port ranges in bpf hook
    
    [ Upstream commit 59fb9b62fb6c929a756563152a89f39b07cf8893 ]
    
    This patch applies new flag (FLOW_DISSECTOR_KEY_PORTS_RANGE) and
    field (tp_range) to BPF flow dissector to generate appropriate flow
    keys when classified by specified port ranges.
    
    Fixes: 8ffb055beae5 ("cls_flower: Fix the behavior using port ranges with hw-offload")
    Signed-off-by: Yoshiki Komachi <komachi.yoshiki@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Petar Penkov <ppenkov@google.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200117070533.402240-2-komachi.yoshiki@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f42407a7906b295b6386719aaaf32928c4d24553
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 13 01:03:24 2019 +0100

    cpuidle: teo: Avoid using "early hits" incorrectly
    
    [ Upstream commit 63f202e5edf161c2ccffa286a9a701e995427b15 ]
    
    If the current state with the maximum "early hits" metric in
    teo_select() is also the one "matching" the expected idle duration,
    it will be used as the candidate one for selection even if its
    "misses" metric is greater than its "hits" metric, which is not
    correct.
    
    In that case, the candidate state should be shallower than the
    current one and its "early hits" metric should be the maximum
    among the idle states shallower than the current one.
    
    To make that happen, modify teo_select() to save the index of
    the state whose "early hits" metric is the maximum for the
    range of states below the current one and go back to that state
    if it turns out that the current one should be rejected.
    
    Fixes: 159e48560f51 ("cpuidle: teo: Fix "early hits" handling for disabled idle states")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5e3c887dfc08249e091eef3ea6020cf43b9e49b
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jan 31 09:31:05 2020 -0500

    btrfs: do not zero f_bavail if we have available space
    
    commit d55966c4279bfc6a0cf0b32bf13f5df228a1eeb6 upstream.
    
    There was some logic added a while ago to clear out f_bavail in statfs()
    if we did not have enough free metadata space to satisfy our global
    reserve.  This was incorrect at the time, however didn't really pose a
    problem for normal file systems because we would often allocate chunks
    if we got this low on free metadata space, and thus wouldn't really hit
    this case unless we were actually full.
    
    Fast forward to today and now we are much better about not allocating
    metadata chunks all of the time.  Couple this with d792b0f19711 ("btrfs:
    always reserve our entire size for the global reserve") which now means
    we'll easily have a larger global reserve than our free space, we are
    now more likely to trip over this while still having plenty of space.
    
    Fix this by skipping this logic if the global rsv's space_info is not
    full.  space_info->full is 0 unless we've attempted to allocate a chunk
    for that space_info and that has failed.  If this happens then the space
    for the global reserve is definitely sacred and we need to report
    b_avail == 0, but before then we can just use our calculated b_avail.
    
    Reported-by: Martin Steigerwald <martin@lichtvoll.de>
    Fixes: ca8a51b3a979 ("btrfs: statfs: report zero available if metadata are exhausted")
    CC: stable@vger.kernel.org # 4.5+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Tested-By: Martin Steigerwald <martin@lichtvoll.de>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 420e4a521c0e0b36c0fa9237e0810be511def0ee
Author: Praveen Chaudhary <praveen5582@gmail.com>
Date:   Thu Jan 23 12:33:28 2020 -0800

    net: Fix skb->csum update in inet_proto_csum_replace16().
    
    [ Upstream commit 189c9b1e94539b11c80636bc13e9cf47529e7bba ]
    
    skb->csum is updated incorrectly, when manipulation for
    NF_NAT_MANIP_SRC\DST is done on IPV6 packet.
    
    Fix:
    There is no need to update skb->csum in inet_proto_csum_replace16(),
    because update in two fields a.) IPv6 src/dst address and b.) L4 header
    checksum cancels each other for skb->csum calculation. Whereas
    inet_proto_csum_replace4 function needs to update skb->csum, because
    update in 3 fields a.) IPv4 src/dst address, b.) IPv4 Header checksum
    and c.) L4 header checksum results in same diff as L4 Header checksum
    for skb->csum calculation.
    
    [ pablo@netfilter.org: a few comestic documentation edits ]
    Signed-off-by: Praveen Chaudhary <pchaudhary@linkedin.com>
    Signed-off-by: Zhenggen Xu <zxu@linkedin.com>
    Signed-off-by: Andy Stracner <astracner@linkedin.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e853e3f9f9d469c558791549614f1da10c6f7194
Author: wenxu <wenxu@ucloud.cn>
Date:   Sun Jan 19 13:18:30 2020 +0800

    netfilter: nf_tables_offload: fix check the chain offload flag
    
    [ Upstream commit c83de17dd6308fb74696923e5245de0e3c427206 ]
    
    In the nft_indr_block_cb the chain should check the flag with
    NFT_CHAIN_HW_OFFLOAD.
    
    Fixes: 9a32669fecfb ("netfilter: nf_tables_offload: support indr block call")
    Signed-off-by: wenxu <wenxu@ucloud.cn>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17d56cef7f93ac315f49e69c9fe2a0b7c8e745eb
Author: Jiri Wiesner <jwiesner@suse.com>
Date:   Sat Jan 18 13:10:50 2020 +0100

    netfilter: conntrack: sctp: use distinct states for new SCTP connections
    
    [ Upstream commit ab658b9fa7a2c467f79eac8b53ea308b8f98113d ]
    
    The netlink notifications triggered by the INIT and INIT_ACK chunks
    for a tracked SCTP association do not include protocol information
    for the corresponding connection - SCTP state and verification tags
    for the original and reply direction are missing. Since the connection
    tracking implementation allows user space programs to receive
    notifications about a connection and then create a new connection
    based on the values received in a notification, it makes sense that
    INIT and INIT_ACK notifications should contain the SCTP state
    and verification tags available at the time when a notification
    is sent. The missing verification tags cause a newly created
    netfilter connection to fail to verify the tags of SCTP packets
    when this connection has been created from the values previously
    received in an INIT or INIT_ACK notification.
    
    A PROTOINFO event is cached in sctp_packet() when the state
    of a connection changes. The CLOSED and COOKIE_WAIT state will
    be used for connections that have seen an INIT and INIT_ACK chunk,
    respectively. The distinct states will cause a connection state
    change in sctp_packet().
    
    Signed-off-by: Jiri Wiesner <jwiesner@suse.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b71636ee37fa8f318156f58c80ed460e53351e37
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 10:11:13 2020 +0300

    l2t_seq_next should increase position index
    
    [ Upstream commit 66018a102f7756cf72db4d2704e1b93969d9d332 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 148a71a8ece874a30ee7aed13aeec9be8e3964bb
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 10:11:08 2020 +0300

    seq_tab_next() should increase position index
    
    [ Upstream commit 70a87287c821e9721b62463777f55ba588ac4623 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c9a3ab865c3864f52a9513c8142b8018b3cd013
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Wed Jan 22 16:15:14 2020 +0200

    net: fsl/fman: rename IF_MODE_XGMII to IF_MODE_10G
    
    [ Upstream commit 457bfc0a4bf531487ecc3cf82ec728a5e114fb1e ]
    
    As the only 10G PHY interface type defined at the moment the code
    was developed was XGMII, although the PHY interface mode used was
    not XGMII, XGMII was used in the code to denote 10G. This patch
    renames the 10G interface mode to remove the ambiguity.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2c797b72e014027bf0330f2b97b69ddb4156a6b
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Wed Jan 22 15:20:29 2020 +0200

    net/fsl: treat fsl,erratum-a011043
    
    [ Upstream commit 1d3ca681b9d9575ccf696ebc2840a1ebb1fd4074 ]
    
    When fsl,erratum-a011043 is set, adjust for erratum A011043:
    MDIO reads to internal PCS registers may result in having
    the MDIO_CFG[MDIO_RD_ER] bit set, even when there is no
    error and read data (MDIO_DATA[MDIO_DATA]) is correct.
    Software may get false read error when reading internal
    PCS registers through MDIO. As a workaround, all internal
    MDIO accesses should ignore the MDIO_CFG[MDIO_RD_ER] bit.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ce13ed0a5deaddc4d1c6e09160333dda9fb1815
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Wed Jan 22 15:20:28 2020 +0200

    powerpc/fsl/dts: add fsl,erratum-a011043
    
    [ Upstream commit 73d527aef68f7644e59f22ce7f9ac75e7b533aea ]
    
    Add fsl,erratum-a011043 to internal MDIO buses.
    Software may get false read error when reading internal
    PCS registers through MDIO. As a workaround, all internal
    MDIO accesses should ignore the MDIO_CFG[MDIO_RD_ER] bit.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ee3feac65ea906e4021c6c3b129c2614a3ead82
Author: Manish Chopra <manishc@marvell.com>
Date:   Wed Jan 22 01:43:38 2020 -0800

    qlcnic: Fix CPU soft lockup while collecting firmware dump
    
    [ Upstream commit 22e984493a41bf8081f13d9ed84def3ca8cfd427 ]
    
    Driver while collecting firmware dump takes longer time to
    collect/process some of the firmware dump entries/memories.
    Bigger capture masks makes it worse as it results in larger
    amount of data being collected and results in CPU soft lockup.
    Place cond_resched() in some of the driver flows that are
    expectedly time consuming to relinquish the CPU to avoid CPU
    soft lockup panic.
    
    Signed-off-by: Shahed Shaikh <shshaikh@marvell.com>
    Tested-by: Yonggen Xu <Yonggen.Xu@dell.com>
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d693255105b636640102f123188fb317750d1bc1
Author: Raag Jadav <raagjadav@gmail.com>
Date:   Sun Jan 19 16:58:59 2020 +0530

    ARM: dts: am43x-epos-evm: set data pin directions for spi0 and spi1
    
    [ Upstream commit b0b03951544534d6d9ad4aa2787eefec988fff20 ]
    
    Set d0 and d1 pin directions for spi0 and spi1 as per their pinmux.
    
    Signed-off-by: Raag Jadav <raagjadav@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06b5e10871035d8125eb4aa07935cbecbc289490
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:13 2020 +0800

    r8152: disable DelayPhyPwrChg
    
    [ Upstream commit aa475d935272481c9ffb1ae54eeca5c1819fbe1a ]
    
    When enabling this, the device would wait an internal signal which
    wouldn't be triggered. Then, the device couldn't enter P3 mode, so
    the power consumption is increased.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 510818ae0f388d333bd5c1554fbcee2d2a2e3b1e
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:12 2020 +0800

    r8152: avoid the MCU to clear the lanwake
    
    [ Upstream commit 19813162895a696c5814d76e5f8fb6203d70f6e0 ]
    
    Avoid the MCU to clear the lanwake after suspending. It may cause the
    WOL fail. Disable LANWAKE_CLR_EN before suspending. Besides,enable it
    and reset the lanwake status when resuming or initializing.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a128650b47aacded5867e46cad440a0cdf9cd41
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:10 2020 +0800

    r8152: disable test IO for RTL8153B
    
    [ Upstream commit d7f1b59655efb5a285d227c8f9853a98eab5c2fd ]
    
    For RTL8153B with QFN32, disable test IO. Otherwise, it may cause
    abnormal behavior for the device randomly.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc2ef2e9d1421d21faf2c5f1d30ce663ceb9a092
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:09 2020 +0800

    r8152: Disable PLA MCU clock speed down
    
    [ Upstream commit 08997b5eec08a2c29367f19a74abdea54b299406 ]
    
    PLA MCU clock speed down could only be enabled when tx/rx are disabled.
    Otherwise, the packet loss may occur.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b05091c3ae99b68a93dce88b4c9b7f55c4ce8cd7
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:08 2020 +0800

    r8152: disable U2P3 for RTL8153B
    
    [ Upstream commit 809a7fc6593f288d6f820ef6cc57b9d69b5f9474 ]
    
    Enable U2P3 may miss zero packet for bulk-in.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26a581fafceb7cddbabd9d08e679dc3b9d13578d
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:07 2020 +0800

    r8152: get default setting of WOL before initializing
    
    [ Upstream commit 9583a3638dc07cc1878f41265e85ed497f72efcb ]
    
    Initailization would reset runtime suspend by tp->saved_wolopts, so
    the tp->saved_wolopts should be set before initializing.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 281f32e343826e871a4cb795020335da263b22fc
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Jan 10 12:28:07 2020 +0000

    tee: optee: Fix compilation issue with nommu
    
    [ Upstream commit 9e0caab8e0f96f0af7d1dd388e62f44184a75372 ]
    
    The optee driver uses specific page table types to verify if a memory
    region is normal. These types are not defined in nommu systems. Trying
    to compile the driver in these systems results in a build error:
    
      linux/drivers/tee/optee/call.c: In function ‘is_normal_memory’:
      linux/drivers/tee/optee/call.c:533:26: error: ‘L_PTE_MT_MASK’ undeclared
         (first use in this function); did you mean ‘PREEMPT_MASK’?
         return (pgprot_val(p) & L_PTE_MT_MASK) == L_PTE_MT_WRITEALLOC;
                                 ^~~~~~~~~~~~~
                                 PREEMPT_MASK
      linux/drivers/tee/optee/call.c:533:26: note: each undeclared identifier is
         reported only once for each function it appears in
      linux/drivers/tee/optee/call.c:533:44: error: ‘L_PTE_MT_WRITEALLOC’ undeclared
         (first use in this function)
         return (pgprot_val(p) & L_PTE_MT_MASK) == L_PTE_MT_WRITEALLOC;
                                                ^~~~~~~~~~~~~~~~~~~
    
    Make the optee driver depend on MMU to fix the compilation issue.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    [jw: update commit title]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0703666b96587246e526b4bd46ab52e59bfe7651
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Dec 10 11:08:32 2019 +0100

    led: max77650: add of_match table
    
    [ Upstream commit 2424415d25a765d4302ddfb4de75427e9294dc09 ]
    
    We need the of_match table if we want to use the compatible string in
    the pmic's child node and get the led driver loaded automatically.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 313151afdf4c97fc21c41acc95f1751e2154f38b
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Mon Jan 20 15:07:46 2020 +0100

    ARM: 8955/1: virt: Relax arch timer version check during early boot
    
    [ Upstream commit 6849b5eba1965ceb0cad3a75877ef4569dd3638e ]
    
    Updates to the Generic Timer architecture allow ID_PFR1.GenTimer to
    have values other than 0 or 1 while still preserving backward
    compatibility. At the moment, Linux is quite strict in the way it
    handles this field at early boot and will not configure arch timer if
    it doesn't find the value 1.
    
    Since here use ubfx for arch timer version extraction (hyb-stub build
    with -march=armv7-a, so it is safe)
    
    To help backports (even though the code was correct at the time of writing)
    
    Fixes: 8ec58be9f3ff ("ARM: virt: arch_timers: enable access to physical timers")
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edb6590b1b2c5f2cdccf4cc10bc86c254ca542e4
Author: Hannes Reinecke <hare@suse.de>
Date:   Thu Jan 16 11:20:53 2020 +0100

    scsi: fnic: do not queue commands during fwreset
    
    [ Upstream commit 0e2209629fec427ba75a6351486153a9feddd36b ]
    
    When a link is going down the driver will be calling fnic_cleanup_io(),
    which will traverse all commands and calling 'done' for each found command.
    While the traversal is handled under the host_lock, calling 'done' happens
    after the host_lock is being dropped.
    
    As fnic_queuecommand_lck() is being called with the host_lock held, it
    might well be that it will pick the command being selected for abortion
    from the above routine and enqueue it for sending, but then 'done' is being
    called on that very command from the above routine.
    
    Which of course confuses the hell out of the scsi midlayer.
    
    So fix this by not queueing commands when fnic_cleanup_io is active.
    
    Link: https://lore.kernel.org/r/20200116102053.62755-1-hare@suse.de
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3075e636b368c4a1ca018fa16cda57885edd4c86
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 10 10:22:12 2020 -0800

    Input: max77650-onkey - add of_match table
    
    [ Upstream commit ce535a2efb48d8d4c4e4b97e2764d7cee73d9b55 ]
    
    We need the of_match table if we want to use the compatible string in
    the pmic's child node and get the onkey driver loaded automatically.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3a49824165cc1ce9a114c5ebadf792162155a23
Author: Xu Wang <vulab@iscas.ac.cn>
Date:   Mon Jan 13 09:00:36 2020 +0000

    xfrm: interface: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 8aaea2b0428b6aad7c7e22d3fddc31a78bb1d724 ]
    
    When do IPv6 tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    Signed-off-by: Xu Wang <vulab@iscas.ac.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b38dd235a4bd0ba6f6949b9ea1c9c1953267f007
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon Jan 13 09:32:47 2020 +0100

    xfrm interface: fix packet tx through bpf_redirect()
    
    [ Upstream commit f042365dbffea98fb8148c98c700402e8d099f02 ]
    
    With an ebpf program that redirects packets through a xfrm interface,
    packets are dropped because no dst is attached to skb.
    
    This could also be reproduced with an AF_PACKET socket, with the following
    python script (xfrm1 is a xfrm interface):
    
     import socket
     send_s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 0)
     # scapy
     # p = IP(src='10.100.0.2', dst='10.200.0.1')/ICMP(type='echo-request')
     # raw(p)
     req = b'E\x00\x00\x1c\x00\x01\x00\x00@\x01e\xb2\nd\x00\x02\n\xc8\x00\x01\x08\x00\xf7\xff\x00\x00\x00\x00'
     send_s.sendto(req, ('xfrm1', 0x800, 0, 0))
    
    It was also not possible to send an ip packet through an AF_PACKET socket
    because a LL header was expected. Let's remove those LL header constraints.
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8e04566db7f14f3ce0d1f052e16bc11852524e1
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon Jan 13 09:32:46 2020 +0100

    vti[6]: fix packet tx through bpf_redirect()
    
    [ Upstream commit 95224166a9032ff5d08fca633d37113078ce7d01 ]
    
    With an ebpf program that redirects packets through a vti[6] interface,
    the packets are dropped because no dst is attached.
    
    This could also be reproduced with an AF_PACKET socket, with the following
    python script (vti1 is an ip_vti interface):
    
     import socket
     send_s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 0)
     # scapy
     # p = IP(src='10.100.0.2', dst='10.200.0.1')/ICMP(type='echo-request')
     # raw(p)
     req = b'E\x00\x00\x1c\x00\x01\x00\x00@\x01e\xb2\nd\x00\x02\n\xc8\x00\x01\x08\x00\xf7\xff\x00\x00\x00\x00'
     send_s.sendto(req, ('vti1', 0x800, 0, 0))
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5743a3a8a4c77db536de00d789aa90f33be5f55a
Author: Matwey V. Kornilov <matwey@sai.msu.ru>
Date:   Mon Jan 6 16:09:08 2020 +0300

    ARM: dts: am335x-boneblack-common: fix memory size
    
    [ Upstream commit 5abd45ea0fc3060f7805e131753fdcbafd6c6618 ]
    
    BeagleBone Black series is equipped with 512MB RAM
    whereas only 256MB is included from am335x-bone-common.dtsi
    
    This leads to an issue with unusual setups when devicetree
    is loaded by GRUB2 directly.
    
    Signed-off-by: Matwey V. Kornilov <matwey@sai.msu.ru>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c15ea8e4150d07526873fef4d19d785d8adad800
Author: Miles Chen <miles.chen@mediatek.com>
Date:   Thu Jan 2 15:10:16 2020 -0800

    Input: evdev - convert kzalloc()/vzalloc() to kvzalloc()
    
    [ Upstream commit 7f439bc2d7e8c8cc4e1bab08ab7fe1bb73c9b268 ]
    
    We observed a large(order-3) allocation in evdev_open() and it may
    cause an OOM kernel panic in kzalloc(), before we getting to the
    vzalloc() fallback.
    
    Fix it by converting kzalloc()/vzalloc() to kvzalloc() to avoid the
    OOM killer logic as we have a vmalloc fallback.
    
    InputReader invoked oom-killer: gfp_mask=0x240c2c0
    (GFP_KERNEL|__GFP_NOWARN|__GFP_COMP|__GFP_ZERO), nodemask=0, order=3,
    oom_score_adj=-900
    ...
    (dump_backtrace) from (show_stack+0x18/0x1c)
    (show_stack) from (dump_stack+0x94/0xa8)
    (dump_stack) from (dump_header+0x7c/0xe4)
    (dump_header) from (out_of_memory+0x334/0x348)
    (out_of_memory) from (__alloc_pages_nodemask+0xe9c/0xeb8)
    (__alloc_pages_nodemask) from (kmalloc_order_trace+0x34/0x128)
    (kmalloc_order_trace) from (__kmalloc+0x258/0x36c)
    (__kmalloc) from (evdev_open+0x5c/0x17c)
    (evdev_open) from (chrdev_open+0x100/0x204)
    (chrdev_open) from (do_dentry_open+0x21c/0x354)
    (do_dentry_open) from (vfs_open+0x58/0x84)
    (vfs_open) from (path_openat+0x640/0xc98)
    (path_openat) from (do_filp_open+0x78/0x11c)
    (do_filp_open) from (do_sys_open+0x130/0x244)
    (do_sys_open) from (SyS_openat+0x14/0x18)
    (SyS_openat) from (__sys_trace_return+0x0/0x10)
    ...
    Normal: 12488*4kB (UMEH) 6984*8kB (UMEH) 2101*16kB (UMEH) 0*32kB
    0*64kB 0*128kB 0*256kB 0*512kB 0*1024kB 0*2048kB 0*4096kB = 139440kB
    HighMem: 206*4kB (H) 131*8kB (H) 42*16kB (H) 2*32kB (H) 0*64kB
    0*128kB 0*256kB 0*512kB 0*1024kB 0*2048kB 0*4096kB = 2608kB
    ...
    Kernel panic - not syncing: Out of memory and no killable processes...
    
    Signed-off-by: Miles Chen <miles.chen@mediatek.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 220ee13d017c0cae315d374cadcacb155fd72ab9
Author: Shahar S Matityahu <shahar.s.matityahu@intel.com>
Date:   Sun Dec 15 20:06:22 2019 +0200

    iwlwifi: dbg: force stop the debug monitor HW
    
    [ Upstream commit 990aba28f5001f6e90fdd84e13612b560a75deda ]
    
    The driver is required to stop the debug monitor HW recording regardless
    of the debug configuration since the driver is responsible to halt the
    FW DBGC.
    
    Signed-off-by: Shahar S Matityahu <shahar.s.matityahu@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27cf25a0b87a8f2c7f885fe9d37f4402be16d376
Author: Haim Dreyfuss <haim.dreyfuss@intel.com>
Date:   Wed Nov 27 14:55:58 2019 -0500

    iwlwifi: Don't ignore the cap field upon mcc update
    
    [ Upstream commit 2763bba6328c53c455d8f7f5302b80030551c31b ]
    
    When receiving a new MCC driver get all the data about the new country
    code and its regulatory information.
    Mistakenly, we ignored the cap field, which includes global regulatory
    information which should be applies to every channel.
    Fix it.
    
    Signed-off-by: Haim Dreyfuss <haim.dreyfuss@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4df1389ff7b5bec71b72ff1bb53d55eef0060aa7
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Nov 14 09:09:34 2019 +0100

    iwlwifi: pcie: allocate smaller dev_cmd for TX headers
    
    [ Upstream commit a89c72ffd07369f5ccc74f0332d2785a7077241d ]
    
    As noted in the previous commit, due to the way we allocate the
    dev_cmd headers with 324 byte size, and 4/8 byte alignment, the
    part we use of them (bytes 20..40-68) could still cross a page
    and thus 2^32 boundary.
    
    Address this by using alignment to ensure that the allocation
    cannot cross a page boundary, on hardware that's affected. To
    make that not cause more memory consumption, reduce the size of
    the allocations to the necessary size - we go from 324 bytes in
    each allocation to 60/68 on gen2 depending on family, and ~120
    or so on gen1 (so on gen1 it's a pure reduction in size, since
    we don't need alignment there).
    
    To avoid size and clearing issues, add a new structure that's
    just the header, and use kmem_cache_zalloc().
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08022255a9ee926896e81ba63a83bb904efe446d
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Thu Nov 7 22:49:11 2019 -0500

    XArray: Fix xas_pause at ULONG_MAX
    
    [ Upstream commit 82a22311b7a68a78709699dc8c098953b70e4fd2 ]
    
    If we were unlucky enough to call xas_pause() when the index was at
    ULONG_MAX (or a multi-slot entry which ends at ULONG_MAX), we would
    wrap the index back around to 0 and restart the iteration from the
    beginning.  Use the XAS_BOUNDS state to indicate that we should just
    stop the iteration.
    
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b267caf5e51f207c68e67aee47380a6c8fde7840
Author: Ilie Halip <ilie.halip@gmail.com>
Date:   Wed Jan 15 13:32:42 2020 +0200

    riscv: delete temporary files
    
    [ Upstream commit 95f4d9cced96afa9c69b3da8e79e96102c84fc60 ]
    
    Temporary files used in the VDSO build process linger on even after make
    mrproper: vdso-dummy.o.tmp, vdso.so.dbg.tmp.
    
    Delete them once they're no longer needed.
    
    Signed-off-by: Ilie Halip <ilie.halip@gmail.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f2fa34a52c555e1ebe5b34389483dcc5cafb643
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Thu Jan 16 12:02:10 2020 -0800

    perf/x86/intel/uncore: Remove PCIe3 unit for SNR
    
    [ Upstream commit 2167f1625c2f04a33145f325db0de285630f7bd1 ]
    
    The PCIe Root Port driver for CPU Complex PCIe Root Ports are not
    loaded on SNR.
    
    The device ID for SNR PCIe3 unit is used by both uncore driver and the
    PCIe Root Port driver. If uncore driver is loaded, the PCIe Root Port
    driver never be probed.
    
    Remove the PCIe3 unit for SNR for now. The support for PCIe3 unit will
    be added later separately.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lkml.kernel.org/r/20200116200210.18937-2-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aae7d5784c534678fa8717ddf5fbc7d04a70d0a2
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Jan 10 12:15:11 2020 -0800

    perf/x86/intel/uncore: Add PCI ID of IMC for Xeon E3 V5 Family
    
    [ Upstream commit e74383045119fb8055cf31cb39e0fe951d67163a ]
    
    The IMC uncore support is missed for E3-1585 v5 CPU.
    
    Intel Xeon E3 V5 Family has Sky Lake CPU.
    Add the PCI ID of IMC for Intel Xeon E3 V5 Family.
    
    Reported-by: Rosales-fernandez, Carlos <carlos.rosales-fernandez@intel.com>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Rosales-fernandez, Carlos <carlos.rosales-fernandez@intel.com>
    Link: https://lkml.kernel.org/r/1578687311-158748-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86982620f28b695feecf1e28109347627fc7fd62
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 7 21:07:35 2020 +0100

    wireless: wext: avoid gcc -O3 warning
    
    [ Upstream commit e16119655c9e6c4aa5767cd971baa9c491f41b13 ]
    
    After the introduction of CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3,
    the wext code produces a bogus warning:
    
    In function 'iw_handler_get_iwstats',
        inlined from 'ioctl_standard_call' at net/wireless/wext-core.c:1015:9,
        inlined from 'wireless_process_ioctl' at net/wireless/wext-core.c:935:10,
        inlined from 'wext_ioctl_dispatch.part.8' at net/wireless/wext-core.c:986:8,
        inlined from 'wext_handle_ioctl':
    net/wireless/wext-core.c:671:3: error: argument 1 null where non-null expected [-Werror=nonnull]
       memcpy(extra, stats, sizeof(struct iw_statistics));
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from arch/x86/include/asm/string.h:5,
    net/wireless/wext-core.c: In function 'wext_handle_ioctl':
    arch/x86/include/asm/string_64.h:14:14: note: in a call to function 'memcpy' declared here
    
    The problem is that ioctl_standard_call() sometimes calls the handler
    with a NULL argument that would cause a problem for iw_handler_get_iwstats.
    However, iw_handler_get_iwstats never actually gets called that way.
    
    Marking that function as noinline avoids the warning and leads
    to slightly smaller object code as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20200107200741.3588770-1-arnd@arndb.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b308d93dd5b3ee5c5f1860cc19a8cd2525f8a1c2
Author: Jouni Malinen <j@w1.fi>
Date:   Tue Jan 7 17:35:45 2020 +0200

    mac80211: Fix TKIP replay protection immediately after key setup
    
    [ Upstream commit 6f601265215a421f425ba3a4850a35861d024643 ]
    
    TKIP replay protection was skipped for the very first frame received
    after a new key is configured. While this is potentially needed to avoid
    dropping a frame in some cases, this does leave a window for replay
    attacks with group-addressed frames at the station side. Any earlier
    frame sent by the AP using the same key would be accepted as a valid
    frame and the internal RSC would then be updated to the TSC from that
    frame. This would allow multiple previously transmitted group-addressed
    frames to be replayed until the next valid new group-addressed frame
    from the AP is received by the station.
    
    Fix this by limiting the no-replay-protection exception to apply only
    for the case where TSC=0, i.e., when this is for the very first frame
    protected using the new key, and the local RSC had not been set to a
    higher value when configuring the key (which may happen with GTK).
    
    Signed-off-by: Jouni Malinen <j@w1.fi>
    Link: https://lore.kernel.org/r/20200107153545.10934-1-j@w1.fi
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e233cbaf8ecc5859f0417dd53899da4edb477991
Author: Orr Mazor <orr.mazor@tandemg.com>
Date:   Sun Dec 22 14:55:31 2019 +0000

    cfg80211: Fix radar event during another phy CAC
    
    [ Upstream commit 26ec17a1dc5ecdd8d91aba63ead6f8b5ad5dea0d ]
    
    In case a radar event of CAC_FINISHED or RADAR_DETECTED
    happens during another phy is during CAC we might need
    to cancel that CAC.
    
    If we got a radar in a channel that another phy is now
    doing CAC on then the CAC should be canceled there.
    
    If, for example, 2 phys doing CAC on the same channels,
    or on comptable channels, once on of them will finish his
    CAC the other might need to cancel his CAC, since it is no
    longer relevant.
    
    To fix that the commit adds an callback and implement it in
    mac80211 to end CAC.
    This commit also adds a call to said callback if after a radar
    event we see the CAC is no longer relevant
    
    Signed-off-by: Orr Mazor <Orr.Mazor@tandemg.com>
    Reviewed-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Link: https://lore.kernel.org/r/20191222145449.15792-1-Orr.Mazor@tandemg.com
    [slightly reformat/reword commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01c2c23d3d5f575044aca35b2db2a82c9687810c
Author: Ganapathi Bhat <ganapathi.bhat@nxp.com>
Date:   Fri Dec 20 10:14:32 2019 +0000

    wireless: fix enabling channel 12 for custom regulatory domain
    
    [ Upstream commit c4b9d655e445a8be0bff624aedea190606b5ebbc ]
    
    Commit e33e2241e272 ("Revert "cfg80211: Use 5MHz bandwidth by
    default when checking usable channels"") fixed a broken
    regulatory (leaving channel 12 open for AP where not permitted).
    Apply a similar fix to custom regulatory domain processing.
    
    Signed-off-by: Cathy Luo <xiaohua.luo@nxp.com>
    Signed-off-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Link: https://lore.kernel.org/r/1576836859-8945-1-git-send-email-ganapathi.bhat@nxp.com
    [reword commit message, fix coding style, add a comment]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e62f296dbaeb9a007e9b2ba82be231c5d679d22
Author: Brendan Higgins <brendanhiggins@google.com>
Date:   Thu Dec 12 16:35:22 2019 -0800

    lkdtm/bugs: fix build error in lkdtm_UNSET_SMEP
    
    [ Upstream commit 0e31e3573f0cd94d7b821117db854187ffc85765 ]
    
    When building ARCH=um with CONFIG_UML_X86=y and CONFIG_64BIT=y we get
    the build errors:
    
    drivers/misc/lkdtm/bugs.c: In function ‘lkdtm_UNSET_SMEP’:
    drivers/misc/lkdtm/bugs.c:288:8: error: implicit declaration of function ‘native_read_cr4’ [-Werror=implicit-function-declaration]
      cr4 = native_read_cr4();
            ^~~~~~~~~~~~~~~
    drivers/misc/lkdtm/bugs.c:290:13: error: ‘X86_CR4_SMEP’ undeclared (first use in this function); did you mean ‘X86_FEATURE_SMEP’?
      if ((cr4 & X86_CR4_SMEP) != X86_CR4_SMEP) {
                 ^~~~~~~~~~~~
                 X86_FEATURE_SMEP
    drivers/misc/lkdtm/bugs.c:290:13: note: each undeclared identifier is reported only once for each function it appears in
    drivers/misc/lkdtm/bugs.c:297:2: error: implicit declaration of function ‘native_write_cr4’; did you mean ‘direct_write_cr4’? [-Werror=implicit-function-declaration]
      native_write_cr4(cr4);
      ^~~~~~~~~~~~~~~~
      direct_write_cr4
    
    So specify that this block of code should only build when
    CONFIG_X86_64=y *AND* CONFIG_UML is unset.
    
    Signed-off-by: Brendan Higgins <brendanhiggins@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20191213003522.66450-1-brendanhiggins@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b06c373db8a80c0dfccaa55728892702aaefb41
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Jan 3 17:39:25 2020 +0100

    parisc: Use proper printk format for resource_size_t
    
    [ Upstream commit 4f80b70e1953cb846dbdd1ce72cb17333d4c8d11 ]
    
    resource_size_t should be printed with its own size-independent format
    to fix warnings when compiling on 64-bit platform (e.g. with
    COMPILE_TEST):
    
        arch/parisc/kernel/drivers.c: In function 'print_parisc_device':
        arch/parisc/kernel/drivers.c:892:9: warning:
            format '%p' expects argument of type 'void *',
            but argument 4 has type 'resource_size_t {aka unsigned int}' [-Wformat=]
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1133c1796a1e4fa413a773a5ecceb4c40f2258b
Author: Kristian Evensen <kristian.evensen@gmail.com>
Date:   Mon Jan 13 14:57:40 2020 +0100

    qmi_wwan: Add support for Quectel RM500Q
    
    [ Upstream commit a9ff44f0e61d074f29770413fef6a5452be7b83e ]
    
    RM500Q is a 5G module from Quectel, supporting both standalone and
    non-standalone modes. The normal Quectel quirks apply (DTR and dynamic
    interface numbers).
    
    Signed-off-by: Kristian Evensen <kristian.evensen@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 422566f37e37ed4f1534f7d558ebe04c07e45373
Author: Arnaud Pouliquen <arnaud.pouliquen@st.com>
Date:   Mon Jan 13 11:04:00 2020 +0100

    ASoC: sti: fix possible sleep-in-atomic
    
    [ Upstream commit ce780a47c3c01e1e179d0792df6b853a913928f1 ]
    
    Change mutex and spinlock management to avoid sleep
    in atomic issue.
    
    Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@st.com>
    Link: https://lore.kernel.org/r/20200113100400.30472-1-arnaud.pouliquen@st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99ced2ecfe9ee41b25c6e663a57cd2e1d9bd9a81
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Jan 10 17:57:51 2020 -0600

    ASoC: hdac_hda: Fix error in driver removal after failed probe
    
    [ Upstream commit 552b1a85da9f63856e7e341b81c16e0e078204f1 ]
    
    In case system has multiple HDA codecs, and codec probe fails for
    at least one but not all codecs, driver will end up cancelling
    a non-initialized timer context upon driver removal.
    
    Call trace of typical case:
    
    [   60.593646] WARNING: CPU: 1 PID: 1147 at kernel/workqueue.c:3032
    __flush_work+0x18b/0x1a0
    [...]
    [   60.593670]  __cancel_work_timer+0x11f/0x1a0
    [   60.593673]  hdac_hda_dev_remove+0x25/0x30 [snd_soc_hdac_hda]
    [   60.593674]  device_release_driver_internal+0xe0/0x1c0
    [   60.593675]  bus_remove_device+0xd6/0x140
    [   60.593677]  device_del+0x175/0x3e0
    [   60.593679]  ? widget_tree_free.isra.7+0x90/0xb0 [snd_hda_core]
    [   60.593680]  snd_hdac_device_unregister+0x34/0x50 [snd_hda_core]
    [   60.593682]  snd_hdac_ext_bus_device_remove+0x2a/0x60 [snd_hda_ext_core]
    [   60.593684]  hda_dsp_remove+0x26/0x100 [snd_sof_intel_hda_common]
    [   60.593686]  snd_sof_device_remove+0x84/0xa0 [snd_sof]
    [   60.593687]  sof_pci_remove+0x10/0x30 [snd_sof_pci]
    [   60.593689]  pci_device_remove+0x36/0xb0
    
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200110235751.3404-9-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e43ab59fb1aa580a6549428d919f142936c43036
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Jan 10 17:57:50 2020 -0600

    ASoC: SOF: Intel: fix HDA codec driver probe with multiple controllers
    
    [ Upstream commit 2c63bea714780f8e1fc9cb7bc10deda26fada25b ]
    
    In case system has multiple HDA controllers, it can happen that
    same HDA codec driver is used for codecs of multiple controllers.
    In this case, SOF may fail to probe the HDA driver and SOF
    initialization fails.
    
    SOF HDA code currently relies that a call to request_module() will
    also run device matching logic to attach driver to the codec instance.
    However if driver for another HDA controller was already loaded and it
    already loaded the HDA codec driver, this breaks current logic in SOF.
    In this case the request_module() SOF does becomes a no-op and HDA
    Codec driver is not attached to the codec instance sitting on the HDA
    bus SOF is controlling. Typical scenario would be a system with both
    external and internal GPUs, with driver of the external GPU loaded
    first.
    
    Fix this by adding similar logic as is used in legacy HDA driver
    where an explicit device_attach() call is done after request_module().
    
    Also add logic to propagate errors reported by device_attach() back
    to caller. This also works in the case where drivers are not built
    as modules.
    
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200110235751.3404-8-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70149813320f7f5245d39da7473928690b2333d2
Author: Harry Pan <harry.pan@intel.com>
Date:   Mon Jan 6 17:57:00 2020 +0800

    platform/x86: intel_pmc_core: update Comet Lake platform driver
    
    [ Upstream commit 515ff674bb9bf06186052e352c4587dab8defaf0 ]
    
    Adding new CML CPU model ID into platform driver support list.
    
    Signed-off-by: Harry Pan <harry.pan@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 689233e8f9989b513c6350049cb6309fb40cb4c4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Jan 6 15:42:19 2020 +0100

    platform/x86: GPD pocket fan: Allow somewhat lower/higher temperature limits
    
    [ Upstream commit 1f27dbd8265dbb379926c8f6a4453fe7fe26d7a3 ]
    
    Allow the user to configure the fan to turn on / speed-up at lower
    thresholds then before (20 degrees Celcius as minimum instead of 40) and
    likewise also allow the user to delay the fan speeding-up till the
    temperature hits 90 degrees Celcius (was 70).
    
    Cc: Jason Anderson <jasona.594@gmail.com>
    Reported-by: Jason Anderson <jasona.594@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7790a471e80c01a5b2b83e4d9bd37581be32579e
Author: Stefan Assmann <sassmann@kpanic.de>
Date:   Tue Dec 17 11:29:23 2019 +0100

    iavf: remove current MAC address filter on VF reset
    
    [ Upstream commit 9e05229190380f6b8f702da39aaeb97a0fc80dc3 ]
    
    Currently MAC filters are not altered during a VF reset event. This may
    lead to a stale filter when an administratively set MAC is forced by the
    PF.
    
    For an administratively set MAC the PF driver deletes the VFs filters,
    overwrites the VFs MAC address and triggers a VF reset. However
    the VF driver itself is not aware of the filter removal, which is what
    the VF reset is for.
    The VF reset queues all filters present in the VF driver to be re-added
    to the PF filter list (including the filter for the now stale VF MAC
    address) and triggers a VIRTCHNL_OP_GET_VF_RESOURCES event, which
    provides the new MAC address to the VF.
    
    When this happens i40e will complain and reject the stale MAC filter,
    at least in the untrusted VF case.
    i40e 0000:08:00.0: Setting MAC 3c:fa:fa:fa:fa:01 on VF 0
    iavf 0000:08:02.0: Reset warning received from the PF
    iavf 0000:08:02.0: Scheduling reset task
    i40e 0000:08:00.0: Bring down and up the VF interface to make this change effective.
    i40e 0000:08:00.0: VF attempting to override administratively set MAC address, bring down and up the VF interface to resume normal operation
    i40e 0000:08:00.0: VF 0 failed opcode 10, retval: -1
    iavf 0000:08:02.0: Failed to add MAC filter, error IAVF_ERR_NVM
    
    To avoid re-adding the stale MAC filter it needs to be removed from the
    VF driver's filter list before queuing the existing filters. Then during
    the VIRTCHNL_OP_GET_VF_RESOURCES event the correct filter needs to be
    added again, at which point the MAC address has been updated.
    
    As a bonus this change makes bringing the VF down and up again
    superfluous for the administratively set MAC case.
    
    Signed-off-by: Stefan Assmann <sassmann@kpanic.de>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73613ce39d59c6659e286a0b9c4836e88c2e2637
Author: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
Date:   Wed Dec 4 11:40:26 2019 +0100

    igb: Fix SGMII SFP module discovery for 100FX/LX.
    
    [ Upstream commit 5365ec1aeff5b9f2962a9c9b31d63f9dad7e0e2d ]
    
    Changing the link mode should also be done for 100BaseFX SGMII modules,
    otherwise they just don't work when the default link mode in CTRL_EXT
    coming from the EEPROM is SERDES.
    
    Additionally 100Base-LX SGMII SFP modules are also supported now, which
    was not the case before.
    
    Tested with an i210 using Flexoptix S.1303.2M.G 100FX and
    S.1303.10.G 100LX SGMII SFP modules.
    
    Signed-off-by: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd335ee1e9e2446b333e59a9becf65805bb8fe3b
Author: Cambda Zhu <cambda@linux.alibaba.com>
Date:   Wed Nov 27 17:03:55 2019 +0800

    ixgbe: Fix calculation of queue with VFs and flow director on interface flap
    
    [ Upstream commit 4fad78ad6422d9bca62135bbed8b6abc4cbb85b8 ]
    
    This patch fixes the calculation of queue when we restore flow director
    filters after resetting adapter. In ixgbe_fdir_filter_restore(), filter's
    vf may be zero which makes the queue outside of the rx_ring array.
    
    The calculation is changed to the same as ixgbe_add_ethtool_fdir_entry().
    
    Signed-off-by: Cambda Zhu <cambda@linux.alibaba.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5113ff357d8103b0a4a3792d859d0569efa19b57
Author: Radoslaw Tyl <radoslawx.tyl@intel.com>
Date:   Mon Nov 25 15:24:52 2019 +0100

    ixgbevf: Remove limit of 10 entries for unicast filter list
    
    [ Upstream commit aa604651d523b1493988d0bf6710339f3ee60272 ]
    
    Currently, though the FDB entry is added to VF, it does not appear in
    RAR filters. VF driver only allows to add 10 entries. Attempting to add
    another causes an error. This patch removes limitation and allows use of
    all free RAR entries for the FDB if needed.
    
    Fixes: 46ec20ff7d ("ixgbevf: Add macvlan support in the set rx mode op")
    Signed-off-by: Radoslaw Tyl <radoslawx.tyl@intel.com>
    Acked-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be87d4f313e3d22bf39be962decba76f6f7b283c
Author: Brett Creeley <brett.creeley@intel.com>
Date:   Wed Nov 13 11:28:17 2019 -0800

    i40e: Fix virtchnl_queue_select bitmap validation
    
    [ Upstream commit d9d6a9aed3f66f8ce5fa3ca6ca26007d75032296 ]
    
    Currently in i40e_vc_disable_queues_msg() we are incorrectly
    validating the virtchnl queue select bitmaps. The
    virtchnl_queue_select rx_queues and tx_queue bitmap is being
    compared against ICE_MAX_VF_QUEUES, but the problem is that
    these bitmaps can have a value greater than I40E_MAX_VF_QUEUES.
    Fix this by comparing the bitmaps against BIT(I40E_MAX_VF_QUEUES).
    
    Also, add the function i40e_vc_validate_vqs_bitmaps() that checks to see
    if both virtchnl_queue_select bitmaps are empty along with checking that
    the bitmaps only have valid bits set. This function can then be used in
    both the queue enable and disable flows.
    
    Suggested-by: Arkady Gilinksky <arkady.gilinsky@harmonicinc.com>
    Signed-off-by: Brett Creeley <brett.creeley@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 557fda798eab15cb3afc863e23b987374701adbb
Author: Harald Freudenberger <freude@linux.ibm.com>
Date:   Fri Nov 22 16:30:06 2019 +0100

    s390/zcrypt: move ap device reset from bus to driver code
    
    [ Upstream commit 0c874cd04292c7ee22d70eefc341fa2648f41f46 ]
    
    This patch moves the reset invocation of an ap device when
    fresh detected from the ap bus to the probe() function of
    the driver responsible for this device.
    
    The virtualisation of ap devices makes it necessary to
    remove unconditioned resets on fresh appearing apqn devices.
    It may be that such a device is already enabled for guest
    usage. So there may be a race condition between host ap bus
    and guest ap bus doing the reset. This patch moves the
    reset from the ap bus to the zcrypt drivers. So if there
    is no zcrypt driver bound to an ap device - for example
    the ap device is bound to the vfio device driver - the
    ap device is untouched passed to the vfio device driver.
    
    Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a18f3a7dbbf7f0dfd6c5ad60ffedd445126ddbb
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jan 6 04:47:07 2020 +0300

    ASoC: rt5640: Fix NULL dereference on module unload
    
    [ Upstream commit 89b71b3f02d8ae5a08a1dd6f4a2098b7b868d498 ]
    
    The rt5640->jack is NULL if jack is already disabled at the time of
    driver's module unloading.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20200106014707.11378-1-digetx@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aab165d61cb463aaff312124c9b4c0c649448986
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Wed Dec 18 20:04:54 2019 +0100

    clk: mmp2: Fix the order of timer mux parents
    
    [ Upstream commit 8bea5ac0fbc5b2103f8779ddff216122e3c2e1ad ]
    
    Determined empirically, no documentation is available.
    
    The OLPC XO-1.75 laptop used parent 1, that one being VCTCXO/4 (65MHz), but
    thought it's a VCTCXO/2 (130MHz). The mmp2 timer driver, not knowing
    what is going on, ended up just dividing the rate as of
    commit f36797ee4380 ("ARM: mmp/mmp2: dt: enable the clock")'
    
    Link: https://lore.kernel.org/r/20191218190454.420358-3-lkundrak@v3.sk
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b4e524dc02bb38e6f4521375cb1a47086fa878d
Author: Markus Theil <markus.theil@tu-ilmenau.de>
Date:   Tue Dec 3 19:06:44 2019 +0100

    mac80211: mesh: restrict airtime metric to peered established plinks
    
    [ Upstream commit 02a614499600af836137c3fbc4404cd96365fff2 ]
    
    The following warning is triggered every time an unestablished mesh peer
    gets dumped. Checks if a peer link is established before retrieving the
    airtime link metric.
    
    [ 9563.022567] WARNING: CPU: 0 PID: 6287 at net/mac80211/mesh_hwmp.c:345
                   airtime_link_metric_get+0xa2/0xb0 [mac80211]
    [ 9563.022697] Hardware name: PC Engines apu2/apu2, BIOS v4.10.0.3
    [ 9563.022756] RIP: 0010:airtime_link_metric_get+0xa2/0xb0 [mac80211]
    [ 9563.022838] Call Trace:
    [ 9563.022897]  sta_set_sinfo+0x936/0xa10 [mac80211]
    [ 9563.022964]  ieee80211_dump_station+0x6d/0x90 [mac80211]
    [ 9563.023062]  nl80211_dump_station+0x154/0x2a0 [cfg80211]
    [ 9563.023120]  netlink_dump+0x17b/0x370
    [ 9563.023130]  netlink_recvmsg+0x2a4/0x480
    [ 9563.023140]  ____sys_recvmsg+0xa6/0x160
    [ 9563.023154]  ___sys_recvmsg+0x93/0xe0
    [ 9563.023169]  __sys_recvmsg+0x7e/0xd0
    [ 9563.023210]  do_syscall_64+0x4e/0x140
    [ 9563.023217]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Link: https://lore.kernel.org/r/20191203180644.70653-1-markus.theil@tu-ilmenau.de
    [rewrite commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 096837d4b4955985a2bfd51ce1241e51a41bd794
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Dec 28 20:59:22 2019 -0600

    clk: sunxi-ng: h6-r: Fix AR100/R_APB2 parent order
    
    [ Upstream commit 0c545240aebc2ccb8f661dc54283a14d64659804 ]
    
    According to the BSP source code, both the AR100 and R_APB2 clocks have
    PLL_PERIPH0 as mux index 3, not 2 as it was on previous chips. The pre-
    divider used for PLL_PERIPH0 should be changed to index 3 to match.
    
    This was verified by running a rough benchmark on the AR100 with various
    clock settings:
    
            | mux | pre-divider | iterations/second | clock source |
            |=====|=============|===================|==============|
            |   0 |           0 |  19033   (stable) |       osc24M |
            |   2 |           5 |  11466 (unstable) |  iosc/osc16M |
            |   2 |          17 |  11422 (unstable) |  iosc/osc16M |
            |   3 |           5 |  85338   (stable) |  pll-periph0 |
            |   3 |          17 |  27167   (stable) |  pll-periph0 |
    
    The relative performance numbers all match up (with pll-periph0 running
    at its default 600MHz).
    
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e619af70d133e0a1a30520f460b7433a708ebe2e
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Dec 28 20:59:20 2019 -0600

    clk: sunxi-ng: sun8i-r: Fix divider on APB0 clock
    
    [ Upstream commit 47d64fef1f3ffbdf960d3330b9865fc9f12fdf84 ]
    
    According to the BSP source code, the APB0 clock on the H3 and H5 has a
    normal M divider, not a power-of-two divider. This matches the hardware
    in the A83T (as described in both the BSP source code and the manual).
    Since the A83T and H3/A64 clocks are actually the same, we can merge the
    definitions.
    
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95c892061e903e612a2e2fe3ba29c3d0ad273df5
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Wed Dec 11 11:17:12 2019 -0500

    rseq: Unregister rseq for clone CLONE_VM
    
    [ Upstream commit 463f550fb47bede3a5d7d5177f363a6c3b45d50b ]
    
    It has been reported by Google that rseq is not behaving properly
    with respect to clone when CLONE_VM is used without CLONE_THREAD.
    
    It keeps the prior thread's rseq TLS registered when the TLS of the
    thread has moved, so the kernel can corrupt the TLS of the parent.
    
    The approach of clearing the per task-struct rseq registration
    on clone with CLONE_THREAD flag is incomplete. It does not cover
    the use-case of clone with CLONE_VM set, but without CLONE_THREAD.
    
    Here is the rationale for unregistering rseq on clone with CLONE_VM
    flag set:
    
    1) CLONE_THREAD requires CLONE_SIGHAND, which requires CLONE_VM to be
       set. Therefore, just checking for CLONE_VM covers all CLONE_THREAD
       uses. There is no point in checking for both CLONE_THREAD and
       CLONE_VM,
    
    2) There is the possibility of an unlikely scenario where CLONE_SETTLS
       is used without CLONE_VM. In order to be an issue, it would require
       that the rseq TLS is in a shared memory area.
    
       I do not plan on adding CLONE_SETTLS to the set of clone flags which
       unregister RSEQ, because it would require that we also unregister RSEQ
       on set_thread_area(2) and arch_prctl(2) ARCH_SET_FS for completeness.
       So rather than doing a partial solution, it appears better to let
       user-space explicitly perform rseq unregistration across clone if
       needed in scenarios where CLONE_VM is not set.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191211161713.4490-3-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91f91139d32fa74b99812395ffcb3f87647f0f28
Author: Hewenliang <hewenliang4@huawei.com>
Date:   Mon Dec 9 01:35:49 2019 -0500

    tools lib traceevent: Fix memory leakage in filter_event
    
    [ Upstream commit f84ae29a6169318f9c929720c49d96323d2bbab9 ]
    
    It is necessary to call free_arg(arg) when add_filter_type() returns NULL
    in filter_event().
    
    Signed-off-by: Hewenliang <hewenliang4@huawei.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Feilong Lin <linfeilong@huawei.com>
    Cc: Tzvetomir Stoyanov <tstoyanov@vmware.com>
    Link: http://lore.kernel.org/lkml/20191209063549.59941-1-hewenliang4@huawei.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22946b83976854ababbe73b1b56cbe6e6a55db48
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Wed Dec 11 22:03:14 2019 -0600

    soc: ti: wkup_m3_ipc: Fix race condition with rproc_boot
    
    [ Upstream commit 03729cfa0d543bc996bf959e762ec999afc8f3d2 ]
    
    Any user of wkup_m3_ipc calls wkup_m3_ipc_get to get a handle and this
    checks the value of the static variable m3_ipc_state to see if the
    wkup_m3 is ready. Currently this is populated during probe before
    rproc_boot has been called, meaning there is a window of time that
    wkup_m3_ipc_get can return a valid handle but the wkup_m3 itself is not
    ready, leading to invalid IPC calls to the wkup_m3 and system
    instability.
    
    To avoid this, move the population of the m3_ipc_state variable until
    after rproc_boot has succeeded to guarantee a valid and usable handle
    is always returned.
    
    Reported-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adba4a2a5273c4573aa7c6e703b81eb6a05f230f
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Dec 17 14:21:24 2019 +0530

    ARM: dts: beagle-x15-common: Model 5V0 regulator
    
    [ Upstream commit e17e7c498d4f734df93c300441e100818ed58168 ]
    
    On am57xx-beagle-x15, 5V0 is connected to P16, P17, P18 and P19
    connectors. On am57xx-evm, 5V0 regulator is used to get 3V6 regulator
    which is connected to the COMQ port. Model 5V0 regulator here in order
    for it to be used in am57xx-evm to model 3V6 regulator.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a14c121d4e4ca0ed0aa2401b89f3a75fd2f8ecd
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Dec 17 14:21:22 2019 +0530

    ARM: dts: am57xx-beagle-x15/am57xx-idk: Remove "gpios" for endpoint dt nodes
    
    [ Upstream commit 81cc0877840f72210e809bbedd6346d686560fc1 ]
    
    PERST# line in the PCIE connector is driven by the host mode and not
    EP mode. The gpios property here is used for driving the PERST# line.
    Remove gpios property from all endpoint device tree nodes.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5cbe8ad1b604c8c3b5a92b7dec14d2c8de2b856
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Wed Dec 11 15:52:17 2019 +0100

    ARM: dts: sun8i: a83t: Correct USB3503 GPIOs polarity
    
    [ Upstream commit 1c226017d3ec93547b58082bdf778d9db7401c95 ]
    
    Current USB3503 driver ignores GPIO polarity and always operates as if the
    GPIO lines were flagged as ACTIVE_HIGH. Fix the polarity for the existing
    USB3503 chip applications to match the chip specification and common
    convention for naming the pins. The only pin, which has to be ACTIVE_LOW
    is the reset pin. The remaining are ACTIVE_HIGH. This change allows later
    to fix the USB3503 driver to properly use generic GPIO bindings and read
    polarity from DT.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8b0d16e4c7f0e27a5dcee512c7b94b9e43cd506
Author: Guillaume La Roque <glaroque@baylibre.com>
Date:   Thu Dec 5 14:19:00 2019 +0100

    arm64: dts: meson-sm1-sei610: add gpio bluetooth interrupt
    
    [ Upstream commit 30388cc075720aa0af4f2cb5933afa1f8f39d313 ]
    
    add gpio irq to support interrupt trigger mode.
    
    Signed-off-by: Guillaume La Roque <glaroque@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0a7b02147ad40685298c42444a6c470970ccf95
Author: Yunhao Tian <18373444@buaa.edu.cn>
Date:   Mon Nov 25 20:58:32 2019 +0800

    clk: sunxi-ng: v3s: Fix incorrect number of hw_clks.
    
    [ Upstream commit 4ff40d140e2a2060ef6051800a4a9eab07624f42 ]
    
    The hws field of sun8i_v3s_hw_clks has only 74
    members. However, the number specified by CLK_NUMBER
    is 77 (= CLK_I2S0 + 1). This leads to runtime segmentation
    fault that is not always reproducible.
    
    This patch fixes the problem by specifying correct clock number.
    
    Signed-off-by: Yunhao Tian <18373444@buaa.edu.cn>
    [Maxime: Also remove the CLK_NUMBER definition]
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ea87219a9c7ee9b705dddaad5c8c5e9d6607814
Author: Michal Koutný <mkoutny@suse.com>
Date:   Thu Jan 9 16:05:59 2020 +0100

    cgroup: Prevent double killing of css when enabling threaded cgroup
    
    commit 3bc0bb36fa30e95ca829e9cf480e1ef7f7638333 upstream.
    
    The test_cgcore_no_internal_process_constraint_on_threads selftest when
    running with subsystem controlling noise triggers two warnings:
    
    > [  597.443115] WARNING: CPU: 1 PID: 28167 at kernel/cgroup/cgroup.c:3131 cgroup_apply_control_enable+0xe0/0x3f0
    > [  597.443413] WARNING: CPU: 1 PID: 28167 at kernel/cgroup/cgroup.c:3177 cgroup_apply_control_disable+0xa6/0x160
    
    Both stem from a call to cgroup_type_write. The first warning was also
    triggered by syzkaller.
    
    When we're switching cgroup to threaded mode shortly after a subsystem
    was disabled on it, we can see the respective subsystem css dying there.
    
    The warning in cgroup_apply_control_enable is harmless in this case
    since we're not adding new subsys anyway.
    The warning in cgroup_apply_control_disable indicates an attempt to kill
    css of recently disabled subsystem repeatedly.
    
    The commit prevents these situations by making cgroup_type_write wait
    for all dying csses to go away before re-applying subtree controls.
    When at it, the locations of WARN_ON_ONCE calls are moved so that
    warning is triggered only when we are about to misuse the dying css.
    
    Reported-by: syzbot+5493b2a54d31d6aea629@syzkaller.appspotmail.com
    Reported-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Michal Koutný <mkoutny@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07d00820bf987985e04a1e9abf63bc1b1aff3aa5
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jan 15 20:49:04 2020 +0300

    Bluetooth: Fix race condition in hci_release_sock()
    
    commit 11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8 upstream.
    
    Syzbot managed to trigger a use after free "KASAN: use-after-free Write
    in hci_sock_bind".  I have reviewed the code manually and one possibly
    cause I have found is that we are not holding lock_sock(sk) when we do
    the hci_dev_put(hdev) in hci_sock_release().  My theory is that the bind
    and the release are racing against each other which results in this use
    after free.
    
    Reported-by: syzbot+eba992608adf3d796bcc@syzkaller.appspotmail.com
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f39406a925b09130b5baa53bb09d416ef64e38a7
Author: Zhenzhong Duan <zhenzhong.duan@gmail.com>
Date:   Mon Jan 13 11:48:42 2020 +0800

    ttyprintk: fix a potential deadlock in interrupt context issue
    
    commit 9a655c77ff8fc65699a3f98e237db563b37c439b upstream.
    
    tpk_write()/tpk_close() could be interrupted when holding a mutex, then
    in timer handler tpk_write() may be called again trying to acquire same
    mutex, lead to deadlock.
    
    Google syzbot reported this issue with CONFIG_DEBUG_ATOMIC_SLEEP
    enabled:
    
    BUG: sleeping function called from invalid context at
    kernel/locking/mutex.c:938
    in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 0, name: swapper/1
    1 lock held by swapper/1/0:
    ...
    Call Trace:
      <IRQ>
      dump_stack+0x197/0x210
      ___might_sleep.cold+0x1fb/0x23e
      __might_sleep+0x95/0x190
      __mutex_lock+0xc5/0x13c0
      mutex_lock_nested+0x16/0x20
      tpk_write+0x5d/0x340
      resync_tnc+0x1b6/0x320
      call_timer_fn+0x1ac/0x780
      run_timer_softirq+0x6c3/0x1790
      __do_softirq+0x262/0x98c
      irq_exit+0x19b/0x1e0
      smp_apic_timer_interrupt+0x1a3/0x610
      apic_timer_interrupt+0xf/0x20
      </IRQ>
    
    See link https://syzkaller.appspot.com/bug?extid=2eeef62ee31f9460ad65 for
    more details.
    
    Fix it by using spinlock in process context instead of mutex and having
    interrupt disabled in critical section.
    
    Reported-by: syzbot+2eeef62ee31f9460ad65@syzkaller.appspotmail.com
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200113034842.435-1-zhenzhong.duan@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99652ee9c51669706216af7b6a32b4b792263c95
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu Jan 2 12:53:49 2020 +0900

    tomoyo: Use atomic_t for statistics counter
    
    commit a8772fad0172aeae339144598b809fd8d4823331 upstream.
    
    syzbot is reporting that there is a race at tomoyo_stat_update() [1].
    Although it is acceptable to fail to track exact number of times policy
    was updated, convert to atomic_t because this is not a hot path.
    
    [1] https://syzkaller.appspot.com/bug?id=a4d7b973972eeed410596e6604580e0133b0fc04
    
    Reported-by: syzbot <syzbot+efea72d4a0a1d03596cd@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b3fd0cb4216fe3027be8c4b57d68c1c7e0dfb7
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Nov 12 10:22:28 2019 +0100

    media: dvb-usb/dvb-usb-urb.c: initialize actlen to 0
    
    commit 569bc8d6a6a50acb5fcf07fb10b8d2d461fdbf93 upstream.
    
    This fixes a syzbot failure since actlen could be uninitialized,
    but it was still used.
    
    Syzbot link:
    
    https://syzkaller.appspot.com/bug?extid=6bf9606ee955b646c0e1
    
    Reported-and-tested-by: syzbot+6bf9606ee955b646c0e1@syzkaller.appspotmail.com
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Acked-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f416aac94c122b842aa4baf8b431d9f0ea927afd
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Nov 12 10:22:24 2019 +0100

    media: gspca: zero usb_buf
    
    commit de89d0864f66c2a1b75becfdd6bf3793c07ce870 upstream.
    
    Allocate gspca_dev->usb_buf with kzalloc instead of kmalloc to
    ensure it is property zeroed. This fixes various syzbot errors
    about uninitialized data.
    
    Syzbot links:
    
    https://syzkaller.appspot.com/bug?extid=32310fc2aea76898d074
    https://syzkaller.appspot.com/bug?extid=99706d6390be1ac542a2
    https://syzkaller.appspot.com/bug?extid=64437af5c781a7f0e08e
    
    Reported-and-tested-by: syzbot+32310fc2aea76898d074@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+99706d6390be1ac542a2@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+64437af5c781a7f0e08e@syzkaller.appspotmail.com
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d35ef79fbc97b18a99daff29f1c8a02e4ca78ca8
Author: Sean Young <sean@mess.org>
Date:   Sun Nov 10 11:25:13 2019 +0100

    media: vp7045: do not read uninitialized values if usb transfer fails
    
    commit 26cff637121d8bb866ebd6515c430ac890e6ec80 upstream.
    
    It is not a fatal error if reading the mac address or the remote control
    decoder state fails.
    
    Reported-by: syzbot+ec869945d3dde5f33b43@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c7cc4c9c2bb6cd5e731b4d51d056fe590f0b76c
Author: Sean Young <sean@mess.org>
Date:   Sun Nov 10 11:15:37 2019 +0100

    media: af9005: uninitialized variable printked
    
    commit 51d0c99b391f0cac61ad7b827c26f549ee55672c upstream.
    
    If usb_bulk_msg() fails, actual_length can be uninitialized.
    
    Reported-by: syzbot+9d42b7773d2fecd983ab@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b256eea1ae66e8d2f3ae2f0e8358ba154fb1a40
Author: Sean Young <sean@mess.org>
Date:   Sun Nov 10 11:04:40 2019 +0100

    media: digitv: don't continue if remote control state can't be read
    
    commit eecc70d22ae51225de1ef629c1159f7116476b2e upstream.
    
    This results in an uninitialized variable read.
    
    Reported-by: syzbot+6bf9606ee955b646c0e1@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 761a10b67a117745ece1f7eb8b188a9866a1fa1e
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 12 11:30:03 2019 +0100

    reiserfs: Fix memory leak of journal device string
    
    commit 5474ca7da6f34fa95e82edc747d5faa19cbdfb5c upstream.
    
    When a filesystem is mounted with jdev mount option, we store the
    journal device name in an allocated string in superblock. However we
    fail to ever free that string. Fix it.
    
    Reported-by: syzbot+1c6756baf4b16b94d2a6@syzkaller.appspotmail.com
    Fixes: c3aa077648e1 ("reiserfs: Properly display mount options in /proc/mounts")
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bcdb8ba5a3d8634bdbf917b3c7e24d045ad8f5f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 30 22:11:07 2020 -0800

    mm/mempolicy.c: fix out of bounds write in mpol_parse_str()
    
    commit c7a91bc7c2e17e0a9c8b9745a2cb118891218fd1 upstream.
    
    What we are trying to do is change the '=' character to a NUL terminator
    and then at the end of the function we restore it back to an '='.  The
    problem is there are two error paths where we jump to the end of the
    function before we have replaced the '=' with NUL.
    
    We end up putting the '=' in the wrong place (possibly one element
    before the start of the buffer).
    
    Link: http://lkml.kernel.org/r/20200115055426.vdjwvry44nfug7yy@kili.mountain
    Reported-by: syzbot+e64a13c5369a194d67df@syzkaller.appspotmail.com
    Fixes: 095f1fc4ebf3 ("mempolicy: rework shmem mpol parsing and display")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Dmitry Vyukov <dvyukov@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7965bc367e706a914254f44bb82015716d55fb20
Author: Dirk Behme <dirk.behme@de.bosch.com>
Date:   Tue Jan 21 16:54:39 2020 +0100

    arm64: kbuild: remove compressed images on 'make ARCH=arm64 (dist)clean'
    
    commit d7bbd6c1b01cb5dd13c245d4586a83145c1d5f52 upstream.
    
    Since v4.3-rc1 commit 0723c05fb75e44 ("arm64: enable more compressed
    Image formats"), it is possible to build Image.{bz2,lz4,lzma,lzo}
    AArch64 images. However, the commit missed adding support for removing
    those images on 'make ARCH=arm64 (dist)clean'.
    
    Fix this by adding them to the target list.
    Make sure to match the order of the recipes in the makefile.
    
    Cc: stable@vger.kernel.org # v4.3+
    Fixes: 0723c05fb75e44 ("arm64: enable more compressed Image formats")
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Reviewed-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e77625d1f8ff02d5663092019fe41aa9acab12d3
Author: Vitaly Chikunov <vt@altlinux.org>
Date:   Tue Dec 24 20:20:29 2019 +0300

    tools lib: Fix builds when glibc contains strlcpy()
    
    commit 6c4798d3f08b81c2c52936b10e0fa872590c96ae upstream.
    
    Disable a couple of compilation warnings (which are treated as errors)
    on strlcpy() definition and declaration, allowing users to compile perf
    and kernel (objtool) when:
    
    1. glibc have strlcpy() (such as in ALT Linux since 2004) objtool and
       perf build fails with this (in gcc):
    
      In file included from exec-cmd.c:3:
      tools/include/linux/string.h:20:15: error: redundant redeclaration of ‘strlcpy’ [-Werror=redundant-decls]
         20 | extern size_t strlcpy(char *dest, const char *src, size_t size);
    
    2. clang ignores `-Wredundant-decls', but produces another warning when
       building perf:
    
        CC       util/string.o
      ../lib/string.c:99:8: error: attribute declaration must precede definition [-Werror,-Wignored-attributes]
      size_t __weak strlcpy(char *dest, const char *src, size_t size)
      ../../tools/include/linux/compiler.h:66:34: note: expanded from macro '__weak'
      # define __weak                 __attribute__((weak))
      /usr/include/bits/string_fortified.h:151:8: note: previous definition is here
      __NTH (strlcpy (char *__restrict __dest, const char *__restrict __src,
    
    Committer notes:
    
    The
    
     #pragma GCC diagnostic
    
    directive was introduced in gcc 4.6, so check for that as well.
    
    Fixes: ce99091 ("perf tools: Move strlcpy() from perf to tools/lib/string.c")
    Fixes: 0215d59 ("tools lib: Reinstate strlcpy() header guard with __UCLIBC__")
    Resolves: https://bugzilla.kernel.org/show_bug.cgi?id=118481
    Signed-off-by: Vitaly Chikunov <vt@altlinux.org>
    Reviewed-by: Dmitry Levin <ldv@altlinux.org>
    Cc: Dmitry Levin <ldv@altlinux.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: kbuild test robot <lkp@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Cc: Vineet Gupta <vineet.gupta1@synopsys.com>
    Link: http://lore.kernel.org/lkml/20191224172029.19690-1-vt@altlinux.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da1321fc1405e24b7ffb3fac670b67ae700bc5ce
Author: Chanwoo Choi <cw00.choi@samsung.com>
Date:   Tue Nov 5 18:18:03 2019 +0900

    PM / devfreq: Add new name attribute for sysfs
    
    commit 2fee1a7cc6b1ce6634bb0f025be2c94a58dfa34d upstream.
    
    The commit 4585fbcb5331 ("PM / devfreq: Modify the device name as devfreq(X) for
    sysfs") changed the node name to devfreq(x). After this commit, it is not
    possible to get the device name through /sys/class/devfreq/devfreq(X)/*.
    
    Add new name attribute in order to get device name.
    
    Cc: stable@vger.kernel.org
    Fixes: 4585fbcb5331 ("PM / devfreq: Modify the device name as devfreq(X) for sysfs")
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9fac00465791b62eaf3bad5c36f85e59958c651
Author: Andres Freund <andres@anarazel.de>
Date:   Wed Jan 8 20:30:30 2020 -0800

    perf c2c: Fix return type for histogram sorting comparision functions
    
    commit c1c8013ec34d7163431d18367808ea40b2e305f8 upstream.
    
    Commit 722ddfde366f ("perf tools: Fix time sorting") changed - correctly
    so - hist_entry__sort to return int64. Unfortunately several of the
    builtin-c2c.c comparison routines only happened to work due the cast
    caused by the wrong return type.
    
    This causes meaningless ordering of both the cacheline list, and the
    cacheline details page. E.g a simple:
    
      perf c2c record -a sleep 3
      perf c2c report
    
    will result in cacheline table like
      =================================================
                 Shared Data Cache Line Table
      =================================================
      #
      #        ------- Cacheline ----------    Total     Tot  - LLC Load Hitm -  - Store Reference -  - Load Dram -     LLC  Total  - Core Load Hit -  - LLC Load Hit -
      # Index         Address  Node  PA cnt  records    Hitm  Total  Lcl    Rmt  Total  L1Hit  L1Miss     Lcl   Rmt  Ld Miss  Loads    FB    L1   L2     Llc      Rmt
      # .....  ..............  ....  ......  .......  ......  .....  .....  ...  ....   .....  ......  ......  ....  ......   .....  .....  ..... ...  ....     .......
    
            0  0x7f0d27ffba00   N/A       0       52   0.12%     13      6    7    12      12       0       0     7      14      40      4     16    0    0           0
            1  0x7f0d27ff61c0   N/A       0     6353  14.04%   1475    801  674   779     779       0       0   718    1392    5574   1299   1967    0  115           0
            2  0x7f0d26d3ec80   N/A       0       71   0.15%     16      4   12    13      13       0       0    12      24      58      1     20    0    9           0
            3  0x7f0d26d3ec00   N/A       0       98   0.22%     23     17    6    19      19       0       0     6      12      79      0     40    0   10           0
    
    i.e. with the list not being ordered by Total Hitm.
    
    Fixes: 722ddfde366f ("perf tools: Fix time sorting")
    Signed-off-by: Andres Freund <andres@anarazel.de>
    Tested-by: Michael Petlan <mpetlan@redhat.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org # v3.16+
    Link: http://lore.kernel.org/lkml/20200109043030.233746-1-andres@anarazel.de
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73774def78ece8a3521a6160c883b40eb8ffdd4a
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Sun Dec 8 13:12:49 2019 +0000

    gfs2: Another gfs2_find_jhead fix
    
    commit eed0f953b90e86e765197a1dad06bb48aedc27fe upstream.
    
    On filesystems with a block size smaller than the page size,
    gfs2_find_jhead can split a page across two bios (for example, when
    blocks are not allocated consecutively).  When that happens, the first
    bio that completes will unlock the page in its bi_end_io handler even
    though the page hasn't been read completely yet.  Fix that by using a
    chained bio for the rest of the page.
    
    While at it, clean up the sector calculation logic in
    gfs2_log_alloc_bio.  In gfs2_find_jhead, simplify the disk block and
    offset calculation logic and fix a variable name.
    
    Fixes: f4686c26ecc3 ("gfs2: read journal in large chunks")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d635e7c4b34e6a630c7a1e8f1a8fd52c3e3ceea7
Author: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Date:   Sat Jan 4 23:29:22 2020 -0800

    e1000e: Revert "e1000e: Make watchdog use delayed work"
    
    [ Upstream commit d5ad7a6a7f3c87b278d7e4973b65682be4e588dd ]
    
    This reverts commit 59653e6497d16f7ac1d9db088f3959f57ee8c3db.
    
    This is due to this commit causing driver crashes and connections to
    reset unexpectedly.
    
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21c6137939723ed6f5e4aec7882cdfc247304c27
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Fri Oct 11 08:34:59 2019 -0700

    e1000e: Drop unnecessary __E1000_DOWN bit twiddling
    
    [ Upstream commit daee5598e491d8d3979bd4ad6c447d89ce57b446 ]
    
    Since we no longer check for __E1000_DOWN in e1000e_close we can drop the
    spot where we were restoring the bit. This saves us a bit of unnecessary
    complexity.
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ca5637ec665a2fb0c7e2a562926b34e8ed2a2cc
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Thu Jan 9 00:28:04 2020 +0800

    x86/resctrl: Fix use-after-free due to inaccurate refcount of rdtgroup
    
    [ Upstream commit 074fadee59ee7a9d2b216e9854bd4efb5dad679f ]
    
    There is a race condition in the following scenario which results in an
    use-after-free issue when reading a monitoring file and deleting the
    parent ctrl_mon group concurrently:
    
    Thread 1 calls atomic_inc() to take refcount of rdtgrp and then calls
    kernfs_break_active_protection() to drop the active reference of kernfs
    node in rdtgroup_kn_lock_live().
    
    In Thread 2, kernfs_remove() is a blocking routine. It waits on all sub
    kernfs nodes to drop the active reference when removing all subtree
    kernfs nodes recursively. Thread 2 could block on kernfs_remove() until
    Thread 1 calls kernfs_break_active_protection(). Only after
    kernfs_remove() completes the refcount of rdtgrp could be trusted.
    
    Before Thread 1 calls atomic_inc() and kernfs_break_active_protection(),
    Thread 2 could call kfree() when the refcount of rdtgrp (sentry) is 0
    instead of 1 due to the race.
    
    In Thread 1, in rdtgroup_kn_unlock(), referring to earlier rdtgrp memory
    (rdtgrp->waitcount) which was already freed in Thread 2 results in
    use-after-free issue.
    
    Thread 1 (rdtgroup_mondata_show)  Thread 2 (rdtgroup_rmdir)
    --------------------------------  -------------------------
    rdtgroup_kn_lock_live
      /*
       * kn active protection until
       * kernfs_break_active_protection(kn)
       */
      rdtgrp = kernfs_to_rdtgroup(kn)
                                      rdtgroup_kn_lock_live
                                        atomic_inc(&rdtgrp->waitcount)
                                        mutex_lock
                                      rdtgroup_rmdir_ctrl
                                        free_all_child_rdtgrp
                                          /*
                                           * sentry->waitcount should be 1
                                           * but is 0 now due to the race.
                                           */
                                          kfree(sentry)*[1]
      /*
       * Only after kernfs_remove()
       * completes, the refcount of
       * rdtgrp could be trusted.
       */
      atomic_inc(&rdtgrp->waitcount)
      /* kn->active-- */
      kernfs_break_active_protection(kn)
                                        rdtgroup_ctrl_remove
                                          rdtgrp->flags = RDT_DELETED
                                          /*
                                           * Blocking routine, wait for
                                           * all sub kernfs nodes to drop
                                           * active reference in
                                           * kernfs_break_active_protection.
                                           */
                                          kernfs_remove(rdtgrp->kn)
                                      rdtgroup_kn_unlock
                                        mutex_unlock
                                        atomic_dec_and_test(
                                                    &rdtgrp->waitcount)
                                        && (flags & RDT_DELETED)
                                          kernfs_unbreak_active_protection(kn)
                                          kfree(rdtgrp)
      mutex_lock
    mon_event_read
    rdtgroup_kn_unlock
      mutex_unlock
      /*
       * Use-after-free: refer to earlier rdtgrp
       * memory which was freed in [1].
       */
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
        /* kn->active++ */
        kernfs_unbreak_active_protection(kn)
        kfree(rdtgrp)
    
    Fix it by moving free_all_child_rdtgrp() to after kernfs_remove() in
    rdtgroup_rmdir_ctrl() to ensure it has the accurate refcount of rdtgrp.
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1578500886-21771-3-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40300f986e47dbc8f1d02e5080385f5cf9f85f70
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Thu Jan 9 00:28:03 2020 +0800

    x86/resctrl: Fix use-after-free when deleting resource groups
    
    [ Upstream commit b8511ccc75c033f6d54188ea4df7bf1e85778740 ]
    
    A resource group (rdtgrp) contains a reference count (rdtgrp->waitcount)
    that indicates how many waiters expect this rdtgrp to exist. Waiters
    could be waiting on rdtgroup_mutex or some work sitting on a task's
    workqueue for when the task returns from kernel mode or exits.
    
    The deletion of a rdtgrp is intended to have two phases:
    
      (1) while holding rdtgroup_mutex the necessary cleanup is done and
      rdtgrp->flags is set to RDT_DELETED,
    
      (2) after releasing the rdtgroup_mutex, the rdtgrp structure is freed
      only if there are no waiters and its flag is set to RDT_DELETED. Upon
      gaining access to rdtgroup_mutex or rdtgrp, a waiter is required to check
      for the RDT_DELETED flag.
    
    When unmounting the resctrl file system or deleting ctrl_mon groups,
    all of the subdirectories are removed and the data structure of rdtgrp
    is forcibly freed without checking rdtgrp->waitcount. If at this point
    there was a waiter on rdtgrp then a use-after-free issue occurs when the
    waiter starts running and accesses the rdtgrp structure it was waiting
    on.
    
    See kfree() calls in [1], [2] and [3] in these two call paths in
    following scenarios:
    (1) rdt_kill_sb() -> rmdir_all_sub() -> free_all_child_rdtgrp()
    (2) rdtgroup_rmdir() -> rdtgroup_rmdir_ctrl() -> free_all_child_rdtgrp()
    
    There are several scenarios that result in use-after-free issue in
    following:
    
    Scenario 1:
    -----------
    In Thread 1, rdtgroup_tasks_write() adds a task_work callback
    move_myself(). If move_myself() is scheduled to execute after Thread 2
    rdt_kill_sb() is finished, referring to earlier rdtgrp memory
    (rdtgrp->waitcount) which was already freed in Thread 2 results in
    use-after-free issue.
    
    Thread 1 (rdtgroup_tasks_write)        Thread 2 (rdt_kill_sb)
    -------------------------------        ----------------------
    rdtgroup_kn_lock_live
      atomic_inc(&rdtgrp->waitcount)
      mutex_lock
    rdtgroup_move_task
      __rdtgroup_move_task
        /*
         * Take an extra refcount, so rdtgrp cannot be freed
         * before the call back move_myself has been invoked
         */
        atomic_inc(&rdtgrp->waitcount)
        /* Callback move_myself will be scheduled for later */
        task_work_add(move_myself)
    rdtgroup_kn_unlock
      mutex_unlock
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
                                           mutex_lock
                                           rmdir_all_sub
                                             /*
                                              * sentry and rdtgrp are freed
                                              * without checking refcount
                                              */
                                             free_all_child_rdtgrp
                                               kfree(sentry)*[1]
                                             kfree(rdtgrp)*[2]
                                           mutex_unlock
    /*
     * Callback is scheduled to execute
     * after rdt_kill_sb is finished
     */
    move_myself
      /*
       * Use-after-free: refer to earlier rdtgrp
       * memory which was freed in [1] or [2].
       */
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
        kfree(rdtgrp)
    
    Scenario 2:
    -----------
    In Thread 1, rdtgroup_tasks_write() adds a task_work callback
    move_myself(). If move_myself() is scheduled to execute after Thread 2
    rdtgroup_rmdir() is finished, referring to earlier rdtgrp memory
    (rdtgrp->waitcount) which was already freed in Thread 2 results in
    use-after-free issue.
    
    Thread 1 (rdtgroup_tasks_write)        Thread 2 (rdtgroup_rmdir)
    -------------------------------        -------------------------
    rdtgroup_kn_lock_live
      atomic_inc(&rdtgrp->waitcount)
      mutex_lock
    rdtgroup_move_task
      __rdtgroup_move_task
        /*
         * Take an extra refcount, so rdtgrp cannot be freed
         * before the call back move_myself has been invoked
         */
        atomic_inc(&rdtgrp->waitcount)
        /* Callback move_myself will be scheduled for later */
        task_work_add(move_myself)
    rdtgroup_kn_unlock
      mutex_unlock
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
                                           rdtgroup_kn_lock_live
                                             atomic_inc(&rdtgrp->waitcount)
                                             mutex_lock
                                           rdtgroup_rmdir_ctrl
                                             free_all_child_rdtgrp
                                               /*
                                                * sentry is freed without
                                                * checking refcount
                                                */
                                               kfree(sentry)*[3]
                                             rdtgroup_ctrl_remove
                                               rdtgrp->flags = RDT_DELETED
                                           rdtgroup_kn_unlock
                                             mutex_unlock
                                             atomic_dec_and_test(
                                                         &rdtgrp->waitcount)
                                             && (flags & RDT_DELETED)
                                               kfree(rdtgrp)
    /*
     * Callback is scheduled to execute
     * after rdt_kill_sb is finished
     */
    move_myself
      /*
       * Use-after-free: refer to earlier rdtgrp
       * memory which was freed in [3].
       */
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
        kfree(rdtgrp)
    
    If CONFIG_DEBUG_SLAB=y, Slab corruption on kmalloc-2k can be observed
    like following. Note that "0x6b" is POISON_FREE after kfree(). The
    corrupted bits "0x6a", "0x64" at offset 0x424 correspond to
    waitcount member of struct rdtgroup which was freed:
    
      Slab corruption (Not tainted): kmalloc-2k start=ffff9504c5b0d000, len=2048
      420: 6b 6b 6b 6b 6a 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkjkkkkkkkkkkk
      Single bit error detected. Probably bad RAM.
      Run memtest86+ or a similar memory test tool.
      Next obj: start=ffff9504c5b0d800, len=2048
      000: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      010: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
    
      Slab corruption (Not tainted): kmalloc-2k start=ffff9504c58ab800, len=2048
      420: 6b 6b 6b 6b 64 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkdkkkkkkkkkkk
      Prev obj: start=ffff9504c58ab000, len=2048
      000: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      010: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
    
    Fix this by taking reference count (waitcount) of rdtgrp into account in
    the two call paths that currently do not do so. Instead of always
    freeing the resource group it will only be freed if there are no waiters
    on it. If there are waiters, the resource group will have its flags set
    to RDT_DELETED.
    
    It will be left to the waiter to free the resource group when it starts
    running and finding that it was the last waiter and the resource group
    has been removed (rdtgrp->flags & RDT_DELETED) since. (1) rdt_kill_sb()
    -> rmdir_all_sub() -> free_all_child_rdtgrp() (2) rdtgroup_rmdir() ->
    rdtgroup_rmdir_ctrl() -> free_all_child_rdtgrp()
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1578500886-21771-2-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dd2e47229222f419be10ce8bb85ce1af2a314ac
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Thu Jan 9 00:28:05 2020 +0800

    x86/resctrl: Fix a deadlock due to inaccurate reference
    
    [ Upstream commit 334b0f4e9b1b4a1d475f803419d202f6c5e4d18e ]
    
    There is a race condition which results in a deadlock when rmdir and
    mkdir execute concurrently:
    
    $ ls /sys/fs/resctrl/c1/mon_groups/m1/
    cpus  cpus_list  mon_data  tasks
    
    Thread 1: rmdir /sys/fs/resctrl/c1
    Thread 2: mkdir /sys/fs/resctrl/c1/mon_groups/m1
    
    3 locks held by mkdir/48649:
     #0:  (sb_writers#17){.+.+}, at: [<ffffffffb4ca2aa0>] mnt_want_write+0x20/0x50
     #1:  (&type->i_mutex_dir_key#8/1){+.+.}, at: [<ffffffffb4c8c13b>] filename_create+0x7b/0x170
     #2:  (rdtgroup_mutex){+.+.}, at: [<ffffffffb4a4389d>] rdtgroup_kn_lock_live+0x3d/0x70
    
    4 locks held by rmdir/48652:
     #0:  (sb_writers#17){.+.+}, at: [<ffffffffb4ca2aa0>] mnt_want_write+0x20/0x50
     #1:  (&type->i_mutex_dir_key#8/1){+.+.}, at: [<ffffffffb4c8c3cf>] do_rmdir+0x13f/0x1e0
     #2:  (&type->i_mutex_dir_key#8){++++}, at: [<ffffffffb4c86d5d>] vfs_rmdir+0x4d/0x120
     #3:  (rdtgroup_mutex){+.+.}, at: [<ffffffffb4a4389d>] rdtgroup_kn_lock_live+0x3d/0x70
    
    Thread 1 is deleting control group "c1". Holding rdtgroup_mutex,
    kernfs_remove() removes all kernfs nodes under directory "c1"
    recursively, then waits for sub kernfs node "mon_groups" to drop active
    reference.
    
    Thread 2 is trying to create a subdirectory "m1" in the "mon_groups"
    directory. The wrapper kernfs_iop_mkdir() takes an active reference to
    the "mon_groups" directory but the code drops the active reference to
    the parent directory "c1" instead.
    
    As a result, Thread 1 is blocked on waiting for active reference to drop
    and never release rdtgroup_mutex, while Thread 2 is also blocked on
    trying to get rdtgroup_mutex.
    
    Thread 1 (rdtgroup_rmdir)   Thread 2 (rdtgroup_mkdir)
    (rmdir /sys/fs/resctrl/c1)  (mkdir /sys/fs/resctrl/c1/mon_groups/m1)
    -------------------------   -------------------------
                                kernfs_iop_mkdir
                                  /*
                                   * kn: "m1", parent_kn: "mon_groups",
                                   * prgrp_kn: parent_kn->parent: "c1",
                                   *
                                   * "mon_groups", parent_kn->active++: 1
                                   */
                                  kernfs_get_active(parent_kn)
    kernfs_iop_rmdir
      /* "c1", kn->active++ */
      kernfs_get_active(kn)
    
      rdtgroup_kn_lock_live
        atomic_inc(&rdtgrp->waitcount)
        /* "c1", kn->active-- */
        kernfs_break_active_protection(kn)
        mutex_lock
    
      rdtgroup_rmdir_ctrl
        free_all_child_rdtgrp
          sentry->flags = RDT_DELETED
    
        rdtgroup_ctrl_remove
          rdtgrp->flags = RDT_DELETED
          kernfs_get(kn)
          kernfs_remove(rdtgrp->kn)
            __kernfs_remove
              /* "mon_groups", sub_kn */
              atomic_add(KN_DEACTIVATED_BIAS, &sub_kn->active)
              kernfs_drain(sub_kn)
                /*
                 * sub_kn->active == KN_DEACTIVATED_BIAS + 1,
                 * waiting on sub_kn->active to drop, but it
                 * never drops in Thread 2 which is blocked
                 * on getting rdtgroup_mutex.
                 */
    Thread 1 hangs here ---->
                wait_event(sub_kn->active == KN_DEACTIVATED_BIAS)
                ...
                                  rdtgroup_mkdir
                                    rdtgroup_mkdir_mon(parent_kn, prgrp_kn)
                                      mkdir_rdt_prepare(parent_kn, prgrp_kn)
                                        rdtgroup_kn_lock_live(prgrp_kn)
                                          atomic_inc(&rdtgrp->waitcount)
                                          /*
                                           * "c1", prgrp_kn->active--
                                           *
                                           * The active reference on "c1" is
                                           * dropped, but not matching the
                                           * actual active reference taken
                                           * on "mon_groups", thus causing
                                           * Thread 1 to wait forever while
                                           * holding rdtgroup_mutex.
                                           */
                                          kernfs_break_active_protection(
                                                                   prgrp_kn)
                                          /*
                                           * Trying to get rdtgroup_mutex
                                           * which is held by Thread 1.
                                           */
    Thread 2 hangs here ---->             mutex_lock
                                          ...
    
    The problem is that the creation of a subdirectory in the "mon_groups"
    directory incorrectly releases the active protection of its parent
    directory instead of itself before it starts waiting for rdtgroup_mutex.
    This is triggered by the rdtgroup_mkdir() flow calling
    rdtgroup_kn_lock_live()/rdtgroup_kn_unlock() with kernfs node of the
    parent control group ("c1") as argument. It should be called with kernfs
    node "mon_groups" instead. What is currently missing is that the
    kn->priv of "mon_groups" is NULL instead of pointing to the rdtgrp.
    
    Fix it by pointing kn->priv to rdtgrp when "mon_groups" is created. Then
    it could be passed to rdtgroup_kn_lock_live()/rdtgroup_kn_unlock()
    instead. And then it operates on the same rdtgroup structure but handles
    the active reference of kernfs node "mon_groups" to prevent deadlock.
    The same changes are also made to the "mon_data" directories.
    
    This results in some unused function parameters that will be cleaned up
    in follow-up patch as the focus here is on the fix only in support of
    backporting efforts.
    
    Fixes: c7d9aac61311 ("x86/intel_rdt/cqm: Add mkdir support for RDT monitoring")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1578500886-21771-4-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd0826719560c1f3a42c24742e18a1bb74f5a4d2
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Fri Jan 31 05:52:51 2020 +1000

    cifs: fix soft mounts hanging in the reconnect code
    
    commit c54849ddd832ae0a45cab16bcd1ed2db7da090d7 upstream.
    
    RHBZ: 1795429
    
    In recent DFS updates we have a new variable controlling how many times we will
    retry to reconnect the share.
    If DFS is not used, then this variable is initialized to 0 in:
    
    static inline int
    dfs_cache_get_nr_tgts(const struct dfs_cache_tgt_list *tl)
    {
            return tl ? tl->tl_numtgts : 0;
    }
    
    This means that in the reconnect loop in smb2_reconnect() we will immediately wrap retries to -1
    and never actually get to pass this conditional:
    
                    if (--retries)
                            continue;
    
    The effect is that we no longer reach the point where we fail the commands with -EHOSTDOWN
    and basically the kernel threads are virtually hung and unkillable.
    
    Fixes: a3a53b7603798fd8 (cifs: Add support for failover in smb2_reconnect())
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c38e6140126fa63a32c6d120ae2be59dea571c7
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Feb 1 16:26:45 2020 +0000

    vfs: fix do_last() regression
    
    commit 6404674acd596de41fd3ad5f267b4525494a891a upstream.
    
    Brown paperbag time: fetching ->i_uid/->i_mode really should've been
    done from nd->inode.  I even suggested that, but the reason for that has
    slipped through the cracks and I went for dir->d_inode instead - made
    for more "obvious" patch.
    
    Analysis:
    
     - at the entry into do_last() and all the way to step_into(): dir (aka
       nd->path.dentry) is known not to have been freed; so's nd->inode and
       it's equal to dir->d_inode unless we are already doomed to -ECHILD.
       inode of the file to get opened is not known.
    
     - after step_into(): inode of the file to get opened is known; dir
       might be pointing to freed memory/be negative/etc.
    
     - at the call of may_create_in_sticky(): guaranteed to be out of RCU
       mode; inode of the file to get opened is known and pinned; dir might
       be garbage.
    
    The last was the reason for the original patch.  Except that at the
    do_last() entry we can be in RCU mode and it is possible that
    nd->path.dentry->d_inode has already changed under us.
    
    In that case we are going to fail with -ECHILD, but we need to be
    careful; nd->inode is pointing to valid struct inode and it's the same
    as nd->path.dentry->d_inode in "won't fail with -ECHILD" case, so we
    should use that.
    
    Reported-by: "Rantala, Tommi T. (Nokia - FI/Espoo)" <tommi.t.rantala@nokia.com>
    Reported-by: syzbot+190005201ced78a74ad6@syzkaller.appspotmail.com
    Wearing-brown-paperbag: Al Viro <viro@zeniv.linux.org.uk>
    Cc: stable@kernel.org
    Fixes: d0cb50185ae9 ("do_last(): fetch directory ->i_mode and ->i_uid before it's too late")
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
