commit 5692097116094a4a7045abcc1dbc172dbdc5657e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 11 14:15:13 2020 +0100

    Linux 4.19.109

commit 55c009b419778c30e2deb8c92be54f3a1cac4082
Author: Deepak Ukey <deepak.ukey@microchip.com>
Date:   Tue Jul 9 15:30:48 2019 +0530

    scsi: pm80xx: Fixed kernel panic during error recovery for SATA drive
    
    commit 196ba6629cf95e51403337235d09742fcdc3febd upstream.
    
    Disabling the SATA drive interface cause kernel panic. When the drive
    Interface is disabled, device should be deregistered after aborting all
    pending I/Os. Also changed the port recovery timeout to 10000 ms for
    PM8006 controller.
    
    Signed-off-by: Deepak Ukey <deepak.ukey@microchip.com>
    Signed-off-by: Viswas G <Viswas.G@microchip.com>
    Reviewed-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd68d2206bb832aed06d4feac79097c0cc3228e9
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Feb 17 07:43:03 2020 -0500

    dm integrity: fix a deadlock due to offloading to an incorrect workqueue
    
    commit 53770f0ec5fd417429775ba006bc4abe14002335 upstream.
    
    If we need to perform synchronous I/O in dm_integrity_map_continue(),
    we must make sure that we are not in the map function - in order to
    avoid the deadlock due to bio queuing in generic_make_request. To
    avoid the deadlock, we offload the request to metadata_wq.
    
    However, metadata_wq also processes metadata updates for write requests.
    If there are too many requests that get offloaded to metadata_wq at the
    beginning of dm_integrity_map_continue, the workqueue metadata_wq
    becomes clogged and the system is incapable of processing any metadata
    updates.
    
    This causes a deadlock because all the requests that need to do metadata
    updates wait for metadata_wq to proceed and metadata_wq waits inside
    wait_and_add_new_range until some existing request releases its range
    lock (which doesn't happen because the range lock is released after
    metadata update).
    
    In order to fix the deadlock, we create a new workqueue offload_wq and
    offload requests to it - so that processing of offload_wq is independent
    from processing of metadata_wq.
    
    Fixes: 7eada909bfd7 ("dm: add integrity target")
    Cc: stable@vger.kernel.org # v4.12+
    Reported-by: Heinz Mauelshagen <heinzm@redhat.com>
    Tested-by: Heinz Mauelshagen <heinzm@redhat.com>
    Signed-off-by: Heinz Mauelshagen <heinzm@redhat.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e6eb1876cfc2c9437162899b40ecd2561d4e293
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Feb 21 09:48:48 2020 +0100

    efi/x86: Handle by-ref arguments covering multiple pages in mixed mode
    
    commit 8319e9d5ad98ffccd19f35664382c73cea216193 upstream.
    
    The mixed mode runtime wrappers are fragile when it comes to how the
    memory referred to by its pointer arguments are laid out in memory, due
    to the fact that it translates these addresses to physical addresses that
    the runtime services can dereference when running in 1:1 mode. Since
    vmalloc'ed pages (including the vmap'ed stack) are not contiguous in the
    physical address space, this scheme only works if the referenced memory
    objects do not cross page boundaries.
    
    Currently, the mixed mode runtime service wrappers require that all by-ref
    arguments that live in the vmalloc space have a size that is a power of 2,
    and are aligned to that same value. While this is a sensible way to
    construct an object that is guaranteed not to cross a page boundary, it is
    overly strict when it comes to checking whether a given object violates
    this requirement, as we can simply take the physical address of the first
    and the last byte, and verify that they point into the same physical page.
    
    When this check fails, we emit a WARN(), but then simply proceed with the
    call, which could cause data corruption if the next physical page belongs
    to a mapping that is entirely unrelated.
    
    Given that with vmap'ed stacks, this condition is much more likely to
    trigger, let's relax the condition a bit, but fail the runtime service
    call if it does trigger.
    
    Fixes: f6697df36bdf0bf7 ("x86/efi: Prevent mixed mode boot corruption with CONFIG_VMAP_STACK=y")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: linux-efi@vger.kernel.org
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200221084849.26878-4-ardb@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b974fa1f5d708caabebcaa198f12f3017fb8096
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Feb 21 09:48:46 2020 +0100

    efi/x86: Align GUIDs to their size in the mixed mode runtime wrapper
    
    commit 63056e8b5ebf41d52170e9f5ba1fc83d1855278c upstream.
    
    Hans reports that his mixed mode systems running v5.6-rc1 kernels hit
    the WARN_ON() in virt_to_phys_or_null_size(), caused by the fact that
    efi_guid_t objects on the vmap'ed stack happen to be misaligned with
    respect to their sizes. As a quick (i.e., backportable) fix, copy GUID
    pointer arguments to the local stack into a buffer that is naturally
    aligned to its size, so that it is guaranteed to cover only one
    physical page.
    
    Note that on x86, we cannot rely on the stack pointer being aligned
    the way the compiler expects, so we need to allocate an 8-byte aligned
    buffer of sufficient size, and copy the GUID into that buffer at an
    offset that is aligned to 16 bytes.
    
    Fixes: f6697df36bdf0bf7 ("x86/efi: Prevent mixed mode boot corruption with CONFIG_VMAP_STACK=y")
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Cc: linux-efi@vger.kernel.org
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200221084849.26878-2-ardb@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9493be8eea714e2b3025a6ff381120d6e1a1a34
Author: Desnes A. Nunes do Rosario <desnesn@linux.ibm.com>
Date:   Thu Feb 27 10:47:15 2020 -0300

    powerpc: fix hardware PMU exception bug on PowerVM compatibility mode systems
    
    commit fc37a1632d40c80c067eb1bc235139f5867a2667 upstream.
    
    PowerVM systems running compatibility mode on a few Power8 revisions are
    still vulnerable to the hardware defect that loses PMU exceptions arriving
    prior to a context switch.
    
    The software fix for this issue is enabled through the CPU_FTR_PMAO_BUG
    cpu_feature bit, nevertheless this bit also needs to be set for PowerVM
    compatibility mode systems.
    
    Fixes: 68f2f0d431d9ea4 ("powerpc: Add a cpu feature CPU_FTR_PMAO_BUG")
    Signed-off-by: Desnes A. Nunes do Rosario <desnesn@linux.ibm.com>
    Reviewed-by: Leonardo Bras <leonardo@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200227134715.9715-1-desnesn@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fb8f0931dceab928206771eb0ffaf197e94641f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 17 17:40:50 2020 +0300

    dmaengine: coh901318: Fix a double lock bug in dma_tc_handle()
    
    commit 36d5d22090d13fd3a7a8c9663a711cbe6970aac8 upstream.
    
    The caller is already holding the lock so this will deadlock.
    
    Fixes: 0b58828c923e ("DMAENGINE: COH 901 318 remove irq counting")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200217144050.3i4ymbytogod4ijn@kili.mountain
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8831b2976227056a807bb2a1ec90a80cd523b2c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Mar 3 13:16:08 2020 +0300

    hwmon: (adt7462) Fix an error return in ADT7462_REG_VOLT()
    
    commit 44f2f882909fedfc3a56e4b90026910456019743 upstream.
    
    This is only called from adt7462_update_device().  The caller expects it
    to return zero on error.  I fixed a similar issue earlier in commit
    a4bf06d58f21 ("hwmon: (adt7462) ADT7462_REG_VOLT_MAX() should return 0")
    but I missed this one.
    
    Fixes: c0b4e3ab0c76 ("adt7462: new hwmon driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Link: https://lore.kernel.org/r/20200303101608.kqjwfcazu2ylhi2a@kili.mountain
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 792582ef61cfaa59f41ca59dbe4d6903de597e95
Author: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
Date:   Wed Feb 19 13:11:24 2020 +0000

    ARM: dts: imx7-colibri: Fix frequency for sd/mmc
    
    commit 2773fe1d31c42ffae2a9cb9a6055d99dd86e2fee upstream.
    
    SD/MMC on Colibri iMX7S/D modules successfully support
    200Mhz frequency in HS200 mode.
    
    Removing the unnecessary max-frequency limit significantly
    increases the performance:
    
    == before fix ====
    root@colibri-imx7-emmc:~# hdparm -t /dev/mmcblk0
    /dev/mmcblk0:
     Timing buffered disk reads: 252 MB in  3.02 seconds =  83.54 MB/sec
    ==================
    
    === after fix ====
    root@colibri-imx7-emmc:~# hdparm -t /dev/mmcblk0
    /dev/mmcblk0:
     Timing buffered disk reads: 408 MB in  3.00 seconds = 135.94 MB/sec
    ==================
    
    Fixes: f928a4a377e4 ("ARM: dts: imx7: add Toradex Colibri iMX7D 1GB (eMMC) support")
    Signed-off-by: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e1eec2e043cb3217b8006d8c0ad84bb4cbebd4e
Author: Suman Anna <s-anna@ti.com>
Date:   Mon Feb 10 15:04:23 2020 -0600

    ARM: dts: am437x-idk-evm: Fix incorrect OPP node names
    
    commit 31623468be0bf57617b8057dcd335693935a9491 upstream.
    
    The commit 337c6c9a69af ("ARM: dts: am437x-idk-evm: Disable
    OPP50 for MPU") adjusts couple of OPP nodes defined in the
    common am4372.dtsi file, but used outdated node names. This
    results in these getting treated as new OPP nodes with missing
    properties.
    
    Fix this properly by using the correct node names as updated in
    commit b9cb2ba71848 ("ARM: dts: Use - instead of @ for DT OPP
    entries for TI SoCs").
    
    Reported-by: Roger Quadros <rogerq@ti.com>
    Fixes: 337c6c9a69af ("ARM: dts: am437x-idk-evm: Disable OPP50 for MPU")
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c19f53234b77f59aea043a6c7f5fa0a806c953d5
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Thu Jan 16 15:18:49 2020 +0100

    ARM: imx: build v7_cpu_resume() unconditionally
    
    commit 512a928affd51c2dc631401e56ad5ee5d5dd68b6 upstream.
    
    This function is not only needed by the platform suspend code, but is also
    reused as the CPU resume function when the ARM cores can be powered down
    completely in deep idle, which is the case on i.MX6SX and i.MX6UL(L).
    
    Providing the static inline stub whenever CONFIG_SUSPEND is disabled means
    that those platforms will hang on resume from cpuidle if suspend is disabled.
    
    So there are two problems:
    
      - The static inline stub masks the linker error
      - The function is not available where needed
    
    Fix both by just building the function unconditionally, when
    CONFIG_SOC_IMX6 is enabled. The actual code is three instructions long,
    so it's arguably ok to just leave it in for all i.MX6 kernel configurations.
    
    Fixes: 05136f0897b5 ("ARM: imx: support arm power off in cpuidle for i.mx6sx")
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 514ac47a7405bacd10cce931f21c36fb8c666080
Author: Dennis Dalessandro <dennis.dalessandro@intel.com>
Date:   Tue Feb 25 14:54:45 2020 -0500

    IB/hfi1, qib: Ensure RCU is locked when accessing list
    
    commit 817a68a6584aa08e323c64283fec5ded7be84759 upstream.
    
    The packet handling function, specifically the iteration of the qp list
    for mad packet processing misses locking RCU before running through the
    list. Not only is this incorrect, but the list_for_each_entry_rcu() call
    can not be called with a conditional check for lock dependency. Remedy
    this by invoking the rcu lock and unlock around the critical section.
    
    This brings MAD packet processing in line with what is done for non-MAD
    packets.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Link: https://lore.kernel.org/r/20200225195445.140896.41873.stgit@awfm-01.aw.intel.com
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f394a3c0967955348d3856e3e50e11e50f2a65f
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Fri Feb 21 15:20:26 2020 +0000

    RMDA/cm: Fix missing ib_cm_destroy_id() in ib_cm_insert_listen()
    
    commit c14dfddbd869bf0c2bafb7ef260c41d9cebbcfec upstream.
    
    The algorithm pre-allocates a cm_id since allocation cannot be done while
    holding the cm.lock spinlock, however it doesn't free it on one error
    path, leading to a memory leak.
    
    Fixes: 067b171b8679 ("IB/cm: Share listening CM IDs")
    Link: https://lore.kernel.org/r/20200221152023.GA8680@ziepe.ca
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a215b5f174e7bed680b1276c1613a9030635ee
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Mon Mar 2 19:16:14 2020 +0100

    RDMA/iwcm: Fix iwcm work deallocation
    
    commit 810dbc69087b08fd53e1cdd6c709f385bc2921ad upstream.
    
    The dealloc_work_entries() function must update the work_free_list pointer
    while freeing its entries, since potentially called again on same list. A
    second iteration of the work list caused system crash. This happens, if
    work allocation fails during cma_iw_listen() and free_cm_id() tries to
    free the list again during cleanup.
    
    Fixes: 922a8e9fb2e0 ("RDMA: iWARP Connection Manager.")
    Link: https://lore.kernel.org/r/20200302181614.17042-1-bmt@zurich.ibm.com
    Reported-by: syzbot+cb0c054eabfba4342146@syzkaller.appspotmail.com
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b898e63e4413b4aa117d5d444a1286629eca6a8d
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Thu Jan 16 15:01:08 2020 +0100

    ARM: dts: imx6: phycore-som: fix emmc supply
    
    commit eb0bbba7636b9fc81939d6087a5fe575e150c95a upstream.
    
    Currently the vmmc is supplied by the 1.8V pmic rail but this is wrong.
    The default module behaviour is to power VCCQ and VCC by the 3.3V power
    rail. Optional the user can connect the VCCQ to the pmic 1.8V emmc
    power rail using a solder jumper.
    
    Fixes: ddec5d1c0047 ("ARM: dts: imx6: Add initial support for phyCORE-i.MX 6 SOM")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8f6a4a13bf66135f41380436e90f8a1c4e3fd7b
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Feb 4 07:36:02 2020 -0800

    phy: mapphone-mdm6600: Fix write timeouts with shorter GPIO toggle interval
    
    commit 46b7edf1c7b7c91004c4db2c355cbd033f2385f9 upstream.
    
    I've noticed that when writing data to the modem the writes can time out
    at some point eventually. Looks like kicking the modem idle GPIO every
    600 ms instead of once a second fixes the issue. Note that this rate is
    different from our runtime PM autosuspend rate MDM6600_MODEM_IDLE_DELAY_MS
    that we still want to keep at 1 second, so let's add a separate define for
    PHY_MDM6600_IDLE_KICK_MS.
    
    Fixes: f7f50b2a7b05 ("phy: mapphone-mdm6600: Add runtime PM support for n_gsm on USB suspend")
    Cc: Marcel Partap <mpartap@gmx.net>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Michael Scott <hashcode0f@gmail.com>
    Cc: NeKit <nekit1000@gmail.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7b5d3fe5ab412aa7e112ca4601d290c427c72b8
Author: Tony Lindgren <tony@atomide.com>
Date:   Sun Sep 15 13:15:52 2019 -0700

    phy: mapphone-mdm6600: Fix timeouts by adding wake-up handling
    
    commit be4e3c737eebd75815633f4b8fd766defaf0f1fc upstream.
    
    We have an interrupt handler for the wake-up GPIO pin, but we're missing
    the code to wake-up the system. This can cause timeouts receiving data
    for the UART that shares the wake-up GPIO pin with the USB PHY.
    
    All we need to do is just wake the system and kick the autosuspend
    timeout to fix the issue.
    
    Fixes: 5d1ebbda0318 ("phy: mapphone-mdm6600: Add USB PHY driver for MDM6600 on Droid 4")
    Cc: Marcel Partap <mpartap@gmx.net>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Michael Scott <hashcode0f@gmail.com>
    Cc: NeKit <nekit1000@gmail.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70968cfed1d2b3fcbf6782faa2eda674e8bfc57a
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Mon Feb 24 18:38:55 2020 +0100

    drm/sun4i: de2/de3: Remove unsupported VI layer formats
    
    commit a4769905f0ae32cae4f096f646ab03b8b4794c74 upstream.
    
    YUV444 and YVU444 are planar formats, but HW format RGB888 is packed.
    This means that those two mappings were never correct. Remove them.
    
    Fixes: 60a3dcf96aa8 ("drm/sun4i: Add DE2 definitions for YUV formats")
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200224173901.174016-2-jernej.skrabec@siol.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbe26480241212e9f9820e921842d4f55321cbbc
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Mon Feb 24 18:38:57 2020 +0100

    drm/sun4i: Fix DE2 VI layer format support
    
    commit 20896ef137340e9426cf322606f764452f5eb960 upstream.
    
    DE2 VI layer doesn't support blending which means alpha channel is
    ignored. Replace all formats with alpha with "don't care" (X) channel.
    
    Fixes: 7480ba4d7571 ("drm/sun4i: Add support for DE2 VI planes")
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200224173901.174016-4-jernej.skrabec@siol.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61edc9cc7b15e657f5395a8c30fbdd0be2507bc7
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Fri Feb 28 15:31:45 2020 +0000

    ASoC: dapm: Correct DAPM handling of active widgets during shutdown
    
    commit 9b3193089e77d3b59b045146ff1c770dd899acb1 upstream.
    
    commit c2caa4da46a4 ("ASoC: Fix widget powerdown on shutdown") added a
    set of the power state during snd_soc_dapm_shutdown to ensure the
    widgets powered off. However, when commit 39eb5fd13dff
    ("ASoC: dapm: Delay w->power update until the changes are written")
    added the new_power member of the widget structure, to differentiate
    between the current power state and the target power state, it did not
    update the shutdown to use the new_power member.
    
    As new_power has not updated it will be left in the state set by the
    last DAPM sequence, ie. 1 for active widgets. So as the DAPM sequence
    for the shutdown proceeds it will turn the widgets on (despite them
    already being on) rather than turning them off.
    
    Fixes: 39eb5fd13dff ("ASoC: dapm: Delay w->power update until the changes are written")
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200228153145.21013-1-ckeepax@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a8a6cf184f4bd0778c7aa85b7409ff7b147f87b
Author: Matthias Reichl <hias@horus.com>
Date:   Thu Feb 20 21:29:56 2020 +0100

    ASoC: pcm512x: Fix unbalanced regulator enable call in probe error path
    
    commit ac0a68997935c4acb92eaae5ad8982e0bb432d56 upstream.
    
    When we get a clock error during probe we have to call
    regulator_bulk_disable before bailing out, otherwise we trigger
    a warning in regulator_put.
    
    Fix this by using "goto err" like in the error cases above.
    
    Fixes: 5a3af1293194d ("ASoC: pcm512x: Add PCM512x driver")
    Signed-off-by: Matthias Reichl <hias@horus.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200220202956.29233-1-hias@horus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9191f26b9d90fef35519846a07b5ea25117072e6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 18 12:17:37 2020 +0100

    ASoC: pcm: Fix possible buffer overflow in dpcm state sysfs output
    
    commit 6c89ffea60aa3b2a33ae7987de1e84bfb89e4c9e upstream.
    
    dpcm_show_state() invokes multiple snprintf() calls to concatenate
    formatted strings on the fixed size buffer.  The usage of snprintf()
    is supposed for avoiding the buffer overflow, but it doesn't work as
    expected because snprintf() doesn't return the actual output size but
    the size to be written.
    
    Fix this bug by replacing all snprintf() calls with scnprintf()
    calls.
    
    Fixes: f86dcef87b77 ("ASoC: dpcm: Add debugFS support for DPCM")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20200218111737.14193-4-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2aa6a19ec45b7c4b9c3455b2e95dd6f44581dacb
Author: Vinod Koul <vkoul@kernel.org>
Date:   Thu Oct 25 15:15:28 2018 +0100

    dmaengine: imx-sdma: remove dma_slave_config direction usage and leave sdma_event_enable()
    
    [ Upstream commit 107d06441b709d31ce592535086992799ee51e17 ]
    
    dma_slave_config direction was marked as deprecated quite some
    time back, remove the usage from this driver so that the field
    can be removed
    
    ENBLn bit should be set before any dma request triggered, please
    refer to the below information from i.mx6sololite RM. Otherwise,
    spi/uart test will be fail because there is dma request from tx
    fifo always before dmaengine_prep_slave_sg() in where ENBLn set
    and violate the below rule.
    
    https://www.nxp.com/docs/en/reference-manual/IMX6SLRM.pdf:
    
    40.8.28 Channel Enable RAM (SDMAARM_CHNENBLn)
    "It is thus essential for the Arm platform to program them before
    any DMA request is triggered to the SDMA, otherwise an unpredictable
    combination of channels may be started".
    
    Signed-off-by: Robin Gong <yibin.gong@nxp.com>
    [vkoul: sqashed patch from Robin into direction change]
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0919d6a89572ad9b658002686bc23f2f66b7f4de
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 18 12:17:36 2020 +0100

    ASoC: intel: skl: Fix possible buffer overflow in debug outputs
    
    commit 549cd0ba04dcfe340c349cd983bd440480fae8ee upstream.
    
    The debugfs output of intel skl driver writes strings with multiple
    snprintf() calls with the fixed size.  This was supposed to avoid the
    buffer overflow but actually it still would, because snprintf()
    returns the expected size to be output, not the actual output size.
    
    Fix it by replacing snprintf() calls with scnprintf().
    
    Fixes: d14700a01f91 ("ASoC: Intel: Skylake: Debugfs facility to dump module config")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20200218111737.14193-3-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ba5d2463bd00c733c72d2b339ba318afdb9ec0f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 18 12:17:35 2020 +0100

    ASoC: intel: skl: Fix pin debug prints
    
    commit 64bbacc5f08c01954890981c63de744df1f29a30 upstream.
    
    skl_print_pins() loops over all given pins but it overwrites the text
    at the very same position while increasing the returned length.
    Fix this to show the all pin contents properly.
    
    Fixes: d14700a01f91 ("ASoC: Intel: Skylake: Debugfs facility to dump module config")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20200218111737.14193-2-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a622e6db8764794bcfe8c30b63bfe0a0a122646
Author: Dragos Tarcatu <dragos_tarcatu@mentor.com>
Date:   Fri Feb 7 20:53:25 2020 +0200

    ASoC: topology: Fix memleak in soc_tplg_manifest_load()
    
    commit 242c46c023610dbc0213fc8fb6b71eb836bc5d95 upstream.
    
    In case of ABI version mismatch, _manifest needs to be freed as
    it is just a copy of the original topology manifest. However, if
    a driver manifest handler is defined, that would get executed and
    the cleanup is never reached. Fix that by getting the return status
    of manifest() instead of returning directly.
    
    Fixes: 583958fa2e52 ("ASoC: topology: Make manifest backward compatible from ABI v4")
    Signed-off-by: Dragos Tarcatu <dragos_tarcatu@mentor.com>
    Link: https://lore.kernel.org/r/20200207185325.22320-3-dragos_tarcatu@mentor.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d675643ed8902f0a702d1dbe6ec4f9ec9b546c
Author: Dragos Tarcatu <dragos_tarcatu@mentor.com>
Date:   Fri Feb 7 20:53:24 2020 +0200

    ASoC: topology: Fix memleak in soc_tplg_link_elems_load()
    
    commit 2b2d5c4db732c027a14987cfccf767dac1b45170 upstream.
    
    If soc_tplg_link_config() fails, _link needs to be freed in case of
    topology ABI version mismatch. However the current code is returning
    directly and ends up leaking memory in this case.
    This patch fixes that.
    
    Fixes: 593d9e52f9bb ("ASoC: topology: Add support to configure existing physical DAI links")
    Signed-off-by: Dragos Tarcatu <dragos_tarcatu@mentor.com>
    Link: https://lore.kernel.org/r/20200207185325.22320-2-dragos_tarcatu@mentor.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a51f2ef088969e1a6ef8fc9dbe3187f78921d5c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Feb 28 22:38:38 2020 +0100

    spi: bcm63xx-hsspi: Really keep pll clk enabled
    
    commit 51bddd4501bc414b8b1e8f4d096b4a5304068169 upstream.
    
    The purpose of commit 0fd85869c2a9 ("spi/bcm63xx-hsspi: keep pll clk enabled")
    was to keep the pll clk enabled through the lifetime of the device.
    
    In order to do that, some 'clk_prepare_enable()'/'clk_disable_unprepare()'
    calls have been added in the error handling path of the probe function, in
    the remove function and in the suspend and resume functions.
    
    However, a 'clk_disable_unprepare()' call has been unfortunately left in
    the probe function. So the commit seems to be more or less a no-op.
    
    Axe it now, so that the pll clk is left enabled through the lifetime of
    the device, as described in the commit.
    
    Fixes: 0fd85869c2a9 ("spi/bcm63xx-hsspi: keep pll clk enabled")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Jonas Gorski <jonas.gorski@gmail.com>
    Link: https://lore.kernel.org/r/20200228213838.7124-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94712c05ec8ca472d1c28a7e33522ab67dda8bdc
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sun Jan 26 21:49:50 2020 +0200

    ARM: dts: ls1021a: Restore MDIO compatible to gianfar
    
    commit 7155c44624d061692b4c13aa8343f119c67d4fc0 upstream.
    
    The difference between "fsl,etsec2-mdio" and "gianfar" has to do with
    the .get_tbipa function, which calculates the address of the TBIPA
    register automatically, if not explicitly specified. [ see
    drivers/net/ethernet/freescale/fsl_pq_mdio.c ]. On LS1021A, the TBIPA
    register is at offset 0x30 within the port register block, which is what
    the "gianfar" method of calculating addresses actually does.
    
    Luckily, the bad "compatible" is inconsequential for ls1021a.dtsi,
    because the TBIPA register is explicitly specified via the second "reg"
    (<0x0 0x2d10030 0x0 0x4>), so the "get_tbipa" function is dead code.
    Nonetheless it's good to restore it to its correct value.
    
    Background discussion:
    https://www.spinics.net/lists/stable/msg361156.html
    
    Fixes: c7861adbe37f ("ARM: dts: ls1021: Fix SGMII PCS link remaining down after PHY disconnect")
    Reported-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e242863c5406733ccc992bc384104490cfe1f1a
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Feb 24 10:20:30 2020 +0100

    dm writecache: verify watermark during resume
    
    commit 41c526c5af46d4c4dab7f72c99000b7fac0b9702 upstream.
    
    Verify the watermark upon resume - so that if the target is reloaded
    with lower watermark, it will start the cleanup process immediately.
    
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Cc: stable@vger.kernel.org # 4.18+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98423303b030252b5dcb77202694548780f2a26b
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Feb 24 10:20:28 2020 +0100

    dm: report suspended device during destroy
    
    commit adc0daad366b62ca1bce3e2958a40b0b71a8b8b3 upstream.
    
    The function dm_suspended returns true if the target is suspended.
    However, when the target is being suspended during unload, it returns
    false.
    
    An example where this is a problem: the test "!dm_suspended(wc->ti)" in
    writecache_writeback is not sufficient, because dm_suspended returns
    zero while writecache_suspend is in progress.  As is, without an
    enhanced dm_suspended, simply switching from flush_workqueue to
    drain_workqueue still emits warnings:
    workqueue writecache-writeback: drain_workqueue() isn't complete after 10 tries
    workqueue writecache-writeback: drain_workqueue() isn't complete after 100 tries
    workqueue writecache-writeback: drain_workqueue() isn't complete after 200 tries
    workqueue writecache-writeback: drain_workqueue() isn't complete after 300 tries
    workqueue writecache-writeback: drain_workqueue() isn't complete after 400 tries
    
    writecache_suspend calls flush_workqueue(wc->writeback_wq) - this function
    flushes the current work. However, the workqueue may re-queue itself and
    flush_workqueue doesn't wait for re-queued works to finish. Because of
    this - the function writecache_writeback continues execution after the
    device was suspended and then concurrently with writecache_dtr, causing
    a crash in writecache_writeback.
    
    We must use drain_workqueue - that waits until the work and all re-queued
    works finish.
    
    As a prereq for switching to drain_workqueue, this commit fixes
    dm_suspended to return true after the presuspend hook and before the
    postsuspend hook - just like during a normal suspend. It allows
    simplifying the dm-integrity and dm-writecache targets so that they
    don't have to maintain suspended flags on their own.
    
    With this change use of drain_workqueue() can be used effectively.  This
    change was tested with the lvm2 testsuite and cryptsetup testsuite and
    the are no regressions.
    
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Cc: stable@vger.kernel.org # 4.18+
    Reported-by: Corey Marthaler <cmarthal@redhat.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc21bbf6b4116ca2ce3fb65dd84ae2686756dbb8
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Feb 19 10:25:45 2020 -0500

    dm cache: fix a crash due to incorrect work item cancelling
    
    commit 7cdf6a0aae1cccf5167f3f04ecddcf648b78e289 upstream.
    
    The crash can be reproduced by running the lvm2 testsuite test
    lvconvert-thin-external-cache.sh for several minutes, e.g.:
      while :; do make check T=shell/lvconvert-thin-external-cache.sh; done
    
    The crash happens in this call chain:
    do_waker -> policy_tick -> smq_tick -> end_hotspot_period -> clear_bitset
    -> memset -> __memset -- which accesses an invalid pointer in the vmalloc
    area.
    
    The work entry on the workqueue is executed even after the bitmap was
    freed. The problem is that cancel_delayed_work doesn't wait for the
    running work item to finish, so the work item can continue running and
    re-submitting itself even after cache_postsuspend. In order to make sure
    that the work item won't be running, we must use cancel_delayed_work_sync.
    
    Also, change flush_workqueue to drain_workqueue, so that if some work item
    submits itself or another work item, we are properly waiting for both of
    them.
    
    Fixes: c6b4fcbad044 ("dm: add cache target")
    Cc: stable@vger.kernel.org # v3.9
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c71a99799a6e20629c44a14a0b6aab213e122c6
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Feb 9 19:33:39 2020 +0300

    dmaengine: tegra-apb: Prevent race conditions of tasklet vs free list
    
    commit c33ee1301c393a241d6424e36eff1071811b1064 upstream.
    
    The interrupt handler puts a half-completed DMA descriptor on a free list
    and then schedules tasklet to process bottom half of the descriptor that
    executes client's callback, this creates possibility to pick up the busy
    descriptor from the free list. Thus, let's disallow descriptor's re-use
    until it is fully processed.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200209163356.6439-3-digetx@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0c95d336123de55faf3528c97718a4e7607b54c
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Feb 9 19:33:38 2020 +0300

    dmaengine: tegra-apb: Fix use-after-free
    
    commit 94788af4ed039476ff3527b0e6a12c1dc42cb022 upstream.
    
    I was doing some experiments with I2C and noticed that Tegra APB DMA
    driver crashes sometime after I2C DMA transfer termination. The crash
    happens because tegra_dma_terminate_all() bails out immediately if pending
    list is empty, and thus, it doesn't release the half-completed descriptors
    which are getting re-used before ISR tasklet kicks-in.
    
     tegra-i2c 7000c400.i2c: DMA transfer timeout
     elants_i2c 0-0010: elants_i2c_irq: failed to read data: -110
     ------------[ cut here ]------------
     WARNING: CPU: 0 PID: 142 at lib/list_debug.c:45 __list_del_entry_valid+0x45/0xac
     list_del corruption, ddbaac44->next is LIST_POISON1 (00000100)
     Modules linked in:
     CPU: 0 PID: 142 Comm: kworker/0:2 Not tainted 5.5.0-rc2-next-20191220-00175-gc3605715758d-dirty #538
     Hardware name: NVIDIA Tegra SoC (Flattened Device Tree)
     Workqueue: events_freezable_power_ thermal_zone_device_check
     [<c010e5c5>] (unwind_backtrace) from [<c010a1c5>] (show_stack+0x11/0x14)
     [<c010a1c5>] (show_stack) from [<c0973925>] (dump_stack+0x85/0x94)
     [<c0973925>] (dump_stack) from [<c011f529>] (__warn+0xc1/0xc4)
     [<c011f529>] (__warn) from [<c011f7e9>] (warn_slowpath_fmt+0x61/0x78)
     [<c011f7e9>] (warn_slowpath_fmt) from [<c042497d>] (__list_del_entry_valid+0x45/0xac)
     [<c042497d>] (__list_del_entry_valid) from [<c047a87f>] (tegra_dma_tasklet+0x5b/0x154)
     [<c047a87f>] (tegra_dma_tasklet) from [<c0124799>] (tasklet_action_common.constprop.0+0x41/0x7c)
     [<c0124799>] (tasklet_action_common.constprop.0) from [<c01022ab>] (__do_softirq+0xd3/0x2a8)
     [<c01022ab>] (__do_softirq) from [<c0124683>] (irq_exit+0x7b/0x98)
     [<c0124683>] (irq_exit) from [<c0168c19>] (__handle_domain_irq+0x45/0x80)
     [<c0168c19>] (__handle_domain_irq) from [<c043e429>] (gic_handle_irq+0x45/0x7c)
     [<c043e429>] (gic_handle_irq) from [<c0101aa5>] (__irq_svc+0x65/0x94)
     Exception stack(0xde2ebb90 to 0xde2ebbd8)
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200209163356.6439-2-digetx@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6aa7dc9166914db55f64245ce779083fd572dc71
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Feb 26 15:16:15 2020 -0800

    x86/pkeys: Manually set X86_FEATURE_OSPKE to preserve existing changes
    
    commit 735a6dd02222d8d070c7bb748f25895239ca8c92 upstream.
    
    Explicitly set X86_FEATURE_OSPKE via set_cpu_cap() instead of calling
    get_cpu_cap() to pull the feature bit from CPUID after enabling CR4.PKE.
    Invoking get_cpu_cap() effectively wipes out any {set,clear}_cpu_cap()
    changes that were made between this_cpu->c_init() and setup_pku(), as
    all non-synthetic feature words are reinitialized from the CPU's CPUID
    values.
    
    Blasting away capability updates manifests most visibility when running
    on a VMX capable CPU, but with VMX disabled by BIOS.  To indicate that
    VMX is disabled, init_ia32_feat_ctl() clears X86_FEATURE_VMX, using
    clear_cpu_cap() instead of setup_clear_cpu_cap() so that KVM can report
    which CPU is misconfigured (KVM needs to probe every CPU anyways).
    Restoring X86_FEATURE_VMX from CPUID causes KVM to think VMX is enabled,
    ultimately leading to an unexpected #GP when KVM attempts to do VMXON.
    
    Arguably, init_ia32_feat_ctl() should use setup_clear_cpu_cap() and let
    KVM figure out a different way to report the misconfigured CPU, but VMX
    is not the only feature bit that is affected, i.e. there is precedent
    that tweaking feature bits via {set,clear}_cpu_cap() after ->c_init()
    is expected to work.  Most notably, x86_init_rdrand()'s clearing of
    X86_FEATURE_RDRAND when RDRAND malfunctions is also overwritten.
    
    Fixes: 0697694564c8 ("x86/mm/pkeys: Actually enable Memory Protection Keys in the CPU")
    Reported-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Tested-by: Jacob Keller <jacob.e.keller@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200226231615.13664-1-sean.j.christopherson@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e46d9838ff8d445618428dc5852953629c44b4f
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Feb 4 19:13:06 2020 +0100

    media: v4l2-mem2mem.c: fix broken links
    
    commit 316e730f1d8bb029fe6cec2468fb2a50424485b3 upstream.
    
    The topology that v4l2_m2m_register_media_controller() creates for a
    processing block actually created a source-to-source link and a sink-to-sink
    link instead of two source-to-sink links.
    
    Unfortunately v4l2-compliance never checked for such bad links, so this
    went unreported for quite some time.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: Nicolas Dufresne <nicolas@ndufresne.ca>
    Cc: <stable@vger.kernel.org>      # for v4.19 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4492f1e7456bd162714c0ec2815c2749d930844
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Feb 28 12:54:06 2020 +0100

    vt: selection, push sel_lock up
    
    commit e8c75a30a23c6ba63f4ef6895cbf41fd42f21aa2 upstream.
    
    sel_lock cannot nest in the console lock. Thanks to syzkaller, the
    kernel states firmly:
    
    > WARNING: possible circular locking dependency detected
    > 5.6.0-rc3-syzkaller #0 Not tainted
    > ------------------------------------------------------
    > syz-executor.4/20336 is trying to acquire lock:
    > ffff8880a2e952a0 (&tty->termios_rwsem){++++}, at: tty_unthrottle+0x22/0x100 drivers/tty/tty_ioctl.c:136
    >
    > but task is already holding lock:
    > ffffffff89462e70 (sel_lock){+.+.}, at: paste_selection+0x118/0x470 drivers/tty/vt/selection.c:374
    >
    > which lock already depends on the new lock.
    >
    > the existing dependency chain (in reverse order) is:
    >
    > -> #2 (sel_lock){+.+.}:
    >        mutex_lock_nested+0x1b/0x30 kernel/locking/mutex.c:1118
    >        set_selection_kernel+0x3b8/0x18a0 drivers/tty/vt/selection.c:217
    >        set_selection_user+0x63/0x80 drivers/tty/vt/selection.c:181
    >        tioclinux+0x103/0x530 drivers/tty/vt/vt.c:3050
    >        vt_ioctl+0x3f1/0x3a30 drivers/tty/vt/vt_ioctl.c:364
    
    This is ioctl(TIOCL_SETSEL).
    Locks held on the path: console_lock -> sel_lock
    
    > -> #1 (console_lock){+.+.}:
    >        console_lock+0x46/0x70 kernel/printk/printk.c:2289
    >        con_flush_chars+0x50/0x650 drivers/tty/vt/vt.c:3223
    >        n_tty_write+0xeae/0x1200 drivers/tty/n_tty.c:2350
    >        do_tty_write drivers/tty/tty_io.c:962 [inline]
    >        tty_write+0x5a1/0x950 drivers/tty/tty_io.c:1046
    
    This is write().
    Locks held on the path: termios_rwsem -> console_lock
    
    > -> #0 (&tty->termios_rwsem){++++}:
    >        down_write+0x57/0x140 kernel/locking/rwsem.c:1534
    >        tty_unthrottle+0x22/0x100 drivers/tty/tty_ioctl.c:136
    >        mkiss_receive_buf+0x12aa/0x1340 drivers/net/hamradio/mkiss.c:902
    >        tty_ldisc_receive_buf+0x12f/0x170 drivers/tty/tty_buffer.c:465
    >        paste_selection+0x346/0x470 drivers/tty/vt/selection.c:389
    >        tioclinux+0x121/0x530 drivers/tty/vt/vt.c:3055
    >        vt_ioctl+0x3f1/0x3a30 drivers/tty/vt/vt_ioctl.c:364
    
    This is ioctl(TIOCL_PASTESEL).
    Locks held on the path: sel_lock -> termios_rwsem
    
    > other info that might help us debug this:
    >
    > Chain exists of:
    >   &tty->termios_rwsem --> console_lock --> sel_lock
    
    Clearly. From the above, we have:
     console_lock -> sel_lock
     sel_lock -> termios_rwsem
     termios_rwsem -> console_lock
    
    Fix this by reversing the console_lock -> sel_lock dependency in
    ioctl(TIOCL_SETSEL). First, lock sel_lock, then console_lock.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: syzbot+26183d9746e62da329b8@syzkaller.appspotmail.com
    Fixes: 07e6124a1a46 ("vt: selection, close sel_buffer race")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200228115406.5735-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efaef8463e1a9c20aa19c3de2b2d19f885e0315e
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Feb 28 12:54:05 2020 +0100

    vt: selection, push console lock down
    
    commit 4b70dd57a15d2f4685ac6e38056bad93e81e982f upstream.
    
    We need to nest the console lock in sel_lock, so we have to push it down
    a bit. Fortunately, the callers of set_selection_* just lock the console
    lock around the function call. So moving it down is easy.
    
    In the next patch, we switch the order.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Fixes: 07e6124a1a46 ("vt: selection, close sel_buffer race")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200228115406.5735-1-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31559b59040fc0e6ad363642112d4eb03ad4ebb7
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Feb 10 09:11:31 2020 +0100

    vt: selection, close sel_buffer race
    
    commit 07e6124a1a46b4b5a9b3cacc0c306b50da87abf5 upstream.
    
    syzkaller reported this UAF:
    BUG: KASAN: use-after-free in n_tty_receive_buf_common+0x2481/0x2940 drivers/tty/n_tty.c:1741
    Read of size 1 at addr ffff8880089e40e9 by task syz-executor.1/13184
    
    CPU: 0 PID: 13184 Comm: syz-executor.1 Not tainted 5.4.7 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
    ...
     kasan_report+0xe/0x20 mm/kasan/common.c:634
     n_tty_receive_buf_common+0x2481/0x2940 drivers/tty/n_tty.c:1741
     tty_ldisc_receive_buf+0xac/0x190 drivers/tty/tty_buffer.c:461
     paste_selection+0x297/0x400 drivers/tty/vt/selection.c:372
     tioclinux+0x20d/0x4e0 drivers/tty/vt/vt.c:3044
     vt_ioctl+0x1bcf/0x28d0 drivers/tty/vt/vt_ioctl.c:364
     tty_ioctl+0x525/0x15a0 drivers/tty/tty_io.c:2657
     vfs_ioctl fs/ioctl.c:47 [inline]
    
    It is due to a race between parallel paste_selection (TIOCL_PASTESEL)
    and set_selection_user (TIOCL_SETSEL) invocations. One uses sel_buffer,
    while the other frees it and reallocates a new one for another
    selection. Add a mutex to close this race.
    
    The mutex takes care properly of sel_buffer and sel_buffer_lth only. The
    other selection global variables (like sel_start, sel_end, and sel_cons)
    are protected only in set_selection_user. The other functions need quite
    some more work to close the races of the variables there. This is going
    to happen later.
    
    This likely fixes (I am unsure as there is no reproducer provided) bug
    206361 too. It was marked as CVE-2020-8648.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: syzbot+59997e8d5cbdc486e6f6@syzkaller.appspotmail.com
    References: https://bugzilla.kernel.org/show_bug.cgi?id=206361
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200210081131.23572-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 232bae49a85c87c9a55411761586a99eac90bfa6
Author: Jay Dolan <jay.dolan@accesio.com>
Date:   Thu Mar 5 06:05:04 2020 -0800

    serial: 8250_exar: add support for ACCES cards
    
    commit 10c5ccc3c6d32f3d7d6c07de1d3f0f4b52f3e3ab upstream.
    
    Add ACCES VIDs and PIDs that use the Exar chips
    
    Signed-off-by: Jay Dolan <jay.dolan@accesio.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200305140504.22237-1-jay.dolan@accesio.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c1f86b2e5ec2c74f7165caca6e9c2e7c3714dfd
Author: tangbin <tangbin@cmss.chinamobile.com>
Date:   Thu Mar 5 09:38:23 2020 +0800

    tty:serial:mvebu-uart:fix a wrong return
    
    commit 4a3e208474204e879d22a310b244cb2f39e5b1f8 upstream.
    
    in this place, the function should return a
    negative value and the PTR_ERR already returns
    a negative,so return -PTR_ERR() is wrong.
    
    Signed-off-by: tangbin <tangbin@cmss.chinamobile.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20200305013823.20976-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f0416c0a89f94389ee20471ee623e8f0bbc15b7
Author: Faiz Abbas <faiz_abbas@ti.com>
Date:   Tue Jan 28 19:17:59 2020 +0530

    arm: dts: dra76x: Fix mmc3 max-frequency
    
    commit fa63c0039787b8fbacf4d6a51e3ff44288f5b90b upstream.
    
    dra76x is not affected by i887 which requires mmc3 node to be limited to
    a max frequency of 64 MHz. Fix this by overwriting the correct value in
    the the dra76 specific dtsi.
    
    Fixes: 895bd4b3e5ec ("ARM: dts: Add support for dra76-evm")
    Cc: stable@vger.kernel.org
    Signed-off-by: Faiz Abbas <faiz_abbas@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a867bbb23a1c9e346d62e13f2f715d53850e3dd0
Author: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
Date:   Thu Mar 5 22:28:36 2020 -0800

    fat: fix uninit-memory access for partial initialized inode
    
    commit bc87302a093f0eab45cd4e250c2021299f712ec6 upstream.
    
    When get an error in the middle of reading an inode, some fields in the
    inode might be still not initialized.  And then the evict_inode path may
    access those fields via iput().
    
    To fix, this makes sure that inode fields are initialized.
    
    Reported-by: syzbot+9d82b8de2992579da5d0@syzkaller.appspotmail.com
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/871rqnreqx.fsf@mail.parknet.co.jp
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5451843ac66f3aaa02a6f1d48790e4b8dc49d24
Author: Huang Ying <ying.huang@intel.com>
Date:   Thu Mar 5 22:28:29 2020 -0800

    mm: fix possible PMD dirty bit lost in set_pmd_migration_entry()
    
    commit 8a8683ad9ba48b4b52a57f013513d1635c1ca5c4 upstream.
    
    In set_pmd_migration_entry(), pmdp_invalidate() is used to change PMD
    atomically.  But the PMD is read before that with an ordinary memory
    reading.  If the THP (transparent huge page) is written between the PMD
    reading and pmdp_invalidate(), the PMD dirty bit may be lost, and cause
    data corruption.  The race window is quite small, but still possible in
    theory, so need to be fixed.
    
    The race is fixed via using the return value of pmdp_invalidate() to get
    the original content of PMD, which is a read/modify/write atomic
    operation.  So no THP writing can occur in between.
    
    The race has been introduced when the THP migration support is added in
    the commit 616b8371539a ("mm: thp: enable thp migration in generic path").
    But this fix depends on the commit d52605d7cb30 ("mm: do not lose dirty
    and accessed bits in pmdp_invalidate()").  So it's easy to be backported
    after v4.16.  But the race window is really small, so it may be fine not
    to backport the fix at all.
    
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: "Huang, Ying" <ying.huang@intel.com>
    Reviewed-by: Zi Yan <ziy@nvidia.com>
    Reviewed-by: William Kucharski <william.kucharski@oracle.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Link: http://lkml.kernel.org/r/20200220075220.2327056-1-ying.huang@intel.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54c5baedea9c610199aa46359f3b8d2f84ad9bc5
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Thu Mar 5 22:28:26 2020 -0800

    mm, numa: fix bad pmd by atomically check for pmd_trans_huge when marking page tables prot_numa
    
    commit 8b272b3cbbb50a6a8e62d8a15affd473a788e184 upstream.
    
    : A user reported a bug against a distribution kernel while running a
    : proprietary workload described as "memory intensive that is not swapping"
    : that is expected to apply to mainline kernels.  The workload is
    : read/write/modifying ranges of memory and checking the contents.  They
    : reported that within a few hours that a bad PMD would be reported followed
    : by a memory corruption where expected data was all zeros.  A partial
    : report of the bad PMD looked like
    :
    :   [ 5195.338482] ../mm/pgtable-generic.c:33: bad pmd ffff8888157ba008(000002e0396009e2)
    :   [ 5195.341184] ------------[ cut here ]------------
    :   [ 5195.356880] kernel BUG at ../mm/pgtable-generic.c:35!
    :   ....
    :   [ 5195.410033] Call Trace:
    :   [ 5195.410471]  [<ffffffff811bc75d>] change_protection_range+0x7dd/0x930
    :   [ 5195.410716]  [<ffffffff811d4be8>] change_prot_numa+0x18/0x30
    :   [ 5195.410918]  [<ffffffff810adefe>] task_numa_work+0x1fe/0x310
    :   [ 5195.411200]  [<ffffffff81098322>] task_work_run+0x72/0x90
    :   [ 5195.411246]  [<ffffffff81077139>] exit_to_usermode_loop+0x91/0xc2
    :   [ 5195.411494]  [<ffffffff81003a51>] prepare_exit_to_usermode+0x31/0x40
    :   [ 5195.411739]  [<ffffffff815e56af>] retint_user+0x8/0x10
    :
    : Decoding revealed that the PMD was a valid prot_numa PMD and the bad PMD
    : was a false detection.  The bug does not trigger if automatic NUMA
    : balancing or transparent huge pages is disabled.
    :
    : The bug is due a race in change_pmd_range between a pmd_trans_huge and
    : pmd_nond_or_clear_bad check without any locks held.  During the
    : pmd_trans_huge check, a parallel protection update under lock can have
    : cleared the PMD and filled it with a prot_numa entry between the transhuge
    : check and the pmd_none_or_clear_bad check.
    :
    : While this could be fixed with heavy locking, it's only necessary to make
    : a copy of the PMD on the stack during change_pmd_range and avoid races.  A
    : new helper is created for this as the check if quite subtle and the
    : existing similar helpful is not suitable.  This passed 154 hours of
    : testing (usually triggers between 20 minutes and 24 hours) without
    : detecting bad PMDs or corruption.  A basic test of an autonuma-intensive
    : workload showed no significant change in behaviour.
    
    Although Mel withdrew the patch on the face of LKML comment
    https://lkml.org/lkml/2017/4/10/922 the race window aforementioned is
    still open, and we have reports of Linpack test reporting bad residuals
    after the bad PMD warning is observed.  In addition to that, bad
    rss-counter and non-zero pgtables assertions are triggered on mm teardown
    for the task hitting the bad PMD.
    
     host kernel: mm/pgtable-generic.c:40: bad pmd 00000000b3152f68(8000000d2d2008e7)
     ....
     host kernel: BUG: Bad rss-counter state mm:00000000b583043d idx:1 val:512
     host kernel: BUG: non-zero pgtables_bytes on freeing mm: 4096
    
    The issue is observed on a v4.18-based distribution kernel, but the race
    window is expected to be applicable to mainline kernels, as well.
    
    [akpm@linux-foundation.org: fix comment typo, per Rafael]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Rafael Aquini <aquini@redhat.com>
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>
    Cc: Zi Yan <zi.yan@cs.rutgers.edu>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Michal Hocko <mhocko@suse.com>
    Link: http://lkml.kernel.org/r/20200216191800.22423-1-aquini@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7abe1e0a874418b07524c9e07225df1cbb421ce9
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Wed Mar 4 10:24:29 2020 +0800

    vgacon: Fix a UAF in vgacon_invert_region
    
    commit 513dc792d6060d5ef572e43852683097a8420f56 upstream.
    
    When syzkaller tests, there is a UAF:
      BUG: KASan: use after free in vgacon_invert_region+0x9d/0x110 at addr
        ffff880000100000
      Read of size 2 by task syz-executor.1/16489
      page:ffffea0000004000 count:0 mapcount:-127 mapping:          (null)
      index:0x0
      page flags: 0xfffff00000000()
      page dumped because: kasan: bad access detected
      CPU: 1 PID: 16489 Comm: syz-executor.1 Not tainted
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
      rel-1.9.3-0-ge2fc41e-prebuilt.qemu-project.org 04/01/2014
      Call Trace:
        [<ffffffffb119f309>] dump_stack+0x1e/0x20
        [<ffffffffb04af957>] kasan_report+0x577/0x950
        [<ffffffffb04ae652>] __asan_load2+0x62/0x80
        [<ffffffffb090f26d>] vgacon_invert_region+0x9d/0x110
        [<ffffffffb0a39d95>] invert_screen+0xe5/0x470
        [<ffffffffb0a21dcb>] set_selection+0x44b/0x12f0
        [<ffffffffb0a3bfae>] tioclinux+0xee/0x490
        [<ffffffffb0a1d114>] vt_ioctl+0xff4/0x2670
        [<ffffffffb0a0089a>] tty_ioctl+0x46a/0x1a10
        [<ffffffffb052db3d>] do_vfs_ioctl+0x5bd/0xc40
        [<ffffffffb052e2f2>] SyS_ioctl+0x132/0x170
        [<ffffffffb11c9b1b>] system_call_fastpath+0x22/0x27
        Memory state around the buggy address:
         ffff8800000fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00
         00 00
         ffff8800000fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00
         00 00 00
        >ffff880000100000: ff ff ff ff ff ff ff ff ff ff ff ff ff
         ff ff ff
    
    It can be reproduce in the linux mainline by the program:
      #include <stdio.h>
      #include <stdlib.h>
      #include <unistd.h>
      #include <fcntl.h>
      #include <sys/types.h>
      #include <sys/stat.h>
      #include <sys/ioctl.h>
      #include <linux/vt.h>
    
      struct tiocl_selection {
        unsigned short xs;      /* X start */
        unsigned short ys;      /* Y start */
        unsigned short xe;      /* X end */
        unsigned short ye;      /* Y end */
        unsigned short sel_mode; /* selection mode */
      };
    
      #define TIOCL_SETSEL    2
      struct tiocl {
        unsigned char type;
        unsigned char pad;
        struct tiocl_selection sel;
      };
    
      int main()
      {
        int fd = 0;
        const char *dev = "/dev/char/4:1";
    
        struct vt_consize v = {0};
        struct tiocl tioc = {0};
    
        fd = open(dev, O_RDWR, 0);
    
        v.v_rows = 3346;
        ioctl(fd, VT_RESIZEX, &v);
    
        tioc.type = TIOCL_SETSEL;
        ioctl(fd, TIOCLINUX, &tioc);
    
        return 0;
      }
    
    When resize the screen, update the 'vc->vc_size_row' to the new_row_size,
    but when 'set_origin' in 'vgacon_set_origin', vgacon use 'vga_vram_base'
    for 'vc_origin' and 'vc_visible_origin', not 'vc_screenbuf'. It maybe
    smaller than 'vc_screenbuf'. When TIOCLINUX, use the new_row_size to calc
    the offset, it maybe larger than the vga_vram_size in vgacon driver, then
    bad access.
    Also, if set an larger screenbuf firstly, then set an more larger
    screenbuf, when copy old_origin to new_origin, a bad access may happen.
    
    So, If the screen size larger than vga_vram, resize screen should be
    failed. This alse fix CVE-2020-8649 and CVE-2020-8647.
    
    Linus pointed out that overflow checking seems absent. We're saved by
    the existing bounds checks in vc_do_resize() with rather strict
    limits:
    
            if (cols > VC_RESIZE_MAXCOL || lines > VC_RESIZE_MAXROW)
                    return -EINVAL;
    
    Fixes: 0aec4867dca14 ("[PATCH] SVGATextMode fix")
    Reference: CVE-2020-8647 and CVE-2020-8649
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    [danvet: augment commit message to point out overflow safety]
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200304022429.37738-1-zhangxiaoxu5@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ead489c92a87ad1e5df5f29311a5075c897044d4
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Wed Feb 26 18:50:36 2020 +0100

    usb: core: port: do error out if usb_autopm_get_interface() fails
    
    commit 1f8b39bc99a31759e97a0428a5c3f64802c1e61d upstream.
    
    Reviewing a fresh portion of coverity defects in USB core
    (specifically CID 1458999), Alan Stern noted below in [1]:
    
    On Tue, Feb 25, 2020 at 02:39:23PM -0500, Alan Stern wrote:
     > A revised search finds line 997 in drivers/usb/core/hub.c and lines
     > 216, 269 in drivers/usb/core/port.c.  (I didn't try looking in any
     > other directories.)  AFAICT all three of these should check the
     > return value, although a error message in the kernel log probably
     > isn't needed.
    
    Factor out the usb_port_runtime_{resume,suspend}() changes into a
    standalone patch to allow conflict-free porting on top of stable v3.9+.
    
    [1] https://lore.kernel.org/lkml/Pine.LNX.4.44L0.2002251419120.1485-100000@iolanthe.rowland.org
    
    Fixes: 971fcd492cebf5 ("usb: add runtime pm support for usb port device")
    Cc: stable@vger.kernel.org # v3.9+
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200226175036.14946-3-erosca@de.adit-jv.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c23ad063f6fd0a0ab7b2aa1768e2d981e320b830
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Wed Feb 26 18:50:35 2020 +0100

    usb: core: hub: do error out if usb_autopm_get_interface() fails
    
    commit 60e3f6e4ac5b0fda43dad01c32e09409ec710045 upstream.
    
    Reviewing a fresh portion of coverity defects in USB core
    (specifically CID 1458999), Alan Stern noted below in [1]:
    
    On Tue, Feb 25, 2020 at 02:39:23PM -0500, Alan Stern wrote:
     > A revised search finds line 997 in drivers/usb/core/hub.c and lines
     > 216, 269 in drivers/usb/core/port.c.  (I didn't try looking in any
     > other directories.)  AFAICT all three of these should check the
     > return value, although a error message in the kernel log probably
     > isn't needed.
    
    Factor out the usb_remove_device() change into a standalone patch to
    allow conflict-free integration on top of the earliest stable branches.
    
    [1] https://lore.kernel.org/lkml/Pine.LNX.4.44L0.2002251419120.1485-100000@iolanthe.rowland.org
    
    Fixes: 253e05724f9230 ("USB: add a "remove hardware" sysfs attribute")
    Cc: stable@vger.kernel.org # v2.6.33+
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200226175036.14946-2-erosca@de.adit-jv.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e02865dbd31188a7fcec76f5f44c84ab872d597d
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Wed Feb 26 18:50:34 2020 +0100

    usb: core: hub: fix unhandled return by employing a void function
    
    commit 63d6d7ed475c53dc1cabdfedf63de1fd8dcd72ee upstream.
    
    Address below Coverity complaint (Feb 25, 2020, 8:06 AM CET):

commit 0c6023a3f0e20c8ceff4ee660f0453a0423f5295
Author: Pratham Pratap <prathampratap@codeaurora.org>
Date:   Mon Mar 2 21:44:43 2020 +0000

    usb: dwc3: gadget: Update chain bit correctly when using sg list
    
    commit dad2aff3e827b112f27fa5e6f2bf87a110067c3f upstream.
    
    If scatter-gather operation is allowed, a large USB request is split
    into multiple TRBs. For preparing TRBs for sg list, driver iterates
    over the list and creates TRB for each sg and mark the chain bit to
    false for the last sg. The current IOMMU driver is clubbing the list
    of sgs which shares a page boundary into one and giving it to USB driver.
    With this the number of sgs mapped it not equal to the the number of sgs
    passed. Because of this USB driver is not marking the chain bit to false
    since it couldn't iterate to the last sg. This patch addresses this issue
    by marking the chain bit to false if it is the last mapped sg.
    
    At a practical level, this patch resolves USB transfer stalls
    seen with adb on dwc3 based db845c, pixel3 and other qcom
    hardware after functionfs gadget added scatter-gather support
    around v4.20.
    
    Credit also to Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
    who implemented a very similar fix to this issue.
    
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: Yang Fei <fei.yang@intel.com>
    Cc: Thinh Nguyen <thinhn@synopsys.com>
    Cc: Tejas Joglekar <tejas.joglekar@synopsys.com>
    Cc: Andrzej Pietrasiewicz <andrzej.p@collabora.com>
    Cc: Jack Pham <jackp@codeaurora.org>
    Cc: Todd Kjos <tkjos@google.com>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Linux USB List <linux-usb@vger.kernel.org>
    Cc: stable <stable@vger.kernel.org> #4.20+
    Signed-off-by: Pratham Pratap <prathampratap@codeaurora.org>
    [jstultz: Slight tweak to remove sg_is_last() usage, reworked
              commit message, minor comment tweak]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Link: https://lore.kernel.org/r/20200302214443.55783-1-john.stultz@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 505107c0d172f094fc1cbd83a37172b24f8b1bb0
Author: Dan Lazewatsky <dlaz@chromium.org>
Date:   Wed Feb 26 14:34:38 2020 +0000

    usb: quirks: add NO_LPM quirk for Logitech Screen Share
    
    commit b96ed52d781a2026d0c0daa5787c6f3d45415862 upstream.
    
    LPM on the device appears to cause xHCI host controllers to claim
    that there isn't enough bandwidth to support additional devices.
    
    Signed-off-by: Dan Lazewatsky <dlaz@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.com>
    Link: https://lore.kernel.org/r/20200226143438.1445-1-gustavo.padovan@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a1cac7ed9a81658c757efb5a2e0615ea6703af8
Author: Jim Lin <jilin@nvidia.com>
Date:   Mon Mar 2 22:21:35 2020 +0800

    usb: storage: Add quirk for Samsung Fit flash
    
    commit 86d92f5465958752481269348d474414dccb1552 upstream.
    
    Current driver has 240 (USB2.0) and 2048 (USB3.0) as max_sectors,
    e.g., /sys/bus/scsi/devices/0:0:0:0/max_sectors
    
    If data access times out, driver error handling will issue a port
    reset.
    Sometimes Samsung Fit (090C:1000) flash disk will not respond to
    later Set Address or Get Descriptor command.
    
    Adding this quirk to limit max_sectors to 64 sectors to avoid issue
    occurring.
    
    Signed-off-by: Jim Lin <jilin@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1583158895-31342-1-git-send-email-jilin@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e319f242af3c781bd76dbb1141ce4cc5314a6a1
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Feb 19 06:01:03 2020 +1000

    cifs: don't leak -EAGAIN for stat() during reconnect
    
    commit fc513fac56e1b626ae48a74d7551d9c35c50129e upstream.
    
    If from cifs_revalidate_dentry_attr() the SMB2/QUERY_INFO call fails with an
    error, such as STATUS_SESSION_EXPIRED, causing the session to be reconnected
    it is possible we will leak -EAGAIN back to the application even for
    system calls such as stat() where this is not a valid error.
    
    Fix this by re-trying the operation from within cifs_revalidate_dentry_attr()
    if cifs_get_inode_info*() returns -EAGAIN.
    
    This fixes stat() and possibly also other system calls that uses
    cifs_revalidate_dentry*().
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb597f014fd09cddd2ac3055db35706b410a3b77
Author: Christian Lachner <gladiac@gmail.com>
Date:   Sun Feb 23 10:24:16 2020 +0100

    ALSA: hda/realtek - Fix silent output on Gigabyte X570 Aorus Master
    
    commit 0d45e86d2267d5bdf7bbb631499788da1c27ceb2 upstream.
    
    The Gigabyte X570 Aorus Master motherboard with ALC1220 codec
    requires a similar workaround for Clevo laptops to enforce the
    DAC/mixer connection path. Set up a quirk entry for that.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205275
    Signed-off-by: Christian Lachner <gladiac@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200223092416.15016-2-gladiac@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 028fdc8d0602dd3519dd0c7faa6df2da1fda9a46
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Feb 20 15:21:54 2020 +0800

    ALSA: hda/realtek - Add Headset Mic supported
    
    commit 78def224f59c05d00e815be946ec229719ccf377 upstream.
    
    Dell desktop platform supported headset Mic.
    Add pin verb to enable headset Mic.
    This platform only support fixed type headset for Iphone type.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/b9da28d772ef43088791b0f3675929e7@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c1a140b000d3768d759b5c0df7144c73b398065
Author: Tim Harvey <tharvey@gateworks.com>
Date:   Wed Feb 19 15:19:36 2020 -0800

    net: thunderx: workaround BGX TX Underflow issue
    
    [ Upstream commit 971617c3b761c876d686a2188220a33898c90e99 ]
    
    While it is not yet understood why a TX underflow can easily occur
    for SGMII interfaces resulting in a TX wedge. It has been found that
    disabling/re-enabling the LMAC resolves the issue.
    
    Signed-off-by: Tim Harvey <tharvey@gateworks.com>
    Reviewed-by: Robert Jones <rjones@gateworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 297435d902e2f6ebea6de3320c688bef7a744adc
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Feb 19 22:23:18 2020 -0800

    x86/xen: Distribute switch variables for initialization
    
    [ Upstream commit 9038ec99ceb94fb8d93ade5e236b2928f0792c7c ]
    
    Variables declared in a switch statement before any case statements
    cannot be automatically initialized with compiler instrumentation (as
    they are not part of any execution flow). With GCC's proposed automatic
    stack variable initialization feature, this triggers a warning (and they
    don't get initialized). Clang's automatic stack variable initialization
    (via CONFIG_INIT_STACK_ALL=y) doesn't throw a warning, but it also
    doesn't initialize such variables[1]. Note that these warnings (or silent
    skipping) happen before the dead-store elimination optimization phase,
    so even when the automatic initializations are later elided in favor of
    direct initializations, the warnings remain.
    
    To avoid these problems, move such variables into the "case" where
    they're used or lift them up into the main function body.
    
    arch/x86/xen/enlighten_pv.c: In function ‘xen_write_msr_safe’:
    arch/x86/xen/enlighten_pv.c:904:12: warning: statement will never be executed [-Wswitch-unreachable]
      904 |   unsigned which;
          |            ^~~~~
    
    [1] https://bugs.llvm.org/show_bug.cgi?id=44916
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200220062318.69299-1-keescook@chromium.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    [boris: made @which an 'unsigned int']
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e00f896ded69bc90672bbaf1d25e2b777a79b6d
Author: Michal Swiatkowski <michal.swiatkowski@intel.com>
Date:   Thu Feb 13 13:31:24 2020 -0800

    ice: Don't tell the OS that link is going down
    
    [ Upstream commit 8a55c08d3bbc9ffc9639f69f742e59ebd99f913b ]
    
    Remove code that tell the OS that link is going down when user
    change flow control via ethtool. When link is up it isn't certain
    that link goes down after 0x0605 aq command. If link doesn't go
    down, OS thinks that link is down, but physical link is up. To
    reset this state user have to take interface down and up.
    
    If link goes down after 0x0605 command, FW send information
    about that and after that driver tells the OS that the link goes
    down. So this code in ethtool is unnecessary.
    
    Signed-off-by: Michal Swiatkowski <michal.swiatkowski@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e82a65b2f4f37111b52021feafb51b5d84ed7023
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Feb 20 00:59:36 2020 +0900

    nvme: Fix uninitialized-variable warning
    
    [ Upstream commit 15755854d53b4bbb0bb37a0fce66f0156cfc8a17 ]
    
    gcc may detect a false positive on nvme using an unintialized variable
    if setting features fails. Since this is not a fast path, explicitly
    initialize this variable to suppress the warning.
    
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9623c8ae73c42eab6849ad97b8dfd02bd8b9b1d7
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Mon Feb 10 10:48:11 2020 +0100

    s390/qdio: fill SL with absolute addresses
    
    [ Upstream commit e9091ffd6a0aaced111b5d6ead5eaab5cd7101bc ]
    
    As the comment says, sl->sbal holds an absolute address. qeth currently
    solves this through wild casting, while zfcp doesn't care.
    
    Handle this properly in the code that actually builds the SL.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Steffen Maier <maier@linux.ibm.com> [for qdio]
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d71f8bd18cdfd8b5ea94acbd6248951d51e3770b
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Thu Jan 16 12:46:51 2020 -0800

    x86/boot/compressed: Don't declare __force_order in kaslr_64.c
    
    [ Upstream commit df6d4f9db79c1a5d6f48b59db35ccd1e9ff9adfc ]
    
    GCC 10 changed the default to -fno-common, which leads to
    
        LD      arch/x86/boot/compressed/vmlinux
      ld: arch/x86/boot/compressed/pgtable_64.o:(.bss+0x0): multiple definition of `__force_order'; \
        arch/x86/boot/compressed/kaslr_64.o:(.bss+0x0): first defined here
      make[2]: *** [arch/x86/boot/compressed/Makefile:119: arch/x86/boot/compressed/vmlinux] Error 1
    
    Since __force_order is already provided in pgtable_64.c, there is no
    need to declare __force_order in kaslr_64.c.
    
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200124181811.4780-1-hjl.tools@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b696f79fd1888dbec2d6df6cb47e95354af442de
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Feb 16 23:48:29 2020 +0900

    s390: make 'install' not depend on vmlinux
    
    [ Upstream commit 94e90f727f7424d827256023cace829cad6896f4 ]
    
    For the same reason as commit 19514fc665ff ("arm, kbuild: make "make
    install" not depend on vmlinux"), the install targets should never
    trigger the rebuild of the kernel.
    
    The variable, CONFIGURE, is not set by anyone. Remove it as well.
    
    Link: https://lkml.kernel.org/r/20200216144829.27023-1-masahiroy@kernel.org
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55185baad97abbf50131d426419a6097bb5ad32a
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Jan 24 08:48:55 2020 +0300

    s390/cio: cio_ignore_proc_seq_next should increase position index
    
    [ Upstream commit 8b101a5e14f2161869636ff9cb4907b7749dc0c2 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Link: https://lore.kernel.org/r/d44c53a7-9bc1-15c7-6d4a-0c10cb9dffce@virtuozzo.com
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4430620d88b4bda46cba9f48cc17940e34296f5b
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Mon Jan 20 10:17:29 2020 +0100

    watchdog: da9062: do not ping the hw during stop()
    
    [ Upstream commit e9a0e65eda3f78d0b04ec6136c591c000cbc3b76 ]
    
    The da9062 hw has a minimum ping cool down phase of at least 200ms. The
    driver takes that into account by setting the min_hw_heartbeat_ms to
    300ms and the core guarantees that the hw limit is observed for the
    ping() calls. But the core can't guarantee the required minimum ping
    cool down phase if a stop() command is send immediately after the ping()
    command. So it is not allowed to ping the watchdog within the stop()
    command as the driver does. Remove the ping can be done without doubts
    because the watchdog gets disabled anyway and a (re)start resets the
    watchdog counter too.
    
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200120091729.16256-1-m.felsch@pengutronix.de
    [groeck: Updated description]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9979982efcd9777d66ffa95ee7794265d2f5adbd
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 15 17:54:19 2020 +0100

    net: ks8851-ml: Fix 16-bit IO operation
    
    [ Upstream commit 58292104832fef6cb4a89f736012c0e0724c3442 ]
    
    The Micrel KSZ8851-16MLLI datasheet DS00002357B page 12 states that
    BE[3:0] signals are active high. This contradicts the measurements
    of the behavior of the actual chip, where these signals behave as
    active low. For example, to read the CIDER register, the bus must
    expose 0xc0c0 during the address phase, which means BE[3:0]=4'b1100.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Petr Stetiar <ynezz@true.cz>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 030be1ffe572fcf0a5fb9126908a61b0b456b756
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 15 17:54:18 2020 +0100

    net: ks8851-ml: Fix 16-bit data access
    
    [ Upstream commit edacb098ea9c31589276152f09b4439052c0f2b1 ]
    
    The packet data written to and read from Micrel KSZ8851-16MLLI must be
    byte-swapped in 16-bit mode, add this byte-swapping.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Petr Stetiar <ynezz@true.cz>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 440aafddc4ff49ebfebaf94156817695bb4820f9
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 15 17:54:17 2020 +0100

    net: ks8851-ml: Remove 8-bit bus accessors
    
    [ Upstream commit 69233bba6543a37755158ca3382765387b8078df ]
    
    This driver is mixing 8-bit and 16-bit bus accessors for reasons unknown,
    however the speculation is that this was some sort of attempt to support
    the 8-bit bus mode.
    
    As per the KS8851-16MLL documentation, all two registers accessed via the
    8-bit accessors are internally 16-bit registers, so reading them using
    16-bit accessors is fine. The KS_CCR read can be converted to 16-bit read
    outright, as it is already a concatenation of two 8-bit reads of that
    register. The KS_RXQCR accesses are 8-bit only, however writing the top
    8 bits of the register is OK as well, since the driver caches the entire
    16-bit register value anyway.
    
    Finally, the driver is not used by any hardware in the kernel right now.
    The only hardware available to me is one with 16-bit bus, so I have no
    way to test the 8-bit bus mode, however it is unlikely this ever really
    worked anyway. If the 8-bit bus mode is ever required, it can be easily
    added by adjusting the 16-bit accessors to do 2 consecutive accesses,
    which is how this should have been done from the beginning.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Petr Stetiar <ynezz@true.cz>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5de4ba41578a0b16667ea034487bbe8a87a8bf3c
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Feb 14 15:26:19 2020 -0800

    net: dsa: b53: Ensure the default VID is untagged
    
    [ Upstream commit d965a5432d4c3e6b9c3d2bc1d4a800013bbf76f6 ]
    
    We need to ensure that the default VID is untagged otherwise the switch
    will be sending tagged frames and the results can be problematic. This
    is especially true with b53 switches that use VID 0 as their default
    VLAN since VID 0 has a special meaning.
    
    Fixes: fea83353177a ("net: dsa: b53: Fix default VLAN ID")
    Fixes: 061f6a505ac3 ("net: dsa: Add ndo_vlan_rx_{add, kill}_vid implementation")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf99e2442bac74d62d505f403eb50bbb7a37eec8
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Tue Feb 11 15:32:56 2020 +0800

    selftests: forwarding: use proto icmp for {gretap, ip6gretap}_mac testing
    
    [ Upstream commit e8023b030ce1748930e2dc76353a262fe47d4745 ]
    
    For tc ip_proto filter, when we extract the flow via __skb_flow_dissect()
    without flag FLOW_DISSECTOR_F_STOP_AT_ENCAP, we will continue extract to
    the inner proto.
    
    So for GRE + ICMP messages, we should not track GRE proto, but inner ICMP
    proto.
    
    For test mirror_gre.sh, it may make user confused if we capture ICMP
    message on $h3(since the flow is GRE message). So I move the capture
    dev to h3-gt{4,6}, and only capture ICMP message.
    
    Before the fix:
    ]# ./mirror_gre.sh
    TEST: ingress mirror to gretap (skip_hw)                            [ OK ]
    TEST: egress mirror to gretap (skip_hw)                             [ OK ]
    TEST: ingress mirror to ip6gretap (skip_hw)                         [ OK ]
    TEST: egress mirror to ip6gretap (skip_hw)                          [ OK ]
    TEST: ingress mirror to gretap: envelope MAC (skip_hw)              [FAIL]
     Expected to capture 10 packets, got 0.
    TEST: egress mirror to gretap: envelope MAC (skip_hw)               [FAIL]
     Expected to capture 10 packets, got 0.
    TEST: ingress mirror to ip6gretap: envelope MAC (skip_hw)           [FAIL]
     Expected to capture 10 packets, got 0.
    TEST: egress mirror to ip6gretap: envelope MAC (skip_hw)            [FAIL]
     Expected to capture 10 packets, got 0.
    TEST: two simultaneously configured mirrors (skip_hw)               [ OK ]
    WARN: Could not test offloaded functionality
    
    After fix:
    ]# ./mirror_gre.sh
    TEST: ingress mirror to gretap (skip_hw)                            [ OK ]
    TEST: egress mirror to gretap (skip_hw)                             [ OK ]
    TEST: ingress mirror to ip6gretap (skip_hw)                         [ OK ]
    TEST: egress mirror to ip6gretap (skip_hw)                          [ OK ]
    TEST: ingress mirror to gretap: envelope MAC (skip_hw)              [ OK ]
    TEST: egress mirror to gretap: envelope MAC (skip_hw)               [ OK ]
    TEST: ingress mirror to ip6gretap: envelope MAC (skip_hw)           [ OK ]
    TEST: egress mirror to ip6gretap: envelope MAC (skip_hw)            [ OK ]
    TEST: two simultaneously configured mirrors (skip_hw)               [ OK ]
    WARN: Could not test offloaded functionality
    
    Fixes: ba8d39871a10 ("selftests: forwarding: Add test for mirror to gretap")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Petr Machata <pmachata@gmail.com>
    Tested-by: Petr Machata <pmachata@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31d522c914752410833525a00319cb9721d5c4c7
Author: Harigovindan P <harigovi@codeaurora.org>
Date:   Thu Feb 6 14:42:01 2020 +0530

    drm/msm/dsi/pll: call vco set rate explicitly
    
    [ Upstream commit c6659785dfb3f8d75f1fe637e4222ff8178f5280 ]
    
    For a given byte clock, if VCO recalc value is exactly same as
    vco set rate value, vco_set_rate does not get called assuming
    VCO is already set to required value. But Due to GDSC toggle,
    VCO values are erased in the HW. To make sure VCO is programmed
    correctly, we forcefully call set_rate from vco_prepare.
    
    Signed-off-by: Harigovindan P <harigovi@codeaurora.org>
    Reviewed-by: Jeffrey Hugo <jeffrey.l.hugo@gmail.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3820cfd2559632d3213297965fbb3c7e2a5b0583
Author: Harigovindan P <harigovi@codeaurora.org>
Date:   Thu Feb 6 14:26:15 2020 +0530

    drm/msm/dsi: save pll state before dsi host is powered off
    
    [ Upstream commit a1028dcfd0dd97884072288d0c8ed7f30399b528 ]
    
    Save pll state before dsi host is powered off. Without this change
    some register values gets resetted.
    
    Signed-off-by: Harigovindan P <harigovi@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 579767b818ca8142ee54225c0d66c62917157a85
Author: Tomas Henzl <thenzl@redhat.com>
Date:   Tue Feb 4 16:24:13 2020 +0100

    scsi: megaraid_sas: silence a warning
    
    [ Upstream commit 0e99b2c625da181aebf1a3d13493e3f7a5057a9c ]
    
    Add a flag to DMA memory allocation to silence a warning.
    
    This driver allocates DMA memory for IO frames. This allocation may exceed
    MAX_ORDER pages for few megaraid_sas controllers (controllers with very
    high queue depth). Consequently, the driver has logic to keep reducing the
    controller queue depth until the DMA memory allocation succeeds.
    
    On impacted megaraid_sas controllers there would be multiple DMA allocation
    failures until driver settled on an allocation that fit. These failed DMA
    allocation requests caused stack traces in system logs. These were not
    harmful and this patch silences those warnings/stack traces.
    
    [mkp: clarified commit desc]
    
    Link: https://lore.kernel.org/r/20200204152413.7107-1-thenzl@redhat.com
    Signed-off-by: Tomas Henzl <thenzl@redhat.com>
    Acked-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4818564f47774de1152703e4c96ffcd0d0f10d00
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Jan 29 20:12:44 2020 +0000

    drm: msm: Fix return type of dsi_mgr_connector_mode_valid for kCFI
    
    [ Upstream commit 7fd2dfc3694922eb7ace4801b7208cf9f62ebc7d ]
    
    I was hitting kCFI crashes when building with clang, and after
    some digging finally narrowed it down to the
    dsi_mgr_connector_mode_valid() function being implemented as
    returning an int, instead of an enum drm_mode_status.
    
    This patch fixes it, and appeases the opaque word of the kCFI
    gods (seriously, clang inlining everything makes the kCFI
    backtraces only really rough estimates of where things went
    wrong).
    
    Thanks as always to Sami for his help narrowing this down.
    
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: Sami Tolvanen <samitolvanen@google.com>
    Cc: Todd Kjos <tkjos@google.com>
    Cc: Alistair Delva <adelva@google.com>
    Cc: Amit Pundir <amit.pundir@linaro.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: freedreno@lists.freedesktop.org
    Cc: clang-built-linux@googlegroups.com
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c693518f884ce9de75194e92da164305db60adc
Author: Brian Masney <masneyb@onstation.org>
Date:   Sat Jan 18 15:41:20 2020 -0500

    drm/msm/mdp5: rate limit pp done timeout warnings
    
    [ Upstream commit ef8c9809acb0805c991bba8bdd4749fc46d44a98 ]
    
    Add rate limiting of the 'pp done time out' warnings since these
    warnings can quickly fill the dmesg buffer.
    
    Signed-off-by: Brian Masney <masneyb@onstation.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcfc1ec7bb6dccedcc5b017284ff0b21f895a35f
Author: Sergey Organov <sorganov@gmail.com>
Date:   Wed Jan 29 14:21:46 2020 +0300

    usb: gadget: serial: fix Tx stall after buffer overflow
    
    [ Upstream commit e4bfded56cf39b8d02733c1e6ef546b97961e18a ]
    
    Symptom: application opens /dev/ttyGS0 and starts sending (writing) to
    it while either USB cable is not connected, or nobody listens on the
    other side of the cable. If driver circular buffer overflows before
    connection is established, no data will be written to the USB layer
    until/unless /dev/ttyGS0 is closed and re-opened again by the
    application (the latter besides having no means of being notified about
    the event of establishing of the connection.)
    
    Fix: on open and/or connect, kick Tx to flush circular buffer data to
    USB layer.
    
    Signed-off-by: Sergey Organov <sorganov@gmail.com>
    Reviewed-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec23941e27f94b6e0f641181f0c42baafc3cf2ac
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Jan 16 15:29:01 2020 +0200

    usb: gadget: ffs: ffs_aio_cancel(): Save/restore IRQ flags
    
    [ Upstream commit 43d565727a3a6fd24e37c7c2116475106af71806 ]
    
    ffs_aio_cancel() can be called from both interrupt and thread context. Make
    sure that the current IRQ state is saved and restored by using
    spin_{un,}lock_irq{save,restore}().
    
    Otherwise undefined behavior might occur.
    
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ecb93d7e696e34183f74a7e4b01811691f187f2
Author: Jack Pham <jackp@codeaurora.org>
Date:   Thu Jan 30 19:10:36 2020 -0800

    usb: gadget: composite: Support more than 500mA MaxPower
    
    [ Upstream commit a2035411fa1d1206cea7d5dfe833e78481844a76 ]
    
    USB 3.x SuperSpeed peripherals can draw up to 900mA of VBUS power
    when in configured state. However, if a configuration wanting to
    take advantage of this is added with MaxPower greater than 500
    (currently possible if using a ConfigFS gadget) the composite
    driver fails to accommodate this for a couple reasons:
    
     - usb_gadget_vbus_draw() when called from set_config() and
       composite_resume() will be passed the MaxPower value without
       regard for the current connection speed, resulting in a
       violation for USB 2.0 since the max is 500mA.
    
     - the bMaxPower of the configuration descriptor would be
       incorrectly encoded, again if the connection speed is only
       at USB 2.0 or below, likely wrapping around U8_MAX since
       the 2mA multiplier corresponds to a maximum of 510mA.
    
    Fix these by adding checks against the current gadget->speed
    when the c->MaxPower value is used (set_config() and
    composite_resume()) and appropriately limit based on whether
    it is currently at a low-/full-/high- or super-speed connection.
    
    Because 900 is not divisible by 8, with the round-up division
    currently used in encode_bMaxPower() a MaxPower of 900mA will
    result in an encoded value of 0x71. When a host stack (including
    Linux and Windows) enumerates this on a single port root hub, it
    reads this value back and decodes (multiplies by 8) to get 904mA
    which is strictly greater than 900mA that is typically budgeted
    for that port, causing it to reject the configuration. Instead,
    we should be using the round-down behavior of normal integral
    division so that 900 / 8 -> 0x70 or 896mA to stay within range.
    And we might as well change it for the high/full/low case as well
    for consistency.
    
    N.B. USB 3.2 Gen N x 2 allows for up to 1500mA but there doesn't
    seem to be any any peripheral controller supported by Linux that
    does two lane operation, so for now keeping the clamp at 900
    should be fine.
    
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdbebb6963dccf7cf321f35384751258fdc2e59c
Author: Jiri Benc <jbenc@redhat.com>
Date:   Thu Feb 6 09:40:52 2020 +0100

    selftests: fix too long argument
    
    [ Upstream commit c363eb48ada5cf732b3f489fab799fc881097842 ]
    
    With some shells, the command construed for install of bpf selftests becomes
    too large due to long list of files:
    
    make[1]: execvp: /bin/sh: Argument list too long
    make[1]: *** [../lib.mk:73: install] Error 127
    
    Currently, each of the file lists is replicated three times in the command:
    in the shell 'if' condition, in the 'echo' and in the 'rsync'. Reduce that
    by one instance by using make conditionals and separate the echo and rsync
    into two shell commands. (One would be inclined to just remove the '@' at
    the beginning of the rsync command and let 'make' echo it by itself;
    unfortunately, it appears that the '@' in the front of mkdir silences output
    also for the following commands.)
    
    Also, separate handling of each of the lists to its own shell command.
    
    The semantics of the makefile is unchanged before and after the patch. The
    ability of individual test directories to override INSTALL_RULE is retained.
    
    Reported-by: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
    Tested-by: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce69cc4e350bd90d8bbf1c0b3d111407654e0b24
Author: Daniel Golle <daniel@makrotopia.org>
Date:   Fri Feb 7 11:53:35 2020 +0200

    serial: ar933x_uart: set UART_CS_{RX,TX}_READY_ORIDE
    
    [ Upstream commit 87c5cbf71ecbb9e289d60a2df22eb686c70bf196 ]
    
    On AR934x this UART is usually not initialized by the bootloader
    as it is only used as a secondary serial port while the primary
    UART is a newly introduced NS16550-compatible.
    In order to make use of the ar933x-uart on AR934x without RTS/CTS
    hardware flow control, one needs to set the
    UART_CS_{RX,TX}_READY_ORIDE bits as other than on AR933x where this
    UART is used as primary/console, the bootloader on AR934x typically
    doesn't set those bits.
    Setting them explicitely on AR933x should not do any harm, so just
    set them unconditionally.
    
    Tested-by: Chuanhong Guo <gch981213@gmail.com>
    Signed-off-by: Daniel Golle <daniel@makrotopia.org>
    Link: https://lore.kernel.org/r/20200207095335.GA179836@makrotopia.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8ef7b57e9754915f102d4f756fad4cf455ef9a5
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Thu Feb 6 22:02:21 2020 +0200

    ALSA: hda: do not override bus codec_mask in link_get()
    
    [ Upstream commit 43bcb1c0507858cdc95e425017dcc33f8105df39 ]
    
    snd_hdac_ext_bus_link_get() does not work correctly in case
    there are multiple codecs on the bus. It unconditionally
    resets the bus->codec_mask value. As per documentation in
    hdaudio.h and existing use in client code, this field should
    be used to store bit flag of detected codecs on the bus.
    
    By overwriting value of the codec_mask, information on all
    detected codecs is lost. No current user of hdac is impacted,
    but use of bus->codec_mask is planned in future patches
    for SOF.
    
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20200206200223.7715-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38d3707340b9c2158f965124c90228faa288ae5d
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Jan 7 23:42:24 2020 +0900

    kprobes: Fix optimize_kprobe()/unoptimize_kprobe() cancellation logic
    
    [ Upstream commit e4add247789e4ba5e08ad8256183ce2e211877d4 ]
    
    optimize_kprobe() and unoptimize_kprobe() cancels if a given kprobe
    is on the optimizing_list or unoptimizing_list already. However, since
    the following commit:
    
      f66c0447cca1 ("kprobes: Set unoptimized flag after unoptimizing code")
    
    modified the update timing of the KPROBE_FLAG_OPTIMIZED, it doesn't
    work as expected anymore.
    
    The optimized_kprobe could be in the following states:
    
    - [optimizing]: Before inserting jump instruction
      op.kp->flags has KPROBE_FLAG_OPTIMIZED and
      op->list is not empty.
    
    - [optimized]: jump inserted
      op.kp->flags has KPROBE_FLAG_OPTIMIZED and
      op->list is empty.
    
    - [unoptimizing]: Before removing jump instruction (including unused
      optprobe)
      op.kp->flags has KPROBE_FLAG_OPTIMIZED and
      op->list is not empty.
    
    - [unoptimized]: jump removed
      op.kp->flags doesn't have KPROBE_FLAG_OPTIMIZED and
      op->list is empty.
    
    Current code mis-expects [unoptimizing] state doesn't have
    KPROBE_FLAG_OPTIMIZED, and that can cause incorrect results.
    
    To fix this, introduce optprobe_queued_unopt() to distinguish [optimizing]
    and [unoptimizing] states and fixes the logic in optimize_kprobe() and
    unoptimize_kprobe().
    
    [ mingo: Cleaned up the changelog and the code a bit. ]
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bristot@redhat.com
    Fixes: f66c0447cca1 ("kprobes: Set unoptimized flag after unoptimizing code")
    Link: https://lkml.kernel.org/r/157840814418.7181.13478003006386303481.stgit@devnote2
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e46302d4a9c60294d07b51f32010d03fc50fd7fc
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Feb 17 13:43:18 2020 -0700

    RDMA/core: Fix use of logical OR in get_new_pps
    
    [ Upstream commit 4ca501d6aaf21de31541deac35128bbea8427aa6 ]
    
    Clang warns:
    
    ../drivers/infiniband/core/security.c:351:41: warning: converting the
    enum constant to a boolean [-Wint-in-bool-context]
            if (!(qp_attr_mask & (IB_QP_PKEY_INDEX || IB_QP_PORT)) && qp_pps) {
                                                   ^
    1 warning generated.
    
    A bitwise OR should have been used instead.
    
    Fixes: 1dd017882e01 ("RDMA/core: Fix protection fault in get_pkey_idx_qp_list")
    Link: https://lore.kernel.org/r/20200217204318.13609-1-natechancellor@gmail.com
    Link: https://github.com/ClangBuiltLinux/linux/issues/889
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54ad50cd872914935a3ff1385e790653ff137db5
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Feb 27 14:57:28 2020 +0200

    RDMA/core: Fix pkey and port assignment in get_new_pps
    
    [ Upstream commit 801b67f3eaafd3f2ec8b65d93142d4ffedba85df ]
    
    When port is part of the modify mask, then we should take it from the
    qp_attr and not from the old pps. Same for PKEY. Otherwise there are
    panics in some configurations:
    
      RIP: 0010:get_pkey_idx_qp_list+0x50/0x80 [ib_core]
      Code: c7 18 e8 13 04 30 ef 0f b6 43 06 48 69 c0 b8 00 00 00 48 03 85 a0 04 00 00 48 8b 50 20 48 8d 48 20 48 39 ca 74 1a 0f b7 73 04 <66> 39 72 10 75 08 eb 10 66 39 72 10 74 0a 48 8b 12 48 39 ca 75 f2
      RSP: 0018:ffffafb3480932f0 EFLAGS: 00010203
      RAX: ffff98059ababa10 RBX: ffff980d926e8cc0 RCX: ffff98059ababa30
      RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff98059ababa28
      RBP: ffff98059b940000 R08: 00000000000310c0 R09: ffff97fe47c07480
      R10: 0000000000000036 R11: 0000000000000200 R12: 0000000000000071
      R13: ffff98059b940000 R14: ffff980d87f948a0 R15: 0000000000000000
      FS:  00007f88deb31740(0000) GS:ffff98059f600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000010 CR3: 0000000853e26001 CR4: 00000000001606e0
      Call Trace:
       port_pkey_list_insert+0x3d/0x1b0 [ib_core]
       ? kmem_cache_alloc_trace+0x215/0x220
       ib_security_modify_qp+0x226/0x3a0 [ib_core]
       _ib_modify_qp+0xcf/0x390 [ib_core]
       ipoib_init_qp+0x7f/0x200 [ib_ipoib]
       ? rvt_modify_port+0xd0/0xd0 [rdmavt]
       ? ib_find_pkey+0x99/0xf0 [ib_core]
       ipoib_ib_dev_open_default+0x1a/0x200 [ib_ipoib]
       ipoib_ib_dev_open+0x96/0x130 [ib_ipoib]
       ipoib_open+0x44/0x130 [ib_ipoib]
       __dev_open+0xd1/0x160
       __dev_change_flags+0x1ab/0x1f0
       dev_change_flags+0x23/0x60
       do_setlink+0x328/0xe30
       ? __nla_validate_parse+0x54/0x900
       __rtnl_newlink+0x54e/0x810
       ? __alloc_pages_nodemask+0x17d/0x320
       ? page_fault+0x30/0x50
       ? _cond_resched+0x15/0x30
       ? kmem_cache_alloc_trace+0x1c8/0x220
       rtnl_newlink+0x43/0x60
       rtnetlink_rcv_msg+0x28f/0x350
       ? kmem_cache_alloc+0x1fb/0x200
       ? _cond_resched+0x15/0x30
       ? __kmalloc_node_track_caller+0x24d/0x2d0
       ? rtnl_calcit.isra.31+0x120/0x120
       netlink_rcv_skb+0xcb/0x100
       netlink_unicast+0x1e0/0x340
       netlink_sendmsg+0x317/0x480
       ? __check_object_size+0x48/0x1d0
       sock_sendmsg+0x65/0x80
       ____sys_sendmsg+0x223/0x260
       ? copy_msghdr_from_user+0xdc/0x140
       ___sys_sendmsg+0x7c/0xc0
       ? skb_dequeue+0x57/0x70
       ? __inode_wait_for_writeback+0x75/0xe0
       ? fsnotify_grab_connector+0x45/0x80
       ? __dentry_kill+0x12c/0x180
       __sys_sendmsg+0x58/0xa0
       do_syscall_64+0x5b/0x200
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f88de467f10
    
    Link: https://lore.kernel.org/r/20200227125728.100551-1-leon@kernel.org
    Cc: <stable@vger.kernel.org>
    Fixes: 1dd017882e01 ("RDMA/core: Fix protection fault in get_pkey_idx_qp_list")
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Tested-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d699a3dfabb22fe499bf4a5649a08f71b46858e
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 24 15:56:32 2020 -0800

    net: dsa: bcm_sf2: Forcibly configure IMP port for 1Gb/sec
    
    [ Upstream commit 98c5f7d44fef309e692c24c6d71131ee0f0871fb ]
    
    We are still experiencing some packet loss with the existing advanced
    congestion buffering (ACB) settings with the IMP port configured for
    2Gb/sec, so revert to conservative link speeds that do not produce
    packet loss until this is resolved.
    
    Fixes: 8f1880cbe8d0 ("net: dsa: bcm_sf2: Configure IMP port for 2Gb/sec")
    Fixes: de34d7084edd ("net: dsa: bcm_sf2: Only 7278 supports 2Gb/sec IMP port")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46f3a5c9dd118e5ce3e54709ebcbe916a12bcadb
Author: Hui Wang <hui.wang@canonical.com>
Date:   Wed Feb 19 13:23:06 2020 +0800

    ALSA: hda/realtek - Fix a regression for mute led on Lenovo Carbon X1
    
    [ Upstream commit c37c0ab029569a75fd180edb03d411e7a28a936f ]
    
    Need to chain the THINKPAD_ACPI, otherwise the mute led will not
    work.
    
    Fixes: d2cd795c4ece ("ALSA: hda - fixup for the bass speaker on Lenovo Carbon X1 7th gen")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20200219052306.24935-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17f86cfbe738dee566167642c988ba8dc2c63c03
Author: Yazen Ghannam <yazen.ghannam@amd.com>
Date:   Thu Mar 5 17:30:07 2020 +0100

    EDAC/amd64: Set grain per DIMM
    
    [ Upstream commit 466503d6b1b33be46ab87c6090f0ade6c6011cbc ]
    
    The following commit introduced a warning on error reports without a
    non-zero grain value.
    
      3724ace582d9 ("EDAC/mc: Fix grain_bits calculation")
    
    The amd64_edac_mod module does not provide a value, so the warning will
    be given on the first reported memory error.
    
    Set the grain per DIMM to cacheline size (64 bytes). This is the current
    recommendation.
    
    Fixes: 3724ace582d9 ("EDAC/mc: Fix grain_bits calculation")
    Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: "linux-edac@vger.kernel.org" <linux-edac@vger.kernel.org>
    Cc: James Morse <james.morse@arm.com>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Robert Richter <rrichter@marvell.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Link: https://lkml.kernel.org/r/20191022203448.13962-7-Yazen.Ghannam@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>
