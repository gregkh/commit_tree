commit 09df347cfd189774130f8ae8267324b97aaf868e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 2 19:48:25 2021 +0100

    Linux 5.10.77
    
    Link: https://lore.kernel.org/r/20211101082511.254155853@linuxfoundation.org
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbb91dadb512e8602c68ab6d5a049420aaebc55e
Author: Song Liu <songliubraving@fb.com>
Date:   Sun Oct 3 22:32:38 2021 -0700

    perf script: Check session->header.env.arch before using it
    
    commit 29c77550eef31b0d72a45b49eeab03b8963264e8 upstream.
    
    When perf.data is not written cleanly, we would like to process existing
    data as much as possible (please see f_header.data.size == 0 condition
    in perf_session__read_header). However, perf.data with partial data may
    crash perf. Specifically, we see crash in 'perf script' for NULL
    session->header.env.arch.
    
    Fix this by checking session->header.env.arch before using it to determine
    native_arch. Also split the if condition so it is easier to read.
    
    Committer notes:
    
    If it is a pipe, we already assume is a native arch, so no need to check
    session->header.env.arch.
    
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: kernel-team@fb.com
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20211004053238.514936-1-songliubraving@fb.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f416815c505ad1e0c2d0f5c7300e18ba16ad281
Author: Alexandre Ghiti <alexandre.ghiti@canonical.com>
Date:   Fri Oct 29 06:59:27 2021 +0200

    riscv: Fix asan-stack clang build
    
    commit 54c5639d8f507ebefa814f574cb6f763033a72a5 upstream.
    
    Nathan reported that because KASAN_SHADOW_OFFSET was not defined in
    Kconfig, it prevents asan-stack from getting disabled with clang even
    when CONFIG_KASAN_STACK is disabled: fix this by defining the
    corresponding config.
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Alexandre Ghiti <alexandre.ghiti@canonical.com>
    Fixes: 8ad8b72721d0 ("riscv: Add KASAN support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a4cf25d8329477b42b96c0c8c7a68036b4208b5
Author: Chen Lu <181250012@smail.nju.edu.cn>
Date:   Mon Oct 18 13:22:38 2021 +0800

    riscv: fix misalgned trap vector base address
    
    commit 64a19591a2938b170aa736443d5d3bf4c51e1388 upstream.
    
    The trap vector marked by label .Lsecondary_park must align on a
    4-byte boundary, as the {m,s}tvec is defined to require 4-byte
    alignment.
    
    Signed-off-by: Chen Lu <181250012@smail.nju.edu.cn>
    Reviewed-by: Anup Patel <anup.patel@wdc.com>
    Fixes: e011995e826f ("RISC-V: Move relocate and few other functions out of __init")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acb8832f6a1ca53d0134246c889f6eb4010de6eb
Author: Chanho Park <chanho61.park@samsung.com>
Date:   Mon Oct 18 15:28:41 2021 +0900

    scsi: ufs: ufs-exynos: Correct timeout value setting registers
    
    [ Upstream commit 282da7cef078a87b6d5e8ceba8b17e428cf0e37c ]
    
    PA_PWRMODEUSERDATA0 -> DL_FC0PROTTIMEOUTVAL
    PA_PWRMODEUSERDATA1 -> DL_TC0REPLAYTIMEOUTVAL
    PA_PWRMODEUSERDATA2 -> DL_AFC0REQTIMEOUTVAL
    
    Link: https://lore.kernel.org/r/20211018062841.18226-1-chanho61.park@samsung.com
    Fixes: a967ddb22d94 ("scsi: ufs: ufs-exynos: Apply vendor-specific values for three timeouts")
    Cc: Alim Akhtar <alim.akhtar@samsung.com>
    Cc: Kiwoong Kim <kwmad.kim@samsung.com>
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Chanho Park <chanho61.park@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ecddaca7942a54316faf9de8214d12edb49c448
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Tue Oct 19 19:54:00 2021 +0200

    KVM: s390: preserve deliverable_mask in __airqs_kick_single_vcpu
    
    [ Upstream commit 0e9ff65f455dfd0a8aea5e7843678ab6fe097e21 ]
    
    Changing the deliverable mask in __airqs_kick_single_vcpu() is a bug. If
    one idle vcpu can't take the interrupts we want to deliver, we should
    look for another vcpu that can, instead of saying that we don't want
    to deliver these interrupts by clearing the bits from the
    deliverable_mask.
    
    Fixes: 9f30f6216378 ("KVM: s390: add gib_alert_irq_handler()")
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Michael Mueller <mimu@linux.ibm.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Link: https://lore.kernel.org/r/20211019175401.3757927-3-pasic@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e11a7355fb984dacd09f33ec7954938afa8e6de5
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Tue Oct 19 19:53:59 2021 +0200

    KVM: s390: clear kicked_mask before sleeping again
    
    [ Upstream commit 9b57e9d5010bbed7c0d9d445085840f7025e6f9a ]
    
    The idea behind kicked mask is that we should not re-kick a vcpu that
    is already in the "kick" process, i.e. that was kicked and is
    is about to be dispatched if certain conditions are met.
    
    The problem with the current implementation is, that it assumes the
    kicked vcpu is going to enter SIE shortly. But under certain
    circumstances, the vcpu we just kicked will be deemed non-runnable and
    will remain in wait state. This can happen, if the interrupt(s) this
    vcpu got kicked to deal with got already cleared (because the interrupts
    got delivered to another vcpu). In this case kvm_arch_vcpu_runnable()
    would return false, and the vcpu would remain in kvm_vcpu_block(),
    but this time with its kicked_mask bit set. So next time around we
    wouldn't kick the vcpu form __airqs_kick_single_vcpu(), but would assume
    that we just kicked it.
    
    Let us make sure the kicked_mask is cleared before we give up on
    re-dispatching the vcpu.
    
    Fixes: 9f30f6216378 ("KVM: s390: add gib_alert_irq_handler()")
    Reported-by: Matthew Rosato <mjrosato@linux.ibm.com>
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Michael Mueller <mimu@linux.ibm.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Link: https://lore.kernel.org/r/20211019175401.3757927-2-pasic@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 727e5deca8027b0dd25eb3b1852134bf965767c3
Author: Alexey Denisov <rtgbnm@gmail.com>
Date:   Thu Jan 28 09:48:59 2021 +0500

    lan743x: fix endianness when accessing descriptors
    
    [ Upstream commit 462512824f902a24de794290dd622e664587da1d ]
    
    TX/RX descriptor ring fields are always little-endian, but conversion
    wasn't performed for big-endian CPUs, so the driver failed to work.
    
    This patch makes the driver work on big-endian CPUs. It was tested and
    confirmed to work on NXP P1010 processor (PowerPC).
    
    Signed-off-by: Alexey Denisov <rtgbnm@gmail.com>
    Link: https://lore.kernel.org/r/20210128044859.280219-1-rtgbnm@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7112b8eeb14b3db21bc96abc79ca7525d77e129
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:47 2021 -0400

    sctp: add vtag check in sctp_sf_ootb
    
    [ Upstream commit 9d02831e517aa36ee6bdb453a0eb47bd49923fe3 ]
    
    sctp_sf_ootb() is called when processing DATA chunk in closed state,
    and many other places are also using it.
    
    The vtag in the chunk's sctphdr should be verified, otherwise, as
    later in chunk length check, it may send abort with the existent
    asoc's vtag, which can be exploited by one to cook a malicious
    chunk to terminate a SCTP asoc.
    
    When fails to verify the vtag from the chunk, this patch sets asoc
    to NULL, so that the abort will be made with the vtag from the
    received chunk later.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2442f721972ea7c317fbfd55c902616b3151ad5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:46 2021 -0400

    sctp: add vtag check in sctp_sf_do_8_5_1_E_sa
    
    [ Upstream commit ef16b1734f0a176277b7bb9c71a6d977a6ef3998 ]
    
    sctp_sf_do_8_5_1_E_sa() is called when processing SHUTDOWN_ACK chunk
    in cookie_wait and cookie_echoed state.
    
    The vtag in the chunk's sctphdr should be verified, otherwise, as
    later in chunk length check, it may send abort with the existent
    asoc's vtag, which can be exploited by one to cook a malicious
    chunk to terminate a SCTP asoc.
    
    Note that when fails to verify the vtag from SHUTDOWN-ACK chunk,
    SHUTDOWN COMPLETE message will still be sent back to peer, but
    with the vtag from SHUTDOWN-ACK chunk, as said in 5) of
    rfc4960#section-8.4.
    
    While at it, also remove the unnecessary chunk length check from
    sctp_sf_shut_8_4_5(), as it's already done in both places where
    it calls sctp_sf_shut_8_4_5().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14c1e02b11c2233343573aff90766ef8472f27e7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:45 2021 -0400

    sctp: add vtag check in sctp_sf_violation
    
    [ Upstream commit aa0f697e45286a6b5f0ceca9418acf54b9099d99 ]
    
    sctp_sf_violation() is called when processing HEARTBEAT_ACK chunk
    in cookie_wait state, and some other places are also using it.
    
    The vtag in the chunk's sctphdr should be verified, otherwise, as
    later in chunk length check, it may send abort with the existent
    asoc's vtag, which can be exploited by one to cook a malicious
    chunk to terminate a SCTP asoc.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dad2486414b5c81697aa5a24383fbb65fad13cae
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:44 2021 -0400

    sctp: fix the processing for COOKIE_ECHO chunk
    
    [ Upstream commit a64b341b8695e1c744dd972b39868371b4f68f83 ]
    
    1. In closed state: in sctp_sf_do_5_1D_ce():
    
      When asoc is NULL, making packet for abort will use chunk's vtag
      in sctp_ootb_pkt_new(). But when asoc exists, vtag from the chunk
      should be verified before using peer.i.init_tag to make packet
      for abort in sctp_ootb_pkt_new(), and just discard it if vtag is
      not correct.
    
    2. In the other states: in sctp_sf_do_5_2_4_dupcook():
    
      asoc always exists, but duplicate cookie_echo's vtag will be
      handled by sctp_tietags_compare() and then take actions, so before
      that we only verify the vtag for the abort sent for invalid chunk
      length.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c50693d25e4ab6873b32bc3cea23b382a94d05f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:43 2021 -0400

    sctp: fix the processing for INIT_ACK chunk
    
    [ Upstream commit 438b95a7c98f77d51cbf4db021f41b602d750a3f ]
    
    Currently INIT_ACK chunk in non-cookie_echoed state is processed in
    sctp_sf_discard_chunk() to send an abort with the existent asoc's
    vtag if the chunk length is not valid. But the vtag in the chunk's
    sctphdr is not verified, which may be exploited by one to cook a
    malicious chunk to terminal a SCTP asoc.
    
    sctp_sf_discard_chunk() also is called in many other places to send
    an abort, and most of those have this problem. This patch is to fix
    it by sending abort with the existent asoc's vtag only if the vtag
    from the chunk's sctphdr is verified in sctp_sf_discard_chunk().
    
    Note on sctp_sf_do_9_1_abort() and sctp_sf_shutdown_pending_abort(),
    the chunk length has been verified before sctp_sf_discard_chunk(),
    so replace it with sctp_sf_discard(). On sctp_sf_do_asconf_ack() and
    sctp_sf_do_asconf(), move the sctp_chunk_length_valid check ahead of
    sctp_sf_discard_chunk(), then replace it with sctp_sf_discard().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad111d4435d85fd3eeb2c09692030d89f8862401
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:41 2021 -0400

    sctp: use init_tag from inithdr for ABORT chunk
    
    [ Upstream commit 4f7019c7eb33967eb87766e0e4602b5576873680 ]
    
    Currently Linux SCTP uses the verification tag of the existing SCTP
    asoc when failing to process and sending the packet with the ABORT
    chunk. This will result in the peer accepting the ABORT chunk and
    removing the SCTP asoc. One could exploit this to terminate a SCTP
    asoc.
    
    This patch is to fix it by always using the initiate tag of the
    received INIT chunk for the ABORT chunk to be sent.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4509000a2515d26faeac5d44bb00d6ccf325ebd2
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Oct 24 21:48:05 2021 +0200

    phy: phy_ethtool_ksettings_set: Lock the PHY while changing settings
    
    commit af1a02aa23c37045e6adfcf074cf7dbac167a403 upstream.
    
    There is a race condition where the PHY state machine can change
    members of the phydev structure at the same time userspace requests a
    change via ethtool. To prevent this, have phy_ethtool_ksettings_set
    take the PHY lock.
    
    Fixes: 2d55173e71b0 ("phy: add generic function to support ksetting support")
    Reported-by: Walter Stoll <Walter.Stoll@duagon.com>
    Suggested-by: Walter Stoll <Walter.Stoll@duagon.com>
    Tested-by: Walter Stoll <Walter.Stoll@duagon.com>
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b88bb9377ee48bf29c2c184cdabc7036dc4ddd6
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Oct 24 21:48:04 2021 +0200

    phy: phy_start_aneg: Add an unlocked version
    
    commit 707293a56f95f8e7e0cfae008010c7933fb68973 upstream.
    
    Split phy_start_aneg into a wrapper which takes the PHY lock, and a
    helper doing the real work. This will be needed when
    phy_ethtook_ksettings_set takes the lock.
    
    Fixes: 2d55173e71b0 ("phy: add generic function to support ksetting support")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81780b624d1cdf6920cd28c6c404d58e56972cd8
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Oct 24 21:48:03 2021 +0200

    phy: phy_ethtool_ksettings_set: Move after phy_start_aneg
    
    commit 64cd92d5e8180c2ded3fdea76862de6f596ae2c9 upstream.
    
    This allows it to make use of a helper which assume the PHY is already
    locked.
    
    Fixes: 2d55173e71b0 ("phy: add generic function to support ksetting support")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258c5fea44cf09d502b7ce641abe8c01e6821655
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Oct 24 21:48:02 2021 +0200

    phy: phy_ethtool_ksettings_get: Lock the phy for consistency
    
    commit c10a485c3de5ccbf1fff65a382cebcb2730c6b06 upstream.
    
    The PHY structure should be locked while copying information out if
    it, otherwise there is no guarantee of self consistency. Without the
    lock the PHY state machine could be updating the structure.
    
    Fixes: 2d55173e71b0 ("phy: add generic function to support ksetting support")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58722323d4bc7e7fb9e1e4397551f7a02f2f2757
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Wed Oct 27 17:59:21 2021 -0400

    net/tls: Fix flipped sign in async_wait.err assignment
    
    commit 1d9d6fd21ad4a28b16ed9ee5432ae738b9dc58aa upstream.
    
    sk->sk_err contains a positive number, yet async_wait.err wants the
    opposite.  Fix the missed sign flip, which Jakub caught by inspection.
    
    Fixes: a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44e8c93e1e4960566b34beb85b73f5ab4a6b6e76
Author: Trevor Woerner <twoerner@gmail.com>
Date:   Sun Oct 24 13:50:02 2021 -0400

    net: nxp: lpc_eth.c: avoid hang when bringing interface down
    
    commit ace19b992436a257d9a793672e57abc28fe83e2e upstream.
    
    A hard hang is observed whenever the ethernet interface is brought
    down. If the PHY is stopped before the LPC core block is reset,
    the SoC will hang. Comparing lpc_eth_close() and lpc_eth_open() I
    re-arranged the ordering of the functions calls in lpc_eth_close() to
    reset the hardware before stopping the PHY.
    Fixes: b7370112f519 ("lpc32xx: Added ethernet driver")
    Signed-off-by: Trevor Woerner <twoerner@gmail.com>
    Acked-by: Vladimir Zapolskiy <vz@mleia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2af2092c9bbb33c0131a8aca5b8f6db7c223d08
Author: Yuiko Oshino <yuiko.oshino@microchip.com>
Date:   Fri Oct 22 11:53:43 2021 -0400

    net: ethernet: microchip: lan743x: Fix dma allocation failure by using dma_set_mask_and_coherent
    
    commit 95a359c9553342d36d408d35331ff0bfce75272f upstream.
    
    The dma failure was reported in the raspberry pi github (issue #4117).
    https://github.com/raspberrypi/linux/issues/4117
    The use of dma_set_mask_and_coherent fixes the issue.
    Tested on 32/64-bit raspberry pi CM4 and 64-bit ubuntu x86 PC with EVB-LAN7430.
    
    Fixes: 23f0703c125b ("lan743x: Add main source files for new lan743x driver")
    Signed-off-by: Yuiko Oshino <yuiko.oshino@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfa6fbdb4e39b8483fd7ec70c4c82a5105348193
Author: Yuiko Oshino <yuiko.oshino@microchip.com>
Date:   Fri Oct 22 11:13:53 2021 -0400

    net: ethernet: microchip: lan743x: Fix driver crash when lan743x_pm_resume fails
    
    commit d6423d2ec39cce2bfca418c81ef51792891576bc upstream.
    
    The driver needs to clean up and return when the initialization fails on resume.
    
    Fixes: 23f0703c125b ("lan743x: Add main source files for new lan743x driver")
    Signed-off-by: Yuiko Oshino <yuiko.oshino@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e81bed557fe7dedff78ac1a7c098f4375b4981e2
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Sun Oct 24 09:40:14 2021 +0300

    mlxsw: pci: Recycle received packet upon allocation failure
    
    commit 759635760a804b0d8ad0cc677b650f1544cae22f upstream.
    
    When the driver fails to allocate a new Rx buffer, it passes an empty Rx
    descriptor (contains zero address and size) to the device and marks it
    as invalid by setting the skb pointer in the descriptor's metadata to
    NULL.
    
    After processing enough Rx descriptors, the driver will try to process
    the invalid descriptor, but will return immediately seeing that the skb
    pointer is NULL. Since the driver no longer passes new Rx descriptors to
    the device, the Rx queue will eventually become full and the device will
    start to drop packets.
    
    Fix this by recycling the received packet if allocation of the new
    packet failed. This means that allocation is no longer performed at the
    end of the Rx routine, but at the start, before tearing down the DMA
    mapping of the received packet.
    
    Remove the comment about the descriptor being zeroed as it is no longer
    correct. This is OK because we either use the descriptor as-is (when
    recycling) or overwrite its address and size fields with that of the
    newly allocated Rx buffer.
    
    The issue was discovered when a process ("perf") consumed too much
    memory and put the system under memory pressure. It can be reproduced by
    injecting slab allocation failures [1]. After the fix, the Rx queue no
    longer comes to a halt.
    
    [1]
     # echo 10 > /sys/kernel/debug/failslab/times
     # echo 1000 > /sys/kernel/debug/failslab/interval
     # echo 100 > /sys/kernel/debug/failslab/probability
    
     FAULT_INJECTION: forcing a failure.
     name failslab, interval 1000, probability 100, space 0, times 8
     [...]
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x34/0x44
      should_fail.cold+0x32/0x37
      should_failslab+0x5/0x10
      kmem_cache_alloc_node+0x23/0x190
      __alloc_skb+0x1f9/0x280
      __netdev_alloc_skb+0x3a/0x150
      mlxsw_pci_rdq_skb_alloc+0x24/0x90
      mlxsw_pci_cq_tasklet+0x3dc/0x1200
      tasklet_action_common.constprop.0+0x9f/0x100
      __do_softirq+0xb5/0x252
      irq_exit_rcu+0x7a/0xa0
      common_interrupt+0x83/0xa0
      </IRQ>
      asm_common_interrupt+0x1e/0x40
     RIP: 0010:cpuidle_enter_state+0xc8/0x340
     [...]
     mlxsw_spectrum2 0000:06:00.0: Failed to alloc skb for RDQ
    
    Fixes: eda6500a987a ("mlxsw: Add PCI bus implementation")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/20211024064014.1060919-1-idosch@idosch.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be98be1a17e9502321889b2142b5cba4aec7e087
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Oct 20 12:11:16 2021 -0700

    nios2: Make NIOS2_DTB_SOURCE_BOOL depend on !COMPILE_TEST
    
    commit 4a089e95b4d6bb625044d47aed0c442a8f7bd093 upstream.
    
    nios2:allmodconfig builds fail with
    
    make[1]: *** No rule to make target 'arch/nios2/boot/dts/""',
            needed by 'arch/nios2/boot/dts/built-in.a'.  Stop.
    make: [Makefile:1868: arch/nios2/boot/dts] Error 2 (ignored)
    
    This is seen with compile tests since those enable NIOS2_DTB_SOURCE_BOOL,
    which in turn enables NIOS2_DTB_SOURCE. This causes the build error
    because the default value for NIOS2_DTB_SOURCE is an empty string.
    Disable NIOS2_DTB_SOURCE_BOOL for compile tests to avoid the error.
    
    Fixes: 2fc8483fdcde ("nios2: Build infrastructure")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aead02927af3aee16b2644315e47b3356719656b
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Thu Oct 14 14:33:42 2021 +0200

    gpio: xgs-iproc: fix parsing of ngpios property
    
    commit 85fe6415c146d5d42ce300c12f1ecf4d4af47d40 upstream.
    
    of_property_read_u32 returns 0 on success, not true, so we need to
    invert the check to actually take over the provided ngpio value.
    
    Fixes: 6a41b6c5fc20 ("gpio: Add xgs-iproc driver")
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Reviewed-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 863a423ee07b0d602335b283457c9337ad5a60c4
Author: Mark Zhang <markzhang@nvidia.com>
Date:   Sun Oct 24 09:08:20 2021 +0300

    RDMA/sa_query: Use strscpy_pad instead of memcpy to copy a string
    
    commit 64733956ebba7cc629856f4a6ee35a52bc9c023f upstream.
    
    When copying the device name, the length of the data memcpy copied exceeds
    the length of the source buffer, which cause the KASAN issue below.  Use
    strscpy_pad() instead.
    
     BUG: KASAN: slab-out-of-bounds in ib_nl_set_path_rec_attrs+0x136/0x320 [ib_core]
     Read of size 64 at addr ffff88811a10f5e0 by task rping/140263
     CPU: 3 PID: 140263 Comm: rping Not tainted 5.15.0-rc1+ #1
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
     Call Trace:
      dump_stack_lvl+0x57/0x7d
      print_address_description.constprop.0+0x1d/0xa0
      kasan_report+0xcb/0x110
      kasan_check_range+0x13d/0x180
      memcpy+0x20/0x60
      ib_nl_set_path_rec_attrs+0x136/0x320 [ib_core]
      ib_nl_make_request+0x1c6/0x380 [ib_core]
      send_mad+0x20a/0x220 [ib_core]
      ib_sa_path_rec_get+0x3e3/0x800 [ib_core]
      cma_query_ib_route+0x29b/0x390 [rdma_cm]
      rdma_resolve_route+0x308/0x3e0 [rdma_cm]
      ucma_resolve_route+0xe1/0x150 [rdma_ucm]
      ucma_write+0x17b/0x1f0 [rdma_ucm]
      vfs_write+0x142/0x4d0
      ksys_write+0x133/0x160
      do_syscall_64+0x43/0x90
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7f26499aa90f
     Code: 89 54 24 18 48 89 74 24 10 89 7c 24 08 e8 29 fd ff ff 48 8b 54 24 18 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 31 44 89 c7 48 89 44 24 08 e8 5c fd ff ff 48
     RSP: 002b:00007f26495f2dc0 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
     RAX: ffffffffffffffda RBX: 00000000000007d0 RCX: 00007f26499aa90f
     RDX: 0000000000000010 RSI: 00007f26495f2e00 RDI: 0000000000000003
     RBP: 00005632a8315440 R08: 0000000000000000 R09: 0000000000000001
     R10: 0000000000000000 R11: 0000000000000293 R12: 00007f26495f2e00
     R13: 00005632a83154e0 R14: 00005632a8315440 R15: 00005632a830a810
    
     Allocated by task 131419:
      kasan_save_stack+0x1b/0x40
      __kasan_kmalloc+0x7c/0x90
      proc_self_get_link+0x8b/0x100
      pick_link+0x4f1/0x5c0
      step_into+0x2eb/0x3d0
      walk_component+0xc8/0x2c0
      link_path_walk+0x3b8/0x580
      path_openat+0x101/0x230
      do_filp_open+0x12e/0x240
      do_sys_openat2+0x115/0x280
      __x64_sys_openat+0xce/0x140
      do_syscall_64+0x43/0x90
      entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fixes: 2ca546b92a02 ("IB/sa: Route SA pathrecord query through netlink")
    Link: https://lore.kernel.org/r/72ede0f6dab61f7f23df9ac7a70666e07ef314b0.1635055496.git.leonro@nvidia.com
    Signed-off-by: Mark Zhang <markzhang@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b7c5eed19d3009dd6cca36853b3a22d7eff9209
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Mon Oct 25 05:05:28 2021 -0400

    net: Prevent infinite while loop in skb_tx_hash()
    
    commit 0c57eeecc559ca6bc18b8c4e2808bc78dbe769b0 upstream.
    
    Drivers call netdev_set_num_tc() and then netdev_set_tc_queue()
    to set the queue count and offset for each TC.  So the queue count
    and offset for the TCs may be zero for a short period after dev->num_tc
    has been set.  If a TX packet is being transmitted at this time in the
    code path netdev_pick_tx() -> skb_tx_hash(), skb_tx_hash() may see
    nonzero dev->num_tc but zero qcount for the TC.  The while loop that
    keeps looping while hash >= qcount will not end.
    
    Fix it by checking the TC's qcount to be nonzero before using it.
    
    Fixes: eadec877ce9c ("net: Add support for subordinate traffic classes to netdev_pick_tx")
    Reviewed-by: Andy Gospodarek <gospo@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04121b10cdf0361c0fac761a9264659935878693
Author: Janusz Dziedzic <janusz.dziedzic@gmail.com>
Date:   Sun Oct 24 22:15:46 2021 +0200

    cfg80211: correct bridge/4addr mode check
    
    commit 689a0a9f505f7bffdefe6f17fddb41c8ab6344f6 upstream.
    
    Without the patch we fail:
    
    $ sudo brctl addbr br0
    $ sudo brctl addif br0 wlp1s0
    $ sudo iw wlp1s0 set 4addr on
    command failed: Device or resource busy (-16)
    
    Last command failed but iface was already in 4addr mode.
    
    Fixes: ad4bb6f8883a ("cfg80211: disallow bridging managed/adhoc interfaces")
    Signed-off-by: Janusz Dziedzic <janusz.dziedzic@gmail.com>
    Link: https://lore.kernel.org/r/20211024201546.614379-1-janusz.dziedzic@gmail.com
    [add fixes tag, fix indentation, edit commit log]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aed897e96b191b56109bac700bf3555113e75ea1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Oct 25 02:31:48 2021 -0400

    net-sysfs: initialize uid and gid before calling net_ns_get_ownership
    
    commit f7a1e76d0f608961cc2fc681f867a834f2746bce upstream.
    
    Currently in net_ns_get_ownership() it may not be able to set uid or gid
    if make_kuid or make_kgid returns an invalid value, and an uninit-value
    issue can be triggered by this.
    
    This patch is to fix it by initializing the uid and gid before calling
    net_ns_get_ownership(), as it does in kobject_get_ownership()
    
    Fixes: e6dee9f3893c ("net-sysfs: add netdev_change_owner()")
    Reported-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0a2cd38553c77928ef1646ed1518486b1e70ae8
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Oct 24 16:13:56 2021 +0300

    net: batman-adv: fix error handling
    
    commit 6f68cd634856f8ca93bafd623ba5357e0f648c68 upstream.
    
    Syzbot reported ODEBUG warning in batadv_nc_mesh_free(). The problem was
    in wrong error handling in batadv_mesh_init().
    
    Before this patch batadv_mesh_init() was calling batadv_mesh_free() in case
    of any batadv_*_init() calls failure. This approach may work well, when
    there is some kind of indicator, which can tell which parts of batadv are
    initialized; but there isn't any.
    
    All written above lead to cleaning up uninitialized fields. Even if we hide
    ODEBUG warning by initializing bat_priv->nc.work, syzbot was able to hit
    GPF in batadv_nc_purge_paths(), because hash pointer in still NULL. [1]
    
    To fix these bugs we can unwind batadv_*_init() calls one by one.
    It is good approach for 2 reasons: 1) It fixes bugs on error handling
    path 2) It improves the performance, since we won't call unneeded
    batadv_*_free() functions.
    
    So, this patch makes all batadv_*_init() clean up all allocated memory
    before returning with an error to no call correspoing batadv_*_free()
    and open-codes batadv_mesh_free() with proper order to avoid touching
    uninitialized fields.
    
    Link: https://lore.kernel.org/netdev/000000000000c87fbd05cef6bcb0@google.com/ [1]
    Reported-and-tested-by: syzbot+28b0702ada0bf7381f58@syzkaller.appspotmail.com
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Acked-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36e911a16b377bde0ad91a8c679069d0d310b1a6
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Oct 12 10:37:35 2021 +0800

    regmap: Fix possible double-free in regcache_rbtree_exit()
    
    commit 55e6d8037805b3400096d621091dfbf713f97e83 upstream.
    
    In regcache_rbtree_insert_to_block(), when 'present' realloc failed,
    the 'blk' which is supposed to assign to 'rbnode->block' will be freed,
    so 'rbnode->block' points a freed memory, in the error handling path of
    regcache_rbtree_init(), 'rbnode->block' will be freed again in
    regcache_rbtree_exit(), KASAN will report double-free as follows:
    
    BUG: KASAN: double-free or invalid-free in kfree+0xce/0x390
    Call Trace:
     slab_free_freelist_hook+0x10d/0x240
     kfree+0xce/0x390
     regcache_rbtree_exit+0x15d/0x1a0
     regcache_rbtree_init+0x224/0x2c0
     regcache_init+0x88d/0x1310
     __regmap_init+0x3151/0x4a80
     __devm_regmap_init+0x7d/0x100
     madera_spi_probe+0x10f/0x333 [madera_spi]
     spi_probe+0x183/0x210
     really_probe+0x285/0xc30
    
    To fix this, moving up the assignment of rbnode->block to immediately after
    the reallocation has succeeded so that the data structure stays valid even
    if the second reallocation fails.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 3f4ff561bc88b ("regmap: rbtree: Make cache_present bitmap per node")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20211012023735.1632786-1-yangyingliang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e51371bd687e7ff4a2f5f53d97d4388500fb27e1
Author: Jim Quinlan <jim2101024@gmail.com>
Date:   Tue Sep 14 15:11:21 2021 -0700

    reset: brcmstb-rescal: fix incorrect polarity of status bit
    
    commit f33eb7f29c16ba78db3221ee02346fd832274cdd upstream.
    
    The readl_poll_timeout() should complete when the status bit
    is a 1, not 0.
    
    Fixes: 4cf176e52397 ("reset: Add Broadcom STB RESCAL reset controller")
    Signed-off-by: Jim Quinlan <jim2101024@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20210914221122.62315-1-f.fainelli@gmail.com
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cf7d935d6ba3fdae254ad6585fe74464de270f5
Author: Clément Bœsch <u@pkh.me>
Date:   Sun Sep 5 02:20:27 2021 +0200

    arm64: dts: allwinner: h5: NanoPI Neo 2: Fix ethernet node
    
    commit 0764e365dacd0b8f75c1736f9236be280649bd18 upstream.
    
    RX and TX delay are provided by ethernet PHY. Reflect that in ethernet
    node.
    
    Fixes: 44a94c7ef989 ("arm64: dts: allwinner: H5: Restore EMAC changes")
    Signed-off-by: Clément Bœsch <u@pkh.me>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20210905002027.171984-1-u@pkh.me
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10e40fb2f508f3b6af07c9bdc03595d3309d0e16
Author: Patrisious Haddad <phaddad@nvidia.com>
Date:   Wed Oct 6 12:31:53 2021 +0300

    RDMA/mlx5: Set user priority for DCT
    
    commit 1ab52ac1e9bc9391f592c9fa8340a6e3e9c36286 upstream.
    
    Currently, the driver doesn't set the PCP-based priority for DCT, hence
    DCT response packets are transmitted without user priority.
    
    Fix it by setting user provided priority in the eth_prio field in the DCT
    context, which in turn sets the value in the transmitted packet.
    
    Fixes: 776a3906b692 ("IB/mlx5: Add support for DC target QP")
    Link: https://lore.kernel.org/r/5fd2d94a13f5742d8803c218927322257d53205c.1633512672.git.leonro@nvidia.com
    Signed-off-by: Patrisious Haddad <phaddad@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24fd8e2f027dc8d4cfaa5b1ec9b83278df22f8dc
Author: Rakesh Babu <rsaladi2@marvell.com>
Date:   Wed Oct 27 23:02:33 2021 +0530

    octeontx2-af: Display all enabled PF VF rsrc_alloc entries.
    
    commit e77bcdd1f639809950c45234b08647ac6d3ffe7b upstream.
    
    Currently, we are using a fixed buffer size of length 2048 to display
    rsrc_alloc output. As a result a maximum of 2048 characters of
    rsrc_alloc output is displayed, which may lead sometimes to display only
    partial output. This patch fixes this dependency on max limit of buffer
    size and displays all PF VF entries.
    
    Each column of the debugfs entry "rsrc_alloc" uses a fixed width of 12
    characters to print the list of LFs of each block for a PF/VF. If the
    length of list of LFs of a block exceeds this fixed width then the list
    gets truncated and displays only a part of the list. This patch fixes
    this by using the maximum possible length of list of LFs among all
    blocks of all PFs and VFs entries as the width size.
    
    Fixes: f7884097141b ("octeontx2-af: Formatting debugfs entry rsrc_alloc.")
    Fixes: 23205e6d06d4 ("octeontx2-af: Dump current resource provisioning status")
    Signed-off-by: Rakesh Babu <rsaladi2@marvell.com>
    Signed-off-by: Nithin Dabilpuram <ndabilpuram@marvell.com>
    Signed-off-by: Sunil Kovvuri Goutham <Sunil.Goutham@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c63d7f2ca99a2e2a9b62d42bffa0ccec407b91b0
Author: Varun Prakash <varun@chelsio.com>
Date:   Tue Oct 26 19:01:55 2021 +0530

    nvme-tcp: fix possible req->offset corruption
    
    commit ce7723e9cdae4eb3030da082876580f4b2dc0861 upstream.
    
    With commit db5ad6b7f8cd ("nvme-tcp: try to send request in queue_rq
    context") r2t and response PDU can get processed while send function
    is executing.
    
    Current data digest send code uses req->offset after kernel_sendmsg(),
    this creates a race condition where req->offset gets reset before it
    is used in send function.
    
    This can happen in two cases -
    1. Target sends r2t PDU which resets req->offset.
    2. Target send response PDU which completes the req and then req is
       used for a new command, nvme_tcp_setup_cmd_pdu() resets req->offset.
    
    Fix this by storing req->offset in a local variable and using
    this local variable after kernel_sendmsg().
    
    Fixes: db5ad6b7f8cd ("nvme-tcp: try to send request in queue_rq context")
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32f3db20f1261273b3a7ebcd437722c4ca9bff60
Author: Varun Prakash <varun@chelsio.com>
Date:   Mon Oct 25 22:47:30 2021 +0530

    nvme-tcp: fix data digest pointer calculation
    
    commit d89b9f3bbb58e9e378881209756b0723694f22ff upstream.
    
    ddgst is of type __le32, &req->ddgst + req->offset
    increases &req->ddgst by 4 * req->offset, fix this by
    type casting &req->ddgst to u8 *.
    
    Fixes: 3f2304f8c6d6 ("nvme-tcp: add NVMe over TCP host driver")
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4286c72c5321666b58438e73229ba39e56461bd7
Author: Varun Prakash <varun@chelsio.com>
Date:   Mon Oct 25 22:46:54 2021 +0530

    nvmet-tcp: fix data digest pointer calculation
    
    commit e790de54e94a7a15fb725b34724d41d41cbaa60c upstream.
    
    exp_ddgst is of type __le32, &cmd->exp_ddgst + cmd->offset increases
    &cmd->exp_ddgst by 4 * cmd->offset, fix this by type casting
    &cmd->exp_ddgst to u8 *.
    
    Fixes: 872d26a391da ("nvmet-tcp: add NVMe over TCP target driver")
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d98883f6c33e0d960afedcecaa92fc2b61fec383
Author: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
Date:   Wed Oct 13 10:18:52 2021 -0400

    IB/hfi1: Fix abba locking issue with sc_disable()
    
    commit 13bac861952a78664907a0f927d3e874e9a59034 upstream.
    
    sc_disable() after having disabled the send context wakes up any waiters
    by calling hfi1_qp_wakeup() while holding the waitlock for the sc.
    
    This is contrary to the model for all other calls to hfi1_qp_wakeup()
    where the waitlock is dropped and a local is used to drive calls to
    hfi1_qp_wakeup().
    
    Fix by moving the sc->piowait into a local list and driving the wakeup
    calls from the list.
    
    Fixes: 099a884ba4c0 ("IB/hfi1: Handle wakeup of orphaned QPs for pio")
    Link: https://lore.kernel.org/r/20211013141852.128104.2682.stgit@awfm-01.cornelisnetworks.com
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3e17e58f571f34c51aeb17274ed02c2ed5cf780
Author: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
Date:   Tue Oct 12 13:55:19 2021 -0400

    IB/qib: Protect from buffer overflow in struct qib_user_sdma_pkt fields
    
    commit d39bf40e55e666b5905fdbd46a0dced030ce87be upstream.
    
    Overflowing either addrlimit or bytes_togo can allow userspace to trigger
    a buffer overflow of kernel memory. Check for overflows in all the places
    doing math on user controlled buffers.
    
    Fixes: f931551bafe1 ("IB/qib: Add new qib driver for QLogic PCIe InfiniBand adapters")
    Link: https://lore.kernel.org/r/20211012175519.7298.77738.stgit@awfm-01.cornelisnetworks.com
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee4908f909b3761ded2e32c79a6ea5ed20e1fdc6
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Tue Oct 19 03:29:34 2021 +0000

    bpf: Fix error usage of map_fd and fdget() in generic_map_update_batch()
    
    commit fda7a38714f40b635f5502ec4855602c6b33dad2 upstream.
    
    1. The ufd in generic_map_update_batch() should be read from batch.map_fd;
    2. A call to fdget() should be followed by a symmetric call to fdput().
    
    Fixes: aa2e93b8e58e ("bpf: Add generic support for update and delete batch ops")
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20211019032934.1210517-1-xukuohai@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd2260ec643d309d8c58ceac3aa77f80db765488
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Tue Oct 26 13:00:19 2021 +0200

    bpf: Fix potential race in tail call compatibility check
    
    commit 54713c85f536048e685258f880bf298a74c3620d upstream.
    
    Lorenzo noticed that the code testing for program type compatibility of
    tail call maps is potentially racy in that two threads could encounter a
    map with an unset type simultaneously and both return true even though they
    are inserting incompatible programs.
    
    The race window is quite small, but artificially enlarging it by adding a
    usleep_range() inside the check in bpf_prog_array_compatible() makes it
    trivial to trigger from userspace with a program that does, essentially:
    
            map_fd = bpf_create_map(BPF_MAP_TYPE_PROG_ARRAY, 4, 4, 2, 0);
            pid = fork();
            if (pid) {
                    key = 0;
                    value = xdp_fd;
            } else {
                    key = 1;
                    value = tc_fd;
            }
            err = bpf_map_update_elem(map_fd, &key, &value, 0);
    
    While the race window is small, it has potentially serious ramifications in
    that triggering it would allow a BPF program to tail call to a program of a
    different type. So let's get rid of it by protecting the update with a
    spinlock. The commit in the Fixes tag is the last commit that touches the
    code in question.
    
    v2:
    - Use a spinlock instead of an atomic variable and cmpxchg() (Alexei)
    v3:
    - Put lock and the members it protects into an embedded 'owner' struct (Daniel)
    
    Fixes: 3324b584b6f6 ("ebpf: misc core cleanup")
    Reported-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20211026110019.363464-1-toke@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15dec6d8f8642a26d6a272af2d7f9877df8f02b8
Author: Liu Jian <liujian56@huawei.com>
Date:   Tue Oct 12 13:20:19 2021 +0800

    tcp_bpf: Fix one concurrency problem in the tcp_bpf_send_verdict function
    
    commit cd9733f5d75c94a32544d6ce5be47e14194cf137 upstream.
    
    With two Msgs, msgA and msgB and a user doing nonblocking sendmsg calls (or
    multiple cores) on a single socket 'sk' we could get the following flow.
    
     msgA, sk                               msgB, sk
     -----------                            ---------------
     tcp_bpf_sendmsg()
     lock(sk)
     psock = sk->psock
                                            tcp_bpf_sendmsg()
                                            lock(sk) ... blocking
    tcp_bpf_send_verdict
    if (psock->eval == NONE)
       psock->eval = sk_psock_msg_verdict
     ..
     < handle SK_REDIRECT case >
       release_sock(sk)                     < lock dropped so grab here >
       ret = tcp_bpf_sendmsg_redir
                                            psock = sk->psock
                                            tcp_bpf_send_verdict
     lock_sock(sk) ... blocking on B
                                            if (psock->eval == NONE) <- boom.
                                             psock->eval will have msgA state
    
    The problem here is we dropped the lock on msgA and grabbed it with msgB.
    Now we have old state in psock and importantly psock->eval has not been
    cleared. So msgB will run whatever action was done on A and the verdict
    program may never see it.
    
    Fixes: 604326b41a6fb ("bpf, sockmap: convert to generic sk_msg interface")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20211012052019.184398-1-liujian56@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cac6b043cea3e120f4fccec16f7381747cbfdc0d
Author: Björn Töpel <bjorn@kernel.org>
Date:   Thu Oct 28 14:51:15 2021 +0200

    riscv, bpf: Fix potential NULL dereference
    
    commit 27de809a3d83a6199664479ebb19712533d6fd9b upstream.
    
    The bpf_jit_binary_free() function requires a non-NULL argument. When
    the RISC-V BPF JIT fails to converge in NR_JIT_ITERATIONS steps,
    jit_data->header will be NULL, which triggers a NULL
    dereference. Avoid this by checking the argument, prior calling the
    function.
    
    Fixes: ca6cb5447cec ("riscv, bpf: Factor common RISC-V JIT code")
    Signed-off-by: Björn Töpel <bjorn@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/r/20211028125115.514587-1-bjorn@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01599bf7cc2b49c3d2be886cb438647dc25446ed
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Mon Oct 18 15:56:23 2021 +0800

    cgroup: Fix memory leak caused by missing cgroup_bpf_offline
    
    commit 04f8ef5643bcd8bcde25dfdebef998aea480b2ba upstream.
    
    When enabling CONFIG_CGROUP_BPF, kmemleak can be observed by running
    the command as below:
    
        $mount -t cgroup -o none,name=foo cgroup cgroup/
        $umount cgroup/
    
    unreferenced object 0xc3585c40 (size 64):
      comm "mount", pid 425, jiffies 4294959825 (age 31.990s)
      hex dump (first 32 bytes):
        01 00 00 80 84 8c 28 c0 00 00 00 00 00 00 00 00  ......(.........
        00 00 00 00 00 00 00 00 6c 43 a0 c3 00 00 00 00  ........lC......
      backtrace:
        [<e95a2f9e>] cgroup_bpf_inherit+0x44/0x24c
        [<1f03679c>] cgroup_setup_root+0x174/0x37c
        [<ed4b0ac5>] cgroup1_get_tree+0x2c0/0x4a0
        [<f85b12fd>] vfs_get_tree+0x24/0x108
        [<f55aec5c>] path_mount+0x384/0x988
        [<e2d5e9cd>] do_mount+0x64/0x9c
        [<208c9cfe>] sys_mount+0xfc/0x1f4
        [<06dd06e0>] ret_fast_syscall+0x0/0x48
        [<a8308cb3>] 0xbeb4daa8
    
    This is because that since the commit 2b0d3d3e4fcf ("percpu_ref: reduce
    memory footprint of percpu_ref in fast path") root_cgrp->bpf.refcnt.data
    is allocated by the function percpu_ref_init in cgroup_bpf_inherit which
    is called by cgroup_setup_root when mounting, but not freed along with
    root_cgrp when umounting. Adding cgroup_bpf_offline which calls
    percpu_ref_kill to cgroup_kill_sb can free root_cgrp->bpf.refcnt.data in
    umount path.
    
    This patch also fixes the commit 4bfc0bb2c60e ("bpf: decouple the lifetime
    of cgroup_bpf from cgroup itself"). A cgroup_bpf_offline is needed to do a
    cleanup that frees the resources which are allocated by cgroup_bpf_inherit
    in cgroup_setup_root.
    
    And inside cgroup_bpf_offline, cgroup_get() is at the beginning and
    cgroup_put is at the end of cgroup_bpf_release which is called by
    cgroup_bpf_offline. So cgroup_bpf_offline can keep the balance of
    cgroup's refcount.
    
    Fixes: 2b0d3d3e4fcf ("percpu_ref: reduce memory footprint of percpu_ref in fast path")
    Fixes: 4bfc0bb2c60e ("bpf: decouple the lifetime of cgroup_bpf from cgroup itself")
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Roman Gushchin <guro@fb.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20211018075623.26884-1-quanyang.wang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb3b6805e3e9d98b2507201fd061a231988ce623
Author: Thelford Williams <tdwilliamsiv@gmail.com>
Date:   Wed Oct 13 16:04:13 2021 -0400

    drm/amdgpu: fix out of bounds write
    
    commit 5afa7898ab7a0ec9c28556a91df714bf3c2f725e upstream.
    
    Size can be any value and is user controlled resulting in overwriting the
    40 byte array wr_buf with an arbitrary length of data from buf.
    
    Signed-off-by: Thelford Williams <tdwilliamsiv@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c21b4002214c1c7e7b627b9b53375612f7aab6db
Author: Christian König <christian.koenig@amd.com>
Date:   Wed Oct 20 19:19:46 2021 +0200

    drm/ttm: fix memleak in ttm_transfered_destroy
    
    commit 0db55f9a1bafbe3dac750ea669de9134922389b5 upstream.
    
    We need to cleanup the fences for ghost objects as well.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Tested-by: Erhard F. <erhard_f@mailbox.org>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=214029
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=214447
    CC: <stable@vger.kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211020173211.2247-1-christian.koenig@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69a7fa5cb0de06c8956b040f19a7248c8c8308ca
Author: Rongwei Wang <rongwei.wang@linux.alibaba.com>
Date:   Thu Oct 28 14:36:27 2021 -0700

    mm, thp: bail out early in collapse_file for writeback page
    
    commit 74c42e1baacf206338b1dd6b6199ac964512b5bb upstream.
    
    Currently collapse_file does not explicitly check PG_writeback, instead,
    page_has_private and try_to_release_page are used to filter writeback
    pages.  This does not work for xfs with blocksize equal to or larger
    than pagesize, because in such case xfs has no page->private.
    
    This makes collapse_file bail out early for writeback page.  Otherwise,
    xfs end_page_writeback will panic as follows.
    
      page:fffffe00201bcc80 refcount:0 mapcount:0 mapping:ffff0003f88c86a8 index:0x0 pfn:0x84ef32
      aops:xfs_address_space_operations [xfs] ino:30000b7 dentry name:"libtest.so"
      flags: 0x57fffe0000008027(locked|referenced|uptodate|active|writeback)
      raw: 57fffe0000008027 ffff80001b48bc28 ffff80001b48bc28 ffff0003f88c86a8
      raw: 0000000000000000 0000000000000000 00000000ffffffff ffff0000c3e9a000
      page dumped because: VM_BUG_ON_PAGE(((unsigned int) page_ref_count(page) + 127u <= 127u))
      page->mem_cgroup:ffff0000c3e9a000
      ------------[ cut here ]------------
      kernel BUG at include/linux/mm.h:1212!
      Internal error: Oops - BUG: 0 [#1] SMP
      Modules linked in:
      BUG: Bad page state in process khugepaged  pfn:84ef32
       xfs(E)
      page:fffffe00201bcc80 refcount:0 mapcount:0 mapping:0 index:0x0 pfn:0x84ef32
       libcrc32c(E) rfkill(E) aes_ce_blk(E) crypto_simd(E) ...
      CPU: 25 PID: 0 Comm: swapper/25 Kdump: loaded Tainted: ...
      pstate: 60400005 (nZCv daif +PAN -UAO -TCO BTYPE=--)
      Call trace:
        end_page_writeback+0x1c0/0x214
        iomap_finish_page_writeback+0x13c/0x204
        iomap_finish_ioend+0xe8/0x19c
        iomap_writepage_end_bio+0x38/0x50
        bio_endio+0x168/0x1ec
        blk_update_request+0x278/0x3f0
        blk_mq_end_request+0x34/0x15c
        virtblk_request_done+0x38/0x74 [virtio_blk]
        blk_done_softirq+0xc4/0x110
        __do_softirq+0x128/0x38c
        __irq_exit_rcu+0x118/0x150
        irq_exit+0x1c/0x30
        __handle_domain_irq+0x8c/0xf0
        gic_handle_irq+0x84/0x108
        el1_irq+0xcc/0x180
        arch_cpu_idle+0x18/0x40
        default_idle_call+0x4c/0x1a0
        cpuidle_idle_call+0x168/0x1e0
        do_idle+0xb4/0x104
        cpu_startup_entry+0x30/0x9c
        secondary_start_kernel+0x104/0x180
      Code: d4210000 b0006161 910c8021 94013f4d (d4210000)
      ---[ end trace 4a88c6a074082f8c ]---
      Kernel panic - not syncing: Oops - BUG: Fatal exception in interrupt
    
    Link: https://lkml.kernel.org/r/20211022023052.33114-1-rongwei.wang@linux.alibaba.com
    Fixes: 99cb0dbd47a1 ("mm,thp: add read-only THP support for (non-shmem) FS")
    Signed-off-by: Rongwei Wang <rongwei.wang@linux.alibaba.com>
    Signed-off-by: Xu Yu <xuyu@linux.alibaba.com>
    Suggested-by: Yang Shi <shy828301@gmail.com>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Song Liu <song@kernel.org>
    Cc: William Kucharski <william.kucharski@oracle.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fb858b74ac517763aa97bd3acaacbe31167ff14
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 26 12:36:17 2021 +0200

    net: lan78xx: fix division by zero in send path
    
    commit db6c3c064f5d55fa9969f33eafca3cdbefbb3541 upstream.
    
    Add the missing endpoint max-packet sanity check to probe() to avoid
    division by zero in lan78xx_tx_bh() in case a malicious device has
    broken descriptors (or when doing descriptor fuzz testing).
    
    Note that USB core will reject URBs submitted for endpoints with zero
    wMaxPacketSize but that drivers doing packet-size calculations still
    need to handle this (cf. commit 2548288b4fb0 ("USB: Fix: Don't skip
    endpoint descriptors with maxpacket=0")).
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Cc: stable@vger.kernel.org      # 4.3
    Cc: Woojung.Huh@microchip.com <Woojung.Huh@microchip.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c22227e39c7a0b4dab55617ee8d34d171fab8d4
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Oct 25 13:31:12 2021 +0200

    cfg80211: fix management registrations locking
    
    commit 09b1d5dc6ce1c9151777f6c4e128a59457704c97 upstream.
    
    The management registrations locking was broken, the list was
    locked for each wdev, but cfg80211_mgmt_registrations_update()
    iterated it without holding all the correct spinlocks, causing
    list corruption.
    
    Rather than trying to fix it with fine-grained locking, just
    move the lock to the wiphy/rdev (still need the list on each
    wdev), we already need to hold the wdev lock to change it, so
    there's no contention on the lock in any case. This trivially
    fixes the bug since we hold one wdev's lock already, and now
    will hold the lock that protects all lists.
    
    Cc: stable@vger.kernel.org
    Reported-by: Jouni Malinen <j@w1.fi>
    Fixes: 6cd536fe62ef ("cfg80211: change internal management frame registration API")
    Link: https://lore.kernel.org/r/20211025133111.5cf733eab0f4.I7b0abb0494ab712f74e2efcd24bb31ac33f7eee9@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa29cec42c2d306cae0d5dbe0d92f0185253e8dc
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Sep 30 13:11:21 2021 +0200

    cfg80211: scan: fix RCU in cfg80211_add_nontrans_list()
    
    commit a2083eeb119fb9307258baea9b7c243ca9a2e0b6 upstream.
    
    The SSID pointer is pointing to RCU protected data, so we
    need to have it under rcu_read_lock() for the entire use.
    Fix this.
    
    Cc: stable@vger.kernel.org
    Fixes: 0b8fb8235be8 ("cfg80211: Parsing of Multiple BSSID information in scanning")
    Link: https://lore.kernel.org/r/20210930131120.6ddfc603aa1d.I2137344c4e2426525b1a8e4ce5fca82f8ecbfe7e@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db1191a529e45c41bfd7692ccc5157fe90dc4a9c
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Sun Oct 24 10:43:31 2021 +0300

    nvme-tcp: fix H2CData PDU send accounting (again)
    
    commit 25e1f67eda4a19c91dc05c84d6d413c53efb447b upstream.
    
    We should not access request members after the last send, even to
    determine if indeed it was the last data payload send. The reason is
    that a completion could have arrived and trigger a new execution of the
    request which overridden these members. This was fixed by commit
    825619b09ad3 ("nvme-tcp: fix possible use-after-completion").
    
    Commit e371af033c56 broke that assumption again to address cases where
    multiple r2t pdus are sent per request. To fix it, we need to record the
    request data_sent and data_len and after the payload network send we
    reference these counters to determine weather we should advance the
    request iterator.
    
    Fixes: e371af033c56 ("nvme-tcp: fix incorrect h2cdata pdu offset accounting")
    Reported-by: Keith Busch <kbusch@kernel.org>
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5043fbd294f5909a080ade0f04b70a4da9e122b7
Author: Gautham Ananthakrishna <gautham.ananthakrishna@oracle.com>
Date:   Thu Oct 28 14:36:17 2021 -0700

    ocfs2: fix race between searching chunks and release journal_head from buffer_head
    
    commit 6f1b228529ae49b0f85ab89bcdb6c365df401558 upstream.
    
    Encountered a race between ocfs2_test_bg_bit_allocatable() and
    jbd2_journal_put_journal_head() resulting in the below vmcore.
    
      PID: 106879  TASK: ffff880244ba9c00  CPU: 2   COMMAND: "loop3"
      Call trace:
        panic
        oops_end
        no_context
        __bad_area_nosemaphore
        bad_area_nosemaphore
        __do_page_fault
        do_page_fault
        page_fault
          [exception RIP: ocfs2_block_group_find_clear_bits+316]
        ocfs2_block_group_find_clear_bits [ocfs2]
        ocfs2_cluster_group_search [ocfs2]
        ocfs2_search_chain [ocfs2]
        ocfs2_claim_suballoc_bits [ocfs2]
        __ocfs2_claim_clusters [ocfs2]
        ocfs2_claim_clusters [ocfs2]
        ocfs2_local_alloc_slide_window [ocfs2]
        ocfs2_reserve_local_alloc_bits [ocfs2]
        ocfs2_reserve_clusters_with_limit [ocfs2]
        ocfs2_reserve_clusters [ocfs2]
        ocfs2_lock_refcount_allocators [ocfs2]
        ocfs2_make_clusters_writable [ocfs2]
        ocfs2_replace_cow [ocfs2]
        ocfs2_refcount_cow [ocfs2]
        ocfs2_file_write_iter [ocfs2]
        lo_rw_aio
        loop_queue_work
        kthread_worker_fn
        kthread
        ret_from_fork
    
    When ocfs2_test_bg_bit_allocatable() called bh2jh(bg_bh), the
    bg_bh->b_private NULL as jbd2_journal_put_journal_head() raced and
    released the jounal head from the buffer head.  Needed to take bit lock
    for the bit 'BH_JournalHead' to fix this race.
    
    Link: https://lkml.kernel.org/r/1634820718-6043-1-git-send-email-gautham.ananthakrishna@oracle.com
    Signed-off-by: Gautham Ananthakrishna <gautham.ananthakrishna@oracle.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: <rajesh.sivaramasubramaniom@oracle.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01169a43353d4cb895d1957cd70dc553da3f944e
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Fri Oct 15 10:00:36 2021 +0800

    mmc: sdhci-esdhc-imx: clear the buffer_read_ready to reset standard tuning circuit
    
    commit 9af372dc70e9fdcbb70939dac75365e7b88580b4 upstream.
    
    To reset standard tuning circuit completely, after clear ESDHC_MIX_CTRL_EXE_TUNE,
    also need to clear bit buffer_read_ready, this operation will finally clear the
    USDHC IP internal logic flag execute_tuning_with_clr_buf, make sure the following
    normal data transfer will not be impacted by standard tuning logic used before.
    
    Find this issue when do quick SD card insert/remove stress test. During standard
    tuning prodedure, if remove SD card, USDHC standard tuning logic can't clear the
    internal flag execute_tuning_with_clr_buf. Next time when insert SD card, all
    data related commands can't get any data related interrupts, include data transfer
    complete interrupt, data timeout interrupt, data CRC interrupt, data end bit interrupt.
    Always trigger software timeout issue. Even reset the USDHC through bits in register
    SYS_CTRL (0x2C, bit28 reset tuning, bit26 reset data, bit 25 reset command, bit 24
    reset all) can't recover this. From the user's point of view, USDHC stuck, SD can't
    be recognized any more.
    
    Fixes: d9370424c948 ("mmc: sdhci-esdhc-imx: reset tuning circuit when power on mmc card")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1634263236-6111-1-git-send-email-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee3213b117ce93d8df90d43e3eecb89b3c8e6f92
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Oct 4 10:49:35 2021 +0800

    mmc: sdhci: Map more voltage level to SDHCI_POWER_330
    
    commit 4217d07b9fb328751f877d3bd9550122014860a2 upstream.
    
    On Thundercomm TurboX CM2290, the eMMC OCR reports vdd = 23 (3.5 ~ 3.6 V),
    which is being treated as an invalid value by sdhci_set_power_noreg().
    And thus eMMC is totally broken on the platform.
    
    [    1.436599] ------------[ cut here ]------------
    [    1.436606] mmc0: Invalid vdd 0x17
    [    1.436640] WARNING: CPU: 2 PID: 69 at drivers/mmc/host/sdhci.c:2048 sdhci_set_power_noreg+0x168/0x2b4
    [    1.436655] Modules linked in:
    [    1.436662] CPU: 2 PID: 69 Comm: kworker/u8:1 Tainted: G        W         5.15.0-rc1+ #137
    [    1.436669] Hardware name: Thundercomm TurboX CM2290 (DT)
    [    1.436674] Workqueue: events_unbound async_run_entry_fn
    [    1.436685] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    [    1.436692] pc : sdhci_set_power_noreg+0x168/0x2b4
    [    1.436698] lr : sdhci_set_power_noreg+0x168/0x2b4
    [    1.436703] sp : ffff800010803a60
    [    1.436705] x29: ffff800010803a60 x28: ffff6a9102465f00 x27: ffff6a9101720a70
    [    1.436715] x26: ffff6a91014de1c0 x25: ffff6a91014de010 x24: ffff6a91016af280
    [    1.436724] x23: ffffaf7b1b276640 x22: 0000000000000000 x21: ffff6a9101720000
    [    1.436733] x20: ffff6a9101720370 x19: ffff6a9101720580 x18: 0000000000000020
    [    1.436743] x17: 0000000000000000 x16: 0000000000000004 x15: ffffffffffffffff
    [    1.436751] x14: 0000000000000000 x13: 00000000fffffffd x12: ffffaf7b1b84b0bc
    [    1.436760] x11: ffffaf7b1b720d10 x10: 000000000000000a x9 : ffff800010803a60
    [    1.436769] x8 : 000000000000000a x7 : 000000000000000f x6 : 00000000fffff159
    [    1.436778] x5 : 0000000000000000 x4 : 0000000000000000 x3 : 00000000ffffffff
    [    1.436787] x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff6a9101718d80
    [    1.436797] Call trace:
    [    1.436800]  sdhci_set_power_noreg+0x168/0x2b4
    [    1.436805]  sdhci_set_ios+0xa0/0x7fc
    [    1.436811]  mmc_power_up.part.0+0xc4/0x164
    [    1.436818]  mmc_start_host+0xa0/0xb0
    [    1.436824]  mmc_add_host+0x60/0x90
    [    1.436830]  __sdhci_add_host+0x174/0x330
    [    1.436836]  sdhci_msm_probe+0x7c0/0x920
    [    1.436842]  platform_probe+0x68/0xe0
    [    1.436850]  really_probe.part.0+0x9c/0x31c
    [    1.436857]  __driver_probe_device+0x98/0x144
    [    1.436863]  driver_probe_device+0xc8/0x15c
    [    1.436869]  __device_attach_driver+0xb4/0x120
    [    1.436875]  bus_for_each_drv+0x78/0xd0
    [    1.436881]  __device_attach_async_helper+0xac/0xd0
    [    1.436888]  async_run_entry_fn+0x34/0x110
    [    1.436895]  process_one_work+0x1d0/0x354
    [    1.436903]  worker_thread+0x13c/0x470
    [    1.436910]  kthread+0x150/0x160
    [    1.436915]  ret_from_fork+0x10/0x20
    [    1.436923] ---[ end trace fcfac44cb045c3a8 ]---
    
    Fix the issue by mapping MMC_VDD_35_36 (and MMC_VDD_34_35) to
    SDHCI_POWER_330 as well.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211004024935.15326-1-shawn.guo@linaro.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a95a76fc01a0e7b79c02cb73962fea44f6e3c4a0
Author: Jaehoon Chung <jh80.chung@samsung.com>
Date:   Fri Oct 22 17:21:06 2021 +0900

    mmc: dw_mmc: exynos: fix the finding clock sample value
    
    commit 697542bceae51f7620af333b065dd09d213629fb upstream.
    
    Even though there are candiates value if can't find best value, it's
    returned -EIO. It's not proper behavior.
    If there is not best value, use a first candiate value to work eMMC.
    
    Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Christian Hewitt <christianshewitt@gmail.com>
    Cc: stable@vger.kernel.org
    Fixes: c537a1c5ff63 ("mmc: dw_mmc: exynos: add variable delay tuning sequence")
    Link: https://lore.kernel.org/r/20211022082106.1557-1-jh80.chung@samsung.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12a46f72f4994cf17b1dd3d94d11094ea5a15f86
Author: Wenbin Mei <wenbin.mei@mediatek.com>
Date:   Thu Oct 28 10:20:49 2021 +0800

    mmc: mediatek: Move cqhci init behind ungate clock
    
    commit e8a1ff65927080278e6826f797b7c197fb2611a6 upstream.
    
    We must enable clock before cqhci init, because crypto needs read
    information from CQHCI registers, otherwise, it will hang in MediaTek mmc
    host controller.
    
    Signed-off-by: Wenbin Mei <wenbin.mei@mediatek.com>
    Fixes: 88bd652b3c74 ("mmc: mediatek: command queue support")
    Cc: stable@vger.kernel.org
    Acked-by: Chaotian Jing <chaotian.jing@mediatek.com>
    Link: https://lore.kernel.org/r/20211028022049.22129-1-wenbin.mei@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44c2bc2a6bbe6da262533c57969b14d1d1679c68
Author: Wenbin Mei <wenbin.mei@mediatek.com>
Date:   Tue Oct 26 15:08:12 2021 +0800

    mmc: cqhci: clear HALT state after CQE enable
    
    commit 92b18252b91de567cd875f2e84722b10ab34ee28 upstream.
    
    While mmc0 enter suspend state, we need halt CQE to send legacy cmd(flush
    cache) and disable cqe, for resume back, we enable CQE and not clear HALT
    state.
    In this case MediaTek mmc host controller will keep the value for HALT
    state after CQE disable/enable flow, so the next CQE transfer after resume
    will be timeout due to CQE is in HALT state, the log as below:
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: timeout for tag 2
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: ============ CQHCI REGISTER DUMP ===========
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Caps:      0x100020b6 | Version:  0x00000510
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Config:    0x00001103 | Control:  0x00000001
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Int stat:  0x00000000 | Int enab: 0x00000006
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Int sig:   0x00000006 | Int Coal: 0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: TDL base:  0xfd05f000 | TDL up32: 0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Doorbell:  0x8000203c | TCN:      0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Dev queue: 0x00000000 | Dev Pend: 0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Task clr:  0x00000000 | SSC1:     0x00001000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: SSC2:      0x00000001 | DCMD rsp: 0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: RED mask:  0xfdf9a080 | TERRI:    0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: Resp idx:  0x00000000 | Resp arg: 0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: CRNQP:     0x00000000 | CRNQDUN:  0x00000000
    <4>.(4)[318:kworker/4:1H]mmc0: cqhci: CRNQIS:    0x00000000 | CRNQIE:   0x00000000
    
    This change check HALT state after CQE enable, if CQE is in HALT state, we
    will clear it.
    
    Signed-off-by: Wenbin Mei <wenbin.mei@mediatek.com>
    Cc: stable@vger.kernel.org
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: a4080225f51d ("mmc: cqhci: support for command queue enabled host")
    Link: https://lore.kernel.org/r/20211026070812.9359-1-wenbin.mei@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efe934629fff0dc8862e300cffdd9b1012be3333
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 13:56:08 2021 +0200

    mmc: vub300: fix control-message timeouts
    
    commit 8c8171929116cc23f74743d99251eedadf62341a upstream.
    
    USB control-message timeouts are specified in milliseconds and should
    specifically not vary with CONFIG_HZ.
    
    Fixes: 88095e7b473a ("mmc: Add new VUB300 USB-to-SD/SDIO/MMC driver")
    Cc: stable@vger.kernel.org      # 3.0
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211025115608.5287-1-johan@kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3dec7e7ace38224f82cf83f0049159d067c2e19
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Wed Oct 27 17:59:20 2021 -0400

    net/tls: Fix flipped sign in tls_err_abort() calls
    
    commit da353fac65fede6b8b4cfe207f0d9408e3121105 upstream.
    
    sk->sk_err appears to expect a positive value, a convention that ktls
    doesn't always follow and that leads to memory corruption in other code.
    For instance,
    
        [kworker]
        tls_encrypt_done(..., err=<negative error from crypto request>)
          tls_err_abort(.., err)
            sk->sk_err = err;
    
        [task]
        splice_from_pipe_feed
          ...
            tls_sw_do_sendpage
              if (sk->sk_err) {
                ret = -sk->sk_err;  // ret is positive
    
        splice_from_pipe_feed (continued)
          ret = actor(...)  // ret is still positive and interpreted as bytes
                            // written, resulting in underflow of buf->len and
                            // sd->len, leading to huge buf->offset and bogus
                            // addresses computed in later calls to actor()
    
    Fix all tls_err_abort() callers to pass a negative error code
    consistently and centralize the error-prone sign flip there, throwing in
    a warning to catch future misuse and uninlining the function so it
    really does only warn once.
    
    Cc: stable@vger.kernel.org
    Fixes: c46234ebb4d1e ("tls: RX path for ktls")
    Reported-by: syzbot+b187b77c8474f9648fae@syzkaller.appspotmail.com
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c828115a14eacbf42042770fd68543f134e89efa
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Thu Sep 30 20:49:42 2021 +0300

    Revert "net: mdiobus: Fix memory leak in __mdiobus_register"
    
    commit 10eff1f5788b6ffac212c254e2f3666219576889 upstream.
    
    This reverts commit ab609f25d19858513919369ff3d9a63c02cd9e2e.
    
    This patch is correct in the sense that we _should_ call device_put() in
    case of device_register() failure, but the problem in this code is more
    vast.
    
    We need to set bus->state to UNMDIOBUS_REGISTERED before calling
    device_register() to correctly release the device in mdiobus_free().
    This patch prevents us from doing it, since in case of device_register()
    failure put_device() will be called 2 times and it will cause UAF or
    something else.
    
    Also, Reported-by: tag in revered commit was wrong, since syzbot
    reported different leak in same function.
    
    Link: https://lore.kernel.org/netdev/20210928092657.GI2048@kadam/
    Acked-by: Yanfei Xu <yanfei.xu@windriver.com>
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Link: https://lore.kernel.org/r/f12fb1faa4eccf0f355788225335eb4309ff2599.1633024062.git.paskripkin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11c0406b4c3379a410876739b39227446598572a
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Mon Oct 25 16:49:36 2021 +0200

    nfc: port100: fix using -ERRNO as command type mask
    
    commit 2195f2062e4cc93870da8e71c318ef98a1c51cef upstream.
    
    During probing, the driver tries to get a list (mask) of supported
    command types in port100_get_command_type_mask() function.  The value
    is u64 and 0 is treated as invalid mask (no commands supported).  The
    function however returns also -ERRNO as u64 which will be interpret as
    valid command mask.
    
    Return 0 on every error case of port100_get_command_type_mask(), so the
    probing will stop.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 0347a6ab300a ("NFC: port100: Commands mechanism implementation")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b1b3e086b0af2c2faa9938c4db956fe6ce5c965
Author: Max VA <maxv@sentinelone.com>
Date:   Mon Oct 25 17:31:53 2021 +0200

    tipc: fix size validations for the MSG_CRYPTO type
    
    commit fa40d9734a57bcbfa79a280189799f76c88f7bb0 upstream.
    
    The function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages
    to receive keys from other nodes in the cluster in order to decrypt any
    further messages from them.
    This patch verifies that any supplied sizes in the message body are
    valid for the received message.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Signed-off-by: Max VA <maxv@sentinelone.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa5bab579575452bc59f9626e1cd44b4cfbd373
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Fri Oct 22 09:12:26 2021 +0000

    ata: sata_mv: Fix the error handling of mv_chip_id()
    
    commit a0023bb9dd9bc439d44604eeec62426a990054cd upstream.
    
    mv_init_host() propagates the value returned by mv_chip_id() which in turn
    gets propagated by mv_pci_init_one() and hits local_pci_probe().
    
    During the process of driver probing, the probe function should return < 0
    for failure, otherwise, the kernel will treat value > 0 as success.
    
    Since this is a bug rather than a recoverable runtime error we should
    use dev_alert() instead of dev_err().
    
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a52798dce738020cef7e89ab3bbe5dee5f69a43
Author: Sachi King <nakato@nakato.io>
Date:   Sat Oct 9 14:32:40 2021 +1100

    pinctrl: amd: disable and mask interrupts on probe
    
    commit 4e5a04be88fe335ad5331f4f8c17f4ebd357e065 upstream.
    
    Some systems such as the Microsoft Surface Laptop 4 leave interrupts
    enabled and configured for use in sleep states on boot, which cause
    unexpected behaviour such as spurious wakes and failed resumes in
    s2idle states.
    
    As interrupts should not be enabled until they are claimed and
    explicitly enabled, disabling any interrupts mistakenly left enabled by
    firmware should be safe.
    
    Signed-off-by: Sachi King <nakato@nakato.io>
    Link: https://lore.kernel.org/r/20211009033240.21543-1-nakato@nakato.io
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01c2881bb0e0a71b87ca425e1b763ac13855aa7e
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Fri Oct 8 22:59:38 2021 +0200

    Revert "pinctrl: bcm: ns: support updated DT binding as syscon subnode"
    
    commit 6dba4bdfd7a30e77b848a45404b224588bf989e5 upstream.
    
    This reverts commit a49d784d5a8272d0f63c448fe8dc69e589db006e.
    
    The updated binding was wrong / invalid and has been reverted. There
    isn't any upstream kernel DTS using it and Broadcom isn't known to use
    it neither. There is close to zero chance this will cause regression for
    anyone.
    
    Actually in-kernel bcm5301x.dtsi still uses the old good binding and so
    it's broken since the driver update. This revert fixes it.
    
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Link: https://lore.kernel.org/r/20211008205938.29925-3-zajec5@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 017718dfbb6fc7c75e43b1e2554638948d4cb607
Author: Wang Hai <wanghai38@huawei.com>
Date:   Tue Oct 26 20:40:15 2021 +0800

    usbnet: fix error return code in usbnet_probe()
    
    commit 6f7c88691191e6c52ef2543d6f1da8d360b27a24 upstream.
    
    Return error code if usb_maxpacket() returns 0 in usbnet_probe()
    
    Fixes: 397430b50a36 ("usbnet: sanity check for maxpacket")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211026124015.3025136-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 693ecbe8f799405f8775719deedb1f76265d375a
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Oct 21 14:29:44 2021 +0200

    usbnet: sanity check for maxpacket
    
    commit 397430b50a363d8b7bdda00522123f82df6adc5e upstream.
    
    maxpacket of 0 makes no sense and oopses as we need to divide
    by it. Give up.
    
    V2: fixed typo in log and stylistic issues
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: syzbot+76bb1d34ffa0adc03baa@syzkaller.appspotmail.com
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211021122944.21816-1-oneukum@suse.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b663890d854403e566169f7e90aed5cd6ff64f6b
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri Jul 2 12:45:02 2021 -0400

    ext4: fix possible UAF when remounting r/o a mmp-protected file system
    
    commit 61bb4a1c417e5b95d9edb4f887f131de32e419cb upstream.
    
    After commit 618f003199c6 ("ext4: fix memory leak in
    ext4_fill_super"), after the file system is remounted read-only, there
    is a race where the kmmpd thread can exit, causing sbi->s_mmp_tsk to
    point at freed memory, which the call to ext4_stop_mmpd() can trip
    over.
    
    Fix this by only allowing kmmpd() to exit when it is stopped via
    ext4_stop_mmpd().
    
    Link: https://lore.kernel.org/r/20210707002433.3719773-1-tytso@mit.edu
    Reported-by: Ye Bin <yebin10@huawei.com>
    Bug-Report-Link: <20210629143603.2166962-1-yebin10@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Tadeusz Struk <tadeusz.struk@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4d9c065988c4c2c7c0cc4be0f7e1c3563e1e779
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Mon Jul 12 15:27:46 2021 +0100

    arm64: Avoid premature usercopy failure
    
    commit 295cf156231ca3f9e3a66bde7fab5e09c41835e0 upstream.
    
    Al reminds us that the usercopy API must only return complete failure
    if absolutely nothing could be copied. Currently, if userspace does
    something silly like giving us an unaligned pointer to Device memory,
    or a size which overruns MTE tag bounds, we may fail to honour that
    requirement when faulting on a multi-byte access even though a smaller
    access could have succeeded.
    
    Add a mitigation to the fixup routines to fall back to a single-byte
    copy if we faulted on a larger access before anything has been written
    to the destination, to guarantee making *some* forward progress. We
    needn't be too concerned about the overall performance since this should
    only occur when callers are doing something a bit dodgy in the first
    place. Particularly broken userspace might still be able to trick
    generic_perform_write() into an infinite loop by targeting write() at
    an mmap() of some read-only device register where the fault-in load
    succeeds but any store synchronously aborts such that copy_to_user() is
    genuinely unable to make progress, but, well, don't do that...
    
    CC: stable@vger.kernel.org
    Reported-by: Chen Huang <chenhuang5@huawei.com>
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/dc03d5c675731a1f24a62417dba5429ad744234e.1626098433.git.robin.murphy@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Chen Huang <chenhuang5@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e184a21b5ccc49f3e1c3160bc280a5995e933b04
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Wed Oct 6 01:55:22 2021 +0530

    powerpc/bpf: Fix BPF_MOD when imm == 1
    
    commit 8bbc9d822421d9ac8ff9ed26a3713c9afc69d6c8 upstream.
    
    Only ignore the operation if dividing by 1.
    
    Fixes: 156d0e290e969c ("powerpc/ebpf/jit: Implement JIT compiler for extended BPF")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Tested-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>
    Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Acked-by: Song Liu <songliubraving@fb.com>
    Acked-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/c674ca18c3046885602caebb326213731c675d06.1633464148.git.naveen.n.rao@linux.vnet.ibm.com
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f2c12ec8a3f992c528c7ad83f7272122dfe8d84
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Thu Feb 18 22:32:51 2021 +0000

    io_uring: don't take uring_lock during iowq cancel
    
    commit 792bb6eb862333658bf1bd2260133f0507e2da8d upstream.
    
    [   97.866748] a.out/2890 is trying to acquire lock:
    [   97.867829] ffff8881046763e8 (&ctx->uring_lock){+.+.}-{3:3}, at:
    io_wq_submit_work+0x155/0x240
    [   97.869735]
    [   97.869735] but task is already holding lock:
    [   97.871033] ffff88810dfe0be8 (&ctx->uring_lock){+.+.}-{3:3}, at:
    __x64_sys_io_uring_enter+0x3f0/0x5b0
    [   97.873074]
    [   97.873074] other info that might help us debug this:
    [   97.874520]  Possible unsafe locking scenario:
    [   97.874520]
    [   97.875845]        CPU0
    [   97.876440]        ----
    [   97.877048]   lock(&ctx->uring_lock);
    [   97.877961]   lock(&ctx->uring_lock);
    [   97.878881]
    [   97.878881]  *** DEADLOCK ***
    [   97.878881]
    [   97.880341]  May be due to missing lock nesting notation
    [   97.880341]
    [   97.881952] 1 lock held by a.out/2890:
    [   97.882873]  #0: ffff88810dfe0be8 (&ctx->uring_lock){+.+.}-{3:3}, at:
    __x64_sys_io_uring_enter+0x3f0/0x5b0
    [   97.885108]
    [   97.885108] stack backtrace:
    [   97.890457] Call Trace:
    [   97.891121]  dump_stack+0xac/0xe3
    [   97.891972]  __lock_acquire+0xab6/0x13a0
    [   97.892940]  lock_acquire+0x2c3/0x390
    [   97.894894]  __mutex_lock+0xae/0x9f0
    [   97.901101]  io_wq_submit_work+0x155/0x240
    [   97.902112]  io_wq_cancel_cb+0x162/0x490
    [   97.904126]  io_async_find_and_cancel+0x3b/0x140
    [   97.905247]  io_issue_sqe+0x86d/0x13e0
    [   97.909122]  __io_queue_sqe+0x10b/0x550
    [   97.913971]  io_queue_sqe+0x235/0x470
    [   97.914894]  io_submit_sqes+0xcce/0xf10
    [   97.917872]  __x64_sys_io_uring_enter+0x3fb/0x5b0
    [   97.921424]  do_syscall_64+0x2d/0x40
    [   97.922329]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    While holding uring_lock, e.g. from inline execution, async cancel
    request may attempt cancellations through io_wq_submit_work, which may
    try to grab a lock. Delay it to task_work, so we do it from a clean
    context and don't have to worry about locking.
    
    Cc: <stable@vger.kernel.org> # 5.5+
    Fixes: c07e6719511e ("io_uring: hold uring_lock while completing failed polled io in io_wq_submit_work()")
    Reported-by: Abaci <abaci@linux.alibaba.com>
    Reported-by: Hao Xu <haoxu@linux.alibaba.com>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [Lee: The first hunk solves a different (double free) issue in v5.10.
          Only the first hunk of the original patch is relevant to v5.10 AND
          the first hunk of the original patch is only relevant to v5.10]
    Reported-by: syzbot+59d8a1f4e60c20c066cf@syzkaller.appspotmail.com
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a768b4d3e1a3eda23b8c5690645fde2bcff910a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 18 15:30:37 2021 +0100

    ARM: 9141/1: only warn about XIP address when not compile testing
    
    commit 48ccc8edf5b90622cdc4f8878e0042ab5883e2ca upstream.
    
    In randconfig builds, we sometimes come across this warning:
    
    arm-linux-gnueabi-ld: XIP start address may cause MPU programming issues
    
    While this is helpful for actual systems to figure out why it
    fails, the warning does not provide any benefit for build testing,
    so guard it in a check for CONFIG_COMPILE_TEST, which is usually
    set on randconfig builds.
    
    Fixes: 216218308cfb ("ARM: 8713/1: NOMMU: Support MPU in XIP configuration")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15b278f94bbb788974881f5e67d3f12f0f8be7cc
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 18 15:30:09 2021 +0100

    ARM: 9139/1: kprobes: fix arch_init_kprobes() prototype
    
    commit 1f323127cab086e4fd618981b1e5edc396eaf0f4 upstream.
    
    With extra warnings enabled, gcc complains about this function
    definition:
    
    arch/arm/probes/kprobes/core.c: In function 'arch_init_kprobes':
    arch/arm/probes/kprobes/core.c:465:12: warning: old-style function definition [-Wold-style-definition]
      465 | int __init arch_init_kprobes()
    
    Link: https://lore.kernel.org/all/20201027093057.c685a14b386acacb3c449e3d@kernel.org/
    
    Fixes: 24ba613c9d6c ("ARM kprobes: core code")
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c06d7d9bfcf6830fdc82ff07fe955d3e48bc0fe9
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 18 15:30:08 2021 +0100

    ARM: 9138/1: fix link warning with XIP + frame-pointer
    
    commit 44cc6412e66b2b84544eaf2e14cf1764301e2a80 upstream.
    
    When frame pointers are used instead of the ARM unwinder,
    and the kernel is built using clang with an external assembler
    and CONFIG_XIP_KERNEL, every file produces two warnings
    like:
    
    arm-linux-gnueabi-ld: warning: orphan section `.ARM.extab' from `net/mac802154/util.o' being placed in section `.ARM.extab'
    arm-linux-gnueabi-ld: warning: orphan section `.ARM.exidx' from `net/mac802154/util.o' being placed in section `.ARM.exidx'
    
    The same fix was already merged for the normal (non-XIP)
    
    linker script, with a longer description.
    
    Fixes: c39866f268f8 ("arm/build: Always handle .ARM.exidx and .ARM.extab sections")
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a6af97c31beefcc0f0836d90b5fea3b303cc6c9
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 18 15:30:04 2021 +0100

    ARM: 9134/1: remove duplicate memcpy() definition
    
    commit eaf6cc7165c9c5aa3c2f9faa03a98598123d0afb upstream.
    
    Both the decompressor code and the kasan logic try to override
    the memcpy() and memmove()  definitions, which leading to a clash
    in a KASAN-enabled kernel with XZ decompression:
    
    arch/arm/boot/compressed/decompress.c:50:9: error: 'memmove' macro redefined [-Werror,-Wmacro-redefined]
     #define memmove memmove
            ^
    arch/arm/include/asm/string.h:59:9: note: previous definition is here
     #define memmove(dst, src, len) __memmove(dst, src, len)
            ^
    arch/arm/boot/compressed/decompress.c:51:9: error: 'memcpy' macro redefined [-Werror,-Wmacro-redefined]
     #define memcpy memcpy
            ^
    arch/arm/include/asm/string.h:58:9: note: previous definition is here
     #define memcpy(dst, src, len) __memcpy(dst, src, len)
            ^
    
    Here we want the set of functions from the decompressor, so undefine
    the other macros before the override.
    
    Link: https://lore.kernel.org/linux-arm-kernel/CACRpkdZYJogU_SN3H9oeVq=zJkRgRT1gDz3xp59gdqWXxw-B=w@mail.gmail.com/
    Link: https://lore.kernel.org/lkml/202105091112.F5rmd4By-lkp@intel.com/
    
    Fixes: d6d51a96c7d6 ("ARM: 9014/2: Replace string mem* functions for KASan")
    Fixes: a7f464f3db93 ("ARM: 7001/2: Wire up support for the XZ decompressor")
    Reported-by: kernel test robot <lkp@intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ad8bbc9d301145335c35f29ed7878b61b0ad81f
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Mon Oct 4 18:03:28 2021 +0100

    ARM: 9133/1: mm: proc-macros: ensure *_tlb_fns are 4B aligned
    
    commit e6a0c958bdf9b2e1b57501fc9433a461f0a6aadd upstream.
    
    A kernel built with CONFIG_THUMB2_KERNEL=y and using clang as the
    assembler could generate non-naturally-aligned v7wbi_tlb_fns which
    results in a boot failure. The original commit adding the macro missed
    the .align directive on this data.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1447
    Link: https://lore.kernel.org/all/0699da7b-354f-aecc-a62f-e25693209af4@linaro.org/
    Debugged-by: Ard Biesheuvel <ardb@kernel.org>
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Debugged-by: Richard Henderson <richard.henderson@linaro.org>
    
    Fixes: 66a625a88174 ("ARM: mm: proc-macros: Add generic proc/cache/tlb struct definition macros")
    Suggested-by: Ard Biesheuvel <ardb@kernel.org>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ceaa85c331d30752af3b88d280cc1bcaee2eb27
Author: Lexi Shao <shaolexi@huawei.com>
Date:   Thu Sep 23 03:41:25 2021 +0100

    ARM: 9132/1: Fix __get_user_check failure with ARM KASAN images
    
    commit df909df0770779f1a5560c2bb641a2809655ef28 upstream.
    
    ARM: kasan: Fix __get_user_check failure with kasan
    
    In macro __get_user_check defined in arch/arm/include/asm/uaccess.h,
    error code is store in register int __e(r0). When kasan is
    enabled, assigning value to kernel address might trigger kasan check,
    which unexpectedly overwrites r0 and causes undefined behavior on arm
    kasan images.
    
    One example is failure in do_futex and results in process soft lockup.
    Log:
    watchdog: BUG: soft lockup - CPU#0 stuck for 62946ms! [rs:main
    Q:Reg:1151]
    ...
    (__asan_store4) from (futex_wait_setup+0xf8/0x2b4)
    (futex_wait_setup) from (futex_wait+0x138/0x394)
    (futex_wait) from (do_futex+0x164/0xe40)
    (do_futex) from (sys_futex_time32+0x178/0x230)
    (sys_futex_time32) from (ret_fast_syscall+0x0/0x50)
    
    The soft lockup happens in function futex_wait_setup. The reason is
    function get_futex_value_locked always return EINVAL, thus pc jump
    back to retry label and causes looping.
    
    This line in function get_futex_value_locked
            ret = __get_user(*dest, from);
    is expanded to
            *dest = (typeof(*(p))) __r2; ,
    in macro __get_user_check. Writing to pointer dest triggers kasan check
    and overwrites the return value of __get_user_x function.
    The assembly code of get_futex_value_locked in kernel/futex.c:
    ...
    c01f6dc8:       eb0b020e        bl      c04b7608 <__get_user_4>
    // "x = (typeof(*(p))) __r2;" triggers kasan check and r0 is overwritten
    c01f6dCc:       e1a00007        mov     r0, r7
    c01f6dd0:       e1a05002        mov     r5, r2
    c01f6dd4:       eb04f1e6        bl      c0333574 <__asan_store4>
    c01f6dd8:       e5875000        str     r5, [r7]
    // save ret value of __get_user(*dest, from), which is dest address now
    c01f6ddc:       e1a05000        mov     r5, r0
    ...
    // checking return value of __get_user failed
    c01f6e00:       e3550000        cmp     r5, #0
    ...
    c01f6e0c:       01a00005        moveq   r0, r5
    // assign return value to EINVAL
    c01f6e10:       13e0000d        mvnne   r0, #13
    
    Return value is the destination address of get_user thus certainly
    non-zero, so get_futex_value_locked always return EINVAL.
    
    Fix it by using a tmp vairable to store the error code before the
    assignment. This fix has no effects to non-kasan images thanks to compiler
    optimization. It only affects cases that overwrite r0 due to kasan check.
    
    This should fix bug discussed in Link:
    [1] https://lore.kernel.org/linux-arm-kernel/0ef7c2a5-5d8b-c5e0-63fa-31693fd4495c@gmail.com/
    
    Fixes: 421015713b30 ("ARM: 9017/2: Enable KASan for ARM")
    Signed-off-by: Lexi Shao <shaolexi@huawei.com>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
