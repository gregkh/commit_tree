commit a03957ab0fd5d7d03b512a72ab9106a1749f556e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 2 09:59:01 2019 +0200

    Linux 4.19.38

commit 5cb299c806516b7f22dd9c5fe4f50ca85320b07b
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Wed Dec 12 16:03:10 2018 +0200

    powerpc/fsl: Add FSL_PPC_BOOK3E as supported arch for nospectre_v2 boot arg
    
    commit e59f5bd759b7dee57593c5b6c0441609bda5d530 upstream.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53db652324283624970355fab09c3bc4190c57e6
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Apr 19 16:52:19 2019 -0700

    net/tls: don't leak IV and record seq when offload fails
    
    [ Upstream commit 12c7686111326148b4b5db189130522a4ad1be4a ]
    
    When device refuses the offload in tls_set_device_offload_rx()
    it calls tls_sw_free_resources_rx() to clean up software context
    state.
    
    Unfortunately, tls_sw_free_resources_rx() does not free all
    the state tls_set_sw_offload() allocated - it leaks IV and
    sequence number buffers.  All other code paths which lead to
    tls_sw_release_resources_rx() (which tls_sw_free_resources_rx()
    calls) free those right before the call.
    
    Avoid the leak by moving freeing of iv and rec_seq into
    tls_sw_release_resources_rx().
    
    Fixes: 4799ac81e52a ("tls: Add rx inline crypto offload")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3bdd359fa53c1d577bc96677474c43bfb9090bd
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Apr 19 16:51:38 2019 -0700

    net/tls: avoid potential deadlock in tls_set_device_offload_rx()
    
    [ Upstream commit 62ef81d5632634d5e310ed25b9b940b2b6612b46 ]
    
    If device supports offload, but offload fails tls_set_device_offload_rx()
    will call tls_sw_free_resources_rx() which (unhelpfully) releases
    and reacquires the socket lock.
    
    For a small fix release and reacquire the device_offload_lock.
    
    Fixes: 4799ac81e52a ("tls: Add rx inline crypto offload")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 041b3224e8f848b2024cae470ea49c46db92ffd3
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Fri Mar 15 16:41:43 2019 +0200

    net/mlx5e: Fix use-after-free after xdp_return_frame
    
    [ Upstream commit 12fc512f5741443a03adde2ead20724da8ad550a ]
    
    xdp_return_frame releases the frame. It leads to releasing the page, so
    it's not allowed to access xdpi.xdpf->len after that, because xdpi.xdpf
    is at xdp->data_hard_start after convert_to_xdp_frame. This patch moves
    the memory access to precede the return of the frame.
    
    Fixes: 58b99ee3e3ebe ("net/mlx5e: Add support for XDP_REDIRECT in device-out side")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae6b07107458435fd9f782c800f859534e9bc097
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Mon Apr 8 15:12:45 2019 +0300

    net/mlx5e: Fix the max MTU check in case of XDP
    
    [ Upstream commit d460c2718906252a2a69bc6f89b537071f792e6e ]
    
    MLX5E_XDP_MAX_MTU was calculated incorrectly. It didn't account for
    NET_IP_ALIGN and MLX5E_HW2SW_MTU, and it also misused MLX5_SKB_FRAG_SZ.
    This commit fixes the calculations and adds a brief explanation for the
    formula used.
    
    Fixes: a26a5bdf3ee2d ("net/mlx5e: Restrict the combination of large MTU and XDP")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b08774d38882237bbfe953dbcf1f167e8473c50a
Author: Petr Machata <petrm@mellanox.com>
Date:   Thu Apr 18 07:14:13 2019 +0000

    mlxsw: spectrum: Put MC TCs into DWRR mode
    
    [ Upstream commit f476b3f809fa02f47af6333ed63715058c3fc348 ]
    
    Both Spectrum-1 and Spectrum-2 chips are currently configured such that
    pairs of TC n (which is used for UC traffic) and TC n+8 (which is used
    for MC traffic) are feeding into the same subgroup. Strict
    prioritization is configured between the two TCs, and by enabling
    MC-aware mode on the switch, the lower-numbered (UC) TCs are favored
    over the higher-numbered (MC) TCs.
    
    On Spectrum-2 however, there is an issue in configuration of the
    MC-aware mode. As a result, MC traffic is prioritized over UC traffic.
    To work around the issue, configure the MC TCs with DWRR mode (while
    keeping the UC TCs in strict mode).
    
    With this patch, the multicast-unicast arbitration results in the same
    behavior on both Spectrum-1 and Spectrum-2 chips.
    
    Fixes: 7b8195306694 ("mlxsw: spectrum: Configure MC-aware mode on mlxsw ports")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21e47998d95973548778cafbb3fc44f92878a316
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Apr 18 07:14:14 2019 +0000

    mlxsw: pci: Reincrease PCI reset timeout
    
    [ Upstream commit 1ab3030193d25878b3b1409060e1e0a879800c95 ]
    
    During driver initialization the driver sends a reset to the device and
    waits for the firmware to signal that it is ready to continue.
    
    Commit d2f372ba0914 ("mlxsw: pci: Increase PCI SW reset timeout")
    increased the timeout to 13 seconds due to longer PHY calibration in
    Spectrum-2 compared to Spectrum-1.
    
    Recently it became apparent that this timeout is too short and therefore
    this patch increases it again to a safer limit that will be reduced in
    the future.
    
    Fixes: c3ab435466d5 ("mlxsw: spectrum: Extend to support Spectrum-2 ASIC")
    Fixes: d2f372ba0914 ("mlxsw: pci: Increase PCI SW reset timeout")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e875a409594b8e3e0c3f69182f7a0ece5aa3c164
Author: Jun Xiao <xiaojun2@hisilicon.com>
Date:   Tue Apr 23 00:48:57 2019 +0800

    net: hns: Fix WARNING when hns modules installed
    
    Commit dfdf26babc98 upstream
    
    this patch need merge to 4.19.y stable kernel
    
    Fix Conflict:already fixed the confilct dfdf26babc98 with Yonglong Liu
    
    stable candidate:user cannot connect to the internet via hns dev
    by default setting without this patch
    
    we have already verified this patch on kunpeng916 platform,
    and it works well.
    
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Jun Xiao <xiaojun2@hisilicon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ce836e8a963fb1a2dc24b49cfe0aba6327b61bf
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Apr 19 14:31:00 2019 +0800

    team: fix possible recursive locking when add slaves
    
    [ Upstream commit 925b0c841e066b488cc3a60272472b2c56300704 ]
    
    If we add a bond device which is already the master of the team interface,
    we will hold the team->lock in team_add_slave() first and then request the
    lock in team_set_mac_address() again. The functions are called like:
    
    - team_add_slave()
     - team_port_add()
       - team_port_enter()
         - team_modeop_port_enter()
           - __set_port_dev_addr()
             - dev_set_mac_address()
               - bond_set_mac_address()
                 - dev_set_mac_address()
                   - team_set_mac_address
    
    Although team_upper_dev_link() would check the upper devices but it is
    called too late. Fix it by adding a checking before processing the slave.
    
    v2: Do not split the string in netdev_err()
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f78e75e85bb8eb6b348f980168479f746bbe933
Author: Su Bao Cheng <baocheng.su@siemens.com>
Date:   Thu Apr 18 11:14:56 2019 +0200

    stmmac: pci: Adjust IOT2000 matching
    
    [ Upstream commit e0c1d14a1a3211dccf0540a6703ffbd5d2a75bdb ]
    
    Since there are more IOT2040 variants with identical hardware but
    different asset tags, the asset tag matching should be adjusted to
    support them.
    
    For the board name "SIMATIC IOT2000", currently there are 2 types of
    hardware, IOT2020 and IOT2040. The IOT2020 is identified by its unique
    asset tag. Match on it first. If we then match on the board name only,
    we will catch all IOT2040 variants. In the future there will be no other
    devices with the "SIMATIC IOT2000" DMI board name but different
    hardware.
    
    Signed-off-by: Su Bao Cheng <baocheng.su@siemens.com>
    Reviewed-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e97f0bc7be88b00baeecc0b7c46ca3a0ff85d2a4
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Apr 17 10:51:19 2019 -0700

    net/tls: fix refcount adjustment in fallback
    
    [ Upstream commit 9188d5ca454fd665145904267e726e9e8d122f5c ]
    
    Unlike atomic_add(), refcount_add() does not deal well
    with a negative argument.  TLS fallback code reallocates
    the skb and is very likely to shrink the truesize, leading to:
    
    [  189.513254] WARNING: CPU: 5 PID: 0 at lib/refcount.c:81 refcount_add_not_zero_checked+0x15c/0x180
     Call Trace:
      refcount_add_checked+0x6/0x40
      tls_enc_skb+0xb93/0x13e0 [tls]
    
    Once wmem_allocated count saturates the application can no longer
    send data on the socket.  This is similar to Eric's fixes for GSO,
    TCP:
    commit 7ec318feeed1 ("tcp: gso: avoid refcount_t warning from tcp_gso_segment()")
    and UDP:
    commit 575b65bc5bff ("udp: avoid refcount_t saturation in __udp_gso_segment()").
    
    Unlike the GSO case, for TLS fallback it's likely that the skb has
    shrunk, so the "likely" annotation is the other way around (likely
    branch being "sub").
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: John Hurley <john.hurley@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b02f8aa856040a2d049e07d31a5c606a6f077731
Author: Vinod Koul <vkoul@kernel.org>
Date:   Mon Apr 22 15:15:32 2019 +0530

    net: stmmac: move stmmac_check_ether_addr() to driver probe
    
    [ Upstream commit b561af36b1841088552464cdc3f6371d92f17710 ]
    
    stmmac_check_ether_addr() checks the MAC address and assigns one in
    driver open(). In many cases when we create slave netdevice, the dev
    addr is inherited from master but the master dev addr maybe NULL at
    that time, so move this call to driver probe so that address is
    always valid.
    
    Signed-off-by: Xiaofei Shen <xiaofeis@codeaurora.org>
    Tested-by: Xiaofei Shen <xiaofeis@codeaurora.org>
    Signed-off-by: Sneh Shah <snehshah@codeaurora.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7b10dfe6c31339849558a6cbaa5477eab03da02
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 05:35:00 2019 -0700

    net/rose: fix unbound loop in rose_loopback_timer()
    
    [ Upstream commit 0453c682459583910d611a96de928f4442205493 ]
    
    This patch adds a limit on the number of skbs that fuzzers can queue
    into loopback_queue. 1000 packets for rose loopback seems more than enough.
    
    Then, since we now have multiple cpus in most linux hosts,
    we also need to limit the number of skbs rose_loopback_timer()
    can dequeue at each round.
    
    rose_loopback_queue() can be drop-monitor friendly, calling
    consume_skb() or kfree_skb() appropriately.
    
    Finally, use mod_timer() instead of del_timer() + add_timer()
    
    syzbot report was :
    
    rcu: INFO: rcu_preempt self-detected stall on CPU
    rcu:    0-...!: (10499 ticks this GP) idle=536/1/0x4000000000000002 softirq=103291/103291 fqs=34
    rcu:     (t=10500 jiffies g=140321 q=323)
    rcu: rcu_preempt kthread starved for 10426 jiffies! g140321 f0x0 RCU_GP_WAIT_FQS(5) ->state=0x402 ->cpu=1
    rcu: RCU grace-period kthread stack dump:
    rcu_preempt     I29168    10      2 0x80000000
    Call Trace:
     context_switch kernel/sched/core.c:2877 [inline]
     __schedule+0x813/0x1cc0 kernel/sched/core.c:3518
     schedule+0x92/0x180 kernel/sched/core.c:3562
     schedule_timeout+0x4db/0xfd0 kernel/time/timer.c:1803
     rcu_gp_fqs_loop kernel/rcu/tree.c:1971 [inline]
     rcu_gp_kthread+0x962/0x17b0 kernel/rcu/tree.c:2128
     kthread+0x357/0x430 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    NMI backtrace for cpu 0
    CPU: 0 PID: 7632 Comm: kworker/0:4 Not tainted 5.1.0-rc5+ #172
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events iterate_cleanup_work
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     nmi_cpu_backtrace.cold+0x63/0xa4 lib/nmi_backtrace.c:101
     nmi_trigger_cpumask_backtrace+0x1be/0x236 lib/nmi_backtrace.c:62
     arch_trigger_cpumask_backtrace+0x14/0x20 arch/x86/kernel/apic/hw_nmi.c:38
     trigger_single_cpu_backtrace include/linux/nmi.h:164 [inline]
     rcu_dump_cpu_stacks+0x183/0x1cf kernel/rcu/tree.c:1223
     print_cpu_stall kernel/rcu/tree.c:1360 [inline]
     check_cpu_stall kernel/rcu/tree.c:1434 [inline]
     rcu_pending kernel/rcu/tree.c:3103 [inline]
     rcu_sched_clock_irq.cold+0x500/0xa4a kernel/rcu/tree.c:2544
     update_process_times+0x32/0x80 kernel/time/timer.c:1635
     tick_sched_handle+0xa2/0x190 kernel/time/tick-sched.c:161
     tick_sched_timer+0x47/0x130 kernel/time/tick-sched.c:1271
     __run_hrtimer kernel/time/hrtimer.c:1389 [inline]
     __hrtimer_run_queues+0x33e/0xde0 kernel/time/hrtimer.c:1451
     hrtimer_interrupt+0x314/0x770 kernel/time/hrtimer.c:1509
     local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1035 [inline]
     smp_apic_timer_interrupt+0x120/0x570 arch/x86/kernel/apic/apic.c:1060
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:807
    RIP: 0010:__sanitizer_cov_trace_pc+0x0/0x50 kernel/kcov.c:95
    Code: 89 25 b4 6e ec 08 41 bc f4 ff ff ff e8 cd 5d ea ff 48 c7 05 9e 6e ec 08 00 00 00 00 e9 a4 e9 ff ff 90 90 90 90 90 90 90 90 90 <55> 48 89 e5 48 8b 75 08 65 48 8b 04 25 00 ee 01 00 65 8b 15 c8 60
    RSP: 0018:ffff8880ae807ce0 EFLAGS: 00000286 ORIG_RAX: ffffffffffffff13
    RAX: ffff88806fd40640 RBX: dffffc0000000000 RCX: ffffffff863fbc56
    RDX: 0000000000000100 RSI: ffffffff863fbc1d RDI: ffff88808cf94228
    RBP: ffff8880ae807d10 R08: ffff88806fd40640 R09: ffffed1015d00f8b
    R10: ffffed1015d00f8a R11: 0000000000000003 R12: ffff88808cf941c0
    R13: 00000000fffff034 R14: ffff8882166cd840 R15: 0000000000000000
     rose_loopback_timer+0x30d/0x3f0 net/rose/rose_loopback.c:91
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:293
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1027
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed1866aa608a0020a1412ef6c6c589d6ea46a300
Author: Zhu Yanjun <yanjun.zhu@oracle.com>
Date:   Wed Apr 24 02:56:42 2019 -0400

    net: rds: exchange of 8K and 1M pool
    
    [ Upstream commit 4b9fc7146249a6e0e3175d0acc033fdcd2bfcb17 ]
    
    Before the commit 490ea5967b0d ("RDS: IB: move FMR code to its own file"),
    when the dirty_count is greater than 9/10 of max_items of 8K pool,
    1M pool is used, Vice versa. After the commit 490ea5967b0d ("RDS: IB: move
    FMR code to its own file"), the above is removed. When we make the
    following tests.
    
    Server:
      rds-stress -r 1.1.1.16 -D 1M
    
    Client:
      rds-stress -r 1.1.1.14 -s 1.1.1.16 -D 1M
    
    The following will appear.
    "
    connecting to 1.1.1.16:4000
    negotiated options, tasks will start in 2 seconds
    Starting up..header from 1.1.1.166:4001 to id 4001 bogus
    ..
    tsks  tx/s  rx/s tx+rx K/s  mbi K/s  mbo K/s tx us/c  rtt us
    cpu %
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
    ...
    "
    So this exchange between 8K and 1M pool is added back.
    
    Fixes: commit 490ea5967b0d ("RDS: IB: move FMR code to its own file")
    Signed-off-by: Zhu Yanjun <yanjun.zhu@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7da11d6a5d85ab3f4d28fa660d8c90566fdaa1e6
Author: Erez Alfasi <ereza@mellanox.com>
Date:   Thu Apr 11 10:41:03 2019 +0300

    net/mlx5e: ethtool, Remove unsupported SFP EEPROM high pages query
    
    [ Upstream commit ace329f4ab3ba434be2adf618073c752d083b524 ]
    
    Querying EEPROM high pages data for SFP module is currently
    not supported by our driver and yet queried, resulting in
    invalid FW queries.
    
    Set the EEPROM ethtool data length to 256 for SFP module will
    limit the reading for page 0 only and prevent invalid FW queries.
    
    Fixes: bb64143eee8c ("net/mlx5e: Add ethtool support for dump module EEPROM")
    Signed-off-by: Erez Alfasi <ereza@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 829fd9849e4480e08241cdb56c5086c3979e5d67
Author: Amit Cohen <amitc@mellanox.com>
Date:   Thu Apr 18 07:14:16 2019 +0000

    mlxsw: spectrum: Fix autoneg status in ethtool
    
    [ Upstream commit 151f0dddbbfe4c35c9c5b64873115aafd436af9d ]
    
    If link is down and autoneg is set to on/off, the status in ethtool does
    not change.
    
    The reason is when the link is down the function returns with zero
    before changing autoneg value.
    
    Move the checking of link state (up/down) to be performed after setting
    autoneg value, in order to be sure that autoneg will change in any case.
    
    Fixes: 56ade8fe3fe1 ("mlxsw: spectrum: Add initial support for Spectrum ASIC")
    Signed-off-by: Amit Cohen <amitc@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 250e51f856e1534e3e769add508f121966030462
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Apr 16 09:47:24 2019 +0800

    ipv4: set the tcp_min_rtt_wlen range from 0 to one day
    
    [ Upstream commit 19fad20d15a6494f47f85d869f00b11343ee5c78 ]
    
    There is a UBSAN report as below:
    UBSAN: Undefined behaviour in net/ipv4/tcp_input.c:2877:56
    signed integer overflow:
    2147483647 * 1000 cannot be represented in type 'int'
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.1.0-rc4-00058-g582549e #1
    Call Trace:
     <IRQ>
     dump_stack+0x8c/0xba
     ubsan_epilogue+0x11/0x60
     handle_overflow+0x12d/0x170
     ? ttwu_do_wakeup+0x21/0x320
     __ubsan_handle_mul_overflow+0x12/0x20
     tcp_ack_update_rtt+0x76c/0x780
     tcp_clean_rtx_queue+0x499/0x14d0
     tcp_ack+0x69e/0x1240
     ? __wake_up_sync_key+0x2c/0x50
     ? update_group_capacity+0x50/0x680
     tcp_rcv_established+0x4e2/0xe10
     tcp_v4_do_rcv+0x22b/0x420
     tcp_v4_rcv+0xfe8/0x1190
     ip_protocol_deliver_rcu+0x36/0x180
     ip_local_deliver+0x15b/0x1a0
     ip_rcv+0xac/0xd0
     __netif_receive_skb_one_core+0x7f/0xb0
     __netif_receive_skb+0x33/0xc0
     netif_receive_skb_internal+0x84/0x1c0
     napi_gro_receive+0x2a0/0x300
     receive_buf+0x3d4/0x2350
     ? detach_buf_split+0x159/0x390
     virtnet_poll+0x198/0x840
     ? reweight_entity+0x243/0x4b0
     net_rx_action+0x25c/0x770
     __do_softirq+0x19b/0x66d
     irq_exit+0x1eb/0x230
     do_IRQ+0x7a/0x150
     common_interrupt+0xf/0xf
     </IRQ>
    
    It can be reproduced by:
      echo 2147483647 > /proc/sys/net/ipv4/tcp_min_rtt_wlen
    
    Fixes: f672258391b42 ("tcp: track min RTT using windowed min-filter")
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07445fea95754b79814fb65259d71bf0ef0c3be7
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 08:04:05 2019 -0700

    ipv4: add sanity checks in ipv4_link_failure()
    
    [ Upstream commit 20ff83f10f113c88d0bb74589389b05250994c16 ]
    
    Before calling __ip_options_compile(), we need to ensure the network
    header is a an IPv4 one, and that it is already pulled in skb->head.
    
    RAW sockets going through a tunnel can end up calling ipv4_link_failure()
    with total garbage in the skb, or arbitrary lengthes.
    
    syzbot report :
    
    BUG: KASAN: stack-out-of-bounds in memcpy include/linux/string.h:355 [inline]
    BUG: KASAN: stack-out-of-bounds in __ip_options_echo+0x294/0x1120 net/ipv4/ip_options.c:123
    Write of size 69 at addr ffff888096abf068 by task syz-executor.4/9204
    
    CPU: 0 PID: 9204 Comm: syz-executor.4 Not tainted 5.1.0-rc5+ #77
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x123/0x190 mm/kasan/generic.c:191
     memcpy+0x38/0x50 mm/kasan/common.c:133
     memcpy include/linux/string.h:355 [inline]
     __ip_options_echo+0x294/0x1120 net/ipv4/ip_options.c:123
     __icmp_send+0x725/0x1400 net/ipv4/icmp.c:695
     ipv4_link_failure+0x29f/0x550 net/ipv4/route.c:1204
     dst_link_failure include/net/dst.h:427 [inline]
     vti6_xmit net/ipv6/ip6_vti.c:514 [inline]
     vti6_tnl_xmit+0x10d4/0x1c0c net/ipv6/ip6_vti.c:553
     __netdev_start_xmit include/linux/netdevice.h:4414 [inline]
     netdev_start_xmit include/linux/netdevice.h:4423 [inline]
     xmit_one net/core/dev.c:3292 [inline]
     dev_hard_start_xmit+0x1b2/0x980 net/core/dev.c:3308
     __dev_queue_xmit+0x271d/0x3060 net/core/dev.c:3878
     dev_queue_xmit+0x18/0x20 net/core/dev.c:3911
     neigh_direct_output+0x16/0x20 net/core/neighbour.c:1527
     neigh_output include/net/neighbour.h:508 [inline]
     ip_finish_output2+0x949/0x1740 net/ipv4/ip_output.c:229
     ip_finish_output+0x73c/0xd50 net/ipv4/ip_output.c:317
     NF_HOOK_COND include/linux/netfilter.h:278 [inline]
     ip_output+0x21f/0x670 net/ipv4/ip_output.c:405
     dst_output include/net/dst.h:444 [inline]
     NF_HOOK include/linux/netfilter.h:289 [inline]
     raw_send_hdrinc net/ipv4/raw.c:432 [inline]
     raw_sendmsg+0x1d2b/0x2f20 net/ipv4/raw.c:663
     inet_sendmsg+0x147/0x5d0 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xdd/0x130 net/socket.c:661
     sock_write_iter+0x27c/0x3e0 net/socket.c:988
     call_write_iter include/linux/fs.h:1866 [inline]
     new_sync_write+0x4c7/0x760 fs/read_write.c:474
     __vfs_write+0xe4/0x110 fs/read_write.c:487
     vfs_write+0x20c/0x580 fs/read_write.c:549
     ksys_write+0x14f/0x2d0 fs/read_write.c:599
     __do_sys_write fs/read_write.c:611 [inline]
     __se_sys_write fs/read_write.c:608 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:608
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458c29
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f293b44bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000458c29
    RDX: 0000000000000014 RSI: 00000000200002c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f293b44c6d4
    R13: 00000000004c8623 R14: 00000000004ded68 R15: 00000000ffffffff
    
    The buggy address belongs to the page:
    page:ffffea00025aafc0 count:0 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0x1fffc0000000000()
    raw: 01fffc0000000000 0000000000000000 ffffffff025a0101 0000000000000000
    raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888096abef80: 00 00 00 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 f2
     ffff888096abf000: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff888096abf080: 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00
                             ^
     ffff888096abf100: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00
     ffff888096abf180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4ff57d0320bf441ad5a3084b3adbba4da1d79f8
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Thu Nov 29 16:02:10 2018 +0100

    x86/fpu: Don't export __kernel_fpu_{begin,end}()
    
    commit 12209993e98c5fa1855c467f22a24e3d5b8be205 upstream.
    
    There is one user of __kernel_fpu_begin() and before invoking it,
    it invokes preempt_disable(). So it could invoke kernel_fpu_begin()
    right away. The 32bit version of arch_efi_call_virt_setup() and
    arch_efi_call_virt_teardown() does this already.
    
    The comment above *kernel_fpu*() claims that before invoking
    __kernel_fpu_begin() preemption should be disabled and that KVM is a
    good example of doing it. Well, KVM doesn't do that since commit
    
      f775b13eedee2 ("x86,kvm: move qemu/guest FPU switching out to vcpu_run")
    
    so it is not an example anymore.
    
    With EFI gone as the last user of __kernel_fpu_{begin|end}(), both can
    be made static and not exported anymore.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Rik van Riel <riel@surriel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: "Jason A. Donenfeld" <Jason@zx2c4.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Nicolai Stange <nstange@suse.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm ML <kvm@vger.kernel.org>
    Cc: linux-efi <linux-efi@vger.kernel.org>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20181129150210.2k4mawt37ow6c2vq@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 423497a96d4ac3bf00c0b90e1cbe4d632d9caef2
Author: Jan Kara <jack@suse.cz>
Date:   Tue Oct 30 15:10:47 2018 -0700

    mm: Fix warning in insert_pfn()
    
    commit f2c57d91b0d96aa13ccff4e3b178038f17b00658 upstream.
    
    In DAX mode a write pagefault can race with write(2) in the following
    way:
    
    CPU0                            CPU1
                                    write fault for mapped zero page (hole)
    dax_iomap_rw()
      iomap_apply()
        xfs_file_iomap_begin()
          - allocates blocks
        dax_iomap_actor()
          invalidate_inode_pages2_range()
            - invalidates radix tree entries in given range
                                    dax_iomap_pte_fault()
                                      grab_mapping_entry()
                                        - no entry found, creates empty
                                      ...
                                      xfs_file_iomap_begin()
                                        - finds already allocated block
                                      ...
                                      vmf_insert_mixed_mkwrite()
                                        - WARNs and does nothing because there
                                          is still zero page mapped in PTE
            unmap_mapping_pages()
    
    This race results in WARN_ON from insert_pfn() and is occasionally
    triggered by fstest generic/344. Note that the race is otherwise
    harmless as before write(2) on CPU0 is finished, we will invalidate page
    tables properly and thus user of mmap will see modified data from
    write(2) from that point on. So just restrict the warning only to the
    case when the PFN in PTE is not zero page.
    
    Link: http://lkml.kernel.org/r/20180824154542.26872-1-jack@suse.cz
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e923c6b70ce21ccdafb7f5b211ce87d6bc17a9f7
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 25 14:56:20 2019 +0100

    x86/retpolines: Disable switch jump tables when retpolines are enabled
    
    commit a9d57ef15cbe327fe54416dd194ee0ea66ae53a4 upstream.
    
    Commit ce02ef06fcf7 ("x86, retpolines: Raise limit for generating indirect
    calls from switch-case") raised the limit under retpolines to 20 switch
    cases where gcc would only then start to emit jump tables, and therefore
    effectively disabling the emission of slow indirect calls in this area.
    
    After this has been brought to attention to gcc folks [0], Martin Liska
    has then fixed gcc to align with clang by avoiding to generate switch jump
    tables entirely under retpolines. This is taking effect in gcc starting
    from stable version 8.4.0. Given kernel supports compilation with older
    versions of gcc where the fix is not being available or backported anymore,
    we need to keep the extra KBUILD_CFLAGS around for some time and generally
    set the -fno-jump-tables to align with what more recent gcc is doing
    automatically today.
    
    More than 20 switch cases are not expected to be fast-path critical, but
    it would still be good to align with gcc behavior for versions < 8.4.0 in
    order to have consistency across supported gcc versions. vmlinux size is
    slightly growing by 0.27% for older gcc. This flag is only set to work
    around affected gcc, no change for clang.
    
      [0] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86952
    
    Suggested-by: Martin Liska <mliska@suse.cz>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Jesper Dangaard Brouer <brouer@redhat.com>
    Cc: Björn Töpel<bjorn.topel@intel.com>
    Cc: Magnus Karlsson <magnus.karlsson@intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: H.J. Lu <hjl.tools@gmail.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: David S. Miller <davem@davemloft.net>
    Link: https://lkml.kernel.org/r/20190325135620.14882-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cfcff3cfb0e515d4d3ed929c372a93fdc3dc611
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Feb 21 23:19:41 2019 +0100

    x86, retpolines: Raise limit for generating indirect calls from switch-case
    
    commit ce02ef06fcf7a399a6276adb83f37373d10cbbe1 upstream.
    
    From networking side, there are numerous attempts to get rid of indirect
    calls in fast-path wherever feasible in order to avoid the cost of
    retpolines, for example, just to name a few:
    
      * 283c16a2dfd3 ("indirect call wrappers: helpers to speed-up indirect calls of builtin")
      * aaa5d90b395a ("net: use indirect call wrappers at GRO network layer")
      * 028e0a476684 ("net: use indirect call wrappers at GRO transport layer")
      * 356da6d0cde3 ("dma-mapping: bypass indirect calls for dma-direct")
      * 09772d92cd5a ("bpf: avoid retpoline for lookup/update/delete calls on maps")
      * 10870dd89e95 ("netfilter: nf_tables: add direct calls for all builtin expressions")
      [...]
    
    Recent work on XDP from Björn and Magnus additionally found that manually
    transforming the XDP return code switch statement with more than 5 cases
    into if-else combination would result in a considerable speedup in XDP
    layer due to avoidance of indirect calls in CONFIG_RETPOLINE enabled
    builds. On i40e driver with XDP prog attached, a 20-26% speedup has been
    observed [0]. Aside from XDP, there are many other places later in the
    networking stack's critical path with similar switch-case
    processing. Rather than fixing every XDP-enabled driver and locations in
    stack by hand, it would be good to instead raise the limit where gcc would
    emit expensive indirect calls from the switch under retpolines and stick
    with the default as-is in case of !retpoline configured kernels. This would
    also have the advantage that for archs where this is not necessary, we let
    compiler select the underlying target optimization for these constructs and
    avoid potential slow-downs by if-else hand-rewrite.
    
    In case of gcc, this setting is controlled by case-values-threshold which
    has an architecture global default that selects 4 or 5 (latter if target
    does not have a case insn that compares the bounds) where some arch back
    ends like arm64 or s390 override it with their own target hooks, for
    example, in gcc commit db7a90aa0de5 ("S/390: Disable prediction of indirect
    branches") the threshold pretty much disables jump tables by limit of 20
    under retpoline builds.  Comparing gcc's and clang's default code
    generation on x86-64 under O2 level with retpoline build results in the
    following outcome for 5 switch cases:
    
    * gcc with -mindirect-branch=thunk-inline -mindirect-branch-register:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400be0 <+0>:     cmp    $0x4,%edi
       0x0000000000400be3 <+3>:     ja     0x400c35 <dispatch+85>
       0x0000000000400be5 <+5>:     lea    0x915f8(%rip),%rdx        # 0x4921e4
       0x0000000000400bec <+12>:    mov    %edi,%edi
       0x0000000000400bee <+14>:    movslq (%rdx,%rdi,4),%rax
       0x0000000000400bf2 <+18>:    add    %rdx,%rax
       0x0000000000400bf5 <+21>:    callq  0x400c01 <dispatch+33>
       0x0000000000400bfa <+26>:    pause
       0x0000000000400bfc <+28>:    lfence
       0x0000000000400bff <+31>:    jmp    0x400bfa <dispatch+26>
       0x0000000000400c01 <+33>:    mov    %rax,(%rsp)
       0x0000000000400c05 <+37>:    retq
       0x0000000000400c06 <+38>:    nopw   %cs:0x0(%rax,%rax,1)
       0x0000000000400c10 <+48>:    jmpq   0x400c90 <fn_3>
       0x0000000000400c15 <+53>:    nopl   (%rax)
       0x0000000000400c18 <+56>:    jmpq   0x400c70 <fn_2>
       0x0000000000400c1d <+61>:    nopl   (%rax)
       0x0000000000400c20 <+64>:    jmpq   0x400c50 <fn_1>
       0x0000000000400c25 <+69>:    nopl   (%rax)
       0x0000000000400c28 <+72>:    jmpq   0x400c40 <fn_0>
       0x0000000000400c2d <+77>:    nopl   (%rax)
       0x0000000000400c30 <+80>:    jmpq   0x400cb0 <fn_4>
       0x0000000000400c35 <+85>:    push   %rax
       0x0000000000400c36 <+86>:    callq  0x40dd80 <abort>
      End of assembler dump.
    
    * clang with -mretpoline emitting search tree:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400b30 <+0>:     cmp    $0x1,%edi
       0x0000000000400b33 <+3>:     jle    0x400b44 <dispatch+20>
       0x0000000000400b35 <+5>:     cmp    $0x2,%edi
       0x0000000000400b38 <+8>:     je     0x400b4d <dispatch+29>
       0x0000000000400b3a <+10>:    cmp    $0x3,%edi
       0x0000000000400b3d <+13>:    jne    0x400b52 <dispatch+34>
       0x0000000000400b3f <+15>:    jmpq   0x400c50 <fn_3>
       0x0000000000400b44 <+20>:    test   %edi,%edi
       0x0000000000400b46 <+22>:    jne    0x400b5c <dispatch+44>
       0x0000000000400b48 <+24>:    jmpq   0x400c20 <fn_0>
       0x0000000000400b4d <+29>:    jmpq   0x400c40 <fn_2>
       0x0000000000400b52 <+34>:    cmp    $0x4,%edi
       0x0000000000400b55 <+37>:    jne    0x400b66 <dispatch+54>
       0x0000000000400b57 <+39>:    jmpq   0x400c60 <fn_4>
       0x0000000000400b5c <+44>:    cmp    $0x1,%edi
       0x0000000000400b5f <+47>:    jne    0x400b66 <dispatch+54>
       0x0000000000400b61 <+49>:    jmpq   0x400c30 <fn_1>
       0x0000000000400b66 <+54>:    push   %rax
       0x0000000000400b67 <+55>:    callq  0x40dd20 <abort>
      End of assembler dump.
    
      For sake of comparison, clang without -mretpoline:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400b30 <+0>:     cmp    $0x4,%edi
       0x0000000000400b33 <+3>:     ja     0x400b57 <dispatch+39>
       0x0000000000400b35 <+5>:     mov    %edi,%eax
       0x0000000000400b37 <+7>:     jmpq   *0x492148(,%rax,8)
       0x0000000000400b3e <+14>:    jmpq   0x400bf0 <fn_0>
       0x0000000000400b43 <+19>:    jmpq   0x400c30 <fn_4>
       0x0000000000400b48 <+24>:    jmpq   0x400c10 <fn_2>
       0x0000000000400b4d <+29>:    jmpq   0x400c20 <fn_3>
       0x0000000000400b52 <+34>:    jmpq   0x400c00 <fn_1>
       0x0000000000400b57 <+39>:    push   %rax
       0x0000000000400b58 <+40>:    callq  0x40dcf0 <abort>
      End of assembler dump.
    
    Raising the cases to a high number (e.g. 100) will still result in similar
    code generation pattern with clang and gcc as above, in other words clang
    generally turns off jump table emission by having an extra expansion pass
    under retpoline build to turn indirectbr instructions from their IR into
    switch instructions as a built-in -mno-jump-table lowering of a switch (in
    this case, even if IR input already contained an indirect branch).
    
    For gcc, adding --param=case-values-threshold=20 as in similar fashion as
    s390 in order to raise the limit for x86 retpoline enabled builds results
    in a small vmlinux size increase of only 0.13% (before=18,027,528
    after=18,051,192). For clang this option is ignored due to i) not being
    needed as mentioned and ii) not having above cmdline
    parameter. Non-retpoline-enabled builds with gcc continue to use the
    default case-values-threshold setting, so nothing changes here.
    
    [0] https://lore.kernel.org/netdev/20190129095754.9390-1-bjorn.topel@gmail.com/
        and "The Path to DPDK Speeds for AF_XDP", LPC 2018, networking track:
      - http://vger.kernel.org/lpc_net2018_talks/lpc18_pres_af_xdp_perf-v3.pdf
      - http://vger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Björn Töpel <bjorn.topel@intel.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: netdev@vger.kernel.org
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Magnus Karlsson <magnus.karlsson@intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20190221221941.29358-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9e47779aaa7212ccb75f8d8d4d16ab188efb313
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 7 21:45:41 2019 -0500

    Fix aio_poll() races
    
    commit af5c72b1fc7a00aa484e90b0c4e0eeb582545634 upstream.
    
    aio_poll() has to cope with several unpleasant problems:
            * requests that might stay around indefinitely need to
    be made visible for io_cancel(2); that must not be done to
    a request already completed, though.
            * in cases when ->poll() has placed us on a waitqueue,
    wakeup might have happened (and request completed) before ->poll()
    returns.
            * worse, in some early wakeup cases request might end
    up re-added into the queue later - we can't treat "woken up and
    currently not in the queue" as "it's not going to stick around
    indefinitely"
            * ... moreover, ->poll() might have decided not to
    put it on any queues to start with, and that needs to be distinguished
    from the previous case
            * ->poll() might have tried to put us on more than one queue.
    Only the first will succeed for aio poll, so we might end up missing
    wakeups.  OTOH, we might very well notice that only after the
    wakeup hits and request gets completed (all before ->poll() gets
    around to the second poll_wait()).  In that case it's too late to
    decide that we have an error.
    
    req->woken was an attempt to deal with that.  Unfortunately, it was
    broken.  What we need to keep track of is not that wakeup has happened -
    the thing might come back after that.  It's that async reference is
    already gone and won't come back, so we can't (and needn't) put the
    request on the list of cancellables.
    
    The easiest case is "request hadn't been put on any waitqueues"; we
    can tell by seeing NULL apt.head, and in that case there won't be
    anything async.  We should either complete the request ourselves
    (if vfs_poll() reports anything of interest) or return an error.
    
    In all other cases we get exclusion with wakeups by grabbing the
    queue lock.
    
    If request is currently on queue and we have something interesting
    from vfs_poll(), we can steal it and complete the request ourselves.
    
    If it's on queue and vfs_poll() has not reported anything interesting,
    we either put it on the cancellable list, or, if we know that it
    hadn't been put on all queues ->poll() wanted it on, we steal it and
    return an error.
    
    If it's _not_ on queue, it's either been already dealt with (in which
    case we do nothing), or there's aio_poll_complete_work() about to be
    executed.  In that case we either put it on the cancellable list,
    or, if we know it hadn't been put on all queues ->poll() wanted it on,
    simulate what cancel would've done.
    
    It's a lot more convoluted than I'd like it to be.  Single-consumer APIs
    suck, and unfortunately aio is not an exception...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aab66dfb757aa5b211ec6b0c322b42f4ef5ab34f
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 7 19:49:55 2019 -0500

    aio: store event at final iocb_put()
    
    commit 2bb874c0d873d13bd9b9b9c6d7b7c4edab18c8b4 upstream.
    
    Instead of having aio_complete() set ->ki_res.{res,res2}, do that
    explicitly in its callers, drop the reference (as aio_complete()
    used to do) and delay the rest until the final iocb_put().
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c20202c51d2b6703a4e539235f892f34daabd791
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 7 19:43:45 2019 -0500

    aio: keep io_event in aio_kiocb
    
    commit a9339b7855094ba11a97e8822ae038135e879e79 upstream.
    
    We want to separate forming the resulting io_event from putting it
    into the ring buffer.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 592ea630b081a6c97ec56499b0e12f68fd2da2d8
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Mar 11 19:00:36 2019 -0400

    aio: fold lookup_kiocb() into its sole caller
    
    commit 833f4154ed560232120bc475935ee1d6a20e159f upstream.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7f2525abfecf8a57a1417837b6a809df79b299e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 6 20:22:54 2019 -0500

    pin iocb through aio.
    
    commit b53119f13a04879c3bf502828d99d13726639ead upstream.
    
    aio_poll() is not the only case that needs file pinned; worse, while
    aio_read()/aio_write() can live without pinning iocb itself, the
    proof is rather brittle and can easily break on later changes.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6b2615f7d31d8e58b685d42dbafcc7dc1204bbd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 3 14:23:33 2019 -0800

    aio: simplify - and fix - fget/fput for io_submit()
    
    commit 84c4e1f89fefe70554da0ab33be72c9be7994379 upstream.
    
    Al Viro root-caused a race where the IOCB_CMD_POLL handling of
    fget/fput() could cause us to access the file pointer after it had
    already been freed:
    
     "In more details - normally IOCB_CMD_POLL handling looks so:
    
       1) io_submit(2) allocates aio_kiocb instance and passes it to
          aio_poll()
    
       2) aio_poll() resolves the descriptor to struct file by req->file =
          fget(iocb->aio_fildes)
    
       3) aio_poll() sets ->woken to false and raises ->ki_refcnt of that
          aio_kiocb to 2 (bumps by 1, that is).
    
       4) aio_poll() calls vfs_poll(). After sanity checks (basically,
          "poll_wait() had been called and only once") it locks the queue.
          That's what the extra reference to iocb had been for - we know we
          can safely access it.
    
       5) With queue locked, we check if ->woken has already been set to
          true (by aio_poll_wake()) and, if it had been, we unlock the
          queue, drop a reference to aio_kiocb and bugger off - at that
          point it's a responsibility to aio_poll_wake() and the stuff
          called/scheduled by it. That code will drop the reference to file
          in req->file, along with the other reference to our aio_kiocb.
    
       6) otherwise, we see whether we need to wait. If we do, we unlock the
          queue, drop one reference to aio_kiocb and go away - eventual
          wakeup (or cancel) will deal with the reference to file and with
          the other reference to aio_kiocb
    
       7) otherwise we remove ourselves from waitqueue (still under the
          queue lock), so that wakeup won't get us. No async activity will
          be happening, so we can safely drop req->file and iocb ourselves.
    
      If wakeup happens while we are in vfs_poll(), we are fine - aio_kiocb
      won't get freed under us, so we can do all the checks and locking
      safely. And we don't touch ->file if we detect that case.
    
      However, vfs_poll() most certainly *does* touch the file it had been
      given. So wakeup coming while we are still in ->poll() might end up
      doing fput() on that file. That case is not too rare, and usually we
      are saved by the still present reference from descriptor table - that
      fput() is not the final one.
    
      But if another thread closes that descriptor right after our fget()
      and wakeup does happen before ->poll() returns, we are in trouble -
      final fput() done while we are in the middle of a method:
    
    Al also wrote a patch to take an extra reference to the file descriptor
    to fix this, but I instead suggested we just streamline the whole file
    pointer handling by submit_io() so that the generic aio submission code
    simply keeps the file pointer around until the aio has completed.
    
    Fixes: bfe4037e722e ("aio: implement IOCB_CMD_POLL")
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Reported-by: syzbot+503d4cc169fcec1cb18c@syzkaller.appspotmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2afa01cd9186974051b38b7d1f31bb2407e41e3a
Author: Mike Marshall <hubcap@omnibond.com>
Date:   Tue Feb 5 14:13:35 2019 -0500

    aio: initialize kiocb private in case any filesystems expect it.
    
    commit ec51f8ee1e63498e9f521ec0e5a6d04622bb2c67 upstream.
    
    A recent optimization had left private uninitialized.
    
    Fixes: 2bc4ca9bb600 ("aio: don't zero entire aio_kiocb aio_get_req()")
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a812f7b68a3940e0369fd0fb24febec794a67623
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Nov 20 20:06:23 2018 -0700

    aio: abstract out io_event filler helper
    
    commit 875736bb3f3ded168469f6a14df7a938416a99d5 upstream.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d384f8b855a573ea301fd7f5558cc64cb22107e6
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sat Nov 24 14:46:14 2018 -0700

    aio: split out iocb copy from io_submit_one()
    
    commit 88a6f18b950e2e4dce57d31daa151105f4f3dcff upstream.
    
    In preparation of handing in iocbs in a different fashion as well. Also
    make it clear that the iocb being passed in isn't modified, by marking
    it const throughout.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d677689742ab60d5be46e20708276368564427a
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sat Nov 24 21:33:09 2018 -0700

    aio: use iocb_put() instead of open coding it
    
    commit 71ebc6fef0f53459f37fb39e1466792232fa52ee upstream.
    
    Replace the percpu_ref_put() + kmem_cache_free() with a call to
    iocb_put() instead.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef529eead8cfc11c051b90d239e7137f7141ea94
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Dec 4 09:44:49 2018 -0700

    aio: don't zero entire aio_kiocb aio_get_req()
    
    commit 2bc4ca9bb600cbe36941da2b2a67189fc4302a04 upstream.
    
    It's 192 bytes, fairly substantial. Most items don't need to be cleared,
    especially not upfront. Clear the ones we do need to clear, and leave
    the other ones for setup when the iocb is prepared and submitted.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 730198c889d85db78058cfb57c1b41c65f55c94e
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Nov 19 15:57:42 2018 -0700

    aio: separate out ring reservation from req allocation
    
    commit 432c79978c33ecef91b1b04cea6936c20810da29 upstream.
    
    This is in preparation for certain types of IO not needing a ring
    reserveration.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3373253f0bab538a7521537dfcb73e731b3d732
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Nov 6 14:27:13 2018 -0700

    aio: use assigned completion handler
    
    commit bc9bff61624ac33b7c95861abea1af24ee7a94fc upstream.
    
    We know this is a read/write request, but in preparation for
    having different kinds of those, ensure that we call the assigned
    handler instead of assuming it's aio_complete_rq().
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9101cbe70ef64c7f35fb75552005a3a696cc288e
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Nov 22 16:44:07 2018 +0100

    aio: clear IOCB_HIPRI
    
    commit 154989e45fd8de9bfb52bbd6e5ea763e437e54c5 upstream.
    
    No one is going to poll for aio (yet), so we must clear the HIPRI
    flag, as we would otherwise send it down the poll queues, where no
    one will be polling for completions.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    
    IOCB_HIPRI, not RWF_HIPRI.
    
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 920ecc72093d3747ed4e9a747cd4f54ba62df559
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 09:44:11 2019 -0700

    rxrpc: fix race condition in rxrpc_input_packet()
    
    commit 032be5f19a94de51093851757089133dcc1e92aa upstream.
    
    After commit 5271953cad31 ("rxrpc: Use the UDP encap_rcv hook"),
    rxrpc_input_packet() is directly called from lockless UDP receive
    path, under rcu_read_lock() protection.
    
    It must therefore use RCU rules :
    
    - udp_sk->sk_user_data can be cleared at any point in this function.
      rcu_dereference_sk_user_data() is what we need here.
    
    - Also, since sk_user_data might have been set in rxrpc_open_socket()
      we must observe a proper RCU grace period before kfree(local) in
      rxrpc_lookup_local()
    
    v4: @local can be NULL in xrpc_lookup_local() as reported by kbuild test robot <lkp@intel.com>
            and Julia Lawall <julia.lawall@lip6.fr>, thanks !
    
    v3,v2 : addressed David Howells feedback, thanks !
    
    syzbot reported :
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 19236 Comm: syz-executor703 Not tainted 5.1.0-rc6 #79
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__lock_acquire+0xbef/0x3fb0 kernel/locking/lockdep.c:3573
    Code: 00 0f 85 a5 1f 00 00 48 81 c4 10 01 00 00 5b 41 5c 41 5d 41 5e 41 5f 5d c3 48 b8 00 00 00 00 00 fc ff df 4c 89 ea 48 c1 ea 03 <80> 3c 02 00 0f 85 4a 21 00 00 49 81 7d 00 20 54 9c 89 0f 84 cf f4
    RSP: 0018:ffff88809d7aef58 EFLAGS: 00010002
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000026 RSI: 0000000000000000 RDI: 0000000000000001
    RBP: ffff88809d7af090 R08: 0000000000000001 R09: 0000000000000001
    R10: ffffed1015d05bc7 R11: ffff888089428600 R12: 0000000000000000
    R13: 0000000000000130 R14: 0000000000000001 R15: 0000000000000001
    FS:  00007f059044d700(0000) GS:ffff8880ae800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000004b6040 CR3: 00000000955ca000 CR4: 00000000001406f0
    Call Trace:
     lock_acquire+0x16f/0x3f0 kernel/locking/lockdep.c:4211
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
     _raw_spin_lock_irqsave+0x95/0xcd kernel/locking/spinlock.c:152
     skb_queue_tail+0x26/0x150 net/core/skbuff.c:2972
     rxrpc_reject_packet net/rxrpc/input.c:1126 [inline]
     rxrpc_input_packet+0x4a0/0x5536 net/rxrpc/input.c:1414
     udp_queue_rcv_one_skb+0xaf2/0x1780 net/ipv4/udp.c:2011
     udp_queue_rcv_skb+0x128/0x730 net/ipv4/udp.c:2085
     udp_unicast_rcv_skb.isra.0+0xb9/0x360 net/ipv4/udp.c:2245
     __udp4_lib_rcv+0x701/0x2ca0 net/ipv4/udp.c:2301
     udp_rcv+0x22/0x30 net/ipv4/udp.c:2482
     ip_protocol_deliver_rcu+0x60/0x8f0 net/ipv4/ip_input.c:208
     ip_local_deliver_finish+0x23b/0x390 net/ipv4/ip_input.c:234
     NF_HOOK include/linux/netfilter.h:289 [inline]
     NF_HOOK include/linux/netfilter.h:283 [inline]
     ip_local_deliver+0x1e9/0x520 net/ipv4/ip_input.c:255
     dst_input include/net/dst.h:450 [inline]
     ip_rcv_finish+0x1e1/0x300 net/ipv4/ip_input.c:413
     NF_HOOK include/linux/netfilter.h:289 [inline]
     NF_HOOK include/linux/netfilter.h:283 [inline]
     ip_rcv+0xe8/0x3f0 net/ipv4/ip_input.c:523
     __netif_receive_skb_one_core+0x115/0x1a0 net/core/dev.c:4987
     __netif_receive_skb+0x2c/0x1c0 net/core/dev.c:5099
     netif_receive_skb_internal+0x117/0x660 net/core/dev.c:5202
     napi_frags_finish net/core/dev.c:5769 [inline]
     napi_gro_frags+0xade/0xd10 net/core/dev.c:5843
     tun_get_user+0x2f24/0x3fb0 drivers/net/tun.c:1981
     tun_chr_write_iter+0xbd/0x156 drivers/net/tun.c:2027
     call_write_iter include/linux/fs.h:1866 [inline]
     do_iter_readv_writev+0x5e1/0x8e0 fs/read_write.c:681
     do_iter_write fs/read_write.c:957 [inline]
     do_iter_write+0x184/0x610 fs/read_write.c:938
     vfs_writev+0x1b3/0x2f0 fs/read_write.c:1002
     do_writev+0x15e/0x370 fs/read_write.c:1037
     __do_sys_writev fs/read_write.c:1110 [inline]
     __se_sys_writev fs/read_write.c:1107 [inline]
     __x64_sys_writev+0x75/0xb0 fs/read_write.c:1107
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 5271953cad31 ("rxrpc: Use the UDP encap_rcv hook")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a228d5ddca2423b6e47045b9aac7df4362146a1
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Apr 12 19:51:52 2019 +0900

    net/rds: Check address length before reading address family
    
    commit dd3ac9a684358b8c1d5c432ca8322aaf5e4f28ee upstream.
    
    syzbot is reporting uninitialized value at rds_connect() [1] and
    rds_bind() [2]. This is because syzbot is passing ulen == 0 whereas
    these functions expect that it is safe to access sockaddr->family field
    in order to determine minimal address length for validation.
    
    [1] https://syzkaller.appspot.com/bug?id=f4e61c010416c1e6f0fa3ffe247561b60a50ad71
    [2] https://syzkaller.appspot.com/bug?id=a4bf9e41b7e055c3823fdcd83e8c58ca7270e38f
    
    Reported-by: syzbot <syzbot+0049bebbf3042dbd2e8f@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+915c9f99f3dbc4bd6cd1@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e30203e4f94d2ba92a54fd3662bf1517a3fb7269
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Apr 9 19:53:55 2019 +0800

    net: netrom: Fix error cleanup path of nr_proto_init
    
    commit d3706566ae3d92677b932dd156157fd6c72534b1 upstream.
    
    Syzkaller report this:
    
    BUG: unable to handle kernel paging request at fffffbfff830524b
    PGD 237fe8067 P4D 237fe8067 PUD 237e64067 PMD 1c9716067 PTE 0
    Oops: 0000 [#1] SMP KASAN PTI
    CPU: 1 PID: 4465 Comm: syz-executor.0 Not tainted 5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:__list_add_valid+0x21/0xe0 lib/list_debug.c:23
    Code: 8b 0c 24 e9 17 fd ff ff 90 55 48 89 fd 48 8d 7a 08 53 48 89 d3 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 48 83 ec 08 <80> 3c 02 00 0f 85 8b 00 00 00 48 8b 53 08 48 39 f2 75 35 48 89 f2
    RSP: 0018:ffff8881ea2278d0 EFLAGS: 00010282
    RAX: dffffc0000000000 RBX: ffffffffc1829250 RCX: 1ffff1103d444ef4
    RDX: 1ffffffff830524b RSI: ffffffff85659300 RDI: ffffffffc1829258
    RBP: ffffffffc1879250 R08: fffffbfff0acb269 R09: fffffbfff0acb269
    R10: ffff8881ea2278f0 R11: fffffbfff0acb268 R12: ffffffffc1829250
    R13: dffffc0000000000 R14: 0000000000000008 R15: ffffffffc187c830
    FS:  00007fe0361df700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: fffffbfff830524b CR3: 00000001eb39a001 CR4: 00000000007606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     __list_add include/linux/list.h:60 [inline]
     list_add include/linux/list.h:79 [inline]
     proto_register+0x444/0x8f0 net/core/sock.c:3375
     nr_proto_init+0x73/0x4b3 [netrom]
     ? 0xffffffffc1628000
     ? 0xffffffffc1628000
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe0361dec58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00007fe0361dec70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe0361df6bc
    R13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004
    Modules linked in: netrom(+) ax25 fcrypt pcbc af_alg arizona_ldo1 v4l2_common videodev media v4l2_dv_timings hdlc ide_cd_mod snd_soc_sigmadsp_regmap snd_soc_sigmadsp intel_spi_platform intel_spi mtd spi_nor snd_usbmidi_lib usbcore lcd ti_ads7950 hi6421_regulator snd_soc_kbl_rt5663_max98927 snd_soc_hdac_hdmi snd_hda_ext_core snd_hda_core snd_soc_rt5663 snd_soc_core snd_pcm_dmaengine snd_compress snd_soc_rl6231 mac80211 rtc_rc5t583 spi_slave_time leds_pwm hid_gt683r hid industrialio_triggered_buffer kfifo_buf industrialio ir_kbd_i2c rc_core led_class_flash dwc_xlgmac snd_ymfpci gameport snd_mpu401_uart snd_rawmidi snd_ac97_codec snd_pcm ac97_bus snd_opl3_lib snd_timer snd_seq_device snd_hwdep snd soundcore iptable_security iptable_raw iptable_mangle iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan
     bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel ide_pci_generic piix aesni_intel aes_x86_64 crypto_simd cryptd glue_helper ide_core psmouse input_leds i2c_piix4 serio_raw intel_agp intel_gtt ata_generic agpgart pata_acpi parport_pc rtc_cmos parport floppy sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: rxrpc]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    CR2: fffffbfff830524b
    ---[ end trace 039ab24b305c4b19 ]---
    
    If nr_proto_init failed, it may forget to call proto_unregister,
    tiggering this issue.This patch rearrange code of nr_proto_init
    to avoid such issues.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0cb0faa15f3174ac0d1c5ca401ca80b4494b21d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f21fae8049cd50d3873db21762f75a7bf950f7d2
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b9b0df4e7882638e53c55e8f556aa78915418b9
Author: Yue Haibing <yuehaibing@huawei.com>
Date:   Thu Mar 21 22:42:23 2019 +0800

    fm10k: Fix a potential NULL pointer dereference
    
    commit 01ca667133d019edc9f0a1f70a272447c84ec41f upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573
    Code: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00
    RSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080
    RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000
    R10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001
    R13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001
    FS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211
     __mutex_lock_common kernel/locking/mutex.c:925 [inline]
     __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072
     drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934
     destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc
    R13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff
    
    If alloc_workqueue fails, it should return -ENOMEM, otherwise may
    trigger this NULL pointer dereference while unloading drivers.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 0a38c17a21a0 ("fm10k: Remove create_workqueue")
    Signed-off-by: Yue Haibing <yuehaibing@huawei.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7dc13d6e4a26ee3b4edbf229abaea47b6f1aa58
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 15 00:43:00 2019 +0200

    netfilter: ebtables: CONFIG_COMPAT: drop a bogus WARN_ON
    
    commit 7caa56f006e9d712b44f27b32520c66420d5cbc6 upstream.
    
    It means userspace gave us a ruleset where there is some other
    data after the ebtables target but before the beginning of the next rule.
    
    Fixes: 81e675c227ec ("netfilter: ebtables: add CONFIG_COMPAT support")
    Reported-by: syzbot+659574e7bcc7f7eb4df7@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94ad68a6e5704b4475f4cc95dd541d21227e749b
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Mar 30 10:21:07 2019 +0900

    NFS: Forbid setting AF_INET6 to "struct sockaddr_in"->sin_family.
    
    commit 7c2bd9a39845bfb6d72ddb55ce737650271f6f96 upstream.
    
    syzbot is reporting uninitialized value at rpc_sockaddr2uaddr() [1]. This
    is because syzbot is setting AF_INET6 to "struct sockaddr_in"->sin_family
    (which is embedded into user-visible "struct nfs_mount_data" structure)
    despite nfs23_validate_mount_data() cannot pass sizeof(struct sockaddr_in6)
    bytes of AF_INET6 address to rpc_sockaddr2uaddr().
    
    Since "struct nfs_mount_data" structure is user-visible, we can't change
    "struct nfs_mount_data" to use "struct sockaddr_storage". Therefore,
    assuming that everybody is using AF_INET family when passing address via
    "struct nfs_mount_data"->addr, reject if its sin_family is not AF_INET.
    
    [1] https://syzkaller.appspot.com/bug?id=599993614e7cbbf66bc2656a919ab2a95fb5d75c
    
    Reported-by: syzbot <syzbot+047a11c361b872896a4f@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 245a94a0ffab833292985a8417be093b29ce0e8b
Author: luca abeni <luca.abeni@santannapisa.it>
Date:   Mon Mar 25 14:15:30 2019 +0100

    sched/deadline: Correctly handle active 0-lag timers
    
    commit 1b02cd6a2d7f3e2a6a5262887d2cb2912083e42f upstream.
    
    syzbot reported the following warning:
    
       [ ] WARNING: CPU: 4 PID: 17089 at kernel/sched/deadline.c:255 task_non_contending+0xae0/0x1950
    
    line 255 of deadline.c is:
    
            WARN_ON(hrtimer_active(&dl_se->inactive_timer));
    
    in task_non_contending().
    
    Unfortunately, in some cases (for example, a deadline task
    continuosly blocking and waking immediately) it can happen that
    a task blocks (and task_non_contending() is called) while the
    0-lag timer is still active.
    
    In this case, the safest thing to do is to immediately decrease
    the running bandwidth of the task, without trying to re-arm the 0-lag timer.
    
    Signed-off-by: luca abeni <luca.abeni@santannapisa.it>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Juri Lelli <juri.lelli@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: chengjian (D) <cj.chengjian@huawei.com>
    Link: https://lkml.kernel.org/r/20190325131530.34706-1-luca.abeni@santannapisa.it
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bf7d3c5c0c5dad650bfc4345ed553c18b69d59e
Author: Todd Kjos <tkjos@android.com>
Date:   Thu Feb 14 15:22:57 2019 -0800

    binder: fix handling of misaligned binder object
    
    commit 26528be6720bb40bc8844e97ee73a37e530e9c5e upstream.
    
    Fixes crash found by syzbot:
    kernel BUG at drivers/android/binder_alloc.c:LINE! (2)
    
    Reported-and-tested-by: syzbot+55de1eb4975dec156d8f@syzkaller.appspotmail.com
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable <stable@vger.kernel.org> # 5.0, 4.19, 4.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c37f7c23c02f6ac020ffdc746026c2363b23a5a
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Wed Jan 23 09:44:12 2019 +0900

    workqueue: Try to catch flush_work() without INIT_WORK().
    
    commit 4d43d395fed124631ca02356c711facb90185175 upstream.
    
    syzbot found a flush_work() caller who forgot to call INIT_WORK()
    because that work_struct was allocated by kzalloc() [1]. But the message
    
      INFO: trying to register non-static key.
      the code is fine but needs lockdep annotation.
      turning off the locking correctness validator.
    
    by lock_map_acquire() is failing to tell that INIT_WORK() is missing.
    
    Since flush_work() without INIT_WORK() is a bug, and INIT_WORK() should
    set ->func field to non-zero, let's warn if ->func field is zero.
    
    [1] https://syzkaller.appspot.com/bug?id=a5954455fcfa51c29ca2ab55b203076337e1c770
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d476a00b3f98334fd8a680dc0d813f4d82a5f3d
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Apr 25 22:24:05 2019 -0700

    fs/proc/proc_sysctl.c: Fix a NULL pointer dereference
    
    commit 89189557b47b35683a27c80ee78aef18248eefb4 upstream.
    
    Syzkaller report this:
    
      sysctl could not get directory: /net//bridge -12
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP KASAN PTI
      CPU: 1 PID: 7027 Comm: syz-executor.0 Tainted: G         C        5.1.0-rc3+ #8
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
      RIP: 0010:__write_once_size include/linux/compiler.h:220 [inline]
      RIP: 0010:__rb_change_child include/linux/rbtree_augmented.h:144 [inline]
      RIP: 0010:__rb_erase_augmented include/linux/rbtree_augmented.h:186 [inline]
      RIP: 0010:rb_erase+0x5f4/0x19f0 lib/rbtree.c:459
      Code: 00 0f 85 60 13 00 00 48 89 1a 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 89 f2 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 75 0c 00 00 4d 85 ed 4c 89 2e 74 ce 4c 89 ea 48
      RSP: 0018:ffff8881bb507778 EFLAGS: 00010206
      RAX: dffffc0000000000 RBX: ffff8881f224b5b8 RCX: ffffffff818f3f6a
      RDX: 000000000000000a RSI: 0000000000000050 RDI: ffff8881f224b568
      RBP: 0000000000000000 R08: ffffed10376a0ef4 R09: ffffed10376a0ef4
      R10: 0000000000000001 R11: ffffed10376a0ef4 R12: ffff8881f224b558
      R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
      FS:  00007f3e7ce13700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fd60fbe9398 CR3: 00000001cb55c001 CR4: 00000000007606e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       erase_entry fs/proc/proc_sysctl.c:178 [inline]
       erase_header+0xe3/0x160 fs/proc/proc_sysctl.c:207
       start_unregistering fs/proc/proc_sysctl.c:331 [inline]
       drop_sysctl_table+0x558/0x880 fs/proc/proc_sysctl.c:1631
       get_subdir fs/proc/proc_sysctl.c:1022 [inline]
       __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335
       br_netfilter_init+0x68/0x1000 [br_netfilter]
       do_one_initcall+0xbc/0x47d init/main.c:901
       do_init_module+0x1b5/0x547 kernel/module.c:3456
       load_module+0x6405/0x8c10 kernel/module.c:3804
       __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
       do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      Modules linked in: br_netfilter(+) backlight comedi(C) hid_sensor_hub max3100 ti_ads8688 udc_core fddi snd_mona leds_gpio rc_streamzap mtd pata_netcell nf_log_common rc_winfast udp_tunnel snd_usbmidi_lib snd_usb_toneport snd_usb_line6 snd_rawmidi snd_seq_device snd_hwdep videobuf2_v4l2 videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops rc_gadmei_rm008z 8250_of smm665 hid_tmff hid_saitek hwmon_vid rc_ati_tv_wonder_hd_600 rc_core pata_pdc202xx_old dn_rtmsg as3722 ad714x_i2c ad714x snd_soc_cs4265 hid_kensington panel_ilitek_ili9322 drm drm_panel_orientation_quirks ipack cdc_phonet usbcore phonet hid_jabra hid extcon_arizona can_dev industrialio_triggered_buffer kfifo_buf industrialio adm1031 i2c_mux_ltc4306 i2c_mux ipmi_msghandler mlxsw_core snd_soc_cs35l34 snd_soc_core snd_pcm_dmaengine snd_pcm snd_timer ac97_bus snd_compress snd soundcore gpio_da9055 uio ecdh_generic mdio_thunder of_mdio fixed_phy libphy mdio_cavium iptable_security iptable_raw iptable_mangle
       iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ide_pci_generic piix aes_x86_64 crypto_simd cryptd ide_core glue_helper input_leds psmouse intel_agp intel_gtt serio_raw ata_generic i2c_piix4 agpgart pata_acpi parport_pc parport floppy rtc_cmos sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: br_netfilter]
      Dumping ftrace buffer:
         (ftrace buffer empty)
      ---[ end trace 68741688d5fbfe85 ]---
    
    commit 23da9588037e ("fs/proc/proc_sysctl.c: fix NULL pointer
    dereference in put_links") forgot to handle start_unregistering() case,
    while header->parent is NULL, it calls erase_header() and as seen in the
    above syzkaller call trace, accessing &header->parent->root will trigger
    a NULL pointer dereference.
    
    As that commit explained, there is also no need to call
    start_unregistering() if header->parent is NULL.
    
    Link: http://lkml.kernel.org/r/20190409153622.28112-1-yuehaibing@huawei.com
    Fixes: 23da9588037e ("fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links")
    Fixes: 0e47c99d7fe25 ("sysctl: Replace root_list with links between sysctl_table_sets")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bce00f419c9df589b5b6d403d5229b9ccf7edf12
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Fri Mar 1 10:09:55 2019 +0200

    intel_th: gth: Fix an off-by-one in output unassigning
    
    commit 91d3f8a629849968dc91d6ce54f2d46abf4feb7f upstream.
    
    Commit 9ed3f22223c3 ("intel_th: Don't reference unassigned outputs")
    fixes a NULL dereference for all masters except the last one ("256+"),
    which keeps the stale pointer after the output driver had been unassigned.
    
    Fix the off-by-one.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 9ed3f22223c3 ("intel_th: Don't reference unassigned outputs")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c8c39bae89ab3cd6133d244fa19ee2141aabeac
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 25 16:13:58 2019 -0700

    slip: make slhc_free() silently accept an error pointer
    
    commit baf76f0c58aec435a3a864075b8f6d8ee5d1f17e upstream.
    
    This way, slhc_free() accepts what slhc_init() returns, whether that is
    an error or not.
    
    In particular, the pattern in sl_alloc_bufs() is
    
            slcomp = slhc_init(16, 16);
            ...
            slhc_free(slcomp);
    
    for the error handling path, and rather than complicate that code, just
    make it ok to always free what was returned by the init function.
    
    That's what the code used to do before commit 4ab42d78e37a ("ppp, slip:
    Validate VJ compression slot parameters completely") when slhc_init()
    just returned NULL for the error case, with no actual indication of the
    details of the error.
    
    Reported-by: syzbot+45474c076a4927533d2e@syzkaller.appspotmail.com
    Fixes: 4ab42d78e37a ("ppp, slip: Validate VJ compression slot parameters completely")
    Acked-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f41d2de6710108ec77fa8ec8077def60c6ddfc07
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Jan 12 03:54:25 2019 +0800

    USB: Consolidate LPM checks to avoid enabling LPM twice
    
    commit d7a6c0ce8d26412903c7981503bad9e1cc7c45d2 upstream.
    
    USB Bluetooth controller QCA ROME (0cf3:e007) sometimes stops working
    after S3:
    [ 165.110742] Bluetooth: hci0: using NVM file: qca/nvm_usb_00000302.bin
    [ 168.432065] Bluetooth: hci0: Failed to send body at 4 of 1953 (-110)
    
    After some experiments, I found that disabling LPM can workaround the
    issue.
    
    On some platforms, the USB power is cut during S3, so the driver uses
    reset-resume to resume the device. During port resume, LPM gets enabled
    twice, by usb_reset_and_verify_device() and usb_port_resume().
    
    Consolidate all checks into new LPM helpers to make sure LPM only gets
    enabled once.
    
    Fixes: de68bab4fa96 ("usb: Don't enable USB 2.0 Link PM by default.”)
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org> # after much soaking
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50cda889181882235844b06e845d37b10fd610e7
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Jan 12 03:54:24 2019 +0800

    USB: Add new USB LPM helpers
    
    commit 7529b2574a7aaf902f1f8159fbc2a7caa74be559 upstream.
    
    Use new helpers to make LPM enabling/disabling more clear.
    
    This is a preparation to subsequent patch.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org> # after much soaking
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c700e902cebbdbd3737b938526a007f4640232c
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Apr 24 17:06:29 2019 +0200

    drm/vc4: Fix compilation error reported by kbuild test bot
    
    commit 462ce5d963f18b71c63f6b7730a35a2ee5273540 upstream.
    
    A pointer to crtc was missing, resulting in the following build error:
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse: sparse: incorrect type in argument 1 (different base types)
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse:    expected struct drm_crtc *crtc
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse:    got struct drm_crtc_state *state
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:39: sparse: sparse: not enough arguments for function vc4_crtc_destroy_state
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reported-by: kbuild test robot <lkp@intel.com>
    Cc: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/2b6ed5e6-81b0-4276-8860-870b54ca3262@linux.intel.com
    Fixes: d08106796a78 ("drm/vc4: Fix memory leak during gpu reset.")
    Cc: <stable@vger.kernel.org> # v4.6+
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bc7ce32eb21b094b3ae3e489017fabfe72b4dda
Author: Dave Airlie <airlied@redhat.com>
Date:   Wed Apr 24 10:47:56 2019 +1000

    Revert "drm/i915/fbdev: Actually configure untiled displays"
    
    commit 9fa246256e09dc30820524401cdbeeaadee94025 upstream.
    
    This reverts commit d179b88deb3bf6fed4991a31fd6f0f2cad21fab5.
    
    This commit is documented to break userspace X.org modesetting driver in certain configurations.
    
    The X.org modesetting userspace driver is broken. No fixes are available yet. In order for this patch to be applied it either needs a config option or a workaround developed.
    
    This has been reported a few times, saying it's a userspace problem is clearly against the regression rules.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109806
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Cc: <stable@vger.kernel.org> # v3.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c892ef094353bf8e9203a3f391158fbfaff4b06
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Fri Mar 1 13:56:11 2019 +0100

    drm/vc4: Fix memory leak during gpu reset.
    
    commit d08106796a78a4273e39e1bbdf538dc4334b2635 upstream.
    
    __drm_atomic_helper_crtc_destroy_state does not free memory, it only
    cleans it up. Fix this by calling the functions own destroy function.
    
    Fixes: 6d6e50039187 ("drm/vc4: Allocate the right amount of space for boot-time CRTC state.")
    Cc: Eric Anholt <eric@anholt.net>
    Cc: <stable@vger.kernel.org> # v4.6+
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190301125627.7285-2-maarten.lankhorst@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 087341c0f40da9f74ceed17303f2b12c79d087a7
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Apr 16 23:59:02 2019 +1000

    powerpc/mm/radix: Make Radix require HUGETLB_PAGE
    
    commit 8adddf349fda0d3de2f6bb41ddf838cbf36a8ad2 upstream.
    
    Joel reported weird crashes using skiroot_defconfig, in his case we
    jumped into an NX page:
    
      kernel tried to execute exec-protected page (c000000002bff4f0) - exploit attempt? (uid: 0)
      BUG: Unable to handle kernel instruction fetch
      Faulting instruction address: 0xc000000002bff4f0
    
    Looking at the disassembly, we had simply branched to that address:
    
      c000000000c001bc  49fff335    bl     c000000002bff4f0
    
    But that didn't match the original kernel image:
    
      c000000000c001bc  4bfff335    bl     c000000000bff4f0 <kobject_get+0x8>
    
    When STRICT_KERNEL_RWX is enabled, and we're using the radix MMU, we
    call radix__change_memory_range() late in boot to change page
    protections. We do that both to mark rodata read only and also to mark
    init text no-execute. That involves walking the kernel page tables,
    and clearing _PAGE_WRITE or _PAGE_EXEC respectively.
    
    With radix we may use hugepages for the linear mapping, so the code in
    radix__change_memory_range() uses eg. pmd_huge() to test if it has
    found a huge mapping, and if so it stops the page table walk and
    changes the PMD permissions.
    
    However if the kernel is built without HUGETLBFS support, pmd_huge()
    is just a #define that always returns 0. That causes the code in
    radix__change_memory_range() to incorrectly interpret the PMD value as
    a pointer to a PTE page rather than as a PTE at the PMD level.
    
    We can see this using `dv` in xmon which also uses pmd_huge():
    
      0:mon> dv c000000000000000
      pgd  @ 0xc000000001740000
      pgdp @ 0xc000000001740000 = 0x80000000ffffb009
      pudp @ 0xc0000000ffffb000 = 0x80000000ffffa009
      pmdp @ 0xc0000000ffffa000 = 0xc00000000000018f   <- this is a PTE
      ptep @ 0xc000000000000100 = 0xa64bb17da64ab07d   <- kernel text
    
    The end result is we treat the value at 0xc000000000000100 as a PTE
    and clear _PAGE_WRITE or _PAGE_EXEC, potentially corrupting the code
    at that address.
    
    In Joel's specific case we cleared the sign bit in the offset of the
    branch, causing a backward branch to turn into a forward branch which
    caused us to branch into a non-executable page. However the exact
    nature of the crash depends on kernel version, compiler version, and
    other factors.
    
    We need to fix radix__change_memory_range() to not use accessors that
    depend on HUGETLBFS, but we also have radix memory hotplug code that
    uses pmd_huge() etc that will also need fixing. So for now just
    disallow the broken combination of Radix with HUGETLBFS disabled.
    
    The only defconfig we have that is affected is skiroot_defconfig, so
    turn on HUGETLBFS there so that it still gets Radix.
    
    Fixes: 566ca99af026 ("powerpc/mm/radix: Add dummy radix_enabled()")
    Cc: stable@vger.kernel.org # v4.7+
    Reported-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 478afe341d295e177918cb9e674b1feffacfefec
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Apr 12 22:34:18 2019 +0100

    ARM: 8857/1: efi: enable CP15 DMB instructions before cleaning the cache
    
    commit e17b1af96b2afc38e684aa2f1033387e2ed10029 upstream.
    
    The EFI stub is entered with the caches and MMU enabled by the
    firmware, and once the stub is ready to hand over to the decompressor,
    we clean and disable the caches.
    
    The cache clean routines use CP15 barrier instructions, which can be
    disabled via SCTLR. Normally, when using the provided cache handling
    routines to enable the caches and MMU, this bit is enabled as well.
    However, but since we entered the stub with the caches already enabled,
    this routine is not executed before we call the cache clean routines,
    resulting in undefined instruction exceptions if the firmware never
    enabled this bit.
    
    So set the bit explicitly in the EFI entry code, but do so in a way that
    guarantees that the resulting code can still run on v6 cores as well
    (which are guaranteed to have CP15 barriers enabled)
    
    Cc: <stable@vger.kernel.org> # v4.9+
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 129c337c665909cac36303d11f2f4a1619fed3a0
Author: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
Date:   Fri Apr 12 07:29:14 2019 +0200

    dmaengine: sh: rcar-dmac: Fix glitch in dmaengine_tx_status
    
    commit 6e7da74775348d96e2d7efaf3f91410e18c481ef upstream.
    
    The tx_status poll in the rcar_dmac driver reads the status register
    which indicates which chunk is busy (DMACHCRB). Afterwards the point
    inside the chunk is read from DMATCRB. It is possible that the chunk
    has changed between the two reads. The result is a non-monotonous
    increase of the residue. Fix this by introducing a 'safe read' logic.
    
    Fixes: 73a47bd0da66 ("dmaengine: rcar-dmac: use TCRB instead of TCR for residue")
    Signed-off-by: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Cc: <stable@vger.kernel.org> # v4.16+
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f00e1c599b329bdede72457f99b625d243d5e5f
Author: Dirk Behme <dirk.behme@de.bosch.com>
Date:   Fri Apr 12 07:29:13 2019 +0200

    dmaengine: sh: rcar-dmac: With cyclic DMA residue 0 is valid
    
    commit 907bd68a2edc491849e2fdcfe52c4596627bca94 upstream.
    
    Having a cyclic DMA, a residue 0 is not an indication of a completed
    DMA. In case of cyclic DMA make sure that dma_set_residue() is called
    and with this a residue of 0 is forwarded correctly to the caller.
    
    Fixes: 3544d2878817 ("dmaengine: rcar-dmac: use result of updated get_residue in tx_status")
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
    Signed-off-by: Hiroyuki Yokoyama <hiroyuki.yokoyama.vx@renesas.com>
    Signed-off-by: Yao Lihua <ylhuajnu@outlook.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7b467ad1be0478f0341afa8a9ac112732def088
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Wed Apr 3 12:36:21 2019 -0600

    vfio/type1: Limit DMA mappings per container
    
    commit 492855939bdb59c6f947b0b5b44af9ad82b7e38c upstream.
    
    Memory backed DMA mappings are accounted against a user's locked
    memory limit, including multiple mappings of the same memory.  This
    accounting bounds the number of such mappings that a user can create.
    However, DMA mappings that are not backed by memory, such as DMA
    mappings of device MMIO via mmaps, do not make use of page pinning
    and therefore do not count against the user's locked memory limit.
    These mappings still consume memory, but the memory is not well
    associated to the process for the purpose of oom killing a task.
    
    To add bounding on this use case, we introduce a limit to the total
    number of concurrent DMA mappings that a user is allowed to create.
    This limit is exposed as a tunable module option where the default
    value of 64K is expected to be well in excess of any reasonable use
    case (a large virtual machine configuration would typically only make
    use of tens of concurrent mappings).
    
    This fixes CVE-2019-3882.
    
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Tested-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac9e2bece112aa0be22b5ccfb13b843f94be0587
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Apr 26 17:22:01 2019 -0700

    Input: synaptics-rmi4 - write config register values to the right offset
    
    commit 3a349763cf11e63534b8f2d302f2d0c790566497 upstream.
    
    Currently any changed config register values don't take effect, as the
    function to write them back is called with the wrong register offset.
    
    Fixes: ff8f83708b3e (Input: synaptics-rmi4 - add support for 2D
                         sensors and F11)
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37ecf31a3e5efa418c37250bd79b74f8b2604128
Author: Harry Pan <harry.pan@intel.com>
Date:   Wed Apr 24 22:50:33 2019 +0800

    perf/x86/intel: Update KBL Package C-state events to also include PC8/PC9/PC10 counters
    
    commit 82c99f7a81f28f8c1be5f701c8377d14c4075b10 upstream.
    
    Kaby Lake (and Coffee Lake) has PC8/PC9/PC10 residency counters.
    
    This patch updates the list of Kaby/Coffee Lake PMU event counters
    from the snb_cstates[] list of events to the hswult_cstates[]
    list of events, which keeps all previously supported events and
    also adds the PKG_C8, PKG_C9 and PKG_C10 residency counters.
    
    This allows user space tools to profile them through the perf interface.
    
    Signed-off-by: Harry Pan <harry.pan@intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: gs0622@gmail.com
    Link: http://lkml.kernel.org/r/20190424145033.1924-1-harry.pan@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0309570a5f1c78a282943f70b6a98db577403d2
Author: NeilBrown <neilb@suse.com>
Date:   Fri Apr 5 11:34:40 2019 +1100

    sunrpc: don't mark uninitialised items as VALID.
    
    commit d58431eacb226222430940134d97bfd72f292fcd upstream.
    
    A recent commit added a call to cache_fresh_locked()
    when an expired item was found.
    The call sets the CACHE_VALID flag, so it is important
    that the item actually is valid.
    There are two ways it could be valid:
    1/ If ->update has been called to fill in relevant content
    2/ if CACHE_NEGATIVE is set, to say that content doesn't exist.
    
    An expired item that is waiting for an update will be neither.
    Setting CACHE_VALID will mean that a subsequent call to cache_put()
    will be likely to dereference uninitialised pointers.
    
    So we must make sure the item is valid, and we already have code to do
    that in try_to_negate_entry().  This takes the hash lock and so cannot
    be used directly, so take out the two lines that we need and use them.
    
    Now cache_fresh_locked() is certain to be called only on
    a valid item.
    
    Cc: stable@kernel.org # 2.6.35
    Fixes: 4ecd55ea0742 ("sunrpc: fix cache_head leak due to queued request")
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4d4b5e4b83979b8b0888295bda1751b4340747c
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Fri Apr 5 08:54:37 2019 -0700

    nfsd: Don't release the callback slot unless it was actually held
    
    commit e6abc8caa6deb14be2a206253f7e1c5e37e9515b upstream.
    
    If there are multiple callbacks queued, waiting for the callback
    slot when the callback gets shut down, then they all currently
    end up acting as if they hold the slot, and call
    nfsd4_cb_sequence_done() resulting in interesting side-effects.
    
    In addition, the 'retry_nowait' path in nfsd4_cb_sequence_done()
    causes a loop back to nfsd4_cb_prepare() without first freeing the
    slot, which causes a deadlock when nfsd41_cb_get_slot() gets called
    a second time.
    
    This patch therefore adds a boolean to track whether or not the
    callback did pick up the slot, so that it can do the right thing
    in these 2 cases.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 950eec8126001c63ec6055d22d370d8ab833ed4f
Author: Yan, Zheng <zyan@redhat.com>
Date:   Thu Apr 18 11:24:57 2019 +0800

    ceph: fix ci->i_head_snapc leak
    
    commit 37659182bff1eeaaeadcfc8f853c6d2b6dbc3f47 upstream.
    
    We missed two places that i_wrbuffer_ref_head, i_wr_ref, i_dirty_caps
    and i_flushing_caps may change. When they are all zeros, we should free
    i_head_snapc.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/38224
    Reported-and-tested-by: Luis Henriques <lhenriques@suse.com>
    Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 246d2bf32da1df979b2bb0b4ca38b9b2b6ac2bf4
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Apr 17 12:58:28 2019 -0400

    ceph: ensure d_name stability in ceph_dentry_hash()
    
    commit 76a495d666e5043ffc315695f8241f5e94a98849 upstream.
    
    Take the d_lock here to ensure that d_name doesn't change.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d693ef0141c90dd94fe47be1727214bf3adb3dd
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Apr 15 12:00:42 2019 -0400

    ceph: only use d_name directly when parent is locked
    
    commit 1bcb344086f3ecf8d6705f6d708441baa823beb3 upstream.
    
    Ben reported tripping the BUG_ON in create_request_message during some
    performance testing. Analysis of the vmcore showed that the length of
    the r_dentry->d_name string changed after we allocated the buffer, but
    before we encoded it.
    
    build_dentry_path returns pointers to d_name in the common case of
    non-snapped dentries, but this optimization isn't safe unless the parent
    directory is locked. When it isn't, have the code make a copy of the
    d_name while holding the d_lock.
    
    Cc: stable@vger.kernel.org
    Reported-by: Ben England <bengland@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b8c07129ddfeec6394b44b42d4e54639ac498c0
Author: Xie XiuQi <xiexiuqi@huawei.com>
Date:   Sat Apr 20 16:34:16 2019 +0800

    sched/numa: Fix a possible divide-by-zero
    
    commit a860fa7b96e1a1c974556327aa1aee852d434c21 upstream.
    
    sched_clock_cpu() may not be consistent between CPUs. If a task
    migrates to another CPU, then se.exec_start is set to that CPU's
    rq_clock_task() by update_stats_curr_start(). Specifically, the new
    value might be before the old value due to clock skew.
    
    So then if in numa_get_avg_runtime() the expression:
    
      'now - p->last_task_numa_placement'
    
    ends up as -1, then the divider '*period + 1' in task_numa_placement()
    is 0 and things go bang. Similar to update_curr(), check if time goes
    backwards to avoid this.
    
    [ peterz: Wrote new changelog. ]
    [ mingo: Tweaked the code comment. ]
    
    Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: cj.chengjian@huawei.com
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20190425080016.GX11158@hirez.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1af34bf97eca3624b5f2ec786527c8609e1a68b8
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 16 14:07:25 2019 +0300

    RDMA/mlx5: Do not allow the user to write to the clock page
    
    commit c660133c339f9ab684fdf568c0d51b9ae5e86002 upstream.
    
    The intent of this VMA was to be read-only from user space, but the
    VM_MAYWRITE masking was missed, so mprotect could make it writable.
    
    Cc: stable@vger.kernel.org
    Fixes: 5c99eaecb1fc ("IB/mlx5: Mmap the HCA's clock info to user-space")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Reviewed-by: Haggai Eran <haggaie@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ac57d1bdc255f07c1cec130e8a860457e6bb7d3
Author: Josh Collier <josh.d.collier@intel.com>
Date:   Mon Apr 15 11:34:22 2019 -0700

    IB/rdmavt: Fix frwr memory registration
    
    commit 7c39f7f671d2acc0a1f39ebbbee4303ad499bbfa upstream.
    
    Current implementation was not properly handling frwr memory
    registrations. This was uncovered by commit 27f26cec761das ("xprtrdma:
    Plant XID in on-the-wire RDMA offset (FRWR)") in which xprtrdma, which is
    used for NFS over RDMA, started failing as it was the first ULP to modify
    the ib_mr iova resulting in the NFS server getting REMOTE ACCESS ERROR
    when attempting to perform RDMA Writes to the client.
    
    The fix is to properly capture the true iova, offset, and length in the
    call to ib_map_mr_sg, and then update the iova when processing the
    IB_WR_REG_MEM on the send queue.
    
    Fixes: a41081aa5936 ("IB/rdmavt: Add support for ib_map_mr_sg")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Josh Collier <josh.d.collier@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0264d10ae6a8b8b07f2097f34d131adb76f0ad3
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Apr 23 22:03:18 2019 +0200

    trace: Fix preempt_enable_no_resched() abuse
    
    commit d6097c9e4454adf1f8f2c9547c2fa6060d55d952 upstream.
    
    Unless the very next line is schedule(), or implies it, one must not use
    preempt_enable_no_resched(). It can cause a preemption to go missing and
    thereby cause arbitrary delays, breaking the PREEMPT=y invariant.
    
    Link: http://lkml.kernel.org/r/20190423200318.GY14281@hirez.programming.kicks-ass.net
    
    Cc: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: the arch/x86 maintainers <x86@kernel.org>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: huang ying <huang.ying.caritas@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: stable@vger.kernel.org
    Fixes: 2c2d7329d8af ("tracing/ftrace: use preempt_enable_no_resched_notrace in ring_buffer_time_stamp()")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f9c9d1d79fd4840cd0c71bf92c33ec581008c0d
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Tue Apr 9 16:53:55 2019 +0200

    MIPS: scall64-o32: Fix indirect syscall number load
    
    commit 79b4a9cf0e2ea8203ce777c8d5cfa86c71eae86e upstream.
    
    Commit 4c21b8fd8f14 (MIPS: seccomp: Handle indirect system calls (o32))
    added indirect syscall detection for O32 processes running on MIPS64,
    but it did not work correctly for big endian kernel/processes. The
    reason is that the syscall number is loaded from ARG1 using the lw
    instruction while this is a 64-bit value, so zero is loaded instead of
    the syscall number.
    
    Fix the code by using the ld instruction instead. When running a 32-bit
    processes on a 64 bit CPU, the values are properly sign-extended, so it
    ensures the value passed to syscall_trace_enter is correct.
    
    Recent systemd versions with seccomp enabled whitelist the getpid
    syscall for their internal  processes (e.g. systemd-journald), but call
    it through syscall(SYS_getpid). This fix therefore allows O32 big endian
    systems with a 64-bit kernel to run recent systemd versions.
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Cc: <stable@vger.kernel.org> # v3.15+
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce900ddd660ddd1cf430733b0a863ddf5520d171
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Apr 25 22:23:44 2019 -0700

    lib/Kconfig.debug: fix build error without CONFIG_BLOCK
    
    commit ae3d6a323347940f0548bbb4b17f0bb2e9164169 upstream.
    
    If CONFIG_TEST_KMOD is set to M, while CONFIG_BLOCK is not set, XFS and
    BTRFS can not be compiled successly.
    
    Link: http://lkml.kernel.org/r/20190410075434.35220-1-yuehaibing@huawei.com
    Fixes: d9c6a72d6fa2 ("kmod: add test driver to stress test the module loader")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 710733e539d1aa9167fc874c21e7444aa9d3259d
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Thu Apr 25 22:23:41 2019 -0700

    zram: pass down the bvec we need to read into in the work struct
    
    commit e153abc0739ff77bd89c9ba1688cdb963464af97 upstream.
    
    When scheduling work item to read page we need to pass down the proper
    bvec struct which points to the page to read into.  Before this patch it
    uses a randomly initialized bvec (only if PAGE_SIZE != 4096) which is
    wrong.
    
    Note that without this patch on arch/kernel where PAGE_SIZE != 4096
    userspace could read random memory through a zram block device (thought
    userspace probably would have no control on the address being read).
    
    Link: http://lkml.kernel.org/r/20190408183219.26377-1-jglisse@redhat.com
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a19e4a1b4c63c3c3fd151ec443b395bcaeba59bd
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Apr 10 15:47:54 2019 +0800

    gpio: eic: sprd: Fix incorrect irq type setting for the sync EIC
    
    commit 102bbe34b31c9159e714432afd64458f6f3876d7 upstream.
    
    When setting sync EIC as IRQ_TYPE_EDGE_BOTH type, we missed to set the
    SPRD_EIC_SYNC_INTMODE register to 0, which means detecting edge signals.
    
    Thus this patch fixes the issue.
    
    Fixes: 25518e024e3a ("gpio: Add Spreadtrum EIC driver support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cffeb9c84d20816a2173e3cfeca210c8bfa8e357
Author: Jann Horn <jannh@google.com>
Date:   Thu Apr 4 23:59:25 2019 +0200

    tracing: Fix buffer_ref pipe ops
    
    commit b987222654f84f7b4ca95b3a55eca784cb30235b upstream.
    
    This fixes multiple issues in buffer_pipe_buf_ops:
    
     - The ->steal() handler must not return zero unless the pipe buffer has
       the only reference to the page. But generic_pipe_buf_steal() assumes
       that every reference to the pipe is tracked by the page's refcount,
       which isn't true for these buffers - buffer_pipe_buf_get(), which
       duplicates a buffer, doesn't touch the page's refcount.
       Fix it by using generic_pipe_buf_nosteal(), which refuses every
       attempted theft. It should be easy to actually support ->steal, but the
       only current users of pipe_buf_steal() are the virtio console and FUSE,
       and they also only use it as an optimization. So it's probably not worth
       the effort.
     - The ->get() and ->release() handlers can be invoked concurrently on pipe
       buffers backed by the same struct buffer_ref. Make them safe against
       concurrency by using refcount_t.
     - The pointers stored in ->private were only zeroed out when the last
       reference to the buffer_ref was dropped. As far as I know, this
       shouldn't be necessary anyway, but if we do it, let's always do it.
    
    Link: http://lkml.kernel.org/r/20190404215925.253531-1-jannh@google.com
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: stable@vger.kernel.org
    Fixes: 73a757e63114d ("ring-buffer: Return reader page back into existing ring buffer")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e78e92da2d8925d3acdfbee57233a75e2f6e423
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Fri Apr 19 21:22:59 2019 -0500

    tracing: Fix a memory leak by early error exit in trace_pid_write()
    
    commit 91862cc7867bba4ee5c8fcf0ca2f1d30427b6129 upstream.
    
    In trace_pid_write(), the buffer for trace parser is allocated through
    kmalloc() in trace_parser_get_init(). Later on, after the buffer is used,
    it is then freed through kfree() in trace_parser_put(). However, it is
    possible that trace_pid_write() is terminated due to unexpected errors,
    e.g., ENOMEM. In that case, the allocated buffer will not be freed, which
    is a memory leak bug.
    
    To fix this issue, free the allocated buffer when an error is encountered.
    
    Link: http://lkml.kernel.org/r/1555726979-15633-1-git-send-email-wang6495@umn.edu
    
    Fixes: f4d34a87e9c10 ("tracing: Use pid bitmap instead of a pid array for set_event_pid")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee231063ff954dbd46d1c55bbb6519e60dd9c649
Author: Frank Sorenson <sorenson@redhat.com>
Date:   Tue Apr 16 08:37:27 2019 -0500

    cifs: do not attempt cifs operation on smb2+ rename error
    
    commit 652727bbe1b17993636346716ae5867627793647 upstream.
    
    A path-based rename returning EBUSY will incorrectly try opening
    the file with a cifs (NT Create AndX) operation on an smb2+ mount,
    which causes the server to force a session close.
    
    If the mount is smb2+, skip the fallback.
    
    Signed-off-by: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5bf783a09a06c81ca4783054355f1d243e124e7
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Tue Apr 23 16:39:45 2019 +1000

    cifs: fix memory leak in SMB2_read
    
    commit 05fd5c2c61732152a6bddc318aae62d7e436629b upstream.
    
    Commit 088aaf17aa79300cab14dbee2569c58cfafd7d6e introduced a leak where
    if SMB2_read() returned an error we would return without freeing the
    request buffer.
    
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15e97839157720e73c572e990a8d53278c08df09
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Mon Mar 4 19:39:03 2019 +0100

    net: dsa: mv88e6xxx: add call to mv88e6xxx_ports_cmode_init to probe for new DSA framework
    
    [ Upstream commit 3acca1dd17060332cfab15693733cdaf9fba1c90 ]
    
    In the original patch I missed to add mv88e6xxx_ports_cmode_init()
    to the second probe function, the one for the new DSA framework.
    
    Fixes: ed8fe20205ac ("net: dsa: mv88e6xxx: prevent interrupt storm caused by mv88e6390x_port_set_cmode")
    Reported-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Suggested-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 984c4e00c3877d400e8bbe5add6621931fbb358a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 5 17:57:27 2019 +0100

    ALSA: hda/ca0132 - Fix build error without CONFIG_PCI
    
    [ Upstream commit c97617a81a7616d49bc3700959e08c6c6f447093 ]
    
    A call of pci_iounmap() call without CONFIG_PCI leads to a build error
    on some architectures.  We tried to address this and add a check of
    IS_ENABLED(CONFIG_PCI), but this still doesn't seem enough for sh.
    Ideally we should fix it globally, it's really a corner case, so let's
    paper over it with a simpler ifdef.
    
    Fixes: 1e73359a24fa ("ALSA: hda/ca0132 - make pci_iounmap() call conditional")
    Reported-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e0cab1bce57cf1618eeb57d399b6f9dfe49fa5b
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Apr 4 12:20:05 2019 +0000

    powerpc/vdso32: fix CLOCK_MONOTONIC on PPC64
    
    [ Upstream commit dd9a994fc68d196a052b73747e3366c57d14a09e ]
    
    Commit b5b4453e7912 ("powerpc/vdso64: Fix CLOCK_MONOTONIC
    inconsistencies across Y2038") changed the type of wtom_clock_sec
    to s64 on PPC64. Therefore, VDSO32 needs to read it with a 4 bytes
    shift in order to retrieve the lower part of it.
    
    Fixes: b5b4453e7912 ("powerpc/vdso64: Fix CLOCK_MONOTONIC inconsistencies across Y2038")
    Reported-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae5e0c773ca699ff2ae91bce7bd25e92b402c0a1
Author: Andrea Claudi <aclaudi@redhat.com>
Date:   Fri Feb 15 17:51:48 2019 +0100

    ipvs: fix warning on unused variable
    
    [ Upstream commit c93a49b9769e435990c82297aa0baa31e1538790 ]
    
    When CONFIG_IP_VS_IPV6 is not defined, build produced this warning:
    
    net/netfilter/ipvs/ip_vs_ctl.c:899:6: warning: unused variable ‘ret’ [-Wunused-variable]
      int ret = 0;
          ^~~
    
    Fix this by moving the declaration of 'ret' in the CONFIG_IP_VS_IPV6
    section in the same function.
    
    While at it, drop its unneeded initialisation.
    
    Fixes: 098e13f5b21d ("ipvs: fix dependency on nf_defrag_ipv6")
    Reported-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Andrea Claudi <aclaudi@redhat.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e59639791f20ac375641fd66c54443f2d30b1a5
Author: Adalbert Lazăr <alazar@bitdefender.com>
Date:   Wed Mar 6 12:13:53 2019 +0200

    vsock/virtio: fix kernel panic from virtio_transport_reset_no_sock
    
    [ Upstream commit 4c404ce23358d5d8fbdeb7a6021a9b33d3c3c167 ]
    
    Previous to commit 22b5c0b63f32 ("vsock/virtio: fix kernel panic
    after device hot-unplug"), vsock_core_init() was called from
    virtio_vsock_probe(). Now, virtio_transport_reset_no_sock() can be called
    before vsock_core_init() has the chance to run.
    
    [Wed Feb 27 14:17:09 2019] BUG: unable to handle kernel NULL pointer dereference at 0000000000000110
    [Wed Feb 27 14:17:09 2019] #PF error: [normal kernel read fault]
    [Wed Feb 27 14:17:09 2019] PGD 0 P4D 0
    [Wed Feb 27 14:17:09 2019] Oops: 0000 [#1] SMP PTI
    [Wed Feb 27 14:17:09 2019] CPU: 3 PID: 59 Comm: kworker/3:1 Not tainted 5.0.0-rc7-390-generic-hvi #390
    [Wed Feb 27 14:17:09 2019] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [Wed Feb 27 14:17:09 2019] Workqueue: virtio_vsock virtio_transport_rx_work [vmw_vsock_virtio_transport]
    [Wed Feb 27 14:17:09 2019] RIP: 0010:virtio_transport_reset_no_sock+0x8c/0xc0 [vmw_vsock_virtio_transport_common]
    [Wed Feb 27 14:17:09 2019] Code: 35 8b 4f 14 48 8b 57 08 31 f6 44 8b 4f 10 44 8b 07 48 8d 7d c8 e8 84 f8 ff ff 48 85 c0 48 89 c3 74 2a e8 f7 31 03 00 48 89 df <48> 8b 80 10 01 00 00 e8 68 fb 69 ed 48 8b 75 f0 65 48 33 34 25 28
    [Wed Feb 27 14:17:09 2019] RSP: 0018:ffffb42701ab7d40 EFLAGS: 00010282
    [Wed Feb 27 14:17:09 2019] RAX: 0000000000000000 RBX: ffff9d79637ee080 RCX: 0000000000000003
    [Wed Feb 27 14:17:09 2019] RDX: 0000000000000001 RSI: 0000000000000002 RDI: ffff9d79637ee080
    [Wed Feb 27 14:17:09 2019] RBP: ffffb42701ab7d78 R08: ffff9d796fae70e0 R09: ffff9d796f403500
    [Wed Feb 27 14:17:09 2019] R10: ffffb42701ab7d90 R11: 0000000000000000 R12: ffff9d7969d09240
    [Wed Feb 27 14:17:09 2019] R13: ffff9d79624e6840 R14: ffff9d7969d09318 R15: ffff9d796d48ff80
    [Wed Feb 27 14:17:09 2019] FS:  0000000000000000(0000) GS:ffff9d796fac0000(0000) knlGS:0000000000000000
    [Wed Feb 27 14:17:09 2019] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [Wed Feb 27 14:17:09 2019] CR2: 0000000000000110 CR3: 0000000427f22000 CR4: 00000000000006e0
    [Wed Feb 27 14:17:09 2019] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [Wed Feb 27 14:17:09 2019] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [Wed Feb 27 14:17:09 2019] Call Trace:
    [Wed Feb 27 14:17:09 2019]  virtio_transport_recv_pkt+0x63/0x820 [vmw_vsock_virtio_transport_common]
    [Wed Feb 27 14:17:09 2019]  ? kfree+0x17e/0x190
    [Wed Feb 27 14:17:09 2019]  ? detach_buf_split+0x145/0x160
    [Wed Feb 27 14:17:09 2019]  ? __switch_to_asm+0x40/0x70
    [Wed Feb 27 14:17:09 2019]  virtio_transport_rx_work+0xa0/0x106 [vmw_vsock_virtio_transport]
    [Wed Feb 27 14:17:09 2019] NET: Registered protocol family 40
    [Wed Feb 27 14:17:09 2019]  process_one_work+0x167/0x410
    [Wed Feb 27 14:17:09 2019]  worker_thread+0x4d/0x460
    [Wed Feb 27 14:17:09 2019]  kthread+0x105/0x140
    [Wed Feb 27 14:17:09 2019]  ? rescuer_thread+0x360/0x360
    [Wed Feb 27 14:17:09 2019]  ? kthread_destroy_worker+0x50/0x50
    [Wed Feb 27 14:17:09 2019]  ret_from_fork+0x35/0x40
    [Wed Feb 27 14:17:09 2019] Modules linked in: vmw_vsock_virtio_transport vmw_vsock_virtio_transport_common input_leds vsock serio_raw i2c_piix4 mac_hid qemu_fw_cfg autofs4 cirrus ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops virtio_net psmouse drm net_failover pata_acpi virtio_blk failover floppy
    
    Fixes: 22b5c0b63f32 ("vsock/virtio: fix kernel panic after device hot-unplug")
    Reported-by: Alexandru Herghelegiu <aherghelegiu@bitdefender.com>
    Signed-off-by: Adalbert Lazăr <alazar@bitdefender.com>
    Co-developed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 416699b9bb904b265b8ecc3cb5c69e741629abd5
Author: Damian Kos <dkos@cadence.com>
Date:   Mon Nov 19 15:14:14 2018 +0000

    drm/rockchip: fix for mailbox read validation.
    
    [ Upstream commit e4056bbb6719fe713bfc4030ac78e8e97ddf7574 ]
    
    This is basically the same fix as in
    commit fa68d4f8476b ("drm/rockchip: fix for mailbox read size")
    but for cdn_dp_mailbox_validate_receive function.
    
    See patchwork.kernel.org/patch/10671981/ for details.
    
    Signed-off-by: Damian Kos <dkos@cadence.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/1542640463-18332-1-git-send-email-dkos@cadence.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1832b1517c2ba593fa49ce0b0f3fb9497209c361
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Fri Feb 22 22:10:19 2019 +0800

    loop: do not print warn message if partition scan is successful
    
    [ Upstream commit 40853d6fc619a6fd3d3177c3973a2eac9b598a80 ]
    
    Do not print warn message when the partition scan returns 0.
    
    Fixes: d57f3374ba48 ("loop: Move special partition reread handling in loop_clr_fd()")
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 070e34b627f428a4efac2c948cd38272b036a1b7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    [ Upstream commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 ]
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8766cc7d0d1d3de0bc0ede9cbf61532925b7f23f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Feb 21 11:17:34 2019 -0500

    ext4: fix some error pointer dereferences
    
    [ Upstream commit 7159a986b4202343f6cca3bb8079ecace5816fd6 ]
    
    We can't pass error pointers to brelse().
    
    Fixes: fb265c9cb49e ("ext4: add ext4_sb_bread() to disambiguate ENOMEM cases")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 816e3e2258e893b62ae5cab8851c8e2173b1390d
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Fri Mar 1 11:52:08 2019 +0100

    net: mvpp2: fix validate for PPv2.1
    
    [ Upstream commit 8b318f30ab4ef9bbc1241e6f8c1db366dbd347f2 ]
    
    The Phylink validate function is the Marvell PPv2 driver makes a check
    on the GoP id. This is valid an has to be done when using PPv2.2 engines
    but makes no sense when using PPv2.1. The check done when using an RGMII
    interface makes sure the GoP id is not 0, but this breaks PPv2.1. Fixes
    it.
    
    Fixes: 0fb628f0f250 ("net: mvpp2: fix phylink handling of invalid PHY modes")
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7ddd6af17e452467e17f15ad70a6f211593f2fa
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Fri Nov 30 10:59:08 2018 -0600

    net/ibmvnic: Fix RTNL deadlock during device reset
    
    [ Upstream commit 986103e7920cabc0b910749e77ae5589d3934d52 ]
    
    Commit a5681e20b541 ("net/ibmnvic: Fix deadlock problem
    in reset") made the change to hold the RTNL lock during
    driver reset but still calls netdev_notify_peers, which
    results in a deadlock. Instead, use call_netdevice_notifiers,
    which is functionally the same except that it does not
    take the RTNL lock again.
    
    Fixes: a5681e20b541 ("net/ibmnvic: Fix deadlock problem in reset")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffc1d85e8c5f79d54597f3be294a287f5ceaa7a4
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Mar 14 10:50:20 2019 +0100

    netfilter: nf_tables: bogus EBUSY in helper removal from transaction
    
    [ Upstream commit 8ffcd32f64633926163cdd07a7d295c500a947d1 ]
    
    Proper use counter updates when activating and deactivating the object,
    otherwise, this hits bogus EBUSY error.
    
    Fixes: cd5125d8f518 ("netfilter: nf_tables: split set destruction in deactivate and destroy phase")
    Reported-by: Laura Garcia <nevola@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e313d5da057b2335b6f60aa70e9873a4f0f59d45
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Mar 8 15:30:03 2019 +0100

    netfilter: nf_tables: bogus EBUSY when deleting set after flush
    
    [ Upstream commit 273fe3f1006ea5ebc63d6729e43e8e45e32b256a ]
    
    Set deletion after flush coming in the same batch results in EBUSY. Add
    set use counter to track the number of references to this set from
    rules. We cannot rely on the list of bindings for this since such list
    is still populated from the preparation phase.
    
    Reported-by: Václav Zindulka <vaclav.zindulka@tlapnet.cz>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25ddad73070c8fd15528fe804db90f0bda0dc6ad
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Mar 8 00:58:53 2019 +0100

    netfilter: nf_tables: fix set double-free in abort path
    
    [ Upstream commit 40ba1d9b4d19796afc9b7ece872f5f3e8f5e2c13 ]
    
    The abort path can cause a double-free of an anonymous set.
    Added-and-to-be-aborted rule looks like this:
    
    udp dport { 137, 138 } drop
    
    The to-be-aborted transaction list looks like this:
    
    newset
    newsetelem
    newsetelem
    rule
    
    This gets walked in reverse order, so first pass disables the rule, the
    set elements, then the set.
    
    After synchronize_rcu(), we then destroy those in same order: rule, set
    element, set element, newset.
    
    Problem is that the anonymous set has already been bound to the rule, so
    the rule (lookup expression destructor) already frees the set, when then
    cause use-after-free when trying to delete the elements from this set,
    then try to free the set again when handling the newset expression.
    
    Rule releases the bound set in first place from the abort path, this
    causes the use-after-free on set element removal when undoing the new
    element transactions. To handle this, skip new element transaction if
    set is bound from the abort path.
    
    This is still causes the use-after-free on set element removal.  To
    handle this, remove transaction from the list when the set is already
    bound.
    
    Joint work with Florian Westphal.
    
    Fixes: f6ac85858976 ("netfilter: nf_tables: unbind set in rule from commit path")
    Bugzilla: https://bugzilla.netfilter.org/show_bug.cgi?id=1325
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8906234c5015ff2a935f11a1a5ee697eb526aae8
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Feb 13 13:18:36 2019 +0100

    netfilter: nft_compat: use .release_ops and remove list of extension
    
    [ Upstream commit b8e204006340b7aaf32bd2b9806c692f6e0cb38a ]
    
    Add .release_ops, that is called in case of error at a later stage in
    the expression initialization path, ie. .select_ops() has been already
    set up operations and that needs to be undone. This allows us to unwind
    .select_ops from the error path, ie. release the dynamic operations for
    this extension.
    
    Moreover, allocate one single operation instead of recycling them, this
    comes at the cost of consuming a bit more memory per rule, but it
    simplifies the infrastructure.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f67e8976f7bbcaec6e74ab73085031938315009
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Feb 5 12:16:18 2019 +0100

    netfilter: nft_compat: don't use refcount_inc on newly allocated entry
    
    [ Upstream commit 947e492c0fc2132ae5fca081a9c2952ccaab0404 ]
    
    When I moved the refcount to refcount_t type I missed the fact that
    refcount_inc() will result in use-after-free warning with
    CONFIG_REFCOUNT_FULL=y builds.
    
    The correct fix would be to init the reference count to 1 at allocation
    time, but, unfortunately we cannot do this, as we can't undo that
    in case something else fails later in the batch.
    
    So only solution I see is to special-case the 'new entry' condition
    and replace refcount_inc() with a "delayed" refcount_set(1) in this case,
    as done here.
    
    The .activate callback can be removed to simplify things, we only
    need to make sure that deactivate() decrements/unlinks the entry
    from the list at end of transaction phase (commit or abort).
    
    Fixes: 12c44aba6618 ("netfilter: nft_compat: use refcnt_t type for nft_xt reference count")
    Reported-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af26f3e2903bbdd2a4ae8ca28abb94ed8f397208
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sat Feb 2 10:49:13 2019 +0100

    netfilter: nf_tables: unbind set in rule from commit path
    
    Anonymous sets that are bound to rules from the same transaction trigger
    a kernel splat from the abort path due to double set list removal and
    double free.
    
    This patch updates the logic to search for the transaction that is
    responsible for creating the set and disable the set list removal and
    release, given the rule is now responsible for this. Lookup is reverse
    since the transaction that adds the set is likely to be at the tail of
    the list.
    
    Moreover, this patch adds the unbind step to deliver the event from the
    commit path.  This should not be done from the worker thread, since we
    have no guarantees of in-order delivery to the listener.
    
    This patch removes the assumption that both activate and deactivate
    callbacks need to be provided.
    
    Fixes: cd5125d8f518 ("netfilter: nf_tables: split set destruction in deactivate and destroy phase")
    Reported-by: Mikhail Morfikov <mmorfikov@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 27458b5457d3d99974c60387f57d5a8aed3a597d
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 30 10:42:55 2018 +0200

    netfilter: nf_tables: warn when expr implements only one of activate/deactivate
    
    ->destroy is only allowed to free data, or do other cleanups that do not
    have side effects on other state, such as visibility to other netlink
    requests.
    
    Such things need to be done in ->deactivate.
    As a transaction can fail, we need to make sure we can undo such
    operations, therefore ->activate() has to be provided too.
    
    So print a warning and refuse registration if expr->ops provides
    only one of the two operations.
    
    v2: fix nft_expr_check_ops to not repeat same check twice (Jones Desougi)
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit cb2e343d1d85df3cc9947fd8ce478ebda4a2f546
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Jan 14 14:28:50 2019 +0100

    netfilter: nft_compat: destroy function must not have side effects
    
    The nft_compat destroy function deletes the nft_xt object from a list.
    This isn't allowed anymore. Destroy functions are called asynchronously,
    i.e. next batch can find the object that has a pending ->destroy()
    invocation:
    
    cpu0                       cpu1
     worker
       ->destroy               for_each_entry()
                                 if (x == ...
                                    return x->ops;
         list_del(x)
         kfree_rcu(x)
                               expr->ops->... // ops was free'd
    
    To resolve this, the list_del needs to occur before the transaction
    mutex gets released.  nf_tables has a 'deactivate' hook for this
    purpose, so use that to unlink the object from the list.
    
    Fixes: 0935d5588400 ("netfilter: nf_tables: asynchronous release")
    Reported-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 3dbba8ebb066261559f20382add0f7207a26a773
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Aug 29 14:41:30 2018 +0200

    netfilter: nf_tables: split set destruction in deactivate and destroy phase
    
    [ Upstream commit cd5125d8f51882279f50506bb9c7e5e89dc9bef3 ]
    
    Splits unbind_set into destroy_set and unbinding operation.
    
    Unbinding removes set from lists (so new transaction would not
    find it anymore) but keeps memory allocated (so packet path continues
    to work).
    
    Rebind function is added to allow unrolling in case transaction
    that wants to remove set is aborted.
    
    Destroy function is added to free the memory, but this could occur
    outside of transaction in the future.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7693bae6b3145f90722d9a4507cf7443db8b5dfb
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Jan 14 14:28:49 2019 +0100

    netfilter: nft_compat: make lists per netns
    
    [ Upstream commit cf52572ebbd7189a1966c2b5fc34b97078cd1dce ]
    
    There are two problems with nft_compat since the netlink config
    plane uses a per-netns mutex:
    
    1. Concurrent add/del accesses to the same list
    2. accesses to a list element after it has been free'd already.
    
    This patch fixes the first problem.
    
    Freeing occurs from a work queue, after transaction mutexes have been
    released, i.e., it still possible for a new transaction (even from
    same net ns) to find the to-be-deleted expression in the list.
    
    The ->destroy functions are not allowed to have any such side effects,
    i.e. the list_del() in the destroy function is not allowed.
    
    This part of the problem is solved in the next patch.
    I tried to make this work by serializing list access via mutex
    and by moving list_del() to a deactivate callback, but
    Taehee spotted following race on this approach:
    
      NET #0                          NET #1
       >select_ops()
       ->init()
                                       ->select_ops()
       ->deactivate()
       ->destroy()
          nft_xt_put()
           kfree_rcu(xt, rcu_head);
                                       ->init() <-- use-after-free occurred.
    
    Unfortunately, we can't increment reference count in
    select_ops(), because we can't undo the refcount increase in
    case a different expression fails in the same batch.
    
    (The destroy hook will only be called in case the expression
     was initialized successfully).
    
    Fixes: f102d66b335a ("netfilter: nf_tables: use dedicated mutex to guard transactions")
    Reported-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db99f122cbf890dccc59030ea5cfb4d71f7d47f6
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Jan 14 14:28:48 2019 +0100

    netfilter: nft_compat: use refcnt_t type for nft_xt reference count
    
    [ Upstream commit 12c44aba6618b7f6c437076e5722237190f6cd5f ]
    
    Using standard integer type was fine while all operations on it were
    guarded by the nftnl subsys mutex.
    
    This isn't true anymore:
    1. transactions are guarded only by a pernet mutex, so concurrent
       rule manipulation in different netns is racy
    2. the ->destroy hook runs from a work queue after the transaction
       mutex has been released already.
    
    cpu0                           cpu1 (net 1)        cpu2 (net 2)
     kworker
        nft_compat->destroy        nft_compat->init    nft_compat->init
          if (--nft_xt->ref == 0)   nft_xt->ref++        nft_xt->ref++
    
    Switch to refcount_t.  Doing this however only fixes a minor aspect,
    nft_compat also performs linked-list operations in an unsafe way.
    
    This is addressed in the next two patches.
    
    Fixes: f102d66b335a ("netfilter: nf_tables: use dedicated mutex to guard transactions")
    Fixes: 0935d5588400 ("netfilter: nf_tables: asynchronous release")
    Reported-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
