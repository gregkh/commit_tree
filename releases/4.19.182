commit 125222814e7b8f84df767d6ab622aff2a6d2f234
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Mar 20 10:38:35 2021 +0100

    Linux 4.19.182
    
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210319121744.114946147@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1270080b64f76498667f37b09b5c1a6d0cc9d396
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 22 14:30:10 2021 -0800

    net: dsa: b53: Support setting learning on port
    
    commit f9b3827ee66cfcf297d0acd6ecf33653a5f297ef upstream.
    
    Add support for being able to set the learning attribute on port, and
    make sure that the standalone ports start up with learning disabled.
    
    We can remove the code in bcm_sf2 that configured the ports learning
    attribute because we want the standalone ports to have learning disabled
    by default and port 7 cannot be bridged, so its learning attribute will
    not change past its initial configuration.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfbfa9c721862acbebab2828734b2b0bd41fe772
Author: DENG Qingfang <dqfext@gmail.com>
Date:   Tue Mar 2 00:01:59 2021 +0800

    net: dsa: tag_mtk: fix 802.1ad VLAN egress
    
    commit 9200f515c41f4cbaeffd8fdd1d8b6373a18b1b67 upstream.
    
    A different TPID bit is used for 802.1ad VLAN frames.
    
    Reported-by: Ilario Gelmetti <iochesonome@gmail.com>
    Fixes: f0af34317f4b ("net: dsa: mediatek: combine MediaTek tag with VLAN tag")
    Signed-off-by: DENG Qingfang <dqfext@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86eddd693daacc0c6746cd789569bd5481d2ea36
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 09:47:02 2021 +0100

    bpf: Add sanity check for upper ptr_limit
    
    commit 1b1597e64e1a610c7a96710fc4717158e98a08b3 upstream.
    
    Given we know the max possible value of ptr_limit at the time of retrieving
    the latter, add basic assertions, so that the verifier can bail out if
    anything looks odd and reject the program. Nothing triggered this so far,
    but it also does not hurt to have these.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 087299234e6fa5d2e611df782602dbd9864957b0
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 08:26:25 2021 +0100

    bpf: Simplify alu_limit masking for pointer arithmetic
    
    commit b5871dca250cd391885218b99cc015aca1a51aea upstream.
    
    Instead of having the mov32 with aux->alu_limit - 1 immediate, move this
    operation to retrieve_ptr_limit() instead to simplify the logic and to
    allow for subsequent sanity boundary checks inside retrieve_ptr_limit().
    This avoids in future that at the time of the verifier masking rewrite
    we'd run into an underflow which would not sign extend due to the nature
    of mov32 instruction.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec5307f2ed2377fc55f0a8c990c6004c63014a54
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 08:20:16 2021 +0100

    bpf: Fix off-by-one for area size in creating mask to left
    
    commit 10d2bb2e6b1d8c4576c56a748f697dbeb8388899 upstream.
    
    retrieve_ptr_limit() computes the ptr_limit for registers with stack and
    map_value type. ptr_limit is the size of the memory area that is still
    valid / in-bounds from the point of the current position and direction
    of the operation (add / sub). This size will later be used for masking
    the operation such that attempting out-of-bounds access in the speculative
    domain is redirected to remain within the bounds of the current map value.
    
    When masking to the right the size is correct, however, when masking to
    the left, the size is off-by-one which would lead to an incorrect mask
    and thus incorrect arithmetic operation in the non-speculative domain.
    Piotr found that if the resulting alu_limit value is zero, then the
    BPF_MOV32_IMM() from the fixup_bpf_calls() rewrite will end up loading
    0xffffffff into AX instead of sign-extending to the full 64 bit range,
    and as a result, this allows abuse for executing speculatively out-of-
    bounds loads against 4GB window of address space and thus extracting the
    contents of kernel memory via side-channel.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc49612a0e2c379a0d997375901c5371ba015518
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 09:47:02 2021 +0100

    bpf: Prohibit alu ops for pointer types not defining ptr_limit
    
    commit f232326f6966cf2a1d1db7bc917a4ce5f9f55f76 upstream.
    
    The purpose of this patch is to streamline error propagation and in particular
    to propagate retrieve_ptr_limit() errors for pointer types that are not defining
    a ptr_limit such that register-based alu ops against these types can be rejected.
    
    The main rationale is that a gap has been identified by Piotr in the existing
    protection against speculatively out-of-bounds loads, for example, in case of
    ctx pointers, unprivileged programs can still perform pointer arithmetic. This
    can be abused to execute speculatively out-of-bounds loads without restrictions
    and thus extract contents of kernel memory.
    
    Fix this by rejecting unprivileged programs that attempt any pointer arithmetic
    on unprotected pointer types. The two affected ones are pointer to ctx as well
    as pointer to map. Field access to a modified ctx' pointer is rejected at a
    later point in time in the verifier, and 7c6967326267 ("bpf: Permit map_ptr
    arithmetic with opcode add and offset 0") only relevant for root-only use cases.
    Risk of unprivileged program breakage is considered very low.
    
    Fixes: 7c6967326267 ("bpf: Permit map_ptr arithmetic with opcode add and offset 0")
    Fixes: b2157399cc98 ("bpf: prevent out-of-bounds speculation")
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23ce6b7d40612b1166301f1abbfe9f4a69de69d0
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Wed Mar 17 11:50:31 2021 +0000

    KVM: arm64: nvhe: Save the SPE context early
    
    commit b96b0c5de685df82019e16826a282d53d86d112c upstream
    
    The nVHE KVM hyp drains and disables the SPE buffer, before
    entering the guest, as the EL1&0 translation regime
    is going to be loaded with that of the guest.
    
    But this operation is performed way too late, because :
     - The owning translation regime of the SPE buffer
       is transferred to EL2. (MDCR_EL2_E2PB == 0)
     - The guest Stage1 is loaded.
    
    Thus the flush could use the host EL1 virtual address,
    but use the EL2 translations instead of host EL1, for writing
    out any cached data.
    
    Fix this by moving the SPE buffer handling early enough.
    The restore path is doing the right thing.
    
    Cc: stable@vger.kernel.org # v4.19
    Cc: Christoffer Dall <christoffer.dall@arm.com>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Will Deacon <will@kernel.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a75a5d163857cd507255b04f8d11613978434636
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 17 17:23:31 2021 +0100

    ext4: check journal inode extents more carefully
    
    commit ce9f24cccdc019229b70a5c15e2b09ad9c0ab5d1 upstream.
    
    Currently, system zones just track ranges of block, that are "important"
    fs metadata (bitmaps, group descriptors, journal blocks, etc.). This
    however complicates how extent tree (or indirect blocks) can be checked
    for inodes that actually track such metadata - currently the journal
    inode but arguably we should be treating quota files or resize inode
    similarly. We cannot run __ext4_ext_check() on such metadata inodes when
    loading their extents as that would immediately trigger the validity
    checks and so we just hack around that and special-case the journal
    inode. This however leads to a situation that a journal inode which has
    extent tree of depth at least one can have invalid extent tree that gets
    unnoticed until ext4_cache_extents() crashes.
    
    To overcome this limitation, track inode number each system zone belongs
    to (0 is used for zones not belonging to any inode). We can then verify
    inode number matches the expected one when verifying extent tree and
    thus avoid the false errors. With this there's no need to to
    special-case journal inode during extent tree checking anymore so remove
    it.
    
    Fixes: 0a944e8a6c66 ("ext4: don't perform block validity checks on the journal inode")
    Reported-by: Wolfgang Frisch <wolfgang.frisch@suse.com>
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200728130437.7804-4-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
