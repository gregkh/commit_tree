commit 83f4462ce1557090edd040535e5055e1dcf36120
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 17 13:47:33 2019 -0700

    Linux 5.3.7

commit cb3f15959443101d2e63d776a4149e95b5ee88df
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Oct 8 11:01:53 2019 +0100

    efi/tpm: Fix sanity check of unsigned tbl_size being less than zero
    
    commit be59d57f98065af0b8472f66a0a969207b168680 upstream.
    
    Currently the check for tbl_size being less than zero is always false
    because tbl_size is unsigned. Fix this by making it a signed int.
    
    Addresses-Coverity: ("Unsigned compared against 0")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kernel-janitors@vger.kernel.org
    Cc: linux-efi@vger.kernel.org
    Fixes: e658c82be556 ("efi/tpm: Only set 'efi_tpm_final_log_size' after successful event log parsing")
    Link: https://lkml.kernel.org/r/20191008100153.8499-1-colin.king@canonical.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9392e3a7beef809bf244470ddffc4ef24c43c40f
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Oct 9 14:40:13 2019 -0600

    io_uring: only flush workqueues on fileset removal
    
    commit 8a99734081775c012a4a6c442fdef0379fe52bdf upstream.
    
    We should not remove the workqueue, we just need to ensure that the
    workqueues are synced. The workqueues are torn down on ctx removal.
    
    Cc: stable@vger.kernel.org
    Fixes: 6b06314c47e1 ("io_uring: add file set registration")
    Reported-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58cd9be912c3f8c2d29f3a8bb73badfbe739dfb6
Author: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
Date:   Mon Oct 7 19:00:22 2019 +0000

    x86/asm: Fix MWAITX C-state hint value
    
    commit 454de1e7d970d6bc567686052329e4814842867c upstream.
    
    As per "AMD64 Architecture Programmer's Manual Volume 3: General-Purpose
    and System Instructions", MWAITX EAX[7:4]+1 specifies the optional hint
    of the optimized C-state. For C0 state, EAX[7:4] should be set to 0xf.
    
    Currently, a value of 0xf is set for EAX[3:0] instead of EAX[7:4]. Fix
    this by changing MWAITX_DISABLE_CSTATES from 0xf to 0xf0.
    
    This hasn't had any implications so far because setting reserved bits in
    EAX is simply ignored by the CPU.
    
     [ bp: Fixup comment in delay_mwaitx() and massage. ]
    
    Signed-off-by: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Frederic Weisbecker <frederic@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "x86@kernel.org" <x86@kernel.org>
    Cc: Zhenzhong Duan <zhenzhong.duan@oracle.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20191007190011.4859-1-Janakarajan.Natarajan@amd.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68134f17d73ef0a75961bc53a031fd0821189a90
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Oct 4 18:41:30 2019 +0000

    mtd: rawnand: au1550nd: Fix au_read_buf16() prototype
    
    commit df8fed831cbcdce7b283b2d9c1aadadcf8940d05 upstream.
    
    Commit 7e534323c416 ("mtd: rawnand: Pass a nand_chip object to
    chip->read_xxx() hooks") modified the prototype of the struct nand_chip
    read_buf function pointer. In the au1550nd driver we have 2
    implementations of read_buf. The previously mentioned commit modified
    the au_read_buf() implementation to match the function pointer, but not
    au_read_buf16(). This results in a compiler warning for MIPS
    db1xxx_defconfig builds:
    
      drivers/mtd/nand/raw/au1550nd.c:443:57:
        warning: pointer type mismatch in conditional expression
    
    Fix this by updating the prototype of au_read_buf16() to take a struct
    nand_chip pointer as its first argument, as is expected after commit
    7e534323c416 ("mtd: rawnand: Pass a nand_chip object to chip->read_xxx()
    hooks").
    
    Note that this shouldn't have caused any functional issues at runtime,
    since the offset of the struct mtd_info within struct nand_chip is 0
    making mtd_to_nand() effectively a type-cast.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 7e534323c416 ("mtd: rawnand: Pass a nand_chip object to chip->read_xxx() hooks")
    Cc: stable@vger.kernel.org # v4.20+
    Reviewed-by: Boris Brezillon <boris.brezillon@collabora.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e378fa0fcda5186c40020f102c40feea7082a1a
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Tue Sep 24 14:49:43 2019 +0200

    hwmon: Fix HWMON_P_MIN_ALARM mask
    
    commit 30945d31e5761436d9eba6b8cff468a5f7c9c266 upstream.
    
    Both HWMON_P_MIN_ALARM and HWMON_P_MAX_ALARM were using
    BIT(hwmon_power_max_alarm).
    
    Fixes: aa7f29b07c870 ("hwmon: Add support for power min, lcrit, min_alarm and lcrit_alarm")
    CC: <stable@vger.kernel.org>
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20190924124945.491326-2-nuno.sa@analog.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2851a66c6243e93615f7fff00ecb56dd1e58e323
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Oct 11 18:19:17 2019 -0400

    tracing: Get trace_array reference for available_tracers files
    
    commit 194c2c74f5532e62c218adeb8e2b683119503907 upstream.
    
    As instances may have different tracers available, we need to look at the
    trace_array descriptor that shows the list of the available tracers for the
    instance. But there's a race between opening the file and an admin
    deleting the instance. The trace_array_get() needs to be called before
    accessing the trace_array.
    
    Cc: stable@vger.kernel.org
    Fixes: 607e2ea167e56 ("tracing: Set up infrastructure to allow tracers for instances")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4887abbcb6357005fbf684b29e8a36da05f5abe9
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Oct 11 17:56:57 2019 -0400

    ftrace: Get a reference counter for the trace_array on filter files
    
    commit 9ef16693aff8137faa21d16ffe65bb9832d24d71 upstream.
    
    The ftrace set_ftrace_filter and set_ftrace_notrace files are specific for
    an instance now. They need to take a reference to the instance otherwise
    there could be a race between accessing the files and deleting the instance.
    
    It wasn't until the :mod: caching where these file operations started
    referencing the trace_array directly.
    
    Cc: stable@vger.kernel.org
    Fixes: 673feb9d76ab3 ("ftrace: Add :mod: caching infrastructure to trace_array")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dd65ecad9d832c9d8112b4822c1dea5f3882699
Author: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
Date:   Thu Oct 10 11:51:01 2019 -0700

    tracing/hwlat: Don't ignore outer-loop duration when calculating max_latency
    
    commit fc64e4ad80d4b72efce116f87b3174f0b7196f8e upstream.
    
    max_latency is intended to record the maximum ever observed hardware
    latency, which may occur in either part of the loop (inner/outer). So
    we need to also consider the outer-loop sample when updating
    max_latency.
    
    Link: http://lkml.kernel.org/r/157073345463.17189.18124025522664682811.stgit@srivatsa-ubuntu
    
    Fixes: e7c15cd8a113 ("tracing: Added hardware latency tracer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86012359cfa0a78aff030b3b804b7b812a0cfbbe
Author: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
Date:   Thu Oct 10 11:50:46 2019 -0700

    tracing/hwlat: Report total time spent in all NMIs during the sample
    
    commit 98dc19c11470ee6048aba723d77079ad2cda8a52 upstream.
    
    nmi_total_ts is supposed to record the total time spent in *all* NMIs
    that occur on the given CPU during the (active portion of the)
    sampling window. However, the code seems to be overwriting this
    variable for each NMI, thereby only recording the time spent in the
    most recent NMI. Fix it by accumulating the duration instead.
    
    Link: http://lkml.kernel.org/r/157073343544.17189.13911783866738671133.stgit@srivatsa-ubuntu
    
    Fixes: 7b2c86250122 ("tracing: Add NMI tracing in hwlat detector")
    Cc: stable@vger.kernel.org
    Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24d806b80b193945ca66187d5dc2eada0a5c2511
Author: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
Date:   Mon Sep 30 16:56:00 2019 -0400

    arm64/sve: Fix wrong free for task->thread.sve_state
    
    commit 4585fc59c0e813188d6a4c5de1f6976fce461fc2 upstream.
    
    The system which has SVE feature crashed because of
    the memory pointed by task->thread.sve_state was destroyed
    by someone.
    
    That is because sve_state is freed while the forking the
    child process. The child process has the pointer of sve_state
    which is same as the parent's because the child's task_struct
    is copied from the parent's one. If the copy_process()
    fails as an error on somewhere, for example, copy_creds(),
    then the sve_state is freed even if the parent is alive.
    The flow is as follows.
    
    copy_process
            p = dup_task_struct
                => arch_dup_task_struct
                    *dst = *src;  // copy the entire region.
    :
            retval = copy_creds
            if (retval < 0)
                    goto bad_fork_free;
    :
    bad_fork_free:
    ...
            delayed_free_task(p);
              => free_task
                 => arch_release_task_struct
                    => fpsimd_release_task
                       => __sve_free
                          => kfree(task->thread.sve_state);
                             // free the parent's sve_state
    
    Move child's sve_state = NULL and clearing TIF_SVE flag
    to arch_dup_task_struct() so that the child doesn't free the
    parent's one.
    There is no need to wait until copy_process() to clear TIF_SVE for
    dst, because the thread flags for dst are initialized already by
    copying the src task_struct.
    This change simplifies the code, so get rid of comments that are no
    longer needed.
    
    As a note, arm64 used to have thread_info on the stack. So it
    would not be possible to clear TIF_SVE until the stack is initialized.
    From commit c02433dd6de3 ("arm64: split thread_info from task stack"),
    the thread_info is part of the task, so it should be valid to modify
    the flag from arch_dup_task_struct().
    
    Cc: stable@vger.kernel.org # 4.15.x-
    Fixes: bc0ee4760364 ("arm64/sve: Core task context handling")
    Signed-off-by: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Reported-by: Hidetoshi Seto <seto.hidetoshi@jp.fujitsu.com>
    Suggested-by: Dave Martin <Dave.Martin@arm.com>
    Reviewed-by: Dave Martin <Dave.Martin@arm.com>
    Tested-by: Julien Grall <julien.grall@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 115e3c3a5281398776251cb3d611c71b03c4c547
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 10:49:08 2019 +0200

    media: stkwebcam: fix runtime PM after driver unbind
    
    commit 30045f2174aab7fb4db7a9cf902d0aa6c75856a7 upstream.
    
    Since commit c2b71462d294 ("USB: core: Fix bug caused by duplicate
    interface PM usage counter") USB drivers must always balance their
    runtime PM gets and puts, including when the driver has already been
    unbound from the interface.
    
    Leaving the interface with a positive PM usage counter would prevent a
    later bound driver from suspending the device.
    
    Note that runtime PM has never actually been enabled for this driver
    since the support_autosuspend flag in its usb_driver struct is not set.
    
    Fixes: c2b71462d294 ("USB: core: Fix bug caused by duplicate interface PM usage counter")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191001084908.2003-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c2b5b18aa19f1863bc36c660f2729cd297d0a82
Author: Rob Clark <robdclark@chromium.org>
Date:   Wed Sep 4 09:56:03 2019 -0700

    drm/msm: Use the correct dma_sync calls harder
    
    commit 9f614197c744002f9968e82c649fdf7fe778e1e7 upstream.
    
    Looks like the dma_sync calls don't do what we want on armv7 either.
    Fixes:
    
      Unable to handle kernel paging request at virtual address 50001000
      pgd = (ptrval)
      [50001000] *pgd=00000000
      Internal error: Oops: 805 [#1] SMP ARM
      Modules linked in:
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.3.0-rc6-00271-g9f159ae07f07 #4
      Hardware name: Freescale i.MX53 (Device Tree Support)
      PC is at v7_dma_clean_range+0x20/0x38
      LR is at __dma_page_cpu_to_dev+0x28/0x90
      pc : [<c011c76c>]    lr : [<c01181c4>]    psr: 20000013
      sp : d80b5a88  ip : de96c000  fp : d840ce6c
      r10: 00000000  r9 : 00000001  r8 : d843e010
      r7 : 00000000  r6 : 00008000  r5 : ddb6c000  r4 : 00000000
      r3 : 0000003f  r2 : 00000040  r1 : 50008000  r0 : 50001000
      Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
      Control: 10c5387d  Table: 70004019  DAC: 00000051
      Process swapper/0 (pid: 1, stack limit = 0x(ptrval))
    
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Fixes: 3de433c5b38a ("drm/msm: Use the correct dma_sync calls in msm_gem")
    Tested-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2511690fd8d981796d325c0bf4e8a8fcceaf570
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Sep 20 13:18:21 2019 +0100

    drm/i915: Mark contents as dirty on a write fault
    
    commit b925708f28c2b7a3a362d709bd7f77bc75c1daac upstream.
    
    Since dropping the set-to-gtt-domain in commit a679f58d0510 ("drm/i915:
    Flush pages on acquisition"), we no longer mark the contents as dirty on
    a write fault. This has the issue of us then not marking the pages as
    dirty on releasing the buffer, which means the contents are not written
    out to the swap device (should we ever pick that buffer as a victim).
    Notably, this is visible in the dumb buffer interface used for cursors.
    Having updated the cursor contents via mmap, and swapped away, if the
    shrinker should evict the old cursor, upon next reuse, the cursor would
    be invisible.
    
    E.g. echo 80 > /proc/sys/kernel/sysrq ; echo f > /proc/sysrq-trigger
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=111541
    Fixes: a679f58d0510 ("drm/i915: Flush pages on acquisition")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Matthew Auld <matthew.william.auld@gmail.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.2+
    Reviewed-by: Matthew Auld <matthew.william.auld@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190920121821.7223-1-chris@chris-wilson.co.uk
    (cherry picked from commit 5028851cdfdf78dc22eacbc44a0ab0b3f599ee4a)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba1b7f4c2392eff0d9e7c43bd45e7142048054f8
Author: Kenneth Graunke <kenneth@whitecape.org>
Date:   Tue Sep 10 18:48:01 2019 -0700

    drm/i915: Whitelist COMMON_SLICE_CHICKEN2
    
    commit 282b7fd5f5ab4eba499e1162c1e2802c6d0bb82e upstream.
    
    This allows userspace to use "legacy" mode for push constants, where
    they are committed at 3DPRIMITIVE or flush time, rather than being
    committed at 3DSTATE_BINDING_TABLE_POINTERS_XS time.  Gen6-8 and Gen11
    both use the "legacy" behavior - only Gen9 works in the "new" way.
    
    Conflating push constants with binding tables is painful for userspace,
    we would like to be able to avoid doing so.
    
    Signed-off-by: Kenneth Graunke <kenneth@whitecape.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190911014801.26821-1-kenneth@whitecape.org
    (cherry picked from commit 0606259e3b3a1220a0f04a92a1654a3f674f47ee)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e0f832304d822ef0b8a2d728f72d62ca5a9acf5
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Sep 5 16:50:43 2019 +0300

    drm/i915: Bump skl+ max plane width to 5k for linear/x-tiled
    
    commit dc7890995e04bacb45ab21e0daaeae1e7c803eb3 upstream.
    
    The officially validated plane width limit is 4k on skl+, however
    we already had people using 5k displays before we started to enforce
    the limit. Also it seems Windows allows 5k resolutions as well
    (though not sure if they do it with one plane or two).
    
    According to hw folks 5k should work with the possible
    exception of the following features:
    - Ytile (already limited to 4k)
    - FP16 (already limited to 4k)
    - render compression (already limited to 4k)
    - KVMR sprite and cursor (don't care)
    - horizontal panning (need to verify this)
    - pipe and plane scaling (need to verify this)
    
    So apart from last two items on that list we are already
    fine. We should really verify what happens with those last
    two items but I don't have a 5k display on hand atm so it'll
    have to wait.
    
    In the meantime let's just bump the limit back up to 5k since
    several users have already been using it without apparent issues.
    At least we'll be no worse off than we were prior to lowering
    the limits.
    
    Cc: stable@vger.kernel.org
    Cc: Sean Paul <sean@poorly.run>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Tested-by: Leho Kraav <leho@kraav.com>
    Fixes: 372b9ffb5799 ("drm/i915: Fix skl+ max plane width")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=111501
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190905135044.2001-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Sean Paul <sean@poorly.run>
    (cherry picked from commit bed34ef544f9ab37ab349c04cf4142282c4dcf5d)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86163760e2a59434cf4f45c21462d75a734c1c85
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Sep 15 12:12:39 2019 -0400

    Fix the locking in dcache_readdir() and friends
    
    commit d4f4de5e5ef8efde85febb6876cd3c8ab1631999 upstream.
    
    There are two problems in dcache_readdir() - one is that lockless traversal
    of the list needs non-trivial cooperation of d_alloc() (at least a switch
    to list_add_rcu(), and probably more than just that) and another is that
    it assumes that no removal will happen without the directory locked exclusive.
    Said assumption had always been there, never had been stated explicitly and
    is violated by several places in the kernel (devpts and selinuxfs).
    
            * replacement of next_positive() with different calling conventions:
    it returns struct list_head * instead of struct dentry *; the latter is
    passed in and out by reference, grabbing the result and dropping the original
    value.
            * scan is under ->d_lock.  If we run out of timeslice, cursor is moved
    after the last position we'd reached and we reschedule; then the scan continues
    from that place.  To avoid livelocks between multiple lseek() (with cursors
    getting moved past each other, never reaching the real entries) we always
    skip the cursors, need_resched() or not.
            * returned list_head * is either ->d_child of dentry we'd found or
    ->d_subdirs of parent (if we got to the end of the list).
            * dcache_readdir() and dcache_dir_lseek() switched to new helper.
    dcache_readdir() always holds a reference to dentry passed to dir_emit() now.
    Cursor is moved to just before the entry where dir_emit() has failed or into
    the very end of the list, if we'd run out.
            * move_cursor() eliminated - it had sucky calling conventions and
    after fixing that it became simply list_move() (in lseek and scan_positives)
    or list_move_tail() (in readdir).
    
            All operations with the list are under ->d_lock now, and we do not
    depend upon having all file removals done with parent locked exclusive
    anymore.
    
    Cc: stable@vger.kernel.org
    Reported-by: "zhengbin (A)" <zhengbin13@huawei.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c57aac26b21ec01dcf6e6ae84f12963ece70bf32
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Tue Sep 17 16:56:36 2019 +0200

    iio: light: fix vcnl4000 devicetree hooks
    
    [ Upstream commit 1436a78c63495dd94c8d4f84a76d78d5317d481b ]
    
    Since commit ebd457d55911 ("iio: light: vcnl4000 add devicetree hooks")
    the of_match_table is supported but the data shouldn't be a string.
    Instead it shall be one of 'enum vcnl4000_device_ids'. Also the matching
    logic for the vcnl4020 was wrong. Since the data retrieve mechanism is
    still based on the i2c_device_id no failures did appeared till now.
    
    Fixes: ebd457d55911 ("iio: light: vcnl4000 add devicetree hooks")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Reviewed-by: Angus Ainslie (Purism) angus@akkea.ca
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37518c7f00aabc61cc0eabe0492b426c5be0c70c
Author: Jeremy Linton <jeremy.linton@arm.com>
Date:   Mon Oct 14 19:56:02 2019 +0800

    arm64: topology: Use PPTT to determine if PE is a thread
    
    Commit 98dc19902a0b2e5348e43d6a2c39a0a7d0fc639e upstream.
    
    ACPI 6.3 adds a thread flag to represent if a CPU/PE is
    actually a thread. Given that the MPIDR_MT bit may not
    represent this information consistently on homogeneous machines
    we should prefer the PPTT flag if its available.
    
    Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Reviewed-by: Robert Richter <rrichter@marvell.com>
    [will: made acpi_cpu_is_threaded() return 'bool']
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1edabfff9d2d7607b2df7b4122315bcb420567df
Author: Jeremy Linton <jeremy.linton@arm.com>
Date:   Mon Oct 14 19:56:01 2019 +0800

    ACPI/PPTT: Add support for ACPI 6.3 thread flag
    
    Commit bbd1b70639f785a970d998f35155c713f975e3ac upstream.
    
    ACPI 6.3 adds a flag to the CPU node to indicate whether
    the given PE is a thread. Add a function to return that
    information for a given linux logical CPU.
    
    Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Reviewed-by: Robert Richter <rrichter@marvell.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da536d06b60ac9472dedfc3f9e4675d03db45c9e
Author: Adit Ranadive <aditr@vmware.com>
Date:   Wed Sep 18 23:08:00 2019 +0000

    RDMA/vmw_pvrdma: Free SRQ only once
    
    commit 18545e8b6871d21aa3386dc42867138da9948a33 upstream.
    
    An extra kfree cleanup was missed since these are now deallocated by core.
    
    Link: https://lore.kernel.org/r/1568848066-12449-1-git-send-email-aditr@vmware.com
    Cc: <stable@vger.kernel.org>
    Fixes: 68e326dea1db ("RDMA: Handle SRQ allocations by IB/core")
    Signed-off-by: Adit Ranadive <aditr@vmware.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98359f0d162b66a9d8267716a746005936e5a692
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Thu Oct 10 23:01:57 2019 +0800

    MIPS: elf_hwcap: Export userspace ASEs
    
    commit 38dffe1e4dde1d3174fdce09d67370412843ebb5 upstream.
    
    A Golang developer reported MIPS hwcap isn't reflecting instructions
    that the processor actually supported so programs can't apply optimized
    code at runtime.
    
    Thus we export the ASEs that can be used in userspace programs.
    
    Reported-by: Meng Zhuo <mengzhuo1203@gmail.com>
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: linux-mips@vger.kernel.org
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 594f9546eee0b296cdb9c5e6030ff5d98f770da1
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Oct 10 18:54:03 2019 +0000

    MIPS: Disable Loongson MMI instructions for kernel build
    
    commit 2f2b4fd674cadd8c6b40eb629e140a14db4068fd upstream.
    
    GCC 9.x automatically enables support for Loongson MMI instructions when
    using some -march= flags, and then errors out when -msoft-float is
    specified with:
    
      cc1: error: ‘-mloongson-mmi’ must be used with ‘-mhard-float’
    
    The kernel shouldn't be using these MMI instructions anyway, just as it
    doesn't use floating point instructions. Explicitly disable them in
    order to fix the build with GCC 9.x.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 3702bba5eb4f ("MIPS: Loongson: Add GCC 4.4 support for Loongson2E")
    Fixes: 6f7a251a259e ("MIPS: Loongson: Add basic Loongson 2F support")
    Fixes: 5188129b8c9f ("MIPS: Loongson-3: Improve -march option and move it to Platform")
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: stable@vger.kernel.org # v2.6.32+
    Cc: linux-mips@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ee51346c7cef7817cd91f91a7e04c04066db3c0
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Mon Sep 30 14:02:56 2019 -0400

    NFS: Fix O_DIRECT accounting of number of bytes read/written
    
    commit 031d73ed768a40684f3ca21992265ffdb6a270bf upstream.
    
    When a series of O_DIRECT reads or writes are truncated, either due to
    eof or due to an error, then we should return the number of contiguous
    bytes that were received/sent starting at the offset specified by the
    application.
    
    Currently, we are failing to correctly check contiguity, and so we're
    failing the generic/465 in xfstests when the race between the read
    and write RPCs causes the file to get extended while the 2 reads are
    outstanding. If the first read RPC call wins the race and returns with
    eof set, we should treat the second read RPC as being truncated.
    
    Reported-by: Su Yanjun <suyj.fnst@cn.fujitsu.com>
    Fixes: 1ccbad9f9f9bd ("nfs: fix DIO good bytes calculation")
    Cc: stable@vger.kernel.org # 4.1+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5cec182bdf97e14aef08f8a4163f62f2f74d17c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Oct 2 10:03:36 2019 -0400

    btrfs: fix uninitialized ret in ref-verify
    
    commit c5f4987e86f6692fdb12533ea1fc7a7bb98e555a upstream.
    
    Coverity caught a case where we could return with a uninitialized value
    in ret in process_leaf.  This is actually pretty likely because we could
    very easily run into a block group item key and have a garbage value in
    ret and think there was an errror.  Fix this by initializing ret to 0.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Fixes: fd708b81d972 ("Btrfs: add a extent ref verify tool")
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aad4c2725c0a2475e764394d231f6cdd9f0bd731
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Sep 30 16:27:25 2019 -0400

    btrfs: fix incorrect updating of log root tree
    
    commit 4203e968947071586a98b5314fd7ffdea3b4f971 upstream.
    
    We've historically had reports of being unable to mount file systems
    because the tree log root couldn't be read.  Usually this is the "parent
    transid failure", but could be any of the related errors, including
    "fsid mismatch" or "bad tree block", depending on which block got
    allocated.
    
    The modification of the individual log root items are serialized on the
    per-log root root_mutex.  This means that any modification to the
    per-subvol log root_item is completely protected.
    
    However we update the root item in the log root tree outside of the log
    root tree log_mutex.  We do this in order to allow multiple subvolumes
    to be updated in each log transaction.
    
    This is problematic however because when we are writing the log root
    tree out we update the super block with the _current_ log root node
    information.  Since these two operations happen independently of each
    other, you can end up updating the log root tree in between writing out
    the dirty blocks and setting the super block to point at the current
    root.
    
    This means we'll point at the new root node that hasn't been written
    out, instead of the one we should be pointing at.  Thus whatever garbage
    or old block we end up pointing at complains when we mount the file
    system later and try to replay the log.
    
    Fix this by copying the log's root item into a local root item copy.
    Then once we're safely under the log_root_tree->log_mutex we update the
    root item in the log_root_tree.  This way we do not modify the
    log_root_tree while we're committing it, fixing the problem.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Chris Mason <clm@fb.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d2c28f617888ec0cf13a4f68ab256f07585d2ee
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 30 10:20:25 2019 +0100

    Btrfs: fix memory leak due to concurrent append writes with fiemap
    
    commit c67d970f0ea8dcc423e112137d34334fa0abb8ec upstream.
    
    When we have a buffered write that starts at an offset greater than or
    equals to the file's size happening concurrently with a full ranged
    fiemap, we can end up leaking an extent state structure.
    
    Suppose we have a file with a size of 1Mb, and before the buffered write
    and fiemap are performed, it has a single extent state in its io tree
    representing the range from 0 to 1Mb, with the EXTENT_DELALLOC bit set.
    
    The following sequence diagram shows how the memory leak happens if a
    fiemap a buffered write, starting at offset 1Mb and with a length of
    4Kb, are performed concurrently.
    
              CPU 1                                                  CPU 2
    
      extent_fiemap()
        --> it's a full ranged fiemap
            range from 0 to LLONG_MAX - 1
            (9223372036854775807)
    
        --> locks range in the inode's
            io tree
          --> after this we have 2 extent
              states in the io tree:
              --> 1 for range [0, 1Mb[ with
                  the bits EXTENT_LOCKED and
                  EXTENT_DELALLOC_BITS set
              --> 1 for the range
                  [1Mb, LLONG_MAX[ with
                  the EXTENT_LOCKED bit set
    
                                                      --> start buffered write at offset
                                                          1Mb with a length of 4Kb
    
                                                      btrfs_file_write_iter()
    
                                                        btrfs_buffered_write()
                                                          --> cached_state is NULL
    
                                                          lock_and_cleanup_extent_if_need()
                                                            --> returns 0 and does not lock
                                                                range because it starts
                                                                at current i_size / eof
    
                                                          --> cached_state remains NULL
    
                                                          btrfs_dirty_pages()
                                                            btrfs_set_extent_delalloc()
                                                              (...)
                                                              __set_extent_bit()
    
                                                                --> splits extent state for range
                                                                    [1Mb, LLONG_MAX[ and now we
                                                                    have 2 extent states:
    
                                                                    --> one for the range
                                                                        [1Mb, 1Mb + 4Kb[ with
                                                                        EXTENT_LOCKED set
                                                                    --> another one for the range
                                                                        [1Mb + 4Kb, LLONG_MAX[ with
                                                                        EXTENT_LOCKED set as well
    
                                                                --> sets EXTENT_DELALLOC on the
                                                                    extent state for the range
                                                                    [1Mb, 1Mb + 4Kb[
                                                                --> caches extent state
                                                                    [1Mb, 1Mb + 4Kb[ into
                                                                    @cached_state because it has
                                                                    the bit EXTENT_LOCKED set
    
                                                        --> btrfs_buffered_write() ends up
                                                            with a non-NULL cached_state and
                                                            never calls anything to release its
                                                            reference on it, resulting in a
                                                            memory leak
    
    Fix this by calling free_extent_state() on cached_state if the range was
    not locked by lock_and_cleanup_extent_if_need().
    
    The same issue can happen if anything else other than fiemap locks a range
    that covers eof and beyond.
    
    This could be triggered, sporadically, by test case generic/561 from the
    fstests suite, which makes duperemove run concurrently with fsstress, and
    duperemove does plenty of calls to fiemap. When CONFIG_BTRFS_DEBUG is set
    the leak is reported in dmesg/syslog when removing the btrfs module with
    a message like the following:
    
      [77100.039461] BTRFS: state leak: start 6574080 end 6582271 state 16402 in tree 0 refs 1
    
    Otherwise (CONFIG_BTRFS_DEBUG not set) detectable with kmemleak.
    
    CC: stable@vger.kernel.org # 4.16+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8daddd6c332ada05b2bc5fb2ffb506769e7151b8
Author: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
Date:   Thu Sep 12 19:55:01 2019 -0400

    btrfs: fix balance convert to single on 32-bit host CPUs
    
    commit 7a54789074a54f64addf5b49bf1994f478337a83 upstream.
    
    Currently, the command:
    
            btrfs balance start -dconvert=single,soft .
    
    on a Raspberry Pi produces the following kernel message:
    
            BTRFS error (device mmcblk0p2): balance: invalid convert data profile single
    
    This fails because we use is_power_of_2(unsigned long) to validate
    the new data profile, the constant for 'single' profile uses bit 48,
    and there are only 32 bits in a long on ARM.
    
    Fix by open-coding the check using u64 variables.
    
    Tested by completing the original balance command on several Raspberry
    Pis.
    
    Fixes: 818255feece6 ("btrfs: use common helper instead of open coding a bit test")
    CC: stable@vger.kernel.org # 4.20+
    Signed-off-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03fc8cdc5b99a16e0bde44515139efe8053c6772
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Sep 9 10:12:04 2019 -0400

    btrfs: allocate new inode in NOFS context
    
    commit 11a19a90870ea5496a8ded69b86f5b476b6d3355 upstream.
    
    A user reported a lockdep splat
    
     ======================================================
     WARNING: possible circular locking dependency detected
     5.2.11-gentoo #2 Not tainted
     ------------------------------------------------------
     kswapd0/711 is trying to acquire lock:
     000000007777a663 (sb_internal){.+.+}, at: start_transaction+0x3a8/0x500
    
    but task is already holding lock:
     000000000ba86300 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x0/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
     kmem_cache_alloc+0x1f/0x1c0
     btrfs_alloc_inode+0x1f/0x260
     alloc_inode+0x16/0xa0
     new_inode+0xe/0xb0
     btrfs_new_inode+0x70/0x610
     btrfs_symlink+0xd0/0x420
     vfs_symlink+0x9c/0x100
     do_symlinkat+0x66/0xe0
     do_syscall_64+0x55/0x1c0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (sb_internal){.+.+}:
     __sb_start_write+0xf6/0x150
     start_transaction+0x3a8/0x500
     btrfs_commit_inode_delayed_inode+0x59/0x110
     btrfs_evict_inode+0x19e/0x4c0
     evict+0xbc/0x1f0
     inode_lru_isolate+0x113/0x190
     __list_lru_walk_one.isra.4+0x5c/0x100
     list_lru_walk_one+0x32/0x50
     prune_icache_sb+0x36/0x80
     super_cache_scan+0x14a/0x1d0
     do_shrink_slab+0x131/0x320
     shrink_node+0xf7/0x380
     balance_pgdat+0x2d5/0x640
     kswapd+0x2ba/0x5e0
     kthread+0x147/0x160
     ret_from_fork+0x24/0x30
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
     CPU0 CPU1
     ---- ----
     lock(fs_reclaim);
     lock(sb_internal);
     lock(fs_reclaim);
     lock(sb_internal);

commit aed6d5d61352563e5802425549f87a24607bb01e
Author: Qu Wenruo <wqu@suse.com>
Date:   Mon Sep 23 14:56:14 2019 +0800

    btrfs: relocation: fix use-after-free on dead relocation roots
    
    commit 1fac4a54374f7ef385938f3c6cf7649c0fe4f6cd upstream.
    
    [BUG]
    One user reported a reproducible KASAN report about use-after-free:
    
      BTRFS info (device sdi1): balance: start -dvrange=1256811659264..1256811659265
      BTRFS info (device sdi1): relocating block group 1256811659264 flags data|raid0
      ==================================================================
      BUG: KASAN: use-after-free in btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
      Write of size 8 at addr ffff88856f671710 by task kworker/u24:10/261579
    
      CPU: 2 PID: 261579 Comm: kworker/u24:10 Tainted: P           OE     5.2.11-arch1-1-kasan #4
      Hardware name: To Be Filled By O.E.M. To Be Filled By O.E.M./X99 Extreme4, BIOS P3.80 04/06/2018
      Workqueue: btrfs-endio-write btrfs_endio_write_helper [btrfs]
      Call Trace:
       dump_stack+0x7b/0xba
       print_address_description+0x6c/0x22e
       ? btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
       __kasan_report.cold+0x1b/0x3b
       ? btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
       kasan_report+0x12/0x17
       __asan_report_store8_noabort+0x17/0x20
       btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
       record_root_in_trans+0x2a0/0x370 [btrfs]
       btrfs_record_root_in_trans+0xf4/0x140 [btrfs]
       start_transaction+0x1ab/0xe90 [btrfs]
       btrfs_join_transaction+0x1d/0x20 [btrfs]
       btrfs_finish_ordered_io+0x7bf/0x18a0 [btrfs]
       ? lock_repin_lock+0x400/0x400
       ? __kmem_cache_shutdown.cold+0x140/0x1ad
       ? btrfs_unlink_subvol+0x9b0/0x9b0 [btrfs]
       finish_ordered_fn+0x15/0x20 [btrfs]
       normal_work_helper+0x1bd/0xca0 [btrfs]
       ? process_one_work+0x819/0x1720
       ? kasan_check_read+0x11/0x20
       btrfs_endio_write_helper+0x12/0x20 [btrfs]
       process_one_work+0x8c9/0x1720
       ? pwq_dec_nr_in_flight+0x2f0/0x2f0
       ? worker_thread+0x1d9/0x1030
       worker_thread+0x98/0x1030
       kthread+0x2bb/0x3b0
       ? process_one_work+0x1720/0x1720
       ? kthread_park+0x120/0x120
       ret_from_fork+0x35/0x40
    
      Allocated by task 369692:
       __kasan_kmalloc.part.0+0x44/0xc0
       __kasan_kmalloc.constprop.0+0xba/0xc0
       kasan_kmalloc+0x9/0x10
       kmem_cache_alloc_trace+0x138/0x260
       btrfs_read_tree_root+0x92/0x360 [btrfs]
       btrfs_read_fs_root+0x10/0xb0 [btrfs]
       create_reloc_root+0x47d/0xa10 [btrfs]
       btrfs_init_reloc_root+0x1e2/0x340 [btrfs]
       record_root_in_trans+0x2a0/0x370 [btrfs]
       btrfs_record_root_in_trans+0xf4/0x140 [btrfs]
       start_transaction+0x1ab/0xe90 [btrfs]
       btrfs_start_transaction+0x1e/0x20 [btrfs]
       __btrfs_prealloc_file_range+0x1c2/0xa00 [btrfs]
       btrfs_prealloc_file_range+0x13/0x20 [btrfs]
       prealloc_file_extent_cluster+0x29f/0x570 [btrfs]
       relocate_file_extent_cluster+0x193/0xc30 [btrfs]
       relocate_data_extent+0x1f8/0x490 [btrfs]
       relocate_block_group+0x600/0x1060 [btrfs]
       btrfs_relocate_block_group+0x3a0/0xa00 [btrfs]
       btrfs_relocate_chunk+0x9e/0x180 [btrfs]
       btrfs_balance+0x14e4/0x2fc0 [btrfs]
       btrfs_ioctl_balance+0x47f/0x640 [btrfs]
       btrfs_ioctl+0x119d/0x8380 [btrfs]
       do_vfs_ioctl+0x9f5/0x1060
       ksys_ioctl+0x67/0x90
       __x64_sys_ioctl+0x73/0xb0
       do_syscall_64+0xa5/0x370
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Freed by task 369692:
       __kasan_slab_free+0x14f/0x210
       kasan_slab_free+0xe/0x10
       kfree+0xd8/0x270
       btrfs_drop_snapshot+0x154c/0x1eb0 [btrfs]
       clean_dirty_subvols+0x227/0x340 [btrfs]
       relocate_block_group+0x972/0x1060 [btrfs]
       btrfs_relocate_block_group+0x3a0/0xa00 [btrfs]
       btrfs_relocate_chunk+0x9e/0x180 [btrfs]
       btrfs_balance+0x14e4/0x2fc0 [btrfs]
       btrfs_ioctl_balance+0x47f/0x640 [btrfs]
       btrfs_ioctl+0x119d/0x8380 [btrfs]
       do_vfs_ioctl+0x9f5/0x1060
       ksys_ioctl+0x67/0x90
       __x64_sys_ioctl+0x73/0xb0
       do_syscall_64+0xa5/0x370
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      The buggy address belongs to the object at ffff88856f671100
       which belongs to the cache kmalloc-4k of size 4096
      The buggy address is located 1552 bytes inside of
       4096-byte region [ffff88856f671100, ffff88856f672100)
      The buggy address belongs to the page:
      page:ffffea0015bd9c00 refcount:1 mapcount:0 mapping:ffff88864400e600 index:0x0 compound_mapcount: 0
      flags: 0x2ffff0000010200(slab|head)
      raw: 02ffff0000010200 dead000000000100 dead000000000200 ffff88864400e600
      raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
      page dumped because: kasan: bad access detected
    
      Memory state around the buggy address:
       ffff88856f671600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff88856f671680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      >ffff88856f671700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                               ^
       ffff88856f671780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff88856f671800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ==================================================================
      BTRFS info (device sdi1): 1 enospc errors during balance
      BTRFS info (device sdi1): balance: ended with status: -28
    
    [CAUSE]
    The problem happens when finish_ordered_io() get called with balance
    still running, while the reloc root of that subvolume is already dead.
    (Tree is swap already done, but tree not yet deleted for possible qgroup
    usage.)
    
    That means root->reloc_root still exists, but that reloc_root can be
    under btrfs_drop_snapshot(), thus we shouldn't access it.
    
    The following race could cause the use-after-free problem:
    
                    CPU1              |                CPU2
    --------------------------------------------------------------------------
                                      | relocate_block_group()
                                      | |- unset_reloc_control(rc)
                                      | |- btrfs_commit_transaction()
    btrfs_finish_ordered_io()         | |- clean_dirty_subvols()
    |- btrfs_join_transaction()       |    |
       |- record_root_in_trans()      |    |
          |- btrfs_init_reloc_root()  |    |
             |- if (root->reloc_root) |    |
             |                        |    |- root->reloc_root = NULL
             |                        |    |- btrfs_drop_snapshot(reloc_root);
             |- reloc_root->last_trans|
                     = trans->transid |
                ^^^^^^^^^^^^^^^^^^^^^^
                Use after free
    
    [FIX]
    Fix it by the following modifications:
    
    - Test if the root has dead reloc tree before accessing root->reloc_root
      If the root has BTRFS_ROOT_DEAD_RELOC_TREE, then we don't need to
      create or update root->reloc_tree
    
    - Clear the BTRFS_ROOT_DEAD_RELOC_TREE flag until we have fully dropped
      reloc tree
      To co-operate with above modification, so as long as
      BTRFS_ROOT_DEAD_RELOC_TREE is still set, we won't try to re-create
      reloc tree at record_root_in_trans().
    
    Reported-by: Cebtenzzre <cebtenzzre@gmail.com>
    Fixes: d2311e698578 ("btrfs: relocation: Delay reloc tree deletion after merge_reloc_roots")
    CC: stable@vger.kernel.org # 5.1+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b095c9ac6adb26a7da2a90f64f4487d1f676c6a9
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Oct 14 17:54:35 2019 +0200

    gpiolib: don't clear FLAG_IS_OUT when emulating open-drain/open-source
    
    [ Upstream commit e735244e2cf068f98b6384681a38993e0517a838 ]
    
    When emulating open-drain/open-source by not actively driving the output
    lines - we're simply changing their mode to input. This is wrong as it
    will then make it impossible to change the value of such line - it's now
    considered to actually be in input mode. If we want to still use the
    direction_input() callback for simplicity then we need to set FLAG_IS_OUT
    manually in gpiod_direction_output() and not clear it in
    gpio_set_open_drain_value_commit() and
    gpio_set_open_source_value_commit().
    
    Fixes: c663e5f56737 ("gpio: support native single-ended hardware drivers")
    Cc: stable@vger.kernel.org
    Reported-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    [Bartosz: backported to v5.3, v4.19]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 778df553b256b400098c7c84eee72bad9f04cef8
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Mon Oct 14 17:53:41 2019 +0200

    gpio: fix getting nonexclusive gpiods from DT
    
    [ Upstream commit be7ae45cfea97e787234e00e1a9eb341acacd84e ]
    
    Since commit ec757001c818 ("gpio: Enable nonexclusive gpiods from DT
    nodes") we are able to get GPIOD_FLAGS_BIT_NONEXCLUSIVE marked gpios.
    Currently the gpiolib uses the wrong flags variable for the check. We
    need to check the gpiod_flags instead of the of_gpio_flags else we
    return -EBUSY for GPIOD_FLAGS_BIT_NONEXCLUSIVE marked and requested
    gpiod's.
    
    Fixes: ec757001c818 gpio: Enable nonexclusive gpiods from DT nodes
    Cc: stable@vger.kernel.org
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    [Bartosz: the function was moved to gpiolib-of.c so updated the patch]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    [Bartosz: backported to v5.3.y]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7d05578ca2a1c639cbe0a12800374a1ddb45735
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Sep 30 14:45:22 2019 -0700

    firmware: google: increment VPD key_len properly
    
    [ Upstream commit 442f1e746e8187b9deb1590176f6b0ff19686b11 ]
    
    Commit 4b708b7b1a2c ("firmware: google: check if size is valid when
    decoding VPD data") adds length checks, but the new vpd_decode_entry()
    function botched the logic -- it adds the key length twice, instead of
    adding the key and value lengths separately.
    
    On my local system, this means vpd.c's vpd_section_create_attribs() hits
    an error case after the first attribute it parses, since it's no longer
    looking at the correct offset. With this patch, I'm back to seeing all
    the correct attributes in /sys/firmware/vpd/...
    
    Fixes: 4b708b7b1a2c ("firmware: google: check if size is valid when decoding VPD data")
    Cc: <stable@vger.kernel.org>
    Cc: Hung-Te Lin <hungte@chromium.org>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Link: https://lore.kernel.org/r/20190930214522.240680-1-briannorris@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 062876f3772ad881bab914e9cb13401603c34d1c
Author: Mohamad Heib <mohamadh@mellanox.com>
Date:   Wed Oct 2 15:21:27 2019 +0300

    IB/core: Fix wrong iterating on ports
    
    commit 1cbe866cbcb53338de33cf67262e73f9315a9725 upstream.
    
    rdma_for_each_port is already incrementing the iterator's value it
    receives therefore, after the first iteration the iterator is increased by
    2 which eventually causing wrong queries and possible traces.
    
    Fix the above by removing the old redundant incrementation that was used
    before rdma_for_each_port() macro.
    
    Cc: <stable@vger.kernel.org>
    Fixes: ea1075edcbab ("RDMA: Add and use rdma_for_each_port")
    Link: https://lore.kernel.org/r/20191002122127.17571-1-leon@kernel.org
    Signed-off-by: Mohamad Heib <mohamadh@mellanox.com>
    Reviewed-by: Erez Alfasi <ereza@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dda012267258f87a5961c2f5b804cbf3bb2b56e4
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sun Oct 6 17:58:28 2019 -0700

    mm/vmpressure.c: fix a signedness bug in vmpressure_register_event()
    
    commit 518a86713078168acd67cf50bc0b45d54b4cce6c upstream.
    
    The "mode" and "level" variables are enums and in this context GCC will
    treat them as unsigned ints so the error handling is never triggered.
    
    I also removed the bogus initializer because it isn't required any more
    and it's sort of confusing.
    
    [akpm@linux-foundation.org: reduce implicit and explicit typecasting]
    [akpm@linux-foundation.org: fix return value, add comment, per Matthew]
    Link: http://lkml.kernel.org/r/20190925110449.GO3264@mwanda
    Fixes: 3cadfa2b9497 ("mm/vmpressure.c: convert to use match_string() helper")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Matthew Wilcox <willy@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    Cc: Kate Stewart <kstewart@linuxfoundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb19cbc9beb171604cdb445d0036fcdd63c42d16
Author: Qian Cai <cai@lca.pw>
Date:   Sun Oct 6 17:58:25 2019 -0700

    mm/page_alloc.c: fix a crash in free_pages_prepare()
    
    commit 234fdce892f905cbc2674349a9eb4873e288e5b3 upstream.
    
    On architectures like s390, arch_free_page() could mark the page unused
    (set_page_unused()) and any access later would trigger a kernel panic.
    Fix it by moving arch_free_page() after all possible accessing calls.
    
     Hardware name: IBM 2964 N96 400 (z/VM 6.4.0)
     Krnl PSW : 0404e00180000000 0000000026c2b96e (__free_pages_ok+0x34e/0x5d8)
                R:0 T:1 IO:0 EX:0 Key:0 M:1 W:0 P:0 AS:3 CC:2 PM:0 RI:0 EA:3
     Krnl GPRS: 0000000088d43af7 0000000000484000 000000000000007c 000000000000000f
                000003d080012100 000003d080013fc0 0000000000000000 0000000000100000
                00000000275cca48 0000000000000100 0000000000000008 000003d080010000
                00000000000001d0 000003d000000000 0000000026c2b78a 000000002717fdb0
     Krnl Code: 0000000026c2b95c: ec1100b30659 risbgn %r1,%r1,0,179,6
                0000000026c2b962: e32014000036 pfd 2,1024(%r1)
               #0000000026c2b968: d7ff10001000 xc 0(256,%r1),0(%r1)
               >0000000026c2b96e: 41101100  la %r1,256(%r1)
                0000000026c2b972: a737fff8  brctg %r3,26c2b962
                0000000026c2b976: d7ff10001000 xc 0(256,%r1),0(%r1)
                0000000026c2b97c: e31003400004 lg %r1,832
                0000000026c2b982: ebff1430016a asi 5168(%r1),-1
     Call Trace:
     __free_pages_ok+0x16a/0x5d8)
     memblock_free_all+0x206/0x290
     mem_init+0x58/0x120
     start_kernel+0x2b0/0x570
     startup_continue+0x6a/0xc0
     INFO: lockdep is turned off.
     Last Breaking-Event-Address:
     __free_pages_ok+0x372/0x5d8
     Kernel panic - not syncing: Fatal exception: panic_on_oops
     00: HCPGIR450W CP entered; disabled wait PSW 00020001 80000000 00000000 26A2379C
    
    In the past, only kernel_poison_pages() would trigger this but it needs
    "page_poison=on" kernel cmdline, and I suspect nobody tested that on
    s390.  Recently, kernel_init_free_pages() (commit 6471384af2a6 ("mm:
    security: introduce init_on_alloc=1 and init_on_free=1 boot options"))
    was added and could trigger this as well.
    
    [akpm@linux-foundation.org: add comment]
    Link: http://lkml.kernel.org/r/1569613623-16820-1-git-send-email-cai@lca.pw
    Fixes: 8823b1dbc05f ("mm/page_poison.c: enable PAGE_POISONING as a separate option")
    Fixes: 6471384af2a6 ("mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "Kirill A. Shutemov" <kirill@shutemov.name>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Cc: <stable@vger.kernel.org>    [5.3+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a65f107a35cc56060cdb5d8e07aeb505f10e3eb
Author: Vitaly Wool <vitalywool@gmail.com>
Date:   Sun Oct 6 17:58:22 2019 -0700

    mm/z3fold.c: claim page in the beginning of free
    
    commit 5b6807de11445c05b537df8324f5d7ab1c2782f9 upstream.
    
    There's a really hard to reproduce race in z3fold between z3fold_free()
    and z3fold_reclaim_page().  z3fold_reclaim_page() can claim the page
    after z3fold_free() has checked if the page was claimed and
    z3fold_free() will then schedule this page for compaction which may in
    turn lead to random page faults (since that page would have been
    reclaimed by then).
    
    Fix that by claiming page in the beginning of z3fold_free() and not
    forgetting to clear the claim in the end.
    
    [vitalywool@gmail.com: v2]
      Link: http://lkml.kernel.org/r/20190928113456.152742cf@bigdell
    Link: http://lkml.kernel.org/r/20190926104844.4f0c6efa1366b8f5741eaba9@gmail.com
    Signed-off-by: Vitaly Wool <vitalywool@gmail.com>
    Reported-by: Markus Linnala <markus.linnala@gmail.com>
    Cc: Dan Streetman <ddstreet@ieee.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Henry Burns <henrywolfeburns@gmail.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Markus Linnala <markus.linnala@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6838a547d2b101ca247bc3dfb5000e671f3239e5
Author: Michal Hocko <mhocko@suse.com>
Date:   Sun Oct 6 17:58:19 2019 -0700

    kernel/sysctl.c: do not override max_threads provided by userspace
    
    commit b0f53dbc4bc4c371f38b14c391095a3bb8a0bb40 upstream.
    
    Partially revert 16db3d3f1170 ("kernel/sysctl.c: threads-max observe
    limits") because the patch is causing a regression to any workload which
    needs to override the auto-tuning of the limit provided by kernel.
    
    set_max_threads is implementing a boot time guesstimate to provide a
    sensible limit of the concurrently running threads so that runaways will
    not deplete all the memory.  This is a good thing in general but there
    are workloads which might need to increase this limit for an application
    to run (reportedly WebSpher MQ is affected) and that is simply not
    possible after the mentioned change.  It is also very dubious to
    override an admin decision by an estimation that doesn't have any direct
    relation to correctness of the kernel operation.
    
    Fix this by dropping set_max_threads from sysctl_max_threads so any
    value is accepted as long as it fits into MAX_THREADS which is important
    to check because allowing more threads could break internal robust futex
    restriction.  While at it, do not use MIN_THREADS as the lower boundary
    because it is also only a heuristic for automatic estimation and admin
    might have a good reason to stop new threads to be created even when
    below this limit.
    
    This became more severe when we switched x86 from 4k to 8k kernel
    stacks.  Starting since 6538b8ea886e ("x86_64: expand kernel stack to
    16K") (3.16) we use THREAD_SIZE_ORDER = 2 and that halved the auto-tuned
    value.
    
    In the particular case
    
      3.12
      kernel.threads-max = 515561
    
      4.4
      kernel.threads-max = 200000
    
    Neither of the two values is really insane on 32GB machine.
    
    I am not sure we want/need to tune the max_thread value further.  If
    anything the tuning should be removed altogether if proven not useful in
    general.  But we definitely need a way to override this auto-tuning.
    
    Link: http://lkml.kernel.org/r/20190922065801.GB18814@dhcp22.suse.cz
    Fixes: 16db3d3f1170 ("kernel/sysctl.c: threads-max observe limits")
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Heinrich Schuchardt <xypron.glpk@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 327fd2d6ee070a9e68831b04a15817148cfcdd0f
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Thu Oct 3 15:16:27 2019 +1000

    cifs: use cifsInodeInfo->open_file_lock while iterating to avoid a panic
    
    commit cb248819d209d113e45fed459773991518e8e80b upstream.
    
    Commit 487317c99477 ("cifs: add spinlock for the openFileList to
    cifsInodeInfo") added cifsInodeInfo->open_file_lock spin_lock to protect
    the openFileList, but missed a few places where cifs_inode->openFileList
    was enumerated.  Change these remaining tcon->open_file_lock to
    cifsInodeInfo->open_file_lock to avoid panic in is_size_safe_to_change.
    
    [17313.245641] RIP: 0010:is_size_safe_to_change+0x57/0xb0 [cifs]
    [17313.245645] Code: 68 40 48 89 ef e8 19 67 b7 f1 48 8b 43 40 48 8d 4b 40 48 8d 50 f0 48 39 c1 75 0f eb 47 48 8b 42 10 48 8d 50 f0 48 39 c1 74 3a <8b> 80 88 00 00 00 83 c0 01 a8 02 74 e6 48 89 ef c6 07 00 0f 1f 40
    [17313.245649] RSP: 0018:ffff94ae1baefa30 EFLAGS: 00010202
    [17313.245654] RAX: dead000000000100 RBX: ffff88dc72243300 RCX: ffff88dc72243340
    [17313.245657] RDX: dead0000000000f0 RSI: 00000000098f7940 RDI: ffff88dd3102f040
    [17313.245659] RBP: ffff88dd3102f040 R08: 0000000000000000 R09: ffff94ae1baefc40
    [17313.245661] R10: ffffcdc8bb1c4e80 R11: ffffcdc8b50adb08 R12: 00000000098f7940
    [17313.245663] R13: ffff88dc72243300 R14: ffff88dbc8f19600 R15: ffff88dc72243428
    [17313.245667] FS:  00007fb145485700(0000) GS:ffff88dd3e000000(0000) knlGS:0000000000000000
    [17313.245670] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [17313.245672] CR2: 0000026bb46c6000 CR3: 0000004edb110003 CR4: 00000000007606e0
    [17313.245753] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [17313.245756] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [17313.245759] PKRU: 55555554
    [17313.245761] Call Trace:
    [17313.245803]  cifs_fattr_to_inode+0x16b/0x580 [cifs]
    [17313.245838]  cifs_get_inode_info+0x35c/0xa60 [cifs]
    [17313.245852]  ? kmem_cache_alloc_trace+0x151/0x1d0
    [17313.245885]  cifs_open+0x38f/0x990 [cifs]
    [17313.245921]  ? cifs_revalidate_dentry_attr+0x3e/0x350 [cifs]
    [17313.245953]  ? cifsFileInfo_get+0x30/0x30 [cifs]
    [17313.245960]  ? do_dentry_open+0x132/0x330
    [17313.245963]  do_dentry_open+0x132/0x330
    [17313.245969]  path_openat+0x573/0x14d0
    [17313.245974]  do_filp_open+0x93/0x100
    [17313.245979]  ? __check_object_size+0xa3/0x181
    [17313.245986]  ? audit_alloc_name+0x7e/0xd0
    [17313.245992]  do_sys_open+0x184/0x220
    [17313.245999]  do_syscall_64+0x5b/0x1b0
    
    Fixes: 487317c99477 ("cifs: add spinlock for the openFileList to cifsInodeInfo")
    
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20791e06dcb0cc8d88849688ecddefcda26839a1
Author: Pavel Shilovsky <piastryyy@gmail.com>
Date:   Mon Sep 30 10:06:20 2019 -0700

    CIFS: Force reval dentry if LOOKUP_REVAL flag is set
    
    commit 0b3d0ef9840f7be202393ca9116b857f6f793715 upstream.
    
    Mark inode for force revalidation if LOOKUP_REVAL flag is set.
    This tells the client to actually send a QueryInfo request to
    the server to obtain the latest metadata in case a directory
    or a file were changed remotely. Only do that if the client
    doesn't have a lease for the file to avoid unneeded round
    trips to the server.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33fae0e0c1c5c30263150ad31442e91595e17dc0
Author: Pavel Shilovsky <piastryyy@gmail.com>
Date:   Mon Sep 30 10:06:19 2019 -0700

    CIFS: Force revalidate inode when dentry is stale
    
    commit c82e5ac7fe3570a269c0929bf7899f62048e7dbc upstream.
    
    Currently the client indicates that a dentry is stale when inode
    numbers or type types between a local inode and a remote file
    don't match. If this is the case attributes is not being copied
    from remote to local, so, it is already known that the local copy
    has stale metadata. That's why the inode needs to be marked for
    revalidation in order to tell the VFS to lookup the dentry again
    before openning a file. This prevents unexpected stale errors
    to be returned to the user space when openning a file.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47578137cff50a6b7b6ba2365648e68da9786000
Author: Pavel Shilovsky <piastryyy@gmail.com>
Date:   Mon Sep 30 10:06:18 2019 -0700

    CIFS: Gracefully handle QueryInfo errors during open
    
    commit 30573a82fb179420b8aac30a3a3595aa96a93156 upstream.
    
    Currently if the client identifies problems when processing
    metadata returned in CREATE response, the open handle is being
    leaked. This causes multiple problems like a file missing a lease
    break by that client which causes high latencies to other clients
    accessing the file. Another side-effect of this is that the file
    can't be deleted.
    
    Fix this by closing the file after the client hits an error after
    the file was opened and the open descriptor wasn't returned to
    the user space. Also convert -ESTALE to -EOPENSTALE to allow
    the VFS to revalidate a dentry and retry the open.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d816d7b6418e96633a5b5fea154c1af798ae00
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Thu Oct 3 15:59:22 2019 +0200

    selinux: fix context string corruption in convert_context()
    
    commit 2a5243937c700ffe6a28e6557a4562a9ab0a17a4 upstream.
    
    string_to_context_struct() may garble the context string, so we need to
    copy back the contents again from the old context struct to avoid
    storing the corrupted context.
    
    Since string_to_context_struct() tokenizes (and therefore truncates) the
    context string and we are later potentially copying it with kstrdup(),
    this may eventually cause pieces of uninitialized kernel memory to be
    disclosed to userspace (when copying to userspace based on the stored
    length and not the null character).
    
    How to reproduce on Fedora and similar:
        # dnf install -y memcached
        # systemctl start memcached
        # semodule -d memcached
        # load_policy
        # load_policy
        # systemctl stop memcached
        # ausearch -m AVC
        type=AVC msg=audit(1570090572.648:313): avc:  denied  { signal } for  pid=1 comm="systemd" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=process permissive=0 trawcon=73797374656D5F75007400000000000070BE6E847296FFFF726F6D000096FFFF76
    
    Cc: stable@vger.kernel.org
    Reported-by: Milos Malik <mmalik@redhat.com>
    Fixes: ee1a84fdfeed ("selinux: overhaul sidtab to fix bug and improve performance")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Acked-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7449e60701608e423452c9e9cac4f0f6093dca5
Author: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
Date:   Sat Oct 5 11:59:27 2019 -0700

    blk-wbt: fix performance regression in wbt scale_up/scale_down
    
    commit b84477d3ebb96294f87dc3161e53fa8fe22d9bfd upstream.
    
    scale_up wakes up waiters after scaling up. But after scaling max, it
    should not wake up more waiters as waiters will not have anything to
    do. This patch fixes this by making scale_up (and also scale_down)
    return when threshold is reached.
    
    This bug causes increased fdatasync latency when fdatasync and dd
    conv=sync are performed in parallel on 4.19 compared to 4.14. This
    bug was introduced during refactoring of blk-wbt code.
    
    Fixes: a79050434b45 ("blk-rq-qos: refactor out common elements of blk-wbt")
    Cc: stable@vger.kernel.org
    Cc: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46ba0cfb4f6bfda76984d5c459bedfce0cde66b4
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Sep 9 12:00:08 2019 +0100

    drm/i915: Perform GGTT restore much earlier during resume
    
    commit 6c76a93c453643e11a1063906c7c39168dd8d163 upstream.
    
    As soon as we re-enable the various functions within the HW, they may go
    off and read data via a GGTT offset. Hence, if we have not yet restored
    the GGTT PTE before then, they may read and even *write* random locations
    in memory.
    
    Detected by DMAR faults during resume.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Martin Peres <martin.peres@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190909110011.8958-4-chris@chris-wilson.co.uk
    (cherry picked from commit cec5ca08e36fd18d2939b98055346b3b06f56c6c)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e9f71fad45c51f0eab7b7a8fc13474e78d95dff
Author: Steve MacLean <Steve.MacLean@microsoft.com>
Date:   Sat Sep 28 01:41:18 2019 +0000

    perf inject jit: Fix JIT_CODE_MOVE filename
    
    commit b59711e9b0d22fd47abfa00602fd8c365cdd3ab7 upstream.
    
    During perf inject --jit, JIT_CODE_MOVE records were injecting MMAP records
    with an incorrect filename. Specifically it was missing the ".so" suffix.
    
    Further the JIT_CODE_LOAD record were silently truncating the
    jr->load.code_index field to 32 bits before generating the filename.
    
    Make both records emit the same filename based on the full 64 bit
    code_index field.
    
    Fixes: 9b07e27f88b9 ("perf inject: Add jitdump mmap injection support")
    Cc: stable@vger.kernel.org # v4.6+
    Signed-off-by: Steve MacLean <Steve.MacLean@Microsoft.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Brian Robbins <brianrob@microsoft.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
    Cc: John Keeping <john@metanate.com>
    Cc: John Salem <josalem@microsoft.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Tom McDonald <thomas.mcdonald@microsoft.com>
    Link: http://lore.kernel.org/lkml/BN8PR21MB1362FF8F127B31DBF4121528F7800@BN8PR21MB1362.namprd21.prod.outlook.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd7bd695c65b6aad108452290f372e36f1452361
Author: Ian Rogers <irogers@google.com>
Date:   Thu Sep 26 15:00:18 2019 -0700

    perf llvm: Don't access out-of-scope array
    
    commit 7d4c85b7035eb2f9ab217ce649dcd1bfaf0cacd3 upstream.
    
    The 'test_dir' variable is assigned to the 'release' array which is
    out-of-scope 3 lines later.
    
    Extend the scope of the 'release' array so that an out-of-scope array
    isn't accessed.
    
    Bug detected by clang's address sanitizer.
    
    Fixes: 07bc5c699a3d ("perf tools: Make fetch_kernel_version() publicly available")
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: http://lore.kernel.org/lkml/20190926220018.25402-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 920c418012c36fcc6c100cf2c365fc9c119384a2
Author: Jerry Snitselaar <jsnitsel@redhat.com>
Date:   Wed Oct 2 18:59:02 2019 +0200

    efi/tpm: Only set 'efi_tpm_final_log_size' after successful event log parsing
    
    commit e658c82be5561412c5e83b5e74e9da4830593f3e upstream.
    
    If __calc_tpm2_event_size() fails to parse an event it will return 0,
    resulting tpm2_calc_event_log_size() returning -1. Currently there is
    no check of this return value, and 'efi_tpm_final_log_size' can end up
    being set to this negative value resulting in a crash like this one:
    
      BUG: unable to handle page fault for address: ffffbc8fc00866ad
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
    
      RIP: 0010:memcpy_erms+0x6/0x10
      Call Trace:
       tpm_read_log_efi()
       tpm_bios_log_setup()
       tpm_chip_register()
       tpm_tis_core_init.cold.9+0x28c/0x466
       tpm_tis_plat_probe()
       platform_drv_probe()
       ...
    
    Also __calc_tpm2_event_size() returns a size of 0 when it fails
    to parse an event, so update function documentation to reflect this.
    
    The root cause of the issue that caused the failure of event parsing
    in this case is resolved by Peter Jone's patchset dealing with large
    event logs where crossing over a page boundary causes the page with
    the event count to be unmapped.
    
    Signed-off-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Scott Talbert <swt@techie.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: c46f3405692de ("tpm: Reserve the TPM final events table")
    Link: https://lkml.kernel.org/r/20191002165904.8819-6-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6dc5c7ff1fa50d6ae98dc0db9f6651a1b5dde3b
Author: Peter Jones <pjones@redhat.com>
Date:   Wed Oct 2 18:59:01 2019 +0200

    efi/tpm: Don't traverse an event log with no events
    
    commit 05c8c1ff81ed2eb9bad7c27cf92e55c864c16df8 upstream.
    
    When there are no entries to put into the final event log, some machines
    will return the template they would have populated anyway.  In this case
    the nr_events field is 0, but the rest of the log is just garbage.
    
    This patch stops us from trying to iterate the table with
    __calc_tpm2_event_size() when the number of events in the table is 0.
    
    Tested-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Peter Jones <pjones@redhat.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Acked-by: Matthew Garrett <mjg59@google.com>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Scott Talbert <swt@techie.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: c46f3405692d ("tpm: Reserve the TPM final events table")
    Link: https://lkml.kernel.org/r/20191002165904.8819-5-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74dc8bb14db56a73e8c0007721bf325465f2e6bd
Author: Peter Jones <pjones@redhat.com>
Date:   Wed Oct 2 18:59:00 2019 +0200

    efi/tpm: Don't access event->count when it isn't mapped
    
    commit 047d50aee341d940350897c85799e56ae57c3849 upstream.
    
    Some machines generate a lot of event log entries.  When we're
    iterating over them, the code removes the old mapping and adds a
    new one, so once we cross the page boundary we're unmapping the page
    with the count on it.  Hilarity ensues.
    
    This patch keeps the info from the header in local variables so we don't
    need to access that page again or keep track of if it's mapped.
    
    Tested-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Peter Jones <pjones@redhat.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Acked-by: Matthew Garrett <mjg59@google.com>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Scott Talbert <swt@techie.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: 44038bc514a2 ("tpm: Abstract crypto agile event size calculations")
    Link: https://lkml.kernel.org/r/20191002165904.8819-4-ard.biesheuvel@linaro.org
    [ Minor edits. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63c55a45202b72eb059db9f381d41eff5ab7c80d
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Oct 2 18:58:59 2019 +0200

    efivar/ssdt: Don't iterate over EFI vars if no SSDT override was specified
    
    commit c05f8f92b701576b615f30aac31fabdc0648649b upstream.
    
    The kernel command line option efivar_ssdt= allows the name to be
    specified of an EFI variable containing an ACPI SSDT table that should
    be loaded into memory by the OS, and treated as if it was provided by
    the firmware.
    
    Currently, that code will always iterate over the EFI variables and
    compare each name with the provided name, even if the command line
    option wasn't set to begin with.
    
    So bail early when no variable name was provided. This works around a
    boot regression on the 2012 Mac Pro, as reported by Scott.
    
    Tested-by: Scott Talbert <swt@techie.net>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Fixes: 475fb4e8b2f4 ("efi / ACPI: load SSTDs from EFI variables")
    Link: https://lkml.kernel.org/r/20191002165904.8819-3-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbf631e0c554e0e7ef08f89ec7f9b39625aece9a
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Tue Sep 10 17:44:46 2019 +0300

    iio: accel: adxl372: Perform a reset at start up
    
    commit d9a997bd4d762d5bd8cc548d762902f58b5e0a74 upstream.
    
    We need to perform a reset a start up to make sure that the chip is in a
    consistent state. This reset also disables all the interrupts which
    should only be enabled together with the iio buffer. Not doing this, was
    sometimes causing unwanted interrupts to trigger.
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Fixes: f4f55ce38e5f ("iio:adxl372: Add FIFO and interrupts support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fbee1b1a26a6b9eb539db4b304de5215fd8c0b2
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Tue Sep 10 17:44:21 2019 +0300

    iio: accel: adxl372: Fix push to buffers lost samples
    
    commit 62df81b74393079debf04961c48cb22268fc5fab upstream.
    
    One in two sample sets was lost by multiplying fifo_set_size with
    sizeof(u16). Also, the double number of available samples were pushed to
    the iio buffers.
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Fixes: f4f55ce38e5f ("iio:adxl372: Add FIFO and interrupts support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5e20cacc95935b440cd275be2f134647567b7ab
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Tue Sep 10 17:43:32 2019 +0300

    iio: accel: adxl372: Fix/remove limitation for FIFO samples
    
    commit d202ce4787e446556c6b9d01f84734c3f8174ba3 upstream.
    
    Currently, the driver sets the FIFO_SAMPLES register with the number of
    sample sets (maximum of 170 for 3 axis data, 256 for 2-axis and 512 for
    single axis). However, the FIFO_SAMPLES register should store the number
    of samples, regardless of how the FIFO format is configured.
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Fixes: f4f55ce38e5f ("iio:adxl372: Add FIFO and interrupts support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b821771230b61c63bf308de09532ceaf970f62a8
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Tue Sep 17 16:56:37 2019 +0200

    iio: light: add missing vcnl4040 of_compatible
    
    commit 7fd1c2606508eb384992251e87d50591393a48d0 upstream.
    
    Commit 5a441aade5b3 ("iio: light: vcnl4000 add support for the VCNL4040
    proximity and light sensor") added the support for the vcnl4040 but
    forgot to add the of_compatible. Fix this by adding it now.
    
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Fixes: 5a441aade5b3 ("iio: light: vcnl4000 add support for the VCNL4040 proximity and light sensor")
    Reviewed-by: Angus Ainslie (Purism) angus@akkea.ca
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d425237c2fbccc1a8c668381e07ed76203fb13bf
Author: David Frey <dpfrey@gmail.com>
Date:   Thu Sep 19 15:54:18 2019 -0700

    iio: light: opt3001: fix mutex unlock race
    
    commit 82f3015635249a8c8c45bac303fd84905066f04f upstream.
    
    When an end-of-conversion interrupt is received after performing a
    single-shot reading of the light sensor, the driver was waking up the
    result ready queue before checking opt->ok_to_ignore_lock to determine
    if it should unlock the mutex. The problem occurred in the case where
    the other thread woke up and changed the value of opt->ok_to_ignore_lock
    to false prior to the interrupt thread performing its read of the
    variable. In this case, the mutex would be unlocked twice.
    
    Signed-off-by: David Frey <dpfrey@gmail.com>
    Reviewed-by: Andreas Dannenberg <dannenberg@ti.com>
    Fixes: 94a9b7b1809f ("iio: light: add support for TI's opt3001 light sensor")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ebef50ea0f2437abb6556693489f473c3d38816
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Tue Sep 17 14:38:16 2019 +0200

    iio: adc: stm32-adc: fix a race when using several adcs with dma and irq
    
    commit dcb10920179ab74caf88a6f2afadecfc2743b910 upstream.
    
    End of conversion may be handled by using IRQ or DMA. There may be a
    race when two conversions complete at the same time on several ADCs.
    EOC can be read as 'set' for several ADCs, with:
    - an ADC configured to use IRQs. EOCIE bit is set. The handler is normally
      called in this case.
    - an ADC configured to use DMA. EOCIE bit isn't set. EOC triggers the DMA
      request instead. It's then automatically cleared by DMA read. But the
      handler gets called due to status bit is temporarily set (IRQ triggered
      by the other ADC).
    So both EOC status bit in CSR and EOCIE control bit must be checked
    before invoking the interrupt handler (e.g. call ISR only for
    IRQ-enabled ADCs).
    
    Fixes: 2763ea0585c9 ("iio: adc: stm32: add optional dma support")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 832cd7d3a6dc599e4b221baabdfe293ecc1234d9
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Tue Sep 17 14:38:15 2019 +0200

    iio: adc: stm32-adc: move registers definitions
    
    commit 31922f62bb527d749b99dbc776e514bcba29b7fe upstream.
    
    Move STM32 ADC registers definitions to common header.
    This is precursor patch to:
    - iio: adc: stm32-adc: fix a race when using several adcs with dma and irq
    
    It keeps registers definitions as a whole block, to ease readability and
    allow simple access path to EOC bits (readl) in stm32-adc-core driver.
    
    Fixes: 2763ea0585c9 ("iio: adc: stm32: add optional dma support")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e45db736152d6a3dc6f7e08a62bd499f462799b9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Sep 15 20:53:42 2019 +0200

    iio: adc: axp288: Override TS pin bias current for some models
    
    commit 972917419a0ba25afbf69d5d8c9fa644d676f887 upstream.
    
    Since commit 9bcf15f75cac ("iio: adc: axp288: Fix TS-pin handling") we
    preserve the bias current set by the firmware at boot.  This fixes issues
    we were seeing on various models, but it seems our old hardcoded 80ųA bias
    current was working around a firmware bug on at least one model laptop.
    
    In order to both have our cake and eat it, this commit adds a dmi based
    list of models where we need to override the firmware set bias current and
    adds the one model we now know needs this to it: The Lenovo Ideapad 100S
    (11 inch version).
    
    Fixes: 9bcf15f75cac ("iio: adc: axp288: Fix TS-pin handling")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=203829
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 413023f42bddca1cda8dd85e848428ba2e662f9a
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Tue Sep 17 18:09:23 2019 +0200

    iio: adc: ad799x: fix probe error handling
    
    commit c62dd44901cfff12acc5792bf3d2dec20bcaf392 upstream.
    
    Since commit 0f7ddcc1bff1 ("iio:adc:ad799x: Write default config on probe
    and reset alert status on probe") the error path is wrong since it
    leaves the vref regulator on. Fix this by disabling both regulators.
    
    Fixes: 0f7ddcc1bff1 ("iio:adc:ad799x: Write default config on probe and reset alert status on probe")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 135fa12a8ff892c0a3ab056ac549a3a45748fde3
Author: Andreas Klinger <ak@it-klinger.de>
Date:   Mon Sep 9 14:37:21 2019 +0200

    iio: adc: hx711: fix bug in sampling of data
    
    commit 4043ecfb5fc4355a090111e14faf7945ff0fdbd5 upstream.
    
    Fix bug in sampling function hx711_cycle() when interrupt occures while
    PD_SCK is high. If PD_SCK is high for at least 60 us power down mode of
    the sensor is entered which in turn leads to a wrong measurement.
    
    Switch off interrupts during a PD_SCK high period and move query of DOUT
    to the latest point of time which is at the end of PD_SCK low period.
    
    This bug exists in the driver since it's initial addition. The more
    interrupts on the system the higher is the probability that it happens.
    
    Fixes: c3b2fdd0ea7e ("iio: adc: hx711: Add IIO driver for AVIA HX711")
    Signed-off-by: Andreas Klinger <ak@it-klinger.de>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 987d06a5c04ec99101955e32938734454d790076
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Fri Oct 4 15:03:15 2019 -0500

    staging: vt6655: Fix memory leak in vt6655_probe
    
    commit 80b15db5e1e9c3300de299b2d43d1aafb593e6ac upstream.
    
    In vt6655_probe, if vnt_init() fails the cleanup code needs to be called
    like other error handling cases. The call to device_free_info() is
    added.
    
    Fixes: 67013f2c0e58 ("staging: vt6655: mac80211 conversion add main mac80211 functions")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191004200319.22394-1-navid.emamdoost@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e49b6342a4b6314146b4bf89d1cd5cb15a15e2d9
Author: Denis Efremov <efremov@linux.com>
Date:   Thu Sep 26 10:31:38 2019 +0300

    staging: rtl8188eu: fix HighestRate check in odm_ARFBRefresh_8188E()
    
    commit 22d67a01d8d89552b989c9651419824bb4111200 upstream.
    
    It's incorrect to compare HighestRate with 0x0b twice in the following
    manner "if (HighestRate > 0x0b) ... else if (HighestRate > 0x0b) ...". The
    "else if" branch is constantly false. The second comparision should be
    with 0x03 according to the max_rate_idx in ODM_RAInfo_Init().
    
    Cc: Michael Straube <straube.linux@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Acked-by: Larry Finger <Larry.Finger@lwfinger.net>
    Link: https://lore.kernel.org/r/20190926073138.12109-1-efremov@linux.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4cfa18e8c08a139db86d93bf741b4be17387c0b
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Sep 29 22:09:45 2019 -0500

    Staging: fbtft: fix memory leak in fbtft_framebuffer_alloc
    
    commit 5bdea6060618cfcf1459dca137e89aee038ac8b9 upstream.
    
    In fbtft_framebuffer_alloc the error handling path should take care of
    releasing frame buffer after it is allocated via framebuffer_alloc, too.
    Therefore, in two failure cases the goto destination is changed to
    address this issue.
    
    Fixes: c296d5f9957c ("staging: fbtft: core support")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190930030949.28615-1-navid.emamdoost@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52170ac488ba24e8243de9450b335da0e236812a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Sep 14 17:24:05 2019 +0200

    staging: bcm2835-audio: Fix draining behavior regression
    
    commit 2eed19b99c8e95ff87afe6c140ed895c3fac5937 upstream.
    
    The PCM draining behavior got broken since the recent refactoring, and
    this turned out to be the incorrect expectation of the firmware
    behavior regarding "draining".  While I expected the "drain" flag at
    the stop operation would do processing the queued samples, it seems
    rather dropping the samples.
    
    As a quick fix, just drop the SNDRV_PCM_INFO_DRAIN_TRIGGER flag, so
    that the driver uses the normal PCM draining procedure.  Also, put
    some caution comment to the function for future readers not to fall
    into the same pitfall.
    
    Fixes: d7ca3a71545b ("staging: bcm2835-audio: Operate non-atomic PCM ops")
    BugLink: https://github.com/raspberrypi/linux/issues/2983
    Cc: stable@vger.kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Stefan Wahren <wahrenst@gmx.net>
    Link: https://lore.kernel.org/r/20190914152405.7416-1-tiwai@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c520cfdd78d78f4020cee42079787ab98b02c09e
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Tue Sep 17 19:18:41 2019 +0200

    staging/fbtft: Depend on OF
    
    commit 63f2b1677fba11c5bd02089f25c13421948905f5 upstream.
    
    Commit c440eee1a7a1 ("Staging: fbtft: Switch to the gpio descriptor
    interface") removed setting gpios via platform data. This means that
    fbtft will now only work with Device Tree so set the dependency.
    
    This also prevents a NULL pointer deref on non-DT platform because
    fbtftops.request_gpios is not set in that case anymore.
    
    Fixes: c440eee1a7a1 ("Staging: fbtft: Switch to the gpio descriptor interface")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Link: https://lore.kernel.org/r/20190917171843.10334-1-noralf@tronnes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 610993bde5d3b102a26c4cd307f426c207aaa9ed
Author: Bruce Chen <bruce.chen@unisoc.com>
Date:   Mon Sep 16 17:56:56 2019 +0800

    gpio: eic: sprd: Fix the incorrect EIC offset when toggling
    
    commit e91aafcb51f3c5001ae76c3ee027beb0b8506447 upstream.
    
    When toggling the level trigger to emulate the edge trigger, the
    EIC offset is incorrect without adding the corresponding bank index,
    thus fix it.
    
    Fixes: 7bf0d7f62282 ("gpio: eic: Add edge trigger emulation for EIC")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bruce Chen <bruce.chen@unisoc.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7f424b52fc273e57ef8fb8e10fe06cc15463425
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Fri Oct 4 21:17:22 2019 +0300

    mei: avoid FW version request on Ibex Peak and earlier
    
    commit f8204f0ddd62966a0e79c2804963a21e3540dd82 upstream.
    
    The fixed MKHI client on PCH 6 gen platforms
    does not support fw version retrieval.
    The error is not fatal, but it fills up the kernel logs and
    slows down the driver start.
    This patch disables requesting FW version on GEN6 and earlier platforms.
    
    Fixes warning:
    [   15.964298] mei mei::55213584-9a29-4916-badf-0fb7ed682aeb:01: Could not read FW version
    [   15.964301] mei mei::55213584-9a29-4916-badf-0fb7ed682aeb:01: version command failed -5
    
    Cc: <stable@vger.kernel.org> +v4.18
    Cc: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20191004181722.31374-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b92f8a2622b0a5a351655e515286fff034424bc
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Wed Oct 2 02:59:57 2019 +0300

    mei: me: add comet point (lake) LP device ids
    
    commit 4d86dfd38285c83a6df01093b8547f742e3b2470 upstream.
    
    Add Comet Point devices IDs for Comet Lake U platforms.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20191001235958.19979-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeaaaa008f7df49e17012f2c9c160c19dc473013
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:47 2019 +0200

    USB: legousbtower: fix use-after-free on release
    
    commit 726b55d0e22ca72c69c947af87785c830289ddbc upstream.
    
    The driver was accessing its struct usb_device in its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever the device was disconnected while the character
    device was still open.
    
    Fixes: fef526cae700 ("USB: legousbtower: remove custom debug macro")
    Cc: stable <stable@vger.kernel.org>     # 3.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7858525ef58203d695af1147d5f9fc767bfa12a
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 19 10:30:39 2019 +0200

    USB: legousbtower: fix open after failed reset request
    
    commit 0b074f6986751361ff442bc1127c1648567aa8d6 upstream.
    
    The driver would return with a nonzero open count in case the reset
    control request failed. This would prevent any further attempts to open
    the char dev until the device was disconnected.
    
    Fix this by incrementing the open count only on successful open.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190919083039.30898-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 897afeb735443fece42ae83257792a1c6c6ac0a2
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 19 10:30:38 2019 +0200

    USB: legousbtower: fix potential NULL-deref on disconnect
    
    commit cd81e6fa8e033e7bcd59415b4a65672b4780030b upstream.
    
    The driver is using its struct usb_device pointer as an inverted
    disconnected flag, but was setting it to NULL before making sure all
    completion handlers had run. This could lead to a NULL-pointer
    dereference in a number of dev_dbg and dev_err statements in the
    completion handlers which relies on said pointer.
    
    Fix this by unconditionally stopping all I/O and preventing
    resubmissions by poisoning the interrupt URBs at disconnect and using a
    dedicated disconnected flag.
    
    This also makes sure that all I/O has completed by the time the
    disconnect callback returns.
    
    Fixes: 9d974b2a06e3 ("USB: legousbtower.c: remove err() usage")
    Fixes: fef526cae700 ("USB: legousbtower: remove custom debug macro")
    Fixes: 4dae99638097 ("USB: legotower: remove custom debug macro and module parameter")
    Cc: stable <stable@vger.kernel.org>     # 3.5
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190919083039.30898-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37d5f5deab485deb820943e3ceb5b42da89d0c7f
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 19 10:30:37 2019 +0200

    USB: legousbtower: fix deadlock on disconnect
    
    commit 33a7813219f208f4952ece60ee255fd983272dec upstream.
    
    Fix a potential deadlock if disconnect races with open.
    
    Since commit d4ead16f50f9 ("USB: prevent char device open/deregister
    race") core holds an rw-semaphore while open is called and when
    releasing the minor number during deregistration. This can lead to an
    ABBA deadlock if a driver takes a lock in open which it also holds
    during deregistration.
    
    This effectively reverts commit 78663ecc344b ("USB: disconnect open race
    in legousbtower") which needlessly introduced this issue after a generic
    fix for this race had been added to core by commit d4ead16f50f9 ("USB:
    prevent char device open/deregister race").
    
    Fixes: 78663ecc344b ("USB: disconnect open race in legousbtower")
    Cc: stable <stable@vger.kernel.org>     # 2.6.24
    Reported-by: syzbot+f9549f5ee8a5416f0b95@syzkaller.appspotmail.com
    Tested-by: syzbot+f9549f5ee8a5416f0b95@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190919083039.30898-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b76ff05571fd5b63cfb9bdea937451279a1eeb61
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 19 10:30:36 2019 +0200

    USB: legousbtower: fix slab info leak at probe
    
    commit 1d427be4a39defadda6dd8f4659bc17f7591740f upstream.
    
    Make sure to check for short transfers when retrieving the version
    information at probe to avoid leaking uninitialised slab data when
    logging it.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190919083039.30898-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0881beb47f7b74a54c703fe68a70527999d5a15
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Oct 4 13:02:19 2019 +0300

    usb: typec: ucsi: displayport: Fix for the mode entering routine
    
    commit f2372b87c386871b16d7dbda680d98d4092ab708 upstream.
    
    Making sure that ucsi_displayport_enter() function does not
    return an error if the displayport alternate mode has
    already been entered. It's normal that the firmware (or
    controller) has already entered the alternate mode by the
    time the operating system is notified about the device.
    
    Fixes: af8622f6a585 ("usb: typec: ucsi: Support for DisplayPort alt mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20191004100219.71152-3-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcee6646ba6998efdacace450096593bafd0a819
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Oct 4 13:02:18 2019 +0300

    usb: typec: ucsi: ccg: Remove run_isr flag
    
    commit 8530e4e20ec2355c273f4dba9002969e68275e5f upstream.
    
    The "run_isr" flag is used for preventing the driver from
    calling the interrupt service routine in its runtime resume
    callback when the driver is expecting completion to a
    command, but what that basically does is that it hides the
    real problem. The real problem is that the controller is
    allowed to suspend in the middle of command execution.
    
    As a more appropriate fix for the problem, using autosuspend
    delay time that matches UCSI_TIMEOUT_MS (5s). That prevents
    the controller from suspending while still in the middle of
    executing a command.
    
    This fixes a potential deadlock. Both ccg_read() and
    ccg_write() are called with the mutex already taken at least
    from ccg_send_command(). In ccg_read() and ccg_write, the
    mutex is only acquired so that run_isr flag can be set.
    
    Fixes: f0e4cd948b91 ("usb: typec: ucsi: ccg: add runtime pm workaround")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20191004100219.71152-2-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc3fc1f26cb134dcce8ba8cb6ff5cd3bcfc479e1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Oct 1 15:01:17 2019 +0300

    usb: typec: tcpm: usb: typec: tcpm: Fix a signedness bug in tcpm_fw_get_caps()
    
    commit 7101949f36fc77b530b73e4c6bd0066a2740d75b upstream.
    
    The "port->typec_caps.data" and "port->typec_caps.type" variables are
    enums and in this context GCC will treat them as an unsigned int so they
    can never be less than zero.
    
    Fixes: ae8a2ca8a221 ("usb: typec: Group all TCPCI/TCPM code together")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20191001120117.GA23528@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b0d751b208ed53ecda53afd210b28c4c1da24e8
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Oct 1 19:10:33 2019 +0900

    usb: renesas_usbhs: gadget: Fix usb_ep_set_{halt,wedge}() behavior
    
    commit 4d599cd3a097a85a5c68a2c82b9a48cddf9953ec upstream.
    
    According to usb_ep_set_halt()'s description,
    __usbhsg_ep_set_halt_wedge() should return -EAGAIN if the IN endpoint
    has any queue or data. Otherwise, this driver is possible to cause
    just STALL without sending a short packet data on g_mass_storage driver,
    and then a few resetting a device happens on a host side during
    a usb enumaration.
    
    Fixes: 2f98382dcdfe ("usb: renesas_usbhs: Add Renesas USBHS Gadget")
    Cc: <stable@vger.kernel.org> # v3.0+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1569924633-322-3-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dab8fbff993a187877a53d12812693ab249082c
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Oct 1 19:10:32 2019 +0900

    usb: renesas_usbhs: gadget: Do not discard queues in usb_ep_set_{halt,wedge}()
    
    commit 1aae1394294cb71c6aa0bc904a94a7f2f1e75936 upstream.
    
    The commit 97664a207bc2 ("usb: renesas_usbhs: shrink spin lock area")
    had added a usbhsg_pipe_disable() calling into
    __usbhsg_ep_set_halt_wedge() accidentally. But, this driver should
    not call the usbhsg_pipe_disable() because the function discards
    all queues. So, this patch removes it.
    
    Fixes: 97664a207bc2 ("usb: renesas_usbhs: shrink spin lock area")
    Cc: <stable@vger.kernel.org> # v3.1+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1569924633-322-2-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9df7ee961d8098b4ae066169f775cc660f3c1303
Author: Jacky.Cao@sony.com <Jacky.Cao@sony.com>
Date:   Thu Sep 5 04:11:57 2019 +0000

    USB: dummy-hcd: fix power budget for SuperSpeed mode
    
    commit 2636d49b64671d3d90ecc4daf971b58df3956519 upstream.
    
    The power budget for SuperSpeed mode should be 900 mA
    according to USB specification, so set the power budget
    to 900mA for dummy_start_ss which is only used for
    SuperSpeed mode.
    
    If the max power consumption of SuperSpeed device is
    larger than 500 mA, insufficient available bus power
    error happens in usb_choose_configuration function
    when the device connects to dummy hcd.
    
    Signed-off-by: Jacky Cao <Jacky.Cao@sony.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/16EA1F625E922C43B00B9D82250220500871CDE5@APYOKXMS108.ap.sony.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 572d87c8be61edb770febb978be5f490e82a5d93
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 3 09:09:31 2019 +0200

    USB: microtek: fix info-leak at probe
    
    commit 177238c3d47d54b2ed8f0da7a4290db492f4a057 upstream.
    
    Add missing bulk-in endpoint sanity check to prevent uninitialised stack
    data from being reported to the system log and used as endpoint
    addresses.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: syzbot+5630ca7c3b2be5c9da5e@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20191003070931.17009-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43d97783b1787b60e3d2af231bbf8a1b36b262e4
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 26 11:12:25 2019 +0200

    USB: usblcd: fix I/O after disconnect
    
    commit eb7f5a490c5edfe8126f64bc58b9ba2edef0a425 upstream.
    
    Make sure to stop all I/O on disconnect by adding a disconnected flag
    which is used to prevent new I/O from being started and by stopping all
    ongoing I/O before returning.
    
    This also fixes a potential use-after-free on driver unbind in case the
    driver data is freed before the completion handler has run.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>     # 7bbe990c989e
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190926091228.24634-7-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbb36df1b2907d383fe0e109d6fe45a2031ab1b0
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 10:49:07 2019 +0200

    USB: serial: fix runtime PM after driver unbind
    
    commit d51bdb93ca7e71d7fb30a572c7b47ed0194bf3fe upstream.
    
    Since commit c2b71462d294 ("USB: core: Fix bug caused by duplicate
    interface PM usage counter") USB drivers must always balance their
    runtime PM gets and puts, including when the driver has already been
    unbound from the interface.
    
    Leaving the interface with a positive PM usage counter would prevent a
    later bound driver from suspending the device.
    
    Fixes: c2b71462d294 ("USB: core: Fix bug caused by duplicate interface PM usage counter")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191001084908.2003-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acc26f227468949468352690f78a59364b239701
Author: Reinhard Speyerer <rspmn@arcor.de>
Date:   Thu Oct 3 18:53:21 2019 +0200

    USB: serial: option: add support for Cinterion CLS8 devices
    
    commit dfbac2f4da6a0c4a8f6b4d715a4077a7b8df53ad upstream.
    
    Add support for the serial ports of Cinterion CLS8 devices.
    
    T:  Bus=01 Lev=03 Prnt=05 Port=01 Cnt=02 Dev#= 25 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00b0 Rev= 3.18
    S:  Manufacturer=GEMALTO
    S:  Product=USB Modem
    C:* #Ifs= 5 Cfg#= 1 Atr=80 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=89(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Reinhard Speyerer <rspmn@arcor.de>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6df4df9e94eb93970ba66e1f333133d46fced06
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Mon Sep 23 12:23:28 2019 +0200

    USB: serial: option: add Telit FN980 compositions
    
    commit 5eb3f4b87a0e7e949c976f32f296176a06d1a93b upstream.
    
    This patch adds the following Telit FN980 compositions:
    
    0x1050: tty, adb, rmnet, tty, tty, tty, tty
    0x1051: tty, adb, mbim, tty, tty, tty, tty
    0x1052: rndis, tty, adb, tty, tty, tty, tty
    0x1053: tty, adb, ecm, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29f8c908eb6ac9b25ad23219eb93e8cd53868c08
Author: Beni Mahler <beni.mahler@gmx.net>
Date:   Thu Sep 5 00:26:20 2019 +0200

    USB: serial: ftdi_sio: add device IDs for Sienna and Echelon PL-20
    
    commit 357f16d9e0194cdbc36531ff88b453481560b76a upstream.
    
    Both devices added here have a FTDI chip inside. The device from Echelon
    is called 'Network Interface' it is actually a LON network gateway.
    
     ID 0403:8348 Future Technology Devices International, Ltd
     https://www.eltako.com/fileadmin/downloads/de/datenblatt/Datenblatt_PL-SW-PROF.pdf
    
     ID 0920:7500 Network Interface
     https://www.echelon.com/products/u20-usb-network-interface
    
    Signed-off-by: Beni Mahler <beni.mahler@gmx.net>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e9598085fdaee9103a021fa17914402eed1eddd
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Oct 3 15:49:58 2019 +0200

    USB: serial: keyspan: fix NULL-derefs on open() and write()
    
    commit 7d7e21fafdbc7fcf0854b877bd0975b487ed2717 upstream.
    
    Fix NULL-pointer dereferences on open() and write() which can be
    triggered by a malicious USB device.
    
    The current URB allocation helper would fail to initialise the newly
    allocated URB if the device has unexpected endpoint descriptors,
    something which could lead NULL-pointer dereferences in a number of
    open() and write() paths when accessing the URB. For example:
    
            BUG: kernel NULL pointer dereference, address: 0000000000000000
            ...
            RIP: 0010:usb_clear_halt+0x11/0xc0
            ...
            Call Trace:
             ? tty_port_open+0x4d/0xd0
             keyspan_open+0x70/0x160 [keyspan]
             serial_port_activate+0x5b/0x80 [usbserial]
             tty_port_open+0x7b/0xd0
             ? check_tty_count+0x43/0xa0
             tty_open+0xf1/0x490
    
            BUG: kernel NULL pointer dereference, address: 0000000000000000
            ...
            RIP: 0010:keyspan_write+0x14e/0x1f3 [keyspan]
            ...
            Call Trace:
             serial_write+0x43/0xa0 [usbserial]
             n_tty_write+0x1af/0x4f0
             ? do_wait_intr_irq+0x80/0x80
             ? process_echoes+0x60/0x60
             tty_write+0x13f/0x2f0
    
            BUG: kernel NULL pointer dereference, address: 0000000000000000
            ...
            RIP: 0010:keyspan_usa26_send_setup+0x298/0x305 [keyspan]
            ...
            Call Trace:
             keyspan_open+0x10f/0x160 [keyspan]
             serial_port_activate+0x5b/0x80 [usbserial]
             tty_port_open+0x7b/0xd0
             ? check_tty_count+0x43/0xa0
             tty_open+0xf1/0x490
    
    Fixes: fdcba53e2d58 ("fix for bugzilla #7544 (keyspan USB-to-serial converter)")
    Cc: stable <stable@vger.kernel.org>     # 2.6.21
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86e4dcba7f8e67d4fa38b69ef9441b38714448f1
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Fri Oct 4 15:04:11 2019 +0200

    serial: uartps: Fix uartps_major handling
    
    commit 5e9bd2d70ae7c00a95a22994abf1eef728649e64 upstream.
    
    There are two parts which should be fixed. The first one is to assigned
    uartps_major at the end of probe() to avoid complicated logic when
    something fails.
    The second part is initialized uartps_major number to 0 when last device is
    removed. This will ensure that on next probe driver will ask for new
    dynamic major number.
    
    Fixes: ab262666018d ("serial: uartps: Use the same dynamic major number for all ports")
    Reported-by: Paul Thomas <pthomas8589@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/d2652cda992833315c4f96f06953eb547f928918.1570194248.git.michal.simek@xilinx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3aa26efc5fba40bfbb33afc824a61625d1255a0
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Sep 16 16:12:23 2019 -0700

    serial: uartlite: fix exit path null pointer
    
    commit a553add0846f355a28ed4e81134012e4a1e280c2 upstream.
    
    Call uart_unregister_driver() conditionally instead of
    unconditionally, only if it has been previously registered.
    
    This uses driver.state, just as the sh-sci.c driver does.
    
    Fixes this null pointer dereference in tty_unregister_driver(),
    since the 'driver' argument is null:
    
      general protection fault: 0000 [#1] PREEMPT SMP KASAN PTI
      RIP: 0010:tty_unregister_driver+0x25/0x1d0
    
    Fixes: 238b8721a554 ("[PATCH] serial uartlite driver")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: stable <stable@vger.kernel.org>
    Cc: Peter Korsgaard <jacmet@sunsite.dk>
    Link: https://lore.kernel.org/r/9c8e6581-6fcc-a595-0897-4d90f5d710df@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a321afac3e9dcff6cc9d44df662e4f0420afbe0
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:46 2019 +0200

    USB: ldusb: fix NULL-derefs on driver unbind
    
    commit 58ecf131e74620305175a7aa103f81350bb37570 upstream.
    
    The driver was using its struct usb_interface pointer as an inverted
    disconnected flag, but was setting it to NULL before making sure all
    completion handlers had run. This could lead to a NULL-pointer
    dereference in a number of dev_dbg, dev_warn and dev_err statements in
    the completion handlers which relies on said pointer.
    
    Fix this by unconditionally stopping all I/O and preventing
    resubmissions by poisoning the interrupt URBs at disconnect and using a
    dedicated disconnected flag.
    
    This also makes sure that all I/O has completed by the time the
    disconnect callback returns.
    
    Fixes: 2824bd250f0b ("[PATCH] USB: add ldusb driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d961bf20f8f6c39417a17c13fd7cdd03b9478f5
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:45 2019 +0200

    USB: chaoskey: fix use-after-free on release
    
    commit 93ddb1f56ae102f14f9e46a9a9c8017faa970003 upstream.
    
    The driver was accessing its struct usb_interface in its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever the device was disconnected while the character
    device was still open.
    
    Fixes: 66e3e591891d ("usb: Add driver for Altus Metrum ChaosKey device (v2)")
    Cc: stable <stable@vger.kernel.org>     # 4.1
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 306053e5b743b1d0c90bc190a60d8e866666461a
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 10:49:06 2019 +0200

    USB: usblp: fix runtime PM after driver unbind
    
    commit 9a31535859bfd8d1c3ed391f5e9247cd87bb7909 upstream.
    
    Since commit c2b71462d294 ("USB: core: Fix bug caused by duplicate
    interface PM usage counter") USB drivers must always balance their
    runtime PM gets and puts, including when the driver has already been
    unbound from the interface.
    
    Leaving the interface with a positive PM usage counter would prevent a
    later bound driver from suspending the device.
    
    Fixes: c2b71462d294 ("USB: core: Fix bug caused by duplicate interface PM usage counter")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191001084908.2003-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0cb16f17a085550e8a8d6e99ad8f294f57cc776
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 12:48:43 2019 +0200

    USB: iowarrior: fix use-after-free after driver unbind
    
    commit b5f8d46867ca233d773408ffbe691a8062ed718f upstream.
    
    Make sure to stop also the asynchronous write URBs on disconnect() to
    avoid use-after-free in the completion handler after driver unbind.
    
    Fixes: 946b960d13c1 ("USB: add driver for iowarrior devices.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.21: 51a2f077c44e ("USB: introduce usb_anchor")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009104846.5925-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 715c52f81a9e73dfba4d00350b702387aa39893a
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 12:48:42 2019 +0200

    USB: iowarrior: fix use-after-free on release
    
    commit 80cd5479b525093a56ef768553045741af61b250 upstream.
    
    The driver was accessing its struct usb_interface from its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever debugging was enabled and the device was
    disconnected while its character device was open.
    
    Fixes: 549e83500b80 ("USB: iowarrior: Convert local dbg macro to dev_dbg")
    Cc: stable <stable@vger.kernel.org>     # 3.16
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009104846.5925-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83c09a1936cc691aaa9627de244a77eebfab627d
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 12:48:41 2019 +0200

    USB: iowarrior: fix use-after-free on disconnect
    
    commit edc4746f253d907d048de680a621e121517f484b upstream.
    
    A recent fix addressing a deadlock on disconnect introduced a new bug
    by moving the present flag out of the critical section protected by the
    driver-data mutex. This could lead to a racing release() freeing the
    driver data before disconnect() is done with it.
    
    Due to insufficient locking a related use-after-free could be triggered
    also before the above mentioned commit. Specifically, the driver needs
    to hold the driver-data mutex also while checking the opened flag at
    disconnect().
    
    Fixes: c468a8aa790e ("usb: iowarrior: fix deadlock on disconnect")
    Fixes: 946b960d13c1 ("USB: add driver for iowarrior devices.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.21
    Reported-by: syzbot+0761012cebf7bdb38137@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009104846.5925-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cdffe681a114dd0191af9147a0291b804c52f65
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:44 2019 +0200

    USB: adutux: fix use-after-free on release
    
    commit 123a0f125fa3d2104043697baa62899d9e549272 upstream.
    
    The driver was accessing its struct usb_device in its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever the device was disconnected while the character
    device was still open.
    
    Fixes: 66d4bc30d128 ("USB: adutux: remove custom debug macro")
    Cc: stable <stable@vger.kernel.org>     # 3.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06cc49fffdf114b434457a41a3039054846daaa7
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Sep 25 11:29:13 2019 +0200

    USB: adutux: fix NULL-derefs on disconnect
    
    commit b2fa7baee744fde746c17bc1860b9c6f5c2eebb7 upstream.
    
    The driver was using its struct usb_device pointer as an inverted
    disconnected flag, but was setting it to NULL before making sure all
    completion handlers had run. This could lead to a NULL-pointer
    dereference in a number of dev_dbg statements in the completion handlers
    which relies on said pointer.
    
    The pointer was also dereferenced unconditionally in a dev_dbg statement
    release() something which would lead to a NULL-deref whenever a device
    was disconnected before the final character-device close if debugging
    was enabled.
    
    Fix this by unconditionally stopping all I/O and preventing
    resubmissions by poisoning the interrupt URBs at disconnect and using a
    dedicated disconnected flag.
    
    This also makes sure that all I/O has completed by the time the
    disconnect callback returns.
    
    Fixes: 1ef37c6047fe ("USB: adutux: remove custom debug macro and module parameter")
    Fixes: 66d4bc30d128 ("USB: adutux: remove custom debug macro")
    Cc: stable <stable@vger.kernel.org>     # 3.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190925092913.8608-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b6e99e0de96669bce3070f0060e4d20e705c301
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Sep 25 11:29:12 2019 +0200

    USB: adutux: fix use-after-free on disconnect
    
    commit 44efc269db7929f6275a1fa927ef082e533ecde0 upstream.
    
    The driver was clearing its struct usb_device pointer, which it used as
    an inverted disconnected flag, before deregistering the character device
    and without serialising against racing release().
    
    This could lead to a use-after-free if a racing release() callback
    observes the cleared pointer and frees the driver data before
    disconnect() is finished with it.
    
    This could also lead to NULL-pointer dereferences in a racing open().
    
    Fixes: f08812d5eb8f ("USB: FIx locks and urb->status in adutux (updated)")
    Cc: stable <stable@vger.kernel.org>     # 2.6.24
    Reported-by: syzbot+0243cb250a51eeefb8cc@syzkaller.appspotmail.com
    Tested-by: syzbot+0243cb250a51eeefb8cc@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190925092913.8608-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eb195bf0ed1d986cfe7107d688c8af6c215d432
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Oct 4 14:59:33 2019 +0300

    xhci: Fix NULL pointer dereference in xhci_clear_tt_buffer_complete()
    
    commit cfbb8a84c2d2ef49bccacb511002bca4f6053555 upstream.
    
    udev stored in ep->hcpriv might be NULL if tt buffer is cleared
    due to a halted control endpoint during device enumeration
    
    xhci_clear_tt_buffer_complete is called by hub_tt_work() once it's
    scheduled,  and by then usb core might have freed and allocated a
    new udev for the next enumeration attempt.
    
    Fixes: ef513be0a905 ("usb: xhci: Add Clear_TT_Buffer")
    Cc: <stable@vger.kernel.org> # v5.3
    Reported-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-9-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82ce349d7128ee92adff870b10a0a51a3d421ef2
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri Oct 4 14:59:32 2019 +0300

    xhci: Increase STS_SAVE timeout in xhci_suspend()
    
    commit ac343366846a445bb81f0a0e8f16abb8bd5d5d88 upstream.
    
    After commit f7fac17ca925 ("xhci: Convert xhci_handshake() to use
    readl_poll_timeout_atomic()"), ASMedia xHCI may fail to suspend.
    
    Although the algorithms are essentially the same, the old max timeout is
    (usec + usec * time of doing readl()), and the new max timeout is just
    usec, which is much less than the old one.
    
    Increase the timeout to make ASMedia xHCI able to suspend again.
    
    BugLink: https://bugs.launchpad.net/bugs/1844021
    Fixes: f7fac17ca925 ("xhci: Convert xhci_handshake() to use readl_poll_timeout_atomic()")
    Cc: <stable@vger.kernel.org> # v5.2+
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-8-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78c23e7576bd1cb03d8510081377a86a0cdd9935
Author: Bill Kuzeja <William.Kuzeja@stratus.com>
Date:   Fri Oct 4 14:59:31 2019 +0300

    xhci: Prevent deadlock when xhci adapter breaks during init
    
    commit 8de66b0e6a56ff10dd00d2b0f2ae52e300178587 upstream.
    
    The system can hit a deadlock if an xhci adapter breaks while initializing.
    The deadlock is between two threads: thread 1 is tearing down the
    adapter and is stuck in usb_unlocked_disable_lpm waiting to lock the
    hcd->handwidth_mutex. Thread 2 is holding this mutex (while still trying
    to add a usb device), but is stuck in xhci_endpoint_reset waiting for a
    stop or config command to complete. A reboot is required to resolve.
    
    It turns out when calling xhci_queue_stop_endpoint and
    xhci_queue_configure_endpoint in xhci_endpoint_reset, the return code is
    not checked for errors. If the timing is right and the adapter dies just
    before either of these commands get issued, we hang indefinitely waiting
    for a completion on a command that didn't get issued.
    
    This wasn't a problem before the following fix because we didn't send
    commands in xhci_endpoint_reset:
    
    commit f5249461b504 ("xhci: Clear the host side toggle manually when
        endpoint is soft reset")
    
    With the patch I am submitting, a duration test which breaks adapters
    during initialization (and which deadlocks with the standard kernel) runs
    without issue.
    
    Fixes: f5249461b504 ("xhci: Clear the host side toggle manually when endpoint is soft reset")
    Cc: <stable@vger.kernel.org> # v4.17+
    Cc: Torez Smith <torez@redhat.com>
    Signed-off-by: Bill Kuzeja <william.kuzeja@stratus.com>
    Signed-off-by: Torez Smith <torez@redhat.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-7-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bc842d52a19e79cb0d2940448b2b8be4c086440
Author: Rick Tseng <rtseng@nvidia.com>
Date:   Fri Oct 4 14:59:30 2019 +0300

    usb: xhci: wait for CNR controller not ready bit in xhci resume
    
    commit a70bcbc322837eda1ab5994d12db941dc9733a7d upstream.
    
    NVIDIA 3.1 xHCI card would lose power when moving power state into D3Cold.
    Thus we need to wait for CNR bit to clear in xhci resume, just as in
    xhci init.
    
    [Minor changes to comment and commit message -Mathias]
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Rick Tseng <rtseng@nvidia.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-6-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07832477a0605b4568d6deacace1ffab5e0121af
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Oct 4 14:59:29 2019 +0300

    xhci: Fix USB 3.1 capability detection on early xHCI 1.1 spec based hosts
    
    commit 47f50d61076523e1a0d5a070062c2311320eeca8 upstream.
    
    Early xHCI 1.1 spec did not mention USB 3.1 capable hosts should set
    sbrn to 0x31, or that the minor revision is a two digit BCD
    containing minor and sub-minor numbers.
    This was later clarified in xHCI 1.2.
    
    Some USB 3.1 capable hosts therefore have sbrn set to 0x30, or minor
    revision set to 0x1 instead of 0x10.
    
    Detect the USB 3.1 capability correctly for these hosts as well
    
    Fixes: ddd57980a0fd ("xhci: detect USB 3.2 capable host controllers correctly")
    Cc: <stable@vger.kernel.org> # v4.18+
    Cc: Loïc Yhuel <loic.yhuel@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-5-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efa5cb90cfdf80ece550fa67e34c9f5c764b1130
Author: Jan Schmidt <jan@centricular.com>
Date:   Fri Oct 4 14:59:28 2019 +0300

    xhci: Check all endpoints for LPM timeout
    
    commit d500c63f80f2ea08ee300e57da5f2af1c13875f5 upstream.
    
    If an endpoint is encountered that returns USB3_LPM_DEVICE_INITIATED, keep
    checking further endpoints, as there might be periodic endpoints later
    that return USB3_LPM_DISABLED due to shorter service intervals.
    
    Without this, the code can set too high a maximum-exit-latency and
    prevent the use of multiple USB3 cameras that should be able to work.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jan Schmidt <jan@centricular.com>
    Tested-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-4-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfe0beb6ca4cada75ce21fd0a32ed3e9e03d73b3
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Oct 4 14:59:27 2019 +0300

    xhci: Prevent device initiated U1/U2 link pm if exit latency is too long
    
    commit cd9d9491e835a845c1a98b8471f88d26285e0bb9 upstream.
    
    If host/hub initiated link pm is prevented by a driver flag we still must
    ensure that periodic endpoints have longer service intervals than link pm
    exit latency before allowing device initiated link pm.
    
    Fix this by continue walking and checking endpoint service interval if
    xhci_get_timeout_no_hub_lpm() returns anything else than USB3_LPM_DISABLED
    
    While at it fix the split line error message
    
    Tested-by: Jan Schmidt <jan@centricular.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-3-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e671c6fb24c3b0f4aec9d30c10cc744b57d65285
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Oct 4 14:59:26 2019 +0300

    xhci: Fix false warning message about wrong bounce buffer write length
    
    commit c03101ff4f74bb30679c1a03d551ecbef1024bf6 upstream.
    
    The check printing out the "WARN Wrong bounce buffer write length:"
    uses incorrect values when comparing bytes written from scatterlist
    to bounce buffer. Actual copied lengths are fine.
    
    The used seg->bounce_len will be set to equal new_buf_len a few lines later
    in the code, but is incorrect when doing the comparison.
    
    The patch which added this false warning was backported to 4.8+ kernels
    so this should be backported as far as well.
    
    Cc: <stable@vger.kernel.org> # v4.8+
    Fixes: 597c56e372da ("xhci: update bounce buffer with correct sg num")
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1570190373-30684-2-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9a89fe4cb43e007a52321a8ca8f0cc3bd13a540
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 19:09:42 2019 +0200

    USB: usb-skeleton: fix NULL-deref on disconnect
    
    commit bed5ef230943863b9abf5eae226a20fad9a8ff71 upstream.
    
    The driver was using its struct usb_interface pointer as an inverted
    disconnected flag and was setting it to NULL before making sure all
    completion handlers had run. This could lead to NULL-pointer
    dereferences in the dev_err() statements in the completion handlers
    which relies on said pointer.
    
    Fix this by using a dedicated disconnected flag.
    
    Note that this is also addresses a NULL-pointer dereference at release()
    and a struct usb_interface reference leak introduced by a recent runtime
    PM fix, which depends on and should have been submitted together with
    this patch.
    
    Fixes: 4212cd74ca6f ("USB: usb-skeleton.c: remove err() usage")
    Fixes: 5c290a5e42c3 ("USB: usb-skeleton: fix runtime PM after driver unbind")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009170944.30057-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dddaa4516b9993a3f3df346ff54a62940d01dc76
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 10:49:05 2019 +0200

    USB: usb-skeleton: fix runtime PM after driver unbind
    
    commit 5c290a5e42c3387e82de86965784d30e6c5270fd upstream.
    
    Since commit c2b71462d294 ("USB: core: Fix bug caused by duplicate
    interface PM usage counter") USB drivers must always balance their
    runtime PM gets and puts, including when the driver has already been
    unbound from the interface.
    
    Leaving the interface with a positive PM usage counter would prevent a
    later bound driver from suspending the device.
    
    Fixes: c2b71462d294 ("USB: core: Fix bug caused by duplicate interface PM usage counter")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191001084908.2003-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 897829ef43b6fd4d595ee6c7d242fdaff2b2ec8c
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:48 2019 +0200

    USB: yurex: fix NULL-derefs on disconnect
    
    commit aafb00a977cf7d81821f7c9d12e04c558c22dc3c upstream.
    
    The driver was using its struct usb_interface pointer as an inverted
    disconnected flag, but was setting it to NULL without making sure all
    code paths that used it were done with it.
    
    Before commit ef61eb43ada6 ("USB: yurex: Fix protection fault after
    device removal") this included the interrupt-in completion handler, but
    there are further accesses in dev_err and dev_dbg statements in
    yurex_write() and the driver-data destructor (sic!).
    
    Fix this by unconditionally stopping also the control URB at disconnect
    and by using a dedicated disconnected flag.
    
    Note that we need to take a reference to the struct usb_interface to
    avoid a use-after-free in the destructor whenever the device was
    disconnected while the character device was still open.
    
    Fixes: aadd6472d904 ("USB: yurex.c: remove dbg() usage")
    Fixes: 45714104b9e8 ("USB: yurex.c: remove err() usage")
    Cc: stable <stable@vger.kernel.org>     # 3.5: ef61eb43ada6
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-6-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc1c1c677009615ea160e3f98156b45c4a3da94e
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 17 12:47:23 2019 -0400

    USB: yurex: Don't retry on unexpected errors
    
    commit 32a0721c6620b77504916dac0cea8ad497c4878a upstream.
    
    According to Greg KH, it has been generally agreed that when a USB
    driver encounters an unknown error (or one it can't handle directly),
    it should just give up instead of going into a potentially infinite
    retry loop.
    
    The three codes -EPROTO, -EILSEQ, and -ETIME fall into this category.
    They can be caused by bus errors such as packet loss or corruption,
    attempting to communicate with a disconnected device, or by malicious
    firmware.  Nowadays the extent of packet loss or corruption is
    negligible, so it should be safe for a driver to give up whenever one
    of these errors occurs.
    
    Although the yurex driver handles -EILSEQ errors in this way, it
    doesn't do the same for -EPROTO (as discovered by the syzbot fuzzer)
    or other unrecognized errors.  This patch adjusts the driver so that
    it doesn't log an error message for -EPROTO or -ETIME, and it doesn't
    retry after any errors.
    
    Reported-and-tested-by: syzbot+b24d736f18a1541ad550@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Tomoki Sekiyama <tomoki.sekiyama@gmail.com>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1909171245410.1590-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 531fbd68790ef1dfe552bd9f51befdd25d1d58a2
Author: Bastien Nocera <hadess@hadess.net>
Date:   Mon Sep 23 18:18:43 2019 +0200

    USB: rio500: Remove Rio 500 kernel driver
    
    commit 015664d15270a112c2371d812f03f7c579b35a73 upstream.
    
    The Rio500 kernel driver has not been used by Rio500 owners since 2001
    not long after the rio500 project added support for a user-space USB stack
    through the very first versions of usbdevfs and then libusb.
    
    Support for the kernel driver was removed from the upstream utilities
    in 2008:
    https://gitlab.freedesktop.org/hadess/rio500/commit/943f624ab721eb8281c287650fcc9e2026f6f5db
    
    Cc: Cesar Miquel <miquel@df.uba.ar>
    Signed-off-by: Bastien Nocera <hadess@hadess.net>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/6251c17584d220472ce882a3d9c199c401a51a71.camel@hadess.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00260d0cc94567671715575f1951349274cabd3b
Author: Will Deacon <will@kernel.org>
Date:   Sun Oct 6 17:58:00 2019 -0700

    panic: ensure preemption is disabled during panic()
    
    commit 20bb759a66be52cf4a9ddd17fddaf509e11490cd upstream.
    
    Calling 'panic()' on a kernel with CONFIG_PREEMPT=y can leave the
    calling CPU in an infinite loop, but with interrupts and preemption
    enabled.  From this state, userspace can continue to be scheduled,
    despite the system being "dead" as far as the kernel is concerned.
    
    This is easily reproducible on arm64 when booting with "nosmp" on the
    command line; a couple of shell scripts print out a periodic "Ping"
    message whilst another triggers a crash by writing to
    /proc/sysrq-trigger:
    
      | sysrq: Trigger a crash
      | Kernel panic - not syncing: sysrq triggered crash
      | CPU: 0 PID: 1 Comm: init Not tainted 5.2.15 #1
      | Hardware name: linux,dummy-virt (DT)
      | Call trace:
      |  dump_backtrace+0x0/0x148
      |  show_stack+0x14/0x20
      |  dump_stack+0xa0/0xc4
      |  panic+0x140/0x32c
      |  sysrq_handle_reboot+0x0/0x20
      |  __handle_sysrq+0x124/0x190
      |  write_sysrq_trigger+0x64/0x88
      |  proc_reg_write+0x60/0xa8
      |  __vfs_write+0x18/0x40
      |  vfs_write+0xa4/0x1b8
      |  ksys_write+0x64/0xf0
      |  __arm64_sys_write+0x14/0x20
      |  el0_svc_common.constprop.0+0xb0/0x168
      |  el0_svc_handler+0x28/0x78
      |  el0_svc+0x8/0xc
      | Kernel Offset: disabled
      | CPU features: 0x0002,24002004
      | Memory Limit: none
      | ---[ end Kernel panic - not syncing: sysrq triggered crash ]---
      |  Ping 2!
      |  Ping 1!
      |  Ping 1!
      |  Ping 2!
    
    The issue can also be triggered on x86 kernels if CONFIG_SMP=n,
    otherwise local interrupts are disabled in 'smp_send_stop()'.
    
    Disable preemption in 'panic()' before re-enabling interrupts.
    
    Link: http://lkml.kernel.org/r/20191002123538.22609-1-will@kernel.org
    Link: https://lore.kernel.org/r/BX1W47JXPMR8.58IYW53H6M5N@dragonstone
    Signed-off-by: Will Deacon <will@kernel.org>
    Reported-by: Xogium <contact@xogium.me>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
