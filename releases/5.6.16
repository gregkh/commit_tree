commit 960a4cc3ec49f8292d0f837f0a6b28b03c54f042
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 3 08:23:38 2020 +0200

    Linux 5.6.16

commit c1ce3dc467f34295049b5d2d180f508a4b73fff0
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed May 27 12:24:10 2020 +0200

    netfilter: nf_conntrack_pptp: fix compilation warning with W=1 build
    
    commit 4946ea5c1237036155c3b3a24f049fd5f849f8f6 upstream.
    
    >> include/linux/netfilter/nf_conntrack_pptp.h:13:20: warning: 'const' type qualifier on return type has no effect [-Wignored-qualifiers]
    extern const char *const pptp_msg_name(u_int16_t msg);
    ^~~~~~
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Fixes: 4c559f15efcc ("netfilter: nf_conntrack_pptp: prevent buffer overflows in debug code")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28cba63f480ba4d824ec54026b5ee01568a3c08f
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed May 27 01:10:39 2020 -0700

    netfilter: conntrack: Pass value of ctinfo to __nf_conntrack_update
    
    commit 46c1e0621a72e0469ec4edfdb6ed4d387ec34f8a upstream.
    
    Clang warns:
    
    net/netfilter/nf_conntrack_core.c:2068:21: warning: variable 'ctinfo' is
    uninitialized when used here [-Wuninitialized]
            nf_ct_set(skb, ct, ctinfo);
                               ^~~~~~
    net/netfilter/nf_conntrack_core.c:2024:2: note: variable 'ctinfo' is
    declared here
            enum ip_conntrack_info ctinfo;
            ^
    1 warning generated.
    
    nf_conntrack_update was split up into nf_conntrack_update and
    __nf_conntrack_update, where the assignment of ctinfo is in
    nf_conntrack_update but it is used in __nf_conntrack_update.
    
    Pass the value of ctinfo from nf_conntrack_update to
    __nf_conntrack_update so that uninitialized memory is not used
    and everything works properly.
    
    Fixes: ee04805ff54a ("netfilter: conntrack: make conntrack userspace helpers work again")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1039
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdd07c33a3be1896ec1982fab1a2baf986fbe4dc
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed May 27 12:17:34 2020 +0200

    netfilter: conntrack: comparison of unsigned in cthelper confirmation
    
    commit 94945ad2b330207cded0fd8d4abebde43a776dfb upstream.
    
    net/netfilter/nf_conntrack_core.c: In function nf_confirm_cthelper:
    net/netfilter/nf_conntrack_core.c:2117:15: warning: comparison of unsigned expression in < 0 is always false [-Wtype-limits]
     2117 |   if (protoff < 0 || (frag_off & htons(~0x7)) != 0)
          |               ^
    
    ipv6_skip_exthdr() returns a signed integer.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Fixes: 703acd70f249 ("netfilter: nfnetlink_cthelper: unbreak userspace helper support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0e4387b71b1e67657b5465d4f7fc3e55624b67f
Author: Petr Mladek <pmladek@suse.com>
Date:   Wed May 27 14:28:44 2020 +0200

    powerpc/bpf: Enable bpf_probe_read{, str}() on powerpc again
    
    commit d195b1d1d1196681ac4775e0361e9cca70f740c2 upstream.
    
    The commit 0ebeea8ca8a4d1d453a ("bpf: Restrict bpf_probe_read{, str}() only
    to archs where they work") caused that bpf_probe_read{, str}() functions
    were not longer available on architectures where the same logical address
    might have different content in kernel and user memory mapping. These
    architectures should use probe_read_{user,kernel}_str helpers.
    
    For backward compatibility, the problematic functions are still available
    on architectures where the user and kernel address spaces are not
    overlapping. This is defined CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE.
    
    At the moment, these backward compatible functions are enabled only on x86_64,
    arm, and arm64. Let's do it also on powerpc that has the non overlapping
    address space as well.
    
    Fixes: 0ebeea8ca8a4 ("bpf: Restrict bpf_probe_read{, str}() only to archs where they work")
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/lkml/20200527122844.19524-1-pmladek@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f939d23ce8d78760f7b952a80e4dc56735096ee0
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Wed May 27 22:10:29 2020 -0500

    bonding: Fix reference count leak in bond_sysfs_slave_add.
    
    commit a068aab42258e25094bc2c159948d263ed7d7a77 upstream.
    
    kobject_init_and_add() takes reference even when it fails.
    If this function returns an error, kobject_put() must be called to
    properly clean up the memory associated with the object. Previous
    commit "b8eb718348b8" fixed a similar problem.
    
    Fixes: 07699f9a7c8d ("bonding: add sysfs /slave dir for bond slave devices.")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7b7af0429d7aa7e884ac81c44ede16330df3b1a
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Wed May 27 21:08:05 2020 +0300

    net: dsa: declare lockless TX feature for slave ports
    
    commit 2b86cb8299765688c5119fd18d5f436716c81010 upstream.
    
    Be there a platform with the following layout:
    
          Regular NIC
           |
           +----> DSA master for switch port
                   |
                   +----> DSA master for another switch port
    
    After changing DSA back to static lockdep class keys in commit
    1a33e10e4a95 ("net: partially revert dynamic lockdep key changes"), this
    kernel splat can be seen:
    
    [   13.361198] ============================================
    [   13.366524] WARNING: possible recursive locking detected
    [   13.371851] 5.7.0-rc4-02121-gc32a05ecd7af-dirty #988 Not tainted
    [   13.377874] --------------------------------------------
    [   13.383201] swapper/0/0 is trying to acquire lock:
    [   13.388004] ffff0000668ff298 (&dsa_slave_netdev_xmit_lock_key){+.-.}-{2:2}, at: __dev_queue_xmit+0x84c/0xbe0
    [   13.397879]
    [   13.397879] but task is already holding lock:
    [   13.403727] ffff0000661a1698 (&dsa_slave_netdev_xmit_lock_key){+.-.}-{2:2}, at: __dev_queue_xmit+0x84c/0xbe0
    [   13.413593]
    [   13.413593] other info that might help us debug this:
    [   13.420140]  Possible unsafe locking scenario:
    [   13.420140]
    [   13.426075]        CPU0
    [   13.428523]        ----
    [   13.430969]   lock(&dsa_slave_netdev_xmit_lock_key);
    [   13.435946]   lock(&dsa_slave_netdev_xmit_lock_key);
    [   13.440924]
    [   13.440924]  *** DEADLOCK ***
    [   13.440924]
    [   13.446860]  May be due to missing lock nesting notation
    [   13.446860]
    [   13.453668] 6 locks held by swapper/0/0:
    [   13.457598]  #0: ffff800010003de0 ((&idev->mc_ifc_timer)){+.-.}-{0:0}, at: call_timer_fn+0x0/0x400
    [   13.466593]  #1: ffffd4d3fb478700 (rcu_read_lock){....}-{1:2}, at: mld_sendpack+0x0/0x560
    [   13.474803]  #2: ffffd4d3fb478728 (rcu_read_lock_bh){....}-{1:2}, at: ip6_finish_output2+0x64/0xb10
    [   13.483886]  #3: ffffd4d3fb478728 (rcu_read_lock_bh){....}-{1:2}, at: __dev_queue_xmit+0x6c/0xbe0
    [   13.492793]  #4: ffff0000661a1698 (&dsa_slave_netdev_xmit_lock_key){+.-.}-{2:2}, at: __dev_queue_xmit+0x84c/0xbe0
    [   13.503094]  #5: ffffd4d3fb478728 (rcu_read_lock_bh){....}-{1:2}, at: __dev_queue_xmit+0x6c/0xbe0
    [   13.512000]
    [   13.512000] stack backtrace:
    [   13.516369] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.7.0-rc4-02121-gc32a05ecd7af-dirty #988
    [   13.530421] Call trace:
    [   13.532871]  dump_backtrace+0x0/0x1d8
    [   13.536539]  show_stack+0x24/0x30
    [   13.539862]  dump_stack+0xe8/0x150
    [   13.543271]  __lock_acquire+0x1030/0x1678
    [   13.547290]  lock_acquire+0xf8/0x458
    [   13.550873]  _raw_spin_lock+0x44/0x58
    [   13.554543]  __dev_queue_xmit+0x84c/0xbe0
    [   13.558562]  dev_queue_xmit+0x24/0x30
    [   13.562232]  dsa_slave_xmit+0xe0/0x128
    [   13.565988]  dev_hard_start_xmit+0xf4/0x448
    [   13.570182]  __dev_queue_xmit+0x808/0xbe0
    [   13.574200]  dev_queue_xmit+0x24/0x30
    [   13.577869]  neigh_resolve_output+0x15c/0x220
    [   13.582237]  ip6_finish_output2+0x244/0xb10
    [   13.586430]  __ip6_finish_output+0x1dc/0x298
    [   13.590709]  ip6_output+0x84/0x358
    [   13.594116]  mld_sendpack+0x2bc/0x560
    [   13.597786]  mld_ifc_timer_expire+0x210/0x390
    [   13.602153]  call_timer_fn+0xcc/0x400
    [   13.605822]  run_timer_softirq+0x588/0x6e0
    [   13.609927]  __do_softirq+0x118/0x590
    [   13.613597]  irq_exit+0x13c/0x148
    [   13.616918]  __handle_domain_irq+0x6c/0xc0
    [   13.621023]  gic_handle_irq+0x6c/0x160
    [   13.624779]  el1_irq+0xbc/0x180
    [   13.627927]  cpuidle_enter_state+0xb4/0x4d0
    [   13.632120]  cpuidle_enter+0x3c/0x50
    [   13.635703]  call_cpuidle+0x44/0x78
    [   13.639199]  do_idle+0x228/0x2c8
    [   13.642433]  cpu_startup_entry+0x2c/0x48
    [   13.646363]  rest_init+0x1ac/0x280
    [   13.649773]  arch_call_rest_init+0x14/0x1c
    [   13.653878]  start_kernel+0x490/0x4bc
    
    Lockdep keys themselves were added in commit ab92d68fc22f ("net: core:
    add generic lockdep keys"), and it's very likely that this splat existed
    since then, but I have no real way to check, since this stacked platform
    wasn't supported by mainline back then.
    
    >From Taehee's own words:
    
      This patch was considered that all stackable devices have LLTX flag.
      But the dsa doesn't have LLTX, so this splat happened.
      After this patch, dsa shares the same lockdep class key.
      On the nested dsa interface architecture, which you illustrated,
      the same lockdep class key will be used in __dev_queue_xmit() because
      dsa doesn't have LLTX.
      So that lockdep detects deadlock because the same lockdep class key is
      used recursively although actually the different locks are used.
      There are some ways to fix this problem.
    
      1. using NETIF_F_LLTX flag.
      If possible, using the LLTX flag is a very clear way for it.
      But I'm so sorry I don't know whether the dsa could have LLTX or not.
    
      2. using dynamic lockdep again.
      It means that each interface uses a separate lockdep class key.
      So, lockdep will not detect recursive locking.
      But this way has a problem that it could consume lockdep class key
      too many.
      Currently, lockdep can have 8192 lockdep class keys.
       - you can see this number with the following command.
         cat /proc/lockdep_stats
         lock-classes:                         1251 [max: 8192]
         ...
         The [max: 8192] means that the maximum number of lockdep class keys.
      If too many lockdep class keys are registered, lockdep stops to work.
      So, using a dynamic(separated) lockdep class key should be considered
      carefully.
      In addition, updating lockdep class key routine might have to be existing.
      (lockdep_register_key(), lockdep_set_class(), lockdep_unregister_key())
    
      3. Using lockdep subclass.
      A lockdep class key could have 8 subclasses.
      The different subclass is considered different locks by lockdep
      infrastructure.
      But "lock-classes" is not counted by subclasses.
      So, it could avoid stopping lockdep infrastructure by an overflow of
      lockdep class keys.
      This approach should also have an updating lockdep class key routine.
      (lockdep_set_subclass())
    
      4. Using nonvalidate lockdep class key.
      The lockdep infrastructure supports nonvalidate lockdep class key type.
      It means this lockdep is not validated by lockdep infrastructure.
      So, the splat will not happen but lockdep couldn't detect real deadlock
      case because lockdep really doesn't validate it.
      I think this should be used for really special cases.
      (lockdep_set_novalidate_class())
    
    Further discussion here:
    https://patchwork.ozlabs.org/project/netdev/patch/20200503052220.4536-2-xiyou.wangcong@gmail.com/
    
    There appears to be no negative side-effect to declaring lockless TX for
    the DSA virtual interfaces, which means they handle their own locking.
    So that's what we do to make the splat go away.
    
    Patch tested in a wide variety of cases: unicast, multicast, PTP, etc.
    
    Fixes: ab92d68fc22f ("net: core: add generic lockdep keys")
    Suggested-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07350d3bc7c150f987ff896b7bcbac1bb196ad69
Author: David Ahern <dsahern@gmail.com>
Date:   Tue May 26 12:56:18 2020 -0600

    ipv4: nexthop version of fib_info_nh_uses_dev
    
    commit 1fd1c768f3624a5e66766e7b4ddb9b607cd834a5 upstream.
    
    Similar to the last path, need to fix fib_info_nh_uses_dev for
    external nexthops to avoid referencing multiple nh_grp structs.
    Move the device check in fib_info_nh_uses_dev to a helper and
    create a nexthop version that is called if the fib_info uses an
    external nexthop.
    
    Fixes: 430a049190de ("nexthop: Add support for nexthop groups")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ef28c5b80b49dfaf697bfa00368fc60d60b1c4d
Author: David Ahern <dsahern@gmail.com>
Date:   Tue May 26 12:56:16 2020 -0600

    nexthop: Expand nexthop_is_multipath in a few places
    
    commit 0b5e2e39739e861fa5fc84ab27a35dbe62a15330 upstream.
    
    I got too fancy consolidating checks on multipath type. The result
    is that path lookups can access 2 different nh_grp structs as exposed
    by Nik's torture tests. Expand nexthop_is_multipath within nexthop.h to
    avoid multiple, nh_grp dereferences and make decisions based on the
    consistent struct.
    
    Only 2 places left using nexthop_is_multipath are within IPv6, both
    only check that the nexthop is a multipath for a branching decision
    which are acceptable.
    
    Fixes: 430a049190de ("nexthop: Add support for nexthop groups")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62524a84b6ce6eef41668334cbd213870ac02614
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Tue May 26 12:56:15 2020 -0600

    nexthops: don't modify published nexthop groups
    
    commit 90f33bffa382598a32cc82abfeb20adc92d041b6 upstream.
    
    We must avoid modifying published nexthop groups while they might be
    in use, otherwise we might see NULL ptr dereferences. In order to do
    that we allocate 2 nexthoup group structures upon nexthop creation
    and swap between them when we have to delete an entry. The reason is
    that we can't fail nexthop group removal, so we can't handle allocation
    failure thus we move the extra allocation on creation where we can
    safely fail and return ENOMEM.
    
    Fixes: 430a049190de ("nexthop: Add support for nexthop groups")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf424af7fa19f3c71b523af45594b7cbcc057502
Author: David Ahern <dsahern@gmail.com>
Date:   Tue May 26 12:56:14 2020 -0600

    nexthops: Move code from remove_nexthop_from_groups to remove_nh_grp_entry
    
    commit ac21753a5c2c9a6a2019997481a2ac12bbde48c8 upstream.
    
    Move nh_grp dereference and check for removing nexthop group due to
    all members gone into remove_nh_grp_entry.
    
    Fixes: 430a049190de ("nexthop: Add support for nexthop groups")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30e518e16e9b242e6197d54ae078192449c9340b
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 26 17:28:56 2020 -0700

    crypto: chelsio/chtls: properly set tp->lsndtime
    
    commit a4976a3ef844c510ae9120290b23e9f3f47d6bce upstream.
    
    TCP tp->lsndtime unit/base is tcp_jiffies32, not tcp_time_stamp()
    
    Fixes: 36bedb3f2e5b ("crypto: chtls - Inline TLS record Tx")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ayush Sawal <ayush.sawal@chelsio.com>
    Cc: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6d65c0c5fcdf67031689deac0fb62ccb11fbe8e
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Mon May 25 03:24:39 2020 -0500

    qlcnic: fix missing release in qlcnic_83xx_interrupt_test.
    
    commit 15c973858903009e995b2037683de29dfe968621 upstream.
    
    In function qlcnic_83xx_interrupt_test(), function
    qlcnic_83xx_diag_alloc_res() is not handled by function
    qlcnic_83xx_diag_free_res() after a call of the function
    qlcnic_alloc_mbx_args() failed. Fix this issue by adding
    a jump target "fail_mbx_args", and jump to this new target
    when qlcnic_alloc_mbx_args() failed.
    
    Fixes: b6b4316c8b2f ("qlcnic: Handle qlcnic_alloc_mbx_args() failure")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f37f743ad70a60d9d294fc3768a87ee878c8c271
Author: Björn Töpel <bjorn.topel@intel.com>
Date:   Mon May 25 10:03:59 2020 +0200

    xsk: Add overflow check for u64 division, stored into u32
    
    commit b16a87d0aef7a6be766f6618976dc5ff2c689291 upstream.
    
    The npgs member of struct xdp_umem is an u32 entity, and stores the
    number of pages the UMEM consumes. The calculation of npgs
    
      npgs = size / PAGE_SIZE
    
    can overflow.
    
    To avoid overflow scenarios, the division is now first stored in a
    u64, and the result is verified to fit into 32b.
    
    An alternative would be storing the npgs as a u64, however, this
    wastes memory and is an unrealisticly large packet area.
    
    Fixes: c0c77d8fb787 ("xsk: add user memory registration support sockopt")
    Reported-by: "Minh Bùi Quang" <minhquangbui99@gmail.com>
    Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Link: https://lore.kernel.org/bpf/CACtPs=GGvV-_Yj6rbpzTVnopgi5nhMoCcTkSkYrJHGQHJWFZMQ@mail.gmail.com/
    Link: https://lore.kernel.org/bpf/20200525080400.13195-1-bjorn.topel@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dabfcc6da41a35308f8734d9d5e9950070de142
Author: Jay Lang <jaytlang@mit.edu>
Date:   Sun May 24 12:27:39 2020 -0400

    x86/ioperm: Prevent a memory leak when fork fails
    
    commit 4bfe6cce133cad82cea04490c308795275857782 upstream.
    
    In the copy_process() routine called by _do_fork(), failure to allocate
    a PID (or further along in the function) will trigger an invocation to
    exit_thread(). This is done to clean up from an earlier call to
    copy_thread_tls(). Naturally, the child task is passed into exit_thread(),
    however during the process, io_bitmap_exit() nullifies the parent's
    io_bitmap rather than the child's.
    
    As copy_thread_tls() has been called ahead of the failure, the reference
    count on the calling thread's io_bitmap is incremented as we would expect.
    However, io_bitmap_exit() doesn't accept any arguments, and thus assumes
    it should trash the current thread's io_bitmap reference rather than the
    child's. This is pretty sneaky in practice, because in all instances but
    this one, exit_thread() is called with respect to the current task and
    everything works out.
    
    A determined attacker can issue an appropriate ioctl (i.e. KDENABIO) to
    get a bitmap allocated, and force a clone3() syscall to fail by passing
    in a zeroed clone_args structure. The kernel handles the erroneous struct
    and the buggy code path is followed, and even though the parent's reference
    to the io_bitmap is trashed, the child still holds a reference and thus
    the structure will never be freed.
    
    Fix this by tweaking io_bitmap_exit() and its subroutines to accept a
    task_struct argument which to operate on.
    
    Fixes: ea5f1cd7ab49 ("x86/ioperm: Remove bitmap if all permissions dropped")
    Signed-off-by: Jay Lang <jaytlang@mit.edu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable#@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200524162742.253727-1-jaytlang@mit.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb017c8eeebfea382ea0fd37cdcc76e2d39df310
Author: Pradeep Kumar Chitrapu <pradeepc@codeaurora.org>
Date:   Wed May 6 03:24:30 2020 -0700

    ieee80211: Fix incorrect mask for default PE duration
    
    commit d031781bdabe1027858a3220f868866586bf6e7c upstream.
    
    Fixes bitmask for HE opration's default PE duration.
    
    Fixes: daa5b83513a7 ("mac80211: update HE operation fields to D3.0")
    Signed-off-by: Pradeep Kumar Chitrapu <pradeepc@codeaurora.org>
    Link: https://lore.kernel.org/r/20200506102430.5153-1-pradeepc@codeaurora.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53fb3d209f1824b8de309df5ef3789615439c0b4
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Mon May 25 17:41:19 2020 -0400

    bnxt_en: fix firmware message length endianness
    
    commit 2a5a8800fa915bd9bc272c91ca64728e6aa84c0a upstream.
    
    The explicit mask and shift is not the appropriate way to parse fields
    out of a little endian struct. The length field is internally __le16
    and the strategy employed only happens to work on little endian machines
    because the offset used is actually incorrect (length is at offset 6).
    
    Also remove the related and no longer used definitions from bnxt.h.
    
    Fixes: 845adfe40c2a ("bnxt_en: Improve valid bit checking in firmware response message.")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b87c4ecd4757661bd10046896f87ad063ec7d58
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Mon May 25 17:41:17 2020 -0400

    bnxt_en: Fix accumulation of bp->net_stats_prev.
    
    commit b8056e8434b037fdab08158fea99ed7bc8ef3a74 upstream.
    
    We have logic to maintain network counters across resets by storing
    the counters in bp->net_stats_prev before reset.  But not all resets
    will clear the counters.  Certain resets that don't need to change
    the number of rings do not clear the counters.  The current logic
    accumulates the counters before all resets, causing big jumps in
    the counters after some resets, such as ethtool -G.
    
    Fix it by only accumulating the counters during reset if the irq_re_init
    parameter is set.  The parameter signifies that all rings and interrupts
    will be reset and that means that the counters will also be reset.
    
    Reported-by: Vijayendra Suman <vijayendra.suman@oracle.com>
    Fixes: b8875ca356f1 ("bnxt_en: Save ring statistics before reset.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee899046f79db390650e546446a7a0196788d39d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Apr 10 17:06:56 2020 +0800

    esp6: get the right proto for transport mode in esp6_gso_encap
    
    commit 3c96ec56828922e3fe5477f75eb3fc02f98f98b5 upstream.
    
    For transport mode, when ipv6 nexthdr is set, the packet format might
    be like:
    
        ----------------------------------------------------
        |        | dest |     |     |      |  ESP    | ESP |
        | IP6 hdr| opts.| ESP | TCP | Data | Trailer | ICV |
        ----------------------------------------------------
    
    What it wants to get for x-proto in esp6_gso_encap() is the proto that
    will be set in ESP nexthdr. So it should skip all ipv6 nexthdrs and
    get the real transport protocol. Othersize, the wrong proto number
    will be set into ESP nexthdr.
    
    This patch is to skip all ipv6 nexthdrs by calling ipv6_skip_exthdr()
    in esp6_gso_encap().
    
    Fixes: 7862b4058b9f ("esp: Add gso handlers for esp4 and esp6")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fccc0ba4235c7677be556427d9b907169911581
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu May 14 14:14:23 2020 +0200

    netfilter: nf_conntrack_pptp: prevent buffer overflows in debug code
    
    commit 4c559f15efcc43b996f4da528cd7f9483aaca36d upstream.
    
    Dan Carpenter says: "Smatch complains that the value for "cmd" comes
    from the network and can't be trusted."
    
    Add pptp_msg_name() helper function that checks for the array boundary.
    
    Fixes: f09943fefe6b ("[NETFILTER]: nf_conntrack/nf_nat: add PPTP helper port")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit daaa286f68714d5f473f474f577bfff7a0313c79
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun May 24 21:04:42 2020 +0200

    netfilter: nfnetlink_cthelper: unbreak userspace helper support
    
    commit 703acd70f2496537457186211c2f03e792409e68 upstream.
    
    Restore helper data size initialization and fix memcopy of the helper
    data size.
    
    Fixes: 157ffffeb5dc ("netfilter: nfnetlink_cthelper: reject too large userspace allocation requests")
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2827b10df26d5ad3d07363077e5a250117a32eea
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun May 24 19:52:10 2020 +0200

    netfilter: conntrack: make conntrack userspace helpers work again
    
    commit ee04805ff54a63ffd90bc6749ebfe73473734ddb upstream.
    
    Florian Westphal says:
    
    "Problem is that after the helper hook was merged back into the confirm
    one, the queueing itself occurs from the confirm hook, i.e. we queue
    from the last netfilter callback in the hook-list.
    
    Therefore, on return, the packet bypasses the confirm action and the
    connection is never committed to the main conntrack table.
    
    To fix this there are several ways:
    1. revert the 'Fixes' commit and have a extra helper hook again.
       Works, but has the drawback of adding another indirect call for
       everyone.
    
    2. Special case this: split the hooks only when userspace helper
       gets added, so queueing occurs at a lower priority again,
       and normal enqueue reinject would eventually call the last hook.
    
    3. Extend the existing nf_queue ct update hook to allow a forced
       confirmation (plus run the seqadj code).
    
    This goes for 3)."
    
    Fixes: 827318feb69cb ("netfilter: conntrack: remove helper hook again")
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9230d00ac21200d1a31b2bcb20a29faa314479e
Author: Phil Sutter <phil@nwl.cc>
Date:   Thu May 14 13:31:21 2020 +0200

    netfilter: ipset: Fix subcounter update skip
    
    commit a164b95ad6055c50612795882f35e0efda1f1390 upstream.
    
    If IPSET_FLAG_SKIP_SUBCOUNTER_UPDATE is set, user requested to not
    update counters in sub sets. Therefore IPSET_FLAG_SKIP_COUNTER_UPDATE
    must be set, not unset.
    
    Fixes: 6e01781d1c80e ("netfilter: ipset: set match: add support to match the counters")
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3323c59697401f457db56cd495ad55b3a8c51adf
Author: Michael Braun <michael-dev@fami-braun.de>
Date:   Wed May 6 11:46:25 2020 +0200

    netfilter: nft_reject_bridge: enable reject with bridge vlan
    
    commit e9c284ec4b41c827f4369973d2792992849e4fa5 upstream.
    
    Currently, using the bridge reject target with tagged packets
    results in untagged packets being sent back.
    
    Fix this by mirroring the vlan id as well.
    
    Fixes: 85f5b3086a04 ("netfilter: bridge: add reject support")
    Signed-off-by: Michael Braun <michael-dev@fami-braun.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 276626539799db7ff6114d75592ceac9c1c40671
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Apr 21 20:46:11 2020 +0800

    ip_vti: receive ipip packet by calling ip_tunnel_rcv
    
    commit 976eba8ab596bab94b9714cd46d38d5c6a2c660d upstream.
    
    In Commit dd9ee3444014 ("vti4: Fix a ipip packet processing bug in
    'IPCOMP' virtual tunnel"), it tries to receive IPIP packets in vti
    by calling xfrm_input(). This case happens when a small packet or
    frag sent by peer is too small to get compressed.
    
    However, xfrm_input() will still get to the IPCOMP path where skb
    sec_path is set, but never dropped while it should have been done
    in vti_ipcomp4_protocol.cb_handler(vti_rcv_cb), as it's not an
    ipcomp4 packet. This will cause that the packet can never pass
    xfrm4_policy_check() in the upper protocol rcv functions.
    
    So this patch is to call ip_tunnel_rcv() to process IPIP packets
    instead.
    
    Fixes: dd9ee3444014 ("vti4: Fix a ipip packet processing bug in 'IPCOMP' virtual tunnel")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4862fd8a28747b3849c5f705f8a880746c496dd1
Author: Antony Antony <antony@phenome.org>
Date:   Wed Apr 15 21:47:10 2020 +0200

    xfrm: fix error in comment
    
    commit 29e4276667e24ee6b91d9f91064d8fda9a210ea1 upstream.
    
    s/xfrm_state_offload/xfrm_user_offload/
    
    Fixes: d77e38e612a ("xfrm: Add an IPsec hardware offloading API")
    Signed-off-by: Antony Antony <antony@phenome.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc2070f35522581f856add269fc98fef67ae7309
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue May 26 17:41:46 2020 +0800

    xfrm: fix a NULL-ptr deref in xfrm_local_error
    
    commit f6a23d85d078c2ffde79c66ca81d0a1dde451649 upstream.
    
    This patch is to fix a crash:
    
      [ ] kasan: GPF could be caused by NULL-ptr deref or user memory access
      [ ] general protection fault: 0000 [#1] SMP KASAN PTI
      [ ] RIP: 0010:ipv6_local_error+0xac/0x7a0
      [ ] Call Trace:
      [ ]  xfrm6_local_error+0x1eb/0x300
      [ ]  xfrm_local_error+0x95/0x130
      [ ]  __xfrm6_output+0x65f/0xb50
      [ ]  xfrm6_output+0x106/0x46f
      [ ]  udp_tunnel6_xmit_skb+0x618/0xbf0 [ip6_udp_tunnel]
      [ ]  vxlan_xmit_one+0xbc6/0x2c60 [vxlan]
      [ ]  vxlan_xmit+0x6a0/0x4276 [vxlan]
      [ ]  dev_hard_start_xmit+0x165/0x820
      [ ]  __dev_queue_xmit+0x1ff0/0x2b90
      [ ]  ip_finish_output2+0xd3e/0x1480
      [ ]  ip_do_fragment+0x182d/0x2210
      [ ]  ip_output+0x1d0/0x510
      [ ]  ip_send_skb+0x37/0xa0
      [ ]  raw_sendmsg+0x1b4c/0x2b80
      [ ]  sock_sendmsg+0xc0/0x110
    
    This occurred when sending a v4 skb over vxlan6 over ipsec, in which case
    skb->protocol == htons(ETH_P_IPV6) while skb->sk->sk_family == AF_INET in
    xfrm_local_error(). Then it will go to xfrm6_local_error() where it tries
    to get ipv6 info from a ipv4 sk.
    
    This issue was actually fixed by Commit 628e341f319f ("xfrm: make local
    error reporting more robust"), but brought back by Commit 844d48746e4b
    ("xfrm: choose protocol family by skb protocol").
    
    So to fix it, we should call xfrm6_local_error() only when skb->protocol
    is htons(ETH_P_IPV6) and skb->sk->sk_family is AF_INET6.
    
    Fixes: 844d48746e4b ("xfrm: choose protocol family by skb protocol")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 511adac5df980e0fe249fcaaeac9eb328bcf085f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 25 13:53:37 2020 +0800

    xfrm: fix a warning in xfrm_policy_insert_list
    
    commit ed17b8d377eaf6b4a01d46942b4c647378a79bdd upstream.
    
    This waring can be triggered simply by:
    
      # ip xfrm policy update src 192.168.1.1/24 dst 192.168.1.2/24 dir in \
        priority 1 mark 0 mask 0x10  #[1]
      # ip xfrm policy update src 192.168.1.1/24 dst 192.168.1.2/24 dir in \
        priority 2 mark 0 mask 0x1   #[2]
      # ip xfrm policy update src 192.168.1.1/24 dst 192.168.1.2/24 dir in \
        priority 2 mark 0 mask 0x10  #[3]
    
    Then dmesg shows:
    
      [ ] WARNING: CPU: 1 PID: 7265 at net/xfrm/xfrm_policy.c:1548
      [ ] RIP: 0010:xfrm_policy_insert_list+0x2f2/0x1030
      [ ] Call Trace:
      [ ]  xfrm_policy_inexact_insert+0x85/0xe50
      [ ]  xfrm_policy_insert+0x4ba/0x680
      [ ]  xfrm_add_policy+0x246/0x4d0
      [ ]  xfrm_user_rcv_msg+0x331/0x5c0
      [ ]  netlink_rcv_skb+0x121/0x350
      [ ]  xfrm_netlink_rcv+0x66/0x80
      [ ]  netlink_unicast+0x439/0x630
      [ ]  netlink_sendmsg+0x714/0xbf0
      [ ]  sock_sendmsg+0xe2/0x110
    
    The issue was introduced by Commit 7cb8a93968e3 ("xfrm: Allow inserting
    policies with matching mark and different priorities"). After that, the
    policies [1] and [2] would be able to be added with different priorities.
    
    However, policy [3] will actually match both [1] and [2]. Policy [1]
    was matched due to the 1st 'return true' in xfrm_policy_mark_match(),
    and policy [2] was matched due to the 2nd 'return true' in there. It
    caused WARN_ON() in xfrm_policy_insert_list().
    
    This patch is to fix it by only (the same value and priority) as the
    same policy in xfrm_policy_mark_match().
    
    Thanks to Yuehaibing, we could make this fix better.
    
    v1->v2:
      - check policy->mark.v == pol->mark.v only without mask.
    
    Fixes: 7cb8a93968e3 ("xfrm: Allow inserting policies with matching mark and different priorities")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e446464b0f70ddc2b145feec24a6459bcd810258
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Thu Apr 23 00:06:45 2020 +0200

    xfrm interface: fix oops when deleting a x-netns interface
    
    commit c95c5f58b35ef995f66cb55547eee6093ab5fcb8 upstream.
    
    Here is the steps to reproduce the problem:
    ip netns add foo
    ip netns add bar
    ip -n foo link add xfrmi0 type xfrm dev lo if_id 42
    ip -n foo link set xfrmi0 netns bar
    ip netns del foo
    ip netns del bar
    
    Which results to:
    [  186.686395] general protection fault, probably for non-canonical address 0x6b6b6b6b6b6b6bd3: 0000 [#1] SMP PTI
    [  186.687665] CPU: 7 PID: 232 Comm: kworker/u16:2 Not tainted 5.6.0+ #1
    [  186.688430] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    [  186.689420] Workqueue: netns cleanup_net
    [  186.689903] RIP: 0010:xfrmi_dev_uninit+0x1b/0x4b [xfrm_interface]
    [  186.690657] Code: 44 f6 ff ff 31 c0 5b 5d 41 5c 41 5d 41 5e c3 48 8d 8f c0 08 00 00 8b 05 ce 14 00 00 48 8b 97 d0 08 00 00 48 8b 92 c0 0e 00 00 <48> 8b 14 c2 48 8b 02 48 85 c0 74 19 48 39 c1 75 0c 48 8b 87 c0 08
    [  186.692838] RSP: 0018:ffffc900003b7d68 EFLAGS: 00010286
    [  186.693435] RAX: 000000000000000d RBX: ffff8881b0f31000 RCX: ffff8881b0f318c0
    [  186.694334] RDX: 6b6b6b6b6b6b6b6b RSI: 0000000000000246 RDI: ffff8881b0f31000
    [  186.695190] RBP: ffffc900003b7df0 R08: ffff888236c07740 R09: 0000000000000040
    [  186.696024] R10: ffffffff81fce1b8 R11: 0000000000000002 R12: ffffc900003b7d80
    [  186.696859] R13: ffff8881edcc6a40 R14: ffff8881a1b6e780 R15: ffffffff81ed47c8
    [  186.697738] FS:  0000000000000000(0000) GS:ffff888237dc0000(0000) knlGS:0000000000000000
    [  186.698705] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  186.699408] CR2: 00007f2129e93148 CR3: 0000000001e0a000 CR4: 00000000000006e0
    [  186.700221] Call Trace:
    [  186.700508]  rollback_registered_many+0x32b/0x3fd
    [  186.701058]  ? __rtnl_unlock+0x20/0x3d
    [  186.701494]  ? arch_local_irq_save+0x11/0x17
    [  186.702012]  unregister_netdevice_many+0x12/0x55
    [  186.702594]  default_device_exit_batch+0x12b/0x150
    [  186.703160]  ? prepare_to_wait_exclusive+0x60/0x60
    [  186.703719]  cleanup_net+0x17d/0x234
    [  186.704138]  process_one_work+0x196/0x2e8
    [  186.704652]  worker_thread+0x1a4/0x249
    [  186.705087]  ? cancel_delayed_work+0x92/0x92
    [  186.705620]  kthread+0x105/0x10f
    [  186.706000]  ? __kthread_bind_mask+0x57/0x57
    [  186.706501]  ret_from_fork+0x35/0x40
    [  186.706978] Modules linked in: xfrm_interface nfsv3 nfs_acl auth_rpcgss nfsv4 nfs lockd grace fscache sunrpc button parport_pc parport serio_raw evdev pcspkr loop ext4 crc16 mbcache jbd2 crc32c_generic 8139too ide_cd_mod cdrom ide_gd_mod ata_generic ata_piix libata scsi_mod piix psmouse i2c_piix4 ide_core 8139cp i2c_core mii floppy
    [  186.710423] ---[ end trace 463bba18105537e5 ]---
    
    The problem is that x-netns xfrm interface are not removed when the link
    netns is removed. This causes later this oops when thoses interfaces are
    removed.
    
    Let's add a handler to remove all interfaces related to a netns when this
    netns is removed.
    
    Fixes: f203b76d7809 ("xfrm: Add virtual xfrm interfaces")
    Reported-by: Christophe Gouault <christophe.gouault@6wind.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79e595c6e5b3276fca36726348d0f0ac03226dbe
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Apr 20 21:51:09 2020 +0800

    xfrm: call xfrm_output_gso when inner_protocol is set in xfrm_output
    
    commit a204aef9fd77dce1efd9066ca4e44eede99cd858 upstream.
    
    An use-after-free crash can be triggered when sending big packets over
    vxlan over esp with esp offload enabled:
    
      [] BUG: KASAN: use-after-free in ipv6_gso_pull_exthdrs.part.8+0x32c/0x4e0
      [] Call Trace:
      []  dump_stack+0x75/0xa0
      []  kasan_report+0x37/0x50
      []  ipv6_gso_pull_exthdrs.part.8+0x32c/0x4e0
      []  ipv6_gso_segment+0x2c8/0x13c0
      []  skb_mac_gso_segment+0x1cb/0x420
      []  skb_udp_tunnel_segment+0x6b5/0x1c90
      []  inet_gso_segment+0x440/0x1380
      []  skb_mac_gso_segment+0x1cb/0x420
      []  esp4_gso_segment+0xae8/0x1709 [esp4_offload]
      []  inet_gso_segment+0x440/0x1380
      []  skb_mac_gso_segment+0x1cb/0x420
      []  __skb_gso_segment+0x2d7/0x5f0
      []  validate_xmit_skb+0x527/0xb10
      []  __dev_queue_xmit+0x10f8/0x2320 <---
      []  ip_finish_output2+0xa2e/0x1b50
      []  ip_output+0x1a8/0x2f0
      []  xfrm_output_resume+0x110e/0x15f0
      []  __xfrm4_output+0xe1/0x1b0
      []  xfrm4_output+0xa0/0x200
      []  iptunnel_xmit+0x5a7/0x920
      []  vxlan_xmit_one+0x1658/0x37a0 [vxlan]
      []  vxlan_xmit+0x5e4/0x3ec8 [vxlan]
      []  dev_hard_start_xmit+0x125/0x540
      []  __dev_queue_xmit+0x17bd/0x2320  <---
      []  ip6_finish_output2+0xb20/0x1b80
      []  ip6_output+0x1b3/0x390
      []  ip6_xmit+0xb82/0x17e0
      []  inet6_csk_xmit+0x225/0x3d0
      []  __tcp_transmit_skb+0x1763/0x3520
      []  tcp_write_xmit+0xd64/0x5fe0
      []  __tcp_push_pending_frames+0x8c/0x320
      []  tcp_sendmsg_locked+0x2245/0x3500
      []  tcp_sendmsg+0x27/0x40
    
    As on the tx path of vxlan over esp, skb->inner_network_header would be
    set on vxlan_xmit() and xfrm4_tunnel_encap_add(), and the later one can
    overwrite the former one. It causes skb_udp_tunnel_segment() to use a
    wrong skb->inner_network_header, then the issue occurs.
    
    This patch is to fix it by calling xfrm_output_gso() instead when the
    inner_protocol is set, in which gso_segment of inner_protocol will be
    done first.
    
    While at it, also improve some code around.
    
    Fixes: 7862b4058b9f ("esp: Add gso handlers for esp4 and esp6")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8dc2188ffe2edc88d10c768f27d9b80ca809259
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Thu Apr 16 17:45:44 2020 +0200

    xfrm: espintcp: save and call old ->sk_destruct
    
    commit 9f0cadc32d738f0f0c8e30be83be7087c7b85ee5 upstream.
    
    When ESP encapsulation is enabled on a TCP socket, I'm replacing the
    existing ->sk_destruct callback with espintcp_destruct. We still need to
    call the old callback to perform the other cleanups when the socket is
    destroyed. Save the old callback, and call it from espintcp_destruct.
    
    Fixes: e27cca96cd68 ("xfrm: add espintcp (RFC 8229)")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1876813d39bf2f5e6dfa5c332fd3bf688bdc254d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Apr 10 17:08:24 2020 +0800

    xfrm: remove the xfrm_state_put call becofe going to out_reset
    
    commit db87668ad1e4917cfe04e217307ba6ed9390716e upstream.
    
    This xfrm_state_put call in esp4/6_gro_receive() will cause
    double put for state, as in out_reset path secpath_reset()
    will put all states set in skb sec_path.
    
    So fix it by simply remove the xfrm_state_put call.
    
    Fixes: 6ed69184ed9c ("xfrm: Reset secpath in xfrm failure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 751e75cce8a13354151b55f2903b3127cfc2c199
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Apr 10 17:06:31 2020 +0800

    xfrm: do pskb_pull properly in __xfrm_transport_prep
    
    commit 06a0afcfe2f551ff755849ea2549b0d8409fd9a0 upstream.
    
    For transport mode, when ipv6 nexthdr is set, the packet format might
    be like:
    
        ----------------------------------------------------
        |        | dest |     |     |      |  ESP    | ESP |
        | IP6 hdr| opts.| ESP | TCP | Data | Trailer | ICV |
        ----------------------------------------------------
    
    and in __xfrm_transport_prep():
    
      pskb_pull(skb, skb->mac_len + sizeof(ip6hdr) + x->props.header_len);
    
    it will pull the data pointer to the wrong position, as it missed the
    nexthdrs/dest opts.
    
    This patch is to fix it by using:
    
      pskb_pull(skb, skb_transport_offset(skb) + x->props.header_len);
    
    as we can be sure transport_header points to ESP header at that moment.
    
    It also fixes a panic when packets with ipv6 nexthdr are sent over
    esp6 transport mode:
    
      [  100.473845] kernel BUG at net/core/skbuff.c:4325!
      [  100.478517] RIP: 0010:__skb_to_sgvec+0x252/0x260
      [  100.494355] Call Trace:
      [  100.494829]  skb_to_sgvec+0x11/0x40
      [  100.495492]  esp6_output_tail+0x12e/0x550 [esp6]
      [  100.496358]  esp6_xmit+0x1d5/0x260 [esp6_offload]
      [  100.498029]  validate_xmit_xfrm+0x22f/0x2e0
      [  100.499604]  __dev_queue_xmit+0x589/0x910
      [  100.502928]  ip6_finish_output2+0x2a5/0x5a0
      [  100.503718]  ip6_output+0x6c/0x120
      [  100.505198]  xfrm_output_resume+0x4bf/0x530
      [  100.508683]  xfrm6_output+0x3a/0xc0
      [  100.513446]  inet6_csk_xmit+0xa1/0xf0
      [  100.517335]  tcp_sendmsg+0x27/0x40
      [  100.517977]  sock_sendmsg+0x3e/0x60
      [  100.518648]  __sys_sendto+0xee/0x160
    
    Fixes: c35fe4106b92 ("xfrm: Add mode handlers for IPsec on layer 2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dcb609da7cd1822b592a0ea7234d8006b40e56c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Apr 10 17:06:01 2020 +0800

    xfrm: allow to accept packets with ipv6 NEXTHDR_HOP in xfrm_input
    
    commit afcaf61be9d1dbdee5ec186d1dcc67b6b692180f upstream.
    
    For beet mode, when it's ipv6 inner address with nexthdrs set,
    the packet format might be:
    
        ----------------------------------------------------
        | outer  |     | dest |     |      |  ESP    | ESP |
        | IP hdr | ESP | opts.| TCP | Data | Trailer | ICV |
        ----------------------------------------------------
    
    The nexthdr from ESP could be NEXTHDR_HOP(0), so it should
    continue processing the packet when nexthdr returns 0 in
    xfrm_input(). Otherwise, when ipv6 nexthdr is set, the
    packet will be dropped.
    
    I don't see any error cases that nexthdr may return 0. So
    fix it by removing the check for nexthdr == 0.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28ae629d311ff38fac54b1483166d3d0f54cf077
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue May 26 18:39:49 2020 -0400

    copy_xstate_to_kernel(): don't leave parts of destination uninitialized
    
    commit 9e4636545933131de15e1ecd06733538ae939b2f upstream.
    
    copy the corresponding pieces of init_fpstate into the gaps instead.
    
    Cc: stable@kernel.org
    Tested-by: Alexander Potapenko <glider@google.com>
    Acked-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b69223f2c19cc0bc731a90bb5a6007c8e975616
Author: Alexander Dahl <post@lespocky.de>
Date:   Tue May 26 19:57:49 2020 +0200

    x86/dma: Fix max PFN arithmetic overflow on 32 bit systems
    
    commit 88743470668ef5eb6b7ba9e0f99888e5999bf172 upstream.
    
    The intermediate result of the old term (4UL * 1024 * 1024 * 1024) is
    4 294 967 296 or 0x100000000 which is no problem on 64 bit systems.
    The patch does not change the later overall result of 0x100000 for
    MAX_DMA32_PFN (after it has been shifted by PAGE_SHIFT). The new
    calculation yields the same result, but does not require 64 bit
    arithmetic.
    
    On 32 bit systems the old calculation suffers from an arithmetic
    overflow in that intermediate term in braces: 4UL aka unsigned long int
    is 4 byte wide and an arithmetic overflow happens (the 0x100000000 does
    not fit in 4 bytes), the in braces result is truncated to zero, the
    following right shift does not alter that, so MAX_DMA32_PFN evaluates to
    0 on 32 bit systems.
    
    That wrong value is a problem in a comparision against MAX_DMA32_PFN in
    the init code for swiotlb in pci_swiotlb_detect_4gb() to decide if
    swiotlb should be active.  That comparison yields the opposite result,
    when compiling on 32 bit systems.
    
    This was not possible before
    
      1b7e03ef7570 ("x86, NUMA: Enable emulation on 32bit too")
    
    when that MAX_DMA32_PFN was first made visible to x86_32 (and which
    landed in v3.0).
    
    In practice this wasn't a problem, unless CONFIG_SWIOTLB is active on
    x86-32.
    
    However if one has set CONFIG_IOMMU_INTEL, since
    
      c5a5dc4cbbf4 ("iommu/vt-d: Don't switch off swiotlb if bounce page is used")
    
    there's a dependency on CONFIG_SWIOTLB, which was not necessarily
    active before. That landed in v5.4, where we noticed it in the fli4l
    Linux distribution. We have CONFIG_IOMMU_INTEL active on both 32 and 64
    bit kernel configs there (I could not find out why, so let's just say
    historical reasons).
    
    The effect is at boot time 64 MiB (default size) were allocated for
    bounce buffers now, which is a noticeable amount of memory on small
    systems like pcengines ALIX 2D3 with 256 MiB memory, which are still
    frequently used as home routers.
    
    We noticed this effect when migrating from kernel v4.19 (LTS) to v5.4
    (LTS) in fli4l and got that kernel messages for example:
    
      Linux version 5.4.22 (buildroot@buildroot) (gcc version 7.3.0 (Buildroot 2018.02.8)) #1 SMP Mon Nov 26 23:40:00 CET 2018
      …
      Memory: 183484K/261756K available (4594K kernel code, 393K rwdata, 1660K rodata, 536K init, 456K bss , 78272K reserved, 0K cma-reserved, 0K highmem)
      …
      PCI-DMA: Using software bounce buffering for IO (SWIOTLB)
      software IO TLB: mapped [mem 0x0bb78000-0x0fb78000] (64MB)
    
    The initial analysis and the suggested fix was done by user 'sourcejedi'
    at stackoverflow and explicitly marked as GPLv2 for inclusion in the
    Linux kernel:
    
      https://unix.stackexchange.com/a/520525/50007
    
    The new calculation, which does not suffer from that overflow, is the
    same as for arch/mips now as suggested by Robin Murphy.
    
    The fix was tested by fli4l users on round about two dozen different
    systems, including both 32 and 64 bit archs, bare metal and virtualized
    machines.
    
     [ bp: Massage commit message. ]
    
    Fixes: 1b7e03ef7570 ("x86, NUMA: Enable emulation on 32bit too")
    Reported-by: Alan Jenkins <alan.christopher.jenkins@gmail.com>
    Suggested-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Alexander Dahl <post@lespocky.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Link: https://unix.stackexchange.com/q/520065/50007
    Link: https://web.nettworks.org/bugs/browse/FFL-2560
    Link: https://lkml.kernel.org/r/20200526175749.20742-1-post@lespocky.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6da756cfb140da1f596b347b0d3d55ec641f642
Author: Linus Lüssing <ll@simonwunderlich.de>
Date:   Fri May 22 19:04:13 2020 +0200

    mac80211: mesh: fix discovery timer re-arming issue / crash
    
    commit e2d4a80f93fcfaf72e2e20daf6a28e39c3b90677 upstream.
    
    On a non-forwarding 802.11s link between two fairly busy
    neighboring nodes (iperf with -P 16 at ~850MBit/s TCP;
    1733.3 MBit/s VHT-MCS 9 80MHz short GI VHT-NSS 4), so with
    frequent PREQ retries, usually after around 30-40 seconds the
    following crash would occur:
    
    [ 1110.822428] Unable to handle kernel read from unreadable memory at virtual address 00000000
    [ 1110.830786] Mem abort info:
    [ 1110.833573]   Exception class = IABT (current EL), IL = 32 bits
    [ 1110.839494]   SET = 0, FnV = 0
    [ 1110.842546]   EA = 0, S1PTW = 0
    [ 1110.845678] user pgtable: 4k pages, 48-bit VAs, pgd = ffff800076386000
    [ 1110.852204] [0000000000000000] *pgd=00000000f6322003, *pud=00000000f62de003, *pmd=0000000000000000
    [ 1110.861167] Internal error: Oops: 86000004 [#1] PREEMPT SMP
    [ 1110.866730] Modules linked in: pppoe ppp_async batman_adv ath10k_pci ath10k_core ath pppox ppp_generic nf_conntrack_ipv6 mac80211 iptable_nat ipt_REJECT ipt_MASQUERADE cfg80211 xt_time xt_tcpudp xt_state xt_nat xt_multiport xt_mark xt_mac xt_limit xt_conntrack xt_comment xt_TCPMSS xt_REDIRECT xt_LOG xt_FLOWOFFLOAD slhc nf_reject_ipv4 nf_nat_redirect nf_nat_masquerade_ipv4 nf_conntrack_ipv4 nf_nat_ipv4 nf_nat nf_log_ipv4 nf_flow_table_hw nf_flow_table nf_defrag_ipv6 nf_defrag_ipv4 nf_conntrack_rtcache nf_conntrack iptable_mangle iptable_filter ip_tables crc_ccitt compat nf_log_ipv6 nf_log_common ip6table_mangle ip6table_filter ip6_tables ip6t_REJECT x_tables nf_reject_ipv6 usb_storage xhci_plat_hcd xhci_pci xhci_hcd dwc3 usbcore usb_common
    [ 1110.932190] Process swapper/3 (pid: 0, stack limit = 0xffff0000090c8000)
    [ 1110.938884] CPU: 3 PID: 0 Comm: swapper/3 Not tainted 4.14.162 #0
    [ 1110.944965] Hardware name: LS1043A RGW Board (DT)
    [ 1110.949658] task: ffff8000787a81c0 task.stack: ffff0000090c8000
    [ 1110.955568] PC is at 0x0
    [ 1110.958097] LR is at call_timer_fn.isra.27+0x24/0x78
    [ 1110.963055] pc : [<0000000000000000>] lr : [<ffff0000080ff29c>] pstate: 00400145
    [ 1110.970440] sp : ffff00000801be10
    [ 1110.973744] x29: ffff00000801be10 x28: ffff000008bf7018
    [ 1110.979047] x27: ffff000008bf87c8 x26: ffff000008c160c0
    [ 1110.984352] x25: 0000000000000000 x24: 0000000000000000
    [ 1110.989657] x23: dead000000000200 x22: 0000000000000000
    [ 1110.994959] x21: 0000000000000000 x20: 0000000000000101
    [ 1111.000262] x19: ffff8000787a81c0 x18: 0000000000000000
    [ 1111.005565] x17: ffff0000089167b0 x16: 0000000000000058
    [ 1111.010868] x15: ffff0000089167b0 x14: 0000000000000000
    [ 1111.016172] x13: ffff000008916788 x12: 0000000000000040
    [ 1111.021475] x11: ffff80007fda9af0 x10: 0000000000000001
    [ 1111.026777] x9 : ffff00000801bea0 x8 : 0000000000000004
    [ 1111.032080] x7 : 0000000000000000 x6 : ffff80007fda9aa8
    [ 1111.037383] x5 : ffff00000801bea0 x4 : 0000000000000010
    [ 1111.042685] x3 : ffff00000801be98 x2 : 0000000000000614
    [ 1111.047988] x1 : 0000000000000000 x0 : 0000000000000000
    [ 1111.053290] Call trace:
    [ 1111.055728] Exception stack(0xffff00000801bcd0 to 0xffff00000801be10)
    [ 1111.062158] bcc0:                                   0000000000000000 0000000000000000
    [ 1111.069978] bce0: 0000000000000614 ffff00000801be98 0000000000000010 ffff00000801bea0
    [ 1111.077798] bd00: ffff80007fda9aa8 0000000000000000 0000000000000004 ffff00000801bea0
    [ 1111.085618] bd20: 0000000000000001 ffff80007fda9af0 0000000000000040 ffff000008916788
    [ 1111.093437] bd40: 0000000000000000 ffff0000089167b0 0000000000000058 ffff0000089167b0
    [ 1111.101256] bd60: 0000000000000000 ffff8000787a81c0 0000000000000101 0000000000000000
    [ 1111.109075] bd80: 0000000000000000 dead000000000200 0000000000000000 0000000000000000
    [ 1111.116895] bda0: ffff000008c160c0 ffff000008bf87c8 ffff000008bf7018 ffff00000801be10
    [ 1111.124715] bdc0: ffff0000080ff29c ffff00000801be10 0000000000000000 0000000000400145
    [ 1111.132534] bde0: ffff8000787a81c0 ffff00000801bde8 0000ffffffffffff 000001029eb19be8
    [ 1111.140353] be00: ffff00000801be10 0000000000000000
    [ 1111.145220] [<          (null)>]           (null)
    [ 1111.149917] [<ffff0000080ff77c>] run_timer_softirq+0x184/0x398
    [ 1111.155741] [<ffff000008081938>] __do_softirq+0x100/0x1fc
    [ 1111.161130] [<ffff0000080a2e28>] irq_exit+0x80/0xd8
    [ 1111.166002] [<ffff0000080ea708>] __handle_domain_irq+0x88/0xb0
    [ 1111.171825] [<ffff000008081678>] gic_handle_irq+0x68/0xb0
    [ 1111.177213] Exception stack(0xffff0000090cbe30 to 0xffff0000090cbf70)
    [ 1111.183642] be20:                                   0000000000000020 0000000000000000
    [ 1111.191461] be40: 0000000000000001 0000000000000000 00008000771af000 0000000000000000
    [ 1111.199281] be60: ffff000008c95180 0000000000000000 ffff000008c19360 ffff0000090cbef0
    [ 1111.207101] be80: 0000000000000810 0000000000000400 0000000000000098 ffff000000000000
    [ 1111.214920] bea0: 0000000000000001 ffff0000089167b0 0000000000000000 ffff0000089167b0
    [ 1111.222740] bec0: 0000000000000000 ffff000008c198e8 ffff000008bf7018 ffff000008c19000
    [ 1111.230559] bee0: 0000000000000000 0000000000000000 ffff8000787a81c0 ffff000008018000
    [ 1111.238380] bf00: ffff00000801c000 ffff00000913ba34 ffff8000787a81c0 ffff0000090cbf70
    [ 1111.246199] bf20: ffff0000080857cc ffff0000090cbf70 ffff0000080857d0 0000000000400145
    [ 1111.254020] bf40: ffff000008018000 ffff00000801c000 ffffffffffffffff ffff0000080fa574
    [ 1111.261838] bf60: ffff0000090cbf70 ffff0000080857d0
    [ 1111.266706] [<ffff0000080832e8>] el1_irq+0xe8/0x18c
    [ 1111.271576] [<ffff0000080857d0>] arch_cpu_idle+0x10/0x18
    [ 1111.276880] [<ffff0000080d7de4>] do_idle+0xec/0x1b8
    [ 1111.281748] [<ffff0000080d8020>] cpu_startup_entry+0x20/0x28
    [ 1111.287399] [<ffff00000808f81c>] secondary_start_kernel+0x104/0x110
    [ 1111.293662] Code: bad PC value
    [ 1111.296710] ---[ end trace 555b6ca4363c3edd ]---
    [ 1111.301318] Kernel panic - not syncing: Fatal exception in interrupt
    [ 1111.307661] SMP: stopping secondary CPUs
    [ 1111.311574] Kernel Offset: disabled
    [ 1111.315053] CPU features: 0x0002000
    [ 1111.318530] Memory Limit: none
    [ 1111.321575] Rebooting in 3 seconds..
    
    With some added debug output / delays we were able to push the crash from
    the timer callback runner into the callback function and by that shedding
    some light on which object holding the timer gets corrupted:
    
    [  401.720899] Unable to handle kernel read from unreadable memory at virtual address 00000868
    [...]
    [  402.335836] [<ffff0000088fafa4>] _raw_spin_lock_bh+0x14/0x48
    [  402.341548] [<ffff000000dbe684>] mesh_path_timer+0x10c/0x248 [mac80211]
    [  402.348154] [<ffff0000080ff29c>] call_timer_fn.isra.27+0x24/0x78
    [  402.354150] [<ffff0000080ff77c>] run_timer_softirq+0x184/0x398
    [  402.359974] [<ffff000008081938>] __do_softirq+0x100/0x1fc
    [  402.365362] [<ffff0000080a2e28>] irq_exit+0x80/0xd8
    [  402.370231] [<ffff0000080ea708>] __handle_domain_irq+0x88/0xb0
    [  402.376053] [<ffff000008081678>] gic_handle_irq+0x68/0xb0
    
    The issue happens due to the following sequence of events:
    
    1) mesh_path_start_discovery():
    -> spin_unlock_bh(&mpath->state_lock) before mesh_path_sel_frame_tx()
    
    2) mesh_path_free_rcu()
    -> del_timer_sync(&mpath->timer)
       [...]
    -> kfree_rcu(mpath)
    
    3) mesh_path_start_discovery():
    -> mod_timer(&mpath->timer, ...)
       [...]
    -> rcu_read_unlock()
    
    4) mesh_path_free_rcu()'s kfree_rcu():
    -> kfree(mpath)
    
    5) mesh_path_timer() starts after timeout, using freed mpath object
    
    So a use-after-free issue due to a timer re-arming bug caused by an
    early spin-unlocking.
    
    This patch fixes this issue by re-checking if mpath is about to be
    free'd and if so bails out of re-arming the timer.
    
    Cc: stable@vger.kernel.org
    Fixes: 050ac52cbe1f ("mac80211: code for on-demand Hybrid Wireless Mesh Protocol")
    Cc: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Linus Lüssing <ll@simonwunderlich.de>
    Link: https://lore.kernel.org/r/20200522170413.14973-1-linus.luessing@c0d3.blue
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4de899ccd2fbddac057fc7de69a7a8a6d42d122
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon May 25 11:38:17 2020 +0200

    cfg80211: fix debugfs rename crash
    
    commit 0bbab5f0301587cad4e923ccc49bb910db86162c upstream.
    
    Removing the "if (IS_ERR(dir)) dir = NULL;" check only works
    if we adjust the remaining code to not rely on it being NULL.
    Check IS_ERR_OR_NULL() before attempting to dereference it.
    
    I'm not actually entirely sure this fixes the syzbot crash as
    the kernel config indicates that they do have DEBUG_FS in the
    kernel, but this is what I found when looking there.
    
    Cc: stable@vger.kernel.org
    Fixes: d82574a8e5a4 ("cfg80211: no need to check return value of debugfs_create functions")
    Reported-by: syzbot+fd5332e429401bf42d18@syzkaller.appspotmail.com
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200525113816.fc4da3ec3d4b.Ica63a110679819eaa9fb3bc1b7437d96b1fd187d@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 130088554c370b497ec7744bc437b09fee1991dd
Author: Helge Deller <deller@gmx.de>
Date:   Thu May 28 22:29:25 2020 +0200

    parisc: Fix kernel panic in mem_init()
    
    [ Upstream commit bf71bc16e02162388808949b179d59d0b571b965 ]
    
    The Debian kernel v5.6 triggers this kernel panic:
    
     Kernel panic - not syncing: Bad Address (null pointer deref?)
     Bad Address (null pointer deref?): Code=26 (Data memory access rights trap) at addr 0000000000000000
     CPU: 0 PID: 0 Comm: swapper Not tainted 5.6.0-2-parisc64 #1 Debian 5.6.14-1
      IAOQ[0]: mem_init+0xb0/0x150
      IAOQ[1]: mem_init+0xb4/0x150
      RP(r2): start_kernel+0x6c8/0x1190
     Backtrace:
      [<0000000040101ab4>] start_kernel+0x6c8/0x1190
      [<0000000040108574>] start_parisc+0x158/0x1b8
    
    on a HP-PARISC rp3440 machine with this memory layout:
     Memory Ranges:
      0) Start 0x0000000000000000 End 0x000000003fffffff Size   1024 MB
      1) Start 0x0000004040000000 End 0x00000040ffdfffff Size   3070 MB
    
    Fix the crash by avoiding virt_to_page() and similar functions in
    mem_init() until the memory zones have been fully set up.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org # v5.0+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2876ec4ee46423485a440a025f7922b0e55acd97
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Wed May 27 16:00:19 2020 -0500

    iommu: Fix reference count leak in iommu_group_alloc.
    
    [ Upstream commit 7cc31613734c4870ae32f5265d576ef296621343 ]
    
    kobject_init_and_add() takes reference even when it fails.
    Thus, when kobject_init_and_add() returns an error,
    kobject_put() must be called to properly clean up the kobject.
    
    Fixes: d72e31c93746 ("iommu: IOMMU Groups")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200527210020.6522-1-wu000273@umn.edu
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 316bd599b79ef24e70ee769a1cc844a7b155339f
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed May 27 16:07:58 2020 +0200

    gpio: fix locking open drain IRQ lines
    
    [ Upstream commit e9bdf7e655b9ee81ee912fae1d59df48ce7311b6 ]
    
    We provided the right semantics on open drain lines being
    by definition output but incidentally the irq set up function
    would only allow IRQs on lines that were "not output".
    
    Fix the semantics to allow output open drain lines to be used
    for IRQs.
    
    Reported-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Tested-by: Hans Verkuil <hverkuil@xs4all.nl>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: stable@vger.kernel.org # v5.3+
    Link: https://lore.kernel.org/r/20200527140758.162280-1-linus.walleij@linaro.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b94ab990ef4ad5ef444a3609f540d0acfc7b72d1
Author: Jens Axboe <axboe@kernel.dk>
Date:   Thu May 28 13:19:29 2020 -0600

    Revert "block: end bio with BLK_STS_AGAIN in case of non-mq devs and REQ_NOWAIT"
    
    [ Upstream commit b0beb28097fa04177b3769f4bb7a0d0d9c4ae76e ]
    
    This reverts commit c58c1f83436b501d45d4050fd1296d71a9760bcb.
    
    io_uring does do the right thing for this case, and we're still returning
    -EAGAIN to userspace for the cases we don't support. Revert this change
    to avoid doing endless spins of resubmits.
    
    Cc: stable@vger.kernel.org # v5.6
    Reported-by: Bijan Mottahedeh <bijan.mottahedeh@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 430f5de588dbcf2f937f5272a362425f4aee9162
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed May 27 22:20:55 2020 -0700

    include/asm-generic/topology.h: guard cpumask_of_node() macro argument
    
    [ Upstream commit 4377748c7b5187c3342a60fa2ceb60c8a57a8488 ]
    
    drivers/hwmon/amd_energy.c:195:15: error: invalid operands to binary expression ('void' and 'int')
                                            (channel - data->nr_cpus));
                                            ~~~~~~~~~^~~~~~~~~~~~~~~~~
    include/asm-generic/topology.h:51:42: note: expanded from macro 'cpumask_of_node'
        #define cpumask_of_node(node)       ((void)node, cpu_online_mask)
                                                   ^~~~
    include/linux/cpumask.h:618:72: note: expanded from macro 'cpumask_first_and'
     #define cpumask_first_and(src1p, src2p) cpumask_next_and(-1, (src1p), (src2p))
                                                                           ^~~~~
    
    Fixes: f0b848ce6fe9 ("cpumask: Introduce cpumask_of_{node,pcibus} to replace {node,pcibus}_to_cpumask")
    Fixes: 8abee9566b7e ("hwmon: Add amd_energy driver to report energy counters")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Link: http://lkml.kernel.org/r/20200527134623.930247-1-arnd@arndb.de
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit feb298333f54541cd747400dd45b13584b38bb32
Author: Alexander Potapenko <glider@google.com>
Date:   Wed May 27 22:20:52 2020 -0700

    fs/binfmt_elf.c: allocate initialized memory in fill_thread_core_info()
    
    [ Upstream commit 1d605416fb7175e1adf094251466caa52093b413 ]
    
    KMSAN reported uninitialized data being written to disk when dumping
    core.  As a result, several kilobytes of kmalloc memory may be written
    to the core file and then read by a non-privileged user.
    
    Reported-by: sam <sunhaoyl@outlook.com>
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200419100848.63472-1-glider@google.com
    Link: https://github.com/google/kmsan/issues/76
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00a2f53befeb890383ed14ae7c8eac94a90417fd
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Wed May 27 22:20:47 2020 -0700

    mm: remove VM_BUG_ON(PageSlab()) from page_mapcount()
    
    [ Upstream commit 6988f31d558aa8c744464a7f6d91d34ada48ad12 ]
    
    Replace superfluous VM_BUG_ON() with comment about correct usage.
    
    Technically reverts commit 1d148e218a0d ("mm: add VM_BUG_ON_PAGE() to
    page_mapcount()"), but context lines have changed.
    
    Function isolate_migratepages_block() runs some checks out of lru_lock
    when choose pages for migration.  After checking PageLRU() it checks
    extra page references by comparing page_count() and page_mapcount().
    Between these two checks page could be removed from lru, freed and taken
    by slab.
    
    As a result this race triggers VM_BUG_ON(PageSlab()) in page_mapcount().
    Race window is tiny.  For certain workload this happens around once a
    year.
    
        page:ffffea0105ca9380 count:1 mapcount:0 mapping:ffff88ff7712c180 index:0x0 compound_mapcount: 0
        flags: 0x500000000008100(slab|head)
        raw: 0500000000008100 dead000000000100 dead000000000200 ffff88ff7712c180
        raw: 0000000000000000 0000000080200020 00000001ffffffff 0000000000000000
        page dumped because: VM_BUG_ON_PAGE(PageSlab(page))
        ------------[ cut here ]------------
        kernel BUG at ./include/linux/mm.h:628!
        invalid opcode: 0000 [#1] SMP NOPTI
        CPU: 77 PID: 504 Comm: kcompactd1 Tainted: G        W         4.19.109-27 #1
        Hardware name: Yandex T175-N41-Y3N/MY81-EX0-Y3N, BIOS R05 06/20/2019
        RIP: 0010:isolate_migratepages_block+0x986/0x9b0
    
    The code in isolate_migratepages_block() was added in commit
    119d6d59dcc0 ("mm, compaction: avoid isolating pinned pages") before
    adding VM_BUG_ON into page_mapcount().
    
    This race has been predicted in 2015 by Vlastimil Babka (see link
    below).
    
    [akpm@linux-foundation.org: comment tweaks, per Hugh]
    Fixes: 1d148e218a0d ("mm: add VM_BUG_ON_PAGE() to page_mapcount()")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Hugh Dickins <hughd@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/159032779896.957378.7852761411265662220.stgit@buzz
    Link: https://lore.kernel.org/lkml/557710E1.6060103@suse.cz/
    Link: https://lore.kernel.org/linux-mm/158937872515.474360.5066096871639561424.stgit@buzz/T/ (v1)
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33beda31816e47f4aa54a863c81285c1ba6460a8
Author: Hugh Dickins <hughd@google.com>
Date:   Wed May 27 22:20:43 2020 -0700

    mm,thp: stop leaking unreleased file pages
    
    [ Upstream commit 2f33a706027c94cd4f70fcd3e3f4a17c1ce4ea4b ]
    
    When collapse_file() calls try_to_release_page(), it has already isolated
    the page: so if releasing buffers happens to fail (as it sometimes does),
    remember to putback_lru_page(): otherwise that page is left unreclaimable
    and unfreeable, and the file extent uncollapsible.
    
    Fixes: 99cb0dbd47a1 ("mm,thp: add read-only THP support for (non-shmem) FS")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Song Liu <songliubraving@fb.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: <stable@vger.kernel.org>    [5.4+]
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2005231837500.1766@eggly.anvils
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 908a3f0488376fb0a3709f9b8c2985d63a2e175a
Author: Valentine Fatiev <valentinef@mellanox.com>
Date:   Wed May 27 16:47:05 2020 +0300

    IB/ipoib: Fix double free of skb in case of multicast traffic in CM mode
    
    [ Upstream commit 1acba6a817852d4aa7916d5c4f2c82f702ee9224 ]
    
    When connected mode is set, and we have connected and datagram traffic in
    parallel, ipoib might crash with double free of datagram skb.
    
    The current mechanism assumes that the order in the completion queue is
    the same as the order of sent packets for all QPs. Order is kept only for
    specific QP, in case of mixed UD and CM traffic we have few QPs (one UD and
    few CM's) in parallel.
    
    The problem:
    ----------------------------------------------------------
    
    Transmit queue:
    -----------------
    UD skb pointer kept in queue itself, CM skb kept in spearate queue and
    uses transmit queue as a placeholder to count the number of total
    transmitted packets.
    
    0   1   2   3   4  5  6  7  8   9  10  11 12 13 .........127
    ------------------------------------------------------------
    NL ud1 UD2 CM1 ud3 cm2 cm3 ud4 cm4 ud5 NL NL NL ...........
    ------------------------------------------------------------
        ^                                  ^
       tail                               head
    
    Completion queue (problematic scenario) - the order not the same as in
    the transmit queue:
    
      1  2  3  4  5  6  7  8  9
    ------------------------------------
     ud1 CM1 UD2 ud3 cm2 cm3 ud4 cm4 ud5
    ------------------------------------
    
    1. CM1 'wc' processing
       - skb freed in cm separate ring.
       - tx_tail of transmit queue increased although UD2 is not freed.
         Now driver assumes UD2 index is already freed and it could be used for
         new transmitted skb.
    
    0   1   2   3   4  5  6  7  8   9  10  11 12 13 .........127
    ------------------------------------------------------------
    NL NL  UD2 CM1 ud3 cm2 cm3 ud4 cm4 ud5 NL NL NL ...........
    ------------------------------------------------------------
            ^   ^                       ^
          (Bad)tail                    head
    (Bad - Could be used for new SKB)
    
    In this case (due to heavy load) UD2 skb pointer could be replaced by new
    transmitted packet UD_NEW, as the driver assumes its free.  At this point
    we will have to process two 'wc' with same index but we have only one
    pointer to free.
    
    During second attempt to free the same skb we will have NULL pointer
    exception.
    
    2. UD2 'wc' processing
       - skb freed according the index we got from 'wc', but it was already
         overwritten by mistake. So actually the skb that was released is the
         skb of the new transmitted packet and not the original one.
    
    3. UD_NEW 'wc' processing
       - attempt to free already freed skb. NUll pointer exception.
    
    The fix:
    -----------------------------------------------------------------------
    
    The fix is to stop using the UD ring as a placeholder for CM packets, the
    cyclic ring variables tx_head and tx_tail will manage the UD tx_ring, a
    new cyclic variables global_tx_head and global_tx_tail are introduced for
    managing and counting the overall outstanding sent packets, then the send
    queue will be stopped and waken based on these variables only.
    
    Note that no locking is needed since global_tx_head is updated in the xmit
    flow and global_tx_tail is updated in the NAPI flow only.  A previous
    attempt tried to use one variable to count the outstanding sent packets,
    but it did not work since xmit and NAPI flows can run at the same time and
    the counter will be updated wrongly. Thus, we use the same simple cyclic
    head and tail scheme that we have today for the UD tx_ring.
    
    Fixes: 2c104ea68350 ("IB/ipoib: Get rid of the tx_outstanding variable in all modes")
    Link: https://lore.kernel.org/r/20200527134705.480068-1-leon@kernel.org
    Signed-off-by: Valentine Fatiev <valentinef@mellanox.com>
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be31933db49c8e3d81b96ee6bc9933d2adafe13d
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Tue May 12 11:48:48 2020 -0400

    drm/amd/display: Fix potential integer wraparound resulting in a hang
    
    [ Upstream commit 4e5183200d9b66695c754ef214933402056e7b95 ]
    
    [Why]
    If VUPDATE_END is before VUPDATE_START the delay calculated can become
    very large, causing a soft hang.
    
    [How]
    Take the absolute value of the difference between START and END.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8155c5cd73cf6552767e65f0ee46930fb0d792c4
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon May 4 16:49:28 2020 -0400

    drm/amd/display: Defer cursor lock until after VUPDATE
    
    [ Upstream commit 31ecebee9c36d5e5e113a357a655d993fa916174 ]
    
    [Why]
    We dropped the delay after changed the cursor functions locking the
    entire pipe to locking just the CURSOR registers to fix page flip
    stuttering - this introduced cursor stuttering instead, and an underflow
    issue.
    
    The cursor update can be delayed indefinitely if the cursor update
    repeatedly happens right around VUPDATE.
    
    The underflow issue can happen if we do a viewport update on a pipe
    on the same frame where a cursor update happens around VUPDATE - the
    old cursor registers are retained which can be in an invalid position.
    
    This can cause a pipe hang and indefinite underflow.
    
    [How]
    The complex, ideal solution to the problem would be a software
    triple buffering mechanism from the DM layer to program only one cursor
    update per frame just before VUPDATE.
    
    The simple workaround until we have that infrastructure in place is
    this change - bring back the delay until VUPDATE before locking, but
    with some corrections to the calculations.
    
    This didn't work for all timings before because the calculation for
    VUPDATE was wrong - it was using the offset from VSTARTUP instead and
    didn't correctly handle the case where VUPDATE could be in the back
    porch.
    
    Add a new hardware sequencer function to use the existing helper to
    calculate the real VUPDATE start and VUPDATE end - VUPDATE can last
    multiple lines after all.
    
    Change the udelay to incorporate the width of VUPDATE as well.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7230ff74b81eca9d5a8cdd93fbd50b373c71776
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Wed Apr 22 18:08:03 2020 -0400

    drm/amd/display: Use cursor locking to prevent flip delays
    
    [ Upstream commit b2a7b0ce0773bfa4406bc0a78e41979532a1edd7 ]
    
    [Why]
    Current locking scheme for cursor can result in a flip missing
    its vsync, deferring it for one or more vsyncs.  Result is a
    potential for stuttering when cursor is moved.
    
    [How]
    Use cursor update lock so that flips are not blocked while cursor
    is being programmed.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf4ff96fe9aac483e972c77285c8881a4bb5ae9f
Author: Anthony Koo <Anthony.Koo@amd.com>
Date:   Tue Jan 14 17:04:24 2020 -0500

    drm/amd/display: Added locking for atomic update stream and update planes
    
    [ Upstream commit 009114f6df84150a567b05537aa29b9d660e419b ]
    
    [Why]
    Screen flickering when HDR switches between FP16 and ARGB2101010
    
    [How]
    Moved pipe_control_lock so stream update and plane update occur atomically
    
    Signed-off-by: Anthony Koo <Anthony.Koo@amd.com>
    Signed-off-by: Lucy Li <lucy.li@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96e9607ab2481f14ef1a84890122ac529010bed0
Author: Anthony Koo <Anthony.Koo@amd.com>
Date:   Tue Jan 14 17:02:09 2020 -0500

    drm/amd/display: Indicate dsc updates explicitly
    
    [ Upstream commit acdac228c4d1b9ff8ac778835719d3381c198aad ]
    
    [Why]
    DSC updates only set type to FULL UPDATE, but doesn't
    flag the change
    
    [How]
    Add DSC flag update flag
    
    Signed-off-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fc20b04d12c0827dbf498532e8a736a1f88ad6f
Author: Anthony Koo <Anthony.Koo@amd.com>
Date:   Tue Jan 14 16:23:31 2020 -0500

    drm/amd/display: Split program front end part that occur outside lock
    
    [ Upstream commit bbf5f6c3f83bedd71006473849138a446ad4d9a3 ]
    
    [Why]
    Eventually want to lock at a higher level in stack.
    To do this, we need to be able to isolate the parts that need to be done
    after pipe unlock.
    
    [How]
    Split out programming that is done post unlock.
    
    Signed-off-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 674458e8b4dde91e770a09e6733bc265f8fa4b84
Author: Simon Ser <contact@emersion.fr>
Date:   Sat May 23 11:53:41 2020 +0000

    drm/amd/display: drop cursor position check in atomic test
    
    [ Upstream commit f7d5991b92ff824798693ddf231cf814c9d5a88b ]
    
    get_cursor_position already handles the case where the cursor has
    negative off-screen coordinates by not setting
    dc_cursor_position.enabled.
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Fixes: 626bf90fe03f ("drm/amd/display: add basic atomic check for cursor plane")
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 563245b614e7d3e73d30dd1a5269e2cf0c112532
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Wed May 27 16:55:34 2020 +0300

    RDMA/core: Fix double destruction of uobject
    
    [ Upstream commit c85f4abe66bea0b5db8d28d55da760c4fe0a0301 ]
    
    Fix use after free when user user space request uobject concurrently for
    the same object, within the RCU grace period.
    
    In that case, remove_handle_idr_uobject() is called twice and we will have
    an extra put on the uobject which cause use after free.  Fix it by leaving
    the uobject write locked after it was removed from the idr.
    
    Call to rdma_lookup_put_uobject with UVERBS_LOOKUP_DESTROY instead of
    UVERBS_LOOKUP_WRITE will do the work.
    
      refcount_t: underflow; use-after-free.
      WARNING: CPU: 0 PID: 1381 at lib/refcount.c:28 refcount_warn_saturate+0xfe/0x1a0
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 0 PID: 1381 Comm: syz-executor.0 Not tainted 5.5.0-rc3 #8
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x94/0xce
       panic+0x234/0x56f
       __warn+0x1cc/0x1e1
       report_bug+0x200/0x310
       fixup_bug.part.11+0x32/0x80
       do_error_trap+0xd3/0x100
       do_invalid_op+0x31/0x40
       invalid_op+0x1e/0x30
      RIP: 0010:refcount_warn_saturate+0xfe/0x1a0
      Code: 0f 0b eb 9b e8 23 f6 6d ff 80 3d 6c d4 19 03 00 75 8d e8 15 f6 6d ff 48 c7 c7 c0 02 55 bd c6 05 57 d4 19 03 01 e8 a2 58 49 ff <0f> 0b e9 6e ff ff ff e8 f6 f5 6d ff 80 3d 42 d4 19 03 00 0f 85 5c
      RSP: 0018:ffffc90002df7b98 EFLAGS: 00010282
      RAX: 0000000000000000 RBX: ffff88810f6a193c RCX: ffffffffba649009
      RDX: 0000000000000000 RSI: 0000000000000008 RDI: ffff88811b0283cc
      RBP: 0000000000000003 R08: ffffed10236060e3 R09: ffffed10236060e3
      R10: 0000000000000001 R11: ffffed10236060e2 R12: ffff88810f6a193c
      R13: ffffc90002df7d60 R14: 0000000000000000 R15: ffff888116ae6a08
       uverbs_uobject_put+0xfd/0x140
       __uobj_perform_destroy+0x3d/0x60
       ib_uverbs_close_xrcd+0x148/0x170
       ib_uverbs_write+0xaa5/0xdf0
       __vfs_write+0x7c/0x100
       vfs_write+0x168/0x4a0
       ksys_write+0xc8/0x200
       do_syscall_64+0x9c/0x390
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x465b49
      Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
      RSP: 002b:00007f759d122c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
      RAX: ffffffffffffffda RBX: 000000000073bfa8 RCX: 0000000000465b49
      RDX: 000000000000000c RSI: 0000000020000080 RDI: 0000000000000003
      RBP: 0000000000000003 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000246 R12: 00007f759d1236bc
      R13: 00000000004ca27c R14: 000000000070de40 R15: 00000000ffffffff
      Dumping ftrace buffer:
         (ftrace buffer empty)
      Kernel Offset: 0x39400000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    
    Fixes: 7452a3c745a2 ("IB/uverbs: Allow RDMA_REMOVE_DESTROY to work concurrently with disassociate")
    Link: https://lore.kernel.org/r/20200527135534.482279-1-leon@kernel.org
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33156b2764191bf33c58adb84a0a8ac2912d7962
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed May 20 10:36:07 2020 -0400

    ceph: flush release queue when handling caps for unknown inode
    
    [ Upstream commit fb33c114d3ed5bdac230716f5b0a93b56b92a90d ]
    
    It's possible for the VFS to completely forget about an inode, but for
    it to still be sitting on the cap release queue. If the MDS sends the
    client a cap message for such an inode, it just ignores it today, which
    can lead to a stall of up to 5s until the cap release queue is flushed.
    
    If we get a cap message for an inode that can't be located, then go
    ahead and flush the cap release queue.
    
    Cc: stable@vger.kernel.org
    URL: https://tracker.ceph.com/issues/45532
    Fixes: 1e9c2eb6811e ("ceph: delete stale dentry when last reference is dropped")
    Reported-and-Tested-by: Andrej Filipčič <andrej.filipcic@ijs.si>
    Suggested-by: Yan, Zheng <zyan@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ffdf749ee066ac103213302389cf27995d36786
Author: Jerry Lee <leisurelysw24@gmail.com>
Date:   Mon May 18 16:03:09 2020 +0800

    libceph: ignore pool overlay and cache logic on redirects
    
    [ Upstream commit 890bd0f8997ae6ac0a367dd5146154a3963306dd ]
    
    OSD client should ignore cache/overlay flag if got redirect reply.
    Otherwise, the client hangs when the cache tier is in forward mode.
    
    [ idryomov: Redirects are effectively deprecated and no longer
      used or tested.  The original tiering modes based on redirects
      are inherently flawed because redirects can race and reorder,
      potentially resulting in data corruption.  The new proxy and
      readproxy tiering modes should be used instead of forward and
      readforward.  Still marking for stable as obviously correct,
      though. ]
    
    Cc: stable@vger.kernel.org
    URL: https://tracker.ceph.com/issues/23296
    URL: https://tracker.ceph.com/issues/36406
    Signed-off-by: Jerry Lee <leisurelysw24@gmail.com>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c5567fbbe3b690fe77b97fc3cf8795efaeae728
Author: Kailang Yang <kailang@realtek.com>
Date:   Wed May 27 14:10:26 2020 +0800

    ALSA: hda/realtek - Add new codec supported for ALC287
    
    [ Upstream commit 630e36126e420e1756378b3427b42711ce0b9ddd ]
    
    Enable new codec supported for ALC287.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/dcf5ce5507104d0589a917cbb71dc3c6@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62d762a92eb572838d0891fa6bfa20ef5e1d1670
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue May 26 10:28:10 2020 +0200

    ALSA: usb-audio: Quirks for Gigabyte TRX40 Aorus Master onboard audio
    
    [ Upstream commit 7f5ad9c9003425175f46c94df380e8c9e558cfb5 ]
    
    Gigabyte TRX40 Aorus Master is equipped with two USB-audio devices,
    a Realtek ALC1220-VB codec (USB ID 0414:a001) and an ESS SABRE9218 DAC
    (USB ID 0414:a000).  The latter serves solely for the headphone output
    on the front panel while the former serves for the rest I/Os (mostly
    for the I/Os in the rear panel but also including the front mic).
    
    Both chips do work more or less with the unmodified USB-audio driver,
    but there are a few glitches.  The ALC1220-VB returns an error for an
    inquiry to some jacks, as already seen on other TRX40-based mobos.
    However this machine has a slightly incompatible configuration, hence
    the existing mapping cannot be used as is.
    
    Meanwhile the ESS chip seems working without any quirk.  But since
    both audio devices don't provide any specific names, both cards appear
    as "USB-Audio", and it's quite confusing for users.
    
    This patch is an attempt to overcome those issues:
    
    - The specific mapping table for ALC1220-VB is provided, reducing the
      non-working nodes and renaming the badly chosen controls.
      The connector map isn't needed here unlike other TRX40 quirks.
    
    - For both USB IDs (0414:a000 and 0414:a001), provide specific card
      name strings, so that user-space can identify more easily; and more
      importantly, UCM profile can be applied to each.
    
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200526082810.29506-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c872a84d8692fc1d0db8de406818b8887d9dee8
Author: Vinod Koul <vkoul@kernel.org>
Date:   Thu May 21 10:57:28 2020 +0530

    clk: qcom: gcc: Fix parent for gpll0_out_even
    
    [ Upstream commit a76f274182f054481182c81cd62bb8794a5450a6 ]
    
    Documentation says that gpll0 is parent of gpll0_out_even, somehow
    driver coded that as bi_tcxo, so fix it
    
    Fixes: 2a1d7eb854bb ("clk: qcom: gcc: Add global clock controller driver for SM8150")
    Reported-by: Jonathan Marek <jonathan@marek.ca>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lkml.kernel.org/r/20200521052728.2141377-1-vkoul@kernel.org
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a916ea1b714f1ac8c9e0ba70b2b876890873e29e
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Mon May 25 12:56:15 2020 -0500

    exec: Always set cap_ambient in cap_bprm_set_creds
    
    [ Upstream commit a4ae32c71fe90794127b32d26d7ad795813b502e ]
    
    An invariant of cap_bprm_set_creds is that every field in the new cred
    structure that cap_bprm_set_creds might set, needs to be set every
    time to ensure the fields does not get a stale value.
    
    The field cap_ambient is not set every time cap_bprm_set_creds is
    called, which means that if there is a suid or sgid script with an
    interpreter that has neither the suid nor the sgid bits set the
    interpreter should be able to accept ambient credentials.
    Unfortuantely because cap_ambient is not reset to it's original value
    the interpreter can not accept ambient credentials.
    
    Given that the ambient capability set is expected to be controlled by
    the caller, I don't think this is particularly serious.  But it is
    definitely worth fixing so the code works correctly.
    
    I have tested to verify my reading of the code is correct and the
    interpreter of a sgid can receive ambient capabilities with this
    change and cannot receive ambient capabilities without this change.
    
    Cc: stable@vger.kernel.org
    Cc: Andy Lutomirski <luto@kernel.org>
    Fixes: 58319057b784 ("capabilities: ambient capabilities")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9315cdb6b72ded42d9832d10063a4fe76901001
Author: Chris Chiu <chiu@endlessm.com>
Date:   Tue May 26 14:26:13 2020 +0800

    ALSA: usb-audio: mixer: volume quirk for ESS Technology Asus USB DAC
    
    [ Upstream commit 4020d1ccbe55bdf67b31d718d2400506eaf4b43f ]
    
    The Asus USB DAC is a USB type-C audio dongle for connecting to
    the headset and headphone. The volume minimum value -23040 which
    is 0xa600 in hexadecimal with the resolution value 1 indicates
    this should be endianness issue caused by the firmware bug. Add
    a volume quirk to fix the volume control problem.
    
    Also fixes this warning:
      Warning! Unlikely big volume range (=23040), cval->res is probably wrong.
      [5] FU [Headset Capture Volume] ch = 1, val = -23040/0/1
      Warning! Unlikely big volume range (=23040), cval->res is probably wrong.
      [7] FU [Headset Playback Volume] ch = 1, val = -23040/0/1
    
    Signed-off-by: Chris Chiu <chiu@endlessm.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200526062613.55401-1-chiu@endlessm.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16d6287973706cd6d6324fcb9d7f996b7405dac1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue May 26 08:24:06 2020 +0200

    ALSA: hda/realtek - Add a model for Thinkpad T570 without DAC workaround
    
    [ Upstream commit 399c01aa49e548c82d40f8161915a5941dd3c60e ]
    
    We fixed the regression of the speaker volume for some Thinkpad models
    (e.g. T570) by the commit 54947cd64c1b ("ALSA: hda/realtek - Fix
    speaker output regression on Thinkpad T570").  Essentially it fixes
    the DAC / pin pairing by a static table.  It was confirmed and merged
    to stable kernel later.
    
    Now, interestingly, we got another regression report for the very same
    model (T570) about the similar problem, and the commit above was the
    culprit.  That is, by some reason, there are devices that prefer the
    DAC1, and another device DAC2!
    
    Unfortunately those have the same ID and we have no idea what can
    differentiate, in this patch, a new fixup model "tpt470-dock-fix" is
    provided, so that users with such a machine can apply it manually.
    When model=tpt470-dock-fix option is passed to snd-hda-intel module,
    it avoids the fixed DAC pairing and the DAC1 is assigned to the
    speaker like the earlier versions.
    
    Fixes: 54947cd64c1b ("ALSA: hda/realtek - Fix speaker output regression on Thinkpad T570")
    BugLink: https://apibugzilla.suse.com/show_bug.cgi?id=1172017
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200526062406.9799-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 390b61f14d9299a53432ce25aa3d2efd91508d7a
Author: Changming Liu <liu.changm@northeastern.edu>
Date:   Tue May 26 00:39:21 2020 +0000

    ALSA: hwdep: fix a left shifting 1 by 31 UB bug
    
    [ Upstream commit fb8cd6481ffd126f35e9e146a0dcf0c4e8899f2e ]
    
    The "info.index" variable can be 31 in "1 << info.index".
    This might trigger an undefined behavior since 1 is signed.
    
    Fix this by casting 1 to 1u just to be sure "1u << 31" is defined.
    
    Signed-off-by: Changming Liu <liu.changm@northeastern.edu>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/BL0PR06MB4548170B842CB055C9AF695DE5B00@BL0PR06MB4548.namprd06.prod.outlook.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7200326775b007b103e7bd3addac52e74cc32a07
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Fri May 22 22:04:57 2020 -0500

    RDMA/pvrdma: Fix missing pci disable in pvrdma_pci_probe()
    
    [ Upstream commit db857e6ae548f0f4f4a0f63fffeeedf3cca21f9d ]
    
    In function pvrdma_pci_probe(), pdev was not disabled in one error
    path. Thus replace the jump target “err_free_device” by
    "err_disable_pdev".
    
    Fixes: 29c8d9eba550 ("IB: Add vmw_pvrdma driver")
    Link: https://lore.kernel.org/r/20200523030457.16160-1-wu000273@umn.edu
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66408857fd6a0318dd9d085afb935eac8a8638da
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Fri May 22 12:12:18 2020 +0800

    gpio: bcm-kona: Fix return value of bcm_kona_gpio_probe()
    
    [ Upstream commit 98f7d1b15e87c84488b30ecc4ec753b0690b9dbf ]
    
    Propagate the error code returned by devm_platform_ioremap_resource()
    out of probe() instead of overwriting it.
    
    Fixes: 72d8cb715477 ("drivers: gpio: bcm-kona: use devm_platform_ioremap_resource()")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    [Bartosz: tweaked the commit message]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74151b68a9538d2c97d80e40946dee02e97c1e67
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Fri May 22 12:12:19 2020 +0800

    gpio: pxa: Fix return value of pxa_gpio_probe()
    
    [ Upstream commit 558ab2e8155e5f42ca0a6407957cd4173dc166cc ]
    
    When call function devm_platform_ioremap_resource(), we should use IS_ERR()
    to check the return value and return PTR_ERR() if failed.
    
    Fixes: 542c25b7a209 ("drivers: gpio: pxa: use devm_platform_ioremap_resource()")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d763d4d2aa195a84cfcdc618e2ef9da31d924c3
Author: Peng Hao <richard.peng@oppo.com>
Date:   Fri May 22 09:29:25 2020 +0000

    mmc: block: Fix use-after-free issue for rpmb
    
    [ Upstream commit 202500d21654874aa03243e91f96de153ec61860 ]
    
    The data structure member “rpmb->md” was passed to a call of the function
    “mmc_blk_put” after a call of the function “put_device”. Reorder these
    function calls to keep the data accesses consistent.
    
    Fixes: 1c87f7357849 ("mmc: block: Fix bug when removing RPMB chardev ")
    Signed-off-by: Peng Hao <richard.peng@oppo.com>
    Cc: stable@vger.kernel.org
    [Uffe: Fixed up mangled patch and updated commit message]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8f3b91618c2610eb8d444799f95e2d4c5109321
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu May 21 10:25:04 2020 +0300

    RDMA/mlx5: Fix NULL pointer dereference in destroy_prefetch_work
    
    [ Upstream commit 189277f3814c36133f4ff0352f4b5194a38486b6 ]
    
    q_deferred_work isn't initialized when creating an explicit ODP memory
    region. This can lead to a NULL pointer dereference when user performs
    asynchronous prefetch MR. Fix it by initializing q_deferred_work for
    explicit ODP.
    
      BUG: kernel NULL pointer dereference, address: 0000000000000000
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] SMP PTI
      CPU: 4 PID: 6074 Comm: kworker/u16:6 Not tainted 5.7.0-rc1-for-upstream-perf-2020-04-17_07-03-39-64 #1
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
      Workqueue: events_unbound mlx5_ib_prefetch_mr_work [mlx5_ib]
      RIP: 0010:__wake_up_common+0x49/0x120
      Code: 04 89 54 24 0c 89 4c 24 08 74 0a 41 f6 01 04 0f 85 8e 00 00 00 48 8b 47 08 48 83 e8 18 4c 8d 67 08 48 8d 50 18 49 39 d4 74 66 <48> 8b 70 18 31 db 4c 8d 7e e8 eb 17 49 8b 47 18 48 8d 50 e8 49 8d
      RSP: 0000:ffffc9000097bd88 EFLAGS: 00010082
      RAX: ffffffffffffffe8 RBX: ffff888454cd9f90 RCX: 0000000000000000
      RDX: 0000000000000000 RSI: 0000000000000003 RDI: ffff888454cd9f90
      RBP: ffffc9000097bdd0 R08: 0000000000000000 R09: ffffc9000097bdd0
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff888454cd9f98
      R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000003
      FS:  0000000000000000(0000) GS:ffff88846fd00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000000 CR3: 000000044c19e002 CR4: 0000000000760ee0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       __wake_up_common_lock+0x7a/0xc0
       destroy_prefetch_work+0x5a/0x60 [mlx5_ib]
       mlx5_ib_prefetch_mr_work+0x64/0x80 [mlx5_ib]
       process_one_work+0x15b/0x360
       worker_thread+0x49/0x3d0
       kthread+0xf5/0x130
       ? rescuer_thread+0x310/0x310
       ? kthread_bind+0x10/0x10
       ret_from_fork+0x1f/0x30
    
    Fixes: de5ed007a03d ("IB/mlx5: Fix implicit ODP race")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200521072504.567406-1-leon@kernel.org
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a81254cb8f1b06bfe55953d013629b63bbd03c49
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Apr 19 19:11:55 2020 +0200

    ARM: dts: mmp3: Drop usb-nop-xceiv from HSIC phy
    
    [ Upstream commit 24cf6eef79a7e85cfd2ef9dea52f769c9192fc6e ]
    
    "usb-nop-xceiv" is good enough if we don't lose the configuration done
    by the firmware, but we'd really prefer a real driver.
    
    Unfortunately, the PHY core is odd in that when the node is compatible
    with "usb-nop-xceiv", it ignores the other compatible strings. Let's
    just remove it.
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c513b67835f36c964f09935145cc4a249daf1b4c
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Apr 19 19:11:57 2020 +0200

    ARM: dts: mmp3-dell-ariel: Fix the SPI devices
    
    [ Upstream commit 233cbffaa0b9ca874731efee67a11f005da1f87c ]
    
    I've managed to get about everything wrong while digging these out of
    OEM's board file.
    
    Correct the bus numbers, the exact model of the NOR flash, polarity of
    the chip selects and align the SPI frequency with the data sheet.
    
    Tested that it works now, with a slight fix to the PXA SSP driver.
    
    Link: https://lore.kernel.org/r/20200419171157.672999-16-lkundrak@v3.sk
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da8faa3a9851fb16e808a374ff702202d52e21e3
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Apr 19 19:11:56 2020 +0200

    ARM: dts: mmp3: Use the MMP3 compatible string for /clocks
    
    [ Upstream commit ec7d12faf81de983efce8ff23f41c5d1bff14c41 ]
    
    Clocks are in fact slightly different on MMP3. In particular, PLL2 is
    fixed to a different frequency, there's an extra PLL3, and the GPU
    clocks are configured differently.
    
    Link: https://lore.kernel.org/r/20200419171157.672999-15-lkundrak@v3.sk
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a1339a2afb8457eea356b3e85fddf82d72adcd5
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Wed May 20 16:30:42 2020 +1200

    ARM: dts: bcm: HR2: Fix PPI interrupt types
    
    [ Upstream commit be0ec060b54f0481fb95d59086c1484a949c903c ]
    
    These error messages are output when booting on a BCM HR2 system:
        GIC: PPI11 is secure or misconfigured
        GIC: PPI13 is secure or misconfigured
    
    Per ARM documentation these interrupts are triggered on a rising edge.
    See ARM Cortex A-9 MPCore Technical Reference Manual, Revision r4p1,
    Section 3.3.8 Interrupt Configuration Registers.
    
    The same issue was resolved for NSP systems in commit 5f1aa51c7a1e
    ("ARM: dts: NSP: Fix PPI interrupt types").
    
    Fixes: b9099ec754b5 ("ARM: dts: Add Broadcom Hurricane 2 DTS include file")
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2777a5c1cd196ace1f70c4b9fe0828fb7888deb
Author: Vincent Stehlé <vincent.stehle@laposte.net>
Date:   Sat Apr 18 14:35:22 2020 +0200

    ARM: dts: bcm2835-rpi-zero-w: Fix led polarity
    
    [ Upstream commit 58bb90ab415562eededb932455046924e65df342 ]
    
    The status "ACT" led on the Raspberry Pi Zero W is on when GPIO 47 is low.
    
    This has been verified on a board and somewhat confirmed by both the GPIO
    name ("STATUS_LED_N") and the reduced schematics [1].
    
    [1]: https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/rpi_SCH_ZeroW_1p1_reduced.pdf
    
    Fixes: 2c7c040c73e9 ("ARM: dts: bcm2835: Add Raspberry Pi Zero W")
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Cc: Stefan Wahren <stefan.wahren@i2se.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bb219c431a7114d6fb641c14c1a0ae8e8ab1126
Author: Robert Beckett <bob.beckett@collabora.com>
Date:   Thu May 14 19:02:37 2020 +0200

    ARM: dts/imx6q-bx50v3: Set display interface clock parents
    
    [ Upstream commit 665e7c73a7724a393b4ec92d1ae1e029925ef2b7 ]
    
    Avoid LDB and IPU DI clocks both using the same parent. LDB requires
    pasthrough clock to avoid breaking timing while IPU DI does not.
    
    Force IPU DI clocks to use IMX6QDL_CLK_PLL2_PFD0_352M as parent
    and LDB to use IMX6QDL_CLK_PLL5_VIDEO_DIV.
    
    This fixes an issue where attempting atomic modeset while using
    HDMI and display port at the same time causes LDB clock programming
    to destroy the programming of HDMI that was done during the same
    modeset.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Robert Beckett <bob.beckett@collabora.com>
    [Use IMX6QDL_CLK_PLL2_PFD0_352M instead of IMX6QDL_CLK_PLL2_PFD2_396M
     originally chosen by Robert Beckett to avoid affecting eMMC clock
     by DRM atomic updates]
    Signed-off-by: Ian Ray <ian.ray@ge.com>
    [Squash Robert's and Ian's commits for bisectability, update patch
     description and add stable tag]
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16be49bee32d7b582fedc943af88d31a0d430a01
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Mon May 11 23:13:28 2020 -0400

    IB/qib: Call kobject_put() when kobject_init_and_add() fails
    
    [ Upstream commit a35cd6447effd5c239b564c80fa109d05ff3d114 ]
    
    When kobject_init_and_add() returns an error in the function
    qib_create_port_files(), the function kobject_put() is not called for the
    corresponding kobject, which potentially leads to memory leak.
    
    This patch fixes the issue by calling kobject_put() even if
    kobject_init_and_add() fails. In addition, the ppd->diagc_kobj is released
    along with other kobjects when the sysfs is unregistered.
    
    Fixes: f931551bafe1 ("IB/qib: Add new qib driver for QLogic PCIe InfiniBand adapters")
    Link: https://lore.kernel.org/r/20200512031328.189865.48627.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org>
    Suggested-by: Lin Yi <teroincn@gmail.com>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c777c35f7005fff57de4ccb9764ae6cbebeb6bd3
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sat May 16 23:50:50 2020 +0200

    gpu/drm: Ingenic: Fix opaque pointer casted to wrong type
    
    [ Upstream commit abf56fadf0e208abfb13ad1ac0094416058da0ad ]
    
    The opaque pointer passed to the IRQ handler is a pointer to the
    drm_device, not a pointer to our ingenic_drm structure.
    
    It still worked, because our ingenic_drm structure contains the
    drm_device as its first field, so the pointer received had the same
    value, but this was not semantically correct.
    
    Cc: stable@vger.kernel.org # v5.3
    Fixes: 90b86fcc47b4 ("DRM: Add KMS driver for the Ingenic JZ47xx SoCs")
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200516215057.392609-5-paul@crapouillou.net
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67d5c073fa2790b432fd8ead79b0fab184e01b19
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sat May 16 23:50:49 2020 +0200

    gpu/drm: ingenic: Fix bogus crtc_atomic_check callback
    
    [ Upstream commit a53bcc19876498bdd3b4ef796c787295dcc498b4 ]
    
    The code was comparing the SoC's maximum height with the mode's width,
    and vice-versa. D'oh.
    
    Cc: stable@vger.kernel.org # v5.6
    Fixes: a7c909b7c037 ("gpu/drm: ingenic: Check for display size in CRTC atomic check")
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200516215057.392609-4-paul@crapouillou.net
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 513fd9ed0757d9579c90c4d0e93d7f00d5d8d121
Author: Dennis YC Hsieh <dennis-yc.hsieh@mediatek.com>
Date:   Sun Mar 8 18:52:47 2020 +0800

    soc: mediatek: cmdq: return send msg error code
    
    [ Upstream commit 34c4e4072603ff5c174df73b973896abb76cbb51 ]
    
    Return error code to client if send message fail,
    so that client has chance to error handling.
    
    Fixes: 576f1b4bc802 ("soc: mediatek: Add Mediatek CMDQ helper")
    Signed-off-by: Dennis YC Hsieh <dennis-yc.hsieh@mediatek.com>
    Reviewed-by: CK Hu <ck.hu@mediatek.com>
    Link: https://lore.kernel.org/r/1583664775-19382-6-git-send-email-dennis-yc.hsieh@mediatek.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39a9572378895ec0b752121db4db78cc992e7629
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Mon May 4 20:44:43 2020 +0800

    arm64: dts: mt8173: fix vcodec-enc clock
    
    [ Upstream commit 3b1f6c5e4dfaf767f6f2f120cd93b347b5a9f1aa ]
    
    Fix the assigned-clock-parents to higher frequency clock to avoid h264
    encode timeout:
    
    [  134.763465] mtk_vpu 10020000.vpu: vpu ipi 4 ack time out !
    [  134.769008] [MTK_VCODEC][ERROR][18]: vpu_enc_send_msg() vpu_ipi_send msg_id c002 len 32 fail -5
    [  134.777707] [MTK_VCODEC][ERROR][18]: vpu_enc_encode() AP_IPIMSG_ENC_ENCODE 0 fail
    
    venc_sel is the clock used by h264 encoder, and venclt_sel is the clock
    used by vp8 encoder. Assign venc_sel to vcodecpll_ck and venclt_sel to
    vcodecpll_370p5.
    
        vcodecpll                         1482000000
           vcodecpll_ck                    494000000
              venc_sel                     494000000
    ...
           vcodecpll_370p5                 370500000
              venclt_sel                   370500000
    
    Fixes: fbbad0287cec ("arm64: dts: Using standard CCF interface to set vcodec clk")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Link: https://lore.kernel.org/r/20200504124442.208004-1-hsinyi@chromium.org
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e58a17efb114b21eef102f2ac1a83a5e24a1012
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 29 15:56:54 2020 +0200

    gpio: exar: Fix bad handling for ida_simple_get error path
    
    [ Upstream commit 333830aa149a87cabeb5d30fbcf12eecc8040d2c ]
    
    The commit 7ecced0934e5 ("gpio: exar: add a check for the return value
    of ida_simple_get fails") added a goto jump to the common error
    handler for ida_simple_get() error, but this is wrong in two ways:
    it doesn't set the proper return code and, more badly, it invokes
    ida_simple_remove() with a negative index that shall lead to a kernel
    panic via BUG_ON().
    
    This patch addresses those two issues.
    
    Fixes: 7ecced0934e5 ("gpio: exar: add a check for the return value of ida_simple_get fails")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19e5cca09aa9c028d52dd210b303d19d1bea36e2
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun May 3 13:24:07 2020 +0100

    ARM: uaccess: fix DACR mismatch with nested exceptions
    
    [ Upstream commit 71f8af1110101facfad68989ff91f88f8e2c3e22 ]
    
    Tomas Paukrt reports that his SAM9X60 based system (ARM926, ARMv5TJ)
    fails to fix up alignment faults, eventually resulting in a kernel
    oops.
    
    The problem occurs when using CONFIG_CPU_USE_DOMAINS with commit
    e6978e4bf181 ("ARM: save and reset the address limit when entering an
    exception").  This is because the address limit is set back to
    TASK_SIZE on exception entry, and, although it is restored on exception
    exit, the domain register is not.
    
    Hence, this sequence can occur:
    
      interrupt
        pt_regs->addr_limit = addr_limit            // USER_DS
        addr_limit = USER_DS
        alignment exception
        __probe_kernel_read()
          old_fs = get_fs()                         // USER_DS
          set_fs(KERNEL_DS)
            addr_limit = KERNEL_DS
            dacr.kernel = DOMAIN_MANAGER
            interrupt
              pt_regs->addr_limit = addr_limit      // KERNEL_DS
              addr_limit = USER_DS
              alignment exception
              __probe_kernel_read()
                old_fs = get_fs()                   // USER_DS
                set_fs(KERNEL_DS)
                  addr_limit = KERNEL_DS
                  dacr.kernel = DOMAIN_MANAGER
                ...
                set_fs(old_fs)
                  addr_limit = USER_DS
                  dacr.kernel = DOMAIN_CLIENT
              ...
              addr_limit = pt_regs->addr_limit      // KERNEL_DS
            interrupt returns
    
    At this point, addr_limit is correctly restored to KERNEL_DS for
    __probe_kernel_read() to continue execution, but dacr.kernel is not,
    it has been reset by the set_fs(old_fs) to DOMAIN_CLIENT.
    
    This would not have happened prior to the mentioned commit, because
    addr_limit would remain KERNEL_DS, so get_fs() would have returned
    KERNEL_DS, and so would correctly nest.
    
    This commit fixes the problem by also saving the DACR on exception
    entry if either CONFIG_CPU_SW_DOMAIN_PAN or CONFIG_CPU_USE_DOMAINS are
    enabled, and resetting the DACR appropriately on exception entry to
    match addr_limit and PAN settings.
    
    Fixes: e6978e4bf181 ("ARM: save and reset the address limit when entering an exception")
    Reported-by: Tomas Paukrt <tomas.paukrt@advantech.cz>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33339e58256bcaa862aba6a30f943b221042c279
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun May 3 13:14:09 2020 +0100

    ARM: uaccess: integrate uaccess_save and uaccess_restore
    
    [ Upstream commit 8ede890b0bcebe8c760aacfe20e934d98c3dc6aa ]
    
    Integrate uaccess_save / uaccess_restore macros into the new
    uaccess_entry / uaccess_exit macros respectively.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd3e2e0070a4be49444e306f6fe7f54b75067eac
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun May 3 13:03:54 2020 +0100

    ARM: uaccess: consolidate uaccess asm to asm/uaccess-asm.h
    
    [ Upstream commit 747ffc2fcf969eff9309d7f2d1d61cb8b9e1bb40 ]
    
    Consolidate the user access assembly code to asm/uaccess-asm.h.  This
    moves the csdb, check_uaccess, uaccess_mask_range_ptr, uaccess_enable,
    uaccess_disable, uaccess_save, uaccess_restore macros, and creates two
    new ones for exception entry and exit - uaccess_entry and uaccess_exit.
    
    This makes the uaccess_save and uaccess_restore macros private to
    asm/uaccess-asm.h.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa28d4bc20244b3304cb92937b5222d5de11e84b
Author: Łukasz Stelmach <l.stelmach@samsung.com>
Date:   Mon Apr 27 20:36:11 2020 +0100

    ARM: 8970/1: decompressor: increase tag size
    
    [ Upstream commit 2c962369d72f286659e6446919f88d69b943cb4d ]
    
    The size field of the tag header structure is supposed to be set to the
    size of a tag structure including the header.
    
    Fixes: c772568788b5f0 ("ARM: add additional table to compressed kernel")
    Signed-off-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8344eab8889d05d32444822a335855a5d18401be
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Tue Apr 28 16:09:53 2020 -0700

    Input: synaptics-rmi4 - fix error return code in rmi_driver_probe()
    
    [ Upstream commit 5caab2da63207d6d631007f592f5219459e3454d ]
    
    Fix to return a negative error code from the input_register_device()
    error handling case instead of 0, as done elsewhere in this function.
    
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Link: https://lore.kernel.org/r/20200428134948.78343-1-weiyongjun1@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b94c7b0680d9477d8e186e866b810dc0f7dcab7d
Author: Evan Green <evgreen@chromium.org>
Date:   Mon Apr 27 18:08:58 2020 -0700

    Input: synaptics-rmi4 - really fix attn_data use-after-free
    
    [ Upstream commit d5a5e5b5fa7b86c05bf073acc0ba98fa280174ec ]
    
    Fix a use-after-free noticed by running with KASAN enabled. If
    rmi_irq_fn() is run twice in a row, then rmi_f11_attention() (among
    others) will end up reading from drvdata->attn_data.data, which was
    freed and left dangling in rmi_irq_fn().
    
    Commit 55edde9fff1a ("Input: synaptics-rmi4 - prevent UAF reported by
    KASAN") correctly identified and analyzed this bug. However the attempted
    fix only NULLed out a local variable, missing the fact that
    drvdata->attn_data is a struct, not a pointer.
    
    NULL out the correct pointer in the driver data to prevent the attention
    functions from copying from it.
    
    Fixes: 55edde9fff1a ("Input: synaptics-rmi4 - prevent UAF reported by KASAN")
    Fixes: b908d3cd812a ("Input: synaptics-rmi4 - allow to add attention data")
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200427145537.1.Ic8f898e0147beeee2c005ee7b20f1aebdef1e7eb@changeid
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0eb472bc4737f9c0b6d492d2004948144cabf3bf
Author: Kevin Locke <kevin@kevinlocke.name>
Date:   Mon Apr 27 18:07:20 2020 -0700

    Input: i8042 - add ThinkPad S230u to i8042 reset list
    
    [ Upstream commit 2712c91a54a1058d55c284152b4d93c979b67be6 ]
    
    On the Lenovo ThinkPad Twist S230u (3347-4HU) with BIOS version
    "GDETC1WW (1.81 ) 06/27/2019", the keyboard, Synaptics TouchPad, and
    TrackPoint either do not function or stop functioning a few minutes
    after boot.  This problem has been noted before, perhaps only occurring
    with BIOS 1.57 and later.[1][2][3][4][5]
    
    Odds of a BIOS fix appear to be low: 1.57 was released over 6 years ago
    and although the [BIOS changelog] notes "Fixed an issue of UEFI
    touchpad/trackpoint/keyboard/touchscreen" in 1.58, it appears to be
    insufficient.
    
    Setting i8042.reset=1 or adding 33474HU to the reset list avoids the
    issue on my system from either warm or cold boot.
    
    [1]: https://bugs.launchpad.net/bugs/1210748
    [2]: https://bbs.archlinux.org/viewtopic.php?pid=1360425
    [3]: https://forums.linuxmint.com/viewtopic.php?f=46&t=41200
    [4]: https://forums.linuxmint.com/viewtopic.php?f=49&t=157115
    [5]: https://forums.lenovo.com/topic/findpost/27/1337119
    [BIOS changelog]: https://download.lenovo.com/pccbbs/mobiles/gduj33uc.txt
    
    Signed-off-by: Kevin Locke <kevin@kevinlocke.name>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/94f384b0f75f90f71425d7dce7ac82c59ddb87a8.1587702636.git.kevin@kevinlocke.name
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f063b581a07e1a04bb1d4b788d3450918b9e8d9
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Fri Apr 17 11:21:57 2020 +0200

    gpio: mvebu: Fix probing for chips without PWM
    
    [ Upstream commit 19c26d90ff4ca08ef2a2fef23cc9c13cfbfd891e ]
    
    The PWM iomem resource is optional and its presence indicates whether
    the GPIO chip has a PWM or not, which is why mvebu_pwm_probe() returned
    successfully when the PWM resource was not present. With f51b18d92b66
    the driver switched to devm_platform_ioremap_resource_byname() and
    its error return is propagated to the caller, so now a missing PWM resource
    leads to a probe error in the driver.
    
    To fix this explicitly test for the presence of the PWM resource and
    return successfully when it's not there. Do this check before the check
    for the clock is done (which GPIO chips without a PWM do not have). Also
    move the existing comment why the PWM resource is optional up to the
    actual check.
    
    Fixes: f51b18d92b66 ("gpio: mvebu: use devm_platform_ioremap_resource_byname()")
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 833779454d237f733435942db59e14d727baef84
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Apr 22 13:58:42 2020 -0700

    Input: dlink-dir685-touchkeys - fix a typo in driver name
    
    [ Upstream commit 38347374ae3f1ec4df56dd688bd603a64e79a0ed ]
    
    According to the file name and Kconfig, a 'k' is missing in this driver
    name. It should be "dlink-dir685-touchkeys".
    
    Fixes: 131b3de7016b ("Input: add D-Link DIR-685 touchkeys driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20200412213937.5287-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f98560b85df54ef506b28b56c41d44626b25e8cc
Author: Łukasz Patron <priv.luk@gmail.com>
Date:   Wed Apr 22 14:13:09 2020 -0700

    Input: xpad - add custom init packet for Xbox One S controllers
    
    [ Upstream commit 764f7f911bf72450c51eb74cbb262ad9933741d8 ]
    
    Sending [ 0x05, 0x20, 0x00, 0x0f, 0x06 ] packet for Xbox One S controllers
    fixes an issue where controller is stuck in Bluetooth mode and not sending
    any inputs.
    
    Signed-off-by: Łukasz Patron <priv.luk@gmail.com>
    Reviewed-by: Cameron Gutman <aicommander@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200422075206.18229-1-priv.luk@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59e5fe36e6e9b358ff037978bf3dacfb672d149b
Author: Brendan Shanks <bshanks@codeweavers.com>
Date:   Wed Apr 22 13:45:12 2020 -0700

    Input: evdev - call input_flush_device() on release(), not flush()
    
    [ Upstream commit 09264098ff153f60866039d60b31d39b66f55a31 ]
    
    input_flush_device() should only be called once the struct file is being
    released and no open descriptors remain, but evdev_flush() was calling
    it whenever a file descriptor was closed.
    
    This caused uploaded force-feedback effects to be erased when a process
    did a dup()/close() on the event FD, called system(), etc.
    
    Call input_flush_device() from evdev_release() instead.
    
    Reported-by: Mathieu Maret <mathieu.maret@gmail.com>
    Signed-off-by: Brendan Shanks <bshanks@codeweavers.com>
    Link: https://lore.kernel.org/r/20200421231003.7935-1-bshanks@codeweavers.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9d18314c930d121255ae5cd5bdd3e5a2ab37605
Author: James Hilliard <james.hilliard1@gmail.com>
Date:   Sat Apr 18 21:17:12 2020 -0700

    Input: usbtouchscreen - add support for BonXeon TP
    
    [ Upstream commit e3b4f94ef52ae1592cbe199bd38dbdc0d58b2217 ]
    
    Based on available information this uses the singletouch irtouch
    protocol. This is tested and confirmed to be fully functional on
    the BonXeon TP hardware I have.
    
    Signed-off-by: James Hilliard <james.hilliard1@gmail.com>
    Link: https://lore.kernel.org/r/20200413184217.55700-1-james.hilliard1@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 027dd753d1784d3978c5552c4f0e2157cd4cf0c8
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Thu May 14 19:41:15 2020 +0530

    drivers: net: hamradio: Fix suspicious RCU usage warning in bpqether.c
    
    [ Upstream commit 95f59bf88bb75281cc626e283ecefdd5d5641427 ]
    
    This patch fixes the following warning:
    =============================
    WARNING: suspicious RCU usage
    5.7.0-rc5-next-20200514-syzkaller #0 Not tainted
    -----------------------------
    drivers/net/hamradio/bpqether.c:149 RCU-list traversed in non-reader section!!
    
    Since rtnl lock is held, pass this cond in list_for_each_entry_rcu().
    
    Reported-by: syzbot+bb82cafc737c002d11ca@syzkaller.appspotmail.com
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e284681b8f10edc57bdac3ad4ea4724655b3c9a9
Author: Matteo Croce <mcroce@redhat.com>
Date:   Mon May 11 13:32:34 2020 +0200

    samples: bpf: Fix build error
    
    [ Upstream commit 23ad04669f81f958e9a4121b0266228d2eb3c357 ]
    
    GCC 10 is very strict about symbol clash, and lwt_len_hist_user contains
    a symbol which clashes with libbpf:
    
    /usr/bin/ld: samples/bpf/lwt_len_hist_user.o:(.bss+0x0): multiple definition of `bpf_log_buf'; samples/bpf/bpf_load.o:(.bss+0x8c0): first defined here
    collect2: error: ld returned 1 exit status
    
    bpf_log_buf here seems to be a leftover, so removing it.
    
    Signed-off-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20200511113234.80722-1-mcroce@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01a2a5d439a3cfc72fd3099a487e878320c6ccfa
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Apr 7 02:40:11 2020 +0100

    csky: Fixup raw_copy_from_user()
    
    [ Upstream commit 51bb38cb78363fdad1f89e87357b7bc73e39ba88 ]
    
    If raw_copy_from_user(to, from, N) returns K, callers expect
    the first N - K bytes starting at to to have been replaced with
    the contents of corresponding area starting at from and the last
    K bytes of destination *left* *unmodified*.
    
    What arch/sky/lib/usercopy.c is doing is broken - it can lead to e.g.
    data corruption on write(2).
    
    raw_copy_to_user() is inaccurate about return value, which is a bug,
    but consequences are less drastic than for raw_copy_from_user().
    And just what are those access_ok() doing in there?  I mean, look into
    linux/uaccess.h; that's where we do that check (as well as zero tail
    on failure in the callers that need zeroing).
    
    AFAICS, all of that shouldn't be hard to fix; something like a patch
    below might make a useful starting point.
    
    I would suggest moving these macros into usercopy.c (they are never
    used anywhere else) and possibly expanding them there; if you leave
    them alive, please at least rename __copy_user_zeroing(). Again,
    it must not zero anything on failed read.
    
    Said that, I'm not sure we won't be better off simply turning
    usercopy.c into usercopy.S - all that is left there is a couple of
    functions, each consisting only of inline asm.
    
    Guo Ren reply:
    
    Yes, raw_copy_from_user is wrong, it's no need zeroing code.
    
    unsigned long _copy_from_user(void *to, const void __user *from,
    unsigned long n)
    {
            unsigned long res = n;
            might_fault();
            if (likely(access_ok(from, n))) {
                    kasan_check_write(to, n);
                    res = raw_copy_from_user(to, from, n);
            }
            if (unlikely(res))
                    memset(to + (n - res), 0, res);
            return res;
    }
    EXPORT_SYMBOL(_copy_from_user);
    
    You are right and access_ok() should be removed.
    
    but, how about:
    do {
    ...
            "2:     stw     %3, (%1, 0)     \n"             \
    +       "       subi    %0, 4          \n"               \
            "9:     stw     %4, (%1, 4)     \n"             \
    +       "       subi    %0, 4          \n"               \
            "10:    stw     %5, (%1, 8)     \n"             \
    +       "       subi    %0, 4          \n"               \
            "11:    stw     %6, (%1, 12)    \n"             \
    +       "       subi    %0, 4          \n"               \
            "       addi    %2, 16          \n"             \
            "       addi    %1, 16          \n"             \
    
    Don't expand __ex_table
    
    AI Viro reply:
    
    Hey, I've no idea about the instruction scheduling on csky -
    if that doesn't slow the things down, all the better.  It's just
    that copy_to_user() and friends are on fairly hot codepaths,
    and in quite a few situations they will dominate the speed of
    e.g. read(2).  So I tried to keep the fast path unchanged.
    Up to the architecture maintainers, obviously.  Which would be
    you...
    
    As for the fixups size increase (__ex_table size is unchanged)...
    You have each of those macros expanded exactly once.
    So the size is not a serious argument, IMO - useless complexity
    would be, if it is, in fact, useless; the size... not really,
    especially since those extra subi will at least offset it.
    
    Again, up to you - asm optimizations of (essentially)
    memcpy()-style loops are tricky and can depend upon the
    fairly subtle details of architecture.  So even on something
    I know reasonably well I would resort to direct experiments
    if I can't pass the buck to architecture maintainers.
    
    It *is* worth optimizing - this is where read() from a file
    that is already in page cache spends most of the time, etc.
    
    Guo Ren reply:
    
    Thx, after fixup some typo “sub %0, 4”, apply the patch.
    
    TODO:
     - user copy/from codes are still need optimizing.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52ce2142fc94a9a3264c9fda563e249541f47b38
Author: Steve French <stfrench@microsoft.com>
Date:   Wed May 13 10:27:16 2020 -0500

    cifs: Fix null pointer check in cifs_read
    
    [ Upstream commit 9bd21d4b1a767c3abebec203342f3820dcb84662 ]
    
    Coverity scan noted a redundant null check
    
    Coverity-id: 728517
    Reported-by: Coverity <scan-admin@coverity.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Shyam Prasad N <nspmangalore@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c436dfc9ff9964bdac79109c26db6259a64609f
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Mon May 11 10:19:59 2020 +0800

    riscv: pgtable: Fix __kernel_map_pages build error if NOMMU
    
    [ Upstream commit 9a6630aef93394ac54494c7e273e9bc026509375 ]
    
    riscv64-none-linux-gnu-ld: mm/page_alloc.o: in function `.L0 ':
    page_alloc.c:(.text+0xd34): undefined reference to `__kernel_map_pages'
    riscv64-none-linux-gnu-ld: page_alloc.c:(.text+0x104a): undefined reference to `__kernel_map_pages'
    riscv64-none-linux-gnu-ld: mm/page_alloc.o: in function `__pageblock_pfn_to_page':
    page_alloc.c:(.text+0x145e): undefined reference to `__kernel_map_pages'
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 991b56360235756c3128061baee413975bdb7c9f
Author: Amy Shih <amy.shih@advantech.com.tw>
Date:   Tue May 12 09:38:06 2020 +0000

    hwmon: (nct7904) Fix incorrect range of temperature limit registers
    
    [ Upstream commit 7b2fd270af27edaf02acb41a7babe805a9441914 ]
    
    The format of temperature limitation registers are 8-bit 2's complement
    and the range is -128~127.
    Converts the reading value to signed char to fix the incorrect range
    of temperature limitation registers.
    
    Signed-off-by: Amy Shih <amy.shih@advantech.com.tw>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f4f1a9b20d7a5c741078d08b6b32aaa323401f1
Author: Bernard Zhao <bernard@vivo.com>
Date:   Tue Apr 28 06:17:47 2020 -0700

    drm/meson: pm resume add return errno branch
    
    [ Upstream commit c54a8f1f329197d83d941ad84c4aa38bf282cbbd ]
    
    pm_resump api did not handle drm_mode_config_helper_resume error.
    This change add handle to return drm_mode_config_helper_resume`s
    error number. This code logic is aligned with api pm_suspend.
    After this change, the code maybe a bit readable.
    
    Signed-off-by: Bernard Zhao <bernard@vivo.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200428131747.2099-1-bernard@vivo.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d528d31297bdaac9daba3ca64cabac55c094b09
Author: Liu Yibin <jiulong@linux.alibaba.com>
Date:   Wed May 13 15:54:15 2020 +0800

    csky: Fixup remove duplicate irq_disable
    
    [ Upstream commit 6633a5aa8eb6bda70eb3a9837efd28a67ccc6e0a ]
    
    Interrupt has been disabled in __schedule() with local_irq_disable()
    and enabled in finish_task_switch->finish_lock_switch() with
    local_irq_enabled(), So needn't to disable irq here.
    
    Signed-off-by: Liu Yibin <jiulong@linux.alibaba.com>
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c326989b74d207370c0bf080c38311972f707d64
Author: Mao Han <han_mao@linux.alibaba.com>
Date:   Mon Apr 20 12:55:23 2020 +0800

    csky: Fixup perf callchain unwind
    
    [ Upstream commit 229a0ddee1108a3f82a873e6cbbe35c92c540444 ]
    
     [ 5221.974084] Unable to handle kernel paging request at virtual address 0xfffff000, pc: 0x8002c18e
     [ 5221.985929] Oops: 00000000
     [ 5221.989488]
     [ 5221.989488] CURRENT PROCESS:
     [ 5221.989488]
     [ 5221.992877] COMM=callchain_test PID=11962
     [ 5221.995213] TEXT=00008000-000087e0 DATA=00009f1c-0000a018 BSS=0000a018-0000b000
     [ 5221.999037] USER-STACK=7fc18e20  KERNEL-STACK=be204680
     [ 5221.999037]
     [ 5222.003292] PC: 0x8002c18e (perf_callchain_kernel+0x3e/0xd4)
     [ 5222.007957] LR: 0x8002c198 (perf_callchain_kernel+0x48/0xd4)
     [ 5222.074873] Call Trace:
     [ 5222.074873] [<800a248e>] get_perf_callchain+0x20a/0x29c
     [ 5222.074873] [<8009d964>] perf_callchain+0x64/0x80
     [ 5222.074873] [<8009dc1c>] perf_prepare_sample+0x29c/0x4b8
     [ 5222.074873] [<8009de6e>] perf_event_output_forward+0x36/0x98
     [ 5222.074873] [<800497e0>] search_exception_tables+0x20/0x44
     [ 5222.074873] [<8002cbb6>] do_page_fault+0x92/0x378
     [ 5222.074873] [<80098608>] __perf_event_overflow+0x54/0xdc
     [ 5222.074873] [<80098778>] perf_swevent_hrtimer+0xe8/0x164
     [ 5222.074873] [<8002ddd0>] update_mmu_cache+0x0/0xd8
     [ 5222.074873] [<8002c014>] user_backtrace+0x58/0xc4
     [ 5222.074873] [<8002c0b4>] perf_callchain_user+0x34/0xd0
     [ 5222.074873] [<800a2442>] get_perf_callchain+0x1be/0x29c
     [ 5222.074873] [<8009d964>] perf_callchain+0x64/0x80
     [ 5222.074873] [<8009d834>] perf_output_sample+0x78c/0x858
     [ 5222.074873] [<8009dc1c>] perf_prepare_sample+0x29c/0x4b8
     [ 5222.074873] [<8009de94>] perf_event_output_forward+0x5c/0x98
     [ 5222.097846]
     [ 5222.097846] [<800a0300>] perf_event_exit_task+0x58/0x43c
     [ 5222.097846] [<8006c874>] hrtimer_interrupt+0x104/0x2ec
     [ 5222.097846] [<800a0300>] perf_event_exit_task+0x58/0x43c
     [ 5222.097846] [<80437bb6>] dw_apb_clockevent_irq+0x2a/0x4c
     [ 5222.097846] [<8006c770>] hrtimer_interrupt+0x0/0x2ec
     [ 5222.097846] [<8005f2e4>] __handle_irq_event_percpu+0xac/0x19c
     [ 5222.097846] [<80437bb6>] dw_apb_clockevent_irq+0x2a/0x4c
     [ 5222.097846] [<8005f408>] handle_irq_event_percpu+0x34/0x88
     [ 5222.097846] [<8005f480>] handle_irq_event+0x24/0x64
     [ 5222.097846] [<8006218c>] handle_level_irq+0x68/0xdc
     [ 5222.097846] [<8005ec76>] __handle_domain_irq+0x56/0xa8
     [ 5222.097846] [<80450e90>] ck_irq_handler+0xac/0xe4
     [ 5222.097846] [<80029012>] csky_do_IRQ+0x12/0x24
     [ 5222.097846] [<8002a3a0>] csky_irq+0x70/0x80
     [ 5222.097846] [<800ca612>] alloc_set_pte+0xd2/0x238
     [ 5222.097846] [<8002ddd0>] update_mmu_cache+0x0/0xd8
     [ 5222.097846] [<800a0340>] perf_event_exit_task+0x98/0x43c
    
    The original fp check doesn't base on the real kernal stack region.
    Invalid fp address may cause kernel panic.
    
    Signed-off-by: Mao Han <han_mao@linux.alibaba.com>
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3fa7514af9480b1740649cd00933df0b05448a7
Author: Liu Yibin <jiulong@linux.alibaba.com>
Date:   Tue Apr 21 15:56:28 2020 +0800

    csky: Fixup msa highest 3 bits mask
    
    [ Upstream commit 165f2d2858013253042809df082b8df7e34e86d7 ]
    
    Just as comment mentioned, the msa format:
    
     cr<30/31, 15> MSA register format:
     31 - 29 | 28 - 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0
       BA     Reserved  SH  WA  B   SO SEC  C   D   V
    
    So we should shift 29 bits not 28 bits for mask
    
    Signed-off-by: Liu Yibin <jiulong@linux.alibaba.com>
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6deabf5a51de4da131938b32778c54fb1f2914b0
Author: Tero Kristo <t-kristo@ti.com>
Date:   Fri Apr 24 18:23:01 2020 +0300

    clk: ti: am33xx: fix RTC clock parent
    
    [ Upstream commit dc6dbd51009fc412729c307161f442c0a08618f4 ]
    
    Right now, trying to use RTC purely with the ti-sysc / clkctrl framework
    fails to enable the RTC module properly. Based on experimentation, this
    appears to be because RTC is sourced from the clkdiv32k optional clock.
    TRM is not very clear on this topic, but fix the RTC to use the proper
    source clock nevertheless.
    
    Reported-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Link: https://lkml.kernel.org/r/20200424152301.4018-1-t-kristo@ti.com
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c2bbae3583434dc8ce699223494466df9bbf48b
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Mon May 11 10:19:54 2020 +0800

    riscv: Add pgprot_writecombine/device and PAGE_SHARED defination if NOMMU
    
    [ Upstream commit fa8174aa225fe3d53b37552e5066e6f0301dbabd ]
    
    Some drivers use PAGE_SHARED, pgprot_writecombine()/pgprot_device(),
    add the defination to fix build error if NOMMU.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23952755bc2f839844b5a60c29620cce98c9b09d
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Mon May 11 10:19:53 2020 +0800

    riscv: stacktrace: Fix undefined reference to `walk_stackframe'
    
    [ Upstream commit 0502bee37cdef755d63eee60236562e5605e2480 ]
    
    Drop static declaration to fix following build error if FRAME_POINTER disabled,
      riscv64-linux-ld: arch/riscv/kernel/perf_callchain.o: in function `.L0':
      perf_callchain.c:(.text+0x2b8): undefined reference to `walk_stackframe'
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cf22679ba43c0feda17dd283e163315103df34c
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Mon May 11 10:19:52 2020 +0800

    riscv: Fix unmet direct dependencies built based on SOC_VIRT
    
    [ Upstream commit ab7fbad0c7d7a4f9b320a059a171a92a34b6d409 ]
    
    Fix unmet direct dependencies Warning and fix Kconfig indent.
    
    WARNING: unmet direct dependencies detected for POWER_RESET_SYSCON
      Depends on [n]: POWER_RESET [=n] && OF [=y] && HAS_IOMEM [=y]
      Selected by [y]:
      - SOC_VIRT [=y]
    
    WARNING: unmet direct dependencies detected for POWER_RESET_SYSCON_POWEROFF
      Depends on [n]: POWER_RESET [=n] && OF [=y] && HAS_IOMEM [=y]
      Selected by [y]:
      - SOC_VIRT [=y]
    
    WARNING: unmet direct dependencies detected for RTC_DRV_GOLDFISH
      Depends on [n]: RTC_CLASS [=n] && OF [=y] && HAS_IOMEM [=y] && (GOLDFISH [=y] || COMPILE_TEST [=n])
      Selected by [y]:
      - SOC_VIRT [=y]
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e9df60a2657a9fd58bf959d839283380d08a81a
Author: Denis V. Lunev <den@openvz.org>
Date:   Tue Apr 28 16:15:11 2020 +0300

    IB/i40iw: Remove bogus call to netdev_master_upper_dev_get()
    
    [ Upstream commit 856ec7f64688387b100b7083cdf480ce3ac41227 ]
    
    Local variable netdev is not used in these calls.
    
    It should be noted, that this change is required to work in bonded mode.
    Otherwise we would get the following assert:
    
     "RTNL: assertion failed at net/core/dev.c (5665)"
    
    With the calltrace as follows:
            dump_stack+0x19/0x1b
            netdev_master_upper_dev_get+0x61/0x70
            i40iw_addr_resolve_neigh+0x1e8/0x220
            i40iw_make_cm_node+0x296/0x700
            ? i40iw_find_listener.isra.10+0xcc/0x110
            i40iw_receive_ilq+0x3d4/0x810
            i40iw_puda_poll_completion+0x341/0x420
            i40iw_process_ceq+0xa5/0x280
            i40iw_ceq_dpc+0x1e/0x40
            tasklet_action+0x83/0x140
            __do_softirq+0x125/0x2bb
            call_softirq+0x1c/0x30
            do_softirq+0x65/0xa0
            irq_exit+0x105/0x110
            do_IRQ+0x56/0xf0
            common_interrupt+0x16a/0x16a
            ? cpuidle_enter_state+0x57/0xd0
            cpuidle_idle_call+0xde/0x230
            arch_cpu_idle+0xe/0xc0
            cpu_startup_entry+0x14a/0x1e0
            start_secondary+0x1f7/0x270
            start_cpu+0x5/0x14
    
    Link: https://lore.kernel.org/r/20200428131511.11049-1-den@openvz.org
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Acked-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7436ca0af333d00578497de5241b47a2ad5bff2d
Author: Leo (Hanghong) Ma <hanghong.ma@amd.com>
Date:   Fri May 8 14:18:07 2020 -0400

    drm/amd/amdgpu: Update update_config() logic
    
    [ Upstream commit 650e723cecf2738dee828564396f3239829aba83 ]
    
    [Why]
    For MST case: when update_config is called to disable a stream,
    this clears the settings for all the streams on that link.
    We should only clear the settings for the stream that was disabled.
    
    [How]
    Clear the settings after the call to remove display is called.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Leo (Hanghong) Ma <hanghong.ma@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d1f6bbb28f8184ad119bc92366135de55c478df
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sat May 9 14:04:52 2020 +0200

    net: freescale: select CONFIG_FIXED_PHY where needed
    
    [ Upstream commit 99352c79af3e5f2e4724abf37fa5a2a3299b1c81 ]
    
    I ran into a randconfig build failure with CONFIG_FIXED_PHY=m
    and CONFIG_GIANFAR=y:
    
    x86_64-linux-ld: drivers/net/ethernet/freescale/gianfar.o:(.rodata+0x418): undefined reference to `fixed_phy_change_carrier'
    
    It seems the same thing can happen with dpaa and ucc_geth, so change
    all three to do an explicit 'select FIXED_PHY'.
    
    The fixed-phy driver actually has an alternative stub function that
    theoretically allows building network drivers when fixed-phy is
    disabled, but I don't see how that would help here, as the drivers
    presumably would not work then.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b78997040df9fe4c5f8606640198a1f11293de83
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Fri Apr 3 22:16:51 2020 +0900

    usb: gadget: legacy: fix redundant initialization warnings
    
    [ Upstream commit d13cce757954fa663c69845611957396843ed87a ]
    
    Fix the following cppcheck warnings:
    
    drivers/usb/gadget/legacy/inode.c:1364:8: style: Redundant initialization for 'value'. The initialized value is overwritten$
     value = -EOPNOTSUPP;
           ^
    drivers/usb/gadget/legacy/inode.c:1331:15: note: value is initialized
     int    value = -EOPNOTSUPP;
                  ^
    drivers/usb/gadget/legacy/inode.c:1364:8: note: value is overwritten
     value = -EOPNOTSUPP;
           ^
    drivers/usb/gadget/legacy/inode.c:1817:8: style: Redundant initialization for 'value'. The initialized value is overwritten$
     value = -EINVAL;
           ^
    drivers/usb/gadget/legacy/inode.c:1787:18: note: value is initialized
     ssize_t   value = len, length = len;
                     ^
    drivers/usb/gadget/legacy/inode.c:1817:8: note: value is overwritten
     value = -EINVAL;
           ^
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15fe983b3b642ad6a6951ac2f7f7bc53200dd5ca
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Apr 27 22:21:16 2020 +0200

    usb: phy: twl6030-usb: Fix a resource leak in an error handling path in 'twl6030_usb_probe()'
    
    [ Upstream commit f058764d19000d98aef72010468db1f69faf9fa0 ]
    
    A call to 'regulator_get()' is hidden in 'twl6030_usb_ldo_init()'. A
    corresponding put must be performed in the error handling path, as
    already done in the remove function.
    
    While at it, also move a 'free_irq()' call in the error handling path in
    order to be consistent.
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 343eeecd77cbcb339d4cc36359a410dc2c725ee3
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon May 4 12:33:52 2020 +0300

    usb: dwc3: pci: Enable extcon driver for Intel Merrifield
    
    [ Upstream commit 066c09593454e89bc605ffdff1c9810061f9b1e1 ]
    
    Intel Merrifield provides a DR support via PMIC which has its own
    extcon driver.
    
    Add a property string to link to that driver.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6a814af12b23a5ab757b36ceb0c9e91fe89a8db
Author: Lei Xue <carmark.dlut@gmail.com>
Date:   Thu May 7 08:50:22 2020 -0400

    cachefiles: Fix race between read_waiter and read_copier involving op->to_do
    
    [ Upstream commit 7bb0c5338436dae953622470d52689265867f032 ]
    
    There is a potential race in fscache operation enqueuing for reading and
    copying multiple pages from cachefiles to netfs.  The problem can be seen
    easily on a heavy loaded system (for example many processes reading files
    continually on an NFS share covered by fscache triggered this problem within
    a few minutes).
    
    The race is due to cachefiles_read_waiter() adding the op to the monitor
    to_do list and then then drop the object->work_lock spinlock before
    completing fscache_enqueue_operation().  Once the lock is dropped,
    cachefiles_read_copier() grabs the op, completes processing it, and
    makes it through fscache_retrieval_complete() which sets the op->state to
    the final state of FSCACHE_OP_ST_COMPLETE(4).  When cachefiles_read_waiter()
    finally gets through the remainder of fscache_enqueue_operation()
    it sees the invalid state, and hits the ASSERTCMP and the following
    oops is seen:
    [ 2259.612361] FS-Cache:
    [ 2259.614785] FS-Cache: Assertion failed
    [ 2259.618639] FS-Cache: 4 == 5 is false
    [ 2259.622456] ------------[ cut here ]------------
    [ 2259.627190] kernel BUG at fs/fscache/operation.c:70!
    ...
    [ 2259.791675] RIP: 0010:[<ffffffffc061b4cf>]  [<ffffffffc061b4cf>] fscache_enqueue_operation+0xff/0x170 [fscache]
    [ 2259.802059] RSP: 0000:ffffa0263d543be0  EFLAGS: 00010046
    [ 2259.807521] RAX: 0000000000000019 RBX: ffffa01a4d390480 RCX: 0000000000000006
    [ 2259.814847] RDX: 0000000000000000 RSI: 0000000000000046 RDI: ffffa0263d553890
    [ 2259.822176] RBP: ffffa0263d543be8 R08: 0000000000000000 R09: ffffa0263c2d8708
    [ 2259.829502] R10: 0000000000001e7f R11: 0000000000000000 R12: ffffa01a4d390480
    [ 2259.844483] R13: ffff9fa9546c5920 R14: ffffa0263d543c80 R15: ffffa0293ff9bf10
    [ 2259.859554] FS:  00007f4b6efbd700(0000) GS:ffffa0263d540000(0000) knlGS:0000000000000000
    [ 2259.875571] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 2259.889117] CR2: 00007f49e1624ff0 CR3: 0000012b38b38000 CR4: 00000000007607e0
    [ 2259.904015] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 2259.918764] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 2259.933449] PKRU: 55555554
    [ 2259.943654] Call Trace:
    [ 2259.953592]  <IRQ>
    [ 2259.955577]  [<ffffffffc03a7c12>] cachefiles_read_waiter+0x92/0xf0 [cachefiles]
    [ 2259.978039]  [<ffffffffa34d3942>] __wake_up_common+0x82/0x120
    [ 2259.991392]  [<ffffffffa34d3a63>] __wake_up_common_lock+0x83/0xc0
    [ 2260.004930]  [<ffffffffa34d3510>] ? task_rq_unlock+0x20/0x20
    [ 2260.017863]  [<ffffffffa34d3ab3>] __wake_up+0x13/0x20
    [ 2260.030230]  [<ffffffffa34c72a0>] __wake_up_bit+0x50/0x70
    [ 2260.042535]  [<ffffffffa35bdcdb>] unlock_page+0x2b/0x30
    [ 2260.054495]  [<ffffffffa35bdd09>] page_endio+0x29/0x90
    [ 2260.066184]  [<ffffffffa368fc81>] mpage_end_io+0x51/0x80
    
    CPU1
    cachefiles_read_waiter()
     20 static int cachefiles_read_waiter(wait_queue_entry_t *wait, unsigned mode,
     21                                   int sync, void *_key)
     22 {
    ...
     61         spin_lock(&object->work_lock);
     62         list_add_tail(&monitor->op_link, &op->to_do);
     63         spin_unlock(&object->work_lock);
    <begin race window>
     64
     65         fscache_enqueue_retrieval(op);
    182 static inline void fscache_enqueue_retrieval(struct fscache_retrieval *op)
    183 {
    184         fscache_enqueue_operation(&op->op);
    185 }
     58 void fscache_enqueue_operation(struct fscache_operation *op)
     59 {
     60         struct fscache_cookie *cookie = op->object->cookie;
     61
     62         _enter("{OBJ%x OP%x,%u}",
     63                op->object->debug_id, op->debug_id, atomic_read(&op->usage));
     64
     65         ASSERT(list_empty(&op->pend_link));
     66         ASSERT(op->processor != NULL);
     67         ASSERT(fscache_object_is_available(op->object));
     68         ASSERTCMP(atomic_read(&op->usage), >, 0);
    <end race window>
    
    CPU2
    cachefiles_read_copier()
    168         while (!list_empty(&op->to_do)) {
    ...
    202                 fscache_end_io(op, monitor->netfs_page, error);
    203                 put_page(monitor->netfs_page);
    204                 fscache_retrieval_complete(op, 1);
    
    CPU1
     58 void fscache_enqueue_operation(struct fscache_operation *op)
     59 {
    ...
     69         ASSERTIFCMP(op->state != FSCACHE_OP_ST_IN_PROGRESS,
     70                     op->state, ==,  FSCACHE_OP_ST_CANCELLED);
    
    Signed-off-by: Lei Xue <carmark.dlut@gmail.com>
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17967784281ff66fe6bc9072c314b82f6b27a59d
Author: Felix Kuehling <Felix.Kuehling@amd.com>
Date:   Tue May 5 14:02:43 2020 -0400

    drm/amdgpu: Use GEM obj reference for KFD BOs
    
    [ Upstream commit 39b3128d7ffd44e400e581e6f49e88cb42bef9a1 ]
    
    Releasing the AMDGPU BO ref directly leads to problems when BOs were
    exported as DMA bufs. Releasing the GEM reference makes sure that the
    AMDGPU/TTM BO is not freed too early.
    
    Also take a GEM reference when importing BOs from DMABufs to keep
    references to imported BOs balances properly.
    
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Tested-by: Alex Sierra <alex.sierra@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Sierra <alex.sierra@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc9a3dad01bde25dc1d0731daf9769075884f4e0
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Apr 30 14:38:39 2020 +0800

    drm/amd/powerplay: perform PG ungate prior to CG ungate
    
    [ Upstream commit f4fcfa4282c1a1bf51475ebb0ffda623eebf1191 ]
    
    Since gfxoff should be disabled first before trying to access those
    GC registers.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 975448104f05bb4ae68dc5ce19a838398610525c
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Apr 30 11:24:02 2020 +0800

    drm/amdgpu: drop unnecessary cancel_delayed_work_sync on PG ungate
    
    [ Upstream commit 1fe48ec08d9f2e26d893a6c05bd6c99a3490f9ef ]
    
    As this is already properly handled in amdgpu_gfx_off_ctrl(). In fact,
    this unnecessary cancel_delayed_work_sync may leave a small time window
    for race condition and is dangerous.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3b3162c59e01e7058a07675a097c066aa3cc173
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Tue May 5 11:56:46 2020 -0500

    gfs2: Grab glock reference sooner in gfs2_add_revoke
    
    [ Upstream commit f4e2f5e1a527ce58fc9f85145b03704779a3123e ]
    
    This patch rearranges gfs2_add_revoke so that the extra glock
    reference is added earlier on in the function to avoid races in which
    the glock is freed before the new reference is taken.
    
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 199dfd7f1e74c4f9609cd657a0c5db37073e3696
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue May 5 11:53:21 2020 -0500

    gfs2: move privileged user check to gfs2_quota_lock_check
    
    [ Upstream commit 4ed0c30811cb4d30ef89850b787a53a84d5d2bcb ]
    
    Before this patch, function gfs2_quota_lock checked if it was called
    from a privileged user, and if so, it bypassed the quota check:
    superuser can operate outside the quotas.
    That's the wrong place for the check because the lock/unlock functions
    are separate from the lock_check function, and you can do lock and
    unlock without actually checking the quotas.
    
    This patch moves the check to gfs2_quota_lock_check.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a592ca2172b8a0ed8be55d30a6ccb1028ab947fe
Author: John Stultz <john.stultz@linaro.org>
Date:   Fri May 8 04:56:10 2020 +0000

    kselftests: dmabuf-heaps: Fix confused return value on expected error testing
    
    [ Upstream commit 4bb9d46d47b105a774f9dca642f5271375bca4b2 ]
    
    When I added the expected error testing, I forgot I need to set
    the return to zero when we successfully see an error.
    
    Without this change we only end up testing a single heap
    before the test quits.
    
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Brian Starkey <brian.starkey@arm.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: "Andrew F. Davis" <afd@ti.com>
    Cc: linux-kselftest@vger.kernel.org
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6e861d1e63445f4029437fc641773d5d1efe902
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu May 7 23:13:20 2020 +0800

    net: microchip: encx24j600: add missed kthread_stop
    
    [ Upstream commit ff8ce319e9c25e920d994cc35236f0bb32dfc8f3 ]
    
    This driver calls kthread_run() in probe, but forgets to call
    kthread_stop() in probe failure and remove.
    Add the missed kthread_stop() to fix it.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdd608d35cdcfdc31e95a50d4fca114ffd672f9b
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Apr 30 09:52:33 2020 -0700

    ARM: dts: omap4-droid4: Fix occasional lost wakeirq for uart1
    
    [ Upstream commit 738b150ecefbffb6e55cfa8a3b66a844f777d8fb ]
    
    Looks like using the UART CTS pin does not always trigger for a wake-up
    when the SoC is idle.
    
    This is probably because the modem first uses gpio_149 to signal the SoC
    that data will be sent, and the CTS will only get used later when the
    data transfer is starting.
    
    Let's fix the issue by configuring the gpio_149 pad as the wakeirq for
    UART. We have gpio_149 managed by the USB PHY for powering up the right
    USB mode, and after that, the gpio gets recycled as the modem wake-up
    pin. If needeed, the USB PHY can also later on be configured to use
    gpio_149 pad as the wakeirq as a shared irq.
    
    Let's also configure the missing properties for uart-has-rtscts and
    current-speed for the modem port while at it. We already configure the
    hardware flow control pins with uart1_pins pinctrl setting.
    
    Cc: maemo-leste@lists.dyne.org
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee4764f4848b5aa91bf0c4e7cf67efeef5c0010d
Author: Tony Lindgren <tony@atomide.com>
Date:   Sat Apr 18 10:52:48 2020 -0700

    ARM: dts: omap4-droid4: Fix flakey wlan by disabling internal pull for gpio
    
    [ Upstream commit 30fa60c678eaa27b8f2a531920d77f7184658f73 ]
    
    The wlan on droid4 is flakey on some devices, and experiments have shown this
    gets fixed if we disable the internal pull for wlan gpio interrupt line.
    
    The symptoms are that the wlan connection is very slow and almost useless
    with lots of wlcore firmware reboot warnings in the dmesg.
    
    In addition to configuring the wlan gpio pulls, let's also configure the rest
    of the wlan sd pins. We have not configured those eariler as we're booting
    using kexec.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ee10f46c27c71cafddd416132d3febfe32e8150
Author: Andrew Oakley <andrew@adoakley.name>
Date:   Sun May 3 15:16:39 2020 +0100

    ALSA: usb-audio: add mapping for ASRock TRX40 Creator
    
    [ Upstream commit da7a8f1a8fc3e14c6dcc52b4098bddb8f20390be ]
    
    This is another TRX40 based motherboard with ALC1220-VB USB-audio
    that requires a static mapping table.
    
    This motherboard also has a PCI device which advertises no codecs.  The
    PCI ID is 1022:1487 and PCI SSID is 1022:d102.  As this is using the AMD
    vendor ID, don't blacklist for now in case other boards have a working
    audio device with the same ssid.
    
    alsa-info.sh report for this board:
    http://alsa-project.org/db/?f=0a742f89066527497b77ce16bca486daccf8a70c
    
    Signed-off-by: Andrew Oakley <andrew@adoakley.name>
    Link: https://lore.kernel.org/r/20200503141639.35519-1-andrew@adoakley.name
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e631a6e95b9575b00530fb54901220b5770fa65
Author: Stephen Warren <swarren@nvidia.com>
Date:   Mon Apr 27 17:26:05 2020 -0600

    gpio: tegra: mask GPIO IRQs during IRQ shutdown
    
    [ Upstream commit 0cf253eed5d2bdf7bb3152457b38f39b012955f7 ]
    
    The driver currently leaves GPIO IRQs unmasked even when the GPIO IRQ
    client has released the GPIO IRQ. This allows the HW to raise IRQs, and
    SW to process them, after shutdown. Fix this by masking the IRQ when it's
    shut down. This is usually taken care of by the irqchip core, but since
    this driver has a custom irq_shutdown implementation, it must do this
    explicitly itself.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Link: https://lore.kernel.org/r/20200427232605.11608-1-swarren@wwwdotorg.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ffc771032fcd458c32b7211c25d6efad043bf55
Author: Johan Jonker <jbx6244@gmail.com>
Date:   Fri Apr 24 14:39:23 2020 +0200

    ARM: dts: rockchip: fix pinctrl sub nodename for spi in rk322x.dtsi
    
    [ Upstream commit 855bdca1781c79eb661f89c8944c4a719ce720e8 ]
    
    A test with the command below gives these errors:
    
    arch/arm/boot/dts/rk3229-evb.dt.yaml: spi-0:
    '#address-cells' is a required property
    arch/arm/boot/dts/rk3229-evb.dt.yaml: spi-1:
    '#address-cells' is a required property
    arch/arm/boot/dts/rk3229-xms6.dt.yaml: spi-0:
    '#address-cells' is a required property
    arch/arm/boot/dts/rk3229-xms6.dt.yaml: spi-1:
    '#address-cells' is a required property
    
    The $nodename pattern for spi nodes is
    "^spi(@.*|-[0-9a-f])*$". To prevent warnings rename
    'spi-0' and 'spi-1' pinctrl sub nodenames to
    'spi0' and 'spi1' in 'rk322x.dtsi'.
    
    make ARCH=arm dtbs_check
    DT_SCHEMA_FILES=Documentation/devicetree/bindings/spi/spi-controller.yaml
    
    Signed-off-by: Johan Jonker <jbx6244@gmail.com>
    Link: https://lore.kernel.org/r/20200424123923.8192-1-jbx6244@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76de195f436c520939d62bc7ff53a0ff606e369a
Author: Johan Jonker <jbx6244@gmail.com>
Date:   Sat Apr 25 21:25:00 2020 +0200

    ARM: dts: rockchip: swap clock-names of gpu nodes
    
    [ Upstream commit b14f3898d2c25a9b47a61fb879d0b1f3af92c59b ]
    
    Dts files with Rockchip 'gpu' nodes were manually verified.
    In order to automate this process arm,mali-utgard.txt
    has been converted to yaml. In the new setup dtbs_check with
    arm,mali-utgard.yaml expects clock-names values
    in the same order, so fix that.
    
    Signed-off-by: Johan Jonker <jbx6244@gmail.com>
    Link: https://lore.kernel.org/r/20200425192500.1808-1-jbx6244@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6d090d98bffeb4f9b6459acc50b42c2e2e380dc
Author: Johan Jonker <jbx6244@gmail.com>
Date:   Sat Apr 25 16:38:37 2020 +0200

    arm64: dts: rockchip: swap interrupts interrupt-names rk3399 gpu node
    
    [ Upstream commit c604fd810bda667bdc20b2c041917baa7803e0fb ]
    
    Dts files with Rockchip rk3399 'gpu' nodes were manually verified.
    In order to automate this process arm,mali-midgard.txt
    has been converted to yaml. In the new setup dtbs_check with
    arm,mali-midgard.yaml expects interrupts and interrupt-names values
    in the same order. Fix this for rk3399.
    
    make ARCH=arm64 dtbs_check
    DT_SCHEMA_FILES=Documentation/devicetree/bindings/gpu/
    arm,mali-midgard.yaml
    
    Signed-off-by: Johan Jonker <jbx6244@gmail.com>
    Link: https://lore.kernel.org/r/20200425143837.18706-1-jbx6244@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56b73780c17f0edfdda3631714ca69ec398bf8ca
Author: Johan Jonker <jbx6244@gmail.com>
Date:   Sat Apr 25 14:23:45 2020 +0200

    arm64: dts: rockchip: fix status for &gmac2phy in rk3328-evb.dts
    
    [ Upstream commit c617ed88502d0b05149e7f32f3b3fd8a0663f7e2 ]
    
    The status was removed of the '&gmac2phy' node with the apply
    of a patch long time ago, so fix status for '&gmac2phy'
    in 'rk3328-evb.dts'.
    
    Signed-off-by: Johan Jonker <jbx6244@gmail.com>
    Link: https://lore.kernel.org/r/20200425122345.12902-2-jbx6244@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de65f41dacb8e2b9b5fbfacb0c74bc09577d5c90
Author: Johan Jonker <jbx6244@gmail.com>
Date:   Thu Apr 16 19:03:21 2020 +0200

    ARM: dts: rockchip: fix phy nodename for rk3229-xms6
    
    [ Upstream commit 621c8d0c233e260232278a4cfd3380caa3c1da29 ]
    
    A test with the command below gives for example this error:
    
    arch/arm/boot/dts/rk3229-xms6.dt.yaml: phy@0:
    '#phy-cells' is a required property
    
    The phy nodename is normally used by a phy-handle.
    This node is however compatible with
    "ethernet-phy-id1234.d400", "ethernet-phy-ieee802.3-c22"
    which is just been added to 'ethernet-phy.yaml'.
    So change nodename to 'ethernet-phy' for which '#phy-cells'
    is not a required property
    
    make ARCH=arm dtbs_check
    DT_SCHEMA_FILES=~/.local/lib/python3.5/site-packages/dtschema/schemas/
    phy/phy-provider.yaml
    
    Signed-off-by: Johan Jonker <jbx6244@gmail.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200416170321.4216-2-jbx6244@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1faaf8049a82a79b1bab35478a57525feee90efd
Author: Johan Jonker <jbx6244@gmail.com>
Date:   Thu Apr 16 19:03:20 2020 +0200

    ARM: dts: rockchip: fix phy nodename for rk3228-evb
    
    [ Upstream commit 287e0d538fcec2f6e8eb1e565bf0749f3b90186d ]
    
    A test with the command below gives for example this error:
    
    arch/arm/boot/dts/rk3228-evb.dt.yaml: phy@0:
    '#phy-cells' is a required property
    
    The phy nodename is normally used by a phy-handle.
    This node is however compatible with
    "ethernet-phy-id1234.d400", "ethernet-phy-ieee802.3-c22"
    which is just been added to 'ethernet-phy.yaml'.
    So change nodename to 'ethernet-phy' for which '#phy-cells'
    is not a required property
    
    make ARCH=arm dtbs_check
    DT_SCHEMA_FILES=~/.local/lib/python3.5/site-packages/dtschema/schemas/
    phy/phy-provider.yaml
    
    Signed-off-by: Johan Jonker <jbx6244@gmail.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200416170321.4216-1-jbx6244@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2cbe68056398b588f01f49a0a1ca0b6fb3a74f8
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Wed Apr 22 11:19:22 2020 +0100

    arm64: dts: qcom: db820c: fix audio configuration
    
    [ Upstream commit 7710f80ecd9c74544a22557ab581cf603e713f51 ]
    
    After patch f864edff110d ("ASoC: qdsp6: q6routing: remove default routing")
    and 9b60441692d9 ("ASoC: qdsp6: q6asm-dai: only enable dais from device tree")
    asm dais and routing needs to be properly specified at device tree level.
    
    This patch fixes this.
    
    Tested-by: Vinod Koul <vkoul@kernel.org>
    Reviewed-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20200422101922.8894-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3013bbe154a8a11fb3783d903d4eaafabc315e1
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri May 22 00:31:23 2020 +0300

    net: mscc: ocelot: fix address ageing time (again)
    
    commit bf655ba212dfd10d1c86afeee3f3372dbd731d46 upstream.
    
    ocelot_set_ageing_time has 2 callers:
     - felix_set_ageing_time: from drivers/net/dsa/ocelot/felix.c
     - ocelot_port_attr_ageing_set: from drivers/net/ethernet/mscc/ocelot.c
    
    The issue described in the fixed commit below actually happened for the
    felix_set_ageing_time code path only, since ocelot_port_attr_ageing_set
    was already dividing by 1000. So to make both paths symmetrical (and to
    fix addresses getting aged way too fast on Ocelot), stop dividing by
    1000 at caller side altogether.
    
    Fixes: c0d7eccbc761 ("net: mscc: ocelot: ANA_AUTOAGE_AGE_PERIOD holds a value in seconds, not ms")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac1902c251dbb92fe65c70226276680f64b9bd6b
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu May 21 15:11:44 2020 +0300

    mlxsw: spectrum: Fix use-after-free of split/unsplit/type_set in case reload fails
    
    commit 4340f42f207eacb81e7a6b6bb1e3b6afad9a2e26 upstream.
    
    In case of reload fail, the mlxsw_sp->ports contains a pointer to a
    freed memory (either by reload_down() or reload_up() error path).
    Fix this by initializing the pointer to NULL and checking it before
    dereferencing in split/unsplit/type_set callpaths.
    
    Fixes: 24cc68ad6c46 ("mlxsw: core: Add support for reload")
    Reported-by: Danielle Ratson <danieller@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7091e72cf0cf7478bf02c63ea0e8679014ef1f43
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Wed May 20 17:55:32 2020 +0800

    net: sgi: ioc3-eth: Fix return value check in ioc3eth_probe()
    
    commit a7654211d0ffeaa8eb0545ea00f8445242cbce05 upstream.
    
    In the function devm_platform_ioremap_resource(), if get resource
    failed, the return value is ERR_PTR() not NULL. Thus it must be
    replaced by IS_ERR(), or else it may result in crashes if a critical
    error path is encountered.
    
    Fixes: 0ce5ebd24d25 ("mfd: ioc3: Add driver for SGI IOC3 chip")
    Signed-off-by: Zhang Shengju <zhangshengju@cmss.chinamobile.com>
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 706d084cd0037ffea4c13effb3058638fea2fa70
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Fri May 22 14:07:15 2020 -0500

    net/mlx4_core: fix a memory leak bug.
    
    commit febfd9d3c7f74063e8e630b15413ca91b567f963 upstream.
    
    In function mlx4_opreq_action(), pointer "mailbox" is not released,
    when mlx4_cmd_box() return and error, causing a memory leak bug.
    Fix this issue by going to "out" label, mlx4_free_cmd_mailbox() can
    free this pointer.
    
    Fixes: fe6f700d6cbb ("net/mlx4_core: Respond to operation request by firmware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 419ca1c0a62e9311be52959c51da426c5b38dd45
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Fri May 22 16:50:27 2020 -0500

    net: sun: fix missing release regions in cas_init_one().
    
    commit 5a730153984dd13f82ffae93d7170d76eba204e9 upstream.
    
    In cas_init_one(), "pdev" is requested by "pci_request_regions", but it
    was not released after a call of the function “pci_write_config_byte”
    failed. Thus replace the jump target “err_write_cacheline” by
    "err_out_free_res".
    
    Fixes: 1f26dac32057 ("[NET]: Add Sun Cassini driver.")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e937e4e53d95f4cc50b3378fef22209066cec95f
Author: Vadim Fedorenko <vfedorenko@novek.ru>
Date:   Wed May 20 11:41:44 2020 +0300

    net/tls: free record only on encryption error
    
    commit 635d9398178659d8ddba79dd061f9451cec0b4d1 upstream.
    
    We cannot free record on any transient error because it leads to
    losing previos data. Check socket error to know whether record must
    be freed or not.
    
    Fixes: d10523d0b3d7 ("net/tls: free the record on encryption error")
    Signed-off-by: Vadim Fedorenko <vfedorenko@novek.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c85bb40490370eb84753f0e9adfc363dc8617a2
Author: Vadim Fedorenko <vfedorenko@novek.ru>
Date:   Wed May 20 11:41:43 2020 +0300

    net/tls: fix encryption error checking
    
    commit a7bff11f6f9afa87c25711db8050c9b5324db0e2 upstream.
    
    bpf_exec_tx_verdict() can return negative value for copied
    variable. In that case this value will be pushed back to caller
    and the real error code will be lost. Fix it using signed type and
    checking for positive value.
    
    Fixes: d10523d0b3d7 ("net/tls: free the record on encryption error")
    Fixes: d3b18ad31f93 ("tls: add bpf support to sk_msg handling")
    Signed-off-by: Vadim Fedorenko <vfedorenko@novek.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b035b08e7e5fe7b2e75636324edf41ee30c5f94
Author: Roi Dayan <roid@mellanox.com>
Date:   Thu May 14 23:44:38 2020 +0300

    net/mlx5: Annotate mutex destroy for root ns
    
    commit 9ca415399dae133b00273a4283ef31d003a6818d upstream.
    
    Invoke mutex_destroy() to catch any errors.
    
    Fixes: 2cc43b494a6c ("net/mlx5_core: Managing root flow table")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45362699442ec7338df8513401e454220e131443
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Thu Mar 19 21:43:13 2020 +0200

    net/mlx5: Avoid processing commands before cmdif is ready
    
    commit f7936ddd35d8b849daf0372770c7c9dbe7910fca upstream.
    
    When driver is reloading during recovery flow, it can't get new commands
    till command interface is up again. Otherwise we may get to null pointer
    trying to access non initialized command structures.
    
    Add cmdif state to avoid processing commands while cmdif is not ready.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb71d147457f3a4b9a58c81023c8b7eb1e8d5176
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 28 13:30:53 2020 +0200

    Revert "virtio-balloon: Revert "virtio-balloon: Switch back to OOM handler for VIRTIO_BALLOON_F_DEFLATE_ON_OOM""
    
    This reverts commit 37681282be8e89ae8baf26753bf489837d74e08e which is
    commit 835a6a649d0dd1b1f46759eb60fff2f63ed253a7 upstream.
    
    Jiri and David agree that it is not needed in the 5.6.y tree, so revert
    it.
    
    Reported-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: David Hildenbrand <david@redhat.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aa3b4c70a09af3b1521351bc242e59cc2b6b020
Author: Roi Dayan <roid@mellanox.com>
Date:   Mon May 11 16:32:09 2020 +0300

    net/mlx5: Fix cleaning unmanaged flow tables
    
    [ Upstream commit aee37f3d940ca732df71c3df49347bccaafc0b24 ]
    
    Unmanaged flow tables doesn't have a parent and tree_put_node()
    assume there is always a parent if cleaning is needed. fix that.
    
    Fixes: 5281a0c90919 ("net/mlx5: fs_core: Introduce unmanaged flow tables")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Reviewed-by: Paul Blakey <paulb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adecd8e45f6cbccb749b0ce51c90ff10dd6e1b37
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Wed Mar 18 21:44:32 2020 +0200

    net/mlx5: Fix a race when moving command interface to events mode
    
    [ Upstream commit d43b7007dbd1195a5b6b83213e49b1516aaf6f5e ]
    
    After driver creates (via FW command) an EQ for commands, the driver will
    be informed on new commands completion by EQE. However, due to a race in
    driver's internal command mode metadata update, some new commands will
    still be miss-handled by driver as if we are in polling mode. Such commands
    can get two non forced completion, leading to already freed command entry
    access.
    
    CREATE_EQ command, that maps EQ to the command queue must be posted to the
    command queue while it is empty and no other command should be posted.
    
    Add SW mechanism that once the CREATE_EQ command is about to be executed,
    all other commands will return error without being sent to the FW. Allow
    sending other commands only after successfully changing the driver's
    internal command mode metadata.
    We can safely return error to all other commands while creating the command
    EQ, as all other commands might be sent from the user/application during
    driver load. Application can rerun them later after driver's load was
    finished.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ebff7996249a4c08f832bba8828866e24666512
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu May 21 22:03:08 2020 +0200

    r8169: fix OCP access on RTL8117
    
    [ Upstream commit 561535b0f23961ced071b82575d5e83e6351a814 ]
    
    According to r8168 vendor driver DASHv3 chips like RTL8168fp/RTL8117
    need a special addressing for OCP access.
    Fix is compile-tested only due to missing test hardware.
    
    Fixes: 1287723aa139 ("r8169: add support for RTL8117")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a7939808afdc57ecaeb72d049e2985321a1e44e
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue May 19 22:49:30 2020 -0600

    wireguard: noise: separate receive counter from send counter
    
    [ Upstream commit a9e90d9931f3a474f04bab782ccd9d77904941e9 ]
    
    In "wireguard: queueing: preserve flow hash across packet scrubbing", we
    were required to slightly increase the size of the receive replay
    counter to something still fairly small, but an increase nonetheless.
    It turns out that we can recoup some of the additional memory overhead
    by splitting up the prior union type into two distinct types. Before, we
    used the same "noise_counter" union for both sending and receiving, with
    sending just using a simple atomic64_t, while receiving used the full
    replay counter checker. This meant that most of the memory being
    allocated for the sending counter was being wasted. Since the old
    "noise_counter" type increased in size in the prior commit, now is a
    good time to split up that union type into a distinct "noise_replay_
    counter" for receiving and a boring atomic64_t for sending, each using
    neither more nor less memory than required.
    
    Also, since sometimes the replay counter is accessed without
    necessitating additional accesses to the bitmap, we can reduce cache
    misses by hoisting the always-necessary lock above the bitmap in the
    struct layout. We also change a "noise_replay_counter" stack allocation
    to kmalloc in a -DDEBUG selftest so that KASAN doesn't trigger a stack
    frame warning.
    
    All and all, removing a bit of abstraction in this commit makes the code
    simpler and smaller, in addition to the motivating memory usage
    recuperation. For example, passing around raw "noise_symmetric_key"
    structs is something that really only makes sense within noise.c, in the
    one place where the sending and receiving keys can safely be thought of
    as the same type of object; subsequent to that, it's important that we
    uniformly access these through keypair->{sending,receiving}, where their
    distinct roles are always made explicit. So this patch allows us to draw
    that distinction clearly as well.
    
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce268ae617acb18cedd19c83361a6fb28769594f
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue May 19 22:49:29 2020 -0600

    wireguard: queueing: preserve flow hash across packet scrubbing
    
    [ Upstream commit c78a0b4a78839d572d8a80f6a62221c0d7843135 ]
    
    It's important that we clear most header fields during encapsulation and
    decapsulation, because the packet is substantially changed, and we don't
    want any info leak or logic bug due to an accidental correlation. But,
    for encapsulation, it's wrong to clear skb->hash, since it's used by
    fq_codel and flow dissection in general. Without it, classification does
    not proceed as usual. This change might make it easier to estimate the
    number of innerflows by examining clustering of out of order packets,
    but this shouldn't open up anything that can't already be inferred
    otherwise (e.g. syn packet size inference), and fq_codel can be disabled
    anyway.
    
    Furthermore, it might be the case that the hash isn't used or queried at
    all until after wireguard transmits the encrypted UDP packet, which
    means skb->hash might still be zero at this point, and thus no hash
    taken over the inner packet data. In order to address this situation, we
    force a calculation of skb->hash before encrypting packet data.
    
    Of course this means that fq_codel might transmit packets slightly more
    out of order than usual. Toke did some testing on beefy machines with
    high quantities of parallel flows and found that increasing the
    reply-attack counter to 8192 takes care of the most pathological cases
    pretty well.
    
    Reported-by: Dave Taht <dave.taht@gmail.com>
    Reviewed-and-tested-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a46f720e9b652afea9a560546fe4d0f0cde798c
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue May 19 22:49:28 2020 -0600

    wireguard: noise: read preshared key while taking lock
    
    [ Upstream commit bc67d371256f5c47d824e2eec51e46c8d62d022e ]
    
    Prior we read the preshared key after dropping the handshake lock, which
    isn't an actual crypto issue if it races, but it's still not quite
    correct. So copy that part of the state into a temporary like we do with
    the rest of the handshake state variables. Then we can release the lock,
    operate on the temporary, and zero it out at the end of the function. In
    performance tests, the impact of this was entirely unnoticable, probably
    because those bytes are coming from the same cacheline as other things
    that are being copied out in the same manner.
    
    Reported-by: Matt Dunwoodie <ncon@noconroy.net>
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f03225d18e217d01282995b5b264f1704272b54
Author: Shay Drory <shayd@mellanox.com>
Date:   Wed May 6 14:52:04 2020 +0300

    net/mlx5: Fix error flow in case of function_setup failure
    
    [ Upstream commit 4f7400d5cbaef676e00cdffb0565bf731c6bb09e ]
    
    Currently, if an error occurred during mlx5_function_setup(), we
    keep dev->state as DEVICE_STATE_UP.
    Fixing it by adding a goto label.
    
    Fixes: e161105e58da ("net/mlx5: Function setup/teardown procedures")
    Signed-off-by: Shay Drory <shayd@mellanox.com>
    Reviewed-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0b6c29f2f2d9fe275e54ad72c27536b011c9dd7
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Tue Apr 7 17:38:28 2020 +0300

    net/mlx5e: Update netdev txq on completions during closure
    
    [ Upstream commit 5e911e2c06bd8c17df29147a5e2d4b17fafda024 ]
    
    On sq closure when we free its descriptors, we should also update netdev
    txq on completions which would not arrive. Otherwise if we reopen sqs
    and attach them back, for example on fw fatal recovery flow, we may get
    tx timeout.
    
    Fixes: 29429f3300a3 ("net/mlx5e: Timeout if SQ doesn't flush during close")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d90802e48e0f89013ae14223c1b380bf9b82aea3
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Wed Apr 29 23:56:58 2020 +0300

    net/mlx5: Fix memory leak in mlx5_events_init
    
    [ Upstream commit df14ad1eccb04a4a28c90389214dbacab085b244 ]
    
    Fix memory leak in mlx5_events_init(), in case
    create_single_thread_workqueue() fails, events
    struct should be freed.
    
    Fixes: 5d3c537f9070 ("net/mlx5: Handle event of power detection in the PCIE slot")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bd322470c29ebb76f470496ce8f4c16c6d970a9
Author: Roi Dayan <roid@mellanox.com>
Date:   Thu Apr 30 09:16:01 2020 +0300

    net/mlx5e: Fix inner tirs handling
    
    [ Upstream commit a16b8e0dcf7043bee46174bed0553cc9e36b63a5 ]
    
    In the cited commit inner_tirs argument was added to create and destroy
    inner tirs, and no indication was added to mlx5e_modify_tirs_hash()
    function. In order to have a consistent handling, use
    inner_indir_tir[0].tirn in tirs destroy/modify function as an indication
    to whether inner tirs are created.
    Inner tirs are not created for representors and before this commit,
    a call to mlx5e_modify_tirs_hash() was sending HW commands to
    modify non-existent inner tirs.
    
    Fixes: 46dc933cee82 ("net/mlx5e: Provide explicit directive if to create inner indirect tirs")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1095991d4f4b82b4e4b34f99a37e9434438c8128
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon Apr 27 16:56:59 2020 +0300

    net/mlx5e: kTLS, Destroy key object after destroying the TIS
    
    [ Upstream commit 16736e11f43b80a38f98f6add54fab3b8c297df3 ]
    
    The TLS TIS object contains the dek/key ID.
    By destroying the key first, the TIS would contain an invalid
    non-existing key ID.
    Reverse the destroy order, this also acheives the desired assymetry
    between the destroy and the create flows.
    
    Fixes: d2ead1f360e8 ("net/mlx5e: Add kTLS TX HW offload support")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 740b06ed3821074030c6fb992262c140511b15ff
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 21 11:29:58 2020 -0700

    tipc: block BH before using dst_cache
    
    [ Upstream commit 1378817486d6860f6a927f573491afe65287abf1 ]
    
    dst_cache_get() documents it must be used with BH disabled.
    
    sysbot reported :
    
    BUG: using smp_processor_id() in preemptible [00000000] code: /21697
    caller is dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
    CPU: 0 PID: 21697 Comm:  Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     check_preemption_disabled lib/smp_processor_id.c:47 [inline]
     debug_smp_processor_id.cold+0x88/0x9b lib/smp_processor_id.c:57
     dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
     tipc_udp_xmit.isra.0+0xb9/0xad0 net/tipc/udp_media.c:164
     tipc_udp_send_msg+0x3e6/0x490 net/tipc/udp_media.c:244
     tipc_bearer_xmit_skb+0x1de/0x3f0 net/tipc/bearer.c:526
     tipc_enable_bearer+0xb2f/0xd60 net/tipc/bearer.c:331
     __tipc_nl_bearer_enable+0x2bf/0x390 net/tipc/bearer.c:995
     tipc_nl_bearer_enable+0x1e/0x30 net/tipc/bearer.c:1003
     genl_family_rcv_msg_doit net/netlink/genetlink.c:673 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:718 [inline]
     genl_rcv_msg+0x627/0xdf0 net/netlink/genetlink.c:735
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:746
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x45ca29
    
    Fixes: e9c1a793210f ("tipc: add dst_cache support for udp media")
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7424f549ba9ba97496a5d7dc54225b50be6c552
Author: Jere Leppänen <jere.leppanen@nokia.com>
Date:   Wed May 20 18:15:31 2020 +0300

    sctp: Start shutdown on association restart if in SHUTDOWN-SENT state and socket is closed
    
    [ Upstream commit d3e8e4c11870413789f029a71e72ae6e971fe678 ]
    
    Commit bdf6fa52f01b ("sctp: handle association restarts when the
    socket is closed.") starts shutdown when an association is restarted,
    if in SHUTDOWN-PENDING state and the socket is closed. However, the
    rationale stated in that commit applies also when in SHUTDOWN-SENT
    state - we don't want to move an association to ESTABLISHED state when
    the socket has been closed, because that results in an association
    that is unreachable from user space.
    
    The problem scenario:
    
    1.  Client crashes and/or restarts.
    
    2.  Server (using one-to-one socket) calls close(). SHUTDOWN is lost.
    
    3.  Client reconnects using the same addresses and ports.
    
    4.  Server's association is restarted. The association and the socket
        move to ESTABLISHED state, even though the server process has
        closed its descriptor.
    
    Also, after step 4 when the server process exits, some resources are
    leaked in an attempt to release the underlying inet sock structure in
    ESTABLISHED state:
    
        IPv4: Attempt to release TCP socket in state 1 00000000377288c7
    
    Fix by acting the same way as in SHUTDOWN-PENDING state. That is, if
    an association is restarted in SHUTDOWN-SENT state and the socket is
    closed, then start shutdown and don't move the association or the
    socket to ESTABLISHED state.
    
    Fixes: bdf6fa52f01b ("sctp: handle association restarts when the socket is closed.")
    Signed-off-by: Jere Leppänen <jere.leppanen@nokia.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 085bb270b4b1168c93afb37bbafc881207d15443
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Tue May 19 16:04:05 2020 -0400

    sctp: Don't add the shutdown timer if its already been added
    
    [ Upstream commit 20a785aa52c82246055a089e55df9dac47d67da1 ]
    
    This BUG halt was reported a while back, but the patch somehow got
    missed:
    
    PID: 2879   TASK: c16adaa0  CPU: 1   COMMAND: "sctpn"
     #0 [f418dd28] crash_kexec at c04a7d8c
     #1 [f418dd7c] oops_end at c0863e02
     #2 [f418dd90] do_invalid_op at c040aaca
     #3 [f418de28] error_code (via invalid_op) at c08631a5
        EAX: f34baac0  EBX: 00000090  ECX: f418deb0  EDX: f5542950  EBP: 00000000
        DS:  007b      ESI: f34ba800  ES:  007b      EDI: f418dea0  GS:  00e0
        CS:  0060      EIP: c046fa5e  ERR: ffffffff  EFLAGS: 00010286
     #4 [f418de5c] add_timer at c046fa5e
     #5 [f418de68] sctp_do_sm at f8db8c77 [sctp]
     #6 [f418df30] sctp_primitive_SHUTDOWN at f8dcc1b5 [sctp]
     #7 [f418df48] inet_shutdown at c080baf9
     #8 [f418df5c] sys_shutdown at c079eedf
     #9 [f418df70] sys_socketcall at c079fe88
        EAX: ffffffda  EBX: 0000000d  ECX: bfceea90  EDX: 0937af98
        DS:  007b      ESI: 0000000c  ES:  007b      EDI: b7150ae4
        SS:  007b      ESP: bfceea7c  EBP: bfceeaa8  GS:  0033
        CS:  0073      EIP: b775c424  ERR: 00000066  EFLAGS: 00000282
    
    It appears that the side effect that starts the shutdown timer was processed
    multiple times, which can happen as multiple paths can trigger it.  This of
    course leads to the BUG halt in add_timer getting called.
    
    Fix seems pretty straightforward, just check before the timer is added if its
    already been started.  If it has mod the timer instead to min(current
    expiration, new expiration)
    
    Its been tested but not confirmed to fix the problem, as the issue has only
    occured in production environments where test kernels are enjoined from being
    installed.  It appears to be a sane fix to me though.  Also, recentely,
    Jere found a reproducer posted on list to confirm that this resolves the
    issues
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: Vlad Yasevich <vyasevich@gmail.com>
    CC: "David S. Miller" <davem@davemloft.net>
    CC: jere.leppanen@nokia.com
    CC: marcelo.leitner@gmail.com
    CC: netdev@vger.kernel.org
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f53175110c77c5fe825a90619f786597574ae65
Author: Marc Payne <marc.payne@mdpsys.co.uk>
Date:   Tue May 19 19:01:46 2020 +0100

    r8152: support additional Microsoft Surface Ethernet Adapter variant
    
    [ Upstream commit c27a204383616efba5a4194075e90819961ff66a ]
    
    Device id 0927 is the RTL8153B-based component of the 'Surface USB-C to
    Ethernet and USB Adapter' and may be used as a component of other devices
    in future. Tested and working with the r8152 driver.
    
    Update the cdc_ether blacklist due to the RTL8153 'network jam on suspend'
    issue which this device will cause (personally confirmed).
    
    Signed-off-by: Marc Payne <marc.payne@mdpsys.co.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29fa5cd052f7017cd6b204ef70b417bcf7d42c11
Author: David Ahern <dsahern@gmail.com>
Date:   Sun May 17 11:26:32 2020 -0600

    nexthop: Fix attribute checking for groups
    
    [ Upstream commit 84be69b869a5a496a6cfde9b3c29509207a1f1fa ]
    
    For nexthop groups, attributes after NHA_GROUP_TYPE are invalid, but
    nh_check_attr_group starts checking at NHA_GROUP. The group type defaults
    to multipath and the NHA_GROUP_TYPE is currently optional so this has
    slipped through so far. Fix the attribute checking to handle support of
    new group types.
    
    Fixes: 430a049190de ("nexthop: Add support for nexthop groups")
    Signed-off-by: ASSOGBA Emery <assogba.emery@gmail.com>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b81d43da15e56ed89f083f326561acdcaf549ce
Author: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
Date:   Sat May 23 01:40:31 2020 +0530

    net/tls: fix race condition causing kernel panic
    
    [ Upstream commit 0cada33241d9de205522e3858b18e506ca5cce2c ]
    
    tls_sw_recvmsg() and tls_decrypt_done() can be run concurrently.
    // tls_sw_recvmsg()
            if (atomic_read(&ctx->decrypt_pending))
                    crypto_wait_req(-EINPROGRESS, &ctx->async_wait);
            else
                    reinit_completion(&ctx->async_wait.completion);
    
    //tls_decrypt_done()
            pending = atomic_dec_return(&ctx->decrypt_pending);
    
            if (!pending && READ_ONCE(ctx->async_notify))
                    complete(&ctx->async_wait.completion);
    
    Consider the scenario tls_decrypt_done() is about to run complete()
    
            if (!pending && READ_ONCE(ctx->async_notify))
    
    and tls_sw_recvmsg() reads decrypt_pending == 0, does reinit_completion(),
    then tls_decrypt_done() runs complete(). This sequence of execution
    results in wrong completion. Consequently, for next decrypt request,
    it will not wait for completion, eventually on connection close, crypto
    resources freed, there is no way to handle pending decrypt response.
    
    This race condition can be avoided by having atomic_read() mutually
    exclusive with atomic_dec_return(),complete().Intoduced spin lock to
    ensure the mutual exclution.
    
    Addressed similar problem in tx direction.
    
    v1->v2:
    - More readable commit message.
    - Corrected the lock to fix new race scenario.
    - Removed barrier which is not needed now.
    
    Fixes: a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    Signed-off-by: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11618f86fe4493de09f1558255304f262fb8a5f0
Author: Roman Mashak <mrv@mojatatu.com>
Date:   Sun May 17 08:46:31 2020 -0400

    net sched: fix reporting the first-time use timestamp
    
    [ Upstream commit b15e62631c5f19fea9895f7632dae9c1b27fe0cd ]
    
    When a new action is installed, firstuse field of 'tcf_t' is explicitly set
    to 0. Value of zero means "new action, not yet used"; as a packet hits the
    action, 'firstuse' is stamped with the current jiffies value.
    
    tcf_tm_dump() should return 0 for firstuse if action has not yet been hit.
    
    Fixes: 48d8ee1694dd ("net sched actions: aggregate dumping of actions timeinfo")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Roman Mashak <mrv@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 833f031fb2fc1cbb25d6070312b0ed074507d8bf
Author: Yuqi Jin <jinyuqi@huawei.com>
Date:   Sat May 16 11:46:49 2020 +0800

    net: revert "net: get rid of an signed integer overflow in ip_idents_reserve()"
    
    [ Upstream commit a6211caa634da39d861a47437ffcda8b38ef421b ]
    
    Commit adb03115f459 ("net: get rid of an signed integer overflow in ip_idents_reserve()")
    used atomic_cmpxchg to replace "atomic_add_return" inside the function
    "ip_idents_reserve". The reason was to avoid UBSAN warning.
    However, this change has caused performance degrade and in GCC-8,
    fno-strict-overflow is now mapped to -fwrapv -fwrapv-pointer
    and signed integer overflow is now undefined by default at all
    optimization levels[1]. Moreover, it was a bug in UBSAN vs -fwrapv
    /-fno-strict-overflow, so Let's revert it safely.
    
    [1] https://gcc.gnu.org/gcc-8/changes.html
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Hideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Arvind Sankar <nivedita@alum.mit.edu>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jiong Wang <jiongwang@huawei.com>
    Signed-off-by: Yuqi Jin <jinyuqi@huawei.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b07b8f3bb27d78916c855ba4031cb50da6d1e39c
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue May 19 23:44:16 2020 +0530

    net: qrtr: Fix passing invalid reference to qrtr_local_enqueue()
    
    [ Upstream commit d28ea1fbbf437054ef339afec241019f2c4e2bb6 ]
    
    Once the traversal of the list is completed with list_for_each_entry(),
    the iterator (node) will point to an invalid object. So passing this to
    qrtr_local_enqueue() which is outside of the iterator block is erroneous
    eventhough the object is not used.
    
    So fix this by passing NULL to qrtr_local_enqueue().
    
    Fixes: bdabad3e363d ("net: Add Qualcomm IPC router")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b434a9c63d9e84565576739b16f843e0aa49d54
Author: Stephen Worley <sworley@cumulusnetworks.com>
Date:   Tue May 19 21:57:12 2020 -0400

    net: nlmsg_cancel() if put fails for nhmsg
    
    [ Upstream commit d69100b8eee27c2d60ee52df76e0b80a8d492d34 ]
    
    Fixes data remnant seen when we fail to reserve space for a
    nexthop group during a larger dump.
    
    If we fail the reservation, we goto nla_put_failure and
    cancel the message.
    
    Reproduce with the following iproute2 commands:
    =====================
    ip link add dummy1 type dummy
    ip link add dummy2 type dummy
    ip link add dummy3 type dummy
    ip link add dummy4 type dummy
    ip link add dummy5 type dummy
    ip link add dummy6 type dummy
    ip link add dummy7 type dummy
    ip link add dummy8 type dummy
    ip link add dummy9 type dummy
    ip link add dummy10 type dummy
    ip link add dummy11 type dummy
    ip link add dummy12 type dummy
    ip link add dummy13 type dummy
    ip link add dummy14 type dummy
    ip link add dummy15 type dummy
    ip link add dummy16 type dummy
    ip link add dummy17 type dummy
    ip link add dummy18 type dummy
    ip link add dummy19 type dummy
    ip link add dummy20 type dummy
    ip link add dummy21 type dummy
    ip link add dummy22 type dummy
    ip link add dummy23 type dummy
    ip link add dummy24 type dummy
    ip link add dummy25 type dummy
    ip link add dummy26 type dummy
    ip link add dummy27 type dummy
    ip link add dummy28 type dummy
    ip link add dummy29 type dummy
    ip link add dummy30 type dummy
    ip link add dummy31 type dummy
    ip link add dummy32 type dummy
    
    ip link set dummy1 up
    ip link set dummy2 up
    ip link set dummy3 up
    ip link set dummy4 up
    ip link set dummy5 up
    ip link set dummy6 up
    ip link set dummy7 up
    ip link set dummy8 up
    ip link set dummy9 up
    ip link set dummy10 up
    ip link set dummy11 up
    ip link set dummy12 up
    ip link set dummy13 up
    ip link set dummy14 up
    ip link set dummy15 up
    ip link set dummy16 up
    ip link set dummy17 up
    ip link set dummy18 up
    ip link set dummy19 up
    ip link set dummy20 up
    ip link set dummy21 up
    ip link set dummy22 up
    ip link set dummy23 up
    ip link set dummy24 up
    ip link set dummy25 up
    ip link set dummy26 up
    ip link set dummy27 up
    ip link set dummy28 up
    ip link set dummy29 up
    ip link set dummy30 up
    ip link set dummy31 up
    ip link set dummy32 up
    
    ip link set dummy33 up
    ip link set dummy34 up
    
    ip link set vrf-red up
    ip link set vrf-blue up
    
    ip link set dummyVRFred up
    ip link set dummyVRFblue up
    
    ip ro add 1.1.1.1/32 dev dummy1
    ip ro add 1.1.1.2/32 dev dummy2
    ip ro add 1.1.1.3/32 dev dummy3
    ip ro add 1.1.1.4/32 dev dummy4
    ip ro add 1.1.1.5/32 dev dummy5
    ip ro add 1.1.1.6/32 dev dummy6
    ip ro add 1.1.1.7/32 dev dummy7
    ip ro add 1.1.1.8/32 dev dummy8
    ip ro add 1.1.1.9/32 dev dummy9
    ip ro add 1.1.1.10/32 dev dummy10
    ip ro add 1.1.1.11/32 dev dummy11
    ip ro add 1.1.1.12/32 dev dummy12
    ip ro add 1.1.1.13/32 dev dummy13
    ip ro add 1.1.1.14/32 dev dummy14
    ip ro add 1.1.1.15/32 dev dummy15
    ip ro add 1.1.1.16/32 dev dummy16
    ip ro add 1.1.1.17/32 dev dummy17
    ip ro add 1.1.1.18/32 dev dummy18
    ip ro add 1.1.1.19/32 dev dummy19
    ip ro add 1.1.1.20/32 dev dummy20
    ip ro add 1.1.1.21/32 dev dummy21
    ip ro add 1.1.1.22/32 dev dummy22
    ip ro add 1.1.1.23/32 dev dummy23
    ip ro add 1.1.1.24/32 dev dummy24
    ip ro add 1.1.1.25/32 dev dummy25
    ip ro add 1.1.1.26/32 dev dummy26
    ip ro add 1.1.1.27/32 dev dummy27
    ip ro add 1.1.1.28/32 dev dummy28
    ip ro add 1.1.1.29/32 dev dummy29
    ip ro add 1.1.1.30/32 dev dummy30
    ip ro add 1.1.1.31/32 dev dummy31
    ip ro add 1.1.1.32/32 dev dummy32
    
    ip next add id 1 via 1.1.1.1 dev dummy1
    ip next add id 2 via 1.1.1.2 dev dummy2
    ip next add id 3 via 1.1.1.3 dev dummy3
    ip next add id 4 via 1.1.1.4 dev dummy4
    ip next add id 5 via 1.1.1.5 dev dummy5
    ip next add id 6 via 1.1.1.6 dev dummy6
    ip next add id 7 via 1.1.1.7 dev dummy7
    ip next add id 8 via 1.1.1.8 dev dummy8
    ip next add id 9 via 1.1.1.9 dev dummy9
    ip next add id 10 via 1.1.1.10 dev dummy10
    ip next add id 11 via 1.1.1.11 dev dummy11
    ip next add id 12 via 1.1.1.12 dev dummy12
    ip next add id 13 via 1.1.1.13 dev dummy13
    ip next add id 14 via 1.1.1.14 dev dummy14
    ip next add id 15 via 1.1.1.15 dev dummy15
    ip next add id 16 via 1.1.1.16 dev dummy16
    ip next add id 17 via 1.1.1.17 dev dummy17
    ip next add id 18 via 1.1.1.18 dev dummy18
    ip next add id 19 via 1.1.1.19 dev dummy19
    ip next add id 20 via 1.1.1.20 dev dummy20
    ip next add id 21 via 1.1.1.21 dev dummy21
    ip next add id 22 via 1.1.1.22 dev dummy22
    ip next add id 23 via 1.1.1.23 dev dummy23
    ip next add id 24 via 1.1.1.24 dev dummy24
    ip next add id 25 via 1.1.1.25 dev dummy25
    ip next add id 26 via 1.1.1.26 dev dummy26
    ip next add id 27 via 1.1.1.27 dev dummy27
    ip next add id 28 via 1.1.1.28 dev dummy28
    ip next add id 29 via 1.1.1.29 dev dummy29
    ip next add id 30 via 1.1.1.30 dev dummy30
    ip next add id 31 via 1.1.1.31 dev dummy31
    ip next add id 32 via 1.1.1.32 dev dummy32
    
    i=100
    
    while [ $i -le 200 ]
    do
    ip next add id $i group 1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19
    
            echo $i
    
            ((i++))
    
    done
    
    ip next add id 999 group 1/2/3/4/5/6
    
    ip next ls
    
    ========================
    
    Fixes: ab84be7e54fc ("net: Initial nexthop code")
    Signed-off-by: Stephen Worley <sworley@cumulusnetworks.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 762bf76e23bb95c6653ebfac366baa3f25d91a10
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed May 20 12:26:35 2020 +0100

    net: mvpp2: fix RX hashing for non-10G ports
    
    [ Upstream commit 3138a07ce219acde4c0d7ea0b6d54ba64153328b ]
    
    When rxhash is enabled on any ethernet port except the first in each CP
    block, traffic flow is prevented.  The analysis is below:
    
    I've been investigating this afternoon, and what I've found, comparing
    a kernel without 895586d5dc32 and with 895586d5dc32 applied is:
    
    - The table programmed into the hardware via mvpp22_rss_fill_table()
      appears to be identical with or without the commit.
    
    - When rxhash is enabled on eth2, mvpp2_rss_port_c2_enable() reports
      that c2.attr[0] and c2.attr[2] are written back containing:
    
       - with 895586d5dc32, failing:    00200000 40000000
       - without 895586d5dc32, working: 04000000 40000000
    
    - When disabling rxhash, c2.attr[0] and c2.attr[2] are written back as:
    
       04000000 00000000
    
    The second value represents the MVPP22_CLS_C2_ATTR2_RSS_EN bit, the
    first value is the queue number, which comprises two fields. The high
    5 bits are 24:29 and the low three are 21:23 inclusive. This comes
    from:
    
           c2.attr[0] = MVPP22_CLS_C2_ATTR0_QHIGH(qh) |
                         MVPP22_CLS_C2_ATTR0_QLOW(ql);
    
    So, the working case gives eth2 a queue id of 4.0, or 32 as per
    port->first_rxq, and the non-working case a queue id of 0.1, or 1.
    The allocation of queue IDs seems to be in mvpp2_port_probe():
    
            if (priv->hw_version == MVPP21)
                    port->first_rxq = port->id * port->nrxqs;
            else
                    port->first_rxq = port->id * priv->max_port_rxqs;
    
    Where:
    
            if (priv->hw_version == MVPP21)
                    priv->max_port_rxqs = 8;
            else
                    priv->max_port_rxqs = 32;
    
    Making the port 0 (eth0 / eth1) have port->first_rxq = 0, and port 1
    (eth2) be 32. It seems the idea is that the first 32 queues belong to
    port 0, the second 32 queues belong to port 1, etc.
    
    mvpp2_rss_port_c2_enable() gets the queue number from it's parameter,
    'ctx', which comes from mvpp22_rss_ctx(port, 0). This returns
    port->rss_ctx[0].
    
    mvpp22_rss_context_create() is responsible for allocating that, which
    it does by looking for an unallocated priv->rss_tables[] pointer. This
    table is shared amongst all ports on the CP silicon.
    
    When we write the tables in mvpp22_rss_fill_table(), the RSS table
    entry is defined by:
    
                    u32 sel = MVPP22_RSS_INDEX_TABLE(rss_ctx) |
                              MVPP22_RSS_INDEX_TABLE_ENTRY(i);
    
    where rss_ctx is the context ID (queue number) and i is the index in
    the table.
    
    If we look at what is written:
    
    - The first table to be written has "sel" values of 00000000..0000001f,
      containing values 0..3. This appears to be for eth1. This is table 0,
      RX queue number 0.
    - The second table has "sel" values of 00000100..0000011f, and appears
      to be for eth2.  These contain values 0x20..0x23. This is table 1,
      RX queue number 0.
    - The third table has "sel" values of 00000200..0000021f, and appears
      to be for eth3.  These contain values 0x40..0x43. This is table 2,
      RX queue number 0.
    
    How do queue numbers translate to the RSS table?  There is another
    table - the RXQ2RSS table, indexed by the MVPP22_RSS_INDEX_QUEUE field
    of MVPP22_RSS_INDEX and accessed through the MVPP22_RXQ2RSS_TABLE
    register. Before 895586d5dc32, it was:
    
           mvpp2_write(priv, MVPP22_RSS_INDEX,
                       MVPP22_RSS_INDEX_QUEUE(port->first_rxq));
           mvpp2_write(priv, MVPP22_RXQ2RSS_TABLE,
                       MVPP22_RSS_TABLE_POINTER(port->id));
    
    and after:
    
           mvpp2_write(priv, MVPP22_RSS_INDEX, MVPP22_RSS_INDEX_QUEUE(ctx));
           mvpp2_write(priv, MVPP22_RXQ2RSS_TABLE, MVPP22_RSS_TABLE_POINTER(ctx));
    
    Before the commit, for eth2, that would've contained '32' for the
    index and '1' for the table pointer - mapping queue 32 to table 1.
    Remember that this is queue-high.queue-low of 4.0.
    
    After the commit, we appear to map queue 1 to table 1. That again
    looks fine on the face of it.
    
    Section 9.3.1 of the A8040 manual seems indicate the reason that the
    queue number is separated. queue-low seems to always come from the
    classifier, whereas queue-high can be from the ingress physical port
    number or the classifier depending on the MVPP2_CLS_SWFWD_PCTRL_REG.
    
    We set the port bit in MVPP2_CLS_SWFWD_PCTRL_REG, meaning that queue-high
    comes from the MVPP2_CLS_SWFWD_P2HQ_REG() register... and this seems to
    be where our bug comes from.
    
    mvpp2_cls_oversize_rxq_set() sets this up as:
    
            mvpp2_write(port->priv, MVPP2_CLS_SWFWD_P2HQ_REG(port->id),
                        (port->first_rxq >> MVPP2_CLS_OVERSIZE_RXQ_LOW_BITS));
    
            val = mvpp2_read(port->priv, MVPP2_CLS_SWFWD_PCTRL_REG);
            val |= MVPP2_CLS_SWFWD_PCTRL_MASK(port->id);
            mvpp2_write(port->priv, MVPP2_CLS_SWFWD_PCTRL_REG, val);
    
    Setting the MVPP2_CLS_SWFWD_PCTRL_MASK bit means that the queue-high
    for eth2 is _always_ 4, so only queues 32 through 39 inclusive are
    available to eth2. Yet, we're trying to tell the classifier to set
    queue-high, which will be ignored, to zero. Hence, the queue-high
    field (MVPP22_CLS_C2_ATTR0_QHIGH()) from the classifier will be
    ignored.
    
    This means we end up directing traffic from eth2 not to queue 1, but
    to queue 33, and then we tell it to look up queue 33 in the RSS table.
    However, RSS table has not been programmed for queue 33, and so it ends
    up (presumably) dropping the packets.
    
    It seems that mvpp22_rss_context_create() doesn't take account of the
    fact that the upper 5 bits of the queue ID can't actually be changed
    due to the settings in mvpp2_cls_oversize_rxq_set(), _or_ it seems that
    mvpp2_cls_oversize_rxq_set() has been missed in this commit. Either
    way, these two functions mutually disagree with what queue number
    should be used.
    
    Looking deeper into what mvpp2_cls_oversize_rxq_set() and the MTU
    validation is doing, it seems that MVPP2_CLS_SWFWD_P2HQ_REG() is used
    for over-sized packets attempting to egress through this port. With
    the classifier having had RSS enabled and directing eth2 traffic to
    queue 1, we may still have packets appearing on queue 32 for this port.
    
    However, the only way we may end up with over-sized packets attempting
    to egress through eth2 - is if the A8040 forwards frames between its
    ports. From what I can see, we don't support that feature, and the
    kernel restricts the egress packet size to the MTU. In any case, if we
    were to attempt to transmit an oversized packet, we have no support in
    the kernel to deal with that appearing in the port's receive queue.
    
    So, this patch attempts to solve the issue by clearing the
    MVPP2_CLS_SWFWD_PCTRL_MASK() bit, allowing MVPP22_CLS_C2_ATTR0_QHIGH()
    from the classifier to define the queue-high field of the queue number.
    
    My testing seems to confirm my findings above - clearing this bit
    means that if I enable rxhash on eth2, the interface can then pass
    traffic, as we are now directing traffic to RX queue 1 rather than
    queue 33. Traffic still seems to work with rxhash off as well.
    
    Reported-by: Matteo Croce <mcroce@redhat.com>
    Tested-by: Matteo Croce <mcroce@redhat.com>
    Fixes: 895586d5dc32 ("net: mvpp2: cls: Use RSS contexts to handle RSS tables")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d875d3d686533c4eccc642b5632e4770a2fc06a
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Fri Dec 27 07:01:53 2019 +0200

    net/mlx5: Add command entry handling completion
    
    [ Upstream commit 17d00e839d3b592da9659c1977d45f85b77f986a ]
    
    When FW response to commands is very slow and all command entries in
    use are waiting for completion we can have a race where commands can get
    timeout before they get out of the queue and handled. Timeout
    completion on uninitialized command will cause releasing command's
    buffers before accessing it for initialization and then we will get NULL
    pointer exception while trying access it. It may also cause releasing
    buffers of another command since we may have timeout completion before
    even allocating entry index for this command.
    Add entry handling completion to avoid this race.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 114d8728d855329760daaa7d38b2a643c0d971ef
Author: Vadim Fedorenko <vfedorenko@novek.ru>
Date:   Wed May 20 11:50:48 2020 +0300

    net: ipip: fix wrong address family in init error path
    
    [ Upstream commit 57ebc8f08504f176eb0f25b3e0fde517dec61a4f ]
    
    In case of error with MPLS support the code is misusing AF_INET
    instead of AF_MPLS.
    
    Fixes: 1b69e7e6c4da ("ipip: support MPLS over IPv4")
    Signed-off-by: Vadim Fedorenko <vfedorenko@novek.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c87d3a151c3886a242474ec5a86ce7b1f857caf
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Mon May 18 17:13:34 2020 -0700

    net: inet_csk: Fix so_reuseport bind-address cache in tb->fast*
    
    [ Upstream commit 88d7fcfa3b1fe670f0412b95be785aafca63352b ]
    
    The commit 637bc8bbe6c0 ("inet: reset tb->fastreuseport when adding a reuseport sk")
    added a bind-address cache in tb->fast*.  The tb->fast* caches the address
    of a sk which has successfully been binded with SO_REUSEPORT ON.  The idea
    is to avoid the expensive conflict search in inet_csk_bind_conflict().
    
    There is an issue with wildcard matching where sk_reuseport_match() should
    have returned false but it is currently returning true.  It ends up
    hiding bind conflict.  For example,
    
    bind("[::1]:443"); /* without SO_REUSEPORT. Succeed. */
    bind("[::2]:443"); /* with    SO_REUSEPORT. Succeed. */
    bind("[::]:443");  /* with    SO_REUSEPORT. Still Succeed where it shouldn't */
    
    The last bind("[::]:443") with SO_REUSEPORT on should have failed because
    it should have a conflict with the very first bind("[::1]:443") which
    has SO_REUSEPORT off.  However, the address "[::2]" is cached in
    tb->fast* in the second bind. In the last bind, the sk_reuseport_match()
    returns true because the binding sk's wildcard addr "[::]" matches with
    the "[::2]" cached in tb->fast*.
    
    The correct bind conflict is reported by removing the second
    bind such that tb->fast* cache is not involved and forces the
    bind("[::]:443") to go through the inet_csk_bind_conflict():
    
    bind("[::1]:443"); /* without SO_REUSEPORT. Succeed. */
    bind("[::]:443");  /* with    SO_REUSEPORT. -EADDRINUSE */
    
    The expected behavior for sk_reuseport_match() is, it should only allow
    the "cached" tb->fast* address to be used as a wildcard match but not
    the address of the binding sk.  To do that, the current
    "bool match_wildcard" arg is split into
    "bool match_sk1_wildcard" and "bool match_sk2_wildcard".
    
    This change only affects the sk_reuseport_match() which is only
    used by inet_csk (e.g. TCP).
    The other use cases are calling inet_rcv_saddr_equal() and
    this patch makes it pass the same "match_wildcard" arg twice to
    the "ipv[46]_rcv_saddr_equal(..., match_wildcard, match_wildcard)".
    
    Cc: Josef Bacik <jbacik@fb.com>
    Fixes: 637bc8bbe6c0 ("inet: reset tb->fastreuseport when adding a reuseport sk")
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d59d6014b0f96d95b4b208e6d0c195d8afa32f6
Author: Boris Sukholitko <boris.sukholitko@broadcom.com>
Date:   Tue May 19 10:32:37 2020 +0300

    __netif_receive_skb_core: pass skb by reference
    
    [ Upstream commit c0bbbdc32febd4f034ecbf3ea17865785b2c0652 ]
    
    __netif_receive_skb_core may change the skb pointer passed into it (e.g.
    in rx_handler). The original skb may be freed as a result of this
    operation.
    
    The callers of __netif_receive_skb_core may further process original skb
    by using pt_prev pointer returned by __netif_receive_skb_core thus
    leading to unpleasant effects.
    
    The solution is to pass skb by reference into __netif_receive_skb_core.
    
    v2: Added Fixes tag and comment regarding ppt_prev and skb invariant.
    
    Fixes: 88eb1944e18c ("net: core: propagate SKB lists through packet_type lookup")
    Signed-off-by: Boris Sukholitko <boris.sukholitko@broadcom.com>
    Acked-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eb507837ec44772de24f7ff0beb2fdd900e156a
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Fri May 22 20:09:28 2020 +0300

    net: ethernet: ti: cpsw: fix ASSERT_RTNL() warning during suspend
    
    [ Upstream commit 4c64b83d03f4aafcdf710caad994cbc855802e74 ]
    
    vlan_for_each() are required to be called with rtnl_lock taken, otherwise
    ASSERT_RTNL() warning will be triggered - which happens now during System
    resume from suspend:
      cpsw_suspend()
      |- cpsw_ndo_stop()
        |- __hw_addr_ref_unsync_dev()
          |- cpsw_purge_all_mc()
             |- vlan_for_each()
                |- ASSERT_RTNL();
    
    Hence, fix it by surrounding cpsw_ndo_stop() by rtnl_lock/unlock() calls.
    
    Fixes: 15180eca569b ("net: ethernet: ti: cpsw: fix vlan mcast")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ac62511edbabc7c850c96688c4f3dd15b385f26
Author: DENG Qingfang <dqfext@gmail.com>
Date:   Wed May 13 23:10:16 2020 +0800

    net: dsa: mt7530: fix roaming from DSA user ports
    
    [ Upstream commit 5e5502e012b8129e11be616acb0f9c34bc8f8adb ]
    
    When a client moves from a DSA user port to a software port in a bridge,
    it cannot reach any other clients that connected to the DSA user ports.
    That is because SA learning on the CPU port is disabled, so the switch
    ignores the client's frames from the CPU port and still thinks it is at
    the user port.
    
    Fix it by enabling SA learning on the CPU port.
    
    To prevent the switch from learning from flooding frames from the CPU
    port, set skb->offload_fwd_mark to 1 for unicast and broadcast frames,
    and let the switch flood them instead of trapping to the CPU port.
    Multicast frames still need to be trapped to the CPU port for snooping,
    so set the SA_DIS bit of the MTK tag to 1 when transmitting those frames
    to disable SA learning.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Signed-off-by: DENG Qingfang <dqfext@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8aa01f8e084abbbf3d661f511e8d92fbcf965d9
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed May 20 11:15:46 2020 +0200

    net: don't return invalid table id error when we fall back to PF_UNSPEC
    
    [ Upstream commit 41b4bd986f86331efc599b9a3f5fb86ad92e9af9 ]
    
    In case we can't find a ->dumpit callback for the requested
    (family,type) pair, we fall back to (PF_UNSPEC,type). In effect, we're
    in the same situation as if userspace had requested a PF_UNSPEC
    dump. For RTM_GETROUTE, that handler is rtnl_dump_all, which calls all
    the registered RTM_GETROUTE handlers.
    
    The requested table id may or may not exist for all of those
    families. commit ae677bbb4441 ("net: Don't return invalid table id
    error when dumping all families") fixed the problem when userspace
    explicitly requests a PF_UNSPEC dump, but missed the fallback case.
    
    For example, when we pass ipv6.disable=1 to a kernel with
    CONFIG_IP_MROUTE=y and CONFIG_IP_MROUTE_MULTIPLE_TABLES=y,
    the (PF_INET6, RTM_GETROUTE) handler isn't registered, so we end up in
    rtnl_dump_all, and listing IPv6 routes will unexpectedly print:
    
      # ip -6 r
      Error: ipv4: MR table does not exist.
      Dump terminated
    
    commit ae677bbb4441 introduced the dump_all_families variable, which
    gets set when userspace requests a PF_UNSPEC dump. However, we can't
    simply set the family to PF_UNSPEC in rtnetlink_rcv_msg in the
    fallback case to get dump_all_families == true, because some messages
    types (for example RTM_GETRULE and RTM_GETNEIGH) only register the
    PF_UNSPEC handler and use the family to filter in the kernel what is
    dumped to userspace. We would then export more entries, that userspace
    would have to filter. iproute does that, but other programs may not.
    
    Instead, this patch removes dump_all_families and updates the
    RTM_GETROUTE handlers to check if the family that is being dumped is
    their own. When it's not, which covers both the intentional PF_UNSPEC
    dumps (as dump_all_families did) and the fallback case, ignore the
    missing table id error.
    
    Fixes: cb167893f41e ("net: Plumb support for filtering ipv4 and ipv6 multicast route dumps")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8660ea06ca21d8a306f32ae381a2ce9e8ed3e51
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Fri May 22 11:54:34 2020 +0300

    felix: Fix initialization of ioremap resources
    
    [ Upstream commit b4024c9e5c57902155d3b5e7de482e245f492bff ]
    
    The caller of devm_ioremap_resource(), either accidentally
    or by wrong assumption, is writing back derived resource data
    to global static resource initialization tables that should
    have been constant.  Meaning that after it computes the final
    physical start address it saves the address for no reason
    in the static tables.  This doesn't affect the first driver
    probing after reboot, but it breaks consecutive driver reloads
    (i.e. driver unbind & bind) because the initialization tables
    no longer have the correct initial values.  So the next probe()
    will map the device registers to wrong physical addresses,
    causing ARM SError async exceptions.
    This patch fixes all of the above.
    
    Fixes: 56051948773e ("net: dsa: ocelot: add driver for Felix switch family")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e9d4566ec28f22c7b1c12334a98368598642f96
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Sun May 10 21:04:09 2020 +0200

    ethtool: count header size in reply size estimate
    
    [ Upstream commit 7c87e32d2e380228ada79d20ac5b7674718ef097 ]
    
    As ethnl_request_ops::reply_size handlers do not include common header
    size into calculated/estimated reply size, it needs to be added in
    ethnl_default_doit() and ethnl_default_notify() before allocating the
    message. On the other hand, strset_reply_size() should not add common
    header size.
    
    Fixes: 728480f12442 ("ethtool: default handlers for GET requests")
    Reported-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2376df3934a494e96fb990985b2336d445cd5c1a
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Mon May 25 00:22:51 2020 +0300

    dpaa_eth: fix usage as DSA master, try 3
    
    [ Upstream commit 5d14c304bfc14b4fd052dc83d5224376b48f52f0 ]
    
    The dpaa-eth driver probes on compatible string for the MAC node, and
    the fman/mac.c driver allocates a dpaa-ethernet platform device that
    triggers the probing of the dpaa-eth net device driver.
    
    All of this is fine, but the problem is that the struct device of the
    dpaa_eth net_device is 2 parents away from the MAC which can be
    referenced via of_node. So of_find_net_device_by_node can't find it, and
    DSA switches won't be able to probe on top of FMan ports.
    
    It would be a bit silly to modify a core function
    (of_find_net_device_by_node) to look for dev->parent->parent->of_node
    just for one driver. We're just 1 step away from implementing full
    recursion.
    
    Actually there have already been at least 2 previous attempts to make
    this work:
    - Commit a1a50c8e4c24 ("fsl/man: Inherit parent device and of_node")
    - One or more of the patches in "[v3,0/6] adapt DPAA drivers for DSA":
      https://patchwork.ozlabs.org/project/netdev/cover/1508178970-28945-1-git-send-email-madalin.bucur@nxp.com/
      (I couldn't really figure out which one was supposed to solve the
      problem and how).
    
    Point being, it looks like this is still pretty much a problem today.
    On T1040, the /sys/class/net/eth0 symlink currently points to
    
    ../../devices/platform/ffe000000.soc/ffe400000.fman/ffe4e6000.ethernet/dpaa-ethernet.0/net/eth0
    
    which pretty much illustrates the problem. The closest of_node we've got
    is the "fsl,fman-memac" at /soc@ffe000000/fman@400000/ethernet@e6000,
    which is what we'd like to be able to reference from DSA as host port.
    
    For of_find_net_device_by_node to find the eth0 port, we would need the
    parent of the eth0 net_device to not be the "dpaa-ethernet" platform
    device, but to point 1 level higher, aka the "fsl,fman-memac" node
    directly. The new sysfs path would look like this:
    
    ../../devices/platform/ffe000000.soc/ffe400000.fman/ffe4e6000.ethernet/net/eth0
    
    And this is exactly what SET_NETDEV_DEV does. It sets the parent of the
    net_device. The new parent has an of_node associated with it, and
    of_dev_node_match already checks for the of_node of the device or of its
    parent.
    
    Fixes: a1a50c8e4c24 ("fsl/man: Inherit parent device and of_node")
    Fixes: c6e26ea8c893 ("dpaa_eth: change device used")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0f87995ee8bdb8c4e9d5d3f2db61780859e24c3
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 19 18:24:43 2020 -0700

    ax25: fix setsockopt(SO_BINDTODEVICE)
    
    [ Upstream commit 687775cec056b38a4c8f3291e0dd7a9145f7b667 ]
    
    syzbot was able to trigger this trace [1], probably by using
    a zero optlen.
    
    While we are at it, cap optlen to IFNAMSIZ - 1 instead of IFNAMSIZ.
    
    [1]
    BUG: KMSAN: uninit-value in strnlen+0xf9/0x170 lib/string.c:569
    CPU: 0 PID: 8807 Comm: syz-executor483 Not tainted 5.7.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:121
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     strnlen+0xf9/0x170 lib/string.c:569
     dev_name_hash net/core/dev.c:207 [inline]
     netdev_name_node_lookup net/core/dev.c:277 [inline]
     __dev_get_by_name+0x75/0x2b0 net/core/dev.c:778
     ax25_setsockopt+0xfa3/0x1170 net/ax25/af_ax25.c:654
     __compat_sys_setsockopt+0x4ed/0x910 net/compat.c:403
     __do_compat_sys_setsockopt net/compat.c:413 [inline]
     __se_compat_sys_setsockopt+0xdd/0x100 net/compat.c:410
     __ia32_compat_sys_setsockopt+0x62/0x80 net/compat.c:410
     do_syscall_32_irqs_on arch/x86/entry/common.c:339 [inline]
     do_fast_syscall_32+0x3bf/0x6d0 arch/x86/entry/common.c:398
     entry_SYSENTER_compat+0x68/0x77 arch/x86/entry/entry_64_compat.S:139
    RIP: 0023:0xf7f57dd9
    Code: 90 e8 0b 00 00 00 f3 90 0f ae e8 eb f9 8d 74 26 00 89 3c 24 c3 90 90 90 90 90 90 90 90 90 90 90 90 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90
    RSP: 002b:00000000ffae8c1c EFLAGS: 00000217 ORIG_RAX: 000000000000016e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000000101
    RDX: 0000000000000019 RSI: 0000000020000000 RDI: 0000000000000004
    RBP: 0000000000000012 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Local variable ----devname@ax25_setsockopt created at:
     ax25_setsockopt+0xe6/0x1170 net/ax25/af_ax25.c:536
     ax25_setsockopt+0xe6/0x1170 net/ax25/af_ax25.c:536
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
