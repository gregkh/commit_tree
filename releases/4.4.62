commit a80c068fbf43e22f099c0587b9e1a2337378a505
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Apr 18 07:15:37 2017 +0200

    Linux 4.4.62

commit 7d170f270a95639192cfd53dcb15e6d8530b4577
Author: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
Date:   Thu Dec 8 16:40:03 2016 -0600

    ibmveth: set correct gso_size and gso_type
    
    commit 7b5967389f5a8dfb9d32843830f5e2717e20995d upstream.
    
    This patch is based on an earlier one submitted
    by Jon Maxwell with the following commit message:
    
    "We recently encountered a bug where a few customers using ibmveth on the
    same LPAR hit an issue where a TCP session hung when large receive was
    enabled. Closer analysis revealed that the session was stuck because the
    one side was advertising a zero window repeatedly.
    
    We narrowed this down to the fact the ibmveth driver did not set gso_size
    which is translated by TCP into the MSS later up the stack. The MSS is
    used to calculate the TCP window size and as that was abnormally large,
    it was calculating a zero window, even although the sockets receive buffer
    was completely empty."
    
    We rely on the Virtual I/O Server partition in a pseries
    environment to provide the MSS through the TCP header checksum
    field. The stipulation is that users should not disable checksum
    offloading if rx packet aggregation is enabled through VIOS.
    
    Some firmware offerings provide the MSS in the RX buffer.
    This is signalled by a bit in the RX queue descriptor.
    
    Reviewed-by: Brian King <brking@linux.vnet.ibm.com>
    Reviewed-by: Pradeep Satyanarayana <pradeeps@linux.vnet.ibm.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Jonathan Maxwell <jmaxwell37@gmail.com>
    Reviewed-by: David Dai <zdai@us.ibm.com>
    Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac0cbfbb1e4b84d426f210849492afadbc4b6bb9
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Mon Jan 16 18:31:38 2017 +0200

    net/mlx4_core: Fix when to save some qp context flags for dynamic VST to VGT transitions
    
    commit 7c3945bc2073554bb2ecf983e073dee686679c53 upstream.
    
    Save the qp context flags byte containing the flag disabling vlan stripping
    in the RESET to INIT qp transition, rather than in the INIT to RTR
    transition. Per the firmware spec, the flags in this byte are active
    in the RESET to INIT transition.
    
    As a result of saving the flags in the incorrect qp transition, when
    switching dynamically from VGT to VST and back to VGT, the vlan
    remained stripped (as is required for VST) and did not return to
    not-stripped (as is required for VGT).
    
    Fixes: f0f829bf42cd ("net/mlx4_core: Add immediate activate for VGT->VST->VGT")
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 710f793a15de0213d4e15f123f327b2075a0c62b
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Mon Jan 16 18:31:37 2017 +0200

    net/mlx4_core: Fix racy CQ (Completion Queue) free
    
    commit 291c566a28910614ce42d0ffe82196eddd6346f4 upstream.
    
    In function mlx4_cq_completion() and mlx4_cq_event(), the
    radix_tree_lookup requires a rcu_read_lock.
    This is mandatory: if another core frees the CQ, it could
    run the radix_tree_node_rcu_free() call_rcu() callback while
    its being used by the radix tree lookup function.
    
    Additionally, in function mlx4_cq_event(), since we are adding
    the rcu lock around the radix-tree lookup, we no longer need to take
    the spinlock. Also, the synchronize_irq() call for the async event
    eliminates the need for incrementing the cq reference count in
    mlx4_cq_event().
    
    Other changes:
    1. In function mlx4_cq_free(), replace spin_lock_irq with spin_lock:
       we no longer take this spinlock in the interrupt context.
       The spinlock here, therefore, simply protects against different
       threads simultaneously invoking mlx4_cq_free() for different cq's.
    
    2. In function mlx4_cq_free(), we move the radix tree delete to before
       the synchronize_irq() calls. This guarantees that we will not
       access this cq during any subsequent interrupts, and therefore can
       safely free the CQ after the synchronize_irq calls. The rcu_read_lock
       in the interrupt handlers only needs to protect against corrupting the
       radix tree; the interrupt handlers may access the cq outside the
       rcu_read_lock due to the synchronize_irq calls which protect against
       premature freeing of the cq.
    
    3. In function mlx4_cq_event(), we change the mlx_warn message to mlx4_dbg.
    
    4. We leave the cq reference count mechanism in place, because it is
       still needed for the cq completion tasklet mechanism.
    
    Fixes: 6d90aa5cf17b ("net/mlx4_core: Make sure there are no pending async events when freeing CQ")
    Fixes: 225c7b1feef1 ("IB/mlx4: Add a driver Mellanox ConnectX InfiniBand adapters")
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1e6b1149e497dc61ceff290c1d3db259ebf7938
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Thu Dec 29 18:37:10 2016 +0200

    net/mlx4_en: Fix bad WQE issue
    
    commit 6496bbf0ec481966ef9ffe5b6660d8d1b55c60cc upstream.
    
    Single send WQE in RX buffer should be stamped with software
    ownership in order to prevent the flow of QP in error in FW
    once UPDATE_QP is called.
    
    Fixes: 9f519f68cfff ('mlx4_en: Not using Shared Receive Queues')
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a007f74b826836074de8bfcb1e197cada993718
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Dec 1 13:49:59 2016 -0800

    usb: hub: Wait for connection to be reestablished after port reset
    
    commit 22547c4cc4fe20698a6a85a55b8788859134b8e4 upstream.
    
    On a system with a defective USB device connected to an USB hub,
    an endless sequence of port connect events was observed. The sequence
    of events as observed is as follows:
    
    - Port reports connected event (port status=USB_PORT_STAT_CONNECTION).
    - Event handler debounces port and resets it by calling hub_port_reset().
    - hub_port_reset() calls hub_port_wait_reset() to wait for the reset
      to complete.
    - The reset completes, but USB_PORT_STAT_CONNECTION is not immediately
      set in the port status register.
    - hub_port_wait_reset() returns -ENOTCONN.
    - Port initialization sequence is aborted.
    - A few milliseconds later, the port again reports a connected event,
      and the sequence repeats.
    
    This continues either forever or, randomly, stops if the connection
    is already re-established when the port status is read. It results in
    a high rate of udev events. This in turn destabilizes userspace since
    the above sequence holds the device mutex pretty much continuously
    and prevents userspace from actually reading the device status.
    
    To prevent the problem from happening, let's wait for the connection
    to be re-established after a port reset. If the device was actually
    disconnected, the code will still return an error, but it will do so
    only after the long reset timeout.
    
    Cc: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4522e36edaa9ec0cada0daa5c2628db762dd3d9
Author: Gabriel Krisman Bertazi <krisman@linux.vnet.ibm.com>
Date:   Tue Dec 6 13:31:44 2016 -0200

    blk-mq: Avoid memory reclaim when remapping queues
    
    commit 36e1f3d107867b25c616c2fd294f5a1c9d4e5d09 upstream.
    
    While stressing memory and IO at the same time we changed SMT settings,
    we were able to consistently trigger deadlocks in the mm system, which
    froze the entire machine.
    
    I think that under memory stress conditions, the large allocations
    performed by blk_mq_init_rq_map may trigger a reclaim, which stalls
    waiting on the block layer remmaping completion, thus deadlocking the
    system.  The trace below was collected after the machine stalled,
    waiting for the hotplug event completion.
    
    The simplest fix for this is to make allocations in this path
    non-reclaimable, with GFP_NOIO.  With this patch, We couldn't hit the
    issue anymore.
    
    This should apply on top of Jens's for-next branch cleanly.
    
    Changes since v1:
      - Use GFP_NOIO instead of GFP_NOWAIT.
    
     Call Trace:
    [c000000f0160aaf0] [c000000f0160ab50] 0xc000000f0160ab50 (unreliable)
    [c000000f0160acc0] [c000000000016624] __switch_to+0x2e4/0x430
    [c000000f0160ad20] [c000000000b1a880] __schedule+0x310/0x9b0
    [c000000f0160ae00] [c000000000b1af68] schedule+0x48/0xc0
    [c000000f0160ae30] [c000000000b1b4b0] schedule_preempt_disabled+0x20/0x30
    [c000000f0160ae50] [c000000000b1d4fc] __mutex_lock_slowpath+0xec/0x1f0
    [c000000f0160aed0] [c000000000b1d678] mutex_lock+0x78/0xa0
    [c000000f0160af00] [d000000019413cac] xfs_reclaim_inodes_ag+0x33c/0x380 [xfs]
    [c000000f0160b0b0] [d000000019415164] xfs_reclaim_inodes_nr+0x54/0x70 [xfs]
    [c000000f0160b0f0] [d0000000194297f8] xfs_fs_free_cached_objects+0x38/0x60 [xfs]
    [c000000f0160b120] [c0000000003172c8] super_cache_scan+0x1f8/0x210
    [c000000f0160b190] [c00000000026301c] shrink_slab.part.13+0x21c/0x4c0
    [c000000f0160b2d0] [c000000000268088] shrink_zone+0x2d8/0x3c0
    [c000000f0160b380] [c00000000026834c] do_try_to_free_pages+0x1dc/0x520
    [c000000f0160b450] [c00000000026876c] try_to_free_pages+0xdc/0x250
    [c000000f0160b4e0] [c000000000251978] __alloc_pages_nodemask+0x868/0x10d0
    [c000000f0160b6f0] [c000000000567030] blk_mq_init_rq_map+0x160/0x380
    [c000000f0160b7a0] [c00000000056758c] blk_mq_map_swqueue+0x33c/0x360
    [c000000f0160b820] [c000000000567904] blk_mq_queue_reinit+0x64/0xb0
    [c000000f0160b850] [c00000000056a16c] blk_mq_queue_reinit_notify+0x19c/0x250
    [c000000f0160b8a0] [c0000000000f5d38] notifier_call_chain+0x98/0x100
    [c000000f0160b8f0] [c0000000000c5fb0] __cpu_notify+0x70/0xe0
    [c000000f0160b930] [c0000000000c63c4] notify_prepare+0x44/0xb0
    [c000000f0160b9b0] [c0000000000c52f4] cpuhp_invoke_callback+0x84/0x250
    [c000000f0160ba10] [c0000000000c570c] cpuhp_up_callbacks+0x5c/0x120
    [c000000f0160ba60] [c0000000000c7cb8] _cpu_up+0xf8/0x1d0
    [c000000f0160bac0] [c0000000000c7eb0] do_cpu_up+0x120/0x150
    [c000000f0160bb40] [c0000000006fe024] cpu_subsys_online+0x64/0xe0
    [c000000f0160bb90] [c0000000006f5124] device_online+0xb4/0x120
    [c000000f0160bbd0] [c0000000006f5244] online_store+0xb4/0xc0
    [c000000f0160bc20] [c0000000006f0a68] dev_attr_store+0x68/0xa0
    [c000000f0160bc60] [c0000000003ccc30] sysfs_kf_write+0x80/0xb0
    [c000000f0160bca0] [c0000000003cbabc] kernfs_fop_write+0x17c/0x250
    [c000000f0160bcf0] [c00000000030fe6c] __vfs_write+0x6c/0x1e0
    [c000000f0160bd90] [c000000000311490] vfs_write+0xd0/0x270
    [c000000f0160bde0] [c0000000003131fc] SyS_write+0x6c/0x110
    [c000000f0160be30] [c000000000009204] system_call+0x38/0xec
    
    Signed-off-by: Gabriel Krisman Bertazi <krisman@linux.vnet.ibm.com>
    Cc: Brian King <brking@linux.vnet.ibm.com>
    Cc: Douglas Miller <dougmill@linux.vnet.ibm.com>
    Cc: linux-block@vger.kernel.org
    Cc: linux-scsi@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d35f8fa0b93e61dd95b8f86928a783c4d8a32d3e
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Wed Mar 29 16:11:20 2017 +0200

    net/packet: fix overflow in check for priv area size
    
    commit 2b6867c2ce76c596676bec7d2d525af525fdc6e2 upstream.
    
    Subtracting tp_sizeof_priv from tp_block_size and casting to int
    to check whether one is less then the other doesn't always work
    (both of them are unsigned ints).
    
    Compare them as is instead.
    
    Also cast tp_sizeof_priv to u64 before using BLK_PLUS_PRIV, as
    it can overflow inside BLK_PLUS_PRIV otherwise.
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd8bae310684b557c0b30ae9105420956a41494f
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Wed Apr 5 11:41:03 2017 +0300

    crypto: caam - fix RNG deinstantiation error checking
    
    commit 40c98cb57cdbc377456116ad4582c89e329721b0 upstream.
    
    RNG instantiation was previously fixed by
    commit 62743a4145bb9 ("crypto: caam - fix RNG init descriptor ret. code checking")
    while deinstantiation was not addressed.
    
    Since the descriptors used are similar, in the sense that they both end
    with a JUMP HALT command, checking for errors should be similar too,
    i.e. status code 7000_0000h should be considered successful.
    
    Fixes: 1005bccd7a4a6 ("crypto: caam - enable instantiation of all RNG4 state handles")
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba7681e4eee6739e4f23a1ba21fb7737fe4ce4f4
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Wed Jan 25 17:00:25 2017 +0000

    MIPS: IRQ Stack: Fix erroneous jal to plat_irq_dispatch
    
    commit c25f8064c1d5731a2ce5664def890140dcdd3e5c upstream.
    
    Commit dda45f701c9d ("MIPS: Switch to the irq_stack in interrupts")
    changed both the normal and vectored interrupt handlers. Unfortunately
    the vectored version, "except_vec_vi_handler", was incorrectly modified
    to unconditionally jal to plat_irq_dispatch, rather than doing a jalr to
    the vectored handler that has been set up. This is ok for many platforms
    which set the vectored handler to plat_irq_dispatch anyway, but will
    cause problems with platforms that use other handlers.
    
    Fixes: dda45f701c9d ("MIPS: Switch to the irq_stack in interrupts")
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/15110/
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f017e58da4aba293e4a6ab62ca5d4801f79cc929
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Dec 19 14:21:00 2016 +0000

    MIPS: Select HAVE_IRQ_EXIT_ON_IRQ_STACK
    
    commit 3cc3434fd6307d06b53b98ce83e76bf9807689b9 upstream.
    
    Since do_IRQ is now invoked on a separate IRQ stack, we select
    HAVE_IRQ_EXIT_ON_IRQ_STACK so that softirq's may be invoked directly
    from irq_exit(), rather than requiring do_softirq_own_stack.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Acked-by: Jason A. Donenfeld <jason@zx2c4.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/14744/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b39b263816687fd71b10c31b3eb916defe8176f0
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Dec 19 14:20:59 2016 +0000

    MIPS: Switch to the irq_stack in interrupts
    
    commit dda45f701c9d7ad4ac0bb446e3a96f6df9a468d9 upstream.
    
    When enterring interrupt context via handle_int or except_vec_vi, switch
    to the irq_stack of the current CPU if it is not already in use.
    
    The current stack pointer is masked with the thread size and compared to
    the base or the irq stack. If it does not match then the stack pointer
    is set to the top of that stack, otherwise this is a nested irq being
    handled on the irq stack so the stack pointer should be left as it was.
    
    The in-use stack pointer is placed in the callee saved register s1. It
    will be saved to the stack when plat_irq_dispatch is invoked and can be
    restored once control returns here.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Acked-by: Jason A. Donenfeld <jason@zx2c4.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/14743/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93a82f8dbef8ee421fac80a1bd0564124a8ac41c
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Dec 19 14:20:58 2016 +0000

    MIPS: Only change $28 to thread_info if coming from user mode
    
    commit 510d86362a27577f5ee23f46cfb354ad49731e61 upstream.
    
    The SAVE_SOME macro is used to save the execution context on all
    exceptions.
    If an exception occurs while executing user code, the stack is switched
    to the kernel's stack for the current task, and register $28 is switched
    to point to the current_thread_info, which is at the bottom of the stack
    region.
    If the exception occurs while executing kernel code, the stack is left,
    and this change ensures that register $28 is not updated. This is the
    correct behaviour when the kernel can be executing on the separate irq
    stack, because the thread_info will not be at the base of it.
    
    With this change, register $28 is only switched to it's kernel
    conventional usage of the currrent thread info pointer at the point at
    which execution enters kernel space. Doing it on every exception was
    redundant, but OK without an IRQ stack, but will be erroneous once that
    is introduced.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Acked-by: Jason A. Donenfeld <jason@zx2c4.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/14742/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3363653512853754fcc7592d2c68c4769a4825c9
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Dec 19 14:20:57 2016 +0000

    MIPS: Stack unwinding while on IRQ stack
    
    commit d42d8d106b0275b027c1e8992c42aecf933436ea upstream.
    
    Within unwind stack, check if the stack pointer being unwound is within
    the CPU's irq_stack and if so use that page rather than the task's stack
    page.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Acked-by: Jason A. Donenfeld <jason@zx2c4.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Adam Buchbinder <adam.buchbinder@gmail.com>
    Cc: Maciej W. Rozycki <macro@imgtec.com>
    Cc: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/14741/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8b8b5528ea5a394074a91e37571bcca081b27e1
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Mon Dec 19 14:20:56 2016 +0000

    MIPS: Introduce irq_stack
    
    commit fe8bd18ffea5327344d4ec2bf11f47951212abd0 upstream.
    
    Allocate a per-cpu irq stack for use within interrupt handlers.
    
    Also add a utility function on_irq_stack to determine if a given stack
    pointer is within the irq stack for that cpu.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Acked-by: Jason A. Donenfeld <jason@zx2c4.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Aaron Tomlin <atomlin@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/14740/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a527d80836e9ad0dc3dceee7de72f16c817fb8b
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Sun Nov 20 16:09:30 2016 +0100

    mtd: bcm47xxpart: fix parsing first block after aligned TRX
    
    commit bd5d21310133921021d78995ad6346f908483124 upstream.
    
    After parsing TRX we should skip to the first block placed behind it.
    Our code was working only with TRX with length not aligned to the
    blocksize. In other cases (length aligned) it was missing the block
    places right after TRX.
    
    This fixes calculation and simplifies the comment.
    
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 297f55bcb62ad0b6b290b01177d9395305d57020
Author: Janusz Dziedzic <januszx.dziedzic@intel.com>
Date:   Mon Mar 13 14:11:32 2017 +0200

    usb: dwc3: gadget: delay unmap of bounced requests
    
    commit de288e36fe33f7e06fa272bc8e2f85aa386d99aa upstream.
    
    In the case of bounced ep0 requests, we must delay DMA operation until
    after ->complete() otherwise we might overwrite contents of req->buf.
    
    This caused problems with RNDIS gadget.
    
    Signed-off-by: Janusz Dziedzic <januszx.dziedzic@intel.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cfaf0ae1f566ddfcda661bd81b625a71b16459a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Mar 13 17:06:17 2017 +0000

    drm/i915: Stop using RP_DOWN_EI on Baytrail
    
    commit 8f68d591d4765b2e1ce9d916ac7bc5583285c4ad upstream.
    
    On Baytrail, we manually calculate busyness over the evaluation interval
    to avoid issues with miscaluations with RC6 enabled. However, it turns
    out that the DOWN_EI interrupt generator is completely bust - it
    operates in two modes, continuous or never. Neither of which are
    conducive to good behaviour. Stop unmask the DOWN_EI interrupt and just
    compute everything from the UP_EI which does seem to correspond to the
    desired interval.
    
    v2: Fixup gen6_rps_pm_mask() as well
    v3: Inline vlv_c0_above() to combine the now identical elapsed
    calculation for up/down and simplify the threshold testing
    
    Fixes: 43cf3bf084ba ("drm/i915: Improved w/a for rps on Baytrail")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170309211232.28878-1-chris@chris-wilson.co.uk
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170313170617.31564-1-chris@chris-wilson.co.uk
    (cherry picked from commit e0e8c7cb6eb68e9256de2d8cbeb481d3701c05ac)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb0a2cba62d58caf6668f630858acc15ed40ee23
Author: Mika Kuoppala <mika.kuoppala@linux.intel.com>
Date:   Wed Feb 15 15:52:59 2017 +0200

    drm/i915: Avoid tweaking evaluation thresholds on Baytrail v3
    
    commit 34dc8993eef63681b062871413a9484008a2a78f upstream.
    
    Certain Baytrails, namely the 4 cpu core variants, have been
    plaqued by spurious system hangs, mostly occurring with light loads.
    
    Multiple bisects by various people point to a commit which changes the
    reclocking strategy for Baytrail to follow its bigger brethen:
    commit 8fb55197e64d ("drm/i915: Agressive downclocking on Baytrail")
    
    There is also a review comment attached to this commit from Deepak S
    on avoiding punit access on Cherryview and thus it was excluded on
    common reclocking path. By taking the same approach and omitting
    the punit access by not tweaking the thresholds when the hardware
    has been asked to move into different frequency, considerable gains
    in stability have been observed.
    
    With J1900 box, light render/video load would end up in system hang
    in usually less than 12 hours. With this patch applied, the cumulative
    uptime has now been 34 days without issues. To provoke system hang,
    light loads on both render and bsd engines in parallel have been used:
    glxgears >/dev/null 2>/dev/null &
    mpv --vo=vaapi --hwdec=vaapi --loop=inf vid.mp4
    
    So far, author has not witnessed system hang with above load
    and this patch applied. Reports from the tenacious people at
    kernel bugzilla are also promising.
    
    Considering that the punit access frequency with this patch is
    considerably less, there is a possibility that this will push
    the, still unknown, root cause past the triggering point on most loads.
    
    But as we now can reliably reproduce the hang independently,
    we can reduce the pain that users are having and use a
    static thresholds until a root cause is found.
    
    v3: don't break debugfs and simplification (Chris Wilson)
    
    References: https://bugzilla.kernel.org/show_bug.cgi?id=109051
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: fritsch@xbmc.org
    Cc: miku@iki.fi
    Cc: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    CC: Michal Feix <michal@feix.cz>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Deepak S <deepak.s@linux.intel.com>
    Cc: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1487166779-26945-1-git-send-email-mika.kuoppala@intel.com
    (cherry picked from commit 6067a27d1f0184596d51decbac1c1fdc4acb012f)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
