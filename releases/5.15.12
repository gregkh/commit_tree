commit 25960cafa06e6fcd830e6c792e6a7de68c1e25ed
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 29 12:29:03 2021 +0100

    Linux 5.15.12
    
    Link: https://lore.kernel.org/r/20211227151331.502501367@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53ccdc73eedaf0e922c45b569b797d2796fbaafa
Author: Rémi Denis-Courmont <remi@remlab.net>
Date:   Sun Dec 19 19:03:39 2021 +0200

    phonet/pep: refuse to enable an unbound pipe
    
    commit 75a2f31520095600f650597c0ac41f48b5ba0068 upstream.
    
    This ioctl() implicitly assumed that the socket was already bound to
    a valid local socket name, i.e. Phonet object. If the socket was not
    bound, two separate problems would occur:
    
    1) We'd send an pipe enablement request with an invalid source object.
    2) Later socket calls could BUG on the socket unexpectedly being
       connected yet not bound to a valid object.
    
    Reported-by: syzbot+2dc91e7fc3dea88b1e8a@syzkaller.appspotmail.com
    Signed-off-by: Rémi Denis-Courmont <remi@remlab.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cb5ae77799e8ed6ec3fec0b6b4cd07f01650cc5
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Thu Dec 16 13:25:32 2021 -0500

    tun: avoid double free in tun_free_netdev
    
    commit 158b515f703e75e7d68289bf4d98c664e1d632df upstream.
    
    Avoid double free in tun_free_netdev() by moving the
    dev->tstats and tun->security allocs to a new ndo_init routine
    (tun_net_init()) that will be called by register_netdevice().
    ndo_init is paired with the desctructor (tun_free_netdev()),
    so if there's an error in register_netdevice() the destructor
    will handle the frees.
    
    BUG: KASAN: double-free or invalid-free in selinux_tun_dev_free_security+0x1a/0x20 security/selinux/hooks.c:5605
    
    CPU: 0 PID: 25750 Comm: syz-executor416 Not tainted 5.16.0-rc2-syzk #1
    Hardware name: Red Hat KVM, BIOS
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:106
    print_address_description.constprop.9+0x28/0x160 mm/kasan/report.c:247
    kasan_report_invalid_free+0x55/0x80 mm/kasan/report.c:372
    ____kasan_slab_free mm/kasan/common.c:346 [inline]
    __kasan_slab_free+0x107/0x120 mm/kasan/common.c:374
    kasan_slab_free include/linux/kasan.h:235 [inline]
    slab_free_hook mm/slub.c:1723 [inline]
    slab_free_freelist_hook mm/slub.c:1749 [inline]
    slab_free mm/slub.c:3513 [inline]
    kfree+0xac/0x2d0 mm/slub.c:4561
    selinux_tun_dev_free_security+0x1a/0x20 security/selinux/hooks.c:5605
    security_tun_dev_free_security+0x4f/0x90 security/security.c:2342
    tun_free_netdev+0xe6/0x150 drivers/net/tun.c:2215
    netdev_run_todo+0x4df/0x840 net/core/dev.c:10627
    rtnl_unlock+0x13/0x20 net/core/rtnetlink.c:112
    __tun_chr_ioctl+0x80c/0x2870 drivers/net/tun.c:3302
    tun_chr_ioctl+0x2f/0x40 drivers/net/tun.c:3311
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:874 [inline]
    __se_sys_ioctl fs/ioctl.c:860 [inline]
    __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:860
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/1639679132-19884-1-git-send-email-george.kennedy@oracle.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03d00f7f1815ec00dab5035851b3de83afd054a8
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 17 10:13:56 2021 +0800

    hamradio: improve the incomplete fix to avoid NPD
    
    commit b2f37aead1b82a770c48b5d583f35ec22aabb61e upstream.
    
    The previous commit 3e0588c291d6 ("hamradio: defer ax25 kfree after
    unregister_netdev") reorder the kfree operations and unregister_netdev
    operation to prevent UAF.
    
    This commit improves the previous one by also deferring the nullify of
    the ax->tty pointer. Otherwise, a NULL pointer dereference bug occurs.
    Partial of the stack trace is shown below.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000538
    RIP: 0010:ax_xmit+0x1f9/0x400
    ...
    Call Trace:
     dev_hard_start_xmit+0xec/0x320
     sch_direct_xmit+0xea/0x240
     __qdisc_run+0x166/0x5c0
     __dev_queue_xmit+0x2c7/0xaf0
     ax25_std_establish_data_link+0x59/0x60
     ax25_connect+0x3a0/0x500
     ? security_socket_connect+0x2b/0x40
     __sys_connect+0x96/0xc0
     ? __hrtimer_init+0xc0/0xc0
     ? common_nsleep+0x2e/0x50
     ? switch_fpu_return+0x139/0x1a0
     __x64_sys_connect+0x11/0x20
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The crash point is shown as below
    
    static void ax_encaps(...) {
      ...
      set_bit(TTY_DO_WRITE_WAKEUP, &ax->tty->flags); // ax->tty = NULL!
      ...
    }
    
    By placing the nullify action after the unregister_netdev, the ax->tty
    pointer won't be assigned as NULL net_device framework layer is well
    synchronized.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb6c99aedd2c843056a598a8907a6128cb07603b
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 8 18:37:21 2021 +0800

    hamradio: defer ax25 kfree after unregister_netdev
    
    commit 3e0588c291d6ce225f2b891753ca41d45ba42469 upstream.
    
    There is a possible race condition (use-after-free) like below
    
     (USE)                       |  (FREE)
    ax25_sendmsg                 |
     ax25_queue_xmit             |
      dev_queue_xmit             |
       __dev_queue_xmit          |
        __dev_xmit_skb           |
         sch_direct_xmit         | ...
          xmit_one               |
           netdev_start_xmit     | tty_ldisc_kill
            __netdev_start_xmit  |  mkiss_close
             ax_xmit             |   kfree
              ax_encaps          |
                                 |
    
    Even though there are two synchronization primitives before the kfree:
    1. wait_for_completion(&ax->dead). This can prevent the race with
    routines from mkiss_ioctl. However, it cannot stop the routine coming
    from upper layer, i.e., the ax25_sendmsg.
    
    2. netif_stop_queue(ax->dev). It seems that this line of code aims to
    halt the transmit queue but it fails to stop the routine that already
    being xmit.
    
    This patch reorder the kfree after the unregister_netdev to avoid the
    possible UAF as the unregister_netdev() is well synchronized and won't
    return if there is a running routine.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8e4a64cdc977cda02d7c95cd01004fd33978ab7
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 17 10:29:41 2021 +0800

    ax25: NPD bug when detaching AX25 device
    
    commit 1ade48d0c27d5da1ccf4b583d8c5fc8b534a3ac8 upstream.
    
    The existing cleanup routine implementation is not well synchronized
    with the syscall routine. When a device is detaching, below race could
    occur.
    
    static int ax25_sendmsg(...) {
      ...
      lock_sock()
      ax25 = sk_to_ax25(sk);
      if (ax25->ax25_dev == NULL) // CHECK
      ...
      ax25_queue_xmit(skb, ax25->ax25_dev->dev); // USE
      ...
    }
    
    static void ax25_kill_by_device(...) {
      ...
      if (s->ax25_dev == ax25_dev) {
        s->ax25_dev = NULL;
        ...
    }
    
    Other syscall functions like ax25_getsockopt, ax25_getname,
    ax25_info_show also suffer from similar races. To fix them, this patch
    introduce lock_sock() into ax25_kill_by_device in order to guarantee
    that the nullify action in cleanup routine cannot proceed when another
    socket request is pending.
    
    Signed-off-by: Hanjie Wu <nagi@zju.edu.cn>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f547b0f8f3ceb1eb544b7df1df0196c0f834580c
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Thu Dec 23 17:27:02 2021 +0800

    r8152: sync ocp base
    
    commit b24edca309535c2d9af86aab95d64065f6ef1d26 upstream.
    
    There are some chances that the actual base of hardware is different
    from the value recorded by driver, so we have to reset the variable
    of ocp_base to sync it.
    
    Set ocp_base to -1. Then, it would be updated and the new base would be
    set to the hardware next time.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cc8813c496627bad3cef02f2cdfa1ba43a3a1e9
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Dec 3 13:42:22 2021 -0800

    hwmon: (lm90) Do not report 'busy' status bit as alarm
    
    commit cdc5287acad9ede121924a9c9313544b80d15842 upstream.
    
    Bit 7 of the status register indicates that the chip is busy
    doing a conversion. It does not indicate an alarm status.
    Stop reporting it as alarm status bit.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 722fc45be049e8ac1712fcc8a281265db8e9e736
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Nov 26 22:43:39 2021 -0800

    hwmom: (lm90) Fix citical alarm status for MAX6680/MAX6681
    
    commit da7dc0568491104c7acb632e9d41ddce9aaabbb1 upstream.
    
    Tests with a real chip and a closer look into the datasheet reveals
    that the local and remote critical alarm status bits are swapped for
    MAX6680/MAX6681.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb563baa3eb8e7a15f2cff3c2695e2cca0493e69
Author: Guodong Liu <guodong.liu@mediatek.corp-partner.google.com>
Date:   Wed Nov 10 15:19:00 2021 +0800

    pinctrl: mediatek: fix global-out-of-bounds issue
    
    commit 2d5446da5acecf9c67db1c9d55ae2c3e5de01f8d upstream.
    
    When eint virtual eint number is greater than gpio number,
    it maybe produce 'desc[eint_n]' size globle-out-of-bounds issue.
    
    Signed-off-by: Guodong Liu <guodong.liu@mediatek.corp-partner.google.com>
    Signed-off-by: Zhiyong Tao <zhiyong.tao@mediatek.com>
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Link: https://lore.kernel.org/r/20211110071900.4490-2-zhiyong.tao@mediatek.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa50406f36a163676922b8edcbb2dac935e328ed
Author: Derek Fang <derek.fang@realtek.com>
Date:   Tue Dec 14 18:50:33 2021 +0800

    ASoC: rt5682: fix the wrong jack type detected
    
    commit 8deb34a90f06374fd26f722c2a79e15160f66be7 upstream.
    
    Some powers were changed during the jack insert detection
    and clk's enable/disable in CCF.
    If in parallel, the influence has a chance to detect
    the wrong jack type, so add a lock.
    
    Signed-off-by: Derek Fang <derek.fang@realtek.com>
    Link: https://lore.kernel.org/r/20211214105033.471-1-derek.fang@realtek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46b3fe1eb2b73d5658d919c6a325e580230280d2
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Dec 3 19:15:41 2021 +0200

    ASoC: SOF: Intel: pci-tgl: add ADL-N support
    
    commit cd57eb3c403cb864e5558874ecd57dd954a5a7f7 upstream.
    
    Add PCI DID for Intel AlderLake-N.
    
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20211203171542.1021399-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0fa8c252956df9d23fca001dd6a493d8353928d
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Dec 3 19:15:42 2021 +0200

    ASoC: SOF: Intel: pci-tgl: add new ADL-P variant
    
    commit de7dd9092cd38384f774d345cccafe81b4b866b0 upstream.
    
    Add a PCI DID for a variant of Intel AlderLake-P.
    
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20211203171542.1021399-2-kai.vehmanen@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9ad0ae8bfa06e6b86a6cee863f5d031622c9052
Author: Martin Povišer <povik@protonmail.com>
Date:   Mon Dec 6 22:45:43 2021 +0000

    ASoC: tas2770: Fix setting of high sample rates
    
    commit 80d5be1a057e05f01d66e986cfd34d71845e5190 upstream.
    
    Although the codec advertises support for 176.4 and 192 ksps, without
    this fix setting those sample rates fails with EINVAL at hw_params time.
    
    Signed-off-by: Martin Povišer <povik@protonmail.com>
    Link: https://lore.kernel.org/r/20211206224529.74656-1-povik@protonmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc71a723f3d88c55460144c204a1c67361c323c0
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Dec 6 23:29:27 2021 -0800

    Input: goodix - add id->model mapping for the "9111" model
    
    commit 81e818869be522bc8fa6f7df1b92d7e76537926c upstream.
    
    Add d->model mapping for the "9111" model, this fixes uses using
    a wrong config_len of 240 bytes while the "9111" model uses
    only 186 bytes of config.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20211206164747.197309-2-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efaa327b41462f7898f6a0577f9f94af28dbbaa3
Author: Johnny Chuang <johnny.chuang.emc@gmail.com>
Date:   Mon Dec 20 00:28:45 2021 -0800

    Input: elants_i2c - do not check Remark ID on eKTH3900/eKTH5312
    
    commit 4ebfee2bbc1a9c343dd50565ba5ae249fac32267 upstream.
    
    The eKTH3900/eKTH5312 series do not support the firmware update rules of
    Remark ID. Exclude these two series from checking it when updating the
    firmware in touch controllers.
    
    Signed-off-by: Johnny Chuang <johnny.chuang.emc@gmail.com>
    Link: https://lore.kernel.org/r/1639619603-20616-1-git-send-email-johnny.chuang.emc@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70750056620b241dee3bf8f2e0f56bdf63bb4aca
Author: Jeff LaBundy <jeff@labundy.com>
Date:   Sun Nov 28 23:41:42 2021 -0800

    Input: iqs626a - prohibit inlining of channel parsing functions
    
    commit e1f5e848209a1b51ccae50721b27684c6f9d978f upstream.
    
    Some automated builds report a stack frame size in excess of 2 kB for
    iqs626_probe(); the culprit appears to be the call to iqs626_parse_prop().
    
    To solve this problem, specify noinline_for_stack for all of the
    iqs626_parse_*() helper functions which are called inside a for loop
    within iqs626_parse_prop().
    
    As a result, a build with '-Wframe-larger-than' as low as 512 is free of
    any such warnings.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Jeff LaBundy <jeff@labundy.com>
    Link: https://lore.kernel.org/r/20211129004104.453930-1-jeff@labundy.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f06c8293d27f6337f907042c602c9c953988c48
Author: Baokun Li <libaokun1@huawei.com>
Date:   Fri Dec 24 21:12:32 2021 -0800

    kfence: fix memory leak when cat kfence objects
    
    commit 0129ab1f268b6cf88825eae819b9b84aa0a85634 upstream.
    
    Hulk robot reported a kmemleak problem:
    
        unreferenced object 0xffff93d1d8cc02e8 (size 248):
          comm "cat", pid 23327, jiffies 4624670141 (age 495992.217s)
          hex dump (first 32 bytes):
            00 40 85 19 d4 93 ff ff 00 10 00 00 00 00 00 00  .@..............
            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
          backtrace:
             seq_open+0x2a/0x80
             full_proxy_open+0x167/0x1e0
             do_dentry_open+0x1e1/0x3a0
             path_openat+0x961/0xa20
             do_filp_open+0xae/0x120
             do_sys_openat2+0x216/0x2f0
             do_sys_open+0x57/0x80
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
        unreferenced object 0xffff93d419854000 (size 4096):
          comm "cat", pid 23327, jiffies 4624670141 (age 495992.217s)
          hex dump (first 32 bytes):
            6b 66 65 6e 63 65 2d 23 32 35 30 3a 20 30 78 30  kfence-#250: 0x0
            30 30 30 30 30 30 30 37 35 34 62 64 61 31 32 2d  0000000754bda12-
          backtrace:
             seq_read_iter+0x313/0x440
             seq_read+0x14b/0x1a0
             full_proxy_read+0x56/0x80
             vfs_read+0xa5/0x1b0
             ksys_read+0xa0/0xf0
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    I find that we can easily reproduce this problem with the following
    commands:
    
            cat /sys/kernel/debug/kfence/objects
            echo scan > /sys/kernel/debug/kmemleak
            cat /sys/kernel/debug/kmemleak
    
    The leaked memory is allocated in the stack below:
    
        do_syscall_64
          do_sys_open
            do_dentry_open
              full_proxy_open
                seq_open            ---> alloc seq_file
          vfs_read
            full_proxy_read
              seq_read
                seq_read_iter
                  traverse          ---> alloc seq_buf
    
    And it should have been released in the following process:
    
        do_syscall_64
          syscall_exit_to_user_mode
            exit_to_user_mode_prepare
              task_work_run
                ____fput
                  __fput
                    full_proxy_release  ---> free here
    
    However, the release function corresponding to file_operations is not
    implemented in kfence.  As a result, a memory leak occurs.  Therefore,
    the solution to this problem is to implement the corresponding release
    function.
    
    Link: https://lkml.kernel.org/r/20211206133628.2822545-1-libaokun1@huawei.com
    Fixes: 0ce20dd84089 ("mm: add Kernel Electric-Fence infrastructure")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Acked-by: Marco Elver <elver@google.com>
    Reviewed-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca38833c915ea1da85568a02d95d60ce4057a2a9
Author: Zhang Ying-22455 <ying.zhang22455@nxp.com>
Date:   Tue Dec 14 01:23:33 2021 -0600

    arm64: dts: lx2160a: fix scl-gpios property name
    
    commit 849e087ba68ac6956c11016ce34f9f10a09a4186 upstream.
    
    Fix the typo in the property name.
    
    Fixes: d548c217c6a3c ("arm64: dts: add QorIQ LX2160A SoC support")
    Signed-off-by: Zhang Ying <ying.zhang22455@nxp.com>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae519ecbbdb243aae1262f491e53b4aeda3f28d
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 7 19:30:05 2021 +0000

    KVM: VMX: Fix stale docs for kvm-intel.emulate_invalid_guest_state
    
    commit 0ff29701ffad9a5d5a24344d8b09f3af7b96ffda upstream.
    
    Update the documentation for kvm-intel's emulate_invalid_guest_state to
    rectify the description of KVM's default behavior, and to document that
    the behavior and thus parameter only applies to L1.
    
    Fixes: a27685c33acc ("KVM: VMX: Emulate invalid guest state by default")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211207193006.120997-4-seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35f9ff45ee5c911996185758ae95937af35471ff
Author: Jeffle Xu <jefflexu@linux.alibaba.com>
Date:   Tue Dec 7 11:14:49 2021 +0800

    netfs: fix parameter of cleanup()
    
    commit 3cfef1b612e15a0c2f5b1c9d3f3f31ad72d56fcd upstream.
    
    The order of these two parameters is just reversed. gcc didn't warn on
    that, probably because 'void *' can be converted from or to other
    pointer types without warning.
    
    Cc: stable@vger.kernel.org
    Fixes: 3d3c95046742 ("netfs: Provide readahead and readpage netfs helpers")
    Fixes: e1b1240c1ff5 ("netfs: Add write_begin helper")
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Link: https://lore.kernel.org/r/20211207031449.100510-1-jefflexu@linux.alibaba.com/ # v1
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8a9d753edd7f71e6a2edaa580d8182530b68791
Author: Chao Yu <chao@kernel.org>
Date:   Sun Dec 12 17:16:30 2021 +0800

    f2fs: fix to do sanity check on last xattr entry in __f2fs_setxattr()
    
    commit 5598b24efaf4892741c798b425d543e4bed357a1 upstream.
    
    As Wenqing Liu reported in bugzilla:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=215235
    
    - Overview
    page fault in f2fs_setxattr() when mount and operate on corrupted image
    
    - Reproduce
    tested on kernel 5.16-rc3, 5.15.X under root
    
    1. unzip tmp7.zip
    2. ./single.sh f2fs 7
    
    Sometimes need to run the script several times
    
    - Kernel dump
    loop0: detected capacity change from 0 to 131072
    F2FS-fs (loop0): Found nat_bits in checkpoint
    F2FS-fs (loop0): Mounted with checkpoint version = 7548c2ee
    BUG: unable to handle page fault for address: ffffe47bc7123f48
    RIP: 0010:kfree+0x66/0x320
    Call Trace:
     __f2fs_setxattr+0x2aa/0xc00 [f2fs]
     f2fs_setxattr+0xfa/0x480 [f2fs]
     __f2fs_set_acl+0x19b/0x330 [f2fs]
     __vfs_removexattr+0x52/0x70
     __vfs_removexattr_locked+0xb1/0x140
     vfs_removexattr+0x56/0x100
     removexattr+0x57/0x80
     path_removexattr+0xa3/0xc0
     __x64_sys_removexattr+0x17/0x20
     do_syscall_64+0x37/0xb0
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The root cause is in __f2fs_setxattr(), we missed to do sanity check on
    last xattr entry, result in out-of-bound memory access during updating
    inconsistent xattr data of target inode.
    
    After the fix, it can detect such xattr inconsistency as below:
    
    F2FS-fs (loop11): inode (7) has invalid last xattr entry, entry_size: 60676
    F2FS-fs (loop11): inode (8) has corrupted xattr
    F2FS-fs (loop11): inode (8) has corrupted xattr
    F2FS-fs (loop11): inode (8) has invalid last xattr entry, entry_size: 47736
    
    Cc: stable@vger.kernel.org
    Reported-by: Wenqing Liu <wenqingliu0120@gmail.com>
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91e94e42f6fc49635f1a16d8ae3f79552bcfda29
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Thu Dec 16 11:17:25 2021 +0530

    tee: optee: Fix incorrect page free bug
    
    commit 18549bf4b21c739a9def39f27dcac53e27286ab5 upstream.
    
    Pointer to the allocated pages (struct page *page) has already
    progressed towards the end of allocation. It is incorrect to perform
    __free_pages(page, order) using this pointer as we would free any
    arbitrary pages. Fix this by stop modifying the page pointer.
    
    Fixes: ec185dd3ab25 ("optee: Fix memory leak when failing to register shm pages")
    Cc: stable@vger.kernel.org
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 330c6117a82c16a9a365a51cec5c9ab30b13245c
Author: SeongJae Park <sj@kernel.org>
Date:   Fri Dec 24 21:12:54 2021 -0800

    mm/damon/dbgfs: protect targets destructions with kdamond_lock
    
    commit 34796417964b8d0aef45a99cf6c2d20cebe33733 upstream.
    
    DAMON debugfs interface iterates current monitoring targets in
    'dbgfs_target_ids_read()' while holding the corresponding
    'kdamond_lock'.  However, it also destructs the monitoring targets in
    'dbgfs_before_terminate()' without holding the lock.  This can result in
    a use_after_free bug.  This commit avoids the race by protecting the
    destruction with the corresponding 'kdamond_lock'.
    
    Link: https://lkml.kernel.org/r/20211221094447.2241-1-sj@kernel.org
    Reported-by: Sangwoo Bae <sangwoob@amazon.com>
    Fixes: 4bc05954d007 ("mm/damon: implement a debugfs-based user space interface")
    Signed-off-by: SeongJae Park <sj@kernel.org>
    Cc: <stable@vger.kernel.org>    [5.15.x]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c691e7575eff76e563b0199c23ec46bd454f43e3
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Fri Dec 24 21:12:58 2021 -0800

    mm/hwpoison: clear MF_COUNT_INCREASED before retrying get_any_page()
    
    commit 2a57d83c78f889bf3f54eede908d0643c40d5418 upstream.
    
    Hulk Robot reported a panic in put_page_testzero() when testing
    madvise() with MADV_SOFT_OFFLINE.  The BUG() is triggered when retrying
    get_any_page().  This is because we keep MF_COUNT_INCREASED flag in
    second try but the refcnt is not increased.
    
        page dumped because: VM_BUG_ON_PAGE(page_ref_count(page) == 0)
        ------------[ cut here ]------------
        kernel BUG at include/linux/mm.h:737!
        invalid opcode: 0000 [#1] PREEMPT SMP
        CPU: 5 PID: 2135 Comm: sshd Tainted: G    B             5.16.0-rc6-dirty #373
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
        RIP: release_pages+0x53f/0x840
        Call Trace:
          free_pages_and_swap_cache+0x64/0x80
          tlb_flush_mmu+0x6f/0x220
          unmap_page_range+0xe6c/0x12c0
          unmap_single_vma+0x90/0x170
          unmap_vmas+0xc4/0x180
          exit_mmap+0xde/0x3a0
          mmput+0xa3/0x250
          do_exit+0x564/0x1470
          do_group_exit+0x3b/0x100
          __do_sys_exit_group+0x13/0x20
          __x64_sys_exit_group+0x16/0x20
          do_syscall_64+0x34/0x80
          entry_SYSCALL_64_after_hwframe+0x44/0xae
        Modules linked in:
        ---[ end trace e99579b570fe0649 ]---
        RIP: 0010:release_pages+0x53f/0x840
    
    Link: https://lkml.kernel.org/r/20211221074908.3910286-1-liushixin2@huawei.com
    Fixes: b94e02822deb ("mm,hwpoison: try to narrow window race for free pages")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a77e22fde6349d276f862a521d190ad932e711d
Author: Naoya Horiguchi <naoya.horiguchi@nec.com>
Date:   Fri Dec 24 21:12:45 2021 -0800

    mm, hwpoison: fix condition in free hugetlb page path
    
    commit e37e7b0b3bd52ec4f8ab71b027bcec08f57f1b3b upstream.
    
    When a memory error hits a tail page of a free hugepage,
    __page_handle_poison() is expected to be called to isolate the error in
    4kB unit, but it's not called due to the outdated if-condition in
    memory_failure_hugetlb().  This loses the chance to isolate the error in
    the finer unit, so it's not optimal.  Drop the condition.
    
    This "(p != head && TestSetPageHWPoison(head)" condition is based on the
    old semantics of PageHWPoison on hugepage (where PG_hwpoison flag was
    set on the subpage), so it's not necessray any more.  By getting to set
    PG_hwpoison on head page for hugepages, concurrent error events on
    different subpages in a single hugepage can be prevented by
    TestSetPageHWPoison(head) at the beginning of memory_failure_hugetlb().
    So dropping the condition should not reopen the race window originally
    mentioned in commit b985194c8c0a ("hwpoison, hugetlb:
    lock_page/unlock_page does not match for handling a free hugepage")
    
    [naoya.horiguchi@linux.dev: fix "HardwareCorrupted" counter]
      Link: https://lkml.kernel.org/r/20211220084851.GA1460264@u2004
    
    Link: https://lkml.kernel.org/r/20211210110208.879740-1-naoya.horiguchi@linux.dev
    Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reported-by: Fei Luo <luofei@unicloud.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>    [5.14+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b2cdcc8f5552615c7bdfc0ba3fa45a5d0d15680
Author: Andrey Ryabinin <arbn@yandex-team.com>
Date:   Fri Dec 24 21:12:35 2021 -0800

    mm: mempolicy: fix THP allocations escaping mempolicy restrictions
    
    commit 338635340669d5b317c7e8dcf4fff4a0f3651d87 upstream.
    
    alloc_pages_vma() may try to allocate THP page on the local NUMA node
    first:
    
            page = __alloc_pages_node(hpage_node,
                    gfp | __GFP_THISNODE | __GFP_NORETRY, order);
    
    And if the allocation fails it retries allowing remote memory:
    
            if (!page && (gfp & __GFP_DIRECT_RECLAIM))
                    page = __alloc_pages_node(hpage_node,
                                            gfp, order);
    
    However, this retry allocation completely ignores memory policy nodemask
    allowing allocation to escape restrictions.
    
    The first appearance of this bug seems to be the commit ac5b2c18911f
    ("mm: thp: relax __GFP_THISNODE for MADV_HUGEPAGE mappings").
    
    The bug disappeared later in the commit 89c83fb539f9 ("mm, thp:
    consolidate THP gfp handling into alloc_hugepage_direct_gfpmask") and
    reappeared again in slightly different form in the commit 76e654cc91bb
    ("mm, page_alloc: allow hugepage fallback to remote nodes when
    madvised")
    
    Fix this by passing correct nodemask to the __alloc_pages() call.
    
    The demonstration/reproducer of the problem:
    
        $ mount -oremount,size=4G,huge=always /dev/shm/
        $ echo always > /sys/kernel/mm/transparent_hugepage/defrag
        $ cat mbind_thp.c
        #include <unistd.h>
        #include <sys/mman.h>
        #include <sys/stat.h>
        #include <fcntl.h>
        #include <assert.h>
        #include <stdlib.h>
        #include <stdio.h>
        #include <numaif.h>
    
        #define SIZE 2ULL << 30
        int main(int argc, char **argv)
        {
            int fd;
            unsigned long long i;
            char *addr;
            pid_t pid;
            char buf[100];
            unsigned long nodemask = 1;
    
            fd = open("/dev/shm/test", O_RDWR|O_CREAT);
            assert(fd > 0);
            assert(ftruncate(fd, SIZE) == 0);
    
            addr = mmap(NULL, SIZE, PROT_READ|PROT_WRITE,
                               MAP_SHARED, fd, 0);
    
            assert(mbind(addr, SIZE, MPOL_BIND, &nodemask, 2, MPOL_MF_STRICT|MPOL_MF_MOVE)==0);
            for (i = 0; i < SIZE; i+=4096) {
              addr[i] = 1;
            }
            pid = getpid();
            snprintf(buf, sizeof(buf), "grep shm /proc/%d/numa_maps", pid);
            system(buf);
            sleep(10000);
    
            return 0;
        }
        $ gcc mbind_thp.c -o mbind_thp -lnuma
        $ numactl -H
        available: 2 nodes (0-1)
        node 0 cpus: 0 2
        node 0 size: 1918 MB
        node 0 free: 1595 MB
        node 1 cpus: 1 3
        node 1 size: 2014 MB
        node 1 free: 1731 MB
        node distances:
        node   0   1
          0:  10  20
          1:  20  10
        $ rm -f /dev/shm/test; taskset -c 0 ./mbind_thp
        7fd970a00000 bind:0 file=/dev/shm/test dirty=524288 active=0 N0=396800 N1=127488 kernelpagesize_kB=4
    
    Link: https://lkml.kernel.org/r/20211208165343.22349-1-arbn@yandex-team.com
    Fixes: ac5b2c18911f ("mm: thp: relax __GFP_THISNODE for MADV_HUGEPAGE mappings")
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: David Rientjes <rientjes@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1d1ec4db5f7264cfc21993e59e8f2dcecf4b44f
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Dec 20 10:22:40 2021 +0100

    mac80211: fix locking in ieee80211_start_ap error path
    
    commit 87a270625a89fc841f1a7e21aae6176543d8385c upstream.
    
    We need to hold the local->mtx to release the channel context,
    as even encoded by the lockdep_assert_held() there. Fix it.
    
    Cc: stable@vger.kernel.org
    Fixes: 295b02c4be74 ("mac80211: Add FILS discovery support")
    Reported-and-tested-by: syzbot+11c342e5e30e9539cabd@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20211220090836.cee3d59a1915.I36bba9b79dc2ff4d57c3c7aa30dff9a003fe8c5c@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2c144d17623984fdafa4634ecf4ab64580d29bb
Author: Marcos Del Sol Vives <marcos@orca.pet>
Date:   Thu Dec 16 11:37:22 2021 +0100

    ksmbd: disable SMB2_GLOBAL_CAP_ENCRYPTION for SMB 3.1.1
    
    commit 83912d6d55be10d65b5268d1871168b9ebe1ec4b upstream.
    
    According to the official Microsoft MS-SMB2 document section 3.3.5.4, this
    flag should be used only for 3.0 and 3.0.2 dialects. Setting it for 3.1.1
    is a violation of the specification.
    
    This causes my Windows 10 client to detect an anomaly in the negotiation,
    and disable encryption entirely despite being explicitly enabled in ksmbd,
    causing all data transfers to go in plain text.
    
    Fixes: e2f34481b24d ("cifsd: add server-side procedures for SMB3")
    Cc: stable@vger.kernel.org # v5.15
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Marcos Del Sol Vives <marcos@orca.pet>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f43ba86a821194778fcb1c10c0d68909d6a72889
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed Dec 1 10:12:39 2021 +0900

    ksmbd: fix uninitialized symbol 'pntsd_size'
    
    commit f2e78affc48dee29b989c1d9b0d89b503dcd1204 upstream.
    
    No check for if "rc" is an error code for build_sec_desc().
    This can cause problems with using uninitialized pntsd_size.
    
    Fixes: e2f34481b24d ("cifsd: add server-side procedures for SMB3")
    Cc: stable@vger.kernel.org # v5.15
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89d0ffb4bb960d6ccfac4d01cbd5e0e4727c1ebc
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Nov 30 15:50:47 2021 +0300

    ksmbd: fix error code in ndr_read_int32()
    
    commit ef399469d9ceb9f2171cdd79863f9434b9fa3edc upstream.
    
    This is a failure path and it should return -EINVAL instead of success.
    Otherwise it could result in the caller using uninitialized memory.
    
    Fixes: 303fff2b8c77 ("ksmbd: add validation for ndr read/write functions")
    Cc: stable@vger.kernel.org # v5.15
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c99513dffd361d5e2121d3c23c7e840a505db4e1
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Dec 15 09:31:36 2021 +0100

    ARM: 9169/1: entry: fix Thumb2 bug in iWMMXt exception handling
    
    commit 8536a5ef886005bc443c2da9b842d69fd3d7647f upstream.
    
    The Thumb2 version of the FP exception handling entry code treats the
    register holding the CP number (R8) differently, resulting in the iWMMXT
    CP number check to be incorrect.
    
    Fix this by unifying the ARM and Thumb2 code paths, and switch the
    order of the additions of the TI_USED_CP offset and the shifted CP
    index.
    
    Cc: <stable@vger.kernel.org>
    Fixes: b86040a59feb ("Thumb-2: Implementation of the unified start-up and exceptions code")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7814569b387c1be884d6c5cd946f13f214b9bb6
Author: Yann Gautier <yann.gautier@foss.st.com>
Date:   Wed Dec 15 15:17:26 2021 +0100

    mmc: mmci: stm32: clear DLYB_CR after sending tuning command
    
    commit ff31ee0a0f471776f67be5e5275c18d17736fc6b upstream.
    
    During test campaign, and especially after several unbind/bind sequences,
    it has been seen that the SD-card on SDMMC1 thread could freeze.
    The freeze always appear on a CMD23 following a CMD19.
    Checking SDMMC internal registers shows that the tuning command (CMD19)
    has failed.
    The freeze is then due to the delay block involved in the tuning sequence.
    To correct this, clear the delay block register DLYB_CR register after
    the tuning commands.
    
    Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
    Signed-off-by: Yann Gautier <yann.gautier@foss.st.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Fixes: 1103f807a3b9 ("mmc: mmci_sdmmc: Add execute tuning with delay block")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211215141727.4901-4-yann.gautier@foss.st.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0db06fd09937b3a80d554f2e935ac3452a5b6d8
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Dec 3 15:15:54 2021 +0100

    mmc: core: Disable card detect during shutdown
    
    commit 66c915d09b942fb3b2b0cb2f56562180901fba17 upstream.
    
    It's seems prone to problems by allowing card detect and its corresponding
    mmc_rescan() work to run, during platform shutdown. For example, we may end
    up turning off the power while initializing a card, which potentially could
    damage it.
    
    To avoid this scenario, let's add ->shutdown_pre() callback for the mmc host
    class device and then turn of the card detect from there.
    
    Reported-by: Al Cooper <alcooperx@gmail.com>
    Suggested-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211203141555.105351-1-ulf.hansson@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d93c863d04fea78351187cb0031ce2cc3039429
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Dec 19 16:34:41 2021 +0100

    mmc: meson-mx-sdhc: Set MANUAL_STOP for multi-block SDIO commands
    
    commit f89b548ca66be7500dcd92ee8e61590f7d08ac91 upstream.
    
    The vendor driver implements special handling for multi-block
    SD_IO_RW_EXTENDED (and SD_IO_RW_DIRECT) commands which have data
    attached to them. It sets the MANUAL_STOP bit in the MESON_SDHC_MISC
    register for these commands. In all other cases this bit is cleared.
    Here we omit SD_IO_RW_DIRECT since that command never has any data
    attached to it.
    
    This fixes SDIO wifi using the brcmfmac driver which reported the
    following error without this change on a Netxeon S82 board using a
    Meson8 (S802) SoC:
      brcmf_fw_alloc_request: using brcm/brcmfmac43362-sdio for chip
                              BCM43362/1
      brcmf_sdiod_ramrw: membytes transfer failed
      brcmf_sdio_download_code_file: error -110 on writing 219557 membytes
                                     at 0x00000000
      brcmf_sdio_download_firmware: dongle image file download failed
    
    And with this change:
      brcmf_fw_alloc_request: using brcm/brcmfmac43362-sdio for chip
                              BCM43362/1
      brcmf_c_process_clm_blob: no clm_blob available (err=-2), device may
                                have limited channels available
      brcmf_c_preinit_dcmds: Firmware: BCM43362/1 wl0: Apr 22 2013 14:50:00
                             version 5.90.195.89.6 FWID 01-b30a427d
    
    Fixes: e4bf1b0970ef96 ("mmc: host: meson-mx-sdhc: new driver for the Amlogic Meson SDHC host")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211219153442.463863-2-martin.blumenstingl@googlemail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46e2fc260543bba2ec2ce3f72db2f62174329d20
Author: Prathamesh Shete <pshete@nvidia.com>
Date:   Tue Dec 14 17:06:53 2021 +0530

    mmc: sdhci-tegra: Fix switch to HS400ES mode
    
    commit 4fc7261dbab139d3c64c3b618262504e16cfe7ee upstream.
    
    When CMD13 is sent after switching to HS400ES mode, the bus
    is operating at either MMC_HIGH_26_MAX_DTR or MMC_HIGH_52_MAX_DTR.
    To meet Tegra SDHCI requirement at HS400ES mode, force SDHCI
    interface clock to MMC_HS200_MAX_DTR (200 MHz) so that host
    controller CAR clock and the interface clock are rate matched.
    
    Signed-off-by: Prathamesh Shete <pshete@nvidia.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: dfc9700cef77 ("mmc: tegra: Implement HS400 enhanced strobe")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211214113653.4631-1-pshete@nvidia.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5dd3e61baed74d0abfc63d05d69dbff9e48d1bd
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Mon Oct 18 13:22:01 2021 +0200

    gpio: dln2: Fix interrupts when replugging the device
    
    commit 9a5875f14b0e3a13ae314883f1bb72b7f31fac07 upstream.
    
    When replugging the device the following message shows up:
    
    gpio gpiochip2: (dln2): detected irqchip that is shared with multiple gpiochips: please fix the driver.
    
    This also has the effect that interrupts won't work.
    The same problem would also show up if multiple devices where plugged in.
    
    Fix this by allocating the irq_chip data structure per instance like other
    drivers do.
    
    I don't know when this problem appeared, but it is present in 5.10.
    
    Cc: <stable@vger.kernel.org> # 5.10+
    Cc: Daniel Baluta <daniel.baluta@gmail.com>
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1ce3c410038bb8c91b91a40e73facb981549236
Author: Fabien Dessenne <fabien.dessenne@foss.st.com>
Date:   Wed Dec 15 10:58:08 2021 +0100

    pinctrl: stm32: consider the GPIO offset to expose all the GPIO lines
    
    commit b67210cc217f9ca1c576909454d846970c13dfd4 upstream.
    
    Consider the GPIO controller offset (from "gpio-ranges") to compute the
    maximum GPIO line number.
    This fixes an issue where gpio-ranges uses a non-null offset.
      e.g.: gpio-ranges = <&pinctrl 6 86 10>
            In that case the last valid GPIO line is not 9 but 15 (6 + 10 - 1)
    
    Cc: stable@vger.kernel.org
    Fixes: 67e2996f72c7 ("pinctrl: stm32: fix the reported number of GPIO lines per bank")
    Reported-by: Christoph Fritz <chf.fritz@googlemail.com>
    Signed-off-by: Fabien Dessenne <fabien.dessenne@foss.st.com>
    Link: https://lore.kernel.org/r/20211215095808.621716-1-fabien.dessenne@foss.st.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9d7c7a5bf6eff2e5002f33967d0b5ae12180229
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 21 10:37:00 2021 -0500

    KVM: VMX: Wake vCPU when delivering posted IRQ even if vCPU == this vCPU
    
    commit fdba608f15e2427419997b0898750a49a735afcb upstream.
    
    Drop a check that guards triggering a posted interrupt on the currently
    running vCPU, and more importantly guards waking the target vCPU if
    triggering a posted interrupt fails because the vCPU isn't IN_GUEST_MODE.
    If a vIRQ is delivered from asynchronous context, the target vCPU can be
    the currently running vCPU and can also be blocking, in which case
    skipping kvm_vcpu_wake_up() is effectively dropping what is supposed to
    be a wake event for the vCPU.
    
    The "do nothing" logic when "vcpu == running_vcpu" mostly works only
    because the majority of calls to ->deliver_posted_interrupt(), especially
    when using posted interrupts, come from synchronous KVM context.  But if
    a device is exposed to the guest using vfio-pci passthrough, the VFIO IRQ
    and vCPU are bound to the same pCPU, and the IRQ is _not_ configured to
    use posted interrupts, wake events from the device will be delivered to
    KVM from IRQ context, e.g.
    
      vfio_msihandler()
      |
      |-> eventfd_signal()
          |
          |-> ...
              |
              |->  irqfd_wakeup()
                   |
                   |->kvm_arch_set_irq_inatomic()
                      |
                      |-> kvm_irq_delivery_to_apic_fast()
                          |
                          |-> kvm_apic_set_irq()
    
    This also aligns the non-nested and nested usage of triggering posted
    interrupts, and will allow for additional cleanups.
    
    Fixes: 379a3c8ee444 ("KVM: VMX: Optimize posted-interrupt delivery for timer fastpath")
    Cc: stable@vger.kernel.org
    Reported-by: Longpeng (Mike) <longpeng2@huawei.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20211208015236.1616697-18-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4e4e7cb229821cd215031abc47efdab5486a67c
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 7 19:30:03 2021 +0000

    KVM: VMX: Always clear vmx->fail on emulation_required
    
    commit a80dfc025924024d2c61a4c1b8ef62b2fce76a04 upstream.
    
    Revert a relatively recent change that set vmx->fail if the vCPU is in L2
    and emulation_required is true, as that behavior is completely bogus.
    Setting vmx->fail and synthesizing a VM-Exit is contradictory and wrong:
    
      (a) it's impossible to have both a VM-Fail and VM-Exit
      (b) vmcs.EXIT_REASON is not modified on VM-Fail
      (c) emulation_required refers to guest state and guest state checks are
          always VM-Exits, not VM-Fails.
    
    For KVM specifically, emulation_required is handled before nested exits
    in __vmx_handle_exit(), thus setting vmx->fail has no immediate effect,
    i.e. KVM calls into handle_invalid_guest_state() and vmx->fail is ignored.
    Setting vmx->fail can ultimately result in a WARN in nested_vmx_vmexit()
    firing when tearing down the VM as KVM never expects vmx->fail to be set
    when L2 is active, KVM always reflects those errors into L1.
    
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 21158 at arch/x86/kvm/vmx/nested.c:4548
                                    nested_vmx_vmexit+0x16bd/0x17e0
                                    arch/x86/kvm/vmx/nested.c:4547
      Modules linked in:
      CPU: 0 PID: 21158 Comm: syz-executor.1 Not tainted 5.16.0-rc3-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      RIP: 0010:nested_vmx_vmexit+0x16bd/0x17e0 arch/x86/kvm/vmx/nested.c:4547
      Code: <0f> 0b e9 2e f8 ff ff e8 57 b3 5d 00 0f 0b e9 00 f1 ff ff 89 e9 80
      Call Trace:
       vmx_leave_nested arch/x86/kvm/vmx/nested.c:6220 [inline]
       nested_vmx_free_vcpu+0x83/0xc0 arch/x86/kvm/vmx/nested.c:330
       vmx_free_vcpu+0x11f/0x2a0 arch/x86/kvm/vmx/vmx.c:6799
       kvm_arch_vcpu_destroy+0x6b/0x240 arch/x86/kvm/x86.c:10989
       kvm_vcpu_destroy+0x29/0x90 arch/x86/kvm/../../../virt/kvm/kvm_main.c:441
       kvm_free_vcpus arch/x86/kvm/x86.c:11426 [inline]
       kvm_arch_destroy_vm+0x3ef/0x6b0 arch/x86/kvm/x86.c:11545
       kvm_destroy_vm arch/x86/kvm/../../../virt/kvm/kvm_main.c:1189 [inline]
       kvm_put_kvm+0x751/0xe40 arch/x86/kvm/../../../virt/kvm/kvm_main.c:1220
       kvm_vcpu_release+0x53/0x60 arch/x86/kvm/../../../virt/kvm/kvm_main.c:3489
       __fput+0x3fc/0x870 fs/file_table.c:280
       task_work_run+0x146/0x1c0 kernel/task_work.c:164
       exit_task_work include/linux/task_work.h:32 [inline]
       do_exit+0x705/0x24f0 kernel/exit.c:832
       do_group_exit+0x168/0x2d0 kernel/exit.c:929
       get_signal+0x1740/0x2120 kernel/signal.c:2852
       arch_do_signal_or_restart+0x9c/0x730 arch/x86/kernel/signal.c:868
       handle_signal_work kernel/entry/common.c:148 [inline]
       exit_to_user_mode_loop kernel/entry/common.c:172 [inline]
       exit_to_user_mode_prepare+0x191/0x220 kernel/entry/common.c:207
       __syscall_exit_to_user_mode_work kernel/entry/common.c:289 [inline]
       syscall_exit_to_user_mode+0x2e/0x70 kernel/entry/common.c:300
       do_syscall_64+0x53/0xd0 arch/x86/entry/common.c:86
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fixes: c8607e4a086f ("KVM: x86: nVMX: don't fail nested VM entry on invalid guest state if !from_vmentry")
    Reported-by: syzbot+f1d2136db9c80d4733e8@syzkaller.appspotmail.com
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211207193006.120997-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 543bfbcb5cf511477a143c71140d3e26b582684a
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 7 19:30:04 2021 +0000

    KVM: nVMX: Synthesize TRIPLE_FAULT for L2 if emulation is required
    
    commit cd0e615c49e5e5d69885af9ac3b4fa7bb3387f58 upstream.
    
    Synthesize a triple fault if L2 guest state is invalid at the time of
    VM-Enter, which can happen if L1 modifies SMRAM or if userspace stuffs
    guest state via ioctls(), e.g. KVM_SET_SREGS.  KVM should never emulate
    invalid guest state, since from L1's perspective, it's architecturally
    impossible for L2 to have invalid state while L2 is running in hardware.
    E.g. attempts to set CR0 or CR4 to unsupported values will either VM-Exit
    or #GP.
    
    Modifying vCPU state via RSM+SMRAM and ioctl() are the only paths that
    can trigger this scenario, as nested VM-Enter correctly rejects any
    attempt to enter L2 with invalid state.
    
    RSM is a straightforward case as (a) KVM follows AMD's SMRAM layout and
    behavior, and (b) Intel's SDM states that loading reserved CR0/CR4 bits
    via RSM results in shutdown, i.e. there is precedent for KVM's behavior.
    Following AMD's SMRAM layout is important as AMD's layout saves/restores
    the descriptor cache information, including CS.RPL and SS.RPL, and also
    defines all the fields relevant to invalid guest state as read-only, i.e.
    so long as the vCPU had valid state before the SMI, which is guaranteed
    for L2, RSM will generate valid state unless SMRAM was modified.  Intel's
    layout saves/restores only the selector, which means that scenarios where
    the selector and cached RPL don't match, e.g. conforming code segments,
    would yield invalid guest state.  Intel CPUs fudge around this issued by
    stuffing SS.RPL and CS.RPL on RSM.  Per Intel's SDM on the "Default
    Treatment of RSM", paraphrasing for brevity:
    
      IF internal storage indicates that the [CPU was post-VMXON]
      THEN
         enter VMX operation (root or non-root);
         restore VMX-critical state as defined in Section 34.14.1;
         set to their fixed values any bits in CR0 and CR4 whose values must
         be fixed in VMX operation [unless coming from an unrestricted guest];
         IF RFLAGS.VM = 0 AND (in VMX root operation OR the
            “unrestricted guest” VM-execution control is 0)
         THEN
           CS.RPL := SS.DPL;
           SS.RPL := SS.DPL;
         FI;
         restore current VMCS pointer;
      FI;
    
    Note that Intel CPUs also overwrite the fixed CR0/CR4 bits, whereas KVM
    will sythesize TRIPLE_FAULT in this scenario.  KVM's behavior is allowed
    as both Intel and AMD define CR0/CR4 SMRAM fields as read-only, i.e. the
    only way for CR0 and/or CR4 to have illegal values is if they were
    modified by the L1 SMM handler, and Intel's SDM "SMRAM State Save Map"
    section states "modifying these registers will result in unpredictable
    behavior".
    
    KVM's ioctl() behavior is less straightforward.  Because KVM allows
    ioctls() to be executed in any order, rejecting an ioctl() if it would
    result in invalid L2 guest state is not an option as KVM cannot know if
    a future ioctl() would resolve the invalid state, e.g. KVM_SET_SREGS, or
    drop the vCPU out of L2, e.g. KVM_SET_NESTED_STATE.  Ideally, KVM would
    reject KVM_RUN if L2 contained invalid guest state, but that carries the
    risk of a false positive, e.g. if RSM loaded invalid guest state and KVM
    exited to userspace.  Setting a flag/request to detect such a scenario is
    undesirable because (a) it's extremely unlikely to add value to KVM as a
    whole, and (b) KVM would need to consider ioctl() interactions with such
    a flag, e.g. if userspace migrated the vCPU while the flag were set.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211207193006.120997-3-seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d884eefd75cc54887bc2e9e724207443525dfb2c
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 14 03:35:28 2021 +0000

    KVM: x86/mmu: Don't advance iterator after restart due to yielding
    
    commit 3a0f64de479cae75effb630a2e0a237ca0d0623c upstream.
    
    After dropping mmu_lock in the TDP MMU, restart the iterator during
    tdp_iter_next() and do not advance the iterator.  Advancing the iterator
    results in skipping the top-level SPTE and all its children, which is
    fatal if any of the skipped SPTEs were not visited before yielding.
    
    When zapping all SPTEs, i.e. when min_level == root_level, restarting the
    iter and then invoking tdp_iter_next() is always fatal if the current gfn
    has as a valid SPTE, as advancing the iterator results in try_step_side()
    skipping the current gfn, which wasn't visited before yielding.
    
    Sprinkle WARNs on iter->yielded being true in various helpers that are
    often used in conjunction with yielding, and tag the helper with
    __must_check to reduce the probabily of improper usage.
    
    Failing to zap a top-level SPTE manifests in one of two ways.  If a valid
    SPTE is skipped by both kvm_tdp_mmu_zap_all() and kvm_tdp_mmu_put_root(),
    the shadow page will be leaked and KVM will WARN accordingly.
    
      WARNING: CPU: 1 PID: 3509 at arch/x86/kvm/mmu/tdp_mmu.c:46 [kvm]
      RIP: 0010:kvm_mmu_uninit_tdp_mmu+0x3e/0x50 [kvm]
      Call Trace:
       <TASK>
       kvm_arch_destroy_vm+0x130/0x1b0 [kvm]
       kvm_destroy_vm+0x162/0x2a0 [kvm]
       kvm_vcpu_release+0x34/0x60 [kvm]
       __fput+0x82/0x240
       task_work_run+0x5c/0x90
       do_exit+0x364/0xa10
       ? futex_unqueue+0x38/0x60
       do_group_exit+0x33/0xa0
       get_signal+0x155/0x850
       arch_do_signal_or_restart+0xed/0x750
       exit_to_user_mode_prepare+0xc5/0x120
       syscall_exit_to_user_mode+0x1d/0x40
       do_syscall_64+0x48/0xc0
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    If kvm_tdp_mmu_zap_all() skips a gfn/SPTE but that SPTE is then zapped by
    kvm_tdp_mmu_put_root(), KVM triggers a use-after-free in the form of
    marking a struct page as dirty/accessed after it has been put back on the
    free list.  This directly triggers a WARN due to encountering a page with
    page_count() == 0, but it can also lead to data corruption and additional
    errors in the kernel.
    
      WARNING: CPU: 7 PID: 1995658 at arch/x86/kvm/../../../virt/kvm/kvm_main.c:171
      RIP: 0010:kvm_is_zone_device_pfn.part.0+0x9e/0xd0 [kvm]
      Call Trace:
       <TASK>
       kvm_set_pfn_dirty+0x120/0x1d0 [kvm]
       __handle_changed_spte+0x92e/0xca0 [kvm]
       __handle_changed_spte+0x63c/0xca0 [kvm]
       __handle_changed_spte+0x63c/0xca0 [kvm]
       __handle_changed_spte+0x63c/0xca0 [kvm]
       zap_gfn_range+0x549/0x620 [kvm]
       kvm_tdp_mmu_put_root+0x1b6/0x270 [kvm]
       mmu_free_root_page+0x219/0x2c0 [kvm]
       kvm_mmu_free_roots+0x1b4/0x4e0 [kvm]
       kvm_mmu_unload+0x1c/0xa0 [kvm]
       kvm_arch_destroy_vm+0x1f2/0x5c0 [kvm]
       kvm_put_kvm+0x3b1/0x8b0 [kvm]
       kvm_vcpu_release+0x4e/0x70 [kvm]
       __fput+0x1f7/0x8c0
       task_work_run+0xf8/0x1a0
       do_exit+0x97b/0x2230
       do_group_exit+0xda/0x2a0
       get_signal+0x3be/0x1e50
       arch_do_signal_or_restart+0x244/0x17f0
       exit_to_user_mode_prepare+0xcb/0x120
       syscall_exit_to_user_mode+0x1d/0x40
       do_syscall_64+0x4d/0x90
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Note, the underlying bug existed even before commit 1af4a96025b3 ("KVM:
    x86/mmu: Yield in TDU MMU iter even if no SPTES changed") moved calls to
    tdp_mmu_iter_cond_resched() to the beginning of loops, as KVM could still
    incorrectly advance past a top-level entry when yielding on a lower-level
    entry.  But with respect to leaking shadow pages, the bug was introduced
    by yielding before processing the current gfn.
    
    Alternatively, tdp_mmu_iter_cond_resched() could simply fall through, or
    callers could jump to their "retry" label.  The downside of that approach
    is that tdp_mmu_iter_cond_resched() _must_ be called before anything else
    in the loop, and there's no easy way to enfornce that requirement.
    
    Ideally, KVM would handling the cond_resched() fully within the iterator
    macro (the code is actually quite clean) and avoid this entire class of
    bugs, but that is extremely difficult do while also supporting yielding
    after tdp_mmu_set_spte_atomic() fails.  Yielding after failing to set a
    SPTE is very desirable as the "owner" of the REMOVED_SPTE isn't strictly
    bounded, e.g. if it's zapping a high-level shadow page, the REMOVED_SPTE
    may block operations on the SPTE for a significant amount of time.
    
    Fixes: faaf05b00aec ("kvm: x86/mmu: Support zapping SPTEs in the TDP MMU")
    Fixes: 1af4a96025b3 ("KVM: x86/mmu: Yield in TDU MMU iter even if no SPTES changed")
    Reported-by: Ignat Korchagin <ignat@cloudflare.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211214033528.123268-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5dea76f5da655a5998da9a06e16c2b0e311ebefc
Author: Marc Orr <marcorr@google.com>
Date:   Thu Dec 9 07:52:57 2021 -0800

    KVM: x86: Always set kvm_run->if_flag
    
    commit c5063551bfcae4e48fec890b7bf369598b77526b upstream.
    
    The kvm_run struct's if_flag is a part of the userspace/kernel API. The
    SEV-ES patches failed to set this flag because it's no longer needed by
    QEMU (according to the comment in the source code). However, other
    hypervisors may make use of this flag. Therefore, set the flag for
    guests with encrypted registers (i.e., with guest_state_protected set).
    
    Fixes: f1c6366e3043 ("KVM: SVM: Add required changes to support intercepts under SEV-ES")
    Signed-off-by: Marc Orr <marcorr@google.com>
    Message-Id: <20211209155257.128747-1-marcorr@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ca1324755f1f8629a370af5cc315b175331f5d1
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Dec 22 11:50:23 2021 +0100

    platform/x86: intel_pmc_core: fix memleak on registration failure
    
    commit 26a8b09437804fabfb1db080d676b96c0de68e7c upstream.
    
    In case device registration fails during module initialisation, the
    platform device structure needs to be freed using platform_device_put()
    to properly free all resources (e.g. the device name).
    
    Fixes: 938835aa903a ("platform/x86: intel_pmc_core: do not create a static struct device")
    Cc: stable@vger.kernel.org      # 5.9
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20211222105023.6205-1-johan@kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a42c41be8324a34b37c1e8eb81c469cab85e1fc8
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Dec 10 08:35:29 2021 -0600

    platform/x86: amd-pmc: only use callbacks for suspend
    
    commit 09fc14061f3ed28899c23b8714c066946fdbd43e upstream.
    
    This driver is intended to be used exclusively for suspend to idle
    so callbacks to send OS_HINT during hibernate and S5 will set OS_HINT
    at the wrong time leading to an undefined behavior.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Link: https://lore.kernel.org/r/20211210143529.10594-1-mario.limonciello@amd.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ede07c4af14a72f452f0cefc7efec7af76d04c8
Author: Andrew Cooper <andrew.cooper3@citrix.com>
Date:   Thu Dec 16 00:08:56 2021 +0000

    x86/pkey: Fix undefined behaviour with PKRU_WD_BIT
    
    commit 57690554abe135fee81d6ac33cc94d75a7e224bb upstream.
    
    Both __pkru_allows_write() and arch_set_user_pkey_access() shift
    PKRU_WD_BIT (a signed constant) by up to 30 bits, hitting the
    sign bit.
    
    Use unsigned constants instead.
    
    Clearly pkey 15 has not been used in combination with UBSAN yet.
    
    Noticed by code inspection only.  I can't actually provoke the
    compiler into generating incorrect logic as far as this shift is
    concerned.
    
    [
      dhansen: add stable@ tag, plus minor changelog massaging,
    
               For anyone doing backports, these #defines were in
               arch/x86/include/asm/pgtable.h before 784a46618f6.
    ]
    
    Fixes: 33a709b25a76 ("mm/gup, x86/mm/pkeys: Check VMAs and PTEs for protection keys")
    Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20211216000856.4480-1-andrew.cooper3@citrix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 492eb7afe858d60408b2da09adc78540c4d16543
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    commit dfd0743f1d9ea76931510ed150334d571fbab49d upstream.
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c576d7a197b72f3dfb73f80685ca661c1c63690f
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Dec 21 13:33:16 2021 -0500

    parisc: Fix mask used to select futex spinlock
    
    commit d3a5a68cff47f6eead84504c3c28376b85053242 upstream.
    
    The address bits used to select the futex spinlock need to match those used in
    the LWS code in syscall.S. The mask 0x3f8 only selects 7 bits.  It should
    select 8 bits.
    
    This change fixes the glibc nptl/tst-cond24 and nptl/tst-cond25 tests.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Fixes: 53a42b6324b8 ("parisc: Switch to more fine grained lws locks")
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c6567979c827b9ca2f4ce1c045385e8608694ee
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Dec 21 13:21:22 2021 -0500

    parisc: Correct completer in lws start
    
    commit 8f66fce0f46560b9e910787ff7ad0974441c4f9c upstream.
    
    The completer in the "or,ev %r1,%r30,%r30" instruction is reversed, so we are
    not clipping the LWS number when we are called from a 32-bit process (W=0).
    We need to nulify the following depdi instruction when the least-significant
    bit of %r30 is 1.
    
    If the %r20 register is not clipped, a user process could perform a LWS call
    that would branch to an undefined location in the kernel and potentially crash
    the machine.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aae769a0ef7ec3ad0e9b3e3297a2e4fc69cde95
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 17 12:44:10 2021 -0300

    ipmi: fix initialization when workqueue allocation fails
    
    commit 75d70d76cb7b927cace2cb34265d68ebb3306b13 upstream.
    
    If the workqueue allocation fails, the driver is marked as not initialized,
    and timer and panic_notifier will be left registered.
    
    Instead of removing those when workqueue allocation fails, do the workqueue
    initialization before doing it, and cleanup srcu_struct if it fails.
    
    Fixes: 1d49eb91e86e ("ipmi: Move remove_work to dedicated workqueue")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: Ioanna Alifieraki <ioanna-maria.alifieraki@canonical.com>
    Cc: stable@vger.kernel.org
    Message-Id: <20211217154410.1228673-2-cascardo@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77a7311ca167aa5b7055c549a940a56e73ee5f29
Author: Mian Yousaf Kaukab <ykaukab@suse.de>
Date:   Wed Dec 8 10:32:39 2021 +0100

    ipmi: ssif: initialize ssif_info->client early
    
    commit 34f35f8f14bc406efc06ee4ff73202c6fd245d15 upstream.
    
    During probe ssif_info->client is dereferenced in error path. However,
    it is set when some of the error checking has already been done. This
    causes following kernel crash if an error path is taken:
    
    [   30.645593][  T674] ipmi_ssif 0-000e: ipmi_ssif: Not probing, Interface already present
    [   30.657616][  T674] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000088
    ...
    [   30.657723][  T674] pc : __dev_printk+0x28/0xa0
    [   30.657732][  T674] lr : _dev_err+0x7c/0xa0
    ...
    [   30.657772][  T674] Call trace:
    [   30.657775][  T674]  __dev_printk+0x28/0xa0
    [   30.657778][  T674]  _dev_err+0x7c/0xa0
    [   30.657781][  T674]  ssif_probe+0x548/0x900 [ipmi_ssif 62ce4b08badc1458fd896206d9ef69a3c31f3d3e]
    [   30.657791][  T674]  i2c_device_probe+0x37c/0x3c0
    ...
    
    Initialize ssif_info->client before any error path can be taken. Clear
    i2c_client data in the error path to prevent the dangling pointer from
    leaking.
    
    Fixes: c4436c9149c5 ("ipmi_ssif: avoid registering duplicate ssif interface")
    Cc: stable@vger.kernel.org # 5.4.x
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mian Yousaf Kaukab <ykaukab@suse.de>
    Message-Id: <20211208093239.4432-1-ykaukab@suse.de>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7232a5941d3fb41df5f10a99051710ef3bcce7d9
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 17 12:44:09 2021 -0300

    ipmi: bail out if init_srcu_struct fails
    
    commit 2b5160b12091285c5aca45980f100a9294af7b04 upstream.
    
    In case, init_srcu_struct fails (because of memory allocation failure), we
    might proceed with the driver initialization despite srcu_struct not being
    entirely initialized.
    
    Fixes: 913a89f009d9 ("ipmi: Don't initialize anything in the core until something uses it")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org
    Message-Id: <20211217154410.1228673-1-cascardo@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f7f61042f70607234e3f96fbed36ab7af50d63f
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Sun Dec 12 21:01:49 2021 -0800

    Input: atmel_mxt_ts - fix double free in mxt_read_info_block
    
    commit 12f247ab590a08856441efdbd351cf2cc8f60a2d upstream.
    
    The "id_buf" buffer is stored in "data->raw_info_block" and freed by
    "mxt_free_object_table" in case of error.
    
    Return instead of jumping to avoid a double free.
    
    Addresses-Coverity-ID: 1474582 ("Double free")
    Fixes: 068bdb67ef74 ("Input: atmel_mxt_ts - fix the firmware update")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Link: https://lore.kernel.org/r/20211212194257.68879-1-jose.exposito89@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6084a6c1ca7faaf9a910c3047a13b3de79659f13
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Dec 12 02:11:46 2021 +0300

    ASoC: tegra: Restore headphones jack name on Nyan Big
    
    commit db635ba4fadf3ba676d07537f3b3f58166aa7b0e upstream.
    
    UCM of Acer Chromebook (Nyan) uses a different name for the headphones
    jack. The name was changed during unification of the machine drivers and
    UCM fails now to load because of that. Restore the old jack name.
    
    Cc: <stable@vger.kernel.org>
    Fixes: cc8f70f ("ASoC: tegra: Unify ASoC machine drivers")
    Reported-by: Thomas Graichen <thomas.graichen@gmail.com> # T124 Nyan Big
    Tested-by: Thomas Graichen <thomas.graichen@gmail.com> # T124 Nyan Big
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20211211231146.6137-2-digetx@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7fe9d303445e9500ca6f61fdb34ff892b18820d
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Dec 12 02:11:45 2021 +0300

    ASoC: tegra: Add DAPM switches for headphones and mic jack
    
    commit d341b427c3c3fd6a58263ce01e01700d16861c28 upstream.
    
    UCM of Acer Chromebook (Nyan) uses DAPM switches of headphones and mic
    jack. These switches were lost by accident during unification of the
    machine drivers, restore them.
    
    Cc: <stable@vger.kernel.org>
    Fixes: cc8f70f ("ASoC: tegra: Unify ASoC machine drivers")
    Reported-by: Thomas Graichen <thomas.graichen@gmail.com> # T124 Nyan Big
    Tested-by: Thomas Graichen <thomas.graichen@gmail.com> # T124 Nyan Big
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20211211231146.6137-1-digetx@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e9b8b8a8ff2f2248ab64bd355c2d619154c38dc
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Mon Dec 6 22:08:04 2021 +0100

    ASoC: meson: aiu: Move AIU_I2S_MISC hold setting to aiu-fifo-i2s
    
    commit ee907afb0c39a41ee74b862882cfe12820c74b98 upstream.
    
    The out-of-tree vendor driver uses the following approach to set the
    AIU_I2S_MISC register:
    1) write AIU_MEM_I2S_START_PTR and AIU_MEM_I2S_RD_PTR
    2) configure AIU_I2S_MUTE_SWAP[15:0]
    3) write AIU_MEM_I2S_END_PTR
    4) set AIU_I2S_MISC[2] to 1 (documented as: "put I2S interface in hold
       mode")
    5) set AIU_I2S_MISC[4] to 1 (depending on the driver revision it always
       stays at 1 while for older drivers this bit is unset in step 4)
    6) set AIU_I2S_MISC[2] to 0
    7) write AIU_MEM_I2S_MASKS
    8) toggle AIU_MEM_I2S_CONTROL[0]
    9) toggle AIU_MEM_I2S_BUF_CNTL[0]
    
    Move setting the AIU_I2S_MISC[2] bit to aiu_fifo_i2s_hw_params() so it
    resembles the flow in the vendor kernel more closely. While here also
    configure AIU_I2S_MISC[4] (documented as: "force each audio data to
    left or right according to the bit attached with the audio data")
    similar to how the vendor driver does this. This fixes the infamous and
    long-standing "machine gun noise" issue (a buffer underrun issue).
    
    Fixes: 6ae9ca9ce986bf ("ASoC: meson: aiu: add i2s and spdif support")
    Reported-by: Christian Hewitt <christianshewitt@gmail.com>
    Reported-by: Geraldo Nascimento <geraldogabriel@gmail.com>
    Tested-by: Christian Hewitt <christianshewitt@gmail.com>
    Tested-by: Geraldo Nascimento <geraldogabriel@gmail.com>
    Acked-by: Jerome Brunet <jbrunet@baylibre.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20211206210804.2512999-3-martin.blumenstingl@googlemail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88b4fbd6348aa9de72863cfd98de4a415bf61242
Author: Werner Sembach <wse@tuxedocomputers.com>
Date:   Wed Dec 15 20:16:46 2021 +0100

    ALSA: hda/realtek: Fix quirk for Clevo NJ51CU
    
    commit edca7cc4b0accfa69dc032442fe0684e59c691b8 upstream.
    
    The Clevo NJ51CU comes either with the ALC293 or the ALC256 codec, but uses
    the 0x8686 subproduct id in both cases. The ALC256 codec needs a different
    quirk for the headset microphone working and and edditional quirk for sound
    working after suspend and resume.
    
    When waking up from s3 suspend the Coef 0x10 is set to 0x0220 instead of
    0x0020 on  the ALC256 codec. Setting the value manually makes the sound
    work again. This patch does this automatically.
    
    [ minor coding style fix by tiwai ]
    
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Fixes: b5acfe152abaa ("ALSA: hda/realtek: Add some Clove SSID in the ALC293(ALC1220)")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211215191646.844644-1-wse@tuxedocomputers.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 417e6ee4df64c667f129c2cc13300032671fadc6
Author: Jeremy Szu <jeremy.szu@canonical.com>
Date:   Wed Dec 15 00:41:54 2021 +0800

    ALSA: hda/realtek: fix mute/micmute LEDs for a HP ProBook
    
    commit f7ac570d0f026cf5475d4cc4d8040bd947980b3a upstream.
    
    There is a HP ProBook which using ALC236 codec and need the
    ALC236_FIXUP_HP_MUTE_LED_MICMUTE_VREF quirk to make mute LED and
    micmute LED work.
    
    Signed-off-by: Jeremy Szu <jeremy.szu@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211214164156.49711-1-jeremy.szu@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0896c97e6657e3c30579c0511a318dbe26d655ff
Author: Bradley Scott <bscott@teksavvy.com>
Date:   Mon Dec 13 11:22:47 2021 -0500

    ALSA: hda/realtek: Add new alc285-hp-amp-init model
    
    commit aa72394667e5cea3547e4c41ddff7ca8c632d764 upstream.
    
    Adds a new "alc285-hp-amp-init" model that can be used to apply the ALC285
    HP speaker amplifier initialization fixup to devices that are not already
    known by passing "hda_model=alc285-hp-amp-init" to the
    snd-sof-intel-hda-common module or "model=alc285-hp-amp-init" to the
    snd-hda-intel module, depending on which is being used.
    
    Signed-off-by: Bradley Scott <bscott@teksavvy.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211213162246.506838-1-bscott@teksavvy.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3934aa1259d9d54213a627a7217c5d45dd972e3d
Author: Bradley Scott <Bradley.Scott@zebra.com>
Date:   Mon Dec 13 10:49:39 2021 -0500

    ALSA: hda/realtek: Amp init fixup for HP ZBook 15 G6
    
    commit d296a74b7b59ff9116236c17edb25f26935dbf70 upstream.
    
    HP ZBook 15 G6 (SSID 103c:860f) needs the same speaker amplifier
    initialization as used on several other HP laptops using ALC285.
    
    Signed-off-by: Bradley Scott <Bradley.Scott@zebra.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211213154938.503201-1-Bradley.Scott@zebra.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e9cd9ff997f1514f61ae45a334d614c6f093bd3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Dec 22 16:53:50 2021 +0200

    ALSA: hda/hdmi: Disable silent stream on GLK
    
    commit b6fd77472dea76b7a2bad3a338ade920152972b8 upstream.
    
    The silent stream stuff recurses back into i915 audio
    component .get_power() from the .pin_eld_notify() hook.
    On GLK this will deadlock as i915 may already be holding
    the relevant modeset locks during .pin_eld_notify() and
    the GLK audio vs. CDCLK workaround will try to grab the
    same locks from .get_power().
    
    Until someone comes up with a better fix just disable the
    silent stream support on GLK.
    
    Cc: stable@vger.kernel.org
    Cc: Harsha Priya <harshapriya.n@intel.com>
    Cc: Emmanuel Jillela <emmanuel.jillela@intel.com>
    Cc: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/2623
    Fixes: 951894cf30f4 ("ALSA: hda/hdmi: Add Intel silent stream support")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20211222145350.24342-1-ville.syrjala@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b398fcbe4de1e1100867fdb6f447c6fbc8fe7085
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Sat Dec 18 13:39:25 2021 +0100

    ALSA: rawmidi - fix the uninitalized user_pversion
    
    commit 39a8fc4971a00d22536aeb7d446ee4a97810611b upstream.
    
    The user_pversion was uninitialized for the user space file structure
    in the open function, because the file private structure use
    kmalloc for the allocation.
    
    The kernel ALSA sequencer code clears the file structure, so no additional
    fixes are required.
    
    Cc: stable@kernel.org
    Cc: broonie@kernel.org
    BugLink: https://github.com/alsa-project/alsa-lib/issues/178
    Fixes: 09d23174402d ("ALSA: rawmidi: introduce SNDRV_RAWMIDI_IOCTL_USER_PVERSION")
    Reported-by: syzbot+88412ee8811832b00dbe@syzkaller.appspotmail.com
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20211218123925.2583847-1-perex@perex.cz
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd58303b05e23eaf752d7b300c2d67c95267d01
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Sun Dec 12 17:20:25 2021 +0000

    ALSA: drivers: opl3: Fix incorrect use of vp->state
    
    commit 2dee54b289fbc810669a1b2b8a0887fa1c9a14d7 upstream.
    
    Static analysis with scan-build has found an assignment to vp2 that is
    never used. It seems that the check on vp->state > 0 should be actually
    on vp2->state instead. Fix this.
    
    This dates back to 2002, I found the offending commit from the git
    history git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git,
    commit 91e39521bbf6 ("[PATCH] ALSA patch for 2.5.4")
    
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211212172025.470367-1-colin.i.king@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdaa60d900a7423d4e72bb81a98544ef96258bb4
Author: Xiaoke Wang <xkernel.wang@foxmail.com>
Date:   Mon Dec 13 15:39:31 2021 +0800

    ALSA: jack: Check the return value of kstrdup()
    
    commit c01c1db1dc632edafb0dff32d40daf4f9c1a4e19 upstream.
    
    kstrdup() can return NULL, it is better to check the return value of it.
    
    Signed-off-by: Xiaoke Wang <xkernel.wang@foxmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/tencent_094816F3522E0DC704056C789352EBBF0606@qq.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28b03ec2c0c5d541a74180f28d3a10696ccddbb3
Author: Mike Rapoport <rppt@kernel.org>
Date:   Mon Dec 13 12:27:57 2021 +0100

    x86/boot: Move EFI range reservation after cmdline parsing
    
    commit 2f5b3514c33fecad4003ce0f22ca9691492d310b upstream.
    
    The memory reservation in arch/x86/platform/efi/efi.c depends on at
    least two command line parameters. Put it back later in the boot process
    and move efi_memblock_x86_reserve_range() out of early_memory_reserve().
    
    An attempt to fix this was done in
    
      8d48bf8206f7 ("x86/boot: Pull up cmdline preparation and early param parsing")
    
    but that caused other troubles so it got reverted.
    
    The bug this is addressing is:
    
    Dan reports that Anjaneya Chagam can no longer use the efi=nosoftreserve
    kernel command line parameter to suppress "soft reservation" behavior.
    
    This is due to the fact that the following call-chain happens at boot:
    
      early_reserve_memory
      |-> efi_memblock_x86_reserve_range
          |-> efi_fake_memmap_early
    
    which does
    
            if (!efi_soft_reserve_enabled())
                    return;
    
    and that would have set EFI_MEM_NO_SOFT_RESERVE after having parsed
    "nosoftreserve".
    
    However, parse_early_param() gets called *after* it, leading to the boot
    cmdline not being taken into account.
    
    See also https://lore.kernel.org/r/e8dd8993c38702ee6dd73b3c11f158617e665607.camel@intel.com
    
      [ bp: Turn into a proper patch. ]
    
    Signed-off-by: Mike Rapoport <rppt@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211213112757.2612-4-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f95fcac5d66a0bbb2db4d56b54ef77b27475b7b5
Author: Borislav Petkov <bp@suse.de>
Date:   Mon Dec 13 12:27:56 2021 +0100

    Revert "x86/boot: Pull up cmdline preparation and early param parsing"
    
    commit fbe6183998546f8896ee0b620ece86deff5a2fd1 upstream.
    
    This reverts commit 8d48bf8206f77aa8687f0e241e901e5197e52423.
    
    It turned out to be a bad idea as it broke supplying mem= cmdline
    parameters due to parse_memopt() requiring preparatory work like setting
    up the e820 table in e820__memory_setup() in order to be able to exclude
    the range specified by mem=.
    
    Pulling that up would've broken Xen PV again, see threads at
    
      https://lkml.kernel.org/r/20210920120421.29276-1-jgross@suse.com
    
    due to xen_memory_setup() needing the first reservations in
    early_reserve_memory() - kernel and initrd - to have happened already.
    
    This could be fixed again by having Xen do those reservations itself...
    
    Long story short, revert this and do a simpler fix in a later patch.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211213112757.2612-3-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70e7705b02308f90ae8e81f92ae8eba99af4d439
Author: Philipp Rudo <prudo@redhat.com>
Date:   Fri Dec 24 21:12:39 2021 -0800

    kernel/crash_core: suppress unknown crashkernel parameter warning
    
    [ Upstream commit 71d2bcec2d4d69ff109c497e6611d6c53c8926d4 ]
    
    When booting with crashkernel= on the kernel command line a warning
    similar to
    
        Kernel command line: ro console=ttyS0 crashkernel=256M
        Unknown kernel command line parameters "crashkernel=256M", will be passed to user space.
    
    is printed.
    
    This comes from crashkernel= being parsed independent from the kernel
    parameter handling mechanism.  So the code in init/main.c doesn't know
    that crashkernel= is a valid kernel parameter and prints this incorrect
    warning.
    
    Suppress the warning by adding a dummy early_param handler for
    crashkernel=.
    
    Link: https://lkml.kernel.org/r/20211208133443.6867-1-prudo@redhat.com
    Fixes: 86d1919a4fb0 ("init: print out unknown kernel parameters")
    Signed-off-by: Philipp Rudo <prudo@redhat.com>
    Acked-by: Baoquan He <bhe@redhat.com>
    Cc: Andrew Halaney <ahalaney@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a34b51ea99b2e725e07543cbfbc6195d42e7e58
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Dec 22 21:49:41 2021 +0200

    platform/x86/intel: Remove X86_PLATFORM_DRIVERS_INTEL
    
    [ Upstream commit 4f6c131c3c31b9f68470ebd01320d5403d8719bb ]
    
    While introduction of this menu brings a nice view in the configuration tools,
    it brought more issues than solves, i.e. it prevents to locate files in the
    intel/ subfolder without touching non-related Kconfig dependencies elsewhere.
    Drop X86_PLATFORM_DRIVERS_INTEL altogether.
    
    Note, on x86 it's enabled by default and it's quite unlikely anybody wants to
    disable all of the modules in this submenu.
    
    Fixes: 8bd836feb6ca ("platform/x86: intel_skl_int3472: Move to intel/ subfolder")
    Suggested-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20211222194941.76054-1-andriy.shevchenko@linux.intel.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50f27a29d75851d78cc53fdfd4d72d775c62a418
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Mon Nov 8 14:35:59 2021 -0800

    compiler.h: Fix annotation macro misplacement with Clang
    
    [ Upstream commit dcce50e6cc4d86a63dc0a9a6ee7d4f948ccd53a1 ]
    
    When building with Clang and CONFIG_TRACE_BRANCH_PROFILING, there are a
    lot of unreachable warnings, like:
    
      arch/x86/kernel/traps.o: warning: objtool: handle_xfd_event()+0x134: unreachable instruction
    
    Without an input to the inline asm, 'volatile' is ignored for some
    reason and Clang feels free to move the reachable() annotation away from
    its intended location.
    
    Fix that by re-adding the counter value to the inputs.
    
    Fixes: f1069a8756b9 ("compiler.h: Avoid using inline asm operand modifiers")
    Fixes: c199f64ff93c ("instrumentation.h: Avoid using inline asm operand modifiers")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/0417e96909b97a406323409210de7bf13df0b170.1636410380.git.jpoimboe@redhat.com
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: x86@kernel.org
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cd3ef80100459b74cb84b0c7aab586702512fdf
Author: Ismael Luceno <ismael@iodev.co.uk>
Date:   Mon Nov 15 14:46:47 2021 +0100

    uapi: Fix undefined __always_inline on non-glibc systems
    
    [ Upstream commit cb8747b7d2a9e3d687a19a007575071d4b71cd05 ]
    
    This macro is defined by glibc itself, which makes the issue go unnoticed on
    those systems.  On non-glibc systems it causes build failures on several
    utilities and libraries, like bpftool and objtool.
    
    Fixes: 1d509f2a6ebc ("x86/insn: Support big endian cross-compiles")
    Fixes: 2d7ce0e8a704 ("tools/virtio: more stubs")
    Fixes: 3fb321fde22d ("selftests/net: ipv6 flowlabel")
    Fixes: 50b3ed57dee9 ("selftests/bpf: test bpf flow dissection")
    Fixes: 9cacf81f8161 ("bpf: Remove extra lock_sock for TCP_ZEROCOPY_RECEIVE")
    Fixes: a4b2061242ec ("tools include uapi: Grab a copy of linux/in.h")
    Fixes: b12d6ec09730 ("bpf: btf: add btf print functionality")
    Fixes: c0dd967818a2 ("tools, include: Grab a copy of linux/erspan.h")
    Fixes: c4b6014e8bb0 ("tools: Add copy of perf_event.h to tools/include/linux/")
    
    Signed-off-by: Ismael Luceno <ismael@iodev.co.uk>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20211115134647.1921-1-ismael@iodev.co.uk
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a351388b29551004baacde93546f06f180c4f68
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Thu Nov 25 12:05:19 2021 +0100

    ARM: 9160/1: NOMMU: Reload __secondary_data after PROCINFO_INITFUNC
    
    [ Upstream commit 7202216a6f34d571a22274e729f841256bf8b1ef ]
    
    __secondary_data used to reside in r7 around call to
    PROCINFO_INITFUNC. After commit 95731b8ee63e ("ARM: 9059/1: cache-v7:
    get rid of mini-stack") r7 is used as a scratch register, so we have
    to reload __secondary_data before we setup the stack pointer.
    
    Fixes: 95731b8ee63e ("ARM: 9059/1: cache-v7: get rid of mini-stack")
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afda22fea7662e244d0a6601c4e3c596b55966f5
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Nov 13 08:55:06 2021 -0800

    hwmon: (lm90) Drop critical attribute support for MAX6654
    
    [ Upstream commit 16ba51b5dcd3f6dde2e51d5ccc86313119dcf889 ]
    
    Tests with a real chip and a closer look into the datasheet show that
    MAX6654 does not support CRIT/THERM/OVERTEMP limits, so drop support
    of the respective attributes for this chip.
    
    Introduce LM90_HAVE_CRIT flag and use it to instantiate critical limit
    attributes to solve the problem.
    
    Cc: Josh Lehan <krellan@google.com>
    Fixes: 229d495d8189 ("hwmon: (lm90) Add max6654 support to lm90 driver")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d21029e7199c8727de48a437ea81e832a621956
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Mon Oct 18 20:03:32 2021 -0700

    hwmon: (lm90) Add basic support for TI TMP461
    
    [ Upstream commit f8344f7693a25d9025a59d164450b50c6f5aa3c0 ]
    
    TMP461 is almost identical to TMP451 and was actually detected as TMP451
    with the existing lm90 driver if its I2C address is 0x4c. Add support
    for it to the lm90 driver. At the same time, improve the chip detection
    function to at least try to distinguish between TMP451 and TMP461.
    
    As a side effect, this fixes commit 24333ac26d01 ("hwmon: (tmp401) use
    smb word operations instead of 2 smb byte operations"). TMP461 does not
    support word operations on temperature registers, which causes bad
    temperature readings with the tmp401 driver. The lm90 driver does not
    perform word operations on temperature registers and thus does not have
    this problem.
    
    Support is listed as basic because TMP461 supports a sensor resolution
    of 0.0625 degrees C, while the lm90 driver assumes a resolution of 0.125
    degrees C. Also, the TMP461 supports negative temperatures with its
    default temperature range, which is not the case for similar chips
    supported by the lm90 and the tmp401 drivers. Those limitations will be
    addressed with follow-up patches.
    
    Fixes: 24333ac26d01 ("hwmon: (tmp401) use smb word operations instead of 2 smb byte operations")
    Reported-by: David T. Wilson <david.wilson@nasa.gov>
    Cc: David T. Wilson <david.wilson@nasa.gov>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 983084e19aeb648f034b2be9f08dff2199855683
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Oct 21 01:49:50 2021 -0700

    hwmon: (lm90) Introduce flag indicating extended temperature support
    
    [ Upstream commit f347e249fcf920ad6974cbd898e2ec0b366a1c34 ]
    
    A flag indicating extended temperature support makes it easier
    to add support for additional chips with this functionality.
    
    Cc: David T. Wilson <david.wilson@nasa.gov>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d105f30bea9104c590a9e5b495cb8a49bdfe405f
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Nov 17 09:51:47 2021 -0800

    hwmon: (lm90) Prevent integer overflow/underflow in hysteresis calculations
    
    [ Upstream commit 55840b9eae5367b5d5b29619dc2fb7e4596dba46 ]
    
    Commit b50aa49638c7 ("hwmon: (lm90) Prevent integer underflows of
    temperature calculations") addressed a number of underflow situations
    when writing temperature limits. However, it missed one situation, seen
    when an attempt is made to set the hysteresis value to MAX_LONG and the
    critical temperature limit is negative.
    
    Use clamp_val() when setting the hysteresis temperature to ensure that
    the provided value can never overflow or underflow.
    
    Fixes: b50aa49638c7 ("hwmon: (lm90) Prevent integer underflows of temperature calculations")
    Cc: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b8f0e940972ac34128efbe6cfb904356d088bfe
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Nov 6 10:02:44 2021 -0700

    hwmon: (lm90) Fix usage of CONFIG2 register in detect function
    
    [ Upstream commit fce15c45d3fbd9fc1feaaf3210d8e3f8b33dfd3a ]
    
    The detect function had a comment "Make compiler happy" when id did not
    read the second configuration register. As it turns out, the code was
    checking the contents of this register for manufacturer ID 0xA1 (NXP
    Semiconductor/Philips), but never actually read the register. So it
    wasn't surprising that the compiler complained, and it indeed had a point.
    Fix the code to read the register contents for manufacturer ID 0xa1.
    
    At the same time, the code was reading the register for manufacturer ID
    0x41 (Analog Devices), but it was not using the results. In effect it was
    just checking if reading the register returned an error. That doesn't
    really add much if any value, so stop doing that.
    
    Fixes: f90be42fb383 ("hwmon: (lm90) Refactor reading of config2 register")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79c6d4fa1be1fd0819c50ebb4dee101bbbc4d20e
Author: Phil Elwell <phil@raspberrypi.com>
Date:   Mon Dec 6 09:22:36 2021 +0000

    pinctrl: bcm2835: Change init order for gpio hogs
    
    [ Upstream commit 266423e60ea1b953fcc0cd97f3dad85857e434d1 ]
    
    ...and gpio-ranges
    
    pinctrl-bcm2835 is a combined pinctrl/gpio driver. Currently the gpio
    side is registered first, but this breaks gpio hogs (which are
    configured during gpiochip_add_data). Part of the hog initialisation
    is a call to pinctrl_gpio_request, and since the pinctrl driver hasn't
    yet been registered this results in an -EPROBE_DEFER from which it can
    never recover.
    
    Change the initialisation sequence to register the pinctrl driver
    first.
    
    This also solves a similar problem with the gpio-ranges property, which
    is required in order for released pins to be returned to inputs.
    
    Fixes: 73345a18d464b ("pinctrl: bcm2835: Pass irqchip when adding gpiochip")
    Signed-off-by: Phil Elwell <phil@raspberrypi.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20211206092237.4105895-2-phil@raspberrypi.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfd5b60b5342b6b505a104e48f08ad9b9bdbbd7b
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Mon Nov 29 00:08:13 2021 -0800

    Input: elantech - fix stack out of bound access in elantech_change_report_id()
    
    [ Upstream commit 1d72d9f960ccf1052a0630a68c3d358791dbdaaa ]
    
    The array param[] in elantech_change_report_id() must be at least 3
    bytes, because elantech_read_reg_params() is calling ps2_command() with
    PSMOUSE_CMD_GETINFO, that is going to access 3 bytes from param[], but
    it's defined in the stack as an array of 2 bytes, therefore we have a
    potential stack out-of-bounds access here, also confirmed by KASAN:
    
    [    6.512374] BUG: KASAN: stack-out-of-bounds in __ps2_command+0x372/0x7e0
    [    6.512397] Read of size 1 at addr ffff8881024d77c2 by task kworker/2:1/118
    
    [    6.512416] CPU: 2 PID: 118 Comm: kworker/2:1 Not tainted 5.13.0-22-generic #22+arighi20211110
    [    6.512428] Hardware name: LENOVO 20T8000QGE/20T8000QGE, BIOS R1AET32W (1.08 ) 08/14/2020
    [    6.512436] Workqueue: events_long serio_handle_event
    [    6.512453] Call Trace:
    [    6.512462]  show_stack+0x52/0x58
    [    6.512474]  dump_stack+0xa1/0xd3
    [    6.512487]  print_address_description.constprop.0+0x1d/0x140
    [    6.512502]  ? __ps2_command+0x372/0x7e0
    [    6.512516]  __kasan_report.cold+0x7d/0x112
    [    6.512527]  ? _raw_write_lock_irq+0x20/0xd0
    [    6.512539]  ? __ps2_command+0x372/0x7e0
    [    6.512552]  kasan_report+0x3c/0x50
    [    6.512564]  __asan_load1+0x6a/0x70
    [    6.512575]  __ps2_command+0x372/0x7e0
    [    6.512589]  ? ps2_drain+0x240/0x240
    [    6.512601]  ? dev_printk_emit+0xa2/0xd3
    [    6.512612]  ? dev_vprintk_emit+0xc5/0xc5
    [    6.512621]  ? __kasan_check_write+0x14/0x20
    [    6.512634]  ? mutex_lock+0x8f/0xe0
    [    6.512643]  ? __mutex_lock_slowpath+0x20/0x20
    [    6.512655]  ps2_command+0x52/0x90
    [    6.512670]  elantech_ps2_command+0x4f/0xc0 [psmouse]
    [    6.512734]  elantech_change_report_id+0x1e6/0x256 [psmouse]
    [    6.512799]  ? elantech_report_trackpoint.constprop.0.cold+0xd/0xd [psmouse]
    [    6.512863]  ? ps2_command+0x7f/0x90
    [    6.512877]  elantech_query_info.cold+0x6bd/0x9ed [psmouse]
    [    6.512943]  ? elantech_setup_ps2+0x460/0x460 [psmouse]
    [    6.513005]  ? psmouse_reset+0x69/0xb0 [psmouse]
    [    6.513064]  ? psmouse_attr_set_helper+0x2a0/0x2a0 [psmouse]
    [    6.513122]  ? phys_pmd_init+0x30e/0x521
    [    6.513137]  elantech_init+0x8a/0x200 [psmouse]
    [    6.513200]  ? elantech_init_ps2+0xf0/0xf0 [psmouse]
    [    6.513249]  ? elantech_query_info+0x440/0x440 [psmouse]
    [    6.513296]  ? synaptics_send_cmd+0x60/0x60 [psmouse]
    [    6.513342]  ? elantech_query_info+0x440/0x440 [psmouse]
    [    6.513388]  ? psmouse_try_protocol+0x11e/0x170 [psmouse]
    [    6.513432]  psmouse_extensions+0x65d/0x6e0 [psmouse]
    [    6.513476]  ? psmouse_try_protocol+0x170/0x170 [psmouse]
    [    6.513519]  ? mutex_unlock+0x22/0x40
    [    6.513526]  ? ps2_command+0x7f/0x90
    [    6.513536]  ? psmouse_probe+0xa3/0xf0 [psmouse]
    [    6.513580]  psmouse_switch_protocol+0x27d/0x2e0 [psmouse]
    [    6.513624]  psmouse_connect+0x272/0x530 [psmouse]
    [    6.513669]  serio_driver_probe+0x55/0x70
    [    6.513679]  really_probe+0x190/0x720
    [    6.513689]  driver_probe_device+0x160/0x1f0
    [    6.513697]  device_driver_attach+0x119/0x130
    [    6.513705]  ? device_driver_attach+0x130/0x130
    [    6.513713]  __driver_attach+0xe7/0x1a0
    [    6.513720]  ? device_driver_attach+0x130/0x130
    [    6.513728]  bus_for_each_dev+0xfb/0x150
    [    6.513738]  ? subsys_dev_iter_exit+0x10/0x10
    [    6.513748]  ? _raw_write_unlock_bh+0x30/0x30
    [    6.513757]  driver_attach+0x2d/0x40
    [    6.513764]  serio_handle_event+0x199/0x3d0
    [    6.513775]  process_one_work+0x471/0x740
    [    6.513785]  worker_thread+0x2d2/0x790
    [    6.513794]  ? process_one_work+0x740/0x740
    [    6.513802]  kthread+0x1b4/0x1e0
    [    6.513809]  ? set_kthread_struct+0x80/0x80
    [    6.513816]  ret_from_fork+0x22/0x30
    
    [    6.513832] The buggy address belongs to the page:
    [    6.513838] page:00000000bc35e189 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1024d7
    [    6.513847] flags: 0x17ffffc0000000(node=0|zone=2|lastcpupid=0x1fffff)
    [    6.513860] raw: 0017ffffc0000000 dead000000000100 dead000000000122 0000000000000000
    [    6.513867] raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    [    6.513872] page dumped because: kasan: bad access detected
    
    [    6.513879] addr ffff8881024d77c2 is located in stack of task kworker/2:1/118 at offset 34 in frame:
    [    6.513887]  elantech_change_report_id+0x0/0x256 [psmouse]
    
    [    6.513941] this frame has 1 object:
    [    6.513947]  [32, 34) 'param'
    
    [    6.513956] Memory state around the buggy address:
    [    6.513962]  ffff8881024d7680: f2 f2 f2 f2 f2 00 00 f3 f3 00 00 00 00 00 00 00
    [    6.513969]  ffff8881024d7700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [    6.513976] >ffff8881024d7780: 00 00 00 00 f1 f1 f1 f1 02 f3 f3 f3 00 00 00 00
    [    6.513982]                                            ^
    [    6.513988]  ffff8881024d7800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [    6.513995]  ffff8881024d7880: 00 f1 f1 f1 f1 03 f2 03 f2 03 f3 f3 f3 00 00 00
    [    6.514000] ==================================================================
    
    Define param[] in elantech_change_report_id() as an array of 3 bytes to
    prevent the out-of-bounds access in the stack.
    
    Fixes: e4c9062717fe ("Input: elantech - fix protocol errors for some trackpoints in SMBus mode")
    BugLink: https://bugs.launchpad.net/bugs/1945590
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Reviewed-by: Wolfram Sang <wsa@kernel.org>
    Link: https://lore.kernel.org/r/20211116095559.24395-1-andrea.righi@canonical.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b480d5f42d4527936fe0d878310222d622152bd1
Author: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
Date:   Thu Dec 23 16:36:33 2021 +0900

    net: stmmac: dwmac-visconti: Fix value of ETHER_CLK_SEL_FREQ_SEL_2P5M
    
    [ Upstream commit 391e5975c0208ce3739587b33eba08be3e473d79 ]
    
    ETHER_CLK_SEL_FREQ_SEL_2P5M is not 0 bit of the register. This is a
    value, which is 0. Fix from BIT(0) to 0.
    
    Reported-by: Yuji Ishikawa <yuji2.ishikawa@toshiba.co.jp>
    Fixes: b38dd98ff8d0 ("net: stmmac: Add Toshiba Visconti SoCs glue driver")
    Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Link: https://lore.kernel.org/r/20211223073633.101306-1-nobuhiro1.iwamatsu@toshiba.co.jp
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f80527200d01d1a199f566471a43ea31c8cd73e5
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Thu Dec 23 17:27:01 2021 +0800

    r8152: fix the force speed doesn't work for RTL8156
    
    [ Upstream commit 45bf944e6703d43fe5e285808312acd8a34c1a24 ]
    
    It needs to set mdio force mode. Otherwise, link off always occurs when
    setting force speed.
    
    Fixes: 195aae321c82 ("r8152: support new chips")
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8871c6734d8e17b0ea2c58d9ebe9f201c60a8eb
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Thu Dec 23 16:31:38 2021 +0100

    net: bridge: fix ioctl old_deviceless bridge argument
    
    [ Upstream commit d95a56207c078e2019cf6659d890ec1e987e8420 ]
    
    Commit 561d8352818f ("bridge: use ndo_siocdevprivate") changed the
    source and destination arguments of copy_{to,from}_user in bridge's
    old_deviceless() from args[1] to uarg breaking SIOC{G,S}IFBR ioctls.
    
    Commit cbd7ad29a507 ("net: bridge: fix ioctl old_deviceless bridge
    argument") fixed only BRCTL_{ADD,DEL}_BRIDGES commands leaving
    BRCTL_GET_BRIDGES one untouched.
    
    The fixes BRCTL_GET_BRIDGES as well and has been tested with busybox's
    brctl.
    
    Example of broken brctl:
    $ brctl show
    bridge name     bridge id               STP enabled     interfaces
    brctl: can't get bridge name for index 0: No such device or address
    
    Example of fixed brctl:
    $ brctl show
    bridge name     bridge id               STP enabled     interfaces
    br0             8000.000000000000       no
    
    Fixes: 561d8352818f ("bridge: use ndo_siocdevprivate")
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Link: https://lore.kernel.org/all/20211223153139.7661-2-repk@triplefau.lt/
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c66ea39c6c44821b2a72d9b27bba7d3a839a984
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Tue Sep 28 15:12:39 2021 -0500

    net: bridge: Use array_size() helper in copy_to_user()
    
    [ Upstream commit 865bfb2affa8eff5182b29aa90803a2df4409834 ]
    
    Use array_size() helper instead of the open-coded version in
    copy_to_user(). These sorts of multiplication factors need
    to be wrapped in array_size().
    
    Link: https://github.com/KSPP/linux/issues/160
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be2473e5f377fb7fe471a5096f37a2d73a8367e6
Author: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Date:   Thu Dec 23 15:39:28 2021 +0800

    net: stmmac: ptp: fix potentially overflowing expression
    
    [ Upstream commit eccffcf4657ab9a148faaa0eb354d2a091caf552 ]
    
    Convert the u32 variable to type u64 in a context where expression of
    type u64 is required to avoid potential overflow.
    
    Fixes: e9e3720002f6 ("net: stmmac: ptp: update tas basetime after ptp adjust")
    Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
    Link: https://lore.kernel.org/r/20211223073928.37371-1-xiaoliang.yang_1@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2269ae48598e05b59ec9ea9e6e44fd33941130d
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Dec 22 19:39:52 2021 +0100

    veth: ensure skb entering GRO are not cloned.
    
    [ Upstream commit 9695b7de5b4760ed22132aca919570c0190cb0ce ]
    
    After commit d3256efd8e8b ("veth: allow enabling NAPI even without XDP"),
    if GRO is enabled on a veth device and TSO is disabled on the peer
    device, TCP skbs will go through the NAPI callback. If there is no XDP
    program attached, the veth code does not perform any share check, and
    shared/cloned skbs could enter the GRO engine.
    
    Ignat reported a BUG triggered later-on due to the above condition:
    
    [   53.970529][    C1] kernel BUG at net/core/skbuff.c:3574!
    [   53.981755][    C1] invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI
    [   53.982634][    C1] CPU: 1 PID: 19 Comm: ksoftirqd/1 Not tainted 5.16.0-rc5+ #25
    [   53.982634][    C1] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
    [   53.982634][    C1] RIP: 0010:skb_shift+0x13ef/0x23b0
    [   53.982634][    C1] Code: ea 03 0f b6 04 02 48 89 fa 83 e2 07 38 d0
    7f 08 84 c0 0f 85 41 0c 00 00 41 80 7f 02 00 4d 8d b5 d0 00 00 00 0f
    85 74 f5 ff ff <0f> 0b 4d 8d 77 20 be 04 00 00 00 4c 89 44 24 78 4c 89
    f7 4c 89 8c
    [   53.982634][    C1] RSP: 0018:ffff8881008f7008 EFLAGS: 00010246
    [   53.982634][    C1] RAX: 0000000000000000 RBX: ffff8881180b4c80 RCX: 0000000000000000
    [   53.982634][    C1] RDX: 0000000000000002 RSI: ffff8881180b4d3c RDI: ffff88810bc9cac2
    [   53.982634][    C1] RBP: ffff8881008f70b8 R08: ffff8881180b4cf4 R09: ffff8881180b4cf0
    [   53.982634][    C1] R10: ffffed1022999e5c R11: 0000000000000002 R12: 0000000000000590
    [   53.982634][    C1] R13: ffff88810f940c80 R14: ffff88810f940d50 R15: ffff88810bc9cac0
    [   53.982634][    C1] FS:  0000000000000000(0000) GS:ffff888235880000(0000) knlGS:0000000000000000
    [   53.982634][    C1] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   53.982634][    C1] CR2: 00007ff5f9b86680 CR3: 0000000108ce8004 CR4: 0000000000170ee0
    [   53.982634][    C1] Call Trace:
    [   53.982634][    C1]  <TASK>
    [   53.982634][    C1]  tcp_sacktag_walk+0xaba/0x18e0
    [   53.982634][    C1]  tcp_sacktag_write_queue+0xe7b/0x3460
    [   53.982634][    C1]  tcp_ack+0x2666/0x54b0
    [   53.982634][    C1]  tcp_rcv_established+0x4d9/0x20f0
    [   53.982634][    C1]  tcp_v4_do_rcv+0x551/0x810
    [   53.982634][    C1]  tcp_v4_rcv+0x22ed/0x2ed0
    [   53.982634][    C1]  ip_protocol_deliver_rcu+0x96/0xaf0
    [   53.982634][    C1]  ip_local_deliver_finish+0x1e0/0x2f0
    [   53.982634][    C1]  ip_sublist_rcv_finish+0x211/0x440
    [   53.982634][    C1]  ip_list_rcv_finish.constprop.0+0x424/0x660
    [   53.982634][    C1]  ip_list_rcv+0x2c8/0x410
    [   53.982634][    C1]  __netif_receive_skb_list_core+0x65c/0x910
    [   53.982634][    C1]  netif_receive_skb_list_internal+0x5f9/0xcb0
    [   53.982634][    C1]  napi_complete_done+0x188/0x6e0
    [   53.982634][    C1]  gro_cell_poll+0x10c/0x1d0
    [   53.982634][    C1]  __napi_poll+0xa1/0x530
    [   53.982634][    C1]  net_rx_action+0x567/0x1270
    [   53.982634][    C1]  __do_softirq+0x28a/0x9ba
    [   53.982634][    C1]  run_ksoftirqd+0x32/0x60
    [   53.982634][    C1]  smpboot_thread_fn+0x559/0x8c0
    [   53.982634][    C1]  kthread+0x3b9/0x490
    [   53.982634][    C1]  ret_from_fork+0x22/0x30
    [   53.982634][    C1]  </TASK>
    
    Address the issue by skipping the GRO stage for shared or cloned skbs.
    To reduce the chance of OoO, try to unclone the skbs before giving up.
    
    v1 -> v2:
     - use avoid skb_copy and fallback to netif_receive_skb  - Eric
    
    Reported-by: Ignat Korchagin <ignat@cloudflare.com>
    Fixes: d3256efd8e8b ("veth: allow enabling NAPI even without XDP")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Tested-by: Ignat Korchagin <ignat@cloudflare.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/b5f61c5602aab01bac8d711d8d1bfab0a4817db7.1640197544.git.pabeni@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20fb0dc35bf9f2f3ff6336bc0dd21e22bbc6d51a
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Dec 22 20:26:56 2021 -0700

    io_uring: zero iocb->ki_pos for stream file types
    
    [ Upstream commit 7b9762a5e8837b92a027d58d396a9d27f6440c36 ]
    
    io_uring supports using offset == -1 for using the current file position,
    and we read that in as part of read/write command setup. For the non-iter
    read/write types we pass in NULL for the position pointer, but for the
    iter types we should not be passing any anything but 0 for the position
    for a stream.
    
    Clear kiocb->ki_pos if the file is a stream, don't leave it as -1. If we
    do, then the request will error with -ESPIPE.
    
    Fixes: ba04291eb66e ("io_uring: allow use of offset == -1 to mean file position")
    Link: https://github.com/axboe/liburing/discussions/501
    Reported-by: Samuel Williams <samuel.williams@oriontransfer.co.nz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cf03976e1f00b008928256255abc803e3872153
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Tue Dec 21 23:10:43 2021 +0300

    asix: fix wrong return value in asix_check_host_enable()
    
    [ Upstream commit d1652b70d07cc3eed96210c876c4879e1655f20e ]
    
    If asix_read_cmd() returns 0 on 30th interation, 0 will be returned from
    asix_check_host_enable(), which is logically wrong. Fix it by returning
    -ETIMEDOUT explicitly if we have exceeded 30 iterations
    
    Also, replaced 30 with #define as suggested by Andrew
    
    Fixes: a786e3195d6a ("net: asix: fix uninit value bugs")
    Reported-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/ecd3470ce6c2d5697ac635d0d3b14a47defb4acb.1640117288.git.paskripkin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d259f621c85949f30cc578cac813b82bb5169f56
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Tue Dec 21 23:10:36 2021 +0300

    asix: fix uninit-value in asix_mdio_read()
    
    [ Upstream commit 8035b1a2a37a29d8c717ef84fca8fe7278bc9f03 ]
    
    asix_read_cmd() may read less than sizeof(smsr) bytes and in this case
    smsr will be uninitialized.
    
    Fail log:
    BUG: KMSAN: uninit-value in asix_check_host_enable drivers/net/usb/asix_common.c:82 [inline]
    BUG: KMSAN: uninit-value in asix_check_host_enable drivers/net/usb/asix_common.c:82 [inline] drivers/net/usb/asix_common.c:497
    BUG: KMSAN: uninit-value in asix_mdio_read+0x3c1/0xb00 drivers/net/usb/asix_common.c:497 drivers/net/usb/asix_common.c:497
     asix_check_host_enable drivers/net/usb/asix_common.c:82 [inline]
     asix_check_host_enable drivers/net/usb/asix_common.c:82 [inline] drivers/net/usb/asix_common.c:497
     asix_mdio_read+0x3c1/0xb00 drivers/net/usb/asix_common.c:497 drivers/net/usb/asix_common.c:497
    
    Fixes: d9fe64e51114 ("net: asix: Add in_pm parameter")
    Reported-and-tested-by: syzbot+f44badb06036334e867a@syzkaller.appspotmail.com
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Link: https://lore.kernel.org/r/8966e3b514edf39857dd93603fc79ec02e000a75.1640117288.git.paskripkin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d00726b7061cec4641351acae68547d40f73ffdb
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Mon Dec 20 22:03:44 2021 +0800

    sfc: falcon: Check null pointer of rx_queue->page_ring
    
    [ Upstream commit 9b8bdd1eb5890aeeab7391dddcf8bd51f7b07216 ]
    
    Because of the possible failure of the kcalloc, it should be better to
    set rx_queue->page_ptr_mask to 0 when it happens in order to maintain
    the consistency.
    
    Fixes: 5a6681e22c14 ("sfc: separate out SFC4000 ("Falcon") support into new sfc-falcon driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20211220140344.978408-1-jiasheng@iscas.ac.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20c3efcca6126f1c2bac32dc73daa3c5d8c9e3d2
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Mon Dec 20 21:56:03 2021 +0800

    sfc: Check null pointer of rx_queue->page_ring
    
    [ Upstream commit bdf1b5c3884f6a0dc91b0dbdb8c3b7d205f449e0 ]
    
    Because of the possible failure of the kcalloc, it should be better to
    set rx_queue->page_ptr_mask to 0 when it happens in order to maintain
    the consistency.
    
    Fixes: 5a6681e22c14 ("sfc: separate out SFC4000 ("Falcon") support into new sfc-falcon driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20211220135603.954944-1-jiasheng@iscas.ac.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8307c1ecd36691718cc4044c8f8e87c8e0cc82f8
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:59:44 2021 +0800

    net: ks8851: Check for error irq
    
    [ Upstream commit 99d7fbb5cedf598f67e8be106d6c7b8d91366aef ]
    
    Because platform_get_irq() could fail and return error irq.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: 797047f875b5 ("net: ks8851: Implement Parallel bus operations")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98a5242e82f223baadb3d6d1f6ddaca400b57eb6
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:41:12 2021 +0800

    drivers: net: smc911x: Check for error irq
    
    [ Upstream commit cb93b3e11d405f20a405a07482d01147ef4934a3 ]
    
    Because platform_get_irq() could fail and return error irq.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: ae150435b59e ("smsc: Move the SMC (SMSC) drivers")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 643c89669e31352f97a6f67e948ac346f003289f
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:12:07 2021 +0800

    fjes: Check for error irq
    
    [ Upstream commit db6d6afe382de5a65d6ccf51253ab48b8e8336c3 ]
    
    I find that platform_get_irq() will not always succeed.
    It will return error irq in case of the failure.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: 658d439b2292 ("fjes: Introduce FUJITSU Extended Socket Network Device driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a038c504f6f5027b2c0422c66c365afe6f271ab8
Author: Fernando Fernandez Mancera <ffmancera@riseup.net>
Date:   Tue Dec 21 12:13:45 2021 +0100

    bonding: fix ad_actor_system option setting to default
    
    [ Upstream commit 1c15b05baea71a5ff98235783e3e4ad227760876 ]
    
    When 802.3ad bond mode is configured the ad_actor_system option is set to
    "00:00:00:00:00:00". But when trying to set the all-zeroes MAC as actors'
    system address it was failing with EINVAL.
    
    An all-zeroes ethernet address is valid, only multicast addresses are not
    valid values.
    
    Fixes: 171a42c38c6e ("bonding: add netlink support for sys prio, actor sys mac, and port key")
    Signed-off-by: Fernando Fernandez Mancera <ffmancera@riseup.net>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Link: https://lore.kernel.org/r/20211221111345.2462-1-ffmancera@riseup.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f0d95fb3755c9ced828377bf73a4efb7d4e13be
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Mon Dec 20 14:06:56 2021 +0100

    gpio: virtio: remove timeout
    
    [ Upstream commit 3e4d9a485029aa9e172dab5420abe775fd86f8e8 ]
    
    The driver imposes an arbitrary one second timeout on virtio requests,
    but the specification doesn't prevent the virtio device from taking
    longer to process requests, so remove this timeout to support all
    systems and device implementations.
    
    Fixes: 3a29355a22c0275fe86 ("gpio: Add virtio-gpio driver")
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b3f7e4b10f343f05b5fb513b07a9168fbf1172e
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Dec 21 15:00:34 2021 +0800

    ipmi: Fix UAF when uninstall ipmi_si and ipmi_msghandler module
    
    [ Upstream commit ffb76a86f8096a8206be03b14adda6092e18e275 ]
    
    Hi,
    
    When testing install and uninstall of ipmi_si.ko and ipmi_msghandler.ko,
    the system crashed.
    
    The log as follows:
    [  141.087026] BUG: unable to handle kernel paging request at ffffffffc09b3a5a
    [  141.087241] PGD 8fe4c0d067 P4D 8fe4c0d067 PUD 8fe4c0f067 PMD 103ad89067 PTE 0
    [  141.087464] Oops: 0010 [#1] SMP NOPTI
    [  141.087580] CPU: 67 PID: 668 Comm: kworker/67:1 Kdump: loaded Not tainted 4.18.0.x86_64 #47
    [  141.088009] Workqueue: events 0xffffffffc09b3a40
    [  141.088009] RIP: 0010:0xffffffffc09b3a5a
    [  141.088009] Code: Bad RIP value.
    [  141.088009] RSP: 0018:ffffb9094e2c3e88 EFLAGS: 00010246
    [  141.088009] RAX: 0000000000000000 RBX: ffff9abfdb1f04a0 RCX: 0000000000000000
    [  141.088009] RDX: 0000000000000000 RSI: 0000000000000246 RDI: 0000000000000246
    [  141.088009] RBP: 0000000000000000 R08: ffff9abfffee3cb8 R09: 00000000000002e1
    [  141.088009] R10: ffffb9094cb73d90 R11: 00000000000f4240 R12: ffff9abfffee8700
    [  141.088009] R13: 0000000000000000 R14: ffff9abfdb1f04a0 R15: ffff9abfdb1f04a8
    [  141.088009] FS:  0000000000000000(0000) GS:ffff9abfffec0000(0000) knlGS:0000000000000000
    [  141.088009] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  141.088009] CR2: ffffffffc09b3a30 CR3: 0000008fe4c0a001 CR4: 00000000007606e0
    [  141.088009] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  141.088009] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  141.088009] PKRU: 55555554
    [  141.088009] Call Trace:
    [  141.088009]  ? process_one_work+0x195/0x390
    [  141.088009]  ? worker_thread+0x30/0x390
    [  141.088009]  ? process_one_work+0x390/0x390
    [  141.088009]  ? kthread+0x10d/0x130
    [  141.088009]  ? kthread_flush_work_fn+0x10/0x10
    [  141.088009]  ? ret_from_fork+0x35/0x40] BUG: unable to handle kernel paging request at ffffffffc0b28a5a
    [  200.223240] PGD 97fe00d067 P4D 97fe00d067 PUD 97fe00f067 PMD a580cbf067 PTE 0
    [  200.223464] Oops: 0010 [#1] SMP NOPTI
    [  200.223579] CPU: 63 PID: 664 Comm: kworker/63:1 Kdump: loaded Not tainted 4.18.0.x86_64 #46
    [  200.224008] Workqueue: events 0xffffffffc0b28a40
    [  200.224008] RIP: 0010:0xffffffffc0b28a5a
    [  200.224008] Code: Bad RIP value.
    [  200.224008] RSP: 0018:ffffbf3c8e2a3e88 EFLAGS: 00010246
    [  200.224008] RAX: 0000000000000000 RBX: ffffa0799ad6bca0 RCX: 0000000000000000
    [  200.224008] RDX: 0000000000000000 RSI: 0000000000000246 RDI: 0000000000000246
    [  200.224008] RBP: 0000000000000000 R08: ffff9fe43fde3cb8 R09: 00000000000000d5
    [  200.224008] R10: ffffbf3c8cb53d90 R11: 00000000000f4240 R12: ffff9fe43fde8700
    [  200.224008] R13: 0000000000000000 R14: ffffa0799ad6bca0 R15: ffffa0799ad6bca8
    [  200.224008] FS:  0000000000000000(0000) GS:ffff9fe43fdc0000(0000) knlGS:0000000000000000
    [  200.224008] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  200.224008] CR2: ffffffffc0b28a30 CR3: 00000097fe00a002 CR4: 00000000007606e0
    [  200.224008] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  200.224008] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  200.224008] PKRU: 55555554
    [  200.224008] Call Trace:
    [  200.224008]  ? process_one_work+0x195/0x390
    [  200.224008]  ? worker_thread+0x30/0x390
    [  200.224008]  ? process_one_work+0x390/0x390
    [  200.224008]  ? kthread+0x10d/0x130
    [  200.224008]  ? kthread_flush_work_fn+0x10/0x10
    [  200.224008]  ? ret_from_fork+0x35/0x40
    [  200.224008] kernel fault(0x1) notification starting on CPU 63
    [  200.224008] kernel fault(0x1) notification finished on CPU 63
    [  200.224008] CR2: ffffffffc0b28a5a
    [  200.224008] ---[ end trace c82a412d93f57412 ]---
    
    The reason is as follows:
    T1: rmmod ipmi_si.
        ->ipmi_unregister_smi()
            -> ipmi_bmc_unregister()
                -> __ipmi_bmc_unregister()
                    -> kref_put(&bmc->usecount, cleanup_bmc_device);
                        -> schedule_work(&bmc->remove_work);
    
    T2: rmmod ipmi_msghandler.
        ipmi_msghander module uninstalled, and the module space
        will be freed.
    
    T3: bmc->remove_work doing cleanup the bmc resource.
        -> cleanup_bmc_work()
            -> platform_device_unregister(&bmc->pdev);
                -> platform_device_del(pdev);
                    -> device_del(&pdev->dev);
                        -> kobject_uevent(&dev->kobj, KOBJ_REMOVE);
                            -> kobject_uevent_env()
                                -> dev_uevent()
                                    -> if (dev->type && dev->type->name)
    
       'dev->type'(bmc_device_type) pointer space has freed when uninstall
        ipmi_msghander module, 'dev->type->name' cause the system crash.
    
    drivers/char/ipmi/ipmi_msghandler.c:
    2820 static const struct device_type bmc_device_type = {
    2821         .groups         = bmc_dev_attr_groups,
    2822 };
    
    Steps to reproduce:
    Add a time delay in cleanup_bmc_work() function,
    and uninstall ipmi_si and ipmi_msghandler module.
    
    2910 static void cleanup_bmc_work(struct work_struct *work)
    2911 {
    2912         struct bmc_device *bmc = container_of(work, struct bmc_device,
    2913                                               remove_work);
    2914         int id = bmc->pdev.id; /* Unregister overwrites id */
    2915
    2916         msleep(3000);   <---
    2917         platform_device_unregister(&bmc->pdev);
    2918         ida_simple_remove(&ipmi_bmc_ida, id);
    2919 }
    
    Use 'remove_work_wq' instead of 'system_wq' to solve this issues.
    
    Fixes: b2cfd8ab4add ("ipmi: Rework device id and guid handling to catch changing BMCs")
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Message-Id: <1640070034-56671-1-git-send-email-wubo40@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33385aded71e2bcb120e18c56cd05cbbab916ec1
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Mon Dec 20 12:18:44 2021 -0800

    igb: fix deadlock caused by taking RTNL in RPM resume path
    
    [ Upstream commit ac8c58f5b535d6272324e2b8b4a0454781c9147e ]
    
    Recent net core changes caused an issue with few Intel drivers
    (reportedly igb), where taking RTNL in RPM resume path results in a
    deadlock. See [0] for a bug report. I don't think the core changes
    are wrong, but taking RTNL in RPM resume path isn't needed.
    The Intel drivers are the only ones doing this. See [1] for a
    discussion on the issue. Following patch changes the RPM resume path
    to not take RTNL.
    
    [0] https://bugzilla.kernel.org/show_bug.cgi?id=215129
    [1] https://lore.kernel.org/netdev/20211125074949.5f897431@kicinski-fedora-pc1c0hjn.dhcp.thefacebook.com/t/
    
    Fixes: bd869245a3dc ("net: core: try to runtime-resume detached device in __dev_open")
    Fixes: f32a21376573 ("ethtool: runtime-resume netdev parent before ethtool ioctl ops")
    Tested-by: Martin Stolpe <martin.stolpe@gmail.com>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20211220201844.2714498-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b99c71f9097829a6708eeb048395bb9e79d636fb
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Dec 20 09:50:27 2021 -0500

    net: skip virtio_net_hdr_set_proto if protocol already set
    
    [ Upstream commit 1ed1d592113959f00cc552c3b9f47ca2d157768f ]
    
    virtio_net_hdr_set_proto infers skb->protocol from the virtio_net_hdr
    gso_type, to avoid packets getting dropped for lack of a proto type.
    
    Its protocol choice is a guess, especially in the case of UFO, where
    the single VIRTIO_NET_HDR_GSO_UDP label covers both UFOv4 and UFOv6.
    
    Skip this best effort if the field is already initialized. Whether
    explicitly from userspace, or implicitly based on an earlier call to
    dev_parse_header_protocol (which is more robust, but was introduced
    after this patch).
    
    Fixes: 9d2f67e43b73 ("net/packet: fix packet drop as of virtio gso")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20211220145027.2784293-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ba353f553da916c94d7e2add2fa286f9d8eb340
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Dec 20 09:49:01 2021 -0500

    net: accept UFOv6 packages in virtio_net_hdr_to_skb
    
    [ Upstream commit 7e5cced9ca84df52d874aca6b632f930b3dc5bc6 ]
    
    Skb with skb->protocol 0 at the time of virtio_net_hdr_to_skb may have
    a protocol inferred from virtio_net_hdr with virtio_net_hdr_set_proto.
    
    Unlike TCP, UDP does not have separate types for IPv4 and IPv6. Type
    VIRTIO_NET_HDR_GSO_UDP is guessed to be IPv4/UDP. As of the below
    commit, UFOv6 packets are dropped due to not matching the protocol as
    obtained from dev_parse_header_protocol.
    
    Invert the test to take that L2 protocol field as starting point and
    pass both UFOv4 and UFOv6 for VIRTIO_NET_HDR_GSO_UDP.
    
    Fixes: 924a9bc362a5 ("net: check if protocol extracted by virtio_net_hdr_set_proto is correct")
    Link: https://lore.kernel.org/netdev/CABcq3pG9GRCYqFDBAJ48H1vpnnX=41u+MhQnayF1ztLH4WX0Fw@mail.gmail.com/
    Reported-by: Andrew Melnichenko <andrew@daynix.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20211220144901.2784030-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0249a4b8a554f2eb6a27b62516fa50168584faa4
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Dec 20 06:33:30 2021 -0800

    inet: fully convert sk->sk_rx_dst to RCU rules
    
    [ Upstream commit 8f905c0e7354ef261360fb7535ea079b1082c105 ]
    
    syzbot reported various issues around early demux,
    one being included in this changelog [1]
    
    sk->sk_rx_dst is using RCU protection without clearly
    documenting it.
    
    And following sequences in tcp_v4_do_rcv()/tcp_v6_do_rcv()
    are not following standard RCU rules.
    
    [a]    dst_release(dst);
    [b]    sk->sk_rx_dst = NULL;
    
    They look wrong because a delete operation of RCU protected
    pointer is supposed to clear the pointer before
    the call_rcu()/synchronize_rcu() guarding actual memory freeing.
    
    In some cases indeed, dst could be freed before [b] is done.
    
    We could cheat by clearing sk_rx_dst before calling
    dst_release(), but this seems the right time to stick
    to standard RCU annotations and debugging facilities.
    
    [1]
    BUG: KASAN: use-after-free in dst_check include/net/dst.h:470 [inline]
    BUG: KASAN: use-after-free in tcp_v4_early_demux+0x95b/0x960 net/ipv4/tcp_ipv4.c:1792
    Read of size 2 at addr ffff88807f1cb73a by task syz-executor.5/9204
    
    CPU: 0 PID: 9204 Comm: syz-executor.5 Not tainted 5.16.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description.constprop.0.cold+0x8d/0x320 mm/kasan/report.c:247
     __kasan_report mm/kasan/report.c:433 [inline]
     kasan_report.cold+0x83/0xdf mm/kasan/report.c:450
     dst_check include/net/dst.h:470 [inline]
     tcp_v4_early_demux+0x95b/0x960 net/ipv4/tcp_ipv4.c:1792
     ip_rcv_finish_core.constprop.0+0x15de/0x1e80 net/ipv4/ip_input.c:340
     ip_list_rcv_finish.constprop.0+0x1b2/0x6e0 net/ipv4/ip_input.c:583
     ip_sublist_rcv net/ipv4/ip_input.c:609 [inline]
     ip_list_rcv+0x34e/0x490 net/ipv4/ip_input.c:644
     __netif_receive_skb_list_ptype net/core/dev.c:5508 [inline]
     __netif_receive_skb_list_core+0x549/0x8e0 net/core/dev.c:5556
     __netif_receive_skb_list net/core/dev.c:5608 [inline]
     netif_receive_skb_list_internal+0x75e/0xd80 net/core/dev.c:5699
     gro_normal_list net/core/dev.c:5853 [inline]
     gro_normal_list net/core/dev.c:5849 [inline]
     napi_complete_done+0x1f1/0x880 net/core/dev.c:6590
     virtqueue_napi_complete drivers/net/virtio_net.c:339 [inline]
     virtnet_poll+0xca2/0x11b0 drivers/net/virtio_net.c:1557
     __napi_poll+0xaf/0x440 net/core/dev.c:7023
     napi_poll net/core/dev.c:7090 [inline]
     net_rx_action+0x801/0xb40 net/core/dev.c:7177
     __do_softirq+0x29b/0x9c2 kernel/softirq.c:558
     invoke_softirq kernel/softirq.c:432 [inline]
     __irq_exit_rcu+0x123/0x180 kernel/softirq.c:637
     irq_exit_rcu+0x5/0x20 kernel/softirq.c:649
     common_interrupt+0x52/0xc0 arch/x86/kernel/irq.c:240
     asm_common_interrupt+0x1e/0x40 arch/x86/include/asm/idtentry.h:629
    RIP: 0033:0x7f5e972bfd57
    Code: 39 d1 73 14 0f 1f 80 00 00 00 00 48 8b 50 f8 48 83 e8 08 48 39 ca 77 f3 48 39 c3 73 3e 48 89 13 48 8b 50 f8 48 89 38 49 8b 0e <48> 8b 3e 48 83 c3 08 48 83 c6 08 eb bc 48 39 d1 72 9e 48 39 d0 73
    RSP: 002b:00007fff8a413210 EFLAGS: 00000283
    RAX: 00007f5e97108990 RBX: 00007f5e97108338 RCX: ffffffff81d3aa45
    RDX: ffffffff81d3aa45 RSI: 00007f5e97108340 RDI: ffffffff81d3aa45
    RBP: 00007f5e97107eb8 R08: 00007f5e97108d88 R09: 0000000093c2e8d9
    R10: 0000000000000000 R11: 0000000000000000 R12: 00007f5e97107eb0
    R13: 00007f5e97108338 R14: 00007f5e97107ea8 R15: 0000000000000019
     </TASK>
    
    Allocated by task 13:
     kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
     kasan_set_track mm/kasan/common.c:46 [inline]
     set_alloc_info mm/kasan/common.c:434 [inline]
     __kasan_slab_alloc+0x90/0xc0 mm/kasan/common.c:467
     kasan_slab_alloc include/linux/kasan.h:259 [inline]
     slab_post_alloc_hook mm/slab.h:519 [inline]
     slab_alloc_node mm/slub.c:3234 [inline]
     slab_alloc mm/slub.c:3242 [inline]
     kmem_cache_alloc+0x202/0x3a0 mm/slub.c:3247
     dst_alloc+0x146/0x1f0 net/core/dst.c:92
     rt_dst_alloc+0x73/0x430 net/ipv4/route.c:1613
     ip_route_input_slow+0x1817/0x3a20 net/ipv4/route.c:2340
     ip_route_input_rcu net/ipv4/route.c:2470 [inline]
     ip_route_input_noref+0x116/0x2a0 net/ipv4/route.c:2415
     ip_rcv_finish_core.constprop.0+0x288/0x1e80 net/ipv4/ip_input.c:354
     ip_list_rcv_finish.constprop.0+0x1b2/0x6e0 net/ipv4/ip_input.c:583
     ip_sublist_rcv net/ipv4/ip_input.c:609 [inline]
     ip_list_rcv+0x34e/0x490 net/ipv4/ip_input.c:644
     __netif_receive_skb_list_ptype net/core/dev.c:5508 [inline]
     __netif_receive_skb_list_core+0x549/0x8e0 net/core/dev.c:5556
     __netif_receive_skb_list net/core/dev.c:5608 [inline]
     netif_receive_skb_list_internal+0x75e/0xd80 net/core/dev.c:5699
     gro_normal_list net/core/dev.c:5853 [inline]
     gro_normal_list net/core/dev.c:5849 [inline]
     napi_complete_done+0x1f1/0x880 net/core/dev.c:6590
     virtqueue_napi_complete drivers/net/virtio_net.c:339 [inline]
     virtnet_poll+0xca2/0x11b0 drivers/net/virtio_net.c:1557
     __napi_poll+0xaf/0x440 net/core/dev.c:7023
     napi_poll net/core/dev.c:7090 [inline]
     net_rx_action+0x801/0xb40 net/core/dev.c:7177
     __do_softirq+0x29b/0x9c2 kernel/softirq.c:558
    
    Freed by task 13:
     kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
     kasan_set_track+0x21/0x30 mm/kasan/common.c:46
     kasan_set_free_info+0x20/0x30 mm/kasan/generic.c:370
     ____kasan_slab_free mm/kasan/common.c:366 [inline]
     ____kasan_slab_free mm/kasan/common.c:328 [inline]
     __kasan_slab_free+0xff/0x130 mm/kasan/common.c:374
     kasan_slab_free include/linux/kasan.h:235 [inline]
     slab_free_hook mm/slub.c:1723 [inline]
     slab_free_freelist_hook+0x8b/0x1c0 mm/slub.c:1749
     slab_free mm/slub.c:3513 [inline]
     kmem_cache_free+0xbd/0x5d0 mm/slub.c:3530
     dst_destroy+0x2d6/0x3f0 net/core/dst.c:127
     rcu_do_batch kernel/rcu/tree.c:2506 [inline]
     rcu_core+0x7ab/0x1470 kernel/rcu/tree.c:2741
     __do_softirq+0x29b/0x9c2 kernel/softirq.c:558
    
    Last potentially related work creation:
     kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
     __kasan_record_aux_stack+0xf5/0x120 mm/kasan/generic.c:348
     __call_rcu kernel/rcu/tree.c:2985 [inline]
     call_rcu+0xb1/0x740 kernel/rcu/tree.c:3065
     dst_release net/core/dst.c:177 [inline]
     dst_release+0x79/0xe0 net/core/dst.c:167
     tcp_v4_do_rcv+0x612/0x8d0 net/ipv4/tcp_ipv4.c:1712
     sk_backlog_rcv include/net/sock.h:1030 [inline]
     __release_sock+0x134/0x3b0 net/core/sock.c:2768
     release_sock+0x54/0x1b0 net/core/sock.c:3300
     tcp_sendmsg+0x36/0x40 net/ipv4/tcp.c:1441
     inet_sendmsg+0x99/0xe0 net/ipv4/af_inet.c:819
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     sock_write_iter+0x289/0x3c0 net/socket.c:1057
     call_write_iter include/linux/fs.h:2162 [inline]
     new_sync_write+0x429/0x660 fs/read_write.c:503
     vfs_write+0x7cd/0xae0 fs/read_write.c:590
     ksys_write+0x1ee/0x250 fs/read_write.c:643
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The buggy address belongs to the object at ffff88807f1cb700
     which belongs to the cache ip_dst_cache of size 176
    The buggy address is located 58 bytes inside of
     176-byte region [ffff88807f1cb700, ffff88807f1cb7b0)
    The buggy address belongs to the page:
    page:ffffea0001fc72c0 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x7f1cb
    flags: 0xfff00000000200(slab|node=0|zone=1|lastcpupid=0x7ff)
    raw: 00fff00000000200 dead000000000100 dead000000000122 ffff8881413bb780
    raw: 0000000000000000 0000000000100010 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    page_owner tracks the page as allocated
    page last allocated via order 0, migratetype Unmovable, gfp_mask 0x112a20(GFP_ATOMIC|__GFP_NOWARN|__GFP_NORETRY|__GFP_HARDWALL), pid 5, ts 108466983062, free_ts 108048976062
     prep_new_page mm/page_alloc.c:2418 [inline]
     get_page_from_freelist+0xa72/0x2f50 mm/page_alloc.c:4149
     __alloc_pages+0x1b2/0x500 mm/page_alloc.c:5369
     alloc_pages+0x1a7/0x300 mm/mempolicy.c:2191
     alloc_slab_page mm/slub.c:1793 [inline]
     allocate_slab mm/slub.c:1930 [inline]
     new_slab+0x32d/0x4a0 mm/slub.c:1993
     ___slab_alloc+0x918/0xfe0 mm/slub.c:3022
     __slab_alloc.constprop.0+0x4d/0xa0 mm/slub.c:3109
     slab_alloc_node mm/slub.c:3200 [inline]
     slab_alloc mm/slub.c:3242 [inline]
     kmem_cache_alloc+0x35c/0x3a0 mm/slub.c:3247
     dst_alloc+0x146/0x1f0 net/core/dst.c:92
     rt_dst_alloc+0x73/0x430 net/ipv4/route.c:1613
     __mkroute_output net/ipv4/route.c:2564 [inline]
     ip_route_output_key_hash_rcu+0x921/0x2d00 net/ipv4/route.c:2791
     ip_route_output_key_hash+0x18b/0x300 net/ipv4/route.c:2619
     __ip_route_output_key include/net/route.h:126 [inline]
     ip_route_output_flow+0x23/0x150 net/ipv4/route.c:2850
     ip_route_output_key include/net/route.h:142 [inline]
     geneve_get_v4_rt+0x3a6/0x830 drivers/net/geneve.c:809
     geneve_xmit_skb drivers/net/geneve.c:899 [inline]
     geneve_xmit+0xc4a/0x3540 drivers/net/geneve.c:1082
     __netdev_start_xmit include/linux/netdevice.h:4994 [inline]
     netdev_start_xmit include/linux/netdevice.h:5008 [inline]
     xmit_one net/core/dev.c:3590 [inline]
     dev_hard_start_xmit+0x1eb/0x920 net/core/dev.c:3606
     __dev_queue_xmit+0x299a/0x3650 net/core/dev.c:4229
    page last free stack trace:
     reset_page_owner include/linux/page_owner.h:24 [inline]
     free_pages_prepare mm/page_alloc.c:1338 [inline]
     free_pcp_prepare+0x374/0x870 mm/page_alloc.c:1389
     free_unref_page_prepare mm/page_alloc.c:3309 [inline]
     free_unref_page+0x19/0x690 mm/page_alloc.c:3388
     qlink_free mm/kasan/quarantine.c:146 [inline]
     qlist_free_all+0x5a/0xc0 mm/kasan/quarantine.c:165
     kasan_quarantine_reduce+0x180/0x200 mm/kasan/quarantine.c:272
     __kasan_slab_alloc+0xa2/0xc0 mm/kasan/common.c:444
     kasan_slab_alloc include/linux/kasan.h:259 [inline]
     slab_post_alloc_hook mm/slab.h:519 [inline]
     slab_alloc_node mm/slub.c:3234 [inline]
     kmem_cache_alloc_node+0x255/0x3f0 mm/slub.c:3270
     __alloc_skb+0x215/0x340 net/core/skbuff.c:414
     alloc_skb include/linux/skbuff.h:1126 [inline]
     alloc_skb_with_frags+0x93/0x620 net/core/skbuff.c:6078
     sock_alloc_send_pskb+0x783/0x910 net/core/sock.c:2575
     mld_newpack+0x1df/0x770 net/ipv6/mcast.c:1754
     add_grhead+0x265/0x330 net/ipv6/mcast.c:1857
     add_grec+0x1053/0x14e0 net/ipv6/mcast.c:1995
     mld_send_initial_cr.part.0+0xf6/0x230 net/ipv6/mcast.c:2242
     mld_send_initial_cr net/ipv6/mcast.c:1232 [inline]
     mld_dad_work+0x1d3/0x690 net/ipv6/mcast.c:2268
     process_one_work+0x9b2/0x1690 kernel/workqueue.c:2298
     worker_thread+0x658/0x11f0 kernel/workqueue.c:2445
    
    Memory state around the buggy address:
     ffff88807f1cb600: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88807f1cb680: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
    >ffff88807f1cb700: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                            ^
     ffff88807f1cb780: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
     ffff88807f1cb800: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 41063e9dd119 ("ipv4: Early TCP socket demux.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20211220143330.680945-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98a8e5c2002727c4de303e11e38de25777746111
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 25 09:48:17 2021 -0700

    ipv6: move inet6_sk(sk)->rx_dst_cookie to sk->sk_rx_dst_cookie
    
    [ Upstream commit ef57c1610dd8fba5031bf71e0db73356190de151 ]
    
    Increase cache locality by moving rx_dst_coookie next to sk->sk_rx_dst
    
    This removes one or two cache line misses in IPv6 early demux (TCP/UDP)
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e096cffc6d35437bc4b8a7b2d6734413675239c
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 25 09:48:16 2021 -0700

    tcp: move inet->rx_dst_ifindex to sk->sk_rx_dst_ifindex
    
    [ Upstream commit 0c0a5ef809f9150e9229e7b13e43183b681b7a39 ]
    
    Increase cache locality by moving rx_dst_ifindex next to sk->sk_rx_dst
    
    This is part of an effort to reduce cache line misses in TCP fast path.
    
    This removes one cache line miss in early demux.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e69eacf74e15cffa4da537f538f598d13a37be96
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Fri Dec 17 17:39:11 2021 +0800

    qlcnic: potential dereference null pointer of rx_queue->page_ring
    
    [ Upstream commit 60ec7fcfe76892a1479afab51ff17a4281923156 ]
    
    The return value of kcalloc() needs to be checked.
    To avoid dereference of null pointer in case of the failure of alloc.
    Therefore, it might be better to change the return type of
    qlcnic_sriov_alloc_vlans() and return -ENOMEM when alloc fails and
    return 0 the others.
    Also, qlcnic_sriov_set_guest_vlan_mode() and __qlcnic_pci_sriov_enable()
    should deal with the return value of qlcnic_sriov_alloc_vlans().
    
    Fixes: 154d0c810c53 ("qlcnic: VLAN enhancement for 84XX adapters")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c553a0cd1263e4da5f220d80fa713fc3959c1d0
Author: Yevhen Orlov <yevhen.orlov@plvision.eu>
Date:   Thu Dec 16 19:17:14 2021 +0200

    net: marvell: prestera: fix incorrect structure access
    
    [ Upstream commit 2efc2256febf214e7b2bdaa21fe6c3c3146acdcb ]
    
    In line:
            upper = info->upper_dev;
    We access upper_dev field, which is related only for particular events
    (e.g. event == NETDEV_CHANGEUPPER). So, this line cause invalid memory
    access for another events,
    when ptr is not netdev_notifier_changeupper_info.
    
    The KASAN logs are as follows:
    
    [   30.123165] BUG: KASAN: stack-out-of-bounds in prestera_netdev_port_event.constprop.0+0x68/0x538 [prestera]
    [   30.133336] Read of size 8 at addr ffff80000cf772b0 by task udevd/778
    [   30.139866]
    [   30.141398] CPU: 0 PID: 778 Comm: udevd Not tainted 5.16.0-rc3 #6
    [   30.147588] Hardware name: DNI AmazonGo1 A7040 board (DT)
    [   30.153056] Call trace:
    [   30.155547]  dump_backtrace+0x0/0x2c0
    [   30.159320]  show_stack+0x18/0x30
    [   30.162729]  dump_stack_lvl+0x68/0x84
    [   30.166491]  print_address_description.constprop.0+0x74/0x2b8
    [   30.172346]  kasan_report+0x1e8/0x250
    [   30.176102]  __asan_load8+0x98/0xe0
    [   30.179682]  prestera_netdev_port_event.constprop.0+0x68/0x538 [prestera]
    [   30.186847]  prestera_netdev_event_handler+0x1b4/0x1c0 [prestera]
    [   30.193313]  raw_notifier_call_chain+0x74/0xa0
    [   30.197860]  call_netdevice_notifiers_info+0x68/0xc0
    [   30.202924]  register_netdevice+0x3cc/0x760
    [   30.207190]  register_netdev+0x24/0x50
    [   30.211015]  prestera_device_register+0x8a0/0xba0 [prestera]
    
    Fixes: 3d5048cc54bd ("net: marvell: prestera: move netdev topology validation to prestera_main")
    Signed-off-by: Yevhen Orlov <yevhen.orlov@plvision.eu>
    Link: https://lore.kernel.org/r/20211216171714.11341-1-yevhen.orlov@plvision.eu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da3feb8a9baf22a65f573d2cd29bb5105b0d6f7d
Author: Yevhen Orlov <yevhen.orlov@plvision.eu>
Date:   Thu Dec 16 19:07:36 2021 +0200

    net: marvell: prestera: fix incorrect return of port_find
    
    [ Upstream commit 8b681bd7c301c423fbe97a6b23388a2180ff04ca ]
    
    In case, when some ports is in list and we don't find requested - we
    return last iterator state and not return NULL as expected.
    
    Fixes: 501ef3066c89 ("net: marvell: prestera: Add driver for Prestera family ASIC devices")
    Signed-off-by: Yevhen Orlov <yevhen.orlov@plvision.eu>
    Link: https://lore.kernel.org/r/20211216170736.8851-1-yevhen.orlov@plvision.eu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad6d20da2cfbe14b7b1200d15f39e65988b0b9e8
Author: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Date:   Mon Dec 13 16:31:06 2021 +0100

    ice: xsk: return xsk buffers back to pool when cleaning the ring
    
    [ Upstream commit afe8a3ba85ec2a6b6849367e25c06a2f8e0ddd05 ]
    
    Currently we only NULL the xdp_buff pointer in the internal SW ring but
    we never give it back to the xsk buffer pool. This means that buffers
    can be leaked out of the buff pool and never be used again.
    
    Add missing xsk_buff_free() call to the routine that is supposed to
    clean the entries that are left in the ring so that these buffers in the
    umem can be used by other sockets.
    
    Also, only go through the space that is actually left to be cleaned
    instead of a whole ring.
    
    Fixes: 2d4238f55697 ("ice: Add support for AF_XDP")
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Kiran Bhandare <kiranx.bhandare@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1c36df0b0a5f45eb5cf2ce594149120d7fa7d59
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Wed Sep 22 09:56:03 2021 +0200

    ice: Use xdp_buf instead of rx_buf for xsk zero-copy
    
    [ Upstream commit 57f7f8b6bc0bc80d94443f94fe5f21f266499a2b ]
    
    In order to use the new xsk batched buffer allocation interface, a
    pointer to an array of struct xsk_buff pointers need to be provided so
    that the function can put the result of the allocation there. In the
    ice driver, we already have a ring that stores pointers to
    xdp_buffs. This is only used for the xsk zero-copy driver and is a
    union with the structure that is used for the regular non zero-copy
    path. Unfortunately, that structure is larger than the xdp_buffs
    pointers which mean that there will be a stride (of 20 bytes) between
    each xdp_buff pointer. And feeding this into the xsk_buff_alloc_batch
    interface will not work since it assumes a regular array of xdp_buff
    pointers (each 8 bytes with 0 bytes in-between them on a 64-bit
    system).
    
    To fix this, remove the xdp_buff pointer from the rx_buf union and
    move it one step higher to the union above which only has pointers to
    arrays in it. This solves the problem and we can directly feed the SW
    ring of xdp_buff pointers straight into the allocation function in the
    next patch when that interface is used. This will improve performance.
    
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20210922075613.12186-4-magnus.karlsson@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef73e3b650b7b1ad4080b8e7aeba5e36e19f0932
Author: Martin Haaß <vvvrrooomm@gmail.com>
Date:   Sun Dec 12 09:30:30 2021 -0300

    ARM: dts: imx6qdl-wandboard: Fix Ethernet support
    
    [ Upstream commit 39e660687ac0c57499134765abbecf71cfd11eae ]
    
    Currently, the imx6q-wandboard Ethernet does not transmit any
    data.
    
    This issue has been exposed by commit f5d9aa79dfdf ("ARM: imx6q:
    remove clk-out fixup for the Atheros AR8031 and AR8035 PHYs").
    
    Fix it by describing the qca,clk-out-frequency property as suggested
    by the commit above.
    
    Fixes: 77591e42458d ("ARM: dts: imx6qdl-wandboard: add ethernet PHY description")
    Signed-off-by: Martin Haaß <vvvrrooomm@gmail.com>
    Tested-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 406b7337d6bc7ea2ccf9fcd3f203e6149659d5ff
Author: Ignacy Gawędzki <ignacy.gawedzki@green-communications.fr>
Date:   Fri Dec 10 16:31:27 2021 +0100

    netfilter: fix regression in looped (broad|multi)cast's MAC handling
    
    [ Upstream commit ebb966d3bdfed581ecccbb4a7432341baf7619b4 ]
    
    In commit 5648b5e1169f ("netfilter: nfnetlink_queue: fix OOB when mac
    header was cleared"), the test for non-empty MAC header introduced in
    commit 2c38de4c1f8da7 ("netfilter: fix looped (broad|multi)cast's MAC
    handling") has been replaced with a test for a set MAC header.
    
    This breaks the case when the MAC header has been reset (using
    skb_reset_mac_header), as is the case with looped-back multicast
    packets.  As a result, the packets ending up in NFQUEUE get a bogus
    hwaddr interpreted from the first bytes of the IP header.
    
    This patch adds a test for a non-empty MAC header in addition to the
    test for a set MAC header.  The same two tests are also implemented in
    nfnetlink_log.c, where the initial code of commit 2c38de4c1f8da7
    ("netfilter: fix looped (broad|multi)cast's MAC handling") has not been
    touched, but where supposedly the same situation may happen.
    
    Fixes: 5648b5e1169f ("netfilter: nfnetlink_queue: fix OOB when mac header was cleared")
    Signed-off-by: Ignacy Gawędzki <ignacy.gawedzki@green-communications.fr>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d558e5f0d6fdd0a568f73dceb0b40c4f5012e5a
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Dec 13 05:45:44 2021 -0800

    netfilter: nf_tables: fix use-after-free in nft_set_catchall_destroy()
    
    [ Upstream commit 0f7d9b31ce7abdbb29bf018131ac920c9f698518 ]
    
    We need to use list_for_each_entry_safe() iterator
    because we can not access @catchall after kfree_rcu() call.
    
    syzbot reported:
    
    BUG: KASAN: use-after-free in nft_set_catchall_destroy net/netfilter/nf_tables_api.c:4486 [inline]
    BUG: KASAN: use-after-free in nft_set_destroy net/netfilter/nf_tables_api.c:4504 [inline]
    BUG: KASAN: use-after-free in nft_set_destroy+0x3fd/0x4f0 net/netfilter/nf_tables_api.c:4493
    Read of size 8 at addr ffff8880716e5b80 by task syz-executor.3/8871
    
    CPU: 1 PID: 8871 Comm: syz-executor.3 Not tainted 5.16.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description.constprop.0.cold+0x8d/0x2ed mm/kasan/report.c:247
     __kasan_report mm/kasan/report.c:433 [inline]
     kasan_report.cold+0x83/0xdf mm/kasan/report.c:450
     nft_set_catchall_destroy net/netfilter/nf_tables_api.c:4486 [inline]
     nft_set_destroy net/netfilter/nf_tables_api.c:4504 [inline]
     nft_set_destroy+0x3fd/0x4f0 net/netfilter/nf_tables_api.c:4493
     __nft_release_table+0x79f/0xcd0 net/netfilter/nf_tables_api.c:9626
     nft_rcv_nl_event+0x4f8/0x670 net/netfilter/nf_tables_api.c:9688
     notifier_call_chain+0xb5/0x200 kernel/notifier.c:83
     blocking_notifier_call_chain kernel/notifier.c:318 [inline]
     blocking_notifier_call_chain+0x67/0x90 kernel/notifier.c:306
     netlink_release+0xcb6/0x1dd0 net/netlink/af_netlink.c:788
     __sock_release+0xcd/0x280 net/socket.c:649
     sock_close+0x18/0x20 net/socket.c:1314
     __fput+0x286/0x9f0 fs/file_table.c:280
     task_work_run+0xdd/0x1a0 kernel/task_work.c:164
     tracehook_notify_resume include/linux/tracehook.h:189 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:175 [inline]
     exit_to_user_mode_prepare+0x27e/0x290 kernel/entry/common.c:207
     __syscall_exit_to_user_mode_work kernel/entry/common.c:289 [inline]
     syscall_exit_to_user_mode+0x19/0x60 kernel/entry/common.c:300
     do_syscall_64+0x42/0xb0 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f75fbf28adb
    Code: 0f 05 48 3d 00 f0 ff ff 77 45 c3 0f 1f 40 00 48 83 ec 18 89 7c 24 0c e8 63 fc ff ff 8b 7c 24 0c 41 89 c0 b8 03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 35 44 89 c7 89 44 24 0c e8 a1 fc ff ff 8b 44
    RSP: 002b:00007ffd8da7ec10 EFLAGS: 00000293 ORIG_RAX: 0000000000000003
    RAX: 0000000000000000 RBX: 0000000000000004 RCX: 00007f75fbf28adb
    RDX: 00007f75fc08e828 RSI: ffffffffffffffff RDI: 0000000000000003
    RBP: 00007f75fc08a960 R08: 0000000000000000 R09: 00007f75fc08e830
    R10: 00007ffd8da7ed10 R11: 0000000000000293 R12: 00000000002067c3
    R13: 00007ffd8da7ed10 R14: 00007f75fc088f60 R15: 0000000000000032
     </TASK>
    
    Allocated by task 8886:
     kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
     kasan_set_track mm/kasan/common.c:46 [inline]
     set_alloc_info mm/kasan/common.c:434 [inline]
     ____kasan_kmalloc mm/kasan/common.c:513 [inline]
     ____kasan_kmalloc mm/kasan/common.c:472 [inline]
     __kasan_kmalloc+0xa6/0xd0 mm/kasan/common.c:522
     kasan_kmalloc include/linux/kasan.h:269 [inline]
     kmem_cache_alloc_trace+0x1ea/0x4a0 mm/slab.c:3575
     kmalloc include/linux/slab.h:590 [inline]
     nft_setelem_catchall_insert net/netfilter/nf_tables_api.c:5544 [inline]
     nft_setelem_insert net/netfilter/nf_tables_api.c:5562 [inline]
     nft_add_set_elem+0x232e/0x2f40 net/netfilter/nf_tables_api.c:5936
     nf_tables_newsetelem+0x6ff/0xbb0 net/netfilter/nf_tables_api.c:6032
     nfnetlink_rcv_batch+0x1710/0x25f0 net/netfilter/nfnetlink.c:513
     nfnetlink_rcv_skb_batch net/netfilter/nfnetlink.c:634 [inline]
     nfnetlink_rcv+0x3af/0x420 net/netfilter/nfnetlink.c:652
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xdf0 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2409
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2463
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2492
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Freed by task 15335:
     kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
     kasan_set_track+0x21/0x30 mm/kasan/common.c:46
     kasan_set_free_info+0x20/0x30 mm/kasan/generic.c:370
     ____kasan_slab_free mm/kasan/common.c:366 [inline]
     ____kasan_slab_free mm/kasan/common.c:328 [inline]
     __kasan_slab_free+0xd1/0x110 mm/kasan/common.c:374
     kasan_slab_free include/linux/kasan.h:235 [inline]
     __cache_free mm/slab.c:3445 [inline]
     kmem_cache_free_bulk+0x67/0x1e0 mm/slab.c:3766
     kfree_bulk include/linux/slab.h:446 [inline]
     kfree_rcu_work+0x51c/0xa10 kernel/rcu/tree.c:3273
     process_one_work+0x9b2/0x1690 kernel/workqueue.c:2298
     worker_thread+0x658/0x11f0 kernel/workqueue.c:2445
     kthread+0x405/0x4f0 kernel/kthread.c:327
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
    
    Last potentially related work creation:
     kasan_save_stack+0x1e/0x50 mm/kasan/common.c:38
     __kasan_record_aux_stack+0xb5/0xe0 mm/kasan/generic.c:348
     kvfree_call_rcu+0x74/0x990 kernel/rcu/tree.c:3550
     nft_set_catchall_destroy net/netfilter/nf_tables_api.c:4489 [inline]
     nft_set_destroy net/netfilter/nf_tables_api.c:4504 [inline]
     nft_set_destroy+0x34a/0x4f0 net/netfilter/nf_tables_api.c:4493
     __nft_release_table+0x79f/0xcd0 net/netfilter/nf_tables_api.c:9626
     nft_rcv_nl_event+0x4f8/0x670 net/netfilter/nf_tables_api.c:9688
     notifier_call_chain+0xb5/0x200 kernel/notifier.c:83
     blocking_notifier_call_chain kernel/notifier.c:318 [inline]
     blocking_notifier_call_chain+0x67/0x90 kernel/notifier.c:306
     netlink_release+0xcb6/0x1dd0 net/netlink/af_netlink.c:788
     __sock_release+0xcd/0x280 net/socket.c:649
     sock_close+0x18/0x20 net/socket.c:1314
     __fput+0x286/0x9f0 fs/file_table.c:280
     task_work_run+0xdd/0x1a0 kernel/task_work.c:164
     tracehook_notify_resume include/linux/tracehook.h:189 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:175 [inline]
     exit_to_user_mode_prepare+0x27e/0x290 kernel/entry/common.c:207
     __syscall_exit_to_user_mode_work kernel/entry/common.c:289 [inline]
     syscall_exit_to_user_mode+0x19/0x60 kernel/entry/common.c:300
     do_syscall_64+0x42/0xb0 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The buggy address belongs to the object at ffff8880716e5b80
     which belongs to the cache kmalloc-64 of size 64
    The buggy address is located 0 bytes inside of
     64-byte region [ffff8880716e5b80, ffff8880716e5bc0)
    The buggy address belongs to the page:
    page:ffffea0001c5b940 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff8880716e5c00 pfn:0x716e5
    flags: 0xfff00000000200(slab|node=0|zone=1|lastcpupid=0x7ff)
    raw: 00fff00000000200 ffffea0000911848 ffffea00007c4d48 ffff888010c40200
    raw: ffff8880716e5c00 ffff8880716e5000 000000010000001e 0000000000000000
    page dumped because: kasan: bad access detected
    page_owner tracks the page as allocated
    page last allocated via order 0, migratetype Unmovable, gfp_mask 0x242040(__GFP_IO|__GFP_NOWARN|__GFP_COMP|__GFP_THISNODE), pid 3638, ts 211086074437, free_ts 211031029429
     prep_new_page mm/page_alloc.c:2418 [inline]
     get_page_from_freelist+0xa72/0x2f50 mm/page_alloc.c:4149
     __alloc_pages+0x1b2/0x500 mm/page_alloc.c:5369
     __alloc_pages_node include/linux/gfp.h:570 [inline]
     kmem_getpages mm/slab.c:1377 [inline]
     cache_grow_begin+0x75/0x470 mm/slab.c:2593
     cache_alloc_refill+0x27f/0x380 mm/slab.c:2965
     ____cache_alloc mm/slab.c:3048 [inline]
     ____cache_alloc mm/slab.c:3031 [inline]
     __do_cache_alloc mm/slab.c:3275 [inline]
     slab_alloc mm/slab.c:3316 [inline]
     __do_kmalloc mm/slab.c:3700 [inline]
     __kmalloc+0x3b3/0x4d0 mm/slab.c:3711
     kmalloc include/linux/slab.h:595 [inline]
     kzalloc include/linux/slab.h:724 [inline]
     tomoyo_get_name+0x234/0x480 security/tomoyo/memory.c:173
     tomoyo_parse_name_union+0xbc/0x160 security/tomoyo/util.c:260
     tomoyo_update_path_number_acl security/tomoyo/file.c:687 [inline]
     tomoyo_write_file+0x629/0x7f0 security/tomoyo/file.c:1034
     tomoyo_write_domain2+0x116/0x1d0 security/tomoyo/common.c:1152
     tomoyo_add_entry security/tomoyo/common.c:2042 [inline]
     tomoyo_supervisor+0xbc7/0xf00 security/tomoyo/common.c:2103
     tomoyo_audit_path_number_log security/tomoyo/file.c:235 [inline]
     tomoyo_path_number_perm+0x419/0x590 security/tomoyo/file.c:734
     security_file_ioctl+0x50/0xb0 security/security.c:1541
     __do_sys_ioctl fs/ioctl.c:868 [inline]
     __se_sys_ioctl fs/ioctl.c:860 [inline]
     __x64_sys_ioctl+0xb3/0x200 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    page last free stack trace:
     reset_page_owner include/linux/page_owner.h:24 [inline]
     free_pages_prepare mm/page_alloc.c:1338 [inline]
     free_pcp_prepare+0x374/0x870 mm/page_alloc.c:1389
     free_unref_page_prepare mm/page_alloc.c:3309 [inline]
     free_unref_page+0x19/0x690 mm/page_alloc.c:3388
     slab_destroy mm/slab.c:1627 [inline]
     slabs_destroy+0x89/0xc0 mm/slab.c:1647
     cache_flusharray mm/slab.c:3418 [inline]
     ___cache_free+0x4cc/0x610 mm/slab.c:3480
     qlink_free mm/kasan/quarantine.c:146 [inline]
     qlist_free_all+0x4e/0x110 mm/kasan/quarantine.c:165
     kasan_quarantine_reduce+0x180/0x200 mm/kasan/quarantine.c:272
     __kasan_slab_alloc+0x97/0xb0 mm/kasan/common.c:444
     kasan_slab_alloc include/linux/kasan.h:259 [inline]
     slab_post_alloc_hook mm/slab.h:519 [inline]
     slab_alloc_node mm/slab.c:3261 [inline]
     kmem_cache_alloc_node+0x2ea/0x590 mm/slab.c:3599
     __alloc_skb+0x215/0x340 net/core/skbuff.c:414
     alloc_skb include/linux/skbuff.h:1126 [inline]
     nlmsg_new include/net/netlink.h:953 [inline]
     rtmsg_ifinfo_build_skb+0x72/0x1a0 net/core/rtnetlink.c:3808
     rtmsg_ifinfo_event net/core/rtnetlink.c:3844 [inline]
     rtmsg_ifinfo_event net/core/rtnetlink.c:3835 [inline]
     rtmsg_ifinfo+0x83/0x120 net/core/rtnetlink.c:3853
     netdev_state_change net/core/dev.c:1395 [inline]
     netdev_state_change+0x114/0x130 net/core/dev.c:1386
     linkwatch_do_dev+0x10e/0x150 net/core/link_watch.c:167
     __linkwatch_run_queue+0x233/0x6a0 net/core/link_watch.c:213
     linkwatch_event+0x4a/0x60 net/core/link_watch.c:252
     process_one_work+0x9b2/0x1690 kernel/workqueue.c:2298
    
    Memory state around the buggy address:
     ffff8880716e5a80: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8880716e5b00: 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc
    >ffff8880716e5b80: fa fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
                       ^
     ffff8880716e5c00: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8880716e5c80: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    
    Fixes: aaa31047a6d2 ("netfilter: nftables: add catch-all set element support")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eb1cac16bc7e64acc2e316c9ee01bd7c8ec6718
Author: Jiacheng Shi <billsjc@sjtu.edu.cn>
Date:   Fri Dec 10 01:42:34 2021 -0800

    RDMA/hns: Replace kfree() with kvfree()
    
    [ Upstream commit 12d3bbdd6bd2780b71cc466f3fbc6eb7d43bbc2a ]
    
    Variables allocated by kvmalloc_array() should not be freed by kfree.
    Because they may be allocated by vmalloc.  So we replace kfree() with
    kvfree() here.
    
    Fixes: 6fd610c5733d ("RDMA/hns: Support 0 hop addressing for SRQ buffer")
    Link: https://lore.kernel.org/r/20211210094234.5829-1-billsjc@sjtu.edu.cn
    Signed-off-by: Jiacheng Shi <billsjc@sjtu.edu.cn>
    Acked-by: Wenpeng Liang <liangwenpeng@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aefcc25f3a0cd28a87d11d41d30419a12cd26a34
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Wed Dec 8 18:52:38 2021 +0100

    IB/qib: Fix memory leak in qib_user_sdma_queue_pkts()
    
    [ Upstream commit bee90911e0138c76ee67458ac0d58b38a3190f65 ]
    
    The wrong goto label was used for the error case and missed cleanup of the
    pkt allocation.
    
    Fixes: d39bf40e55e6 ("IB/qib: Protect from buffer overflow in struct qib_user_sdma_pkt fields")
    Link: https://lore.kernel.org/r/20211208175238.29983-1-jose.exposito89@gmail.com
    Addresses-Coverity-ID: 1493352 ("Resource leak")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Acked-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c41b980703922dc0635202d7d6abe732286983cf
Author: Yangyang Li <liyangyang20@huawei.com>
Date:   Thu Dec 9 22:06:55 2021 +0800

    RDMA/hns: Fix RNR retransmission issue for HIP08
    
    [ Upstream commit 4ad8181426df92976feee5fbc55236293d069b37 ]
    
    Due to the discrete nature of the HIP08 timer unit, a requester might
    finish the timeout period sooner, in elapsed real time, than its responder
    does, even when both sides share the identical RNR timeout length included
    in the RNR Nak packet and the responder indeed starts the timing prior to
    the requester. Furthermore, if a 'providential' resend packet arrived
    before the responder's timeout period expired, the responder is certainly
    entitled to drop the packet silently in the light of IB protocol.
    
    To address this problem, our team made good use of certain hardware facts:
    
    1) The timing resolution regards the transmission arrangements is 1
       microsecond, e.g. if cq_period field is set to 3, it would be
       interpreted as 3 microsecond by hardware
    
    2) A QPC field shall inform the hardware how many timing unit (ticks)
       constitutes a full microsecond, which, by default, is 1000
    
    3) It takes 14ns for the processor to handle a packet in the buffer, so
       the RNR timeout length of 10ns would ensure our processing mechanism is
       disabled during the entire timeout period and the packet won't be
       dropped silently
    
    To achieve (3), we permanently set the QPC field mentioned in (2) to zero
    which nominally indicates every time tick is equivalent to a microsecond
    in wall-clock time; now, a RNR timeout period at face value of 10 would
    only last 10 ticks, which is 10ns in wall-clock time.
    
    It's worth noting that we adapt the driver by magnifying certain
    configuration parameters(cq_period, eq_period and ack_timeout)by 1000
    given the user assumes the configuring timing unit to be microseconds.
    
    Also, this particular improvisation is only deployed on HIP08 since other
    hardware has already solved this issue.
    
    Fixes: cfc85f3e4b7f ("RDMA/hns: Add profile support for hip08 driver")
    Link: https://lore.kernel.org/r/20211209140655.49493-1-liangwenpeng@huawei.com
    Signed-off-by: Yangyang Li <liyangyang20@huawei.com>
    Signed-off-by: Wenpeng Liang <liangwenpeng@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b0ed41b25e20d1a660ec210d0d42572193af6fe
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Mon Dec 6 22:08:03 2021 +0100

    ASoC: meson: aiu: fifo: Add missing dma_coerce_mask_and_coherent()
    
    [ Upstream commit 1bcd326631dc4faa3322d60b4fc45e8b3747993e ]
    
    The FIFO registers which take an DMA-able address are only 32-bit wide
    on AIU. Add dma_coerce_mask_and_coherent() to make the DMA core aware of
    this limitation.
    
    Fixes: 6ae9ca9ce986bf ("ASoC: meson: aiu: add i2s and spdif support")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20211206210804.2512999-2-martin.blumenstingl@googlemail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71d07ebc5000b9c1d140e99e7493b0bafa954776
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 28 09:43:11 2021 +0200

    drm/mediatek: hdmi: Perform NULL pointer check for mtk_hdmi_conf
    
    [ Upstream commit 3b8e19a0aa3933a785be9f1541afd8d398c4ec69 ]
    
    In commit 41ca9caaae0b
    ("drm/mediatek: hdmi: Add check for CEA modes only") a check
    for CEA modes was added to function mtk_hdmi_bridge_mode_valid()
    in order to address possible issues on MT8167;
    moreover, with commit c91026a938c2
    ("drm/mediatek: hdmi: Add optional limit on maximal HDMI mode clock")
    another similar check was introduced.
    
    Unfortunately though, at the time of writing, MT8173 does not provide
    any mtk_hdmi_conf structure and this is crashing the kernel with NULL
    pointer upon entering mtk_hdmi_bridge_mode_valid(), which happens as
    soon as a HDMI cable gets plugged in.
    
    To fix this regression, add a NULL pointer check for hdmi->conf in the
    said function, restoring HDMI functionality and avoiding NULL pointer
    kernel panics.
    
    Fixes: 41ca9caaae0b ("drm/mediatek: hdmi: Add check for CEA modes only")
    Fixes: c91026a938c2 ("drm/mediatek: hdmi: Add optional limit on maximal HDMI mode clock")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11bf802877bff7096d4b89596c1840e86ebfadeb
Author: Alexey Gladkov <legion@kernel.org>
Date:   Mon Nov 29 21:37:25 2021 +0100

    ucounts: Fix rlimit max values check
    
    [ Upstream commit 59ec71575ab440cd5ca0aa53b2a2985b3639fad4 ]
    
    The semantics of the rlimit max values differs from ucounts itself. When
    creating a new userns, we store the current rlimit of the process in
    ucount_max. Thus, the value of the limit in the parent userns is saved
    in the created one.
    
    The problem is that now we are taking the maximum value for counter from
    the same userns. So for init_user_ns it will always be RLIM_INFINITY.
    
    To fix the problem we need to check the counter value with the max value
    stored in userns.
    
    Reproducer:
    
    su - test -c "ulimit -u 3; sleep 5 & sleep 6 & unshare -U --map-root-user sh -c 'sleep 7 & sleep 8 & date; wait'"
    
    Before:
    
    [1] 175
    [2] 176
    Fri Nov 26 13:48:20 UTC 2021
    [1]-  Done                    sleep 5
    [2]+  Done                    sleep 6
    
    After:
    
    [1] 167
    [2] 168
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: retry: Resource temporarily unavailable
    sh: fork: Interrupted system call
    [1]-  Done                    sleep 5
    [2]+  Done                    sleep 6
    
    Fixes: c54b245d0118 ("Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace")
    Reported-by: Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Alexey Gladkov <legion@kernel.org>
    Link: https://lkml.kernel.org/r/024ec805f6e16896f0b23e094773790d171d2c1c.1638218242.git.legion@kernel.org
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3121b5bff9034f37411e9acd9b46e2d391935c59
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Mon Dec 6 18:19:31 2021 +0800

    spi: change clk_disable_unprepare to clk_unprepare
    
    [ Upstream commit db6689b643d8653092f5853751ea2cdbc299f8d3 ]
    
    The corresponding API for clk_prepare is clk_unprepare, other than
    clk_disable_unprepare.
    
    Fix this by changing clk_disable_unprepare to clk_unprepare.
    
    Fixes: 5762ab71eb24 ("spi: Add support for Armada 3700 SPI Controller")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Link: https://lore.kernel.org/r/20211206101931.2816597-1-mudongliangabcd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 512dbc1a09acbc5a8d3301a248d03a69e303fcfa
Author: Jernej Skrabec <jernej.skrabec@gmail.com>
Date:   Sun Nov 21 09:35:37 2021 +0100

    bus: sunxi-rsb: Fix shutdown
    
    [ Upstream commit 017a716e7b0e9d4ac06a4d7779bd04fca009bbc9 ]
    
    Function sunxi_rsb_hw_exit() is sometimes called with pm runtime
    disabled, so in such cases pm_runtime_resume() will fail with -EACCES.
    
    Instead of doing whole dance of enabling pm runtime and thus clock just
    to disable it again immediately, just check if disabling clock is
    needed. That way calling pm_runtime_resume() is not needed at all.
    
    Fixes: 4a0dbc12e618 ("bus: sunxi-rsb: Implement runtime power management")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20211121083537.612473-1-jernej.skrabec@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 115a291395df470bf0bb8f2521a9b0d515ea4805
Author: Robert Marko <robert.marko@sartura.hr>
Date:   Wed Nov 17 15:02:22 2021 +0100

    arm64: dts: allwinner: orangepi-zero-plus: fix PHY mode
    
    [ Upstream commit 08d2061ff9c5319a07bf9ca6bbf11fdec68f704a ]
    
    Orange Pi Zero Plus uses a Realtek RTL8211E RGMII Gigabit PHY, but its
    currently set to plain RGMII mode meaning that it doesn't introduce
    delays.
    
    With this setup, TX packets are completely lost and changing the mode to
    RGMII-ID so the PHY will add delays internally fixes the issue.
    
    Fixes: a7affb13b271 ("arm64: allwinner: H5: Add Xunlong Orange Pi Zero Plus")
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Tested-by: Ron Goossens <rgoossens@gmail.com>
    Tested-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Robert Marko <robert.marko@sartura.hr>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20211117140222.43692-1-robert.marko@sartura.hr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4321ac030b54573cde3d84d49a88d49d0fc246a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Dec 16 20:30:18 2021 +0100

    PM: sleep: Fix error handling in dpm_prepare()
    
    commit 544e737dea5ad1a457f25dbddf68761ff25e028b upstream.
    
    Commit 2aa36604e824 ("PM: sleep: Avoid calling put_device() under
    dpm_list_mtx") forgot to update the while () loop termination
    condition to also break the loop if error is nonzero, which
    causes the loop to become infinite if device_prepare() returns
    an error for one device.
    
    Add the missing !error check.
    
    Fixes: 2aa36604e824 ("PM: sleep: Avoid calling put_device() under dpm_list_mtx")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reported-by: Thomas Hellström <thomas.hellstrom@linux.intel.com>
    Reviewed-by: Thomas Hellström <thomas.hellstrom@linux.intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eabc0aab98e5218ceecd82069b0d6fdfff5ee885
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Thu Dec 16 11:12:11 2021 -0500

    NFSD: Fix READDIR buffer overflow
    
    commit 53b1119a6e5028b125f431a0116ba73510d82a72 upstream.
    
    If a client sends a READDIR count argument that is too small (say,
    zero), then the buffer size calculation in the new init_dirlist
    helper functions results in an underflow, allowing the XDR stream
    functions to write beyond the actual buffer.
    
    This calculation has always been suspect. NFSD has never sanity-
    checked the READDIR count argument, but the old entry encoders
    managed the problem correctly.
    
    With the commits below, entry encoding changed, exposing the
    underflow to the pointer arithmetic in xdr_reserve_space().
    
    Modern NFS clients attempt to retrieve as much data as possible
    for each READDIR request. Also, we have no unit tests that
    exercise the behavior of READDIR at the lower bound of @count
    values. Thus this case was missed during testing.
    
    Reported-by: Anatoly Trosinenko <anatoly.trosinenko@gmail.com>
    Fixes: f5dcccd647da ("NFSD: Update the NFSv2 READDIR entry encoder to use struct xdr_stream")
    Fixes: 7f87fc2d34d4 ("NFSD: Update NFSv3 READDIR entry encoders to use struct xdr_stream")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1712a691bbb1d178dcf1cb592b5746d13fb7d49
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 15 16:36:05 2021 +0800

    HID: potential dereference of null pointer
    
    commit 13251ce1dd9bb525da2becb9b26fdfb94ca58659 upstream.
    
    The return value of devm_kzalloc() needs to be checked.
    To avoid hdev->dev->driver_data to be null in case of the failure of
    alloc.
    
    Fixes: 14c9c014babe ("HID: add vivaldi HID driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Link: https://lore.kernel.org/r/20211215083605.117638-1-jiasheng@iscas.ac.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c431e19ad708475a6fad071934a7bb786d24319
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Dec 20 10:51:20 2021 +0100

    HID: holtek: fix mouse probing
    
    commit 93a2207c254ca102ebbdae47b00f19bbfbfa7ecd upstream.
    
    An overlook from the previous commit: we don't even parse or start the
    device, meaning that the device is not presented to user space.
    
    Fixes: 93020953d0fa ("HID: check for valid USB device for many HID drivers")
    Cc: stable@vger.kernel.org
    Link: https://bugs.archlinux.org/task/73048
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215341
    Link: https://lore.kernel.org/r/e4efbf13-bd8d-0370-629b-6c80c0044b15@leemhuis.info/
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a65ac9d23276f46ba97f88d9d82148e7a239d94c
Author: Andrew Jones <drjones@redhat.com>
Date:   Tue Dec 14 16:18:42 2021 +0100

    selftests: KVM: Fix non-x86 compiling
    
    commit 577e022b7b41854911dcfb03678d8d2b930e8a3f upstream.
    
    Attempting to compile on a non-x86 architecture fails with
    
    include/kvm_util.h: In function â€˜vm_compute_max_gfnâ€™:
    include/kvm_util.h:79:21: error: dereferencing pointer to incomplete type â€˜struct kvm_vmâ€™
      return ((1ULL << vm->pa_bits) >> vm->page_shift) - 1;
                         ^~
    
    This is because the declaration of struct kvm_vm is in
    lib/kvm_util_internal.h as an effort to make it private to
    the test lib code. We can still provide arch specific functions,
    though, by making the generic function symbols weak. Do that to
    fix the compile error.
    
    Fixes: c8cc43c1eae2 ("selftests: KVM: avoid failures due to reserved HyperTransport region")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    Message-Id: <20211214151842.848314-1-drjones@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49c29e13fcd6ef07d988a487c9402a2c3561ea9d
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Sep 8 20:08:49 2021 +0800

    ext4: check for inconsistent extents between index and leaf block
    
    commit 9c6e071913792d80894cd0be98cc3c4b770e26d3 upstream.
    
    Now that we can check out overlapping extents in leaf block and
    out-of-order index extents in index block. But the .ee_block in the
    first extent of one leaf block should equal to the .ei_block in it's
    parent index extent entry. This patch add a check to verify such
    inconsistent between the index and leaf block.
    
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20210908120850.4012324-3-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f71ab21b1a281d7f0769c1ca608241c2659ae3f8
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Sep 8 20:08:48 2021 +0800

    ext4: check for out-of-order index extents in ext4_valid_extent_entries()
    
    commit 8dd27fecede55e8a4e67eef2878040ecad0f0d33 upstream.
    
    After commit 5946d089379a ("ext4: check for overlapping extents in
    ext4_valid_extent_entries()"), we can check out the overlapping extent
    entry in leaf extent blocks. But the out-of-order extent entry in index
    extent blocks could also trigger bad things if the filesystem is
    inconsistent. So this patch add a check to figure out the out-of-order
    index extents and return error.
    
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Theodore Ts'o <tytso@mit.edu>
    Link: https://lore.kernel.org/r/20210908120850.4012324-2-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02f825cf0255b9d9858acfe57c5ac29e2bc3eff8
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Sep 8 20:08:50 2021 +0800

    ext4: prevent partial update of the extent blocks
    
    commit 0f2f87d51aebcf71a709b52f661d681594c7dffa upstream.
    
    In the most error path of current extents updating operations are not
    roll back partial updates properly when some bad things happens(.e.g in
    ext4_ext_insert_extent()). So we may get an inconsistent extents tree
    if journal has been aborted due to IO error, which may probability lead
    to BUGON later when we accessing these extent entries in errors=continue
    mode. This patch drop extent buffer's verify flag before updatng the
    contents in ext4_ext_get_access(), and reset it after updating in
    __ext4_ext_dirty(). After this patch we could force to check the extent
    buffer if extents tree updating was break off, make sure the extents are
    consistent.
    
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Theodore Ts'o <tytso@mit.edu>
    Link: https://lore.kernel.org/r/20210908120850.4012324-4-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fedeb1b2c8e6f0ce45f63bb78a9ec1e688c298dc
Author: Greg Jesionowski <jesionowskigreg@gmail.com>
Date:   Tue Dec 14 15:10:27 2021 -0700

    net: usb: lan78xx: add Allied Telesis AT29M2-AF
    
    commit ef8a0f6eab1ca5d1a75c242c5c7b9d386735fa0a upstream.
    
    This adds the vendor and product IDs for the AT29M2-AF which is a
    lan7801-based device.
    
    Signed-off-by: Greg Jesionowski <jesionowskigreg@gmail.com>
    Link: https://lore.kernel.org/r/20211214221027.305784-1-jesionowskigreg@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d1c25233a29cd6c9b7c19ea725461f9dc180e63
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Oct 19 15:36:46 2021 -0700

    arm64: vdso32: require CROSS_COMPILE_COMPAT for gcc+bfd
    
    commit 3e6f8d1fa18457d54b20917bd9174d27daf09ab9 upstream.
    
    Similar to
    commit 231ad7f409f1 ("Makefile: infer --target from ARCH for CC=clang")
    There really is no point in setting --target based on
    $CROSS_COMPILE_COMPAT for clang when the integrated assembler is being
    used, since
    commit ef94340583ee ("arm64: vdso32: drop -no-integrated-as flag").
    
    Allows COMPAT_VDSO to be selected without setting $CROSS_COMPILE_COMPAT
    when using clang and lld together.
    
    Before:
    $ ARCH=arm64 CROSS_COMPILE_COMPAT=arm-linux-gnueabi- make -j72 LLVM=1 defconfig
    $ grep CONFIG_COMPAT_VDSO .config
    CONFIG_COMPAT_VDSO=y
    $ ARCH=arm64 make -j72 LLVM=1 defconfig
    $ grep CONFIG_COMPAT_VDSO .config
    $
    
    After:
    $ ARCH=arm64 CROSS_COMPILE_COMPAT=arm-linux-gnueabi- make -j72 LLVM=1 defconfig
    $ grep CONFIG_COMPAT_VDSO .config
    CONFIG_COMPAT_VDSO=y
    $ ARCH=arm64 make -j72 LLVM=1 defconfig
    $ grep CONFIG_COMPAT_VDSO .config
    CONFIG_COMPAT_VDSO=y
    
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Suggested-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lore.kernel.org/r/20211019223646.1146945-5-ndesaulniers@google.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
