commit 2f95dcc30a114dae9c0e54cdb451050e9261fdc6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Nov 18 11:06:31 2017 +0100

    Linux 3.18.82

commit bc88a575f203a4efb64e05a027063ea706969bef
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Jan 5 12:39:57 2017 +0100

    target/iscsi: Fix iSCSI task reassignment handling
    
    commit 59b6986dbfcdab96a971f9663221849de79a7556 upstream.
    
    Allocate a task management request structure for all task management
    requests, including task reassignment. This change avoids that the
    se_tmr->response assignment dereferences an uninitialized se_tmr
    pointer.
    
    Reported-by: Moshe David <mdavid@infinidat.com>
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: Moshe David <mdavid@infinidat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86fa24082f80e1f3b2641f164bbe5d5834abc581
Author: Bilal Amarni <bilal.amarni@gmail.com>
Date:   Thu Jun 8 14:47:26 2017 +0100

    security/keys: add CONFIG_KEYS_COMPAT to Kconfig
    
    commit 47b2c3fff4932e6fc17ce13d51a43c6969714e20 upstream.
    
    CONFIG_KEYS_COMPAT is defined in arch-specific Kconfigs and is missing for
    several 64-bit architectures : mips, parisc, tile.
    
    At the moment and for those architectures, calling in 32-bit userspace the
    keyctl syscall would return an ENOSYS error.
    
    This patch moves the CONFIG_KEYS_COMPAT option to security/keys/Kconfig, to
    make sure the compatibility wrapper is registered by default for any 64-bit
    architecture as long as it is configured with CONFIG_COMPAT.
    
    [DH: Modified to remove arm64 compat enablement also as requested by Eric
     Biggers]
    
    Signed-off-by: Bilal Amarni <bilal.amarni@gmail.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    cc: Eric Biggers <ebiggers3@gmail.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Cc: James Cowgill <james.cowgill@mips.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb36c7de3dc1b232094e0a9d2c30caa30c99bb9d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Oct 26 19:23:27 2017 +0800

    ip6_gre: only increase err_count for some certain type icmpv6 in ip6gre_err
    
    
    [ Upstream commit f8d20b46ce55cf40afb30dcef6d9288f7ef46d9b ]
    
    The similar fix in patch 'ipip: only increase err_count for some
    certain type icmp in ipip_err' is needed for ip6gre_err.
    
    In Jianlin's case, udp netperf broke even when receiving a TooBig
    icmpv6 packet.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53380d17dfa8a31c015c5b1b7d45fb5ad0bb06a8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Oct 26 19:19:56 2017 +0800

    ipip: only increase err_count for some certain type icmp in ipip_err
    
    
    [ Upstream commit f3594f0a7ea36661d7fd942facd7f31a64245f1a ]
    
    t->err_count is used to count the link failure on tunnel and an err
    will be reported to user socket in tx path if t->err_count is not 0.
    udp socket could even return EHOSTUNREACH to users.
    
    Since commit fd58156e456d ("IPIP: Use ip-tunneling code.") removed
    the 'switch check' for icmp type in ipip_err(), err_count would be
    increased by the icmp packet with ICMP_EXC_FRAGTIME code. an link
    failure would be reported out due to this.
    
    In Jianlin's case, when receiving ICMP_EXC_FRAGTIME a icmp packet,
    udp netperf failed with the err:
      send_data: data send error: No route to host (errno 113)
    
    We expect this error reported from tunnel to socket when receiving
    some certain type icmp, but not ICMP_EXC_FRAGTIME, ICMP_SR_FAILED
    or ICMP_PARAMETERPROB ones.
    
    This patch is to bring 'switch check' for icmp type back to ipip_err
    so that it only reports link failure for the right type icmp, just as
    in ipgre_err() and ipip6_err().
    
    Fixes: fd58156e456d ("IPIP: Use ip-tunneling code.")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e69760c8c44937b0664b0fbc71a190cafd9c1e3
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Oct 21 12:26:23 2017 -0700

    ipv6: flowlabel: do not leave opt->tot_len with garbage
    
    
    [ Upstream commit 864e2a1f8aac05effac6063ce316b480facb46ff ]
    
    When syzkaller team brought us a C repro for the crash [1] that
    had been reported many times in the past, I finally could find
    the root cause.
    
    If FlowLabel info is merged by fl6_merge_options(), we leave
    part of the opt_space storage provided by udp/raw/l2tp with random value
    in opt_space.tot_len, unless a control message was provided at sendmsg()
    time.
    
    Then ip6_setup_cork() would use this random value to perform a kzalloc()
    call. Undefined behavior and crashes.
    
    Fix is to properly set tot_len in fl6_merge_options()
    
    At the same time, we can also avoid consuming memory and cpu cycles
    to clear it, if every option is copied via a kmemdup(). This is the
    change in ip6_setup_cork().
    
    [1]
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 0 PID: 6613 Comm: syz-executor0 Not tainted 4.14.0-rc4+ #127
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    task: ffff8801cb64a100 task.stack: ffff8801cc350000
    RIP: 0010:ip6_setup_cork+0x274/0x15c0 net/ipv6/ip6_output.c:1168
    RSP: 0018:ffff8801cc357550 EFLAGS: 00010203
    RAX: dffffc0000000000 RBX: ffff8801cc357748 RCX: 0000000000000010
    RDX: 0000000000000002 RSI: ffffffff842bd1d9 RDI: 0000000000000014
    RBP: ffff8801cc357620 R08: ffff8801cb17f380 R09: ffff8801cc357b10
    R10: ffff8801cb64a100 R11: 0000000000000000 R12: ffff8801cc357ab0
    R13: ffff8801cc357b10 R14: 0000000000000000 R15: ffff8801c3bbf0c0
    FS:  00007f9c5c459700(0000) GS:ffff8801db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020324000 CR3: 00000001d1cf2000 CR4: 00000000001406f0
    DR0: 0000000020001010 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000600
    Call Trace:
     ip6_make_skb+0x282/0x530 net/ipv6/ip6_output.c:1729
     udpv6_sendmsg+0x2769/0x3380 net/ipv6/udp.c:1340
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:762
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     SYSC_sendto+0x358/0x5a0 net/socket.c:1750
     SyS_sendto+0x40/0x50 net/socket.c:1718
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4520a9
    RSP: 002b:00007f9c5c458c08 EFLAGS: 00000216 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004520a9
    RDX: 0000000000000001 RSI: 0000000020fd1000 RDI: 0000000000000016
    RBP: 0000000000000086 R08: 0000000020e0afe4 R09: 000000000000001c
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004bb1ee
    R13: 00000000ffffffff R14: 0000000000000016 R15: 0000000000000029
    Code: e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 ea 0f 00 00 48 8d 79 04 48 b8 00 00 00 00 00 fc ff df 45 8b 74 24 04 48 89 fa 48 c1 ea 03 <0f> b6 14 02 48 89 f8 83 e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85
    RIP: ip6_setup_cork+0x274/0x15c0 net/ipv6/ip6_output.c:1168 RSP: ffff8801cc357550
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9a09040718d4c7dcc932c2e9fbea33887df54e8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Oct 28 02:13:29 2017 +0800

    sctp: reset owner sk for data chunks on out queues when migrating a sock
    
    
    [ Upstream commit d04adf1b355181e737b6b1e23d801b07f0b7c4c0 ]
    
    Now when migrating sock to another one in sctp_sock_migrate(), it only
    resets owner sk for the data in receive queues, not the chunks on out
    queues.
    
    It would cause that data chunks length on the sock is not consistent
    with sk sk_wmem_alloc. When closing the sock or freeing these chunks,
    the old sk would never be freed, and the new sock may crash due to
    the overflow sk_wmem_alloc.
    
    syzbot found this issue with this series:
    
      r0 = socket$inet_sctp()
      sendto$inet(r0)
      listen(r0)
      accept4(r0)
      close(r0)
    
    Although listen() should have returned error when one TCP-style socket
    is in connecting (I may fix this one in another patch), it could also
    be reproduced by peeling off an assoc.
    
    This issue is there since very beginning.
    
    This patch is to reset owner sk for the chunks on out queues so that
    sk sk_wmem_alloc has correct value after accept one sock or peeloff
    an assoc to one sock.
    
    Note that when resetting owner sk for chunks on outqueue, it has to
    sctp_clear_owner_w/skb_orphan chunks before changing assoc->base.sk
    first and then sctp_set_owner_w them after changing assoc->base.sk,
    due to that sctp_wfree and it's callees are using assoc->base.sk.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e14c46808100ab64d3c935de776afb0ed7f0550
Author: Julien Gomes <julien@arista.com>
Date:   Wed Oct 25 11:50:50 2017 -0700

    tun: allow positive return values on dev_get_valid_name() call
    
    
    [ Upstream commit 5c25f65fd1e42685f7ccd80e0621829c105785d9 ]
    
    If the name argument of dev_get_valid_name() contains "%d", it will try
    to assign it a unit number in __dev__alloc_name() and return either the
    unit number (>= 0) or an error code (< 0).
    Considering positive values as error values prevent tun device creations
    relying this mechanism, therefor we should only consider negative values
    as errors here.
    
    Signed-off-by: Julien Gomes <julien@arista.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c39875a93d64fc2a3581b93e1db77dc25ca67b0
Author: Andrei Vagin <avagin@openvz.org>
Date:   Wed Oct 25 10:16:42 2017 -0700

    net/unix: don't show information about sockets from other namespaces
    
    
    [ Upstream commit 0f5da659d8f1810f44de14acf2c80cd6499623a0 ]
    
    socket_diag shows information only about sockets from a namespace where
    a diag socket lives.
    
    But if we request information about one unix socket, the kernel don't
    check that its netns is matched with a diag socket namespace, so any
    user can get information about any unix socket in a system. This looks
    like a bug.
    
    v2: add a Fixes tag
    
    Fixes: 51d7cccf0723 ("net: make sock diag per-namespace")
    Signed-off-by: Andrei Vagin <avagin@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 698b423e409fc4c169afd43d50ba2f16a0b9fd73
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 18 21:37:49 2017 +0800

    sctp: add the missing sock_owned_by_user check in sctp_icmp_redirect
    
    
    [ Upstream commit 1cc276cec9ec574d41cf47dfc0f51406b6f26ab4 ]
    
    Now sctp processes icmp redirect packet in sctp_icmp_redirect where
    it calls sctp_transport_dst_check in which tp->dst can be released.
    
    The problem is before calling sctp_transport_dst_check, it doesn't
    check sock_owned_by_user, which means tp->dst could be freed while
    a process is accessing it with owning the socket.
    
    An use-after-free issue could be triggered by this.
    
    This patch is to fix it by checking sock_owned_by_user before calling
    sctp_transport_dst_check in sctp_icmp_redirect, so that it would not
    release tp->dst if users still hold sock lock.
    
    Besides, the same issue fixed in commit 45caeaa5ac0b ("dccp/tcp: fix
    routing redirect race") on sctp also needs this check.
    
    Fixes: 55be7a9c6074 ("ipv4: Add redirect support to all protocol icmp error handlers")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 638c8339e05eb7eee584dfe4b3102376cf35664b
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Oct 13 11:58:53 2017 -0700

    tun: call dev_get_valid_name() before register_netdevice()
    
    
    [ Upstream commit 0ad646c81b2182f7fa67ec0c8c825e0ee165696d ]
    
    register_netdevice() could fail early when we have an invalid
    dev name, in which case ->ndo_uninit() is not called. For tun
    device, this is a problem because a timer etc. are already
    initialized and it expects ->ndo_uninit() to clean them up.
    
    We could move these initializations into a ->ndo_init() so
    that register_netdevice() knows better, however this is still
    complicated due to the logic in tun_detach().
    
    Therefore, I choose to just call dev_get_valid_name() before
    register_netdevice(), which is quicker and much easier to audit.
    And for this specific case, it is already enough.
    
    Fixes: 96442e42429e ("tuntap: choose the txq based on rxq")
    Reported-by: Dmitry Alexeev <avekceeb@gmail.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5bec3f163eec0d94516abc0d4106994a6610ff7
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 13 19:22:35 2017 +0200

    l2tp: check ps->sock before running pppol2tp_session_ioctl()
    
    
    [ Upstream commit 5903f594935a3841137c86b9d5b75143a5b7121c ]
    
    When pppol2tp_session_ioctl() is called by pppol2tp_tunnel_ioctl(),
    the session may be unconnected. That is, it was created by
    pppol2tp_session_create() and hasn't been connected with
    pppol2tp_connect(). In this case, ps->sock is NULL, so we need to check
    for this case in order to avoid dereferencing a NULL pointer.
    
    Fixes: 309795f4bec2 ("l2tp: Add netlink control API for L2TP")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54bcfd5d715280ae21adabf724df68f4f3bf9051
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 30 23:08:20 2017 -0700

    tcp: fix tcp_mtu_probe() vs highest_sack
    
    
    [ Upstream commit 2b7cda9c35d3b940eb9ce74b30bbd5eb30db493d ]
    
    Based on SNMP values provided by Roman, Yuchung made the observation
    that some crashes in tcp_sacktag_walk() might be caused by MTU probing.
    
    Looking at tcp_mtu_probe(), I found that when a new skb was placed
    in front of the write queue, we were not updating tcp highest sack.
    
    If one skb is freed because all its content was copied to the new skb
    (for MTU probing), then tp->highest_sack could point to a now freed skb.
    
    Bad things would then happen, including infinite loops.
    
    This patch renames tcp_highest_sack_combine() and uses it
    from tcp_mtu_probe() to fix the bug.
    
    Note that I also removed one test against tp->sacked_out,
    since we want to replace tp->highest_sack regardless of whatever
    condition, since keeping a stale pointer to freed skb is a recipe
    for disaster.
    
    Fixes: a47e5a988a57 ("[TCP]: Convert highest_sack to sk_buff to allow direct access")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Reported-by: Roman Gushchin <guro@fb.com>
    Reported-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b0a3512492f4e5b47cadaa609d62e0363de667c
Author: Craig Gallek <kraig@google.com>
Date:   Mon Oct 30 18:50:11 2017 -0400

    tun/tap: sanitize TUNSETSNDBUF input
    
    
    [ Upstream commit 93161922c658c714715686cd0cf69b090cb9bf1d ]
    
    Syzkaller found several variants of the lockup below by setting negative
    values with the TUNSETSNDBUF ioctl.  This patch adds a sanity check
    to both the tun and tap versions of this ioctl.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [repro:2389]
      Modules linked in:
      irq event stamp: 329692056
      hardirqs last  enabled at (329692055): [<ffffffff824b8381>] _raw_spin_unlock_irqrestore+0x31/0x75
      hardirqs last disabled at (329692056): [<ffffffff824b9e58>] apic_timer_interrupt+0x98/0xb0
      softirqs last  enabled at (35659740): [<ffffffff824bc958>] __do_softirq+0x328/0x48c
      softirqs last disabled at (35659731): [<ffffffff811c796c>] irq_exit+0xbc/0xd0
      CPU: 0 PID: 2389 Comm: repro Not tainted 4.14.0-rc7 #23
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      task: ffff880009452140 task.stack: ffff880006a20000
      RIP: 0010:_raw_spin_lock_irqsave+0x11/0x80
      RSP: 0018:ffff880006a27c50 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff10
      RAX: ffff880009ac68d0 RBX: ffff880006a27ce0 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff880006a27ce0 RDI: ffff880009ac6900
      RBP: ffff880006a27c60 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000001 R11: 000000000063ff00 R12: ffff880009ac6900
      R13: ffff880006a27cf8 R14: 0000000000000001 R15: ffff880006a27cf8
      FS:  00007f4be4838700(0000) GS:ffff88000cc00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000020101000 CR3: 0000000009616000 CR4: 00000000000006f0
      Call Trace:
       prepare_to_wait+0x26/0xc0
       sock_alloc_send_pskb+0x14e/0x270
       ? remove_wait_queue+0x60/0x60
       tun_get_user+0x2cc/0x19d0
       ? __tun_get+0x60/0x1b0
       tun_chr_write_iter+0x57/0x86
       __vfs_write+0x156/0x1e0
       vfs_write+0xf7/0x230
       SyS_write+0x57/0xd0
       entry_SYSCALL_64_fastpath+0x1f/0xbe
      RIP: 0033:0x7f4be4356df9
      RSP: 002b:00007ffc18101c08 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
      RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f4be4356df9
      RDX: 0000000000000046 RSI: 0000000020101000 RDI: 0000000000000005
      RBP: 00007ffc18101c40 R08: 0000000000000001 R09: 0000000000000001
      R10: 0000000000000001 R11: 0000000000000293 R12: 0000559c75f64780
      R13: 00007ffc18101d30 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 33dccbb050bb ("tun: Limit amount of queued packets per device")
    Fixes: 20d29d7a916a ("net: macvtap driver")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84ea7fc42294c7bbc4f6dc9ee7aa57366c9cf0c7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 16 14:29:13 2017 +0100

    Revert "ARM: dts: imx53-qsb-common: fix FEC pinmux config"
    
    This reverts commit 2eb85ef18c6570e8a59643cd8d5a66122461b1fc which is
    commit 8b649e426336d7d4800ff9c82858328f4215ba01 upstream.
    
    Turns out not to be a good idea in the stable kernels for now as Patrick
    writes:
            As discussed for 4.4 stable queue this patch might break
            existing machines, if they use a different pinmux configuration
            with their own bootloader.
    
    Reported-by: Patrick Brünn <P.Bruenn@beckhoff.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0f26c8f0562869e43e5001bed22817e6019d456
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Sat Oct 7 11:07:47 2017 -0700

    Input: ims-psu - check if CDC union descriptor is sane
    
    commit ea04efee7635c9120d015dcdeeeb6988130cb67a upstream.
    
    Before trying to use CDC union descriptor, try to validate whether that it
    is sane by checking that intf->altsetting->extra is big enough and that
    descriptor bLength is not too big and not too small.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32530efaed51e4df01e2bc151822143d23ae403a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Sep 29 10:54:24 2017 -0400

    usb: usbtest: fix NULL pointer dereference
    
    commit 7c80f9e4a588f1925b07134bb2e3689335f6c6d8 upstream.
    
    If the usbtest driver encounters a device with an IN bulk endpoint but
    no OUT bulk endpoint, it will try to dereference a NULL pointer
    (out->desc.bEndpointAddress).  The problem can be solved by adding a
    missing test.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 241d7ab103703ef4060ff205aed0643378d013a1
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Oct 24 21:12:13 2017 +0200

    mac80211: don't compare TKIP TX MIC key in reinstall prevention
    
    commit cfbb0d90a7abb289edc91833d0905931f8805f12 upstream.
    
    For the reinstall prevention, the code I had added compares the
    whole key. It turns out though that iwlwifi firmware doesn't
    provide the TKIP TX MIC key as it's not needed in client mode,
    and thus the comparison will always return false.
    
    For client mode, thus always zero out the TX MIC key part before
    doing the comparison in order to avoid accepting the reinstall
    of the key with identical encryption and RX MIC key, but not the
    same TX MIC key (since the supplicant provides the real one.)
    
    Fixes: fdf7cb4185b6 ("mac80211: accept key reinstall without changing anything")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32025b5c58605cdc0552d7976d010f10fa13f28a
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Oct 17 20:32:07 2017 +0200

    mac80211: use constant time comparison with keys
    
    commit 2bdd713b92a9cade239d3c7d15205a09f556624d upstream.
    
    Otherwise we risk leaking information via timing side channel.
    
    Fixes: fdf7cb4185b6 ("mac80211: accept key reinstall without changing anything")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6891c6fd2a500d1f39d1426765f610bdc2c2a39d
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Sep 5 14:54:54 2017 +0200

    mac80211: accept key reinstall without changing anything
    
    commit fdf7cb4185b60c68e1a75e61691c4afdc15dea0e upstream.
    
    When a key is reinstalled we can reset the replay counters
    etc. which can lead to nonce reuse and/or replay detection
    being impossible, breaking security properties, as described
    in the "KRACK attacks".
    
    In particular, CVE-2017-13080 applies to GTK rekeying that
    happened in firmware while the host is in D3, with the second
    part of the attack being done after the host wakes up. In
    this case, the wpa_supplicant mitigation isn't sufficient
    since wpa_supplicant doesn't know the GTK material.
    
    In case this happens, simply silently accept the new key
    coming from userspace but don't take any action on it since
    it's the same key; this keeps the PN replay counters intact.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41f612ae707e301e334872416582460674d03ef6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 15 18:26:01 2017 +0100

    Revert "ceph: unlock dangling spinlock in try_flush_caps()"
    
    This reverts commit 55d4aa12af57ea7782f0c8bbc3b01e44673b05ba which is
    commit 6c2838fbdedb9b72a81c931d49e56b229b6cdbca upstream.
    
    The locking issue was not a problem in 3.18, and now sparse rightly
    complains about this being an issue, so go back to the "correct" code.
    
    Cc: Jeff Layton <jlayton@redhat.com>
    Cc: "Yan, Zheng" <zyan@redhat.com>
    Cc: Ilya Dryomov <idryomov@gmail.com>
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
