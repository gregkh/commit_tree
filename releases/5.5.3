commit deff2fcb0de9352c271d6eafe60178f0e085180b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Feb 11 04:37:31 2020 -0800

    Linux 5.5.3

commit 94ab95356322f2ee3fee0090d0bef30d21e8ac31
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 9 16:16:20 2019 +0100

    compat: ARM64: always include asm-generic/compat.h
    
    commit 556d687a4ccd54ab50a721ddde42c820545effd9 upstream.
    
    In order to use compat_* type defininitions in device drivers
    outside of CONFIG_COMPAT, move the inclusion of asm-generic/compat.h
    ahead of the #ifdef.
    
    All other architectures already do this.
    
    Acked-by: Will Deacon <will@kernel.org>
    Reviewed-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68e0a1547f7e6d2474d718e90ca77f92086bf985
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Jan 24 11:54:41 2020 +0000

    powerpc/kuap: Fix set direction in allow/prevent_user_access()
    
    [ Upstream commit 1d8f739b07bd538f272f60bf53f10e7e6248d295 ]
    
    __builtin_constant_p() always return 0 for pointers, so on RADIX
    we always end up opening both direction (by writing 0 in SPR29):
    
      0000000000000170 <._copy_to_user>:
      ...
       1b0: 4c 00 01 2c     isync
       1b4: 39 20 00 00     li      r9,0
       1b8: 7d 3d 03 a6     mtspr   29,r9
       1bc: 4c 00 01 2c     isync
       1c0: 48 00 00 01     bl      1c0 <._copy_to_user+0x50>
                            1c0: R_PPC64_REL24      .__copy_tofrom_user
      ...
      0000000000000220 <._copy_from_user>:
      ...
       2ac: 4c 00 01 2c     isync
       2b0: 39 20 00 00     li      r9,0
       2b4: 7d 3d 03 a6     mtspr   29,r9
       2b8: 4c 00 01 2c     isync
       2bc: 7f c5 f3 78     mr      r5,r30
       2c0: 7f 83 e3 78     mr      r3,r28
       2c4: 48 00 00 01     bl      2c4 <._copy_from_user+0xa4>
                            2c4: R_PPC64_REL24      .__copy_tofrom_user
      ...
    
    Use an explicit parameter for direction selection, so that GCC
    is able to see it is a constant:
    
      00000000000001b0 <._copy_to_user>:
      ...
       1f0: 4c 00 01 2c     isync
       1f4: 3d 20 40 00     lis     r9,16384
       1f8: 79 29 07 c6     rldicr  r9,r9,32,31
       1fc: 7d 3d 03 a6     mtspr   29,r9
       200: 4c 00 01 2c     isync
       204: 48 00 00 01     bl      204 <._copy_to_user+0x54>
                            204: R_PPC64_REL24      .__copy_tofrom_user
      ...
      0000000000000260 <._copy_from_user>:
      ...
       2ec: 4c 00 01 2c     isync
       2f0: 39 20 ff ff     li      r9,-1
       2f4: 79 29 00 04     rldicr  r9,r9,0,0
       2f8: 7d 3d 03 a6     mtspr   29,r9
       2fc: 4c 00 01 2c     isync
       300: 7f c5 f3 78     mr      r5,r30
       304: 7f 83 e3 78     mr      r3,r28
       308: 48 00 00 01     bl      308 <._copy_from_user+0xa8>
                            308: R_PPC64_REL24      .__copy_tofrom_user
      ...
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    [mpe: Spell out the directions, s/KUAP_R/KUAP_READ/ etc.]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/f4e88ec4941d5facb35ce75026b0112f980086c3.1579866752.git.christophe.leroy@c-s.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dde2b5ba7057deb1d32c437f20067d6b61696c61
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Wed Jan 15 12:02:58 2020 +1100

    regulator fix for "regulator: core: Add regulator_is_equal() helper"
    
    [ Upstream commit 0468e667a5bead9c1b7ded92861b5a98d8d78745 ]
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Link: https://lore.kernel.org/r/20200115120258.0e535fcb@canb.auug.org.au
    Acked-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80c090ccf6dd0f8d060a45d6cc8596214a190b1c
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Thu Dec 5 09:53:56 2019 +0000

    crypto: atmel-tdes - Map driver data flags to Mode Register
    
    [ Upstream commit 848572f817721499c05b66553afc7ce0c08b1723 ]
    
    Simplifies the configuration of the TDES IP.
    
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 518878447abb1e9923a29e1fdeedb29ad8640457
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Fri Dec 13 14:45:44 2019 +0000

    crypto: atmel-aes - Fix CTR counter overflow when multiple fragments
    
    [ Upstream commit 3907ccfaec5d9965e306729936fc732c94d2c1e7 ]
    
    The CTR transfer works in fragments of data of maximum 1 MByte because
    of the 16 bit CTR counter embedded in the IP. Fix the CTR counter
    overflow handling for messages larger than 1 MByte.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 781a08d9740a ("crypto: atmel-aes - Fix counter overflow in CTR mode")
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abd0966ee0a650ad56d3ae2b2a1e42a33a0f82bc
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Thu Dec 5 09:54:03 2019 +0000

    crypto: atmel-aes - Fix saving of IV for CTR mode
    
    [ Upstream commit 371731ec2179d5810683406e7fc284b41b127df7 ]
    
    The req->iv of the skcipher_request is expected to contain the
    last used IV. Update the req->iv for CTR mode.
    
    Fixes: bd3c7b5c2aba ("crypto: atmel - add Atmel AES driver")
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c61ade8a88d9649e37bcb142edebda3b98c09e7
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Thu Dec 5 09:54:00 2019 +0000

    crypto: atmel-{aes,tdes} - Do not save IV for ECB mode
    
    [ Upstream commit c65d123742a7bf2a5bc9fa8398e1fd2376eb4c43 ]
    
    ECB mode does not use IV.
    
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab45cc58d935e60041c0d12bd556d5afc034e9d0
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jan 9 09:47:30 2020 +0100

    IB/core: Fix build failure without hugepages
    
    [ Upstream commit 74f75cda754eb69a77f910ceb5bc85f8e9ba56a5 ]
    
    HPAGE_SHIFT is only defined on architectures that support hugepages:
    
    drivers/infiniband/core/umem_odp.c: In function 'ib_umem_odp_get':
    drivers/infiniband/core/umem_odp.c:245:26: error: 'HPAGE_SHIFT' undeclared (first use in this function); did you mean 'PAGE_SHIFT'?
    
    Enclose this in an #ifdef.
    
    Fixes: 9ff1b6466a29 ("IB/core: Fix ODP with IB_ACCESS_HUGETLB handling")
    Link: https://lore.kernel.org/r/20200109084740.2872079-1-arnd@arndb.de
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5327291ecd8dc07cbde0e8c9457bccb9aae67e4
Author: David Howells <dhowells@redhat.com>
Date:   Thu Feb 6 13:55:01 2020 +0000

    rxrpc: Fix service call disconnection
    
    [ Upstream commit b39a934ec72fa2b5a74123891f25273a38378b90 ]
    
    The recent patch that substituted a flag on an rxrpc_call for the
    connection pointer being NULL as an indication that a call was disconnected
    puts the set_bit in the wrong place for service calls.  This is only a
    problem if a call is implicitly terminated by a new call coming in on the
    same connection channel instead of a terminating ACK packet.
    
    In such a case, rxrpc_input_implicit_end_call() calls
    __rxrpc_disconnect_call(), which is now (incorrectly) setting the
    disconnection bit, meaning that when rxrpc_release_call() is later called,
    it doesn't call rxrpc_disconnect_call() and so the call isn't removed from
    the peer's error distribution list and the list gets corrupted.
    
    KASAN finds the issue as an access after release on a call, but the
    position at which it occurs is confusing as it appears to be related to a
    different call (the call site is where the latter call is being removed
    from the error distribution list and either the next or pprev pointer
    points to a previously released call).
    
    Fix this by moving the setting of the flag from __rxrpc_disconnect_call()
    to rxrpc_disconnect_call() in the same place that the connection pointer
    was being cleared.
    
    Fixes: 5273a191dca6 ("rxrpc: Fix NULL pointer deref due to call->conn being cleared on disconnect")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ec607855e0cccfb931e6cabc06d9be520801863
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 8 12:24:38 2020 -0800

    KVM: Play nice with read-only memslots when querying host page size
    
    [ Upstream commit 42cde48b2d39772dba47e680781a32a6c4b7dc33 ]
    
    Avoid the "writable" check in __gfn_to_hva_many(), which will always fail
    on read-only memslots due to gfn_to_hva() assuming writes.  Functionally,
    this allows x86 to create large mappings for read-only memslots that
    are backed by HugeTLB mappings.
    
    Note, the changelog for commit 05da45583de9 ("KVM: MMU: large page
    support") states "If the largepage contains write-protected pages, a
    large pte is not used.", but "write-protected" refers to pages that are
    temporarily read-only, e.g. read-only memslots didn't even exist at the
    time.
    
    Fixes: 4d8b81abc47b ("KVM: introduce readonly memslot")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    [Redone using kvm_vcpu_gfn_to_memslot_prot. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0df80d63e9e7624c6598ea646e1f9f60729cb58
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 8 12:24:37 2020 -0800

    KVM: Use vcpu-specific gva->hva translation when querying host page size
    
    [ Upstream commit f9b84e19221efc5f493156ee0329df3142085f28 ]
    
    Use kvm_vcpu_gfn_to_hva() when retrieving the host page size so that the
    correct set of memslots is used when handling x86 page faults in SMM.
    
    Fixes: 54bf36aac520 ("KVM: x86: use vcpu-specific functions to read/write/translate GFNs")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20f5d7eda6b37eff4dc8740e3412015948be8bb1
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Sat Dec 28 14:25:24 2019 +0800

    KVM: nVMX: vmread should not set rflags to specify success in case of #PF
    
    [ Upstream commit a4d956b9390418623ae5d07933e2679c68b6f83c ]
    
    In case writing to vmread destination operand result in a #PF, vmread
    should not call nested_vmx_succeed() to set rflags to specify success.
    Similar to as done in VMPTRST (See handle_vmptrst()).
    
    Reviewed-by: Liran Alon <liran.alon@oracle.com>
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f8f35ba1c7498bb03dd7064cb2f6802b1596a5d
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:51 2019 -0800

    KVM: x86: Protect exit_reason from being used in Spectre-v1/L1TF attacks
    
    [ Upstream commit c926f2f7230b1a29e31914b51db680f8cbf3103f ]
    
    This fixes a Spectre-v1/L1TF vulnerability in vmx_handle_exit().
    While exit_reason is set by the hardware and therefore should not be
    attacker-influenced, an unknown exit_reason could potentially be used to
    perform such an attack.
    
    Fixes: 55d2375e58a6 ("KVM: nVMX: Move nested code to dedicated files")
    
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Signed-off-by: Nick Finco <nifi@google.com>
    Suggested-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e458a195fb369bf122ee36824aca90c5f84609be
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sat Feb 1 21:30:11 2020 -0700

    io_uring: prevent potential eventfd recursion on poll
    
    [ Upstream commit f0b493e6b9a8959356983f57112229e69c2f7b8c ]
    
    If we have nested or circular eventfd wakeups, then we can deadlock if
    we run them inline from our poll waitqueue wakeup handler. It's also
    possible to have very long chains of notifications, to the extent where
    we could risk blowing the stack.
    
    Check the eventfd recursion count before calling eventfd_signal(). If
    it's non-zero, then punt the signaling to async context. This is always
    safe, as it takes us out-of-line in terms of stack and locking context.
    
    Cc: stable@vger.kernel.org # 5.1+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e70e204634812661679360f95c0f910717610d3b
Author: Sasha Levin <sashal@kernel.org>
Date:   Sun Feb 9 13:30:59 2020 -0500

    io_uring: enable option to only trigger eventfd for async completions
    
    [ Upstream commit f2842ab5b72d7ee5f7f8385c2d4f32c133f5837b ]
    
    If an application is using eventfd notifications with poll to know when
    new SQEs can be issued, it's expecting the following read/writes to
    complete inline. And with that, it knows that there are events available,
    and don't want spurious wakeups on the eventfd for those requests.
    
    This adds IORING_REGISTER_EVENTFD_ASYNC, which works just like
    IORING_REGISTER_EVENTFD, except it only triggers notifications for events
    that happen from async completions (IRQ, or io-wq worker completions).
    Any completions inline from the submission itself will not trigger
    notifications.
    
    Suggested-by: Mark Papadakis <markuspapadakis@icloud.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0e6f4d4f90bde85cc83afd0f4bace13b71308fd
Author: Wayne Lin <Wayne.Lin@amd.com>
Date:   Thu Dec 5 17:00:43 2019 +0800

    drm/dp_mst: Remove VCPI while disabling topology mgr
    
    [ Upstream commit 64e62bdf04ab8529f45ed0a85122c703035dec3a ]
    
    [Why]
    
    This patch is trying to address the issue observed when hotplug DP
    daisy chain monitors.
    
    e.g.
    src-mstb-mstb-sst -> src (unplug) mstb-mstb-sst -> src-mstb-mstb-sst
    (plug in again)
    
    Once unplug a DP MST capable device, driver will call
    drm_dp_mst_topology_mgr_set_mst() to disable MST. In this function,
    it cleans data of topology manager while disabling mst_state. However,
    it doesn't clean up the proposed_vcpis of topology manager.
    If proposed_vcpi is not reset, once plug in MST daisy chain monitors
    later, code will fail at checking port validation while trying to
    allocate payloads.
    
    When MST capable device is plugged in again and try to allocate
    payloads by calling drm_dp_update_payload_part1(), this
    function will iterate over all proposed virtual channels to see if
    any proposed VCPI's num_slots is greater than 0. If any proposed
    VCPI's num_slots is greater than 0 and the port which the
    specific virtual channel directed to is not in the topology, code then
    fails at the port validation. Since there are stale VCPI allocations
    from the previous topology enablement in proposed_vcpi[], code will fail
    at port validation and reurn EINVAL.
    
    [How]
    
    Clean up the data of stale proposed_vcpi[] and reset mgr->proposed_vcpis
    to NULL while disabling mst in drm_dp_mst_topology_mgr_set_mst().
    
    Changes since v1:
    *Add on more details in commit message to describe the issue which the
    patch is trying to fix
    
    Signed-off-by: Wayne Lin <Wayne.Lin@amd.com>
    [added cc to stable]
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191205090043.7580-1-Wayne.Lin@amd.com
    Cc: <stable@vger.kernel.org> # v3.17+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77ee5b32e2d9d231437ca4d20a997bae1f06fb70
Author: Song Liu <songliubraving@fb.com>
Date:   Wed Jan 22 11:50:27 2020 -0800

    perf/cgroups: Install cgroup events to correct cpuctx
    
    commit 07c5972951f088094776038006a0592a46d14bbc upstream.
    
    cgroup events are always installed in the cpuctx. However, when it is not
    installed via IPI, list_update_cgroup_event() adds it to cpuctx of current
    CPU, which triggers list corruption:
    
      [] list_add double add: new=ffff888ff7cf0db0, prev=ffff888ff7ce82f0, next=ffff888ff7cf0db0.
    
    To reproduce this, we can simply run:
    
      # perf stat -e cs -a &
      # perf stat -e cs -G anycgroup
    
    Fix this by installing it to cpuctx that contains event->ctx, and the
    proper cgrp_cpuctx_list.
    
    Fixes: db0503e4f675 ("perf/core: Optimize perf_install_in_event()")
    Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200122195027.2112449-1-songliubraving@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a53ef498f4b973c1f6d6f284d672e95c0bfabee
Author: Song Liu <songliubraving@fb.com>
Date:   Thu Jan 23 10:11:46 2020 -0800

    perf/core: Fix mlock accounting in perf_mmap()
    
    commit 003461559ef7a9bd0239bae35a22ad8924d6e9ad upstream.
    
    Decreasing sysctl_perf_event_mlock between two consecutive perf_mmap()s of
    a perf ring buffer may lead to an integer underflow in locked memory
    accounting. This may lead to the undesired behaviors, such as failures in
    BPF map creation.
    
    Address this by adjusting the accounting logic to take into account the
    possibility that the amount of already locked memory may exceed the
    current limit.
    
    Fixes: c4b75479741c ("perf/core: Make the mlock accounting simple again")
    Suggested-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Acked-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: https://lkml.kernel.org/r/20200123181146.2238074-1-songliubraving@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5afe1951d0391c71051d74e1030319dc87ce237d
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38253ee10a964c9950d7eec66d581b5261e13a57
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jan 31 15:26:52 2020 +0100

    x86/apic/msi: Plug non-maskable MSI affinity race
    
    commit 6f1a4891a5928a5969c87fa5a584844c983ec823 upstream.
    
    Evan tracked down a subtle race between the update of the MSI message and
    the device raising an interrupt internally on PCI devices which do not
    support MSI masking. The update of the MSI message is non-atomic and
    consists of either 2 or 3 sequential 32bit wide writes to the PCI config
    space.
    
       - Write address low 32bits
       - Write address high 32bits (If supported by device)
       - Write data
    
    When an interrupt is migrated then both address and data might change, so
    the kernel attempts to mask the MSI interrupt first. But for MSI masking is
    optional, so there exist devices which do not provide it. That means that
    if the device raises an interrupt internally between the writes then a MSI
    message is sent built from half updated state.
    
    On x86 this can lead to spurious interrupts on the wrong interrupt
    vector when the affinity setting changes both address and data. As a
    consequence the device interrupt can be lost causing the device to
    become stuck or malfunctioning.
    
    Evan tried to handle that by disabling MSI accross an MSI message
    update. That's not feasible because disabling MSI has issues on its own:
    
     If MSI is disabled the PCI device is routing an interrupt to the legacy
     INTx mechanism. The INTx delivery can be disabled, but the disablement is
     not working on all devices.
    
     Some devices lose interrupts when both MSI and INTx delivery are disabled.
    
    Another way to solve this would be to enforce the allocation of the same
    vector on all CPUs in the system for this kind of screwed devices. That
    could be done, but it would bring back the vector space exhaustion problems
    which got solved a few years ago.
    
    Fortunately the high address (if supported by the device) is only relevant
    when X2APIC is enabled which implies interrupt remapping. In the interrupt
    remapping case the affinity setting is happening at the interrupt remapping
    unit and the PCI MSI message is programmed only once when the PCI device is
    initialized.
    
    That makes it possible to solve it with a two step update:
    
      1) Target the MSI msg to the new vector on the current target CPU
    
      2) Target the MSI msg to the new vector on the new target CPU
    
    In both cases writing the MSI message is only changing a single 32bit word
    which prevents the issue of inconsistency.
    
    After writing the final destination it is necessary to check whether the
    device issued an interrupt while the intermediate state #1 (new vector,
    current CPU) was in effect.
    
    This is possible because the affinity change is always happening on the
    current target CPU. The code runs with interrupts disabled, so the
    interrupt can be detected by checking the IRR of the local APIC. If the
    vector is pending in the IRR then the interrupt is retriggered on the new
    target CPU by sending an IPI for the associated vector on the target CPU.
    
    This can cause spurious interrupts on both the local and the new target
    CPU.
    
     1) If the new vector is not in use on the local CPU and the device
        affected by the affinity change raised an interrupt during the
        transitional state (step #1 above) then interrupt entry code will
        ignore that spurious interrupt. The vector is marked so that the
        'No irq handler for vector' warning is supressed once.
    
     2) If the new vector is in use already on the local CPU then the IRR check
        might see an pending interrupt from the device which is using this
        vector. The IPI to the new target CPU will then invoke the handler of
        the device, which got the affinity change, even if that device did not
        issue an interrupt
    
     3) If the new vector is in use already on the local CPU and the device
        affected by the affinity change raised an interrupt during the
        transitional state (step #1 above) then the handler of the device which
        uses that vector on the local CPU will be invoked.
    
    expose issues in device driver interrupt handlers which are not prepared to
    handle a spurious interrupt correctly. This not a regression, it's just
    exposing something which was already broken as spurious interrupts can
    happen for a lot of reasons and all driver handlers need to be able to deal
    with them.
    
    Reported-by: Evan Green <evgreen@chromium.org>
    Debugged-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Evan Green <evgreen@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87imkr4s7n.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14272cb005b57ffd4e0e6cc14cd8ba2682450157
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Thu Feb 6 18:16:55 2020 +0100

    cifs: fix mode bits from dir listing when mounted with modefromsid
    
    commit e3e056c35108661e418c803adfc054bf683426e7 upstream.
    
    When mounting with -o modefromsid, the mode bits are stored in an
    ACE. Directory enumeration (e.g. ls -l /mnt) triggers an SMB Query Dir
    which does not include ACEs in its response. The mode bits in this
    case are silently set to a default value of 755 instead.
    
    This patch marks the dentry created during the directory enumeration
    as needing re-evaluation (i.e. additional Query Info with ACEs) so
    that the mode bits can be properly extracted.
    
    Quick repro:
    
    $ mount.cifs //win19.test/data /mnt -o ...,modefromsid
    $ touch /mnt/foo && chmod 751 /mnt/foo
    $ stat /mnt/foo
      # reports 751 (OK)
    $ sleep 2
      # dentry older than 1s by default get invalidated
    $ ls -l /mnt
      # since dentry invalid, ls does a Query Dir
      # and reports foo as 755 (WRONG)
    
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b520269df6f31f55a2328ef464d2f3c13e3ca24
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Feb 5 11:08:01 2020 +1000

    cifs: fail i/o on soft mounts if sessionsetup errors out
    
    commit b0dd940e582b6a60296b9847a54012a4b080dc72 upstream.
    
    RHBZ: 1579050
    
    If we have a soft mount we should fail commands for session-setup
    failures (such as the password having changed/ account being deleted/ ...)
    and return an error back to the application.
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36549c863fce99a609c9f3a4f0d1f8f973ccf69d
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Thu Jan 9 15:53:37 2020 +0200

    net/mlx5e: TX, Error completion is for last WQE in batch
    
    [ Upstream commit b57e66ad42d051ed31319c28ed1b62b191299a29 ]
    
    For a cyclic work queue, when not requesting a completion per WQE,
    a single CQE might indicate the completion of several WQEs.
    However, in case some WQE in the batch causes an error, then an error
    completion is issued, breaking the batch, and pointing to the offending
    WQE in the wqe_counter field.
    
    Hence, WQE-specific error CQE handling (like printing, breaking, etc...)
    should be performed only for the last WQE in batch.
    
    Fixes: 130c7b46c93d ("net/mlx5e: TX, Dump WQs wqe descriptors on CQE with error events")
    Fixes: fd9b4be8002c ("net/mlx5e: RX, Support multiple outstanding UMR posts")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Aya Levin <ayal@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cb84bea753f9f5242237cf3aa54c7b08451045a
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Feb 5 21:22:46 2020 +0100

    r8169: fix performance regression related to PCIe max read request size
    
    [ Upstream commit 21b5f672fb2eb1366dedc4ac9d32431146b378d3 ]
    
    It turned out that on low performance systems the original change can
    cause lower tx performance. On a N3450-based mini-PC tx performance
    in iperf3 was reduced from 950Mbps to ~900Mbps. Therefore effectively
    revert the original change, just use pcie_set_readrq() now instead of
    changing the PCIe capability register directly.
    
    Fixes: 2df49d365498 ("r8169: remove fiddling with the PCIe max read request size")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e24b21a5c32137b4d22ed1373fb24006bb8944f0
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon Jan 27 14:18:14 2020 +0200

    net/mlx5: Deprecate usage of generic TLS HW capability bit
    
    [ Upstream commit 61c00cca41aeeaa8e5263c2f81f28534bc1efafb ]
    
    Deprecate the generic TLS cap bit, use the new TX-specific
    TLS cap bit instead.
    
    Fixes: a12ff35e0fb7 ("net/mlx5: Introduce TLS TX offload hardware bits and structures")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3afd6c54580edca4fcaae6d71948726609695b86
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Jan 27 09:27:51 2020 +0200

    net/mlx5: Fix deadlock in fs_core
    
    [ Upstream commit c1948390d78b5183ee9b7dd831efd7f6ac496ab0 ]
    
    free_match_list could be called when the flow table is already
    locked. We need to pass this notation to tree_put_node.
    
    It fixes the following lockdep warnning:
    
    [ 1797.268537] ============================================
    [ 1797.276837] WARNING: possible recursive locking detected
    [ 1797.285101] 5.5.0-rc5+ #10 Not tainted
    [ 1797.291641] --------------------------------------------
    [ 1797.299917] handler10/9296 is trying to acquire lock:
    [ 1797.307885] ffff889ad399a0a0 (&node->lock){++++}, at:
    tree_put_node+0x1d5/0x210 [mlx5_core]
    [ 1797.319694]
    [ 1797.319694] but task is already holding lock:
    [ 1797.330904] ffff889ad399a0a0 (&node->lock){++++}, at:
    nested_down_write_ref_node.part.33+0x1a/0x60 [mlx5_core]
    [ 1797.344707]
    [ 1797.344707] other info that might help us debug this:
    [ 1797.356952]  Possible unsafe locking scenario:
    [ 1797.356952]
    [ 1797.368333]        CPU0
    [ 1797.373357]        ----
    [ 1797.378364]   lock(&node->lock);
    [ 1797.384222]   lock(&node->lock);
    [ 1797.390031]
    [ 1797.390031]  *** DEADLOCK ***
    [ 1797.390031]
    [ 1797.403003]  May be due to missing lock nesting notation
    [ 1797.403003]
    [ 1797.414691] 3 locks held by handler10/9296:
    [ 1797.421465]  #0: ffff889cf2c5a110 (&block->cb_lock){++++}, at:
    tc_setup_cb_add+0x70/0x250
    [ 1797.432810]  #1: ffff88a030081490 (&comp->sem){++++}, at:
    mlx5_devcom_get_peer_data+0x4c/0xb0 [mlx5_core]
    [ 1797.445829]  #2: ffff889ad399a0a0 (&node->lock){++++}, at:
    nested_down_write_ref_node.part.33+0x1a/0x60 [mlx5_core]
    [ 1797.459913]
    [ 1797.459913] stack backtrace:
    [ 1797.469436] CPU: 1 PID: 9296 Comm: handler10 Kdump: loaded Not
    tainted 5.5.0-rc5+ #10
    [ 1797.480643] Hardware name: Dell Inc. PowerEdge R730/072T6D, BIOS
    2.4.3 01/17/2017
    [ 1797.491480] Call Trace:
    [ 1797.496701]  dump_stack+0x96/0xe0
    [ 1797.502864]  __lock_acquire.cold.63+0xf8/0x212
    [ 1797.510301]  ? lockdep_hardirqs_on+0x250/0x250
    [ 1797.517701]  ? mark_held_locks+0x55/0xa0
    [ 1797.524547]  ? quarantine_put+0xb7/0x160
    [ 1797.531422]  ? lockdep_hardirqs_on+0x17d/0x250
    [ 1797.538913]  lock_acquire+0xd6/0x1f0
    [ 1797.545529]  ? tree_put_node+0x1d5/0x210 [mlx5_core]
    [ 1797.553701]  down_write+0x94/0x140
    [ 1797.560206]  ? tree_put_node+0x1d5/0x210 [mlx5_core]
    [ 1797.568464]  ? down_write_killable_nested+0x170/0x170
    [ 1797.576925]  ? del_hw_flow_group+0xde/0x1f0 [mlx5_core]
    [ 1797.585629]  tree_put_node+0x1d5/0x210 [mlx5_core]
    [ 1797.593891]  ? free_match_list.part.25+0x147/0x170 [mlx5_core]
    [ 1797.603389]  free_match_list.part.25+0xe0/0x170 [mlx5_core]
    [ 1797.612654]  _mlx5_add_flow_rules+0x17e2/0x20b0 [mlx5_core]
    [ 1797.621838]  ? lock_acquire+0xd6/0x1f0
    [ 1797.629028]  ? esw_get_prio_table+0xb0/0x3e0 [mlx5_core]
    [ 1797.637981]  ? alloc_insert_flow_group+0x420/0x420 [mlx5_core]
    [ 1797.647459]  ? try_to_wake_up+0x4c7/0xc70
    [ 1797.654881]  ? lock_downgrade+0x350/0x350
    [ 1797.662271]  ? __mutex_unlock_slowpath+0xb1/0x3f0
    [ 1797.670396]  ? find_held_lock+0xac/0xd0
    [ 1797.677540]  ? mlx5_add_flow_rules+0xdc/0x360 [mlx5_core]
    [ 1797.686467]  mlx5_add_flow_rules+0xdc/0x360 [mlx5_core]
    [ 1797.695134]  ? _mlx5_add_flow_rules+0x20b0/0x20b0 [mlx5_core]
    [ 1797.704270]  ? irq_exit+0xa5/0x170
    [ 1797.710764]  ? retint_kernel+0x10/0x10
    [ 1797.717698]  ? mlx5_eswitch_set_rule_source_port.isra.9+0x122/0x230
    [mlx5_core]
    [ 1797.728708]  mlx5_eswitch_add_offloaded_rule+0x465/0x6d0 [mlx5_core]
    [ 1797.738713]  ? mlx5_eswitch_get_prio_range+0x30/0x30 [mlx5_core]
    [ 1797.748384]  ? mlx5_fc_stats_work+0x670/0x670 [mlx5_core]
    [ 1797.757400]  mlx5e_tc_offload_fdb_rules.isra.27+0x24/0x90 [mlx5_core]
    [ 1797.767665]  mlx5e_tc_add_fdb_flow+0xaf8/0xd40 [mlx5_core]
    [ 1797.776886]  ? mlx5e_encap_put+0xd0/0xd0 [mlx5_core]
    [ 1797.785562]  ? mlx5e_alloc_flow.isra.43+0x18c/0x1c0 [mlx5_core]
    [ 1797.795353]  __mlx5e_add_fdb_flow+0x2e2/0x440 [mlx5_core]
    [ 1797.804558]  ? mlx5e_tc_update_neigh_used_value+0x8c0/0x8c0
    [mlx5_core]
    [ 1797.815093]  ? wait_for_completion+0x260/0x260
    [ 1797.823272]  mlx5e_configure_flower+0xe94/0x1620 [mlx5_core]
    [ 1797.832792]  ? __mlx5e_add_fdb_flow+0x440/0x440 [mlx5_core]
    [ 1797.842096]  ? down_read+0x11a/0x2e0
    [ 1797.849090]  ? down_write+0x140/0x140
    [ 1797.856142]  ? mlx5e_rep_indr_setup_block_cb+0xc0/0xc0 [mlx5_core]
    [ 1797.866027]  tc_setup_cb_add+0x11a/0x250
    [ 1797.873339]  fl_hw_replace_filter+0x25e/0x320 [cls_flower]
    [ 1797.882385]  ? fl_hw_destroy_filter+0x1c0/0x1c0 [cls_flower]
    [ 1797.891607]  fl_change+0x1d54/0x1fb6 [cls_flower]
    [ 1797.899772]  ? __rhashtable_insert_fast.constprop.50+0x9f0/0x9f0
    [cls_flower]
    [ 1797.910728]  ? lock_downgrade+0x350/0x350
    [ 1797.918187]  ? __radix_tree_lookup+0xa5/0x130
    [ 1797.926046]  ? fl_set_key+0x1590/0x1590 [cls_flower]
    [ 1797.934611]  ? __rhashtable_insert_fast.constprop.50+0x9f0/0x9f0
    [cls_flower]
    [ 1797.945673]  tc_new_tfilter+0xcd1/0x1240
    [ 1797.953138]  ? tc_del_tfilter+0xb10/0xb10
    [ 1797.960688]  ? avc_has_perm_noaudit+0x92/0x320
    [ 1797.968721]  ? avc_has_perm_noaudit+0x1df/0x320
    [ 1797.976816]  ? avc_has_extended_perms+0x990/0x990
    [ 1797.985090]  ? mark_lock+0xaa/0x9e0
    [ 1797.991988]  ? match_held_lock+0x1b/0x240
    [ 1797.999457]  ? match_held_lock+0x1b/0x240
    [ 1798.006859]  ? find_held_lock+0xac/0xd0
    [ 1798.014045]  ? symbol_put_addr+0x40/0x40
    [ 1798.021317]  ? rcu_read_lock_sched_held+0xd0/0xd0
    [ 1798.029460]  ? tc_del_tfilter+0xb10/0xb10
    [ 1798.036810]  rtnetlink_rcv_msg+0x4d5/0x620
    [ 1798.044236]  ? rtnl_bridge_getlink+0x460/0x460
    [ 1798.052034]  ? lockdep_hardirqs_on+0x250/0x250
    [ 1798.059837]  ? match_held_lock+0x1b/0x240
    [ 1798.067146]  ? find_held_lock+0xac/0xd0
    [ 1798.074246]  netlink_rcv_skb+0xc6/0x1f0
    [ 1798.081339]  ? rtnl_bridge_getlink+0x460/0x460
    [ 1798.089104]  ? netlink_ack+0x440/0x440
    [ 1798.096061]  netlink_unicast+0x2d4/0x3b0
    [ 1798.103189]  ? netlink_attachskb+0x3f0/0x3f0
    [ 1798.110724]  ? _copy_from_iter_full+0xda/0x370
    [ 1798.118415]  netlink_sendmsg+0x3ba/0x6a0
    [ 1798.125478]  ? netlink_unicast+0x3b0/0x3b0
    [ 1798.132705]  ? netlink_unicast+0x3b0/0x3b0
    [ 1798.139880]  sock_sendmsg+0x94/0xa0
    [ 1798.146332]  ____sys_sendmsg+0x36c/0x3f0
    [ 1798.153251]  ? copy_msghdr_from_user+0x165/0x230
    [ 1798.160941]  ? kernel_sendmsg+0x30/0x30
    [ 1798.167738]  ___sys_sendmsg+0xeb/0x150
    [ 1798.174411]  ? sendmsg_copy_msghdr+0x30/0x30
    [ 1798.181649]  ? lock_downgrade+0x350/0x350
    [ 1798.188559]  ? rcu_read_lock_sched_held+0xd0/0xd0
    [ 1798.196239]  ? __fget+0x21d/0x320
    [ 1798.202335]  ? do_dup2+0x2a0/0x2a0
    [ 1798.208499]  ? lock_downgrade+0x350/0x350
    [ 1798.215366]  ? __fget_light+0xd6/0xf0
    [ 1798.221808]  ? syscall_trace_enter+0x369/0x5d0
    [ 1798.229112]  __sys_sendmsg+0xd3/0x160
    [ 1798.235511]  ? __sys_sendmsg_sock+0x60/0x60
    [ 1798.242478]  ? syscall_trace_enter+0x233/0x5d0
    [ 1798.249721]  ? syscall_slow_exit_work+0x280/0x280
    [ 1798.257211]  ? do_syscall_64+0x1e/0x2e0
    [ 1798.263680]  do_syscall_64+0x72/0x2e0
    [ 1798.269950]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: bd71b08ec2ee ("net/mlx5: Support multiple updates of steering rules in parallel")
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24beb5ed8257f4bbd600b6d8c53b5e86bda5e464
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Fri Feb 7 19:29:28 2020 +0200

    drop_monitor: Do not cancel uninitialized work item
    
    [ Upstream commit dfa7f709596be5ca46c070d4f8acbb344322056a ]
    
    Drop monitor uses a work item that takes care of constructing and
    sending netlink notifications to user space. In case drop monitor never
    started to monitor, then the work item is uninitialized and not
    associated with a function.
    
    Therefore, a stop command from user space results in canceling an
    uninitialized work item which leads to the following warning [1].
    
    Fix this by not processing a stop command if drop monitor is not
    currently monitoring.
    
    [1]
    [   31.735402] ------------[ cut here ]------------
    [   31.736470] WARNING: CPU: 0 PID: 143 at kernel/workqueue.c:3032 __flush_work+0x89f/0x9f0
    ...
    [   31.738120] CPU: 0 PID: 143 Comm: dwdump Not tainted 5.5.0-custom-09491-g16d4077796b8 #727
    [   31.741968] RIP: 0010:__flush_work+0x89f/0x9f0
    ...
    [   31.760526] Call Trace:
    [   31.771689]  __cancel_work_timer+0x2a6/0x3b0
    [   31.776809]  net_dm_cmd_trace+0x300/0xef0
    [   31.777549]  genl_rcv_msg+0x5c6/0xd50
    [   31.781005]  netlink_rcv_skb+0x13b/0x3a0
    [   31.784114]  genl_rcv+0x29/0x40
    [   31.784720]  netlink_unicast+0x49f/0x6a0
    [   31.787148]  netlink_sendmsg+0x7cf/0xc80
    [   31.790426]  ____sys_sendmsg+0x620/0x770
    [   31.793458]  ___sys_sendmsg+0xfd/0x170
    [   31.802216]  __sys_sendmsg+0xdf/0x1a0
    [   31.806195]  do_syscall_64+0xa0/0x540
    [   31.806885]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 8e94c3bc922e ("drop_monitor: Allow user to start monitoring hardware drops")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa77d95c7297f1838470736d5c1675273a36e86d
Author: Sudarsana Reddy Kalluru <skalluru@marvell.com>
Date:   Wed Feb 5 05:10:55 2020 -0800

    qed: Fix timestamping issue for L2 unicast ptp packets.
    
    [ Upstream commit 0202d293c2faecba791ba4afc5aec086249c393d ]
    
    commit cedeac9df4b8 ("qed: Add support for Timestamping the unicast
    PTP packets.") handles the timestamping of L4 ptp packets only.
    This patch adds driver changes to detect/timestamp both L2/L4 unicast
    PTP packets.
    
    Fixes: cedeac9df4b8 ("qed: Add support for Timestamping the unicast PTP packets.")
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d70902d8fad938f04931005124b790cb1bac3cf
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 7 07:16:37 2020 -0800

    ipv6/addrconf: fix potential NULL deref in inet6_set_link_af()
    
    [ Upstream commit db3fa271022dacb9f741b96ea4714461a8911bb9 ]
    
    __in6_dev_get(dev) called from inet6_set_link_af() can return NULL.
    
    The needed check has been recently removed, let's add it back.
    
    While do_setlink() does call validate_linkmsg() :
    ...
    err = validate_linkmsg(dev, tb); /* OK at this point */
    ...
    
    It is possible that the following call happening before the
    ->set_link_af() removes IPv6 if MTU is less than 1280 :
    
    if (tb[IFLA_MTU]) {
        err = dev_set_mtu_ext(dev, nla_get_u32(tb[IFLA_MTU]), extack);
        if (err < 0)
              goto errout;
        status |= DO_SETLINK_MODIFIED;
    }
    ...
    
    if (tb[IFLA_AF_SPEC]) {
       ...
       err = af_ops->set_link_af(dev, af);
          ->inet6_set_link_af() // CRASH because idev is NULL
    
    Please note that IPv4 is immune to the bug since inet_set_link_af() does :
    
    struct in_device *in_dev = __in_dev_get_rcu(dev);
    if (!in_dev)
        return -EAFNOSUPPORT;
    
    This problem has been mentioned in commit cf7afbfeb8ce ("rtnl: make
    link af-specific updates atomic") changelog :
    
        This method is not fail proof, while it is currently sufficient
        to make set_link_af() inerrable and thus 100% atomic, the
        validation function method will not be able to detect all error
        scenarios in the future, there will likely always be errors
        depending on states which are f.e. not protected by rtnl_mutex
        and thus may change between validation and setting.
    
    IPv6: ADDRCONF(NETDEV_CHANGE): lo: link becomes ready
    general protection fault, probably for non-canonical address 0xdffffc0000000056: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000002b0-0x00000000000002b7]
    CPU: 0 PID: 9698 Comm: syz-executor712 Not tainted 5.5.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:inet6_set_link_af+0x66e/0xae0 net/ipv6/addrconf.c:5733
    Code: 38 d0 7f 08 84 c0 0f 85 20 03 00 00 48 8d bb b0 02 00 00 45 0f b6 64 24 04 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 84 c0 74 08 3c 03 0f 8e 1a 03 00 00 44 89 a3 b0 02 00
    RSP: 0018:ffffc90005b06d40 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff86df39a6
    RDX: 0000000000000056 RSI: ffffffff86df3e74 RDI: 00000000000002b0
    RBP: ffffc90005b06e70 R08: ffff8880a2ac0380 R09: ffffc90005b06db0
    R10: fffff52000b60dbe R11: ffffc90005b06df7 R12: 0000000000000000
    R13: 0000000000000000 R14: ffff8880a1fcc424 R15: dffffc0000000000
    FS:  0000000000c46880(0000) GS:ffff8880ae800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055f0494ca0d0 CR3: 000000009e4ac000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     do_setlink+0x2a9f/0x3720 net/core/rtnetlink.c:2754
     rtnl_group_changelink net/core/rtnetlink.c:3103 [inline]
     __rtnl_newlink+0xdd1/0x1790 net/core/rtnetlink.c:3257
     rtnl_newlink+0x69/0xa0 net/core/rtnetlink.c:3377
     rtnetlink_rcv_msg+0x45e/0xaf0 net/core/rtnetlink.c:5438
     netlink_rcv_skb+0x177/0x450 net/netlink/af_netlink.c:2477
     rtnetlink_rcv+0x1d/0x30 net/core/rtnetlink.c:5456
     netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
     netlink_unicast+0x59e/0x7e0 net/netlink/af_netlink.c:1328
     netlink_sendmsg+0x91c/0xea0 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:672
     ____sys_sendmsg+0x753/0x880 net/socket.c:2343
     ___sys_sendmsg+0x100/0x170 net/socket.c:2397
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2430
     __do_sys_sendmsg net/socket.c:2439 [inline]
     __se_sys_sendmsg net/socket.c:2437 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2437
     do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4402e9
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffd62fbcf8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 00000000004402e9
    RDX: 0000000000000000 RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000008 R09: 00000000004002c8
    R10: 0000000000000005 R11: 0000000000000246 R12: 0000000000401b70
    R13: 0000000000401c00 R14: 0000000000000000 R15: 0000000000000000
    Modules linked in:
    ---[ end trace cfa7664b8fdcdff3 ]---
    RIP: 0010:inet6_set_link_af+0x66e/0xae0 net/ipv6/addrconf.c:5733
    Code: 38 d0 7f 08 84 c0 0f 85 20 03 00 00 48 8d bb b0 02 00 00 45 0f b6 64 24 04 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 84 c0 74 08 3c 03 0f 8e 1a 03 00 00 44 89 a3 b0 02 00
    RSP: 0018:ffffc90005b06d40 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff86df39a6
    RDX: 0000000000000056 RSI: ffffffff86df3e74 RDI: 00000000000002b0
    RBP: ffffc90005b06e70 R08: ffff8880a2ac0380 R09: ffffc90005b06db0
    R10: fffff52000b60dbe R11: ffffc90005b06df7 R12: 0000000000000000
    R13: 0000000000000000 R14: ffff8880a1fcc424 R15: dffffc0000000000
    FS:  0000000000c46880(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000004 CR3: 000000009e4ac000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fixes: 7dc2bccab0ee ("Validate required parameters in inet6_validate_link_af")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Bisected-and-reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e607d6f7a37f4eb9f172eb42399d4cfc2c50c0d1
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Thu Feb 6 13:46:10 2020 -0800

    taprio: Fix dropping packets when using taprio + ETF offloading
    
    [ Upstream commit bfabd41da34180d05382312533a3adc2e012dee0 ]
    
    When using taprio offloading together with ETF offloading, configured
    like this, for example:
    
    $ tc qdisc replace dev $IFACE parent root handle 100 taprio \
            num_tc 4 \
            map 2 2 1 0 3 2 2 2 2 2 2 2 2 2 2 2 \
            queues 1@0 1@1 1@2 1@3 \
            base-time $BASE_TIME \
            sched-entry S 01 1000000 \
            sched-entry S 0e 1000000 \
            flags 0x2
    
    $ tc qdisc replace dev $IFACE parent 100:1 etf \
            offload delta 300000 clockid CLOCK_TAI
    
    During enqueue, it works out that the verification added for the
    "txtime" assisted mode is run when using taprio + ETF offloading, the
    only thing missing is initializing the 'next_txtime' of all the cycle
    entries. (if we don't set 'next_txtime' all packets from SO_TXTIME
    sockets are dropped)
    
    Fixes: 4cfd5779bd6e ("taprio: Add support for txtime-assist mode")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5383710394b81b8b55c59e6664576d5f5601abaa
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Thu Feb 6 13:46:09 2020 -0800

    taprio: Use taprio_reset_tc() to reset Traffic Classes configuration
    
    [ Upstream commit 7c16680a08ee1e444a67d232c679ccf5b30fad16 ]
    
    When destroying the current taprio instance, which can happen when the
    creation of one fails, we should reset the traffic class configuration
    back to the default state.
    
    netdev_reset_tc() is a better way because in addition to setting the
    number of traffic classes to zero, it also resets the priority to
    traffic classes mapping to the default value.
    
    Fixes: 5a781ccbd19e ("tc: Add support for configuring the taprio scheduler")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84bd31b7516a64573b99331c0467b06f8cf0eb4a
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Thu Feb 6 13:46:08 2020 -0800

    taprio: Add missing policy validation for flags
    
    [ Upstream commit 49c684d79cfdc3032344bf6f3deeea81c4efedbf ]
    
    netlink policy validation for the 'flags' argument was missing.
    
    Fixes: 4cfd5779bd6e ("taprio: Add support for txtime-assist mode")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9b5a7625c21f0913b52feb72b36e424055d6075
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Thu Feb 6 13:46:07 2020 -0800

    taprio: Fix still allowing changing the flags during runtime
    
    [ Upstream commit a9d6227436f32142209f4428f2dc616761485112 ]
    
    Because 'q->flags' starts as zero, and zero is a valid value, we
    aren't able to detect the transition from zero to something else
    during "runtime".
    
    The solution is to initialize 'q->flags' with an invalid value, so we
    can detect if 'q->flags' was set by the user or not.
    
    To better solidify the behavior, 'flags' handling is moved to a
    separate function. The behavior is:
     - 'flags' if unspecified by the user, is assumed to be zero;
     - 'flags' cannot change during "runtime" (i.e. a change() request
     cannot modify it);
    
    With this new function we can remove taprio_flags, which should reduce
    the risk of future accidents.
    
    Allowing flags to be changed was causing the following RCU stall:
    
    [ 1730.558249] rcu: INFO: rcu_preempt detected stalls on CPUs/tasks:
    [ 1730.558258] rcu:       6-...0: (190 ticks this GP) idle=922/0/0x1 softirq=25580/25582 fqs=16250
    [ 1730.558264]            (detected by 2, t=65002 jiffies, g=33017, q=81)
    [ 1730.558269] Sending NMI from CPU 2 to CPUs 6:
    [ 1730.559277] NMI backtrace for cpu 6
    [ 1730.559277] CPU: 6 PID: 0 Comm: swapper/6 Tainted: G            E     5.5.0-rc6+ #35
    [ 1730.559278] Hardware name: Gigabyte Technology Co., Ltd. Z390 AORUS ULTRA/Z390 AORUS ULTRA-CF, BIOS F7 03/14/2019
    [ 1730.559278] RIP: 0010:__hrtimer_run_queues+0xe2/0x440
    [ 1730.559278] Code: 48 8b 43 28 4c 89 ff 48 8b 75 c0 48 89 45 c8 e8 f4 bb 7c 00 0f 1f 44 00 00 65 8b 05 40 31 f0 68 89 c0 48 0f a3 05 3e 5c 25 01 <0f> 82 fc 01 00 00 48 8b 45 c8 48 89 df ff d0 89 45 c8 0f 1f 44 00
    [ 1730.559279] RSP: 0018:ffff9970802d8f10 EFLAGS: 00000083
    [ 1730.559279] RAX: 0000000000000006 RBX: ffff8b31645bff38 RCX: 0000000000000000
    [ 1730.559280] RDX: 0000000000000000 RSI: ffffffff9710f2ec RDI: ffffffff978daf0e
    [ 1730.559280] RBP: ffff9970802d8f68 R08: 0000000000000000 R09: 0000000000000000
    [ 1730.559280] R10: 0000018336d7944e R11: 0000000000000001 R12: ffff8b316e39f9c0
    [ 1730.559281] R13: ffff8b316e39f940 R14: ffff8b316e39f998 R15: ffff8b316e39f7c0
    [ 1730.559281] FS:  0000000000000000(0000) GS:ffff8b316e380000(0000) knlGS:0000000000000000
    [ 1730.559281] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1730.559281] CR2: 00007f1105303760 CR3: 0000000227210005 CR4: 00000000003606e0
    [ 1730.559282] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1730.559282] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1730.559282] Call Trace:
    [ 1730.559282]  <IRQ>
    [ 1730.559283]  ? taprio_dequeue_soft+0x2d0/0x2d0 [sch_taprio]
    [ 1730.559283]  hrtimer_interrupt+0x104/0x220
    [ 1730.559283]  ? irqtime_account_irq+0x34/0xa0
    [ 1730.559283]  smp_apic_timer_interrupt+0x6d/0x230
    [ 1730.559284]  apic_timer_interrupt+0xf/0x20
    [ 1730.559284]  </IRQ>
    [ 1730.559284] RIP: 0010:cpu_idle_poll+0x35/0x1a0
    [ 1730.559285] Code: 88 82 ff 65 44 8b 25 12 7d 73 68 0f 1f 44 00 00 e8 90 c3 89 ff fb 65 48 8b 1c 25 c0 7e 01 00 48 8b 03 a8 08 74 0b eb 1c f3 90 <48> 8b 03 a8 08 75 13 8b 05 be a8 a8 00 85 c0 75 ed e8 75 48 84 ff
    [ 1730.559285] RSP: 0018:ffff997080137ea8 EFLAGS: 00000202 ORIG_RAX: ffffffffffffff13
    [ 1730.559285] RAX: 0000000000000001 RBX: ffff8b316bc3c580 RCX: 0000000000000000
    [ 1730.559286] RDX: 0000000000000001 RSI: 000000002819aad9 RDI: ffffffff978da730
    [ 1730.559286] RBP: ffff997080137ec0 R08: 0000018324a6d387 R09: 0000000000000000
    [ 1730.559286] R10: 0000000000000400 R11: 0000000000000001 R12: 0000000000000006
    [ 1730.559286] R13: ffff8b316bc3c580 R14: 0000000000000000 R15: 0000000000000000
    [ 1730.559287]  ? cpu_idle_poll+0x20/0x1a0
    [ 1730.559287]  ? cpu_idle_poll+0x20/0x1a0
    [ 1730.559287]  do_idle+0x4d/0x1f0
    [ 1730.559287]  ? complete+0x44/0x50
    [ 1730.559288]  cpu_startup_entry+0x1b/0x20
    [ 1730.559288]  start_secondary+0x142/0x180
    [ 1730.559288]  secondary_startup_64+0xb6/0xc0
    [ 1776.686313] nvme nvme0: I/O 96 QID 1 timeout, completion polled
    
    Fixes: 4cfd5779bd6e ("taprio: Add support for txtime-assist mode")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01165934390590d81562bfe7d82863177925757f
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Thu Feb 6 13:46:06 2020 -0800

    taprio: Fix enabling offload with wrong number of traffic classes
    
    [ Upstream commit 5652e63df3303c2a702bac25fbf710b9cb64dfba ]
    
    If the driver implementing taprio offloading depends on the value of
    the network device number of traffic classes (dev->num_tc) for
    whatever reason, it was going to receive the value zero. The value was
    only set after the offloading function is called.
    
    So, moving setting the number of traffic classes to before the
    offloading function is called fixes this issue. This is safe because
    this only happens when taprio is instantiated (we don't allow this
    configuration to be changed without first removing taprio).
    
    Fixes: 9c66d1564676 ("taprio: Add support for hardware offloading")
    Reported-by: Po Liu <po.liu@nxp.com>
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Acked-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae011f53d014390fb7404d15e9d96caff218b9bc
Author: Voon Weifeng <weifeng.voon@intel.com>
Date:   Fri Feb 7 15:34:28 2020 +0800

    net: stmmac: update pci platform data to use phy_interface
    
    [ Upstream commit 909c1dde67c433f1e4122f2619cbd8ac370fcf0a ]
    
    The recent patch to support passive mode converter did not take care the
    phy interface configuration in PCI platform data. Hence, converting all
    the PCI platform data from plat->interface to plat->phy_interface as the
    default mode is meant for PHY.
    
    Fixes: 0060c8783330 ("net: stmmac: implement support for passive mode converters via dt")
    Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
    Tested-by: Tan, Tee Min <tee.min.tan@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db6092e3093e581cb182b2fc44eb5c50b399704b
Author: Tan, Tee Min <tee.min.tan@intel.com>
Date:   Fri Feb 7 15:34:15 2020 +0800

    net: stmmac: xgmac: fix missing IFF_MULTICAST checki in dwxgmac2_set_filter
    
    [ Upstream commit 2f633d5820e4ed870f408957322acb9263bce2f4 ]
    
    Without checking for IFF_MULTICAST flag, it is wrong to assume multicast
    filtering is always enabled. By checking against IFF_MULTICAST, now
    the driver behaves correctly when the multicast support is toggled by below
    command:-
      ip link set <devname> multicast off|on
    
    Fixes: 0efedbf11f07a ("net: stmmac: xgmac: Fix XGMAC selftests")
    Signed-off-by: Tan, Tee Min <tee.min.tan@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e0da07ac785d43679d8972324642520d4771b20
Author: Verma, Aashish <aashishx.verma@intel.com>
Date:   Fri Feb 7 15:33:54 2020 +0800

    net: stmmac: fix missing IFF_MULTICAST check in dwmac4_set_filter
    
    [ Upstream commit 2ba31cd93784b61813226d259fd94a221ecd9d61 ]
    
    Without checking for IFF_MULTICAST flag, it is wrong to assume multicast
    filtering is always enabled. By checking against IFF_MULTICAST, now
    the driver behaves correctly when the multicast support is toggled by below
    command:-
      ip link set <devname> multicast off|on
    
    Fixes: 477286b53f55 ("stmmac: add GMAC4 core support")
    Signed-off-by: Verma, Aashish <aashishx.verma@intel.com>
    Tested-by: Tan, Tee Min <tee.min.tan@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05a73640375be836dc74f44299e3f9e77daf1d27
Author: Ong Boon Leong <boon.leong.ong@intel.com>
Date:   Fri Feb 7 15:33:40 2020 +0800

    net: stmmac: xgmac: fix incorrect XGMAC_VLAN_TAG register writting
    
    [ Upstream commit 907a076881f171254219faad05f46ac5baabedfb ]
    
    We should always do a read of current value of XGMAC_VLAN_TAG instead of
    directly overwriting the register value.
    
    Fixes: 3cd1cfcba26e2 ("net: stmmac: Implement VLAN Hash Filtering in XGMAC")
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8393d7c15f6ba94052ed5b2789b4a39502dc5d66
Author: Tan, Tee Min <tee.min.tan@intel.com>
Date:   Fri Feb 7 15:33:20 2020 +0800

    net: stmmac: fix incorrect GMAC_VLAN_TAG register writting in GMAC4+
    
    [ Upstream commit 9eeeb3c9de4e3aeaa2bec097162f09305dd9f4c3 ]
    
    It should always do a read of current value of GMAC_VLAN_TAG instead of
    directly overwriting the register value.
    
    Fixes: c1be0022df0d ("net: stmmac: Add VLAN HASH filtering support in GMAC4+")
    Signed-off-by: Tan, Tee Min <tee.min.tan@intel.com>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61093070c2c026482d0b690b58d226de0fcf7caa
Author: Harini Katakam <harini.katakam@xilinx.com>
Date:   Wed Feb 5 18:08:12 2020 +0530

    net: macb: Limit maximum GEM TX length in TSO
    
    [ Upstream commit f822e9c4ffa511a5c681cf866287d9383a3b6f1b ]
    
    GEM_MAX_TX_LEN currently resolves to 0x3FF8 for any IP version supporting
    TSO with full 14bits of length field in payload descriptor. But an IP
    errata causes false amba_error (bit 6 of ISR) when length in payload
    descriptors is specified above 16387. The error occurs because the DMA
    falsely concludes that there is not enough space in SRAM for incoming
    payload. These errors were observed continuously under stress of large
    packets using iperf on a version where SRAM was 16K for each queue. This
    errata will be documented shortly and affects all versions since TSO
    functionality was added. Hence limit the max length to 0x3FC0 (rounded).
    
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb6a4e44c51c0c2afb0496b2bcb0f85658339801
Author: Harini Katakam <harini.katakam@xilinx.com>
Date:   Wed Feb 5 18:08:11 2020 +0530

    net: macb: Remove unnecessary alignment check for TSO
    
    [ Upstream commit 41c1ef978c8d0259c6636e6d2d854777e92650eb ]
    
    The IP TSO implementation does NOT require the length to be a
    multiple of 8. That is only a requirement for UFO as per IP
    documentation. Hence, exit macb_features_check function in the
    beginning if the protocol is not UDP. Only when it is UDP,
    proceed further to the alignment checks. Update comments to
    reflect the same. Also remove dead code checking for protocol
    TCP when calculating header length.
    
    Fixes: 1629dd4f763c ("cadence: Add LSO support.")
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2ea8d2b1c6eab652aebfd57cf067a5647a6d49f
Author: Raed Salem <raeds@mellanox.com>
Date:   Wed Oct 23 16:41:21 2019 +0300

    net/mlx5: IPsec, fix memory leak at mlx5_fpga_ipsec_delete_sa_ctx
    
    [ Upstream commit 08db2cf577487f5123aebcc2f913e0b8a2c14b43 ]
    
    SA context is allocated at mlx5_fpga_ipsec_create_sa_ctx,
    however the counterpart mlx5_fpga_ipsec_delete_sa_ctx function
    nullifies sa_ctx pointer without freeing the memory allocated,
    hence the memory leak.
    
    Fix by free SA context when the SA is released.
    
    Fixes: d6c4f0298cec ("net/mlx5: Refactor accel IPSec code")
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8905a75cab4cff450c262384bd9e25f80a21eb9
Author: Raed Salem <raeds@mellanox.com>
Date:   Tue Dec 24 09:54:45 2019 +0200

    net/mlx5: IPsec, Fix esp modify function attribute
    
    [ Upstream commit 0dc2c534f17c05bed0622b37a744bc38b48ca88a ]
    
    The function mlx5_fpga_esp_validate_xfrm_attrs is wrongly used
    with negative negation as zero value indicates success but it
    used as failure return value instead.
    
    Fix by remove the unary not negation operator.
    
    Fixes: 05564d0ae075 ("net/mlx5: Add flow-steering commands for FPGA IPSec implementation")
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae00cd94c13439559f02e52422ccdfd6cb7ecfef
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Feb 5 12:32:04 2020 -0800

    net: systemport: Avoid RBUF stuck in Wake-on-LAN mode
    
    [ Upstream commit 263a425a482fc495d6d3f9a29b9103a664c38b69 ]
    
    After a number of suspend and resume cycles, it is possible for the RBUF
    to be stuck in Wake-on-LAN mode, despite the MPD enable bit being
    cleared which instructed the RBUF to exit that mode.
    
    Avoid creating that problematic condition by clearing the RX_EN and
    TX_EN bits in the UniMAC prior to disable the Magic Packet Detector
    logic which is guaranteed to make the RBUF exit Wake-on-LAN mode.
    
    Fixes: 83e82f4c706b ("net: systemport: add Wake-on-LAN support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbb10167172e5c9145d63e63cbd39df421e709d8
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Thu Feb 6 23:29:17 2020 +0800

    net: stmmac: fix a possible endless loop
    
    [ Upstream commit 7d10f0774f9e32aa2f2e012f7fcb312a2ce422b9 ]
    
    It forgot to reduce the value of the variable retry in a while loop
    in the ethqos_configure() function. It may cause an endless loop and
    without timeout.
    
    Fixes: a7c30e62d4b8 ("net: stmmac: Add driver for Qualcomm ethqos")
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Acked-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c80ada6a090aab44181c72fbb82f68830c5c0c02
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Feb 4 11:10:12 2020 -0800

    net_sched: fix a resource leak in tcindex_set_parms()
    
    [ Upstream commit 52b5ae501c045010aeeb1d5ac0373ff161a88291 ]
    
    Jakub noticed there is a potential resource leak in
    tcindex_set_parms(): when tcindex_filter_result_init() fails
    and it jumps to 'errout1' which doesn't release the memory
    and resources allocated by tcindex_alloc_perfect_hash().
    
    We should just jump to 'errout_alloc' which calls
    tcindex_free_perfect_hash().
    
    Fixes: b9a24bb76bf6 ("net_sched: properly handle failure case of tcf_exts_init()")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf5b46cbbe4b98a88d7603ce7212abc06e0c7124
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Thu Feb 6 10:14:39 2020 +0100

    net: mvneta: move rx_dropped and rx_errors in per-cpu stats
    
    [ Upstream commit c35947b8ff8acca33134ee39c31708233765c31a ]
    
    Move rx_dropped and rx_errors counters in mvneta_pcpu_stats in order to
    avoid possible races updating statistics
    
    Fixes: 562e2f467e71 ("net: mvneta: Improve the buffer allocation method for SWBM")
    Fixes: dc35a10f68d3 ("net: mvneta: bm: add support for hardware buffer management")
    Fixes: c5aff18204da ("net: mvneta: driver for Marvell Armada 370/XP network unit")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7abc42275bf92a769eb6872c6cacbf2ac1647545
Author: Razvan Stefanescu <razvan.stefanescu@microchip.com>
Date:   Fri Feb 7 17:44:04 2020 +0200

    net: dsa: microchip: enable module autoprobe
    
    [ Upstream commit f8c2afa66d5397b0b9293c4347dac6dabb327685 ]
    
    This matches /sys/devices/.../spi1.0/modalias content.
    
    Fixes: 9b2d9f05cddf ("net: dsa: microchip: add ksz9567 to ksz9477 driver")
    Fixes: d9033ae95cf4 ("net: dsa: microchip: add KSZ8563 compatibility string")
    Fixes: 8c29bebb1f8a ("net: dsa: microchip: add KSZ9893 switch support")
    Fixes: 45316818371d ("net: dsa: add support for ksz9897 ethernet switch")
    Fixes: b987e98e50ab ("dsa: add DSA switch driver for Microchip KSZ9477")
    Signed-off-by: Razvan Stefanescu <razvan.stefanescu@microchip.com>
    Signed-off-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f999a192a188de5d80cbaa9924856a988932558
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Feb 6 11:23:52 2020 -0800

    net: dsa: bcm_sf2: Only 7278 supports 2Gb/sec IMP port
    
    [ Upstream commit de34d7084edd069dac5aa010cfe32bd8c4619fa6 ]
    
    The 7445 switch clocking profiles do not allow us to run the IMP port at
    2Gb/sec in a way that it is reliable and consistent. Make sure that the
    setting is only applied to the 7278 family.
    
    Fixes: 8f1880cbe8d0 ("net: dsa: bcm_sf2: Configure IMP port for 2Gb/sec")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee429397726f4b637f10b772c43900c0c7bb6b6a
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Feb 6 11:07:45 2020 -0800

    net: dsa: b53: Always use dev->vlan_enabled in b53_configure_vlan()
    
    [ Upstream commit df373702bc0f8f2d83980ea441e71639fc1efcf8 ]
    
    b53_configure_vlan() is called by the bcm_sf2 driver upon setup and
    indirectly through resume as well. During the initial setup, we are
    guaranteed that dev->vlan_enabled is false, so there is no change in
    behavior, however during suspend, we may have enabled VLANs before, so we
    do want to restore that setting.
    
    Fixes: dad8d7c6452b ("net: dsa: b53: Properly account for VLAN filtering")
    Fixes: 967dd82ffc52 ("net: dsa: b53: Add support for Broadcom RoboSwitch")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bf33c5448b75e8b3ba636e7946a36f13ae5d735
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Tue Feb 4 12:08:58 2020 +0200

    dpaa_eth: support all modes with rate adapting PHYs
    
    [ Upstream commit 73a21fa817f0cc8022dc6226250a86bca727a56d ]
    
    Stop removing modes that are not supported on the system interface
    when the connected PHY is capable of rate adaptation. This addresses
    an issue with the LS1046ARDB board 10G interface no longer working
    with an 1G link partner after autonegotiation support was added
    for the Aquantia PHY on board in
    
    commit 09c4c57f7bc4 ("net: phy: aquantia: add support for auto-negotiation configuration")
    
    Before this commit the values advertised by the PHY were not
    influenced by the dpaa_eth driver removal of system-side unsupported
    modes as the aqr_config_aneg() was basically a no-op. After this
    commit, the modes removed by the dpaa_eth driver were no longer
    advertised thus autonegotiation with 1G link partners failed.
    
    Reported-by: Mian Yousaf Kaukab <ykaukab@suse.de>
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9590eda7bf46d3374884e850707743909654f845
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Tue Feb 4 15:59:50 2020 -0800

    devlink: report 0 after hitting end in region read
    
    [ Upstream commit d5b90e99e1d51b7b5d2b74fbc4c2db236a510913 ]
    
    commit fdd41ec21e15 ("devlink: Return right error code in case of errors
    for region read") modified the region read code to report errors
    properly in unexpected cases.
    
    In the case where the start_offset and ret_offset match, it unilaterally
    converted this into an error. This causes an issue for the "dump"
    version of the command. In this case, the devlink region dump will
    always report an invalid argument:
    
    000000000000ffd0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    000000000000ffe0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    devlink answers: Invalid argument
    000000000000fff0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    This occurs because the expected flow for the dump is to return 0 after
    there is no further data.
    
    The simplest fix would be to stop converting the error code to -EINVAL
    if start_offset == ret_offset. However, avoid unnecessary work by
    checking for when start_offset is larger than the region size and
    returning 0 upfront.
    
    Fixes: fdd41ec21e15 ("devlink: Return right error code in case of errors for region read")
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1c04cca429a01e47a8c5ee9785cd050b429a4f8
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Feb 4 19:26:05 2020 -0800

    bonding/alb: properly access headers in bond_alb_xmit()
    
    [ Upstream commit 38f88c45404293bbc027b956def6c10cbd45c616 ]
    
    syzbot managed to send an IPX packet through bond_alb_xmit()
    and af_packet and triggered a use-after-free.
    
    First, bond_alb_xmit() was using ipx_hdr() helper to reach
    the IPX header, but ipx_hdr() was using the transport offset
    instead of the network offset. In the particular syzbot
    report transport offset was 0xFFFF
    
    This patch removes ipx_hdr() since it was only (mis)used from bonding.
    
    Then we need to make sure IPv4/IPv6/IPX headers are pulled
    in skb->head before dereferencing anything.
    
    BUG: KASAN: use-after-free in bond_alb_xmit+0x153a/0x1590 drivers/net/bonding/bond_alb.c:1452
    Read of size 2 at addr ffff8801ce56dfff by task syz-executor.2/18108
     (if (ipx_hdr(skb)->ipx_checksum != IPX_NO_CHECKSUM) ...)
    
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     [<ffffffff8441fc42>] __dump_stack lib/dump_stack.c:17 [inline]
     [<ffffffff8441fc42>] dump_stack+0x14d/0x20b lib/dump_stack.c:53
     [<ffffffff81a7dec4>] print_address_description+0x6f/0x20b mm/kasan/report.c:282
     [<ffffffff81a7e0ec>] kasan_report_error mm/kasan/report.c:380 [inline]
     [<ffffffff81a7e0ec>] kasan_report mm/kasan/report.c:438 [inline]
     [<ffffffff81a7e0ec>] kasan_report.cold+0x8c/0x2a0 mm/kasan/report.c:422
     [<ffffffff81a7dc4f>] __asan_report_load_n_noabort+0xf/0x20 mm/kasan/report.c:469
     [<ffffffff82c8c00a>] bond_alb_xmit+0x153a/0x1590 drivers/net/bonding/bond_alb.c:1452
     [<ffffffff82c60c74>] __bond_start_xmit drivers/net/bonding/bond_main.c:4199 [inline]
     [<ffffffff82c60c74>] bond_start_xmit+0x4f4/0x1570 drivers/net/bonding/bond_main.c:4224
     [<ffffffff83baa558>] __netdev_start_xmit include/linux/netdevice.h:4525 [inline]
     [<ffffffff83baa558>] netdev_start_xmit include/linux/netdevice.h:4539 [inline]
     [<ffffffff83baa558>] xmit_one net/core/dev.c:3611 [inline]
     [<ffffffff83baa558>] dev_hard_start_xmit+0x168/0x910 net/core/dev.c:3627
     [<ffffffff83bacf35>] __dev_queue_xmit+0x1f55/0x33b0 net/core/dev.c:4238
     [<ffffffff83bae3a8>] dev_queue_xmit+0x18/0x20 net/core/dev.c:4278
     [<ffffffff84339189>] packet_snd net/packet/af_packet.c:3226 [inline]
     [<ffffffff84339189>] packet_sendmsg+0x4919/0x70b0 net/packet/af_packet.c:3252
     [<ffffffff83b1ac0c>] sock_sendmsg_nosec net/socket.c:673 [inline]
     [<ffffffff83b1ac0c>] sock_sendmsg+0x12c/0x160 net/socket.c:684
     [<ffffffff83b1f5a2>] __sys_sendto+0x262/0x380 net/socket.c:1996
     [<ffffffff83b1f700>] SYSC_sendto net/socket.c:2008 [inline]
     [<ffffffff83b1f700>] SyS_sendto+0x40/0x60 net/socket.c:2004
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a836c8ca4dbdba34662b19eedc85fa4898ecc122
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jan 23 12:54:53 2020 +0100

    x86/timer: Don't skip PIT setup when APIC is disabled or in legacy mode
    
    commit 979923871f69a4dc926658f9f9a1a4c1bde57552 upstream.
    
    Tony reported a boot regression caused by the recent workaround for systems
    which have a disabled (clock gate off) PIT.
    
    On his machine the kernel fails to initialize the PIT because
    apic_needs_pit() does not take into account whether the local APIC
    interrupt delivery mode will actually allow to setup and use the local
    APIC timer. This should be easy to reproduce with acpi=off on the
    command line which also disables HPET.
    
    Due to the way the PIT/HPET and APIC setup ordering works (APIC setup can
    require working PIT/HPET) the information is not available at the point
    where apic_needs_pit() makes this decision.
    
    To address this, split out the interrupt mode selection from
    apic_intr_mode_init(), invoke the selection before making the decision
    whether PIT is required or not, and add the missing checks into
    apic_needs_pit().
    
    Fixes: c8c4076723da ("x86/timer: Skip PIT initialization on modern chipsets")
    Reported-by: Anthony Buckley <tony.buckley000@gmail.com>
    Tested-by: Anthony Buckley <tony.buckley000@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Daniel Drake <drake@endlessm.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206125
    Link: https://lore.kernel.org/r/87sgk6tmk2.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f76d1a3690928dcc526155144864b78bab17258
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Dec 11 17:35:48 2019 -0800

    libbpf: Extract and generalize CPU mask parsing logic
    
    commit 6803ee25f0ead1e836808acb14396bb9a9849113 upstream.
    
    This logic is re-used for parsing a set of online CPUs. Having it as an
    isolated piece of code working with input string makes it conveninent to test
    this logic as well. While refactoring, also improve the robustness of original
    implementation.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191212013548.1690564-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23912be9dad3f9753cb0a684e761f0accbdbf008
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Jan 20 19:22:31 2020 -0800

    bpf: Fix trampoline usage in preempt
    
    commit 05d57f1793fb250c85028c9952c3720010baa853 upstream.
    
    Though the second half of trampoline page is unused a task could be
    preempted in the middle of the first half of trampoline and two
    updates to trampoline would change the code from underneath the
    preempted task. Hence wait for tasks to voluntarily schedule or go
    to userspace. Add similar wait before freeing the trampoline.
    
    Fixes: fec56f5890d9 ("bpf: Introduce BPF trampoline")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Paul E. McKenney <paulmck@kernel.org>
    Link: https://lore.kernel.org/bpf/20200121032231.3292185-1-ast@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24e11a34b09d68d484aae2f2e45283558b799f59
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Dec 11 12:46:39 2019 +0100

    mfd: ab8500: Fix ab8500-clk typo
    
    commit 702204c22c53f94b2e25a3bdcda759cce7b26305 upstream.
    
    Commit f4d41ad84433 ("mfd: ab8500: Example using new OF_MFD_CELL MACRO")
    has a typo error renaming "ab8500-clk" to "abx500-clk"
    with the result att ALSA SoC audio broke as the clock
    driver was not probing anymore. Fixed it up.
    
    Fixes: f4d41ad84433 ("mfd: ab8500: Example using new OF_MFD_CELL MACRO")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Stephan Gerhold <stephan@gerhold.net>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18e5326c7bc33118b75585ed346bb4e9cefd05ef
Author: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Date:   Mon Jan 20 15:45:11 2020 +0200

    mfd: bd70528: Fix hour register mask
    
    commit 6c883472e1c11cb05561b6dd0c28bb037c2bf2de upstream.
    
    When RTC is used in 24H mode (and it is by this driver) the maximum
    hour value is 24 in BCD. This occupies bits [5:0] - which means
    correct mask for HOUR register is 0x3f not 0x1f. Fix the mask
    
    Fixes: 32a4a4ebf768 ("rtc: bd70528: Initial support for ROHM bd70528 RTC")
    
    Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bab4dff03b84a4257ddeb886c9b4baa40e44eb01
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Jan 17 22:59:22 2020 +0100

    mfd: rn5t618: Mark ADC control register volatile
    
    commit 2f3dc25c0118de03a00ddc88b61f7216854f534d upstream.
    
    There is a bit which gets cleared after conversion.
    
    Fixes: 9bb9e29c78f8 ("mfd: Add Ricoh RN5T618 PMIC core driver")
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52abf25b20129393f73a7329053eb58ee9722459
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Wed Jan 8 10:57:02 2020 +0100

    mfd: da9062: Fix watchdog compatible string
    
    commit 1112ba02ff1190ca9c15a912f9269e54b46d2d82 upstream.
    
    The watchdog driver compatible is "dlg,da9062-watchdog" and not
    "dlg,da9062-wdt". Therefore the mfd-core can't populate the of_node and
    fwnode. As result the watchdog driver can't parse the devicetree.
    
    Fixes: 9b40b030c4ad ("mfd: da9062: Supply core driver")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ff28b22a337b437a931cefa724f3abd45766258
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Wed Jan 22 19:12:54 2020 +0100

    ASoC: Intel: skl_hda_dsp_common: Fix global-out-of-bounds bug
    
    commit 15adb20f64c302b31e10ad50f22bb224052ce1df upstream.
    
    Definitions for idisp snd_soc_dai_links within skl_hda_dsp_common are
    missing platform component. Add it to address following bug reported by
    KASAN:
    
    [   10.538502] BUG: KASAN: global-out-of-bounds in skl_hda_audio_probe+0x13a/0x2b0 [snd_soc_skl_hda_dsp]
    [   10.538509] Write of size 8 at addr ffffffffc0606840 by task systemd-udevd/299
    (...)
    [   10.538519] Call Trace:
    [   10.538524]  dump_stack+0x62/0x95
    [   10.538528]  print_address_description+0x2f5/0x3b0
    [   10.538532]  ? skl_hda_audio_probe+0x13a/0x2b0 [snd_soc_skl_hda_dsp]
    [   10.538535]  __kasan_report+0x134/0x191
    [   10.538538]  ? skl_hda_audio_probe+0x13a/0x2b0 [snd_soc_skl_hda_dsp]
    [   10.538542]  ? skl_hda_audio_probe+0x13a/0x2b0 [snd_soc_skl_hda_dsp]
    [   10.538544]  kasan_report+0x12/0x20
    [   10.538546]  __asan_store8+0x57/0x90
    [   10.538550]  skl_hda_audio_probe+0x13a/0x2b0 [snd_soc_skl_hda_dsp]
    [   10.538553]  platform_drv_probe+0x51/0xb0
    [   10.538556]  really_probe+0x311/0x600
    [   10.538559]  driver_probe_device+0x87/0x1b0
    [   10.538562]  device_driver_attach+0x8f/0xa0
    [   10.538565]  ? device_driver_attach+0xa0/0xa0
    [   10.538567]  __driver_attach+0x102/0x1a0
    [   10.538569]  ? device_driver_attach+0xa0/0xa0
    [   10.538572]  bus_for_each_dev+0xe8/0x160
    [   10.538574]  ? subsys_dev_iter_exit+0x10/0x10
    [   10.538577]  ? preempt_count_sub+0x18/0xc0
    [   10.538580]  ? _raw_write_unlock+0x1f/0x40
    [   10.538582]  driver_attach+0x2b/0x30
    [   10.538585]  bus_add_driver+0x251/0x340
    [   10.538588]  driver_register+0xd3/0x1c0
    [   10.538590]  __platform_driver_register+0x6c/0x80
    [   10.538592]  ? 0xffffffffc03e8000
    [   10.538595]  skl_hda_audio_init+0x1c/0x1000 [snd_soc_skl_hda_dsp]
    [   10.538598]  do_one_initcall+0xd0/0x36a
    [   10.538600]  ? trace_event_raw_event_initcall_finish+0x160/0x160
    [   10.538602]  ? kasan_unpoison_shadow+0x36/0x50
    [   10.538605]  ? __kasan_kmalloc+0xcc/0xe0
    [   10.538607]  ? kasan_unpoison_shadow+0x36/0x50
    [   10.538609]  ? kasan_poison_shadow+0x2f/0x40
    [   10.538612]  ? __asan_register_globals+0x65/0x80
    [   10.538615]  do_init_module+0xf9/0x36f
    [   10.538619]  load_module+0x398e/0x4590
    [   10.538625]  ? module_frob_arch_sections+0x20/0x20
    [   10.538628]  ? __kasan_check_write+0x14/0x20
    [   10.538630]  ? kernel_read+0x9a/0xc0
    [   10.538632]  ? __kasan_check_write+0x14/0x20
    [   10.538634]  ? kernel_read_file+0x1d3/0x3c0
    [   10.538638]  ? cap_capable+0xca/0x110
    [   10.538642]  __do_sys_finit_module+0x190/0x1d0
    [   10.538644]  ? __do_sys_finit_module+0x190/0x1d0
    [   10.538646]  ? __x64_sys_init_module+0x50/0x50
    [   10.538649]  ? expand_files+0x380/0x380
    [   10.538652]  ? __kasan_check_write+0x14/0x20
    [   10.538654]  ? fput_many+0x20/0xc0
    [   10.538658]  __x64_sys_finit_module+0x43/0x50
    [   10.538660]  do_syscall_64+0xce/0x700
    [   10.538662]  ? syscall_return_slowpath+0x230/0x230
    [   10.538665]  ? __do_page_fault+0x51e/0x640
    [   10.538668]  ? __kasan_check_read+0x11/0x20
    [   10.538670]  ? prepare_exit_to_usermode+0xc7/0x200
    [   10.538673]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: a78959f407e6 ("ASoC: Intel: skl_hda_dsp_common: use modern dai_link style")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200122181254.22801-1-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44ac274bc74a8b2a7ab145ebbf3f7a0bdee62509
Author: Marek Vasut <marex@denx.de>
Date:   Fri Dec 20 17:44:50 2019 +0100

    ASoC: sgtl5000: Fix VDDA and VDDIO comparison
    
    commit e19ecbf105b236a6334fab64d8fd5437b12ee019 upstream.
    
    Comparing the voltage of VDDA and VDDIO to determine whether or not to
    enable VDDC manual override is insufficient. This is a problem in case
    the VDDA is supplied from different regulator than VDDIO, while both
    report the same voltage to the regulator framework. In that case where
    VDDA and VDDIO is supplied by different regulators, the VDDC manual
    override must not be applied.
    
    Fixes: b6319b061ba2 ("ASoC: sgtl5000: Fix charge pump source assignment")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Igor Opaniuk <igor.opaniuk@toradex.com>
    Cc: Marcel Ziswiler <marcel.ziswiler@toradex.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Link: https://lore.kernel.org/r/20191220164450.1395038-2-marex@denx.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ef8e224231af9e2f6fa5a494aed6f0cf761b6a3
Author: Marek Vasut <marex@denx.de>
Date:   Fri Dec 20 17:44:49 2019 +0100

    regulator: core: Add regulator_is_equal() helper
    
    commit b059b7e0ec3208ff1e17cff6387d75a9fbab4e02 upstream.
    
    Add regulator_is_equal() helper to compare whether two regulators are
    the same. This is useful for checking whether two separate regulators
    in a driver are actually the same supply.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Igor Opaniuk <igor.opaniuk@toradex.com>
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Marcel Ziswiler <marcel.ziswiler@toradex.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Link: https://lore.kernel.org/r/20191220164450.1395038-1-marex@denx.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3979e54229b20aa56241c19adce6e8800ca9637
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Tue Jan 14 13:43:11 2020 +0800

    ubifs: Fix memory leak from c->sup_node
    
    commit ff90bdfb206e49c8b418811efbdd0c77380fa8c2 upstream.
    
    The c->sup_node is allocated in function ubifs_read_sb_node but
    is not freed. This will cause memory leak as below:
    
    unreferenced object 0xbc9ce000 (size 4096):
      comm "mount", pid 500, jiffies 4294952946 (age 315.820s)
      hex dump (first 32 bytes):
        31 18 10 06 06 7b f1 11 02 00 00 00 00 00 00 00  1....{..........
        00 10 00 00 06 00 00 00 00 00 00 00 08 00 00 00  ................
      backtrace:
        [<d1c503cd>] ubifs_read_superblock+0x48/0xebc
        [<a20e14bd>] ubifs_mount+0x974/0x1420
        [<8589ecc3>] legacy_get_tree+0x2c/0x50
        [<5f1fb889>] vfs_get_tree+0x28/0xfc
        [<bbfc7939>] do_mount+0x4f8/0x748
        [<4151f538>] ksys_mount+0x78/0xa0
        [<d59910a9>] ret_fast_syscall+0x0/0x54
        [<1cc40005>] 0x7ea02790
    
    Free it in ubifs_umount and in the error path of mount_ubifs.
    
    Fixes: fd6150051bec ("ubifs: Store read superblock node")
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ee13256e4e94d179a9de92ade47c5f72eb40af8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 13 16:23:46 2020 +0300

    ubi: Fix an error pointer dereference in error handling code
    
    commit 5d3805af279c93ef49a64701f35254676d709622 upstream.
    
    If "seen_pebs = init_seen(ubi);" fails then "seen_pebs" is an error pointer
    and we try to kfree() it which results in an Oops.
    
    This patch re-arranges the error handling so now it only frees things
    which have been allocated successfully.
    
    Fixes: daef3dd1f0ae ("UBI: Fastmap: Add self check to detect absent PEBs")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcc298a9751f0b45de3206b70dfee7d4782e99da
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Oct 23 11:58:12 2019 +0200

    ubi: fastmap: Fix inverted logic in seen selfcheck
    
    commit ef5aafb6e4e9942a28cd300bdcda21ce6cbaf045 upstream.
    
    set_seen() sets the bit corresponding to the PEB number in the bitmap,
    so when self_check_seen() wants to find PEBs that haven't been seen we
    have to print the PEBs that have their bit cleared, not the ones which
    have it set.
    
    Fixes: 5d71afb00840 ("ubi: Use bitmaps in Fastmap self-check code")
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258652b42fed421de5775a9b06ccb179755df69b
Author: David Hildenbrand <david@redhat.com>
Date:   Wed Feb 5 17:34:01 2020 +0100

    virtio_balloon: Fix memory leaks on errors in virtballoon_probe()
    
    commit 1ad6f58ea9364b0a5d8ae06249653ac9304a8578 upstream.
    
    We forget to put the inode and unmount the kernfs used for compaction.
    
    Fixes: 71994620bb25 ("virtio_balloon: replace oom notifier with shrinker")
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: Wei Wang <wei.w.wang@intel.com>
    Cc: Liang Li <liang.z.li@intel.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Link: https://lore.kernel.org/r/20200205163402.42627-3-david@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65ba6008889cfa386f1067a3207272de9b2d9d09
Author: David Hildenbrand <david@redhat.com>
Date:   Wed Feb 5 17:34:00 2020 +0100

    virtio-balloon: Fix memory leak when unloading while hinting is in progress
    
    commit 6c22dc61c76b7e7d355f1697ba0ecf26d1334ba6 upstream.
    
    When unloading the driver while hinting is in progress, we will not
    release the free page blocks back to MM, resulting in a memory leak.
    
    Fixes: 86a559787e6f ("virtio-balloon: VIRTIO_BALLOON_F_FREE_PAGE_HINT")
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: Wei Wang <wei.w.wang@intel.com>
    Cc: Liang Li <liang.z.li@intel.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Link: https://lore.kernel.org/r/20200205163402.42627-2-david@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf206bca3d68a401de7e7bbc293a507e528d0778
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Dec 17 12:33:33 2019 -0500

    nfsd: Return the correct number of bytes written to the file
    
    commit 09a80f2aef06b7c86143f5c14efd3485e0d2c139 upstream.
    
    We must allow for the fact that iov_iter_write() could have returned
    a short write (e.g. if there was an ENOSPC issue).
    
    Fixes: d890be159a71 "nfsd: Add I/O trace points in the NFSv4 write path"
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42fdf8c9099e3ad41bfd0bcf9edce9fff72e5ee1
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 4 14:43:17 2019 +0100

    nfsd: fix jiffies/time_t mixup in LRU list
    
    commit 9594497f2c78993cb66b696122f7c65528ace985 upstream.
    
    The nfsd4_blocked_lock->nbl_time timestamp is recorded in jiffies,
    but then compared to a CLOCK_REALTIME timestamp later on, which makes
    no sense.
    
    For consistency with the other timestamps, change this to use a time_t.
    
    This is a change in behavior, which may cause regressions, but the
    current code is not sensible. On a system with CONFIG_HZ=1000,
    the 'time_after((unsigned long)nbl->nbl_time, (unsigned long)cutoff))'
    check is false for roughly the first 18 days of uptime and then true
    for the next 49 days.
    
    Fixes: 7919d0a27f1e ("nfsd: add a LRU list for blocked locks")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9586c590ef16b310648edc23906b8653e7a11c17
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Nov 3 22:32:20 2019 +0100

    nfsd: fix delay timer on 32-bit architectures
    
    commit 2561c92b12f4f4e386d453556685f75775c0938b upstream.
    
    The nfsd4_cb_layout_done() function takes a 'time_t' value,
    multiplied by NSEC_PER_SEC*2 to get a nanosecond value.
    
    This works fine on 64-bit architectures, but on 32-bit, any
    value over 1 second results in a signed integer overflow
    with unexpected results.
    
    Cast one input to a 64-bit type in order to produce the
    same result that we have on 64-bit architectures, regarless
    of the type of nfsd4_lease.
    
    Fixes: 6b9b21073d3b ("nfsd: give up on CB_LAYOUTRECALLs after two lease periods")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53a001d740110e664c896a23a28a3b22514fbe2e
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Wed Jan 15 13:54:03 2020 +0000

    staging: wfx: revert unexpected change in debugfs output
    
    commit 8b08b6a8c31f18c3657405410e4c3f6bc4fa75f1 upstream.
    
    It appears that commit 8c7128c4cf4e ("staging: align to fix warnings of
    line over 80 characters") do slightly more than what is explained in
    commit log.
    
    Especially, it changes the output of the file rx_stats from debugfs.
    From some point of view, this file can be considered as a part of the
    API. Any change on it should be clearly announced.
    
    Since the change introduced does not seems to have any justification,
    revert it.
    
    Reported-by: Pascal Prime <pascal.prime@silabs.com>
    Cc: Jules Irenge <jbi.octave@gmail.com>
    Fixes: 8c7128c4cf4e ("staging: align to fix warnings of line over 80 characters")
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/20200115135338.14374-2-Jerome.Pouiller@silabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 394b51c7355b0d5d599dc803db121f0f637e2f68
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Sun Dec 22 14:46:49 2019 +0200

    IB/core: Fix ODP with IB_ACCESS_HUGETLB handling
    
    commit 9ff1b6466a291a33389c4a9c7f3f9b64d62df40a upstream.
    
    As VMAs for a given range might not be available as part of the
    registration phase in ODP.
    
    ib_init_umem_odp() considered the expected page shift value that was
    previously set and initializes its internals accordingly.
    
    If memory isn't backed by physical contiguous pages aligned to a hugepage
    boundary an error will be set as part of the page fault flow and come back
    to the user as some failed RDMA operation.
    
    Fixes: 0008b84ea9af ("IB/umem: Add support to huge ODP")
    Link: https://lore.kernel.org/r/20191222124649.52300-4-leon@kernel.org
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Reviewed-by: Artemy Kovalyov <artemyko@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96491fb390e02004a8b26cca62fb760243440d9b
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Sun Dec 22 14:46:48 2019 +0200

    IB/core: Fix ODP get user pages flow
    
    commit d07de8bd1709a80a282963ad7b2535148678a9e4 upstream.
    
    The nr_pages argument of get_user_pages_remote() should always be in terms
    of the system page size, not the MR page size. Use PAGE_SIZE instead of
    umem_odp->page_shift.
    
    Fixes: 403cd12e2cf7 ("IB/umem: Add contiguous ODP support")
    Link: https://lore.kernel.org/r/20191222124649.52300-3-leon@kernel.org
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Reviewed-by: Artemy Kovalyov <artemyko@mellanox.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92431fa61fdc9390410c635c89f4f05697a9cfbe
Author: Prabhath Sajeepa <psajeepa@purestorage.com>
Date:   Thu Dec 12 17:11:29 2019 -0700

    IB/mlx5: Fix outstanding_pi index for GSI qps
    
    commit b5671afe5e39ed71e94eae788bacdcceec69db09 upstream.
    
    Commit b0ffeb537f3a ("IB/mlx5: Fix iteration overrun in GSI qps") changed
    the way outstanding WRs are tracked for the GSI QP. But the fix did not
    cover the case when a call to ib_post_send() fails and updates index to
    track outstanding.
    
    Since the prior commmit outstanding_pi should not be bounded otherwise the
    loop generate_completions() will fail.
    
    Fixes: b0ffeb537f3a ("IB/mlx5: Fix iteration overrun in GSI qps")
    Link: https://lore.kernel.org/r/1576195889-23527-1-git-send-email-psajeepa@purestorage.com
    Signed-off-by: Prabhath Sajeepa <psajeepa@purestorage.com>
    Acked-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af4601fa2924fe7fa8b1f2dbb33629e233b0b2b6
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 14:16:23 2019 -0700

    net: tulip: Adjust indentation in {dmfe, uli526x}_init_module
    
    commit fe06bf3d83ef0d92f35a24e03297172e92ce9ce3 upstream.
    
    Clang warns:
    
    ../drivers/net/ethernet/dec/tulip/uli526x.c:1812:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
            switch (mode) {
            ^
    ../drivers/net/ethernet/dec/tulip/uli526x.c:1809:2: note: previous
    statement is here
            if (cr6set)
            ^
    1 warning generated.
    
    ../drivers/net/ethernet/dec/tulip/dmfe.c:2217:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
            switch(mode) {
            ^
    ../drivers/net/ethernet/dec/tulip/dmfe.c:2214:2: note: previous
    statement is here
            if (cr6set)
            ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on these
    lines. Remove them so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    While we are here, adjust the default block in dmfe_init_module to have
    a proper break between the label and assignment and add a space between
    the switch and opening parentheses to avoid a checkpatch warning.
    
    Fixes: e1c3e5014040 ("[PATCH] initialisation cleanup for ULI526x-net-driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/795
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dce8b5f899944a78755a96374ba377673c2a7d3d
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 14:50:27 2019 -0700

    net: smc911x: Adjust indentation in smc911x_phy_configure
    
    commit 5c61e223004b3b5c3f1dd25718e979bc17a3b12d upstream.
    
    Clang warns:
    
    ../drivers/net/ethernet/smsc/smc911x.c:939:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             if (!lp->ctl_rfduplx)
             ^
    ../drivers/net/ethernet/smsc/smc911x.c:936:2: note: previous statement
    is here
            if (lp->ctl_rspeed != 100)
            ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: 0a0c72c9118c ("[PATCH] RE: [PATCH 1/1] net driver: Add support for SMSC LAN911x line of ethernet chips")
    Link: https://github.com/ClangBuiltLinux/linux/issues/796
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b95a46fd4aba47f3c445650902743dc8cd49f14
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 15:38:59 2019 -0700

    ppp: Adjust indentation into ppp_async_input
    
    commit 08cbc75f96029d3092664213a844a5e25523aa35 upstream.
    
    Clang warns:
    
    ../drivers/net/ppp/ppp_async.c:877:6: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                                    ap->rpkt = skb;
                                    ^
    ../drivers/net/ppp/ppp_async.c:875:5: note: previous statement is here
                                    if (!skb)
                                    ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line. Clean up this entire block's indentation so that it is consistent
    with the Linux kernel coding style and clang no longer warns.
    
    Fixes: 6722e78c9005 ("[PPP]: handle misaligned accesses")
    Link: https://github.com/ClangBuiltLinux/linux/issues/800
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15b1a52b8e4c636952a17a880a719eb0e24f848e
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:21:52 2019 -0700

    NFC: pn544: Adjust indentation in pn544_hci_check_presence
    
    commit 5080832627b65e3772a35d1dced68c64e2b24442 upstream.
    
    Clang warns
    
    ../drivers/nfc/pn544/pn544.c:696:4: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                     return nfc_hci_send_cmd(hdev, NFC_HCI_RF_READER_A_GATE,
                     ^
    ../drivers/nfc/pn544/pn544.c:692:3: note: previous statement is here
                    if (target->nfcid1_len != 4 && target->nfcid1_len != 7 &&
                    ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: da052850b911 ("NFC: Add pn544 presence check for different targets")
    Link: https://github.com/ClangBuiltLinux/linux/issues/814
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed636605806e3ea838cf39df4ea9dd5e06abab6c
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 13:32:30 2019 -0700

    drm: msm: mdp4: Adjust indentation in mdp4_dsi_encoder_enable
    
    commit 251e3cb1418ff3f5061ee31335e346e852b16573 upstream.
    
    Clang warns:
    
    ../drivers/gpu/drm/msm/disp/mdp4/mdp4_dsi_encoder.c:124:3: warning:
    misleading indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             mdp4_crtc_set_config(encoder->crtc,
             ^
    ../drivers/gpu/drm/msm/disp/mdp4/mdp4_dsi_encoder.c:121:2: note:
    previous statement is here
            if (mdp4_dsi_encoder->enabled)
            ^
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: 776638e73a19 ("drm/msm/dsi: Add a mdp4 encoder for DSI")
    Link: https://github.com/ClangBuiltLinux/linux/issues/792
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b23d263e1283f1ec45c436e9a6e50d0279bab9b8
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 13:03:38 2019 -0700

    powerpc/44x: Adjust indentation in ibm4xx_denali_fixup_memsize
    
    commit c3aae14e5d468d18dbb5d7c0c8c7e2968cc14aad upstream.
    
    Clang warns:
    
    ../arch/powerpc/boot/4xx.c:231:3: warning: misleading indentation;
    statement is not part of the previous 'else' [-Wmisleading-indentation]
            val = SDRAM0_READ(DDR0_42);
            ^
    ../arch/powerpc/boot/4xx.c:227:2: note: previous statement is here
            else
            ^
    
    This is because there is a space at the beginning of this line; remove
    it so that the indentation is consistent according to the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: d23f5099297c ("[POWERPC] 4xx: Adds decoding of 440SPE memory size to boot wrapper library")
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://github.com/ClangBuiltLinux/linux/issues/780
    Link: https://lore.kernel.org/r/20191209200338.12546-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3497e42bc9f6955a02f43222e0e6616494f53bf
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 20:19:31 2019 -0700

    ext2: Adjust indentation in ext2_fill_super
    
    commit d9e9866803f7b6c3fdd35d345e97fb0b2908bbbc upstream.
    
    Clang warns:
    
    ../fs/ext2/super.c:1076:3: warning: misleading indentation; statement is
    not part of the previous 'if' [-Wmisleading-indentation]
            sbi->s_groups_count = ((le32_to_cpu(es->s_blocks_count) -
            ^
    ../fs/ext2/super.c:1074:2: note: previous statement is here
            if (EXT2_BLOCKS_PER_GROUP(sb) == 0)
            ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line. Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: 41f04d852e35 ("[PATCH] ext2: fix mounts at 16T")
    Link: https://github.com/ClangBuiltLinux/linux/issues/827
    Link: https://lore.kernel.org/r/20191218031930.31393-1-natechancellor@gmail.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67d88591fa39328aabff820590ebe13eedcd4ac5
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:36:37 2019 -0700

    phy: qualcomm: Adjust indentation in read_poll_timeout
    
    commit a89806c998ee123bb9c0f18526e55afd12c0c0ab upstream.
    
    Clang warns:
    
    ../drivers/phy/qualcomm/phy-qcom-apq8064-sata.c:83:4: warning:
    misleading indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
                     usleep_range(DELAY_INTERVAL_US, DELAY_INTERVAL_US + 50);
                     ^
    ../drivers/phy/qualcomm/phy-qcom-apq8064-sata.c:80:3: note: previous
    statement is here
                    if (readl_relaxed(addr) & mask)
                    ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: 1de990d8a169 ("phy: qcom: Add driver for QCOM APQ8064 SATA PHY")
    Link: https://github.com/ClangBuiltLinux/linux/issues/816
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a5522e266b36f33dcb83c22283ef48cfcf26af8
Author: Vignesh Raghavendra <vigneshr@ti.com>
Date:   Thu Dec 5 12:29:33 2019 +0530

    mtd: spi-nor: Split mt25qu512a (n25q512a) entry into two
    
    commit bd8a6e31b87b39a03ab11820776363640440dbe0 upstream.
    
    mt25q family is different from n25q family of devices, even though manf
    ID and device IDs are same. mt25q flash has bit 6 set in 5th byte of
    READ ID response which can be used to distinguish it from n25q variant.
    mt25q flashes support stateless 4 Byte addressing opcodes where as n25q
    flashes don't. Therefore, have two separate entries for mt25qu512a and
    n25q512a.
    
    Fixes: 9607af6f857f ("mtd: spi-nor: Rename "n25q512a" to "mt25qu512a (n25q512a)"")
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2b7195d43c63b6f20226b6f593db3416f80c227
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Dec 4 09:35:00 2019 +0100

    compat: scsi: sg: fix v3 compat read/write interface
    
    commit 78ed001d9e7106171e0ee761cd854137dd731302 upstream.
    
    In the v5.4 merge window, a cleanup patch from Al Viro conflicted
    with my rework of the compat handling for sg.c read(). Linus Torvalds
    did a correct merge but pointed out that the resulting code is still
    unsatisfactory.
    
    I later noticed that the sg_new_read() function still gets the compat
    mode wrong, when the 'count' argument is large enough to pass a
    compat_sg_io_hdr object, but not a nativ sg_io_hdr.
    
    To address both of these, move the definition of compat_sg_io_hdr
    into a scsi/sg.h to make it visible to sg.c and rewrite the logic
    for reading req_pack_id as well as the size check to a simpler
    version that gets the expected results.
    
    Fixes: c35a5cfb4150 ("scsi: sg: sg_read(): simplify reading ->pack_id of userland sg_io_hdr_t")
    Fixes: 98aaaec4a150 ("compat_ioctl: reimplement SG_IO handling")
    Reviewed-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 512061822619fca5ab6a2b7406a2aa0a8ecea5a3
Author: Asutosh Das <asutoshd@codeaurora.org>
Date:   Mon Nov 25 22:53:30 2019 -0800

    scsi: ufs: Recheck bkops level if bkops is disabled
    
    commit 24366c2afbb0539fb14eff330d4e3a5db5c0a3ef upstream.
    
    bkops level should be rechecked upon receiving an exception.  Currently the
    level is being cached and never updated.
    
    Update bkops each time the level is checked.  Also do not use the cached
    bkops level value if it is disabled and then enabled.
    
    Fixes: afdfff59a0e0 (scsi: ufs: handle non spec compliant bkops behaviour by device)
    Link: https://lore.kernel.org/r/1574751214-8321-2-git-send-email-cang@qti.qualcomm.com
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Tested-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8dc3a7fc15ad72af97506d749cefd0434dc2389
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:52:52 2019 -0700

    scsi: qla4xxx: Adjust indentation in qla4xxx_mem_free
    
    commit aa8679736a82386551eb9f3ea0e6ebe2c0e99104 upstream.
    
    Clang warns:
    
    ../drivers/scsi/qla4xxx/ql4_os.c:4148:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             if (ha->fw_dump)
             ^
    ../drivers/scsi/qla4xxx/ql4_os.c:4144:2: note: previous statement is
    here
            if (ha->queues)
            ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this
    line.  Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: 068237c87c64 ("[SCSI] qla4xxx: Capture minidump for ISP82XX on firmware failure")
    Link: https://github.com/ClangBuiltLinux/linux/issues/819
    Link: https://lore.kernel.org/r/20191218015252.20890-1-natechancellor@gmail.com
    Acked-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 896dfad73686261895891b7aa6f4a23cfd799f8e
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:47:26 2019 -0700

    scsi: csiostor: Adjust indentation in csio_device_reset
    
    commit a808a04c861782e31fc30e342a619c144aaee14a upstream.
    
    Clang warns:
    
    ../drivers/scsi/csiostor/csio_scsi.c:1386:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             csio_lnodes_exit(hw, 1);
             ^
    ../drivers/scsi/csiostor/csio_scsi.c:1382:2: note: previous statement is
    here
            if (*buf != '1')
            ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this
    line.  Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: a3667aaed569 ("[SCSI] csiostor: Chelsio FCoE offload driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/818
    Link: https://lore.kernel.org/r/20191218014726.8455-1-natechancellor@gmail.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08e2bd36fe46bc5b561c9adfa13338cf07f81e4b
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Dec 18 16:49:05 2019 -0800

    scsi: qla2xxx: Fix the endianness of the qla82xx_get_fw_size() return type
    
    commit 3f5f7335e5e234e340b48ecb24c2aba98a61f934 upstream.
    
    Since qla82xx_get_fw_size() returns a number in CPU-endian format, change
    its return type from __le32 into u32. This patch does not change any
    functionality.
    
    Fixes: 9c2b297572bf ("[SCSI] qla2xxx: Support for loading Unified ROM Image (URI) format firmware file.")
    Cc: Himanshu Madhani <hmadhani@marvell.com>
    Cc: Quinn Tran <qutran@marvell.com>
    Cc: Martin Wilck <mwilck@suse.com>
    Cc: Daniel Wagner <dwagner@suse.de>
    Cc: Roman Bolshakov <r.bolshakov@yadro.com>
    Link: https://lore.kernel.org/r/20191219004905.39586-1-bvanassche@acm.org
    Reviewed-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b623ba6276743d0ce00669fec495da895a6d031
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Dec 18 18:24:17 2019 +0100

    ASoC: meson: axg-fifo: fix fifo threshold setup
    
    commit 864cee90d4bd870e5d5e5a0b1a6f055f4f951350 upstream.
    
    On TODDR sm1, the fifo threshold register field is slightly different
    compared to the other SoCs. This leads to the fifo A being flushed to
    memory every 8kB. If the period is smaller than that, several periods
    are pushed to memory and notified at once. This is not ideal.
    
    Fix the register field update. With this, the fifos are flushed every
    128B. We could still do better, like adapt the threshold depending on
    the period size, but at least it consistent across the different
    SoC/fifos
    
    Fixes: 5ac825c3d85e ("ASoC: meson: axg-toddr: add sm1 support")
    Reported-by: Alden DSouza <aldend@google.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20191218172420.1199117-2-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b770ee3c2b3d8b0ae8be2da39807c39f9beb93a3
Author: Erdem Aktas <erdemaktas@google.com>
Date:   Fri Dec 13 13:31:46 2019 -0800

    percpu: Separate decrypted varaibles anytime encryption can be enabled
    
    commit 264b0d2bee148073c117e7bbbde5be7125a53be1 upstream.
    
    CONFIG_VIRTUALIZATION may not be enabled for memory encrypted guests.  If
    disabled, decrypted per-CPU variables may end up sharing the same page
    with variables that should be left encrypted.
    
    Always separate per-CPU variables that should be decrypted into their own
    page anytime memory encryption can be enabled in the guest rather than
    rely on any other config option that may not be enabled.
    
    Fixes: ac26963a1175 ("percpu: Introduce DEFINE_PER_CPU_DECRYPTED")
    Cc: stable@vger.kernel.org # 4.15+
    Signed-off-by: Erdem Aktas <erdemaktas@google.com>
    Signed-off-by: David Rientjes <rientjes@google.com>
    Signed-off-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e5b2e77251a9053711d9dbb8c94016da8edd77d
Author: Casey Schaufler <casey@schaufler-ca.com>
Date:   Mon Feb 3 09:15:00 2020 -0800

    broken ping to ipv6 linklocal addresses on debian buster
    
    commit 87fbfffcc89b92a4281b0aa53bd06af714087889 upstream.
    
    I am seeing ping failures to IPv6 linklocal addresses with Debian
    buster. Easiest example to reproduce is:
    
    $ ping -c1 -w1 ff02::1%eth1
    connect: Invalid argument
    
    $ ping -c1 -w1 ff02::1%eth1
    PING ff02::01%eth1(ff02::1%eth1) 56 data bytes
    64 bytes from fe80::e0:f9ff:fe0c:37%eth1: icmp_seq=1 ttl=64 time=0.059 ms
    
    git bisect traced the failure to
    commit b9ef5513c99b ("smack: Check address length before reading address family")
    
    Arguably ping is being stupid since the buster version is not setting
    the address family properly (ping on stretch for example does):
    
    $ strace -e connect ping6 -c1 -w1 ff02::1%eth1
    connect(5, {sa_family=AF_UNSPEC,
    sa_data="\4\1\0\0\0\0\377\2\0\0\0\0\0\0\0\0\0\0\0\0\0\1\3\0\0\0"}, 28)
    = -1 EINVAL (Invalid argument)
    
    but the command works fine on kernels prior to this commit, so this is
    breakage which goes against the Linux paradigm of "don't break userspace"
    
    Cc: stable@vger.kernel.org
    Reported-by: David Ahern <dsahern@gmail.com>
    Suggested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
     security/smack/smack_lsm.c | 41 +++++++++++++++++++----------------------
     security/smack/smack_lsm.c |   41 +++++++++++++++++++----------------------
     1 file changed, 19 insertions(+), 22 deletions(-)

commit 921c27b092034093eb8943fe4d358c0816a15264
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Feb 6 16:39:28 2020 +0100

    fix up iter on short count in fuse_direct_io()
    
    commit f658adeea45e430a24c7a157c3d5448925ac2038 upstream.
    
    fuse_direct_io() can end up advancing the iterator by more than the amount
    of data read or written.  This case is handled by the generic code if going
    through ->direct_IO(), but not in the FOPEN_DIRECT_IO case.
    
    Fix by reverting the extra bytes from the iterator in case of error or a
    short count.
    
    To test: install lxcfs, then the following testcase
      int fd = open("/var/lib/lxcfs/proc/uptime", O_RDONLY);
      sendfile(1, fd, NULL, 16777216);
      sendfile(1, fd, NULL, 16777216);
    will spew WARN_ON() in iov_iter_pipe().
    
    Reported-by: Peter Geis <pgwipeout@gmail.com>
    Reported-by: Al Viro <viro@zeniv.linux.org.uk>
    Fixes: 3c3db095b68c ("fuse: use iov_iter based generic splice helpers")
    Cc: <stable@vger.kernel.org> # v5.1
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fccbd086ea1f4d3b4e0be6b39461c1b2f47cb589
Author: Daniel Verkamp <dverkamp@chromium.org>
Date:   Fri Jan 3 10:40:45 2020 -0800

    virtio-pci: check name when counting MSI-X vectors
    
    commit 303090b513fd1ee45aa1536b71a3838dc054bc05 upstream.
    
    VQs without a name specified are not valid; they are skipped in the
    later loop that assigns MSI-X vectors to queues, but the per_vq_vectors
    loop above that counts the required number of vectors previously still
    counted any queue with a non-NULL callback as needing a vector.
    
    Add a check to the per_vq_vectors loop so that vectors with no name are
    not counted to make the two loops consistent.  This prevents
    over-counting unnecessary vectors (e.g. for features which were not
    negotiated with the device).
    
    Cc: stable@vger.kernel.org
    Fixes: 86a559787e6f ("virtio-balloon: VIRTIO_BALLOON_F_FREE_PAGE_HINT")
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Daniel Verkamp <dverkamp@chromium.org>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Wang, Wei W <wei.w.wang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab9377a8ca25a24648636dddba821b45a79b7d2b
Author: Daniel Verkamp <dverkamp@chromium.org>
Date:   Fri Jan 3 10:40:43 2020 -0800

    virtio-balloon: initialize all vq callbacks
    
    commit 5790b53390e18fdd21e70776e46d058c05eda2f2 upstream.
    
    Ensure that elements of the callbacks array that correspond to
    unavailable features are set to NULL; previously, they would be left
    uninitialized.
    
    Since the corresponding names array elements were explicitly set to
    NULL, the uninitialized callback pointers would not actually be
    dereferenced; however, the uninitialized callbacks elements would still
    be read in vp_find_vqs_msix() and used to calculate the number of MSI-X
    vectors required.
    
    Cc: stable@vger.kernel.org
    Fixes: 86a559787e6f ("virtio-balloon: VIRTIO_BALLOON_F_FREE_PAGE_HINT")
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Daniel Verkamp <dverkamp@chromium.org>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07a04e9faac72f0e329b2de5595a89dc481d77a6
Author: Matt Coffin <mcoffin13@gmail.com>
Date:   Sat Jan 25 13:04:05 2020 -0500

    drm/amdgpu/smu_v11_0: Correct behavior of restoring default tables (v2)
    
    commit 93c5f1f66c6ad4a3b180c1644f74e1b3b4be7864 upstream.
    
    Previously, the syfs functionality for restoring the default powerplay
    table was sourcing it's information from the currently-staged powerplay
    table.
    
    This patch adds a step to cache the first overdrive table that we see on
    boot, so that it can be used later to "restore" the powerplay table
    
    v2: sqaush my original with Matt's fix
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1020
    Signed-off-by: Matt Coffin <mcoffin13@gmail.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.5.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5f2f739651ebeed437e859a8a812944fc5445fc
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Sat Jan 25 11:27:06 2020 -0500

    drm/amdgpu/navi10: add OD_RANGE for navi overclocking
    
    commit ee23a518fdc2c1dd1aaaf3a2c7ffdd6c83b396ec upstream.
    
    So users can see the range of valid values.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1020
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.5.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de755808caf161c78f92866ae696070518b8ae0f
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Sat Jan 25 13:30:45 2020 -0500

    drm/amdgpu: fetch default VDDC curve voltages (v2)
    
    commit 0531aa6eb38bfa9514609e2727558a051da7365f upstream.
    
    Ask the SMU for the default VDDC curve voltage values.  This
    properly reports the VDDC values in the OD interface.
    
    v2: only update if the original values are 0
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1020
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.5.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41fa3042671046e2cb079fb2325ff684d3311f8e
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Jan 24 14:10:46 2020 -0500

    drm/amd/dm/mst: Ignore payload update failures
    
    commit 58fe03d6dec908a1bec07eea7e94907af5c07eec upstream.
    
    Disabling a display on MST can potentially happen after the entire MST
    topology has been removed, which means that we can't communicate with
    the topology at all in this scenario. Likewise, this also means that we
    can't properly update payloads on the topology and as such, it's a good
    idea to ignore payload update failures when disabling displays.
    Currently, amdgpu makes the mistake of halting the payload update
    process when any payload update failures occur, resulting in leaving
    DC's local copies of the payload tables out of date.
    
    This ends up causing problems with hotplugging MST topologies, and
    causes modesets on the second hotplug to fail like so:
    
    [drm] Failed to updateMST allocation table forpipe idx:1
    ------------[ cut here ]------------
    WARNING: CPU: 5 PID: 1511 at
    drivers/gpu/drm/amd/amdgpu/../display/dc/core/dc_link.c:2677
    update_mst_stream_alloc_table+0x11e/0x130 [amdgpu]
    Modules linked in: cdc_ether usbnet fuse xt_conntrack nf_conntrack
    nf_defrag_ipv6 libcrc32c nf_defrag_ipv4 ipt_REJECT nf_reject_ipv4
    nft_counter nft_compat nf_tables nfnetlink tun bridge stp llc sunrpc
    vfat fat wmi_bmof uvcvideo snd_hda_codec_realtek snd_hda_codec_generic
    snd_hda_codec_hdmi videobuf2_vmalloc snd_hda_intel videobuf2_memops
    videobuf2_v4l2 snd_intel_dspcfg videobuf2_common crct10dif_pclmul
    snd_hda_codec videodev crc32_pclmul snd_hwdep snd_hda_core
    ghash_clmulni_intel snd_seq mc joydev pcspkr snd_seq_device snd_pcm
    sp5100_tco k10temp i2c_piix4 snd_timer thinkpad_acpi ledtrig_audio snd
    wmi soundcore video i2c_scmi acpi_cpufreq ip_tables amdgpu(O)
    rtsx_pci_sdmmc amd_iommu_v2 gpu_sched mmc_core i2c_algo_bit ttm
    drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops cec drm
    crc32c_intel serio_raw hid_multitouch r8152 mii nvme r8169 nvme_core
    rtsx_pci pinctrl_amd
    CPU: 5 PID: 1511 Comm: gnome-shell Tainted: G           O      5.5.0-rc7Lyude-Test+ #4
    Hardware name: LENOVO FA495SIT26/FA495SIT26, BIOS R12ET22W(0.22 ) 01/31/2019
    RIP: 0010:update_mst_stream_alloc_table+0x11e/0x130 [amdgpu]
    Code: 28 00 00 00 75 2b 48 8d 65 e0 5b 41 5c 41 5d 41 5e 5d c3 0f b6 06
    49 89 1c 24 41 88 44 24 08 0f b6 46 01 41 88 44 24 09 eb 93 <0f> 0b e9
    2f ff ff ff e8 a6 82 a3 c2 66 0f 1f 44 00 00 0f 1f 44 00
    RSP: 0018:ffffac428127f5b0 EFLAGS: 00010202
    RAX: 0000000000000002 RBX: ffff8d1e166eee80 RCX: 0000000000000000
    RDX: ffffac428127f668 RSI: ffff8d1e166eee80 RDI: ffffac428127f610
    RBP: ffffac428127f640 R08: ffffffffc03d94a8 R09: 0000000000000000
    R10: ffff8d1e24b02000 R11: ffffac428127f5b0 R12: ffff8d1e1b83d000
    R13: ffff8d1e1bea0b08 R14: 0000000000000002 R15: 0000000000000002
    FS:  00007fab23ffcd80(0000) GS:ffff8d1e28b40000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f151f1711e8 CR3: 00000005997c0000 CR4: 00000000003406e0
    Call Trace:
     ? mutex_lock+0xe/0x30
     dc_link_allocate_mst_payload+0x9a/0x210 [amdgpu]
     ? dm_read_reg_func+0x39/0xb0 [amdgpu]
     ? core_link_enable_stream+0x656/0x730 [amdgpu]
     core_link_enable_stream+0x656/0x730 [amdgpu]
     dce110_apply_ctx_to_hw+0x58e/0x5d0 [amdgpu]
     ? dcn10_verify_allow_pstate_change_high+0x1d/0x280 [amdgpu]
     ? dcn10_wait_for_mpcc_disconnect+0x3c/0x130 [amdgpu]
     dc_commit_state+0x292/0x770 [amdgpu]
     ? add_timer+0x101/0x1f0
     ? ttm_bo_put+0x1a1/0x2f0 [ttm]
     amdgpu_dm_atomic_commit_tail+0xb59/0x1ff0 [amdgpu]
     ? amdgpu_move_blit.constprop.0+0xb8/0x1f0 [amdgpu]
     ? amdgpu_bo_move+0x16d/0x2b0 [amdgpu]
     ? ttm_bo_handle_move_mem+0x118/0x570 [ttm]
     ? ttm_bo_validate+0x134/0x150 [ttm]
     ? dm_plane_helper_prepare_fb+0x1b9/0x2a0 [amdgpu]
     ? _cond_resched+0x15/0x30
     ? wait_for_completion_timeout+0x38/0x160
     ? _cond_resched+0x15/0x30
     ? wait_for_completion_interruptible+0x33/0x190
     commit_tail+0x94/0x130 [drm_kms_helper]
     drm_atomic_helper_commit+0x113/0x140 [drm_kms_helper]
     drm_atomic_helper_set_config+0x70/0xb0 [drm_kms_helper]
     drm_mode_setcrtc+0x194/0x6a0 [drm]
     ? _cond_resched+0x15/0x30
     ? mutex_lock+0xe/0x30
     ? drm_mode_getcrtc+0x180/0x180 [drm]
     drm_ioctl_kernel+0xaa/0xf0 [drm]
     drm_ioctl+0x208/0x390 [drm]
     ? drm_mode_getcrtc+0x180/0x180 [drm]
     amdgpu_drm_ioctl+0x49/0x80 [amdgpu]
     do_vfs_ioctl+0x458/0x6d0
     ksys_ioctl+0x5e/0x90
     __x64_sys_ioctl+0x16/0x20
     do_syscall_64+0x55/0x1b0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7fab2121f87b
    Code: 0f 1e fa 48 8b 05 0d 96 2c 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff
    ff ff c3 66 0f 1f 44 00 00 f3 0f 1e fa b8 10 00 00 00 0f 05 <48> 3d 01
    f0 ff ff 73 01 c3 48 8b 0d dd 95 2c 00 f7 d8 64 89 01 48
    RSP: 002b:00007ffd045f9068 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00007ffd045f90a0 RCX: 00007fab2121f87b
    RDX: 00007ffd045f90a0 RSI: 00000000c06864a2 RDI: 000000000000000b
    RBP: 00007ffd045f90a0 R08: 0000000000000000 R09: 000055dbd2985d10
    R10: 000055dbd2196280 R11: 0000000000000246 R12: 00000000c06864a2
    R13: 000000000000000b R14: 0000000000000000 R15: 000055dbd2196280
    ---[ end trace 6ea888c24d2059cd ]---
    
    Note as well, I have only been able to reproduce this on setups with 2
    MST displays.
    
    Changes since v1:
    * Don't return false when part 1 or part 2 of updating the payloads
      fails, we don't want to abort at any step of the process even if
      things fail
    
    Reviewed-by: Mikita Lipski <Mikita.Lipski@amd.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ce61bb55772c0eb28b39f2df8cf83e7bbc1c7c0
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Jan 30 16:46:38 2020 +0800

    drm/amd/powerplay: fix navi10 system intermittent reboot issue V2
    
    commit 1cf8c930b378016846c88ef0f1444248033326ec upstream.
    
    This workaround is needed only for Navi10 12 Gbps SKUs.
    
    V2: added SMU firmware version guard
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51df23649f9ec06c28216894a7c2893412b1e295
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Feb 4 14:59:25 2020 +0100

    drm/tegra: Reuse IOVA mapping where possible
    
    commit 273da5a046965ccf0ec79eb63f2d5173467e20fa upstream.
    
    This partially reverts the DMA API support that was recently merged
    because it was causing performance regressions on older Tegra devices.
    Unfortunately, the cache maintenance performed by dma_map_sg() and
    dma_unmap_sg() causes performance to drop by a factor of 10.
    
    The right solution for this would be to cache mappings for buffers per
    consumer device, but that's a bit involved. Instead, we simply revert to
    the old behaviour of sharing IOVA mappings when we know that devices can
    do so (i.e. they share the same IOMMU domain).
    
    Cc: <stable@vger.kernel.org> # v5.5
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d71c74b18ddc1235030f01f11f44ebb7b5d097fc
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Feb 4 14:59:24 2020 +0100

    drm/tegra: Relax IOMMU usage criteria on old Tegra
    
    commit 2d9384ff91770a71bd1ff24c25952ef1187a0e9c upstream.
    
    Older Tegra devices only allow addressing 32 bits of memory, so whether
    or not the host1x is attached to an IOMMU doesn't matter. host1x IOMMU
    attachment is only needed on devices that can address memory beyond the
    32-bit boundary and where the host1x doesn't support the wide GATHER
    opcode that allows it to access buffers at higher addresses.
    
    Cc: <stable@vger.kernel.org> # v5.5
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8420e2c10251dce6a23cda310ee244ed0cadcadd
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Sat Jan 25 11:51:41 2020 -0500

    drm/amdgpu/navi: fix index for OD MCLK
    
    commit 45826e9c4e9e952db43053f4fbed58ec602a410f upstream.
    
    You can only adjust the max mclk, not the min.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1020
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.5.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0e381ca8c2deccd6772d943c18247406a8f405c
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Oct 3 14:50:30 2019 -0600

    clk: tegra: Mark fuse clock as critical
    
    commit bf83b96f87ae2abb1e535306ea53608e8de5dfbb upstream.
    
    For a little over a year, U-Boot on Tegra124 has configured the flow
    controller to perform automatic RAM re-repair on off->on power
    transitions of the CPU rail[1]. This is mandatory for correct operation
    of Tegra124. However, RAM re-repair relies on certain clocks, which the
    kernel must enable and leave running. The fuse clock is one of those
    clocks. Mark this clock as critical so that LP1 power mode (system
    suspend) operates correctly.
    
    [1] 3cc7942a4ae5 ARM: tegra: implement RAM repair
    
    Reported-by: Jonathan Hunter <jonathanh@nvidia.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa17a800ac2cca02db95c8389c6b2725535c3805
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Feb 3 17:36:49 2020 -0800

    mm/mmu_gather: invalidate TLB correctly on batch allocation failure and flush
    
    commit 0ed1325967ab5f7a4549a2641c6ebe115f76e228 upstream.
    
    Architectures for which we have hardware walkers of Linux page table
    should flush TLB on mmu gather batch allocation failures and batch flush.
    Some architectures like POWER supports multiple translation modes (hash
    and radix) and in the case of POWER only radix translation mode needs the
    above TLBI.  This is because for hash translation mode kernel wants to
    avoid this extra flush since there are no hardware walkers of linux page
    table.  With radix translation, the hardware also walks linux page table
    and with that, kernel needs to make sure to TLB invalidate page walk cache
    before page table pages are freed.
    
    More details in commit d86564a2f085 ("mm/tlb, x86/mm: Support invalidating
    TLB caches for RCU_TABLE_FREE")
    
    The changes to sparc are to make sure we keep the old behavior since we
    are now removing HAVE_RCU_TABLE_NO_INVALIDATE.  The default value for
    tlb_needs_table_invalidate is to always force an invalidate and sparc can
    avoid the table invalidate.  Hence we define tlb_needs_table_invalidate to
    false for sparc architecture.
    
    Link: http://lkml.kernel.org/r/20200116064531.483522-3-aneesh.kumar@linux.ibm.com
    Fixes: a46cc7a90fd8 ("powerpc/mm/radix: Improve TLB/PWC flushes")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> [powerpc]
    Cc: <stable@vger.kernel.org>    [4.14+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53d35a009b23fc6040a94002d4c7daede8cf1d87
Author: Niklas Cassel <niklas.cassel@linaro.org>
Date:   Mon Oct 14 14:09:20 2019 +0200

    arm64: dts: qcom: qcs404-evb: Set vdd_apc regulator in high power mode
    
    commit eac8ce86cb90ba96cb4bcbf2549d7a8b6938aa30 upstream.
    
    vdd_apc is the regulator that supplies the main CPU cluster.
    
    At sudden CPU load changes, we have noticed invalid page faults on
    addresses with all bits shifted, as well as on addresses with individual
    bits flipped.
    
    By putting the vdd_apc regulator in high power mode, the voltage drops
    during sudden load changes will be less severe, and we have not been able
    to reproduce the invalid page faults with the regulator in this mode.
    
    Fixes: 8faea8edbb35 ("arm64: dts: qcom: qcs404-evb: add spmi regulators")
    Cc: stable@vger.kernel.org
    Suggested-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Niklas Cassel <niklas.cassel@linaro.org>
    Reviewed-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20191014120920.12691-1-niklas.cassel@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 945afc5b16749d8e9b6640e54e32bf9065e9daa9
Author: David Hildenbrand <david@redhat.com>
Date:   Mon Feb 3 17:33:48 2020 -0800

    mm/page_alloc.c: fix uninitialized memmaps on a partially populated last section
    
    commit e822969cab48b786b64246aad1a3ba2a774f5d23 upstream.
    
    Patch series "mm: fix max_pfn not falling on section boundary", v2.
    
    Playing with different memory sizes for a x86-64 guest, I discovered that
    some memmaps (highest section if max_mem does not fall on the section
    boundary) are marked as being valid and online, but contain garbage.  We
    have to properly initialize these memmaps.
    
    Looking at /proc/kpageflags and friends, I found some more issues,
    partially related to this.
    
    This patch (of 3):
    
    If max_pfn is not aligned to a section boundary, we can easily run into
    BUGs.  This can e.g., be triggered on x86-64 under QEMU by specifying a
    memory size that is not a multiple of 128MB (e.g., 4097MB, but also
    4160MB).  I was told that on real HW, we can easily have this scenario
    (esp., one of the main reasons sub-section hotadd of devmem was added).
    
    The issue is, that we have a valid memmap (pfn_valid()) for the whole
    section, and the whole section will be marked "online".
    pfn_to_online_page() will succeed, but the memmap contains garbage.
    
    E.g., doing a "./page-types -r -a 0x144001" when QEMU was started with "-m
    4160M" - (see tools/vm/page-types.c):
    
    [  200.476376] BUG: unable to handle page fault for address: fffffffffffffffe
    [  200.477500] #PF: supervisor read access in kernel mode
    [  200.478334] #PF: error_code(0x0000) - not-present page
    [  200.479076] PGD 59614067 P4D 59614067 PUD 59616067 PMD 0
    [  200.479557] Oops: 0000 [#4] SMP NOPTI
    [  200.479875] CPU: 0 PID: 603 Comm: page-types Tainted: G      D W         5.5.0-rc1-next-20191209 #93
    [  200.480646] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu4
    [  200.481648] RIP: 0010:stable_page_flags+0x4d/0x410
    [  200.482061] Code: f3 ff 41 89 c0 48 b8 00 00 00 00 01 00 00 00 45 84 c0 0f 85 cd 02 00 00 48 8b 53 08 48 8b 2b 48f
    [  200.483644] RSP: 0018:ffffb139401cbe60 EFLAGS: 00010202
    [  200.484091] RAX: fffffffffffffffe RBX: fffffbeec5100040 RCX: 0000000000000000
    [  200.484697] RDX: 0000000000000001 RSI: ffffffff9535c7cd RDI: 0000000000000246
    [  200.485313] RBP: ffffffffffffffff R08: 0000000000000000 R09: 0000000000000000
    [  200.485917] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000144001
    [  200.486523] R13: 00007ffd6ba55f48 R14: 00007ffd6ba55f40 R15: ffffb139401cbf08
    [  200.487130] FS:  00007f68df717580(0000) GS:ffff9ec77fa00000(0000) knlGS:0000000000000000
    [  200.487804] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  200.488295] CR2: fffffffffffffffe CR3: 0000000135d48000 CR4: 00000000000006f0
    [  200.488897] Call Trace:
    [  200.489115]  kpageflags_read+0xe9/0x140
    [  200.489447]  proc_reg_read+0x3c/0x60
    [  200.489755]  vfs_read+0xc2/0x170
    [  200.490037]  ksys_pread64+0x65/0xa0
    [  200.490352]  do_syscall_64+0x5c/0xa0
    [  200.490665]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    But it can be triggered much easier via "cat /proc/kpageflags > /dev/null"
    after cold/hot plugging a DIMM to such a system:
    
    [root@localhost ~]# cat /proc/kpageflags > /dev/null
    [  111.517275] BUG: unable to handle page fault for address: fffffffffffffffe
    [  111.517907] #PF: supervisor read access in kernel mode
    [  111.518333] #PF: error_code(0x0000) - not-present page
    [  111.518771] PGD a240e067 P4D a240e067 PUD a2410067 PMD 0
    
    This patch fixes that by at least zero-ing out that memmap (so e.g.,
    page_to_pfn() will not crash).  Commit 907ec5fca3dc ("mm: zero remaining
    unavailable struct pages") tried to fix a similar issue, but forgot to
    consider this special case.
    
    After this patch, there are still problems to solve.  E.g., not all of
    these pages falling into a memory hole will actually get initialized later
    and set PageReserved - they are only zeroed out - but at least the
    immediate crashes are gone.  A follow-up patch will take care of this.
    
    Link: http://lkml.kernel.org/r/20191211163201.17179-2-david@redhat.com
    Fixes: f7f99100d8d9 ("mm: stop zeroing memory during allocation in vmemmap")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Tested-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Pavel Tatashin <pasha.tatashin@oracle.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Steven Sistare <steven.sistare@oracle.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Bob Picco <bob.picco@oracle.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: <stable@vger.kernel.org>    [4.15+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab751a85f6abd1d534625698a7cb86dadc07bff2
Author: Gang He <GHe@suse.com>
Date:   Mon Feb 3 17:33:45 2020 -0800

    ocfs2: fix oops when writing cloned file
    
    commit 2d797e9ff95ecbcf0a83d657928ed20579444857 upstream.
    
    Writing a cloned file triggers a kernel oops and the user-space command
    process is also killed by the system.  The bug can be reproduced stably
    via:
    
    1) create a file under ocfs2 file system directory.
    
      journalctl -b > aa.txt
    
    2) create a cloned file for this file.
    
      reflink aa.txt bb.txt
    
    3) write the cloned file with dd command.
    
      dd if=/dev/zero of=bb.txt bs=512 count=1 conv=notrunc
    
    The dd command is killed by the kernel, then you can see the oops message
    via dmesg command.
    
    [  463.875404] BUG: kernel NULL pointer dereference, address: 0000000000000028
    [  463.875413] #PF: supervisor read access in kernel mode
    [  463.875416] #PF: error_code(0x0000) - not-present page
    [  463.875418] PGD 0 P4D 0
    [  463.875425] Oops: 0000 [#1] SMP PTI
    [  463.875431] CPU: 1 PID: 2291 Comm: dd Tainted: G           OE     5.3.16-2-default
    [  463.875433] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    [  463.875500] RIP: 0010:ocfs2_refcount_cow+0xa4/0x5d0 [ocfs2]
    [  463.875505] Code: 06 89 6c 24 38 89 eb f6 44 24 3c 02 74 be 49 8b 47 28
    [  463.875508] RSP: 0018:ffffa2cb409dfce8 EFLAGS: 00010202
    [  463.875512] RAX: ffff8b1ebdca8000 RBX: 0000000000000001 RCX: ffff8b1eb73a9df0
    [  463.875515] RDX: 0000000000056a01 RSI: 0000000000000000 RDI: 0000000000000000
    [  463.875517] RBP: 0000000000000001 R08: ffff8b1eb73a9de0 R09: 0000000000000000
    [  463.875520] R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000
    [  463.875522] R13: ffff8b1eb922f048 R14: 0000000000000000 R15: ffff8b1eb922f048
    [  463.875526] FS:  00007f8f44d15540(0000) GS:ffff8b1ebeb00000(0000) knlGS:0000000000000000
    [  463.875529] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  463.875532] CR2: 0000000000000028 CR3: 000000003c17a000 CR4: 00000000000006e0
    [  463.875546] Call Trace:
    [  463.875596]  ? ocfs2_inode_lock_full_nested+0x18b/0x960 [ocfs2]
    [  463.875648]  ocfs2_file_write_iter+0xaf8/0xc70 [ocfs2]
    [  463.875672]  new_sync_write+0x12d/0x1d0
    [  463.875688]  vfs_write+0xad/0x1a0
    [  463.875697]  ksys_write+0xa1/0xe0
    [  463.875710]  do_syscall_64+0x60/0x1f0
    [  463.875743]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  463.875758] RIP: 0033:0x7f8f4482ed44
    [  463.875762] Code: 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 80 00 00 00
    [  463.875765] RSP: 002b:00007fff300a79d8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [  463.875769] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f8f4482ed44
    [  463.875771] RDX: 0000000000000200 RSI: 000055f771b5c000 RDI: 0000000000000001
    [  463.875774] RBP: 0000000000000200 R08: 00007f8f44af9c78 R09: 0000000000000003
    [  463.875776] R10: 000000000000089f R11: 0000000000000246 R12: 000055f771b5c000
    [  463.875779] R13: 0000000000000200 R14: 0000000000000000 R15: 000055f771b5c000
    
    This regression problem was introduced by commit e74540b28556 ("ocfs2:
    protect extent tree in ocfs2_prepare_inode_for_write()").
    
    Link: http://lkml.kernel.org/r/20200121050153.13290-1-ghe@suse.com
    Fixes: e74540b28556 ("ocfs2: protect extent tree in ocfs2_prepare_inode_for_write()").
    Signed-off-by: Gang He <ghe@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b1cc46f6f5ddd66db74283fc4b24edca9665e55
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jan 22 14:36:09 2020 +0100

    KVM: x86: use raw clock values consistently
    
    commit 8171cd68806bd2fc28ef688e32fb2a3b3deb04e5 upstream.
    
    Commit 53fafdbb8b21f ("KVM: x86: switch KVMCLOCK base to monotonic raw
    clock") changed kvmclock to use tkr_raw instead of tkr_mono.  However,
    the default kvmclock_offset for the VM was still based on the monotonic
    clock and, if the raw clock drifted enough from the monotonic clock,
    this could cause a negative system_time to be written to the guest's
    struct pvclock.  RHEL5 does not like it and (if it boots fast enough to
    observe a negative time value) it hangs.
    
    There is another thing to be careful about: getboottime64 returns the
    host boot time with tkr_mono frequency, and subtracting the tkr_raw-based
    kvmclock value will cause the wallclock to be off if tkr_raw drifts
    from tkr_mono.  To avoid this, compute the wallclock delta from the
    current time instead of being clever and using getboottime64.
    
    Fixes: 53fafdbb8b21f ("KVM: x86: switch KVMCLOCK base to monotonic raw clock")
    Cc: stable@vger.kernel.org
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d617ad266776e8b0e527e46c2fccdf69474c685
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jan 22 14:32:20 2020 +0100

    KVM: x86: reorganize pvclock_gtod_data members
    
    commit 917f9475c0a8ab8958db7f22a5d495b9a1d51be6 upstream.
    
    We will need a copy of tk->offs_boot in the next patch.  Store it and
    cleanup the struct: instead of storing tk->tkr_xxx.base with the tk->offs_boot
    included, store the raw value in struct pvclock_clock and sum it in
    do_monotonic_raw and do_realtime.   tk->tkr_xxx.xtime_nsec also moves
    to struct pvclock_clock.
    
    While at it, fix a (usually harmless) typo in do_monotonic_raw, which
    was using gtod->clock.shift instead of gtod->raw_clock.shift.
    
    Fixes: 53fafdbb8b21f ("KVM: x86: switch KVMCLOCK base to monotonic raw clock")
    Cc: stable@vger.kernel.org
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16f536eb86afd43ca39a67b7e298ad11daa35967
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri Jan 31 05:02:00 2020 -0500

    KVM: s390: do not clobber registers during guest reset/store status
    
    commit 55680890ea78be0df5e1384989f1be835043c084 upstream.
    
    The initial CPU reset clobbers the userspace fpc and the store status
    ioctl clobbers the guest acrs + fpr.  As these calls are only done via
    ioctl (and not via vcpu_run), no CPU context is loaded, so we can (and
    must) act directly on the sync regs, not on the thread context.
    
    Cc: stable@kernel.org
    Fixes: e1788bb995be ("KVM: s390: handle floating point registers in the run ioctl not in vcpu_put/load")
    Fixes: 31d8b8d41a7e ("KVM: s390: handle access registers in the run ioctl not in vcpu_put/load")
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Link: https://lore.kernel.org/r/20200131100205.74720-2-frankja@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc887fb285cd26d9a32c0b494e08bf27959a5419
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Jan 17 11:30:51 2020 -0800

    KVM: x86: Revert "KVM: X86: Fix fpu state crash in kvm guest"
    
    commit 2620fe268e80d667a94553cd37a94ccaa2cb8c83 upstream.
    
    Reload the current thread's FPU state, which contains the guest's FPU
    state, to the CPU registers if necessary during vcpu_enter_guest().
    TIF_NEED_FPU_LOAD can be set any time control is transferred out of KVM,
    e.g. if I/O is triggered during a KVM call to get_user_pages() or if a
    softirq occurs while KVM is scheduled in.
    
    Moving the handling of TIF_NEED_FPU_LOAD from vcpu_enter_guest() to
    kvm_arch_vcpu_load(), effectively kvm_sched_in(), papered over a bug
    where kvm_put_guest_fpu() failed to account for TIF_NEED_FPU_LOAD.  The
    easiest way to the kvm_put_guest_fpu() bug was to run with involuntary
    preemption enable, thus handling TIF_NEED_FPU_LOAD during kvm_sched_in()
    made the bug go away.  But, removing the handling in vcpu_enter_guest()
    exposed KVM to the rare case of a softirq triggering kernel_fpu_begin()
    between vcpu_load() and vcpu_enter_guest().
    
    Now that kvm_{load,put}_guest_fpu() correctly handle TIF_NEED_FPU_LOAD,
    revert the commit to both restore the vcpu_enter_guest() behavior and
    eliminate the superfluous switch_fpu_return() in kvm_arch_vcpu_load().
    
    Note, leaving the handling in kvm_arch_vcpu_load() isn't wrong per se,
    but it is unnecessary, and most critically, makes it extremely difficult
    to find bugs such as the kvm_put_guest_fpu() issue due to shrinking the
    window where a softirq can corrupt state.
    
    A sample trace triggered by warning if TIF_NEED_FPU_LOAD is set while
    vcpu state is loaded:
    
     <IRQ>
      gcmaes_crypt_by_sg.constprop.12+0x26e/0x660
      ? 0xffffffffc024547d
      ? __qdisc_run+0x83/0x510
      ? __dev_queue_xmit+0x45e/0x990
      ? ip_finish_output2+0x1a8/0x570
      ? fib4_rule_action+0x61/0x70
      ? fib4_rule_action+0x70/0x70
      ? fib_rules_lookup+0x13f/0x1c0
      ? helper_rfc4106_decrypt+0x82/0xa0
      ? crypto_aead_decrypt+0x40/0x70
      ? crypto_aead_decrypt+0x40/0x70
      ? crypto_aead_decrypt+0x40/0x70
      ? esp_output_tail+0x8f4/0xa5a [esp4]
      ? skb_ext_add+0xd3/0x170
      ? xfrm_input+0x7a6/0x12c0
      ? xfrm4_rcv_encap+0xae/0xd0
      ? xfrm4_transport_finish+0x200/0x200
      ? udp_queue_rcv_one_skb+0x1ba/0x460
      ? udp_unicast_rcv_skb.isra.63+0x72/0x90
      ? __udp4_lib_rcv+0x51b/0xb00
      ? ip_protocol_deliver_rcu+0xd2/0x1c0
      ? ip_local_deliver_finish+0x44/0x50
      ? ip_local_deliver+0xe0/0xf0
      ? ip_protocol_deliver_rcu+0x1c0/0x1c0
      ? ip_rcv+0xbc/0xd0
      ? ip_rcv_finish_core.isra.19+0x380/0x380
      ? __netif_receive_skb_one_core+0x7e/0x90
      ? netif_receive_skb_internal+0x3d/0xb0
      ? napi_gro_receive+0xed/0x150
      ? 0xffffffffc0243c77
      ? net_rx_action+0x149/0x3b0
      ? __do_softirq+0xe4/0x2f8
      ? handle_irq_event_percpu+0x6a/0x80
      ? irq_exit+0xe6/0xf0
      ? do_IRQ+0x7f/0xd0
      ? common_interrupt+0xf/0xf
      </IRQ>
      ? irq_entries_start+0x20/0x660
      ? vmx_get_interrupt_shadow+0x2f0/0x710 [kvm_intel]
      ? kvm_set_msr_common+0xfc7/0x2380 [kvm]
      ? recalibrate_cpu_khz+0x10/0x10
      ? ktime_get+0x3a/0xa0
      ? kvm_arch_vcpu_ioctl_run+0x107/0x560 [kvm]
      ? kvm_init+0x6bf/0xd00 [kvm]
      ? __seccomp_filter+0x7a/0x680
      ? do_vfs_ioctl+0xa4/0x630
      ? security_file_ioctl+0x32/0x50
      ? ksys_ioctl+0x60/0x90
      ? __x64_sys_ioctl+0x16/0x20
      ? do_syscall_64+0x5f/0x1a0
      ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    ---[ end trace 9564a1ccad733a90 ]---
    
    This reverts commit e751732486eb3f159089a64d1901992b1357e7cc.
    
    Fixes: e751732486eb3 ("KVM: X86: Fix fpu state crash in kvm guest")
    Reported-by: Derek Yerger <derek@djy.llc>
    Reported-by: kernel@najdan.com
    Cc: Wanpeng Li <wanpengli@tencent.com>
    Cc: Thomas Lambertz <mail@thomaslambertz.de>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b24909e9f83e041af6fa6ccb47f300f884edb3ea
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Jan 17 11:30:50 2020 -0800

    KVM: x86: Ensure guest's FPU state is loaded when accessing for emulation
    
    commit a7baead7e312f5a05381d68585fb6dc68e19e90f upstream.
    
    Lock the FPU regs and reload the current thread's FPU state, which holds
    the guest's FPU state, to the CPU registers if necessary prior to
    accessing guest FPU state as part of emulation.  kernel_fpu_begin() can
    be called from softirq context, therefore KVM must ensure softirqs are
    disabled (locking the FPU regs disables softirqs) when touching CPU FPU
    state.
    
    Note, for all intents and purposes this reverts commit 6ab0b9feb82a7
    ("x86,kvm: remove KVM emulator get_fpu / put_fpu"), but at the time it
    was applied, removing get/put_fpu() was correct.  The re-introduction
    of {get,put}_fpu() is necessitated by the deferring of FPU state load.
    
    Fixes: 5f409e20b7945 ("x86/fpu: Defer FPU state load until return to userspace")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d88948e286b9adc8bfc409c7dcf4b1a40df1d75
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Jan 17 11:30:49 2020 -0800

    KVM: x86: Handle TIF_NEED_FPU_LOAD in kvm_{load,put}_guest_fpu()
    
    commit c9aef3b85f425d1f6635382ec210ee5a7ef55d7d upstream.
    
    Handle TIF_NEED_FPU_LOAD similar to how fpu__copy() handles the flag
    when duplicating FPU state to a new task struct.  TIF_NEED_FPU_LOAD can
    be set any time control is transferred out of KVM, be it voluntarily,
    e.g. if I/O is triggered during a KVM call to get_user_pages, or
    involuntarily, e.g. if softirq runs after an IRQ occurs.  Therefore,
    KVM must account for TIF_NEED_FPU_LOAD whenever it is (potentially)
    accessing CPU FPU state.
    
    Fixes: 5f409e20b7945 ("x86/fpu: Defer FPU state load until return to userspace")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8dd6917f4f043bf1f0e18683aa274f036e40f8c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sat Jan 18 20:09:03 2020 +0100

    KVM: x86: fix overlap between SPTE_MMIO_MASK and generation
    
    commit 56871d444bc4d7ea66708775e62e2e0926384dbc upstream.
    
    The SPTE_MMIO_MASK overlaps with the bits used to track MMIO
    generation number.  A high enough generation number would overwrite the
    SPTE_SPECIAL_MASK region and cause the MMIO SPTE to be misinterpreted.
    
    Likewise, setting bits 52 and 53 would also cause an incorrect generation
    number to be read from the PTE, though this was partially mitigated by the
    (useless if it weren't for the bug) removal of SPTE_SPECIAL_MASK from
    the spte in get_mmio_spte_generation.  Drop that removal, and replace
    it with a compile-time assertion.
    
    Fixes: 6eeb4ef049e7 ("KVM: x86: assign two bits to track SPTE kinds")
    Reported-by: Ben Gardon <bgardon@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eea53c94f03fd4cb114f298c9660933575067dd1
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:54:48 2019 -0800

    KVM: x86: Free wbinvd_dirty_mask if vCPU creation fails
    
    commit 16be9ddea268ad841457a59109963fff8c9de38d upstream.
    
    Free the vCPU's wbinvd_dirty_mask if vCPU creation fails after
    kvm_arch_vcpu_init(), e.g. when installing the vCPU's file descriptor.
    Do the freeing by calling kvm_arch_vcpu_free() instead of open coding
    the freeing.  This adds a likely superfluous, but ultimately harmless,
    call to kvmclock_reset(), which only clears vcpu->arch.pv_time_enabled.
    Using kvm_arch_vcpu_free() allows for additional cleanup in the future.
    
    Fixes: f5f48ee15c2ee ("KVM: VMX: Execute WBINVD to keep data consistency with assigned devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24655ce0e110bdcda18a8eaa74078ccead8f1554
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Dec 10 14:44:13 2019 -0800

    KVM: x86: Don't let userspace set host-reserved cr4 bits
    
    commit b11306b53b2540c6ba068c4deddb6a17d9f8d95b upstream.
    
    Calculate the host-reserved cr4 bits at runtime based on the system's
    capabilities (using logic similar to __do_cpuid_func()), and use the
    dynamically generated mask for the reserved bit check in kvm_set_cr4()
    instead using of the static CR4_RESERVED_BITS define.  This prevents
    userspace from "enabling" features in cr4 that are not supported by the
    system, e.g. by ignoring KVM_GET_SUPPORTED_CPUID and specifying a bogus
    CPUID for the vCPU.
    
    Allowing userspace to set unsupported bits in cr4 can lead to a variety
    of undesirable behavior, e.g. failed VM-Enter, and in general increases
    KVM's attack surface.  A crafty userspace can even abuse CR4.LA57 to
    induce an unchecked #GP on a WRMSR.
    
    On a platform without LA57 support:
    
      KVM_SET_CPUID2 // CPUID_7_0_ECX.LA57 = 1
      KVM_SET_SREGS  // CR4.LA57 = 1
      KVM_SET_MSRS   // KERNEL_GS_BASE = 0x0004000000000000
      KVM_RUN
    
    leads to a #GP when writing KERNEL_GS_BASE into hardware:
    
      unchecked MSR access error: WRMSR to 0xc0000102 (tried to write 0x0004000000000000)
      at rIP: 0xffffffffa00f239a (vmx_prepare_switch_to_guest+0x10a/0x1d0 [kvm_intel])
      Call Trace:
       kvm_arch_vcpu_ioctl_run+0x671/0x1c70 [kvm]
       kvm_vcpu_ioctl+0x36b/0x5d0 [kvm]
       do_vfs_ioctl+0xa1/0x620
       ksys_ioctl+0x66/0x70
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x4c/0x170
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7fc08133bf47
    
    Note, the above sequence fails VM-Enter due to invalid guest state.
    Userspace can allow VM-Enter to succeed (after the WRMSR #GP) by adding
    a KVM_SET_SREGS w/ CR4.LA57=0 after KVM_SET_MSRS, in which case KVM will
    technically leak the host's KERNEL_GS_BASE into the guest.  But, as
    KERNEL_GS_BASE is a userspace-defined value/address, the leak is largely
    benign as a malicious userspace would simply be exposing its own data to
    the guest, and attacking a benevolent userspace would require multiple
    bugs in the userspace VMM.
    
    Cc: stable@vger.kernel.org
    Cc: Jun Nakajima <jun.nakajima@intel.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 684ea466aa9dfcb3236ec17001bd5fdfdf601e4b
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Dec 10 15:24:32 2019 -0800

    KVM: VMX: Add non-canonical check on writes to RTIT address MSRs
    
    commit fe6ed369fca98e99df55c932b85782a5687526b5 upstream.
    
    Reject writes to RTIT address MSRs if the data being written is a
    non-canonical address as the MSRs are subject to canonical checks, e.g.
    KVM will trigger an unchecked #GP when loading the values to hardware
    during pt_guest_enter().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9fb42b4633414d887f052fd4dc288533eb4f33a
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Dec 6 15:57:14 2019 -0800

    KVM: x86: Use gpa_t for cr2/gpa to fix TDP support on 32-bit KVM
    
    commit 736c291c9f36b07f8889c61764c28edce20e715d upstream.
    
    Convert a plethora of parameters and variables in the MMU and page fault
    flows from type gva_t to gpa_t to properly handle TDP on 32-bit KVM.
    
    Thanks to PSE and PAE paging, 32-bit kernels can access 64-bit physical
    addresses.  When TDP is enabled, the fault address is a guest physical
    address and thus can be a 64-bit value, even when both KVM and its guest
    are using 32-bit virtual addressing, e.g. VMX's VMCS.GUEST_PHYSICAL is a
    64-bit field, not a natural width field.
    
    Using a gva_t for the fault address means KVM will incorrectly drop the
    upper 32-bits of the GPA.  Ditto for gva_to_gpa() when it is used to
    translate L2 GPAs to L1 GPAs.
    
    Opportunistically rename variables and parameters to better reflect the
    dual address modes, e.g. use "cr2_or_gpa" for fault addresses and plain
    "addr" instead of "vaddr" when the address may be either a GVA or an L2
    GPA.  Similarly, use "gpa" in the nonpaging_page_fault() flows to avoid
    a confusing "gpa_t gva" declaration; this also sets the stage for a
    future patch to combing nonpaging_page_fault() and tdp_page_fault() with
    minimal churn.
    
    Sprinkle in a few comments to document flows where an address is known
    to be a GVA and thus can be safely truncated to a 32-bit value.  Add
    WARNs in kvm_handle_page_fault() and FNAME(gva_to_gpa_nested)() to help
    document such cases and detect bugs.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43ba65a5394cd4e153cca878a9e0d475ba62b7e3
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Fri Dec 6 15:36:12 2019 +0000

    x86/KVM: Clean up host's steal time structure
    
    commit a6bd811f1209fe1c64c9f6fd578101d6436c6b6e upstream.
    
    Now that we are mapping kvm_steal_time from the guest directly we
    don't need keep a copy of it in kvm_vcpu_arch.st. The same is true
    for the stime field.
    
    This is part of CVE-2019-3016.
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 072690664a42b688b4a7620b9ad97add92918fbb
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Thu Dec 5 01:30:51 2019 +0000

    x86/kvm: Cache gfn to pfn translation
    
    commit 917248144db5d7320655dbb41d3af0b8a0f3d589 upstream.
    
    __kvm_map_gfn()'s call to gfn_to_pfn_memslot() is
    * relatively expensive
    * in certain cases (such as when done from atomic context) cannot be called
    
    Stashing gfn-to-pfn mapping should help with both cases.
    
    This is part of CVE-2019-3016.
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91fefc3e32294f16099d768a51492e56399dcb54
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Thu Dec 5 03:45:32 2019 +0000

    x86/KVM: Make sure KVM_VCPU_FLUSH_TLB flag is not missed
    
    commit b043138246a41064527cf019a3d51d9f015e9796 upstream.
    
    There is a potential race in record_steal_time() between setting
    host-local vcpu->arch.st.steal.preempted to zero (i.e. clearing
    KVM_VCPU_PREEMPTED) and propagating this value to the guest with
    kvm_write_guest_cached(). Between those two events the guest may
    still see KVM_VCPU_PREEMPTED in its copy of kvm_steal_time, set
    KVM_VCPU_FLUSH_TLB and assume that hypervisor will do the right
    thing. Which it won't.
    
    Instad of copying, we should map kvm_steal_time and that will
    guarantee atomicity of accesses to @preempted.
    
    This is part of CVE-2019-3016.
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6ad4449ddeffec8bf492ad495c2fc4e45ff2d42
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Tue Nov 12 16:35:06 2019 +0000

    x86/kvm: Introduce kvm_(un)map_gfn()
    
    commit 1eff70a9abd46f175defafd29bc17ad456f398a7 upstream.
    
    kvm_vcpu_(un)map operates on gfns from any current address space.
    In certain cases we want to make sure we are not mapping SMRAM
    and for that we can use kvm_(un)map_gfn() that we are introducing
    in this patch.
    
    This is part of CVE-2019-3016.
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6a896bb83afabcf0b3f76199cc47de1ff6a647e
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Dec 4 15:50:27 2019 +0100

    KVM: x86: use CPUID to locate host page table reserved bits
    
    commit 7adacf5eb2d2048045d9fd8fdab861fd9e7e2e96 upstream.
    
    The comment in kvm_get_shadow_phys_bits refers to MKTME, but the same is actually
    true of SME and SEV.  Just use CPUID[0x8000_0008].EAX[7:0] unconditionally if
    available, it is simplest and works even if memory is not encrypted.
    
    Cc: stable@vger.kernel.org
    Reported-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06b34107899d1b004462c9d2e52ff5a146ee9898
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Wed Oct 30 19:01:31 2019 +0000

    x86/kvm: Be careful not to clear KVM_VCPU_FLUSH_TLB bit
    
    commit 8c6de56a42e0c657955e12b882a81ef07d1d073e upstream.
    
    kvm_steal_time_set_preempted() may accidentally clear KVM_VCPU_FLUSH_TLB
    bit if it is called more than once while VCPU is preempted.
    
    This is part of CVE-2019-3016.
    
    (This bug was also independently discovered by Jim Mattson
    <jmattson@google.com>)
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0972f0da0b70ea41df4f17185665da5c4fb893ac
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Jan 7 16:12:10 2020 -0800

    KVM: x86/mmu: Apply max PA check for MMIO sptes to 32-bit KVM
    
    commit e30a7d623dccdb3f880fbcad980b0cb589a1da45 upstream.
    
    Remove the bogus 64-bit only condition from the check that disables MMIO
    spte optimization when the system supports the max PA, i.e. doesn't have
    any reserved PA bits.  32-bit KVM always uses PAE paging for the shadow
    MMU, and per Intel's SDM:
    
      PAE paging translates 32-bit linear addresses to 52-bit physical
      addresses.
    
    The kernel's restrictions on max physical addresses are limits on how
    much memory the kernel can reasonably use, not what physical addresses
    are supported by hardware.
    
    Fixes: ce88decffd17 ("KVM: MMU: mmio page fault support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4daeb0097ae528f1134433cff22dd59825bc819
Author: John Allen <john.allen@amd.com>
Date:   Thu Dec 19 14:17:59 2019 -0600

    kvm/svm: PKU not currently supported
    
    commit a47970ed74a535b1accb4bc73643fd5a93993c3e upstream.
    
    Current SVM implementation does not have support for handling PKU. Guests
    running on a host with future AMD cpus that support the feature will read
    garbage from the PKRU register and will hit segmentation faults on boot as
    memory is getting marked as protected that should not be. Ensure that cpuid
    from SVM does not advertise the feature.
    
    Signed-off-by: John Allen <john.allen@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 0556cbdc2fbc ("x86/pkeys: Don't check if PKRU is zero before writing it")
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18eebcc7b3109daccb41f4056a444dfed32eef2b
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:54:47 2019 -0800

    KVM: PPC: Book3S PR: Free shared page if mmu initialization fails
    
    commit cb10bf9194f4d2c5d830eddca861f7ca0fecdbb4 upstream.
    
    Explicitly free the shared page if kvmppc_mmu_init() fails during
    kvmppc_core_vcpu_create(), as the page is freed only in
    kvmppc_core_vcpu_free(), which is not reached via kvm_vcpu_uninit().
    
    Fixes: 96bc451a15329 ("KVM: PPC: Introduce shared page")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Acked-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89f61eb6529d4e138536fef51b8706a26e4efb51
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:54:46 2019 -0800

    KVM: PPC: Book3S HV: Uninit vCPU if vcore creation fails
    
    commit 1a978d9d3e72ddfa40ac60d26301b154247ee0bc upstream.
    
    Call kvm_vcpu_uninit() if vcore creation fails to avoid leaking any
    resources allocated by kvm_vcpu_init(), i.e. the vcpu->run page.
    
    Fixes: 371fefd6f2dc4 ("KVM: PPC: Allow book3s_hv guests to use SMT processor modes")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Acked-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb42ab927a96ff490f51d4119478f42df16d6ef7
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon Dec 9 12:19:31 2019 -0800

    KVM: x86: Fix potential put_fpu() w/o load_fpu() on MPX platform
    
    commit f958bd2314d117f8c29f4821401bc1925bc2e5ef upstream.
    
    Unlike most state managed by XSAVE, MPX is initialized to zero on INIT.
    Because INITs are usually recognized in the context of a VCPU_RUN call,
    kvm_vcpu_reset() puts the guest's FPU so that the FPU state is resident
    in memory, zeros the MPX state, and reloads FPU state to hardware.  But,
    in the unlikely event that an INIT is recognized during
    kvm_arch_vcpu_ioctl_get_mpstate() via kvm_apic_accept_events(),
    kvm_vcpu_reset() will call kvm_put_guest_fpu() without a preceding
    kvm_load_guest_fpu() and corrupt the guest's FPU state (and possibly
    userspace's FPU state as well).
    
    Given that MPX is being removed from the kernel[*], fix the bug with the
    simple-but-ugly approach of loading the guest's FPU during
    KVM_GET_MP_STATE.
    
    [*] See commit f240652b6032b ("x86/mpx: Remove MPX APIs").
    
    Fixes: f775b13eedee2 ("x86,kvm: move qemu/guest FPU switching out to vcpu_run")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 638e8e139836d18863810e6399f9021687862d31
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:47 2019 -0800

    KVM: x86: Protect MSR-based index computations in fixed_msr_to_seg_unit() from Spectre-v1/L1TF attacks
    
    commit 25a5edea71b7c154b6a0b8cec14c711cafa31d26 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in fixed_msr_to_seg_unit().
    This function contains index computations based on the
    (attacker-controlled) MSR number.
    
    Fixes: de9aef5e1ad6 ("KVM: MTRR: introduce fixed_mtrr_segment table")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb9a9b51e35fbe08770a6b1a3c166245fbd02dba
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:41 2019 -0800

    KVM: x86: Protect x86_decode_insn from Spectre-v1/L1TF attacks
    
    commit 3c9053a2cae7ba2ba73766a34cea41baa70f57f7 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in x86_decode_insn().
    kvm_emulate_instruction() (an ancestor of x86_decode_insn()) is an exported
    symbol, so KVM should treat it conservatively from a security perspective.
    
    Fixes: 045a282ca415 ("KVM: emulator: implement fninit, fnstsw, fnstcw")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63d5ec6e4f460aeb1dc230161619385cd164cf02
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:49 2019 -0800

    KVM: x86: Protect MSR-based index computations from Spectre-v1/L1TF attacks in x86.c
    
    commit 6ec4c5eee1750d5d17951c4e1960d953376a0dda upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in set_msr_mce() and
    get_msr_mce().
    Both functions contain index computations based on the
    (attacker-controlled) MSR number.
    
    Fixes: 890ca9aefa78 ("KVM: Add MCE support")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a9e64af2c92a5bdf1d027425193814040a487c4
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:44 2019 -0800

    KVM: x86: Protect ioapic_read_indirect() from Spectre-v1/L1TF attacks
    
    commit 8c86405f606ca8508b8d9280680166ca26723695 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in ioapic_read_indirect().
    This function contains index computations based on the
    (attacker-controlled) IOREGSEL register.
    
    Fixes: a2c118bfab8b ("KVM: Fix bounds checking in ioapic indirect register reads (CVE-2013-1798)")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7bad19b92b9caf0d6e907ae2144907196bf473e
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:48 2019 -0800

    KVM: x86: Protect MSR-based index computations in pmu.h from Spectre-v1/L1TF attacks
    
    commit 13c5183a4e643cc2b03a22d0e582c8e17bb7457d upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in the get_gp_pmc() and
    get_fixed_pmc() functions.
    They both contain index computations based on the (attacker-controlled)
    MSR number.
    
    Fixes: 25462f7f5295 ("KVM: x86/vPMU: Define kvm_pmu_ops to support vPMU function dispatch")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e795ef215d6d26fe4e53fc8a93694f54c5b9b19a
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:45 2019 -0800

    KVM: x86: Protect ioapic_write_indirect() from Spectre-v1/L1TF attacks
    
    commit 670564559ca35b439c8d8861fc399451ddf95137 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in ioapic_write_indirect().
    This function contains index computations based on the
    (attacker-controlled) IOREGSEL register.
    
    This patch depends on patch
    "KVM: x86: Protect ioapic_read_indirect() from Spectre-v1/L1TF attacks".
    
    Fixes: 70f93dae32ac ("KVM: Use temporary variable to shorten lines.")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4144121d123d3042859a6016e1ac0f428320b89b
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:42 2019 -0800

    KVM: x86: Protect kvm_hv_msr_[get|set]_crash_data() from Spectre-v1/L1TF attacks
    
    commit 8618793750071d66028584a83ed0b4fa7eb4f607 upstream.
    
    This fixes Spectre-v1/L1TF vulnerabilities in kvm_hv_msr_get_crash_data()
    and kvm_hv_msr_set_crash_data().
    These functions contain index computations that use the
    (attacker-controlled) MSR number.
    
    Fixes: e7d9513b60e8 ("kvm/x86: added hyper-v crash msrs into kvm hyperv context")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ffb3caf3791728b14262c60342976cca54fe5d4
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:46 2019 -0800

    KVM: x86: Protect kvm_lapic_reg_write() from Spectre-v1/L1TF attacks
    
    commit 4bf79cb089f6b1c6c632492c0271054ce52ad766 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in kvm_lapic_reg_write().
    This function contains index computations based on the
    (attacker-controlled) MSR number.
    
    Fixes: 0105d1a52640 ("KVM: x2apic interface to lapic")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd530c60e362c4b0e2989b76fc5578fccb1f5391
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:52 2019 -0800

    KVM: x86: Protect DR-based index computations from Spectre-v1/L1TF attacks
    
    commit ea740059ecb37807ba47b84b33d1447435a8d868 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in __kvm_set_dr() and
    kvm_get_dr().
    Both kvm_get_dr() and kvm_set_dr() (a wrapper of __kvm_set_dr()) are
    exported symbols so KVM should tream them conservatively from a security
    perspective.
    
    Fixes: 020df0794f57 ("KVM: move DR register access handling into generic code")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e08d3d792bb06fe457a87384ba4cf80775fc4ff
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:53 2019 -0800

    KVM: x86: Protect pmu_intel.c from Spectre-v1/L1TF attacks
    
    commit 66061740f1a487f4ed54fde75e724709f805da53 upstream.
    
    This fixes Spectre-v1/L1TF vulnerabilities in intel_find_fixed_event()
    and intel_rdpmc_ecx_to_pmc().
    kvm_rdpmc() (ancestor of intel_find_fixed_event()) and
    reprogram_fixed_counter() (ancestor of intel_rdpmc_ecx_to_pmc()) are
    exported symbols so KVM should treat them conservatively from a security
    perspective.
    
    Fixes: 25462f7f5295 ("KVM: x86/vPMU: Define kvm_pmu_ops to support vPMU function dispatch")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d901446ab26f8070cec643f006b8f4107f883e8
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:50 2019 -0800

    KVM: x86: Refactor prefix decoding to prevent Spectre-v1/L1TF attacks
    
    commit 125ffc5e0a56a3eded608dc51e09d5ebf72cf652 upstream.
    
    This fixes Spectre-v1/L1TF vulnerabilities in
    vmx_read_guest_seg_selector(), vmx_read_guest_seg_base(),
    vmx_read_guest_seg_limit() and vmx_read_guest_seg_ar().  When
    invoked from emulation, these functions contain index computations
    based on the (attacker-influenced) segment value.  Using constants
    prevents the attack.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a301d887333c14100ea4661646a44c11b0b20a9
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:43 2019 -0800

    KVM: x86: Refactor picdev_write() to prevent Spectre-v1/L1TF attacks
    
    commit 14e32321f3606e4b0970200b6e5e47ee6f1e6410 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in picdev_write().
    It replaces index computations based on the (attacked-controlled) port
    number with constants through a minor refactoring.
    
    Fixes: 85f455f7ddbe ("KVM: Add support for in-kernel PIC emulation")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5baf3e203f795c7053c4c754b5d66ed1b00ac3b
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Feb 3 10:33:42 2020 -0700

    aio: prevent potential eventfd recursion on poll
    
    commit 01d7a356872eec22ef34a33a5f9cfa917d145468 upstream.
    
    If we have nested or circular eventfd wakeups, then we can deadlock if
    we run them inline from our poll waitqueue wakeup handler. It's also
    possible to have very long chains of notifications, to the extent where
    we could risk blowing the stack.
    
    Check the eventfd recursion count before calling eventfd_signal(). If
    it's non-zero, then punt the signaling to async context. This is always
    safe, as it takes us out-of-line in terms of stack and locking context.
    
    Cc: stable@vger.kernel.org # 4.19+
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b88bd344610921e5496cc2a52c7d9320f0af10e
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Feb 2 08:23:03 2020 -0700

    eventfd: track eventfd_signal() recursion depth
    
    commit b5e683d5cab8cd433b06ae178621f083cabd4f63 upstream.
    
    eventfd use cases from aio and io_uring can deadlock due to circular
    or resursive calling, when eventfd_signal() tries to grab the waitqueue
    lock. On top of that, it's also possible to construct notification
    chains that are deep enough that we could blow the stack.
    
    Add a percpu counter that tracks the percpu recursion depth, warn if we
    exceed it. The counter is also exposed so that users of eventfd_signal()
    can do the right thing if it's non-zero in the context where it is
    called.
    
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e345439cf54529d9cefb25c55bc0ce7ec759ce7
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Feb 4 16:48:34 2020 -0700

    io_uring: spin for sq thread to idle on shutdown
    
    commit df069d80c8e38c19531c392322e9a16617475c44 upstream.
    
    As part of io_uring shutdown, we cancel work that is pending and won't
    necessarily complete on its own. That includes requests like poll
    commands and timeouts.
    
    If we're using SQPOLL for kernel side submission and we shutdown the
    ring immediately after queueing such work, we can race with the sqthread
    doing the submission. This means we may miss cancelling some work, which
    results in the io_uring shutdown hanging forever.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9ce114dfbc4d70d09742b5039487e07402cbd8d
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Jan 31 12:06:52 2020 -0700

    io_uring: don't map read/write iovec potentially twice
    
    commit 5d204bcfa09330972ad3428a8f81c23f371d3e6d upstream.
    
    If we have a read/write that is deferred, we already setup the async IO
    context for that request, and mapped it. When we later try and execute
    the request and we get -EAGAIN, we don't want to attempt to re-map it.
    If we do, we end up with garbage in the iovec, which typically leads
    to an -EFAULT or -EINVAL completion.
    
    Cc: stable@vger.kernel.org # 5.5
    Reported-by: Dan Melnic <dmm@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bdac9edeb3c249ea27428ac16be1364de14ecf0
Author: Coly Li <colyli@suse.de>
Date:   Sat Feb 1 22:42:33 2020 +0800

    bcache: add readahead cache policy options via sysfs interface
    
    commit 038ba8cc1bffc51250add4a9b9249d4331576d8f upstream.
    
    In year 2007 high performance SSD was still expensive, in order to
    save more space for real workload or meta data, the readahead I/Os
    for non-meta data was bypassed and not cached on SSD.
    
    In now days, SSD price drops a lot and people can find larger size
    SSD with more comfortable price. It is unncessary to alway bypass
    normal readahead I/Os to save SSD space for now.
    
    This patch adds options for readahead data cache policies via sysfs
    file /sys/block/bcache<N>/readahead_cache_policy, the options are,
    - "all": cache all readahead data I/Os.
    - "meta-only": only cache meta data, and bypass other regular I/Os.
    
    If users want to make bcache continue to only cache readahead request
    for metadata and bypass regular data readahead, please set "meta-only"
    to this sysfs file. By default, bcache will back to cache all read-
    ahead requests now.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Coly Li <colyli@suse.de>
    Acked-by: Eric Wheeler <bcache@linux.ewheeler.net>
    Cc: Michael Lyle <mlyle@lyle.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dde2d621b7b342786f22553ebd6dcb18d5b84f39
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Wed Jan 8 13:53:47 2020 +0100

    watchdog: fix UAF in reboot notifier handling in watchdog core code
    
    commit 69503e585192fdd84b240f18a0873d20e18a2e0a upstream.
    
    After the commit 44ea39420fc9 ("drivers/watchdog: make use of
    devm_register_reboot_notifier()") the struct notifier_block reboot_nb in
    the struct watchdog_device is removed from the reboot notifiers chain at
    the time watchdog's chardev is closed. But at least in i6300esb.c case
    reboot_nb is embedded in the struct esb_dev which can be freed on its
    device removal and before the chardev is closed, thus UAF at reboot:
    
    [    7.728581] esb_probe: esb_dev.watchdog_device ffff91316f91ab28
    ts# uname -r                            note the address ^^^
    5.5.0-rc5-ae6088-wdog
    ts# ./openwdog0 &
    [1] 696
    ts# opened /dev/watchdog0, sleeping 10s...
    ts# echo 1 > /sys/devices/pci0000\:00/0000\:00\:09.0/remove
    [  178.086079] devres:rel_nodes: dev ffff91317668a0b0 data ffff91316f91ab28
               esb_dev.watchdog_device.reboot_nb memory is freed here ^^^
    ts# ...woken up
    [  181.459010] devres:rel_nodes: dev ffff913171781000 data ffff913174a1dae8
    [  181.460195] devm_unreg_reboot_notifier: res ffff913174a1dae8 nb ffff91316f91ab78
                                         attempt to use memory already freed ^^^
    [  181.461063] devm_unreg_reboot_notifier: nb->call 6b6b6b6b6b6b6b6b
    [  181.461243] devm_unreg_reboot_notifier: nb->next 6b6b6b6b6b6b6b6b
                    freed memory is filled with a slub poison ^^^
    [1]+  Done                    ./openwdog0
    ts# reboot
    [  229.921862] systemd-shutdown[1]: Rebooting.
    [  229.939265] notifier_call_chain: nb ffffffff9c6c2f20 nb->next ffffffff9c6d50c0
    [  229.943080] notifier_call_chain: nb ffffffff9c6d50c0 nb->next 6b6b6b6b6b6b6b6b
    [  229.946054] notifier_call_chain: nb 6b6b6b6b6b6b6b6b INVAL
    [  229.957584] general protection fault: 0000 [#1] SMP
    [  229.958770] CPU: 0 PID: 1 Comm: systemd-shutdow Not tainted 5.5.0-rc5-ae6088-wdog
    [  229.960224] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), ...
    [  229.963288] RIP: 0010:notifier_call_chain+0x66/0xd0
    [  229.969082] RSP: 0018:ffffb20dc0013d88 EFLAGS: 00010246
    [  229.970812] RAX: 000000000000002e RBX: 6b6b6b6b6b6b6b6b RCX: 00000000000008b3
    [  229.972929] RDX: 0000000000000000 RSI: 0000000000000096 RDI: ffffffff9ccc46ac
    [  229.975028] RBP: 0000000000000001 R08: 0000000000000000 R09: 00000000000008b3
    [  229.977039] R10: 0000000000000001 R11: ffffffff9c26c740 R12: 0000000000000000
    [  229.979155] R13: 6b6b6b6b6b6b6b6b R14: 0000000000000000 R15: 00000000fffffffa
    ...   slub_debug=FZP poison ^^^
    [  229.989089] Call Trace:
    [  229.990157]  blocking_notifier_call_chain+0x43/0x59
    [  229.991401]  kernel_restart_prepare+0x14/0x30
    [  229.992607]  kernel_restart+0x9/0x30
    [  229.993800]  __do_sys_reboot+0x1d2/0x210
    [  230.000149]  do_syscall_64+0x3d/0x130
    [  230.001277]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  230.002639] RIP: 0033:0x7f5461bdd177
    [  230.016402] Modules linked in: i6300esb
    [  230.050261] Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Fix the crash by reverting 44ea39420fc9 so unregister_reboot_notifier()
    is called when watchdog device is removed. This also makes handling of
    the reboot notifier unified with the handling of the restart handler,
    which is freed with unregister_restart_handler() in the same place.
    
    Fixes: 44ea39420fc9 ("drivers/watchdog: make use of devm_register_reboot_notifier()")
    Cc: stable@vger.kernel.org # v4.15+
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200108125347.6067-1-vdronov@redhat.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56a376f501f55a0f18eeab587fb7c44699a0976c
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Tue Jan 28 10:31:26 2020 -0500

    xen/gntdev: Do not use mm notifiers with autotranslating guests
    
    commit 9293724192a73f49c722e9685d45649c6df67dfe upstream.
    
    Commit d3eeb1d77c5d ("xen/gntdev: use mmu_interval_notifier_insert")
    missed a test for use_ptemod when calling mmu_interval_read_begin(). Fix
    that.
    
    Fixes: d3eeb1d77c5d ("xen/gntdev: use mmu_interval_notifier_insert")
    CC: stable@vger.kernel.org # 5.5
    Reported-by: Ilpo Järvinen <ilpo.jarvinen@cs.helsinki.fi>
    Tested-by: Ilpo Järvinen <ilpo.jarvinen@cs.helsinki.fi>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Acked-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ef39f135d41f5ae919f4bea4f8685e73baf16c6
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jan 17 14:49:31 2020 +0100

    xen/balloon: Support xend-based toolstack take two
    
    commit eda4eabf86fd6806eaabc23fb90dd056fdac037b upstream.
    
    Commit 3aa6c19d2f38be ("xen/balloon: Support xend-based toolstack")
    tried to fix a regression with running on rather ancient Xen versions.
    Unfortunately the fix was based on the assumption that xend would
    just use another Xenstore node, but in reality only some downstream
    versions of xend are doing that. The upstream xend does not write
    that Xenstore node at all, so the problem must be fixed in another
    way.
    
    The easiest way to achieve that is to fall back to the behavior
    before commit 96edd61dcf4436 ("xen/balloon: don't online new memory
    initially") in case the static memory maximum can't be read.
    
    This is achieved by setting static_max to the current number of
    memory pages known by the system resulting in target_diff becoming
    zero.
    
    Fixes: 3aa6c19d2f38be ("xen/balloon: Support xend-based toolstack")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: <stable@vger.kernel.org> # 4.13
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e37ab76279f8c06b0a6fc0e91cb8883a8cf237ca
Author: Gavin Shan <gshan@redhat.com>
Date:   Tue Dec 10 15:48:29 2019 +1100

    tools/kvm_stat: Fix kvm_exit filter name
    
    commit 5fcf3a55a62afb0760ccb6f391d62f20bce4a42f upstream.
    
    The filter name is fixed to "exit_reason" for some kvm_exit events, no
    matter what architect we have. Actually, the filter name ("exit_reason")
    is only applicable to x86, meaning it's broken on other architects
    including aarch64.
    
    This fixes the issue by providing various kvm_exit filter names, depending
    on architect we're on. Afterwards, the variable filter name is picked and
    applied through ioctl(fd, SET_FILTER).
    
    Reported-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27d47ac960d4c94f40ce7682fd58a967b64bace0
Author: Sean Young <sean@mess.org>
Date:   Thu Nov 21 11:10:47 2019 +0100

    media: rc: ensure lirc is initialized before registering input device
    
    commit 080d89f522e2baddb4fbbd1af4b67b5f92537ef8 upstream.
    
    Once rc_open is called on the input device, lirc events can be delivered.
    Ensure lirc is ready to do so else we might get this:
    
    Registered IR keymap rc-hauppauge
    rc rc0: Hauppauge WinTV PVR-350 as
    /devices/pci0000:00/0000:00:1e.0/0000:04:00.0/i2c-0/0-0018/rc/rc0
    input: Hauppauge WinTV PVR-350 as
    /devices/pci0000:00/0000:00:1e.0/0000:04:00.0/i2c-0/0-0018/rc/rc0/input9
    BUG: kernel NULL pointer dereference, address: 0000000000000038
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    CPU: 1 PID: 17 Comm: kworker/1:0 Not tainted 5.3.11-300.fc31.x86_64 #1
    Hardware name:  /DG43NB, BIOS NBG4310H.86A.0096.2009.0903.1845 09/03/2009
    Workqueue: events ir_work [ir_kbd_i2c]
    RIP: 0010:ir_lirc_scancode_event+0x3d/0xb0
    Code: a6 b4 07 00 00 49 81 c6 b8 07 00 00 55 53 e8 ba a7 9d ff 4c 89
    e7 49 89 45 00 e8 5e 7a 25 00 49 8b 1e 48 89 c5 4c 39 f3 74 58 <8b> 43
    38 8b 53 40 89 c1 2b 4b 3c 39 ca 72 41 21 d0 49 8b 7d 00 49
    RSP: 0018:ffffaae2000b3d88 EFLAGS: 00010017
    RAX: 0000000000000002 RBX: 0000000000000000 RCX: 0000000000000019
    RDX: 0000000000000001 RSI: 006e801b1f26ce6a RDI: ffff9e39797c37b4
    RBP: 0000000000000002 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000001 R11: 0000000000000001 R12: ffff9e39797c37b4
    R13: ffffaae2000b3db8 R14: ffff9e39797c37b8 R15: ffff9e39797c33d8
    FS:  0000000000000000(0000) GS:ffff9e397b680000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000038 CR3: 0000000035844000 CR4: 00000000000006e0
    Call Trace:
    ir_do_keydown+0x8e/0x2b0
    rc_keydown+0x52/0xc0
    ir_work+0xb8/0x130 [ir_kbd_i2c]
    process_one_work+0x19d/0x340
    worker_thread+0x50/0x3b0
    kthread+0xfb/0x130
    ? process_one_work+0x340/0x340
    ? kthread_park+0x80/0x80
    ret_from_fork+0x35/0x40
    Modules linked in: rc_hauppauge tuner msp3400 saa7127 saa7115 ivtv(+)
    tveeprom cx2341x v4l2_common videodev mc i2c_algo_bit ir_kbd_i2c
    ip_tables firewire_ohci e1000e serio_raw firewire_core ata_generic
    crc_itu_t pata_acpi pata_jmicron fuse
    CR2: 0000000000000038
    ---[ end trace c67c2697a99fa74b ]---
    RIP: 0010:ir_lirc_scancode_event+0x3d/0xb0
    Code: a6 b4 07 00 00 49 81 c6 b8 07 00 00 55 53 e8 ba a7 9d ff 4c 89
    e7 49 89 45 00 e8 5e 7a 25 00 49 8b 1e 48 89 c5 4c 39 f3 74 58 <8b> 43
    38 8b 53 40 89 c1 2b 4b 3c 39 ca 72 41 21 d0 49 8b 7d 00 49
    RSP: 0018:ffffaae2000b3d88 EFLAGS: 00010017
    RAX: 0000000000000002 RBX: 0000000000000000 RCX: 0000000000000019
    RDX: 0000000000000001 RSI: 006e801b1f26ce6a RDI: ffff9e39797c37b4
    RBP: 0000000000000002 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000001 R11: 0000000000000001 R12: ffff9e39797c37b4
    R13: ffffaae2000b3db8 R14: ffff9e39797c37b8 R15: ffff9e39797c33d8
    FS:  0000000000000000(0000) GS:ffff9e397b680000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000038 CR3: 0000000035844000 CR4: 00000000000006e0
    rc rc0: lirc_dev: driver ir_kbd_i2c registered at minor = 0, scancode
    receiver, no transmitter
    tuner-simple 0-0061: creating new instance
    tuner-simple 0-0061: type set to 2 (Philips NTSC (FI1236,FM1236 and
    compatibles))
    ivtv0: Registered device video0 for encoder MPG (4096 kB)
    ivtv0: Registered device video32 for encoder YUV (2048 kB)
    ivtv0: Registered device vbi0 for encoder VBI (1024 kB)
    ivtv0: Registered device video24 for encoder PCM (320 kB)
    ivtv0: Registered device radio0 for encoder radio
    ivtv0: Registered device video16 for decoder MPG (1024 kB)
    ivtv0: Registered device vbi8 for decoder VBI (64 kB)
    ivtv0: Registered device vbi16 for decoder VOUT
    ivtv0: Registered device video48 for decoder YUV (1024 kB)
    
    Cc: stable@vger.kernel.org
    Tested-by: Nick French <nickfrench@gmail.com>
    Reported-by: Nick French <nickfrench@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9e59ee702b30feabe8bc4b1745ab5c7a72eb3d9
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:13 2020 +0100

    media: iguanair: fix endpoint sanity check
    
    commit 1b257870a78b0a9ce98fdfb052c58542022ffb5b upstream.
    
    Make sure to use the current alternate setting, which need not be the
    first one by index, when verifying the endpoint descriptors and
    initialising the URBs.
    
    Failing to do so could cause the driver to misbehave or trigger a WARN()
    in usb_submit_urb() that kernels with panic_on_warn set would choke on.
    
    Fixes: 26ff63137c45 ("[media] Add support for the IguanaWorks USB IR Transceiver")
    Fixes: ab1cbdf159be ("media: iguanair: add sanity checks")
    Cc: stable <stable@vger.kernel.org>     # 3.6
    Cc: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cc4b848da617aa25b6cb7d049217c3092b58861
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 22 19:56:20 2019 +0200

    drm/rect: Avoid division by zero
    
    commit 433480c1afd44f3e1e664b85063d98cefeefa0ed upstream.
    
    Check for zero width/height destination rectangle in
    drm_rect_clip_scaled() to avoid a division by zero.
    
    Cc: stable@vger.kernel.org
    Fixes: f96bdf564f3e ("drm/rect: Handle rounding errors in drm_rect_clip_scaled, v3.")
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Testcase: igt/kms_selftest/drm_rect_clip_scaled_div_by_zero
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191122175623.13565-2-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec67f5820c6e33be4c1c96809aa241fa2920140a
Author: Peter Rosin <peda@axentia.se>
Date:   Wed Dec 18 14:28:28 2019 +0200

    drm: atmel-hlcdc: prefer a lower pixel-clock than requested
    
    commit 51a19d150b520f6cb42143f3bdffacd3c33d7ac5 upstream.
    
    The intention was to only select a higher pixel-clock rate than the
    requested, if a slight overclocking would result in a rate significantly
    closer to the requested rate than if the conservative lower pixel-clock
    rate is selected. The fixed patch has the logic the other way around and
    actually prefers the higher frequency. Fix that.
    
    Signed-off-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Fixes: 9946a3a9dbed ("drm/atmel-hlcdc: allow selecting a higher pixel-clock than requested")
    Reported-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Tested-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Cc: Boris Brezillon <boris.brezillon@bootlin.com>
    Cc: <stable@vger.kernel.org> # v4.20+
    Link: https://patchwork.freedesktop.org/patch/msgid/1576672109-22707-6-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9148cd1d49b8a8e03c64c8d2a8db2b0cb5502d16
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Dec 18 14:28:25 2019 +0200

    drm: atmel-hlcdc: enable clock before configuring timing engine
    
    commit 2c1fb9d86f6820abbfaa38a6836157c76ccb4e7b upstream.
    
    Changing pixel clock source without having this clock source enabled
    will block the timing engine and the next operations after (in this case
    setting ATMEL_HLCDC_CFG(5) settings in atmel_hlcdc_crtc_mode_set_nofb()
    will fail). It is recomended (although in datasheet this is not present)
    to actually enabled pixel clock source before doing any changes on timing
    enginge (only SAM9X60 datasheet specifies that the peripheral clock and
    pixel clock must be enabled before using LCD controller).
    
    Fixes: 1a396789f65a ("drm: add Atmel HLCDC Display Controller support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Cc: Boris Brezillon <boris.brezillon@free-electrons.com>
    Cc: <stable@vger.kernel.org> # v4.0+
    Link: https://patchwork.freedesktop.org/patch/msgid/1576672109-22707-3-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0386ea4a46b4378e21154373099bfa23e4e88c8e
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Dec 18 14:28:24 2019 +0200

    drm: atmel-hlcdc: use double rate for pixel clock only if supported
    
    commit 07acf4bafe81dd37eff3fbcfbbdbc48084bc202b upstream.
    
    Doubled system clock should be used as pixel cock source only if this
    is supported. This is emphasized by the value of
    atmel_hlcdc_crtc::dc::desc::fixed_clksrc.
    
    Fixes: a6eca2abdd42 ("drm: atmel-hlcdc: add config option for clock selection")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Cc: Boris Brezillon <bbrezillon@kernel.org>
    Cc: <stable@vger.kernel.org> # v5.3+
    Link: https://patchwork.freedesktop.org/patch/msgid/1576672109-22707-2-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f00dbc839e1e4f4fc20d322ee97517d6db3986c
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Tue Jan 14 17:12:18 2020 +0100

    gfs2: fix O_SYNC write handling
    
    commit 6e5e41e2dc4e4413296d5a4af54ac92d7cd52317 upstream.
    
    In gfs2_file_write_iter, for direct writes, the error checking in the buffered
    write fallback case is incomplete.  This can cause inode write errors to go
    undetected.  Fix and clean up gfs2_file_write_iter along the way.
    
    Based on a proposed fix by Christoph Hellwig <hch@lst.de>.
    
    Fixes: 967bcc91b044 ("gfs2: iomap direct I/O support")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80db8a2290b193e4386d4074d32e6131a6cdb47d
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Jan 15 16:38:29 2020 +0100

    gfs2: move setting current->backing_dev_info
    
    commit 4c0e8dda608a51855225c611b5c6b442f95fbc56 upstream.
    
    Set current->backing_dev_info just around the buffered write calls to
    prepare for the next fix.
    
    Fixes: 967bcc91b044 ("gfs2: iomap direct I/O support")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87c6124ed2095e72456bc151c01a16c3262ef23b
Author: Abhi Das <adas@redhat.com>
Date:   Tue Feb 4 14:14:56 2020 -0600

    gfs2: fix gfs2_find_jhead that returns uninitialized jhead with seq 0
    
    commit 7582026f6f3588ecebd281965c8a71aff6fb6158 upstream.
    
    When the first log header in a journal happens to have a sequence
    number of 0, a bug in gfs2_find_jhead() causes it to prematurely exit,
    and return an uninitialized jhead with seq 0. This can cause failures
    in the caller. For instance, a mount fails in one test case.
    
    The correct behavior is for it to continue searching through the journal
    to find the correct journal head with the highest sequence number.
    
    Fixes: f4686c26ecc3 ("gfs2: read journal in large chunks")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Abhi Das <adas@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76b7847204e3af25eebfa162df0aa4231287cacc
Author: Roberto Bergantinos Corpas <rbergant@redhat.com>
Date:   Tue Feb 4 11:32:56 2020 +0100

    sunrpc: expiry_time should be seconds not timeval
    
    commit 3d96208c30f84d6edf9ab4fac813306ac0d20c10 upstream.
    
    When upcalling gssproxy, cache_head.expiry_time is set as a
    timeval, not seconds since boot. As such, RPC cache expiry
    logic will not clean expired objects created under
    auth.rpcsec.context cache.
    
    This has proven to cause kernel memory leaks on field. Using
    64 bit variants of getboottime/timespec
    
    Expiration times have worked this way since 2010's c5b29f885afe "sunrpc:
    use seconds since boot in expiry cache".  The gssproxy code introduced
    in 2012 added gss_proxy_save_rsc and introduced the bug.  That's a while
    for this to lurk, but it required a bit of an extreme case to make it
    obvious.
    
    Signed-off-by: Roberto Bergantinos Corpas <rbergant@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 030d794bf498 "SUNRPC: Use gssproxy upcall for server..."
    Tested-By: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc714706d48a37a2b509bc5c32a49fb4e4547019
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Jan 6 14:42:12 2020 -0800

    mwifiex: fix unbalanced locking in mwifiex_process_country_ie()
    
    commit 65b1aae0d9d5962faccc06bdb8e91a2a0b09451c upstream.
    
    We called rcu_read_lock(), so we need to call rcu_read_unlock() before
    we return.
    
    Fixes: 3d94a4a8373b ("mwifiex: fix possible heap overflow in mwifiex_process_country_ie()")
    Cc: stable@vger.kernel.org
    Cc: huangwen <huangwenabc@gmail.com>
    Cc: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Acked-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b981befd1d868ad47f478a180935cf5a17ec9e1
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Fri Jan 31 15:45:25 2020 +0200

    iwlwifi: don't throw error when trying to remove IGTK
    
    commit 197288d5ba8a5289f22d3aeb4fca3824bfd9b4af upstream.
    
    The IGTK keys are only removed by mac80211 after it has already
    removed the AP station.  This causes the driver to throw an error
    because mac80211 is trying to remove the IGTK when the station doesn't
    exist anymore.
    
    The firmware is aware that the station has been removed and can deal
    with it the next time we try to add an IGTK for a station, so we
    shouldn't try to remove the key if the station ID is
    IWL_MVM_INVALID_STA.  Do this by removing the check for mvm_sta before
    calling iwl_mvm_send_sta_igtk() and check return from that function
    gracefully if the station ID is invalid.
    
    Cc: stable@vger.kernel.org # 4.12+
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a41188bbe383e95b1a1bb4f69785a95a6bcebb86
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Oct 3 14:50:31 2019 -0600

    ARM: tegra: Enable PLLP bypass during Tegra124 LP1
    
    commit 1a3388d506bf5b45bb283e6a4c4706cfb4897333 upstream.
    
    For a little over a year, U-Boot has configured the flow controller to
    perform automatic RAM re-repair on off->on power transitions of the CPU
    rail[1]. This is mandatory for correct operation of Tegra124. However,
    RAM re-repair relies on certain clocks, which the kernel must enable and
    leave running. PLLP is one of those clocks. This clock is shut down
    during LP1 in order to save power. Enable bypass (which I believe routes
    osc_div_clk, essentially the crystal clock, to the PLL output) so that
    this clock signal toggles even though the PLL is not active. This is
    required so that LP1 power mode (system suspend) operates correctly.
    
    The bypass configuration must then be undone when resuming from LP1, so
    that all peripheral clocks run at the expected rate. Without this, many
    peripherals won't work correctly; for example, the UART baud rate would
    be incorrect.
    
    NVIDIA's downstream kernel code only does this if not compiled for
    Tegra30, so the added code is made conditional upon the chip ID.
    NVIDIA's downstream code makes this change conditional upon the active
    CPU cluster. The upstream kernel currently doesn't support cluster
    switching, so this patch doesn't test the active CPU cluster ID.
    
    [1] 3cc7942a4ae5 ARM: tegra: implement RAM repair
    
    Reported-by: Jonathan Hunter <jonathanh@nvidia.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 692f723b15b3dc113cb5fb6645d7577c5e25e799
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Jan 29 17:09:53 2020 +0000

    Btrfs: send, fix emission of invalid clone operations within the same file
    
    commit 9722b10148504c4153a74a9c89725af271e490fc upstream.
    
    When doing an incremental send and a file has extents shared with itself
    at different file offsets, it's possible for send to emit clone operations
    that will fail at the destination because the source range goes beyond the
    file's current size. This happens when the file size has increased in the
    send snapshot, there is a hole between the shared extents and both shared
    extents are at file offsets which are greater the file's size in the
    parent snapshot.
    
    Example:
    
      $ mkfs.btrfs -f /dev/sdb
      $ mount /dev/sdb /mnt/sdb
    
      $ xfs_io -f -c "pwrite -S 0xf1 0 64K" /mnt/sdb/foobar
      $ btrfs subvolume snapshot -r /mnt/sdb /mnt/sdb/base
      $ btrfs send -f /tmp/1.snap /mnt/sdb/base
    
      # Create a 320K extent at file offset 512K.
      $ xfs_io -c "pwrite -S 0xab 512K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0xcd 576K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0xef 640K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0x64 704K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0x73 768K 64K" /mnt/sdb/foobar
    
      # Clone part of that 320K extent into a lower file offset (192K).
      # This file offset is greater than the file's size in the parent
      # snapshot (64K). Also the clone range is a bit behind the offset of
      # the 320K extent so that we leave a hole between the shared extents.
      $ xfs_io -c "reflink /mnt/sdb/foobar 448K 192K 192K" /mnt/sdb/foobar
    
      $ btrfs subvolume snapshot -r /mnt/sdb /mnt/sdb/incr
      $ btrfs send -p /mnt/sdb/base -f /tmp/2.snap /mnt/sdb/incr
    
      $ mkfs.btrfs -f /dev/sdc
      $ mount /dev/sdc /mnt/sdc
    
      $ btrfs receive -f /tmp/1.snap /mnt/sdc
      $ btrfs receive -f /tmp/2.snap /mnt/sdc
      ERROR: failed to clone extents to foobar: Invalid argument
    
    The problem is that after processing the extent at file offset 256K, which
    refers to the first 128K of the 320K extent created by the buffered write
    operations, we have 'cur_inode_next_write_offset' set to 384K, which
    corresponds to the end offset of the partially shared extent (256K + 128K)
    and to the current file size in the receiver. Then when we process the
    extent at offset 512K, we do extent backreference iteration to figure out
    if we can clone the extent from some other inode or from the same inode,
    and we consider the extent at offset 256K of the same inode as a valid
    source for a clone operation, which is not correct because at that point
    the current file size in the receiver is 384K, which corresponds to the
    end of last processed extent (at file offset 256K), so using a clone
    source range from 256K to 256K + 320K is invalid because that goes past
    the current size of the file (384K) - this makes the receiver get an
    -EINVAL error when attempting the clone operation.
    
    So fix this by excluding clone sources that have a range that goes beyond
    the current file size in the receiver when iterating extent backreferences.
    
    A test case for fstests follows soon.
    
    Fixes: 11f2069c113e02 ("Btrfs: send, allow clone operations within the same file")
    CC: stable@vger.kernel.org # 5.5+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3db25bd287ebe4f79e8fe05713ce923fe3b769e2
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Mon Jan 27 11:59:26 2020 +0200

    btrfs: Correctly handle empty trees in find_first_clear_extent_bit
    
    commit 5750c37523a2c8cbb450b9ef31e21c2ba876b05e upstream.
    
    Raviu reported that running his regular fs_trim segfaulted with the
    following backtrace:
    
    [  237.525947] assertion failed: prev, in ../fs/btrfs/extent_io.c:1595
    [  237.525984] ------------[ cut here ]------------
    [  237.525985] kernel BUG at ../fs/btrfs/ctree.h:3117!
    [  237.525992] invalid opcode: 0000 [#1] SMP PTI
    [  237.525998] CPU: 4 PID: 4423 Comm: fstrim Tainted: G     U     OE     5.4.14-8-vanilla #1
    [  237.526001] Hardware name: ASUSTeK COMPUTER INC.
    [  237.526044] RIP: 0010:assfail.constprop.58+0x18/0x1a [btrfs]
    [  237.526079] Call Trace:
    [  237.526120]  find_first_clear_extent_bit+0x13d/0x150 [btrfs]
    [  237.526148]  btrfs_trim_fs+0x211/0x3f0 [btrfs]
    [  237.526184]  btrfs_ioctl_fitrim+0x103/0x170 [btrfs]
    [  237.526219]  btrfs_ioctl+0x129a/0x2ed0 [btrfs]
    [  237.526227]  ? filemap_map_pages+0x190/0x3d0
    [  237.526232]  ? do_filp_open+0xaf/0x110
    [  237.526238]  ? _copy_to_user+0x22/0x30
    [  237.526242]  ? cp_new_stat+0x150/0x180
    [  237.526247]  ? do_vfs_ioctl+0xa4/0x640
    [  237.526278]  ? btrfs_ioctl_get_supported_features+0x30/0x30 [btrfs]
    [  237.526283]  do_vfs_ioctl+0xa4/0x640
    [  237.526288]  ? __do_sys_newfstat+0x3c/0x60
    [  237.526292]  ksys_ioctl+0x70/0x80
    [  237.526297]  __x64_sys_ioctl+0x16/0x20
    [  237.526303]  do_syscall_64+0x5a/0x1c0
    [  237.526310]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    That was due to btrfs_fs_device::aloc_tree being empty. Initially I
    thought this wasn't possible and as a percaution have put the assert in
    find_first_clear_extent_bit. Turns out this is indeed possible and could
    happen when a file system with SINGLE data/metadata profile has a 2nd
    device added. Until balance is run or a new chunk is allocated on this
    device it will be completely empty.
    
    In this case find_first_clear_extent_bit should return the full range
    [0, -1ULL] and let the caller handle this i.e for trim the end will be
    capped at the size of actual device.
    
    Link: https://lore.kernel.org/linux-btrfs/izW2WNyvy1dEDweBICizKnd2KDwDiDyY2EYQr4YCwk7pkuIpthx-JRn65MPBde00ND6V0_Lh8mW0kZwzDiLDv25pUYWxkskWNJnVP0kgdMA=@protonmail.com/
    Fixes: 45bfcfc168f8 ("btrfs: Implement find_first_clear_extent_bit")
    CC: stable@vger.kernel.org # 5.2+
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e521f6d52f013be46ecc505a7338fa6433658c36
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Jan 23 15:33:02 2020 -0500

    btrfs: flush write bio if we loop in extent_write_cache_pages
    
    commit 42ffb0bf584ae5b6b38f72259af1e0ee417ac77f upstream.
    
    There exists a deadlock with range_cyclic that has existed forever.  If
    we loop around with a bio already built we could deadlock with a writer
    who has the page locked that we're attempting to write but is waiting on
    a page in our bio to be written out.  The task traces are as follows
    
      PID: 1329874  TASK: ffff889ebcdf3800  CPU: 33  COMMAND: "kworker/u113:5"
       #0 [ffffc900297bb658] __schedule at ffffffff81a4c33f
       #1 [ffffc900297bb6e0] schedule at ffffffff81a4c6e3
       #2 [ffffc900297bb6f8] io_schedule at ffffffff81a4ca42
       #3 [ffffc900297bb708] __lock_page at ffffffff811f145b
       #4 [ffffc900297bb798] __process_pages_contig at ffffffff814bc502
       #5 [ffffc900297bb8c8] lock_delalloc_pages at ffffffff814bc684
       #6 [ffffc900297bb900] find_lock_delalloc_range at ffffffff814be9ff
       #7 [ffffc900297bb9a0] writepage_delalloc at ffffffff814bebd0
       #8 [ffffc900297bba18] __extent_writepage at ffffffff814bfbf2
       #9 [ffffc900297bba98] extent_write_cache_pages at ffffffff814bffbd
    
      PID: 2167901  TASK: ffff889dc6a59c00  CPU: 14  COMMAND:
      "aio-dio-invalid"
       #0 [ffffc9003b50bb18] __schedule at ffffffff81a4c33f
       #1 [ffffc9003b50bba0] schedule at ffffffff81a4c6e3
       #2 [ffffc9003b50bbb8] io_schedule at ffffffff81a4ca42
       #3 [ffffc9003b50bbc8] wait_on_page_bit at ffffffff811f24d6
       #4 [ffffc9003b50bc60] prepare_pages at ffffffff814b05a7
       #5 [ffffc9003b50bcd8] btrfs_buffered_write at ffffffff814b1359
       #6 [ffffc9003b50bdb0] btrfs_file_write_iter at ffffffff814b5933
       #7 [ffffc9003b50be38] new_sync_write at ffffffff8128f6a8
       #8 [ffffc9003b50bec8] vfs_write at ffffffff81292b9d
       #9 [ffffc9003b50bf00] ksys_pwrite64 at ffffffff81293032
    
    I used drgn to find the respective pages we were stuck on
    
    page_entry.page 0xffffea00fbfc7500 index 8148 bit 15 pid 2167901
    page_entry.page 0xffffea00f9bb7400 index 7680 bit 0 pid 1329874
    
    As you can see the kworker is waiting for bit 0 (PG_locked) on index
    7680, and aio-dio-invalid is waiting for bit 15 (PG_writeback) on index
    8148.  aio-dio-invalid has 7680, and the kworker epd looks like the
    following
    
      crash> struct extent_page_data ffffc900297bbbb0
      struct extent_page_data {
        bio = 0xffff889f747ed830,
        tree = 0xffff889eed6ba448,
        extent_locked = 0,
        sync_io = 0
      }
    
    Probably worth mentioning as well that it waits for writeback of the
    page to complete while holding a lock on it (at prepare_pages()).
    
    Using drgn I walked the bio pages looking for page
    0xffffea00fbfc7500 which is the one we're waiting for writeback on
    
      bio = Object(prog, 'struct bio', address=0xffff889f747ed830)
      for i in range(0, bio.bi_vcnt.value_()):
          bv = bio.bi_io_vec[i]
          if bv.bv_page.value_() == 0xffffea00fbfc7500:
              print("FOUND IT")
    
    which validated what I suspected.
    
    The fix for this is simple, flush the epd before we loop back around to
    the beginning of the file during writeout.
    
    Fixes: b293f02e1423 ("Btrfs: Add writepages support")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 950057618085eaa1a71680d815d6c8bb2f4c31fb
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Jan 22 12:23:20 2020 +0000

    Btrfs: fix race between adding and putting tree mod seq elements and nodes
    
    commit 7227ff4de55d931bbdc156c8ef0ce4f100c78a5b upstream.
    
    There is a race between adding and removing elements to the tree mod log
    list and rbtree that can lead to use-after-free problems.
    
    Consider the following example that explains how/why the problems happens:
    
    1) Task A has mod log element with sequence number 200. It currently is
       the only element in the mod log list;
    
    2) Task A calls btrfs_put_tree_mod_seq() because it no longer needs to
       access the tree mod log. When it enters the function, it initializes
       'min_seq' to (u64)-1. Then it acquires the lock 'tree_mod_seq_lock'
       before checking if there are other elements in the mod seq list.
       Since the list it empty, 'min_seq' remains set to (u64)-1. Then it
       unlocks the lock 'tree_mod_seq_lock';
    
    3) Before task A acquires the lock 'tree_mod_log_lock', task B adds
       itself to the mod seq list through btrfs_get_tree_mod_seq() and gets a
       sequence number of 201;
    
    4) Some other task, name it task C, modifies a btree and because there
       elements in the mod seq list, it adds a tree mod elem to the tree
       mod log rbtree. That node added to the mod log rbtree is assigned
       a sequence number of 202;
    
    5) Task B, which is doing fiemap and resolving indirect back references,
       calls btrfs get_old_root(), with 'time_seq' == 201, which in turn
       calls tree_mod_log_search() - the search returns the mod log node
       from the rbtree with sequence number 202, created by task C;
    
    6) Task A now acquires the lock 'tree_mod_log_lock', starts iterating
       the mod log rbtree and finds the node with sequence number 202. Since
       202 is less than the previously computed 'min_seq', (u64)-1, it
       removes the node and frees it;
    
    7) Task B still has a pointer to the node with sequence number 202, and
       it dereferences the pointer itself and through the call to
       __tree_mod_log_rewind(), resulting in a use-after-free problem.
    
    This issue can be triggered sporadically with the test case generic/561
    from fstests, and it happens more frequently with a higher number of
    duperemove processes. When it happens to me, it either freezes the VM or
    it produces a trace like the following before crashing:
    
      [ 1245.321140] general protection fault: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      [ 1245.321200] CPU: 1 PID: 26997 Comm: pool Not tainted 5.5.0-rc6-btrfs-next-52 #1
      [ 1245.321235] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014
      [ 1245.321287] RIP: 0010:rb_next+0x16/0x50
      [ 1245.321307] Code: ....
      [ 1245.321372] RSP: 0018:ffffa151c4d039b0 EFLAGS: 00010202
      [ 1245.321388] RAX: 6b6b6b6b6b6b6b6b RBX: ffff8ae221363c80 RCX: 6b6b6b6b6b6b6b6b
      [ 1245.321409] RDX: 0000000000000001 RSI: 0000000000000000 RDI: ffff8ae221363c80
      [ 1245.321439] RBP: ffff8ae20fcc4688 R08: 0000000000000002 R09: 0000000000000000
      [ 1245.321475] R10: ffff8ae20b120910 R11: 00000000243f8bb1 R12: 0000000000000038
      [ 1245.321506] R13: ffff8ae221363c80 R14: 000000000000075f R15: ffff8ae223f762b8
      [ 1245.321539] FS:  00007fdee1ec7700(0000) GS:ffff8ae236c80000(0000) knlGS:0000000000000000
      [ 1245.321591] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [ 1245.321614] CR2: 00007fded4030c48 CR3: 000000021da16003 CR4: 00000000003606e0
      [ 1245.321642] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [ 1245.321668] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [ 1245.321706] Call Trace:
      [ 1245.321798]  __tree_mod_log_rewind+0xbf/0x280 [btrfs]
      [ 1245.321841]  btrfs_search_old_slot+0x105/0xd00 [btrfs]
      [ 1245.321877]  resolve_indirect_refs+0x1eb/0xc60 [btrfs]
      [ 1245.321912]  find_parent_nodes+0x3dc/0x11b0 [btrfs]
      [ 1245.321947]  btrfs_check_shared+0x115/0x1c0 [btrfs]
      [ 1245.321980]  ? extent_fiemap+0x59d/0x6d0 [btrfs]
      [ 1245.322029]  extent_fiemap+0x59d/0x6d0 [btrfs]
      [ 1245.322066]  do_vfs_ioctl+0x45a/0x750
      [ 1245.322081]  ksys_ioctl+0x70/0x80
      [ 1245.322092]  ? trace_hardirqs_off_thunk+0x1a/0x1c
      [ 1245.322113]  __x64_sys_ioctl+0x16/0x20
      [ 1245.322126]  do_syscall_64+0x5c/0x280
      [ 1245.322139]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [ 1245.322155] RIP: 0033:0x7fdee3942dd7
      [ 1245.322177] Code: ....
      [ 1245.322258] RSP: 002b:00007fdee1ec6c88 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [ 1245.322294] RAX: ffffffffffffffda RBX: 00007fded40210d8 RCX: 00007fdee3942dd7
      [ 1245.322314] RDX: 00007fded40210d8 RSI: 00000000c020660b RDI: 0000000000000004
      [ 1245.322337] RBP: 0000562aa89e7510 R08: 0000000000000000 R09: 00007fdee1ec6d44
      [ 1245.322369] R10: 0000000000000073 R11: 0000000000000246 R12: 00007fdee1ec6d48
      [ 1245.322390] R13: 00007fdee1ec6d40 R14: 00007fded40210d0 R15: 00007fdee1ec6d50
      [ 1245.322423] Modules linked in: ....
      [ 1245.323443] ---[ end trace 01de1e9ec5dff3cd ]---
    
    Fix this by ensuring that btrfs_put_tree_mod_seq() computes the minimum
    sequence number and iterates the rbtree while holding the lock
    'tree_mod_log_lock' in write mode. Also get rid of the 'tree_mod_seq_lock'
    lock, since it is now redundant.
    
    Fixes: bd989ba359f2ac ("Btrfs: add tree modification log functions")
    Fixes: 097b8a7c9e48e2 ("Btrfs: join tree mod log code with the code holding back delayed refs")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87c3a7a5014a733d5744b412147bc08ae6f3ab58
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Jan 21 09:17:06 2020 -0500

    btrfs: free block groups after free'ing fs trees
    
    commit 4e19443da1941050b346f8fc4c368aa68413bc88 upstream.
    
    Sometimes when running generic/475 we would trip the
    WARN_ON(cache->reserved) check when free'ing the block groups on umount.
    This is because sometimes we don't commit the transaction because of IO
    errors and thus do not cleanup the tree logs until at umount time.
    
    These blocks are still reserved until they are cleaned up, but they
    aren't cleaned up until _after_ we do the free block groups work.  Fix
    this by moving the free after free'ing the fs roots, that way all of the
    tree logs are cleaned up and we have a properly cleaned fs.  A bunch of
    loops of generic/475 confirmed this fixes the problem.
    
    CC: stable@vger.kernel.org # 4.9+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6e7ae66266d8c0486246940708d39ef826c53bc
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jan 17 09:12:45 2020 -0500

    btrfs: drop log root for dropped roots
    
    commit 889bfa39086e86b52fcfaa04d72c95eaeb12f9a5 upstream.
    
    If we fsync on a subvolume and create a log root for that volume, and
    then later delete that subvolume we'll never clean up its log root.  Fix
    this by making switch_commit_roots free the log for any dropped roots we
    encounter.  The extra churn is because we need a btrfs_trans_handle, not
    the btrfs_transaction.
    
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76e3d3650d8f6389d212f98d1005b1b6927e2029
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jan 17 08:57:51 2020 -0500

    btrfs: set trans->drity in btrfs_commit_transaction
    
    commit d62b23c94952e78211a383b7d90ef0afbd9a3717 upstream.
    
    If we abort a transaction we have the following sequence
    
    if (!trans->dirty && list_empty(&trans->new_bgs))
            return;
    WRITE_ONCE(trans->transaction->aborted, err);
    
    The idea being if we didn't modify anything with our trans handle then
    we don't really need to abort the whole transaction, maybe the other
    trans handles are fine and we can carry on.
    
    However in the case of create_snapshot we add a pending_snapshot object
    to our transaction and then commit the transaction.  We don't actually
    modify anything.  sync() behaves the same way, attach to an existing
    transaction and commit it.  This means that if we have an IO error in
    the right places we could abort the committing transaction with our
    trans->dirty being not set and thus not set transaction->aborted.
    
    This is a problem because in the create_snapshot() case we depend on
    pending->error being set to something, or btrfs_commit_transaction
    returning an error.
    
    If we are not the trans handle that gets to commit the transaction, and
    we're waiting on the commit to happen we get our return value from
    cur_trans->aborted.  If this was not set to anything because sync() hit
    an error in the transaction commit before it could modify anything then
    cur_trans->aborted would be 0.  Thus we'd return 0 from
    btrfs_commit_transaction() in create_snapshot.
    
    This is a problem because we then try to do things with
    pending_snapshot->snap, which will be NULL because we didn't create the
    snapshot, and then we'll get a NULL pointer dereference like the
    following
    
    "BUG: kernel NULL pointer dereference, address: 00000000000001f0"
    RIP: 0010:btrfs_orphan_cleanup+0x2d/0x330
    Call Trace:
     ? btrfs_mksubvol.isra.31+0x3f2/0x510
     btrfs_mksubvol.isra.31+0x4bc/0x510
     ? __sb_start_write+0xfa/0x200
     ? mnt_want_write_file+0x24/0x50
     btrfs_ioctl_snap_create_transid+0x16c/0x1a0
     btrfs_ioctl_snap_create_v2+0x11e/0x1a0
     btrfs_ioctl+0x1534/0x2c10
     ? free_debug_processing+0x262/0x2a3
     do_vfs_ioctl+0xa6/0x6b0
     ? do_sys_open+0x188/0x220
     ? syscall_trace_enter+0x1f8/0x330
     ksys_ioctl+0x60/0x90
     __x64_sys_ioctl+0x16/0x20
     do_syscall_64+0x4a/0x1b0
    
    In order to fix this we need to make sure anybody who calls
    commit_transaction has trans->dirty set so that they properly set the
    trans->transaction->aborted value properly so any waiters know bad
    things happened.
    
    This was found while I was running generic/475 with my modified
    fsstress, it reproduced within a few runs.  I ran with this patch all
    night and didn't see the problem again.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7691d8641c712840d8b8bc28940de7e972d2543f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Jan 15 13:21:35 2020 +0000

    Btrfs: fix infinite loop during fsync after rename operations
    
    commit b5e4ff9d465da1233a2d9a47ebce487c70d8f4ab upstream.
    
    Recently fsstress (from fstests) sporadically started to trigger an
    infinite loop during fsync operations. This turned out to be because
    support for the rename exchange and whiteout operations was added to
    fsstress in fstests. These operations, unlike any others in fsstress,
    cause file names to be reused, whence triggering this issue. However
    it's not necessary to use rename exchange and rename whiteout operations
    trigger this issue, simple rename operations and file creations are
    enough to trigger the issue.
    
    The issue boils down to when we are logging inodes that conflict (that
    had the name of any inode we need to log during the fsync operation), we
    keep logging them even if they were already logged before, and after
    that we check if there's any other inode that conflicts with them and
    then add it again to the list of inodes to log. Skipping already logged
    inodes fixes the issue.
    
    Consider the following example:
    
      $ mkfs.btrfs -f /dev/sdb
      $ mount /dev/sdb /mnt
    
      $ mkdir /mnt/testdir                           # inode 257
    
      $ touch /mnt/testdir/zz                        # inode 258
      $ ln /mnt/testdir/zz /mnt/testdir/zz_link
    
      $ touch /mnt/testdir/a                         # inode 259
    
      $ sync
    
      # The following 3 renames achieve the same result as a rename exchange
      # operation (<rename_exchange> /mnt/testdir/zz_link to /mnt/testdir/a).
    
      $ mv /mnt/testdir/a /mnt/testdir/a/tmp
      $ mv /mnt/testdir/zz_link /mnt/testdir/a
      $ mv /mnt/testdir/a/tmp /mnt/testdir/zz_link
    
      # The following rename and file creation give the same result as a
      # rename whiteout operation (<rename_whiteout> zz to a2).
    
      $ mv /mnt/testdir/zz /mnt/testdir/a2
      $ touch /mnt/testdir/zz                        # inode 260
    
      $ xfs_io -c fsync /mnt/testdir/zz
        --> results in the infinite loop
    
    The following steps happen:
    
    1) When logging inode 260, we find that its reference named "zz" was
       used by inode 258 in the previous transaction (through the commit
       root), so inode 258 is added to the list of conflicting indoes that
       need to be logged;
    
    2) After logging inode 258, we find that its reference named "a" was
       used by inode 259 in the previous transaction, and therefore we add
       inode 259 to the list of conflicting inodes to be logged;
    
    3) After logging inode 259, we find that its reference named "zz_link"
       was used by inode 258 in the previous transaction - we add inode 258
       to the list of conflicting inodes to log, again - we had already
       logged it before at step 3. After logging it again, we find again
       that inode 259 conflicts with him, and we add again 259 to the list,
       etc - we end up repeating all the previous steps.
    
    So fix this by skipping logging of conflicting inodes that were already
    logged.
    
    Fixes: 6b5fc433a7ad67 ("Btrfs: fix fsync after succession of renames of different files")
    CC: stable@vger.kernel.org # 5.1+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 312f65d29dec2d61c2d35151687e43c00eb0e6aa
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Dec 16 18:26:56 2019 +0000

    Btrfs: make deduplication with range including the last block work
    
    commit 831d2fa25ab8e27592b1b0268dae6f2dfaf7cc43 upstream.
    
    Since btrfs was migrated to use the generic VFS helpers for clone and
    deduplication, it stopped allowing for the last block of a file to be
    deduplicated when the source file size is not sector size aligned (when
    eof is somewhere in the middle of the last block). There are two reasons
    for that:
    
    1) The generic code always rounds down, to a multiple of the block size,
       the range's length for deduplications. This means we end up never
       deduplicating the last block when the eof is not block size aligned,
       even for the safe case where the destination range's end offset matches
       the destination file's size. That rounding down operation is done at
       generic_remap_check_len();
    
    2) Because of that, the btrfs specific code does not expect anymore any
       non-aligned range length's for deduplication and therefore does not
       work if such nona-aligned length is given.
    
    This patch addresses that second part, and it depends on a patch that
    fixes generic_remap_check_len(), in the VFS, which was submitted ealier
    and has the following subject:
    
      "fs: allow deduplication of eof block into the end of the destination file"
    
    These two patches address reports from users that started seeing lower
    deduplication rates due to the last block never being deduplicated when
    the file size is not aligned to the filesystem's block size.
    
    Link: https://lore.kernel.org/linux-btrfs/2019-1576167349.500456@svIo.N5dq.dFFD/
    CC: stable@vger.kernel.org # 5.1+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e867056462035d826d65d744e13ffd046a5a957c
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 19 12:07:33 2019 +0000

    Btrfs: fix missing hole after hole punching and fsync when using NO_HOLES
    
    commit 0e56315ca147b3e60c7bf240233a301d3c7fb508 upstream.
    
    When using the NO_HOLES feature, if we punch a hole into a file and then
    fsync it, there are cases where a subsequent fsync will miss the fact that
    a hole was punched, resulting in the holes not existing after replaying
    the log tree.
    
    Essentially these cases all imply that, tree-log.c:copy_items(), is not
    invoked for the leafs that delimit holes, because nothing changed those
    leafs in the current transaction. And it's precisely copy_items() where
    we currenly detect and log holes, which works as long as the holes are
    between file extent items in the input leaf or between the beginning of
    input leaf and the previous leaf or between the last item in the leaf
    and the next leaf.
    
    First example where we miss a hole:
    
      *) The extent items of the inode span multiple leafs;
    
      *) The punched hole covers a range that affects only the extent items of
         the first leaf;
    
      *) The fsync operation is done in full mode (BTRFS_INODE_NEEDS_FULL_SYNC
         is set in the inode's runtime flags).
    
      That results in the hole not existing after replaying the log tree.
    
      For example, if the fs/subvolume tree has the following layout for a
      particular inode:
    
          Leaf N, generation 10:
    
          [ ... INODE_ITEM INODE_REF EXTENT_ITEM (0 64K) EXTENT_ITEM (64K 128K) ]
    
          Leaf N + 1, generation 10:
    
          [ EXTENT_ITEM (128K 64K) ... ]
    
      If at transaction 11 we punch a hole coverting the range [0, 128K[, we end
      up dropping the two extent items from leaf N, but we don't touch the other
      leaf, so we end up in the following state:
    
          Leaf N, generation 11:
    
          [ ... INODE_ITEM INODE_REF ]
    
          Leaf N + 1, generation 10:
    
          [ EXTENT_ITEM (128K 64K) ... ]
    
      A full fsync after punching the hole will only process leaf N because it
      was modified in the current transaction, but not leaf N + 1, since it
      was not modified in the current transaction (generation 10 and not 11).
      As a result the fsync will not log any holes, because it didn't process
      any leaf with extent items.
    
    Second example where we will miss a hole:
    
      *) An inode as its items spanning 5 (or more) leafs;
    
      *) A hole is punched and it covers only the extents items of the 3rd
         leaf. This resulsts in deleting the entire leaf and not touching any
         of the other leafs.
    
      So the only leaf that is modified in the current transaction, when
      punching the hole, is the first leaf, which contains the inode item.
      During the full fsync, the only leaf that is passed to copy_items()
      is that first leaf, and that's not enough for the hole detection
      code in copy_items() to determine there's a hole between the last
      file extent item in the 2nd leaf and the first file extent item in
      the 3rd leaf (which was the 4th leaf before punching the hole).
    
    Fix this by scanning all leafs and punch holes as necessary when doing a
    full fsync (less common than a non-full fsync) when the NO_HOLES feature
    is enabled. The lack of explicit file extent items to mark holes makes it
    necessary to scan existing extents to determine if holes exist.
    
    A test case for fstests follows soon.
    
    Fixes: 16e7549f045d33 ("Btrfs: incompatible format change to remove hole extents")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d30f7b3fa0dc6f3272886f7dbc55ede1ab3b136e
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 23 20:12:34 2020 -0800

    ext4: fix race conditions in ->d_compare() and ->d_hash()
    
    commit ec772f01307a2c06ebf6cdd221e6b518a71ddae7 upstream.
    
    Since ->d_compare() and ->d_hash() can be called in RCU-walk mode,
    ->d_parent and ->d_inode can be concurrently modified, and in
    particular, ->d_inode may be changed to NULL.  For ext4_d_hash() this
    resulted in a reproducible NULL dereference if a lookup is done in a
    directory being deleted, e.g. with:
    
            int main()
            {
                    if (fork()) {
                            for (;;) {
                                    mkdir("subdir", 0700);
                                    rmdir("subdir");
                            }
                    } else {
                            for (;;)
                                    access("subdir/file", 0);
                    }
            }
    
    ... or by running the 't_encrypted_d_revalidate' program from xfstests.
    Both repros work in any directory on a filesystem with the encoding
    feature, even if the directory doesn't actually have the casefold flag.
    
    I couldn't reproduce a crash in ext4_d_compare(), but it appears that a
    similar crash is possible there.
    
    Fix these bugs by reading ->d_parent and ->d_inode using READ_ONCE() and
    falling back to the case sensitive behavior if the inode is NULL.
    
    Reported-by: Al Viro <viro@zeniv.linux.org.uk>
    Fixes: b886ee3e778e ("ext4: Support case-insensitive file name lookups")
    Cc: <stable@vger.kernel.org> # v5.2+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20200124041234.159740-1-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d32f686fe12f7fd069e6db3c6222a245b9a42507
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Dec 31 12:11:49 2019 -0600

    ext4: fix deadlock allocating crypto bounce page from mempool
    
    commit 547c556f4db7c09447ecf5f833ab6aaae0c5ab58 upstream.
    
    ext4_writepages() on an encrypted file has to encrypt the data, but it
    can't modify the pagecache pages in-place, so it encrypts the data into
    bounce pages and writes those instead.  All bounce pages are allocated
    from a mempool using GFP_NOFS.
    
    This is not correct use of a mempool, and it can deadlock.  This is
    because GFP_NOFS includes __GFP_DIRECT_RECLAIM, which enables the "never
    fail" mode for mempool_alloc() where a failed allocation will fall back
    to waiting for one of the preallocated elements in the pool.
    
    But since this mode is used for all a bio's pages and not just the
    first, it can deadlock waiting for pages already in the bio to be freed.
    
    This deadlock can be reproduced by patching mempool_alloc() to pretend
    that pool->alloc() always fails (so that it always falls back to the
    preallocations), and then creating an encrypted file of size > 128 KiB.
    
    Fix it by only using GFP_NOFS for the first page in the bio.  For
    subsequent pages just use GFP_NOWAIT, and if any of those fail, just
    submit the bio and start a new one.
    
    This will need to be fixed in f2fs too, but that's less straightforward.
    
    Fixes: c9af28fdd449 ("ext4 crypto: don't let data integrity writebacks fail with ENOMEM")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20191231181149.47619-1-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90da9792f651ed899645ee6afca935fd216ff153
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 12:05:10 2020 +0300

    jbd2_seq_info_next should increase position index
    
    commit 1a8e9cf40c9a6a2e40b1e924b13ed303aeea4418 upstream.
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    Script below generates endless output
     $ q=;while read -r r;do echo "$((++q)) $r";done </proc/fs/jbd2/DEV/info
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    
    Fixes: 1f4aace60b0e ("fs/seq_file.c: simplify seq_file iteration code and interface")
    Cc: stable@kernel.org
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/d13805e5-695e-8ac3-b678-26ca2313629f@virtuozzo.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c864d56cd580f2e1925ad7d2367264b3a13b2fc9
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Mon Jan 6 13:18:03 2020 -0500

    nfsd: fix filecache lookup
    
    commit 28c7d86bb6172ffbb1a1237c6388e77f9fe5f181 upstream.
    
    If the lookup keeps finding a nfsd_file with an unhashed open file,
    then retry once only.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org
    Fixes: 65294c1f2c5e "nfsd: add a new struct file caching facility to nfsd"
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f977c61c234f8eadcef349ce68a995dbd23f2a2e
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Sun Feb 2 17:53:54 2020 -0500

    NFS: Directory page cache pages need to be locked when read
    
    commit 114de38225d9b300f027e2aec9afbb6e0def154b upstream.
    
    When a NFS directory page cache page is removed from the page cache,
    its contents are freed through a call to nfs_readdir_clear_array().
    To prevent the removal of the page cache entry until after we've
    finished reading it, we must take the page lock.
    
    Fixes: 11de3b11e08c ("NFS: Fix a memory leak in nfs_readdir")
    Cc: stable@vger.kernel.org # v2.6.37+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c19c882c6d8d10521659e020e8b4e83aebbfb34
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Sun Feb 2 17:53:53 2020 -0500

    NFS: Fix memory leaks and corruption in readdir
    
    commit 4b310319c6a8ce708f1033d57145e2aa027a883c upstream.
    
    nfs_readdir_xdr_to_array() must not exit without having initialised
    the array, so that the page cache deletion routines can safely
    call nfs_readdir_clear_array().
    Furthermore, we should ensure that if we exit nfs_readdir_filler()
    with an error, we free up any page contents to prevent a leak
    if we try to fill the page again.
    
    Fixes: 11de3b11e08c ("NFS: Fix a memory leak in nfs_readdir")
    Cc: stable@vger.kernel.org # v2.6.37+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 957a727a129503ceeca974003c9268b1d9ba686f
Author: Arun Easi <aeasi@marvell.com>
Date:   Thu Jan 23 20:50:14 2020 -0800

    scsi: qla2xxx: Fix unbound NVME response length
    
    commit 00fe717ee1ea3c2979db4f94b1533c57aed8dea9 upstream.
    
    On certain cases when response length is less than 32, NVME response data
    is supplied inline in IOCB. This is indicated by some combination of state
    flags. There was an instance when a high, and incorrect, response length
    was indicated causing driver to overrun buffers. Fix this by checking and
    limiting the response payload length.
    
    Fixes: 7401bc18d1ee3 ("scsi: qla2xxx: Add FC-NVMe command handling")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200124045014.23554-1-hmadhani@marvell.com
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a77e99424c91999d212a3681479866b2a1e28e5
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Feb 7 22:15:46 2020 +1100

    powerpc/futex: Fix incorrect user access blocking
    
    commit 9dc086f1e9ef39dd823bd27954b884b2062f9e70 upstream.
    
    The early versions of our kernel user access prevention (KUAP) were
    written by Russell and Christophe, and didn't have separate
    read/write access.
    
    At some point I picked up the series and added the read/write access,
    but I failed to update the usages in futex.h to correctly allow read
    and write.
    
    However we didn't notice because of another bug which was causing the
    low-level code to always enable read and write. That bug was fixed
    recently in commit 1d8f739b07bd ("powerpc/kuap: Fix set direction in
    allow/prevent_user_access()").
    
    futex_atomic_cmpxchg_inatomic() is passed the user address as %3 and
    does:
    
      1:     lwarx   %1,  0, %3
             cmpw    0,  %1, %4
             bne-    3f
      2:     stwcx.  %5,  0, %3
    
    Which clearly loads and stores from/to %3. The logic in
    arch_futex_atomic_op_inuser() is similar, so fix both of them to use
    allow_read_write_user().
    
    Without this fix, and with PPC_KUAP_DEBUG=y, we see eg:
    
      Bug: Read fault blocked by AMR!
      WARNING: CPU: 94 PID: 149215 at arch/powerpc/include/asm/book3s/64/kup-radix.h:126 __do_page_fault+0x600/0xf30
      CPU: 94 PID: 149215 Comm: futex_requeue_p Tainted: G        W         5.5.0-rc7-gcc9x-g4c25df5640ae #1
      ...
      NIP [c000000000070680] __do_page_fault+0x600/0xf30
      LR [c00000000007067c] __do_page_fault+0x5fc/0xf30
      Call Trace:
      [c00020138e5637e0] [c00000000007067c] __do_page_fault+0x5fc/0xf30 (unreliable)
      [c00020138e5638c0] [c00000000000ada8] handle_page_fault+0x10/0x30
      --- interrupt: 301 at cmpxchg_futex_value_locked+0x68/0xd0
          LR = futex_lock_pi_atomic+0xe0/0x1f0
      [c00020138e563bc0] [c000000000217b50] futex_lock_pi_atomic+0x80/0x1f0 (unreliable)
      [c00020138e563c30] [c00000000021b668] futex_requeue+0x438/0xb60
      [c00020138e563d60] [c00000000021c6cc] do_futex+0x1ec/0x2b0
      [c00020138e563d90] [c00000000021c8b8] sys_futex+0x128/0x200
      [c00020138e563e20] [c00000000000b7ac] system_call+0x5c/0x68
    
    Fixes: de78a9c42a79 ("powerpc: Add a framework for Kernel Userspace Access Protection")
    Cc: stable@vger.kernel.org # v5.2+
    Reported-by: syzbot+e808452bad7c375cbee6@syzkaller-ppc64.appspotmail.com
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Link: https://lore.kernel.org/r/20200207122145.11928-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15462ff671f0c8a2628c4121fe7e29a91e4d804c
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Tue Dec 10 00:21:44 2019 +0800

    crypto: picoxcell - adjust the position of tasklet_init and fix missed tasklet_kill
    
    commit 7f8c36fe9be46862c4f3c5302f769378028a34fa upstream.
    
    Since tasklet is needed to be initialized before registering IRQ
    handler, adjust the position of tasklet_init to fix the wrong order.
    
    Besides, to fix the missed tasklet_kill, this patch adds a helper
    function and uses devm_add_action to kill the tasklet automatically.
    
    Fixes: ce92136843cb ("crypto: picoxcell - add support for the picoxcell crypto engines")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e92a111263b60a601420a69cb42bc1042e8ceb9a
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Sat Dec 7 22:15:15 2019 +0800

    crypto: api - Fix race condition in crypto_spawn_alg
    
    commit 73669cc556462f4e50376538d77ee312142e8a8a upstream.
    
    The function crypto_spawn_alg is racy because it drops the lock
    before shooting the dying algorithm.  The algorithm could disappear
    altogether before we shoot it.
    
    This patch fixes it by moving the shooting into the locked section.
    
    Fixes: 6bfd48096ff8 ("[CRYPTO] api: Added spawns")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d8d9b2dd4eb26a091861007e49a74705385f6f8
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Thu Dec 5 09:54:01 2019 +0000

    crypto: atmel-aes - Fix counter overflow in CTR mode
    
    commit 781a08d9740afa73357f1a60d45d7c93d7cca2dd upstream.
    
    32 bit counter is not supported by neither of our AES IPs, all implement
    a 16 bit block counter. Drop the 32 bit block counter logic.
    
    Fixes: fcac83656a3e ("crypto: atmel-aes - fix the counter overflow in CTR mode")
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c15454967b360f375f02f354daf3fff440daef0b
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Nov 29 10:15:56 2019 -0800

    crypto: hisilicon - select CRYPTO_SKCIPHER, not CRYPTO_BLKCIPHER
    
    commit 8e8c778d9ed4fdc5a9af108c7023bfb640a673f2 upstream.
    
    Another instance of CRYPTO_BLKCIPHER made it in just after it was
    renamed to CRYPTO_SKCIPHER.  Fix it.
    
    Fixes: 416d82204df4 ("crypto: hisilicon - add HiSilicon SEC V2 driver")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5895fd33b9822ea90fc3001a22508fd7ef1639e4
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Nov 29 16:40:24 2019 +0800

    crypto: pcrypt - Do not clear MAY_SLEEP flag in original request
    
    commit e8d998264bffade3cfe0536559f712ab9058d654 upstream.
    
    We should not be modifying the original request's MAY_SLEEP flag
    upon completion.  It makes no sense to do so anyway.
    
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Fixes: 5068c7a883d1 ("crypto: pcrypt - Add pcrypt crypto...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8409876814e2e97789d08b9fbaebc6f936a36c
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Nov 28 13:55:31 2019 +0100

    crypto: arm64/ghash-neon - bump priority to 150
    
    commit 5441c6507bc84166e9227e9370a56c57ba13794a upstream.
    
    The SIMD based GHASH implementation for arm64 is typically much faster
    than the generic one, and doesn't use any lookup tables, so it is
    clearly preferred when available. So bump the priority to reflect that.
    
    Fixes: 5a22b198cd527447 ("crypto: arm64/ghash - register PMULL variants ...")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8f0e0b71e1c0ece2ce69f54ccf0d797802dae3b
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Nov 27 13:01:36 2019 +0100

    crypto: ccp - set max RSA modulus size for v3 platform devices as well
    
    commit 11548f5a5747813ff84bed6f2ea01100053b0d8d upstream.
    
    AMD Seattle incorporates a non-PCI version of the v3 CCP crypto
    accelerator, and this version was left behind when the maximum
    RSA modulus size was parameterized in order to support v5 hardware
    which supports larger moduli than v3 hardware does. Due to this
    oversight, RSA acceleration no longer works at all on these systems.
    
    Fix this by setting the .rsamax property to the appropriate value
    for v3 platform hardware.
    
    Fixes: e28c190db66830c0 ("csrypto: ccp - Expand RSA support for a v5 ccp")
    Cc: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Acked-by: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f901a39682b10baea42e4635f94859f829e78e0f
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Tue Nov 19 13:42:57 2019 +0800

    crypto: hisilicon - Use the offset fields in sqe to avoid need to split scatterlists
    
    commit 484a897ffa3005f16cd9a31efd747bcf8155826f upstream.
    
    We can configure sgl offset fields in ZIP sqe to let ZIP engine read/write
    sgl data with skipped data. Hence no need to splite the sgl.
    
    Fixes: 62c455ca853e (crypto: hisilicon - add HiSilicon ZIP accelerator support)
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Zhou Wang <wangzhou1@hisilicon.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec650dd304b6abf476195ca2e47d1d376a53270e
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Tue Nov 19 13:42:56 2019 +0800

    crypto: hisilicon - Fix issue with wrong number of sg elements after dma map
    
    commit 8debacd60c69beab80736d4af4feca47c2e2bd9e upstream.
    
    We fill the hardware scatter gather list assuming it will need the same
    number of elements at the original scatterlist. If an IOMMU is involved,
    then it may well need fewer. The return value of dma_map_sg tells us how
    many.
    
    Probably never caused visible problems as the hardware won't get to
    the elements that are incorrect before it finds enough space.
    
    Fixes: dfed0098ab91 (crypto: hisilicon - add hardware SGL support)
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Zhou Wang <wangzhou1@hisilicon.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0601cad84b5d11a22354600edd711c6e13df686
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed Dec 11 10:50:11 2019 +0800

    crypto: api - fix unexpectedly getting generic implementation
    
    commit 2bbb3375d967155bccc86a5887d4a6e29c56b683 upstream.
    
    When CONFIG_CRYPTO_MANAGER_EXTRA_TESTS=y, the first lookup of an
    algorithm that needs to be instantiated using a template will always get
    the generic implementation, even when an accelerated one is available.
    
    This happens because the extra self-tests for the accelerated
    implementation allocate the generic implementation for comparison
    purposes, and then crypto_alg_tested() for the generic implementation
    "fulfills" the original request (i.e. sets crypto_larval::adult).
    
    This patch fixes this by only fulfilling the original request if
    we are currently the best outstanding larval as judged by the
    priority.  If we're not the best then we will ask all waiters on
    that larval request to retry the lookup.
    
    Note that this patch introduces a behaviour change when the module
    providing the new algorithm is unregistered during the process.
    Previously we would have failed with ENOENT, after the patch we
    will instead redo the lookup.
    
    Fixes: 9a8a6b3f0950 ("crypto: testmgr - fuzz hashes against...")
    Fixes: d435e10e67be ("crypto: testmgr - fuzz skciphers against...")
    Fixes: 40153b10d91c ("crypto: testmgr - fuzz AEADs against...")
    Reported-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14c93fa239f720b685f0100b1cabb0668aa441f4
Author: Corentin Labbe <clabbe.montjoie@gmail.com>
Date:   Mon Jan 6 20:30:53 2020 +0100

    crypto: sun8i-ce - fix removal of module
    
    commit 93d24ac4b26770f8e5118a731cd9314f3808bd10 upstream.
    
    Removing the driver cause an oops due to the fact we clean an extra
    channel.
    Let's give the right index to the cleaning function.
    
    Fixes: 06f751b61329 ("crypto: allwinner - Add sun8i-ce Crypto Engine")
    Signed-off-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00338ea9d274026111142c4fa37d1f3101d17f8e
Author: Corentin Labbe <clabbe.montjoie@gmail.com>
Date:   Mon Jan 6 20:29:50 2020 +0100

    crypto: amlogic - fix removal of module
    
    commit 24775ac2fe68132d3e0e7cd3a0521ccb1a5d7243 upstream.
    
    Removing the driver cause an oops due to the fact we clean an extra
    channel.
    Let's give the right index to the cleaning function.
    Fixes: 48fe583fe541 ("crypto: amlogic - Add crypto accelerator for amlogic GXL")
    
    Signed-off-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 415ee076db5c4d67b4bf2ba4c1a701f9635e83b6
Author: Corentin Labbe <clabbe.montjoie@gmail.com>
Date:   Mon Jan 6 20:28:52 2020 +0100

    crypto: sun8i-ss - fix removal of module
    
    commit 7b3d853ead8187288bf99df38ed71ee02773a65f upstream.
    
    Removing the driver cause an oops due to the fact we clean an extra
    channel.
    Let's give the right index to the cleaning function.
    Fixes: f08fcced6d00 ("crypto: allwinner - Add sun8i-ss cryptographic offloader")
    
    Signed-off-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1a27a3e16f9cc023df9a5c6c4d0081fdab60ba6
Author: Lorenz Bauer <lmb@cloudflare.com>
Date:   Fri Jan 24 11:27:52 2020 +0000

    selftests: bpf: Ignore FIN packets for reuseport tests
    
    commit 8bec4f665e0baecb5f1b683379fc10b3745eb612 upstream.
    
    The reuseport tests currently suffer from a race condition: FIN
    packets count towards DROP_ERR_SKB_DATA, since they don't contain
    a valid struct cmd. Tests will spuriously fail depending on whether
    check_results is called before or after the FIN is processed.
    
    Exit the BPF program early if FIN is set.
    
    Fixes: 91134d849a0e ("bpf: Test BPF_PROG_TYPE_SK_REUSEPORT")
    Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200124112754.19664-3-lmb@cloudflare.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec19ff4c3dd21d44a9e33f7cc85f031855962670
Author: Lorenz Bauer <lmb@cloudflare.com>
Date:   Fri Jan 24 11:27:51 2020 +0000

    selftests: bpf: Use a temporary file in test_sockmap
    
    commit c31dbb1e41d1857b403f9bf58c87f5898519a0bc upstream.
    
    Use a proper temporary file for sendpage tests. This means that running
    the tests doesn't clutter the working directory, and allows running the
    test on read-only filesystems.
    
    Fixes: 16962b2404ac ("bpf: sockmap, add selftests")
    Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200124112754.19664-2-lmb@cloudflare.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 351e45af6e67c697e2eb5317283eaa6422848a53
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jan 17 18:06:56 2020 +0800

    selftests/bpf: Skip perf hw events test if the setup disabled it
    
    commit f1c3656c6d9c147d07d16614455aceb34932bdeb upstream.
    
    The same with commit 4e59afbbed96 ("selftests/bpf: skip nmi test when perf
    hw events are disabled"), it would make more sense to skip the
    test_stacktrace_build_id_nmi test if the setup (e.g. virtual machines) has
    disabled hardware perf events.
    
    Fixes: 13790d1cc72c ("bpf: add selftest for stackmap with build_id in NMI context")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200117100656.10359-1-liuhangbin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaf1a502190e062cd8bf9c60f7d4a4fbfc22c2ec
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Wed Dec 18 18:04:42 2019 -0800

    selftests/bpf: Fix test_attach_probe
    
    commit 580205dd4fe800b1e95be8b6df9e2991f975a8ad upstream.
    
    Fix two issues in test_attach_probe:
    
    1. it was not able to parse /proc/self/maps beyond the first line,
       since %s means parse string until white space.
    2. offset has to be accounted for otherwise uprobed address is incorrect.
    
    Fixes: 1e8611bbdfc9 ("selftests/bpf: add kprobe/uprobe selftests")
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/20191219020442.1922617-1-ast@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0d2ce1c61b805d492c9152e8d4aa8f36d5a2660
Author: Prashant Bhole <prashantbhole.linux@gmail.com>
Date:   Mon Dec 16 16:16:19 2019 +0900

    samples/bpf: Reintroduce missed build targets
    
    commit 5984dc6cb5aa6cce342a44f01f984fde09ed05b1 upstream.
    
    Add xdp_redirect and per_socket_stats_example in build targets.
    They got removed from build targets in Makefile reorganization.
    
    Fixes: 1d97c6c2511f ("samples/bpf: Base target programs rules on Makefile.target")
    Signed-off-by: Prashant Bhole <prashantbhole.linux@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191216071619.25479-1-prashantbhole.linux@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dfa1491df05b3e6f5e62ddb96462c86786380e4
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Fri Dec 20 17:19:36 2019 +0100

    samples/bpf: Xdp_redirect_cpu fix missing tracepoint attach
    
    commit f9e6bfdbaf0cf304d72c70a05d81acac01a04f48 upstream.
    
    When sample xdp_redirect_cpu was converted to use libbpf, the
    tracepoints used by this sample were not getting attached automatically
    like with bpf_load.c. The BPF-maps was still getting loaded, thus
    nobody notice that the tracepoints were not updating these maps.
    
    This fix doesn't use the new skeleton code, as this bug was introduced
    in v5.1 and stable might want to backport this. E.g. Red Hat QA uses
    this sample as part of their testing.
    
    Fixes: bbaf6029c49c ("samples/bpf: Convert XDP samples to libbpf usage")
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/157685877642.26195.2798780195186786841.stgit@firesoul
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e8600d6dc6982b288d269c62aaaa059cdf3b088
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Jan 20 14:06:41 2020 +0100

    samples/bpf: Don't try to remove user's homedir on clean
    
    commit b2e5e93ae8af6a34bca536cdc4b453ab1e707b8b upstream.
    
    The 'clean' rule in the samples/bpf Makefile tries to remove backup
    files (ending in ~). However, if no such files exist, it will instead try
    to remove the user's home directory. While the attempt is mostly harmless,
    it does lead to a somewhat scary warning like this:
    
    rm: cannot remove '~': Is a directory
    
    Fix this by using find instead of shell expansion to locate any actual
    backup files that need to be removed.
    
    Fixes: b62a796c109c ("samples/bpf: allow make to be run from samples/bpf/ directory")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Link: https://lore.kernel.org/bpf/157952560126.1683545.7273054725976032511.stgit@toke.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b6ca34e897342e201ecfa15ecd47ad1c8b16bc1
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Mon Feb 3 16:29:29 2020 +0100

    tc-testing: fix eBPF tests failure on linux fresh clones
    
    commit 7145fcfffef1fad4266aaf5ca96727696916edb7 upstream.
    
    when the following command is done on a fresh clone of the kernel tree,
    
     [root@f31 tc-testing]# ./tdc.py -c bpf
    
    test cases that need to build the eBPF sample program fail systematically,
    because 'buildebpfPlugin' is unable to install the kernel headers (i.e, the
    'khdr' target fails). Pass the correct environment to 'make', in place of
    ENVIR, to allow running these tests.
    
    Fixes: 4c2d39bd40c1 ("tc-testing: use a plugin to build eBPF program")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b10e1adbc7215956eacbdc13faa2102c977b3183
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Jan 24 12:18:46 2020 -0800

    libbpf: Fix realloc usage in bpf_core_find_cands
    
    commit 35b9211c0a2427e8f39e534f442f43804fc8d5ca upstream.
    
    Fix bug requesting invalid size of reallocated array when constructing CO-RE
    relocation candidate list. This can cause problems if there are many potential
    candidates and a very fine-grained memory allocator bucket sizes are used.
    
    Fixes: ddc7c3042614 ("libbpf: implement BPF CO-RE offset relocation algorithm")
    Reported-by: William Smith <williampsmith@fb.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20200124201847.212528-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 035e7fc14211eccd06d5763b104237146247f909
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Thu Dec 19 13:07:14 2019 +0100

    libbpf: Add missing newline in opts validation macro
    
    commit 12dd14b230b3c742b80272ecb8a83cdf824625ca upstream.
    
    The error log output in the opts validation macro was missing a newline.
    
    Fixes: 2ce8450ef5a3 ("libbpf: add bpf_object__open_{file, mem} w/ extensible opts")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20191219120714.928380-1-toke@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c27afeb5f3445b6d13c30329a2d3672f301d1c37
Author: Amol Grover <frextrite@gmail.com>
Date:   Thu Jan 23 17:34:38 2020 +0530

    bpf, devmap: Pass lockdep expression to RCU lists
    
    commit 485ec2ea9cf556e9c120e07961b7b459d776a115 upstream.
    
    head is traversed using hlist_for_each_entry_rcu outside an RCU
    read-side critical section but under the protection of dtab->index_lock.
    
    Hence, add corresponding lockdep expression to silence false-positive
    lockdep warnings, and harden RCU lists.
    
    Fixes: 6f9d451ab1a3 ("xdp: Add devmap_hash map type for looking up devices by hashed index")
    Signed-off-by: Amol Grover <frextrite@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/bpf/20200123120437.26506-1-frextrite@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2bb478325814c82449e0a85c9dcd667606ea118
Author: Yoshiki Komachi <komachi.yoshiki@gmail.com>
Date:   Fri Jan 17 16:05:32 2020 +0900

    flow_dissector: Fix to use new variables for port ranges in bpf hook
    
    commit 59fb9b62fb6c929a756563152a89f39b07cf8893 upstream.
    
    This patch applies new flag (FLOW_DISSECTOR_KEY_PORTS_RANGE) and
    field (tp_range) to BPF flow dissector to generate appropriate flow
    keys when classified by specified port ranges.
    
    Fixes: 8ffb055beae5 ("cls_flower: Fix the behavior using port ranges with hw-offload")
    Signed-off-by: Yoshiki Komachi <komachi.yoshiki@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Petar Penkov <ppenkov@google.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200117070533.402240-2-komachi.yoshiki@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba9b9a4c99f0dee3cda0fa6b047265e41e023352
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Dec 11 17:36:20 2019 -0800

    selftests/bpf: Fix perf_buffer test on systems w/ offline CPUs
    
    commit 91cbdf740a476cf2c744169bf407de2e3ac1f3cf upstream.
    
    Fix up perf_buffer.c selftest to take into account offline/missing CPUs.
    
    Fixes: ee5cf82ce04a ("selftests/bpf: test perf buffer API")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191212013621.1691858-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 919f4ac40ad85291a10c0f17f782cf2851bc737d
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Dec 11 17:36:09 2019 -0800

    libbpf: Don't attach perf_buffer to offline/missing CPUs
    
    commit 783b8f01f5942a786998f5577bd9ff3992f22a1a upstream.
    
    It's quite common on some systems to have more CPUs enlisted as "possible",
    than there are (and could ever be) present/online CPUs. In such cases,
    perf_buffer creationg will fail due to inability to create perf event on
    missing CPU with error like this:
    
    libbpf: failed to open perf buffer event on cpu #16: No such device
    
    This patch fixes the logic of perf_buffer__new() to ignore CPUs that are
    missing or currently offline. In rare cases where user explicitly listed
    specific CPUs to connect to, behavior is unchanged: libbpf will try to open
    perf event buffer on specified CPU(s) anyways.
    
    Fixes: fb84b8224655 ("libbpf: add perf buffer API")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191212013609.1691168-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11cee08dce69360d7a233c18b867fa1dbef1d04a
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Thu Dec 12 09:19:18 2019 -0800

    libbpf: Fix printf compilation warnings on ppc64le arch
    
    commit 679152d3a32e305c213f83160c328c37566ae8bc upstream.
    
    On ppc64le __u64 and __s64 are defined as long int and unsigned long int,
    respectively. This causes compiler to emit warning when %lld/%llu are used to
    printf 64-bit numbers. Fix this by casting to size_t/ssize_t with %zu and %zd
    format specifiers, respectively.
    
    v1->v2:
    - use size_t/ssize_t instead of custom typedefs (Martin).
    
    Fixes: 1f8e2bcb2cd5 ("libbpf: Refactor relocation handling")
    Fixes: abd29c931459 ("libbpf: allow specifying map definitions using BTF")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20191212171918.638010-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a5d50b023de4a27e4184cd7a883c55d530cc11a
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 13 07:11:14 2019 -0300

    libbpf: Fix readelf output parsing for Fedora
    
    commit aa915931ac3e53ccf371308e6750da510e3591dd upstream.
    
    Fedora binutils has been patched to show "other info" for a symbol at the
    end of the line. This was done in order to support unmaintained scripts
    that would break with the extra info. [1]
    
    [1] https://src.fedoraproject.org/rpms/binutils/c/b8265c46f7ddae23a792ee8306fbaaeacba83bf8
    
    This in turn has been done to fix the build of ruby, because of checksec.
    [2] Thanks Michael Ellerman for the pointer.
    
    [2] https://bugzilla.redhat.com/show_bug.cgi?id=1479302
    
    As libbpf Makefile is not unmaintained, we can simply deal with either
    output format, by just removing the "other info" field, as it always comes
    inside brackets.
    
    Fixes: 3464afdf11f9 (libbpf: Fix readelf output parsing on powerpc with recent binutils)
    Reported-by: Justin Forbes <jmforbes@linuxtx.org>
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Link: https://lore.kernel.org/bpf/20191213101114.GA3986@calabresa
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 664c5ddf637b6d9f7f8e0430026ae2acff049ab9
Author: Björn Töpel <bjorn.topel@gmail.com>
Date:   Mon Dec 16 10:13:35 2019 +0100

    riscv, bpf: Fix broken BPF tail calls
    
    commit f1003b787c00fbaa4b11619c6b23a885bfce8f07 upstream.
    
    The BPF JIT incorrectly clobbered the a0 register, and did not flag
    usage of s5 register when BPF stack was being used.
    
    Fixes: 2353ecc6f91f ("bpf, riscv: add BPF JIT for RV64G")
    Signed-off-by: Björn Töpel <bjorn.topel@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20191216091343.23260-2-bjorn.topel@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 370595cbdcf7c60ea97e1b04c6558b4714903be7
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Fri Jan 10 14:11:34 2020 +0200

    btrfs: Handle another split brain scenario with metadata uuid feature
    
    commit 05840710149c7d1a78ea85a2db5723f706e97d8f upstream.
    
    There is one more cases which isn't handled by the original metadata
    uuid work. Namely, when a filesystem has METADATA_UUID incompat bit and
    the user decides to change the FSID to the original one e.g. have
    metadata_uuid and fsid match. In case of power failure while this
    operation is in progress we could end up in a situation where some of
    the disks have the incompat bit removed and the other half have both
    METADATA_UUID_INCOMPAT and FSID_CHANGING_IN_PROGRESS flags.
    
    This patch handles the case where a disk that has successfully changed
    its FSID such that it equals METADATA_UUID is scanned first.
    Subsequently when a disk with both
    METADATA_UUID_INCOMPAT/FSID_CHANGING_IN_PROGRESS flags is scanned
    find_fsid_changed won't be able to find an appropriate btrfs_fs_devices.
    This is done by extending find_fsid_changed to correctly find
    btrfs_fs_devices whose metadata_uuid/fsid are the same and they match
    the metadata_uuid of the currently scanned device.
    
    Fixes: cc5de4e70256 ("btrfs: Handle final split-brain possibility during fsid change")
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reported-by: Su Yue <Damenly_Su@gmx.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56422569df28fd0dfb28ea6e09be09348737cce4
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jan 3 10:38:44 2020 -0500

    btrfs: fix improper setting of scanned for range cyclic write cache pages
    
    commit 556755a8a99be8ca3cd9fbe36aaf9b3b0339a00d upstream.
    
    We noticed that we were having regular CG OOM kills in cases where there
    was still enough dirty pages to avoid OOM'ing.  It turned out there's
    this corner case in btrfs's handling of range_cyclic where files that
    were being redirtied were not getting fully written out because of how
    we do range_cyclic writeback.
    
    We unconditionally were setting scanned = 1; the first time we found any
    pages in the inode.  This isn't actually what we want, we want it to be
    set if we've scanned the entire file.  For range_cyclic we could be
    starting in the middle or towards the end of the file, so we could write
    one page and then not write any of the other dirty pages in the file
    because we set scanned = 1.
    
    Fix this by not setting scanned = 1 if we find pages.  The rules for
    setting scanned should be
    
    1) !range_cyclic.  In this case we have a specified range to write out.
    2) range_cyclic && index == 0.  In this case we've started at the
       beginning and there is no need to loop around a second time.
    3) range_cyclic && we started at index > 0 and we've reached the end of
       the file without satisfying our nr_to_write.
    
    This patch fixes both of our writepages implementations to make sure
    these rules hold true.  This fixed our over zealous CG OOMs in
    production.
    
    Fixes: d1310b2e0cd9 ("Btrfs: Split the extent_map code into two parts")
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add comment ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e43d65719527043f1ef79ecba9d4ede58cbc7ffe
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Nov 26 15:58:45 2019 +0800

    crypto: pcrypt - Avoid deadlock by using per-instance padata queues
    
    commit bbefa1dd6a6d53537c11624752219e39959d04fb upstream.
    
    If the pcrypt template is used multiple times in an algorithm, then a
    deadlock occurs because all pcrypt instances share the same
    padata_instance, which completes requests in the order submitted.  That
    is, the inner pcrypt request waits for the outer pcrypt request while
    the outer request is already waiting for the inner.
    
    This patch fixes this by allocating a set of queues for each pcrypt
    instance instead of using two global queues.  In order to maintain
    the existing user-space interface, the pinst structure remains global
    so any sysfs modifications will apply to every pcrypt instance.
    
    Note that when an update occurs we have to allocate memory for
    every pcrypt instance.  Should one of the allocations fail we
    will abort the update without rolling back changes already made.
    
    The new per-instance data structure is called padata_shell and is
    essentially a wrapper around parallel_data.
    
    Reproducer:
    
            #include <linux/if_alg.h>
            #include <sys/socket.h>
            #include <unistd.h>
    
            int main()
            {
                    struct sockaddr_alg addr = {
                            .salg_type = "aead",
                            .salg_name = "pcrypt(pcrypt(rfc4106-gcm-aesni))"
                    };
                    int algfd, reqfd;
                    char buf[32] = { 0 };
    
                    algfd = socket(AF_ALG, SOCK_SEQPACKET, 0);
                    bind(algfd, (void *)&addr, sizeof(addr));
                    setsockopt(algfd, SOL_ALG, ALG_SET_KEY, buf, 20);
                    reqfd = accept(algfd, 0, 0);
                    write(reqfd, buf, 32);
                    read(reqfd, buf, 16);
            }
    
    Reported-by: syzbot+56c7151cad94eec37c521f0e47d2eee53f9361c4@syzkaller.appspotmail.com
    Fixes: 5068c7a883d1 ("crypto: pcrypt - Add pcrypt crypto parallelization wrapper")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fdc8ff881ba7de2c33ba351e0f4e2b49891b299
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Feb 5 09:20:32 2020 -0500

    ftrace: Protect ftrace_graph_hash with ftrace_sync
    
    [ Upstream commit 54a16ff6f2e50775145b210bcd94d62c3c2af117 ]
    
    As function_graph tracer can run when RCU is not "watching", it can not be
    protected by synchronize_rcu() it requires running a task on each CPU before
    it can be freed. Calling schedule_on_each_cpu(ftrace_sync) needs to be used.
    
    Link: https://lore.kernel.org/r/20200205131110.GT2935@paulmck-ThinkPad-P72
    
    Cc: stable@vger.kernel.org
    Fixes: b9b0c831bed26 ("ftrace: Convert graph filter to use hash tables")
    Reported-by: "Paul E. McKenney" <paulmck@kernel.org>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cd057a400520e8787d0d62ba32ccc0201a0d0b6
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Feb 5 02:17:57 2020 -0500

    ftrace: Add comment to why rcu_dereference_sched() is open coded
    
    [ Upstream commit 16052dd5bdfa16dbe18d8c1d4cde2ddab9d23177 ]
    
    Because the function graph tracer can execute in sections where RCU is not
    "watching", the rcu_dereference_sched() for the has needs to be open coded.
    This is fine because the RCU "flavor" of the ftrace hash is protected by
    its own RCU handling (it does its own little synchronization on every CPU
    and does not rely on RCU sched).
    
    Acked-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c51e4351b57b23919ad93f1769979572c538598
Author: Amol Grover <frextrite@gmail.com>
Date:   Wed Feb 5 11:27:02 2020 +0530

    tracing: Annotate ftrace_graph_notrace_hash pointer with __rcu
    
    [ Upstream commit fd0e6852c407dd9aefc594f54ddcc21d84803d3b ]
    
    Fix following instances of sparse error
    kernel/trace/ftrace.c:5667:29: error: incompatible types in comparison
    kernel/trace/ftrace.c:5813:21: error: incompatible types in comparison
    kernel/trace/ftrace.c:5868:36: error: incompatible types in comparison
    kernel/trace/ftrace.c:5870:25: error: incompatible types in comparison
    
    Use rcu_dereference_protected to dereference the newly annotated pointer.
    
    Link: http://lkml.kernel.org/r/20200205055701.30195-1-frextrite@gmail.com
    
    Signed-off-by: Amol Grover <frextrite@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0b52a59e231d23da6fd8c35bb141304307bdef8
Author: Amol Grover <frextrite@gmail.com>
Date:   Sat Feb 1 12:57:04 2020 +0530

    tracing: Annotate ftrace_graph_hash pointer with __rcu
    
    [ Upstream commit 24a9729f831462b1d9d61dc85ecc91c59037243f ]
    
    Fix following instances of sparse error
    kernel/trace/ftrace.c:5664:29: error: incompatible types in comparison
    kernel/trace/ftrace.c:5785:21: error: incompatible types in comparison
    kernel/trace/ftrace.c:5864:36: error: incompatible types in comparison
    kernel/trace/ftrace.c:5866:25: error: incompatible types in comparison
    
    Use rcu_dereference_protected to access the __rcu annotated pointer.
    
    Link: http://lkml.kernel.org/r/20200201072703.17330-1-frextrite@gmail.com
    
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Amol Grover <frextrite@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b9001fc983b6c09cd4d733bdb6d55cb0a9b6959
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Jan 24 15:36:21 2020 -0600

    ASoC: SOF: core: release resources on errors in probe_continue
    
    [ Upstream commit 410e5e55c9c1c9c0d452ac5b9adb37b933a7747e ]
    
    The initial intent of releasing resources in the .remove does not work
    well with HDaudio codecs. If the probe_continue() fails in a work
    queue, e.g. due to missing firmware or authentication issues, we don't
    release any resources, and as a result the kernel oopses during
    suspend operations.
    
    The suggested fix is to release all resources during errors in
    probe_continue(), and use fw_state to track resource allocation
    state, so that .remove does not attempt to release the same
    hardware resources twice. PM operations are also modified so that
    no action is done if DSP resources have been freed due to
    an error at probe.
    
    Reported-by: Takashi Iwai <tiwai@suse.de>
    Co-developed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Bugzilla:  http://bugzilla.suse.com/show_bug.cgi?id=1161246
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20200124213625.30186-4-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50aa774fed5aa2de1d1ba71fa1cbccb2115af76c
Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date:   Tue Dec 17 18:26:09 2019 -0600

    ASoC: SOF: Introduce state machine for FW boot
    
    [ Upstream commit 6ca5cecbd1c1758666ab79446f19e0e61ed11444 ]
    
    Add a state machine for FW boot to track the
    different stages of FW boot and replace the boot_complete
    field with fw_state field in struct snd_sof_dev.
    This will be used to determine the actions to be performed
    during system suspend.
    
    One of the main motivations for adding this change is the
    fact that errors during the top-level SOF device probe cannot
    be propagated and therefore suspending the SOF device normally
    during system suspend could potentially run into errors.
    For example, with the current flow, if the FW boot failed
    for some reason and the system suspends, the SOF device
    suspend could fail because the CTX_SAVE IPC would be attempted
    even though the FW never really booted successfully causing it
    to time out. Another scenario that the state machine fixes
    is when the runtime suspend for the SOF device fails and
    the DSP is powered down nevertheless, the CTX_SAVE IPC during
    system suspend would timeout because the DSP is already
    powered down.
    
    Reviewed-by: Curtis Malainey <cujomalainey@chromium.org>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20191218002616.7652-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7235b23143ec505bf2b14ea805896ed0b34430ae
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Mon Jan 27 14:07:23 2020 -0500

    dm: fix potential for q->make_request_fn NULL pointer
    
    commit 47ace7e012b9f7ad71d43ac9063d335ea3d6820b upstream.
    
    Move blk_queue_make_request() to dm.c:alloc_dev() so that
    q->make_request_fn is never NULL during the lifetime of a DM device
    (even one that is created without a DM table).
    
    Otherwise generic_make_request() will crash simply by doing:
      dmsetup create -n test
      mount /dev/dm-N /mnt
    
    While at it, move ->congested_data initialization out of
    dm.c:alloc_dev() and into the bio-based specific init method.
    
    Reported-by: Stefan Bader <stefan.bader@canonical.com>
    BugLink: https://bugs.launchpad.net/bugs/1860231
    Fixes: ff36ab34583a ("dm: remove request-based logic from make_request_fn wrapper")
    Depends-on: c12c9a3c3860c ("dm: various cleanups to md->queue initialization code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8598be6416c6824fb4963164a34b3545224b8782
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Mon Jan 13 12:29:04 2020 -0500

    dm thin: fix use-after-free in metadata_pre_commit_callback
    
    commit a4a8d286586d4b28c8517a51db8d86954aadc74b upstream.
    
    dm-thin uses struct pool to hold the state of the pool. There may be
    multiple pool_c's pointing to a given pool, each pool_c represents a
    loaded target. pool_c's may be created and destroyed arbitrarily and the
    pool contains a reference count of pool_c's pointing to it.
    
    Since commit 694cfe7f31db3 ("dm thin: Flush data device before
    committing metadata") a pointer to pool_c is passed to
    dm_pool_register_pre_commit_callback and this function stores it in
    pmd->pre_commit_context. If this pool_c is freed, but pool is not
    (because there is another pool_c referencing it), we end up in a
    situation where pmd->pre_commit_context structure points to freed
    pool_c. It causes a crash in metadata_pre_commit_callback.
    
    Fix this by moving the dm_pool_register_pre_commit_callback() from
    pool_ctr() to pool_preresume(). This way the in-core thin-pool metadata
    is only ever armed with callback data whose lifetime matches the
    active thin-pool target.
    
    In should be noted that this fix preserves the ability to load a
    thin-pool table that uses a different data block device (that contains
    the same data) -- though it is unclear if that capability is still
    useful and/or needed.
    
    Fixes: 694cfe7f31db3 ("dm thin: Flush data device before committing metadata")
    Cc: stable@vger.kernel.org
    Reported-by: Zdenek Kabelac <zkabelac@redhat.com>
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ebada600cf56ab58f533279392373a0b22e53b6
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Mon Jan 13 11:18:51 2020 -0500

    dm thin metadata: use pool locking at end of dm_pool_metadata_close
    
    commit 44d8ebf436399a40fcd10dd31b29d37823d62fcc upstream.
    
    Ensure that the pool is locked during calls to __commit_transaction and
    __destroy_persistent_data_objects.  Just being consistent with locking,
    but reality is dm_pool_metadata_close is called once pool is being
    destroyed so access to pool shouldn't be contended.
    
    Also, use pmd_write_lock_in_core rather than __pmd_write_lock in
    dm_pool_commit_metadata and rename __pmd_write_lock to
    pmd_write_lock_in_core -- there was no need for the alias.
    
    In addition, verify that the pool is locked in __commit_transaction().
    
    Fixes: 873f258becca ("dm thin metadata: do not write metadata if no changes occurred")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f371110c43903b0c430b3af04b899edccbd4aa67
Author: Milan Broz <gmazyland@gmail.com>
Date:   Mon Jan 6 10:11:47 2020 +0100

    dm crypt: fix benbi IV constructor crash if used in authenticated mode
    
    commit 4ea9471fbd1addb25a4d269991dc724e200ca5b5 upstream.
    
    If benbi IV is used in AEAD construction, for example:
      cryptsetup luksFormat <device> --cipher twofish-xts-benbi --key-size 512 --integrity=hmac-sha256
    the constructor uses wrong skcipher function and crashes:
    
     BUG: kernel NULL pointer dereference, address: 00000014
     ...
     EIP: crypt_iv_benbi_ctr+0x15/0x70 [dm_crypt]
     Call Trace:
      ? crypt_subkey_size+0x20/0x20 [dm_crypt]
      crypt_ctr+0x567/0xfc0 [dm_crypt]
      dm_table_add_target+0x15f/0x340 [dm_mod]
    
    Fix this by properly using crypt_aead_blocksize() in this case.
    
    Fixes: ef43aa38063a6 ("dm crypt: add cryptographic data integrity protection (authenticated encryption)")
    Cc: stable@vger.kernel.org # v4.12+
    Link: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=941051
    Reported-by: Jerad Simpson <jbsimpson@gmail.com>
    Signed-off-by: Milan Broz <gmazyland@gmail.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 931c251d08f0fcbf87b5cf777a1192bf7567c396
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Jan 2 08:23:32 2020 -0500

    dm crypt: fix GFP flags passed to skcipher_request_alloc()
    
    commit 9402e959014a18b4ebf7558733076875808dd66c upstream.
    
    GFP_KERNEL is not supposed to be or'd with GFP_NOFS (the result is
    equivalent to GFP_KERNEL). Also, we use GFP_NOIO instead of GFP_NOFS
    because we don't want any I/O being submitted in the direct reclaim
    path.
    
    Fixes: 39d13a1ac41d ("dm crypt: reuse eboiv skcipher for IV generation")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53a8b0e2de4c10f1b544925c715c6235070cda8f
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Jan 8 10:46:05 2020 -0500

    dm writecache: fix incorrect flush sequence when doing SSD mode commit
    
    commit aa9509209c5ac2f0b35d01a922bf9ae072d0c2fc upstream.
    
    When committing state, the function writecache_flush does the following:
    1. write metadata (writecache_commit_flushed)
    2. flush disk cache (writecache_commit_flushed)
    3. wait for data writes to complete (writecache_wait_for_ios)
    4. increase superblock seq_count
    5. write the superblock
    6. flush disk cache
    
    It may happen that at step 3, when we wait for some write to finish, the
    disk may report the write as finished, but the write only hit the disk
    cache and it is not yet stored in persistent storage. At step 5 we write
    the superblock - it may happen that the superblock is written before the
    write that we waited for in step 3. If the machine crashes, it may result
    in incorrect data being returned after reboot.
    
    In order to fix the bug, we must swap steps 2 and 3 in the above sequence,
    so that we first wait for writes to complete and then flush the disk
    cache.
    
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Cc: stable@vger.kernel.org # 4.18+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3f1e7d2038cb59faa1d8290889cb6cfd9f286d9
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Jan 7 11:58:42 2020 +0000

    dm space map common: fix to ensure new block isn't already in use
    
    commit 4feaef830de7ffdd8352e1fe14ad3bf13c9688f8 upstream.
    
    The space-maps track the reference counts for disk blocks allocated by
    both the thin-provisioning and cache targets.  There are variants for
    tracking metadata blocks and data blocks.
    
    Transactionality is implemented by never touching blocks from the
    previous transaction, so we can rollback in the event of a crash.
    
    When allocating a new block we need to ensure the block is free (has
    reference count of 0) in both the current and previous transaction.
    Prior to this fix we were doing this by searching for a free block in
    the previous transaction, and relying on a 'begin' counter to track
    where the last allocation in the current transaction was.  This
    'begin' field was not being updated in all code paths (eg, increment
    of a data block reference count due to breaking sharing of a neighbour
    block in the same btree leaf).
    
    This fix keeps the 'begin' field, but now it's just a hint to speed up
    the search.  Instead the current transaction is searched for a free
    block, and then the old transaction is double checked to ensure it's
    free.  Much simpler.
    
    This fixes reports of sm_disk_new_block()'s BUG_ON() triggering when
    DM thin-provisioning's snapshots are heavily used.
    
    Reported-by: Eric Wheeler <dm-devel@lists.ewheeler.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a64bb66fb641a33b0d412470739afdf7e2f90c83
Author: Dmitry Fomichev <dmitry.fomichev@wdc.com>
Date:   Mon Dec 23 17:05:46 2019 -0800

    dm zoned: support zone sizes smaller than 128MiB
    
    commit b39962950339912978484cdac50069258545d753 upstream.
    
    dm-zoned is observed to log failed kernel assertions and not work
    correctly when operating against a device with a zone size smaller
    than 128MiB (e.g. 32768 bits per 4K block). The reason is that the
    bitmap size per zone is calculated as zero with such a small zone
    size. Fix this problem and also make the code related to zone bitmap
    management be able to handle per zone bitmaps smaller than a single
    block.
    
    A dm-zoned-tools patch is required to properly format dm-zoned devices
    with zone sizes smaller than 128MiB.
    
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Fomichev <dmitry.fomichev@wdc.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d58beae097b13f9cc4a6521bfd5aa3564bb01b4
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Mon Feb 3 17:37:48 2020 -0800

    ARM: dma-api: fix max_pfn off-by-one error in __dma_supported()
    
    commit f3cc4e1d44a813a0685f2e558b78ace3db559722 upstream.
    
    max_pfn, as set in arch/arm/mm/init.c:
    
        static void __init find_limits(unsigned long *min,
                                       unsigned long *max_low,
                                       unsigned long *max_high)
        {
                *max_low = PFN_DOWN(memblock_get_current_limit());
                *min = PFN_UP(memblock_start_of_DRAM());
                *max_high = PFN_DOWN(memblock_end_of_DRAM());
        }
    
    with memblock_end_of_DRAM() pointing to the next byte after DRAM.  As
    such, max_pfn points to the PFN after the end of DRAM.
    
    Thus when using max_pfn to check DMA masks, we should subtract one when
    checking DMA ranges against it.
    
    Commit 8bf1268f48ad ("ARM: dma-api: fix off-by-one error in
    __dma_supported()") fixed the same issue, but missed this spot.
    
    This issue was found while working on the sun4i-csi v4l2 driver on the
    Allwinner R40 SoC.  On Allwinner SoCs, DRAM is offset at 0x40000000, and
    we are starting to use of_dma_configure() with the "dma-ranges" property
    in the device tree to have the DMA API handle the offset.
    
    In this particular instance, dma-ranges was set to the same range as the
    actual available (2 GiB) DRAM.  The following error appeared when the
    driver attempted to allocate a buffer:
    
        sun4i-csi 1c09000.csi: Coherent DMA mask 0x7fffffff (pfn 0x40000-0xc0000)
        covers a smaller range of system memory than the DMA zone pfn 0x0-0xc0001
        sun4i-csi 1c09000.csi: dma_alloc_coherent of size 307200 failed
    
    Fixing the off-by-one error makes things work.
    
    Link: http://lkml.kernel.org/r/20191224030239.5656-1-wens@kernel.org
    Fixes: 11a5aa32562e ("ARM: dma-mapping: check DMA mask against available memory")
    Fixes: 9f28cde0bc64 ("ARM: another fix for the DMA mapping checks")
    Fixes: ab746573c405 ("ARM: dma-mapping: allow larger DMA mask than supported")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d357f28bc6e2ed4354d76ab44c982d0454303191
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sun Jan 26 22:52:47 2020 +1100

    of: Add OF_DMA_DEFAULT_COHERENT & select it on powerpc
    
    commit dabf6b36b83a18d57e3d4b9d50544ed040d86255 upstream.
    
    There's an OF helper called of_dma_is_coherent(), which checks if a
    device has a "dma-coherent" property to see if the device is coherent
    for DMA.
    
    But on some platforms devices are coherent by default, and on some
    platforms it's not possible to update existing device trees to add the
    "dma-coherent" property.
    
    So add a Kconfig symbol to allow arch code to tell
    of_dma_is_coherent() that devices are coherent by default, regardless
    of the presence of the property.
    
    Select that symbol on powerpc when NOT_COHERENT_CACHE is not set, ie.
    when the system has a coherent cache.
    
    Fixes: 92ea637edea3 ("of: introduce of_dma_is_coherent() helper")
    Cc: stable@vger.kernel.org # v3.16+
    Reported-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Tested-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16d51c1c10ed9993c5d97c3126ceac5b579c60b7
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Jan 26 23:40:11 2020 +0100

    cpufreq: Avoid creating excessively large stack frames
    
    commit 1e4f63aecb53e48468661e922fc2fa3b83e55722 upstream.
    
    In the process of modifying a cpufreq policy, the cpufreq core makes
    a copy of it including all of the internals which is stored on the
    CPU stack.  Because struct cpufreq_policy is relatively large, this
    may cause the size of the stack frame to exceed the 2 KB limit and
    so the GCC complains when -Wframe-larger-than= is used.
    
    In fact, it is not necessary to copy the entire policy structure
    in order to modify it, however.
    
    First, because cpufreq_set_policy() obtains the min and max policy
    limits from frequency QoS now, it is not necessary to pass the limits
    to it from the callers.  The only things that need to be passed to it
    from there are the new governor pointer or (if there is a built-in
    governor in the driver) the "policy" value representing the governor
    choice.  They both can be passed as individual arguments, though, so
    make cpufreq_set_policy() take them this way and rework its callers
    accordingly.  This avoids making copies of cpufreq policies in the
    callers of cpufreq_set_policy().
    
    Second, cpufreq_set_policy() still needs to pass the new policy
    data to the ->verify() callback of the cpufreq driver whose task
    is to sanitize the min and max policy limits.  It still does not
    need to make a full copy of struct cpufreq_policy for this purpose,
    but it needs to pass a few items from it to the driver in case they
    are needed (different drivers have different needs in that respect
    and all of them have to be covered).  For this reason, introduce
    struct cpufreq_policy_data to hold copies of the members of
    struct cpufreq_policy used by the existing ->verify() driver
    callbacks and pass a pointer to a temporary structure of that
    type to ->verify() (instead of passing a pointer to full struct
    cpufreq_policy to it).
    
    While at it, notice that intel_pstate and longrun don't really need
    to verify the "policy" value in struct cpufreq_policy, so drop those
    check from them to avoid copying "policy" into struct
    cpufreq_policy_data (which allows it to be slightly smaller).
    
    Also while at it fix up white space in a couple of places and make
    cpufreq_set_policy() static (as it can be so).
    
    Fixes: 3000ce3c52f8 ("cpufreq: Use per-policy frequency QoS")
    Link: https://lore.kernel.org/linux-pm/CAMuHMdX6-jb1W8uC2_237m8ctCpsnGp=JCxqt8pCWVqNXHmkVg@mail.gmail.com
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0390e974020ebbbb64580fc205ecc892d1fdd462
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 23 00:11:24 2020 +0100

    PM: core: Fix handling of devices deleted during system-wide resume
    
    commit 0552e05fdfea191a2cf3a0abd33574b5ef9ca818 upstream.
    
    If a device is deleted by one of its system-wide resume callbacks
    (for example, because it does not appear to be present or accessible
    any more) along with its children, the resume of the children may
    continue leading to use-after-free errors and other issues
    (potentially).
    
    Namely, if the device's children are resumed asynchronously, their
    resume may have been scheduled already before the device's callback
    runs and so the device may be deleted while dpm_wait_for_superior()
    is being executed for them.  The memory taken up by the parent device
    object may be freed then while dpm_wait() is waiting for the parent's
    resume callback to complete, which leads to a use-after-free.
    Moreover, the resume of the children is really not expected to
    continue after they have been unregistered, so it must be terminated
    right away in that case.
    
    To address this problem, modify dpm_wait_for_superior() to check
    if the target device is still there in the system-wide PM list of
    devices and if so, to increment its parent's reference counter, both
    under dpm_list_mtx which prevents device_del() running for the child
    from dropping the parent's reference counter prematurely.
    
    If the device is not present in the system-wide PM list of devices
    any more, the resume of it cannot continue, so check that again after
    dpm_wait() returns, which means that the parent's callback has been
    completed, and pass the result of that check to the caller of
    dpm_wait_for_superior() to allow it to abort the device's resume
    if it is not there any more.
    
    Link: https://lore.kernel.org/linux-pm/1579568452-27253-1-git-send-email-chanho.min@lge.com
    Reported-by: Chanho Min <chanho.min@lge.com>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f74b774cb54e4dca42b821e9ec7d6a33d8e506f6
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 23 20:15:49 2020 -0800

    f2fs: fix race conditions in ->d_compare() and ->d_hash()
    
    commit 80f2388afa6ef985f9c5c228e36705c4d4db4756 upstream.
    
    Since ->d_compare() and ->d_hash() can be called in RCU-walk mode,
    ->d_parent and ->d_inode can be concurrently modified, and in
    particular, ->d_inode may be changed to NULL.  For f2fs_d_hash() this
    resulted in a reproducible NULL dereference if a lookup is done in a
    directory being deleted, e.g. with:
    
            int main()
            {
                    if (fork()) {
                            for (;;) {
                                    mkdir("subdir", 0700);
                                    rmdir("subdir");
                            }
                    } else {
                            for (;;)
                                    access("subdir/file", 0);
                    }
            }
    
    ... or by running the 't_encrypted_d_revalidate' program from xfstests.
    Both repros work in any directory on a filesystem with the encoding
    feature, even if the directory doesn't actually have the casefold flag.
    
    I couldn't reproduce a crash in f2fs_d_compare(), but it appears that a
    similar crash is possible there.
    
    Fix these bugs by reading ->d_parent and ->d_inode using READ_ONCE() and
    falling back to the case sensitive behavior if the inode is NULL.
    
    Reported-by: Al Viro <viro@zeniv.linux.org.uk>
    Fixes: 2c2eb7a300cd ("f2fs: Support case-insensitive file name lookups")
    Cc: <stable@vger.kernel.org> # v5.4+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e8eb75946768d4592ed82ca878ac1ecc0792dcb
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jan 23 20:15:48 2020 -0800

    f2fs: fix dcache lookup of !casefolded directories
    
    commit 5515eae647426169e4b7969271fb207881eba7f6 upstream.
    
    Do the name comparison for non-casefolded directories correctly.
    
    This is analogous to ext4's commit 66883da1eee8 ("ext4: fix dcache
    lookup of !casefolded directories").
    
    Fixes: 2c2eb7a300cd ("f2fs: Support case-insensitive file name lookups")
    Cc: <stable@vger.kernel.org> # v5.4+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 867eb56e106d049dfbd05edf5c04aed1d2ef1b24
Author: Chengguang Xu <cgxu519@mykernel.net>
Date:   Sat Jan 4 22:20:04 2020 +0800

    f2fs: code cleanup for f2fs_statfs_project()
    
    commit bf2cbd3c57159c2b639ee8797b52ab5af180bf83 upstream.
    
    Calling min_not_zero() to simplify complicated prjquota
    limit comparison in f2fs_statfs_project().
    
    Signed-off-by: Chengguang Xu <cgxu519@mykernel.net>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc573f215fef30b3ef024453c2efcee0aa9e9310
Author: Chengguang Xu <cgxu519@mykernel.net>
Date:   Sat Jan 4 22:20:03 2020 +0800

    f2fs: fix miscounted block limit in f2fs_statfs_project()
    
    commit acdf2172172a511f97fa21ed0ee7609a6d3b3a07 upstream.
    
    statfs calculates Total/Used/Avail disk space in block unit,
    so we should translate soft/hard prjquota limit to block unit
    as well.
    
    Below testing result shows the block/inode numbers of
    Total/Used/Avail from df command are all correct afer
    applying this patch.
    
    [root@localhost quota-tools]\# ./repquota -P /dev/sdb1

commit ac157dd14972ce392e308af4926fac1256616914
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Mon Feb 3 11:41:53 2020 +0100

    ovl: fix lseek overflow on 32bit
    
    commit a4ac9d45c0cd14a2adc872186431c79804b77dbf upstream.
    
    ovl_lseek() is using ssize_t to return the value from vfs_llseek().  On a
    32-bit kernel ssize_t is a 32-bit signed int, which overflows above 2 GB.
    
    Assign the return value of vfs_llseek() to loff_t to fix this.
    
    Reported-by: Boris Gjenero <boris.gjenero@gmail.com>
    Fixes: 9e46b840c705 ("ovl: support stacked SEEK_HOLE/SEEK_DATA")
    Cc: <stable@vger.kernel.org> # v4.19
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b89204e423a58fc73f76c4967b5d52a40bb063ea
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Sun Dec 22 22:47:54 2019 +0200

    ovl: fix wrong WARN_ON() in ovl_cache_update_ino()
    
    commit 4c37e71b713ecffe81f8e6273c6835e54306d412 upstream.
    
    The WARN_ON() that child entry is always on overlay st_dev became wrong
    when we allowed this function to update d_ino in non-samefs setup with xino
    enabled.
    
    It is not true in case of xino bits overflow on a non-dir inode.  Leave the
    WARN_ON() only for directories, where assertion is still true.
    
    Fixes: adbf4f7ea834 ("ovl: consistent d_ino for non-samefs with xino")
    Cc: <stable@vger.kernel.org> # v4.17+
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73c72fde075010e9d36987f881257ffc33bb050e
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Thu Sep 19 11:11:37 2019 -0400

    power: supply: ltc2941-battery-gauge: fix use-after-free
    
    commit a60ec78d306c6548d4adbc7918b587a723c555cc upstream.
    
    This driver's remove path calls cancel_delayed_work().
    However, that function does not wait until the work function
    finishes. This could mean that the work function is still
    running after the driver's remove function has finished,
    which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    that the work is properly cancelled, no longer running, and
    unable to re-schedule itself.
    
    This issue was detected with the help of Coccinelle.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74c3dfabd3a0ff4737f781fe239cda5d26ac2f77
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun Jan 12 21:53:03 2020 -0600

    power: supply: axp20x_ac_power: Fix reporting online status
    
    commit 1c51aad8475d670ad58ae60adc9d32342381df8d upstream.
    
    AXP803/AXP813 have a flag that enables/disables the AC power supply
    input. This flag does not affect the status bits in PWR_INPUT_STATUS.
    Its effect can be verified by checking the battery charge/discharge
    state (bit 2 of PWR_INPUT_STATUS), or by examining the current draw on
    the AC input.
    
    Take this flag into account when getting the ONLINE property of the AC
    input, on PMICs where this flag is present.
    
    Fixes: 7693b5643fd2 ("power: supply: add AC power supply driver for AXP813")
    Cc: stable@vger.kernel.org
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 716e0dc338578e1ef9a9874954f40d95a1d3a2a8
Author: Thomas Renninger <trenn@suse.de>
Date:   Fri Jan 17 08:55:54 2020 +0100

    cpupower: Revert library ABI changes from commit ae2917093fb60bdc1ed3e
    
    commit 41ddb7e1f79693d904502ae9bea609837973eff8 upstream.
    
    Commit ae2917093fb6 ("tools/power/cpupower: Display boost frequency
    separately") modified the library function:
    
    struct cpufreq_available_frequencies
    *cpufreq_get_available_frequencies(unsigned int cpu)
    
    to
    struct cpufreq_frequencies
    *cpufreq_get_frequencies(const char *type, unsigned int cpu)
    
    This patch recovers the old API and implements the new functionality
    in a newly introduce method:
    struct cpufreq_boost_frequencies
    *cpufreq_get_available_frequencies(unsigned int cpu)
    
    This one should get merged into stable kernels back to 5.0 when
    the above had been introduced.
    
    Fixes: ae2917093fb6 ("tools/power/cpupower: Display boost frequency separately")
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Renninger <trenn@suse.de>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 055d6094634ee858985dbf6fae0b8764505c6623
Author: Quinn Tran <qutran@marvell.com>
Date:   Tue Dec 17 14:06:16 2019 -0800

    scsi: qla2xxx: Fix mtcp dump collection failure
    
    commit 641e0efddcbde52461e017136acd3ce7f2ef0c14 upstream.
    
    MTCP dump failed due to MB Reg 10 was picking garbage data from stack
    memory.
    
    Fixes: 81178772b636a ("[SCSI] qla2xxx: Implemetation of mctp.")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191217220617.28084-14-hmadhani@marvell.com
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 481d90dd7fdd09e1a9dd5ba077655c95cd0ceea4
Author: Quinn Tran <qutran@marvell.com>
Date:   Tue Dec 17 14:06:11 2019 -0800

    scsi: qla2xxx: Fix stuck login session using prli_pend_timer
    
    commit 8aaac2d7da873aebeba92c666f82c00bbd74aaf9 upstream.
    
    Session is stuck if driver sees FW has received a PRLI. Driver allows FW to
    finish with processing of PRLI by checking back with FW at a later time to
    see if the PRLI has finished. Instead, driver failed to push forward after
    re-checking PRLI completion.
    
    Fixes: ce0ba496dccf ("scsi: qla2xxx: Fix stuck login session")
    Cc: stable@vger.kernel.org # 5.3
    Link: https://lore.kernel.org/r/20191217220617.28084-9-hmadhani@marvell.com
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fd8ed1f3f079c8433a6a4435ad7f2684621d0cb
Author: Anand Lodnoor <anand.lodnoor@broadcom.com>
Date:   Tue Jan 14 16:51:19 2020 +0530

    scsi: megaraid_sas: Do not initiate OCR if controller is not in ready state
    
    commit 6d7537270e3283b92f9b327da9d58a4de40fe8d0 upstream.
    
    Driver initiates OCR if a DCMD command times out. But there is a deadlock
    if the driver attempts to invoke another OCR before the mutex lock
    (reset_mutex) is released from the previous session of OCR.
    
    This patch takes care of the above scenario using new flag
    MEGASAS_FUSION_OCR_NOT_POSSIBLE to indicate if OCR is possible.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1579000882-20246-9-git-send-email-anand.lodnoor@broadcom.com
    Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
    Signed-off-by: Anand Lodnoor <anand.lodnoor@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88a98d3cf0e9b71281ccf91bfcbfe264cf64a497
Author: Gao Xiang <xiang@kernel.org>
Date:   Tue Jan 7 10:25:46 2020 +0800

    erofs: fix out-of-bound read for shifted uncompressed block
    
    commit 4d2024370d877f9ac8b98694bcff666da6a5d333 upstream.
    
    rq->out[1] should be valid before accessing. Otherwise,
    in very rare cases, out-of-bound dirty onstack rq->out[1]
    can equal to *in and lead to unintended memmove behavior.
    
    Link: https://lore.kernel.org/r/20200107022546.19432-1-gaoxiang25@huawei.com
    Fixes: 7fc45dbc938a ("staging: erofs: introduce generic decompression backend")
    Cc: <stable@vger.kernel.org> # 5.3+
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 483406427e2bb520c9c1e0f332f0e9ee25311f3b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 27 10:31:07 2020 +0100

    scripts/find-unused-docs: Fix massive false positives
    
    commit 1630146db2111412e7524d05d812ff8f2c75977e upstream.
    
    scripts/find-unused-docs.sh invokes scripts/kernel-doc to find out if a
    source file contains kerneldoc or not.
    
    However, as it passes the no longer supported "-text" option to
    scripts/kernel-doc, the latter prints out its help text, causing all
    files to be considered containing kerneldoc.
    
    Get rid of these false positives by removing the no longer supported
    "-text" option from the scripts/kernel-doc invocation.
    
    Cc: stable@vger.kernel.org  # 4.16+
    Fixes: b05142675310d2ac ("scripts: kernel-doc: get rid of unused output formats")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200127093107.26401-1-geert+renesas@glider.be
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb419c96e2d9b02b72dd289a77a0d266c07e0c20
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Dec 16 18:26:55 2019 +0000

    fs: allow deduplication of eof block into the end of the destination file
    
    commit a5e6ea18e3d132be4716eb5fdd520c2c234e3003 upstream.
    
    We always round down, to a multiple of the filesystem's block size, the
    length to deduplicate at generic_remap_check_len().  However this is only
    needed if an attempt to deduplicate the last block into the middle of the
    destination file is requested, since that leads into a corruption if the
    length of the source file is not block size aligned.  When an attempt to
    deduplicate the last block into the end of the destination file is
    requested, we should allow it because it is safe to do it - there's no
    stale data exposure and we are prepared to compare the data ranges for
    a length not aligned to the block (or page) size - in fact we even do
    the data compare before adjusting the deduplication length.
    
    After btrfs was updated to use the generic helpers from VFS (by commit
    34a28e3d77535e ("Btrfs: use generic_remap_file_range_prep() for cloning
    and deduplication")) we started to have user reports of deduplication
    not reflinking the last block anymore, and whence users getting lower
    deduplication scores.  The main use case is deduplication of entire
    files that have a size not aligned to the block size of the filesystem.
    
    We already allow cloning the last block to the end (and beyond) of the
    destination file, so allow for deduplication as well.
    
    Link: https://lore.kernel.org/linux-btrfs/2019-1576167349.500456@svIo.N5dq.dFFD/
    CC: stable@vger.kernel.org # 5.1+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26daf8e6515c2dcd25d235468420b9f46e0acdac
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Nov 19 13:17:31 2019 +0800

    padata: Remove broken queue flushing
    
    commit 07928d9bfc81640bab36f5190e8725894d93b659 upstream.
    
    The function padata_flush_queues is fundamentally broken because
    it cannot force padata users to complete the request that is
    underway.  IOW padata has to passively wait for the completion
    of any outstanding work.
    
    As it stands flushing is used in two places.  Its use in padata_stop
    is simply unnecessary because nothing depends on the queues to
    be flushed afterwards.
    
    The other use in padata_replace is more substantial as we depend
    on it to free the old pd structure.  This patch instead uses the
    pd->refcnt to dynamically free the pd structure once all requests
    are complete.
    
    Fixes: 2b73b07ab8a4 ("padata: Flush the padata queues actively")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Reviewed-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e251e3c3306f1e70d28c4be26499f81fbaae18b
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:43 2020 +0200

    crypto: ccree - fix PM race condition
    
    commit 15fd2566bf54ee4d4781d8f170acfc9472a1541f upstream.
    
    The PM code was racy, possibly causing the driver to submit
    requests to a powered down device. Fix the race and while
    at it simplify the PM code.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Fixes: 1358c13a48c4 ("crypto: ccree - fix resume race condition on init")
    Cc: stable@kernel.org # v4.20
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea5dd482a1e6197696361a6b60e310dc30145c55
Author: Ofir Drang <ofir.drang@arm.com>
Date:   Thu Jan 16 12:14:42 2020 +0200

    crypto: ccree - fix FDE descriptor sequence
    
    commit 5c83e8ec4d51ac4cc58482ed04297e6882b32a09 upstream.
    
    In FDE mode (xts, essiv and bitlocker) the cryptocell hardware requires
    that the the XEX key will be loaded after Key1.
    
    Signed-off-by: Ofir Drang <ofir.drang@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddc078451405d1196798e45bc24b1f88b73b6503
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:40 2020 +0200

    crypto: ccree - fix pm wrongful error reporting
    
    commit cedca59fae5834af8445b403c66c9953754375d7 upstream.
    
    pm_runtime_get_sync() can return 1 as a valid (none error) return
    code. Treat it as such.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d26dbe4327f48e3b4fab8b2f8f9add36c77b586
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:38 2020 +0200

    crypto: ccree - fix AEAD decrypt auth fail
    
    commit 2a6bc713f1cef32e39e3c4e6f2e1a9849da6379c upstream.
    
    On AEAD decryption authentication failure we are suppose to
    zero out the output plaintext buffer. However, we've missed
    skipping the optional associated data that may prefix the
    ciphertext. This commit fixes this issue.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Fixes: e88b27c8eaa8 ("crypto: ccree - use std api sg_zero_buffer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8de94237b9c971742f5c38dde04fb9136fc8185c
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Wed Nov 27 10:49:08 2019 +0200

    crypto: ccree - fix backlog memory leak
    
    commit 4df2ef25b3b3618fd708ab484fe6239abd130fec upstream.
    
    Fix brown paper bag bug of not releasing backlog list item buffer
    when backlog was consumed causing a memory leak when backlog is
    used.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd690312ceac5436f5e038e33fbcfa292ff7c5a5
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Dec 6 13:55:17 2019 +0800

    crypto: api - Check spawn->alg under lock in crypto_drop_spawn
    
    commit 7db3b61b6bba4310f454588c2ca6faf2958ad79f upstream.
    
    We need to check whether spawn->alg is NULL under lock as otherwise
    the algorithm could be removed from under us after we have checked
    it and found it to be non-NULL.  This could cause us to remove the
    spawn from a non-existent list.
    
    Fixes: 7ede5a5ba55a ("crypto: api - Fix crypto_drop_spawn crash...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf803f0ec9c19d211a4bbc04a12c8f3f13f44cb2
Author: Bitan Biswas <bbiswas@nvidia.com>
Date:   Thu Jan 9 10:40:17 2020 +0000

    nvmem: core: fix memory abort in cleanup path
    
    commit 16bb7abc4a6b9defffa294e4dc28383e62a1dbcf upstream.
    
    nvmem_cell_info_to_nvmem_cell implementation has static
    allocation of name. nvmem_add_cells_from_of() call may
    return error and kfree name results in memory abort. Use
    kstrdup_const() and kfree_const calls for name alloc and free.
    
    Unable to handle kernel paging request at virtual address ffffffffffe44888
    Mem abort info:
      ESR = 0x96000006
      EC = 0x25: DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
    Data abort info:
      ISV = 0, ISS = 0x00000006
      CM = 0, WnR = 0
    swapper pgtable: 64k pages, 48-bit VAs, pgdp=00000000815d0000
    [ffffffffffe44888] pgd=0000000081d30803, pud=0000000081d30803,
    pmd=0000000000000000
    Internal error: Oops: 96000006 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 2 PID: 43 Comm: kworker/2:1 Tainted
    Hardware name: quill (DT)
    Workqueue: events deferred_probe_work_func
    pstate: a0000005 (NzCv daif -PAN -UAO)
    pc : kfree+0x38/0x278
    lr : nvmem_cell_drop+0x68/0x80
    sp : ffff80001284f9d0
    x29: ffff80001284f9d0 x28: ffff0001f677e830
    x27: ffff800011b0b000 x26: ffff0001c36e1008
    x25: ffff8000112ad000 x24: ffff8000112c9000
    x23: ffffffffffffffea x22: ffff800010adc7f0
    x21: ffffffffffe44880 x20: ffff800011b0b068
    x19: ffff80001122d380 x18: ffffffffffffffff
    x17: 00000000d5cb4756 x16: 0000000070b193b8
    x15: ffff8000119538c8 x14: 0720072007200720
    x13: 07200720076e0772 x12: 07750762072d0765
    x11: 0773077507660765 x10: 072f073007300730
    x9 : 0730073207380733 x8 : 0000000000000151
    x7 : 07660765072f0720 x6 : ffff0001c00e0f00
    x5 : 0000000000000000 x4 : ffff0001c0b43800
    x3 : ffff800011b0b068 x2 : 0000000000000000
    x1 : 0000000000000000 x0 : ffffffdfffe00000
    Call trace:
     kfree+0x38/0x278
     nvmem_cell_drop+0x68/0x80
     nvmem_device_remove_all_cells+0x2c/0x50
     nvmem_register.part.9+0x520/0x628
     devm_nvmem_register+0x48/0xa0
     tegra_fuse_probe+0x140/0x1f0
     platform_drv_probe+0x50/0xa0
     really_probe+0x108/0x348
     driver_probe_device+0x58/0x100
     __device_attach_driver+0x90/0xb0
     bus_for_each_drv+0x64/0xc8
     __device_attach+0xd8/0x138
     device_initial_probe+0x10/0x18
     bus_probe_device+0x90/0x98
     deferred_probe_work_func+0x74/0xb0
     process_one_work+0x1e0/0x358
     worker_thread+0x208/0x488
     kthread+0x118/0x120
     ret_from_fork+0x10/0x18
    Code: d350feb5 f2dffbe0 aa1e03f6 8b151815 (f94006a0)
    ---[ end trace 49b1303c6b83198e ]---
    
    Fixes: badcdff107cbf ("nvmem: Convert to using %pOFn instead of device_node.name")
    Signed-off-by: Bitan Biswas <bbiswas@nvidia.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20200109104017.6249-5-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0726611a9f62cc6e1f4265cc2a35ba10cc89b92b
Author: Peng Fan <peng.fan@nxp.com>
Date:   Thu Jan 9 10:40:14 2020 +0000

    nvmem: imx: scu: fix write SIP
    
    commit 40bb95dbb8acca35f8d52a833393ddbb01cfa2db upstream.
    
    SIP number 0xC200000A is for reading, 0xC200000B is for writing.
    And the following two args for write are word index, data to write.
    
    Fixes: 885ce72a09d0 ("nvmem: imx: scu: support write")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200109104017.6249-2-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ca8d29f8c488e4dbbb1fd174fef5efef621e0a7
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Jan 4 19:24:08 2020 -0600

    mfd: axp20x: Mark AXP20X_VBUS_IPSOUT_MGMT as volatile
    
    commit dc91c3b6fe66a13ac76f6cb3b2100c0779cd3350 upstream.
    
    On AXP288 and newer PMICs, bit 7 of AXP20X_VBUS_IPSOUT_MGMT can be set
    to prevent using the VBUS input. However, when the VBUS unplugged and
    plugged back in, the bit automatically resets to zero.
    
    We need to set the register as volatile to prevent regmap from caching
    that bit. Otherwise, regcache will think the bit is already set and not
    write the register.
    
    Fixes: cd53216625a0 ("mfd: axp20x: Fix axp288 volatile ranges")
    Cc: stable@vger.kernel.org
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ca288ee85ab0ae67942ba801b28def5155442d1
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Sat Jan 25 16:50:47 2020 -0500

    hv_balloon: Balloon up according to request page number
    
    commit d33c240d47dab4fd15123d9e73fc8810cbc6ed6a upstream.
    
    Current code has assumption that balloon request memory size aligns
    with 2MB. But actually Hyper-V doesn't guarantee such alignment. When
    balloon driver receives non-aligned balloon request, it produces warning
    and balloon up more memory than requested in order to keep 2MB alignment.
    Remove the warning and balloon up memory according to actual requested
    memory size.
    
    Fixes: f6712238471a ("hv: hv_balloon: avoid memory leak on alloc_error of 2MB memory block")
    Cc: stable@vger.kernel.org
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f138f97c07264a0c68bee98ca4858e039eec7dd
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Jan 24 15:36:20 2020 -0600

    ASoC: SOF: core: free trace on errors
    
    commit 37e97e6faeabda405d0c4319f8419dcc3da14b2b upstream.
    
    free_trace() is not called on probe errors, fix
    
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200124213625.30186-3-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0c914fbb36975280fae63bf6eec7bfb9b3a3992
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Wed Jan 22 20:07:52 2020 +0100

    ASoC: topology: fix soc_tplg_fe_link_create() - link->dobj initialization order
    
    commit 8ce1cbd6ce0b1bda0c980c64fee4c1e1378355f1 upstream.
    
    The code which checks the return value for snd_soc_add_dai_link() call
    in soc_tplg_fe_link_create() moved the snd_soc_add_dai_link() call before
    link->dobj members initialization.
    
    While it does not affect the latest kernels, the old soc-core.c code
    in the stable kernels is affected. The snd_soc_add_dai_link() function uses
    the link->dobj.type member to check, if the link structure is valid.
    
    Reorder the link->dobj initialization to make things work again.
    It's harmless for the recent code (and the structure should be properly
    initialized before other calls anyway).
    
    The problem is in stable linux-5.4.y since version 5.4.11 when the
    upstream commit 76d270364932 was applied.
    
    Fixes: 76d270364932 ("ASoC: topology: Check return value for snd_soc_add_dai_link()")
    Cc: Dragos Tarcatu <dragos_tarcatu@mentor.com>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20200122190752.3081016-1-perex@perex.cz
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 937c092b9839a0fcfd7ff9433b9e2c49224a2583
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Fri Jan 31 09:19:01 2020 +0000

    ASoC: tegra: Revert 24 and 32 bit support
    
    commit 961b91a93ea27495022b2bdc3ca0f608f2c97b5f upstream.
    
    Commit f3ee99087c8ca0ecfdd549ef5a94f557c42d5428 ("ASoC: tegra: Allow
    24bit and 32bit samples") added 24-bit and 32-bit support for to the
    Tegra30 I2S driver. However, there are two additional commits that are
    also needed to get 24-bit and 32-bit support to work correctly. These
    commits are not yet applied because there are still some review comments
    that need to be addressed. With only this change applied, 24-bit and
    32-bit support is advertised by the I2S driver, but it does not work and
    the audio is distorted. Therefore, revert this patch for now until the
    other changes are also ready.
    
    Furthermore, a clock issue with 24-bit support has been identified with
    this change and so if we revert this now, we can also fix that in the
    updated version.
    
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20200131091901.13014-1-jonathanh@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ee01810ee0a3b23c6491d00706ac309f0c15d04
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Thu Jan 2 11:42:16 2020 +0100

    mmc: sdhci-of-at91: fix memleak on clk_get failure
    
    [ Upstream commit a04184ce777b46e92c2b3c93c6dcb2754cb005e1 ]
    
    sdhci_alloc_host() does its work not using managed infrastructure, so
    needs explicit free on error path. Add it where needed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: bb5f8ea4d514 ("mmc: sdhci-of-at91: introduce driver for the Atmel SDMMC")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/b2a44d5be2e06ff075f32477e466598bb0f07b36.1577961679.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e7fca8a940304d2b3b024a5cf870607446fb8bb
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Sat Jan 11 17:50:36 2020 +0800

    ubifs: Fix deadlock in concurrent bulk-read and writepage
    
    commit f5de5b83303e61b1f3fb09bd77ce3ac2d7a475f2 upstream.
    
    In ubifs, concurrent execution of writepage and bulk read on the same file
    may cause ABBA deadlock, for example (Reproduce method see Link):
    
    Process A(Bulk-read starts from page4)         Process B(write page4 back)
      vfs_read                                       wb_workfn or fsync
      ...                                            ...
      generic_file_buffered_read                     write_cache_pages
        ubifs_readpage                                 LOCK(page4)
    
          ubifs_bulk_read                              ubifs_writepage
            LOCK(ui->ui_mutex)                           ubifs_write_inode
    
              ubifs_do_bulk_read                           LOCK(ui->ui_mutex)
                find_or_create_page(alloc page4)                  ↑
                  LOCK(page4)                   <--     ABBA deadlock occurs!
    
    In order to ensure the serialization execution of bulk read, we can't
    remove the big lock 'ui->ui_mutex' in ubifs_bulk_read(). Instead, we
    allow ubifs_do_bulk_read() to lock page failed by replacing
    find_or_create_page(FGP_LOCK) with
    pagecache_get_page(FGP_LOCK | FGP_NOWAIT).
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Suggested-by: zhangyi (F) <yi.zhang@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Fixes: 4793e7c5e1c ("UBIFS: add bulk-read facility")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206153
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46829cf86347fdf231bd6e73af0b6f2cf12936aa
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Dec 9 14:23:24 2019 -0800

    ubifs: Fix FS_IOC_SETFLAGS unexpectedly clearing encrypt flag
    
    commit 2b57067a7778484c10892fa191997bfda29fea13 upstream.
    
    UBIFS's implementation of FS_IOC_SETFLAGS fails to preserve existing
    inode flags that aren't settable by FS_IOC_SETFLAGS, namely the encrypt
    flag.  This causes the encrypt flag to be unexpectedly cleared.
    
    Fix it by preserving existing unsettable flags, like ext4 and f2fs do.
    
    Test case with kvm-xfstests shell:
    
        FSTYP=ubifs KEYCTL_PROG=keyctl
        . fs/ubifs/config
        . ~/xfstests/common/encrypt
        dev=$(__blkdev_to_ubi_volume /dev/vdc)
        ubiupdatevol -t $dev
        mount $dev /mnt -t ubifs
        k=$(_generate_session_encryption_key)
        mkdir /mnt/edir
        xfs_io -c "set_encpolicy $k" /mnt/edir
        echo contents > /mnt/edir/file
        chattr +i /mnt/edir/file
        chattr -i /mnt/edir/file
    
    With the bug, the following errors occur on the last command:
    
        [   18.081559] fscrypt (ubifs, inode 67): Inconsistent encryption context (parent directory: 65)
        chattr: Operation not permitted while reading flags on /mnt/edir/file
    
    Fixes: d475a507457b ("ubifs: Add skeleton for fscrypto")
    Cc: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b6c866edd5e79ad33c895ac71c95bed65b16690
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Dec 4 11:09:58 2019 +0100

    ubifs: Fix wrong memory allocation
    
    commit edec51374bce779f37fc209a228139c55d90ec8d upstream.
    
    In create_default_filesystem() when we allocate the idx node we must use
    the idx_node_size we calculated just one line before, not tmp, which
    contains completely other data.
    
    Fixes: c4de6d7e4319 ("ubifs: Refactor create_default_filesystem()")
    Cc: stable@vger.kernel.org # v4.20+
    Reported-by: Naga Sureshkumar Relli <nagasure@xilinx.com>
    Tested-by: Naga Sureshkumar Relli <nagasure@xilinx.com>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c161a94f11f540186306c9ae3e33122e6c742d7d
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Jan 20 14:31:59 2020 -0800

    ubifs: don't trigger assertion on invalid no-key filename
    
    commit f0d07a98a070bb5e443df19c3aa55693cbca9341 upstream.
    
    If userspace provides an invalid fscrypt no-key filename which encodes a
    hash value with any of the UBIFS node type bits set (i.e. the high 3
    bits), gracefully report ENOENT rather than triggering ubifs_assert().
    
    Test case with kvm-xfstests shell:
    
        . fs/ubifs/config
        . ~/xfstests/common/encrypt
        dev=$(__blkdev_to_ubi_volume /dev/vdc)
        ubiupdatevol $dev -t
        mount $dev /mnt -t ubifs
        mkdir /mnt/edir
        xfs_io -c set_encpolicy /mnt/edir
        rm /mnt/edir/_,,,,,DAAAAAAAAAAAAAAAAAAAAAAAAAA
    
    With the bug, the following assertion fails on the 'rm' command:
    
        [   19.066048] UBIFS error (ubi0:0 pid 379): ubifs_assert_failed: UBIFS assert failed: !(hash & ~UBIFS_S_KEY_HASH_MASK), in fs/ubifs/key.h:170
    
    Fixes: f4f61d2cc6d8 ("ubifs: Implement encrypted filenames")
    Cc: <stable@vger.kernel.org> # v4.10+
    Link: https://lore.kernel.org/r/20200120223201.241390-5-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 867a314dc9150db572f0fea6533ab028f96dbda9
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jan 19 22:07:32 2020 -0800

    fscrypt: don't print name of busy file when removing key
    
    commit 13a10da94615d81087e718517794f2868a8b3fab upstream.
    
    When an encryption key can't be fully removed due to file(s) protected
    by it still being in-use, we shouldn't really print the path to one of
    these files to the kernel log, since parts of this path are likely to be
    encrypted on-disk, and (depending on how the system is set up) the
    confidentiality of this path might be lost by printing it to the log.
    
    This is a trade-off: a single file path often doesn't matter at all,
    especially if it's a directory; the kernel log might still be protected
    in some way; and I had originally hoped that any "inode(s) still busy"
    bugs (which are security weaknesses in their own right) would be quickly
    fixed and that to do so it would be super helpful to always know the
    file path and not have to run 'find dir -inum $inum' after the fact.
    
    But in practice, these bugs can be hard to fix (e.g. due to asynchronous
    process killing that is difficult to eliminate, for performance
    reasons), and also not tied to specific files, so knowing a file path
    doesn't necessarily help.
    
    So to be safe, for now let's just show the inode number, not the path.
    If someone really wants to know a path they can use 'find -inum'.
    
    Fixes: b1c0ec3599f4 ("fscrypt: add FS_IOC_REMOVE_ENCRYPTION_KEY ioctl")
    Cc: <stable@vger.kernel.org> # v5.4+
    Link: https://lore.kernel.org/r/20200120060732.390362-1-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d3de863854817ff636cab806393b0d9de50117c
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Thu Jan 9 07:59:07 2020 -0800

    alarmtimer: Unregister wakeup source when module get fails
    
    commit 6b6d188aae79a630957aefd88ff5c42af6553ee3 upstream.
    
    The alarmtimer_rtc_add_device() function creates a wakeup source and then
    tries to grab a module reference. If that fails the function returns early
    with an error code, but fails to remove the wakeup source.
    
    Cleanup this exit path so there is no dangling wakeup source, which is
    named 'alarmtime' left allocated which will conflict with another RTC
    device that may be registered later.
    
    Fixes: 51218298a25e ("alarmtimer: Ensure RTC module is not unloaded")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200109155910.907-2-swboyd@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e046dd8c1a5bbe774aafb4c2e4c0dbf432636269
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Jan 16 19:55:33 2020 -0600

    smb3: fix default permissions on new files when mounting with modefromsid
    
    commit 643fbceef48e5b22bf8e0905f903e908b5d2ba69 upstream.
    
    When mounting with "modefromsid" mount parm most servers will require
    that some default permissions are given to users in the ACL on newly
    created files, files created with the new 'sd context' - when passing in
    an sd context on create, permissions are not inherited from the parent
    directory, so in addition to the ACE with the special SID which contains
    the mode, we also must pass in an ACE allowing users to access the file
    (GENERIC_ALL for authenticated users seemed like a reasonable default,
    although later we could allow a mount option or config switch to make
    it GENERIC_ALL for EVERYONE special sid).
    
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-By: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6b024cb35c537ca6c1e2922f8692faad15f0c54
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 10 10:57:52 2019 +0100

    ACPI / battery: Deal better with neither design nor full capacity not being reported
    
    commit ff3154d1d89a2343fd5f82e65bc0cf1d4e6659b3 upstream.
    
    Commit b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on
    devices without full_charge_capacity") added support for some (broken)
    devices which always report 0 for both design_capacity and
    full_charge_capacity.
    
    Since the device that commit was written as a fix for is not reporting any
    form of "full" capacity we cannot calculate the value for the
    POWER_SUPPLY_PROP_CAPACITY, this is worked around by using an alternative
    array of available properties which does not contain this property.
    
    This is necessary because userspace (upower) treats us returning -ENODEV
    as 0 and then typically will trigger an emergency shutdown because of that.
    Userspace does not do this if the capacity sysfs attribute is not present
    at all.
    
    There are two potential problems with that commit:
     1) It assumes that both full_charge- and design-capacity are broken at the
        same time and only checks if full_charge- is broken.
     2) It assumes that this only ever happens for devices which report energy
        units rather then charge units.
    
    This commit fixes both issues by only using the alternative
    array of available properties if both full_charge- and design-capacity are
    broken and by also adding an alternative array of available properties for
    devices using mA units.
    
    Fixes: b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on devices without full_charge_capacity")
    Cc: 4.19+ <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33e7788cd3e9e417e9298c0a6c4c7ee60c16fcd4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 10 10:57:51 2019 +0100

    ACPI / battery: Use design-cap for capacity calculations if full-cap is not available
    
    commit 5b74d1d16e2f5753fcbdecd6771b2d8370dda414 upstream.
    
    The ThunderSoft TS178 tablet's _BIX implementation reports design_capacity
    but not full_charge_capacity.
    
    Before this commit this would cause us to return -ENODEV for the capacity
    attribute, which userspace does not like. Specifically upower does this:
    
            if (sysfs_file_exists (native_path, "capacity")) {
                    percentage = sysfs_get_double (native_path, "capacity");
    
    Where the sysfs_get_double() helper returns 0 when we return -ENODEV,
    so the battery always reads 0% if we return -ENODEV.
    
    This commit fixes this by using the design-capacity instead of the
    full-charge-capacity when the full-charge-capacity is not available.
    
    Fixes: b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on devices without full_charge_capacity")
    Cc: 4.19+ <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d650fe867bf58c9af1021479ce895437c6fd7856
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 10 10:57:50 2019 +0100

    ACPI / battery: Deal with design or full capacity being reported as -1
    
    commit cc99f0ad52467028cb1251160f23ad4bb65baf20 upstream.
    
    Commit b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design]
    on devices without full_charge_capacity") added support for some (broken)
    devices which always report 0 for both design- and full_charge-capacity.
    
    This assumes that if the capacity is not being reported it is 0. The
    ThunderSoft TS178 tablet's _BIX implementation falsifies this assumption.
    It reports ACPI_BATTERY_VALUE_UNKNOWN (-1) as full_charge_capacity, which
    we treat as a valid value which causes several problems.
    
    This commit fixes this by adding a new ACPI_BATTERY_CAPACITY_VALID() helper
    which checks that the value is not 0 and not -1; and using this whenever we
    need to test if either design_capacity or full_charge_capacity is valid.
    
    Fixes: b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on devices without full_charge_capacity")
    Cc: 4.19+ <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e82cc5b8e29c82c42927f0f2f435f2f84a0ed77
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 17 20:08:11 2019 +0100

    ACPI: video: Do not export a non working backlight interface on MSI MS-7721 boards
    
    commit d21a91629f4b8e794fc4c0e0c17c85cedf1d806c upstream.
    
    Despite our heuristics to not wrongly export a non working ACPI backlight
    interface on desktop machines, we still end up exporting one on desktops
    using a motherboard from the MSI MS-7721 series.
    
    I've looked at improving the heuristics, but in this case a quirk seems
    to be the only way to solve this.
    
    While at it also add a comment to separate the video_detect_force_none
    entries in the video_detect_dmi_table from other type of entries, as we
    already do for the other entry types.
    
    Cc: All applicable <stable@vger.kernel.org>
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1783786
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3a50acf7f438ca709c2011345664200340a11d2
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Dec 4 16:27:49 2019 +0100

    mmc: spi: Toggle SPI polarity, do not hardcode it
    
    commit af3ed119329cf9690598c5a562d95dfd128e91d6 upstream.
    
    The code in mmc_spi_initsequence() tries to send a burst with
    high chipselect and for this reason hardcodes the device into
    SPI_CS_HIGH.
    
    This is not good because the SPI_CS_HIGH flag indicates
    logical "asserted" CS not always the physical level. In
    some cases the signal is inverted in the GPIO library and
    in that case SPI_CS_HIGH is already set, and enforcing
    SPI_CS_HIGH again will actually drive it low.
    
    Instead of hard-coding this, toggle the polarity so if the
    default is LOW it goes high to assert chipselect but if it
    is already high then toggle it low instead.
    
    Cc: Phil Elwell <phil@raspberrypi.org>
    Reported-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20191204152749.12652-1-linus.walleij@linaro.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit becc7331a625c0ffc2f6ebc6b66ad0fcc5148c0b
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Jan 21 17:27:34 2020 +0530

    PCI: keystone: Fix error handling when "num-viewport" DT property is not populated
    
    commit b0de922af53eede340986a2d05b6cd4b6d6efa43 upstream.
    
    Fix error handling when "num-viewport" DT property is not populated.
    
    Fixes: 23284ad677a9 ("PCI: keystone: Add support for PCIe EP in AM654x Platforms")
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e27b78c0099b9b7b02a8d0fd2af8f85e51fc191
Author: Yurii Monakov <monakov.y@gmail.com>
Date:   Tue Dec 17 14:38:36 2019 +0300

    PCI: keystone: Fix link training retries initiation
    
    commit 6df19872d881641e6394f93ef2938cffcbdae5bb upstream.
    
    ks_pcie_stop_link() function does not clear LTSSM_EN_VAL bit so
    link training was not triggered more than once after startup.
    In configurations where link can be unstable during early boot,
    for example, under low temperature, it will never be established.
    
    Fixes: 0c4ffcfe1fbc ("PCI: keystone: Add TI Keystone PCIe driver")
    Signed-off-by: Yurii Monakov <monakov.y@gmail.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f1b7a382626ea0c8e33fa1b898563ea30bdbedc
Author: Yurii Monakov <monakov.y@gmail.com>
Date:   Fri Oct 4 18:48:11 2019 +0300

    PCI: keystone: Fix outbound region mapping
    
    commit 2d0c3fbe43fa0e6fcb7a6c755c5f4cd702c0d2f4 upstream.
    
    The Keystone outbound Address Translation Unit (ATU) maps PCI MMIO space in
    8 MB windows.  When programming the ATU windows, we previously incremented
    the starting address by 8, not 8 MB, so all the windows were mapped to the
    first 8 MB.  Therefore, only 8 MB of MMIO space was accessible.
    
    Update the loop so it increments the starting address by 8 MB, not 8, so
    more MMIO space is accessible.
    
    Fixes: e75043ad9792 ("PCI: keystone: Cleanup outbound window configuration")
    Link: https://lore.kernel.org/r/20191004154811.GA31397@monakov-y.office.kontur-niirs.ru
    Signed-off-by: Yurii Monakov <monakov.y@gmail.com>
    [bhelgaas: commit log]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Acked-by: Kishon Vijay Abraham I <kishon@ti.com>
    Cc: stable@vger.kernel.org      # v4.20+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01705a8d41ee47466e2913384aa8f17f46d71dc5
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Dec 16 12:18:25 2019 +0100

    PCI: tegra: Fix return value check of pm_runtime_get_sync()
    
    commit 885199148442f56b880995d703d2ed03b6481a3c upstream.
    
    pm_runtime_get_sync() returns the device's usage counter. This might
    be >0 if the device is already powered up or CONFIG_PM is disabled.
    
    Abort probe function on real error only.
    
    Fixes: da76ba50963b ("PCI: tegra: Add power management support")
    Link: https://lore.kernel.org/r/20191216111825.28136-1-david.engraf@sysgo.com
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org      # v4.17+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d224605733cd5568133426cbff92568a9c12ecb5
Author: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
Date:   Wed Jan 29 11:14:00 2020 -0800

    PCI/ATS: Use PF PASID for VFs
    
    commit 2e34673be0bd6bb0c6c496a861cbc3f7431e7ce3 upstream.
    
    Per PCIe r5.0, sec 9.3.7.14, if a PF implements the PASID Capability, the
    PF PASID configuration is shared by its VFs, and VFs must not implement
    their own PASID Capability.  But commit 751035b8dc06 ("PCI/ATS: Cache PASID
    Capability offset") changed pci_max_pasids() and pci_pasid_features() to
    use the PASID Capability of the VF device instead of the associated PF
    device.  This leads to IOMMU bind failures when pci_max_pasids() and
    pci_pasid_features() are called for VFs.
    
    In pci_max_pasids() and pci_pasid_features(), always use the PF PASID
    Capability.
    
    Fixes: 751035b8dc06 ("PCI/ATS: Cache PASID Capability offset")
    Link: https://lore.kernel.org/r/fe891f9755cb18349389609e7fed9940fc5b081a.1580325170.git.sathyanarayanan.kuppuswamy@linux.intel.com
    Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org      # v5.5+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4aaaf3921216bb4820b8a9df387680dd2d1357a8
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Jan 27 10:42:04 2020 +0000

    powerpc/32s: Fix CPU wake-up from sleep mode
    
    commit 9933819099c4600b41a042f27a074470a43cf6b9 upstream.
    
    Commit f7354ccac844 ("powerpc/32: Remove CURRENT_THREAD_INFO and
    rename TI_CPU") broke the CPU wake-up from sleep mode (i.e. when
    _TLF_SLEEPING is set) by delaying the tovirt(r2, r2).
    
    This is because r2 is not restored by fast_exception_return. It used
    to work (by chance ?) because CPU wake-up interrupt never comes from
    user, so r2 is expected to point to 'current' on return.
    
    Commit e2fb9f544431 ("powerpc/32: Prepare for Kernel Userspace Access
    Protection") broke it even more by clobbering r0 which is not
    restored by fast_exception_return either.
    
    Use r6 instead of r0. This is possible because r3-r6 are restored by
    fast_exception_return and only r3-r5 are used for exception arguments.
    
    For r2 it could be converted back to virtual address, but stay on the
    safe side and restore it from the stack instead. It should be live
    in the cache at that moment, so loading from the stack should make
    no difference compared to converting it from phys to virt.
    
    Fixes: f7354ccac844 ("powerpc/32: Remove CURRENT_THREAD_INFO and rename TI_CPU")
    Fixes: e2fb9f544431 ("powerpc/32: Prepare for Kernel Userspace Access Protection")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/6d02c3ae6ad77af34392e98117e44c2bf6d13ba1.1580121710.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a3c50f1b3cb6b7f35fd3e6b320542cc9d35774a
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Jan 24 11:54:40 2020 +0000

    powerpc/32s: Fix bad_kuap_fault()
    
    commit 6ec20aa2e510b6297906c45f009aa08b2d97269a upstream.
    
    At the moment, bad_kuap_fault() reports a fault only if a bad access
    to userspace occurred while access to userspace was not granted.
    
    But if a fault occurs for a write outside the allowed userspace
    segment(s) that have been unlocked, bad_kuap_fault() fails to
    detect it and the kernel loops forever in do_page_fault().
    
    Fix it by checking that the accessed address is within the allowed
    range.
    
    Fixes: a68c31fc01ef ("powerpc/32s: Implement Kernel Userspace Access Protection")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/f48244e9485ada0a304ed33ccbb8da271180c80d.1579866752.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a894c5456de49118e766a66889b92298982407b
Author: Pingfan Liu <kernelfans@gmail.com>
Date:   Fri Jan 10 12:54:02 2020 +0800

    powerpc/pseries: Advance pfn if section is not present in lmb_is_removable()
    
    commit fbee6ba2dca30d302efe6bddb3a886f5e964a257 upstream.
    
    In lmb_is_removable(), if a section is not present, it should continue
    to test the rest of the sections in the block. But the current code
    fails to do so.
    
    Fixes: 51925fb3c5c9 ("powerpc/pseries: Implement memory hotplug remove in the kernel")
    Cc: stable@vger.kernel.org # v4.1+
    Signed-off-by: Pingfan Liu <kernelfans@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1578632042-12415-1-git-send-email-kernelfans@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 668713d276c5ea7ea75be39eac4fbaac757414a4
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Mon Jan 6 13:50:02 2020 -0600

    powerpc/xmon: don't access ASDR in VMs
    
    commit c2a20711fc181e7f22ee5c16c28cb9578af84729 upstream.
    
    ASDR is HV-privileged and must only be accessed in HV-mode.
    Fixes a Program Check (0x700) when xmon in a VM dumps SPRs.
    
    Fixes: d1e1b351f50f ("powerpc/xmon: Add ISA v3.0 SPRs to SPR dump")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Reviewed-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200107021633.GB29843@us.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9dd965d02239d85c2a4ef0ac7c270a5767bffbc
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Jan 14 08:13:09 2020 +0000

    powerpc/ptdump: Fix W+X verification
    
    commit d80ae83f1f932ab7af47b54d0d3bef4f4dba489f upstream.
    
    Verification cannot rely on simple bit checking because on some
    platforms PAGE_RW is 0, checking that a page is not W means
    checking that PAGE_RO is set instead of checking that PAGE_RW
    is not set.
    
    Use pte helpers instead of checking bits.
    
    Fixes: 453d87f6a8ae ("powerpc/mm: Warn if W+X pages found on boot")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/0d894839fdbb19070f0e1e4140363be4f2bb62fc.1578989540.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c09127a9f8acd0312508c088830899b17e8ca6a7
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Mon Feb 3 17:36:46 2020 -0800

    powerpc/mmu_gather: enable RCU_TABLE_FREE even for !SMP case
    
    commit 12e4d53f3f04e81f9e83d6fc10edc7314ab9f6b9 upstream.
    
    Patch series "Fixup page directory freeing", v4.
    
    This is a repost of patch series from Peter with the arch specific changes
    except ppc64 dropped.  ppc64 changes are added here because we are redoing
    the patch series on top of ppc64 changes.  This makes it easy to backport
    these changes.  Only the first 2 patches need to be backported to stable.
    
    The thing is, on anything SMP, freeing page directories should observe the
    exact same order as normal page freeing:
    
     1) unhook page/directory
     2) TLB invalidate
     3) free page/directory
    
    Without this, any concurrent page-table walk could end up with a
    Use-after-Free.  This is esp.  trivial for anything that has software
    page-table walkers (HAVE_FAST_GUP / software TLB fill) or the hardware
    caches partial page-walks (ie.  caches page directories).
    
    Even on UP this might give issues since mmu_gather is preemptible these
    days.  An interrupt or preempted task accessing user pages might stumble
    into the free page if the hardware caches page directories.
    
    This patch series fixes ppc64 and add generic MMU_GATHER changes to
    support the conversion of other architectures.  I haven't added patches
    w.r.t other architecture because they are yet to be acked.
    
    This patch (of 9):
    
    A followup patch is going to make sure we correctly invalidate page walk
    cache before we free page table pages.  In order to keep things simple
    enable RCU_TABLE_FREE even for !SMP so that we don't have to fixup the
    !SMP case differently in the followup patch
    
    !SMP case is right now broken for radix translation w.r.t page walk
    cache flush.  We can get interrupted in between page table free and
    that would imply we have page walk cache entries pointing to tables
    which got freed already.  Michael said "both our platforms that run on
    Power9 force SMP on in Kconfig, so the !SMP case is unlikely to be a
    problem for anyone in practice, unless they've hacked their kernel to
    build it !SMP."
    
    Link: http://lkml.kernel.org/r/20200116064531.483522-2-aneesh.kumar@linux.ibm.com
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7c4daa774bce955645cd88da6d15b0f6220dcb1
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Thu Jan 16 19:59:04 2020 +0100

    s390/mm: fix dynamic pagetable upgrade for hugetlbfs
    
    commit 5f490a520bcb393389a4d44bec90afcb332eb112 upstream.
    
    Commit ee71d16d22bb ("s390/mm: make TASK_SIZE independent from the number
    of page table levels") changed the logic of TASK_SIZE and also removed the
    arch_mmap_check() implementation for s390. This combination has a subtle
    effect on how get_unmapped_area() for hugetlbfs pages works. It is now
    possible that a user process establishes a hugetlbfs mapping at an address
    above 4 TB, without triggering a dynamic pagetable upgrade from 3 to 4
    levels.
    
    This is because hugetlbfs mappings will not use mm->get_unmapped_area, but
    rather file->f_op->get_unmapped_area, which currently is the generic
    implementation of hugetlb_get_unmapped_area() that does not know about s390
    dynamic pagetable upgrades, but with the new definition of TASK_SIZE, it
    will now allow mappings above 4 TB.
    
    Subsequent access to such a mapped address above 4 TB will result in a page
    fault loop, because the CPU cannot translate such a large address with 3
    pagetable levels. The fault handler will try to map in a hugepage at the
    address, but due to the folded pagetable logic it will end up with creating
    entries in the 3 level pagetable, possibly overwriting existing mappings,
    and then it all repeats when the access is retried.
    
    Apart from the page fault loop, this can have various nasty effects, e.g.
    kernel panic from one of the BUG_ON() checks in memory management code,
    or even data loss if an existing mapping gets overwritten.
    
    Fix this by implementing HAVE_ARCH_HUGETLB_UNMAPPED_AREA support for s390,
    providing an s390 version for hugetlb_get_unmapped_area() with pagetable
    upgrade support similar to arch_get_unmapped_area(), which will then be
    used instead of the generic version.
    
    Fixes: ee71d16d22bb ("s390/mm: make TASK_SIZE independent from the number of page table levels")
    Cc: <stable@vger.kernel.org> # 4.12+
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76ffd06a085d1bc2247f7c813641a16ae6b54c7c
Author: Wang Xuerui <git@xen0n.name>
Date:   Thu Jan 23 12:04:09 2020 +0800

    MIPS: asm: local: add barriers for Loongson
    
    commit 3e86460ebe2340df6a33b35a55312cc369bdcbd0 upstream.
    
    Somehow these LL/SC usages are not taken care of, breaking Loongson
    builds. Add the SYNCs appropriately.
    
    Signed-off-by: Wang Xuerui <git@xen0n.name>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: <stable@vger.kernel.org> # v5.5+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c8878bbc37d0f18425a8f76cf010c786a6f3fb8
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Wed Jan 22 14:13:34 2020 +0100

    MIPS: SGI-IP30: Check for valid pointer before using it
    
    commit c0e79fd89749b0cda1c72049e2772dd2eeada86f upstream.
    
    Fix issue detected by Smatch:
    
        ./arch/mips/sgi-ip30/ip30-irq.c:236 heart_domain_free()
         warn: variable dereferenced before check 'irqd' (see line 235)
    
    Fixes: 7505576d1c1a ("MIPS: add support for SGI Octane (IP30)")
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: <stable@vger.kernel.org> # v5.5+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f98641053efad6a3fafded00a2fa86874458c40
Author: Alexander Lobakin <alobakin@dlink.ru>
Date:   Fri Jan 17 17:02:08 2020 +0300

    MIPS: boot: fix typo in 'vmlinux.lzma.its' target
    
    commit 16202c09577f3d0c533274c0410b7de05fb0d458 upstream.
    
    Commit 92b34a976348 ("MIPS: boot: add missing targets for vmlinux.*.its")
    fixed constant rebuild of *.its files on every make invocation, but due
    to typo ("lzmo") it made no sense for vmlinux.lzma.its.
    
    Fixes: 92b34a976348 ("MIPS: boot: add missing targets for vmlinux.*.its")
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Alexander Lobakin <alobakin@dlink.ru>
    [paulburton@kernel.org: s/invokation/invocation/]
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6f875722b6c612a18ec72712265e78712dcb8c3
Author: Alexander Lobakin <alobakin@dlink.ru>
Date:   Fri Jan 17 17:02:07 2020 +0300

    MIPS: fix indentation of the 'RELOCS' message
    
    commit a53998802e178451701d59d38e36f551422977ba upstream.
    
    quiet_cmd_relocs lacks a whitespace which results in:
    
      LD      vmlinux
      SORTEX  vmlinux
      SYSMAP  System.map
      RELOCS vmlinux
      Building modules, stage 2.
      MODPOST 64 modules
    
    After this patch:
    
      LD      vmlinux
      SORTEX  vmlinux
      SYSMAP  System.map
      RELOCS  vmlinux
      Building modules, stage 2.
      MODPOST 64 modules
    
    Typo is present in kernel tree since the introduction of relocatable
    kernel support in commit e818fac595ab ("MIPS: Generate relocation table
    when CONFIG_RELOCATABLE"), but the relocation scripts were moved to
    Makefile.postlink later with commit 44079d3509ae ("MIPS: Use
    Makefile.postlink to insert relocations into vmlinux").
    
    Fixes: 44079d3509ae ("MIPS: Use Makefile.postlink to insert relocations into vmlinux")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Alexander Lobakin <alobakin@dlink.ru>
    [paulburton@kernel.org: Fixup commit references in commit message.]
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5dce7ed79c2fe2ca21aa5431029a2839b58b3c01
Author: Alexander Lobakin <alobakin@dlink.ru>
Date:   Fri Jan 17 17:02:09 2020 +0300

    MIPS: syscalls: fix indentation of the 'SYSNR' message
    
    commit 4f29ad200f7b40fbcf73cd65f95087535ba78380 upstream.
    
    It also lacks a whitespace (copy'n'paste error?) and also messes up the
    output:
    
      SYSHDR  arch/mips/include/generated/uapi/asm/unistd_n32.h
      SYSHDR  arch/mips/include/generated/uapi/asm/unistd_n64.h
      SYSHDR  arch/mips/include/generated/uapi/asm/unistd_o32.h
      SYSNR  arch/mips/include/generated/uapi/asm/unistd_nr_n32.h
      SYSNR  arch/mips/include/generated/uapi/asm/unistd_nr_n64.h
      SYSNR  arch/mips/include/generated/uapi/asm/unistd_nr_o32.h
      WRAP    arch/mips/include/generated/uapi/asm/bpf_perf_event.h
      WRAP    arch/mips/include/generated/uapi/asm/ipcbuf.h
    
    After:
    
      SYSHDR  arch/mips/include/generated/uapi/asm/unistd_n32.h
      SYSHDR  arch/mips/include/generated/uapi/asm/unistd_n64.h
      SYSHDR  arch/mips/include/generated/uapi/asm/unistd_o32.h
      SYSNR   arch/mips/include/generated/uapi/asm/unistd_nr_n32.h
      SYSNR   arch/mips/include/generated/uapi/asm/unistd_nr_n64.h
      SYSNR   arch/mips/include/generated/uapi/asm/unistd_nr_o32.h
      WRAP    arch/mips/include/generated/uapi/asm/bpf_perf_event.h
      WRAP    arch/mips/include/generated/uapi/asm/ipcbuf.h
    
    Present since day 0 of syscall table generation introduction for MIPS.
    
    Fixes: 9bcbf97c6293 ("mips: add system call table generation support")
    Cc: <stable@vger.kernel.org> # v5.0+
    Signed-off-by: Alexander Lobakin <alobakin@dlink.ru>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e275976873d7199166fec70329282c883722b19
Author: Christoffer Dall <christoffer.dall@arm.com>
Date:   Thu Dec 12 20:50:55 2019 +0100

    KVM: arm64: Only sign-extend MMIO up to register width
    
    commit b6ae256afd32f96bec0117175b329d0dd617655e upstream.
    
    On AArch64 you can do a sign-extended load to either a 32-bit or 64-bit
    register, and we should only sign extend the register up to the width of
    the register as specified in the operation (by using the 32-bit Wn or
    64-bit Xn register specifier).
    
    As it turns out, the architecture provides this decoding information in
    the SF ("Sixty-Four" -- how cute...) bit.
    
    Let's take advantage of this with the usual 32-bit/64-bit header file
    dance and do the right thing on AArch64 hosts.
    
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191212195055.5541-1-christoffer.dall@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70d8fc91293ea21868424b35091b417f90c04490
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 8 13:43:24 2020 +0000

    KVM: arm/arm64: Correct AArch32 SPSR on exception entry
    
    commit 1cfbb484de158e378e8971ac40f3082e53ecca55 upstream.
    
    Confusingly, there are three SPSR layouts that a kernel may need to deal
    with:
    
    (1) An AArch64 SPSR_ELx view of an AArch64 pstate
    (2) An AArch64 SPSR_ELx view of an AArch32 pstate
    (3) An AArch32 SPSR_* view of an AArch32 pstate
    
    When the KVM AArch32 support code deals with SPSR_{EL2,HYP}, it's either
    dealing with #2 or #3 consistently. On arm64 the PSR_AA32_* definitions
    match the AArch64 SPSR_ELx view, and on arm the PSR_AA32_* definitions
    match the AArch32 SPSR_* view.
    
    However, when we inject an exception into an AArch32 guest, we have to
    synthesize the AArch32 SPSR_* that the guest will see. Thus, an AArch64
    host needs to synthesize layout #3 from layout #2.
    
    This patch adds a new host_spsr_to_spsr32() helper for this, and makes
    use of it in the KVM AArch32 support code. For arm64 we need to shuffle
    the DIT bit around, and remove the SS bit, while for arm we can use the
    value as-is.
    
    I've open-coded the bit manipulation for now to avoid having to rework
    the existing PSR_* definitions into PSR64_AA32_* and PSR32_AA32_*
    definitions. I hope to perform a more thorough refactoring in future so
    that we can handle pstate view manipulation more consistently across the
    kernel tree.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200108134324.46500-4-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3117265a9418518ec63abd6c6788bf49da6d621b
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 8 13:43:23 2020 +0000

    KVM: arm/arm64: Correct CPSR on exception entry
    
    commit 3c2483f15499b877ccb53250d88addb8c91da147 upstream.
    
    When KVM injects an exception into a guest, it generates the CPSR value
    from scratch, configuring CPSR.{M,A,I,T,E}, and setting all other
    bits to zero.
    
    This isn't correct, as the architecture specifies that some CPSR bits
    are (conditionally) cleared or set upon an exception, and others are
    unchanged from the original context.
    
    This patch adds logic to match the architectural behaviour. To make this
    simple to follow/audit/extend, documentation references are provided,
    and bits are configured in order of their layout in SPSR_EL2. This
    layout can be seen in the diagram on ARM DDI 0487E.a page C5-426.
    
    Note that this code is used by both arm and arm64, and is intended to
    fuction with the SPSR_EL2 and SPSR_HYP layouts.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200108134324.46500-3-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1aada89c64b7d5ad87d4806ef9b9617836b4eab
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 8 13:43:22 2020 +0000

    KVM: arm64: Correct PSTATE on exception entry
    
    commit a425372e733177eb0779748956bc16c85167af48 upstream.
    
    When KVM injects an exception into a guest, it generates the PSTATE
    value from scratch, configuring PSTATE.{M[4:0],DAIF}, and setting all
    other bits to zero.
    
    This isn't correct, as the architecture specifies that some PSTATE bits
    are (conditionally) cleared or set upon an exception, and others are
    unchanged from the original context.
    
    This patch adds logic to match the architectural behaviour. To make this
    simple to follow/audit/extend, documentation references are provided,
    and bits are configured in order of their layout in SPSR_EL2. This
    layout can be seen in the diagram on ARM DDI 0487E.a page C5-429.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200108134324.46500-2-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1083fb860e95c6ef71a97034b46d098251807478
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 22 12:45:46 2020 +0000

    arm64: acpi: fix DAIF manipulation with pNMI
    
    commit e533dbe9dcb199bb637a2c465f3a6e70564994fe upstream.
    
    Since commit:
    
      d44f1b8dd7e66d80 ("arm64: KVM/mm: Move SEA handling behind a single 'claim' interface")
    
    ... the top-level APEI SEA handler has the shape:
    
    1. current_flags = arch_local_save_flags()
    2. local_daif_restore(DAIF_ERRCTX)
    3. <GHES handler>
    4. local_daif_restore(current_flags)
    
    However, since commit:
    
      4a503217ce37e1f4 ("arm64: irqflags: Use ICC_PMR_EL1 for interrupt masking")
    
    ... when pseudo-NMIs (pNMIs) are in use, arch_local_save_flags() will save
    the PMR value rather than the DAIF flags.
    
    The combination of these two commits means that the APEI SEA handler will
    erroneously attempt to restore the PMR value into DAIF. Fix this by
    factoring local_daif_save_flags() out of local_daif_save(), so that we
    can consistently save DAIF in step #1, regardless of whether pNMIs are in
    use.
    
    Both commits were introduced concurrently in v5.0.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 4a503217ce37e1f4 ("arm64: irqflags: Use ICC_PMR_EL1 for interrupt masking")
    Fixes: d44f1b8dd7e66d80 ("arm64: KVM/mm: Move SEA handling behind a single 'claim' interface")
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Julien Thierry <julien.thierry.kdev@gmail.com>
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 855d8753bc8b5fcad81ddb253e04577521f07fd3
Author: Nikhil Mahale <nmahale@nvidia.com>
Date:   Tue Feb 4 15:57:46 2020 +0530

    ALSA: hda - Fix DP-MST support for NVIDIA codecs
    
    commit c7e661a1c2ae98a4754db6a85fc686b4a89322ad upstream.
    
    If dyn_pcm_assign is set, different jack objects are being created
    for pcm and pins.
    
    If dyn_pcm_assign is set, generic_hdmi_build_jack() calls into
    add_hdmi_jack_kctl() to create and track separate jack object for
    pcm. Like sync_eld_via_acomp(), hdmi_present_sense_via_verbs() also
    need to report status change of the pcm jack.
    
    Rename pin_idx_to_jack() to pin_idx_to_pcm_jack(). Update
    hdmi_present_sense_via_verbs() to report plug state of pcm jack
    object. Unlike sync_eld_via_acomp(), for !acomp drivers the pcm
    jack's plug state must be consistent with plug state
    of pin's jack.
    
    Fixes: 5398e94fb753 ("ALSA: hda - Add DP-MST support for NVIDIA codecs")
    Reported-and-tested-by: Martin Regner <martin@larkos.de>
    Signed-off-by: Nikhil Mahale <nmahale@nvidia.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200204102746.1356-1-nmahale@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 863a533e7b337bf75193d990030d68d143f23493
Author: Yong Zhi <yong.zhi@intel.com>
Date:   Fri Jan 31 14:40:03 2020 -0600

    ALSA: hda: Add JasperLake PCI ID and codec vid
    
    commit 78be2228c15dd45865b102b29d72e721f0ace9b1 upstream.
    
    Add HD Audio Device PCI ID and codec vendor_id for the Intel JasperLake
    REV2/A0 silicon.
    
    Signed-off-by: Yong Zhi <yong.zhi@intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200131204003.10153-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1af03e88ca41de85d0a7f1bc965ca4af5892c576
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Jan 25 19:10:21 2020 +0100

    ALSA: hda: Add Clevo W65_67SB the power_save blacklist
    
    commit d8feb6080bb0c9f4d799a423d9453048fdd06990 upstream.
    
    Using HDA power-saving on the Clevo W65_67SB causes the first 0.5
    seconds of audio to be missing every time audio starts playing.
    
    This commit adds the Clevo W65_67SB the power_save blacklist to avoid
    this issue.
    
    Cc: stable@vger.kernel.org
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1525104
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200125181021.70446-1-hdegoede@redhat.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ef641ba2c94501a89d93a11434036abc036ed34
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 20 11:41:27 2020 +0100

    ALSA: hda: Apply aligned MMIO access only conditionally
    
    commit 4d024fe8f806e20e577cc934204c5784c7063293 upstream.
    
    It turned out that the recent simplification of HD-audio bus access
    helpers caused a regression on the virtual HD-audio device on QEMU
    with ARM platforms.  The driver got a CORB/RIRB timeout and couldn't
    probe any codecs.
    
    The essential difference that caused a problem was the enforced
    aligned MMIO accesses by simplification.  Since snd-hda-tegra driver
    is enabled on ARM, it enables CONFIG_SND_HDA_ALIGNED_MMIO, which makes
    the all HD-audio drivers using the aligned MMIO accesses.  While this
    is mandatory for snd-hda-tegra, it seems that snd-hda-intel on ARM
    gets broken by this access pattern.
    
    For addressing the regression, this patch introduces a new flag,
    aligned_mmio, to hdac_bus object, and applies the aligned MMIO only
    when this flag is set.  This change affects only platforms with
    CONFIG_SND_HDA_ALIGNED_MMIO set, i.e. mostly only for ARM platforms.
    
    Unfortunately the patch became a big bigger than it should be, just
    because the former calls didn't take hdac_bus object in the argument,
    hence we had to extend the call patterns.
    
    Fixes: 19abfefd4c76 ("ALSA: hda: Direct MMIO accesses")
    BugLink: https://bugzilla.opensuse.org/show_bug.cgi?id=1161152
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200120104127.28985-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f49f1ea9433fa0bbec4c62d294daec28902f1293
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Jan 22 19:28:04 2020 +0300

    platform/x86: intel_scu_ipc: Fix interrupt support
    
    commit e48b72a568bbd641c91dad354138d3c17d03ee6f upstream.
    
    Currently the driver has disabled interrupt support for Tangier but
    actually interrupt works just fine if the command is not written twice
    in a row. Also we need to ack the interrupt in the handler.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e288c5f9e83127f29c9c142359e365be0817fbd5
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Fri Jan 10 14:50:54 2020 -0800

    x86/cpu: Update cached HLE state on write to TSX_CTRL_CPUID_CLEAR
    
    commit 5efc6fa9044c3356d6046c6e1da6d02572dbed6b upstream.
    
    /proc/cpuinfo currently reports Hardware Lock Elision (HLE) feature to
    be present on boot cpu even if it was disabled during the bootup. This
    is because cpuinfo_x86->x86_capability HLE bit is not updated after TSX
    state is changed via the new MSR IA32_TSX_CTRL.
    
    Update the cached HLE bit also since it is expected to change after an
    update to CPUID_CLEAR bit in MSR IA32_TSX_CTRL.
    
    Fixes: 95c5824f75f3 ("x86/cpu: Add a "tsx=" cmdline option with TSX disabled by default")
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/2529b99546294c893dfa1c89e2b3e46da3369a59.1578685425.git.pawan.kumar.gupta@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca6b718349bb6b67769ec4720bc358f432db26d5
Author: Kevin Hao <haokexin@gmail.com>
Date:   Mon Jan 20 12:35:47 2020 +0800

    irqdomain: Fix a memory leak in irq_domain_push_irq()
    
    commit 0f394daef89b38d58c91118a2b08b8a1b316703b upstream.
    
    Fix a memory leak reported by kmemleak:
    unreferenced object 0xffff000bc6f50e80 (size 128):
      comm "kworker/23:2", pid 201, jiffies 4294894947 (age 942.132s)
      hex dump (first 32 bytes):
        00 00 00 00 41 00 00 00 86 c0 03 00 00 00 00 00  ....A...........
        00 a0 b2 c6 0b 00 ff ff 40 51 fd 10 00 80 ff ff  ........@Q......
      backtrace:
        [<00000000e62d2240>] kmem_cache_alloc_trace+0x1a4/0x320
        [<00000000279143c9>] irq_domain_push_irq+0x7c/0x188
        [<00000000d9f4c154>] thunderx_gpio_probe+0x3ac/0x438
        [<00000000fd09ec22>] pci_device_probe+0xe4/0x198
        [<00000000d43eca75>] really_probe+0xdc/0x320
        [<00000000d3ebab09>] driver_probe_device+0x5c/0xf0
        [<000000005b3ecaa0>] __device_attach_driver+0x88/0xc0
        [<000000004e5915f5>] bus_for_each_drv+0x7c/0xc8
        [<0000000079d4db41>] __device_attach+0xe4/0x140
        [<00000000883bbda9>] device_initial_probe+0x18/0x20
        [<000000003be59ef6>] bus_probe_device+0x98/0xa0
        [<0000000039b03d3f>] deferred_probe_work_func+0x74/0xa8
        [<00000000870934ce>] process_one_work+0x1c8/0x470
        [<00000000e3cce570>] worker_thread+0x1f8/0x428
        [<000000005d64975e>] kthread+0xfc/0x128
        [<00000000f0eaa764>] ret_from_fork+0x10/0x18
    
    Fixes: 495c38d3001f ("irqdomain: Add irq_domain_{push,pop}_irq() functions")
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200120043547.22271-1-haokexin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dac1633be84cbcc0b12a0ce2c197c1fc1cf14fc
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Thu Jan 30 22:13:51 2020 -0800

    lib/test_kasan.c: fix memory leak in kmalloc_oob_krealloc_more()
    
    commit 3e21d9a501bf99aee2e5835d7f34d8c823f115b5 upstream.
    
    In case memory resources for _ptr2_ were allocated, release them before
    return.
    
    Notice that in case _ptr1_ happens to be NULL, krealloc() behaves
    exactly like kmalloc().
    
    Addresses-Coverity-ID: 1490594 ("Resource leak")
    Link: http://lkml.kernel.org/r/20200123160115.GA4202@embeddedor
    Fixes: 3f15801cdc23 ("lib: add kasan test module")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9c1931ea93488afbf077ace8b420d3aa07831d7
Author: Helen Koike <helen.koike@collabora.com>
Date:   Tue Dec 17 21:00:22 2019 +0100

    media: v4l2-rect.h: fix v4l2_rect_map_inside() top/left adjustments
    
    commit f51e50db4c20d46930b33be3f208851265694f3e upstream.
    
    boundary->width and boundary->height are sizes relative to
    boundary->left and boundary->top coordinates, but they were not being
    taken into consideration to adjust r->left and r->top, leading to the
    following error:
    
    Consider the follow as initial values for boundary and r:
    
    struct v4l2_rect boundary = {
            .left = 100,
            .top = 100,
            .width = 800,
            .height = 600,
    }
    
    struct v4l2_rect r = {
            .left = 0,
            .top = 0,
            .width = 1920,
            .height = 960,
    }
    
    calling v4l2_rect_map_inside(&r, &boundary) was modifying r to:
    
    r = {
            .left = 0,
            .top = 0,
            .width = 800,
            .height = 600,
    }
    
    Which is wrongly outside the boundary rectangle, because:
    
            v4l2_rect_set_max_size(r, boundary); // r->width = 800, r->height = 600
            ...
            if (r->left + r->width > boundary->width) // true
                    r->left = boundary->width - r->width; // r->left = 800 - 800
            if (r->top + r->height > boundary->height) // true
                    r->top = boundary->height - r->height; // r->height = 600 - 600
    
    Fix this by considering top/left coordinates from boundary.
    
    Fixes: ac49de8c49d7 ("[media] v4l2-rect.h: new header with struct v4l2_rect helper functions")
    Signed-off-by: Helen Koike <helen.koike@collabora.com>
    Cc: <stable@vger.kernel.org>      # for v4.7 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d2d7df860cdbdee8f750f03ee69a0a4fedf8030
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 16 15:15:01 2019 +0100

    media: v4l2-core: compat: ignore native command codes
    
    commit 4a873f3fa5d6ca52e446d306dd7194dd86a09422 upstream.
    
    The do_video_ioctl() compat handler converts the compat command
    codes into the native ones before processing further, but this
    causes problems for 32-bit user applications that pass a command
    code that matches a 64-bit native number, which will then be
    handled the same way.
    
    Specifically, this breaks VIDIOC_DQEVENT_TIME from user space
    applications with 64-bit time_t, as the structure layout is
    the same as the native 64-bit layout on many architectures
    (x86 being the notable exception).
    
    Change the handler to use the converted command code only for
    passing into the native ioctl handler, not for deciding on the
    conversion, in order to make the compat behavior match the
    native behavior.
    
    Actual support for the 64-bit time_t version of VIDIOC_DQEVENT_TIME
    and other commands still needs to be added in a separate patch.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2952526f2436c5a5bbcb0e54c3393cb6a7df4b0
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Thu Jan 30 22:12:50 2020 -0800

    media/v4l2-core: set pages dirty upon releasing DMA buffers
    
    commit 3c7470b6f68434acae459482ab920d1e3fabd1c7 upstream.
    
    After DMA is complete, and the device and CPU caches are synchronized,
    it's still required to mark the CPU pages as dirty, if the data was
    coming from the device.  However, this driver was just issuing a bare
    put_page() call, without any set_page_dirty*() call.
    
    Fix the problem, by calling set_page_dirty_lock() if the CPU pages were
    potentially receiving data from the device.
    
    Link: http://lkml.kernel.org/r/20200107224558.2362728-11-jhubbard@nvidia.com
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: <stable@vger.kernel.org>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: Björn Töpel <bjorn.topel@intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Cc: Leon Romanovsky <leonro@mellanox.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c34f7501cd11490315fb4dbb0a7fbcf5841488d
Author: Yang Shi <yang.shi@linux.alibaba.com>
Date:   Thu Jan 30 22:11:24 2020 -0800

    mm: move_pages: report the number of non-attempted pages
    
    commit 5984fabb6e82d9ab4e6305cb99694c85d46de8ae upstream.
    
    Since commit a49bd4d71637 ("mm, numa: rework do_pages_move"), the
    semantic of move_pages() has changed to return the number of
    non-migrated pages if they were result of a non-fatal reasons (usually a
    busy page).
    
    This was an unintentional change that hasn't been noticed except for LTP
    tests which checked for the documented behavior.
    
    There are two ways to go around this change.  We can even get back to
    the original behavior and return -EAGAIN whenever migrate_pages is not
    able to migrate pages due to non-fatal reasons.  Another option would be
    to simply continue with the changed semantic and extend move_pages
    documentation to clarify that -errno is returned on an invalid input or
    when migration simply cannot succeed (e.g.  -ENOMEM, -EBUSY) or the
    number of pages that couldn't have been migrated due to ephemeral
    reasons (e.g.  page is pinned or locked for other reasons).
    
    This patch implements the second option because this behavior is in
    place for some time without anybody complaining and possibly new users
    depending on it.  Also it allows to have a slightly easier error
    handling as the caller knows that it is worth to retry when err > 0.
    
    But since the new semantic would be aborted immediately if migration is
    failed due to ephemeral reasons, need include the number of
    non-attempted pages in the return value too.
    
    Link: http://lkml.kernel.org/r/1580160527-109104-1-git-send-email-yang.shi@linux.alibaba.com
    Fixes: a49bd4d71637 ("mm, numa: rework do_pages_move")
    Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
    Suggested-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Wei Yang <richardw.yang@linux.intel.com>
    Cc: <stable@vger.kernel.org>    [4.17+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 768a6838292f5ab179d9e41f9d93c5077343740f
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Thu Jan 30 22:11:20 2020 -0800

    mm: thp: don't need care deferred split queue in memcg charge move path
    
    commit fac0516b5534897bf4c4a88daa06a8cfa5611b23 upstream.
    
    If compound is true, this means it is a PMD mapped THP.  Which implies
    the page is not linked to any defer list.  So the first code chunk will
    not be executed.
    
    Also with this reason, it would not be proper to add this page to a
    defer list.  So the second code chunk is not correct.
    
    Based on this, we should remove the defer list related code.
    
    [yang.shi@linux.alibaba.com: better patch title]
    Link: http://lkml.kernel.org/r/20200117233836.3434-1-richardw.yang@linux.intel.com
    Fixes: 87eaceb3faa5 ("mm: thp: make deferred split shrinker memcg aware")
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Suggested-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <stable@vger.kernel.org>    [5.4+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e92eed639812cf853f0aa3c16fa2f5545338ed4
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jan 30 22:11:17 2020 -0800

    mm/memory_hotplug: fix remove_memory() lockdep splat
    
    commit f1037ec0cc8ac1a450974ad9754e991f72884f48 upstream.
    
    The daxctl unit test for the dax_kmem driver currently triggers the
    (false positive) lockdep splat below.  It results from the fact that
    remove_memory_block_devices() is invoked under the mem_hotplug_lock()
    causing lockdep entanglements with cpu_hotplug_lock() and sysfs (kernfs
    active state tracking).  It is a false positive because the sysfs
    attribute path triggering the memory remove is not the same attribute
    path associated with memory-block device.
    
    sysfs_break_active_protection() is not applicable since there is no real
    deadlock conflict, instead move memory-block device removal outside the
    lock.  The mem_hotplug_lock() is not needed to synchronize the
    memory-block device removal vs the page online state, that is already
    handled by lock_device_hotplug().  Specifically, lock_device_hotplug()
    is sufficient to allow try_remove_memory() to check the offline state of
    the memblocks and be assured that any in progress online attempts are
    flushed / blocked by kernfs_drain() / attribute removal.
    
    The add_memory() path safely creates memblock devices under the
    mem_hotplug_lock().  There is no kernfs active state synchronization in
    the memblock device_register() path, so nothing to fix there.
    
    This change is only possible thanks to the recent change that refactored
    memory block device removal out of arch_remove_memory() (commit
    4c4b7f9ba948 "mm/memory_hotplug: remove memory block devices before
    arch_remove_memory()"), and David's due diligence tracking down the
    guarantees afforded by kernfs_drain().  Not flagged for -stable since
    this only impacts ongoing development and lockdep validation, not a
    runtime issue.
    
        ======================================================
        WARNING: possible circular locking dependency detected
        5.5.0-rc3+ #230 Tainted: G           OE
        ------------------------------------------------------
        lt-daxctl/6459 is trying to acquire lock:
        ffff99c7f0003510 (kn->count#241){++++}, at: kernfs_remove_by_name_ns+0x41/0x80
    
        but task is already holding lock:
        ffffffffa76a5450 (mem_hotplug_lock.rw_sem){++++}, at: percpu_down_write+0x20/0xe0
    
        which lock already depends on the new lock.
    
        the existing dependency chain (in reverse order) is:
    
        -> #2 (mem_hotplug_lock.rw_sem){++++}:
               __lock_acquire+0x39c/0x790
               lock_acquire+0xa2/0x1b0
               get_online_mems+0x3e/0xb0
               kmem_cache_create_usercopy+0x2e/0x260
               kmem_cache_create+0x12/0x20
               ptlock_cache_init+0x20/0x28
               start_kernel+0x243/0x547
               secondary_startup_64+0xb6/0xc0
    
        -> #1 (cpu_hotplug_lock.rw_sem){++++}:
               __lock_acquire+0x39c/0x790
               lock_acquire+0xa2/0x1b0
               cpus_read_lock+0x3e/0xb0
               online_pages+0x37/0x300
               memory_subsys_online+0x17d/0x1c0
               device_online+0x60/0x80
               state_store+0x65/0xd0
               kernfs_fop_write+0xcf/0x1c0
               vfs_write+0xdb/0x1d0
               ksys_write+0x65/0xe0
               do_syscall_64+0x5c/0xa0
               entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
        -> #0 (kn->count#241){++++}:
               check_prev_add+0x98/0xa40
               validate_chain+0x576/0x860
               __lock_acquire+0x39c/0x790
               lock_acquire+0xa2/0x1b0
               __kernfs_remove+0x25f/0x2e0
               kernfs_remove_by_name_ns+0x41/0x80
               remove_files.isra.0+0x30/0x70
               sysfs_remove_group+0x3d/0x80
               sysfs_remove_groups+0x29/0x40
               device_remove_attrs+0x39/0x70
               device_del+0x16a/0x3f0
               device_unregister+0x16/0x60
               remove_memory_block_devices+0x82/0xb0
               try_remove_memory+0xb5/0x130
               remove_memory+0x26/0x40
               dev_dax_kmem_remove+0x44/0x6a [kmem]
               device_release_driver_internal+0xe4/0x1c0
               unbind_store+0xef/0x120
               kernfs_fop_write+0xcf/0x1c0
               vfs_write+0xdb/0x1d0
               ksys_write+0x65/0xe0
               do_syscall_64+0x5c/0xa0
               entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
        other info that might help us debug this:
    
        Chain exists of:
          kn->count#241 --> cpu_hotplug_lock.rw_sem --> mem_hotplug_lock.rw_sem
    
         Possible unsafe locking scenario:
    
               CPU0                    CPU1
               ----                    ----
          lock(mem_hotplug_lock.rw_sem);
                                       lock(cpu_hotplug_lock.rw_sem);
                                       lock(mem_hotplug_lock.rw_sem);
          lock(kn->count#241);
    
         *** DEADLOCK ***
    
    No fixes tag as this has been a long standing issue that predated the
    addition of kernfs lockdep annotations.
    
    Link: http://lkml.kernel.org/r/157991441887.2763922.4770790047389427325.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb3f6faf5ea95c97ca823d75ac10a7ec7273fd26
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Thu Jan 30 22:11:14 2020 -0800

    mm/migrate.c: also overwrite error when it is bigger than zero
    
    commit dfe9aa23cab7880a794db9eb2d176c00ed064eb6 upstream.
    
    If we get here after successfully adding page to list, err would be 1 to
    indicate the page is queued in the list.
    
    Current code has two problems:
    
      * on success, 0 is not returned
      * on error, if add_page_for_migratioin() return 1, and the following err1
        from do_move_pages_to_node() is set, the err1 is not returned since err
        is 1
    
    And these behaviors break the user interface.
    
    Link: http://lkml.kernel.org/r/20200119065753.21694-1-richardw.yang@linux.intel.com
    Fixes: e0153fc2c760 ("mm: move_pages: return valid node id in status if the page is already on the target node").
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31cc485e2e15bf4857e38bf02c552bb0c5c8f611
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Sun Nov 24 21:31:45 2019 +0200

    utimes: Clamp the timestamps in notify_change()
    
    commit eb31e2f63d85d1bec4f7b136f317e03c03db5503 upstream.
    
    Push clamping timestamps into notify_change(), so in-kernel
    callers like nfsd and overlayfs will get similar timestamp
    set behavior as utimes.
    
    AV: get rid of clamping in ->setattr() instances; we don't need
    to bother with that there, with notify_change() doing normalization
    in all cases now (it already did for implicit case, since current_time()
    clamps).
    
    Suggested-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 42e729b9ddbb ("utimes: Clamp the timestamps before update")
    Cc: stable@vger.kernel.org # v5.4
    Cc: Deepa Dinamani <deepa.kernel@gmail.com>
    Cc: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9bcf068b491cf0d517c6f80a9428120771ba79b
Author: Pingfan Liu <kernelfans@gmail.com>
Date:   Thu Jan 30 22:11:10 2020 -0800

    mm/sparse.c: reset section's mem_map when fully deactivated
    
    commit 1f503443e7df8dc8366608b4d810ce2d6669827c upstream.
    
    After commit ba72b4c8cf60 ("mm/sparsemem: support sub-section hotplug"),
    when a mem section is fully deactivated, section_mem_map still records
    the section's start pfn, which is not used any more and will be
    reassigned during re-addition.
    
    In analogy with alloc/free pattern, it is better to clear all fields of
    section_mem_map.
    
    Beside this, it breaks the user space tool "makedumpfile" [1], which
    makes assumption that a hot-removed section has mem_map as NULL, instead
    of checking directly against SECTION_MARKED_PRESENT bit.  (makedumpfile
    will be better to change the assumption, and need a patch)
    
    The bug can be reproduced on IBM POWERVM by "drmgr -c mem -r -q 5" ,
    trigger a crash, and save vmcore by makedumpfile
    
    [1]: makedumpfile, commit e73016540293 ("[v1.6.7] Update version")
    
    Link: http://lkml.kernel.org/r/1579487594-28889-1-git-send-email-kernelfans@gmail.com
    Signed-off-by: Pingfan Liu <kernelfans@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Kazuhito Hagio <k-hagio@ab.jp.nec.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a00fb2d1c2cb076f3b3c10434fe6db31845d962
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Jan 30 22:11:04 2020 -0800

    memcg: fix a crash in wb_workfn when a device disappears
    
    commit 68f23b89067fdf187763e75a56087550624fdbee upstream.
    
    Without memcg, there is a one-to-one mapping between the bdi and
    bdi_writeback structures.  In this world, things are fairly
    straightforward; the first thing bdi_unregister() does is to shutdown
    the bdi_writeback structure (or wb), and part of that writeback ensures
    that no other work queued against the wb, and that the wb is fully
    drained.
    
    With memcg, however, there is a one-to-many relationship between the bdi
    and bdi_writeback structures; that is, there are multiple wb objects
    which can all point to a single bdi.  There is a refcount which prevents
    the bdi object from being released (and hence, unregistered).  So in
    theory, the bdi_unregister() *should* only get called once its refcount
    goes to zero (bdi_put will drop the refcount, and when it is zero,
    release_bdi gets called, which calls bdi_unregister).
    
    Unfortunately, del_gendisk() in block/gen_hd.c never got the memo about
    the Brave New memcg World, and calls bdi_unregister directly.  It does
    this without informing the file system, or the memcg code, or anything
    else.  This causes the root wb associated with the bdi to be
    unregistered, but none of the memcg-specific wb's are shutdown.  So when
    one of these wb's are woken up to do delayed work, they try to
    dereference their wb->bdi->dev to fetch the device name, but
    unfortunately bdi->dev is now NULL, thanks to the bdi_unregister()
    called by del_gendisk().  As a result, *boom*.
    
    Fortunately, it looks like the rest of the writeback path is perfectly
    happy with bdi->dev and bdi->owner being NULL, so the simplest fix is to
    create a bdi_dev_name() function which can handle bdi->dev being NULL.
    This also allows us to bulletproof the writeback tracepoints to prevent
    them from dereferencing a NULL pointer and crashing the kernel if one is
    tracing with memcg's enabled, and an iSCSI device dies or a USB storage
    stick is pulled.
    
    The most common way of triggering this will be hotremoval of a device
    while writeback with memcg enabled is going on.  It was triggering
    several times a day in a heavily loaded production environment.
    
    Google Bug Id: 145475544
    
    Link: https://lore.kernel.org/r/20191227194829.150110-1-tytso@mit.edu
    Link: http://lkml.kernel.org/r/20191228005211.163952-1-tytso@mit.edu
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: Chris Mason <clm@fb.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18ee3f0608160e7833fc63b7aa2a9a57601f6aa4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 1 09:05:30 2020 +0100

    ALSA: dummy: Fix PCM format loop in proc output
    
    commit 2acf25f13ebe8beb40e97a1bbe76f36277c64f1e upstream.
    
    The loop termination for iterating over all formats should contain
    SNDRV_PCM_FORMAT_LAST, not less than it.
    
    Fixes: 9b151fec139d ("ALSA: dummy - Add debug proc file")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200201080530.22390-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2deb561788c09798a12f3a03ab7b2c6487e2cd4c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 1 09:05:29 2020 +0100

    ALSA: usb-audio: Annotate endianess in Scarlett gen2 quirk
    
    commit d8f489355cff55b30731354317739a00cf1238bd upstream.
    
    The Scarlett gen2 mixer quirk code defines a few record types to
    communicate via USB hub, and those must be all little-endian.
    This patch changes the field types to LE to annotate endianess
    properly.  It also fixes the incorrect usage of leXX_to_cpu() in a
    couple of places, which was caught by sparse after this change.
    
    Fixes: 9e4d5c1be21f ("ALSA: usb-audio: Scarlett Gen 2 mixer interface")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200201080530.22390-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42c534106b946a8d8d9b290270ce71c726883007
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 1 09:05:28 2020 +0100

    ALSA: usb-audio: Fix endianess in descriptor validation
    
    commit f8e5f90b3a53bb75f05124ed19156388379a337d upstream.
    
    I overlooked that some fields are words and need the converts from
    LE in the recently added USB descriptor validation code.
    This patch fixes those with the proper macro usages.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200201080530.22390-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 941fffe74f6e0523ec91cca011960cfe3833eff0
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Thu Jan 9 13:17:22 2020 +0000

    usb: gadget: f_ecm: Use atomic_t to track in-flight request
    
    commit d710562e01c48d59be3f60d58b7a85958b39aeda upstream.
    
    Currently ecm->notify_req is used to flag when a request is in-flight.
    ecm->notify_req is set to NULL and when a request completes it is
    subsequently reset.
    
    This is fundamentally buggy in that the unbind logic of the ECM driver will
    unconditionally free ecm->notify_req leading to a NULL pointer dereference.
    
    Fixes: da741b8c56d6 ("usb ethernet gadget: split CDC Ethernet function")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f340c51d2448110a8b287dfbeb7b2ca43c862261
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Thu Jan 9 13:17:21 2020 +0000

    usb: gadget: f_ncm: Use atomic_t to track in-flight request
    
    commit 5b24c28cfe136597dc3913e1c00b119307a20c7e upstream.
    
    Currently ncm->notify_req is used to flag when a request is in-flight.
    ncm->notify_req is set to NULL and when a request completes it is
    subsequently reset.
    
    This is fundamentally buggy in that the unbind logic of the NCM driver will
    unconditionally free ncm->notify_req leading to a NULL pointer dereference.
    
    Fixes: 40d133d7f542 ("usb: gadget: f_ncm: convert to new function interface with backward compatibility")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf8c62b3c5001b70390d2fbdb8962d0563a94ed2
Author: Roger Quadros <rogerq@ti.com>
Date:   Mon Dec 23 08:47:35 2019 +0200

    usb: gadget: legacy: set max_speed to super-speed
    
    commit 463f67aec2837f981b0a0ce8617721ff59685c00 upstream.
    
    These interfaces do support super-speed so let's not
    limit maximum speed to high-speed.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eeac0324bc9b45776c28be2f7b4e8c264b2f2c86
Author: Peter Chen <peter.chen@nxp.com>
Date:   Thu Dec 12 16:35:03 2019 +0800

    usb: gadget: f_fs: set req->num_sgs as 0 for non-sg transfer
    
    commit d2450c6937018d40d4111fe830fa48d4ddceb8d0 upstream.
    
    The UDC core uses req->num_sgs to judge if scatter buffer list is used.
    Eg: usb_gadget_map_request_by_dev. For f_fs sync io mode, the request
    is re-used for each request, so if the 1st request->length > PAGE_SIZE,
    and the 2nd request->length is <= PAGE_SIZE, the f_fs uses the 1st
    req->num_sgs for the 2nd request, it causes the UDC core get the wrong
    req->num_sgs value (The 2nd request doesn't use sg). For f_fs async
    io mode, it is not harm to initialize req->num_sgs as 0 either, in case,
    the UDC driver doesn't zeroed request structure.
    
    Cc: Jun Li <jun.li@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: 772a7a724f69 ("usb: gadget: f_fs: Allow scatter-gather buffers")
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9948008472b32e0deddec421499e05fce7dd994
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jan 20 12:14:07 2020 -0600

    objtool: Silence build output
    
    commit 6ec14aa7a58a1c2fb303692f8cb1ff82d9abd10a upstream.
    
    The sync-check.sh script prints out the path due to a "cd -" at the end
    of the script, even on silent builds. This isn't even needed, since the
    script is executed in our build instead of sourced (so it won't change
    the working directory of the surrounding build anyway).
    
    Just remove the cd to make the build silent.
    
    Fixes: 2ffd84ae973b ("objtool: Update sync-check.sh from perf's check-headers.sh")
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/cb002857fafa8186cfb9c3e43fb62e4108a1bab9.1579543924.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a530eabca61a7889bb382ace379f61c6c3b4e9f
Author: Jun Li <jun.li@nxp.com>
Date:   Mon Jan 20 06:43:19 2020 +0000

    usb: typec: tcpci: mask event interrupts when remove driver
    
    commit 3ba76256fc4e2a0d7fb26cc95459041ea0e88972 upstream.
    
    This is to prevent any possible events generated while unregister
    tpcm port.
    
    Fixes: 74e656d6b055 ("staging: typec: Type-C Port Controller Interface driver (tcpci)")
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/1579502333-4145-1-git-send-email-jun.li@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5289945fdfba74f1157fa581cab36edf1184c2d0
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Wed Dec 18 18:14:50 2019 -0800

    usb: dwc3: gadget: Delay starting transfer
    
    commit da10bcdd6f70dc9977f2cf18f4783cf78520623a upstream.
    
    If the END_TRANSFER command hasn't completed yet, then don't send the
    START_TRANSFER command. The controller may not be able to start if
    that's the case. Some controller revisions depend on this. See
    commit 76a638f8ac0d ("usb: dwc3: gadget: wait for End Transfer to
    complete"). Let's only send START_TRANSFER command after the
    END_TRANSFER command had completed.
    
    Fixes: 3aec99154db3 ("usb: dwc3: gadget: remove DWC3_EP_END_TRANSFER_PENDING")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59267167ed1c36181fae09a9d931073316cf0911
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Wed Dec 18 18:14:44 2019 -0800

    usb: dwc3: gadget: Check END_TRANSFER completion
    
    commit c58d8bfc77a2c7f6ff6339b58c9fca7ae6f57e70 upstream.
    
    While the END_TRANSFER command is sent but not completed, any request
    dequeue during this time will cause the driver to issue the END_TRANSFER
    command. The driver needs to submit the command only once to stop the
    controller from processing further. The controller may take more time to
    process the same command multiple times unnecessarily. Let's add a flag
    DWC3_EP_END_TRANSFER_PENDING to check for this condition.
    
    Fixes: 3aec99154db3 ("usb: dwc3: gadget: remove DWC3_EP_END_TRANSFER_PENDING")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c663742088cb5bfa9d4004ced66acb3b39a3d5f0
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sat Dec 14 19:51:14 2019 -0600

    brcmfmac: Fix memory leak in brcmf_usbdev_qinit
    
    commit 4282dc057d750c6a7dd92953564b15c26b54c22c upstream.
    
    In the implementation of brcmf_usbdev_qinit() the allocated memory for
    reqs is leaking if usb_alloc_urb() fails. Release reqs in the error
    handling path.
    
    Fixes: 71bb244ba2fd ("brcm80211: fmac: add USB support for bcm43235/6/8 chipsets")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ba6c6ef34e228bf25c967011f02e1ba04d6787d
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Thu Dec 5 17:07:01 2019 +0800

    Bluetooth: btusb: Disable runtime suspend on Realtek devices
    
    commit 7ecacafc240638148567742cca41aa7144b4fe1e upstream.
    
    After commit 9e45524a0111 ("Bluetooth: btusb: Fix suspend issue for
    Realtek devices") both WiFi and Bluetooth stop working after reboot:
    [   34.322617] usb 1-8: reset full-speed USB device number 3 using xhci_hcd
    [   34.450401] usb 1-8: device descriptor read/64, error -71
    [   34.694375] usb 1-8: device descriptor read/64, error -71
    ...
    [   44.599111] rtw_pci 0000:02:00.0: failed to poll offset=0x5 mask=0x3 value=0x0
    [   44.599113] rtw_pci 0000:02:00.0: mac power on failed
    [   44.599114] rtw_pci 0000:02:00.0: failed to power on mac
    [   44.599114] rtw_pci 0000:02:00.0: leave idle state failed
    [   44.599492] rtw_pci 0000:02:00.0: failed to leave ips state
    [   44.599493] rtw_pci 0000:02:00.0: failed to leave idle state
    
    That commit removed USB_QUIRK_RESET_RESUME, which not only resets the USB
    device after resume, it also prevents the device from being runtime
    suspended by USB core. My experiment shows if the Realtek btusb device
    ever runtime suspends once, the entire wireless module becomes useless
    after reboot.
    
    So let's explicitly disable runtime suspend on Realtek btusb device for
    now.
    
    Fixes: 9e45524a0111 ("Bluetooth: btusb: Fix suspend issue for Realtek devices")
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 965b6b8ea4c169067beb4e53c4698628e735233e
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Nov 29 17:36:35 2019 +0000

    Bluetooth: btusb: fix memory leak on fw
    
    commit 3168c19d7eb17a0108a3b60ad8e8c1b18ea05c63 upstream.
    
    Currently the error return path when the call to btusb_mtk_hci_wmt_sync
    fails does not free fw.  Fix this by returning via the error_release_fw
    label that performs the free'ing.
    
    Addresses-Coverity: ("Resource leak")
    Fixes: a1c49c434e15 ("Bluetooth: btusb: Add protocol support for MediaTek MT7668U USB devices")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 634c33720a68837113abf85c0f043cd81da7463e
Author: Israel Rukshin <israelr@mellanox.com>
Date:   Tue Feb 4 14:38:10 2020 +0200

    nvmet: Fix controller use after free
    
    commit 1a3f540d63152b8db0a12de508bfa03776217d83 upstream.
    
    After nvmet_install_queue() sets sq->ctrl calling to nvmet_sq_destroy()
    reduces the controller refcount. In case nvmet_install_queue() fails,
    calling to nvmet_ctrl_put() is done twice (at nvmet_sq_destroy and
    nvmet_execute_io_connect/nvmet_execute_admin_connect) instead of once for
    the queue which leads to use after free of the controller. Fix this by set
    NULL at sq->ctrl in case of a failure at nvmet_install_queue().
    
    The bug leads to the following Call Trace:
    
    [65857.994862] refcount_t: underflow; use-after-free.
    [65858.108304] Workqueue: events nvmet_rdma_release_queue_work [nvmet_rdma]
    [65858.115557] RIP: 0010:refcount_warn_saturate+0xe5/0xf0
    [65858.208141] Call Trace:
    [65858.211203]  nvmet_sq_destroy+0xe1/0xf0 [nvmet]
    [65858.216383]  nvmet_rdma_release_queue_work+0x37/0xf0 [nvmet_rdma]
    [65858.223117]  process_one_work+0x167/0x370
    [65858.227776]  worker_thread+0x49/0x3e0
    [65858.232089]  kthread+0xf5/0x130
    [65858.235895]  ? max_active_store+0x80/0x80
    [65858.240504]  ? kthread_bind+0x10/0x10
    [65858.244832]  ret_from_fork+0x1f/0x30
    [65858.249074] ---[ end trace f82d59250b54beb7 ]---
    
    Fixes: bb1cc74790eb ("nvmet: implement valid sqhd values in completions")
    Fixes: 1672ddb8d691 ("nvmet: Add install_queue callout")
    Signed-off-by: Israel Rukshin <israelr@mellanox.com>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73ab8e6fdbed2d4be1772f84e46789cd4ef20cd6
Author: Israel Rukshin <israelr@mellanox.com>
Date:   Tue Feb 4 14:38:09 2020 +0200

    nvmet: Fix error print message at nvmet_install_queue function
    
    commit 0b87a2b795d66be7b54779848ef0f3901c5e46fc upstream.
    
    Place the arguments in the correct order.
    
    Fixes: 1672ddb8d691 ("nvmet: Add install_queue callout")
    Signed-off-by: Israel Rukshin <israelr@mellanox.com>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09d89628a6d711d3887bdc599b556081443a4dd9
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Mon Nov 4 08:22:45 2019 -0800

    rcu: Use READ_ONCE() for ->expmask in rcu_read_unlock_special()
    
    commit c51f83c315c392d9776c33eb16a2fe1349d65c7f upstream.
    
    The rcu_node structure's ->expmask field is updated only when holding the
    ->lock, but is also accessed locklessly.  This means that all ->expmask
    updates must use WRITE_ONCE() and all reads carried out without holding
    ->lock must use READ_ONCE().  This commit therefore changes the lockless
    ->expmask read in rcu_read_unlock_special() to use READ_ONCE().
    
    Reported-by: syzbot+99f4ddade3c22ab0cf23@syzkaller.appspotmail.com
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35e80e1ecf8c7af1c2457d0f067a6b2a4ac2bc67
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Mon Nov 4 08:08:30 2019 -0800

    srcu: Apply *_ONCE() to ->srcu_last_gp_end
    
    commit 844a378de3372c923909681706d62336d702531e upstream.
    
    The ->srcu_last_gp_end field is accessed from any CPU at any time
    by synchronize_srcu(), so non-initialization references need to use
    READ_ONCE() and WRITE_ONCE().  This commit therefore makes that change.
    
    Reported-by: syzbot+08f3e9d26e5541e1ecf2@syzkaller.appspotmail.com
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53e197803d428f886610ea7f2dd770484d82945d
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 9 14:21:54 2019 -0700

    rcu: Avoid data-race in rcu_gp_fqs_check_wake()
    
    commit 6935c3983b246d5fbfebd3b891c825e65c118f2d upstream.
    
    The rcu_gp_fqs_check_wake() function uses rcu_preempt_blocked_readers_cgp()
    to read ->gp_tasks while other cpus might overwrite this field.
    
    We need READ_ONCE()/WRITE_ONCE() pairs to avoid compiler
    tricks and KCSAN splats like the following :
    
    BUG: KCSAN: data-race in rcu_gp_fqs_check_wake / rcu_preempt_deferred_qs_irqrestore
    
    write to 0xffffffff85a7f190 of 8 bytes by task 7317 on cpu 0:
     rcu_preempt_deferred_qs_irqrestore+0x43d/0x580 kernel/rcu/tree_plugin.h:507
     rcu_read_unlock_special+0xec/0x370 kernel/rcu/tree_plugin.h:659
     __rcu_read_unlock+0xcf/0xe0 kernel/rcu/tree_plugin.h:394
     rcu_read_unlock include/linux/rcupdate.h:645 [inline]
     __ip_queue_xmit+0x3b0/0xa40 net/ipv4/ip_output.c:533
     ip_queue_xmit+0x45/0x60 include/net/ip.h:236
     __tcp_transmit_skb+0xdeb/0x1cd0 net/ipv4/tcp_output.c:1158
     __tcp_send_ack+0x246/0x300 net/ipv4/tcp_output.c:3685
     tcp_send_ack+0x34/0x40 net/ipv4/tcp_output.c:3691
     tcp_cleanup_rbuf+0x130/0x360 net/ipv4/tcp.c:1575
     tcp_recvmsg+0x633/0x1a30 net/ipv4/tcp.c:2179
     inet_recvmsg+0xbb/0x250 net/ipv4/af_inet.c:838
     sock_recvmsg_nosec net/socket.c:871 [inline]
     sock_recvmsg net/socket.c:889 [inline]
     sock_recvmsg+0x92/0xb0 net/socket.c:885
     sock_read_iter+0x15f/0x1e0 net/socket.c:967
     call_read_iter include/linux/fs.h:1864 [inline]
     new_sync_read+0x389/0x4f0 fs/read_write.c:414
    
    read to 0xffffffff85a7f190 of 8 bytes by task 10 on cpu 1:
     rcu_gp_fqs_check_wake kernel/rcu/tree.c:1556 [inline]
     rcu_gp_fqs_check_wake+0x93/0xd0 kernel/rcu/tree.c:1546
     rcu_gp_fqs_loop+0x36c/0x580 kernel/rcu/tree.c:1611
     rcu_gp_kthread+0x143/0x220 kernel/rcu/tree.c:1768
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 10 Comm: rcu_preempt Not tainted 5.3.0+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    [ paulmck:  Added another READ_ONCE() for RCU CPU stall warnings. ]
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf879a34898ce1f0b5aa6ff4a0a111f7e17d175f
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Mon Oct 7 18:53:18 2019 -0700

    rcu: Use *_ONCE() to protect lockless ->expmask accesses
    
    commit 15c7c972cd26d89a26788e609c53b5a465324a6c upstream.
    
    The rcu_node structure's ->expmask field is accessed locklessly when
    starting a new expedited grace period and when reporting an expedited
    RCU CPU stall warning.  This commit therefore handles the former by
    taking a snapshot of ->expmask while the lock is held and the latter
    by applying READ_ONCE() to lockless reads and WRITE_ONCE() to the
    corresponding updates.
    
    Link: https://lore.kernel.org/lkml/CANpmjNNmSOagbTpffHr4=Yedckx9Rm2NuGqC9UqE+AOz5f1-ZQ@mail.gmail.com
    Reported-by: syzbot+134336b86f728d6e55a0@syzkaller.appspotmail.com
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8771583c597b7eb2e26c9625939c689dd8cbb743
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Sat Aug 17 10:12:08 2019 -0400

    tracing: Fix sched switch start/stop refcount racy updates
    
    commit 64ae572bc7d0060429e40e1c8d803ce5eb31a0d6 upstream.
    
    Reading the sched_cmdline_ref and sched_tgid_ref initial state within
    tracing_start_sched_switch without holding the sched_register_mutex is
    racy against concurrent updates, which can lead to tracepoint probes
    being registered more than once (and thus trigger warnings within
    tracepoint.c).
    
    [ May be the fix for this bug ]
    Link: https://lore.kernel.org/r/000000000000ab6f84056c786b93@google.com
    
    Link: http://lkml.kernel.org/r/20190817141208.15226-1-mathieu.desnoyers@efficios.com
    
    Cc: stable@vger.kernel.org
    CC: Steven Rostedt (VMware) <rostedt@goodmis.org>
    CC: Joel Fernandes (Google) <joel@joelfernandes.org>
    CC: Peter Zijlstra <peterz@infradead.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Paul E. McKenney <paulmck@linux.ibm.com>
    Reported-by: syzbot+774fddf07b7ab29a1e55@syzkaller.appspotmail.com
    Fixes: d914ba37d7145 ("tracing: Add support for recording tgid of tasks")
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32843735f38b49136a055adc2702be23093ef65e
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Jan 24 10:07:42 2020 -0500

    tracing/kprobes: Have uname use __get_str() in print_fmt
    
    commit 20279420ae3a8ef4c5d9fedc360a2c37a1dbdf1b upstream.
    
    Thomas Richter reported:
    
    > Test case 66 'Use vfs_getname probe to get syscall args filenames'
    > is broken on s390, but works on x86. The test case fails with:
    >
    >  [root@m35lp76 perf]# perf test -F 66
    >  66: Use vfs_getname probe to get syscall args filenames
    >            :Recording open file:
    >  [ perf record: Woken up 1 times to write data ]
    >  [ perf record: Captured and wrote 0.004 MB /tmp/__perf_test.perf.data.TCdYj\
    >        (20 samples) ]
    >  Looking at perf.data file for vfs_getname records for the file we touched:
    >   FAILED!
    >   [root@m35lp76 perf]#
    
    The root cause was the print_fmt of the kprobe event that referenced the
    "ustring"
    
    > Setting up the kprobe event using perf command:
    >
    >  # ./perf probe "vfs_getname=getname_flags:72 pathname=filename:ustring"
    >
    > generates this format file:
    >   [root@m35lp76 perf]# cat /sys/kernel/debug/tracing/events/probe/\
    >         vfs_getname/format
    >   name: vfs_getname
    >   ID: 1172
    >   format:
    >     field:unsigned short common_type; offset:0; size:2; signed:0;
    >     field:unsigned char common_flags; offset:2; size:1; signed:0;
    >     field:unsigned char common_preempt_count; offset:3; size:1; signed:0;
    >     field:int common_pid; offset:4; size:4; signed:1;
    >
    >     field:unsigned long __probe_ip; offset:8; size:8; signed:0;
    >     field:__data_loc char[] pathname; offset:16; size:4; signed:1;
    >
    >     print fmt: "(%lx) pathname=\"%s\"", REC->__probe_ip, REC->pathname
    
    Instead of using "__get_str(pathname)" it referenced it directly.
    
    Link: http://lkml.kernel.org/r/20200124100742.4050c15e@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 88903c464321 ("tracing/probe: Add ustring type for user-space string")
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Reported-by: Thomas Richter <tmricht@linux.ibm.com>
    Tested-by: Thomas Richter <tmricht@linux.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c92cbf2e6a9c54e8e5de825e9faed0c98ad9a755
Author: Lu Shuaibing <shuaibinglu@126.com>
Date:   Mon Feb 3 17:34:46 2020 -0800

    ipc/msg.c: consolidate all xxxctl_down() functions
    
    commit 889b331724c82c11e15ba0a60979cf7bded0a26c upstream.
    
    A use of uninitialized memory in msgctl_down() because msqid64 in
    ksys_msgctl hasn't been initialized.  The local | msqid64 | is created in
    ksys_msgctl() and then passed into msgctl_down().  Along the way msqid64
    is never initialized before msgctl_down() checks msqid64->msg_qbytes.
    
    KUMSAN(KernelUninitializedMemorySantizer, a new error detection tool)
    reports:
    
    ==================================================================
    BUG: KUMSAN: use of uninitialized memory in msgctl_down+0x94/0x300
    Read of size 8 at addr ffff88806bb97eb8 by task syz-executor707/2022
    
    CPU: 0 PID: 2022 Comm: syz-executor707 Not tainted 5.2.0-rc4+ #63
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0x75/0xae
     __kumsan_report+0x17c/0x3e6
     kumsan_report+0xe/0x20
     msgctl_down+0x94/0x300
     ksys_msgctl.constprop.14+0xef/0x260
     do_syscall_64+0x7e/0x1f0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x4400e9
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffd869e0598 EFLAGS: 00000246 ORIG_RAX: 0000000000000047
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 00000000004400e9
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 0000000000000000
    R10: 00000000ffffffff R11: 0000000000000246 R12: 0000000000401970
    R13: 0000000000401a00 R14: 0000000000000000 R15: 0000000000000000
    
    The buggy address belongs to the page:
    page:ffffea0001aee5c0 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0x100000000000000()
    raw: 0100000000000000 0000000000000000 ffffffff01ae0101 0000000000000000
    raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    page dumped because: kumsan: bad access detected
    ==================================================================
    
    Syzkaller reproducer:
    msgctl$IPC_RMID(0x0, 0x0)
    
    C reproducer:
    // autogenerated by syzkaller (https://github.com/google/syzkaller)
    
    int main(void)
    {
      syscall(__NR_mmap, 0x20000000, 0x1000000, 3, 0x32, -1, 0);
      syscall(__NR_msgctl, 0, 0, 0);
      return 0;
    }
    
    [natechancellor@gmail.com: adjust indentation in ksys_msgctl]
      Link: https://github.com/ClangBuiltLinux/linux/issues/829
      Link: http://lkml.kernel.org/r/20191218032932.37479-1-natechancellor@gmail.com
    Link: http://lkml.kernel.org/r/20190613014044.24234-1-shuaibinglu@126.com
    Signed-off-by: Lu Shuaibing <shuaibinglu@126.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: NeilBrown <neilb@suse.com>
    From: Andrew Morton <akpm@linux-foundation.org>
    Subject: ipc/msg.c: consolidate all xxxctl_down() functions
    
    Each line here overflows 80 cols by exactly one character.  Delete one tab
    per line to fix.
    
    Cc: Shaohua Li <shli@fb.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a03dc5ac36ad1a266ee998c9e07da49bce2de1a1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jan 29 20:59:07 2020 +0100

    ALSA: pcm: Fix memory leak at closing a stream without hw_free
    
    commit 66f2d19f8116e16898f8d82e28573a384ddc430d upstream.
    
    ALSA PCM core recently introduced a new managed PCM buffer allocation
    mode that does allocate / free automatically at hw_params and
    hw_free.  However, it overlooked the code path directly calling
    hw_free PCM ops at releasing the PCM substream, and it may result in a
    memory leak as spotted by syzkaller when no buffer preallocation is
    used (e.g. vmalloc buffer).
    
    This patch papers over it with a slight refactoring.  The hw_free ops
    call and relevant tasks are unified in a new helper function, and call
    it from both places.
    
    Fixes: 0dba808eae26 ("ALSA: pcm: Introduce managed buffer allocation mode")
    Reported-by: syzbot+30edd0f34bfcdc548ac4@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200129195907.12197-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9d537761faca125f5c9a9250767bfed41252c09
Author: Kadlecsik József <kadlec@blackhole.kfki.hu>
Date:   Sat Jan 25 20:39:25 2020 +0100

    netfilter: ipset: fix suspicious RCU usage in find_set_and_id
    
    commit 5038517119d50ed0240059b1d7fc2faa92371c08 upstream.
    
    find_set_and_id() is called when the NFNL_SUBSYS_IPSET mutex is held.
    However, in the error path there can be a follow-up recvmsg() without
    the mutex held. Use the start() function of struct netlink_dump_control
    instead of dump() to verify and report if the specified set does not
    exist.
    
    Thanks to Pablo Neira Ayuso for helping me to understand the subleties
    of the netlink protocol.
    
    Reported-by: syzbot+fc69d7cb21258ab4ae4d@syzkaller.appspotmail.com
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26cea818589d7efc23ec064a397e6225989f3542
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 21 11:28:10 2019 +0100

    mfd: dln2: More sanity checking for endpoints
    
    commit 2b8bd606b1e60ca28c765f69c1eedd7d2a2e9dca upstream.
    
    It is not enough to check for the number of endpoints.
    The types must also be correct.
    
    Reported-and-tested-by: syzbot+48a2851be24583b864dc@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50142f89e13623ffd976b85cb1ccd3db2c430e9f
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 8 16:48:38 2019 +0100

    media: uvcvideo: Avoid cyclic entity chains due to malformed USB descriptors
    
    commit 68035c80e129c4cfec659aac4180354530b26527 upstream.
    
    Way back in 2017, fuzzing the 4.14-rc2 USB stack with syzkaller kicked
    up the following WARNING from the UVC chain scanning code:
    
      | list_add double add: new=ffff880069084010, prev=ffff880069084010,
      | next=ffff880067d22298.
      | ------------[ cut here ]------------
      | WARNING: CPU: 1 PID: 1846 at lib/list_debug.c:31 __list_add_valid+0xbd/0xf0
      | Modules linked in:
      | CPU: 1 PID: 1846 Comm: kworker/1:2 Not tainted
      | 4.14.0-rc2-42613-g1488251d1a98 #238
      | Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      | Workqueue: usb_hub_wq hub_event
      | task: ffff88006b01ca40 task.stack: ffff880064358000
      | RIP: 0010:__list_add_valid+0xbd/0xf0 lib/list_debug.c:29
      | RSP: 0018:ffff88006435ddd0 EFLAGS: 00010286
      | RAX: 0000000000000058 RBX: ffff880067d22298 RCX: 0000000000000000
      | RDX: 0000000000000058 RSI: ffffffff85a58800 RDI: ffffed000c86bbac
      | RBP: ffff88006435dde8 R08: 1ffff1000c86ba52 R09: 0000000000000000
      | R10: 0000000000000002 R11: 0000000000000000 R12: ffff880069084010
      | R13: ffff880067d22298 R14: ffff880069084010 R15: ffff880067d222a0
      | FS:  0000000000000000(0000) GS:ffff88006c900000(0000) knlGS:0000000000000000
      | CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      | CR2: 0000000020004ff2 CR3: 000000006b447000 CR4: 00000000000006e0
      | Call Trace:
      |  __list_add ./include/linux/list.h:59
      |  list_add_tail+0x8c/0x1b0 ./include/linux/list.h:92
      |  uvc_scan_chain_forward.isra.8+0x373/0x416
      | drivers/media/usb/uvc/uvc_driver.c:1471
      |  uvc_scan_chain drivers/media/usb/uvc/uvc_driver.c:1585
      |  uvc_scan_device drivers/media/usb/uvc/uvc_driver.c:1769
      |  uvc_probe+0x77f2/0x8f00 drivers/media/usb/uvc/uvc_driver.c:2104
    
    Looking into the output from usbmon, the interesting part is the
    following data packet:
    
      ffff880069c63e00 30710169 C Ci:1:002:0 0 143 = 09028f00 01030080
      00090403 00000e01 00000924 03000103 7c003328 010204db
    
    If we drop the lead configuration and interface descriptors, we're left
    with an output terminal descriptor describing a generic display:
    
      /* Output terminal descriptor */
      buf[0]        09
      buf[1]        24
      buf[2]        03      /* UVC_VC_OUTPUT_TERMINAL */
      buf[3]        00      /* ID */
      buf[4]        01      /* type == 0x0301 (UVC_OTT_DISPLAY) */
      buf[5]        03
      buf[6]        7c
      buf[7]        00      /* source ID refers to self! */
      buf[8]        33
    
    The problem with this descriptor is that it is self-referential: the
    source ID of 0 matches itself! This causes the 'struct uvc_entity'
    representing the display to be added to its chain list twice during
    'uvc_scan_chain()': once via 'uvc_scan_chain_entity()' when it is
    processed directly from the 'dev->entities' list and then again
    immediately afterwards when trying to follow the source ID in
    'uvc_scan_chain_forward()'
    
    Add a check before adding an entity to a chain list to ensure that the
    entity is not already part of a chain.
    
    Link: https://lore.kernel.org/linux-media/CAAeHK+z+Si69jUR+N-SjN9q4O+o5KFiNManqEa-PjUta7EOb7A@mail.gmail.com/
    
    Cc: <stable@vger.kernel.org>
    Fixes: c0efd232929c ("V4L/DVB (8145a): USB Video Class driver")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5f751756e8791bac51de067be8cfa700e73be32
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sun Feb 2 02:41:37 2020 -0500

    bnxt_en: Fix logic that disables Bus Master during firmware reset.
    
    [ Upstream commit d407302895d3f3ca3a333c711744a95e0b1b0150 ]
    
    The current logic that calls pci_disable_device() in __bnxt_close_nic()
    during firmware reset is flawed.  If firmware is still alive, we're
    disabling the device too early, causing some firmware commands to
    not reach the firmware.
    
    Fix it by moving the logic to bnxt_reset_close().  If firmware is
    in fatal condition, we call pci_disable_device() before we free
    any of the rings to prevent DMA corruption of the freed rings.  If
    firmware is still alive, we call pci_disable_device() after the
    last firmware message has been sent.
    
    Fixes: 3bc7d4a352ef ("bnxt_en: Add BNXT_STATE_IN_FW_RESET state.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a788185674452fcf81b0a0b43dba8e13e31c5060
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 1 16:43:22 2020 +0000

    netdevsim: fix stack-out-of-bounds in nsim_dev_debugfs_init()
    
    [ Upstream commit 6fb8852b1298200da39bd85788bc5755d1d56f32 ]
    
    When netdevsim dev is being created, a debugfs directory is created.
    The variable "dev_ddir_name" is 16bytes device name pointer and device
    name is "netdevsim<dev id>".
    The maximum dev id length is 10.
    So, 16bytes for device name isn't enough.
    
    Test commands:
        modprobe netdevsim
        echo "1000000000 0" > /sys/bus/netdevsim/new_device
    
    Splat looks like:
    [  249.622710][  T900] BUG: KASAN: stack-out-of-bounds in number+0x824/0x880
    [  249.623658][  T900] Write of size 1 at addr ffff88804c527988 by task bash/900
    [  249.624521][  T900]
    [  249.624830][  T900] CPU: 1 PID: 900 Comm: bash Not tainted 5.5.0+ #322
    [  249.625691][  T900] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  249.626712][  T900] Call Trace:
    [  249.627103][  T900]  dump_stack+0x96/0xdb
    [  249.627639][  T900]  ? number+0x824/0x880
    [  249.628173][  T900]  print_address_description.constprop.5+0x1be/0x360
    [  249.629022][  T900]  ? number+0x824/0x880
    [  249.629569][  T900]  ? number+0x824/0x880
    [  249.630105][  T900]  __kasan_report+0x12a/0x170
    [  249.630717][  T900]  ? number+0x824/0x880
    [  249.631201][  T900]  kasan_report+0xe/0x20
    [  249.631723][  T900]  number+0x824/0x880
    [  249.632235][  T900]  ? put_dec+0xa0/0xa0
    [  249.632716][  T900]  ? rcu_read_lock_sched_held+0x90/0xc0
    [  249.633392][  T900]  vsnprintf+0x63c/0x10b0
    [  249.633983][  T900]  ? pointer+0x5b0/0x5b0
    [  249.634543][  T900]  ? mark_lock+0x11d/0xc40
    [  249.635200][  T900]  sprintf+0x9b/0xd0
    [  249.635750][  T900]  ? scnprintf+0xe0/0xe0
    [  249.636370][  T900]  nsim_dev_probe+0x63c/0xbf0 [netdevsim]
    [ ... ]
    
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Fixes: ab1d0cc004d7 ("netdevsim: change debugfs tree topology")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56fde5e45c486121a7ccae03825eb2178f099096
Author: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date:   Sat Feb 1 13:43:01 2020 +0100

    MAINTAINERS: correct entries for ISDN/mISDN section
    
    [ Upstream commit dff6bc1bfd462b76dc13ec19dedc2c134a62ac59 ]
    
    Commit 6d97985072dc ("isdn: move capi drivers to staging") cleaned up the
    isdn drivers and split the MAINTAINERS section for ISDN, but missed to add
    the terminal slash for the two directories mISDN and hardware. Hence, all
    files in those directories were not part of the new ISDN/mISDN SUBSYSTEM,
    but were considered to be part of "THE REST".
    
    Rectify the situation, and while at it, also complete the section with two
    further build files that belong to that subsystem.
    
    This was identified with a small script that finds all files belonging to
    "THE REST" according to the current MAINTAINERS file, and I investigated
    upon its output.
    
    Fixes: 6d97985072dc ("isdn: move capi drivers to staging")
    Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d68522bb42d67350db0e5225976fd1c723d9a39b
Author: Shannon Nelson <snelson@pensando.io>
Date:   Thu Jan 30 10:07:06 2020 -0800

    ionic: fix rxq comp packet type mask
    
    [ Upstream commit b5ce31b5e11b768b7d685b2bab7db09ad5549493 ]
    
    Be sure to include all the packet type bits in the mask.
    
    Fixes: fbfb8031533c ("ionic: Add hardware init and device commands")
    Signed-off-by: Shannon Nelson <snelson@pensando.io>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28067572918ac498213dd930ef8a574a7a748ec0
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Feb 2 02:41:36 2020 -0500

    bnxt_en: Fix RDMA driver failure with SRIOV after firmware reset.
    
    [ Upstream commit 12de2eadf87825c3990c1aa68b5e93101ca2f043 ]
    
    bnxt_ulp_start() needs to be called before SRIOV is re-enabled after
    firmware reset.  Re-enabling SRIOV may consume all the resources and
    may cause the RDMA driver to fail to get MSIX and other resources.
    Fix it by calling bnxt_ulp_start() first before calling
    bnxt_reenable_sriov().
    
    We re-arrange the logic so that we call bnxt_ulp_start() and
    bnxt_reenable_sriov() in proper sequence in bnxt_fw_reset_task() and
    bnxt_open().  The former is the normal coordinated firmware reset sequence
    and the latter is firmware reset while the function is down.  This new
    logic is now more straight forward and will now fix both scenarios.
    
    Fixes: f3a6d206c25a ("bnxt_en: Call bnxt_ulp_stop()/bnxt_ulp_start() during error recovery.")
    Reported-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1462a0e882a746782fa873aea082bebe7947a3c
Author: Michael Walle <michael@walle.cc>
Date:   Thu Jan 30 18:54:02 2020 +0100

    net: phy: at803x: disable vddio regulator
    
    [ Upstream commit 2318ca8aef3877da2b16b92edce47a497370a86e ]
    
    The probe() might enable a VDDIO regulator, which needs to be disabled
    again before calling regulator_put(). Add a remove() function.
    
    Fixes: 2f664823a470 ("net: phy: at803x: add device tree binding")
    Signed-off-by: Michael Walle <michael@walle.cc>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc2726df02bdfe34016a099eda4836a3b8744f55
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Feb 2 02:41:35 2020 -0500

    bnxt_en: Refactor logic to re-enable SRIOV after firmware reset detected.
    
    [ Upstream commit c16d4ee0e397163fe7ceac281eaa952e63fadec7 ]
    
    Put the current logic in bnxt_open() to re-enable SRIOV after detecting
    firmware reset into a new function bnxt_reenable_sriov().  This call
    needs to be invoked in the firmware reset path also in the next patch.
    
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce056ed455a12c838b8851c80ff96e6b7be010b3
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:36 2020 +0000

    rxrpc: Fix NULL pointer deref due to call->conn being cleared on disconnect
    
    [ Upstream commit 5273a191dca65a675dc0bcf3909e59c6933e2831 ]
    
    When a call is disconnected, the connection pointer from the call is
    cleared to make sure it isn't used again and to prevent further attempted
    transmission for the call.  Unfortunately, there might be a daemon trying
    to use it at the same time to transmit a packet.
    
    Fix this by keeping call->conn set, but setting a flag on the call to
    indicate disconnection instead.
    
    Remove also the bits in the transmission functions where the conn pointer is
    checked and a ref taken under spinlock as this is now redundant.
    
    Fixes: 8d94aa381dab ("rxrpc: Calls shouldn't hold socket refs")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d80983dd0ec4457a8f8ec862a151b3e4c875f77
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:36 2020 +0000

    rxrpc: Fix missing active use pinning of rxrpc_local object
    
    [ Upstream commit 04d36d748fac349b068ef621611f454010054c58 ]
    
    The introduction of a split between the reference count on rxrpc_local
    objects and the usage count didn't quite go far enough.  A number of kernel
    work items need to make use of the socket to perform transmission.  These
    also need to get an active count on the local object to prevent the socket
    from being closed.
    
    Fix this by getting the active count in those places.
    
    Also split out the raw active count get/put functions as these places tend
    to hold refs on the rxrpc_local object already, so getting and putting an
    extra object ref is just a waste of time.
    
    The problem can lead to symptoms like:
    
        BUG: kernel NULL pointer dereference, address: 0000000000000018
        ..
        CPU: 2 PID: 818 Comm: kworker/u9:0 Not tainted 5.5.0-fscache+ #51
        ...
        RIP: 0010:selinux_socket_sendmsg+0x5/0x13
        ...
        Call Trace:
         security_socket_sendmsg+0x2c/0x3e
         sock_sendmsg+0x1a/0x46
         rxrpc_send_keepalive+0x131/0x1ae
         rxrpc_peer_keepalive_worker+0x219/0x34b
         process_one_work+0x18e/0x271
         worker_thread+0x1a3/0x247
         kthread+0xe6/0xeb
         ret_from_fork+0x1f/0x30
    
    Fixes: 730c5fd42c1e ("rxrpc: Fix local endpoint refcounting")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44bb0364577ce6daa0056c225d90ae5f8f1da940
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:36 2020 +0000

    rxrpc: Fix insufficient receive notification generation
    
    [ Upstream commit f71dbf2fb28489a79bde0dca1c8adfb9cdb20a6b ]
    
    In rxrpc_input_data(), rxrpc_notify_socket() is called if the base sequence
    number of the packet is immediately following the hard-ack point at the end
    of the function.  However, this isn't sufficient, since the recvmsg side
    may have been advancing the window and then overrun the position in which
    we're adding - at which point rx_hard_ack >= seq0 and no notification is
    generated.
    
    Fix this by always generating a notification at the end of the input
    function.
    
    Without this, a long call may stall, possibly indefinitely.
    
    Fixes: 248f219cb8bc ("rxrpc: Rewrite the data and ack handling code")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3eb9a5260bb65faf4b4cf7862fdd877699dc5256
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:35 2020 +0000

    rxrpc: Fix use-after-free in rxrpc_put_local()
    
    [ Upstream commit fac20b9e738523fc884ee3ea5be360a321cd8bad ]
    
    Fix rxrpc_put_local() to not access local->debug_id after calling
    atomic_dec_return() as, unless that returned n==0, we no longer have the
    right to access the object.
    
    Fixes: 06d9532fa6b3 ("rxrpc: Fix read-after-free in rxrpc_queue_local()")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fafacfebadb4ac0f967a3eca035758156f323823
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 15:27:04 2020 -0800

    cls_rsvp: fix rsvp_policy
    
    [ Upstream commit cb3c0e6bdf64d0d124e94ce43cbe4ccbb9b37f51 ]
    
    NLA_BINARY can be confusing, since .len value represents
    the max size of the blob.
    
    cls_rsvp really wants user space to provide long enough data
    for TCA_RSVP_DST and TCA_RSVP_SRC attributes.
    
    BUG: KMSAN: uninit-value in rsvp_get net/sched/cls_rsvp.h:258 [inline]
    BUG: KMSAN: uninit-value in gen_handle net/sched/cls_rsvp.h:402 [inline]
    BUG: KMSAN: uninit-value in rsvp_change+0x1ae9/0x4220 net/sched/cls_rsvp.h:572
    CPU: 1 PID: 13228 Comm: syz-executor.1 Not tainted 5.5.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     rsvp_get net/sched/cls_rsvp.h:258 [inline]
     gen_handle net/sched/cls_rsvp.h:402 [inline]
     rsvp_change+0x1ae9/0x4220 net/sched/cls_rsvp.h:572
     tc_new_tfilter+0x31fe/0x5010 net/sched/cls_api.c:2104
     rtnetlink_rcv_msg+0xcb7/0x1570 net/core/rtnetlink.c:5415
     netlink_rcv_skb+0x451/0x650 net/netlink/af_netlink.c:2477
     rtnetlink_rcv+0x50/0x60 net/core/rtnetlink.c:5442
     netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
     netlink_unicast+0xf9e/0x1100 net/netlink/af_netlink.c:1328
     netlink_sendmsg+0x1248/0x14d0 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg net/socket.c:659 [inline]
     ____sys_sendmsg+0x12b6/0x1350 net/socket.c:2330
     ___sys_sendmsg net/socket.c:2384 [inline]
     __sys_sendmsg+0x451/0x5f0 net/socket.c:2417
     __do_sys_sendmsg net/socket.c:2426 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2424
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2424
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45b349
    Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f269d43dc78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f269d43e6d4 RCX: 000000000045b349
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000075bfc8 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000000009c2 R14: 00000000004cb338 R15: 000000000075bfd4
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:144 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:127
     kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:82
     slab_alloc_node mm/slub.c:2774 [inline]
     __kmalloc_node_track_caller+0xb40/0x1200 mm/slub.c:4382
     __kmalloc_reserve net/core/skbuff.c:141 [inline]
     __alloc_skb+0x2fd/0xac0 net/core/skbuff.c:209
     alloc_skb include/linux/skbuff.h:1049 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1174 [inline]
     netlink_sendmsg+0x7d3/0x14d0 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg net/socket.c:659 [inline]
     ____sys_sendmsg+0x12b6/0x1350 net/socket.c:2330
     ___sys_sendmsg net/socket.c:2384 [inline]
     __sys_sendmsg+0x451/0x5f0 net/socket.c:2417
     __do_sys_sendmsg net/socket.c:2426 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2424
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2424
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 6fa8c0144b77 ("[NET_SCHED]: Use nla_policy for attribute validation in classifiers")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82ad01d58ca8dbf119b957af176b418bbe598b4d
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 10:44:50 2020 -0800

    tcp: clear tp->segs_{in|out} in tcp_disconnect()
    
    [ Upstream commit 784f8344de750a41344f4bbbebb8507a730fc99c ]
    
    tp->segs_in and tp->segs_out need to be cleared in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: 2efd055c53c0 ("tcp: add tcpi_segs_in and tcpi_segs_out to tcp_info")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f752c85fcd2d3daa1a5a1fe5e6f621b7e497f3
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 10:32:41 2020 -0800

    tcp: clear tp->data_segs{in|out} in tcp_disconnect()
    
    [ Upstream commit db7ffee6f3eb3683cdcaeddecc0a630a14546fe3 ]
    
    tp->data_segs_in and tp->data_segs_out need to be cleared
    in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: a44d6eacdaf5 ("tcp: Add RFC4898 tcpEStatsPerfDataSegsOut/In")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b90298578bd247824c76bb194076a2a21a14432
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 10:22:47 2020 -0800

    tcp: clear tp->delivered in tcp_disconnect()
    
    [ Upstream commit 2fbdd56251b5c62f96589f39eded277260de7267 ]
    
    tp->delivered needs to be cleared in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: ddf1af6fa00e ("tcp: new delivery accounting")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9fda81bde3d2c0bcf9110a08d271956dca9d8c8
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 09:14:47 2020 -0800

    tcp: clear tp->total_retrans in tcp_disconnect()
    
    [ Upstream commit c13c48c00a6bc1febc73902505bdec0967bd7095 ]
    
    total_retrans needs to be cleared in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: SeongJae Park <sjpark@amazon.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67c154911f78364676e7fafe45acfd2d6fa731a8
Author: Nicolin Chen <nicoleotsuka@gmail.com>
Date:   Fri Jan 31 18:01:24 2020 -0800

    net: stmmac: Delete txtimer in suspend()
    
    [ Upstream commit 14b41a2959fbaa50932699d32ceefd6643abacc6 ]
    
    When running v5.5 with a rootfs on NFS, memory abort may happen in
    the system resume stage:
     Unable to handle kernel paging request at virtual address dead00000000012a
     [dead00000000012a] address between user and kernel address ranges
     pc : run_timer_softirq+0x334/0x3d8
     lr : run_timer_softirq+0x244/0x3d8
     x1 : ffff800011cafe80 x0 : dead000000000122
     Call trace:
      run_timer_softirq+0x334/0x3d8
      efi_header_end+0x114/0x234
      irq_exit+0xd0/0xd8
      __handle_domain_irq+0x60/0xb0
      gic_handle_irq+0x58/0xa8
      el1_irq+0xb8/0x180
      arch_cpu_idle+0x10/0x18
      do_idle+0x1d8/0x2b0
      cpu_startup_entry+0x24/0x40
      secondary_start_kernel+0x1b4/0x208
     Code: f9000693 a9400660 f9000020 b4000040 (f9000401)
     ---[ end trace bb83ceeb4c482071 ]---
     Kernel panic - not syncing: Fatal exception in interrupt
     SMP: stopping secondary CPUs
     SMP: failed to stop secondary CPUs 2-3
     Kernel Offset: disabled
     CPU features: 0x00002,2300aa30
     Memory Limit: none
     ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    It's found that stmmac_xmit() and stmmac_resume() sometimes might
    run concurrently, possibly resulting in a race condition between
    mod_timer() and setup_timer(), being called by stmmac_xmit() and
    stmmac_resume() respectively.
    
    Since the resume() runs setup_timer() every time, it'd be safer to
    have del_timer_sync() in the suspend() as the counterpart.
    
    Signed-off-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 200c918d12c6350d7ed4f636bf2d51e716c803cc
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Feb 2 02:41:38 2020 -0500

    bnxt_en: Fix TC queue mapping.
    
    [ Upstream commit 18e4960c18f484ac288f41b43d0e6c4c88e6ea78 ]
    
    The driver currently only calls netdev_set_tc_queue when the number of
    TCs is greater than 1.  Instead, the comparison should be greater than
    or equal to 1.  Even with 1 TC, we need to set the queue mapping.
    
    This bug can cause warnings when the number of TCs is changed back to 1.
    
    Fixes: 7809592d3e2e ("bnxt_en: Enable MSIX early in bnxt_init_one().")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b265bc503a7f0af8809a7ea378a93d9e2ecfe6c8
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Wed Jan 29 12:50:53 2020 +0100

    net: mvneta: fix XDP support if sw bm is used as fallback
    
    [ Upstream commit 44efc78d0e464ce70b45b165c005f8bedc17952e ]
    
    In order to fix XDP support if sw buffer management is used as fallback
    for hw bm devices, define MVNETA_SKB_HEADROOM as maximum between
    XDP_PACKET_HEADROOM and NET_SKB_PAD and let the hw aligns the IP header
    to 4-byte boundary.
    Fix rx_offset_correction initialization if mvneta_bm_port_init fails in
    mvneta_resume routine
    
    Fixes: 0db51da7a8e9 ("net: mvneta: add basic XDP support")
    Tested-by: Sven Auhagen <sven.auhagen@voleatech.de>
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4860ae6a15fc9f40d0121da36a5d3b31818c8849
Author: Leon Romanovsky <leon@kernel.org>
Date:   Thu Jan 30 14:59:49 2020 +0200

    net/core: Do not clear VF index for node/port GUIDs query
    
    [ Upstream commit 9fbf082f569980ddd7cab348e0a118678db0e47e ]
    
    VF numbers were assigned to node_guid and port_guid, but cleared
    right before such query calls were issued. It caused to return
    node/port GUIDs of VF index 0 for all VFs.
    
    Fixes: 30aad41721e0 ("net/core: Add support for getting VF GUIDs")
    Reported-by: Adrian Chiris <adrianc@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c66ff8d08f81bcf8e8cb22e31e39c051b15336a
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Feb 2 21:14:35 2020 -0800

    net_sched: fix an OOB access in cls_tcindex
    
    [ Upstream commit 599be01ee567b61f4471ee8078870847d0a11e8e ]
    
    As Eric noticed, tcindex_alloc_perfect_hash() uses cp->hash
    to compute the size of memory allocation, but cp->hash is
    set again after the allocation, this caused an out-of-bound
    access.
    
    So we have to move all cp->hash initialization and computation
    before the memory allocation. Move cp->mask and cp->shift together
    as cp->hash may need them for computation too.
    
    Reported-and-tested-by: syzbot+35d4dea36c387813ed31@syzkaller.appspotmail.com
    Fixes: 331b72922c5f ("net: sched: RCU cls_tcindex")
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0af24b263f1e348332a80fbefa58ba34a2cabd3
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Feb 3 10:15:07 2020 -0800

    net: hsr: fix possible NULL deref in hsr_handle_frame()
    
    [ Upstream commit 2b5b8251bc9fe2f9118411f037862ee17cf81e97 ]
    
    hsr_port_get_rcu() can return NULL, so we need to be careful.
    
    general protection fault, probably for non-canonical address 0xdffffc0000000006: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000030-0x0000000000000037]
    CPU: 1 PID: 10249 Comm: syz-executor.5 Not tainted 5.5.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__read_once_size include/linux/compiler.h:199 [inline]
    RIP: 0010:hsr_addr_is_self+0x86/0x330 net/hsr/hsr_framereg.c:44
    Code: 04 00 f3 f3 f3 65 48 8b 04 25 28 00 00 00 48 89 45 d0 31 c0 e8 6b ff 94 f9 4c 89 f2 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 75 02 00 00 48 8b 43 30 49 39 c6 49 89 47 c0 0f
    RSP: 0018:ffffc90000da8a90 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff87e0cc33
    RDX: 0000000000000006 RSI: ffffffff87e035d5 RDI: 0000000000000000
    RBP: ffffc90000da8b20 R08: ffff88808e7de040 R09: ffffed1015d2707c
    R10: ffffed1015d2707b R11: ffff8880ae9383db R12: ffff8880a689bc5e
    R13: 1ffff920001b5153 R14: 0000000000000030 R15: ffffc90000da8af8
    FS:  00007fd7a42be700(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b32338000 CR3: 00000000a928c000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     hsr_handle_frame+0x1c5/0x630 net/hsr/hsr_slave.c:31
     __netif_receive_skb_core+0xfbc/0x30b0 net/core/dev.c:5099
     __netif_receive_skb_one_core+0xa8/0x1a0 net/core/dev.c:5196
     __netif_receive_skb+0x2c/0x1d0 net/core/dev.c:5312
     process_backlog+0x206/0x750 net/core/dev.c:6144
     napi_poll net/core/dev.c:6582 [inline]
     net_rx_action+0x508/0x1120 net/core/dev.c:6650
     __do_softirq+0x262/0x98c kernel/softirq.c:292
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1082
     </IRQ>
    
    Fixes: c5a759117210 ("net/hsr: Use list_head (and rcu) instead of array for slave devices.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44ddb22f7cb8f5134654356f68552a263a5a00a4
Author: Ridge Kennedy <ridge.kennedy@alliedtelesis.co.nz>
Date:   Tue Feb 4 12:24:00 2020 +1300

    l2tp: Allow duplicate session creation with UDP
    
    [ Upstream commit 0d0d9a388a858e271bb70e71e99e7fe2a6fd6f64 ]
    
    In the past it was possible to create multiple L2TPv3 sessions with the
    same session id as long as the sessions belonged to different tunnels.
    The resulting sessions had issues when used with IP encapsulated tunnels,
    but worked fine with UDP encapsulated ones. Some applications began to
    rely on this behaviour to avoid having to negotiate unique session ids.
    
    Some time ago a change was made to require session ids to be unique across
    all tunnels, breaking the applications making use of this "feature".
    
    This change relaxes the duplicate session id check to allow duplicates
    if both of the colliding sessions belong to UDP encapsulated tunnels.
    
    Fixes: dbdbc73b4478 ("l2tp: fix duplicate session creation")
    Signed-off-by: Ridge Kennedy <ridge.kennedy@alliedtelesis.co.nz>
    Acked-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a1014134c222fe0ada2913a37d5846835b5e907
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Feb 4 03:24:59 2020 +0000

    gtp: use __GFP_NOWARN to avoid memalloc warning
    
    [ Upstream commit bd5cd35b782abf5437fbd01dfaee12437d20e832 ]
    
    gtp hashtable size is received by user-space.
    So, this hashtable size could be too large. If so, kmalloc will internally
    print a warning message.
    This warning message is actually not necessary for the gtp module.
    So, this patch adds __GFP_NOWARN to avoid this message.
    
    Splat looks like:
    [ 2171.200049][ T1860] WARNING: CPU: 1 PID: 1860 at mm/page_alloc.c:4713 __alloc_pages_nodemask+0x2f3/0x740
    [ 2171.238885][ T1860] Modules linked in: gtp veth openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv]
    [ 2171.262680][ T1860] CPU: 1 PID: 1860 Comm: gtp-link Not tainted 5.5.0+ #321
    [ 2171.263567][ T1860] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [ 2171.264681][ T1860] RIP: 0010:__alloc_pages_nodemask+0x2f3/0x740
    [ 2171.265332][ T1860] Code: 64 fe ff ff 65 48 8b 04 25 c0 0f 02 00 48 05 f0 12 00 00 41 be 01 00 00 00 49 89 47 0
    [ 2171.267301][ T1860] RSP: 0018:ffff8880b51af1f0 EFLAGS: 00010246
    [ 2171.268320][ T1860] RAX: ffffed1016a35e43 RBX: 0000000000000000 RCX: 0000000000000000
    [ 2171.269517][ T1860] RDX: 0000000000000000 RSI: 000000000000000b RDI: 0000000000000000
    [ 2171.270305][ T1860] RBP: 0000000000040cc0 R08: ffffed1018893109 R09: dffffc0000000000
    [ 2171.275973][ T1860] R10: 0000000000000001 R11: ffffed1018893108 R12: 1ffff11016a35e43
    [ 2171.291039][ T1860] R13: 000000000000000b R14: 000000000000000b R15: 00000000000f4240
    [ 2171.292328][ T1860] FS:  00007f53cbc83740(0000) GS:ffff8880da000000(0000) knlGS:0000000000000000
    [ 2171.293409][ T1860] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 2171.294586][ T1860] CR2: 000055f540014508 CR3: 00000000b49f2004 CR4: 00000000000606e0
    [ 2171.295424][ T1860] Call Trace:
    [ 2171.295756][ T1860]  ? mark_held_locks+0xa5/0xe0
    [ 2171.296659][ T1860]  ? __alloc_pages_slowpath+0x21b0/0x21b0
    [ 2171.298283][ T1860]  ? gtp_encap_enable_socket+0x13e/0x400 [gtp]
    [ 2171.298962][ T1860]  ? alloc_pages_current+0xc1/0x1a0
    [ 2171.299475][ T1860]  kmalloc_order+0x22/0x80
    [ 2171.299936][ T1860]  kmalloc_order_trace+0x1d/0x140
    [ 2171.300437][ T1860]  __kmalloc+0x302/0x3a0
    [ 2171.300896][ T1860]  gtp_newlink+0x293/0xba0 [gtp]
    [ ... ]
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 751c2214bcdf5a9b18600b57b61fca88db43d0cb
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Mon Jan 27 04:56:22 2020 -0500

    bnxt_en: Move devlink_register before registering netdev
    
    [ Upstream commit cda2cab0771183932d6ba73c5ac63bb63decdadf ]
    
    Latest kernels get the phys_port_name via devlink, if
    ndo_get_phys_port_name is not defined. To provide the phys_port_name
    correctly, register devlink before registering netdev.
    
    Also call devlink_port_type_eth_set() after registering netdev as
    devlink port updates the netdev structure and notifies user.
    
    Cc: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6504ed06af576f5b9d697a7acf543e704d23f34
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 14 14:26:14 2020 +0100

    sparc32: fix struct ipc64_perm type definition
    
    [ Upstream commit 34ca70ef7d3a9fa7e89151597db5e37ae1d429b4 ]
    
    As discussed in the strace issue tracker, it appears that the sparc32
    sysvipc support has been broken for the past 11 years. It was however
    working in compat mode, which is how it must have escaped most of the
    regular testing.
    
    The problem is that a cleanup patch inadvertently changed the uid/gid
    fields in struct ipc64_perm from 32-bit types to 16-bit types in uapi
    headers.
    
    Both glibc and uclibc-ng still use the original types, so they should
    work fine with compat mode, but not natively.  Change the definitions
    to use __kernel_uid32_t and __kernel_gid32_t again.
    
    Fixes: 83c86984bff2 ("sparc: unify ipcbuf.h")
    Link: https://github.com/strace/strace/issues/116
    Cc: <stable@vger.kernel.org> # v2.6.29
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Cc: "Dmitry V . Levin" <ldv@altlinux.org>
    Cc: Rich Felker <dalias@libc.org>
    Cc: libc-alpha@sourceware.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
