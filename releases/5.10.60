commit 2c5bd949b1df3f9fb109107b3d766e2ebabd7238
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 18 08:59:19 2021 +0200

    Linux 5.10.60
    
    Link: https://lore.kernel.org/r/20210816125434.948010115@linuxfoundation.org
    Link: https://lore.kernel.org/r/20210816171400.936235973@linuxfoundation.org
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a24e121304abd9b09ceca201e2a344e722fa974
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Mon Aug 16 20:09:45 2021 +0200

    net: dsa: microchip: ksz8795: Use software untagging on CPU port
    
    commit 9130c2d30c17846287b803a9803106318cbe5266 upstream.
    
    On the CPU port, we can support both tagged and untagged VLANs at the
    same time by doing any necessary untagging in software rather than
    hardware.  To enable that, keep the CPU port's Remove Tag flag cleared
    and set the dsa_switch::untag_bridge_pvid flag.
    
    Fixes: e66f840c08a2 ("net: dsa: ksz: Add Microchip KSZ8795 DSA driver")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backport to 5.10: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e78179d75fb796b015f4d71d01d8e8725fde466
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Mon Aug 16 20:09:38 2021 +0200

    net: dsa: microchip: ksz8795: Fix VLAN untagged flag change on deletion
    
    commit af01754f9e3c553a2ee63b4693c79a3956e230ab upstream.
    
    When a VLAN is deleted from a port, the flags in struct
    switchdev_obj_port_vlan are always 0.  ksz8_port_vlan_del() copies the
    BRIDGE_VLAN_INFO_UNTAGGED flag to the port's Tag Removal flag, and
    therefore always clears it.
    
    In case there are multiple VLANs configured as untagged on this port -
    which seems useless, but is allowed - deleting one of them changes the
    remaining VLANs to be tagged.
    
    It's only ever necessary to change this flag when a VLAN is added to
    the port, so leave it unchanged in ksz8_port_vlan_del().
    
    Fixes: e66f840c08a2 ("net: dsa: ksz: Add Microchip KSZ8795 DSA driver")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backport to 5.10: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5033d5e231551162e7830c6cb42851b37ea4ff65
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Mon Aug 16 20:09:31 2021 +0200

    net: dsa: microchip: ksz8795: Reject unsupported VLAN configuration
    
    commit 8f4f58f88fe0d9bd591f21f53de7dbd42baeb3fa upstream.
    
    The switches supported by ksz8795 only have a per-port flag for Tag
    Removal.  This means it is not possible to support both tagged and
    untagged VLANs on the same port.  Reject attempts to add a VLAN that
    requires the flag to be changed, unless there are no VLANs currently
    configured.
    
    VID 0 is excluded from this check since it is untagged regardless of
    the state of the flag.
    
    On the CPU port we could support tagged and untagged VLANs at the same
    time.  This will be enabled by a later patch.
    
    Fixes: e66f840c08a2 ("net: dsa: ksz: Add Microchip KSZ8795 DSA driver")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backport to 5.10:
     - This configuration has to be detected and rejected in the
       port_vlan_prepare operation
     - ksz8795_port_vlan_add() has to check again to decide whether to
       change the Tag Removal flag, so put the common condition in a
       separate function
     - Handle VID ranges]
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60c007b52779fdea6ae5116c00079cb6a7017c02
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Mon Aug 16 20:09:22 2021 +0200

    net: dsa: microchip: ksz8795: Fix PVID tag insertion
    
    commit ef3b02a1d79b691f9a354c4903cf1e6917e315f9 upstream.
    
    ksz8795 has never actually enabled PVID tag insertion, and it also
    programmed the PVID incorrectly.  To fix this:
    
    * Allow tag insertion to be controlled per ingress port.  On most
      chips, set bit 2 in Global Control 19.  On KSZ88x3 this control
      flag doesn't exist.
    
    * When adding a PVID:
      - Set the appropriate register bits to enable tag insertion on
        egress at every other port if this was the packet's ingress port.
      - Mask *out* the VID from the default tag, before or-ing in the new
        PVID.
    
    * When removing a PVID:
      - Clear the same control bits to disable tag insertion.
      - Don't update the default tag.  This wasn't doing anything useful.
    
    Fixes: e66f840c08a2 ("net: dsa: ksz: Add Microchip KSZ8795 DSA driver")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backport to 5.10:
     - Drop the KSZ88x3 cases as those chips are not supported here
     - Handle VID ranges in ksz8795_port_vlan_del()]
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f365d53c868725c472d515fa1ce4f57d0eaff5ae
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Mon Aug 16 20:09:09 2021 +0200

    net: dsa: microchip: Fix probing KSZ87xx switch with DT node for host port
    
    The ksz8795 and ksz9477 drivers differ in the way they count ports.
    For ksz8795, ksz_device::port_cnt does not include the host port
    whereas for ksz9477 it does.  This inconsistency was fixed in Linux
    5.11 by a series of changes, but remains in 5.10-stable.
    
    When probing, the common code treats a port device node with an
    address >= dev->port_cnt as a fatal error.  As a minimal fix, change
    it to compare again dev->mib_port_cnt.  This is the length of the
    dev->ports array that the port number will be used to index, and
    always includes the host port.
    
    Cc: Woojung Huh <woojung.huh@microchip.com>
    Cc: Microchip Linux Driver Support <UNGLinuxDriver@microchip.com>
    Cc: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Cc: Marek Vasut <marex@denx.de>
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dc5666baf2a135f250e4101d41d5959ac2c2e1f
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Mon Jul 19 16:05:00 2021 +0300

    KVM: nSVM: always intercept VMLOAD/VMSAVE when nested (CVE-2021-3656)
    
    commit c7dfa4009965a9b2d7b329ee970eb8da0d32f0bc upstream.
    
    If L1 disables VMLOAD/VMSAVE intercepts, and doesn't enable
    Virtual VMLOAD/VMSAVE (currently not supported for the nested hypervisor),
    then VMLOAD/VMSAVE must operate on the L1 physical memory, which is only
    possible by making L0 intercept these instructions.
    
    Failure to do so allowed the nested guest to run VMLOAD/VMSAVE unintercepted,
    and thus read/write portions of the host physical memory.
    
    Fixes: 89c8a4984fc9 ("KVM: SVM: Enable Virtual VMLOAD VMSAVE feature")
    
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0883f693187c646c0972d73e525523f9486c2e3
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Thu Jul 15 01:56:24 2021 +0300

    KVM: nSVM: avoid picking up unsupported bits from L2 in int_ctl (CVE-2021-3653)
    
    commit 0f923e07124df069ba68d8bb12324398f4b6b709 upstream.
    
    * Invert the mask of bits that we pick from L2 in
      nested_vmcb02_prepare_control
    
    * Invert and explicitly use VIRQ related bits bitmask in svm_clear_vintr
    
    This fixes a security issue that allowed a malicious L1 to run L2 with
    AVIC enabled, which allowed the L2 to exploit the uninitialized and enabled
    AVIC to read/write the host physical memory at some offsets.
    
    Fixes: 3d6368ef580a ("KVM: SVM: Add VMRUN handler")
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f05bdfda28847305e80839477a1160ddb68b94
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Jul 30 19:31:08 2021 -0700

    vmlinux.lds.h: Handle clang's module.{c,d}tor sections
    
    commit 848378812e40152abe9b9baf58ce2004f76fb988 upstream.
    
    A recent change in LLVM causes module_{c,d}tor sections to appear when
    CONFIG_K{A,C}SAN are enabled, which results in orphan section warnings
    because these are not handled anywhere:
    
    ld.lld: warning: arch/x86/pci/built-in.a(legacy.o):(.text.asan.module_ctor) is being placed in '.text.asan.module_ctor'
    ld.lld: warning: arch/x86/pci/built-in.a(legacy.o):(.text.asan.module_dtor) is being placed in '.text.asan.module_dtor'
    ld.lld: warning: arch/x86/pci/built-in.a(legacy.o):(.text.tsan.module_ctor) is being placed in '.text.tsan.module_ctor'
    
    Fangrui explains: "the function asan.module_ctor has the SHF_GNU_RETAIN
    flag, so it is in a separate section even with -fno-function-sections
    (default)".
    
    Place them in the TEXT_TEXT section so that these technologies continue
    to work with the newer compiler versions. All of the KASAN and KCSAN
    KUnit tests continue to pass after this change.
    
    Cc: stable@vger.kernel.org
    Link: https://github.com/ClangBuiltLinux/linux/issues/1432
    Link: https://github.com/llvm/llvm-project/commit/7b789562244ee941b7bf2cefeb3fc08a59a01865
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Fangrui Song <maskray@google.com>
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210731023107.1932981-1-nathan@kernel.org
    [nc: Resolve conflict due to lack of cf68fffb66d60]
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fe07584a6236d22be17f3866c4c45e0a3058d2a
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Aug 3 12:47:34 2021 -0400

    ceph: take snap_empty_lock atomically with snaprealm refcount change
    
    commit 8434ffe71c874b9c4e184b88d25de98c2bf5fe3f upstream.
    
    There is a race in ceph_put_snap_realm. The change to the nref and the
    spinlock acquisition are not done atomically, so you could decrement
    nref, and before you take the spinlock, the nref is incremented again.
    At that point, you end up putting it on the empty list when it
    shouldn't be there. Eventually __cleanup_empty_realms runs and frees
    it when it's still in-use.
    
    Fix this by protecting the 1->0 transition with atomic_dec_and_lock,
    and just drop the spinlock if we can get the rwsem.
    
    Because these objects can also undergo a 0->1 refcount transition, we
    must protect that change as well with the spinlock. Increment locklessly
    unless the value is at 0, in which case we take the spinlock, increment
    and then take it off the empty list if it did the 0->1 transition.
    
    With these changes, I'm removing the dout() messages from these
    functions, as well as in __put_snap_realm. They've always been racy, and
    it's better to not print values that may be misleading.
    
    Cc: stable@vger.kernel.org
    URL: https://tracker.ceph.com/issues/46419
    Reported-by: Mark Nelson <mnelson@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Luis Henriques <lhenriques@suse.de>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a23aced54c2c9053a0956fc1a8a6d7c0a0fff96f
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Jun 1 09:24:38 2021 -0400

    ceph: clean up locking annotation for ceph_get_snap_realm and __lookup_snap_realm
    
    commit df2c0cb7f8e8c83e495260ad86df8c5da947f2a7 upstream.
    
    They both say that the snap_rwsem must be held for write, but I don't
    see any real reason for it, and it's not currently always called that
    way.
    
    The lookup is just walking the rbtree, so holding it for read should be
    fine there. The "get" is bumping the refcount and (possibly) removing
    it from the empty list. I see no need to hold the snap_rwsem for write
    for that.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0efc93271caf3868885a953f7f71c3aced7ba61
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Jun 1 08:13:38 2021 -0400

    ceph: add some lockdep assertions around snaprealm handling
    
    commit a6862e6708c15995bc10614b2ef34ca35b4b9078 upstream.
    
    Turn some comments into lockdep asserts.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcdb587ac470f1c2476688318c81897f3ee1c233
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Jan 21 12:54:18 2021 +0100

    vboxsf: Add support for the atomic_open directory-inode op
    
    commit 52dfd86aa568e433b24357bb5fc725560f1e22d8 upstream.
    
    Opening a new file is done in 2 steps on regular filesystems:
    
    1. Call the create inode-op on the parent-dir to create an inode
    to hold the meta-data related to the file.
    2. Call the open file-op to get a handle for the file.
    
    vboxsf however does not really use disk-backed inodes because it
    is based on passing through file-related system-calls through to
    the hypervisor. So both steps translate to an open(2) call being
    passed through to the hypervisor. With the handle returned by
    the first call immediately being closed again.
    
    Making 2 open calls for a single open(..., O_CREATE, ...) calls
    has 2 problems:
    
    a) It is not really efficient.
    b) It actually breaks some apps.
    
    An example of b) is doing a git clone inside a vboxsf mount.
    When git clone tries to create a tempfile to store the pak
    files which is downloading the following happens:
    
    1. vboxsf_dir_mkfile() gets called with a mode of 0444 and succeeds.
    2. vboxsf_file_open() gets called with file->f_flags containing
    O_RDWR. When the host is a Linux machine this fails because doing
    a open(..., O_RDWR) on a file which exists and has mode 0444 results
    in an -EPERM error.
    
    Other network-filesystems and fuse avoid the problem of needing to
    pass 2 open() calls to the other side by using the atomic_open
    directory-inode op.
    
    This commit fixes git clone not working inside a vboxsf mount,
    by adding support for the atomic_open directory-inode op.
    As an added bonus this should also make opening new files faster.
    
    The atomic_open implementation is modelled after the atomic_open
    implementations from the 9p and fuse code.
    
    Fixes: 0fd169576648 ("fs: Add VirtualBox guest shared folder (vboxsf) support")
    Reported-by: Ludovic Pouzenc <bugreports@pouzenc.fr>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cd14c1a7fed9fd5669c8578abd34ef35d4afc1a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Jan 21 10:55:03 2021 +0100

    vboxsf: Add vboxsf_[create|release]_sf_handle() helpers
    
    commit 02f840f90764f22f5c898901849bdbf0cee752ba upstream.
    
    Factor out the code to create / release a struct vboxsf_handle into
    2 new helper functions.
    
    This is a preparation patch for adding atomic_open support.
    
    Fixes: 0fd169576648 ("fs: Add VirtualBox guest shared folder (vboxsf) support")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 433f0b31ebec09bb89c2414eb76571ced670a202
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Aug 11 21:56:15 2021 -0700

    KVM: nVMX: Use vmx_need_pf_intercept() when deciding if L0 wants a #PF
    
    commit 18712c13709d2de9516c5d3414f707c4f0a9c190 upstream.
    
    Use vmx_need_pf_intercept() when determining if L0 wants to handle a #PF
    in L2 or if the VM-Exit should be forwarded to L1.  The current logic fails
    to account for the case where #PF is intercepted to handle
    guest.MAXPHYADDR < host.MAXPHYADDR and ends up reflecting all #PFs into
    L1.  At best, L1 will complain and inject the #PF back into L2.  At
    worst, L1 will eat the unexpected fault and cause L2 to hang on infinite
    page faults.
    
    Note, while the bug was technically introduced by the commit that added
    support for the MAXPHYADDR madness, the shame is all on commit
    a0c134347baf ("KVM: VMX: introduce vmx_need_pf_intercept").
    
    Fixes: 1dbf5d68af6f ("KVM: VMX: Add guest physical address check in EPT violation and misconfig")
    Cc: stable@vger.kernel.org
    Cc: Peter Shier <pshier@google.com>
    Cc: Oliver Upton <oupton@google.com>
    Cc: Jim Mattson <jmattson@google.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210812045615.3167686-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ab67e3dfc4d7af799b76b405eba2dc6f36935f3
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Aug 10 10:19:49 2021 -0700

    KVM: VMX: Use current VMCS to query WAITPKG support for MSR emulation
    
    commit 7b9cae027ba3aaac295ae23a62f47876ed97da73 upstream.
    
    Use the secondary_exec_controls_get() accessor in vmx_has_waitpkg() to
    effectively get the controls for the current VMCS, as opposed to using
    vmx->secondary_exec_controls, which is the cached value of KVM's desired
    controls for vmcs01 and truly not reflective of any particular VMCS.
    
    While the waitpkg control is not dynamic, i.e. vmcs01 will always hold
    the same waitpkg configuration as vmx->secondary_exec_controls, the same
    does not hold true for vmcs02 if the L1 VMM hides the feature from L2.
    If L1 hides the feature _and_ does not intercept MSR_IA32_UMWAIT_CONTROL,
    L2 could incorrectly read/write L1's virtual MSR instead of taking a #GP.
    
    Fixes: 6e3ba4abcea5 ("KVM: vmx: Emulate MSR IA32_UMWAIT_CONTROL")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210810171952.2758100-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a948c579ed6a12e248da57b9422a69b1ca2261c
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Jul 26 16:31:44 2021 +0200

    efi/libstub: arm64: Double check image alignment at entry
    
    commit c32ac11da3f83bb42b986702a9b92f0a14ed4182 upstream.
    
    On arm64, the stub only moves the kernel image around in memory if
    needed, which is typically only for KASLR, given that relocatable
    kernels (which is the default) can run from any 64k aligned address,
    which is also the minimum alignment communicated to EFI via the PE/COFF
    header.
    
    Unfortunately, some loaders appear to ignore this header, and load the
    kernel at some arbitrary offset in memory. We can deal with this, but
    let's check for this condition anyway, so non-compliant code can be
    spotted and fixed.
    
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc7da433fa16b7e9a9efa92b41f684670535d99e
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Aug 4 18:24:10 2021 +0000

    powerpc/smp: Fix OOPS in topology_init()
    
    commit 8241461536f21bbe51308a6916d1c9fb2e6b75a7 upstream.
    
    Running an SMP kernel on an UP platform not prepared for it,
    I encountered the following OOPS:
    
            BUG: Kernel NULL pointer dereference on read at 0x00000034
            Faulting instruction address: 0xc0a04110
            Oops: Kernel access of bad area, sig: 11 [#1]
            BE PAGE_SIZE=4K SMP NR_CPUS=2 CMPCPRO
            Modules linked in:
            CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.13.0-pmac-00001-g230fedfaad21 #5234
            NIP:  c0a04110 LR: c0a040d8 CTR: c0a04084
            REGS: e100dda0 TRAP: 0300   Not tainted  (5.13.0-pmac-00001-g230fedfaad21)
            MSR:  00009032 <EE,ME,IR,DR,RI>  CR: 84000284  XER: 00000000
            DAR: 00000034 DSISR: 20000000
            GPR00: c0006bd4 e100de60 c1033320 00000000 00000000 c0942274 00000000 00000000
            GPR08: 00000000 00000000 00000001 00000063 00000007 00000000 c0006f30 00000000
            GPR16: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000005
            GPR24: c0c67d74 c0c67f1c c0c60000 c0c67d70 c0c0c558 1efdf000 c0c00020 00000000
            NIP [c0a04110] topology_init+0x8c/0x138
            LR [c0a040d8] topology_init+0x54/0x138
            Call Trace:
            [e100de60] [80808080] 0x80808080 (unreliable)
            [e100de90] [c0006bd4] do_one_initcall+0x48/0x1bc
            [e100def0] [c0a0150c] kernel_init_freeable+0x1c8/0x278
            [e100df20] [c0006f44] kernel_init+0x14/0x10c
            [e100df30] [c00190fc] ret_from_kernel_thread+0x14/0x1c
            Instruction dump:
            7c692e70 7d290194 7c035040 7c7f1b78 5529103a 546706fe 5468103a 39400001
            7c641b78 40800054 80c690b4 7fb9402e <81060034> 7fbeea14 2c080000 7fa3eb78
            ---[ end trace b246ffbc6bbbb6fb ]---
    
    Fix it by checking smp_ops before using it, as already done in
    several other places in the arch/powerpc/kernel/smp.c
    
    Fixes: 39f87561454d ("powerpc/smp: Move ppc_md.cpu_die() to smp_ops.cpu_offline_self()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/75287841cbb8740edd44880fe60be66d489160d9.1628097995.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 312730cd15e097c11c4d0a0b8583a89a9ffd3d96
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:47 2021 +0200

    PCI/MSI: Protect msi_desc::masked for multi-MSI
    
    commit 77e89afc25f30abd56e76a809ee2884d7c1b63ce upstream.
    
    Multi-MSI uses a single MSI descriptor and there is a single mask register
    when the device supports per vector masking. To avoid reading back the mask
    register the value is cached in the MSI descriptor and updates are done by
    clearing and setting bits in the cache and writing it to the device.
    
    But nothing protects msi_desc::masked and the mask register from being
    modified concurrently on two different CPUs for two different Linux
    interrupts which belong to the same multi-MSI descriptor.
    
    Add a lock to struct device and protect any operation on the mask and the
    mask register with it.
    
    This makes the update of msi_desc::masked unconditional, but there is no
    place which requires a modification of the hardware register without
    updating the masked cache.
    
    msi_mask_irq() is now an empty wrapper which will be cleaned up in follow
    up changes.
    
    The problem goes way back to the initial support of multi-MSI, but picking
    the commit which introduced the mask cache is a valid cut off point
    (2.6.30).
    
    Fixes: f2440d9acbe8 ("PCI MSI: Refactor interrupt masking code")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.726833414@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 724d0a9850866ce2cc7df71b1497f49066535ccc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:46 2021 +0200

    PCI/MSI: Use msi_mask_irq() in pci_msi_shutdown()
    
    commit d28d4ad2a1aef27458b3383725bb179beb8d015c upstream.
    
    No point in using the raw write function from shutdown. Preparatory change
    to introduce proper serialization for the msi_desc::masked cache.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.674391354@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 923368751866babfc8924e24cd19f61fda1bca23
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:45 2021 +0200

    PCI/MSI: Correct misleading comments
    
    commit 689e6b5351573c38ccf92a0dd8b3e2c2241e4aff upstream.
    
    The comments about preserving the cached state in pci_msi[x]_shutdown() are
    misleading as the MSI descriptors are freed right after those functions
    return. So there is nothing to restore. Preparatory change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.621609423@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e42fb8e6161e6cbfd74bc28787823a9928752297
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:44 2021 +0200

    PCI/MSI: Do not set invalid bits in MSI mask
    
    commit 361fd37397f77578735907341579397d5bed0a2d upstream.
    
    msi_mask_irq() takes a mask and a flags argument. The mask argument is used
    to mask out bits from the cached mask and the flags argument to set bits.
    
    Some places invoke it with a flags argument which sets bits which are not
    used by the device, i.e. when the device supports up to 8 vectors a full
    unmask in some places sets the mask to 0xFFFFFF00. While devices probably
    do not care, it's still bad practice.
    
    Fixes: 7ba1930db02f ("PCI MSI: Unmask MSI if setup failed")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.568173099@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 042e03c9cdab2f553921838b3083575f92492a64
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:43 2021 +0200

    PCI/MSI: Enforce MSI[X] entry updates to be visible
    
    commit b9255a7cb51754e8d2645b65dd31805e282b4f3e upstream.
    
    Nothing enforces the posted writes to be visible when the function
    returns. Flush them even if the flush might be redundant when the entry is
    masked already as the unmask will flush as well. This is either setup or a
    rare affinity change event so the extra flush is not the end of the world.
    
    While this is more a theoretical issue especially the logic in the X86
    specific msi_set_affinity() function relies on the assumption that the
    update has reached the hardware when the function returns.
    
    Again, as this never has been enforced the Fixes tag refers to a commit in:
       git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    
    Fixes: f036d4ea5fa7 ("[PATCH] ia32 Message Signalled Interrupt support")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.515188147@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b2509d7a90c11666280acf9ada4add767c2b819
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:42 2021 +0200

    PCI/MSI: Enforce that MSI-X table entry is masked for update
    
    commit da181dc974ad667579baece33c2c8d2d1e4558d5 upstream.
    
    The specification (PCIe r5.0, sec 6.1.4.5) states:
    
        For MSI-X, a function is permitted to cache Address and Data values
        from unmasked MSI-X Table entries. However, anytime software unmasks a
        currently masked MSI-X Table entry either by clearing its Mask bit or
        by clearing the Function Mask bit, the function must update any Address
        or Data values that it cached from that entry. If software changes the
        Address or Data value of an entry while the entry is unmasked, the
        result is undefined.
    
    The Linux kernel's MSI-X support never enforced that the entry is masked
    before the entry is modified hence the Fixes tag refers to a commit in:
          git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    
    Enforce the entry to be masked across the update.
    
    There is no point in enforcing this to be handled at all possible call
    sites as this is just pointless code duplication and the common update
    function is the obvious place to enforce this.
    
    Fixes: f036d4ea5fa7 ("[PATCH] ia32 Message Signalled Interrupt support")
    Reported-by: Kevin Tian <kevin.tian@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.462096385@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa8092c1d1f142f797995d0448afb73a5148f4ae
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:41 2021 +0200

    PCI/MSI: Mask all unused MSI-X entries
    
    commit 7d5ec3d3612396dc6d4b76366d20ab9fc06f399f upstream.
    
    When MSI-X is enabled the ordering of calls is:
    
      msix_map_region();
      msix_setup_entries();
      pci_msi_setup_msi_irqs();
      msix_program_entries();
    
    This has a few interesting issues:
    
     1) msix_setup_entries() allocates the MSI descriptors and initializes them
        except for the msi_desc:masked member which is left zero initialized.
    
     2) pci_msi_setup_msi_irqs() allocates the interrupt descriptors and sets
        up the MSI interrupts which ends up in pci_write_msi_msg() unless the
        interrupt chip provides its own irq_write_msi_msg() function.
    
     3) msix_program_entries() does not do what the name suggests. It solely
        updates the entries array (if not NULL) and initializes the masked
        member for each MSI descriptor by reading the hardware state and then
        masks the entry.
    
    Obviously this has some issues:
    
     1) The uninitialized masked member of msi_desc prevents the enforcement
        of masking the entry in pci_write_msi_msg() depending on the cached
        masked bit. Aside of that half initialized data is a NONO in general
    
     2) msix_program_entries() only ensures that the actually allocated entries
        are masked. This is wrong as experimentation with crash testing and
        crash kernel kexec has shown.
    
        This limited testing unearthed that when the production kernel had more
        entries in use and unmasked when it crashed and the crash kernel
        allocated a smaller amount of entries, then a full scan of all entries
        found unmasked entries which were in use in the production kernel.
    
        This is obviously a device or emulation issue as the device reset
        should mask all MSI-X table entries, but obviously that's just part
        of the paper specification.
    
    Cure this by:
    
     1) Masking all table entries in hardware
     2) Initializing msi_desc::masked in msix_setup_entries()
     3) Removing the mask dance in msix_program_entries()
     4) Renaming msix_program_entries() to msix_update_entries() to
        reflect the purpose of that function.
    
    As the masking of unused entries has never been done the Fixes tag refers
    to a commit in:
       git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    
    Fixes: f036d4ea5fa7 ("[PATCH] ia32 Message Signalled Interrupt support")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.403833459@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e90e81a4b59128cd81d909dba8e3ea3cdc9a831
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:40 2021 +0200

    PCI/MSI: Enable and mask MSI-X early
    
    commit 438553958ba19296663c6d6583d208dfb6792830 upstream.
    
    The ordering of MSI-X enable in hardware is dysfunctional:
    
     1) MSI-X is disabled in the control register
     2) Various setup functions
     3) pci_msi_setup_msi_irqs() is invoked which ends up accessing
        the MSI-X table entries
     4) MSI-X is enabled and masked in the control register with the
        comment that enabling is required for some hardware to access
        the MSI-X table
    
    Step #4 obviously contradicts #3. The history of this is an issue with the
    NIU hardware. When #4 was introduced the table access actually happened in
    msix_program_entries() which was invoked after enabling and masking MSI-X.
    
    This was changed in commit d71d6432e105 ("PCI/MSI: Kill redundant call of
    irq_set_msi_desc() for MSI-X interrupts") which removed the table write
    from msix_program_entries().
    
    Interestingly enough nobody noticed and either NIU still works or it did
    not get any testing with a kernel 3.19 or later.
    
    Nevertheless this is inconsistent and there is no reason why MSI-X can't be
    enabled and masked in the control register early on, i.e. move step #4
    above to step #1. This preserves the NIU workaround and has no side effects
    on other hardware.
    
    Fixes: d71d6432e105 ("PCI/MSI: Kill redundant call of irq_set_msi_desc() for MSI-X interrupts")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Ashok Raj <ashok.raj@intel.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.344136412@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d2c668480278dffcd0167b012d196e30d953b09
Author: Ben Dai <ben.dai@unisoc.com>
Date:   Sun Apr 25 23:09:03 2021 +0800

    genirq/timings: Prevent potential array overflow in __irq_timings_store()
    
    commit b9cc7d8a4656a6e815852c27ab50365009cb69c1 upstream.
    
    When the interrupt interval is greater than 2 ^ PREDICTION_BUFFER_SIZE *
    PREDICTION_FACTOR us and less than 1s, the calculated index will be greater
    than the length of irqs->ema_time[]. Check the calculated index before
    using it to prevent array overflow.
    
    Fixes: 23aa3b9a6b7d ("genirq/timings: Encapsulate storing function")
    Signed-off-by: Ben Dai <ben.dai@unisoc.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210425150903.25456-1-ben.dai9703@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 355754194b483275d6a5378bfe49a6a4d73327cb
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Tue May 18 11:31:17 2021 +0800

    genirq/msi: Ensure deactivation on teardown
    
    commit dbbc93576e03fbe24b365fab0e901eb442237a8a upstream.
    
    msi_domain_alloc_irqs() invokes irq_domain_activate_irq(), but
    msi_domain_free_irqs() does not enforce deactivation before tearing down
    the interrupts.
    
    This happens when PCI/MSI interrupts are set up and never used before being
    torn down again, e.g. in error handling pathes. The only place which cleans
    that up is the error handling path in msi_domain_alloc_irqs().
    
    Move the cleanup from msi_domain_alloc_irqs() into msi_domain_free_irqs()
    to cure that.
    
    Fixes: f3b0946d629c ("genirq/msi: Make sure PCI MSIs are activated early")
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210518033117.78104-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0736bed18fb13f7509ded58c7d9c6ab50583038
Author: Babu Moger <Babu.Moger@amd.com>
Date:   Mon Aug 2 14:38:58 2021 -0500

    x86/resctrl: Fix default monitoring groups reporting
    
    commit 064855a69003c24bd6b473b367d364e418c57625 upstream.
    
    Creating a new sub monitoring group in the root /sys/fs/resctrl leads to
    getting the "Unavailable" value for mbm_total_bytes and mbm_local_bytes
    on the entire filesystem.
    
    Steps to reproduce:
    
      1. mount -t resctrl resctrl /sys/fs/resctrl/
    
      2. cd /sys/fs/resctrl/
    
      3. cat mon_data/mon_L3_00/mbm_total_bytes
         23189832
    
      4. Create sub monitor group:
      mkdir mon_groups/test1
    
      5. cat mon_data/mon_L3_00/mbm_total_bytes
         Unavailable
    
    When a new monitoring group is created, a new RMID is assigned to the
    new group. But the RMID is not active yet. When the events are read on
    the new RMID, it is expected to report the status as "Unavailable".
    
    When the user reads the events on the default monitoring group with
    multiple subgroups, the events on all subgroups are consolidated
    together. Currently, if any of the RMID reads report as "Unavailable",
    then everything will be reported as "Unavailable".
    
    Fix the issue by discarding the "Unavailable" reads and reporting all
    the successful RMID reads. This is not a problem on Intel systems as
    Intel reports 0 on Inactive RMIDs.
    
    Fixes: d89b7379015f ("x86/intel_rdt/cqm: Add mon_data")
    Reported-by: Paweł Szulik <pawel.szulik@intel.com>
    Signed-off-by: Babu Moger <Babu.Moger@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Reinette Chatre <reinette.chatre@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=213311
    Link: https://lkml.kernel.org/r/162793309296.9224.15871659871696482080.stgit@bmoger-ubuntu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25216ed97da8f2cbea9a5ef6f22ca614b8ec971b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:49 2021 +0200

    x86/ioapic: Force affinity setup before startup
    
    commit 0c0e37dc11671384e53ba6ede53a4d91162a2cc5 upstream.
    
    The IO/APIC cannot handle interrupt affinity changes safely after startup
    other than from an interrupt handler. The startup sequence in the generic
    interrupt code violates that assumption.
    
    Mark the irq chip with the new IRQCHIP_AFFINITY_PRE_STARTUP flag so that
    the default interrupt setting happens before the interrupt is started up
    for the first time.
    
    Fixes: 18404756765c ("genirq: Expose default irq affinity mask (take 3)")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.832143400@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19fb5dabedca56216732e35ec256ddb18d05c91e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:50 2021 +0200

    x86/msi: Force affinity setup before startup
    
    commit ff363f480e5997051dd1de949121ffda3b753741 upstream.
    
    The X86 MSI mechanism cannot handle interrupt affinity changes safely after
    startup other than from an interrupt handler, unless interrupt remapping is
    enabled. The startup sequence in the generic interrupt code violates that
    assumption.
    
    Mark the irq chips with the new IRQCHIP_AFFINITY_PRE_STARTUP flag so that
    the default interrupt setting happens before the interrupt is started up
    for the first time.
    
    While the interrupt remapping MSI chip does not require this, there is no
    point in treating it differently as this might spare an interrupt to a CPU
    which is not in the default affinity mask.
    
    For the non-remapping case go to the direct write path when the interrupt
    is not yet started similar to the not yet activated case.
    
    Fixes: 18404756765c ("genirq: Expose default irq affinity mask (take 3)")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.886722080@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e52a4fe6f445a59a88c7ba60dd253a3643f0589
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 29 23:51:48 2021 +0200

    genirq: Provide IRQCHIP_AFFINITY_PRE_STARTUP
    
    commit 826da771291fc25a428e871f9e7fb465e390f852 upstream.
    
    X86 IO/APIC and MSI interrupts (when used without interrupts remapping)
    require that the affinity setup on startup is done before the interrupt is
    enabled for the first time as the non-remapped operation mode cannot safely
    migrate enabled interrupts from arbitrary contexts. Provide a new irq chip
    flag which allows affected hardware to request this.
    
    This has to be opt-in because there have been reports in the past that some
    interrupt chips cannot handle affinity setting before startup.
    
    Fixes: 18404756765c ("genirq: Expose default irq affinity mask (take 3)")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210729222542.779791738@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a28b52306f2d0797159b7e9819d4af3f0c4ef22
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Jul 30 17:01:46 2021 -0700

    x86/tools: Fix objdump version check again
    
    [ Upstream commit 839ad22f755132838f406751439363c07272ad87 ]
    
    Skip (omit) any version string info that is parenthesized.
    
    Warning: objdump version 15) is older than 2.19
    Warning: Skipping posttest.
    
    where 'objdump -v' says:
    GNU objdump (GNU Binutils; SUSE Linux Enterprise 15) 2.35.1.20201123-7.18
    
    Fixes: 8bee738bb1979 ("x86: Fix objdump version check in chkobjdump.awk for different formats.")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20210731000146.2720-1-rdunlap@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4acc0d987141f4a5e1e4aee4909f6c10dc34646a
Author: Pu Lehui <pulehui@huawei.com>
Date:   Mon Aug 9 10:36:58 2021 +0800

    powerpc/kprobes: Fix kprobe Oops happens in booke
    
    [ Upstream commit 43e8f76006592cb1573a959aa287c45421066f9c ]
    
    When using kprobe on powerpc booke series processor, Oops happens
    as show bellow:
    
    / # echo "p:myprobe do_nanosleep" > /sys/kernel/debug/tracing/kprobe_events
    / # echo 1 > /sys/kernel/debug/tracing/events/kprobes/myprobe/enable
    / # sleep 1
    [   50.076730] Oops: Exception in kernel mode, sig: 5 [#1]
    [   50.077017] BE PAGE_SIZE=4K SMP NR_CPUS=24 QEMU e500
    [   50.077221] Modules linked in:
    [   50.077462] CPU: 0 PID: 77 Comm: sleep Not tainted 5.14.0-rc4-00022-g251a1524293d #21
    [   50.077887] NIP:  c0b9c4e0 LR: c00ebecc CTR: 00000000
    [   50.078067] REGS: c3883de0 TRAP: 0700   Not tainted (5.14.0-rc4-00022-g251a1524293d)
    [   50.078349] MSR:  00029000 <CE,EE,ME>  CR: 24000228  XER: 20000000
    [   50.078675]
    [   50.078675] GPR00: c00ebdf0 c3883e90 c313e300 c3883ea0 00000001 00000000 c3883ecc 00000001
    [   50.078675] GPR08: c100598c c00ea250 00000004 00000000 24000222 102490c2 bff4180c 101e60d4
    [   50.078675] GPR16: 00000000 102454ac 00000040 10240000 10241100 102410f8 10240000 00500000
    [   50.078675] GPR24: 00000002 00000000 c3883ea0 00000001 00000000 0000c350 3b9b8d50 00000000
    [   50.080151] NIP [c0b9c4e0] do_nanosleep+0x0/0x190
    [   50.080352] LR [c00ebecc] hrtimer_nanosleep+0x14c/0x1e0
    [   50.080638] Call Trace:
    [   50.080801] [c3883e90] [c00ebdf0] hrtimer_nanosleep+0x70/0x1e0 (unreliable)
    [   50.081110] [c3883f00] [c00ec004] sys_nanosleep_time32+0xa4/0x110
    [   50.081336] [c3883f40] [c001509c] ret_from_syscall+0x0/0x28
    [   50.081541] --- interrupt: c00 at 0x100a4d08
    [   50.081749] NIP:  100a4d08 LR: 101b5234 CTR: 00000003
    [   50.081931] REGS: c3883f50 TRAP: 0c00   Not tainted (5.14.0-rc4-00022-g251a1524293d)
    [   50.082183] MSR:  0002f902 <CE,EE,PR,FP,ME>  CR: 24000222  XER: 00000000
    [   50.082457]
    [   50.082457] GPR00: 000000a2 bf980040 1024b4d0 bf980084 bf980084 64000000 00555345 fefefeff
    [   50.082457] GPR08: 7f7f7f7f 101e0000 00000069 00000003 28000422 102490c2 bff4180c 101e60d4
    [   50.082457] GPR16: 00000000 102454ac 00000040 10240000 10241100 102410f8 10240000 00500000
    [   50.082457] GPR24: 00000002 bf9803f4 10240000 00000000 00000000 100039e0 00000000 102444e8
    [   50.083789] NIP [100a4d08] 0x100a4d08
    [   50.083917] LR [101b5234] 0x101b5234
    [   50.084042] --- interrupt: c00
    [   50.084238] Instruction dump:
    [   50.084483] 4bfffc40 60000000 60000000 60000000 9421fff0 39400402 914200c0 38210010
    [   50.084841] 4bfffc20 00000000 00000000 00000000 <7fe00008> 7c0802a6 7c892378 93c10048
    [   50.085487] ---[ end trace f6fffe98e2fa8f3e ]---
    [   50.085678]
    Trace/breakpoint trap
    
    There is no real mode for booke arch and the MMU translation is
    always on. The corresponding MSR_IS/MSR_DS bit in booke is used
    to switch the address space, but not for real mode judgment.
    
    Fixes: 21f8b2fa3ca5 ("powerpc/kprobes: Ignore traps that happened in real mode")
    Signed-off-by: Pu Lehui <pulehui@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210809023658.218915-1-pulehui@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 015e2c900b5da5f8cf1ce728fa723d802f725634
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Jul 22 12:10:31 2021 +0200

    efi/libstub: arm64: Relax 2M alignment again for relocatable kernels
    
    [ Upstream commit 3a262423755b83a5f85009ace415d6e7f572dfe8 ]
    
    Commit 82046702e288 ("efi/libstub/arm64: Replace 'preferred' offset with
    alignment check") simplified the way the stub moves the kernel image
    around in memory before booting it, given that a relocatable image does
    not need to be copied to a 2M aligned offset if it was loaded on a 64k
    boundary by EFI.
    
    Commit d32de9130f6c ("efi/arm64: libstub: Deal gracefully with
    EFI_RNG_PROTOCOL failure") inadvertently defeated this logic by
    overriding the value of efi_nokaslr if EFI_RNG_PROTOCOL is not
    available, which was mistaken by the loader logic as an explicit request
    on the part of the user to disable KASLR and any associated relocation
    of an Image not loaded on a 2M boundary.
    
    So let's reinstate this functionality, by capturing the value of
    efi_nokaslr at function entry to choose the minimum alignment.
    
    Fixes: d32de9130f6c ("efi/arm64: libstub: Deal gracefully with EFI_RNG_PROTOCOL failure")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit feb4a01d3ece8bed055a47366ca20c257c03868f
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Jul 26 11:38:41 2021 +0200

    efi/libstub: arm64: Force Image reallocation if BSS was not reserved
    
    [ Upstream commit 5b94046efb4706b3429c9c8e7377bd8d1621d588 ]
    
    Distro versions of GRUB replace the usual LoadImage/StartImage calls
    used to load the kernel image with some local code that fails to honor
    the allocation requirements described in the PE/COFF header, as it
    does not account for the image's BSS section at all: it fails to
    allocate space for it, and fails to zero initialize it.
    
    Since the EFI stub itself is allocated in the .init segment, which is
    in the middle of the image, its BSS section is not impacted by this,
    and the main consequence of this omission is that the BSS section may
    overlap with memory regions that are already used by the firmware.
    
    So let's warn about this condition, and force image reallocation to
    occur in this case, which works around the problem.
    
    Fixes: 82046702e288 ("efi/libstub/arm64: Replace 'preferred' offset with alignment check")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afcb84e6cf8cf8ab1fb8b4bfa44c6caad64ae581
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue Jul 20 21:14:05 2021 +1000

    arm64: efi: kaslr: Fix occasional random alloc (and boot) failure
    
    [ Upstream commit 4152433c397697acc4b02c4a10d17d5859c2730d ]
    
    The EFI stub random allocator used for kaslr on arm64 has a subtle
    bug. In function get_entry_num_slots() which counts the number of
    possible allocation "slots" for the image in a given chunk of free
    EFI memory, "last_slot" can become negative if the chunk is smaller
    than the requested allocation size.
    
    The test "if (first_slot > last_slot)" doesn't catch it because
    both first_slot and last_slot are unsigned.
    
    I chose not to make them signed to avoid problems if this is ever
    used on architectures where there are meaningful addresses with the
    top bit set. Instead, fix it with an additional test against the
    allocation size.
    
    This can cause a boot failure in addition to a loss of randomisation
    due to another bug in the arm64 stub fixed separately.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Fixes: 2ddbfc81eac8 ("efi: stub: add implementation of efi_random_alloc()")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0ee8d9c31b5a670f35a4ff7e2daf59967f2f27a
Author: Xie Yongji <xieyongji@bytedance.com>
Date:   Fri Aug 13 23:13:30 2021 +0800

    nbd: Aovid double completion of a request
    
    [ Upstream commit cddce01160582a5f52ada3da9626c052d852ec42 ]
    
    There is a race between iterating over requests in
    nbd_clear_que() and completing requests in recv_work(),
    which can lead to double completion of a request.
    
    To fix it, flush the recv worker before iterating over
    the requests and don't abort the completed request
    while iterating.
    
    Fixes: 96d97e17828f ("nbd: clear_sock on netlink disconnect")
    Reported-by: Jiang Yadong <jiangyadong@bytedance.com>
    Signed-off-by: Xie Yongji <xieyongji@bytedance.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Link: https://lore.kernel.org/r/20210813151330.96-1-xieyongji@bytedance.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5cefe9a52a637f9fc39d05bd70de0d4acb890d6
Author: Longpeng(Mike) <longpeng2@huawei.com>
Date:   Thu Aug 12 13:30:56 2021 +0800

    vsock/virtio: avoid potential deadlock when vsock device remove
    
    [ Upstream commit 49b0b6ffe20c5344f4173f3436298782a08da4f2 ]
    
    There's a potential deadlock case when remove the vsock device or
    process the RESET event:
    
      vsock_for_each_connected_socket:
          spin_lock_bh(&vsock_table_lock) ----------- (1)
          ...
              virtio_vsock_reset_sock:
                  lock_sock(sk) --------------------- (2)
          ...
          spin_unlock_bh(&vsock_table_lock)
    
    lock_sock() may do initiative schedule when the 'sk' is owned by
    other thread at the same time, we would receivce a warning message
    that "scheduling while atomic".
    
    Even worse, if the next task (selected by the scheduler) try to
    release a 'sk', it need to request vsock_table_lock and the deadlock
    occur, cause the system into softlockup state.
      Call trace:
       queued_spin_lock_slowpath
       vsock_remove_bound
       vsock_remove_sock
       virtio_transport_release
       __vsock_release
       vsock_release
       __sock_release
       sock_close
       __fput
       ____fput
    
    So we should not require sk_lock in this case, just like the behavior
    in vhost_vsock or vmci.
    
    Fixes: 0ea9e1d3a9e3 ("VSOCK: Introduce virtio_transport.ko")
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Longpeng(Mike) <longpeng2@huawei.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20210812053056.1699-1-longpeng2@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dff830e5e7237a60f6c91b3f028b914a1001790f
Author: Maximilian Heyne <mheyne@amazon.de>
Date:   Thu Aug 12 13:09:27 2021 +0000

    xen/events: Fix race in set_evtchn_to_irq
    
    [ Upstream commit 88ca2521bd5b4e8b83743c01a2d4cb09325b51e9 ]
    
    There is a TOCTOU issue in set_evtchn_to_irq. Rows in the evtchn_to_irq
    mapping are lazily allocated in this function. The check whether the row
    is already present and the row initialization is not synchronized. Two
    threads can at the same time allocate a new row for evtchn_to_irq and
    add the irq mapping to the their newly allocated row. One thread will
    overwrite what the other has set for evtchn_to_irq[row] and therefore
    the irq mapping is lost. This will trigger a BUG_ON later in
    bind_evtchn_to_cpu:
    
      INFO: pci 0000:1a:15.4: [1d0f:8061] type 00 class 0x010802
      INFO: nvme 0000:1a:12.1: enabling device (0000 -> 0002)
      INFO: nvme nvme77: 1/0/0 default/read/poll queues
      CRIT: kernel BUG at drivers/xen/events/events_base.c:427!
      WARN: invalid opcode: 0000 [#1] SMP NOPTI
      WARN: Workqueue: nvme-reset-wq nvme_reset_work [nvme]
      WARN: RIP: e030:bind_evtchn_to_cpu+0xc2/0xd0
      WARN: Call Trace:
      WARN:  set_affinity_irq+0x121/0x150
      WARN:  irq_do_set_affinity+0x37/0xe0
      WARN:  irq_setup_affinity+0xf6/0x170
      WARN:  irq_startup+0x64/0xe0
      WARN:  __setup_irq+0x69e/0x740
      WARN:  ? request_threaded_irq+0xad/0x160
      WARN:  request_threaded_irq+0xf5/0x160
      WARN:  ? nvme_timeout+0x2f0/0x2f0 [nvme]
      WARN:  pci_request_irq+0xa9/0xf0
      WARN:  ? pci_alloc_irq_vectors_affinity+0xbb/0x130
      WARN:  queue_request_irq+0x4c/0x70 [nvme]
      WARN:  nvme_reset_work+0x82d/0x1550 [nvme]
      WARN:  ? check_preempt_wakeup+0x14f/0x230
      WARN:  ? check_preempt_curr+0x29/0x80
      WARN:  ? nvme_irq_check+0x30/0x30 [nvme]
      WARN:  process_one_work+0x18e/0x3c0
      WARN:  worker_thread+0x30/0x3a0
      WARN:  ? process_one_work+0x3c0/0x3c0
      WARN:  kthread+0x113/0x130
      WARN:  ? kthread_park+0x90/0x90
      WARN:  ret_from_fork+0x3a/0x50
    
    This patch sets evtchn_to_irq rows via a cmpxchg operation so that they
    will be set only once. The row is now cleared before writing it to
    evtchn_to_irq in order to not create a race once the row is visible for
    other threads.
    
    While at it, do not require the page to be zeroed, because it will be
    overwritten with -1's in clear_evtchn_to_irq_row anyway.
    
    Signed-off-by: Maximilian Heyne <mheyne@amazon.de>
    Fixes: d0b075ffeede ("xen/events: Refactor evtchn_to_irq array to be dynamically allocated")
    Link: https://lore.kernel.org/r/20210812130930.127134-1-mheyne@amazon.de
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65395b053d03cb662e63cbf2c7e0faef8c15cb8c
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Fri Aug 6 10:41:30 2021 -0700

    drm/i915: Only access SFC_DONE when media domain is not fused off
    
    [ Upstream commit 24d032e2359e3abc926b3d423f49a7c33e0b7836 ]
    
    The SFC_DONE register lives within the corresponding VD0/VD2/VD4/VD6
    forcewake domain and is not accessible if the vdbox in that domain is
    fused off and the forcewake is not initialized.
    
    This mistake went unnoticed because until recently we were using the
    wrong register offset for the SFC_DONE register; once the register
    offset was corrected, we started hitting errors like
    
      <4> [544.989065] i915 0000:cc:00.0: Uninitialized forcewake domain(s) 0x80 accessed at 0x1ce000
    
    on parts with fused-off vdbox engines.
    
    Fixes: e50dbdbfd9fb ("drm/i915/tgl: Add SFC instdone to error state")
    Fixes: 9c9c6d0ab08a ("drm/i915: Correct SFC_DONE register offset")
    Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210806174130.1058960-1-matthew.d.roper@intel.com
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
    (cherry picked from commit c5589bb5dccb0c5cb74910da93663f489589f3ce)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    [Changed Fixes tag to match the cherry-picked 82929a2140eb]
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4344440d91b347bd2b1c7367a7a523e1d2afd8ba
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 11 12:57:15 2021 -0700

    net: igmp: increase size of mr_ifc_count
    
    [ Upstream commit b69dd5b3780a7298bd893816a09da751bc0636f7 ]
    
    Some arches support cmpxchg() on 4-byte and 8-byte only.
    Increase mr_ifc_count width to 32bit to fix this problem.
    
    Fixes: 4a2b285e7e10 ("net: igmp: fix data-race in igmp_ifc_timer_expire()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210811195715.3684218-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 696afe28dc515f3987f4dc2ad071e8fc1e058ea8
Author: Neal Cardwell <ncardwell@google.com>
Date:   Tue Aug 10 22:40:56 2021 -0400

    tcp_bbr: fix u32 wrap bug in round logic if bbr_init() called after 2B packets
    
    [ Upstream commit 6de035fec045f8ae5ee5f3a02373a18b939e91fb ]
    
    Currently if BBR congestion control is initialized after more than 2B
    packets have been delivered, depending on the phase of the
    tp->delivered counter the tracking of BBR round trips can get stuck.
    
    The bug arises because if tp->delivered is between 2^31 and 2^32 at
    the time the BBR congestion control module is initialized, then the
    initialization of bbr->next_rtt_delivered to 0 will cause the logic to
    believe that the end of the round trip is still billions of packets in
    the future. More specifically, the following check will fail
    repeatedly:
    
      !before(rs->prior_delivered, bbr->next_rtt_delivered)
    
    and thus the connection will take up to 2B packets delivered before
    that check will pass and the connection will set:
    
      bbr->round_start = 1;
    
    This could cause many mechanisms in BBR to fail to trigger, for
    example bbr_check_full_bw_reached() would likely never exit STARTUP.
    
    This bug is 5 years old and has not been observed, and as a practical
    matter this would likely rarely trigger, since it would require
    transferring at least 2B packets, or likely more than 3 terabytes of
    data, before switching congestion control algorithms to BBR.
    
    This patch is a stable candidate for kernels as far back as v4.9,
    when tcp_bbr.c was added.
    
    Fixes: 0f8782ea1497 ("tcp_bbr: add BBR congestion control")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Reviewed-by: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Kevin Yang <yyd@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20210811024056.235161-1-ncardwell@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8976606ca34714223fc0ab13b611c490a37a10c7
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Aug 9 18:06:28 2021 +0200

    net: linkwatch: fix failure to restore device state across suspend/resume
    
    [ Upstream commit 6922110d152e56d7569616b45a1f02876cf3eb9f ]
    
    After migrating my laptop from 4.19-LTS to 5.4-LTS a while ago I noticed
    that my Ethernet port to which a bond and a VLAN interface are attached
    appeared to remain up after resuming from suspend with the cable unplugged
    (and that problem still persists with 5.10-LTS).
    
    It happens that the following happens:
    
      - the network driver (e1000e here) prepares to suspend, calls e1000e_down()
        which calls netif_carrier_off() to signal that the link is going down.
      - netif_carrier_off() adds a link_watch event to the list of events for
        this device
      - the device is completely stopped.
      - the machine suspends
      - the cable is unplugged and the machine brought to another location
      - the machine is resumed
      - the queued linkwatch events are processed for the device
      - the device doesn't yet have the __LINK_STATE_PRESENT bit and its events
        are silently dropped
      - the device is resumed with its link down
      - the upper VLAN and bond interfaces are never notified that the link had
        been turned down and remain up
      - the only way to provoke a change is to physically connect the machine
        to a port and possibly unplug it.
    
    The state after resume looks like this:
      $ ip -br li | egrep 'bond|eth'
      bond0            UP             e8:6a:64:64:64:64 <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP>
      eth0             DOWN           e8:6a:64:64:64:64 <NO-CARRIER,BROADCAST,MULTICAST,SLAVE,UP>
      eth0.2@eth0      UP             e8:6a:64:64:64:64 <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP>
    
    Placing an explicit call to netdev_state_change() either in the suspend
    or the resume code in the NIC driver worked around this but the solution
    is not satisfying.
    
    The issue in fact really is in link_watch that loses events while it
    ought not to. It happens that the test for the device being present was
    added by commit 124eee3f6955 ("net: linkwatch: add check for netdevice
    being present to linkwatch_do_dev") in 4.20 to avoid an access to
    devices that are not present.
    
    Instead of dropping events, this patch proceeds slightly differently by
    postponing their handling so that they happen after the device is fully
    resumed.
    
    Fixes: 124eee3f6955 ("net: linkwatch: add check for netdevice being present to linkwatch_do_dev")
    Link: https://lists.openwall.net/netdev/2018/03/15/62
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Link: https://lore.kernel.org/r/20210809160628.22623-1-w@1wt.eu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c2af90119ea5c702b6f59d8c73734da5e5b2e3a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Aug 9 21:20:23 2021 +0800

    net: bridge: fix memleak in br_add_if()
    
    [ Upstream commit 519133debcc19f5c834e7e28480b60bdc234fe02 ]
    
    I got a memleak report:
    
    BUG: memory leak
    unreferenced object 0x607ee521a658 (size 240):
    comm "syz-executor.0", pid 955, jiffies 4294780569 (age 16.449s)
    hex dump (first 32 bytes, cpu 1):
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
    backtrace:
    [<00000000d830ea5a>] br_multicast_add_port+0x1c2/0x300 net/bridge/br_multicast.c:1693
    [<00000000274d9a71>] new_nbp net/bridge/br_if.c:435 [inline]
    [<00000000274d9a71>] br_add_if+0x670/0x1740 net/bridge/br_if.c:611
    [<0000000012ce888e>] do_set_master net/core/rtnetlink.c:2513 [inline]
    [<0000000012ce888e>] do_set_master+0x1aa/0x210 net/core/rtnetlink.c:2487
    [<0000000099d1cafc>] __rtnl_newlink+0x1095/0x13e0 net/core/rtnetlink.c:3457
    [<00000000a01facc0>] rtnl_newlink+0x64/0xa0 net/core/rtnetlink.c:3488
    [<00000000acc9186c>] rtnetlink_rcv_msg+0x369/0xa10 net/core/rtnetlink.c:5550
    [<00000000d4aabb9c>] netlink_rcv_skb+0x134/0x3d0 net/netlink/af_netlink.c:2504
    [<00000000bc2e12a3>] netlink_unicast_kernel net/netlink/af_netlink.c:1314 [inline]
    [<00000000bc2e12a3>] netlink_unicast+0x4a0/0x6a0 net/netlink/af_netlink.c:1340
    [<00000000e4dc2d0e>] netlink_sendmsg+0x789/0xc70 net/netlink/af_netlink.c:1929
    [<000000000d22c8b3>] sock_sendmsg_nosec net/socket.c:654 [inline]
    [<000000000d22c8b3>] sock_sendmsg+0x139/0x170 net/socket.c:674
    [<00000000e281417a>] ____sys_sendmsg+0x658/0x7d0 net/socket.c:2350
    [<00000000237aa2ab>] ___sys_sendmsg+0xf8/0x170 net/socket.c:2404
    [<000000004f2dc381>] __sys_sendmsg+0xd3/0x190 net/socket.c:2433
    [<0000000005feca6c>] do_syscall_64+0x37/0x90 arch/x86/entry/common.c:47
    [<000000007304477d>] entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    On error path of br_add_if(), p->mcast_stats allocated in
    new_nbp() need be freed, or it will be leaked.
    
    Fixes: 1080ab95e3c7 ("net: bridge: add support for IGMP/MLD stats and export them via netlink")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Link: https://lore.kernel.org/r/20210809132023.978546-1-yangyingliang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f333a5ca71c3054a2420545a200a3c80983190b8
Author: Nikolay Aleksandrov <nikolay@nvidia.com>
Date:   Tue Aug 10 14:00:10 2021 +0300

    net: bridge: fix flags interpretation for extern learn fdb entries
    
    [ Upstream commit 45a687879b31caae4032abd1c2402e289d2b8083 ]
    
    Ignore fdb flags when adding port extern learn entries and always set
    BR_FDB_LOCAL flag when adding bridge extern learn entries. This is
    closest to the behaviour we had before and avoids breaking any use cases
    which were allowed.
    
    This patch fixes iproute2 calls which assume NUD_PERMANENT and were
    allowed before, example:
    $ bridge fdb add 00:11:22:33:44:55 dev swp1 extern_learn
    
    Extern learn entries are allowed to roam, but do not expire, so static
    or dynamic flags make no sense for them.
    
    Also add a comment for future reference.
    
    Fixes: eb100e0e24a2 ("net: bridge: allow to add externally learned entries from user-space")
    Fixes: 0541a6293298 ("net: bridge: validate the NUD_PERMANENT bit when adding an extern_learn FDB entry")
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20210810110010.43859-1-razor@blackwall.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3b949b86d09d96d35a59ce6247054c8cd7c6c8d
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Mon Aug 2 02:17:30 2021 +0300

    net: bridge: validate the NUD_PERMANENT bit when adding an extern_learn FDB entry
    
    [ Upstream commit 0541a6293298fb52789de389dfb27ef54df81f73 ]
    
    Currently it is possible to add broken extern_learn FDB entries to the
    bridge in two ways:
    
    1. Entries pointing towards the bridge device that are not local/permanent:
    
    ip link add br0 type bridge
    bridge fdb add 00:01:02:03:04:05 dev br0 self extern_learn static
    
    2. Entries pointing towards the bridge device or towards a port that
    are marked as local/permanent, however the bridge does not process the
    'permanent' bit in any way, therefore they are recorded as though they
    aren't permanent:
    
    ip link add br0 type bridge
    bridge fdb add 00:01:02:03:04:05 dev br0 self extern_learn permanent
    
    Since commit 52e4bec15546 ("net: bridge: switchdev: treat local FDBs the
    same as entries towards the bridge"), these incorrect FDB entries can
    even trigger NULL pointer dereferences inside the kernel.
    
    This is because that commit made the assumption that all FDB entries
    that are not local/permanent have a valid destination port. For context,
    local / permanent FDB entries either have fdb->dst == NULL, and these
    point towards the bridge device and are therefore local and not to be
    used for forwarding, or have fdb->dst == a net_bridge_port structure
    (but are to be treated in the same way, i.e. not for forwarding).
    
    That assumption _is_ correct as long as things are working correctly in
    the bridge driver, i.e. we cannot logically have fdb->dst == NULL under
    any circumstance for FDB entries that are not local. However, the
    extern_learn code path where FDB entries are managed by a user space
    controller show that it is possible for the bridge kernel driver to
    misinterpret the NUD flags of an entry transmitted by user space, and
    end up having fdb->dst == NULL while not being a local entry. This is
    invalid and should be rejected.
    
    Before, the two commands listed above both crashed the kernel in this
    check from br_switchdev_fdb_notify:
    
            struct net_device *dev = info.is_local ? br->dev : dst->dev;
    
    info.is_local == false, dst == NULL.
    
    After this patch, the invalid entry added by the first command is
    rejected:
    
    ip link add br0 type bridge && bridge fdb add 00:01:02:03:04:05 dev br0 self extern_learn static; ip link del br0
    Error: bridge: FDB entry towards bridge must be permanent.
    
    and the valid entry added by the second command is properly treated as a
    local address and does not crash br_switchdev_fdb_notify anymore:
    
    ip link add br0 type bridge && bridge fdb add 00:01:02:03:04:05 dev br0 self extern_learn permanent; ip link del br0
    
    Fixes: eb100e0e24a2 ("net: bridge: allow to add externally learned entries from user-space")
    Reported-by: syzbot+9ba1174359adba5a5b7c@syzkaller.appspotmail.com
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Link: https://lore.kernel.org/r/20210801231730.7493-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cad01aca1fa76151a5a913d8a2d7a912425e836
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Aug 10 14:19:56 2021 +0300

    net: dsa: sja1105: fix broken backpressure in .port_fdb_dump
    
    [ Upstream commit 21b52fed928e96d2f75d2f6aa9eac7a4b0b55d22 ]
    
    rtnl_fdb_dump() has logic to split a dump of PF_BRIDGE neighbors into
    multiple netlink skbs if the buffer provided by user space is too small
    (one buffer will typically handle a few hundred FDB entries).
    
    When the current buffer becomes full, nlmsg_put() in
    dsa_slave_port_fdb_do_dump() returns -EMSGSIZE and DSA saves the index
    of the last dumped FDB entry, returns to rtnl_fdb_dump() up to that
    point, and then the dump resumes on the same port with a new skb, and
    FDB entries up to the saved index are simply skipped.
    
    Since dsa_slave_port_fdb_do_dump() is pointed to by the "cb" passed to
    drivers, then drivers must check for the -EMSGSIZE error code returned
    by it. Otherwise, when a netlink skb becomes full, DSA will no longer
    save newly dumped FDB entries to it, but the driver will continue
    dumping. So FDB entries will be missing from the dump.
    
    Fix the broken backpressure by propagating the "cb" return code and
    allow rtnl_fdb_dump() to restart the FDB dump with a new skb.
    
    Fixes: 291d1e72b756 ("net: dsa: sja1105: Add support for FDB and MDB management")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56cc3408ff2a601b7fb99c5831b17e8e1eee0ccd
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Aug 10 14:19:55 2021 +0300

    net: dsa: lantiq: fix broken backpressure in .port_fdb_dump
    
    [ Upstream commit 871a73a1c8f55da0a3db234e9dd816ea4fd546f2 ]
    
    rtnl_fdb_dump() has logic to split a dump of PF_BRIDGE neighbors into
    multiple netlink skbs if the buffer provided by user space is too small
    (one buffer will typically handle a few hundred FDB entries).
    
    When the current buffer becomes full, nlmsg_put() in
    dsa_slave_port_fdb_do_dump() returns -EMSGSIZE and DSA saves the index
    of the last dumped FDB entry, returns to rtnl_fdb_dump() up to that
    point, and then the dump resumes on the same port with a new skb, and
    FDB entries up to the saved index are simply skipped.
    
    Since dsa_slave_port_fdb_do_dump() is pointed to by the "cb" passed to
    drivers, then drivers must check for the -EMSGSIZE error code returned
    by it. Otherwise, when a netlink skb becomes full, DSA will no longer
    save newly dumped FDB entries to it, but the driver will continue
    dumping. So FDB entries will be missing from the dump.
    
    Fix the broken backpressure by propagating the "cb" return code and
    allow rtnl_fdb_dump() to restart the FDB dump with a new skb.
    
    Fixes: 58c59ef9e930 ("net: dsa: lantiq: Add Forwarding Database access")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7720b35cd3232de0e30ce534a6587aef1d36689
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Aug 10 14:19:54 2021 +0300

    net: dsa: lan9303: fix broken backpressure in .port_fdb_dump
    
    [ Upstream commit ada2fee185d8145afb89056558bb59545b9dbdd0 ]
    
    rtnl_fdb_dump() has logic to split a dump of PF_BRIDGE neighbors into
    multiple netlink skbs if the buffer provided by user space is too small
    (one buffer will typically handle a few hundred FDB entries).
    
    When the current buffer becomes full, nlmsg_put() in
    dsa_slave_port_fdb_do_dump() returns -EMSGSIZE and DSA saves the index
    of the last dumped FDB entry, returns to rtnl_fdb_dump() up to that
    point, and then the dump resumes on the same port with a new skb, and
    FDB entries up to the saved index are simply skipped.
    
    Since dsa_slave_port_fdb_do_dump() is pointed to by the "cb" passed to
    drivers, then drivers must check for the -EMSGSIZE error code returned
    by it. Otherwise, when a netlink skb becomes full, DSA will no longer
    save newly dumped FDB entries to it, but the driver will continue
    dumping. So FDB entries will be missing from the dump.
    
    Fix the broken backpressure by propagating the "cb" return code and
    allow rtnl_fdb_dump() to restart the FDB dump with a new skb.
    
    Fixes: ab335349b852 ("net: dsa: lan9303: Add port_fast_age and port_fdb_dump methods")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24e1b7dbb1744c9919afc2285b676300e57fa246
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Aug 10 02:45:47 2021 -0700

    net: igmp: fix data-race in igmp_ifc_timer_expire()
    
    [ Upstream commit 4a2b285e7e103d4d6c6ed3e5052a0ff74a5d7f15 ]
    
    Fix the data-race reported by syzbot [1]
    Issue here is that igmp_ifc_timer_expire() can update in_dev->mr_ifc_count
    while another change just occured from another context.
    
    in_dev->mr_ifc_count is only 8bit wide, so the race had little
    consequences.
    
    [1]
    BUG: KCSAN: data-race in igmp_ifc_event / igmp_ifc_timer_expire
    
    write to 0xffff8881051e3062 of 1 bytes by task 12547 on cpu 0:
     igmp_ifc_event+0x1d5/0x290 net/ipv4/igmp.c:821
     igmp_group_added+0x462/0x490 net/ipv4/igmp.c:1356
     ____ip_mc_inc_group+0x3ff/0x500 net/ipv4/igmp.c:1461
     __ip_mc_join_group+0x24d/0x2c0 net/ipv4/igmp.c:2199
     ip_mc_join_group_ssm+0x20/0x30 net/ipv4/igmp.c:2218
     do_ip_setsockopt net/ipv4/ip_sockglue.c:1285 [inline]
     ip_setsockopt+0x1827/0x2a80 net/ipv4/ip_sockglue.c:1423
     tcp_setsockopt+0x8c/0xa0 net/ipv4/tcp.c:3657
     sock_common_setsockopt+0x5d/0x70 net/core/sock.c:3362
     __sys_setsockopt+0x18f/0x200 net/socket.c:2159
     __do_sys_setsockopt net/socket.c:2170 [inline]
     __se_sys_setsockopt net/socket.c:2167 [inline]
     __x64_sys_setsockopt+0x62/0x70 net/socket.c:2167
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    read to 0xffff8881051e3062 of 1 bytes by interrupt on cpu 1:
     igmp_ifc_timer_expire+0x706/0xa30 net/ipv4/igmp.c:808
     call_timer_fn+0x2e/0x1d0 kernel/time/timer.c:1419
     expire_timers+0x135/0x250 kernel/time/timer.c:1464
     __run_timers+0x358/0x420 kernel/time/timer.c:1732
     run_timer_softirq+0x19/0x30 kernel/time/timer.c:1745
     __do_softirq+0x12c/0x26e kernel/softirq.c:558
     invoke_softirq kernel/softirq.c:432 [inline]
     __irq_exit_rcu+0x9a/0xb0 kernel/softirq.c:636
     sysvec_apic_timer_interrupt+0x69/0x80 arch/x86/kernel/apic/apic.c:1100
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:638
     console_unlock+0x8e8/0xb30 kernel/printk/printk.c:2646
     vprintk_emit+0x125/0x3d0 kernel/printk/printk.c:2174
     vprintk_default+0x22/0x30 kernel/printk/printk.c:2185
     vprintk+0x15a/0x170 kernel/printk/printk_safe.c:392
     printk+0x62/0x87 kernel/printk/printk.c:2216
     selinux_netlink_send+0x399/0x400 security/selinux/hooks.c:6041
     security_netlink_send+0x42/0x90 security/security.c:2070
     netlink_sendmsg+0x59e/0x7c0 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:703 [inline]
     sock_sendmsg net/socket.c:723 [inline]
     ____sys_sendmsg+0x360/0x4d0 net/socket.c:2392
     ___sys_sendmsg net/socket.c:2446 [inline]
     __sys_sendmsg+0x1ed/0x270 net/socket.c:2475
     __do_sys_sendmsg net/socket.c:2484 [inline]
     __se_sys_sendmsg net/socket.c:2482 [inline]
     __x64_sys_sendmsg+0x42/0x50 net/socket.c:2482
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x01 -> 0x02
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 12539 Comm: syz-executor.1 Not tainted 5.14.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69b13167a636c737475a749e035fa3325558a252
Author: Takeshi Misawa <jeliantsurux@gmail.com>
Date:   Thu Aug 5 16:54:14 2021 +0900

    net: Fix memory leak in ieee802154_raw_deliver
    
    [ Upstream commit 1090340f7ee53e824fd4eef66a4855d548110c5b ]
    
    If IEEE-802.15.4-RAW is closed before receive skb, skb is leaked.
    Fix this, by freeing sk_receive_queue in sk->sk_destruct().
    
    syzbot report:
    BUG: memory leak
    unreferenced object 0xffff88810f644600 (size 232):
      comm "softirq", pid 0, jiffies 4294967032 (age 81.270s)
      hex dump (first 32 bytes):
        10 7d 4b 12 81 88 ff ff 10 7d 4b 12 81 88 ff ff  .}K......}K.....
        00 00 00 00 00 00 00 00 40 7c 4b 12 81 88 ff ff  ........@|K.....
      backtrace:
        [<ffffffff83651d4a>] skb_clone+0xaa/0x2b0 net/core/skbuff.c:1496
        [<ffffffff83fe1b80>] ieee802154_raw_deliver net/ieee802154/socket.c:369 [inline]
        [<ffffffff83fe1b80>] ieee802154_rcv+0x100/0x340 net/ieee802154/socket.c:1070
        [<ffffffff8367cc7a>] __netif_receive_skb_one_core+0x6a/0xa0 net/core/dev.c:5384
        [<ffffffff8367cd07>] __netif_receive_skb+0x27/0xa0 net/core/dev.c:5498
        [<ffffffff8367cdd9>] netif_receive_skb_internal net/core/dev.c:5603 [inline]
        [<ffffffff8367cdd9>] netif_receive_skb+0x59/0x260 net/core/dev.c:5662
        [<ffffffff83fe6302>] ieee802154_deliver_skb net/mac802154/rx.c:29 [inline]
        [<ffffffff83fe6302>] ieee802154_subif_frame net/mac802154/rx.c:102 [inline]
        [<ffffffff83fe6302>] __ieee802154_rx_handle_packet net/mac802154/rx.c:212 [inline]
        [<ffffffff83fe6302>] ieee802154_rx+0x612/0x620 net/mac802154/rx.c:284
        [<ffffffff83fe59a6>] ieee802154_tasklet_handler+0x86/0xa0 net/mac802154/main.c:35
        [<ffffffff81232aab>] tasklet_action_common.constprop.0+0x5b/0x100 kernel/softirq.c:557
        [<ffffffff846000bf>] __do_softirq+0xbf/0x2ab kernel/softirq.c:345
        [<ffffffff81232f4c>] do_softirq kernel/softirq.c:248 [inline]
        [<ffffffff81232f4c>] do_softirq+0x5c/0x80 kernel/softirq.c:235
        [<ffffffff81232fc1>] __local_bh_enable_ip+0x51/0x60 kernel/softirq.c:198
        [<ffffffff8367a9a4>] local_bh_enable include/linux/bottom_half.h:32 [inline]
        [<ffffffff8367a9a4>] rcu_read_unlock_bh include/linux/rcupdate.h:745 [inline]
        [<ffffffff8367a9a4>] __dev_queue_xmit+0x7f4/0xf60 net/core/dev.c:4221
        [<ffffffff83fe2db4>] raw_sendmsg+0x1f4/0x2b0 net/ieee802154/socket.c:295
        [<ffffffff8363af16>] sock_sendmsg_nosec net/socket.c:654 [inline]
        [<ffffffff8363af16>] sock_sendmsg+0x56/0x80 net/socket.c:674
        [<ffffffff8363deec>] __sys_sendto+0x15c/0x200 net/socket.c:1977
        [<ffffffff8363dfb6>] __do_sys_sendto net/socket.c:1989 [inline]
        [<ffffffff8363dfb6>] __se_sys_sendto net/socket.c:1985 [inline]
        [<ffffffff8363dfb6>] __x64_sys_sendto+0x26/0x30 net/socket.c:1985
    
    Fixes: 9ec767160357 ("net: add IEEE 802.15.4 socket family implementation")
    Reported-and-tested-by: syzbot+1f68113fa907bf0695a8@syzkaller.appspotmail.com
    Signed-off-by: Takeshi Misawa <jeliantsurux@gmail.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20210805075414.GA15796@DESKTOP
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbfaf7a6a23a1fa06e83e3b7bec878ee85f5a5c6
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Tue Aug 10 01:00:06 2021 +0200

    net: dsa: microchip: ksz8795: Fix VLAN filtering
    
    [ Upstream commit 164844135a3f215d3018ee9d6875336beb942413 ]
    
    Currently ksz8_port_vlan_filtering() sets or clears the VLAN Enable
    hardware flag.  That controls discarding of packets with a VID that
    has not been enabled for any port on the switch.
    
    Since it is a global flag, set the dsa_switch::vlan_filtering_is_global
    flag so that the DSA core understands this can't be controlled per
    port.
    
    When VLAN filtering is enabled, the switch should also discard packets
    with a VID that's not enabled on the ingress port.  Set or clear each
    external port's VLAN Ingress Filter flag in ksz8_port_vlan_filtering()
    to make that happen.
    
    Fixes: e66f840c08a2 ("net: dsa: ksz: Add Microchip KSZ8795 DSA driver")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccc1fe82c87858a0543fd5afa784086fe0512040
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Tue Aug 10 00:59:12 2021 +0200

    net: dsa: microchip: Fix ksz_read64()
    
    [ Upstream commit c34f674c8875235725c3ef86147a627f165d23b4 ]
    
    ksz_read64() currently does some dubious byte-swapping on the two
    halves of a 64-bit register, and then only returns the high bits.
    Replace this with a straightforward expression.
    
    Fixes: e66f840c08a2 ("net: dsa: ksz: Add Microchip KSZ8795 DSA driver")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 558092b8ed31add3a2c681cf79289f0ae28fafb4
Author: Christian Hewitt <christianshewitt@gmail.com>
Date:   Fri Aug 6 09:40:05 2021 +0000

    drm/meson: fix colour distortion from HDR set during vendor u-boot
    
    [ Upstream commit bf33677a3c394bb8fddd48d3bbc97adf0262e045 ]
    
    Add support for the OSD1 HDR registers so meson DRM can handle the HDR
    properties set by Amlogic u-boot on G12A and newer devices which result
    in blue/green/pink colour distortion to display output.
    
    This takes the original patch submissions from Mathias [0] and [1] with
    corrections for formatting and the missing description and attribution
    needed for merge.
    
    [0] https://lore.kernel.org/linux-amlogic/59dfd7e6-fc91-3d61-04c4-94e078a3188c@baylibre.com/T/
    [1] https://lore.kernel.org/linux-amlogic/CAOKfEHBx_fboUqkENEMd-OC-NSrf46nto+vDLgvgttzPe99kXg@mail.gmail.com/T/#u
    
    Fixes: 728883948b0d ("drm/meson: Add G12A Support for VIU setup")
    Suggested-by: Mathias Steiger <mathias.steiger@googlemail.com>
    Signed-off-by: Christian Hewitt <christianshewitt@gmail.com>
    Tested-by: Neil Armstrong <narmstrong@baylibre.com>
    Tested-by: Philip Milev <milev.philip@gmail.com>
    [narmsrong: adding missing space on second tested-by tag]
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210806094005.7136-1-christianshewitt@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e1886465deade57ac97e8977692ccac077c4f91
Author: Aya Levin <ayal@nvidia.com>
Date:   Tue Jun 8 16:38:30 2021 +0300

    net/mlx5: Fix return value from tracer initialization
    
    [ Upstream commit bd37c2888ccaa5ceb9895718f6909b247cc372e0 ]
    
    Check return value of mlx5_fw_tracer_start(), set error path and fix
    return value of mlx5_fw_tracer_init() accordingly.
    
    Fixes: c71ad41ccb0c ("net/mlx5: FW tracer, events handling")
    Signed-off-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 303ba011f5e1ca6a66be8bc16ff1c4aaaeafa96f
Author: Shay Drory <shayd@nvidia.com>
Date:   Sun Apr 11 15:32:55 2021 +0300

    net/mlx5: Synchronize correct IRQ when destroying CQ
    
    [ Upstream commit 563476ae0c5e48a028cbfa38fa9d2fc0418eb88f ]
    
    The CQ destroy is performed based on the IRQ number that is stored in
    cq->irqn. That number wasn't set explicitly during CQ creation and as
    expected some of the API users of mlx5_core_create_cq() forgot to update
    it.
    
    This caused to wrong synchronization call of the wrong IRQ with a number
    0 instead of the real one.
    
    As a fix, set the IRQ number directly in the mlx5_core_create_cq() and
    update all users accordingly.
    
    Fixes: 1a86b377aa21 ("vdpa/mlx5: Add VDPA driver for supported mlx5 devices")
    Fixes: ef1659ade359 ("IB/mlx5: Add DEVX support for CQ events")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00a0c11ddd72c85a71335b0b5b28738c37093632
Author: Guillaume Nault <gnault@redhat.com>
Date:   Fri Aug 6 17:52:06 2021 +0200

    bareudp: Fix invalid read beyond skb's linear data
    
    [ Upstream commit 143a8526ab5fd4f8a0c4fe2a9cb28c181dc5a95f ]
    
    Data beyond the UDP header might not be part of the skb's linear data.
    Use skb_copy_bits() instead of direct access to skb->data+X, so that
    we read the correct bytes even on a fragmented skb.
    
    Fixes: 4b5f67232d95 ("net: Special handling for IP & MPLS.")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Link: https://lore.kernel.org/r/7741c46545c6ef02e70c80a9b32814b22d9616b3.1628264975.git.gnault@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30b1fc47f7657da952a20c16892e8d21190eefbf
Author: Roi Dayan <roid@nvidia.com>
Date:   Sun Aug 8 09:52:42 2021 +0300

    psample: Add a fwd declaration for skbuff
    
    [ Upstream commit beb7f2de5728b0bd2140a652fa51f6ad85d159f7 ]
    
    Without this there is a warning if source files include psample.h
    before skbuff.h or doesn't include it at all.
    
    Fixes: 6ae0a6286171 ("net: Introduce psample, a new genetlink channel for packet sampling")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Link: https://lore.kernel.org/r/20210808065242.1522535-1-roid@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3f0b170842c92e120bf77b949df03cc4838a0b3
Author: Md Fahad Iqbal Polash <md.fahad.iqbal.polash@intel.com>
Date:   Fri Jun 4 09:53:33 2021 -0700

    iavf: Set RSS LUT and key in reset handle path
    
    [ Upstream commit a7550f8b1c9712894f9e98d6caf5f49451ebd058 ]
    
    iavf driver should set RSS LUT and key unconditionally in reset
    path. Currently, the driver does not do that. This patch fixes
    this issue.
    
    Fixes: 2c86ac3c7079 ("i40evf: create a generic config RSS function")
    Signed-off-by: Md Fahad Iqbal Polash <md.fahad.iqbal.polash@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6192bae12e40e5f6d9e104691ae491a501cf1cd
Author: Brett Creeley <brett.creeley@intel.com>
Date:   Fri Aug 6 09:51:27 2021 -0700

    ice: don't remove netdev->dev_addr from uc sync list
    
    [ Upstream commit 3ba7f53f8bf1fb862e36c7f74434ac3aceb60158 ]
    
    In some circumstances, such as with bridging, it's possible that the
    stack will add the device's own MAC address to its unicast address list.
    
    If, later, the stack deletes this address, the driver will receive a
    request to remove this address.
    
    The driver stores its current MAC address as part of the VSI MAC filter
    list instead of separately. So, this causes a problem when the device's
    MAC address is deleted unexpectedly, which results in traffic failure in
    some cases.
    
    The following configuration steps will reproduce the previously
    mentioned problem:
    
    > ip link set eth0 up
    > ip link add dev br0 type bridge
    > ip link set br0 up
    > ip addr flush dev eth0
    > ip link set eth0 master br0
    > echo 1 > /sys/class/net/br0/bridge/vlan_filtering
    > modprobe -r veth
    > modprobe -r bridge
    > ip addr add 192.168.1.100/24 dev eth0
    
    The following ping command fails due to the netdev->dev_addr being
    deleted when removing the bridge module.
    > ping <link partner>
    
    Fix this by making sure to not delete the netdev->dev_addr during MAC
    address sync. After fixing this issue it was noticed that the
    netdev_warn() in .set_mac was overly verbose, so make it at
    netdev_dbg().
    
    Also, there is a possibility of a race condition between .set_mac and
    .set_rx_mode. Fix this by calling netif_addr_lock_bh() and
    netif_addr_unlock_bh() on the device's netdev when the netdev->dev_addr
    is going to be updated in .set_mac.
    
    Fixes: e94d44786693 ("ice: Implement filter sync, NDO operations and bump version")
    Signed-off-by: Brett Creeley <brett.creeley@intel.com>
    Tested-by: Liang Li <liali@redhat.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bae5b521feaa9ce08d7cf0a60c9c955ca76b2cf1
Author: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
Date:   Wed Jul 28 12:39:10 2021 -0700

    ice: Prevent probing virtual functions
    
    [ Upstream commit 50ac7479846053ca8054be833c1594e64de496bb ]
    
    The userspace utility "driverctl" can be used to change/override the
    system's default driver choices. This is useful in some situations
    (buggy driver, old driver missing a device ID, trying a workaround,
    etc.) where the user needs to load a different driver.
    
    However, this is also prone to user error, where a driver is mapped
    to a device it's not designed to drive. For example, if the ice driver
    is mapped to driver iavf devices, the ice driver crashes.
    
    Add a check to return an error if the ice driver is being used to
    probe a virtual function.
    
    Fixes: 837f08fdecbe ("ice: Add basic driver framework for Intel(R) E800 Series")
    Signed-off-by: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 059238c52c61542757889952cf6a368cd0bf79f0
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Mon Aug 9 15:04:55 2021 +0800

    net: sched: act_mirred: Reset ct info when mirror/redirect skb
    
    [ Upstream commit d09c548dbf3b31cb07bba562e0f452edfa01efe3 ]
    
    When mirror/redirect a skb to a different port, the ct info should be reset
    for reclassification. Or the pkts will match unexpected rules. For example,
    with following topology and commands:
    
        -----------
                  |
           veth0 -+-------
                  |
           veth1 -+-------
                  |
       ------------
    
     tc qdisc add dev veth0 clsact
     # The same with "action mirred egress mirror dev veth1" or "action mirred ingress redirect dev veth1"
     tc filter add dev veth0 egress chain 1 protocol ip flower ct_state +trk action mirred ingress mirror dev veth1
     tc filter add dev veth0 egress chain 0 protocol ip flower ct_state -inv action ct commit action goto chain 1
     tc qdisc add dev veth1 clsact
     tc filter add dev veth1 ingress chain 0 protocol ip flower ct_state +trk action drop
    
     ping <remove ip via veth0> &
     tc -s filter show dev veth1 ingress
    
    With command 'tc -s filter show', we can find the pkts were dropped on
    veth1.
    
    Fixes: b57dc7c13ea9 ("net/sched: Introduce action ct")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f15f7716b04774636487b410e040d20b26b7ed33
Author: Karsten Graul <kgraul@linux.ibm.com>
Date:   Mon Aug 9 11:05:56 2021 +0200

    net/smc: fix wait on already cleared link
    
    [ Upstream commit 8f3d65c166797746455553f4eaf74a5f89f996d4 ]
    
    There can be a race between the waiters for a tx work request buffer
    and the link down processing that finally clears the link. Although
    all waiters are woken up before the link is cleared there might be
    waiters which did not yet get back control and are still waiting.
    This results in an access to a cleared wait queue head.
    
    Fix this by introducing atomic reference counting around the wait calls,
    and wait with the link clear processing until all waiters have finished.
    Move the work request layer related calls into smc_wr.c and set the
    link state to INACTIVE before calling smcr_link_clear() in
    smc_llc_srv_add_link().
    
    Fixes: 15e1b99aadfb ("net/smc: no WR buffer wait for terminating link group")
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Guvenc Gulce <guvenc@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51f4965d775ef9cf1fe7ed3e4dfd2586d4964ffc
Author: Pali Rohár <pali@kernel.org>
Date:   Sat Aug 7 15:27:03 2021 +0200

    ppp: Fix generating ifname when empty IFLA_IFNAME is specified
    
    [ Upstream commit 2459dcb96bcba94c08d6861f8a050185ff301672 ]
    
    IFLA_IFNAME is nul-term string which means that IFLA_IFNAME buffer can be
    larger than length of string which contains.
    
    Function __rtnl_newlink() generates new own ifname if either IFLA_IFNAME
    was not specified at all or userspace passed empty nul-term string.
    
    It is expected that if userspace does not specify ifname for new ppp netdev
    then kernel generates one in format "ppp<id>" where id matches to the ppp
    unit id which can be later obtained by PPPIOCGUNIT ioctl.
    
    And it works in this way if IFLA_IFNAME is not specified at all. But it
    does not work when IFLA_IFNAME is specified with empty string.
    
    So fix this logic also for empty IFLA_IFNAME in ppp_nl_newlink() function
    and correctly generates ifname based on ppp unit identifier if userspace
    did not provided preferred ifname.
    
    Without this patch when IFLA_IFNAME was specified with empty string then
    kernel created a new ppp interface in format "ppp<id>" but id did not
    match ppp unit id returned by PPPIOCGUNIT ioctl. In this case id was some
    number generated by __rtnl_newlink() function.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: bb8082f69138 ("ppp: build ifname using unit identifier for rtnl based devices")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 046579c9fc281f51ef36cf660dc2fc43a1c4d6ca
Author: Ben Hutchings <ben.hutchings@mind.be>
Date:   Sat Aug 7 02:06:18 2021 +0200

    net: phy: micrel: Fix link detection on ksz87xx switch"
    
    [ Upstream commit 2383cb9497d113360137a2be308b390faa80632d ]
    
    Commit a5e63c7d38d5 "net: phy: micrel: Fix detection of ksz87xx
    switch" broke link detection on the external ports of the KSZ8795.
    
    The previously unused phy_driver structure for these devices specifies
    config_aneg and read_status functions that appear to be designed for a
    fixed link and do not work with the embedded PHYs in the KSZ8795.
    
    Delete the use of these functions in favour of the generic PHY
    implementations which were used previously.
    
    Fixes: a5e63c7d38d5 ("net: phy: micrel: Fix detection of ksz87xx switch")
    Signed-off-by: Ben Hutchings <ben.hutchings@mind.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e95620c3bdff83bdb15484e6ea7cc47af36fbc6d
Author: Tatsuhiko Yasumatsu <th.yasumatsu@gmail.com>
Date:   Sat Aug 7 00:04:18 2021 +0900

    bpf: Fix integer overflow involving bucket_size
    
    [ Upstream commit c4eb1f403243fc7bbb7de644db8587c03de36da6 ]
    
    In __htab_map_lookup_and_delete_batch(), hash buckets are iterated
    over to count the number of elements in each bucket (bucket_size).
    If bucket_size is large enough, the multiplication to calculate
    kvmalloc() size could overflow, resulting in out-of-bounds write
    as reported by KASAN:
    
      [...]
      [  104.986052] BUG: KASAN: vmalloc-out-of-bounds in __htab_map_lookup_and_delete_batch+0x5ce/0xb60
      [  104.986489] Write of size 4194224 at addr ffffc9010503be70 by task crash/112
      [  104.986889]
      [  104.987193] CPU: 0 PID: 112 Comm: crash Not tainted 5.14.0-rc4 #13
      [  104.987552] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
      [  104.988104] Call Trace:
      [  104.988410]  dump_stack_lvl+0x34/0x44
      [  104.988706]  print_address_description.constprop.0+0x21/0x140
      [  104.988991]  ? __htab_map_lookup_and_delete_batch+0x5ce/0xb60
      [  104.989327]  ? __htab_map_lookup_and_delete_batch+0x5ce/0xb60
      [  104.989622]  kasan_report.cold+0x7f/0x11b
      [  104.989881]  ? __htab_map_lookup_and_delete_batch+0x5ce/0xb60
      [  104.990239]  kasan_check_range+0x17c/0x1e0
      [  104.990467]  memcpy+0x39/0x60
      [  104.990670]  __htab_map_lookup_and_delete_batch+0x5ce/0xb60
      [  104.990982]  ? __wake_up_common+0x4d/0x230
      [  104.991256]  ? htab_of_map_free+0x130/0x130
      [  104.991541]  bpf_map_do_batch+0x1fb/0x220
      [...]
    
    In hashtable, if the elements' keys have the same jhash() value, the
    elements will be put into the same bucket. By putting a lot of elements
    into a single bucket, the value of bucket_size can be increased to
    trigger the integer overflow.
    
    Triggering the overflow is possible for both callers with CAP_SYS_ADMIN
    and callers without CAP_SYS_ADMIN.
    
    It will be trivial for a caller with CAP_SYS_ADMIN to intentionally
    reach this overflow by enabling BPF_F_ZERO_SEED. As this flag will set
    the random seed passed to jhash() to 0, it will be easy for the caller
    to prepare keys which will be hashed into the same value, and thus put
    all the elements into the same bucket.
    
    If the caller does not have CAP_SYS_ADMIN, BPF_F_ZERO_SEED cannot be
    used. However, it will be still technically possible to trigger the
    overflow, by guessing the random seed value passed to jhash() (32bit)
    and repeating the attempt to trigger the overflow. In this case,
    the probability to trigger the overflow will be low and will take
    a very long time.
    
    Fix the integer overflow by calling kvmalloc_array() instead of
    kvmalloc() to allocate memory.
    
    Fixes: 057996380a42 ("bpf: Add batch ops to all htab bpf map")
    Signed-off-by: Tatsuhiko Yasumatsu <th.yasumatsu@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20210806150419.109658-1-th.yasumatsu@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1960c3ac5268d8b3411989543f21acbc92faa906
Author: Robin Gögge <r.goegge@googlemail.com>
Date:   Thu Jul 29 00:58:25 2021 +0200

    libbpf: Fix probe for BPF_PROG_TYPE_CGROUP_SOCKOPT
    
    [ Upstream commit 78d14bda861dd2729f15bb438fe355b48514bfe0 ]
    
    This patch fixes the probe for BPF_PROG_TYPE_CGROUP_SOCKOPT,
    so the probe reports accurate results when used by e.g.
    bpftool.
    
    Fixes: 4cdbfb59c44a ("libbpf: support sockopt hooks")
    Signed-off-by: Robin Gögge <r.goegge@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Quentin Monnet <quentin@isovalent.com>
    Link: https://lore.kernel.org/bpf/20210728225825.2357586-1-r.goegge@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3e9a3e228446af156389e1af8936b4e2cb675b7
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Aug 6 13:55:15 2021 +0200

    platform/x86: pcengines-apuv2: Add missing terminating entries to gpio-lookup tables
    
    [ Upstream commit 9d7b132e62e41b7d49bf157aeaf9147c27492e0f ]
    
    The gpiod_lookup_table.table passed to gpiod_add_lookup_table() must
    be terminated with an empty entry, add this.
    
    Note we have likely been getting away with this not being present because
    the GPIO lookup code first matches on the dev_id, causing most lookups to
    skip checking the table and the lookups which do check the table will
    find a matching entry before reaching the end. With that said, terminating
    these tables properly still is obviously the correct thing to do.
    
    Fixes: f8eb0235f659 ("x86: pcengines apuv2 gpio/leds/keys platform driver")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210806115515.12184-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53ebbfdd0e370073fa5fc2dfb6f14d15a775c351
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Thu Aug 5 23:53:30 2021 -0700

    net: mvvp2: fix short frame size on s390
    
    [ Upstream commit 704e624f7b3e8a4fc1ce43fb564746d1d07b20c0 ]
    
    On s390, the following build warning occurs:
    
    drivers/net/ethernet/marvell/mvpp2/mvpp2.h:844:2: warning: overflow in
    conversion from 'long unsigned int' to 'int' changes value from
    '18446744073709551584' to '-32' [-Woverflow]
    844 |  ((total_size) - MVPP2_SKB_HEADROOM - MVPP2_SKB_SHINFO_SIZE)
    
    This happens because MVPP2_SKB_SHINFO_SIZE, which is 320 bytes (which is
    already 64-byte aligned) on some architectures, actually gets ALIGN'd up
    to 512 bytes in the s390 case.
    
    So then, when this is invoked:
    
        MVPP2_RX_MAX_PKT_SIZE(MVPP2_BM_SHORT_FRAME_SIZE)
    
    ...that turns into:
    
         704 - 224 - 512 == -32
    
    ...which is not a good frame size to end up with! The warning above is a
    bit lucky: it notices a signed/unsigned bad behavior here, which leads
    to the real problem of a frame that is too short for its contents.
    
    Increase MVPP2_BM_SHORT_FRAME_SIZE by 32 (from 704 to 736), which is
    just exactly big enough. (The other values can't readily be changed
    without causing a lot of other problems.)
    
    Fixes: 07dd0a7aae7f ("mvpp2: add basic XDP support")
    Cc: Sven Auhagen <sven.auhagen@voleatech.de>
    Cc: Matteo Croce <mcroce@microsoft.com>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 784320edb6c54cc888f993b3017aef7a24cf414d
Author: DENG Qingfang <dqfext@gmail.com>
Date:   Fri Aug 6 12:05:27 2021 +0800

    net: dsa: mt7530: add the missing RxUnicast MIB counter
    
    [ Upstream commit aff51c5da3208bd164381e1488998667269c6cf4 ]
    
    Add the missing RxUnicast counter.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Signed-off-by: DENG Qingfang <dqfext@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20a80319028c68e5fd29b89379950f3d69846aeb
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Thu Aug 5 17:11:05 2021 +0100

    ASoC: cs42l42: Fix LRCLK frame start edge
    
    [ Upstream commit 0c2f2ad4f16a58879463d0979a54293f8f296d6f ]
    
    An I2S frame starts on the falling edge of LRCLK so ASP_STP must
    be 0.
    
    At the same time, move other format settings in the same register
    from cs42l42_pll_config() to cs42l42_set_dai_fmt() where you'd
    expect to find them, and merge into a single write.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Fixes: 2c394ca79604 ("ASoC: Add support for CS42L42 codec")
    Link: https://lore.kernel.org/r/20210805161111.10410-2-rf@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 750503aecf4ef243c51597441f8364e0aa4708a6
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Aug 4 14:21:41 2021 +0300

    pinctrl: tigerlake: Fix GPIO mapping for newer version of software
    
    [ Upstream commit 2f658f7a3953f6d70bab90e117aff8d0ad44e200 ]
    
    The software mapping for GPIO, which initially comes from Microsoft,
    is subject to change by respective Windows and firmware developers.
    Due to the above the driver had been written and published way ahead
    of the schedule, and thus the numbering schema used in it is outdated.
    
    Fix the numbering schema in accordance with the real products on market.
    
    Fixes: 653d96455e1e ("pinctrl: tigerlake: Add support for Tiger Lake-H")
    Reported-and-tested-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reported-by: Riccardo Mori <patacca@autistici.org>
    Reported-and-tested-by: Lovesh <lovesh.bond@gmail.com>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=213463
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=213579
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=213857
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be49d5437d1a7ed2ce98d12b9f787091b455475b
Author: Yajun Deng <yajun.deng@linux.dev>
Date:   Thu Jul 29 16:20:21 2021 +0800

    netfilter: nf_conntrack_bridge: Fix memory leak when error
    
    [ Upstream commit 38ea9def5b62f9193f6bad96c5d108e2830ecbde ]
    
    It should be added kfree_skb_list() when err is not equal to zero
    in nf_br_ip_fragment().
    
    v2: keep this aligned with IPv6.
    v3: modify iter.frag_list to iter.frag.
    
    Fixes: 3c171f496ef5 ("netfilter: bridge: add connection tracking system")
    Signed-off-by: Yajun Deng <yajun.deng@linux.dev>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa6b17bfefbcfe3f34fb5a678b72f2cf73597c02
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Tue Aug 3 17:08:34 2021 +0100

    ASoC: cs42l42: Remove duplicate control for WNF filter frequency
    
    [ Upstream commit 8b353bbeae20e2214c9d9d88bcb2fda4ba145d83 ]
    
    The driver was defining two ALSA controls that both change the same
    register field for the wind noise filter corner frequency. The filter
    response has two corners, at different frequencies, and the duplicate
    controls most likely were an attempt to be able to set the value using
    either of the frequencies.
    
    However, having two controls changing the same field can be problematic
    and it is unnecessary. Both frequencies are related to each other so
    setting one implies exactly what the other would be.
    
    Removing a control affects user-side code, but there is currently no
    known use of the removed control so it would be best to remove it now
    before it becomes a problem.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Fixes: 2c394ca79604 ("ASoC: Add support for CS42L42 codec")
    Link: https://lore.kernel.org/r/20210803160834.9005-2-rf@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b268f9f6b73f4a9842e17498a0f1c26a48bede12
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Tue Aug 3 17:08:33 2021 +0100

    ASoC: cs42l42: Fix inversion of ADC Notch Switch control
    
    [ Upstream commit 30615bd21b4cc3c3bb5ae8bd70e2a915cc5f75c7 ]
    
    The underlying register field has inverted sense (0 = enabled) so
    the control definition must be marked as inverted.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Fixes: 2c394ca79604 ("ASoC: Add support for CS42L42 codec")
    Link: https://lore.kernel.org/r/20210803160834.9005-1-rf@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2386a8cde18e1c25bc77db0ba465cd5d6c5b7ddb
Author: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
Date:   Mon Aug 2 10:17:49 2021 -0500

    ASoC: SOF: Intel: hda-ipc: fix reply size checking
    
    [ Upstream commit 973b393fdf073a4ebd8d82ef6edea99fedc74af9 ]
    
    Checking that two values don't have common bits makes no sense,
    strict equality is meant.
    
    Fixes: f3b433e4699f  ("ASoC: SOF: Implement Probe IPC API")
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Signed-off-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210802151749.15417-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e47f99e868001181fbb0336286f85c870af1fe0
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Thu Jul 29 18:09:28 2021 +0100

    ASoC: cs42l42: Don't allow SND_SOC_DAIFMT_LEFT_J
    
    [ Upstream commit 64324bac750b84ca54711fb7d332132fcdb87293 ]
    
    The driver has no support for left-justified protocol so it should
    not have been allowing this to be passed to cs42l42_set_dai_fmt().
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Fixes: 2c394ca79604 ("ASoC: Add support for CS42L42 codec")
    Link: https://lore.kernel.org/r/20210729170929.6589-2-rf@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 576939671f742f43bcb61ebcab81463c1c0d0b47
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Thu Jul 29 18:09:27 2021 +0100

    ASoC: cs42l42: Correct definition of ADC Volume control
    
    [ Upstream commit ee86f680ff4c9b406d49d4e22ddf10805b8a2137 ]
    
    The ADC volume is a signed 8-bit number with range -97 to +12,
    with -97 being mute. Use a SOC_SINGLE_S8_TLV() to define this
    and fix the DECLARE_TLV_DB_SCALE() to have the correct start and
    mute flag.
    
    Fixes: 2c394ca79604 ("ASoC: Add support for CS42L42 codec")
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20210729170929.6589-1-rf@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a21963c35f167b7325faddd277800ced8c5b715e
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Thu Jul 1 16:09:55 2021 +0800

    pinctrl: mediatek: Fix fallback behavior for bias_set_combo
    
    [ Upstream commit 798a315fc359aa6dbe48e09d802aa59b7e158ffc ]
    
    Some pin doesn't support PUPD register, if it fails and fallbacks with
    bias_set_combo case, it will call mtk_pinconf_bias_set_pupd_r1_r0() to
    modify the PUPD pin again.
    
    Since the general bias set are either PU/PD or PULLSEL/PULLEN, try
    bias_set or bias_set_rev1 for the other fallback case. If the pin
    doesn't support neither PU/PD nor PULLSEL/PULLEN, it will return
    -ENOTSUPP.
    
    Fixes: 81bd1579b43e ("pinctrl: mediatek: Fix fallback call path")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: Zhiyong Tao <zhiyong.tao@mediatek.com>
    Link: https://lore.kernel.org/r/20210701080955.2660294-1-hsinyi@chromium.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27188a938291e41c0d1442ea5f065cc06c0bdc23
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Wed Jul 7 23:56:32 2021 +0800

    ieee802154: hwsim: fix GPF in hwsim_new_edge_nl
    
    [ Upstream commit 889d0e7dc68314a273627d89cbb60c09e1cc1c25 ]
    
    Both MAC802154_HWSIM_ATTR_RADIO_ID and MAC802154_HWSIM_ATTR_RADIO_EDGE
    must be present to fix GPF.
    
    Fixes: f25da51fdc38 ("ieee802154: hwsim: add replacement for fakelb")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20210707155633.1486603-1-mudongliangabcd@gmail.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 528f17c02db93fe7bde62602e3d8b194f8481ce8
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Mon Jul 5 21:13:20 2021 +0800

    ieee802154: hwsim: fix GPF in hwsim_set_edge_lqi
    
    [ Upstream commit e9faf53c5a5d01f6f2a09ae28ec63a3bbd6f64fd ]
    
    Both MAC802154_HWSIM_ATTR_RADIO_ID and MAC802154_HWSIM_ATTR_RADIO_EDGE,
    MAC802154_HWSIM_EDGE_ATTR_ENDPOINT_ID and MAC802154_HWSIM_EDGE_ATTR_LQI
    must be present to fix GPF.
    
    Fixes: f25da51fdc38 ("ieee802154: hwsim: add replacement for fakelb")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20210705131321.217111-1-mudongliangabcd@gmail.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95de3592f87e46df63119dd52b4a0e544e519c6b
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Aug 2 10:03:30 2021 -0400

    drm/amdgpu: don't enable baco on boco platforms in runpm
    
    commit 202ead5a3c589b0594a75cb99f080174f6851fed upstream.
    
    If the platform uses BOCO, don't use BACO in runtime suspend.
    We could end up executing the BACO path if the platform supports
    both.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/1669
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd80d11a516c78fb74d11e69c67082f36f8ef8e3
Author: Anson Jacob <Anson.Jacob@amd.com>
Date:   Fri Jul 30 19:46:20 2021 -0400

    drm/amd/display: use GFP_ATOMIC in amdgpu_dm_irq_schedule_work
    
    commit 0cde63a8fc4d9f9f580c297211fd05f91c0fd66d upstream.
    
    Replace GFP_KERNEL with GFP_ATOMIC as amdgpu_dm_irq_schedule_work
    can't sleep.
    
    BUG: sleeping function called from invalid context at include/linux/sched/mm.h:196
    in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 253, name: kworker/6:1H
    CPU: 6 PID: 253 Comm: kworker/6:1H Tainted: G        W  OE     5.11.0-promotion_2021_06_07-18_36_28_prelim_revert_retrain #8
    Hardware name: System manufacturer System Product Name/PRIME X570-PRO, BIOS 3405 02/01/2021
    Workqueue: events_highpri dm_irq_work_func [amdgpu]
    Call Trace:
     <IRQ>
     dump_stack+0x5e/0x74
     ___might_sleep.cold+0x87/0x98
     __might_sleep+0x4b/0x80
     kmem_cache_alloc_trace+0x390/0x4f0
     amdgpu_dm_irq_handler+0x171/0x230 [amdgpu]
     amdgpu_irq_dispatch+0xc0/0x1e0 [amdgpu]
     amdgpu_ih_process+0x81/0x100 [amdgpu]
     amdgpu_irq_handler+0x26/0xa0 [amdgpu]
     __handle_irq_event_percpu+0x49/0x190
     ? __hrtimer_get_next_event+0x4d/0x80
     handle_irq_event_percpu+0x33/0x80
     handle_irq_event+0x33/0x60
     handle_edge_irq+0x82/0x190
     asm_call_irq_on_stack+0x12/0x20
     </IRQ>
     common_interrupt+0xbb/0x140
     asm_common_interrupt+0x1e/0x40
    RIP: 0010:amdgpu_device_rreg.part.0+0x44/0xf0 [amdgpu]
    Code: 53 48 89 fb 4c 3b af c8 08 00 00 73 6d 83 e2 02 75 0d f6 87 40 62 01 00 10 0f 85 83 00 00 00 4c 03 ab d0 08 00 00 45 8b 6d 00 <8b> 05 3e b6 52 00 85 c0 7e 62 48 8b 43 08 0f b7 70 3e 65 8b 05 e3
    RSP: 0018:ffffae7740fff9e8 EFLAGS: 00000286
    RAX: ffffffffc05ee610 RBX: ffff8aaf8f620000 RCX: 0000000000000006
    RDX: 0000000000000000 RSI: 0000000000005430 RDI: ffff8aaf8f620000
    RBP: ffffae7740fffa08 R08: 0000000000000001 R09: 000000000000000a
    R10: 0000000000000001 R11: 0000000000000001 R12: 0000000000005430
    R13: 0000000071000000 R14: 0000000000000001 R15: 0000000000005430
     ? amdgpu_cgs_write_register+0x20/0x20 [amdgpu]
     amdgpu_device_rreg+0x17/0x20 [amdgpu]
     amdgpu_cgs_read_register+0x14/0x20 [amdgpu]
     dm_read_reg_func+0x38/0xb0 [amdgpu]
     generic_reg_wait+0x80/0x160 [amdgpu]
     dce_aux_transfer_raw+0x324/0x7c0 [amdgpu]
     dc_link_aux_transfer_raw+0x43/0x50 [amdgpu]
     dm_dp_aux_transfer+0x87/0x110 [amdgpu]
     drm_dp_dpcd_access+0x72/0x110 [drm_kms_helper]
     drm_dp_dpcd_read+0xb7/0xf0 [drm_kms_helper]
     drm_dp_get_one_sb_msg+0x349/0x480 [drm_kms_helper]
     drm_dp_mst_hpd_irq+0xc5/0xe40 [drm_kms_helper]
     ? drm_dp_mst_hpd_irq+0xc5/0xe40 [drm_kms_helper]
     dm_handle_hpd_rx_irq+0x184/0x1a0 [amdgpu]
     ? dm_handle_hpd_rx_irq+0x184/0x1a0 [amdgpu]
     handle_hpd_rx_irq+0x195/0x240 [amdgpu]
     ? __switch_to_asm+0x42/0x70
     ? __switch_to+0x131/0x450
     dm_irq_work_func+0x19/0x20 [amdgpu]
     process_one_work+0x209/0x400
     worker_thread+0x4d/0x3e0
     ? cancel_delayed_work+0xa0/0xa0
     kthread+0x124/0x160
     ? kthread_park+0x90/0x90
     ret_from_fork+0x22/0x30
    
    Reviewed-by: Aurabindo Jayamohanan Pillai <Aurabindo.Pillai@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Signed-off-by: Anson Jacob <Anson.Jacob@amd.com>
    Cc: stable@vger.kernel.org
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae311a7418f13be375c29ec4178baa51cd9101ba
Author: Eric Bernstein <eric.bernstein@amd.com>
Date:   Mon Jul 26 15:53:18 2021 -0400

    drm/amd/display: Remove invalid assert for ODM + MPC case
    
    commit c90f6263f58a28c3d97b83679d6fd693b33dfd4e upstream.
    
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Signed-off-by: Eric Bernstein <eric.bernstein@amd.com>
    Cc: stable@vger.kernel.org
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2351e5faa3e1e9406aaf0c24b9cfc7e1d636021
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Jul 30 09:46:04 2021 -0700

    libnvdimm/region: Fix label activation vs errors
    
    commit d9cee9f85b22fab88d2b76d2e92b18e3d0e6aa8c upstream.
    
    There are a few scenarios where init_active_labels() can return without
    registering deactivate_labels() to run when the region is disabled. In
    particular label error injection creates scenarios where a DIMM is
    disabled, but labels on other DIMMs in the region become activated.
    
    Arrange for init_active_labels() to always register deactivate_labels().
    
    Reported-by: Krzysztof Kensicki <krzysztof.kensicki@intel.com>
    Cc: <stable@vger.kernel.org>
    Fixes: bf9bccc14c05 ("libnvdimm: pmem label sets and namespace instantiation.")
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Link: https://lore.kernel.org/r/162766356450.3223041.1183118139023841447.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 366de90ccfa2765ea1f79e6baf0b5bb71f4acb78
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Aug 11 11:53:37 2021 -0700

    ACPI: NFIT: Fix support for virtual SPA ranges
    
    commit b93dfa6bda4d4e88e5386490f2b277a26958f9d3 upstream.
    
    Fix the NFIT parsing code to treat a 0 index in a SPA Range Structure as
    a special case and not match Region Mapping Structures that use 0 to
    indicate that they are not mapped. Without this fix some platform BIOS
    descriptions of "virtual disk" ranges do not result in the pmem driver
    attaching to the range.
    
    Details:
    In addition to typical persistent memory ranges, the ACPI NFIT may also
    convey "virtual" ranges. These ranges are indicated by a UUID in the SPA
    Range Structure of UUID_VOLATILE_VIRTUAL_DISK, UUID_VOLATILE_VIRTUAL_CD,
    UUID_PERSISTENT_VIRTUAL_DISK, or UUID_PERSISTENT_VIRTUAL_CD. The
    critical difference between virtual ranges and UUID_PERSISTENT_MEMORY,
    is that virtual do not support associations with Region Mapping
    Structures.  For this reason the "index" value of virtual SPA Range
    Structures is allowed to be 0. If a platform BIOS decides to represent
    NVDIMMs with disconnected "Region Mapping Structures" (range-index ==
    0), the kernel may falsely associate them with standalone ranges where
    the "SPA Range Structure Index" is also zero. When this happens the
    driver may falsely require labels where "virtual disks" are expected to
    be label-less. I.e. "label-less" is where the namespace-range ==
    region-range and the pmem driver attaches with no user action to create
    a namespace.
    
    Cc: Jacek Zloch <jacek.zloch@intel.com>
    Cc: Lukasz Sobieraj <lukasz.sobieraj@intel.com>
    Cc: "Lee, Chun-Yi" <jlee@suse.com>
    Cc: <stable@vger.kernel.org>
    Fixes: c2f32acdf848 ("acpi, nfit: treat virtual ramdisk SPA as pmem region")
    Reported-by: Krzysztof Rusocki <krzysztof.rusocki@intel.com>
    Reported-by: Damian Bassa <damian.bassa@intel.com>
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Link: https://lore.kernel.org/r/162870796589.2521182.1240403310175570220.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3fcf9d1b759915dcc1a93bceada910287c54e76
Author: Luis Henriques <lhenriques@suse.de>
Date:   Tue Jul 6 14:52:41 2021 +0100

    ceph: reduce contention in ceph_check_delayed_caps()
    
    commit bf2ba432213fade50dd39f2e348085b758c0726e upstream.
    
    Function ceph_check_delayed_caps() is called from the mdsc->delayed_work
    workqueue and it can be kept looping for quite some time if caps keep
    being added back to the mdsc->cap_delay_list.  This may result in the
    watchdog tainting the kernel with the softlockup flag.
    
    This patch breaks this loop if the caps have been recently (i.e. during
    the loop execution).  Any new caps added to the list will be handled in
    the next run.
    
    Also, allow schedule_delayed() callers to explicitly set the delay value
    instead of defaulting to 5s, so we can ensure that it runs soon
    afterward if it looks like there is more work.
    
    Cc: stable@vger.kernel.org
    URL: https://tracker.ceph.com/issues/46284
    Signed-off-by: Luis Henriques <lhenriques@suse.de>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca6dea44bd8cf953a11866fd63d1a5fd9eec81a9
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Jul 8 17:13:48 2021 -0700

    ARC: fp: set FPU_STATUS.FWE to enable FPU_STATUS update on context switch
    
    commit 3a715e80400f452b247caa55344f4f60250ffbcf upstream.
    
    FPU_STATUS register contains FP exception flags bits which are updated
    by core as side-effect of FP instructions but can also be manually
    wiggled such as by glibc C99 functions fe{raise,clear,test}except() etc.
    To effect the update, the programming model requires OR'ing FWE
    bit (31). This bit is write-only and RAZ, meaning it is effectively
    auto-cleared after write and thus needs to be set everytime: which
    is how glibc implements this.
    
    However there's another usecase of FPU_STATUS update, at the time of
    Linux task switch when incoming task value needs to be programmed into
    the register. This was added as part of f45ba2bd6da0dc ("ARCv2:
    fpu: preserve userspace fpu state") which missed OR'ing FWE bit,
    meaning the new value is effectively not being written at all.
    This patch remedies that.
    
    Interestingly, this snafu was not caught in interm glibc testing as the
    race window which relies on a specific exception bit to be set/clear is
    really small specially when it nvolves context switch.
    Fortunately this was caught by glibc's math/test-fenv-tls test which
    repeatedly set/clear exception flags in a big loop, concurrently in main
    program and also in a thread.
    
    Fixes: https://github.com/foss-for-synopsys-dwc-arc-processors/linux/issues/54
    Fixes: f45ba2bd6da0dc ("ARCv2: fpu: preserve userspace fpu state")
    Cc: stable@vger.kernel.org      #5.6+
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4716a2145bbf14bd0eaba81a521fda1ce3de5b9a
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Aug 5 17:55:11 2021 +0300

    net: ethernet: ti: cpsw: fix min eth packet size for non-switch use-cases
    
    commit acc68b8d2a1196c4db806947606f162dbeed2274 upstream.
    
    The CPSW switchdev driver inherited fix from commit 9421c9015047 ("net:
    ethernet: ti: cpsw: fix min eth packet size") which changes min TX packet
    size to 64bytes (VLAN_ETH_ZLEN, excluding ETH_FCS). It was done to fix HW
    packed drop issue when packets are sent from Host to the port with PVID and
    un-tagging enabled. Unfortunately this breaks some other non-switch
    specific use-cases, like:
    - [1] CPSW port as DSA CPU port with DSA-tag applied at the end of the
    packet
    - [2] Some industrial protocols, which expects min TX packet size 60Bytes
    (excluding FCS).
    
    Fix it by configuring min TX packet size depending on driver mode
     - 60Bytes (ETH_ZLEN) for multi mac (dual-mac) mode
     - 64Bytes (VLAN_ETH_ZLEN) for switch mode
    and update it during driver mode change and annotate with
    READ_ONCE()/WRITE_ONCE() as it can be read by napi while writing.
    
    [1] https://lore.kernel.org/netdev/20210531124051.GA15218@cephalopod/
    [2] https://e2e.ti.com/support/arm/sitara_arm/f/791/t/701669
    
    Cc: stable@vger.kernel.org
    Fixes: ed3525eda4c4 ("net: ethernet: ti: introduce cpsw switchdev based driver part 1 - dual-emac")
    Reported-by: Ben Hutchings <ben.hutchings@essensium.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 561d13128bb825f4e628d03c4f64a2cddb958ac8
Author: Hsuan-Chi Kuo <hsuanchikuo@gmail.com>
Date:   Thu Mar 4 17:37:08 2021 -0600

    seccomp: Fix setting loaded filter count during TSYNC
    
    commit b4d8a58f8dcfcc890f296696cadb76e77be44b5f upstream.
    
    The desired behavior is to set the caller's filter count to thread's.
    This value is reported via /proc, so this fixes the inaccurate count
    exposed to userspace; it is not used for reference counting, etc.
    
    Signed-off-by: Hsuan-Chi Kuo <hsuanchikuo@gmail.com>
    Link: https://lore.kernel.org/r/20210304233708.420597-1-hsuanchikuo@gmail.com
    Co-developed-by: Wiktor Garbacz <wiktorg@google.com>
    Signed-off-by: Wiktor Garbacz <wiktorg@google.com>
    Link: https://lore.kernel.org/lkml/20210810125158.329849-1-wiktorg@google.com
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: stable@vger.kernel.org
    Fixes: c818c03b661c ("seccomp: Report number of loaded filters in /proc/$pid/status")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54916988a0fbddc6401120cc3b12dc3400c08983
Author: Ewan D. Milne <emilne@redhat.com>
Date:   Mon Aug 9 11:09:47 2021 -0400

    scsi: lpfc: Move initialization of phba->poll_list earlier to avoid crash
    
    commit 9977d880f7a3c233db9165a75a3a14defc2a4aee upstream.
    
    The phba->poll_list is traversed in case of an error in
    lpfc_sli4_hba_setup(), so it must be initialized earlier in case the error
    path is taken.
    
    [  490.030738] lpfc 0000:65:00.0: 0:1413 Failed to init iocb list.
    [  490.036661] BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
    [  490.044485] PGD 0 P4D 0
    [  490.047027] Oops: 0000 [#1] SMP PTI
    [  490.050518] CPU: 0 PID: 7 Comm: kworker/0:1 Kdump: loaded Tainted: G          I      --------- -  - 4.18.
    [  490.060511] Hardware name: Dell Inc. PowerEdge R440/0WKGTH, BIOS 1.4.8 05/22/2018
    [  490.067994] Workqueue: events work_for_cpu_fn
    [  490.072371] RIP: 0010:lpfc_sli4_cleanup_poll_list+0x20/0xb0 [lpfc]
    [  490.078546] Code: cf e9 04 f7 fe ff 0f 1f 40 00 0f 1f 44 00 00 41 57 49 89 ff 41 56 41 55 41 54 4d 8d a79
    [  490.097291] RSP: 0018:ffffbd1a463dbcc8 EFLAGS: 00010246
    [  490.102518] RAX: 0000000000008200 RBX: ffff945cdb8c0000 RCX: 0000000000000000
    [  490.109649] RDX: 0000000000018200 RSI: ffff9468d0e16818 RDI: 0000000000000000
    [  490.116783] RBP: ffff945cdb8c1740 R08: 00000000000015c5 R09: 0000000000000042
    [  490.123915] R10: 0000000000000000 R11: ffffbd1a463dbab0 R12: ffff945cdb8c25c0
    [  490.131049] R13: 00000000fffffff4 R14: 0000000000001800 R15: ffff945cdb8c0000
    [  490.138182] FS:  0000000000000000(0000) GS:ffff9468d0e00000(0000) knlGS:0000000000000000
    [  490.146267] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  490.152013] CR2: 0000000000000000 CR3: 000000042ca10002 CR4: 00000000007706f0
    [  490.159146] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  490.166277] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  490.173409] PKRU: 55555554
    [  490.176123] Call Trace:
    [  490.178598]  lpfc_sli4_queue_destroy+0x7f/0x3c0 [lpfc]
    [  490.183745]  lpfc_sli4_hba_setup+0x1bc7/0x23e0 [lpfc]
    [  490.188797]  ? kernfs_activate+0x63/0x80
    [  490.192721]  ? kernfs_add_one+0xe7/0x130
    [  490.196647]  ? __kernfs_create_file+0x80/0xb0
    [  490.201020]  ? lpfc_pci_probe_one_s4.isra.48+0x46f/0x9e0 [lpfc]
    [  490.206944]  lpfc_pci_probe_one_s4.isra.48+0x46f/0x9e0 [lpfc]
    [  490.212697]  lpfc_pci_probe_one+0x179/0xb70 [lpfc]
    [  490.217492]  local_pci_probe+0x41/0x90
    [  490.221246]  work_for_cpu_fn+0x16/0x20
    [  490.224994]  process_one_work+0x1a7/0x360
    [  490.229009]  ? create_worker+0x1a0/0x1a0
    [  490.232933]  worker_thread+0x1cf/0x390
    [  490.236687]  ? create_worker+0x1a0/0x1a0
    [  490.240612]  kthread+0x116/0x130
    [  490.243846]  ? kthread_flush_work_fn+0x10/0x10
    [  490.248293]  ret_from_fork+0x35/0x40
    [  490.251869] Modules linked in: lpfc(+) xt_CHECKSUM ipt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4i
    [  490.332609] CR2: 0000000000000000
    
    Link: https://lore.kernel.org/r/20210809150947.18104-1-emilne@redhat.com
    Fixes: 93a4d6f40198 ("scsi: lpfc: Add registration for CPU Offline/Online events")
    Cc: stable@vger.kernel.org
    Reviewed-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3db5cb922800c83c966a1763fb1a443327dafe06
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Wed Aug 4 18:37:22 2021 +0000

    cifs: create sd context must be a multiple of 8
    
    commit 7d3fc01796fc895e5fcce45c994c5a8db8120a8d upstream.
    
    We used to follow the rule earlier that the create SD context
    always be a multiple of 8. However, with the change:
    cifs: refactor create_sd_buf() and and avoid corrupting the buffer
    ...we recompute the length, and we failed that rule.
    Fixing that with this change.
    
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1398e3715b15c7dc766d91daf2bdd534d374cd8
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 29 16:35:32 2021 +0200

    i2c: dev: zero out array used for i2c reads from userspace
    
    commit 86ff25ed6cd8240d18df58930bd8848b19fce308 upstream.
    
    If an i2c driver happens to not provide the full amount of data that a
    user asks for, it is possible that some uninitialized data could be sent
    to userspace.  While all in-kernel drivers look to be safe, just be sure
    by initializing the buffer to zero before it is passed to the i2c driver
    so that any future drivers will not have this issue.
    
    Also properly copy the amount of data recvieved to the userspace buffer,
    as pointed out by Dan Carpenter.
    
    Reported-by: Eric Dumazet <edumazet@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8bceace43dd8c0cd9239c09eb7fe526328d4b44
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jul 28 13:23:50 2021 +0200

    ASoC: intel: atom: Fix reference to PCM buffer address
    
    commit 2e6b836312a477d647a7920b56810a5a25f6c856 upstream.
    
    PCM buffers might be allocated dynamically when the buffer
    preallocation failed or a larger buffer is requested, and it's not
    guaranteed that substream->dma_buffer points to the actually used
    buffer.  The address should be retrieved from runtime->dma_addr,
    instead of substream->dma_buffer (and shouldn't use virt_to_phys).
    
    Also, remove the line overriding runtime->dma_area superfluously,
    which was already set up at the PCM buffer allocation.
    
    Cc: Cezary Rojewski <cezary.rojewski@intel.com>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20210728112353.6675-3-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 261613ef340b63cdd054a1320ce9682e5c6660c5
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Jul 23 19:02:00 2021 +0100

    ASoC: tlv320aic31xx: Fix jack detection after suspend
    
    commit 2c39ca6885a2ec03e5c9e7c12a4da2aa8926605a upstream.
    
    The tlv320aic31xx driver relies on regcache_sync() to restore the register
    contents after going to _BIAS_OFF, for example during system suspend. This
    does not work for the jack detection configuration since that is configured
    via the same register that status is read back from so the register is
    volatile and not cached. This can also cause issues during init if the jack
    detection ends up getting set up before the CODEC is initially brought out
    of _BIAS_OFF, we will reset the CODEC and resync the cache as part of that
    process.
    
    Fix this by explicitly reapplying the jack detection configuration after
    resyncing the register cache during power on.
    
    This issue was found by an engineer working off-list on a product
    kernel, I just wrote up the upstream fix.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210723180200.25105-1-broonie@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e5a7fa68b27f33a3d2dd8f7fcb02e494ee6bc12
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jul 28 13:23:52 2021 +0200

    ASoC: uniphier: Fix reference to PCM buffer address
    
    commit 827f3164aaa579eee6fd50c6654861d54f282a11 upstream.
    
    Along with the transition to the managed PCM buffers, the driver now
    accepts the dynamically allocated buffer, while it still kept the
    reference to the old preallocated buffer address.  This patch corrects
    to the right reference via runtime->dma_addr.
    
    (Although this might have been already buggy before the cleanup with
    the managed buffer, let's put Fixes tag to point that; it's a corner
    case, after all.)
    
    Fixes: d55894bc2763 ("ASoC: uniphier: Use managed buffer allocation")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20210728112353.6675-5-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 209eb62b45fe72b03144445c12e3d814852fe78e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jul 28 13:23:51 2021 +0200

    ASoC: xilinx: Fix reference to PCM buffer address
    
    commit 42bc62c9f1d3d4880bdc27acb5ab4784209bb0b0 upstream.
    
    PCM buffers might be allocated dynamically when the buffer
    preallocation failed or a larger buffer is requested, and it's not
    guaranteed that substream->dma_buffer points to the actually used
    buffer.  The driver needs to refer to substream->runtime->dma_addr
    instead for the buffer address.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20210728112353.6675-4-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c419c4c91b30072651440d8c9c6f56a7cc38b619
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Jul 31 10:43:31 2021 +0200

    ASoC: amd: Fix reference to PCM buffer address
    
    commit 8b5d95313b6d30f642e4ed0125891984c446604e upstream.
    
    PCM buffers might be allocated dynamically when the buffer
    preallocation failed or a larger buffer is requested, and it's not
    guaranteed that substream->dma_buffer points to the actually used
    buffer.  The driver needs to refer to substream->runtime->dma_addr
    instead for the buffer address.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20210731084331.32225-1-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c9adae1170100cad584ac07a7660485822891a7
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Jul 30 08:16:51 2021 +0100

    iio: adc: Fix incorrect exit of for-loop
    
    commit 5afc1540f13804a31bb704b763308e17688369c5 upstream.
    
    Currently the for-loop that scans for the optimial adc_period iterates
    through all the possible adc_period levels because the exit logic in
    the loop is inverted. I believe the comparison should be swapped and
    the continue replaced with a break to exit the loop at the correct
    point.
    
    Addresses-Coverity: ("Continue has no effect")
    Fixes: e08e19c331fb ("iio:adc: add iio driver for Palmas (twl6035/7) gpadc")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210730071651.17394-1-colin.king@canonical.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 632279e5057ce39f43789e696dc9976d4a2e27a3
Author: Chris Lesiak <chris.lesiak@licor.com>
Date:   Mon Jun 14 09:18:20 2021 -0500

    iio: humidity: hdc100x: Add margin to the conversion time
    
    commit 84edec86f449adea9ee0b4912a79ab8d9d65abb7 upstream.
    
    The datasheets have the following note for the conversion time
    specification: "This parameter is specified by design and/or
    characterization and it is not tested in production."
    
    Parts have been seen that require more time to do 14-bit conversions for
    the relative humidity channel.  The result is ENXIO due to the address
    phase of a transfer not getting an ACK.
    
    Delay an additional 1 ms per conversion to allow for additional margin.
    
    Fixes: 4839367d99e3 ("iio: humidity: add HDC100x support")
    Signed-off-by: Chris Lesiak <chris.lesiak@licor.com>
    Acked-by: Matt Ranostay <matt.ranostay@konsulko.com>
    Link: https://lore.kernel.org/r/20210614141820.2034827-1-chris.lesiak@licor.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45de224b1332577f3e7aac60332a7000939c068a
Author: Antti Keränen <detegr@rbx.email>
Date:   Thu Jul 8 12:54:29 2021 +0300

    iio: adis: set GPIO reset pin direction
    
    commit 7e77ef8b8d600cf8448a2bbd32f682c28884551f upstream.
    
    Set reset pin direction to output as the reset pin needs to be an active
    low output pin.
    
    Co-developed-by: Hannu Hartikainen <hannu@hrtk.in>
    Signed-off-by: Hannu Hartikainen <hannu@hrtk.in>
    Signed-off-by: Antti Keränen <detegr@rbx.email>
    Reviewed-by: Nuno Sá <nuno.sa@analog.com>
    Fixes: ecb010d44108 ("iio: imu: adis: Refactor adis_initial_startup")
    Link: https://lore.kernel.org/r/20210708095425.13295-1-detegr@rbx.email
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0532ed064d117dc5310eae138f2e64b49cbab79
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Fri Jul 9 12:11:10 2021 +0200

    iio: adc: ti-ads7950: Ensure CS is deasserted after reading channels
    
    commit 9898cb24e454602beb6e17bacf9f97b26c85c955 upstream.
    
    The ADS7950 requires that CS is deasserted after each SPI word. Before
    commit e2540da86ef8 ("iio: adc: ti-ads7950: use SPI_CS_WORD to reduce
    CPU usage") the driver used a message with one spi transfer per channel
    where each but the last one had .cs_change set to enforce a CS toggle.
    This was wrongly translated into a message with a single transfer and
    .cs_change set which results in a CS toggle after each word but the
    last which corrupts the first adc conversion of all readouts after the
    first readout.
    
    Fixes: e2540da86ef8 ("iio: adc: ti-ads7950: use SPI_CS_WORD to reduce CPU usage")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: David Lechner <david@lechnology.com>
    Tested-by: David Lechner <david@lechnology.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210709101110.1814294-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
