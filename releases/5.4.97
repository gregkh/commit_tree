commit 5e1942063dc3633f7a127aa2b159c13507580d21
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 10 09:25:33 2021 +0100

    Linux 5.4.97
    
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Igor Matheus Andrade Torrente <igormtorrente@gmail.com>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Ross Schmidt <ross.schm.dev@gmail.com>
    Link: https://lore.kernel.org/r/20210208145810.230485165@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40af962eb1d4ce963cf8ada21924aa4179b23b9b
Author: Pali Rohár <pali@kernel.org>
Date:   Mon Feb 1 16:08:03 2021 +0100

    usb: host: xhci: mvebu: make USB 3.0 PHY optional for Armada 3720
    
    commit 3241929b67d28c83945d3191c6816a3271fd6b85 upstream.
    
    Older ATF does not provide SMC call for USB 3.0 phy power on functionality
    and therefore initialization of xhci-hcd is failing when older version of
    ATF is used. In this case phy_power_on() function returns -EOPNOTSUPP.
    
    [    3.108467] mvebu-a3700-comphy d0018300.phy: unsupported SMC call, try updating your firmware
    [    3.117250] phy phy-d0018300.phy.0: phy poweron failed --> -95
    [    3.123465] xhci-hcd: probe of d0058000.usb failed with error -95
    
    This patch introduces a new plat_setup callback for xhci platform drivers
    which is called prior calling usb_add_hcd() function. This function at its
    beginning skips PHY init if hcd->skip_phy_initialization is set.
    
    Current init_quirk callback for xhci platform drivers is called from
    xhci_plat_setup() function which is called after chip reset completes.
    It happens in the middle of the usb_add_hcd() function and therefore this
    callback cannot be used for setting if PHY init should be skipped or not.
    
    For Armada 3720 this patch introduce a new xhci_mvebu_a3700_plat_setup()
    function configured as a xhci platform plat_setup callback. This new
    function calls phy_power_on() and in case it returns -EOPNOTSUPP then
    XHCI_SKIP_PHY_INIT quirk is set to instruct xhci-plat to skip PHY
    initialization.
    
    This patch fixes above failure by ignoring 'not supported' error in
    xhci-hcd driver. In this case it is expected that phy is already power on.
    
    It fixes initialization of xhci-hcd on Espressobin boards where is older
    Marvell's Arm Trusted Firmware without SMC call for USB 3.0 phy power.
    
    This is regression introduced in commit bd3d25b07342 ("arm64: dts: marvell:
    armada-37xx: link USB hosts with their PHYs") where USB 3.0 phy was defined
    and therefore xhci-hcd on Espressobin with older ATF started failing.
    
    Fixes: bd3d25b07342 ("arm64: dts: marvell: armada-37xx: link USB hosts with their PHYs")
    Cc: <stable@vger.kernel.org> # 5.1+: ea17a0f153af: phy: marvell: comphy: Convert internal SMCC firmware return codes to errno
    Cc: <stable@vger.kernel.org> # 5.1+: f768e718911e: usb: host: xhci-plat: add priv quirk for skip PHY initialization
    Tested-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> # On R-Car
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> # xhci-plat
    Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Link: https://lore.kernel.org/r/20210201150803.7305-1-pali@kernel.org
    [pali: Backported to 5.4 by replacing of_phy_put() with phy_put()]
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76ab33055fbc6ac0b05e4b0c9dc6a56d76663482
Author: Alexander Ovechkin <ovov@yandex-team.ru>
Date:   Mon Feb 1 23:00:49 2021 +0300

    net: sched: replaced invalid qdisc tree flush helper in qdisc_replace
    
    commit 938e0fcd3253efdef8924714158911286d08cfe1 upstream.
    
    Commit e5f0e8f8e456 ("net: sched: introduce and use qdisc tree flush/purge helpers")
    introduced qdisc tree flush/purge helpers, but erroneously used flush helper
    instead of purge helper in qdisc_replace function.
    This issue was found in our CI, that tests various qdisc setups by configuring
    qdisc and sending data through it. Call of invalid helper sporadically leads
    to corruption of vt_tree/cf_tree of hfsc_class that causes kernel oops:
    
     Oops: 0000 [#1] SMP PTI
     CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.11.0-8f6859df #1
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.10.2-0-g5f4c7b1-prebuilt.qemu-project.org 04/01/2014
     RIP: 0010:rb_insert_color+0x18/0x190
     Code: c3 31 c0 c3 0f 1f 40 00 66 2e 0f 1f 84 00 00 00 00 00 48 8b 07 48 85 c0 0f 84 05 01 00 00 48 8b 10 f6 c2 01 0f 85 34 01 00 00 <48> 8b 4a 08 49 89 d0 48 39 c1 74 7d 48 85 c9 74 32 f6 01 01 75 2d
     RSP: 0018:ffffc900000b8bb0 EFLAGS: 00010246
     RAX: ffff8881ef4c38b0 RBX: ffff8881d956e400 RCX: ffff8881ef4c38b0
     RDX: 0000000000000000 RSI: ffff8881d956f0a8 RDI: ffff8881d956e4b0
     RBP: 0000000000000000 R08: 000000d5c4e249da R09: 1600000000000000
     R10: ffffc900000b8be0 R11: ffffc900000b8b28 R12: 0000000000000001
     R13: 000000000000005a R14: ffff8881f0905000 R15: ffff8881f0387d00
     FS:  0000000000000000(0000) GS:ffff8881f8b00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000008 CR3: 00000001f4796004 CR4: 0000000000060ee0
     Call Trace:
      <IRQ>
      init_vf.isra.19+0xec/0x250 [sch_hfsc]
      hfsc_enqueue+0x245/0x300 [sch_hfsc]
      ? fib_rules_lookup+0x12a/0x1d0
      ? __dev_queue_xmit+0x4b6/0x930
      ? hfsc_delete_class+0x250/0x250 [sch_hfsc]
      __dev_queue_xmit+0x4b6/0x930
      ? ip6_finish_output2+0x24d/0x590
      ip6_finish_output2+0x24d/0x590
      ? ip6_output+0x6c/0x130
      ip6_output+0x6c/0x130
      ? __ip6_finish_output+0x110/0x110
      mld_sendpack+0x224/0x230
      mld_ifc_timer_expire+0x186/0x2c0
      ? igmp6_group_dropped+0x200/0x200
      call_timer_fn+0x2d/0x150
      run_timer_softirq+0x20c/0x480
      ? tick_sched_do_timer+0x60/0x60
      ? tick_sched_timer+0x37/0x70
      __do_softirq+0xf7/0x2cb
      irq_exit+0xa0/0xb0
      smp_apic_timer_interrupt+0x74/0x150
      apic_timer_interrupt+0xf/0x20
      </IRQ>
    
    Fixes: e5f0e8f8e456 ("net: sched: introduce and use qdisc tree flush/purge helpers")
    Signed-off-by: Alexander Ovechkin <ovov@yandex-team.ru>
    Reported-by: Alexander Kuznetsov <wwfq@yandex-team.ru>
    Acked-by: Dmitry Monakhov <dmtrmonakhov@yandex-team.ru>
    Acked-by: Dmitry Yakunin <zeil@yandex-team.ru>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20210201200049.299153-1-ovov@yandex-team.ru
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e65d331755deb98a39267ff10f7746e4fd237cea
Author: DENG Qingfang <dqfext@gmail.com>
Date:   Sat Jan 30 21:43:34 2021 +0800

    net: dsa: mv88e6xxx: override existent unicast portvec in port_fdb_add
    
    commit f72f2fb8fb6be095b98af5d740ac50cffd0b0cae upstream.
    
    Having multiple destination ports for a unicast address does not make
    sense.
    Make port_db_load_purge override existent unicast portvec instead of
    adding a new port bit.
    
    Fixes: 884729399260 ("net: dsa: mv88e6xxx: handle multiple ports in ATU")
    Signed-off-by: DENG Qingfang <dqfext@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20210130134334.10243-1-dqfext@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d3007b6cc7b4c242f2965f08824f9c73947749c
Author: Vadim Fedorenko <vfedorenko@novek.ru>
Date:   Sat Jan 30 01:27:47 2021 +0300

    net: ip_tunnel: fix mtu calculation
    
    commit 28e104d00281ade30250b24e098bf50887671ea4 upstream.
    
    dev->hard_header_len for tunnel interface is set only when header_ops
    are set too and already contains full overhead of any tunnel encapsulation.
    That's why there is not need to use this overhead twice in mtu calc.
    
    Fixes: fdafed459998 ("ip_gre: set dev->hard_header_len and dev->needed_headroom properly")
    Reported-by: Slava Bacherikov <mail@slava.cc>
    Signed-off-by: Vadim Fedorenko <vfedorenko@novek.ru>
    Link: https://lore.kernel.org/r/1611959267-20536-1-git-send-email-vfedorenko@novek.ru
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90d7459d24b88b84595c6cf9b3f40186625aae86
Author: Chinmay Agarwal <chinagar@codeaurora.org>
Date:   Wed Jan 27 22:24:54 2021 +0530

    neighbour: Prevent a dead entry from updating gc_list
    
    commit eb4e8fac00d1e01ada5e57c05d24739156086677 upstream.
    
    Following race condition was detected:
    <CPU A, t0> - neigh_flush_dev() is under execution and calls
    neigh_mark_dead(n) marking the neighbour entry 'n' as dead.
    
    <CPU B, t1> - Executing: __netif_receive_skb() ->
    __netif_receive_skb_core() -> arp_rcv() -> arp_process().arp_process()
    calls __neigh_lookup() which takes a reference on neighbour entry 'n'.
    
    <CPU A, t2> - Moves further along neigh_flush_dev() and calls
    neigh_cleanup_and_release(n), but since reference count increased in t2,
    'n' couldn't be destroyed.
    
    <CPU B, t3> - Moves further along, arp_process() and calls
    neigh_update()-> __neigh_update() -> neigh_update_gc_list(), which adds
    the neighbour entry back in gc_list(neigh_mark_dead(), removed it
    earlier in t0 from gc_list)
    
    <CPU B, t4> - arp_process() finally calls neigh_release(n), destroying
    the neighbour entry.
    
    This leads to 'n' still being part of gc_list, but the actual
    neighbour structure has been freed.
    
    The situation can be prevented from happening if we disallow a dead
    entry to have any possibility of updating gc_list. This is what the
    patch intends to achieve.
    
    Fixes: 9c29a2f55ec0 ("neighbor: Fix locking order for gc_list changes")
    Signed-off-by: Chinmay Agarwal <chinagar@codeaurora.org>
    Reviewed-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20210127165453.GA20514@chinagar-linux.qualcomm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 271ea7072901b157e38a4e64b8d32abdc287fa9c
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Dec 2 15:50:17 2020 +0800

    igc: Report speed and duplex as unknown when device is runtime suspended
    
    commit 2e99dedc73f004f650b197c9b269c15c7e01ad15 upstream.
    
    Similar to commit 165ae7a8feb5 ("igb: Report speed and duplex as unknown
    when device is runtime suspended"), if we try to read speed and duplex
    sysfs while the device is runtime suspended, igc will complain and
    stops working:
    
    [  123.449883] igc 0000:03:00.0 enp3s0: PCIe link lost, device now detached
    [  123.450052] BUG: kernel NULL pointer dereference, address: 0000000000000008
    [  123.450056] #PF: supervisor read access in kernel mode
    [  123.450058] #PF: error_code(0x0000) - not-present page
    [  123.450059] PGD 0 P4D 0
    [  123.450064] Oops: 0000 [#1] SMP NOPTI
    [  123.450068] CPU: 0 PID: 2525 Comm: udevadm Tainted: G     U  W  OE     5.10.0-1002-oem #2+rkl2-Ubuntu
    [  123.450078] RIP: 0010:igc_rd32+0x1c/0x90 [igc]
    [  123.450080] Code: c0 5d c3 b8 fd ff ff ff c3 0f 1f 44 00 00 0f 1f 44 00 00 55 89 f0 48 89 e5 41 56 41 55 41 54 49 89 c4 53 48 8b 57 08 48 01 d0 <44> 8b 28 41 83 fd ff 74 0c 5b 44 89 e8 41 5c 41 5d 4
    
    [  123.450083] RSP: 0018:ffffb0d100d6fcc0 EFLAGS: 00010202
    [  123.450085] RAX: 0000000000000008 RBX: ffffb0d100d6fd30 RCX: 0000000000000000
    [  123.450087] RDX: 0000000000000000 RSI: 0000000000000008 RDI: ffff945a12716c10
    [  123.450089] RBP: ffffb0d100d6fce0 R08: ffff945a12716550 R09: ffff945a09874000
    [  123.450090] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000008
    [  123.450092] R13: ffff945a12716000 R14: ffff945a037da280 R15: ffff945a037da290
    [  123.450094] FS:  00007f3b34c868c0(0000) GS:ffff945b89200000(0000) knlGS:0000000000000000
    [  123.450096] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  123.450098] CR2: 0000000000000008 CR3: 00000001144de006 CR4: 0000000000770ef0
    [  123.450100] PKRU: 55555554
    [  123.450101] Call Trace:
    [  123.450111]  igc_ethtool_get_link_ksettings+0xd6/0x1b0 [igc]
    [  123.450118]  __ethtool_get_link_ksettings+0x71/0xb0
    [  123.450123]  duplex_show+0x74/0xc0
    [  123.450129]  dev_attr_show+0x1d/0x40
    [  123.450134]  sysfs_kf_seq_show+0xa1/0x100
    [  123.450137]  kernfs_seq_show+0x27/0x30
    [  123.450142]  seq_read+0xb7/0x400
    [  123.450148]  ? common_file_perm+0x72/0x170
    [  123.450151]  kernfs_fop_read+0x35/0x1b0
    [  123.450155]  vfs_read+0xb5/0x1b0
    [  123.450157]  ksys_read+0x67/0xe0
    [  123.450160]  __x64_sys_read+0x1a/0x20
    [  123.450164]  do_syscall_64+0x38/0x90
    [  123.450168]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  123.450170] RIP: 0033:0x7f3b351fe142
    [  123.450173] Code: c0 e9 c2 fe ff ff 50 48 8d 3d 3a ca 0a 00 e8 f5 19 02 00 0f 1f 44 00 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 0f 05 <48> 3d 00 f0 ff ff 77 56 c3 0f 1f 44 00 00 48 83 ec 28 48 89 54 24
    [  123.450174] RSP: 002b:00007fffef2ec138 EFLAGS: 00000246 ORIG_RAX: 0000000000000000
    [  123.450177] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f3b351fe142
    [  123.450179] RDX: 0000000000001001 RSI: 00005644c047f070 RDI: 0000000000000003
    [  123.450180] RBP: 00007fffef2ec340 R08: 00005644c047f070 R09: 00007f3b352d9320
    [  123.450182] R10: 00005644c047c010 R11: 0000000000000246 R12: 00005644c047cbf0
    [  123.450184] R13: 00005644c047e6d0 R14: 0000000000000003 R15: 00007fffef2ec140
    [  123.450189] Modules linked in: rfcomm ccm cmac algif_hash algif_skcipher af_alg bnep toshiba_acpi industrialio toshiba_haps hp_accel lis3lv02d btusb btrtl btbcm btintel bluetooth ecdh_generic ecc joydev input_leds nls_iso8859_1 snd_sof_pci snd_sof_intel_byt snd_sof_intel_ipc snd_sof_intel_hda_common snd_soc_hdac_hda snd_hda_codec_hdmi snd_sof_xtensa_dsp snd_sof_intel_hda snd_sof snd_hda_ext_core snd_soc_acpi_intel_match snd_soc_acpi snd_hda_codec_realtek snd_hda_codec_generic ledtrig_audio snd_hda_intel snd_intel_dspcfg soundwire_intel soundwire_generic_allocation soundwire_cadence snd_hda_codec snd_hda_core ath10k_pci snd_hwdep intel_rapl_msr intel_rapl_common ath10k_core soundwire_bus snd_soc_core x86_pkg_temp_thermal ath intel_powerclamp snd_compress ac97_bus snd_pcm_dmaengine mac80211 snd_pcm coretemp snd_seq_midi snd_seq_midi_event snd_rawmidi kvm_intel cfg80211 snd_seq snd_seq_device snd_timer mei_hdcp kvm libarc4 snd crct10dif_pclmul ghash_clmulni_intel aesni_intel
     mei_me dell_wmi
    [  123.450266]  dell_smbios soundcore sparse_keymap dcdbas crypto_simd cryptd mei dell_uart_backlight glue_helper ee1004 wmi_bmof intel_wmi_thunderbolt dell_wmi_descriptor mac_hid efi_pstore acpi_pad acpi_tad intel_cstate sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4 btrfs blake2b_generic raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor async_tx xor raid6_pq libcrc32c raid1 raid0 multipath linear dm_mirror dm_region_hash dm_log hid_generic usbhid hid i915 i2c_algo_bit drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops cec crc32_pclmul rc_core drm intel_lpss_pci i2c_i801 ahci igc intel_lpss i2c_smbus idma64 xhci_pci libahci virt_dma xhci_pci_renesas wmi video pinctrl_tigerlake
    [  123.450335] CR2: 0000000000000008
    [  123.450338] ---[ end trace 9f731e38b53c35cc ]---
    
    The more generic approach will be wrap get_link_ksettings() with begin()
    and complete() callbacks, and calls runtime resume and runtime suspend
    routine respectively. However, igc is like igb, runtime resume routine
    uses rtnl_lock() which upper ethtool layer also uses.
    
    So to prevent a deadlock on rtnl, take a different approach, use
    pm_runtime_suspended() to avoid reading register while device is runtime
    suspended.
    
    Fixes: 8c5ad0dae93c ("igc: Add ethtool support")
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7018edb19a926d124e07ba9825474bf68a437d10
Author: Xiao Ni <xni@redhat.com>
Date:   Thu Dec 10 14:33:32 2020 +0800

    md: Set prev_flush_start and flush_bio in an atomic way
    
    commit dc5d17a3c39b06aef866afca19245a9cfb533a79 upstream.
    
    One customer reports a crash problem which causes by flush request. It
    triggers a warning before crash.
    
            /* new request after previous flush is completed */
            if (ktime_after(req_start, mddev->prev_flush_start)) {
                    WARN_ON(mddev->flush_bio);
                    mddev->flush_bio = bio;
                    bio = NULL;
            }
    
    The WARN_ON is triggered. We use spin lock to protect prev_flush_start and
    flush_bio in md_flush_request. But there is no lock protection in
    md_submit_flush_data. It can set flush_bio to NULL first because of
    compiler reordering write instructions.
    
    For example, flush bio1 sets flush bio to NULL first in
    md_submit_flush_data. An interrupt or vmware causing an extended stall
    happen between updating flush_bio and prev_flush_start. Because flush_bio
    is NULL, flush bio2 can get the lock and submit to underlayer disks. Then
    flush bio1 updates prev_flush_start after the interrupt or extended stall.
    
    Then flush bio3 enters in md_flush_request. The start time req_start is
    behind prev_flush_start. The flush_bio is not NULL(flush bio2 hasn't
    finished). So it can trigger the WARN_ON now. Then it calls INIT_WORK
    again. INIT_WORK() will re-initialize the list pointers in the
    work_struct, which then can result in a corrupted work list and the
    work_struct queued a second time. With the work list corrupted, it can
    lead in invalid work items being used and cause a crash in
    process_one_work.
    
    We need to make sure only one flush bio can be handled at one same time.
    So add spin lock in md_submit_flush_data to protect prev_flush_start and
    flush_bio in an atomic way.
    
    Reviewed-by: David Jeffery <djeffery@redhat.com>
    Signed-off-by: Xiao Ni <xni@redhat.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e857e21eb2008356cb6f3fb0d7531a8995dca93d
Author: Nadav Amit <namit@vmware.com>
Date:   Wed Jan 27 09:53:17 2021 -0800

    iommu/vt-d: Do not use flush-queue when caching-mode is on
    
    commit 29b32839725f8c89a41cb6ee054c85f3116ea8b5 upstream.
    
    When an Intel IOMMU is virtualized, and a physical device is
    passed-through to the VM, changes of the virtual IOMMU need to be
    propagated to the physical IOMMU. The hypervisor therefore needs to
    monitor PTE mappings in the IOMMU page-tables. Intel specifications
    provide "caching-mode" capability that a virtual IOMMU uses to report
    that the IOMMU is virtualized and a TLB flush is needed after mapping to
    allow the hypervisor to propagate virtual IOMMU mappings to the physical
    IOMMU. To the best of my knowledge no real physical IOMMU reports
    "caching-mode" as turned on.
    
    Synchronizing the virtual and the physical IOMMU tables is expensive if
    the hypervisor is unaware which PTEs have changed, as the hypervisor is
    required to walk all the virtualized tables and look for changes.
    Consequently, domain flushes are much more expensive than page-specific
    flushes on virtualized IOMMUs with passthrough devices. The kernel
    therefore exploited the "caching-mode" indication to avoid domain
    flushing and use page-specific flushing in virtualized environments. See
    commit 78d5f0f500e6 ("intel-iommu: Avoid global flushes with caching
    mode.")
    
    This behavior changed after commit 13cf01744608 ("iommu/vt-d: Make use
    of iova deferred flushing"). Now, when batched TLB flushing is used (the
    default), full TLB domain flushes are performed frequently, requiring
    the hypervisor to perform expensive synchronization between the virtual
    TLB and the physical one.
    
    Getting batched TLB flushes to use page-specific invalidations again in
    such circumstances is not easy, since the TLB invalidation scheme
    assumes that "full" domain TLB flushes are performed for scalability.
    
    Disable batched TLB flushes when caching-mode is on, as the performance
    benefit from using batched TLB invalidations is likely to be much
    smaller than the overhead of the virtual-to-physical IOMMU page-tables
    synchronization.
    
    Fixes: 13cf01744608 ("iommu/vt-d: Make use of iova deferred flushing")
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Lu Baolu <baolu.lu@linux.intel.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Will Deacon <will@kernel.org>
    Cc: stable@vger.kernel.org
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20210127175317.1600473-1-namit@vmware.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fdf672759e9f94c8cfacd7f3ef9ffc426f01ab9
Author: Benjamin Valentin <benpicco@googlemail.com>
Date:   Thu Jan 21 19:24:17 2021 -0800

    Input: xpad - sync supported devices with fork on GitHub
    
    commit 9bbd77d5bbc9aff8cb74d805c31751f5f0691ba8 upstream.
    
    There is a fork of this driver on GitHub [0] that has been updated
    with new device IDs.
    
    Merge those into the mainline driver, so the out-of-tree fork is not
    needed for users of those devices anymore.
    
    [0] https://github.com/paroj/xpad
    
    Signed-off-by: Benjamin Valentin <benpicco@googlemail.com>
    Link: https://lore.kernel.org/r/20210121142523.1b6b050f@rechenknecht2k11
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03d56dab56ae2a258c2295d20b5a27ecb69cbbb4
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Thu Oct 8 18:09:43 2020 +0300

    iwlwifi: mvm: don't send RFH_QUEUE_CONFIG_CMD with no queues
    
    commit 64f55156f7adedb1ac5bb9cdbcbc9ac05ff5a724 upstream.
    
    If we have only a single RX queue, such as when MSI-X is not
    available, we should not send the RFH_QUEUEU_CONFIG_CMD, because our
    only queue is the same as the command queue and will be configured as
    part of the context info.  Our code was actually trying to send the
    command with 0 queues, which caused UMAC assert 0x1D04.
    
    Fix that by not sending the command when we have a single queue.
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201008180656.c35eeb3299f8.I08f79a6ebe150a7d180b7005b24504bfdba6d8b5@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d5705150707a4f3ec16054ab180fbd48d2ae049
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Mar 5 09:47:08 2020 -0800

    x86/apic: Add extra serialization for non-serializing MSRs
    
    commit 25a068b8e9a4eb193d755d58efcb3c98928636e0 upstream.
    
    Jan Kiszka reported that the x2apic_wrmsr_fence() function uses a plain
    MFENCE while the Intel SDM (10.12.3 MSR Access in x2APIC Mode) calls for
    MFENCE; LFENCE.
    
    Short summary: we have special MSRs that have weaker ordering than all
    the rest. Add fencing consistent with current SDM recommendations.
    
    This is not known to cause any issues in practice, only in theory.
    
    Longer story below:
    
    The reason the kernel uses a different semantic is that the SDM changed
    (roughly in late 2017). The SDM changed because folks at Intel were
    auditing all of the recommended fences in the SDM and realized that the
    x2apic fences were insufficient.
    
    Why was the pain MFENCE judged insufficient?
    
    WRMSR itself is normally a serializing instruction. No fences are needed
    because the instruction itself serializes everything.
    
    But, there are explicit exceptions for this serializing behavior written
    into the WRMSR instruction documentation for two classes of MSRs:
    IA32_TSC_DEADLINE and the X2APIC MSRs.
    
    Back to x2apic: WRMSR is *not* serializing in this specific case.
    But why is MFENCE insufficient? MFENCE makes writes visible, but
    only affects load/store instructions. WRMSR is unfortunately not a
    load/store instruction and is unaffected by MFENCE. This means that a
    non-serializing WRMSR could be reordered by the CPU to execute before
    the writes made visible by the MFENCE have even occurred in the first
    place.
    
    This means that an x2apic IPI could theoretically be triggered before
    there is any (visible) data to process.
    
    Does this affect anything in practice? I honestly don't know. It seems
    quite possible that by the time an interrupt gets to consume the (not
    yet) MFENCE'd data, it has become visible, mostly by accident.
    
    To be safe, add the SDM-recommended fences for all x2apic WRMSRs.
    
    This also leaves open the question of the _other_ weakly-ordered WRMSR:
    MSR_IA32_TSC_DEADLINE. While it has the same ordering architecture as
    the x2APIC MSRs, it seems substantially less likely to be a problem in
    practice. While writes to the in-memory Local Vector Table (LVT) might
    theoretically be reordered with respect to a weakly-ordered WRMSR like
    TSC_DEADLINE, the SDM has this to say:
    
      In x2APIC mode, the WRMSR instruction is used to write to the LVT
      entry. The processor ensures the ordering of this write and any
      subsequent WRMSR to the deadline; no fencing is required.
    
    But, that might still leave xAPIC exposed. The safest thing to do for
    now is to add the extra, recommended LFENCE.
    
     [ bp: Massage commit message, fix typos, drop accidentally added
       newline to tools/arch/x86/include/asm/barrier.h. ]
    
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200305174708.F77040DD@viggo.jf.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc1a3aeeff0ff3719a9758d27a03283ff413b08a
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jan 28 15:52:19 2021 -0600

    x86/build: Disable CET instrumentation in the kernel
    
    commit 20bf2b378729c4a0366a53e2018a0b70ace94bcd upstream.
    
    With retpolines disabled, some configurations of GCC, and specifically
    the GCC versions 9 and 10 in Ubuntu will add Intel CET instrumentation
    to the kernel by default. That breaks certain tracing scenarios by
    adding a superfluous ENDBR64 instruction before the fentry call, for
    functions which can be called indirectly.
    
    CET instrumentation isn't currently necessary in the kernel, as CET is
    only supported in user space. Disable it unconditionally and move it
    into the x86's Makefile as CET/CFI... enablement should be a per-arch
    decision anyway.
    
     [ bp: Massage and extend commit message. ]
    
    Fixes: 29be86d7f9cb ("kbuild: add -fcf-protection=none when using retpoline flags")
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Cc: <stable@vger.kernel.org>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Link: https://lkml.kernel.org/r/20210128215219.6kct3h2eiustncws@treble
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40d0fff2976185efda4215f4d92c33984926cd75
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Feb 4 18:32:31 2021 -0800

    mm: thp: fix MADV_REMOVE deadlock on shmem THP
    
    commit 1c2f67308af4c102b4e1e6cd6f69819ae59408e0 upstream.
    
    Sergey reported deadlock between kswapd correctly doing its usual
    lock_page(page) followed by down_read(page->mapping->i_mmap_rwsem), and
    madvise(MADV_REMOVE) on an madvise(MADV_HUGEPAGE) area doing
    down_write(page->mapping->i_mmap_rwsem) followed by lock_page(page).
    
    This happened when shmem_fallocate(punch hole)'s unmap_mapping_range()
    reaches zap_pmd_range()'s call to __split_huge_pmd().  The same deadlock
    could occur when partially truncating a mapped huge tmpfs file, or using
    fallocate(FALLOC_FL_PUNCH_HOLE) on it.
    
    __split_huge_pmd()'s page lock was added in 5.8, to make sure that any
    concurrent use of reuse_swap_page() (holding page lock) could not catch
    the anon THP's mapcounts and swapcounts while they were being split.
    
    Fortunately, reuse_swap_page() is never applied to a shmem or file THP
    (not even by khugepaged, which checks PageSwapCache before calling), and
    anonymous THPs are never created in shmem or file areas: so that
    __split_huge_pmd()'s page lock can only be necessary for anonymous THPs,
    on which there is no risk of deadlock with i_mmap_rwsem.
    
    Link: https://lkml.kernel.org/r/alpine.LSU.2.11.2101161409470.2022@eggly.anvils
    Fixes: c444eb564fb1 ("mm: thp: make the THP mapcount atomic against __split_huge_pmd_locked()")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reported-by: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56d61cd652dd75bf35c61c05303c40cd59356879
Author: Rokudo Yan <wu-yan@tcl.com>
Date:   Thu Feb 4 18:32:20 2021 -0800

    mm, compaction: move high_pfn to the for loop scope
    
    commit 74e21484e40bb8ce0f9828bbfe1c9fc9b04249c6 upstream.
    
    In fast_isolate_freepages, high_pfn will be used if a prefered one (ie
    PFN >= low_fn) not found.
    
    But the high_pfn is not reset before searching an free area, so when it
    was used as freepage, it may from another free area searched before.  As
    a result move_freelist_head(freelist, freepage) will have unexpected
    behavior (eg corrupt the MOVABLE freelist)
    
      Unable to handle kernel paging request at virtual address dead000000000200
      Mem abort info:
        ESR = 0x96000044
        Exception class = DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
      Data abort info:
        ISV = 0, ISS = 0x00000044
        CM = 0, WnR = 1
      [dead000000000200] address between user and kernel address ranges
    
      -000|list_cut_before(inline)
      -000|move_freelist_head(inline)
      -000|fast_isolate_freepages(inline)
      -000|isolate_freepages(inline)
      -000|compaction_alloc(?, ?)
      -001|unmap_and_move(inline)
      -001|migrate_pages([NSD:0xFFFFFF80088CBBD0] from = 0xFFFFFF80088CBD88, [NSD:0xFFFFFF80088CBBC8] get_new_p
      -002|__read_once_size(inline)
      -002|static_key_count(inline)
      -002|static_key_false(inline)
      -002|trace_mm_compaction_migratepages(inline)
      -002|compact_zone(?, [NSD:0xFFFFFF80088CBCB0] capc = 0x0)
      -003|kcompactd_do_work(inline)
      -003|kcompactd([X19] p = 0xFFFFFF93227FBC40)
      -004|kthread([X20] _create = 0xFFFFFFE1AFB26380)
      -005|ret_from_fork(asm)
    
    The issue was reported on an smart phone product with 6GB ram and 3GB
    zram as swap device.
    
    This patch fixes the issue by reset high_pfn before searching each free
    area, which ensure freepage and freelist match when call
    move_freelist_head in fast_isolate_freepages().
    
    Link: http://lkml.kernel.org/r/20190118175136.31341-12-mgorman@techsingularity.net
    Link: https://lkml.kernel.org/r/20210112094720.1238444-1-wu-yan@tcl.com
    Fixes: 5a811889de10f1eb ("mm, compaction: use free lists to quickly locate a migration target")
    Signed-off-by: Rokudo Yan <wu-yan@tcl.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90ef21e5806f992daf1be603f2b9643eabe14866
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:13 2021 -0800

    mm: hugetlb: remove VM_BUG_ON_PAGE from page_huge_active
    
    commit ecbf4724e6061b4b01be20f6d797d64d462b2bc8 upstream.
    
    The page_huge_active() can be called from scan_movable_pages() which do
    not hold a reference count to the HugeTLB page.  So when we call
    page_huge_active() from scan_movable_pages(), the HugeTLB page can be
    freed parallel.  Then we will trigger a BUG_ON which is in the
    page_huge_active() when CONFIG_DEBUG_VM is enabled.  Just remove the
    VM_BUG_ON_PAGE.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-6-songmuchun@bytedance.com
    Fixes: 7e1f049efb86 ("mm: hugetlb: cleanup using paeg_huge_active()")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af5508b1e862f803484a182f6b3606fd2096a2f4
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:10 2021 -0800

    mm: hugetlb: fix a race between isolating and freeing page
    
    commit 0eb2df2b5629794020f75e94655e1994af63f0d4 upstream.
    
    There is a race between isolate_huge_page() and __free_huge_page().
    
      CPU0:                                     CPU1:
    
      if (PageHuge(page))
                                                put_page(page)
                                                  __free_huge_page(page)
                                                      spin_lock(&hugetlb_lock)
                                                      update_and_free_page(page)
                                                        set_compound_page_dtor(page,
                                                          NULL_COMPOUND_DTOR)
                                                      spin_unlock(&hugetlb_lock)
        isolate_huge_page(page)
          // trigger BUG_ON
          VM_BUG_ON_PAGE(!PageHead(page), page)
          spin_lock(&hugetlb_lock)
          page_huge_active(page)
            // trigger BUG_ON
            VM_BUG_ON_PAGE(!PageHuge(page), page)
          spin_unlock(&hugetlb_lock)
    
    When we isolate a HugeTLB page on CPU0.  Meanwhile, we free it to the
    buddy allocator on CPU1.  Then, we can trigger a BUG_ON on CPU0, because
    it is already freed to the buddy allocator.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-5-songmuchun@bytedance.com
    Fixes: c8721bbbdd36 ("mm: memory-hotplug: enable memory hotplug to handle hugepage")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3264a763174f860d48be329d252a34b6392dd8c3
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:06 2021 -0800

    mm: hugetlb: fix a race between freeing and dissolving the page
    
    commit 7ffddd499ba6122b1a07828f023d1d67629aa017 upstream.
    
    There is a race condition between __free_huge_page()
    and dissolve_free_huge_page().
    
      CPU0:                         CPU1:
    
      // page_count(page) == 1
      put_page(page)
        __free_huge_page(page)
                                    dissolve_free_huge_page(page)
                                      spin_lock(&hugetlb_lock)
                                      // PageHuge(page) && !page_count(page)
                                      update_and_free_page(page)
                                      // page is freed to the buddy
                                      spin_unlock(&hugetlb_lock)
          spin_lock(&hugetlb_lock)
          clear_page_huge_active(page)
          enqueue_huge_page(page)
          // It is wrong, the page is already freed
          spin_unlock(&hugetlb_lock)
    
    The race window is between put_page() and dissolve_free_huge_page().
    
    We should make sure that the page is already on the free list when it is
    dissolved.
    
    As a result __free_huge_page would corrupt page(s) already in the buddy
    allocator.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-4-songmuchun@bytedance.com
    Fixes: c8721bbbdd36 ("mm: memory-hotplug: enable memory hotplug to handle hugepage")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 108f56ed354f2955a35ac6963e0bfa37677b0bf0
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:03 2021 -0800

    mm: hugetlbfs: fix cannot migrate the fallocated HugeTLB page
    
    commit 585fc0d2871c9318c949fbf45b1f081edd489e96 upstream.
    
    If a new hugetlb page is allocated during fallocate it will not be
    marked as active (set_page_huge_active) which will result in a later
    isolate_huge_page failure when the page migration code would like to
    move that page.  Such a failure would be unexpected and wrong.
    
    Only export set_page_huge_active, just leave clear_page_huge_active as
    static.  Because there are no external users.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-3-songmuchun@bytedance.com
    Fixes: 70c3547e36f5 (hugetlbfs: add hugetlbfs_fallocate())
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75be4852490f0c465796be423a9deb41aeffee51
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun Oct 18 09:39:21 2020 +0100

    ARM: footbridge: fix dc21285 PCI configuration accessors
    
    commit 39d3454c3513840eb123b3913fda6903e45ce671 upstream.
    
    Building with gcc 4.9.2 reveals a latent bug in the PCI accessors
    for Footbridge platforms, which causes a fatal alignment fault
    while accessing IO memory. Fix this by making the assembly volatile.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2640b08c43c689d4351e9e51d7a3e9ad532cb3a
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Feb 2 08:55:46 2021 -0800

    KVM: x86: Update emulator context mode if SYSENTER xfers to 64-bit mode
    
    commit 943dea8af21bd896e0d6c30ea221203fb3cd3265 upstream.
    
    Set the emulator context to PROT64 if SYSENTER transitions from 32-bit
    userspace (compat mode) to a 64-bit kernel, otherwise the RIP update at
    the end of x86_emulate_insn() will incorrectly truncate the new RIP.
    
    Note, this bug is mostly limited to running an Intel virtual CPU model on
    an AMD physical CPU, as other combinations of virtual and physical CPUs
    do not trigger full emulation.  On Intel CPUs, SYSENTER in compatibility
    mode is legal, and unconditionally transitions to 64-bit mode.  On AMD
    CPUs, SYSENTER is illegal in compatibility mode and #UDs.  If the vCPU is
    AMD, KVM injects a #UD on SYSENTER in compat mode.  If the pCPU is Intel,
    SYSENTER will execute natively and not trigger #UD->VM-Exit (ignoring
    guest TLB shenanigans).
    
    Fixes: fede8076aab4 ("KVM: x86: handle wrap around 32-bit address space")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jonny Barker <jonny@jonnybarker.com>
    [sean: wrote changelog]
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210202165546.2390296-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d3201c77be55545317cc4bb6010a0040688e6a1
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Feb 2 13:20:17 2021 -0800

    KVM: SVM: Treat SVM as unsupported when running as an SEV guest
    
    commit ccd85d90ce092bdb047a7f6580f3955393833b22 upstream.
    
    Don't let KVM load when running as an SEV guest, regardless of what
    CPUID says.  Memory is encrypted with a key that is not accessible to
    the host (L0), thus it's impossible for L0 to emulate SVM, e.g. it'll
    see garbage when reading the VMCB.
    
    Technically, KVM could decrypt all memory that needs to be accessible to
    the L0 and use shadow paging so that L0 does not need to shadow NPT, but
    exposing such information to L0 largely defeats the purpose of running as
    an SEV guest.  This can always be revisited if someone comes up with a
    use case for running VMs inside SEV guests.
    
    Note, VMLOAD, VMRUN, etc... will also #GP on GPAs with C-bit set, i.e. KVM
    is doomed even if the SEV guest is debuggable and the hypervisor is willing
    to decrypt the VMCB.  This may or may not be fixed on CPUs that have the
    SVME_ADDR_CHK fix.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210202212017.2486595-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9be9445e494463c6578dab3f72dd12aeacbeb2f
Author: Thorsten Leemhuis <linux@leemhuis.info>
Date:   Fri Jan 29 06:24:42 2021 +0100

    nvme-pci: avoid the deepest sleep state on Kingston A2000 SSDs
    
    commit 538e4a8c571efdf131834431e0c14808bcfb1004 upstream.
    
    Some Kingston A2000 NVMe SSDs sooner or later get confused and stop
    working when they use the deepest APST sleep while running Linux. The
    system then crashes and one has to cold boot it to get the SSD working
    again.
    
    Kingston seems to known about this since at least mid-September 2020:
    https://bbs.archlinux.org/viewtopic.php?pid=1926994#p1926994
    
    Someone working for a German company representing Kingston to the German
    press confirmed to me Kingston engineering is aware of the issue and
    investigating; the person stated that to their current knowledge only
    the deepest APST sleep state causes trouble. Therefore, make Linux avoid
    it for now by applying the NVME_QUIRK_NO_DEEPEST_PS to this SSD.
    
    I have two such SSDs, but it seems the problem doesn't occur with them.
    I hence couldn't verify if this patch really fixes the problem, but all
    the data in front of me suggests it should.
    
    This patch can easily be reverted or improved upon if a better solution
    surfaces.
    
    FWIW, there are many reports about the issue scattered around the web;
    most of the users disabled APST completely to make things work, some
    just made Linux avoid the deepest sleep state:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c65
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c73
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c74
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c78
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c79
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c80
    https://askubuntu.com/questions/1222049/nvmekingston-a2000-sometimes-stops-giving-response-in-ubuntu-18-04dell-inspir
    https://community.acer.com/en/discussion/604326/m-2-nvme-ssd-aspire-517-51g-issue-compatibility-kingston-a2000-linux-ubuntu
    
    For the record, some data from 'nvme id-ctrl /dev/nvme0'
    
    NVME Identify Controller:
    vid       : 0x2646
    ssvid     : 0x2646
    mn        : KINGSTON SA2000M81000G
    fr        : S5Z42105
    [...]
    ps    0 : mp:9.00W operational enlat:0 exlat:0 rrt:0 rrl:0
              rwt:0 rwl:0 idle_power:- active_power:-
    ps    1 : mp:4.60W operational enlat:0 exlat:0 rrt:1 rrl:1
              rwt:1 rwl:1 idle_power:- active_power:-
    ps    2 : mp:3.80W operational enlat:0 exlat:0 rrt:2 rrl:2
              rwt:2 rwl:2 idle_power:- active_power:-
    ps    3 : mp:0.0450W non-operational enlat:2000 exlat:2000 rrt:3 rrl:3
              rwt:3 rwl:3 idle_power:- active_power:-
    ps    4 : mp:0.0040W non-operational enlat:15000 exlat:15000 rrt:4 rrl:4
              rwt:4 rwl:4 idle_power:- active_power:-
    
    Cc: stable@vger.kernel.org # 4.14+
    Signed-off-by: Thorsten Leemhuis <linux@leemhuis.info>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9034fcb27c0bafcab482a3dd8dd8f838ed4326c
Author: Stylon Wang <stylon.wang@amd.com>
Date:   Tue Jan 5 11:29:34 2021 +0800

    drm/amd/display: Revert "Fix EDID parsing after resume from suspend"
    
    commit 1a10e5244778169a5a53a527d7830cf0438132a1 upstream.
    
    This reverts commit b24bdc37d03a0478189e20a50286092840f414fa.
    It caused memory leak after S3 on 4K HDMI displays.
    
    Signed-off-by: Stylon Wang <stylon.wang@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6844143e21980fdcfc8b936a79692d95a1f46668
Author: Fengnan Chang <fengnanchang@gmail.com>
Date:   Sat Jan 23 11:32:31 2021 +0800

    mmc: core: Limit retries when analyse of SDIO tuples fails
    
    commit f92e04f764b86e55e522988e6f4b6082d19a2721 upstream.
    
    When analysing tuples fails we may loop indefinitely to retry. Let's avoid
    this by using a 10s timeout and bail if not completed earlier.
    
    Signed-off-by: Fengnan Chang <fengnanchang@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210123033230.36442-1-fengnanchang@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68c825bd27266504d42f88b396ca3599265dd9b6
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Tue Feb 2 22:34:32 2021 -0600

    smb3: fix crediting for compounding when only one request in flight
    
    commit 91792bb8089b63b7b780251eb83939348ac58a64 upstream.
    
    Currently we try to guess if a compound request is going to
    succeed waiting for credits or not based on the number of
    requests in flight. This approach doesn't work correctly
    all the time because there may be only one request in
    flight which is going to bring multiple credits satisfying
    the compound request.
    
    Change the behavior to fail a request only if there are no requests
    in flight at all and proceed waiting for credits otherwise.
    
    Cc: <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Tom Talpey <tom@talpey.com>
    Reviewed-by: Shyam Prasad N <nspmangalore@gmail.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaf2f835b52c201917a04f38864bcee5b76f12db
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Mon Feb 1 20:36:54 2021 -0600

    smb3: Fix out-of-bounds bug in SMB2_negotiate()
    
    commit 8d8d1dbefc423d42d626cf5b81aac214870ebaab upstream.
    
    While addressing some warnings generated by -Warray-bounds, I found this
    bug that was introduced back in 2017:
    
      CC [M]  fs/cifs/smb2pdu.o
    fs/cifs/smb2pdu.c: In function ‘SMB2_negotiate’:
    fs/cifs/smb2pdu.c:822:16: warning: array subscript 1 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      822 |   req->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    fs/cifs/smb2pdu.c:823:16: warning: array subscript 2 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      823 |   req->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    fs/cifs/smb2pdu.c:824:16: warning: array subscript 3 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      824 |   req->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    fs/cifs/smb2pdu.c:816:16: warning: array subscript 1 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      816 |   req->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    
    At the time, the size of array _Dialects_ was changed from 1 to 3 in struct
    validate_negotiate_info_req, and then in 2019 it was changed from 3 to 4,
    but those changes were never made in struct smb2_negotiate_req, which has
    led to a 3 and a half years old out-of-bounds bug in function
    SMB2_negotiate() (fs/cifs/smb2pdu.c).
    
    Fix this by increasing the size of array _Dialects_ in struct
    smb2_negotiate_req to 4.
    
    Fixes: 9764c02fcbad ("SMB3: Add support for multidialect negotiate (SMB2.1 and later)")
    Fixes: d5c7076b772a ("smb3: add smb3.1.1 to default dialect list")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00f581964b66386d74285164513dc38ed3b2a5a9
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Fri Feb 5 15:42:48 2021 +0100

    cifs: report error instead of invalid when revalidating a dentry fails
    
    commit 21b200d091826a83aafc95d847139b2b0582f6d1 upstream.
    
    Assuming
    - //HOST/a is mounted on /mnt
    - //HOST/b is mounted on /mnt/b
    
    On a slow connection, running 'df' and killing it while it's
    processing /mnt/b can make cifs_get_inode_info() returns -ERESTARTSYS.
    
    This triggers the following chain of events:
    => the dentry revalidation fail
    => dentry is put and released
    => superblock associated with the dentry is put
    => /mnt/b is unmounted
    
    This patch makes cifs_d_revalidate() return the error instead of 0
    (invalid) when cifs_revalidate_dentry() fails, except for ENOENT (file
    deleted) and ESTALE (file recreated).
    
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Suggested-by: Shyam Prasad N <nspmangalore@gmail.com>
    Reviewed-by: Shyam Prasad N <nspmangalore@gmail.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd6dc98f66ef136595e5b93d72d42f056e3801e7
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Feb 3 13:37:02 2021 +0200

    xhci: fix bounce buffer usage for non-sg list case
    
    commit d4a610635400ccc382792f6be69427078541c678 upstream.
    
    xhci driver may in some special cases need to copy small amounts
    of payload data to a bounce buffer in order to meet the boundary
    and alignment restrictions set by the xHCI specification.
    
    In the majority of these cases the data is in a sg list, and
    driver incorrectly assumed data is always in urb->sg when using
    the bounce buffer.
    
    If data instead is contiguous, and in urb->transfer_buffer, we may still
    need to bounce buffer a small part if data starts very close (less than
    packet size) to a 64k boundary.
    
    Check if sg list is used before copying data to/from it.
    
    Fixes: f9c589e142d0 ("xhci: TD-fragment, align the unsplittable case with a bounce buffer")
    Cc: stable@vger.kernel.org
    Reported-by: Andreas Hartmann <andihartmann@01019freenet.de>
    Tested-by: Andreas Hartmann <andihartmann@01019freenet.de>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210203113702.436762-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6a47f2ce090bad60d4d3751dfd38909bcfa3d34
Author: Marc Zyngier <maz@kernel.org>
Date:   Sat Jan 23 12:27:59 2021 +0000

    genirq/msi: Activate Multi-MSI early when MSI_FLAG_ACTIVATE_EARLY is set
    
    commit 4c457e8cb75eda91906a4f89fc39bde3f9a43922 upstream.
    
    When MSI_FLAG_ACTIVATE_EARLY is set (which is the case for PCI),
    __msi_domain_alloc_irqs() performs the activation of the interrupt (which
    in the case of PCI results in the endpoint being programmed) as soon as the
    interrupt is allocated.
    
    But it appears that this is only done for the first vector, introducing an
    inconsistent behaviour for PCI Multi-MSI.
    
    Fix it by iterating over the number of vectors allocated to each MSI
    descriptor. This is easily achieved by introducing a new
    "for_each_msi_vector" iterator, together with a tiny bit of refactoring.
    
    Fixes: f3b0946d629c ("genirq/msi: Make sure PCI MSIs are activated early")
    Reported-by: Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210123122759.1781359-1-maz@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9654bbe52b571604b0f904e927b53111844cad6
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Feb 1 16:20:40 2021 -0800

    libnvdimm/dimm: Avoid race between probe and available_slots_show()
    
    commit 7018c897c2f243d4b5f1b94bc6b4831a7eab80fb upstream.
    
    Richard reports that the following test:
    
    (while true; do
         cat /sys/bus/nd/devices/nmem*/available_slots 2>&1 > /dev/null
     done) &
    
    while true; do
         for i in $(seq 0 4); do
             echo nmem$i > /sys/bus/nd/drivers/nvdimm/bind
         done
         for i in $(seq 0 4); do
             echo nmem$i > /sys/bus/nd/drivers/nvdimm/unbind
         done
     done
    
    ...fails with a crash signature like:
    
        divide error: 0000 [#1] SMP KASAN PTI
        RIP: 0010:nd_label_nfree+0x134/0x1a0 [libnvdimm]
        [..]
        Call Trace:
         available_slots_show+0x4e/0x120 [libnvdimm]
         dev_attr_show+0x42/0x80
         ? memset+0x20/0x40
         sysfs_kf_seq_show+0x218/0x410
    
    The root cause is that available_slots_show() consults driver-data, but
    fails to synchronize against device-unbind setting up a TOCTOU race to
    access uninitialized memory.
    
    Validate driver-data under the device-lock.
    
    Fixes: 4d88a97aa9e8 ("libnvdimm, nvdimm: dimm driver and base libnvdimm device-driver infrastructure")
    Cc: <stable@vger.kernel.org>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Coly Li <colyli@suse.com>
    Reported-by: Richard Palethorpe <rpalethorpe@suse.com>
    Acked-by: Richard Palethorpe <rpalethorpe@suse.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0f36951ead4a5fc8411fbdf206cd4f18ead5963
Author: Wang ShaoBo <bobo.shaobowang@huawei.com>
Date:   Thu Jan 28 20:44:27 2021 +0800

    kretprobe: Avoid re-registration of the same kretprobe earlier
    
    commit 0188b87899ffc4a1d36a0badbe77d56c92fd91dc upstream.
    
    Our system encountered a re-init error when re-registering same kretprobe,
    where the kretprobe_instance in rp->free_instances is illegally accessed
    after re-init.
    
    Implementation to avoid re-registration has been introduced for kprobe
    before, but lags for register_kretprobe(). We must check if kprobe has
    been re-registered before re-initializing kretprobe, otherwise it will
    destroy the data struct of kretprobe registered, which can lead to memory
    leak, system crash, also some unexpected behaviors.
    
    We use check_kprobe_rereg() to check if kprobe has been re-registered
    before running register_kretprobe()'s body, for giving a warning message
    and terminate registration process.
    
    Link: https://lkml.kernel.org/r/20210128124427.2031088-1-bobo.shaobowang@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 1f0ab40976460 ("kprobes: Prevent re-registration of the same kprobe")
    [ The above commit should have been done for kretprobes too ]
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Ananth N Mavinakayanahalli <ananth@linux.ibm.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e80f9021d5be80b05c8f75709d23811a831af565
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Jan 29 10:13:53 2021 -0500

    fgraph: Initialize tracing_graph_pause at task creation
    
    commit 7e0a9220467dbcfdc5bc62825724f3e52e50ab31 upstream.
    
    On some archs, the idle task can call into cpu_suspend(). The cpu_suspend()
    will disable or pause function graph tracing, as there's some paths in
    bringing down the CPU that can have issues with its return address being
    modified. The task_struct structure has a "tracing_graph_pause" atomic
    counter, that when set to something other than zero, the function graph
    tracer will not modify the return address.
    
    The problem is that the tracing_graph_pause counter is initialized when the
    function graph tracer is enabled. This can corrupt the counter for the idle
    task if it is suspended in these architectures.
    
       CPU 1                                CPU 2
       -----                                -----
      do_idle()
        cpu_suspend()
          pause_graph_tracing()
              task_struct->tracing_graph_pause++ (0 -> 1)
    
                                    start_graph_tracing()
                                      for_each_online_cpu(cpu) {
                                        ftrace_graph_init_idle_task(cpu)
                                          task-struct->tracing_graph_pause = 0 (1 -> 0)
    
          unpause_graph_tracing()
              task_struct->tracing_graph_pause-- (0 -> -1)
    
    The above should have gone from 1 to zero, and enabled function graph
    tracing again. But instead, it is set to -1, which keeps it disabled.
    
    There's no reason that the field tracing_graph_pause on the task_struct can
    not be initialized at boot up.
    
    Cc: stable@vger.kernel.org
    Fixes: 380c4b1411ccd ("tracing/function-graph-tracer: append the tracing_graph_flag")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=211339
    Reported-by: pierre.gondois@arm.com
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efa17285b3384607cfa4e5eabccb4f84b1489009
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon Feb 1 09:33:24 2021 +0100

    mac80211: fix station rate table updates on assoc
    
    commit 18fe0fae61252b5ae6e26553e2676b5fac555951 upstream.
    
    If the driver uses .sta_add, station entries are only uploaded after the sta
    is in assoc state. Fix early station rate table updates by deferring them
    until the sta has been uploaded.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20210201083324.3134-1-nbd@nbd.name
    [use rcu_access_pointer() instead since we won't dereference here]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ecdd962c4b9bd5bb49df902b2ed25e2a15975cae
Author: Liangyan <liangyan.peng@linux.alibaba.com>
Date:   Tue Dec 22 11:06:26 2020 +0800

    ovl: fix dentry leak in ovl_get_redirect
    
    commit e04527fefba6e4e66492f122cf8cc6314f3cf3bf upstream.
    
    We need to lock d_parent->d_lock before dget_dlock, or this may
    have d_lockref updated parallelly like calltrace below which will
    cause dentry->d_lockref leak and risk a crash.
    
         CPU 0                                CPU 1
    ovl_set_redirect                       lookup_fast
      ovl_get_redirect                       __d_lookup
        dget_dlock
          //no lock protection here            spin_lock(&dentry->d_lock)
          dentry->d_lockref.count++            dentry->d_lockref.count++
    
    [   49.799059] PGD 800000061fed7067 P4D 800000061fed7067 PUD 61fec5067 PMD 0
    [   49.799689] Oops: 0002 [#1] SMP PTI
    [   49.800019] CPU: 2 PID: 2332 Comm: node Not tainted 4.19.24-7.20.al7.x86_64 #1
    [   49.800678] Hardware name: Alibaba Cloud Alibaba Cloud ECS, BIOS 8a46cfe 04/01/2014
    [   49.801380] RIP: 0010:_raw_spin_lock+0xc/0x20
    [   49.803470] RSP: 0018:ffffac6fc5417e98 EFLAGS: 00010246
    [   49.803949] RAX: 0000000000000000 RBX: ffff93b8da3446c0 RCX: 0000000a00000000
    [   49.804600] RDX: 0000000000000001 RSI: 000000000000000a RDI: 0000000000000088
    [   49.805252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffff993cf040
    [   49.805898] R10: ffff93b92292e580 R11: ffffd27f188a4b80 R12: 0000000000000000
    [   49.806548] R13: 00000000ffffff9c R14: 00000000fffffffe R15: ffff93b8da3446c0
    [   49.807200] FS:  00007ffbedffb700(0000) GS:ffff93b927880000(0000) knlGS:0000000000000000
    [   49.807935] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   49.808461] CR2: 0000000000000088 CR3: 00000005e3f74006 CR4: 00000000003606a0
    [   49.809113] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   49.809758] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   49.810410] Call Trace:
    [   49.810653]  d_delete+0x2c/0xb0
    [   49.810951]  vfs_rmdir+0xfd/0x120
    [   49.811264]  do_rmdir+0x14f/0x1a0
    [   49.811573]  do_syscall_64+0x5b/0x190
    [   49.811917]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   49.812385] RIP: 0033:0x7ffbf505ffd7
    [   49.814404] RSP: 002b:00007ffbedffada8 EFLAGS: 00000297 ORIG_RAX: 0000000000000054
    [   49.815098] RAX: ffffffffffffffda RBX: 00007ffbedffb640 RCX: 00007ffbf505ffd7
    [   49.815744] RDX: 0000000004449700 RSI: 0000000000000000 RDI: 0000000006c8cd50
    [   49.816394] RBP: 00007ffbedffaea0 R08: 0000000000000000 R09: 0000000000017d0b
    [   49.817038] R10: 0000000000000000 R11: 0000000000000297 R12: 0000000000000012
    [   49.817687] R13: 00000000072823d8 R14: 00007ffbedffb700 R15: 00000000072823d8
    [   49.818338] Modules linked in: pvpanic cirrusfb button qemu_fw_cfg atkbd libps2 i8042
    [   49.819052] CR2: 0000000000000088
    [   49.819368] ---[ end trace 4e652b8aa299aa2d ]---
    [   49.819796] RIP: 0010:_raw_spin_lock+0xc/0x20
    [   49.821880] RSP: 0018:ffffac6fc5417e98 EFLAGS: 00010246
    [   49.822363] RAX: 0000000000000000 RBX: ffff93b8da3446c0 RCX: 0000000a00000000
    [   49.823008] RDX: 0000000000000001 RSI: 000000000000000a RDI: 0000000000000088
    [   49.823658] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffff993cf040
    [   49.825404] R10: ffff93b92292e580 R11: ffffd27f188a4b80 R12: 0000000000000000
    [   49.827147] R13: 00000000ffffff9c R14: 00000000fffffffe R15: ffff93b8da3446c0
    [   49.828890] FS:  00007ffbedffb700(0000) GS:ffff93b927880000(0000) knlGS:0000000000000000
    [   49.830725] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   49.832359] CR2: 0000000000000088 CR3: 00000005e3f74006 CR4: 00000000003606a0
    [   49.834085] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   49.835792] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Cc: <stable@vger.kernel.org>
    Fixes: a6c606551141 ("ovl: redirect on rename-dir")
    Signed-off-by: Liangyan <liangyan.peng@linux.alibaba.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b9a2e5c0c4294f39dbe018e87728618c8df3140
Author: Peter Chen <peter.chen@nxp.com>
Date:   Fri Sep 18 16:17:46 2020 +0300

    usb: host: xhci-plat: add priv quirk for skip PHY initialization
    
    commit f768e718911e03a4a20b65f984eaa9b09045e4cd upstream.
    
    Some DRD controllers (eg, dwc3 & cdns3) have PHY management at
    their own driver to cover both device and host mode, so add one
    priv quirk for such users to skip PHY management from HCD core.
    
    Reviewed-by: Jun Li <jun.li@nxp.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200918131752.16488-5-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddc682d33024e6af30a6182479b7cc6fb25b7152
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Tue Feb 2 16:38:24 2021 +0800

    usb: xhci-mtk: break loop when find the endpoint to drop
    
    commit a50ea34d6dd00a12c9cd29cf7b0fa72816bffbcb upstream.
    
    No need to check the following endpoints after finding the endpoint
    wanted to drop.
    
    Fixes: 54f6a8af3722 ("usb: xhci-mtk: skip dropping bandwidth of unchecked endpoints")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Ikjoon Jang <ikjn@chromium.org>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/1612255104-5363-1-git-send-email-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32410786279fc8422764056ff008dabfcee6f09a
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Mon Feb 1 13:57:44 2021 +0800

    usb: xhci-mtk: skip dropping bandwidth of unchecked endpoints
    
    commit 54f6a8af372213a254af6609758d99f7c0b6b5ad upstream.
    
    For those unchecked endpoints, we don't allocate bandwidth for
    them, so no need free the bandwidth, otherwise will decrease
    the allocated bandwidth.
    Meanwhile use xhci_dbg() instead of dev_dbg() to print logs and
    rename bw_ep_list_new as bw_ep_chk_list.
    
    Fixes: 1d69f9d901ef ("usb: xhci-mtk: fix unreleased bandwidth data")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-and-tested-by: Ikjoon Jang <ikjn@chromium.org>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/1612159064-28413-1-git-send-email-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4e4f067f94cfb36de430b2aa582b584e1ec27fe
Author: Ikjoon Jang <ikjn@chromium.org>
Date:   Wed Jan 13 18:05:11 2021 +0800

    usb: xhci-mtk: fix unreleased bandwidth data
    
    commit 1d69f9d901ef14d81c3b004e3282b8cc7b456280 upstream.
    
    xhci-mtk needs XHCI_MTK_HOST quirk functions in add_endpoint() and
    drop_endpoint() to handle its own sw bandwidth management.
    
    It stores bandwidth data into an internal table every time
    add_endpoint() is called, and drops those in drop_endpoint().
    But when bandwidth allocation fails at one endpoint, all earlier
    allocation from the same interface could still remain at the table.
    
    This patch moves bandwidth management codes to check_bandwidth() and
    reset_bandwidth() path. To do so, this patch also adds those functions
    to xhci_driver_overrides and lets mtk-xhci to release all failed
    endpoints in reset_bandwidth() path.
    
    Fixes: 08e469de87a2 ("usb: xhci-mtk: supports bandwidth scheduling with multi-TT")
    Signed-off-by: Ikjoon Jang <ikjn@chromium.org>
    Link: https://lore.kernel.org/r/20210113180444.v6.1.Id0d31b5f3ddf5e734d2ab11161ac5821921b1e1e@changeid
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f9e9c1048b8544e2c2953ff87c1ea4c975b2e34
Author: Gary Bisson <gary.bisson@boundarydevices.com>
Date:   Mon Jan 25 17:19:34 2021 +0100

    usb: dwc3: fix clock issue during resume in OTG mode
    
    commit 0e5a3c8284a30f4c43fd81d7285528ece74563b5 upstream.
    
    Commit fe8abf332b8f ("usb: dwc3: support clocks and resets for DWC3
    core") introduced clock support and a new function named
    dwc3_core_init_for_resume() which enables the clock before calling
    dwc3_core_init() during resume as clocks get disabled during suspend.
    
    Unfortunately in this commit the DWC3_GCTL_PRTCAP_OTG case was forgotten
    and therefore during resume, a platform could call dwc3_core_init()
    without re-enabling the clocks first, preventing to resume properly.
    
    So update the resume path to call dwc3_core_init_for_resume() as it
    should.
    
    Fixes: fe8abf332b8f ("usb: dwc3: support clocks and resets for DWC3 core")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gary Bisson <gary.bisson@boundarydevices.com>
    Link: https://lore.kernel.org/r/20210125161934.527820-1-gary.bisson@boundarydevices.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d058a06149b16884a1c969cfa26cb5a49d4ef7d
Author: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
Date:   Wed Jan 27 11:39:19 2021 +0100

    usb: dwc2: Fix endpoint direction check in ep_from_windex
    
    commit f670e9f9c8cac716c3506c6bac9e997b27ad441a upstream.
    
    dwc2_hsotg_process_req_status uses ep_from_windex() to retrieve
    the endpoint for the index provided in the wIndex request param.
    
    In a test-case with a rndis gadget running and sending a malformed
    packet to it like:
        dev.ctrl_transfer(
            0x82,      # bmRequestType
            0x00,       # bRequest
            0x0000,     # wValue
            0x0001,     # wIndex
            0x00       # wLength
        )
    it is possible to cause a crash:
    
    [  217.533022] dwc2 ff300000.usb: dwc2_hsotg_process_req_status: USB_REQ_GET_STATUS
    [  217.559003] Unable to handle kernel read from unreadable memory at virtual address 0000000000000088
    ...
    [  218.313189] Call trace:
    [  218.330217]  ep_from_windex+0x3c/0x54
    [  218.348565]  usb_gadget_giveback_request+0x10/0x20
    [  218.368056]  dwc2_hsotg_complete_request+0x144/0x184
    
    This happens because ep_from_windex wants to compare the endpoint
    direction even if index_to_ep() didn't return an endpoint due to
    the direction not matching.
    
    The fix is easy insofar that the actual direction check is already
    happening when calling index_to_ep() which will return NULL if there
    is no endpoint for the targeted direction, so the offending check
    can go away completely.
    
    Fixes: c6f5c050e2a7 ("usb: dwc2: gadget: add bi-directional endpoint support")
    Cc: stable@vger.kernel.org
    Reported-by: Gerhard Klostermeier <gerhard.klostermeier@syss.de>
    Signed-off-by: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
    Link: https://lore.kernel.org/r/20210127103919.58215-1-heiko@sntech.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a968ab0d2dd1af683603bf58fb0d65d302f679a
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Feb 1 21:47:20 2021 +0900

    usb: renesas_usbhs: Clear pipe running flag in usbhs_pkt_pop()
    
    commit 9917f0e3cdba7b9f1a23f70e3f70b1a106be54a8 upstream.
    
    Should clear the pipe running flag in usbhs_pkt_pop(). Otherwise,
    we cannot use this pipe after dequeue was called while the pipe was
    running.
    
    Fixes: 8355b2b3082d ("usb: renesas_usbhs: fix the behavior of some usbhs_pkt_handle")
    Reported-by: Tho Vu <tho.vu.wh@renesas.com>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1612183640-8898-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d1d959348c1c7a32cbb59370dec9bd8fc6dc1df
Author: Jeremy Figgins <kernel@jeremyfiggins.com>
Date:   Sat Jan 23 18:21:36 2021 -0600

    USB: usblp: don't call usb_set_interface if there's a single alt
    
    commit d8c6edfa3f4ee0d45d7ce5ef18d1245b78774b9d upstream.
    
    Some devices, such as the Winbond Electronics Corp. Virtual Com Port
    (Vendor=0416, ProdId=5011), lockup when usb_set_interface() or
    usb_clear_halt() are called. This device has only a single
    altsetting, so it should not be necessary to call usb_set_interface().
    
    Acked-by: Pete Zaitcev <zaitcev@redhat.com>
    Signed-off-by: Jeremy Figgins <kernel@jeremyfiggins.com>
    Link: https://lore.kernel.org/r/YAy9kJhM/rG8EQXC@watson
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 522567fe540d11de67c20c03d14eea8080047d2c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 28 12:33:42 2021 +0300

    USB: gadget: legacy: fix an error code in eth_bind()
    
    commit 3e1f4a2e1184ae6ad7f4caf682ced9554141a0f4 upstream.
    
    This code should return -ENOMEM if the allocation fails but it currently
    returns success.
    
    Fixes: 9b95236eebdb ("usb: gadget: ether: allocate and init otg descriptor by otg capabilities")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YBKE9rqVuJEOUWpW@mwanda
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e57d70c59bb7f6835ee47eb633e44efce4ab51b9
Author: Roman Gushchin <guro@fb.com>
Date:   Thu Feb 4 18:32:36 2021 -0800

    memblock: do not start bottom-up allocations with kernel_end
    
    [ Upstream commit 2dcb3964544177c51853a210b6ad400de78ef17d ]
    
    With kaslr the kernel image is placed at a random place, so starting the
    bottom-up allocation with the kernel_end can result in an allocation
    failure and a warning like this one:
    
      hugetlb_cma: reserve 2048 MiB, up to 2048 MiB per node
      ------------[ cut here ]------------
      memblock: bottom-up allocation failed, memory hotremove may be affected
      WARNING: CPU: 0 PID: 0 at mm/memblock.c:332 memblock_find_in_range_node+0x178/0x25a
      Modules linked in:
      CPU: 0 PID: 0 Comm: swapper Not tainted 5.10.0+ #1169
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
      RIP: 0010:memblock_find_in_range_node+0x178/0x25a
      Code: e9 6d ff ff ff 48 85 c0 0f 85 da 00 00 00 80 3d 9b 35 df 00 00 75 15 48 c7 c7 c0 75 59 88 c6 05 8b 35 df 00 01 e8 25 8a fa ff <0f> 0b 48 c7 44 24 20 ff ff ff ff 44 89 e6 44 89 ea 48 c7 c1 70 5c
      RSP: 0000:ffffffff88803d18 EFLAGS: 00010086 ORIG_RAX: 0000000000000000
      RAX: 0000000000000000 RBX: 0000000240000000 RCX: 00000000ffffdfff
      RDX: 00000000ffffdfff RSI: 00000000ffffffea RDI: 0000000000000046
      RBP: 0000000100000000 R08: ffffffff88922788 R09: 0000000000009ffb
      R10: 00000000ffffe000 R11: 3fffffffffffffff R12: 0000000000000000
      R13: 0000000000000000 R14: 0000000080000000 R15: 00000001fb42c000
      FS:  0000000000000000(0000) GS:ffffffff88f71000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffffa080fb401000 CR3: 00000001fa80a000 CR4: 00000000000406b0
      Call Trace:
        memblock_alloc_range_nid+0x8d/0x11e
        cma_declare_contiguous_nid+0x2c4/0x38c
        hugetlb_cma_reserve+0xdc/0x128
        flush_tlb_one_kernel+0xc/0x20
        native_set_fixmap+0x82/0xd0
        flat_get_apic_id+0x5/0x10
        register_lapic_address+0x8e/0x97
        setup_arch+0x8a5/0xc3f
        start_kernel+0x66/0x547
        load_ucode_bsp+0x4c/0xcd
        secondary_startup_64_no_verify+0xb0/0xbb
      random: get_random_bytes called from __warn+0xab/0x110 with crng_init=0
      ---[ end trace f151227d0b39be70 ]---
    
    At the same time, the kernel image is protected with memblock_reserve(),
    so we can just start searching at PAGE_SIZE.  In this case the bottom-up
    allocation has the same chances to success as a top-down allocation, so
    there is no reason to fallback in the case of a failure.  All together it
    simplifies the logic.
    
    Link: https://lkml.kernel.org/r/20201217201214.3414100-2-guro@fb.com
    Fixes: 8fabc623238e ("powerpc: Ensure that swiotlb buffer is allocated from low memory")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Wonhyuk Yang <vvghjk1234@gmail.com>
    Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e6dcaeadc0ea240721a53a83bd45fc36e3eee3c
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Wed Feb 3 01:20:25 2021 -0800

    nvmet-tcp: fix out-of-bounds access when receiving multiple h2cdata PDUs
    
    [ Upstream commit cb8563f5c735a042ea2dd7df1ad55ae06d63ffeb ]
    
    When the host sends multiple h2cdata PDUs, we keep track on
    the receive progress and calculate the scatterlist index and
    offsets.
    
    The issue is that sg_offset should only be kept for the first
    iov entry we map in the iovec as this is the difference between
    our cursor and the sg entry offset itself.
    
    In addition, the sg index was calculated wrong because we should
    not round up when dividing the command byte offset with PAG_SIZE.
    
    Fixes: 872d26a391da ("nvmet-tcp: add NVMe over TCP target driver")
    Reported-by: Narayan Ayalasomayajula <Narayan.Ayalasomayajula@wdc.com>
    Tested-by: Narayan Ayalasomayajula <Narayan.Ayalasomayajula@wdc.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c87b4b2c7bf50c644c215f078a57d39e1165c7
Author: Hermann Lauer <Hermann.Lauer@uni-heidelberg.de>
Date:   Thu Jan 28 12:18:42 2021 +0100

    ARM: dts: sun7i: a20: bananapro: Fix ethernet phy-mode
    
    [ Upstream commit a900cac3750b9f0b8f5ed0503d9c6359532f644d ]
    
    BPi Pro needs TX and RX delay for Gbit to work reliable and avoid high
    packet loss rates. The realtek phy driver overrides the settings of the
    pull ups for the delays, so fix this for BananaPro.
    
    Fix the phy-mode description to correctly reflect this so that the
    implementation doesn't reconfigure the delays incorrectly. This
    happened with commit bbc4d71d6354 ("net: phy: realtek: fix rtl8211e
    rx/tx delay config").
    
    Fixes: 10662a33dcd9 ("ARM: dts: sun7i: Add dts file for Bananapro board")
    Signed-off-by: Hermann Lauer <Hermann.Lauer@uni-heidelberg.de>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20210128111842.GA11919@lemon.iwr.uni-heidelberg.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d97a821b2e9cb4ee8bce9b8ba8937592cd9573f2
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Mon Feb 1 21:50:56 2021 +0100

    r8169: fix WoL on shutdown if CONFIG_DEBUG_SHIRQ is set
    
    [ Upstream commit cc9f07a838c4988ed244d0907cb71d54b85482a5 ]
    
    So far phy_disconnect() is called before free_irq(). If CONFIG_DEBUG_SHIRQ
    is set and interrupt is shared, then free_irq() creates an "artificial"
    interrupt by calling the interrupt handler. The "link change" flag is set
    in the interrupt status register, causing phylib to eventually call
    phy_suspend(). Because the net_device is detached from the PHY already,
    the PHY driver can't recognize that WoL is configured and powers down the
    PHY.
    
    Fixes: f1e911d5d0df ("r8169: add basic phylib support")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/fe732c2c-a473-9088-3974-df83cfbd6efd@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c545879e8080d168df45d0bccb2cb47be8a21d2d
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Mon Feb 1 11:35:39 2021 +0200

    net: mvpp2: TCAM entry enable should be written after SRAM data
    
    [ Upstream commit 43f4a20a1266d393840ce010f547486d14cc0071 ]
    
    Last TCAM data contains TCAM enable bit.
    It should be written after SRAM data before entry enabled.
    
    Fixes: 3f518509dedc ("ethernet: Add new driver for Marvell Armada 375 network unit")
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Link: https://lore.kernel.org/r/1612172139-28343-1-git-send-email-stefanc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf0507fb2073ee1635c34d66582ef6226fbf605c
Author: Xie He <xie.he.0141@gmail.com>
Date:   Sun Jan 31 21:57:06 2021 -0800

    net: lapb: Copy the skb before sending a packet
    
    [ Upstream commit 88c7a9fd9bdd3e453f04018920964c6f848a591a ]
    
    When sending a packet, we will prepend it with an LAPB header.
    This modifies the shared parts of a cloned skb, so we should copy the
    skb rather than just clone it, before we prepend the header.
    
    In "Documentation/networking/driver.rst" (the 2nd point), it states
    that drivers shouldn't modify the shared parts of a cloned skb when
    transmitting.
    
    The "dev_queue_xmit_nit" function in "net/core/dev.c", which is called
    when an skb is being sent, clones the skb and sents the clone to
    AF_PACKET sockets. Because the LAPB drivers first remove a 1-byte
    pseudo-header before handing over the skb to us, if we don't copy the
    skb before prepending the LAPB header, the first byte of the packets
    received on AF_PACKET sockets can be corrupted.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Link: https://lore.kernel.org/r/20210201055706.415842-1-xie.he.0141@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cef1d46add82d3edd79220465309fedc047dbd3
Author: Maor Gottlieb <maorg@nvidia.com>
Date:   Wed Jan 20 17:41:18 2021 +0200

    net/mlx5: Fix leak upon failure of rule creation
    
    [ Upstream commit a5bfe6b4675e0eefbd9418055b5cc6e89af27eb4 ]
    
    When creation of a new rule that requires allocation of an FTE fails,
    need to call to tree_put_node on the FTE in order to release its'
    resource.
    
    Fixes: cefc23554fc2 ("net/mlx5: Fix FTE cleanup")
    Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
    Reviewed-by: Alaa Hleihel <alaa@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67b7f73bbe3f0b838aed1fd44ea1b94e9afca226
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Sat Jan 23 00:22:23 2021 +0000

    i40e: Revert "i40e: don't report link up for a VF who hasn't enabled queues"
    
    [ Upstream commit f559a356043a55bab25a4c00505ea65c50a956fb ]
    
    This reverts commit 2ad1274fa35ace5c6360762ba48d33b63da2396c
    
    VF queues were not brought up when PF was brought up after being
    downed if the VF driver disabled VFs queues during PF down.
    This could happen in some older or external VF driver implementations.
    The problem was that PF driver used vf->queues_enabled as a condition
    to decide what link-state it would send out which caused the issue.
    
    Remove the check for vf->queues_enabled in the VF link notify.
    Now VF will always be notified of the current link status.
    Also remove the queues_enabled member from i40e_vf structure as it is
    not used anymore. Otherwise VNF implementation was broken and caused
    a link flap.
    
    The original commit was a workaround to avoid breaking existing VFs though
    it's really a fault of the VF code not the PF. The commit should be safe to
    revert as all of the VFs we know of have been fixed. Also, since we now
    know there is a related bug in the workaround, removing it is preferred.
    
    Fixes: 2ad1274fa35a ("i40e: don't report link up for a VF who hasn't enabled")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Arkadiusz Kubalewski <arkadiusz.kubalewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6380ef64b9eb9dcdac64a1789110c2f2389ecf69
Author: Kevin Lo <kevlo@kevlo.org>
Date:   Thu Jan 7 14:10:38 2021 +0800

    igc: check return value of ret_val in igc_config_fc_after_link_up
    
    [ Upstream commit b881145642ce0bbe2be521e0882e72a5cebe93b8 ]
    
    Check return value from ret_val to make error check actually work.
    
    Fixes: 4eb8080143a9 ("igc: Add setup link functionality")
    Signed-off-by: Kevin Lo <kevlo@kevlo.org>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec68581f7479fd2bc4d7bc1b117d53affb7cbba5
Author: Kevin Lo <kevlo@kevlo.org>
Date:   Sun Dec 20 22:18:19 2020 +0800

    igc: set the default return value to -IGC_ERR_NVM in igc_write_nvm_srwr
    
    [ Upstream commit ebc8d125062e7dccb7922b2190b097c20d88ad96 ]
    
    This patch sets the default return value to -IGC_ERR_NVM in
    igc_write_nvm_srwr. Without this change it wouldn't lead to a shadow RAM
    write EEWR timeout.
    
    Fixes: ab4056126813 ("igc: Add NVM support")
    Signed-off-by: Kevin Lo <kevlo@kevlo.org>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ce999efcaa7efc430d7fd024c1d7920af5c59d0
Author: Zyta Szpak <zr@semihalf.com>
Date:   Thu Jan 21 16:52:37 2021 +0100

    arm64: dts: ls1046a: fix dcfg address range
    
    [ Upstream commit aa880c6f3ee6dbd0d5ab02026a514ff8ea0a3328 ]
    
    Dcfg was overlapping with clockgen address space which resulted
    in failure in memory allocation for dcfg. According regs description
    dcfg size should not be bigger than 4KB.
    
    Signed-off-by: Zyta Szpak <zr@semihalf.com>
    Fixes: 8126d88162a5 ("arm64: dts: add QorIQ LS1046A SoC support")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68e798fa3c0e097ef19d6c3c25def58838a87306
Author: David Howells <dhowells@redhat.com>
Date:   Fri Jan 29 23:53:50 2021 +0000

    rxrpc: Fix deadlock around release of dst cached on udp tunnel
    
    [ Upstream commit 5399d52233c47905bbf97dcbaa2d7a9cc31670ba ]
    
    AF_RXRPC sockets use UDP ports in encap mode.  This causes socket and dst
    from an incoming packet to get stolen and attached to the UDP socket from
    whence it is leaked when that socket is closed.
    
    When a network namespace is removed, the wait for dst records to be cleaned
    up happens before the cleanup of the rxrpc and UDP socket, meaning that the
    wait never finishes.
    
    Fix this by moving the rxrpc (and, by dependence, the afs) private
    per-network namespace registrations to the device group rather than subsys
    group.  This allows cached rxrpc local endpoints to be cleared and their
    UDP sockets closed before we try waiting for the dst records.
    
    The symptom is that lines looking like the following:
    
            unregister_netdevice: waiting for lo to become free
    
    get emitted at regular intervals after running something like the
    referenced syzbot test.
    
    Thanks to Vadim for tracking this down and work out the fix.
    
    Reported-by: syzbot+df400f2f24a1677cd7e0@syzkaller.appspotmail.com
    Reported-by: Vadim Fedorenko <vfedorenko@novek.ru>
    Fixes: 5271953cad31 ("rxrpc: Use the UDP encap_rcv hook")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Vadim Fedorenko <vfedorenko@novek.ru>
    Link: https://lore.kernel.org/r/161196443016.3868642.5577440140646403533.stgit@warthog.procyon.org.uk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98650c3d0e33726292dc8fb3b23e129c68c88108
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Jan 7 22:15:21 2021 +0100

    um: virtio: free vu_dev only with the contained struct device
    
    [ Upstream commit f4172b084342fd3f9e38c10650ffe19eac30d8ce ]
    
    Since struct device is refcounted, we shouldn't free the vu_dev
    immediately when it's removed from the platform device, but only
    when the references actually all go away. Move the freeing to
    the release to accomplish that.
    
    Fixes: 5d38f324993f ("um: drivers: Add virtio vhost-user driver")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02531b5549ebf39d6f3c0602f083901211149355
Author: Loris Reiff <loris.reiff@liblor.ch>
Date:   Fri Jan 22 17:42:32 2021 +0100

    bpf, cgroup: Fix problematic bounds check
    
    [ Upstream commit f4a2da755a7e1f5d845c52aee71336cee289935a ]
    
    Since ctx.optlen is signed, a larger value than max_value could be
    passed, as it is later on used as unsigned, which causes a WARN_ON_ONCE
    in the copy_to_user.
    
    Fixes: 0d01da6afc54 ("bpf: implement getsockopt and setsockopt hooks")
    Signed-off-by: Loris Reiff <loris.reiff@liblor.ch>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/bpf/20210122164232.61770-2-loris.reiff@liblor.ch
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9146fffc5d2a3ec49906daf18d2e983d995b3521
Author: Loris Reiff <loris.reiff@liblor.ch>
Date:   Fri Jan 22 17:42:31 2021 +0100

    bpf, cgroup: Fix optlen WARN_ON_ONCE toctou
    
    [ Upstream commit bb8b81e396f7afbe7c50d789e2107512274d2a35 ]
    
    A toctou issue in `__cgroup_bpf_run_filter_getsockopt` can trigger a
    WARN_ON_ONCE in a check of `copy_from_user`.
    
    `*optlen` is checked to be non-negative in the individual getsockopt
    functions beforehand. Changing `*optlen` in a race to a negative value
    will result in a `copy_from_user(ctx.optval, optval, ctx.optlen)` with
    `ctx.optlen` being a negative integer.
    
    Fixes: 0d01da6afc54 ("bpf: implement getsockopt and setsockopt hooks")
    Signed-off-by: Loris Reiff <loris.reiff@liblor.ch>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/bpf/20210122164232.61770-1-loris.reiff@liblor.ch
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4921f81ce65aaaebaebd78c3fb154ce067b442ba
Author: Sandy Huang <hjc@rock-chips.com>
Date:   Fri Jan 8 12:06:27 2021 +0100

    arm64: dts: rockchip: fix vopl iommu irq on px30
    
    [ Upstream commit 656c648354e1561fa4f445b0b3252ec1d24e3951 ]
    
    The vop-mmu shares the irq with its matched vop but not the vpu.
    
    Fixes: 7053e06b1422 ("arm64: dts: rockchip: add core dtsi file for PX30 SoCs")
    Signed-off-by: Sandy Huang <hjc@rock-chips.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Tested-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Link: https://lore.kernel.org/r/20210108110627.3231226-1-heiko@sntech.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 831132b13f0d2e1ed089c064705e62749101f478
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu Dec 10 12:17:47 2020 +0300

    arm64: dts: amlogic: meson-g12: Set FL-adj property value
    
    [ Upstream commit 7386a559caa6414e74578172c2bc4e636d6bd0a0 ]
    
    In accordance with the DWC USB3 bindings the property is supposed to have
    uint32 type. It's erroneous from the DT schema and driver points of view
    to declare it as boolean. As Neil suggested set it to 0x20 so not break
    the platform and to make the dtbs checker happy.
    
    Link: https://lore.kernel.org/linux-usb/20201010224121.12672-16-Sergey.Semin@baikalelectronics.ru/
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: 9baf7d6be730 ("arm64: dts: meson: g12a: Add G12A USB nodes")
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Link: https://lore.kernel.org/r/20201210091756.18057-3-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 829bf438cb39fce39e73db53ae53b0743d3bfb0e
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Sun Jan 3 17:59:51 2021 -0800

    Input: i8042 - unbreak Pegatron C15B
    
    [ Upstream commit a3a9060ecad030e2c7903b2b258383d2c716b56c ]
    
    g++ reports
    
            drivers/input/serio/i8042-x86ia64io.h:225:3: error: ‘.matches’ designator used multiple times in the same initializer list
    
    C99 semantics is that last duplicated initialiser wins,
    so DMI entry gets overwritten.
    
    Fixes: a48491c65b51 ("Input: i8042 - add ByteSpeed touchpad to noloop table")
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Acked-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Link: https://lore.kernel.org/r/20201228072335.GA27766@localhost.localdomain
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d6e0a192e2ef76f9307d21eb44a8e0b5b4d7187
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Jan 2 12:59:40 2021 +0800

    arm64: dts: qcom: c630: keep both touchpad devices enabled
    
    [ Upstream commit a9164910c5ceed63551280a4a0b85d37ac2b19a5 ]
    
    Indicated by AML code in ACPI table, the touchpad in-use could be found
    on two possible slave addresses on &i2c3, i.e. hid@15 and hid@2c.  And
    which one is in-use can be determined by reading another address on the
    I2C bus.  Unfortunately, for DT boot, there is currently no support in
    firmware to make this check and patch DT accordingly.  This results in
    a non-functional touchpad on those C630 devices with hid@2c.
    
    As i2c-hid driver will stop probing the device if there is nothing on
    the slave address, we can actually keep both devices enabled in DT, and
    i2c-hid driver will only probe the existing one.  The only problem is
    that we cannot set up pinctrl in both device nodes, as two devices with
    the same pinctrl will cause pin conflict that makes the second device
    fail to probe.  Let's move the pinctrl state up to parent node to solve
    this problem.  As the pinctrl state of parent node is already defined in
    sdm845.dtsi, it ends up with overwriting pinctrl-0 with i2c3_hid_active
    state added in there.
    
    Fixes: 11d0e4f28156 ("arm64: dts: qcom: c630: Polish i2c-hid devices")
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Link: https://lore.kernel.org/r/20210102045940.26874-1-shawn.guo@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96dcfabef504637355e4fb1a9c1a50c9fc81ece5
Author: Christoph Schemmel <christoph.schemmel@gmail.com>
Date:   Wed Jan 27 20:58:46 2021 +0100

    USB: serial: option: Adding support for Cinterion MV31
    
    commit e478d6029dca9d8462f426aee0d32896ef64f10f upstream.
    
    Adding support for Cinterion device MV31 for enumeration with
    PID 0x00B3 and 0x00B7.
    
    usb-devices output for 0x00B3
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  6 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00b3 Rev=04.14
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion PID 0x00B3 USB Mobile Broadband
    S:  SerialNumber=b3246eed
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=cdc_wdm
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    usb-devices output for 0x00B7
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00b7 Rev=04.14
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion PID 0x00B3 USB Mobile Broadband
    S:  SerialNumber=b3246eed
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Christoph Schemmel <christoph.schemmel@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ad95c521fd5c93661d151f86b94f07e7a20f039
Author: Chenxin Jin <bg4akv@hotmail.com>
Date:   Wed Jan 13 16:59:05 2021 +0800

    USB: serial: cp210x: add new VID/PID for supporting Teraoka AD2000
    
    commit 43377df70480f82919032eb09832e9646a8a5efb upstream.
    
    Teraoka AD2000 uses the CP210x driver, but the chip VID/PID is
    customized with 0988/0578. We need the driver to support the new
    VID/PID.
    
    Signed-off-by: Chenxin Jin <bg4akv@hotmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfa820563c673a43210ce5a436bda9628377bbaf
Author: Pho Tran <Pho.Tran@silabs.com>
Date:   Mon Jan 25 09:26:54 2021 +0000

    USB: serial: cp210x: add pid/vid for WSDA-200-USB
    
    commit 3c4f6ecd93442f4376a58b38bb40ee0b8c46e0e6 upstream.
    
    Information pid/vid of WSDA-200-USB, Lord corporation company:
    vid: 199b
    pid: ba30
    
    Signed-off-by: Pho Tran <pho.tran@silabs.com>
    [ johan: amend comment with product name ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
