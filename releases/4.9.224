commit e4ebe4fae299b559e683eb31a2dc950507842bf7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed May 20 08:15:44 2020 +0200

    Linux 4.9.224

commit 3bead443ef3d8fd53c8e40c6888671da225494d9
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Tue Mar 17 00:07:18 2020 +0000

    Makefile: disallow data races on gcc-10 as well
    
    commit b1112139a103b4b1101d0d2d72931f2d33d8c978 upstream.
    
    gcc-10 will rename --param=allow-store-data-races=0
    to -fno-allow-store-data-races.
    
    The flag change happened at https://gcc.gnu.org/PR92046.
    
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Thomas Backlund <tmb@mageia.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 238b045a01313649a7b9b81dc097bd5b1ac531b2
Author: Jim Mattson <jmattson@google.com>
Date:   Mon May 11 15:56:16 2020 -0700

    KVM: x86: Fix off-by-one error in kvm_vcpu_ioctl_x86_setup_mce
    
    commit c4e0e4ab4cf3ec2b3f0b628ead108d677644ebd9 upstream.
    
    Bank_num is a one-based count of banks, not a zero-based index. It
    overflows the allocated space only when strictly greater than
    KVM_MAX_MCE_BANKS.
    
    Fixes: a9e38c3e01ad ("KVM: x86: Catch potential overrun in MCE setup")
    Signed-off-by: Jue Wang <juew@google.com>
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Peter Shier <pshier@google.com>
    Message-Id: <20200511225616.19557-1-jmattson@google.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03ec8f87b0798493f5be8cf20faf6af1e69114e8
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri May 8 11:59:18 2020 +0200

    ARM: dts: r8a7740: Add missing extal2 to CPG node
    
    commit e47cb97f153193d4b41ca8d48127da14513d54c7 upstream.
    
    The Clock Pulse Generator (CPG) device node lacks the extal2 clock.
    This may lead to a failure registering the "r" clock, or to a wrong
    parent for the "usb24s" clock, depending on MD_CK2 pin configuration and
    boot loader CPG_USBCKCR register configuration.
    
    This went unnoticed, as this does not affect the single upstream board
    configuration, which relies on the first clock input only.
    
    Fixes: d9ffd583bf345e2e ("ARM: shmobile: r8a7740: add SoC clocks to DTS")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Link: https://lore.kernel.org/r/20200508095918.6061-1-geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e4d34ed1ab9f71367921ba8bb28904b4c17553f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Apr 8 11:09:26 2020 +0200

    ARM: dts: r8a73a4: Add missing CMT1 interrupts
    
    commit 0f739fdfe9e5ce668bd6d3210f310df282321837 upstream.
    
    The R-Mobile APE6 Compare Match Timer 1 generates 8 interrupts, one for
    each channel, but currently only 1 is described.
    Fix this by adding the missing interrupts.
    
    Fixes: f7b65230019b9dac ("ARM: shmobile: r8a73a4: Add CMT1 node")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200408090926.25201-1-geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c4be4e03f4ca119b1c7a14e622e462abea4c144
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sun May 3 23:24:46 2020 +0800

    Revert "ALSA: hda/realtek: Fix pop noise on ALC225"
    
    commit f41224efcf8aafe80ea47ac870c5e32f3209ffc8 upstream.
    
    This reverts commit 3b36b13d5e69d6f51ff1c55d1b404a74646c9757.
    
    Enable power save node breaks some systems with ACL225. Revert the patch
    and use a platform specific quirk for the original issue isntead.
    
    Fixes: 3b36b13d5e69 ("ALSA: hda/realtek: Fix pop noise on ALC225")
    BugLink: https://bugs.launchpad.net/bugs/1875916
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20200503152449.22761-1-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25ac42422d887d0d937a6881325a53c63e989322
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu May 7 05:13:32 2020 +0000

    usb: gadget: legacy: fix error return code in cdc_bind()
    
    commit e8f7f9e3499a6d96f7f63a4818dc7d0f45a7783b upstream.
    
    If 'usb_otg_descriptor_alloc()' fails, we must return a
    negative error code -ENOMEM, not 0.
    
    Fixes: ab6796ae9833 ("usb: gadget: cdc2: allocate and init otg descriptor by otg capabilities")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 170cbe87348e0104f89eb0b26be9d3fe131bb0ef
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu May 7 05:13:23 2020 +0000

    usb: gadget: legacy: fix error return code in gncm_bind()
    
    commit e27d4b30b71c66986196d8a1eb93cba9f602904a upstream.
    
    If 'usb_otg_descriptor_alloc()' fails, we must return a
    negative error code -ENOMEM, not 0.
    
    Fixes: 1156e91dd7cc ("usb: gadget: ncm: allocate and init otg descriptor by otg capabilities")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa699ebae128e7ac68e3202cb3195017ee8fc7c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun May 3 12:47:07 2020 +0200

    usb: gadget: audio: Fix a missing error return value in audio_bind()
    
    commit 19b94c1f9c9a16d41a8de3ccbdb8536cf1aecdbf upstream.
    
    If 'usb_otg_descriptor_alloc()' fails, we must return an error code, not 0.
    
    Fixes: 56023ce0fd70 ("usb: gadget: audio: allocate and init otg descriptor by otg capabilities")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1e63dd3d6ba30fadcb51169593da6566c9e8bfd
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Apr 27 20:04:23 2020 +0200

    usb: gadget: net2272: Fix a memory leak in an error handling path in 'net2272_plat_probe()'
    
    commit ccaef7e6e354fb65758eaddd3eae8065a8b3e295 upstream.
    
    'dev' is allocated in 'net2272_probe_init()'. It must be freed in the error
    handling path, as already done in the remove function (i.e.
    'net2272_plat_remove()')
    
    Fixes: 90fccb529d24 ("usb: gadget: Gadget directory cleanup - group UDC drivers")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72d5fb7f67de5d8a2e5f12a98e66b10209aa4a65
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sat May 16 16:29:20 2020 -0500

    exec: Move would_dump into flush_old_exec
    
    commit f87d1c9559164294040e58f5e3b74a162bf7c6e8 upstream.
    
    I goofed when I added mm->user_ns support to would_dump.  I missed the
    fact that in the case of binfmt_loader, binfmt_em86, binfmt_misc, and
    binfmt_script bprm->file is reassigned.  Which made the move of
    would_dump from setup_new_exec to __do_execve_file before exec_binprm
    incorrect as it can result in would_dump running on the script instead
    of the interpreter of the script.
    
    The net result is that the code stopped making unreadable interpreters
    undumpable.  Which allows them to be ptraced and written to disk
    without special permissions.  Oops.
    
    The move was necessary because the call in set_new_exec was after
    bprm->mm was no longer valid.
    
    To correct this mistake move the misplaced would_dump from
    __do_execve_file into flos_old_exec, before exec_mmap is called.
    
    I tested and confirmed that without this fix I can attach with gdb to
    a script with an unreadable interpreter, and with this fix I can not.
    
    Cc: stable@vger.kernel.org
    Fixes: f84df2a6f268 ("exec: Ensure mm->user_ns contains the execed files")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b263060dba4096b74bf5dbf796c535aa85fb73c6
Author: Borislav Petkov <bp@suse.de>
Date:   Wed Apr 22 18:11:30 2020 +0200

    x86: Fix early boot crash on gcc-10, third try
    
    commit a9a3ed1eff3601b63aea4fb462d8b3b92c7c1e7e upstream.
    
    ... or the odyssey of trying to disable the stack protector for the
    function which generates the stack canary value.
    
    The whole story started with Sergei reporting a boot crash with a kernel
    built with gcc-10:
    
      Kernel panic — not syncing: stack-protector: Kernel stack is corrupted in: start_secondary
      CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.6.0-rc5—00235—gfffb08b37df9 #139
      Hardware name: Gigabyte Technology Co., Ltd. To be filled by O.E.M./H77M—D3H, BIOS F12 11/14/2013
      Call Trace:
        dump_stack
        panic
        ? start_secondary
        __stack_chk_fail
        start_secondary
        secondary_startup_64
      -—-[ end Kernel panic — not syncing: stack—protector: Kernel stack is corrupted in: start_secondary
    
    This happens because gcc-10 tail-call optimizes the last function call
    in start_secondary() - cpu_startup_entry() - and thus emits a stack
    canary check which fails because the canary value changes after the
    boot_init_stack_canary() call.
    
    To fix that, the initial attempt was to mark the one function which
    generates the stack canary with:
    
      __attribute__((optimize("-fno-stack-protector"))) ... start_secondary(void *unused)
    
    however, using the optimize attribute doesn't work cumulatively
    as the attribute does not add to but rather replaces previously
    supplied optimization options - roughly all -fxxx options.
    
    The key one among them being -fno-omit-frame-pointer and thus leading to
    not present frame pointer - frame pointer which the kernel needs.
    
    The next attempt to prevent compilers from tail-call optimizing
    the last function call cpu_startup_entry(), shy of carving out
    start_secondary() into a separate compilation unit and building it with
    -fno-stack-protector, was to add an empty asm("").
    
    This current solution was short and sweet, and reportedly, is supported
    by both compilers but we didn't get very far this time: future (LTO?)
    optimization passes could potentially eliminate this, which leads us
    to the third attempt: having an actual memory barrier there which the
    compiler cannot ignore or move around etc.
    
    That should hold for a long time, but hey we said that about the other
    two solutions too so...
    
    Reported-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Kalle Valo <kvalo@codeaurora.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200314164451.346497-1-slyfox@gentoo.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 115719aca84fd8f2bc51015cd994073615875f0d
Author: Fabio Estevam <festevam@gmail.com>
Date:   Fri Mar 27 10:36:24 2020 -0300

    ARM: dts: imx27-phytec-phycard-s-rdk: Fix the I2C1 pinctrl entries
    
    commit 0caf34350a25907515d929a9c77b9b206aac6d1e upstream.
    
    The I2C2 pins are already used and the following errors are seen:
    
    imx27-pinctrl 10015000.iomuxc: pin MX27_PAD_I2C2_SDA already requested by 10012000.i2c; cannot claim for 1001d000.i2c
    imx27-pinctrl 10015000.iomuxc: pin-69 (1001d000.i2c) status -22
    imx27-pinctrl 10015000.iomuxc: could not request pin 69 (MX27_PAD_I2C2_SDA) from group i2c2grp  on device 10015000.iomuxc
    imx-i2c 1001d000.i2c: Error applying setting, reverse things back
    imx-i2c: probe of 1001d000.i2c failed with error -22
    
    Fix it by adding the correct I2C1 IOMUX entries for the pinctrl_i2c1 group.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 61664d0b432a ("ARM: dts: imx27 phyCARD-S pinctrl")
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Stefan Riedmueller <s.riedmueller@phytec.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b92711aec195b0ca6f35170ee5d15a38c4d1e92
Author: Sriharsha Allenki <sallenki@codeaurora.org>
Date:   Thu May 14 14:04:31 2020 +0300

    usb: xhci: Fix NULL pointer dereference when enqueuing trbs from urb sg list
    
    commit 3c6f8cb92c9178fc0c66b580ea3df1fa3ac1155a upstream.
    
    On platforms with IOMMU enabled, multiple SGs can be coalesced into one
    by the IOMMU driver. In that case the SG list processing as part of the
    completion of a urb on a bulk endpoint can result into a NULL pointer
    dereference with the below stack dump.
    
    <6> Unable to handle kernel NULL pointer dereference at virtual address 0000000c
    <6> pgd = c0004000
    <6> [0000000c] *pgd=00000000
    <6> Internal error: Oops: 5 [#1] PREEMPT SMP ARM
    <2> PC is at xhci_queue_bulk_tx+0x454/0x80c
    <2> LR is at xhci_queue_bulk_tx+0x44c/0x80c
    <2> pc : [<c08907c4>]    lr : [<c08907bc>]    psr: 000000d3
    <2> sp : ca337c80  ip : 00000000  fp : ffffffff
    <2> r10: 00000000  r9 : 50037000  r8 : 00004000
    <2> r7 : 00000000  r6 : 00004000  r5 : 00000000  r4 : 00000000
    <2> r3 : 00000000  r2 : 00000082  r1 : c2c1a200  r0 : 00000000
    <2> Flags: nzcv  IRQs off  FIQs off  Mode SVC_32  ISA ARM  Segment none
    <2> Control: 10c0383d  Table: b412c06a  DAC: 00000051
    <6> Process usb-storage (pid: 5961, stack limit = 0xca336210)
    <snip>
    <2> [<c08907c4>] (xhci_queue_bulk_tx)
    <2> [<c0881b3c>] (xhci_urb_enqueue)
    <2> [<c0831068>] (usb_hcd_submit_urb)
    <2> [<c08350b4>] (usb_sg_wait)
    <2> [<c089f384>] (usb_stor_bulk_transfer_sglist)
    <2> [<c089f2c0>] (usb_stor_bulk_srb)
    <2> [<c089fe38>] (usb_stor_Bulk_transport)
    <2> [<c089f468>] (usb_stor_invoke_transport)
    <2> [<c08a11b4>] (usb_stor_control_thread)
    <2> [<c014a534>] (kthread)
    
    The above NULL pointer dereference is the result of block_len and the
    sent_len set to zero after the first SG of the list when IOMMU driver
    is enabled. Because of this the loop of processing the SGs has run
    more than num_sgs which resulted in a sg_next on the last SG of the
    list which has SG_END set.
    
    Fix this by check for the sg before any attributes of the sg are
    accessed.
    
    [modified reason for null pointer dereference in commit message subject -Mathias]
    Fixes: f9c589e142d04 ("xhci: TD-fragment, align the unsplittable case with a bounce buffer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200514110432.25564-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2056c78ee8abacaf71c89c999483183203e8441d
Author: Kyungtae Kim <kt0755@gmail.com>
Date:   Sun May 10 05:43:34 2020 +0000

    USB: gadget: fix illegal array access in binding with UDC
    
    commit 15753588bcd4bbffae1cca33c8ced5722477fe1f upstream.
    
    FuzzUSB (a variant of syzkaller) found an illegal array access
    using an incorrect index while binding a gadget with UDC.
    
    Reference: https://www.spinics.net/lists/linux-usb/msg194331.html
    
    This bug occurs when a size variable used for a buffer
    is misused to access its strcpy-ed buffer.
    Given a buffer along with its size variable (taken from user input),
    from which, a new buffer is created using kstrdup().
    Due to the original buffer containing 0 value in the middle,
    the size of the kstrdup-ed buffer becomes smaller than that of the original.
    So accessing the kstrdup-ed buffer with the same size variable
    triggers memory access violation.
    
    The fix makes sure no zero value in the buffer,
    by comparing the strlen() of the orignal buffer with the size variable,
    so that the access to the kstrdup-ed buffer is safe.
    
    BUG: KASAN: slab-out-of-bounds in gadget_dev_desc_UDC_store+0x1ba/0x200
    drivers/usb/gadget/configfs.c:266
    Read of size 1 at addr ffff88806a55dd7e by task syz-executor.0/17208
    
    CPU: 2 PID: 17208 Comm: syz-executor.0 Not tainted 5.6.8 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xce/0x128 lib/dump_stack.c:118
     print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374
     __kasan_report+0x131/0x1b0 mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:641
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     gadget_dev_desc_UDC_store+0x1ba/0x200 drivers/usb/gadget/configfs.c:266
     flush_write_buffer fs/configfs/file.c:251 [inline]
     configfs_write_file+0x2f1/0x4c0 fs/configfs/file.c:283
     __vfs_write+0x85/0x110 fs/read_write.c:494
     vfs_write+0x1cd/0x510 fs/read_write.c:558
     ksys_write+0x18a/0x220 fs/read_write.c:611
     __do_sys_write fs/read_write.c:623 [inline]
     __se_sys_write fs/read_write.c:620 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:620
     do_syscall_64+0x9e/0x510 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Signed-off-by: Kyungtae Kim <kt0755@gmail.com>
    Reported-and-tested-by: Kyungtae Kim <kt0755@gmail.com>
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200510054326.GA19198@pizza01
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 482a6f13fe708a2beed6e35a6ba1b45c62ddbd8f
Author: Jesus Ramos <jesus-ramos@live.com>
Date:   Mon Apr 27 06:21:39 2020 -0700

    ALSA: usb-audio: Add control message quirk delay for Kingston HyperX headset
    
    commit 073919e09ca445d4486968e3f851372ff44cf2b5 upstream.
    
    Kingston HyperX headset with 0951:16ad also needs the same quirk for
    delaying the frequency controls.
    
    Signed-off-by: Jesus Ramos <jesus-ramos@live.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/BY5PR19MB3634BA68C7CCA23D8DF428E796AF0@BY5PR19MB3634.namprd19.prod.outlook.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c13f1463d84b86bedb664e509838bef37e6ea317
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 7 13:44:56 2020 +0200

    ALSA: rawmidi: Fix racy buffer resize under concurrent accesses
    
    commit c1f6e3c818dd734c30f6a7eeebf232ba2cf3181d upstream.
    
    The rawmidi core allows user to resize the runtime buffer via ioctl,
    and this may lead to UAF when performed during concurrent reads or
    writes: the read/write functions unlock the runtime lock temporarily
    during copying form/to user-space, and that's the race window.
    
    This patch fixes the hole by introducing a reference counter for the
    runtime buffer read/write access and returns -EBUSY error when the
    resize is performed concurrently against read/write.
    
    Note that the ref count field is a simple integer instead of
    refcount_t here, since the all contexts accessing the buffer is
    basically protected with a spinlock, hence we need no expensive atomic
    ops.  Also, note that this busy check is needed only against read /
    write functions, and not in receive/transmit callbacks; the race can
    happen only at the spinlock hole mentioned in the above, while the
    whole function is protected for receive / transmit callbacks.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAFcO6XMWpUVK_yzzCpp8_XP7+=oUpQvuBeCbMffEDkpe8jWrfg@mail.gmail.com
    Link: https://lore.kernel.org/r/s5heerw3r5z.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 135c2b1c05d027ea20d9ecf359f8d7534569ffc1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Sep 3 15:16:43 2018 +0200

    ALSA: rawmidi: Initialize allocated buffers
    
    commit 5a7b44a8df822e0667fc76ed7130252523993bda upstream.
    
    syzbot reported the uninitialized value exposure in certain situations
    using virmidi loop.  It's likely a very small race at writing and
    reading, and the influence is almost negligible.  But it's safer to
    paper over this just by replacing the existing kvmalloc() with
    kvzalloc().
    
    Reported-by: syzbot+194dffdb8b22fc5d207a@syzkaller.appspotmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9568ef017c0b88c705f7d585b7f30d56f3f0ed87
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 14 18:05:33 2020 +0200

    ALSA: hda/realtek - Limit int mic boost for Thinkpad T530
    
    commit b590b38ca305d6d7902ec7c4f7e273e0069f3bcc upstream.
    
    Lenovo Thinkpad T530 seems to have a sensitive internal mic capture
    that needs to limit the mic boost like a few other Thinkpad models.
    Although we may change the quirk for ALC269_FIXUP_LENOVO_DOCK, this
    hits way too many other laptop models, so let's add a new fixup model
    that limits the internal mic boost on top of the existing quirk and
    apply to only T530.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1171293
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200514160533.10337-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1d65ba019d21cdbf3e2b83a0a7e0e8512a4b526
Author: Zefan Li <lizefan@huawei.com>
Date:   Sat May 9 11:32:10 2020 +0800

    netprio_cgroup: Fix unlimited memory leak of v2 cgroups
    
    [ Upstream commit 090e28b229af92dc5b40786ca673999d59e73056 ]
    
    If systemd is configured to use hybrid mode which enables the use of
    both cgroup v1 and v2, systemd will create new cgroup on both the default
    root (v2) and netprio_cgroup hierarchy (v1) for a new session and attach
    task to the two cgroups. If the task does some network thing then the v2
    cgroup can never be freed after the session exited.
    
    One of our machines ran into OOM due to this memory leak.
    
    In the scenario described above when sk_alloc() is called
    cgroup_sk_alloc() thought it's in v2 mode, so it stores
    the cgroup pointer in sk->sk_cgrp_data and increments
    the cgroup refcnt, but then sock_update_netprioidx()
    thought it's in v1 mode, so it stores netprioidx value
    in sk->sk_cgrp_data, so the cgroup refcnt will never be freed.
    
    Currently we do the mode switch when someone writes to the ifpriomap
    cgroup control file. The easiest fix is to also do the switch when
    a task is attached to a new cgroup.
    
    Fixes: bd1060a1d671 ("sock, cgroup: add sock->sk_cgroup")
    Reported-by: Yang Yingliang <yangyingliang@huawei.com>
    Tested-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Zefan Li <lizefan@huawei.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be38a13c9e4666cde185718cd32a6e9e83323112
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri May 8 19:28:34 2020 +0200

    net: ipv4: really enforce backoff for redirects
    
    [ Upstream commit 57644431a6c2faac5d754ebd35780cf43a531b1a ]
    
    In commit b406472b5ad7 ("net: ipv4: avoid mixed n_redirects and
    rate_tokens usage") I missed the fact that a 0 'rate_tokens' will
    bypass the backoff algorithm.
    
    Since rate_tokens is cleared after a redirect silence, and never
    incremented on redirects, if the host keeps receiving packets
    requiring redirect it will reply ignoring the backoff.
    
    Additionally, the 'rate_last' field will be updated with the
    cadence of the ingress packet requiring redirect. If that rate is
    high enough, that will prevent the host from generating any
    other kind of ICMP messages
    
    The check for a zero 'rate_tokens' value was likely a shortcut
    to avoid the more complex backoff algorithm after a redirect
    silence period. Address the issue checking for 'n_redirects'
    instead, which is incremented on successful redirect, and
    does not interfere with other ICMP replies.
    
    Fixes: b406472b5ad7 ("net: ipv4: avoid mixed n_redirects and rate_tokens usage")
    Reported-and-tested-by: Colin Walters <walters@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bac931d9325b2b224a533e671676784301988198
Author: Maciej Żenczykowski <maze@google.com>
Date:   Tue May 5 11:57:23 2020 -0700

    Revert "ipv6: add mtu lock check in __ip6_rt_update_pmtu"
    
    [ Upstream commit 09454fd0a4ce23cb3d8af65066c91a1bf27120dd ]
    
    This reverts commit 19bda36c4299ce3d7e5bce10bebe01764a655a6d:
    
    | ipv6: add mtu lock check in __ip6_rt_update_pmtu
    |
    | Prior to this patch, ipv6 didn't do mtu lock check in ip6_update_pmtu.
    | It leaded to that mtu lock doesn't really work when receiving the pkt
    | of ICMPV6_PKT_TOOBIG.
    |
    | This patch is to add mtu lock check in __ip6_rt_update_pmtu just as ipv4
    | did in __ip_rt_update_pmtu.
    
    The above reasoning is incorrect.  IPv6 *requires* icmp based pmtu to work.
    There's already a comment to this effect elsewhere in the kernel:
    
      $ git grep -p -B1 -A3 'RTAX_MTU lock'
      net/ipv6/route.c=4813=
    
      static int rt6_mtu_change_route(struct fib6_info *f6i, void *p_arg)
      ...
        /* In IPv6 pmtu discovery is not optional,
           so that RTAX_MTU lock cannot disable it.
           We still use this lock to block changes
           caused by addrconf/ndisc.
        */
    
    This reverts to the pre-4.9 behaviour.
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Fixes: 19bda36c4299 ("ipv6: add mtu lock check in __ip6_rt_update_pmtu")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9232577ef3e10775eefe7f2689cbf851c8b13d80
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue May 12 14:43:14 2020 +0200

    netlabel: cope with NULL catmap
    
    [ Upstream commit eead1c2ea2509fd754c6da893a94f0e69e83ebe4 ]
    
    The cipso and calipso code can set the MLS_CAT attribute on
    successful parsing, even if the corresponding catmap has
    not been allocated, as per current configuration and external
    input.
    
    Later, selinux code tries to access the catmap if the MLS_CAT flag
    is present via netlbl_catmap_getlong(). That may cause null ptr
    dereference while processing incoming network traffic.
    
    Address the issue setting the MLS_CAT flag only if the catmap is
    really allocated. Additionally let netlbl_catmap_getlong() cope
    with NULL catmap.
    
    Reported-by: Matthew Sheets <matthew.sheets@gd-ms.com>
    Fixes: 4b8feff251da ("netlabel: fix the horribly broken catmap functions")
    Fixes: ceba1832b1b2 ("calipso: Set the calipso socket label to match the secattr.")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74af5e3ecf14b11c822870d9235d51d383401f9e
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu May 7 12:19:03 2020 -0700

    net: fix a potential recursive NETDEV_FEAT_CHANGE
    
    [ Upstream commit dd912306ff008891c82cd9f63e8181e47a9cb2fb ]
    
    syzbot managed to trigger a recursive NETDEV_FEAT_CHANGE event
    between bonding master and slave. I managed to find a reproducer
    for this:
    
      ip li set bond0 up
      ifenslave bond0 eth0
      brctl addbr br0
      ethtool -K eth0 lro off
      brctl addif br0 bond0
      ip li set br0 up
    
    When a NETDEV_FEAT_CHANGE event is triggered on a bonding slave,
    it captures this and calls bond_compute_features() to fixup its
    master's and other slaves' features. However, when syncing with
    its lower devices by netdev_sync_lower_features() this event is
    triggered again on slaves when the LRO feature fails to change,
    so it goes back and forth recursively until the kernel stack is
    exhausted.
    
    Commit 17b85d29e82c intentionally lets __netdev_update_features()
    return -1 for such a failure case, so we have to just rely on
    the existing check inside netdev_sync_lower_features() and skip
    NETDEV_FEAT_CHANGE event only for this specific failure case.
    
    Fixes: fd867d51f889 ("net/core: generic support for disabling netdev features down stack")
    Reported-by: syzbot+e73ceacfd8560cc8a3ca@syzkaller.appspotmail.com
    Reported-by: syzbot+c2fb6f9ddcea95ba49b5@syzkaller.appspotmail.com
    Cc: Jarod Wilson <jarod@redhat.com>
    Cc: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Jann Horn <jannh@google.com>
    Reviewed-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9799d957182c8681943a3734a66e123f62a3a2f8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 15:45:21 2020 -0700

    gcc-10: disable 'restrict' warning for now
    
    commit adc71920969870dfa54e8f40dac8616284832d02 upstream.
    
    gcc-10 now warns about passing aliasing pointers to functions that take
    restricted pointers.
    
    That's actually a great warning, and if we ever start using 'restrict'
    in the kernel, it might be quite useful.  But right now we don't, and it
    turns out that the only thing this warns about is an idiom where we have
    declared a few functions to be "printf-like" (which seems to make gcc
    pick up the restricted pointer thing), and then we print to the same
    buffer that we also use as an input.
    
    And people do that as an odd concatenation pattern, with code like this:
    
        #define sysfs_show_gen_prop(buffer, fmt, ...) \
            snprintf(buffer, PAGE_SIZE, "%s"fmt, buffer, __VA_ARGS__)
    
    where we have 'buffer' as both the destination of the final result, and
    as the initial argument.
    
    Yes, it's a bit questionable.  And outside of the kernel, people do have
    standard declarations like
    
        int snprintf( char *restrict buffer, size_t bufsz,
                      const char *restrict format, ... );
    
    where that output buffer is marked as a restrict pointer that cannot
    alias with any other arguments.
    
    But in the context of the kernel, that 'use snprintf() to concatenate to
    the end result' does work, and the pattern shows up in multiple places.
    And we have not marked our own version of snprintf() as taking restrict
    pointers, so the warning is incorrect for now, and gcc picks it up on
    its own.
    
    If we do start using 'restrict' in the kernel (and it might be a good
    idea if people find places where it matters), we'll need to figure out
    how to avoid this issue for snprintf and friends.  But in the meantime,
    this warning is not useful.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01d51bb3125103be4d0991d3a7e3f7feb36bf3c2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 15:40:52 2020 -0700

    gcc-10: disable 'stringop-overflow' warning for now
    
    commit 5a76021c2eff7fcf2f0918a08fd8a37ce7922921 upstream.
    
    This is the final array bounds warning removal for gcc-10 for now.
    
    Again, the warning is good, and we should re-enable all these warnings
    when we have converted all the legacy array declaration cases to
    flexible arrays. But in the meantime, it's just noise.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55e8e4b87b7ba5d52586128048d3b625319a5b41
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 14:52:44 2020 -0700

    gcc-10: disable 'array-bounds' warning for now
    
    commit 44720996e2d79e47d508b0abe99b931a726a3197 upstream.
    
    This is another fine warning, related to the 'zero-length-bounds' one,
    but hitting the same historical code in the kernel.
    
    Because C didn't historically support flexible array members, we have
    code that instead uses a one-sized array, the same way we have cases of
    zero-sized arrays.
    
    The one-sized arrays come from either not wanting to use the gcc
    zero-sized array extension, or from a slight convenience-feature, where
    particularly for strings, the size of the structure now includes the
    allocation for the final NUL character.
    
    So with a "char name[1];" at the end of a structure, you can do things
    like
    
           v = my_malloc(sizeof(struct vendor) + strlen(name));
    
    and avoid the "+1" for the terminator.
    
    Yes, the modern way to do that is with a flexible array, and using
    'offsetof()' instead of 'sizeof()', and adding the "+1" by hand.  That
    also technically gets the size "more correct" in that it avoids any
    alignment (and thus padding) issues, but this is another long-term
    cleanup thing that will not happen for 5.7.
    
    So disable the warning for now, even though it's potentially quite
    useful.  Having a slew of warnings that then hide more urgent new issues
    is not an improvement.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 207ad349e2321c5317a07e96492e0867737e160e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 14:30:29 2020 -0700

    gcc-10: disable 'zero-length-bounds' warning for now
    
    commit 5c45de21a2223fe46cf9488c99a7fbcf01527670 upstream.
    
    This is a fine warning, but we still have a number of zero-length arrays
    in the kernel that come from the traditional gcc extension.  Yes, they
    are getting converted to flexible arrays, but in the meantime the gcc-10
    warning about zero-length bounds is very verbose, and is hiding other
    issues.
    
    I missed one actual build failure because it was hidden among hundreds
    of lines of warning.  Thankfully I caught it on the second go before
    pushing things out, but it convinced me that I really need to disable
    the new warnings for now.
    
    We'll hopefully be all done with our conversion to flexible arrays in
    the not too distant future, and we can then re-enable this warning.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 414eae103d3ed66e18d929d4fac4dd3ddda4c2bd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 15:58:04 2020 -0700

    gcc-10: avoid shadowing standard library 'free()' in crypto
    
    commit 1a263ae60b04de959d9ce9caea4889385eefcc7b upstream.
    
    gcc-10 has started warning about conflicting types for a few new
    built-in functions, particularly 'free()'.
    
    This results in warnings like:
    
       crypto/xts.c:325:13: warning: conflicting types for built-in function ‘free’; expected ‘void(void *)’ [-Wbuiltin-declaration-mismatch]
    
    because the crypto layer had its local freeing functions called
    'free()'.
    
    Gcc-10 is in the wrong here, since that function is marked 'static', and
    thus there is no chance of confusion with any standard library function
    namespace.
    
    But the simplest thing to do is to just use a different name here, and
    avoid this gcc mis-feature.
    
    [ Side note: gcc knowing about 'free()' is in itself not the
      mis-feature: the semantics of 'free()' are special enough that a
      compiler can validly do special things when seeing it.
    
      So the mis-feature here is that gcc thinks that 'free()' is some
      restricted name, and you can't shadow it as a local static function.
    
      Making the special 'free()' semantics be a function attribute rather
      than tied to the name would be the much better model ]
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0101213f67193e4bebf92336d3f149bee0dc7fa7
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Mar 2 15:08:38 2018 -0800

    net: phy: micrel: Use strlcpy() for ethtool::get_strings
    
    commit 55f53567afe5f0cd2fd9e006b174c08c31c466f8 upstream.
    
    Our statistics strings are allocated at initialization without being
    bound to a specific size, yet, we would copy ETH_GSTRING_LEN bytes using
    memcpy() which would create out of bounds accesses, this was flagged by
    KASAN. Replace this with strlcpy() to make sure we are bound the source
    buffer size and we also always NUL-terminate strings.
    
    Fixes: 2b2427d06426 ("phy: micrel: Add ethtool statistics counters")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce9f411be7f9639fb109528c3e661a0a4a867090
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 13:57:10 2020 -0700

    Stop the ad-hoc games with -Wno-maybe-initialized
    
    commit 78a5255ffb6a1af189a83e493d916ba1c54d8c75 upstream.
    
    We have some rather random rules about when we accept the
    "maybe-initialized" warnings, and when we don't.
    
    For example, we consider it unreliable for gcc versions < 4.9, but also
    if -O3 is enabled, or if optimizing for size.  And then various kernel
    config options disabled it, because they know that they trigger that
    warning by confusing gcc sufficiently (ie PROFILE_ALL_BRANCHES).
    
    And now gcc-10 seems to be introducing a lot of those warnings too, so
    it falls under the same heading as 4.9 did.
    
    At the same time, we have a very straightforward way to _enable_ that
    warning when wanted: use "W=2" to enable more warnings.
    
    So stop playing these ad-hoc games, and just disable that warning by
    default, with the known and straight-forward "if you want to work on the
    extra compiler warnings, use W=123".
    
    Would it be great to have code that is always so obvious that it never
    confuses the compiler whether a variable is used initialized or not?
    Yes, it would.  In a perfect world, the compilers would be smarter, and
    our source code would be simpler.
    
    That's currently not the world we live in, though.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0138cf0fda7cb2a7bd4285e51749423ff06edd0
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Feb 21 13:13:38 2019 +0900

    kbuild: compute false-positive -Wmaybe-uninitialized cases in Kconfig
    
    commit b303c6df80c9f8f13785aa83a0471fca7e38b24d upstream.
    
    Since -Wmaybe-uninitialized was introduced by GCC 4.7, we have patched
    various false positives:
    
     - commit e74fc973b6e5 ("Turn off -Wmaybe-uninitialized when building
       with -Os") turned off this option for -Os.
    
     - commit 815eb71e7149 ("Kbuild: disable 'maybe-uninitialized' warning
       for CONFIG_PROFILE_ALL_BRANCHES") turned off this option for
       CONFIG_PROFILE_ALL_BRANCHES
    
     - commit a76bcf557ef4 ("Kbuild: enable -Wmaybe-uninitialized warning
       for "make W=1"") turned off this option for GCC < 4.9
       Arnd provided more explanation in https://lkml.org/lkml/2017/3/14/903
    
    I think this looks better by shifting the logic from Makefile to Kconfig.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/350
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ba9126d709e5e7921413b7177ce3ecc98185670
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 4 09:16:37 2020 -0700

    gcc-10 warnings: fix low-hanging fruit
    
    commit 9d82973e032e246ff5663c9805fbb5407ae932e3 upstream.
    
    Due to a bug-report that was compiler-dependent, I updated one of my
    machines to gcc-10.  That shows a lot of new warnings.  Happily they
    seem to be mostly the valid kind, but it's going to cause a round of
    churn for getting rid of them..
    
    This is the really low-hanging fruit of removing a couple of zero-sized
    arrays in some core code.  We have had a round of these patches before,
    and we'll have many more coming, and there is nothing special about
    these except that they were particularly trivial, and triggered more
    warnings than most.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19427360c49376620da3d9147ea5daff444c32a8
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 14 12:10:50 2020 -0300

    pnp: Use list_for_each_entry() instead of open coding
    
    commit 01b2bafe57b19d9119413f138765ef57990921ce upstream.
    
    Aside from good practice, this avoids a warning from gcc 10:
    
    ./include/linux/kernel.h:997:3: warning: array subscript -31 is outside array bounds of ‘struct list_head[1]’ [-Warray-bounds]
      997 |  ((type *)(__mptr - offsetof(type, member))); })
          |  ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ./include/linux/list.h:493:2: note: in expansion of macro ‘container_of’
      493 |  container_of(ptr, type, member)
          |  ^~~~~~~~~~~~
    ./include/linux/pnp.h:275:30: note: in expansion of macro ‘list_entry’
      275 | #define global_to_pnp_dev(n) list_entry(n, struct pnp_dev, global_list)
          |                              ^~~~~~~~~~
    ./include/linux/pnp.h:281:11: note: in expansion of macro ‘global_to_pnp_dev’
      281 |  (dev) != global_to_pnp_dev(&pnp_global); \
          |           ^~~~~~~~~~~~~~~~~
    arch/x86/kernel/rtc.c:189:2: note: in expansion of macro ‘pnp_for_each_dev’
      189 |  pnp_for_each_dev(dev) {
    
    Because the common code doesn't cast the starting list_head to the
    containing struct.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    [ rjw: Whitespace adjustments ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1273b63716574e8b60ed51931c905542bebf813
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Sun Apr 26 10:59:21 2020 +0300

    IB/mlx4: Test return value of calls to ib_get_cached_pkey
    
    [ Upstream commit 6693ca95bd4330a0ad7326967e1f9bcedd6b0800 ]
    
    In the mlx4_ib_post_send() flow, some functions call ib_get_cached_pkey()
    without checking its return value. If ib_get_cached_pkey() returns an
    error code, these functions should return failure.
    
    Fixes: 1ffeb2eb8be9 ("IB/mlx4: SR-IOV IB context objects and proxy/tunnel SQP support")
    Fixes: 225c7b1feef1 ("IB/mlx4: Add a driver Mellanox ConnectX InfiniBand adapters")
    Fixes: e622f2f4ad21 ("IB: split struct ib_send_wr")
    Link: https://lore.kernel.org/r/20200426075921.130074-1-leon@kernel.org
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bdea735b1b10b312a280d797f3290c9f8f247af
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Apr 30 23:30:48 2020 +0200

    netfilter: conntrack: avoid gcc-10 zero-length-bounds warning
    
    [ Upstream commit 2c407aca64977ede9b9f35158e919773cae2082f ]
    
    gcc-10 warns around a suspicious access to an empty struct member:
    
    net/netfilter/nf_conntrack_core.c: In function '__nf_conntrack_alloc':
    net/netfilter/nf_conntrack_core.c:1522:9: warning: array subscript 0 is outside the bounds of an interior zero-length array 'u8[0]' {aka 'unsigned char[0]'} [-Wzero-length-bounds]
     1522 |  memset(&ct->__nfct_init_offset[0], 0,
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from net/netfilter/nf_conntrack_core.c:37:
    include/net/netfilter/nf_conntrack.h:90:5: note: while referencing '__nfct_init_offset'
       90 |  u8 __nfct_init_offset[0];
          |     ^~~~~~~~~~~~~~~~~~
    
    The code is correct but a bit unusual. Rework it slightly in a way that
    does not trigger the warning, using an empty struct instead of an empty
    array. There are probably more elegant ways to do this, but this is the
    smallest change.
    
    Fixes: c41884ce0562 ("netfilter: conntrack: avoid zeroing timer")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c449481dc9eb52f5aa338246b6204ed1d03a0c7e
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 22 12:22:11 2020 +0300

    i40iw: Fix error handling in i40iw_manage_arp_cache()
    
    [ Upstream commit 37e31d2d26a4124506c24e95434e9baf3405a23a ]
    
    The i40iw_arp_table() function can return -EOVERFLOW if
    i40iw_alloc_resource() fails so we can't just test for "== -1".
    
    Fixes: 4e9042e647ff ("i40iw: add hw and utils files")
    Link: https://lore.kernel.org/r/20200422092211.GA195357@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e965c55d4ef594ff2426d204fbd58da0285be8db
Author: Grace Kao <grace.kao@intel.com>
Date:   Fri Apr 17 12:11:54 2020 +0800

    pinctrl: cherryview: Add missing spinlock usage in chv_gpio_irq_handler
    
    [ Upstream commit 69388e15f5078c961b9e5319e22baea4c57deff1 ]
    
    According to Braswell NDA Specification Update (#557593),
    concurrent read accesses may result in returning 0xffffffff and write
    instructions may be dropped. We have an established format for the
    commit references, i.e.
    cdca06e4e859 ("pinctrl: baytrail: Add missing spinlock usage in
    byt_gpio_irq_handler")
    
    Fixes: 0bd50d719b00 ("pinctrl: cherryview: prevent concurrent access to GPIO controllers")
    Signed-off-by: Grace Kao <grace.kao@intel.com>
    Reported-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27634d8333a74aaf904a89575eac05503dbaf497
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Wed May 13 17:50:48 2020 -0700

    ipc/util.c: sysvipc_find_ipc() incorrectly updates position index
    
    [ Upstream commit 5e698222c70257d13ae0816720dde57c56f81e15 ]
    
    Commit 89163f93c6f9 ("ipc/util.c: sysvipc_find_ipc() should increase
    position index") is causing this bug (seen on 5.6.8):
    
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
    
       # ipcmk -Q
       Message queue id: 0
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x82db8127 0          root       644        0            0
    
       # ipcmk -Q
       Message queue id: 1
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x82db8127 0          root       644        0            0
       0x76d1fb2a 1          root       644        0            0
    
       # ipcrm -q 0
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x76d1fb2a 1          root       644        0            0
       0x76d1fb2a 1          root       644        0            0
    
       # ipcmk -Q
       Message queue id: 2
       # ipcrm -q 2
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x76d1fb2a 1          root       644        0            0
       0x76d1fb2a 1          root       644        0            0
    
       # ipcmk -Q
       Message queue id: 3
       # ipcrm -q 1
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x7c982867 3          root       644        0            0
       0x7c982867 3          root       644        0            0
       0x7c982867 3          root       644        0            0
       0x7c982867 3          root       644        0            0
    
    Whenever an IPC item with a low id is deleted, the items with higher ids
    are duplicated, as if filling a hole.
    
    new_pos should jump through hole of unused ids, pos can be updated
    inside "for" cycle.
    
    Fixes: 89163f93c6f9 ("ipc/util.c: sysvipc_find_ipc() should increase position index")
    Reported-by: Andreas Schwab <schwab@suse.de>
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/4921fe9b-9385-a2b4-1dc4-1099be6d2e39@virtuozzo.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5c0c5434e8b2e305e41080b8bd261547d71a700
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Wed Apr 29 12:34:36 2020 +0300

    drm/qxl: lost qxl_bo_kunmap_atomic_page in qxl_image_init_helper()
    
    [ Upstream commit 5b5703dbafae74adfbe298a56a81694172caf5e6 ]
    
    v2: removed TODO reminder
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/a4e0ae09-a73c-1c62-04ef-3f990d41bea9@virtuozzo.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb577c20b991c2c16c6172d82f0e12d2e4658eef
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Apr 28 15:38:36 2020 +0300

    ALSA: hda/hdmi: fix race in monitor detection during probe
    
    [ Upstream commit ca76282b6faffc83601c25bd2a95f635c03503ef ]
    
    A race exists between build_pcms() and build_controls() phases of codec
    setup. Build_pcms() sets up notifier for jack events. If a monitor event
    is received before build_controls() is run, the initial jack state is
    lost and never reported via mixer controls.
    
    The problem can be hit at least with SOF as the controller driver. SOF
    calls snd_hda_codec_build_controls() in its workqueue-based probe and
    this can be delayed enough to hit the race condition.
    
    Fix the issue by invalidating the per-pin ELD information when
    build_controls() is called. The existing call to hdmi_present_sense()
    will update the ELD contents. This ensures initial monitor state is
    correctly reflected via mixer controls.
    
    BugLink: https://github.com/thesofproject/linux/issues/1687
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200428123836.24512-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f53659a06780eec15454798ed20571f0ec23fe0
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Apr 19 18:49:09 2020 +0200

    dmaengine: mmp_tdma: Reset channel error on release
    
    [ Upstream commit 0c89446379218698189a47871336cb30286a7197 ]
    
    When a channel configuration fails, the status of the channel is set to
    DEV_ERROR so that an attempt to submit it fails. However, this status
    sticks until the heat end of the universe, making it impossible to
    recover from the error.
    
    Let's reset it when the channel is released so that further use of the
    channel with correct configuration is not impacted.
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Link: https://lore.kernel.org/r/20200419164912.670973-5-lkundrak@v3.sk
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87b49639e11c13dac42d3a2fdd85fc0a0d35143c
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Thu Apr 16 11:53:35 2020 +0530

    dmaengine: pch_dma.c: Avoid data race between probe and irq handler
    
    [ Upstream commit 2e45676a4d33af47259fa186ea039122ce263ba9 ]
    
    pd->dma.dev is read in irq handler pd_irq().
    However, it is set to pdev->dev after request_irq().
    Therefore, set pd->dma.dev to pdev->dev before request_irq() to
    avoid data race between pch_dma_probe() and pd_irq().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Link: https://lore.kernel.org/r/20200416062335.29223-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0fff9a77e8aa241f9ad7270e6bf8f1502dd3a19
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Sat Jul 6 06:52:46 2019 +1000

    cifs: Fix a race condition with cifs_echo_request
    
    [ Upstream commit f2caf901c1b7ce65f9e6aef4217e3241039db768 ]
    
    There is a race condition with how we send (or supress and don't send)
    smb echos that will cause the client to incorrectly think the
    server is unresponsive and thus needs to be reconnected.
    
    Summary of the race condition:
     1) Daisy chaining scheduling creates a gap.
     2) If traffic comes unfortunate shortly after
        the last echo, the planned echo is suppressed.
     3) Due to the gap, the next echo transmission is delayed
        until after the timeout, which is set hard to twice
        the echo interval.
    
    This is fixed by changing the timeouts from 2 to three times the echo interval.
    
    Detailed description of the bug: https://lutz.donnerhacke.de/eng/Blog/Groundhog-Day-with-SMB-remount
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79d25ee27b5dafa06bd967f10217da178e220a9e
Author: Samuel Cabrero <scabrero@suse.de>
Date:   Tue Jul 11 12:44:39 2017 +0200

    cifs: Check for timeout on Negotiate stage
    
    [ Upstream commit 76e752701a8af4404bbd9c45723f7cbd6e4a251e ]
    
    Some servers seem to accept connections while booting but never send
    the SMBNegotiate response neither close the connection, causing all
    processes accessing the share hang on uninterruptible sleep state.
    
    This happens when the cifs_demultiplex_thread detects the server is
    unresponsive so releases the socket and start trying to reconnect.
    At some point, the faulty server will accept the socket and the TCP
    status will be set to NeedNegotiate. The first issued command accessing
    the share will start the negotiation (pid 5828 below), but the response
    will never arrive so other commands will be blocked waiting on the mutex
    (pid 55352).
    
    This patch checks for unresponsive servers also on the negotiate stage
    releasing the socket and reconnecting if the response is not received
    and checking again the tcp state when the mutex is acquired.
    
    PID: 55352  TASK: ffff880fd6cc02c0  CPU: 0   COMMAND: "ls"
     #0 [ffff880fd9add9f0] schedule at ffffffff81467eb9
     #1 [ffff880fd9addb38] __mutex_lock_slowpath at ffffffff81468fe0
     #2 [ffff880fd9addba8] mutex_lock at ffffffff81468b1a
     #3 [ffff880fd9addbc0] cifs_reconnect_tcon at ffffffffa042f905 [cifs]
     #4 [ffff880fd9addc60] smb_init at ffffffffa042faeb [cifs]
     #5 [ffff880fd9addca0] CIFSSMBQPathInfo at ffffffffa04360b5 [cifs]
     ....
    
    Which is waiting a mutex owned by:
    
    PID: 5828   TASK: ffff880fcc55e400  CPU: 0   COMMAND: "xxxx"
     #0 [ffff880fbfdc19b8] schedule at ffffffff81467eb9
     #1 [ffff880fbfdc1b00] wait_for_response at ffffffffa044f96d [cifs]
     #2 [ffff880fbfdc1b60] SendReceive at ffffffffa04505ce [cifs]
     #3 [ffff880fbfdc1bb0] CIFSSMBNegotiate at ffffffffa0438d79 [cifs]
     #4 [ffff880fbfdc1c50] cifs_negotiate_protocol at ffffffffa043b383 [cifs]
     #5 [ffff880fbfdc1c80] cifs_reconnect_tcon at ffffffffa042f911 [cifs]
     #6 [ffff880fbfdc1d20] smb_init at ffffffffa042faeb [cifs]
     #7 [ffff880fbfdc1d60] CIFSSMBQFSInfo at ffffffffa0434eb0 [cifs]
     ....
    
    Signed-off-by: Samuel Cabrero <scabrero@suse.de>
    Reviewed-by: Aurélien Aptel <aaptel@suse.de>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <smfrench@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15029156d7ac0ae4ec80f577bb25f68fe07c8af1
Author: wuxu.wu <wuxu.wu@huawei.com>
Date:   Wed Jan 1 11:39:41 2020 +0800

    spi: spi-dw: Add lock protect dw_spi rx/tx to prevent concurrent calls
    
    commit 19b61392c5a852b4e8a0bf35aecb969983c5932d upstream.
    
    dw_spi_irq() and dw_spi_transfer_one concurrent calls.
    
    I find a panic in dw_writer(): txw = *(u8 *)(dws->tx), when dw->tx==null,
    dw->len==4, and dw->tx_end==1.
    
    When tpm driver's message overtime dw_spi_irq() and dw_spi_transfer_one
    may concurrent visit dw_spi, so I think dw_spi structure lack of protection.
    
    Otherwise dw_spi_transfer_one set dw rx/tx buffer and then open irq,
    store dw rx/tx instructions and other cores handle irq load dw rx/tx
    instructions may out of order.
    
            [ 1025.321302] Call trace:
            ...
            [ 1025.321319]  __crash_kexec+0x98/0x148
            [ 1025.321323]  panic+0x17c/0x314
            [ 1025.321329]  die+0x29c/0x2e8
            [ 1025.321334]  die_kernel_fault+0x68/0x78
            [ 1025.321337]  __do_kernel_fault+0x90/0xb0
            [ 1025.321346]  do_page_fault+0x88/0x500
            [ 1025.321347]  do_translation_fault+0xa8/0xb8
            [ 1025.321349]  do_mem_abort+0x68/0x118
            [ 1025.321351]  el1_da+0x20/0x8c
            [ 1025.321362]  dw_writer+0xc8/0xd0
            [ 1025.321364]  interrupt_transfer+0x60/0x110
            [ 1025.321365]  dw_spi_irq+0x48/0x70
            ...
    
    Signed-off-by: wuxu.wu <wuxu.wu@huawei.com>
    Link: https://lore.kernel.org/r/1577849981-31489-1-git-send-email-wuxu.wu@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6950c2775e02e4be51b06901306ee641e8e5b3df
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Apr 14 10:13:28 2020 +0800

    scsi: sg: add sg_remove_request in sg_write
    
    commit 83c6f2390040f188cc25b270b4befeb5628c1aee upstream.
    
    If the __copy_from_user function failed we need to call sg_remove_request
    in sg_write.
    
    Link: https://lore.kernel.org/r/610618d9-e983-fd56-ed0f-639428343af7@huawei.com
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    [groeck: Backport to v5.4.y and older kernels]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23d07a9b625b387eaf45d0d272a23d7b133a635b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Apr 30 23:30:49 2020 +0200

    drop_monitor: work around gcc-10 stringop-overflow warning
    
    [ Upstream commit dc30b4059f6e2abf3712ab537c8718562b21c45d ]
    
    The current gcc-10 snapshot produces a false-positive warning:
    
    net/core/drop_monitor.c: In function 'trace_drop_common.constprop':
    cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]
    In file included from net/core/drop_monitor.c:23:
    include/uapi/linux/net_dropmon.h:36:8: note: at offset 0 to object 'entries' with size 4 declared here
       36 |  __u32 entries;
          |        ^~~~~~~
    
    I reported this in the gcc bugzilla, but in case it does not get
    fixed in the release, work around it by using a temporary variable.
    
    Fixes: 9a8afc8d3962 ("Network Drop Monitor: Adding drop monitor implementation & Netlink protocol")
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94881
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0d331d1ababe75cdd3690fe1c99f6cc6aded099
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Apr 26 22:59:21 2020 +0200

    net: moxa: Fix a potential double 'free_irq()'
    
    [ Upstream commit ee8d2267f0e39a1bfd95532da3a6405004114b27 ]
    
    Should an irq requested with 'devm_request_irq' be released explicitly,
    it should be done by 'devm_free_irq()', not 'free_irq()'.
    
    Fixes: 6c821bd9edc9 ("net: Add MOXA ART SoCs ethernet driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf3c068c5c074ef417633c350e48109fe2578dfa
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Apr 27 08:18:03 2020 +0200

    net/sonic: Fix a resource leak in an error handling path in 'jazz_sonic_probe()'
    
    [ Upstream commit 10e3cc180e64385edc9890c6855acf5ed9ca1339 ]
    
    A call to 'dma_alloc_coherent()' is hidden in 'sonic_alloc_descriptors()',
    called from 'sonic_probe1()'.
    
    This is correctly freed in the remove function, but not in the error
    handling path of the probe function.
    Fix it and add the missing 'dma_free_coherent()' call.
    
    While at it, rename a label in order to be slightly more informative.
    
    Fixes: efcce839360f ("[PATCH] macsonic/jazzsonic network drivers update")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fccb7bbcc28f97a012601f6c75b99b63fc10ac7b
Author: Hugh Dickins <hughd@google.com>
Date:   Mon Apr 20 18:14:14 2020 -0700

    shmem: fix possible deadlocks on shmlock_user_lock
    
    [ Upstream commit ea0dfeb4209b4eab954d6e00ed136bc6b48b380d ]
    
    Recent commit 71725ed10c40 ("mm: huge tmpfs: try to split_huge_page()
    when punching hole") has allowed syzkaller to probe deeper, uncovering a
    long-standing lockdep issue between the irq-unsafe shmlock_user_lock,
    the irq-safe xa_lock on mapping->i_pages, and shmem inode's info->lock
    which nests inside xa_lock (or tree_lock) since 4.8's shmem_uncharge().
    
    user_shm_lock(), servicing SysV shmctl(SHM_LOCK), wants
    shmlock_user_lock while its caller shmem_lock() holds info->lock with
    interrupts disabled; but hugetlbfs_file_setup() calls user_shm_lock()
    with interrupts enabled, and might be interrupted by a writeback endio
    wanting xa_lock on i_pages.
    
    This may not risk an actual deadlock, since shmem inodes do not take
    part in writeback accounting, but there are several easy ways to avoid
    it.
    
    Requiring interrupts disabled for shmlock_user_lock would be easy, but
    it's a high-level global lock for which that seems inappropriate.
    Instead, recall that the use of info->lock to guard info->flags in
    shmem_lock() dates from pre-3.1 days, when races with SHMEM_PAGEIN and
    SHMEM_TRUNCATE could occur: nowadays it serves no purpose, the only flag
    added or removed is VM_LOCKED itself, and calls to shmem_lock() an inode
    are already serialized by the caller.
    
    Take info->lock out of the chain and the possibility of deadlock or
    lockdep warning goes away.
    
    Fixes: 4595ef88d136 ("shmem: make shmem_inode_info::lock irq-safe")
    Reported-by: syzbot+c8a8197c8852f566b9d9@syzkaller.appspotmail.com
    Reported-by: syzbot+40b71e145e73f78f81ad@syzkaller.appspotmail.com
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: Yang Shi <yang.shi@linux.alibaba.com>
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2004161707410.16322@eggly.anvils
    Link: https://lore.kernel.org/lkml/000000000000e5838c05a3152f53@google.com/
    Link: https://lore.kernel.org/lkml/0000000000003712b305a331d3b1@google.com/
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31db64366dea25222e8c601898bffb14af0c803f
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Mon Jan 13 14:00:09 2020 +0100

    ptp: free ptp device pin descriptors properly
    
    commit 75718584cb3c64e6269109d4d54f888ac5a5fd15 upstream.
    
    There is a bug in ptp_clock_unregister(), where ptp_cleanup_pin_groups()
    first frees ptp->pin_{,dev_}attr, but then posix_clock_unregister() needs
    them to destroy a related sysfs device.
    
    These functions can not be just swapped, as posix_clock_unregister() frees
    ptp which is needed in the ptp_cleanup_pin_groups(). Fix this by calling
    ptp_cleanup_pin_groups() in ptp_clock_release(), right before ptp is freed.
    
    This makes this patch fix an UAF bug in a patch which fixes an UAF bug.
    
    Reported-by: Antti Laakso <antti.laakso@intel.com>
    Fixes: a33121e5487b ("ptp: fix the race between the release of ptp_clock and cdev")
    Link: https://lore.kernel.org/netdev/3d2bd09735dbdaf003585ca376b7c1e5b69a19bd.camel@intel.com/
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89e8fc989feaac00bf1a7f9a766289422e2f5768
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Fri Dec 27 03:26:27 2019 +0100

    ptp: fix the race between the release of ptp_clock and cdev
    
    commit a33121e5487b424339636b25c35d3a180eaa5f5e upstream.
    
    In a case when a ptp chardev (like /dev/ptp0) is open but an underlying
    device is removed, closing this file leads to a race. This reproduces
    easily in a kvm virtual machine:
    
    ts# cat openptp0.c
    int main() { ... fp = fopen("/dev/ptp0", "r"); ... sleep(10); }
    ts# uname -r
    5.5.0-rc3-46cf053e
    ts# cat /proc/cmdline
    ... slub_debug=FZP
    ts# modprobe ptp_kvm
    ts# ./openptp0 &
    [1] 670
    opened /dev/ptp0, sleeping 10s...
    ts# rmmod ptp_kvm
    ts# ls /dev/ptp*
    ls: cannot access '/dev/ptp*': No such file or directory
    ts# ...woken up
    [   48.010809] general protection fault: 0000 [#1] SMP
    [   48.012502] CPU: 6 PID: 658 Comm: openptp0 Not tainted 5.5.0-rc3-46cf053e #25
    [   48.014624] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), ...
    [   48.016270] RIP: 0010:module_put.part.0+0x7/0x80
    [   48.017939] RSP: 0018:ffffb3850073be00 EFLAGS: 00010202
    [   48.018339] RAX: 000000006b6b6b6b RBX: 6b6b6b6b6b6b6b6b RCX: ffff89a476c00ad0
    [   48.018936] RDX: fffff65a08d3ea08 RSI: 0000000000000247 RDI: 6b6b6b6b6b6b6b6b
    [   48.019470] ...                                              ^^^ a slub poison
    [   48.023854] Call Trace:
    [   48.024050]  __fput+0x21f/0x240
    [   48.024288]  task_work_run+0x79/0x90
    [   48.024555]  do_exit+0x2af/0xab0
    [   48.024799]  ? vfs_write+0x16a/0x190
    [   48.025082]  do_group_exit+0x35/0x90
    [   48.025387]  __x64_sys_exit_group+0xf/0x10
    [   48.025737]  do_syscall_64+0x3d/0x130
    [   48.026056]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   48.026479] RIP: 0033:0x7f53b12082f6
    [   48.026792] ...
    [   48.030945] Modules linked in: ptp i6300esb watchdog [last unloaded: ptp_kvm]
    [   48.045001] Fixing recursive fault but reboot is needed!
    
    This happens in:
    
    static void __fput(struct file *file)
    {   ...
        if (file->f_op->release)
            file->f_op->release(inode, file); <<< cdev is kfree'd here
        if (unlikely(S_ISCHR(inode->i_mode) && inode->i_cdev != NULL &&
                 !(mode & FMODE_PATH))) {
            cdev_put(inode->i_cdev); <<< cdev fields are accessed here
    
    Namely:
    
    __fput()
      posix_clock_release()
        kref_put(&clk->kref, delete_clock) <<< the last reference
          delete_clock()
            delete_ptp_clock()
              kfree(ptp) <<< cdev is embedded in ptp
      cdev_put
        module_put(p->owner) <<< *p is kfree'd, bang!
    
    Here cdev is embedded in posix_clock which is embedded in ptp_clock.
    The race happens because ptp_clock's lifetime is controlled by two
    refcounts: kref and cdev.kobj in posix_clock. This is wrong.
    
    Make ptp_clock's sysfs device a parent of cdev with cdev_device_add()
    created especially for such cases. This way the parent device with its
    ptp_clock is not released until all references to the cdev are released.
    This adds a requirement that an initialized but not exposed struct
    device should be provided to posix_clock_register() by a caller instead
    of a simple dev_t.
    
    This approach was adopted from the commit 72139dfa2464 ("watchdog: Fix
    the race between the release of watchdog_core_data and cdev"). See
    details of the implementation in the commit 233ed09d7fda ("chardev: add
    helper function to register char devs with a struct device").
    
    Link: https://lore.kernel.org/linux-fsdevel/20191125125342.6189-1-vdronov@redhat.com/T/#u
    Analyzed-by: Stephen Johnston <sjohnsto@redhat.com>
    Analyzed-by: Vern Lovejoy <vlovejoy@redhat.com>
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9540901d5ea333fb6fcc23579d1d0d633d9107a2
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Nov 23 09:54:55 2018 +0800

    ptp: Fix pass zero to ERR_PTR() in ptp_clock_register
    
    commit aea0a897af9e44c258e8ab9296fad417f1bc063a upstream.
    
    Fix smatch warning:
    
    drivers/ptp/ptp_clock.c:298 ptp_clock_register() warn:
     passing zero to 'ERR_PTR'
    
    'err' should be set while device_create_with_groups and
    pps_register_source fails
    
    Fixes: 85a66e550195 ("ptp: create "pins" together with the rest of attributes")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da97a80a657d1b1b50ef633e8ff5dbf0d417fc8d
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Fri Mar 17 12:48:08 2017 -0600

    chardev: add helper function to register char devs with a struct device
    
    commit 233ed09d7fdacf592ee91e6c97ce5f4364fbe7c0 upstream.
    
    Credit for this patch goes is shared with Dan Williams [1]. I've
    taken things one step further to make the helper function more
    useful and clean up calling code.
    
    There's a common pattern in the kernel whereby a struct cdev is placed
    in a structure along side a struct device which manages the life-cycle
    of both. In the naive approach, the reference counting is broken and
    the struct device can free everything before the chardev code
    is entirely released.
    
    Many developers have solved this problem by linking the internal kobjs
    in this fashion:
    
    cdev.kobj.parent = &parent_dev.kobj;
    
    The cdev code explicitly gets and puts a reference to it's kobj parent.
    So this seems like it was intended to be used this way. Dmitrty Torokhov
    first put this in place in 2012 with this commit:
    
    2f0157f char_dev: pin parent kobject
    
    and the first instance of the fix was then done in the input subsystem
    in the following commit:
    
    4a215aa Input: fix use-after-free introduced with dynamic minor changes
    
    Subsequently over the years, however, this issue seems to have tripped
    up multiple developers independently. For example, see these commits:
    
    0d5b7da iio: Prevent race between IIO chardev opening and IIO device
    (by Lars-Peter Clausen in 2013)
    
    ba0ef85 tpm: Fix initialization of the cdev
    (by Jason Gunthorpe in 2015)
    
    5b28dde [media] media: fix use-after-free in cdev_put() when app exits
    after driver unbind
    (by Shauh Khan in 2016)
    
    This technique is similarly done in at least 15 places within the kernel
    and probably should have been done so in another, at least, 5 places.
    The kobj line also looks very suspect in that one would not expect
    drivers to have to mess with kobject internals in this way.
    Even highly experienced kernel developers can be surprised by this
    code, as seen in [2].
    
    To help alleviate this situation, and hopefully prevent future
    wasted effort on this problem, this patch introduces a helper function
    to register a char device along with its parent struct device.
    This creates a more regular API for tying a char device to its parent
    without the developer having to set members in the underlying kobject.
    
    This patch introduce cdev_device_add and cdev_device_del which
    replaces a common pattern including setting the kobj parent, calling
    cdev_add and then calling device_add. It also introduces cdev_set_parent
    for the few cases that set the kobject parent without using device_add.
    
    [1] https://lkml.org/lkml/2017/2/13/700
    [2] https://lkml.org/lkml/2017/2/10/370
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea053b2214271cc579e5e26b3440a271381a30b1
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Feb 14 10:23:34 2017 -0800

    ptp: create "pins" together with the rest of attributes
    
    commit 85a66e55019583da1e0f18706b7a8281c9f6de5b upstream.
    
    Let's switch to using device_create_with_groups(), which will allow us to
    create "pins" attribute group together with the rest of ptp device
    attributes, and before userspace gets notified about ptp device creation.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6347abb820bbbca94074100dbd21f4cbc54d45b2
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Feb 14 10:23:33 2017 -0800

    ptp: use is_visible method to hide unused attributes
    
    commit af59e717d5ff9c8dbf9bcc581c0dfb3b2a9c9030 upstream.
    
    Instead of creating selected attributes after the device is created (and
    after userspace potentially seen uevent), lets use attribute group
    is_visible() method to control which attributes are shown. This will allow
    us to create all attributes (except "pins" group, which will be taken care
    of later) before userspace gets notified about new ptp class device.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bca173248fed7477fa607afe0c2efde61f00dbd2
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Feb 14 10:23:31 2017 -0800

    ptp: do not explicitly set drvdata in ptp_clock_register()
    
    commit 882f312dc0751c973db26478f07f082c584d16aa upstream.
    
    We do not need explicitly call dev_set_drvdata(), as it is done for us by
    device_create().
    
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a33f9c96871ed932bf28885cc708aec7b499bcad
Author: Cengiz Can <cengiz@kernel.wtf>
Date:   Wed Mar 4 13:58:19 2020 +0300

    blktrace: fix dereference after null check
    
    commit 153031a301bb07194e9c37466cfce8eacb977621 upstream.
    
    There was a recent change in blktrace.c that added a RCU protection to
    `q->blk_trace` in order to fix a use-after-free issue during access.
    
    However the change missed an edge case that can lead to dereferencing of
    `bt` pointer even when it's NULL:
    
    Coverity static analyzer marked this as a FORWARD_NULL issue with CID
    1460458.
    
    ```
    /kernel/trace/blktrace.c: 1904 in sysfs_blk_trace_attr_store()
    1898            ret = 0;
    1899            if (bt == NULL)
    1900                    ret = blk_trace_setup_queue(q, bdev);
    1901
    1902            if (ret == 0) {
    1903                    if (attr == &dev_attr_act_mask)
    >>>     CID 1460458:  Null pointer dereferences  (FORWARD_NULL)
    >>>     Dereferencing null pointer "bt".
    1904                            bt->act_mask = value;
    1905                    else if (attr == &dev_attr_pid)
    1906                            bt->pid = value;
    1907                    else if (attr == &dev_attr_start_lba)
    1908                            bt->start_lba = value;
    1909                    else if (attr == &dev_attr_end_lba)
    ```
    
    Added a reassignment with RCU annotation to fix the issue.
    
    Fixes: c780e86dd48 ("blktrace: Protect q->blk_trace with RCU")
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bob Liu <bob.liu@oracle.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Cengiz Can <cengiz@kernel.wtf>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 284dba674c063ac5cab9ffc1ea07f7b199aeb62f
Author: Jan Kara <jack@suse.cz>
Date:   Thu Feb 6 15:28:12 2020 +0100

    blktrace: Protect q->blk_trace with RCU
    
    commit c780e86dd48ef6467a1146cf7d0fe1e05a635039 upstream.
    
    KASAN is reporting that __blk_add_trace() has a use-after-free issue
    when accessing q->blk_trace. Indeed the switching of block tracing (and
    thus eventual freeing of q->blk_trace) is completely unsynchronized with
    the currently running tracing and thus it can happen that the blk_trace
    structure is being freed just while __blk_add_trace() works on it.
    Protect accesses to q->blk_trace by RCU during tracing and make sure we
    wait for the end of RCU grace period when shutting down tracing. Luckily
    that is rare enough event that we can afford that. Note that postponing
    the freeing of blk_trace to an RCU callback should better be avoided as
    it could have unexpected user visible side-effects as debugfs files
    would be still existing for a short while block tracing has been shut
    down.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=205711
    CC: stable@vger.kernel.org
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reported-by: Tristan Madani <tristmd@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f62edba7ca63ba8abd05379b812723162313608
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Nov 19 11:52:55 2017 -0700

    blktrace: fix trace mutex deadlock
    
    commit 2967acbb257a6a9bf912f4778b727e00972eac9b upstream.
    
    A previous commit changed the locking around registration/cleanup,
    but direct callers of blk_trace_remove() were missed. This means
    that if we hit the error path in setup, we will deadlock on
    attempting to re-acquire the queue trace mutex.
    
    Fixes: 1f2cac107c59 ("blktrace: fix unlocked access to init/start-stop/teardown")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ef5b092bb9936584a8885201f9e712ceec4a9d2
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Nov 5 09:13:48 2017 -0700

    blktrace: fix unlocked access to init/start-stop/teardown
    
    commit 1f2cac107c591c24b60b115d6050adc213d10fc0 upstream.
    
    sg.c calls into the blktrace functions without holding the proper queue
    mutex for doing setup, start/stop, or teardown.
    
    Add internal unlocked variants, and export the ones that do the proper
    locking.
    
    Fixes: 6da127ad0918 ("blktrace: Add blktrace ioctls to SCSI generic devices")
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4880925650b90cedc82b4044571177165448953
Author: Waiman Long <longman@redhat.com>
Date:   Wed Sep 20 13:12:20 2017 -0600

    blktrace: Fix potential deadlock between delete & sysfs ops
    
    commit 5acb3cc2c2e9d3020a4fee43763c6463767f1572 upstream.
    
    The lockdep code had reported the following unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(s_active#228);
                                   lock(&bdev->bd_mutex/1);
                                   lock(s_active#228);
      lock(&bdev->bd_mutex);
    
     *** DEADLOCK ***
    
    The deadlock may happen when one task (CPU1) is trying to delete a
    partition in a block device and another task (CPU0) is accessing
    tracing sysfs file (e.g. /sys/block/dm-1/trace/act_mask) in that
    partition.
    
    The s_active isn't an actual lock. It is a reference count (kn->count)
    on the sysfs (kernfs) file. Removal of a sysfs file, however, require
    a wait until all the references are gone. The reference count is
    treated like a rwsem using lockdep instrumentation code.
    
    The fact that a thread is in the sysfs callback method or in the
    ioctl call means there is a reference to the opended sysfs or device
    file. That should prevent the underlying block structure from being
    removed.
    
    Instead of using bd_mutex in the block_device structure, a new
    blk_trace_mutex is now added to the request_queue structure to protect
    access to the blk_trace structure.
    
    Suggested-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    
    Fix typo in patch subject line, and prune a comment detailing how
    the code used to work.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit badbe56cb62faabe946fed8d7e8a25c009a95e3b
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed Dec 4 15:35:53 2019 +0100

    net: ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup
    
    commit 6c8991f41546c3c472503dff1ea9daaddf9331c2 upstream.
    
    ipv6_stub uses the ip6_dst_lookup function to allow other modules to
    perform IPv6 lookups. However, this function skips the XFRM layer
    entirely.
    
    All users of ipv6_stub->ip6_dst_lookup use ip_route_output_flow (via the
    ip_route_output_key and ip_route_output helpers) for their IPv4 lookups,
    which calls xfrm_lookup_route(). This patch fixes this inconsistent
    behavior by switching the stub to ip6_dst_lookup_flow, which also calls
    xfrm_lookup_route().
    
    This requires some changes in all the callers, as these two functions
    take different arguments and have different return types.
    
    Fixes: 5f81bd2e5d80 ("ipv6: export a stub for IPv6 symbols used by vxlan")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.9:
     - Drop changes in lwt_bpf.c and mlx5
     - Initialise "dst" in drivers/infiniband/core/addr.c:addr_resolve()
       to avoid introducing a spurious "may be used uninitialised" warning
     - Adjust filename, context, indentation]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cc5fa7a8778da20941e7f78edc87090e34cb515
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed Dec 4 15:35:52 2019 +0100

    net: ipv6: add net argument to ip6_dst_lookup_flow
    
    commit c4e85f73afb6384123e5ef1bba3315b2e3ad031e upstream.
    
    This will be used in the conversion of ipv6_stub to ip6_dst_lookup_flow,
    as some modules currently pass a net argument without a socket to
    ip6_dst_lookup. This is equivalent to commit 343d60aada5a ("ipv6: change
    ipv6_stub_impl.ipv6_dst_lookup to take net argument").
    
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e94c149b8aed0bd1035ad24354af02eee9481da9
Author: Shijie Luo <luoshijie1@huawei.com>
Date:   Mon Feb 10 20:17:52 2020 -0500

    ext4: add cond_resched() to ext4_protect_reserved_inode
    
    commit af133ade9a40794a37104ecbcc2827c0ea373a3c upstream.
    
    When journal size is set too big by "mkfs.ext4 -J size=", or when
    we mount a crafted image to make journal inode->i_size too big,
    the loop, "while (i < num)", holds cpu too long. This could cause
    soft lockup.
    
    [  529.357541] Call trace:
    [  529.357551]  dump_backtrace+0x0/0x198
    [  529.357555]  show_stack+0x24/0x30
    [  529.357562]  dump_stack+0xa4/0xcc
    [  529.357568]  watchdog_timer_fn+0x300/0x3e8
    [  529.357574]  __hrtimer_run_queues+0x114/0x358
    [  529.357576]  hrtimer_interrupt+0x104/0x2d8
    [  529.357580]  arch_timer_handler_virt+0x38/0x58
    [  529.357584]  handle_percpu_devid_irq+0x90/0x248
    [  529.357588]  generic_handle_irq+0x34/0x50
    [  529.357590]  __handle_domain_irq+0x68/0xc0
    [  529.357593]  gic_handle_irq+0x6c/0x150
    [  529.357595]  el1_irq+0xb8/0x140
    [  529.357599]  __ll_sc_atomic_add_return_acquire+0x14/0x20
    [  529.357668]  ext4_map_blocks+0x64/0x5c0 [ext4]
    [  529.357693]  ext4_setup_system_zone+0x330/0x458 [ext4]
    [  529.357717]  ext4_fill_super+0x2170/0x2ba8 [ext4]
    [  529.357722]  mount_bdev+0x1a8/0x1e8
    [  529.357746]  ext4_mount+0x44/0x58 [ext4]
    [  529.357748]  mount_fs+0x50/0x170
    [  529.357752]  vfs_kern_mount.part.9+0x54/0x188
    [  529.357755]  do_mount+0x5ac/0xd78
    [  529.357758]  ksys_mount+0x9c/0x118
    [  529.357760]  __arm64_sys_mount+0x28/0x38
    [  529.357764]  el0_svc_common+0x78/0x130
    [  529.357766]  el0_svc_handler+0x38/0x78
    [  529.357769]  el0_svc+0x8/0xc
    [  541.356516] watchdog: BUG: soft lockup - CPU#0 stuck for 23s! [mount:18674]
    
    Link: https://lore.kernel.org/r/20200211011752.29242-1-luoshijie1@huawei.com
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Shijie Luo <luoshijie1@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7adf03146c87ad72b44bc1f57e346ed330271fa
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Sep 26 10:15:25 2019 -0700

    binfmt_elf: Do not move brk for INTERP-less ET_EXEC
    
    commit 7be3cb019db1cbd5fd5ffe6d64a23fefa4b6f229 upstream.
    
    When brk was moved for binaries without an interpreter, it should have
    been limited to ET_DYN only. In other words, the special case was an
    ET_DYN that lacks an INTERP, not just an executable that lacks INTERP.
    The bug manifested for giant static executables, where the brk would end
    up in the middle of the text area on 32-bit architectures.
    
    Reported-and-tested-by: Richard Kojedzinszky <richard@kojedz.in>
    Fixes: bbdc6076d2e5 ("binfmt_elf: move brk out of mmap when doing direct loader exec")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e03e0f1ae25fb3bb24e146b89899faa1167f5b57
Author: Ivan Delalande <colona@arista.com>
Date:   Thu May 7 18:35:53 2020 -0700

    scripts/decodecode: fix trapping instruction formatting
    
    commit e08df079b23e2e982df15aa340bfbaf50f297504 upstream.
    
    If the trapping instruction contains a ':', for a memory access through
    segment registers for example, the sed substitution will insert the '*'
    marker in the middle of the instruction instead of the line address:
    
            2b:   65 48 0f c7 0f          cmpxchg16b %gs:*(%rdi)          <-- trapping instruction
    
    I started to think I had forgotten some quirk of the assembly syntax
    before noticing that it was actually coming from the script.  Fix it to
    add the address marker at the right place for these instructions:
    
            28:   49 8b 06                mov    (%r14),%rax
            2b:*  65 48 0f c7 0f          cmpxchg16b %gs:(%rdi)           <-- trapping instruction
            30:   0f 94 c0                sete   %al
    
    Fixes: 18ff44b189e2 ("scripts/decodecode: make faulting insn ptr more robust")
    Signed-off-by: Ivan Delalande <colona@arista.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/20200419223653.GA31248@visor
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c2842fe88cb2ffa9409729f7b67bf89ffebd457
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:00 2020 -0500

    objtool: Fix stack offset tracking for indirect CFAs
    
    commit d8dd25a461e4eec7190cb9d66616aceacc5110ad upstream.
    
    When the current frame address (CFA) is stored on the stack (i.e.,
    cfa->base == CFI_SP_INDIRECT), objtool neglects to adjust the stack
    offset when there are subsequent pushes or pops.  This results in bad
    ORC data at the end of the ENTER_IRQ_STACK macro, when it puts the
    previous stack pointer on the stack and does a subsequent push.
    
    This fixes the following unwinder warning:
    
      WARNING: can't dereference registers at 00000000f0a6bdba for ip interrupt_entry+0x9f/0xa0
    
    Fixes: 627fce14809b ("objtool: Add ORC unwind table generation")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Steven Rostedt <rostedt@goodmis.org>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/853d5d691b29e250333332f09b8e27410b2d9924.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aba0fd6a16ef9a562d22b81f7f3cd365ba9bc0fa
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:37:20 2020 +0800

    batman-adv: Fix refcnt leak in batadv_v_ogm_process
    
    commit 6f91a3f7af4186099dd10fa530dd7e0d9c29747d upstream.
    
    batadv_v_ogm_process() invokes batadv_hardif_neigh_get(), which returns
    a reference of the neighbor object to "hardif_neigh" with increased
    refcount.
    
    When batadv_v_ogm_process() returns, "hardif_neigh" becomes invalid, so
    the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling paths of
    batadv_v_ogm_process(). When batadv_v_ogm_orig_get() fails to get the
    orig node and returns NULL, the refcnt increased by
    batadv_hardif_neigh_get() is not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_v_ogm_orig_get()
    fails to get the orig node.
    
    Fixes: 9323158ef9f4 ("batman-adv: OGMv2 - implement originators logic")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c62006cf13a7071e40d879097bd280517e05a70e
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:35:21 2020 +0800

    batman-adv: Fix refcnt leak in batadv_store_throughput_override
    
    commit 6107c5da0fca8b50b4d3215e94d619d38cc4a18c upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_store_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in one error path of
    batadv_store_throughput_override(). When batadv_parse_throughput()
    returns NULL, the refcnt increased by batadv_hardif_get_by_netdev() is
    not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_parse_throughput()
    returns NULL.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9d0df8c4c9e709c3c0b77de917e260ac0bd9f09
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:31:50 2020 +0800

    batman-adv: Fix refcnt leak in batadv_show_throughput_override
    
    commit f872de8185acf1b48b954ba5bd8f9bc0a0d14016 upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_show_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in the normal path of
    batadv_show_throughput_override(), which forgets to decrease the refcnt
    increased by batadv_hardif_get_by_netdev() before the function returns,
    causing a refcnt leak.
    
    Fix this issue by calling batadv_hardif_put() before the
    batadv_show_throughput_override() returns in the normal path.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 221d9baf89150146a81883aeb4af32c6872c2459
Author: George Spelvin <lkml@sdf.org>
Date:   Sun Mar 8 09:44:59 2020 -0400

    batman-adv: fix batadv_nc_random_weight_tq
    
    commit fd0c42c4dea54335967c5a86f15fc064235a2797 upstream.
    
    and change to pseudorandom numbers, as this is a traffic dithering
    operation that doesn't need crypto-grade.
    
    The previous code operated in 4 steps:
    
    1. Generate a random byte 0 <= rand_tq <= 255
    2. Multiply it by BATADV_TQ_MAX_VALUE - tq
    3. Divide by 255 (= BATADV_TQ_MAX_VALUE)
    4. Return BATADV_TQ_MAX_VALUE - rand_tq
    
    This would apperar to scale (BATADV_TQ_MAX_VALUE - tq) by a random
    value between 0/255 and 255/255.
    
    But!  The intermediate value between steps 3 and 4 is stored in a u8
    variable.  So it's truncated, and most of the time, is less than 255, after
    which the division produces 0.  Specifically, if tq is odd, the product is
    always even, and can never be 255.  If tq is even, there's exactly one
    random byte value that will produce a product byte of 255.
    
    Thus, the return value is 255 (511/512 of the time) or 254 (1/512
    of the time).
    
    If we assume that the truncation is a bug, and the code is meant to scale
    the input, a simpler way of looking at it is that it's returning a random
    value between tq and BATADV_TQ_MAX_VALUE, inclusive.
    
    Well, we have an optimized function for doing just that.
    
    Fixes: 3c12de9a5c75 ("batman-adv: network coding - code and transmit packets if possible")
    Signed-off-by: George Spelvin <lkml@sdf.org>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e254aa027fcf196ac3f91b8b0df417839d480974
Author: David Hildenbrand <david@redhat.com>
Date:   Thu May 7 18:35:46 2020 -0700

    mm/page_alloc: fix watchdog soft lockups during set_zone_contiguous()
    
    commit e84fe99b68ce353c37ceeecc95dce9696c976556 upstream.
    
    Without CONFIG_PREEMPT, it can happen that we get soft lockups detected,
    e.g., while booting up.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [swapper/0:1]
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0-next-20200331+ #4
      Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
      RIP: __pageblock_pfn_to_page+0x134/0x1c0
      Call Trace:
       set_zone_contiguous+0x56/0x70
       page_alloc_init_late+0x166/0x176
       kernel_init_freeable+0xfa/0x255
       kernel_init+0xa/0x106
       ret_from_fork+0x35/0x40
    
    The issue becomes visible when having a lot of memory (e.g., 4TB)
    assigned to a single NUMA node - a system that can easily be created
    using QEMU.  Inside VMs on a hypervisor with quite some memory
    overcommit, this is fairly easy to trigger.
    
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: Baoquan He <bhe@redhat.com>
    Reviewed-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Shile Zhang <shile.zhang@linux.alibaba.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200416073417.5003-1-david@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6e55a35e9315aaafd26ff7ca838df3eb912d4c2
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 6 10:36:18 2020 -0400

    tracing: Add a vmalloc_sync_mappings() for safe measure
    
    commit 11f5efc3ab66284f7aaacc926e9351d658e2577b upstream.
    
    x86_64 lazily maps in the vmalloc pages, and the way this works with per_cpu
    areas can be complex, to say the least. Mappings may happen at boot up, and
    if nothing synchronizes the page tables, those page mappings may not be
    synced till they are used. This causes issues for anything that might touch
    one of those mappings in the path of the page fault handler. When one of
    those unmapped mappings is touched in the page fault handler, it will cause
    another page fault, which in turn will cause a page fault, and leave us in
    a loop of page faults.
    
    Commit 763802b53a42 ("x86/mm: split vmalloc_sync_all()") split
    vmalloc_sync_all() into vmalloc_sync_unmappings() and
    vmalloc_sync_mappings(), as on system exit, it did not need to do a full
    sync on x86_64 (although it still needed to be done on x86_32). By chance,
    the vmalloc_sync_all() would synchronize the page mappings done at boot up
    and prevent the per cpu area from being a problem for tracing in the page
    fault handler. But when that synchronization in the exit of a task became a
    nop, it caused the problem to appear.
    
    Link: https://lore.kernel.org/r/20200429054857.66e8e333@oasis.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 737223fbca3b1 ("tracing: Consolidate buffer allocation code")
    Reported-by: "Tzvetomir Stoyanov (VMware)" <tz.stoyanov@gmail.com>
    Suggested-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 567299fef491d0d4033e5093424dc21835e1825d
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:03:04 2020 +0200

    USB: serial: garmin_gps: add sanity checking for data length
    
    commit e9b3c610a05c1cdf8e959a6d89c38807ff758ee6 upstream.
    
    We must not process packets shorter than a packet ID
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-and-tested-by: syzbot+d29e9263e13ce0b9f4fd@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8c9cebed0d47a0dcd7075418969e691521fa1c4
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 29 17:52:18 2020 +0200

    USB: uas: add quirk for LaCie 2Big Quadra
    
    commit 9f04db234af691007bb785342a06abab5fb34474 upstream.
    
    This device needs US_FL_NO_REPORT_OPCODES to avoid going
    through prolonged error handling on enumeration.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: Julian Groß <julian.g@posteo.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200429155218.7308-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e3f9b3f7c28ccfd30af8f2c07edca8131822419
Author: Kees Cook <keescook@chromium.org>
Date:   Tue May 14 15:43:57 2019 -0700

    binfmt_elf: move brk out of mmap when doing direct loader exec
    
    commit bbdc6076d2e5d07db44e74c11b01a3e27ab90b32 upstream.
    
    Commmit eab09532d400 ("binfmt_elf: use ELF_ET_DYN_BASE only for PIE"),
    made changes in the rare case when the ELF loader was directly invoked
    (e.g to set a non-inheritable LD_LIBRARY_PATH, testing new versions of
    the loader), by moving into the mmap region to avoid both ET_EXEC and
    PIE binaries.  This had the effect of also moving the brk region into
    mmap, which could lead to the stack and brk being arbitrarily close to
    each other.  An unlucky process wouldn't get its requested stack size
    and stack allocations could end up scribbling on the heap.
    
    This is illustrated here.  In the case of using the loader directly, brk
    (so helpfully identified as "[heap]") is allocated with the _loader_ not
    the binary.  For example, with ASLR entirely disabled, you can see this
    more clearly:
    
    $ /bin/cat /proc/self/maps
    555555554000-55555555c000 r-xp 00000000 ... /bin/cat
    55555575b000-55555575c000 r--p 00007000 ... /bin/cat
    55555575c000-55555575d000 rw-p 00008000 ... /bin/cat
    55555575d000-55555577e000 rw-p 00000000 ... [heap]
    ...
    7ffff7ff7000-7ffff7ffa000 r--p 00000000 ... [vvar]
    7ffff7ffa000-7ffff7ffc000 r-xp 00000000 ... [vdso]
    7ffff7ffc000-7ffff7ffd000 r--p 00027000 ... /lib/x86_64-linux-gnu/ld-2.27.so
    7ffff7ffd000-7ffff7ffe000 rw-p 00028000 ... /lib/x86_64-linux-gnu/ld-2.27.so
    7ffff7ffe000-7ffff7fff000 rw-p 00000000 ...
    7ffffffde000-7ffffffff000 rw-p 00000000 ... [stack]
    
    $ /lib/x86_64-linux-gnu/ld-2.27.so /bin/cat /proc/self/maps
    ...
    7ffff7bcc000-7ffff7bd4000 r-xp 00000000 ... /bin/cat
    7ffff7bd4000-7ffff7dd3000 ---p 00008000 ... /bin/cat
    7ffff7dd3000-7ffff7dd4000 r--p 00007000 ... /bin/cat
    7ffff7dd4000-7ffff7dd5000 rw-p 00008000 ... /bin/cat
    7ffff7dd5000-7ffff7dfc000 r-xp 00000000 ... /lib/x86_64-linux-gnu/ld-2.27.so
    7ffff7fb2000-7ffff7fd6000 rw-p 00000000 ...
    7ffff7ff7000-7ffff7ffa000 r--p 00000000 ... [vvar]
    7ffff7ffa000-7ffff7ffc000 r-xp 00000000 ... [vdso]
    7ffff7ffc000-7ffff7ffd000 r--p 00027000 ... /lib/x86_64-linux-gnu/ld-2.27.so
    7ffff7ffd000-7ffff7ffe000 rw-p 00028000 ... /lib/x86_64-linux-gnu/ld-2.27.so
    7ffff7ffe000-7ffff8020000 rw-p 00000000 ... [heap]
    7ffffffde000-7ffffffff000 rw-p 00000000 ... [stack]
    
    The solution is to move brk out of mmap and into ELF_ET_DYN_BASE since
    nothing is there in the direct loader case (and ET_EXEC is still far
    away at 0x400000).  Anything that ran before should still work (i.e.
    the ultimately-launched binary already had the brk very far from its
    text, so this should be no different from a COMPAT_BRK standpoint).  The
    only risk I see here is that if someone started to suddenly depend on
    the entire memory space lower than the mmap region being available when
    launching binaries via a direct loader execs which seems highly
    unlikely, I'd hope: this would mean a binary would _not_ work when
    exec()ed normally.
    
    (Note that this is only done under CONFIG_ARCH_HAS_ELF_RANDOMIZATION
    when randomization is turned on.)
    
    Link: http://lkml.kernel.org/r/20190422225727.GA21011@beast
    Link: https://lkml.kernel.org/r/CAGXu5jJ5sj3emOT2QPxQkNQk0qbU6zEfu9=Omfhx_p0nCKPSjA@mail.gmail.com
    Fixes: eab09532d400 ("binfmt_elf: use ELF_ET_DYN_BASE only for PIE")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reported-by: Ali Saidi <alisaidi@amazon.com>
    Cc: Ali Saidi <alisaidi@amazon.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jann Horn <jannh@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37c75edf71205edcbaaca7e7f54a93f5bfc88cc9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Jan 22 13:24:05 2017 +0100

    Revert "ACPI / video: Add force_native quirk for HP Pavilion dv6"
    
    commit fd25ea29093e275195d0ae8b2573021a1c98959f upstream.
    
    Revert commit 6276e53fa8c0 (ACPI / video: Add force_native quirk for
    HP Pavilion dv6).
    
    In the commit message for the quirk this revert removes I wrote:
    
    "Note that there are quite a few HP Pavilion dv6 variants, some
    woth ATI and some with NVIDIA hybrid gfx, both seem to need this
    quirk to have working backlight control. There are also some versions
    with only Intel integrated gfx, these may not need this quirk, but it
    should not hurt there."
    
    Unfortunately that seems wrong, I've already received 2 reports of
    this commit causing regressions on some dv6 variants (at least one
    of which actually has a nvidia GPU). So it seems that HP has made a
    mess here by using the same model-name both in marketing and in the
    DMI data for many different variants. Some of which need
    acpi_backlight=native for functional backlight control (as the
    quirk this commit reverts was doing), where as others are broken by
    it. So lets get back to the old sitation so as to avoid regressing
    on models which used to work without any kernel cmdline arguments
    before.
    
    Fixes: 6276e53fa8c0 (ACPI / video: Add force_native quirk for HP Pavilion dv6)
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4bcdb1b3f9b4d0651b38636b38955d7e7304731
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:40 2020 -0400

    bnxt_en: Improve AER slot reset.
    
    [ Upstream commit bae361c54fb6ac6eba3b4762f49ce14beb73ef13 ]
    
    Improve the slot reset sequence by disabling the device to prevent bad
    DMAs if slot reset fails.  Return the proper result instead of always
    PCI_ERS_RESULT_RECOVERED to the caller.
    
    Fixes: 6316ea6db93d ("bnxt_en: Enable AER support.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fb0515467c87a2589c3be163ed214933db8a46f
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Feb 23 03:27:41 2020 +0200

    net/mlx5: Fix command entry leak in Internal Error State
    
    [ Upstream commit cece6f432cca9f18900463ed01b97a152a03600a ]
    
    Processing commands by cmd_work_handler() while already in Internal
    Error State will result in entry leak, since the handler process force
    completion without doorbell. Forced completion doesn't release the entry
    and event completion will never arrive, so entry should be released.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c393b5917b18575fbd2fee7771244930e795b7da
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Jul 21 08:40:13 2019 +0300

    net/mlx5: Fix forced completion access non initialized command entry
    
    [ Upstream commit f3cb3cebe26ed4c8036adbd9448b372129d3c371 ]
    
    mlx5_cmd_flush() will trigger forced completions to all valid command
    entries. Triggered by an asynch event such as fast teardown it can
    happen at any stage of the command, including command initialization.
    It will trigger forced completion and that can lead to completion on an
    uninitialized command entry.
    
    Setting MLX5_CMD_ENT_STATE_PENDING_COMP only after command entry is
    initialized will ensure force completion is treated only if command
    entry is initialized.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b081b91e6626f62fde4bd314d55d1c7201a5c1b4
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:42 2020 -0400

    bnxt_en: Fix VLAN acceleration handling in bnxt_fix_features().
    
    [ Upstream commit c72cb303aa6c2ae7e4184f0081c6d11bf03fb96b ]
    
    The current logic in bnxt_fix_features() will inadvertently turn on both
    CTAG and STAG VLAN offload if the user tries to disable both.  Fix it
    by checking that the user is trying to enable CTAG or STAG before
    enabling both.  The logic is supposed to enable or disable both CTAG and
    STAG together.
    
    Fixes: 5a9f6b238e59 ("bnxt_en: Enable and disable RX CTAG and RX STAG VLAN acceleration together.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 019495fa4e5bbdeecb087a37417f9bad10da5f41
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 26 18:19:07 2020 -0700

    sch_sfq: validate silly quantum values
    
    [ Upstream commit df4953e4e997e273501339f607b77953772e3559 ]
    
    syzbot managed to set up sfq so that q->scaled_quantum was zero,
    triggering an infinite loop in sfq_dequeue()
    
    More generally, we must only accept quantum between 1 and 2^18 - 7,
    meaning scaled_quantum must be in [1, 0x7FFF] range.
    
    Otherwise, we also could have a loop in sfq_dequeue()
    if scaled_quantum happens to be 0x8000, since slot->allot
    could indefinitely switch between 0 and 0x8000.
    
    Fixes: eeaeb068f139 ("sch_sfq: allow big packets and be fair")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+0251e883fe39e7a0cb0a@syzkaller.appspotmail.com
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f96cc39af5df5271bf2833a2063bedc84263afa
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 15:19:51 2020 -0700

    sch_choke: avoid potential panic in choke_reset()
    
    [ Upstream commit 8738c85c72b3108c9b9a369a39868ba5f8e10ae0 ]
    
    If choke_init() could not allocate q->tab, we would crash later
    in choke_reset().
    
    BUG: KASAN: null-ptr-deref in memset include/linux/string.h:366 [inline]
    BUG: KASAN: null-ptr-deref in choke_reset+0x208/0x340 net/sched/sch_choke.c:326
    Write of size 8 at addr 0000000000000000 by task syz-executor822/7022
    
    CPU: 1 PID: 7022 Comm: syz-executor822 Not tainted 5.7.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     __kasan_report.cold+0x5/0x4d mm/kasan/report.c:515
     kasan_report+0x33/0x50 mm/kasan/common.c:625
     check_memory_region_inline mm/kasan/generic.c:187 [inline]
     check_memory_region+0x141/0x190 mm/kasan/generic.c:193
     memset+0x20/0x40 mm/kasan/common.c:85
     memset include/linux/string.h:366 [inline]
     choke_reset+0x208/0x340 net/sched/sch_choke.c:326
     qdisc_reset+0x6b/0x520 net/sched/sch_generic.c:910
     dev_deactivate_queue.constprop.0+0x13c/0x240 net/sched/sch_generic.c:1138
     netdev_for_each_tx_queue include/linux/netdevice.h:2197 [inline]
     dev_deactivate_many+0xe2/0xba0 net/sched/sch_generic.c:1195
     dev_deactivate+0xf8/0x1c0 net/sched/sch_generic.c:1233
     qdisc_graft+0xd25/0x1120 net/sched/sch_api.c:1051
     tc_modify_qdisc+0xbab/0x1a00 net/sched/sch_api.c:1670
     rtnetlink_rcv_msg+0x44e/0xad0 net/core/rtnetlink.c:5454
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
    
    Fixes: 77e62da6e60c ("sch_choke: drop all packets in queue during reset")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd6d7ca271d9043ae18cdf32af62f84a619f34c9
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:52:28 2020 +1000

    net: usb: qmi_wwan: add support for DW5816e
    
    [ Upstream commit 57c7f2bd758eed867295c81d3527fff4fab1ed74 ]
    
    Add support for Dell Wireless 5816e to drivers/net/usb/qmi_wwan.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a0593e4fe3249d9f16d8419ca48c8b3a3b84cb3
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon May 4 11:36:02 2020 +0300

    net/mlx4_core: Fix use of ENOSPC around mlx4_counter_alloc()
    
    [ Upstream commit 40e473071dbad04316ddc3613c3a3d1c75458299 ]
    
    When ENOSPC is set the idx is still valid and gets set to the global
    MLX4_SINK_COUNTER_INDEX.  However gcc's static analysis cannot tell that
    ENOSPC is impossible from mlx4_cmd_imm() and gives this warning:
    
    drivers/net/ethernet/mellanox/mlx4/main.c:2552:28: warning: 'idx' may be
    used uninitialized in this function [-Wmaybe-uninitialized]
     2552 |    priv->def_counter[port] = idx;
    
    Also, when ENOSPC is returned mlx4_allocate_default_counters should not
    fail.
    
    Fixes: 6de5f7f6a1fa ("net/mlx4_core: Allocate default counter per port")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc9d8659996df35ff927a3b25f2d8c3e6a5a83e2
Author: Scott Dial <scott@scottdial.com>
Date:   Fri Apr 24 18:51:08 2020 -0400

    net: macsec: preserve ingress frame ordering
    
    [ Upstream commit ab046a5d4be4c90a3952a0eae75617b49c0cb01b ]
    
    MACsec decryption always occurs in a softirq context. Since
    the FPU may not be usable in the softirq context, the call to
    decrypt may be scheduled on the cryptd work queue. The cryptd
    work queue does not provide ordering guarantees. Therefore,
    preserving order requires masking out ASYNC implementations
    of gcm(aes).
    
    For instance, an Intel CPU with AES-NI makes available the
    generic-gcm-aesni driver from the aesni_intel module to
    implement gcm(aes). However, this implementation requires
    the FPU, so it is not always available to use from a softirq
    context, and will fallback to the cryptd work queue, which
    does not preserve frame ordering. With this change, such a
    system would select gcm_base(ctr(aes-aesni),ghash-generic).
    While the aes-aesni implementation prefers to use the FPU, it
    will fallback to the aes-asm implementation if unavailable.
    
    By using a synchronous version of gcm(aes), the decryption
    will complete before returning from crypto_aead_decrypt().
    Therefore, the macsec_decrypt_done() callback will be called
    before returning from macsec_decrypt(). Thus, the order of
    calls to macsec_post_decrypt() for the frames is preserved.
    
    While it's presumable that the pure AES-NI version of gcm(aes)
    is more performant, the hybrid solution is capable of gigabit
    speeds on modest hardware. Regardless, preserving the order
    of frames is paramount for many network protocols (e.g.,
    triggering TCP retries). Within the MACsec driver itself, the
    replay protection is tripped by the out-of-order frames, and
    can cause frames to be dropped.
    
    This bug has been present in this code since it was added in
    v4.6, however it may not have been noticed since not all CPUs
    have FPU offload available. Additionally, the bug manifests
    as occasional out-of-order packets that are easily
    misattributed to other network phenomena.
    
    When this code was added in v4.6, the crypto/gcm.c code did
    not restrict selection of the ghash function based on the
    ASYNC flag. For instance, x86 CPUs with PCLMULQDQ would
    select the ghash-clmulni driver instead of ghash-generic,
    which submits to the cryptd work queue if the FPU is busy.
    However, this bug was was corrected in v4.8 by commit
    b30bdfa86431afbafe15284a3ad5ac19b49b88e3, and was backported
    all the way back to the v3.14 stable branch, so this patch
    should be applicable back to the v4.6 stable branch.
    
    Signed-off-by: Scott Dial <scott@scottdial.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce0ca3d9fc5bc3812917d86dcf14ee88f8e34cbc
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 12:40:25 2020 -0700

    fq_codel: fix TCA_FQ_CODEL_DROP_BATCH_SIZE sanity checks
    
    [ Upstream commit 14695212d4cd8b0c997f6121b6df8520038ce076 ]
    
    My intent was to not let users set a zero drop_batch_size,
    it seems I once again messed with min()/max().
    
    Fixes: 9d18562a2278 ("fq_codel: add batch ability to fq_codel_drop()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c510cc4b377539b37942fa8e864b478d3f5ebd0a
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Thu Apr 30 21:51:32 2020 +0200

    dp83640: reverse arguments to list_add_tail
    
    [ Upstream commit 865308373ed49c9fb05720d14cbf1315349b32a9 ]
    
    In this code, it appears that phyter_clocks is a list head, based on
    the previous list_for_each, and that clock->list is intended to be a
    list element, given that it has just been initialized in
    dp83640_clock_init.  Accordingly, switch the arguments to
    list_add_tail, which takes the list head as the second argument.
    
    Fixes: cb646e2b02b27 ("ptp: Added a clock driver for the National Semiconductor PHYTER.")
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 851ad197da60e453253525c2335bc3045ece17a0
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:03:47 2020 +1000

    USB: serial: qcserial: Add DW5816e support
    
    commit 78d6de3cfbd342918d31cf68d0d2eda401338aef upstream.
    
    Add support for Dell Wireless 5816e to drivers/usb/serial/qcserial.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
