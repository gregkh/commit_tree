commit aa13f01432a22d28998d7e2cd0d197db768db51a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Oct 17 10:05:40 2021 +0200

    Linux 4.9.287
    
    Link: https://lore.kernel.org/r/20211014145207.575041491@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0f8cf200dca27465dd78dcb040c0d508287f658
Author: Anand K Mistry <amistry@google.com>
Date:   Wed Sep 29 17:04:21 2021 +1000

    perf/x86: Reset destroy callback on event init failure
    
    [ Upstream commit 02d029a41dc986e2d5a77ecca45803857b346829 ]
    
    perf_init_event tries multiple init callbacks and does not reset the
    event state between tries. When x86_pmu_event_init runs, it
    unconditionally sets the destroy callback to hw_perf_event_destroy. On
    the next init attempt after x86_pmu_event_init, in perf_try_init_event,
    if the pmu's capabilities includes PERF_PMU_CAP_NO_EXCLUDE, the destroy
    callback will be run. However, if the next init didn't set the destroy
    callback, hw_perf_event_destroy will be run (since the callback wasn't
    reset).
    
    Looking at other pmu init functions, the common pattern is to only set
    the destroy callback on a successful init. Resetting the callback on
    failure tries to replicate that pattern.
    
    This was discovered after commit f11dd0d80555 ("perf/x86/amd/ibs: Extend
    PERF_PMU_CAP_NO_EXCLUDE to IBS Op") when the second (and only second)
    run of the perf tool after a reboot results in 0 samples being
    generated. The extra run of hw_perf_event_destroy results in
    active_events having an extra decrement on each perf run. The second run
    has active_events == 0 and every subsequent run has active_events < 0.
    When active_events == 0, the NMI handler will early-out and not record
    any samples.
    
    Signed-off-by: Anand K Mistry <amistry@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210929170405.1.I078b98ee7727f9ae9d6df8262bad7e325e40faf0@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c35598d02176a1ef0a3212f676aa082d964f221d
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sat Sep 25 00:03:30 2021 +0100

    scsi: virtio_scsi: Fix spelling mistake "Unsupport" -> "Unsupported"
    
    [ Upstream commit cced4c0ec7c06f5230a2958907a409c849762293 ]
    
    There are a couple of spelling mistakes in pr_info and pr_err messages.
    Fix them.
    
    Link: https://lore.kernel.org/r/20210924230330.143785-1-colin.king@canonical.com
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a155b6918701c70f56dcccdc833929aafbd4c6ba
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Fri Sep 24 17:51:53 2021 +0800

    scsi: ses: Fix unsigned comparison with less than zero
    
    [ Upstream commit dd689ed5aa905daf4ba4c99319a52aad6ea0a796 ]
    
    Fix the following coccicheck warning:
    
    ./drivers/scsi/ses.c:137:10-16: WARNING: Unsigned expression compared
    with zero: result > 0.
    
    Link: https://lore.kernel.org/r/1632477113-90378-1-git-send-email-jiapeng.chong@linux.alibaba.com
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2db11e4501fb078acb1e0aaf54f308a691e3156d
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Aug 27 22:42:30 2021 +0800

    mac80211: Drop frames from invalid MAC address in ad-hoc mode
    
    [ Upstream commit a6555f844549cd190eb060daef595f94d3de1582 ]
    
    WARNING: CPU: 1 PID: 9 at net/mac80211/sta_info.c:554
    sta_info_insert_rcu+0x121/0x12a0
    Modules linked in:
    CPU: 1 PID: 9 Comm: kworker/u8:1 Not tainted 5.14.0-rc7+ #253
    Workqueue: phy3 ieee80211_iface_work
    RIP: 0010:sta_info_insert_rcu+0x121/0x12a0
    ...
    Call Trace:
     ieee80211_ibss_finish_sta+0xbc/0x170
     ieee80211_ibss_work+0x13f/0x7d0
     ieee80211_iface_work+0x37a/0x500
     process_one_work+0x357/0x850
     worker_thread+0x41/0x4d0
    
    If an Ad-Hoc node receives packets with invalid source MAC address,
    it hits a WARN_ON in sta_info_insert_check(), this can spam the log.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20210827144230.39944-1-yuehaibing@huawei.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a86b3285f31f8c9e14ae00a68c8191e57217c6c6
Author: Jeremy Sowden <jeremy@azazel.net>
Date:   Sun Sep 12 22:24:33 2021 +0100

    netfilter: ip6_tables: zero-initialize fragment offset
    
    [ Upstream commit 310e2d43c3ad429c1fba4b175806cf1f55ed73a6 ]
    
    ip6tables only sets the `IP6T_F_PROTO` flag on a rule if a protocol is
    specified (`-p tcp`, for example).  However, if the flag is not set,
    `ip6_packet_match` doesn't call `ipv6_find_hdr` for the skb, in which
    case the fragment offset is left uninitialized and a garbage value is
    passed to each matcher.
    
    Signed-off-by: Jeremy Sowden <jeremy@azazel.net>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ee6e6fa9dd5f52c4f6d16363a65de3b668e51f5
Author: Mizuho Mori <morimolymoly@gmail.com>
Date:   Thu Jul 29 20:03:25 2021 +0900

    HID: apple: Fix logical maximum and usage maximum of Magic Keyboard JIS
    
    [ Upstream commit 67fd71ba16a37c663d139f5ba5296f344d80d072 ]
    
    Apple Magic Keyboard(JIS)'s Logical Maximum and Usage Maximum are wrong.
    
    Below is a report descriptor.
    
    0x05, 0x01,         /*  Usage Page (Desktop),                           */
    0x09, 0x06,         /*  Usage (Keyboard),                               */
    0xA1, 0x01,         /*  Collection (Application),                       */
    0x85, 0x01,         /*      Report ID (1),                              */
    0x05, 0x07,         /*      Usage Page (Keyboard),                      */
    0x15, 0x00,         /*      Logical Minimum (0),                        */
    0x25, 0x01,         /*      Logical Maximum (1),                        */
    0x19, 0xE0,         /*      Usage Minimum (KB Leftcontrol),             */
    0x29, 0xE7,         /*      Usage Maximum (KB Right GUI),               */
    0x75, 0x01,         /*      Report Size (1),                            */
    0x95, 0x08,         /*      Report Count (8),                           */
    0x81, 0x02,         /*      Input (Variable),                           */
    0x95, 0x05,         /*      Report Count (5),                           */
    0x75, 0x01,         /*      Report Size (1),                            */
    0x05, 0x08,         /*      Usage Page (LED),                           */
    0x19, 0x01,         /*      Usage Minimum (01h),                        */
    0x29, 0x05,         /*      Usage Maximum (05h),                        */
    0x91, 0x02,         /*      Output (Variable),                          */
    0x95, 0x01,         /*      Report Count (1),                           */
    0x75, 0x03,         /*      Report Size (3),                            */
    0x91, 0x03,         /*      Output (Constant, Variable),                */
    0x95, 0x08,         /*      Report Count (8),                           */
    0x75, 0x01,         /*      Report Size (1),                            */
    0x15, 0x00,         /*      Logical Minimum (0),                        */
    0x25, 0x01,         /*      Logical Maximum (1),                        */
    
    here is a report descriptor which is parsed one in kernel.
    see sys/kernel/debug/hid/<dev>/rdesc
    
    05 01 09 06 a1 01 85 01 05 07
    15 00 25 01 19 e0 29 e7 75 01
    95 08 81 02 95 05 75 01 05 08
    19 01 29 05 91 02 95 01 75 03
    91 03 95 08 75 01 15 00 25 01
    06 00 ff 09 03 81 03 95 06 75
    08 15 00 25 [65] 05 07 19 00 29
    [65] 81 00 95 01 75 01 15 00 25
    01 05 0c 09 b8 81 02 95 01 75
    01 06 01 ff 09 03 81 02 95 01
    75 06 81 03 06 02 ff 09 55 85
    55 15 00 26 ff 00 75 08 95 40
    b1 a2 c0 06 00 ff 09 14 a1 01
    85 90 05 84 75 01 95 03 15 00
    25 01 09 61 05 85 09 44 09 46
    81 02 95 05 81 01 75 08 95 01
    15 00 26 ff 00 09 65 81 02 c0
    00
    
    Position 64(Logical Maximum) and 70(Usage Maximum) are 101.
    Both should be 0xE7 to support JIS specific keys(„Çç, Eisu, Kana, |) support.
    position 117 is also 101 but not related(it is Usage 65h).
    
    There are no difference of product id between JIS and ANSI.
    They are same 0x0267.
    
    Signed-off-by: Mizuho Mori <morimolymoly@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bbd42e79720122334226afad9ddcac1c3e6d373
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 27 18:29:34 2020 -0700

    gup: document and work around "COW can break either way" issue
    
    commit 17839856fd588f4ab6b789f482ed3ffd7c403e1f upstream.
    
    Doing a "get_user_pages()" on a copy-on-write page for reading can be
    ambiguous: the page can be COW'ed at any time afterwards, and the
    direction of a COW event isn't defined.
    
    Yes, whoever writes to it will generally do the COW, but if the thread
    that did the get_user_pages() unmapped the page before the write (and
    that could happen due to memory pressure in addition to any outright
    action), the writer could also just take over the old page instead.
    
    End result: the get_user_pages() call might result in a page pointer
    that is no longer associated with the original VM, and is associated
    with - and controlled by - another VM having taken it over instead.
    
    So when doing a get_user_pages() on a COW mapping, the only really safe
    thing to do would be to break the COW when getting the page, even when
    only getting it for reading.
    
    At the same time, some users simply don't even care.
    
    For example, the perf code wants to look up the page not because it
    cares about the page, but because the code simply wants to look up the
    physical address of the access for informational purposes, and doesn't
    really care about races when a page might be unmapped and remapped
    elsewhere.
    
    This adds logic to force a COW event by setting FOLL_WRITE on any
    copy-on-write mapping when FOLL_GET (or FOLL_PIN) is used to get a page
    pointer as a result.
    
    The current semantics end up being:
    
     - __get_user_pages_fast(): no change. If you don't ask for a write,
       you won't break COW. You'd better know what you're doing.
    
     - get_user_pages_fast(): the fast-case "look it up in the page tables
       without anything getting mmap_sem" now refuses to follow a read-only
       page, since it might need COW breaking.  Which happens in the slow
       path - the fast path doesn't know if the memory might be COW or not.
    
     - get_user_pages() (including the slow-path fallback for gup_fast()):
       for a COW mapping, turn on FOLL_WRITE for FOLL_GET/FOLL_PIN, with
       very similar semantics to FOLL_FORCE.
    
    If it turns out that we want finer granularity (ie "only break COW when
    it might actually matter" - things like the zero page are special and
    don't need to be broken) we might need to push these semantics deeper
    into the lookup fault path.  So if people care enough, it's possible
    that we might end up adding a new internal FOLL_BREAK_COW flag to go
    with the internal FOLL_COW flag we already have for tracking "I had a
    COW".
    
    Alternatively, if it turns out that different callers might want to
    explicitly control the forced COW break behavior, we might even want to
    make such a flag visible to the users of get_user_pages() instead of
    using the above default semantics.
    
    But for now, this is mostly commentary on the issue (this commit message
    being a lot bigger than the patch, and that patch in turn is almost all
    comments), with that minimal "enable COW breaking early" logic using the
    existing FOLL_WRITE behavior.
    
    [ It might be worth noting that we've always had this ambiguity, and it
      could arguably be seen as a user-space issue.
    
      You only get private COW mappings that could break either way in
      situations where user space is doing cooperative things (ie fork()
      before an execve() etc), but it _is_ surprising and very subtle, and
      fork() is supposed to give you independent address spaces.
    
      So let's treat this as a kernel issue and make the semantics of
      get_user_pages() easier to understand. Note that obviously a true
      shared mapping will still get a page that can change under us, so this
      does _not_ mean that get_user_pages() somehow returns any "stable"
      page ]
    
    [surenb: backport notes
            Since gup_pgd_range does not exist, made appropriate changes on
            the the gup_huge_pgd, gup_huge_pd and gup_pud_range calls instead.
            Replaced (gup_flags | FOLL_WRITE) with write=1 in gup_huge_pgd,
            gup_huge_pd and gup_pud_range.
            Removed FOLL_PIN usage in should_force_cow_break since it's missing in
            the earlier kernels.]
    
    Reported-by: Jann Horn <jannh@google.com>
    Tested-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Kirill Shutemov <kirill@shutemov.name>
    Acked-by: Jan Kara <jack@suse.cz>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [surenb: backport to 4.9 kernel]
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7ca439eb9248257feb239f55d7c8fcc20a2aae4
Author: Jiri Benc <jbenc@redhat.com>
Date:   Tue Sep 14 10:54:42 2021 +0200

    i40e: fix endless loop under rtnl
    
    [ Upstream commit 857b6c6f665cca9828396d9743faf37fd09e9ac3 ]
    
    The loop in i40e_get_capabilities can never end. The problem is that
    although i40e_aq_discover_capabilities returns with an error if there's
    a firmware problem, the returned error is not checked. There is a check for
    pf->hw.aq.asq_last_status but that value is set to I40E_AQ_RC_OK on most
    firmware problems.
    
    When i40e_aq_discover_capabilities encounters a firmware problem, it will
    encounter the same problem on its next invocation. As the result, the loop
    becomes endless. We hit this with I40E_ERR_ADMIN_QUEUE_TIMEOUT but looking
    at the code, it can happen with a range of other firmware errors.
    
    I don't know what the correct behavior should be: whether the firmware
    should be retried a few times, or whether pf->hw.aq.asq_last_status should
    be always set to the encountered firmware error (but then it would be
    pointless and can be just replaced by the i40e_aq_discover_capabilities
    return value). However, the current behavior with an endless loop under the
    rtnl mutex(!) is unacceptable and Intel has not submitted a fix, although we
    explained the bug to them 7 months ago.
    
    This may not be the best possible fix but it's better than hanging the whole
    system on a firmware bug.
    
    Fixes: 56a62fc86895 ("i40e: init code and hardware support")
    Tested-by: Stefan Assmann <sassmann@redhat.com>
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Dave Switzer <david.switzer@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e3614f513f653d4040371294e6fba1452435901
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 5 14:04:17 2021 -0700

    rtnetlink: fix if_nlmsg_stats_size() under estimation
    
    [ Upstream commit d34367991933d28bd7331f67a759be9a8c474014 ]
    
    rtnl_fill_statsinfo() is filling skb with one mandatory if_stats_msg structure.
    
    nlmsg_put(skb, pid, seq, type, sizeof(struct if_stats_msg), flags);
    
    But if_nlmsg_stats_size() never considered the needed storage.
    
    This bug did not show up because alloc_skb(X) allocates skb with
    extra tailroom, because of added alignments. This could very well
    be changed in the future to have deterministic behavior.
    
    Fixes: 10c9ead9f3c6 ("rtnetlink: add new RTM_GETSTATS message to dump link stats")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Roopa Prabhu <roopa@nvidia.com>
    Acked-by: Roopa Prabhu <roopa@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df0c9418923679bc6d0060bdb1b5bf2c755159e0
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Sep 11 15:50:23 2021 +0800

    drm/nouveau/debugfs: fix file release memory leak
    
    [ Upstream commit f5a8703a9c418c6fc54eb772712dfe7641e3991c ]
    
    When using single_open() for opening, single_release() should be
    called, otherwise the 'op' allocated in single_open() will be leaked.
    
    Fixes: 6e9fc177399f ("drm/nouveau/debugfs: add copy of sysfs pstate interface ported to debugfs")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210911075023.3969054-2-yangyingliang@huawei.com
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edaf13a29304817fd3f8ce80e9c8c3ca7a09ab18
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 4 14:24:15 2021 -0700

    netlink: annotate data races around nlk->bound
    
    [ Upstream commit 7707a4d01a648e4c655101a469c956cb11273655 ]
    
    While existing code is correct, KCSAN is reporting
    a data-race in netlink_insert / netlink_sendmsg [1]
    
    It is correct to read nlk->bound without a lock, as netlink_autobind()
    will acquire all needed locks.
    
    [1]
    BUG: KCSAN: data-race in netlink_insert / netlink_sendmsg
    
    write to 0xffff8881031c8b30 of 1 bytes by task 18752 on cpu 0:
     netlink_insert+0x5cc/0x7f0 net/netlink/af_netlink.c:597
     netlink_autobind+0xa9/0x150 net/netlink/af_netlink.c:842
     netlink_sendmsg+0x479/0x7c0 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:703 [inline]
     sock_sendmsg net/socket.c:723 [inline]
     ____sys_sendmsg+0x360/0x4d0 net/socket.c:2392
     ___sys_sendmsg net/socket.c:2446 [inline]
     __sys_sendmsg+0x1ed/0x270 net/socket.c:2475
     __do_sys_sendmsg net/socket.c:2484 [inline]
     __se_sys_sendmsg net/socket.c:2482 [inline]
     __x64_sys_sendmsg+0x42/0x50 net/socket.c:2482
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    read to 0xffff8881031c8b30 of 1 bytes by task 18751 on cpu 1:
     netlink_sendmsg+0x270/0x7c0 net/netlink/af_netlink.c:1891
     sock_sendmsg_nosec net/socket.c:703 [inline]
     sock_sendmsg net/socket.c:723 [inline]
     __sys_sendto+0x2a8/0x370 net/socket.c:2019
     __do_sys_sendto net/socket.c:2031 [inline]
     __se_sys_sendto net/socket.c:2027 [inline]
     __x64_sys_sendto+0x74/0x90 net/socket.c:2027
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x00 -> 0x01
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 18751 Comm: syz-executor.0 Not tainted 5.14.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: da314c9923fe ("netlink: Replace rhash_portid with bound")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49c85ce900ff33de115fabdd06983e955b093243
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 4 18:05:07 2021 -0700

    net: bridge: use nla_total_size_64bit() in br_get_linkxstats_size()
    
    [ Upstream commit dbe0b88064494b7bb6a9b2aa7e085b14a3112d44 ]
    
    bridge_fill_linkxstats() is using nla_reserve_64bit().
    
    We must use nla_total_size_64bit() instead of nla_total_size()
    for corresponding data structure.
    
    Fixes: 1080ab95e3c7 ("net: bridge: add support for IGMP/MLD stats and export them via netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Nikolay Aleksandrov <nikolay@nvidia.com>
    Cc: Vivien Didelot <vivien.didelot@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a9475a585c4657d7fd8fa59bd54b3b33fdb68a9
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue Sep 28 15:49:40 2021 +0200

    ARM: imx6: disable the GIC CPU interface before calling stby-poweroff sequence
    
    [ Upstream commit 783f3db030563f7bcdfe2d26428af98ea1699a8e ]
    
    Any pending interrupt can prevent entering standby based power off state.
    To avoid it, disable the GIC CPU interface.
    
    Fixes: 8148d2136002 ("ARM: imx6: register pm_power_off handler if "fsl,pmic-stby-poweroff" is set")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb71a4fd3e56ebebe9374a007f5d5a8e8cc378a9
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Oct 1 19:20:33 2021 +0300

    ptp_pch: Load module automatically if ID matches
    
    [ Upstream commit 7cd8b1542a7ba0720c5a0a85ed414a122015228b ]
    
    The driver can't be loaded automatically because it misses
    module alias to be provided. Add corresponding MODULE_DEVICE_TABLE()
    call to the driver.
    
    Fixes: 863d08ece9bf ("supports eg20t ptp clock")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a1721a7d3071a883c212a4bee54d3e1831eb312
Author: Pali Roh√°r <pali@kernel.org>
Date:   Sat Oct 2 11:04:09 2021 +0200

    powerpc/fsl/dts: Fix phy-connection-type for fm1mac3
    
    [ Upstream commit eed183abc0d3b8adb64fd1363b7cea7986cd58d6 ]
    
    Property phy-connection-type contains invalid value "sgmii-2500" per scheme
    defined in file ethernet-controller.yaml.
    
    Correct phy-connection-type value should be "2500base-x".
    
    Signed-off-by: Pali Roh√°r <pali@kernel.org>
    Fixes: 84e0f1c13806 ("powerpc/mpc85xx: Add MDIO bus muxing support to the board device tree(s)")
    Acked-by: Scott Wood <oss@buserror.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08d7056e8e250fd2e67dbea5be5fdecdd75bf6b4
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Sep 30 14:22:39 2021 -0700

    net_sched: fix NULL deref in fifo_set_limit()
    
    [ Upstream commit 560ee196fe9e5037e5015e2cdb14b3aecb1cd7dc ]
    
    syzbot reported another NULL deref in fifo_set_limit() [1]
    
    I could repro the issue with :
    
    unshare -n
    tc qd add dev lo root handle 1:0 tbf limit 200000 burst 70000 rate 100Mbit
    tc qd replace dev lo parent 1:0 pfifo_fast
    tc qd change dev lo root handle 1:0 tbf limit 300000 burst 70000 rate 100Mbit
    
    pfifo_fast does not have a change() operation.
    Make fifo_set_limit() more robust about this.
    
    [1]
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    PGD 1cf99067 P4D 1cf99067 PUD 7ca49067 PMD 0
    Oops: 0010 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 14443 Comm: syz-executor959 Not tainted 5.15.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:0x0
    Code: Unable to access opcode bytes at RIP 0xffffffffffffffd6.
    RSP: 0018:ffffc9000e2f7310 EFLAGS: 00010246
    RAX: dffffc0000000000 RBX: ffffffff8d6ecc00 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: ffff888024c27910 RDI: ffff888071e34000
    RBP: ffff888071e34000 R08: 0000000000000001 R09: ffffffff8fcfb947
    R10: 0000000000000001 R11: 0000000000000000 R12: ffff888024c27910
    R13: ffff888071e34018 R14: 0000000000000000 R15: ffff88801ef74800
    FS:  00007f321d897700(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffffffffffd6 CR3: 00000000722c3000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     fifo_set_limit net/sched/sch_fifo.c:242 [inline]
     fifo_set_limit+0x198/0x210 net/sched/sch_fifo.c:227
     tbf_change+0x6ec/0x16d0 net/sched/sch_tbf.c:418
     qdisc_change net/sched/sch_api.c:1332 [inline]
     tc_modify_qdisc+0xd9a/0x1a60 net/sched/sch_api.c:1634
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5572
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2504
     netlink_unicast_kernel net/netlink/af_netlink.c:1314 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1340
     netlink_sendmsg+0x86d/0xdb0 net/netlink/af_netlink.c:1929
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2409
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2463
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2492
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fixes: fb0305ce1b03 ("net-sched: consolidate default fifo qdisc setup")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20210930212239.3430364-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2250392d930bd0d989f24d355d6355b0150256e7
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Thu Sep 30 20:50:28 2021 +0300

    phy: mdio: fix memory leak
    
    [ Upstream commit ca6e11c337daf7925ff8a2aac8e84490a8691905 ]
    
    Syzbot reported memory leak in MDIO bus interface, the problem was in
    wrong state logic.
    
    MDIOBUS_ALLOCATED indicates 2 states:
            1. Bus is only allocated
            2. Bus allocated and __mdiobus_register() fails, but
               device_register() was called
    
    In case of device_register() has been called we should call put_device()
    to correctly free the memory allocated for this device, but mdiobus_free()
    calls just kfree(dev) in case of MDIOBUS_ALLOCATED state
    
    To avoid this behaviour we need to set bus->state to MDIOBUS_UNREGISTERED
    _before_ calling device_register(), because put_device() should be
    called even in case of device_register() failure.
    
    Link: https://lore.kernel.org/netdev/YVMRWNDZDUOvQjHL@shell.armlinux.org.uk/
    Fixes: 46abc02175b3 ("phylib: give mdio buses a device tree presence")
    Reported-and-tested-by: syzbot+398e7dc692ddbbb4cfec@syzkaller.appspotmail.com
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Link: https://lore.kernel.org/r/eceae1429fbf8fa5c73dd2a0d39d525aa905074d.1633024062.git.paskripkin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fd6663eb01bc3c73143cd27fefd7b8351bc6aa6
Author: Tatsuhiko Yasumatsu <th.yasumatsu@gmail.com>
Date:   Thu Sep 30 22:55:45 2021 +0900

    bpf: Fix integer overflow in prealloc_elems_and_freelist()
    
    [ Upstream commit 30e29a9a2bc6a4888335a6ede968b75cd329657a ]
    
    In prealloc_elems_and_freelist(), the multiplication to calculate the
    size passed to bpf_map_area_alloc() could lead to an integer overflow.
    As a result, out-of-bounds write could occur in pcpu_freelist_populate()
    as reported by KASAN:
    
    [...]
    [   16.968613] BUG: KASAN: slab-out-of-bounds in pcpu_freelist_populate+0xd9/0x100
    [   16.969408] Write of size 8 at addr ffff888104fc6ea0 by task crash/78
    [   16.970038]
    [   16.970195] CPU: 0 PID: 78 Comm: crash Not tainted 5.15.0-rc2+ #1
    [   16.970878] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
    [   16.972026] Call Trace:
    [   16.972306]  dump_stack_lvl+0x34/0x44
    [   16.972687]  print_address_description.constprop.0+0x21/0x140
    [   16.973297]  ? pcpu_freelist_populate+0xd9/0x100
    [   16.973777]  ? pcpu_freelist_populate+0xd9/0x100
    [   16.974257]  kasan_report.cold+0x7f/0x11b
    [   16.974681]  ? pcpu_freelist_populate+0xd9/0x100
    [   16.975190]  pcpu_freelist_populate+0xd9/0x100
    [   16.975669]  stack_map_alloc+0x209/0x2a0
    [   16.976106]  __sys_bpf+0xd83/0x2ce0
    [...]
    
    The possibility of this overflow was originally discussed in [0], but
    was overlooked.
    
    Fix the integer overflow by changing elem_size to u64 from u32.
    
      [0] https://lore.kernel.org/bpf/728b238e-a481-eb50-98e9-b0f430ab01e7@gmail.com/
    
    Fixes: 557c0c6e7df8 ("bpf: convert stackmap to pre-allocation")
    Signed-off-by: Tatsuhiko Yasumatsu <th.yasumatsu@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20210930135545.173698-1-th.yasumatsu@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 056fddf9aa1f74ad8ed809783b90527616339cc0
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Sep 27 09:46:33 2021 -0700

    xtensa: call irqchip_init only when CONFIG_USE_OF is selected
    
    [ Upstream commit 6489f8d0e1d93a3603d8dad8125797559e4cf2a2 ]
    
    During boot time kernel configured with OF=y but USE_OF=n displays the
    following warnings and hangs shortly after starting userspace:
    
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/irq/irqdomain.c:695 irq_create_mapping_affinity+0x29/0xc0
    irq_create_mapping_affinity(, 6) called with NULL domain
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.15.0-rc3-00001-gd67ed2510d28 #30
    Call Trace:
      __warn+0x69/0xc4
      warn_slowpath_fmt+0x6c/0x94
      irq_create_mapping_affinity+0x29/0xc0
      local_timer_setup+0x40/0x88
      time_init+0xb1/0xe8
      start_kernel+0x31d/0x3f4
      _startup+0x13b/0x13b
    ---[ end trace 1e6630e1c5eda35b ]---
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at arch/xtensa/kernel/time.c:141 local_timer_setup+0x58/0x88
    error: can't map timer irq
    CPU: 0 PID: 0 Comm: swapper Tainted: G        W         5.15.0-rc3-00001-gd67ed2510d28 #30
    Call Trace:
      __warn+0x69/0xc4
      warn_slowpath_fmt+0x6c/0x94
      local_timer_setup+0x58/0x88
      time_init+0xb1/0xe8
      start_kernel+0x31d/0x3f4
      _startup+0x13b/0x13b
    ---[ end trace 1e6630e1c5eda35c ]---
    Failed to request irq 0 (timer)
    
    Fix that by calling irqchip_init only when CONFIG_USE_OF is selected and
    calling legacy interrupt controller init otherwise.
    
    Fixes: da844a81779e ("xtensa: add device trees support")
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a560c307f41b63a41c5a89ade695afc4110dcbb4
Author: Roger Quadros <rogerq@kernel.org>
Date:   Thu Sep 2 12:58:28 2021 +0300

    ARM: dts: omap3430-sdp: Fix NAND device node
    
    commit 80d680fdccba214e8106dc1aa33de5207ad75394 upstream.
    
    Nand is on CS1 so reg properties first field should be 1 not 0.
    
    Fixes: 44e4716499b8 ("ARM: dts: omap3: Fix NAND device nodes")
    Cc: stable@vger.kernel.org # v4.6+
    Signed-off-by: Roger Quadros <rogerq@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a996d4364ed849faf665c91f114aeaadedf1b9
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Thu Sep 30 15:44:41 2021 -0400

    nfsd4: Handle the NFSv4 READDIR 'dircount' hint being zero
    
    commit f2e717d655040d632c9015f19aa4275f8b16e7f2 upstream.
    
    RFC3530 notes that the 'dircount' field may be zero, in which case the
    recommendation is to ignore it, and only enforce the 'maxcount' field.
    In RFC5661, this recommendation to ignore a zero valued field becomes a
    requirement.
    
    Fixes: aee377644146 ("nfsd4: fix rd_dircount enforcement")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 286f94453fb34f7bd6b696861c89f9a13f498721
Author: Zheng Liang <zhengliang6@huawei.com>
Date:   Fri Sep 24 09:16:27 2021 +0800

    ovl: fix missing negative dentry check in ovl_rename()
    
    commit a295aef603e109a47af355477326bd41151765b6 upstream.
    
    The following reproducer
    
      mkdir lower upper work merge
      touch lower/old
      touch lower/new
      mount -t overlay overlay -olowerdir=lower,upperdir=upper,workdir=work merge
      rm merge/new
      mv merge/old merge/new & unlink upper/new
    
    may result in this race:
    
    PROCESS A:
      rename("merge/old", "merge/new");
      overwrite=true,ovl_lower_positive(old)=true,
      ovl_dentry_is_whiteout(new)=true -> flags |= RENAME_EXCHANGE
    
    PROCESS B:
      unlink("upper/new");
    
    PROCESS A:
      lookup newdentry in new_upperdir
      call vfs_rename() with negative newdentry and RENAME_EXCHANGE
    
    Fix by adding the missing check for negative newdentry.
    
    Signed-off-by: Zheng Liang <zhengliang6@huawei.com>
    Fixes: e9be9d5e76e3 ("overlay filesystem")
    Cc: <stable@vger.kernel.org> # v3.18
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29e0a6c4d9b98e2ebc9130bc391ed72aafe1786f
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Sep 29 11:09:37 2021 +0200

    USB: cdc-acm: fix break reporting
    
    commit 58fc1daa4d2e9789b9ffc880907c961ea7c062cc upstream.
    
    A recent change that started reporting break events forgot to push the
    event to the line discipline, which meant that a detected break would
    not be reported until further characters had been receive (the port
    could even have been closed and reopened in between).
    
    Fixes: 08dff274edda ("cdc-acm: fix BREAK rx code path adding necessary calls")
    Cc: stable@vger.kernel.org
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210929090937.7410-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4724fe0c147316e0da40e28f53ed170b40dcc9e4
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Sep 29 11:09:36 2021 +0200

    USB: cdc-acm: fix racy tty buffer accesses
    
    commit 65a205e6113506e69a503b61d97efec43fc10fd7 upstream.
    
    A recent change that started reporting break events to the line
    discipline caused the tty-buffer insertions to no longer be serialised
    by inserting events also from the completion handler for the interrupt
    endpoint.
    
    Completion calls for distinct endpoints are not guaranteed to be
    serialised. For example, in case a host-controller driver uses
    bottom-half completion, the interrupt and bulk-in completion handlers
    can end up running in parallel on two CPUs (high-and low-prio tasklets,
    respectively) thereby breaking the tty layer's single producer
    assumption.
    
    Fix this by holding the read lock also when inserting characters from
    the bulk endpoint.
    
    Fixes: 08dff274edda ("cdc-acm: fix BREAK rx code path adding necessary calls")
    Cc: stable@vger.kernel.org
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210929090937.7410-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fde6a07d29b1964bef04372b96c1296d5a8b30d
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Tue Sep 21 16:34:42 2021 +0200

    Partially revert "usb: Kconfig: using select for USB_COMMON dependency"
    
    commit 4d1aa9112c8e6995ef2c8a76972c9671332ccfea upstream.
    
    This reverts commit cb9c1cfc86926d0e86d19c8e34f6c23458cd3478 for
    USB_LED_TRIG.  This config symbol has bool type and enables extra code
    in usb_common itself, not a separate driver.  Enabling it should not
    force usb_common to be built-in!
    
    Fixes: cb9c1cfc8692 ("usb: Kconfig: using select for USB_COMMON dependency")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Salvatore Bonaccorso <carnil@debian.org>
    Link: https://lore.kernel.org/r/20210921143442.340087-1-carnil@debian.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
