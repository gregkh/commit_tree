commit 0d7866d54a2c2d708807930c3bfd38ab3ce0550d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 6 17:31:37 2019 +0100

    Linux 4.14.98

commit 515160e3c4f2aa7e62963546b1e94d1c0a841df9
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Tue Oct 30 20:29:53 2018 +0200

    fanotify: fix handling of events on child sub-directory
    
    commit b469e7e47c8a075cc08bcd1e85d4365134bdcdd5 upstream.
    
    When an event is reported on a sub-directory and the parent inode has
    a mark mask with FS_EVENT_ON_CHILD|FS_ISDIR, the event will be sent to
    fsnotify() even if the event type is not in the parent mark mask
    (e.g. FS_OPEN).
    
    Further more, if that event happened on a mount or a filesystem with
    a mount/sb mark that does have that event type in their mask, the "on
    child" event will be reported on the mount/sb mark.  That is not
    desired, because user will get a duplicate event for the same action.
    
    Note that the event reported on the victim inode is never merged with
    the event reported on the parent inode, because of the check in
    should_merge(): old_fsn->inode == new_fsn->inode.
    
    Fix this by looking for a match of an actual event type (i.e. not just
    FS_ISDIR) in parent's inode mark mask and by not reporting an "on child"
    event to group if event type is only found on mount/sb marks.
    
    [backport hint: The bug seems to have always been in fanotify, but this
                    patch will only apply cleanly to v4.19.y]
    
    Cc: <stable@vger.kernel.org> # v4.19
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    [amir: backport to v4.9]
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f4da60e2133d85485c9fd4132d34dd6e6b1ebeb
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue Jul 10 10:29:10 2018 +1000

    drivers: core: Remove glue dirs from sysfs earlier
    
    commit 726e41097920a73e4c7c33385dcc0debb1281e18 upstream.
    
    For devices with a class, we create a "glue" directory between
    the parent device and the new device with the class name.
    
    This directory is never "explicitely" removed when empty however,
    this is left to the implicit sysfs removal done by kobject_release()
    when the object loses its last reference via kobject_put().
    
    This is problematic because as long as it's not been removed from
    sysfs, it is still present in the class kset and in sysfs directory
    structure.
    
    The presence in the class kset exposes a use after free bug fixed
    by the previous patch, but the presence in sysfs means that until
    the kobject is released, which can take a while (especially with
    kobject debugging), any attempt at re-creating such as binding a
    new device for that class/parent pair, will result in a sysfs
    duplicate file name error.
    
    This fixes it by instead doing an explicit kobject_del() when
    the glue dir is empty, by keeping track of the number of
    child devices of the gluedir.
    
    This is made easy by the fact that all glue dir operations are
    done with a global mutex, and there's already a function
    (cleanup_glue_dir) called in all the right places taking that
    mutex that can be enhanced for this. It appears that this was
    in fact the intent of the function, but the implementation was
    wrong.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <groeck@google.com>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 834adff8b5a711e6e934e75407e88fa4dc123d34
Author: Paulo Alcantara <paulo@paulo.ac>
Date:   Tue Nov 20 15:16:36 2018 -0200

    cifs: Always resolve hostname before reconnecting
    
    commit 28eb24ff75c5ac130eb326b3b4d0dcecfc0f427d upstream.
    
    In case a hostname resolves to a different IP address (e.g. long
    running mounts), make sure to resolve it every time prior to calling
    generic_ip_connect() in reconnect.
    
    Suggested-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Paulo Alcantara <palcantara@suse.de>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fafc8e09d1e92351969ab6d2ad237f3c266fe2d8
Author: Alexei Naberezhnov <anaberezhnov@fb.com>
Date:   Tue Mar 27 16:54:16 2018 -0700

    md/raid5: fix 'out of memory' during raid cache recovery
    
    commit 483cbbeddd5fe2c80fd4141ff0748fa06c4ff146 upstream.
    
    This fixes the case when md array assembly fails because of raid cache recovery
    unable to allocate a stripe, despite attempts to replay stripes and increase
    cache size. This happens because stripes released by r5c_recovery_replay_stripes
    and raid5_set_cache_size don't become available for allocation immediately.
    Released stripes first are placed on conf->released_stripes list and require
    md thread to merge them on conf->inactive_list before they can be allocated.
    
    Patch allows final allocation attempt during cache recovery to wait for
    new stripes to become availabe for allocation.
    
    Cc: linux-raid@vger.kernel.org
    Cc: Shaohua Li <shli@kernel.org>
    Cc: linux-stable <stable@vger.kernel.org> # 4.10+
    Fixes: b4c625c67362 ("md/r5cache: r5cache recovery: part 1")
    Signed-off-by: Alexei Naberezhnov <anaberezhnov@fb.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ebbe06b6a56e18054e533f59d56ad00142ab5f7
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Feb 1 14:21:19 2019 -0800

    mm: migrate: don't rely on __PageMovable() of newpage after unlocking it
    
    commit e0a352fabce61f730341d119fbedf71ffdb8663f upstream.
    
    We had a race in the old balloon compaction code before b1123ea6d3b3
    ("mm: balloon: use general non-lru movable page feature") refactored it
    that became visible after backporting 195a8c43e93d ("virtio-balloon:
    deflate via a page list") without the refactoring.
    
    The bug existed from commit d6d86c0a7f8d ("mm/balloon_compaction:
    redesign ballooned pages management") till b1123ea6d3b3 ("mm: balloon:
    use general non-lru movable page feature").  d6d86c0a7f8d
    ("mm/balloon_compaction: redesign ballooned pages management") was
    backported to 3.12, so the broken kernels are stable kernels [3.12 -
    4.7].
    
    There was a subtle race between dropping the page lock of the newpage in
    __unmap_and_move() and checking for __is_movable_balloon_page(newpage).
    
    Just after dropping this page lock, virtio-balloon could go ahead and
    deflate the newpage, effectively dequeueing it and clearing PageBalloon,
    in turn making __is_movable_balloon_page(newpage) fail.
    
    This resulted in dropping the reference of the newpage via
    putback_lru_page(newpage) instead of put_page(newpage), leading to
    page->lru getting modified and a !LRU page ending up in the LRU lists.
    With 195a8c43e93d ("virtio-balloon: deflate via a page list")
    backported, one would suddenly get corrupted lists in
    release_pages_balloon():
    
    - WARNING: CPU: 13 PID: 6586 at lib/list_debug.c:59 __list_del_entry+0xa1/0xd0
    - list_del corruption. prev->next should be ffffe253961090a0, but was dead000000000100
    
    Nowadays this race is no longer possible, but it is hidden behind very
    ugly handling of __ClearPageMovable() and __PageMovable().
    
    __ClearPageMovable() will not make __PageMovable() fail, only
    PageMovable().  So the new check (__PageMovable(newpage)) will still
    hold even after newpage was dequeued by virtio-balloon.
    
    If anybody would ever change that special handling, the BUG would be
    introduced again.  So instead, make it explicit and use the information
    of the original isolated page before migration.
    
    This patch can be backported fairly easy to stable kernels (in contrast
    to the refactoring).
    
    Link: http://lkml.kernel.org/r/20190129233217.10747-1-david@redhat.com
    Fixes: d6d86c0a7f8d ("mm/balloon_compaction: redesign ballooned pages management")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reported-by: Vratislav Bendel <vbendel@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Vratislav Bendel <vbendel@redhat.com>
    Cc: Rafael Aquini <aquini@redhat.com>
    Cc: Konstantin Khlebnikov <k.khlebnikov@samsung.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: <stable@vger.kernel.org>    [3.12 - 4.7]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0783205e1fb651f405e0421a7972011b05cc3460
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Fri Feb 1 14:21:08 2019 -0800

    mm: hwpoison: use do_send_sig_info() instead of force_sig()
    
    commit 6376360ecbe525a9c17b3d081dfd88ba3e4ed65b upstream.
    
    Currently memory_failure() is racy against process's exiting, which
    results in kernel crash by null pointer dereference.
    
    The root cause is that memory_failure() uses force_sig() to forcibly
    kill asynchronous (meaning not in the current context) processes.  As
    discussed in thread https://lkml.org/lkml/2010/6/8/236 years ago for OOM
    fixes, this is not a right thing to do.  OOM solves this issue by using
    do_send_sig_info() as done in commit d2d393099de2 ("signal:
    oom_kill_task: use SEND_SIG_FORCED instead of force_sig()"), so this
    patch is suggesting to do the same for hwpoison.  do_send_sig_info()
    properly accesses to siglock with lock_task_sighand(), so is free from
    the reported race.
    
    I confirmed that the reported bug reproduces with inserting some delay
    in kill_procs(), and it never reproduces with this patch.
    
    Note that memory_failure() can send another type of signal using
    force_sig_mceerr(), and the reported race shouldn't happen on it because
    force_sig_mceerr() is called only for synchronous processes (i.e.
    BUS_MCEERR_AR happens only when some process accesses to the corrupted
    memory.)
    
    Link: http://lkml.kernel.org/r/20190116093046.GA29835@hori1.linux.bs1.fc.nec.co.jp
    Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Reported-by: Jane Chu <jane.chu@oracle.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: William Kucharski <william.kucharski@oracle.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43f7e8bea6ea0b5d340badf4f608642c670e696e
Author: Shakeel Butt <shakeelb@google.com>
Date:   Fri Feb 1 14:20:54 2019 -0800

    mm, oom: fix use-after-free in oom_kill_process
    
    commit cefc7ef3c87d02fc9307835868ff721ea12cc597 upstream.
    
    Syzbot instance running on upstream kernel found a use-after-free bug in
    oom_kill_process.  On further inspection it seems like the process
    selected to be oom-killed has exited even before reaching
    read_lock(&tasklist_lock) in oom_kill_process().  More specifically the
    tsk->usage is 1 which is due to get_task_struct() in oom_evaluate_task()
    and the put_task_struct within for_each_thread() frees the tsk and
    for_each_thread() tries to access the tsk.  The easiest fix is to do
    get/put across the for_each_thread() on the selected task.
    
    Now the next question is should we continue with the oom-kill as the
    previously selected task has exited? However before adding more
    complexity and heuristics, let's answer why we even look at the children
    of oom-kill selected task? The select_bad_process() has already selected
    the worst process in the system/memcg.  Due to race, the selected
    process might not be the worst at the kill time but does that matter?
    The userspace can use the oom_score_adj interface to prefer children to
    be killed before the parent.  I looked at the history but it seems like
    this is there before git history.
    
    Link: http://lkml.kernel.org/r/20190121215850.221745-1-shakeelb@google.com
    Reported-by: syzbot+7fbbfa368521945f0e3d@syzkaller.appspotmail.com
    Fixes: 6b0c81b3be11 ("mm, oom: reduce dependency on tasklist_lock")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 731785481a5af2475e0f0b2d6935718800653325
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Feb 1 14:20:31 2019 -0800

    oom, oom_reaper: do not enqueue same task twice
    
    commit 9bcdeb51bd7d2ae9fe65ea4d60643d2aeef5bfe3 upstream.
    
    Arkadiusz reported that enabling memcg's group oom killing causes
    strange memcg statistics where there is no task in a memcg despite the
    number of tasks in that memcg is not 0.  It turned out that there is a
    bug in wake_oom_reaper() which allows enqueuing same task twice which
    makes impossible to decrease the number of tasks in that memcg due to a
    refcount leak.
    
    This bug existed since the OOM reaper became invokable from
    task_will_free_mem(current) path in out_of_memory() in Linux 4.7,
    
      T1@P1     |T2@P1     |T3@P1     |OOM reaper
      ----------+----------+----------+------------
                                       # Processing an OOM victim in a different memcg domain.
                            try_charge()
                              mem_cgroup_out_of_memory()
                                mutex_lock(&oom_lock)
                 try_charge()
                   mem_cgroup_out_of_memory()
                     mutex_lock(&oom_lock)
      try_charge()
        mem_cgroup_out_of_memory()
          mutex_lock(&oom_lock)
                                out_of_memory()
                                  oom_kill_process(P1)
                                    do_send_sig_info(SIGKILL, @P1)
                                    mark_oom_victim(T1@P1)
                                    wake_oom_reaper(T1@P1) # T1@P1 is enqueued.
                                mutex_unlock(&oom_lock)
                     out_of_memory()
                       mark_oom_victim(T2@P1)
                       wake_oom_reaper(T2@P1) # T2@P1 is enqueued.
                     mutex_unlock(&oom_lock)
          out_of_memory()
            mark_oom_victim(T1@P1)
            wake_oom_reaper(T1@P1) # T1@P1 is enqueued again due to oom_reaper_list == T2@P1 && T1@P1->oom_reaper_list == NULL.
          mutex_unlock(&oom_lock)
                                       # Completed processing an OOM victim in a different memcg domain.
                                       spin_lock(&oom_reaper_lock)
                                       # T1P1 is dequeued.
                                       spin_unlock(&oom_reaper_lock)
    
    but memcg's group oom killing made it easier to trigger this bug by
    calling wake_oom_reaper() on the same task from one out_of_memory()
    request.
    
    Fix this bug using an approach used by commit 855b018325737f76 ("oom,
    oom_reaper: disable oom_reaper for oom_kill_allocating_task").  As a
    side effect of this patch, this patch also avoids enqueuing multiple
    threads sharing memory via task_will_free_mem(current) path.
    
    Link: http://lkml.kernel.org/r/e865a044-2c10-9858-f4ef-254bc71d6cc2@i-love.sakura.ne.jp
    Link: http://lkml.kernel.org/r/5ee34fc6-1485-34f8-8790-903ddabaa809@i-love.sakura.ne.jp
    Fixes: af8e15cc85a25315 ("oom, oom_reaper: do not enqueue task if it is on the oom_reaper_list head")
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: Arkadiusz Miskiewicz <arekm@maven.pl>
    Tested-by: Arkadiusz Miskiewicz <arekm@maven.pl>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Aleksa Sarai <asarai@suse.de>
    Cc: Jay Kamat <jgkamat@fb.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d98fc4d190f4e02f71ac4a52413fee028acaa8c
Author: Andrei Vagin <avagin@gmail.com>
Date:   Fri Feb 1 14:20:24 2019 -0800

    kernel/exit.c: release ptraced tasks before zap_pid_ns_processes
    
    commit 8fb335e078378c8426fabeed1ebee1fbf915690c upstream.
    
    Currently, exit_ptrace() adds all ptraced tasks in a dead list, then
    zap_pid_ns_processes() waits on all tasks in a current pidns, and only
    then are tasks from the dead list released.
    
    zap_pid_ns_processes() can get stuck on waiting tasks from the dead
    list.  In this case, we will have one unkillable process with one or
    more dead children.
    
    Thanks to Oleg for the advice to release tasks in find_child_reaper().
    
    Link: http://lkml.kernel.org/r/20190110175200.12442-1-avagin@gmail.com
    Fixes: 7c8bd2322c7f ("exit: ptrace: shift "reap dead" code from exit_ptrace() to forget_original_parent()")
    Signed-off-by: Andrei Vagin <avagin@gmail.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28f4952ab7ff4f9494eae1fa4ee72a98ecd384b2
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sun Dec 23 21:59:17 2018 +0100

    mmc: sdhci-iproc: handle mmc_of_parse() errors during probe
    
    commit 2bd44dadd5bfb4135162322fd0b45a174d4ad5bf upstream.
    
    We need to handle mmc_of_parse() errors during probe.
    
    This finally fixes the wifi regression on Raspberry Pi 3 series.
    In error case the wifi chip was permanently in reset because of
    the power sequence depending on the deferred probe of the GPIO expander.
    
    Fixes: b580c52d58d9 ("mmc: sdhci-iproc: add IPROC SDHCI driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b3dba9ba8b2717229489ba45943b46ad75da003
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Wed Oct 31 17:21:28 2018 -0700

    platform/x86: asus-nb-wmi: Drop mapping of 0x33 and 0x34 scan codes
    
    [ Upstream commit 71b12beaf12f21a53bfe100795d0797f1035b570 ]
    
    According to Asus firmware engineers, the meaning of these codes is only
    to notify the OS that the screen brightness has been turned on/off by
    the EC. This does not match the meaning of KEY_DISPLAYTOGGLE /
    KEY_DISPLAY_OFF, where userspace is expected to change the display
    brightness.
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 420c41ca488ba068c31c40537b4938f409277986
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Wed Oct 31 17:21:27 2018 -0700

    platform/x86: asus-nb-wmi: Map 0x35 to KEY_SCREENLOCK
    
    [ Upstream commit b3f2f3799a972d3863d0fdc2ab6287aef6ca631f ]
    
    When the OS registers to handle events from the display off hotkey the
    EC will send a notification with 0x35 for every key press, independent
    of the backlight state.
    
    The behavior of this key on Windows, with the ATKACPI driver from Asus
    installed, is turning off the backlight of all connected displays with a
    fading effect, and any cursor input or key press turning the backlight
    back on. The key press or cursor input that wakes up the display is also
    passed through to the application under the cursor or under focus.
    
    The key that matches this behavior the closest is KEY_SCREENLOCK.
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31ba885621f23a53c8651665ae04e716c0a30694
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Thu Jan 17 12:42:04 2019 -0800

    IB/hfi1: Remove overly conservative VM_EXEC flag check
    
    commit 7709b0dc265f28695487712c45f02bbd1f98415d upstream.
    
    Applications that use the stack for execution purposes cause userspace PSM
    jobs to fail during mmap().
    
    Both Fortran (non-standard format parsing) and C (callback functions
    located in the stack) applications can be written such that stack
    execution is required. The linker notes this via the gnu_stack ELF flag.
    
    This causes READ_IMPLIES_EXEC to be set which forces all PROT_READ mmaps
    to have PROT_EXEC for the process.
    
    Checking for VM_EXEC bit and failing the request with EPERM is overly
    conservative and will break any PSM application using executable stacks.
    
    Cc: <stable@vger.kernel.org> #v4.14+
    Fixes: 12220267645c ("IB/hfi: Protect against writable mmap")
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a93404876d977150b37854b7c49253d9bcf6e726
Author: Kailang Yang <kailang@realtek.com>
Date:   Tue Jan 29 15:38:21 2019 +0800

    ALSA: hda/realtek - Fixed hp_pin no value
    
    commit 693abe11aa6b27aed6eb8222162f8fb986325cef upstream.
    
    Fix hp_pin always no value.
    
    [More notes on the changes:
    
     The hp_pin value that is referred in alc294_hp_init() is always zero
     at the moment the function gets called, hence this is actually
     useless as in the current code.
    
     And, this kind of init sequence should be called from the codec init
     callback, instead of the parser function.  So, the first fix in this
     patch to move the call call into its own init_hook.
    
     OTOH, this function is needed to be called only once after the boot,
     and it'd take too long for invoking at each resume (where the init
     callback gets called).  So we add a new flag and invoke this only
     once as an additional fix.
    
     The one case is still not covered, though: S4 resume.  But this
     change itself won't lead to any regression in that regard, so we
     leave S4 issue as is for now and fix it later.  -- tiwai ]
    
    Fixes: bde1a7459623 ("ALSA: hda/realtek - Fixed headphone issue for ALC700")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6af069a10b9513b338582e310802225da145f7d8
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Jan 19 16:31:00 2019 +0100

    mmc: bcm2835: Fix DMA channel leak on probe error
    
    commit 8c9620b1cc9b69e82fa8d4081d646d0016b602e7 upstream.
    
    The BCM2835 MMC host driver requests a DMA channel on probe but neglects
    to release the channel in the probe error path.  The channel may
    therefore be leaked, in particular if devm_clk_get() causes probe
    deferral.  Fix it.
    
    Fixes: 660fc733bd74 ("mmc: bcm2835: Add new driver for the sdhost controller.")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v4.12+
    Cc: Frank Pavlic <f.pavlic@kunbus.de>
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cb3a9220995cfb6234e664a5fa0f001e5ad2256
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Wed Jan 30 21:30:36 2019 +0100

    gfs2: Revert "Fix loop in gfs2_rbm_find"
    
    commit e74c98ca2d6ae4376cc15fa2a22483430909d96b upstream.
    
    This reverts commit 2d29f6b96d8f80322ed2dd895bca590491c38d34.
    
    It turns out that the fix can lead to a ~20 percent performance regression
    in initial writes to the page cache according to iozone.  Let's revert this
    for now to have more time for a proper fix.
    
    Cc: stable@vger.kernel.org # v3.13+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25f13440ddbcc27c5bcad54382be9b1ac7ea19f6
Author: Roger Quadros <rogerq@ti.com>
Date:   Wed Jan 9 11:11:24 2019 +0200

    gpio: pcf857x: Fix interrupts on multiple instances
    
    commit 2486e67374aa8b7854c2de32869642c2873b3d53 upstream.
    
    When multiple instances of pcf857x chips are present, a fix up
    message [1] is printed during the probe of the 2nd and later
    instances.
    
    The issue is that the driver is using the same irq_chip data
    structure between multiple instances.
    
    Fix this by allocating the irq_chip data structure per instance.
    
    [1] fix up message addressed by this patch
    [    1.212100] gpio gpiochip9: (pcf8575): detected irqchip that is shared with multiple gpiochips: please fix the driver.
    
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e68ff516346d37496ed4b82efe470db79d5135e
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Jan 23 08:00:57 2019 +0800

    gpio: altera-a10sr: Set proper output level for direction_output
    
    commit 2095a45e345e669ea77a9b34bdd7de5ceb422f93 upstream.
    
    The altr_a10sr_gpio_direction_output should set proper output level
    based on the value argument.
    
    Fixes: 26a48c4cc2f1 ("gpio: altera-a10sr: Add A10 System Resource Chip GPIO support.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Tested by: Thor Thayer <thor.thayer@linux.intel.com>
    Reviewed by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8703298b9d803b064ed1e1d50338c7a37f73bef9
Author: James Morse <james.morse@arm.com>
Date:   Thu Jan 24 16:32:57 2019 +0000

    arm64: hibernate: Clean the __hyp_text to PoC after resume
    
    commit f7daa9c8fd191724b9ab9580a7be55cd1a67d799 upstream.
    
    During resume hibernate restores all physical memory. Any memory
    that is accessed with the MMU disabled needs to be cleaned to the
    PoC.
    
    KVMs __hyp_text was previously ommitted as it runs with the MMU
    enabled, but now that the hyp-stub is located in this section,
    we must clean __hyp_text too.
    
    This ensures secondary CPUs that come online after hibernate
    has finished resuming, and load KVM via the freshly written
    hyp-stub see the correct instructions.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c100d927f3fde2a8ee3eed76316ffea83473149
Author: James Morse <james.morse@arm.com>
Date:   Thu Jan 24 16:32:56 2019 +0000

    arm64: hyp-stub: Forbid kprobing of the hyp-stub
    
    commit 8fac5cbdfe0f01254d9d265c6aa1a95f94f58595 upstream.
    
    The hyp-stub is loaded by the kernel's early startup code at EL2
    during boot, before KVM takes ownership later. The hyp-stub's
    text is part of the regular kernel text, meaning it can be kprobed.
    
    A breakpoint in the hyp-stub causes the CPU to spin in el2_sync_invalid.
    
    Add it to the __hyp_text.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab4ece4e9b1302bfb8453aa4fe4b2a3388bf476f
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sun Jan 27 09:29:42 2019 +0100

    arm64: kaslr: ensure randomized quantities are clean also when kaslr is off
    
    commit 8ea235932314311f15ea6cf65c1393ed7e31af70 upstream.
    
    Commit 1598ecda7b23 ("arm64: kaslr: ensure randomized quantities are
    clean to the PoC") added cache maintenance to ensure that global
    variables set by the kaslr init routine are not wiped clean due to
    cache invalidation occurring during the second round of page table
    creation.
    
    However, if kaslr_early_init() exits early with no randomization
    being applied (either due to the lack of a seed, or because the user
    has disabled kaslr explicitly), no cache maintenance is performed,
    leading to the same issue we attempted to fix earlier, as far as the
    module_alloc_base variable is concerned.
    
    Note that module_alloc_base cannot be initialized statically, because
    that would cause it to be subject to a R_AARCH64_RELATIVE relocation,
    causing it to be overwritten by the second round of KASLR relocation
    processing.
    
    Fixes: f80fb3a3d508 ("arm64: add support for kernel ASLR")
    Cc: <stable@vger.kernel.org> # v4.6+
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17aa9d04ba62be77b4aa2be7fa86e1b1dded4cad
Author: Koen Vandeputte <koen.vandeputte@ncentric.com>
Date:   Thu Jan 31 15:00:01 2019 -0600

    ARM: cns3xxx: Fix writing to wrong PCI config registers after alignment
    
    commit 65dbb423cf28232fed1732b779249d6164c5999b upstream.
    
    Originally, cns3xxx used its own functions for mapping, reading and
    writing config registers.
    
    Commit 802b7c06adc7 ("ARM: cns3xxx: Convert PCI to use generic config
    accessors") removed the internal PCI config write function in favor of
    the generic one:
    
      cns3xxx_pci_write_config() --> pci_generic_config_write()
    
    cns3xxx_pci_write_config() expected aligned addresses, being produced by
    cns3xxx_pci_map_bus() while the generic one pci_generic_config_write()
    actually expects the real address as both the function and hardware are
    capable of byte-aligned writes.
    
    This currently leads to pci_generic_config_write() writing to the wrong
    registers.
    
    For instance, upon ath9k module loading:
    
    - driver ath9k gets loaded
    - The driver wants to write value 0xA8 to register PCI_LATENCY_TIMER,
      located at 0x0D
    - cns3xxx_pci_map_bus() aligns the address to 0x0C
    - pci_generic_config_write() effectively writes 0xA8 into register 0x0C
      (CACHE_LINE_SIZE)
    
    Fix the bug by removing the alignment in the cns3xxx mapping function.
    
    Fixes: 802b7c06adc7 ("ARM: cns3xxx: Convert PCI to use generic config accessors")
    Signed-off-by: Koen Vandeputte <koen.vandeputte@ncentric.com>
    [lorenzo.pieralisi@arm.com: updated commit log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Krzysztof Halasa <khalasa@piap.pl>
    Acked-by: Tim Harvey <tharvey@gateworks.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    CC: stable@vger.kernel.org      # v4.0+
    CC: Bjorn Helgaas <bhelgaas@google.com>
    CC: Olof Johansson <olof@lixom.net>
    CC: Robin Leblon <robin.leblon@ncentric.com>
    CC: Rob Herring <robh@kernel.org>
    CC: Russell King <linux@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f6e284de989d5f1b831bdd09835957dc12eaad
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Jan 29 15:52:55 2019 -0500

    NFS: Fix up return value on fatal errors in nfs_page_async_flush()
    
    commit 8fc75bed96bb94e23ca51bd9be4daf65c57697bf upstream.
    
    Ensure that we return the fatal error value that caused us to exit
    nfs_page_async_flush().
    
    Fixes: c373fff7bd25 ("NFSv4: Don't special case "launder"")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org # v4.12+
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b1ee7daf46dff7a7c86cda4b41c892ec2516365
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Jan 25 10:33:59 2019 -0800

    selftests/seccomp: Enhance per-arch ptrace syscall skip tests
    
    commit ed5f13261cb65b02c611ae9971677f33581d4286 upstream.
    
    Passing EPERM during syscall skipping was confusing since the test wasn't
    actually exercising the errno evaluation -- it was just passing a literal
    "1" (EPERM). Instead, expand the tests to check both direct value returns
    (positive, 45000 in this case), and errno values (negative, -ESRCH in this
    case) to check both fake success and fake failure during syscall skipping.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Fixes: a33b2d0359a0 ("selftests/seccomp: Add tests for basic ptrace actions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b48b0fe5be40d5ed3a6172208812bfa5aa44538f
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Wed Jan 16 20:11:44 2019 +0100

    iommu/vt-d: Fix memory leak in intel_iommu_put_resv_regions()
    
    commit 198bc3252ea3a45b0c5d500e6a5b91cfdd08f001 upstream.
    
    Commit 9d3a4de4cb8d ("iommu: Disambiguate MSI region types") changed
    the reserved region type in intel_iommu_get_resv_regions() from
    IOMMU_RESV_RESERVED to IOMMU_RESV_MSI, but it forgot to also change
    the type in intel_iommu_put_resv_regions().
    
    This leads to a memory leak, because now the check in
    intel_iommu_put_resv_regions() for IOMMU_RESV_RESERVED will never
    be true, and no allocated regions will be freed.
    
    Fix this by changing the region type in intel_iommu_put_resv_regions()
    to IOMMU_RESV_MSI, matching the type of the allocated regions.
    
    Fixes: 9d3a4de4cb8d ("iommu: Disambiguate MSI region types")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b30b0fdaae3942329788dd82fd1bd3865469c053
Author: Waiman Long <longman@redhat.com>
Date:   Wed Jan 30 13:52:36 2019 -0500

    fs/dcache: Fix incorrect nr_dentry_unused accounting in shrink_dcache_sb()
    
    commit 1dbd449c9943e3145148cc893c2461b72ba6fef0 upstream.
    
    The nr_dentry_unused per-cpu counter tracks dentries in both the LRU
    lists and the shrink lists where the DCACHE_LRU_LIST bit is set.
    
    The shrink_dcache_sb() function moves dentries from the LRU list to a
    shrink list and subtracts the dentry count from nr_dentry_unused.  This
    is incorrect as the nr_dentry_unused count will also be decremented in
    shrink_dentry_list() via d_shrink_del().
    
    To fix this double decrement, the decrement in the shrink_dcache_sb()
    function is taken out.
    
    Fixes: 4e717f5c1083 ("list_lru: remove special case function list_lru_dispose_all."
    Cc: stable@kernel.org
    Signed-off-by: Waiman Long <longman@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e6bb03a0b87addc736cfa78e6b5ed32a0a8baa8
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Sat Jan 26 12:21:32 2019 -0800

    CIFS: Do not count -ENODATA as failure for query directory
    
    commit 8e6e72aeceaaed5aeeb1cb43d3085de7ceb14f79 upstream.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efa83c74f83b26ebc01461662632a16ee1eae227
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Jan 30 12:49:48 2019 +0100

    ipvlan, l3mdev: fix broken l3s mode wrt local routes
    
    [ Upstream commit d5256083f62e2720f75bb3c5a928a0afe47d6bc3 ]
    
    While implementing ipvlan l3 and l3s mode for kubernetes CNI plugin,
    I ran into the issue that while l3 mode is working fine, l3s mode
    does not have any connectivity to kube-apiserver and hence all pods
    end up in Error state as well. The ipvlan master device sits on
    top of a bond device and hostns traffic to kube-apiserver (also running
    in hostns) is DNATed from 10.152.183.1:443 to 139.178.29.207:37573
    where the latter is the address of the bond0. While in l3 mode, a
    curl to https://10.152.183.1:443 or to https://139.178.29.207:37573
    works fine from hostns, neither of them do in case of l3s. In the
    latter only a curl to https://127.0.0.1:37573 appeared to work where
    for local addresses of bond0 I saw kernel suddenly starting to emit
    ARP requests to query HW address of bond0 which remained unanswered
    and neighbor entries in INCOMPLETE state. These ARP requests only
    happen while in l3s.
    
    Debugging this further, I found the issue is that l3s mode is piggy-
    backing on l3 master device, and in this case local routes are using
    l3mdev_master_dev_rcu(dev) instead of net->loopback_dev as per commit
    f5a0aab84b74 ("net: ipv4: dst for local input routes should use l3mdev
    if relevant") and 5f02ce24c269 ("net: l3mdev: Allow the l3mdev to be
    a loopback"). I found that reverting them back into using the
    net->loopback_dev fixed ipvlan l3s connectivity and got everything
    working for the CNI.
    
    Now judging from 4fbae7d83c98 ("ipvlan: Introduce l3s mode") and the
    l3mdev paper in [0] the only sole reason why ipvlan l3s is relying
    on l3 master device is to get the l3mdev_ip_rcv() receive hook for
    setting the dst entry of the input route without adding its own
    ipvlan specific hacks into the receive path, however, any l3 domain
    semantics beyond just that are breaking l3s operation. Note that
    ipvlan also has the ability to dynamically switch its internal
    operation from l3 to l3s for all ports via ipvlan_set_port_mode()
    at runtime. In any case, l3 vs l3s soley distinguishes itself by
    'de-confusing' netfilter through switching skb->dev to ipvlan slave
    device late in NF_INET_LOCAL_IN before handing the skb to L4.
    
    Minimal fix taken here is to add a IFF_L3MDEV_RX_HANDLER flag which,
    if set from ipvlan setup, gets us only the wanted l3mdev_l3_rcv() hook
    without any additional l3mdev semantics on top. This should also have
    minimal impact since dev->priv_flags is already hot in cache. With
    this set, l3s mode is working fine and I also get things like
    masquerading pod traffic on the ipvlan master properly working.
    
      [0] https://netdevconf.org/1.2/papers/ahern-what-is-l3mdev-paper.pdf
    
    Fixes: f5a0aab84b74 ("net: ipv4: dst for local input routes should use l3mdev if relevant")
    Fixes: 5f02ce24c269 ("net: l3mdev: Allow the l3mdev to be a loopback")
    Fixes: 4fbae7d83c98 ("ipvlan: Introduce l3s mode")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Cc: David Ahern <dsa@cumulusnetworks.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Martynas Pumputis <m@lambda.lt>
    Acked-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3924ebe54f0c0750436f69cb185e290a16499b9b
Author: Jacob Wen <jian.w.wen@oracle.com>
Date:   Wed Jan 30 14:55:14 2019 +0800

    l2tp: fix reading optional fields of L2TPv3
    
    [ Upstream commit 4522a70db7aa5e77526a4079628578599821b193 ]
    
    Use pskb_may_pull() to make sure the optional fields are in skb linear
    parts, so we can safely read them later.
    
    It's easy to reproduce the issue with a net driver that supports paged
    skb data. Just create a L2TPv3 over IP tunnel and then generates some
    network traffic.
    Once reproduced, rx err in /sys/kernel/debug/l2tp/tunnels will increase.
    
    Changes in v4:
    1. s/l2tp_v3_pull_opt/l2tp_v3_ensure_opt_in_linear/
    2. s/tunnel->version != L2TP_HDR_VER_2/tunnel->version == L2TP_HDR_VER_3/
    3. Add 'Fixes' in commit messages.
    
    Changes in v3:
    1. To keep consistency, move the code out of l2tp_recv_common.
    2. Use "net" instead of "net-next", since this is a bug fix.
    
    Changes in v2:
    1. Only fix L2TPv3 to make code simple.
       To fix both L2TPv3 and L2TPv2, we'd better refactor l2tp_recv_common.
       It's complicated to do so.
    2. Reloading pointers after pskb_may_pull
    
    Fixes: f7faffa3ff8e ("l2tp: Add L2TPv3 protocol support")
    Fixes: 0d76751fad77 ("l2tp: Add L2TPv3 IP encapsulation (no UDP) support")
    Fixes: a32e0eec7042 ("l2tp: introduce L2TPv3 IP encapsulation support for IPv6")
    Signed-off-by: Jacob Wen <jian.w.wen@oracle.com>
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a12098dd9f84ad7d94f2e4a36c2f73bb9eaa985c
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Tue Jan 16 23:01:55 2018 +0100

    l2tp: remove l2specific_len dependency in l2tp_core
    
    commit 62e7b6a57c7b9bf3c6fd99418eeec05b08a85c38 upstream.
    
    Remove l2specific_len dependency while building l2tpv3 header or
    parsing the received frame since default L2-Specific Sublayer is
    always four bytes long and we don't need to rely on a user supplied
    value.
    Moreover in l2tp netlink code there are no sanity checks to
    enforce the relation between l2specific_len and l2specific_type,
    so sending a malformed netlink message is possible to set
    l2specific_type to L2TP_L2SPECTYPE_DEFAULT (or even
    L2TP_L2SPECTYPE_NONE) and set l2specific_len to a value greater than
    4 leaking memory on the wire and sending corrupted frames.
    
    Reviewed-by: Guillaume Nault <g.nault@alphalink.fr>
    Tested-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 556e554a3b7478dba08585b5393384c973f36408
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 22 02:39:34 2019 +0800

    sctp: improve the events for sctp stream reset
    
    [ Upstream commit 2e6dc4d95110becfe0ff4c3d4749c33ea166e9e7 ]
    
    This patch is to improve sctp stream reset events in 4 places:
    
      1. In sctp_process_strreset_outreq(), the flag should always be set with
         SCTP_STREAM_RESET_INCOMING_SSN instead of OUTGOING, as receiver's in
         stream is reset here.
      2. In sctp_process_strreset_outreq(), move up SCTP_STRRESET_ERR_WRONG_SSN
         check, as the reset has to succeed after reconf_timer stops for the
         in stream reset request retransmission.
      3. In sctp_process_strreset_inreq(), no event should be sent, as no in
         or out stream is reset here.
      4. In sctp_process_strreset_resp(), SCTP_STREAM_RESET_INCOMING_SSN or
         OUTGOING event should always be sent for stream reset requests, no
         matter it fails or succeeds to process the request.
    
    Fixes: 810544764536 ("sctp: implement receiver-side procedures for the Outgoing SSN Reset Request Parameter")
    Fixes: 16e1a91965b0 ("sctp: implement receiver-side procedures for the Incoming SSN Reset Request Parameter")
    Fixes: 11ae76e67a17 ("sctp: implement receiver-side procedures for the Reconf Response Parameter")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f97e785670005f78188550ad21265edee03526d6
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 22 02:40:12 2019 +0800

    sctp: improve the events for sctp stream adding
    
    [ Upstream commit 8220c870cb0f4eaa4e335c9645dbd9a1c461c1dd ]
    
    This patch is to improve sctp stream adding events in 2 places:
    
      1. In sctp_process_strreset_addstrm_out(), move up SCTP_MAX_STREAM
         and in stream allocation failure checks, as the adding has to
         succeed after reconf_timer stops for the in stream adding
         request retransmission.
    
      3. In sctp_process_strreset_addstrm_in(), no event should be sent,
         as no in or out stream is added here.
    
    Fixes: 50a41591f110 ("sctp: implement receiver-side procedures for the Add Outgoing Streams Request Parameter")
    Fixes: c5c4ebb3ab87 ("sctp: implement receiver-side procedures for the Add Incoming Streams Request Parameter")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25d497c38cd3a96d8a20b04c0b1a643951628a92
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:55 2019 +0900

    virtio_net: Fix not restoring real_num_rx_queues
    
    [ Upstream commit 188313c137c4f76afd0862f50dbc185b198b9e2a ]
    
    When _virtnet_set_queues() failed we did not restore real_num_rx_queues.
    Fix this by placing the change of real_num_rx_queues after
    _virtnet_set_queues().
    This order is also in line with virtnet_set_channels().
    
    Fixes: 4941d472bf95 ("virtio-net: do not reset during XDP set")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dc715b218b3747bc236c18841812ca93176d003
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:54 2019 +0900

    virtio_net: Don't call free_old_xmit_skbs for xdp_frames
    
    [ Upstream commit 534da5e856334fb54cb0272a9fb3afec28ea3aed ]
    
    When napi_tx is enabled, virtnet_poll_cleantx() called
    free_old_xmit_skbs() even for xdp send queue.
    This is bogus since the queue has xdp_frames, not sk_buffs, thus mangled
    device tx bytes counters because skb->len is meaningless value, and even
    triggered oops due to general protection fault on freeing them.
    
    Since xdp send queues do not aquire locks, old xdp_frames should be
    freed only in virtnet_xdp_xmit(), so just skip free_old_xmit_skbs() for
    xdp send queues.
    
    Similarly virtnet_poll_tx() called free_old_xmit_skbs(). This NAPI
    handler is called even without calling start_xmit() because cb for tx is
    by default enabled. Once the handler is called, it enabled the cb again,
    and then the handler would be called again. We don't need this handler
    for XDP, so don't enable cb as well as not calling free_old_xmit_skbs().
    
    Also, we need to disable tx NAPI when disabling XDP, so
    virtnet_poll_tx() can safely access curr_queue_pairs and
    xdp_queue_pairs, which are not atomically updated while disabling XDP.
    
    Fixes: b92f1e6751a6 ("virtio-net: transmit napi")
    Fixes: 7b0411ef4aa6 ("virtio-net: clean tx descriptors from rx napi")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e16d506fda2cd06925ae932cdd910f4072831c8c
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:53 2019 +0900

    virtio_net: Don't enable NAPI when interface is down
    
    [ Upstream commit 8be4d9a492f88b96d4d3a06c6cbedbc40ca14c83 ]
    
    Commit 4e09ff536284 ("virtio-net: disable NAPI only when enabled during
    XDP set") tried to fix inappropriate NAPI enabling/disabling when
    !netif_running(), but was not complete.
    
    On error path virtio_net could enable NAPI even when !netif_running().
    This can cause enabling NAPI twice on virtnet_open(), which would
    trigger BUG_ON() in napi_enable().
    
    Fixes: 4941d472bf95b ("virtio-net: do not reset during XDP set")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb31b906dcac50ce1bcf40e82689414f7051925d
Author: Bodong Wang <bodong@mellanox.com>
Date:   Sun Jan 13 22:47:26 2019 -0600

    Revert "net/mlx5e: E-Switch, Initialize eswitch only if eswitch manager"
    
    [ Upstream commit 4e046de0f50e04acd48eb373d6a9061ddf014e0c ]
    
    This reverts commit 5f5991f36dce1e69dd8bd7495763eec2e28f08e7.
    
    With the original commit, eswitch instance will not be initialized for
    a function which is vport group manager but not eswitch manager such as
    host PF on SmartNIC (BlueField) card. This will result in a kernel crash
    when such a vport group manager is trying to access vports in its group.
    E.g, PF vport manager (not eswitch manager) tries to configure the MAC
    of its VF vport, a kernel trace will happen similar as bellow:
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
     ...
     RIP: 0010:mlx5_eswitch_get_vport_config+0xc/0x180 [mlx5_core]
     ...
    
    Fixes: 5f5991f36dce ("net/mlx5e: E-Switch, Initialize eswitch only if eswitch manager")
    Signed-off-by: Bodong Wang <bodong@mellanox.com>
    Reported-by: Yuval Avnery <yuvalav@mellanox.com>
    Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3ee1e685f4ba7f9e2dabc97ad979bcd27a03292
Author: Aya Levin <ayal@mellanox.com>
Date:   Mon Dec 24 09:48:42 2018 +0200

    net/mlx5e: Allow MAC invalidation while spoofchk is ON
    
    [ Upstream commit 9d2cbdc5d334967c35b5f58c7bf3208e17325647 ]
    
    Prior to this patch the driver prohibited spoof checking on invalid MAC.
    Now the user can set this configuration if it wishes to.
    
    This is required since libvirt might invalidate the VF Mac by setting it
    to zero, while spoofcheck is ON.
    
    Fixes: 1ab2068a4c66 ("net/mlx5: Implement vports admin state backup/restore")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 046b1b9efe35e9873d7cf35a3acefb7889dd10a6
Author: Mathias Thore <mathias.thore@infinera.com>
Date:   Mon Jan 28 10:07:47 2019 +0100

    ucc_geth: Reset BQL queue when stopping device
    
    [ Upstream commit e15aa3b2b1388c399c1a2ce08550d2cc4f7e3e14 ]
    
    After a timeout event caused by for example a broadcast storm, when
    the MAC and PHY are reset, the BQL TX queue needs to be reset as
    well. Otherwise, the device will exhibit severe performance issues
    even after the storm has ended.
    
    Co-authored-by: David Gounaris <david.gounaris@infinera.com>
    Signed-off-by: Mathias Thore <mathias.thore@infinera.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee092be36582a5f7420b58cae6e980c08c0f38ee
Author: Josh Elsasser <jelsasser@appneta.com>
Date:   Sat Jan 26 14:38:33 2019 -0800

    net: set default network namespace in init_dummy_netdev()
    
    [ Upstream commit 35edfdc77f683c8fd27d7732af06cf6489af60a5 ]
    
    Assign a default net namespace to netdevs created by init_dummy_netdev().
    Fixes a NULL pointer dereference caused by busy-polling a socket bound to
    an iwlwifi wireless device, which bumps the per-net BUSYPOLLRXPACKETS stat
    if napi_poll() received packets:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000190
      IP: napi_busy_loop+0xd6/0x200
      Call Trace:
        sock_poll+0x5e/0x80
        do_sys_poll+0x324/0x5a0
        SyS_poll+0x6c/0xf0
        do_syscall_64+0x6b/0x1f0
        entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: 7db6b048da3b ("net: Commonize busy polling code to focus on napi_id instead of socket")
    Signed-off-by: Josh Elsasser <jelsasser@appneta.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70b9069d45cd870a9c7235efaf96df2965db8eac
Author: Bernard Pidoux <f6bvp@free.fr>
Date:   Fri Jan 25 11:46:40 2019 +0100

    net/rose: fix NULL ax25_cb kernel panic
    
    [ Upstream commit b0cf029234f9b18e10703ba5147f0389c382bccc ]
    
    When an internally generated frame is handled by rose_xmit(),
    rose_route_frame() is called:
    
            if (!rose_route_frame(skb, NULL)) {
                    dev_kfree_skb(skb);
                    stats->tx_errors++;
                    return NETDEV_TX_OK;
            }
    
    We have the same code sequence in Net/Rom where an internally generated
    frame is handled by nr_xmit() calling nr_route_frame(skb, NULL).
    However, in this function NULL argument is tested while it is not in
    rose_route_frame().
    Then kernel panic occurs later on when calling ax25cmp() with a NULL
    ax25_cb argument as reported many times and recently with syzbot.
    
    We need to test if ax25 is NULL before using it.
    
    Testing:
    Built kernel with CONFIG_ROSE=y.
    
    Signed-off-by: Bernard Pidoux <f6bvp@free.fr>
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: syzbot+1a2c456a1ea08fa5b5f7@syzkaller.appspotmail.com
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Bernard Pidoux <f6bvp@free.fr>
    Cc: linux-hams@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0adf571fa34b27bd0b97b408cc0f0dc54b72f0eb
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Jan 24 14:18:18 2019 -0800

    netrom: switch to sock timer API
    
    [ Upstream commit 63346650c1a94a92be61a57416ac88c0a47c4327 ]
    
    sk_reset_timer() and sk_stop_timer() properly handle
    sock refcnt for timer function. Switching to them
    could fix a refcounting bug reported by syzbot.
    
    Reported-and-tested-by: syzbot+defa700d16f1bd1b9a05@syzkaller.appspotmail.com
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-hams@vger.kernel.org
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6ed795983fca6223324742426a89925f0de783a
Author: Aya Levin <ayal@mellanox.com>
Date:   Tue Jan 22 15:19:44 2019 +0200

    net/mlx4_core: Add masking for a few queries on HCA caps
    
    [ Upstream commit a40ded6043658444ee4dd6ee374119e4e98b33fc ]
    
    Driver reads the query HCA capabilities without the corresponding masks.
    Without the correct masks, the base addresses of the queues are
    unaligned.  In addition some reserved bits were wrongly read.  Using the
    correct masks, ensures alignment of the base addresses and allows future
    firmware versions safe use of the reserved bits.
    
    Fixes: ab9c17a009ee ("mlx4_core: Modify driver initialization flow to accommodate SRIOV for Ethernet")
    Fixes: 0ff1fb654bec ("{NET, IB}/mlx4: Add device managed flow steering firmware API")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dac61bfd6db96ee60ffa9d96d295bbc91bd2bba
Author: Jacob Wen <jian.w.wen@oracle.com>
Date:   Thu Jan 31 15:18:56 2019 +0800

    l2tp: copy 4 more bytes to linear part if necessary
    
    [ Upstream commit 91c524708de6207f59dd3512518d8a1c7b434ee3 ]
    
    The size of L2TPv2 header with all optional fields is 14 bytes.
    l2tp_udp_recv_core only moves 10 bytes to the linear part of a
    skb. This may lead to l2tp_recv_common read data outside of a skb.
    
    This patch make sure that there is at least 14 bytes in the linear
    part of a skb to meet the maximum need of l2tp_udp_recv_core and
    l2tp_recv_common. The minimum size of both PPP HDLC-like frame and
    Ethernet frame is larger than 14 bytes, so we are safe to do so.
    
    Also remove L2TP_HDR_SIZE_NOSEQ, it is unused now.
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Suggested-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Jacob Wen <jian.w.wen@oracle.com>
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c630ec8bdadae9d557b1ceb9d6c06e149108a0d4
Author: Yohei Kanemaru <yohei.kanemaru@gmail.com>
Date:   Tue Jan 29 15:52:34 2019 +0900

    ipv6: sr: clear IP6CB(skb) on SRH ip4ip6 encapsulation
    
    [ Upstream commit ef489749aae508e6f17886775c075f12ff919fb1 ]
    
    skb->cb may contain data from previous layers (in an observed case
    IPv4 with L3 Master Device). In the observed scenario, the data in
    IPCB(skb)->frags was misinterpreted as IP6CB(skb)->frag_max_size,
    eventually caused an unexpected IPv6 fragmentation in ip6_fragment()
    through ip6_finish_output().
    
    This patch clears IP6CB(skb), which potentially contains garbage data,
    on the SRH ip4ip6 encapsulation.
    
    Fixes: 32d99d0b6702 ("ipv6: sr: add support for ip4ip6 encapsulation")
    Signed-off-by: Yohei Kanemaru <yohei.kanemaru@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b99abc70ea8f79fda83f8a795cbc717c47311ae8
Author: David Ahern <dsahern@gmail.com>
Date:   Wed Jan 2 18:57:09 2019 -0800

    ipv6: Consider sk_bound_dev_if when binding a socket to an address
    
    [ Upstream commit c5ee066333ebc322a24a00a743ed941a0c68617e ]
    
    IPv6 does not consider if the socket is bound to a device when binding
    to an address. The result is that a socket can be bound to eth0 and then
    bound to the address of eth1. If the device is a VRF, the result is that
    a socket can only be bound to an address in the default VRF.
    
    Resolve by considering the device if sk_bound_dev_if is set.
    
    This problem exists from the beginning of git history.
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc489ad6a2f2fcebdaecb7b8532e0d02d272ac6a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jan 31 15:59:51 2019 +0100

    Fix "net: ipv4: do not handle duplicate fragments as overlapping"
    
    ade446403bfb ("net: ipv4: do not handle duplicate fragments as
    overlapping") was backported to many stable trees, but it had a problem
    that was "accidentally" fixed by the upstream commit 0ff89efb5246 ("ip:
    fail fast on IP defrag errors")
    
    This is the fixup for that problem as we do not want the larger patch in
    the older stable trees.
    
    Fixes: ade446403bfb ("net: ipv4: do not handle duplicate fragments as overlapping")
    Reported-by: Ivan Babrou <ivan@cloudflare.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
