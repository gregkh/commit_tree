commit 57dcae4a8b93271c4e370920ea0dbb94a0215d30
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 17 10:30:17 2021 +0100

    Linux 5.15.10
    
    Link: https://lore.kernel.org/r/20211215172026.641863587@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbcda209899ae8cb00eee9d8474e201fda37bc76
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Thu Nov 25 09:14:57 2021 +0200

    perf inject: Fix itrace space allowed for new attributes
    
    commit c29d9792607e67ed8a3f6e9db0d96836d885a8c5 upstream.
    
    The space allowed for new attributes can be too small if existing header
    information is large. That can happen, for example, if there are very
    many CPUs, due to having an event ID per CPU per event being stored in the
    header information.
    
    Fix by adding the existing header.data_offset. Also increase the extra
    space allowed to 8KiB and align to a 4KiB boundary for neatness.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Link: http://lore.kernel.org/lkml/20211125071457.2066863-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    [Adrian: Backport to v5.15]
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b4a8fbe4b0bc1b0d88aaaefab27c7d031905cc1
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 22 17:03:01 2021 +0200

    fuse: make sure reclaim doesn't write the inode
    
    commit 5c791fe1e2a4f401f819065ea4fc0450849f1818 upstream.
    
    In writeback cache mode mtime/ctime updates are cached, and flushed to the
    server using the ->write_inode() callback.
    
    Closing the file will result in a dirty inode being immediately written,
    but in other cases the inode can remain dirty after all references are
    dropped.  This result in the inode being written back from reclaim, which
    can deadlock on a regular allocation while the request is being served.
    
    The usual mechanisms (GFP_NOFS/PF_MEMALLOC*) don't work for FUSE, because
    serving a request involves unrelated userspace process(es).
    
    Instead do the same as for dirty pages: make sure the inode is written
    before the last reference is gone.
    
     - fallocate(2)/copy_file_range(2): these call file_update_time() or
       file_modified(), so flush the inode before returning from the call
    
     - unlink(2), link(2) and rename(2): these call fuse_update_ctime(), so
       flush the ctime directly from this helper
    
    Reported-by: chenguanyou <chenguanyou@xiaomi.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: Ed Tsai <ed.tsai@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18fc0ba9b10e1fb4f65a735cbf60ad6899133754
Author: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date:   Tue Oct 5 17:34:50 2021 +0300

    staging: most: dim2: use device release method
    
    commit d445aa402d60014a37a199fae2bba379696b007d upstream.
    
    Commit 723de0f9171e ("staging: most: remove device from interface
    structure") moved registration of driver-provided struct device to
    the most subsystem. This updated dim2 driver as well.
    
    However, struct device passed to register_device() becomes refcounted,
    and must not be explicitly deallocated, but must provide release method
    instead. Which is incompatible with managing it via devres.
    
    This patch makes the device structure allocated without devres, adds
    device release method, and moves device destruction there.
    
    Fixes: 723de0f9171e ("staging: most: remove device from interface structure")
    Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
    Link: https://lore.kernel.org/r/20211005143448.8660-2-nikita.yoush@cogentembedded.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9985d29c4755ac94f016b7537e411bd1109a13e4
Author: Chen Jun <chenjun102@huawei.com>
Date:   Wed Nov 24 14:08:01 2021 +0000

    tracing: Fix a kmemleak false positive in tracing_map
    
    [ Upstream commit f25667e5980a4333729cac3101e5de1bb851f71a ]
    
    Doing the command:
      echo 'hist:key=common_pid.execname,common_timestamp' > /sys/kernel/debug/tracing/events/xxx/trigger
    
    Triggers many kmemleak reports:
    
    unreferenced object 0xffff0000c7ea4980 (size 128):
      comm "bash", pid 338, jiffies 4294912626 (age 9339.324s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000f3469921>] kmem_cache_alloc_trace+0x4c0/0x6f0
        [<0000000054ca40c3>] hist_trigger_elt_data_alloc+0x140/0x178
        [<00000000633bd154>] tracing_map_init+0x1f8/0x268
        [<000000007e814ab9>] event_hist_trigger_func+0xca0/0x1ad0
        [<00000000bf8520ed>] trigger_process_regex+0xd4/0x128
        [<00000000f549355a>] event_trigger_write+0x7c/0x120
        [<00000000b80f898d>] vfs_write+0xc4/0x380
        [<00000000823e1055>] ksys_write+0x74/0xf8
        [<000000008a9374aa>] __arm64_sys_write+0x24/0x30
        [<0000000087124017>] do_el0_svc+0x88/0x1c0
        [<00000000efd0dcd1>] el0_svc+0x1c/0x28
        [<00000000dbfba9b3>] el0_sync_handler+0x88/0xc0
        [<00000000e7399680>] el0_sync+0x148/0x180
    unreferenced object 0xffff0000c7ea4980 (size 128):
      comm "bash", pid 338, jiffies 4294912626 (age 9339.324s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000f3469921>] kmem_cache_alloc_trace+0x4c0/0x6f0
        [<0000000054ca40c3>] hist_trigger_elt_data_alloc+0x140/0x178
        [<00000000633bd154>] tracing_map_init+0x1f8/0x268
        [<000000007e814ab9>] event_hist_trigger_func+0xca0/0x1ad0
        [<00000000bf8520ed>] trigger_process_regex+0xd4/0x128
        [<00000000f549355a>] event_trigger_write+0x7c/0x120
        [<00000000b80f898d>] vfs_write+0xc4/0x380
        [<00000000823e1055>] ksys_write+0x74/0xf8
        [<000000008a9374aa>] __arm64_sys_write+0x24/0x30
        [<0000000087124017>] do_el0_svc+0x88/0x1c0
        [<00000000efd0dcd1>] el0_svc+0x1c/0x28
        [<00000000dbfba9b3>] el0_sync_handler+0x88/0xc0
        [<00000000e7399680>] el0_sync+0x148/0x180
    
    The reason is elts->pages[i] is alloced by get_zeroed_page.
    and kmemleak will not scan the area alloced by get_zeroed_page.
    The address stored in elts->pages will be regarded as leaked.
    
    That is, the elts->pages[i] will have pointers loaded onto it as well, and
    without telling kmemleak about it, those pointers will look like memory
    without a reference.
    
    To fix this, call kmemleak_alloc to tell kmemleak to scan elts->pages[i]
    
    Link: https://lkml.kernel.org/r/20211124140801.87121-1-chenjun102@huawei.com
    
    Signed-off-by: Chen Jun <chenjun102@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43b145f3a20aa4dc43eaca72a5ef0ab6c560ffc9
Author: Philip Yang <Philip.Yang@amd.com>
Date:   Mon Nov 29 12:33:05 2021 -0500

    drm/amdkfd: process_info lock not needed for svm
    
    [ Upstream commit 3abfe30d803e62cc75dec254eefab3b04d69219b ]
    
    process_info->lock is used to protect kfd_bo_list, vm_list_head, n_vms
    and userptr valid/inval list, svm_range_restore_work and
    svm_range_set_attr don't access those, so do not need to take
    process_info lock. This will avoid potential circular locking issue.
    
    Signed-off-by: Philip Yang <Philip.Yang@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c21cff0ea6b23d301d24db2d1431460c66e77914
Author: Perry Yuan <Perry.Yuan@amd.com>
Date:   Fri Nov 19 04:27:55 2021 -0500

    drm/amd/display: add connector type check for CRC source set
    
    [ Upstream commit 2da34b7bb59e1caa9a336e0e20a76b8b6a4abea2 ]
    
    [Why]
    IGT bypass test will set crc source as DPRX,and display DM didn`t check
    connection type, it run the test on the HDMI connector ,then the kernel
    will be crashed because aux->transfer is set null for HDMI connection.
    This patch will skip the invalid connection test and fix kernel crash issue.
    
    [How]
    Check the connector type while setting the pipe crc source as DPRX or
    auto,if the type is not DP or eDP, the crtc crc source will not be set
    and report error code to IGT test,IGT will show the this subtest as no
    valid crtc/connector combinations found.
    
    116.779714] [IGT] amd_bypass: starting subtest 8bpc-bypass-mode
    [ 117.730996] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [ 117.731001] #PF: supervisor instruction fetch in kernel mode
    [ 117.731003] #PF: error_code(0x0010) - not-present page
    [ 117.731004] PGD 0 P4D 0
    [ 117.731006] Oops: 0010 [#1] SMP NOPTI
    [ 117.731009] CPU: 11 PID: 2428 Comm: amd_bypass Tainted: G OE 5.11.0-34-generic #36~20.04.1-Ubuntu
    [ 117.731011] Hardware name: AMD CZN/, BIOS AB.FD 09/07/2021
    [ 117.731012] RIP: 0010:0x0
    [ 117.731015] Code: Unable to access opcode bytes at RIP 0xffffffffffffffd6.
    [ 117.731016] RSP: 0018:ffffa8d64225bab8 EFLAGS: 00010246
    [ 117.731017] RAX: 0000000000000000 RBX: 0000000000000020 RCX: ffffa8d64225bb5e
    [ 117.731018] RDX: ffff93151d921880 RSI: ffffa8d64225bac8 RDI: ffff931511a1a9d8
    [ 117.731022] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 117.731023] CR2: ffffffffffffffd6 CR3: 000000010d5a4000 CR4: 0000000000750ee0
    [ 117.731023] PKRU: 55555554
    [ 117.731024] Call Trace:
    [ 117.731027] drm_dp_dpcd_access+0x72/0x110 [drm_kms_helper]
    [ 117.731036] drm_dp_dpcd_read+0xb7/0xf0 [drm_kms_helper]
    [ 117.731040] drm_dp_start_crc+0x38/0xb0 [drm_kms_helper]
    [ 117.731047] amdgpu_dm_crtc_set_crc_source+0x1ae/0x3e0 [amdgpu]
    [ 117.731149] crtc_crc_open+0x174/0x220 [drm]
    [ 117.731162] full_proxy_open+0x168/0x1f0
    [ 117.731165] ? open_proxy_open+0x100/0x100
    
    BugLink: https://gitlab.freedesktop.org/drm/amd/-/issues/1546
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Perry Yuan <Perry.Yuan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9e63f180fc8143ae77447b1d5a354b0f13e6b0e
Author: Philip Yang <Philip.Yang@amd.com>
Date:   Fri Nov 26 18:43:09 2021 -0500

    drm/amdkfd: fix double free mem structure
    
    [ Upstream commit 494f2e42ce4a9ddffb5d8c5b2db816425ef90397 ]
    
    drm_gem_object_put calls release_notify callback to free the mem
    structure and unreserve_mem_limit, move it down after the last access
    of mem and make it conditional call.
    
    Signed-off-by: Philip Yang <Philip.Yang@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00a3f7fb7ae3ebccaa08d2309ceb35dfb1a4bc90
Author: Mustapha Ghaddar <mghaddar@amd.com>
Date:   Mon Nov 15 17:56:42 2021 -0500

    drm/amd/display: Fix for the no Audio bug with Tiled Displays
    
    [ Upstream commit 5ceaebcda9061c04f439c93961f0819878365c0f ]
    
    [WHY]
    It seems like after a series of plug/unplugs we end up in a situation
    where tiled display doesnt support Audio.
    
    [HOW]
    The issue seems to be related to when we check streams changed after an
    HPD, we should be checking the audio_struct as well to see if any of its
    values changed.
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Mustapha Ghaddar <mustapha.ghaddar@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62477b3a86d6dc4ebae0b0e7fde627e779e5f6d9
Author: Flora Cui <flora.cui@amd.com>
Date:   Thu Nov 18 16:25:19 2021 +0800

    drm/amdgpu: check atomic flag to differeniate with legacy path
    
    [ Upstream commit 1053b9c948e614473819a1a5bcaff6d44e680dcf ]
    
    since vkms support atomic KMS interface
    
    Signed-off-by: Flora Cui <flora.cui@amd.com>
    Reviewed-by: Guchun Chen <guchun.chen@amd.com>
    Acked-by: Alex Deucher <aleander.deucher@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 796ddc81437bd172c92bfab15e69ba54306e4606
Author: Flora Cui <flora.cui@amd.com>
Date:   Wed Nov 24 10:33:38 2021 +0800

    drm/amdgpu: cancel the correct hrtimer on exit
    
    [ Upstream commit 3e467e478ed3a9701bb588d648d6e0ccb82ced09 ]
    
    Signed-off-by: Flora Cui <flora.cui@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c986072a8c9249b9398c7a18f216dc26a9f0e35
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Mon Nov 29 09:53:27 2021 -0800

    net: netlink: af_netlink: Prevent empty skb by adding a check on len.
    
    [ Upstream commit f123cffdd8fe8ea6c7fded4b88516a42798797d0 ]
    
    Adding a check on len parameter to avoid empty skb. This prevents a
    division error in netem_enqueue function which is caused when skb->len=0
    and skb->data_len=0 in the randomized corruption step as shown below.
    
    skb->data[prandom_u32() % skb_headlen(skb)] ^= 1<<(prandom_u32() % 8);
    
    Crash Report:
    [  343.170349] netdevsim netdevsim0 netdevsim3: set [1, 0] type 2 family
    0 port 6081 - 0
    [  343.216110] netem: version 1.3
    [  343.235841] divide error: 0000 [#1] PREEMPT SMP KASAN NOPTI
    [  343.236680] CPU: 3 PID: 4288 Comm: reproducer Not tainted 5.16.0-rc1+
    [  343.237569] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
    BIOS 1.11.0-2.el7 04/01/2014
    [  343.238707] RIP: 0010:netem_enqueue+0x1590/0x33c0 [sch_netem]
    [  343.239499] Code: 89 85 58 ff ff ff e8 5f 5d e9 d3 48 8b b5 48 ff ff
    ff 8b 8d 50 ff ff ff 8b 85 58 ff ff ff 48 8b bd 70 ff ff ff 31 d2 2b 4f
    74 <f7> f1 48 b8 00 00 00 00 00 fc ff df 49 01 d5 4c 89 e9 48 c1 e9 03
    [  343.241883] RSP: 0018:ffff88800bcd7368 EFLAGS: 00010246
    [  343.242589] RAX: 00000000ba7c0a9c RBX: 0000000000000001 RCX:
    0000000000000000
    [  343.243542] RDX: 0000000000000000 RSI: ffff88800f8edb10 RDI:
    ffff88800f8eda40
    [  343.244474] RBP: ffff88800bcd7458 R08: 0000000000000000 R09:
    ffffffff94fb8445
    [  343.245403] R10: ffffffff94fb8336 R11: ffffffff94fb8445 R12:
    0000000000000000
    [  343.246355] R13: ffff88800a5a7000 R14: ffff88800a5b5800 R15:
    0000000000000020
    [  343.247291] FS:  00007fdde2bd7700(0000) GS:ffff888109780000(0000)
    knlGS:0000000000000000
    [  343.248350] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  343.249120] CR2: 00000000200000c0 CR3: 000000000ef4c000 CR4:
    00000000000006e0
    [  343.250076] Call Trace:
    [  343.250423]  <TASK>
    [  343.250713]  ? memcpy+0x4d/0x60
    [  343.251162]  ? netem_init+0xa0/0xa0 [sch_netem]
    [  343.251795]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.252443]  netem_enqueue+0xe28/0x33c0 [sch_netem]
    [  343.253102]  ? stack_trace_save+0x87/0xb0
    [  343.253655]  ? filter_irq_stacks+0xb0/0xb0
    [  343.254220]  ? netem_init+0xa0/0xa0 [sch_netem]
    [  343.254837]  ? __kasan_check_write+0x14/0x20
    [  343.255418]  ? _raw_spin_lock+0x88/0xd6
    [  343.255953]  dev_qdisc_enqueue+0x50/0x180
    [  343.256508]  __dev_queue_xmit+0x1a7e/0x3090
    [  343.257083]  ? netdev_core_pick_tx+0x300/0x300
    [  343.257690]  ? check_kcov_mode+0x10/0x40
    [  343.258219]  ? _raw_spin_unlock_irqrestore+0x29/0x40
    [  343.258899]  ? __kasan_init_slab_obj+0x24/0x30
    [  343.259529]  ? setup_object.isra.71+0x23/0x90
    [  343.260121]  ? new_slab+0x26e/0x4b0
    [  343.260609]  ? kasan_poison+0x3a/0x50
    [  343.261118]  ? kasan_unpoison+0x28/0x50
    [  343.261637]  ? __kasan_slab_alloc+0x71/0x90
    [  343.262214]  ? memcpy+0x4d/0x60
    [  343.262674]  ? write_comp_data+0x2f/0x90
    [  343.263209]  ? __kasan_check_write+0x14/0x20
    [  343.263802]  ? __skb_clone+0x5d6/0x840
    [  343.264329]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.264958]  dev_queue_xmit+0x1c/0x20
    [  343.265470]  netlink_deliver_tap+0x652/0x9c0
    [  343.266067]  netlink_unicast+0x5a0/0x7f0
    [  343.266608]  ? netlink_attachskb+0x860/0x860
    [  343.267183]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.267820]  ? write_comp_data+0x2f/0x90
    [  343.268367]  netlink_sendmsg+0x922/0xe80
    [  343.268899]  ? netlink_unicast+0x7f0/0x7f0
    [  343.269472]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.270099]  ? write_comp_data+0x2f/0x90
    [  343.270644]  ? netlink_unicast+0x7f0/0x7f0
    [  343.271210]  sock_sendmsg+0x155/0x190
    [  343.271721]  ____sys_sendmsg+0x75f/0x8f0
    [  343.272262]  ? kernel_sendmsg+0x60/0x60
    [  343.272788]  ? write_comp_data+0x2f/0x90
    [  343.273332]  ? write_comp_data+0x2f/0x90
    [  343.273869]  ___sys_sendmsg+0x10f/0x190
    [  343.274405]  ? sendmsg_copy_msghdr+0x80/0x80
    [  343.274984]  ? slab_post_alloc_hook+0x70/0x230
    [  343.275597]  ? futex_wait_setup+0x240/0x240
    [  343.276175]  ? security_file_alloc+0x3e/0x170
    [  343.276779]  ? write_comp_data+0x2f/0x90
    [  343.277313]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.277969]  ? write_comp_data+0x2f/0x90
    [  343.278515]  ? __fget_files+0x1ad/0x260
    [  343.279048]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.279685]  ? write_comp_data+0x2f/0x90
    [  343.280234]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.280874]  ? sockfd_lookup_light+0xd1/0x190
    [  343.281481]  __sys_sendmsg+0x118/0x200
    [  343.281998]  ? __sys_sendmsg_sock+0x40/0x40
    [  343.282578]  ? alloc_fd+0x229/0x5e0
    [  343.283070]  ? write_comp_data+0x2f/0x90
    [  343.283610]  ? write_comp_data+0x2f/0x90
    [  343.284135]  ? __sanitizer_cov_trace_pc+0x21/0x60
    [  343.284776]  ? ktime_get_coarse_real_ts64+0xb8/0xf0
    [  343.285450]  __x64_sys_sendmsg+0x7d/0xc0
    [  343.285981]  ? syscall_enter_from_user_mode+0x4d/0x70
    [  343.286664]  do_syscall_64+0x3a/0x80
    [  343.287158]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  343.287850] RIP: 0033:0x7fdde24cf289
    [  343.288344] Code: 01 00 48 81 c4 80 00 00 00 e9 f1 fe ff ff 0f 1f 00
    48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f
    05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d b7 db 2c 00 f7 d8 64 89 01 48
    [  343.290729] RSP: 002b:00007fdde2bd6d98 EFLAGS: 00000246 ORIG_RAX:
    000000000000002e
    [  343.291730] RAX: ffffffffffffffda RBX: 0000000000000000 RCX:
    00007fdde24cf289
    [  343.292673] RDX: 0000000000000000 RSI: 00000000200000c0 RDI:
    0000000000000004
    [  343.293618] RBP: 00007fdde2bd6e20 R08: 0000000100000001 R09:
    0000000000000000
    [  343.294557] R10: 0000000100000001 R11: 0000000000000246 R12:
    0000000000000000
    [  343.295493] R13: 0000000000021000 R14: 0000000000000000 R15:
    00007fdde2bd7700
    [  343.296432]  </TASK>
    [  343.296735] Modules linked in: sch_netem ip6_vti ip_vti ip_gre ipip
    sit ip_tunnel geneve macsec macvtap tap ipvlan macvlan 8021q garp mrp
    hsr wireguard libchacha20poly1305 chacha_x86_64 poly1305_x86_64
    ip6_udp_tunnel udp_tunnel libblake2s blake2s_x86_64 libblake2s_generic
    curve25519_x86_64 libcurve25519_generic libchacha xfrm_interface
    xfrm6_tunnel tunnel4 veth netdevsim psample batman_adv nlmon dummy team
    bonding tls vcan ip6_gre ip6_tunnel tunnel6 gre tun ip6t_rpfilter
    ipt_REJECT nf_reject_ipv4 ip6t_REJECT nf_reject_ipv6 xt_conntrack ip_set
    ebtable_nat ebtable_broute ip6table_nat ip6table_mangle
    ip6table_security ip6table_raw iptable_nat nf_nat nf_conntrack
    nf_defrag_ipv6 nf_defrag_ipv4 iptable_mangle iptable_security
    iptable_raw ebtable_filter ebtables rfkill ip6table_filter ip6_tables
    iptable_filter ppdev bochs drm_vram_helper drm_ttm_helper ttm
    drm_kms_helper cec parport_pc drm joydev floppy parport sg syscopyarea
    sysfillrect sysimgblt i2c_piix4 qemu_fw_cfg fb_sys_fops pcspkr
    [  343.297459]  ip_tables xfs virtio_net net_failover failover sd_mod
    sr_mod cdrom t10_pi ata_generic pata_acpi ata_piix libata virtio_pci
    virtio_pci_legacy_dev serio_raw virtio_pci_modern_dev dm_mirror
    dm_region_hash dm_log dm_mod
    [  343.311074] Dumping ftrace buffer:
    [  343.311532]    (ftrace buffer empty)
    [  343.312040] ---[ end trace a2e3db5a6ae05099 ]---
    [  343.312691] RIP: 0010:netem_enqueue+0x1590/0x33c0 [sch_netem]
    [  343.313481] Code: 89 85 58 ff ff ff e8 5f 5d e9 d3 48 8b b5 48 ff ff
    ff 8b 8d 50 ff ff ff 8b 85 58 ff ff ff 48 8b bd 70 ff ff ff 31 d2 2b 4f
    74 <f7> f1 48 b8 00 00 00 00 00 fc ff df 49 01 d5 4c 89 e9 48 c1 e9 03
    [  343.315893] RSP: 0018:ffff88800bcd7368 EFLAGS: 00010246
    [  343.316622] RAX: 00000000ba7c0a9c RBX: 0000000000000001 RCX:
    0000000000000000
    [  343.317585] RDX: 0000000000000000 RSI: ffff88800f8edb10 RDI:
    ffff88800f8eda40
    [  343.318549] RBP: ffff88800bcd7458 R08: 0000000000000000 R09:
    ffffffff94fb8445
    [  343.319503] R10: ffffffff94fb8336 R11: ffffffff94fb8445 R12:
    0000000000000000
    [  343.320455] R13: ffff88800a5a7000 R14: ffff88800a5b5800 R15:
    0000000000000020
    [  343.321414] FS:  00007fdde2bd7700(0000) GS:ffff888109780000(0000)
    knlGS:0000000000000000
    [  343.322489] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  343.323283] CR2: 00000000200000c0 CR3: 000000000ef4c000 CR4:
    00000000000006e0
    [  343.324264] Kernel panic - not syncing: Fatal exception in interrupt
    [  343.333717] Dumping ftrace buffer:
    [  343.334175]    (ftrace buffer empty)
    [  343.334653] Kernel Offset: 0x13600000 from 0xffffffff81000000
    (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [  343.336027] Rebooting in 86400 seconds..
    
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20211129175328.55339-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d5ba2f40e73de50bba373715c11aac7c91cc75e
Author: Ondrej Jirman <megous@megous.com>
Date:   Fri Sep 24 13:15:27 2021 +0200

    i2c: rk3x: Handle a spurious start completion interrupt flag
    
    [ Upstream commit 02fe0fbd8a21e183687925c3a266ae27dda9840f ]
    
    In a typical read transfer, start completion flag is being set after
    read finishes (notice ipd bit 4 being set):
    
    trasnfer poll=0
    i2c start
    rk3x-i2c fdd40000.i2c: IRQ: state 1, ipd: 10
    i2c read
    rk3x-i2c fdd40000.i2c: IRQ: state 2, ipd: 1b
    i2c stop
    rk3x-i2c fdd40000.i2c: IRQ: state 4, ipd: 33
    
    This causes I2C transfer being aborted in polled mode from a stop completion
    handler:
    
    trasnfer poll=1
    i2c start
    rk3x-i2c fdd40000.i2c: IRQ: state 1, ipd: 10
    i2c read
    rk3x-i2c fdd40000.i2c: IRQ: state 2, ipd: 0
    rk3x-i2c fdd40000.i2c: IRQ: state 2, ipd: 1b
    i2c stop
    rk3x-i2c fdd40000.i2c: IRQ: state 4, ipd: 13
    i2c stop
    rk3x-i2c fdd40000.i2c: unexpected irq in STOP: 0x10
    
    Clearing the START flag after read fixes the issue without any obvious
    side effects.
    
    This issue was dicovered on RK3566 when adding support for powering
    off the RK817 PMIC.
    
    Signed-off-by: Ondrej Jirman <megous@megous.com>
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5a0cc7c7b8467f5c15ffdcd880ae8e5964c090f
Author: Helge Deller <deller@gmx.de>
Date:   Fri Nov 26 16:45:59 2021 +0100

    parisc/agp: Annotate parisc agp init functions with __init
    
    [ Upstream commit 8d88382b7436551a9ebb78475c546b670790cbf6 ]
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f66f84309623c9bba4ef37ba998fa9729ddca2e9
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Nov 30 14:47:32 2021 +0200

    ALSA: hda/hdmi: fix HDA codec entry table order for ADL-P
    
    [ Upstream commit 289047db1143c42c81820352f195a393ff639a52 ]
    
    Keep the HDA_CODEC_ENTRY entries sorted by the codec VID. ADL-P
    is the only misplaced Intel HDMI codec.
    
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20211130124732.696896-2-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eceb6a60a53457e0d2bfdf2c429d0a1bf27db19
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Nov 30 14:47:31 2021 +0200

    ALSA: hda: Add Intel DG2 PCI ID and HDMI codec vid
    
    [ Upstream commit d85ffff5302b1509efc482e8877c253b0a668b33 ]
    
    Add HD Audio PCI ID and HDMI codec vendor ID for Intel DG2.
    
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20211130124732.696896-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ced9b762f2d6d2a289fb9652c43e5d6af1156f41
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Mon Nov 29 19:00:43 2021 +0900

    loop: Use pr_warn_once() for loop_control_remove() warning
    
    [ Upstream commit e3f9387aea67742b9d1f4de8e5bb2fd08a8a4584 ]
    
    kernel test robot reported that RCU stall via printk() flooding is
    possible [1] when stress testing.
    
    Link: https://lkml.kernel.org/r/20211129073709.GA18483@xsang-OptiPlex-9020 [1]
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 095a04e0b3207367163292a1f9918191c6774538
Author: Erik Ekman <erik@kryo.se>
Date:   Sun Nov 28 13:37:11 2021 +0100

    net/mlx4_en: Update reported link modes for 1/10G
    
    [ Upstream commit 2191b1dfef7d45f44b5008d2148676d9f2c82874 ]
    
    When link modes were initially added in commit 2c762679435dc
    ("net/mlx4_en: Use PTYS register to query ethtool settings") and
    later updated for the new ethtool API in commit 3d8f7cc78d0eb
    ("net: mlx4: use new ETHTOOL_G/SSETTINGS API") the only 1/10G non-baseT
    link modes configured were 1000baseKX, 10000baseKX4 and 10000baseKR.
    It looks like these got picked to represent other modes since nothing
    better was available.
    
    Switch to using more specific link modes added in commit 5711a98221443
    ("net: ethtool: add support for 1000BaseX and missing 10G link modes").
    
    Tested with MCX311A-XCAT connected via DAC.
    Before:
    
    % sudo ethtool enp3s0
    Settings for enp3s0:
            Supported ports: [ FIBRE ]
            Supported link modes:   1000baseKX/Full
                                    10000baseKR/Full
            Supported pause frame use: Symmetric Receive-only
            Supports auto-negotiation: No
            Supported FEC modes: Not reported
            Advertised link modes:  1000baseKX/Full
                                    10000baseKR/Full
            Advertised pause frame use: Symmetric
            Advertised auto-negotiation: No
            Advertised FEC modes: Not reported
            Speed: 10000Mb/s
            Duplex: Full
            Auto-negotiation: off
            Port: Direct Attach Copper
            PHYAD: 0
            Transceiver: internal
            Supports Wake-on: d
            Wake-on: d
            Current message level: 0x00000014 (20)
                                   link ifdown
            Link detected: yes
    
    With this change:
    
    % sudo ethtool enp3s0
            Settings for enp3s0:
            Supported ports: [ FIBRE ]
            Supported link modes:   1000baseX/Full
                                    10000baseCR/Full
                                    10000baseSR/Full
            Supported pause frame use: Symmetric Receive-only
            Supports auto-negotiation: No
            Supported FEC modes: Not reported
            Advertised link modes:  1000baseX/Full
                                    10000baseCR/Full
                                    10000baseSR/Full
            Advertised pause frame use: Symmetric
            Advertised auto-negotiation: No
            Advertised FEC modes: Not reported
            Speed: 10000Mb/s
            Duplex: Full
            Auto-negotiation: off
            Port: Direct Attach Copper
            PHYAD: 0
            Transceiver: internal
            Supports Wake-on: d
            Wake-on: d
            Current message level: 0x00000014 (20)
                                   link ifdown
            Link detected: yes
    
    Tested-by: Michael Stapelberg <michael@stapelberg.ch>
    Signed-off-by: Erik Ekman <erik@kryo.se>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8605743472c5eda3c2fe4d11f94e0ea4a7c554f4
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Wed Nov 24 08:31:09 2021 +0100

    Revert "tty: serial: fsl_lpuart: drop earlycon entry for i.MX8QXP"
    
    [ Upstream commit 4e9679738a918d8a482ac6a2cb2bb871f094bb84 ]
    
    Revert commit b4b844930f27 ("tty: serial: fsl_lpuart: drop earlycon entry
    for i.MX8QXP"), because this breaks earlycon support on imx8qm/imx8qxp.
    While it is true that for earlycon there is no difference between
    i.MX8QXP and i.MX7ULP (for now at least), there are differences
    regarding clocks and fixups for wakeup support. For that reason it was
    deemed unacceptable to add the imx7ulp compatible to device tree in
    order to get earlycon working again.
    
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Link: https://lore.kernel.org/r/20211124073109.805088-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0700eab4df5b9231fe89e9c575eb45ea561d1f7f
Author: Ilie Halip <ilie.halip@gmail.com>
Date:   Wed Nov 17 19:48:21 2021 +0200

    s390/test_unwind: use raw opcode instead of invalid instruction
    
    [ Upstream commit 53ae7230918154d1f4281d7aa3aae9650436eadf ]
    
    Building with clang & LLVM_IAS=1 leads to an error:
        arch/s390/lib/test_unwind.c:179:4: error: invalid register pair
                            "       mvcl    %%r1,%%r1\n"
                            ^
    
    The test creates an invalid instruction that would trap at runtime, but the
    LLVM inline assembler tries to validate it at compile time too.
    
    Use the raw instruction opcode instead.
    
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Ilie Halip <ilie.halip@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Suggested-by: Ulrich Weigand <Ulrich.Weigand@de.ibm.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1421
    Link: https://lore.kernel.org/r/20211117174822.3632412-1-ilie.halip@gmail.com
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    [hca@linux.ibm.com: use illegal opcode, and update comment]
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b12c89527aecf8b20df0801a5b0c89053e6eefb
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Nov 16 10:20:06 2021 +0000

    KVM: arm64: Save PSTATE early on exit
    
    [ Upstream commit 83bb2c1a01d7127d5adc7d69d7aaa3f7072de2b4 ]
    
    In order to be able to use primitives such as vcpu_mode_is_32bit(),
    we need to synchronize the guest PSTATE. However, this is currently
    done deep into the bowels of the world-switch code, and we do have
    helpers evaluating this much earlier (__vgic_v3_perform_cpuif_access
    and handle_aarch32_guest, for example).
    
    Move the saving of the guest pstate into the early fixups, which
    cures the first issue. The second one will be addressed separately.
    
    Tested-by: Fuad Tabba <tabba@google.com>
    Reviewed-by: Fuad Tabba <tabba@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 906f7797a38f6b7d95ccececbb43748e80a2f652
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Nov 9 10:04:18 2021 -0800

    drm/msm/dp: Avoid unpowered AUX xfers that caused crashes
    
    [ Upstream commit d03fcc1de0863b1188ceb867cfa84a578fdc96bc ]
    
    If you happened to try to access `/dev/drm_dp_aux` devices provided by
    the MSM DP AUX driver too early at bootup you could go boom. Let's
    avoid that by only allowing AUX transfers when the controller is
    powered up.
    
    Specifically the crash that was seen (on Chrome OS 5.4 tree with
    relevant backports):
      Kernel panic - not syncing: Asynchronous SError Interrupt
      CPU: 0 PID: 3131 Comm: fwupd Not tainted 5.4.144-16620-g28af11b73efb #1
      Hardware name: Google Lazor (rev3+) with KB Backlight (DT)
      Call trace:
       dump_backtrace+0x0/0x14c
       show_stack+0x20/0x2c
       dump_stack+0xac/0x124
       panic+0x150/0x390
       nmi_panic+0x80/0x94
       arm64_serror_panic+0x78/0x84
       do_serror+0x0/0x118
       do_serror+0xa4/0x118
       el1_error+0xbc/0x160
       dp_catalog_aux_write_data+0x1c/0x3c
       dp_aux_cmd_fifo_tx+0xf0/0x1b0
       dp_aux_transfer+0x1b0/0x2bc
       drm_dp_dpcd_access+0x8c/0x11c
       drm_dp_dpcd_read+0x64/0x10c
       auxdev_read_iter+0xd4/0x1c4
    
    I did a little bit of tracing and found that:
    * We register the AUX device very early at bootup.
    * Power isn't actually turned on for my system until
      hpd_event_thread() -> dp_display_host_init() -> dp_power_init()
    * You can see that dp_power_init() calls dp_aux_init() which is where
      we start allowing AUX channel requests to go through.
    
    In general this patch is a bit of a bandaid but at least it gets us
    out of the current state where userspace acting at the wrong time can
    fully crash the system.
    * I think the more proper fix (which requires quite a bit more
      changes) is to power stuff on while an AUX transfer is
      happening. This is like the solution we did for ti-sn65dsi86. This
      might be required for us to move to populating the panel via the
      DP-AUX bus.
    * Another fix considered was to dynamically register / unregister. I
      tried that at <https://crrev.com/c/3169431/3> but it got
      ugly. Currently there's a bug where the pm_runtime() state isn't
      tracked properly and that causes us to just keep registering more
      and more.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Link: https://lore.kernel.org/r/20211109100403.1.I4e23470d681f7efe37e2e7f1a6466e15e9bb1d72@changeid
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc6c1eddfc7424233d4f365db4e8ba8d4e807f09
Author: Philip Chen <philipchen@chromium.org>
Date:   Sat Oct 30 10:08:50 2021 -0700

    drm/msm/dsi: set default num_data_lanes
    
    [ Upstream commit cd92cc187c053ab010a1570e2d61d68394a5c725 ]
    
    If "data_lanes" property of the dsi output endpoint is missing in
    the DT, num_data_lanes would be 0 by default, which could cause
    dsi_host_attach() to fail if dsi->lanes is set to a non-zero value
    by the bridge driver.
    
    According to the binding document of msm dsi controller, the
    input/output endpoint of the controller is expected to have 4 lanes.
    So let's set num_data_lanes to 4 by default.
    
    Signed-off-by: Philip Chen <philipchen@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20211030100812.1.I6cd9af36b723fed277d34539d3b2ba4ca233ad2d@changeid
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2db21103d84fd7655699e07d027e2061981388d
Author: Akhil P Oommen <akhilpo@codeaurora.org>
Date:   Thu Nov 18 15:50:31 2021 +0530

    drm/msm/a6xx: Fix uinitialized use of gpu_scid
    
    [ Upstream commit 9ba873e66ed317a1ff645d5e52c2e72597ff3d18 ]
    
    Avoid a possible uninitialized use of gpu_scid variable to fix the
    below smatch warning:
            drivers/gpu/drm/msm/adreno/a6xx_gpu.c:1480 a6xx_llc_activate()
            error: uninitialized symbol 'gpu_scid'.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Akhil P Oommen <akhilpo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211118154903.3.Ie4ac321feb10168af569d9c2b4cf6828bed8122c@changeid
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6db3d98f876870c35e96693cfd54752f6199e59
Author: Akhil P Oommen <akhilpo@codeaurora.org>
Date:   Thu Nov 18 15:50:30 2021 +0530

    drm/msm: Fix null ptr access msm_ioctl_gem_submit()
    
    [ Upstream commit 26d776fd0f79f093a5d0ce1a4c7c7a992bc3264c ]
    
    Fix the below null pointer dereference in msm_ioctl_gem_submit():
    
     26545.260705:   Call trace:
     26545.263223:    kref_put+0x1c/0x60
     26545.266452:    msm_ioctl_gem_submit+0x254/0x744
     26545.270937:    drm_ioctl_kernel+0xa8/0x124
     26545.274976:    drm_ioctl+0x21c/0x33c
     26545.278478:    drm_compat_ioctl+0xdc/0xf0
     26545.282428:    __arm64_compat_sys_ioctl+0xc8/0x100
     26545.287169:    el0_svc_common+0xf8/0x250
     26545.291025:    do_el0_svc_compat+0x28/0x54
     26545.295066:    el0_svc_compat+0x10/0x1c
     26545.298838:    el0_sync_compat_handler+0xa8/0xcc
     26545.303403:    el0_sync_compat+0x188/0x1c0
     26545.307445:   Code: d503201f d503201f 52800028 4b0803e8 (b8680008)
     26545.318799:   Kernel panic - not syncing: Oops: Fatal exception
    
    Signed-off-by: Akhil P Oommen <akhilpo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211118154903.2.I3ae019673a0cc45d83a193a7858748dd03dbb820@changeid
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cbb957441ed8873577d7d313a3d79d69f1dad5c
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Thu Dec 2 16:32:14 2021 +0100

    i2c: virtio: fix completion handling
    
    [ Upstream commit b503de239f62eca898cfb7e820d9a35499137d22 ]
    
    The driver currently assumes that the notify callback is only received
    when the device is done with all the queued buffers.
    
    However, this is not true, since the notify callback could be called
    without any of the queued buffers being completed (for example, with
    virtio-pci and shared interrupts) or with only some of the buffers being
    completed (since the driver makes them available to the device in
    multiple separate virtqueue_add_sgs() calls).
    
    This can lead to incorrect data on the I2C bus or memory corruption in
    the guest if the device operates on buffers which are have been freed by
    the driver.  (The WARN_ON in the driver is also triggered.)
    
     BUG kmalloc-128 (Tainted: G        W        ): Poison overwritten
     First byte 0x0 instead of 0x6b
     Allocated in i2cdev_ioctl_rdwr+0x9d/0x1de age=243 cpu=0 pid=28
            memdup_user+0x2e/0xbd
            i2cdev_ioctl_rdwr+0x9d/0x1de
            i2cdev_ioctl+0x247/0x2ed
            vfs_ioctl+0x21/0x30
            sys_ioctl+0xb18/0xb41
     Freed in i2cdev_ioctl_rdwr+0x1bb/0x1de age=68 cpu=0 pid=28
            kfree+0x1bd/0x1cc
            i2cdev_ioctl_rdwr+0x1bb/0x1de
            i2cdev_ioctl+0x247/0x2ed
            vfs_ioctl+0x21/0x30
            sys_ioctl+0xb18/0xb41
    
    Fix this by calling virtio_get_buf() from the notify handler like other
    virtio drivers and by actually waiting for all the buffers to be
    completed.
    
    Fixes: 3cfc88380413d20f ("i2c: virtio: add a virtio i2c frontend driver")
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 304aa6a73189c7cd55279af176720ea1af2fe4a1
Author: Ronak Doshi <doshir@vmware.com>
Date:   Tue Dec 7 00:17:37 2021 -0800

    vmxnet3: fix minimum vectors alloc issue
    
    [ Upstream commit f71ef02f1a4a3c49962fa341ad8de19071f0f9bf ]
    
    'Commit 39f9895a00f4 ("vmxnet3: add support for 32 Tx/Rx queues")'
    added support for 32Tx/Rx queues. Within that patch, value of
    VMXNET3_LINUX_MIN_MSIX_VECT was updated.
    
    However, there is a case (numvcpus = 2) which actually requires 3
    intrs which matches VMXNET3_LINUX_MIN_MSIX_VECT which then is
    treated as failure by stack to allocate more vectors. This patch
    fixes this issue.
    
    Fixes: 39f9895a00f4 ("vmxnet3: add support for 32 Tx/Rx queues")
    Signed-off-by: Ronak Doshi <doshir@vmware.com>
    Acked-by: Guolin Yang <gyang@vmware.com>
    Link: https://lore.kernel.org/r/20211207081737.14000-1-doshir@vmware.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 569670a02e21a6369ae7fc074b22a150ed01d1bd
Author: Yahui Cao <yahui.cao@intel.com>
Date:   Wed May 5 14:18:00 2021 -0700

    ice: fix FDIR init missing when reset VF
    
    [ Upstream commit f23ab04dd6f703e282bb2d51fe3ae14f4b88a628 ]
    
    When VF is being reset, ice_reset_vf() will be called and FDIR
    resource should be released and initialized again.
    
    Fixes: 1f7ea1cd6a37 ("ice: Enable FDIR Configure for AVF")
    Signed-off-by: Yahui Cao <yahui.cao@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76db15314582a74b774dee7c5d4f236c7a5ce2d1
Author: Tatyana Nikolova <tatyana.e.nikolova@intel.com>
Date:   Wed Dec 1 17:15:09 2021 -0600

    RDMA/irdma: Don't arm the CQ more than two times if no CE for this CQ
    
    [ Upstream commit 10467ce09fefa2e74359f5b2ab1efb8909402f19 ]
    
    Completion events (CEs) are lost if the application is allowed to arm the
    CQ more than two times when no new CE for this CQ has been generated by
    the HW.
    
    Check if arming has been done for the CQ and if not, arm the CQ for any
    event otherwise promote to arm the CQ for any event only when the last arm
    event was solicited.
    
    Fixes: b48c24c2d710 ("RDMA/irdma: Implement device supported verb APIs")
    Link: https://lore.kernel.org/r/20211201231509.1930-2-shiraz.saleem@intel.com
    Signed-off-by: Tatyana Nikolova <tatyana.e.nikolova@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 918e625198346dba74f246f679971c7555ae25e4
Author: Shiraz Saleem <shiraz.saleem@intel.com>
Date:   Wed Dec 1 17:15:08 2021 -0600

    RDMA/irdma: Report correct WC errors
    
    [ Upstream commit 25b5d6fd6d13b2de3780a0ae247befc43c4576fe ]
    
    Return IBV_WC_REM_OP_ERR for responder QP errors instead of
    IBV_WC_REM_ACCESS_ERR.
    
    Return IBV_WC_LOC_QP_OP_ERR for errors detected on the SQ with bad opcodes
    
    Fixes: 44d9e52977a1 ("RDMA/irdma: Implement device initialization definitions")
    Link: https://lore.kernel.org/r/20211201231509.1930-1-shiraz.saleem@intel.com
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b260dfed222b37fd273e35ac07d69218764fb72b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Dec 5 09:17:24 2021 +0100

    RDMA/irdma: Fix a potential memory allocation issue in 'irdma_prm_add_pble_mem()'
    
    [ Upstream commit 117697cc935b0ab04ec66274d8e64ccfebd7d0d2 ]
    
    'pchunk->bitmapbuf' is a bitmap. Its size (in number of bits) is stored in
    'pchunk->sizeofbitmap'.
    
    When it is allocated, the size (in bytes) is computed by:
       size_in_bits >> 3
    
    There are 2 issues (numbers bellow assume that longs are 64 bits):
       - there is no guarantee here that 'pchunk->bitmapmem.size' is modulo
         BITS_PER_LONG but bitmaps are stored as longs
         (sizeofbitmap=8 bits will only allocate 1 byte, instead of 8 (1 long))
    
       - the number of bytes is computed with a shift, not a round up, so we
         may allocate less memory than needed
         (sizeofbitmap=65 bits will only allocate 8 bytes (i.e. 1 long), when 2
         longs are needed = 16 bytes)
    
    Fix both issues by using 'bitmap_zalloc()' and remove the useless
    'bitmapmem' from 'struct irdma_chunk'.
    
    While at it, remove some useless NULL test before calling
    kfree/bitmap_free.
    
    Fixes: 915cc7ac0f8e ("RDMA/irdma: Add miscellaneous utility definitions")
    Link: https://lore.kernel.org/r/5e670b640508e14b1869c3e8e4fb970d78cbe997.1638692171.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11eebcf63e98fcf047a876a51d76afdabc3b8b9b
Author: Shiraz Saleem <shiraz.saleem@intel.com>
Date:   Tue Dec 7 09:21:36 2021 -0600

    RDMA/irdma: Fix a user-after-free in add_pble_prm
    
    [ Upstream commit 1e11a39a82e95ce86f849f40dda0d9c0498cebd9 ]
    
    When irdma_hmc_sd_one fails, 'chunk' is freed while its still on the PBLE
    info list.
    
    Add the chunk entry to the PBLE info list only after successful setting of
    the SD in irdma_hmc_sd_one.
    
    Fixes: e8c4dbc2fcac ("RDMA/irdma: Add PBLE resource manager")
    Link: https://lore.kernel.org/r/20211207152135.2192-1-shiraz.saleem@intel.com
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ac287b7b61520d00255b4ec8c8e2dd5f0277169
Author: David Howells <dhowells@redhat.com>
Date:   Tue Dec 7 09:53:24 2021 +0000

    netfs: Fix lockdep warning from taking sb_writers whilst holding mmap_lock
    
    [ Upstream commit 598ad0bd09329818ee041cb3e4b60ba0a70cb1ee ]
    
    Taking sb_writers whilst holding mmap_lock isn't allowed and will result in
    a lockdep warning like that below.  The problem comes from cachefiles
    needing to take the sb_writers lock in order to do a write to the cache,
    but being asked to do this by netfslib called from readpage, readahead or
    write_begin[1].
    
    Fix this by always offloading the write to the cache off to a worker
    thread.  The main thread doesn't need to wait for it, so deadlock can be
    avoided.
    
    This can be tested by running the quick xfstests on something like afs or
    ceph with lockdep enabled.
    
    WARNING: possible circular locking dependency detected
    5.15.0-rc1-build2+ #292 Not tainted
    ------------------------------------------------------
    holetest/65517 is trying to acquire lock:
    ffff88810c81d730 (mapping.invalidate_lock#3){.+.+}-{3:3}, at: filemap_fault+0x276/0x7a5
    
    but task is already holding lock:
    ffff8881595b53e8 (&mm->mmap_lock#2){++++}-{3:3}, at: do_user_addr_fault+0x28d/0x59c
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #2 (&mm->mmap_lock#2){++++}-{3:3}:
           validate_chain+0x3c4/0x4a8
           __lock_acquire+0x89d/0x949
           lock_acquire+0x2dc/0x34b
           __might_fault+0x87/0xb1
           strncpy_from_user+0x25/0x18c
           removexattr+0x7c/0xe5
           __do_sys_fremovexattr+0x73/0x96
           do_syscall_64+0x67/0x7a
           entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    -> #1 (sb_writers#10){.+.+}-{0:0}:
           validate_chain+0x3c4/0x4a8
           __lock_acquire+0x89d/0x949
           lock_acquire+0x2dc/0x34b
           cachefiles_write+0x2b3/0x4bb
           netfs_rreq_do_write_to_cache+0x3b5/0x432
           netfs_readpage+0x2de/0x39d
           filemap_read_page+0x51/0x94
           filemap_get_pages+0x26f/0x413
           filemap_read+0x182/0x427
           new_sync_read+0xf0/0x161
           vfs_read+0x118/0x16e
           ksys_read+0xb8/0x12e
           do_syscall_64+0x67/0x7a
           entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    -> #0 (mapping.invalidate_lock#3){.+.+}-{3:3}:
           check_noncircular+0xe4/0x129
           check_prev_add+0x16b/0x3a4
           validate_chain+0x3c4/0x4a8
           __lock_acquire+0x89d/0x949
           lock_acquire+0x2dc/0x34b
           down_read+0x40/0x4a
           filemap_fault+0x276/0x7a5
           __do_fault+0x96/0xbf
           do_fault+0x262/0x35a
           __handle_mm_fault+0x171/0x1b5
           handle_mm_fault+0x12a/0x233
           do_user_addr_fault+0x3d2/0x59c
           exc_page_fault+0x85/0xa5
           asm_exc_page_fault+0x1e/0x30
    
    other info that might help us debug this:
    
    Chain exists of:
      mapping.invalidate_lock#3 --> sb_writers#10 --> &mm->mmap_lock#2
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&mm->mmap_lock#2);
                                   lock(sb_writers#10);
                                   lock(&mm->mmap_lock#2);
      lock(mapping.invalidate_lock#3);
    
     *** DEADLOCK ***
    
    1 lock held by holetest/65517:
     #0: ffff8881595b53e8 (&mm->mmap_lock#2){++++}-{3:3}, at: do_user_addr_fault+0x28d/0x59c
    
    stack backtrace:
    CPU: 0 PID: 65517 Comm: holetest Not tainted 5.15.0-rc1-build2+ #292
    Hardware name: ASUS All Series/H97-PLUS, BIOS 2306 10/09/2014
    Call Trace:
     dump_stack_lvl+0x45/0x59
     check_noncircular+0xe4/0x129
     ? print_circular_bug+0x207/0x207
     ? validate_chain+0x461/0x4a8
     ? add_chain_block+0x88/0xd9
     ? hlist_add_head_rcu+0x49/0x53
     check_prev_add+0x16b/0x3a4
     validate_chain+0x3c4/0x4a8
     ? check_prev_add+0x3a4/0x3a4
     ? mark_lock+0xa5/0x1c6
     __lock_acquire+0x89d/0x949
     lock_acquire+0x2dc/0x34b
     ? filemap_fault+0x276/0x7a5
     ? rcu_read_unlock+0x59/0x59
     ? add_to_page_cache_lru+0x13c/0x13c
     ? lock_is_held_type+0x7b/0xd3
     down_read+0x40/0x4a
     ? filemap_fault+0x276/0x7a5
     filemap_fault+0x276/0x7a5
     ? pagecache_get_page+0x2dd/0x2dd
     ? __lock_acquire+0x8bc/0x949
     ? pte_offset_kernel.isra.0+0x6d/0xc3
     __do_fault+0x96/0xbf
     ? do_fault+0x124/0x35a
     do_fault+0x262/0x35a
     ? handle_pte_fault+0x1c1/0x20d
     __handle_mm_fault+0x171/0x1b5
     ? handle_pte_fault+0x20d/0x20d
     ? __lock_release+0x151/0x254
     ? mark_held_locks+0x1f/0x78
     ? rcu_read_unlock+0x3a/0x59
     handle_mm_fault+0x12a/0x233
     do_user_addr_fault+0x3d2/0x59c
     ? pgtable_bad+0x70/0x70
     ? rcu_read_lock_bh_held+0xab/0xab
     exc_page_fault+0x85/0xa5
     ? asm_exc_page_fault+0x8/0x30
     asm_exc_page_fault+0x1e/0x30
    RIP: 0033:0x40192f
    Code: ff 48 89 c3 48 8b 05 50 28 00 00 48 85 ed 7e 23 31 d2 4b 8d 0c 2f eb 0a 0f 1f 00 48 8b 05 39 28 00 00 48 0f af c2 48 83 c2 01 <48> 89 1c 01 48 39 d5 7f e8 8b 0d f2 27 00 00 31 c0 85 c9 74 0e 8b
    RSP: 002b:00007f9931867eb0 EFLAGS: 00010202
    RAX: 0000000000000000 RBX: 00007f9931868700 RCX: 00007f993206ac00
    RDX: 0000000000000001 RSI: 0000000000000000 RDI: 00007ffc13e06ee0
    RBP: 0000000000000100 R08: 0000000000000000 R09: 00007f9931868700
    R10: 00007f99318689d0 R11: 0000000000000202 R12: 00007ffc13e06ee0
    R13: 0000000000000c00 R14: 00007ffc13e06e00 R15: 00007f993206a000
    
    Fixes: 726218fdc22c ("netfs: Define an interface to talk to a cache")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Jeff Layton <jlayton@kernel.org>
    cc: Jan Kara <jack@suse.cz>
    cc: linux-cachefs@redhat.com
    cc: linux-fsdevel@vger.kernel.org
    Link: https://lore.kernel.org/r/20210922110420.GA21576@quack2.suse.cz/ [1]
    Link: https://lore.kernel.org/r/163887597541.1596626.2668163316598972956.stgit@warthog.procyon.org.uk/ # v1
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cff728217a2b4fcd9e9ec0c8eab23b71040fc4c5
Author: Song Liu <songliubraving@fb.com>
Date:   Fri Dec 3 15:14:41 2021 -0800

    perf bpf_skel: Do not use typedef to avoid error on old clang
    
    [ Upstream commit 5a897531e00243cebbcc4dbe4ab06cd559ccf53f ]
    
    When building bpf_skel with clang-10, typedef causes confusions like:
    
      libbpf: map 'prev_readings': unexpected def kind var.
    
    Fix this by removing the typedef.
    
    Fixes: 7fac83aaf2eecc9e ("perf stat: Introduce 'bperf' to share hardware PMCs with BPF")
    Reported-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: http://lore.kernel.org/lkml/BEF5C312-4331-4A60-AEC0-AD7617CB2BC4@fb.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 134151c3b11df6bc90d7d44b05c2e74a3d74fa4b
Author: Martin Botka <martin.botka@somainline.org>
Date:   Tue Nov 30 22:20:15 2021 +0100

    clk: qcom: sm6125-gcc: Swap ops of ice and apps on sdcc1
    
    [ Upstream commit e53f2086856c16ccab80fd0ac012baa1ae88af73 ]
    
    Without this change eMMC runs at overclocked freq.
    Swap the ops to not OC the eMMC.
    
    Signed-off-by: Martin Botka <martin.botka@somainline.org>
    Link: https://lore.kernel.org/r/20211130212015.25232-1-martin.botka@somainline.org
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Fixes: 4b8d6ae57cdf ("clk: qcom: Add SM6125 (TRINKET) GCC driver")
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 439250c0978555e5508dff62fc72750b748e373f
Author: Rob Herring <robh@kernel.org>
Date:   Fri Dec 3 10:48:28 2021 -0600

    dt-bindings: media: nxp,imx7-mipi-csi2: Drop bad if/then schema
    
    [ Upstream commit b54472a02cefd0dc468158bbc4d636b27cd6fc34 ]
    
    The if/then schema for 'data-lanes' doesn't work as 'compatible' is at a
    different level than 'data-lanes'. To make it work, the if/then schema
    would have to be moved to the top level and then whole hierarchy of
    nodes down to 'data-lanes' created. I don't think it is worth the
    complexity to do that, so let's just drop it.
    
    The error in this schema is masked by a fixup in the tools causing the
    'allOf' to get overwritten. Removing the fixup as part of moving to
    json-schema draft 2019-09 revealed the issue:
    
    Documentation/devicetree/bindings/media/nxp,imx7-mipi-csi2.example.dt.yaml: mipi-csi@30750000: ports:port@0:endpoint:data-lanes:0: [1] is too short
            From schema: /builds/robherring/linux-dt-review/Documentation/devicetree/bindings/media/nxp,imx7-mipi-csi2.yaml
    Documentation/devicetree/bindings/media/nxp,imx7-mipi-csi2.example.dt.yaml: mipi-csi@32e30000: ports:port@0:endpoint:data-lanes:0: [1, 2, 3, 4] is too long
            From schema: /builds/robherring/linux-dt-review/Documentation/devicetree/bindings/media/nxp,imx7-mipi-csi2.yaml
    
    The if condition was always true because 'compatible' did not exist in
    'endpoint' node and a non-existent property is true for json-schema.
    
    Fixes: 85b62ff2cb97 ("media: dt-bindings: media: nxp,imx7-mipi-csi2: Add i.MX8MM support")
    Cc: Rui Miguel Silva <rmfrfs@gmail.com>
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Pengutronix Kernel Team <kernel@pengutronix.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: NXP Linux Team <linux-imx@nxp.com>
    Cc: linux-media@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Acked-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Link: https://lore.kernel.org/r/20211203164828.187642-1-robh@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d17a8d12a6dacf0330c80252031d8421c6c5a746
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 2 14:42:18 2021 -0800

    inet: use #ifdef CONFIG_SOCK_RX_QUEUE_MAPPING consistently
    
    [ Upstream commit a9418924552e52e63903cbb0310d7537260702bf ]
    
    Since commit 4e1beecc3b58 ("net/sock: Add kernel config
    SOCK_RX_QUEUE_MAPPING"),
    sk_rx_queue_mapping access is guarded by CONFIG_SOCK_RX_QUEUE_MAPPING.
    
    Fixes: 54b92e841937 ("tcp: Migrate TCP_ESTABLISHED/TCP_SYN_RECV sockets in accept queues.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Kuniyuki Iwashima <kuniyu@amazon.co.jp>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Tariq Toukan <tariqt@nvidia.com>
    Acked-by: Kuniyuki Iwashima <kuniyu@amazon.co.jp>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6aa8873468cbdf2e0e9306fda8548ef398f85c8
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Fri Nov 19 16:03:14 2021 +0100

    mtd: rawnand: Fix nand_choose_best_timings() on unsupported interface
    
    [ Upstream commit 36a65982a98c4bc72fdcfef2c4aaf90193746631 ]
    
    When the NV-DDR interface is not supported by the NAND chip,
    the value of onfi->nvddr_timing_modes is 0. In this case,
    the best_mode variable value in nand_choose_best_nvddr_timings()
    is -1. The last for-loop is skipped and the function returns an
    uninitialized value.
    If this returned value is 0, the nand_choose_best_sdr_timings()
    is not executed and no 'best timing' are set. This leads the host
    controller and the NAND chip working at default mode 0 timing
    even if a better timing can be used.
    
    Fix this uninitialized returned value.
    
    nand_choose_best_sdr_timings() is pretty similar to
    nand_choose_best_nvddr_timings(). Even if onfi->sdr_timing_modes
    should never be seen as 0, nand_choose_best_sdr_timings() returned
    value is fixed.
    
    Fixes: a9ecc8c814e9 ("mtd: rawnand: Choose the best timings, NV-DDR included")
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20211119150316.43080-3-herve.codina@bootlin.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c7b48887c349eb160a0c8607a230a1e27fdd609
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Fri Nov 19 16:03:13 2021 +0100

    mtd: rawnand: Fix nand_erase_op delay
    
    [ Upstream commit 16d8b628a4152e8e8b01b6a1d82e30208ee2dd30 ]
    
    NAND_OP_CMD() expects a delay parameter in nanoseconds.
    The delay value is wrongly given in milliseconds.
    
    Fix the conversion macro used in order to set this
    delay in nanoseconds.
    
    Fixes: d7a773e8812b ("mtd: rawnand: Access SDR and NV-DDR timings through a common macro")
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20211119150316.43080-2-herve.codina@bootlin.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3bc4d4b50cae7db08e50dbe43f771c906e97701
Author: Alaa Hleihel <alaa@nvidia.com>
Date:   Mon Nov 22 13:41:51 2021 +0200

    RDMA/mlx5: Fix releasing unallocated memory in dereg MR flow
    
    [ Upstream commit f0ae4afe3d35e67db042c58a52909e06262b740f ]
    
    For the case of IB_MR_TYPE_DM the mr does doesn't have a umem, even though
    it is a user MR. This causes function mlx5_free_priv_descs() to think that
    it is a kernel MR, leading to wrongly accessing mr->descs that will get
    wrong values in the union which leads to attempt to release resources that
    were not allocated in the first place.
    
    For example:
     DMA-API: mlx5_core 0000:08:00.1: device driver tries to free DMA memory it has not allocated [device address=0x0000000000000000] [size=0 bytes]
     WARNING: CPU: 8 PID: 1021 at kernel/dma/debug.c:961 check_unmap+0x54f/0x8b0
     RIP: 0010:check_unmap+0x54f/0x8b0
     Call Trace:
      debug_dma_unmap_page+0x57/0x60
      mlx5_free_priv_descs+0x57/0x70 [mlx5_ib]
      mlx5_ib_dereg_mr+0x1fb/0x3d0 [mlx5_ib]
      ib_dereg_mr_user+0x60/0x140 [ib_core]
      uverbs_destroy_uobject+0x59/0x210 [ib_uverbs]
      uobj_destroy+0x3f/0x80 [ib_uverbs]
      ib_uverbs_cmd_verbs+0x435/0xd10 [ib_uverbs]
      ? uverbs_finalize_object+0x50/0x50 [ib_uverbs]
      ? lock_acquire+0xc4/0x2e0
      ? lock_acquired+0x12/0x380
      ? lock_acquire+0xc4/0x2e0
      ? lock_acquire+0xc4/0x2e0
      ? ib_uverbs_ioctl+0x7c/0x140 [ib_uverbs]
      ? lock_release+0x28a/0x400
      ib_uverbs_ioctl+0xc0/0x140 [ib_uverbs]
      ? ib_uverbs_ioctl+0x7c/0x140 [ib_uverbs]
      __x64_sys_ioctl+0x7f/0xb0
      do_syscall_64+0x38/0x90
    
    Fix it by reorganizing the dereg flow and mlx5_ib_mr structure:
     - Move the ib_umem field into the user MRs structure in the union as it's
       applicable only there.
     - Function mlx5_ib_dereg_mr() will now call mlx5_free_priv_descs() only
       in case there isn't udata, which indicates that this isn't a user MR.
    
    Fixes: f18ec4223117 ("RDMA/mlx5: Use a union inside mlx5_ib_mr")
    Link: https://lore.kernel.org/r/66bb1dd253c1fd7ceaa9fc411061eefa457b86fb.1637581144.git.leonro@nvidia.com
    Signed-off-by: Alaa Hleihel <alaa@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acb53e47db1fbc7cd37ab10b46388f045a76e383
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Nov 21 23:22:39 2021 +0300

    RDMA: Fix use-after-free in rxe_queue_cleanup
    
    [ Upstream commit 84b01721e8042cdd1e8ffeb648844a09cd4213e0 ]
    
    On error handling path in rxe_qp_from_init() qp->sq.queue is freed and
    then rxe_create_qp() will drop last reference to this object. qp clean up
    function will try to free this queue one time and it causes UAF bug.
    
    Fix it by zeroing queue pointer after freeing queue in rxe_qp_from_init().
    
    Fixes: 514aee660df4 ("RDMA: Globally allocate and release QP memory")
    Link: https://lore.kernel.org/r/20211121202239.3129-1-paskripkin@gmail.com
    Reported-by: syzbot+aab53008a5adf26abe91@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Zhu Yanjun <zyjzyj2000@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0d44c58afdd56de3c223d92fcf3072721e87642
Author: Wilken Gottwalt <wilken.gottwalt@posteo.net>
Date:   Sat Nov 13 06:53:52 2021 +0000

    hwmon: (corsair-psu) fix plain integer used as NULL pointer
    
    [ Upstream commit 8383226583251858814d5521b542e7bf7dbadc4b ]
    
    sparse warnings: (new ones prefixed by >>)
    >> drivers/hwmon/corsair-psu.c:536:82: sparse: sparse: Using plain
       integer as NULL pointer
    
    Fixes: d115b51e0e56 ("hwmon: add Corsair PSU HID controller driver")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Wilken Gottwalt <wilken.gottwalt@posteo.net>
    Link: https://lore.kernel.org/r/YY9hAL8MZEQYLYPf@monster.localdomain
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d89e4211b51752daf063d638af50abed2fd5f96d
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Wed Dec 8 10:27:42 2021 -0800

    nfc: fix segfault in nfc_genl_dump_devices_done
    
    commit fd79a0cbf0b2e34bcc45b13acf962e2032a82203 upstream.
    
    When kmalloc in nfc_genl_dump_devices() fails then
    nfc_genl_dump_devices_done() segfaults as below
    
    KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
    CPU: 0 PID: 25 Comm: kworker/0:1 Not tainted 5.16.0-rc4-01180-g2a987e65025e-dirty #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-6.fc35 04/01/2014
    Workqueue: events netlink_sock_destruct_work
    RIP: 0010:klist_iter_exit+0x26/0x80
    Call Trace:
    <TASK>
    class_dev_iter_exit+0x15/0x20
    nfc_genl_dump_devices_done+0x3b/0x50
    genl_lock_done+0x84/0xd0
    netlink_sock_destruct+0x8f/0x270
    __sk_destruct+0x64/0x3b0
    sk_destruct+0xa8/0xd0
    __sk_free+0x2e8/0x3d0
    sk_free+0x51/0x90
    netlink_sock_destruct_work+0x1c/0x20
    process_one_work+0x411/0x710
    worker_thread+0x6fd/0xa80
    
    Link: https://syzkaller.appspot.com/bug?id=fc0fa5a53db9edd261d56e74325419faf18bd0df
    Reported-by: syzbot+f9f76f4a0766420b4a02@syzkaller.appspotmail.com
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20211208182742.340542-1-tadeusz.struk@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
