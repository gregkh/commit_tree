commit 050272a0423e68207fd2367831ae610680129062
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Apr 24 08:01:25 2020 +0200

    Linux 4.14.177

commit 7fa67aa30509ad0da72ac0f757aa76e53c0ea3de
Author: Waiman Long <longman@redhat.com>
Date:   Sat Mar 21 21:11:24 2020 -0400

    KEYS: Don't write out to userspace while holding key semaphore
    
    commit d3ec10aa95819bff18a0d936b18884c7816d0914 upstream.
    
    A lockdep circular locking dependency report was seen when running a
    keyutils test:
    
    [12537.027242] ======================================================
    [12537.059309] WARNING: possible circular locking dependency detected
    [12537.088148] 4.18.0-147.7.1.el8_1.x86_64+debug #1 Tainted: G OE    --------- -  -
    [12537.125253] ------------------------------------------------------
    [12537.153189] keyctl/25598 is trying to acquire lock:
    [12537.175087] 000000007c39f96c (&mm->mmap_sem){++++}, at: __might_fault+0xc4/0x1b0
    [12537.208365]
    [12537.208365] but task is already holding lock:
    [12537.234507] 000000003de5b58d (&type->lock_class){++++}, at: keyctl_read_key+0x15a/0x220
    [12537.270476]
    [12537.270476] which lock already depends on the new lock.
    [12537.270476]
    [12537.307209]
    [12537.307209] the existing dependency chain (in reverse order) is:
    [12537.340754]
    [12537.340754] -> #3 (&type->lock_class){++++}:
    [12537.367434]        down_write+0x4d/0x110
    [12537.385202]        __key_link_begin+0x87/0x280
    [12537.405232]        request_key_and_link+0x483/0xf70
    [12537.427221]        request_key+0x3c/0x80
    [12537.444839]        dns_query+0x1db/0x5a5 [dns_resolver]
    [12537.468445]        dns_resolve_server_name_to_ip+0x1e1/0x4d0 [cifs]
    [12537.496731]        cifs_reconnect+0xe04/0x2500 [cifs]
    [12537.519418]        cifs_readv_from_socket+0x461/0x690 [cifs]
    [12537.546263]        cifs_read_from_socket+0xa0/0xe0 [cifs]
    [12537.573551]        cifs_demultiplex_thread+0x311/0x2db0 [cifs]
    [12537.601045]        kthread+0x30c/0x3d0
    [12537.617906]        ret_from_fork+0x3a/0x50
    [12537.636225]
    [12537.636225] -> #2 (root_key_user.cons_lock){+.+.}:
    [12537.664525]        __mutex_lock+0x105/0x11f0
    [12537.683734]        request_key_and_link+0x35a/0xf70
    [12537.705640]        request_key+0x3c/0x80
    [12537.723304]        dns_query+0x1db/0x5a5 [dns_resolver]
    [12537.746773]        dns_resolve_server_name_to_ip+0x1e1/0x4d0 [cifs]
    [12537.775607]        cifs_reconnect+0xe04/0x2500 [cifs]
    [12537.798322]        cifs_readv_from_socket+0x461/0x690 [cifs]
    [12537.823369]        cifs_read_from_socket+0xa0/0xe0 [cifs]
    [12537.847262]        cifs_demultiplex_thread+0x311/0x2db0 [cifs]
    [12537.873477]        kthread+0x30c/0x3d0
    [12537.890281]        ret_from_fork+0x3a/0x50
    [12537.908649]
    [12537.908649] -> #1 (&tcp_ses->srv_mutex){+.+.}:
    [12537.935225]        __mutex_lock+0x105/0x11f0
    [12537.954450]        cifs_call_async+0x102/0x7f0 [cifs]
    [12537.977250]        smb2_async_readv+0x6c3/0xc90 [cifs]
    [12538.000659]        cifs_readpages+0x120a/0x1e50 [cifs]
    [12538.023920]        read_pages+0xf5/0x560
    [12538.041583]        __do_page_cache_readahead+0x41d/0x4b0
    [12538.067047]        ondemand_readahead+0x44c/0xc10
    [12538.092069]        filemap_fault+0xec1/0x1830
    [12538.111637]        __do_fault+0x82/0x260
    [12538.129216]        do_fault+0x419/0xfb0
    [12538.146390]        __handle_mm_fault+0x862/0xdf0
    [12538.167408]        handle_mm_fault+0x154/0x550
    [12538.187401]        __do_page_fault+0x42f/0xa60
    [12538.207395]        do_page_fault+0x38/0x5e0
    [12538.225777]        page_fault+0x1e/0x30
    [12538.243010]
    [12538.243010] -> #0 (&mm->mmap_sem){++++}:
    [12538.267875]        lock_acquire+0x14c/0x420
    [12538.286848]        __might_fault+0x119/0x1b0
    [12538.306006]        keyring_read_iterator+0x7e/0x170
    [12538.327936]        assoc_array_subtree_iterate+0x97/0x280
    [12538.352154]        keyring_read+0xe9/0x110
    [12538.370558]        keyctl_read_key+0x1b9/0x220
    [12538.391470]        do_syscall_64+0xa5/0x4b0
    [12538.410511]        entry_SYSCALL_64_after_hwframe+0x6a/0xdf
    [12538.435535]
    [12538.435535] other info that might help us debug this:
    [12538.435535]
    [12538.472829] Chain exists of:
    [12538.472829]   &mm->mmap_sem --> root_key_user.cons_lock --> &type->lock_class
    [12538.472829]
    [12538.524820]  Possible unsafe locking scenario:
    [12538.524820]
    [12538.551431]        CPU0                    CPU1
    [12538.572654]        ----                    ----
    [12538.595865]   lock(&type->lock_class);
    [12538.613737]                                lock(root_key_user.cons_lock);
    [12538.644234]                                lock(&type->lock_class);
    [12538.672410]   lock(&mm->mmap_sem);
    [12538.687758]
    [12538.687758]  *** DEADLOCK ***
    [12538.687758]
    [12538.714455] 1 lock held by keyctl/25598:
    [12538.732097]  #0: 000000003de5b58d (&type->lock_class){++++}, at: keyctl_read_key+0x15a/0x220
    [12538.770573]
    [12538.770573] stack backtrace:
    [12538.790136] CPU: 2 PID: 25598 Comm: keyctl Kdump: loaded Tainted: G
    [12538.844855] Hardware name: HP ProLiant DL360 Gen9/ProLiant DL360 Gen9, BIOS P89 12/27/2015
    [12538.881963] Call Trace:
    [12538.892897]  dump_stack+0x9a/0xf0
    [12538.907908]  print_circular_bug.isra.25.cold.50+0x1bc/0x279
    [12538.932891]  ? save_trace+0xd6/0x250
    [12538.948979]  check_prev_add.constprop.32+0xc36/0x14f0
    [12538.971643]  ? keyring_compare_object+0x104/0x190
    [12538.992738]  ? check_usage+0x550/0x550
    [12539.009845]  ? sched_clock+0x5/0x10
    [12539.025484]  ? sched_clock_cpu+0x18/0x1e0
    [12539.043555]  __lock_acquire+0x1f12/0x38d0
    [12539.061551]  ? trace_hardirqs_on+0x10/0x10
    [12539.080554]  lock_acquire+0x14c/0x420
    [12539.100330]  ? __might_fault+0xc4/0x1b0
    [12539.119079]  __might_fault+0x119/0x1b0
    [12539.135869]  ? __might_fault+0xc4/0x1b0
    [12539.153234]  keyring_read_iterator+0x7e/0x170
    [12539.172787]  ? keyring_read+0x110/0x110
    [12539.190059]  assoc_array_subtree_iterate+0x97/0x280
    [12539.211526]  keyring_read+0xe9/0x110
    [12539.227561]  ? keyring_gc_check_iterator+0xc0/0xc0
    [12539.249076]  keyctl_read_key+0x1b9/0x220
    [12539.266660]  do_syscall_64+0xa5/0x4b0
    [12539.283091]  entry_SYSCALL_64_after_hwframe+0x6a/0xdf
    
    One way to prevent this deadlock scenario from happening is to not
    allow writing to userspace while holding the key semaphore. Instead,
    an internal buffer is allocated for getting the keys out from the
    read method first before copying them out to userspace without holding
    the lock.
    
    That requires taking out the __user modifier from all the relevant
    read methods as well as additional changes to not use any userspace
    write helpers. That is,
    
      1) The put_user() call is replaced by a direct copy.
      2) The copy_to_user() call is replaced by memcpy().
      3) All the fault handling code is removed.
    
    Compiling on a x86-64 system, the size of the rxrpc_read() function is
    reduced from 3795 bytes to 2384 bytes with this patch.
    
    Fixes: ^1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bea47bf26d7e00ff59c25c2a579336cb5dfb2187
Author: David Howells <dhowells@redhat.com>
Date:   Thu Feb 22 14:38:34 2018 +0000

    KEYS: Use individual pages in big_key for crypto buffers
    
    commit d9f4bb1a0f4db493efe6d7c58ffe696a57de7eb3 upstream.
    
    kmalloc() can't always allocate large enough buffers for big_key to use for
    crypto (1MB + some metadata) so we cannot use that to allocate the buffer.
    Further, vmalloc'd pages can't be passed to sg_init_one() and the aead
    crypto accessors cannot be called progressively and must be passed all the
    data in one go (which means we can't pass the data in one block at a time).
    
    Fix this by allocating the buffer pages individually and passing them
    through a multientry scatterlist to the crypto layer.  This has the bonus
    advantage that we don't have to allocate a contiguous series of pages.
    
    We then vmap() the page list and pass that through to the VFS read/write
    routines.
    
    This can trigger a warning:
    
            WARNING: CPU: 0 PID: 60912 at mm/page_alloc.c:3883 __alloc_pages_nodemask+0xb7c/0x15f8
            ([<00000000002acbb6>] __alloc_pages_nodemask+0x1ee/0x15f8)
             [<00000000002dd356>] kmalloc_order+0x46/0x90
             [<00000000002dd3e0>] kmalloc_order_trace+0x40/0x1f8
             [<0000000000326a10>] __kmalloc+0x430/0x4c0
             [<00000000004343e4>] big_key_preparse+0x7c/0x210
             [<000000000042c040>] key_create_or_update+0x128/0x420
             [<000000000042e52c>] SyS_add_key+0x124/0x220
             [<00000000007bba2c>] system_call+0xc4/0x2b0
    
    from the keyctl/padd/useradd test of the keyutils testsuite on s390x.
    
    Note that it might be better to shovel data through in page-sized lumps
    instead as there's no particular need to use a monolithic buffer unless the
    kernel itself wants to access the data.
    
    Fixes: 13100a72f40f ("Security: Keys: Big keys stored encrypted")
    Reported-by: Paul Bunyan <pbunyan@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Kirill Marinushkin <k.marinushkin@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bab44430dc603d04715e1d6a02e39cf547462e46
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Wed Mar 18 23:31:56 2020 +0800

    mtd: phram: fix a double free issue in error path
    
    commit 49c64df880570034308e4a9a49c4bc95cf8cdb33 upstream.
    
    The variable 'name' is released multiple times in the error path,
    which may cause double free issues.
    This problem is avoided by adding a goto label to release the memory
    uniformly. And this change also makes the code a bit more cleaner.
    
    Fixes: 4f678a58d335 ("mtd: fix memory leaks in phram_setup")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: Joern Engel <joern@lazybastard.org>
    Cc: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Vignesh Raghavendra <vigneshr@ti.com>
    Cc: linux-mtd@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200318153156.25612-1-wenyang@linux.alibaba.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0280a9d9aa5bd64773793cb91fe3e62a11eda975
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Feb 28 12:25:54 2020 +0300

    mtd: lpddr: Fix a double free in probe()
    
    commit 4da0ea71ea934af18db4c63396ba2af1a679ef02 upstream.
    
    This function is only called from lpddr_probe().  We free "lpddr" both
    here and in the caller, so it's a double free.  The best place to free
    "lpddr" is in lpddr_probe() so let's delete this one.
    
    Fixes: 8dc004395d5e ("[MTD] LPDDR qinfo probing.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200228092554.o57igp3nqhyvf66t@kili.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c1449d4e89d9f78154c42693cc348e81145f258
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu Jan 23 09:19:01 2020 -0800

    locktorture: Print ratio of acquisitions, not failures
    
    commit 80c503e0e68fbe271680ab48f0fe29bc034b01b7 upstream.
    
    The __torture_print_stats() function in locktorture.c carefully
    initializes local variable "min" to statp[0].n_lock_acquired, but
    then compares it to statp[i].n_lock_fail.  Given that the .n_lock_fail
    field should normally be zero, and given the initialization, it seems
    reasonable to display the maximum and minimum number acquisitions
    instead of miscomputing the maximum and minimum number of failures.
    This commit therefore switches from failures to acquisitions.
    
    And this turns out to be not only a day-zero bug, but entirely my
    own fault.  I hate it when that happens!
    
    Fixes: 0af3fe1efa53 ("locktorture: Add a lock-torture kernel module")
    Reported-by: Will Deacon <will@kernel.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Acked-by: Will Deacon <will@kernel.org>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Josh Triplett <josh@joshtriplett.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcc576e551a4af3d6b340fc2d96385798d5e3997
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Thu Jan 9 18:39:12 2020 +1100

    tty: evh_bytechan: Fix out of bounds accesses
    
    commit 3670664b5da555a2a481449b3baafff113b0ac35 upstream.
    
    ev_byte_channel_send() assumes that its third argument is a 16 byte
    array. Some places where it is called it may not be (or we can't
    easily tell if it is). Newer compilers have started producing warnings
    about this, so make sure we actually pass a 16 byte array.
    
    There may be more elegant solutions to this, but the driver is quite
    old and hasn't been updated in many years.
    
    The warnings (from a powerpc allyesconfig build) are:
    
      In file included from include/linux/byteorder/big_endian.h:5,
                       from arch/powerpc/include/uapi/asm/byteorder.h:14,
                       from include/asm-generic/bitops/le.h:6,
                       from arch/powerpc/include/asm/bitops.h:250,
                       from include/linux/bitops.h:29,
                       from include/linux/kernel.h:12,
                       from include/asm-generic/bug.h:19,
                       from arch/powerpc/include/asm/bug.h:109,
                       from include/linux/bug.h:5,
                       from include/linux/mmdebug.h:5,
                       from include/linux/gfp.h:5,
                       from include/linux/slab.h:15,
                       from drivers/tty/ehv_bytechan.c:24:
      drivers/tty/ehv_bytechan.c: In function ‘ehv_bc_udbg_putc’:
      arch/powerpc/include/asm/epapr_hcalls.h:298:20: warning: array subscript 1 is outside array bounds of ‘const char[1]’ [-Warray-bounds]
        298 |  r6 = be32_to_cpu(p[1]);
      include/uapi/linux/byteorder/big_endian.h:40:51: note: in definition of macro ‘__be32_to_cpu’
         40 | #define __be32_to_cpu(x) ((__force __u32)(__be32)(x))
            |                                                   ^
      arch/powerpc/include/asm/epapr_hcalls.h:298:7: note: in expansion of macro ‘be32_to_cpu’
        298 |  r6 = be32_to_cpu(p[1]);
            |       ^~~~~~~~~~~
      drivers/tty/ehv_bytechan.c:166:13: note: while referencing ‘data’
        166 | static void ehv_bc_udbg_putc(char c)
            |             ^~~~~~~~~~~~~~~~
    
    Fixes: dcd83aaff1c8 ("tty/powerpc: introduce the ePAPR embedded hypervisor byte channel driver")
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Tested-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
    [mpe: Trim warnings from change log]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200109183912.5fcb52aa@canb.auug.org.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ea3913b19b6d99058f71f4f58c9b7f95e618087
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 13 14:08:14 2020 +0300

    fbdev: potential information leak in do_fb_ioctl()
    
    commit d3d19d6fc5736a798b118971935ce274f7deaa82 upstream.
    
    The "fix" struct has a 2 byte hole after ->ywrapstep and the
    "fix = info->fix;" assignment doesn't necessarily clear it.  It depends
    on the compiler.  The solution is just to replace the assignment with an
    memcpy().
    
    Fixes: 1f5e31d7e55a ("fbmem: don't call copy_from/to_user() with mutex held")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Andrea Righi <righi.andrea@gmail.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Daniel Thompson <daniel.thompson@linaro.org>
    Cc: Peter Rosin <peda@axentia.se>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200113100132.ixpaymordi24n3av@kili.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6ca2a69114bd1daeb733d2b81ea8a248739fb58
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Mar 30 14:38:46 2020 -0700

    net: dsa: bcm_sf2: Fix overflow checks
    
    commit d0802dc411f469569a537283b6f3833af47aece9 upstream.
    
    Commit f949a12fd697 ("net: dsa: bcm_sf2: fix buffer overflow doing
    set_rxnfc") tried to fix the some user controlled buffer overflows in
    bcm_sf2_cfp_rule_set() and bcm_sf2_cfp_rule_del() but the fix was using
    CFP_NUM_RULES, which while it is correct not to overflow the bitmaps, is
    not representative of what the device actually supports. Correct that by
    using bcm_sf2_cfp_rule_size() instead.
    
    The latter subtracts the number of rules by 1, so change the checks from
    greater than or equal to greater than accordingly.
    
    Fixes: f949a12fd697 ("net: dsa: bcm_sf2: fix buffer overflow doing set_rxnfc")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b098eb7486fa87445ac3f8332986b5a50bd0822
Author: Adrian Huang <ahuang12@lenovo.com>
Date:   Fri Feb 14 18:44:51 2020 +0800

    iommu/amd: Fix the configuration of GCR3 table root pointer
    
    [ Upstream commit c20f36534666e37858a14e591114d93cc1be0d34 ]
    
    The SPA of the GCR3 table root pointer[51:31] masks 20 bits. However,
    this requires 21 bits (Please see the AMD IOMMU specification).
    This leads to the potential failure when the bit 51 of SPA of
    the GCR3 table root pointer is 1'.
    
    Signed-off-by: Adrian Huang <ahuang12@lenovo.com>
    Fixes: 52815b75682e2 ("iommu/amd: Add support for IOMMUv2 domain mode")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 483af85a4e71fa0bd7a41e9666683cc94b1ccf0f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 25 19:20:56 2020 +0300

    libnvdimm: Out of bounds read in __nd_ioctl()
    
    [ Upstream commit f84afbdd3a9e5e10633695677b95422572f920dc ]
    
    The "cmd" comes from the user and it can be up to 255.  It it's more
    than the number of bits in long, it results out of bounds read when we
    check test_bit(cmd, &cmd_mask).  The highest valid value for "cmd" is
    ND_CMD_CALL (10) so I added a compare against that.
    
    Fixes: 62232e45f4a2 ("libnvdimm: control (ioctl) messages for nvdimm_bus and nvdimm devices")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200225162055.amtosfy7m35aivxg@kili.mountain
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2c5f60ccc6f140879d4a763aaa6c54a46b3c37a
Author: Jan Kara <jack@suse.cz>
Date:   Tue Mar 17 12:40:02 2020 +0100

    ext2: fix debug reference to ext2_xattr_cache
    
    [ Upstream commit 32302085a8d90859c40cf1a5e8313f575d06ec75 ]
    
    Fix a debug-only build error in ext2/xattr.c:
    
    When building without extra debugging, (and with another patch that uses
    no_printk() instead of <empty> for the ext2-xattr debug-print macros,
    this build error happens:
    
    ../fs/ext2/xattr.c: In function ‘ext2_xattr_cache_insert’:
    ../fs/ext2/xattr.c:869:18: error: ‘ext2_xattr_cache’ undeclared (first use in
    this function); did you mean ‘ext2_xattr_list’?
         atomic_read(&ext2_xattr_cache->c_entry_count));
    
    Fix the problem by removing cached entry count from the debug message
    since otherwise we'd have to export the mbcache structure just for that.
    
    Fixes: be0726d33cb8 ("ext2: convert to mbcache2")
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ca6f11ed16fa248b3e00d6a39470f9e4f5973d0
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Mar 22 19:45:41 2020 -0700

    ext2: fix empty body warnings when -Wextra is used
    
    [ Upstream commit 44a52022e7f15cbaab957df1c14f7a4f527ef7cf ]
    
    When EXT2_ATTR_DEBUG is not defined, modify the 2 debug macros
    to use the no_printk() macro instead of <nothing>.
    This fixes gcc warnings when -Wextra is used:
    
    ../fs/ext2/xattr.c:252:42: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
    ../fs/ext2/xattr.c:258:42: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
    ../fs/ext2/xattr.c:330:42: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
    ../fs/ext2/xattr.c:872:45: warning: suggest braces around empty body in an ‘else’ statement [-Wempty-body]
    
    I have verified that the only object code change (with gcc 7.5.0) is
    the reversal of some instructions from 'cmp a,b' to 'cmp b,a'.
    
    Link: https://lore.kernel.org/r/e18a7395-61fb-2093-18e8-ed4f8cf56248@infradead.org
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Jan Kara <jack@suse.com>
    Cc: linux-ext4@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c49f66238e53f4b9f208ef6bf879b2688e28d6f7
Author: Jacob Pan <jacob.jun.pan@linux.intel.com>
Date:   Thu Mar 19 21:32:30 2020 -0700

    iommu/vt-d: Fix mm reference leak
    
    [ Upstream commit 902baf61adf6b187f0a6b789e70d788ea71ff5bc ]
    
    Move canonical address check before mmget_not_zero() to avoid mm
    reference leak.
    
    Fixes: 9d8c3af31607 ("iommu/vt-d: IOMMU Page Request needs to check if address is canonical.")
    Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af8a66de65efe29be42f0726f477fff2e7bc1560
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Mar 29 20:06:45 2020 -0400

    NFS: Fix memory leaks in nfs_pageio_stop_mirroring()
    
    [ Upstream commit 862f35c94730c9270833f3ad05bd758a29f204ed ]
    
    If we just set the mirror count to 1 without first clearing out
    the mirrors, we can leak queued up requests.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb8ce25d1f09809715886de491924507e516e0c7
Author: Jack Zhang <Jack.Zhang1@amd.com>
Date:   Wed Apr 1 20:06:58 2020 +0800

    drm/amdkfd: kfree the wrong pointer
    
    [ Upstream commit 3148a6a0ef3cf93570f30a477292768f7eb5d3c3 ]
    
    Originally, it kfrees the wrong pointer for mem_obj.
    It would cause memory leak under stress test.
    
    Signed-off-by: Jack Zhang <Jack.Zhang1@amd.com>
    Acked-by: Nirmoy Das <nirmoy.das@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f0f235c52494fa43305aa659fe309bd6bc29767
Author: Qian Cai <cai@lca.pw>
Date:   Fri Apr 3 10:03:45 2020 -0400

    x86: ACPI: fix CPU hotplug deadlock
    
    [ Upstream commit 696ac2e3bf267f5a2b2ed7d34e64131f2287d0ad ]
    
    Similar to commit 0266d81e9bf5 ("acpi/processor: Prevent cpu hotplug
    deadlock") except this is for acpi_processor_ffh_cstate_probe():
    
    "The problem is that the work is scheduled on the current CPU from the
    hotplug thread associated with that CPU.
    
    It's not required to invoke these functions via the workqueue because
    the hotplug thread runs on the target CPU already.
    
    Check whether current is a per cpu thread pinned on the target CPU and
    invoke the function directly to avoid the workqueue."
    
     WARNING: possible circular locking dependency detected
     ------------------------------------------------------
     cpuhp/1/15 is trying to acquire lock:
     ffffc90003447a28 ((work_completion)(&wfc.work)){+.+.}-{0:0}, at: __flush_work+0x4c6/0x630
    
     but task is already holding lock:
     ffffffffafa1c0e8 (cpuidle_lock){+.+.}-{3:3}, at: cpuidle_pause_and_lock+0x17/0x20
    
     which lock already depends on the new lock.
    
     the existing dependency chain (in reverse order) is:
    
     -> #1 (cpu_hotplug_lock){++++}-{0:0}:
     cpus_read_lock+0x3e/0xc0
     irq_calc_affinity_vectors+0x5f/0x91
     __pci_enable_msix_range+0x10f/0x9a0
     pci_alloc_irq_vectors_affinity+0x13e/0x1f0
     pci_alloc_irq_vectors_affinity at drivers/pci/msi.c:1208
     pqi_ctrl_init+0x72f/0x1618 [smartpqi]
     pqi_pci_probe.cold.63+0x882/0x892 [smartpqi]
     local_pci_probe+0x7a/0xc0
     work_for_cpu_fn+0x2e/0x50
     process_one_work+0x57e/0xb90
     worker_thread+0x363/0x5b0
     kthread+0x1f4/0x220
     ret_from_fork+0x27/0x50
    
     -> #0 ((work_completion)(&wfc.work)){+.+.}-{0:0}:
     __lock_acquire+0x2244/0x32a0
     lock_acquire+0x1a2/0x680
     __flush_work+0x4e6/0x630
     work_on_cpu+0x114/0x160
     acpi_processor_ffh_cstate_probe+0x129/0x250
     acpi_processor_evaluate_cst+0x4c8/0x580
     acpi_processor_get_power_info+0x86/0x740
     acpi_processor_hotplug+0xc3/0x140
     acpi_soft_cpu_online+0x102/0x1d0
     cpuhp_invoke_callback+0x197/0x1120
     cpuhp_thread_fun+0x252/0x2f0
     smpboot_thread_fn+0x255/0x440
     kthread+0x1f4/0x220
     ret_from_fork+0x27/0x50
    
     other info that might help us debug this:
    
     Chain exists of:
     (work_completion)(&wfc.work) --> cpuhp_state-up --> cpuidle_lock
    
     Possible unsafe locking scenario:
    
     CPU0                    CPU1
     ----                    ----
     lock(cpuidle_lock);
                             lock(cpuhp_state-up);
                             lock(cpuidle_lock);
     lock((work_completion)(&wfc.work));
    
     *** DEADLOCK ***
    
     3 locks held by cpuhp/1/15:
     #0: ffffffffaf51ab10 (cpu_hotplug_lock){++++}-{0:0}, at: cpuhp_thread_fun+0x69/0x2f0
     #1: ffffffffaf51ad40 (cpuhp_state-up){+.+.}-{0:0}, at: cpuhp_thread_fun+0x69/0x2f0
     #2: ffffffffafa1c0e8 (cpuidle_lock){+.+.}-{3:3}, at: cpuidle_pause_and_lock+0x17/0x20
    
     Call Trace:
     dump_stack+0xa0/0xea
     print_circular_bug.cold.52+0x147/0x14c
     check_noncircular+0x295/0x2d0
     __lock_acquire+0x2244/0x32a0
     lock_acquire+0x1a2/0x680
     __flush_work+0x4e6/0x630
     work_on_cpu+0x114/0x160
     acpi_processor_ffh_cstate_probe+0x129/0x250
     acpi_processor_evaluate_cst+0x4c8/0x580
     acpi_processor_get_power_info+0x86/0x740
     acpi_processor_hotplug+0xc3/0x140
     acpi_soft_cpu_online+0x102/0x1d0
     cpuhp_invoke_callback+0x197/0x1120
     cpuhp_thread_fun+0x252/0x2f0
     smpboot_thread_fn+0x255/0x440
     kthread+0x1f4/0x220
     ret_from_fork+0x27/0x50
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Tested-by: Borislav Petkov <bp@suse.de>
    [ rjw: Subject ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19e4e3ddc8d1c762c8dd45f31ca1fb7ed305842b
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Apr 3 17:30:48 2020 +0200

    KVM: s390: vsie: Fix possible race when shadowing region 3 tables
    
    [ Upstream commit 1493e0f944f3c319d11e067c185c904d01c17ae5 ]
    
    We have to properly retry again by returning -EINVAL immediately in case
    somebody else instantiated the table concurrently. We missed to add the
    goto in this function only. The code now matches the other, similar
    shadowing functions.
    
    We are overwriting an existing region 2 table entry. All allocated pages
    are added to the crst_list to be freed later, so they are not lost
    forever. However, when unshadowing the region 2 table, we wouldn't trigger
    unshadowing of the original shadowed region 3 table that we replaced. It
    would get unshadowed when the original region 3 table is modified. As it's
    not connected to the page table hierarchy anymore, it's not going to get
    used anymore. However, for a limited time, this page table will stick
    around, so it's in some sense a temporary memory leak.
    
    Identified by manual code inspection. I don't think this classifies as
    stable material.
    
    Fixes: 998f637cc4b9 ("s390/mm: avoid races on region/segment/page table shadowing")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Link: https://lore.kernel.org/r/20200403153050.20569-4-david@redhat.com
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3ee5ef07eccf70b8817a9763d2ae3d728701d27
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Mon Apr 6 20:09:37 2020 -0700

    compiler.h: fix error in BUILD_BUG_ON() reporting
    
    [ Upstream commit af9c5d2e3b355854ff0e4acfbfbfadcd5198a349 ]
    
    compiletime_assert() uses __LINE__ to create a unique function name.  This
    means that if you have more than one BUILD_BUG_ON() in the same source
    line (which can happen if they appear e.g.  in a macro), then the error
    message from the compiler might output the wrong condition.
    
    For this source file:
    
            #include <linux/build_bug.h>
    
            #define macro() \
                    BUILD_BUG_ON(1); \
                    BUILD_BUG_ON(0);
    
            void foo()
            {
                    macro();
            }
    
    gcc would output:
    
    ./include/linux/compiler.h:350:38: error: call to `__compiletime_assert_9' declared with attribute error: BUILD_BUG_ON failed: 0
      _compiletime_assert(condition, msg, __compiletime_assert_, __LINE__)
    
    However, it was not the BUILD_BUG_ON(0) that failed, so it should say 1
    instead of 0. With this patch, we use __COUNTER__ instead of __LINE__, so
    each BUILD_BUG_ON() gets a different function name and the correct
    condition is printed:
    
    ./include/linux/compiler.h:350:38: error: call to `__compiletime_assert_0' declared with attribute error: BUILD_BUG_ON failed: 1
      _compiletime_assert(condition, msg, __compiletime_assert_, __COUNTER__)
    
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Daniel Santos <daniel.santos@pobox.com>
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Cc: Ian Abbott <abbotti@mev.co.uk>
    Cc: Joe Perches <joe@perches.com>
    Link: http://lkml.kernel.org/r/20200331112637.25047-1-vegard.nossum@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b9da6edc015cd5c858dac00aabc6e6fe33cf0fc
Author: Qian Cai <cai@lca.pw>
Date:   Mon Apr 6 20:10:25 2020 -0700

    percpu_counter: fix a data race at vm_committed_as
    
    [ Upstream commit 7e2345200262e4a6056580f0231cccdaffc825f3 ]
    
    "vm_committed_as.count" could be accessed concurrently as reported by
    KCSAN,
    
     BUG: KCSAN: data-race in __vm_enough_memory / percpu_counter_add_batch
    
     write to 0xffffffff9451c538 of 8 bytes by task 65879 on cpu 35:
      percpu_counter_add_batch+0x83/0xd0
      percpu_counter_add_batch at lib/percpu_counter.c:91
      __vm_enough_memory+0xb9/0x260
      dup_mm+0x3a4/0x8f0
      copy_process+0x2458/0x3240
      _do_fork+0xaa/0x9f0
      __do_sys_clone+0x125/0x160
      __x64_sys_clone+0x70/0x90
      do_syscall_64+0x91/0xb05
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
     read to 0xffffffff9451c538 of 8 bytes by task 66773 on cpu 19:
      __vm_enough_memory+0x199/0x260
      percpu_counter_read_positive at include/linux/percpu_counter.h:81
      (inlined by) __vm_enough_memory at mm/util.c:839
      mmap_region+0x1b2/0xa10
      do_mmap+0x45c/0x700
      vm_mmap_pgoff+0xc0/0x130
      ksys_mmap_pgoff+0x6e/0x300
      __x64_sys_mmap+0x33/0x40
      do_syscall_64+0x91/0xb05
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The read is outside percpu_counter::lock critical section which results in
    a data race.  Fix it by adding a READ_ONCE() in
    percpu_counter_read_positive() which could also service as the existing
    compiler memory barrier.
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Marco Elver <elver@google.com>
    Link: http://lkml.kernel.org/r/1582302724-2804-1-git-send-email-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17336dd3138049aaba7e152c7a65c6dc966e820c
Author: Steven Price <steven.price@arm.com>
Date:   Mon Apr 6 20:08:43 2020 -0700

    include/linux/swapops.h: correct guards for non_swap_entry()
    
    [ Upstream commit 3f3673d7d324d872d9d8ddb73b3e5e47fbf12e0d ]
    
    If CONFIG_DEVICE_PRIVATE is defined, but neither CONFIG_MEMORY_FAILURE nor
    CONFIG_MIGRATION, then non_swap_entry() will return 0, meaning that the
    condition (non_swap_entry(entry) && is_device_private_entry(entry)) in
    zap_pte_range() will never be true even if the entry is a device private
    one.
    
    Equally any other code depending on non_swap_entry() will not function as
    expected.
    
    I originally spotted this just by looking at the code, I haven't actually
    observed any problems.
    
    Looking a bit more closely it appears that actually this situation
    (currently at least) cannot occur:
    
    DEVICE_PRIVATE depends on ZONE_DEVICE
    ZONE_DEVICE depends on MEMORY_HOTREMOVE
    MEMORY_HOTREMOVE depends on MIGRATION
    
    Fixes: 5042db43cc26 ("mm/ZONE_DEVICE: new type of ZONE_DEVICE for unaddressable memory")
    Signed-off-by: Steven Price <steven.price@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Jérôme Glisse <jglisse@redhat.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Link: http://lkml.kernel.org/r/20200305130550.22693-1-steven.price@arm.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8c6f4104f44a885237e56b8d6a4d1ee0c417b76
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Wed Mar 18 14:19:38 2020 -0500

    ext4: do not commit super on read-only bdev
    
    [ Upstream commit c96e2b8564adfb8ac14469ebc51ddc1bfecb3ae2 ]
    
    Under some circumstances we may encounter a filesystem error on a
    read-only block device, and if we try to save the error info to the
    superblock and commit it, we'll wind up with a noisy error and
    backtrace, i.e.:
    
    [ 3337.146838] EXT4-fs error (device pmem1p2): ext4_get_journal_inode:4634: comm mount: inode #0: comm mount: iget: illegal inode #
    ------------[ cut here ]------------
    generic_make_request: Trying to write to read-only block-device pmem1p2 (partno 2)
    WARNING: CPU: 107 PID: 115347 at block/blk-core.c:788 generic_make_request_checks+0x6b4/0x7d0
    ...
    
    To avoid this, commit the error info in the superblock only if the
    block device is writable.
    
    Reported-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/4b6e774d-cc00-3469-7abb-108eb151071a@sandeen.net
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66385f1113b9ecf282c625b79c26dd513ab36988
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Mar 23 15:27:29 2020 -0700

    powerpc/maple: Fix declaration made after definition
    
    [ Upstream commit af6cf95c4d003fccd6c2ecc99a598fb854b537e7 ]
    
    When building ppc64 defconfig, Clang errors (trimmed for brevity):
    
      arch/powerpc/platforms/maple/setup.c:365:1: error: attribute declaration
      must precede definition [-Werror,-Wignored-attributes]
      machine_device_initcall(maple, maple_cpc925_edac_setup);
      ^
    
    machine_device_initcall expands to __define_machine_initcall, which in
    turn has the macro machine_is used in it, which declares mach_##name
    with an __attribute__((weak)). define_machine actually defines
    mach_##name, which in this file happens before the declaration, hence
    the warning.
    
    To fix this, move define_machine after machine_device_initcall so that
    the declaration occurs before the definition, which matches how
    machine_device_initcall and define_machine work throughout
    arch/powerpc.
    
    While we're here, remove some spaces before tabs.
    
    Fixes: 8f101a051ef0 ("edac: cpc925 MC platform device setup")
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Suggested-by: Ilie Halip <ilie.halip@gmail.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200323222729.15365-1-natechancellor@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77ca252e4cfbd21a46ee930b65cffa1ac265078b
Author: Alexander Gordeev <agordeev@linux.ibm.com>
Date:   Mon Mar 16 12:39:55 2020 +0100

    s390/cpuinfo: fix wrong output when CPU0 is offline
    
    [ Upstream commit 872f27103874a73783aeff2aac2b41a489f67d7c ]
    
    /proc/cpuinfo should not print information about CPU 0 when it is offline.
    
    Fixes: 281eaa8cb67c ("s390/cpuinfo: simplify locking and skip offline cpus early")
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    [heiko.carstens@de.ibm.com: shortened commit message]
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da186a08b3d1165ea482dcbe4ba5343c46ca20a8
Author: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
Date:   Wed Aug 28 17:01:22 2019 +0900

    NFS: direct.c: Fix memory leak of dreq when nfs_get_lock_context fails
    
    [ Upstream commit 8605cf0e852af3b2c771c18417499dc4ceed03d5 ]
    
    When dreq is allocated by nfs_direct_req_alloc(), dreq->kref is
    initialized to 2. Therefore we need to call nfs_direct_req_release()
    twice to release the allocated dreq. Usually it is called in
    nfs_file_direct_{read, write}() and nfs_direct_complete().
    
    However, current code only calls nfs_direct_req_relese() once if
    nfs_get_lock_context() fails in nfs_file_direct_{read, write}().
    So, that case would result in memory leak.
    
    Fix this by adding the missing call.
    
    Signed-off-by: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fd0b83ac7bc47678663a79c67394d558cc598f4
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Thu Feb 27 11:01:12 2020 -0500

    NFSv4/pnfs: Return valid stateids in nfs_layout_find_inode_by_stateid()
    
    [ Upstream commit d911c57a19551c6bef116a3b55c6b089901aacb0 ]
    
    Make sure to test the stateid for validity so that we catch instances
    where the server may have been reusing stateids in
    nfs_layout_find_inode_by_stateid().
    
    Fixes: 7b410d9ce460 ("pNFS: Delay getting the layout header in CB_LAYOUTRECALL handlers")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3eecbde9cbe23a1943feb935b82ba7f8fbb6a5a7
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Mar 11 23:39:51 2020 +0100

    rtc: 88pm860x: fix possible race condition
    
    [ Upstream commit 9cf4789e6e4673d0b2c96fa6bb0c35e81b43111a ]
    
    The RTC IRQ is requested before the struct rtc_device is allocated,
    this may lead to a NULL pointer dereference in the IRQ handler.
    
    To fix this issue, allocating the rtc_device struct before requesting
    the RTC IRQ using devm_rtc_allocate_device, and use rtc_register_device
    to register the RTC device.
    
    Also remove the unnecessary error message as the core already prints the
    info.
    
    Link: https://lore.kernel.org/r/20200311223956.51352-1-alexandre.belloni@bootlin.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 617dcdd3d27d0f5059bafe88d44750b13efc4e5c
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Mar 13 11:09:12 2020 +0100

    soc: imx: gpc: fix power up sequencing
    
    [ Upstream commit e0ea2d11f8a08ba7066ff897e16c5217215d1e68 ]
    
    Currently we wait only until the PGC inverts the isolation setting
    before disabling the peripheral clocks. This doesn't ensure that the
    reset is properly propagated through the peripheral devices in the
    power domain.
    
    Wait until the PGC signals that the power up request is done and
    wait a bit for resets to propagate before disabling the clocks.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fec728da800320099a7c6fd10e5e766379b043c
Author: Sowjanya Komatineni <skomatineni@nvidia.com>
Date:   Mon Jan 13 23:24:09 2020 -0800

    clk: tegra: Fix Tegra PMC clock out parents
    
    [ Upstream commit 6fe38aa8cac3a5db38154331742835a4d9740788 ]
    
    Tegra PMC clocks clk_out_1, clk_out_2, and clk_out_3 supported parents
    are osc, osc_div2, osc_div4 and extern clock.
    
    Clock driver is using incorrect parents clk_m, clk_m_div2, clk_m_div4
    for PMC clocks.
    
    This patch fixes this.
    
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c73c3e1d04e77daf7f89397b8f68f6c7b548aaf0
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Mar 9 00:51:43 2020 +0300

    power: supply: bq27xxx_battery: Silence deferred-probe error
    
    [ Upstream commit 583b53ece0b0268c542a1eafadb62e3d4b0aab8c ]
    
    The driver fails to probe with -EPROBE_DEFER if battery's power supply
    (charger driver) isn't ready yet and this results in a bit noisy error
    message in KMSG during kernel's boot up. Let's silence the harmless
    error message.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Reviewed-by: Andrew F. Davis <afd@ti.com>
    Reviewed-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eac4b10ec13112acc34bee8e02a8071857497a5b
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Jan 17 13:36:46 2020 +0200

    clk: at91: usb: continue if clk_hw_round_rate() return zero
    
    [ Upstream commit b0ecf1c6c6e82da4847900fad0272abfd014666d ]
    
    clk_hw_round_rate() may call round rate function of its parents. In case
    of SAM9X60 two of USB parrents are PLLA and UPLL. These clocks are
    controlled by clk-sam9x60-pll.c driver. The round rate function for this
    driver is sam9x60_pll_round_rate() which call in turn
    sam9x60_pll_get_best_div_mul(). In case the requested rate is not in the
    proper range (rate < characteristics->output[0].min &&
    rate > characteristics->output[0].max) the sam9x60_pll_round_rate() will
    return a negative number to its caller (called by
    clk_core_round_rate_nolock()). clk_hw_round_rate() will return zero in
    case a negative number is returned by clk_core_round_rate_nolock(). With
    this, the USB clock will continue its rate computation even caller of
    clk_hw_round_rate() returned an error. With this, the USB clock on SAM9X60
    may not chose the best parent. I detected this after a suspend/resume
    cycle on SAM9X60.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lkml.kernel.org/r/1579261009-4573-2-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b712f00a98c10b6bca4f89cbe5cd04189b1dae7a
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Apr 16 16:42:47 2020 -0500

    of: unittest: kmemleak in of_unittest_platform_populate()
    
    [ Upstream commit 216830d2413cc61be3f76bc02ffd905e47d2439e ]
    
    kmemleak reports several memory leaks from devicetree unittest.
    This is the fix for problem 2 of 5.
    
    of_unittest_platform_populate() left an elevated reference count for
    grandchild nodes (which are platform devices).  Fix the platform
    device reference counts so that the memory will be freed.
    
    Fixes: fb2caa50fbac ("of/selftest: add testcase for nodes with same name and address")
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f463b1273df7624f9a8a5d4de53e42207061b90c
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon Mar 16 15:52:54 2020 +0100

    rbd: call rbd_dev_unprobe() after unwatching and flushing notifies
    
    [ Upstream commit 952c48b0ed18919bff7528501e9a3fff8a24f8cd ]
    
    rbd_dev_unprobe() is supposed to undo most of rbd_dev_image_probe(),
    including rbd_dev_header_info(), which means that rbd_dev_header_info()
    isn't supposed to be called after rbd_dev_unprobe().
    
    However, rbd_dev_image_release() calls rbd_dev_unprobe() before
    rbd_unregister_watch().  This is racy because a header update notify
    can sneak in:
    
      "rbd unmap" thread                   ceph-watch-notify worker
    
      rbd_dev_image_release()
        rbd_dev_unprobe()
          free and zero out header
                                           rbd_watch_cb()
                                             rbd_dev_refresh()
                                               rbd_dev_header_info()
                                                 read in header
    
    The same goes for "rbd map" because rbd_dev_image_probe() calls
    rbd_dev_unprobe() on errors.  In both cases this results in a memory
    leak.
    
    Fixes: fd22aef8b47c ("rbd: move rbd_unregister_watch() call into rbd_dev_image_release()")
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jason Dillaman <dillaman@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fce4bd5793775570e461fc5d2da9b47e12a62c74
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Fri Mar 13 11:20:51 2020 +0100

    rbd: avoid a deadlock on header_rwsem when flushing notifies
    
    [ Upstream commit 0e4e1de5b63fa423b13593337a27fd2d2b0bcf77 ]
    
    rbd_unregister_watch() flushes notifies and therefore cannot be called
    under header_rwsem because a header update notify takes header_rwsem to
    synchronize with "rbd map".  If mapping an image fails after the watch
    is established and a header update notify sneaks in, we deadlock when
    erroring out from rbd_dev_image_probe().
    
    Move watch registration and unregistration out of the critical section.
    The only reason they were put there was to make header_rwsem management
    slightly more obvious.
    
    Fixes: 811c66887746 ("rbd: fix rbd map vs notify races")
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jason Dillaman <dillaman@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6c4c74a0fe1bbe0141311f1bcec9e175897fd99
Author: Rob Herring <robh@kernel.org>
Date:   Tue Apr 21 13:40:16 2020 +0100

    of: fix missing kobject init for !SYSFS && OF_DYNAMIC config
    
    [ Upstream commit bd82bbf38cbe27f2c65660da801900d71bcc5cc8 ]
    
    The ref counting is broken for OF_DYNAMIC when sysfs is disabled because
    the kobject initialization is skipped. Only the properties
    add/remove/update should be skipped for !SYSFS config.
    
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Reviewed-by: Frank Rowand <frowand.list@gmail.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef024894687611d7180fd8cbe6474583731f47d2
Author: Chris Lew <clew@codeaurora.org>
Date:   Tue Apr 21 13:40:15 2020 +0100

    soc: qcom: smem: Use le32_to_cpu for comparison
    
    [ Upstream commit a216000f0140f415cec96129f777b5234c9d142f ]
    
    Endianness can vary in the system, add le32_to_cpu when comparing
    partition sizes from smem.
    
    Signed-off-by: Chris Lew <clew@codeaurora.org>
    Acked-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf4857e107acf1a9ff46084743248c28f150038f
Author: Hamad Kadmany <qca_hkadmany@qca.qualcomm.com>
Date:   Tue Apr 21 13:40:14 2020 +0100

    wil6210: abort properly in cfg suspend
    
    [ Upstream commit 144a12a6d83f3ca34ddefce5dee4d502afd2fc5b ]
    
    On-going operations were not aborted properly
    and required locks were not taken.
    
    Signed-off-by: Hamad Kadmany <qca_hkadmany@qca.qualcomm.com>
    Signed-off-by: Maya Erez <qca_merez@qca.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1881ed10abc22cfbb4c8e82d03cacf5ba8249862
Author: Lior David <qca_liord@qca.qualcomm.com>
Date:   Tue Apr 21 13:40:13 2020 +0100

    wil6210: fix length check in __wmi_send
    
    [ Upstream commit 26a6d5274865532502c682ff378ac8ebe2886238 ]
    
    The current length check:
    sizeof(cmd) + len > r->entry_size
    will allow very large values of len (> U16_MAX - sizeof(cmd))
    and can cause a buffer overflow. Fix the check to cover this case.
    In addition, ensure the mailbox entry_size is not too small,
    since this can also bypass the above check.
    
    Signed-off-by: Lior David <qca_liord@qca.qualcomm.com>
    Signed-off-by: Maya Erez <qca_merez@qca.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f786a17bbe27d447cfc5fed0aefcb3e05a3f0aaf
Author: Lior David <qca_liord@qca.qualcomm.com>
Date:   Tue Apr 21 13:40:12 2020 +0100

    wil6210: add block size checks during FW load
    
    [ Upstream commit 705d2fde94b23cd76efbeedde643ffa7c32fac7f ]
    
    When loading FW from file add block size checks to ensure a
    corrupted FW file will not cause the driver to write outside
    the device memory.
    
    Signed-off-by: Lior David <qca_liord@qca.qualcomm.com>
    Signed-off-by: Maya Erez <qca_merez@qca.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ccc2c89e67c3311eb43c52c40388bfc48253ac5
Author: Lazar Alexei <qca_ailizaro@qca.qualcomm.com>
Date:   Tue Apr 21 13:40:11 2020 +0100

    wil6210: fix PCIe bus mastering in case of interface down
    
    [ Upstream commit 680c242dc25e036265793edc7d755cfc15afd231 ]
    
    In case of interface down, radio is turned off but PCIe mastering is
    not cleared.
    This can cause unexpected PCIe access to the shutdown device.
    Fix this by clearing PCIe mastering also in case interface is down
    
    Signed-off-by: Lazar Alexei <qca_ailizaro@qca.qualcomm.com>
    Signed-off-by: Maya Erez <qca_merez@qca.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit deb1682b6f049bf5e6c496b1b2d45395ee971f32
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Tue Apr 21 13:40:10 2020 +0100

    rpmsg: glink: smem: Ensure ordering during tx
    
    [ Upstream commit 9d32497361ff89d2fc8306407de6f04b2bfb2836 ]
    
    Ensure the ordering of the fifo write and the update of the write index,
    so that the index is not updated before the data has landed in the fifo.
    
    Acked-By: Chris Lew <clew@codeaurora.org>
    Reported-by: Arun Kumar Neelakantam <aneela@codeaurora.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb8ca3d39feca1c07cc138ef16675a3ce690b469
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Tue Apr 21 13:40:09 2020 +0100

    rpmsg: glink: Fix missing mutex_init() in qcom_glink_alloc_channel()
    
    [ Upstream commit fb416f69900773d5a6030c909114099f92d07ab9 ]
    
    qcom_glink_alloc_channel() allocates the mutex but not initialize it.
    Use mutex_init() on it to initialize it correctly.
    
    This is detected by Coccinelle semantic patch.
    
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 971702e14c9cc5fe4aa0f6d442d6fa7c6109380c
Author: Mohit Aggarwal <maggarwa@codeaurora.org>
Date:   Tue Apr 21 13:40:07 2020 +0100

    rtc: pm8xxx: Fix issue in RTC write path
    
    [ Upstream commit 83220bf38b77a830f8e62ab1a0d0408304f9b966 ]
    
    In order to set time in rtc, need to disable
    rtc hw before writing into rtc registers.
    
    Also fixes disabling of alarm while setting
    rtc time.
    
    Signed-off-by: Mohit Aggarwal <maggarwa@codeaurora.org>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 054808c3d848d9f2d011b2a87b98a945a9b4bedd
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Tue Apr 21 13:40:06 2020 +0100

    rpmsg: glink: use put_device() if device_register fail
    
    [ Upstream commit a9011726c4bb37e5d6a7279bf47fcc19cd9d3e1a ]
    
    if device_register() returned an error! Always use put_device()
    to give up the reference initialized. And unregister device for
    other return error.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1c2069246b69d594f69176b67662cf43010fb8e
Author: Dedy Lansky <dlansky@codeaurora.org>
Date:   Tue Apr 21 13:40:05 2020 +0100

    wil6210: rate limit wil_rx_refill error
    
    [ Upstream commit 3d6b72729cc2933906de8d2c602ae05e920b2122 ]
    
    wil_err inside wil_rx_refill can flood the log buffer.
    Replace it with wil_err_ratelimited.
    
    Signed-off-by: Dedy Lansky <dlansky@codeaurora.org>
    Signed-off-by: Maya Erez <merez@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 310a92c1720e87de261f481048e19b606aa04495
Author: Subhash Jadavani <subhashj@codeaurora.org>
Date:   Tue Apr 21 13:40:04 2020 +0100

    scsi: ufs: ufs-qcom: remove broken hci version quirk
    
    [ Upstream commit 69a6fff068567469c0ef1156ae5ac8d3d71701f0 ]
    
    UFSHCD_QUIRK_BROKEN_UFS_HCI_VERSION is only applicable for QCOM UFS host
    controller version 2.x.y and this has been fixed from version 3.x.y
    onwards, hence this change removes this quirk for version 3.x.y onwards.
    
    [mkp: applied by hand]
    
    Signed-off-by: Subhash Jadavani <subhashj@codeaurora.org>
    Signed-off-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4719923f9b9bffa23b2389c3cf80cc0bd9338b20
Author: Venkat Gopalakrishnan <venkatg@codeaurora.org>
Date:   Tue Apr 21 13:40:03 2020 +0100

    scsi: ufs: make sure all interrupts are processed
    
    [ Upstream commit 7f6ba4f12e6cbfdefbb95cfd8fc67ece6c15d799 ]
    
    As multiple requests are submitted to the ufs host controller in
    parallel there could be instances where the command completion interrupt
    arrives later for a request that is already processed earlier as the
    corresponding doorbell was cleared when handling the previous
    interrupt. Read the interrupt status in a loop after processing the
    received interrupt to catch such interrupts and handle it.
    
    Signed-off-by: Venkat Gopalakrishnan <venkatg@codeaurora.org>
    Signed-off-by: Asutosh Das <asutoshd@codeaurora.org>
    Reviewed-by: Subhash Jadavani <subhashj@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64ba980bbfd29e08156b3e5936b36933a739ab63
Author: Dedy Lansky <dlansky@codeaurora.org>
Date:   Tue Apr 21 13:40:02 2020 +0100

    wil6210: fix temperature debugfs
    
    [ Upstream commit 6d9eb7ebae3d7e951bc0999235ae7028eb4cae4f ]
    
    For negative temperatures, "temp" debugfs is showing wrong values.
    Use signed types so proper calculations is done for sub zero
    temperatures.
    
    Signed-off-by: Dedy Lansky <dlansky@codeaurora.org>
    Signed-off-by: Maya Erez <merez@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a556431df23e98e0c0ac9126b721367df183e6fc
Author: Hamad Kadmany <hkadmany@codeaurora.org>
Date:   Tue Apr 21 13:40:01 2020 +0100

    wil6210: increase firmware ready timeout
    
    [ Upstream commit 6ccae584014ef7074359eb4151086beef66ecfa9 ]
    
    Firmware ready event may take longer than
    current timeout in some scenarios, for example
    with multiple RFs connected where each
    requires an initial calibration.
    
    Increase the timeout to support these scenarios.
    
    Signed-off-by: Hamad Kadmany <hkadmany@codeaurora.org>
    Signed-off-by: Maya Erez <merez@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af96128494a29761547cf43b67a989a7f74f66f2
Author: Prasad Sodagudi <psodagud@codeaurora.org>
Date:   Tue Apr 21 13:40:00 2020 +0100

    arch_topology: Fix section miss match warning due to free_raw_capacity()
    
    [ Upstream commit 82d8ba717ccb54dd803624db044f351b2a54d000 ]
    
    Remove the __init annotation from free_raw_capacity() to avoid
    the following warning.
    
    The function init_cpu_capacity_callback() references the
    function __init free_raw_capacity().
    WARNING: vmlinux.o(.text+0x425cc0): Section mismatch in reference
    from the function init_cpu_capacity_callback() to the function
    .init.text:free_raw_capacity().
    
    Signed-off-by: Prasad Sodagudi <psodagud@codeaurora.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dc0256f802be6bc783fb9542affb48d267f592c
Author: Will Deacon <will@kernel.org>
Date:   Tue Apr 21 13:39:58 2020 +0100

    arm64: traps: Don't print stack or raw PC/LR values in backtraces
    
    [ Upstream commit a25ffd3a6302a67814280274d8f1aa4ae2ea4b59 ]
    
    Printing raw pointer values in backtraces has potential security
    implications and are of questionable value anyway.
    
    This patch follows x86's lead and removes the "Exception stack:" dump
    from kernel backtraces, as well as converting PC/LR values to symbols
    such as "sysrq_handle_crash+0x20/0x30".
    
    Tested-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a0e901f9f742a99219293e994e380ee8de1237a
Author: Xu YiPing <xuyiping@hisilicon.com>
Date:   Tue Apr 21 13:39:57 2020 +0100

    arm64: perf: remove unsupported events for Cortex-A73
    
    [ Upstream commit f8ada189550984ee21f27be736042b74a7da1d68 ]
    
    bus access read/write events are not supported in A73, based on the
    Cortex-A73 TRM r0p2, section 11.9 Events (pages 11-457 to 11-460).
    
    Fixes: 5561b6c5e981 "arm64: perf: add support for Cortex-A73"
    Acked-by: Julien Thierry <julien.thierry@arm.com>
    Signed-off-by: Xu YiPing <xuyiping@hisilicon.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42d394b07ccd09907ceced8e689903c30ab3bec9
Author: Timur Tabi <timur@codeaurora.org>
Date:   Tue Apr 21 13:39:56 2020 +0100

    Revert "gpio: set up initial state from .get_direction()"
    
    [ Upstream commit 1ca2a92b2a99323f666f1b669b7484df4bda05e4 ]
    
    This reverts commit 72d3200061776264941be1b5a9bb8e926b3b30a5.
    
    We cannot blindly query the direction of all GPIOs when the pins are
    first registered.  The get_direction callback normally triggers a
    read/write to hardware, but we shouldn't be touching the hardware for
    an individual GPIO until after it's been properly claimed.
    
    Signed-off-by: Timur Tabi <timur@codeaurora.org>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2f44233faf89e208bf9af0064eb4677dd7cda6b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Jan 3 12:06:15 2018 +0100

    clk: Fix debugfs_create_*() usage
    
    commit 4c8326d5ebb0de3191e98980c80ab644026728d0 upstream.
    
    When exposing data access through debugfs, the correct
    debugfs_create_*() functions must be used, matching the data
    types.
    
    Remove all casts from data pointers passed to debugfs_create_*()
    functions, as such casts prevent the compiler from flagging bugs.
    
    clk_core.rate and .accuracy are "unsigned long", hence casting
    their addresses to "u32 *" exposed the wrong halves on big-endian
    64-bit systems. Fix this by using debugfs_create_ulong() instead.
    
    Octal permissions are preferred, as they are easier to read than
    symbolic permissions. Hence replace "S_IRUGO" by "0444"
    throughout.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    [sboyd@codeaurora.org: Squash the octal change in too]
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db7a49488068101d0d87ee87adf94ae820f459d2
Author: Joe Moriarty <joe.moriarty@oracle.com>
Date:   Mon Feb 12 14:51:42 2018 -0500

    drm: NULL pointer dereference [null-pointer-deref] (CWE 476) problem
    
    commit 22a07038c0eaf4d1315a493ce66dcd255accba19 upstream.
    
    The Parfait (version 2.1.0) static code analysis tool found the
    following NULL pointer derefernce problem.
    
    - drivers/gpu/drm/drm_dp_mst_topology.c
    The call to drm_dp_calculate_rad() in function drm_dp_port_setup_pdt()
    could result in a NULL pointer being returned to port->mstb due to a
    failure to allocate memory for port->mstb.
    
    Signed-off-by: Joe Moriarty <joe.moriarty@oracle.com>
    Reviewed-by: Steven Sistare <steven.sistare@oracle.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180212195144.98323-3-joe.moriarty@oracle.com
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24fe595d29bd9d07af75e18cd2f30fdf9f52fb77
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Oct 8 12:57:36 2018 +0200

    video: fbdev: sis: Remove unnecessary parentheses and commented code
    
    commit 864eb1afc60cb43e7df879b97f8ca0d719bbb735 upstream.
    
    Clang warns when multiple pairs of parentheses are used for a single
    conditional statement.
    
    drivers/video/fbdev/sis/init301.c:851:42: warning: equality comparison
    with extraneous parentheses [-Wparentheses-equality]
          } else if((SiS_Pr->SiS_IF_DEF_LVDS == 1) /* ||
                     ~~~~~~~~~~~~~~~~~~~~~~~~^~~~
    drivers/video/fbdev/sis/init301.c:851:42: note: remove extraneous
    parentheses around the comparison to silence this warning
          } else if((SiS_Pr->SiS_IF_DEF_LVDS == 1) /* ||
                    ~                        ^   ~
    drivers/video/fbdev/sis/init301.c:851:42: note: use '=' to turn this
    equality comparison into an assignment
          } else if((SiS_Pr->SiS_IF_DEF_LVDS == 1) /* ||
                                             ^~
                                             =
    1 warning generated.
    
    Remove the parentheses and while we're at it, clean up the commented
    code, which has been here since the beginning of git history.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/118
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Thomas Winischhofer <thomas@winischhofer.net>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5efb8f94df58b51781baf334803249e099662045
Author: ndesaulniers@google.com <ndesaulniers@google.com>
Date:   Mon Feb 25 20:03:42 2019 -0800

    lib/raid6: use vdupq_n_u8 to avoid endianness warnings
    
    commit 1ad3935b39da78a403e7df7a3813f866c731bc64 upstream.
    
    Clang warns: vector initializers are not compatible with NEON intrinsics
    in big endian mode [-Wnonportable-vector-initialization]
    
    While this is usually the case, it's not an issue for this case since
    we're initializing the uint8x16_t (16x uint8_t's) with the same value.
    
    Instead, use vdupq_n_u8 which both compilers lower into a single movi
    instruction: https://godbolt.org/z/vBrgzt
    
    This avoids the static storage for a constant value.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/214
    Suggested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 464e814a8e32a7644ab1b2642865d3189225de62
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 13 10:20:29 2020 +0200

    ALSA: hda: Don't release card at firmware loading error
    
    commit 25faa4bd37c10f19e4b848b9032a17a3d44c6f09 upstream.
    
    At the error path of the firmware loading error, the driver tries to
    release the card object and set NULL to drvdata.  This may be referred
    badly at the possible PM action, as the driver itself is still bound
    and the PM callbacks read the card object.
    
    Instead, we continue the probing as if it were no option set.  This is
    often a better choice than the forced abort, too.
    
    Fixes: 5cb543dba986 ("ALSA: hda - Deferred probing with request_firmware_nowait()")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=207043
    Link: https://lore.kernel.org/r/20200413082034.25166-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c01aac99cab39d52dab725dde3dd8bce60fde5df
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Wed Apr 8 19:43:52 2020 +0800

    irqchip/mbigen: Free msi_desc on device teardown
    
    commit edfc23f6f9fdbd7825d50ac1f380243cde19b679 upstream.
    
    Using irq_domain_free_irqs_common() on the irqdomain free path will
    leave the MSI descriptor unfreed when platform devices get removed.
    Properly free it by MSI domain free function.
    
    Fixes: 9650c60ebfec0 ("irqchip/mbigen: Create irq domain for each mbigen device")
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200408114352.1604-1-yuzenghui@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb4274d043b19e90b7532a84955ad40852205058
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Apr 7 14:10:11 2020 +0200

    netfilter: nf_tables: report EOPNOTSUPP on unsupported flags/object type
    
    commit d9583cdf2f38d0f526d9a8c8564dd2e35e649bc7 upstream.
    
    EINVAL should be used for malformed netlink messages. New userspace
    utility and old kernels might easily result in EINVAL when exercising
    new set features, which is misleading.
    
    Fixes: 8aeff920dcc9 ("netfilter: nf_tables: add stateful object reference to set elements")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d05ff93d3e164239f6e981694bf590a1fc0d6d6
Author: Luke Nelson <lukenels@cs.washington.edu>
Date:   Wed Apr 8 18:12:29 2020 +0000

    arm, bpf: Fix bugs with ALU64 {RSH, ARSH} BPF_K shift by 0
    
    commit bb9562cf5c67813034c96afb50bd21130a504441 upstream.
    
    The current arm BPF JIT does not correctly compile RSH or ARSH when the
    immediate shift amount is 0. This causes the "rsh64 by 0 imm" and "arsh64
    by 0 imm" BPF selftests to hang the kernel by reaching an instruction
    the verifier determines to be unreachable.
    
    The root cause is in how immediate right shifts are encoded on arm.
    For LSR and ASR (logical and arithmetic right shift), a bit-pattern
    of 00000 in the immediate encodes a shift amount of 32. When the BPF
    immediate is 0, the generated code shifts by 32 instead of the expected
    behavior (a no-op).
    
    This patch fixes the bugs by adding an additional check if the BPF
    immediate is 0. After the change, the above mentioned BPF selftests pass.
    
    Fixes: 39c13c204bb11 ("arm: eBPF JIT compiler")
    Co-developed-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Luke Nelson <luke.r.nels@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20200408181229.10909-1-luke.r.nels@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73a55c0a66a5bb60297c1c98fcbc62b0507878dd
Author: Roman Gushchin <guro@fb.com>
Date:   Fri Feb 28 16:14:11 2020 -0800

    ext4: use non-movable memory for superblock readahead
    
    commit d87f639258a6a5980183f11876c884931ad93da2 upstream.
    
    Since commit a8ac900b8163 ("ext4: use non-movable memory for the
    superblock") buffers for ext4 superblock were allocated using
    the sb_bread_unmovable() helper which allocated buffer heads
    out of non-movable memory blocks. It was necessarily to not block
    page migrations and do not cause cma allocation failures.
    
    However commit 85c8f176a611 ("ext4: preload block group descriptors")
    broke this by introducing pre-reading of the ext4 superblock.
    The problem is that __breadahead() is using __getblk() underneath,
    which allocates buffer heads out of movable memory.
    
    It resulted in page migration failures I've seen on a machine
    with an ext4 partition and a preallocated cma area.
    
    Fix this by introducing sb_breadahead_unmovable() and
    __breadahead_gfp() helpers which use non-movable memory for buffer
    head allocations and use them for the ext4 superblock readahead.
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Fixes: 85c8f176a611 ("ext4: preload block group descriptors")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Link: https://lore.kernel.org/r/20200229001411.128010-1-guro@fb.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1ac17ab54ee38924670911d800ddfc8b1d610a1
Author: Li Bin <huawei.libin@huawei.com>
Date:   Mon Apr 13 19:29:21 2020 +0800

    scsi: sg: add sg_remove_request in sg_common_write
    
    commit 849f8583e955dbe3a1806e03ecacd5e71cce0a08 upstream.
    
    If the dxfer_len is greater than 256M then the request is invalid and we
    need to call sg_remove_request in sg_common_write.
    
    Link: https://lore.kernel.org/r/1586777361-17339-1-git-send-email-huawei.libin@huawei.com
    Fixes: f930c7043663 ("scsi: sg: only check for dxfer_len greater than 256M")
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Li Bin <huawei.libin@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3365079c22ef4305044bd6d9d35808e6a8d8ba3f
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Apr 1 13:23:28 2020 -0500

    objtool: Fix switch table detection in .text.unlikely
    
    commit b401efc120a399dfda1f4d2858a4de365c9b08ef upstream.
    
    If a switch jump table's indirect branch is in a ".cold" subfunction in
    .text.unlikely, objtool doesn't detect it, and instead prints a false
    warning:
    
      drivers/media/v4l2-core/v4l2-ioctl.o: warning: objtool: v4l_print_format.cold()+0xd6: sibling call from callable instruction with modified stack frame
      drivers/hwmon/max6650.o: warning: objtool: max6650_probe.cold()+0xa5: sibling call from callable instruction with modified stack frame
      drivers/media/dvb-frontends/drxk_hard.o: warning: objtool: init_drxk.cold()+0x16f: sibling call from callable instruction with modified stack frame
    
    Fix it by comparing the function, instead of the section and offset.
    
    Fixes: 13810435b9a7 ("objtool: Support GCC 8's cold subfunctions")
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/157c35d42ca9b6354bbb1604fe9ad7d1153ccb21.1585761021.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9ef63657e45a2a243ac1cc788e5710adb39c798
Author: Austin Kim <austindh.kim@gmail.com>
Date:   Mon Sep 23 15:36:42 2019 -0700

    mm/vmalloc.c: move 'area->pages' after if statement
    
    commit 7ea362427c170061b8822dd41bafaa72b3bcb9ad upstream.
    
    If !area->pages statement is true where memory allocation fails, area is
    freed.
    
    In this case 'area->pages = pages' should not executed.  So move
    'area->pages = pages' after if statement.
    
    [akpm@linux-foundation.org: give area->pages the same treatment]
    Link: http://lkml.kernel.org/r/20190830035716.GA190684@LGEARND20B15
    Signed-off-by: Austin Kim <austindh.kim@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Roman Penyaev <rpenyaev@suse.de>
    Cc: Rick Edgecombe <rick.p.edgecombe@intel.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4de034e30d1e14ede9a3fb3737d756c0a8a0697b
Author: Reinette Chatre <reinette.chatre@intel.com>
Date:   Tue Mar 17 09:26:45 2020 -0700

    x86/resctrl: Fix invalid attempt at removing the default resource group
    
    commit b0151da52a6d4f3951ea24c083e7a95977621436 upstream.
    
    The default resource group ("rdtgroup_default") is associated with the
    root of the resctrl filesystem and should never be removed. New resource
    groups can be created as subdirectories of the resctrl filesystem and
    they can be removed from user space.
    
    There exists a safeguard in the directory removal code
    (rdtgroup_rmdir()) that ensures that only subdirectories can be removed
    by testing that the directory to be removed has to be a child of the
    root directory.
    
    A possible deadlock was recently fixed with
    
      334b0f4e9b1b ("x86/resctrl: Fix a deadlock due to inaccurate reference").
    
    This fix involved associating the private data of the "mon_groups"
    and "mon_data" directories to the resource group to which they belong
    instead of NULL as before. A consequence of this change was that
    the original safeguard code preventing removal of "mon_groups" and
    "mon_data" found in the root directory failed resulting in attempts to
    remove the default resource group that ends in a BUG:
    
      kernel BUG at mm/slub.c:3969!
      invalid opcode: 0000 [#1] SMP PTI
    
      Call Trace:
      rdtgroup_rmdir+0x16b/0x2c0
      kernfs_iop_rmdir+0x5c/0x90
      vfs_rmdir+0x7a/0x160
      do_rmdir+0x17d/0x1e0
      do_syscall_64+0x55/0x1d0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fix this by improving the directory removal safeguard to ensure that
    subdirectories of the resctrl root directory can only be removed if they
    are a child of the resctrl filesystem's root _and_ not associated with
    the default resource group.
    
    Fixes: 334b0f4e9b1b ("x86/resctrl: Fix a deadlock due to inaccurate reference")
    Reported-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/884cbe1773496b5dbec1b6bd11bb50cffa83603d.1584461853.git.reinette.chatre@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5246c08f70b4d721a48b9a98417cb178fa0531cf
Author: James Morse <james.morse@arm.com>
Date:   Fri Feb 21 16:21:05 2020 +0000

    x86/resctrl: Preserve CDP enable over CPU hotplug
    
    commit 9fe0450785abbc04b0ed5d3cf61fcdb8ab656b4b upstream.
    
    Resctrl assumes that all CPUs are online when the filesystem is mounted,
    and that CPUs remember their CDP-enabled state over CPU hotplug.
    
    This goes wrong when resctrl's CDP-enabled state changes while all the
    CPUs in a domain are offline.
    
    When a domain comes online, enable (or disable!) CDP to match resctrl's
    current setting.
    
    Fixes: 5ff193fbde20 ("x86/intel_rdt: Add basic resctrl filesystem support")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200221162105.154163-1-james.morse@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d03e74f0c68d89731daba72124d0201848a2e6f8
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Wed Dec 20 14:57:23 2017 -0800

    x86/intel_rdt: Enable L2 CDP in MSR IA32_L2_QOS_CFG
    
    commit 99adde9b370de8e07ef76630c6f60dbf586cdf0e upstream.
    
    Bit 0 in MSR IA32_L2_QOS_CFG (0xc82) is L2 CDP enable bit. By default,
    the bit is zero, i.e. L2 CAT is enabled, and L2 CDP is disabled. When
    the resctrl mount parameter "cdpl2" is given, the bit is set to 1 and L2
    CDP is enabled.
    
    In L2 CDP mode, the L2 CAT mask MSRs are re-mapped into interleaved pairs
    of mask MSRs for code (referenced by an odd CLOSID) and data (referenced by
    an even CLOSID).
    
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Ravi V Shankar" <ravi.v.shankar@intel.com>
    Cc: "Tony Luck" <tony.luck@intel.com>
    Cc: Vikas" <vikas.shivappa@intel.com>
    Cc: Sai Praneeth" <sai.praneeth.prakhya@intel.com>
    Cc: Reinette" <reinette.chatre@intel.com>
    Link: https://lkml.kernel.org/r/1513810644-78015-6-git-send-email-fenghua.yu@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73e3d7823560741d3473a62c7b1c150c4641f8a4
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Wed Dec 20 14:57:22 2017 -0800

    x86/intel_rdt: Add two new resources for L2 Code and Data Prioritization (CDP)
    
    commit def10853930a82456ab862a3a8292a3a16c386e7 upstream.
    
    L2 data and L2 code are added as new resources in rdt_resources_all[]
    and data in the resources are configured.
    
    When L2 CDP is enabled, the schemata will have the two resources in
    this format:
    L2DATA:l2id0=xxxx;l2id1=xxxx;....
    L2CODE:l2id0=xxxx;l2id1=xxxx;....
    
    xxxx represent CBM (Cache Bit Mask) values in the schemata, similar to all
    others (L2 CAT/L3 CAT/L3 CDP).
    
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Ravi V Shankar" <ravi.v.shankar@intel.com>
    Cc: "Tony Luck" <tony.luck@intel.com>
    Cc: Vikas" <vikas.shivappa@intel.com>
    Cc: Sai Praneeth" <sai.praneeth.prakhya@intel.com>
    Cc: Reinette" <reinette.chatre@intel.com>
    Link: https://lkml.kernel.org/r/1513810644-78015-5-git-send-email-fenghua.yu@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3756b8b746c5d63c6fec0bb2349508d0fa0f3707
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Wed Dec 20 14:57:21 2017 -0800

    x86/intel_rdt: Enumerate L2 Code and Data Prioritization (CDP) feature
    
    commit a511e7935378ef1f321456a90beae2a2632d3d83 upstream.
    
    L2 Code and Data Prioritization (CDP) is enumerated in
    CPUID(EAX=0x10, ECX=0x2):ECX.bit2
    
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Ravi V Shankar" <ravi.v.shankar@intel.com>
    Cc: "Tony Luck" <tony.luck@intel.com>
    Cc: Vikas" <vikas.shivappa@intel.com>
    Cc: Sai Praneeth" <sai.praneeth.prakhya@intel.com>
    Cc: Reinette" <reinette.chatre@intel.com>
    Link: https://lkml.kernel.org/r/1513810644-78015-4-git-send-email-fenghua.yu@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdb1ccf027ecf6a10b8704ec1e546cff0b10a57d
Author: John Allen <john.allen@amd.com>
Date:   Thu Apr 9 10:34:29 2020 -0500

    x86/microcode/AMD: Increase microcode PATCH_MAX_SIZE
    
    commit bdf89df3c54518eed879d8fac7577fcfb220c67e upstream.
    
    Future AMD CPUs will have microcode patches that exceed the default 4K
    patch size. Raise our limit.
    
    Signed-off-by: John Allen <john.allen@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org # v4.14..
    Link: https://lkml.kernel.org/r/20200409152931.GA685273@mojo.amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d7e37a4040e1189e721e805180e093848510b09
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Fri Mar 13 18:06:55 2020 +0100

    scsi: target: fix hang when multiple threads try to destroy the same iscsi session
    
    [ Upstream commit 57c46e9f33da530a2485fa01aa27b6d18c28c796 ]
    
    A number of hangs have been reported against the target driver; they are
    due to the fact that multiple threads may try to destroy the iscsi session
    at the same time. This may be reproduced for example when a "targetcli
    iscsi/iqn.../tpg1 disable" command is executed while a logout operation is
    underway.
    
    When this happens, two or more threads may end up sleeping and waiting for
    iscsit_close_connection() to execute "complete(session_wait_comp)".  Only
    one of the threads will wake up and proceed to destroy the session
    structure, the remaining threads will hang forever.
    
    Note that if the blocked threads are somehow forced to wake up with
    complete_all(), they will try to free the same iscsi session structure
    destroyed by the first thread, causing double frees, memory corruptions
    etc...
    
    With this patch, the threads that want to destroy the iscsi session will
    increase the session refcount and will set the "session_close" flag to 1;
    then they wait for the driver to close the remaining active connections.
    When the last connection is closed, iscsit_close_connection() will wake up
    all the threads and will wait for the session's refcount to reach zero;
    when this happens, iscsit_close_connection() will destroy the session
    structure because no one is referencing it anymore.
    
     INFO: task targetcli:5971 blocked for more than 120 seconds.
           Tainted: P           OE    4.15.0-72-generic #81~16.04.1
     "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
     targetcli       D    0  5971      1 0x00000080
     Call Trace:
      __schedule+0x3d6/0x8b0
      ? vprintk_func+0x44/0xe0
      schedule+0x36/0x80
      schedule_timeout+0x1db/0x370
      ? __dynamic_pr_debug+0x8a/0xb0
      wait_for_completion+0xb4/0x140
      ? wake_up_q+0x70/0x70
      iscsit_free_session+0x13d/0x1a0 [iscsi_target_mod]
      iscsit_release_sessions_for_tpg+0x16b/0x1e0 [iscsi_target_mod]
      iscsit_tpg_disable_portal_group+0xca/0x1c0 [iscsi_target_mod]
      lio_target_tpg_enable_store+0x66/0xe0 [iscsi_target_mod]
      configfs_write_file+0xb9/0x120
      __vfs_write+0x1b/0x40
      vfs_write+0xb8/0x1b0
      SyS_write+0x5c/0xe0
      do_syscall_64+0x73/0x130
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Link: https://lore.kernel.org/r/20200313170656.9716-3-mlombard@redhat.com
    Reported-by: Matt Coleman <mcoleman@datto.com>
    Tested-by: Matt Coleman <mcoleman@datto.com>
    Tested-by: Rahul Kundu <rahul.kundu@chelsio.com>
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1140ef72c9fdd08715cba3119e380c55cc6c1b86
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Fri Mar 13 18:06:54 2020 +0100

    scsi: target: remove boilerplate code
    
    [ Upstream commit e49a7d994379278d3353d7ffc7994672752fb0ad ]
    
    iscsit_free_session() is equivalent to iscsit_stop_session() followed by a
    call to iscsit_close_session().
    
    Link: https://lore.kernel.org/r/20200313170656.9716-2-mlombard@redhat.com
    Tested-by: Rahul Kundu <rahul.kundu@chelsio.com>
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9e0151c008a6970f3302571debe5b86043c8630
Author: Jim Mattson <jmattson@google.com>
Date:   Fri Dec 13 16:15:15 2019 -0800

    kvm: x86: Host feature SSBD doesn't imply guest feature SPEC_CTRL_SSBD
    
    commit 396d2e878f92ec108e4293f1c77ea3bc90b414ff upstream.
    
    The host reports support for the synthetic feature X86_FEATURE_SSBD
    when any of the three following hardware features are set:
      CPUID.(EAX=7,ECX=0):EDX.SSBD[bit 31]
      CPUID.80000008H:EBX.AMD_SSBD[bit 24]
      CPUID.80000008H:EBX.VIRT_SSBD[bit 25]
    
    Either of the first two hardware features implies the existence of the
    IA32_SPEC_CTRL MSR, but CPUID.80000008H:EBX.VIRT_SSBD[bit 25] does
    not. Therefore, CPUID.(EAX=7,ECX=0):EDX.SSBD[bit 31] should only be
    set in the guest if CPUID.(EAX=7,ECX=0):EDX.SSBD[bit 31] or
    CPUID.80000008H:EBX.AMD_SSBD[bit 24] is set on the host.
    
    Fixes: 0c54914d0c52a ("KVM: x86: use Intel speculation bugs and features as derived in generic x86 code")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Jacob Xu <jacobhxu@google.com>
    Reviewed-by: Peter Shier <pshier@google.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [bwh: Backported to 4.x: adjust indentation]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02677f42036a8728d8e6dcaf633e04976c7ce51f
Author: Goldwyn Rodrigues <rgoldwyn@suse.com>
Date:   Sun Dec 3 21:14:12 2017 -0600

    dm flakey: check for null arg_name in parse_features()
    
    [ Upstream commit 7690e25302dc7d0cd42b349e746fe44b44a94f2b ]
    
    One can crash dm-flakey by specifying more feature arguments than the
    number of features supplied.  Checking for null in arg_name avoids
    this.
    
    dmsetup create flakey-test --table "0 66076080 flakey /dev/sdb9 0 0 180 2 drop_writes"
    
    Signed-off-by: Goldwyn Rodrigues <rgoldwyn@suse.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4598037e0d31676c98a9d91062c2e37fc2905e0
Author: Jan Kara <jack@suse.cz>
Date:   Tue Mar 31 12:50:16 2020 +0200

    ext4: do not zeroout extents beyond i_disksize
    
    commit 801674f34ecfed033b062a0f217506b93c8d5e8a upstream.
    
    We do not want to create initialized extents beyond end of file because
    for e2fsck it is impossible to distinguish them from a case of corrupted
    file size / extent tree and so it complains like:
    
    Inode 12, i_size is 147456, should be 163840.  Fix? no
    
    Code in ext4_ext_convert_to_initialized() and
    ext4_split_convert_extents() try to make sure it does not create
    initialized extents beyond inode size however they check against
    inode->i_size which is wrong. They should instead check against
    EXT4_I(inode)->i_disksize which is the current inode size on disk.
    That's what e2fsck is going to see in case of crash before all dirty
    data is written. This bug manifests as generic/456 test failure (with
    recent enough fstests where fsx got fixed to properly pass
    FALLOC_KEEP_SIZE_FL flags to the kernel) when run with dioread_lock
    mount option.
    
    CC: stable@vger.kernel.org
    Fixes: 21ca087a3891 ("ext4: Do not zero out uninitialized extents beyond i_size")
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Link: https://lore.kernel.org/r/20200331105016.8674-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33e7e10efecd53361df55f7a56b07c79a3e933f5
Author: Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>
Date:   Fri Apr 10 15:32:57 2020 +0300

    mac80211_hwsim: Use kstrndup() in place of kasprintf()
    
    commit 7ea862048317aa76d0f22334202779a25530980c upstream.
    
    syzbot reports a warning:
    
    precision 33020 too large
    WARNING: CPU: 0 PID: 9618 at lib/vsprintf.c:2471 set_precision+0x150/0x180 lib/vsprintf.c:2471
     vsnprintf+0xa7b/0x19a0 lib/vsprintf.c:2547
     kvasprintf+0xb2/0x170 lib/kasprintf.c:22
     kasprintf+0xbb/0xf0 lib/kasprintf.c:59
     hwsim_del_radio_nl+0x63a/0x7e0 drivers/net/wireless/mac80211_hwsim.c:3625
     genl_family_rcv_msg_doit net/netlink/genetlink.c:672 [inline]
     ...
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Thus it seems that kasprintf() with "%.*s" format can not be used for
    duplicating a string with arbitrary length. Replace it with kstrndup().
    
    Note that later this string is limited to NL80211_WIPHY_NAME_MAXLEN == 64,
    but the code is simpler this way.
    
    Reported-by: syzbot+6693adf1698864d21734@syzkaller.appspotmail.com
    Reported-by: syzbot+a4aee3f42d7584d76761@syzkaller.appspotmail.com
    Cc: stable@kernel.org
    Signed-off-by: Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>
    Link: https://lore.kernel.org/r/20200410123257.14559-1-tuomas.tynkkynen@iki.fi
    [johannes: add note about length limit]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d518b486efe67998bfc1764a1840aa2728e2d7c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Apr 2 15:51:18 2020 -0400

    btrfs: check commit root generation in should_ignore_root
    
    commit 4d4225fc228e46948486d8b8207955f0c031b92e upstream.
    
    Previously we would set the reloc root's last snapshot to transid - 1.
    However there was a problem with doing this, and we changed it to
    setting the last snapshot to the generation of the commit node of the fs
    root.
    
    This however broke should_ignore_root().  The assumption is that if we
    are in a generation newer than when the reloc root was created, then we
    would find the reloc root through normal backref lookups, and thus can
    ignore any fs roots we find with an old enough reloc root.
    
    Now that the last snapshot could be considerably further in the past
    than before, we'd end up incorrectly ignoring an fs root.  Thus we'd
    find no nodes for the bytenr we were searching for, and we'd fail to
    relocate anything.  We'd loop through the relocate code again and see
    that there were still used space in that block group, attempt to
    relocate those bytenr's again, fail in the same way, and just loop like
    this forever.  This is tricky in that we have to not modify the fs root
    at all during this time, so we need to have a block group that has data
    in this fs root that is not shared by any other root, which is why this
    has been difficult to reproduce.
    
    Fixes: 054570a1dc94 ("Btrfs: fix relocation incorrectly dropping data references")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7054f86f268c0d9d62b52a4497dd0e8c10a7e5c7
Author: Xiao Yang <yangx.jy@cn.fujitsu.com>
Date:   Tue Apr 14 09:51:45 2020 +0800

    tracing: Fix the race between registering 'snapshot' event trigger and triggering 'snapshot' operation
    
    commit 0bbe7f719985efd9adb3454679ecef0984cb6800 upstream.
    
    Traced event can trigger 'snapshot' operation(i.e. calls snapshot_trigger()
    or snapshot_count_trigger()) when register_snapshot_trigger() has completed
    registration but doesn't allocate buffer for 'snapshot' event trigger.  In
    the rare case, 'snapshot' operation always detects the lack of allocated
    buffer so make register_snapshot_trigger() allocate buffer first.
    
    trigger-snapshot.tc in kselftest reproduces the issue on slow vm:
    -----------------------------------------------------------
    cat trace
    ...
    ftracetest-3028  [002] ....   236.784290: sched_process_fork: comm=ftracetest pid=3028 child_comm=ftracetest child_pid=3036
         <...>-2875  [003] ....   240.460335: tracing_snapshot_instance_cond: *** SNAPSHOT NOT ALLOCATED ***
         <...>-2875  [003] ....   240.460338: tracing_snapshot_instance_cond: *** stopping trace here!   ***
    -----------------------------------------------------------
    
    Link: http://lkml.kernel.org/r/20200414015145.66236-1-yangx.jy@cn.fujitsu.com
    
    Cc: stable@vger.kernel.org
    Fixes: 93e31ffbf417a ("tracing: Add 'snapshot' event trigger command")
    Signed-off-by: Xiao Yang <yangx.jy@cn.fujitsu.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47019436aecd6641cf6bc47277e11234180217f0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Apr 12 10:13:29 2020 +0200

    ALSA: usb-audio: Don't override ignore_ctl_error value from the map
    
    commit 3507245b82b4362dc9721cbc328644905a3efa22 upstream.
    
    The mapping table may contain also ignore_ctl_error flag for devices
    that are known to behave wild.  Since this flag always writes the
    card's own ignore_ctl_error flag, it overrides the value already set
    by the module option, so it doesn't follow user's expectation.
    Let's fix the code not to clear the flag that has been set by user.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=206873
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200412081331.4742-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5c53e095318810e5c58b3f7dfb8f39a862e34c5
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sat Feb 8 22:07:20 2020 +0000

    ASoC: Intel: mrfld: return error codes when an error occurs
    
    commit 3025571edd9df653e1ad649f0638368a39d1bbb5 upstream.
    
    Currently function sst_platform_get_resources always returns zero and
    error return codes set by the function are never returned. Fix this
    by returning the error return code in variable ret rather than the
    hard coded zero.
    
    Addresses-Coverity: ("Unused value")
    Fixes: f533a035e4da ("ASoC: Intel: mrfld - create separate module for pci part")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200208220720.36657-1-colin.king@canonical.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc578c68afa0a98a4a4664a8a3fa18b6c92ed4ff
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Nov 19 11:36:40 2019 +0000

    ASoC: Intel: mrfld: fix incorrect check on p->sink
    
    commit f5e056e1e46fcbb5f74ce560792aeb7d57ce79e6 upstream.
    
    The check on p->sink looks bogus, I believe it should be p->source
    since the following code blocks are related to p->source. Fix
    this by replacing p->sink with p->source.
    
    Fixes: 24c8d14192cc ("ASoC: Intel: mrfld: add DSP core controls")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Addresses-Coverity: ("Copy-paste error")
    Link: https://lore.kernel.org/r/20191119113640.166940-1-colin.king@canonical.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eaf44acf197051e20edeb9c7673c626e732c618
Author: Josh Triplett <josh@joshtriplett.org>
Date:   Sat Mar 28 15:34:15 2020 -0700

    ext4: fix incorrect inodes per group in error message
    
    commit b9c538da4e52a7b79dfcf4cfa487c46125066dfb upstream.
    
    If ext4_fill_super detects an invalid number of inodes per group, the
    resulting error message printed the number of blocks per group, rather
    than the number of inodes per group. Fix it to print the correct value.
    
    Fixes: cd6bb35bf7f6d ("ext4: use more strict checks for inodes_per_block on mount")
    Link: https://lore.kernel.org/r/8be03355983a08e5d4eed480944613454d7e2550.1585434649.git.josh@joshtriplett.org
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Josh Triplett <josh@joshtriplett.org>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abe9688ab02de8b26fbacd95bbcc9477ba754ab2
Author: Josh Triplett <josh@joshtriplett.org>
Date:   Sat Mar 28 14:54:01 2020 -0700

    ext4: fix incorrect group count in ext4_fill_super error message
    
    commit df41460a21b06a76437af040d90ccee03888e8e5 upstream.
    
    ext4_fill_super doublechecks the number of groups before mounting; if
    that check fails, the resulting error message prints the group count
    from the ext4_sb_info sbi, which hasn't been set yet. Print the freshly
    computed group count instead (which at that point has just been computed
    in "blocks_count").
    
    Signed-off-by: Josh Triplett <josh@joshtriplett.org>
    Fixes: 4ec1102813798 ("ext4: Add sanity checks for the superblock before mounting the filesystem")
    Link: https://lore.kernel.org/r/8b957cd1513fcc4550fe675c10bcce2175c33a49.1585431964.git.josh@joshtriplett.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 642e97e586f9803c339527fd569fae74d4c5b00f
Author: Sven Van Asbroeck <TheSven73@gmail.com>
Date:   Wed Apr 1 19:01:06 2020 +0200

    pwm: pca9685: Fix PWM/GPIO inter-operation
    
    commit 9cc5f232a4b6a0ef6e9b57876d61b88f61bdd7c2 upstream.
    
    This driver allows pwms to be requested as gpios via gpiolib. Obviously,
    it should not be allowed to request a GPIO when its corresponding PWM is
    already requested (and vice versa). So it requires some exclusion code.
    
    Given that the PWMm and GPIO cores are not synchronized with respect to
    each other, this exclusion code will also require proper
    synchronization.
    
    Such a mechanism was in place, but was inadvertently removed by Uwe's
    clean-up in commit e926b12c611c ("pwm: Clear chip_data in pwm_put()").
    
    Upon revisiting the synchronization mechanism, we found that
    theoretically, it could allow two threads to successfully request
    conflicting PWMs/GPIOs.
    
    Replace with a bitmap which tracks PWMs in-use, plus a mutex. As long as
    PWM and GPIO's respective request/free functions modify the in-use
    bitmap while holding the mutex, proper synchronization will be
    guaranteed.
    
    Reported-by: YueHaibing <yuehaibing@huawei.com>
    Fixes: e926b12c611c ("pwm: Clear chip_data in pwm_put()")
    Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Link: https://lkml.org/lkml/2019/5/31/963
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    [cg: Tested on an i.MX6Q board with two NXP PCA9685 chips]
    Tested-by: Clemens Gruber <clemens.gruber@pqgruber.com>
    Reviewed-by: Sven Van Asbroeck <TheSven73@gmail.com> # cg's rebase
    Link: https://lore.kernel.org/lkml/20200330160238.GD2817345@ulmo/
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07fcda0a2a10b0a956f0b54f5ff809c345b2c512
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Mon Feb 17 19:27:06 2020 +0800

    jbd2: improve comments about freeing data buffers whose page mapping is NULL
    
    commit 780f66e59231fcf882f36c63f287252ee47cc75a upstream.
    
    Improve comments in jbd2_journal_commit_transaction() to describe why
    we don't need to clear the buffer_mapped bit for freeing file mapping
    buffers whose page mapping is NULL.
    
    Link: https://lore.kernel.org/r/20200217112706.20085-1-yi.zhang@huawei.com
    Fixes: c96dceeabf76 ("jbd2: do not clear the BH_Mapped flag when forgetting a metadata buffer")
    Suggested-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78ef0452f798f0c798e2db80da9adaa6d9f24edb
Author: Can Guo <cang@codeaurora.org>
Date:   Mon Feb 10 19:40:48 2020 -0800

    scsi: ufs: Fix ufshcd_hold() caused scheduling while atomic
    
    commit c63d6099a7959ecc919b2549dc6b71f53521f819 upstream.
    
    The async version of ufshcd_hold(async == true), which is only called in
    queuecommand path as for now, is expected to work in atomic context, thus
    it should not sleep or schedule out. When it runs into the condition that
    clocks are ON but link is still in hibern8 state, it should bail out
    without flushing the clock ungate work.
    
    Fixes: f2a785ac2312 ("scsi: ufshcd: Fix race between clk scaling and ungate work")
    Link: https://lore.kernel.org/r/1581392451-28743-6-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7358097b643b97651c98ff8d75366710aabcf19
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Apr 14 15:39:52 2020 -0700

    net: stmmac: dwmac-sunxi: Provide TX and RX fifo sizes
    
    [ Upstream commit 806fd188ce2a4f8b587e83e73c478e6484fbfa55 ]
    
    After commit bfcb813203e619a8960a819bf533ad2a108d8105 ("net: dsa:
    configure the MTU for switch ports") my Lamobo R1 platform which uses
    an allwinner,sun7i-a20-gmac compatible Ethernet MAC started to fail
    by rejecting a MTU of 1536. The reason for that is that the DMA
    capabilities are not readable on this version of the IP, and there
    is also no 'tx-fifo-depth' property being provided in Device Tree. The
    property is documented as optional, and is not provided.
    
    Chen-Yu indicated that the FIFO sizes are 4KB for TX and 16KB for RX, so
    provide these values through platform data as an immediate fix until
    various Device Tree sources get updated accordingly.
    
    Fixes: eaf4fac47807 ("net: stmmac: Do not accept invalid MTU values")
    Suggested-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d1c665386c7bfb74ba409487d6e48f4d7db71fe
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Mon Apr 6 14:39:32 2020 +0300

    net: revert default NAPI poll timeout to 2 jiffies
    
    [ Upstream commit a4837980fd9fa4c70a821d11831698901baef56b ]
    
    For HZ < 1000 timeout 2000us rounds up to 1 jiffy but expires randomly
    because next timer interrupt could come shortly after starting softirq.
    
    For commonly used CONFIG_HZ=1000 nothing changes.
    
    Fixes: 7acf8a1e8a28 ("Replace 2 jiffies with sysctl netdev_budget_usecs to enable softirq tuning")
    Reported-by: Dmitry Yakunin <zeil@yandex-team.ru>
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33fe397c18f4788232793f3fbf5d3156f3100b6f
Author: Wang Wenhu <wenhu.wang@vivo.com>
Date:   Wed Apr 8 19:53:53 2020 -0700

    net: qrtr: send msgs from local of same id as broadcast
    
    [ Upstream commit 6dbf02acef69b0742c238574583b3068afbd227c ]
    
    If the local node id(qrtr_local_nid) is not modified after its
    initialization, it equals to the broadcast node id(QRTR_NODE_BCAST).
    So the messages from local node should not be taken as broadcast
    and keep the process going to send them out anyway.
    
    The definitions are as follow:
    static unsigned int qrtr_local_nid = NUMA_NO_NODE;
    
    Fixes: fdf5fd397566 ("net: qrtr: Broadcast messages only from control port")
    Signed-off-by: Wang Wenhu <wenhu.wang@vivo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41b8beae660f6635782d8052f4fcb65dd4bb0f47
Author: Tim Stallard <code@timstallard.me.uk>
Date:   Fri Apr 3 21:26:21 2020 +0100

    net: ipv6: do not consider routes via gateways for anycast address check
    
    [ Upstream commit 03e2a984b6165621f287fadf5f4b5cd8b58dcaba ]
    
    The behaviour for what is considered an anycast address changed in
    commit 45e4fd26683c ("ipv6: Only create RTF_CACHE routes after
    encountering pmtu exception"). This now considers the first
    address in a subnet where there is a route via a gateway
    to be an anycast address.
    
    This breaks path MTU discovery and traceroutes when a host in a
    remote network uses the address at the start of a prefix
    (eg 2600:: advertised as 2600::/48 in the DFZ) as ICMP errors
    will not be sent to anycast addresses.
    
    This patch excludes any routes with a gateway, or via point to
    point links, like the behaviour previously from
    rt6_is_gw_or_nonexthop in net/ipv6/route.c.
    
    This can be tested with:
    ip link add v1 type veth peer name v2
    ip netns add test
    ip netns exec test ip link set lo up
    ip link set v2 netns test
    ip link set v1 up
    ip netns exec test ip link set v2 up
    ip addr add 2001:db8::1/64 dev v1 nodad
    ip addr add 2001:db8:100:: dev lo nodad
    ip netns exec test ip addr add 2001:db8::2/64 dev v2 nodad
    ip netns exec test ip route add unreachable 2001:db8:1::1
    ip netns exec test ip route add 2001:db8:100::/64 via 2001:db8::1
    ip netns exec test sysctl net.ipv6.conf.all.forwarding=1
    ip route add 2001:db8:1::1 via 2001:db8::2
    ping -I 2001:db8::1 2001:db8:1::1 -c1
    ping -I 2001:db8:100:: 2001:db8:1::1 -c1
    ip addr delete 2001:db8:100:: dev lo
    ip netns delete test
    
    Currently the first ping will get back a destination unreachable ICMP
    error, but the second will never get a response, with "icmp6_send:
    acast source" logged. After this patch, both get destination
    unreachable ICMP replies.
    
    Fixes: 45e4fd26683c ("ipv6: Only create RTF_CACHE routes after encountering pmtu exception")
    Signed-off-by: Tim Stallard <code@timstallard.me.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cce0d1bd3fbae5595b16a7b9e4b07b6e7c525e50
Author: Taras Chornyi <taras.chornyi@plvision.eu>
Date:   Thu Apr 9 20:25:24 2020 +0300

    net: ipv4: devinet: Fix crash when add/del multicast IP with autojoin
    
    [ Upstream commit 690cc86321eb9bcee371710252742fb16fe96824 ]
    
    When CONFIG_IP_MULTICAST is not set and multicast ip is added to the device
    with autojoin flag or when multicast ip is deleted kernel will crash.
    
    steps to reproduce:
    
    ip addr add 224.0.0.0/32 dev eth0
    ip addr del 224.0.0.0/32 dev eth0
    
    or
    
    ip addr add 224.0.0.0/32 dev eth0 autojoin
    
    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000088
     pc : _raw_write_lock_irqsave+0x1e0/0x2ac
     lr : lock_sock_nested+0x1c/0x60
     Call trace:
      _raw_write_lock_irqsave+0x1e0/0x2ac
      lock_sock_nested+0x1c/0x60
      ip_mc_config.isra.28+0x50/0xe0
      inet_rtm_deladdr+0x1a8/0x1f0
      rtnetlink_rcv_msg+0x120/0x350
      netlink_rcv_skb+0x58/0x120
      rtnetlink_rcv+0x14/0x20
      netlink_unicast+0x1b8/0x270
      netlink_sendmsg+0x1a0/0x3b0
      ____sys_sendmsg+0x248/0x290
      ___sys_sendmsg+0x80/0xc0
      __sys_sendmsg+0x68/0xc0
      __arm64_sys_sendmsg+0x20/0x30
      el0_svc_common.constprop.2+0x88/0x150
      do_el0_svc+0x20/0x80
     el0_sync_handler+0x118/0x190
      el0_sync+0x140/0x180
    
    Fixes: 93a714d6b53d ("multicast: Extend ip address command to enable multicast group join/leave on")
    Signed-off-by: Taras Chornyi <taras.chornyi@plvision.eu>
    Signed-off-by: Vadym Kochan <vadym.kochan@plvision.eu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e5eab7f08af84834d40082eb644bb9dd1960779
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Apr 7 13:23:21 2020 +0000

    hsr: check protocol version in hsr_newlink()
    
    [ Upstream commit 4faab8c446def7667adf1f722456c2f4c304069c ]
    
    In the current hsr code, only 0 and 1 protocol versions are valid.
    But current hsr code doesn't check the version, which is received by
    userspace.
    
    Test commands:
        ip link add dummy0 type dummy
        ip link add dummy1 type dummy
        ip link add hsr0 type hsr slave1 dummy0 slave2 dummy1 version 4
    
    In the test commands, version 4 is invalid.
    So, the command should be failed.
    
    After this patch, following error will occur.
    "Error: hsr: Only versions 0..1 are supported."
    
    Fixes: ee1c27977284 ("net/hsr: Added support for HSR v1")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 697c8df388e41b3143a8abf159b96acfdc2e9f37
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Thu Apr 16 17:57:40 2020 +0200

    amd-xgbe: Use __napi_schedule() in BH context
    
    [ Upstream commit d518691cbd3be3dae218e05cca3f3fc9b2f1aa77 ]
    
    The driver uses __napi_schedule_irqoff() which is fine as long as it is
    invoked with disabled interrupts by everybody. Since the commit
    mentioned below the driver may invoke xgbe_isr_task() in tasklet/softirq
    context. This may lead to list corruption if another driver uses
    __napi_schedule_irqoff() in IRQ context.
    
    Use __napi_schedule() which safe to use from IRQ and softirq context.
    
    Fixes: 85b85c853401d ("amd-xgbe: Re-issue interrupt if interrupt status not cleared")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c28ab0252d82190f485435feba008cc83971dc59
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Feb 26 16:51:58 2020 +0200

    mfd: dln2: Fix sanity checking for endpoints
    
    [ Upstream commit fb945c95a482200876993977008b67ea658bd938 ]
    
    While the commit 2b8bd606b1e6 ("mfd: dln2: More sanity checking for endpoints")
    tries to harden the sanity checks it made at the same time a regression,
    i.e.  mixed in and out endpoints. Obviously it should have been not tested on
    real hardware at that time, but unluckily it didn't happen.
    
    So, fix above mentioned typo and make device being enumerated again.
    
    While here, introduce an enumerator for magic values to prevent similar issue
    to happen in the future.
    
    Fixes: 2b8bd606b1e6 ("mfd: dln2: More sanity checking for endpoints")
    Cc: Oliver Neukum <oneukum@suse.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 026c7b1515e430e4bf7e085f6f7dba0018a07c67
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Sep 14 23:43:37 2018 -0700

    misc: echo: Remove unnecessary parentheses and simplify check for zero
    
    [ Upstream commit 85dc2c65e6c975baaf36ea30f2ccc0a36a8c8add ]
    
    Clang warns when multiple pairs of parentheses are used for a single
    conditional statement.
    
    drivers/misc/echo/echo.c:384:27: warning: equality comparison with
    extraneous parentheses [-Wparentheses-equality]
            if ((ec->nonupdate_dwell == 0)) {
                 ~~~~~~~~~~~~~~~~~~~~^~~~
    drivers/misc/echo/echo.c:384:27: note: remove extraneous parentheses
    around the comparison to silence this warning
            if ((ec->nonupdate_dwell == 0)) {
                ~                    ^   ~
    drivers/misc/echo/echo.c:384:27: note: use '=' to turn this equality
    comparison into an assignment
            if ((ec->nonupdate_dwell == 0)) {
                                     ^~
                                     =
    1 warning generated.
    
    Remove them and while we're at it, simplify the zero check as '!var' is
    used more than 'var == 0'.
    
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 995f8a96818a951f84878e4d0f18703ad90486d7
Author: Laurentiu Tudor <laurentiu.tudor@nxp.com>
Date:   Thu Jan 23 11:19:25 2020 +0000

    powerpc/fsl_booke: Avoid creating duplicate tlb1 entry
    
    [ Upstream commit aa4113340ae6c2811e046f08c2bc21011d20a072 ]
    
    In the current implementation, the call to loadcam_multi() is wrapped
    between switch_to_as1() and restore_to_as0() calls so, when it tries
    to create its own temporary AS=1 TLB1 entry, it ends up duplicating
    the existing one created by switch_to_as1(). Add a check to skip
    creating the temporary entry if already running in AS=1.
    
    Fixes: d9e1831a4202 ("powerpc/85xx: Load all early TLB entries at once")
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
    Acked-by: Scott Wood <oss@buserror.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200123111914.2565-1-laurentiu.tudor@nxp.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63e715f351d254a7bb0926bc9738dfb154fe2abf
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Fri Apr 3 17:04:08 2020 +0800

    ipmi: fix hung processes in __get_guid()
    
    [ Upstream commit 32830a0534700f86366f371b150b17f0f0d140d7 ]
    
    The wait_event() function is used to detect command completion.
    When send_guid_cmd() returns an error, smi_send() has not been
    called to send data. Therefore, wait_event() should not be used
    on the error path, otherwise it will cause the following warning:
    
    [ 1361.588808] systemd-udevd   D    0  1501   1436 0x00000004
    [ 1361.588813]  ffff883f4b1298c0 0000000000000000 ffff883f4b188000 ffff887f7e3d9f40
    [ 1361.677952]  ffff887f64bd4280 ffffc90037297a68 ffffffff8173ca3b ffffc90000000010
    [ 1361.767077]  00ffc90037297ad0 ffff887f7e3d9f40 0000000000000286 ffff883f4b188000
    [ 1361.856199] Call Trace:
    [ 1361.885578]  [<ffffffff8173ca3b>] ? __schedule+0x23b/0x780
    [ 1361.951406]  [<ffffffff8173cfb6>] schedule+0x36/0x80
    [ 1362.010979]  [<ffffffffa071f178>] get_guid+0x118/0x150 [ipmi_msghandler]
    [ 1362.091281]  [<ffffffff810d5350>] ? prepare_to_wait_event+0x100/0x100
    [ 1362.168533]  [<ffffffffa071f755>] ipmi_register_smi+0x405/0x940 [ipmi_msghandler]
    [ 1362.258337]  [<ffffffffa0230ae9>] try_smi_init+0x529/0x950 [ipmi_si]
    [ 1362.334521]  [<ffffffffa022f350>] ? std_irq_setup+0xd0/0xd0 [ipmi_si]
    [ 1362.411701]  [<ffffffffa0232bd2>] init_ipmi_si+0x492/0x9e0 [ipmi_si]
    [ 1362.487917]  [<ffffffffa0232740>] ? ipmi_pci_probe+0x280/0x280 [ipmi_si]
    [ 1362.568219]  [<ffffffff810021a0>] do_one_initcall+0x50/0x180
    [ 1362.636109]  [<ffffffff812231b2>] ? kmem_cache_alloc_trace+0x142/0x190
    [ 1362.714330]  [<ffffffff811b2ae1>] do_init_module+0x5f/0x200
    [ 1362.781208]  [<ffffffff81123ca8>] load_module+0x1898/0x1de0
    [ 1362.848069]  [<ffffffff811202e0>] ? __symbol_put+0x60/0x60
    [ 1362.913886]  [<ffffffff8130696b>] ? security_kernel_post_read_file+0x6b/0x80
    [ 1362.998514]  [<ffffffff81124465>] SYSC_finit_module+0xe5/0x120
    [ 1363.068463]  [<ffffffff81124465>] ? SYSC_finit_module+0xe5/0x120
    [ 1363.140513]  [<ffffffff811244be>] SyS_finit_module+0xe/0x10
    [ 1363.207364]  [<ffffffff81003c04>] do_syscall_64+0x74/0x180
    
    Fixes: 50c812b2b951 ("[PATCH] ipmi: add full sysfs support")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: Corey Minyard <minyard@acm.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: openipmi-developer@lists.sourceforge.net
    Cc: linux-kernel@vger.kernel.org
    Cc: stable@vger.kernel.org # 2.6.17-
    Message-Id: <20200403090408.58745-1-wenyang@linux.alibaba.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abd1348c09724ebfec03067b723343dc15157bf4
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Mar 24 16:34:48 2020 +0900

    ftrace/kprobe: Show the maxactive number on kprobe_events
    
    [ Upstream commit 6a13a0d7b4d1171ef9b80ad69abc37e1daa941b3 ]
    
    Show maxactive parameter on kprobe_events.
    This allows user to save the current configuration and
    restore it without losing maxactive parameter.
    
    Link: http://lkml.kernel.org/r/4762764a-6df7-bc93-ed60-e336146dce1f@gmail.com
    Link: http://lkml.kernel.org/r/158503528846.22706.5549974121212526020.stgit@devnote2
    
    Cc: stable@vger.kernel.org
    Fixes: 696ced4fb1d76 ("tracing/kprobes: expose maxactive for kretprobe in kprobe_events")
    Reported-by: Taeung Song <treeze.taeung@gmail.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 099aab3d422839d5ee7b6b376b16a8583d3b050a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sun Feb 2 17:16:31 2020 +0000

    drm: Remove PageReserved manipulation from drm_pci_alloc
    
    [ Upstream commit ea36ec8623f56791c6ff6738d0509b7920f85220 ]
    
    drm_pci_alloc/drm_pci_free are very thin wrappers around the core dma
    facilities, and we have no special reason within the drm layer to behave
    differently. In particular, since
    
    commit de09d31dd38a50fdce106c15abd68432eebbd014
    Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Date:   Fri Jan 15 16:51:42 2016 -0800
    
        page-flags: define PG_reserved behavior on compound pages
    
        As far as I can see there's no users of PG_reserved on compound pages.
        Let's use PF_NO_COMPOUND here.
    
    it has been illegal to combine GFP_COMP with SetPageReserved, so lets
    stop doing both and leave the dma layer to its own devices.
    
    Reported-by: Taketo Kabe
    Bug: https://gitlab.freedesktop.org/drm/intel/issues/1027
    Fixes: de09d31dd38a ("page-flags: define PG_reserved behavior on compound pages")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: <stable@vger.kernel.org> # v4.5+
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200202171635.4039044-1-chris@chris-wilson.co.uk
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 135a45d56f958528c2f9415fb058eb0536582fb4
Author: Lyude Paul <lyude@redhat.com>
Date:   Wed Jan 22 14:43:20 2020 -0500

    drm/dp_mst: Fix clearing payload state on topology disable
    
    [ Upstream commit 8732fe46b20c951493bfc4dba0ad08efdf41de81 ]
    
    The issues caused by:
    
    commit 64e62bdf04ab ("drm/dp_mst: Remove VCPI while disabling topology
    mgr")
    
    Prompted me to take a closer look at how we clear the payload state in
    general when disabling the topology, and it turns out there's actually
    two subtle issues here.
    
    The first is that we're not grabbing &mgr.payload_lock when clearing the
    payloads in drm_dp_mst_topology_mgr_set_mst(). Seeing as the canonical
    lock order is &mgr.payload_lock -> &mgr.lock (because we always want
    &mgr.lock to be the inner-most lock so topology validation always
    works), this makes perfect sense. It also means that -technically- there
    could be racing between someone calling
    drm_dp_mst_topology_mgr_set_mst() to disable the topology, along with a
    modeset occurring that's modifying the payload state at the same time.
    
    The second is the more obvious issue that Wayne Lin discovered, that
    we're not clearing proposed_payloads when disabling the topology.
    
    I actually can't see any obvious places where the racing caused by the
    first issue would break something, and it could be that some of our
    higher-level locks already prevent this by happenstance, but better safe
    then sorry. So, let's make it so that drm_dp_mst_topology_mgr_set_mst()
    first grabs &mgr.payload_lock followed by &mgr.lock so that we never
    race when modifying the payload state. Then, we also clear
    proposed_payloads to fix the original issue of enabling a new topology
    with a dirty payload state. This doesn't clear any of the drm_dp_vcpi
    structures, but those are getting destroyed along with the ports anyway.
    
    Changes since v1:
    * Use sizeof(mgr->payloads[0])/sizeof(mgr->proposed_vcpis[0]) instead -
      vsyrjala
    
    Cc: Sean Paul <sean@poorly.run>
    Cc: Wayne Lin <Wayne.Lin@amd.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200122194321.14953-1-lyude@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbf12bd2856cffade67191af36115ea9760ff2f8
Author: Andrei Botila <andrei.botila@nxp.com>
Date:   Fri Feb 28 12:46:48 2020 +0200

    crypto: caam - update xts sector size for large input length
    
    [ Upstream commit 3f142b6a7b573bde6cff926f246da05652c61eb4 ]
    
    Since in the software implementation of XTS-AES there is
    no notion of sector every input length is processed the same way.
    CAAM implementation has the notion of sector which causes different
    results between the software implementation and the one in CAAM
    for input lengths bigger than 512 bytes.
    Increase sector size to maximum value on 16 bits.
    
    Fixes: c6415a6016bf ("crypto: caam - add support for acipher xts(aes)")
    Cc: <stable@vger.kernel.org> # v4.12+
    Signed-off-by: Andrei Botila <andrei.botila@nxp.com>
    Reviewed-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 814a0291c0e09a4b7d13a53c8884b05f9d1adf85
Author: Bob Liu <bob.liu@oracle.com>
Date:   Tue Mar 24 21:22:45 2020 +0800

    dm zoned: remove duplicate nr_rnd_zones increase in dmz_init_zone()
    
    [ Upstream commit b8fdd090376a7a46d17db316638fe54b965c2fb0 ]
    
    zmd->nr_rnd_zones was increased twice by mistake. The other place it
    is increased in dmz_init_zone() is the only one needed:
    
    1131                 zmd->nr_useable_zones++;
    1132                 if (dmz_is_rnd(zone)) {
    1133                         zmd->nr_rnd_zones++;
                                            ^^^
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bob Liu <bob.liu@oracle.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8807401c6fef447364959d58512a15834d841d1c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    [ Upstream commit 351cbf6e4410e7ece05e35d0a07320538f2418b4 ]
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 049be58476ade49dc3798e7ae62f4ca7f195b004
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Feb 28 13:04:36 2020 +0000

    Btrfs: fix crash during unmount due to race with delayed inode workers
    
    [ Upstream commit f0cc2cd70164efe8f75c5d99560f0f69969c72e4 ]
    
    During unmount we can have a job from the delayed inode items work queue
    still running, that can lead to at least two bad things:
    
    1) A crash, because the worker can try to create a transaction just
       after the fs roots were freed;
    
    2) A transaction leak, because the worker can create a transaction
       before the fs roots are freed and just after we committed the last
       transaction and after we stopped the transaction kthread.
    
    A stack trace example of the crash:
    
     [79011.691214] kernel BUG at lib/radix-tree.c:982!
     [79011.692056] invalid opcode: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
     [79011.693180] CPU: 3 PID: 1394 Comm: kworker/u8:2 Tainted: G        W         5.6.0-rc2-btrfs-next-54 #2
     (...)
     [79011.696789] Workqueue: btrfs-delayed-meta btrfs_work_helper [btrfs]
     [79011.697904] RIP: 0010:radix_tree_tag_set+0xe7/0x170
     (...)
     [79011.702014] RSP: 0018:ffffb3c84a317ca0 EFLAGS: 00010293
     [79011.702949] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
     [79011.704202] RDX: ffffb3c84a317cb0 RSI: ffffb3c84a317ca8 RDI: ffff8db3931340a0
     [79011.705463] RBP: 0000000000000005 R08: 0000000000000005 R09: ffffffff974629d0
     [79011.706756] R10: ffffb3c84a317bc0 R11: 0000000000000001 R12: ffff8db393134000
     [79011.708010] R13: ffff8db3931340a0 R14: ffff8db393134068 R15: 0000000000000001
     [79011.709270] FS:  0000000000000000(0000) GS:ffff8db3b6a00000(0000) knlGS:0000000000000000
     [79011.710699] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [79011.711710] CR2: 00007f22c2a0a000 CR3: 0000000232ad4005 CR4: 00000000003606e0
     [79011.712958] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     [79011.714205] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     [79011.715448] Call Trace:
     [79011.715925]  record_root_in_trans+0x72/0xf0 [btrfs]
     [79011.716819]  btrfs_record_root_in_trans+0x4b/0x70 [btrfs]
     [79011.717925]  start_transaction+0xdd/0x5c0 [btrfs]
     [79011.718829]  btrfs_async_run_delayed_root+0x17e/0x2b0 [btrfs]
     [79011.719915]  btrfs_work_helper+0xaa/0x720 [btrfs]
     [79011.720773]  process_one_work+0x26d/0x6a0
     [79011.721497]  worker_thread+0x4f/0x3e0
     [79011.722153]  ? process_one_work+0x6a0/0x6a0
     [79011.722901]  kthread+0x103/0x140
     [79011.723481]  ? kthread_create_worker_on_cpu+0x70/0x70
     [79011.724379]  ret_from_fork+0x3a/0x50
     (...)
    
    The following diagram shows a sequence of steps that lead to the crash
    during ummount of the filesystem:
    
            CPU 1                                             CPU 2                                CPU 3
    
     btrfs_punch_hole()
       btrfs_btree_balance_dirty()
         btrfs_balance_delayed_items()
           --> sees
               fs_info->delayed_root->items
               with value 200, which is greater
               than
               BTRFS_DELAYED_BACKGROUND (128)
               and smaller than
               BTRFS_DELAYED_WRITEBACK (512)
           btrfs_wq_run_delayed_node()
             --> queues a job for
                 fs_info->delayed_workers to run
                 btrfs_async_run_delayed_root()
    
                                                                                                btrfs_async_run_delayed_root()
                                                                                                  --> job queued by CPU 1
    
                                                                                                  --> starts picking and running
                                                                                                      delayed nodes from the
                                                                                                      prepare_list list
    
                                                     close_ctree()
    
                                                       btrfs_delete_unused_bgs()
    
                                                       btrfs_commit_super()
    
                                                         btrfs_join_transaction()
                                                           --> gets transaction N
    
                                                         btrfs_commit_transaction(N)
                                                           --> set transaction state
                                                            to TRANTS_STATE_COMMIT_START
    
                                                                                                 btrfs_first_prepared_delayed_node()
                                                                                                   --> picks delayed node X through
                                                                                                       the prepared_list list
    
                                                           btrfs_run_delayed_items()
    
                                                             btrfs_first_delayed_node()
                                                               --> also picks delayed node X
                                                                   but through the node_list
                                                                   list
    
                                                             __btrfs_commit_inode_delayed_items()
                                                                --> runs all delayed items from
                                                                    this node and drops the
                                                                    node's item count to 0
                                                                    through call to
                                                                    btrfs_release_delayed_inode()
    
                                                             --> finishes running any remaining
                                                                 delayed nodes
    
                                                           --> finishes transaction commit
    
                                                       --> stops cleaner and transaction threads
    
                                                       btrfs_free_fs_roots()
                                                         --> frees all roots and removes them
                                                             from the radix tree
                                                             fs_info->fs_roots_radix
    
                                                                                                 btrfs_join_transaction()
                                                                                                   start_transaction()
                                                                                                     btrfs_record_root_in_trans()
                                                                                                       record_root_in_trans()
                                                                                                         radix_tree_tag_set()
                                                                                                           --> crashes because
                                                                                                               the root is not in
                                                                                                               the radix tree
                                                                                                               anymore
    
    If the worker is able to call btrfs_join_transaction() before the unmount
    task frees the fs roots, we end up leaking a transaction and all its
    resources, since after the call to btrfs_commit_super() and stopping the
    transaction kthread, we don't expect to have any transaction open anymore.
    
    When this situation happens the worker has a delayed node that has no
    more items to run, since the task calling btrfs_run_delayed_items(),
    which is doing a transaction commit, picks the same node and runs all
    its items first.
    
    We can not wait for the worker to complete when running delayed items
    through btrfs_run_delayed_items(), because we call that function in
    several phases of a transaction commit, and that could cause a deadlock
    because the worker calls btrfs_join_transaction() and the task doing the
    transaction commit may have already set the transaction state to
    TRANS_STATE_COMMIT_DOING.
    
    Also it's not possible to get into a situation where only some of the
    items of a delayed node are added to the fs/subvolume tree in the current
    transaction and the remaining ones in the next transaction, because when
    running the items of a delayed inode we lock its mutex, effectively
    waiting for the worker if the worker is running the items of the delayed
    node already.
    
    Since this can only cause issues when unmounting a filesystem, fix it in
    a simple way by waiting for any jobs on the delayed workers queue before
    calling btrfs_commit_supper() at close_ctree(). This works because at this
    point no one can call btrfs_btree_balance_dirty() or
    btrfs_balance_delayed_items(), and if we end up waiting for any worker to
    complete, btrfs_commit_super() will commit the transaction created by the
    worker.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7934eafe52a4f9b1e31a18ab6d20ac122f3ed3a0
Author: Clement Courbet <courbet@google.com>
Date:   Mon Mar 30 10:03:56 2020 +0200

    powerpc: Make setjmp/longjmp signature standard
    
    commit c17eb4dca5a353a9dbbb8ad6934fe57af7165e91 upstream.
    
    Declaring setjmp()/longjmp() as taking longs makes the signature
    non-standard, and makes clang complain. In the past, this has been
    worked around by adding -ffreestanding to the compile flags.
    
    The implementation looks like it only ever propagates the value
    (in longjmp) or sets it to 1 (in setjmp), and we only call longjmp
    with integer parameters.
    
    This allows removing -ffreestanding from the compilation flags.
    
    Fixes: c9029ef9c957 ("powerpc: Avoid clang warnings around setjmp and longjmp")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Clement Courbet <courbet@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200330080400.124803-1-courbet@google.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef2999853ab520842a7bf6d5a50de71fdcdedc7c
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Wed Sep 4 14:11:07 2019 +0000

    powerpc: Add attributes for setjmp/longjmp
    
    commit aa497d4352414aad22e792b35d0aaaa12bbc37c5 upstream.
    
    The setjmp function should be declared as "returns_twice", or bad
    things can happen[1]. This does not actually change generated code in
    my testing.
    
    The longjmp function should be declared as "noreturn", so that the
    compiler can optimise calls to it better. This makes the generated
    code a little shorter.
    
    1: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-returns_005ftwice-function-attribute
    
    Signed-off-by: Segher Boessenkool <segher@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/c02ce4a573f3bac907e2c70957a2d1275f910013.1567605586.git.segher@kernel.crashing.org
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13368c1ff61c9bdf6725f4a9f48df6404d55fc76
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Fri Mar 27 05:52:43 2020 -0400

    scsi: mpt3sas: Fix kernel panic observed on soft HBA unplug
    
    commit cc41f11a21a51d6869d71e525a7264c748d7c0d7 upstream.
    
    Generic protection fault type kernel panic is observed when user performs
    soft (ordered) HBA unplug operation while IOs are running on drives
    connected to HBA.
    
    When user performs ordered HBA removal operation, the kernel calls PCI
    device's .remove() call back function where driver is flushing out all the
    outstanding SCSI IO commands with DID_NO_CONNECT host byte and also unmaps
    sg buffers allocated for these IO commands.
    
    However, in the ordered HBA removal case (unlike of real HBA hot removal),
    HBA device is still alive and hence HBA hardware is performing the DMA
    operations to those buffers on the system memory which are already unmapped
    while flushing out the outstanding SCSI IO commands and this leads to
    kernel panic.
    
    Don't flush out the outstanding IOs from .remove() path in case of ordered
    removal since HBA will be still alive in this case and it can complete the
    outstanding IOs. Flush out the outstanding IOs only in case of 'physical
    HBA hot unplug' where there won't be any communication with the HBA.
    
    During shutdown also it is possible that HBA hardware can perform DMA
    operations on those outstanding IO buffers which are completed with
    DID_NO_CONNECT by the driver from .shutdown(). So same above fix is applied
    in shutdown path as well.
    
    It is safe to drop the outstanding commands when HBA is inaccessible such
    as when permanent PCI failure happens, when HBA is in non-operational
    state, or when someone does a real HBA hot unplug operation. Since driver
    knows that HBA is inaccessible during these cases, it is safe to drop the
    outstanding commands instead of waiting for SCSI error recovery to kick in
    and clear these outstanding commands.
    
    Link: https://lore.kernel.org/r/1585302763-23007-1-git-send-email-sreekanth.reddy@broadcom.com
    Fixes: c666d3be99c0 ("scsi: mpt3sas: wait for and flush running commands on shutdown/unload")
    Cc: stable@vger.kernel.org #v4.14.174+
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 840d3adab3a8751c0aefae553a82835a60821ca3
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Feb 18 19:38:27 2020 +0000

    powerpc/kprobes: Ignore traps that happened in real mode
    
    commit 21f8b2fa3ca5b01f7a2b51b89ce97a3705a15aa0 upstream.
    
    When a program check exception happens while MMU translation is
    disabled, following Oops happens in kprobe_handler() in the following
    code:
    
            } else if (*addr != BREAKPOINT_INSTRUCTION) {
    
      BUG: Unable to handle kernel data access on read at 0x0000e268
      Faulting instruction address: 0xc000ec34
      Oops: Kernel access of bad area, sig: 11 [#1]
      BE PAGE_SIZE=16K PREEMPT CMPC885
      Modules linked in:
      CPU: 0 PID: 429 Comm: cat Not tainted 5.6.0-rc1-s3k-dev-00824-g84195dc6c58a #3267
      NIP:  c000ec34 LR: c000ecd8 CTR: c019cab8
      REGS: ca4d3b58 TRAP: 0300   Not tainted  (5.6.0-rc1-s3k-dev-00824-g84195dc6c58a)
      MSR:  00001032 <ME,IR,DR,RI>  CR: 2a4d3c52  XER: 00000000
      DAR: 0000e268 DSISR: c0000000
      GPR00: c000b09c ca4d3c10 c66d0620 00000000 ca4d3c60 00000000 00009032 00000000
      GPR08: 00020000 00000000 c087de44 c000afe0 c66d0ad0 100d3dd6 fffffff3 00000000
      GPR16: 00000000 00000041 00000000 ca4d3d70 00000000 00000000 0000416d 00000000
      GPR24: 00000004 c53b6128 00000000 0000e268 00000000 c07c0000 c07bb6fc ca4d3c60
      NIP [c000ec34] kprobe_handler+0x128/0x290
      LR [c000ecd8] kprobe_handler+0x1cc/0x290
      Call Trace:
      [ca4d3c30] [c000b09c] program_check_exception+0xbc/0x6fc
      [ca4d3c50] [c000e43c] ret_from_except_full+0x0/0x4
      --- interrupt: 700 at 0xe268
      Instruction dump:
      913e0008 81220000 38600001 3929ffff 91220000 80010024 bb410008 7c0803a6
      38210020 4e800020 38600000 4e800020 <813b0000> 6d2a7fe0 2f8a0008 419e0154
      ---[ end trace 5b9152d4cdadd06d ]---
    
    kprobe is not prepared to handle events in real mode and functions
    running in real mode should have been blacklisted, so kprobe_handler()
    can safely bail out telling 'this trap is not mine' for any trap that
    happened while in real-mode.
    
    If the trap happened with MSR_IR or MSR_DR cleared, return 0
    immediately.
    
    Reported-by: Larry Finger <Larry.Finger@lwfinger.net>
    Fixes: 6cc89bad60a6 ("powerpc/kprobes: Invoke handlers directly")
    Cc: stable@vger.kernel.org # v4.10+
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Reviewed-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/424331e2006e7291a1bfe40e7f3fa58825f565e1.1582054578.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46d7381f78c069dded3135a970c3488478903ba9
Author: Cédric Le Goater <clg@kaod.org>
Date:   Fri Mar 6 16:01:40 2020 +0100

    powerpc/xive: Use XIVE_BAD_IRQ instead of zero to catch non configured IPIs
    
    commit b1a504a6500df50e83b701b7946b34fce27ad8a3 upstream.
    
    When a CPU is brought up, an IPI number is allocated and recorded
    under the XIVE CPU structure. Invalid IPI numbers are tracked with
    interrupt number 0x0.
    
    On the PowerNV platform, the interrupt number space starts at 0x10 and
    this works fine. However, on the sPAPR platform, it is possible to
    allocate the interrupt number 0x0 and this raises an issue when CPU 0
    is unplugged. The XIVE spapr driver tracks allocated interrupt numbers
    in a bitmask and it is not correctly updated when interrupt number 0x0
    is freed. It stays allocated and it is then impossible to reallocate.
    
    Fix by using the XIVE_BAD_IRQ value instead of zero on both platforms.
    
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Fixes: eac1e731b59e ("powerpc/xive: guest exploitation of the XIVE interrupt controller")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Tested-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200306150143.5551-2-clg@kaod.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 891b0bdceb8845536b9a4df86aa3842f968aff0d
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Fri Mar 13 15:18:42 2020 +0530

    powerpc/hash64/devmap: Use H_PAGE_THP_HUGE when setting up huge devmap PTE entries
    
    commit 36b78402d97a3b9aeab136feb9b00d8647ec2c20 upstream.
    
    H_PAGE_THP_HUGE is used to differentiate between a THP hugepage and
    hugetlb hugepage entries. The difference is WRT how we handle hash
    fault on these address. THP address enables MPSS in segments. We want
    to manage devmap hugepage entries similar to THP pt entries. Hence use
    H_PAGE_THP_HUGE for devmap huge PTE entries.
    
    With current code while handling hash PTE fault, we do set is_thp =
    true when finding devmap PTE huge PTE entries.
    
    Current code also does the below sequence we setting up huge devmap
    entries.
    
            entry = pmd_mkhuge(pfn_t_pmd(pfn, prot));
            if (pfn_t_devmap(pfn))
                    entry = pmd_mkdevmap(entry);
    
    In that case we would find both H_PAGE_THP_HUGE and PAGE_DEVMAP set
    for huge devmap PTE entries. This results in false positive error like
    below.
    
      kernel BUG at /home/kvaneesh/src/linux/mm/memory.c:4321!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in:
      CPU: 56 PID: 67996 Comm: t_mmap_dio Not tainted 5.6.0-rc4-59640-g371c804dedbc #128
      ....
      NIP [c00000000044c9e4] __follow_pte_pmd+0x264/0x900
      LR [c0000000005d45f8] dax_writeback_one+0x1a8/0x740
      Call Trace:
        str_spec.74809+0x22ffb4/0x2d116c (unreliable)
        dax_writeback_one+0x1a8/0x740
        dax_writeback_mapping_range+0x26c/0x700
        ext4_dax_writepages+0x150/0x5a0
        do_writepages+0x68/0x180
        __filemap_fdatawrite_range+0x138/0x180
        file_write_and_wait_range+0xa4/0x110
        ext4_sync_file+0x370/0x6e0
        vfs_fsync_range+0x70/0xf0
        sys_msync+0x220/0x2e0
        system_call+0x5c/0x68
    
    This is because our pmd_trans_huge check doesn't exclude _PAGE_DEVMAP.
    
    To make this all consistent, update pmd_mkdevmap to set
    H_PAGE_THP_HUGE and pmd_trans_huge check now excludes _PAGE_DEVMAP
    correctly.
    
    Fixes: ebd31197931d ("powerpc/mm: Add devmap support for ppc64")
    Cc: stable@vger.kernel.org # v4.13+
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200313094842.351830-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4ebfe21e1433700884f71996341724a69395ef1
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Mar 31 22:47:19 2020 +1100

    powerpc/64/tm: Don't let userspace set regs->trap via sigreturn
    
    commit c7def7fbdeaa25feaa19caf4a27c5d10bd8789e4 upstream.
    
    In restore_tm_sigcontexts() we take the trap value directly from the
    user sigcontext with no checking:
    
            err |= __get_user(regs->trap, &sc->gp_regs[PT_TRAP]);
    
    This means we can be in the kernel with an arbitrary regs->trap value.
    
    Although that's not immediately problematic, there is a risk we could
    trigger one of the uses of CHECK_FULL_REGS():
    
            #define CHECK_FULL_REGS(regs)   BUG_ON(regs->trap & 1)
    
    It can also cause us to unnecessarily save non-volatile GPRs again in
    save_nvgprs(), which shouldn't be problematic but is still wrong.
    
    It's also possible it could trick the syscall restart machinery, which
    relies on regs->trap not being == 0xc00 (see 9a81c16b5275 ("powerpc:
    fix double syscall restarts")), though I haven't been able to make
    that happen.
    
    Finally it doesn't match the behaviour of the non-TM case, in
    restore_sigcontext() which zeroes regs->trap.
    
    So change restore_tm_sigcontexts() to zero regs->trap.
    
    This was discovered while testing Nick's upcoming rewrite of the
    syscall entry path. In that series the call to save_nvgprs() prior to
    signal handling (do_notify_resume()) is removed, which leaves the
    low-bit of regs->trap uncleared which can then trigger the FULL_REGS()
    WARNs in setup_tm_sigcontexts().
    
    Fixes: 2b0a576d15e0 ("powerpc: Add new transactional memory state to the signal context")
    Cc: stable@vger.kernel.org # v3.9+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200401023836.3286664-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66a93f57330d3e172bf2c3da29f0501634bfac7a
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 18 16:51:17 2019 +1000

    powerpc/powernv/idle: Restore AMR/UAMOR/AMOR after idle
    
    commit 53a712bae5dd919521a58d7bad773b949358add0 upstream.
    
    In order to implement KUAP (Kernel Userspace Access Protection) on
    Power9 we will be using the AMR, and therefore indirectly the
    UAMOR/AMOR.
    
    So save/restore these regs in the idle code.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    [ajd: Backport to 4.14 tree, CVE-2020-11669]
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a294c1f8b1278886bd42273d6211dc75323cb80
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Mar 27 17:02:54 2019 +0800

    libata: Return correct status in sata_pmp_eh_recover_pm() when ATA_DFLAG_DETACH is set
    
    commit 8305f72f952cff21ce8109dc1ea4b321c8efc5af upstream.
    
    During system resume from suspend, this can be observed on ASM1062 PMP
    controller:
    
    ata10.01: SATA link down (SStatus 0 SControl 330)
    ata10.02: hard resetting link
    ata10.02: SATA link down (SStatus 0 SControl 330)
    ata10.00: configured for UDMA/133
    Kernel panic - not syncing: stack-protector: Kernel
     in: sata_pmp_eh_recover+0xa2b/0xa40
    
    CPU: 2 PID: 230 Comm: scsi_eh_9 Tainted: P OE
    #49-Ubuntu
    Hardware name: System manufacturer System Product
     1001 12/10/2017
    Call Trace:
    dump_stack+0x63/0x8b
    panic+0xe4/0x244
    ? sata_pmp_eh_recover+0xa2b/0xa40
    __stack_chk_fail+0x19/0x20
    sata_pmp_eh_recover+0xa2b/0xa40
    ? ahci_do_softreset+0x260/0x260 [libahci]
    ? ahci_do_hardreset+0x140/0x140 [libahci]
    ? ata_phys_link_offline+0x60/0x60
    ? ahci_stop_engine+0xc0/0xc0 [libahci]
    sata_pmp_error_handler+0x22/0x30
    ahci_error_handler+0x45/0x80 [libahci]
    ata_scsi_port_error_handler+0x29b/0x770
    ? ata_scsi_cmd_error_handler+0x101/0x140
    ata_scsi_error+0x95/0xd0
    ? scsi_try_target_reset+0x90/0x90
    scsi_error_handler+0xd0/0x5b0
    kthread+0x121/0x140
    ? scsi_eh_get_sense+0x200/0x200
    ? kthread_create_worker_on_cpu+0x70/0x70
    ret_from_fork+0x22/0x40
    Kernel Offset: 0xcc00000 from 0xffffffff81000000
    (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    
    Since sata_pmp_eh_recover_pmp() doens't set rc when ATA_DFLAG_DETACH is
    set, sata_pmp_eh_recover() continues to run. During retry it triggers
    the stack protector.
    
    Set correct rc in sata_pmp_eh_recover_pmp() to let sata_pmp_eh_recover()
    jump to pmp_fail directly.
    
    BugLink: https://bugs.launchpad.net/bugs/1821434
    Cc: stable@vger.kernel.org
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df54882393ca5fa7ad98e53ce32411a77fecd055
Author: Simon Gander <simon@tuxera.com>
Date:   Fri Apr 10 14:32:16 2020 -0700

    hfsplus: fix crash and filesystem corruption when deleting files
    
    commit 25efb2ffdf991177e740b2f63e92b4ec7d310a92 upstream.
    
    When removing files containing extended attributes, the hfsplus driver may
    remove the wrong entries from the attributes b-tree, causing major
    filesystem damage and in some cases even kernel crashes.
    
    To remove a file, all its extended attributes have to be removed as well.
    The driver does this by looking up all keys in the attributes b-tree with
    the cnid of the file.  Each of these entries then gets deleted using the
    key used for searching, which doesn't contain the attribute's name when it
    should.  Since the key doesn't contain the name, the deletion routine will
    not find the correct entry and instead remove the one in front of it.  If
    parent nodes have to be modified, these become corrupt as well.  This
    causes invalid links and unsorted entries that not even macOS's fsck_hfs
    is able to fix.
    
    To fix this, modify the search key before an entry is deleted from the
    attributes b-tree by copying the found entry's key into the search key,
    therefore ensuring that the correct entry gets removed from the tree.
    
    Signed-off-by: Simon Gander <simon@tuxera.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Anton Altaparmakov <anton@tuxera.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200327155541.1521-1-simon@tuxera.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bf2149f029d4c2f92b7f80a37e7c8c90ca89493
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Thu Feb 6 17:26:21 2020 +1100

    cpufreq: powernv: Fix use-after-free
    
    commit d0a72efac89d1c35ac55197895201b7b94c5e6ef upstream.
    
    The cpufreq driver has a use-after-free that we can hit if:
    
    a) There's an OCC message pending when the notifier is registered, and
    b) The cpufreq driver fails to register with the core.
    
    When a) occurs the notifier schedules a workqueue item to handle the
    message. The backing work_struct is located on chips[].throttle and
    when b) happens we clean up by freeing the array. Once we get to
    the (now free) queued item and the kernel crashes.
    
    Fixes: c5e29ea7ac14 ("cpufreq: powernv: Fix bugs in powernv_cpufreq_{init/exit}")
    Cc: stable@vger.kernel.org # v4.6+
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200206062622.28235-1-oohall@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad2259b81d4f032d1a28bbcfbb3bab360336acfa
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 10 14:33:43 2020 -0700

    kmod: make request_module() return an error when autoloading is disabled
    
    commit d7d27cfc5cf0766a26a8f56868c5ad5434735126 upstream.
    
    Patch series "module autoloading fixes and cleanups", v5.
    
    This series fixes a bug where request_module() was reporting success to
    kernel code when module autoloading had been completely disabled via
    'echo > /proc/sys/kernel/modprobe'.
    
    It also addresses the issues raised on the original thread
    (https://lkml.kernel.org/lkml/20200310223731.126894-1-ebiggers@kernel.org/T/#u)
    bydocumenting the modprobe sysctl, adding a self-test for the empty path
    case, and downgrading a user-reachable WARN_ONCE().
    
    This patch (of 4):
    
    It's long been possible to disable kernel module autoloading completely
    (while still allowing manual module insertion) by setting
    /proc/sys/kernel/modprobe to the empty string.
    
    This can be preferable to setting it to a nonexistent file since it
    avoids the overhead of an attempted execve(), avoids potential
    deadlocks, and avoids the call to security_kernel_module_request() and
    thus on SELinux-based systems eliminates the need to write SELinux rules
    to dontaudit module_request.
    
    However, when module autoloading is disabled in this way,
    request_module() returns 0.  This is broken because callers expect 0 to
    mean that the module was successfully loaded.
    
    Apparently this was never noticed because this method of disabling
    module autoloading isn't used much, and also most callers don't use the
    return value of request_module() since it's always necessary to check
    whether the module registered its functionality or not anyway.
    
    But improperly returning 0 can indeed confuse a few callers, for example
    get_fs_type() in fs/filesystems.c where it causes a WARNING to be hit:
    
            if (!fs && (request_module("fs-%.*s", len, name) == 0)) {
                    fs = __get_fs_type(name, len);
                    WARN_ONCE(!fs, "request_module fs-%.*s succeeded, but still no fs?\n", len, name);
            }
    
    This is easily reproduced with:
    
            echo > /proc/sys/kernel/modprobe
            mount -t NONEXISTENT none /
    
    It causes:
    
            request_module fs-NONEXISTENT succeeded, but still no fs?
            WARNING: CPU: 1 PID: 1106 at fs/filesystems.c:275 get_fs_type+0xd6/0xf0
            [...]
    
    This should actually use pr_warn_once() rather than WARN_ONCE(), since
    it's also user-reachable if userspace immediately unloads the module.
    Regardless, request_module() should correctly return an error when it
    fails.  So let's make it return -ENOENT, which matches the error when
    the modprobe binary doesn't exist.
    
    I've also sent patches to document and test this case.
    
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Jessica Yu <jeyu@kernel.org>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jeff Vander Stoep <jeffv@google.com>
    Cc: Ben Hutchings <benh@debian.org>
    Cc: Josh Triplett <josh@joshtriplett.org>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200310223731.126894-1-ebiggers@kernel.org
    Link: http://lkml.kernel.org/r/20200312202552.241885-1-ebiggers@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ea982de5957542160f5e965e36e2cbb434151dc
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Apr 1 13:23:06 2020 -0700

    Input: i8042 - add Acer Aspire 5738z to nomux list
    
    commit ebc68cedec4aead47d8d11623d013cca9bf8e825 upstream.
    
    The Acer Aspire 5738z has a button to disable (and re-enable) the
    touchpad next to the touchpad.
    
    When this button is pressed a LED underneath indicates that the touchpad
    is disabled (and an event is send to userspace and GNOME shows its
    touchpad enabled / disable OSD thingie).
    
    So far so good, but after re-enabling the touchpad it no longer works.
    
    The laptop does not have an external ps2 port, so mux mode is not needed
    and disabling mux mode fixes the touchpad no longer working after toggling
    it off and back on again, so lets add this laptop model to the nomux list.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200331123947.318908-1-hdegoede@redhat.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63579acd788ec978591b345b5eaa55937116116b
Author: Michael Mueller <mimu@linux.ibm.com>
Date:   Tue Mar 3 16:42:01 2020 +0100

    s390/diag: fix display of diagnose call statistics
    
    commit 6c7c851f1b666a8a455678a0b480b9162de86052 upstream.
    
    Show the full diag statistic table and not just parts of it.
    
    The issue surfaced in a KVM guest with a number of vcpus
    defined smaller than NR_DIAG_STAT.
    
    Fixes: 1ec2772e0c3c ("s390/diag: add a statistic for diagnose calls")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Mueller <mimu@linux.ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1c7651d8b49d1e3a8ad824c2f191d9e9dffb441
Author: Sam Lunt <samueljlunt@gmail.com>
Date:   Fri Jan 31 12:11:23 2020 -0600

    perf tools: Support Python 3.8+ in Makefile
    
    commit b9c9ce4e598e012ca7c1813fae2f4d02395807de upstream.
    
    Python 3.8 changed the output of 'python-config --ldflags' to no longer
    include the '-lpythonX.Y' flag (this apparently fixed an issue loading
    modules with a statically linked Python executable).  The libpython
    feature check in linux/build/feature fails if the Python library is not
    included in FEATURE_CHECK_LDFLAGS-libpython variable.
    
    This adds a check in the Makefile to determine if PYTHON_CONFIG accepts
    the '--embed' flag and passes that flag alongside '--ldflags' if so.
    
    tools/perf is the only place the libpython feature check is used.
    
    Signed-off-by: Sam Lunt <samuel.j.lunt@gmail.com>
    Tested-by: He Zhe <zhe.he@windriver.com>
    Link: http://lore.kernel.org/lkml/c56be2e1-8111-9dfe-8298-f7d0f9ab7431@windriver.com
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: trivial@kernel.org
    Cc: stable@kernel.org
    Link: http://lore.kernel.org/lkml/20200131181123.tmamivhq4b7uqasr@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0353bad3913e41ee766a74ff2d6159e148b357ba
Author: Changwei Ge <chge@linux.alibaba.com>
Date:   Fri Apr 10 14:32:38 2020 -0700

    ocfs2: no need try to truncate file beyond i_size
    
    commit 783fda856e1034dee90a873f7654c418212d12d7 upstream.
    
    Linux fallocate(2) with FALLOC_FL_PUNCH_HOLE mode set, its offset can
    exceed the inode size.  Ocfs2 now doesn't allow that offset beyond inode
    size.  This restriction is not necessary and violates fallocate(2)
    semantics.
    
    If fallocate(2) offset is beyond inode size, just return success and do
    nothing further.
    
    Otherwise, ocfs2 will crash the kernel.
    
      kernel BUG at fs/ocfs2//alloc.c:7264!
       ocfs2_truncate_inline+0x20f/0x360 [ocfs2]
       ocfs2_remove_inode_range+0x23c/0xcb0 [ocfs2]
       __ocfs2_change_file_space+0x4a5/0x650 [ocfs2]
       ocfs2_fallocate+0x83/0xa0 [ocfs2]
       vfs_fallocate+0x148/0x230
       SyS_fallocate+0x48/0x80
       do_syscall_64+0x79/0x170
    
    Signed-off-by: Changwei Ge <chge@linux.alibaba.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200407082754.17565-1-chge@linux.alibaba.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fbb1f423298090dfb58e8eb323367e1f66211a3
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 10 14:33:47 2020 -0700

    fs/filesystems.c: downgrade user-reachable WARN_ONCE() to pr_warn_once()
    
    commit 26c5d78c976ca298e59a56f6101a97b618ba3539 upstream.
    
    After request_module(), nothing is stopping the module from being
    unloaded until someone takes a reference to it via try_get_module().
    
    The WARN_ONCE() in get_fs_type() is thus user-reachable, via userspace
    running 'rmmod' concurrently.
    
    Since WARN_ONCE() is for kernel bugs only, not for user-reachable
    situations, downgrade this warning to pr_warn_once().
    
    Keep it printed once only, since the intent of this warning is to detect
    a bug in modprobe at boot time.  Printing the warning more than once
    wouldn't really provide any useful extra information.
    
    Fixes: 41124db869b7 ("fs: warn in case userspace lied about modprobe return")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Jessica Yu <jeyu@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jeff Vander Stoep <jeffv@google.com>
    Cc: Jessica Yu <jeyu@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: NeilBrown <neilb@suse.com>
    Cc: <stable@vger.kernel.org>            [4.13+]
    Link: http://lkml.kernel.org/r/20200312202552.241885-3-ebiggers@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ee19b5a3ed490889259979370e89f081890cb83
Author: Qian Cai <cai@lca.pw>
Date:   Fri Feb 21 23:32:58 2020 -0500

    ext4: fix a data race at inode->i_blocks
    
    commit 28936b62e71e41600bab319f262ea9f9b1027629 upstream.
    
    inode->i_blocks could be accessed concurrently as noticed by KCSAN,
    
     BUG: KCSAN: data-race in ext4_do_update_inode [ext4] / inode_add_bytes
    
     write to 0xffff9a00d4b982d0 of 8 bytes by task 22100 on cpu 118:
      inode_add_bytes+0x65/0xf0
      __inode_add_bytes at fs/stat.c:689
      (inlined by) inode_add_bytes at fs/stat.c:702
      ext4_mb_new_blocks+0x418/0xca0 [ext4]
      ext4_ext_map_blocks+0x1a6b/0x27b0 [ext4]
      ext4_map_blocks+0x1a9/0x950 [ext4]
      _ext4_get_block+0xfc/0x270 [ext4]
      ext4_get_block_unwritten+0x33/0x50 [ext4]
      __block_write_begin_int+0x22e/0xae0
      __block_write_begin+0x39/0x50
      ext4_write_begin+0x388/0xb50 [ext4]
      ext4_da_write_begin+0x35f/0x8f0 [ext4]
      generic_perform_write+0x15d/0x290
      ext4_buffered_write_iter+0x11f/0x210 [ext4]
      ext4_file_write_iter+0xce/0x9e0 [ext4]
      new_sync_write+0x29c/0x3b0
      __vfs_write+0x92/0xa0
      vfs_write+0x103/0x260
      ksys_write+0x9d/0x130
      __x64_sys_write+0x4c/0x60
      do_syscall_64+0x91/0xb05
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
     read to 0xffff9a00d4b982d0 of 8 bytes by task 8 on cpu 65:
      ext4_do_update_inode+0x4a0/0xf60 [ext4]
      ext4_inode_blocks_set at fs/ext4/inode.c:4815
      ext4_mark_iloc_dirty+0xaf/0x160 [ext4]
      ext4_mark_inode_dirty+0x129/0x3e0 [ext4]
      ext4_convert_unwritten_extents+0x253/0x2d0 [ext4]
      ext4_convert_unwritten_io_end_vec+0xc5/0x150 [ext4]
      ext4_end_io_rsv_work+0x22c/0x350 [ext4]
      process_one_work+0x54f/0xb90
      worker_thread+0x80/0x5f0
      kthread+0x1cd/0x1f0
      ret_from_fork+0x27/0x50
    
     4 locks held by kworker/u256:0/8:
      #0: ffff9a025abc4328 ((wq_completion)ext4-rsv-conversion){+.+.}, at: process_one_work+0x443/0xb90
      #1: ffffab5a862dbe20 ((work_completion)(&ei->i_rsv_conversion_work)){+.+.}, at: process_one_work+0x443/0xb90
      #2: ffff9a025a9d0f58 (jbd2_handle){++++}, at: start_this_handle+0x1c1/0x9d0 [jbd2]
      #3: ffff9a00d4b985d8 (&(&ei->i_raw_lock)->rlock){+.+.}, at: ext4_do_update_inode+0xaa/0xf60 [ext4]
     irq event stamp: 3009267
     hardirqs last  enabled at (3009267): [<ffffffff980da9b7>] __find_get_block+0x107/0x790
     hardirqs last disabled at (3009266): [<ffffffff980da8f9>] __find_get_block+0x49/0x790
     softirqs last  enabled at (3009230): [<ffffffff98a0034c>] __do_softirq+0x34c/0x57c
     softirqs last disabled at (3009223): [<ffffffff97cc67a2>] irq_exit+0xa2/0xc0
    
     Reported by Kernel Concurrency Sanitizer on:
     CPU: 65 PID: 8 Comm: kworker/u256:0 Tainted: G L 5.6.0-rc2-next-20200221+ #7
     Hardware name: HPE ProLiant DL385 Gen10/ProLiant DL385 Gen10, BIOS A40 07/10/2019
     Workqueue: ext4-rsv-conversion ext4_end_io_rsv_work [ext4]
    
    The plain read is outside of inode->i_lock critical section which
    results in a data race. Fix it by adding READ_ONCE() there.
    
    Link: https://lore.kernel.org/r/20200222043258.2279-1-cai@lca.pw
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c60aee180ba11443df2630f3e23e2915e3aacc17
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed Apr 1 10:07:16 2020 -0400

    NFS: Fix a page leak in nfs_destroy_unlinked_subrequests()
    
    commit add42de31721fa29ed77a7ce388674d69f9d31a4 upstream.
    
    When we detach a subrequest from the list, we must also release the
    reference it holds to the parent.
    
    Fixes: 5b2b5187fa85 ("NFS: Fix nfs_page_group_destroy() and nfs_lock_and_join_requests() race cases")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98587165f7ad0d91cc7f76d9ef591a2cb743209e
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed Oct 31 17:55:02 2018 -0700

    rtc: omap: Use define directive for PIN_CONFIG_ACTIVE_HIGH
    
    commit c50156526a2f7176b50134e3e5fb108ba09791b2 upstream.
    
    Clang warns when one enumerated type is implicitly converted to another:
    
    drivers/rtc/rtc-omap.c:574:21: warning: implicit conversion from
    enumeration type 'enum rtc_pin_config_param' to different enumeration
    type 'enum pin_config_param' [-Wenum-conversion]
            {"ti,active-high", PIN_CONFIG_ACTIVE_HIGH, 0},
            ~                  ^~~~~~~~~~~~~~~~~~~~~~
    drivers/rtc/rtc-omap.c:579:12: warning: implicit conversion from
    enumeration type 'enum rtc_pin_config_param' to different enumeration
    type 'enum pin_config_param' [-Wenum-conversion]
            PCONFDUMP(PIN_CONFIG_ACTIVE_HIGH, "input active high", NULL, false),
            ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ./include/linux/pinctrl/pinconf-generic.h:163:11: note: expanded from
    macro 'PCONFDUMP'
            .param = a, .display = b, .format = c, .has_arg = d     \
                     ^
    2 warnings generated.
    
    It is expected that pinctrl drivers can extend pin_config_param because
    of the gap between PIN_CONFIG_END and PIN_CONFIG_MAX so this conversion
    isn't an issue. Most drivers that take advantage of this define the
    PIN_CONFIG variables as constants, rather than enumerated values. Do the
    same thing here so that Clang no longer warns.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/144
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb6acfefa6f0585f0082d63f858b0a73a1f92d07
Author: Fredrik Strupe <fredrik@strupe.net>
Date:   Wed Apr 8 13:29:41 2020 +0200

    arm64: armv8_deprecated: Fix undef_hook mask for thumb setend
    
    commit fc2266011accd5aeb8ebc335c381991f20e26e33 upstream.
    
    For thumb instructions, call_undef_hook() in traps.c first reads a u16,
    and if the u16 indicates a T32 instruction (u16 >= 0xe800), a second
    u16 is read, which then makes up the the lower half-word of a T32
    instruction. For T16 instructions, the second u16 is not read,
    which makes the resulting u32 opcode always have the upper half set to
    0.
    
    However, having the upper half of instr_mask in the undef_hook set to 0
    masks out the upper half of all thumb instructions - both T16 and T32.
    This results in trapped T32 instructions with the lower half-word equal
    to the T16 encoding of setend (b650) being matched, even though the upper
    half-word is not 0000 and thus indicates a T32 opcode.
    
    An example of such a T32 instruction is eaa0b650, which should raise a
    SIGILL since T32 instructions with an eaa prefix are unallocated as per
    Arm ARM, but instead works as a SETEND because the second half-word is set
    to b650.
    
    This patch fixes the issue by extending instr_mask to include the
    upper u32 half, which will still match T16 instructions where the upper
    half is 0, but not T32 instructions.
    
    Fixes: 2d888f48e056 ("arm64: Emulate SETEND for AArch32 tasks")
    Cc: <stable@vger.kernel.org> # 4.0.x-
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Fredrik Strupe <fredrik@strupe.net>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abf346bbe93974abeddff7a42e7dcff4ef6aa75d
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Thu Mar 12 18:44:56 2020 +0100

    scsi: zfcp: fix missing erp_lock in port recovery trigger for point-to-point
    
    commit 819732be9fea728623e1ed84eba28def7384ad1f upstream.
    
    v2.6.27 commit cc8c282963bd ("[SCSI] zfcp: Automatically attach remote
    ports") introduced zfcp automatic port scan.
    
    Before that, the user had to use the sysfs attribute "port_add" of an FCP
    device (adapter) to add and open remote (target) ports, even for the remote
    peer port in point-to-point topology. That code path did a proper port open
    recovery trigger taking the erp_lock.
    
    Since above commit, a new helper function zfcp_erp_open_ptp_port()
    performed an UNlocked port open recovery trigger. This can race with other
    parallel recovery triggers. In zfcp_erp_action_enqueue() this could corrupt
    e.g. adapter->erp_total_count or adapter->erp_ready_head.
    
    As already found for fabric topology in v4.17 commit fa89adba1941 ("scsi:
    zfcp: fix infinite iteration on ERP ready list"), there was an endless loop
    during tracing of rport (un)block.  A subsequent v4.18 commit 9e156c54ace3
    ("scsi: zfcp: assert that the ERP lock is held when tracing a recovery
    trigger") introduced a lockdep assertion for that case.
    
    As a side effect, that lockdep assertion now uncovered the unlocked code
    path for PtP. It is from within an adapter ERP action:
    
    zfcp_erp_strategy[1479]  intentionally DROPs erp lock around
                             zfcp_erp_strategy_do_action()
    zfcp_erp_strategy_do_action[1441]      NO erp lock
    zfcp_erp_adapter_strategy[876]         NO erp lock
    zfcp_erp_adapter_strategy_open[855]    NO erp lock
    zfcp_erp_adapter_strategy_open_fsf[806]NO erp lock
    zfcp_erp_adapter_strat_fsf_xconf[772]  erp lock only around
                                           zfcp_erp_action_to_running(),
                                           BUT *_not_* around
                                           zfcp_erp_enqueue_ptp_port()
    zfcp_erp_enqueue_ptp_port[728]         BUG: *_not_* taking erp lock
    _zfcp_erp_port_reopen[432]             assumes to be called with erp lock
    zfcp_erp_action_enqueue[314]           assumes to be called with erp lock
    zfcp_dbf_rec_trig[288]                 _checks_ to be called with erp lock:
            lockdep_assert_held(&adapter->erp_lock);
    
    It causes the following lockdep warning:
    
    WARNING: CPU: 2 PID: 775 at drivers/s390/scsi/zfcp_dbf.c:288
                                zfcp_dbf_rec_trig+0x16a/0x188
    no locks held by zfcperp0.0.17c0/775.
    
    Fix this by using the proper locked recovery trigger helper function.
    
    Link: https://lore.kernel.org/r/20200312174505.51294-2-maier@linux.ibm.com
    Fixes: cc8c282963bd ("[SCSI] zfcp: Automatically attach remote ports")
    Cc: <stable@vger.kernel.org> #v2.6.27+
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7db01bc082e77c8c40bf8af6afbc21e4e8356919
Author: Shetty, Harshini X (EXT-Sony Mobile) <Harshini.X.Shetty@sony.com>
Date:   Tue Mar 17 09:15:45 2020 +0000

    dm verity fec: fix memory leak in verity_fec_dtr
    
    commit 75fa601934fda23d2f15bf44b09c2401942d8e15 upstream.
    
    Fix below kmemleak detected in verity_fec_ctr. output_pool is
    allocated for each dm-verity-fec device. But it is not freed when
    dm-table for the verity target is removed. Hence free the output
    mempool in destructor function verity_fec_dtr.
    
    unreferenced object 0xffffffffa574d000 (size 4096):
      comm "init", pid 1667, jiffies 4294894890 (age 307.168s)
      hex dump (first 32 bytes):
        8e 36 00 98 66 a8 0b 9b 00 00 00 00 00 00 00 00  .6..f...........
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<0000000060e82407>] __kmalloc+0x2b4/0x340
        [<00000000dd99488f>] mempool_kmalloc+0x18/0x20
        [<000000002560172b>] mempool_init_node+0x98/0x118
        [<000000006c3574d2>] mempool_init+0x14/0x20
        [<0000000008cb266e>] verity_fec_ctr+0x388/0x3b0
        [<000000000887261b>] verity_ctr+0x87c/0x8d0
        [<000000002b1e1c62>] dm_table_add_target+0x174/0x348
        [<000000002ad89eda>] table_load+0xe4/0x328
        [<000000001f06f5e9>] dm_ctl_ioctl+0x3b4/0x5a0
        [<00000000bee5fbb7>] do_vfs_ioctl+0x5dc/0x928
        [<00000000b475b8f5>] __arm64_sys_ioctl+0x70/0x98
        [<000000005361e2e8>] el0_svc_common+0xa0/0x158
        [<000000001374818f>] el0_svc_handler+0x6c/0x88
        [<000000003364e9f4>] el0_svc+0x8/0xc
        [<000000009d84cec9>] 0xffffffffffffffff
    
    Fixes: a739ff3f543af ("dm verity: add support for forward error correction")
    Depends-on: 6f1c819c219f7 ("dm: convert to bioset_init()/mempool_init()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Harshini Shetty <harshini.x.shetty@sony.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5808d6a6aef27f0d21f632ff1b4c0963a5fedfb
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Fri Feb 15 14:44:12 2019 -0800

    mm: Use fixed constant in page_frag_alloc instead of size + 1
    
    commit 8644772637deb121f7ac2df690cbf83fa63d3b70 upstream.
    
    This patch replaces the size + 1 value introduced with the recent fix for 1
    byte allocs with a constant value.
    
    The idea here is to reduce code overhead as the previous logic would have
    to read size into a register, then increment it, and write it back to
    whatever field was being used. By using a constant we can avoid those
    memory reads and arithmetic operations in favor of just encoding the
    maximum value into the operation itself.
    
    Fixes: 2c2ade81741c ("mm: page_alloc: fix ref bias in page_frag_alloc() for 1-byte allocs")
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a4513400796d1ae0562c3f3783428e74c684c8b
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Wed Mar 25 12:31:54 2020 +0200

    tools: gpio: Fix out-of-tree build regression
    
    commit 82f04bfe2aff428b063eefd234679b2d693228ed upstream.
    
    Commit 0161a94e2d1c7 ("tools: gpio: Correctly add make dependencies for
    gpio_utils") added a make rule for gpio-utils-in.o but used $(output)
    instead of the correct $(OUTPUT) for the output directory, breaking
    out-of-tree build (O=xx) with the following error:
    
      No rule to make target 'out/tools/gpio/gpio-utils-in.o', needed by 'out/tools/gpio/lsgpio-in.o'.  Stop.
    
    Fix that.
    
    Fixes: 0161a94e2d1c ("tools: gpio: Correctly add make dependencies for gpio_utils")
    Cc: <stable@vger.kernel.org>
    Cc: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Link: https://lore.kernel.org/r/20200325103154.32235-1-anssi.hannula@bitwise.fi
    Reviewed-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1733d2a94f6414ba905d91ff14322093fda7c398
Author: Zhenzhong Duan <zhenzhong.duan@oracle.com>
Date:   Thu Jan 17 02:10:59 2019 -0800

    x86/speculation: Remove redundant arch_smt_update() invocation
    
    commit 34d66caf251df91ff27b24a3a786810d29989eca upstream.
    
    With commit a74cfffb03b7 ("x86/speculation: Rework SMT state change"),
    arch_smt_update() is invoked from each individual CPU hotplug function.
    
    Therefore the extra arch_smt_update() call in the sysfs SMT control is
    redundant.
    
    Fixes: a74cfffb03b7 ("x86/speculation: Rework SMT state change")
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <konrad.wilk@oracle.com>
    Cc: <dwmw@amazon.co.uk>
    Cc: <bp@suse.de>
    Cc: <srinivas.eeda@oracle.com>
    Cc: <peterz@infradead.org>
    Cc: <hpa@zytor.com>
    Link: https://lkml.kernel.org/r/e2e064f2-e8ef-42ca-bf4f-76b612964752@default
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b97e6f384e817d4717e68526b7759e6aabd7372e
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Mon Feb 18 12:56:44 2019 +0000

    powerpc/pseries: Drop pointless static qualifier in vpa_debugfs_init()
    
    commit 11dd34f3eae5a468013bb161a1dcf1fecd2ca321 upstream.
    
    There is no need to have the 'struct dentry *vpa_dir' variable static
    since new value always be assigned before use it.
    
    Fixes: c6c26fb55e8e ("powerpc/pseries: Export raw per-CPU VPA data via debugfs")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190218125644.87448-1-yuehaibing@huawei.com
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85503bc92e7e1b2dbbe5e5a9929fba25d7abf3ec
Author: Roopa Prabhu <roopa@cumulusnetworks.com>
Date:   Wed Sep 12 13:21:48 2018 -0700

    net: rtnl_configure_link: fix dev flags changes arg to __dev_notify_flags
    
    commit 56a49d7048703f5ffdb84d3a0ee034108fba6850 upstream.
    
    This fix addresses https://bugzilla.kernel.org/show_bug.cgi?id=201071
    
    Commit 5025f7f7d506 wrongly relied on __dev_change_flags to notify users of
    dev flag changes in the case when dev->rtnl_link_state = RTNL_LINK_INITIALIZED.
    Fix it by indicating flag changes explicitly to __dev_notify_flags.
    
    Fixes: 5025f7f7d506 ("rtnetlink: add rtnl_link_state check in rtnl_configure_link")
    Reported-By: Liam mcbirnie <liam.mcbirnie@boeing.com>
    Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 731a69866a37a13de543028f05ce65e3d4861522
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Apr 13 10:04:49 2019 +0200

    ALSA: hda: Initialize power_state field properly
    
    commit 183ab39eb0ea9879bb68422a83e65f750f3192f0 upstream.
    
    The recent commit 98081ca62cba ("ALSA: hda - Record the current power
    state before suspend/resume calls") made the HD-audio driver to store
    the PM state in power_state field.  This forgot, however, the
    initialization at power up.  Although the codec drivers usually don't
    need to refer to this field in the normal operation, let's initialize
    it properly for consistency.
    
    Fixes: 98081ca62cba ("ALSA: hda - Record the current power state before suspend/resume calls")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c7d62cf043816d0a1884e6961aa0b84ac067154
Author: Rosioru Dragos <dragos.rosioru@nxp.com>
Date:   Tue Feb 25 17:05:52 2020 +0200

    crypto: mxs-dcp - fix scatterlist linearization for hash
    
    commit fa03481b6e2e82355c46644147b614f18c7a8161 upstream.
    
    The incorrect traversal of the scatterlist, during the linearization phase
    lead to computing the hash value of the wrong input buffer.
    New implementation uses scatterwalk_map_and_copy()
    to address this issue.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 15b59e7c3733 ("crypto: mxs - Add Freescale MXS DCP driver")
    Signed-off-by: Rosioru Dragos <dragos.rosioru@nxp.com>
    Reviewed-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25f78b3ce3d5c2c0d08fe62187971f2036fb550e
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Mar 4 11:18:23 2020 -0500

    btrfs: drop block from cache on error in relocation
    
    commit 8e19c9732ad1d127b5575a10f4fbcacf740500ff upstream.
    
    If we have an error while building the backref tree in relocation we'll
    process all the pending edges and then free the node.  However if we
    integrated some edges into the cache we'll lose our link to those edges
    by simply freeing this node, which means we'll leak memory and
    references to any roots that we've found.
    
    Instead we need to use remove_backref_node(), which walks through all of
    the edges that are still linked to this node and free's them up and
    drops any root references we may be holding.
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 620b7966d4b8674e55c42342f731e5c17ec069a0
Author: Yilu Lin <linyilu@huawei.com>
Date:   Wed Mar 18 11:59:19 2020 +0800

    CIFS: Fix bug which the return value by asynchronous read is error
    
    commit 97adda8b3ab703de8e4c8d27646ddd54fe22879c upstream.
    
    This patch is used to fix the bug in collect_uncached_read_data()
    that rc is automatically converted from a signed number to an
    unsigned number when the CIFS asynchronous read fails.
    It will cause ctx->rc is error.
    
    Example:
    Share a directory and create a file on the Windows OS.
    Mount the directory to the Linux OS using CIFS.
    On the CIFS client of the Linux OS, invoke the pread interface to
    deliver the read request.
    
    The size of the read length plus offset of the read request is greater
    than the maximum file size.
    
    In this case, the CIFS server on the Windows OS returns a failure
    message (for example, the return value of
    smb2.nt_status is STATUS_INVALID_PARAMETER).
    
    After receiving the response message, the CIFS client parses
    smb2.nt_status to STATUS_INVALID_PARAMETER
    and converts it to the Linux error code (rdata->result=-22).
    
    Then the CIFS client invokes the collect_uncached_read_data function to
    assign the value of rdata->result to rc, that is, rc=rdata->result=-22.
    
    The type of the ctx->total_len variable is unsigned integer,
    the type of the rc variable is integer, and the type of
    the ctx->rc variable is ssize_t.
    
    Therefore, during the ternary operation, the value of rc is
    automatically converted to an unsigned number. The final result is
    ctx->rc=4294967274. However, the expected result is ctx->rc=-22.
    
    Signed-off-by: Yilu Lin <linyilu@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c0bf2560ca18abe1451db23b8ef8700c67cc44f
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Apr 1 10:13:48 2020 +0200

    KVM: VMX: fix crash cleanup when KVM wasn't used
    
    commit dbef2808af6c594922fe32833b30f55f35e9da6d upstream.
    
    If KVM wasn't used at all before we crash the cleanup procedure fails with
     BUG: unable to handle page fault for address: ffffffffffffffc8
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 23215067 P4D 23215067 PUD 23217067 PMD 0
     Oops: 0000 [#8] SMP PTI
     CPU: 0 PID: 3542 Comm: bash Kdump: loaded Tainted: G      D           5.6.0-rc2+ #823
     RIP: 0010:crash_vmclear_local_loaded_vmcss.cold+0x19/0x51 [kvm_intel]
    
    The root cause is that loaded_vmcss_on_cpu list is not yet initialized,
    we initialize it in hardware_enable() but this only happens when we start
    a VM.
    
    Previously, we used to have a bitmap with enabled CPUs and that was
    preventing [masking] the issue.
    
    Initialized loaded_vmcss_on_cpu list earlier, right before we assign
    crash_vmclear_loaded_vmcss pointer. blocked_vcpu_on_cpu list and
    blocked_vcpu_on_cpu_lock are moved altogether for consistency.
    
    Fixes: 31603d4fc2bb ("KVM: VMX: Always VMCLEAR in-use VMCSes during crash with kexec support")
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20200401081348.1345307-1-vkuznets@redhat.com>
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ce9bf3a75b7365120432dd48fa141b20104877f
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Sat Mar 21 12:37:49 2020 -0700

    KVM: VMX: Always VMCLEAR in-use VMCSes during crash with kexec support
    
    commit 31603d4fc2bb4f0815245d496cb970b27b4f636a upstream.
    
    VMCLEAR all in-use VMCSes during a crash, even if kdump's NMI shootdown
    interrupted a KVM update of the percpu in-use VMCS list.
    
    Because NMIs are not blocked by disabling IRQs, it's possible that
    crash_vmclear_local_loaded_vmcss() could be called while the percpu list
    of VMCSes is being modified, e.g. in the middle of list_add() in
    vmx_vcpu_load_vmcs().  This potential corner case was called out in the
    original commit[*], but the analysis of its impact was wrong.
    
    Skipping the VMCLEARs is wrong because it all but guarantees that a
    loaded, and therefore cached, VMCS will live across kexec and corrupt
    memory in the new kernel.  Corruption will occur because the CPU's VMCS
    cache is non-coherent, i.e. not snooped, and so the writeback of VMCS
    memory on its eviction will overwrite random memory in the new kernel.
    The VMCS will live because the NMI shootdown also disables VMX, i.e. the
    in-progress VMCLEAR will #UD, and existing Intel CPUs do not flush the
    VMCS cache on VMXOFF.
    
    Furthermore, interrupting list_add() and list_del() is safe due to
    crash_vmclear_local_loaded_vmcss() using forward iteration.  list_add()
    ensures the new entry is not visible to forward iteration unless the
    entire add completes, via WRITE_ONCE(prev->next, new).  A bad "prev"
    pointer could be observed if the NMI shootdown interrupted list_del() or
    list_add(), but list_for_each_entry() does not consume ->prev.
    
    In addition to removing the temporary disabling of VMCLEAR, open code
    loaded_vmcs_init() in __loaded_vmcs_clear() and reorder VMCLEAR so that
    the VMCS is deleted from the list only after it's been VMCLEAR'd.
    Deleting the VMCS before VMCLEAR would allow a race where the NMI
    shootdown could arrive between list_del() and vmcs_clear() and thus
    neither flow would execute a successful VMCLEAR.  Alternatively, more
    code could be moved into loaded_vmcs_init(), but that gets rather silly
    as the only other user, alloc_loaded_vmcs(), doesn't need the smp_wmb()
    and would need to work around the list_del().
    
    Update the smp_*() comments related to the list manipulation, and
    opportunistically reword them to improve clarity.
    
    [*] https://patchwork.kernel.org/patch/1675731/#3720461
    
    Fixes: 8f536b7697a0 ("KVM: VMX: provide the vmclear function and a bitmap to support VMCLEAR in kdump")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200321193751.24985-2-sean.j.christopherson@intel.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57d45fd95665d2bb0cc1ac026efbee5fcc19f103
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Feb 18 13:07:15 2020 -0800

    KVM: x86: Allocate new rmap and large page tracking when moving memslot
    
    commit edd4fa37baa6ee8e44dc65523b27bd6fe44c94de upstream.
    
    Reallocate a rmap array and recalcuate large page compatibility when
    moving an existing memslot to correctly handle the alignment properties
    of the new memslot.  The number of rmap entries required at each level
    is dependent on the alignment of the memslot's base gfn with respect to
    that level, e.g. moving a large-page aligned memslot so that it becomes
    unaligned will increase the number of rmap entries needed at the now
    unaligned level.
    
    Not updating the rmap array is the most obvious bug, as KVM accesses
    garbage data beyond the end of the rmap.  KVM interprets the bad data as
    pointers, leading to non-canonical #GPs, unexpected #PFs, etc...
    
      general protection fault: 0000 [#1] SMP
      CPU: 0 PID: 1909 Comm: move_memory_reg Not tainted 5.4.0-rc7+ #139
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      RIP: 0010:rmap_get_first+0x37/0x50 [kvm]
      Code: <48> 8b 3b 48 85 ff 74 ec e8 6c f4 ff ff 85 c0 74 e3 48 89 d8 5b c3
      RSP: 0018:ffffc9000021bbc8 EFLAGS: 00010246
      RAX: ffff00617461642e RBX: ffff00617461642e RCX: 0000000000000012
      RDX: ffff88827400f568 RSI: ffffc9000021bbe0 RDI: ffff88827400f570
      RBP: 0010000000000000 R08: ffffc9000021bd00 R09: ffffc9000021bda8
      R10: ffffc9000021bc48 R11: 0000000000000000 R12: 0030000000000000
      R13: 0000000000000000 R14: ffff88827427d700 R15: ffffc9000021bce8
      FS:  00007f7eda014700(0000) GS:ffff888277a00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f7ed9216ff8 CR3: 0000000274391003 CR4: 0000000000162eb0
      Call Trace:
       kvm_mmu_slot_set_dirty+0xa1/0x150 [kvm]
       __kvm_set_memory_region.part.64+0x559/0x960 [kvm]
       kvm_set_memory_region+0x45/0x60 [kvm]
       kvm_vm_ioctl+0x30f/0x920 [kvm]
       do_vfs_ioctl+0xa1/0x620
       ksys_ioctl+0x66/0x70
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x4c/0x170
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f7ed9911f47
      Code: <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 21 6f 2c 00 f7 d8 64 89 01 48
      RSP: 002b:00007ffc00937498 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      RAX: ffffffffffffffda RBX: 0000000001ab0010 RCX: 00007f7ed9911f47
      RDX: 0000000001ab1350 RSI: 000000004020ae46 RDI: 0000000000000004
      RBP: 000000000000000a R08: 0000000000000000 R09: 00007f7ed9214700
      R10: 00007f7ed92149d0 R11: 0000000000000246 R12: 00000000bffff000
      R13: 0000000000000003 R14: 00007f7ed9215000 R15: 0000000000000000
      Modules linked in: kvm_intel kvm irqbypass
      ---[ end trace 0c5f570b3358ca89 ]---
    
    The disallow_lpage tracking is more subtle.  Failure to update results
    in KVM creating large pages when it shouldn't, either due to stale data
    or again due to indexing beyond the end of the metadata arrays, which
    can lead to memory corruption and/or leaking data to guest/userspace.
    
    Note, the arrays for the old memslot are freed by the unconditional call
    to kvm_free_memslot() in __kvm_set_memory_region().
    
    Fixes: 05da45583de9b ("KVM: MMU: large page support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc6da9e3901a37c53b22c4edc6a3114e324b70f0
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Apr 3 17:30:47 2020 +0200

    KVM: s390: vsie: Fix delivery of addressing exceptions
    
    commit 4d4cee96fb7a3cc53702a9be8299bf525be4ee98 upstream.
    
    Whenever we get an -EFAULT, we failed to read in guest 2 physical
    address space. Such addressing exceptions are reported via a program
    intercept to the nested hypervisor.
    
    We faked the intercept, we have to return to guest 2. Instead, right
    now we would be returning -EFAULT from the intercept handler, eventually
    crashing the VM.
    the correct thing to do is to return 1 as rc == 1 is the internal
    representation of "we have to go back into g2".
    
    Addressing exceptions can only happen if the g2->g3 page tables
    reference invalid g2 addresses (say, either a table or the final page is
    not accessible - so something that basically never happens in sane
    environments.
    
    Identified by manual code inspection.
    
    Fixes: a3508fbe9dc6 ("KVM: s390: vsie: initial support for nested virtualization")
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Link: https://lore.kernel.org/r/20200403153050.20569-3-david@redhat.com
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    [borntraeger@de.ibm.com: fix patch description]
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b463cdfe7260474875c4c03479158451b616016
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Apr 3 17:30:46 2020 +0200

    KVM: s390: vsie: Fix region 1 ASCE sanity shadow address checks
    
    commit a1d032a49522cb5368e5dfb945a85899b4c74f65 upstream.
    
    In case we have a region 1 the following calculation
    (31 + ((gmap->asce & _ASCE_TYPE_MASK) >> 2)*11)
    results in 64. As shifts beyond the size are undefined the compiler is
    free to use instructions like sllg. sllg will only use 6 bits of the
    shift value (here 64) resulting in no shift at all. That means that ALL
    addresses will be rejected.
    
    The can result in endless loops, e.g. when prefix cannot get mapped.
    
    Fixes: 4be130a08420 ("s390/mm: add shadow gmap support")
    Tested-by: Janosch Frank <frankja@linux.ibm.com>
    Reported-by: Janosch Frank <frankja@linux.ibm.com>
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Link: https://lore.kernel.org/r/20200403153050.20569-2-david@redhat.com
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    [borntraeger@de.ibm.com: fix patch description, remove WARN_ON_ONCE]
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 803e9e93b079f6ac40485c27a4179e26acd7dc75
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon Mar 2 22:27:35 2020 -0800

    KVM: nVMX: Properly handle userspace interrupt window request
    
    commit a1c77abb8d93381e25a8d2df3a917388244ba776 upstream.
    
    Return true for vmx_interrupt_allowed() if the vCPU is in L2 and L1 has
    external interrupt exiting enabled.  IRQs are never blocked in hardware
    if the CPU is in the guest (L2 from L1's perspective) when IRQs trigger
    VM-Exit.
    
    The new check percolates up to kvm_vcpu_ready_for_interrupt_injection()
    and thus vcpu_run(), and so KVM will exit to userspace if userspace has
    requested an interrupt window (to inject an IRQ into L1).
    
    Remove the @external_intr param from vmx_check_nested_events(), which is
    actually an indicator that userspace wants an interrupt window, e.g.
    it's named @req_int_win further up the stack.  Injecting a VM-Exit into
    L1 to try and bounce out to L0 userspace is all kinds of broken and is
    no longer necessary.
    
    Remove the hack in nested_vmx_vmexit() that attempted to workaround the
    breakage in vmx_check_nested_events() by only filling interrupt info if
    there's an actual interrupt pending.  The hack actually made things
    worse because it caused KVM to _never_ fill interrupt info when the
    LAPIC resides in userspace (kvm_cpu_has_interrupt() queries
    interrupt.injected, which is always cleared by prepare_vmcs12() before
    reaching the hack in nested_vmx_vmexit()).
    
    Fixes: 6550c4df7e50 ("KVM: nVMX: Fix interrupt window request with "Acknowledge interrupt on exit"")
    Cc: stable@vger.kernel.org
    Cc: Liran Alon <liran.alon@oracle.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddcc66f15195b2b96a54599ce390b3a1c26041e6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Feb 25 22:36:37 2020 +0100

    x86/entry/32: Add missing ASM_CLAC to general_protection entry
    
    commit 3d51507f29f2153a658df4a0674ec5b592b62085 upstream.
    
    All exception entry points must have ASM_CLAC right at the
    beginning. The general_protection entry is missing one.
    
    Fixes: e59d1b0a2419 ("x86-32, smap: Add STAC/CLAC instructions to 32-bit kernel entry")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Frederic Weisbecker <frederic@kernel.org>
    Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
    Reviewed-by: Andy Lutomirski <luto@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200225220216.219537887@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28c63ef17d620f0e95458c56c5d839ea3de3e500
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Mon Mar 30 19:01:04 2020 -0500

    signal: Extend exec_id to 64bits
    
    commit d1e7fd6462ca9fc76650fbe6ca800e35b24267da upstream.
    
    Replace the 32bit exec_id with a 64bit exec_id to make it impossible
    to wrap the exec_id counter.  With care an attacker can cause exec_id
    wrap and send arbitrary signals to a newly exec'd parent.  This
    bypasses the signal sending checks if the parent changes their
    credentials during exec.
    
    The severity of this problem can been seen that in my limited testing
    of a 32bit exec_id it can take as little as 19s to exec 65536 times.
    Which means that it can take as little as 14 days to wrap a 32bit
    exec_id.  Adam Zabrocki has succeeded wrapping the self_exe_id in 7
    days.  Even my slower timing is in the uptime of a typical server.
    Which means self_exec_id is simply a speed bump today, and if exec
    gets noticably faster self_exec_id won't even be a speed bump.
    
    Extending self_exec_id to 64bits introduces a problem on 32bit
    architectures where reading self_exec_id is no longer atomic and can
    take two read instructions.  Which means that is is possible to hit
    a window where the read value of exec_id does not match the written
    value.  So with very lucky timing after this change this still
    remains expoiltable.
    
    I have updated the update of exec_id on exec to use WRITE_ONCE
    and the read of exec_id in do_notify_parent to use READ_ONCE
    to make it clear that there is no locking between these two
    locations.
    
    Link: https://lore.kernel.org/kernel-hardening/20200324215049.GA3710@pi3.com.pl
    Fixes: 2.3.23pre2
    Cc: stable@vger.kernel.org
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8003b03b1e0511fa915842c76050e7e2463fe1f6
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Sat Feb 29 17:13:47 2020 +0100

    ath9k: Handle txpower changes even when TPC is disabled
    
    commit 968ae2caad0782db5dbbabb560d3cdefd2945d38 upstream.
    
    When TPC is disabled IEEE80211_CONF_CHANGE_POWER event can be handled to
    reconfigure HW's maximum txpower.
    
    This fixes 0dBm txpower setting when user attaches to an interface for
    the first time with the following scenario:
    
    ieee80211_do_open()
        ath9k_add_interface()
            ath9k_set_txpower() /* Set TX power with not yet initialized
                                   sc->hw->conf.power_level */
    
        ieee80211_hw_config() /* Iniatilize sc->hw->conf.power_level and
                                 raise IEEE80211_CONF_CHANGE_POWER */
    
        ath9k_config() /* IEEE80211_CONF_CHANGE_POWER is ignored */
    
    This issue can be reproduced with the following:
    
      $ modprobe -r ath9k
      $ modprobe ath9k
      $ wpa_supplicant -i wlan0 -c /tmp/wpa.conf &
      $ iw dev /* Here TX power is either 0 or 3 depending on RF chain */
      $ killall wpa_supplicant
      $ iw dev /* TX power goes back to calibrated value and subsequent
                  calls will be fine */
    
    Fixes: 283dd11994cde ("ath9k: add per-vif TX power capability")
    Cc: stable@vger.kernel.org
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10d0da30ec935de07431c87aaac07a052934ca3f
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Jan 22 14:18:42 2019 -0600

    MIPS: OCTEON: irq: Fix potential NULL pointer dereference
    
    commit 792a402c2840054533ef56279c212ef6da87d811 upstream.
    
    There is a potential NULL pointer dereference in case kzalloc()
    fails and returns NULL.
    
    Fix this by adding a NULL check on *cd*
    
    This bug was detected with the help of Coccinelle.
    
    Fixes: 64b139f97c01 ("MIPS: OCTEON: irq: add CIB and other fixes")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bc389539138520a765c931e35cc8bfe920f1221
Author: Sungbo Eo <mans0n@gorani.run>
Date:   Sat Mar 21 22:38:42 2020 +0900

    irqchip/versatile-fpga: Apply clear-mask earlier
    
    commit 6a214a28132f19ace3d835a6d8f6422ec80ad200 upstream.
    
    Clear its own IRQs before the parent IRQ get enabled, so that the
    remaining IRQs do not accidentally interrupt the parent IRQ controller.
    
    This patch also fixes a reboot bug on OX820 SoC, where the remaining
    rps-timer IRQ raises a GIC interrupt that is left pending. After that,
    the rps-timer IRQ is cleared during driver initialization, and there's
    no IRQ left in rps-irq when local_irq_enable() is called, which evokes
    an error message "unexpected IRQ trap".
    
    Fixes: bdd272cbb97a ("irqchip: versatile FPGA: support cascaded interrupts from DT")
    Signed-off-by: Sungbo Eo <mans0n@gorani.run>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200321133842.2408823-1-mans0n@gorani.run
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0c85c527d584a7891635a517987b0f9d7575768
Author: Yang Xu <xuyang2018.jy@cn.fujitsu.com>
Date:   Fri Feb 28 12:41:51 2020 +0800

    KEYS: reaching the keys quotas correctly
    
    commit 2e356101e72ab1361821b3af024d64877d9a798d upstream.
    
    Currently, when we add a new user key, the calltrace as below:
    
    add_key()
      key_create_or_update()
        key_alloc()
        __key_instantiate_and_link
          generic_key_instantiate
            key_payload_reserve
              ......
    
    Since commit a08bf91ce28e ("KEYS: allow reaching the keys quotas exactly"),
    we can reach max bytes/keys in key_alloc, but we forget to remove this
    limit when we reserver space for payload in key_payload_reserve. So we
    can only reach max keys but not max bytes when having delta between plen
    and type->def_datalen. Remove this limit when instantiating the key, so we
    can keep consistent with key_alloc.
    
    Also, fix the similar problem in keyctl_chown_key().
    
    Fixes: 0b77f5bfb45c ("keys: make the keyring quotas controllable through /proc/sys")
    Fixes: a08bf91ce28e ("KEYS: allow reaching the keys quotas exactly")
    Cc: stable@vger.kernel.org # 5.0.x
    Cc: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Yang Xu <xuyang2018.jy@cn.fujitsu.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50a58e3542530eca3f3840acc89a151300ae397e
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Mon Feb 24 15:23:36 2020 +0530

    PCI: endpoint: Fix for concurrent memory allocation in OB address region
    
    commit 04e046ca57ebed3943422dee10eec9e73aec081e upstream.
    
    pci-epc-mem uses a bitmap to manage the Endpoint outbound (OB) address
    region. This address region will be shared by multiple endpoint
    functions (in the case of multi function endpoint) and it has to be
    protected from concurrent access to avoid updating an inconsistent state.
    
    Use a mutex to protect bitmap updates to prevent the memory
    allocation API from returning incorrect addresses.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fac29b1f331dc4f87046282a365cfc21f856e40d
Author: Yicong Yang <yangyicong@hisilicon.com>
Date:   Fri Mar 13 17:53:47 2020 +0800

    PCI/ASPM: Clear the correct bits when enabling L1 substates
    
    commit 58a3862a10a317a81097ab0c78aecebabb1704f5 upstream.
    
    In pcie_config_aspm_l1ss(), we cleared the wrong bits when enabling ASPM L1
    Substates.  Instead of the L1.x enable bits (PCI_L1SS_CTL1_L1SS_MASK, 0xf), we
    cleared the Link Activation Interrupt Enable bit (PCI_L1SS_CAP_L1_PM_SS,
    0x10).
    
    Clear the L1.x enable bits before writing the new L1.x configuration.
    
    [bhelgaas: changelog]
    Fixes: aeda9adebab8 ("PCI/ASPM: Configure L1 substate settings")
    Link: https://lore.kernel.org/r/1584093227-1292-1-git-send-email-yangyicong@hisilicon.com
    Signed-off-by: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org      # v4.11+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e68019fb4e20281072f7b3dd4db863c9e9f01d5
Author: James Smart <jsmart2021@gmail.com>
Date:   Fri Apr 3 07:33:20 2020 -0700

    nvme-fc: Revert "add module to ops template to allow module references"
    
    commit 8c5c660529209a0e324c1c1a35ce3f83d67a2aa5 upstream.
    
    The original patch was to resolve the lldd being able to be unloaded
    while being used to talk to the boot device of the system. However, the
    end result of the original patch is that any driver unload while a nvme
    controller is live via the lldd is now being prohibited. Given the module
    reference, the module teardown routine can't be called, thus there's no
    way, other than manual actions to terminate the controllers.
    
    Fixes: 863fbae929c7 ("nvme_fc: add module to ops template to allow module references")
    Cc: <stable@vger.kernel.org> # v5.4+
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa545a5f3bb5e6d2cd76dd776af529caa183fc7e
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Fri Apr 3 22:51:33 2020 +0200

    thermal: devfreq_cooling: inline all stubs for CONFIG_DEVFREQ_THERMAL=n
    
    commit 3f5b9959041e0db6dacbea80bb833bff5900999f upstream.
    
    When CONFIG_DEVFREQ_THERMAL is disabled all functions except
    of_devfreq_cooling_register_power() were already inlined. Also inline
    the last function to avoid compile errors when multiple drivers call
    of_devfreq_cooling_register_power() when CONFIG_DEVFREQ_THERMAL is not
    set. Compilation failed with the following message:
      multiple definition of `of_devfreq_cooling_register_power'
    (which then lists all usages of of_devfreq_cooling_register_power())
    
    Thomas Zimmermann reported this problem [0] on a kernel config with
    CONFIG_DRM_LIMA={m,y}, CONFIG_DRM_PANFROST={m,y} and
    CONFIG_DEVFREQ_THERMAL=n after both, the lima and panfrost drivers
    gained devfreq cooling support.
    
    [0] https://www.spinics.net/lists/dri-devel/msg252825.html
    
    Fixes: a76caf55e5b356 ("thermal: Add devfreq cooling")
    Cc: stable@vger.kernel.org
    Reported-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Tested-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200403205133.1101808-1-martin.blumenstingl@googlemail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9c13860da59b8b80224cada557eb36f4a4ac3b2
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Thu Mar 5 13:24:25 2020 +0100

    acpi/x86: ignore unspecified bit positions in the ACPI global lock field
    
    commit ecb9c790999fd6c5af0f44783bd0217f0b89ec2b upstream.
    
    The value in "new" is constructed from "old" such that all bits defined
    as reserved by the ACPI spec[1] are left untouched. But if those bits
    do not happen to be all zero, "new < 3" will not evaluate to true.
    
    The firmware of the laptop(s) Medion MD63490 / Akoya P15648 comes with
    garbage inside the "FACS" ACPI table. The starting value is
    old=0x4944454d, therefore new=0x4944454e, which is >= 3. Mask off
    the reserved bits.
    
    [1] https://uefi.org/sites/default/files/resources/ACPI_6_2.pdf
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206553
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49174d5d54b2d0b1b11a807d6b06b507ad715bd9
Author: Benoit Parrot <bparrot@ti.com>
Date:   Mon Mar 2 14:56:52 2020 +0100

    media: ti-vpe: cal: fix disable_irqs to only the intended target
    
    commit 1db56284b9da9056093681f28db48a09a243274b upstream.
    
    disable_irqs() was mistakenly disabling all interrupts when called.
    This cause all port stream to stop even if only stopping one of them.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Benoit Parrot <bparrot@ti.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3c960145eb8942de21af2e18cc4e1512bebec4b
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Mon Mar 30 12:09:38 2020 -0400

    ALSA: hda/realtek - Set principled PC Beep configuration for ALC256
    
    commit c44737449468a0bdc50e09ec75e530f208391561 upstream.
    
    The Realtek PC Beep Hidden Register[1] is currently set by
    patch_realtek.c in two different places:
    
    In alc_fill_eapd_coef(), it's set to the value 0x5757, corresponding to
    non-beep input on 1Ah and no 1Ah loopback to either headphones or
    speakers. (Although, curiously, the loopback amp is still enabled.) This
    write was added fairly recently by commit e3743f431143 ("ALSA:
    hda/realtek - Dell headphone has noise on unmute for ALC236") and is a
    safe default. However, it happens in the wrong place:
    alc_fill_eapd_coef() runs on module load and cold boot but not on S3
    resume, meaning the register loses its value after suspend.
    
    Conversely, in alc256_init(), the register is updated to unset bit 13
    (disable speaker loopback) and set bit 5 (set non-beep input on 1Ah).
    Although this write does run on S3 resume, it's not quite enough to fix
    up the register's default value of 0x3717. What's missing is a set of
    bit 14 to disable headphone loopback. Without that, we end up with a
    feedback loop where the headphone jack is being driven by amplified
    samples of itself[2].
    
    This change eliminates the update in alc256_init() and replaces it with
    the 0x5757 write from alc_fill_eapd_coef(). Kailang says that 0x5757 is
    supposed to be the codec's default value, so using it will make
    debugging easier for Realtek.
    
    Affects the ALC255, ALC256, ALC257, ALC235, and ALC236 codecs.
    
    [1] Newly documented in Documentation/sound/hd-audio/realtek-pc-beep.rst
    
    [2] Setting the "Headphone Mic Boost" control from userspace changes
    this feedback loop and has been a widely-shared workaround for headphone
    noise on laptops like the Dell XPS 13 9350. This commit eliminates the
    feedback loop and makes the workaround unnecessary.
    
    Fixes: e1e8c1fdce8b ("ALSA: hda/realtek - Dell headphone has noise on unmute for ALC236")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Link: https://lore.kernel.org/r/bf22b417d1f2474b12011c2a39ed6cf8b06d3bf5.1585584498.git.tommyhebb@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f47413b98c0a6378760205657bfff1da5e8da11f
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Mon Mar 30 12:09:37 2020 -0400

    ALSA: doc: Document PC Beep Hidden Register on Realtek ALC256
    
    commit f128090491c3f5aacef91a863f8c52abf869c436 upstream.
    
    This codec (among others) has a hidden set of audio routes, apparently
    designed to allow PC Beep output without a mixer widget on the output
    path, which are controlled by an undocumented Realtek vendor register.
    The default configuration of these routes means that certain inputs
    aren't accessible, necessitating driver control of the register.
    However, Realtek has provided no documentation of the register, instead
    opting to fix issues by providing magic numbers, most of which have been
    at least somewhat erroneous. These magic numbers then get copied by
    others into model-specific fixups, leading to a fragmented and buggy set
    of configurations.
    
    To get out of this situation, I've reverse engineered the register by
    flipping bits and observing how the codec's behavior changes. This
    commit documents my findings. It does not change any code.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Link: https://lore.kernel.org/r/bd69dfdeaf40ff31c4b7b797c829bb320031739c.1585584498.git.tommyhebb@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b53356c9939bd672040a3aaa6e201d21cc06e6ca
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Apr 3 09:25:15 2020 +0200

    ALSA: pcm: oss: Fix regression by buffer overflow fix
    
    commit ae769d3556644888c964635179ef192995f40793 upstream.
    
    The recent fix for the OOB access in PCM OSS plugins (commit
    f2ecf903ef06: "ALSA: pcm: oss: Avoid plugin buffer overflow") caused a
    regression on OSS applications.  The patch introduced the size check
    in client and slave size calculations to limit to each plugin's buffer
    size, but I overlooked that some code paths call those without
    allocating the buffer but just for estimation.
    
    This patch fixes the bug by skipping the size check for those code
    paths while keeping checking in the actual transfer calls.
    
    Fixes: f2ecf903ef06 ("ALSA: pcm: oss: Avoid plugin buffer overflow")
    Tested-and-reported-by: Jari Ruusu <jari.ruusu@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200403072515.25539-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9f2ce5f04b6a407623e0f270cb345fdd6a351d1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 7 10:44:02 2020 +0200

    ALSA: ice1724: Fix invalid access for enumerated ctl items
    
    commit c47914c00be346bc5b48c48de7b0da5c2d1a296c upstream.
    
    The access to Analog Capture Source control value implemented in
    prodigy_hifi.c is wrong, as caught by the recently introduced sanity
    check; it should be accessing value.enumerated.item[] instead of
    value.integer.value[].  This patch corrects the wrong access pattern.
    
    Fixes: 6b8d6e5518e2 ("[ALSA] ICE1724: Added support for Audiotrak Prodigy 7.1 HiFi & HD2, Hercules Fortissimo IV")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=207139
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200407084402.25589-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbeab3f615cf5d76e266e689b6ea19e0bb59a6a9
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 7 10:44:01 2020 +0200

    ALSA: hda: Fix potential access overflow in beep helper
    
    commit 0ad3f0b384d58f3bd1f4fb87d0af5b8f6866f41a upstream.
    
    The beep control helper function blindly stores the values in two
    stereo channels no matter whether the actual control is mono or
    stereo.  This is practically harmless, but it annoys the recently
    introduced sanity check, resulting in an error when the checker is
    enabled.
    
    This patch corrects the behavior to store only on the defined array
    member.
    
    Fixes: 0401e8548eac ("ALSA: hda - Move beep helper functions to hda_beep.c")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=207139
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200407084402.25589-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b53723ea89cb3754dcb1d7e8b3b305b650cb532
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 8 16:04:49 2020 +0200

    ALSA: hda: Add driver blacklist
    
    commit 3c6fd1f07ed03a04debbb9a9d782205f1ef5e2ab upstream.
    
    The recent AMD platform exposes an HD-audio bus but without any actual
    codecs, which is internally tied with a USB-audio device, supposedly.
    It results in "no codecs" error of HD-audio bus driver, and it's
    nothing but a waste of resources.
    
    This patch introduces a static blacklist table for skipping such a
    known bogus PCI SSID entry.  As of writing this patch, the known SSIDs
    are:
    * 1043:874f - ASUS ROG Zenith II / Strix
    * 1462:cb59 - MSI TRX40 Creator
    * 1462:cb60 - MSI TRX40
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=206543
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200408140449.22319-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cedb741414ac69775b04d39f8ce881501e45f21b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Apr 8 16:04:48 2020 +0200

    ALSA: usb-audio: Add mixer workaround for TRX40 and co
    
    commit 2a48218f8e23d47bd3e23cfdfb8aa9066f7dc3e6 upstream.
    
    Some recent boards (supposedly with a new AMD platform) contain the
    USB audio class 2 device that is often tied with HD-audio.  The device
    exposes an Input Gain Pad control (id=19, control=12) but this node
    doesn't behave correctly, returning an error for each inquiry of
    GET_MIN and GET_MAX that should have been mandatory.
    
    As a workaround, simply ignore this node by adding a usbmix_name_map
    table entry.  The currently known devices are:
    * 0414:a002 - Gigabyte TRX40 Aorus Pro WiFi
    * 0b05:1916 - ASUS ROG Zenith II
    * 0b05:1917 - ASUS ROG Strix
    * 0db0:0d64 - MSI TRX40 Creator
    * 0db0:543d - MSI TRX40
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=206543
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200408140449.22319-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e591d7ca6e9cd24bff5fcef70d65544585656488
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Feb 3 18:05:32 2020 -0800

    usb: gadget: composite: Inform controller driver of self-powered
    
    commit 5e5caf4fa8d3039140b4548b6ab23dd17fce9b2c upstream.
    
    Different configuration/condition may draw different power. Inform the
    controller driver of the change so it can respond properly (e.g.
    GET_STATUS request). This fixes an issue with setting MaxPower from
    configfs. The composite driver doesn't check this value when setting
    self-powered.
    
    Cc: stable@vger.kernel.org
    Fixes: 88af8bbe4ef7 ("usb: gadget: the start of the configfs interface")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03ee78583a9e1a7e52819a2f95ef6c9f70397dbb
Author: Sriharsha Allenki <sallenki@codeaurora.org>
Date:   Thu Mar 26 17:26:20 2020 +0530

    usb: gadget: f_fs: Fix use after free issue as part of queue failure
    
    commit f63ec55ff904b2f2e126884fcad93175f16ab4bb upstream.
    
    In AIO case, the request is freed up if ep_queue fails.
    However, io_data->req still has the reference to this freed
    request. In the case of this failure if there is aio_cancel
    call on this io_data it will lead to an invalid dequeue
    operation and a potential use after free issue.
    Fix this by setting the io_data->req to NULL when the request
    is freed as part of queue failure.
    
    Fixes: 2e4c7553cd6f ("usb: gadget: f_fs: add aio support")
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    CC: stable <stable@vger.kernel.org>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200326115620.12571-1-sallenki@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdf7505f814a6aaea188a3c075979be36ee35c59
Author: 이경택 <gt82.lee@samsung.com>
Date:   Wed Apr 1 18:05:24 2020 +0900

    ASoC: topology: use name_prefix for new kcontrol
    
    commit abca9e4a04fbe9c6df4d48ca7517e1611812af25 upstream.
    
    Current topology doesn't add prefix of component to new kcontrol.
    
    Signed-off-by: Gyeongtaek Lee <gt82.lee@samsung.com>
    Link: https://lore.kernel.org/r/009b01d60804$ae25c2d0$0a714870$@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11f9bc47e5ecd98304d234291e7ead6f20491164
Author: 이경택 <gt82.lee@samsung.com>
Date:   Wed Apr 1 10:04:21 2020 +0900

    ASoC: dpcm: allow start or stop during pause for backend
    
    commit 21fca8bdbb64df1297e8c65a746c4c9f4a689751 upstream.
    
    soc_compr_trigger_fe() allows start or stop after pause_push.
    In dpcm_be_dai_trigger(), however, only pause_release is allowed
    command after pause_push.
    So, start or stop after pause in compress offload is always
    returned as error if the compress offload is used with dpcm.
    To fix the problem, SND_SOC_DPCM_STATE_PAUSED should be allowed
    for start or stop command.
    
    Signed-off-by: Gyeongtaek Lee <gt82.lee@samsung.com>
    Reviewed-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/004d01d607c1$7a3d5250$6eb7f6f0$@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee2e66295f5fcbe193c566ba9077f8dde8fe95d2
Author: 이경택 <gt82.lee@samsung.com>
Date:   Tue Mar 31 16:55:16 2020 +0900

    ASoC: dapm: connect virtual mux with default value
    
    commit 3bbbb7728fc853d71dbce4073fef9f281fbfb4dd upstream.
    
    Since a virtual mixer has no backing registers
    to decide which path to connect,
    it will try to match with initial state.
    This is to ensure that the default mixer choice will be
    correctly powered up during initialization.
    Invert flag is used to select initial state of the virtual switch.
    Since actual hardware can't be disconnected by virtual switch,
    connected is better choice as initial state in many cases.
    
    Signed-off-by: Gyeongtaek Lee <gt82.lee@samsung.com>
    Link: https://lore.kernel.org/r/01a301d60731$b724ea10$256ebe30$@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfe67beb9ef1c50e1fddc309aaec7c4c49dcfe75
Author: 이경택 <gt82.lee@samsung.com>
Date:   Mon Mar 30 16:35:59 2020 +0900

    ASoC: fix regwmask
    
    commit 0ab070917afdc93670c2d0ea02ab6defb6246a7c upstream.
    
    If regwshift is 32 and the selected architecture compiles '<<' operator
    for signed int literal into rotating shift, '1<<regwshift' became 1 and
    it makes regwmask to 0x0.
    The literal is set to unsigned long to get intended regwmask.
    
    Signed-off-by: Gyeongtaek Lee <gt82.lee@samsung.com>
    Link: https://lore.kernel.org/r/001001d60665$db7af3e0$9270dba0$@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a77146ab15518e6090a4e4b5a64e9a1436e42cf
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Apr 1 21:04:23 2020 -0700

    slub: improve bit diffusion for freelist ptr obfuscation
    
    commit 1ad53d9fa3f6168ebcf48a50e08b170432da2257 upstream.
    
    Under CONFIG_SLAB_FREELIST_HARDENED=y, the obfuscation was relatively weak
    in that the ptr and ptr address were usually so close that the first XOR
    would result in an almost entirely 0-byte value[1], leaving most of the
    "secret" number ultimately being stored after the third XOR.  A single
    blind memory content exposure of the freelist was generally sufficient to
    learn the secret.
    
    Add a swab() call to mix bits a little more.  This is a cheap way (1
    cycle) to make attacks need more than a single exposure to learn the
    secret (or to know _where_ the exposure is in memory).
    
    kmalloc-32 freelist walk, before:
    
    ptr              ptr_addr            stored value      secret
    ffff90c22e019020@ffff90c22e019000 is 86528eb656b3b5bd (86528eb656b3b59d)
    ffff90c22e019040@ffff90c22e019020 is 86528eb656b3b5fd (86528eb656b3b59d)
    ffff90c22e019060@ffff90c22e019040 is 86528eb656b3b5bd (86528eb656b3b59d)
    ffff90c22e019080@ffff90c22e019060 is 86528eb656b3b57d (86528eb656b3b59d)
    ffff90c22e0190a0@ffff90c22e019080 is 86528eb656b3b5bd (86528eb656b3b59d)
    ...
    
    after:
    
    ptr              ptr_addr            stored value      secret
    ffff9eed6e019020@ffff9eed6e019000 is 793d1135d52cda42 (86528eb656b3b59d)
    ffff9eed6e019040@ffff9eed6e019020 is 593d1135d52cda22 (86528eb656b3b59d)
    ffff9eed6e019060@ffff9eed6e019040 is 393d1135d52cda02 (86528eb656b3b59d)
    ffff9eed6e019080@ffff9eed6e019060 is 193d1135d52cdae2 (86528eb656b3b59d)
    ffff9eed6e0190a0@ffff9eed6e019080 is f93d1135d52cdac2 (86528eb656b3b59d)
    
    [1] https://blog.infosectcbr.com.au/2020/03/weaknesses-in-linux-kernel-heap.html
    
    Fixes: 2482ddec670f ("mm: add SLUB free list pointer obfuscation")
    Reported-by: Silvio Cesare <silvio.cesare@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/202003051623.AF4F8CB@keescook
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [kees: Backport to v4.19 which doesn't call kasan_reset_untag()]
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 809d05196ea3512931c31d62bca7ca26dbee2588
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Mar 26 11:26:18 2020 +0800

    misc: rtsx: set correct pcr_ops for rts522A
    
    [ Upstream commit 10cea23b6aae15e8324f4101d785687f2c514fe5 ]
    
    rts522a should use rts522a_pcr_ops, which is
    diffrent with rts5227 in phy/hw init setting.
    
    Fixes: ce6a5acc9387 ("mfd: rtsx: Add support for rts522A")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200326032618.20472-1-yuehaibing@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eb9d5bc7065b263edb2afee53c5d6cdf2487164
Author: Yury Norov <yury.norov@gmail.com>
Date:   Thu Jan 30 22:16:40 2020 -0800

    uapi: rename ext2_swab() to swab() and share globally in swab.h
    
    [ Upstream commit d5767057c9a76a29f073dad66b7fa12a90e8c748 ]
    
    ext2_swab() is defined locally in lib/find_bit.c However it is not
    specific to ext2, neither to bitmaps.
    
    There are many potential users of it, so rename it to just swab() and
    move to include/uapi/linux/swab.h
    
    ABI guarantees that size of unsigned long corresponds to BITS_PER_LONG,
    therefore drop unneeded cast.
    
    Link: http://lkml.kernel.org/r/20200103202846.21616-1-yury.norov@gmail.com
    Signed-off-by: Yury Norov <yury.norov@gmail.com>
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Joe Perches <joe@perches.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ee871239dbc8a25e0379c94894807d09d8db3fd
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Mar 13 17:17:08 2020 -0400

    btrfs: track reloc roots based on their commit root bytenr
    
    [ Upstream commit ea287ab157c2816bf12aad4cece41372f9d146b4 ]
    
    We always search the commit root of the extent tree for looking up back
    references, however we track the reloc roots based on their current
    bytenr.
    
    This is wrong, if we commit the transaction between relocating tree
    blocks we could end up in this code in build_backref_tree
    
      if (key.objectid == key.offset) {
              /*
               * Only root blocks of reloc trees use backref
               * pointing to itself.
               */
              root = find_reloc_root(rc, cur->bytenr);
              ASSERT(root);
              cur->root = root;
              break;
      }
    
    find_reloc_root() is looking based on the bytenr we had in the commit
    root, but if we've COWed this reloc root we will not find that bytenr,
    and we will trip over the ASSERT(root).
    
    Fix this by using the commit_root->start bytenr for indexing the commit
    root.  Then we change the __update_reloc_root() caller to be used when
    we switch the commit root for the reloc root during commit.
    
    This fixes the panic I was seeing when we started throttling relocation
    for delayed refs.
    
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c77f5f03518bf1794e7b8e6814fb43e4f367c871
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Mar 4 11:18:30 2020 -0500

    btrfs: remove a BUG_ON() from merge_reloc_roots()
    
    [ Upstream commit 7b7b74315b24dc064bc1c683659061c3d48f8668 ]
    
    This was pretty subtle, we default to reloc roots having 0 root refs, so
    if we crash in the middle of the relocation they can just be deleted.
    If we successfully complete the relocation operations we'll set our root
    refs to 1 in prepare_to_merge() and then go on to merge_reloc_roots().
    
    At prepare_to_merge() time if any of the reloc roots have a 0 reference
    still, we will remove that reloc root from our reloc root rb tree, and
    then clean it up later.
    
    However this only happens if we successfully start a transaction.  If
    we've aborted previously we will skip this step completely, and only
    have reloc roots with a reference count of 0, but were never properly
    removed from the reloc control's rb tree.
    
    This isn't a problem per-se, our references are held by the list the
    reloc roots are on, and by the original root the reloc root belongs to.
    If we end up in this situation all the reloc roots will be added to the
    dirty_reloc_list, and then properly dropped at that point.  The reloc
    control will be free'd and the rb tree is no longer used.
    
    There were two options when fixing this, one was to remove the BUG_ON(),
    the other was to make prepare_to_merge() handle the case where we
    couldn't start a trans handle.
    
    IMO this is the cleaner solution.  I started with handling the error in
    prepare_to_merge(), but it turned out super ugly.  And in the end this
    BUG_ON() simply doesn't matter, the cleanup was happening properly, we
    were just panicing because this BUG_ON() only matters in the success
    case.  So I've opted to just remove it and add a comment where it was.
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f83b75ef20ac868046f90a7006b44bfea671a7c3
Author: Zhiqiang Liu <liuzhiqiang26@huawei.com>
Date:   Thu Mar 19 19:18:13 2020 +0800

    block, bfq: fix use-after-free in bfq_idle_slice_timer_body
    
    [ Upstream commit 2f95fa5c955d0a9987ffdc3a095e2f4e62c5f2a9 ]
    
    In bfq_idle_slice_timer func, bfqq = bfqd->in_service_queue is
    not in bfqd-lock critical section. The bfqq, which is not
    equal to NULL in bfq_idle_slice_timer, may be freed after passing
    to bfq_idle_slice_timer_body. So we will access the freed memory.
    
    In addition, considering the bfqq may be in race, we should
    firstly check whether bfqq is in service before doing something
    on it in bfq_idle_slice_timer_body func. If the bfqq in race is
    not in service, it means the bfqq has been expired through
    __bfq_bfqq_expire func, and wait_request flags has been cleared in
    __bfq_bfqd_reset_in_service func. So we do not need to re-clear the
    wait_request of bfqq which is not in service.
    
    KASAN log is given as follows:
    [13058.354613] ==================================================================
    [13058.354640] BUG: KASAN: use-after-free in bfq_idle_slice_timer+0xac/0x290
    [13058.354644] Read of size 8 at addr ffffa02cf3e63f78 by task fork13/19767
    [13058.354646]
    [13058.354655] CPU: 96 PID: 19767 Comm: fork13
    [13058.354661] Call trace:
    [13058.354667]  dump_backtrace+0x0/0x310
    [13058.354672]  show_stack+0x28/0x38
    [13058.354681]  dump_stack+0xd8/0x108
    [13058.354687]  print_address_description+0x68/0x2d0
    [13058.354690]  kasan_report+0x124/0x2e0
    [13058.354697]  __asan_load8+0x88/0xb0
    [13058.354702]  bfq_idle_slice_timer+0xac/0x290
    [13058.354707]  __hrtimer_run_queues+0x298/0x8b8
    [13058.354710]  hrtimer_interrupt+0x1b8/0x678
    [13058.354716]  arch_timer_handler_phys+0x4c/0x78
    [13058.354722]  handle_percpu_devid_irq+0xf0/0x558
    [13058.354731]  generic_handle_irq+0x50/0x70
    [13058.354735]  __handle_domain_irq+0x94/0x110
    [13058.354739]  gic_handle_irq+0x8c/0x1b0
    [13058.354742]  el1_irq+0xb8/0x140
    [13058.354748]  do_wp_page+0x260/0xe28
    [13058.354752]  __handle_mm_fault+0x8ec/0x9b0
    [13058.354756]  handle_mm_fault+0x280/0x460
    [13058.354762]  do_page_fault+0x3ec/0x890
    [13058.354765]  do_mem_abort+0xc0/0x1b0
    [13058.354768]  el0_da+0x24/0x28
    [13058.354770]
    [13058.354773] Allocated by task 19731:
    [13058.354780]  kasan_kmalloc+0xe0/0x190
    [13058.354784]  kasan_slab_alloc+0x14/0x20
    [13058.354788]  kmem_cache_alloc_node+0x130/0x440
    [13058.354793]  bfq_get_queue+0x138/0x858
    [13058.354797]  bfq_get_bfqq_handle_split+0xd4/0x328
    [13058.354801]  bfq_init_rq+0x1f4/0x1180
    [13058.354806]  bfq_insert_requests+0x264/0x1c98
    [13058.354811]  blk_mq_sched_insert_requests+0x1c4/0x488
    [13058.354818]  blk_mq_flush_plug_list+0x2d4/0x6e0
    [13058.354826]  blk_flush_plug_list+0x230/0x548
    [13058.354830]  blk_finish_plug+0x60/0x80
    [13058.354838]  read_pages+0xec/0x2c0
    [13058.354842]  __do_page_cache_readahead+0x374/0x438
    [13058.354846]  ondemand_readahead+0x24c/0x6b0
    [13058.354851]  page_cache_sync_readahead+0x17c/0x2f8
    [13058.354858]  generic_file_buffered_read+0x588/0xc58
    [13058.354862]  generic_file_read_iter+0x1b4/0x278
    [13058.354965]  ext4_file_read_iter+0xa8/0x1d8 [ext4]
    [13058.354972]  __vfs_read+0x238/0x320
    [13058.354976]  vfs_read+0xbc/0x1c0
    [13058.354980]  ksys_read+0xdc/0x1b8
    [13058.354984]  __arm64_sys_read+0x50/0x60
    [13058.354990]  el0_svc_common+0xb4/0x1d8
    [13058.354994]  el0_svc_handler+0x50/0xa8
    [13058.354998]  el0_svc+0x8/0xc
    [13058.354999]
    [13058.355001] Freed by task 19731:
    [13058.355007]  __kasan_slab_free+0x120/0x228
    [13058.355010]  kasan_slab_free+0x10/0x18
    [13058.355014]  kmem_cache_free+0x288/0x3f0
    [13058.355018]  bfq_put_queue+0x134/0x208
    [13058.355022]  bfq_exit_icq_bfqq+0x164/0x348
    [13058.355026]  bfq_exit_icq+0x28/0x40
    [13058.355030]  ioc_exit_icq+0xa0/0x150
    [13058.355035]  put_io_context_active+0x250/0x438
    [13058.355038]  exit_io_context+0xd0/0x138
    [13058.355045]  do_exit+0x734/0xc58
    [13058.355050]  do_group_exit+0x78/0x220
    [13058.355054]  __wake_up_parent+0x0/0x50
    [13058.355058]  el0_svc_common+0xb4/0x1d8
    [13058.355062]  el0_svc_handler+0x50/0xa8
    [13058.355066]  el0_svc+0x8/0xc
    [13058.355067]
    [13058.355071] The buggy address belongs to the object at ffffa02cf3e63e70#012 which belongs to the cache bfq_queue of size 464
    [13058.355075] The buggy address is located 264 bytes inside of#012 464-byte region [ffffa02cf3e63e70, ffffa02cf3e64040)
    [13058.355077] The buggy address belongs to the page:
    [13058.355083] page:ffff7e80b3cf9800 count:1 mapcount:0 mapping:ffff802db5c90780 index:0xffffa02cf3e606f0 compound_mapcount: 0
    [13058.366175] flags: 0x2ffffe0000008100(slab|head)
    [13058.370781] raw: 2ffffe0000008100 ffff7e80b53b1408 ffffa02d730c1c90 ffff802db5c90780
    [13058.370787] raw: ffffa02cf3e606f0 0000000000370023 00000001ffffffff 0000000000000000
    [13058.370789] page dumped because: kasan: bad access detected
    [13058.370791]
    [13058.370792] Memory state around the buggy address:
    [13058.370797]  ffffa02cf3e63e00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fb fb
    [13058.370801]  ffffa02cf3e63e80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [13058.370805] >ffffa02cf3e63f00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [13058.370808]                                                                 ^
    [13058.370811]  ffffa02cf3e63f80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [13058.370815]  ffffa02cf3e64000: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [13058.370817] ==================================================================
    [13058.370820] Disabling lock debugging due to kernel taint
    
    Here, we directly pass the bfqd to bfq_idle_slice_timer_body func.
    --
    V2->V3: rewrite the comment as suggested by Paolo Valente
    V1->V2: add one comment, and add Fixes and Reported-by tag.
    
    Fixes: aee69d78d ("block, bfq: introduce the BFQ-v0 I/O scheduler as an extra scheduler")
    Acked-by: Paolo Valente <paolo.valente@linaro.org>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Signed-off-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Signed-off-by: Feilong Lin <linfeilong@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 105d88c02faabd99472211a00d62c4a6d6d4a776
Author: Boqun Feng <boqun.feng@gmail.com>
Date:   Thu Mar 12 23:12:55 2020 +0800

    locking/lockdep: Avoid recursion in lockdep_count_{for,back}ward_deps()
    
    [ Upstream commit 25016bd7f4caf5fc983bbab7403d08e64cba3004 ]
    
    Qian Cai reported a bug when PROVE_RCU_LIST=y, and read on /proc/lockdep
    triggered a warning:
    
      [ ] DEBUG_LOCKS_WARN_ON(current->hardirqs_enabled)
      ...
      [ ] Call Trace:
      [ ]  lock_is_held_type+0x5d/0x150
      [ ]  ? rcu_lockdep_current_cpu_online+0x64/0x80
      [ ]  rcu_read_lock_any_held+0xac/0x100
      [ ]  ? rcu_read_lock_held+0xc0/0xc0
      [ ]  ? __slab_free+0x421/0x540
      [ ]  ? kasan_kmalloc+0x9/0x10
      [ ]  ? __kmalloc_node+0x1d7/0x320
      [ ]  ? kvmalloc_node+0x6f/0x80
      [ ]  __bfs+0x28a/0x3c0
      [ ]  ? class_equal+0x30/0x30
      [ ]  lockdep_count_forward_deps+0x11a/0x1a0
    
    The warning got triggered because lockdep_count_forward_deps() call
    __bfs() without current->lockdep_recursion being set, as a result
    a lockdep internal function (__bfs()) is checked by lockdep, which is
    unexpected, and the inconsistency between the irq-off state and the
    state traced by lockdep caused the warning.
    
    Apart from this warning, lockdep internal functions like __bfs() should
    always be protected by current->lockdep_recursion to avoid potential
    deadlocks and data inconsistency, therefore add the
    current->lockdep_recursion on-and-off section to protect __bfs() in both
    lockdep_count_forward_deps() and lockdep_count_backward_deps()
    
    Reported-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200312151258.128036-1-boqun.feng@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 117970c7634aafb18103435fcc9ccae705e12727
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Mar 10 18:49:21 2020 +0000

    irqchip/gic-v4: Provide irq_retrigger to avoid circular locking dependency
    
    [ Upstream commit 7809f7011c3bce650e502a98afeb05961470d865 ]
    
    On a very heavily loaded D05 with GICv4, I managed to trigger the
    following lockdep splat:
    
    [ 6022.598864] ======================================================
    [ 6022.605031] WARNING: possible circular locking dependency detected
    [ 6022.611200] 5.6.0-rc4-00026-geee7c7b0f498 #680 Tainted: G            E
    [ 6022.618061] ------------------------------------------------------
    [ 6022.624227] qemu-system-aar/7569 is trying to acquire lock:
    [ 6022.629789] ffff042f97606808 (&p->pi_lock){-.-.}, at: try_to_wake_up+0x54/0x7a0
    [ 6022.637102]
    [ 6022.637102] but task is already holding lock:
    [ 6022.642921] ffff002fae424cf0 (&irq_desc_lock_class){-.-.}, at: __irq_get_desc_lock+0x5c/0x98
    [ 6022.651350]
    [ 6022.651350] which lock already depends on the new lock.
    [ 6022.651350]
    [ 6022.659512]
    [ 6022.659512] the existing dependency chain (in reverse order) is:
    [ 6022.666980]
    [ 6022.666980] -> #2 (&irq_desc_lock_class){-.-.}:
    [ 6022.672983]        _raw_spin_lock_irqsave+0x50/0x78
    [ 6022.677848]        __irq_get_desc_lock+0x5c/0x98
    [ 6022.682453]        irq_set_vcpu_affinity+0x40/0xc0
    [ 6022.687236]        its_make_vpe_non_resident+0x6c/0xb8
    [ 6022.692364]        vgic_v4_put+0x54/0x70
    [ 6022.696273]        vgic_v3_put+0x20/0xd8
    [ 6022.700183]        kvm_vgic_put+0x30/0x48
    [ 6022.704182]        kvm_arch_vcpu_put+0x34/0x50
    [ 6022.708614]        kvm_sched_out+0x34/0x50
    [ 6022.712700]        __schedule+0x4bc/0x7f8
    [ 6022.716697]        schedule+0x50/0xd8
    [ 6022.720347]        kvm_arch_vcpu_ioctl_run+0x5f0/0x978
    [ 6022.725473]        kvm_vcpu_ioctl+0x3d4/0x8f8
    [ 6022.729820]        ksys_ioctl+0x90/0xd0
    [ 6022.733642]        __arm64_sys_ioctl+0x24/0x30
    [ 6022.738074]        el0_svc_common.constprop.3+0xa8/0x1e8
    [ 6022.743373]        do_el0_svc+0x28/0x88
    [ 6022.747198]        el0_svc+0x14/0x40
    [ 6022.750761]        el0_sync_handler+0x124/0x2b8
    [ 6022.755278]        el0_sync+0x140/0x180
    [ 6022.759100]
    [ 6022.759100] -> #1 (&rq->lock){-.-.}:
    [ 6022.764143]        _raw_spin_lock+0x38/0x50
    [ 6022.768314]        task_fork_fair+0x40/0x128
    [ 6022.772572]        sched_fork+0xe0/0x210
    [ 6022.776484]        copy_process+0x8c4/0x18d8
    [ 6022.780742]        _do_fork+0x88/0x6d8
    [ 6022.784478]        kernel_thread+0x64/0x88
    [ 6022.788563]        rest_init+0x30/0x270
    [ 6022.792390]        arch_call_rest_init+0x14/0x1c
    [ 6022.796995]        start_kernel+0x498/0x4c4
    [ 6022.801164]
    [ 6022.801164] -> #0 (&p->pi_lock){-.-.}:
    [ 6022.806382]        __lock_acquire+0xdd8/0x15c8
    [ 6022.810813]        lock_acquire+0xd0/0x218
    [ 6022.814896]        _raw_spin_lock_irqsave+0x50/0x78
    [ 6022.819761]        try_to_wake_up+0x54/0x7a0
    [ 6022.824018]        wake_up_process+0x1c/0x28
    [ 6022.828276]        wakeup_softirqd+0x38/0x40
    [ 6022.832533]        __tasklet_schedule_common+0xc4/0xf0
    [ 6022.837658]        __tasklet_schedule+0x24/0x30
    [ 6022.842176]        check_irq_resend+0xc8/0x158
    [ 6022.846609]        irq_startup+0x74/0x128
    [ 6022.850606]        __enable_irq+0x6c/0x78
    [ 6022.854602]        enable_irq+0x54/0xa0
    [ 6022.858431]        its_make_vpe_non_resident+0xa4/0xb8
    [ 6022.863557]        vgic_v4_put+0x54/0x70
    [ 6022.867469]        kvm_arch_vcpu_blocking+0x28/0x38
    [ 6022.872336]        kvm_vcpu_block+0x48/0x490
    [ 6022.876594]        kvm_handle_wfx+0x18c/0x310
    [ 6022.880938]        handle_exit+0x138/0x198
    [ 6022.885022]        kvm_arch_vcpu_ioctl_run+0x4d4/0x978
    [ 6022.890148]        kvm_vcpu_ioctl+0x3d4/0x8f8
    [ 6022.894494]        ksys_ioctl+0x90/0xd0
    [ 6022.898317]        __arm64_sys_ioctl+0x24/0x30
    [ 6022.902748]        el0_svc_common.constprop.3+0xa8/0x1e8
    [ 6022.908046]        do_el0_svc+0x28/0x88
    [ 6022.911871]        el0_svc+0x14/0x40
    [ 6022.915434]        el0_sync_handler+0x124/0x2b8
    [ 6022.919951]        el0_sync+0x140/0x180
    [ 6022.923773]
    [ 6022.923773] other info that might help us debug this:
    [ 6022.923773]
    [ 6022.931762] Chain exists of:
    [ 6022.931762]   &p->pi_lock --> &rq->lock --> &irq_desc_lock_class
    [ 6022.931762]
    [ 6022.942101]  Possible unsafe locking scenario:
    [ 6022.942101]
    [ 6022.948007]        CPU0                    CPU1
    [ 6022.952523]        ----                    ----
    [ 6022.957039]   lock(&irq_desc_lock_class);
    [ 6022.961036]                                lock(&rq->lock);
    [ 6022.966595]                                lock(&irq_desc_lock_class);
    [ 6022.973109]   lock(&p->pi_lock);
    [ 6022.976324]
    [ 6022.976324]  *** DEADLOCK ***
    
    This is happening because we have a pending doorbell that requires
    retrigger. As SW retriggering is done in a tasklet, we trigger the
    circular dependency above.
    
    The easy cop-out is to provide a retrigger callback that doesn't
    require acquiring any extra lock.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200310184921.23552-5-maz@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a752b857872fb6f9281564e94898aad13a403d51
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Fri Feb 21 10:15:31 2020 +0100

    usb: dwc3: core: add support for disabling SS instances in park mode
    
    [ Upstream commit 7ba6b09fda5e0cb741ee56f3264665e0edc64822 ]
    
    In certain circumstances, the XHCI SuperSpeed instance in park mode
    can fail to recover, thus on Amlogic G12A/G12B/SM1 SoCs when there is high
    load on the single XHCI SuperSpeed instance, the controller can crash like:
     xhci-hcd xhci-hcd.0.auto: xHCI host not responding to stop endpoint command.
     xhci-hcd xhci-hcd.0.auto: Host halt failed, -110
     xhci-hcd xhci-hcd.0.auto: xHCI host controller not responding, assume dead
     xhci-hcd xhci-hcd.0.auto: xHCI host not responding to stop endpoint command.
     hub 2-1.1:1.0: hub_ext_port_status failed (err = -22)
     xhci-hcd xhci-hcd.0.auto: HC died; cleaning up
     usb 2-1.1-port1: cannot reset (err = -22)
    
    Setting the PARKMODE_DISABLE_SS bit in the DWC3_USB3_GUCTL1 mitigates
    the issue. The bit is described as :
    "When this bit is set to '1' all SS bus instances in park mode are disabled"
    
    Synopsys explains:
    The GUCTL1.PARKMODE_DISABLE_SS is only available in
    dwc_usb3 controller running in host mode.
    This should not be set for other IPs.
    This can be disabled by default based on IP, but I recommend to have a
    property to enable this feature for devices that need this.
    
    CC: Dongjin Kim <tobetter@gmail.com>
    Cc: Jianxin Pan <jianxin.pan@amlogic.com>
    Cc: Thinh Nguyen <thinhn@synopsys.com>
    Cc: Jun Li <lijun.kernel@gmail.com>
    Reported-by: Tim <elatllat@gmail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9e73ab4434e0f2052a0245fdfa3c5c06df7b95a
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Mar 11 16:07:50 2020 +0530

    block: Fix use-after-free issue accessing struct io_cq
    
    [ Upstream commit 30a2da7b7e225ef6c87a660419ea04d3cef3f6a7 ]
    
    There is a potential race between ioc_release_fn() and
    ioc_clear_queue() as shown below, due to which below kernel
    crash is observed. It also can result into use-after-free
    issue.
    
    context#1:                              context#2:
    ioc_release_fn()                        __ioc_clear_queue() gets the same icq
    ->spin_lock(&ioc->lock);                ->spin_lock(&ioc->lock);
    ->ioc_destroy_icq(icq);
      ->list_del_init(&icq->q_node);
      ->call_rcu(&icq->__rcu_head,
            icq_free_icq_rcu);
    ->spin_unlock(&ioc->lock);
                                            ->ioc_destroy_icq(icq);
                                              ->hlist_del_init(&icq->ioc_node);
                                              This results into below crash as this memory
                                              is now used by icq->__rcu_head in context#1.
                                              There is a chance that icq could be free'd
                                              as well.
    
    22150.386550:   <6> Unable to handle kernel write to read-only memory
    at virtual address ffffffaa8d31ca50
    ...
    Call trace:
    22150.607350:   <2>  ioc_destroy_icq+0x44/0x110
    22150.611202:   <2>  ioc_clear_queue+0xac/0x148
    22150.615056:   <2>  blk_cleanup_queue+0x11c/0x1a0
    22150.619174:   <2>  __scsi_remove_device+0xdc/0x128
    22150.623465:   <2>  scsi_forget_host+0x2c/0x78
    22150.627315:   <2>  scsi_remove_host+0x7c/0x2a0
    22150.631257:   <2>  usb_stor_disconnect+0x74/0xc8
    22150.635371:   <2>  usb_unbind_interface+0xc8/0x278
    22150.639665:   <2>  device_release_driver_internal+0x198/0x250
    22150.644897:   <2>  device_release_driver+0x24/0x30
    22150.649176:   <2>  bus_remove_device+0xec/0x140
    22150.653204:   <2>  device_del+0x270/0x460
    22150.656712:   <2>  usb_disable_device+0x120/0x390
    22150.660918:   <2>  usb_disconnect+0xf4/0x2e0
    22150.664684:   <2>  hub_event+0xd70/0x17e8
    22150.668197:   <2>  process_one_work+0x210/0x480
    22150.672222:   <2>  worker_thread+0x32c/0x4c8
    
    Fix this by adding a new ICQ_DESTROYED flag in ioc_destroy_icq() to
    indicate this icq is once marked as destroyed. Also, ensure
    __ioc_clear_queue() is accessing icq within rcu_read_lock/unlock so
    that icq doesn't get free'd up while it is still using it.
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Co-developed-by: Pradeep P V K <ppvk@codeaurora.org>
    Signed-off-by: Pradeep P V K <ppvk@codeaurora.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8efdd0c43f8cbb61d8afdb8ecad5b9be33cc451
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Mar 6 18:47:20 2020 +0100

    genirq/irqdomain: Check pointer in irq_domain_alloc_irqs_hierarchy()
    
    [ Upstream commit 87f2d1c662fa1761359fdf558246f97e484d177a ]
    
    irq_domain_alloc_irqs_hierarchy() has 3 call sites in the compilation unit
    but only one of them checks for the pointer which is being dereferenced
    inside the called function. Move the check into the function. This allows
    for catching the error instead of the following crash:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000000
    PC is at 0x0
    LR is at gpiochip_hierarchy_irq_domain_alloc+0x11f/0x140
    ...
    [<c06c23ff>] (gpiochip_hierarchy_irq_domain_alloc)
    [<c0462a89>] (__irq_domain_alloc_irqs)
    [<c0462dad>] (irq_create_fwspec_mapping)
    [<c06c2251>] (gpiochip_to_irq)
    [<c06c1c9b>] (gpiod_to_irq)
    [<bf973073>] (gpio_irqs_init [gpio_irqs])
    [<bf974048>] (gpio_irqs_exit+0xecc/0xe84 [gpio_irqs])
    Code: bad PC value
    
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200306174720.82604-1-alexander.sverdlin@nokia.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cfce5a0db3822adf577aa23fa520fdbfe2acd38
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sun Mar 8 09:08:51 2020 +0100

    efi/x86: Ignore the memory attributes table on i386
    
    [ Upstream commit dd09fad9d2caad2325a39b766ce9e79cfc690184 ]
    
    Commit:
    
      3a6b6c6fb23667fa ("efi: Make EFI_MEMORY_ATTRIBUTES_TABLE initialization common across all architectures")
    
    moved the call to efi_memattr_init() from ARM specific to the generic
    EFI init code, in order to be able to apply the restricted permissions
    described in that table on x86 as well.
    
    We never enabled this feature fully on i386, and so mapping and
    reserving this table is pointless. However, due to the early call to
    memblock_reserve(), the memory bookkeeping gets confused to the point
    where it produces the splat below when we try to map the memory later
    on:
    
      ------------[ cut here ]------------
      ioremap on RAM at 0x3f251000 - 0x3fa1afff
      WARNING: CPU: 0 PID: 0 at arch/x86/mm/ioremap.c:166 __ioremap_caller ...
      Modules linked in:
      CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.20.0 #48
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 0.0.0 02/06/2015
      EIP: __ioremap_caller.constprop.0+0x249/0x260
      Code: 90 0f b7 05 4e 38 40 de 09 45 e0 e9 09 ff ff ff 90 8d 45 ec c6 05 ...
      EAX: 00000029 EBX: 00000000 ECX: de59c228 EDX: 00000001
      ESI: 3f250fff EDI: 00000000 EBP: de3edf20 ESP: de3edee0
      DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068 EFLAGS: 00200296
      CR0: 80050033 CR2: ffd17000 CR3: 1e58c000 CR4: 00040690
      Call Trace:
       ioremap_cache+0xd/0x10
       ? old_map_region+0x72/0x9d
       old_map_region+0x72/0x9d
       efi_map_region+0x8/0xa
       efi_enter_virtual_mode+0x260/0x43b
       start_kernel+0x329/0x3aa
       i386_start_kernel+0xa7/0xab
       startup_32_smp+0x164/0x168
      ---[ end trace e15ccf6b9f356833 ]---
    
    Let's work around this by disregarding the memory attributes table
    altogether on i386, which does not result in a loss of functionality
    or protection, given that we never consumed the contents.
    
    Fixes: 3a6b6c6fb23667fa ("efi: Make EFI_MEMORY_ATTRIBUTES_TABLE ... ")
    Tested-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20200304165917.5893-1-ardb@kernel.org
    Link: https://lore.kernel.org/r/20200308080859.21568-21-ardb@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf849b3523ae65b55db7558422bd67ea330579ff
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Sun Mar 8 09:08:44 2020 +0100

    x86/boot: Use unsigned comparison for addresses
    
    [ Upstream commit 81a34892c2c7c809f9c4e22c5ac936ae673fb9a2 ]
    
    The load address is compared with LOAD_PHYSICAL_ADDR using a signed
    comparison currently (using jge instruction).
    
    When loading a 64-bit kernel using the new efi32_pe_entry() point added by:
    
      97aa276579b2 ("efi/x86: Add true mixed mode entry point into .compat section")
    
    using Qemu with -m 3072, the firmware actually loads us above 2Gb,
    resulting in a very early crash.
    
    Use the JAE instruction to perform a unsigned comparison instead, as physical
    addresses should be considered unsigned.
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20200301230436.2246909-6-nivedita@alum.mit.edu
    Link: https://lore.kernel.org/r/20200308080859.21568-14-ardb@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 790829dc62decb248e0304a90d0ed959ebf8bc2e
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Nov 13 14:08:45 2019 -0600

    gfs2: Don't demote a glock until its revokes are written
    
    [ Upstream commit df5db5f9ee112e76b5202fbc331f990a0fc316d6 ]
    
    Before this patch, run_queue would demote glocks based on whether
    there are any more holders. But if the glock has pending revokes that
    haven't been written to the media, giving up the glock might end in
    file system corruption if the revokes never get written due to
    io errors, node crashes and fences, etc. In that case, another node
    will replay the metadata blocks associated with the glock, but
    because the revoke was never written, it could replay that block
    even though the glock had since been granted to another node who
    might have made changes.
    
    This patch changes the logic in run_queue so that it never demotes
    a glock until its count of pending revokes reaches zero.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Reviewed-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 401aacd5191dbc7036f3569467399f78c3686e13
Author: John Garry <john.garry@huawei.com>
Date:   Fri Feb 28 19:33:35 2020 +0800

    libata: Remove extra scsi_host_put() in ata_scsi_add_hosts()
    
    [ Upstream commit 1d72f7aec3595249dbb83291ccac041a2d676c57 ]
    
    If the call to scsi_add_host_with_dma() in ata_scsi_add_hosts() fails,
    then we may get use-after-free KASAN warns:
    
    ==================================================================
    BUG: KASAN: use-after-free in kobject_put+0x24/0x180
    Read of size 1 at addr ffff0026b8c80364 by task swapper/0/1
    CPU: 1 PID: 1 Comm: swapper/0 Tainted: G        W         5.6.0-rc3-00004-g5a71b206ea82-dirty #1765
    Hardware name: Huawei TaiShan 200 (Model 2280)/BC82AMDD, BIOS 2280-V2 CS V3.B160.01 02/24/2020
    Call trace:
    dump_backtrace+0x0/0x298
    show_stack+0x14/0x20
    dump_stack+0x118/0x190
    print_address_description.isra.9+0x6c/0x3b8
    __kasan_report+0x134/0x23c
    kasan_report+0xc/0x18
    __asan_load1+0x5c/0x68
    kobject_put+0x24/0x180
    put_device+0x10/0x20
    scsi_host_put+0x10/0x18
    ata_devres_release+0x74/0xb0
    release_nodes+0x2d0/0x470
    devres_release_all+0x50/0x78
    really_probe+0x2d4/0x560
    driver_probe_device+0x7c/0x148
    device_driver_attach+0x94/0xa0
    __driver_attach+0xa8/0x110
    bus_for_each_dev+0xe8/0x158
    driver_attach+0x30/0x40
    bus_add_driver+0x220/0x2e0
    driver_register+0xbc/0x1d0
    __pci_register_driver+0xbc/0xd0
    ahci_pci_driver_init+0x20/0x28
    do_one_initcall+0xf0/0x608
    kernel_init_freeable+0x31c/0x384
    kernel_init+0x10/0x118
    ret_from_fork+0x10/0x18
    
    Allocated by task 5:
    save_stack+0x28/0xc8
    __kasan_kmalloc.isra.8+0xbc/0xd8
    kasan_kmalloc+0xc/0x18
    __kmalloc+0x1a8/0x280
    scsi_host_alloc+0x44/0x678
    ata_scsi_add_hosts+0x74/0x268
    ata_host_register+0x228/0x488
    ahci_host_activate+0x1c4/0x2a8
    ahci_init_one+0xd18/0x1298
    local_pci_probe+0x74/0xf0
    work_for_cpu_fn+0x2c/0x48
    process_one_work+0x488/0xc08
    worker_thread+0x330/0x5d0
    kthread+0x1c8/0x1d0
    ret_from_fork+0x10/0x18
    
    Freed by task 5:
    save_stack+0x28/0xc8
    __kasan_slab_free+0x118/0x180
    kasan_slab_free+0x10/0x18
    slab_free_freelist_hook+0xa4/0x1a0
    kfree+0xd4/0x3a0
    scsi_host_dev_release+0x100/0x148
    device_release+0x7c/0xe0
    kobject_put+0xb0/0x180
    put_device+0x10/0x20
    scsi_host_put+0x10/0x18
    ata_scsi_add_hosts+0x210/0x268
    ata_host_register+0x228/0x488
    ahci_host_activate+0x1c4/0x2a8
    ahci_init_one+0xd18/0x1298
    local_pci_probe+0x74/0xf0
    work_for_cpu_fn+0x2c/0x48
    process_one_work+0x488/0xc08
    worker_thread+0x330/0x5d0
    kthread+0x1c8/0x1d0
    ret_from_fork+0x10/0x18
    
    There is also refcount issue, as well:
    WARNING: CPU: 1 PID: 1 at lib/refcount.c:28 refcount_warn_saturate+0xf8/0x170
    
    The issue is that we make an erroneous extra call to scsi_host_put()
    for that host:
    
    So in ahci_init_one()->ata_host_alloc_pinfo()->ata_host_alloc(), we setup
    a device release method - ata_devres_release() - which intends to release
    the SCSI hosts:
    
    static void ata_devres_release(struct device *gendev, void *res)
    {
            ...
            for (i = 0; i < host->n_ports; i++) {
                    struct ata_port *ap = host->ports[i];
    
                    if (!ap)
                            continue;
    
                    if (ap->scsi_host)
                            scsi_host_put(ap->scsi_host);
    
            }
            ...
    }
    
    However in the ata_scsi_add_hosts() error path, we also call
    scsi_host_put() for the SCSI hosts.
    
    Fix by removing the the scsi_host_put() calls in ata_scsi_add_hosts() and
    leave this to ata_devres_release().
    
    Fixes: f31871951b38 ("libata: separate out ata_host_alloc() and ata_host_register()")
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16a55efd94e6e36fc2cf347e22848d9895868118
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Sat Mar 21 12:25:45 2020 +0100

    PCI/switchtec: Fix init_completion race condition with poll_wait()
    
    [ Upstream commit efbdc769601f4d50018bf7ca50fc9f7c67392ece ]
    
    The call to init_completion() in mrpc_queue_cmd() can theoretically
    race with the call to poll_wait() in switchtec_dev_poll().
    
      poll()                        write()
        switchtec_dev_poll()          switchtec_dev_write()
          poll_wait(&s->comp.wait);      mrpc_queue_cmd()
                                           init_completion(&s->comp)
                                             init_waitqueue_head(&s->comp.wait)
    
    To my knowledge, no one has hit this bug.
    
    Fix this by using reinit_completion() instead of init_completion() in
    mrpc_queue_cmd().
    
    Fixes: 080b47def5e5 ("MicroSemi Switchtec management interface driver")
    
    Reported-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Link: https://lkml.kernel.org/r/20200313183608.2646-1-logang@deltatee.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d012deee1cb9501a899bdf0387dafcdcbe9dfbea
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Mar 12 15:35:51 2020 -0700

    selftests/x86/ptrace_syscall_32: Fix no-vDSO segfault
    
    [ Upstream commit 630b99ab60aa972052a4202a1ff96c7e45eb0054 ]
    
    If AT_SYSINFO is not present, don't try to call a NULL pointer.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/faaf688265a7e1a5b944d6f8bc0f6368158306d3.1584052409.git.luto@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 964a86d29150870d22b70f72c02a13d01cca909a
Author: Michael Wang <yun.wang@linux.alibaba.com>
Date:   Wed Mar 18 10:15:15 2020 +0800

    sched: Avoid scale real weight down to zero
    
    [ Upstream commit 26cf52229efc87e2effa9d788f9b33c40fb3358a ]
    
    During our testing, we found a case that shares no longer
    working correctly, the cgroup topology is like:
    
      /sys/fs/cgroup/cpu/A          (shares=102400)
      /sys/fs/cgroup/cpu/A/B        (shares=2)
      /sys/fs/cgroup/cpu/A/B/C      (shares=1024)
    
      /sys/fs/cgroup/cpu/D          (shares=1024)
      /sys/fs/cgroup/cpu/D/E        (shares=1024)
      /sys/fs/cgroup/cpu/D/E/F      (shares=1024)
    
    The same benchmark is running in group C & F, no other tasks are
    running, the benchmark is capable to consumed all the CPUs.
    
    We suppose the group C will win more CPU resources since it could
    enjoy all the shares of group A, but it's F who wins much more.
    
    The reason is because we have group B with shares as 2, since
    A->cfs_rq.load.weight == B->se.load.weight == B->shares/nr_cpus,
    so A->cfs_rq.load.weight become very small.
    
    And in calc_group_shares() we calculate shares as:
    
      load = max(scale_load_down(cfs_rq->load.weight), cfs_rq->avg.load_avg);
      shares = (tg_shares * load) / tg_weight;
    
    Since the 'cfs_rq->load.weight' is too small, the load become 0
    after scale down, although 'tg_shares' is 102400, shares of the se
    which stand for group A on root cfs_rq become 2.
    
    While the se of D on root cfs_rq is far more bigger than 2, so it
    wins the battle.
    
    Thus when scale_load_down() scale real weight down to 0, it's no
    longer telling the real story, the caller will have the wrong
    information and the calculation will be buggy.
    
    This patch add check in scale_load_down(), so the real weight will
    be >= MIN_SHARES after scale, after applied the group C wins as
    expected.
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Michael Wang <yun.wang@linux.alibaba.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lkml.kernel.org/r/38e8e212-59a1-64b2-b247-b6d0b52d8dc1@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 151996b56cbef447c17aa4c91ab1c88e9ce71ebc
Author: Sungbo Eo <mans0n@gorani.run>
Date:   Thu Mar 19 11:34:48 2020 +0900

    irqchip/versatile-fpga: Handle chained IRQs properly
    
    [ Upstream commit 486562da598c59e9f835b551d7cf19507de2d681 ]
    
    Enclose the chained handler with chained_irq_{enter,exit}(), so that the
    muxed interrupts get properly acked.
    
    This patch also fixes a reboot bug on OX820 SoC, where the jiffies timer
    interrupt is never acked. The kernel waits a clock tick forever in
    calibrate_delay_converge(), which leads to a boot hang.
    
    Fixes: c41b16f8c9d9 ("ARM: integrator/versatile: consolidate FPGA IRQ handling code")
    Signed-off-by: Sungbo Eo <mans0n@gorani.run>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200319023448.1479701-1-mans0n@gorani.run
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6695041218fd683b906afd20ca6ada7e3a7512f7
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Feb 28 17:51:48 2020 +0300

    block: keep bdi->io_pages in sync with max_sectors_kb for stacked devices
    
    [ Upstream commit e74d93e96d721c4297f2a900ad0191890d2fc2b0 ]
    
    Field bdi->io_pages added in commit 9491ae4aade6 ("mm: don't cap request
    size based on read-ahead setting") removes unneeded split of read requests.
    
    Stacked drivers do not call blk_queue_max_hw_sectors(). Instead they set
    limits of their devices by blk_set_stacking_limits() + disk_stack_limits().
    Field bio->io_pages stays zero until user set max_sectors_kb via sysfs.
    
    This patch updates io_pages after merging limits in disk_stack_limits().
    
    Commit c6d6e9b0f6b4 ("dm: do not allow readahead to limit IO size") fixed
    the same problem for device-mapper devices, this one fixes MD RAIDs.
    
    Fixes: 9491ae4aade6 ("mm: don't cap request size based on read-ahead setting")
    Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Reviewed-by: Bob Liu <bob.liu@oracle.com>
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7037828ef7e37b2f2d8b27128c64b57e32e3fc4c
Author: Thomas Hellstrom <thellstrom@vmware.com>
Date:   Wed Mar 4 12:45:26 2020 +0100

    x86: Don't let pgprot_modify() change the page encryption bit
    
    [ Upstream commit 6db73f17c5f155dbcfd5e48e621c706270b84df0 ]
    
    When SEV or SME is enabled and active, vm_get_page_prot() typically
    returns with the encryption bit set. This means that users of
    pgprot_modify(, vm_get_page_prot()) (mprotect_fixup(), do_mmap()) end up
    with a value of vma->vm_pg_prot that is not consistent with the intended
    protection of the PTEs.
    
    This is also important for fault handlers that rely on the VMA
    vm_page_prot to set the page protection. Fix this by not allowing
    pgprot_modify() to change the encryption bit, similar to how it's done
    for PAT bits.
    
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Link: https://lkml.kernel.org/r/20200304114527.3636-2-thomas_os@shipmail.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 063ec77ac61b1990796f70f05ee1df352bd8461b
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Wed Feb 12 23:23:20 2020 +0300

    null_blk: fix spurious IO errors after failed past-wp access
    
    [ Upstream commit ff77042296d0a54535ddf74412c5ae92cb4ec76a ]
    
    Steps to reproduce:
    
            BLKRESETZONE zone 0
    
            // force EIO
            pwrite(fd, buf, 4096, 4096);
    
            [issue more IO including zone ioctls]
    
    It will start failing randomly including IO to unrelated zones because of
    ->error "reuse". Trigger can be partition detection as well if test is not
    run immediately which is even more entertaining.
    
    The fix is of course to clear ->error where necessary.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Alexey Dobriyan (SK hynix) <adobriyan@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df92d602b7305702bb784f83db4c0ccb125a5a17
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Mar 9 21:26:22 2020 -0700

    null_blk: Handle null_add_dev() failures properly
    
    [ Upstream commit 9b03b713082a31a5b90e0a893c72aa620e255c26 ]
    
    If null_add_dev() fails then null_del_dev() is called with a NULL argument.
    Make null_del_dev() handle this scenario correctly. This patch fixes the
    following KASAN complaint:
    
    null-ptr-deref in null_del_dev+0x28/0x280 [null_blk]
    Read of size 8 at addr 0000000000000000 by task find/1062
    
    Call Trace:
     dump_stack+0xa5/0xe6
     __kasan_report.cold+0x65/0x99
     kasan_report+0x16/0x20
     __asan_load8+0x58/0x90
     null_del_dev+0x28/0x280 [null_blk]
     nullb_group_drop_item+0x7e/0xa0 [null_blk]
     client_drop_item+0x53/0x80 [configfs]
     configfs_rmdir+0x395/0x4e0 [configfs]
     vfs_rmdir+0xb6/0x220
     do_rmdir+0x238/0x2c0
     __x64_sys_unlinkat+0x75/0x90
     do_syscall_64+0x6f/0x2f0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Cc: Johannes Thumshirn <jth@kernel.org>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1200a6c59585b37c0fd7d180c41d856a427596c
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Mar 9 21:26:21 2020 -0700

    null_blk: Fix the null_add_dev() error path
    
    [ Upstream commit 2004bfdef945fe55196db6b9cdf321fbc75bb0de ]
    
    If null_add_dev() fails, clear dev->nullb.
    
    This patch fixes the following KASAN complaint:
    
    BUG: KASAN: use-after-free in nullb_device_submit_queues_store+0xcf/0x160 [null_blk]
    Read of size 8 at addr ffff88803280fc30 by task check/8409
    
    Call Trace:
     dump_stack+0xa5/0xe6
     print_address_description.constprop.0+0x26/0x260
     __kasan_report.cold+0x7b/0x99
     kasan_report+0x16/0x20
     __asan_load8+0x58/0x90
     nullb_device_submit_queues_store+0xcf/0x160 [null_blk]
     configfs_write_file+0x1c4/0x250 [configfs]
     __vfs_write+0x4c/0x90
     vfs_write+0x145/0x2c0
     ksys_write+0xd7/0x180
     __x64_sys_write+0x47/0x50
     do_syscall_64+0x6f/0x2f0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7ff370926317
    Code: 64 89 02 48 c7 c0 ff ff ff ff eb bb 0f 1f 80 00 00 00 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 48 89 54 24 18 48 89 74 24
    RSP: 002b:00007fff2dd2da48 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007ff370926317
    RDX: 0000000000000002 RSI: 0000559437ef23f0 RDI: 0000000000000001
    RBP: 0000559437ef23f0 R08: 000000000000000a R09: 0000000000000001
    R10: 0000559436703471 R11: 0000000000000246 R12: 0000000000000002
    R13: 00007ff370a006a0 R14: 00007ff370a014a0 R15: 00007ff370a008a0
    
    Allocated by task 8409:
     save_stack+0x23/0x90
     __kasan_kmalloc.constprop.0+0xcf/0xe0
     kasan_kmalloc+0xd/0x10
     kmem_cache_alloc_node_trace+0x129/0x4c0
     null_add_dev+0x24a/0xe90 [null_blk]
     nullb_device_power_store+0x1b6/0x270 [null_blk]
     configfs_write_file+0x1c4/0x250 [configfs]
     __vfs_write+0x4c/0x90
     vfs_write+0x145/0x2c0
     ksys_write+0xd7/0x180
     __x64_sys_write+0x47/0x50
     do_syscall_64+0x6f/0x2f0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 8409:
     save_stack+0x23/0x90
     __kasan_slab_free+0x112/0x160
     kasan_slab_free+0x12/0x20
     kfree+0xdf/0x250
     null_add_dev+0xaf3/0xe90 [null_blk]
     nullb_device_power_store+0x1b6/0x270 [null_blk]
     configfs_write_file+0x1c4/0x250 [configfs]
     __vfs_write+0x4c/0x90
     vfs_write+0x145/0x2c0
     ksys_write+0xd7/0x180
     __x64_sys_write+0x47/0x50
     do_syscall_64+0x6f/0x2f0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 2984c8684f96 ("nullb: factor disk parameters")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Cc: Johannes Thumshirn <jth@kernel.org>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a737ff66d257cd626811c1a9ccf8896d3e86b60
Author: Alain Volmat <avolmat@me.com>
Date:   Thu Mar 26 22:22:43 2020 +0100

    i2c: st: fix missing struct parameter description
    
    [ Upstream commit f491c6687332920e296d0209e366fe2ca7eab1c6 ]
    
    Fix a missing struct parameter description to allow
    warning free W=1 compilation.
    
    Signed-off-by: Alain Volmat <avolmat@me.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@st.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2bca2f3e947f34c22fde7d2ddfd8d2715ee0987
Author: Xu Wang <vulab@iscas.ac.cn>
Date:   Thu Mar 26 18:14:29 2020 +0800

    qlcnic: Fix bad kzalloc null test
    
    [ Upstream commit bcaeb886ade124331a6f3a5cef34a3f1484c0a03 ]
    
    In qlcnic_83xx_get_reset_instruction_template, the variable
    of null test is bad, so correct it.
    
    Signed-off-by: Xu Wang <vulab@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43fde2214bfc82bf4f015350ad882f258bbde356
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Tue Mar 24 17:10:00 2020 +0530

    cxgb4/ptp: pass the sign of offset delta in FW CMD
    
    [ Upstream commit 50e0d28d3808146cc19b0d5564ef4ba9e5bf3846 ]
    
    cxgb4_ptp_fineadjtime() doesn't pass the signedness of offset delta
    in FW_PTP_CMD. Fix it by passing correct sign.
    
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82146d1de45651ddd02a2c693382b732e4d428bb
Author: Luo bin <luobin9@huawei.com>
Date:   Fri Mar 20 23:13:19 2020 +0000

    hinic: fix wrong para of wait_for_completion_timeout
    
    [ Upstream commit 0da7c322f116210ebfdda59c7da663a6fc5e9cc8 ]
    
    the second input parameter of wait_for_completion_timeout should
    be jiffies instead of millisecond
    
    Signed-off-by: Luo bin <luobin9@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e70596018d9cd7eb5615a1b0ddfb9b381bb4f348
Author: Luo bin <luobin9@huawei.com>
Date:   Fri Mar 20 23:13:16 2020 +0000

    hinic: fix a bug of waitting for IO stopped
    
    [ Upstream commit 96758117dc528e6d84bd23d205e8cf7f31eda029 ]
    
    it's unreliable for fw to check whether IO is stopped, so driver
    wait for enough time to ensure IO process is done in hw before
    freeing resources
    
    Signed-off-by: Luo bin <luobin9@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cd620744fc3f7d81423ba42f50f24f03d6d8956
Author: Zheng Wei <wei.zheng@vivo.com>
Date:   Mon Mar 16 22:23:47 2020 +0800

    net: vxge: fix wrong __VA_ARGS__ usage
    
    [ Upstream commit b317538c47943f9903860d83cc0060409e12d2ff ]
    
    printk in macro vxge_debug_ll uses __VA_ARGS__ without "##" prefix,
    it causes a build error when there is no variable
    arguments(e.g. only fmt is specified.).
    
    Signed-off-by: Zheng Wei <wei.zheng@vivo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5645b6891509dad2eda5b7d22b1b7fde5dcac144
Author: Ondrej Jirman <megous@megous.com>
Date:   Fri Feb 21 21:27:26 2020 +0100

    bus: sunxi-rsb: Return correct data when mixing 16-bit and 8-bit reads
    
    [ Upstream commit a43ab30dcd4a1abcdd0d2461bf1cf7c0817f6cd3 ]
    
    When doing a 16-bit read that returns data in the MSB byte, the
    RSB_DATA register will keep the MSB byte unchanged when doing
    the following 8-bit read. sunxi_rsb_read() will then return
    a result that contains high byte from 16-bit read mixed with
    the 8-bit result.
    
    The consequence is that after this happens the PMIC's regmap will
    look like this: (0x33 is the high byte from the 16-bit read)
    
    % cat /sys/kernel/debug/regmap/sunxi-rsb-3a3/registers
    00: 33
    01: 33
    02: 33
    03: 33
    04: 33
    05: 33
    06: 33
    07: 33
    08: 33
    09: 33
    0a: 33
    0b: 33
    0c: 33
    0d: 33
    0e: 33
    [snip]
    
    Fix this by masking the result of the read with the correct mask
    based on the size of the read. There are no 16-bit users in the
    mainline kernel, so this doesn't need to get into the stable tree.
    
    Signed-off-by: Ondrej Jirman <megous@megous.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
