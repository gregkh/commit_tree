commit a3f1a03f54fc08ca86ad0759a46244a771ce6547
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Aug 15 14:01:57 2021 +0200

    Linux 5.13.11
    
    Link: https://lore.kernel.org/r/20210813150520.090373732@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41812f4b84484530057513478c6770590347dc30
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Mon Aug 9 10:19:47 2021 +0200

    ovl: prevent private clone if bind mount is not allowed
    
    commit 427215d85e8d1476da1a86b8d67aceb485eb3631 upstream.
    
    Add the following checks from __do_loopback() to clone_private_mount() as
    well:
    
     - verify that the mount is in the current namespace
    
     - verify that there are no locked children
    
    Reported-by: Alois Wohlschlager <alois1@gmx-topmail.de>
    Fixes: c771d683a62e ("vfs: introduce clone_private_mount()")
    Cc: <stable@vger.kernel.org> # v3.18
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b187b56d531baa0a7810e69c92427464d65fc36
Author: Pali Rohár <pali@kernel.org>
Date:   Sat Aug 7 18:00:50 2021 +0200

    ppp: Fix generating ppp unit id when ifname is not specified
    
    commit 3125f26c514826077f2a4490b75e9b1c7a644c42 upstream.
    
    When registering new ppp interface via PPPIOCNEWUNIT ioctl then kernel has
    to choose interface name as this ioctl API does not support specifying it.
    
    Kernel in this case register new interface with name "ppp<id>" where <id>
    is the ppp unit id, which can be obtained via PPPIOCGUNIT ioctl. This
    applies also in the case when registering new ppp interface via rtnl
    without supplying IFLA_IFNAME.
    
    PPPIOCNEWUNIT ioctl allows to specify own ppp unit id which will kernel
    assign to ppp interface, in case this ppp id is not already used by other
    ppp interface.
    
    In case user does not specify ppp unit id then kernel choose the first free
    ppp unit id. This applies also for case when creating ppp interface via
    rtnl method as it does not provide a way for specifying own ppp unit id.
    
    If some network interface (does not have to be ppp) has name "ppp<id>"
    with this first free ppp id then PPPIOCNEWUNIT ioctl or rtnl call fails.
    
    And registering new ppp interface is not possible anymore, until interface
    which holds conflicting name is renamed. Or when using rtnl method with
    custom interface name in IFLA_IFNAME.
    
    As list of allocated / used ppp unit ids is not possible to retrieve from
    kernel to userspace, userspace has no idea what happens nor which interface
    is doing this conflict.
    
    So change the algorithm how ppp unit id is generated. And choose the first
    number which is not neither used as ppp unit id nor in some network
    interface with pattern "ppp<id>".
    
    This issue can be simply reproduced by following pppd call when there is no
    ppp interface registered and also no interface with name pattern "ppp<id>":
    
        pppd ifname ppp1 +ipv6 noip noauth nolock local nodetach pty "pppd +ipv6 noip noauth nolock local nodetach notty"
    
    Or by creating the one ppp interface (which gets assigned ppp unit id 0),
    renaming it to "ppp1" and then trying to create a new ppp interface (which
    will always fails as next free ppp unit id is 1, but network interface with
    name "ppp1" exists).
    
    This patch fixes above described issue by generating new and new ppp unit
    id until some non-conflicting id with network interfaces is generated.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9153106ca7e3bddb15cc38e6e90f60965ac4d1ea
Author: Luke D Jones <luke@ljones.dev>
Date:   Sat Aug 7 14:58:05 2021 +1200

    ALSA: hda: Add quirk for ASUS Flow x13
    
    commit 739d0959fbed23838a96c48fbce01dd2f6fb2c5f upstream.
    
    The ASUS GV301QH sound appears to work well with the quirk for
    ALC294_FIXUP_ASUS_DUAL_SPK.
    
    Signed-off-by: Luke D Jones <luke@ljones.dev>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210807025805.27321-1-luke@ljones.dev
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1252406498a665012b2f4f8e753e0374a9b36807
Author: Jeremy Szu <jeremy.szu@canonical.com>
Date:   Tue Aug 10 18:08:45 2021 +0800

    ALSA: hda/realtek: fix mute/micmute LEDs for HP ProBook 650 G8 Notebook PC
    
    commit d07149aba2ef423eae94a9cc2a6365d0cdf6fd51 upstream.
    
    The HP ProBook 650 G8 Notebook PC is using ALC236 codec which is
    using 0x02 to control mute LED and 0x01 to control micmute LED.
    Therefore, add a quirk to make it works.
    
    Signed-off-by: Jeremy Szu <jeremy.szu@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210810100846.65844-1-jeremy.szu@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c67b3ee8ca4627806e2001ab7f01b17a57f7542c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Aug 8 09:01:16 2021 +0200

    ALSA: pcm: Fix mmap breakage without explicit buffer setup
    
    commit dc0dc8a73e8e4dc33fba93dfe23356cc5a500c57 upstream.
    
    The recent fix c4824ae7db41 ("ALSA: pcm: Fix mmap capability check")
    restricts the mmap capability only to the drivers that properly set up
    the buffers, but it caused a regression for a few drivers that manage
    the buffer on its own way.
    
    For those with UNKNOWN buffer type (i.e. the uninitialized / unused
    substream->dma_buffer), just assume that the driver handles the mmap
    properly and blindly trust the hardware info bit.
    
    Fixes: c4824ae7db41 ("ALSA: pcm: Fix mmap capability check")
    Reported-and-tested-by: Jeff Woods <jwoods@fnordco.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/s5him0gpghv.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95421b33f9a24421bfc58b0a916bd819585a2591
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Aug 9 12:43:17 2021 +0200

    bpf: Add lockdown check for probe_write_user helper
    
    commit 51e1bb9eeaf7868db56e58f47848e364ab4c4129 upstream.
    
    Back then, commit 96ae52279594 ("bpf: Add bpf_probe_write_user BPF helper
    to be called in tracers") added the bpf_probe_write_user() helper in order
    to allow to override user space memory. Its original goal was to have a
    facility to "debug, divert, and manipulate execution of semi-cooperative
    processes" under CAP_SYS_ADMIN. Write to kernel was explicitly disallowed
    since it would otherwise tamper with its integrity.
    
    One use case was shown in cf9b1199de27 ("samples/bpf: Add test/example of
    using bpf_probe_write_user bpf helper") where the program DNATs traffic
    at the time of connect(2) syscall, meaning, it rewrites the arguments to
    a syscall while they're still in userspace, and before the syscall has a
    chance to copy the argument into kernel space. These days we have better
    mechanisms in BPF for achieving the same (e.g. for load-balancers), but
    without having to write to userspace memory.
    
    Of course the bpf_probe_write_user() helper can also be used to abuse
    many other things for both good or bad purpose. Outside of BPF, there is
    a similar mechanism for ptrace(2) such as PTRACE_PEEK{TEXT,DATA} and
    PTRACE_POKE{TEXT,DATA}, but would likely require some more effort.
    Commit 96ae52279594 explicitly dedicated the helper for experimentation
    purpose only. Thus, move the helper's availability behind a newly added
    LOCKDOWN_BPF_WRITE_USER lockdown knob so that the helper is disabled under
    the "integrity" mode. More fine-grained control can be implemented also
    from LSM side with this change.
    
    Fixes: 96ae52279594 ("bpf: Add bpf_probe_write_user BPF helper to be called in tracers")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea56b15b909c65f8c65f93b02820eaf2682ef18c
Author: Allen Pais <apais@linux.microsoft.com>
Date:   Mon Jun 14 17:33:17 2021 -0500

    firmware: tee_bnxt: Release TEE shm, session, and context during kexec
    
    [ Upstream commit 914ab19e471d8fb535ed50dff108b0a615f3c2d8 ]
    
    Implement a .shutdown hook that will be called during a kexec operation
    so that the TEE shared memory, session, and context that were set up
    during .probe can be properly freed/closed.
    
    Additionally, don't use dma-buf backed shared memory for the
    fw_shm_pool. dma-buf backed shared memory cannot be reliably freed and
    unregistered during a kexec operation even when tee_shm_free() is called
    on the shm from a .shutdown hook. The problem occurs because
    dma_buf_put() calls fput() which then uses task_work_add(), with the
    TWA_RESUME parameter, to queue tee_shm_release() to be called before the
    current task returns to user mode. However, the current task never
    returns to user mode before the kexec completes so the memory is never
    freed nor unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 246880958ac9 ("firmware: broadcom: add OP-TEE based BNXT f/w manager")
    Cc: stable@vger.kernel.org
    Signed-off-by: Allen Pais <apais@linux.microsoft.com>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
