commit 31cdcb6d430f07760dd2f540a354b11e6bb6a4a4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 6 15:42:39 2021 +0200

    Linux 5.4.151
    
    Link: https://lore.kernel.org/r/20211004125030.002116402@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20211005083256.183739807@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 965147067fa1bedff3ae1f07ce3f89f1a14d2df3
Author: Anirudh Rayabharam <mail@anirudhrb.com>
Date:   Thu Jun 24 00:10:29 2021 +0530

    HID: usbhid: free raw_report buffers in usbhid_stop
    
    commit f7744fa16b96da57187dc8e5634152d3b63d72de upstream.
    
    Free the unsent raw_report buffers when the device is removed.
    
    Fixes a memory leak reported by syzbot at:
    https://syzkaller.appspot.com/bug?id=7b4fa7cb1a7c2d3342a2a8a6c53371c8c418ab47
    
    Reported-by: syzbot+47b26cd837ececfc666d@syzkaller.appspotmail.com
    Tested-by: syzbot+47b26cd837ececfc666d@syzkaller.appspotmail.com
    Signed-off-by: Anirudh Rayabharam <mail@anirudhrb.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f2f68640b8478b3bd385bc541ee517d7bdddf76
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Mon Sep 6 18:26:34 2021 +0200

    netfilter: ipset: Fix oversized kvmalloc() calls
    
    commit 7bbc3d385bd813077acaf0e6fdb2a86a901f5382 upstream.
    
    The commit
    
    commit 7661809d493b426e979f39ab512e3adf41fbcc69
    Author: Linus Torvalds <torvalds@linux-foundation.org>
    Date:   Wed Jul 14 09:45:49 2021 -0700
    
        mm: don't allow oversized kvmalloc() calls
    
    limits the max allocatable memory via kvmalloc() to MAX_INT. Apply the
    same limit in ipset.
    
    Reported-by: syzbot+3493b1873fb3ea827986@syzkaller.appspotmail.com
    Reported-by: syzbot+2b8443c35458a617c904@syzkaller.appspotmail.com
    Reported-by: syzbot+ee5cb15f4a0e85e0d54e@syzkaller.appspotmail.com
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe9bb925e7096509711660d39c0493a1546e9550
Author: F.A.Sulaiman <asha.16@itfac.mrt.ac.lk>
Date:   Tue Aug 24 20:37:30 2021 +0530

    HID: betop: fix slab-out-of-bounds Write in betop_probe
    
    commit 1e4ce418b1cb1a810256b5fb3fd33d22d1325993 upstream.
    
    Syzbot reported slab-out-of-bounds Write bug in hid-betopff driver.
    The problem is the driver assumes the device must have an input report but
    some malicious devices violate this assumption.
    
    So this patch checks hid_device's input is non empty before it's been used.
    
    Reported-by: syzbot+07efed3bc5a1407bd742@syzkaller.appspotmail.com
    Signed-off-by: F.A. SULAIMAN <asha.16@itfac.mrt.ac.lk>
    Reviewed-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24f3d2609114f1e1f6b487b511ce5fa36f21e0ae
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 26 16:04:27 2021 +0300

    crypto: ccp - fix resource leaks in ccp_run_aes_gcm_cmd()
    
    commit 505d9dcb0f7ddf9d075e729523a33d38642ae680 upstream.
    
    There are three bugs in this code:
    
    1) If we ccp_init_data() fails for &src then we need to free aad.
       Use goto e_aad instead of goto e_ctx.
    2) The label to free the &final_wa was named incorrectly as "e_tag" but
       it should have been "e_final_wa".  One error path leaked &final_wa.
    3) The &tag was leaked on one error path.  In that case, I added a free
       before the goto because the resource was local to that block.
    
    Fixes: 36cf515b9bbe ("crypto: ccp - Enable support for AES GCM on v5 CCPs")
    Reported-by: "minihanshen(沈明航)" <minihanshen@tencent.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: John Allen <john.allen@amd.com>
    Tested-by: John Allen <john.allen@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62c5cacb09862e1ac8a81383df547259cb5378a7
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Wed Jul 21 16:14:57 2021 +0800

    usb: hso: remove the bailout parameter
    
    commit dcb713d53e2eadf42b878c12a471e74dc6ed3145 upstream.
    
    There are two invocation sites of hso_free_net_device. After
    refactoring hso_create_net_device, this parameter is useless.
    Remove the bailout in the hso_free_net_device and change the invocation
    sites of this function.
    
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe57d53dd91d7823f1ceef5ea8e9458a4aeb47fa
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Wed Jul 14 17:13:22 2021 +0800

    usb: hso: fix error handling code of hso_create_net_device
    
    commit a6ecfb39ba9d7316057cea823b196b734f6b18ca upstream.
    
    The current error handling code of hso_create_net_device is
    hso_free_net_device, no matter which errors lead to. For example,
    WARNING in hso_free_net_device [1].
    
    Fix this by refactoring the error handling code of
    hso_create_net_device by handling different errors by different code.
    
    [1] https://syzkaller.appspot.com/bug?id=66eff8d49af1b28370ad342787413e35bbe76efe
    
    Reported-by: syzbot+44d53c7255bb1aea22d2@syzkaller.appspotmail.com
    Fixes: 5fcfb6d0bfcd ("hso: fix bailout in error case of probe")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d29c7a1a322da2035f4863f1232a4cf374854389
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Aug 5 14:07:07 2020 +0200

    hso: fix bailout in error case of probe
    
    commit 5fcfb6d0bfcda17f0d0656e4e5b3710af2bbaae5 upstream.
    
    The driver tries to reuse code for disconnect in case
    of a failed probe.
    If resources need to be freed after an error in probe, the
    netdev must not be freed because it has never been registered.
    Fix it by telling the helper which path we are in.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f2b324e82c418356e5f30b7092cd74234e4459f
Author: sumiyawang <sumiyawang@tencent.com>
Date:   Sun Aug 22 19:49:09 2021 +0800

    libnvdimm/pmem: Fix crash triggered when I/O in-flight during unbind
    
    commit 32b2397c1e56f33b0b1881def965bb89bd12f448 upstream.
    
    There is a use after free crash when the pmem driver tears down its
    mapping while I/O is still inbound.
    
    This is triggered by driver unbind, "ndctl destroy-namespace", while I/O
    is in flight.
    
    Fix the sequence of blk_cleanup_queue() vs memunmap().
    
    The crash signature is of the form:
    
     BUG: unable to handle page fault for address: ffffc90080200000
     CPU: 36 PID: 9606 Comm: systemd-udevd
     Call Trace:
      ? pmem_do_bvec+0xf9/0x3a0
      ? xas_alloc+0x55/0xd0
      pmem_rw_page+0x4b/0x80
      bdev_read_page+0x86/0xb0
      do_mpage_readpage+0x5d4/0x7a0
      ? lru_cache_add+0xe/0x10
      mpage_readpages+0xf9/0x1c0
      ? bd_link_disk_holder+0x1a0/0x1a0
      blkdev_readpages+0x1d/0x20
      read_pages+0x67/0x1a0
    
      ndctl Call Trace in vmcore:
      PID: 23473  TASK: ffff88c4fbbe8000  CPU: 1   COMMAND: "ndctl"
      __schedule
      schedule
      blk_mq_freeze_queue_wait
      blk_freeze_queue
      blk_cleanup_queue
      pmem_release_queue
      devm_action_release
      release_nodes
      devres_release_all
      device_release_driver_internal
      device_driver_detach
      unbind_store
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: sumiyawang <sumiyawang@tencent.com>
    Reviewed-by: yongduan <yongduan@tencent.com>
    Link: https://lore.kernel.org/r/1629632949-14749-1-git-send-email-sumiyawang@tencent.com
    Fixes: 50f44ee7248a ("mm/devm_memremap_pages: fix final page put race")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    [tyhicks: Minor contextual change in pmem_attach_disk() due to the
     transition to 'struct range' not yet taking place. Preserve the
     memcpy() call rather than initializing the range struct. That change
     was introduced in v5.10 with commit a4574f63edc6 ("mm/memremap_pages:
     convert to 'struct range'")]
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd336267d8482e4b1ee2e981e28600979b07f7f3
Author: Rob Herring <robh@kernel.org>
Date:   Wed May 13 17:38:59 2020 -0500

    PCI: Fix pci_host_bridge struct device release/free handling
    
    commit 9885440b16b8fc1dd7275800fd28f56a92f60896 upstream.
    
    The PCI code has several paths where the struct pci_host_bridge is freed
    directly. This is wrong because it contains a struct device which is
    refcounted and should be freed using put_device(). This can result in
    use-after-free errors. I think this problem has existed since 2012 with
    commit 7b5436635800 ("PCI: add generic device into pci_host_bridge
    struct"). It generally hasn't mattered as most host bridge drivers are
    still built-in and can't unbind.
    
    The problem is a struct device should never be freed directly once
    device_initialize() is called and a ref is held, but that doesn't happen
    until pci_register_host_bridge(). There's then a window between allocating
    the host bridge and pci_register_host_bridge() where kfree should be used.
    This is fragile and requires callers to do the right thing. To fix this, we
    need to split device_register() into device_initialize() and device_add()
    calls, so that the host bridge struct is always freed by using a
    put_device().
    
    devm_pci_alloc_host_bridge() is using devm_kzalloc() to allocate struct
    pci_host_bridge which will be freed directly. Instead, we can use a custom
    devres action to call put_device().
    
    Link: https://lore.kernel.org/r/20200513223859.11295-2-robh@kernel.org
    Reported-by: Anders Roxell <anders.roxell@linaro.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    [tyhicks: Minor contextual change in pci_init_host_bridge() due to the
     lack of a native_dpc member in the pci_host_bridge struct. It was added
     in v5.7 with commit ac1c8e35a326 ("PCI/DPC: Add Error Disconnect
     Recover (EDR) support")]
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e81f3b7e7112cb45388b7e5e801f3702913aa01d
Author: Leon Yu <leoyu@nvidia.com>
Date:   Fri May 22 23:29:43 2020 +0800

    net: stmmac: don't attach interface until resume finishes
    
    commit 31096c3e8b1163c6e966bf4d1f36d8b699008f84 upstream.
    
    Commit 14b41a2959fb ("net: stmmac: Delete txtimer in suspend") was the
    first attempt to fix a race between mod_timer() and setup_timer()
    during stmmac_resume(). However the issue still exists as the commit
    only addressed half of the issue.
    
    Same race can still happen as stmmac_resume() re-attaches interface
    way too early - even before hardware is fully initialized.  Worse,
    doing so allows network traffic to restart and stmmac_tx_timer_arm()
    being called in the middle of stmmac_resume(), which re-init tx timers
    in stmmac_init_coalesce().  timer_list will be corrupted and system
    crashes as a result of race between mod_timer() and setup_timer().
    
      systemd--1995    2.... 552950018us : stmmac_suspend: 4994
      ksoftirq-9       0..s2 553123133us : stmmac_tx_timer_arm: 2276
      systemd--1995    0.... 553127896us : stmmac_resume: 5101
      systemd--320     7...2 553132752us : stmmac_tx_timer_arm: 2276
      (sd-exec-1999    5...2 553135204us : stmmac_tx_timer_arm: 2276
      ---------------------------------
      pc : run_timer_softirq+0x468/0x5e0
      lr : run_timer_softirq+0x570/0x5e0
      Call trace:
       run_timer_softirq+0x468/0x5e0
       __do_softirq+0x124/0x398
       irq_exit+0xd8/0xe0
       __handle_domain_irq+0x6c/0xc0
       gic_handle_irq+0x60/0xb0
       el1_irq+0xb8/0x180
       arch_cpu_idle+0x38/0x230
       default_idle_call+0x24/0x3c
       do_idle+0x1e0/0x2b8
       cpu_startup_entry+0x28/0x48
       secondary_start_kernel+0x1b4/0x208
    
    Fix this by deferring netif_device_attach() to the end of
    stmmac_resume().
    
    Signed-off-by: Leon Yu <leoyu@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Macpaul Lin <macpaul.lin@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8ffde0bb96d1332ec917b369762ec3cb6253701
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Sep 27 17:29:24 2021 -0700

    net: udp: annotate data race around udp_sk(sk)->corkflag
    
    commit a9f5970767d11eadc805d5283f202612c7ba1f59 upstream.
    
    up->corkflag field can be read or written without any lock.
    Annotate accesses to avoid possible syzbot/KCSAN reports.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dbf7e343b692ff5266785920bf20f776c346e3d
Author: Andrej Shadura <andrew.shadura@collabora.co.uk>
Date:   Thu Sep 16 17:33:11 2021 +0100

    HID: u2fzero: ignore incomplete packets without data
    
    commit 22d65765f211cc83186fd8b87521159f354c0da9 upstream.
    
    Since the actual_length calculation is performed unsigned, packets
    shorter than 7 bytes (e.g. packets without data or otherwise truncated)
    or non-received packets ("zero" bytes) can cause buffer overflow.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=214437
    Fixes: 42337b9d4d958("HID: add driver for U2F Zero built-in LED and RNG")
    Signed-off-by: Andrej Shadura <andrew.shadura@collabora.co.uk>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d518ea03145ce4b770081fb89ea883f90a82525a
Author: yangerkun <yangerkun@huawei.com>
Date:   Tue Sep 14 19:14:15 2021 +0800

    ext4: fix potential infinite loop in ext4_dx_readdir()
    
    commit 42cb447410d024e9d54139ae9c21ea132a8c384c upstream.
    
    When ext4_htree_fill_tree() fails, ext4_dx_readdir() can run into an
    infinite loop since if info->last_pos != ctx->pos this will reset the
    directory scan and reread the failing entry.  For example:
    
    1. a dx_dir which has 3 block, block 0 as dx_root block, block 1/2 as
       leaf block which own the ext4_dir_entry_2
    2. block 1 read ok and call_filldir which will fill the dirent and update
       the ctx->pos
    3. block 2 read fail, but we has already fill some dirent, so we will
       return back to userspace will a positive return val(see ksys_getdents64)
    4. the second ext4_dx_readdir will reset the world since info->last_pos
       != ctx->pos, and will also init the curr_hash which pos to block 1
    5. So we will read block1 too, and once block2 still read fail, we can
       only fill one dirent because the hash of the entry in block1(besides
       the last one) won't greater than curr_hash
    6. this time, we forget update last_pos too since the read for block2
       will fail, and since we has got the one entry, ksys_getdents64 can
       return success
    7. Latter we will trapped in a loop with step 4~6
    
    Cc: stable@kernel.org
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Link: https://lore.kernel.org/r/20210914111415.3921954-1-yangerkun@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59c19fdcde79287a7a45813eec1db9ebf784f727
Author: Jeffle Xu <jefflexu@linux.alibaba.com>
Date:   Mon Aug 23 14:13:58 2021 +0800

    ext4: fix reserved space counter leakage
    
    commit 6fed83957f21eff11c8496e9f24253b03d2bc1dc upstream.
    
    When ext4_insert_delayed block receives and recovers from an error from
    ext4_es_insert_delayed_block(), e.g., ENOMEM, it does not release the
    space it has reserved for that block insertion as it should. One effect
    of this bug is that s_dirtyclusters_counter is not decremented and
    remains incorrectly elevated until the file system has been unmounted.
    This can result in premature ENOSPC returns and apparent loss of free
    space.
    
    Another effect of this bug is that
    /sys/fs/ext4/<dev>/delayed_allocation_blocks can remain non-zero even
    after syncfs has been executed on the filesystem.
    
    Besides, add check for s_dirtyclusters_counter when inode is going to be
    evicted and freed. s_dirtyclusters_counter can still keep non-zero until
    inode is written back in .evict_inode(), and thus the check is delayed
    to .destroy_inode().
    
    Fixes: 51865fda28e5 ("ext4: let ext4 maintain extent status tree")
    Cc: stable@kernel.org
    Suggested-by: Gao Xiang <hsiangkao@linux.alibaba.com>
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Reviewed-by: Eric Whitney <enwlinux@gmail.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Link: https://lore.kernel.org/r/20210823061358.84473-1-jefflexu@linux.alibaba.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4b8db2b4755f2e13569a00d8d52d43794a0d336
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Sat Jun 5 10:39:32 2021 +0530

    ext4: fix loff_t overflow in ext4_max_bitmap_size()
    
    commit 75ca6ad408f459f00b09a64f04c774559848c097 upstream.
    
    We should use unsigned long long rather than loff_t to avoid
    overflow in ext4_max_bitmap_size() for comparison before returning.
    w/o this patch sbi->s_bitmap_maxbytes was becoming a negative
    value due to overflow of upper_limit (with has_huge_files as true)
    
    Below is a quick test to trigger it on a 64KB pagesize system.
    
    sudo mkfs.ext4 -b 65536 -O ^has_extents,^64bit /dev/loop2
    sudo mount /dev/loop2 /mnt
    sudo echo "hello" > /mnt/hello  -> This will error out with
                                    "echo: write error: File too large"
    
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/594f409e2c543e90fd836b78188dfa5c575065ba.1622867594.git.riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3253c87e1e5bc0107aab773af2f135ebccf38666
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 17 13:46:21 2021 +0200

    ipack: ipoctal: fix module reference leak
    
    commit bb8a4fcb2136508224c596a7e665bdba1d7c3c27 upstream.
    
    A reference to the carrier module was taken on every open but was only
    released once when the final reference to the tty struct was dropped.
    
    Fix this by taking the module reference and initialising the tty driver
    data when installing the tty.
    
    Fixes: 82a82340bab6 ("ipoctal: get carrier driver to avoid rmmod")
    Cc: stable@vger.kernel.org      # 3.18
    Cc: Federico Vaga <federico.vaga@cern.ch>
    Acked-by: Samuel Iglesias Gonsalvez <siglesias@igalia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210917114622.5412-6-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c802a05749aef342fa1d593f3ef549b785cf6fd
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 17 13:46:20 2021 +0200

    ipack: ipoctal: fix missing allocation-failure check
    
    commit 445c8132727728dc297492a7d9fc074af3e94ba3 upstream.
    
    Add the missing error handling when allocating the transmit buffer to
    avoid dereferencing a NULL pointer in write() should the allocation
    ever fail.
    
    Fixes: ba4dc61fe8c5 ("Staging: ipack: add support for IP-OCTAL mezzanine board")
    Cc: stable@vger.kernel.org      # 3.5
    Acked-by: Samuel Iglesias Gonsalvez <siglesias@igalia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210917114622.5412-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd682d461ab4d7fa96d75a8c0011cafe073b64e
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 17 13:46:19 2021 +0200

    ipack: ipoctal: fix tty-registration error handling
    
    commit cd20d59291d1790dc74248476e928f57fc455189 upstream.
    
    Registration of the ipoctal tty devices is unlikely to fail, but if it
    ever does, make sure not to deregister a never registered tty device
    (and dereference a NULL pointer) when the driver is later unbound.
    
    Fixes: 2afb41d9d30d ("Staging: ipack/devices/ipoctal: Check tty_register_device return value.")
    Cc: stable@vger.kernel.org      # 3.7
    Acked-by: Samuel Iglesias Gonsalvez <siglesias@igalia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210917114622.5412-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6a71c173edaa4fc6a6abb9d2e8d9e205cf6f3aa
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 17 13:46:18 2021 +0200

    ipack: ipoctal: fix tty registration race
    
    commit 65c001df517a7bf9be8621b53d43c89f426ce8d6 upstream.
    
    Make sure to set the tty class-device driver data before registering the
    tty to avoid having a racing open() dereference a NULL pointer.
    
    Fixes: 9c1d784afc6f ("Staging: ipack/devices/ipoctal: Get rid of ipoctal_list.")
    Cc: stable@vger.kernel.org      # 3.7
    Acked-by: Samuel Iglesias Gonsalvez <siglesias@igalia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210917114622.5412-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8657158a3b68c85234e6da3d8eae33d6183588b7
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Sep 17 13:46:17 2021 +0200

    ipack: ipoctal: fix stack information leak
    
    commit a89936cce87d60766a75732a9e7e25c51164f47c upstream.
    
    The tty driver name is used also after registering the driver and must
    specifically not be allocated on the stack to avoid leaking information
    to user space (or triggering an oops).
    
    Drivers should not try to encode topology information in the tty device
    name but this one snuck in through staging without anyone noticing and
    another driver has since copied this malpractice.
    
    Fixing the ABI is a separate issue, but this at least plugs the security
    hole.
    
    Fixes: ba4dc61fe8c5 ("Staging: ipack: add support for IP-OCTAL mezzanine board")
    Cc: stable@vger.kernel.org      # 3.5
    Acked-by: Samuel Iglesias Gonsalvez <siglesias@igalia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210917114622.5412-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91d5de0b710b00d5dbee863fee9064005ad7750d
Author: Nirmoy Das <nirmoy.das@amd.com>
Date:   Thu Sep 2 12:29:17 2021 +0200

    debugfs: debugfs_create_file_size(): use IS_ERR to check for error
    
    commit af505cad9567f7a500d34bf183696d570d7f6810 upstream.
    
    debugfs_create_file() returns encoded error so use IS_ERR for checking
    return value.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Nirmoy Das <nirmoy.das@amd.com>
    Fixes: ff9fb72bc077 ("debugfs: return error values, not NULL")
    Cc: stable <stable@vger.kernel.org>
    References: https://gitlab.freedesktop.org/drm/amd/-/issues/1686
    Link: https://lore.kernel.org/r/20210902102917.2233-1-nirmoy.das@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98574c91e3739ed8d499428958e567e832fa7f35
Author: Chen Jingwen <chenjingwen6@huawei.com>
Date:   Tue Sep 28 20:56:57 2021 +0800

    elf: don't use MAP_FIXED_NOREPLACE for elf interpreter mappings
    
    commit 9b2f72cc0aa4bb444541bb87581c35b7508b37d3 upstream.
    
    In commit b212921b13bd ("elf: don't use MAP_FIXED_NOREPLACE for elf
    executable mappings") we still leave MAP_FIXED_NOREPLACE in place for
    load_elf_interp.
    
    Unfortunately, this will cause kernel to fail to start with:
    
        1 (init): Uhuuh, elf segment at 00003ffff7ffd000 requested but the memory is mapped already
        Failed to execute /init (error -17)
    
    The reason is that the elf interpreter (ld.so) has overlapping segments.
    
      readelf -l ld-2.31.so
      Program Headers:
        Type           Offset             VirtAddr           PhysAddr
                       FileSiz            MemSiz              Flags  Align
        LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                       0x000000000002c94c 0x000000000002c94c  R E    0x10000
        LOAD           0x000000000002dae0 0x000000000003dae0 0x000000000003dae0
                       0x00000000000021e8 0x0000000000002320  RW     0x10000
        LOAD           0x000000000002fe00 0x000000000003fe00 0x000000000003fe00
                       0x00000000000011ac 0x0000000000001328  RW     0x10000
    
    The reason for this problem is the same as described in commit
    ad55eac74f20 ("elf: enforce MAP_FIXED on overlaying elf segments").
    
    Not only executable binaries, elf interpreters (e.g. ld.so) can have
    overlapping elf segments, so we better drop MAP_FIXED_NOREPLACE and go
    back to MAP_FIXED in load_elf_interp.
    
    Fixes: 4ed28639519c ("fs, elf: drop MAP_FIXED usage from elf_map")
    Cc: <stable@vger.kernel.org> # v4.19
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Chen Jingwen <chenjingwen6@huawei.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9356e4dcebd891cf20a54ed22c18914606dbfcc1
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Tue Sep 28 08:19:03 2021 -0700

    perf/x86/intel: Update event constraints for ICX
    
    [ Upstream commit ecc2123e09f9e71ddc6c53d71e283b8ada685fe2 ]
    
    According to the latest event list, the event encoding 0xEF is only
    available on the first 4 counters. Add it into the event constraints
    table.
    
    Fixes: 6017608936c1 ("perf/x86/intel: Add Icelake support")
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/1632842343-25862-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fcfaa8ed9d1dcbe377b202a1b3cdfd4e566114c
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Sep 29 15:57:50 2021 -0700

    af_unix: fix races in sk_peer_pid and sk_peer_cred accesses
    
    [ Upstream commit 35306eb23814444bd4021f8a1c3047d3cb0c8b2b ]
    
    Jann Horn reported that SO_PEERCRED and SO_PEERGROUPS implementations
    are racy, as af_unix can concurrently change sk_peer_pid and sk_peer_cred.
    
    In order to fix this issue, this patch adds a new spinlock that needs
    to be used whenever these fields are read or written.
    
    Jann also pointed out that l2cap_sock_get_peer_pid_cb() is currently
    reading sk->sk_peer_pid which makes no sense, as this field
    is only possibly set by AF_UNIX sockets.
    We will have to clean this in a separate patch.
    This could be done by reverting b48596d1dc25 "Bluetooth: L2CAP: Add get_peer_pid callback"
    or implementing what was truly expected.
    
    Fixes: 109f6e39fa07 ("af_unix: Allow SO_PEERCRED to work across namespaces.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Jann Horn <jannh@google.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 694b0cee7f8546b69a80996a29cb3cf4149c0453
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Wed Sep 29 18:08:49 2021 +0300

    net: sched: flower: protect fl_walk() with rcu
    
    [ Upstream commit d5ef190693a7d76c5c192d108e8dec48307b46ee ]
    
    Patch that refactored fl_walk() to use idr_for_each_entry_continue_ul()
    also removed rcu protection of individual filters which causes following
    use-after-free when filter is deleted concurrently. Fix fl_walk() to obtain
    rcu read lock while iterating and taking the filter reference and temporary
    release the lock while calling arg->fn() callback that can sleep.
    
    KASAN trace:
    
    [  352.773640] ==================================================================
    [  352.775041] BUG: KASAN: use-after-free in fl_walk+0x159/0x240 [cls_flower]
    [  352.776304] Read of size 4 at addr ffff8881c8251480 by task tc/2987
    
    [  352.777862] CPU: 3 PID: 2987 Comm: tc Not tainted 5.15.0-rc2+ #2
    [  352.778980] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
    [  352.781022] Call Trace:
    [  352.781573]  dump_stack_lvl+0x46/0x5a
    [  352.782332]  print_address_description.constprop.0+0x1f/0x140
    [  352.783400]  ? fl_walk+0x159/0x240 [cls_flower]
    [  352.784292]  ? fl_walk+0x159/0x240 [cls_flower]
    [  352.785138]  kasan_report.cold+0x83/0xdf
    [  352.785851]  ? fl_walk+0x159/0x240 [cls_flower]
    [  352.786587]  kasan_check_range+0x145/0x1a0
    [  352.787337]  fl_walk+0x159/0x240 [cls_flower]
    [  352.788163]  ? fl_put+0x10/0x10 [cls_flower]
    [  352.789007]  ? __mutex_unlock_slowpath.constprop.0+0x220/0x220
    [  352.790102]  tcf_chain_dump+0x231/0x450
    [  352.790878]  ? tcf_chain_tp_delete_empty+0x170/0x170
    [  352.791833]  ? __might_sleep+0x2e/0xc0
    [  352.792594]  ? tfilter_notify+0x170/0x170
    [  352.793400]  ? __mutex_unlock_slowpath.constprop.0+0x220/0x220
    [  352.794477]  tc_dump_tfilter+0x385/0x4b0
    [  352.795262]  ? tc_new_tfilter+0x1180/0x1180
    [  352.796103]  ? __mod_node_page_state+0x1f/0xc0
    [  352.796974]  ? __build_skb_around+0x10e/0x130
    [  352.797826]  netlink_dump+0x2c0/0x560
    [  352.798563]  ? netlink_getsockopt+0x430/0x430
    [  352.799433]  ? __mutex_unlock_slowpath.constprop.0+0x220/0x220
    [  352.800542]  __netlink_dump_start+0x356/0x440
    [  352.801397]  rtnetlink_rcv_msg+0x3ff/0x550
    [  352.802190]  ? tc_new_tfilter+0x1180/0x1180
    [  352.802872]  ? rtnl_calcit.isra.0+0x1f0/0x1f0
    [  352.803668]  ? tc_new_tfilter+0x1180/0x1180
    [  352.804344]  ? _copy_from_iter_nocache+0x800/0x800
    [  352.805202]  ? kasan_set_track+0x1c/0x30
    [  352.805900]  netlink_rcv_skb+0xc6/0x1f0
    [  352.806587]  ? rht_deferred_worker+0x6b0/0x6b0
    [  352.807455]  ? rtnl_calcit.isra.0+0x1f0/0x1f0
    [  352.808324]  ? netlink_ack+0x4d0/0x4d0
    [  352.809086]  ? netlink_deliver_tap+0x62/0x3d0
    [  352.809951]  netlink_unicast+0x353/0x480
    [  352.810744]  ? netlink_attachskb+0x430/0x430
    [  352.811586]  ? __alloc_skb+0xd7/0x200
    [  352.812349]  netlink_sendmsg+0x396/0x680
    [  352.813132]  ? netlink_unicast+0x480/0x480
    [  352.813952]  ? __import_iovec+0x192/0x210
    [  352.814759]  ? netlink_unicast+0x480/0x480
    [  352.815580]  sock_sendmsg+0x6c/0x80
    [  352.816299]  ____sys_sendmsg+0x3a5/0x3c0
    [  352.817096]  ? kernel_sendmsg+0x30/0x30
    [  352.817873]  ? __ia32_sys_recvmmsg+0x150/0x150
    [  352.818753]  ___sys_sendmsg+0xd8/0x140
    [  352.819518]  ? sendmsg_copy_msghdr+0x110/0x110
    [  352.820402]  ? ___sys_recvmsg+0xf4/0x1a0
    [  352.821110]  ? __copy_msghdr_from_user+0x260/0x260
    [  352.821934]  ? _raw_spin_lock+0x81/0xd0
    [  352.822680]  ? __handle_mm_fault+0xef3/0x1b20
    [  352.823549]  ? rb_insert_color+0x2a/0x270
    [  352.824373]  ? copy_page_range+0x16b0/0x16b0
    [  352.825209]  ? perf_event_update_userpage+0x2d0/0x2d0
    [  352.826190]  ? __fget_light+0xd9/0xf0
    [  352.826941]  __sys_sendmsg+0xb3/0x130
    [  352.827613]  ? __sys_sendmsg_sock+0x20/0x20
    [  352.828377]  ? do_user_addr_fault+0x2c5/0x8a0
    [  352.829184]  ? fpregs_assert_state_consistent+0x52/0x60
    [  352.830001]  ? exit_to_user_mode_prepare+0x32/0x160
    [  352.830845]  do_syscall_64+0x35/0x80
    [  352.831445]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  352.832331] RIP: 0033:0x7f7bee973c17
    [  352.833078] Code: 0c 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10
    [  352.836202] RSP: 002b:00007ffcbb368e28 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    [  352.837524] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f7bee973c17
    [  352.838715] RDX: 0000000000000000 RSI: 00007ffcbb368e50 RDI: 0000000000000003
    [  352.839838] RBP: 00007ffcbb36d090 R08: 00000000cea96d79 R09: 00007f7beea34a40
    [  352.841021] R10: 00000000004059bb R11: 0000000000000246 R12: 000000000046563f
    [  352.842208] R13: 0000000000000000 R14: 0000000000000000 R15: 00007ffcbb36d088
    
    [  352.843784] Allocated by task 2960:
    [  352.844451]  kasan_save_stack+0x1b/0x40
    [  352.845173]  __kasan_kmalloc+0x7c/0x90
    [  352.845873]  fl_change+0x282/0x22db [cls_flower]
    [  352.846696]  tc_new_tfilter+0x6cf/0x1180
    [  352.847493]  rtnetlink_rcv_msg+0x471/0x550
    [  352.848323]  netlink_rcv_skb+0xc6/0x1f0
    [  352.849097]  netlink_unicast+0x353/0x480
    [  352.849886]  netlink_sendmsg+0x396/0x680
    [  352.850678]  sock_sendmsg+0x6c/0x80
    [  352.851398]  ____sys_sendmsg+0x3a5/0x3c0
    [  352.852202]  ___sys_sendmsg+0xd8/0x140
    [  352.852967]  __sys_sendmsg+0xb3/0x130
    [  352.853718]  do_syscall_64+0x35/0x80
    [  352.854457]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    [  352.855830] Freed by task 7:
    [  352.856421]  kasan_save_stack+0x1b/0x40
    [  352.857139]  kasan_set_track+0x1c/0x30
    [  352.857854]  kasan_set_free_info+0x20/0x30
    [  352.858609]  __kasan_slab_free+0xed/0x130
    [  352.859348]  kfree+0xa7/0x3c0
    [  352.859951]  process_one_work+0x44d/0x780
    [  352.860685]  worker_thread+0x2e2/0x7e0
    [  352.861390]  kthread+0x1f4/0x220
    [  352.862022]  ret_from_fork+0x1f/0x30
    
    [  352.862955] Last potentially related work creation:
    [  352.863758]  kasan_save_stack+0x1b/0x40
    [  352.864378]  kasan_record_aux_stack+0xab/0xc0
    [  352.865028]  insert_work+0x30/0x160
    [  352.865617]  __queue_work+0x351/0x670
    [  352.866261]  rcu_work_rcufn+0x30/0x40
    [  352.866917]  rcu_core+0x3b2/0xdb0
    [  352.867561]  __do_softirq+0xf6/0x386
    
    [  352.868708] Second to last potentially related work creation:
    [  352.869779]  kasan_save_stack+0x1b/0x40
    [  352.870560]  kasan_record_aux_stack+0xab/0xc0
    [  352.871426]  call_rcu+0x5f/0x5c0
    [  352.872108]  queue_rcu_work+0x44/0x50
    [  352.872855]  __fl_put+0x17c/0x240 [cls_flower]
    [  352.873733]  fl_delete+0xc7/0x100 [cls_flower]
    [  352.874607]  tc_del_tfilter+0x510/0xb30
    [  352.886085]  rtnetlink_rcv_msg+0x471/0x550
    [  352.886875]  netlink_rcv_skb+0xc6/0x1f0
    [  352.887636]  netlink_unicast+0x353/0x480
    [  352.888285]  netlink_sendmsg+0x396/0x680
    [  352.888942]  sock_sendmsg+0x6c/0x80
    [  352.889583]  ____sys_sendmsg+0x3a5/0x3c0
    [  352.890311]  ___sys_sendmsg+0xd8/0x140
    [  352.891019]  __sys_sendmsg+0xb3/0x130
    [  352.891716]  do_syscall_64+0x35/0x80
    [  352.892395]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    [  352.893666] The buggy address belongs to the object at ffff8881c8251000
                    which belongs to the cache kmalloc-2k of size 2048
    [  352.895696] The buggy address is located 1152 bytes inside of
                    2048-byte region [ffff8881c8251000, ffff8881c8251800)
    [  352.897640] The buggy address belongs to the page:
    [  352.898492] page:00000000213bac35 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1c8250
    [  352.900110] head:00000000213bac35 order:3 compound_mapcount:0 compound_pincount:0
    [  352.901541] flags: 0x2ffff800010200(slab|head|node=0|zone=2|lastcpupid=0x1ffff)
    [  352.902908] raw: 002ffff800010200 0000000000000000 dead000000000122 ffff888100042f00
    [  352.904391] raw: 0000000000000000 0000000000080008 00000001ffffffff 0000000000000000
    [  352.905861] page dumped because: kasan: bad access detected
    
    [  352.907323] Memory state around the buggy address:
    [  352.908218]  ffff8881c8251380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  352.909471]  ffff8881c8251400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  352.910735] >ffff8881c8251480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  352.912012]                    ^
    [  352.912642]  ffff8881c8251500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  352.913919]  ffff8881c8251580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  352.915185] ==================================================================
    
    Fixes: d39d714969cd ("idr: introduce idr_for_each_entry_continue_ul()")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Acked-by: Cong Wang <cong.wang@bytedance.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a31d4e73ada8022427b69b10fd1f01a6a8d4b3d
Author: Jian Shen <shenjian15@huawei.com>
Date:   Wed Sep 29 17:35:49 2021 +0800

    net: hns3: do not allow call hns3_nic_net_open repeatedly
    
    [ Upstream commit 5b09e88e1bf7fe86540fab4b5f3eece8abead39e ]
    
    hns3_nic_net_open() is not allowed to called repeatly, but there
    is no checking for this. When doing device reset and setup tc
    concurrently, there is a small oppotunity to call hns3_nic_net_open
    repeatedly, and cause kernel bug by calling napi_enable twice.
    
    The calltrace information is like below:
    [ 3078.222780] ------------[ cut here ]------------
    [ 3078.230255] kernel BUG at net/core/dev.c:6991!
    [ 3078.236224] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    [ 3078.243431] Modules linked in: hns3 hclgevf hclge hnae3 vfio_iommu_type1 vfio_pci vfio_virqfd vfio pv680_mii(O)
    [ 3078.258880] CPU: 0 PID: 295 Comm: kworker/u8:5 Tainted: G           O      5.14.0-rc4+ #1
    [ 3078.269102] Hardware name:  , BIOS KpxxxFPGA 1P B600 V181 08/12/2021
    [ 3078.276801] Workqueue: hclge hclge_service_task [hclge]
    [ 3078.288774] pstate: 60400009 (nZCv daif +PAN -UAO -TCO BTYPE=--)
    [ 3078.296168] pc : napi_enable+0x80/0x84
    tc qdisc sho[w  3d0e7v8 .e3t0h218 79] lr : hns3_nic_net_open+0x138/0x510 [hns3]
    
    [ 3078.314771] sp : ffff8000108abb20
    [ 3078.319099] x29: ffff8000108abb20 x28: 0000000000000000 x27: ffff0820a8490300
    [ 3078.329121] x26: 0000000000000001 x25: ffff08209cfc6200 x24: 0000000000000000
    [ 3078.339044] x23: ffff0820a8490300 x22: ffff08209cd76000 x21: ffff0820abfe3880
    [ 3078.349018] x20: 0000000000000000 x19: ffff08209cd76900 x18: 0000000000000000
    [ 3078.358620] x17: 0000000000000000 x16: ffffc816e1727a50 x15: 0000ffff8f4ff930
    [ 3078.368895] x14: 0000000000000000 x13: 0000000000000000 x12: 0000259e9dbeb6b4
    [ 3078.377987] x11: 0096a8f7e764eb40 x10: 634615ad28d3eab5 x9 : ffffc816ad8885b8
    [ 3078.387091] x8 : ffff08209cfc6fb8 x7 : ffff0820ac0da058 x6 : ffff0820a8490344
    [ 3078.396356] x5 : 0000000000000140 x4 : 0000000000000003 x3 : ffff08209cd76938
    [ 3078.405365] x2 : 0000000000000000 x1 : 0000000000000010 x0 : ffff0820abfe38a0
    [ 3078.414657] Call trace:
    [ 3078.418517]  napi_enable+0x80/0x84
    [ 3078.424626]  hns3_reset_notify_up_enet+0x78/0xd0 [hns3]
    [ 3078.433469]  hns3_reset_notify+0x64/0x80 [hns3]
    [ 3078.441430]  hclge_notify_client+0x68/0xb0 [hclge]
    [ 3078.450511]  hclge_reset_rebuild+0x524/0x884 [hclge]
    [ 3078.458879]  hclge_reset_service_task+0x3c4/0x680 [hclge]
    [ 3078.467470]  hclge_service_task+0xb0/0xb54 [hclge]
    [ 3078.475675]  process_one_work+0x1dc/0x48c
    [ 3078.481888]  worker_thread+0x15c/0x464
    [ 3078.487104]  kthread+0x160/0x170
    [ 3078.492479]  ret_from_fork+0x10/0x18
    [ 3078.498785] Code: c8027c81 35ffffa2 d50323bf d65f03c0 (d4210000)
    [ 3078.506889] ---[ end trace 8ebe0340a1b0fb44 ]---
    
    Once hns3_nic_net_open() is excute success, the flag
    HNS3_NIC_STATE_DOWN will be cleared. So add checking for this
    flag, directly return when HNS3_NIC_STATE_DOWN is no set.
    
    Fixes: e888402789b9 ("net: hns3: call hns3_nic_net_open() while doing HNAE3_UP_CLIENT")
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87de237b0b5c9b1bfc31f912ca2aafb58a10c744
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Mon Sep 27 21:44:08 2021 +0530

    scsi: csiostor: Add module softdep on cxgb4
    
    [ Upstream commit 79a7482249a7353bc86aff8127954d5febf02472 ]
    
    Both cxgb4 and csiostor drivers run on their own independent Physical
    Function. But when cxgb4 and csiostor are both being loaded in parallel via
    modprobe, there is a race when firmware upgrade is attempted by both the
    drivers.
    
    When the cxgb4 driver initiates the firmware upgrade, it halts the firmware
    and the chip until upgrade is complete. When the csiostor driver is coming
    up in parallel, the firmware mailbox communication fails with timeouts and
    the csiostor driver probe fails.
    
    Add a module soft dependency on cxgb4 driver to ensure loading csiostor
    triggers cxgb4 to load first when available to avoid the firmware upgrade
    race.
    
    Link: https://lore.kernel.org/r/1632759248-15382-1-git-send-email-rahul.lakkireddy@chelsio.com
    Fixes: a3667aaed569 ("[SCSI] csiostor: Chelsio FCoE offload driver")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b6ccfcec6815321472c84a53adf6e1b88a59600
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Sep 28 06:33:15 2021 -0600

    Revert "block, bfq: honor already-setup queue merges"
    
    [ Upstream commit ebc69e897e17373fbe1daaff1debaa77583a5284 ]
    
    This reverts commit 2d52c58b9c9bdae0ca3df6a1eab5745ab3f7d80b.
    
    We have had several folks complain that this causes hangs for them, which
    is especially problematic as the commit has also hit stable already.
    
    As no resolution seems to be forthcoming right now, revert the patch.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=214503
    Fixes: 2d52c58b9c9b ("block, bfq: honor already-setup queue merges")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 753096c38aa9ffe8b7b7853b29eee3708a69ae27
Author: Jiri Benc <jbenc@redhat.com>
Date:   Thu Sep 23 10:40:22 2021 +0200

    selftests, bpf: test_lwt_ip_encap: Really disable rp_filter
    
    [ Upstream commit 79e2c306667542b8ee2d9a9d947eadc7039f0a3c ]
    
    It's not enough to set net.ipv4.conf.all.rp_filter=0, that does not override
    a greater rp_filter value on the individual interfaces. We also need to set
    net.ipv4.conf.default.rp_filter=0 before creating the interfaces. That way,
    they'll also get their own rp_filter value of zero.
    
    Fixes: 0fde56e4385b0 ("selftests: bpf: add test_lwt_ip_encap selftest")
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/b1cdd9d469f09ea6e01e9c89a6071c79b7380f89.1632386362.git.jbenc@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 897d1401d1d60e28b2a7edbcc4fc9d2e03b729c3
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Wed Sep 8 10:52:37 2021 -0700

    e100: fix buffer overrun in e100_get_regs
    
    [ Upstream commit 51032e6f17ce990d06123ad7307f258c50d25aa7 ]
    
    The e100_get_regs function is used to implement a simple register dump
    for the e100 device. The data is broken into a couple of MAC control
    registers, and then a series of PHY registers, followed by a memory dump
    buffer.
    
    The total length of the register dump is defined as (1 + E100_PHY_REGS)
    * sizeof(u32) + sizeof(nic->mem->dump_buf).
    
    The logic for filling in the PHY registers uses a convoluted inverted
    count for loop which counts from E100_PHY_REGS (0x1C) down to 0, and
    assigns the slots 1 + E100_PHY_REGS - i. The first loop iteration will
    fill in [1] and the final loop iteration will fill in [1 + 0x1C]. This
    is actually one more than the supposed number of PHY registers.
    
    The memory dump buffer is then filled into the space at
    [2 + E100_PHY_REGS] which will cause that memcpy to assign 4 bytes past
    the total size.
    
    The end result is that we overrun the total buffer size allocated by the
    kernel, which could lead to a panic or other issues due to memory
    corruption.
    
    It is difficult to determine the actual total number of registers
    here. The only 8255x datasheet I could find indicates there are 28 total
    MDI registers. However, we're reading 29 here, and reading them in
    reverse!
    
    In addition, the ethtool e100 register dump interface appears to read
    the first PHY register to determine if the device is in MDI or MDIx
    mode. This doesn't appear to be documented anywhere within the 8255x
    datasheet. I can only assume it must be in register 28 (the extra
    register we're reading here).
    
    Lets not change any of the intended meaning of what we copy here. Just
    extend the space by 4 bytes to account for the extra register and
    continue copying the data out in the same order.
    
    Change the E100_PHY_REGS value to be the correct total (29) so that the
    total register dump size is calculated properly. Fix the offset for
    where we copy the dump buffer so that it doesn't overrun the total size.
    
    Re-write the for loop to use counting up instead of the convoluted
    down-counting. Correct the mdio_read offset to use the 0-based register
    offsets, but maintain the bizarre reverse ordering so that we have the
    ABI expected by applications like ethtool. This requires and additional
    subtraction of 1. It seems a bit odd but it makes the flow of assignment
    into the register buffer easier to follow.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Felicitas Hetzelt <felicitashetzelt@gmail.com>
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93372e02f9698ec15e761e71de00ad64cc8d3688
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Wed Sep 8 10:52:36 2021 -0700

    e100: fix length calculation in e100_get_regs_len
    
    [ Upstream commit 4329c8dc110b25d5f04ed20c6821bb60deff279f ]
    
    commit abf9b902059f ("e100: cleanup unneeded math") tried to simplify
    e100_get_regs_len and remove a double 'divide and then multiply'
    calculation that the e100_reg_regs_len function did.
    
    This change broke the size calculation entirely as it failed to account
    for the fact that the numbered registers are actually 4 bytes wide and
    not 1 byte. This resulted in a significant under allocation of the
    register buffer used by e100_get_regs.
    
    Fix this by properly multiplying the register count by u32 first before
    adding the size of the dump buffer.
    
    Fixes: abf9b902059f ("e100: cleanup unneeded math")
    Reported-by: Felicitas Hetzelt <felicitashetzelt@gmail.com>
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2624e0934f0fe30770eb93955958c5f9f92af5a
Author: Xiao Liang <shaw.leon@gmail.com>
Date:   Thu Sep 23 23:03:19 2021 +0800

    net: ipv4: Fix rtnexthop len when RTA_FLOW is present
    
    [ Upstream commit 597aa16c782496bf74c5dc3b45ff472ade6cee64 ]
    
    Multipath RTA_FLOW is embedded in nexthop. Dump it in fib_add_nexthop()
    to get the length of rtnexthop correct.
    
    Fixes: b0f60193632e ("ipv4: Refactor nexthop attributes in fib_dump_info")
    Signed-off-by: Xiao Liang <shaw.leon@gmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c37d3287e7a268c870e47e72a8cbeb90811e173c
Author: Paul Fertser <fercerpav@gmail.com>
Date:   Fri Sep 24 12:30:11 2021 +0300

    hwmon: (tmp421) fix rounding for negative values
    
    [ Upstream commit 724e8af85854c4d3401313b6dd7d79cf792d8990 ]
    
    Old code produces -24999 for 0b1110011100000000 input in standard format due to
    always rounding up rather than "away from zero".
    
    Use the common macro for division, unify and simplify the conversion code along
    the way.
    
    Fixes: 9410700b881f ("hwmon: Add driver for Texas Instruments TMP421/422/423 sensor chips")
    Signed-off-by: Paul Fertser <fercerpav@gmail.com>
    Link: https://lore.kernel.org/r/20210924093011.26083-3-fercerpav@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a07d5aba34b443ae5ff3fb04d87a0ca05efa03c
Author: Paul Fertser <fercerpav@gmail.com>
Date:   Fri Sep 24 12:30:10 2021 +0300

    hwmon: (tmp421) report /PVLD condition as fault
    
    [ Upstream commit 540effa7f283d25bcc13c0940d808002fee340b8 ]
    
    For both local and remote sensors all the supported ICs can report an
    "undervoltage lockout" condition which means the conversion wasn't
    properly performed due to insufficient power supply voltage and so the
    measurement results can't be trusted.
    
    Fixes: 9410700b881f ("hwmon: Add driver for Texas Instruments TMP421/422/423 sensor chips")
    Signed-off-by: Paul Fertser <fercerpav@gmail.com>
    Link: https://lore.kernel.org/r/20210924093011.26083-2-fercerpav@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec018021cf445abbe8e2f3e2a7f1dcc813cb8ea1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Sep 23 00:05:04 2021 -0400

    sctp: break out if skb_header_pointer returns NULL in sctp_rcv_ootb
    
    [ Upstream commit f7e745f8e94492a8ac0b0a26e25f2b19d342918f ]
    
    We should always check if skb_header_pointer's return is NULL before
    using it, otherwise it may cause null-ptr-deref, as syzbot reported:
    
      KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
      RIP: 0010:sctp_rcv_ootb net/sctp/input.c:705 [inline]
      RIP: 0010:sctp_rcv+0x1d84/0x3220 net/sctp/input.c:196
      Call Trace:
      <IRQ>
       sctp6_rcv+0x38/0x60 net/sctp/ipv6.c:1109
       ip6_protocol_deliver_rcu+0x2e9/0x1ca0 net/ipv6/ip6_input.c:422
       ip6_input_finish+0x62/0x170 net/ipv6/ip6_input.c:463
       NF_HOOK include/linux/netfilter.h:307 [inline]
       NF_HOOK include/linux/netfilter.h:301 [inline]
       ip6_input+0x9c/0xd0 net/ipv6/ip6_input.c:472
       dst_input include/net/dst.h:460 [inline]
       ip6_rcv_finish net/ipv6/ip6_input.c:76 [inline]
       NF_HOOK include/linux/netfilter.h:307 [inline]
       NF_HOOK include/linux/netfilter.h:301 [inline]
       ipv6_rcv+0x28c/0x3c0 net/ipv6/ip6_input.c:297
    
    Fixes: 3acb50c18d8d ("sctp: delay as much as possible skb_linearize")
    Reported-by: syzbot+581aff2ae6b860625116@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bee85de2c8155388c09a2e1530a243ec1c96f05
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Sep 15 11:29:37 2021 +0200

    mac80211-hwsim: fix late beacon hrtimer handling
    
    [ Upstream commit 313bbd1990b6ddfdaa7da098d0c56b098a833572 ]
    
    Thomas explained in https://lore.kernel.org/r/87mtoeb4hb.ffs@tglx
    that our handling of the hrtimer here is wrong: If the timer fires
    late (e.g. due to vCPU scheduling, as reported by Dmitry/syzbot)
    then it tries to actually rearm the timer at the next deadline,
    which might be in the past already:
    
     1          2          3          N          N+1
     |          |          |   ...    |          |
    
     ^ intended to fire here (1)
                ^ next deadline here (2)
                                          ^ actually fired here
    
    The next time it fires, it's later, but will still try to schedule
    for the next deadline (now 3), etc. until it catches up with N,
    but that might take a long time, causing stalls etc.
    
    Now, all of this is simulation, so we just have to fix it, but
    note that the behaviour is wrong even per spec, since there's no
    value then in sending all those beacons unaligned - they should be
    aligned to the TBTT (1, 2, 3, ... in the picture), and if we're a
    bit (or a lot) late, then just resume at that point.
    
    Therefore, change the code to use hrtimer_forward_now() which will
    ensure that the next firing of the timer would be at N+1 (in the
    picture), i.e. the next interval point after the current time.
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: syzbot+0e964fad69a9c462bc1e@syzkaller.appspotmail.com
    Fixes: 01e59e467ecf ("mac80211_hwsim: hrtimer beacon")
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20210915112936.544f383472eb.I3f9712009027aa09244b65399bf18bf482a8c4f1@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21c3a844939c422d5403cafdb3e2a6a4d5bfea8a
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Sep 20 15:40:05 2021 +0200

    mac80211: mesh: fix potentially unaligned access
    
    [ Upstream commit b9731062ce8afd35cf723bf3a8ad55d208f915a5 ]
    
    The pointer here points directly into the frame, so the
    access is potentially unaligned. Use get_unaligned_le16
    to avoid that.
    
    Fixes: 3f52b7e328c5 ("mac80211: mesh power save basics")
    Link: https://lore.kernel.org/r/20210920154009.3110ff75be0c.Ib6a2ff9e9cc9bc6fca50fce631ec1ce725cc926b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab85997465b972d39d9747fc16311fa5773374b2
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Mon Sep 20 14:45:22 2021 +0200

    mac80211: limit injected vht mcs/nss in ieee80211_parse_tx_radiotap
    
    [ Upstream commit 13cb6d826e0ac0d144b0d48191ff1a111d32f0c6 ]
    
    Limit max values for vht mcs and nss in ieee80211_parse_tx_radiotap
    routine in order to fix the following warning reported by syzbot:
    
    WARNING: CPU: 0 PID: 10717 at include/net/mac80211.h:989 ieee80211_rate_set_vht include/net/mac80211.h:989 [inline]
    WARNING: CPU: 0 PID: 10717 at include/net/mac80211.h:989 ieee80211_parse_tx_radiotap+0x101e/0x12d0 net/mac80211/tx.c:2244
    Modules linked in:
    CPU: 0 PID: 10717 Comm: syz-executor.5 Not tainted 5.14.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:ieee80211_rate_set_vht include/net/mac80211.h:989 [inline]
    RIP: 0010:ieee80211_parse_tx_radiotap+0x101e/0x12d0 net/mac80211/tx.c:2244
    RSP: 0018:ffffc9000186f3e8 EFLAGS: 00010216
    RAX: 0000000000000618 RBX: ffff88804ef76500 RCX: ffffc900143a5000
    RDX: 0000000000040000 RSI: ffffffff888f478e RDI: 0000000000000003
    RBP: 00000000ffffffff R08: 0000000000000000 R09: 0000000000000100
    R10: ffffffff888f46f9 R11: 0000000000000000 R12: 00000000fffffff8
    R13: ffff88804ef7653c R14: 0000000000000001 R15: 0000000000000004
    FS:  00007fbf5718f700(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2de23000 CR3: 000000006a671000 CR4: 00000000001506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000600
    Call Trace:
     ieee80211_monitor_select_queue+0xa6/0x250 net/mac80211/iface.c:740
     netdev_core_pick_tx+0x169/0x2e0 net/core/dev.c:4089
     __dev_queue_xmit+0x6f9/0x3710 net/core/dev.c:4165
     __bpf_tx_skb net/core/filter.c:2114 [inline]
     __bpf_redirect_no_mac net/core/filter.c:2139 [inline]
     __bpf_redirect+0x5ba/0xd20 net/core/filter.c:2162
     ____bpf_clone_redirect net/core/filter.c:2429 [inline]
     bpf_clone_redirect+0x2ae/0x420 net/core/filter.c:2401
     bpf_prog_eeb6f53a69e5c6a2+0x59/0x234
     bpf_dispatcher_nop_func include/linux/bpf.h:717 [inline]
     __bpf_prog_run include/linux/filter.h:624 [inline]
     bpf_prog_run include/linux/filter.h:631 [inline]
     bpf_test_run+0x381/0xa30 net/bpf/test_run.c:119
     bpf_prog_test_run_skb+0xb84/0x1ee0 net/bpf/test_run.c:663
     bpf_prog_test_run kernel/bpf/syscall.c:3307 [inline]
     __sys_bpf+0x2137/0x5df0 kernel/bpf/syscall.c:4605
     __do_sys_bpf kernel/bpf/syscall.c:4691 [inline]
     __se_sys_bpf kernel/bpf/syscall.c:4689 [inline]
     __x64_sys_bpf+0x75/0xb0 kernel/bpf/syscall.c:4689
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x4665f9
    
    Reported-by: syzbot+0196ac871673f0c20f68@syzkaller.appspotmail.com
    Fixes: 646e76bb5daf4 ("mac80211: parse VHT info in injected frames")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Link: https://lore.kernel.org/r/c26c3f02dcb38ab63b2f2534cb463d95ee81bb13.1632141760.git.lorenzo@kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87e06c44280da43b7cf9826ac5bd49655c6236c4
Author: Chih-Kang Chang <gary.chang@realtek.com>
Date:   Mon Aug 30 15:32:40 2021 +0800

    mac80211: Fix ieee80211_amsdu_aggregate frag_tail bug
    
    [ Upstream commit fe94bac626d9c1c5bc98ab32707be8a9d7f8adba ]
    
    In ieee80211_amsdu_aggregate() set a pointer frag_tail point to the
    end of skb_shinfo(head)->frag_list, and use it to bind other skb in
    the end of this function. But when execute ieee80211_amsdu_aggregate()
    ->ieee80211_amsdu_realloc_pad()->pskb_expand_head(), the address of
    skb_shinfo(head)->frag_list will be changed. However, the
    ieee80211_amsdu_aggregate() not update frag_tail after call
    pskb_expand_head(). That will cause the second skb can't bind to the
    head skb appropriately.So we update the address of frag_tail to fix it.
    
    Fixes: 6e0456b54545 ("mac80211: add A-MSDU tx support")
    Signed-off-by: Chih-Kang Chang <gary.chang@realtek.com>
    Signed-off-by: Zong-Zhe Yang <kevin_yang@realtek.com>
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Link: https://lore.kernel.org/r/20210830073240.12736-1-pkshih@realtek.com
    [reword comment]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6c42ae1530f94724d3c42cf91fe3d3c5e394f8a
Author: Vadim Pasternak <vadimp@nvidia.com>
Date:   Thu Sep 16 21:31:51 2021 +0300

    hwmon: (mlxreg-fan) Return non-zero value when fan current state is enforced from sysfs
    
    [ Upstream commit e6fab7af6ba1bc77c78713a83876f60ca7a4a064 ]
    
    Fan speed minimum can be enforced from sysfs. For example, setting
    current fan speed to 20 is used to enforce fan speed to be at 100%
    speed, 19 - to be not below 90% speed, etcetera. This feature provides
    ability to limit fan speed according to some system wise
    considerations, like absence of some replaceable units or high system
    ambient temperature.
    
    Request for changing fan minimum speed is configuration request and can
    be set only through 'sysfs' write procedure. In this situation value of
    argument 'state' is above nominal fan speed maximum.
    
    Return non-zero code in this case to avoid
    thermal_cooling_device_stats_update() call, because in this case
    statistics update violates thermal statistics table range.
    The issues is observed in case kernel is configured with option
    CONFIG_THERMAL_STATISTICS.
    
    Here is the trace from KASAN:
    [  159.506659] BUG: KASAN: slab-out-of-bounds in thermal_cooling_device_stats_update+0x7d/0xb0
    [  159.516016] Read of size 4 at addr ffff888116163840 by task hw-management.s/7444
    [  159.545625] Call Trace:
    [  159.548366]  dump_stack+0x92/0xc1
    [  159.552084]  ? thermal_cooling_device_stats_update+0x7d/0xb0
    [  159.635869]  thermal_zone_device_update+0x345/0x780
    [  159.688711]  thermal_zone_device_set_mode+0x7d/0xc0
    [  159.694174]  mlxsw_thermal_modules_init+0x48f/0x590 [mlxsw_core]
    [  159.700972]  ? mlxsw_thermal_set_cur_state+0x5a0/0x5a0 [mlxsw_core]
    [  159.731827]  mlxsw_thermal_init+0x763/0x880 [mlxsw_core]
    [  160.070233] RIP: 0033:0x7fd995909970
    [  160.074239] Code: 73 01 c3 48 8b 0d 28 d5 2b 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 99 2d 2c 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ..
    [  160.095242] RSP: 002b:00007fff54f5d938 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [  160.103722] RAX: ffffffffffffffda RBX: 0000000000000013 RCX: 00007fd995909970
    [  160.111710] RDX: 0000000000000013 RSI: 0000000001906008 RDI: 0000000000000001
    [  160.119699] RBP: 0000000001906008 R08: 00007fd995bc9760 R09: 00007fd996210700
    [  160.127687] R10: 0000000000000073 R11: 0000000000000246 R12: 0000000000000013
    [  160.135673] R13: 0000000000000001 R14: 00007fd995bc8600 R15: 0000000000000013
    [  160.143671]
    [  160.145338] Allocated by task 2924:
    [  160.149242]  kasan_save_stack+0x19/0x40
    [  160.153541]  __kasan_kmalloc+0x7f/0xa0
    [  160.157743]  __kmalloc+0x1a2/0x2b0
    [  160.161552]  thermal_cooling_device_setup_sysfs+0xf9/0x1a0
    [  160.167687]  __thermal_cooling_device_register+0x1b5/0x500
    [  160.173833]  devm_thermal_of_cooling_device_register+0x60/0xa0
    [  160.180356]  mlxreg_fan_probe+0x474/0x5e0 [mlxreg_fan]
    [  160.248140]
    [  160.249807] The buggy address belongs to the object at ffff888116163400
    [  160.249807]  which belongs to the cache kmalloc-1k of size 1024
    [  160.263814] The buggy address is located 64 bytes to the right of
    [  160.263814]  1024-byte region [ffff888116163400, ffff888116163800)
    [  160.277536] The buggy address belongs to the page:
    [  160.282898] page:0000000012275840 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff888116167000 pfn:0x116160
    [  160.294872] head:0000000012275840 order:3 compound_mapcount:0 compound_pincount:0
    [  160.303251] flags: 0x200000000010200(slab|head|node=0|zone=2)
    [  160.309694] raw: 0200000000010200 ffffea00046f7208 ffffea0004928208 ffff88810004dbc0
    [  160.318367] raw: ffff888116167000 00000000000a0006 00000001ffffffff 0000000000000000
    [  160.327033] page dumped because: kasan: bad access detected
    [  160.333270]
    [  160.334937] Memory state around the buggy address:
    [  160.356469] >ffff888116163800: fc ..
    
    Fixes: 65afb4c8e7e4 ("hwmon: (mlxreg-fan) Add support for Mellanox FAN driver")
    Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
    Link: https://lore.kernel.org/r/20210916183151.869427-1-vadimp@nvidia.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c30592255c6b054f353c767a69c2fef7607248d
Author: Andrea Claudi <aclaudi@redhat.com>
Date:   Fri Sep 10 18:08:39 2021 +0200

    ipvs: check that ip_vs_conn_tab_bits is between 8 and 20
    
    [ Upstream commit 69e73dbfda14fbfe748d3812da1244cce2928dcb ]
    
    ip_vs_conn_tab_bits may be provided by the user through the
    conn_tab_bits module parameter. If this value is greater than 31, or
    less than 0, the shift operator used to derive tab_size causes undefined
    behaviour.
    
    Fix this checking ip_vs_conn_tab_bits value to be in the range specified
    in ipvs Kconfig. If not, simply use default value.
    
    Fixes: 6f7edb4881bf ("IPVS: Allow boot time change of hash size")
    Reported-by: Yi Chen <yiche@redhat.com>
    Signed-off-by: Andrea Claudi <aclaudi@redhat.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Acked-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a571d83acb564827867c54b30c3e5f05d6338ae
Author: Charlene Liu <Charlene.Liu@amd.com>
Date:   Mon Sep 20 14:30:02 2021 -0400

    drm/amd/display: Pass PCI deviceid into DC
    
    commit d942856865c733ff60450de9691af796ad71d7bc upstream.
    
    [why]
    pci deviceid not passed to dal dc, without proper break,
    dcn2.x falls into dcn3.x code path
    
    [how]
    pass in pci deviceid, and break once dal_version initialized.
    
    Reviewed-by: Zhan Liu <Zhan.Liu@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Signed-off-by: Charlene Liu <Charlene.Liu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3443eb443f3a2166675c40d81ed6bf74ac874e23
Author: Zelin Deng <zelin.deng@linux.alibaba.com>
Date:   Wed Sep 29 13:13:48 2021 +0800

    x86/kvmclock: Move this_cpu_pvti into kvmclock.h
    
    commit ad9af930680bb396c87582edc172b3a7cf2a3fbf upstream.
    
    There're other modules might use hv_clock_per_cpu variable like ptp_kvm,
    so move it into kvmclock.h and export the symbol to make it visiable to
    other modules.
    
    Signed-off-by: Zelin Deng <zelin.deng@linux.alibaba.com>
    Cc: <stable@vger.kernel.org>
    Message-Id: <1632892429-101194-2-git-send-email-zelin.deng@linux.alibaba.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50149e0866a82cef33e680ee68dc380a5bc75d32
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Sep 27 11:58:39 2021 +0200

    mac80211: fix use-after-free in CCMP/GCMP RX
    
    commit 94513069eb549737bcfc3d988d6ed4da948a2de8 upstream.
    
    When PN checking is done in mac80211, for fragmentation we need
    to copy the PN to the RX struct so we can later use it to do a
    comparison, since commit bf30ca922a0c ("mac80211: check defrag
    PN against current frame").
    
    Unfortunately, in that commit I used the 'hdr' variable without
    it being necessarily valid, so use-after-free could occur if it
    was necessary to reallocate (parts of) the frame.
    
    Fix this by reloading the variable after the code that results
    in the reallocations, if any.
    
    This fixes https://bugzilla.kernel.org/show_bug.cgi?id=214401.
    
    Cc: stable@vger.kernel.org
    Fixes: bf30ca922a0c ("mac80211: check defrag PN against current frame")
    Link: https://lore.kernel.org/r/20210927115838.12b9ac6bb233.I1d066acd5408a662c3b6e828122cd314fcb28cdb@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 956bc3ee3197f6427d7178bb495c52d075ecbdd9
Author: Jonathan Hsu <jonathan.hsu@mediatek.com>
Date:   Fri Sep 24 16:58:48 2021 +0800

    scsi: ufs: Fix illegal offset in UPIU event trace
    
    commit e8c2da7e329ce004fee748b921e4c765dc2fa338 upstream.
    
    Fix incorrect index for UTMRD reference in ufshcd_add_tm_upiu_trace().
    
    Link: https://lore.kernel.org/r/20210924085848.25500-1-jonathan.hsu@mediatek.com
    Fixes: 4b42d557a8ad ("scsi: ufs: core: Fix wrong Task Tag used in task management request UPIUs")
    Cc: stable@vger.kernel.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jonathan Hsu <jonathan.hsu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44d3c480e4e2a75bf6296a18b4356157991ccd80
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Tue Sep 21 18:51:51 2021 +0300

    hwmon: (w83791d) Fix NULL pointer dereference by removing unnecessary structure field
    
    commit 943c15ac1b84d378da26bba41c83c67e16499ac4 upstream.
    
    If driver read val value sufficient for
    (val & 0x08) && (!(val & 0x80)) && ((val & 0x7) == ((val >> 4) & 0x7))
    from device then Null pointer dereference occurs.
    (It is possible if tmp = 0b0xyz1xyz, where same literals mean same numbers)
    Also lm75[] does not serve a purpose anymore after switching to
    devm_i2c_new_dummy_device() in w83791d_detect_subclients().
    
    The patch fixes possible NULL pointer dereference by removing lm75[].
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Link: https://lore.kernel.org/r/20210921155153.28098-1-lutovinova@ispras.ru
    [groeck: Dropped unnecessary continuation lines, fixed multi-line alignment]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 200ced5ba724d8bbf29dfac4ed1e17a39ccaccd1
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Tue Sep 21 18:51:52 2021 +0300

    hwmon: (w83792d) Fix NULL pointer dereference by removing unnecessary structure field
    
    commit 0f36b88173f028e372668ae040ab1a496834d278 upstream.
    
    If driver read val value sufficient for
    (val & 0x08) && (!(val & 0x80)) && ((val & 0x7) == ((val >> 4) & 0x7))
    from device then Null pointer dereference occurs.
    (It is possible if tmp = 0b0xyz1xyz, where same literals mean same numbers)
    Also lm75[] does not serve a purpose anymore after switching to
    devm_i2c_new_dummy_device() in w83791d_detect_subclients().
    
    The patch fixes possible NULL pointer dereference by removing lm75[].
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Link: https://lore.kernel.org/r/20210921155153.28098-2-lutovinova@ispras.ru
    [groeck: Dropped unnecessary continuation lines, fixed multipline alignment]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cb01fe630eaffc5a2c3f7364436caddba286623
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Tue Sep 21 18:51:53 2021 +0300

    hwmon: (w83793) Fix NULL pointer dereference by removing unnecessary structure field
    
    commit dd4d747ef05addab887dc8ff0d6ab9860bbcd783 upstream.
    
    If driver read tmp value sufficient for
    (tmp & 0x08) && (!(tmp & 0x80)) && ((tmp & 0x7) == ((tmp >> 4) & 0x7))
    from device then Null pointer dereference occurs.
    (It is possible if tmp = 0b0xyz1xyz, where same literals mean same numbers)
    Also lm75[] does not serve a purpose anymore after switching to
    devm_i2c_new_dummy_device() in w83791d_detect_subclients().
    
    The patch fixes possible NULL pointer dereference by removing lm75[].
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Link: https://lore.kernel.org/r/20210921155153.28098-3-lutovinova@ispras.ru
    [groeck: Dropped unnecessary continuation lines, fixed multi-line alignments]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 504cf969d5856bd9a084da3bfe636ae4b42a6fe8
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Sep 16 13:34:24 2021 -0700

    fs-verity: fix signed integer overflow with i_size near S64_MAX
    
    commit 80f6e3080bfcf865062a926817b3ca6c4a137a57 upstream.
    
    If the file size is almost S64_MAX, the calculated number of Merkle tree
    levels exceeds FS_VERITY_MAX_LEVELS, causing FS_IOC_ENABLE_VERITY to
    fail.  This is unintentional, since as the comment above the definition
    of FS_VERITY_MAX_LEVELS states, it is enough for over U64_MAX bytes of
    data using SHA-256 and 4K blocks.  (Specifically, 4096*128**8 >= 2**64.)
    
    The bug is actually that when the number of blocks in the first level is
    calculated from i_size, there is a signed integer overflow due to i_size
    being signed.  Fix this by treating i_size as unsigned.
    
    This was found by the new test "generic: test fs-verity EFBIG scenarios"
    (https://lkml.kernel.org/r/b1d116cd4d0ea74b9cd86f349c672021e005a75c.1631558495.git.boris@bur.io).
    
    This didn't affect ext4 or f2fs since those have a smaller maximum file
    size, but it did affect btrfs which allows files up to S64_MAX bytes.
    
    Reported-by: Boris Burkov <boris@bur.io>
    Fixes: 3fda4c617e84 ("fs-verity: implement FS_IOC_ENABLE_VERITY ioctl")
    Fixes: fd2d1acfcadf ("fs-verity: add the hook for file ->open()")
    Cc: <stable@vger.kernel.org> # v5.4+
    Reviewed-by: Boris Burkov <boris@bur.io>
    Link: https://lore.kernel.org/r/20210916203424.113376-1-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2fb6ce06c0fa90ce0651fea6b668fb0248dc0ad
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Thu Sep 30 11:42:17 2021 +0200

    usb: cdns3: fix race condition before setting doorbell
    
    commit b69ec50b3e55c4b2a85c8bc46763eaf33060584 upstream
    
    For DEV_VER_V3 version there exist race condition between clearing
    ep_sts.EP_STS_TRBERR and setting ep_cmd.EP_CMD_DRDY bit.
    Setting EP_CMD_DRDY will be ignored by controller when
    EP_STS_TRBERR is set. So, between these two instructions we have
    a small time gap in which the EP_STS_TRBERR can be set. In such case
    the transfer will not start after setting doorbell.
    
    Fixes: 7733f6c32e36 ("usb: cdns3: Add Cadence USB3 DRD Driver")
    cc: <stable@vger.kernel.org> # 5.4.x
    Tested-by: Aswath Govindraju <a-govindraju@ti.com>
    Reviewed-by: Aswath Govindraju <a-govindraju@ti.com>
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2370e1935190054c10d476b5a33fa9e9a18b7e3
Author: James Morse <james.morse@arm.com>
Date:   Tue Sep 14 16:56:23 2021 +0000

    cpufreq: schedutil: Destroy mutex before kobject_put() frees the memory
    
    [ Upstream commit cdef1196608892b9a46caa5f2b64095a7f0be60c ]
    
    Since commit e5c6b312ce3c ("cpufreq: schedutil: Use kobject release()
    method to free sugov_tunables") kobject_put() has kfree()d the
    attr_set before gov_attr_set_put() returns.
    
    kobject_put() isn't the last user of attr_set in gov_attr_set_put(),
    the subsequent mutex_destroy() triggers a use-after-free:
    | BUG: KASAN: use-after-free in mutex_is_locked+0x20/0x60
    | Read of size 8 at addr ffff000800ca4250 by task cpuhp/2/20
    |
    | CPU: 2 PID: 20 Comm: cpuhp/2 Not tainted 5.15.0-rc1 #12369
    | Hardware name: ARM LTD ARM Juno Development Platform/ARM Juno Development
    | Platform, BIOS EDK II Jul 30 2018
    | Call trace:
    |  dump_backtrace+0x0/0x380
    |  show_stack+0x1c/0x30
    |  dump_stack_lvl+0x8c/0xb8
    |  print_address_description.constprop.0+0x74/0x2b8
    |  kasan_report+0x1f4/0x210
    |  kasan_check_range+0xfc/0x1a4
    |  __kasan_check_read+0x38/0x60
    |  mutex_is_locked+0x20/0x60
    |  mutex_destroy+0x80/0x100
    |  gov_attr_set_put+0xfc/0x150
    |  sugov_exit+0x78/0x190
    |  cpufreq_offline.isra.0+0x2c0/0x660
    |  cpuhp_cpufreq_offline+0x14/0x24
    |  cpuhp_invoke_callback+0x430/0x6d0
    |  cpuhp_thread_fun+0x1b0/0x624
    |  smpboot_thread_fn+0x5e0/0xa6c
    |  kthread+0x3a0/0x450
    |  ret_from_fork+0x10/0x20
    
    Swap the order of the calls.
    
    Fixes: e5c6b312ce3c ("cpufreq: schedutil: Use kobject release() method to free sugov_tunables")
    Cc: 4.7+ <stable@vger.kernel.org> # 4.7+
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67c98e023135ff81b8d52998a6fdb8ca0c518d82
Author: Kevin Hao <haokexin@gmail.com>
Date:   Thu Aug 5 15:29:17 2021 +0800

    cpufreq: schedutil: Use kobject release() method to free sugov_tunables
    
    [ Upstream commit e5c6b312ce3cc97e90ea159446e6bfa06645364d ]
    
    The struct sugov_tunables is protected by the kobject, so we can't free
    it directly. Otherwise we would get a call trace like this:
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x30
      WARNING: CPU: 3 PID: 720 at lib/debugobjects.c:505 debug_print_object+0xb8/0x100
      Modules linked in:
      CPU: 3 PID: 720 Comm: a.sh Tainted: G        W         5.14.0-rc1-next-20210715-yocto-standard+ #507
      Hardware name: Marvell OcteonTX CN96XX board (DT)
      pstate: 40400009 (nZcv daif +PAN -UAO -TCO BTYPE=--)
      pc : debug_print_object+0xb8/0x100
      lr : debug_print_object+0xb8/0x100
      sp : ffff80001ecaf910
      x29: ffff80001ecaf910 x28: ffff00011b10b8d0 x27: ffff800011043d80
      x26: ffff00011a8f0000 x25: ffff800013cb3ff0 x24: 0000000000000000
      x23: ffff80001142aa68 x22: ffff800011043d80 x21: ffff00010de46f20
      x20: ffff800013c0c520 x19: ffff800011d8f5b0 x18: 0000000000000010
      x17: 6e6968207473696c x16: 5f72656d6974203a x15: 6570797420746365
      x14: 6a626f2029302065 x13: 303378302f307830 x12: 2b6e665f72656d69
      x11: ffff8000124b1560 x10: ffff800012331520 x9 : ffff8000100ca6b0
      x8 : 000000000017ffe8 x7 : c0000000fffeffff x6 : 0000000000000001
      x5 : ffff800011d8c000 x4 : ffff800011d8c740 x3 : 0000000000000000
      x2 : ffff0001108301c0 x1 : ab3c90eedf9c0f00 x0 : 0000000000000000
      Call trace:
       debug_print_object+0xb8/0x100
       __debug_check_no_obj_freed+0x1c0/0x230
       debug_check_no_obj_freed+0x20/0x88
       slab_free_freelist_hook+0x154/0x1c8
       kfree+0x114/0x5d0
       sugov_exit+0xbc/0xc0
       cpufreq_exit_governor+0x44/0x90
       cpufreq_set_policy+0x268/0x4a8
       store_scaling_governor+0xe0/0x128
       store+0xc0/0xf0
       sysfs_kf_write+0x54/0x80
       kernfs_fop_write_iter+0x128/0x1c0
       new_sync_write+0xf0/0x190
       vfs_write+0x2d4/0x478
       ksys_write+0x74/0x100
       __arm64_sys_write+0x24/0x30
       invoke_syscall.constprop.0+0x54/0xe0
       do_el0_svc+0x64/0x158
       el0_svc+0x2c/0xb0
       el0t_64_sync_handler+0xb0/0xb8
       el0t_64_sync+0x198/0x19c
      irq event stamp: 5518
      hardirqs last  enabled at (5517): [<ffff8000100cbd7c>] console_unlock+0x554/0x6c8
      hardirqs last disabled at (5518): [<ffff800010fc0638>] el1_dbg+0x28/0xa0
      softirqs last  enabled at (5504): [<ffff8000100106e0>] __do_softirq+0x4d0/0x6c0
      softirqs last disabled at (5483): [<ffff800010049548>] irq_exit+0x1b0/0x1b8
    
    So split the original sugov_tunables_free() into two functions,
    sugov_clear_global_tunables() is just used to clear the global_tunables
    and the new sugov_tunables_free() is used as kobj_type::release to
    release the sugov_tunables safely.
    
    Fixes: 9bdcb44e391d ("cpufreq: schedutil: New governor based on scheduler utilization data")
    Cc: 4.7+ <stable@vger.kernel.org> # 4.7+
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 883f7897a25e3ce14a7f274ca4c73f49ac84002a
Author: Igor Matheus Andrade Torrente <igormtorrente@gmail.com>
Date:   Mon Jun 28 10:45:09 2021 -0300

    tty: Fix out-of-bound vmalloc access in imageblit
    
    [ Upstream commit 3b0c406124719b625b1aba431659f5cdc24a982c ]
    
    This issue happens when a userspace program does an ioctl
    FBIOPUT_VSCREENINFO passing the fb_var_screeninfo struct
    containing only the fields xres, yres, and bits_per_pixel
    with values.
    
    If this struct is the same as the previous ioctl, the
    vc_resize() detects it and doesn't call the resize_screen(),
    leaving the fb_var_screeninfo incomplete. And this leads to
    the updatescrollmode() calculates a wrong value to
    fbcon_display->vrows, which makes the real_y() return a
    wrong value of y, and that value, eventually, causes
    the imageblit to access an out-of-bound address value.
    
    To solve this issue I made the resize_screen() be called
    even if the screen does not need any resizing, so it will
    "fix and fill" the fb_var_screeninfo independently.
    
    Cc: stable <stable@vger.kernel.org> # after 5.15-rc2 is out, give it time to bake
    Reported-and-tested-by: syzbot+858dc7a2f7ef07c2c219@syzkaller.appspotmail.com
    Signed-off-by: Igor Matheus Andrade Torrente <igormtorrente@gmail.com>
    Link: https://lore.kernel.org/r/20210628134509.15895-1-igormtorrente@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
