commit f5247949c0a9304ae43a895f29216a9d876f3919
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 6 14:56:56 2021 +0100

    Linux 5.10.5
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210104155708.800470590@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12d377b93eef28af70219fcc83eeb637a1ff6853
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Dec 18 18:41:41 2020 -0800

    device-dax: Fix range release
    
    [ Upstream commit 6268d7da4d192af339f4d688942b9ccb45a65e04 ]
    
    There are multiple locations that open-code the release of the last
    range in a device-dax instance. Consolidate this into a new
    dev_dax_trim_range() helper.
    
    This also addresses a kmemleak report:
    
    # cat /sys/kernel/debug/kmemleak
    [..]
    unreferenced object 0xffff976bd46f6240 (size 64):
       comm "ndctl", pid 23556, jiffies 4299514316 (age 5406.733s)
       hex dump (first 32 bytes):
         00 00 00 00 00 00 00 00 00 00 20 c3 37 00 00 00  .......... .7...
         ff ff ff 7f 38 00 00 00 00 00 00 00 00 00 00 00  ....8...........
       backtrace:
         [<00000000064003cf>] __kmalloc_track_caller+0x136/0x379
         [<00000000d85e3c52>] krealloc+0x67/0x92
         [<00000000d7d3ba8a>] __alloc_dev_dax_range+0x73/0x25c
         [<0000000027d58626>] devm_create_dev_dax+0x27d/0x416
         [<00000000434abd43>] __dax_pmem_probe+0x1c9/0x1000 [dax_pmem_core]
         [<0000000083726c1c>] dax_pmem_probe+0x10/0x1f [dax_pmem]
         [<00000000b5f2319c>] nvdimm_bus_probe+0x9d/0x340 [libnvdimm]
         [<00000000c055e544>] really_probe+0x230/0x48d
         [<000000006cabd38e>] driver_probe_device+0x122/0x13b
         [<0000000029c7b95a>] device_driver_attach+0x5b/0x60
         [<0000000053e5659b>] bind_store+0xb7/0xc3
         [<00000000d3bdaadc>] drv_attr_store+0x27/0x31
         [<00000000949069c5>] sysfs_kf_write+0x4a/0x57
         [<000000004a8b5adf>] kernfs_fop_write+0x150/0x1e5
         [<00000000bded60f0>] __vfs_write+0x1b/0x34
         [<00000000b92900f0>] vfs_write+0xd8/0x1d1
    
    Reported-by: Jane Chu <jane.chu@oracle.com>
    Cc: Zhen Lei <thunder.leizhen@huawei.com>
    Link: https://lore.kernel.org/r/160834570161.1791850.14911670304441510419.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aceb8ae8e3b10503a2b82b17f626c9278fe792b4
Author: Chunguang Xu <brookxu@tencent.com>
Date:   Fri Dec 4 11:05:43 2020 +0800

    ext4: avoid s_mb_prefetch to be zero in individual scenarios
    
    [ Upstream commit 82ef1370b0c1757ab4ce29f34c52b4e93839b0aa ]
    
    Commit cfd732377221 ("ext4: add prefetching for block allocation
    bitmaps") introduced block bitmap prefetch, and expects to read block
    bitmaps of flex_bg through an IO.  However, it seems to ignore the
    value range of s_log_groups_per_flex.  In the scenario where the value
    of s_log_groups_per_flex is greater than 27, s_mb_prefetch or
    s_mb_prefetch_limit will overflow, cause a divide zero exception.
    
    In addition, the logic of calculating nr is also flawed, because the
    size of flexbg is fixed during a single mount, but s_mb_prefetch can
    be modified, which causes nr to fail to meet the value condition of
    [1, flexbg_size].
    
    To solve this problem, we need to set the upper limit of
    s_mb_prefetch.  Since we expect to load block bitmaps of a flex_bg
    through an IO, we can consider determining a reasonable upper limit
    among the IO limit parameters.  After consideration, we chose
    BLK_MAX_SEGMENT_SIZE.  This is a good choice to solve divide zero
    problem and avoiding performance degradation.
    
    [ Some minor code simplifications to make the changes easy to follow -- TYT ]
    
    Reported-by: Tosk Robot <tencent_os_robot@tencent.com>
    Signed-off-by: Chunguang Xu <brookxu@tencent.com>
    Reviewed-by: Samuel Liao <samuelliao@tencent.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/1607051143-24508-1-git-send-email-brookxu@tencent.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aff18aa806fd145e620ab9ae264caf3ec270e121
Author: Hyeongseok Kim <hyeongseok@gmail.com>
Date:   Thu Dec 3 09:46:59 2020 +0900

    dm verity: skip verity work if I/O error when system is shutting down
    
    [ Upstream commit 252bd1256396cebc6fc3526127fdb0b317601318 ]
    
    If emergency system shutdown is called, like by thermal shutdown,
    a dm device could be alive when the block device couldn't process
    I/O requests anymore. In this state, the handling of I/O errors
    by new dm I/O requests or by those already in-flight can lead to
    a verity corruption state, which is a misjudgment.
    
    So, skip verity work in response to I/O error when system is shutting
    down.
    
    Signed-off-by: Hyeongseok Kim <hyeongseok@gmail.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 610d2fa0ec76ad17e9ddf3f5b53a9f6df1a7e18e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 18 15:56:25 2020 +0100

    ALSA: pcm: Clear the full allocated memory at hw_params
    
    [ Upstream commit 618de0f4ef11acd8cf26902e65493d46cc20cc89 ]
    
    The PCM hw_params core function tries to clear up the PCM buffer
    before actually using for avoiding the information leak from the
    previous usages or the usage before a new allocation.  It performs the
    memset() with runtime->dma_bytes, but this might still leave some
    remaining bytes untouched; namely, the PCM buffer size is aligned in
    page size for mmap, hence runtime->dma_bytes doesn't necessarily cover
    all PCM buffer pages, and the remaining bytes are exposed via mmap.
    
    This patch changes the memory clearance to cover the all buffer pages
    if the stream is supposed to be mmap-ready (that guarantees that the
    buffer size is aligned in page size).
    
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Link: https://lore.kernel.org/r/20201218145625.2045-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7b04d27c9107fbc0d22dee67316f8584439df35
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Thu Dec 17 00:24:36 2020 +0000

    io_uring: remove racy overflow list fast checks
    
    [ Upstream commit 9cd2be519d05ee78876d55e8e902b7125f78b74f ]
    
    list_empty_careful() is not racy only if some conditions are met, i.e.
    no re-adds after del_init. io_cqring_overflow_flush() does list_move(),
    so it's actually racy.
    
    Remove those checks, we have ->cq_check_overflow for the fast path.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13f9eec229734b6952089b9bb315b2bd9c0f73b3
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Fri Dec 4 17:56:57 2020 +0100

    s390: always clear kernel stack backchain before calling functions
    
    [ Upstream commit 9365965db0c7ca7fc81eee27c21d8522d7102c32 ]
    
    Clear the kernel stack backchain before potentially calling the
    lockdep trace_hardirqs_off/on functions. Without this walking the
    kernel backchain, e.g. during a panic, might stop too early.
    
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 330c1ee7d59373ac91390779e2daddc5aa54deab
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Dec 6 22:12:55 2020 +0100

    tick/sched: Remove bogus boot "safety" check
    
    [ Upstream commit ba8ea8e7dd6e1662e34e730eadfc52aa6816f9dd ]
    
    can_stop_idle_tick() checks whether the do_timer() duty has been taken over
    by a CPU on boot. That's silly because the boot CPU always takes over with
    the initial clockevent device.
    
    But even if no CPU would have installed a clockevent and taken over the
    duty then the question whether the tick on the current CPU can be stopped
    or not is moot. In that case the current CPU would have no clockevent
    either, so there would be nothing to keep ticking.
    
    Remove it.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Frederic Weisbecker <frederic@kernel.org>
    Link: https://lore.kernel.org/r/20201206212002.725238293@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b22bc0f1663be126083cf5b4836ff5dc8d51f2e
Author: Jake Wang <haonan.wang2@amd.com>
Date:   Thu Dec 3 14:05:56 2020 -0500

    drm/amd/display: updated wm table for Renoir
    
    [ Upstream commit 410066d24cfc1071be25e402510367aca9db5cb6 ]
    
    [Why]
    For certain timings, Renoir may underflow due to sr exit
    latency being too slow.
    
    [How]
    Updated wm table for renoir.
    
    Signed-off-by: Jake Wang <haonan.wang2@amd.com>
    Reviewed-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86be0f2a0ef9d85e4872d4017b09e4e620d948ae
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Nov 12 09:37:59 2020 -0500

    ceph: fix inode refcount leak when ceph_fill_inode on non-I_NEW inode fails
    
    [ Upstream commit 68cbb8056a4c24c6a38ad2b79e0a9764b235e8fa ]
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bcfa178f92a1f7266d86205f9de134fd46f6e1e
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Dec 8 07:51:29 2020 -0500

    NFSv4.2: Don't error when exiting early on a READ_PLUS buffer overflow
    
    [ Upstream commit 503b934a752f7e789a5f33217520e0a79f3096ac ]
    
    Expanding the READ_PLUS extents can cause the read buffer to overflow.
    If it does, then don't error, but just exit early.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef3b9ad967d0bdfb4d18dad4e11279fdbd3256fb
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Sat Nov 21 23:13:56 2020 -0500

    um: ubd: Submit all data segments atomically
    
    [ Upstream commit fc6b6a872dcd48c6f39c7975836d75113db67d37 ]
    
    Internally, UBD treats each physical IO segment as a separate command to
    be submitted in the execution pipe.  If the pipe returns a transient
    error after a few segments have already been written, UBD will tell the
    block layer to requeue the request, but there is no way to reclaim the
    segments already submitted.  When a new attempt to dispatch the request
    is done, those segments already submitted will get duplicated, causing
    the WARN_ON below in the best case, and potentially data corruption.
    
    In my system, running a UML instance with 2GB of RAM and a 50M UBD disk,
    I can reproduce the WARN_ON by simply running mkfs.fvat against the
    disk on a freshly booted system.
    
    There are a few ways to around this, like reducing the pressure on
    the pipe by reducing the queue depth, which almost eliminates the
    occurrence of the problem, increasing the pipe buffer size on the host
    system, or by limiting the request to one physical segment, which causes
    the block layer to submit way more requests to resolve a single
    operation.
    
    Instead, this patch modifies the format of a UBD command, such that all
    segments are sent through a single element in the communication pipe,
    turning the command submission atomic from the point of view of the
    block layer.  The new format has a variable size, depending on the
    number of elements, and looks like this:
    
    +------------+-----------+-----------+------------
    | cmd_header | segment 0 | segment 1 | segment ...
    +------------+-----------+-----------+------------
    
    With this format, we push a pointer to cmd_header in the submission
    pipe.
    
    This has the advantage of reducing the memory footprint of executing a
    single request, since it allow us to merge some fields in the header.
    It is possible to reduce even further each segment memory footprint, by
    merging bitmap_words and cow_offset, for instance, but this is not the
    focus of this patch and is left as future work.  One issue with the
    patch is that for a big number of segments, we now perform one big
    memory allocation instead of multiple small ones, but I wasn't able to
    trigger any real issues or -ENOMEM because of this change, that wouldn't
    be reproduced otherwise.
    
    This was tested using fio with the verify-crc32 option, and by running
    an ext4 filesystem over this UBD device.
    
    The original WARN_ON was:
    
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at lib/refcount.c:28 refcount_warn_saturate+0x13f/0x141
    refcount_t: underflow; use-after-free.
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.5.0-rc6-00002-g2a5bb2cf75c8 #346
    Stack:
     6084eed0 6063dc77 00000009 6084ef60
     00000000 604b8d9f 6084eee0 6063dcbc
     6084ef40 6006ab8d e013d780 1c00000000
    Call Trace:
     [<600a0c1c>] ? printk+0x0/0x94
     [<6004a888>] show_stack+0x13b/0x155
     [<6063dc77>] ? dump_stack_print_info+0xdf/0xe8
     [<604b8d9f>] ? refcount_warn_saturate+0x13f/0x141
     [<6063dcbc>] dump_stack+0x2a/0x2c
     [<6006ab8d>] __warn+0x107/0x134
     [<6008da6c>] ? wake_up_process+0x17/0x19
     [<60487628>] ? blk_queue_max_discard_sectors+0x0/0xd
     [<6006b05f>] warn_slowpath_fmt+0xd1/0xdf
     [<6006af8e>] ? warn_slowpath_fmt+0x0/0xdf
     [<600acc14>] ? raw_read_seqcount_begin.constprop.0+0x0/0x15
     [<600619ae>] ? os_nsecs+0x1d/0x2b
     [<604b8d9f>] refcount_warn_saturate+0x13f/0x141
     [<6048bc8f>] refcount_sub_and_test.constprop.0+0x2f/0x37
     [<6048c8de>] blk_mq_free_request+0xf1/0x10d
     [<6048ca06>] __blk_mq_end_request+0x10c/0x114
     [<6005ac0f>] ubd_intr+0xb5/0x169
     [<600a1a37>] __handle_irq_event_percpu+0x6b/0x17e
     [<600a1b70>] handle_irq_event_percpu+0x26/0x69
     [<600a1bd9>] handle_irq_event+0x26/0x34
     [<600a1bb3>] ? handle_irq_event+0x0/0x34
     [<600a5186>] ? unmask_irq+0x0/0x37
     [<600a57e6>] handle_edge_irq+0xbc/0xd6
     [<600a131a>] generic_handle_irq+0x21/0x29
     [<60048f6e>] do_IRQ+0x39/0x54
     [...]
    ---[ end trace c6e7444e55386c0f ]---
    
    Cc: Christopher Obbard <chris.obbard@collabora.com>
    Reported-by: Martyn Welch <martyn@collabora.com>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Tested-by: Christopher Obbard <chris.obbard@collabora.com>
    Acked-by: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8b49c4bdf8770008ab72fd4573bfd1d71ea71df
Author: Christopher Obbard <chris.obbard@collabora.com>
Date:   Tue Oct 27 15:30:22 2020 +0000

    um: random: Register random as hwrng-core device
    
    [ Upstream commit 72d3e093afae79611fa38f8f2cfab9a888fe66f2 ]
    
    The UML random driver creates a dummy device under the guest,
    /dev/hw_random. When this file is read from the guest, the driver
    reads from the host machine's /dev/random, in-turn reading from
    the host kernel's entropy pool. This entropy pool could have been
    filled by a hardware random number generator or just the host
    kernel's internal software entropy generator.
    
    Currently the driver does not fill the guests kernel entropy pool,
    this requires a userspace tool running inside the guest (like
    rng-tools) to read from the dummy device provided by this driver,
    which then would fill the guest's internal entropy pool.
    
    This all seems quite pointless when we are already reading from an
    entropy pool, so this patch aims to register the device as a hwrng
    device using the hwrng-core framework. This not only improves and
    cleans up the driver, but also fills the guest's entropy pool
    without having to resort to using extra userspace tools in the guest.
    
    This is typically a nuisance when booting a guest: the random pool
    takes a long time (~200s) to build up enough entropy since the dummy
    hwrng is not used to fill the guest's pool.
    
    This port was originally attempted by Alexander Neville "dark" (in CC,
    discussion in Link), but the conversation there stalled since the
    handling of -EAGAIN errors were no removed and longer handled by the
    driver. This patch attempts to use the existing method of error
    handling but utilises the new hwrng core.
    
    The issue can be noticed when booting a UML guest:
    
        [    2.560000] random: fast init done
        [  214.000000] random: crng init done
    
    With the patch applied, filling the pool becomes a lot quicker:
    
        [    2.560000] random: fast init done
        [   12.000000] random: crng init done
    
    Cc: Alexander Neville <dark@volatile.bz>
    Link: https://lore.kernel.org/lkml/20190828204609.02a7ff70@TheDarkness/
    Link: https://lore.kernel.org/lkml/20190829135001.6a5ff940@TheDarkness.local/
    Cc: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
    Signed-off-by: Christopher Obbard <chris.obbard@collabora.com>
    Acked-by: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0aa2eecf8534177d5f8ad8aeeaa50abef3db4f3d
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Oct 30 23:49:09 2020 +0800

    watchdog: rti-wdt: fix reference leak in rti_wdt_probe
    
    [ Upstream commit 8711071e9700b67045fe5518161d63f7a03e3c9e ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in rti_wdt_probe, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201030154909.100023-1-zhangqilong3@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eae1fb3bc565ea3d6c88f4cc488cd0f35f5090c0
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Oct 31 21:40:21 2020 -0700

    fs/namespace.c: WARN if mnt_count has become negative
    
    [ Upstream commit edf7ddbf1c5eb98b720b063b73e20e8a4a1ce673 ]
    
    Missing calls to mntget() (or equivalently, too many calls to mntput())
    are hard to detect because mntput() delays freeing mounts using
    task_work_add(), then again using call_rcu().  As a result, mnt_count
    can often be decremented to -1 without getting a KASAN use-after-free
    report.  Such cases are still bugs though, and they point to real
    use-after-frees being possible.
    
    For an example of this, see the bug fixed by commit 1b0b9cc8d379
    ("vfs: fsmount: add missing mntget()"), discussed at
    https://lkml.kernel.org/linux-fsdevel/20190605135401.GB30925@xxxxxxxxxxxxxxxxxxxxxxxxx/T/#u.
    This bug *should* have been trivial to find.  But actually, it wasn't
    found until syzkaller happened to use fchdir() to manipulate the
    reference count just right for the bug to be noticeable.
    
    Address this by making mntput_no_expire() issue a WARN if mnt_count has
    become negative.
    
    Suggested-by: Miklos Szeredi <miklos@szeredi.hu>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1e155ccc882cd54ca613965df5653860438b67a
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Sat Nov 7 11:43:36 2020 +1000

    powerpc/64: irq replay remove decrementer overflow check
    
    [ Upstream commit 59d512e4374b2d8a6ad341475dc94c4a4bdec7d3 ]
    
    This is way to catch some cases of decrementer overflow, when the
    decrementer has underflowed an odd number of times, while MSR[EE] was
    disabled.
    
    With a typical small decrementer, a timer that fires when MSR[EE] is
    disabled will be "lost" if MSR[EE] remains disabled for between 4.3 and
    8.6 seconds after the timer expires. In any case, the decrementer
    interrupt would be taken at 8.6 seconds and the timer would be found at
    that point.
    
    So this check is for catching extreme latency events, and it prevents
    those latencies from being a further few seconds long.  It's not obvious
    this is a good tradeoff. This is already a watchdog magnitude event and
    that situation is not improved a significantly with this check. For
    large decrementers, it's useless.
    
    Therefore remove this check, which avoids a mftb when enabling hard
    disabled interrupts (e.g., when enabling after coming from hardware
    interrupt handlers). Perhaps more importantly, it also removes the
    clunky MSR[EE] vs PACA_IRQ_HARD_DIS incoherency in soft-interrupt replay
    which simplifies the code.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201107014336.2337337-1-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b5b2b76834487c85e4f30a37f2bc6cb1936239a
Author: Jessica Yu <jeyu@kernel.org>
Date:   Fri Nov 27 10:09:39 2020 +0100

    module: delay kobject uevent until after module init call
    
    [ Upstream commit 38dc717e97153e46375ee21797aa54777e5498f3 ]
    
    Apparently there has been a longstanding race between udev/systemd and
    the module loader. Currently, the module loader sends a uevent right
    after sysfs initialization, but before the module calls its init
    function. However, some udev rules expect that the module has
    initialized already upon receiving the uevent.
    
    This race has been triggered recently (see link in references) in some
    systemd mount unit files. For instance, the configfs module creates the
    /sys/kernel/config mount point in its init function, however the module
    loader issues the uevent before this happens. sys-kernel-config.mount
    expects to be able to mount /sys/kernel/config upon receipt of the
    module loading uevent, but if the configfs module has not called its
    init function yet, then this directory will not exist and the mount unit
    fails. A similar situation exists for sys-fs-fuse-connections.mount, as
    the fuse sysfs mount point is created during the fuse module's init
    function. If udev is faster than module initialization then the mount
    unit would fail in a similar fashion.
    
    To fix this race, delay the module KOBJ_ADD uevent until after the
    module has finished calling its init routine.
    
    References: https://github.com/systemd/systemd/issues/17586
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-By: Nicolas Morey-Chaisemartin <nmoreychaisemartin@suse.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db6129f6ad88dadfb07453622fecc762daffafef
Author: Daeho Jeong <daehojeong@google.com>
Date:   Sat Dec 5 13:26:26 2020 +0900

    f2fs: fix race of pending_pages in decompression
    
    [ Upstream commit 6422a71ef40e4751d59b8c9412e7e2dafe085878 ]
    
    I found out f2fs_free_dic() is invoked in a wrong timing, but
    f2fs_verify_bio() still needed the dic info and it triggered the
    below kernel panic. It has been caused by the race condition of
    pending_pages value between decompression and verity logic, when
    the same compression cluster had been split in different bios.
    By split bios, f2fs_verify_bio() ended up with decreasing
    pending_pages value before it is reset to nr_cpages by
    f2fs_decompress_pages() and caused the kernel panic.
    
    [ 4416.564763] Unable to handle kernel NULL pointer dereference
                   at virtual address 0000000000000000
    ...
    [ 4416.896016] Workqueue: fsverity_read_queue f2fs_verity_work
    [ 4416.908515] pc : fsverity_verify_page+0x20/0x78
    [ 4416.913721] lr : f2fs_verify_bio+0x11c/0x29c
    [ 4416.913722] sp : ffffffc019533cd0
    [ 4416.913723] x29: ffffffc019533cd0 x28: 0000000000000402
    [ 4416.913724] x27: 0000000000000001 x26: 0000000000000100
    [ 4416.913726] x25: 0000000000000001 x24: 0000000000000004
    [ 4416.913727] x23: 0000000000001000 x22: 0000000000000000
    [ 4416.913728] x21: 0000000000000000 x20: ffffffff2076f9c0
    [ 4416.913729] x19: ffffffff2076f9c0 x18: ffffff8a32380c30
    [ 4416.913731] x17: ffffffc01f966d97 x16: 0000000000000298
    [ 4416.913732] x15: 0000000000000000 x14: 0000000000000000
    [ 4416.913733] x13: f074faec89ffffff x12: 0000000000000000
    [ 4416.913734] x11: 0000000000001000 x10: 0000000000001000
    [ 4416.929176] x9 : ffffffff20d1f5c7 x8 : 0000000000000000
    [ 4416.929178] x7 : 626d7464ff286b6b x6 : ffffffc019533ade
    [ 4416.929179] x5 : 000000008049000e x4 : ffffffff2793e9e0
    [ 4416.929180] x3 : 000000008049000e x2 : ffffff89ecfa74d0
    [ 4416.929181] x1 : 0000000000000c40 x0 : ffffffff2076f9c0
    [ 4416.929184] Call trace:
    [ 4416.929187]  fsverity_verify_page+0x20/0x78
    [ 4416.929189]  f2fs_verify_bio+0x11c/0x29c
    [ 4416.929192]  f2fs_verity_work+0x58/0x84
    [ 4417.050667]  process_one_work+0x270/0x47c
    [ 4417.055354]  worker_thread+0x27c/0x4d8
    [ 4417.059784]  kthread+0x13c/0x320
    [ 4417.063693]  ret_from_fork+0x10/0x18
    
    Chao pointed this can happen by the below race condition.
    
    Thread A        f2fs_post_read_wq          fsverity_wq
    - f2fs_read_multi_pages()
      - f2fs_alloc_dic
       - dic->pending_pages = 2
       - submit_bio()
       - submit_bio()
                   - f2fs_post_read_work() handle first bio
                    - f2fs_decompress_work()
                     - __read_end_io()
                      - f2fs_decompress_pages()
                       - dic->pending_pages--
                    - enqueue f2fs_verity_work()
                                               - f2fs_verity_work() handle first bio
                                                - f2fs_verify_bio()
                                                 - dic->pending_pages--
                   - f2fs_post_read_work() handle second bio
                    - f2fs_decompress_work()
                    - enqueue f2fs_verity_work()
                                                - f2fs_verify_pages()
                                                - f2fs_free_dic()
    
                                              - f2fs_verity_work() handle second bio
                                               - f2fs_verfy_bio()
                                                     - use-after-free on dic
    
    Signed-off-by: Daeho Jeong <daehojeong@google.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee3f8aefd0373f9d83ad975651281ec8ee2fa749
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri Nov 6 13:22:05 2020 -0800

    f2fs: avoid race condition for shrinker count
    
    [ Upstream commit a95ba66ac1457b76fe472c8e092ab1006271f16c ]
    
    Light reported sometimes shinker gets nat_cnt < dirty_nat_cnt resulting in
    wrong do_shinker work. Let's avoid to return insane overflowed value by adding
    single tracking value.
    
    Reported-by: Light Hsieh <Light.Hsieh@mediatek.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c0f0f5f58a785fa373fc38200d16feded0ceb5b
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed Nov 25 12:06:14 2020 -0500

    NFSv4: Fix a pNFS layout related use-after-free race when freeing the inode
    
    [ Upstream commit b6d49ecd1081740b6e632366428b960461f8158b ]
    
    When returning the layout in nfs4_evict_inode(), we need to ensure that
    the layout is actually done being freed before we can proceed to free the
    inode itself.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06ac2ca0989d6b60909abce0dc2b41c799a76d4c
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Wed Oct 28 17:15:43 2020 +0800

    i3c master: fix missing destroy_workqueue() on error in i3c_master_register
    
    [ Upstream commit 59165d16c699182b86b5c65181013f1fd88feb62 ]
    
    Add the missing destroy_workqueue() before return from
    i3c_master_register in the error handling case.
    
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Link: https://lore.kernel.org/linux-i3c/20201028091543.136167-1-miaoqinglang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 498d90690f24d13e11d961e8089e64f4e3aa0ff5
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Wed Oct 28 17:15:51 2020 +0800

    powerpc: sysdev: add missing iounmap() on error in mpic_msgr_probe()
    
    [ Upstream commit ffa1797040c5da391859a9556be7b735acbe1242 ]
    
    I noticed that iounmap() of msgr_block_addr before return from
    mpic_msgr_probe() in the error handling case is missing. So use
    devm_ioremap() instead of just ioremap() when remapping the message
    register block, so the mapping will be automatically released on
    probe failure.
    
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201028091551.136400-1-miaoqinglang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acc3c8cc27a80a6caa0b94e3800d190bbb6af830
Author: Zheng Liang <zhengliang6@huawei.com>
Date:   Thu Nov 12 17:31:39 2020 +0800

    rtc: pl031: fix resource leak in pl031_probe
    
    [ Upstream commit 1eab0fea2514b269e384c117f5b5772b882761f0 ]
    
    When devm_rtc_allocate_device is failed in pl031_probe, it should release
    mem regions with device.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zheng Liang <zhengliang6@huawei.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20201112093139.32566-1-zhengliang6@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26058c397b9f67708d9d8b9207ab005da627c665
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 2 16:32:10 2020 +0100

    quota: Don't overflow quota file offsets
    
    [ Upstream commit 10f04d40a9fa29785206c619f80d8beedb778837 ]
    
    The on-disk quota format supports quota files with upto 2^32 blocks. Be
    careful when computing quota file offsets in the quota files from block
    numbers as they can overflow 32-bit types. Since quota files larger than
    4GB would require ~26 millions of quota users, this is mostly a
    theoretical concern now but better be careful, fuzzers would find the
    problem sooner or later anyway...
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb2ab902f6f0ff0be64c3d81a39795c54c8c45f3
Author: Miroslav Benes <mbenes@suse.cz>
Date:   Tue Oct 27 15:03:36 2020 +0100

    module: set MODULE_STATE_GOING state when a module fails to load
    
    [ Upstream commit 5e8ed280dab9eeabc1ba0b2db5dbe9fe6debb6b5 ]
    
    If a module fails to load due to an error in prepare_coming_module(),
    the following error handling in load_module() runs with
    MODULE_STATE_COMING in module's state. Fix it by correctly setting
    MODULE_STATE_GOING under "bug_cleanup" label.
    
    Signed-off-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ad9a6e6139dabe347ce6c259765667069b6e11f
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue Oct 20 14:12:26 2020 +0800

    rtc: sun6i: Fix memleak in sun6i_rtc_clk_init
    
    [ Upstream commit 28d211919e422f58c1e6c900e5810eee4f1ce4c8 ]
    
    When clk_hw_register_fixed_rate_with_accuracy() fails,
    clk_data should be freed. It's the same for the subsequent
    two error paths, but we should also unregister the already
    registered clocks in them.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20201020061226.6572-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5a2f093b6b16db004619d6403f68c75ee85d794
Author: Xiaoguang Wang <xiaoguang.wang@linux.alibaba.com>
Date:   Thu Nov 19 17:44:46 2020 +0800

    io_uring: check kthread stopped flag when sq thread is unparked
    
    commit 65b2b213484acd89a3c20dbb524e52a2f3793b78 upstream.
    
    syzbot reports following issue:
    INFO: task syz-executor.2:12399 can't die for more than 143 seconds.
    task:syz-executor.2  state:D stack:28744 pid:12399 ppid:  8504 flags:0x00004004
    Call Trace:
     context_switch kernel/sched/core.c:3773 [inline]
     __schedule+0x893/0x2170 kernel/sched/core.c:4522
     schedule+0xcf/0x270 kernel/sched/core.c:4600
     schedule_timeout+0x1d8/0x250 kernel/time/timer.c:1847
     do_wait_for_common kernel/sched/completion.c:85 [inline]
     __wait_for_common kernel/sched/completion.c:106 [inline]
     wait_for_common kernel/sched/completion.c:117 [inline]
     wait_for_completion+0x163/0x260 kernel/sched/completion.c:138
     kthread_stop+0x17a/0x720 kernel/kthread.c:596
     io_put_sq_data fs/io_uring.c:7193 [inline]
     io_sq_thread_stop+0x452/0x570 fs/io_uring.c:7290
     io_finish_async fs/io_uring.c:7297 [inline]
     io_sq_offload_create fs/io_uring.c:8015 [inline]
     io_uring_create fs/io_uring.c:9433 [inline]
     io_uring_setup+0x19b7/0x3730 fs/io_uring.c:9507
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45deb9
    Code: Unable to access opcode bytes at RIP 0x45de8f.
    RSP: 002b:00007f174e51ac78 EFLAGS: 00000246 ORIG_RAX: 00000000000001a9
    RAX: ffffffffffffffda RBX: 0000000000008640 RCX: 000000000045deb9
    RDX: 0000000000000000 RSI: 0000000020000140 RDI: 00000000000050e5
    RBP: 000000000118bf58 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 000000000118bf2c
    R13: 00007ffed9ca723f R14: 00007f174e51b9c0 R15: 000000000118bf2c
    INFO: task syz-executor.2:12399 blocked for more than 143 seconds.
          Not tainted 5.10.0-rc3-next-20201110-syzkaller #0
    "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    
    Currently we don't have a reproducer yet, but seems that there is a
    race in current codes:
    => io_put_sq_data
          ctx_list is empty now.       |
    ==> kthread_park(sqd->thread);     |
                                       | T1: sq thread is parked now.
    ==> kthread_stop(sqd->thread);     |
        KTHREAD_SHOULD_STOP is set now.|
    ===> kthread_unpark(k);            |
                                       | T2: sq thread is now unparkd, run again.
                                       |
                                       | T3: sq thread is now preempted out.
                                       |
    ===> wake_up_process(k);           |
                                       |
                                       | T4: Since sqd ctx_list is empty, needs_sched will be true,
                                       | then sq thread sets task state to TASK_INTERRUPTIBLE,
                                       | and schedule, now sq thread will never be waken up.
    ===> wait_for_completion           |
    
    I have artificially used mdelay() to simulate above race, will get same
    stack like this syzbot report, but to be honest, I'm not sure this code
    race triggers syzbot report.
    
    To fix this possible code race, when sq thread is unparked, need to check
    whether sq thread has been stopped.
    
    Reported-by: syzbot+03beeb595f074db9cfd1@syzkaller.appspotmail.com
    Signed-off-by: Xiaoguang Wang <xiaoguang.wang@linux.alibaba.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 908030501772553dc8553792d6c97a24000ab04a
Author: Boqun Feng <boqun.feng@gmail.com>
Date:   Thu Nov 5 14:23:51 2020 +0800

    fcntl: Fix potential deadlock in send_sig{io, urg}()
    
    commit 8d1ddb5e79374fb277985a6b3faa2ed8631c5b4c upstream.
    
    Syzbot reports a potential deadlock found by the newly added recursive
    read deadlock detection in lockdep:
    
    [...] ========================================================
    [...] WARNING: possible irq lock inversion dependency detected
    [...] 5.9.0-rc2-syzkaller #0 Not tainted
    [...] --------------------------------------------------------
    [...] syz-executor.1/10214 just changed the state of lock:
    [...] ffff88811f506338 (&f->f_owner.lock){.+..}-{2:2}, at: send_sigurg+0x1d/0x200
    [...] but this lock was taken by another, HARDIRQ-safe lock in the past:
    [...]  (&dev->event_lock){-...}-{2:2}
    [...]
    [...]
    [...] and interrupts could create inverse lock ordering between them.
    [...]
    [...]
    [...] other info that might help us debug this:
    [...] Chain exists of:
    [...]   &dev->event_lock --> &new->fa_lock --> &f->f_owner.lock
    [...]
    [...]  Possible interrupt unsafe locking scenario:
    [...]
    [...]        CPU0                    CPU1
    [...]        ----                    ----
    [...]   lock(&f->f_owner.lock);
    [...]                                local_irq_disable();
    [...]                                lock(&dev->event_lock);
    [...]                                lock(&new->fa_lock);
    [...]   <Interrupt>
    [...]     lock(&dev->event_lock);
    [...]
    [...]  *** DEADLOCK ***
    
    The corresponding deadlock case is as followed:
    
            CPU 0           CPU 1           CPU 2
            read_lock(&fown->lock);
                            spin_lock_irqsave(&dev->event_lock, ...)
                                            write_lock_irq(&filp->f_owner.lock); // wait for the lock
                            read_lock(&fown-lock); // have to wait until the writer release
                                                   // due to the fairness
            <interrupted>
            spin_lock_irqsave(&dev->event_lock); // wait for the lock
    
    The lock dependency on CPU 1 happens if there exists a call sequence:
    
            input_inject_event():
              spin_lock_irqsave(&dev->event_lock,...);
              input_handle_event():
                input_pass_values():
                  input_to_handler():
                    handler->event(): // evdev_event()
                      evdev_pass_values():
                        spin_lock(&client->buffer_lock);
                        __pass_event():
                          kill_fasync():
                            kill_fasync_rcu():
                              read_lock(&fa->fa_lock);
                              send_sigio():
                                read_lock(&fown->lock);
    
    To fix this, make the reader in send_sigurg() and send_sigio() use
    read_lock_irqsave() and read_lock_irqrestore().
    
    Reported-by: syzbot+22e87cdf94021b984aa6@syzkaller.appspotmail.com
    Reported-by: syzbot+c5e32344981ad9f33750@syzkaller.appspotmail.com
    Signed-off-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 721972b8665f784f6d840d9ef563a8971565c569
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 9 15:59:11 2020 -0500

    ext4: check for invalid block size early when mounting a file system
    
    commit c9200760da8a728eb9767ca41a956764b28c1310 upstream.
    
    Check for valid block size directly by validating s_log_block_size; we
    were doing this in two places.  First, by calculating blocksize via
    BLOCK_SIZE << s_log_block_size, and then checking that the blocksize
    was valid.  And then secondly, by checking s_log_block_size directly.
    
    The first check is not reliable, and can trigger an UBSAN warning if
    s_log_block_size on a maliciously corrupted superblock is greater than
    22.  This is harmless, since the second test will correctly reject the
    maliciously fuzzed file system, but to make syzbot shut up, and
    because the two checks are duplicative in any case, delete the
    blocksize check, and move the s_log_block_size earlier in
    ext4_fill_super().
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reported-by: syzbot+345b75652b1d24227443@syzkaller.appspotmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ed894f1117e5e1347e059943480265e3f8480e3
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Dec 15 20:45:44 2020 -0800

    bfs: don't use WARNING: string when it's just info.
    
    commit dc889b8d4a8122549feabe99eead04e6b23b6513 upstream.
    
    Make the printk() [bfs "printf" macro] seem less severe by changing
    "WARNING:" to "NOTE:".
    
    <asm-generic/bug.h> warns us about using WARNING or BUG in a format string
    other than in WARN() or BUG() family macros.  bfs/inode.c is doing just
    that in a normal printk() call, so change the "WARNING" string to be
    "NOTE".
    
    Link: https://lkml.kernel.org/r/20201203212634.17278-1-rdunlap@infradead.org
    Reported-by: syzbot+3fd34060f26e766536ff@syzkaller.appspotmail.com
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Al Viro <viro@ZenIV.linux.org.uk>
    Cc: "Tigran A. Aivazian" <aivazian.tigran@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb05e983eaf71f1913151da1b68fdd633957fd38
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Dec 6 09:35:27 2020 +0100

    ALSA: rawmidi: Access runtime->avail always in spinlock
    
    commit 88a06d6fd6b369d88cec46c62db3e2604a2f50d5 upstream.
    
    The runtime->avail field may be accessed concurrently while some
    places refer to it without taking the runtime->lock spinlock, as
    detected by KCSAN.  Usually this isn't a big problem, but for
    consistency and safety, we should take the spinlock at each place
    referencing this field.
    
    Reported-by: syzbot+a23a6f1215c84756577c@syzkaller.appspotmail.com
    Reported-by: syzbot+3d367d1df1d2b67f5c19@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201206083527.21163-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf7fe671cd7eba22a4e4dbcd786fee57669b432b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Dec 6 09:34:56 2020 +0100

    ALSA: seq: Use bool for snd_seq_queue internal flags
    
    commit 4ebd47037027c4beae99680bff3b20fdee5d7c1e upstream.
    
    The snd_seq_queue struct contains various flags in the bit fields.
    Those are categorized to two different use cases, both of which are
    protected by different spinlocks.  That implies that there are still
    potential risks of the bad operations for bit fields by concurrent
    accesses.
    
    For addressing the problem, this patch rearranges those flags to be
    a standard bool instead of a bit field.
    
    Reported-by: syzbot+63cbe31877bb80ef58f5@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201206083456.21110-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c5a034710da75d5a422482f5535dda8ab048b60
Author: Chao Yu <chao@kernel.org>
Date:   Wed Dec 9 16:49:36 2020 +0800

    f2fs: fix shift-out-of-bounds in sanity_check_raw_super()
    
    commit e584bbe821229a3e7cc409eecd51df66f9268c21 upstream.
    
    syzbot reported a bug which could cause shift-out-of-bounds issue,
    fix it.
    
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:395
     sanity_check_raw_super fs/f2fs/super.c:2812 [inline]
     read_raw_super_block fs/f2fs/super.c:3267 [inline]
     f2fs_fill_super.cold+0x16c9/0x16f6 fs/f2fs/super.c:3519
     mount_bdev+0x34d/0x410 fs/super.c:1366
     legacy_get_tree+0x105/0x220 fs/fs_context.c:592
     vfs_get_tree+0x89/0x2f0 fs/super.c:1496
     do_new_mount fs/namespace.c:2896 [inline]
     path_mount+0x12ae/0x1e70 fs/namespace.c:3227
     do_mount fs/namespace.c:3240 [inline]
     __do_sys_mount fs/namespace.c:3448 [inline]
     __se_sys_mount fs/namespace.c:3425 [inline]
     __x64_sys_mount+0x27f/0x300 fs/namespace.c:3425
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported-by: syzbot+ca9a785f8ac472085994@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b56f16e3487894dbbb33e0a23d43756af086a81
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Nov 27 07:40:21 2020 +0100

    media: gp8psk: initialize stats at power control logic
    
    commit d0ac1a26ed5943127cb0156148735f5f52a07075 upstream.
    
    As reported on:
            https://lore.kernel.org/linux-media/20190627222020.45909-1-willemdebruijn.kernel@gmail.com/
    
    if gp8psk_usb_in_op() returns an error, the status var is not
    initialized. Yet, this var is used later on, in order to
    identify:
            - if the device was already started;
            - if firmware has loaded;
            - if the LNBf was powered on.
    
    Using status = 0 seems to ensure that everything will be
    properly powered up.
    
    So, instead of the proposed solution, let's just set
    status = 0.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f290cffdf761a52b34a405777557d6518b4488ea
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Nov 23 04:15:34 2020 +0530

    misc: vmw_vmci: fix kernel info-leak by initializing dbells in vmci_ctx_get_chkpt_doorbells()
    
    commit 31dcb6c30a26d32650ce134820f27de3c675a45a upstream.
    
    A kernel-infoleak was reported by syzbot, which was caused because
    dbells was left uninitialized.
    Using kzalloc() instead of kmalloc() fixes this issue.
    
    Reported-by: syzbot+a79e17c39564bedf0930@syzkaller.appspotmail.com
    Tested-by: syzbot+a79e17c39564bedf0930@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20201122224534.333471-1-anant.thazhemadam@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a021b66961324889ad223607152e8c9db941b03f
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Sun Nov 1 06:09:58 2020 -0800

    reiserfs: add check for an invalid ih_entry_count
    
    commit d24396c5290ba8ab04ba505176874c4e04a2d53c upstream.
    
    when directory item has an invalid value set for ih_entry_count it might
    trigger use-after-free or out-of-bounds read in bin_search_in_dir_item()
    
    ih_entry_count * IH_SIZE for directory item should not be larger than
    ih_item_len
    
    Link: https://lore.kernel.org/r/20201101140958.3650143-1-rkovhaev@gmail.com
    Reported-and-tested-by: syzbot+83b6f7cf9922cae5c4d7@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=83b6f7cf9922cae5c4d7
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 397971e1d891f3af98f96da608ca03ac8cf75e94
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Oct 29 14:22:29 2020 +0100

    fbcon: Disable accelerated scrolling
    
    commit 39aead8373b3c20bb5965c024dfb51a94e526151 upstream.
    
    So ever since syzbot discovered fbcon, we have solid proof that it's
    full of bugs. And often the solution is to just delete code and remove
    features, e.g.  50145474f6ef ("fbcon: remove soft scrollback code").
    
    Now the problem is that most modern-ish drivers really only treat
    fbcon as an dumb kernel console until userspace takes over, and Oops
    printer for some emergencies. Looking at drm drivers and the basic
    vesa/efi fbdev drivers shows that only 3 drivers support any kind of
    acceleration:
    
    - nouveau, seems to be enabled by default
    - omapdrm, when a DMM remapper exists using remapper rewriting for
      y/xpanning
    - gma500, but that is getting deleted now for the GTT remapper trick,
      and the accelerated copyarea never set the FBINFO_HWACCEL_COPYAREA
      flag, so unused (and could be deleted already I think).
    
    No other driver supportes accelerated fbcon. And fbcon is the only
    user of this accel code (it's not exposed as uapi through ioctls),
    which means we could garbage collect fairly enormous amounts of code
    if we kill this.
    
    Plus because syzbot only runs on virtual hardware, and none of the
    drivers for that have acceleration, we'd remove a huge gap in testing.
    And there's no other even remotely comprehensive testing aside from
    syzbot.
    
    This patch here just disables the acceleration code by always
    redrawing when scrolling. The plan is that once this has been merged
    for well over a year in released kernels, we can start to go around
    and delete a lot of code.
    
    v2:
    - Drop a few more unused local variables, somehow I missed the
    compiler warnings (Sam)
    - Fix typo in comment (Jiri)
    - add a todo entry for the cleanup (Thomas)
    
    v3: Remove more unused variables (0day)
    
    Reviewed-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: nouveau@lists.freedesktop.org
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: "Gustavo A. R. Silva" <gustavoars@kernel.org>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Peilin Ye <yepeilin.cs@gmail.com>
    Cc: George Kennedy <george.kennedy@oracle.com>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Peter Rosin <peda@axentia.se>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201029132229.4068359-1-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df83b9b674495f4dad6cf9d857095d0432b901e7
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Sep 30 00:28:15 2020 +0530

    Bluetooth: hci_h5: close serdev device and free hu in h5_close
    
    commit 70f259a3f4276b71db365b1d6ff1eab805ea6ec3 upstream.
    
    When h5_close() gets called, the memory allocated for the hu gets
    freed only if hu->serdev doesn't exist. This leads to a memory leak.
    So when h5_close() is requested, close the serdev device instance and
    free the memory allocated to the hu entirely instead.
    
    Fixes: https://syzkaller.appspot.com/bug?extid=6ce141c55b2f7aafd1c4
    Reported-by: syzbot+6ce141c55b2f7aafd1c4@syzkaller.appspotmail.com
    Tested-by: syzbot+6ce141c55b2f7aafd1c4@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d4053cfb3f34038995e94227da4d48941c2ddac
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Dec 8 14:05:05 2020 -0800

    scsi: cxgb4i: Fix TLS dependency
    
    commit cb5253198f10a4cd79b7523c581e6173c7d49ddb upstream.
    
    SCSI_CXGB4_ISCSI selects CHELSIO_T4. The latter depends on TLS || TLS=n, so
    since 'select' does not check dependencies of the selected symbol,
    SCSI_CXGB4_ISCSI should also depend on TLS || TLS=n.
    
    This prevents the following kconfig warning and restricts SCSI_CXGB4_ISCSI
    to 'm' whenever TLS=m.
    
    WARNING: unmet direct dependencies detected for CHELSIO_T4
      Depends on [m]: NETDEVICES [=y] && ETHERNET [=y] && NET_VENDOR_CHELSIO [=y] && PCI [=y] && (IPV6 [=y] || IPV6 [=y]=n) && (TLS [=m] || TLS [=m]=n)
      Selected by [y]:
      - SCSI_CXGB4_ISCSI [=y] && SCSI_LOWLEVEL [=y] && SCSI [=y] && PCI [=y] && INET [=y] && (IPV6 [=y] || IPV6 [=y]=n) && ETHERNET [=y]
    
    Link: https://lore.kernel.org/r/20201208220505.24488-1-rdunlap@infradead.org
    Fixes: 7b36b6e03b0d ("[SCSI] cxgb4i v5: iscsi driver")
    Cc: Karen Xie <kxie@chelsio.com>
    Cc: linux-scsi@vger.kernel.org
    Cc: "James E.J. Bottomley" <jejb@linux.ibm.com>
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdac87be009f1d9352b83fa3f001d9a0ab51e39a
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Dec 29 15:15:04 2020 -0800

    zlib: move EXPORT_SYMBOL() and MODULE_LICENSE() out of dfltcc_syms.c
    
    commit 605cc30dea249edf1b659e7d0146a2cf13cbbf71 upstream.
    
    In commit 11fb479ff5d9 ("zlib: export S390 symbols for zlib modules"), I
    added EXPORT_SYMBOL()s to dfltcc_inflate.c but then Mikhail said that
    these should probably be in dfltcc_syms.c with the other
    EXPORT_SYMBOL()s.
    
    However, that is contrary to the current kernel style, which places
    EXPORT_SYMBOL() immediately after the function that it applies to, so
    move all EXPORT_SYMBOL()s to their respective function locations and
    drop the dfltcc_syms.c file.  Also move MODULE_LICENSE() from the
    deleted file to dfltcc.c.
    
    [rdunlap@infradead.org: remove dfltcc_syms.o from Makefile]
      Link: https://lkml.kernel.org/r/20201227171837.15492-1-rdunlap@infradead.org
    
    Link: https://lkml.kernel.org/r/20201219052530.28461-1-rdunlap@infradead.org
    Fixes: 11fb479ff5d9 ("zlib: export S390 symbols for zlib modules")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Acked-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Zaslonko Mikhail <zaslonko@linux.ibm.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf81221a40fa6bdd99c7b5ccfe1fabc0c9fc96aa
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Thu Dec 10 09:29:43 2020 +0800

    cgroup: Fix memory leak when parsing multiple source parameters
    
    commit 2d18e54dd8662442ef5898c6bdadeaf90b3cebbc upstream.
    
    A memory leak is found in cgroup1_parse_param() when multiple source
    parameters overwrite fc->source in the fs_context struct without free.
    
    unreferenced object 0xffff888100d930e0 (size 16):
      comm "mount", pid 520, jiffies 4303326831 (age 152.783s)
      hex dump (first 16 bytes):
        74 65 73 74 6c 65 61 6b 00 00 00 00 00 00 00 00  testleak........
      backtrace:
        [<000000003e5023ec>] kmemdup_nul+0x2d/0xa0
        [<00000000377dbdaa>] vfs_parse_fs_string+0xc0/0x150
        [<00000000cb2b4882>] generic_parse_monolithic+0x15a/0x1d0
        [<000000000f750198>] path_mount+0xee1/0x1820
        [<0000000004756de2>] do_mount+0xea/0x100
        [<0000000094cafb0a>] __x64_sys_mount+0x14b/0x1f0
    
    Fix this bug by permitting a single source parameter and rejecting with
    an error all subsequent ones.
    
    Fixes: 8d2451f4994f ("cgroup1: switch to option-by-option parsing")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Zefan Li <lizefan@huawei.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9154d2eeb4f5b3bdac1a07287d7adc94389ab67e
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Dec 17 14:55:01 2020 -0300

    tools headers UAPI: Sync linux/const.h with the kernel headers
    
    commit 7ddcdea5b54492f54700f427f58690cf1e187e5e upstream.
    
    To pick up the changes in:
    
      a85cbe6159ffc973 ("uapi: move constants from <linux/kernel.h> to <linux/const.h>")
    
    That causes no changes in tooling, just addresses this perf build
    warning:
    
      Warning: Kernel ABI header at 'tools/include/uapi/linux/const.h' differs from latest version at 'include/uapi/linux/const.h'
      diff -u tools/include/uapi/linux/const.h include/uapi/linux/const.h
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Petr Vorel <petr.vorel@gmail.com>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8afbbac2f687e4134b5626168792f3c6d448073
Author: Petr Vorel <petr.vorel@gmail.com>
Date:   Mon Dec 14 19:03:21 2020 -0800

    uapi: move constants from <linux/kernel.h> to <linux/const.h>
    
    commit a85cbe6159ffc973e5702f70a3bd5185f8f3c38d upstream.
    
    and include <linux/const.h> in UAPI headers instead of <linux/kernel.h>.
    
    The reason is to avoid indirect <linux/sysinfo.h> include when using
    some network headers: <linux/netlink.h> or others -> <linux/kernel.h>
    -> <linux/sysinfo.h>.
    
    This indirect include causes on MUSL redefinition of struct sysinfo when
    included both <sys/sysinfo.h> and some of UAPI headers:
    
        In file included from x86_64-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:5,
                         from x86_64-buildroot-linux-musl/sysroot/usr/include/linux/netlink.h:5,
                         from ../include/tst_netlink.h:14,
                         from tst_crypto.c:13:
        x86_64-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:8:8: error: redefinition of `struct sysinfo'
         struct sysinfo {
                ^~~~~~~
        In file included from ../include/tst_safe_macros.h:15,
                         from ../include/tst_test.h:93,
                         from tst_crypto.c:11:
        x86_64-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
    
    Link: https://lkml.kernel.org/r/20201015190013.8901-1-petr.vorel@gmail.com
    Signed-off-by: Petr Vorel <petr.vorel@gmail.com>
    Suggested-by: Rich Felker <dalias@aerifal.cx>
    Acked-by: Rich Felker <dalias@libc.org>
    Cc: Peter Korsgaard <peter@korsgaard.com>
    Cc: Baruch Siach <baruch@tkos.co.il>
    Cc: Florian Weimer <fweimer@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce00a7d0d9523192d0a9dd954f9993358f19a536
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Dec 30 21:34:15 2020 +0000

    io_uring: fix io_sqe_files_unregister() hangs
    
    commit 1ffc54220c444774b7f09e6d2121e732f8e19b94 upstream.
    
    io_sqe_files_unregister() uninterruptibly waits for enqueued ref nodes,
    however requests keeping them may never complete, e.g. because of some
    userspace dependency. Make sure it's interruptible otherwise it would
    hang forever.
    
    Cc: stable@vger.kernel.org # 5.6+
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b25b86936a8dccd6f6ec9045bede4774b6c7c7cf
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Dec 30 21:34:14 2020 +0000

    io_uring: add a helper for setting a ref node
    
    commit 1642b4450d20e31439c80c28256c8eee08684698 upstream.
    
    Setting a new reference node to a file data is not trivial, don't repeat
    it, add and use a helper.
    
    Cc: stable@vger.kernel.org # 5.6+
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25a2de679b5d55ead2f99881c7d3e9b745325f39
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Nov 23 09:37:51 2020 -0700

    io_uring: use bottom half safe lock for fixed file data
    
    commit ac0648a56c1ff66c1cbf735075ad33a26cbc50de upstream.
    
    io_file_data_ref_zero() can be invoked from soft-irq from the RCU core,
    hence we need to ensure that the file_data lock is bottom half safe. Use
    the _bh() variants when grabbing this lock.
    
    Reported-by: syzbot+1f4ba1e5520762c523c6@syzkaller.appspotmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7247bc60e8e1458d89ea53179fce02d2307aac7f
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Dec 29 10:50:46 2020 -0700

    io_uring: don't assume mm is constant across submits
    
    commit 77788775c7132a8d93c6930ab1bd84fc743c7cb7 upstream.
    
    If we COW the identity, we assume that ->mm never changes. But this
    isn't true of multiple processes end up sharing the ring. Hence treat
    id->mm like like any other process compontent when it comes to the
    identity mapping. This is pretty trivial, just moving the existing grab
    into io_grab_identity(), and including a check for the match.
    
    Cc: stable@vger.kernel.org # 5.10
    Fixes: 1e6fa5216a0e ("io_uring: COW io_identity on mismatch")
    Reported-by: Christian Brauner <christian.brauner@ubuntu.com>:
    Tested-by: Christian Brauner <christian.brauner@ubuntu.com>:
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5184f3cc284e51043981b5d7789468be49e6a0b
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Tue Dec 29 15:15:01 2020 -0800

    lib/zlib: fix inflating zlib streams on s390
    
    commit f0bb29e8c4076444d32df00c8d32e169ceecf283 upstream.
    
    Decompressing zlib streams on s390 fails with "incorrect data check"
    error.
    
    Userspace zlib checks inflate_state.flags in order to byteswap checksums
    only for zlib streams, and s390 hardware inflate code, which was ported
    from there, tries to match this behavior.  At the same time, kernel zlib
    does not use inflate_state.flags, so it contains essentially random
    values.  For many use cases either zlib stream is zeroed out or checksum
    is not used, so this problem is masked, but at least SquashFS is still
    affected.
    
    Fix by always passing a checksum to and from the hardware as is, which
    matches zlib_inflate()'s expectations.
    
    Link: https://lkml.kernel.org/r/20201215155551.894884-1-iii@linux.ibm.com
    Fixes: 126196100063 ("lib/zlib: add s390 hardware support for kernel zlib_inflate")
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Tested-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Acked-by: Mikhail Zaslonko <zaslonko@linux.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Mikhail Zaslonko <zaslonko@linux.ibm.com>
    Cc: <stable@vger.kernel.org>    [5.6+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98b57685c26d8f41040ecf71e190250fb2eb2a0c
Author: Baoquan He <bhe@redhat.com>
Date:   Tue Dec 29 15:14:37 2020 -0800

    mm: memmap defer init doesn't work as expected
    
    commit dc2da7b45ffe954a0090f5d0310ed7b0b37d2bd2 upstream.
    
    VMware observed a performance regression during memmap init on their
    platform, and bisected to commit 73a6e474cb376 ("mm: memmap_init:
    iterate over memblock regions rather that check each PFN") causing it.
    
    Before the commit:
    
      [0.033176] Normal zone: 1445888 pages used for memmap
      [0.033176] Normal zone: 89391104 pages, LIFO batch:63
      [0.035851] ACPI: PM-Timer IO Port: 0x448
    
    With commit
    
      [0.026874] Normal zone: 1445888 pages used for memmap
      [0.026875] Normal zone: 89391104 pages, LIFO batch:63
      [2.028450] ACPI: PM-Timer IO Port: 0x448
    
    The root cause is the current memmap defer init doesn't work as expected.
    
    Before, memmap_init_zone() was used to do memmap init of one whole zone,
    to initialize all low zones of one numa node, but defer memmap init of
    the last zone in that numa node.  However, since commit 73a6e474cb376,
    function memmap_init() is adapted to iterater over memblock regions
    inside one zone, then call memmap_init_zone() to do memmap init for each
    region.
    
    E.g, on VMware's system, the memory layout is as below, there are two
    memory regions in node 2.  The current code will mistakenly initialize the
    whole 1st region [mem 0xab00000000-0xfcffffffff], then do memmap defer to
    iniatialize only one memmory section on the 2nd region [mem
    0x10000000000-0x1033fffffff].  In fact, we only expect to see that there's
    only one memory section's memmap initialized.  That's why more time is
    costed at the time.
    
    [    0.008842] ACPI: SRAT: Node 0 PXM 0 [mem 0x00000000-0x0009ffff]
    [    0.008842] ACPI: SRAT: Node 0 PXM 0 [mem 0x00100000-0xbfffffff]
    [    0.008843] ACPI: SRAT: Node 0 PXM 0 [mem 0x100000000-0x55ffffffff]
    [    0.008844] ACPI: SRAT: Node 1 PXM 1 [mem 0x5600000000-0xaaffffffff]
    [    0.008844] ACPI: SRAT: Node 2 PXM 2 [mem 0xab00000000-0xfcffffffff]
    [    0.008845] ACPI: SRAT: Node 2 PXM 2 [mem 0x10000000000-0x1033fffffff]
    
    Now, let's add a parameter 'zone_end_pfn' to memmap_init_zone() to pass
    down the real zone end pfn so that defer_init() can use it to judge
    whether defer need be taken in zone wide.
    
    Link: https://lkml.kernel.org/r/20201223080811.16211-1-bhe@redhat.com
    Link: https://lkml.kernel.org/r/20201223080811.16211-2-bhe@redhat.com
    Fixes: commit 73a6e474cb376 ("mm: memmap_init: iterate over memblock regions rather that check each PFN")
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Reported-by: Rahul Gopakumar <gopakumarr@vmware.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df73c80338ef397d5fb2fe2631d24e2256bed9bd
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Tue Dec 29 15:14:25 2020 -0800

    mm/hugetlb: fix deadlock in hugetlb_cow error path
    
    commit e7dd91c456a8cdbcd7066997d15e36d14276a949 upstream.
    
    syzbot reported the deadlock here [1].  The issue is in hugetlb cow
    error handling when there are not enough huge pages for the faulting
    task which took the original reservation.  It is possible that other
    (child) tasks could have consumed pages associated with the reservation.
    In this case, we want the task which took the original reservation to
    succeed.  So, we unmap any associated pages in children so that they can
    be used by the faulting task that owns the reservation.
    
    The unmapping code needs to hold i_mmap_rwsem in write mode.  However,
    due to commit c0d0381ade79 ("hugetlbfs: use i_mmap_rwsem for more pmd
    sharing synchronization") we are already holding i_mmap_rwsem in read
    mode when hugetlb_cow is called.
    
    Technically, i_mmap_rwsem does not need to be held in read mode for COW
    mappings as they can not share pmd's.  Modifying the fault code to not
    take i_mmap_rwsem in read mode for COW (and other non-sharable) mappings
    is too involved for a stable fix.
    
    Instead, we simply drop the hugetlb_fault_mutex and i_mmap_rwsem before
    unmapping.  This is OK as it is technically not needed.  They are
    reacquired after unmapping as expected by calling code.  Since this is
    done in an uncommon error path, the overhead of dropping and reacquiring
    mutexes is acceptable.
    
    While making changes, remove redundant BUG_ON after unmap_ref_private.
    
    [1] https://lkml.kernel.org/r/000000000000b73ccc05b5cf8558@google.com
    
    Link: https://lkml.kernel.org/r/4c5781b8-3b00-761e-c0c7-c5edebb6ec1a@oracle.com
    Fixes: c0d0381ade79 ("hugetlbfs: use i_mmap_rwsem for more pmd sharing synchronization")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reported-by: syzbot+5eee4145df3c15e96625@syzkaller.appspotmail.com
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: "Aneesh Kumar K . V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 092898b070e0fa53df6e598a5a5f1ea8f35476f1
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:44 2020 -0800

    scsi: block: Fix a race in the runtime power management code
    
    commit fa4d0f1992a96f6d7c988ef423e3127e613f6ac9 upstream.
    
    With the current implementation the following race can happen:
    
     * blk_pre_runtime_suspend() calls blk_freeze_queue_start() and
       blk_mq_unfreeze_queue().
    
     * blk_queue_enter() calls blk_queue_pm_only() and that function returns
       true.
    
     * blk_queue_enter() calls blk_pm_request_resume() and that function does
       not call pm_request_resume() because the queue runtime status is
       RPM_ACTIVE.
    
     * blk_pre_runtime_suspend() changes the queue status into RPM_SUSPENDING.
    
    Fix this race by changing the queue runtime status into RPM_SUSPENDING
    before switching q_usage_counter to atomic mode.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-2-bvanassche@acm.org
    Fixes: 986d413b7c15 ("blk-mq: Enable support for runtime power management")
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Stanley Chu <stanley.chu@mediatek.com>
    Co-developed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a58c171a523d2224fe12fb26fc459231f245b0d
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Dec 28 10:51:04 2020 +0530

    opp: Call the missing clk_put() on error
    
    commit 0e1d9ca1766f5d95fb881f57b6c4a1ffa63d4648 upstream.
    
    Fix the clock reference counting by calling the missing clk_put() in the
    error path.
    
    Cc: v5.10 <stable@vger.kernel.org> # v5.10
    Fixes: dd461cd9183f ("opp: Allow dev_pm_opp_get_opp_table() to return -EPROBE_DEFER")
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8322837a2e56d6b8d4b87d81292805948991e2c
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Thu Dec 24 18:49:27 2020 +0800

    opp: fix memory leak in _allocate_opp_table
    
    commit 976509bb310b913d30577f15b58bdd30effb0542 upstream.
    
    In function _allocate_opp_table, opp_dev is allocated and referenced
    by opp_table via _add_opp_dev. But in the case that the subsequent calls
    return -EPROBE_DEFER, it will jump to err label and opp_table will be
    freed. Then opp_dev becomes an unreferenced object to cause memory leak.
    So let's call _remove_opp_dev to do the cleanup.
    
    This fixes the following kmemleak report:
    
    unreferenced object 0xffff000801524a00 (size 128):
      comm "swapper/0", pid 1, jiffies 4294892465 (age 84.616s)
      hex dump (first 32 bytes):
        40 00 56 01 08 00 ff ff 40 00 56 01 08 00 ff ff  @.V.....@.V.....
        b8 52 77 7f 08 00 ff ff 00 3c 4c 00 08 00 ff ff  .Rw......<L.....
      backtrace:
        [<00000000b1289fb1>] kmemleak_alloc+0x30/0x40
        [<0000000056da48f0>] kmem_cache_alloc+0x3d4/0x588
        [<00000000a84b3b0e>] _add_opp_dev+0x2c/0x88
        [<0000000062a380cd>] _add_opp_table_indexed+0x124/0x268
        [<000000008b4c8f1f>] dev_pm_opp_of_add_table+0x20/0x1d8
        [<00000000e5316798>] dev_pm_opp_of_cpumask_add_table+0x48/0xf0
        [<00000000db0a8ec2>] dt_cpufreq_probe+0x20c/0x448
        [<0000000030a3a26c>] platform_probe+0x68/0xd8
        [<00000000c618e78d>] really_probe+0xd0/0x3a0
        [<00000000642e856f>] driver_probe_device+0x58/0xb8
        [<00000000f10f5307>] device_driver_attach+0x74/0x80
        [<0000000004f254b8>] __driver_attach+0x58/0xe0
        [<0000000009d5d19e>] bus_for_each_dev+0x70/0xc8
        [<0000000000d22e1c>] driver_attach+0x24/0x30
        [<0000000001d4e952>] bus_add_driver+0x14c/0x1f0
        [<0000000089928aaa>] driver_register+0x64/0x120
    
    Cc: v5.10 <stable@vger.kernel.org> # v5.10
    Fixes: dd461cd9183f ("opp: Allow dev_pm_opp_get_opp_table() to return -EPROBE_DEFER")
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    [ Viresh: Added the stable tag ]
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6dd62c14b3228140c7c92f14b4cfd8625d575ac
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Fri Nov 27 17:46:11 2020 +0300

    spi: dw-bt1: Fix undefined devm_mux_control_get symbol
    
    commit 7218838109fef61cdec988ff728e902d434c9cc5 upstream.
    
    I mistakenly added the select attributes to the SPI_DW_BT1_DIRMAP config
    instead of having them defined in SPI_DW_BT1. If the kernel doesn't have
    the MULTIPLEXER and MUX_MMIO configs manually enabled and the
    SPI_DW_BT1_DIRMAP config hasn't been selected, Baikal-T1 SPI device will
    always fail to be probed by the driver. Fix that and the error reported by
    the test robot:
    
    >> ld.lld: error: undefined symbol: devm_mux_control_get
       >>> referenced by spi-dw-bt1.c
       >>> spi/spi-dw-bt1.o:(dw_spi_bt1_sys_init) in archive drivers/built-in.a
    
    by moving the MULTIPLEXER/MUX_MMIO configs selection to the SPI_DW_BT1
    config.
    
    Link: https://lore.kernel.org/lkml/202011161745.uYRlekse-lkp@intel.com/
    Link: https://lore.kernel.org/linux-spi/20201116040721.8001-1-rdunlap@infradead.org/
    Fixes: abf00907538e ("spi: dw: Add Baikal-T1 SPI Controller glue driver")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Ramil Zaripov <Ramil.Zaripov@baikalelectronics.ru>
    Link: https://lore.kernel.org/r/20201127144612.4204-1-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d63cc42bb8f422a96deafdab9409b69cb1a7925
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Mon Oct 12 14:12:04 2020 +0100

    jffs2: Fix NULL pointer dereference in rp_size fs option parsing
    
    [ Upstream commit a61df3c413e49b0042f9caf774c58512d1cc71b7 ]
    
    syzkaller found the following JFFS2 splat:
    
      Unable to handle kernel paging request at virtual address dfffa00000000001
      Mem abort info:
        ESR = 0x96000004
        EC = 0x25: DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
      Data abort info:
        ISV = 0, ISS = 0x00000004
        CM = 0, WnR = 0
      [dfffa00000000001] address between user and kernel address ranges
      Internal error: Oops: 96000004 [#1] SMP
      Dumping ftrace buffer:
         (ftrace buffer empty)
      Modules linked in:
      CPU: 0 PID: 12745 Comm: syz-executor.5 Tainted: G S                5.9.0-rc8+ #98
      Hardware name: linux,dummy-virt (DT)
      pstate: 20400005 (nzCv daif +PAN -UAO BTYPE=--)
      pc : jffs2_parse_param+0x138/0x308 fs/jffs2/super.c:206
      lr : jffs2_parse_param+0x108/0x308 fs/jffs2/super.c:205
      sp : ffff000022a57910
      x29: ffff000022a57910 x28: 0000000000000000
      x27: ffff000057634008 x26: 000000000000d800
      x25: 000000000000d800 x24: ffff0000271a9000
      x23: ffffa0001adb5dc0 x22: ffff000023fdcf00
      x21: 1fffe0000454af2c x20: ffff000024cc9400
      x19: 0000000000000000 x18: 0000000000000000
      x17: 0000000000000000 x16: ffffa000102dbdd0
      x15: 0000000000000000 x14: ffffa000109e44bc
      x13: ffffa00010a3a26c x12: ffff80000476e0b3
      x11: 1fffe0000476e0b2 x10: ffff80000476e0b2
      x9 : ffffa00010a3ad60 x8 : ffff000023b70593
      x7 : 0000000000000003 x6 : 00000000f1f1f1f1
      x5 : ffff000023fdcf00 x4 : 0000000000000002
      x3 : ffffa00010000000 x2 : 0000000000000001
      x1 : dfffa00000000000 x0 : 0000000000000008
      Call trace:
       jffs2_parse_param+0x138/0x308 fs/jffs2/super.c:206
       vfs_parse_fs_param+0x234/0x4e8 fs/fs_context.c:117
       vfs_parse_fs_string+0xe8/0x148 fs/fs_context.c:161
       generic_parse_monolithic+0x17c/0x208 fs/fs_context.c:201
       parse_monolithic_mount_data+0x7c/0xa8 fs/fs_context.c:649
       do_new_mount fs/namespace.c:2871 [inline]
       path_mount+0x548/0x1da8 fs/namespace.c:3192
       do_mount+0x124/0x138 fs/namespace.c:3205
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount fs/namespace.c:3390 [inline]
       __arm64_sys_mount+0x164/0x238 fs/namespace.c:3390
       __invoke_syscall arch/arm64/kernel/syscall.c:36 [inline]
       invoke_syscall arch/arm64/kernel/syscall.c:48 [inline]
       el0_svc_common.constprop.0+0x15c/0x598 arch/arm64/kernel/syscall.c:149
       do_el0_svc+0x60/0x150 arch/arm64/kernel/syscall.c:195
       el0_svc+0x34/0xb0 arch/arm64/kernel/entry-common.c:226
       el0_sync_handler+0xc8/0x5b4 arch/arm64/kernel/entry-common.c:236
       el0_sync+0x15c/0x180 arch/arm64/kernel/entry.S:663
      Code: d2d40001 f2fbffe1 91002260 d343fc02 (38e16841)
      ---[ end trace 4edf690313deda44 ]---
    
    This is because since ec10a24f10c8, the option parsing happens before
    fill_super and so the MTD device isn't associated with the filesystem.
    Defer the size check until there is a valid association.
    
    Fixes: ec10a24f10c8 ("vfs: Convert jffs2 to use the new mount API")
    Cc: <stable@vger.kernel.org>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58dc34446c5280b3d069c27c4b0a56a08c1a2da8
Author: lizhe <lizhe67@huawei.com>
Date:   Wed Oct 14 14:54:43 2020 +0800

    jffs2: Allow setting rp_size to zero during remounting
    
    [ Upstream commit cd3ed3c73ac671ff6b0230ccb72b8300292d3643 ]
    
    Set rp_size to zero will be ignore during remounting.
    
    The method to identify whether we input a remounting option of
    rp_size is to check if the rp_size input is zero. It can not work
    well if we pass "rp_size=0".
    
    This patch add a bool variable "set_rp_size" to fix this problem.
    
    Reported-by: Jubin Zhong <zhongjubin@huawei.com>
    Signed-off-by: lizhe <lizhe67@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52504a61ab999289d406f5dec930d3e3f386365d
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri Dec 18 13:12:21 2020 +0000

    io_uring: close a small race gap for files cancel
    
    commit dfea9fce29fda6f2f91161677e0e0d9b671bc099 upstream.
    
    The purpose of io_uring_cancel_files() is to wait for all requests
    matching ->files to go/be cancelled. We should first drop files of a
    request in io_req_drop_files() and only then make it undiscoverable for
    io_uring_cancel_files.
    
    First drop, then delete from list. It's ok to leave req->id->files
    dangling, because it's not dereferenced by cancellation code, only
    compared against. It would potentially go to sleep and be awaken by
    following in io_req_drop_files() wake_up().
    
    Fixes: 0f2122045b946 ("io_uring: don't rely on weak ->files references")
    Cc: <stable@vger.kernel.org> # 5.5+
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b8a688260b4ad39832d3fce790f2b53f1f3e535
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Dec 15 10:33:34 2020 -0500

    drm/amd/display: Add get_dig_frontend implementation for DCEx
    
    commit 6bdeff12a96c9a5da95c8d11fefd145eb165e32a upstream.
    
    Some old ASICs might not implement/require get_dig_frontend helper; in
    this scenario, we can have a NULL pointer exception when we try to call
    it inside vbios disable operation. For example, this situation might
    happen when using Polaris12 with an eDP panel. This commit avoids this
    situation by adding a specific get_dig_frontend implementation for DCEx.
    
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Chiawen Huang <chiawen.huang@amd.com>
    Reported-and-tested-by: Borislav Petkov <bp@suse.de>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ef98378eff84b8f9d4e33de98011e2f7aa642eb
Author: Kevin Vigor <kvigor@gmail.com>
Date:   Fri Nov 6 14:20:34 2020 -0800

    md/raid10: initialize r10_bio->read_slot before use.
    
    commit 93decc563637c4288380912eac0eb42fb246cc04 upstream.
    
    In __make_request() a new r10bio is allocated and passed to
    raid10_read_request(). The read_slot member of the bio is not
    initialized, and the raid10_read_request() uses it to index an
    array. This leads to occasional panics.
    
    Fix by initializing the field to invalid value and checking for
    valid value in raid10_read_request().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kevin Vigor <kvigor@gmail.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62162b322364f0b07608aae5cfa80868fe25fb06
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Mon Dec 14 14:25:01 2020 +0100

    ethtool: fix string set id check
    
    [ Upstream commit efb796f5571f030743e1d9c662cdebdad724f8c5 ]
    
    Syzbot reported a shift of a u32 by more than 31 in strset_parse_request()
    which is undefined behavior. This is caused by range check of string set id
    using variable ret (which is always 0 at this point) instead of id (string
    set id from request).
    
    Fixes: 71921690f974 ("ethtool: provide string sets with STRSET_GET request")
    Reported-by: syzbot+96523fb438937cd01220@syzkaller.appspotmail.com
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Link: https://lore.kernel.org/r/b54ed5c5fd972a59afea3e1badfb36d86df68799.1607952208.git.mkubecek@suse.cz
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95fcb69c491e976affb135a40cbd1d19b98bb02f
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Tue Dec 15 10:08:10 2020 +0100

    ethtool: fix error paths in ethnl_set_channels()
    
    [ Upstream commit ef72cd3c5ce168829c6684ecb2cae047d3493690 ]
    
    Fix two error paths in ethnl_set_channels() to avoid lock-up caused
    but unreleased RTNL.
    
    Fixes: e19c591eafad ("ethtool: set device channel counts with CHANNELS_SET request")
    Reported-by: LiLiang <liali@redhat.com>
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Link: https://lore.kernel.org/r/20201215090810.801777-1-ivecera@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeab3d7a04f8127fa81e3e763914122ad260c930
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Dec 16 12:48:32 2020 +0100

    mptcp: fix security context on server socket
    
    [ Upstream commit 0c14846032f2c0a3b63234e1fc2759f4155b6067 ]
    
    Currently MPTCP is not propagating the security context
    from the ingress request socket to newly created msk
    at clone time.
    
    Address the issue invoking the missing security helper.
    
    Fixes: cf7da0d66cc1 ("mptcp: Create SUBFLOW socket for incoming connections")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a969a632cbe7165d448a5528806ad120c2599397
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Wed Dec 16 19:33:29 2020 +0100

    net/sched: sch_taprio: reset child qdiscs before freeing them
    
    [ Upstream commit 44d4775ca51805b376a8db5b34f650434a08e556 ]
    
    syzkaller shows that packets can still be dequeued while taprio_destroy()
    is running. Let sch_taprio use the reset() function to cancel the advance
    timer and drop all skbs from the child qdiscs.
    
    Fixes: 5a781ccbd19e ("tc: Add support for configuring the taprio scheduler")
    Link: https://syzkaller.appspot.com/bug?id=f362872379bf8f0017fb667c1ab158f2d1e764ae
    Reported-by: syzbot+8971da381fb5a31f542d@syzkaller.appspotmail.com
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Link: https://lore.kernel.org/r/63b6d79b0e830ebb0283e020db4df3cdfdfb2b94.1608142843.git.dcaratti@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
