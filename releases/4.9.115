commit dbcdf42bab53d219caa51bcfe54c8b9066010290
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 25 11:24:03 2018 +0200

    Linux 4.9.115

commit 3118ceb456200d73179ddf29f2b95f59e35465f9
Author: Alan Jenkins <alan.christopher.jenkins@gmail.com>
Date:   Thu Apr 12 19:11:58 2018 +0100

    block: do not use interruptible wait anywhere
    
    commit 1dc3039bc87ae7d19a990c3ee71cfd8a9068f428 upstream.
    
    When blk_queue_enter() waits for a queue to unfreeze, or unset the
    PREEMPT_ONLY flag, do not allow it to be interrupted by a signal.
    
    The PREEMPT_ONLY flag was introduced later in commit 3a0a529971ec
    ("block, scsi: Make SCSI quiesce and resume work reliably").  Note the SCSI
    device is resumed asynchronously, i.e. after un-freezing userspace tasks.
    
    So that commit exposed the bug as a regression in v4.15.  A mysterious
    SIGBUS (or -EIO) sometimes happened during the time the device was being
    resumed.  Most frequently, there was no kernel log message, and we saw Xorg
    or Xwayland killed by SIGBUS.[1]
    
    [1] E.g. https://bugzilla.redhat.com/show_bug.cgi?id=1553979
    
    Without this fix, I get an IO error in this test:
    
    # dd if=/dev/sda of=/dev/null iflag=direct & \
      while killall -SIGUSR1 dd; do sleep 0.1; done & \
      echo mem > /sys/power/state ; \
      sleep 5; killall dd  # stop after 5 seconds
    
    The interruptible wait was added to blk_queue_enter in
    commit 3ef28e83ab15 ("block: generic request_queue reference counting").
    Before then, the interruptible wait was only in blk-mq, but I don't think
    it could ever have been correct.
    
    Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Alan Jenkins <alan.christopher.jenkins@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ea8b93c0310e8092daaa422376f08bf3b321de1
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri May 4 15:35:46 2018 -0400

    xprtrdma: Return -ENOBUFS when no pages are available
    
    commit a8f688ec437dc2045cc8f0c89fe877d5803850da upstream.
    
    The use of -EAGAIN in rpcrdma_convert_iovs() is a latent bug: the
    transport never calls xprt_write_space() when more pages become
    available. -ENOBUFS will trigger the correct "delay briefly and call
    again" logic.
    
    Fixes: 7a89f9c626e3 ("xprtrdma: Honor ->send_request API contract")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Cc: stable@vger.kernel.org # 4.8+
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33b2110bd92aa830300f9a7209b720fc93f0f713
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu Jun 21 16:19:41 2018 +0300

    xhci: Fix perceived dead host due to runtime suspend race with event handler
    
    commit 229bc19fd7aca4f37964af06e3583c1c8f36b5d6 upstream.
    
    Don't rely on event interrupt (EINT) bit alone to detect pending port
    change in resume. If no change event is detected the host may be suspended
    again, oterwise roothubs are resumed.
    
    There is a lag in xHC setting EINT. If we don't notice the pending change
    in resume, and the controller is runtime suspeded again, it causes the
    event handler to assume host is dead as it will fail to read xHC registers
    once PCI puts the controller to D3 state.
    
    [  268.520969] xhci_hcd: xhci_resume: starting port polling.
    [  268.520985] xhci_hcd: xhci_hub_status_data: stopping port polling.
    [  268.521030] xhci_hcd: xhci_suspend: stopping port polling.
    [  268.521040] xhci_hcd: // Setting command ring address to 0x349bd001
    [  268.521139] xhci_hcd: Port Status Change Event for port 3
    [  268.521149] xhci_hcd: resume root hub
    [  268.521163] xhci_hcd: port resume event for port 3
    [  268.521168] xhci_hcd: xHC is not running.
    [  268.521174] xhci_hcd: handle_port_status: starting port polling.
    [  268.596322] xhci_hcd: xhci_hc_died: xHCI host controller not responding, assume dead
    
    The EINT lag is described in a additional note in xhci specs 4.19.2:
    
    "Due to internal xHC scheduling and system delays, there will be a lag
    between a change bit being set and the Port Status Change Event that it
    generated being written to the Event Ring. If SW reads the PORTSC and
    sees a change bit set, there is no guarantee that the corresponding Port
    Status Change Event has already been written into the Event Ring."
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad375eae791f92deac62a062c176903b6215e6a2
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Fri Jul 13 13:21:07 2018 +0200

    skbuff: Unconditionally copy pfmemalloc in __skb_clone()
    
    [ Upstream commit e78bfb0751d4e312699106ba7efbed2bab1a53ca ]
    
    Commit 8b7008620b84 ("net: Don't copy pfmemalloc flag in
    __copy_skb_header()") introduced a different handling for the
    pfmemalloc flag in copy and clone paths.
    
    In __skb_clone(), now, the flag is set only if it was set in the
    original skb, but not cleared if it wasn't. This is wrong and
    might lead to socket buffers being flagged with pfmemalloc even
    if the skb data wasn't allocated from pfmemalloc reserves. Copy
    the flag instead of ORing it.
    
    Reported-by: Sabrina Dubroca <sd@queasysnail.net>
    Fixes: 8b7008620b84 ("net: Don't copy pfmemalloc flag in __copy_skb_header()")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Tested-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cad99229aa2048f8b0d9dd7208577603397e65a2
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Wed Jul 11 14:39:42 2018 +0200

    net: Don't copy pfmemalloc flag in __copy_skb_header()
    
    [ Upstream commit 8b7008620b8452728cadead460a36f64ed78c460 ]
    
    The pfmemalloc flag indicates that the skb was allocated from
    the PFMEMALLOC reserves, and the flag is currently copied on skb
    copy and clone.
    
    However, an skb copied from an skb flagged with pfmemalloc
    wasn't necessarily allocated from PFMEMALLOC reserves, and on
    the other hand an skb allocated that way might be copied from an
    skb that wasn't.
    
    So we should not copy the flag on skb copy, and rather decide
    whether to allow an skb to be associated with sockets unrelated
    to page reclaim depending only on how it was allocated.
    
    Move the pfmemalloc flag before headers_start[0] using an
    existing 1-bit hole, so that __copy_skb_header() doesn't copy
    it.
    
    When cloning, we'll now take care of this flag explicitly,
    contravening to the warning comment of __skb_clone().
    
    While at it, restore the newline usage introduced by commit
    b19372273164 ("net: reorganize sk_buff for faster
    __copy_skb_header()") to visually separate bytes used in
    bitfields after headers_start[0], that was gone after commit
    a9e419dc7be6 ("netfilter: merge ctinfo into nfct pointer storage
    area"), and describe the pfmemalloc flag in the kernel-doc
    structure comment.
    
    This doesn't change the size of sk_buff or cacheline boundaries,
    but consolidates the 15 bits hole before tc_index into a 2 bytes
    hole before csum, that could now be filled more easily.
    
    Reported-by: Patrick Talbert <ptalbert@redhat.com>
    Fixes: c93bdd0e03e8 ("netvm: allow skb allocation to use PFMEMALLOC reserves")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c439f620382a2cb0c9df3609e180f59d3ff2ee10
Author: Alexander Couzens <lynxis@fe80.eu>
Date:   Tue Jul 17 13:17:09 2018 +0200

    net: usb: asix: replace mii_nway_restart in resume path
    
    [ Upstream commit 5c968f48021a9b3faa61ac2543cfab32461c0e05 ]
    
    mii_nway_restart is not pm aware which results in a rtnl deadlock.
    Implement mii_nway_restart manual by setting BMCR_ANRESTART if
    BMCR_ANENABLE is set.
    
    To reproduce:
    * plug an asix based usb network interface
    * wait until the device enters PM (~5 sec)
    * `ip link set eth1 up` will never return
    
    Fixes: d9fe64e51114 ("net: asix: Add in_pm parameter")
    Signed-off-by: Alexander Couzens <lynxis@fe80.eu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd08f4e69154625200efa7a239ba1147b2d04db9
Author: Sanjeev Bansal <sanjeevb.bansal@broadcom.com>
Date:   Mon Jul 16 11:13:32 2018 +0530

    tg3: Add higher cpu clock for 5762.
    
    [ Upstream commit 3a498606bb04af603a46ebde8296040b2de350d1 ]
    
    This patch has fix for TX timeout while running bi-directional
    traffic with 100 Mbps using 5762.
    
    Signed-off-by: Sanjeev Bansal <sanjeevb.bansal@broadcom.com>
    Signed-off-by: Siva Reddy Kallam <siva.kallam@broadcom.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 323bbb17d4905992c14e5512e2e8b93d29f060cc
Author: Matevz Vucnik <vucnikm@gmail.com>
Date:   Wed Jul 4 18:12:48 2018 +0200

    qmi_wwan: add support for Quectel EG91
    
    [ Upstream commit 38cd58ed9c4e389799b507bcffe02a7a7a180b33 ]
    
    This adds the USB id of LTE modem Quectel EG91. It requires the
    same quirk as other Quectel modems to make it work.
    
    Signed-off-by: Matevz Vucnik <vucnikm@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ac2bc675cfc0c77da9a1dcd72b6340acbcd8a29
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Jul 17 20:17:33 2018 -0500

    ptp: fix missing break in switch
    
    [ Upstream commit 9ba8376ce1e2cbf4ce44f7e4bee1d0648e10d594 ]
    
    It seems that a *break* is missing in order to avoid falling through
    to the default case. Otherwise, checking *chan* makes no sense.
    
    Fixes: 72df7a7244c0 ("ptp: Allow reassigning calibration pin function")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77befb4bd1083bb2001851c6a4439b2467055423
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Tue Jul 3 22:34:54 2018 +0200

    net: phy: fix flag masking in __set_phy_supported
    
    [ Upstream commit df8ed346d4a806a6eef2db5924285e839604b3f9 ]
    
    Currently also the pause flags are removed from phydev->supported because
    they're not included in PHY_DEFAULT_FEATURES. I don't think this is
    intended, especially when considering that this function can be called
    via phy_set_max_speed() anywhere in a driver. Change the masking to mask
    out only the values we're going to change. In addition remove the
    misleading comment, job of this small function is just to adjust the
    supported and advertised speeds.
    
    Fixes: f3a6bd393c2c ("phylib: Add phy_set_max_speed helper")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f08ca4c8b423c3cbfc254b73d1c12e622bd63c10
Author: David Ahern <dsahern@gmail.com>
Date:   Sat Jul 7 16:15:26 2018 -0700

    net/ipv4: Set oif in fib_compute_spec_dst
    
    [ Upstream commit e7372197e15856ec4ee66b668020a662994db103 ]
    
    Xin reported that icmp replies may not use the address on the device the
    echo request is received if the destination address is broadcast. Instead
    a route lookup is done without considering VRF context. Fix by setting
    oif in flow struct to the master device if it is enslaved. That directs
    the lookup to the VRF table. If the device is not enslaved, oif is still
    0 so no affect.
    
    Fixes: cd2fbe1b6b51 ("net: Use VRF device index for lookups on RX")
    Reported-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66a7cfa05740341e6cceab4694b4ace7ce88475f
Author: Lorenzo Colitti <lorenzo@google.com>
Date:   Sat Jul 7 16:31:40 2018 +0900

    net: diag: Don't double-free TCP_NEW_SYN_RECV sockets in tcp_abort
    
    [ Upstream commit acc2cf4e37174646a24cba42fa53c668b2338d4e ]
    
    When tcp_diag_destroy closes a TCP_NEW_SYN_RECV socket, it first
    frees it by calling inet_csk_reqsk_queue_drop_and_and_put in
    tcp_abort, and then frees it again by calling sock_gen_put.
    
    Since tcp_abort only has one caller, and all the other codepaths
    in tcp_abort don't free the socket, just remove the free in that
    function.
    
    Cc: David Ahern <dsa@cumulusnetworks.com>
    Tested: passes Android sock_diag_test.py, which exercises this codepath
    Fixes: d7226c7a4dd1 ("net: diag: Fix refcnt leak in error path destroying socket")
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsa@cumulusnetworks.com>
    Tested-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09ae0085ceb613fa94d82bc8bba5b5b9e2b9b2f6
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Mon Jul 16 13:26:13 2018 -0700

    lib/rhashtable: consider param->min_size when setting initial table size
    
    [ Upstream commit 107d01f5ba10f4162c38109496607eb197059064 ]
    
    rhashtable_init() currently does not take into account the user-passed
    min_size parameter unless param->nelem_hint is set as well. As such,
    the default size (number of buckets) will always be HASH_DEFAULT_SIZE
    even if the smallest allowed size is larger than that. Remediate this
    by unconditionally calling into rounded_hashtable_size() and handling
    things accordingly.
    
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8582bbfb8629d0dd7f29db5091e308bfcaf7af16
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Jul 17 17:12:39 2018 +0100

    ipv6: fix useless rol32 call on hash
    
    [ Upstream commit 169dc027fb02492ea37a0575db6a658cf922b854 ]
    
    The rol32 call is currently rotating hash but the rol'd value is
    being discarded. I believe the current code is incorrect and hash
    should be assigned the rotated value returned from rol32.
    
    Thanks to David Lebrun for spotting this.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79870c6c659713772c8969fd8c21dcba8fd253be
Author: Tyler Hicks <tyhicks@canonical.com>
Date:   Thu Jul 5 18:49:23 2018 +0000

    ipv4: Return EINVAL when ping_group_range sysctl doesn't map to user ns
    
    [ Upstream commit 70ba5b6db96ff7324b8cfc87e0d0383cf59c9677 ]
    
    The low and high values of the net.ipv4.ping_group_range sysctl were
    being silently forced to the default disabled state when a write to the
    sysctl contained GIDs that didn't map to the associated user namespace.
    Confusingly, the sysctl's write operation would return success and then
    a subsequent read of the sysctl would indicate that the low and high
    values are the overflowgid.
    
    This patch changes the behavior by clearly returning an error when the
    sysctl write operation receives a GID range that doesn't map to the
    associated user namespace. In such a situation, the previous value of
    the sysctl is preserved and that range will be returned in a subsequent
    read of the sysctl.
    
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec6a6039d7323abd1f28dafcf435700f072a1537
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Mon Jul 2 22:52:20 2018 +0200

    gen_stats: Fix netlink stats dumping in the presence of padding
    
    [ Upstream commit d5a672ac9f48f81b20b1cad1d9ed7bbf4e418d4c ]
    
    The gen_stats facility will add a header for the toplevel nlattr of type
    TCA_STATS2 that contains all stats added by qdisc callbacks. A reference
    to this header is stored in the gnet_dump struct, and when all the
    per-qdisc callbacks have finished adding their stats, the length of the
    containing header will be adjusted to the right value.
    
    However, on architectures that need padding (i.e., that don't set
    CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS), the padding nlattr is added
    before the stats, which means that the stored pointer will point to the
    padding, and so when the header is fixed up, the result is just a very
    big padding nlattr. Because most qdiscs also supply the legacy TCA_STATS
    struct, this problem has been mostly invisible, but we exposed it with
    the netlink attribute-based statistics in CAKE.
    
    Fix the issue by fixing up the stored pointer if it points to a padding
    nlattr.
    
    Tested-by: Pete Heist <pete@heistp.net>
    Tested-by: Kevin Darbyshire-Bryant <kevin@darbyshire-bryant.me.uk>
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e02c4f403c0b7f53e9b31ca76352e5351163c7e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Jun 14 20:56:25 2018 +0300

    drm/i915: Fix hotplug irq ack on i965/g4x
    
    commit 96a85cc517a9ee4ae5e8d7f5a36cba05023784eb upstream.
    
    Just like with PIPESTAT, the edge triggered IIR on i965/g4x
    also causes problems for hotplug interrupts. To make sure
    we don't get the IIR port interrupt bit stuck low with the
    ISR bit high we must force an edge in ISR. Unfortunately
    we can't borrow the PIPESTAT trick and toggle the enable
    bits in PORT_HOTPLUG_EN as that act itself generates hotplug
    interrupts. Instead we just have to loop until we've cleared
    PORT_HOTPLUG_STAT, or we just give up and WARN.
    
    v2: Don't frob with PORT_HOTPLUG_EN
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180614175625.1615-1-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    (cherry picked from commit 0ba7c51a6fd80a89236f6ceb52e63f8a7f62bfd3)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40974672ae870e02b781bf060b04688cf922e0f9
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Jul 17 12:39:00 2018 -0500

    vfio/pci: Fix potential Spectre v1
    
    commit 0e714d27786ce1fb3efa9aac58abc096e68b1c2a upstream.
    
    info.index can be indirectly controlled by user-space, hence leading
    to a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/vfio/pci/vfio_pci.c:734 vfio_pci_ioctl()
    warn: potential spectre issue 'vdev->region'
    
    Fix this by sanitizing info.index before indirectly using it to index
    vdev->region
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3472e37379f15a1a19c4ee66b14e56e07613a309
Author: Hugh Dickins <hughd@google.com>
Date:   Fri Jul 20 17:53:45 2018 -0700

    mm/huge_memory.c: fix data loss when splitting a file pmd
    
    commit e1f1b1572e8db87a56609fd05bef76f98f0e456a upstream.
    
    __split_huge_pmd_locked() must check if the cleared huge pmd was dirty,
    and propagate that to PageDirty: otherwise, data may be lost when a huge
    tmpfs page is modified then split then reclaimed.
    
    How has this taken so long to be noticed?  Because there was no problem
    when the huge page is written by a write system call (shmem_write_end()
    calls set_page_dirty()), nor when the page is allocated for a write fault
    (fault_dirty_shared_page() calls set_page_dirty()); but when allocated for
    a read fault (which MAP_POPULATE simulates), no set_page_dirty().
    
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.1807111741430.1106@eggly.anvils
    Fixes: d21b9e57c74c ("thp: handle file pages in split_huge_pmd()")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reported-by: Ashwin Chaugule <ashwinch@google.com>
    Reviewed-by: Yang Shi <yang.shi@linux.alibaba.com>
    Reviewed-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: "Huang, Ying" <ying.huang@intel.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f46b054eca657260236fca84748dc8946b0a24f3
Author: Jing Xia <jing.xia.mail@gmail.com>
Date:   Fri Jul 20 17:53:48 2018 -0700

    mm: memcg: fix use after free in mem_cgroup_iter()
    
    commit 9f15bde671355c351cf20d9f879004b234353100 upstream.
    
    It was reported that a kernel crash happened in mem_cgroup_iter(), which
    can be triggered if the legacy cgroup-v1 non-hierarchical mode is used.
    
    Unable to handle kernel paging request at virtual address 6b6b6b6b6b6b8f
    ......
    Call trace:
      mem_cgroup_iter+0x2e0/0x6d4
      shrink_zone+0x8c/0x324
      balance_pgdat+0x450/0x640
      kswapd+0x130/0x4b8
      kthread+0xe8/0xfc
      ret_from_fork+0x10/0x20
    
      mem_cgroup_iter():
          ......
          if (css_tryget(css))    <-- crash here
                break;
          ......
    
    The crashing reason is that mem_cgroup_iter() uses the memcg object whose
    pointer is stored in iter->position, which has been freed before and
    filled with POISON_FREE(0x6b).
    
    And the root cause of the use-after-free issue is that
    invalidate_reclaim_iterators() fails to reset the value of iter->position
    to NULL when the css of the memcg is released in non- hierarchical mode.
    
    Link: http://lkml.kernel.org/r/1531994807-25639-1-git-send-email-jing.xia@unisoc.com
    Fixes: 6df38689e0e9 ("mm: memcontrol: fix possible memcg leak due to interrupted reclaim")
    Signed-off-by: Jing Xia <jing.xia.mail@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <chunyan.zhang@unisoc.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1be686fe508d32521efd4fa7bcda581cb97813e0
Author: Alexey Brodkin <Alexey.Brodkin@synopsys.com>
Date:   Wed Jun 6 15:59:38 2018 +0300

    ARC: configs: Remove CONFIG_INITRAMFS_SOURCE from defconfigs
    
    commit 64234961c145606b36eaa82c47b11be842b21049 upstream.
    
    We used to have pre-set CONFIG_INITRAMFS_SOURCE with local path
    to intramfs in ARC defconfigs. This was quite convenient for
    in-house development but not that convenient for newcomers
    who obviusly don't have folders like "arc_initramfs" next to
    the Linux source tree. Which leads to quite surprising failure
    of defconfig building:
    ------------------------------->8-----------------------------
      ../scripts/gen_initramfs_list.sh: Cannot open '../../arc_initramfs_hs/'
    ../usr/Makefile:57: recipe for target 'usr/initramfs_data.cpio.gz' failed
    make[2]: *** [usr/initramfs_data.cpio.gz] Error 1
    ------------------------------->8-----------------------------
    
    So now when more and more people start to deal with our defconfigs
    let's make their life easier with removal of CONFIG_INITRAMFS_SOURCE.
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ee7d6f173308488c4ea190cbedd435b2a166e46
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Jul 11 10:42:20 2018 -0700

    ARC: mm: allow mprotect to make stack mappings executable
    
    commit 93312b6da4df31e4102ce5420e6217135a16c7ea upstream.
    
    mprotect(EXEC) was failing for stack mappings as default vm flags was
    missing MAYEXEC.
    
    This was triggered by glibc test suite nptl/tst-execstack testcase
    
    What is surprising is that despite running LTP for years on, we didn't
    catch this issue as it lacks a directed test case.
    
    gcc dejagnu tests with nested functions also requiring exec stack work
    fine though because they rely on the GNU_STACK segment spit out by
    compiler and handled in kernel elf loader.
    
    This glibc case is different as the stack is non exec to begin with and
    a dlopen of shared lib with GNU_STACK segment triggers the exec stack
    proceedings using a mprotect(PROT_EXEC) which was broken.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a80fb0d7752e6ae163d72736b9401076c7b75c9
Author: Alexey Brodkin <abrodkin@synopsys.com>
Date:   Thu Jun 28 16:59:14 2018 -0700

    ARC: Fix CONFIG_SWAP
    
    commit 6e3761145a9ba3ce267c330b6bff51cf6a057b06 upstream.
    
    swap was broken on ARC due to silly copy-paste issue.
    
    We encode offset from swapcache page in __swp_entry() as (off << 13) but
    were not decoding back in __swp_offset() as (off >> 13) - it was still
    (off << 13).
    
    This finally fixes swap usage on ARC.
    
    | # mkswap /dev/sda2
    |
    | # swapon -a -e /dev/sda2
    | Adding 500728k swap on /dev/sda2.  Priority:-2 extents:1 across:500728k
    |
    | # free
    |              total       used       free     shared    buffers     cached
    | Mem:        765104      13456     751648       4736          8       4736
    | -/+ buffers/cache:       8712     756392
    | Swap:       500728          0     500728
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4f094deb3d69dcc8b4e3dc6c056c1e62a72c33e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jul 17 17:26:43 2018 +0200

    ALSA: rawmidi: Change resized buffers atomically
    
    commit 39675f7a7c7e7702f7d5341f1e0d01db746543a0 upstream.
    
    The SNDRV_RAWMIDI_IOCTL_PARAMS ioctl may resize the buffers and the
    current code is racy.  For example, the sequencer client may write to
    buffer while it being resized.
    
    As a simple workaround, let's switch to the resized buffer inside the
    stream runtime lock.
    
    Reported-by: syzbot+52f83f0ea8df16932f7f@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fc87cc95b4de93348821f7a23c927b58deab593
Author: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
Date:   Fri Jul 20 17:53:42 2018 -0700

    fat: fix memory allocation failure handling of match_strdup()
    
    commit 35033ab988c396ad7bce3b6d24060c16a9066db8 upstream.
    
    In parse_options(), if match_strdup() failed, parse_options() leaves
    opts->iocharset in unexpected state (i.e.  still pointing the freed
    string).  And this can be the cause of double free.
    
    To fix, this initialize opts->iocharset always when freeing.
    
    Link: http://lkml.kernel.org/r/8736wp9dzc.fsf@mail.parknet.co.jp
    Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Reported-by: syzbot+90b8e10515ae88228a92@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91b6b9d0bf39443d708352c193c597a01e9b0004
Author: Dewet Thibaut <thibaut.dewet@nokia.com>
Date:   Mon Jul 16 10:49:27 2018 +0200

    x86/MCE: Remove min interval polling limitation
    
    commit fbdb328c6bae0a7c78d75734a738b66b86dffc96 upstream.
    
    commit b3b7c4795c ("x86/MCE: Serialize sysfs changes") introduced a min
    interval limitation when setting the check interval for polled MCEs.
    However, the logic is that 0 disables polling for corrected MCEs, see
    Documentation/x86/x86_64/machinecheck. The limitation prevents disabling.
    
    Remove this limitation and allow the value 0 to disable polling again.
    
    Fixes: b3b7c4795c ("x86/MCE: Serialize sysfs changes")
    Signed-off-by: Dewet Thibaut <thibaut.dewet@nokia.com>
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    [ Massage commit message. ]
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20180716084927.24869-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ac85d22332118d2dc449536110a31a5ca3956b0
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jul 9 16:35:34 2018 +0300

    x86/apm: Don't access __preempt_count with zeroed fs
    
    commit 6f6060a5c9cc76fdbc22748264e6aa3779ec2427 upstream.
    
    APM_DO_POP_SEGS does not restore fs/gs which were zeroed by
    APM_DO_ZERO_SEGS. Trying to access __preempt_count with
    zeroed fs doesn't really work.
    
    Move the ibrs call outside the APM_DO_SAVE_SEGS/APM_DO_RESTORE_SEGS
    invocations so that fs is actually restored before calling
    preempt_enable().
    
    Fixes the following sort of oopses:
    [    0.313581] general protection fault: 0000 [#1] PREEMPT SMP
    [    0.313803] Modules linked in:
    [    0.314040] CPU: 0 PID: 268 Comm: kapmd Not tainted 4.16.0-rc1-triton-bisect-00090-gdd84441a7971 #19
    [    0.316161] EIP: __apm_bios_call_simple+0xc8/0x170
    [    0.316161] EFLAGS: 00210016 CPU: 0
    [    0.316161] EAX: 00000102 EBX: 00000000 ECX: 00000102 EDX: 00000000
    [    0.316161] ESI: 0000530e EDI: dea95f64 EBP: dea95f18 ESP: dea95ef0
    [    0.316161]  DS: 007b ES: 007b FS: 0000 GS: 0000 SS: 0068
    [    0.316161] CR0: 80050033 CR2: 00000000 CR3: 015d3000 CR4: 000006d0
    [    0.316161] Call Trace:
    [    0.316161]  ? cpumask_weight.constprop.15+0x20/0x20
    [    0.316161]  on_cpu0+0x44/0x70
    [    0.316161]  apm+0x54e/0x720
    [    0.316161]  ? __switch_to_asm+0x26/0x40
    [    0.316161]  ? __schedule+0x17d/0x590
    [    0.316161]  kthread+0xc0/0xf0
    [    0.316161]  ? proc_apm_show+0x150/0x150
    [    0.316161]  ? kthread_create_worker_on_cpu+0x20/0x20
    [    0.316161]  ret_from_fork+0x2e/0x38
    [    0.316161] Code: da 8e c2 8e e2 8e ea 57 55 2e ff 1d e0 bb 5d b1 0f 92 c3 5d 5f 07 1f 89 47 0c 90 8d b4 26 00 00 00 00 90 8d b4 26 00 00 00 00 90 <64> ff 0d 84 16 5c b1 74 7f 8b 45 dc 8e e0 8b 45 d8 8e e8 8b 45
    [    0.316161] EIP: __apm_bios_call_simple+0xc8/0x170 SS:ESP: 0068:dea95ef0
    [    0.316161] ---[ end trace 656253db2deaa12c ]---
    
    Fixes: dd84441a7971 ("x86/speculation: Use IBRS if available before calling into firmware")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Cc:  David Woodhouse <dwmw@amazon.co.uk>
    Cc:  "H. Peter Anvin" <hpa@zytor.com>
    Cc:  x86@kernel.org
    Cc: David Woodhouse <dwmw@amazon.co.uk>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Link: https://lkml.kernel.org/r/20180709133534.5963-1-ville.syrjala@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76267a8a19cdc40094796a2bd032eaf437774c35
Author: Lan Tianyu <tianyu.lan@intel.com>
Date:   Thu Dec 21 21:10:36 2017 -0500

    KVM/Eventfd: Avoid crash when assign and deassign specific eventfd in parallel.
    
    commit b5020a8e6b54d2ece80b1e7dedb33c79a40ebd47 upstream.
    
    Syzbot reports crashes in kvm_irqfd_assign(), caused by use-after-free
    when kvm_irqfd_assign() and kvm_irqfd_deassign() run in parallel
    for one specific eventfd. When the assign path hasn't finished but irqfd
    has been added to kvm->irqfds.items list, another thead may deassign the
    eventfd and free struct kvm_kernel_irqfd(). The assign path then uses
    the struct kvm_kernel_irqfd that has been freed by deassign path. To avoid
    such issue, keep irqfd under kvm->irq_srcu protection after the irqfd
    has been added to kvm->irqfds.items list, and call synchronize_srcu()
    in irq_shutdown() to make sure that irqfd has been fully initialized in
    the assign path.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Tianyu Lan <tianyu.lan@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
