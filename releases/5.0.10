commit d3da1f09fff27b3ae5908119dab312b9baec09e0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Apr 27 09:37:45 2019 +0200

    Linux 5.0.10

commit c735a988a9caa19b752565203b8c8924202a8555
Author: Will Deacon <will@kernel.org>
Date:   Fri Apr 5 18:39:38 2019 -0700

    kernel/sysctl.c: fix out-of-bounds access when setting file-max
    
    commit 9002b21465fa4d829edfc94a5a441005cffaa972 upstream.
    
    Commit 32a5ad9c2285 ("sysctl: handle overflow for file-max") hooked up
    min/max values for the file-max sysctl parameter via the .extra1 and
    .extra2 fields in the corresponding struct ctl_table entry.
    
    Unfortunately, the minimum value points at the global 'zero' variable,
    which is an int.  This results in a KASAN splat when accessed as a long
    by proc_doulongvec_minmax on 64-bit architectures:
    
      | BUG: KASAN: global-out-of-bounds in __do_proc_doulongvec_minmax+0x5d8/0x6a0
      | Read of size 8 at addr ffff2000133d1c20 by task systemd/1
      |
      | CPU: 0 PID: 1 Comm: systemd Not tainted 5.1.0-rc3-00012-g40b114779944 #2
      | Hardware name: linux,dummy-virt (DT)
      | Call trace:
      |  dump_backtrace+0x0/0x228
      |  show_stack+0x14/0x20
      |  dump_stack+0xe8/0x124
      |  print_address_description+0x60/0x258
      |  kasan_report+0x140/0x1a0
      |  __asan_report_load8_noabort+0x18/0x20
      |  __do_proc_doulongvec_minmax+0x5d8/0x6a0
      |  proc_doulongvec_minmax+0x4c/0x78
      |  proc_sys_call_handler.isra.19+0x144/0x1d8
      |  proc_sys_write+0x34/0x58
      |  __vfs_write+0x54/0xe8
      |  vfs_write+0x124/0x3c0
      |  ksys_write+0xbc/0x168
      |  __arm64_sys_write+0x68/0x98
      |  el0_svc_common+0x100/0x258
      |  el0_svc_handler+0x48/0xc0
      |  el0_svc+0x8/0xc
      |
      | The buggy address belongs to the variable:
      |  zero+0x0/0x40
      |
      | Memory state around the buggy address:
      |  ffff2000133d1b00: 00 00 00 00 00 00 00 00 fa fa fa fa 04 fa fa fa
      |  ffff2000133d1b80: fa fa fa fa 04 fa fa fa fa fa fa fa 04 fa fa fa
      | >ffff2000133d1c00: fa fa fa fa 04 fa fa fa fa fa fa fa 00 00 00 00
      |                                ^
      |  ffff2000133d1c80: fa fa fa fa 00 fa fa fa fa fa fa fa 00 00 00 00
      |  ffff2000133d1d00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Fix the splat by introducing a unsigned long 'zero_ul' and using that
    instead.
    
    Link: http://lkml.kernel.org/r/20190403153409.17307-1-will.deacon@arm.com
    Fixes: 32a5ad9c2285 ("sysctl: handle overflow for file-max")
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Christian Brauner <christian@brauner.io>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 822482bff7c53312f508c8e94b424823f66d67f8
Author: Matteo Croce <mcroce@redhat.com>
Date:   Mon Mar 18 02:32:36 2019 +0100

    percpu: stop printing kernel addresses
    
    commit 00206a69ee32f03e6f40837684dcbe475ea02266 upstream.
    
    Since commit ad67b74d2469d9b8 ("printk: hash addresses printed with %p"),
    at boot "____ptrval____" is printed instead of actual addresses:
    
        percpu: Embedded 38 pages/cpu @(____ptrval____) s124376 r0 d31272 u524288
    
    Instead of changing the print to "%px", and leaking kernel addresses,
    just remove the print completely, cfr. e.g. commit 071929dbdd865f77
    ("arm64: Stop printing the virtual memory layout").
    
    Signed-off-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2c65593ea626d28f1d20ed86281f8a8fdec2738
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 16 15:25:00 2019 +0200

    ALSA: info: Fix racy addition/deletion of nodes
    
    commit 8c2f870890fd28e023b0fcf49dcee333f2c8bad7 upstream.
    
    The ALSA proc helper manages the child nodes in a linked list, but its
    addition and deletion is done without any lock.  This leads to a
    corruption if they are operated concurrently.  Usually this isn't a
    problem because the proc entries are added sequentially in the driver
    probe procedure itself.  But the card registrations are done often
    asynchronously, and the crash could be actually reproduced with
    syzkaller.
    
    This patch papers over it by protecting the link addition and deletion
    with the parent's mutex.  There is "access" mutex that is used for the
    file access, and this can be reused for this purpose as well.
    
    Reported-by: syzbot+48df349490c36f9f54ab@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3d0cf332bcde20591186a72d2de915c5bc0cc68
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Thu Apr 18 17:50:20 2019 -0700

    mm/vmstat.c: fix /proc/vmstat format for CONFIG_DEBUG_TLBFLUSH=y CONFIG_SMP=n
    
    commit e8277b3b52240ec1caad8e6df278863e4bf42eac upstream.
    
    Commit 58bc4c34d249 ("mm/vmstat.c: skip NR_TLB_REMOTE_FLUSH* properly")
    depends on skipping vmstat entries with empty name introduced in
    7aaf77272358 ("mm: don't show nr_indirectly_reclaimable in
    /proc/vmstat") but reverted in b29940c1abd7 ("mm: rename and change
    semantics of nr_indirectly_reclaimable_bytes").
    
    So skipping no longer works and /proc/vmstat has misformatted lines " 0".
    
    This patch simply shows debug counters "nr_tlb_remote_*" for UP.
    
    Link: http://lkml.kernel.org/r/155481488468.467.4295519102880913454.stgit@buzz
    Fixes: 58bc4c34d249 ("mm/vmstat.c: skip NR_TLB_REMOTE_FLUSH* properly")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ae522890cc19038c84769d20f9ffdfc2d58a36b
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Thu Apr 18 17:50:16 2019 -0700

    mm/memory_hotplug: do not unlock after failing to take the device_hotplug_lock
    
    commit 37803841c92d7b327147e0b1be3436423189e1cf upstream.
    
    When adding memory by probing a memory block in the sysfs interface,
    there is an obvious issue where we will unlock the device_hotplug_lock
    when we failed to takes it.
    
    That issue was introduced in 8df1d0e4a265 ("mm/memory_hotplug: make
    add_memory() take the device_hotplug_lock").
    
    We should drop out in time when failing to take the device_hotplug_lock.
    
    Link: http://lkml.kernel.org/r/1554696437-9593-1-git-send-email-zhongjiang@huawei.com
    Fixes: 8df1d0e4a265 ("mm/memory_hotplug: make add_memory() take the device_hotplug_lock")
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Reported-by: Yang yingliang <yangyingliang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c138ed72186accb0dac95066118374cf6c0807ae
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Fri Mar 29 11:13:38 2019 +0200

    perf/ring_buffer: Fix AUX record suppression
    
    commit 339bc4183596e1f68c2c98a03b87aa124107c317 upstream.
    
    The following commit:
    
      1627314fb54a33e ("perf: Suppress AUX/OVERWRITE records")
    
    has an unintended side-effect of also suppressing all AUX records with no flags
    and non-zero size, so all the regular records in the full trace mode.
    This breaks some use cases for people.
    
    Fix this by restoring "regular" AUX records.
    
    Reported-by: Ben Gainey <Ben.Gainey@arm.com>
    Tested-by: Ben Gainey <Ben.Gainey@arm.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: 1627314fb54a33e ("perf: Suppress AUX/OVERWRITE records")
    Link: https://lkml.kernel.org/r/20190329091338.29999-1-alexander.shishkin@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65fce15dbd8726c9f13c7b0b240f430afdca6a2c
Author: Jann Horn <jannh@google.com>
Date:   Tue Mar 19 02:36:59 2019 +0100

    device_cgroup: fix RCU imbalance in error case
    
    commit 0fcc4c8c044e117ac126ab6df4138ea9a67fa2a9 upstream.
    
    When dev_exception_add() returns an error (due to a failed memory
    allocation), make sure that we move the RCU preemption count back to where
    it was before we were called. We dropped the RCU read lock inside the loop
    body, so we can't just "break".
    
    sparse complains about this, too:
    
    $ make -s C=2 security/device_cgroup.o
    ./include/linux/rcupdate.h:647:9: warning: context imbalance in
    'propagate_exception' - unexpected unlock
    
    Fixes: d591fb56618f ("device_cgroup: simplify cgroup tree walk in propagate_exception()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74b4ef5df5902466a9cb832c27bcead743cda822
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Fri Apr 5 13:42:56 2019 +0200

    mt76x02: avoid status_list.lock and sta->rate_ctrl_lock dependency
    
    commit bafdf85dfa59374f927ff597bc8c259193afda30 upstream.
    
    Move ieee80211_tx_status_ext() outside of status_list lock section
    in order to avoid locking dependency and possible deadlock reposed by
    LOCKDEP in below warning.
    
    Also do mt76_tx_status_lock() just before it's needed.
    
    [  440.224832] WARNING: possible circular locking dependency detected
    [  440.224833] 5.1.0-rc2+ #22 Not tainted
    [  440.224834] ------------------------------------------------------
    [  440.224835] kworker/u16:28/2362 is trying to acquire lock:
    [  440.224836] 0000000089b8cacf (&(&q->lock)->rlock#2){+.-.}, at: mt76_wake_tx_queue+0x4c/0xb0 [mt76]
    [  440.224842]
                   but task is already holding lock:
    [  440.224842] 000000002cfedc59 (&(&sta->lock)->rlock){+.-.}, at: ieee80211_stop_tx_ba_cb+0x32/0x1f0 [mac80211]
    [  440.224863]
                   which lock already depends on the new lock.
    
    [  440.224863]
                   the existing dependency chain (in reverse order) is:
    [  440.224864]
                   -> #3 (&(&sta->lock)->rlock){+.-.}:
    [  440.224869]        _raw_spin_lock_bh+0x34/0x40
    [  440.224880]        ieee80211_start_tx_ba_session+0xe4/0x3d0 [mac80211]
    [  440.224894]        minstrel_ht_get_rate+0x45c/0x510 [mac80211]
    [  440.224906]        rate_control_get_rate+0xc1/0x140 [mac80211]
    [  440.224918]        ieee80211_tx_h_rate_ctrl+0x195/0x3c0 [mac80211]
    [  440.224930]        ieee80211_xmit_fast+0x26d/0xa50 [mac80211]
    [  440.224942]        __ieee80211_subif_start_xmit+0xfc/0x310 [mac80211]
    [  440.224954]        ieee80211_subif_start_xmit+0x38/0x390 [mac80211]
    [  440.224956]        dev_hard_start_xmit+0xb8/0x300
    [  440.224957]        __dev_queue_xmit+0x7d4/0xbb0
    [  440.224968]        ip6_finish_output2+0x246/0x860 [ipv6]
    [  440.224978]        mld_sendpack+0x1bd/0x360 [ipv6]
    [  440.224987]        mld_ifc_timer_expire+0x1a4/0x2f0 [ipv6]
    [  440.224989]        call_timer_fn+0x89/0x2a0
    [  440.224990]        run_timer_softirq+0x1bd/0x4d0
    [  440.224992]        __do_softirq+0xdb/0x47c
    [  440.224994]        irq_exit+0xfa/0x100
    [  440.224996]        smp_apic_timer_interrupt+0x9a/0x220
    [  440.224997]        apic_timer_interrupt+0xf/0x20
    [  440.224999]        cpuidle_enter_state+0xc1/0x470
    [  440.225000]        do_idle+0x21a/0x260
    [  440.225001]        cpu_startup_entry+0x19/0x20
    [  440.225004]        start_secondary+0x135/0x170
    [  440.225006]        secondary_startup_64+0xa4/0xb0
    [  440.225007]
                   -> #2 (&(&sta->rate_ctrl_lock)->rlock){+.-.}:
    [  440.225009]        _raw_spin_lock_bh+0x34/0x40
    [  440.225022]        rate_control_tx_status+0x4f/0xb0 [mac80211]
    [  440.225031]        ieee80211_tx_status_ext+0x142/0x1a0 [mac80211]
    [  440.225035]        mt76x02_send_tx_status+0x2e4/0x340 [mt76x02_lib]
    [  440.225037]        mt76x02_tx_status_data+0x31/0x40 [mt76x02_lib]
    [  440.225040]        mt76u_tx_status_data+0x51/0xa0 [mt76_usb]
    [  440.225042]        process_one_work+0x237/0x5d0
    [  440.225043]        worker_thread+0x3c/0x390
    [  440.225045]        kthread+0x11d/0x140
    [  440.225046]        ret_from_fork+0x3a/0x50
    [  440.225047]
                   -> #1 (&(&list->lock)->rlock#8){+.-.}:
    [  440.225049]        _raw_spin_lock_bh+0x34/0x40
    [  440.225052]        mt76_tx_status_skb_add+0x51/0x100 [mt76]
    [  440.225054]        mt76x02u_tx_prepare_skb+0xbd/0x116 [mt76x02_usb]
    [  440.225056]        mt76u_tx_queue_skb+0x5f/0x180 [mt76_usb]
    [  440.225058]        mt76_tx+0x93/0x190 [mt76]
    [  440.225070]        ieee80211_tx_frags+0x148/0x210 [mac80211]
    [  440.225081]        __ieee80211_tx+0x75/0x1b0 [mac80211]
    [  440.225092]        ieee80211_tx+0xde/0x110 [mac80211]
    [  440.225105]        __ieee80211_tx_skb_tid_band+0x72/0x90 [mac80211]
    [  440.225122]        ieee80211_send_auth+0x1f3/0x360 [mac80211]
    [  440.225141]        ieee80211_auth.cold.40+0x6c/0x100 [mac80211]
    [  440.225156]        ieee80211_mgd_auth.cold.50+0x132/0x15f [mac80211]
    [  440.225171]        cfg80211_mlme_auth+0x149/0x360 [cfg80211]
    [  440.225181]        nl80211_authenticate+0x273/0x2e0 [cfg80211]
    [  440.225183]        genl_family_rcv_msg+0x196/0x3a0
    [  440.225184]        genl_rcv_msg+0x47/0x8e
    [  440.225185]        netlink_rcv_skb+0x3a/0xf0
    [  440.225187]        genl_rcv+0x24/0x40
    [  440.225188]        netlink_unicast+0x16d/0x210
    [  440.225189]        netlink_sendmsg+0x204/0x3b0
    [  440.225191]        sock_sendmsg+0x36/0x40
    [  440.225193]        ___sys_sendmsg+0x259/0x2b0
    [  440.225194]        __sys_sendmsg+0x47/0x80
    [  440.225196]        do_syscall_64+0x60/0x1f0
    [  440.225197]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  440.225198]
                   -> #0 (&(&q->lock)->rlock#2){+.-.}:
    [  440.225200]        lock_acquire+0xb9/0x1a0
    [  440.225202]        _raw_spin_lock_bh+0x34/0x40
    [  440.225204]        mt76_wake_tx_queue+0x4c/0xb0 [mt76]
    [  440.225215]        ieee80211_agg_start_txq+0xe8/0x2b0 [mac80211]
    [  440.225225]        ieee80211_stop_tx_ba_cb+0xb8/0x1f0 [mac80211]
    [  440.225235]        ieee80211_ba_session_work+0x1c1/0x2f0 [mac80211]
    [  440.225236]        process_one_work+0x237/0x5d0
    [  440.225237]        worker_thread+0x3c/0x390
    [  440.225239]        kthread+0x11d/0x140
    [  440.225240]        ret_from_fork+0x3a/0x50
    [  440.225240]
                   other info that might help us debug this:
    
    [  440.225241] Chain exists of:
                     &(&q->lock)->rlock#2 --> &(&sta->rate_ctrl_lock)->rlock --> &(&sta->lock)->rlock
    
    [  440.225243]  Possible unsafe locking scenario:
    
    [  440.225244]        CPU0                    CPU1
    [  440.225244]        ----                    ----
    [  440.225245]   lock(&(&sta->lock)->rlock);
    [  440.225245]                                lock(&(&sta->rate_ctrl_lock)->rlock);
    [  440.225246]                                lock(&(&sta->lock)->rlock);
    [  440.225247]   lock(&(&q->lock)->rlock#2);
    [  440.225248]
                    *** DEADLOCK ***
    
    [  440.225249] 5 locks held by kworker/u16:28/2362:
    [  440.225250]  #0: 0000000048fcd291 ((wq_completion)phy0){+.+.}, at: process_one_work+0x1b5/0x5d0
    [  440.225252]  #1: 00000000f1c6828f ((work_completion)(&sta->ampdu_mlme.work)){+.+.}, at: process_one_work+0x1b5/0x5d0
    [  440.225254]  #2: 00000000433d2b2c (&sta->ampdu_mlme.mtx){+.+.}, at: ieee80211_ba_session_work+0x5c/0x2f0 [mac80211]
    [  440.225265]  #3: 000000002cfedc59 (&(&sta->lock)->rlock){+.-.}, at: ieee80211_stop_tx_ba_cb+0x32/0x1f0 [mac80211]
    [  440.225276]  #4: 000000009d7b9a44 (rcu_read_lock){....}, at: ieee80211_agg_start_txq+0x33/0x2b0 [mac80211]
    [  440.225286]
                   stack backtrace:
    [  440.225288] CPU: 2 PID: 2362 Comm: kworker/u16:28 Not tainted 5.1.0-rc2+ #22
    [  440.225289] Hardware name: LENOVO 20KGS23S0P/20KGS23S0P, BIOS N23ET55W (1.30 ) 08/31/2018
    [  440.225300] Workqueue: phy0 ieee80211_ba_session_work [mac80211]
    [  440.225301] Call Trace:
    [  440.225304]  dump_stack+0x85/0xc0
    [  440.225306]  print_circular_bug.isra.38.cold.58+0x15c/0x195
    [  440.225307]  check_prev_add.constprop.48+0x5f0/0xc00
    [  440.225309]  ? check_prev_add.constprop.48+0x39d/0xc00
    [  440.225311]  ? __lock_acquire+0x41d/0x1100
    [  440.225312]  __lock_acquire+0xd98/0x1100
    [  440.225313]  ? __lock_acquire+0x41d/0x1100
    [  440.225315]  lock_acquire+0xb9/0x1a0
    [  440.225317]  ? mt76_wake_tx_queue+0x4c/0xb0 [mt76]
    [  440.225319]  _raw_spin_lock_bh+0x34/0x40
    [  440.225321]  ? mt76_wake_tx_queue+0x4c/0xb0 [mt76]
    [  440.225323]  mt76_wake_tx_queue+0x4c/0xb0 [mt76]
    [  440.225334]  ieee80211_agg_start_txq+0xe8/0x2b0 [mac80211]
    [  440.225344]  ieee80211_stop_tx_ba_cb+0xb8/0x1f0 [mac80211]
    [  440.225354]  ieee80211_ba_session_work+0x1c1/0x2f0 [mac80211]
    [  440.225356]  process_one_work+0x237/0x5d0
    [  440.225358]  worker_thread+0x3c/0x390
    [  440.225359]  ? wq_calc_node_cpumask+0x70/0x70
    [  440.225360]  kthread+0x11d/0x140
    [  440.225362]  ? kthread_create_on_node+0x40/0x40
    [  440.225363]  ret_from_fork+0x3a/0x50
    
    Cc: stable@vger.kernel.org
    Fixes: 88046b2c9f6d ("mt76: add support for reporting tx status with skb")
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Acked-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edc94cb2c13b06d9f72eda5dd96fecbe3973ad96
Author: Tadeusz Struk <tadeusz.struk@intel.com>
Date:   Wed Mar 27 11:32:38 2019 -0700

    tpm: fix an invalid condition in tpm_common_poll
    
    [ Upstream commit 7110629263469b4664d00b38ef80a656eddf3637 ]
    
    The poll condition should only check response_length,
    because reads should only be issued if there is data to read.
    The response_read flag only prevents double writes.
    The problem was that the write set the response_read to false,
    enqued a tpm job, and returned. Then application called poll
    which checked the response_read flag and returned EPOLLIN.
    Then the application called read, but got nothing.
    After all that the async_work kicked in.
    Added also mutex_lock around the poll check to prevent
    other possible race conditions.
    
    Fixes: 9488585b21bef0df12 ("tpm: add support for partial reads")
    Reported-by: Mantas Mikulėnas <grawity@gmail.com>
    Tested-by: Mantas Mikulėnas <grawity@gmail.com>
    Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6799f32fff632c0659d4385edcf8f4ce883bc5fc
Author: Phil Auld <pauld@redhat.com>
Date:   Tue Apr 23 19:51:06 2019 -0400

    sched/fair: Limit sched_cfs_period_timer() loop to avoid hard lockup
    
    [ Upstream commit 2e8e19226398db8265a8e675fcc0118b9e80c9e8 ]
    
    With extremely short cfs_period_us setting on a parent task group with a large
    number of children the for loop in sched_cfs_period_timer() can run until the
    watchdog fires. There is no guarantee that the call to hrtimer_forward_now()
    will ever return 0.  The large number of children can make
    do_sched_cfs_period_timer() take longer than the period.
    
     NMI watchdog: Watchdog detected hard LOCKUP on cpu 24
     RIP: 0010:tg_nop+0x0/0x10
      <IRQ>
      walk_tg_tree_from+0x29/0xb0
      unthrottle_cfs_rq+0xe0/0x1a0
      distribute_cfs_runtime+0xd3/0xf0
      sched_cfs_period_timer+0xcb/0x160
      ? sched_cfs_slack_timer+0xd0/0xd0
      __hrtimer_run_queues+0xfb/0x270
      hrtimer_interrupt+0x122/0x270
      smp_apic_timer_interrupt+0x6a/0x140
      apic_timer_interrupt+0xf/0x20
      </IRQ>
    
    To prevent this we add protection to the loop that detects when the loop has run
    too many times and scales the period and quota up, proportionally, so that the timer
    can complete before then next period expires.  This preserves the relative runtime
    quota while preventing the hard lockup.
    
    A warning is issued reporting this state and the new values.
    
    Signed-off-by: Phil Auld <pauld@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Cc: Anton Blanchard <anton@ozlabs.org>
    Cc: Ben Segall <bsegall@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20190319130005.25492-1-pauld@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb9693679feb5e3fa9c983ec35dfa068a9ad83af
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Tue Apr 23 12:04:26 2019 -0700

    Revert "kbuild: use -Oz instead of -Os when using clang"
    
    commit a75bb4eb9e565b9f5115e2e8c07377ce32cbe69a upstream.
    
    The clang option -Oz enables *aggressive* optimization for size,
    which doesn't necessarily result in smaller images, but can have
    negative impact on performance. Switch back to the less aggressive
    -Os.
    
    This reverts commit 6748cb3c299de1ffbe56733647b01dbcc398c419.
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18636692a1b49f0c0ebf623ad29b65514886c59c
Author: Yue Haibing <yuehaibing@huawei.com>
Date:   Tue Apr 23 16:05:18 2019 +0300

    tpm: Fix the type of the return value in calc_tpm2_event_size()
    
    commit b9d0a85d6b2e76630cfd4c475ee3af4109bfd87a upstream
    
    calc_tpm2_event_size() has an invalid signature because
    it returns a 'size_t' where as its signature says that
    it returns 'int'.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 4d23cc323cdb ("tpm: add securityfs support for TPM 2.0 firmware event log")
    Suggested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Yue Haibing <yuehaibing@huawei.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03c1d8f8afd8e59b67566d39416db8b0bc66668f
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Fri Feb 8 18:30:59 2019 +0200

    tpm/tpm_i2c_atmel: Return -E2BIG when the transfer is incomplete
    
    [ Upstream commit 442601e87a4769a8daba4976ec3afa5222ca211d ]
    
    Return -E2BIG when the transfer is incomplete. The upper layer does
    not retry, so not doing that is incorrect behaviour.
    
    Cc: stable@vger.kernel.org
    Fixes: a2871c62e186 ("tpm: Add support for Atmel I2C TPMs")
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a96e63f8f7dcfc3aaae2414e7fec63aee6ab5db
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Apr 22 16:08:26 2019 -0700

    nfit/ars: Avoid stale ARS results
    
    commit 78153dd45e7e0596ba32b15d02bda08e1513111e upstream.
    
    Gate ARS result consumption on whether the OS issued start-ARS since the
    previous consumption. The BIOS may only clear its result buffers after a
    successful start-ARS.
    
    Fixes: 0caeef63e6d2 ("libnvdimm: Add a poison list and export badblocks")
    Cc: <stable@vger.kernel.org>
    Reported-by: Krzysztof Rusocki <krzysztof.rusocki@intel.com>
    Reported-by: Vishal Verma <vishal.l.verma@intel.com>
    Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33dcadf02c1fa08b2e247be4b0a9e5ffd3c931df
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Apr 22 16:08:21 2019 -0700

    nfit/ars: Allow root to busy-poll the ARS state machine
    
    commit 5479b2757f26fe9908fc341d105b2097fe820b6f upstream.
    
    The ARS implementation implements exponential back-off on the poll
    interval to prevent high-frequency access to the DIMM / platform
    interface. Depending on when the ARS completes the poll interval may
    exceed the completion event by minutes. Allow root to reset the timeout
    each time it probes the status. A one-second timeout is still enforced,
    but root can otherwise can control the poll interval.
    
    Fixes: bc6ba8085842 ("nfit, address-range-scrub: rework and simplify ARS...")
    Cc: <stable@vger.kernel.org>
    Reported-by: Erwin Tsaur <erwin.tsaur@oracle.com>
    Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b49a9157c3ec867af424fde0c475eb2904492daa
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Apr 22 16:08:16 2019 -0700

    nfit/ars: Introduce scrub_flags
    
    commit e34b8252a3d2893ca55c82dbfcdaa302fa03d400 upstream.
    
    In preparation for introducing new flags to gate whether ARS results are
    stale, or poll the completion state, convert the existing flags to an
    unsigned long with enumerated values. This conversion allows the flags
    to be atomically updated outside of ->init_mutex.
    
    Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cc8e8c230e8cb047e94abaa59dd722e4c900792
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Apr 22 16:08:10 2019 -0700

    nfit/ars: Remove ars_start_flags
    
    commit 317a992ab9266b86b774b9f6b0f87eb4f59879a1 upstream.
    
    The ars_start_flags property of 'struct acpi_nfit_desc' is no longer
    used since ARS_REQ_SHORT and ARS_REQ_LONG were added.
    
    Reviewed-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 451fd88f62b9e1a684d6e6503425ee0610d755a0
Author: Chang-An Chen <chang-an.chen@mediatek.com>
Date:   Fri Mar 29 10:59:09 2019 +0800

    timers/sched_clock: Prevent generic sched_clock wrap caused by tick_freeze()
    
    commit 3f2552f7e9c5abef2775c53f7af66532f8bf65bc upstream.
    
    tick_freeze() introduced by suspend-to-idle in commit 124cf9117c5f ("PM /
    sleep: Make it possible to quiesce timers during suspend-to-idle") uses
    timekeeping_suspend() instead of syscore_suspend() during
    suspend-to-idle. As a consequence generic sched_clock will keep going
    because sched_clock_suspend() and sched_clock_resume() are not invoked
    during suspend-to-idle which can result in a generic sched_clock wrap.
    
    On a ARM system with suspend-to-idle enabled, sched_clock is registered
    as "56 bits at 13MHz, resolution 76ns, wraps every 4398046511101ns", which
    means the real wrapping duration is 8796093022202ns.
    
    [  134.551779] suspend-to-idle suspend (timekeeping_suspend())
    [ 1204.912239] suspend-to-idle resume (timekeeping_resume())
    ......
    [ 1206.912239] suspend-to-idle suspend (timekeeping_suspend())
    [ 5880.502807] suspend-to-idle resume (timekeeping_resume())
    ......
    [ 6000.403724] suspend-to-idle suspend (timekeeping_suspend())
    [ 8035.753167] suspend-to-idle resume  (timekeeping_resume())
    ......
    [ 8795.786684] (2)[321:charger_thread]......
    [ 8795.788387] (2)[321:charger_thread]......
    [    0.057226] (0)[0:swapper/0]......
    [    0.061447] (2)[0:swapper/2]......
    
    sched_clock was not stopped during suspend-to-idle, and sched_clock_poll
    hrtimer was not expired because timekeeping_suspend() was invoked during
    suspend-to-idle. It makes sched_clock wrap at kernel time 8796s.
    
    To prevent this, invoke sched_clock_suspend() and sched_clock_resume() in
    tick_freeze() together with timekeeping_suspend() and timekeeping_resume().
    
    Fixes: 124cf9117c5f (PM / sleep: Make it possible to quiesce timers during suspend-to-idle)
    Signed-off-by: Chang-An Chen <chang-an.chen@mediatek.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: <linux-mediatek@lists.infradead.org>
    Cc: <linux-arm-kernel@lists.infradead.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: <kuohong.wang@mediatek.com>
    Cc: <freddy.hsin@mediatek.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1553828349-8914-1-git-send-email-chang-an.chen@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 205c53cbe553c9e5a9fe93f63e398da7e59124b6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Apr 14 19:51:06 2019 +0200

    x86/speculation: Prevent deadlock on ssb_state::lock
    
    commit 2f5fb19341883bb6e37da351bc3700489d8506a7 upstream.
    
    Mikhail reported a lockdep splat related to the AMD specific ssb_state
    lock:
    
      CPU0                       CPU1
      lock(&st->lock);
                                 local_irq_disable();
                                 lock(&(&sighand->siglock)->rlock);
                                 lock(&st->lock);
      <Interrupt>
         lock(&(&sighand->siglock)->rlock);
    
      *** DEADLOCK ***
    
    The connection between sighand->siglock and st->lock comes through seccomp,
    which takes st->lock while holding sighand->siglock.
    
    Make sure interrupts are disabled when __speculation_ctrl_update() is
    invoked via prctl() -> speculation_ctrl_update(). Add a lockdep assert to
    catch future offenders.
    
    Fixes: 1f50ddb4f418 ("x86/speculation: Handle HT correctly on AMD")
    Reported-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Cc: Thomas Lendacky <thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1904141948200.4917@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19867049334b6cb5eb5d2c84c84b2a863cea886f
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Tue Apr 2 12:44:58 2019 -0700

    perf/x86: Fix incorrect PEBS_REGS
    
    commit 9d5dcc93a6ddfc78124f006ccd3637ce070ef2fc upstream.
    
    PEBS_REGS used as mask for the supported registers for large PEBS.
    However, the mask cannot filter the sample_regs_user/sample_regs_intr
    correctly.
    
    (1ULL << PERF_REG_X86_*) should be used to replace PERF_REG_X86_*, which
    is only the index.
    
    Rename PEBS_REGS to PEBS_GP_REGS, because the mask is only for general
    purpose registers.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: acme@kernel.org
    Cc: jolsa@kernel.org
    Fixes: 2fe1bc1f501d ("perf/x86: Enable free running PEBS for REGS_USER/INTR")
    Link: https://lkml.kernel.org/r/20190402194509.2832-2-kan.liang@linux.intel.com
    [ Renamed it to PEBS_GP_REGS - as 'GPRS' is used elsewhere ;-) ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e34d62b59ddcba0de3835f44406a9d5bfc0a8fc
Author: Andi Kleen <ak@linux.intel.com>
Date:   Fri Mar 29 17:47:43 2019 -0700

    x86/cpu/bugs: Use __initconst for 'const' init data
    
    commit 1de7edbb59c8f1b46071f66c5c97b8a59569eb51 upstream.
    
    Some of the recently added const tables use __initdata which causes section
    attribute conflicts.
    
    Use __initconst instead.
    
    Fixes: fa1202ef2243 ("x86/speculation: Add command line control")
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190330004743.29541-9-andi@firstfloor.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35f288b72f64451461d38f46499061ed46878e37
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Thu Mar 21 21:15:22 2019 +0000

    perf/x86/amd: Add event map for AMD Family 17h
    
    commit 3fe3331bb285700ab2253dbb07f8e478fcea2f1b upstream.
    
    Family 17h differs from prior families by:
    
     - Does not support an L2 cache miss event
     - It has re-enumerated PMC counters for:
       - L2 cache references
       - front & back end stalled cycles
    
    So we add a new amd_f17h_perfmon_event_map[] so that the generic
    perf event names will resolve to the correct h/w events on
    family 17h and above processors.
    
    Reference sections 2.1.13.3.3 (stalls) and 2.1.13.3.6 (L2):
    
      https://www.amd.com/system/files/TechDocs/54945_PPR_Family_17h_Models_00h-0Fh.pdf
    
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Martin Liška <mliska@suse.cz>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Pu Wen <puwen@hygon.cn>
    Cc: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Fixes: e40ed1542dd7 ("perf/x86: Add perf support for AMD family-17h processors")
    [ Improved the formatting a bit. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22cc6e1b4fc0ac31b8a18189a06c6630e0e1af76
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Apr 11 14:54:40 2019 -0500

    drm/amdgpu/gmc9: fix VM_L2_CNTL3 programming
    
    commit 1925e7d3d4677e681cc2e878c2bdbeaee988c8e2 upstream.
    
    Got accidently dropped when 2+1 level support was added.
    
    Fixes: 6a42fd6fbf534096 ("drm/amdgpu: implement 2+1 PD support for Raven v3")
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b05d7d6fd5b0a15fd143137561b53ed9f80b4d1
Author: Joe Perches <joe@perches.com>
Date:   Thu Mar 7 15:51:45 2019 -0800

    s390/mem_detect: Use IS_ENABLED(CONFIG_BLK_DEV_INITRD)
    
    commit 2d4ea4b95cae3133de6b18ec5d5a42ee824fa0ef upstream.
    
    IS_ENABLED should generally use CONFIG_ prefaced symbols and
    it doesn't appear as if there is a BLK_DEV_INITRD define.
    
    Cc: <stable@vger.kernel.org> # 4.20
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1db090fb04676a1c51accf3df76f9105a6e17e0
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Mar 1 14:48:37 2019 +0100

    mac80211: do not call driver wake_tx_queue op during reconfig
    
    commit 4856bfd230985e43e84c26473c91028ff0a533bd upstream.
    
    There are several scenarios in which mac80211 can call drv_wake_tx_queue
    after ieee80211_restart_hw has been called and has not yet completed.
    Driver private structs are considered uninitialized until mac80211 has
    uploaded the vifs, stations and keys again, so using private tx queue
    data during that time is not safe.
    
    The driver can also not rely on drv_reconfig_complete to figure out when
    it is safe to accept drv_wake_tx_queue calls again, because it is only
    called after all tx queues are woken again.
    
    To fix this, bail out early in drv_wake_tx_queue if local->in_reconfig
    is set.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a0748c5518877db31c30e986edf976eca141ab6
Author: Vijayakumar Durai <vijayakumar.durai1@vivint.com>
Date:   Wed Mar 27 11:03:17 2019 +0100

    rt2x00: do not increment sequence number while re-transmitting
    
    commit 746ba11f170603bf1eaade817553a6c2e9135bbe upstream.
    
    Currently rt2x00 devices retransmit the management frames with
    incremented sequence number if hardware is assigning the sequence.
    
    This is HW bug fixed already for non-QOS data frames, but it should
    be fixed for management frames except beacon.
    
    Without fix retransmitted frames have wrong SN:
    
     AlphaNet_e8:fb:36 Vivotek_52:31:51 Authentication, SN=1648, FN=0, Flags=........C Frame is not being retransmitted 1648 1
     AlphaNet_e8:fb:36 Vivotek_52:31:51 Authentication, SN=1649, FN=0, Flags=....R...C Frame is being retransmitted 1649 1
     AlphaNet_e8:fb:36 Vivotek_52:31:51 Authentication, SN=1650, FN=0, Flags=....R...C Frame is being retransmitted 1650 1
    
    With the fix SN stays correctly the same:
    
     88:6a:e3:e8:f9:a2 8c:f5:a3:88:76:87 Authentication, SN=1450, FN=0, Flags=........C
     88:6a:e3:e8:f9:a2 8c:f5:a3:88:76:87 Authentication, SN=1450, FN=0, Flags=....R...C
     88:6a:e3:e8:f9:a2 8c:f5:a3:88:76:87 Authentication, SN=1450, FN=0, Flags=....R...C
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Vijayakumar Durai <vijayakumar.durai1@vivint.com>
    [sgruszka: simplify code, change comments and changelog]
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44aa331f99b4ee0cc0713c907113109b6936e8ce
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Mon Apr 15 15:01:25 2019 +0900

    kprobes: Fix error check when reusing optimized probes
    
    commit 5f843ed415581cfad4ef8fefe31c138a8346ca8a upstream.
    
    The following commit introduced a bug in one of our error paths:
    
      819319fc9346 ("kprobes: Return error if we fail to reuse kprobe instead of BUG_ON()")
    
    it missed to handle the return value of kprobe_optready() as
    error-value. In reality, the kprobe_optready() returns a bool
    result, so "true" case must be passed instead of 0.
    
    This causes some errors on kprobe boot-time selftests on ARM:
    
     [   ] Beginning kprobe tests...
     [   ] Probe ARM code
     [   ]     kprobe
     [   ]     kretprobe
     [   ] ARM instruction simulation
     [   ]     Check decoding tables
     [   ]     Run test cases
     [   ] FAIL: test_case_handler not run
     [   ] FAIL: Test andge r10, r11, r14, asr r7
     [   ] FAIL: Scenario 11
     ...
     [   ] FAIL: Scenario 7
     [   ] Total instruction simulation tests=1631, pass=1433 fail=198
     [   ] kprobe tests failed
    
    This can happen if an optimized probe is unregistered and next
    kprobe is registered on same address until the previous probe
    is not reclaimed.
    
    If this happens, a hidden aggregated probe may be kept in memory,
    and no new kprobe can probe same address. Also, in that case
    register_kprobe() will return "1" instead of minus error value,
    which can mislead caller logic.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    Cc: David S . Miller <davem@davemloft.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Naveen N . Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org # v5.0+
    Fixes: 819319fc9346 ("kprobes: Return error if we fail to reuse kprobe instead of BUG_ON()")
    Link: http://lkml.kernel.org/r/155530808559.32517.539898325433642204.stgit@devnote2
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca61e51567a7bb1de157ad0964b35e1673296f59
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sun Feb 24 01:50:49 2019 +0900

    x86/kprobes: Avoid kretprobe recursion bug
    
    commit b191fa96ea6dc00d331dcc28c1f7db5e075693a0 upstream.
    
    Avoid kretprobe recursion loop bg by setting a dummy
    kprobes to current_kprobe per-CPU variable.
    
    This bug has been introduced with the asm-coded trampoline
    code, since previously it used another kprobe for hooking
    the function return placeholder (which only has a nop) and
    trampoline handler was called from that kprobe.
    
    This revives the old lost kprobe again.
    
    With this fix, we don't see deadlock anymore.
    
    And you can see that all inner-called kretprobe are skipped.
    
      event_1                                  235               0
      event_2                                19375           19612
    
    The 1st column is recorded count and the 2nd is missed count.
    Above shows (event_1 rec) + (event_2 rec) ~= (event_2 missed)
    (some difference are here because the counter is racy)
    
    Reported-by: Andrea Righi <righi.andrea@gmail.com>
    Tested-by: Andrea Righi <righi.andrea@gmail.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Fixes: c9becf58d935 ("[PATCH] kretprobe: kretprobe-booster")
    Link: http://lkml.kernel.org/r/155094064889.6137.972160690963039.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b91f26c45b65ca77ad0e4ac1b5832c75f274ac6
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sun Feb 24 01:50:20 2019 +0900

    kprobes: Mark ftrace mcount handler functions nokprobe
    
    commit fabe38ab6b2bd9418350284c63825f13b8a6abba upstream.
    
    Mark ftrace mcount handler functions nokprobe since
    probing on these functions with kretprobe pushes
    return address incorrectly on kretprobe shadow stack.
    
    Reported-by: Francis Deslauriers <francis.deslauriers@efficios.com>
    Tested-by: Andrea Righi <righi.andrea@gmail.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/155094062044.6137.6419622920568680640.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbe6f067a3adf64e749c27832f7f6f7a6e07b988
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sun Feb 24 01:49:52 2019 +0900

    x86/kprobes: Verify stack frame on kretprobe
    
    commit 3ff9c075cc767b3060bdac12da72fc94dd7da1b8 upstream.
    
    Verify the stack frame pointer on kretprobe trampoline handler,
    If the stack frame pointer does not match, it skips the wrong
    entry and tries to find correct one.
    
    This can happen if user puts the kretprobe on the function
    which can be used in the path of ftrace user-function call.
    Such functions should not be probed, so this adds a warning
    message that reports which function should be blacklisted.
    
    Tested-by: Andrea Righi <righi.andrea@gmail.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/155094059185.6137.15527904013362842072.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f89f9d9636f04158d31cb7cce73467a844daf0d7
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed Apr 17 00:21:21 2019 -0700

    arm64: futex: Restore oldval initialization to work around buggy compilers
    
    commit ff8acf929014b7f87315588e0daf8597c8aa9d1c upstream.
    
    Commit 045afc24124d ("arm64: futex: Fix FUTEX_WAKE_OP atomic ops with
    non-zero result value") removed oldval's zero initialization in
    arch_futex_atomic_op_inuser because it is not necessary. Unfortunately,
    Android's arm64 GCC 4.9.4 [1] does not agree:
    
    ../kernel/futex.c: In function 'do_futex':
    ../kernel/futex.c:1658:17: warning: 'oldval' may be used uninitialized
    in this function [-Wmaybe-uninitialized]
       return oldval == cmparg;
                     ^
    In file included from ../kernel/futex.c:73:0:
    ../arch/arm64/include/asm/futex.h:53:6: note: 'oldval' was declared here
      int oldval, ret, tmp;
          ^
    
    GCC fails to follow that when ret is non-zero, futex_atomic_op_inuser
    returns right away, avoiding the uninitialized use that it claims.
    Restoring the zero initialization works around this issue.
    
    [1]: https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/
    
    Cc: stable@vger.kernel.org
    Fixes: 045afc24124d ("arm64: futex: Fix FUTEX_WAKE_OP atomic ops with non-zero result value")
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 508b773175c71c16f81bbaf6bc9e9be059ad545c
Author: Christian König <christian.koenig@amd.com>
Date:   Tue Apr 2 09:26:52 2019 +0200

    drm/ttm: fix out-of-bounds read in ttm_put_pages() v2
    
    commit a66477b0efe511d98dde3e4aaeb189790e6f0a39 upstream.
    
    When ttm_put_pages() tries to figure out whether it's dealing with
    transparent hugepages, it just reads past the bounds of the pages array
    without a check.
    
    v2: simplify the test if enough pages are left in the array (Christian).
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Fixes: 5c42c64f7d54 ("drm/ttm: fix the fix for huge compound pages")
    Cc: stable@vger.kernel.org
    Reviewed-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Junwei Zhang <Jerry.Zhang@amd.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8223263d7c44251e984ba982e02fc2cbb6704d3d
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Mar 31 13:04:11 2019 -0700

    crypto: x86/poly1305 - fix overflow during partial reduction
    
    commit 678cce4019d746da6c680c48ba9e6d417803e127 upstream.
    
    The x86_64 implementation of Poly1305 produces the wrong result on some
    inputs because poly1305_4block_avx2() incorrectly assumes that when
    partially reducing the accumulator, the bits carried from limb 'd4' to
    limb 'h0' fit in a 32-bit integer.  This is true for poly1305-generic
    which processes only one block at a time.  However, it's not true for
    the AVX2 implementation, which processes 4 blocks at a time and
    therefore can produce intermediate limbs about 4x larger.
    
    Fix it by making the relevant calculations use 64-bit arithmetic rather
    than 32-bit.  Note that most of the carries already used 64-bit
    arithmetic, but the d4 -> h0 carry was different for some reason.
    
    To be safe I also made the same change to the corresponding SSE2 code,
    though that only operates on 1 or 2 blocks at a time.  I don't think
    it's really needed for poly1305_block_sse2(), but it doesn't hurt
    because it's already x86_64 code.  It *might* be needed for
    poly1305_2block_sse2(), but overflows aren't easy to reproduce there.
    
    This bug was originally detected by my patches that improve testmgr to
    fuzz algorithms against their generic implementation.  But also add a
    test vector which reproduces it directly (in the AVX2 case).
    
    Fixes: b1ccc8f4b631 ("crypto: poly1305 - Add a four block AVX2 variant for x86_64")
    Fixes: c70f4abef07a ("crypto: poly1305 - Add a SSE2 SIMD variant for x86_64")
    Cc: <stable@vger.kernel.org> # v4.3+
    Cc: Martin Willi <martin@strongswan.org>
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46c4f2375638122a08b7ab8af5bc19bec74d28b4
Author: Corey Minyard <cminyard@mvista.com>
Date:   Wed Apr 3 15:58:16 2019 -0500

    ipmi: fix sleep-in-atomic in free_user at cleanup SRCU user->release_barrier
    
    commit 3b9a907223d7f6b9d1dadea29436842ae9bcd76d upstream.
    
    free_user() could be called in atomic context.
    
    This patch pushed the free operation off into a workqueue.
    
    Example:
    
     BUG: sleeping function called from invalid context at kernel/workqueue.c:2856
     in_atomic(): 1, irqs_disabled(): 0, pid: 177, name: ksoftirqd/27
     CPU: 27 PID: 177 Comm: ksoftirqd/27 Not tainted 4.19.25-3 #1
     Hardware name: AIC 1S-HV26-08/MB-DPSB04-06, BIOS IVYBV060 10/21/2015
     Call Trace:
      dump_stack+0x5c/0x7b
      ___might_sleep+0xec/0x110
      __flush_work+0x48/0x1f0
      ? try_to_del_timer_sync+0x4d/0x80
      _cleanup_srcu_struct+0x104/0x140
      free_user+0x18/0x30 [ipmi_msghandler]
      ipmi_free_recv_msg+0x3a/0x50 [ipmi_msghandler]
      deliver_response+0xbd/0xd0 [ipmi_msghandler]
      deliver_local_response+0xe/0x30 [ipmi_msghandler]
      handle_one_recv_msg+0x163/0xc80 [ipmi_msghandler]
      ? dequeue_entity+0xa0/0x960
      handle_new_recv_msgs+0x15c/0x1f0 [ipmi_msghandler]
      tasklet_action_common.isra.22+0x103/0x120
      __do_softirq+0xf8/0x2d7
      run_ksoftirqd+0x26/0x50
      smpboot_thread_fn+0x11d/0x1e0
      kthread+0x103/0x140
      ? sort_range+0x20/0x20
      ? kthread_destroy_worker+0x40/0x40
      ret_from_fork+0x1f/0x40
    
    Fixes: 77f8269606bf ("ipmi: fix use-after-free of user->release_barrier.rda")
    
    Reported-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org # 5.0
    Cc: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f6919fdc23bc27d7170f1b2d46ebfc658f60217
Author: WANG Chao <chao.wang@ucloud.cn>
Date:   Fri Apr 12 15:55:39 2019 +0800

    x86/kvm: move kvm_load/put_guest_xcr0 into atomic context
    
    commit 1811d979c71621aafc7b879477202d286f7e863b upstream.
    
    guest xcr0 could leak into host when MCE happens in guest mode. Because
    do_machine_check() could schedule out at a few places.
    
    For example:
    
    kvm_load_guest_xcr0
    ...
    kvm_x86_ops->run(vcpu) {
      vmx_vcpu_run
        vmx_complete_atomic_exit
          kvm_machine_check
            do_machine_check
              do_memory_failure
                memory_failure
                  lock_page
    
    In this case, host_xcr0 is 0x2ff, guest vcpu xcr0 is 0xff. After schedule
    out, host cpu has guest xcr0 loaded (0xff).
    
    In __switch_to {
         switch_fpu_finish
           copy_kernel_to_fpregs
             XRSTORS
    
    If any bit i in XSTATE_BV[i] == 1 and xcr0[i] == 0, XRSTORS will
    generate #GP (In this case, bit 9). Then ex_handler_fprestore kicks in
    and tries to reinitialize fpu by restoring init fpu state. Same story as
    last #GP, except we get DOUBLE FAULT this time.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: WANG Chao <chao.wang@ucloud.cn>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eb719f09f7e319e79f6abf2b9e8c0dcc1c477b5
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Thu Apr 18 17:50:52 2019 -0700

    coredump: fix race condition between mmget_not_zero()/get_task_mm() and core dumping
    
    commit 04f5866e41fb70690e28397487d8bd8eea7d712a upstream.
    
    The core dumping code has always run without holding the mmap_sem for
    writing, despite that is the only way to ensure that the entire vma
    layout will not change from under it.  Only using some signal
    serialization on the processes belonging to the mm is not nearly enough.
    This was pointed out earlier.  For example in Hugh's post from Jul 2017:
    
      https://lkml.kernel.org/r/alpine.LSU.2.11.1707191716030.2055@eggly.anvils
    
      "Not strictly relevant here, but a related note: I was very surprised
       to discover, only quite recently, how handle_mm_fault() may be called
       without down_read(mmap_sem) - when core dumping. That seems a
       misguided optimization to me, which would also be nice to correct"
    
    In particular because the growsdown and growsup can move the
    vm_start/vm_end the various loops the core dump does around the vma will
    not be consistent if page faults can happen concurrently.
    
    Pretty much all users calling mmget_not_zero()/get_task_mm() and then
    taking the mmap_sem had the potential to introduce unexpected side
    effects in the core dumping code.
    
    Adding mmap_sem for writing around the ->core_dump invocation is a
    viable long term fix, but it requires removing all copy user and page
    faults and to replace them with get_dump_page() for all binary formats
    which is not suitable as a short term fix.
    
    For the time being this solution manually covers the places that can
    confuse the core dump either by altering the vma layout or the vma flags
    while it runs.  Once ->core_dump runs under mmap_sem for writing the
    function mmget_still_valid() can be dropped.
    
    Allowing mmap_sem protected sections to run in parallel with the
    coredump provides some minor parallelism advantage to the swapoff code
    (which seems to be safe enough by never mangling any vma field and can
    keep doing swapins in parallel to the core dumping) and to some other
    corner case.
    
    In order to facilitate the backporting I added "Fixes: 86039bd3b4e6"
    however the side effect of this same race condition in /proc/pid/mem
    should be reproducible since before 2.6.12-rc2 so I couldn't add any
    other "Fixes:" because there's no hash beyond the git genesis commit.
    
    Because find_extend_vma() is the only location outside of the process
    context that could modify the "mm" structures under mmap_sem for
    reading, by adding the mmget_still_valid() check to it, all other cases
    that take the mmap_sem for reading don't need the new check after
    mmget_not_zero()/get_task_mm().  The expand_stack() in page fault
    context also doesn't need the new check, because all tasks under core
    dumping are frozen.
    
    Link: http://lkml.kernel.org/r/20190325224949.11068-1-aarcange@redhat.com
    Fixes: 86039bd3b4e6 ("userfaultfd: add new syscall to provide memory externalization")
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: Jann Horn <jannh@google.com>
    Suggested-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Reviewed-by: Jann Horn <jannh@google.com>
    Acked-by: Jason Gunthorpe <jgg@mellanox.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e58a114d07465baef1e7476242a44cbb9d108825
Author: Suthikulpanit, Suravee <Suravee.Suthikulpanit@amd.com>
Date:   Wed Mar 20 08:12:28 2019 +0000

    Revert "svm: Fix AVIC incomplete IPI emulation"
    
    commit 4a58038b9e420276157785afa0a0bbb4b9bc2265 upstream.
    
    This reverts commit bb218fbcfaaa3b115d4cd7a43c0ca164f3a96e57.
    
    As Oren Twaig pointed out the old discussion:
    
      https://patchwork.kernel.org/patch/8292231/
    
    that the change coud potentially cause an extra IPI to be sent to
    the destination vcpu because the AVIC hardware already set the IRR bit
    before the incomplete IPI #VMEXIT with id=1 (target vcpu is not running).
    Since writting to ICR and ICR2 will also set the IRR. If something triggers
    the destination vcpu to get scheduled before the emulation finishes, then
    this could result in an additional IPI.
    
    Also, the issue mentioned in the commit bb218fbcfaaa was misdiagnosed.
    
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Reported-by: Oren Twaig <oren@scalemp.com>
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 922270b4f0182c0f00284881b2e4eb98a76d1232
Author: Vitor Soares <vitor.soares@synopsys.com>
Date:   Tue Apr 9 18:59:59 2019 +0200

    i3c: Fix the verification of random PID
    
    commit 9752c37cc89f43675e70cf9acff23519fa84b48c upstream.
    
    The validation of random PID should be done by checking the
    boardinfo->pid instead of info.pid which is empty.
    
    Doing the change the info struture declaration is no longer necessary.
    
    Cc: Boris Brezillon <bbrezillon@kernel.org>
    Cc: <stable@vger.kernel.org>
    Fixes: 3a379bbcea0a ("i3c: Add core I3C infrastructure")
    Signed-off-by: Vitor Soares <vitor.soares@synopsys.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33a3fff44a0f926269d46eef3e5547bf54fe77e7
Author: Vitor Soares <vitor.soares@synopsys.com>
Date:   Mon Apr 8 13:13:34 2019 +0200

    i3c: dw: Fix dw_i3c_master_disable controller by using correct mask
    
    commit 907621e94d49b85cd76f13110eceb940a182c69e upstream.
    
    The controller was being disabled incorrectly. The correct way is to clear
    the DEV_CTRL_ENABLE bit.
    
    Fix this by clearing this bit.
    
    Cc: Boris Brezillon <bbrezillon@kernel.org>
    Cc: <stable@vger.kernel.org>
    Fixes: 1dd728f5d4d4 ("i3c: master: Add driver for Synopsys DesignWare IP")
    Signed-off-by: Vitor Soares <vitor.soares@synopsys.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6200707e648c7d82c6dc45879d20502fc901d65
Author: Saurav Kashyap <skashyap@marvell.com>
Date:   Thu Apr 18 03:40:12 2019 -0700

    Revert "scsi: fcoe: clear FC_RP_STARTED flags when receiving a LOGO"
    
    commit 0228034d8e5915b98c33db35a98f5e909e848ae9 upstream.
    
    This patch clears FC_RP_STARTED flag during logoff, because of this
    re-login(flogi) didn't happen to the switch.
    
    This reverts commit 1550ec458e0cf1a40a170ab1f4c46e3f52860f65.
    
    Fixes: 1550ec458e0c ("scsi: fcoe: clear FC_RP_STARTED flags when receiving a LOGO")
    Cc: <stable@vger.kernel.org> # v4.18+
    Signed-off-by: Saurav Kashyap <skashyap@marvell.com>
    Reviewed-by: Hannes Reinecke <hare@#suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad1deea5c4c93c75b8f90bb0cef9f94d3760ea84
Author: Jaesoo Lee <jalee@purestorage.com>
Date:   Tue Apr 9 17:02:22 2019 -0700

    scsi: core: set result when the command cannot be dispatched
    
    commit be549d49115422f846b6d96ee8fd7173a5f7ceb0 upstream.
    
    When SCSI blk-mq is enabled, there is a bug in handling errors in
    scsi_queue_rq.  Specifically, the bug is not setting result field of
    scsi_request correctly when the dispatch of the command has been
    failed. Since the upper layer code including the sg_io ioctl expects to
    receive any error status from result field of scsi_request, the error is
    silently ignored and this could cause data corruptions for some
    applications.
    
    Fixes: d285203cf647 ("scsi: add support for a blk-mq based I/O path.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jaesoo Lee <jalee@purestorage.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2116717884cf9ec6841630ea257d5c5c3a859c7
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Apr 4 20:53:28 2019 -0400

    vt: fix cursor when clearing the screen
    
    commit b2ecf00631362a83744e5ec249947620db5e240c upstream.
    
    The patch a6dbe4427559 ("vt: perform safe console erase in the right
    order") introduced a bug. The conditional do_update_region() was
    replaced by a call to update_region() that does contain the conditional
    already, but with unwanted extra side effects such as restoring the cursor
    drawing.
    
    In order to reproduce the bug:
    - use framebuffer console with the AMDGPU driver
    - type "links" to start the console www browser
    - press 'q' and space to exit links
    
    Now the cursor will be permanently visible in the center of the
    screen. It will stay there until something overwrites it.
    
    The bug goes away if we change update_region() back to the conditional
    do_update_region().
    
    [ nico: reworded changelog ]
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Reviewed-by: Nicolas Pitre <nico@fluxnic.net>
    Cc: stable@vger.kernel.org
    Fixes: a6dbe4427559 ("vt: perform safe console erase in the right order")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ae77c340c52b331e18af1a358ba7b2e3dcc3390
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Apr 1 13:25:10 2019 +0200

    serial: sh-sci: Fix HSCIF RX sampling point calculation
    
    commit ace965696da2611af759f0284e26342b7b6cec89 upstream.
    
    There are several issues with the formula used for calculating the
    deviation from the intended rate:
      1. While min_err and last_stop are signed, srr and baud are unsigned.
         Hence the signed values are promoted to unsigned, which will lead
         to a bogus value of deviation if min_err is negative,
      2. Srr is the register field value, which is one less than the actual
         sampling rate factor,
      3. The divisions do not use rounding.
    
    Fix this by casting unsigned variables to int, adding one to srr, and
    using a single DIV_ROUND_CLOSEST().
    
    Fixes: 63ba1e00f178a448 ("serial: sh-sci: Support for HSCIF RX sampling point adjustment")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 333a81c16e4f6aa87dce0ca8e1df0bbca787d472
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Mar 29 10:10:26 2019 +0100

    serial: sh-sci: Fix HSCIF RX sampling point adjustment
    
    commit 6b87784b53592a90d21576be8eff688b56d93cce upstream.
    
    The calculation of the sampling point has min() and max() exchanged.
    Fix this by using the clamp() helper instead.
    
    Fixes: 63ba1e00f178a448 ("serial: sh-sci: Support for HSCIF RX sampling point adjustment")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: Dirk Behme <dirk.behme@de.bosch.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95df599f95f398b0a34d081dadfdee3126e58163
Author: KT Liao <kt.liao@emc.com.tw>
Date:   Tue Mar 26 17:28:32 2019 -0700

    Input: elan_i2c - add hardware ID for multiple Lenovo laptops
    
    commit 738c06d0e4562e0acf9f2c7438a22b2d5afc67aa upstream.
    
    There are many Lenovo laptops which need elan_i2c support, this patch adds
    relevant IDs to the Elan driver so that touchpads are recognized.
    
    Signed-off-by: KT Liao <kt.liao@emc.com.tw>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ef122eb79569df65f7199c5026033250670ac85
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Apr 16 17:06:33 2019 +0200

    ALSA: core: Fix card races between register and disconnect
    
    commit 2a3f7221acddfe1caa9ff09b3a8158c39b2fdeac upstream.
    
    There is a small race window in the card disconnection code that
    allows the registration of another card with the very same card id.
    This leads to a warning in procfs creation as caught by syzkaller.
    
    The problem is that we delete snd_cards and snd_cards_lock entries at
    the very beginning of the disconnection procedure.  This makes the
    slot available to be assigned for another card object while the
    disconnection procedure is being processed.  Then it becomes possible
    to issue a procfs registration with the existing file name although we
    check the conflict beforehand.
    
    The fix is simply to move the snd_cards and snd_cards_lock clearances
    at the end of the disconnection procedure.  The references to these
    entries are merely either from the global proc files like
    /proc/asound/cards or from the card registration / disconnection, so
    it should be fine to shift at the very end.
    
    Reported-by: syzbot+48df349490c36f9f54ab@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffd87f87a9c17b705e14b227ba6afa3248f1d7e8
Author: Hui Wang <hui.wang@canonical.com>
Date:   Wed Apr 17 16:10:32 2019 +0800

    ALSA: hda/realtek - add two more pin configuration sets to quirk table
    
    commit b26e36b7ef36a8a3a147b1609b2505f8a4ecf511 upstream.
    
    We have two Dell laptops which have the codec 10ec0236 and 10ec0256
    respectively, the headset mic on them can't work, need to apply the
    quirk of ALC255_FIXUP_DELL1_MIC_NO_PRESENCE. So adding their pin
    configurations in the pin quirk table.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8834139083cdb486cc520d2b5fbb21bdd0e534d0
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Apr 15 12:43:02 2019 +0100

    staging: comedi: ni_usb6501: Fix possible double-free of ->usb_rx_buf
    
    commit af4b54a2e5ba18259ff9aac445bf546dd60d037e upstream.
    
    `ni6501_alloc_usb_buffers()` is called from `ni6501_auto_attach()` to
    allocate RX and TX buffers for USB transfers.  It allocates
    `devpriv->usb_rx_buf` followed by `devpriv->usb_tx_buf`.  If the
    allocation of `devpriv->usb_tx_buf` fails, it frees
    `devpriv->usb_rx_buf`, leaving the pointer set dangling, and returns an
    error.  Later, `ni6501_detach()` will be called from the core comedi
    module code to clean up.  `ni6501_detach()` also frees both
    `devpriv->usb_rx_buf` and `devpriv->usb_tx_buf`, but
    `devpriv->usb_rx_buf` may have already beed freed, leading to a
    double-free error.  Fix it bu removing the call to
    `kfree(devpriv->usb_rx_buf)` from `ni6501_alloc_usb_buffers()`, relying
    on `ni6501_detach()` to free the memory.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16b235e81d9d7b502fa72e579cc7796828090111
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Apr 15 12:43:01 2019 +0100

    staging: comedi: ni_usb6501: Fix use of uninitialized mutex
    
    commit 660cf4ce9d0f3497cc7456eaa6d74c8b71d6282c upstream.
    
    If `ni6501_auto_attach()` returns an error, the core comedi module code
    will call `ni6501_detach()` to clean up.  If `ni6501_auto_attach()`
    successfully allocated the comedi device private data, `ni6501_detach()`
    assumes that a `struct mutex mut` contained in the private data has been
    initialized and uses it.  Unfortunately, there are a couple of places
    where `ni6501_auto_attach()` can return an error after allocating the
    device private data but before initializing the mutex, so this
    assumption is invalid.  Fix it by initializing the mutex just after
    allocating the private data in `ni6501_auto_attach()` before any other
    errors can be retturned.  Also move the call to `usb_set_intfdata()`
    just to keep the code a bit neater (either position for the call is
    fine).
    
    I believe this was the cause of the following syzbot crash report
    <https://syzkaller.appspot.com/bug?extid=cf4f2b6c24aff0a3edf6>:
    
    usb 1-1: New USB device strings: Mfr=0, Product=0, SerialNumber=0
    usb 1-1: config 0 descriptor??
    usb 1-1: string descriptor 0 read error: -71
    comedi comedi0: Wrong number of endpoints
    ni6501 1-1:0.233: driver 'ni6501' failed to auto-configure device.
    INFO: trying to register non-static key.
    the code is fine but needs lockdep annotation.
    turning off the locking correctness validator.
    CPU: 0 PID: 585 Comm: kworker/0:3 Not tainted 5.1.0-rc4-319354-g9a33b36 #3
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xe8/0x16e lib/dump_stack.c:113
     assign_lock_key kernel/locking/lockdep.c:786 [inline]
     register_lock_class+0x11b8/0x1250 kernel/locking/lockdep.c:1095
     __lock_acquire+0xfb/0x37c0 kernel/locking/lockdep.c:3582
     lock_acquire+0x10d/0x2f0 kernel/locking/lockdep.c:4211
     __mutex_lock_common kernel/locking/mutex.c:925 [inline]
     __mutex_lock+0xfe/0x12b0 kernel/locking/mutex.c:1072
     ni6501_detach+0x5b/0x110 drivers/staging/comedi/drivers/ni_usb6501.c:567
     comedi_device_detach+0xed/0x800 drivers/staging/comedi/drivers.c:204
     comedi_device_cleanup.part.0+0x68/0x140 drivers/staging/comedi/comedi_fops.c:156
     comedi_device_cleanup drivers/staging/comedi/comedi_fops.c:187 [inline]
     comedi_free_board_dev.part.0+0x16/0x90 drivers/staging/comedi/comedi_fops.c:190
     comedi_free_board_dev drivers/staging/comedi/comedi_fops.c:189 [inline]
     comedi_release_hardware_device+0x111/0x140 drivers/staging/comedi/comedi_fops.c:2880
     comedi_auto_config.cold+0x124/0x1b0 drivers/staging/comedi/drivers.c:1068
     usb_probe_interface+0x31d/0x820 drivers/usb/core/driver.c:361
     really_probe+0x2da/0xb10 drivers/base/dd.c:509
     driver_probe_device+0x21d/0x350 drivers/base/dd.c:671
     __device_attach_driver+0x1d8/0x290 drivers/base/dd.c:778
     bus_for_each_drv+0x163/0x1e0 drivers/base/bus.c:454
     __device_attach+0x223/0x3a0 drivers/base/dd.c:844
     bus_probe_device+0x1f1/0x2a0 drivers/base/bus.c:514
     device_add+0xad2/0x16e0 drivers/base/core.c:2106
     usb_set_configuration+0xdf7/0x1740 drivers/usb/core/message.c:2021
     generic_probe+0xa2/0xda drivers/usb/core/generic.c:210
     usb_probe_device+0xc0/0x150 drivers/usb/core/driver.c:266
     really_probe+0x2da/0xb10 drivers/base/dd.c:509
     driver_probe_device+0x21d/0x350 drivers/base/dd.c:671
     __device_attach_driver+0x1d8/0x290 drivers/base/dd.c:778
     bus_for_each_drv+0x163/0x1e0 drivers/base/bus.c:454
     __device_attach+0x223/0x3a0 drivers/base/dd.c:844
     bus_probe_device+0x1f1/0x2a0 drivers/base/bus.c:514
     device_add+0xad2/0x16e0 drivers/base/core.c:2106
     usb_new_device.cold+0x537/0xccf drivers/usb/core/hub.c:2534
     hub_port_connect drivers/usb/core/hub.c:5089 [inline]
     hub_port_connect_change drivers/usb/core/hub.c:5204 [inline]
     port_event drivers/usb/core/hub.c:5350 [inline]
     hub_event+0x138e/0x3b00 drivers/usb/core/hub.c:5432
     process_one_work+0x90f/0x1580 kernel/workqueue.c:2269
     worker_thread+0x9b/0xe20 kernel/workqueue.c:2415
     kthread+0x313/0x420 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    
    Reported-by: syzbot+cf4f2b6c24aff0a3edf6@syzkaller.appspotmail.com
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a47fd7121627d66d75f401f9a610685355996330
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Apr 15 12:52:30 2019 +0100

    staging: comedi: vmk80xx: Fix possible double-free of ->usb_rx_buf
    
    commit 663d294b4768bfd89e529e069bffa544a830b5bf upstream.
    
    `vmk80xx_alloc_usb_buffers()` is called from `vmk80xx_auto_attach()` to
    allocate RX and TX buffers for USB transfers.  It allocates
    `devpriv->usb_rx_buf` followed by `devpriv->usb_tx_buf`.  If the
    allocation of `devpriv->usb_tx_buf` fails, it frees
    `devpriv->usb_rx_buf`,  leaving the pointer set dangling, and returns an
    error.  Later, `vmk80xx_detach()` will be called from the core comedi
    module code to clean up.  `vmk80xx_detach()` also frees both
    `devpriv->usb_rx_buf` and `devpriv->usb_tx_buf`, but
    `devpriv->usb_rx_buf` may have already been freed, leading to a
    double-free error.  Fix it by removing the call to
    `kfree(devpriv->usb_rx_buf)` from `vmk80xx_alloc_usb_buffers()`, relying
    on `vmk80xx_detach()` to free the memory.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd301102144722c6fad21f8744ba481d08ca6248
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Apr 15 12:10:14 2019 +0100

    staging: comedi: vmk80xx: Fix use of uninitialized semaphore
    
    commit 08b7c2f9208f0e2a32159e4e7a4831b7adb10a3e upstream.
    
    If `vmk80xx_auto_attach()` returns an error, the core comedi module code
    will call `vmk80xx_detach()` to clean up.  If `vmk80xx_auto_attach()`
    successfully allocated the comedi device private data,
    `vmk80xx_detach()` assumes that a `struct semaphore limit_sem` contained
    in the private data has been initialized and uses it.  Unfortunately,
    there are a couple of places where `vmk80xx_auto_attach()` can return an
    error after allocating the device private data but before initializing
    the semaphore, so this assumption is invalid.  Fix it by initializing
    the semaphore just after allocating the private data in
    `vmk80xx_auto_attach()` before any other errors can be returned.
    
    I believe this was the cause of the following syzbot crash report
    <https://syzkaller.appspot.com/bug?extid=54c2f58f15fe6876b6ad>:
    
    usb 1-1: config 0 has no interface number 0
    usb 1-1: New USB device found, idVendor=10cf, idProduct=8068, bcdDevice=e6.8d
    usb 1-1: New USB device strings: Mfr=0, Product=0, SerialNumber=0
    usb 1-1: config 0 descriptor??
    vmk80xx 1-1:0.117: driver 'vmk80xx' failed to auto-configure device.
    INFO: trying to register non-static key.
    the code is fine but needs lockdep annotation.
    turning off the locking correctness validator.
    CPU: 0 PID: 12 Comm: kworker/0:1 Not tainted 5.1.0-rc4-319354-g9a33b36 #3
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xe8/0x16e lib/dump_stack.c:113
     assign_lock_key kernel/locking/lockdep.c:786 [inline]
     register_lock_class+0x11b8/0x1250 kernel/locking/lockdep.c:1095
     __lock_acquire+0xfb/0x37c0 kernel/locking/lockdep.c:3582
     lock_acquire+0x10d/0x2f0 kernel/locking/lockdep.c:4211
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
     _raw_spin_lock_irqsave+0x44/0x60 kernel/locking/spinlock.c:152
     down+0x12/0x80 kernel/locking/semaphore.c:58
     vmk80xx_detach+0x59/0x100 drivers/staging/comedi/drivers/vmk80xx.c:829
     comedi_device_detach+0xed/0x800 drivers/staging/comedi/drivers.c:204
     comedi_device_cleanup.part.0+0x68/0x140 drivers/staging/comedi/comedi_fops.c:156
     comedi_device_cleanup drivers/staging/comedi/comedi_fops.c:187 [inline]
     comedi_free_board_dev.part.0+0x16/0x90 drivers/staging/comedi/comedi_fops.c:190
     comedi_free_board_dev drivers/staging/comedi/comedi_fops.c:189 [inline]
     comedi_release_hardware_device+0x111/0x140 drivers/staging/comedi/comedi_fops.c:2880
     comedi_auto_config.cold+0x124/0x1b0 drivers/staging/comedi/drivers.c:1068
     usb_probe_interface+0x31d/0x820 drivers/usb/core/driver.c:361
     really_probe+0x2da/0xb10 drivers/base/dd.c:509
     driver_probe_device+0x21d/0x350 drivers/base/dd.c:671
     __device_attach_driver+0x1d8/0x290 drivers/base/dd.c:778
     bus_for_each_drv+0x163/0x1e0 drivers/base/bus.c:454
     __device_attach+0x223/0x3a0 drivers/base/dd.c:844
     bus_probe_device+0x1f1/0x2a0 drivers/base/bus.c:514
     device_add+0xad2/0x16e0 drivers/base/core.c:2106
     usb_set_configuration+0xdf7/0x1740 drivers/usb/core/message.c:2021
     generic_probe+0xa2/0xda drivers/usb/core/generic.c:210
     usb_probe_device+0xc0/0x150 drivers/usb/core/driver.c:266
     really_probe+0x2da/0xb10 drivers/base/dd.c:509
     driver_probe_device+0x21d/0x350 drivers/base/dd.c:671
     __device_attach_driver+0x1d8/0x290 drivers/base/dd.c:778
     bus_for_each_drv+0x163/0x1e0 drivers/base/bus.c:454
     __device_attach+0x223/0x3a0 drivers/base/dd.c:844
     bus_probe_device+0x1f1/0x2a0 drivers/base/bus.c:514
     device_add+0xad2/0x16e0 drivers/base/core.c:2106
     usb_new_device.cold+0x537/0xccf drivers/usb/core/hub.c:2534
     hub_port_connect drivers/usb/core/hub.c:5089 [inline]
     hub_port_connect_change drivers/usb/core/hub.c:5204 [inline]
     port_event drivers/usb/core/hub.c:5350 [inline]
     hub_event+0x138e/0x3b00 drivers/usb/core/hub.c:5432
     process_one_work+0x90f/0x1580 kernel/workqueue.c:2269
     worker_thread+0x9b/0xe20 kernel/workqueue.c:2415
     kthread+0x313/0x420 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    
    Reported-by: syzbot+54c2f58f15fe6876b6ad@syzkaller.appspotmail.com
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcff1b3c1a1d2b2ec40758e26aebff4453f13c3e
Author: Christian Gromm <christian.gromm@microchip.com>
Date:   Tue Apr 2 13:39:57 2019 +0200

    staging: most: core: use device description as name
    
    commit 131ac62253dba79daf4a6d83ab12293d2b9863d3 upstream.
    
    This patch uses the device description to clearly identity a device
    attached to the bus. It is needed as the currently useed mdevX
    notation is not sufficiant in case more than one network
    interface controller is being used at the same time.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Gromm <christian.gromm@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68bbd7524a6fce4198e25ee481eefd6c0fcf5318
Author: he, bo <bo.he@intel.com>
Date:   Wed Mar 6 10:32:20 2019 +0800

    io: accel: kxcjk1013: restore the range after resume.
    
    commit fe2d3df639a7940a125a33d6460529b9689c5406 upstream.
    
    On some laptops, kxcjk1013 is powered off when system enters S3. We need
    restore the range regiter during resume. Otherwise, the sensor doesn't
    work properly after S3.
    
    Signed-off-by: he, bo <bo.he@intel.com>
    Signed-off-by: Chen, Hu <hu1.chen@intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e13bb9782f537ddbb1e6f4dad8b76960c87ac55
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Mon Mar 25 14:01:23 2019 +0100

    iio: core: fix a possible circular locking dependency
    
    commit 7f75591fc5a123929a29636834d1bcb8b5c9fee3 upstream.
    
    This fixes a possible circular locking dependency detected warning seen
    with:
    - CONFIG_PROVE_LOCKING=y
    - consumer/provider IIO devices (ex: "voltage-divider" consumer of "adc")
    
    When using the IIO consumer interface, e.g. iio_channel_get(), the consumer
    device will likely call iio_read_channel_raw() or similar that rely on
    'info_exist_lock' mutex.
    
    typically:
    ...
            mutex_lock(&chan->indio_dev->info_exist_lock);
            if (chan->indio_dev->info == NULL) {
                    ret = -ENODEV;
                    goto err_unlock;
            }
            ret = do_some_ops()
    err_unlock:
            mutex_unlock(&chan->indio_dev->info_exist_lock);
            return ret;
    ...
    
    Same mutex is also hold in iio_device_unregister().
    
    The following deadlock warning happens when:
    - the consumer device has called an API like iio_read_channel_raw()
      at least once.
    - the consumer driver is unregistered, removed (unbind from sysfs)
    
    ======================================================
    WARNING: possible circular locking dependency detected
    4.19.24 #577 Not tainted
    ------------------------------------------------------
    sh/372 is trying to acquire lock:
    (kn->count#30){++++}, at: kernfs_remove_by_name_ns+0x3c/0x84
    
    but task is already holding lock:
    (&dev->info_exist_lock){+.+.}, at: iio_device_unregister+0x18/0x60
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (&dev->info_exist_lock){+.+.}:
           __mutex_lock+0x70/0xa3c
           mutex_lock_nested+0x1c/0x24
           iio_read_channel_raw+0x1c/0x60
           iio_read_channel_info+0xa8/0xb0
           dev_attr_show+0x1c/0x48
           sysfs_kf_seq_show+0x84/0xec
           seq_read+0x154/0x528
           __vfs_read+0x2c/0x15c
           vfs_read+0x8c/0x110
           ksys_read+0x4c/0xac
           ret_fast_syscall+0x0/0x28
           0xbedefb60
    
    -> #0 (kn->count#30){++++}:
           lock_acquire+0xd8/0x268
           __kernfs_remove+0x288/0x374
           kernfs_remove_by_name_ns+0x3c/0x84
           remove_files+0x34/0x78
           sysfs_remove_group+0x40/0x9c
           sysfs_remove_groups+0x24/0x34
           device_remove_attrs+0x38/0x64
           device_del+0x11c/0x360
           cdev_device_del+0x14/0x2c
           iio_device_unregister+0x24/0x60
           release_nodes+0x1bc/0x200
           device_release_driver_internal+0x1a0/0x230
           unbind_store+0x80/0x130
           kernfs_fop_write+0x100/0x1e4
           __vfs_write+0x2c/0x160
           vfs_write+0xa4/0x17c
           ksys_write+0x4c/0xac
           ret_fast_syscall+0x0/0x28
           0xbe906840
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&dev->info_exist_lock);
                                   lock(kn->count#30);
                                   lock(&dev->info_exist_lock);
      lock(kn->count#30);
    
     *** DEADLOCK ***
    ...
    
    cdev_device_del() can be called without holding the lock. It should be safe
    as info_exist_lock prevents kernelspace consumers to use the exported
    routines during/after provider removal. cdev_device_del() is for userspace.
    
    Help to reproduce:
    See example: Documentation/devicetree/bindings/iio/afe/voltage-divider.txt
    sysv {
            compatible = "voltage-divider";
            io-channels = <&adc 0>;
            output-ohms = <22>;
            full-ohms = <222>;
    };
    
    First, go to iio:deviceX for the "voltage-divider", do one read:
    $ cd /sys/bus/iio/devices/iio:deviceX
    $ cat in_voltage0_raw
    
    Then, unbind the consumer driver. It triggers above deadlock warning.
    $ cd /sys/bus/platform/drivers/iio-rescale/
    $ echo sysv > unbind
    
    Note I don't actually expect stable will pick this up all the
    way back into IIO being in staging, but if's probably valid that
    far back.
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Fixes: ac917a81117c ("staging:iio:core set the iio_dev.info pointer to null on unregister")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f6b63285e2fc71d285a7d24550759f2ba27a778
Author: Georg Ottinger <g.ottinger@abatec.at>
Date:   Wed Jan 30 14:42:02 2019 +0100

    iio: adc: at91: disable adc channel interrupt in timeout case
    
    commit 09c6bdee51183a575bf7546890c8c137a75a2b44 upstream.
    
    Having a brief look at at91_adc_read_raw() it is obvious that in the case
    of a timeout the setting of AT91_ADC_CHDR and AT91_ADC_IDR registers is
    omitted. If 2 different channels are queried we can end up with a
    situation where two interrupts are enabled, but only one interrupt is
    cleared in the interrupt handler. Resulting in a interrupt loop and a
    system hang.
    
    Signed-off-by: Georg Ottinger <g.ottinger@abatec.at>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b70088e150909401d4f97cd6b8d0ab0af7db39a
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Feb 20 17:11:32 2019 +0200

    iio: Fix scan mask selection
    
    commit 20ea39ef9f2f911bd01c69519e7d69cfec79fde3 upstream.
    
    The trialmask is expected to have all bits set to 0 after allocation.
    Currently kmalloc_array() is used which does not zero the memory and so
    random bits are set. This results in random channels being enabled when
    they shouldn't. Replace kmalloc_array() with kcalloc() which has the same
    interface but zeros the memory.
    
    Note the fix is actually required earlier than the below fixes tag, but
    will require a manual backport due to move from kmalloc to kmalloc_array.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Fixes commit 057ac1acdfc4 ("iio: Use kmalloc_array() in iio_scan_mask_set()").
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c526f27861fbf002f8ce0f17fbbc9b6e23804a3
Author: Jean-Francois Dagenais <jeff.dagenais@gmail.com>
Date:   Wed Mar 6 15:56:06 2019 -0500

    iio: dac: mcp4725: add missing powerdown bits in store eeprom
    
    commit 06003531502d06bc89d32528f6ec96bf978790f9 upstream.
    
    When issuing the write DAC register and write eeprom command, the two
    powerdown bits (PD0 and PD1) are assumed by the chip to be present in
    the bytes sent. Leaving them at 0 implies "powerdown disabled" which is
    a different state that the current one. By adding the current state of
    the powerdown in the i2c write, the chip will correctly power-on exactly
    like as it is at the moment of store_eeprom call.
    
    This is documented in MCP4725's datasheet, FIGURE 6-2: "Write Commands
    for DAC Input Register and EEPROM" and MCP4726's datasheet, FIGURE 6-3:
    "Write All Memory Command".
    
    Signed-off-by: Jean-Francois Dagenais <jeff.dagenais@gmail.com>
    Acked-by: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50bc2c022b6e218f5ce7edbc76ff1584c956af8c
Author: Dragos Bogdan <dragos.bogdan@analog.com>
Date:   Tue Mar 19 12:47:00 2019 +0200

    iio: ad_sigma_delta: select channel when reading register
    
    commit fccfb9ce70ed4ea7a145f77b86de62e38178517f upstream.
    
    The desired channel has to be selected in order to correctly fill the
    buffer with the corresponding data.
    The `ad_sd_write_reg()` already does this, but for the
    `ad_sd_read_reg_raw()` this was omitted.
    
    Fixes: af3008485ea03 ("iio:adc: Add common code for ADI Sigma Delta devices")
    Signed-off-by: Dragos Bogdan <dragos.bogdan@analog.com>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f65207cfee337192eaee3c7c7647cd8180e28ab9
Author: Gwendal Grignou <gwendal@chromium.org>
Date:   Wed Mar 13 12:40:02 2019 +0100

    iio: cros_ec: Fix the maths for gyro scale calculation
    
    commit 3d02d7082e5823598090530c3988a35f69689943 upstream.
    
    Calculation did not use IIO_DEGREE_TO_RAD and implemented a variant to
    avoid precision loss as we aim a nano value. The offset added to avoid
    rounding error, though, doesn't give us a close result to the expected
    value. E.g.
    
    For 1000dps, the result should be:
    
        (1000 * pi ) / 180 >> 15 ~= 0.000532632218
    
    But with current calculation we get
    
        $ cat scale
        0.000547890
    
    Fix the calculation by just doing the maths involved for a nano value
    
       val * pi * 10e12 / (180 * 2^15)
    
    so we get a closer result.
    
        $ cat scale
        0.000532632
    
    Fixes: c14dca07a31d ("iio: cros_ec_sensors: add ChromeOS EC Contiguous Sensors driver")
    Signed-off-by: Gwendal Grignou <gwendal@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4dd709ada6d8727f385cba8e98220ae4fc2b7d7
Author: Mike Looijmans <mike.looijmans@topic.nl>
Date:   Wed Mar 6 08:31:48 2019 +0100

    iio:chemical:bme680: Fix SPI read interface
    
    commit 73f3bc6da506711302bb67572440eb84b1ec4a2c upstream.
    
    The SPI interface implementation was completely broken.
    
    When using the SPI interface, there are only 7 address bits, the upper bit
    is controlled by a page select register. The core needs access to both
    ranges, so implement register read/write for both regions. The regmap
    paging functionality didn't agree with a register that needs to be read
    and modified, so I implemented a custom paging algorithm.
    
    This fixes that the device wouldn't even probe in SPI mode.
    
    The SPI interface then isn't different from I2C, merged them into the core,
    and the I2C/SPI named registers are no longer needed.
    
    Implemented register value caching for the registers to reduce the I2C/SPI
    data transfers considerably.
    
    The calibration set reads as all zeroes until some undefined point in time,
    and I couldn't determine what makes it valid. The datasheet mentions these
    registers but does not provide any hints on when they become valid, and they
    aren't even enumerated in the memory map. So check the calibration and
    retry reading it from the device after each measurement until it provides
    something valid.
    
    Despite the size this is suitable for a stable backport given that
    it seems the SPI support never worked.
    
    Signed-off-by: Mike Looijmans <mike.looijmans@topic.nl>
    Fixes: 1b3bd8592780 ("iio: chemical: Add support for Bosch BME680 sensor");
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd3c6ad2a934831ccf61f1bd1b79f7044516b3e9
Author: Mike Looijmans <mike.looijmans@topic.nl>
Date:   Wed Mar 6 08:31:47 2019 +0100

    iio:chemical:bme680: Fix, report temperature in millidegrees
    
    commit 9436f45dd53595e21566a8c6627411077dfdb776 upstream.
    
    The standard unit for temperature is millidegrees Celcius. Adapt the
    driver to report in millidegrees instead of degrees.
    
    Signed-off-by: Mike Looijmans <mike.looijmans@topic.nl>
    Fixes: 1b3bd8592780 ("iio: chemical: Add support for Bosch BME680 sensor");
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5527e1e580071f4b58a03212738a51d207c57eed
Author: Mike Looijmans <mike.looijmans@topic.nl>
Date:   Wed Feb 13 08:41:47 2019 +0100

    iio/gyro/bmg160: Use millidegrees for temperature scale
    
    commit 40a7198a4a01037003c7ca714f0d048a61e729ac upstream.
    
    Standard unit for temperature is millidegrees Celcius, whereas this driver
    was reporting in degrees. Fix the scale factor in the driver.
    
    Signed-off-by: Mike Looijmans <mike.looijmans@topic.nl>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9efe152f769c6195282a4c787f2b03670b77d921
Author: Sergey Larin <cerg2010cerg2010@mail.ru>
Date:   Sat Mar 2 19:54:55 2019 +0300

    iio: gyro: mpu3050: fix chip ID reading
    
    commit 409a51e0a4a5f908763191fae2c29008632eb712 upstream.
    
    According to the datasheet, the last bit of CHIP_ID register controls
    I2C bus, and the first one is unused. Handle this correctly.
    
    Note that there are chips out there that have a value such that
    the id check currently fails.
    
    Signed-off-by: Sergey Larin <cerg2010cerg2010@mail.ru>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25a91f7b9810c62538fe131521f1165d5a392bb7
Author: Mircea Caprioru <mircea.caprioru@analog.com>
Date:   Wed Feb 20 13:08:20 2019 +0200

    staging: iio: ad7192: Fix ad7193 channel address
    
    commit 7ce0f216221856a17fc4934b39284678a5fef2e9 upstream.
    
    This patch fixes the differential channels addresses for the ad7193.
    
    Signed-off-by: Mircea Caprioru <mircea.caprioru@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80c1486b7e209f7ea571e3c31f3d1312c02205e7
Author: Leonard Pollak <leonardp@tr-host.de>
Date:   Wed Feb 13 11:19:52 2019 +0100

    Staging: iio: meter: fixed typo
    
    commit 0a8a29be499cbb67df79370aaf5109085509feb8 upstream.
    
    This patch fixes an obvious typo, which will cause erroneously returning the Peak
    Voltage instead of the Peak Current.
    
    Signed-off-by: Leonard Pollak <leonardp@tr-host.de>
    Cc: <Stable@vger.kernel.org>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 739969f56e4ff486f585fe2edeb12583e7e2a46c
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Apr 3 16:06:42 2019 +0200

    KVM: x86: svm: make sure NMI is injected after nmi_singlestep
    
    commit 99c221796a810055974b54c02e8f53297e48d146 upstream.
    
    I noticed that apic test from kvm-unit-tests always hangs on my EPYC 7401P,
    the hanging test nmi-after-sti is trying to deliver 30000 NMIs and tracing
    shows that we're sometimes able to deliver a few but never all.
    
    When we're trying to inject an NMI we may fail to do so immediately for
    various reasons, however, we still need to inject it so enable_nmi_window()
    arms nmi_singlestep mode. #DB occurs as expected, but we're not checking
    for pending NMIs before entering the guest and unless there's a different
    event to process, the NMI will never get delivered.
    
    Make KVM_REQ_EVENT request on the vCPU from db_interception() to make sure
    pending NMIs are checked and possibly injected.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 935fef82120fe9531263c609685e85e5b58448d6
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Apr 2 08:10:47 2019 -0700

    KVM: x86: Don't clear EFER during SMM transitions for 32-bit vCPU
    
    commit 8f4dc2e77cdfaf7e644ef29693fa229db29ee1de upstream.
    
    Neither AMD nor Intel CPUs have an EFER field in the legacy SMRAM save
    state area, i.e. don't save/restore EFER across SMM transitions.  KVM
    somewhat models this, e.g. doesn't clear EFER on entry to SMM if the
    guest doesn't support long mode.  But during RSM, KVM unconditionally
    clears EFER so that it can get back to pure 32-bit mode in order to
    start loading CRs with their actual non-SMM values.
    
    Clear EFER only when it will be written when loading the non-SMM state
    so as to preserve bits that can theoretically be set on 32-bit vCPUs,
    e.g. KVM always emulates EFER_SCE.
    
    And because CR4.PAE is cleared only to play nice with EFER, wrap that
    code in the long mode check as well.  Note, this may result in a
    compiler warning about cr4 being consumed uninitialized.  Re-read CR4
    even though it's technically unnecessary, as doing so allows for more
    readable code and RSM emulation is not a performance critical path.
    
    Fixes: 660a5d517aaab ("KVM: x86: save/load state on SMM switch")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d12bcf87e6ff1a5f20aa4606c5062bb1859e3b7c
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Sat Mar 9 17:37:21 2019 +0530

    fs/dax: Deposit pagetable even when installing zero page
    
    commit 11cf9d863dcb583345723b0ed72173348761e9c0 upstream.
    
    Architectures like ppc64 use the deposited page table to store hardware
    page table slot information. Make sure we deposit a page table when
    using zero page at the pmd level for hash.
    
    Without this we hit
    
    Unable to handle kernel paging request for data at address 0x00000000
    Faulting instruction address: 0xc000000000082a74
    Oops: Kernel access of bad area, sig: 11 [#1]
    ....
    
    NIP [c000000000082a74] __hash_page_thp+0x224/0x5b0
    LR [c0000000000829a4] __hash_page_thp+0x154/0x5b0
    Call Trace:
     hash_page_mm+0x43c/0x740
     do_hash_page+0x2c/0x3c
     copy_from_iter_flushcache+0xa4/0x4a0
     pmem_copy_from_iter+0x2c/0x50 [nd_pmem]
     dax_copy_from_iter+0x40/0x70
     dax_iomap_actor+0x134/0x360
     iomap_apply+0xfc/0x1b0
     dax_iomap_rw+0xac/0x130
     ext4_file_write_iter+0x254/0x460 [ext4]
     __vfs_write+0x120/0x1e0
     vfs_write+0xd8/0x220
     SyS_write+0x6c/0x110
     system_call+0x3c/0x130
    
    Fixes: b5beae5e224f ("powerpc/pseries: Add driver for PAPR SCM regions")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6846161e203637e39d84814f5b2006eeeddba00
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Apr 10 07:47:22 2019 +1000

    cifs: fix handle leak in smb2_query_symlink()
    
    commit e6d0fb7b34f264f72c33053558a360a6a734905e upstream.
    
    If we enter smb2_query_symlink() for something that is not a symlink
    and where the SMB2_open() would succeed we would never end up
    closing this handle and would thus leak a handle on the server.
    
    Fix this by immediately calling SMB2_close() on successfull open.
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76dbd554c2730ce0b324e54bac9d8a9056b1ffdc
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Apr 6 15:47:39 2019 +0800

    cifs: Fix use-after-free in SMB2_read
    
    commit 088aaf17aa79300cab14dbee2569c58cfafd7d6e upstream.
    
    There is a KASAN use-after-free:
    BUG: KASAN: use-after-free in SMB2_read+0x1136/0x1190
    Read of size 8 at addr ffff8880b4e45e50 by task ln/1009
    
    Should not release the 'req' because it will use in the trace.
    
    Fixes: eccb4422cf97 ("smb3: Add ftrace tracepoints for improved SMB3 debugging")
    
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org> 4.18+
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8ac406c749ea5d2a583854667a20d8e7fe38070
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Apr 6 15:47:38 2019 +0800

    cifs: Fix use-after-free in SMB2_write
    
    commit 6a3eb3360667170988f8a6477f6686242061488a upstream.
    
    There is a KASAN use-after-free:
    BUG: KASAN: use-after-free in SMB2_write+0x1342/0x1580
    Read of size 8 at addr ffff8880b6a8e450 by task ln/4196
    
    Should not release the 'req' because it will use in the trace.
    
    Fixes: eccb4422cf97 ("smb3: Add ftrace tracepoints for improved SMB3 debugging")
    
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org> 4.18+
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9582ba401ef08e92f328001a813835a464258e7d
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Apr 6 15:30:38 2019 +0800

    cifs: Fix lease buffer length error
    
    commit b57a55e2200ede754e4dc9cce4ba9402544b9365 upstream.
    
    There is a KASAN slab-out-of-bounds:
    BUG: KASAN: slab-out-of-bounds in _copy_from_iter_full+0x783/0xaa0
    Read of size 80 at addr ffff88810c35e180 by task mount.cifs/539
    
    CPU: 1 PID: 539 Comm: mount.cifs Not tainted 4.19 #10
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
                rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014
    Call Trace:
     dump_stack+0xdd/0x12a
     print_address_description+0xa7/0x540
     kasan_report+0x1ff/0x550
     check_memory_region+0x2f1/0x310
     memcpy+0x2f/0x80
     _copy_from_iter_full+0x783/0xaa0
     tcp_sendmsg_locked+0x1840/0x4140
     tcp_sendmsg+0x37/0x60
     inet_sendmsg+0x18c/0x490
     sock_sendmsg+0xae/0x130
     smb_send_kvec+0x29c/0x520
     __smb_send_rqst+0x3ef/0xc60
     smb_send_rqst+0x25a/0x2e0
     compound_send_recv+0x9e8/0x2af0
     cifs_send_recv+0x24/0x30
     SMB2_open+0x35e/0x1620
     open_shroot+0x27b/0x490
     smb2_open_op_close+0x4e1/0x590
     smb2_query_path_info+0x2ac/0x650
     cifs_get_inode_info+0x1058/0x28f0
     cifs_root_iget+0x3bb/0xf80
     cifs_smb3_do_mount+0xe00/0x14c0
     cifs_do_mount+0x15/0x20
     mount_fs+0x5e/0x290
     vfs_kern_mount+0x88/0x460
     do_mount+0x398/0x31e0
     ksys_mount+0xc6/0x150
     __x64_sys_mount+0xea/0x190
     do_syscall_64+0x122/0x590
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    It can be reproduced by the following step:
      1. samba configured with: server max protocol = SMB2_10
      2. mount -o vers=default
    
    When parse the mount version parameter, the 'ops' and 'vals'
    was setted to smb30,  if negotiate result is smb21, just
    update the 'ops' to smb21, but the 'vals' is still smb30.
    When add lease context, the iov_base is allocated with smb21
    ops, but the iov_len is initiallited with the smb30. Because
    the iov_len is longer than iov_base, when send the message,
    copy array out of bounds.
    
    we need to keep the 'ops' and 'vals' consistent.
    
    Fixes: 9764c02fcbad ("SMB3: Add support for multidialect negotiate (SMB2.1 and later)")
    Fixes: d5c7076b772a ("smb3: add smb3.1.1 to default dialect list")
    
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebac4d0adf68f8962bd82fcf483936edd6ec095b
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Fri Mar 29 10:49:12 2019 +0100

    CIFS: keep FileInfo handle live during oplock break
    
    commit b98749cac4a695f084a5ff076f4510b23e353ecd upstream.
    
    In the oplock break handler, writing pending changes from pages puts
    the FileInfo handle. If the refcount reaches zero it closes the handle
    and waits for any oplock break handler to return, thus causing a deadlock.
    
    To prevent this situation:
    
    * We add a wait flag to cifsFileInfo_put() to decide whether we should
      wait for running/pending oplock break handlers
    
    * We keep an additionnal reference of the SMB FileInfo handle so that
      for the rest of the handler putting the handle won't close it.
      - The ref is bumped everytime we queue the handler via the
        cifs_queue_oplock_break() helper.
      - The ref is decremented at the end of the handler
    
    This bug was triggered by xfstest 464.
    
    Also important fix to address the various reports of
    oops in smb2_push_mandatory_locks
    
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cf17769d6b543b262a3cd04b3fd17b2bd4e6487
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Fri Apr 5 15:01:59 2019 +0200

    sch_cake: Simplify logic in cake_select_tin()
    
    [ Upstream commit 4976e3c683f328bc6f2edef555a4ffee6524486f ]
    
    The logic in cake_select_tin() was getting a bit hairy, and it turns out we
    can simplify it quite a bit. This also allows us to get rid of one of the
    two diffserv parsing functions, which has the added benefit that
    already-zeroed DSCP fields won't get re-written.
    
    Suggested-by: Kevin Darbyshire-Bryant <ldir@darbyshire-bryant.me.uk>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa94a5b5641a3c2200be00c8bd9cc48ed5f6640
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 3 10:13:51 2019 +0300

    nfc: nci: Potential off by one in ->pipes[] array
    
    [ Upstream commit 6491d698396fd5da4941980a35ca7c162a672016 ]
    
    This is similar to commit e285d5bfb7e9 ("NFC: Fix the number of pipes")
    where we changed NFC_HCI_MAX_PIPES from 127 to 128.
    
    As the comment next to the define explains, the pipe identifier is 7
    bits long.  The highest possible pipe is 127, but the number of possible
    pipes is 128.  As the code is now, then there is potential for an
    out of bounds array access:
    
        net/nfc/nci/hci.c:297 nci_hci_cmd_received() warn: array off by one?
        'ndev->hci_dev->pipes[pipe]' '0-127 == 127'
    
    Fixes: 11f54f228643 ("NFC: nci: Add HCI over NCI protocol support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a023c1a245a71d936c67d2c984e5789d604622e6
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 3 10:12:48 2019 +0300

    NFC: nci: Add some bounds checking in nci_hci_cmd_received()
    
    [ Upstream commit d7ee81ad09f072eab1681877fc71ec05f9c1ae92 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands").
    
    I'm not totally sure, but I think that commit description may have
    overstated the danger.  I was under the impression that this data came
    from the firmware?  If you can't trust your networking firmware, then
    you're already in trouble.
    
    Anyway, these days we add bounds checking where ever we can and we call
    it kernel hardening.  Better safe than sorry.
    
    Fixes: 11f54f228643 ("NFC: nci: Add HCI over NCI protocol support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d58923dac952107bcfe0fe0ad59e80d3c952cc36
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Thu Apr 4 15:01:33 2019 +0200

    sch_cake: Make sure we can write the IP header before changing DSCP bits
    
    [ Upstream commit c87b4ecdbe8db27867a7b7f840291cd843406bd7 ]
    
    There is not actually any guarantee that the IP headers are valid before we
    access the DSCP bits of the packets. Fix this using the same approach taken
    in sch_dsmark.
    
    Reported-by: Kevin Darbyshire-Bryant <kevin@darbyshire-bryant.me.uk>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 064290d0f6c7adc4fa19f88e33bbb9f2633984fc
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Thu Apr 4 15:01:33 2019 +0200

    sch_cake: Use tc_skb_protocol() helper for getting packet protocol
    
    [ Upstream commit b2100cc56fca8c51d28aa42a9f1fbcb2cf351996 ]
    
    We shouldn't be using skb->protocol directly as that will miss cases with
    hardware-accelerated VLAN tags. Use the helper instead to get the right
    protocol number.
    
    Reported-by: Kevin Darbyshire-Bryant <kevin@darbyshire-bryant.me.uk>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 116ac142d2c6cccf821ef351645158ef8ba9e05e
Author: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
Date:   Mon Apr 1 19:36:34 2019 -0700

    nfp: flower: remove vlan CFI bit from push vlan action
    
    [ Upstream commit 42cd5484a22f1a1b947e21e2af65fa7dab09d017 ]
    
    We no longer set CFI when pushing vlan tags, therefore we remove
    the CFI bit from push vlan.
    
    Fixes: 1a1e586f54bf ("nfp: add basic action capabilities to flower offloads")
    Signed-off-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
    Signed-off-by: Louis Peens <louis.peens@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51db0d068057040012ba9201ae0b8129fe0591f9
Author: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
Date:   Mon Apr 1 19:36:33 2019 -0700

    nfp: flower: replace CFI with vlan present
    
    [ Upstream commit f7ee799a51ddbcc205ef615fe424fb5084e9e0aa ]
    
    Replace vlan CFI bit with a vlan present bit that indicates the
    presence of a vlan tag. Previously the driver incorrectly assumed
    that an vlan id of 0 is not matchable, therefore we indicate vlan
    presence with a vlan present bit.
    
    Fixes: 5571e8c9f241 ("nfp: extend flower matching capabilities")
    Signed-off-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
    Signed-off-by: Louis Peens <louis.peens@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da86299fcccb7cd1073e927068fc2f43fe5b9f8f
Author: Jonathan Lemon <jonathan.lemon@gmail.com>
Date:   Sun Apr 14 14:21:29 2019 -0700

    route: Avoid crash from dereferencing NULL rt->from
    
    [ Upstream commit 9c69a13205151c0d801de9f9d83a818e6e8f60ec ]
    
    When __ip6_rt_update_pmtu() is called, rt->from is RCU dereferenced, but is
    never checked for null - rt6_flush_exceptions() may have removed the entry.
    
    [ 1913.989004] RIP: 0010:ip6_rt_cache_alloc+0x13/0x170
    [ 1914.209410] Call Trace:
    [ 1914.214798]  <IRQ>
    [ 1914.219226]  __ip6_rt_update_pmtu+0xb0/0x190
    [ 1914.228649]  ip6_tnl_xmit+0x2c2/0x970 [ip6_tunnel]
    [ 1914.239223]  ? ip6_tnl_parse_tlv_enc_lim+0x32/0x1a0 [ip6_tunnel]
    [ 1914.252489]  ? __gre6_xmit+0x148/0x530 [ip6_gre]
    [ 1914.262678]  ip6gre_tunnel_xmit+0x17e/0x3c7 [ip6_gre]
    [ 1914.273831]  dev_hard_start_xmit+0x8d/0x1f0
    [ 1914.283061]  sch_direct_xmit+0xfa/0x230
    [ 1914.291521]  __qdisc_run+0x154/0x4b0
    [ 1914.299407]  net_tx_action+0x10e/0x1f0
    [ 1914.307678]  __do_softirq+0xca/0x297
    [ 1914.315567]  irq_exit+0x96/0xa0
    [ 1914.322494]  smp_apic_timer_interrupt+0x68/0x130
    [ 1914.332683]  apic_timer_interrupt+0xf/0x20
    [ 1914.341721]  </IRQ>
    
    Fixes: a68886a69180 ("net/ipv6: Make from in rt6_info rcu protected")
    Signed-off-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Reviewed-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ad8c35a70ccead9118f4431320a228de4c6af66
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Tue Mar 19 01:05:41 2019 -0700

    net/mlx5: FPGA, tls, idr remove on flow delete
    
    [ Upstream commit df3a8344d404a810b4aadbf19b08c8232fbaa715 ]
    
    Flow is kfreed on mlx5_fpga_tls_del_flow but kept in the idr data
    structure, this is risky and can cause use-after-free, since the
    idr_remove is delayed until tls_send_teardown_cmd completion.
    
    Instead of delaying idr_remove, in this patch we do it on
    mlx5_fpga_tls_del_flow, before actually kfree(flow).
    
    Added synchronize_rcu before kfree(flow)
    
    Fixes: ab412e1dd7db ("net/mlx5: Accel, add TLS rx offload routines")
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3697f88a2711638cf2b93c5fd3f7e3adeeaf690
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Apr 8 17:59:50 2019 -0700

    net/tls: prevent bad memory access in tls_is_sk_tx_device_offloaded()
    
    [ Upstream commit b4f47f3848eb70986f75d06112af7b48b7f5f462 ]
    
    Unlike '&&' operator, the '&' does not have short-circuit
    evaluation semantics.  IOW both sides of the operator always
    get evaluated.  Fix the wrong operator in
    tls_is_sk_tx_device_offloaded(), which would lead to
    out-of-bounds access for for non-full sockets.
    
    Fixes: 4799ac81e52a ("tls: Add rx inline crypto offload")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d9005b96dcec04ca244cf229c5e4b84f02504a4
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Tue Mar 19 22:09:05 2019 -0700

    net/mlx5: FPGA, tls, hold rcu read lock a bit longer
    
    [ Upstream commit 31634bf5dcc418b5b2cacd954394c0c4620db6a2 ]
    
    To avoid use-after-free, hold the rcu read lock until we are done copying
    flow data into the command buffer.
    
    Fixes: ab412e1dd7db ("net/mlx5: Accel, add TLS rx offload routines")
    Reported-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abe4a1328a7838685aa551c1529f9d01f1fafab1
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Sun Mar 31 12:53:03 2019 +0000

    Revert "net/mlx5e: Enable reporting checksum unnecessary also for L3 packets"
    
    [ Upstream commit 8c8811d46d00d119ffbe039a6e52a0b504df1c2c ]
    
    This reverts commit b820e6fb0978f9c2ac438c199d2bb2f35950e9c9.
    
    Prior the commit we are reverting, checksum unnecessary was only set when
    both the L3 OK and L4 OK bits are set on the CQE. This caused packets
    of IP protocols such as SCTP which are not dealt by the current HW L4
    parser (hence the L4 OK bit is not set, but the L4 header type none bit
    is set) to go through the checksum none code, where currently we wrongly
    report checksum unnecessary for them, a regression. Fix this by a revert.
    
    Note that on our usual track we report checksum complete, so the revert
    isn't expected to have any notable performance impact. Also, when we are
    not on the checksum complete track, the L4 protocols for which we report
    checksum none are not high performance ones, we will still report
    checksum unnecessary for UDP/TCP.
    
    Fixes: b820e6fb0978 ("net/mlx5e: Enable reporting checksum unnecessary also for L3 packets")
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reported-by: Avi Urman <aviu@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acf4d270942ad4d5e03e56e6c265594f1dc99d41
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Mon Mar 25 22:10:59 2019 -0700

    net/mlx5e: Rx, Check ip headers sanity
    
    [ Upstream commit 0318a7b7fcad9765931146efa7ca3a034194737c ]
    
    In the two places is_last_ethertype_ip is being called, the caller will
    be looking inside the ip header, to be safe, add ip{4,6} header sanity
    check. And return true only on valid ip headers, i.e: the whole header
    is contained in the linear part of the skb.
    
    Note: Such situation is very rare and hard to reproduce, since mlx5e
    allocates a large enough headroom to contain the largest header one can
    imagine.
    
    Fixes: fe1dc069990c ("net/mlx5e: don't set CHECKSUM_COMPLETE on SCTP packets")
    Reported-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ce8793e03cdf6191430955adf11be1cd7331e0f
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Tue Mar 12 00:24:52 2019 -0700

    net/mlx5e: Rx, Fixup skb checksum for packets with tail padding
    
    [ Upstream commit 0aa1d18615c163f92935b806dcaff9157645233a ]
    
    When an ethernet frame with ip payload is padded, the padding octets are
    not covered by the hardware checksum.
    
    Prior to the cited commit, skb checksum was forced to be CHECKSUM_NONE
    when padding is detected. After it, the kernel will try to trim the
    padding bytes and subtract their checksum from skb->csum.
    
    In this patch we fixup skb->csum for any ip packet with tail padding of
    any size, if any padding found.
    FCS case is just one special case of this general purpose patch, hence,
    it is removed.
    
    Fixes: 88078d98d1bb ("net: pskb_trim_rcsum() and CHECKSUM_COMPLETE are friends"),
    Cc: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af294d42d43e906b4634aca06262fa6cb9ada582
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Aug 31 14:29:16 2018 +0300

    net/mlx5e: Switch to Toeplitz RSS hash by default
    
    [ Upstream commit 7ee2ace9c544a0886e02b54b625e521df8692d20 ]
    
    Although XOR hash function can perform very well on some special use
    cases, to align with all drivers, mlx5 driver should use Toeplitz hash
    by default.
    Toeplitz is more stable for the general use case and it is more standard
    and reliable.
    
    On top of that, since XOR (MLX5_RX_HASH_FN_INVERTED_XOR8) gives only a
    repeated 8 bits pattern. When used for udp tunneling RSS source port
    manipulation it results in fixed source port, which will cause bad RSS
    spread.
    
    Fixes: 2be6967cdbc9 ("net/mlx5e: Support ETH_RSS_HASH_XOR")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6daad2e30e0b1fd37eee9aab7163243511c0629b
Author: Dmytro Linkin <dmitrolin@mellanox.com>
Date:   Fri Mar 29 12:50:37 2019 +0000

    net/mlx5e: Protect against non-uplink representor for encap
    
    [ Upstream commit 5e0060b1491b299b1706414e61ede0b02265680e ]
    
    TC encap offload is supported only for the physical uplink
    representor. Fail for non uplink representor.
    
    Fixes: 3e621b19b0bb ("net/mlx5e: Support TC encapsulation offloads with upper devices")
    Signed-off-by: Dmytro Linkin <dmitrolin@mellanox.com>
    Reviewed-by: Eli Britstein <elibr@mellanox.com>
    Reviewed-by: Vlad Buslov <vladbu@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58f682514cb54cef47fcfcd9e0b49c2c6213e7eb
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Thu Mar 21 19:07:20 2019 -0700

    net/mlx5e: XDP, Avoid checksum complete when XDP prog is loaded
    
    [ Upstream commit 5d0bb3bac4b9f6c22280b04545626fdfd99edc6b ]
    
    XDP programs might change packets data contents which will make the
    reported skb checksum (checksum complete) invalid.
    
    When XDP programs are loaded/unloaded set/clear rx RQs
    MLX5E_RQ_STATE_NO_CSUM_COMPLETE flag.
    
    Fixes: 86994156c736 ("net/mlx5e: XDP fast RX drop bpf programs support")
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e4b3800c0699f3ccdda30019fd7e7295a697c1b
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Tue Apr 16 16:15:56 2019 +0300

    net: bridge: fix netlink export of vlan_stats_per_port option
    
    [ Upstream commit 600bea7dba1a72874ae0cd9bc66bf2abfe43b49d ]
    
    Since the introduction of the vlan_stats_per_port option the netlink
    export of it has been broken since I made a typo and used the ifla
    attribute instead of the bridge option to retrieve its state.
    Sysfs export is fine, only netlink export has been affected.
    
    Fixes: 9163a0fc1f0c0 ("net: bridge: add support for per-port vlan stats")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adfc12451123298bc583b9922f5182ae8cf70e59
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Apr 10 16:23:39 2019 -0700

    net/tls: fix build without CONFIG_TLS_DEVICE
    
    [ Upstream commit 903f1a187776bb8d79b13618ec05b25f86318885 ]
    
    buildbot noticed that TLS_HW is not defined if CONFIG_TLS_DEVICE=n.
    Wrap the cleanup branch into an ifdef, tls_device_free_resources_tx()
    wouldn't be compiled either in this case.
    
    Fixes: 35b71a34ada6 ("net/tls: don't leak partially sent record in device mode")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e7171bf8db70e2f0de91d47e206bf2e0e7805cb
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Apr 10 11:04:32 2019 -0700

    net: strparser: partially revert "strparser: Call skb_unclone conditionally"
    
    [ Upstream commit 4a9c2e3746e6151fd5d077259d79ce9ca86d47d7 ]
    
    This reverts the first part of commit 4e485d06bb8c ("strparser: Call
    skb_unclone conditionally").  To build a message with multiple
    fragments we need our own root of frag_list.  We can't simply
    use the frag_list of orig_skb, because it will lead to linking
    all orig_skbs together creating very long frag chains, and causing
    stack overflow on kfree_skb() (which is called recursively on
    the frag_lists).
    
    BUG: stack guard page was hit at 00000000d40fad41 (stack is 0000000029dde9f4..000000008cce03d5)
    kernel stack overflow (double-fault): 0000 [#1] PREEMPT SMP
    RIP: 0010:free_one_page+0x2b/0x490
    
    Call Trace:
      __free_pages_ok+0x143/0x2c0
      skb_release_data+0x8e/0x140
      ? skb_release_data+0xad/0x140
      kfree_skb+0x32/0xb0
    
      [...]
    
      skb_release_data+0xad/0x140
      ? skb_release_data+0xad/0x140
      kfree_skb+0x32/0xb0
      skb_release_data+0xad/0x140
      ? skb_release_data+0xad/0x140
      kfree_skb+0x32/0xb0
      skb_release_data+0xad/0x140
      ? skb_release_data+0xad/0x140
      kfree_skb+0x32/0xb0
      skb_release_data+0xad/0x140
      ? skb_release_data+0xad/0x140
      kfree_skb+0x32/0xb0
      skb_release_data+0xad/0x140
      __kfree_skb+0xe/0x20
      tcp_disconnect+0xd6/0x4d0
      tcp_close+0xf4/0x430
      ? tcp_check_oom+0xf0/0xf0
      tls_sk_proto_close+0xe4/0x1e0 [tls]
      inet_release+0x36/0x60
      __sock_release+0x37/0xa0
      sock_close+0x11/0x20
      __fput+0xa2/0x1d0
      task_work_run+0x89/0xb0
      exit_to_usermode_loop+0x9a/0xa0
      do_syscall_64+0xc0/0xf0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Let's leave the second unclone conditional, as I'm not entirely
    sure what is its purpose :)
    
    Fixes: 4e485d06bb8c ("strparser: Call skb_unclone conditionally")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96418eaa8e6aba1f4bdbdf058ea5f1d085599fd7
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Apr 10 11:04:31 2019 -0700

    net/tls: don't leak partially sent record in device mode
    
    [ Upstream commit 35b71a34ada62c9573847a324bf06a133fe11b11 ]
    
    David reports that tls triggers warnings related to
    sk->sk_forward_alloc not being zero at destruction time:
    
    WARNING: CPU: 5 PID: 6831 at net/core/stream.c:206 sk_stream_kill_queues+0x103/0x110
    WARNING: CPU: 5 PID: 6831 at net/ipv4/af_inet.c:160 inet_sock_destruct+0x15b/0x170
    
    When sender fills up the write buffer and dies from
    SIGPIPE.  This is due to the device implementation
    not cleaning up the partially_sent_record.
    
    This is because commit a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    moved the partial record cleanup to the SW-only path.
    
    Fixes: a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    Reported-by: David Beckett <david.beckett@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b30d9457b1dc79e1cad6a3ebeea9728c8e905c9d
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Apr 10 11:04:30 2019 -0700

    net/tls: fix the IV leaks
    
    [ Upstream commit 5a03bc73abed6ae196c15e9950afde19d48be12c ]
    
    Commit f66de3ee2c16 ("net/tls: Split conf to rx + tx") made
    freeing of IV and record sequence number conditional to SW
    path only, but commit e8f69799810c ("net/tls: Add generic NIC
    offload infrastructure") also allocates that state for the
    device offload configuration.  Remember to free it.
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae924f4e1c4598b3d6be8c48e7f4f025e91f3661
Author: Matteo Croce <mcroce@redhat.com>
Date:   Thu Apr 11 12:26:33 2019 +0200

    net: thunderx: don't allow jumbo frames with XDP
    
    [ Upstream commit 1f227d16083b2e280b7dde4ca78883d75593f2fd ]
    
    The thunderx driver forbids to load an eBPF program if the MTU is too high,
    but this can be circumvented by loading the eBPF, then raising the MTU.
    
    Fix this by limiting the MTU if an eBPF program is already loaded.
    
    Fixes: 05c773f52b96e ("net: thunderx: Add basic XDP support")
    Signed-off-by: Matteo Croce <mcroce@redhat.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a902fe6dd585a75168bcd8b560a498492f03e262
Author: Matteo Croce <mcroce@redhat.com>
Date:   Thu Apr 11 12:26:32 2019 +0200

    net: thunderx: raise XDP MTU to 1508
    
    [ Upstream commit 5ee15c101f29e0093ffb5448773ccbc786eb313b ]
    
    The thunderx driver splits frames bigger than 1530 bytes to multiple
    pages, making impossible to run an eBPF program on it.
    This leads to a maximum MTU of 1508 if QinQ is in use.
    
    The thunderx driver forbids to load an eBPF program if the MTU is higher
    than 1500 bytes. Raise the limit to 1508 so it is possible to use L2
    protocols which need some more headroom.
    
    Fixes: 05c773f52b96e ("net: thunderx: Add basic XDP support")
    Signed-off-by: Matteo Croce <mcroce@redhat.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9be4e8224cd6ba2ae515a3d6c0ad2281b1dcdb22
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Apr 10 06:58:15 2019 +0000

    mlxsw: spectrum_router: Do not check VRF MAC address
    
    [ Upstream commit 972fae683cbad5cf348268e76abc6d55cfb3ba87 ]
    
    Commit 74bc99397438 ("mlxsw: spectrum_router: Veto unsupported RIF MAC
    addresses") enabled the driver to veto router interface (RIF) MAC
    addresses that it cannot support.
    
    This check should only be performed for interfaces for which the driver
    actually configures a RIF. A VRF upper is not one of them, so ignore it.
    
    Without this patch it is not possible to set an IP address on the VRF
    device and use it as a loopback.
    
    Fixes: 74bc99397438 ("mlxsw: spectrum_router: Veto unsupported RIF MAC addresses")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Alexander Petrovskiy <alexpe@mellanox.com>
    Tested-by: Alexander Petrovskiy <alexpe@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61647856f32ae24db9dadb2c61457adb327df281
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Apr 10 06:58:15 2019 +0000

    mlxsw: core: Do not use WQ_MEM_RECLAIM for mlxsw workqueue
    
    [ Upstream commit b442fed1b724af0de087912a5718ddde1b87acbb ]
    
    The workqueue is used to periodically update the networking stack about
    activity / statistics of various objects such as neighbours and TC
    actions.
    
    It should not be called as part of memory reclaim path, so remove the
    WQ_MEM_RECLAIM flag.
    
    Fixes: 3d5479e92087 ("mlxsw: core: Remove deprecated create_workqueue")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87ffb893490abd1ce05c4cf84a1a00b32e143b70
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Apr 10 06:58:14 2019 +0000

    mlxsw: core: Do not use WQ_MEM_RECLAIM for mlxsw ordered workqueue
    
    [ Upstream commit 4af0699782e2cc7d0d89db9eb6f8844dd3df82dc ]
    
    The ordered workqueue is used to offload various objects such as routes
    and neighbours in the order they are notified.
    
    It should not be called as part of memory reclaim path, so remove the
    WQ_MEM_RECLAIM flag. This can also result in a warning [1], if a worker
    tries to flush a non-WQ_MEM_RECLAIM workqueue.
    
    [1]
    [97703.542861] workqueue: WQ_MEM_RECLAIM mlxsw_core_ordered:mlxsw_sp_router_fib6_event_work [mlxsw_spectrum] is flushing !WQ_MEM_RECLAIM events:rht_deferred_worker
    [97703.542884] WARNING: CPU: 1 PID: 32492 at kernel/workqueue.c:2605 check_flush_dependency+0xb5/0x130
    ...
    [97703.542988] Hardware name: Mellanox Technologies Ltd. MSN3700C/VMOD0008, BIOS 5.11 10/10/2018
    [97703.543049] Workqueue: mlxsw_core_ordered mlxsw_sp_router_fib6_event_work [mlxsw_spectrum]
    [97703.543061] RIP: 0010:check_flush_dependency+0xb5/0x130
    ...
    [97703.543071] RSP: 0018:ffffb3f08137bc00 EFLAGS: 00010086
    [97703.543076] RAX: 0000000000000000 RBX: ffff96e07740ae00 RCX: 0000000000000000
    [97703.543080] RDX: 0000000000000094 RSI: ffffffff82dc1934 RDI: 0000000000000046
    [97703.543084] RBP: ffffb3f08137bc20 R08: ffffffff82dc18a0 R09: 00000000000225c0
    [97703.543087] R10: 0000000000000000 R11: 0000000000007eec R12: ffffffff816e4ee0
    [97703.543091] R13: ffff96e06f6a5c00 R14: ffff96e077ba7700 R15: ffffffff812ab0c0
    [97703.543097] FS: 0000000000000000(0000) GS:ffff96e077a80000(0000) knlGS:0000000000000000
    [97703.543101] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [97703.543104] CR2: 00007f8cd135b280 CR3: 00000001e860e003 CR4: 00000000003606e0
    [97703.543109] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [97703.543112] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [97703.543115] Call Trace:
    [97703.543129] __flush_work+0xbd/0x1e0
    [97703.543137] ? __cancel_work_timer+0x136/0x1b0
    [97703.543145] ? pwq_dec_nr_in_flight+0x49/0xa0
    [97703.543154] __cancel_work_timer+0x136/0x1b0
    [97703.543175] ? mlxsw_reg_trans_bulk_wait+0x145/0x400 [mlxsw_core]
    [97703.543184] cancel_work_sync+0x10/0x20
    [97703.543191] rhashtable_free_and_destroy+0x23/0x140
    [97703.543198] rhashtable_destroy+0xd/0x10
    [97703.543254] mlxsw_sp_fib_destroy+0xb1/0xf0 [mlxsw_spectrum]
    [97703.543310] mlxsw_sp_vr_put+0xa8/0xc0 [mlxsw_spectrum]
    [97703.543364] mlxsw_sp_fib_node_put+0xbf/0x140 [mlxsw_spectrum]
    [97703.543418] ? mlxsw_sp_fib6_entry_destroy+0xe8/0x110 [mlxsw_spectrum]
    [97703.543475] mlxsw_sp_router_fib6_event_work+0x6cd/0x7f0 [mlxsw_spectrum]
    [97703.543484] process_one_work+0x1fd/0x400
    [97703.543493] worker_thread+0x34/0x410
    [97703.543500] kthread+0x121/0x140
    [97703.543507] ? process_one_work+0x400/0x400
    [97703.543512] ? kthread_park+0x90/0x90
    [97703.543523] ret_from_fork+0x35/0x40
    
    Fixes: a3832b31898f ("mlxsw: core: Create an ordered workqueue for FIB offload")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Semion Lisyansky <semionl@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 565e18a0be1051935f7e36cf470c87c6badbc36e
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Apr 10 06:58:13 2019 +0000

    mlxsw: core: Do not use WQ_MEM_RECLAIM for EMAD workqueue
    
    [ Upstream commit a8c133b06183c529c51cd0d54eb57d6b7078370c ]
    
    The EMAD workqueue is used to handle retransmission of EMAD packets that
    contain configuration data for the device's firmware.
    
    Given the workers need to allocate these packets and that the code is
    not called as part of memory reclaim path, remove the WQ_MEM_RECLAIM
    flag.
    
    Fixes: d965465b60ba ("mlxsw: core: Fix possible deadlock")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f180e411c3e551ef905c9424982d90b9bb26f6a
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Apr 10 06:58:12 2019 +0000

    mlxsw: spectrum_switchdev: Add MDB entries in prepare phase
    
    [ Upstream commit d4d0e40977ac450f32f2db5e4d8e23c9d2578899 ]
    
    The driver cannot guarantee in the prepare phase that it will be able to
    write an MDB entry to the device. In case the driver returned success
    during the prepare phase, but then failed to add the entry in the commit
    phase, a WARNING [1] will be generated by the switchdev core.
    
    Fix this by doing the work in the prepare phase instead.
    
    [1]
    [  358.544486] swp12s0: Commit of object (id=2) failed.
    [  358.550061] WARNING: CPU: 0 PID: 30 at net/switchdev/switchdev.c:281 switchdev_port_obj_add_now+0x9b/0xe0
    [  358.560754] CPU: 0 PID: 30 Comm: kworker/0:1 Not tainted 5.0.0-custom-13382-gf2449babf221 #1350
    [  358.570472] Hardware name: Mellanox Technologies Ltd. MSN2100-CB2FO/SA001017, BIOS 5.6.5 06/07/2016
    [  358.580582] Workqueue: events switchdev_deferred_process_work
    [  358.587001] RIP: 0010:switchdev_port_obj_add_now+0x9b/0xe0
    ...
    [  358.614109] RSP: 0018:ffffa6b900d6fe18 EFLAGS: 00010286
    [  358.619943] RAX: 0000000000000000 RBX: ffff8b00797ff000 RCX: 0000000000000000
    [  358.627912] RDX: ffff8b00b7a1d4c0 RSI: ffff8b00b7a152e8 RDI: ffff8b00b7a152e8
    [  358.635881] RBP: ffff8b005c3f5bc0 R08: 000000000000022b R09: 0000000000000000
    [  358.643850] R10: 0000000000000000 R11: ffffa6b900d6fcc8 R12: 0000000000000000
    [  358.651819] R13: dead000000000100 R14: ffff8b00b65a23c0 R15: 0ffff8b00b7a2200
    [  358.659790] FS:  0000000000000000(0000) GS:ffff8b00b7a00000(0000) knlGS:0000000000000000
    [  358.668820] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  358.675228] CR2: 00007f00aad90de0 CR3: 00000001ca80d000 CR4: 00000000001006f0
    [  358.683188] Call Trace:
    [  358.685918]  switchdev_port_obj_add_deferred+0x13/0x60
    [  358.691655]  switchdev_deferred_process+0x6b/0xf0
    [  358.696907]  switchdev_deferred_process_work+0xa/0x10
    [  358.702548]  process_one_work+0x1f5/0x3f0
    [  358.707022]  worker_thread+0x28/0x3c0
    [  358.711099]  ? process_one_work+0x3f0/0x3f0
    [  358.715768]  kthread+0x10d/0x130
    [  358.719369]  ? __kthread_create_on_node+0x180/0x180
    [  358.724815]  ret_from_fork+0x35/0x40
    
    Fixes: 3a49b4fde2a1 ("mlxsw: Adding layer 2 multicast support")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Alex Kushnarov <alexanderk@mellanox.com>
    Tested-by: Alex Kushnarov <alexanderk@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed112abe6795d646db5445fd19016afc30a6ba18
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 13 17:32:21 2019 -0700

    ipv4: ensure rcu_read_lock() in ipv4_link_failure()
    
    [ Upstream commit c543cb4a5f07e09237ec0fc2c60c9f131b2c79ad ]
    
    fib_compute_spec_dst() needs to be called under rcu protection.
    
    syzbot reported :
    
    WARNING: suspicious RCU usage
    5.1.0-rc4+ #165 Not tainted
    include/linux/inetdevice.h:220 suspicious rcu_dereference_check() usage!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    1 lock held by swapper/0/0:
     #0: 0000000051b67925 ((&n->timer)){+.-.}, at: lockdep_copy_map include/linux/lockdep.h:170 [inline]
     #0: 0000000051b67925 ((&n->timer)){+.-.}, at: call_timer_fn+0xda/0x720 kernel/time/timer.c:1315
    
    stack backtrace:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.1.0-rc4+ #165
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     lockdep_rcu_suspicious+0x153/0x15d kernel/locking/lockdep.c:5162
     __in_dev_get_rcu include/linux/inetdevice.h:220 [inline]
     fib_compute_spec_dst+0xbbd/0x1030 net/ipv4/fib_frontend.c:294
     spec_dst_fill net/ipv4/ip_options.c:245 [inline]
     __ip_options_compile+0x15a7/0x1a10 net/ipv4/ip_options.c:343
     ipv4_link_failure+0x172/0x400 net/ipv4/route.c:1195
     dst_link_failure include/net/dst.h:427 [inline]
     arp_error_report+0xd1/0x1c0 net/ipv4/arp.c:297
     neigh_invalidate+0x24b/0x570 net/core/neighbour.c:995
     neigh_timer_handler+0xc35/0xf30 net/core/neighbour.c:1081
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:293
     invoke_softirq kernel/softirq.c:374 [inline]
     irq_exit+0x180/0x1d0 kernel/softirq.c:414
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x14a/0x570 arch/x86/kernel/apic/apic.c:1062
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:807
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bd1ee0a993fc9574ae43c1994c54a60cb23a380
Author: Stephen Suryaputra <ssuryaextr@gmail.com>
Date:   Fri Apr 12 16:19:27 2019 -0400

    ipv4: recompile ip options in ipv4_link_failure
    
    [ Upstream commit ed0de45a1008991fdaa27a0152befcb74d126a8b ]
    
    Recompile IP options since IPCB may not be valid anymore when
    ipv4_link_failure is called from arp_error_report.
    
    Refer to the commit 3da1ed7ac398 ("net: avoid use IPCB in cipso_v4_error")
    and the commit before that (9ef6b42ad6fd) for a similar issue.
    
    Signed-off-by: Stephen Suryaputra <ssuryaextr@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cc6c4767e499c2a3e50b90cee4036a23839d7c9
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue Apr 9 12:10:25 2019 +0800

    vhost: reject zero size iova range
    
    [ Upstream commit 813dbeb656d6c90266f251d8bd2b02d445afa63f ]
    
    We used to accept zero size iova range which will lead a infinite loop
    in translate_desc(). Fixing this by failing the request in this case.
    
    Reported-by: syzbot+d21e6e297322a900c128@syzkaller.appspotmail.com
    Fixes: 6b1e6cc7 ("vhost: new device IOTLB API")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e35fa001678806e1424c7469bebeced5c6c96478
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Apr 9 14:59:24 2019 +0700

    tipc: missing entries in name table of publications
    
    [ Upstream commit d1841533e54876f152a30ac398a34f47ad6590b1 ]
    
    When binding multiple services with specific type 1Ki, 2Ki..,
    this leads to some entries in the name table of publications
    missing when listed out via 'tipc name show'.
    
    The problem is at identify zero last_type conditional provided
    via netlink. The first is initial 'type' when starting name table
    dummping. The second is continuously with zero type (node state
    service type). Then, lookup function failure to finding node state
    service type in next iteration.
    
    To solve this, adding more conditional to marked as dirty type and
    lookup correct service type for the next iteration instead of select
    the first service as initial 'type' zero.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aad7db2b23c1275360ba8f5dff32ab36f8428bf1
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Mon Apr 8 16:45:17 2019 +0800

    team: set slave to promisc if team is already in promisc mode
    
    [ Upstream commit 43c2adb9df7ddd6560fd3546d925b42cef92daa0 ]
    
    After adding a team interface to bridge, the team interface will enter
    promisc mode. Then if we add a new slave to team0, the slave will keep
    promisc off. Fix it by setting slave to promisc on if team master is
    already in promisc mode, also do the same for allmulti.
    
    v2: add promisc and allmulti checking when delete ports
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8aa965e92750828202567a26a0072f596d5e6d99
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Apr 16 10:55:20 2019 -0700

    tcp: tcp_grow_window() needs to respect tcp_space()
    
    [ Upstream commit 50ce163a72d817a99e8974222dcf2886d5deb1ae ]
    
    For some reason, tcp_grow_window() correctly tests if enough room
    is present before attempting to increase tp->rcv_ssthresh,
    but does not prevent it to grow past tcp_space()
    
    This is causing hard to debug issues, like failing
    the (__tcp_select_window(sk) >= tp->rcv_wnd) test
    in __tcp_ack_snd_check(), causing ACK delays and possibly
    slow flows.
    
    Depending on tcp_rmem[2], MTU, skb->len/skb->truesize ratio,
    we can see the problem happening on "netperf -t TCP_RR -- -r 2000,2000"
    after about 60 round trips, when the active side no longer sends
    immediate acks.
    
    This bug predates git history.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Wei Wang <weiwan@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1274905c8e1b9cfb631fdb428307a6e55161d785
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Tue Apr 9 11:47:20 2019 +0200

    net: fou: do not use guehdr after iptunnel_pull_offloads in gue_udp_recv
    
    [ Upstream commit 988dc4a9a3b66be75b30405a5494faf0dc7cffb6 ]
    
    gue tunnels run iptunnel_pull_offloads on received skbs. This can
    determine a possible use-after-free accessing guehdr pointer since
    the packet will be 'uncloned' running pskb_expand_head if it is a
    cloned gso skb (e.g if the packet has been sent though a veth device)
    
    Fixes: a09a4c8dd1ec ("tunnels: Remove encapsulation offloads on decap")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49f472ba481bcbd6f0c98345a08876b01a0f7b7d
Author: Yuya Kusakabe <yuya.kusakabe@gmail.com>
Date:   Tue Apr 16 10:22:28 2019 +0900

    net: Fix missing meta data in skb with vlan packet
    
    [ Upstream commit d85e8be2a5a02869f815dd0ac2d743deb4cd7957 ]
    
    skb_reorder_vlan_header() should move XDP meta data with ethernet header
    if XDP meta data exists.
    
    Fixes: de8f3a83b0a0 ("bpf: add meta pointer for direct access")
    Signed-off-by: Yuya Kusakabe <yuya.kusakabe@gmail.com>
    Signed-off-by: Takeru Hayasaka <taketarou2@gmail.com>
    Co-developed-by: Takeru Hayasaka <taketarou2@gmail.com>
    Reviewed-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a3382b15648c792264f664eb2d4cecf9c622d5
Author: Andy Duan <fugang.duan@nxp.com>
Date:   Tue Apr 9 03:40:56 2019 +0000

    net: fec: manage ahb clock in runtime pm
    
    [ Upstream commit d7c3a206e6338e4ccdf030719dec028e26a521d5 ]
    
    Some SOC like i.MX6SX clock have some limits:
    - ahb clock should be disabled before ipg.
    - ahb and ipg clocks are required for MAC MII bus.
    So, move the ahb clock to runtime management together with
    ipg clock.
    
    Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88f561ab1bd4915b67cadd960c7a7339473d3ed6
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Apr 11 15:08:25 2019 +0300

    net: bridge: multicast: use rcu to access port list from br_multicast_start_querier
    
    [ Upstream commit c5b493ce192bd7a4e7bd073b5685aad121eeef82 ]
    
    br_multicast_start_querier() walks over the port list but it can be
    called from a timer with only multicast_lock held which doesn't protect
    the port list, so use RCU to walk over it.
    
    Fixes: c83b8fab06fc ("bridge: Restart queries when last querier expires")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88c58435304bc68a549b8a4db51b35f7dd887049
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Apr 11 13:56:39 2019 +0300

    net: bridge: fix per-port af_packet sockets
    
    [ Upstream commit 3b2e2904deb314cc77a2192f506f2fd44e3d10d0 ]
    
    When the commit below was introduced it changed two visible things:
     - the skb was no longer passed through the protocol handlers with the
       original device
     - the skb was passed up the stack with skb->dev = bridge
    
    The first change broke af_packet sockets on bridge ports. For example we
    use them for hostapd which listens for ETH_P_PAE packets on the ports.
    We discussed two possible fixes:
     - create a clone and pass it through NF_HOOK(), act on the original skb
       based on the result
     - somehow signal to the caller from the okfn() that it was called,
       meaning the skb is ok to be passed, which this patch is trying to
       implement via returning 1 from the bridge link-local okfn()
    
    Note that we rely on the fact that NF_QUEUE/STOLEN would return 0 and
    drop/error would return < 0 thus the okfn() is called only when the
    return was 1, so we signal to the caller that it was called by preserving
    the return value from nf_hook().
    
    Fixes: 8626c56c8279 ("bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11ba95c4503b09247b6940280aecd975ab842e4c
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Apr 15 15:57:23 2019 -0500

    net: atm: Fix potential Spectre v1 vulnerabilities
    
    [ Upstream commit 899537b73557aafbdd11050b501cf54b4f5c45af ]
    
    arg is controlled by user-space, hence leading to a potential
    exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    net/atm/lec.c:715 lec_mcast_attach() warn: potential spectre issue 'dev_lec' [r] (local cap)
    
    Fix this by sanitizing arg before using it to index dev_lec.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://lore.kernel.org/lkml/20180423164740.GY17484@dhcp22.suse.cz/
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b633f6580b6265d4d160cbfad39bd3abbfda0196
Author: Si-Wei Liu <si-wei.liu@oracle.com>
Date:   Mon Apr 8 19:45:27 2019 -0400

    failover: allow name change on IFF_UP slave interfaces
    
    [ Upstream commit 8065a779f17e94536a1c4dcee4f9d88011672f97 ]
    
    When a netdev appears through hot plug then gets enslaved by a failover
    master that is already up and running, the slave will be opened
    right away after getting enslaved. Today there's a race that userspace
    (udev) may fail to rename the slave if the kernel (net_failover)
    opens the slave earlier than when the userspace rename happens.
    Unlike bond or team, the primary slave of failover can't be renamed by
    userspace ahead of time, since the kernel initiated auto-enslavement is
    unable to, or rather, is never meant to be synchronized with the rename
    request from userspace.
    
    As the failover slave interfaces are not designed to be operated
    directly by userspace apps: IP configuration, filter rules with
    regard to network traffic passing and etc., should all be done on master
    interface. In general, userspace apps only care about the
    name of master interface, while slave names are less important as long
    as admin users can see reliable names that may carry
    other information describing the netdev. For e.g., they can infer that
    "ens3nsby" is a standby slave of "ens3", while for a
    name like "eth0" they can't tell which master it belongs to.
    
    Historically the name of IFF_UP interface can't be changed because
    there might be admin script or management software that is already
    relying on such behavior and assumes that the slave name can't be
    changed once UP. But failover is special: with the in-kernel
    auto-enslavement mechanism, the userspace expectation for device
    enumeration and bring-up order is already broken. Previously initramfs
    and various userspace config tools were modified to bypass failover
    slaves because of auto-enslavement and duplicate MAC address. Similarly,
    in case that users care about seeing reliable slave name, the new type
    of failover slaves needs to be taken care of specifically in userspace
    anyway.
    
    It's less risky to lift up the rename restriction on failover slave
    which is already UP. Although it's possible this change may potentially
    break userspace component (most likely configuration scripts or
    management software) that assumes slave name can't be changed while
    UP, it's relatively a limited and controllable set among all userspace
    components, which can be fixed specifically to listen for the rename
    events on failover slaves. Userspace component interacting with slaves
    is expected to be changed to operate on failover master interface
    instead, as the failover slave is dynamic in nature which may come and
    go at any point.  The goal is to make the role of failover slaves less
    relevant, and userspace components should only deal with failover master
    in the long run.
    
    Fixes: 30c8bd5aa8b2 ("net: Introduce generic failover module")
    Signed-off-by: Si-Wei Liu <si-wei.liu@oracle.com>
    Reviewed-by: Liran Alon <liran.alon@oracle.com>
    Acked-by: Sridhar Samudrala <sridhar.samudrala@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e2c712830d63c3f8c3691829cd19a40295856f1
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Apr 12 15:04:10 2019 +0200

    bonding: fix event handling for stacked bonds
    
    [ Upstream commit 92480b3977fd3884649d404cbbaf839b70035699 ]
    
    When a bond is enslaved to another bond, bond_netdev_event() only
    handles the event as if the bond is a master, and skips treating the
    bond as a slave.
    
    This leads to a refcount leak on the slave, since we don't remove the
    adjacency to its master and the master holds a reference on the slave.
    
    Reproducer:
      ip link add bondL type bond
      ip link add bondU type bond
      ip link set bondL master bondU
      ip link del bondL
    
    No "Fixes:" tag, this code is older than git history.
    
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
