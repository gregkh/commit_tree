commit b3c6be58aa1056418198c893d8a15ea4e79c8bf1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 17 11:31:46 2018 +0200

    Linux 4.4.141

commit 43991e916eb9eac9ea0ef0317f9bfd3c491972cb
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri May 4 10:58:09 2018 -0600

    loop: remember whether sysfs_create_group() was done
    
    commit d3349b6b3c373ac1fbfb040b810fcee5e2adc7e0 upstream.
    
    syzbot is hitting WARN() triggered by memory allocation fault
    injection [1] because loop module is calling sysfs_remove_group()
    when sysfs_create_group() failed.
    Fix this by remembering whether sysfs_create_group() succeeded.
    
    [1] https://syzkaller.appspot.com/bug?id=3f86c0edf75c86d2633aeb9dd69eccc70bc7e90b
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+9f03168400f56df89dbc6f1751f4458fe739ff29@syzkaller.appspotmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Renamed sysfs_ready -> sysfs_inited.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28db2b23f44c4a15e431327e488fc0680c4aceb0
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed May 23 08:22:11 2018 +0300

    RDMA/ucm: Mark UCM interface as BROKEN
    
    commit 7a8690ed6f5346f6738971892205e91d39b6b901 upstream.
    
    In commit 357d23c811a7 ("Remove the obsolete libibcm library")
    in rdma-core [1], we removed obsolete library which used the
    /dev/infiniband/ucmX interface.
    
    Following multiple syzkaller reports about non-sanitized
    user input in the UCMA module, the short audit reveals the same
    issues in UCM module too.
    
    It is better to disable this interface in the kernel,
    before syzkaller team invests time and energy to harden
    this unused interface.
    
    [1] https://github.com/linux-rdma/rdma-core/pull/279
    
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4ae35d6789d187e2763db87fee4d118c576f907
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat May 26 09:59:36 2018 +0900

    PM / hibernate: Fix oops at snapshot_write()
    
    commit fc14eebfc20854a38fd9f1d93a42b1783dad4d17 upstream.
    
    syzbot is reporting NULL pointer dereference at snapshot_write() [1].
    This is because data->handle is zero-cleared by ioctl(SNAPSHOT_FREE).
    Fix this by checking data_of(data->handle) != NULL before using it.
    
    [1] https://syzkaller.appspot.com/bug?id=828a3c71bd344a6de8b6a31233d51a72099f27fd
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+ae590932da6e45d6564d@syzkaller.appspotmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2250809623141f969531692c2629dffd463dbaa6
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon May 7 11:37:58 2018 -0400

    loop: add recursion validation to LOOP_CHANGE_FD
    
    commit d2ac838e4cd7e5e9891ecc094d626734b0245c99 upstream.
    
    Refactor the validation code used in LOOP_SET_FD so it is also used in
    LOOP_CHANGE_FD.  Otherwise it is possible to construct a set of loop
    devices that all refer to each other.  This can lead to a infinite
    loop in starting with "while (is_loop_device(f)) .." in loop_set_fd().
    
    Fix this by refactoring out the validation code and using it for
    LOOP_CHANGE_FD as well as LOOP_SET_FD.
    
    Reported-by: syzbot+4349872271ece473a7c91190b68b4bac7c5dbc87@syzkaller.appspotmail.com
    Reported-by: syzbot+40bd32c4d9a3cc12a339@syzkaller.appspotmail.com
    Reported-by: syzbot+769c54e66f994b041be7@syzkaller.appspotmail.com
    Reported-by: syzbot+0a89a9ce473936c57065@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0319892f56fedd687c24dba6cd2094ff5bf58b39
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jun 7 21:34:43 2018 +0200

    netfilter: x_tables: initialise match/target check parameter struct
    
    commit c568503ef02030f169c9e19204def610a3510918 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in ebt_stp_mt_check+0x24b/0x450
     net/bridge/netfilter/ebt_stp.c:162
     ebt_stp_mt_check+0x24b/0x450 net/bridge/netfilter/ebt_stp.c:162
     xt_check_match+0x1438/0x1650 net/netfilter/x_tables.c:506
     ebt_check_match net/bridge/netfilter/ebtables.c:372 [inline]
     ebt_check_entry net/bridge/netfilter/ebtables.c:702 [inline]
    
    The uninitialised access is
       xt_mtchk_param->nft_compat
    
    ... which should be set to 0.
    Fix it by zeroing the struct beforehand, same for tgchk.
    
    ip(6)tables targetinfo uses c99-style initialiser, so no change
    needed there.
    
    Reported-by: syzbot+da4494182233c23a5fcf@syzkaller.appspotmail.com
    Fixes: 55917a21d0cc0 ("netfilter: x_tables: add context to know if extension runs from nft_compat")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e8001533068752e0fe161cbfc6a8154c1ad3fac
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jun 13 09:13:39 2018 -0700

    netfilter: nf_queue: augment nfqa_cfg_policy
    
    commit ba062ebb2cd561d404e0fba8ee4b3f5ebce7cbfc upstream.
    
    Three attributes are currently not verified, thus can trigger KMSAN
    warnings such as :
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in nfqnl_recv_config+0x939/0x17d0 net/netfilter/nfnetlink_queue.c:1268
    CPU: 1 PID: 4521 Comm: syz-executor120 Not tainted 4.17.0+ #5
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x188/0x2a0 mm/kmsan/kmsan.c:1117
     __msan_warning_32+0x70/0xc0 mm/kmsan/kmsan_instr.c:620
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     nfqnl_recv_config+0x939/0x17d0 net/netfilter/nfnetlink_queue.c:1268
     nfnetlink_rcv_msg+0xb2e/0xc80 net/netfilter/nfnetlink.c:212
     netlink_rcv_skb+0x37e/0x600 net/netlink/af_netlink.c:2448
     nfnetlink_rcv+0x2fe/0x680 net/netfilter/nfnetlink.c:513
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0x1680/0x1750 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x104f/0x1350 net/netlink/af_netlink.c:1901
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg net/socket.c:639 [inline]
     ___sys_sendmsg+0xec8/0x1320 net/socket.c:2117
     __sys_sendmsg net/socket.c:2155 [inline]
     __do_sys_sendmsg net/socket.c:2164 [inline]
     __se_sys_sendmsg net/socket.c:2162 [inline]
     __x64_sys_sendmsg+0x331/0x460 net/socket.c:2162
     do_syscall_64+0x15b/0x230 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x43fd59
    RSP: 002b:00007ffde0e30d28 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fd59
    RDX: 0000000000000000 RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 0000000000401680
    R13: 0000000000401710 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:279 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:189
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:315
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan.c:322
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2753 [inline]
     __kmalloc_node_track_caller+0xb35/0x11b0 mm/slub.c:4395
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cb/0x9e0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:988 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0x76e/0x1350 net/netlink/af_netlink.c:1876
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg net/socket.c:639 [inline]
     ___sys_sendmsg+0xec8/0x1320 net/socket.c:2117
     __sys_sendmsg net/socket.c:2155 [inline]
     __do_sys_sendmsg net/socket.c:2164 [inline]
     __se_sys_sendmsg net/socket.c:2162 [inline]
     __x64_sys_sendmsg+0x331/0x460 net/socket.c:2162
     do_syscall_64+0x15b/0x230 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: fdb694a01f1f ("netfilter: Add fail-open support")
    Fixes: 829e17a1a602 ("[NETFILTER]: nfnetlink_queue: allow changing queue length through netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e353bf5f4c949044d840bd3466cc98cfc37b5222
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri May 18 18:27:39 2018 +0200

    uprobes/x86: Remove incorrect WARN_ON() in uprobe_init_insn()
    
    commit 90718e32e1dcc2479acfa208ccfc6442850b594c upstream.
    
    insn_get_length() has the side-effect of processing the entire instruction
    but only if it was decoded successfully, otherwise insn_complete() can fail
    and in this case we need to just return an error without warning.
    
    Reported-by: syzbot+30d675e3ca03c1c351e7@syzkaller.appspotmail.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: syzkaller-bugs@googlegroups.com
    Link: https://lkml.kernel.org/lkml/20180518162739.GA5559@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7e37d9a907bff7b2cc1c4d5be9c6bedc9479422
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Sat Jul 14 02:28:57 2018 -0700

    x86/cpufeature: Add helper macro for mask check macros
    
    commit 8eda072e9d7c3429a372e3635dc5851f4a42dee1 upstream
    
    Every time we add a word to our cpu features, we need to add
    something like this in two places:
    
            (((bit)>>5)==16 && (1UL<<((bit)&31) & REQUIRED_MASK16))
    
    The trick is getting the "16" in this case in both places.  I've
    now screwed this up twice, so as pennance, I've come up with
    this patch to keep me and other poor souls from doing the same.
    
    I also commented the logic behind the bit manipulation showcased
    above.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20160629200110.1BA8949E@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ebab07946fa77c89b2603c7febcbdf2d42ed346
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Sat Jul 14 02:28:49 2018 -0700

    x86/cpufeature: Make sure DISABLED/REQUIRED macros are updated
    
    commit 1e61f78baf893c7eb49f633d23ccbb420c8f808e upstream
    
    x86 has two macros which allow us to evaluate some CPUID-based
    features at compile time:
    
            REQUIRED_MASK_BIT_SET()
            DISABLED_MASK_BIT_SET()
    
    They're both defined by having the compiler check the bit
    argument against some constant masks of features.
    
    But, when adding new CPUID leaves, we need to check new words
    for these macros.  So make sure that those macros and the
    REQUIRED_MASK* and DISABLED_MASK* get updated when necessary.
    
    This looks kinda silly to have an open-coded value ("18" in
    this case) open-coded in 5 places in the code.  But, we really do
    need 5 places updated when NCAPINTS gets bumped, so now we just
    force the issue.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20160629200108.92466F6F@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit febdf817e79b51ff13118bac7c48cb2108366d4b
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Sat Jul 14 02:28:40 2018 -0700

    x86/cpufeature: Update cpufeaure macros
    
    commit 6e17cb9c2d5efd8fcc3934e983733302b9912ff8 upstream
    
    We had a new CPUID "NCAPINT" word added, but the REQUIRED_MASK and
    DISABLED_MASK macros did not get updated.  Update them.
    
    None of the features was needed in these masks, so there was no
    harm, but we should keep them updated anyway.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20160629200107.8D3C9A31@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 793ea13ecc8d46668c0d24d6e5d4487a25eab877
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Sat Jul 14 02:28:30 2018 -0700

    x86/cpufeature, x86/mm/pkeys: Fix broken compile-time disabling of pkeys
    
    commit e8df1a95b685af84a81698199ee206e0e66a8b44 upstream
    
    When I added support for the Memory Protection Keys processor
    feature, I had to reindent the REQUIRED/DISABLED_MASK macros, and
    also consult the later cpufeature words.
    
    I'm not quite sure how I bungled it, but I consulted the wrong
    word at the end.  This only affected required or disabled cpu
    features in cpufeature words 14, 15 and 16.  So, only Protection
    Keys itself was screwed over here.
    
    The result was that if you disabled pkeys in your .config, you
    might still see some code show up that should have been compiled
    out.  There should be no functional problems, though.
    
    In verifying this patch I also realized that the DISABLE_PKU/OSPKE
    macros were defined backwards and that the cpu_has() check in
    setup_pku() was not doing the compile-time disabled checks.
    
    So also fix the macro for DISABLE_PKU/OSPKE and add a compile-time
    check for pkeys being enabled in setup_pku().
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: dfb4a70f20c5 ("x86/cpufeature, x86/mm/pkeys: Add protection keys related CPUID definitions")
    Link: http://lkml.kernel.org/r/20160513221328.C200930B@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cc52d168fcb4152132b0ba067db4c1da1bdca67
Author: Yazen Ghannam <Yazen.Ghannam@amd.com>
Date:   Sat Jul 14 02:28:21 2018 -0700

    x86/cpu: Add detection of AMD RAS Capabilities
    
    commit 71faad43060d3d2040583635fbf7d1bdb3d04118 upstream
    
    Add a new CPUID leaf to hold the contents of CPUID 0x80000007_EBX (RasCap).
    
    Define bits that are currently in use:
    
     Bit 0: McaOverflowRecov
     Bit 1: SUCCOR
     Bit 3: ScalableMca
    
    Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
    [ Shorten comment. ]
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Link: http://lkml.kernel.org/r/1462971509-3856-5-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5918939e57133967a23612012fed4440809456a
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Sat Jul 14 02:28:13 2018 -0700

    x86/mm/pkeys: Fix mismerge of protection keys CPUID bits
    
    commit 0d47638f80a02b15869f1fe1fc09e5bf996750fd upstream
    
    Kirill Shutemov pointed this out to me.
    
    The tip tree currently has commit:
    
            dfb4a70f2 [x86/cpufeature, x86/mm/pkeys: Add protection keys related CPUID definitions]
    
    whioch added support for two new CPUID bits: X86_FEATURE_PKU and
    X86_FEATURE_OSPKE.  But, those bits were mis-merged and put in
    cpufeature.h instead of cpufeatures.h.
    
    This didn't cause any breakage *except* it keeps the "ospke" and
    "pku" bits from showing up in cpuinfo.
    
    Now cpuinfo has the two new flags:
    
            flags   : ...  pku ospke
    
    BTW, is it really wise to have cpufeature.h and cpufeatures.h?
    It seems like they can only cause confusion and mahem with tab
    completion.
    
    Reported-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20160310221213.06F9DB53@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 747b9cefca27eda29ca76dd3cf95b7fa046cd88b
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Sat Jul 14 02:28:04 2018 -0700

    x86/cpufeature, x86/mm/pkeys: Add protection keys related CPUID definitions
    
    commit dfb4a70f20c5b3880da56ee4c9484bdb4e8f1e65 upstream
    
    There are two CPUID bits for protection keys.  One is for whether
    the CPU contains the feature, and the other will appear set once
    the OS enables protection keys.  Specifically:
    
            Bit 04: OSPKE. If 1, OS has set CR4.PKE to enable
            Protection keys (and the RDPKRU/WRPKRU instructions)
    
    This is because userspace can not see CR4 contents, but it can
    see CPUID contents.
    
    X86_FEATURE_PKU is referred to as "PKU" in the hardware documentation:
    
            CPUID.(EAX=07H,ECX=0H):ECX.PKU [bit 3]
    
    X86_FEATURE_OSPKE is "OSPKU":
    
            CPUID.(EAX=07H,ECX=0H):ECX.OSPKE [bit 4]
    
    These are the first CPU features which need to look at the
    ECX word in CPUID leaf 0x7, so this patch also includes
    fetching that word in to the cpuinfo->x86_capability[] array.
    
    Add it to the disabled-features mask when its config option is
    off.  Even though we are not using it here, we also extend the
    REQUIRED_MASK_BIT_SET() macro to keep it mirroring the
    DISABLED_MASK_BIT_SET() version.
    
    This means that in almost all code, you should use:
    
            cpu_has(c, X86_FEATURE_PKU)
    
    and *not* the CONFIG option.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: linux-mm@kvack.org
    Link: http://lkml.kernel.org/r/20160212210201.7714C250@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21a4ec5918141be219d977952b8fea7c4db2c827
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:27:55 2018 -0700

    x86/cpufeature: Speed up cpu_feature_enabled()
    
    commit f2cc8e0791c70833758101d9756609a08dd601ec upstream
    
    When GCC cannot do constant folding for this macro, it falls back to
    cpu_has(). But static_cpu_has() is optimal and it works at all times
    now. So use it and speedup the fallback case.
    
    Before we had this:
    
      mov    0x99d674(%rip),%rdx        # ffffffff81b0d9f4 <boot_cpu_data+0x34>
      shr    $0x2e,%rdx
      and    $0x1,%edx
      jne    ffffffff811704e9 <do_munmap+0x3f9>
    
    After alternatives patching, it turns into:
    
                      jmp    0xffffffff81170390
                      nopl   (%rax)
                      ...
                      callq  ffffffff81056e00 <mpx_notify_unmap>
    ffffffff81170390: mov    0x170(%r12),%rdi
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1455578358-28347-1-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1b00d57298f013e5213dee6c1a5aba6766108ca
Author: Alexander Kuleshov <kuleshovmail@gmail.com>
Date:   Sat Jul 14 02:27:46 2018 -0700

    x86/boot: Simplify kernel load address alignment check
    
    commit a4733143085d6c782ac1e6c85778655b6bac1d4e upstream
    
    We are using %rax as temporary register to check the kernel
    address alignment. We don't really have to since the TEST
    instruction does not clobber the destination operand.
    
    Suggested-by: Brian Gerst <brgerst@gmail.com>
    Signed-off-by: Alexander Kuleshov <kuleshovmail@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Alexander Popov <alpopov@ptsecurity.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1453531828-19291-1-git-send-email-kuleshovmail@gmail.com
    Link: http://lkml.kernel.org/r/1453842730-28463-11-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b354f89fd5a538ced93afd5563e77b85eadb669
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:27:37 2018 -0700

    x86/vdso: Use static_cpu_has()
    
    commit 8c725306993198f845038dc9e45a1267099867a6 upstream
    
    ... and simplify and speed up a tad.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1453842730-28463-10-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e23a6fee67677b5c6f9a9d65254d01b7b39b747b
Author: Brian Gerst <brgerst@gmail.com>
Date:   Sat Jul 14 02:27:28 2018 -0700

    x86/alternatives: Discard dynamic check after init
    
    commit 2476f2fa20568bd5d9e09cd35bcd73e99a6f4cc6 upstream
    
    Move the code to do the dynamic check to the altinstr_aux
    section so that it is discarded after alternatives have run and
    a static branch has been chosen.
    
    This way we're changing the dynamic branch from C code to
    assembly, which makes it *substantially* smaller while avoiding
    a completely unnecessary call to an out of line function.
    
    Signed-off-by: Brian Gerst <brgerst@gmail.com>
    [ Changed it to do TESTB, as hpa suggested. ]
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Kristen Carlson Accardi <kristen@linux.intel.com>
    Cc: Laura Abbott <labbott@fedoraproject.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1452972124-7380-1-git-send-email-brgerst@gmail.com
    Link: http://lkml.kernel.org/r/20160127084525.GC30712@pd.tnic
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f90c87190830f23c52531322268cd97e28d71e
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:27:19 2018 -0700

    x86/alternatives: Add an auxilary section
    
    commit 337e4cc84021212a87b04b77b65cccc49304909e upstream
    
    Add .altinstr_aux for additional instructions which will be used
    before and/or during patching. All stuff which needs more
    sophisticated patching should go there. See next patch.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1453842730-28463-8-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f3d81317036b17f2fcdf1d76e55915d4c5b771d
Author: Borislav Petkov <bp@alien8.de>
Date:   Sat Jul 14 02:27:10 2018 -0700

    x86/cpufeature: Get rid of the non-asm goto variant
    
    commit a362bf9f5e7dd659b96d01382da7b855f4e5a7a1 upstream
    
    I can simply quote hpa from the mail:
    
      "Get rid of the non-asm goto variant and just fall back to
       dynamic if asm goto is unavailable. It doesn't make any sense,
       really, if it is supposed to be safe, and by now the asm
       goto-capable gcc is in more wide use. (Originally the gcc 3.x
       fallback to pure dynamic didn't exist, either.)"
    
    Booy, am I lazy.
    
    Cleanup the whole CC_HAVE_ASM_GOTO ifdeffery too, while at it.
    
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20160127084325.GB30712@pd.tnic
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d45dae0af88a2602e37e596fdc69f66497f3bb0
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:27:01 2018 -0700

    x86/cpufeature: Replace the old static_cpu_has() with safe variant
    
    commit bc696ca05f5a8927329ec276a892341e006b00ba upstream
    
    So the old one didn't work properly before alternatives had run.
    And it was supposed to provide an optimized JMP because the
    assumption was that the offset it is jumping to is within a
    signed byte and thus a two-byte JMP.
    
    So I did an x86_64 allyesconfig build and dumped all possible
    sites where static_cpu_has() was used. The optimization amounted
    to all in all 12(!) places where static_cpu_has() had generated
    a 2-byte JMP. Which has saved us a whopping 36 bytes!
    
    This clearly is not worth the trouble so we can remove it. The
    only place where the optimization might count - in __switch_to()
    - we will handle differently. But that's not subject of this
    patch.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1453842730-28463-6-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b2330a33983f103327f929189ef9c8f935d9f0c
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:26:52 2018 -0700

    x86/cpufeature: Carve out X86_FEATURE_*
    
    commit cd4d09ec6f6c12a2cc3db5b7d8876a325a53545b upstream
    
    Move them to a separate header and have the following
    dependency:
    
      x86/cpufeatures.h <- x86/processor.h <- x86/cpufeature.h
    
    This makes it easier to use the header in asm code and not
    include the whole cpufeature.h and add guards for asm.
    
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1453842730-28463-5-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4307cf43911180477e15c6f1cceed0460428efae
Author: Andi Kleen <ak@linux.intel.com>
Date:   Sat Jul 14 02:26:43 2018 -0700

    x86/headers: Don't include asm/processor.h in asm/atomic.h
    
    commit 153a4334c439cfb62e1d31cee0c790ba4157813d upstream
    
    asm/atomic.h doesn't really need asm/processor.h anymore. Everything
    it uses has moved to other header files. So remove that include.
    
    processor.h is a nasty header that includes lots of
    other headers and makes it prone to include loops. Removing the
    include here makes asm/atomic.h a "leaf" header that can
    be safely included in most other headers.
    
    The only fallout is in the lib/atomic tester which relied on
    this implicit include. Give it an explicit include.
    (the include is in ifdef because the user is also in ifdef)
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: rostedt@goodmis.org
    Link: http://lkml.kernel.org/r/1449018060-1742-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9028f9c58a9ae66ec5d5aebf870d531e62b7ed4
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:26:34 2018 -0700

    x86/fpu: Get rid of xstate_fault()
    
    commit b7106fa0f29f9fd83d2d1905ab690d334ef855c1 upstream
    
    Add macros for the alternative XSAVE*/XRSTOR* operations which
    contain the fault handling and use them. Kill xstate_fault().
    
    Also, copy_xregs_to_kernel() didn't have the extended state as
    memory reference in the asm.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1447932326-4371-3-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11473585ba6e4102c31da6e5ed8b6f57b9761f3e
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:26:25 2018 -0700

    x86/fpu: Add an XSTATE_OP() macro
    
    commit b74a0cf1b3db30173eefa00c411775d2b1697700 upstream
    
    Add an XSTATE_OP() macro which contains the XSAVE* fault handling
    and replace all non-alternatives users of xstate_fault() with
    it.
    
    This fixes also the buglet in copy_xregs_to_user() and
    copy_user_to_xregs() where the inline asm didn't have @xstate as
    memory reference and thus potentially causing unwanted
    reordering of accesses to the extended state.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1447932326-4371-2-git-send-email-bp@alien8.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c9814143e58cc34d29dbf187d0ffe04680e17f9
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:26:17 2018 -0700

    x86/cpu: Provide a config option to disable static_cpu_has
    
    commit 6e1315fe82308cd29e7550eab967262e8bbc71a3 upstream
    
    This brings .text savings of about ~1.6K when building a tinyconfig. It
    is off by default so nothing changes for the default.
    
    Kconfig help text from Josh.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Josh Triplett <josh@joshtriplett.org>
    Link: http://lkml.kernel.org/r/1449481182-27541-5-git-send-email-bp@alien8.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f66fae5d614efedac967ab010faa3f6bf44a347
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:26:09 2018 -0700

    x86/cpufeature: Cleanup get_cpu_cap()
    
    commit 39c06df4dc10a41de5fe706f4378ee5f09beba73 upstream
    
    Add an enum for the ->x86_capability array indices and cleanup
    get_cpu_cap() by killing some redundant local vars.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/1449481182-27541-3-git-send-email-bp@alien8.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47ff5bc938c8db4f268628c6cddf44cfbb861725
Author: Borislav Petkov <bp@suse.de>
Date:   Sat Jul 14 02:26:01 2018 -0700

    x86/cpufeature: Move some of the scattered feature bits to x86_capability
    
    commit 2ccd71f1b278d450a6f8c8c737c7fe237ca06dc6 upstream
    
    Turn the CPUID leafs which are proper CPUID feature bit leafs into
    separate ->x86_capability words.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/1449481182-27541-2-git-send-email-bp@alien8.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Srivatsa S. Bhat <srivatsa@csail.mit.edu>
    Reviewed-by: Matt Helsley (VMware) <matt.helsley@gmail.com>
    Reviewed-by: Alexey Makhalov <amakhalov@vmware.com>
    Reviewed-by: Bo Gan <ganb@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 455040965e355459392a2d88bd864ae242d7c810
Author: Steve Wise <larrystevenwise@gmail.com>
Date:   Thu Jun 21 07:43:21 2018 -0700

    iw_cxgb4: correctly enforce the max reg_mr depth
    
    commit 7b72717a20bba8bdd01b14c0460be7d15061cd6b upstream.
    
    The code was mistakenly using the length of the page array memory instead
    of the depth of the page array.
    
    This would cause MR creation to fail in some cases.
    
    Fixes: 8376b86de7d3 ("iw_cxgb4: Support the new memory registration API")
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5956a8e37d66cc0a6e265704564f8314a54d7c97
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Tue Jun 5 19:00:22 2018 +0200

    tools build: fix # escaping in .cmd files for future Make
    
    commit 9feeb638cde083c737e295c0547f1b4f28e99583 upstream.
    
    In 2016 GNU Make made a backwards incompatible change to the way '#'
    characters were handled in Makefiles when used inside functions or
    macros:
    
    http://git.savannah.gnu.org/cgit/make.git/commit/?id=c6966b323811c37acedff05b57
    
    Due to this change, when attempting to run `make prepare' I get a
    spurious make syntax error:
    
        /home/earnest/linux/tools/objtool/.fixdep.o.cmd:1: *** missing separator.  Stop.
    
    When inspecting `.fixdep.o.cmd' it includes two lines which use
    unescaped comment characters at the top:
    
        \# cannot find fixdep (/home/earnest/linux/tools/objtool//fixdep)
        \# using basic dep data
    
    This is because `tools/build/Build.include' prints these '\#'
    characters:
    
        printf '\# cannot find fixdep (%s)\n' $(fixdep) > $(dot-target).cmd; \
        printf '\# using basic dep data\n\n' >> $(dot-target).cmd;           \
    
    This completes commit 9564a8cf422d ("Kbuild: fix # escaping in .cmd files
    for future Make").
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=197847
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e71dbad7563db674f91af9e12ef592c107d0c2cd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 3 17:10:19 2018 -0700

    Fix up non-directory creation in SGID directories
    
    commit 0fa3ecd87848c9c93c2c828ef4c3a8ca36ce46c7 upstream.
    
    sgid directories have special semantics, making newly created files in
    the directory belong to the group of the directory, and newly created
    subdirectories will also become sgid.  This is historically used for
    group-shared directories.
    
    But group directories writable by non-group members should not imply
    that such non-group members can magically join the group, so make sure
    to clear the sgid bit on non-directories for non-members (but remember
    that sgid without group execute means "mandatory locking", just to
    confuse things even more).
    
    Reported-by: Jann Horn <jannh@google.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52558627ceab876ddc8047baf77ea32b5042c5ba
Author: Tomasz Kramkowski <tk@the-tk.com>
Date:   Tue Feb 14 23:14:33 2017 +0000

    HID: usbhid: add quirk for innomedia INNEX GENESIS/ATARI adapter
    
    commit 9547837bdccb4af127528b36a73377150658b4ac upstream.
    
    The (1292:4745) Innomedia INNEX GENESIS/ATARI adapter needs
    HID_QUIRK_MULTI_INPUT to split the device up into two controllers
    instead of inputs from both being merged into one.
    
    Signed-off-by: Tomasz Kramkowski <tk@the-tk.com>
    Acked-By: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cd94f78ef738557145e4fdb07c41efed7a8792c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:48:53 2018 +0300

    xhci: xhci-mem: off by one in xhci_stream_id_to_ring()
    
    commit 313db3d6488bb03b61b99de9dbca061f1fd838e1 upstream.
    
    The > should be >= here so that we don't read one element beyond the end
    of the ep->stream_info->stream_rings[] array.
    
    Fixes: e9df17eb1408 ("USB: xhci: Correct assumptions about number of rings per endpoint.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f873c236d61ec9e41df12b7544c7f5562c25165
Author: Nico Sneck <snecknico@gmail.com>
Date:   Mon Jul 2 19:26:07 2018 +0300

    usb: quirks: add delay quirks for Corsair Strafe
    
    commit bba57eddadda936c94b5dccf73787cb9e159d0a5 upstream.
    
    Corsair Strafe appears to suffer from the same issues
    as the Corsair Strafe RGB.
    Apply the same quirks (control message delay and init delay)
    that the RGB version has to 1b1c:1b15.
    
    With these quirks in place the keyboard works correctly upon
    booting the system, and no longer requires reattaching the device.
    
    Signed-off-by: Nico Sneck <snecknico@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd1496f3b50316927b60a1baf4c06853f8c6cbdc
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 4 17:02:17 2018 +0200

    USB: serial: mos7840: fix status-register error handling
    
    commit 794744abfffef8b1f3c0c8a4896177d6d13d653d upstream.
    
    Add missing transfer-length sanity check to the status-register
    completion handler to avoid leaking bits of uninitialised slab data to
    user space.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2638a67a0c50a97e0564491325c24c2c12083dbb
Author: Jann Horn <jannh@google.com>
Date:   Fri Jul 6 17:12:56 2018 +0200

    USB: yurex: fix out-of-bounds uaccess in read handler
    
    commit f1e255d60ae66a9f672ff9a207ee6cd8e33d2679 upstream.
    
    In general, accessing userspace memory beyond the length of the supplied
    buffer in VFS read/write handlers can lead to both kernel memory corruption
    (via kernel_read()/kernel_write(), which can e.g. be triggered via
    sys_splice()) and privilege escalation inside userspace.
    
    Fix it by using simple_read_from_buffer() instead of custom logic.
    
    Fixes: 6bc235a2e24a ("USB: add driver for Meywa-Denki & Kayac YUREX")
    Signed-off-by: Jann Horn <jannh@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5736d7c209bf8090d68a611ec4dba034f3d8b2fe
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 4 17:02:16 2018 +0200

    USB: serial: keyspan_pda: fix modem-status error handling
    
    commit 01b3cdfca263a17554f7b249d20a247b2a751521 upstream.
    
    Fix broken modem-status error handling which could lead to bits of slab
    data leaking to user space.
    
    Fixes: 3b36a8fd6777 ("usb: fix uninitialized variable warning in keyspan_pda")
    Cc: stable <stable@vger.kernel.org>     # 2.6.27
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bbc393835217e5c1e51dae46ecdb3ef26884c92
Author: Olli Salonen <olli.salonen@iki.fi>
Date:   Wed Jul 4 14:07:42 2018 +0300

    USB: serial: cp210x: add another USB ID for Qivicon ZigBee stick
    
    commit 367b160fe4717c14a2a978b6f9ffb75a7762d3ed upstream.
    
    There are two versions of the Qivicon Zigbee stick in circulation. This
    adds the second USB ID to the cp210x driver.
    
    Signed-off-by: Olli Salonen <olli.salonen@iki.fi>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a82597e92e47980261f8cfb37008026730a3a585
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:29:38 2018 +0300

    USB: serial: ch341: fix type promotion bug in ch341_control_in()
    
    commit e33eab9ded328ccc14308afa51b5be7cbe78d30b upstream.
    
    The "r" variable is an int and "bufsize" is an unsigned int so the
    comparison is type promoted to unsigned.  If usb_control_msg() returns a
    negative that is treated as a high positive value and the error handling
    doesn't work.
    
    Fixes: 2d5a9c72d0c4 ("USB: serial: ch341: fix control-message error handling")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54b594369ae19fc64b45ca045c26005d5de095d8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Jul 1 12:15:46 2018 +0200

    ahci: Disable LPM on Lenovo 50 series laptops with a too old BIOS
    
    commit 240630e61870e62e39a97225048f9945848fa5f5 upstream.
    
    There have been several reports of LPM related hard freezes about once
    a day on multiple Lenovo 50 series models. Strange enough these reports
    where not disk model specific as LPM issues usually are and some users
    with the exact same disk + laptop where seeing them while other users
    where not seeing these issues.
    
    It turns out that enabling LPM triggers a firmware bug somewhere, which
    has been fixed in later BIOS versions.
    
    This commit adds a new ahci_broken_lpm() function and a new ATA_FLAG_NO_LPM
    for dealing with this.
    
    The ahci_broken_lpm() function contains DMI match info for the 4 models
    which are known to be affected by this and the DMI BIOS date field for
    known good BIOS versions. If the BIOS date is older then the one in the
    table LPM will be disabled and a warning will be printed.
    
    Note the BIOS dates are for known good versions, some older versions may
    work too, but we don't know for sure, the table is using dates from BIOS
    versions for which users have confirmed that upgrading to that version
    makes the problem go away.
    
    Unfortunately I've been unable to get hold of the reporter who reported
    that BIOS version 2.35 fixed the problems on the W541 for him. I've been
    able to verify the DMI_SYS_VENDOR and DMI_PRODUCT_VERSION from an older
    dmidecode, but I don't know the exact BIOS date as reported in the DMI.
    Lenovo keeps a changelog with dates in their release notes, but the
    dates there are the release dates not the build dates which are in DMI.
    So I've chosen to set the date to which we compare to one day past the
    release date of the 2.34 BIOS. I plan to fix this with a follow up
    commit once I've the necessary info.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0a1bf29d821ba724e2cf4813352f11a4597afe4
Author: Nadav Amit <namit@vmware.com>
Date:   Mon Jul 2 19:27:13 2018 -0700

    vmw_balloon: fix inflation with batching
    
    commit 90d72ce079791399ac255c75728f3c9e747b093d upstream.
    
    Embarrassingly, the recent fix introduced worse problem than it solved,
    causing the balloon not to inflate. The VM informed the hypervisor that
    the pages for lock/unlock are sitting in the wrong address, as it used
    the page that is used the uninitialized page variable.
    
    Fixes: b23220fe054e9 ("vmw_balloon: fixing double free when batching mode is off")
    Cc: stable@vger.kernel.org
    Reviewed-by: Xavier Deguillard <xdeguillard@vmware.com>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba20e67aee81bf01dc6154e91bcfee431f1bb678
Author: Jann Horn <jannh@google.com>
Date:   Sat Jul 7 04:16:33 2018 +0200

    ibmasm: don't write out of bounds in read handler
    
    commit a0341fc1981a950c1e902ab901e98f60e0e243f3 upstream.
    
    This read handler had a lot of custom logic and wrote outside the bounds of
    the provided buffer. This could lead to kernel and userspace memory
    corruption. Just use simple_read_from_buffer() with a stack buffer.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc20ab941e5e1523198b18943f9ca66e269e20a0
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Jul 5 14:37:52 2018 -0700

    MIPS: Fix ioremap() RAM check
    
    commit 523402fa9101090c91d2033b7ebdfdcf65880488 upstream.
    
    We currently attempt to check whether a physical address range provided
    to __ioremap() may be in use by the page allocator by examining the
    value of PageReserved for each page in the region - lowmem pages not
    marked reserved are presumed to be in use by the page allocator, and
    requests to ioremap them fail.
    
    The way we check this has been broken since commit 92923ca3aace ("mm:
    meminit: only set page reserved in the memblock region"), because
    memblock will typically not have any knowledge of non-RAM pages and
    therefore those pages will not have the PageReserved flag set. Thus when
    we attempt to ioremap a region outside of RAM we incorrectly fail
    believing that the region is RAM that may be in use.
    
    In most cases ioremap() on MIPS will take a fast-path to use the
    unmapped kseg1 or xkphys virtual address spaces and never hit this path,
    so the only way to hit it is for a MIPS32 system to attempt to ioremap()
    an address range in lowmem with flags other than _CACHE_UNCACHED.
    Perhaps the most straightforward way to do this is using
    ioremap_uncached_accelerated(), which is how the problem was discovered.
    
    Fix this by making use of walk_system_ram_range() to test the address
    range provided to __ioremap() against only RAM pages, rather than all
    lowmem pages. This means that if we have a lowmem I/O region, which is
    very common for MIPS systems, we're free to ioremap() address ranges
    within it. A nice bonus is that the test is no longer limited to lowmem.
    
    The approach here matches the way x86 performed the same test after
    commit c81c8a1eeede ("x86, ioremap: Speed up check for RAM pages") until
    x86 moved towards a slightly more complicated check using walk_mem_res()
    for unrelated reasons with commit 0e4c12b45aa8 ("x86/mm, resource: Use
    PAGE_KERNEL protection for ioremap of memory pages").
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Serge Semin <fancer.lancer@gmail.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Fixes: 92923ca3aace ("mm: meminit: only set page reserved in the memblock region")
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.2+
    Patchwork: https://patchwork.linux-mips.org/patch/19786/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
