commit 6c3d34dea2fc9b02c4419af4e368e8b73f566c88
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Sep 12 14:18:56 2020 +0200

    Linux 5.4.65
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddb279d64b724b197dec829c016b5d386314b970
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Aug 26 12:40:06 2020 -0700

    net: disable netpoll on fresh napis
    
    [ Upstream commit 96e97bc07e90f175a8980a22827faf702ca4cb30 ]
    
    napi_disable() makes sure to set the NAPI_STATE_NPSVC bit to prevent
    netpoll from accessing rings before init is complete. However, the
    same is not done for fresh napi instances in netif_napi_add(),
    even though we expect NAPI instances to be added as disabled.
    
    This causes crashes during driver reconfiguration (enabling XDP,
    changing the channel count) - if there is any printk() after
    netif_napi_add() but before napi_enable().
    
    To ensure memory ordering is correct we need to use RCU accessors.
    
    Reported-by: Rob Sherwood <rsher@fb.com>
    Fixes: 2d8bff12699a ("netpoll: Close race condition between poll_one_napi and napi_disable")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09c45065257b5b194e08a1b4749daeebb961675e
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b95eb482c288c4f2ca198b62a272038429a0c521
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Tue Aug 25 10:44:04 2020 -0700

    taprio: Fix using wrong queues in gate mask
    
    [ Upstream commit 09e31cf0c528dac3358a081dc4e773d1b3de1bc9 ]
    
    Since commit 9c66d1564676 ("taprio: Add support for hardware
    offloading") there's a bit of inconsistency when offloading schedules
    to the hardware:
    
    In software mode, the gate masks are specified in terms of traffic
    classes, so if say "sched-entry S 03 20000", it means that the traffic
    classes 0 and 1 are open for 20us; when taprio is offloaded to
    hardware, the gate masks are specified in terms of hardware queues.
    
    The idea here is to fix hardware offloading, so schedules in hardware
    and software mode have the same behavior. What's needed to do is to
    map traffic classes to queues when applying the offload to the driver.
    
    Fixes: 9c66d1564676 ("taprio: Add support for hardware offloading")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f8c874789a80fbc1ab44451274bbde52bfa4b8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Aug 21 14:59:38 2020 +0800

    sctp: not disable bh in the whole sctp_get_port_local()
    
    [ Upstream commit 3106ecb43a05dc3e009779764b9da245a5d082de ]
    
    With disabling bh in the whole sctp_get_port_local(), when
    snum == 0 and too many ports have been used, the do-while
    loop will take the cpu for a long time and cause cpu stuck:
    
      [ ] watchdog: BUG: soft lockup - CPU#11 stuck for 22s!
      [ ] RIP: 0010:native_queued_spin_lock_slowpath+0x4de/0x940
      [ ] Call Trace:
      [ ]  _raw_spin_lock+0xc1/0xd0
      [ ]  sctp_get_port_local+0x527/0x650 [sctp]
      [ ]  sctp_do_bind+0x208/0x5e0 [sctp]
      [ ]  sctp_autobind+0x165/0x1e0 [sctp]
      [ ]  sctp_connect_new_asoc+0x355/0x480 [sctp]
      [ ]  __sctp_connect+0x360/0xb10 [sctp]
    
    There's no need to disable bh in the whole function of
    sctp_get_port_local. So fix this cpu stuck by removing
    local_bh_disable() called at the beginning, and using
    spin_lock_bh() instead.
    
    The same thing was actually done for inet_csk_get_port() in
    Commit ea8add2b1903 ("tcp/dccp: better use of ephemeral
    ports in bind()").
    
    Thanks to Marcelo for pointing the buggy code out.
    
    v1->v2:
      - use cond_resched() to yield cpu to other tasks if needed,
        as Eric noticed.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b61bb0b2d57b58f59eb218c049f2f4c2a8bf7a7
Author: Kamil Lorenc <kamil@re-ws.pl>
Date:   Tue Sep 1 10:57:38 2020 +0200

    net: usb: dm9601: Add USB ID of Keenetic Plus DSL
    
    [ Upstream commit a609d0259183a841621f252e067f40f8cc25d6f6 ]
    
    Keenetic Plus DSL is a xDSL modem that uses dm9620 as its USB interface.
    
    Signed-off-by: Kamil Lorenc <kamil@re-ws.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 346fefa823259c86eaef64102796f1be284ac41a
Author: Paul Moore <paul@paul-moore.com>
Date:   Fri Aug 21 16:34:52 2020 -0400

    netlabel: fix problems with mapping removal
    
    [ Upstream commit d3b990b7f327e2afa98006e7666fb8ada8ed8683 ]
    
    This patch fixes two main problems seen when removing NetLabel
    mappings: memory leaks and potentially extra audit noise.
    
    The memory leaks are caused by not properly free'ing the mapping's
    address selector struct when free'ing the entire entry as well as
    not properly cleaning up a temporary mapping entry when adding new
    address selectors to an existing entry.  This patch fixes both these
    problems such that kmemleak reports no NetLabel associated leaks
    after running the SELinux test suite.
    
    The potentially extra audit noise was caused by the auditing code in
    netlbl_domhsh_remove_entry() being called regardless of the entry's
    validity.  If another thread had already marked the entry as invalid,
    but not removed/free'd it from the list of mappings, then it was
    possible that an additional mapping removal audit record would be
    generated.  This patch fixes this by returning early from the removal
    function when the entry was previously marked invalid.  This change
    also had the side benefit of improving the code by decreasing the
    indentation level of large chunk of code by one (accounting for most
    of the diffstat).
    
    Fixes: 63c416887437 ("netlabel: Add network address selectors to the NetLabel/LSM domain mapping")
    Reported-by: Stephen Smalley <stephen.smalley.work@gmail.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f73dbf94f8fbe006f252bed2093354f55055387
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Sep 2 16:16:59 2020 +0300

    ipv6: Fix sysctl max for fib_multipath_hash_policy
    
    [ Upstream commit 05d4487197b2b71d5363623c28924fd58c71c0b6 ]
    
    Cited commit added the possible value of '2', but it cannot be set. Fix
    it by adjusting the maximum value to '2'. This is consistent with the
    corresponding IPv4 sysctl.
    
    Before:
    
    # sysctl -w net.ipv6.fib_multipath_hash_policy=2
    sysctl: setting key "net.ipv6.fib_multipath_hash_policy": Invalid argument
    net.ipv6.fib_multipath_hash_policy = 2
    # sysctl net.ipv6.fib_multipath_hash_policy
    net.ipv6.fib_multipath_hash_policy = 0
    
    After:
    
    # sysctl -w net.ipv6.fib_multipath_hash_policy=2
    net.ipv6.fib_multipath_hash_policy = 2
    # sysctl net.ipv6.fib_multipath_hash_policy
    net.ipv6.fib_multipath_hash_policy = 2
    
    Fixes: d8f74f0975d8 ("ipv6: Support multipath hashing on inner IP pkts")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Stephen Suryaputra <ssuryaextr@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 263e463358d38c0f594a158791005054b2522626
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Aug 26 19:48:10 2020 +0300

    ipv4: Silence suspicious RCU usage warning
    
    [ Upstream commit 7f6f32bb7d3355cd78ebf1dece9a6ea7a0ca8158 ]
    
    fib_info_notify_update() is always called with RTNL held, but not from
    an RCU read-side critical section. This leads to the following warning
    [1] when the FIB table list is traversed with
    hlist_for_each_entry_rcu(), but without a proper lockdep expression.
    
    Since modification of the list is protected by RTNL, silence the warning
    by adding a lockdep expression which verifies RTNL is held.
    
    [1]
     =============================
     WARNING: suspicious RCU usage
     5.9.0-rc1-custom-14233-g2f26e122d62f #129 Not tainted
     -----------------------------
     net/ipv4/fib_trie.c:2124 RCU-list traversed in non-reader section!!
    
     other info that might help us debug this:
    
     rcu_scheduler_active = 2, debug_locks = 1
     1 lock held by ip/834:
      #0: ffffffff85a3b6b0 (rtnl_mutex){+.+.}-{3:3}, at: rtnetlink_rcv_msg+0x49a/0xbd0
    
     stack backtrace:
     CPU: 0 PID: 834 Comm: ip Not tainted 5.9.0-rc1-custom-14233-g2f26e122d62f #129
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-2.fc32 04/01/2014
     Call Trace:
      dump_stack+0x100/0x184
      lockdep_rcu_suspicious+0x143/0x14d
      fib_info_notify_update+0x8d1/0xa60
      __nexthop_replace_notify+0xd2/0x290
      rtm_new_nexthop+0x35e2/0x5946
      rtnetlink_rcv_msg+0x4f7/0xbd0
      netlink_rcv_skb+0x17a/0x480
      rtnetlink_rcv+0x22/0x30
      netlink_unicast+0x5ae/0x890
      netlink_sendmsg+0x98a/0xf40
      ____sys_sendmsg+0x879/0xa00
      ___sys_sendmsg+0x122/0x190
      __sys_sendmsg+0x103/0x1d0
      __x64_sys_sendmsg+0x7d/0xb0
      do_syscall_64+0x32/0x50
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7fde28c3be57
     Code: 0c 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51
    c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10
    RSP: 002b:00007ffc09330028 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fde28c3be57
    RDX: 0000000000000000 RSI: 00007ffc09330090 RDI: 0000000000000003
    RBP: 000000005f45f911 R08: 0000000000000001 R09: 00007ffc0933012c
    R10: 0000000000000076 R11: 0000000000000246 R12: 0000000000000001
    R13: 00007ffc09330290 R14: 00007ffc09330eee R15: 00005610e48ed020
    
    Fixes: 1bff1a0c9bbd ("ipv4: Add function to send route updates")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
