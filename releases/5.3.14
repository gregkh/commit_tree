commit b8e167066e85c9e1e9c5d27b82a858d96e6ba22c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 29 10:08:31 2019 +0100

    Linux 5.3.14

commit 0815f75f90178bc7e1933cf0d0c818b5f3f5a20c
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Nov 13 21:05:44 2019 +1100

    KVM: PPC: Book3S HV: Flush link stack on guest exit to host kernel
    
    commit af2e8c68b9c5403f77096969c516f742f5bb29e0 upstream.
    
    On some systems that are vulnerable to Spectre v2, it is up to
    software to flush the link stack (return address stack), in order to
    protect against Spectre-RSB.
    
    When exiting from a guest we do some house keeping and then
    potentially exit to C code which is several stack frames deep in the
    host kernel. We will then execute a series of returns without
    preceeding calls, opening up the possiblity that the guest could have
    poisoned the link stack, and direct speculative execution of the host
    to a gadget of some sort.
    
    To prevent this we add a flush of the link stack on exit from a guest.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1aa3c8004692e4059e1faa30e438bec8af9b9c6
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Nov 13 21:05:41 2019 +1100

    powerpc/book3s64: Fix link stack flush on context switch
    
    commit 39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad upstream.
    
    In commit ee13cb249fab ("powerpc/64s: Add support for software count
    cache flush"), I added support for software to flush the count
    cache (indirect branch cache) on context switch if firmware told us
    that was the required mitigation for Spectre v2.
    
    As part of that code we also added a software flush of the link
    stack (return address stack), which protects against Spectre-RSB
    between user processes.
    
    That is all correct for CPUs that activate that mitigation, which is
    currently Power9 Nimbus DD2.3.
    
    What I got wrong is that on older CPUs, where firmware has disabled
    the count cache, we also need to flush the link stack on context
    switch.
    
    To fix it we create a new feature bit which is not set by firmware,
    which tells us we need to flush the link stack. We set that when
    firmware tells us that either of the existing Spectre v2 mitigations
    are enabled.
    
    Then we adjust the patching code so that if we see that feature bit we
    enable the link stack flush. If we're also told to flush the count
    cache in software then we fall through and do that also.
    
    On the older CPUs we don't need to do do the software count cache
    flush, firmware has disabled it, so in that case we patch in an early
    return after the link stack flush.
    
    The naming of some of the functions is awkward after this patch,
    because they're called "count cache" but they also do link stack. But
    we'll fix that up in a later commit to ease backporting.
    
    This is the fix for CVE-2019-18660.
    
    Reported-by: Anthony Steinhauser <asteinhauser@google.com>
    Fixes: ee13cb249fab ("powerpc/64s: Add support for software count cache flush")
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98c89fdf0aa07515dc286d5cd28c34dbfea7a7bf
Author: Christopher M. Riedl <cmr@informatik.wtf>
Date:   Thu May 23 21:46:48 2019 -0500

    powerpc/64s: support nospectre_v2 cmdline option
    
    commit d8f0e0b073e1ec52a05f0c2a56318b47387d2f10 upstream.
    
    Add support for disabling the kernel implemented spectre v2 mitigation
    (count cache flush on context switch) via the nospectre_v2 and
    mitigations=off cmdline options.
    
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Christopher M. Riedl <cmr@informatik.wtf>
    Reviewed-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190524024647.381-1-cmr@informatik.wtf
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f40e2b03896a7a7fb42c98aea41d6691e99f71fe
Author: Bernd Porr <mail@berndporr.me.uk>
Date:   Mon Nov 18 23:07:59 2019 +0000

    staging: comedi: usbduxfast: usbduxfast_ai_cmdtest rounding error
    
    commit 5618332e5b955b4bff06d0b88146b971c8dd7b32 upstream.
    
    The userspace comedilib function 'get_cmd_generic_timed' fills
    the cmd structure with an informed guess and then calls the
    function 'usbduxfast_ai_cmdtest' in this driver repeatedly while
    'usbduxfast_ai_cmdtest' is modifying the cmd struct until it
    no longer changes. However, because of rounding errors this never
    converged because 'steps = (cmd->convert_arg * 30) / 1000' and then
    back to 'cmd->convert_arg = (steps * 1000) / 30' won't be the same
    because of rounding errors. 'Steps' should only be converted back to
    the 'convert_arg' if 'steps' has actually been modified. In addition
    the case of steps being 0 wasn't checked which is also now done.
    
    Signed-off-by: Bernd Porr <mail@berndporr.me.uk>
    Cc: <stable@vger.kernel.org> # 4.4+
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20191118230759.1727-1-mail@berndporr.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b1ba8ffa28f5b1778457b59da3b5336005be28a
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Wed Nov 13 11:14:05 2019 +0100

    USB: serial: option: add support for Foxconn T77W968 LTE modules
    
    commit f0797095423e6ea3b4be61134ee353c7f504d440 upstream.
    
    These are the Foxconn-branded variants of the Dell DW5821e modules,
    same USB layout as those. The device exposes AT, NMEA and DIAG ports
    in both USB configurations.
    
    P:  Vendor=0489 ProdID=e0b4 Rev=03.18
    S:  Manufacturer=FII
    S:  Product=T77W968 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    P:  Vendor=0489 ProdID=e0b4 Rev=03.18
    S:  Manufacturer=FII
    S:  Product=T77W968 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 7 Cfg#= 2 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    [ johan: drop id defines ]
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07f212c323a32249d1bbc2955b4179626d5016a1
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Thu Nov 7 11:55:08 2019 +0100

    USB: serial: option: add support for DW5821e with eSIM support
    
    commit 957c31ea082e3fe5196f46d5b04018b10de47400 upstream.
    
    The device exposes AT, NMEA and DIAG ports in both USB configurations.
    Exactly same layout as the default DW5821e module, just a different
    vid/pid.
    
    P:  Vendor=413c ProdID=81e0 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5821e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    P:  Vendor=413c ProdID=81e0 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5821e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 7 Cfg#= 2 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d52e0bcb87903a2734b57314256f7fefa672f9ae
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 7 14:21:19 2019 +0100

    USB: serial: mos7840: fix remote wakeup
    
    commit 92fe35fb9c70a00d8fbbf5bd6172c921dd9c7815 upstream.
    
    The driver was setting the device remote-wakeup feature during probe in
    violation of the USB specification (which says it should only be set
    just prior to suspending the device). This could potentially waste
    power during suspend as well as lead to spurious wakeups.
    
    Note that USB core would clear the remote-wakeup feature at first
    resume.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dc73d2f38c9f2033956d11d1c732c099f00f957
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 7 14:21:18 2019 +0100

    USB: serial: mos7720: fix remote wakeup
    
    commit ea422312a462696093b5db59d294439796cba4ad upstream.
    
    The driver was setting the device remote-wakeup feature during probe in
    violation of the USB specification (which says it should only be set
    just prior to suspending the device). This could potentially waste
    power during suspend as well as lead to spurious wakeups.
    
    Note that USB core would clear the remote-wakeup feature at first
    resume.
    
    Fixes: 0f64478cbc7a ("USB: add USB serial mos7720 driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f398c865becc8fcb8527b4625c1b5e3f96a9842
Author: Pavel Löbl <pavel@loebl.cz>
Date:   Fri Nov 1 08:01:50 2019 +0100

    USB: serial: mos7840: add USB ID to support Moxa UPort 2210
    
    commit e696d00e65e81d46e911f24b12e441037bf11b38 upstream.
    
    Add USB ID for MOXA UPort 2210. This device contains mos7820 but
    it passes GPIO0 check implemented by driver and it's detected as
    mos7840. Hence product id check is added to force mos7820 mode.
    
    Signed-off-by: Pavel Löbl <pavel@loebl.cz>
    Cc: stable <stable@vger.kernel.org>
    [ johan: rename id defines and add vendor-id check ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 484bd6ec326b80332fa75d44f9eee9ddc0a71b80
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Nov 6 13:49:01 2019 +0100

    appledisplay: fix error handling in the scheduled work
    
    commit 91feb01596e5efc0cc922cc73f5583114dccf4d2 upstream.
    
    The work item can operate on
    
    1. stale memory left over from the last transfer
    the actual length of the data transfered needs to be checked
    2. memory already freed
    the error handling in appledisplay_probe() needs
    to cancel the work in that case
    
    Reported-and-tested-by: syzbot+495dab1f175edc9c2f13@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191106124902.7765-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3571534ea6968eac9e54c5e11f1cc3d46f4608c
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 7 15:28:55 2019 +0100

    USB: chaoskey: fix error case of a timeout
    
    commit 92aa5986f4f7b5a8bf282ca0f50967f4326559f5 upstream.
    
    In case of a timeout or if a signal aborts a read
    communication with the device needs to be ended
    lest we overwrite an active URB the next time we
    do IO to the device, as the URB may still be active.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191107142856.16774-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1c9bdbd3a3cc94c2053bfe5315f99174a59d6ff
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Nov 18 10:21:19 2019 +0100

    usb-serial: cp201x: support Mark-10 digital force gauge
    
    commit 347bc8cb26388791c5881a3775cb14a3f765a674 upstream.
    
    Add support for the Mark-10 digital force gauge device to the cp201x
    driver.
    
    Based on a report and a larger patch from Joel Jennings
    
    Reported-by: Joel Jennings <joel.jennings@makeitlabs.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191118092119.GA153852@kroah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca6ccef3edebe1a7b47a440ab1850ac737fd274b
Author: Suwan Kim <suwan.kim027@gmail.com>
Date:   Mon Nov 11 23:10:35 2019 +0900

    usbip: Fix uninitialized symbol 'nents' in stub_recv_cmd_submit()
    
    commit 2a9125317b247f2cf35c196f968906dcf062ae2d upstream.
    
    Smatch reported that nents is not initialized and used in
    stub_recv_cmd_submit(). nents is currently initialized by sgl_alloc()
    and used to allocate multiple URBs when host controller doesn't
    support scatter-gather DMA. The use of uninitialized nents means that
    buf_len is zero and use_sg is true. But buffer length should not be
    zero when an URB uses scatter-gather DMA.
    
    To prevent this situation, add the conditional that checks buf_len
    and use_sg. And move the use of nents right after the sgl_alloc() to
    avoid the use of uninitialized nents.
    
    If the error occurs, it adds SDEV_EVENT_ERROR_MALLOC and stub_priv
    will be released by stub event handler and connection will be shut
    down.
    
    Fixes: ea44d190764b ("usbip: Implement SG support to vhci-hcd and stub driver")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suwan Kim <suwan.kim027@gmail.com>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191111141035.27788-1-suwan.kim027@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de661dc115eeb807a8eca9c4b42358133703a3b9
Author: Hewenliang <hewenliang4@huawei.com>
Date:   Fri Oct 25 00:35:15 2019 -0400

    usbip: tools: fix fd leakage in the function of read_attr_usbip_status
    
    commit 26a4d4c00f85cb844dd11dd35e848b079c2f5e8f upstream.
    
    We should close the fd before the return of read_attr_usbip_status.
    
    Fixes: 3391ba0e2792 ("usbip: tools: Extract generic code to be shared with vudc backend")
    Signed-off-by: Hewenliang <hewenliang4@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191025043515.20053-1-hewenliang4@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8c6f0e4c3a949c0496dfb255debc9c3beb16166
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Nov 12 16:49:39 2019 +0100

    USBIP: add config dependency for SGL_ALLOC
    
    commit 1ec13abac58b6f24e32f0d3081ef4e7456e62ed8 upstream.
    
    USBIP uses lib/scatterlist.h
    Hence it needs to set CONFIG_SGL_ALLOC
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20191112154939.21217-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37984225b9aec5b4c880421d67b85939b743a8cb
Author: Alexander Potapenko <glider@google.com>
Date:   Mon Oct 14 14:11:57 2019 -0700

    mm/slub.c: init_on_free=1 should wipe freelist ptr for bulk allocations
    
    [ Upstream commit 0f181f9fbea8bc7ea2f7e13ae7f8c256b39e254c ]
    
    slab_alloc_node() already zeroed out the freelist pointer if
    init_on_free was on.  Thibaut Sautereau noticed that the same needs to
    be done for kmem_cache_alloc_bulk(), which performs the allocations
    separately.
    
    kmem_cache_alloc_bulk() is currently used in two places in the kernel,
    so this change is unlikely to have a major performance impact.
    
    SLAB doesn't require a similar change, as auto-initialization makes the
    allocator store the freelist pointers off-slab.
    
    Link: http://lkml.kernel.org/r/20191007091605.30530-1-glider@google.com
    Fixes: 6471384af2a6 ("mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options")
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Reported-by: Thibaut Sautereau <thibaut@sautereau.fr>
    Reported-by: Kees Cook <keescook@chromium.org>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d45290ca924a561a72e9a2d86cfa649c58000bf
Author: A Sun <as1033x@comcast.net>
Date:   Fri Sep 6 09:17:20 2019 -0300

    media: mceusb: fix out of bounds read in MCE receiver buffer
    
    commit e43148645d18efc3072b1ba45afaa3f385299e55 upstream.
    
    Fix multiple cases of out of bounds (OOB) read associated with
    MCE device receive/input data handling.
    
    In reference for the OOB cases below, the incoming/read (byte) data
    format when the MCE device responds to a command is:
        { cmd_prefix, subcmd, data0, data1, ... }
    where cmd_prefix are:
        MCE_CMD_PORT_SYS
        MCE_CMD_PORT_IR
    and subcmd examples are:
        MCE_RSP_GETPORTSTATUS
        MCE_RSP_EQIRNUMPORTS
        ...
    Response size dynamically depends on cmd_prefix and subcmd.
    So data0, data1, ... may or may not be present on input.
    Multiple responses may return in a single receiver buffer.
    
    The trigger condition for OOB read is typically random or
    corrupt input data that fills the mceusb receiver buffer.
    
    Case 1:
    
    mceusb_handle_command() reads data0 (var hi) and data1 (var lo)
    regardless of whether the response includes such data.
    If { cmd_prefix, subcmd } is at the end of the receiver buffer,
    read past end of buffer occurs.
    
    This case was reported by
    KASAN: slab-out-of-bounds Read in mceusb_dev_recv
    https://syzkaller.appspot.com/bug?extid=c7fdb6cb36e65f2fe8c9
    
    Fix: In mceusb_handle_command(), change variable hi and lo to
    pointers, and dereference only when required.
    
    Case 2:
    
    If response with data is truncated at end of buffer after
    { cmd_prefix, subcmd }, mceusb_handle_command() reads past
    end of buffer for data0, data1, ...
    
    Fix: In mceusb_process_ir_data(), check response size with
    remaining buffer size before invoking mceusb_handle_command().
    +    if (i + ir->rem < buf_len)
                mceusb_handle_command(ir, &ir->buf_in[i - 1]);
    
    Case 3:
    
    mceusb_handle_command() handles invalid/bad response such as
    { 0x??, MCE_RSP_GETPORTSTATUS } of length 2 as a response
    { MCE_CMD_PORT_SYS, MCE_RSP_GETPORTSTATUS, data0, ... }
    of length 7. Read OOB occurs for non-existent data0, data1, ...
    Cause is mceusb_handle_command() does not check cmd_prefix value.
    
    Fix: mceusb_handle_command() must test both cmd_prefix and subcmd.
    
    Case 4:
    
    mceusb_process_ir_data() receiver parser state SUBCMD is
    possible at start (i=0) of receiver buffer resulting in buffer
    offset=-1 passed to mceusb_dev_printdata().
    Bad offset results in OOB read before start of buffer.
    
    [1214218.580308] mceusb 1-1.3:1.0: rx data[0]: 00 80 (length=2)
    [1214218.580323] mceusb 1-1.3:1.0: Unknown command 0x00 0x80
    ...
    [1214218.580406] mceusb 1-1.3:1.0: rx data[14]: 7f 7f (length=2)
    [1214218.679311] mceusb 1-1.3:1.0: rx data[-1]: 80 90 (length=2)
    [1214218.679325] mceusb 1-1.3:1.0: End of raw IR data
    [1214218.679340] mceusb 1-1.3:1.0: rx data[1]: 7f 7f (length=2)
    
    Fix: If parser_state is SUBCMD after processing receiver buffer,
    reset parser_state to CMD_HEADER.
    In effect, discard cmd_prefix at end of receiver buffer.
    In mceusb_dev_printdata(), abort if buffer offset is out of bounds.
    
    Case 5:
    
    If response with data is truncated at end of buffer after
    { cmd_prefix, subcmd }, mceusb_dev_printdata() reads past
    end of buffer for data0, data1, ...
    while decoding the response to print out.
    
    Fix: In mceusb_dev_printdata(), remove unneeded buffer offset
    adjustments (var start and var skip) associated with MCE gen1 header.
    Test for truncated MCE cmd response (compare offset+len with buf_len)
    and skip decoding of incomplete response.
    Move IR data tracing to execute before the truncation test.
    
    Signed-off-by: A Sun <as1033x@comcast.net>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4708e85a647e52f64853b6b17a4956b8a35a6cc9
Author: Sean Young <sean@mess.org>
Date:   Wed Oct 16 14:19:15 2019 -0300

    media: imon: invalid dereference in imon_touch_event
    
    commit f3f5ba42c58d56d50f539854d8cc188944e96087 upstream.
    
    The touch timer is set up in intf1. If the second interface does not exist,
    the timer and touch input device are not setup and we get the following
    error, when touch events are reported via intf0.
    
    kernel BUG at kernel/time/timer.c:956!
    invalid opcode: 0000 [#1] SMP KASAN
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.0-rc1+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__mod_timer kernel/time/timer.c:956 [inline]
    RIP: 0010:__mod_timer kernel/time/timer.c:949 [inline]
    RIP: 0010:mod_timer+0x5a2/0xb50 kernel/time/timer.c:1100
    Code: 45 10 c7 44 24 14 ff ff ff ff 48 89 44 24 08 48 8d 45 20 48 c7 44 24 18 00 00 00 00 48 89 04 24 e9 5a fc ff ff e8 ae ce 0e 00 <0f> 0b e8 a7 ce 0e 00 4c 89 74 24 20 e9 37 fe ff ff e8 98 ce 0e 00
    RSP: 0018:ffff8881db209930 EFLAGS: 00010006
    RAX: ffffffff86c2b200 RBX: 00000000ffffa688 RCX: ffffffff83efc583
    RDX: 0000000000000100 RSI: ffffffff812f4d82 RDI: ffff8881d2356200
    RBP: ffff8881d23561e8 R08: ffffffff86c2b200 R09: ffffed103a46abeb
    R10: ffffed103a46abea R11: ffff8881d2355f53 R12: dffffc0000000000
    R13: 1ffff1103b64132d R14: ffff8881d2355f50 R15: 0000000000000006
    FS:  0000000000000000(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f75e2799000 CR3: 00000001d3b07000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     imon_touch_event drivers/media/rc/imon.c:1348 [inline]
     imon_incoming_packet.isra.0+0x2546/0x2f10 drivers/media/rc/imon.c:1603
     usb_rx_callback_intf0+0x151/0x1e0 drivers/media/rc/imon.c:1734
     __usb_hcd_giveback_urb+0x1f2/0x470 drivers/usb/core/hcd.c:1654
     usb_hcd_giveback_urb+0x368/0x420 drivers/usb/core/hcd.c:1719
     dummy_timer+0x120f/0x2fa2 drivers/usb/gadget/udc/dummy_hcd.c:1965
     call_timer_fn+0x179/0x650 kernel/time/timer.c:1404
     expire_timers kernel/time/timer.c:1449 [inline]
     __run_timers kernel/time/timer.c:1773 [inline]
     __run_timers kernel/time/timer.c:1740 [inline]
     run_timer_softirq+0x5e3/0x1490 kernel/time/timer.c:1786
     __do_softirq+0x221/0x912 kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0x178/0x1a0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x12f/0x500 arch/x86/kernel/apic/apic.c:1137
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     </IRQ>
    RIP: 0010:default_idle+0x28/0x2e0 arch/x86/kernel/process.c:581
    Code: 90 90 41 56 41 55 65 44 8b 2d 44 3a 8f 7a 41 54 55 53 0f 1f 44 00 00 e8 36 ee d0 fb e9 07 00 00 00 0f 00 2d fa dd 4f 00 fb f4 <65> 44 8b 2d 20 3a 8f 7a 0f 1f 44 00 00 5b 5d 41 5c 41 5d 41 5e c3
    RSP: 0018:ffffffff86c07da8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13
    RAX: 0000000000000007 RBX: ffffffff86c2b200 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: 0000000000000006 RDI: ffffffff86c2ba4c
    RBP: fffffbfff0d85640 R08: ffffffff86c2b200 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x3b6/0x500 kernel/sched/idle.c:263
     cpu_startup_entry+0x14/0x20 kernel/sched/idle.c:355
     start_kernel+0x82a/0x864 init/main.c:784
     secondary_startup_64+0xa4/0xb0 arch/x86/kernel/head_64.S:241
    Modules linked in:
    
    Reported-by: syzbot+f49d12d34f2321cf4df2@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1585873446c44396cd2673c6f05f52efd9ef1409
Author: Vito Caputo <vcaputo@pengaru.com>
Date:   Sun Oct 13 23:08:45 2019 -0300

    media: cxusb: detect cxusb_ctrl_msg error in query
    
    commit ca8f245f284eeffa56f3b7a5eb6fc503159ee028 upstream.
    
    Don't use uninitialized ircode[] in cxusb_rc_query() when
    cxusb_ctrl_msg() fails to populate its contents.
    
    syzbot reported:
    
    dvb-usb: bulk message failed: -22 (1/-30591)
    =====================================================
    BUG: KMSAN: uninit-value in ir_lookup_by_scancode drivers/media/rc/rc-main.c:494 [inline]
    BUG: KMSAN: uninit-value in rc_g_keycode_from_table drivers/media/rc/rc-main.c:582 [inline]
    BUG: KMSAN: uninit-value in rc_keydown+0x1a6/0x6f0 drivers/media/rc/rc-main.c:816
    CPU: 1 PID: 11436 Comm: kworker/1:2 Not tainted 5.3.0-rc7+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events dvb_usb_read_remote_control
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x191/0x1f0 lib/dump_stack.c:113
     kmsan_report+0x13a/0x2b0 mm/kmsan/kmsan_report.c:108
     __msan_warning+0x73/0xe0 mm/kmsan/kmsan_instr.c:250
     bsearch+0x1dd/0x250 lib/bsearch.c:41
     ir_lookup_by_scancode drivers/media/rc/rc-main.c:494 [inline]
     rc_g_keycode_from_table drivers/media/rc/rc-main.c:582 [inline]
     rc_keydown+0x1a6/0x6f0 drivers/media/rc/rc-main.c:816
     cxusb_rc_query+0x2e1/0x360 drivers/media/usb/dvb-usb/cxusb.c:548
     dvb_usb_read_remote_control+0xf9/0x290 drivers/media/usb/dvb-usb/dvb-usb-remote.c:261
     process_one_work+0x1572/0x1ef0 kernel/workqueue.c:2269
     worker_thread+0x111b/0x2460 kernel/workqueue.c:2415
     kthread+0x4b5/0x4f0 kernel/kthread.c:256
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:355
    
    Uninit was stored to memory at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:150 [inline]
     kmsan_internal_chain_origin+0xd2/0x170 mm/kmsan/kmsan.c:314
     __msan_chain_origin+0x6b/0xe0 mm/kmsan/kmsan_instr.c:184
     rc_g_keycode_from_table drivers/media/rc/rc-main.c:583 [inline]
     rc_keydown+0x2c4/0x6f0 drivers/media/rc/rc-main.c:816
     cxusb_rc_query+0x2e1/0x360 drivers/media/usb/dvb-usb/cxusb.c:548
     dvb_usb_read_remote_control+0xf9/0x290 drivers/media/usb/dvb-usb/dvb-usb-remote.c:261
     process_one_work+0x1572/0x1ef0 kernel/workqueue.c:2269
     worker_thread+0x111b/0x2460 kernel/workqueue.c:2415
     kthread+0x4b5/0x4f0 kernel/kthread.c:256
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:355
    
    Local variable description: ----ircode@cxusb_rc_query
    Variable was created at:
     cxusb_rc_query+0x4d/0x360 drivers/media/usb/dvb-usb/cxusb.c:543
     dvb_usb_read_remote_control+0xf9/0x290 drivers/media/usb/dvb-usb/dvb-usb-remote.c:261
    
    Signed-off-by: Vito Caputo <vcaputo@pengaru.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d95cd3c67604c4d38453e57182ce6135958b0da
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Jul 30 09:48:27 2019 +0200

    media: b2c2-flexcop-usb: add sanity checking
    
    commit 1b976fc6d684e3282914cdbe7a8d68fdce19095c upstream.
    
    The driver needs an isochronous endpoint to be present. It will
    oops in its absence. Add checking for it.
    
    Reported-by: syzbot+d93dff37e6a89431c158@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b631bf37670a4c19cd83094d2bda72898af0739
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Mon Jul 29 23:14:55 2019 -0300

    media: uvcvideo: Fix error path in control parsing failure
    
    commit 8c279e9394cade640ed86ec6c6645a0e7df5e0b6 upstream.
    
    When parsing the UVC control descriptors fails, the error path tries to
    cleanup a media device that hasn't been initialised, potentially
    resulting in a crash. Fix this by initialising the media device before
    the error handling path can be reached.
    
    Fixes: 5a254d751e52 ("[media] uvcvideo: Register a v4l2_device")
    Reported-by: syzbot+c86454eb3af9e8a4da20@syzkaller.appspotmail.com
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a3de368a08f3469d638162a064720bbc1a7d684
Author: Kai Shen <shenkai8@huawei.com>
Date:   Thu Nov 7 05:08:17 2019 +0000

    cpufreq: Add NULL checks to show() and store() methods of cpufreq
    
    commit e6e8df07268c1f75dd9215536e2ce4587b70f977 upstream.
    
    Add NULL checks to show() and store() in cpufreq.c to avoid attempts
    to invoke a NULL callback.
    
    Though some interfaces of cpufreq are set as read-only, users can
    still get write permission using chmod which can lead to a kernel
    crash, as follows:
    
    chmod +w /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    echo 1 >  /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    
    This bug was found in linux 4.19.
    
    Signed-off-by: Kai Shen <shenkai8@huawei.com>
    Reported-by: Feilong Lin <linfeilong@huawei.com>
    Reviewed-by: Feilong Lin <linfeilong@huawei.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    [ rjw: Subject & changelog ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd2596582ef47738a33b4b0f986d622ae57c14ad
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 7 12:09:53 2019 -0300

    media: usbvision: Fix races among open, close, and disconnect
    
    commit 9e08117c9d4efc1e1bc6fce83dab856d9fd284b6 upstream.
    
    Visual inspection of the usbvision driver shows that it suffers from
    three races between its open, close, and disconnect handlers.  In
    particular, the driver is careful to update its usbvision->user and
    usbvision->remove_pending flags while holding the private mutex, but:
    
            usbvision_v4l2_close() and usbvision_radio_close() don't hold
            the mutex while they check the value of
            usbvision->remove_pending;
    
            usbvision_disconnect() doesn't hold the mutex while checking
            the value of usbvision->user; and
    
            also, usbvision_v4l2_open() and usbvision_radio_open() don't
            check whether the device has been unplugged before allowing
            the user to open the device files.
    
    Each of these can potentially lead to usbvision_release() being called
    twice and use-after-free errors.
    
    This patch fixes the races by reading the flags while the mutex is
    still held and checking for pending removes before allowing an open to
    succeed.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 174506b07751ec473b459bf64f16ed2130b87c58
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 7 12:09:04 2019 -0300

    media: usbvision: Fix invalid accesses after device disconnect
    
    commit c7a191464078262bf799136317c95824e26a222b upstream.
    
    The syzbot fuzzer found two invalid-access bugs in the usbvision
    driver.  These bugs occur when userspace keeps the device file open
    after the device has been disconnected and usbvision_disconnect() has
    set usbvision->dev to NULL:
    
            When the device file is closed, usbvision_radio_close() tries
            to issue a usb_set_interface() call, passing the NULL pointer
            as its first argument.
    
            If userspace performs a querycap ioctl call, vidioc_querycap()
            calls usb_make_path() with the same NULL pointer.
    
    This patch fixes the problems by making the appropriate tests
    beforehand.  Note that vidioc_querycap() is protected by
    usbvision->v4l2_lock, acquired in a higher layer of the V4L2
    subsystem.
    
    Reported-and-tested-by: syzbot+7fa38a608b1075dfd634@syzkaller.appspotmail.com
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a4e19eda94331c4d44cff7e2dac825957b45216
Author: Alexander Popov <alex.popov@linux.com>
Date:   Sun Nov 3 23:17:19 2019 +0100

    media: vivid: Fix wrong locking that causes race conditions on streaming stop
    
    commit 6dcd5d7a7a29c1e4b8016a06aed78cd650cd8c27 upstream.
    
    There is the same incorrect approach to locking implemented in
    vivid_stop_generating_vid_cap(), vivid_stop_generating_vid_out() and
    sdr_cap_stop_streaming().
    
    These functions are called during streaming stopping with vivid_dev.mutex
    locked. And they all do the same mistake while stopping their kthreads,
    which need to lock this mutex as well. See the example from
    vivid_stop_generating_vid_cap():
      /* shutdown control thread */
      vivid_grab_controls(dev, false);
      mutex_unlock(&dev->mutex);
      kthread_stop(dev->kthread_vid_cap);
      dev->kthread_vid_cap = NULL;
      mutex_lock(&dev->mutex);
    
    But when this mutex is unlocked, another vb2_fop_read() can lock it
    instead of vivid_thread_vid_cap() and manipulate the buffer queue.
    That causes a use-after-free access later.
    
    To fix those issues let's:
      1. avoid unlocking the mutex in vivid_stop_generating_vid_cap(),
    vivid_stop_generating_vid_out() and sdr_cap_stop_streaming();
      2. use mutex_trylock() with schedule_timeout_uninterruptible() in
    the loops of the vivid kthread handlers.
    
    Signed-off-by: Alexander Popov <alex.popov@linux.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Tested-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v3.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b9e9557ff76e6cdd1b803381f46100d958ae771
Author: Vandana BN <bnvandana@gmail.com>
Date:   Mon Sep 9 06:43:31 2019 -0300

    media: vivid: Set vid_cap_streaming and vid_out_streaming to true
    
    commit b4add02d2236fd5f568db141cfd8eb4290972eb3 upstream.
    
    When vbi stream is started, followed by video streaming,
    the vid_cap_streaming and vid_out_streaming were not being set to true,
    which would cause the video stream to stop when vbi stream is stopped.
    This patch allows to set vid_cap_streaming and vid_out_streaming to true.
    According to Hans Verkuil it appears that these 'if (dev->kthread_vid_cap)'
    checks are a left-over from the original vivid development and should never
    have been there.
    
    Signed-off-by: Vandana BN <bnvandana@gmail.com>
    Cc: <stable@vger.kernel.org>      # for v3.18 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a08d2c04c8052c9c694efbc4d71b21aff5332b0e
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 21 11:37:10 2019 +0100

    nfc: port100: handle command failure cleanly
    
    commit 5f9f0b11f0816b35867f2cf71e54d95f53f03902 upstream.
    
    If starting the transfer of a command suceeds but the transfer for the reply
    fails, it is not enough to initiate killing the transfer for the
    command may still be running. You need to wait for the killing to finish
    before you can reuse URB and buffer.
    
    Reported-and-tested-by: syzbot+711468aa5c3a1eabf863@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4efdac536c8788cab879153e57218d897f19b7a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 22 12:28:40 2019 +0100

    ALSA: usb-audio: Fix NULL dereference at parsing BADD
    
    commit 9435f2bb66874a0c4dd25e7c978957a7ca2c93b1 upstream.
    
    snd_usb_mixer_controls_badd() that parses UAC3 BADD profiles misses a
    NULL check for the given interfaces.  When a malformed USB descriptor
    is passed, this may lead to an Oops, as spotted by syzkaller.
    Skip the iteration if the interface doesn't exist for avoiding the
    crash.
    
    Fixes: 17156f23e93c ("ALSA: usb: add UAC3 BADD profiles support")
    Reported-by: syzbot+a36ab65c6653d7ccdd62@syzkaller.appspotmail.com
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191122112840.24797-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c60b44d8ba9d62c2693d2692f118177f212b1a8
Author: Yang Tao <yang.tao172@zte.com.cn>
Date:   Wed Nov 6 22:55:35 2019 +0100

    futex: Prevent robust futex exit race
    
    commit ca16d5bee59807bf04deaab0a8eccecd5061528c upstream.
    
    Robust futexes utilize the robust_list mechanism to allow the kernel to
    release futexes which are held when a task exits. The exit can be voluntary
    or caused by a signal or fault. This prevents that waiters block forever.
    
    The futex operations in user space store a pointer to the futex they are
    either locking or unlocking in the op_pending member of the per task robust
    list.
    
    After a lock operation has succeeded the futex is queued in the robust list
    linked list and the op_pending pointer is cleared.
    
    After an unlock operation has succeeded the futex is removed from the
    robust list linked list and the op_pending pointer is cleared.
    
    The robust list exit code checks for the pending operation and any futex
    which is queued in the linked list. It carefully checks whether the futex
    value is the TID of the exiting task. If so, it sets the OWNER_DIED bit and
    tries to wake up a potential waiter.
    
    This is race free for the lock operation but unlock has two race scenarios
    where waiters might not be woken up. These issues can be observed with
    regular robust pthread mutexes. PI aware pthread mutexes are not affected.
    
    (1) Unlocking task is killed after unlocking the futex value in user space
        before being able to wake a waiter.
    
            pthread_mutex_unlock()
                    |
                    V
            atomic_exchange_rel (&mutex->__data.__lock, 0)
                            <------------------------killed
                lll_futex_wake ()                   |
                                                    |
                                                    |(__lock = 0)
                                                    |(enter kernel)
                                                    |
                                                    V
                                                do_exit()
                                                exit_mm()
                                              mm_release()
                                            exit_robust_list()
                                            handle_futex_death()
                                                    |
                                                    |(__lock = 0)
                                                    |(uval = 0)
                                                    |
                                                    V
            if ((uval & FUTEX_TID_MASK) != task_pid_vnr(curr))
                    return 0;
    
        The sanity check which ensures that the user space futex is owned by
        the exiting task prevents the wakeup of waiters which in consequence
        block infinitely.
    
    (2) Waiting task is killed after a wakeup and before it can acquire the
        futex in user space.
    
            OWNER                         WAITER
                                    futex_wait()
       pthread_mutex_unlock()               |
                    |                       |
                    |(__lock = 0)           |
                    |                       |
                    V                       |
             futex_wake() ------------>  wakeup()
                                            |
                                            |(return to userspace)
                                            |(__lock = 0)
                                            |
                                            V
                            oldval = mutex->__data.__lock
                                              <-----------------killed
        atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,  |
                            id | assume_other_futex_waiters, 0)      |
                                                                     |
                                                                     |
                                                       (enter kernel)|
                                                                     |
                                                                     V
                                                             do_exit()
                                                            |
                                                            |
                                                            V
                                            handle_futex_death()
                                            |
                                            |(__lock = 0)
                                            |(uval = 0)
                                            |
                                            V
            if ((uval & FUTEX_TID_MASK) != task_pid_vnr(curr))
                    return 0;
    
        The sanity check which ensures that the user space futex is owned
        by the exiting task prevents the wakeup of waiters, which seems to
        be correct as the exiting task does not own the futex value, but
        the consequence is that other waiters wont be woken up and block
        infinitely.
    
    In both scenarios the following conditions are true:
    
       - task->robust_list->list_op_pending != NULL
       - user space futex value == 0
       - Regular futex (not PI)
    
    If these conditions are met then it is reasonably safe to wake up a
    potential waiter in order to prevent the above problems.
    
    As this might be a false positive it can cause spurious wakeups, but the
    waiter side has to handle other types of unrelated wakeups, e.g. signals
    gracefully anyway. So such a spurious wakeup will not affect the
    correctness of these operations.
    
    This workaround must not touch the user space futex value and cannot set
    the OWNER_DIED bit because the lock value is 0, i.e. uncontended. Setting
    OWNER_DIED in this case would result in inconsistent state and subsequently
    in malfunction of the owner died handling in user space.
    
    The rest of the user space state is still consistent as no other task can
    observe the list_op_pending entry in the exiting tasks robust list.
    
    The eventually woken up waiter will observe the uncontended lock value and
    take it over.
    
    [ tglx: Massaged changelog and comment. Made the return explicit and not
            depend on the subsequent check and added constants to hand into
            handle_futex_death() instead of plain numbers. Fixed a few coding
            style issues. ]
    
    Fixes: 0771dfefc9e5 ("[PATCH] lightweight robust futexes: core")
    Signed-off-by: Yang Tao <yang.tao172@zte.com.cn>
    Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1573010582-35297-1-git-send-email-wang.yi59@zte.com.cn
    Link: https://lkml.kernel.org/r/20191106224555.943191378@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e5a79d36dc2f99a4c743c0fc1cf1970cb2fc1e2
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Nov 24 08:50:03 2019 -0800

    x86/entry/32: Fix FIXUP_ESPFIX_STACK with user CR3
    
    commit 4a13b0e3e10996b9aa0b45a764ecfe49f6fcd360 upstream.
    
    UNWIND_ESPFIX_STACK needs to read the GDT, and the GDT mapping that
    can be accessed via %fs is not mapped in the user pagetables.  Use
    SGDT to find the cpu_entry_area mapping and read the espfix offset
    from that instead.
    
    Reported-and-tested-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 451806040beeceeeca4e7e92853f812d98a52c38
Author: Ingo Molnar <mingo@kernel.org>
Date:   Sun Nov 24 11:21:44 2019 +0100

    x86/pti/32: Calculate the various PTI cpu_entry_area sizes correctly, make the CPU_ENTRY_AREA_PAGES assert precise
    
    commit 05b042a1944322844eaae7ea596d5f154166d68a upstream.
    
    When two recent commits that increased the size of the 'struct cpu_entry_area'
    were merged in -tip, the 32-bit defconfig build started failing on the following
    build time assert:
    
      ./include/linux/compiler.h:391:38: error: call to ‘__compiletime_assert_189’ declared with attribute error: BUILD_BUG_ON failed: CPU_ENTRY_AREA_PAGES * PAGE_SIZE < CPU_ENTRY_AREA_MAP_SIZE
      arch/x86/mm/cpu_entry_area.c:189:2: note: in expansion of macro ‘BUILD_BUG_ON’
      In function ‘setup_cpu_entry_area_ptes’,
    
    Which corresponds to the following build time assert:
    
            BUILD_BUG_ON(CPU_ENTRY_AREA_PAGES * PAGE_SIZE < CPU_ENTRY_AREA_MAP_SIZE);
    
    The purpose of this assert is to sanity check the fixed-value definition of
    CPU_ENTRY_AREA_PAGES arch/x86/include/asm/pgtable_32_types.h:
    
            #define CPU_ENTRY_AREA_PAGES    (NR_CPUS * 41)
    
    The '41' is supposed to match sizeof(struct cpu_entry_area)/PAGE_SIZE, which value
    we didn't want to define in such a low level header, because it would cause
    dependency hell.
    
    Every time the size of cpu_entry_area is changed, we have to adjust CPU_ENTRY_AREA_PAGES
    accordingly - and this assert is checking that constraint.
    
    But the assert is both imprecise and buggy, primarily because it doesn't
    include the single readonly IDT page that is mapped at CPU_ENTRY_AREA_BASE
    (which begins at a PMD boundary).
    
    This bug was hidden by the fact that by accident CPU_ENTRY_AREA_PAGES is defined
    too large upstream (v5.4-rc8):
    
            #define CPU_ENTRY_AREA_PAGES    (NR_CPUS * 40)
    
    While 'struct cpu_entry_area' is 155648 bytes, or 38 pages. So we had two extra
    pages, which hid the bug.
    
    The following commit (not yet upstream) increased the size to 40 pages:
    
      x86/iopl: ("Restrict iopl() permission scope")
    
    ... but increased CPU_ENTRY_AREA_PAGES only 41 - i.e. shortening the gap
    to just 1 extra page.
    
    Then another not-yet-upstream commit changed the size again:
    
      880a98c33996: ("x86/cpu_entry_area: Add guard page for entry stack on 32bit")
    
    Which increased the cpu_entry_area size from 38 to 39 pages, but
    didn't change CPU_ENTRY_AREA_PAGES (kept it at 40). This worked
    fine, because we still had a page left from the accidental 'reserve'.
    
    But when these two commits were merged into the same tree, the
    combined size of cpu_entry_area grew from 38 to 40 pages, while
    CPU_ENTRY_AREA_PAGES finally caught up to 40 as well.
    
    Which is fine in terms of functionality, but the assert broke:
    
            BUILD_BUG_ON(CPU_ENTRY_AREA_PAGES * PAGE_SIZE < CPU_ENTRY_AREA_MAP_SIZE);
    
    because CPU_ENTRY_AREA_MAP_SIZE is the total size of the area,
    which is 1 page larger due to the IDT page.
    
    To fix all this, change the assert to two precise asserts:
    
            BUILD_BUG_ON((CPU_ENTRY_AREA_PAGES+1)*PAGE_SIZE != CPU_ENTRY_AREA_MAP_SIZE);
            BUILD_BUG_ON(CPU_ENTRY_AREA_TOTAL_SIZE != CPU_ENTRY_AREA_MAP_SIZE);
    
    This takes the IDT page into account, and also connects the size-based
    define of CPU_ENTRY_AREA_TOTAL_SIZE with the address-subtraction based
    define of CPU_ENTRY_AREA_MAP_SIZE.
    
    Also clean up some of the names which made it rather confusing:
    
     - 'CPU_ENTRY_AREA_TOT_SIZE' wasn't actually the 'total' size of
       the cpu-entry-area, but the per-cpu array size, so rename this
       to CPU_ENTRY_AREA_ARRAY_SIZE.
    
     - Introduce CPU_ENTRY_AREA_TOTAL_SIZE that _is_ the total mapping
       size, with the IDT included.
    
     - Add comments where '+1' denotes the IDT mapping - it wasn't
       obvious and took me about 3 hours to decode...
    
    Finally, because this particular commit is actually applied after
    this patch:
    
      880a98c33996: ("x86/cpu_entry_area: Add guard page for entry stack on 32bit")
    
    Fix the CPU_ENTRY_AREA_PAGES value from 40 pages to the correct 39 pages.
    
    All future commits that change cpu_entry_area will have to adjust
    this value precisely.
    
    As a side note, we should probably attempt to remove CPU_ENTRY_AREA_PAGES
    and derive its value directly from the structure, without causing
    header hell - but that is an adventure for another day! :-)
    
    Fixes: 880a98c33996: ("x86/cpu_entry_area: Add guard page for entry stack on 32bit")
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4a847f2721920093d89d3b17c48988fc8ce9353
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 11:58:32 2019 -0800

    selftests/x86/sigreturn/32: Invalidate DS and ES when abusing the kernel
    
    commit 4d2fa82d98d2d296043a04eb517d7dbade5b13b8 upstream.
    
    If the kernel accidentally uses DS or ES while the user values are
    loaded, it will work fine for sane userspace.  In the interest of
    simulating maximally insane userspace, make sigreturn_32 zero out DS
    and ES for the nasty parts so that inadvertent use of these segments
    will crash.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d99448d1b86fc34413cc6f2cec8d32321ba76bd
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 12:59:13 2019 -0800

    selftests/x86/mov_ss_trap: Fix the SYSENTER test
    
    commit 8caa016bfc129f2c925d52da43022171d1d1de91 upstream.
    
    For reasons that I haven't quite fully diagnosed, running
    mov_ss_trap_32 on a 32-bit kernel results in an infinite loop in
    userspace.  This appears to be because the hacky SYSENTER test
    doesn't segfault as desired; instead it corrupts the program state
    such that it infinite loops.
    
    Fix it by explicitly clearing EBP before doing SYSENTER.  This will
    give a more reliable segfault.
    
    Fixes: 59c2a7226fc5 ("x86/selftests: Add mov_to_ss test")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25a997e3db80a803aba030579c54f2702194a6d3
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 20 15:02:26 2019 +0100

    x86/entry/32: Fix NMI vs ESPFIX
    
    commit 895429076512e9d1cf5428181076299c90713159 upstream.
    
    When the NMI lands on an ESPFIX_SS, we are on the entry stack and must
    swizzle, otherwise we'll run do_nmi() on the entry stack, which is
    BAD.
    
    Also, similar to the normal exception path, we need to correct the
    ESPFIX magic before leaving the entry stack, otherwise pt_regs will
    present a non-flat stack pointer.
    
    Tested by running sigreturn_32 concurrent with perf-record.
    
    Fixes: e5862d0515ad ("x86/entry/32: Leave the kernel via trampoline stack")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7f55f897d234b3df8a155a013191e5f73d39a35
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 10:10:49 2019 +0100

    x86/entry/32: Unwind the ESPFIX stack earlier on exception entry
    
    commit a1a338e5b6fe9e0a39c57c232dc96c198bb53e47 upstream.
    
    Right now, we do some fancy parts of the exception entry path while SS
    might have a nonzero base: we fill in regs->ss and regs->sp, and we
    consider switching to the kernel stack. This results in regs->ss and
    regs->sp referring to a non-flat stack and it may result in
    overflowing the entry stack. The former issue means that we can try to
    call iret_exc on a non-flat stack, which doesn't work.
    
    Tested with selftests/x86/sigreturn_32.
    
    Fixes: 45d7b255747c ("x86/entry/32: Enter the kernel via trampoline stack")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2cf493d6dd34881df90aec1289c650b0165ff7e
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 09:56:36 2019 +0100

    x86/entry/32: Move FIXUP_FRAME after pushing %fs in SAVE_ALL
    
    commit 82cb8a0b1d8d07817b5d59f7fa1438e1fceafab2 upstream.
    
    This will allow us to get percpu access working before FIXUP_FRAME,
    which will allow us to unwind ESPFIX earlier.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a34640a8accae8f0fd7f1e1622fbf1d39149119f
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Nov 20 09:49:33 2019 +0100

    x86/entry/32: Use %ss segment where required
    
    commit 4c4fd55d3d59a41ddfa6ecba7e76928921759f43 upstream.
    
    When re-building the IRET frame we use %eax as an destination %esp,
    make sure to then also match the segment for when there is a nonzero
    SS base (ESPFIX).
    
    [peterz: Changelog and minor edits]
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 087ce8e8b0477564ef8549ca59efbbf0c918929d
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 20 13:05:06 2019 +0100

    x86/entry/32: Fix IRET exception
    
    commit 40ad2199580e248dce2a2ebb722854180c334b9e upstream.
    
    As reported by Lai, the commit 3c88c692c287 ("x86/stackframe/32:
    Provide consistent pt_regs") wrecked the IRET EXTABLE entry by making
    .Lirq_return not point at IRET.
    
    Fix this by placing IRET_FRAME in RESTORE_REGS, to mirror how
    FIXUP_FRAME is part of SAVE_ALL.
    
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Reported-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df0b94fb0696a6f507cd493f1574fc058b5d095c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 21 00:40:24 2019 +0100

    x86/cpu_entry_area: Add guard page for entry stack on 32bit
    
    commit 880a98c339961eaa074393e3a2117cbe9125b8bb upstream.
    
    The entry stack in the cpu entry area is protected against overflow by the
    readonly GDT on 64-bit, but on 32-bit the GDT needs to be writeable and
    therefore does not trigger a fault on stack overflow.
    
    Add a guard page.
    
    Fixes: c482feefe1ae ("x86/entry/64: Make cpu_entry_area.tss read-only")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7518035301de19eab2e44ec0bfed31d3db7d7128
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 21 00:40:23 2019 +0100

    x86/pti/32: Size initial_page_table correctly
    
    commit f490e07c53d66045d9d739e134145ec9b38653d3 upstream.
    
    Commit 945fd17ab6ba ("x86/cpu_entry_area: Sync cpu_entry_area to
    initial_page_table") introduced the sync for the initial page table for
    32bit.
    
    sync_initial_page_table() uses clone_pgd_range() which does the update for
    the kernel page table. If PTI is enabled it also updates the user space
    page table counterpart, which is assumed to be in the next page after the
    target PGD.
    
    At this point in time 32-bit did not have PTI support, so the user space
    page table update was not taking place.
    
    The support for PTI on 32-bit which was introduced later on, did not take
    that into account and missed to add the user space counter part for the
    initial page table.
    
    As a consequence sync_initial_page_table() overwrites any data which is
    located in the page behing initial_page_table causing random failures,
    e.g. by corrupting doublefault_tss and wreckaging the doublefault handler
    on 32bit.
    
    Fix it by adding a "user" page table right after initial_page_table.
    
    Fixes: 7757d607c6b3 ("x86/pti: Allow CONFIG_PAGE_TABLE_ISOLATION for x86_32")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ecf73fc147fdcddfc0cb1efb37190b2bbcae2c3
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Nov 21 11:50:12 2019 +0100

    x86/doublefault/32: Fix stack canaries in the double fault handler
    
    commit 3580d0b29cab08483f84a16ce6a1151a1013695f upstream.
    
    The double fault TSS was missing GS setup, which is needed for stack
    canaries to work.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 238e5e0984c53e759d1cd908f94113e175db0aca
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Nov 11 15:32:59 2019 +0100

    x86/xen/32: Simplify ring check in xen_iret_crit_fixup()
    
    commit 922eea2ce5c799228d9ff1be9890e6873ce8fff6 upstream.
    
    This can be had with two instead of six insns, by just checking the high
    CS.RPL bit.
    
    Also adjust the comment - there would be no #GP in the mentioned cases, as
    there's no segment limit violation or alike. Instead there'd be #PF, but
    that one reports the target EIP of said branch, not the address of the
    branch insn itself.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lkml.kernel.org/r/a5986837-01eb-7bf8-bf42-4d3084d6a1f5@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5be31d632d75c4c81c5d9fef0c5c3fde42e74715
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Nov 11 15:32:12 2019 +0100

    x86/xen/32: Make xen_iret_crit_fixup() independent of frame layout
    
    commit 29b810f5a5ec127d3143770098e05981baa3eb77 upstream.
    
    Now that SS:ESP always get saved by SAVE_ALL, this also needs to be
    accounted for in xen_iret_crit_fixup(). Otherwise the old_ax value gets
    interpreted as EFLAGS, and hence VM86 mode appears to be active all the
    time, leading to random "vm86_32: no user_vm86: BAD" log messages alongside
    processes randomly crashing.
    
    Since following the previous model (sitting after SAVE_ALL) would further
    complicate the code _and_ retain the dependency of xen_iret_crit_fixup() on
    frame manipulations done by entry_32.S, switch things around and do the
    adjustment ahead of SAVE_ALL.
    
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: Stable Team <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/32d8713d-25a7-84ab-b74b-aa3e88abce6b@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c449a9c1298dd212e5e1cede5dd48bb8ce2a0263
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Nov 18 16:21:12 2019 +0100

    x86/stackframe/32: Repair 32-bit Xen PV
    
    commit 81ff2c37f9e5d77593928df0536d86443195fd64 upstream.
    
    Once again RPL checks have been introduced which don't account for a 32-bit
    kernel living in ring 1 when running in a PV Xen domain. The case in
    FIXUP_FRAME has been preventing boot.
    
    Adjust BUG_IF_WRONG_CR3 as well to guard against future uses of the macro
    on a code path reachable when running in PV mode under Xen; I have to admit
    that I stopped at a certain point trying to figure out whether there are
    present ones.
    
    Fixes: 3c88c692c287 ("x86/stackframe/32: Provide consistent pt_regs")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Stable Team <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/0fad341f-b7f5-f859-d55d-f0084ee7087e@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7609da8781ba261e66b8c6873b0c8a379ca3c5c4
Author: Adi Suresh <adisuresh@google.com>
Date:   Tue Nov 19 08:02:47 2019 -0800

    gve: fix dma sync bug where not all pages synced
    
    commit db96c2cb4870173ea9b08df130f1d1cc9b5dd53d upstream.
    
    The previous commit had a bug where the last page in the memory range
    could not be synced. This change fixes the behavior so that all the
    required pages are synced.
    
    Fixes: 9cfeeb576d49 ("gve: Fixes DMA synchronization")
    Signed-off-by: Adi Suresh <adisuresh@google.com>
    Reviewed-by: Catherine Sullivan <csully@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f7f699019ddc3bee6d180c0de839ee6e89945bf
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Sep 23 15:09:58 2019 -0500

    nbd: prevent memory leak
    
    commit 03bf73c315edca28f47451913177e14cd040a216 upstream.
    
    In nbd_add_socket when krealloc succeeds, if nsock's allocation fail the
    reallocted memory is leak. The correct behaviour should be assigning the
    reallocted memory to config->socks right after success.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29649ae671ec1bf2f17b529a42cf4030167e3c0e
Author: Waiman Long <longman@redhat.com>
Date:   Fri Nov 15 11:14:45 2019 -0500

    x86/speculation: Fix redundant MDS mitigation message
    
    commit cd5a2aa89e847bdda7b62029d94e95488d73f6b2 upstream.
    
    Since MDS and TAA mitigations are inter-related for processors that are
    affected by both vulnerabilities, the followiing confusing messages can
    be printed in the kernel log:
    
      MDS: Vulnerable
      MDS: Mitigation: Clear CPU buffers
    
    To avoid the first incorrect message, defer the printing of MDS
    mitigation after the TAA mitigation selection has been done. However,
    that has the side effect of printing TAA mitigation first before MDS
    mitigation.
    
     [ bp: Check box is affected/mitigations are disabled first before
       printing and massage. ]
    
    Suggested-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Mark Gross <mgross@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20191115161445.30809-3-longman@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37746ca691838bc428b855d721120228632a7036
Author: Waiman Long <longman@redhat.com>
Date:   Fri Nov 15 11:14:44 2019 -0500

    x86/speculation: Fix incorrect MDS/TAA mitigation status
    
    commit 64870ed1b12e235cfca3f6c6da75b542c973ff78 upstream.
    
    For MDS vulnerable processors with TSX support, enabling either MDS or
    TAA mitigations will enable the use of VERW to flush internal processor
    buffers at the right code path. IOW, they are either both mitigated
    or both not. However, if the command line options are inconsistent,
    the vulnerabilites sysfs files may not report the mitigation status
    correctly.
    
    For example, with only the "mds=off" option:
    
      vulnerabilities/mds:Vulnerable; SMT vulnerable
      vulnerabilities/tsx_async_abort:Mitigation: Clear CPU buffers; SMT vulnerable
    
    The mds vulnerabilities file has wrong status in this case. Similarly,
    the taa vulnerability file will be wrong with mds mitigation on, but
    taa off.
    
    Change taa_select_mitigation() to sync up the two mitigation status
    and have them turned off if both "mds=off" and "tsx_async_abort=off"
    are present.
    
    Update documentation to emphasize the fact that both "mds=off" and
    "tsx_async_abort=off" have to be specified together for processors that
    are affected by both TAA and MDS to be effective.
    
     [ bp: Massage and add kernel-parameters.txt change too. ]
    
    Fixes: 1b42f017415b ("x86/speculation/taa: Add mitigation for TSX Async Abort")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: linux-doc@vger.kernel.org
    Cc: Mark Gross <mgross@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20191115161445.30809-2-longman@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07a12cd2d5e628340c1e547076b2bccba606556c
Author: Alexander Kapshuk <alexander.kapshuk@gmail.com>
Date:   Tue Sep 24 07:46:59 2019 +0300

    x86/insn: Fix awk regexp warnings
    
    commit 700c1018b86d0d4b3f1f2d459708c0cdf42b521d upstream.
    
    gawk 5.0.1 generates the following regexp warnings:
    
      GEN      /home/sasha/torvalds/tools/objtool/arch/x86/lib/inat-tables.c
      awk: ../arch/x86/tools/gen-insn-attr-x86.awk:260: warning: regexp escape sequence `\:' is not a known regexp operator
      awk: ../arch/x86/tools/gen-insn-attr-x86.awk:350: (FILENAME=../arch/x86/lib/x86-opcode-map.txt FNR=41) warning: regexp escape sequence `\&' is  not a known regexp operator
    
    Ealier versions of gawk are not known to generate these warnings. The
    gawk manual referenced below does not list characters ':' and '&' as
    needing escaping, so 'unescape' them. See
    
      https://www.gnu.org/software/gawk/manual/html_node/Escape-Sequences.html
    
    for more info.
    
    Running diff on the output generated by the script before and after
    applying the patch reported no differences.
    
     [ bp: Massage commit message. ]
    
    [ Caught the respective tools header discrepancy. ]
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Alexander Kapshuk <alexander.kapshuk@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190924044659.3785-1-alexander.kapshuk@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99a1e28ad5ee8685c2ddd2e46ffb37a42032a362
Author: Chester Lin <clin@suse.com>
Date:   Fri Aug 30 14:30:07 2019 +0100

    ARM: 8904/1: skip nomap memblocks while finding the lowmem/highmem boundary
    
    commit 1d31999cf04c21709f72ceb17e65b54a401330da upstream.
    
    adjust_lowmem_bounds() checks every memblocks in order to find the boundary
    between lowmem and highmem. However some memblocks could be marked as NOMAP
    so they are not used by kernel, which should be skipped while calculating
    the boundary.
    
    Signed-off-by: Chester Lin <clin@suse.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a7bee130f6d12c341368415449e844856cb0781
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Nov 19 12:25:24 2019 +0100

    mdio_bus: Fix init if CONFIG_RESET_CONTROLLER=n
    
    commit 6e4ff1c94a0477598ddbe4da47530aecdb4f7dff upstream.
    
    Commit 1d4639567d97 ("mdio_bus: Fix PTR_ERR applied after initialization
    to constant") accidentally changed a check from -ENOTSUPP to -ENOSYS,
    causing failures if reset controller support is not enabled.  E.g. on
    r7s72100/rskrza1:
    
        sh-eth e8203000.ethernet: MDIO init failed: -524
        sh-eth: probe of e8203000.ethernet failed with error -524
    
    Seen on r8a7740/armadillo, r7s72100/rskrza1, and r7s9210/rza2mevb.
    
    Fixes: 1d4639567d97 ("mdio_bus: Fix PTR_ERR applied after initialization to constant")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Marek Behún <marek.behun@nic.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55bfd808414435942baf7206a85f13f9cf726f79
Author: John Pittman <jpittman@redhat.com>
Date:   Mon Nov 11 16:43:20 2019 -0800

    md/raid10: prevent access of uninitialized resync_pages offset
    
    commit 45422b704db392a6d79d07ee3e3670b11048bd53 upstream.
    
    Due to unneeded multiplication in the out_free_pages portion of
    r10buf_pool_alloc(), when using a 3-copy raid10 layout, it is
    possible to access a resync_pages offset that has not been
    initialized.  This access translates into a crash of the system
    within resync_free_pages() while passing a bad pointer to
    put_page().  Remove the multiplication, preventing access to the
    uninitialized area.
    
    Fixes: f0250618361db ("md: raid10: don't use bio's vec table to manage resync pages")
    Cc: stable@vger.kernel.org # 4.12+
    Signed-off-by: John Pittman <jpittman@redhat.com>
    Suggested-by: David Jeffery <djeffery@redhat.com>
    Reviewed-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a684de438547272c7dd4c55f835d0f66611a2f4
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Wed Nov 20 17:27:39 2019 -0500

    Revert "dm crypt: use WQ_HIGHPRI for the IO and crypt workqueues"
    
    commit f612b2132db529feac4f965f28a1b9258ea7c22b upstream.
    
    This reverts commit a1b89132dc4f61071bdeaab92ea958e0953380a1.
    
    Revert required hand-patching due to subsequent changes that were
    applied since commit a1b89132dc4f61071bdeaab92ea958e0953380a1.
    
    Requires: ed0302e83098d ("dm crypt: make workqueue names device-specific")
    Cc: stable@vger.kernel.org
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=199857
    Reported-by: Vito Caputo <vcaputo@pengaru.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de4dcb8fd95248ba09394c8f6f9d9b76259f9f84
Author: Adam Ford <aford173@gmail.com>
Date:   Wed Oct 2 06:46:26 2019 -0500

    Revert "Bluetooth: hci_ll: set operational frequency earlier"
    
    commit cef456cd354ef485f12d57000c455e83e416a2b6 upstream.
    
    As nice as it would be to update firmware faster, that patch broke
    at least two different boards, an OMAP4+WL1285 based Motorola Droid
    4, as reported by Sebasian Reichel and the Logic PD i.MX6Q +
    WL1837MOD.
    
    This reverts commit a2e02f38eff84f199c8e32359eb213f81f270047.
    
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Acked-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c690211e67f50cc8aa8a1f64762900a12f4b8fe7
Author: Denis Efremov <efremov@linux.com>
Date:   Fri Sep 27 01:56:04 2019 +0300

    ath9k_hw: fix uninitialized variable data
    
    commit 80e84f36412e0c5172447b6947068dca0d04ee82 upstream.
    
    Currently, data variable in ar9003_hw_thermo_cal_apply() could be
    uninitialized if ar9300_otp_read_word() will fail to read the value.
    Initialize data variable with 0 to prevent an undefined behavior. This
    will be enough to handle error case when ar9300_otp_read_word() fails.
    
    Fixes: 80fe43f2bbd5 ("ath9k_hw: Read and configure thermocal for AR9462")
    Cc: Rajkumar Manoharan <rmanohar@qca.qualcomm.com>
    Cc: John W. Linville <linville@tuxdriver.com>
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb211b52f576b14e12d44a57e4f7dc86145d063e
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27 upstream.
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba91e59f4fd6c910a2cf213f7bb623363d150b4f
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Jul 24 23:31:08 2019 -0700

    ath10k: Fix HOST capability QMI incompatibility
    
    commit 7165ef890a4c44cf16db66b82fd78448f4bde6ba upstream.
    
    The introduction of 768ec4c012ac ("ath10k: update HOST capability QMI
    message") served the purpose of supporting the new and extended HOST
    capability QMI message.
    
    But while the new message adds a slew of optional members it changes the
    data type of the "daemon_support" member, which means that older
    versions of the firmware will fail to decode the incoming request
    message.
    
    There is no way to detect this breakage from Linux and there's no way to
    recover from sending the wrong message (i.e. we can't just try one
    format and then fallback to the other), so a quirk is introduced in
    DeviceTree to indicate to the driver that the firmware requires the 8bit
    version of this message.
    
    Cc: stable@vger.kernel.org
    Fixes: 768ec4c012ac ("ath10k: update HOST capability qmi message")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 582523fbe21aa211743106cb448c22d84f80354d
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Fri Sep 6 23:54:23 2019 +0200

    ath10k: restore QCA9880-AR1A (v1) detection
    
    commit f8914a14623a79b73f72b2b1ee4cd9b2cb91b735 upstream.
    
    This patch restores the old behavior that read
    the chip_id on the QCA988x before resetting the
    chip. This needs to be done in this order since
    the unsupported QCA988x AR1A chips fall off the
    bus when resetted. Otherwise the next MMIO Op
    after the reset causes a BUS ERROR and panic.
    
    Cc: stable@vger.kernel.org
    Fixes: 1a7fecb766c8 ("ath10k: reset chip before reading chip_id in probe")
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf9c404f4af6d5a9cb134e69ac969c1ec747ab95
Author: Tomas Bortoli <tomasbortoli@gmail.com>
Date:   Fri Nov 1 21:42:44 2019 +0100

    Bluetooth: Fix invalid-free in bcsp_close()
    
    commit cf94da6f502d8caecabd56b194541c873c8a7a3c upstream.
    
    Syzbot reported an invalid-free that I introduced fixing a memleak.
    
    bcsp_recv() also frees bcsp->rx_skb but never nullifies its value.
    Nullify bcsp->rx_skb every time it is freed.
    
    Signed-off-by: Tomas Bortoli <tomasbortoli@gmail.com>
    Reported-by: syzbot+a0d209a4676664613e76@syzkaller.appspotmail.com
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07109f078f6650eb4c9911e429ad3ff03f8d73ae
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Nov 11 13:32:03 2019 +0000

    drm/i915/userptr: Try to acquire the page lock around set_page_dirty()
    
    commit 2d691aeca4aecbb8d0414a777a46981a8e142b05 upstream.
    
    set_page_dirty says:
    
            For pages with a mapping this should be done under the page lock
            for the benefit of asynchronous memory errors who prefer a
            consistent dirty state. This rule can be broken in some special
            cases, but should be better not to.
    
    Under those rules, it is only safe for us to use the plain set_page_dirty
    calls for shmemfs/anonymous memory. Userptr may be used with real
    mappings and so needs to use the locked version (set_page_dirty_lock).
    
    However, following a try_to_unmap() we may want to remove the userptr and
    so call put_pages(). However, try_to_unmap() acquires the page lock and
    so we must avoid recursively locking the pages ourselves -- which means
    that we cannot safely acquire the lock around set_page_dirty(). Since we
    can't be sure of the lock, we have to risk skip dirtying the page, or
    else risk calling set_page_dirty() without a lock and so risk fs
    corruption.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203317
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=112012
    Fixes: 5cc9ed4b9a7a ("drm/i915: Introduce mapping of user pages into video memory (userptr) ioctl")
    References: cb6d7c7dc7ff ("drm/i915/userptr: Acquire the page lock around set_page_dirty()")
    References: 505a8ec7e11a ("Revert "drm/i915/userptr: Acquire the page lock around set_page_dirty()"")
    References: 6dcc693bc57f ("ext4: warn when page is dirtied without buffers")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191111133205.11590-1-chris@chris-wilson.co.uk
    (cherry picked from commit 0d4bbe3d407f79438dc4f87943db21f7134cfc65)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    (cherry picked from commit cee7fb437edcdb2f9f8affa959e274997f5dca4d)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4921b3c2a2c0d6567124b19098f1438789169474
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Nov 9 10:53:56 2019 +0000

    drm/i915/pmu: "Frequency" is reported as accumulated cycles
    
    commit add3eeed3683e2636ef524db48e1a678757c8e96 upstream.
    
    We report "frequencies" (actual-frequency, requested-frequency) as the
    number of accumulated cycles so that the average frequency over that
    period may be determined by the user. This means the units we report to
    the user are Mcycles (or just M), not MHz.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191109105356.5273-1-chris@chris-wilson.co.uk
    (cherry picked from commit e88866ef02851c88fe95a4bb97820b94b4d46f36)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    (cherry picked from commit a7d87b70d6da96c6772e50728c8b4e78e4cbfd55)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2286a987c73d4c81a90c17197a01a604e035a70f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Nov 6 19:23:49 2019 +0200

    drm/i915: Don't oops in dumb_create ioctl if we have no crtcs
    
    commit 8ac495f624a42809000255955be406f6a8a74b55 upstream.
    
    Make sure we have a crtc before probing its primary plane's
    max stride. Initially I thought we can't get this far without
    crtcs, but looks like we can via the dumb_create ioctl.
    
    Not sure if we shouldn't disable dumb buffer support entirely
    when we have no crtcs, but that would require some amount of work
    as the only thing currently being checked is dev->driver->dumb_create
    which we'd have to convert to some device specific dynamic thing.
    
    Cc: stable@vger.kernel.org
    Reported-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Fixes: aa5ca8b7421c ("drm/i915: Align dumb buffer stride to 4k to allow for gtt remapping")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191106172349.11987-1-ville.syrjala@linux.intel.com
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    (cherry picked from commit baea9ffe64200033499a4955f431e315bb807899)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    (cherry picked from commit aeec766133f99d45aad60d650de50fb382104d95)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d20b461956c8422e2ac5e4b7f4ffbdff7ac457fd
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Nov 14 15:30:39 2019 +0800

    drm/amd/powerplay: issue no PPSMC_MSG_GetCurrPkgPwr on unsupported ASICs
    
    commit 355d991cb6ff6ae76b5e28b8edae144124c730e4 upstream.
    
    Otherwise, the error message prompted will confuse user.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a8eeb1432aab5a9176f8c439475bf3cb39b787c
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Nov 15 10:21:23 2019 -0500

    drm/amdgpu: disable gfxoff on original raven
    
    commit 941a0a7945c39f36a16634bc65c2649a1b94eee1 upstream.
    
    There are still combinations of sbios and firmware that
    are not stable.
    
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=204689
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a882c0a378680802272e4b59b1ee2ca9f7435008
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Nov 14 11:39:05 2019 -0500

    drm/amdgpu: disable gfxoff when using register read interface
    
    commit c57040d333c6729ce99c2cb95061045ff84c89ea upstream.
    
    When gfxoff is enabled, accessing gfx registers via MMIO
    can lead to a hang.
    
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=205497
    Acked-by: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a13a9d70028b7594a8918838e810fbb9d03f93c
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Thu Nov 21 17:54:01 2019 -0800

    mm/ksm.c: don't WARN if page is still mapped in remove_stable_node()
    
    commit 9a63236f1ad82d71a98aa80320b6cb618fb32f44 upstream.
    
    It's possible to hit the WARN_ON_ONCE(page_mapped(page)) in
    remove_stable_node() when it races with __mmput() and squeezes in
    between ksm_exit() and exit_mmap().
    
      WARNING: CPU: 0 PID: 3295 at mm/ksm.c:888 remove_stable_node+0x10c/0x150
    
      Call Trace:
       remove_all_stable_nodes+0x12b/0x330
       run_store+0x4ef/0x7b0
       kernfs_fop_write+0x200/0x420
       vfs_write+0x154/0x450
       ksys_write+0xf9/0x1d0
       do_syscall_64+0x99/0x510
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Remove the warning as there is nothing scary going on.
    
    Link: http://lkml.kernel.org/r/20191119131850.5675-1-aryabinin@virtuozzo.com
    Fixes: cbf86cfe04a6 ("ksm: remove old stable nodes more thoroughly")
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 319c342dbbedda8ef2bfa214de432064f32e43a3
Author: David Hildenbrand <david@redhat.com>
Date:   Thu Nov 21 17:53:56 2019 -0800

    mm/memory_hotplug: don't access uninitialized memmaps in shrink_zone_span()
    
    commit 7ce700bf11b5e2cb84e4352bbdf2123a7a239c84 upstream.
    
    Let's limit shrinking to !ZONE_DEVICE so we can fix the current code.
    We should never try to touch the memmap of offline sections where we
    could have uninitialized memmaps and could trigger BUGs when calling
    page_to_nid() on poisoned pages.
    
    There is no reliable way to distinguish an uninitialized memmap from an
    initialized memmap that belongs to ZONE_DEVICE, as we don't have
    anything like SECTION_IS_ONLINE we can use similar to
    pfn_to_online_section() for !ZONE_DEVICE memory.
    
    E.g., set_zone_contiguous() similarly relies on pfn_to_online_section()
    and will therefore never set a ZONE_DEVICE zone consecutive.  Stopping
    to shrink the ZONE_DEVICE therefore results in no observable changes,
    besides /proc/zoneinfo indicating different boundaries - something we
    can totally live with.
    
    Before commit d0dc12e86b31 ("mm/memory_hotplug: optimize memory
    hotplug"), the memmap was initialized with 0 and the node with the right
    value.  So the zone might be wrong but not garbage.  After that commit,
    both the zone and the node will be garbage when touching uninitialized
    memmaps.
    
    Toshiki reported a BUG (race between delayed initialization of
    ZONE_DEVICE memmaps without holding the memory hotplug lock and
    concurrent zone shrinking).
    
      https://lkml.org/lkml/2019/11/14/1040
    
    "Iteration of create and destroy namespace causes the panic as below:
    
          kernel BUG at mm/page_alloc.c:535!
          CPU: 7 PID: 2766 Comm: ndctl Not tainted 5.4.0-rc4 #6
          Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.0-0-g63451fca13-prebuilt.qemu-project.org 04/01/2014
          RIP: 0010:set_pfnblock_flags_mask+0x95/0xf0
          Call Trace:
           memmap_init_zone_device+0x165/0x17c
           memremap_pages+0x4c1/0x540
           devm_memremap_pages+0x1d/0x60
           pmem_attach_disk+0x16b/0x600 [nd_pmem]
           nvdimm_bus_probe+0x69/0x1c0
           really_probe+0x1c2/0x3e0
           driver_probe_device+0xb4/0x100
           device_driver_attach+0x4f/0x60
           bind_store+0xc9/0x110
           kernfs_fop_write+0x116/0x190
           vfs_write+0xa5/0x1a0
           ksys_write+0x59/0xd0
           do_syscall_64+0x5b/0x180
           entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      While creating a namespace and initializing memmap, if you destroy the
      namespace and shrink the zone, it will initialize the memmap outside
      the zone and trigger VM_BUG_ON_PAGE(!zone_spans_pfn(page_zone(page),
      pfn), page) in set_pfnblock_flags_mask()."
    
    This BUG is also mitigated by this commit, where we for now stop to
    shrink the ZONE_DEVICE zone until we can do it in a safe and clean way.
    
    Link: http://lkml.kernel.org/r/20191006085646.5768-5-david@redhat.com
    Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online")      [visible after d0dc12e86b319]
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reported-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Reported-by: Toshiki Fukasawa <t-fukasawa@vx.jp.nec.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: Damian Tometzki <damian.tometzki@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Halil Pasic <pasic@linux.ibm.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: Jun Yao <yaojun8558363@gmail.com>
    Cc: Logan Gunthorpe <logang@deltatee.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: "Matthew Wilcox (Oracle)" <willy@infradead.org>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Pankaj Gupta <pagupta@redhat.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Pavel Tatashin <pavel.tatashin@microsoft.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Rich Felker <dalias@libc.org>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Steve Capper <steve.capper@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Wei Yang <richard.weiyang@gmail.com>
    Cc: Wei Yang <richardw.yang@linux.intel.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: Yu Zhao <yuzhao@google.com>
    Cc: <stable@vger.kernel.org>    [4.13+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6221301ee6084c79d5716139a7ef1b09ce343ff
Author: Joseph Qi <joseph.qi@linux.alibaba.com>
Date:   Thu Nov 21 17:53:52 2019 -0800

    Revert "fs: ocfs2: fix possible null-pointer dereferences in ocfs2_xa_prepare_entry()"
    
    commit 94b07b6f9e2e996afff7395de6b35f34f4cb10bf upstream.
    
    This reverts commit 56e94ea132bb5c2c1d0b60a6aeb34dcb7d71a53d.
    
    Commit 56e94ea132bb ("fs: ocfs2: fix possible null-pointer dereferences
    in ocfs2_xa_prepare_entry()") introduces a regression that fail to
    create directory with mount option user_xattr and acl.  Actually the
    reported NULL pointer dereference case can be correctly handled by
    loc->xl_ops->xlo_add_entry(), so revert it.
    
    Link: http://lkml.kernel.org/r/1573624916-83825-1-git-send-email-joseph.qi@linux.alibaba.com
    Fixes: 56e94ea132bb ("fs: ocfs2: fix possible null-pointer dereferences in ocfs2_xa_prepare_entry()")
    Signed-off-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Reported-by: Thomas Voegtle <tv@lio96.de>
    Acked-by: Changwei Ge <gechangwei@live.cn>
    Cc: Jia-Ju Bai <baijiaju1990@gmail.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea0daf13a2fe11b2ff0a4b9a861cace1d24b211c
Author: Wei Wang <wei.w.wang@intel.com>
Date:   Tue Nov 19 05:02:33 2019 -0500

    virtio_balloon: fix shrinker count
    
    commit c9a6820fc0da2603be3054ee7590eb9f350508a7 upstream.
    
    Instead of multiplying by page order, virtio balloon divided by page
    order. The result is that it can return 0 if there are a bit less
    than MAX_ORDER - 1 pages in use, and then shrinker scan won't be called.
    
    Cc: stable@vger.kernel.org
    Fixes: 71994620bb25 ("virtio_balloon: replace oom notifier with shrinker")
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b3c9f3f93cb15555ceda559ab320e6fc6782719
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Thu Nov 14 13:46:46 2019 +0100

    virtio_ring: fix return code on DMA mapping fails
    
    commit f7728002c1c7bfa787b276a31c3ef458739b8e7c upstream.
    
    Commit 780bc7903a32 ("virtio_ring: Support DMA APIs")  makes
    virtqueue_add() return -EIO when we fail to map our I/O buffers. This is
    a very realistic scenario for guests with encrypted memory, as swiotlb
    may run out of space, depending on it's size and the I/O load.
    
    The virtio-blk driver interprets -EIO form virtqueue_add() as an IO
    error, despite the fact that swiotlb full is in absence of bugs a
    recoverable condition.
    
    Let us change the return code to -ENOMEM, and make the block layer
    recover form these failures when virtio-blk encounters the condition
    described above.
    
    Cc: stable@vger.kernel.org
    Fixes: 780bc7903a32 ("virtio_ring: Support DMA APIs")
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Tested-by: Michael Mueller <mimu@linux.ibm.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 290cb25b66598f91fa365fa989381bf8ca35ee13
Author: Laurent Vivier <lvivier@redhat.com>
Date:   Thu Nov 14 13:25:48 2019 +0100

    virtio_console: allocate inbufs in add_port() only if it is needed
    
    commit d791cfcbf98191122af70b053a21075cb450d119 upstream.
    
    When we hot unplug a virtserialport and then try to hot plug again,
    it fails:
    
    (qemu) chardev-add socket,id=serial0,path=/tmp/serial0,server,nowait
    (qemu) device_add virtserialport,bus=virtio-serial0.0,nr=2,\
                      chardev=serial0,id=serial0,name=serial0
    (qemu) device_del serial0
    (qemu) device_add virtserialport,bus=virtio-serial0.0,nr=2,\
                      chardev=serial0,id=serial0,name=serial0
    kernel error:
      virtio-ports vport2p2: Error allocating inbufs
    qemu error:
      virtio-serial-bus: Guest failure in adding port 2 for device \
                         virtio-serial0.0
    
    This happens because buffers for the in_vq are allocated when the port is
    added but are not released when the port is unplugged.
    
    They are only released when virtconsole is removed (see a7a69ec0d8e4)
    
    To avoid the problem and to be symmetric, we could allocate all the buffers
    in init_vqs() as they are released in remove_vqs(), but it sounds like
    a waste of memory.
    
    Rather than that, this patch changes add_port() logic to ignore ENOSPC
    error in fill_queue(), which means queue has already been filled.
    
    Fixes: a7a69ec0d8e4 ("virtio_console: free buffers after reset")
    Cc: mst@redhat.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2475eff09c2abf48594e030e7b077a48aa801ae0
Author: Sun Ke <sunke32@huawei.com>
Date:   Tue Nov 19 14:09:11 2019 +0800

    nbd:fix memory leak in nbd_get_socket()
    
    commit dff10bbea4be47bdb615b036c834a275b7c68133 upstream.
    
    Before returning NULL, put the sock first.
    
    Cc: stable@vger.kernel.org
    Fixes: cf1b2326b734 ("nbd: verify socket is supported during setup")
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Sun Ke <sunke32@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ced2c60d2e29fa075d2bc77dd24d298c11cffa53
Author: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
Date:   Wed Nov 20 01:33:20 2019 +0100

    fork: fix pidfd_poll()'s return type
    
    commit 9e77716a75bc6cf54965e5ec069ba7c02b32251c upstream.
    
    pidfd_poll() is defined as returning 'unsigned int' but the
    .poll method is declared as returning '__poll_t', a bitwise type.
    
    Fix this by using the proper return type and using the EPOLL
    constants instead of the POLL ones, as required for __poll_t.
    
    Fixes: b53b0b9d9a61 ("pidfd: add polling support")
    Cc: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable@vger.kernel.org # 5.3
    Signed-off-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
    Reviewed-by: Christian Brauner <christian.brauner@ubuntu.com>
    Link: https://lore.kernel.org/r/20191120003320.31138-1-luc.vanoostenryck@gmail.com
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de816751bd86fec28ef832c06b7c3cf535d13b9d
Author: Laura Abbott <labbott@redhat.com>
Date:   Tue Nov 12 17:10:26 2019 -0500

    tools: gpio: Correctly add make dependencies for gpio_utils
    
    commit 0161a94e2d1c713bd34d72bc0239d87c31747bf7 upstream.
    
    gpio tools fail to build correctly with make parallelization:
    
    $ make -s -j24
    ld: gpio-utils.o: file not recognized: file truncated
    make[1]: *** [/home/labbott/linux_upstream/tools/build/Makefile.build:145: lsgpio-in.o] Error 1
    make: *** [Makefile:43: lsgpio-in.o] Error 2
    make: *** Waiting for unfinished jobs....
    
    This is because gpio-utils.o is used across multiple targets.
    Fix this by making gpio-utios.o a proper dependency.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d3daa37c0a07efacd301c2a9fbbf157b8a8953
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Nov 8 17:07:47 2019 +0100

    gpio: bd70528: Use correct unit for debounce times
    
    commit f88c117b6d6d7e96557b6ee143b26b550fc51076 upstream.
    
    The debounce time passed to gpiod_set_debounce() is specified in
    microseconds, so make sure to use the correct unit when computing the
    register values, which denote delays in milliseconds.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 18bc64b3aebf ("gpio: Initial support for ROHM bd70528 GPIO block")
    [Bartosz: fixed a typo in commit message]
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1907e1279214b08b58eb844b42d2ec36c006f6bb
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Nov 8 17:07:46 2019 +0100

    gpio: max77620: Fixup debounce delays
    
    commit b0391479ae04dfcbd208b9571c375064caad9a57 upstream.
    
    When converting milliseconds to microseconds in commit fffa6af94894
    ("gpio: max77620: Use correct unit for debounce times") some ~1 ms gaps
    were introduced between the various ranges supported by the controller.
    Fix this by changing the start of each range to the value immediately
    following the end of the previous range. This way a debounce time of,
    say 8250 us will translate into 16 ms instead of returning an -EINVAL
    error.
    
    Typically the debounce delay is only ever set through device tree and
    specified in milliseconds, so we can never really hit this issue because
    debounce times are always a multiple of 1000 us.
    
    The only notable exception for this is drivers/mmc/host/mmc-spi.c where
    the CD GPIO is requested, which passes a 1 us debounce time. According
    to a comment preceeding that code this should actually be 1 ms (i.e.
    1000 us).
    
    Reported-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Pavel Machek <pavel@denx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56081bc9730aa0beca14bd24bb0a19f74be8cfae
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Tue Jul 30 17:43:33 2019 +0200

    vhost/vsock: split packets to send using multiple buffers
    
    commit 6dbd3e66e7785a2f055bf84d98de9b8fd31ff3f5 upstream.
    
    If the packets to sent to the guest are bigger than the buffer
    available, we can split them, using multiple buffers and fixing
    the length in the packet header.
    This is safe since virtio-vsock supports only stream sockets.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 096ccc9cf0c342be7ff11d3ee791acce4707ef96
Author: Shani Shapp <shanish@mellanox.com>
Date:   Tue Nov 12 15:10:00 2019 +0200

    net/mlx5: Update the list of the PCI supported devices
    
    [ Upstream commit b7eca940322f47fd30dafb70da04d193a0154090 ]
    
    Add the upcoming ConnectX-6 LX device ID.
    
    Fixes: 85327a9c4150 ("net/mlx5: Update the list of the PCI supported devices")
    Signed-off-by: Shani Shapp <shanish@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfb6d2cab46f2ee8cc7d9eaf66c481c5bb1f083f
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Sun Nov 17 15:17:05 2019 +0200

    net/mlx5e: Do not use non-EXT link modes in EXT mode
    
    [ Upstream commit 24960574505c49b102ca1dfa6bf109669bca2a66 ]
    
    On some old Firmwares, connector type value was not supported, and value
    read from FW was 0. For those, driver used link mode in order to set
    connector type in link_ksetting.
    
    After FW exposed the connector type, driver translated the value to ethtool
    definitions. However, as 0 is a valid value, before returning PORT_OTHER,
    driver run the check of link mode in order to maintain backward
    compatibility.
    
    Cited patch added support to EXT mode.  With both features (connector type
    and EXT link modes) ,if connector_type read from FW is 0 and EXT mode is
    set, driver mistakenly compare EXT link modes to non-EXT link mode.
    Fixed that by skipping this comparison if we are in EXT mode, as connector
    type value is valid in this scenario.
    
    Fixes: 6a897372417e ("net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Reviewed-by: Aya Levin <ayal@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f07b4f021e9562967b4673f078d15f871d6c1e91
Author: Eli Cohen <eli@mellanox.com>
Date:   Thu Oct 31 09:00:43 2019 +0200

    net/mlx5e: Fix error flow cleanup in mlx5e_tc_tun_create_header_ipv4/6
    
    [ Upstream commit a86db2269fca8019074b720baf2e0a35cddac4e9 ]
    
    Be sure to release the neighbour in case of failures after successful
    route lookup.
    
    Fixes: 101f4de9dd52 ("net/mlx5e: Move TC tunnel offloading code to separate source file")
    Signed-off-by: Eli Cohen <eli@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5253939eecf88633fb92fac90466ce69838f7de
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Mon Nov 18 09:46:09 2019 -0300

    net/ipv4: fix sysctl max for fib_multipath_hash_policy
    
    [ Upstream commit ca749bbb108c24a876014c804f9777c545be4d59 ]
    
    Commit eec4844fae7c ("proc/sysctl: add shared variables for range
    check") did:
    -               .extra2         = &two,
    +               .extra2         = SYSCTL_ONE,
    here, which doesn't seem to be intentional, given the changelog.
    This patch restores it to the previous, as the value of 2 still makes
    sense (used in fib_multipath_hash()).
    
    Fixes: eec4844fae7c ("proc/sysctl: add shared variables for range check")
    Cc: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 722374c6ccd4aed968cd80104d569bd8dec9da4f
Author: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
Date:   Tue Nov 19 02:23:12 2019 +0200

    taprio: don't reject same mqprio settings
    
    [ Upstream commit b5a0faa3572ac70bd374bd66190ac3ad4fddab20 ]
    
    The taprio qdisc allows to set mqprio setting but only once. In case
    if mqprio settings are provided next time the error is returned as
    it's not allowed to change traffic class mapping in-flignt and that
    is normal. But if configuration is absolutely the same - no need to
    return error. It allows to provide same command couple times,
    changing only base time for instance, or changing only scheds maps,
    but leaving mqprio setting w/o modification. It more corresponds the
    message: "Changing the traffic mapping of a running schedule is not
    supported", so reject mqprio if it's really changed.
    
    Also corrected TC_BITMASK + 1 for consistency, as proposed.
    
    Fixes: a3d43c0d56f1 ("taprio: Add support adding an admin schedule")
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Tested-by: Vladimir Oltean <olteanv@gmail.com>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34dde6c0046dfb7e4a6c65c5e17c7e035145f3fa
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Nov 20 15:39:06 2019 +0800

    ipv6/route: return if there is no fib_nh_gw_family
    
    [ Upstream commit 004b39427f945696db30abb2c4e1a3856ffff819 ]
    
    Previously we will return directly if (!rt || !rt->fib6_nh.fib_nh_gw_family)
    in function rt6_probe(), but after commit cc3a86c802f0
    ("ipv6: Change rt6_probe to take a fib6_nh"), the logic changed to
    return if there is fib_nh_gw_family.
    
    Fixes: cc3a86c802f0 ("ipv6: Change rt6_probe to take a fib6_nh")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be2c083142071be095ab1b22326fbb415f0f0e2f
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Nov 18 10:40:51 2019 -0500

    net/tls: enable sk_msg redirect to tls socket egress
    
    [ Upstream commit d4ffb02dee2fcb20e0c8086a8d1305bf885820bb ]
    
    Bring back tls_sw_sendpage_locked. sk_msg redirection into a socket
    with TLS_TX takes the following path:
    
      tcp_bpf_sendmsg_redir
        tcp_bpf_push_locked
          tcp_bpf_push
            kernel_sendpage_locked
              sock->ops->sendpage_locked
    
    Also update the flags test in tls_sw_sendpage_locked to allow flag
    MSG_NO_SHARED_FRAGS. bpf_tcp_sendmsg sets this.
    
    Link: https://lore.kernel.org/netdev/CA+FuTSdaAawmZ2N8nfDDKu3XLpXBbMtcCT0q4FntDD2gn8ASUw@mail.gmail.com/T/#t
    Link: https://github.com/wdebruij/kerneltools/commits/icept.2
    Fixes: 0608c69c9a80 ("bpf: sk_msg, sock{map|hash} redirect through ULP")
    Fixes: f3de19af0f5b ("Revert \"net/tls: remove unused function tls_sw_sendpage_locked\"")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19be80b786bb11321668a22b47d8beffebd20709
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Sep 5 09:56:10 2019 +0300

    net/mlx5: Fix auto group size calculation
    
    [ Upstream commit 97fd8da281f80e7e69e0114bc906575734d4dfaf ]
    
    Once all the large flow groups (defined by the user when the flow table
    is created - max_num_groups) were created, then all the following new
    flow groups will have only one flow table entry, even though the flow table
    has place to larger groups.
    Fix the condition to prefer large flow group.
    
    Fixes: f0d22d187473 ("net/mlx5_core: Introduce flow steering autogrouped flow table")
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fbdbcccf96cef6a547d5707ca4bc16a8289cfd7
Author: Roi Dayan <roid@mellanox.com>
Date:   Wed Nov 13 14:42:00 2019 +0200

    net/mlx5e: Fix set vf link state error flow
    
    [ Upstream commit 751021218f7e66ee9bbaa2be23056e447cd75ec4 ]
    
    Before this commit the ndo always returned success.
    Fix that.
    
    Fixes: 1ab2068a4c66 ("net/mlx5: Implement vports admin state backup/restore")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca12407f22166a65e1ec92d35e8d8a14e96f46f8
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Sun Nov 17 10:18:59 2019 +0200

    net/mlxfw: Verify FSM error code translation doesn't exceed array size
    
    [ Upstream commit 30e9e0550bf693c94bc15827781fe42dd60be634 ]
    
    Array mlxfw_fsm_state_err_str contains value to string translation, when
    values are provided by mlxfw_dev. If value is larger than
    MLXFW_FSM_STATE_ERR_MAX, return "unknown error" as expected instead of
    reading an address than exceed array size.
    
    Fixes: 410ed13cae39 ("Add the mlxfw module for Mellanox firmware flash process")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfaf81c239d38c4edfeddea3969b542c5cb59418
Author: Martin Habets <mhabets@solarflare.com>
Date:   Thu Nov 21 17:52:15 2019 +0000

    sfc: Only cancel the PPS workqueue if it exists
    
    [ Upstream commit 723eb53690041740a13ac78efeaf6804f5d684c9 ]
    
    The workqueue only exists for the primary PF. For other functions
    we hit a WARN_ON in kernel/workqueue.c.
    
    Fixes: 7c236c43b838 ("sfc: Add support for IEEE-1588 PTP")
    Signed-off-by: Martin Habets <mhabets@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ae06e9bd916dd1cf39f64cc153d3c369e01bac5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Nov 18 17:39:34 2019 +0800

    net: sched: ensure opts_len <= IP_TUNNEL_OPTS_MAX in act_tunnel_key
    
    [ Upstream commit 4f0e97d070984d487df027f163e52bb72d1713d8 ]
    
    info->options_len is 'u8' type, and when opts_len with a value >
    IP_TUNNEL_OPTS_MAX, 'info->options_len = opts_len' will cast int
    to u8 and set a wrong value to info->options_len.
    
    Kernel crashed in my test when doing:
    
      # opts="0102:80:00800022"
      # for i in {1..99}; do opts="$opts,0102:80:00800022"; done
      # ip link add name geneve0 type geneve dstport 0 external
      # tc qdisc add dev eth0 ingress
      # tc filter add dev eth0 protocol ip parent ffff: \
           flower indev eth0 ip_proto udp action tunnel_key \
           set src_ip 10.0.99.192 dst_ip 10.0.99.193 \
           dst_port 6081 id 11 geneve_opts $opts \
           action mirred egress redirect dev geneve0
    
    So we should do the similar check as cls_flower does, return error
    when opts_len > IP_TUNNEL_OPTS_MAX in tunnel_key_copy_opts().
    
    Fixes: 0ed5269f9e41 ("net/sched: add tunnel option support to act_tunnel_key")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 877e9ac8afb77891c6dcf09d143290964b9bc0dd
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Tue Nov 19 23:47:33 2019 +0100

    net/sched: act_pedit: fix WARN() in the traffic path
    
    [ Upstream commit f67169fef8dbcc1ac6a6a109ecaad0d3b259002c ]
    
    when configuring act_pedit rules, the number of keys is validated only on
    addition of a new entry. This is not sufficient to avoid hitting a WARN()
    in the traffic path: for example, it is possible to replace a valid entry
    with a new one having 0 extended keys, thus causing splats in dmesg like:
    
     pedit BUG: index 42
     WARNING: CPU: 2 PID: 4054 at net/sched/act_pedit.c:410 tcf_pedit_act+0xc84/0x1200 [act_pedit]
     [...]
     RIP: 0010:tcf_pedit_act+0xc84/0x1200 [act_pedit]
     Code: 89 fa 48 c1 ea 03 0f b6 04 02 84 c0 74 08 3c 03 0f 8e ac 00 00 00 48 8b 44 24 10 48 c7 c7 a0 c4 e4 c0 8b 70 18 e8 1c 30 95 ea <0f> 0b e9 a0 fa ff ff e8 00 03 f5 ea e9 14 f4 ff ff 48 89 58 40 e9
     RSP: 0018:ffff888077c9f320 EFLAGS: 00010286
     RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffffac2983a2
     RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffff888053927bec
     RBP: dffffc0000000000 R08: ffffed100a726209 R09: ffffed100a726209
     R10: 0000000000000001 R11: ffffed100a726208 R12: ffff88804beea780
     R13: ffff888079a77400 R14: ffff88804beea780 R15: ffff888027ab2000
     FS:  00007fdeec9bd740(0000) GS:ffff888053900000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007ffdb3dfd000 CR3: 000000004adb4006 CR4: 00000000001606e0
     Call Trace:
      tcf_action_exec+0x105/0x3f0
      tcf_classify+0xf2/0x410
      __dev_queue_xmit+0xcbf/0x2ae0
      ip_finish_output2+0x711/0x1fb0
      ip_output+0x1bf/0x4b0
      ip_send_skb+0x37/0xa0
      raw_sendmsg+0x180c/0x2430
      sock_sendmsg+0xdb/0x110
      __sys_sendto+0x257/0x2b0
      __x64_sys_sendto+0xdd/0x1b0
      do_syscall_64+0xa5/0x4e0
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
     RIP: 0033:0x7fdeeb72e993
     Code: 48 8b 0d e0 74 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 0d d6 2c 00 00 75 13 49 89 ca b8 2c 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 34 c3 48 83 ec 08 e8 4b cc 00 00 48 89 04 24
     RSP: 002b:00007ffdb3de8a18 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
     RAX: ffffffffffffffda RBX: 000055c81972b700 RCX: 00007fdeeb72e993
     RDX: 0000000000000040 RSI: 000055c81972b700 RDI: 0000000000000003
     RBP: 00007ffdb3dea130 R08: 000055c819728510 R09: 0000000000000010
     R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040
     R13: 000055c81972b6c0 R14: 000055c81972969c R15: 0000000000000080
    
    Fix this moving the check on 'nkeys' earlier in tcf_pedit_init(), so that
    attempts to install rules having 0 keys are always rejected with -EINVAL.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f963c35b5cd590d8e24d0ae311c4b14272a9ef
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 20 15:34:38 2019 +0300

    net: rtnetlink: prevent underflows in do_setvfinfo()
    
    [ Upstream commit d658c8f56ec7b3de8051a24afb25da9ba3c388c5 ]
    
    The "ivm->vf" variable is a u32, but the problem is that a number of
    drivers cast it to an int and then forget to check for negatives.  An
    example of this is in the cxgb4 driver.
    
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
      2890  static int cxgb4_mgmt_get_vf_config(struct net_device *dev,
      2891                                      int vf, struct ifla_vf_info *ivi)
                                                ^^^^^^
      2892  {
      2893          struct port_info *pi = netdev_priv(dev);
      2894          struct adapter *adap = pi->adapter;
      2895          struct vf_info *vfinfo;
      2896
      2897          if (vf >= adap->num_vfs)
                        ^^^^^^^^^^^^^^^^^^^
      2898                  return -EINVAL;
      2899          vfinfo = &adap->vfinfo[vf];
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    There are 48 functions affected.
    
    drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_main.c:8435 hclge_set_vf_vlan_filter() warn: can 'vfid' underflow 's32min-2147483646'
    drivers/net/ethernet/freescale/enetc/enetc_pf.c:377 enetc_pf_set_vf_mac() warn: can 'vf' underflow 's32min-2147483646'
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c:2899 cxgb4_mgmt_get_vf_config() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c:2960 cxgb4_mgmt_set_vf_rate() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c:3019 cxgb4_mgmt_set_vf_rate() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c:3038 cxgb4_mgmt_set_vf_vlan() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c:3086 cxgb4_mgmt_set_vf_link_state() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/chelsio/cxgb/cxgb2.c:791 get_eeprom() warn: can 'i' underflow 's32min-(-4),0,4-s32max'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:82 bnxt_set_vf_spoofchk() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:164 bnxt_set_vf_trust() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:186 bnxt_get_vf_config() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:228 bnxt_set_vf_mac() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:264 bnxt_set_vf_vlan() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:293 bnxt_set_vf_bw() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c:333 bnxt_set_vf_link_state() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c:2595 bnx2x_vf_op_prep() warn: can 'vfidx' underflow 's32min-63'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c:2595 bnx2x_vf_op_prep() warn: can 'vfidx' underflow 's32min-63'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c:2281 bnx2x_post_vf_bulletin() warn: can 'vf' underflow 's32min-63'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c:2285 bnx2x_post_vf_bulletin() warn: can 'vf' underflow 's32min-63'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c:2286 bnx2x_post_vf_bulletin() warn: can 'vf' underflow 's32min-63'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c:2292 bnx2x_post_vf_bulletin() warn: can 'vf' underflow 's32min-63'
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c:2297 bnx2x_post_vf_bulletin() warn: can 'vf' underflow 's32min-63'
    drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c:1832 qlcnic_sriov_set_vf_mac() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c:1864 qlcnic_sriov_set_vf_tx_rate() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c:1937 qlcnic_sriov_set_vf_vlan() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c:2005 qlcnic_sriov_get_vf_config() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c:2036 qlcnic_sriov_set_vf_spoofchk() warn: can 'vf' underflow 's32min-254'
    drivers/net/ethernet/emulex/benet/be_main.c:1914 be_get_vf_config() warn: can 'vf' underflow 's32min-65534'
    drivers/net/ethernet/emulex/benet/be_main.c:1915 be_get_vf_config() warn: can 'vf' underflow 's32min-65534'
    drivers/net/ethernet/emulex/benet/be_main.c:1922 be_set_vf_tvt() warn: can 'vf' underflow 's32min-65534'
    drivers/net/ethernet/emulex/benet/be_main.c:1951 be_clear_vf_tvt() warn: can 'vf' underflow 's32min-65534'
    drivers/net/ethernet/emulex/benet/be_main.c:2063 be_set_vf_tx_rate() warn: can 'vf' underflow 's32min-65534'
    drivers/net/ethernet/emulex/benet/be_main.c:2091 be_set_vf_link_state() warn: can 'vf' underflow 's32min-65534'
    drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c:2609 ice_set_vf_port_vlan() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c:3050 ice_get_vf_cfg() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c:3103 ice_set_vf_spoofchk() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c:3181 ice_set_vf_mac() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c:3237 ice_set_vf_trust() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c:3286 ice_set_vf_link_state() warn: can 'vf_id' underflow 's32min-65534'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:3919 i40e_validate_vf() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:3957 i40e_ndo_set_vf_mac() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4104 i40e_ndo_set_vf_port_vlan() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4263 i40e_ndo_set_vf_bw() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4309 i40e_ndo_get_vf_config() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4371 i40e_ndo_set_vf_link_state() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4441 i40e_ndo_set_vf_spoofchk() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4441 i40e_ndo_set_vf_spoofchk() warn: can 'vf_id' underflow 's32min-2147483646'
    drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c:4504 i40e_ndo_set_vf_trust() warn: can 'vf_id' underflow 's32min-2147483646'
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0663f57269e39647e13da01bc64a774300c78b98
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon Nov 18 11:41:04 2019 +0200

    net/mlx4_en: Fix wrong limitation for number of TX rings
    
    [ Upstream commit 2744bf42680f64ebf2ee8a00354897857c073331 ]
    
    XDP_TX rings should not be limited by max_num_tx_rings_p_up.
    To make sure total number of TX rings never exceed MAX_TX_RINGS,
    add similar check in mlx4_en_alloc_tx_queue_per_tc(), where
    a new value is assigned for num_up.
    
    Fixes: 7e1dc5e926d5 ("net/mlx4_en: Limit the number of TX rings")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c1251a229cd0106b30b404a92055fe4f3b35224
Author: Luigi Rizzo <lrizzo@google.com>
Date:   Fri Nov 15 12:12:25 2019 -0800

    net/mlx4_en: fix mlx4 ethtool -N insertion
    
    [ Upstream commit 34e59836565e36fade1464e054a3551c1a0364be ]
    
    ethtool expects ETHTOOL_GRXCLSRLALL to set ethtool_rxnfc->data with the
    total number of entries in the rx classifier table.  Surprisingly, mlx4
    is missing this part (in principle ethtool could still move forward and
    try the insert).
    
    Tested: compiled and run command:
            phh13:~# ethtool -N eth1 flow-type udp4  queue 4
            Added rule with ID 255
    
    Signed-off-by: Luigi Rizzo <lrizzo@google.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20fcee8cbd690a9f4321c483b84cc8c748e89327
Author: Petr Machata <petrm@mellanox.com>
Date:   Mon Nov 18 09:18:42 2019 +0200

    mlxsw: spectrum_router: Fix determining underlay for a GRE tunnel
    
    [ Upstream commit 1fc1657775dc1b19e9ac1d46b4054ed8ae5d99ab ]
    
    The helper mlxsw_sp_ipip_dev_ul_tb_id() determines the underlay VRF of a
    GRE tunnel. For a tunnel without a bound device, it uses the same VRF that
    the tunnel is in. However in Linux, a GRE tunnel without a bound device
    uses the main VRF as the underlay. Fix the function accordingly.
    
    mlxsw further assumed that moving a tunnel to a different VRF could cause
    conflict in local tunnel endpoint address, which cannot be offloaded.
    However, the only way that an underlay could be changed by moving the
    tunnel device itself is if the tunnel device does not have a bound device.
    But in that case the underlay is always the main VRF, so there is no
    opportunity to introduce a conflict by moving such device. Thus this check
    constitutes a dead code, and can be removed, which do.
    
    Fixes: 6ddb7426a7d4 ("mlxsw: spectrum_router: Introduce loopback RIFs")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
