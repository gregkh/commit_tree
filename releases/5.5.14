commit 2b67aa6438c56ae68b4dfe60341e2c624ef360aa
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 1 11:00:27 2020 +0200

    Linux 5.5.14

commit 4d4062eeab14a70068e48f60c8f57a9e5cfb9627
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Mar 25 13:47:18 2020 +0100

    net: Fix CONFIG_NET_CLS_ACT=n and CONFIG_NFT_FWD_NETDEV={y, m} build
    
    commit 2c64605b590edadb3fb46d1ec6badb49e940b479 upstream.
    
    net/netfilter/nft_fwd_netdev.c: In function ‘nft_fwd_netdev_eval’:
        net/netfilter/nft_fwd_netdev.c:32:10: error: ‘struct sk_buff’ has no member named ‘tc_redirected’
          pkt->skb->tc_redirected = 1;
                  ^~
        net/netfilter/nft_fwd_netdev.c:33:10: error: ‘struct sk_buff’ has no member named ‘tc_from_ingress’
          pkt->skb->tc_from_ingress = 1;
                  ^~
    
    To avoid a direct dependency with tc actions from netfilter, wrap the
    redirect bits around CONFIG_NET_REDIRECT and move helpers to
    include/linux/skbuff.h. Turn on this toggle from the ifb driver, the
    only existing client of these bits in the tree.
    
    This patch adds skb_set_redirected() that sets on the redirected bit
    on the skbuff, it specifies if the packet was redirect from ingress
    and resets the timestamp (timestamp reset was originally missing in the
    netfilter bugfix).
    
    Fixes: bcfabee1afd99484 ("netfilter: nft_fwd_netdev: allow to redirect to ifb via ingress")
    Reported-by: noreply@ellerman.id.au
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3e260991879273568f0940e9b6aed7561dfe512
Author: Dafna Hirschfeld <dafna.hirschfeld@collabora.com>
Date:   Wed Feb 19 16:25:54 2020 +0100

    media: v4l2-core: fix a use-after-free bug of sd->devnode
    
    commit 6990570f7e0a6078e11b9c5dc13f4b6e3f49a398 upstream.
    
    sd->devnode is released after calling
    v4l2_subdev_release. Therefore it should be set
    to NULL so that the subdev won't hold a pointer
    to a released object. This fixes a reference
    after free bug in function
    v4l2_device_unregister_subdev
    
    Fixes: 0e43734d4c46e ("media: v4l2-subdev: add release() internal op")
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Dafna Hirschfeld <dafna.hirschfeld@collabora.com>
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10b65719f712f0f823e2b961837aa7300347645a
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:11 2020 +0100

    media: xirlink_cit: add missing descriptor sanity checks
    
    commit a246b4d547708f33ff4d4b9a7a5dbac741dc89d8 upstream.
    
    Make sure to check that we have two alternate settings and at least one
    endpoint before accessing the second altsetting structure and
    dereferencing the endpoint arrays.
    
    This specifically avoids dereferencing NULL-pointers or corrupting
    memory when a device does not have the expected descriptors.
    
    Note that the sanity check in cit_get_packet_size() is not redundant as
    the driver is mixing looking up altsettings by index and by number,
    which may not coincide.
    
    Fixes: 659fefa0eb17 ("V4L/DVB: gspca_xirlink_cit: Add support for camera with a bcd version of 0.01")
    Fixes: 59f8b0bf3c12 ("V4L/DVB: gspca_xirlink_cit: support bandwidth changing for devices with 1 alt setting")
    Cc: stable <stable@vger.kernel.org>     # 2.6.37
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d565c3bbc5c1255a79d63641ac5fbbfb819216d
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:10 2020 +0100

    media: stv06xx: add missing descriptor sanity checks
    
    commit 485b06aadb933190f4bc44e006076bc27a23f205 upstream.
    
    Make sure to check that we have two alternate settings and at least one
    endpoint before accessing the second altsetting structure and
    dereferencing the endpoint arrays.
    
    This specifically avoids dereferencing NULL-pointers or corrupting
    memory when a device does not have the expected descriptors.
    
    Note that the sanity checks in stv06xx_start() and pb0100_start() are
    not redundant as the driver is mixing looking up altsettings by index
    and by number, which may not coincide.
    
    Fixes: 8668d504d72c ("V4L/DVB (12082): gspca_stv06xx: Add support for st6422 bridge and sensor")
    Fixes: c0b33bdc5b8d ("[media] gspca-stv06xx: support bandwidth changing")
    Cc: stable <stable@vger.kernel.org>     # 2.6.31
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d80709aa9de4ee1593ef4cc27410d38c3895c64e
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:12 2020 +0100

    media: dib0700: fix rc endpoint lookup
    
    commit f52981019ad8d6718de79b425a574c6bddf81f7c upstream.
    
    Make sure to use the current alternate setting when verifying the
    interface descriptors to avoid submitting an URB to an invalid endpoint.
    
    Failing to do so could cause the driver to misbehave or trigger a WARN()
    in usb_submit_urb() that kernels with panic_on_warn set would choke on.
    
    Fixes: c4018fa2e4c0 ("[media] dib0700: fix RC support on Hauppauge Nova-TD")
    Cc: stable <stable@vger.kernel.org>     # 3.16
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 773972d6e95a714a08b0653bcd5f5f57caa6b8b6
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:09 2020 +0100

    media: ov519: add missing endpoint sanity checks
    
    commit 998912346c0da53a6dbb71fab3a138586b596b30 upstream.
    
    Make sure to check that we have at least one endpoint before accessing
    the endpoint array to avoid dereferencing a NULL-pointer on stream
    start.
    
    Note that these sanity checks are not redundant as the driver is mixing
    looking up altsettings by index and by number, which need not coincide.
    
    Fixes: 1876bb923c98 ("V4L/DVB (12079): gspca_ov519: add support for the ov511 bridge")
    Fixes: b282d87332f5 ("V4L/DVB (12080): gspca_ov519: Fix ov518+ with OV7620AE (Trust spacecam 320)")
    Cc: stable <stable@vger.kernel.org>     # 2.6.31
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3a89f879d1abea76c184b388c60fe9b461885bf
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e293bc24c3db3607ad40d087a2b4ecdaee14f85
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Thu Feb 27 20:28:22 2020 +0800

    ahci: Add Intel Comet Lake H RAID PCI ID
    
    commit 32d2545462c6cede998267b86e57cda5d1dc2225 upstream.
    
    Add the PCI ID to the driver list to support this new device.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a6711a996bc98b755954269d2acf73c299b0b22
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Tue Feb 11 11:35:01 2020 +0100

    staging: wfx: annotate nested gc_list vs tx queue locking
    
    commit e2525a95cc0887c7dc0549cb5d0ac3e796e1d54c upstream.
    
    Lockdep is complaining about recursive locking, because it can't make
    a difference between locked skb_queues. Annotate nested locks and avoid
    double bh_disable/enable.
    
    [...]
    insmod/815 is trying to acquire lock:
    cb7d6418 (&(&list->lock)->rlock){+...}, at: wfx_tx_queues_clear+0xfc/0x198 [wfx]
    
    but task is already holding lock:
    cb7d61f4 (&(&list->lock)->rlock){+...}, at: wfx_tx_queues_clear+0xa0/0x198 [wfx]
    
    [...]
    Possible unsafe locking scenario:
    
          CPU0
          ----
     lock(&(&list->lock)->rlock);
     lock(&(&list->lock)->rlock);
    
    Cc: stable@vger.kernel.org
    Fixes: 9bca45f3d692 ("staging: wfx: allow to send 802.11 frames")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/5e30397af95854b4a7deea073b730c00229f42ba.1581416843.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09edb7ab024df37bd62eda961798c378f520da0c
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Tue Feb 11 11:35:01 2020 +0100

    staging: wfx: fix init/remove vs IRQ race
    
    commit 4033714d6cbe04893aa0708d1fcaa45dd8eb3f53 upstream.
    
    Current code races in init/exit with interrupt handlers. This is noticed
    by the warning below. Fix it by using devres for ordering allocations and
    IRQ de/registration.
    
    WARNING: CPU: 0 PID: 827 at drivers/staging/wfx/bus_spi.c:142 wfx_spi_irq_handler+0x5c/0x64 [wfx]
    race condition in driver init/deinit
    
    Cc: stable@vger.kernel.org
    Fixes: 0096214a59a7 ("staging: wfx: add support for I/O access")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Reviewed-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Link: https://lore.kernel.org/r/f0c66cbb3110c2736cd4357c753fba8c14ee3aee.1581416843.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46dda536e89bfb1f557a589e7c94e1d534115ed0
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Tue Feb 11 11:35:02 2020 +0100

    staging: wfx: add proper "compatible" string
    
    commit eec6e3ee636ec3adaa85ebe4b4acaacfcf06277e upstream.
    
    Add "compatible" string matching "vendor,chip" template and proper
    GPIO flags handling. Keep support for old name and reset polarity
    for older devicetrees.
    
    Cc: stable@vger.kernel.org   # d3a5bcb4a17f ("gpio: add gpiod_toggle_active_low()")
    Cc: stable@vger.kernel.org
    Fixes: 0096214a59a7 ("staging: wfx: add support for I/O access")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/0e6dda06f145676861860f073a53dc95987c7ab5.1581416843.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38ae17e8a6f7b7348b450a0ae6c74bde6a002101
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Thu Mar 26 21:18:50 2020 +0800

    staging: wlan-ng: fix use-after-free Read in hfa384x_usbin_callback
    
    commit 1165dd73e811a07d947aee218510571f516081f6 upstream.
    
    We can't handle the case length > WLAN_DATA_MAXLEN.
    Because the size of rxfrm->data is WLAN_DATA_MAXLEN(2312), and we can't
    read more than that.
    
    Thanks-to: Hillf Danton <hdanton@sina.com>
    Reported-and-tested-by: syzbot+7d42d68643a35f71ac8a@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200326131850.17711-1-hqjagain@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1724c5da0af806df8c0c2522abea819928135ac7
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Wed Mar 25 15:06:46 2020 +0800

    staging: wlan-ng: fix ODEBUG bug in prism2sta_disconnect_usb
    
    commit a1f165a6b738f0c9d744bad4af7a53909278f5fc upstream.
    
    We should cancel hw->usb_work before kfree(hw).
    
    Reported-by: syzbot+6d2e7f6fa90e27be9d62@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1585120006-30042-1-git-send-email-hqjagain@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b815c52257831d8098312743bd836b0b1951facf
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Sat Mar 21 13:00:11 2020 -0500

    staging: rtl8188eu: Add ASUS USB-N10 Nano B1 to device table
    
    commit 38ef48f7d4b7342f145a1b4f96023bde99aeb245 upstream.
    
    The ASUS USB-N10 Nano B1 has been reported as a new RTL8188EU device.
    Add it to the device tables.
    
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Reported-by: kovi <zraetn@gmail.com>
    Cc: Stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200321180011.26153-1-Larry.Finger@lwfinger.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41923be0de44471399e79396204b34881f14d7e1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 24 13:33:25 2020 +0300

    staging: kpc2000: prevent underflow in cpld_reconfigure()
    
    commit 72db61d7d17a475d3cc9de1a7c871d518fcd82f0 upstream.
    
    This function should not allow negative values of "wr_val".  If
    negatives are allowed then capping the upper bound at 7 is
    meaningless.  Let's make it unsigned.
    
    Fixes: 7dc7967fc39a ("staging: kpc2000: add initial set of Daktronics drivers")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200224103325.hrxdnaeqsthplu42@kili.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15282d8021f2fbd4af8705019316b42d207c8def
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 13 18:18:18 2020 +0100

    media: usbtv: fix control-message timeouts
    
    commit 536f561d871c5781bc33d26d415685211b94032e upstream.
    
    The driver was issuing synchronous uninterruptible control requests
    without using a timeout. This could lead to the driver hanging on
    various user requests due to a malfunctioning (or malicious) device
    until the device is physically disconnected.
    
    The USB upper limit of five seconds per request should be more than
    enough.
    
    Fixes: f3d27f34fdd7 ("[media] usbtv: Add driver for Fushicai USBTV007 video frame grabber")
    Fixes: c53a846c48f2 ("[media] usbtv: add video controls")
    Cc: stable <stable@vger.kernel.org>     # 3.11
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Lubomir Rintel <lkundrak@v3.sk>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 235e2a43efd03af15fd5812993710334b2add2e6
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:08 2020 +0100

    media: flexcop-usb: fix endpoint sanity check
    
    commit bca243b1ce0e46be26f7c63b5591dfbb41f558e5 upstream.
    
    commit 1b976fc6d684 ("media: b2c2-flexcop-usb: add sanity checking") added
    an endpoint sanity check to address a NULL-pointer dereference on probe.
    Unfortunately the check was done on the current altsetting which was later
    changed.
    
    Fix this by moving the sanity check to after the altsetting is changed.
    
    Fixes: 1b976fc6d684 ("media: b2c2-flexcop-usb: add sanity checking")
    Cc: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0467e991222412e9017abca463c820e459719977
Author: Mans Rullgard <mans@mansr.com>
Date:   Mon Mar 16 16:11:35 2020 -0500

    usb: musb: fix crash with highmen PIO and usbmon
    
    commit 52974d94a206ce428d9d9b6eaa208238024be82a upstream.
    
    When handling a PIO bulk transfer with highmem buffer, a temporary
    mapping is assigned to urb->transfer_buffer.  After the transfer is
    complete, an invalid address is left behind in this pointer.  This is
    not ordinarily a problem since nothing touches that buffer before the
    urb is released.  However, when usbmon is active, usbmon_urb_complete()
    calls (indirectly) mon_bin_get_data() which does access the transfer
    buffer if it is set.  To prevent an invalid memory access here, reset
    urb->transfer_buffer to NULL when finished (musb_host_rx()), or do not
    set it at all (musb_host_tx()).
    
    Fixes: 8e8a55165469 ("usb: musb: host: Handle highmem in PIO mode")
    Signed-off-by: Mans Rullgard <mans@mansr.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Link: https://lore.kernel.org/r/20200316211136.2274-8-b-liu@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef6b96d2a23a44eb8a515e8ef43e847a9f044e8a
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Wed Mar 25 15:52:37 2020 +0800

    USB: serial: io_edgeport: fix slab-out-of-bounds read in edge_interrupt_callback
    
    commit 57aa9f294b09463492f604feaa5cc719beaace32 upstream.
    
    Fix slab-out-of-bounds read in the interrupt-URB completion handler.
    
    The boundary condition should be (length - 1) as we access
    data[position + 1].
    
    Reported-and-tested-by: syzbot+37ba33391ad5f3935bbd@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 666589ba90ccc3007b3b5974b02288bd35fbaefe
Author: Matthias Reichl <hias@horus.com>
Date:   Fri Mar 27 16:03:50 2020 +0100

    USB: cdc-acm: restore capability check order
    
    commit 62d65bdd9d05158aa2547f8ef72375535f3bc6e3 upstream.
    
    commit b401f8c4f492c ("USB: cdc-acm: fix rounding error in TIOCSSERIAL")
    introduced a regression by changing the order of capability and close
    settings change checks. When running with CAP_SYS_ADMIN setting the
    close settings to the values already set resulted in -EOPNOTSUPP.
    
    Fix this by changing the check order back to how it was before.
    
    Fixes: b401f8c4f492c ("USB: cdc-acm: fix rounding error in TIOCSSERIAL")
    Cc: Anthony Mallet <anthony.mallet@laas.fr>
    Cc: stable <stable@vger.kernel.org>
    Cc: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Matthias Reichl <hias@horus.com>
    Link: https://lore.kernel.org/r/20200327150350.3657-1-hias@horus.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9b5dfbad20014d6ffcbb8ea9a9acfb09e845f88
Author: Pawel Dembicki <paweldembicki@gmail.com>
Date:   Wed Mar 25 06:44:19 2020 +0100

    USB: serial: option: add Wistron Neweb D19Q1
    
    commit dfee7e2f478346b12ea651d5c28b069f6a4af563 upstream.
    
    This modem is embedded on dlink dwr-960 router.
    The oem configuration states:
    
    T: Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 2 Spd=480 MxCh= 0
    D: Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs= 1
    P: Vendor=1435 ProdID=d191 Rev=ff.ff
    S: Manufacturer=Android
    S: Product=Android
    S: SerialNumber=0123456789ABCDEF
    C:* #Ifs= 6 Cfg#= 1 Atr=80 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E: Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E: Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E: Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E: Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=84(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E: Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=86(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E: Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E: Ad=88(I) Atr=03(Int.) MxPS= 8 Ivl=32ms
    E: Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E: Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=(none)
    E: Ad=89(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E: Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=125us
    
    Tested on openwrt distribution
    
    Signed-off-by: Pawel Dembicki <paweldembicki@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9ad5532da845f97a606b0a0f185d6845939b4fb
Author: Pawel Dembicki <paweldembicki@gmail.com>
Date:   Wed Mar 25 06:44:18 2020 +0100

    USB: serial: option: add BroadMobi BM806U
    
    commit 6cb2669cb97fc4fdf526127159ac59caae052247 upstream.
    
    BroadMobi BM806U is an Qualcomm MDM9225 based 3G/4G modem.
    Tested hardware BM806U is mounted on D-Link DWR-921-C3 router.
    
    T:  Bus=01 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.01 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2020 ProdID=2033 Rev= 2.28
    S:  Manufacturer=Mobile Connect
    S:  Product=Mobile Connect
    S:  SerialNumber=f842866cfd5a
    C:* #Ifs= 5 Cfg#= 1 Atr=80 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=89(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Co-developed-by: Cezary Jackiewicz <cezary@eko.one.pl>
    Signed-off-by: Cezary Jackiewicz <cezary@eko.one.pl>
    Signed-off-by: Pawel Dembicki <paweldembicki@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 261a75f4e4723b77be391c67fbe85be9399e399b
Author: Pawel Dembicki <paweldembicki@gmail.com>
Date:   Wed Mar 25 06:44:17 2020 +0100

    USB: serial: option: add support for ASKEY WWHC050
    
    commit 007d20dca2376a751b1dad03442f118438b7e65e upstream.
    
    ASKEY WWHC050 is a mcie LTE modem.
    The oem configuration states:
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=1690 ProdID=7588 Rev=ff.ff
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=813f0eef6e6e
    C:* #Ifs= 6 Cfg#= 1 Atr=80 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=88(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=(none)
    E:  Ad=89(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=125us
    
    Tested on openwrt distribution.
    
    Co-developed-by: Cezary Jackiewicz <cezary@eko.one.pl>
    Signed-off-by: Cezary Jackiewicz <cezary@eko.one.pl>
    Signed-off-by: Pawel Dembicki <paweldembicki@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ebc01466d98d016eb6a3780ec8edb0c86fa48bc
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 30 18:03:22 2020 +0200

    bpf: Undo incorrect __reg_bound_offset32 handling
    
    commit f2d67fec0b43edce8c416101cdc52e71145b5fef upstream.
    
    Anatoly has been fuzzing with kBdysch harness and reported a hang in
    one of the outcomes:
    
      0: (b7) r0 = 808464432
      1: (7f) r0 >>= r0
      2: (14) w0 -= 808464432
      3: (07) r0 += 808464432
      4: (b7) r1 = 808464432
      5: (de) if w1 s<= w0 goto pc+0
       R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x30303020;0x10000001f)) R1_w=invP808464432 R10=fp0
      6: (07) r0 += -2144337872
      7: (14) w0 -= -1607454672
      8: (25) if r0 > 0x30303030 goto pc+0
       R0_w=invP(id=0,umin_value=271581184,umax_value=271581311,var_off=(0x10300000;0x7f)) R1_w=invP808464432 R10=fp0
      9: (76) if w0 s>= 0x303030 goto pc+2
      12: (95) exit
    
      from 8 to 9: safe
    
      from 5 to 6: R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x30303020;0x10000001f)) R1_w=invP808464432 R10=fp0
      6: (07) r0 += -2144337872
      7: (14) w0 -= -1607454672
      8: (25) if r0 > 0x30303030 goto pc+0
       R0_w=invP(id=0,umin_value=271581184,umax_value=271581311,var_off=(0x10300000;0x7f)) R1_w=invP808464432 R10=fp0
      9: safe
    
      from 8 to 9: safe
      verification time 589 usec
      stack depth 0
      processed 17 insns (limit 1000000) [...]
    
    The underlying program was xlated as follows:
    
      # bpftool p d x i 9
       0: (b7) r0 = 808464432
       1: (7f) r0 >>= r0
       2: (14) w0 -= 808464432
       3: (07) r0 += 808464432
       4: (b7) r1 = 808464432
       5: (de) if w1 s<= w0 goto pc+0
       6: (07) r0 += -2144337872
       7: (14) w0 -= -1607454672
       8: (25) if r0 > 0x30303030 goto pc+0
       9: (76) if w0 s>= 0x303030 goto pc+2
      10: (05) goto pc-1
      11: (05) goto pc-1
      12: (95) exit
    
    The verifier rewrote original instructions it recognized as dead code with
    'goto pc-1', but reality differs from verifier simulation in that we're
    actually able to trigger a hang due to hitting the 'goto pc-1' instructions.
    
    Taking different examples to make the issue more obvious: in this example
    we're probing bounds on a completely unknown scalar variable in r1:
    
      [...]
      5: R0_w=inv1 R1_w=inv(id=0) R10=fp0
      5: (18) r2 = 0x4000000000
      7: R0_w=inv1 R1_w=inv(id=0) R2_w=inv274877906944 R10=fp0
      7: (18) r3 = 0x2000000000
      9: R0_w=inv1 R1_w=inv(id=0) R2_w=inv274877906944 R3_w=inv137438953472 R10=fp0
      9: (18) r4 = 0x400
      11: R0_w=inv1 R1_w=inv(id=0) R2_w=inv274877906944 R3_w=inv137438953472 R4_w=inv1024 R10=fp0
      11: (18) r5 = 0x200
      13: R0_w=inv1 R1_w=inv(id=0) R2_w=inv274877906944 R3_w=inv137438953472 R4_w=inv1024 R5_w=inv512 R10=fp0
      13: (2d) if r1 > r2 goto pc+4
       R0_w=inv1 R1_w=inv(id=0,umax_value=274877906944,var_off=(0x0; 0x7fffffffff)) R2_w=inv274877906944 R3_w=inv137438953472 R4_w=inv1024 R5_w=inv512 R10=fp0
      14: R0_w=inv1 R1_w=inv(id=0,umax_value=274877906944,var_off=(0x0; 0x7fffffffff)) R2_w=inv274877906944 R3_w=inv137438953472 R4_w=inv1024 R5_w=inv512 R10=fp0
      14: (ad) if r1 < r3 goto pc+3
       R0_w=inv1 R1_w=inv(id=0,umin_value=137438953472,umax_value=274877906944,var_off=(0x0; 0x7fffffffff)) R2_w=inv274877906944 R3_w=inv137438953472 R4_w=inv1024 R5_w=inv512 R10=fp0
      15: R0=inv1 R1=inv(id=0,umin_value=137438953472,umax_value=274877906944,var_off=(0x0; 0x7fffffffff)) R2=inv274877906944 R3=inv137438953472 R4=inv1024 R5=inv512 R10=fp0
      15: (2e) if w1 > w4 goto pc+2
       R0=inv1 R1=inv(id=0,umin_value=137438953472,umax_value=274877906944,var_off=(0x0; 0x7f00000000)) R2=inv274877906944 R3=inv137438953472 R4=inv1024 R5=inv512 R10=fp0
      16: R0=inv1 R1=inv(id=0,umin_value=137438953472,umax_value=274877906944,var_off=(0x0; 0x7f00000000)) R2=inv274877906944 R3=inv137438953472 R4=inv1024 R5=inv512 R10=fp0
      16: (ae) if w1 < w5 goto pc+1
       R0=inv1 R1=inv(id=0,umin_value=137438953472,umax_value=274877906944,var_off=(0x0; 0x7f00000000)) R2=inv274877906944 R3=inv137438953472 R4=inv1024 R5=inv512 R10=fp0
      [...]
    
    We're first probing lower/upper bounds via jmp64, later we do a similar
    check via jmp32 and examine the resulting var_off there. After fall-through
    in insn 14, we get the following bounded r1 with 0x7fffffffff unknown marked
    bits in the variable section.
    
    Thus, after knowing r1 <= 0x4000000000 and r1 >= 0x2000000000:
    
      max: 0b100000000000000000000000000000000000000 / 0x4000000000
      var: 0b111111111111111111111111111111111111111 / 0x7fffffffff
      min: 0b010000000000000000000000000000000000000 / 0x2000000000
    
    Now, in insn 15 and 16, we perform a similar probe with lower/upper bounds
    in jmp32.
    
    Thus, after knowing r1 <= 0x4000000000 and r1 >= 0x2000000000 and
                        w1 <= 0x400        and w1 >= 0x200:
    
      max: 0b100000000000000000000000000000000000000 / 0x4000000000
      var: 0b111111100000000000000000000000000000000 / 0x7f00000000
      min: 0b010000000000000000000000000000000000000 / 0x2000000000
    
    The lower/upper bounds haven't changed since they have high bits set in
    u64 space and the jmp32 tests can only refine bounds in the low bits.
    
    However, for the var part the expectation would have been 0x7f000007ff
    or something less precise up to 0x7fffffffff. A outcome of 0x7f00000000
    is not correct since it would contradict the earlier probed bounds
    where we know that the result should have been in [0x200,0x400] in u32
    space. Therefore, tests with such info will lead to wrong verifier
    assumptions later on like falsely predicting conditional jumps to be
    always taken, etc.
    
    The issue here is that __reg_bound_offset32()'s implementation from
    commit 581738a681b6 ("bpf: Provide better register bounds after jmp32
    instructions") makes an incorrect range assumption:
    
      static void __reg_bound_offset32(struct bpf_reg_state *reg)
      {
            u64 mask = 0xffffFFFF;
            struct tnum range = tnum_range(reg->umin_value & mask,
                                           reg->umax_value & mask);
            struct tnum lo32 = tnum_cast(reg->var_off, 4);
            struct tnum hi32 = tnum_lshift(tnum_rshift(reg->var_off, 32), 32);
    
            reg->var_off = tnum_or(hi32, tnum_intersect(lo32, range));
      }
    
    In the above walk-through example, __reg_bound_offset32() as-is chose
    a range after masking with 0xffffffff of [0x0,0x0] since umin:0x2000000000
    and umax:0x4000000000 and therefore the lo32 part was clamped to 0x0 as
    well. However, in the umin:0x2000000000 and umax:0x4000000000 range above
    we'd end up with an actual possible interval of [0x0,0xffffffff] for u32
    space instead.
    
    In case of the original reproducer, the situation looked as follows at
    insn 5 for r0:
    
      [...]
      5: R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x0; 0x1ffffffff)) R1_w=invP808464432 R10=fp0
                                   0x30303030           0x13030302f
      5: (de) if w1 s<= w0 goto pc+0
       R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x30303020; 0x10000001f)) R1_w=invP808464432 R10=fp0
                                 0x30303030           0x13030302f
      [...]
    
    After the fall-through, we similarly forced the var_off result into
    the wrong range [0x30303030,0x3030302f] suggesting later on that fixed
    bits must only be of 0x30303020 with 0x10000001f unknowns whereas such
    assumption can only be made when both bounds in hi32 range match.
    
    Originally, I was thinking to fix this by moving reg into a temp reg and
    use proper coerce_reg_to_size() helper on the temp reg where we can then
    based on that define the range tnum for later intersection:
    
      static void __reg_bound_offset32(struct bpf_reg_state *reg)
      {
            struct bpf_reg_state tmp = *reg;
            struct tnum lo32, hi32, range;
    
            coerce_reg_to_size(&tmp, 4);
            range = tnum_range(tmp.umin_value, tmp.umax_value);
            lo32 = tnum_cast(reg->var_off, 4);
            hi32 = tnum_lshift(tnum_rshift(reg->var_off, 32), 32);
            reg->var_off = tnum_or(hi32, tnum_intersect(lo32, range));
      }
    
    In the case of the concrete example, this gives us a more conservative unknown
    section. Thus, after knowing r1 <= 0x4000000000 and r1 >= 0x2000000000 and
                                 w1 <= 0x400        and w1 >= 0x200:
    
      max: 0b100000000000000000000000000000000000000 / 0x4000000000
      var: 0b111111111111111111111111111111111111111 / 0x7fffffffff
      min: 0b010000000000000000000000000000000000000 / 0x2000000000
    
    However, above new __reg_bound_offset32() has no effect on refining the
    knowledge of the register contents. Meaning, if the bounds in hi32 range
    mismatch we'll get the identity function given the range reg spans
    [0x0,0xffffffff] and we cast var_off into lo32 only to later on binary
    or it again with the hi32.
    
    Likewise, if the bounds in hi32 range match, then we mask both bounds
    with 0xffffffff, use the resulting umin/umax for the range to later
    intersect the lo32 with it. However, _prior_ called __reg_bound_offset()
    did already such intersection on the full reg and we therefore would only
    repeat the same operation on the lo32 part twice.
    
    Given this has no effect and the original commit had false assumptions,
    this patch reverts the code entirely which is also more straight forward
    for stable trees: apparently 581738a681b6 got auto-selected by Sasha's
    ML system and misclassified as a fix, so it got sucked into v5.4 where
    it should never have landed. A revert is low-risk also from a user PoV
    since it requires a recent kernel and llc to opt-into -mcpu=v3 BPF CPU
    to generate jmp32 instructions. A proper bounds refinement would need a
    significantly more complex approach which is currently being worked, but
    no stable material [0]. Hence revert is best option for stable. After the
    revert, the original reported program gets rejected as follows:
    
      1: (7f) r0 >>= r0
      2: (14) w0 -= 808464432
      3: (07) r0 += 808464432
      4: (b7) r1 = 808464432
      5: (de) if w1 s<= w0 goto pc+0
       R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x0; 0x1ffffffff)) R1_w=invP808464432 R10=fp0
      6: (07) r0 += -2144337872
      7: (14) w0 -= -1607454672
      8: (25) if r0 > 0x30303030 goto pc+0
       R0_w=invP(id=0,umax_value=808464432,var_off=(0x0; 0x3fffffff)) R1_w=invP808464432 R10=fp0
      9: (76) if w0 s>= 0x303030 goto pc+2
       R0=invP(id=0,umax_value=3158063,var_off=(0x0; 0x3fffff)) R1=invP808464432 R10=fp0
      10: (30) r0 = *(u8 *)skb[808464432]
      BPF_LD_[ABS|IND] uses reserved fields
      processed 11 insns (limit 1000000) [...]
    
      [0] https://lore.kernel.org/bpf/158507130343.15666.8018068546764556975.stgit@john-Precision-5820-Tower/T/
    
    Fixes: 581738a681b6 ("bpf: Provide better register bounds after jmp32 instructions")
    Reported-by: Anatoly Trosinenko <anatoly.trosinenko@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200330160324.15259-2-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0994c33401cc4324ee23a3150cc795691530b1b7
Author: Yubo Xie <yuboxie@microsoft.com>
Date:   Thu Mar 26 19:11:59 2020 -0700

    clocksource/drivers/hyper-v: Untangle stimers and timesync from clocksources
    
    [ Upstream commit 0af3e137c144377fbaf5025ba784ff5ba7ad40c9 ]
    
    hyperv_timer.c exports hyperv_cs, which is used by stimers and the
    timesync mechanism.  However, the clocksource dependency is not
    needed: these mechanisms only depend on the partition reference
    counter (which can be read via a MSR or via the TSC Reference Page).
    
    Introduce the (function) pointer hv_read_reference_counter, as an
    embodiment of the partition reference counter read, and export it
    in place of the hyperv_cs pointer.  The latter can be removed.
    
    This should clarify that there's no relationship between Hyper-V
    stimers & timesync and the Linux clocksource abstractions.  No
    functional or semantic change.
    
    Suggested-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200109160650.16150-2-parri.andrea@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98fbce5cd8625ba5e2304ace110fcfdeb7b0c009
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Mar 27 17:33:32 2020 +0100

    r8169: fix PHY driver check on platforms w/o module softdeps
    
    commit 2e8c339b4946490a922a21aa8cd869c6cfad2023 upstream.
    
    On Android/x86 the module loading infrastructure can't deal with
    softdeps. Therefore the check for presence of the Realtek PHY driver
    module fails. mdiobus_register() will try to load the PHY driver
    module, therefore move the check to after this call and explicitly
    check that a dedicated PHY driver is bound to the PHY device.
    
    Fixes: f32593773549 ("r8169: check that Realtek PHY driver module is loaded")
    Reported-by: Chih-Wei Huang <cwhuang@android-x86.org>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bab4e5b997be19eeb29c61c4bcc1eed4a6961f9
Author: Torsten Hilbrich <torsten.hilbrich@secunet.com>
Date:   Wed Mar 11 11:19:06 2020 +0100

    vti6: Fix memory leak of skb if input policy check fails
    
    commit 2a9de3af21aa8c31cd68b0b39330d69f8c1e59df upstream.
    
    The vti6_rcv function performs some tests on the retrieved tunnel
    including checking the IP protocol, the XFRM input policy, the
    source and destination address.
    
    In all but one places the skb is released in the error case. When
    the input policy check fails the network packet is leaked.
    
    Using the same goto-label discard in this case to fix this problem.
    
    Fixes: ed1efb2aefbb ("ipv6: Add support for IPsec virtual tunnel interfaces")
    Signed-off-by: Torsten Hilbrich <torsten.hilbrich@secunet.com>
    Reviewed-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 273d30a0add12f09886d97dd533fb212bc1e679b
Author: Ondrej Jirman <megous@megous.com>
Date:   Sat Feb 22 23:31:53 2020 +0100

    ARM: dts: sun8i-a83t-tbs-a711: Fix USB OTG mode detection
    
    commit b642d4825441bf30c72b72deb739bd2d5f53af08 upstream.
    
    USB-ID signal has a pullup on the schematic, but in reality it's not
    pulled up, so add a GPIO pullup. And we also need a usb0_vbus_power-supply
    for VBUS detection.
    
    This fixes OTG mode detection and charging issues on TBS A711 tablet.
    The issues came from ID pin reading 0, causing host mode to be enabled,
    when it should not be, leading to DRVVBUS being enabled, which disabled
    the charger.
    
    Fixes: f2f221c7810b824e ("ARM: dts: sun8i: a711: Enable USB OTG")
    Signed-off-by: Ondrej Jirman <megous@megous.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e29f2bde2470fd98fda78775811eb894516f690
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Tue Mar 10 09:41:48 2020 -0700

    bpf, sockmap: Remove bucket->lock from sock_{hash|map}_free
    
    commit 90db6d772f749e38171d04619a5e3cd8804a6d02 upstream.
    
    The bucket->lock is not needed in the sock_hash_free and sock_map_free
    calls, in fact it is causing a splat due to being inside rcu block.
    
    | BUG: sleeping function called from invalid context at net/core/sock.c:2935
    | in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 62, name: kworker/0:1
    | 3 locks held by kworker/0:1/62:
    |  #0: ffff88813b019748 ((wq_completion)events){+.+.}, at: process_one_work+0x1d7/0x5e0
    |  #1: ffffc900000abe50 ((work_completion)(&map->work)){+.+.}, at: process_one_work+0x1d7/0x5e0
    |  #2: ffff8881381f6df8 (&stab->lock){+...}, at: sock_map_free+0x26/0x180
    | CPU: 0 PID: 62 Comm: kworker/0:1 Not tainted 5.5.0-04008-g7b083332376e #454
    | Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20190727_073836-buildvm-ppc64le-16.ppc.fedoraproject.org-3.fc31 04/01/2014
    | Workqueue: events bpf_map_free_deferred
    | Call Trace:
    |  dump_stack+0x71/0xa0
    |  ___might_sleep.cold+0xa6/0xb6
    |  lock_sock_nested+0x28/0x90
    |  sock_map_free+0x5f/0x180
    |  bpf_map_free_deferred+0x58/0x80
    |  process_one_work+0x260/0x5e0
    |  worker_thread+0x4d/0x3e0
    |  kthread+0x108/0x140
    |  ? process_one_work+0x5e0/0x5e0
    |  ? kthread_park+0x90/0x90
    |  ret_from_fork+0x3a/0x50
    
    The reason we have stab->lock and bucket->locks in sockmap code is to
    handle checking EEXIST in update/delete cases. We need to be careful during
    an update operation that we check for EEXIST and we need to ensure that the
    psock object is not in some partial state of removal/insertion while we do
    this. So both map_update_common and sock_map_delete need to guard from being
    run together potentially deleting an entry we are checking, etc. But by the
    time we get to the tear-down code in sock_{ma[|hash}_free we have already
    disconnected the map and we just did synchronize_rcu() in the line above so
    no updates/deletes should be in flight. Because of this we can drop the
    bucket locks from the map free'ing code, noting no update/deletes can be
    in-flight.
    
    Fixes: 604326b41a6f ("bpf, sockmap: convert to generic sk_msg interface")
    Reported-by: Jakub Sitnicki <jakub@cloudflare.com>
    Suggested-by: Jakub Sitnicki <jakub@cloudflare.com>
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/158385850787.30597.8346421465837046618.stgit@john-Precision-5820-Tower
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6d200f3fad829c23acd092f405936d50c475c06
Author: Yoshiki Komachi <komachi.yoshiki@gmail.com>
Date:   Tue Mar 10 16:32:29 2020 +0900

    bpf/btf: Fix BTF verification of enum members in struct/union
    
    commit da6c7faeb103c493e505e87643272f70be586635 upstream.
    
    btf_enum_check_member() was currently sure to recognize the size of
    "enum" type members in struct/union as the size of "int" even if
    its size was packed.
    
    This patch fixes BTF enum verification to use the correct size
    of member in BPF programs.
    
    Fixes: 179cde8cef7e ("bpf: btf: Check members of struct/union")
    Signed-off-by: Yoshiki Komachi <komachi.yoshiki@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/1583825550-18606-2-git-send-email-komachi.yoshiki@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18ef53f1434e61808eaacdfe9a3835d7f49e86f4
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Mar 9 15:27:55 2020 -0700

    bpf: Initialize storage pointers to NULL to prevent freeing garbage pointer
    
    commit 62039c30c19dcab96621e074aeeb90da7100def7 upstream.
    
    Local storage array isn't initialized, so if cgroup storage allocation fails
    for BPF_CGROUP_STORAGE_SHARED, error handling code will attempt to free
    uninitialized pointer for BPF_CGROUP_STORAGE_PERCPU storage type. Avoid this
    by always initializing storage pointers to NULLs.
    
    Fixes: 8bad74f9840f ("bpf: extend cgroup bpf core to allow multiple cgroup storage types")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200309222756.1018737-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bd42713290ebef6d1c3b99a86a89eabe02e984c
Author: Luke Nelson <lukenels@cs.washington.edu>
Date:   Thu Mar 5 15:44:12 2020 -0800

    bpf, x32: Fix bug with JMP32 JSET BPF_X checking upper bits
    
    commit 80f1f85036355e5581ec0b99913410345ad3491b upstream.
    
    The current x32 BPF JIT is incorrect for JMP32 JSET BPF_X when the upper
    32 bits of operand registers are non-zero in certain situations.
    
    The problem is in the following code:
    
      case BPF_JMP | BPF_JSET | BPF_X:
      case BPF_JMP32 | BPF_JSET | BPF_X:
      ...
    
      /* and dreg_lo,sreg_lo */
      EMIT2(0x23, add_2reg(0xC0, sreg_lo, dreg_lo));
      /* and dreg_hi,sreg_hi */
      EMIT2(0x23, add_2reg(0xC0, sreg_hi, dreg_hi));
      /* or dreg_lo,dreg_hi */
      EMIT2(0x09, add_2reg(0xC0, dreg_lo, dreg_hi));
    
    This code checks the upper bits of the operand registers regardless if
    the BPF instruction is BPF_JMP32 or BPF_JMP64. Registers dreg_hi and
    dreg_lo are not loaded from the stack for BPF_JMP32, however, they can
    still be polluted with values from previous instructions.
    
    The following BPF program demonstrates the bug. The jset64 instruction
    loads the temporary registers and performs the jump, since ((u64)r7 &
    (u64)r8) is non-zero. The jset32 should _not_ be taken, as the lower
    32 bits are all zero, however, the current JIT will take the branch due
    the pollution of temporary registers from the earlier jset64.
    
      mov64    r0, 0
      ld64     r7, 0x8000000000000000
      ld64     r8, 0x8000000000000000
      jset64   r7, r8, 1
      exit
      jset32   r7, r8, 1
      mov64    r0, 2
      exit
    
    The expected return value of this program is 2; under the buggy x32 JIT
    it returns 0. The fix is to skip using the upper 32 bits for jset32 and
    compare the upper 32 bits for jset64 only.
    
    All tests in test_bpf.ko and selftests/bpf/test_verifier continue to
    pass with this change.
    
    We found this bug using our automated verification tool, Serval.
    
    Fixes: 69f827eb6e14 ("x32: bpf: implement jitting of JMP32")
    Co-developed-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Luke Nelson <luke.r.nels@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20200305234416.31597-1-luke.r.nels@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c083255c83879b08ff8f31220a26d019880c5ab9
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Mar 24 23:28:11 2020 +0800

    i2c: nvidia-gpu: Handle timeout correctly in gpu_i2c_check_status()
    
    commit d944b27df121e2ee854a6c2fad13d6c6300792d4 upstream.
    
    Nvidia card may come with a "phantom" UCSI device, and its driver gets
    stuck in probe routine, prevents any system PM operations like suspend.
    
    There's an unaccounted case that the target time can equal to jiffies in
    gpu_i2c_check_status(), let's solve that by using readl_poll_timeout()
    instead of jiffies comparison functions.
    
    Fixes: c71bcdcb42a7 ("i2c: add i2c bus driver for NVIDIA GPU")
    Suggested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Ajay Gupta <ajayg@nvidia.com>
    Tested-by: Ajay Gupta <ajayg@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7957106ce3b50d2c2abc36d7225d42117eaf6d7b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Mar 23 19:53:10 2020 +0100

    netfilter: nft_fwd_netdev: allow to redirect to ifb via ingress
    
    commit bcfabee1afd99484b6ba067361b8678e28bbc065 upstream.
    
    Set skb->tc_redirected to 1, otherwise the ifb driver drops the packet.
    Set skb->tc_from_ingress to 1 to reinject the packet back to the ingress
    path after leaving the ifb egress path.
    
    This patch inconditionally sets on these two skb fields that are
    meaningful to the ifb driver. The existing forward action is guaranteed
    to run from ingress path.
    
    Fixes: 39e6dea28adc ("netfilter: nf_tables: add forward expression to the netdev family")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7edb2cefd3d12b47761051fc8eb6a7ebee9f191c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Mar 23 14:27:16 2020 +0100

    netfilter: nft_fwd_netdev: validate family and chain type
    
    commit 76a109fac206e158eb3c967af98c178cff738e6a upstream.
    
    Make sure the forward action is only used from ingress.
    
    Fixes: 39e6dea28adc ("netfilter: nf_tables: add forward expression to the netdev family")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac10143c4644001d0d57ac79cad3a34c217f8c7f
Author: Edward Cree <ecree@solarflare.com>
Date:   Thu Mar 19 19:37:21 2020 +0000

    netfilter: flowtable: populate addr_type mask
    
    commit 15ff197237e76c4dab06b7b518afaa4ebb1c43e0 upstream.
    
    nf_flow_rule_match() sets control.addr_type in key, so needs to also set
     the corresponding mask.  An exact match is wanted, so mask is all ones.
    
    Fixes: c29f74e0df7a ("netfilter: nf_flow_table: hardware offload support")
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 757818ba616b7c14d5a4429669f3d28d4687c600
Author: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
Date:   Tue Mar 17 10:02:53 2020 +0800

    netfilter: flowtable: reload ip{v6}h in nf_flow_tuple_ip{v6}
    
    commit 41e9ec5a54f95eee1a57c8d26ab70e0492548c1b upstream.
    
    Since pskb_may_pull may change skb->data, so we need to reload ip{v6}h at
    the right place.
    
    Fixes: a908fdec3dda ("netfilter: nf_flow_table: move ipv6 offload hook code to nf_flow_table")
    Fixes: 7d2086871762 ("netfilter: nf_flow_table: move ipv4 offload hook code to nf_flow_table")
    Signed-off-by: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d936131f5649b372bcfedb615875ceb7b40a6b59
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Mar 26 15:53:34 2020 +0100

    mac80211: set IEEE80211_TX_CTRL_PORT_CTRL_PROTO for nl80211 TX
    
    commit b95d2ccd2ccb834394d50347d0e40dc38a954e4a upstream.
    
    When a frame is transmitted via the nl80211 TX rather than as a
    normal frame, IEEE80211_TX_CTRL_PORT_CTRL_PROTO wasn't set and
    this will lead to wrong decisions (rate control etc.) being made
    about the frame; fix this.
    
    Fixes: 911806491425 ("mac80211: Add support for tx_control_port")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20200326155333.f183f52b02f0.I4054e2a8c11c2ddcb795a0103c87be3538690243@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf9d19adf3a167be96d90ec74daacfc4691f0ef9
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Mar 25 09:09:19 2020 +0100

    ieee80211: fix HE SPR size calculation
    
    commit 575a97acc3b7446094b0dcaf6285c7c6934c2477 upstream.
    
    The he_sr_control field is just a u8, so le32_to_cpu()
    shouldn't be applied to it; this was evidently copied
    from ieee80211_he_oper_size(). Fix it, and also adjust
    the type of the local variable.
    
    Fixes: ef11a931bd1c ("mac80211: HE: add Spatial Reuse element parsing support")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20200325090918.dfe483b49e06.Ia53622f23b2610a2ae6ea39a199866196fe946c1@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ffb4559dbeac021b762364885bf750ad18ed03b
Author: David Howells <dhowells@redhat.com>
Date:   Thu Mar 26 15:24:07 2020 +0000

    afs: Fix unpinned address list during probing
    
    commit 9efcc4a129363187c9bf15338692f107c5c9b6f0 upstream.
    
    When it's probing all of a fileserver's interfaces to find which one is
    best to use, afs_do_probe_fileserver() takes a lock on the server record
    and notes the pointer to the address list.
    
    It doesn't, however, pin the address list, so as soon as it drops the
    lock, there's nothing to stop the address list from being freed under
    us.
    
    Fix this by taking a ref on the address list inside the locked section
    and dropping it at the end of the function.
    
    Fixes: 3bf0fb6f33dd ("afs: Probe multiple fileservers simultaneously")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cb7eda5806838c4ec9b0387c489e0e7d8101a44
Author: David Howells <dhowells@redhat.com>
Date:   Fri Mar 13 13:36:01 2020 +0000

    afs: Fix some tracing details
    
    commit 4636cf184d6d9a92a56c2554681ea520dd4fe49a upstream.
    
    Fix a couple of tracelines to indicate the usage count after the atomic op,
    not the usage count before it to be consistent with other afs and rxrpc
    trace lines.
    
    Change the wording of the afs_call_trace_work trace ID label from "WORK" to
    "QUEUE" to reflect the fact that it's queueing work, not doing work.
    
    Fixes: 341f741f04be ("afs: Refcount the afs_call struct")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc0fc2dc3e60b047d3596d01eb74c249f8951678
Author: David Howells <dhowells@redhat.com>
Date:   Thu Mar 12 21:40:06 2020 +0000

    afs: Fix client call Rx-phase signal handling
    
    commit 7d7587db0d7fd1138f2afcffdc46a8e15630b944 upstream.
    
    Fix the handling of signals in client rxrpc calls made by the afs
    filesystem.  Ignore signals completely, leaving call abandonment or
    connection loss to be detected by timeouts inside AF_RXRPC.
    
    Allowing a filesystem call to be interrupted after the entire request has
    been transmitted and an abort sent means that the server may or may not
    have done the action - and we don't know.  It may even be worse than that
    for older servers.
    
    Fixes: bc5e3a546d55 ("rxrpc: Use MSG_WAITALL to tell sendmsg() to temporarily ignore signals")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6ca6e66a8b2f8741610d99c95c9bf5748e08372
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Mon Mar 23 15:32:39 2020 +0800

    xfrm: policy: Fix doulbe free in xfrm_policy_timer
    
    commit 4c59406ed00379c8663f8663d82b2537467ce9d7 upstream.
    
    After xfrm_add_policy add a policy, its ref is 2, then
    
                                 xfrm_policy_timer
                                   read_lock
                                   xp->walk.dead is 0
                                   ....
                                   mod_timer()
    xfrm_policy_kill
      policy->walk.dead = 1
      ....
      del_timer(&policy->timer)
        xfrm_pol_put //ref is 1
      xfrm_pol_put  //ref is 0
        xfrm_policy_destroy
          call_rcu
                                     xfrm_pol_hold //ref is 1
                                   read_unlock
                                   xfrm_pol_put //ref is 0
                                     xfrm_policy_destroy
                                      call_rcu
    
    xfrm_policy_destroy is called twice, which may leads to
    double free.
    
    Call Trace:
    RIP: 0010:refcount_warn_saturate+0x161/0x210
    ...
     xfrm_policy_timer+0x522/0x600
     call_timer_fn+0x1b3/0x5e0
     ? __xfrm_decode_session+0x2990/0x2990
     ? msleep+0xb0/0xb0
     ? _raw_spin_unlock_irq+0x24/0x40
     ? __xfrm_decode_session+0x2990/0x2990
     ? __xfrm_decode_session+0x2990/0x2990
     run_timer_softirq+0x5c5/0x10e0
    
    Fix this by use write_lock_bh in xfrm_policy_kill.
    
    Fixes: ea2dea9dacc2 ("xfrm: remove policy lock when accessing policy->walk.dead")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Timo Teräs <timo.teras@iki.fi>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e78b2e9beacafea63cab38bfb7523127a22e4848
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Feb 9 21:16:38 2020 +0800

    xfrm: add the missing verify_sec_ctx_len check in xfrm_add_acquire
    
    commit a1a7e3a36e01ca6e67014f8cf673cb8e47be5550 upstream.
    
    Without doing verify_sec_ctx_len() check in xfrm_add_acquire(), it may be
    out-of-bounds to access uctx->ctx_str with uctx->ctx_len, as noticed by
    syz:
    
      BUG: KASAN: slab-out-of-bounds in selinux_xfrm_alloc_user+0x237/0x430
      Read of size 768 at addr ffff8880123be9b4 by task syz-executor.1/11650
    
      Call Trace:
       dump_stack+0xe8/0x16e
       print_address_description.cold.3+0x9/0x23b
       kasan_report.cold.4+0x64/0x95
       memcpy+0x1f/0x50
       selinux_xfrm_alloc_user+0x237/0x430
       security_xfrm_policy_alloc+0x5c/0xb0
       xfrm_policy_construct+0x2b1/0x650
       xfrm_add_acquire+0x21d/0xa10
       xfrm_user_rcv_msg+0x431/0x6f0
       netlink_rcv_skb+0x15a/0x410
       xfrm_netlink_rcv+0x6d/0x90
       netlink_unicast+0x50e/0x6a0
       netlink_sendmsg+0x8ae/0xd40
       sock_sendmsg+0x133/0x170
       ___sys_sendmsg+0x834/0x9a0
       __sys_sendmsg+0x100/0x1e0
       do_syscall_64+0xe5/0x660
       entry_SYSCALL_64_after_hwframe+0x6a/0xdf
    
    So fix it by adding the missing verify_sec_ctx_len check there.
    
    Fixes: 980ebd25794f ("[IPSEC]: Sync series - acquire insert")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66ebc1b3e4b3a7853301bf5ab89fc3f9ecd81b8c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Feb 9 21:15:29 2020 +0800

    xfrm: fix uctx len check in verify_sec_ctx_len
    
    commit 171d449a028573b2f0acdc7f31ecbb045391b320 upstream.
    
    It's not sufficient to do 'uctx->len != (sizeof(struct xfrm_user_sec_ctx) +
    uctx->ctx_len)' check only, as uctx->len may be greater than nla_len(rt),
    in which case it will cause slab-out-of-bounds when accessing uctx->ctx_str
    later.
    
    This patch is to fix it by return -EINVAL when uctx->len > nla_len(rt).
    
    Fixes: df71837d5024 ("[LSM-IPSec]: Security association restriction.")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a46bd53829bd1af85e4d47598afa716700bc4d1e
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Mar 22 14:49:06 2020 +0200

    RDMA/mlx5: Block delay drop to unprivileged users
    
    commit ba80013fba656b9830ef45cd40a6a1e44707f47a upstream.
    
    It has been discovered that this feature can globally block the RX port,
    so it should be allowed for highly privileged users only.
    
    Fixes: 03404e8ae652("IB/mlx5: Add support to dropless RQ")
    Link: https://lore.kernel.org/r/20200322124906.1173790-1-leon@kernel.org
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c129a6352fce07433d7ec729d48bbc7958f9c1ef
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Mar 18 11:16:40 2020 +0200

    RDMA/mlx5: Fix access to wrong pointer while performing flush due to error
    
    commit 950bf4f17725556bbc773a5b71e88a6c14c9ff25 upstream.
    
    The main difference between send and receive SW completions is related to
    separate treatment of WQ queue. For receive completions, the initial index
    to be flushed is stored in "tail", while for send completions, it is in
    deleted "last_poll".
    
      CPU: 54 PID: 53405 Comm: kworker/u161:0 Kdump: loaded Tainted: G           OE    --------- -t - 4.18.0-147.el8.ppc64le #1
      Workqueue: ib-comp-unb-wq ib_cq_poll_work [ib_core]
      NIP:  c000003c7c00a000 LR: c00800000e586af4 CTR: c000003c7c00a000
      REGS: c0000036cc9db940 TRAP: 0400   Tainted: G           OE    --------- -t -  (4.18.0-147.el8.ppc64le)
      MSR:  9000000010009033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 24004488  XER: 20040000
      CFAR: c00800000e586af0 IRQMASK: 0
      GPR00: c00800000e586ab4 c0000036cc9dbbc0 c00800000e5f1a00 c0000037d8433800
      GPR04: c000003895a26800 c0000037293f2000 0000000000000201 0000000000000011
      GPR08: c000003895a26c80 c000003c7c00a000 0000000000000000 c00800000ed30438
      GPR12: c000003c7c00a000 c000003fff684b80 c00000000017c388 c00000396ec4be40
      GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
      GPR20: c00000000151e498 0000000000000010 c000003895a26848 0000000000000010
      GPR24: 0000000000000010 0000000000010000 c000003895a26800 0000000000000000
      GPR28: 0000000000000010 c0000037d8433800 c000003895a26c80 c000003895a26800
      NIP [c000003c7c00a000] 0xc000003c7c00a000
      LR [c00800000e586af4] __ib_process_cq+0xec/0x1b0 [ib_core]
      Call Trace:
      [c0000036cc9dbbc0] [c00800000e586ab4] __ib_process_cq+0xac/0x1b0 [ib_core] (unreliable)
      [c0000036cc9dbc40] [c00800000e586c88] ib_cq_poll_work+0x40/0xb0 [ib_core]
      [c0000036cc9dbc70] [c000000000171f44] process_one_work+0x2f4/0x5c0
      [c0000036cc9dbd10] [c000000000172a0c] worker_thread+0xcc/0x760
      [c0000036cc9dbdc0] [c00000000017c52c] kthread+0x1ac/0x1c0
      [c0000036cc9dbe30] [c00000000000b75c] ret_from_kernel_thread+0x5c/0x80
    
    Fixes: 8e3b68830186 ("RDMA/mlx5: Delete unreachable handle_atomic code by simplifying SW completion")
    Link: https://lore.kernel.org/r/20200318091640.44069-1-leon@kernel.org
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de72f23b4d033571891a634be1fbb2933bcdcb76
Author: Mark Zhang <markz@mellanox.com>
Date:   Thu Mar 5 14:40:52 2020 +0200

    RDMA/mlx5: Fix the number of hwcounters of a dynamic counter
    
    commit ec16b6bbdab1ce2b03f46271460efc7f450658cd upstream.
    
    When we read the global counter and there's any dynamic counter allocated,
    the value of a hwcounter is the sum of the default counter and all dynamic
    counters. So the number of hwcounters of a dynamically allocated counter
    must be same as of the default counter, otherwise there will be read
    violations.
    
    This fixes the KASAN slab-out-of-bounds bug:
    
      BUG: KASAN: slab-out-of-bounds in rdma_counter_get_hwstat_value+0x36d/0x390 [ib_core]
      Read of size 8 at addr ffff8884192a5778 by task rdma/10138
    
      CPU: 7 PID: 10138 Comm: rdma Not tainted 5.5.0-for-upstream-dbg-2020-02-06_18-30-19-27 #1
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0xb7/0x10b
       print_address_description.constprop.4+0x1e2/0x400
       ? rdma_counter_get_hwstat_value+0x36d/0x390 [ib_core]
       __kasan_report+0x15c/0x1e0
       ? mlx5_ib_query_q_counters+0x13f/0x270 [mlx5_ib]
       ? rdma_counter_get_hwstat_value+0x36d/0x390 [ib_core]
       kasan_report+0xe/0x20
       rdma_counter_get_hwstat_value+0x36d/0x390 [ib_core]
       ? rdma_counter_query_stats+0xd0/0xd0 [ib_core]
       ? memcpy+0x34/0x50
       ? nla_put+0xe2/0x170
       nldev_stat_get_doit+0x9c7/0x14f0 [ib_core]
       ...
       do_syscall_64+0x95/0x490
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      RIP: 0033:0x7fcc457fe65a
      Code: bb 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 8b 05 fa f1 2b 00 45 89 c9 4c 63 d1 48 63 ff 85 c0 75 15 b8 2c 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 76 f3 c3 0f 1f 40 00 41 55 41 54 4d 89 c5 55
      RSP: 002b:00007ffc0586f868 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
      RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fcc457fe65a
      RDX: 0000000000000020 RSI: 00000000013db920 RDI: 0000000000000003
      RBP: 00007ffc0586fa90 R08: 00007fcc45ac10e0 R09: 000000000000000c
      R10: 0000000000000000 R11: 0000000000000246 R12: 00000000004089c0
      R13: 0000000000000000 R14: 00007ffc0586fab0 R15: 00000000013dc9a0
    
      Allocated by task 9700:
       save_stack+0x19/0x80
       __kasan_kmalloc.constprop.7+0xa0/0xd0
       mlx5_ib_counter_alloc_stats+0xd1/0x1d0 [mlx5_ib]
       rdma_counter_alloc+0x16d/0x3f0 [ib_core]
       rdma_counter_bind_qpn_alloc+0x216/0x4e0 [ib_core]
       nldev_stat_set_doit+0x8c2/0xb10 [ib_core]
       rdma_nl_rcv_msg+0x3d2/0x730 [ib_core]
       rdma_nl_rcv+0x2a8/0x400 [ib_core]
       netlink_unicast+0x448/0x620
       netlink_sendmsg+0x731/0xd10
       sock_sendmsg+0xb1/0xf0
       __sys_sendto+0x25d/0x2c0
       __x64_sys_sendto+0xdd/0x1b0
       do_syscall_64+0x95/0x490
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 18d422ce8ccf ("IB/mlx5: Add counter_alloc_stats() and counter_update_stats() support")
    Link: https://lore.kernel.org/r/20200305124052.196688-1-leon@kernel.org
    Signed-off-by: Mark Zhang <markz@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e9bdde4057afa2b7797cf6174f40b2603312674
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Tue Feb 4 17:00:27 2020 +0100

    vti[6]: fix packet tx through bpf_redirect() in XinY cases
    
    commit f1ed10264ed6b66b9cd5e8461cffce69be482356 upstream.
    
    I forgot the 4in6/6in4 cases in my previous patch. Let's fix them.
    
    Fixes: 95224166a903 ("vti[6]: fix packet tx through bpf_redirect()")
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 035cbed7ef33f7ceaa75bac83c68f768431a95bb
Author: Raed Salem <raeds@mellanox.com>
Date:   Sun Feb 2 13:19:34 2020 +0200

    xfrm: handle NETDEV_UNREGISTER for xfrm device
    
    commit 03891f820c2117b19e80b370281eb924a09cf79f upstream.
    
    This patch to handle the asynchronous unregister
    device event so the device IPsec offload resources
    could be cleanly released.
    
    Fixes: e4db5b61c572 ("xfrm: policy: remove pcpu policy cache")
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Reviewed-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9185cb074eb1799548fd297a1ef13ec2464dca52
Author: Edward Cree <ecree@solarflare.com>
Date:   Fri Mar 13 20:33:07 2020 +0000

    genirq: Fix reference leaks on irq affinity notifiers
    
    commit df81dfcfd6991d547653d46c051bac195cd182c1 upstream.
    
    The handling of notify->work did not properly maintain notify->kref in two
     cases:
    1) where the work was already scheduled, another irq_set_affinity_locked()
       would get the ref and (no-op-ly) schedule the work.  Thus when
       irq_affinity_notify() ran, it would drop the original ref but not the
       additional one.
    2) when cancelling the (old) work in irq_set_affinity_notifier(), if there
       was outstanding work a ref had been got for it but was never put.
    Fix both by checking the return values of the work handling functions
     (schedule_work() for (1) and cancel_work_sync() for (2)) and put the
     extra ref if the return value indicates preexisting work.
    
    Fixes: cd7eab44e994 ("genirq: Add IRQ affinity notifiers")
    Fixes: 59c39840f5ab ("genirq: Prevent use-after-free and work list corruption")
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Ben Hutchings <ben@decadent.org.uk>
    Link: https://lkml.kernel.org/r/24f5983f-2ab5-e83a-44ee-a45b5f9300f5@solarflare.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4997bd0785e60217b88ec3ce9e0ebee885fda9d6
Author: David Howells <dhowells@redhat.com>
Date:   Fri Mar 13 13:46:08 2020 +0000

    afs: Fix handling of an abort from a service handler
    
    commit dde9f095583b3f375ba23979045ee10dfcebec2f upstream.
    
    When an AFS service handler function aborts a call, AF_RXRPC marks the call
    as complete - which means that it's not going to get any more packets from
    the receiver.  This is a problem because reception of the final ACK is what
    triggers afs_deliver_to_call() to drop the final ref on the afs_call
    object.
    
    Instead, aborted AFS service calls may then just sit around waiting for
    ever or until they're displaced by a new call on the same connection
    channel or a connection-level abort.
    
    Fix this by calling afs_set_call_complete() to finalise the afs_call struct
    representing the call.
    
    However, we then need to drop the ref that stops the call from being
    deallocated.  We can do this in afs_set_call_complete(), as the work queue
    is holding a separate ref of its own, but then we shouldn't do it in
    afs_process_async_call() and afs_delete_async_call().
    
    call->drop_ref is set to indicate that a ref needs dropping for a call and
    this is dealt with when we transition a call to AFS_CALL_COMPLETE.
    
    But then we also need to get rid of the ref that pins an asynchronous
    client call.  We can do this by the same mechanism, setting call->drop_ref
    for an async client call too.
    
    We can also get rid of call->incoming since nothing ever sets it and only
    one thing ever checks it (futilely).
    
    
    A trace of the rxrpc_call and afs_call struct ref counting looks like:
    
              <idle>-0     [001] ..s5   164.764892: rxrpc_call: c=00000002 SEE u=3 sp=rxrpc_new_incoming_call+0x473/0xb34 a=00000000442095b5
              <idle>-0     [001] .Ns5   164.766001: rxrpc_call: c=00000002 QUE u=4 sp=rxrpc_propose_ACK+0xbe/0x551 a=00000000442095b5
              <idle>-0     [001] .Ns4   164.766005: rxrpc_call: c=00000002 PUT u=3 sp=rxrpc_new_incoming_call+0xa3f/0xb34 a=00000000442095b5
              <idle>-0     [001] .Ns7   164.766433: afs_call: c=00000002 WAKE  u=2 o=11 sp=rxrpc_notify_socket+0x196/0x33c
         kworker/1:2-1810  [001] ...1   164.768409: rxrpc_call: c=00000002 SEE u=3 sp=rxrpc_process_call+0x25/0x7ae a=00000000442095b5
         kworker/1:2-1810  [001] ...1   164.769439: rxrpc_tx_packet: c=00000002 e9f1a7a8:95786a88:00000008:09c5 00000001 00000000 02 22 ACK CallAck
         kworker/1:2-1810  [001] ...1   164.769459: rxrpc_call: c=00000002 PUT u=2 sp=rxrpc_process_call+0x74f/0x7ae a=00000000442095b5
         kworker/1:2-1810  [001] ...1   164.770794: afs_call: c=00000002 QUEUE u=3 o=12 sp=afs_deliver_to_call+0x449/0x72c
         kworker/1:2-1810  [001] ...1   164.770829: afs_call: c=00000002 PUT   u=2 o=12 sp=afs_process_async_call+0xdb/0x11e
         kworker/1:2-1810  [001] ...2   164.771084: rxrpc_abort: c=00000002 95786a88:00000008 s=0 a=1 e=1 K-1
         kworker/1:2-1810  [001] ...1   164.771461: rxrpc_tx_packet: c=00000002 e9f1a7a8:95786a88:00000008:09c5 00000002 00000000 04 00 ABORT CallAbort
         kworker/1:2-1810  [001] ...1   164.771466: afs_call: c=00000002 PUT   u=1 o=12 sp=SRXAFSCB_ProbeUuid+0xc1/0x106
    
    The abort generated in SRXAFSCB_ProbeUuid(), labelled "K-1", indicates that
    the local filesystem/cache manager didn't recognise the UUID as its own.
    
    Fixes: 2067b2b3f484 ("afs: Fix the CB.ProbeUuid service handler to reply correctly")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fe4ac2cf8a30a827b5c3a5c0f8a85a01b73d89a
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Fri Mar 13 08:47:05 2020 -0400

    RDMA/core: Ensure security pkey modify is not lost
    
    commit 2d47fbacf2725a67869f4d3634c2415e7dfab2f4 upstream.
    
    The following modify sequence (loosely based on ipoib) will lose a pkey
    modifcation:
    
    - Modify (pkey index, port)
    - Modify (new pkey index, NO port)
    
    After the first modify, the qp_pps list will have saved the pkey and the
    unit on the main list.
    
    During the second modify, get_new_pps() will fetch the port from qp_pps
    and read the new pkey index from qp_attr->pkey_index.  The state will
    still be zero, or IB_PORT_PKEY_NOT_VALID. Because of the invalid state,
    the new values will never replace the one in the qp pps list, losing the
    new pkey.
    
    This happens because the following if statements will never correct the
    state because the first term will be false. If the code had been executed,
    it would incorrectly overwrite valid values.
    
      if ((qp_attr_mask & IB_QP_PKEY_INDEX) && (qp_attr_mask & IB_QP_PORT))
              new_pps->main.state = IB_PORT_PKEY_VALID;
    
      if (!(qp_attr_mask & (IB_QP_PKEY_INDEX | IB_QP_PORT)) && qp_pps) {
              new_pps->main.port_num = qp_pps->main.port_num;
              new_pps->main.pkey_index = qp_pps->main.pkey_index;
              if (qp_pps->main.state != IB_PORT_PKEY_NOT_VALID)
                      new_pps->main.state = IB_PORT_PKEY_VALID;
      }
    
    Fix by joining the two if statements with an or test to see if qp_pps is
    non-NULL and in the correct state.
    
    Fixes: 1dd017882e01 ("RDMA/core: Fix protection fault in get_pkey_idx_qp_list")
    Link: https://lore.kernel.org/r/20200313124704.14982.55907.stgit@awfm-01.aw.intel.com
    Reviewed-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a66de200ff954ee1a5fa7ca40dae40882fc160d
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Mon Mar 9 15:40:17 2020 -0700

    bpf: Fix cgroup ref leak in cgroup_bpf_inherit on out-of-memory
    
    commit 1d8006abaab4cb90f81add86e8d1bf9411add05a upstream.
    
    There is no compensating cgroup_bpf_put() for each ancestor cgroup in
    cgroup_bpf_inherit(). If compute_effective_progs returns error, those cgroups
    won't be freed ever. Fix it by putting them in cleanup code path.
    
    Fixes: e10360f815ca ("bpf: cgroup: prevent out-of-order release of cgroup bpf")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Roman Gushchin <guro@fb.com>
    Link: https://lore.kernel.org/bpf/20200309224017.1063297-1-andriin@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c45a3023ec8bb8d72880cbd8c828788d53012938
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 2 12:12:24 2020 +0100

    gpiolib: acpi: Add quirk to ignore EC wakeups on HP x2 10 BYT + AXP288 model
    
    commit 0e91506ba00730f088961a8d39f8693b0f8e3fea upstream.
    
    Commit aa23ca3d98f7 ("gpiolib: acpi: Add honor_wakeup module-option +
    quirk mechanism") was added to deal with spurious wakeups on one specific
    model of the HP x2 10 series. In the mean time I have learned that there
    are at least 3 different HP x2 10 models:
    
    Bay Trail SoC + AXP288 PMIC
    Cherry Trail SoC + AXP288 PMIC
    Cherry Trail SoC + TI PMIC
    
    And the original quirk is only correct for (and only matches the)
    Cherry Trail SoC + TI PMIC model.
    
    The Bay Trail SoC + AXP288 PMIC model has different DMI strings, has
    the external EC interrupt on a different GPIO pin and only needs to ignore
    wakeups on the EC interrupt, the INT0002 device works fine on this model.
    
    This commit adds an extra DMI based quirk for the HP x2 10 BYT + AXP288
    model, ignoring wakeups for ACPI GPIO events on the EC interrupt pin
    on this model. This fixes spurious wakeups from suspend on this model.
    
    Fixes: aa23ca3d98f7 ("gpiolib: acpi: Add honor_wakeup module-option + quirk mechanism")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200302111225.6641-3-hdegoede@redhat.com
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6ac1661b80139cc1fba6b7e3f023accf98a1419
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 2 12:12:23 2020 +0100

    gpiolib: acpi: Rework honor_wakeup option into an ignore_wake option
    
    commit 2ccb21f5516afef5e251184eeefbf36db90206d7 upstream.
    
    Commit aa23ca3d98f7 ("gpiolib: acpi: Add honor_wakeup module-option +
    quirk mechanism") was added to deal with spurious wakeups on one specific
    model of the HP x2 10 series.
    
    The approach taken there was to add a bool controlling wakeup support for
    all ACPI GPIO events. This was sufficient for the specific HP x2 10 model
    the commit was trying to fix, but in the mean time other models have
    turned up which need a similar workaround to avoid spurious wakeups from
    suspend, but only for one of the pins on which the ACPI tables request
    ACPI GPIO events.
    
    Since the honor_wakeup option was added to be able to ignore wake events,
    the name was perhaps not the best, this commit renames it to ignore_wake
    and changes it to a string with the following format:
    gpiolib_acpi.ignore_wake=controller@pin[,controller@pin[,...]]
    
    This allows working around spurious wakeup issues on a per pin basis.
    
    This commit also reworks the existing quirk for the HP x2 10 so that
    it functions as before.
    
    Note:
    -This removes the honor_wakeup parameter. This has only been upstream for
     a short time and to the best of my knowledge there are no users using
     this module parameter.
    
    -The controller@pin[,controller@pin[,...]] syntax is based on an existing
     kernel module parameter using the same controller@pin format. That version
     uses ';' as separator, but in practice that is problematic because grub2
     cannot handle this without taking special care to escape the ';', so here
     we are using a ',' as separator instead which does not have this issue.
    
    Fixes: aa23ca3d98f7 ("gpiolib: acpi: Add honor_wakeup module-option + quirk mechanism")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200302111225.6641-2-hdegoede@redhat.com
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89dbe10b84145de805f8713d140047e0c39bbc83
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 2 12:12:22 2020 +0100

    gpiolib: acpi: Correct comment for HP x2 10 honor_wakeup quirk
    
    commit efaa87fa0947d525cf7c075316adde4e3ac7720b upstream.
    
    Commit aa23ca3d98f7 ("gpiolib: acpi: Add honor_wakeup module-option +
    quirk mechanism") added a quirk for some models of the HP x2 10 series.
    
    There are 2 issues with the comment describing the quirk:
    1) The comment claims the DMI quirk applies to all Cherry Trail based HP x2
       10 models. In the mean time I have learned that there are at least 3
       models of the HP x2 10 models:
    
       Bay Trail SoC + AXP288 PMIC
       Cherry Trail SoC + AXP288 PMIC
       Cherry Trail SoC + TI PMIC
    
       And this quirk's DMI matches only match the Cherry Trail SoC + TI PMIC
       SoC, which is good because we want a slightly different quirk for the
       others. This commit updates the comment to make it clear that the quirk
       is only for the Cherry Trail SoC + TI PMIC models.
    
    2) The comment says that it is ok to disable wakeup on all ACPI GPIO event
       handlers, because there is only the one for the embedded-controller
       events. This is not true, there also is a handler for the special
       INT0002 device which is related to USB wakeups. We need to also disable
       wakeups on that one because the device turns of the USB-keyboard built
       into the dock when closing the lid. The XHCI controller takes a while
       to notice this, so it only notices it when already suspended, causing
       a spurious wakeup because of this. So disabling wakeup on all handlers
       is the right thing to do, but not because there only is the one handler
       for the EC events. This commit updates the comment to correctly reflect
       this.
    
    Fixes: aa23ca3d98f7 ("gpiolib: acpi: Add honor_wakeup module-option + quirk mechanism")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200302111225.6641-1-hdegoede@redhat.com
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af36a5eea10cfb43848ac0a037c7d06476d59337
Author: Roman Gushchin <guro@fb.com>
Date:   Sat Mar 28 19:17:25 2020 -0700

    mm: fork: fix kernel_stack memcg stats for various stack implementations
    
    commit 8380ce479010f2f779587b462a9b4681934297c3 upstream.
    
    Depending on CONFIG_VMAP_STACK and the THREAD_SIZE / PAGE_SIZE ratio the
    space for task stacks can be allocated using __vmalloc_node_range(),
    alloc_pages_node() and kmem_cache_alloc_node().
    
    In the first and the second cases page->mem_cgroup pointer is set, but
    in the third it's not: memcg membership of a slab page should be
    determined using the memcg_from_slab_page() function, which looks at
    page->slab_cache->memcg_params.memcg .  In this case, using
    mod_memcg_page_state() (as in account_kernel_stack()) is incorrect:
    page->mem_cgroup pointer is NULL even for pages charged to a non-root
    memory cgroup.
    
    It can lead to kernel_stack per-memcg counters permanently showing 0 on
    some architectures (depending on the configuration).
    
    In order to fix it, let's introduce a mod_memcg_obj_state() helper,
    which takes a pointer to a kernel object as a first argument, uses
    mem_cgroup_from_obj() to get a RCU-protected memcg pointer and calls
    mod_memcg_state().  It allows to handle all possible configurations
    (CONFIG_VMAP_STACK and various THREAD_SIZE/PAGE_SIZE values) without
    spilling any memcg/kmem specifics into fork.c .
    
    Note: This is a special version of the patch created for stable
    backports.  It contains code from the following two patches:
      - mm: memcg/slab: introduce mem_cgroup_from_obj()
      - mm: fork: fix kernel_stack memcg stats for various stack implementations
    
    [guro@fb.com: introduce mem_cgroup_from_obj()]
      Link: http://lkml.kernel.org/r/20200324004221.GA36662@carbon.dhcp.thefacebook.com
    Fixes: 4d96ba353075 ("mm: memcg/slab: stop setting page->mem_cgroup pointer for slab pages")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Bharata B Rao <bharata@linux.ibm.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200303233550.251375-1-guro@fb.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e274b88477f32278b050f0e70cbeaae7a1cfba6
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Sat Mar 28 19:17:29 2020 -0700

    mm/sparse: fix kernel crash with pfn_section_valid check
    
    commit b943f045a9af9fd02f923e43fe8d7517e9961701 upstream.
    
    Fix the crash like this:
    
        BUG: Kernel NULL pointer dereference on read at 0x00000000
        Faulting instruction address: 0xc000000000c3447c
        Oops: Kernel access of bad area, sig: 11 [#1]
        LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
        CPU: 11 PID: 7519 Comm: lt-ndctl Not tainted 5.6.0-rc7-autotest #1
        ...
        NIP [c000000000c3447c] vmemmap_populated+0x98/0xc0
        LR [c000000000088354] vmemmap_free+0x144/0x320
        Call Trace:
           section_deactivate+0x220/0x240
           __remove_pages+0x118/0x170
           arch_remove_memory+0x3c/0x150
           memunmap_pages+0x1cc/0x2f0
           devm_action_release+0x30/0x50
           release_nodes+0x2f8/0x3e0
           device_release_driver_internal+0x168/0x270
           unbind_store+0x130/0x170
           drv_attr_store+0x44/0x60
           sysfs_kf_write+0x68/0x80
           kernfs_fop_write+0x100/0x290
           __vfs_write+0x3c/0x70
           vfs_write+0xcc/0x240
           ksys_write+0x7c/0x140
           system_call+0x5c/0x68
    
    The crash is due to NULL dereference at
    
            test_bit(idx, ms->usage->subsection_map);
    
    due to ms->usage = NULL in pfn_section_valid()
    
    With commit d41e2f3bd546 ("mm/hotplug: fix hot remove failure in
    SPARSEMEM|!VMEMMAP case") section_mem_map is set to NULL after
    depopulate_section_mem().  This was done so that pfn_page() can work
    correctly with kernel config that disables SPARSEMEM_VMEMMAP.  With that
    config pfn_to_page does
    
            __section_mem_map_addr(__sec) + __pfn;
    
    where
    
      static inline struct page *__section_mem_map_addr(struct mem_section *section)
      {
            unsigned long map = section->section_mem_map;
            map &= SECTION_MAP_MASK;
            return (struct page *)map;
      }
    
    Now with SPASEMEM_VMEMAP enabled, mem_section->usage->subsection_map is
    used to check the pfn validity (pfn_valid()).  Since section_deactivate
    release mem_section->usage if a section is fully deactivated,
    pfn_valid() check after a subsection_deactivate cause a kernel crash.
    
      static inline int pfn_valid(unsigned long pfn)
      {
      ...
            return early_section(ms) || pfn_section_valid(ms, pfn);
      }
    
    where
    
      static inline int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
      {
            int idx = subsection_map_index(pfn);
    
            return test_bit(idx, ms->usage->subsection_map);
      }
    
    Avoid this by clearing SECTION_HAS_MEM_MAP when mem_section->usage is
    freed.  For architectures like ppc64 where large pages are used for
    vmmemap mapping (16MB), a specific vmemmap mapping can cover multiple
    sections.  Hence before a vmemmap mapping page can be freed, the kernel
    needs to make sure there are no valid sections within that mapping.
    Clearing the section valid bit before depopulate_section_memap enables
    this.
    
    [aneesh.kumar@linux.ibm.com: add comment]
      Link: http://lkml.kernel.org/r/20200326133235.343616-1-aneesh.kumar@linux.ibm.comLink: http://lkml.kernel.org/r/20200325031914.107660-1-aneesh.kumar@linux.ibm.com
    Fixes: d41e2f3bd546 ("mm/hotplug: fix hot remove failure in SPARSEMEM|!VMEMMAP case")
    Reported-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Reviewed-by: Baoquan He <bhe@redhat.com>
    Reviewed-by: Wei Yang <richard.weiyang@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5be8a064c6b8d993760d444778671e0734fa2ec
Author: David Hildenbrand <david@redhat.com>
Date:   Sat Mar 28 19:17:19 2020 -0700

    drivers/base/memory.c: indicate all memory blocks as removable
    
    commit 53cdc1cb29e87ce5a61de5bb393eb08925d14ede upstream.
    
    We see multiple issues with the implementation/interface to compute
    whether a memory block can be offlined (exposed via
    /sys/devices/system/memory/memoryX/removable) and would like to simplify
    it (remove the implementation).
    
    1. It runs basically lockless. While this might be good for performance,
       we see possible races with memory offlining that will require at
       least some sort of locking to fix.
    
    2. Nowadays, more false positives are possible. No arch-specific checks
       are performed that validate if memory offlining will not be denied
       right away (and such check will require locking). For example, arm64
       won't allow to offline any memory block that was added during boot -
       which will imply a very high error rate. Other archs have other
       constraints.
    
    3. The interface is inherently racy. E.g., if a memory block is detected
       to be removable (and was not a false positive at that time), there is
       still no guarantee that offlining will actually succeed. So any
       caller already has to deal with false positives.
    
    4. It is unclear which performance benefit this interface actually
       provides. The introducing commit 5c755e9fd813 ("memory-hotplug: add
       sysfs removable attribute for hotplug memory remove") mentioned
    
            "A user-level agent must be able to identify which sections
             of memory are likely to be removable before attempting the
             potentially expensive operation."
    
       However, no actual performance comparison was included.
    
    Known users:
    
     - lsmem: Will group memory blocks based on the "removable" property. [1]
    
     - chmem: Indirect user. It has a RANGE mode where one can specify
              removable ranges identified via lsmem to be offlined. However,
              it also has a "SIZE" mode, which allows a sysadmin to skip the
              manual "identify removable blocks" step. [2]
    
     - powerpc-utils: Uses the "removable" attribute to skip some memory
              blocks right away when trying to find some to offline+remove.
              However, with ballooning enabled, it already skips this
              information completely (because it once resulted in many false
              negatives). Therefore, the implementation can deal with false
              positives properly already. [3]
    
    According to Nathan Fontenot, DLPAR on powerpc is nowadays no longer
    driven from userspace via the drmgr command (powerpc-utils).  Nowadays
    it's managed in the kernel - including onlining/offlining of memory
    blocks - triggered by drmgr writing to /sys/kernel/dlpar.  So the
    affected legacy userspace handling is only active on old kernels.  Only
    very old versions of drmgr on a new kernel (unlikely) might execute
    slower - totally acceptable.
    
    With CONFIG_MEMORY_HOTREMOVE, always indicating "removable" should not
    break any user space tool.  We implement a very bad heuristic now.
    Without CONFIG_MEMORY_HOTREMOVE we cannot offline anything, so report
    "not removable" as before.
    
    Original discussion can be found in [4] ("[PATCH RFC v1] mm:
    is_mem_section_removable() overhaul").
    
    Other users of is_mem_section_removable() will be removed next, so that
    we can remove is_mem_section_removable() completely.
    
    [1] http://man7.org/linux/man-pages/man1/lsmem.1.html
    [2] http://man7.org/linux/man-pages/man8/chmem.8.html
    [3] https://github.com/ibm-power-utilities/powerpc-utils
    [4] https://lkml.kernel.org/r/20200117105759.27905-1-david@redhat.com
    
    Also, this patch probably fixes a crash reported by Steve.
    http://lkml.kernel.org/r/CAPcyv4jpdaNvJ67SkjyUJLBnBnXXQv686BiVW042g03FUmWLXw@mail.gmail.com
    
    Reported-by: "Scargall, Steve" <steve.scargall@intel.com>
    Suggested-by: Michal Hocko <mhocko@kernel.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Nathan Fontenot <ndfont@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Robert Jennings <rcj@linux.vnet.ibm.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Karel Zak <kzak@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200128093542.6908-1-david@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e598e0e19ead92c577f12b51c4c349a1d4fa09a1
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Sat Mar 28 19:17:15 2020 -0700

    mm/swapfile.c: move inode_lock out of claim_swapfile
    
    commit d795a90e2ba024dbf2f22107ae89c210b98b08b8 upstream.
    
    claim_swapfile() currently keeps the inode locked when it is successful,
    or the file is already swapfile (with -EBUSY).  And, on the other error
    cases, it does not lock the inode.
    
    This inconsistency of the lock state and return value is quite confusing
    and actually causing a bad unlock balance as below in the "bad_swap"
    section of __do_sys_swapon().
    
    This commit fixes this issue by moving the inode_lock() and IS_SWAPFILE
    check out of claim_swapfile().  The inode is unlocked in
    "bad_swap_unlock_inode" section, so that the inode is ensured to be
    unlocked at "bad_swap".  Thus, error handling codes after the locking now
    jumps to "bad_swap_unlock_inode" instead of "bad_swap".
    
        =====================================
        WARNING: bad unlock balance detected!
        5.5.0-rc7+ #176 Not tainted
        -------------------------------------
        swapon/4294 is trying to release lock (&sb->s_type->i_mutex_key) at: __do_sys_swapon+0x94b/0x3550
        but there are no more locks to release!
    
        other info that might help us debug this:
        no locks held by swapon/4294.
    
        stack backtrace:
        CPU: 5 PID: 4294 Comm: swapon Not tainted 5.5.0-rc7-BTRFS-ZNS+ #176
        Hardware name: ASUS All Series/H87-PRO, BIOS 2102 07/29/2014
        Call Trace:
         dump_stack+0xa1/0xea
         print_unlock_imbalance_bug.cold+0x114/0x123
         lock_release+0x562/0xed0
         up_write+0x2d/0x490
         __do_sys_swapon+0x94b/0x3550
         __x64_sys_swapon+0x54/0x80
         do_syscall_64+0xa4/0x4b0
         entry_SYSCALL_64_after_hwframe+0x49/0xbe
        RIP: 0033:0x7f15da0a0dc7
    
    Fixes: 1638045c3677 ("mm: set S_SWAPFILE on blockdev swap devices")
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Qais Youef <qais.yousef@arm.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200206090132.154869-1-naohiro.aota@wdc.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5865dd9467910363bb81e3e384bf153638fb07dc
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Mar 26 15:51:35 2020 +0100

    mac80211: mark station unauthorized before key removal
    
    commit b16798f5b907733966fd1a558fca823b3c67e4a1 upstream.
    
    If a station is still marked as authorized, mark it as no longer
    so before removing its keys. This allows frames transmitted to it
    to be rejected, providing additional protection against leaking
    plain text data during the disconnection flow.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200326155133.ccb4fb0bb356.If48f0f0504efdcf16b8921f48c6d3bb2cb763c99@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83c0712e055a6fe1d43ca49316ce8f41669849c0
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Mar 26 15:09:42 2020 +0200

    mac80211: drop data frames without key on encrypted links
    
    commit a0761a301746ec2d92d7fcb82af69c0a6a4339aa upstream.
    
    If we know that we have an encrypted link (based on having had
    a key configured for TX in the past) then drop all data frames
    in the key selection handler if there's no key anymore.
    
    This fixes an issue with mac80211 internal TXQs - there we can
    buffer frames for an encrypted link, but then if the key is no
    longer there when they're dequeued, the frames are sent without
    encryption. This happens if a station is disconnected while the
    frames are still on the TXQ.
    
    Detecting that a link should be encrypted based on a first key
    having been configured for TX is fine as there are no use cases
    for a connection going from with encryption to no encryption.
    With extended key IDs, however, there is a case of having a key
    configured for only decryption, so we can't just trigger this
    behaviour on a key being configured.
    
    Cc: stable@vger.kernel.org
    Reported-by: Jouni Malinen <j@w1.fi>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20200326150855.6865c7f28a14.I9fb1d911b064262d33e33dfba730cdeef83926ca@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8914d82fc87f7886f9d603225b6a9a20e2e9653e
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Mar 25 09:05:32 2020 +0100

    nl80211: fix NL80211_ATTR_CHANNEL_WIDTH attribute type
    
    commit 0016d3201753b59f3ae84b868fe66c86ad256f19 upstream.
    
    The new opmode notification used this attribute with a u8, when
    it's documented as a u32 and indeed used in userspace as such,
    it just happens to work on little-endian systems since userspace
    isn't doing any strict size validation, and the u8 goes into the
    lower byte. Fix this.
    
    Cc: stable@vger.kernel.org
    Fixes: 466b9936bf93 ("cfg80211: Add support to notify station's opmode change to userspace")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20200325090531.be124f0a11c7.Iedbf4e197a85471ebd729b186d5365c0343bf7a8@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a39cb53a172017ff5ef85e921cee7d2908c77c5
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Tue Mar 24 11:16:15 2020 -0400

    scsi: sd: Fix optimal I/O size for devices that change reported values
    
    commit ea697a8bf5a4161e59806fab14f6e4a46dc7dcb0 upstream.
    
    Some USB bridge devices will return a default set of characteristics during
    initialization. And then, once an attached drive has spun up, substitute
    the actual parameters reported by the drive. According to the SCSI spec,
    the device should return a UNIT ATTENTION in case any reported parameters
    change. But in this case the change is made silently after a small window
    where default values are reported.
    
    Commit a83da8a4509d ("scsi: sd: Optimal I/O size should be a multiple of
    physical block size") validated the reported optimal I/O size against the
    physical block size to overcome problems with devices reporting nonsensical
    transfer sizes. However, this validation did not account for the fact that
    aforementioned devices will return default values during a brief window
    during spin-up. The subsequent change in reported characteristics would
    invalidate the checking that had previously been performed.
    
    Unset a previously configured optimal I/O size should the sanity checking
    fail on subsequent revalidate attempts.
    
    Link: https://lore.kernel.org/r/33fb522e-4f61-1b76-914f-c9e6a3553c9b@gmail.com
    Cc: Bryan Gurney <bgurney@redhat.com>
    Cc: <stable@vger.kernel.org>
    Reported-by: Bernhard Sulzer <micraft.b@gmail.com>
    Tested-by: Bernhard Sulzer <micraft.b@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 100ee0bf17f2a855b15a189983a5b5976c043d90
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Mar 16 18:56:52 2020 +0100

    soc: samsung: chipid: Fix return value on non-Exynos platforms
    
    commit c8042d1e5cb3e654b47447229ace3cd092a8fc27 upstream.
    
    Correct the probe return value to -ENODEV on non-Exynos platforms.
    
    Link: https://lore.kernel.org/r/20200316175652.5604-4-krzk@kernel.org
    Fixes: 02fb29882d5c ("soc: samsung: chipid: Drop "syscon" compatible requirement")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeeda19db4ab8b8e5bf653835058728ebe26909f
Author: Shane Francis <bigbeeshane@gmail.com>
Date:   Wed Mar 25 09:07:41 2020 +0000

    drm/radeon: fix scatter-gather mapping with user pages
    
    commit 47f7826c520ecd92ffbffe59ecaa2fe61e42ec70 upstream.
    
    Calls to dma_map_sg may return less segments / entries than requested
    if they fall on page bounderies. The old implementation did not
    support this use case.
    
    Fixes: be62dbf554c5 ("iommu/amd: Convert AMD iommu driver to the dma-iommu api")
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=206461
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=206895
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1056
    Signed-off-by: Shane Francis <bigbeeshane@gmail.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200325090741.21957-4-bigbeeshane@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 834de33d3c387345a4eb7511d039742fa91f87c5
Author: Shane Francis <bigbeeshane@gmail.com>
Date:   Wed Mar 25 09:07:40 2020 +0000

    drm/amdgpu: fix scatter-gather mapping with user pages
    
    commit 0199172f933342d8b1011aae2054a695c25726f4 upstream.
    
    Calls to dma_map_sg may return less segments / entries than requested
    if they fall on page bounderies. The old implementation did not
    support this use case.
    
    Fixes: be62dbf554c5 ("iommu/amd: Convert AMD iommu driver to the dma-iommu api")
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=206461
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=206895
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1056
    Signed-off-by: Shane Francis <bigbeeshane@gmail.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200325090741.21957-3-bigbeeshane@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f22030d75b2e9ee7d700c5e1837b050282668a1
Author: Shane Francis <bigbeeshane@gmail.com>
Date:   Wed Mar 25 09:07:39 2020 +0000

    drm/prime: use dma length macro when mapping sg
    
    commit 42e67b479eab6d26459b80b4867298232b0435e7 upstream.
    
    As dma_map_sg can reorganize scatter-gather lists in a
    way that can cause some later segments to be empty we should
    always use the sg_dma_len macro to fetch the actual length.
    
    This could now be 0 and not need to be mapped to a page or
    address array
    
    Fixes: be62dbf554c5 ("iommu/amd: Convert AMD iommu driver to the dma-iommu api")
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=206461
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=206895
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/1056
    Signed-off-by: Shane Francis <bigbeeshane@gmail.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200325090741.21957-2-bigbeeshane@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9bd63793ca1ed353a95073417459e343d87c274
Author: Dirk Mueller <dmueller@suse.com>
Date:   Tue Jan 14 18:53:41 2020 +0100

    scripts/dtc: Remove redundant YYLOC global declaration
    
    commit e33a814e772cdc36436c8c188d8c42d019fda639 upstream.
    
    gcc 10 will default to -fno-common, which causes this error at link
    time:
    
      (.text+0x0): multiple definition of `yylloc'; dtc-lexer.lex.o (symbol from plugin):(.text+0x0): first defined here
    
    This is because both dtc-lexer as well as dtc-parser define the same
    global symbol yyloc. Before with -fcommon those were merged into one
    defintion. The proper solution would be to to mark this as "extern",
    however that leads to:
    
      dtc-lexer.l:26:16: error: redundant redeclaration of 'yylloc' [-Werror=redundant-decls]
       26 | extern YYLTYPE yylloc;
          |                ^~~~~~
    In file included from dtc-lexer.l:24:
    dtc-parser.tab.h:127:16: note: previous declaration of 'yylloc' was here
      127 | extern YYLTYPE yylloc;
          |                ^~~~~~
    cc1: all warnings being treated as errors
    
    which means the declaration is completely redundant and can just be
    dropped.
    
    Signed-off-by: Dirk Mueller <dmueller@suse.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    [robh: cherry-pick from upstream]
    Cc: stable@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bb76434efae41cf35b3bac318e0a7b6344c7654
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Mar 7 03:32:58 2020 +0900

    tools: Let O= makes handle a relative path with -C option
    
    commit be40920fbf1003c38ccdc02b571e01a75d890c82 upstream.
    
    When I tried to compile tools/perf from the top directory with the -C
    option, the O= option didn't work correctly if I passed a relative path:
    
      $ make O=BUILD -C tools/perf/
      make: Entering directory '/home/mhiramat/ksrc/linux/tools/perf'
        BUILD:   Doing 'make -j8' parallel build
      ../scripts/Makefile.include:4: *** O=/home/mhiramat/ksrc/linux/tools/perf/BUILD does not exist.  Stop.
      make: *** [Makefile:70: all] Error 2
      make: Leaving directory '/home/mhiramat/ksrc/linux/tools/perf'
    
    The O= directory existence check failed because the check script ran in
    the build target directory instead of the directory where I ran the make
    command.
    
    To fix that, once change directory to $(PWD) and check O= directory,
    since the PWD is set to where the make command runs.
    
    Fixes: c883122acc0d ("perf tools: Let O= makes handle relative paths")
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Michal Marek <michal.lkml@markovi.net>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/158351957799.3363.15269768530697526765.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8f0f47d350cb12eb1ee16b02a395f3b0bd9c59e
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Wed Feb 19 14:00:41 2020 -0600

    rtlwifi: rtl8188ee: Fix regression due to commit d1d1a96bdb44
    
    commit c80b18cbb04b7b101af9bd14550f13d9866c646a upstream.
    
    For some unexplained reason, commit d1d1a96bdb44 ("rtlwifi: rtl8188ee:
    Remove local configuration variable") broke at least one system. As
    the only net effect of the change was to remove 2 bytes from the start
    of struct phy_status_rpt, this patch adds 2 bytes of padding at the
    beginning of the struct.
    
    Fixes: d1d1a96bdb44 ("rtlwifi: rtl8188ee: Remove local configuration variable")
    Cc: Stable <stable@vger.kernel.org>  # V5.4+
    Reported-by: Ashish <ashishkumar.yadav@students.iiserpune.ac.in>
    Tested-by: Ashish <ashishkumar.yadav@students.iiserpune.ac.in>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5cf9cdcfa9c0f224d90b174af53b49bce6edf9c
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Feb 28 00:42:01 2020 +0900

    perf probe: Do not depend on dwfl_module_addrsym()
    
    commit 1efde2754275dbd9d11c6e0132a4f09facf297ab upstream.
    
    Do not depend on dwfl_module_addrsym() because it can fail on user-space
    shared libraries.
    
    Actually, same bug was fixed by commit 664fee3dc379 ("perf probe: Do not
    use dwfl_module_addrsym if dwarf_diename finds symbol name"), but commit
    07d369857808 ("perf probe: Fix wrong address verification) reverted to
    get actual symbol address from symtab.
    
    This fixes it again by getting symbol address from DIE, and only if the
    DIE has only address range, it uses dwfl_module_addrsym().
    
    Fixes: 07d369857808 ("perf probe: Fix wrong address verification)
    Reported-by: Alexandre Ghiti <alex@ghiti.fr>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Alexandre Ghiti <alex@ghiti.fr>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sasha Levin <sashal@kernel.org>
    Link: http://lore.kernel.org/lkml/158281812176.476.14164573830975116234.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82602553c3a2c876f86520611d0b93da535e0050
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Feb 28 16:57:42 2020 +0900

    perf probe: Fix to delete multiple probe event
    
    commit 6b8d68f1ce9266b05a55e93c62923ff51daae4c1 upstream.
    
    When we put an event with multiple probes, perf-probe fails to delete
    with filters. This comes from a failure to list up the event name
    because of overwrapping its name.
    
    To fix this issue, skip to list up the event which has same name.
    
    Without this patch:
    
      # perf probe -l \*
        probe_perf:map__map_ip (on perf_sample__fprintf_brstackoff:21@
        probe_perf:map__map_ip (on perf_sample__fprintf_brstackoff:25@
        probe_perf:map__map_ip (on append_inlines:12@util/machine.c in
        probe_perf:map__map_ip (on unwind_entry:19@util/machine.c in /
        probe_perf:map__map_ip (on map__map_ip@util/map.h in /home/mhi
        probe_perf:map__map_ip (on map__map_ip@util/map.h in /home/mhi
      # perf probe -d \*
      "*" does not hit any event.
        Error: Failed to delete events. Reason: No such file or directory (Code: -2)
    
    With it:
    
      # perf probe -d \*
      Removed event: probe_perf:map__map_ip
      #
    
    Fixes: 72363540c009 ("perf probe: Support multiprobe event")
    Reported-by: Arnaldo Carvalho de Melo <acme@kernel.org>
    Reported-by: He Zhe <zhe.he@windriver.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/158287666197.16697.7514373548551863562.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26ca1235389d022d0824a65ce2b0db95a249b2f5
Author: Borislav Petkov <bp@suse.de>
Date:   Wed Mar 18 19:27:48 2020 +0100

    x86/ioremap: Fix CONFIG_EFI=n build
    
    commit 870b4333a62e45b0b2000d14b301b7b8b8cad9da upstream.
    
    In order to use efi_mem_type(), one needs CONFIG_EFI enabled. Otherwise
    that function is undefined. Use IS_ENABLED() to check and avoid the
    ifdeffery as the compiler optimizes away the following unreachable code
    then.
    
    Fixes: 985e537a4082 ("x86/ioremap: Map EFI runtime services data as encrypted for SEV")
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/7561e981-0d9b-d62c-0ef2-ce6007aff1ab@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efd54358451715c102346d6cbdb4511527abae07
Author: Roger Quadros <rogerq@ti.com>
Date:   Mon Mar 16 12:27:31 2020 +0200

    ARM: dts: omap5: Add bus_dma_limit for L3 bus
    
    commit dfa7ea303f56a3a8b1ed3b91ef35af2da67ca4ee upstream.
    
    The L3 interconnect's memory map is from 0x0 to
    0xffffffff. Out of this, System memory (SDRAM) can be
    accessed from 0x80000000 to 0xffffffff (2GB)
    
    OMAP5 does support 4GB of SDRAM but upper 2GB can only be
    accessed by the MPU subsystem.
    
    Add the dma-ranges property to reflect the physical address limit
    of the L3 bus.
    
    Cc: stable@kernel.org
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b52ab1c0772e22d6b6b2b9fcfdeca94920613aac
Author: Roger Quadros <rogerq@ti.com>
Date:   Fri Mar 13 11:47:17 2020 +0200

    ARM: dts: dra7: Add bus_dma_limit for L3 bus
    
    commit cfb5d65f25959f724081bae8445a0241db606af6 upstream.
    
    The L3 interconnect's memory map is from 0x0 to
    0xffffffff. Out of this, System memory (SDRAM) can be
    accessed from 0x80000000 to 0xffffffff (2GB)
    
    DRA7 does support 4GB of SDRAM but upper 2GB can only be
    accessed by the MPU subsystem.
    
    Add the dma-ranges property to reflect the physical address limit
    of the L3 bus.
    
    Issues ere observed only with SATA on DRA7-EVM with 4GB RAM
    and CONFIG_ARM_LPAE enabled. This is because the controller
    supports 64-bit DMA and its driver sets the dma_mask to 64-bit
    thus resulting in DMA accesses beyond L3 limit of 2G.
    
    Setting the correct bus_dma_limit fixes the issue.
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Cc: stable@kernel.org
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d73c4c78807fc628b785547cbed35f41b01a5ec4
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Fri Mar 20 11:07:07 2020 -0500

    KVM: SVM: Issue WBINVD after deactivating an SEV guest
    
    commit 2e2409afe5f0c284c7dfe5504058e8d115806a7d upstream.
    
    Currently, CLFLUSH is used to flush SEV guest memory before the guest is
    terminated (or a memory hotplug region is removed). However, CLFLUSH is
    not enough to ensure that SEV guest tagged data is flushed from the cache.
    
    With 33af3a7ef9e6 ("KVM: SVM: Reduce WBINVD/DF_FLUSH invocations"), the
    original WBINVD was removed. This then exposed crashes at random times
    because of a cache flush race with a page that had both a hypervisor and
    a guest tag in the cache.
    
    Restore the WBINVD when destroying an SEV guest and add a WBINVD to the
    svm_unregister_enc_region() function to ensure hotplug memory is flushed
    when removed. The DF_FLUSH can still be avoided at this point.
    
    Fixes: 33af3a7ef9e6 ("KVM: SVM: Reduce WBINVD/DF_FLUSH invocations")
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Message-Id: <c8bf9087ca3711c5770bdeaafa3e45b717dc5ef4.1584720426.git.thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a078275ea495d3709838b1cac5dd71bfaec8a6d
Author: Luis Henriques <lhenriques@suse.com>
Date:   Thu Mar 19 11:43:48 2020 +0000

    ceph: fix memory leak in ceph_cleanup_snapid_map()
    
    commit c8d6ee01449cd0d2f30410681cccb616a88f50b1 upstream.
    
    kmemleak reports the following memory leak:
    
    unreferenced object 0xffff88821feac8a0 (size 96):
      comm "kworker/1:0", pid 17, jiffies 4294896362 (age 20.512s)
      hex dump (first 32 bytes):
        a0 c8 ea 1f 82 88 ff ff 00 c9 ea 1f 82 88 ff ff  ................
        00 00 00 00 00 00 00 00 00 01 00 00 00 00 ad de  ................
      backtrace:
        [<00000000b3ea77fb>] ceph_get_snapid_map+0x75/0x2a0
        [<00000000d4060942>] fill_inode+0xb26/0x1010
        [<0000000049da6206>] ceph_readdir_prepopulate+0x389/0xc40
        [<00000000e2fe2549>] dispatch+0x11ab/0x1521
        [<000000007700b894>] ceph_con_workfn+0xf3d/0x3240
        [<0000000039138a41>] process_one_work+0x24d/0x590
        [<00000000eb751f34>] worker_thread+0x4a/0x3d0
        [<000000007e8f0d42>] kthread+0xfb/0x130
        [<00000000d49bd1fa>] ret_from_fork+0x3a/0x50
    
    A kfree is missing while looping the 'to_free' list of ceph_snapid_map
    objects.
    
    Cc: stable@vger.kernel.org
    Fixes: 75c9627efb72 ("ceph: map snapid to anonymous bdev ID")
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7940cfb0627a0f73ba95de8eb68676a0f6c4b7f
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon Mar 9 12:03:14 2020 +0100

    ceph: check POOL_FLAG_FULL/NEARFULL in addition to OSDMAP_FULL/NEARFULL
    
    commit 7614209736fbc4927584d4387faade4f31444fce upstream.
    
    CEPH_OSDMAP_FULL/NEARFULL aren't set since mimic, so we need to consult
    per-pool flags as well.  Unfortunately the backwards compatibility here
    is lacking:
    
    - the change that deprecated OSDMAP_FULL/NEARFULL went into mimic, but
      was guarded by require_osd_release >= RELEASE_LUMINOUS
    - it was subsequently backported to luminous in v12.2.2, but that makes
      no difference to clients that only check OSDMAP_FULL/NEARFULL because
      require_osd_release is not client-facing -- it is for OSDs
    
    Since all kernels are affected, the best we can do here is just start
    checking both map flags and pool flags and send that to stable.
    
    These checks are best effort, so take osdc->lock and look up pool flags
    just once.  Remove the FIXME, since filesystem quotas are checked above
    and RADOS quotas are reflected in POOL_FLAG_FULL: when the pool reaches
    its quota, both POOL_FLAG_FULL and POOL_FLAG_FULL_QUOTA are set.
    
    Cc: stable@vger.kernel.org
    Reported-by: Yanhu Cao <gmayyyha@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Acked-by: Sage Weil <sage@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13f2263540a84e53b019444cb819c73749edc990
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Mar 10 09:53:39 2020 +0200

    RDMA/mad: Do not crash if the rdma device does not have a umad interface
    
    commit 5bdfa854013ce4193de0d097931fd841382c76a7 upstream.
    
    Non-IB devices do not have a umad interface and the client_data will be
    left set to NULL. In this case calling get_nl_info() will try to kref a
    NULL cdev causing a crash:
    
      general protection fault, probably for non-canonical address 0xdffffc00000000ba: 0000 [#1] PREEMPT SMP KASAN
      KASAN: null-ptr-deref in range [0x00000000000005d0-0x00000000000005d7]
      CPU: 0 PID: 20851 Comm: syz-executor.0 Not tainted 5.6.0-rc2-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      RIP: 0010:kobject_get+0x35/0x150 lib/kobject.c:640
      Code: 53 e8 3f b0 8b f9 4d 85 e4 0f 84 a2 00 00 00 e8 31 b0 8b f9 49 8d 7c 24 3c 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f  b6 04 02 48 89 fa
    +83 e2 07 38 d0 7f 08 84 c0 0f 85 eb 00 00 00
      RSP: 0018:ffffc9000946f1a0 EFLAGS: 00010203
      RAX: dffffc0000000000 RBX: ffffffff85bdbbb0 RCX: ffffc9000bf22000
      RDX: 00000000000000ba RSI: ffffffff87e9d78f RDI: 00000000000005d4
      RBP: ffffc9000946f1b8 R08: ffff8880581a6440 R09: ffff8880581a6cd0
      R10: fffffbfff154b838 R11: ffffffff8aa5c1c7 R12: 0000000000000598
      R13: 0000000000000000 R14: ffffc9000946f278 R15: ffff88805cb0c4d0
      FS:  00007faa9e8af700(0000) GS:ffff8880ae800000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000001b30121000 CR3: 000000004515d000 CR4: 00000000001406f0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       get_device+0x25/0x40 drivers/base/core.c:2574
       __ib_get_client_nl_info+0x205/0x2e0 drivers/infiniband/core/device.c:1861
       ib_get_client_nl_info+0x35/0x180 drivers/infiniband/core/device.c:1881
       nldev_get_chardev+0x575/0xac0 drivers/infiniband/core/nldev.c:1621
       rdma_nl_rcv_msg drivers/infiniband/core/netlink.c:195 [inline]
       rdma_nl_rcv_skb drivers/infiniband/core/netlink.c:239 [inline]
       rdma_nl_rcv+0x5d9/0x980 drivers/infiniband/core/netlink.c:259
       netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
       netlink_unicast+0x59e/0x7e0 net/netlink/af_netlink.c:1329
       netlink_sendmsg+0x91c/0xea0 net/netlink/af_netlink.c:1918
       sock_sendmsg_nosec net/socket.c:652 [inline]
       sock_sendmsg+0xd7/0x130 net/socket.c:672
       ____sys_sendmsg+0x753/0x880 net/socket.c:2343
       ___sys_sendmsg+0x100/0x170 net/socket.c:2397
       __sys_sendmsg+0x105/0x1d0 net/socket.c:2430
       __do_sys_sendmsg net/socket.c:2439 [inline]
       __se_sys_sendmsg net/socket.c:2437 [inline]
       __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2437
       do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Cc: stable@kernel.org
    Fixes: 8f71bb0030b8 ("RDMA: Report available cdevs through RDMA_NLDEV_CMD_GET_CHARDEV")
    Link: https://lore.kernel.org/r/20200310075339.238090-1-leon@kernel.org
    Reported-by: syzbot+46fe08363dbba223dec5@syzkaller.appspotmail.com
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62c25e795840df3e0029ebb552e8dedda2bc71e8
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Mon Mar 9 16:05:15 2020 -0300

    RDMA/nl: Do not permit empty devices names during RDMA_NLDEV_CMD_NEWLINK/SET
    
    commit 7aefa6237cfe4a6fcf06a8656eee988b36f8fefc upstream.
    
    Empty device names cannot be added to sysfs and crash with:
    
      kobject: (00000000f9de3792): attempted to be registered with empty name!
      WARNING: CPU: 1 PID: 10856 at lib/kobject.c:234 kobject_add_internal+0x7ac/0x9a0 lib/kobject.c:234
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 1 PID: 10856 Comm: syz-executor459 Not tainted 5.6.0-rc3-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x197/0x210 lib/dump_stack.c:118
       panic+0x2e3/0x75c kernel/panic.c:221
       __warn.cold+0x2f/0x3e kernel/panic.c:582
       report_bug+0x289/0x300 lib/bug.c:195
       fixup_bug arch/x86/kernel/traps.c:174 [inline]
       fixup_bug arch/x86/kernel/traps.c:169 [inline]
       do_error_trap+0x11b/0x200 arch/x86/kernel/traps.c:267
       do_invalid_op+0x37/0x50 arch/x86/kernel/traps.c:286
       invalid_op+0x23/0x30 arch/x86/entry/entry_64.S:1027
      RIP: 0010:kobject_add_internal+0x7ac/0x9a0 lib/kobject.c:234
      Code: 7a ca ca f9 e9 f0 f8 ff ff 4c 89 f7 e8 cd ca ca f9 e9 95 f9 ff ff e8 13 25 8c f9 4c 89 e6 48 c7 c7 a0 08 1a 89 e8 a3 76 5c f9 <0f> 0b 41 bd ea ff ff ff e9 52 ff ff ff e8 f2 24 8c f9 0f 0b e8 eb
      RSP: 0018:ffffc90002006eb0 EFLAGS: 00010286
      RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
      RDX: 0000000000000000 RSI: ffffffff815eae46 RDI: fffff52000400dc8
      RBP: ffffc90002006f08 R08: ffff8880972ac500 R09: ffffed1015d26659
      R10: ffffed1015d26658 R11: ffff8880ae9332c7 R12: ffff888093034668
      R13: 0000000000000000 R14: ffff8880a69d7600 R15: 0000000000000001
       kobject_add_varg lib/kobject.c:390 [inline]
       kobject_add+0x150/0x1c0 lib/kobject.c:442
       device_add+0x3be/0x1d00 drivers/base/core.c:2412
       ib_register_device drivers/infiniband/core/device.c:1371 [inline]
       ib_register_device+0x93e/0xe40 drivers/infiniband/core/device.c:1343
       rxe_register_device+0x52e/0x655 drivers/infiniband/sw/rxe/rxe_verbs.c:1231
       rxe_add+0x122b/0x1661 drivers/infiniband/sw/rxe/rxe.c:302
       rxe_net_add+0x91/0xf0 drivers/infiniband/sw/rxe/rxe_net.c:539
       rxe_newlink+0x39/0x90 drivers/infiniband/sw/rxe/rxe.c:318
       nldev_newlink+0x28a/0x430 drivers/infiniband/core/nldev.c:1538
       rdma_nl_rcv_msg drivers/infiniband/core/netlink.c:195 [inline]
       rdma_nl_rcv_skb drivers/infiniband/core/netlink.c:239 [inline]
       rdma_nl_rcv+0x5d9/0x980 drivers/infiniband/core/netlink.c:259
       netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
       netlink_unicast+0x59e/0x7e0 net/netlink/af_netlink.c:1329
       netlink_sendmsg+0x91c/0xea0 net/netlink/af_netlink.c:1918
       sock_sendmsg_nosec net/socket.c:652 [inline]
       sock_sendmsg+0xd7/0x130 net/socket.c:672
       ____sys_sendmsg+0x753/0x880 net/socket.c:2343
       ___sys_sendmsg+0x100/0x170 net/socket.c:2397
       __sys_sendmsg+0x105/0x1d0 net/socket.c:2430
       __do_sys_sendmsg net/socket.c:2439 [inline]
       __se_sys_sendmsg net/socket.c:2437 [inline]
       __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2437
       do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Prevent empty names when checking the name provided from userspace during
    newlink and rename.
    
    Fixes: 3856ec4b93c9 ("RDMA/core: Add RDMA_NLDEV_CMD_NEWLINK/DELLINK support")
    Fixes: 05d940d3a3ec ("RDMA/nldev: Allow IB device rename through RDMA netlink")
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20200309191648.GA30852@ziepe.ca
    Reported-and-tested-by: syzbot+da615ac67d4dbea32cbc@syzkaller.appspotmail.com
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ffabd46e4fa30e4a23c92f984bd015d07e607f9
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Mar 6 14:23:26 2020 +0100

    gpiolib: Fix irq_disable() semantics
    
    commit 8959b304c7062889b1276092cc8590dc1ba98f65 upstream.
    
    The implementation if .irq_disable() which kicks in between
    the gpiolib and the driver is not properly mimicking the
    expected semantics of the irqchip core: the irqchip will
    call .irq_disable() if that exists, else it will call
    mask_irq() which first checks if .irq_mask() is defined
    before calling it.
    
    Since we are calling it unconditionally, we get this bug
    from drivers/pinctrl/qcom/pinctrl-ssbi-gpio.c, as it only
    defines .irq_mask_ack and not .irq_mask:
    
      Unable to handle kernel NULL pointer dereference at virtual address 00000000
      pgd = (ptrval)
      (...)
      PC is at 0x0
      LR is at gpiochip_irq_disable+0x20/0x30
    
    Fix this by only calling .irq_mask() if it exists.
    
    Cc: Brian Masney <masneyb@onstation.org>
    Cc: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Fixes: 461c1a7d4733 ("gpiolib: override irq_enable/disable")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20200306132326.1329640-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3193d1d3edf7610d7a70fa55b040dc22683daf12
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Wed Mar 4 14:16:07 2020 -0400

    RDMA/odp: Fix leaking the tgid for implicit ODP
    
    commit 0f9826f4753f74f935e18c2a640484ecbd941346 upstream.
    
    The tgid used to be part of ib_umem_free_notifier(), when it was reworked
    it got moved to release, but it should have been unconditional as all umem
    alloc paths get the tgid.
    
    As is, creating an implicit ODP will leak the tgid reference.
    
    Link: https://lore.kernel.org/r/20200304181607.GA22412@ziepe.ca
    Cc: stable@kernel.org
    Fixes: f25a546e6529 ("RDMA/odp: Use mmu_interval_notifier_insert()")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09319e6723fea4ebe0f07019e19a44665ba087eb
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Mon Mar 9 16:32:00 2020 -0300

    RDMA/core: Fix missing error check on dev_set_name()
    
    commit f2f2b3bbf0d9f8d090b9a019679223b2bd1c66c4 upstream.
    
    If name memory allocation fails the name will be left empty and
    device_add_one() will crash:
    
      kobject: (0000000004952746): attempted to be registered with empty name!
      WARNING: CPU: 0 PID: 329 at lib/kobject.c:234 kobject_add_internal+0x7ac/0x9a0 lib/kobject.c:234
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 0 PID: 329 Comm: syz-executor.5 Not tainted 5.6.0-rc2-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x197/0x210 lib/dump_stack.c:118
       panic+0x2e3/0x75c kernel/panic.c:221
       __warn.cold+0x2f/0x3e kernel/panic.c:582
       report_bug+0x289/0x300 lib/bug.c:195
       fixup_bug arch/x86/kernel/traps.c:174 [inline]
       fixup_bug arch/x86/kernel/traps.c:169 [inline]
       do_error_trap+0x11b/0x200 arch/x86/kernel/traps.c:267
       do_invalid_op+0x37/0x50 arch/x86/kernel/traps.c:286
       invalid_op+0x23/0x30 arch/x86/entry/entry_64.S:1027
      RIP: 0010:kobject_add_internal+0x7ac/0x9a0 lib/kobject.c:234
      Code: 1a 98 ca f9 e9 f0 f8 ff ff 4c 89 f7 e8 6d 98 ca f9 e9 95 f9 ff ff e8 c3 f0 8b f9 4c 89 e6 48 c7 c7 a0 0e 1a 89 e8 e3 41 5c f9 <0f> 0b 41 bd ea ff ff ff e9 52 ff ff ff e8 a2 f0 8b f9 0f 0b e8 9b
      RSP: 0018:ffffc90005b27908 EFLAGS: 00010286
      RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
      RDX: 0000000000040000 RSI: ffffffff815eae46 RDI: fffff52000b64f13
      RBP: ffffc90005b27960 R08: ffff88805aeba480 R09: ffffed1015d06659
      R10: ffffed1015d06658 R11: ffff8880ae8332c7 R12: ffff8880a37fd000
      R13: 0000000000000000 R14: ffff888096691780 R15: 0000000000000001
       kobject_add_varg lib/kobject.c:390 [inline]
       kobject_add+0x150/0x1c0 lib/kobject.c:442
       device_add+0x3be/0x1d00 drivers/base/core.c:2412
       add_one_compat_dev drivers/infiniband/core/device.c:901 [inline]
       add_one_compat_dev+0x46a/0x7e0 drivers/infiniband/core/device.c:857
       rdma_dev_init_net+0x2eb/0x490 drivers/infiniband/core/device.c:1120
       ops_init+0xb3/0x420 net/core/net_namespace.c:137
       setup_net+0x2d5/0x8b0 net/core/net_namespace.c:327
       copy_net_ns+0x29e/0x5a0 net/core/net_namespace.c:468
       create_new_namespaces+0x403/0xb50 kernel/nsproxy.c:108
       unshare_nsproxy_namespaces+0xc2/0x200 kernel/nsproxy.c:229
       ksys_unshare+0x444/0x980 kernel/fork.c:2955
       __do_sys_unshare kernel/fork.c:3023 [inline]
       __se_sys_unshare kernel/fork.c:3021 [inline]
       __x64_sys_unshare+0x31/0x40 kernel/fork.c:3021
       do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Link: https://lore.kernel.org/r/20200309193200.GA10633@ziepe.ca
    Cc: stable@kernel.org
    Fixes: 4e0f7b907072 ("RDMA/core: Implement compat device/sysfs tree in net namespace")
    Reported-by: syzbot+ab4dae63f7d310641ded@syzkaller.appspotmail.com
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee39566e5203d7896ef0168ee69c46b185f5c989
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Fri Mar 13 08:39:57 2020 -0400

    IB/rdmavt: Free kernel completion queue when done
    
    commit 941224e09483ea3428ffc6402de56a4a2e2cb6da upstream.
    
    When a kernel ULP requests the rdmavt to create a completion queue, it
    allocated the queue and set cq->kqueue to point to it. However, when the
    completion queue is destroyed, cq->queue is freed instead, leading to a
    memory leak:
    
    https://lore.kernel.org/r/215235485.15264050.1583334487658.JavaMail.zimbra@redhat.com
    
     unreferenced object 0xffffc90006639000 (size 12288):
     comm "kworker/u128:0", pid 8, jiffies 4295777598 (age 589.085s)
        hex dump (first 32 bytes):
          4d 00 00 00 4d 00 00 00 00 c0 08 ac 8b 88 ff ff  M...M...........
          00 00 00 00 80 00 00 00 00 00 00 00 10 00 00 00  ................
        backtrace:
          [<0000000035a3d625>] __vmalloc_node_range+0x361/0x720
          [<000000002942ce4f>] __vmalloc_node.constprop.30+0x63/0xb0
          [<00000000f228f784>] rvt_create_cq+0x98a/0xd80 [rdmavt]
          [<00000000b84aec66>] __ib_alloc_cq_user+0x281/0x1260 [ib_core]
          [<00000000ef3764be>] nvme_rdma_cm_handler+0xdb7/0x1b80 [nvme_rdma]
          [<00000000936b401c>] cma_cm_event_handler+0xb7/0x550 [rdma_cm]
          [<00000000d9c40b7b>] addr_handler+0x195/0x310 [rdma_cm]
          [<00000000c7398a03>] process_one_req+0xdd/0x600 [ib_core]
          [<000000004d29675b>] process_one_work+0x920/0x1740
          [<00000000efedcdb5>] worker_thread+0x87/0xb40
          [<000000005688b340>] kthread+0x327/0x3f0
          [<0000000043a168d6>] ret_from_fork+0x3a/0x50
    
    This patch fixes the issue by freeing cq->kqueue instead.
    
    Fixes: 239b0e52d8aa ("IB/hfi1: Move rvt_cq_wc struct into uapi directory")
    Link: https://lore.kernel.org/r/20200313123957.14343.43879.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org> # 5.4.x
    Reported-by: Yi Zhang <yi.zhang@redhat.com>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 641603262ae6f0c6f6a1ed68d125576026c32320
Author: Eugene Syromiatnikov <esyr@redhat.com>
Date:   Tue Mar 24 15:53:50 2020 -0700

    Input: avoid BIT() macro usage in the serio.h UAPI header
    
    commit 52afa505a03d914081f40cb869a3248567a57573 upstream.
    
    The commit 19ba1eb15a2a ("Input: psmouse - add a custom serio protocol
    to send extra information") introduced usage of the BIT() macro
    for SERIO_* flags; this macro is not provided in UAPI headers.
    Replace if with similarly defined _BITUL() macro defined
    in <linux/const.h>.
    
    Fixes: 19ba1eb15a2a ("Input: psmouse - add a custom serio protocol to send extra information")
    Signed-off-by: Eugene Syromiatnikov <esyr@redhat.com>
    Cc: <stable@vger.kernel.org> # v5.0+
    Link: https://lore.kernel.org/r/20200324041341.GA32335@asgard.redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef966be51e86796a80eca3e4b241d1f9cecefdf5
Author: Yussuf Khalil <dev@pp3345.net>
Date:   Sat Mar 7 14:16:31 2020 -0800

    Input: synaptics - enable RMI on HP Envy 13-ad105ng
    
    commit 1369d0abe469fb4cdea8a5bce219d38cb857a658 upstream.
    
    This laptop (and perhaps other variants of the same model) reports an
    SMBus-capable Synaptics touchpad. Everything (including suspend and
    resume) works fine when RMI is enabled via the kernel command line, so
    let's add it to the whitelist.
    
    Signed-off-by: Yussuf Khalil <dev@pp3345.net>
    Link: https://lore.kernel.org/r/20200307213508.267187-1-dev@pp3345.net
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48394019bf584e5e5fb2660d97577f1e9117ba9c
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Mar 25 10:57:54 2020 -0700

    Input: fix stale timestamp on key autorepeat events
    
    commit 4134252ab7e2c339a54302b88496cb5a89cdbaec upstream.
    
    We need to refresh timestamp when emitting key autorepeat events, otherwise
    they will carry timestamp of the original key press event.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=206929
    Fixes: 3b51c44bd693 ("Input: allow drivers specify timestamp for input events")
    Cc: stable@vger.kernel.org
    Reported-by: teika kazura <teika@gmx.com>
    Tested-by: teika kazura <teika@gmx.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcd94e14125c7dc5a3be95c64f0c69b0a09c76d7
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 6 11:50:51 2020 -0800

    Input: raydium_i2c_ts - fix error codes in raydium_i2c_boot_trigger()
    
    commit 32cf3a610c35cb21e3157f4bbf29d89960e30a36 upstream.
    
    These functions are supposed to return negative error codes but instead
    it returns true on failure and false on success.  The error codes are
    eventually propagated back to user space.
    
    Fixes: 48a2b783483b ("Input: add Raydium I2C touchscreen driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200303101306.4potflz7na2nn3od@kili.mountain
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f672253e6ecc6fb78806336a05050b1fb4f5e94
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Mon Nov 4 23:00:48 2019 +0800

    i2c: hix5hd2: add missed clk_disable_unprepare in remove
    
    commit e1b9f99ff8c40bba6e59de9ad4a659447b1e4112 upstream.
    
    The driver forgets to disable and unprepare clk when remove.
    Add a call to clk_disable_unprepare to fix it.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1902e652194688034eb51b2a7b96ec15b5a7291e
Author: Megha Dey <megha.dey@linux.intel.com>
Date:   Sat Mar 14 11:39:59 2020 +0800

    iommu/vt-d: Populate debugfs if IOMMUs are detected
    
    [ Upstream commit 1da8347d8505c137fb07ff06bbcd3f2bf37409bc ]
    
    Currently, the intel iommu debugfs directory(/sys/kernel/debug/iommu/intel)
    gets populated only when DMA remapping is enabled (dmar_disabled = 0)
    irrespective of whether interrupt remapping is enabled or not.
    
    Instead, populate the intel iommu debugfs directory if any IOMMUs are
    detected.
    
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: ee2636b8670b1 ("iommu/vt-d: Enable base Intel IOMMU debugfs support")
    Signed-off-by: Megha Dey <megha.dey@linux.intel.com>
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64eaf497746e95d97e3f2883b6274d07b117e8ff
Author: Megha Dey <megha.dey@linux.intel.com>
Date:   Mon Mar 9 13:09:46 2020 -0700

    iommu/vt-d: Fix debugfs register reads
    
    [ Upstream commit ba3b01d7a6f4ab9f8a0557044c9a7678f64ae070 ]
    
    Commit 6825d3ea6cde ("iommu/vt-d: Add debugfs support to show register
    contents") dumps the register contents for all IOMMU devices.
    
    Currently, a 64 bit read(dmar_readq) is done for all the IOMMU registers,
    even though some of the registers are 32 bits, which is incorrect.
    
    Use the correct read function variant (dmar_readl/dmar_readq) while
    reading the contents of 32/64 bit registers respectively.
    
    Signed-off-by: Megha Dey <megha.dey@linux.intel.com>
    Link: https://lore.kernel.org/r/1583784587-26126-2-git-send-email-megha.dey@linux.intel.com
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ca96ac200c8e7a589ac69f3b1675fd18ed9e5bc
Author: Dominik Czarnota <dominik.b.czarnota@gmail.com>
Date:   Mon Mar 9 16:22:50 2020 +0100

    sxgbe: Fix off by one in samsung driver strncpy size arg
    
    [ Upstream commit f3cc008bf6d59b8d93b4190e01d3e557b0040e15 ]
    
    This patch fixes an off-by-one error in strncpy size argument in
    drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c. The issue is that in:
    
            strncmp(opt, "eee_timer:", 6)
    
    the passed string literal: "eee_timer:" has 10 bytes (without the NULL
    byte) and the passed size argument is 6. As a result, the logic will
    also accept other, malformed strings, e.g. "eee_tiXXX:".
    
    This bug doesn't seem to have any security impact since its present in
    module's cmdline parsing code.
    
    Signed-off-by: Dominik Czarnota <dominik.b.czarnota@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66deedad8d92632b149f6745b8ee452a8397afa8
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Mar 10 15:06:54 2020 -0700

    dpaa_eth: Remove unnecessary boolean expression in dpaa_get_headroom
    
    [ Upstream commit 7395f62d95aafacdb9bd4996ec2f95b4a655d7e6 ]
    
    Clang warns:
    
    drivers/net/ethernet/freescale/dpaa/dpaa_eth.c:2860:9: warning:
    converting the result of '?:' with integer constants to a boolean always
    evaluates to 'true' [-Wtautological-constant-compare]
            return DPAA_FD_DATA_ALIGNMENT ? ALIGN(headroom,
                   ^
    drivers/net/ethernet/freescale/dpaa/dpaa_eth.c:131:34: note: expanded
    from macro 'DPAA_FD_DATA_ALIGNMENT'
    \#define DPAA_FD_DATA_ALIGNMENT  (fman_has_errata_a050385() ? 64 : 16)
                                     ^
    1 warning generated.
    
    This was exposed by commit 3c68b8fffb48 ("dpaa_eth: FMan erratum A050385
    workaround") even though it appears to have been an issue since the
    introductory commit 9ad1a3749333 ("dpaa_eth: add support for DPAA
    Ethernet") since DPAA_FD_DATA_ALIGNMENT has never been able to be zero.
    
    Just replace the whole boolean expression with the true branch, as it is
    always been true.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/928
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79d6afb36c8c7b20351c80f8ef56f7dda1292f4f
Author: Nicolas Cavallari <nicolas.cavallari@green-communications.fr>
Date:   Thu Mar 5 15:04:09 2020 +0100

    mac80211: Do not send mesh HWMP PREQ if HWMP is disabled
    
    [ Upstream commit ba32679cac50c38fdf488296f96b1f3175532b8e ]
    
    When trying to transmit to an unknown destination, the mesh code would
    unconditionally transmit a HWMP PREQ even if HWMP is not the current
    path selection algorithm.
    
    Signed-off-by: Nicolas Cavallari <nicolas.cavallari@green-communications.fr>
    Link: https://lore.kernel.org/r/20200305140409.12204-1-cavallar@lri.fr
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f99477cded195e2531a8a13f4690dd9f3026c46
Author: Wen Xiong <wenxiong@linux.vnet.ibm.com>
Date:   Fri Mar 6 09:57:28 2020 -0600

    scsi: ipr: Fix softlockup when rescanning devices in petitboot
    
    [ Upstream commit 394b61711f3ce33f75bf70a3e22938464a13b3ee ]
    
    When trying to rescan disks in petitboot shell, we hit the following
    softlockup stacktrace:
    
    Kernel panic - not syncing: System is deadlocked on memory
    [  241.223394] CPU: 32 PID: 693 Comm: sh Not tainted 5.4.16-openpower1 #1
    [  241.223406] Call Trace:
    [  241.223415] [c0000003f07c3180] [c000000000493fc4] dump_stack+0xa4/0xd8 (unreliable)
    [  241.223432] [c0000003f07c31c0] [c00000000007d4ac] panic+0x148/0x3cc
    [  241.223446] [c0000003f07c3260] [c000000000114b10] out_of_memory+0x468/0x4c4
    [  241.223461] [c0000003f07c3300] [c0000000001472b0] __alloc_pages_slowpath+0x594/0x6d8
    [  241.223476] [c0000003f07c3420] [c00000000014757c] __alloc_pages_nodemask+0x188/0x1a4
    [  241.223492] [c0000003f07c34a0] [c000000000153e10] alloc_pages_current+0xcc/0xd8
    [  241.223508] [c0000003f07c34e0] [c0000000001577ac] alloc_slab_page+0x30/0x98
    [  241.223524] [c0000003f07c3520] [c0000000001597fc] new_slab+0x138/0x40c
    [  241.223538] [c0000003f07c35f0] [c00000000015b204] ___slab_alloc+0x1e4/0x404
    [  241.223552] [c0000003f07c36c0] [c00000000015b450] __slab_alloc+0x2c/0x48
    [  241.223566] [c0000003f07c36f0] [c00000000015b754] kmem_cache_alloc_node+0x9c/0x1b4
    [  241.223582] [c0000003f07c3760] [c000000000218c48] blk_alloc_queue_node+0x34/0x270
    [  241.223599] [c0000003f07c37b0] [c000000000226574] blk_mq_init_queue+0x2c/0x78
    [  241.223615] [c0000003f07c37e0] [c0000000002ff710] scsi_mq_alloc_queue+0x28/0x70
    [  241.223631] [c0000003f07c3810] [c0000000003005b8] scsi_alloc_sdev+0x184/0x264
    [  241.223647] [c0000003f07c38a0] [c000000000300ba0] scsi_probe_and_add_lun+0x288/0xa3c
    [  241.223663] [c0000003f07c3a00] [c000000000301768] __scsi_scan_target+0xcc/0x478
    [  241.223679] [c0000003f07c3b20] [c000000000301c64] scsi_scan_channel.part.9+0x74/0x7c
    [  241.223696] [c0000003f07c3b70] [c000000000301df4] scsi_scan_host_selected+0xe0/0x158
    [  241.223712] [c0000003f07c3bd0] [c000000000303f04] store_scan+0x104/0x114
    [  241.223727] [c0000003f07c3cb0] [c0000000002d5ac4] dev_attr_store+0x30/0x4c
    [  241.223741] [c0000003f07c3cd0] [c0000000001dbc34] sysfs_kf_write+0x64/0x78
    [  241.223756] [c0000003f07c3cf0] [c0000000001da858] kernfs_fop_write+0x170/0x1b8
    [  241.223773] [c0000003f07c3d40] [c0000000001621fc] __vfs_write+0x34/0x60
    [  241.223787] [c0000003f07c3d60] [c000000000163c2c] vfs_write+0xa8/0xcc
    [  241.223802] [c0000003f07c3db0] [c000000000163df4] ksys_write+0x70/0xbc
    [  241.223816] [c0000003f07c3e20] [c00000000000b40c] system_call+0x5c/0x68
    
    As a part of the scan process Linux will allocate and configure a
    scsi_device for each target to be scanned. If the device is not present,
    then the scsi_device is torn down. As a part of scsi_device teardown a
    workqueue item will be scheduled and the lockups we see are because there
    are 250k workqueue items to be processed.  Accoding to the specification of
    SIS-64 sas controller, max_channel should be decreased on SIS-64 adapters
    to 4.
    
    The patch fixes softlockup issue.
    
    Thanks for Oliver Halloran's help with debugging and explanation!
    
    Link: https://lore.kernel.org/r/1583510248-23672-1-git-send-email-wenxiong@linux.vnet.ibm.com
    Signed-off-by: Wen Xiong <wenxiong@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1937a2118a18d801947aeeafe8a1256558c9eb98
Author: Juliet Kim <julietk@linux.vnet.ibm.com>
Date:   Tue Mar 10 09:23:58 2020 -0500

    ibmvnic: Do not process device remove during device reset
    
    [ Upstream commit 7d7195a026bac47ac9943f11f84b7546276209dd ]
    
    The ibmvnic driver does not check the device state when the device
    is removed. If the device is removed while a device reset is being
    processed, the remove may free structures needed by the reset,
    causing an oops.
    
    Fix this by checking the device state before processing device remove.
    
    Signed-off-by: Juliet Kim <julietk@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7c16ac30d7bfb2010a0caa8e34e535e3a8bebcf
Author: Qian Cai <cai@lca.pw>
Date:   Thu Mar 5 15:15:02 2020 -0500

    iommu/vt-d: Silence RCU-list debugging warnings
    
    [ Upstream commit f5152416528c2295f35dd9c9bd4fb27c4032413d ]
    
    Similar to the commit 02d715b4a818 ("iommu/vt-d: Fix RCU list debugging
    warnings"), there are several other places that call
    list_for_each_entry_rcu() outside of an RCU read side critical section
    but with dmar_global_lock held. Silence those false positives as well.
    
     drivers/iommu/intel-iommu.c:4288 RCU-list traversed in non-reader section!!
     1 lock held by swapper/0/1:
      #0: ffffffff935892c8 (dmar_global_lock){+.+.}, at: intel_iommu_init+0x1ad/0xb97
    
     drivers/iommu/dmar.c:366 RCU-list traversed in non-reader section!!
     1 lock held by swapper/0/1:
      #0: ffffffff935892c8 (dmar_global_lock){+.+.}, at: intel_iommu_init+0x125/0xb97
    
     drivers/iommu/intel-iommu.c:5057 RCU-list traversed in non-reader section!!
     1 lock held by swapper/0/1:
      #0: ffffffffa71892c8 (dmar_global_lock){++++}, at: intel_iommu_init+0x61a/0xb13
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 097f32cf8f4de8a256a375e9d73840376d09858b
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Mar 9 12:02:14 2020 +0100

    drm/exynos: Fix cleanup of IOMMU related objects
    
    [ Upstream commit 07dc3678bacc2a75b1900febea7d996a31f178a2 ]
    
    Store the IOMMU mapping created by the device core of each Exynos DRM
    sub-device and restore it when the Exynos DRM driver is unbound. This
    fixes IOMMU initialization failure for the second time when a deferred
    probe is triggered from the bind() callback of master's compound DRM
    driver. This also fixes the following issue found using kmemleak
    detector:
    
    unreferenced object 0xc2137640 (size 64):
      comm "swapper/0", pid 1, jiffies 4294937900 (age 3127.400s)
      hex dump (first 32 bytes):
        50 a3 14 c2 80 a2 14 c2 01 00 00 00 20 00 00 00  P........... ...
        00 10 00 00 00 80 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<3acd268d>] arch_setup_dma_ops+0x4c/0x104
        [<9f7d2cce>] of_dma_configure+0x19c/0x3a4
        [<ba07704b>] really_probe+0xb0/0x47c
        [<4f510e4f>] driver_probe_device+0x78/0x1c4
        [<7481a0cf>] device_driver_attach+0x58/0x60
        [<0ff8f5c1>] __driver_attach+0xb8/0x158
        [<86006144>] bus_for_each_dev+0x74/0xb4
        [<10159dca>] bus_add_driver+0x1c0/0x200
        [<8a265265>] driver_register+0x74/0x108
        [<e0f3451a>] exynos_drm_init+0xb0/0x134
        [<db3fc7ba>] do_one_initcall+0x90/0x458
        [<6da35917>] kernel_init_freeable+0x188/0x200
        [<db3f74d4>] kernel_init+0x8/0x110
        [<1f3cddf9>] ret_from_fork+0x14/0x20
        [<8cd12507>] 0x0
    unreferenced object 0xc214a280 (size 128):
      comm "swapper/0", pid 1, jiffies 4294937900 (age 3127.400s)
      hex dump (first 32 bytes):
        00 a0 ec ed 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<3acd268d>] arch_setup_dma_ops+0x4c/0x104
        [<9f7d2cce>] of_dma_configure+0x19c/0x3a4
        [<ba07704b>] really_probe+0xb0/0x47c
        [<4f510e4f>] driver_probe_device+0x78/0x1c4
        [<7481a0cf>] device_driver_attach+0x58/0x60
        [<0ff8f5c1>] __driver_attach+0xb8/0x158
        [<86006144>] bus_for_each_dev+0x74/0xb4
        [<10159dca>] bus_add_driver+0x1c0/0x200
        [<8a265265>] driver_register+0x74/0x108
        [<e0f3451a>] exynos_drm_init+0xb0/0x134
        [<db3fc7ba>] do_one_initcall+0x90/0x458
        [<6da35917>] kernel_init_freeable+0x188/0x200
        [<db3f74d4>] kernel_init+0x8/0x110
        [<1f3cddf9>] ret_from_fork+0x14/0x20
        [<8cd12507>] 0x0
    unreferenced object 0xedeca000 (size 4096):
      comm "swapper/0", pid 1, jiffies 4294937900 (age 3127.400s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<3acd268d>] arch_setup_dma_ops+0x4c/0x104
        [<9f7d2cce>] of_dma_configure+0x19c/0x3a4
        [<ba07704b>] really_probe+0xb0/0x47c
        [<4f510e4f>] driver_probe_device+0x78/0x1c4
        [<7481a0cf>] device_driver_attach+0x58/0x60
        [<0ff8f5c1>] __driver_attach+0xb8/0x158
        [<86006144>] bus_for_each_dev+0x74/0xb4
        [<10159dca>] bus_add_driver+0x1c0/0x200
        [<8a265265>] driver_register+0x74/0x108
        [<e0f3451a>] exynos_drm_init+0xb0/0x134
        [<db3fc7ba>] do_one_initcall+0x90/0x458
        [<6da35917>] kernel_init_freeable+0x188/0x200
        [<db3f74d4>] kernel_init+0x8/0x110
        [<1f3cddf9>] ret_from_fork+0x14/0x20
        [<8cd12507>] 0x0
    unreferenced object 0xc214a300 (size 128):
      comm "swapper/0", pid 1, jiffies 4294937900 (age 3127.400s)
      hex dump (first 32 bytes):
        00 a3 14 c2 00 a3 14 c2 00 40 18 c2 00 80 18 c2  .........@......
        02 00 02 00 ad 4e ad de ff ff ff ff ff ff ff ff  .....N..........
      backtrace:
        [<08cbd8bc>] iommu_domain_alloc+0x24/0x50
        [<b835abee>] arm_iommu_create_mapping+0xe4/0x134
        [<3acd268d>] arch_setup_dma_ops+0x4c/0x104
        [<9f7d2cce>] of_dma_configure+0x19c/0x3a4
        [<ba07704b>] really_probe+0xb0/0x47c
        [<4f510e4f>] driver_probe_device+0x78/0x1c4
        [<7481a0cf>] device_driver_attach+0x58/0x60
        [<0ff8f5c1>] __driver_attach+0xb8/0x158
        [<86006144>] bus_for_each_dev+0x74/0xb4
        [<10159dca>] bus_add_driver+0x1c0/0x200
        [<8a265265>] driver_register+0x74/0x108
        [<e0f3451a>] exynos_drm_init+0xb0/0x134
        [<db3fc7ba>] do_one_initcall+0x90/0x458
        [<6da35917>] kernel_init_freeable+0x188/0x200
        [<db3f74d4>] kernel_init+0x8/0x110
        [<1f3cddf9>] ret_from_fork+0x14/0x20
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Lukasz Luba <lukasz.luba@arm.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2692866c424c2ab3b683aab151bfcd7ffbbdd3ac
Author: Hawking Zhang <Hawking.Zhang@amd.com>
Date:   Wed Mar 4 17:03:48 2020 +0800

    drm/amdgpu: correct ROM_INDEX/DATA offset for VEGA20
    
    [ Upstream commit f1c2cd3f8fb959123a9beba18c0e8112dcb2e137 ]
    
    The ROMC_INDEX/DATA offset was changed to e4/e5 since
    from smuio_v11 (vega20/arcturus).
    
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Tested-by: Candice Li <Candice.Li@amd.com>
    Reviewed-by: Candice Li <Candice.Li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4201472fc92e08507d9aa59d79b62747078e147b
Author: Martin Leung <martin.leung@amd.com>
Date:   Mon Feb 24 14:07:23 2020 -0500

    drm/amd/display: update soc bb for nv14
    
    [ Upstream commit d5349775c1726ce997b8eb4982cd85a01f1c8b42 ]
    
    [why]
    nv14 previously inherited soc bb from generic dcn 2, did not match
    watermark values according to memory team
    
    [how]
    add nv14 specific soc bb: copy nv2 generic that it was
    using from before, but changed num channels to 8
    
    Signed-off-by: Martin Leung <martin.leung@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2197f15a28edfc087565509900e1e6d6d56b5d9
Author: Jiang Lidong <jianglidong3@jd.com>
Date:   Wed Mar 4 09:49:29 2020 +0800

    veth: ignore peer tx_dropped when counting local rx_dropped
    
    [ Upstream commit e25d5dbcffae62c9a7fa03517dfa4b8e67670e3d ]
    
    When local NET_RX backlog is full due to traffic overrun,
    peer veth tx_dropped counter increases. At that time, list
    local veth stats, rx_dropped has double value of peer
    tx_dropped, even bigger than transmit packets by peer.
    
    In NET_RX softirq process, if any packet drop case happens,
    it increases dev's rx_dropped counter and returns NET_RX_DROP.
    
    At veth tx side, it records any error returned from peer netif_rx
    into local dev tx_dropped counter.
    
    In veth get stats process, it puts local dev rx_dropped and
    peer dev tx_dropped into together as local rx_drpped value.
    So that it shows double value of real dropped packets number in
    this case.
    
    This patch ignores peer tx_dropped when counting local rx_dropped,
    since peer tx_dropped is duplicated to local rx_dropped at most cases.
    
    Signed-off-by: Jiang Lidong <jianglidong3@jd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3259b4caf3c905c7172d79db1b7fe574d993b55
Author: Tycho Andersen <tycho@tycho.ws>
Date:   Wed Feb 19 12:01:29 2020 -0700

    cgroup1: don't call release_agent when it is ""
    
    [ Upstream commit 2e5383d7904e60529136727e49629a82058a5607 ]
    
    Older (and maybe current) versions of systemd set release_agent to "" when
    shutting down, but do not set notify_on_release to 0.
    
    Since 64e90a8acb85 ("Introduce STATIC_USERMODEHELPER to mediate
    call_usermodehelper()"), we filter out such calls when the user mode helper
    path is "". However, when used in conjunction with an actual (i.e. non "")
    STATIC_USERMODEHELPER, the path is never "", so the real usermode helper
    will be called with argv[0] == "".
    
    Let's avoid this by not invoking the release_agent when it is "".
    
    Signed-off-by: Tycho Andersen <tycho@tycho.ws>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e77e0ce84400d2c9ce762b7cdc58c2bef7a40bec
Author: Dajun Jin <adajunjin@gmail.com>
Date:   Mon Mar 2 20:24:21 2020 -0800

    drivers/of/of_mdio.c:fix of_mdiobus_register()
    
    [ Upstream commit 209c65b61d94344522c41a83cd6ce51aac5fd0a4 ]
    
    When registers a phy_device successful, should terminate the loop
    or the phy_device would be registered in other addr. If there are
    multiple PHYs without reg properties, it will go wrong.
    
    Signed-off-by: Dajun Jin <adajunjin@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6da48c186f33614c1f8e2ee57aabb17a287d7d92
Author: Mike Gilbert <floppym@gentoo.org>
Date:   Wed Feb 26 14:33:59 2020 -0500

    cpupower: avoid multiple definition with gcc -fno-common
    
    [ Upstream commit 2de7fb60a4740135e03cf55c1982e393ccb87b6b ]
    
    Building cpupower with -fno-common in CFLAGS results in errors due to
    multiple definitions of the 'cpu_count' and 'start_time' variables.
    
    ./utils/idle_monitor/snb_idle.o:./utils/idle_monitor/cpupower-monitor.h:28:
    multiple definition of `cpu_count';
    ./utils/idle_monitor/nhm_idle.o:./utils/idle_monitor/cpupower-monitor.h:28:
    first defined here
    ...
    ./utils/idle_monitor/cpuidle_sysfs.o:./utils/idle_monitor/cpuidle_sysfs.c:22:
    multiple definition of `start_time';
    ./utils/idle_monitor/amd_fam14h_idle.o:./utils/idle_monitor/amd_fam14h_idle.c:85:
    first defined here
    
    The -fno-common option will be enabled by default in GCC 10.
    
    Bug: https://bugs.gentoo.org/707462
    Signed-off-by: Mike Gilbert <floppym@gentoo.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3942c4f5b5d1b278d9b15c41557ab533cb69c12f
Author: Scott Mayhew <smayhew@redhat.com>
Date:   Mon Feb 24 16:29:32 2020 -0500

    nfs: add minor version to nfs_server_key for fscache
    
    [ Upstream commit 55dee1bc0d72877b99805e42e0205087e98b9edd ]
    
    An NFS client that mounts multiple exports from the same NFS
    server with higher NFSv4 versions disabled (i.e. 4.2) and without
    forcing a specific NFS version results in fscache index cookie
    collisions and the following messages:
    [  570.004348] FS-Cache: Duplicate cookie detected
    
    Each nfs_client structure should have its own fscache index cookie,
    so add the minorversion to nfs_server_key.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=200145
    Signed-off-by: Scott Mayhew <smayhew@redhat.com>
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f95fc632016e43c9af45d1a38288387559ad80d6
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 30 13:34:49 2020 +0300

    cgroup-v1: cgroup_pidlist_next should update position index
    
    [ Upstream commit db8dd9697238be70a6b4f9d0284cd89f59c0e070 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
     # mount | grep cgroup
     # dd if=/mnt/cgroup.procs bs=1  # normal output
    ...
    1294
    1295
    1296
    1304
    1382
    584+0 records in
    584+0 records out
    584 bytes copied
    
    dd: /mnt/cgroup.procs: cannot skip to specified offset
    83  <<< generates end of last line
    1383  <<< ... and whole last line once again
    0+1 records in
    0+1 records out
    8 bytes copied
    
    dd: /mnt/cgroup.procs: cannot skip to specified offset
    1386  <<< generates last line anyway
    0+1 records in
    0+1 records out
    5 bytes copied
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e68ecd65b8dd543c4e7b370b631d248e8f10fd4
Author: Sebastian Hense <sebastian.hense1@ibm.com>
Date:   Thu Feb 20 08:11:36 2020 +0100

    net/mlx5e: Fix endianness handling in pedit mask
    
    [ Upstream commit 404402abd5f90aa90a134eb9604b1750c1941529 ]
    
    The mask value is provided as 64 bit and has to be casted in
    either 32 or 16 bit. On big endian systems the wrong half was
    casted which resulted in an all zero mask.
    
    Fixes: 2b64beba0251 ("net/mlx5e: Support header re-write of partial fields in TC pedit offload")
    Signed-off-by: Sebastian Hense <sebastian.hense1@ibm.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58277deab5710d24d389badb3ab5d5f41f148e07
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Thu Feb 20 13:40:24 2020 +0200

    net/mlx5e: kTLS, Fix TCP seq off-by-1 issue in TX resync flow
    
    [ Upstream commit 56917766def72f5afdf4235adb91b6897ff26d9d ]
    
    We have an off-by-1 issue in the TCP seq comparison.
    The last sequence number that belongs to the TCP packet's payload
    is not "start_seq + len", but one byte before it.
    Fix it so the 'ends_before' is evaluated properly.
    
    This fixes a bug that results in error completions in the
    kTLS HW offload flows.
    
    Fixes: ffbd9ca94e2e ("net/mlx5e: kTLS, Fix corner-case checks in TX resync flow")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be638fc85485e4c0ab86288ac2a0601c61751082
Author: Leon Romanovsky <leon@kernel.org>
Date:   Mon Mar 16 09:31:03 2020 +0200

    net/mlx5_core: Set IB capability mask1 to fix ib_srpt connection failure
    
    [ Upstream commit 306f354c67397b3138300cde875c5cab45b857f7 ]
    
    The cap_mask1 isn't protected by field_select and not listed among RW
    fields, but it is required to be written to properly initialize ports
    in IB virtualization mode.
    
    Link: https://lore.kernel.org/linux-rdma/88bab94d2fd72f3145835b4518bc63dda587add6.camel@redhat.com
    Fixes: ab118da4c10a ("net/mlx5: Don't write read-only fields in MODIFY_HCA_VPORT_CONTEXT command")
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2cc5321ec034034c644948cb5ed4df8d4b2d09b
Author: Aya Levin <ayal@mellanox.com>
Date:   Thu Mar 19 13:25:17 2020 +0200

    net/mlx5e: Do not recover from a non-fatal syndrome
    
    [ Upstream commit 187a9830c921d92c4a9a8e2921ecc4b35a97532c ]
    
    For non-fatal syndromes like LOCAL_LENGTH_ERR, recovery shouldn't be
    triggered. In these scenarios, the RQ is not actually in ERR state.
    This misleads the recovery flow which assumes that the RQ is really in
    error state and no more completions arrive, causing crashes on bad page
    state.
    
    Fixes: 8276ea1353a4 ("net/mlx5e: Report and recover from CQE with error on RQ")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56d96059f8ebe0d990f2e6f3f9439cc4fa91ed5e
Author: Aya Levin <ayal@mellanox.com>
Date:   Mon Mar 16 16:53:10 2020 +0200

    net/mlx5e: Fix ICOSQ recovery flow with Striding RQ
    
    [ Upstream commit e239c6d686e1c37fb2ab143162dfb57471a8643f ]
    
    In striding RQ mode, the buffers of an RX WQE are first
    prepared and posted to the HW using a UMR WQEs via the ICOSQ.
    We maintain the state of these in-progress WQEs in the RQ
    SW struct.
    
    In the flow of ICOSQ recovery, the corresponding RQ is not
    in error state, hence:
    
    - The buffers of the in-progress WQEs must be released
      and the RQ metadata should reflect it.
    - Existing RX WQEs in the RQ should not be affected.
    
    For this, wrap the dealloc of the in-progress WQEs in
    a function, and use it in the ICOSQ recovery flow
    instead of mlx5e_free_rx_descs().
    
    Fixes: be5323c8379f ("net/mlx5e: Report and recover from CQE error on ICOSQ")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3acb09ad9f541d655169f0cb8e071ab7e8db1450
Author: Aya Levin <ayal@mellanox.com>
Date:   Thu Mar 12 12:35:32 2020 +0200

    net/mlx5e: Fix missing reset of SW metadata in Striding RQ reset
    
    [ Upstream commit 39369fd536d485a99a59d8e357c0d4d3ce19a3b8 ]
    
    When resetting the RQ (moving RQ state from RST to RDY), the driver
    resets the WQ's SW metadata.
    In striding RQ mode, we maintain a field that reflects the actual
    expected WQ head (including in progress WQEs posted to the ICOSQ).
    It was mistakenly not reset together with the WQ. Fix this here.
    
    Fixes: 8276ea1353a4 ("net/mlx5e: Report and recover from CQE with error on RQ")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd1ed7f28c492644d6971e953e4227d40225ee88
Author: Aya Levin <ayal@mellanox.com>
Date:   Mon Mar 9 09:44:18 2020 +0200

    net/mlx5e: Enhance ICOSQ WQE info fields
    
    [ Upstream commit 1de0306c3a05d305e45b1f1fabe2f4e94222eb6b ]
    
    Add number of WQEBBs (WQE's Basic Block) to WQE info struct. Set the
    number of WQEBBs on WQE post, and increment the consumer counter (cc)
    on completion.
    
    In case of error completions, the cc was mistakenly not incremented,
    keeping a gap between cc and pc (producer counter). This failed the
    recovery flow on the ICOSQ from a CQE error which timed-out waiting for
    the cc and pc to meet.
    
    Fixes: be5323c8379f ("net/mlx5e: Report and recover from CQE error on ICOSQ")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5d3ab95e23bd6fee28b6f76d01babff8fd663a9
Author: Hamdan Igbaria <hamdani@mellanox.com>
Date:   Mon Feb 24 14:41:29 2020 +0200

    net/mlx5: DR, Fix postsend actions write length
    
    [ Upstream commit 692b0399a22530b2de8490bea75a7d20d59391d0 ]
    
    Fix the send info write length to be (actions x action) size in bytes.
    
    Fixes: 297cccebdc5a ("net/mlx5: DR, Expose an internal API to issue RDMA operations")
    Signed-off-by: Hamdan Igbaria <hamdani@mellanox.com>
    Reviewed-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 008eb8f56b31a95045193efc3ef4ad820c23da12
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Mar 13 06:50:33 2020 +0000

    hsr: set .netnsok flag
    
    [ Upstream commit 09e91dbea0aa32be02d8877bd50490813de56b9a ]
    
    The hsr module has been supporting the list and status command.
    (HSR_C_GET_NODE_LIST and HSR_C_GET_NODE_STATUS)
    These commands send node information to the user-space via generic netlink.
    But, in the non-init_net namespace, these commands are not allowed
    because .netnsok flag is false.
    So, there is no way to get node information in the non-init_net namespace.
    
    Fixes: f421436a591d ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55b0c2af8db296684847f207af4546da4c1ce6a4
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Mar 13 06:50:24 2020 +0000

    hsr: add restart routine into hsr_get_node_list()
    
    [ Upstream commit ca19c70f5225771c05bcdcb832b4eb84d7271c5e ]
    
    The hsr_get_node_list() is to send node addresses to the userspace.
    If there are so many nodes, it could fail because of buffer size.
    In order to avoid this failure, the restart routine is added.
    
    Fixes: f421436a591d ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be54513b754a0bef8dafa8673ed7151837a799e1
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Mar 13 06:50:14 2020 +0000

    hsr: use rcu_read_lock() in hsr_get_node_{list/status}()
    
    [ Upstream commit 173756b86803655d70af7732079b3aa935e6ab68 ]
    
    hsr_get_node_{list/status}() are not under rtnl_lock() because
    they are callback functions of generic netlink.
    But they use __dev_get_by_index() without rtnl_lock().
    So, it would use unsafe data.
    In order to fix it, rcu_read_lock() and dev_get_by_index_rcu()
    are used instead of __dev_get_by_index().
    
    Fixes: f421436a591d ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 227983a4c400f5e5dbfc601b3b2da069e7aad2c9
Author: Petr Machata <petrm@mellanox.com>
Date:   Mon Mar 16 19:53:00 2020 +0200

    net: ip_gre: Accept IFLA_INFO_DATA-less configuration
    
    [ Upstream commit 32ca98feab8c9076c89c0697c5a85e46fece809d ]
    
    The fix referenced below causes a crash when an ERSPAN tunnel is created
    without passing IFLA_INFO_DATA. Fix by validating passed-in data in the
    same way as ipgre does.
    
    Fixes: e1f8f78ffe98 ("net: ip_gre: Separate ERSPAN newlink / changelink callbacks")
    Reported-by: syzbot+1b4ebf4dae4e510dd219@syzkaller.appspotmail.com
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8df09014b062b8f2c3ef4c601d798c9980798790
Author: Petr Machata <petrm@mellanox.com>
Date:   Fri Mar 13 13:39:36 2020 +0200

    net: ip_gre: Separate ERSPAN newlink / changelink callbacks
    
    [ Upstream commit e1f8f78ffe9854308b9e12a73ebe4e909074fc33 ]
    
    ERSPAN shares most of the code path with GRE and gretap code. While that
    helps keep the code compact, it is also error prone. Currently a broken
    userspace can turn a gretap tunnel into a de facto ERSPAN one by passing
    IFLA_GRE_ERSPAN_VER. There has been a similar issue in ip6gretap in the
    past.
    
    To prevent these problems in future, split the newlink and changelink code
    paths. Split the ERSPAN code out of ipgre_netlink_parms() into a new
    function erspan_netlink_parms(). Extract a piece of common logic from
    ipgre_newlink() and ipgre_changelink() into ipgre_newlink_encap_setup().
    Add erspan_newlink() and erspan_changelink().
    
    Fixes: 84e54fe0a5ea ("gre: introduce native tunnel support for ERSPAN")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d10e0ef0090885ad5850f09d87addf61b377e11
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Mar 17 09:06:42 2020 +0200

    net: ena: fix continuous keep-alive resets
    
    [ Upstream commit dfdde1345bc124816f0fd42fa91b8748051e758e ]
    
    last_keep_alive_jiffies is updated in probe and when a keep-alive
    event is received.  In case the driver times-out on a keep-alive event,
    it has high chances of continuously timing-out on keep-alive events.
    This is because when the driver recovers from the keep-alive-timeout reset
    the value of last_keep_alive_jiffies is very old, and if a keep-alive
    event is not received before the next timer expires, the value of
    last_keep_alive_jiffies will cause another keep-alive-timeout reset
    and so forth in a loop.
    
    Solution:
    Update last_keep_alive_jiffies whenever the device is restored after
    reset.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Noam Dagan <ndagan@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcb6ca0bcabf201a2a24433c502b433c96ac7c65
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Mar 17 09:06:41 2020 +0200

    net: ena: avoid memory access violation by validating req_id properly
    
    [ Upstream commit 30623e1ed116bcd1785217d0a98eec643687e091 ]
    
    Rx req_id is an index in struct ena_eth_io_rx_cdesc_base.
    The driver should validate that the Rx req_id it received from
    the device is in range [0, ring_size -1].  Failure to do so could
    yield to potential memory access violoation.
    The validation was mistakenly done when refilling
    the Rx submission queue and not in Rx completion queue.
    
    Fixes: ad974baef2a1 ("net: ena: add support for out of order rx buffers refill")
    Signed-off-by: Noam Dagan <ndagan@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ec19232c72f807db646aa05ce4e5adc2b659fe4
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Mar 17 09:06:40 2020 +0200

    net: ena: fix request of incorrect number of IRQ vectors
    
    [ Upstream commit e02ae6ed51be3d28923bfd318ae57000f5643da5 ]
    
    Bug:
    In short the main issue is caused by the fact that the number of queues
    is changed using ethtool after ena_probe() has been called and before
    ena_up() was executed. Here is the full scenario in detail:
    
    * ena_probe() is called when the driver is loaded, the driver is not up
      yet at the end of ena_probe().
    * The number of queues is changed -> io_queue_count is changed as well -
      ena_up() is not called since the "dev_was_up" boolean in
      ena_update_queue_count() is false.
    * ena_up() is called by the kernel (it's called asynchronously some
      time after ena_probe()). ena_setup_io_intr() is called by ena_up() and
      it uses io_queue_count to get the suitable irq lines for each msix
      vector. The function ena_request_io_irq() is called right after that
      and it uses msix_vecs - This value only changes during ena_probe() and
      ena_restore() - to request the irq vectors. This results in "Failed to
      request I/O IRQ" error for i > io_queue_count.
    
    Numeric example:
    * After ena_probe() io_queue_count = 8, msix_vecs = 9.
    * The number of queues changes to 4 -> io_queue_count = 4, msix_vecs = 9.
    * ena_up() is executed for the first time:
      ** ena_setup_io_intr() inits the vectors only up to io_queue_count.
      ** ena_request_io_irq() calls request_irq() and fails for i = 5.
    
    How to reproduce:
    simply run the following commands:
        sudo rmmod ena && sudo insmod ena.ko;
        sudo ethtool -L eth1 combined 3;
    
    Fix:
    Use ENA_MAX_MSIX_VEC(adapter->num_io_queues + adapter->xdp_num_queues)
    instead of adapter->msix_vecs. We need to take XDP queues into
    consideration as they need to have msix vectors assigned to them as well.
    Note that the XDP cannot be attached before the driver is up and running
    but in XDP mode the issue might occur when the number of queues changes
    right after a reset trigger.
    The ENA_MAX_MSIX_VEC simply adds one to the argument since the first msix
    vector is reserved for management queue.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15f3a5e845fa23d41520474ea7d56778b8d7a958
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Mar 17 09:06:39 2020 +0200

    net: ena: fix incorrect setting of the number of msix vectors
    
    [ Upstream commit ce1f352162828ba07470328828a32f47aa759020 ]
    
    Overview:
    We don't frequently change the msix vectors throughout the life cycle of
    the driver. We do so in two functions: ena_probe() and ena_restore().
    ena_probe() is only called when the driver is loaded. ena_restore() on the
    other hand is called during device reset / resume operations.
    
    We use num_io_queues for calculating and allocating the number of msix
    vectors. At ena_probe() this value is equal to max_num_io_queues and thus
    this is not an issue, however ena_restore() might be called after the
    number of io queues has changed.
    
    A possible bug scenario is as follows:
    
    * Change number of queues from 8 to 4.
      (num_io_queues = 4, max_num_io_queues = 8, msix_vecs = 9,)
    * Trigger reset occurs -> ena_restore is called.
      (num_io_queues = 4, max_num_io_queues =8 , msix_vecs = 5)
    * Change number of queues from 4 to 6.
      (num_io_queues = 6, max_num_io_queues = 8, msix_vecs = 5)
    * The driver will reset due to failure of check_for_rx_interrupt_queue()
    
    Fix:
    This can be easily fixed by always using max_num_io_queues to init the
    msix_vecs, since this number won't change as opposed to num_io_queues.
    
    Fixes: 4d19266022ec ("net: ena: multiple queue creation related cleanups")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69f78f82f4fed1459de1eaad31f695b69606ee27
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sun Mar 22 16:40:05 2020 -0400

    bnxt_en: Reset rings if ring reservation fails during open()
    
    [ Upstream commit 5d765a5e4bd7c368e564e11402bba74cf7f03ac1 ]
    
    If ring counts are not reset when ring reservation fails,
    bnxt_init_dflt_ring_mode() will not be called again to reinitialise
    IRQs when open() is called and results in system crash as napi will
    also be not initialised. This patch fixes it by resetting the ring
    counts.
    
    Fixes: 47558acd56a7 ("bnxt_en: Reserve rings at driver open if none was reserved at probe time.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bcb521797b743bf96a857c1678f6a17d57d2f42
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Mar 22 16:40:04 2020 -0400

    bnxt_en: Free context memory after disabling PCI in probe error path.
    
    [ Upstream commit 62bfb932a51f6d08eb409248e69f8d6428c2cabd ]
    
    Other shutdown code paths will always disable PCI first to shutdown DMA
    before freeing context memory.  Do the same sequence in the error path
    of probe to be safe and consistent.
    
    Fixes: c20dc142dd7b ("bnxt_en: Disable bus master during PCI shutdown and driver unload.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ef36a02d321faf9f35f3f895a8f3794b6dfea7e
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Mar 22 16:40:03 2020 -0400

    bnxt_en: Return error if bnxt_alloc_ctx_mem() fails.
    
    [ Upstream commit 0b5b561cea32d5bb1e0a82d65b755a3cb5212141 ]
    
    The current code ignores the return value from
    bnxt_hwrm_func_backing_store_cfg(), causing the driver to proceed in
    the init path even when this vital firmware call has failed.  Fix it
    by propagating the error code to the caller.
    
    Fixes: 1b9394e5a2ad ("bnxt_en: Configure context memory on new devices.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b890afaa4ea7f244fd6edd758a15f29e778c6353
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Sun Mar 22 16:40:02 2020 -0400

    bnxt_en: fix memory leaks in bnxt_dcbnl_ieee_getets()
    
    [ Upstream commit 62d4073e86e62e316bea2c53e77db10418fd5dd7 ]
    
    The allocated ieee_ets structure goes out of scope without being freed,
    leaking memory. Appropriate result codes should be returned so that
    callers do not rely on invalid data passed by reference.
    
    Also cache the ETS config retrieved from the device so that it doesn't
    need to be freed. The balance of the code was clearly written with the
    intent of having the results of querying the hardware cached in the
    device structure. The commensurate store was evidently missed though.
    
    Fixes: 7df4ae9fe855 ("bnxt_en: Implement DCBNL to support host-based DCBX.")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8e0bef6e9e3ff0e666e48caa611ce0771342bd3
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Mar 22 16:40:01 2020 -0400

    bnxt_en: Fix Priority Bytes and Packets counters in ethtool -S.
    
    [ Upstream commit a24ec3220f369aa0b94c863b6b310685a727151c ]
    
    There is an indexing bug in determining these ethtool priority
    counters.  Instead of using the queue ID to index, we need to
    normalize by modulo 10 to get the index.  This index is then used
    to obtain the proper CoS queue counter.  Rename bp->pri2cos to
    bp->pri2cos_idx to make this more clear.
    
    Fixes: e37fed790335 ("bnxt_en: Add ethtool -S priority counters.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e548429f6f538c004c54bd7dd7429c2e0142ca2f
Author: Doug Berger <opendmb@gmail.com>
Date:   Mon Mar 16 14:44:56 2020 -0700

    net: bcmgenet: keep MAC in reset until PHY is up
    
    [ Upstream commit 88f6c8bf1aaed5039923fb4c701cab4d42176275 ]
    
    As noted in commit 28c2d1a7a0bf ("net: bcmgenet: enable loopback
    during UniMAC sw_reset") the UniMAC must be clocked at least 5
    cycles while the sw_reset is asserted to ensure a clean reset.
    
    That commit enabled local loopback to provide an Rx clock from the
    GENET sourced Tx clk. However, when connected in MII mode the Tx
    clk is sourced by the PHY so if an EPHY is not supplying clocks
    (e.g. when the link is down) the UniMAC does not receive the
    necessary clocks.
    
    This commit extends the sw_reset window until the PHY reports that
    the link is up thereby ensuring that the clocks are being provided
    to the MAC to produce a clean reset.
    
    One consequence is that if the system attempts to enter a Wake on
    LAN suspend state when the PHY link has not been active the MAC
    may not have had a chance to initialize cleanly. In this case, we
    remove the sw_reset and enable the WoL reception path as normal
    with the hope that the PHY will provide the necessary clocks to
    drive the WoL blocks if the link becomes active after the system
    has entered suspend.
    
    Fixes: 1c1008c793fa ("net: bcmgenet: add main driver file")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2828e5a50634df1cbd4e630fe19dfa85b0cf5fa3
Author: Doug Berger <opendmb@gmail.com>
Date:   Mon Mar 16 14:44:55 2020 -0700

    Revert "net: bcmgenet: use RGMII loopback for MAC reset"
    
    [ Upstream commit 612eb1c3b9e504de24136c947ed7c07bc342f3aa ]
    
    This reverts commit 3a55402c93877d291b0a612d25edb03d1b4b93ac.
    
    This is not a good solution when connecting to an external switch
    that may not support the isolation of the TXC signal resulting in
    output driver contention on the pin.
    
    A different solution is necessary.
    
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e79a22f875916c740aed339fd567ae7d0cd44e48
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Mar 18 13:28:09 2020 +0000

    vxlan: check return value of gro_cells_init()
    
    [ Upstream commit 384d91c267e621e0926062cfb3f20cb72dc16928 ]
    
    gro_cells_init() returns error if memory allocation is failed.
    But the vxlan module doesn't check the return value of gro_cells_init().
    
    Fixes: 58ce31cca1ff ("vxlan: GRO support at tunnel layer")`
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 434a5faa97393e830f1b92979f85a13b3046352e
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 18 19:21:02 2020 -0700

    tcp: repair: fix TCP_QUEUE_SEQ implementation
    
    [ Upstream commit 6cd6cbf593bfa3ae6fc3ed34ac21da4d35045425 ]
    
    When application uses TCP_QUEUE_SEQ socket option to
    change tp->rcv_next, we must also update tp->copied_seq.
    
    Otherwise, stuff relying on tcp_inq() being precise can
    eventually be confused.
    
    For example, tcp_zerocopy_receive() might crash because
    it does not expect tcp_recv_skb() to return NULL.
    
    We could add tests in various places to fix the issue,
    or simply make sure tcp_inq() wont return a random value,
    and leave fast path as it is.
    
    Note that this fixes ioctl(fd, SIOCINQ, &val) at the same
    time.
    
    Fixes: ee9952831cfd ("tcp: Initial repair mode")
    Fixes: 05255b823a61 ("tcp: add TCP_ZEROCOPY_RECEIVE support for zerocopy receive")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 344703d7364c22010b1a57636c863e6fbecf210c
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Mar 19 12:49:55 2020 -0700

    tcp: ensure skb->dev is NULL before leaving TCP stack
    
    [ Upstream commit b738a185beaab8728943acdb3e67371b8a88185e ]
    
    skb->rbnode is sharing three skb fields : next, prev, dev
    
    When a packet is sent, TCP keeps the original skb (master)
    in a rtx queue, which was converted to rbtree a while back.
    
    __tcp_transmit_skb() is responsible to clone the master skb,
    and add the TCP header to the clone before sending it
    to network layer.
    
    skb_clone() already clears skb->next and skb->prev, but copies
    the master oskb->dev into the clone.
    
    We need to clear skb->dev, otherwise lower layers could interpret
    the value as a pointer to a netdev.
    
    This old bug surfaced recently when commit 28f8bfd1ac94
    ("netfilter: Support iif matches in POSTROUTING") was merged.
    
    Before this netfilter commit, skb->dev value was ignored and
    changed before reaching dev_queue_xmit()
    
    Fixes: 75c119afe14f ("tcp: implement rb-tree based retransmit queue")
    Fixes: 28f8bfd1ac94 ("netfilter: Support iif matches in POSTROUTING")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Martin Zaharinov <micron10@gmail.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67757c65a373b23f15b8e6a4f771fc09d6d521b0
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Mar 20 16:52:02 2020 +0100

    tcp: also NULL skb->dev when copy was needed
    
    [ Upstream commit 07f8e4d0fddbf2f87e4cefb551278abc38db8cdd ]
    
    In rare cases retransmit logic will make a full skb copy, which will not
    trigger the zeroing added in recent change
    b738a185beaa ("tcp: ensure skb->dev is NULL before leaving TCP stack").
    
    Cc: Eric Dumazet <edumazet@google.com>
    Fixes: 75c119afe14f ("tcp: implement rb-tree based retransmit queue")
    Fixes: 28f8bfd1ac94 ("netfilter: Support iif matches in POSTROUTING")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a62ba0fd92d11951d3a5fd1039d0594bbedd12f9
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Sat Mar 21 14:08:29 2020 +0100

    slcan: not call free_netdev before rtnl_unlock in slcan_open
    
    [ Upstream commit 2091a3d42b4f339eaeed11228e0cbe9d4f92f558 ]
    
    As the description before netdev_run_todo, we cannot call free_netdev
    before rtnl_unlock, fix it by reorder the code.
    
    This patch is a 1:1 copy of upstream slip.c commit f596c87005f7
    ("slip: not call free_netdev before rtnl_unlock in slip_open").
    
    Reported-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21c28883dde70e02fa623bd109861002ca97f551
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Tue Mar 24 20:58:29 2020 +0100

    r8169: re-enable MSI on RTL8168c
    
    [ Upstream commit f13bc68131b0c0d67a77fb43444e109828a983bf ]
    
    The original change fixed an issue on RTL8168b by mimicking the vendor
    driver behavior to disable MSI on chip versions before RTL8168d.
    This however now caused an issue on a system with RTL8168c, see [0].
    Therefore leave MSI disabled on RTL8168b, but re-enable it on RTL8168c.
    
    [0] https://bugzilla.redhat.com/show_bug.cgi?id=1792839
    
    Fixes: 003bd5b4a7b4 ("r8169: don't use MSI before RTL8168d")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87867aeac28b649087f21a502eb71a8f7f7f9047
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 20 16:21:17 2020 +0300

    NFC: fdp: Fix a signedness bug in fdp_nci_send_patch()
    
    [ Upstream commit 0dcdf9f64028ec3b75db6b691560f8286f3898bf ]
    
    The nci_conn_max_data_pkt_payload_size() function sometimes returns
    -EPROTO so "max_size" needs to be signed for the error handling to
    work.  We can make "payload_size" an int as well.
    
    Fixes: a06347c04c13 ("NFC: Add Intel Fields Peak NFC solution driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c28fc73a5764aa830b649f1f91edd15edd81212
Author: Emil Renner Berthing <kernel@esmil.dk>
Date:   Sat Mar 21 15:36:19 2020 +0100

    net: stmmac: dwmac-rk: fix error path in rk_gmac_probe
    
    [ Upstream commit 9de9aa487daff7a5c73434c24269b44ed6a428e6 ]
    
    Make sure we clean up devicetree related configuration
    also when clock init fails.
    
    Fixes: fecd4d7eef8b ("net: stmmac: dwmac-rk: Add integrated PHY support")
    Signed-off-by: Emil Renner Berthing <kernel@esmil.dk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd3ee8fb6371b45c71c9345cc359b94da2ddefa9
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Mar 11 22:42:28 2020 -0700

    net_sched: keep alloc_hash updated after hash allocation
    
    [ Upstream commit 0d1c3530e1bd38382edef72591b78e877e0edcd3 ]
    
    In commit 599be01ee567 ("net_sched: fix an OOB access in cls_tcindex")
    I moved cp->hash calculation before the first
    tcindex_alloc_perfect_hash(), but cp->alloc_hash is left untouched.
    This difference could lead to another out of bound access.
    
    cp->alloc_hash should always be the size allocated, we should
    update it after this tcindex_alloc_perfect_hash().
    
    Reported-and-tested-by: syzbot+dcc34d54d68ef7d2d53d@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+c72da7b9ed57cde6fca2@syzkaller.appspotmail.com
    Fixes: 599be01ee567 ("net_sched: fix an OOB access in cls_tcindex")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74bfcb1c73b64a41cc0673140228878b4a8017dd
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Mar 11 22:42:27 2020 -0700

    net_sched: hold rtnl lock in tcindex_partial_destroy_work()
    
    [ Upstream commit b1be2e8cd290f620777bfdb8aa00890cd2fa02b5 ]
    
    syzbot reported a use-after-free in tcindex_dump(). This is due to
    the lack of RTNL in the deferred rcu work. We queue this work with
    RTNL in tcindex_change(), later, tcindex_dump() is called:
    
            fh = tp->ops->get(tp, t->tcm_handle);
            ...
            err = tp->ops->change(..., &fh, ...);
            tfilter_notify(..., fh, ...);
    
    but there is nothing to serialize the pending
    tcindex_partial_destroy_work() with tcindex_dump().
    
    Fix this by simply holding RTNL in tcindex_partial_destroy_work(),
    so that it won't be called until RTNL is released after
    tc_new_tfilter() is completed.
    
    Reported-and-tested-by: syzbot+653090db2562495901dc@syzkaller.appspotmail.com
    Fixes: 3d210534cc93 ("net_sched: fix a race condition in tcindex_destroy()")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 858b3a85bb1b26043f0d40e9af1d295a5c2fa7a1
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Mar 13 22:29:54 2020 -0700

    net_sched: cls_route: remove the right filter from hashtable
    
    [ Upstream commit ef299cc3fa1a9e1288665a9fdc8bff55629fd359 ]
    
    route4_change() allocates a new filter and copies values from
    the old one. After the new filter is inserted into the hash
    table, the old filter should be removed and freed, as the final
    step of the update.
    
    However, the current code mistakenly removes the new one. This
    looks apparently wrong to me, and it causes double "free" and
    use-after-free too, as reported by syzbot.
    
    Reported-and-tested-by: syzbot+f9b32aaacd60305d9687@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+2f8c233f131943d6056d@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+9c2df9fd5e9445b74e01@syzkaller.appspotmail.com
    Fixes: 1109c00547fc ("net: sched: RCU cls_route")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a756c0042eac06d56e4c9692e4a17a259ef6433
Author: Paul Blakey <paulb@mellanox.com>
Date:   Wed Mar 18 12:50:33 2020 +0200

    net/sched: act_ct: Fix leak of ct zone template on replace
    
    [ Upstream commit dd2af10402684cb5840a127caec9e7cdcff6d167 ]
    
    Currently, on replace, the previous action instance params
    is swapped with a newly allocated params. The old params is
    only freed (via kfree_rcu), without releasing the allocated
    ct zone template related to it.
    
    Call tcf_ct_params_free (via call_rcu) for the old params,
    so it will release it.
    
    Fixes: b57dc7c13ea9 ("net/sched: Introduce action ct")
    Signed-off-by: Paul Blakey <paulb@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8ccdc0c5bb5e61725b55a2f69ad811ca58fb87e
Author: Pawel Dembicki <paweldembicki@gmail.com>
Date:   Fri Mar 20 21:46:14 2020 +0100

    net: qmi_wwan: add support for ASKEY WWHC050
    
    [ Upstream commit 12a5ba5a1994568d4ceaff9e78c6b0329d953386 ]
    
    ASKEY WWHC050 is a mcie LTE modem.
    The oem configuration states:
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=1690 ProdID=7588 Rev=ff.ff
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=813f0eef6e6e
    C:* #Ifs= 6 Cfg#= 1 Atr=80 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=88(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=(none)
    E:  Ad=89(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=125us
    
    Tested on openwrt distribution.
    
    Signed-off-by: Cezary Jackiewicz <cezary@eko.one.pl>
    Signed-off-by: Pawel Dembicki <paweldembicki@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfaf1a812eb2759f3887d4d24ecc39fde19f88a2
Author: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
Date:   Tue Mar 17 10:24:35 2020 +0530

    net: phy: mdio-mux-bcm-iproc: check clk_prepare_enable() return value
    
    [ Upstream commit 872307abbd0d9afd72171929806c2fa33dc34179 ]
    
    Check clk_prepare_enable() return value.
    
    Fixes: 2c7230446bc9 ("net: phy: Add pm support to Broadcom iProc mdio mux driver")
    Signed-off-by: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddc2e1bc210f640d301c4c11c065b59ef0efcb39
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Tue Mar 24 16:10:10 2020 +0000

    net: phy: mdio-bcm-unimac: Fix clock handling
    
    [ Upstream commit c312c7818b86b663d32ec5d4b512abf06b23899a ]
    
    The DT binding for this PHY describes an *optional* clock property.
    Due to a bug in the error handling logic, we are actually ignoring this
    clock *all* of the time so far.
    
    Fix this by using devm_clk_get_optional() to handle this clock properly.
    
    Fixes: b78ac6ecd1b6b ("net: phy: mdio-bcm-unimac: Allow configuring MDIO clock divider")
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a68b8cb75863a6351ff783c136ae3baec008ed7a
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Mar 17 20:04:54 2020 +0200

    net: phy: dp83867: w/a for fld detect threshold bootstrapping issue
    
    [ Upstream commit 749f6f6843115b424680f1aada3c0dd613ad807c ]
    
    When the DP83867 PHY is strapped to enable Fast Link Drop (FLD) feature
    STRAP_STS2.STRAP_ FLD (reg 0x006F bit 10), the Energy Lost Threshold for
    FLD Energy Lost Mode FLD_THR_CFG.ENERGY_LOST_FLD_THR (reg 0x002e bits 2:0)
    will be defaulted to 0x2. This may cause the phy link to be unstable. The
    new DP83867 DM recommends to always restore ENERGY_LOST_FLD_THR to 0x1.
    
    Hence, restore default value of FLD_THR_CFG.ENERGY_LOST_FLD_THR to 0x1 when
    FLD is enabled by bootstrapping as recommended by DM.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b06e4d3ed4044c2facf10a511d809f9aa29d960e
Author: Willem de Bruijn <willemb@google.com>
Date:   Fri Mar 13 12:18:09 2020 -0400

    net/packet: tpacket_rcv: avoid a producer race condition
    
    [ Upstream commit 61fad6816fc10fb8793a925d5c1256d1c3db0cd2 ]
    
    PACKET_RX_RING can cause multiple writers to access the same slot if a
    fast writer wraps the ring while a slow writer is still copying. This
    is particularly likely with few, large, slots (e.g., GSO packets).
    
    Synchronize kernel thread ownership of rx ring slots with a bitmap.
    
    Writers acquire a slot race-free by testing tp_status TP_STATUS_KERNEL
    while holding the sk receive queue lock. They release this lock before
    copying and set tp_status to TP_STATUS_USER to release to userspace
    when done. During copying, another writer may take the lock, also see
    TP_STATUS_KERNEL, and start writing to the same slot.
    
    Introduce a new rx_owner_map bitmap with a bit per slot. To acquire a
    slot, test and set with the lock held. To release race-free, update
    tp_status and owner bit as a transaction, so take the lock again.
    
    This is the one of a variety of discussed options (see Link below):
    
    * instead of a shadow ring, embed the data in the slot itself, such as
    in tp_padding. But any test for this field may match a value left by
    userspace, causing deadlock.
    
    * avoid the lock on release. This leaves a small race if releasing the
    shadow slot before setting TP_STATUS_USER. The below reproducer showed
    that this race is not academic. If releasing the slot after tp_status,
    the race is more subtle. See the first link for details.
    
    * add a new tp_status TP_KERNEL_OWNED to avoid the transactional store
    of two fields. But, legacy applications may interpret all non-zero
    tp_status as owned by the user. As libpcap does. So this is possible
    only opt-in by newer processes. It can be added as an optional mode.
    
    * embed the struct at the tail of pg_vec to avoid extra allocation.
    The implementation proved no less complex than a separate field.
    
    The additional locking cost on release adds contention, no different
    than scaling on multicore or multiqueue h/w. In practice, below
    reproducer nor small packet tcpdump showed a noticeable change in
    perf report in cycles spent in spinlock. Where contention is
    problematic, packet sockets support mitigation through PACKET_FANOUT.
    And we can consider adding opt-in state TP_KERNEL_OWNED.
    
    Easy to reproduce by running multiple netperf or similar TCP_STREAM
    flows concurrently with `tcpdump -B 129 -n greater 60000`.
    
    Based on an earlier patchset by Jon Rosen. See links below.
    
    I believe this issue goes back to the introduction of tpacket_rcv,
    which predates git history.
    
    Link: https://www.mail-archive.com/netdev@vger.kernel.org/msg237222.html
    Suggested-by: Jon Rosen <jrosen@cisco.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jon Rosen <jrosen@cisco.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f95590efa0f065a4bea7f8f5179b0e69ecda1840
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Mon Mar 16 22:56:36 2020 +0800

    net: mvneta: Fix the case where the last poll did not process all rx
    
    [ Upstream commit 065fd83e1be2e1ba0d446a257fd86a3cc7bddb51 ]
    
    For the case where the last mvneta_poll did not process all
    RX packets, we need to xor the pp->cause_rx_tx or port->cause_rx_tx
    before claculating the rx_queue.
    
    Fixes: 2dcf75e2793c ("net: mvneta: Associate RX queues with each CPU")
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aabf90f67d821e369611f08f3110b669cc174d22
Author: Guilherme G. Piccoli <gpiccoli@canonical.com>
Date:   Fri Mar 20 09:55:34 2020 -0300

    net: ena: Add PCI shutdown handler to allow safe kexec
    
    [ Upstream commit 428c491332bca498c8eb2127669af51506c346c7 ]
    
    Currently ENA only provides the PCI remove() handler, used during rmmod
    for example. This is not called on shutdown/kexec path; we are potentially
    creating a failure scenario on kexec:
    
    (a) Kexec is triggered, no shutdown() / remove() handler is called for ENA;
    instead pci_device_shutdown() clears the master bit of the PCI device,
    stopping all DMA transactions;
    
    (b) Kexec reboot happens and the device gets enabled again, likely having
    its FW with that DMA transaction buffered; then it may trigger the (now
    invalid) memory operation in the new kernel, corrupting kernel memory area.
    
    This patch aims to prevent this, by implementing a shutdown() handler
    quite similar to the remove() one - the difference being the handling
    of the netdev, which is unregistered on remove(), but following the
    convention observed in other drivers, it's only detached on shutdown().
    
    This prevents an odd issue in AWS Nitro instances, in which after the 2nd
    kexec the next one will fail with an initrd corruption, caused by a wild
    DMA write to invalid kernel memory. The lspci output for the adapter
    present in my instance is:
    
    00:05.0 Ethernet controller [0200]: Amazon.com, Inc. Elastic Network
    Adapter (ENA) [1d0f:ec20]
    
    Suggested-by: Gavin Shan <gshan@redhat.com>
    Signed-off-by: Guilherme G. Piccoli <gpiccoli@canonical.com>
    Acked-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ab5f2913623c4aaa4bbb614cc3d3d2f8b762550
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Mar 24 11:45:34 2020 +0200

    net: dsa: tag_8021q: replace dsa_8021q_remove_header with __skb_vlan_pop
    
    [ Upstream commit e80f40cbe4dd51371818e967d40da8fe305db5e4 ]
    
    Not only did this wheel did not need reinventing, but there is also
    an issue with it: It doesn't remove the VLAN header in a way that
    preserves the L2 payload checksum when that is being provided by the DSA
    master hw.  It should recalculate checksum both for the push, before
    removing the header, and for the pull afterwards. But the current
    implementation is quite dizzying, with pulls followed immediately
    afterwards by pushes, the memmove is done before the push, etc.  This
    makes a DSA master with RX checksumming offload to print stack traces
    with the infamous 'hw csum failure' message.
    
    So remove the dsa_8021q_remove_header function and replace it with
    something that actually works with inet checksumming.
    
    Fixes: d461933638ae ("net: dsa: tag_8021q: Create helper function for removing VLAN header")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73593a06e7a81633d7aa0746bbe3a9774e0a5506
Author: René van Dorst <opensource@vdorst.com>
Date:   Thu Mar 19 14:47:56 2020 +0100

    net: dsa: mt7530: Change the LINK bit to reflect the link status
    
    [ Upstream commit 22259471b51925353bd7b16f864c79fdd76e425e ]
    
    Andrew reported:
    
    After a number of network port link up/down changes, sometimes the switch
    port gets stuck in a state where it thinks it is still transmitting packets
    but the cpu port is not actually transmitting anymore. In this state you
    will see a message on the console
    "mtk_soc_eth 1e100000.ethernet eth0: transmit timed out" and the Tx counter
    in ifconfig will be incrementing on virtual port, but not incrementing on
    cpu port.
    
    The issue is that MAC TX/RX status has no impact on the link status or
    queue manager of the switch. So the queue manager just queues up packets
    of a disabled port and sends out pause frames when the queue is full.
    
    Change the LINK bit to reflect the link status.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Reported-by: Andrew Smith <andrew.smith@digi.com>
    Signed-off-by: René van Dorst <opensource@vdorst.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec7444c83b6224316a7c3d707d9f700e1f637647
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sun Mar 22 13:58:50 2020 -0700

    net: dsa: Fix duplicate frames flooded by learning
    
    [ Upstream commit 0e62f543bed03a64495bd2651d4fe1aa4bcb7fe5 ]
    
    When both the switch and the bridge are learning about new addresses,
    switch ports attached to the bridge would see duplicate ARP frames
    because both entities would attempt to send them.
    
    Fixes: 5037d532b83d ("net: dsa: add Broadcom tag RX/TX handler")
    Reported-by: Maxime Bizon <mbizon@freebox.fr>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59cd14b4484444431b0abc14ab8d555d549a6684
Author: Zh-yuan Ye <ye.zh-yuan@socionext.com>
Date:   Tue Mar 24 17:28:25 2020 +0900

    net: cbs: Fix software cbs to consider packet sending time
    
    [ Upstream commit 961d0e5b32946703125964f9f5b6321d60f4d706 ]
    
    Currently the software CBS does not consider the packet sending time
    when depleting the credits. It caused the throughput to be
    Idleslope[kbps] * (Port transmit rate[kbps] / |Sendslope[kbps]|) where
    Idleslope * (Port transmit rate / (Idleslope + |Sendslope|)) = Idleslope
    is expected. In order to fix the issue above, this patch takes the time
    when the packet sending completes into account by moving the anchor time
    variable "last" ahead to the send completion time upon transmission and
    adding wait when the next dequeue request comes before the send
    completion time of the previous packet.
    
    changelog:
    V2->V3:
     - remove unnecessary whitespace cleanup
     - add the checks if port_rate is 0 before division
    
    V1->V2:
     - combine variable "send_completed" into "last"
     - add the comment for estimate of the packet sending
    
    Fixes: 585d763af09c ("net/sched: Introduce Credit Based Shaper (CBS) qdisc")
    Signed-off-by: Zh-yuan Ye <ye.zh-yuan@socionext.com>
    Reviewed-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cdc3079999ba8348fd2b55380f65884cede929c
Author: Bruno Meneguele <bmeneg@redhat.com>
Date:   Thu Mar 12 20:08:20 2020 -0300

    net/bpfilter: fix dprintf usage for /dev/kmsg
    
    [ Upstream commit 13d0f7b814d9b4c67e60d8c2820c86ea181e7d99 ]
    
    The bpfilter UMH code was recently changed to log its informative messages to
    /dev/kmsg, however this interface doesn't support SEEK_CUR yet, used by
    dprintf(). As result dprintf() returns -EINVAL and doesn't log anything.
    
    However there already had some discussions about supporting SEEK_CUR into
    /dev/kmsg interface in the past it wasn't concluded. Since the only user of
    that from userspace perspective inside the kernel is the bpfilter UMH
    (userspace) module it's better to correct it here instead waiting a conclusion
    on the interface.
    
    Fixes: 36c4357c63f3 ("net: bpfilter: print umh messages to /dev/kmsg")
    Signed-off-by: Bruno Meneguele <bmeneg@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24e93cfbc71e1d80886bb38bdf1740d87ffe4983
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Mar 26 16:17:33 2020 +0200

    mlxsw: spectrum_mr: Fix list iteration in error path
    
    [ Upstream commit f6bf1bafdc2152bb22aff3a4e947f2441a1d49e2 ]
    
    list_for_each_entry_from_reverse() iterates backwards over the list from
    the current position, but in the error path we should start from the
    previous position.
    
    Fix this by using list_for_each_entry_continue_reverse() instead.
    
    This suppresses the following error from coccinelle:
    
    drivers/net/ethernet/mellanox/mlxsw//spectrum_mr.c:655:34-38: ERROR:
    invalid reference to the index variable of the iterator on line 636
    
    Fixes: c011ec1bbfd6 ("mlxsw: spectrum: Add the multicast routing offloading logic")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b5ef1a9b7ae6b6cf98ce972dab438f51eb8487d
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Mar 19 13:25:39 2020 +0200

    mlxsw: pci: Only issue reset when system is ready
    
    [ Upstream commit 6002059d7882c3512e6ac52fa82424272ddfcd5c ]
    
    During initialization the driver issues a software reset command and
    then waits for the system status to change back to "ready" state.
    
    However, before issuing the reset command the driver does not check that
    the system is actually in "ready" state. On Spectrum-{1,2} systems this
    was always the case as the hardware initialization time is very short.
    On Spectrum-3 systems this is no longer the case. This results in the
    software reset command timing-out and the driver failing to load:
    
    [ 6.347591] mlxsw_spectrum3 0000:06:00.0: Cmd exec timed-out (opcode=40(ACCESS_REG),opcode_mod=0,in_mod=0)
    [ 6.358382] mlxsw_spectrum3 0000:06:00.0: Reg cmd access failed (reg_id=9023(mrsr),type=write)
    [ 6.368028] mlxsw_spectrum3 0000:06:00.0: cannot register bus device
    [ 6.375274] mlxsw_spectrum3: probe of 0000:06:00.0 failed with error -110
    
    Fix this by waiting for the system to become ready both before issuing
    the reset command and afterwards. In case of failure, print the last
    system status to aid in debugging.
    
    Fixes: da382875c616 ("mlxsw: spectrum: Extend to support Spectrum-3 ASIC")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf794474af5e71876ce488533a3a889db35bf576
Author: Willem de Bruijn <willemb@google.com>
Date:   Sun Mar 22 13:51:13 2020 -0400

    macsec: restrict to ethernet devices
    
    [ Upstream commit b06d072ccc4b1acd0147b17914b7ad1caa1818bb ]
    
    Only attach macsec to ethernet devices.
    
    Syzbot was able to trigger a KMSAN warning in macsec_handle_frame
    by attaching to a phonet device.
    
    Macvlan has a similar check in macvlan_port_create.
    
    v1->v2
      - fix commit message typo
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a373eccb5a61b32a266eb14b19ebfaba774f60c4
Author: Qian Cai <cai@lca.pw>
Date:   Thu Mar 19 22:54:21 2020 -0400

    ipv4: fix a RCU-list lock in inet_dump_fib()
    
    [ Upstream commit dddeb30bfc43926620f954266fd12c65a7206f07 ]
    
    There is a place,
    
    inet_dump_fib()
      fib_table_dump
        fn_trie_dump_leaf()
          hlist_for_each_entry_rcu()
    
    without rcu_read_lock() will trigger a warning,
    
     WARNING: suspicious RCU usage
     -----------------------------
     net/ipv4/fib_trie.c:2216 RCU-list traversed in non-reader section!!
    
     other info that might help us debug this:
    
     rcu_scheduler_active = 2, debug_locks = 1
     1 lock held by ip/1923:
      #0: ffffffff8ce76e40 (rtnl_mutex){+.+.}, at: netlink_dump+0xd6/0x840
    
     Call Trace:
      dump_stack+0xa1/0xea
      lockdep_rcu_suspicious+0x103/0x10d
      fn_trie_dump_leaf+0x581/0x590
      fib_table_dump+0x15f/0x220
      inet_dump_fib+0x4ad/0x5d0
      netlink_dump+0x350/0x840
      __netlink_dump_start+0x315/0x3e0
      rtnetlink_rcv_msg+0x4d1/0x720
      netlink_rcv_skb+0xf0/0x220
      rtnetlink_rcv+0x15/0x20
      netlink_unicast+0x306/0x460
      netlink_sendmsg+0x44b/0x770
      __sys_sendto+0x259/0x270
      __x64_sys_sendto+0x80/0xa0
      do_syscall_64+0x69/0xf4
      entry_SYSCALL_64_after_hwframe+0x49/0xb3
    
    Fixes: 18a8021a7be3 ("net/ipv4: Plumb support for filtering route dumps")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a50ded55a4bfc07bc87a02c9bdaebeafe60bcc2a
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Mar 21 06:46:50 2020 +0000

    hsr: fix general protection fault in hsr_addr_is_self()
    
    [ Upstream commit 3a303cfdd28d5f930a307c82e8a9d996394d5ebd ]
    
    The port->hsr is used in the hsr_handle_frame(), which is a
    callback of rx_handler.
    hsr master and slaves are initialized in hsr_add_port().
    This function initializes several pointers, which includes port->hsr after
    registering rx_handler.
    So, in the rx_handler routine, un-initialized pointer would be used.
    In order to fix this, pointers should be initialized before
    registering rx_handler.
    
    Test commands:
        ip netns del left
        ip netns del right
        modprobe -rv veth
        modprobe -rv hsr
        killall ping
        modprobe hsr
        ip netns add left
        ip netns add right
        ip link add veth0 type veth peer name veth1
        ip link add veth2 type veth peer name veth3
        ip link add veth4 type veth peer name veth5
        ip link set veth1 netns left
        ip link set veth3 netns right
        ip link set veth4 netns left
        ip link set veth5 netns right
        ip link set veth0 up
        ip link set veth2 up
        ip link set veth0 address fc:00:00:00:00:01
        ip link set veth2 address fc:00:00:00:00:02
        ip netns exec left ip link set veth1 up
        ip netns exec left ip link set veth4 up
        ip netns exec right ip link set veth3 up
        ip netns exec right ip link set veth5 up
        ip link add hsr0 type hsr slave1 veth0 slave2 veth2
        ip a a 192.168.100.1/24 dev hsr0
        ip link set hsr0 up
        ip netns exec left ip link add hsr1 type hsr slave1 veth1 slave2 veth4
        ip netns exec left ip a a 192.168.100.2/24 dev hsr1
        ip netns exec left ip link set hsr1 up
        ip netns exec left ip n a 192.168.100.1 dev hsr1 lladdr \
                fc:00:00:00:00:01 nud permanent
        ip netns exec left ip n r 192.168.100.1 dev hsr1 lladdr \
                fc:00:00:00:00:01 nud permanent
        for i in {1..100}
        do
            ip netns exec left ping 192.168.100.1 &
        done
        ip netns exec left hping3 192.168.100.1 -2 --flood &
        ip netns exec right ip link add hsr2 type hsr slave1 veth3 slave2 veth5
        ip netns exec right ip a a 192.168.100.3/24 dev hsr2
        ip netns exec right ip link set hsr2 up
        ip netns exec right ip n a 192.168.100.1 dev hsr2 lladdr \
                fc:00:00:00:00:02 nud permanent
        ip netns exec right ip n r 192.168.100.1 dev hsr2 lladdr \
                fc:00:00:00:00:02 nud permanent
        for i in {1..100}
        do
            ip netns exec right ping 192.168.100.1 &
        done
        ip netns exec right hping3 192.168.100.1 -2 --flood &
        while :
        do
            ip link add hsr0 type hsr slave1 veth0 slave2 veth2
            ip a a 192.168.100.1/24 dev hsr0
            ip link set hsr0 up
            ip link del hsr0
        done
    
    Splat looks like:
    [  120.954938][    C0] general protection fault, probably for non-canonical address 0xdffffc0000000006: 0000 [#1]I
    [  120.957761][    C0] KASAN: null-ptr-deref in range [0x0000000000000030-0x0000000000000037]
    [  120.959064][    C0] CPU: 0 PID: 1511 Comm: hping3 Not tainted 5.6.0-rc5+ #460
    [  120.960054][    C0] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  120.962261][    C0] RIP: 0010:hsr_addr_is_self+0x65/0x2a0 [hsr]
    [  120.963149][    C0] Code: 44 24 18 70 73 2f c0 48 c1 eb 03 48 8d 04 13 c7 00 f1 f1 f1 f1 c7 40 04 00 f2 f2 f2 4
    [  120.966277][    C0] RSP: 0018:ffff8880d9c09af0 EFLAGS: 00010206
    [  120.967293][    C0] RAX: 0000000000000006 RBX: 1ffff1101b38135f RCX: 0000000000000000
    [  120.968516][    C0] RDX: dffffc0000000000 RSI: ffff8880d17cb208 RDI: 0000000000000000
    [  120.969718][    C0] RBP: 0000000000000030 R08: ffffed101b3c0e3c R09: 0000000000000001
    [  120.972203][    C0] R10: 0000000000000001 R11: ffffed101b3c0e3b R12: 0000000000000000
    [  120.973379][    C0] R13: ffff8880aaf80100 R14: ffff8880aaf800f2 R15: ffff8880aaf80040
    [  120.974410][    C0] FS:  00007f58e693f740(0000) GS:ffff8880d9c00000(0000) knlGS:0000000000000000
    [  120.979794][    C0] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  120.980773][    C0] CR2: 00007ffcb8b38f29 CR3: 00000000afe8e001 CR4: 00000000000606f0
    [  120.981945][    C0] Call Trace:
    [  120.982411][    C0]  <IRQ>
    [  120.982848][    C0]  ? hsr_add_node+0x8c0/0x8c0 [hsr]
    [  120.983522][    C0]  ? rcu_read_lock_held+0x90/0xa0
    [  120.984159][    C0]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [  120.984944][    C0]  hsr_handle_frame+0x1db/0x4e0 [hsr]
    [  120.985597][    C0]  ? hsr_nl_nodedown+0x2b0/0x2b0 [hsr]
    [  120.986289][    C0]  __netif_receive_skb_core+0x6bf/0x3170
    [  120.992513][    C0]  ? check_chain_key+0x236/0x5d0
    [  120.993223][    C0]  ? do_xdp_generic+0x1460/0x1460
    [  120.993875][    C0]  ? register_lock_class+0x14d0/0x14d0
    [  120.994609][    C0]  ? __netif_receive_skb_one_core+0x8d/0x160
    [  120.995377][    C0]  __netif_receive_skb_one_core+0x8d/0x160
    [  120.996204][    C0]  ? __netif_receive_skb_core+0x3170/0x3170
    [ ... ]
    
    Reported-by: syzbot+fcf5dd39282ceb27108d@syzkaller.appspotmail.com
    Fixes: c5a759117210 ("net/hsr: Use list_head (and rcu) instead of array for slave devices.")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7c88a38412214ed291798dfc5b7e1905e32871c
Author: Florian Westphal <fw@strlen.de>
Date:   Sat Mar 14 08:18:42 2020 +0100

    geneve: move debug check after netdev unregister
    
    [ Upstream commit 0fda7600c2e174fe27e9cf02e78e345226e441fa ]
    
    The debug check must be done after unregister_netdevice_many() call --
    the list_del() for this is done inside .ndo_stop.
    
    Fixes: 2843a25348f8 ("geneve: speedup geneve tunnels dismantle")
    Reported-and-tested-by: <syzbot+68a8ed58e3d17c700de5@syzkaller.appspotmail.com>
    Cc: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4500b7830bcafd524d24b0759404110ca985de9
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Thu Mar 19 23:08:10 2020 +0530

    cxgb4: fix Txq restart check during backpressure
    
    [ Upstream commit f1f20a8666c55cb534b8f3fc1130eebf01a06155 ]
    
    Driver reclaims descriptors in much smaller batches, even if hardware
    indicates more to reclaim, during backpressure. So, fix the check to
    restart the Txq during backpressure, by looking at how many
    descriptors hardware had indicated to reclaim, and not on how many
    descriptors that driver had actually reclaimed. Once the Txq is
    restarted, driver will reclaim even more descriptors when Tx path
    is entered again.
    
    Fixes: d429005fdf2c ("cxgb4/cxgb4vf: Add support for SGE doorbell queue timer")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a39d7c5cf1abefb7d6cf4d1749334c068f7dd755
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Thu Mar 19 23:08:09 2020 +0530

    cxgb4: fix throughput drop during Tx backpressure
    
    [ Upstream commit 7affd80802afb6ca92dba47d768632fbde365241 ]
    
    commit 7c3bebc3d868 ("cxgb4: request the TX CIDX updates to status page")
    reverted back to getting Tx CIDX updates via DMA, instead of interrupts,
    introduced by commit d429005fdf2c ("cxgb4/cxgb4vf: Add support for SGE
    doorbell queue timer")
    
    However, it missed reverting back several code changes where Tx CIDX
    updates are not explicitly requested during backpressure when using
    interrupt mode. These missed changes cause slow recovery during
    backpressure because the corresponding interrupt no longer comes and
    hence results in Tx throughput drop.
    
    So, revert back these missed code changes, as well, which will allow
    explicitly requesting Tx CIDX updates when backpressure happens.
    This enables the corresponding interrupt with Tx CIDX update message
    to get generated and hence speed up recovery and restore back
    throughput.
    
    Fixes: 7c3bebc3d868 ("cxgb4: request the TX CIDX updates to status page")
    Fixes: d429005fdf2c ("cxgb4/cxgb4vf: Add support for SGE doorbell queue timer")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e93baefb57de3c4e2efde8653088d5d742e4f150
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Mar 18 20:27:32 2020 -0600

    crypto: arm64/chacha - correctly walk through blocks
    
    commit c8cfcb78c65877313cda7bcbace624d3dbd1f3b3 upstream.
    
    Prior, passing in chunks of 2, 3, or 4, followed by any additional
    chunks would result in the chacha state counter getting out of sync,
    resulting in incorrect encryption/decryption, which is a pretty nasty
    crypto vuln: "why do images look weird on webpages?" WireGuard users
    never experienced this prior, because we have always, out of tree, used
    a different crypto library, until the recent Frankenzinc addition. This
    commit fixes the issue by advancing the pointers and state counter by
    the actual size processed. It also fixes up a bug in the (optional,
    costly) stride test that prevented it from running on arm64.
    
    Fixes: b3aad5bad26a ("crypto: arm64/chacha - expose arm64 ChaCha routine as library function")
    Reported-and-tested-by: Emil Renner Berthing <kernel@esmil.dk>
    Cc: Ard Biesheuvel <ardb@kernel.org>
    Cc: stable@vger.kernel.org # v5.5+
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f9d39f52af801a68ab0d83a15451ff12e9f8a0
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Thu Jan 16 21:26:34 2020 +0100

    crypto: chacha20poly1305 - add back missing test vectors and test chunking
    
    commit 72c7943792c9e7788ddd182337bcf8f650cf56f5 upstream.
    
    When this was originally ported, the 12-byte nonce vectors were left out
    to keep things simple. I agree that we don't need nor want a library
    interface for 12-byte nonces. But these test vectors were specially
    crafted to look at issues in the underlying primitives and related
    interactions.  Therefore, we actually want to keep around all of the
    test vectors, and simply have a helper function to test them with.
    
    Secondly, the sglist-based chunking code in the library interface is
    rather complicated, so this adds a developer-only test for ensuring that
    all the book keeping is correct, across a wide array of possibilities.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59d90c5e223d1039c4f3dcf934827d4dea7b8f9c
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Mar 24 19:06:50 2020 +0100

    mmc: sdhci-tegra: Fix busy detection by enabling MMC_CAP_NEED_RSP_BUSY
    
    [ Upstream commit d2f8bfa4bff5028bc40ed56b4497c32e05b0178f ]
    
    It has turned out that the sdhci-tegra controller requires the R1B response,
    for commands that has this response associated with them. So, converting
    from an R1B to an R1 response for a CMD6 for example, leads to problems
    with the HW busy detection support.
    
    Fix this by informing the mmc core about the requirement, via setting the
    host cap, MMC_CAP_NEED_RSP_BUSY.
    
    Reported-by: Bitan Biswas <bbiswas@nvidia.com>
    Reported-by: Peter Geis <pgwipeout@gmail.com>
    Suggested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Tested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Tested-By: Peter Geis <pgwipeout@gmail.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8d46fa1a0d4249edc63b0a32a0de98cdc5359e3
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Mar 24 19:06:49 2020 +0100

    mmc: sdhci-omap: Fix busy detection by enabling MMC_CAP_NEED_RSP_BUSY
    
    [ Upstream commit 055e04830d4544c57f2a5192a26c9e25915c29c0 ]
    
    It has turned out that the sdhci-omap controller requires the R1B response,
    for commands that has this response associated with them. So, converting
    from an R1B to an R1 response for a CMD6 for example, leads to problems
    with the HW busy detection support.
    
    Fix this by informing the mmc core about the requirement, via setting the
    host cap, MMC_CAP_NEED_RSP_BUSY.
    
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Reported-by: Anders Roxell <anders.roxell@linaro.org>
    Reported-by: Faiz Abbas <faiz_abbas@ti.com>
    Cc: <stable@vger.kernel.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Tested-by: Faiz Abbas <faiz_abbas@ti.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e67e04f08ad706457c71a38d5b26a50526278bcc
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Mar 24 19:06:48 2020 +0100

    mmc: core: Respect MMC_CAP_NEED_RSP_BUSY for eMMC sleep command
    
    [ Upstream commit 18d200460cd73636d4f20674085c39e32b4e0097 ]
    
    The busy timeout for the CMD5 to put the eMMC into sleep state, is specific
    to the card. Potentially the timeout may exceed the host->max_busy_timeout.
    If that becomes the case, mmc_sleep() converts from using an R1B response
    to an R1 response, as to prevent the host from doing HW busy detection.
    
    However, it has turned out that some hosts requires an R1B response no
    matter what, so let's respect that via checking MMC_CAP_NEED_RSP_BUSY. Note
    that, if the R1B gets enforced, the host becomes fully responsible of
    managing the needed busy timeout, in one way or the other.
    
    Suggested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200311092036.16084-1-ulf.hansson@linaro.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 224d92041f249778bd0f5a4ca65a3045eb81685a
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Mar 24 19:06:47 2020 +0100

    mmc: core: Respect MMC_CAP_NEED_RSP_BUSY for erase/trim/discard
    
    [ Upstream commit 43cc64e5221cc6741252b64bc4531dd1eefb733d ]
    
    The busy timeout that is computed for each erase/trim/discard operation,
    can become quite long and may thus exceed the host->max_busy_timeout. If
    that becomes the case, mmc_do_erase() converts from using an R1B response
    to an R1 response, as to prevent the host from doing HW busy detection.
    
    However, it has turned out that some hosts requires an R1B response no
    matter what, so let's respect that via checking MMC_CAP_NEED_RSP_BUSY. Note
    that, if the R1B gets enforced, the host becomes fully responsible of
    managing the needed busy timeout, in one way or the other.
    
    Suggested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Tested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Tested-by: Faiz Abbas <faiz_abbas@ti.com>
    Tested-By: Peter Geis <pgwipeout@gmail.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f5c365341cd9462534fd8bc3a2a480516d18233
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Mar 24 19:06:46 2020 +0100

    mmc: core: Allow host controllers to require R1B for CMD6
    
    [ Upstream commit 1292e3efb149ee21d8d33d725eeed4e6b1ade963 ]
    
    It has turned out that some host controllers can't use R1B for CMD6 and
    other commands that have R1B associated with them. Therefore invent a new
    host cap, MMC_CAP_NEED_RSP_BUSY to let them specify this.
    
    In __mmc_switch(), let's check the flag and use it to prevent R1B responses
    from being converted into R1. Note that, this also means that the host are
    on its own, when it comes to manage the busy timeout.
    
    Suggested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Tested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Tested-by: Faiz Abbas <faiz_abbas@ti.com>
    Tested-By: Peter Geis <pgwipeout@gmail.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
