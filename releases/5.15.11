commit fb6ad5cb3b6745e7bffc5fe19b130f3594375634
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 22 09:32:52 2021 +0100

    Linux 5.15.11
    
    Link: https://lore.kernel.org/r/20211220143040.058287525@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Ronald Warsow <rwarsow@gmx.de>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd926d189210cd1d5b4e618e45898053be6b4b3b
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 30 08:36:12 2021 +0100

    xen/netback: don't queue unlimited number of packages
    
    commit be81992f9086b230623ae3ebbc85ecee4d00a3d3 upstream.
    
    In case a guest isn't consuming incoming network traffic as fast as it
    is coming in, xen-netback is buffering network packages in unlimited
    numbers today. This can result in host OOM situations.
    
    Commit f48da8b14d04ca8 ("xen-netback: fix unlimited guest Rx internal
    queue and carrier flapping") meant to introduce a mechanism to limit
    the amount of buffered data by stopping the Tx queue when reaching the
    data limit, but this doesn't work for cases like UDP.
    
    When hitting the limit don't queue further SKBs, but drop them instead.
    In order to be able to tell Rx packages have been dropped increment the
    rx_dropped statistics counter in this case.
    
    It should be noted that the old solution to continue queueing SKBs had
    the additional problem of an overflow of the 32-bit rx_queue_len value
    would result in intermittent Tx queue enabling.
    
    This is part of XSA-392
    
    Fixes: f48da8b14d04ca8 ("xen-netback: fix unlimited guest Rx internal queue and carrier flapping")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88449dbe6203c3a91cf1c39ea3032ad61a297bd7
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:25:12 2021 +0100

    xen/netback: fix rx queue stall detection
    
    commit 6032046ec4b70176d247a71836186d47b25d1684 upstream.
    
    Commit 1d5d48523900a4b ("xen-netback: require fewer guest Rx slots when
    not using GSO") introduced a security problem in netback, as an
    interface would only be regarded to be stalled if no slot is available
    in the rx queue ring page. In case the SKB at the head of the queued
    requests will need more than one rx slot and only one slot is free the
    stall detection logic will never trigger, as the test for that is only
    looking for at least one slot to be free.
    
    Fix that by testing for the needed number of slots instead of only one
    slot being available.
    
    In order to not have to take the rx queue lock that often, store the
    number of needed slots in the queue data. As all SKB dequeue operations
    happen in the rx queue kernel thread this is safe, as long as the
    number of needed slots is accessed via READ/WRITE_ONCE() only and
    updates are always done with the rx queue lock held.
    
    Add a small helper for obtaining the number of free slots.
    
    This is part of XSA-392
    
    Fixes: 1d5d48523900a4b ("xen-netback: require fewer guest Rx slots when not using GSO")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 153d1ea3272209fc970116f09051002d14422cde
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/console: harden hvc_xen against event channel storms
    
    commit fe415186b43df0db1f17fa3a46275fd92107fe71 upstream.
    
    The Xen console driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using a lateeoi event
    channel.
    
    For the normal domU initial console this requires the introduction of
    bind_evtchn_to_irq_lateeoi() as there is no xenbus device available
    at the time the event channel is bound to the irq.
    
    As the decision whether an interrupt was spurious or not requires to
    test for bytes having been read from the backend, move sending the
    event into the if statement, as sending an event without having found
    any bytes to be read is making no sense at all.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a29c8b5226eda52e6d6ff151d9343558ea3ad451
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/netfront: harden netfront against event channel storms
    
    commit b27d47950e481f292c0a5ad57357edb9d95d03ba upstream.
    
    The Xen netfront driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using lateeoi event
    channels.
    
    For being able to detect the case of no rx responses being added while
    the carrier is down a new lock is needed in order to update and test
    rsp_cons and the number of seen unconsumed responses atomically.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caf9b51829a50590b84daea924a0fd62d32bc952
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/blkfront: harden blkfront against event channel storms
    
    commit 0fd08a34e8e3b67ec9bd8287ac0facf8374b844a upstream.
    
    The Xen blkfront driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using lateeoi event
    channels.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffbd663ebac9d32bac215bdd927268b22753a21e
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Fri Dec 17 15:56:46 2021 +0100

    Revert "xsk: Do not sleep in poll() when need_wakeup set"
    
    commit 0706a78f31c4217ca144f630063ec9561a21548d upstream.
    
    This reverts commit bd0687c18e635b63233dc87f38058cd728802ab4.
    
    This patch causes a Tx only workload to go to sleep even when it does
    not have to, leading to misserable performance in skb mode. It fixed
    one rare problem but created a much worse one, so this need to be
    reverted while I try to craft a proper solution to the original
    problem.
    
    Fixes: bd0687c18e63 ("xsk: Do not sleep in poll() when need_wakeup set")
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20211217145646.26449-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 581b097951991e58ee3219987646ffaeee78eec3
Author: SeongJae Park <sj@kernel.org>
Date:   Fri Dec 10 14:46:55 2021 -0800

    selftests/damon: test debugfs file reads/writes with huge count
    
    commit b4a002889d24979295ed3c2bf1d5fcfb3901026a upstream.
    
    DAMON debugfs interface users were able to trigger warning by writing
    some files with arbitrarily large 'count' parameter.  The issue is fixed
    with commit db7a347b26fe ("mm/damon/dbgfs: use '__GFP_NOWARN' for
    user-specified size buffer allocation").  This commit adds a test case
    for the issue in DAMON selftests to avoid future regressions.
    
    Link: https://lkml.kernel.org/r/20211201150440.1088-11-sj@kernel.org
    Signed-off-by: SeongJae Park <sj@kernel.org>
    Cc: Brendan Higgins <brendanhiggins@google.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a272f990cb266c7c31e5a687bd6838aed68322b6
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Oct 6 08:38:09 2021 +0300

    bus: ti-sysc: Fix variable set but not used warning for reinit_modules
    
    commit 1b1da99b845337362a3dafe0f7b49927ab4ae041 upstream.
    
    Fix drivers/bus/ti-sysc.c:2494:13: error: variable 'error' set but not
    used introduced by commit 9d881361206e ("bus: ti-sysc: Add quirk handling
    for reinit on context lost").
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11053a021937aa403c883d3e8ef78d8c5308f583
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Dec 13 09:04:01 2021 -0700

    io-wq: drop wqe lock before creating new worker
    
    commit d800c65c2d4eccebb27ffb7808e842d5b533823c upstream.
    
    We have two io-wq creation paths:
    
    - On queue enqueue
    - When a worker goes to sleep
    
    The latter invokes worker creation with the wqe->lock held, but that can
    run into problems if we end up exiting and need to cancel the queued work.
    syzbot caught this:
    
    ============================================
    WARNING: possible recursive locking detected
    5.16.0-rc4-syzkaller #0 Not tainted
    --------------------------------------------
    iou-wrk-6468/6471 is trying to acquire lock:
    ffff88801aa98018 (&wqe->lock){+.+.}-{2:2}, at: io_worker_cancel_cb+0xb7/0x210 fs/io-wq.c:187
    
    but task is already holding lock:
    ffff88801aa98018 (&wqe->lock){+.+.}-{2:2}, at: io_wq_worker_sleeping+0xb6/0x140 fs/io-wq.c:700
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&wqe->lock);
      lock(&wqe->lock);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    1 lock held by iou-wrk-6468/6471:
     #0: ffff88801aa98018 (&wqe->lock){+.+.}-{2:2}, at: io_wq_worker_sleeping+0xb6/0x140 fs/io-wq.c:700
    
    stack backtrace:
    CPU: 1 PID: 6471 Comm: iou-wrk-6468 Not tainted 5.16.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1dc/0x2d8 lib/dump_stack.c:106
     print_deadlock_bug kernel/locking/lockdep.c:2956 [inline]
     check_deadlock kernel/locking/lockdep.c:2999 [inline]
     validate_chain+0x5984/0x8240 kernel/locking/lockdep.c:3788
     __lock_acquire+0x1382/0x2b00 kernel/locking/lockdep.c:5027
     lock_acquire+0x19f/0x4d0 kernel/locking/lockdep.c:5637
     __raw_spin_lock include/linux/spinlock_api_smp.h:133 [inline]
     _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:154
     io_worker_cancel_cb+0xb7/0x210 fs/io-wq.c:187
     io_wq_cancel_tw_create fs/io-wq.c:1220 [inline]
     io_queue_worker_create+0x3cf/0x4c0 fs/io-wq.c:372
     io_wq_worker_sleeping+0xbe/0x140 fs/io-wq.c:701
     sched_submit_work kernel/sched/core.c:6295 [inline]
     schedule+0x67/0x1f0 kernel/sched/core.c:6323
     schedule_timeout+0xac/0x300 kernel/time/timer.c:1857
     wait_woken+0xca/0x1b0 kernel/sched/wait.c:460
     unix_msg_wait_data net/unix/unix_bpf.c:32 [inline]
     unix_bpf_recvmsg+0x7f9/0xe20 net/unix/unix_bpf.c:77
     unix_stream_recvmsg+0x214/0x2c0 net/unix/af_unix.c:2832
     sock_recvmsg_nosec net/socket.c:944 [inline]
     sock_recvmsg net/socket.c:962 [inline]
     sock_read_iter+0x3a7/0x4d0 net/socket.c:1035
     call_read_iter include/linux/fs.h:2156 [inline]
     io_iter_do_read fs/io_uring.c:3501 [inline]
     io_read fs/io_uring.c:3558 [inline]
     io_issue_sqe+0x144c/0x9590 fs/io_uring.c:6671
     io_wq_submit_work+0x2d8/0x790 fs/io_uring.c:6836
     io_worker_handle_work+0x808/0xdd0 fs/io-wq.c:574
     io_wqe_worker+0x395/0x870 fs/io-wq.c:630
     ret_from_fork+0x1f/0x30
    
    We can safely drop the lock before doing work creation, making the two
    contexts the same in that regard.
    
    Reported-by: syzbot+b18b8be69df33a3918e9@syzkaller.appspotmail.com
    Fixes: 71a85387546e ("io-wq: check for wq exit after adding new worker task_work")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a96ac0688acb40035ba5c0612b52f379a863d1cd
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Jul 20 06:16:27 2021 -0700

    rcu: Mark accesses to rcu_state.n_force_qs
    
    commit 2431774f04d1050292054c763070021bade7b151 upstream.
    
    This commit marks accesses to the rcu_state.n_force_qs.  These data
    races are hard to make happen, but syzkaller was equal to the task.
    
    Reported-by: syzbot+e08a83a1940ec3846cd5@syzkaller.appspotmail.com
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b4e5bbf9386d4ec21d91c0cb0fd60b9bba778ec
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Dec 10 08:29:30 2021 -0700

    io-wq: check for wq exit after adding new worker task_work
    
    commit 71a85387546e50b1a37b0fa45dadcae3bfb35cf6 upstream.
    
    We check IO_WQ_BIT_EXIT before attempting to create a new worker, and
    wq exit cancels pending work if we have any. But it's possible to have
    a race between the two, where creation checks exit finding it not set,
    but we're in the process of exiting. The exit side will cancel pending
    creation task_work, but there's a gap where we add task_work after we've
    canceled existing creations at exit time.
    
    Fix this by checking the EXIT bit post adding the creation task_work.
    If it's set, run the same cancelation that exit does.
    
    Reported-and-tested-by: syzbot+b60c982cb0efc5e05a47@syzkaller.appspotmail.com
    Reviewed-by: Hao Xu <haoxu@linux.alibaba.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 024f9c7cd3d8d9cb0e499b949c7e209b47287cf2
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Dec 6 10:49:04 2021 -0700

    io-wq: remove spurious bit clear on task_work addition
    
    commit e47498afeca9a0c6d07eeeacc46d563555a3f677 upstream.
    
    There's a small race here where the task_work could finish and drop
    the worker itself, so that by the time that task_work_add() returns
    with a successful addition we've already put the worker.
    
    The worker callbacks clear this bit themselves, so we don't actually
    need to manually clear it in the caller. Get rid of it.
    
    Reported-by: syzbot+b60c982cb0efc5e05a47@syzkaller.appspotmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfc3fff63793c571147930b13c0f8c689c4281ac
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Thu Nov 18 14:03:28 2021 -0500

    scsi: scsi_debug: Sanity check block descriptor length in resp_mode_select()
    
    commit e0a2c28da11e2c2b963fc01d50acbf03045ac732 upstream.
    
    In resp_mode_select() sanity check the block descriptor len to avoid UAF.
    
    BUG: KASAN: use-after-free in resp_mode_select+0xa4c/0xb40 drivers/scsi/scsi_debug.c:2509
    Read of size 1 at addr ffff888026670f50 by task scsicmd/15032
    
    CPU: 1 PID: 15032 Comm: scsicmd Not tainted 5.15.0-01d0625 #15
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Call Trace:
     <TASK>
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:107
     print_address_description.constprop.9+0x28/0x160 mm/kasan/report.c:257
     kasan_report.cold.14+0x7d/0x117 mm/kasan/report.c:443
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report_generic.c:306
     resp_mode_select+0xa4c/0xb40 drivers/scsi/scsi_debug.c:2509
     schedule_resp+0x4af/0x1a10 drivers/scsi/scsi_debug.c:5483
     scsi_debug_queuecommand+0x8c9/0x1e70 drivers/scsi/scsi_debug.c:7537
     scsi_queue_rq+0x16b4/0x2d10 drivers/scsi/scsi_lib.c:1521
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1640
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1762
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1839
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:63
     sg_common_write.isra.18+0xeb3/0x2000 drivers/scsi/sg.c:837
     sg_new_write.isra.19+0x570/0x8c0 drivers/scsi/sg.c:775
     sg_ioctl_common+0x14d6/0x2710 drivers/scsi/sg.c:941
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1166
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:52
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:50
     entry_SYSCALL_64_after_hwframe+0x44/0xae arch/x86/entry/entry_64.S:113
    
    Link: https://lore.kernel.org/r/1637262208-28850-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3085147645938eb41f0bc0e25ef9791e71f5ee4b
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Tue Nov 9 13:57:27 2021 -0500

    scsi: scsi_debug: Fix type in min_t to avoid stack OOB
    
    commit 36e07d7ede88a1f1ef8f0f209af5b7612324ac2c upstream.
    
    Change min_t() to use type "u32" instead of type "int" to avoid stack out
    of bounds. With min_t() type "int" the values get sign extended and the
    larger value gets used causing stack out of bounds.
    
    BUG: KASAN: stack-out-of-bounds in memcpy include/linux/fortify-string.h:191 [inline]
    BUG: KASAN: stack-out-of-bounds in sg_copy_buffer+0x1de/0x240 lib/scatterlist.c:976
    Read of size 127 at addr ffff888072607128 by task syz-executor.7/18707
    
    CPU: 1 PID: 18707 Comm: syz-executor.7 Not tainted 5.15.0-syzk #1
    Hardware name: Red Hat KVM, BIOS 1.13.0-2
    Call Trace:
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:106
     print_address_description.constprop.9+0x28/0x160 mm/kasan/report.c:256
     __kasan_report mm/kasan/report.c:442 [inline]
     kasan_report.cold.14+0x7d/0x117 mm/kasan/report.c:459
     check_region_inline mm/kasan/generic.c:183 [inline]
     kasan_check_range+0x1a3/0x210 mm/kasan/generic.c:189
     memcpy+0x23/0x60 mm/kasan/shadow.c:65
     memcpy include/linux/fortify-string.h:191 [inline]
     sg_copy_buffer+0x1de/0x240 lib/scatterlist.c:976
     sg_copy_from_buffer+0x33/0x40 lib/scatterlist.c:1000
     fill_from_dev_buffer.part.34+0x82/0x130 drivers/scsi/scsi_debug.c:1162
     fill_from_dev_buffer drivers/scsi/scsi_debug.c:1888 [inline]
     resp_readcap16+0x365/0x3b0 drivers/scsi/scsi_debug.c:1887
     schedule_resp+0x4d8/0x1a70 drivers/scsi/scsi_debug.c:5478
     scsi_debug_queuecommand+0x8c9/0x1ec0 drivers/scsi/scsi_debug.c:7533
     scsi_dispatch_cmd drivers/scsi/scsi_lib.c:1520 [inline]
     scsi_queue_rq+0x16b0/0x2d40 drivers/scsi/scsi_lib.c:1699
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1639
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1761
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1838
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:62
     sg_common_write.isra.18+0xeb3/0x2000 drivers/scsi/sg.c:836
     sg_new_write.isra.19+0x570/0x8c0 drivers/scsi/sg.c:774
     sg_ioctl_common+0x14d6/0x2710 drivers/scsi/sg.c:939
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1165
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl fs/ioctl.c:860 [inline]
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Link: https://lore.kernel.org/r/1636484247-21254-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47d11d35203b0aa13533634e270fe2c3610e531b
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Thu Nov 4 15:06:37 2021 -0500

    scsi: scsi_debug: Don't call kcalloc() if size arg is zero
    
    commit 3344b58b53a76199dae48faa396e9fc37bf86992 upstream.
    
    If the size arg to kcalloc() is zero, it returns ZERO_SIZE_PTR.  Because of
    that, for a following NULL pointer check to work on the returned pointer,
    kcalloc() must not be called with the size arg equal to zero. Return early
    without error before the kcalloc() call if size arg is zero.
    
    BUG: KASAN: null-ptr-deref in memcpy include/linux/fortify-string.h:191 [inline]
    BUG: KASAN: null-ptr-deref in sg_copy_buffer+0x138/0x240 lib/scatterlist.c:974
    Write of size 4 at addr 0000000000000010 by task syz-executor.1/22789
    
    CPU: 1 PID: 22789 Comm: syz-executor.1 Not tainted 5.15.0-syzk #1
    Hardware name: Red Hat KVM, BIOS 1.13.0-2
    Call Trace:
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:106
     __kasan_report mm/kasan/report.c:446 [inline]
     kasan_report.cold.14+0x112/0x117 mm/kasan/report.c:459
     check_region_inline mm/kasan/generic.c:183 [inline]
     kasan_check_range+0x1a3/0x210 mm/kasan/generic.c:189
     memcpy+0x3b/0x60 mm/kasan/shadow.c:66
     memcpy include/linux/fortify-string.h:191 [inline]
     sg_copy_buffer+0x138/0x240 lib/scatterlist.c:974
     do_dout_fetch drivers/scsi/scsi_debug.c:2954 [inline]
     do_dout_fetch drivers/scsi/scsi_debug.c:2946 [inline]
     resp_verify+0x49e/0x930 drivers/scsi/scsi_debug.c:4276
     schedule_resp+0x4d8/0x1a70 drivers/scsi/scsi_debug.c:5478
     scsi_debug_queuecommand+0x8c9/0x1ec0 drivers/scsi/scsi_debug.c:7533
     scsi_dispatch_cmd drivers/scsi/scsi_lib.c:1520 [inline]
     scsi_queue_rq+0x16b0/0x2d40 drivers/scsi/scsi_lib.c:1699
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1639
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1761
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1838
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:62
     blk_execute_rq+0xdb/0x360 block/blk-exec.c:102
     sg_scsi_ioctl drivers/scsi/scsi_ioctl.c:621 [inline]
     scsi_ioctl+0x8bb/0x15c0 drivers/scsi/scsi_ioctl.c:930
     sg_ioctl_common+0x172d/0x2710 drivers/scsi/sg.c:1112
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1165
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl fs/ioctl.c:860 [inline]
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Link: https://lore.kernel.org/r/1636056397-13151-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2ccdd4e4efab06178608a34d7bfb20a54104c02
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Nov 4 10:55:34 2021 +0100

    ovl: fix warning in ovl_create_real()
    
    commit 1f5573cfe7a7056e80a92c7a037a3e69f3a13d1c upstream.
    
    Syzbot triggered the following warning in ovl_workdir_create() ->
    ovl_create_real():
    
            if (!err && WARN_ON(!newdentry->d_inode)) {
    
    The reason is that the cgroup2 filesystem returns from mkdir without
    instantiating the new dentry.
    
    Weird filesystems such as this will be rejected by overlayfs at a later
    stage during setup, but to prevent such a warning, call ovl_mkdir_real()
    directly from ovl_workdir_create() and reject this case early.
    
    Reported-and-tested-by: syzbot+75eab84fd0af9e8bf66b@syzkaller.appspotmail.com
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4658f2a9b3364fd32b5d4d1ff7437c5a8ec6d4da
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 22 17:03:01 2021 +0200

    fuse: annotate lock in fuse_reverse_inval_entry()
    
    commit bda9a71980e083699a0360963c0135657b73f47a upstream.
    
    Add missing inode lock annotatation; found by syzbot.
    
    Reported-and-tested-by: syzbot+9f747458f5990eaa8d43@syzkaller.appspotmail.com
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c6fdf62bfe1bc72bfceeaf832ef7499c7ed09ba
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Thu Aug 19 12:42:21 2021 +0200

    media: mxl111sf: change mutex_init() location
    
    commit 44870a9e7a3c24acbb3f888b2a7cc22c9bdf7e7f upstream.
    
    Syzbot reported, that mxl111sf_ctrl_msg() uses uninitialized
    mutex. The problem was in wrong mutex_init() location.
    
    Previous mutex_init(&state->msg_lock) call was in ->init() function, but
    dvb_usbv2_init() has this order of calls:
    
            dvb_usbv2_init()
              dvb_usbv2_adapter_init()
                dvb_usbv2_adapter_frontend_init()
                  props->frontend_attach()
    
              props->init()
    
    Since mxl111sf_* devices call mxl111sf_ctrl_msg() in ->frontend_attach()
    internally we need to initialize state->msg_lock before
    frontend_attach(). To achieve it, ->probe() call added to all mxl111sf_*
    devices, which will simply initiaize mutex.
    
    Reported-and-tested-by: syzbot+5ca0bf339f13c4243001@syzkaller.appspotmail.com
    
    Fixes: 8572211842af ("[media] mxl111sf: convert to new DVB USB")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 403716741c6c2c510dce44e88f085a740f535de6
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Sep 3 13:53:12 2021 -0400

    USB: core: Make do_proc_control() and do_proc_bulk() killable
    
    commit ae8709b296d80c7f45aa1f35c0e7659ad69edce1 upstream.
    
    The USBDEVFS_CONTROL and USBDEVFS_BULK ioctls invoke
    usb_start_wait_urb(), which contains an uninterruptible wait with a
    user-specified timeout value.  If timeout value is very large and the
    device being accessed does not respond in a reasonable amount of time,
    the kernel will complain about "Task X blocked for more than N
    seconds", as found in testing by syzbot:
    
    INFO: task syz-executor.0:8700 blocked for more than 143 seconds.
          Not tainted 5.14.0-rc7-syzkaller #0
    "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    task:syz-executor.0  state:D stack:23192 pid: 8700 ppid:  8455 flags:0x00004004
    Call Trace:
     context_switch kernel/sched/core.c:4681 [inline]
     __schedule+0xc07/0x11f0 kernel/sched/core.c:5938
     schedule+0x14b/0x210 kernel/sched/core.c:6017
     schedule_timeout+0x98/0x2f0 kernel/time/timer.c:1857
     do_wait_for_common+0x2da/0x480 kernel/sched/completion.c:85
     __wait_for_common kernel/sched/completion.c:106 [inline]
     wait_for_common kernel/sched/completion.c:117 [inline]
     wait_for_completion_timeout+0x46/0x60 kernel/sched/completion.c:157
     usb_start_wait_urb+0x167/0x550 drivers/usb/core/message.c:63
     do_proc_bulk+0x978/0x1080 drivers/usb/core/devio.c:1236
     proc_bulk drivers/usb/core/devio.c:1273 [inline]
     usbdev_do_ioctl drivers/usb/core/devio.c:2547 [inline]
     usbdev_ioctl+0x3441/0x6b10 drivers/usb/core/devio.c:2713
    ...
    
    To fix this problem, this patch replaces usbfs's calls to
    usb_control_msg() and usb_bulk_msg() with special-purpose code that
    does essentially the same thing (as recommended in the comment for
    usb_start_wait_urb()), except that it always uses a killable wait and
    it uses GFP_KERNEL rather than GFP_NOIO.
    
    Reported-and-tested-by: syzbot+ada0f7d3d9fd2016d927@syzkaller.appspotmail.com
    Suggested-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20210903175312.GA468440@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 303644fe7e0c30df6925ede3dd35b3a5b2c454b8
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Tue Dec 14 19:25:13 2021 -0800

    bpf: Fix extable address check.
    
    commit 588a25e92458c6efeb7a261d5ca5726f5de89184 upstream.
    
    The verifier checks that PTR_TO_BTF_ID pointer is either valid or NULL,
    but it cannot distinguish IS_ERR pointer from valid one.
    
    When offset is added to IS_ERR pointer it may become small positive
    value which is a user address that is not handled by extable logic
    and has to be checked for at the runtime.
    
    Tighten BPF_PROBE_MEM pointer check code to prevent this case.
    
    Fixes: 4c5de127598e ("bpf: Emit explicit NULL pointer checks for PROBE_LDX instructions.")
    Reported-by: Lorenzo Fontana <lorenzo.fontana@elastic.co>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eea5a58d86a4cc19660bc8e03be926c928cf4db0
Author: Jie Meng <jmeng@fb.com>
Date:   Wed Oct 6 12:41:35 2021 -0700

    bpf, x64: Factor out emission of REX byte in more cases
    
    commit 6364d7d75a0e015a405d1f8a07f267f076c36ca6 upstream.
    
    Introduce a single reg version of maybe_emit_mod() and factor out
    common code in more cases.
    
    Signed-off-by: Jie Meng <jmeng@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/20211006194135.608932-1-jmeng@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e83a6577d5c7a5d6049fa062e51dd5d4170a2f4
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Tue Dec 14 15:16:04 2021 -0800

    mptcp: add missing documented NL params
    
    commit 6813b1928758ce64fabbb8ef157f994b7c2235fa upstream.
    
    'loc_id' and 'rem_id' are set in all events linked to subflows but those
    were missing in the events description in the comments.
    
    Fixes: b911c97c7dc7 ("mptcp: add netlink event support")
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8d38fcd0a1ca4abd4b132d098c32bc13d6f54f0
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Tue Dec 14 11:26:07 2021 +0100

    xsk: Do not sleep in poll() when need_wakeup set
    
    commit bd0687c18e635b63233dc87f38058cd728802ab4 upstream.
    
    Do not sleep in poll() when the need_wakeup flag is set. When this
    flag is set, the application needs to explicitly wake up the driver
    with a syscall (poll, recvmsg, sendmsg, etc.) to guarantee that Rx
    and/or Tx processing will be processed promptly. But the current code
    in poll(), sleeps first then wakes up the driver. This means that no
    driver processing will occur (baring any interrupts) until the timeout
    has expired.
    
    Fix this by checking the need_wakeup flag first and if set, wake the
    driver and return to the application. Only if need_wakeup is not set
    should the process sleep if there is a timeout set in the poll() call.
    
    Fixes: 77cd0d7b3f25 ("xsk: add support for need_wakeup flag in AF_XDP rings")
    Reported-by: Keith Wiles <keith.wiles@intel.com>
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Link: https://lore.kernel.org/bpf/20211214102607.7677-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b2ee1002c6b96ce06a6f6bf9c23d08aa47190f8
Author: Fabio Estevam <festevam@gmail.com>
Date:   Wed Nov 24 15:45:41 2021 -0300

    ARM: dts: imx6ull-pinfunc: Fix CSI_DATA07__ESAI_TX0 pad name
    
    commit 737e65c7956795b3553781fb7bc82fce1c39503f upstream.
    
    According to the i.MX6ULL Reference Manual, pad CSI_DATA07 may
    have the ESAI_TX0 functionality, not ESAI_T0.
    
    Also, NXP's i.MX Config Tools 10.0 generates dtsi with the
    MX6ULL_PAD_CSI_DATA07__ESAI_TX0 naming, so fix it accordingly.
    
    There are no devicetree users in mainline that use the old name,
    so just remove the old entry.
    
    Fixes: c201369d4aa5 ("ARM: dts: imx6ull: add imx6ull support")
    Reported-by: George Makarov <georgemakarov1@gmail.com>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e8ffdf3b86dfd44b651f91b12fcae76c25c453b
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Mon Nov 15 10:18:52 2021 +0100

    can: m_can: pci: use custom bit timings for Elkhart Lake
    
    commit ea4c1787685dbf9842046f05b6390b6901ee6ba2 upstream.
    
    The relevant datasheet [1] specifies nonstandard limits for the bit timing
    parameters. While it is unclear what the exact effect of violating these
    limits is, it seems like a good idea to adhere to the documentation.
    
    [1] Intel Atom® x6000E Series, and Intel® Pentium® and Celeron® N and J
        Series Processors for IoT Applications Datasheet,
        Volume 2 (Book 3 of 3), July 2021, Revision 001
    
    Fixes: cab7ffc0324f ("can: m_can: add PCI glue driver for Intel Elkhart Lake")
    Link: https://lore.kernel.org/all/9eba5d7c05a48ead4024ffa6e5926f191d8c6b38.1636967198.git.matthias.schiffer@ew.tq-group.com
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 274f4b342ba98432d58ec384a648872abc2fc2aa
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Mon Nov 15 10:18:51 2021 +0100

    can: m_can: make custom bittiming fields const
    
    commit ea22ba40debee29ee7257c42002409899e9311c1 upstream.
    
    The assigned timing structs will be defined a const anyway, so we can
    avoid a few casts by declaring the struct fields as const as well.
    
    Link: https://lore.kernel.org/all/4508fa4e639164b2584c49a065d90c78a91fa568.1636967198.git.matthias.schiffer@ew.tq-group.com
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b4641e9c06c0abc153476b3898cf1bbe43cd7fc
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Mon Nov 15 10:18:50 2021 +0100

    Revert "can: m_can: remove support for custom bit timing"
    
    commit ea768b2ffec6cc9c3e17c37ef75d0539b8f89ff5 upstream.
    
    The timing limits specified by the Elkhart Lake CPU datasheets do not
    match the defaults. Let's reintroduce the support for custom bit timings.
    
    This reverts commit 0ddd83fbebbc5537f9d180d31f659db3564be708.
    
    Link: https://lore.kernel.org/all/00c9e2596b1a548906921a574d4ef7a03c0dace0.1636967198.git.matthias.schiffer@ew.tq-group.com
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3a01c14e806f10e2427d067814db7af1cc85952
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Thu Dec 9 12:13:53 2021 -0600

    drm/amd/pm: fix reading SMU FW version from amdgpu_firmware_info on YC
    
    commit dcd10d879a9d1d4e929d374c2f24aba8fac3252b upstream.
    
    This value does not get cached into adev->pm.fw_version during
    startup for smu13 like it does for other SMU like smu12.
    
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a386ae526866cd6893616e4f51d8040f19fb5193
Author: Hawking Zhang <Hawking.Zhang@amd.com>
Date:   Sat Dec 4 19:22:12 2021 +0800

    drm/amdgpu: don't override default ECO_BITs setting
    
    commit 841933d5b8aa853abe68e63827f68f50fab37226 upstream.
    
    Leave this bit as hardware default setting
    
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2e600f6572bd6fe5d7f1b461703c819e7374f63
Author: Le Ma <le.ma@amd.com>
Date:   Sat Dec 4 18:59:08 2021 +0800

    drm/amdgpu: correct register access for RLC_JUMP_TABLE_RESTORE
    
    commit f3a8076eb28cae1553958c629aecec479394bbe2 upstream.
    
    should count on GC IP base address
    
    Signed-off-by: Le Ma <le.ma@amd.com>
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b9f2567145b34538d2e5eaeccb5ee8ac282a87c
Author: Russell Currey <ruscur@russell.cc>
Date:   Tue Nov 23 18:15:20 2021 +1000

    powerpc/module_64: Fix livepatching for RO modules
    
    commit 8734b41b3efe0fc6082c1937b0e88556c396dc96 upstream.
    
    Livepatching a loaded module involves applying relocations through
    apply_relocate_add(), which attempts to write to read-only memory when
    CONFIG_STRICT_MODULE_RWX=y.  Work around this by performing these
    writes through the text poke area by using patch_instruction().
    
    R_PPC_REL24 is the only relocation type generated by the kpatch-build
    userspace tool or klp-convert kernel tree that I observed applying a
    relocation to a post-init module.
    
    A more comprehensive solution is planned, but using patch_instruction()
    for R_PPC_REL24 on should serve as a sufficient fix.
    
    This does have a performance impact, I observed ~15% overhead in
    module_load() on POWER8 bare metal with checksum verification off.
    
    Fixes: c35717c71e98 ("powerpc: Set ARCH_HAS_STRICT_MODULE_RWX")
    Cc: stable@vger.kernel.org # v5.14+
    Reported-by: Joe Lawrence <joe.lawrence@redhat.com>
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Tested-by: Joe Lawrence <joe.lawrence@redhat.com>
    [mpe: Check return codes from patch_instruction()]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211214121248.777249-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78f27c43eb166c931b0919fa7784734573d3f502
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Tue Dec 14 09:45:10 2021 -0500

    libata: if T_LENGTH is zero, dma direction should be DMA_NONE
    
    commit 5da5231bb47864e5dd6c6731151e98b6ee498827 upstream.
    
    Avoid data corruption by rejecting pass-through commands where
    T_LENGTH is zero (No data is transferred) and the dma direction
    is not DMA_NONE.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: syzkaller<syzkaller@googlegroups.com>
    Signed-off-by: George Kennedy<george.kennedy@oracle.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f67c85a557c8291441cc9071ff590c319fe46c74
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 13 10:48:29 2021 +0200

    perf inject: Fix segfault due to perf_data__fd() without open
    
    commit c271a55b0c6029fed0cac909fa57999a11467132 upstream.
    
    The fixed commit attempts to get the output file descriptor even if the
    file was never opened e.g.
    
      $ perf record uname
      Linux
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.002 MB perf.data (7 samples) ]
      $ perf inject -i perf.data --vm-time-correlation=dry-run
      Segmentation fault (core dumped)
      $ gdb --quiet perf
      Reading symbols from perf...
      (gdb) r inject -i perf.data --vm-time-correlation=dry-run
      Starting program: /home/ahunter/bin/perf inject -i perf.data --vm-time-correlation=dry-run
      [Thread debugging using libthread_db enabled]
      Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    
      Program received signal SIGSEGV, Segmentation fault.
      __GI___fileno (fp=0x0) at fileno.c:35
      35      fileno.c: No such file or directory.
      (gdb) bt
      #0  __GI___fileno (fp=0x0) at fileno.c:35
      #1  0x00005621e48dd987 in perf_data__fd (data=0x7fff4c68bd08) at util/data.h:72
      #2  perf_data__fd (data=0x7fff4c68bd08) at util/data.h:69
      #3  cmd_inject (argc=<optimized out>, argv=0x7fff4c69c1f0) at builtin-inject.c:1017
      #4  0x00005621e4936783 in run_builtin (p=0x5621e4ee6878 <commands+600>, argc=4, argv=0x7fff4c69c1f0) at perf.c:313
      #5  0x00005621e4897d5c in handle_internal_command (argv=<optimized out>, argc=<optimized out>) at perf.c:365
      #6  run_argv (argcp=<optimized out>, argv=<optimized out>) at perf.c:409
      #7  main (argc=4, argv=0x7fff4c69c1f0) at perf.c:539
      (gdb)
    
    Fixes: 0ae03893623dd1dd ("perf tools: Pass a fd to perf_file_header__read_pipe()")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Riccardo Mancini <rickyman7@gmail.com>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20211213084829.114772-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7c0e6aa63c832dffb500e9619f1624c60e1b435
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 13 10:48:28 2021 +0200

    perf inject: Fix segfault due to close without open
    
    commit 0c8e32fe48f549eef27c8c6b0a63530f83c3a643 upstream.
    
    The fixed commit attempts to close inject.output even if it was never
    opened e.g.
    
      $ perf record uname
      Linux
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.002 MB perf.data (7 samples) ]
      $ perf inject -i perf.data --vm-time-correlation=dry-run
      Segmentation fault (core dumped)
      $ gdb --quiet perf
      Reading symbols from perf...
      (gdb) r inject -i perf.data --vm-time-correlation=dry-run
      Starting program: /home/ahunter/bin/perf inject -i perf.data --vm-time-correlation=dry-run
      [Thread debugging using libthread_db enabled]
      Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    
      Program received signal SIGSEGV, Segmentation fault.
      0x00007eff8afeef5b in _IO_new_fclose (fp=0x0) at iofclose.c:48
      48      iofclose.c: No such file or directory.
      (gdb) bt
      #0  0x00007eff8afeef5b in _IO_new_fclose (fp=0x0) at iofclose.c:48
      #1  0x0000557fc7b74f92 in perf_data__close (data=data@entry=0x7ffcdafa6578) at util/data.c:376
      #2  0x0000557fc7a6b807 in cmd_inject (argc=<optimized out>, argv=<optimized out>) at builtin-inject.c:1085
      #3  0x0000557fc7ac4783 in run_builtin (p=0x557fc8074878 <commands+600>, argc=4, argv=0x7ffcdafb6a60) at perf.c:313
      #4  0x0000557fc7a25d5c in handle_internal_command (argv=<optimized out>, argc=<optimized out>) at perf.c:365
      #5  run_argv (argcp=<optimized out>, argv=<optimized out>) at perf.c:409
      #6  main (argc=4, argv=0x7ffcdafb6a60) at perf.c:539
      (gdb)
    
    Fixes: 02e6246f5364d526 ("perf inject: Close inject.output on exit")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Riccardo Mancini <rickyman7@gmail.com>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20211213084829.114772-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a74df7707b5a483952e0b6c714afa734035871d
Author: Bin Meng <bin.meng@windriver.com>
Date:   Wed Jun 16 15:46:45 2021 +0800

    riscv: dts: unmatched: Add gpio card detect to mmc-spi-slot
    
    commit 298d03c2d7f1b5daacb6d4f4053fd3d677d67087 upstream.
    
    Per HiFive Unmatched schematics, the card detect signal of the
    micro SD card is connected to gpio pin #15, which should be
    reflected in the DT via the <gpios> property, as described in
    Documentation/devicetree/bindings/mmc/mmc-spi-slot.txt.
    
    [1] https://sifive.cdn.prismic.io/sifive/6a06d6c0-6e66-49b5-8e9e-e68ce76f4192_hifive-unmatched-schematics-v3.pdf
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Fixes: d573b5558abb ("riscv: dts: add initial board data for the SiFive HiFive Unmatched")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fe286afbd90940cf5b03e9a3d93fa098792125f
Author: Bin Meng <bin.meng@windriver.com>
Date:   Wed Jun 16 15:46:44 2021 +0800

    riscv: dts: unleashed: Add gpio card detect to mmc-spi-slot
    
    commit 6331b8765cd0634a4e4cdcc1a6f1a74196616b94 upstream.
    
    Per HiFive Unleashed schematics, the card detect signal of the
    micro SD card is connected to gpio pin #11, which should be
    reflected in the DT via the <gpios> property, as described in
    Documentation/devicetree/bindings/mmc/mmc-spi-slot.txt.
    
    [1] https://sifive.cdn.prismic.io/sifive/c52a8e32-05ce-4aaf-95c8-7bf8453f8698_hifive-unleashed-a00-schematics-1.pdf
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Fixes: d573b5558abb ("riscv: dts: add initial board data for the SiFive HiFive Unmatched")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e14b8b2680a409165a1a94013961c998c5c61cb
Author: Zqiang <qiang1.zhang@intel.com>
Date:   Fri Dec 17 15:42:07 2021 +0800

    locking/rtmutex: Fix incorrect condition in rtmutex_spin_on_owner()
    
    commit 8f556a326c93213927e683fc32bbf5be1b62540a upstream.
    
    Optimistic spinning needs to be terminated when the spinning waiter is not
    longer the top waiter on the lock, but the condition is negated. It
    terminates if the waiter is the top waiter, which is defeating the whole
    purpose.
    
    Fixes: c3123c431447 ("locking/rtmutex: Dont dereference waiter lockless")
    Signed-off-by: Zqiang <qiang1.zhang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211217074207.77425-1-qiang1.zhang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c63433a09d6ae4c226fcbc66da4c58fc189fd746
Author: Thiago Rafael Becker <trbecker@gmail.com>
Date:   Fri Dec 17 15:20:22 2021 -0300

    cifs: sanitize multiple delimiters in prepath
    
    commit a31080899d5fdafcccf7f39dd214a814a2c82626 upstream.
    
    mount.cifs can pass a device with multiple delimiters in it. This will
    cause rename(2) to fail with ENOENT.
    
    V2:
      - Make sanitize_path more readable.
      - Fix multiple delimiters between UNC and prepath.
      - Avoid a memory leak if a bad user starts putting a lot of delimiters
        in the path on purpose.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=2031200
    Fixes: 24e0a1eff9e2 ("cifs: switch to new mount api")
    Cc: stable@vger.kernel.org # 5.11+
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Thiago Rafael Becker <trbecker@gmail.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5664d508674c77a52d311af8b1e11d08ac0cf4b
Author: Yu Liao <liaoyu15@huawei.com>
Date:   Mon Dec 13 21:57:27 2021 +0800

    timekeeping: Really make sure wall_to_monotonic isn't positive
    
    commit 4e8c11b6b3f0b6a283e898344f154641eda94266 upstream.
    
    Even after commit e1d7ba873555 ("time: Always make sure wall_to_monotonic
    isn't positive") it is still possible to make wall_to_monotonic positive
    by running the following code:
    
        int main(void)
        {
            struct timespec time;
    
            clock_gettime(CLOCK_MONOTONIC, &time);
            time.tv_nsec = 0;
            clock_settime(CLOCK_REALTIME, &time);
            return 0;
        }
    
    The reason is that the second parameter of timespec64_compare(), ts_delta,
    may be unnormalized because the delta is calculated with an open coded
    substraction which causes the comparison of tv_sec to yield the wrong
    result:
    
      wall_to_monotonic = { .tv_sec = -10, .tv_nsec =  900000000 }
      ts_delta          = { .tv_sec =  -9, .tv_nsec = -900000000 }
    
    That makes timespec64_compare() claim that wall_to_monotonic < ts_delta,
    but actually the result should be wall_to_monotonic > ts_delta.
    
    After normalization, the result of timespec64_compare() is correct because
    the tv_sec comparison is not longer misleading:
    
      wall_to_monotonic = { .tv_sec = -10, .tv_nsec =  900000000 }
      ts_delta          = { .tv_sec = -10, .tv_nsec =  100000000 }
    
    Use timespec64_sub() to ensure that ts_delta is normalized, which fixes the
    issue.
    
    Fixes: e1d7ba873555 ("time: Always make sure wall_to_monotonic isn't positive")
    Signed-off-by: Yu Liao <liaoyu15@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211213135727.1656662-1-liaoyu15@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89362ec97ac018814bd21fe467a4166dc524e42d
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    commit 6c33ff728812aa18792afffaf2c9873b898e7512 upstream.
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a1a4eb574178c21241a6200f4785572e661c472
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Dec 13 14:14:43 2021 -1000

    iocost: Fix divide-by-zero on donation from low hweight cgroup
    
    commit edaa26334c117a584add6053f48d63a988d25a6e upstream.
    
    The donation calculation logic assumes that the donor has non-zero
    after-donation hweight, so the lowest active hweight a donating cgroup can
    have is 2 so that it can donate 1 while keeping the other 1 for itself.
    Earlier, we only donated from cgroups with sizable surpluses so this
    condition was always true. However, with the precise donation algorithm
    implemented, f1de2439ec43 ("blk-iocost: revamp donation amount
    determination") made the donation amount calculation exact enabling even low
    hweight cgroups to donate.
    
    This means that in rare occasions, a cgroup with active hweight of 1 can
    enter donation calculation triggering the following warning and then a
    divide-by-zero oops.
    
     WARNING: CPU: 4 PID: 0 at block/blk-iocost.c:1928 transfer_surpluses.cold+0x0/0x53 [884/94867]
     ...
     RIP: 0010:transfer_surpluses.cold+0x0/0x53
     Code: 92 ff 48 c7 c7 28 d1 ab b5 65 48 8b 34 25 00 ae 01 00 48 81 c6 90 06 00 00 e8 8b 3f fe ff 48 c7 c0 ea ff ff ff e9 95 ff 92 ff <0f> 0b 48 c7 c7 30 da ab b5 e8 71 3f fe ff 4c 89 e8 4d 85 ed 74 0
    4
     ...
     Call Trace:
      <IRQ>
      ioc_timer_fn+0x1043/0x1390
      call_timer_fn+0xa1/0x2c0
      __run_timers.part.0+0x1ec/0x2e0
      run_timer_softirq+0x35/0x70
     ...
     iocg: invalid donation weights in /a/b: active=1 donating=1 after=0
    
    Fix it by excluding cgroups w/ active hweight < 2 from donating. Excluding
    these extreme low hweight donations shouldn't affect work conservation in
    any meaningful way.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: f1de2439ec43 ("blk-iocost: revamp donation amount determination")
    Cc: stable@vger.kernel.org # v5.10+
    Link: https://lore.kernel.org/r/Ybfh86iSvpWKxhVM@slm.duckdns.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d153ff65a9779bf4088e0451e18f16ac54f1de44
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Fri Dec 17 15:15:45 2021 +0900

    zonefs: add MODULE_ALIAS_FS
    
    commit 8ffea2599f63fdbee968b894eab78170abf3ec2c upstream.
    
    Add MODULE_ALIAS_FS() to load the module automatically when you do "mount
    -t zonefs".
    
    Fixes: 8dcc1a9d90c1 ("fs: New zonefs file system")
    Cc: stable <stable@vger.kernel.org> # 5.6+
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Reviewed-by: Johannes Thumshirn <jth@kernel.org>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 210ab4e3c03255d9f2ea06707fdd493f7562945c
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Wed Dec 15 19:38:43 2021 +0900

    btrfs: fix missing blkdev_put() call in btrfs_scan_one_device()
    
    commit 4989d4a0aed3fb30f5b48787a689d7090de6f86d upstream.
    
    The function btrfs_scan_one_device() calls blkdev_get_by_path() and
    blkdev_put() to get and release its target block device. However, when
    btrfs_sb_log_location_bdev() fails, blkdev_put() is not called and the
    block device is left without clean up. This triggered failure of fstests
    generic/085. Fix the failure path of btrfs_sb_log_location_bdev() to
    call blkdev_put().
    
    Fixes: 12659251ca5df ("btrfs: implement log-structured superblock for ZONED mode")
    CC: stable@vger.kernel.org # 5.15+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8848395975bdd15572a042566aff2ac78a6895ee
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Dec 13 14:22:33 2021 -0500

    btrfs: check WRITE_ERR when trying to read an extent buffer
    
    commit 651740a502411793327e2f0741104749c4eedcd1 upstream.
    
    Filipe reported a hang when we have errors on btrfs.  This turned out to
    be a side-effect of my fix c2e39305299f01 ("btrfs: clear extent buffer
    uptodate when we fail to write it") which made it so we clear
    EXTENT_BUFFER_UPTODATE on an eb when we fail to write it out.
    
    Below is a paste of Filipe's analysis he got from using drgn to debug
    the hang
    
    """
    btree readahead code calls read_extent_buffer_pages(), sets ->io_pages to
    a value while writeback of all pages has not yet completed:
       --> writeback for the first 3 pages finishes, we clear
           EXTENT_BUFFER_UPTODATE from eb on the first page when we get an
           error.
       --> at this point eb->io_pages is 1 and we cleared Uptodate bit from the
           first 3 pages
       --> read_extent_buffer_pages() does not see EXTENT_BUFFER_UPTODATE() so
           it continues, it's able to lock the pages since we obviously don't
           hold the pages locked during writeback
       --> read_extent_buffer_pages() then computes 'num_reads' as 3, and sets
           eb->io_pages to 3, since only the first page does not have Uptodate
           bit set at this point
       --> writeback for the remaining page completes, we ended decrementing
           eb->io_pages by 1, resulting in eb->io_pages == 2, and therefore
           never calling end_extent_buffer_writeback(), so
           EXTENT_BUFFER_WRITEBACK remains in the eb's flags
       --> of course, when the read bio completes, it doesn't and shouldn't
           call end_extent_buffer_writeback()
       --> we should clear EXTENT_BUFFER_UPTODATE only after all pages of
           the eb finished writeback?  or maybe make the read pages code
           wait for writeback of all pages of the eb to complete before
           checking which pages need to be read, touch ->io_pages, submit
           read bio, etc
    
    writeback bit never cleared means we can hang when aborting a
    transaction, at:
    
        btrfs_cleanup_one_transaction()
           btrfs_destroy_marked_extents()
             wait_on_extent_buffer_writeback()
    """
    
    This is a problem because our writes are not synchronized with reads in
    any way.  We clear the UPTODATE flag and then we can easily come in and
    try to read the EB while we're still waiting on other bio's to
    complete.
    
    We have two options here, we could lock all the pages, and then check to
    see if eb->io_pages != 0 to know if we've already got an outstanding
    write on the eb.
    
    Or we can simply check to see if we have WRITE_ERR set on this extent
    buffer.  We set this bit _before_ we clear UPTODATE, so if the read gets
    triggered because we aren't UPTODATE because of a write error we're
    guaranteed to have WRITE_ERR set, and in this case we can simply return
    -EIO.  This will fix the reported hang.
    
    Reported-by: Filipe Manana <fdmanana@suse.com>
    Fixes: c2e39305299f01 ("btrfs: clear extent buffer uptodate when we fail to write it")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbdaa7a48f465a2ee76d65839caeda08af1ef3b2
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Dec 10 19:02:18 2021 +0000

    btrfs: fix double free of anon_dev after failure to create subvolume
    
    commit 33fab972497ae66822c0b6846d4f9382938575b6 upstream.
    
    When creating a subvolume, at create_subvol(), we allocate an anonymous
    device and later call btrfs_get_new_fs_root(), which in turn just calls
    btrfs_get_root_ref(). There we call btrfs_init_fs_root() which assigns
    the anonymous device to the root, but if after that call there's an error,
    when we jump to 'fail' label, we call btrfs_put_root(), which frees the
    anonymous device and then returns an error that is propagated back to
    create_subvol(). Than create_subvol() frees the anonymous device again.
    
    When this happens, if the anonymous device was not reallocated after
    the first time it was freed with btrfs_put_root(), we get a kernel
    message like the following:
    
      (...)
      [13950.282466] BTRFS: error (device dm-0) in create_subvol:663: errno=-5 IO failure
      [13950.283027] ida_free called for id=65 which is not allocated.
      [13950.285974] BTRFS info (device dm-0): forced readonly
      (...)
    
    If the anonymous device gets reallocated by another btrfs filesystem
    or any other kernel subsystem, then bad things can happen.
    
    So fix this by setting the root's anonymous device to 0 at
    btrfs_get_root_ref(), before we call btrfs_put_root(), if an error
    happened.
    
    Fixes: 2dfb1e43f57dd3 ("btrfs: preallocate anon block device at first phase of snapshot creation")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 493ff661d434d6bdf02e3a21adae04d7a0b4265d
Author: Jianglei Nie <niejianglei2021@163.com>
Date:   Thu Dec 9 14:56:31 2021 +0800

    btrfs: fix memory leak in __add_inode_ref()
    
    commit f35838a6930296fc1988764cfa54cb3f705c0665 upstream.
    
    Line 1169 (#3) allocates a memory chunk for victim_name by kmalloc(),
    but  when the function returns in line 1184 (#4) victim_name allocated
    by line 1169 (#3) is not freed, which will lead to a memory leak.
    There is a similar snippet of code in this function as allocating a memory
    chunk for victim_name in line 1104 (#1) as well as releasing the memory
    in line 1116 (#2).
    
    We should kfree() victim_name when the return value of backref_in_log()
    is less than zero and before the function returns in line 1184 (#4).
    
    1057 static inline int __add_inode_ref(struct btrfs_trans_handle *trans,
    1058                              struct btrfs_root *root,
    1059                              struct btrfs_path *path,
    1060                              struct btrfs_root *log_root,
    1061                              struct btrfs_inode *dir,
    1062                              struct btrfs_inode *inode,
    1063                              u64 inode_objectid, u64 parent_objectid,
    1064                              u64 ref_index, char *name, int namelen,
    1065                              int *search_done)
    1066 {
    
    1104    victim_name = kmalloc(victim_name_len, GFP_NOFS);
            // #1: kmalloc (victim_name-1)
    1105    if (!victim_name)
    1106            return -ENOMEM;
    
    1112    ret = backref_in_log(log_root, &search_key,
    1113                    parent_objectid, victim_name,
    1114                    victim_name_len);
    1115    if (ret < 0) {
    1116            kfree(victim_name); // #2: kfree (victim_name-1)
    1117            return ret;
    1118    } else if (!ret) {
    
    1169    victim_name = kmalloc(victim_name_len, GFP_NOFS);
            // #3: kmalloc (victim_name-2)
    1170    if (!victim_name)
    1171            return -ENOMEM;
    
    1180    ret = backref_in_log(log_root, &search_key,
    1181                    parent_objectid, victim_name,
    1182                    victim_name_len);
    1183    if (ret < 0) {
    1184            return ret; // #4: missing kfree (victim_name-2)
    1185    } else if (!ret) {
    
    1241    return 0;
    1242 }
    
    Fixes: d3316c8233bb ("btrfs: Properly handle backref_in_log retval")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Jianglei Nie <niejianglei2021@163.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1bac0d97bc9b18b7c077a66375cc4282d01c367
Author: Scott Mayhew <smayhew@redhat.com>
Date:   Wed Dec 15 16:28:40 2021 -0500

    selinux: fix sleeping function called from invalid context
    
    commit cc274ae7763d9700a56659f3228641d7069e7a3f upstream.
    
    selinux_sb_mnt_opts_compat() is called via sget_fc() under the sb_lock
    spinlock, so it can't use GFP_KERNEL allocations:
    
    [  868.565200] BUG: sleeping function called from invalid context at
                   include/linux/sched/mm.h:230
    [  868.568246] in_atomic(): 1, irqs_disabled(): 0,
                   non_block: 0, pid: 4914, name: mount.nfs
    [  868.569626] preempt_count: 1, expected: 0
    [  868.570215] RCU nest depth: 0, expected: 0
    [  868.570809] Preemption disabled at:
    [  868.570810] [<0000000000000000>] 0x0
    [  868.571848] CPU: 1 PID: 4914 Comm: mount.nfs Kdump: loaded
                   Tainted: G        W         5.16.0-rc5.2585cf9dfa #1
    [  868.573273] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009),
                   BIOS 1.14.0-4.fc34 04/01/2014
    [  868.574478] Call Trace:
    [  868.574844]  <TASK>
    [  868.575156]  dump_stack_lvl+0x34/0x44
    [  868.575692]  __might_resched.cold+0xd6/0x10f
    [  868.576308]  slab_pre_alloc_hook.constprop.0+0x89/0xf0
    [  868.577046]  __kmalloc_track_caller+0x72/0x420
    [  868.577684]  ? security_context_to_sid_core+0x48/0x2b0
    [  868.578569]  kmemdup_nul+0x22/0x50
    [  868.579108]  security_context_to_sid_core+0x48/0x2b0
    [  868.579854]  ? _nfs4_proc_pathconf+0xff/0x110 [nfsv4]
    [  868.580742]  ? nfs_reconfigure+0x80/0x80 [nfs]
    [  868.581355]  security_context_str_to_sid+0x36/0x40
    [  868.581960]  selinux_sb_mnt_opts_compat+0xb5/0x1e0
    [  868.582550]  ? nfs_reconfigure+0x80/0x80 [nfs]
    [  868.583098]  security_sb_mnt_opts_compat+0x2a/0x40
    [  868.583676]  nfs_compare_super+0x113/0x220 [nfs]
    [  868.584249]  ? nfs_try_mount_request+0x210/0x210 [nfs]
    [  868.584879]  sget_fc+0xb5/0x2f0
    [  868.585267]  nfs_get_tree_common+0x91/0x4a0 [nfs]
    [  868.585834]  vfs_get_tree+0x25/0xb0
    [  868.586241]  fc_mount+0xe/0x30
    [  868.586605]  do_nfs4_mount+0x130/0x380 [nfsv4]
    [  868.587160]  nfs4_try_get_tree+0x47/0xb0 [nfsv4]
    [  868.587724]  vfs_get_tree+0x25/0xb0
    [  868.588193]  do_new_mount+0x176/0x310
    [  868.588782]  __x64_sys_mount+0x103/0x140
    [  868.589388]  do_syscall_64+0x3b/0x90
    [  868.589935]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  868.590699] RIP: 0033:0x7f2b371c6c4e
    [  868.591239] Code: 48 8b 0d dd 71 0e 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e
                         0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 49 89 ca b8 a5 00
                         00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d aa 71
                         0e 00 f7 d8 64 89 01 48
    [  868.593810] RSP: 002b:00007ffc83775d88 EFLAGS: 00000246
                   ORIG_RAX: 00000000000000a5
    [  868.594691] RAX: ffffffffffffffda RBX: 00007ffc83775f10 RCX: 00007f2b371c6c4e
    [  868.595504] RDX: 0000555d517247a0 RSI: 0000555d51724700 RDI: 0000555d51724540
    [  868.596317] RBP: 00007ffc83775f10 R08: 0000555d51726890 R09: 0000555d51726890
    [  868.597162] R10: 0000000000000000 R11: 0000000000000246 R12: 0000555d51726890
    [  868.598005] R13: 0000000000000003 R14: 0000555d517246e0 R15: 0000555d511ac925
    [  868.598826]  </TASK>
    
    Cc: stable@vger.kernel.org
    Fixes: 69c4a42d72eb ("lsm,selinux: add new hook to compare new mount to an existing mount")
    Signed-off-by: Scott Mayhew <smayhew@redhat.com>
    [PM: cleanup/line-wrap the backtrace]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 252f245ff4a139ea648599236c461b1cc00e1612
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Dec 10 11:07:14 2021 +0100

    USB: serial: option: add Telit FN990 compositions
    
    commit 2b503c8598d1b232e7fc7526bce9326d92331541 upstream.
    
    Add the following Telit FN990 compositions:
    
    0x1070: tty, adb, rmnet, tty, tty, tty, tty
    0x1071: tty, adb, mbim, tty, tty, tty, tty
    0x1072: rndis, tty, adb, tty, tty, tty, tty
    0x1073: tty, adb, ecm, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20211210100714.22587-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db83bbfe1bec4f224d01141a652d486c7ba9ae14
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Nov 26 10:43:48 2021 +0100

    USB: serial: cp210x: fix CP2105 GPIO registration
    
    commit 83b67041f3eaf33f98a075249aa7f4c7617c2f85 upstream.
    
    When generalising GPIO support and adding support for CP2102N, the GPIO
    registration for some CP2105 devices accidentally broke. Specifically,
    when all the pins of a port are in "modem" mode, and thus unavailable
    for GPIO use, the GPIO chip would now be registered without having
    initialised the number of GPIO lines. This would in turn be rejected by
    gpiolib and some errors messages would be printed (but importantly probe
    would still succeed).
    
    Fix this by initialising the number of GPIO lines before registering the
    GPIO chip.
    
    Note that as for the other device types, and as when all CP2105 pins are
    muxed for LED function, the GPIO chip is registered also when no pins
    are available for GPIO use.
    
    Reported-by: Maarten Brock <m.brock@vanmierlo.com>
    Link: https://lore.kernel.org/r/5eb560c81d2ea1a2b4602a92d9f48a89@vanmierlo.com
    Fixes: c8acfe0aadbe ("USB: serial: cp210x: implement GPIO support for CP2102N")
    Cc: stable@vger.kernel.org      # 4.19
    Cc: Karoly Pados <pados@pados.hu>
    Link: https://lore.kernel.org/r/20211126094348.31698-1-johan@kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-by: Maarten Brock <m.brock@vanmierlo.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5154bc1c16c939b71d6c6f4ac30e393661f8540c
Author: Marian Postevca <posteuca@mutex.one>
Date:   Sat Dec 4 23:49:12 2021 +0200

    usb: gadget: u_ether: fix race in setting MAC address in setup phase
    
    commit 890d5b40908bfd1a79be018d2d297cf9df60f4ee upstream.
    
    When listening for notifications through netlink of a new interface being
    registered, sporadically, it is possible for the MAC to be read as zero.
    The zero MAC address lasts a short period of time and then switches to a
    valid random MAC address.
    
    This causes problems for netd in Android, which assumes that the interface
    is malfunctioning and will not use it.
    
    In the good case we get this log:
    InterfaceController::getCfg() ifName usb0
     hwAddr 92:a8:f0:73:79:5b ipv4Addr 0.0.0.0 flags 0x1002
    
    In the error case we get these logs:
    InterfaceController::getCfg() ifName usb0
     hwAddr 00:00:00:00:00:00 ipv4Addr 0.0.0.0 flags 0x1002
    
    netd : interfaceGetCfg("usb0")
    netd : interfaceSetCfg() -> ServiceSpecificException
     (99, "[Cannot assign requested address] : ioctl() failed")
    
    The reason for the issue is the order in which the interface is setup,
    it is first registered through register_netdev() and after the MAC
    address is set.
    
    Fixed by first setting the MAC address of the net_device and after that
    calling register_netdev().
    
    Fixes: bcd4a1c40bee885e ("usb: gadget: u_ether: construct with default values and add setters/getters")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marian Postevca <posteuca@mutex.one>
    Link: https://lore.kernel.org/r/20211204214912.17627-1-posteuca@mutex.one
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 428ad19f98bbfeb9ade66f2d3f9e97ecf1ec7a8c
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Thu Dec 9 18:15:07 2021 +0800

    usb: typec: tcpm: fix tcpm unregister port but leave a pending timer
    
    commit ca4d8344a72b91fb9d4c8bfbc22204b4c09c5d8f upstream.
    
    In current design, when the tcpm port is unregisterd, the kthread_worker
    will be destroyed in the last step. Inside the kthread_destroy_worker(),
    the worker will flush all the works and wait for them to end. However, if
    one of the works calls hrtimer_start(), this hrtimer will be pending until
    timeout even though tcpm port is removed. Once the hrtimer timeout, many
    strange kernel dumps appear.
    
    Thus, we can first complete kthread_destroy_worker(), then cancel all the
    hrtimers. This will guarantee that no hrtimer is pending at the end.
    
    Fixes: 3ed8e1c2ac99 ("usb: typec: tcpm: Migrate workqueue to RT priority for processing events")
    cc: <stable@vger.kernel.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Link: https://lore.kernel.org/r/20211209101507.499096-1-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffe642edb4e2302e8a8fa356aef9d055765d3af2
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Tue Dec 14 05:55:27 2021 +0100

    usb: cdnsp: Fix lack of spin_lock_irqsave/spin_lock_restore
    
    commit 4c4e162d9cf38528c4f13df09d5755cbc06f6c77 upstream.
    
    Patch puts content of cdnsp_gadget_pullup function inside
    spin_lock_irqsave and spin_lock_restore section.
    This construction is required here to keep the data consistency,
    otherwise some data can be changed e.g. from interrupt context.
    
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    Reported-by: Ken (Jian) He <jianhe@ambarella.com>
    cc: <stable@vger.kernel.org>
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Link: https://lore.kernel.org/r/20211214045527.26823-1-pawell@gli-login.cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 368bfabceb111c4dbe1db049dcc2a7b8edc455f5
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Mon Dec 13 06:06:09 2021 +0100

    usb: cdnsp: Fix issue in cdnsp_log_ep trace event
    
    commit 50931ba27d1665c8b038cd1d16c5869301f32fd6 upstream.
    
    Patch fixes incorrect order of __entry->stream_id and __entry->state
    parameters in TP_printk macro.
    
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    cc: <stable@vger.kernel.org>
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20211213050609.22640-1-pawell@gli-login.cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec83d6e57a624673b233b02e5b594ac0fcb474b0
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Fri Dec 10 12:29:45 2021 +0100

    usb: cdnsp: Fix incorrect calling of cdnsp_died function
    
    commit 16f00d969afe60e233c1a91af7ac840df60d3536 upstream.
    
    Patch restrict calling of cdnsp_died function during removing modules
    or software disconnect.
    This function was called because after transition controller to HALT
    state the driver starts handling the deferred interrupt.
    In this case such interrupt can be simple ignored.
    
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    cc: <stable@vger.kernel.org>
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20211210112945.660-1-pawell@gli-login.cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed89521e2dcb59344810b1d26344e9212d80a69e
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Tue Dec 7 10:18:38 2021 +0100

    usb: cdnsp: Fix incorrect status for control request
    
    commit 99ea221f2e2f2743314e348b25c1e2574b467528 upstream.
    
    Patch fixes incorrect status for control request.
    Without this fix all usb_request objects were returned to upper drivers
    with usb_reqest->status field set to -EINPROGRESS.
    
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    cc: <stable@vger.kernel.org>
    Reported-by: Ken (Jian) He <jianhe@ambarella.com>
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20211207091838.39572-1-pawell@gli-login.cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cb5c3e1b184da9f49e46119a0e506519fc58185
Author: Nehal Bakulchandra Shah <Nehal-Bakulchandra.shah@amd.com>
Date:   Wed Dec 15 15:02:16 2021 +0530

    usb: xhci: Extend support for runtime power management for AMD's Yellow carp.
    
    commit f886d4fbb7c97b8f5f447c92d2dab99c841803c0 upstream.
    
    AMD's Yellow Carp platform has few more XHCI controllers,
    enable the runtime power management support for the same.
    
    Signed-off-by: Nehal Bakulchandra Shah <Nehal-Bakulchandra.shah@amd.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211215093216.1839065-1-Nehal-Bakulchandra.shah@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67cbcd3fb8e6412cc5220315c7266e52c2b66268
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Thu Dec 9 10:54:22 2021 +0800

    usb: xhci-mtk: fix list_del warning when enable list debug
    
    commit ccc14c6cfd346e85c3ecb970975afd5132763437 upstream.
    
    There is warning of 'list_del corruption' when enable list debug
    (CONFIG_DEBUG_LIST=y), fix it by using list_del_init()
    
    Fixes: 4ce186665e7c ("usb: xhci-mtk: Do not use xhci's virt_dev in drop_endpoint")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/20211209025422.17108-1-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8888cdabedf353ab9b5a6af75f70bf341a3e7df
Author: Stefan Roese <sr@denx.de>
Date:   Tue Dec 14 12:49:32 2021 +0100

    PCI/MSI: Mask MSI-X vectors only on success
    
    commit 83dbf898a2d45289be875deb580e93050ba67529 upstream.
    
    Masking all unused MSI-X entries is done to ensure that a crash kernel
    starts from a clean slate, which correponds to the reset state of the
    device as defined in the PCI-E specificion 3.0 and later:
    
     Vector Control for MSI-X Table Entries
     --------------------------------------
    
     "00: Mask bit:  When this bit is set, the function is prohibited from
                     sending a message using this MSI-X Table entry.
                     ...
                     This bit’s state after reset is 1 (entry is masked)."
    
    A Marvell NVME device fails to deliver MSI interrupts after trying to
    enable MSI-X interrupts due to that masking. It seems to take the MSI-X
    mask bits into account even when MSI-X is disabled.
    
    While not specification compliant, this can be cured by moving the masking
    into the success path, so that the MSI-X table entries stay in device reset
    state when the MSI-X setup fails.
    
    [ tglx: Move it into the success path, add comment and amend changelog ]
    
    Fixes: aa8092c1d1f1 ("PCI/MSI: Mask all unused MSI-X entries")
    Signed-off-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-pci@vger.kernel.org
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211210161025.3287927-1-sr@denx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4df1af29930b03d61fb774bfaa5100dbdb964628
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Dec 14 12:42:14 2021 +0100

    PCI/MSI: Clear PCI_MSIX_FLAGS_MASKALL on error
    
    commit 94185adbfad56815c2c8401e16d81bdb74a79201 upstream.
    
    PCI_MSIX_FLAGS_MASKALL is set in the MSI-X control register at MSI-X
    interrupt setup time. It's cleared on success, but the error handling path
    only clears the PCI_MSIX_FLAGS_ENABLE bit.
    
    That's incorrect as the reset state of the PCI_MSIX_FLAGS_MASKALL bit is
    zero. That can be observed via lspci:
    
            Capabilities: [b0] MSI-X: Enable- Count=67 Masked+
    
    Clear the bit in the error path to restore the reset state.
    
    Fixes: 438553958ba1 ("PCI/MSI: Enable and mask MSI-X early")
    Reported-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Stefan Roese <sr@denx.de>
    Cc: linux-pci@vger.kernel.org
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87tufevoqx.ffs@tglx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3901c7784ad7fe290e1ac48f924b276114290cf9
Author: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date:   Tue Dec 7 13:45:10 2021 +0100

    usb: dwc2: fix STM ID/VBUS detection startup delay in dwc2_driver_probe
    
    commit fac6bf87c55f7f0733efb0375565fb6a50cf2caf upstream.
    
    When activate_stm_id_vb_detection is enabled, ID and Vbus detection relies
    on sensing comparators. This detection needs time to stabilize.
    A delay was already applied in dwc2_resume() when reactivating the
    detection, but it wasn't done in dwc2_probe().
    This patch adds delay after enabling STM ID/VBUS detection. Then, ID state
    is good when initializing gadget and host, and avoid to get a wrong
    Connector ID Status Change interrupt.
    
    Fixes: a415083a11cc ("usb: dwc2: add support for STM32MP15 SoCs USB OTG HS and FS")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Link: https://lore.kernel.org/r/20211207124510.268841-1-amelie.delaunay@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af00fb78428664996c9fb19e587e28ff5089b4d2
Author: Jimmy Wang <wangjm221@gmail.com>
Date:   Tue Dec 14 09:26:50 2021 +0800

    USB: NO_LPM quirk Lenovo USB-C to Ethernet Adapher(RTL8153-04)
    
    commit 0ad3bd562bb91853b9f42bda145b5db6255aee90 upstream.
    
    This device doesn't work well with LPM, losing connectivity intermittently.
    Disable LPM to resolve the issue.
    
    Reviewed-by: <markpearson@lenovo.com>
    Signed-off-by: Jimmy Wang <wangjm221@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211214012652.4898-1-wangjm221@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7a8a261bab07ec1ed5f5bb990aacc4de9c08eb4
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Wed Dec 15 20:52:40 2021 +0900

    tty: n_hdlc: make n_hdlc_tty_wakeup() asynchronous
    
    commit 1ee33b1ca2b8dabfcc17198ffd049a6b55674a86 upstream.
    
    syzbot is reporting that an unprivileged user who logged in from tty
    console can crash the system using a reproducer shown below [1], for
    n_hdlc_tty_wakeup() is synchronously calling n_hdlc_send_frames().
    
    ----------
      #include <sys/ioctl.h>
      #include <unistd.h>
    
      int main(int argc, char *argv[])
      {
        const int disc = 0xd;
    
        ioctl(1, TIOCSETD, &disc);
        while (1) {
          ioctl(1, TCXONC, 0);
          write(1, "", 1);
          ioctl(1, TCXONC, 1); /* Kernel panic - not syncing: scheduling while atomic */
        }
      }
    ----------
    
    Linus suspected that "struct tty_ldisc"->ops->write_wakeup() must not
    sleep, and Jiri confirmed it from include/linux/tty_ldisc.h. Thus, defer
    n_hdlc_send_frames() from n_hdlc_tty_wakeup() to a WQ context like
    net/nfc/nci/uart.c does.
    
    Link: https://syzkaller.appspot.com/bug?extid=5f47a8cea6a12b77a876 [1]
    Reported-by: syzbot <syzbot+5f47a8cea6a12b77a876@syzkaller.appspotmail.com>
    Cc: stable <stable@vger.kernel.org>
    Analyzed-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Confirmed-by: Jiri Slaby <jirislaby@kernel.org>
    Reviewed-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Link: https://lore.kernel.org/r/40de8b7e-a3be-4486-4e33-1b1d1da452f8@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fc3cfa62b85fb60d2383229791f755f333963ed
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Dec 16 17:52:13 2021 +0100

    KVM: x86: Drop guest CPUID check for host initiated writes to MSR_IA32_PERF_CAPABILITIES
    
    [ Upstream commit 1aa2abb33a419090c7c87d4ae842a6347078ee12 ]
    
    The ability to write to MSR_IA32_PERF_CAPABILITIES from the host should
    not depend on guest visible CPUID entries, even if just to allow
    creating/restoring guest MSRs and CPUIDs in any sequence.
    
    Fixes: 27461da31089 ("KVM: x86/pmu: Support full width counting")
    Suggested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20211216165213.338923-3-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f8b3f238530b168d4e9a5024a5d21fc966248dd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 17 16:24:30 2021 +0100

    Revert "usb: early: convert to readl_poll_timeout_atomic()"
    
    [ Upstream commit c4d936efa46d8ea183df16c0f3fa4423327da51d ]
    
    This reverts commit 796eed4b2342c9d6b26c958e92af91253a2390e1.
    
    This change causes boot lockups when using "arlyprintk=xdbc" because
    ktime can not be used at this point in time in the boot process.  Also,
    it is not needed for very small delays like this.
    
    Reported-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Reported-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Fixes: 796eed4b2342 ("usb: early: convert to readl_poll_timeout_atomic()")
    Link: https://lore.kernel.org/r/c2b5c9bb-1b75-bf56-3754-b5b18812d65e@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abd3a33b3f2bff26fa531da668b041bef980f238
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 14 19:46:21 2021 +0100

    USB: gadget: bRequestType is a bitfield, not a enum
    
    [ Upstream commit f08adf5add9a071160c68bb2a61d697f39ab0758 ]
    
    Szymon rightly pointed out that the previous check for the endpoint
    direction in bRequestType was not looking at only the bit involved, but
    rather the whole value.  Normally this is ok, but for some request
    types, bits other than bit 8 could be set and the check for the endpoint
    length could not stall correctly.
    
    Fix that up by only checking the single bit.
    
    Fixes: 153a2d7e3350 ("USB: gadget: detect too-big endpoint 0 requests")
    Cc: Felipe Balbi <balbi@kernel.org>
    Reported-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Link: https://lore.kernel.org/r/20211214184621.385828-1-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0ac17b9bac53e37c111c135a9e1a1ae18dcab88
Author: Xiaoming Ni <nixiaoming@huawei.com>
Date:   Fri Nov 26 12:11:53 2021 +0800

    powerpc/85xx: Fix oops when CONFIG_FSL_PMC=n
    
    [ Upstream commit 3dc709e518b47386e6af937eaec37bb36539edfd ]
    
    When CONFIG_FSL_PMC is set to n, no value is assigned to cpu_up_prepare
    in the mpc85xx_pm_ops structure. As a result, oops is triggered in
    smp_85xx_start_cpu().
    
      smp: Bringing up secondary CPUs ...
      kernel tried to execute user page (0) - exploit attempt? (uid: 0)
      BUG: Unable to handle kernel instruction fetch (NULL pointer?)
      Faulting instruction address: 0x00000000
      Oops: Kernel access of bad area, sig: 11 [#1]
      ...
      NIP [00000000] 0x0
      LR [c0021d2c] smp_85xx_kick_cpu+0xe8/0x568
      Call Trace:
      [c1051da8] [c0021cb8] smp_85xx_kick_cpu+0x74/0x568 (unreliable)
      [c1051de8] [c0011460] __cpu_up+0xc0/0x228
      [c1051e18] [c0031bbc] bringup_cpu+0x30/0x224
      [c1051e48] [c0031f3c] cpu_up.constprop.0+0x180/0x33c
      [c1051e88] [c00322e8] bringup_nonboot_cpus+0x88/0xc8
      [c1051eb8] [c07e67bc] smp_init+0x30/0x78
      [c1051ed8] [c07d9e28] kernel_init_freeable+0x118/0x2a8
      [c1051f18] [c00032d8] kernel_init+0x14/0x124
      [c1051f38] [c0010278] ret_from_kernel_thread+0x14/0x1c
    
    Fixes: c45361abb918 ("powerpc/85xx: fix timebase sync issue when CONFIG_HOTPLUG_CPU=n")
    Reported-by: Martin Kennedy <hurricos@gmail.com>
    Signed-off-by: Xiaoming Ni <nixiaoming@huawei.com>
    Tested-by: Martin Kennedy <hurricos@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211126041153.16926-1-nixiaoming@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8e8e6f4108e4c133b09f31f6cc7557ee6df3bb6
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Thu Dec 16 11:16:30 2021 -0800

    bpf, selftests: Fix racing issue in btf_skc_cls_ingress test
    
    [ Upstream commit c2fcbf81c332b42382a0c439bfe2414a241e4f5b ]
    
    The libbpf CI reported occasional failure in btf_skc_cls_ingress:
    
      test_syncookie:FAIL:Unexpected syncookie states gen_cookie:80326634 recv_cookie:0
      bpf prog error at line 97
    
    "error at line 97" means the bpf prog cannot find the listening socket
    when the final ack is received.  It then skipped processing
    the syncookie in the final ack which then led to "recv_cookie:0".
    
    The problem is the userspace program did not do accept() and went
    ahead to close(listen_fd) before the kernel (and the bpf prog) had
    a chance to process the final ack.
    
    The fix is to add accept() call so that the userspace will wait for
    the kernel to finish processing the final ack first before close()-ing
    everything.
    
    Fixes: 9a856cae2217 ("bpf: selftest: Add test_btf_skc_cls_ingress")
    Reported-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20211216191630.466151-1-kafai@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f55f2913ebda52c3d39222b1bd8597930726b15
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Wed Dec 15 18:38:30 2021 -0800

    bpf: Fix extable fixup offset.
    
    [ Upstream commit 433956e91200734d09958673a56df02d00a917c2 ]
    
    The prog - start_of_ldx is the offset before the faulting ldx to the location
    after it, so this will be used to adjust pt_regs->ip for jumping over it and
    continuing, and with old temp it would have been fixed up to the wrong offset,
    causing crash.
    
    Fixes: 4c5de127598e ("bpf: Emit explicit NULL pointer checks for PROBE_LDX instructions.")
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ecd8ad3af6d5f5bbbde97370ae4f885ab7ac47e3
Author: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
Date:   Thu Dec 9 17:01:21 2021 -0800

    arm64: kexec: Fix missing error code 'ret' warning in load_other_segments()
    
    [ Upstream commit 9c5d89bc10551f1aecd768b00fca3339a7b8c8ee ]
    
    Since commit ac10be5cdbfa ("arm64: Use common
    of_kexec_alloc_and_setup_fdt()"), smatch reports the following warning:
    
      arch/arm64/kernel/machine_kexec_file.c:152 load_other_segments()
      warn: missing error code 'ret'
    
    Return code is not set to an error code in load_other_segments() when
    of_kexec_alloc_and_setup_fdt() call returns a NULL dtb. This results
    in status success (return code set to 0) being returned from
    load_other_segments().
    
    Set return code to -EINVAL if of_kexec_alloc_and_setup_fdt() returns
    NULL dtb.
    
    Signed-off-by: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: ac10be5cdbfa ("arm64: Use common of_kexec_alloc_and_setup_fdt()")
    Link: https://lore.kernel.org/r/20211210010121.101823-1-nramas@linux.microsoft.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5473fe0c484a1a360d0f270a9faabfd4652f3fd5
Author: David Howells <dhowells@redhat.com>
Date:   Tue Dec 14 09:22:12 2021 +0000

    afs: Fix mmap
    
    [ Upstream commit 1744a22ae948799da7927b53ec97ccc877ff9d61 ]
    
    Fix afs_add_open_map() to check that the vnode isn't already on the list
    when it adds it.  It's possible that afs_drop_open_mmap() decremented
    the cb_nr_mmap counter, but hadn't yet got into the locked section to
    remove it.
    
    Also vnode->cb_mmap_link should be initialised, so fix that too.
    
    Fixes: 6e0e99d58a65 ("afs: Fix mmap coherency vs 3rd-party changes")
    Reported-by: kafs-testing+fedora34_64checkkafs-build-300@auristor.com
    Suggested-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: kafs-testing+fedora34_64checkkafs-build-300@auristor.com
    cc: linux-afs@lists.infradead.org
    Link: https://lore.kernel.org/r/686465.1639435380@warthog.procyon.org.uk/ # v1
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44a6c846bc3a7efe7d394bab8b2ae3b7f580e190
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 16 03:17:41 2021 -0800

    sit: do not call ipip6_dev_free() from sit_init_net()
    
    [ Upstream commit e28587cc491ef0f3c51258fdc87fbc386b1d4c59 ]
    
    ipip6_dev_free is sit dev->priv_destructor, already called
    by register_netdevice() if something goes wrong.
    
    Alternative would be to make ipip6_dev_free() robust against
    multiple invocations, but other drivers do not implement this
    strategy.
    
    syzbot reported:
    
    dst_release underflow
    WARNING: CPU: 0 PID: 5059 at net/core/dst.c:173 dst_release+0xd8/0xe0 net/core/dst.c:173
    Modules linked in:
    CPU: 1 PID: 5059 Comm: syz-executor.4 Not tainted 5.16.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:dst_release+0xd8/0xe0 net/core/dst.c:173
    Code: 4c 89 f2 89 d9 31 c0 5b 41 5e 5d e9 da d5 44 f9 e8 1d 90 5f f9 c6 05 87 48 c6 05 01 48 c7 c7 80 44 99 8b 31 c0 e8 e8 67 29 f9 <0f> 0b eb 85 0f 1f 40 00 53 48 89 fb e8 f7 8f 5f f9 48 83 c3 a8 48
    RSP: 0018:ffffc9000aa5faa0 EFLAGS: 00010246
    RAX: d6894a925dd15a00 RBX: 00000000ffffffff RCX: 0000000000040000
    RDX: ffffc90005e19000 RSI: 000000000003ffff RDI: 0000000000040000
    RBP: 0000000000000000 R08: ffffffff816a1f42 R09: ffffed1017344f2c
    R10: ffffed1017344f2c R11: 0000000000000000 R12: 0000607f462b1358
    R13: 1ffffffff1bfd305 R14: ffffe8ffffcb1358 R15: dffffc0000000000
    FS:  00007f66c71a2700(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f88aaed5058 CR3: 0000000023e0f000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dst_cache_destroy+0x107/0x1e0 net/core/dst_cache.c:160
     ipip6_dev_free net/ipv6/sit.c:1414 [inline]
     sit_init_net+0x229/0x550 net/ipv6/sit.c:1936
     ops_init+0x313/0x430 net/core/net_namespace.c:140
     setup_net+0x35b/0x9d0 net/core/net_namespace.c:326
     copy_net_ns+0x359/0x5c0 net/core/net_namespace.c:470
     create_new_namespaces+0x4ce/0xa00 kernel/nsproxy.c:110
     unshare_nsproxy_namespaces+0x11e/0x180 kernel/nsproxy.c:226
     ksys_unshare+0x57d/0xb50 kernel/fork.c:3075
     __do_sys_unshare kernel/fork.c:3146 [inline]
     __se_sys_unshare kernel/fork.c:3144 [inline]
     __x64_sys_unshare+0x34/0x40 kernel/fork.c:3144
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f66c882ce99
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f66c71a2168 EFLAGS: 00000246 ORIG_RAX: 0000000000000110
    RAX: ffffffffffffffda RBX: 00007f66c893ff60 RCX: 00007f66c882ce99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000048040200
    RBP: 00007f66c8886ff1 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fff6634832f R14: 00007f66c71a2300 R15: 0000000000022000
     </TASK>
    
    Fixes: cf124db566e6 ("net: Fix inconsistent teardown and release of private netdev state.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211216111741.1387540-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb4687c7442942e115420a30185f8d83faf37696
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Dec 15 12:24:49 2021 -0800

    net: systemport: Add global locking for descriptor lifecycle
    
    [ Upstream commit 8b8e6e782456f1ce02a7ae914bbd5b1053f0b034 ]
    
    The descriptor list is a shared resource across all of the transmit queues, and
    the locking mechanism used today only protects concurrency across a given
    transmit queue between the transmit and reclaiming. This creates an opportunity
    for the SYSTEMPORT hardware to work on corrupted descriptors if we have
    multiple producers at once which is the case when using multiple transmit
    queues.
    
    This was particularly noticeable when using multiple flows/transmit queues and
    it showed up in interesting ways in that UDP packets would get a correct UDP
    header checksum being calculated over an incorrect packet length. Similarly TCP
    packets would get an equally correct checksum computed by the hardware over an
    incorrect packet length.
    
    The SYSTEMPORT hardware maintains an internal descriptor list that it re-arranges
    when the driver produces a new descriptor anytime it writes to the
    WRITE_PORT_{HI,LO} registers, there is however some delay in the hardware to
    re-organize its descriptors and it is possible that concurrent TX queues
    eventually break this internal allocation scheme to the point where the
    length/status part of the descriptor gets used for an incorrect data buffer.
    
    The fix is to impose a global serialization for all TX queues in the short
    section where we are writing to the WRITE_PORT_{HI,LO} registers which solves
    the corruption even with multiple concurrent TX queues being used.
    
    Fixes: 80105befdb4b ("net: systemport: add Broadcom SYSTEMPORT Ethernet MAC driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20211215202450.4086240-1-f.fainelli@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e99fe4137b6d65685508acfeb7d2c571613dc102
Author: D. Wythe <alibuda@linux.alibaba.com>
Date:   Wed Dec 15 20:29:21 2021 +0800

    net/smc: Prevent smc_release() from long blocking
    
    [ Upstream commit 5c15b3123f65f8fbb1b445d9a7e8812e0e435df2 ]
    
    In nginx/wrk benchmark, there's a hung problem with high probability
    on case likes that: (client will last several minutes to exit)
    
    server: smc_run nginx
    
    client: smc_run wrk -c 10000 -t 1 http://server
    
    Client hangs with the following backtrace:
    
    0 [ffffa7ce8Of3bbf8] __schedule at ffffffff9f9eOd5f
    1 [ffffa7ce8Of3bc88] schedule at ffffffff9f9eløe6
    2 [ffffa7ce8Of3bcaO] schedule_timeout at ffffffff9f9e3f3c
    3 [ffffa7ce8Of3bd2O] wait_for_common at ffffffff9f9el9de
    4 [ffffa7ce8Of3bd8O] __flush_work at ffffffff9fOfeOl3
    5 [ffffa7ce8øf3bdfO] smc_release at ffffffffcO697d24 [smc]
    6 [ffffa7ce8Of3be2O] __sock_release at ffffffff9f8O2e2d
    7 [ffffa7ce8Of3be4ø] sock_close at ffffffff9f8ø2ebl
    8 [ffffa7ce8øf3be48] __fput at ffffffff9f334f93
    9 [ffffa7ce8Of3be78] task_work_run at ffffffff9flOlff5
    10 [ffffa7ce8Of3beaO] do_exit at ffffffff9fOe5Ol2
    11 [ffffa7ce8Of3bflO] do_group_exit at ffffffff9fOe592a
    12 [ffffa7ce8Of3bf38] __x64_sys_exit_group at ffffffff9fOe5994
    13 [ffffa7ce8Of3bf4O] do_syscall_64 at ffffffff9f9d4373
    14 [ffffa7ce8Of3bfsO] entry_SYSCALL_64_after_hwframe at ffffffff9fa0007c
    
    This issue dues to flush_work(), which is used to wait for
    smc_connect_work() to finish in smc_release(). Once lots of
    smc_connect_work() was pending or all executing work dangling,
    smc_release() has to block until one worker comes to free, which
    is equivalent to wait another smc_connnect_work() to finish.
    
    In order to fix this, There are two changes:
    
    1. For those idle smc_connect_work(), cancel it from the workqueue; for
       executing smc_connect_work(), waiting for it to finish. For that
       purpose, replace flush_work() with cancel_work_sync().
    
    2. Since smc_connect() hold a reference for passive closing, if
       smc_connect_work() has been cancelled, release the reference.
    
    Fixes: 24ac3a08e658 ("net/smc: rebuild nonblocking connect")
    Reported-by: Tony Lu <tonylu@linux.alibaba.com>
    Tested-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: D. Wythe <alibuda@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Link: https://lore.kernel.org/r/1639571361-101128-1-git-send-email-alibuda@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff3d58592be4863b4fa2efa02637c2fbac047499
Author: Gal Pressman <gal@nvidia.com>
Date:   Thu Dec 16 11:28:25 2021 +0200

    net: Fix double 0x prefix print in SKB dump
    
    [ Upstream commit 8a03ef676ade55182f9b05115763aeda6dc08159 ]
    
    When printing netdev features %pNF already takes care of the 0x prefix,
    remove the explicit one.
    
    Fixes: 6413139dfc64 ("skbuff: increase verbosity when dumping skb data")
    Signed-off-by: Gal Pressman <gal@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 987e1a4682e55527afa403e2497cef627ca0848e
Author: Andrey Eremeev <Axtone4all@yandex.ru>
Date:   Wed Dec 15 20:30:32 2021 +0300

    dsa: mv88e6xxx: fix debug print for SPEED_UNFORCED
    
    [ Upstream commit e08cdf63049b711099efff0811273449083bb958 ]
    
    Debug print uses invalid check to detect if speed is unforced:
    (speed != SPEED_UNFORCED) should be used instead of (!speed).
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Signed-off-by: Andrey Eremeev <Axtone4all@yandex.ru>
    Fixes: 96a2b40c7bd3 ("net: dsa: mv88e6xxx: add port's MAC speed setter")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a77c02d1d2147a76bd187af1bf5a34242662d12
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 15 22:37:31 2021 +0800

    sfc_ef100: potential dereference of null pointer
    
    [ Upstream commit 407ecd1bd726f240123f704620d46e285ff30dd9 ]
    
    The return value of kmalloc() needs to be checked.
    To avoid use in efx_nic_update_stats() in case of the failure of alloc.
    
    Fixes: b593b6f1b492 ("sfc_ef100: statistics gathering")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b4a5d1e15ce72f69be48f38dc0401dab890ae0f
Author: John Keeping <john@metanate.com>
Date:   Tue Dec 14 19:10:09 2021 +0000

    net: stmmac: dwmac-rk: fix oob read in rk_gmac_setup
    
    [ Upstream commit 0546b224cc7717cc8a2db076b0bb069a9c430794 ]
    
    KASAN reports an out-of-bounds read in rk_gmac_setup on the line:
    
            while (ops->regs[i]) {
    
    This happens for most platforms since the regs flexible array member is
    empty, so the memory after the ops structure is being read here.  It
    seems that mostly this happens to contain zero anyway, so we get lucky
    and everything still works.
    
    To avoid adding redundant data to nearly all the ops structures, add a
    new flag to indicate whether the regs field is valid and avoid this loop
    when it is not.
    
    Fixes: 3bb3d6b1c195 ("net: stmmac: Add RK3566/RK3568 SoC support")
    Signed-off-by: John Keeping <john@metanate.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit feb116a0ecc5625d6532c616d9a10ef4ef81514b
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Dec 15 09:39:37 2021 -0500

    net/packet: rx_owner_map depends on pg_vec
    
    [ Upstream commit ec6af094ea28f0f2dda1a6a33b14cd57e36a9755 ]
    
    Packet sockets may switch ring versions. Avoid misinterpreting state
    between versions, whose fields share a union. rx_owner_map is only
    allocated with a packet ring (pg_vec) and both are swapped together.
    If pg_vec is NULL, meaning no packet ring was allocated, then neither
    was rx_owner_map. And the field may be old state from a tpacket_v3.
    
    Fixes: 61fad6816fc1 ("net/packet: tpacket_rcv: avoid a producer race condition")
    Reported-by: Syzbot <syzbot+1ac0994a0a0c55151121@syzkaller.appspotmail.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20211215143937.106178-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27358aa81a7d60e6bd36f0bb1db65cd084c2cad0
Author: Haimin Zhang <tcs.kernel@gmail.com>
Date:   Wed Dec 15 19:15:30 2021 +0800

    netdevsim: Zero-initialize memory for new map's value in function nsim_bpf_map_alloc
    
    [ Upstream commit 481221775d53d6215a6e5e9ce1cce6d2b4ab9a46 ]
    
    Zero-initialize memory for new map's value in function nsim_bpf_map_alloc
    since it may cause a potential kernel information leak issue, as follows:
    1. nsim_bpf_map_alloc calls nsim_map_alloc_elem to allocate elements for
    a new map.
    2. nsim_map_alloc_elem uses kmalloc to allocate map's value, but doesn't
    zero it.
    3. A user application can use IOCTL BPF_MAP_LOOKUP_ELEM to get specific
    element's information in the map.
    4. The kernel function map_lookup_elem will call bpf_map_copy_value to get
    the information allocated at step-2, then use copy_to_user to copy to the
    user buffer.
    This can only leak information for an array map.
    
    Fixes: 395cacb5f1a0 ("netdevsim: bpf: support fake map offload")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Haimin Zhang <tcs.kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215111530.72103-1-tcs.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 288b0c511c11f5a1724d4c300257114a4772bcb2
Author: Cyril Novikov <cnovikov@lynx.com>
Date:   Mon Nov 1 18:39:36 2021 -0700

    ixgbe: set X550 MDIO speed before talking to PHY
    
    [ Upstream commit bf0a375055bd1afbbf02a0ef45f7655da7b71317 ]
    
    The MDIO bus speed must be initialized before talking to the PHY the first
    time in order to avoid talking to it using a speed that the PHY doesn't
    support.
    
    This fixes HW initialization error -17 (IXGBE_ERR_PHY_ADDR_INVALID) on
    Denverton CPUs (a.k.a. the Atom C3000 family) on ports with a 10Gb network
    plugged in. On those devices, HLREG0[MDCSPD] resets to 1, which combined
    with the 10Gb network results in a 24MHz MDIO speed, which is apparently
    too fast for the connected PHY. PHY register reads over MDIO bus return
    garbage, leading to initialization failure.
    
    Reproduced with Linux kernel 4.19 and 5.15-rc7. Can be reproduced using
    the following setup:
    
    * Use an Atom C3000 family system with at least one X552 LAN on the SoC
    * Disable PXE or other BIOS network initialization if possible
      (the interface must not be initialized before Linux boots)
    * Connect a live 10Gb Ethernet cable to an X550 port
    * Power cycle (not reset, doesn't always work) the system and boot Linux
    * Observe: ixgbe interfaces w/ 10GbE cables plugged in fail with error -17
    
    Fixes: e84db7272798 ("ixgbe: Introduce function to control MDIO speed")
    Signed-off-by: Cyril Novikov <cnovikov@lynx.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f2ebb7d43243d6697ca9dfac59d0c6b099ad423
Author: Robert Schlabbach <robert_s@gmx.net>
Date:   Tue Oct 26 02:24:48 2021 +0200

    ixgbe: Document how to enable NBASE-T support
    
    [ Upstream commit 271225fd57c2f1e0b3f8826df51be6c634affefe ]
    
    Commit a296d665eae1 ("ixgbe: Add ethtool support to enable 2.5 and 5.0
    Gbps support") introduced suppression of the advertisement of NBASE-T
    speeds by default, according to Todd Fujinaka to accommodate customers
    with network switches which could not cope with advertised NBASE-T
    speeds, as posted in the E1000-devel mailing list:
    
    https://sourceforge.net/p/e1000/mailman/message/37106269/
    
    However, the suppression was not documented at all, nor was how to
    enable NBASE-T support.
    
    Properly document the NBASE-T suppression and how to enable NBASE-T
    support.
    
    Fixes: a296d665eae1 ("ixgbe: Add ethtool support to enable 2.5 and 5.0 Gbps support")
    Reported-by: Robert Schlabbach <robert_s@gmx.net>
    Signed-off-by: Robert Schlabbach <robert_s@gmx.net>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33c1707a8ea4b70187230202de4a51d756602a80
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Tue Nov 2 09:20:06 2021 +0200

    igc: Fix typo in i225 LTR functions
    
    [ Upstream commit 0182d1f3fa640888a2ed7e3f6df2fdb10adee7c8 ]
    
    The LTR maximum value was incorrectly written using the scale from
    the LTR minimum value. This would cause incorrect values to be sent,
    in cases where the initial calculation lead to different min/max scales.
    
    Fixes: 707abf069548 ("igc: Add initial LTR support")
    Suggested-by: Dima Ruinskiy <dima.ruinskiy@intel.com>
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Nechama Kraus <nechamax.kraus@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 944b8be08131f5faf2cd2440aa1c24a39a163a54
Author: Letu Ren <fantasquex@gmail.com>
Date:   Sat Nov 13 11:42:34 2021 +0800

    igbvf: fix double free in `igbvf_probe`
    
    [ Upstream commit b6d335a60dc624c0d279333b22c737faa765b028 ]
    
    In `igbvf_probe`, if register_netdev() fails, the program will go to
    label err_hw_init, and then to label err_ioremap. In free_netdev() which
    is just below label err_ioremap, there is `list_for_each_entry_safe` and
    `netif_napi_del` which aims to delete all entries in `dev->napi_list`.
    The program has added an entry `adapter->rx_ring->napi` which is added by
    `netif_napi_add` in igbvf_alloc_queues(). However, adapter->rx_ring has
    been freed below label err_hw_init. So this a UAF.
    
    In terms of how to patch the problem, we can refer to igbvf_remove() and
    delete the entry before `adapter->rx_ring`.
    
    The KASAN logs are as follows:
    
    [   35.126075] BUG: KASAN: use-after-free in free_netdev+0x1fd/0x450
    [   35.127170] Read of size 8 at addr ffff88810126d990 by task modprobe/366
    [   35.128360]
    [   35.128643] CPU: 1 PID: 366 Comm: modprobe Not tainted 5.15.0-rc2+ #14
    [   35.129789] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    [   35.131749] Call Trace:
    [   35.132199]  dump_stack_lvl+0x59/0x7b
    [   35.132865]  print_address_description+0x7c/0x3b0
    [   35.133707]  ? free_netdev+0x1fd/0x450
    [   35.134378]  __kasan_report+0x160/0x1c0
    [   35.135063]  ? free_netdev+0x1fd/0x450
    [   35.135738]  kasan_report+0x4b/0x70
    [   35.136367]  free_netdev+0x1fd/0x450
    [   35.137006]  igbvf_probe+0x121d/0x1a10 [igbvf]
    [   35.137808]  ? igbvf_vlan_rx_add_vid+0x100/0x100 [igbvf]
    [   35.138751]  local_pci_probe+0x13c/0x1f0
    [   35.139461]  pci_device_probe+0x37e/0x6c0
    [   35.165526]
    [   35.165806] Allocated by task 366:
    [   35.166414]  ____kasan_kmalloc+0xc4/0xf0
    [   35.167117]  foo_kmem_cache_alloc_trace+0x3c/0x50 [igbvf]
    [   35.168078]  igbvf_probe+0x9c5/0x1a10 [igbvf]
    [   35.168866]  local_pci_probe+0x13c/0x1f0
    [   35.169565]  pci_device_probe+0x37e/0x6c0
    [   35.179713]
    [   35.179993] Freed by task 366:
    [   35.180539]  kasan_set_track+0x4c/0x80
    [   35.181211]  kasan_set_free_info+0x1f/0x40
    [   35.181942]  ____kasan_slab_free+0x103/0x140
    [   35.182703]  kfree+0xe3/0x250
    [   35.183239]  igbvf_probe+0x1173/0x1a10 [igbvf]
    [   35.184040]  local_pci_probe+0x13c/0x1f0
    
    Fixes: d4e0fe01a38a0 (igbvf: add new driver to support 82576 virtual functions)
    Reported-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Letu Ren <fantasquex@gmail.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81ffe207ae1b5d4305540ded2d2d1dc8c99663a0
Author: Karen Sornek <karen.sornek@intel.com>
Date:   Tue Aug 31 13:16:35 2021 +0200

    igb: Fix removal of unicast MAC filters of VFs
    
    [ Upstream commit 584af82154f56e6b2740160fcc84a2966d969e15 ]
    
    Move checking condition of VF MAC filter before clearing
    or adding MAC filter to VF to prevent potential blackout caused
    by removal of necessary and working VF's MAC filter.
    
    Fixes: 1b8b062a99dc ("igb: add VF trust infrastructure")
    Signed-off-by: Karen Sornek <karen.sornek@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12dc89ccaf2024d953235ca2defc40840c27965d
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Dec 10 09:55:29 2021 -0700

    soc/tegra: fuse: Fix bitwise vs. logical OR warning
    
    [ Upstream commit a7083763619f7485ccdade160deb81737cf2732f ]
    
    A new warning in clang points out two instances where boolean
    expressions are being used with a bitwise OR instead of logical OR:
    
    drivers/soc/tegra/fuse/speedo-tegra20.c:72:9: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
                    reg = tegra_fuse_read_spare(i) |
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
    drivers/soc/tegra/fuse/speedo-tegra20.c:72:9: note: cast one or both operands to int to silence this warning
    drivers/soc/tegra/fuse/speedo-tegra20.c:87:9: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
                    reg = tegra_fuse_read_spare(i) |
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
    drivers/soc/tegra/fuse/speedo-tegra20.c:87:9: note: cast one or both operands to int to silence this warning
    2 warnings generated.
    
    The motivation for the warning is that logical operations short circuit
    while bitwise operations do not.
    
    In this instance, tegra_fuse_read_spare() is not semantically returning
    a boolean, it is returning a bit value. Use u32 for its return type so
    that it can be used with either bitwise or boolean operators without any
    warnings.
    
    Fixes: 25cd5a391478 ("ARM: tegra: Add speedo-based process identification")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1488
    Suggested-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23311b92755ffa9087332d1bb8c71c0f6a10cc08
Author: Maxim Galaganov <max@internet.ru>
Date:   Tue Dec 14 15:16:03 2021 -0800

    mptcp: fix deadlock in __mptcp_push_pending()
    
    [ Upstream commit 3d79e3756ca90f7a6087b77b62c1d9c0801e0820 ]
    
    __mptcp_push_pending() may call mptcp_flush_join_list() with subflow
    socket lock held. If such call hits mptcp_sockopt_sync_all() then
    subsequently __mptcp_sockopt_sync() could try to lock the subflow
    socket for itself, causing a deadlock.
    
    sysrq: Show Blocked State
    task:ss-server       state:D stack:    0 pid:  938 ppid:     1 flags:0x00000000
    Call Trace:
     <TASK>
     __schedule+0x2d6/0x10c0
     ? __mod_memcg_state+0x4d/0x70
     ? csum_partial+0xd/0x20
     ? _raw_spin_lock_irqsave+0x26/0x50
     schedule+0x4e/0xc0
     __lock_sock+0x69/0x90
     ? do_wait_intr_irq+0xa0/0xa0
     __lock_sock_fast+0x35/0x50
     mptcp_sockopt_sync_all+0x38/0xc0
     __mptcp_push_pending+0x105/0x200
     mptcp_sendmsg+0x466/0x490
     sock_sendmsg+0x57/0x60
     __sys_sendto+0xf0/0x160
     ? do_wait_intr_irq+0xa0/0xa0
     ? fpregs_restore_userregs+0x12/0xd0
     __x64_sys_sendto+0x20/0x30
     do_syscall_64+0x38/0x90
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f9ba546c2d0
    RSP: 002b:00007ffdc3b762d8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00007f9ba56c8060 RCX: 00007f9ba546c2d0
    RDX: 000000000000077a RSI: 0000000000e5e180 RDI: 0000000000000234
    RBP: 0000000000cc57f0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f9ba56c8060
    R13: 0000000000b6ba60 R14: 0000000000cc7840 R15: 41d8685b1d7901b8
     </TASK>
    
    Fix the issue by using __mptcp_flush_join_list() instead of plain
    mptcp_flush_join_list() inside __mptcp_push_pending(), as suggested by
    Florian. The sockopt sync will be deferred to the workqueue.
    
    Fixes: 1b3e7ede1365 ("mptcp: setsockopt: handle SO_KEEPALIVE and SO_PRIORITY")
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/244
    Suggested-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Maxim Galaganov <max@internet.ru>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c26ac0ea3a91c210cf90452e625dc441adf3e549
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Dec 14 15:16:02 2021 -0800

    mptcp: clear 'kern' flag from fallback sockets
    
    [ Upstream commit d6692b3b97bdc165d150f4c1505751a323a80717 ]
    
    The mptcp ULP extension relies on sk->sk_sock_kern being set correctly:
    It prevents setsockopt(fd, IPPROTO_TCP, TCP_ULP, "mptcp", 6); from
    working for plain tcp sockets (any userspace-exposed socket).
    
    But in case of fallback, accept() can return a plain tcp sk.
    In such case, sk is still tagged as 'kernel' and setsockopt will work.
    
    This will crash the kernel, The subflow extension has a NULL ctx->conn
    mptcp socket:
    
    BUG: KASAN: null-ptr-deref in subflow_data_ready+0x181/0x2b0
    Call Trace:
     tcp_data_ready+0xf8/0x370
     [..]
    
    Fixes: cf7da0d66cc1 ("mptcp: Create SUBFLOW socket for incoming connections")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3de0c86d42f841d1d64f316cd949e65c566f0734
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Dec 14 15:16:01 2021 -0800

    mptcp: remove tcp ulp setsockopt support
    
    [ Upstream commit 404cd9a22150f24acf23a8df2ad0c094ba379f57 ]
    
    TCP_ULP setsockopt cannot be used for mptcp because its already
    used internally to plumb subflow (tcp) sockets to the mptcp layer.
    
    syzbot managed to trigger a crash for mptcp connections that are
    in fallback mode:
    
    KASAN: null-ptr-deref in range [0x0000000000000020-0x0000000000000027]
    CPU: 1 PID: 1083 Comm: syz-executor.3 Not tainted 5.16.0-rc2-syzkaller #0
    RIP: 0010:tls_build_proto net/tls/tls_main.c:776 [inline]
    [..]
     __tcp_set_ulp net/ipv4/tcp_ulp.c:139 [inline]
     tcp_set_ulp+0x428/0x4c0 net/ipv4/tcp_ulp.c:160
     do_tcp_setsockopt+0x455/0x37c0 net/ipv4/tcp.c:3391
     mptcp_setsockopt+0x1b47/0x2400 net/mptcp/sockopt.c:638
    
    Remove support for TCP_ULP setsockopt.
    
    Fixes: d9e4c1291810 ("mptcp: only admit explicitly supported sockopt")
    Reported-by: syzbot+1fd9b69cde42967d1add@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 257b3bb16634fd936129fe2f57a91594a75b8751
Author: Lang Yu <lang.yu@amd.com>
Date:   Tue Dec 14 15:25:54 2021 +0800

    drm/amd/pm: fix a potential gpu_metrics_table memory leak
    
    [ Upstream commit aa464957f7e660abd554f2546a588f6533720e21 ]
    
    Memory is allocated for gpu_metrics_table in renoir_init_smc_tables(),
    but not freed in int smu_v12_0_fini_smc_tables(). Free it!
    
    Fixes: 95868b85764a ("drm/amd/powerplay: add Renoir support for gpu metrics export")
    
    Signed-off-by: Lang Yu <lang.yu@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc98ef784152d078b4610f2ea2eb83134108252c
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Dec 10 15:03:59 2021 -0800

    drm/amd/display: Set exit_optimized_pwr_state for DCN31
    
    [ Upstream commit 7e4d2f30df3fb48f75ce9e96867d42bdddab83ac ]
    
    [Why]
    SMU now respects the PHY refclk disable request from driver.
    
    This causes a hang during hotplug when PHY refclk was disabled
    because it's not being re-enabled and the transmitter control
    starts on dc_link_detect.
    
    [How]
    We normally would re-enable the clk with exit_optimized_pwr_state
    but this is only set on DCN21 and DCN301. Set it for dcn31 as well.
    
    This fixes DMCUB timeouts in the PHY.
    
    Fixes: 64b1d0e8d500 ("drm/amd/display: Add DCN3.1 HWSEQ")
    
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0dacf4bc3c58a441b2759e6b949173b7a042c09
Author: Karol Kolacinski <karol.kolacinski@intel.com>
Date:   Tue Nov 16 13:07:14 2021 +0100

    ice: Don't put stale timestamps in the skb
    
    [ Upstream commit 37e738b6fdb14529534dca441e0222313688fde3 ]
    
    The driver has to check if it does not accidentally put the timestamp in
    the SKB before previous timestamp gets overwritten.
    Timestamp values in the PHY are read only and do not get cleared except
    at hardware reset or when a new timestamp value is captured.
    The cached_tstamp field is used to detect the case where a new timestamp
    has not yet been captured, ensuring that we avoid sending stale
    timestamp data to the stack.
    
    Fixes: ea9b847cda64 ("ice: enable transmit timestamps for E810 devices")
    Signed-off-by: Karol Kolacinski <karol.kolacinski@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89f9c880141eef84ee9001dd6969067be72145d0
Author: Karol Kolacinski <karol.kolacinski@intel.com>
Date:   Thu Nov 4 14:52:11 2021 +0100

    ice: Use div64_u64 instead of div_u64 in adjfine
    
    [ Upstream commit 0013881c1145d36bf26165bb70fdd7560a5507a3 ]
    
    Change the division in ice_ptp_adjfine from div_u64 to div64_u64.
    div_u64 is used when the divisor is 32 bit but in this case incval is
    64 bit and it caused incorrect calculations and incval adjustments.
    
    Fixes: 06c16d89d2cb ("ice: register 1588 PTP clock device object for E810 devices")
    Signed-off-by: Karol Kolacinski <karol.kolacinski@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68014890e4382ff9192e1357be39b7d0455665fa
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Tue Dec 14 18:46:59 2021 +0800

    rds: memory leak in __rds_conn_create()
    
    [ Upstream commit 5f9562ebe710c307adc5f666bf1a2162ee7977c0 ]
    
    __rds_conn_create() did not release conn->c_path when loop_trans != 0 and
    trans->t_prefer_loopback != 0 and is_outgoing == 0.
    
    Fixes: aced3ce57cd3 ("RDS tcp loopback connection can hang")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Sharath Srinivasan <sharath.srinivasan@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d92781bf78db171c8a4fb7648307b846721cf70a
Author: Baowen Zheng <baowen.zheng@corigine.com>
Date:   Mon Dec 13 15:46:04 2021 +0100

    flow_offload: return EOPNOTSUPP for the unsupported mpls action type
    
    [ Upstream commit 166b6a46b78bf8b9559a6620c3032f9fe492e082 ]
    
    We need to return EOPNOTSUPP for the unsupported mpls action type when
    setup the flow action.
    
    In the original implement, we will return 0 for the unsupported mpls
    action type, actually we do not setup it and the following actions
    to the flow action entry.
    
    Fixes: 9838b20a7fb2 ("net: sched: take rtnl lock in tc_setup_flow_action()")
    Signed-off-by: Baowen Zheng <baowen.zheng@corigine.com>
    Signed-off-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97cb5c82aa1dd85a39b1bd021c8b5f18af623779
Author: Ong Boon Leong <boon.leong.ong@intel.com>
Date:   Sat Dec 11 22:51:34 2021 +0800

    net: stmmac: fix tc flower deletion for VLAN priority Rx steering
    
    [ Upstream commit aeb7c75cb77478fdbf821628e9c95c4baa9adc63 ]
    
    To replicate the issue:-
    
    1) Add 1 flower filter for VLAN Priority based frame steering:-
    $ IFDEVNAME=eth0
    $ tc qdisc add dev $IFDEVNAME ingress
    $ tc qdisc add dev $IFDEVNAME root mqprio num_tc 8 \
       map 0 1 2 3 4 5 6 7 0 0 0 0 0 0 0 0 \
       queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 hw 0
    $ tc filter add dev $IFDEVNAME parent ffff: protocol 802.1Q \
       flower vlan_prio 0 hw_tc 0
    
    2) Get the 'pref' id
    $ tc filter show dev $IFDEVNAME ingress
    
    3) Delete a specific tc flower record (say pref 49151)
    $ tc filter del dev $IFDEVNAME parent ffff: pref 49151
    
    From dmesg, we will observe kernel NULL pointer ooops
    
    [  197.170464] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [  197.171367] #PF: supervisor read access in kernel mode
    [  197.171367] #PF: error_code(0x0000) - not-present page
    [  197.171367] PGD 0 P4D 0
    [  197.171367] Oops: 0000 [#1] PREEMPT SMP NOPTI
    
    <snip>
    
    [  197.171367] RIP: 0010:tc_setup_cls+0x20b/0x4a0 [stmmac]
    
    <snip>
    
    [  197.171367] Call Trace:
    [  197.171367]  <TASK>
    [  197.171367]  ? __stmmac_disable_all_queues+0xa8/0xe0 [stmmac]
    [  197.171367]  stmmac_setup_tc_block_cb+0x70/0x110 [stmmac]
    [  197.171367]  tc_setup_cb_destroy+0xb3/0x180
    [  197.171367]  fl_hw_destroy_filter+0x94/0xc0 [cls_flower]
    
    The above issue is due to previous incorrect implementation of
    tc_del_vlan_flow(), shown below, that uses flow_cls_offload_flow_rule()
    to get struct flow_rule *rule which is no longer valid for tc filter
    delete operation.
    
      struct flow_rule *rule = flow_cls_offload_flow_rule(cls);
      struct flow_dissector *dissector = rule->match.dissector;
    
    So, to ensure tc_del_vlan_flow() deletes the right VLAN cls record for
    earlier configured RX queue (configured by hw_tc) in tc_add_vlan_flow(),
    this patch introduces stmmac_rfs_entry as driver-side flow_cls_offload
    record for 'RX frame steering' tc flower, currently used for VLAN
    priority. The implementation has taken consideration for future extension
    to include other type RX frame steering such as EtherType based.
    
    v2:
     - Clean up overly extensive backtrace and rewrite git message to better
       explain the kernel NULL pointer issue.
    
    Fixes: 0e039f5cf86c ("net: stmmac: add RX frame steering based on VLAN priority in tc flower")
    Tested-by: Kurt Kanzenbach <kurt@linutronix.de>
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1571ff2d199e320f837f40cd5ed36c091373d3ef
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 29 15:32:46 2021 +0200

    mac80211: fix lookup when adding AddBA extension element
    
    [ Upstream commit 511ab0c1dfb260a6b17b8771109e8d63474473a7 ]
    
    We should be doing the HE capabilities lookup based on the full
    interface type so if P2P doesn't have HE but client has it doesn't
    get confused. Fix that.
    
    Fixes: 2ab45876756f ("mac80211: add support for the ADDBA extension element")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211129152938.010fc1d61137.If3a468145f29d670cb00a693bed559d8290ba693@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0783716ba2bd7f01ce7304668f7492e13a1d92bc
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Thu Dec 2 15:28:54 2021 +0200

    cfg80211: Acquire wiphy mutex on regulatory work
    
    [ Upstream commit e08ebd6d7b90ae81f21425ca39136f5b2272580f ]
    
    The function cfg80211_reg_can_beacon_relax() expects wiphy
    mutex to be held when it is being called. However, when
    reg_leave_invalid_chans() is called the mutex is not held.
    Fix it by acquiring the lock before calling the function.
    
    Fixes: a05829a7222e ("cfg80211: avoid holding the RTNL when calling the driver")
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211202152831.527686cda037.I40ad9372a47cbad53b4aae7b5a6ccc0dc3fddf8b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0984a4d414b7ba34774832ce01bf1555ea41c7b
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Dec 2 15:26:25 2021 +0200

    mac80211: agg-tx: don't schedule_and_wake_txq() under sta->lock
    
    [ Upstream commit 06c41bda0ea14aa7fba932a9613c4ee239682cf0 ]
    
    When we call ieee80211_agg_start_txq(), that will in turn call
    schedule_and_wake_txq(). Called from ieee80211_stop_tx_ba_cb()
    this is done under sta->lock, which leads to certain circular
    lock dependencies, as reported by Chris Murphy:
    https://lore.kernel.org/r/CAJCQCtSXJ5qA4bqSPY=oLRMbv-irihVvP7A2uGutEbXQVkoNaw@mail.gmail.com
    
    In general, ieee80211_agg_start_txq() is usually not called
    with sta->lock held, only in this one place. But it's always
    called with sta->ampdu_mlme.mtx held, and that's therefore
    clearly sufficient.
    
    Change ieee80211_stop_tx_ba_cb() to also call it without the
    sta->lock held, by factoring it out of ieee80211_remove_tid_tx()
    (which is only called in this one place).
    
    This breaks the locking chain and makes it less likely that
    we'll have similar locking chain problems in the future.
    
    Fixes: ba8c3d6f16a1 ("mac80211: add an intermediate software queue implementation")
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211202152554.f519884c8784.I555fef8e67d93fff3d9a304886c4a9f8b322e591@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95053f4477c97c3e4ffc66aa09d233e14e4e881c
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Thu Dec 9 20:41:24 2021 -0800

    drm/i915/display: Fix an unsigned subtraction which can never be negative.
    
    [ Upstream commit 53b3495273282aa844c4613d19c3b30558c70c84 ]
    
    smatch warning:
    drivers/gpu/drm/i915/display/intel_dmc.c:601 parse_dmc_fw() warn:
    unsigned 'fw->size - offset' is never less than zero
    
    Firmware size is size_t and offset is u32. So the subtraction is
    unsigned which can never be less than zero.
    
    Fixes: 3d5928a168a9 ("drm/i915/xelpd: Pipe A DMC plugging")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211210044129.12422-1-harshit.m.mogalapalli@oracle.com
    (cherry picked from commit 87bb2a410dcfb617b88e4695edf4beb6336dc314)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb5099ad02dcdccbab725756d83a4b55805a9b25
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Dec 14 09:41:26 2021 +0800

    drm/ast: potential dereference of null pointer
    
    [ Upstream commit fea3fdf975dd9f3e5248afaab8fe023db313f005 ]
    
    The return value of kzalloc() needs to be checked.
    To avoid use of null pointer '&ast_state->base' in case of the
    failure of alloc.
    
    Fixes: f0adbc382b8b ("drm/ast: Allocate initial CRTC state of the correct size")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211214014126.2211535-1-jiasheng@iscas.ac.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1456a0004cc54c58adb2501cb0c95dc8b3c83e9e
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Sat Dec 11 17:11:12 2021 +0100

    mptcp: never allow the PM to close a listener subflow
    
    [ Upstream commit b0cdc5dbcf2ba0d99785da5aabf1b17943805b8a ]
    
    Currently, when deleting an endpoint the netlink PM treverses
    all the local MPTCP sockets, regardless of their status.
    
    If an MPTCP listener socket is bound to the IP matching the
    delete endpoint, the listener TCP socket will be closed.
    That is unexpected, the PM should only affect data subflows.
    
    Additionally, syzbot was able to trigger a NULL ptr dereference
    due to the above:
    
    general protection fault, probably for non-canonical address 0xdffffc0000000003: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000018-0x000000000000001f]
    CPU: 1 PID: 6550 Comm: syz-executor122 Not tainted 5.16.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__lock_acquire+0xd7d/0x54a0 kernel/locking/lockdep.c:4897
    Code: 0f 0e 41 be 01 00 00 00 0f 86 c8 00 00 00 89 05 69 cc 0f 0e e9 bd 00 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 da 48 c1 ea 03 <80> 3c 02 00 0f 85 f3 2f 00 00 48 81 3b 20 75 17 8f 0f 84 52 f3 ff
    RSP: 0018:ffffc90001f2f818 EFLAGS: 00010016
    RAX: dffffc0000000000 RBX: 0000000000000018 RCX: 0000000000000000
    RDX: 0000000000000003 RSI: 0000000000000000 RDI: 0000000000000001
    RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000000 R11: 000000000000000a R12: 0000000000000000
    R13: ffff88801b98d700 R14: 0000000000000000 R15: 0000000000000001
    FS:  00007f177cd3d700(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f177cd1b268 CR3: 000000001dd55000 CR4: 0000000000350ee0
    Call Trace:
     <TASK>
     lock_acquire kernel/locking/lockdep.c:5637 [inline]
     lock_acquire+0x1ab/0x510 kernel/locking/lockdep.c:5602
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
     _raw_spin_lock_irqsave+0x39/0x50 kernel/locking/spinlock.c:162
     finish_wait+0xc0/0x270 kernel/sched/wait.c:400
     inet_csk_wait_for_connect net/ipv4/inet_connection_sock.c:464 [inline]
     inet_csk_accept+0x7de/0x9d0 net/ipv4/inet_connection_sock.c:497
     mptcp_accept+0xe5/0x500 net/mptcp/protocol.c:2865
     inet_accept+0xe4/0x7b0 net/ipv4/af_inet.c:739
     mptcp_stream_accept+0x2e7/0x10e0 net/mptcp/protocol.c:3345
     do_accept+0x382/0x510 net/socket.c:1773
     __sys_accept4_file+0x7e/0xe0 net/socket.c:1816
     __sys_accept4+0xb0/0x100 net/socket.c:1846
     __do_sys_accept net/socket.c:1864 [inline]
     __se_sys_accept net/socket.c:1861 [inline]
     __x64_sys_accept+0x71/0xb0 net/socket.c:1861
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f177cd8b8e9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 b1 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f177cd3d308 EFLAGS: 00000246 ORIG_RAX: 000000000000002b
    RAX: ffffffffffffffda RBX: 00007f177ce13408 RCX: 00007f177cd8b8e9
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: 00007f177ce13400 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f177ce1340c
    R13: 00007f177cde1004 R14: 6d705f706374706d R15: 0000000000022000
     </TASK>
    
    Fix the issue explicitly skipping MPTCP socket in TCP_LISTEN
    status.
    
    Reported-and-tested-by: syzbot+e4d843bb96a9431e6331@syzkaller.appspotmail.com
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Fixes: 740d798e8767 ("mptcp: remove id 0 address")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Link: https://lore.kernel.org/r/ebc7594cdd420d241fb2172ddb8542ba64717657.1639238695.git.pabeni@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1752132eba0852e2d26852b433e926a43ade2715
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Mon Dec 13 16:36:00 2021 +0800

    selftest/net/forwarding: declare NETIFS p9 p10
    
    [ Upstream commit 71da1aec215290e249d09c44c768df859f3a3bba ]
    
    The recent GRE selftests defined NUM_NETIFS=10. If the users copy
    forwarding.config.sample to forwarding.config directly, they will get
    error "Command line is not complete" when run the GRE tests, because
    create_netif_veth() failed with no interface name defined.
    
    Fix it by extending the NETIFS with p9 and p10.
    
    Fixes: 2800f2485417 ("selftests: forwarding: Test multipath hashing on inner IP pkts for GRE tunnel")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c23a5d90733857837520cadb285b0aa9f8f8903
Author: Marek Behún <kabel@kernel.org>
Date:   Sat Dec 11 23:51:41 2021 +0100

    net: dsa: mv88e6xxx: Unforce speed & duplex in mac_link_down()
    
    [ Upstream commit 9d591fc028b6bddb38c6585874f331267cbdadae ]
    
    Commit 64d47d50be7a ("net: dsa: mv88e6xxx: configure interface settings
    in mac_config") removed forcing of speed and duplex from
    mv88e6xxx_mac_config(), where the link is forced down, and left it only
    in mv88e6xxx_mac_link_up(), by which time link is unforced.
    
    It seems that (at least on 88E6190) when changing cmode to 2500base-x,
    if the link is not forced down, but the speed or duplex are still
    forced, the forcing of new settings for speed & duplex doesn't take in
    mv88e6xxx_mac_link_up().
    
    Fix this by unforcing speed & duplex in mv88e6xxx_mac_link_down().
    
    Fixes: 64d47d50be7a ("net: dsa: mv88e6xxx: configure interface settings in mac_config")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4985d3b53c4de1a343b3994be27bad631f23b9c1
Author: Willem de Bruijn <willemb@google.com>
Date:   Sat Dec 11 14:30:31 2021 -0500

    selftests/net: toeplitz: fix udp option
    
    [ Upstream commit a8d13611b4a7b1b20d17bf2b9a89a3efcabde56c ]
    
    Tiny fix. Option -u ("use udp") does not take an argument.
    
    It can cause the next argument to silently be ignored.
    
    Fixes: 5ebfb4cc3048 ("selftests/net: toeplitz test")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 491c1253441e2fdc8f6a6f4976e3f13440419b7a
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Fri Dec 10 17:42:47 2021 +0100

    net/sched: sch_ets: don't remove idle classes from the round-robin list
    
    [ Upstream commit c062f2a0b04d86c5b8c9d973bea43493eaca3d32 ]
    
    Shuang reported that the following script:
    
     1) tc qdisc add dev ddd0 handle 10: parent 1: ets bands 8 strict 4 priomap 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
     2) mausezahn ddd0  -A 10.10.10.1 -B 10.10.10.2 -c 0 -a own -b 00:c1:a0:c1:a0:00 -t udp &
     3) tc qdisc change dev ddd0 handle 10: ets bands 4 strict 2 quanta 2500 2500 priomap 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
    
    crashes systematically when line 2) is commented:
    
     list_del corruption, ffff8e028404bd30->next is LIST_POISON1 (dead000000000100)
     ------------[ cut here ]------------
     kernel BUG at lib/list_debug.c:47!
     invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
     CPU: 0 PID: 954 Comm: tc Not tainted 5.16.0-rc4+ #478
     Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
     RIP: 0010:__list_del_entry_valid.cold.1+0x12/0x47
     Code: fe ff 0f 0b 48 89 c1 4c 89 c6 48 c7 c7 08 42 1b 87 e8 1d c5 fe ff 0f 0b 48 89 fe 48 89 c2 48 c7 c7 98 42 1b 87 e8 09 c5 fe ff <0f> 0b 48 c7 c7 48 43 1b 87 e8 fb c4 fe ff 0f 0b 48 89 f2 48 89 fe
     RSP: 0018:ffffae46807a3888 EFLAGS: 00010246
     RAX: 000000000000004e RBX: 0000000000000007 RCX: 0000000000000202
     RDX: 0000000000000000 RSI: ffffffff871ac536 RDI: 00000000ffffffff
     RBP: ffffae46807a3a10 R08: 0000000000000000 R09: c0000000ffff7fff
     R10: 0000000000000001 R11: ffffae46807a36a8 R12: ffff8e028404b800
     R13: ffff8e028404bd30 R14: dead000000000100 R15: ffff8e02fafa2400
     FS:  00007efdc92e4480(0000) GS:ffff8e02fb600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000682f48 CR3: 00000001058be000 CR4: 0000000000350ef0
     Call Trace:
      <TASK>
      ets_qdisc_change+0x58b/0xa70 [sch_ets]
      tc_modify_qdisc+0x323/0x880
      rtnetlink_rcv_msg+0x169/0x4a0
      netlink_rcv_skb+0x50/0x100
      netlink_unicast+0x1a5/0x280
      netlink_sendmsg+0x257/0x4d0
      sock_sendmsg+0x5b/0x60
      ____sys_sendmsg+0x1f2/0x260
      ___sys_sendmsg+0x7c/0xc0
      __sys_sendmsg+0x57/0xa0
      do_syscall_64+0x3a/0x80
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7efdc8031338
     Code: 89 02 48 c7 c0 ff ff ff ff eb b5 0f 1f 80 00 00 00 00 f3 0f 1e fa 48 8d 05 25 43 2c 00 8b 00 85 c0 75 17 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 58 c3 0f 1f 80 00 00 00 00 41 54 41 89 d4 55
     RSP: 002b:00007ffdf1ce9828 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 0000000061b37a97 RCX: 00007efdc8031338
     RDX: 0000000000000000 RSI: 00007ffdf1ce9890 RDI: 0000000000000003
     RBP: 0000000000000000 R08: 0000000000000001 R09: 000000000078a940
     R10: 000000000000000c R11: 0000000000000246 R12: 0000000000000001
     R13: 0000000000688880 R14: 0000000000000000 R15: 0000000000000000
      </TASK>
     Modules linked in: sch_ets sch_tbf dummy rfkill iTCO_wdt iTCO_vendor_support intel_rapl_msr intel_rapl_common joydev pcspkr i2c_i801 virtio_balloon i2c_smbus lpc_ich ip_tables xfs libcrc32c crct10dif_pclmul crc32_pclmul crc32c_intel serio_raw ghash_clmulni_intel ahci libahci libata virtio_blk virtio_console virtio_net net_failover failover sunrpc dm_mirror dm_region_hash dm_log dm_mod [last unloaded: sch_ets]
     ---[ end trace f35878d1912655c2 ]---
     RIP: 0010:__list_del_entry_valid.cold.1+0x12/0x47
     Code: fe ff 0f 0b 48 89 c1 4c 89 c6 48 c7 c7 08 42 1b 87 e8 1d c5 fe ff 0f 0b 48 89 fe 48 89 c2 48 c7 c7 98 42 1b 87 e8 09 c5 fe ff <0f> 0b 48 c7 c7 48 43 1b 87 e8 fb c4 fe ff 0f 0b 48 89 f2 48 89 fe
     RSP: 0018:ffffae46807a3888 EFLAGS: 00010246
     RAX: 000000000000004e RBX: 0000000000000007 RCX: 0000000000000202
     RDX: 0000000000000000 RSI: ffffffff871ac536 RDI: 00000000ffffffff
     RBP: ffffae46807a3a10 R08: 0000000000000000 R09: c0000000ffff7fff
     R10: 0000000000000001 R11: ffffae46807a36a8 R12: ffff8e028404b800
     R13: ffff8e028404bd30 R14: dead000000000100 R15: ffff8e02fafa2400
     FS:  00007efdc92e4480(0000) GS:ffff8e02fb600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000682f48 CR3: 00000001058be000 CR4: 0000000000350ef0
     Kernel panic - not syncing: Fatal exception in interrupt
     Kernel Offset: 0x4e00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
     ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    we can remove 'q->classes[i].alist' only if DRR class 'i' was part of the
    active list. In the ETS scheduler DRR classes belong to that list only if
    the queue length is greater than zero: we need to test for non-zero value
    of 'q->classes[i].qdisc->q.qlen' before removing from the list, similarly
    to what has been done elsewhere in the ETS code.
    
    Fixes: de6d25924c2a ("net/sched: sch_ets: don't peek at classes beyond 'nbands'")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 215b5046b11e4ce9688e562fe437e2e3376f76dc
Author: Alejandro Concepcion-Rodriguez <asconcepcion@acoro.eu>
Date:   Sun Dec 12 16:06:02 2021 +0000

    drm: simpledrm: fix wrong unit with pixel clock
    
    [ Upstream commit 5cf06065bd1f7b94fbb80e7eeb033899f77ab5ba ]
    
    Pixel clock has to be set in kHz.
    
    Signed-off-by: Alejandro Concepcion-Rodriguez <asconcepcion@acoro.eu>
    Fixes: 11e8f5fd223b ("drm: Add simpledrm driver")
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/6f8554ef-1305-0dda-821c-f7d2e5644a48@acoro.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00b072a55ffc85793927701003f4c2207ffb521c
Author: Alyssa Ross <hi@alyssa.is>
Date:   Thu Nov 25 15:44:38 2021 +0000

    dmaengine: st_fdma: fix MODULE_ALIAS
    
    [ Upstream commit 822c9f2b833c53fc67e8adf6f63ecc3ea24d502c ]
    
    modprobe can't handle spaces in aliases.
    
    Fixes: 6b4cd727eaf1 ("dmaengine: st_fdma: Add STMicroelectronics FDMA engine driver support")
    Signed-off-by: Alyssa Ross <hi@alyssa.is>
    Link: https://lore.kernel.org/r/20211125154441.2626214-1-hi@alyssa.is
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee3701c4d9758e0d344ba859cf7459400a6d5625
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Wed Dec 8 10:01:27 2021 -0700

    dmaengine: idxd: fix missed completion on abort path
    
    [ Upstream commit 8affd8a4b5ce356c8900cfb037674f3a4a11fbdb ]
    
    Ming reported that with the abort path of the descriptor submission, there
    can be a window where a completed descriptor can be missed to be completed
    by the irq completion thread:
    
    CPU A                           CPU B
    Submit (successful)
    
    Submit (fail)
                                    irq_process_work_list() // empty
    
    llist_abort_desc()
    // remove all descs from pending list
    
                                    irq_process_pending_llist() // empty
                                    exit idxd_wq_thread() with no processing
    
    Add opportunistic descriptor completion in the abort path in order to
    remove the missed completion.
    
    Fixes: 6b4b87f2c31a ("dmaengine: idxd: fix submission race window")
    Reported-by: Ming Li <ming4.li@intel.com>
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/163898288714.443911.16084982766671976640.stgit@djiang5-desk3.ch.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 088e4d7dba27e89584962aa2394988f115ef45e5
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 11:26:16 2021 -0700

    selftests: Fix IPv6 address bind tests
    
    [ Upstream commit 28a2686c185e84b6aa6a4d9c9a972360eb7ca266 ]
    
    IPv6 allows binding a socket to a device then binding to an address
    not on the device (__inet6_bind -> ipv6_chk_addr with strict flag
    not set). Update the bind tests to reflect legacy behavior.
    
    Fixes: 34d0302ab861 ("selftests: Add ipv6 address bind tests to fcnal-test")
    Reported-by: Li Zhijian <lizhijian@fujitsu.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28c73d856b71d79b919391e2f58a253a8e9a4a67
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 10:21:08 2021 -0700

    selftests: Fix raw socket bind tests with VRF
    
    [ Upstream commit 0f108ae4452025fef529671998f6c7f1c4526790 ]
    
    Commit referenced below added negative socket bind tests for VRF. The
    socket binds should fail since the address to bind to is in a VRF yet
    the socket is not bound to the VRF or a device within it. Update the
    expected return code to check for 1 (bind failure) so the test passes
    when the bind fails as expected. Add a 'show_hint' comment to explain
    why the bind is expected to fail.
    
    Fixes: 75b2b2b3db4c ("selftests: Add ipv4 address bind tests to fcnal-test")
    Reported-by: Li Zhijian <lizhijian@fujitsu.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 013ed7533966ffb31a234be3b2b402c2c78a024c
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 10:11:30 2021 -0700

    selftests: Add duplicate config only for MD5 VRF tests
    
    [ Upstream commit 7e0147592b5c4f9e2eb8c54a7857a56d4863f74e ]
    
    Commit referenced below added configuration in the default VRF that
    duplicates a VRF to check MD5 passwords are properly used and fail
    when expected. That config should not be added all the time as it
    can cause tests to pass that should not (by matching on default VRF
    setup when it should not). Move the duplicate setup to a function
    that is only called for the MD5 tests and add a cleanup function
    to remove it after the MD5 tests.
    
    Fixes: 5cad8bce26e0 ("fcnal-test: Add TCP MD5 tests for VRF")
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 769f38809709e8aea0b6959589faf9191f984ec6
Author: Yufeng Mo <moyufeng@huawei.com>
Date:   Fri Dec 10 21:09:34 2021 +0800

    net: hns3: fix race condition in debugfs
    
    [ Upstream commit 6dde452bceca3f2ed2b33bc46a16ff5682a03a2e ]
    
    When multiple threads concurrently access the debugfs content, data
    and pointer exceptions may occur. Therefore, mutex lock protection is
    added for debugfs.
    
    Fixes: 5e69ea7ee2a6 ("net: hns3: refactor the debugfs process")
    Signed-off-by: Yufeng Mo <moyufeng@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f4a353f6fe033807cd026a5de81c67469ff19b0
Author: Jie Wang <wangjie125@huawei.com>
Date:   Fri Dec 10 21:09:33 2021 +0800

    net: hns3: fix use-after-free bug in hclgevf_send_mbx_msg
    
    [ Upstream commit 27cbf64a766e86f068ce6214f04c00ceb4db1af4 ]
    
    Currently, the hns3_remove function firstly uninstall client instance,
    and then uninstall acceletion engine device. The netdevice is freed in
    client instance uninstall process, but acceletion engine device uninstall
    process still use it to trace runtime information. This causes a use after
    free problem.
    
    So fixes it by check the instance register state to avoid use after free.
    
    Fixes: d8355240cf8f ("net: hns3: add trace event support for PF/VF mailbox")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4377575d2e9017abf393bdfb3ef8d19071fabcc
Author: Po-Hsu Lin <po-hsu.lin@canonical.com>
Date:   Fri Dec 10 15:25:23 2021 +0800

    selftests: icmp_redirect: pass xfail=0 to log_test()
    
    [ Upstream commit 3748939bce3fc7a15ef07161826507fbe410bb7a ]
    
    If any sub-test in this icmp_redirect.sh is failing but not expected
    to fail. The script will complain:
        ./icmp_redirect.sh: line 72: [: 1: unary operator expected
    
    This is because when the sub-test is not expected to fail, we won't
    pass any value for the xfail local variable in log_test() and thus
    it's empty. Fix this by passing 0 as the 4th variable to log_test()
    for non-xfail cases.
    
    v2: added fixes tag
    
    Fixes: 0a36a75c6818 ("selftests: icmp_redirect: support expected failures")
    Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cd2d21bbe580fb7539a87c574671e4196d82353
Author: Filip Pokryvka <fpokryvk@redhat.com>
Date:   Fri Dec 10 18:50:32 2021 +0100

    netdevsim: don't overwrite read only ethtool parms
    
    [ Upstream commit ee60e626d536da4c710b3634afe68fe7c6d69b59 ]
    
    Ethtool ring feature has _max_pending attributes read-only.
    Set only read-write attributes in nsim_set_ringparam.
    
    This patch is useful, if netdevsim device is set-up using NetworkManager,
    because NetworkManager sends 0 as MAX values, as it is pointless to
    retrieve them in extra call, because they should be read-only. Then,
    the device is left in incosistent state (value > MAX).
    
    Fixes: a7fc6db099b5 ("netdevsim: support ethtool ring and coalesce settings")
    Signed-off-by: Filip Pokryvka <fpokryvk@redhat.com>
    Link: https://lore.kernel.org/r/20211210175032.411872-1-fpokryvk@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5d28205bf1de7082d904ed277ceb2db2879e302
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 9 10:50:58 2021 -0800

    inet_diag: fix kernel-infoleak for UDP sockets
    
    [ Upstream commit 71ddeac8cd1d217744a0e060ff520e147c9328d1 ]
    
    KMSAN reported a kernel-infoleak [1], that can exploited
    by unpriv users.
    
    After analysis it turned out UDP was not initializing
    r->idiag_expires. Other users of inet_sk_diag_fill()
    might make the same mistake in the future, so fix this
    in inet_sk_diag_fill().
    
    [1]
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline]
    BUG: KMSAN: kernel-infoleak in copyout lib/iov_iter.c:156 [inline]
    BUG: KMSAN: kernel-infoleak in _copy_to_iter+0x69d/0x25c0 lib/iov_iter.c:670
     instrument_copy_to_user include/linux/instrumented.h:121 [inline]
     copyout lib/iov_iter.c:156 [inline]
     _copy_to_iter+0x69d/0x25c0 lib/iov_iter.c:670
     copy_to_iter include/linux/uio.h:155 [inline]
     simple_copy_to_iter+0xf3/0x140 net/core/datagram.c:519
     __skb_datagram_iter+0x2cb/0x1280 net/core/datagram.c:425
     skb_copy_datagram_iter+0xdc/0x270 net/core/datagram.c:533
     skb_copy_datagram_msg include/linux/skbuff.h:3657 [inline]
     netlink_recvmsg+0x660/0x1c60 net/netlink/af_netlink.c:1974
     sock_recvmsg_nosec net/socket.c:944 [inline]
     sock_recvmsg net/socket.c:962 [inline]
     sock_read_iter+0x5a9/0x630 net/socket.c:1035
     call_read_iter include/linux/fs.h:2156 [inline]
     new_sync_read fs/read_write.c:400 [inline]
     vfs_read+0x1631/0x1980 fs/read_write.c:481
     ksys_read+0x28c/0x520 fs/read_write.c:619
     __do_sys_read fs/read_write.c:629 [inline]
     __se_sys_read fs/read_write.c:627 [inline]
     __x64_sys_read+0xdb/0x120 fs/read_write.c:627
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:524 [inline]
     slab_alloc_node mm/slub.c:3251 [inline]
     __kmalloc_node_track_caller+0xe0c/0x1510 mm/slub.c:4974
     kmalloc_reserve net/core/skbuff.c:354 [inline]
     __alloc_skb+0x545/0xf90 net/core/skbuff.c:426
     alloc_skb include/linux/skbuff.h:1126 [inline]
     netlink_dump+0x3d5/0x16a0 net/netlink/af_netlink.c:2245
     __netlink_dump_start+0xd1c/0xee0 net/netlink/af_netlink.c:2370
     netlink_dump_start include/linux/netlink.h:254 [inline]
     inet_diag_handler_cmd+0x2e7/0x400 net/ipv4/inet_diag.c:1343
     sock_diag_rcv_msg+0x24a/0x620
     netlink_rcv_skb+0x447/0x800 net/netlink/af_netlink.c:2491
     sock_diag_rcv+0x63/0x80 net/core/sock_diag.c:276
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x1095/0x1360 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x16f3/0x1870 net/netlink/af_netlink.c:1916
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg net/socket.c:724 [inline]
     sock_write_iter+0x594/0x690 net/socket.c:1057
     do_iter_readv_writev+0xa7f/0xc70
     do_iter_write+0x52c/0x1500 fs/read_write.c:851
     vfs_writev fs/read_write.c:924 [inline]
     do_writev+0x63f/0xe30 fs/read_write.c:967
     __do_sys_writev fs/read_write.c:1040 [inline]
     __se_sys_writev fs/read_write.c:1037 [inline]
     __x64_sys_writev+0xe5/0x120 fs/read_write.c:1037
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Bytes 68-71 of 312 are uninitialized
    Memory access of size 312 starts at ffff88812ab54000
    Data copied to user address 0000000020001440
    
    CPU: 1 PID: 6365 Comm: syz-executor801 Not tainted 5.16.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 3c4d05c80567 ("inet_diag: Introduce the inet socket dumping routine")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211209185058.53917-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6deae2e2d83bd267e1986f5d71d8c458e18fd99
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 10 06:20:46 2021 -0800

    sch_cake: do not call cake_destroy() from cake_init()
    
    [ Upstream commit ab443c53916730862cec202078d36fd4008bea79 ]
    
    qdiscs are not supposed to call their own destroy() method
    from init(), because core stack already does that.
    
    syzbot was able to trigger use after free:
    
    DEBUG_LOCKS_WARN_ON(lock->magic != lock)
    WARNING: CPU: 0 PID: 21902 at kernel/locking/mutex.c:586 __mutex_lock_common kernel/locking/mutex.c:586 [inline]
    WARNING: CPU: 0 PID: 21902 at kernel/locking/mutex.c:586 __mutex_lock+0x9ec/0x12f0 kernel/locking/mutex.c:740
    Modules linked in:
    CPU: 0 PID: 21902 Comm: syz-executor189 Not tainted 5.16.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__mutex_lock_common kernel/locking/mutex.c:586 [inline]
    RIP: 0010:__mutex_lock+0x9ec/0x12f0 kernel/locking/mutex.c:740
    Code: 08 84 d2 0f 85 19 08 00 00 8b 05 97 38 4b 04 85 c0 0f 85 27 f7 ff ff 48 c7 c6 20 00 ac 89 48 c7 c7 a0 fe ab 89 e8 bf 76 ba ff <0f> 0b e9 0d f7 ff ff 48 8b 44 24 40 48 8d b8 c8 08 00 00 48 89 f8
    RSP: 0018:ffffc9000627f290 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88802315d700 RSI: ffffffff815f1db8 RDI: fffff52000c4fe44
    RBP: ffff88818f28e000 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff815ebb5e R11: 0000000000000000 R12: 0000000000000000
    R13: dffffc0000000000 R14: ffffc9000627f458 R15: 0000000093c30000
    FS:  0000555556abc400(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fda689c3303 CR3: 000000001cfbb000 CR4: 0000000000350ef0
    Call Trace:
     <TASK>
     tcf_chain0_head_change_cb_del+0x2e/0x3d0 net/sched/cls_api.c:810
     tcf_block_put_ext net/sched/cls_api.c:1381 [inline]
     tcf_block_put_ext net/sched/cls_api.c:1376 [inline]
     tcf_block_put+0xbc/0x130 net/sched/cls_api.c:1394
     cake_destroy+0x3f/0x80 net/sched/sch_cake.c:2695
     qdisc_create.constprop.0+0x9da/0x10f0 net/sched/sch_api.c:1293
     tc_modify_qdisc+0x4c5/0x1980 net/sched/sch_api.c:1660
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5571
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2496
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xdf0 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2409
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2463
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2492
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f1bb06badb9
    Code: Unable to access opcode bytes at RIP 0x7f1bb06bad8f.
    RSP: 002b:00007fff3012a658 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f1bb06badb9
    RDX: 0000000000000000 RSI: 00000000200007c0 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 0000000000000003 R09: 0000000000000003
    R10: 0000000000000003 R11: 0000000000000246 R12: 00007fff3012a688
    R13: 00007fff3012a6a0 R14: 00007fff3012a6e0 R15: 00000000000013c2
     </TASK>
    
    Fixes: 046f6fd5daef ("sched: Add Common Applications Kept Enhanced (cake) qdisc")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Link: https://lore.kernel.org/r/20211210142046.698336-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc851898751d518322e3768ddb741b8fc7bdc76b
Author: Philipp Rudo <prudo@redhat.com>
Date:   Wed Dec 8 14:07:41 2021 +0100

    s390/kexec_file: fix error handling when applying relocations
    
    [ Upstream commit 41967a37b8eedfee15b81406a9f3015be90d3980 ]
    
    arch_kexec_apply_relocations_add currently ignores all errors returned
    by arch_kexec_do_relocs. This means that every unknown relocation is
    silently skipped causing unpredictable behavior while the relocated code
    runs. Fix this by checking for errors and fail kexec_file_load if an
    unknown relocation type is encountered.
    
    The problem was found after gcc changed its behavior and used
    R_390_PLT32DBL relocations for brasl instruction and relied on ld to
    resolve the relocations in the final link in case direct calls are
    possible. As the purgatory code is only linked partially (option -r)
    ld didn't resolve the relocations leaving them for arch_kexec_do_relocs.
    But arch_kexec_do_relocs doesn't know how to handle R_390_PLT32DBL
    relocations so they were silently skipped. This ultimately caused an
    endless loop in the purgatory as the brasl instructions kept branching
    to itself.
    
    Fixes: 71406883fd35 ("s390/kexec_file: Add kexec_file_load system call")
    Reported-by: Tao Liu <ltao@redhat.com>
    Signed-off-by: Philipp Rudo <prudo@redhat.com>
    Link: https://lore.kernel.org/r/20211208130741.5821-3-prudo@redhat.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0eb9ac9ddc37d1332fb78e4e43e2466c0c69b66
Author: Jie2x Zhou <jie2x.zhou@intel.com>
Date:   Thu Dec 9 10:02:30 2021 +0800

    selftests: net: Correct ping6 expected rc from 2 to 1
    
    [ Upstream commit 92816e2629808726af015c7f5b14adc8e4f8b147 ]
    
    ./fcnal-test.sh -v -t ipv6_ping
    TEST: ping out, VRF bind - ns-B IPv6 LLA                                      [FAIL]
    TEST: ping out, VRF bind - multicast IP                                       [FAIL]
    
    ping6 is failing as it should.
    COMMAND: ip netns exec ns-A /bin/ping6 -c1 -w1 fe80::7c4c:bcff:fe66:a63a%red
    strace of ping6 shows it is failing with '1',
    so change the expected rc from 2 to 1.
    
    Fixes: c0644e71df33 ("selftests: Add ipv6 ping tests to fcnal-test")
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Jie2x Zhou <jie2x.zhou@intel.com>
    Link: https://lore.kernel.org/r/20211209020230.37270-1-jie2x.zhou@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ff66e9ceefcc8e626eb64b03b7b7f60043bf09e
Author: Javier Martinez Canillas <javierm@redhat.com>
Date:   Wed Oct 20 18:57:40 2021 +0200

    Revert "drm/fb-helper: improve DRM fbdev emulation device names"
    
    [ Upstream commit 842470c4e211f284a224842849b1fa81b130c154 ]
    
    This reverts commit b3484d2b03e4c940a9598aa841a52d69729c582a.
    
    That change attempted to improve the DRM drivers fbdev emulation device
    names to avoid having confusing names like "simpledrmdrmfb" in /proc/fb.
    
    But unfortunately, there are user-space programs such as pm-utils that
    match against the fbdev names and so broke after the mentioned commit.
    
    Since the names in /proc/fb are used by tools that consider it an uAPI,
    let's restore the old names even when this lead to silly names like the
    one mentioned above.
    
    Fixes: b3484d2b03e4 ("drm/fb-helper: improve DRM fbdev emulation device names")
    Reported-by: Johannes Stezenbach <js@sig21.net>
    Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211020165740.3011927-1-javierm@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03b5d9d618a6a64c1794bc0e9674c246f635631a
Author: Parav Pandit <parav@nvidia.com>
Date:   Tue Nov 30 06:29:49 2021 +0200

    vdpa: Consider device id larger than 31
    
    [ Upstream commit bb47620be322c5e9e372536cb6b54e17b3a00258 ]
    
    virtio device id value can be more than 31. Hence, use BIT_ULL in
    assignment.
    
    Fixes: 33b347503f01 ("vdpa: Define vdpa mgmt device, ops and a netlink interface")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Parav Pandit <parav@nvidia.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/20211130042949.88958-1-parav@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 091b84437a82bd3c5260d47612849bf22440232e
Author: Wei Wang <wei.w.wang@intel.com>
Date:   Thu Nov 25 20:18:23 2021 -0500

    virtio/vsock: fix the transport to work with VMADDR_CID_ANY
    
    [ Upstream commit 1db8f5fc2e5c66a5c51e1f6488e0ba7d45c29ae4 ]
    
    The VMADDR_CID_ANY flag used by a socket means that the socket isn't bound
    to any specific CID. For example, a host vsock server may want to be bound
    with VMADDR_CID_ANY, so that a guest vsock client can connect to the host
    server with CID=VMADDR_CID_HOST (i.e. 2), and meanwhile, a host vsock
    client can connect to the same local server with CID=VMADDR_CID_LOCAL
    (i.e. 1).
    
    The current implementation sets the destination socket's svm_cid to a
    fixed CID value after the first client's connection, which isn't an
    expected operation. For example, if the guest client first connects to the
    host server, the server's svm_cid gets set to VMADDR_CID_HOST, then other
    host clients won't be able to connect to the server anymore.
    
    Reproduce steps:
    1. Run the host server:
       socat VSOCK-LISTEN:1234,fork -
    2. Run a guest client to connect to the host server:
       socat - VSOCK-CONNECT:2:1234
    3. Run a host client to connect to the host server:
       socat - VSOCK-CONNECT:1:1234
    
    Without this patch, step 3. above fails to connect, and socat complains
    "socat[1720] E connect(5, AF=40 cid:1 port:1234, 16): Connection
    reset by peer".
    With this patch, the above works well.
    
    Fixes: c0cfa2d8a788 ("vsock: add multi-transports support")
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Link: https://lore.kernel.org/r/20211126011823.1760-1-wei.w.wang@intel.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 149a4d12c44bec3bfff2d6d7bc7d752b2f61cbd9
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 6 09:50:18 2021 +0100

    virtio: always enter drivers/virtio/
    
    [ Upstream commit 27d9839f17940e8edc475df616bbd9cf7ede8d05 ]
    
    When neither VIRTIO_PCI_LIB nor VIRTIO are enabled, but the alibaba
    vdpa driver is, the kernel runs into a link error because the legacy
    virtio module never gets built:
    
    x86_64-linux-ld: drivers/vdpa/alibaba/eni_vdpa.o: in function `eni_vdpa_set_features':
    eni_vdpa.c:(.text+0x23f): undefined reference to `vp_legacy_set_features'
    x86_64-linux-ld: drivers/vdpa/alibaba/eni_vdpa.o: in function `eni_vdpa_set_vq_state':
    eni_vdpa.c:(.text+0x2fe): undefined reference to `vp_legacy_get_queue_enable'
    x86_64-linux-ld: drivers/vdpa/alibaba/eni_vdpa.o: in function `eni_vdpa_set_vq_address':
    eni_vdpa.c:(.text+0x376): undefined reference to `vp_legacy_set_queue_address'
    x86_64-linux-ld: drivers/vdpa/alibaba/eni_vdpa.o: in function `eni_vdpa_set_vq_ready':
    eni_vdpa.c:(.text+0x3b4): undefined reference to `vp_legacy_set_queue_address'
    x86_64-linux-ld: drivers/vdpa/alibaba/eni_vdpa.o: in function `eni_vdpa_free_irq':
    eni_vdpa.c:(.text+0x460): undefined reference to `vp_legacy_queue_vector'
    x86_64-linux-ld: eni_vdpa.c:(.text+0x4b7): undefined reference to `vp_legacy_config_vector'
    x86_64-linux-ld: drivers/vdpa/alibaba/eni_vdpa.o: in function `eni_vdpa_reset':
    
    When VIRTIO_PCI_LIB was added, it was correctly added to drivers/Makefile
    as well, but for the legacy module, this is missing.  Solve this by always
    entering drivers/virtio during the build and letting its Makefile take
    care of the individual options, rather than having a separate line for
    each sub-option.
    
    Fixes: 64b9f64f80a6 ("vdpa: introduce virtio pci driver")
    Fixes: e85087beedca ("eni_vdpa: add vDPA driver for Alibaba ENI")
    Fixes: d89c8169bd70 ("virtio-pci: introduce legacy device module")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20211206085034.2836099-1-arnd@kernel.org
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fac85fe13547ebc77168f15a15bc49cd3ec01fe4
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Dec 3 14:04:24 2021 +0200

    iwlwifi: mvm: don't crash on invalid rate w/o STA
    
    [ Upstream commit d599f714b73e4177dfdfe64fce09175568288ee9 ]
    
    If we get to the WARN_ONCE(..., "Got a HT rate (...)", ...)
    here with a NULL sta, then we crash because mvmsta is bad
    and we try to dereference it. Fix that by printing -1 as the
    state if no station was given.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Fixes: 6761a718263a ("iwlwifi: mvm: add explicit check for non-data frames in get Tx rate")
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/iwlwifi.20211203140410.1a1541d7dcb5.I606c746e11447fe168cf046376b70b04e278c3b4@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f295986e5b6deaeac7a240f92e4bb6ec5576ce33
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Mon Dec 6 12:38:28 2021 +0100

    soc: imx: Register SoC device only on i.MX boards
    
    [ Upstream commit 4ebd29f91629e69da7d57390cdc953772eee03ab ]
    
    At the moment, using the ARM32 multi_v7_defconfig always results in two
    SoCs being exposed in sysfs. This is wrong, as far as I'm aware the
    Qualcomm DragonBoard 410c does not actually make use of a i.MX SoC. :)
    
      qcom-db410c:/sys/devices/soc0$ grep . *
      family:Freescale i.MX
      machine:Qualcomm Technologies, Inc. APQ 8016 SBC
      revision:0.0
      serial_number:0000000000000000
      soc_id:Unknown
    
      qcom-db410c:/sys/devices/soc1$ grep . *
      family:Snapdragon
      machine:APQ8016
      ...
    
    This happens because imx_soc_device_init() registers the soc device
    unconditionally, even when running on devices that do not make use of i.MX.
    Arnd already reported this more than a year ago and even suggested a fix
    similar to this commit, but for some reason it was never submitted.
    
    Fix it by checking if the "__mxc_cpu_type" variable was actually
    initialized by earlier platform code. On devices without i.MX it will
    simply stay 0.
    
    Cc: Peng Fan <peng.fan@nxp.com>
    Fixes: d2199b34871b ("ARM: imx: use device_initcall for imx_soc_device_init")
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/CAK8P3a0hxO1TmK6oOMQ70AHSWJnP_CAq57YMOutrxkSYNjFeuw@mail.gmail.com/
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad4adbbf666e8f7f7c636f0fdf50f8ab06cef4a1
Author: Mike Tipton <quic_mdtipton@quicinc.com>
Date:   Mon Nov 8 20:34:38 2021 -0800

    clk: Don't parent clks until the parent is fully registered
    
    [ Upstream commit 54baf56eaa40aa5cdcd02b3c20d593e4e1211220 ]
    
    Before commit fc0c209c147f ("clk: Allow parents to be specified without
    string names") child clks couldn't find their parent until the parent
    clk was added to a list in __clk_core_init(). After that commit, child
    clks can reference their parent clks directly via a clk_hw pointer, or
    they can lookup that clk_hw pointer via DT if the parent clk is
    registered with an OF clk provider.
    
    The common clk framework treats hw->core being non-NULL as "the clk is
    registered" per the logic within clk_core_fill_parent_index():
    
            parent = entry->hw->core;
            /*
             * We have a direct reference but it isn't registered yet?
             * Orphan it and let clk_reparent() update the orphan status
             * when the parent is registered.
             */
            if (!parent)
    
    Therefore we need to be extra careful to not set hw->core until the clk
    is fully registered with the clk framework. Otherwise we can get into a
    situation where a child finds a parent clk and we move the child clk off
    the orphan list when the parent isn't actually registered, wrecking our
    enable accounting and breaking critical clks.
    
    Consider the following scenario:
    
      CPU0                                     CPU1
      ----                                     ----
      struct clk_hw clkBad;
      struct clk_hw clkA;
    
      clkA.init.parent_hws = { &clkBad };
    
      clk_hw_register(&clkA)                   clk_hw_register(&clkBad)
       ...                                      __clk_register()
                                                 hw->core = core
                                                 ...
       __clk_register()
        __clk_core_init()
         clk_prepare_lock()
         __clk_init_parent()
          clk_core_get_parent_by_index()
           clk_core_fill_parent_index()
            if (entry->hw) {
             parent = entry->hw->core;
    
    At this point, 'parent' points to clkBad even though clkBad hasn't been
    fully registered yet. Ouch! A similar problem can happen if a clk
    controller registers orphan clks that are referenced in the DT node of
    another clk controller.
    
    Let's fix all this by only setting the hw->core pointer underneath the
    clk prepare lock in __clk_core_init(). This way we know that
    clk_core_fill_parent_index() can't see hw->core be non-NULL until the
    clk is fully registered.
    
    Fixes: fc0c209c147f ("clk: Allow parents to be specified without string names")
    Signed-off-by: Mike Tipton <quic_mdtipton@quicinc.com>
    Link: https://lore.kernel.org/r/20211109043438.4639-1-quic_mdtipton@quicinc.com
    [sboyd@kernel.org: Reword commit text, update comment]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d058c136fe3d5bc0ae797531b8d788d3a0184664
Author: Martin Kepplinger <martink@posteo.de>
Date:   Wed Nov 24 09:37:03 2021 +0100

    arm64: dts: imx8mq: remove interconnect property from lcdif
    
    [ Upstream commit e5e6268f77badf18bd6ab435364cfe21c7396c31 ]
    
    The mxsfb driver handling imx8mq lcdif doesn't yet request the
    interconnect bandwidth that's needed at runtime when the description is
    present in the DT node.
    
    So remove that description and bring it back when it's supported.
    
    Fixes: ad1abc8a03fd ("arm64: dts: imx8mq: Add interconnect for lcdif")
    Signed-off-by: Martin Kepplinger <martin.kepplinger@puri.sm>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f580a4315062870dd1ad9676f3bada01db0536af
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Nov 1 19:36:30 2021 -0500

    ARM: socfpga: dts: fix qspi node compatible
    
    [ Upstream commit cb25b11943cbcc5a34531129952870420f8be858 ]
    
    The QSPI flash node needs to have the required "jedec,spi-nor" in the
    compatible string.
    
    Fixes: 1df99da8953 ("ARM: dts: socfpga: Enable QSPI in Arria10 devkit")
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7506c76b7ef072df9d42df77fe73deb4b85ec26
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Nov 30 19:20:34 2021 +0800

    ceph: initialize pathlen variable in reconnect_caps_cb
    
    [ Upstream commit ee2a095d3b24f300a5e11944d208801e928f108c ]
    
    The smatch static checker warned about an uninitialized symbol usage in
    this function, in the case where ceph_mdsc_build_path returns an error.
    
    It turns out that that case is harmless, but it just looks sketchy.
    Initialize the variable at declaration time, and remove the unneeded
    setting of it later.
    
    Fixes: a33f6432b3a6 ("ceph: encode inodes' parent/d_name in cap reconnect message")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24a19e6d6518e15c4e0cb97c32dd7c568c0f5564
Author: Hu Weiwen <sehuww@mail.scut.edu.cn>
Date:   Mon Nov 22 22:22:12 2021 +0800

    ceph: fix duplicate increment of opened_inodes metric
    
    [ Upstream commit 973e5245637accc4002843f6b888495a6a7762bc ]
    
    opened_inodes is incremented twice when the same inode is opened twice
    with O_RDONLY and O_WRONLY respectively.
    
    To reproduce, run this python script, then check the metrics:
    
    import os
    for _ in range(10000):
        fd_r = os.open('a', os.O_RDONLY)
        fd_w = os.open('a', os.O_WRONLY)
        os.close(fd_r)
        os.close(fd_w)
    
    Fixes: 1dd8d4708136 ("ceph: metrics for opened files, pinned caps and opened inodes")
    Signed-off-by: Hu Weiwen <sehuww@mail.scut.edu.cn>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 832f3655c6138c23576ed268e31cc76e0f05f2b1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 24 17:54:04 2021 +0300

    tee: amdtee: fix an IS_ERR() vs NULL bug
    
    [ Upstream commit 9d7482771fac8d8e38e763263f2ca0ca12dd22c6 ]
    
    The __get_free_pages() function does not return error pointers it returns
    NULL so fix this condition to avoid a NULL dereference.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42d08e97b196479f593499e887a9ab81446a34b9
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 22 12:47:40 2021 +0100

    mac80211: track only QoS data frames for admission control
    
    [ Upstream commit d5e568c3a4ec2ddd23e7dc5ad5b0c64e4f22981a ]
    
    For admission control, obviously all of that only works for
    QoS data frames, otherwise we cannot even access the QoS
    field in the header.
    
    Syzbot reported (see below) an uninitialized value here due
    to a status of a non-QoS nullfunc packet, which isn't even
    long enough to contain the QoS header.
    
    Fix this to only do anything for QoS data packets.
    
    Reported-by: syzbot+614e82b88a1a4973e534@syzkaller.appspotmail.com
    Fixes: 02219b3abca5 ("mac80211: add WMM admission control support")
    Link: https://lore.kernel.org/r/20211122124737.dad29e65902a.Ieb04587afacb27c14e0de93ec1bfbefb238cc2a0@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b08767936841fc1737a59a02e667b5b90d8155ee
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Wed Nov 17 10:03:51 2021 -0700

    dmaengine: idxd: fix calling wq quiesce inside spinlock
    
    [ Upstream commit fa51b16d05583c7aebbc06330afb50276243d198 ]
    
    Dan reports that smatch has found idxd_wq_quiesce() is being called inside
    the idxd->dev_lock. idxd_wq_quiesce() calls wait_for_completion() and
    therefore it can sleep. Move the call outside of the spinlock as it does
    not need device lock.
    
    Fixes: 5b0c68c473a1 ("dmaengine: idxd: support reporting of halt interrupt")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/163716858508.1721911.15051495873516709923.stgit@djiang5-desk3.ch.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05d2cc973cf5225fe542494ef4ac1bc2537a1eef
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Wed Sep 8 16:04:03 2021 -0700

    dmaengine: idxd: add halt interrupt support
    
    [ Upstream commit 88d97ea82cbe352851a8654ee952d3a694c8c2c6 ]
    
    Add halt interrupt support. Given that the misc interrupt handler already
    check halt state, the driver just need to run the halt handling code when
    receiving the halt interrupt.
    
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/163114224352.846654.14334468363464318828.stgit@djiang5-desk3.ch.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2aebdaa3d3caf2f0bc4991188128cb017fb473a
Author: Florian Klink <flokli@flokli.de>
Date:   Wed Oct 20 11:59:23 2021 +0200

    arm64: dts: rockchip: fix poweroff on helios64
    
    [ Upstream commit aef4b9a89a376a9cabe5e744729914e7766c59bb ]
    
    Adding the rockchip,system-power-controller property here will use the
    rk808 to power off the system.
    
    Fixes: 09e006cfb43e ("arm64: dts: rockchip: Add basic support for Kobol's Helios64")
    Signed-off-by: Florian Klink <flokli@flokli.de>
    Tested-by: Dennis Gilmore <dgilmore@redhat.com>
    Link: https://lore.kernel.org/r/20211020095926.735938-2-flokli@flokli.de
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4218b2803dea0bbd304ae8043954ac361fa2a10
Author: Alex Bee <knaerzche@gmail.com>
Date:   Wed Oct 27 16:37:25 2021 +0200

    arm64: dts: rockchip: fix audio-supply for Rock Pi 4
    
    [ Upstream commit 8240e87f16d17a9592c9d67857a3dcdbcb98f10d ]
    
    As stated in the schematics [1] and [2] P5 the APIO5 domain is supplied
    by RK808-D Buck4, which in our case vcc1v8_codec - i.e. a 1.8 V regulator.
    
    Currently only white noise comes from the ES8316's output, which - for
    whatever reason - came up only after the the correct switch from i2s0_8ch_bus
    to i2s0_2ch_bus for i2s0's pinctrl was done.
    
    Fix this by setting the correct regulator for audio-supply.
    
    [1] https://dl.radxa.com/rockpi4/docs/hw/rockpi4/rockpi4_v13_sch_20181112.pdf
    [2] https://dl.radxa.com/rockpi4/docs/hw/rockpi4/rockpi_4c_v12_sch_20200620.pdf
    
    Fixes: 1b5715c602fd ("arm64: dts: rockchip: add ROCK Pi 4 DTS support")
    Signed-off-by: Alex Bee <knaerzche@gmail.com>
    Link: https://lore.kernel.org/r/20211027143726.165809-1-knaerzche@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77eb455febc5e9b56e75d21f0ee88d9c3cfbb49e
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 2 18:29:08 2021 +0000

    arm64: dts: rockchip: fix rk3399-leez-p710 vcc3v3-lan supply
    
    [ Upstream commit 2b454a90e2ccdd6e03f88f930036da4df577be76 ]
    
    Correct a typo in the vin-supply property.  The input supply is
    always-on, so this mistake doesn't affect whether the supply is actually
    enabled correctly.
    
    Fixes: fc702ed49a86 ("arm64: dts: rockchip: Add dts for Leez RK3399 P710 SBC")
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20211102182908.3409670-3-john@metanate.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2daa0c9e898c4a07436c6e9a910f1148c143207
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 2 18:29:07 2021 +0000

    arm64: dts: rockchip: fix rk3308-roc-cc vcc-sd supply
    
    [ Upstream commit 772fb46109f635dd75db20c86b7eaf48efa46cef ]
    
    Correct a typo in the vin-supply property.  The input supply is
    always-on, so this mistake doesn't affect whether the supply is actually
    enabled correctly.
    
    Fixes: 4403e1237be3 ("arm64: dts: rockchip: Add devicetree for board roc-rk3308-cc")
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20211102182908.3409670-2-john@metanate.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2ff001288dd97d6a997cac6b72febdf6e1610fc
Author: Artem Lapkin <email2tema@gmail.com>
Date:   Mon Nov 15 16:33:21 2021 +0800

    arm64: dts: rockchip: remove mmc-hs400-enhanced-strobe from rk3399-khadas-edge
    
    [ Upstream commit 6dd0053683804427529ef3523f7872f473440a19 ]
    
    Remove mmc-hs400-enhanced-strobe from the rk3399-khadas-edge dts to
    improve compatibility with a wider range of eMMC chips.
    
    Before (BJTD4R 29.1 GiB):
    
    [    7.001493] mmc2: CQHCI version 5.10
    [    7.027971] mmc2: SDHCI controller on fe330000.mmc [fe330000.mmc] using ADMA
    .......
    [    7.207086] mmc2: mmc_select_hs400es failed, error -110
    [    7.207129] mmc2: error -110 whilst initialising MMC card
    [    7.308893] mmc2: mmc_select_hs400es failed, error -110
    [    7.308921] mmc2: error -110 whilst initialising MMC card
    [    7.427524] mmc2: mmc_select_hs400es failed, error -110
    [    7.427546] mmc2: error -110 whilst initialising MMC card
    [    7.590993] mmc2: mmc_select_hs400es failed, error -110
    [    7.591012] mmc2: error -110 whilst initialising MMC card
    
    After:
    
    [    6.960785] mmc2: CQHCI version 5.10
    [    6.984672] mmc2: SDHCI controller on fe330000.mmc [fe330000.mmc] using ADMA
    [    7.175021] mmc2: Command Queue Engine enabled
    [    7.175053] mmc2: new HS400 MMC card at address 0001
    [    7.175808] mmcblk2: mmc2:0001 BJTD4R 29.1 GiB
    [    7.176033] mmcblk2boot0: mmc2:0001 BJTD4R 4.00 MiB
    [    7.176245] mmcblk2boot1: mmc2:0001 BJTD4R 4.00 MiB
    [    7.176495] mmcblk2rpmb: mmc2:0001 BJTD4R 4.00 MiB, chardev (242:0)
    
    Fixes: c2aacceedc86 ("arm64: dts: rockchip: Add support for Khadas Edge/Edge-V/Captain boards")
    Signed-off-by: Artem Lapkin <art@khadas.com>
    Link: https://lore.kernel.org/r/20211115083321.2627461-1-art@khadas.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e72fcf9aa9a0bec7f2a394e871be87a97d31aec
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Sun Oct 31 20:48:53 2021 -0500

    pinctrl: amd: Fix wakeups when IRQ is shared with SCI
    
    commit 2d54067fcd23aae61e23508425ae5b29e973573d upstream.
    
    On some Lenovo AMD Gen2 platforms the IRQ for the SCI and pinctrl drivers
    are shared.  Due to how the s2idle loop handling works, this case needs
    an extra explicit check whether the interrupt was caused by SCI or by
    the GPIO controller.
    
    To fix this rework the existing IRQ handler function to function as a
    checker and an IRQ handler depending on the calling arguments.
    
    BugLink: https://gitlab.freedesktop.org/drm/amd/-/issues/1738
    Reported-by: Joerie de Gram <j.de.gram@gmail.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Acked-by: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
    Link: https://lore.kernel.org/r/20211101014853.6177-2-mario.limonciello@amd.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78ae328fb170a6fe4eb7206dce8bbfcc8e630053
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 29 22:18:02 2021 +0300

    drm/i915/hdmi: Turn DP++ TMDS output buffers back on in encoder->shutdown()
    
    commit cecbc0c7eba7983965cac94f88d2db00b913253b upstream.
    
    Looks like our VBIOS/GOP generally fail to turn the DP dual mode adater
    TMDS output buffers back on after a reboot. This leads to a black screen
    after reboot if we turned the TMDS output buffers off prior to reboot.
    And if i915 decides to do a fastboot the black screen will persist even
    after i915 takes over.
    
    Apparently this has been a problem ever since commit b2ccb822d376 ("drm/i915:
    Enable/disable TMDS output buffers in DP++ adaptor as needed") if one
    rebooted while the display was turned off. And things became worse with
    commit fe0f1e3bfdfe ("drm/i915: Shut down displays gracefully on reboot")
    since now we always turn the display off before a reboot.
    
    This was reported on a RKL, but I confirmed the same behaviour on my
    SNB as well. So looks pretty universal.
    
    Let's fix this by explicitly turning the TMDS output buffers back on
    in the encoder->shutdown() hook. Note that this gets called after irqs
    have been disabled, so the i2c communication with the DP dual mode
    adapter has to be performed via polling (which the gmbus code is
    perfectly happy to do for us).
    
    We also need a bit of care in handling DDI encoders which may or may
    not be set up for HDMI output. Specifically ddc_pin will not be
    populated for a DP only DDI encoder, in which case we don't want to
    call intel_gmbus_get_adapter(). We can handle that by simply doing
    the dual mode adapter type check before calling
    intel_gmbus_get_adapter().
    
    Cc: <stable@vger.kernel.org> # v5.11+
    Fixes: fe0f1e3bfdfe ("drm/i915: Shut down displays gracefully on reboot")
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4371
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211029191802.18448-2-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit 49c55f7b035b87371a6d3c53d9af9f92ddc962db)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f50c26fdf6500fad4275fe90bffa46781400315
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Tue Sep 21 14:02:44 2021 +0300

    drm/i915/hdmi: convert intel_hdmi_to_dev to intel_hdmi_to_i915
    
    commit 7ceb751b615900086eed1d65955933923f127d99 upstream.
    
    Prefer i915 over drm pointer.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210921110244.8666-1-jani.nikula@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4999509a9184f2e34d83e445ee792bb4b46f3a30
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri Oct 1 11:20:14 2021 -0700

    scsi: ufs: core: Retry START_STOP on UNIT_ATTENTION
    
    commit af21c3fd5b3ec540a97b367a70b26616ff7e0c55 upstream.
    
    Commit 57d104c153d3 ("ufs: add UFS power management support") made the UFS
    driver submit a REQUEST SENSE command before submitting a power management
    command to a WLUN to clear the POWER ON unit attention. Instead of
    submitting a REQUEST SENSE command before submitting a power management
    command, retry the power management command until it succeeds.
    
    This is the preparation to get rid of all UNIT ATTENTION code which should
    be handled by users.
    
    Link: https://lore.kernel.org/r/20211001182015.1347587-2-jaegeuk@kernel.org
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af9b9c8bfeee83823852817724b4664254749180
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Dec 16 21:04:13 2021 +0800

    btrfs: remove stale comment about the btrfs_show_devname
    
    Commit cdccc03a8a369b59cff5e7ea3292511cfa551120 upstream.
    
    There were few lockdep warnings because btrfs_show_devname() was using
    device_list_mutex as recorded in the commits:
    
      0ccd05285e7f ("btrfs: fix a possible umount deadlock")
      779bf3fefa83 ("btrfs: fix lock dep warning, move scratch dev out of device_list_mutex and uuid_mutex")
    
    And finally, commit 88c14590cdd6 ("btrfs: use RCU in btrfs_show_devname
    for device list traversal") removed the device_list_mutex from
    btrfs_show_devname for performance reasons.
    
    This patch removes a stale comment about the function
    btrfs_show_devname and device_list_mutex.
    
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6e7e218a4d6488d56727a7d9aee1b7e78c0c485
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Dec 16 21:04:12 2021 +0800

    btrfs: update latest_dev when we create a sprout device
    
    Commit b7cb29e666fe79dda5dbe5f57fb7c92413bf161c upstream.
    
    When we add a device to the seed filesystem (sprouting) it is a new
    filesystem (and fsid) on the device added. Update the latest_dev so
    that /proc/self/mounts shows the correct device.
    
    Example:
    
      $ btrfstune -S1 /dev/vg/seed
      $ mount /dev/vg/seed /btrfs
      mount: /btrfs: WARNING: device write-protected, mounted read-only.
    
      $ cat /proc/self/mounts | grep btrfs
      /dev/mapper/vg-seed /btrfs btrfs ro,relatime,space_cache,subvolid=5,subvol=/ 0 0
    
      $ btrfs dev add -f /dev/vg/new /btrfs
    
    Before:
    
      $ cat /proc/self/mounts | grep btrfs
      /dev/mapper/vg-seed /btrfs btrfs ro,relatime,space_cache,subvolid=5,subvol=/ 0 0
    
    After:
    
      $ cat /proc/self/mounts | grep btrfs
      /dev/mapper/vg-new /btrfs btrfs ro,relatime,space_cache,subvolid=5,subvol=/ 0 0
    
    Tested-by: Su Yue <l@damenly.su>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e342c2558016ead462f376b6c6c2ac5efc17f3b1
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Dec 16 21:04:11 2021 +0800

    btrfs: use latest_dev in btrfs_show_devname
    
    Commit 6605fd2f394bba0a0059df2b6cfc87b0b6d393a2 upstream.
    
    The test case btrfs/238 reports the warning below:
    
     WARNING: CPU: 3 PID: 481 at fs/btrfs/super.c:2509 btrfs_show_devname+0x104/0x1e8 [btrfs]
     CPU: 2 PID: 1 Comm: systemd Tainted: G        W  O 5.14.0-rc1-custom #72
     Hardware name: QEMU QEMU Virtual Machine, BIOS 0.0.0 02/06/2015
     Call trace:
       btrfs_show_devname+0x108/0x1b4 [btrfs]
       show_mountinfo+0x234/0x2c4
       m_show+0x28/0x34
       seq_read_iter+0x12c/0x3c4
       vfs_read+0x29c/0x2c8
       ksys_read+0x80/0xec
       __arm64_sys_read+0x28/0x34
       invoke_syscall+0x50/0xf8
       do_el0_svc+0x88/0x138
       el0_svc+0x2c/0x8c
       el0t_64_sync_handler+0x84/0xe4
       el0t_64_sync+0x198/0x19c
    
    Reason:
    While btrfs_prepare_sprout() moves the fs_devices::devices into
    fs_devices::seed_list, the btrfs_show_devname() searches for the devices
    and found none, leading to the warning as in above.
    
    Fix:
    latest_dev is updated according to the changes to the device list.
    That means we could use the latest_dev->name to show the device name in
    /proc/self/mounts, the pointer will be always valid as it's assigned
    before the device is deleted from the list in remove or replace.
    The RCU protection is sufficient as the device structure is freed after
    synchronization.
    
    Reported-by: Su Yue <l@damenly.su>
    Tested-by: Su Yue <l@damenly.su>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c460192c2fa44787d2f9dd81fcdd64c0a39de18
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Dec 16 21:04:10 2021 +0800

    btrfs: convert latest_bdev type to btrfs_device and rename
    
    Commit d24fa5c1da08026be9959baca309fa0adf8708bf upstream.
    
    In preparation to fix a bug in btrfs_show_devname().
    
    Convert fs_devices::latest_bdev type from struct block_device to struct
    btrfs_device and, rename the member to fs_devices::latest_dev.
    So that btrfs_show_devname() can use fs_devices::latest_dev::name.
    
    Tested-by: Su Yue <l@damenly.su>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5f4d17daf2e6cd7c1d9676b476147f6b4ac53f2
Author: Paul Moore <paul@paul-moore.com>
Date:   Thu Dec 9 11:46:07 2021 -0500

    audit: improve robustness of the audit queue handling
    
    commit f4b3ee3c85551d2d343a3ba159304066523f730f upstream.
    
    If the audit daemon were ever to get stuck in a stopped state the
    kernel's kauditd_thread() could get blocked attempting to send audit
    records to the userspace audit daemon.  With the kernel thread
    blocked it is possible that the audit queue could grow unbounded as
    certain audit record generating events must be exempt from the queue
    limits else the system enter a deadlock state.
    
    This patch resolves this problem by lowering the kernel thread's
    socket sending timeout from MAX_SCHEDULE_TIMEOUT to HZ/10 and tweaks
    the kauditd_send_queue() function to better manage the various audit
    queues when connection problems occur between the kernel and the
    audit daemon.  With this patch, the backlog may temporarily grow
    beyond the defined limits when the audit daemon is stopped and the
    system is under heavy audit pressure, but kauditd_thread() will
    continue to make progress and drain the queues as it would for other
    connection problems.  For example, with the audit daemon put into a
    stopped state and the system configured to audit every syscall it
    was still possible to shutdown the system without a kernel panic,
    deadlock, etc.; granted, the system was slow to shutdown but that is
    to be expected given the extreme pressure of recording every syscall.
    
    The timeout value of HZ/10 was chosen primarily through
    experimentation and this developer's "gut feeling".  There is likely
    no one perfect value, but as this scenario is limited in scope (root
    privileges would be needed to send SIGSTOP to the audit daemon), it
    is likely not worth exposing this as a tunable at present.  This can
    always be done at a later date if it proves necessary.
    
    Cc: stable@vger.kernel.org
    Fixes: 5b52330bbfe63 ("audit: fix auditd/kernel connection state tracking")
    Reported-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Tested-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 607beb420b3fe23b948a9bf447d993521a02fbbb
Author: Joe Thornber <ejt@redhat.com>
Date:   Wed Nov 24 12:07:39 2021 -0500

    dm btree remove: fix use after free in rebalance_children()
    
    commit 1b8d2789dad0005fd5e7d35dab26a8e1203fb6da upstream.
    
    Move dm_tm_unlock() after dm_tm_dec().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09cdb8aa590473672ccd404c16ed4e388b3227d5
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Mon Nov 29 12:16:39 2021 +0100

    ceph: fix up non-directory creation in SGID directories
    
    commit fd84bfdddd169c219c3a637889a8b87f70a072c2 upstream.
    
    Ceph always inherits the SGID bit if it is set on the parent inode,
    while the generic inode_init_owner does not do this in a few cases where
    it can create a possible security problem (cf. [1]).
    
    Update ceph to strip the SGID bit just as inode_init_owner would.
    
    This bug was detected by the mapped mount testsuite in [3]. The
    testsuite tests all core VFS functionality and semantics with and
    without mapped mounts. That is to say it functions as a generic VFS
    testsuite in addition to a mapped mount testsuite. While working on
    mapped mount support for ceph, SIGD inheritance was the only failing
    test for ceph after the port.
    
    The same bug was detected by the mapped mount testsuite in XFS in
    January 2021 (cf. [2]).
    
    [1]: commit 0fa3ecd87848 ("Fix up non-directory creation in SGID directories")
    [2]: commit 01ea173e103e ("xfs: fix up non-directory creation in SGID directories")
    [3]: https://git.kernel.org/fs/xfs/xfstests-dev.git
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7a616145aaa81aac4bc9d85c9e9a8318ccc03d
Author: Mathew McBride <matt@traverse.com.au>
Date:   Mon Nov 22 02:55:54 2021 +0000

    arm64: dts: ten64: remove redundant interrupt declaration for gpio-keys
    
    commit c88c5e461939a06ae769a01649d5c6b5a156f883 upstream.
    
    gpio-keys already 'inherits' the interrupts from the controller
    of the specified GPIO, so having another declaration is redundant.
    On >=v5.15 this started causing an oops under gpio_keys_probe as
    the IRQ was already claimed.
    
    Signed-off-by: Mathew McBride <matt@traverse.com.au>
    Fixes: 418962eea358 ("arm64: dts: add device tree for Traverse Ten64 (LS1088A)")
    Cc: stable@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab2ba2dd711fc61b9176a7d34bac2f2ed13b11ca
Author: Jerome Marchand <jmarchan@redhat.com>
Date:   Fri Dec 10 10:38:27 2021 +0100

    recordmcount.pl: look for jgnop instruction as well as bcrl on s390
    
    commit 85bf17b28f97ca2749968d8786dc423db320d9c2 upstream.
    
    On s390, recordmcount.pl is looking for "bcrl 0,<xxx>" instructions in
    the objdump -d outpout. However since binutils 2.37, objdump -d
    display "jgnop <xxx>" for the same instruction. Update the
    mcount_regex so that it accepts both.
    
    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211210093827.1623286-1-jmarchan@redhat.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2eeff00926e572e4ddb7f40f2fc452abb1a4c7d4
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Mon Dec 6 11:50:16 2021 +0100

    s390/entry: fix duplicate tracking of irq nesting level
    
    commit c9b12b59e2ea4c3c7cedec7efb071b649652f3a9 upstream.
    
    In the current code, when exiting from idle, rcu_irq_enter() is
    called twice during irq entry:
    
    irq_entry_enter()-> rcu_irq_enter()
    irq_enter() -> rcu_irq_enter()
    
    This may lead to wrong results from rcu_is_cpu_rrupt_from_idle()
    because of a wrong dynticks nmi nesting count. Fix this by only
    calling irq_enter_rcu().
    
    Cc: <stable@vger.kernel.org> # 5.12+
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Fixes: 56e62a737028 ("s390: convert to generic entry")
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b08b3bfcc720686cd73888ab20111acd9cbfcb19
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 8 13:33:37 2021 +0300

    vdpa: check that offsets are within bounds
    
    commit 3ed21c1451a14d139e1ceb18f2fa70865ce3195a upstream.
    
    In this function "c->off" is a u32 and "size" is a long.  On 64bit systems
    if "c->off" is greater than "size" then "size - c->off" is a negative and
    we always return -E2BIG.  But on 32bit systems the subtraction is type
    promoted to a high positive u32 value and basically any "c->len" is
    accepted.
    
    Fixes: 4c8cf31885f6 ("vhost: introduce vDPA-based backend")
    Reported-by: Xie Yongji <xieyongji@bytedance.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211208103337.GA4047@kili
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c51663c77d21f78866cb36abccb59419c32e102
Author: Will Deacon <will@kernel.org>
Date:   Wed Dec 1 11:20:18 2021 +0000

    virtio_ring: Fix querying of maximum DMA mapping size for virtio device
    
    commit 817fc978b5a29b039db0418a91072b31c9aab152 upstream.
    
    virtio_max_dma_size() returns the maximum DMA mapping size of the virtio
    device by querying dma_max_mapping_size() for the device when the DMA
    API is in use for the vring. Unfortunately, the device passed is
    initialised by register_virtio_device() and does not inherit the DMA
    configuration from its parent, resulting in SWIOTLB errors when bouncing
    is enabled and the default 256K mapping limit (IO_TLB_SEGSIZE) is not
    respected:
    
      | virtio-pci 0000:00:01.0: swiotlb buffer is full (sz: 294912 bytes), total 1024 (slots), used 725 (slots)
    
    Follow the pattern used elsewhere in the virtio_ring code when calling
    into the DMA layer and pass the parent device to dma_max_mapping_size()
    instead.
    
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Quentin Perret <qperret@google.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20211201112018.25276-1-will@kernel.org
    Acked-by: Jason Wang <jasowang@redhat.com>
    Tested-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Fixes: e6d6dd6c875e ("virtio: Introduce virtio_max_dma_size()")
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Steven Price <steven.price@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebbbc5fea3f648175df1aa3f127c78eb0252cc2a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 8 18:09:56 2021 +0300

    vduse: check that offset is within bounds in get_config()
    
    commit dc1db0060c02d119fd4196924eff2d1129e9a442 upstream.
    
    This condition checks "len" but it does not check "offset" and that
    could result in an out of bounds read if "offset > dev->config_size".
    The problem is that since both variables are unsigned the
    "dev->config_size - offset" subtraction would result in a very high
    unsigned value.
    
    I think these checks might not be necessary because "len" and "offset"
    are supposed to already have been validated using the
    vhost_vdpa_config_validate() function.  But I do not know the code
    perfectly, and I like to be safe.
    
    Fixes: c8a6153b6c59 ("vduse: Introduce VDUSE - vDPA Device in Userspace")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211208150956.GA29160@kili
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6c67560b4341914bec32ec536e931c22062af65
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 8 13:33:07 2021 +0300

    vduse: fix memory corruption in vduse_dev_ioctl()
    
    commit ff9f9c6e74848170fcb45c8403c80d661484c8c9 upstream.
    
    The "config.offset" comes from the user.  There needs to a check to
    prevent it being out of bounds.  The "config.offset" and
    "dev->config_size" variables are both type u32.  So if the offset if
    out of bounds then the "dev->config_size - config.offset" subtraction
    results in a very high u32 value.  The out of bounds offset can result
    in memory corruption.
    
    Fixes: c8a6153b6c59 ("vduse: Introduce VDUSE - vDPA Device in Userspace")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211208103307.GA3778@kili
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2746d3face6532d3d6839ca5a05bb2d10988db72
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Dec 13 22:25:23 2021 +0000

    bpf, selftests: Update test case for atomic cmpxchg on r0 with pointer
    
    commit e523102cb719cbad1673b6aa2a4d5c1fa6f13799 upstream.
    
    Fix up unprivileged test case results for 'Dest pointer in r0' verifier tests
    given they now need to reject R0 containing a pointer value, and add a couple
    of new related ones with 32bit cmpxchg as well.
    
      root@foo:~/bpf/tools/testing/selftests/bpf# ./test_verifier
      #0/u invalid and of negative number OK
      #0/p invalid and of negative number OK
      [...]
      #1268/p XDP pkt read, pkt_meta' <= pkt_data, bad access 1 OK
      #1269/p XDP pkt read, pkt_meta' <= pkt_data, bad access 2 OK
      #1270/p XDP pkt read, pkt_data <= pkt_meta', good access OK
      #1271/p XDP pkt read, pkt_data <= pkt_meta', bad access 1 OK
      #1272/p XDP pkt read, pkt_data <= pkt_meta', bad access 2 OK
      Summary: 1900 PASSED, 0 SKIPPED, 0 FAILED
    
    Acked-by: Brendan Jackman <jackmanb@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f87a6c160ecc8c7b417d25f508d3f076fe346136
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Dec 7 11:02:02 2021 +0000

    bpf: Fix kernel address leakage in atomic cmpxchg's r0 aux reg
    
    commit a82fe085f344ef20b452cd5f481010ff96b5c4cd upstream.
    
    The implementation of BPF_CMPXCHG on a high level has the following parameters:
    
      .-[old-val]                                          .-[new-val]
      BPF_R0 = cmpxchg{32,64}(DST_REG + insn->off, BPF_R0, SRC_REG)
                              `-[mem-loc]          `-[old-val]
    
    Given a BPF insn can only have two registers (dst, src), the R0 is fixed and
    used as an auxilliary register for input (old value) as well as output (returning
    old value from memory location). While the verifier performs a number of safety
    checks, it misses to reject unprivileged programs where R0 contains a pointer as
    old value.
    
    Through brute-forcing it takes about ~16sec on my machine to leak a kernel pointer
    with BPF_CMPXCHG. The PoC is basically probing for kernel addresses by storing the
    guessed address into the map slot as a scalar, and using the map value pointer as
    R0 while SRC_REG has a canary value to detect a matching address.
    
    Fix it by checking R0 for pointers, and reject if that's the case for unprivileged
    programs.
    
    Fixes: 5ffa25502b5a ("bpf: Add instructions for atomic_[cmp]xchg")
    Reported-by: Ryota Shiga (Flatt Security)
    Acked-by: Brendan Jackman <jackmanb@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0d68083f273525ebae48996d196a706232b2d84
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 15 23:48:54 2021 +0000

    bpf, selftests: Add test case trying to taint map value pointer
    
    commit b1a7288dedc6caf9023f2676b4f5ed34cf0d4029 upstream.
    
    Add a test case which tries to taint map value pointer arithmetic into a
    unknown scalar with subsequent export through the map.
    
    Before fix:
    
      # ./test_verifier 1186
      #1186/u map access: trying to leak tained dst reg FAIL
      Unexpected success to load!
      verification time 24 usec
      stack depth 8
      processed 15 insns (limit 1000000) max_states_per_insn 0 total_states 1 peak_states 1 mark_read 1
      #1186/p map access: trying to leak tained dst reg FAIL
      Unexpected success to load!
      verification time 8 usec
      stack depth 8
      processed 15 insns (limit 1000000) max_states_per_insn 0 total_states 1 peak_states 1 mark_read 1
      Summary: 0 PASSED, 0 SKIPPED, 2 FAILED
    
    After fix:
    
      # ./test_verifier 1186
      #1186/u map access: trying to leak tained dst reg OK
      #1186/p map access: trying to leak tained dst reg OK
      Summary: 2 PASSED, 0 SKIPPED, 0 FAILED
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbda060d50abbe91ca76010078742ca53264bfa6
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 15 22:28:48 2021 +0000

    bpf: Make 32->64 bounds propagation slightly more robust
    
    commit e572ff80f05c33cd0cb4860f864f5c9c044280b6 upstream.
    
    Make the bounds propagation in __reg_assign_32_into_64() slightly more
    robust and readable by aligning it similarly as we did back in the
    __reg_combine_64_into_32() counterpart. Meaning, only propagate or
    pessimize them as a smin/smax pair.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f77d7a35d4913e4ab27abb36016fbfc1e882a654
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 15 22:02:19 2021 +0000

    bpf: Fix signed bounds propagation after mov32
    
    commit 3cf2b61eb06765e27fec6799292d9fb46d0b7e60 upstream.
    
    For the case where both s32_{min,max}_value bounds are positive, the
    __reg_assign_32_into_64() directly propagates them to their 64 bit
    counterparts, otherwise it pessimises them into [0,u32_max] universe and
    tries to refine them later on by learning through the tnum as per comment
    in mentioned function. However, that does not always happen, for example,
    in mov32 operation we call zext_32_to_64(dst_reg) which invokes the
    __reg_assign_32_into_64() as is without subsequent bounds update as
    elsewhere thus no refinement based on tnum takes place.
    
    Thus, not calling into the __update_reg_bounds() / __reg_deduce_bounds() /
    __reg_bound_offset() triplet as we do, for example, in case of ALU ops via
    adjust_scalar_min_max_vals(), will lead to more pessimistic bounds when
    dumping the full register state:
    
    Before fix:
    
      0: (b4) w0 = -1
      1: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=4294967295,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
      1: (bc) w0 = w0
      2: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=0,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
    Technically, the smin_value=0 and smax_value=4294967295 bounds are not
    incorrect, but given the register is still a constant, they break assumptions
    about const scalars that smin_value == smax_value and umin_value == umax_value.
    
    After fix:
    
      0: (b4) w0 = -1
      1: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=4294967295,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
      1: (bc) w0 = w0
      2: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=4294967295,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
    Without the smin_value == smax_value and umin_value == umax_value invariant
    being intact for const scalars, it is possible to leak out kernel pointers
    from unprivileged user space if the latter is enabled. For example, when such
    registers are involved in pointer arithmtics, then adjust_ptr_min_max_vals()
    will taint the destination register into an unknown scalar, and the latter
    can be exported and stored e.g. into a BPF map value.
    
    Fixes: 3f50f132d840 ("bpf: Verifier, do explicit ALU32 bounds tracking")
    Reported-by: Kuee K1r0a <liulin063@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efcad725feb44d6cfcd9742b6a354002bf09c9da
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Dec 7 10:07:04 2021 +0000

    bpf, selftests: Add test case for atomic fetch on spilled pointer
    
    commit 180486b430f4e22cc00a478163d942804baae4b5 upstream.
    
    Test whether unprivileged would be able to leak the spilled pointer either
    by exporting the returned value from the atomic{32,64} operation or by reading
    and exporting the value from the stack after the atomic operation took place.
    
    Note that for unprivileged, the below atomic cmpxchg test case named "Dest
    pointer in r0 - succeed" is failing. The reason is that in the dst memory
    location (r10 -8) there is the spilled register r10:
    
      0: R1=ctx(id=0,off=0,imm=0) R10=fp0
      0: (bf) r0 = r10
      1: R0_w=fp0 R1=ctx(id=0,off=0,imm=0) R10=fp0
      1: (7b) *(u64 *)(r10 -8) = r0
      2: R0_w=fp0 R1=ctx(id=0,off=0,imm=0) R10=fp0 fp-8_w=fp
      2: (b7) r1 = 0
      3: R0_w=fp0 R1_w=invP0 R10=fp0 fp-8_w=fp
      3: (db) r0 = atomic64_cmpxchg((u64 *)(r10 -8), r0, r1)
      4: R0_w=fp0 R1_w=invP0 R10=fp0 fp-8_w=mmmmmmmm
      4: (79) r1 = *(u64 *)(r0 -8)
      5: R0_w=fp0 R1_w=invP(id=0) R10=fp0 fp-8_w=mmmmmmmm
      5: (b7) r0 = 0
      6: R0_w=invP0 R1_w=invP(id=0) R10=fp0 fp-8_w=mmmmmmmm
      6: (95) exit
    
    However, allowing this case for unprivileged is a bit useless given an
    update with a new pointer will fail anyway:
    
      0: R1=ctx(id=0,off=0,imm=0) R10=fp0
      0: (bf) r0 = r10
      1: R0_w=fp0 R1=ctx(id=0,off=0,imm=0) R10=fp0
      1: (7b) *(u64 *)(r10 -8) = r0
      2: R0_w=fp0 R1=ctx(id=0,off=0,imm=0) R10=fp0 fp-8_w=fp
      2: (db) r0 = atomic64_cmpxchg((u64 *)(r10 -8), r0, r10)
      R10 leaks addr into mem
    
    Acked-by: Brendan Jackman <jackmanb@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [only backport one test for 5.15.y - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 423628125a484538111c2c6d9bb1588eb086053b
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Dec 7 12:51:56 2021 +0000

    bpf: Fix kernel address leakage in atomic fetch
    
    commit 7d3baf0afa3aa9102d6a521a8e4c41888bb79882 upstream.
    
    The change in commit 37086bfdc737 ("bpf: Propagate stack bounds to registers
    in atomics w/ BPF_FETCH") around check_mem_access() handling is buggy since
    this would allow for unprivileged users to leak kernel pointers. For example,
    an atomic fetch/and with -1 on a stack destination which holds a spilled
    pointer will migrate the spilled register type into a scalar, which can then
    be exported out of the program (since scalar != pointer) by dumping it into
    a map value.
    
    The original implementation of XADD was preventing this situation by using
    a double call to check_mem_access() one with BPF_READ and a subsequent one
    with BPF_WRITE, in both cases passing -1 as a placeholder value instead of
    register as per XADD semantics since it didn't contain a value fetch. The
    BPF_READ also included a check in check_stack_read_fixed_off() which rejects
    the program if the stack slot is of __is_pointer_value() if dst_regno < 0.
    The latter is to distinguish whether we're dealing with a regular stack spill/
    fill or some arithmetical operation which is disallowed on non-scalars, see
    also 6e7e63cbb023 ("bpf: Forbid XADD on spilled pointers for unprivileged
    users") for more context on check_mem_access() and its handling of placeholder
    value -1.
    
    One minimally intrusive option to fix the leak is for the BPF_FETCH case to
    initially check the BPF_READ case via check_mem_access() with -1 as register,
    followed by the actual load case with non-negative load_reg to propagate
    stack bounds to registers.
    
    Fixes: 37086bfdc737 ("bpf: Propagate stack bounds to registers in atomics w/ BPF_FETCH")
    Reported-by: <n4ke4mry@gmail.com>
    Acked-by: Brendan Jackman <jackmanb@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 976389cbb16cee46847e5d06250a3a0b5506781e
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Dec 9 12:04:56 2021 +0000

    firmware: arm_scpi: Fix string overflow in SCPI genpd driver
    
    commit 865ed67ab955428b9aa771d8b4f1e4fb7fd08945 upstream.
    
    Without the bound checks for scpi_pd->name, it could result in the buffer
    overflow when copying the SCPI device name from the corresponding device
    tree node as the name string is set at maximum size of 30.
    
    Let us fix it by using devm_kasprintf so that the string buffer is
    allocated dynamically.
    
    Fixes: 8bec4337ad40 ("firmware: scpi: add device power domain support using genpd")
    Reported-by: Pedro Batista <pedbap.g@gmail.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Cc: stable@vger.kernel.org
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20211209120456.696879-1-sudeep.holla@arm.com'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c62b16f98688ae7bc0ab23a6490481f4ce9b3a49
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat Dec 11 20:10:24 2021 +0100

    mac80211: validate extended element ID is present
    
    commit 768c0b19b50665e337c96858aa2b7928d6dcf756 upstream.
    
    Before attempting to parse an extended element, verify that
    the extended element ID is present.
    
    Fixes: 41cbb0f5a295 ("mac80211: add support for HE")
    Reported-by: syzbot+59bdff68edce82e393b6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20211211201023.f30a1b128c07.I5cacc176da94ba316877c6e10fe3ceec8b4dbd7d@changeid
    Cc: stable@vger.kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e606db721de5e6bb7fc12f22ba09b6d013930fa7
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Dec 2 13:45:33 2021 +0100

    mac80211: send ADDBA requests using the tid/queue of the aggregation session
    
    commit 1fe98f5690c4219d419ea9cc190f94b3401cf324 upstream.
    
    Sending them out on a different queue can cause a race condition where a
    number of packets in the queue may be discarded by the receiver, because
    the ADDBA request is sent too early.
    This affects any driver with software A-MPDU setup which does not allocate
    packet seqno in hardware on tx, regardless of whether iTXQ is used or not.
    The only driver I've seen that explicitly deals with this issue internally
    is mwl8k.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211202124533.80388-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 815ee27cfbf8184f6e30c30a0bd7055e1ece05dd
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 29 15:32:39 2021 +0200

    mac80211: mark TX-during-stop for TX in in_reconfig
    
    commit db7205af049d230e7e0abf61c1e74c1aab40f390 upstream.
    
    Mark TXQs as having seen transmit while they were stopped if
    we bail out of drv_wake_tx_queue() due to reconfig, so that
    the queue wake after this will make them catch up. This is
    particularly necessary for when TXQs are used for management
    packets since those TXQs won't see a lot of traffic that'd
    make them catch up later.
    
    Cc: stable@vger.kernel.org
    Fixes: 4856bfd23098 ("mac80211: do not call driver wake_tx_queue op during reconfig")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211129152938.4573a221c0e1.I0d1d5daea3089be3fc0dccc92991b0f8c5677f0c@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7aed5c87d74b36dbbb2556a4d2f3120df33046b
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Nov 24 10:40:24 2021 +0100

    mac80211: fix regression in SSN handling of addba tx
    
    commit 73111efacd3c6d9e644acca1d132566932be8af0 upstream.
    
    Some drivers that do their own sequence number allocation (e.g. ath9k) rely
    on being able to modify params->ssn on starting tx ampdu sessions.
    This was broken by a change that modified it to use sta->tid_seq[tid] instead.
    
    Cc: stable@vger.kernel.org
    Fixes: 31d8bb4e07f8 ("mac80211: agg-tx: refactor sending addba")
    Reported-by: Eneas U de Queiroz <cotequeiroz@gmail.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211124094024.43222-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 237ee0f24bc455c46e867e0cc866f3a16fa41796
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon Nov 22 21:43:23 2021 +0100

    mac80211: fix rate control for retransmitted frames
    
    commit 18688c80ad8a8dd50523dc9276e929932cac86d4 upstream.
    
    Since retransmission clears info->control, rate control needs to be called
    again, otherwise the driver might crash due to invalid rates.
    
    Cc: stable@vger.kernel.org # 5.14+
    Reported-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Reported-by: Robert W <rwbugreport@lost-in-the-void.net>
    Fixes: 03c3911d2d67 ("mac80211: call ieee80211_tx_h_rate_ctrl() when dequeue")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Tested-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Link: https://lore.kernel.org/r/20211122204323.9787-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bd55427e266de8bb46781732a0786d6ed8aec48
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Tue Oct 19 19:01:51 2021 +0800

    KVM: X86: Fix tlb flush for tdp in kvm_invalidate_pcid()
    
    [ Upstream commit e45e9e3998f0001079b09555db5bb3b4257f6746 ]
    
    The KVM doesn't know whether any TLB for a specific pcid is cached in
    the CPU when tdp is enabled.  So it is better to flush all the guest
    TLB when invalidating any single PCID context.
    
    The case is very rare or even impossible since KVM generally doesn't
    intercept CR3 write or INVPCID instructions when tdp is enabled, so the
    fix is mostly for the sake of overall robustness.
    
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Message-Id: <20211019110154.4091-2-jiangshanlai@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf4367c02c8cc4d910157dfd1d34a89daea44d65
Author: Juergen Gross <jgross@suse.com>
Date:   Wed Nov 17 08:16:17 2021 +0100

    x86/kvm: remove unused ack_notifier callbacks
    
    [ Upstream commit 9dba4d24cbb5524dd39ab1e08886373b17f07ff2 ]
    
    Commit f52447261bc8c2 ("KVM: irq ack notification") introduced an
    ack_notifier() callback in struct kvm_pic and in struct kvm_ioapic
    without using them anywhere. Remove those callbacks again.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Message-Id: <20211117071617.19504-1-jgross@suse.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54bf0b0d3536bf1651c66f60f621532e8d6c50af
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 18:24:01 2021 -0500

    KVM: downgrade two BUG_ONs to WARN_ON_ONCE
    
    [ Upstream commit 5f25e71e311478f9bb0a8ef49e7d8b95316491d7 ]
    
    This is not an unrecoverable situation.  Users of kvm_read_guest_offset_cached
    and kvm_write_guest_offset_cached must expect the read/write to fail, and
    therefore it is possible to just return early with an error value.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b65555a501e9fcaaeb302af1ebba279ed3bf653
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Nov 23 14:59:53 2021 +0100

    KVM: selftests: Make sure kvm_create_max_vcpus test won't hit RLIMIT_NOFILE
    
    [ Upstream commit 908fa88e420f30dde6d80f092795a18ec72ca6d3 ]
    
    With the elevated 'KVM_CAP_MAX_VCPUS' value kvm_create_max_vcpus test
    may hit RLIMIT_NOFILE limits:
    
     # ./kvm_create_max_vcpus
     KVM_CAP_MAX_VCPU_ID: 4096
     KVM_CAP_MAX_VCPUS: 1024
     Testing creating 1024 vCPUs, with IDs 0...1023.
     /dev/kvm not available (errno: 24), skipping test
    
    Adjust RLIMIT_NOFILE limits to make sure KVM_CAP_MAX_VCPUS fds can be
    opened. Note, raising hard limit ('rlim_max') requires CAP_SYS_RESOURCE
    capability which is generally not needed to run kvm selftests (but without
    raising the limit the test is doomed to fail anyway).
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20211123135953.667434-1-vkuznets@redhat.com>
    [Skip the test if the hard limit can be raised. - Paolo]
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Tested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6890c75c14b3d5dc8a1a355428457388cd830b82
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Nov 30 07:36:41 2021 -0500

    KVM: VMX: clear vmx_x86_ops.sync_pir_to_irr if APICv is disabled
    
    [ Upstream commit e90e51d5f01d2baae5dcce280866bbb96816e978 ]
    
    There is nothing to synchronize if APICv is disabled, since neither
    other vCPUs nor assigned devices can set PIR.ON.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efccff32defce4b7e30c2cebb3b14df38e74ed85
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Fri Nov 12 11:27:12 2021 +0000

    reset: tegra-bpmp: Revert Handle errors in BPMP response
    
    commit 69125b4b9440be015783312e1b8753ec96febde0 upstream.
    
    Commit c045ceb5a145 ("reset: tegra-bpmp: Handle errors in BPMP
    response") fixed an issue in the Tegra BPMP error handling but has
    exposed an issue in the Tegra194 HDA driver and now resetting the
    Tegra194 HDA controller is failing. For now revert the commit
    c045ceb5a145 ("reset: tegra-bpmp: Handle errors in BPMP response")
    while a fix for the Tegra HDA driver is created.
    
    Fixes: c045ceb5a145 ("reset: tegra-bpmp: Handle errors in BPMP response")
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20211112112712.21587-1-jonathanh@nvidia.com
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
