commit 2e390c487815669fb9bb35d7ea11883cc10a9b50
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 13 11:15:18 2018 -0800

    Linux 4.14.81

commit c3cd0a4fe429089701a3480cbbf355495e0642c7
Author: Shaohua Li <shli@fb.com>
Date:   Sun Oct 14 17:05:07 2018 -0700

    MD: fix invalid stored role for a disk - try2
    
    commit 9e753ba9b9b405e3902d9f08aec5f2ea58a0c317 upstream.
    
    Commit d595567dc4f0 (MD: fix invalid stored role for a disk) broke linear
    hotadd. Let's only fix the role for disks in raid1/10.
    Based on Guoqing's original patch.
    
    Reported-by: kernel test robot <rong.a.chen@intel.com>
    Cc: Gioh Kim <gi-oh.kim@profitbricks.com>
    Cc: Guoqing Jiang <gqjiang@suse.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bea15f7933dc87a091a7481590dd2ea1088b2bf
Author: Daniel Colascione <dancol@google.com>
Date:   Fri Oct 12 03:54:27 2018 -0700

    bpf: wait for running BPF programs when updating map-in-map
    
    commit 1ae80cf31938c8f77c37a29bbe29e7f1cd492be8 upstream.
    
    The map-in-map frequently serves as a mechanism for atomic
    snapshotting of state that a BPF program might record.  The current
    implementation is dangerous to use in this way, however, since
    userspace has no way of knowing when all programs that might have
    retrieved the "old" value of the map may have completed.
    
    This change ensures that map update operations on map-in-map map types
    always wait for all references to the old map to drop before returning
    to userspace.
    
    Signed-off-by: Daniel Colascione <dancol@google.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [fengc@google.com: 4.14 backport: adjust context]
    Signed-off-by: Chenbo Feng <fengc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfba4092167df3bb9b6abb0510ea4c680bb8ece5
Author: David Ahern <dsahern@gmail.com>
Date:   Wed Oct 24 08:32:49 2018 -0700

    net: sched: Remove TCA_OPTIONS from policy
    
    commit e72bde6b66299602087c8c2350d36a525e75d06e upstream.
    
    Marco reported an error with hfsc:
    root@Calimero:~# tc qdisc add dev eth0 root handle 1:0 hfsc default 1
    Error: Attribute failed policy validation.
    
    Apparently a few implementations pass TCA_OPTIONS as a binary instead
    of nested attribute, so drop TCA_OPTIONS from the policy.
    
    Fixes: 8b4c3cdd9dd8 ("net: sched: Add policy validation for tc attributes")
    Reported-by: Marco Berizzi <pupilla@libero.it>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc8a236ee0580c920c48696f0df806affa892cbc
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Mar 26 23:59:00 2018 +0100

    Btrfs: fix fsync after hole punching when using no-holes feature
    
    commit 4ee3fad34a9cc2cf33303dfbd0cf554248651c86 upstream.
    
    When we have the no-holes mode enabled and fsync a file after punching a
    hole in it, we can end up not logging the whole hole range in the log tree.
    This happens if the file has extent items that span more than one leaf and
    we punch a hole that covers a range that starts in a leaf but does not go
    beyond the offset of the first extent in the next leaf.
    
    Example:
    
      $ mkfs.btrfs -f -O no-holes -n 65536 /dev/sdb
      $ mount /dev/sdb /mnt
      $ for ((i = 0; i <= 831; i++)); do
            offset=$((i * 2 * 256 * 1024))
            xfs_io -f -c "pwrite -S 0xab -b 256K $offset 256K" \
                    /mnt/foobar >/dev/null
        done
      $ sync
    
      # We now have 2 leafs in our filesystem fs tree, the first leaf has an
      # item corresponding the extent at file offset 216530944 and the second
      # leaf has a first item corresponding to the extent at offset 217055232.
      # Now we punch a hole that partially covers the range of the extent at
      # offset 216530944 but does go beyond the offset 217055232.
    
      $ xfs_io -c "fpunch $((216530944 + 128 * 1024 - 4000)) 256K" /mnt/foobar
      $ xfs_io -c "fsync" /mnt/foobar
    
      <power fail>
    
      # mount to replay the log
      $ mount /dev/sdb /mnt
    
      # Before this patch, only the subrange [216658016, 216662016[ (length of
      # 4000 bytes) was logged, leaving an incorrect file layout after log
      # replay.
    
    Fix this by checking if there is a hole between the last extent item that
    we processed and the first extent item in the next leaf, and if there is
    one, log an explicit hole extent item.
    
    Fixes: 16e7549f045d ("Btrfs: incompatible format change to remove hole extents")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c2d1ef3dfe0d798266f3ae4d3b7e13aa4956f4d
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 22 10:43:06 2018 +0100

    Btrfs: fix use-after-free when dumping free space
    
    commit 9084cb6a24bf5838a665af92ded1af8363f9e563 upstream.
    
    We were iterating a block group's free space cache rbtree without locking
    first the lock that protects it (the free_space_ctl->free_space_offset
    rbtree is protected by the free_space_ctl->tree_lock spinlock).
    
    KASAN reported an use-after-free problem when iterating such a rbtree due
    to a concurrent rbtree delete:
    
    [ 9520.359168] ==================================================================
    [ 9520.359656] BUG: KASAN: use-after-free in rb_next+0x13/0x90
    [ 9520.359949] Read of size 8 at addr ffff8800b7ada500 by task btrfs-transacti/1721
    [ 9520.360357]
    [ 9520.360530] CPU: 4 PID: 1721 Comm: btrfs-transacti Tainted: G             L    4.19.0-rc8-nbor #555
    [ 9520.360990] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [ 9520.362682] Call Trace:
    [ 9520.362887]  dump_stack+0xa4/0xf5
    [ 9520.363146]  print_address_description+0x78/0x280
    [ 9520.363412]  kasan_report+0x263/0x390
    [ 9520.363650]  ? rb_next+0x13/0x90
    [ 9520.363873]  __asan_load8+0x54/0x90
    [ 9520.364102]  rb_next+0x13/0x90
    [ 9520.364380]  btrfs_dump_free_space+0x146/0x160 [btrfs]
    [ 9520.364697]  dump_space_info+0x2cd/0x310 [btrfs]
    [ 9520.364997]  btrfs_reserve_extent+0x1ee/0x1f0 [btrfs]
    [ 9520.365310]  __btrfs_prealloc_file_range+0x1cc/0x620 [btrfs]
    [ 9520.365646]  ? btrfs_update_time+0x180/0x180 [btrfs]
    [ 9520.365923]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.366204]  ? btrfs_alloc_data_chunk_ondemand+0x2c0/0x5c0 [btrfs]
    [ 9520.366549]  btrfs_prealloc_file_range_trans+0x23/0x30 [btrfs]
    [ 9520.366880]  cache_save_setup+0x42e/0x580 [btrfs]
    [ 9520.367220]  ? btrfs_check_data_free_space+0xd0/0xd0 [btrfs]
    [ 9520.367518]  ? lock_downgrade+0x2f0/0x2f0
    [ 9520.367799]  ? btrfs_write_dirty_block_groups+0x11f/0x6e0 [btrfs]
    [ 9520.368104]  ? kasan_check_read+0x11/0x20
    [ 9520.368349]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.368638]  btrfs_write_dirty_block_groups+0x2af/0x6e0 [btrfs]
    [ 9520.368978]  ? btrfs_start_dirty_block_groups+0x870/0x870 [btrfs]
    [ 9520.369282]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.369534]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.369811]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.370137]  commit_cowonly_roots+0x4b9/0x610 [btrfs]
    [ 9520.370560]  ? commit_fs_roots+0x350/0x350 [btrfs]
    [ 9520.370926]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.371285]  btrfs_commit_transaction+0x5e5/0x10e0 [btrfs]
    [ 9520.371612]  ? btrfs_apply_pending_changes+0x90/0x90 [btrfs]
    [ 9520.371943]  ? start_transaction+0x168/0x6c0 [btrfs]
    [ 9520.372257]  transaction_kthread+0x21c/0x240 [btrfs]
    [ 9520.372537]  kthread+0x1d2/0x1f0
    [ 9520.372793]  ? btrfs_cleanup_transaction+0xb50/0xb50 [btrfs]
    [ 9520.373090]  ? kthread_park+0xb0/0xb0
    [ 9520.373329]  ret_from_fork+0x3a/0x50
    [ 9520.373567]
    [ 9520.373738] Allocated by task 1804:
    [ 9520.373974]  kasan_kmalloc+0xff/0x180
    [ 9520.374208]  kasan_slab_alloc+0x11/0x20
    [ 9520.374447]  kmem_cache_alloc+0xfc/0x2d0
    [ 9520.374731]  __btrfs_add_free_space+0x40/0x580 [btrfs]
    [ 9520.375044]  unpin_extent_range+0x4f7/0x7a0 [btrfs]
    [ 9520.375383]  btrfs_finish_extent_commit+0x15f/0x4d0 [btrfs]
    [ 9520.375707]  btrfs_commit_transaction+0xb06/0x10e0 [btrfs]
    [ 9520.376027]  btrfs_alloc_data_chunk_ondemand+0x237/0x5c0 [btrfs]
    [ 9520.376365]  btrfs_check_data_free_space+0x81/0xd0 [btrfs]
    [ 9520.376689]  btrfs_delalloc_reserve_space+0x25/0x80 [btrfs]
    [ 9520.377018]  btrfs_direct_IO+0x42e/0x6d0 [btrfs]
    [ 9520.377284]  generic_file_direct_write+0x11e/0x220
    [ 9520.377587]  btrfs_file_write_iter+0x472/0xac0 [btrfs]
    [ 9520.377875]  aio_write+0x25c/0x360
    [ 9520.378106]  io_submit_one+0xaa0/0xdc0
    [ 9520.378343]  __se_sys_io_submit+0xfa/0x2f0
    [ 9520.378589]  __x64_sys_io_submit+0x43/0x50
    [ 9520.378840]  do_syscall_64+0x7d/0x240
    [ 9520.379081]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 9520.379387]
    [ 9520.379557] Freed by task 1802:
    [ 9520.379782]  __kasan_slab_free+0x173/0x260
    [ 9520.380028]  kasan_slab_free+0xe/0x10
    [ 9520.380262]  kmem_cache_free+0xc1/0x2c0
    [ 9520.380544]  btrfs_find_space_for_alloc+0x4cd/0x4e0 [btrfs]
    [ 9520.380866]  find_free_extent+0xa99/0x17e0 [btrfs]
    [ 9520.381166]  btrfs_reserve_extent+0xd5/0x1f0 [btrfs]
    [ 9520.381474]  btrfs_get_blocks_direct+0x60b/0xbd0 [btrfs]
    [ 9520.381761]  __blockdev_direct_IO+0x10ee/0x58a1
    [ 9520.382059]  btrfs_direct_IO+0x25a/0x6d0 [btrfs]
    [ 9520.382321]  generic_file_direct_write+0x11e/0x220
    [ 9520.382623]  btrfs_file_write_iter+0x472/0xac0 [btrfs]
    [ 9520.382904]  aio_write+0x25c/0x360
    [ 9520.383172]  io_submit_one+0xaa0/0xdc0
    [ 9520.383416]  __se_sys_io_submit+0xfa/0x2f0
    [ 9520.383678]  __x64_sys_io_submit+0x43/0x50
    [ 9520.383927]  do_syscall_64+0x7d/0x240
    [ 9520.384165]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 9520.384439]
    [ 9520.384610] The buggy address belongs to the object at ffff8800b7ada500
                    which belongs to the cache btrfs_free_space of size 72
    [ 9520.385175] The buggy address is located 0 bytes inside of
                    72-byte region [ffff8800b7ada500, ffff8800b7ada548)
    [ 9520.385691] The buggy address belongs to the page:
    [ 9520.385957] page:ffffea0002deb680 count:1 mapcount:0 mapping:ffff880108a1d700 index:0x0 compound_mapcount: 0
    [ 9520.388030] flags: 0x8100(slab|head)
    [ 9520.388281] raw: 0000000000008100 ffffea0002deb608 ffffea0002728808 ffff880108a1d700
    [ 9520.388722] raw: 0000000000000000 0000000000130013 00000001ffffffff 0000000000000000
    [ 9520.389169] page dumped because: kasan: bad access detected
    [ 9520.389473]
    [ 9520.389658] Memory state around the buggy address:
    [ 9520.389943]  ffff8800b7ada400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.390368]  ffff8800b7ada480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.390796] >ffff8800b7ada500: fb fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc
    [ 9520.391223]                    ^
    [ 9520.391461]  ffff8800b7ada580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.391885]  ffff8800b7ada600: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.392313] ==================================================================
    [ 9520.392772] BTRFS critical (device vdc): entry offset 2258497536, bytes 131072, bitmap no
    [ 9520.393247] BUG: unable to handle kernel NULL pointer dereference at 0000000000000011
    [ 9520.393705] PGD 800000010dbab067 P4D 800000010dbab067 PUD 107551067 PMD 0
    [ 9520.394059] Oops: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [ 9520.394378] CPU: 4 PID: 1721 Comm: btrfs-transacti Tainted: G    B        L    4.19.0-rc8-nbor #555
    [ 9520.394858] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [ 9520.395350] RIP: 0010:rb_next+0x3c/0x90
    [ 9520.396461] RSP: 0018:ffff8801074ff780 EFLAGS: 00010292
    [ 9520.396762] RAX: 0000000000000000 RBX: 0000000000000001 RCX: ffffffff81b5ac4c
    [ 9520.397115] RDX: 0000000000000000 RSI: 0000000000000008 RDI: 0000000000000011
    [ 9520.397468] RBP: ffff8801074ff7a0 R08: ffffed0021d64ccc R09: ffffed0021d64ccc
    [ 9520.397821] R10: 0000000000000001 R11: ffffed0021d64ccb R12: ffff8800b91e0000
    [ 9520.398188] R13: ffff8800a3ceba48 R14: ffff8800b627bf80 R15: 0000000000020000
    [ 9520.398555] FS:  0000000000000000(0000) GS:ffff88010eb00000(0000) knlGS:0000000000000000
    [ 9520.399007] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 9520.399335] CR2: 0000000000000011 CR3: 0000000106b52000 CR4: 00000000000006a0
    [ 9520.399679] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 9520.400023] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 9520.400400] Call Trace:
    [ 9520.400648]  btrfs_dump_free_space+0x146/0x160 [btrfs]
    [ 9520.400974]  dump_space_info+0x2cd/0x310 [btrfs]
    [ 9520.401287]  btrfs_reserve_extent+0x1ee/0x1f0 [btrfs]
    [ 9520.401609]  __btrfs_prealloc_file_range+0x1cc/0x620 [btrfs]
    [ 9520.401952]  ? btrfs_update_time+0x180/0x180 [btrfs]
    [ 9520.402232]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.402522]  ? btrfs_alloc_data_chunk_ondemand+0x2c0/0x5c0 [btrfs]
    [ 9520.402882]  btrfs_prealloc_file_range_trans+0x23/0x30 [btrfs]
    [ 9520.403261]  cache_save_setup+0x42e/0x580 [btrfs]
    [ 9520.403570]  ? btrfs_check_data_free_space+0xd0/0xd0 [btrfs]
    [ 9520.403871]  ? lock_downgrade+0x2f0/0x2f0
    [ 9520.404161]  ? btrfs_write_dirty_block_groups+0x11f/0x6e0 [btrfs]
    [ 9520.404481]  ? kasan_check_read+0x11/0x20
    [ 9520.404732]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.405026]  btrfs_write_dirty_block_groups+0x2af/0x6e0 [btrfs]
    [ 9520.405375]  ? btrfs_start_dirty_block_groups+0x870/0x870 [btrfs]
    [ 9520.405694]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.405958]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.406243]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.406574]  commit_cowonly_roots+0x4b9/0x610 [btrfs]
    [ 9520.406899]  ? commit_fs_roots+0x350/0x350 [btrfs]
    [ 9520.407253]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.407589]  btrfs_commit_transaction+0x5e5/0x10e0 [btrfs]
    [ 9520.407925]  ? btrfs_apply_pending_changes+0x90/0x90 [btrfs]
    [ 9520.408262]  ? start_transaction+0x168/0x6c0 [btrfs]
    [ 9520.408582]  transaction_kthread+0x21c/0x240 [btrfs]
    [ 9520.408870]  kthread+0x1d2/0x1f0
    [ 9520.409138]  ? btrfs_cleanup_transaction+0xb50/0xb50 [btrfs]
    [ 9520.409440]  ? kthread_park+0xb0/0xb0
    [ 9520.409682]  ret_from_fork+0x3a/0x50
    [ 9520.410508] Dumping ftrace buffer:
    [ 9520.410764]    (ftrace buffer empty)
    [ 9520.411007] CR2: 0000000000000011
    [ 9520.411297] ---[ end trace 01a0863445cf360a ]---
    [ 9520.411568] RIP: 0010:rb_next+0x3c/0x90
    [ 9520.412644] RSP: 0018:ffff8801074ff780 EFLAGS: 00010292
    [ 9520.412932] RAX: 0000000000000000 RBX: 0000000000000001 RCX: ffffffff81b5ac4c
    [ 9520.413274] RDX: 0000000000000000 RSI: 0000000000000008 RDI: 0000000000000011
    [ 9520.413616] RBP: ffff8801074ff7a0 R08: ffffed0021d64ccc R09: ffffed0021d64ccc
    [ 9520.414007] R10: 0000000000000001 R11: ffffed0021d64ccb R12: ffff8800b91e0000
    [ 9520.414349] R13: ffff8800a3ceba48 R14: ffff8800b627bf80 R15: 0000000000020000
    [ 9520.416074] FS:  0000000000000000(0000) GS:ffff88010eb00000(0000) knlGS:0000000000000000
    [ 9520.416536] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 9520.416848] CR2: 0000000000000011 CR3: 0000000106b52000 CR4: 00000000000006a0
    [ 9520.418477] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 9520.418846] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 9520.419204] Kernel panic - not syncing: Fatal exception
    [ 9520.419666] Dumping ftrace buffer:
    [ 9520.419930]    (ftrace buffer empty)
    [ 9520.420168] Kernel Offset: disabled
    [ 9520.420406] ---[ end Kernel panic - not syncing: Fatal exception ]---
    
    Fix this by acquiring the respective lock before iterating the rbtree.
    
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf005ed0fbddd6a5e3a2c1c3b222c4104a9819b5
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Oct 12 13:02:48 2018 +0100

    Btrfs: fix use-after-free during inode eviction
    
    commit 421f0922a2cfb0c75acd9746454aaa576c711a65 upstream.
    
    At inode.c:evict_inode_truncate_pages(), when we iterate over the
    inode's extent states, we access an extent state record's "state" field
    after we unlocked the inode's io tree lock. This can lead to a
    use-after-free issue because after we unlock the io tree that extent
    state record might have been freed due to being merged into another
    adjacent extent state record (a previous inflight bio for a read
    operation finished in the meanwhile which unlocked a range in the io
    tree and cause a merge of extent state records, as explained in the
    comment before the while loop added in commit 6ca0709756710 ("Btrfs: fix
    hang during inode eviction due to concurrent readahead")).
    
    Fix this by keeping a copy of the extent state's flags in a local
    variable and using it after unlocking the io tree.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=201189
    Fixes: b9d0b38928e2 ("btrfs: Add handler for invalidate page")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8bac97db4639b958af13cc41ebcaea3297d4e72
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Oct 12 15:32:32 2018 -0400

    btrfs: move the dio_sem higher up the callchain
    
    commit c495144bc6962186feae31d687596d2472000e45 upstream.
    
    We're getting a lockdep splat because we take the dio_sem under the
    log_mutex.  What we really need is to protect fsync() from logging an
    extent map for an extent we never waited on higher up, so just guard the
    whole thing with dio_sem.
    
    ======================================================
    WARNING: possible circular locking dependency detected
    4.18.0-rc4-xfstests-00025-g5de5edbaf1d4 #411 Not tainted
    ------------------------------------------------------
    aio-dio-invalid/30928 is trying to acquire lock:
    0000000092621cfd (&mm->mmap_sem){++++}, at: get_user_pages_unlocked+0x5a/0x1e0
    
    but task is already holding lock:
    00000000cefe6b35 (&ei->dio_sem){++++}, at: btrfs_direct_IO+0x3be/0x400
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #5 (&ei->dio_sem){++++}:
           lock_acquire+0xbd/0x220
           down_write+0x51/0xb0
           btrfs_log_changed_extents+0x80/0xa40
           btrfs_log_inode+0xbaf/0x1000
           btrfs_log_inode_parent+0x26f/0xa80
           btrfs_log_dentry_safe+0x50/0x70
           btrfs_sync_file+0x357/0x540
           do_fsync+0x38/0x60
           __ia32_sys_fdatasync+0x12/0x20
           do_fast_syscall_32+0x9a/0x2f0
           entry_SYSENTER_compat+0x84/0x96
    
    -> #4 (&ei->log_mutex){+.+.}:
           lock_acquire+0xbd/0x220
           __mutex_lock+0x86/0xa10
           btrfs_record_unlink_dir+0x2a/0xa0
           btrfs_unlink+0x5a/0xc0
           vfs_unlink+0xb1/0x1a0
           do_unlinkat+0x264/0x2b0
           do_fast_syscall_32+0x9a/0x2f0
           entry_SYSENTER_compat+0x84/0x96
    
    -> #3 (sb_internal#2){.+.+}:
           lock_acquire+0xbd/0x220
           __sb_start_write+0x14d/0x230
           start_transaction+0x3e6/0x590
           btrfs_evict_inode+0x475/0x640
           evict+0xbf/0x1b0
           btrfs_run_delayed_iputs+0x6c/0x90
           cleaner_kthread+0x124/0x1a0
           kthread+0x106/0x140
           ret_from_fork+0x3a/0x50
    
    -> #2 (&fs_info->cleaner_delayed_iput_mutex){+.+.}:
           lock_acquire+0xbd/0x220
           __mutex_lock+0x86/0xa10
           btrfs_alloc_data_chunk_ondemand+0x197/0x530
           btrfs_check_data_free_space+0x4c/0x90
           btrfs_delalloc_reserve_space+0x20/0x60
           btrfs_page_mkwrite+0x87/0x520
           do_page_mkwrite+0x31/0xa0
           __handle_mm_fault+0x799/0xb00
           handle_mm_fault+0x7c/0xe0
           __do_page_fault+0x1d3/0x4a0
           async_page_fault+0x1e/0x30
    
    -> #1 (sb_pagefaults){.+.+}:
           lock_acquire+0xbd/0x220
           __sb_start_write+0x14d/0x230
           btrfs_page_mkwrite+0x6a/0x520
           do_page_mkwrite+0x31/0xa0
           __handle_mm_fault+0x799/0xb00
           handle_mm_fault+0x7c/0xe0
           __do_page_fault+0x1d3/0x4a0
           async_page_fault+0x1e/0x30
    
    -> #0 (&mm->mmap_sem){++++}:
           __lock_acquire+0x42e/0x7a0
           lock_acquire+0xbd/0x220
           down_read+0x48/0xb0
           get_user_pages_unlocked+0x5a/0x1e0
           get_user_pages_fast+0xa4/0x150
           iov_iter_get_pages+0xc3/0x340
           do_direct_IO+0xf93/0x1d70
           __blockdev_direct_IO+0x32d/0x1c20
           btrfs_direct_IO+0x227/0x400
           generic_file_direct_write+0xcf/0x180
           btrfs_file_write_iter+0x308/0x58c
           aio_write+0xf8/0x1d0
           io_submit_one+0x3a9/0x620
           __ia32_compat_sys_io_submit+0xb2/0x270
           do_int80_syscall_32+0x5b/0x1a0
           entry_INT80_compat+0x88/0xa0
    
    other info that might help us debug this:
    
    Chain exists of:
      &mm->mmap_sem --> &ei->log_mutex --> &ei->dio_sem
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&ei->dio_sem);
                                   lock(&ei->log_mutex);
                                   lock(&ei->dio_sem);
      lock(&mm->mmap_sem);
    
     *** DEADLOCK ***
    
    1 lock held by aio-dio-invalid/30928:
     #0: 00000000cefe6b35 (&ei->dio_sem){++++}, at: btrfs_direct_IO+0x3be/0x400
    
    stack backtrace:
    CPU: 0 PID: 30928 Comm: aio-dio-invalid Not tainted 4.18.0-rc4-xfstests-00025-g5de5edbaf1d4 #411
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
    Call Trace:
     dump_stack+0x7c/0xbb
     print_circular_bug.isra.37+0x297/0x2a4
     check_prev_add.constprop.45+0x781/0x7a0
     ? __lock_acquire+0x42e/0x7a0
     validate_chain.isra.41+0x7f0/0xb00
     __lock_acquire+0x42e/0x7a0
     lock_acquire+0xbd/0x220
     ? get_user_pages_unlocked+0x5a/0x1e0
     down_read+0x48/0xb0
     ? get_user_pages_unlocked+0x5a/0x1e0
     get_user_pages_unlocked+0x5a/0x1e0
     get_user_pages_fast+0xa4/0x150
     iov_iter_get_pages+0xc3/0x340
     do_direct_IO+0xf93/0x1d70
     ? __alloc_workqueue_key+0x358/0x490
     ? __blockdev_direct_IO+0x14b/0x1c20
     __blockdev_direct_IO+0x32d/0x1c20
     ? btrfs_run_delalloc_work+0x40/0x40
     ? can_nocow_extent+0x490/0x490
     ? kvm_clock_read+0x1f/0x30
     ? can_nocow_extent+0x490/0x490
     ? btrfs_run_delalloc_work+0x40/0x40
     btrfs_direct_IO+0x227/0x400
     ? btrfs_run_delalloc_work+0x40/0x40
     generic_file_direct_write+0xcf/0x180
     btrfs_file_write_iter+0x308/0x58c
     aio_write+0xf8/0x1d0
     ? kvm_clock_read+0x1f/0x30
     ? __might_fault+0x3e/0x90
     io_submit_one+0x3a9/0x620
     ? io_submit_one+0xe5/0x620
     __ia32_compat_sys_io_submit+0xb2/0x270
     do_int80_syscall_32+0x5b/0x1a0
     entry_INT80_compat+0x88/0xa0
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87d7ea688393835feeeb5afc2fd4691e8a733da7
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Oct 11 15:54:31 2018 -0400

    btrfs: don't run delayed_iputs in commit
    
    commit 30928e9baac238a7330085a1c5747f0b5df444b4 upstream.
    
    This could result in a really bad case where we do something like
    
    evict
      evict_refill_and_join
        btrfs_commit_transaction
          btrfs_run_delayed_iputs
            evict
              evict_refill_and_join
                btrfs_commit_transaction
    ... forever
    
    We have plenty of other places where we run delayed iputs that are much
    safer, let those do the work.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42551ab618977b1e8d0b296f937b1aa80e93cd39
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Oct 11 15:54:21 2018 -0400

    btrfs: only free reserved extent if we didn't insert it
    
    commit 49940bdd57779c78462da7aa5a8650b2fea8c2ff upstream.
    
    When we insert the file extent once the ordered extent completes we free
    the reserved extent reservation as it'll have been migrated to the
    bytes_used counter.  However if we error out after this step we'll still
    clear the reserved extent reservation, resulting in a negative
    accounting of the reserved bytes for the block group and space info.
    Fix this by only doing the free if we didn't successfully insert a file
    extent for this extent.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7509d4f9ad5ee2b6061f2073dfb5e3f48216c09f
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Oct 11 15:54:09 2018 -0400

    btrfs: don't use ctl->free_space for max_extent_size
    
    commit fb5c39d7a887108087de6ff93d3f326b01b4ef41 upstream.
    
    max_extent_size is supposed to be the largest contiguous range for the
    space info, and ctl->free_space is the total free space in the block
    group.  We need to keep track of these separately and _only_ use the
    max_free_space if we don't have a max_extent_size, as that means our
    original request was too large to search any of the block groups for and
    therefore wouldn't have a max_extent_size set.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65d41e98fd715f93b9d79e4583fdb5db7a176c44
Author: Josef Bacik <jbacik@fb.com>
Date:   Fri Oct 12 15:32:33 2018 -0400

    btrfs: set max_extent_size properly
    
    commit ad22cf6ea47fa20fbe11ac324a0a15c0a9a4a2a9 upstream.
    
    We can't use entry->bytes if our entry is a bitmap entry, we need to use
    entry->max_extent_size in that case.  Fix up all the logic to make this
    consistent.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 947a9b021baf0521a12b1895c81507d7f5c2ddbe
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 15 09:51:00 2018 +0100

    Btrfs: fix assertion on fsync of regular file when using no-holes feature
    
    commit 7ed586d0a8241e81d58c656c5b315f781fa6fc97 upstream.
    
    When using the NO_HOLES feature and logging a regular file, we were
    expecting that if we find an inline extent, that either its size in RAM
    (uncompressed and unenconded) matches the size of the file or if it does
    not, that it matches the sector size and it represents compressed data.
    This assertion does not cover a case where the length of the inline extent
    is smaller than the sector size and also smaller the file's size, such
    case is possible through fallocate. Example:
    
      $ mkfs.btrfs -f -O no-holes /dev/sdb
      $ mount /dev/sdb /mnt
    
      $ xfs_io -f -c "pwrite -S 0xb60 0 21" /mnt/foobar
      $ xfs_io -c "falloc 40 40" /mnt/foobar
      $ xfs_io -c "fsync" /mnt/foobar
    
    In the above example we trigger the assertion because the inline extent's
    length is 21 bytes while the file size is 80 bytes. The fallocate() call
    merely updated the file's size and did not touch the existing inline
    extent, as expected.
    
    So fix this by adjusting the assertion so that an inline extent length
    smaller than the file size is valid if the file size is smaller than the
    filesystem's sector size.
    
    A test case for fstests follows soon.
    
    Reported-by: Anatoly Trosinenko <anatoly.trosinenko@gmail.com>
    Fixes: a89ca6f24ffe ("Btrfs: fix fsync after truncate when no_holes feature is enabled")
    CC: stable@vger.kernel.org # 4.14+
    Link: https://lore.kernel.org/linux-btrfs/CAE5jQCfRSBC7n4pUTFJcmHh109=gwyT9mFkCOL+NKfzswmR=_Q@mail.gmail.com/
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdda31751a2074cbfcf64f52b59b165c06204ae5
Author: Filipe Manana <fdmanana@suse.com>
Date:   Sat Oct 13 00:37:25 2018 +0100

    Btrfs: fix null pointer dereference on compressed write path error
    
    commit 3527a018c00e5dbada2f9d7ed5576437b6dd5cfb upstream.
    
    At inode.c:compress_file_range(), under the "free_pages_out" label, we can
    end up dereferencing the "pages" pointer when it has a NULL value. This
    case happens when "start" has a value of 0 and we fail to allocate memory
    for the "pages" pointer. When that happens we jump to the "cont" label and
    then enter the "if (start == 0)" branch where we immediately call the
    cow_file_range_inline() function. If that function returns 0 (success
    creating an inline extent) or an error (like -ENOMEM for example) we jump
    to the "free_pages_out" label and then access "pages[i]" leading to a NULL
    pointer dereference, since "nr_pages" has a value greater than zero at
    that point.
    
    Fix this by setting "nr_pages" to 0 when we fail to allocate memory for
    the "pages" pointer.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=201119
    Fixes: 771ed689d2cd ("Btrfs: Optimize compressed writeback and reads")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Liu Bo <bo.liu@linux.alibaba.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08374d8bc19ba9899257b6e7824588eb4e5ff0f5
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Aug 10 10:20:26 2018 +0800

    btrfs: qgroup: Dirty all qgroups before rescan
    
    commit 9c7b0c2e8dbfbcd80a71e2cbfe02704f26c185c6 upstream.
    
    [BUG]
    In the following case, rescan won't zero out the number of qgroup 1/0:
    
      $ mkfs.btrfs -fq $DEV
      $ mount $DEV /mnt
    
      $ btrfs quota enable /mnt
      $ btrfs qgroup create 1/0 /mnt
      $ btrfs sub create /mnt/sub
      $ btrfs qgroup assign 0/257 1/0 /mnt
    
      $ dd if=/dev/urandom of=/mnt/sub/file bs=1k count=1000
      $ btrfs sub snap /mnt/sub /mnt/snap
      $ btrfs quota rescan -w /mnt
      $ btrfs qgroup show -pcre /mnt
      qgroupid         rfer         excl     max_rfer     max_excl parent  child
      --------         ----         ----     --------     -------- ------  -----
      0/5          16.00KiB     16.00KiB         none         none ---     ---
      0/257      1016.00KiB     16.00KiB         none         none 1/0     ---
      0/258      1016.00KiB     16.00KiB         none         none ---     ---
      1/0        1016.00KiB     16.00KiB         none         none ---     0/257
    
    So far so good, but:
    
      $ btrfs qgroup remove 0/257 1/0 /mnt
      WARNING: quotas may be inconsistent, rescan needed
      $ btrfs quota rescan -w /mnt
      $ btrfs qgroup show -pcre  /mnt
      qgoupid         rfer         excl     max_rfer     max_excl parent  child
      --------         ----         ----     --------     -------- ------  -----
      0/5          16.00KiB     16.00KiB         none         none ---     ---
      0/257      1016.00KiB     16.00KiB         none         none ---     ---
      0/258      1016.00KiB     16.00KiB         none         none ---     ---
      1/0        1016.00KiB     16.00KiB         none         none ---     ---
                 ^^^^^^^^^^     ^^^^^^^^ not cleared
    
    [CAUSE]
    Before rescan we call qgroup_rescan_zero_tracking() to zero out all
    qgroups' accounting numbers.
    
    However we don't mark all qgroups dirty, but rely on rescan to do so.
    
    If we have any high level qgroup without children, it won't be marked
    dirty during rescan, since we cannot reach that qgroup.
    
    This will cause QGROUP_INFO items of childless qgroups never get updated
    in the quota tree, thus their numbers will stay the same in "btrfs
    qgroup show" output.
    
    [FIX]
    Just mark all qgroups dirty in qgroup_rescan_zero_tracking(), so even if
    we have childless qgroups, their QGROUP_INFO items will still get
    updated during rescan.
    
    Reported-by: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
    Tested-by: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45be291e9def76b8c42c10bfbf482a9dc81aa537
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Oct 9 15:05:29 2018 +0100

    Btrfs: fix wrong dentries after fsync of file that got its parent replaced
    
    commit 0f375eed92b5a407657532637ed9652611a682f5 upstream.
    
    In a scenario like the following:
    
      mkdir /mnt/A               # inode 258
      mkdir /mnt/B               # inode 259
      touch /mnt/B/bar           # inode 260
    
      sync
    
      mv /mnt/B/bar /mnt/A/bar
      mv -T /mnt/A /mnt/B
      fsync /mnt/B/bar
    
      <power fail>
    
    After replaying the log we end up with file bar having 2 hard links, both
    with the name 'bar' and one in the directory with inode number 258 and the
    other in the directory with inode number 259. Also, we end up with the
    directory inode 259 still existing and with the directory inode 258 still
    named as 'A', instead of 'B'. In this scenario, file 'bar' should only
    have one hard link, located at directory inode 258, the directory inode
    259 should not exist anymore and the name for directory inode 258 should
    be 'B'.
    
    This incorrect behaviour happens because when attempting to log the old
    parents of an inode, we skip any parents that no longer exist. Fix this
    by forcing a full commit if an old parent no longer exists.
    
    A test case for fstests follows soon.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 985579fa688e8fed8ed3570210af7201dc67d179
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 8 11:12:55 2018 +0100

    Btrfs: fix warning when replaying log after fsync of a tmpfile
    
    commit f2d72f42d5fa3bf33761d9e47201745f624fcff5 upstream.
    
    When replaying a log which contains a tmpfile (which necessarily has a
    link count of 0) we end up calling inc_nlink(), at
    fs/btrfs/tree-log.c:replay_one_buffer(), which produces a warning like
    the following:
    
      [195191.943673] WARNING: CPU: 0 PID: 6924 at fs/inode.c:342 inc_nlink+0x33/0x40
      [195191.943723] CPU: 0 PID: 6924 Comm: mount Not tainted 4.19.0-rc6-btrfs-next-38 #1
      [195191.943724] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
      [195191.943726] RIP: 0010:inc_nlink+0x33/0x40
      [195191.943728] RSP: 0018:ffffb96e425e3870 EFLAGS: 00010246
      [195191.943730] RAX: 0000000000000000 RBX: ffff8c0d1e6af4f0 RCX: 0000000000000006
      [195191.943731] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff8c0d1e6af4f0
      [195191.943731] RBP: 0000000000000097 R08: 0000000000000001 R09: 0000000000000000
      [195191.943732] R10: 0000000000000000 R11: 0000000000000000 R12: ffffb96e425e3a60
      [195191.943733] R13: ffff8c0d10cff0c8 R14: ffff8c0d0d515348 R15: ffff8c0d78a1b3f8
      [195191.943735] FS:  00007f570ee24480(0000) GS:ffff8c0dfb200000(0000) knlGS:0000000000000000
      [195191.943736] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [195191.943737] CR2: 00005593286277c8 CR3: 00000000bb8f2006 CR4: 00000000003606f0
      [195191.943739] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [195191.943740] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [195191.943741] Call Trace:
      [195191.943778]  replay_one_buffer+0x797/0x7d0 [btrfs]
      [195191.943802]  walk_up_log_tree+0x1c1/0x250 [btrfs]
      [195191.943809]  ? rcu_read_lock_sched_held+0x3f/0x70
      [195191.943825]  walk_log_tree+0xae/0x1d0 [btrfs]
      [195191.943840]  btrfs_recover_log_trees+0x1d7/0x4d0 [btrfs]
      [195191.943856]  ? replay_dir_deletes+0x280/0x280 [btrfs]
      [195191.943870]  open_ctree+0x1c3b/0x22a0 [btrfs]
      [195191.943887]  btrfs_mount_root+0x6b4/0x800 [btrfs]
      [195191.943894]  ? rcu_read_lock_sched_held+0x3f/0x70
      [195191.943899]  ? pcpu_alloc+0x55b/0x7c0
      [195191.943906]  ? mount_fs+0x3b/0x140
      [195191.943908]  mount_fs+0x3b/0x140
      [195191.943912]  ? __init_waitqueue_head+0x36/0x50
      [195191.943916]  vfs_kern_mount+0x62/0x160
      [195191.943927]  btrfs_mount+0x134/0x890 [btrfs]
      [195191.943936]  ? rcu_read_lock_sched_held+0x3f/0x70
      [195191.943938]  ? pcpu_alloc+0x55b/0x7c0
      [195191.943943]  ? mount_fs+0x3b/0x140
      [195191.943952]  ? btrfs_remount+0x570/0x570 [btrfs]
      [195191.943954]  mount_fs+0x3b/0x140
      [195191.943956]  ? __init_waitqueue_head+0x36/0x50
      [195191.943960]  vfs_kern_mount+0x62/0x160
      [195191.943963]  do_mount+0x1f9/0xd40
      [195191.943967]  ? memdup_user+0x4b/0x70
      [195191.943971]  ksys_mount+0x7e/0xd0
      [195191.943974]  __x64_sys_mount+0x21/0x30
      [195191.943977]  do_syscall_64+0x60/0x1b0
      [195191.943980]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [195191.943983] RIP: 0033:0x7f570e4e524a
      [195191.943986] RSP: 002b:00007ffd83589478 EFLAGS: 00000206 ORIG_RAX: 00000000000000a5
      [195191.943989] RAX: ffffffffffffffda RBX: 0000563f335b2060 RCX: 00007f570e4e524a
      [195191.943990] RDX: 0000563f335b2240 RSI: 0000563f335b2280 RDI: 0000563f335b2260
      [195191.943992] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000020
      [195191.943993] R10: 00000000c0ed0000 R11: 0000000000000206 R12: 0000563f335b2260
      [195191.943994] R13: 0000563f335b2240 R14: 0000000000000000 R15: 00000000ffffffff
      [195191.944002] irq event stamp: 8688
      [195191.944010] hardirqs last  enabled at (8687): [<ffffffff9cb004c3>] console_unlock+0x503/0x640
      [195191.944012] hardirqs last disabled at (8688): [<ffffffff9ca037dd>] trace_hardirqs_off_thunk+0x1a/0x1c
      [195191.944018] softirqs last  enabled at (8638): [<ffffffff9cc0a5d1>] __set_page_dirty_nobuffers+0x101/0x150
      [195191.944020] softirqs last disabled at (8634): [<ffffffff9cc26bbe>] wb_wakeup_delayed+0x2e/0x60
      [195191.944022] ---[ end trace 5d6e873a9a0b811a ]---
    
    This happens because the inode does not have the flag I_LINKABLE set,
    which is a runtime only flag, not meant to be persisted, set when the
    inode is created through open(2) if the flag O_EXCL is not passed to it.
    Except for the warning, there are no other consequences (like corruptions
    or metadata inconsistencies).
    
    Since it's pointless to replay a tmpfile as it would be deleted in a
    later phase of the log replay procedure (it has a link count of 0), fix
    this by not logging tmpfiles and if a tmpfile is found in a log (created
    by a kernel without this change), skip the replay of the inode.
    
    A test case for fstests follows soon.
    
    Fixes: 471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size after fsync log replay")
    CC: stable@vger.kernel.org # 4.18+
    Reported-by: Martin Steigerwald <martin@lichtvoll.de>
    Link: https://lore.kernel.org/linux-btrfs/3666619.NTnn27ZJZE@merkaba/
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae66cf18fc52d3f3285b5090b3e4516e4fcc1ed
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Sep 28 07:18:02 2018 -0400

    btrfs: make sure we create all new block groups
    
    commit 545e3366db823dc3342ca9d7fea803f829c9062f upstream.
    
    Allocating new chunks modifies both the extent and chunk tree, which can
    trigger new chunk allocations.  So instead of doing list_for_each_safe,
    just do while (!list_empty()) so we make sure we don't exit with other
    pending bg's still on our list.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Reviewed-by: Liu Bo <bo.liu@linux.alibaba.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7e3da4918b18ad8ff3848c9054425e8143a991c
Author: Josef Bacik <jbacik@fb.com>
Date:   Fri Sep 28 07:18:00 2018 -0400

    btrfs: reset max_extent_size on clear in a bitmap
    
    commit 553cceb49681d60975d00892877d4c871bf220f9 upstream.
    
    We need to clear the max_extent_size when we clear bits from a bitmap
    since it could have been from the range that contains the
    max_extent_size.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Liu Bo <bo.liu@linux.alibaba.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5d59a48c3724d2fdfa145a9dfa64261299aee45
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Sep 28 07:17:49 2018 -0400

    btrfs: protect space cache inode alloc with GFP_NOFS
    
    commit 84de76a2fb217dc1b6bc2965cc397d1648aa1404 upstream.
    
    If we're allocating a new space cache inode it's likely going to be
    under a transaction handle, so we need to use memalloc_nofs_save() in
    order to avoid deadlocks, and more importantly lockdep messages that
    make xfstests fail.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ce0f8b6fb06afb39a4dba8a8aa9ed4ccd5134b5
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Sep 12 10:45:45 2018 -0400

    btrfs: wait on caching when putting the bg cache
    
    commit 3aa7c7a31c26321696b92841d5103461c6f3f517 upstream.
    
    While testing my backport I noticed there was a panic if I ran
    generic/416 generic/417 generic/418 all in a row.  This just happened to
    uncover a race where we had outstanding IO after we destroy all of our
    workqueues, and then we'd go to queue the endio work on those free'd
    workqueues.
    
    This is because we aren't waiting for the caching threads to be done
    before freeing everything up, so to fix this make sure we wait on any
    outstanding caching that's being done before we free up the block group,
    so we're sure to be done with all IO by the time we get to
    btrfs_stop_all_workers().  This fixes the panic I was seeing
    consistently in testing.
    
    ------------[ cut here ]------------
    kernel BUG at fs/btrfs/volumes.c:6112!
    SMP PTI
    Modules linked in:
    CPU: 1 PID: 27165 Comm: kworker/u4:7 Not tainted 4.16.0-02155-g3553e54a578d-dirty #875
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
    Workqueue: btrfs-cache btrfs_cache_helper
    RIP: 0010:btrfs_map_bio+0x346/0x370
    RSP: 0000:ffffc900061e79d0 EFLAGS: 00010202
    RAX: 0000000000000000 RBX: ffff880071542e00 RCX: 0000000000533000
    RDX: ffff88006bb74380 RSI: 0000000000000008 RDI: ffff880078160000
    RBP: 0000000000000001 R08: ffff8800781cd200 R09: 0000000000503000
    R10: ffff88006cd21200 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: ffff8800781cd200 R15: ffff880071542e00
    FS:  0000000000000000(0000) GS:ffff88007fd00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000000817ffc4 CR3: 0000000078314000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     btree_submit_bio_hook+0x8a/0xd0
     submit_one_bio+0x5d/0x80
     read_extent_buffer_pages+0x18a/0x320
     btree_read_extent_buffer_pages+0xbc/0x200
     ? alloc_extent_buffer+0x359/0x3e0
     read_tree_block+0x3d/0x60
     read_block_for_search.isra.30+0x1a5/0x360
     btrfs_search_slot+0x41b/0xa10
     btrfs_next_old_leaf+0x212/0x470
     caching_thread+0x323/0x490
     normal_work_helper+0xc5/0x310
     process_one_work+0x141/0x340
     worker_thread+0x44/0x3c0
     kthread+0xf8/0x130
     ? process_one_work+0x340/0x340
     ? kthread_bind+0x10/0x10
     ret_from_fork+0x35/0x40
    RIP: btrfs_map_bio+0x346/0x370 RSP: ffffc900061e79d0
    ---[ end trace 827eb13e50846033 ]---
    Kernel panic - not syncing: Fatal exception
    Kernel Offset: disabled
    ---[ end Kernel panic - not syncing: Fatal exception
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da05e93720843101d7b70c84b63805a37d4485d1
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Thu Sep 6 17:18:15 2018 -0400

    btrfs: don't attempt to trim devices that don't support it
    
    commit 0be88e367fd8fbdb45257615d691f4675dda062f upstream.
    
    We check whether any device the file system is using supports discard in
    the ioctl call, but then we attempt to trim free extents on every device
    regardless of whether discard is supported.  Due to the way we mask off
    EOPNOTSUPP, we can end up issuing the trim operations on each free range
    on devices that don't support it, just wasting time.
    
    Fixes: 499f377f49f08 ("btrfs: iterate over unused chunk space in FITRIM")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d24c89db0b0b664046aebd1e0f9aef7306b944
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Thu Sep 6 17:18:14 2018 -0400

    btrfs: iterate all devices during trim, instead of fs_devices::alloc_list
    
    commit d4e329de5e5e21594df2e0dd59da9acee71f133b upstream.
    
    btrfs_trim_fs iterates over the fs_devices->alloc_list while holding the
    device_list_mutex.  The problem is that ->alloc_list is protected by the
    chunk mutex.  We don't want to hold the chunk mutex over the trim of the
    entire file system.  Fortunately, the ->dev_list list is protected by
    the dev_list mutex and while it will give us all devices, including
    read-only devices, we already just skip the read-only devices.  Then we
    can continue to take and release the chunk mutex while scanning each
    device.
    
    Fixes: 499f377f49f ("btrfs: iterate over unused chunk space in FITRIM")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fdb337b67bcc407c0eaf1108786cb1300fe1ff1
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Sep 7 14:16:24 2018 +0800

    btrfs: Ensure btrfs_trim_fs can trim the whole filesystem
    
    commit 6ba9fc8e628becf0e3ec94083450d089b0dec5f5 upstream.
    
    [BUG]
    fstrim on some btrfs only trims the unallocated space, not trimming any
    space in existing block groups.
    
    [CAUSE]
    Before fstrim_range passed to btrfs_trim_fs(), it gets truncated to
    range [0, super->total_bytes).  So later btrfs_trim_fs() will only be
    able to trim block groups in range [0, super->total_bytes).
    
    While for btrfs, any bytenr aligned to sectorsize is valid, since btrfs
    uses its logical address space, there is nothing limiting the location
    where we put block groups.
    
    For filesystem with frequent balance, it's quite easy to relocate all
    block groups and bytenr of block groups will start beyond
    super->total_bytes.
    
    In that case, btrfs will not trim existing block groups.
    
    [FIX]
    Just remove the truncation in btrfs_ioctl_fitrim(), so btrfs_trim_fs()
    can get the unmodified range, which is normally set to [0, U64_MAX].
    
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Fixes: f4c697e6406d ("btrfs: return EINVAL if start > total_bytes in fitrim ioctl")
    CC: <stable@vger.kernel.org> # v4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b23644c64fd2d4033cf265bb3f131cccffdc453
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Sep 7 14:16:23 2018 +0800

    btrfs: Enhance btrfs_trim_fs function to handle error better
    
    commit 93bba24d4b5ad1e5cd8b43f64e66ff9d6355dd20 upstream.
    
    Function btrfs_trim_fs() doesn't handle errors in a consistent way. If
    error happens when trimming existing block groups, it will skip the
    remaining blocks and continue to trim unallocated space for each device.
    
    The return value will only reflect the final error from device trimming.
    
    This patch will fix such behavior by:
    
    1) Recording the last error from block group or device trimming
       The return value will also reflect the last error during trimming.
       Make developer more aware of the problem.
    
    2) Continuing trimming if possible
       If we failed to trim one block group or device, we could still try
       the next block group or device.
    
    3) Report number of failures during block group and device trimming
       It would be less noisy, but still gives user a brief summary of
       what's going wrong.
    
    Such behavior can avoid confusion for cases like failure to trim the
    first block group and then only unallocated space is trimmed.
    
    Reported-by: Chris Murphy <lists@colorremedies.com>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add bg_ret and dev_ret to the messages ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2fc220f5cfd10ca7cd74ef622e8906287db1c7e
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Thu Sep 6 16:59:33 2018 -0400

    btrfs: fix error handling in free_log_tree
    
    commit 374b0e2d6ba5da7fd1cadb3247731ff27d011f6f upstream.
    
    When we hit an I/O error in free_log_tree->walk_log_tree during file system
    shutdown we can crash due to there not being a valid transaction handle.
    
    Use btrfs_handle_fs_error when there's no transaction handle to use.
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000060
      IP: free_log_tree+0xd2/0x140 [btrfs]
      PGD 0 P4D 0
      Oops: 0000 [#1] SMP DEBUG_PAGEALLOC PTI
      Modules linked in: <modules>
      CPU: 2 PID: 23544 Comm: umount Tainted: G        W        4.12.14-kvmsmall #9 SLE15 (unreleased)
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
      task: ffff96bfd3478880 task.stack: ffffa7cf40d78000
      RIP: 0010:free_log_tree+0xd2/0x140 [btrfs]
      RSP: 0018:ffffa7cf40d7bd10 EFLAGS: 00010282
      RAX: 00000000fffffffb RBX: 00000000fffffffb RCX: 0000000000000002
      RDX: 0000000000000000 RSI: ffff96c02f07d4c8 RDI: 0000000000000282
      RBP: ffff96c013cf1000 R08: ffff96c02f07d4c8 R09: ffff96c02f07d4d0
      R10: 0000000000000000 R11: 0000000000000002 R12: 0000000000000000
      R13: ffff96c005e800c0 R14: ffffa7cf40d7bdb8 R15: 0000000000000000
      FS:  00007f17856bcfc0(0000) GS:ffff96c03f600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000060 CR3: 0000000045ed6002 CR4: 00000000003606e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       ? wait_for_writer+0xb0/0xb0 [btrfs]
       btrfs_free_log+0x17/0x30 [btrfs]
       btrfs_drop_and_free_fs_root+0x9a/0xe0 [btrfs]
       btrfs_free_fs_roots+0xc0/0x130 [btrfs]
       ? wait_for_completion+0xf2/0x100
       close_ctree+0xea/0x2e0 [btrfs]
       ? kthread_stop+0x161/0x260
       generic_shutdown_super+0x6c/0x120
       kill_anon_super+0xe/0x20
       btrfs_kill_super+0x13/0x100 [btrfs]
       deactivate_locked_super+0x3f/0x70
       cleanup_mnt+0x3b/0x70
       task_work_run+0x78/0x90
       exit_to_usermode_loop+0x77/0xa6
       do_syscall_64+0x1c5/0x1e0
       entry_SYSCALL_64_after_hwframe+0x42/0xb7
      RIP: 0033:0x7f1784f90827
      RSP: 002b:00007ffdeeb03118 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 0000556a60c62970 RCX: 00007f1784f90827
      RDX: 0000000000000001 RSI: 0000000000000000 RDI: 0000556a60c62b50
      RBP: 0000000000000000 R08: 0000000000000005 R09: 00000000ffffffff
      R10: 0000556a60c63900 R11: 0000000000000246 R12: 0000556a60c62b50
      R13: 00007f17854a81c4 R14: 0000000000000000 R15: 0000000000000000
      RIP: free_log_tree+0xd2/0x140 [btrfs] RSP: ffffa7cf40d7bd10
      CR2: 0000000000000060
    
    Fixes: 681ae50917df9 ("Btrfs: cleanup reserved space when freeing tree log on error")
    CC: <stable@vger.kernel.org> # v3.13
    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d36ac4a32275f6c551c9e2d0284b3e0ef79623ec
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Aug 21 09:53:47 2018 +0800

    btrfs: locking: Add extra check in btrfs_init_new_buffer() to avoid deadlock
    
    commit b72c3aba09a53fc7c1824250d71180ca154517a7 upstream.
    
    [BUG]
    For certain crafted image, whose csum root leaf has missing backref, if
    we try to trigger write with data csum, it could cause deadlock with the
    following kernel WARN_ON():
    
      WARNING: CPU: 1 PID: 41 at fs/btrfs/locking.c:230 btrfs_tree_lock+0x3e2/0x400
      CPU: 1 PID: 41 Comm: kworker/u4:1 Not tainted 4.18.0-rc1+ #8
      Workqueue: btrfs-endio-write btrfs_endio_write_helper
      RIP: 0010:btrfs_tree_lock+0x3e2/0x400
      Call Trace:
       btrfs_alloc_tree_block+0x39f/0x770
       __btrfs_cow_block+0x285/0x9e0
       btrfs_cow_block+0x191/0x2e0
       btrfs_search_slot+0x492/0x1160
       btrfs_lookup_csum+0xec/0x280
       btrfs_csum_file_blocks+0x2be/0xa60
       add_pending_csums+0xaf/0xf0
       btrfs_finish_ordered_io+0x74b/0xc90
       finish_ordered_fn+0x15/0x20
       normal_work_helper+0xf6/0x500
       btrfs_endio_write_helper+0x12/0x20
       process_one_work+0x302/0x770
       worker_thread+0x81/0x6d0
       kthread+0x180/0x1d0
       ret_from_fork+0x35/0x40
    
    [CAUSE]
    That crafted image has missing backref for csum tree root leaf.  And
    when we try to allocate new tree block, since there is no
    EXTENT/METADATA_ITEM for csum tree root, btrfs consider it's free slot
    and use it.
    
    The extent tree of the image looks like:
    
      Normal image                      |       This fuzzed image
      ----------------------------------+--------------------------------
      BG 29360128                       | BG 29360128
       One empty slot                   |  One empty slot
      29364224: backref to UUID tree    | 29364224: backref to UUID tree
       Two empty slots                  |  Two empty slots
      29376512: backref to CSUM tree    |  One empty slot (bad type) <<<
      29380608: backref to D_RELOC tree | 29380608: backref to D_RELOC tree
      ...                               | ...
    
    Since bytenr 29376512 has no METADATA/EXTENT_ITEM, when btrfs try to
    alloc tree block, it's an valid slot for btrfs.
    
    And for finish_ordered_write, when we need to insert csum, we try to CoW
    csum tree root.
    
    By accident, empty slots at bytenr BG_OFFSET, BG_OFFSET + 8K,
    BG_OFFSET + 12K is already used by tree block COW for other trees, the
    next empty slot is BG_OFFSET + 16K, which should be the backref for CSUM
    tree.
    
    But due to the bad type, btrfs can recognize it and still consider it as
    an empty slot, and will try to use it for csum tree CoW.
    
    Then in the following call trace, we will try to lock the new tree
    block, which turns out to be the old csum tree root which is already
    locked:
    
    btrfs_search_slot() called on csum tree root, which is at 29376512
    |- btrfs_cow_block()
       |- btrfs_set_lock_block()
       |  |- Now locks tree block 29376512 (old csum tree root)
       |- __btrfs_cow_block()
          |- btrfs_alloc_tree_block()
             |- btrfs_reserve_extent()
                | Now it returns tree block 29376512, which extent tree
                | shows its empty slot, but it's already hold by csum tree
                |- btrfs_init_new_buffer()
                   |- btrfs_tree_lock()
                      | Triggers WARN_ON(eb->lock_owner == current->pid)
                      |- wait_event()
                         Wait lock owner to release the lock, but it's
                         locked by ourself, so it will deadlock
    
    [FIX]
    This patch will do the lock_owner and current->pid check at
    btrfs_init_new_buffer().
    So above deadlock can be avoided.
    
    Since such problem can only happen in crafted image, we will still
    trigger kernel warning for later aborted transaction, but with a little
    more meaningful warning message.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=200405
    Reported-by: Xu Wen <wen.xu@gatech.edu>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61e3643dc51e8368a8042252fa1b3cca00784923
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Aug 21 09:42:03 2018 +0800

    btrfs: Handle owner mismatch gracefully when walking up tree
    
    commit 65c6e82becec33731f48786e5a30f98662c86b16 upstream.
    
    [BUG]
    When mounting certain crafted image, btrfs will trigger kernel BUG_ON()
    when trying to recover balance:
    
      kernel BUG at fs/btrfs/extent-tree.c:8956!
      invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
      CPU: 1 PID: 662 Comm: mount Not tainted 4.18.0-rc1-custom+ #10
      RIP: 0010:walk_up_proc+0x336/0x480 [btrfs]
      RSP: 0018:ffffb53540c9b890 EFLAGS: 00010202
      Call Trace:
       walk_up_tree+0x172/0x1f0 [btrfs]
       btrfs_drop_snapshot+0x3a4/0x830 [btrfs]
       merge_reloc_roots+0xe1/0x1d0 [btrfs]
       btrfs_recover_relocation+0x3ea/0x420 [btrfs]
       open_ctree+0x1af3/0x1dd0 [btrfs]
       btrfs_mount_root+0x66b/0x740 [btrfs]
       mount_fs+0x3b/0x16a
       vfs_kern_mount.part.9+0x54/0x140
       btrfs_mount+0x16d/0x890 [btrfs]
       mount_fs+0x3b/0x16a
       vfs_kern_mount.part.9+0x54/0x140
       do_mount+0x1fd/0xda0
       ksys_mount+0xba/0xd0
       __x64_sys_mount+0x21/0x30
       do_syscall_64+0x60/0x210
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [CAUSE]
    Extent tree corruption.  In this particular case, reloc tree root's
    owner is DATA_RELOC_TREE (should be TREE_RELOC), thus its backref is
    corrupted and we failed the owner check in walk_up_tree().
    
    [FIX]
    It's pretty hard to take care of every extent tree corruption, but at
    least we can remove such BUG_ON() and exit more gracefully.
    
    And since in this particular image, DATA_RELOC_TREE and TREE_RELOC share
    the same root (which is obviously invalid), we needs to make
    __del_reloc_root() more robust to detect such invalid sharing to avoid
    possible NULL dereference as root->node can be NULL in this case.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=200411
    Reported-by: Xu Wen <wen.xu@gatech.edu>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f7e525a25e10e66f87b2329b1b8ab4d311e5f4e
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Oct 9 14:36:45 2018 +0800

    btrfs: qgroup: Avoid calling qgroup functions if qgroup is not enabled
    
    commit 3628b4ca64f24a4ec55055597d0cb1c814729f8b upstream.
    
    Some qgroup trace events like btrfs_qgroup_release_data() and
    btrfs_qgroup_free_delayed_ref() can still be triggered even if qgroup is
    not enabled.
    
    This is caused by the lack of qgroup status check before calling some
    qgroup functions.  Thankfully the functions can handle quota disabled
    case well and just do nothing for qgroup disabled case.
    
    This patch will do earlier check before triggering related trace events.
    
    And for enabled <-> disabled race case:
    
    1) For enabled->disabled case
       Disable will wipe out all qgroups data including reservation and
       excl/rfer. Even if we leak some reservation or numbers, it will
       still be cleared, so nothing will go wrong.
    
    2) For disabled -> enabled case
       Current btrfs_qgroup_release_data() will use extent_io tree to ensure
       we won't underflow reservation. And for delayed_ref we use
       head->qgroup_reserved to record the reserved space, so in that case
       head->qgroup_reserved should be 0 and we won't underflow.
    
    CC: stable@vger.kernel.org # 4.14+
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Link: https://lore.kernel.org/linux-btrfs/CAJCQCtQau7DtuUUeycCkZ36qjbKuxNzsgqJ7+sJ6W0dK_NLE3w@mail.gmail.com/
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e09399e8047e4cf7d6df0b3029ce4b13ab5970eb
Author: Breno Leitao <leitao@debian.org>
Date:   Mon Oct 22 18:16:26 2018 -0300

    selftests/powerpc: Fix ptrace tm failure
    
    commit 48dc0ef19044bfb69193302fbe3a834e3331b7ae upstream.
    
    Test ptrace-tm-spd-gpr fails on current kernel (4.19) due to a segmentation
    fault that happens on the child process prior to setting cptr[2] = 1. This
    causes the parent process to wait forever at 'while (!pptr[2])' and the test to
    be killed by the test harness framework by timeout, thus, failing.
    
    The segmentation fault happens because of a inline assembly being
    generated as:
    
            0x10000355c <tm_spd_gpr+492>    lfs    f0, 0(0)
    
    This is reading memory position 0x0 and causing the segmentation fault.
    
    This code is being generated by ASM_LOAD_FPR_SINGLE_PRECISION(flt_4), where
    flt_4 is passed to the inline assembly block as:
    
            [flt_4] "r" (&d)
    
    Since the inline assembly 'r' constraint means any GPR, gpr0 is being
    chosen, thus causing this issue when issuing a Load Floating-Point Single
    instruction.
    
    This patch simply changes the constraint to 'b', which specify that this
    register will be used as base, and r0 is not allowed to be used, avoiding
    this issue.
    
    Other than that, removing flt_2 register from the input operands, since it
    is not used by the inline assembly code at all.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Acked-by: Segher Boessenkool <segher@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59bc2d3a68ad99c72972caadfa350e758af65e8b
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Nov 15 10:44:58 2017 +0100

    soc/tegra: pmc: Fix child-node lookup
    
    commit 1dc6bd5e39a29453bdcc17348dd2a89f1aa4004e upstream.
    
    Fix child-node lookup during probe, which ended up searching the whole
    device tree depth-first starting at the parent rather than just matching
    on its children.
    
    To make things worse, the parent pmc node could end up being prematurely
    freed as of_find_node_by_name() drops a reference to its first argument.
    
    Fixes: 3568df3d31d6 ("soc: tegra: Add thermal reset (thermtrip) support to PMC")
    Cc: stable <stable@vger.kernel.org>     # 4.0
    Cc: Mikko Perttunen <mperttunen@nvidia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Mikko Perttunen <mperttunen@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1258e45dc460aa29dd70fd715fd1624b7ab93ef1
Author: Thor Thayer <thor.thayer@linux.intel.com>
Date:   Tue Sep 25 10:31:52 2018 -0500

    arm64: dts: stratix10: Correct System Manager register size
    
    commit 74121b9aa3cd571ddfff014a9f47db36cae3cda9 upstream.
    
    Correct the register size of the System Manager node.
    
    Cc: stable@vger.kernel.org
    Fixes: 78cd6a9d8e154 ("arm64: dts: Add base stratix 10 dtsi")
    Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 540631d9e690431fdc214b98e2f623838d84b03c
Author: Thor Thayer <thor.thayer@linux.intel.com>
Date:   Tue Sep 25 10:21:10 2018 -0500

    ARM: dts: socfpga: Fix SDRAM node address for Arria10
    
    commit ce3bf934f919a7d675c5b7fa4cc233ded9c6256e upstream.
    
    The address in the SDRAM node was incorrect. Fix this to agree with the
    correct address and to match the reg definition block.
    
    Cc: stable@vger.kernel.org
    Fixes: 54b4a8f57848b("arm: socfpga: dts: Add Arria10 SDRAM EDAC DTS support")
    Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdd780d0a26070e59fe2c3690a776aad25227756
Author: Nicolas Pitre <nico@fluxnic.net>
Date:   Tue Oct 30 13:26:15 2018 -0400

    Cramfs: fix abad comparison when wrap-arounds occur
    
    commit 672ca9dd13f1aca0c17516f76fc5b0e8344b3e46 upstream.
    
    It is possible for corrupted filesystem images to produce very large
    block offsets that may wrap when a length is added, and wrongly pass
    the buffer size test.
    
    Reported-by: Anatoly Trosinenko <anatoly.trosinenko@gmail.com>
    Signed-off-by: Nicolas Pitre <nico@linaro.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f46d951fd3389089500623a9f026e4d25be823a
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Sep 27 22:36:27 2018 +0100

    rpmsg: smd: fix memory leak on channel create
    
    commit 940c620d6af8fca7d115de40f19870fba415efac upstream.
    
    Currently a failed allocation of channel->name leads to an
    immediate return without freeing channel. Fix this by setting
    ret to -ENOMEM and jumping to an exit path that kfree's channel.
    
    Detected by CoverityScan, CID#1473692 ("Resource Leak")
    
    Fixes: 53e2822e56c7 ("rpmsg: Introduce Qualcomm SMD backend")
    Cc: stable@vger.kernel.org
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad2c712b50597ab70cdf9c75101518a6837d0e69
Author: Tri Vo <trong@android.com>
Date:   Wed Sep 19 12:27:50 2018 -0700

    arm64: lse: remove -fcall-used-x0 flag
    
    commit 2a6c7c367de82951c98a290a21156770f6f82c84 upstream.
    
    x0 is not callee-saved in the PCS. So there is no need to specify
    -fcall-used-x0.
    
    Clang doesn't currently support -fcall-used flags. This patch will help
    building the kernel with clang.
    
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Tri Vo <trong@android.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baf1746da59e310f8e7d016090e2d447e867828a
Author: Hans Verkuil <hansverk@cisco.com>
Date:   Thu Sep 13 07:47:28 2018 -0400

    media: media colorspaces*.rst: rename AdobeRGB to opRGB
    
    commit a58c37978cf02f6d35d05ee4e9288cb8455f1401 upstream.
    
    Drop all Adobe references and use the official opRGB standard
    instead.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: stable@vger.kernel.org
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 453a8a459cc2cd6c975449c04e0720fe118e4056
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Thu Sep 13 22:46:29 2018 -0400

    media: em28xx: make v4l2-compliance happier by starting sequence on zero
    
    commit afeaade90db4c5dab93f326d9582be1d5954a198 upstream.
    
    The v4l2-compliance tool complains if a video doesn't start
    with a zero sequence number.
    
    While this shouldn't cause any real problem for apps, let's
    make it happier, in order to better check the v4l2-compliance
    differences before and after patchsets.
    
    This is actually an old issue. It is there since at least its
    videobuf2 conversion, e. g. changeset 3829fadc461 ("[media]
    em28xx: convert to videobuf2"), if VB1 wouldn't suffer from
    the same issue.
    
    Cc: stable@vger.kernel.org
    Fixes: d3829fadc461 ("[media] em28xx: convert to videobuf2")
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4e311ed2390394d32806d5fcca5542505f5f47f
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Fri Sep 14 00:20:21 2018 -0400

    media: em28xx: fix input name for Terratec AV 350
    
    commit 15644bfa195bd166d0a5ed76ae2d587f719c3dac upstream.
    
    Instead of using a register value, use an AMUX name, as otherwise
    VIDIOC_G_AUDIO would fail.
    
    Cc: stable@vger.kernel.org
    Fixes: 766ed64de554 ("V4L/DVB (11827): Add support for Terratec Grabster AV350")
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dfd975bb1c360932ec718bf83f65bad594e964c
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Thu Sep 13 16:49:51 2018 -0400

    media: tvp5150: avoid going past array on v4l2_querymenu()
    
    commit 5c4c4505b716cb782ad7263091edc466c4d1fbd4 upstream.
    
    The parameters of v4l2_ctrl_new_std_menu_items() are tricky: instead of
    the number of possible values, it requires the number of the maximum
    value. In other words, the ARRAY_SIZE() value should be decremented,
    otherwise it will go past the array bounds, as warned by KASAN:
    
    [  279.839688] BUG: KASAN: global-out-of-bounds in v4l2_querymenu+0x10d/0x180 [videodev]
    [  279.839709] Read of size 8 at addr ffffffffc10a4cb0 by task v4l2-compliance/16676
    
    [  279.839736] CPU: 1 PID: 16676 Comm: v4l2-compliance Not tainted 4.18.0-rc2+ #120
    [  279.839741] Hardware name:  /NUC5i7RYB, BIOS RYBDWi35.86A.0364.2017.0511.0949 05/11/2017
    [  279.839743] Call Trace:
    [  279.839758]  dump_stack+0x71/0xab
    [  279.839807]  ? v4l2_querymenu+0x10d/0x180 [videodev]
    [  279.839817]  print_address_description+0x1c9/0x270
    [  279.839863]  ? v4l2_querymenu+0x10d/0x180 [videodev]
    [  279.839871]  kasan_report+0x237/0x360
    [  279.839918]  v4l2_querymenu+0x10d/0x180 [videodev]
    [  279.839964]  __video_do_ioctl+0x2c8/0x590 [videodev]
    [  279.840011]  ? copy_overflow+0x20/0x20 [videodev]
    [  279.840020]  ? avc_ss_reset+0xa0/0xa0
    [  279.840028]  ? check_stack_object+0x21/0x60
    [  279.840036]  ? __check_object_size+0xe7/0x240
    [  279.840080]  video_usercopy+0xed/0x730 [videodev]
    [  279.840123]  ? copy_overflow+0x20/0x20 [videodev]
    [  279.840167]  ? v4l_enumstd+0x40/0x40 [videodev]
    [  279.840177]  ? __handle_mm_fault+0x9f9/0x1ba0
    [  279.840186]  ? __pmd_alloc+0x2c0/0x2c0
    [  279.840193]  ? __vfs_write+0xb6/0x350
    [  279.840200]  ? kernel_read+0xa0/0xa0
    [  279.840244]  ? video_usercopy+0x730/0x730 [videodev]
    [  279.840284]  v4l2_ioctl+0xa1/0xb0 [videodev]
    [  279.840295]  do_vfs_ioctl+0x117/0x8a0
    [  279.840303]  ? selinux_file_ioctl+0x211/0x2f0
    [  279.840313]  ? ioctl_preallocate+0x120/0x120
    [  279.840319]  ? selinux_capable+0x20/0x20
    [  279.840332]  ksys_ioctl+0x70/0x80
    [  279.840342]  __x64_sys_ioctl+0x3d/0x50
    [  279.840351]  do_syscall_64+0x6d/0x1c0
    [  279.840361]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  279.840367] RIP: 0033:0x7fdfb46275d7
    [  279.840369] Code: b3 66 90 48 8b 05 b1 48 2d 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 81 48 2d 00 f7 d8 64 89 01 48
    [  279.840474] RSP: 002b:00007ffee1179038 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [  279.840483] RAX: ffffffffffffffda RBX: 00007ffee1179180 RCX: 00007fdfb46275d7
    [  279.840488] RDX: 00007ffee11790c0 RSI: 00000000c02c5625 RDI: 0000000000000003
    [  279.840493] RBP: 0000000000000002 R08: 0000000000000020 R09: 00000000009f0902
    [  279.840497] R10: 0000000000000000 R11: 0000000000000202 R12: 00007ffee117a5a0
    [  279.840501] R13: 00007ffee11790c0 R14: 0000000000000002 R15: 0000000000000000
    
    [  279.840515] The buggy address belongs to the variable:
    [  279.840535]  tvp5150_test_patterns+0x10/0xffffffffffffe360 [tvp5150]
    
    Fixes: c43875f66140 ("[media] tvp5150: replace MEDIA_ENT_F_CONN_TEST by a control")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f1eb8444ba04c530c2e6f024a77e94782a6279f
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Thu Sep 13 23:22:40 2018 -0400

    media: em28xx: use a default format if TRY_FMT fails
    
    commit f823ce2a1202d47110a7ef86b65839f0be8adc38 upstream.
    
    Follow the V4L2 spec, as warned by v4l2-compliance:
    
            warn: v4l2-test-formats.cpp(732): TRY_FMT cannot handle an invalid pixelformat.
            warn: v4l2-test-formats.cpp(733): This may or may not be a problem. For more information see:
    
    warn: v4l2-test-formats.cpp(734): http://www.mail-archive.com/linux-media@vger.kernel.org/msg56550.html
    
    Cc: stable@vger.kernel.org
    Fixes: bddcf63313c6 ("V4L/DVB (9927): em28xx: use a more standard way to specify video formats")
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e6d30de2e44fab869078194a6b1686659579a70
Author: Manjunath Patil <manjunath.b.patil@oracle.com>
Date:   Tue Oct 30 09:49:21 2018 -0700

    xen-blkfront: fix kernel panic with negotiate_mq error path
    
    commit 6cc4a0863c9709c512280c64e698d68443ac8053 upstream.
    
    info->nr_rings isn't adjusted in case of ENOMEM error from
    negotiate_mq(). This leads to kernel panic in error path.
    
    Typical call stack involving panic -
     #8 page_fault at ffffffff8175936f
        [exception RIP: blkif_free_ring+33]
        RIP: ffffffffa0149491  RSP: ffff8804f7673c08  RFLAGS: 00010292
     ...
     #9 blkif_free at ffffffffa0149aaa [xen_blkfront]
     #10 talk_to_blkback at ffffffffa014c8cd [xen_blkfront]
     #11 blkback_changed at ffffffffa014ea8b [xen_blkfront]
     #12 xenbus_otherend_changed at ffffffff81424670
     #13 backend_changed at ffffffff81426dc3
     #14 xenwatch_thread at ffffffff81422f29
     #15 kthread at ffffffff810abe6a
     #16 ret_from_fork at ffffffff81754078
    
    Cc: stable@vger.kernel.org
    Fixes: 7ed8ce1c5fc7 ("xen-blkfront: move negotiate_mq to cover all cases of new VBDs")
    Signed-off-by: Manjunath Patil <manjunath.b.patil@oracle.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 034680fcf1e96977d0e80ff8a6ceb9c1b5326bac
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Nov 8 08:35:06 2018 +0100

    xen: fix xen_qlock_wait()
    
    commit d3132b3860f6cf35ff7609a76bbcdbb814bd027c upstream.
    
    Commit a856531951dc80 ("xen: make xen_qlock_wait() nestable")
    introduced a regression for Xen guests running fully virtualized
    (HVM or PVH mode). The Xen hypervisor wouldn't return from the poll
    hypercall with interrupts disabled in case of an interrupt (for PV
    guests it does).
    
    So instead of disabling interrupts in xen_qlock_wait() use a nesting
    counter to avoid calling xen_clear_irq_pending() in case
    xen_qlock_wait() is nested.
    
    Fixes: a856531951dc80 ("xen: make xen_qlock_wait() nestable")
    Cc: stable@vger.kernel.org
    Reported-by: Sander Eikelenboom <linux@eikelenboom.it>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Tested-by: Sander Eikelenboom <linux@eikelenboom.it>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8305d98c58d238b82c0def1e4395724381c58c9e
Author: He Zhe <zhe.he@windriver.com>
Date:   Fri Aug 17 22:42:28 2018 +0800

    kgdboc: Passing ekgdboc to command line causes panic
    
    commit 1bd54d851f50dea6af30c3e6ff4f3e9aab5558f9 upstream.
    
    kgdboc_option_setup does not check input argument before passing it
    to strlen. The argument would be a NULL pointer if "ekgdboc", without
    its value, is set in command line and thus cause the following panic.
    
    PANIC: early exception 0xe3 IP 10:ffffffff8fbbb620 error 0 cr2 0x0
    [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 4.18-rc8+ #1
    [    0.000000] RIP: 0010:strlen+0x0/0x20
    ...
    [    0.000000] Call Trace
    [    0.000000]  ? kgdboc_option_setup+0x9/0xa0
    [    0.000000]  ? kgdboc_early_init+0x6/0x1b
    [    0.000000]  ? do_early_param+0x4d/0x82
    [    0.000000]  ? parse_args+0x212/0x330
    [    0.000000]  ? rdinit_setup+0x26/0x26
    [    0.000000]  ? parse_early_options+0x20/0x23
    [    0.000000]  ? rdinit_setup+0x26/0x26
    [    0.000000]  ? parse_early_param+0x2d/0x39
    [    0.000000]  ? setup_arch+0x2f7/0xbf4
    [    0.000000]  ? start_kernel+0x5e/0x4c2
    [    0.000000]  ? load_ucode_bsp+0x113/0x12f
    [    0.000000]  ? secondary_startup_64+0xa5/0xb0
    
    This patch adds a check to prevent the panic.
    
    Cc: stable@vger.kernel.org
    Cc: jason.wessel@windriver.com
    Cc: gregkh@linuxfoundation.org
    Cc: jslaby@suse.com
    Signed-off-by: He Zhe <zhe.he@windriver.com>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdff1cf08931439f5807dcf336947c2adaeec37d
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Mon Oct 8 15:08:27 2018 -0400

    media: v4l2-tpg: fix kernel oops when enabling HFLIP and OSD
    
    commit 250854eed5d45a73d81e4137dfd85180af6f2ec3 upstream.
    
    When the OSD is on (i.e. vivid displays text on top of the test pattern), and
    you enable hflip, then the driver crashes.
    
    The cause turned out to be a division of a negative number by an unsigned value.
    You expect that -8 / 2U would be -4, but in reality it is 2147483644 :-(
    
    Fixes: 3e14e7a82c1ef ("vivid-tpg: add hor/vert downsampling support to tpg_gen_text")
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reported-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Cc: <stable@vger.kernel.org>      # for v4.1 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7f6b41ad2aab1453f0ff64b014027209e8ea632
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Wed Oct 3 13:21:07 2018 +0100

    TC: Set DMA masks for devices
    
    commit 3f2aa244ee1a0d17ed5b6c86564d2c1b24d1c96b upstream.
    
    Fix a TURBOchannel support regression with commit 205e1b7f51e4
    ("dma-mapping: warn when there is no coherent_dma_mask") that caused
    coherent DMA allocations to produce a warning such as:
    
    defxx: v1.11 2014/07/01  Lawrence V. Stefani and others
    tc1: DEFTA at MMIO addr = 0x1e900000, IRQ = 20, Hardware addr = 08-00-2b-a3-a3-29
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 1 at ./include/linux/dma-mapping.h:516 dfx_dev_register+0x670/0x678
    Modules linked in:
    CPU: 0 PID: 1 Comm: swapper Not tainted 4.19.0-rc6 #2
    Stack : ffffffff8009ffc0 fffffffffffffec0 0000000000000000 ffffffff80647650
            0000000000000000 0000000000000000 ffffffff806f5f80 ffffffffffffffff
            0000000000000000 0000000000000000 0000000000000001 ffffffff8065d4e8
            98000000031b6300 ffffffff80563478 ffffffff805685b0 ffffffffffffffff
            0000000000000000 ffffffff805d6720 0000000000000204 ffffffff80388df8
            0000000000000000 0000000000000009 ffffffff8053efd0 ffffffff806657d0
            0000000000000000 ffffffff803177f8 0000000000000000 ffffffff806d0000
            9800000003078000 980000000307b9e0 000000001e900000 ffffffff80067940
            0000000000000000 ffffffff805d6720 0000000000000204 ffffffff80388df8
            ffffffff805176c0 ffffffff8004dc78 0000000000000000 ffffffff80067940
            ...
    Call Trace:
    [<ffffffff8004dc78>] show_stack+0xa0/0x130
    [<ffffffff80067940>] __warn+0x128/0x170
    ---[ end trace b1d1e094f67f3bb2 ]---
    
    This is because the TURBOchannel bus driver fails to set the coherent
    DMA mask for devices enumerated.
    
    Set the regular and coherent DMA masks for TURBOchannel devices then,
    observing that the bus protocol supports a 34-bit (16GiB) DMA address
    space, by interpreting the value presented in the address cycle across
    the 32 `ad' lines as a 32-bit word rather than byte address[1].  The
    architectural size of the TURBOchannel DMA address space exceeds the
    maximum amount of RAM any actual TURBOchannel system in existence may
    have, hence both masks are the same.
    
    This removes the warning shown above.
    
    References:
    
    [1] "TURBOchannel Hardware Specification", EK-369AA-OD-007B, Digital
        Equipment Corporation, January 1993, Section "DMA", pp. 1-15 -- 1-17
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/20835/
    Fixes: 205e1b7f51e4 ("dma-mapping: warn when there is no coherent_dma_mask")
    Cc: stable@vger.kernel.org # 4.16+
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34e0ab871c813d9f8939f30198a972d9a476c20c
Author: Will Deacon <will@kernel.org>
Date:   Mon Oct 1 12:42:49 2018 +0100

    iommu/arm-smmu: Ensure that page-table updates are visible before TLBI
    
    commit 7d321bd3542500caf125249f44dc37cb4e738013 upstream.
    
    The IO-pgtable code relies on the driver TLB invalidation callbacks to
    ensure that all page-table updates are visible to the IOMMU page-table
    walker.
    
    In the case that the page-table walker is cache-coherent, we cannot rely
    on an implicit DSB from the DMA-mapping code, so we must ensure that we
    execute a DSB in our tlb_add_flush() callback prior to triggering the
    invalidation.
    
    Cc: <stable@vger.kernel.org>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Fixes: 2df7a25ce4a7 ("iommu/arm-smmu: Clean up DMA API usage")
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d70d2e3c4ab8c29330b91b210514e32bee13ec1e
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Sat Oct 27 01:46:34 2018 +0300

    MIPS: OCTEON: fix out of bounds array access on CN68XX
    
    commit c0fae7e2452b90c31edd2d25eb3baf0c76b400ca upstream.
    
    The maximum number of interfaces is returned by
    cvmx_helper_get_number_of_interfaces(), and the value is used to access
    interface_port_count[]. When CN68XX support was added, we forgot
    to increase the array size. Fix that.
    
    Fixes: 2c8c3f0201333 ("MIPS: Octeon: Support additional interfaces on CN68XX")
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/20949/
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfed53c894d5578031175d11bc56e3031ce0991b
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Oct 19 06:12:50 2018 +0000

    powerpc/msi: Fix compile error on mpc83xx
    
    commit 0f99153def98134403c9149128e59d3e1786cf04 upstream.
    
    mpic_get_primary_version() is not defined when not using MPIC.
    The compile error log like:
    
    arch/powerpc/sysdev/built-in.o: In function `fsl_of_msi_probe':
    fsl_msi.c:(.text+0x150c): undefined reference to `fsl_mpic_primary_get_version'
    
    Signed-off-by: Jia Hongtao <hongtao.jia@freescale.com>
    Signed-off-by: Scott Wood <scottwood@freescale.com>
    Reported-by: Radu Rendec <radu.rendec@gmail.com>
    Fixes: 807d38b73b6 ("powerpc/mpic: Add get_version API both for internal and external use")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37531246704e708a5b3ee4a9498493cc4ff0c4bb
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Wed Oct 17 18:05:08 2018 +0900

    dm zoned: fix various dmz_get_mblock() issues
    
    commit 3d4e738311327bc4ba1d55fbe2f1da3de4a475f9 upstream.
    
    dmz_fetch_mblock() called from dmz_get_mblock() has a race since the
    allocation of the new metadata block descriptor and its insertion in
    the cache rbtree with the READING state is not atomic. Two different
    contexts requesting the same block may end up each adding two different
    descriptors of the same block to the cache.
    
    Another problem for this function is that the BIO for processing the
    block read is allocated after the metadata block descriptor is inserted
    in the cache rbtree. If the BIO allocation fails, the metadata block
    descriptor is freed without first being removed from the rbtree.
    
    Fix the first problem by checking again if the requested block is not in
    the cache right before inserting the newly allocated descriptor,
    atomically under the mblk_lock spinlock. The second problem is fixed by
    simply allocating the BIO before inserting the new block in the cache.
    
    Finally, since dmz_fetch_mblock() also increments a block reference
    counter, rename the function to dmz_get_mblock_slow(). To be symmetric
    and clear, also rename dmz_lookup_mblock() to dmz_get_mblock_fast() and
    increment the block reference counter directly in that function rather
    than in dmz_get_mblock().
    
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 229cbc6123b4b1d2d46956a869e6dbf6905265a4
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Wed Oct 17 18:05:07 2018 +0900

    dm zoned: fix metadata block ref counting
    
    commit 33c2865f8d011a2ca9f67124ddab9dc89382e9f1 upstream.
    
    Since the ref field of struct dmz_mblock is always used with the
    spinlock of struct dmz_metadata locked, there is no need to use an
    atomic_t type. Change the type of the ref field to an unsigne
    integer.
    
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0a4629065e4cc4a79b91d9942afb5565d86b462
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Wed Oct 3 11:43:59 2018 -0500

    dm ioctl: harden copy_params()'s copy_from_user() from malicious users
    
    commit 800a7340ab7dd667edf95e74d8e4f23a17e87076 upstream.
    
    In copy_params(), the struct 'dm_ioctl' is first copied from the user
    space buffer 'user' to 'param_kernel' and the field 'data_size' is
    checked against 'minimum_data_size' (size of 'struct dm_ioctl' payload
    up to its 'data' member).  If the check fails, an error code EINVAL will be
    returned.  Otherwise, param_kernel->data_size is used to do a second copy,
    which copies from the same user-space buffer to 'dmi'.  After the second
    copy, only 'dmi->data_size' is checked against 'param_kernel->data_size'.
    Given that the buffer 'user' resides in the user space, a malicious
    user-space process can race to change the content in the buffer between
    the two copies.  This way, the attacker can inject inconsistent data
    into 'dmi' (versus previously validated 'param_kernel').
    
    Fix redundant copying of 'minimum_data_size' from user-space buffer by
    using the first copy stored in 'param_kernel'.  Also remove the
    'data_size' check after the second copy because it is now unnecessary.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a45ce0e1b9cd86443406462375c4004f55f7a881
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Fri Sep 28 20:41:48 2018 +0300

    lockd: fix access beyond unterminated strings in prints
    
    commit 93f38b6fae0ea8987e22d9e6c38f8dfdccd867ee upstream.
    
    printk format used %*s instead of %.*s, so hostname_len does not limit
    the number of bytes accessed from hostname.
    
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eecd97e13c1553dfff1c159513b6ab041f53a70a
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Oct 9 15:54:15 2018 -0400

    nfsd: Fix an Oops in free_session()
    
    commit bb6ad5572c0022e17e846b382d7413cdcf8055be upstream.
    
    In call_xpt_users(), we delete the entry from the list, but we
    do not reinitialise it. This triggers the list poisoning when
    we later call unregister_xpt_user() in nfsd4_del_conns().
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eecbf2c22b3f0dca05a199a8992ac2158266dfbd
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Thu Oct 18 15:01:48 2018 -0400

    nfs: Fix a missed page unlock after pg_doio()
    
    commit fdbd1a2e4a71adcb1ae219fcfd964930d77a7f84 upstream.
    
    We must check pg_error and call error_cleanup after any call to pg_doio.
    Currently, we are skipping the unlock of a page if we encounter an error in
    nfs_pageio_complete() before handing off the work to the RPC layer.
    
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1796b3898e51d4f435f17b8ff54458f5fd541d46
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Sep 18 10:07:44 2018 -0400

    NFSv4.1: Fix the r/wsize checking
    
    commit 943cff67b842839f4f35364ba2db5c2d3f025d94 upstream.
    
    The intention of nfs4_session_set_rwsize() was to cap the r/wsize to the
    buffer sizes negotiated by the CREATE_SESSION. The initial code had a
    bug whereby we would not check the values negotiated by nfs_probe_fsinfo()
    (the assumption being that CREATE_SESSION will always negotiate buffer values
    that are sane w.r.t. the server's preferred r/wsizes) but would only check
    values set by the user in the 'mount' command.
    
    The code was changed in 4.11 to _always_ set the r/wsize, meaning that we
    now never use the server preferred r/wsizes. This is the regression that
    this patch fixes.
    Also rename the function to nfs4_session_limit_rwsize() in order to avoid
    future confusion.
    
    Fixes: 033853325fe3 (NFSv4.1 respect server's max size in CREATE_SESSION")
    Cc: stable@vger.kernel.org # v4.11+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6b8a4d76ae25fbb26b9e72f03007406329bd021
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Oct 18 15:15:05 2018 +0200

    genirq: Fix race on spurious interrupt detection
    
    commit 746a923b863a1065ef77324e1e43f19b1a3eab5c upstream.
    
    Commit 1e77d0a1ed74 ("genirq: Sanitize spurious interrupt detection of
    threaded irqs") made detection of spurious interrupts work for threaded
    handlers by:
    
    a) incrementing a counter every time the thread returns IRQ_HANDLED, and
    b) checking whether that counter has increased every time the thread is
       woken.
    
    However for oneshot interrupts, the commit unmasks the interrupt before
    incrementing the counter.  If another interrupt occurs right after
    unmasking but before the counter is incremented, that interrupt is
    incorrectly considered spurious:
    
    time
     |  irq_thread()
     |    irq_thread_fn()
     |      action->thread_fn()
     |      irq_finalize_oneshot()
     |        unmask_threaded_irq()            /* interrupt is unmasked */
     |
     |                  /* interrupt fires, incorrectly deemed spurious */
     |
     |    atomic_inc(&desc->threads_handled); /* counter is incremented */
     v
    
    This is observed with a hi3110 CAN controller receiving data at high volume
    (from a separate machine sending with "cangen -g 0 -i -x"): The controller
    signals a huge number of interrupts (hundreds of millions per day) and
    every second there are about a dozen which are deemed spurious.
    
    In theory with high CPU load and the presence of higher priority tasks, the
    number of incorrectly detected spurious interrupts might increase beyond
    the 99,900 threshold and cause disablement of the interrupt.
    
    In practice it just increments the spurious interrupt count. But that can
    cause people to waste time investigating it over and over.
    
    Fix it by moving the accounting before the invocation of
    irq_finalize_oneshot().
    
    [ tglx: Folded change log update ]
    
    Fixes: 1e77d0a1ed74 ("genirq: Sanitize spurious interrupt detection of threaded irqs")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Mathias Duckeck <m.duckeck@kunbus.de>
    Cc: Akshay Bhat <akshay.bhat@timesys.com>
    Cc: Casey Fitzpatrick <casey.fitzpatrick@timesys.com>
    Cc: stable@vger.kernel.org # v3.16+
    Link: https://lkml.kernel.org/r/1dfd8bbd16163940648045495e3e9698e63b50ad.1539867047.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc4dcea8b0f76c01dd6b64f1f84032c768896bba
Author: He Zhe <zhe.he@windriver.com>
Date:   Sun Sep 30 00:45:50 2018 +0800

    printk: Fix panic caused by passing log_buf_len to command line
    
    commit 277fcdb2cfee38ccdbe07e705dbd4896ba0c9930 upstream.
    
    log_buf_len_setup does not check input argument before passing it to
    simple_strtoull. The argument would be a NULL pointer if "log_buf_len",
    without its value, is set in command line and thus causes the following
    panic.
    
    PANIC: early exception 0xe3 IP 10:ffffffffaaeacd0d error 0 cr2 0x0
    [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 4.19.0-rc4-yocto-standard+ #1
    [    0.000000] RIP: 0010:_parse_integer_fixup_radix+0xd/0x70
    ...
    [    0.000000] Call Trace:
    [    0.000000]  simple_strtoull+0x29/0x70
    [    0.000000]  memparse+0x26/0x90
    [    0.000000]  log_buf_len_setup+0x17/0x22
    [    0.000000]  do_early_param+0x57/0x8e
    [    0.000000]  parse_args+0x208/0x320
    [    0.000000]  ? rdinit_setup+0x30/0x30
    [    0.000000]  parse_early_options+0x29/0x2d
    [    0.000000]  ? rdinit_setup+0x30/0x30
    [    0.000000]  parse_early_param+0x36/0x4d
    [    0.000000]  setup_arch+0x336/0x99e
    [    0.000000]  start_kernel+0x6f/0x4ee
    [    0.000000]  x86_64_start_reservations+0x24/0x26
    [    0.000000]  x86_64_start_kernel+0x6f/0x72
    [    0.000000]  secondary_startup_64+0xa4/0xb0
    
    This patch adds a check to prevent the panic.
    
    Link: http://lkml.kernel.org/r/1538239553-81805-1-git-send-email-zhe.he@windriver.com
    Cc: stable@vger.kernel.org
    Cc: rostedt@goodmis.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: He Zhe <zhe.he@windriver.com>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e629461b6b2d1a115779281411b49640cd9a8db8
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Oct 28 13:13:23 2018 -0500

    smb3: on kerberos mount if server doesn't specify auth type use krb5
    
    commit 926674de6705f0f1dbf29a62fd758d0977f535d6 upstream.
    
    Some servers (e.g. Azure) do not include a spnego blob in the SMB3
    negotiate protocol response, so on kerberos mounts ("sec=krb5")
    we can fail, as we expected the server to list its supported
    auth types (OIDs in the spnego blob in the negprot response).
    Change this so that on krb5 mounts we default to trying krb5 if the
    server doesn't list its supported protocol mechanisms.
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 122f2bd8d3e0998561f0c4c51bf242c0f6267861
Author: Steve French <stfrench@microsoft.com>
Date:   Fri Oct 19 00:45:21 2018 -0500

    smb3: do not attempt cifs operation in smb3 query info error path
    
    commit 1e77a8c204c9d1b655c61751b8ad0fde22421dbb upstream.
    
    If backupuid mount option is sent, we can incorrectly retry
    (on access denied on query info) with a cifs (FindFirst) operation
    on an smb3 mount which causes the server to force the session close.
    
    We set backup intent on open so no need for this fallback.
    
    See kernel bugzilla 201435
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54341b9fa4cf5022170302e8f9ac6026546e24f4
Author: Steve French <stfrench@microsoft.com>
Date:   Sat Sep 15 23:04:41 2018 -0500

    smb3: allow stats which track session and share reconnects to be reset
    
    commit 2c887635cd6ab3af619dc2be94e5bf8f2e172b78 upstream.
    
    Currently, "echo 0 > /proc/fs/cifs/Stats" resets all of the stats
    except the session and share reconnect counts.  Fix it to
    reset those as well.
    
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6838bb61b194aa17981ee242e331bd65b41661a1
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Sat Sep 22 21:20:54 2018 +0200

    w1: omap-hdq: fix missing bus unregister at removal
    
    commit a007734618fee1bf35556c04fa498d41d42c7301 upstream.
    
    The bus master was not removed after unloading the module
    or unbinding the driver. That lead to oopses like this
    
    [  127.842987] Unable to handle kernel paging request at virtual address bf01d04c
    [  127.850646] pgd = 70e3cd9a
    [  127.853698] [bf01d04c] *pgd=8f908811, *pte=00000000, *ppte=00000000
    [  127.860412] Internal error: Oops: 80000007 [#1] PREEMPT SMP ARM
    [  127.866668] Modules linked in: bq27xxx_battery overlay [last unloaded: omap_hdq]
    [  127.874542] CPU: 0 PID: 1022 Comm: w1_bus_master1 Not tainted 4.19.0-rc4-00001-g2d51da718324 #12
    [  127.883819] Hardware name: Generic OMAP36xx (Flattened Device Tree)
    [  127.890441] PC is at 0xbf01d04c
    [  127.893798] LR is at w1_search_process_cb+0x4c/0xfc
    [  127.898956] pc : [<bf01d04c>]    lr : [<c05f9580>]    psr: a0070013
    [  127.905609] sp : cf885f48  ip : bf01d04c  fp : ddf1e11c
    [  127.911132] r10: cf8fe040  r9 : c05f8d00  r8 : cf8fe040
    [  127.916656] r7 : 000000f0  r6 : cf8fe02c  r5 : cf8fe000  r4 : cf8fe01c
    [  127.923553] r3 : c05f8d00  r2 : 000000f0  r1 : cf8fe000  r0 : dde1ef10
    [  127.930450] Flags: NzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    [  127.938018] Control: 10c5387d  Table: 8f8f0019  DAC: 00000051
    [  127.944091] Process w1_bus_master1 (pid: 1022, stack limit = 0x9135699f)
    [  127.951171] Stack: (0xcf885f48 to 0xcf886000)
    [  127.955810] 5f40:                   cf8fe000 00000000 cf884000 cf8fe090 000003e8 c05f8d00
    [  127.964477] 5f60: dde5fc34 c05f9700 ddf1e100 ddf1e540 cf884000 cf8fe000 c05f9694 00000000
    [  127.973114] 5f80: dde5fc34 c01499a4 00000000 ddf1e540 c0149874 00000000 00000000 00000000
    [  127.981781] 5fa0: 00000000 00000000 00000000 c01010e8 00000000 00000000 00000000 00000000
    [  127.990447] 5fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [  127.999114] 5fe0: 00000000 00000000 00000000 00000000 00000013 00000000 00000000 00000000
    [  128.007781] [<c05f9580>] (w1_search_process_cb) from [<c05f9700>] (w1_process+0x6c/0x118)
    [  128.016479] [<c05f9700>] (w1_process) from [<c01499a4>] (kthread+0x130/0x148)
    [  128.024047] [<c01499a4>] (kthread) from [<c01010e8>] (ret_from_fork+0x14/0x2c)
    [  128.031677] Exception stack(0xcf885fb0 to 0xcf885ff8)
    [  128.037017] 5fa0:                                     00000000 00000000 00000000 00000000
    [  128.045684] 5fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [  128.054351] 5fe0: 00000000 00000000 00000000 00000000 00000013 00000000
    [  128.061340] Code: bad PC value
    [  128.064697] ---[ end trace af066e33c0e14119 ]---
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28a1aaeda80f815bccb7c0dada9a0cbe86889e6b
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Mon Sep 24 10:51:44 2018 +0300

    iio: adc: at91: fix wrong channel number in triggered buffer mode
    
    commit aea835f2dc8a682942b859179c49ad1841a6c8b9 upstream.
    
    When channels are registered, the hardware channel number is not the
    actual iio channel number.
    This is because the driver is probed with a certain number of accessible
    channels. Some pins are routed and some not, depending on the description of
    the board in the DT.
    Because of that, channels 0,1,2,3 can correspond to hardware channels
    2,3,4,5 for example.
    In the buffered triggered case, we need to do the translation accordingly.
    Fixed the channel number to stop reading the wrong channel.
    
    Fixes: 0e589d5fb ("ARM: AT91: IIO: Add AT91 ADC driver.")
    Cc: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4ecff9bc4daf9b0d7d77ae8211ada97ac732079
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Mon Sep 24 10:51:43 2018 +0300

    iio: adc: at91: fix acking DRDY irq on simple conversions
    
    commit bc1b45326223e7e890053cf6266357adfa61942d upstream.
    
    When doing simple conversions, the driver did not acknowledge the DRDY irq.
    If this irq status is not acked, it will be left pending, and as soon as a
    trigger is enabled, the irq handler will be called, it doesn't know why
    this status has occurred because no channel is pending, and then it will go
    int a irq loop and board will hang.
    To avoid this situation, read the LCDR after a raw conversion is done.
    
    Fixes: 0e589d5fb ("ARM: AT91: IIO: Add AT91 ADC driver.")
    Cc: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39b6d86b316e5d3d338d661ab6468beef1b5bb91
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Sep 22 00:58:02 2018 +0300

    iio: adc: imx25-gcq: Fix leak of device_node in mx25_gcq_setup_cfgs()
    
    commit d3fa21c73c391975488818b085b894c2980ea052 upstream.
    
    Leaving for_each_child_of_node loop we should release child device node,
    if it is not stored for future use.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    JC: I'm not sending this as a quick fix as it's been wrong for years,
    but good to pick up for stable after the merge window.
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Fixes: 6df2e98c3ea56 ("iio: adc: Add imx25-gcq ADC driver")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b38d82b0d278d5725e02e470f3cdd46423ba7b1
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Fri Sep 28 11:23:40 2018 +0200

    iio: ad5064: Fix regulator handling
    
    commit 8911a43bc198877fad9f4b0246a866b26bb547ab upstream.
    
    The correct way to handle errors returned by regualtor_get() and friends is
    to propagate the error since that means that an regulator was specified,
    but something went wrong when requesting it.
    
    For handling optional regulators, e.g. when the device has an internal
    vref, regulator_get_optional() should be used to avoid getting the dummy
    regulator that the regulator core otherwise provides.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6ea9f3055378e7e520264025b6cc63c88615577
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Oct 30 15:07:32 2018 -0700

    kbuild: fix kernel/bounds.c 'W=1' warning
    
    commit 6a32c2469c3fbfee8f25bcd20af647326650a6cf upstream.
    
    Building any configuration with 'make W=1' produces a warning:
    
    kernel/bounds.c:16:6: warning: no previous prototype for 'foo' [-Wmissing-prototypes]
    
    When also passing -Werror, this prevents us from building any other files.
    Nobody ever calls the function, but we can't make it 'static' either
    since we want the compiler output.
    
    Calling it 'main' instead however avoids the warning, because gcc
    does not insist on having a declaration for main.
    
    Link: http://lkml.kernel.org/r/20181005083313.2088252-1-arnd@arndb.de
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reported-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Cc: David Laight <David.Laight@ACULAB.COM>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1df765432518a30b1bcf56d1d03bdd5a1821dee
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 17 17:42:10 2018 +0100

    KVM: arm64: Fix caching of host MDCR_EL2 value
    
    commit da5a3ce66b8bb51b0ea8a89f42aac153903f90fb upstream.
    
    At boot time, KVM stashes the host MDCR_EL2 value, but only does this
    when the kernel is not running in hyp mode (i.e. is non-VHE). In these
    cases, the stashed value of MDCR_EL2.HPMN happens to be zero, which can
    lead to CONSTRAINED UNPREDICTABLE behaviour.
    
    Since we use this value to derive the MDCR_EL2 value when switching
    to/from a guest, after a guest have been run, the performance counters
    do not behave as expected. This has been observed to result in accesses
    via PMXEVTYPER_EL0 and PMXEVCNTR_EL0 not affecting the relevant
    counters, resulting in events not being counted. In these cases, only
    the fixed-purpose cycle counter appears to work as expected.
    
    Fix this by always stashing the host MDCR_EL2 value, regardless of VHE.
    
    Cc: Christopher Dall <christoffer.dall@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: stable@vger.kernel.org
    Fixes: 1e947bad0b63b351 ("arm64: KVM: Skip HYP setup when already running in HYP")
    Tested-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d3cc761c5d7cbcef96758bac4e4cee53d2136c8
Author: Ralph Campbell <rcampbell@nvidia.com>
Date:   Tue Oct 30 15:04:11 2018 -0700

    mm/rmap: map_pte() was not handling private ZONE_DEVICE page properly
    
    commit aab8d0520e6e7c2a61f71195e6ce7007a4843afb upstream.
    
    Private ZONE_DEVICE pages use a special pte entry and thus are not
    present.  Properly handle this case in map_pte(), it is already handled in
    check_pte(), the map_pte() part was lost in some rebase most probably.
    
    Without this patch the slow migration path can not migrate back to any
    private ZONE_DEVICE memory to regular memory.  This was found after stress
    testing migration back to system memory.  This ultimatly can lead to the
    CPU constantly page fault looping on the special swap entry.
    
    Link: http://lkml.kernel.org/r/20181019160442.18723-3-jglisse@redhat.com
    Signed-off-by: Ralph Campbell <rcampbell@nvidia.com>
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Balbir Singh <bsingharora@gmail.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d197121a077a39f6c33729ae5d4bef2d1a9c1596
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Fri Oct 26 15:10:58 2018 -0700

    hugetlbfs: dirty pages as they are added to pagecache
    
    commit 22146c3ce98962436e401f7b7016a6f664c9ffb5 upstream.
    
    Some test systems were experiencing negative huge page reserve counts and
    incorrect file block counts.  This was traced to /proc/sys/vm/drop_caches
    removing clean pages from hugetlbfs file pagecaches.  When non-hugetlbfs
    explicit code removes the pages, the appropriate accounting is not
    performed.
    
    This can be recreated as follows:
     fallocate -l 2M /dev/hugepages/foo
     echo 1 > /proc/sys/vm/drop_caches
     fallocate -l 2M /dev/hugepages/foo
     grep -i huge /proc/meminfo
       AnonHugePages:         0 kB
       ShmemHugePages:        0 kB
       HugePages_Total:    2048
       HugePages_Free:     2047
       HugePages_Rsvd:    18446744073709551615
       HugePages_Surp:        0
       Hugepagesize:       2048 kB
       Hugetlb:         4194304 kB
     ls -lsh /dev/hugepages/foo
       4.0M -rw-r--r--. 1 root root 2.0M Oct 17 20:05 /dev/hugepages/foo
    
    To address this issue, dirty pages as they are added to pagecache.  This
    can easily be reproduced with fallocate as shown above.  Read faulted
    pages will eventually end up being marked dirty.  But there is a window
    where they are clean and could be impacted by code such as drop_caches.
    So, just dirty them all as they are added to the pagecache.
    
    Link: http://lkml.kernel.org/r/b5be45b8-5afe-56cd-9482-28384699a049@oracle.com
    Fixes: 6bda666a03f0 ("hugepages: fold find_or_alloc_pages into huge_no_page()")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Mihcla Hocko <mhocko@suse.com>
    Reviewed-by: Khalid Aziz <khalid.aziz@oracle.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: "Aneesh Kumar K . V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c6fda12ff1d187590083a5615cee5501c60142c
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Sep 7 14:33:24 2018 -0700

    ima: fix showing large 'violations' or 'runtime_measurements_count'
    
    commit 1e4c8dafbb6bf72fb5eca035b861e39c5896c2b7 upstream.
    
    The 12 character temporary buffer is not necessarily long enough to hold
    a 'long' value.  Increase it.
    
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c5e357fa89d64f414014046ec14979f72de0261
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Fri Oct 26 15:02:16 2018 -0700

    mm: /proc/pid/smaps_rollup: fix NULL pointer deref in smaps_pte_range()
    
    commit fa76da461bb0be13c8339d984dcf179151167c8f upstream.
    
    Leonardo reports an apparent regression in 4.19-rc7:
    
     BUG: unable to handle kernel NULL pointer dereference at 00000000000000f0
     PGD 0 P4D 0
     Oops: 0000 [#1] PREEMPT SMP PTI
     CPU: 3 PID: 6032 Comm: python Not tainted 4.19.0-041900rc7-lowlatency #201810071631
     Hardware name: LENOVO 80UG/Toronto 4A2, BIOS 0XCN45WW 08/09/2018
     RIP: 0010:smaps_pte_range+0x32d/0x540
     Code: 80 00 00 00 00 74 a9 48 89 de 41 f6 40 52 40 0f 85 04 02 00 00 49 2b 30 48 c1 ee 0c 49 03 b0 98 00 00 00 49 8b 80 a0 00 00 00 <48> 8b b8 f0 00 00 00 e8 b7 ef ec ff 48 85 c0 0f 84 71 ff ff ff a8
     RSP: 0018:ffffb0cbc484fb88 EFLAGS: 00010202
     RAX: 0000000000000000 RBX: 0000560ddb9e9000 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: 0000000560ddb9e9 RDI: 0000000000000001
     RBP: ffffb0cbc484fbc0 R08: ffff94a5a227a578 R09: ffff94a5a227a578
     R10: 0000000000000000 R11: 0000560ddbbe7000 R12: ffffe903098ba728
     R13: ffffb0cbc484fc78 R14: ffffb0cbc484fcf8 R15: ffff94a5a2e9cf48
     FS:  00007f6dfb683740(0000) GS:ffff94a5aaf80000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00000000000000f0 CR3: 000000011c118001 CR4: 00000000003606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      __walk_page_range+0x3c2/0x6f0
      walk_page_vma+0x42/0x60
      smap_gather_stats+0x79/0xe0
      ? gather_pte_stats+0x320/0x320
      ? gather_hugetlb_stats+0x70/0x70
      show_smaps_rollup+0xcd/0x1c0
      seq_read+0x157/0x400
      __vfs_read+0x3a/0x180
      ? security_file_permission+0x93/0xc0
      ? security_file_permission+0x93/0xc0
      vfs_read+0x8f/0x140
      ksys_read+0x55/0xc0
      __x64_sys_read+0x1a/0x20
      do_syscall_64+0x5a/0x110
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Decoded code matched to local compilation+disassembly points to
    smaps_pte_entry():
    
            } else if (unlikely(IS_ENABLED(CONFIG_SHMEM) && mss->check_shmem_swap
                                                            && pte_none(*pte))) {
                    page = find_get_entry(vma->vm_file->f_mapping,
                                                    linear_page_index(vma, addr));
    
    Here, vma->vm_file is NULL.  mss->check_shmem_swap should be false in that
    case, however for smaps_rollup, smap_gather_stats() can set the flag true
    for one vma and leave it true for subsequent vma's where it should be
    false.
    
    To fix, reset the check_shmem_swap flag to false.  There's also related
    bug which sets mss->swap to shmem_swapped, which in the context of
    smaps_rollup overwrites any value accumulated from previous vma's.  Fix
    that as well.
    
    Note that the report suggests a regression between 4.17.19 and 4.19-rc7,
    which makes the 4.19 series ending with commit 258f669e7e88 ("mm:
    /proc/pid/smaps_rollup: convert to single value seq_file") suspicious.
    But the mss was reused for rollup since 493b0e9d945f ("mm: add
    /proc/pid/smaps_rollup") so let's play it safe with the stable backport.
    
    Link: http://lkml.kernel.org/r/555fbd1f-4ac9-0b58-dcd4-5dc4380ff7ca@suse.cz
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=201377
    Fixes: 493b0e9d945f ("mm: add /proc/pid/smaps_rollup")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Reported-by: Leonardo Soares Müller <leozinho29_eu@hotmail.com>
    Tested-by: Leonardo Soares Müller <leozinho29_eu@hotmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Daniel Colascione <dancol@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c8496c52a98039b6d8ca46db2f4478779b957fe
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Wed Sep 12 16:20:48 2018 +0300

    crypto: tcrypt - fix ghash-generic speed test
    
    commit 331351f89c36bf7d03561a28b6f64fa10a9f6f3a upstream.
    
    ghash is a keyed hash algorithm, thus setkey needs to be called.
    Otherwise the following error occurs:
    $ modprobe tcrypt mode=318 sec=1
    testing speed of async ghash-generic (ghash-generic)
    tcrypt: test  0 (   16 byte blocks,   16 bytes per update,   1 updates):
    tcrypt: hashing failed ret=-126
    
    Cc: <stable@vger.kernel.org> # 4.6+
    Fixes: 0660511c0bee ("crypto: tcrypt - Use ahash")
    Tested-by: Franck Lenormand <franck.lenormand@nxp.com>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e86f4842f84a4494227aa4d1ab76acb68d86fb1a
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Thu Sep 13 10:51:31 2018 +0200

    crypto: lrw - Fix out-of bounds access on counter overflow
    
    commit fbe1a850b3b1522e9fc22319ccbbcd2ab05328d2 upstream.
    
    When the LRW block counter overflows, the current implementation returns
    128 as the index to the precomputed multiplication table, which has 128
    entries. This patch fixes it to return the correct value (127).
    
    Fixes: 64470f1b8510 ("[CRYPTO] lrw: Liskov Rivest Wagner, a tweakable narrow block cipher mode")
    Cc: <stable@vger.kernel.org> # 2.6.20+
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51f62e827191f4ba02c2a001b9e6f25605bfa649
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Oct 10 20:29:44 2018 -0500

    signal: Guard against negative signal numbers in copy_siginfo_from_user32
    
    commit a36700589b85443e28170be59fa11c8a104130a5 upstream.
    
    While fixing an out of bounds array access in known_siginfo_layout
    reported by the kernel test robot it became apparent that the same bug
    exists in siginfo_layout and affects copy_siginfo_from_user32.
    
    The straight forward fix that makes guards against making this mistake
    in the future and should keep the code size small is to just take an
    unsigned signal number instead of a signed signal number, as I did to
    fix known_siginfo_layout.
    
    Cc: stable@vger.kernel.org
    Fixes: cc731525f26a ("signal: Remove kernel interal si_code magic")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb7f3c513d1c898abdc66809406d62ce9ec7c50d
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Thu Sep 13 11:28:01 2018 +0200

    signal/GenWQE: Fix sending of SIGKILL
    
    commit 0ab93e9c99f8208c0a1a7b7170c827936268c996 upstream.
    
    The genweq_add_file and genwqe_del_file by caching current without
    using reference counting embed the assumption that a file descriptor
    will never be passed from one process to another.  It even embeds the
    assumption that the the thread that opened the file will be in
    existence when the process terminates.   Neither of which are
    guaranteed to be true.
    
    Therefore replace caching the task_struct of the opener with
    pid of the openers thread group id.  All the knowledge of the
    opener is used for is as the target of SIGKILL and a SIGKILL
    will kill the entire process group.
    
    Rename genwqe_force_sig to genwqe_terminate, remove it's unncessary
    signal argument, update it's ownly caller, and use kill_pid
    instead of force_sig.
    
    The work force_sig does in changing signal handling state is not
    relevant to SIGKILL sent as SEND_SIG_PRIV.  The exact same processess
    will be killed just with less work, and less confusion.  The work done
    by force_sig is really only needed for handling syncrhonous
    exceptions.
    
    It will still be possible to cause genwqe_device_remove to wait
    8 seconds by passing a file descriptor to another process but
    the possible user after free is fixed.
    
    Fixes: eaf4722d4645 ("GenWQE Character device and DDCB queue")
    Cc: stable@vger.kernel.org
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Frank Haverkamp <haver@linux.vnet.ibm.com>
    Cc: Joerg-Stephan Vogt <jsvogt@de.ibm.com>
    Cc: Michael Jung <mijung@gmx.net>
    Cc: Michael Ruettger <michael@ibmra.de>
    Cc: Kleber Sacilotto de Souza <klebers@linux.vnet.ibm.com>
    Cc: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Cc: Eberhard S. Amann <esa@linux.vnet.ibm.com>
    Cc: Gabriel Krisman Bertazi <krisman@linux.vnet.ibm.com>
    Cc: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 635c8c9ce51bcee0902c5a4d2996163e30213320
Author: Keith Busch <keith.busch@intel.com>
Date:   Tue May 8 10:00:22 2018 -0600

    PCI: vmd: White list for fast interrupt handlers
    
    commit a7f58b9ecfd3c0f63703ec10f4a592cc38dbd1b8 upstream.
    
    Devices with slow interrupt handlers are significantly harming
    performance when their interrupt vector is shared with a fast device.
    
    Create a class code white list for devices with known fast interrupt
    handlers and let all other devices share a single vector so that they
    don't interfere with performance.
    
    At the moment, only the NVM Express class code is on the list, but more
    may be added if VMD users desire to use other low-latency devices in
    these domains.
    
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    [lorenzo.pieralisi@arm.com: changelog]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Jon Derrick: <jonathan.derrick@intel.com>
    Cc: "Heitke, Kenneth" <kenneth.heitke@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b216de5804f6dac761bbf6667bc707ea1aeb771
Author: Bin Meng <bmeng.cn@gmail.com>
Date:   Wed Sep 26 08:14:01 2018 -0700

    PCI: Add Device IDs for Intel GPU "spurious interrupt" quirk
    
    commit d0c9606b31a21028fb5b753c8ad79626292accfd upstream.
    
    Add Device IDs to the Intel GPU "spurious interrupt" quirk table.
    
    For these devices, unplugging the VGA cable and plugging it in again causes
    spurious interrupts from the IGD.  Linux eventually disables the interrupt,
    but of course that disables any other devices sharing the interrupt.
    
    The theory is that this is a VGA BIOS defect: it should have disabled the
    IGD interrupt but failed to do so.
    
    See f67fd55fa96f ("PCI: Add quirk for still enabled interrupts on Intel
    Sandy Bridge GPUs") and 7c82126a94e6 ("PCI: Add new ID for Intel GPU
    "spurious interrupt" quirk") for some history.
    
    [bhelgaas: See link below for discussion about how to fix this more
    generically instead of adding device IDs for every new Intel GPU.  I hope
    this is the last patch to add device IDs.]
    
    Link: https://lore.kernel.org/linux-pci/1537974841-29928-1-git-send-email-bmeng.cn@gmail.com
    Signed-off-by: Bin Meng <bmeng.cn@gmail.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org      # v3.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19e14e8816d0a079671eb917606a4b586321ec12
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Sep 4 12:34:18 2018 -0500

    PCI/ASPM: Fix link_state teardown on device removal
    
    commit aeae4f3e5c38d47bdaef50446dc0ec857307df68 upstream.
    
    Upon removal of the last device on a bus, the link_state of the bridge
    leading to that bus is sought to be torn down by having pci_stop_dev()
    call pcie_aspm_exit_link_state().
    
    When ASPM was originally introduced by commit 7d715a6c1ae5 ("PCI: add
    PCI Express ASPM support"), it determined whether the device being
    removed is the last one by calling list_empty() on the bridge's
    subordinate devices list.  That didn't work because the device is only
    removed from the list slightly later in pci_destroy_dev().
    
    Commit 3419c75e15f8 ("PCI: properly clean up ASPM link state on device
    remove") attempted to fix it by calling list_is_last(), but that's not
    correct either because it checks whether the device is at the *end* of
    the list, not whether it's the last one *left* in the list.  If the user
    removes the device which happens to be at the end of the list via sysfs
    but other devices are preceding the device in the list, the link_state
    is torn down prematurely.
    
    The real fix is to move the invocation of pcie_aspm_exit_link_state() to
    pci_destroy_dev() and reinstate the call to list_empty().  Remove a
    duplicate check for dev->bus->self because pcie_aspm_exit_link_state()
    already contains an identical check.
    
    Fixes: 7d715a6c1ae5 ("PCI: add PCI Express ASPM support")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Shaohua Li <shaohua.li@intel.com>
    Cc: stable@vger.kernel.org # v2.6.26
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 255fb2e03694901f8178d9766ab3c043be6ed33b
Author: Vignesh R <vigneshr@ti.com>
Date:   Tue Sep 25 10:51:51 2018 +0530

    ARM: dts: dra7: Fix up unaligned access setting for PCIe EP
    
    commit 6d0af44a82be87c13f2320821e9fbb8b8cf5a56f upstream.
    
    Bit positions of PCIE_SS1_AXI2OCP_LEGACY_MODE_ENABLE and
    PCIE_SS1_AXI2OCP_LEGACY_MODE_ENABLE in CTRL_CORE_SMA_SW_7 are
    incorrectly documented in the TRM. In fact, the bit positions are
    swapped. Update the DT bindings for PCIe EP to reflect the same.
    
    Fixes: d23f3839fe97 ("ARM: dts: DRA7: Add pcie1 dt node for EP mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 074df512d4d02eaf793ffddf46ab45cdaba374e1
Author: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
Date:   Tue Oct 9 10:20:25 2018 -0700

    EDAC, skx_edac: Fix logical channel intermediate decoding
    
    commit 8f18973877204dc8ca4ce1004a5d28683b9a7086 upstream.
    
    The code "lchan = (lchan << 1) | ~lchan" for logical channel
    intermediate decoding is wrong. The wrong intermediate decoding
    result is {0xffffffff, 0xfffffffe}.
    
    Fix it by replacing '~' with '!'. The correct intermediate
    decoding result is {0x1, 0x2}.
    
    Signed-off-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    CC: Aristeu Rozanski <aris@redhat.com>
    CC: Mauro Carvalho Chehab <mchehab@kernel.org>
    CC: linux-edac <linux-edac@vger.kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20181009172025.18594-1-tony.luck@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65ce0542891852aa680a5478e091ea2f9adec7d8
Author: Tony Luck <tony.luck@intel.com>
Date:   Fri Sep 28 14:39:34 2018 -0700

    EDAC, {i7core,sb,skx}_edac: Fix uncorrected error counting
    
    commit 432de7fd7630c84ad24f1c2acd1e3bb4ce3741ca upstream.
    
    The count of errors is picked up from bits 52:38 of the machine check
    bank status register. But this is the count of *corrected* errors. If an
    uncorrected error is being logged, the h/w sets this field to 0. Which
    means that when edac_mc_handle_error() is called, the EDAC core will
    carefully add zero to the appropriate uncorrected error counts.
    
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    [ Massage commit message. ]
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Cc: Aristeu Rozanski <aris@redhat.com>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20180928213934.19890-1-tony.luck@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52314c7f81d8a3af54c40b213bfa3d9b060038e1
Author: Michael Jin <mikhail.jin@gmail.com>
Date:   Thu Aug 16 15:28:40 2018 -0400

    EDAC, amd64: Add Family 17h, models 10h-2fh support
    
    commit 8960de4a5ca7980ed1e19e7ca5a774d3b7a55c38 upstream.
    
    Add new device IDs for family 17h, models 10h-2fh.
    
    This is required by amd64_edac_mod in order to properly detect PCI
    device functions 0 and 6.
    
    Signed-off-by: Michael Jin <mikhail.jin@gmail.com>
    Reviewed-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20180816192840.31166-1-mikhail.jin@gmail.com
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 872f9d86659a84fca92c4908c3c0fbaebf9d007c
Author: Breno Leitao <leitao@debian.org>
Date:   Fri Oct 19 17:01:33 2018 -0300

    HID: hiddev: fix potential Spectre v1
    
    commit f11274396a538b31bc010f782e05c2ce3f804c13 upstream.
    
    uref->usage_index can be indirectly controlled by userspace, hence leading
    to a potential exploitation of the Spectre variant 1 vulnerability.
    
    This field is used as an array index by the hiddev_ioctl_usage() function,
    when 'cmd' is either HIDIOCGCOLLECTIONINDEX, HIDIOCGUSAGES or
    HIDIOCSUSAGES.
    
    For cmd == HIDIOCGCOLLECTIONINDEX case, uref->usage_index is compared to
    field->maxusage and then used as an index to dereference field->usage
    array. The same thing happens to the cmd == HIDIOC{G,S}USAGES cases, where
    uref->usage_index is checked against an array maximum value and then it is
    used as an index in an array.
    
    This is a summary of the HIDIOCGCOLLECTIONINDEX case, which matches the
    traditional Spectre V1 first load:
    
            copy_from_user(uref, user_arg, sizeof(*uref))
            if (uref->usage_index >= field->maxusage)
                    goto inval;
            i = field->usage[uref->usage_index].collection_index;
            return i;
    
    This patch fixes this by sanitizing field uref->usage_index before using it
    to index field->usage (HIDIOCGCOLLECTIONINDEX) or field->value in
    HIDIOC{G,S}USAGES arrays, thus, avoiding speculation in the first load.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Breno Leitao <leitao@debian.org>
    v2: Contemplate cmd == HIDIOC{G,S}USAGES case
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44dcd01ee170f776fec7bd6386d08a525d713b91
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri Oct 12 09:28:09 2018 -0400

    ext4: fix use-after-free race in ext4_remount()'s error path
    
    commit 33458eaba4dfe778a426df6a19b7aad2ff9f7eec upstream.
    
    It's possible for ext4_show_quota_options() to try reading
    s_qf_names[i] while it is being modified by ext4_remount() --- most
    notably, in ext4_remount's error path when the original values of the
    quota file name gets restored.
    
    Reported-by: syzbot+a2872d6feea6918008a9@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org # 3.2+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d197b725e9f0ef87ba014247211b0b900d868e04
Author: Wang Shilong <wshilong@ddn.com>
Date:   Wed Oct 3 12:19:21 2018 -0400

    ext4: propagate error from dquot_initialize() in EXT4_IOC_FSSETXATTR
    
    commit 182a79e0c17147d2c2d3990a9a7b6b58a1561c7a upstream.
    
    We return most failure of dquota_initialize() except
    inode evict, this could make a bit sense, for example
    we allow file removal even quota files are broken?
    
    But it dosen't make sense to allow setting project
    if quota files etc are broken.
    
    Signed-off-by: Wang Shilong <wshilong@ddn.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65dc3dd8c550d7b16b4901b2fe4c4cd022931a0e
Author: Wang Shilong <wangshilong1991@gmail.com>
Date:   Wed Oct 3 10:33:32 2018 -0400

    ext4: fix setattr project check in fssetxattr ioctl
    
    commit dc7ac6c4cae3b58724c2f1e21a7c05ce19ecd5a8 upstream.
    
    Currently, project quota could be changed by fssetxattr
    ioctl, and existed permission check inode_owner_or_capable()
    is obviously not enough, just think that common users could
    change project id of file, that could make users to
    break project quota easily.
    
    This patch try to follow same regular of xfs project
    quota:
    
    "Project Quota ID state is only allowed to change from
    within the init namespace. Enforce that restriction only
    if we are trying to change the quota ID state.
    Everything else is allowed in user namespaces."
    
    Besides that, check and set project id'state should
    be an atomic operation, protect whole operation with
    inode lock, ext4_ioctl_setproject() is only used for
    ioctl EXT4_IOC_FSSETXATTR, we have held mnt_want_write_file()
    before ext4_ioctl_setflags(), and ext4_ioctl_setproject()
    is called after ext4_ioctl_setflags(), we could share
    codes, so remove it inside ext4_ioctl_setproject().
    
    Signed-off-by: Wang Shilong <wshilong@ddn.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13b63ba40348d9c43c3842632d3f371a97ca5fe4
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Tue Oct 2 21:18:45 2018 -0400

    ext4: initialize retries variable in ext4_da_write_inline_data_begin()
    
    commit 625ef8a3acd111d5f496d190baf99d1a815bd03e upstream.
    
    Variable retries is not initialized in ext4_da_write_inline_data_begin()
    which can lead to nondeterministic number of retries in case we hit
    ENOSPC. Initialize retries to zero as we do everywhere else.
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Fixes: bc0ca9df3b2a ("ext4: retry allocation when inline->extent conversion failed")
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63be2065bf4d66c50d3d43935c4687d25642dbbd
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Oct 13 00:19:13 2018 -0400

    gfs2_meta: ->mount() can get NULL dev_name
    
    commit 3df629d873f8683af6f0d34dfc743f637966d483 upstream.
    
    get in sync with mount_bdev() handling of the same
    
    Reported-by: syzbot+c54f8e94e6bba03b04e9@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf08282805374fbf0c3c6a124f8e4687c21c6615
Author: Jan Kara <jack@suse.cz>
Date:   Fri Oct 5 18:44:40 2018 -0400

    jbd2: fix use after free in jbd2_log_do_checkpoint()
    
    commit ccd3c4373eacb044eb3832966299d13d2631f66f upstream.
    
    The code cleaning transaction's lists of checkpoint buffers has a bug
    where it increases bh refcount only after releasing
    journal->j_list_lock. Thus the following race is possible:
    
    CPU0                                    CPU1
    jbd2_log_do_checkpoint()
                                            jbd2_journal_try_to_free_buffers()
                                              __journal_try_to_free_buffer(bh)
      ...
      while (transaction->t_checkpoint_io_list)
      ...
        if (buffer_locked(bh)) {
    
    <-- IO completes now, buffer gets unlocked -->
    
          spin_unlock(&journal->j_list_lock);
                                                spin_lock(&journal->j_list_lock);
                                                __jbd2_journal_remove_checkpoint(jh);
                                                spin_unlock(&journal->j_list_lock);
                                              try_to_free_buffers(page);
          get_bh(bh) <-- accesses freed bh
    
    Fix the problem by grabbing bh reference before unlocking
    journal->j_list_lock.
    
    Fixes: dc6e8d669cf5 ("jbd2: don't call get_bh() before calling __jbd2_journal_remove_checkpoint()")
    Fixes: be1158cc615f ("jbd2: fold __process_buffer() into jbd2_log_do_checkpoint()")
    Reported-by: syzbot+7f4a27091759e2fe7453@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97a063dfcbdf910bfe330c1ca53bd7c70ae1ae75
Author: Artemy Kovalyov <artemyko@mellanox.com>
Date:   Mon Oct 15 14:13:35 2018 +0300

    IB/mlx5: Fix MR cache initialization
    
    commit 013c2403bf32e48119aeb13126929f81352cc7ac upstream.
    
    Schedule MR cache work only after bucket was initialized.
    
    Cc: <stable@vger.kernel.org> # 4.10
    Fixes: 49780d42dfc9 ("IB/mlx5: Expose MR cache for mlx5_ib")
    Signed-off-by: Artemy Kovalyov <artemyko@mellanox.com>
    Reviewed-by: Majd Dibbiny <majd@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83fc44a1498347d5fcb670d3b7536bea356a5c9f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Oct 3 19:31:44 2018 +0200

    ASoC: intel: skylake: Add missing break in skl_tplg_get_token()
    
    commit 9c80c5a8831471e0a3e139aad1b0d4c0fdc50b2f upstream.
    
    skl_tplg_get_token() misses a break in the big switch() block for
    SKL_TKN_U8_CORE_ID entry.
    Spotted nicely by -Wimplicit-fallthrough compiler option.
    
    Fixes: 6277e83292a2 ("ASoC: Intel: Skylake: Parse vendor tokens to build module data")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75c7ba4853719d8efec51f45d3f26ff2b4991a2e
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Sep 27 15:01:55 2018 -0700

    libnvdimm, region: Fail badblocks listing for inactive regions
    
    commit 5d394eee2c102453278d81d9a7cf94c80253486a upstream.
    
    While experimenting with region driver loading the following backtrace
    was triggered:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
     [..]
     Call Trace:
      dump_stack+0x85/0xcb
      register_lock_class+0x571/0x580
      ? __lock_acquire+0x2ba/0x1310
      ? kernfs_seq_start+0x2a/0x80
      __lock_acquire+0xd4/0x1310
      ? dev_attr_show+0x1c/0x50
      ? __lock_acquire+0x2ba/0x1310
      ? kernfs_seq_start+0x2a/0x80
      ? lock_acquire+0x9e/0x1a0
      lock_acquire+0x9e/0x1a0
      ? dev_attr_show+0x1c/0x50
      badblocks_show+0x70/0x190
      ? dev_attr_show+0x1c/0x50
      dev_attr_show+0x1c/0x50
    
    This results from a missing successful call to devm_init_badblocks()
    from nd_region_probe(). Block attempts to show badblocks while the
    region is not enabled.
    
    Fixes: 6a6bef90425e ("libnvdimm: add mechanism to publish badblocks...")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1490de2bb0836fc0631c04d0559fdf81545b672f
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Tue Sep 25 13:53:02 2018 -0700

    libnvdimm: Hold reference on parent while scheduling async init
    
    commit b6eae0f61db27748606cc00dafcfd1e2c032f0a5 upstream.
    
    Unlike asynchronous initialization in the core we have not yet associated
    the device with the parent, and as such the device doesn't hold a reference
    to the parent.
    
    In order to resolve that we should be holding a reference on the parent
    until the asynchronous initialization has completed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 4d88a97aa9e8 ("libnvdimm: ...base ... infrastructure")
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 381fa28746b552875e3eccfbfdd45a7bc97f4d92
Author: Pierre Yves MORDRET <pierre-yves.mordret@st.com>
Date:   Tue Mar 13 17:42:06 2018 +0100

    dmaengine: stm32-dma: fix incomplete configuration in cyclic mode
    
    commit e57cb3b3f10d005410f09d4598cc6d62b833f2b0 upstream.
    
    When in cyclic mode, the configuration is updated after having started the
    DMA hardware (STM32_DMA_SCR_EN) leading to incomplete configuration of
    SMxAR registers.
    
    Signed-off-by: Pierre-Yves MORDRET <pierre-yves.mordret@st.com>
    Signed-off-by: Hugues Fruchet <hugues.fruchet@st.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Cc: "Joel Fernandes (Google)" <joel@joelfernandes.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e4465dae54959cb92d1bb949df67b0b40372eac
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Sun Oct 14 23:28:50 2018 +0200

    dmaengine: ppc4xx: fix off-by-one build failure
    
    commit 27d8d2d7a9b7eb05c4484b74b749eaee7b50b845 upstream.
    
    There are two poly_store, but one should have been poly_show.
    
    |adma.c:4382:16: error: conflicting types for 'poly_store'
    | static ssize_t poly_store(struct device_driver *dev, const char *buf,
    |                ^~~~~~~~~~
    |adma.c:4363:16: note: previous definition of 'poly_store' was here
    | static ssize_t poly_store(struct device_driver *dev, char *buf)
    |                ^~~~~~~~~~
    
    CC: stable@vger.kernel.org
    Fixes: 13efe1a05384 ("dmaengine: ppc4xx: remove DRIVER_ATTR() usage")
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d982ccf0e67d9248a10a5aab1f3d96825099a19
Author: Stefan Nuernberger <snu@amazon.com>
Date:   Mon Sep 17 19:46:53 2018 +0200

    net/ipv4: defensive cipso option parsing
    
    commit 076ed3da0c9b2f88d9157dbe7044a45641ae369e upstream.
    
    commit 40413955ee26 ("Cipso: cipso_v4_optptr enter infinite loop") fixed
    a possible infinite loop in the IP option parsing of CIPSO. The fix
    assumes that ip_options_compile filtered out all zero length options and
    that no other one-byte options beside IPOPT_END and IPOPT_NOOP exist.
    While this assumption currently holds true, add explicit checks for zero
    length and invalid length options to be safe for the future. Even though
    ip_options_compile should have validated the options, the introduction of
    new one-byte options can still confuse this code without the additional
    checks.
    
    Signed-off-by: Stefan Nuernberger <snu@amazon.com>
    Cc: David Woodhouse <dwmw@amazon.co.uk>
    Cc: Simon Veith <sveith@amazon.de>
    Cc: stable@vger.kernel.org
    Acked-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c38cad1d15004c2d6dc188a6f3f362a98883334
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Sat Oct 13 09:46:08 2018 +0300

    iwlwifi: mvm: check return value of rs_rate_from_ucode_rate()
    
    commit 3d71c3f1f50cf309bd20659422af549bc784bfff upstream.
    
    The rs_rate_from_ucode_rate() function may return -EINVAL if the rate
    is invalid, but none of the callsites check for the error, potentially
    making us access arrays with index IWL_RATE_INVALID, which is larger
    than the arrays, causing an out-of-bounds access.  This will trigger
    KASAN warnings, such as the one reported in the bugzilla issue
    mentioned below.
    
    This fixes https://bugzilla.kernel.org/show_bug.cgi?id=200659
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c459fed018c33ae79dbb892ba2a5874cc7932781
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Oct 2 20:57:44 2018 +0900

    usb: gadget: udc: renesas_usb3: Fix b-device mode for "workaround"
    
    commit afc92514a34c7414b28047b1205a6b709103c699 upstream.
    
    If the "workaround_for_vbus" is true, the driver will not call
    usb_disconnect(). So, since the controller keeps some registers'
    value, the driver doesn't re-enumarate suitable speed after
    the b-device mode is disabled. To fix the issue, this patch
    adds usb_disconnect() calling in renesas_usb3_b_device_write()
    if workaround_for_vbus is true.
    
    Fixes: 43ba968b00ea ("usb: gadget: udc: renesas_usb3: add debugfs to set the b-device mode")
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 255624a35b4ca228bac9a1f135263e28c27c4640
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Thu Oct 18 10:19:29 2018 -0600

    usbip:vudc: BUG kmalloc-2048 (Not tainted): Poison overwritten
    
    commit e28fd56ad5273be67d0fae5bedc7e1680e729952 upstream.
    
    In rmmod path, usbip_vudc does platform_device_put() twice once from
    platform_device_unregister() and then from put_vudc_device().
    
    The second put results in:
    
    BUG kmalloc-2048 (Not tainted): Poison overwritten error or
    BUG: KASAN: use-after-free in kobject_put+0x1e/0x230 if KASAN is
    enabled.
    
    [  169.042156] calling  init+0x0/0x1000 [usbip_vudc] @ 1697
    [  169.042396] =============================================================================
    [  169.043678] probe of usbip-vudc.0 returned 1 after 350 usecs
    [  169.044508] BUG kmalloc-2048 (Not tainted): Poison overwritten
    [  169.044509] -----------------------------------------------------------------------------
    ...
    [  169.057849] INFO: Freed in device_release+0x2b/0x80 age=4223 cpu=3 pid=1693
    [  169.057852]  kobject_put+0x86/0x1b0
    [  169.057853]  0xffffffffc0c30a96
    [  169.057855]  __x64_sys_delete_module+0x157/0x240
    
    Fix it to call platform_device_del() instead and let put_vudc_device() do
    the platform_device_put().
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acc14d41da801242ef7ad21c55a7f2569a1fd2f1
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sat Oct 6 22:12:32 2018 +0200

    libertas: don't set URB_ZERO_PACKET on IN USB transfer
    
    commit 6528d88047801b80d2a5370ad46fb6eff2f509e0 upstream.
    
    The USB core gets rightfully upset:
    
      usb 1-1: BOGUS urb flags, 240 --> 200
      WARNING: CPU: 0 PID: 60 at drivers/usb/core/urb.c:503 usb_submit_urb+0x2f8/0x3ed
      Modules linked in:
      CPU: 0 PID: 60 Comm: kworker/0:3 Not tainted 4.19.0-rc6-00319-g5206d00a45c7 #39
      Hardware name: OLPC XO/XO, BIOS OLPC Ver 1.00.01 06/11/2014
      Workqueue: events request_firmware_work_func
      EIP: usb_submit_urb+0x2f8/0x3ed
      Code: 75 06 8b 8f 80 00 00 00 8d 47 78 89 4d e4 89 55 e8 e8 35 1c f6 ff 8b 55 e8 56 52 8b 4d e4 51 50 68 e3 ce c7 c0 e8 ed 18 c6 ff <0f> 0b 83 c4 14 80 7d ef 01 74 0a 80 7d ef 03 0f 85 b8 00 00 00 8b
      EAX: 00000025 EBX: ce7d4980 ECX: 00000000 EDX: 00000001
      ESI: 00000200 EDI: ce7d8800 EBP: ce7f5ea8 ESP: ce7f5e70
      DS: 007b ES: 007b FS: 0000 GS: 00e0 SS: 0068 EFLAGS: 00210292
      CR0: 80050033 CR2: 00000000 CR3: 00e80000 CR4: 00000090
      Call Trace:
       ? if_usb_fw_timeo+0x64/0x64
       __if_usb_submit_rx_urb+0x85/0xe6
       ? if_usb_fw_timeo+0x64/0x64
       if_usb_submit_rx_urb_fwload+0xd/0xf
       if_usb_prog_firmware+0xc0/0x3db
       ? _request_firmware+0x54/0x47b
       ? _request_firmware+0x89/0x47b
       ? if_usb_probe+0x412/0x412
       lbs_fw_loaded+0x55/0xa6
       ? debug_smp_processor_id+0x12/0x14
       helper_firmware_cb+0x3c/0x3f
       request_firmware_work_func+0x37/0x6f
       process_one_work+0x164/0x25a
       worker_thread+0x1c4/0x284
       kthread+0xec/0xf1
       ? cancel_delayed_work_sync+0xf/0xf
       ? kthread_create_on_node+0x1a/0x1a
       ret_from_fork+0x2e/0x38
      ---[ end trace 3ef1e3b2dd53852f ]---
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ba9232f654da32311cb5f71a85fc4e792e84d91
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Oct 25 09:54:15 2018 +0200

    xen/pvh: don't try to unplug emulated devices
    
    commit e6111161c0a02d58919d776eec94b313bb57911f upstream.
    
    A Xen PVH guest has no associated qemu device model, so trying to
    unplug any emulated devices is making no sense at all.
    
    Bail out early from xen_unplug_emulated_devices() when running as PVH
    guest. This will avoid issuing the boot message:
    
    [    0.000000] Xen Platform PCI: unrecognised magic value
    
    Cc: <stable@vger.kernel.org> # 4.11
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba94ecfc74e4e74acb46afe9a7bea10d869657b9
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Tue Oct 9 12:32:37 2018 +0200

    xen/pvh: increase early stack size
    
    commit 7deecbda3026f5e2a8cc095d7ef7261a920efcf2 upstream.
    
    While booting on an AMD EPYC box the stack canary would detect stack
    overflows when using the current PVH early stack size (256). Switch to
    using the value defined by BOOT_STACK_SIZE, which prevents the stack
    overflow.
    
    Cc: <stable@vger.kernel.org> # 4.11
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbc3fb7b48dc47d4c14cda0f40721af5b2054c0d
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Oct 1 07:57:42 2018 +0200

    xen: make xen_qlock_wait() nestable
    
    commit a856531951dc8094359dfdac21d59cee5969c18e upstream.
    
    xen_qlock_wait() isn't safe for nested calls due to interrupts. A call
    of xen_qlock_kick() might be ignored in case a deeper nesting level
    was active right before the call of xen_poll_irq():
    
    CPU 1:                                   CPU 2:
    spin_lock(lock1)
                                             spin_lock(lock1)
                                             -> xen_qlock_wait()
                                                -> xen_clear_irq_pending()
                                                Interrupt happens
    spin_unlock(lock1)
    -> xen_qlock_kick(CPU 2)
    spin_lock_irqsave(lock2)
                                             spin_lock_irqsave(lock2)
                                             -> xen_qlock_wait()
                                                -> xen_clear_irq_pending()
                                                   clears kick for lock1
                                                -> xen_poll_irq()
    spin_unlock_irq_restore(lock2)
    -> xen_qlock_kick(CPU 2)
                                                wakes up
                                             spin_unlock_irq_restore(lock2)
                                             IRET
                                               resumes in xen_qlock_wait()
                                               -> xen_poll_irq()
                                               never wakes up
    
    The solution is to disable interrupts in xen_qlock_wait() and not to
    poll for the irq in case xen_qlock_wait() is called in nmi context.
    
    Cc: stable@vger.kernel.org
    Cc: Waiman.Long@hp.com
    Cc: peterz@infradead.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3e63ec6468a60c25570451ea587b41025e737e0
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Oct 1 07:57:42 2018 +0200

    xen: fix race in xen_qlock_wait()
    
    commit 2ac2a7d4d9ff4e01e36f9c3d116582f6f655ab47 upstream.
    
    In the following situation a vcpu waiting for a lock might not be
    woken up from xen_poll_irq():
    
    CPU 1:                CPU 2:                      CPU 3:
    takes a spinlock
                          tries to get lock
                          -> xen_qlock_wait()
    frees the lock
    -> xen_qlock_kick(cpu2)
                            -> xen_clear_irq_pending()
    
    takes lock again
                                                      tries to get lock
                                                      -> *lock = _Q_SLOW_VAL
                            -> *lock == _Q_SLOW_VAL ?
                            -> xen_poll_irq()
    frees the lock
    -> xen_qlock_kick(cpu3)
    
    And cpu 2 will sleep forever.
    
    This can be avoided easily by modifying xen_qlock_wait() to call
    xen_poll_irq() only if the related irq was not pending and to call
    xen_clear_irq_pending() only if it was pending.
    
    Cc: stable@vger.kernel.org
    Cc: Waiman.Long@hp.com
    Cc: peterz@infradead.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdc96cef37441af23ce3c2661de5f1984be7ee0c
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Sun Oct 7 16:05:38 2018 -0400

    xen/balloon: Support xend-based toolstack
    
    commit 3aa6c19d2f38be9c6e9a8ad5fa8e3c9d29ee3c35 upstream.
    
    Xend-based toolstacks don't have static-max entry in xenstore. The
    equivalent node for those toolstacks is memory_static_max.
    
    Fixes: 5266b8e4445c (xen: fix booting ballooned down hvm guest)
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: <stable@vger.kernel.org> # 4.13
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57cd3a09665ad99de90b9aa8fd31cec26039163e
Author: Vasilis Liaskovitis <vliaskovitis@suse.com>
Date:   Mon Oct 15 15:25:08 2018 +0200

    xen/blkfront: avoid NULL blkfront_info dereference on device removal
    
    commit f92898e7f32e3533bfd95be174044bc349d416ca upstream.
    
    If a block device is hot-added when we are out of grants,
    gnttab_grant_foreign_access fails with -ENOSPC (log message "28
    granting access to ring page") in this code path:
    
      talk_to_blkback ->
            setup_blkring ->
                    xenbus_grant_ring ->
                            gnttab_grant_foreign_access
    
    and the failing path in talk_to_blkback sets the driver_data to NULL:
    
     destroy_blkring:
            blkif_free(info, 0);
    
            mutex_lock(&blkfront_mutex);
            free_info(info);
            mutex_unlock(&blkfront_mutex);
    
            dev_set_drvdata(&dev->dev, NULL);
    
    This results in a NULL pointer BUG when blkfront_remove and blkif_free
    try to access the failing device's NULL struct blkfront_info.
    
    Cc: stable@vger.kernel.org # 4.5 and later
    Signed-off-by: Vasilis Liaskovitis <vliaskovitis@suse.com>
    Reviewed-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d079cf7527518c96ecebda09c2bbf6b6438279dc
Author: Dr. Greg Wettstein <greg@wind.enjellic.com>
Date:   Mon Sep 17 18:53:33 2018 -0400

    tpm: Restore functionality to xen vtpm driver.
    
    commit e487a0f52301293152a6f8c4e217f2a11dd808e3 upstream.
    
    Functionality of the xen-tpmfront driver was lost secondary to
    the introduction of xenbus multi-page support in commit ccc9d90a9a8b
    ("xenbus_client: Extend interface to support multi-page ring").
    
    In this commit pointer to location of where the shared page address
    is stored was being passed to the xenbus_grant_ring() function rather
    then the address of the shared page itself. This resulted in a situation
    where the driver would attach to the vtpm-stubdom but any attempt
    to send a command to the stub domain would timeout.
    
    A diagnostic finding for this regression is the following error
    message being generated when the xen-tpmfront driver probes for a
    device:
    
    <3>vtpm vtpm-0: tpm_transmit: tpm_send: error -62
    
    <3>vtpm vtpm-0: A TPM error (-62) occurred attempting to determine
    the timeouts
    
    This fix is relevant to all kernels from 4.1 forward which is the
    release in which multi-page xenbus support was introduced.
    
    Daniel De Graaf formulated the fix by code inspection after the
    regression point was located.
    
    Fixes: ccc9d90a9a8b ("xenbus_client: Extend interface to support multi-page ring")
    Signed-off-by: Dr. Greg Wettstein <greg@enjellic.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    [boris: Updated commit message, added Fixes tag]
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: stable@vger.kernel.org # v4.1+
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>

commit 9b86c5a510fdc72a083a918a0d4d00e1cce5287a
Author: Joe Jin <joe.jin@oracle.com>
Date:   Tue Oct 16 15:21:16 2018 -0700

    xen-swiotlb: use actually allocated size on check physical continuous
    
    commit 7250f422da0480d8512b756640f131b9b893ccda upstream.
    
    xen_swiotlb_{alloc,free}_coherent() allocate/free memory based on the
    order of the pages and not size argument (bytes). This is inconsistent with
    range_straddles_page_boundary and memset which use the 'size' value,
    which may lead to not exchanging memory with Xen (range_straddles_page_boundary()
    returned true). And then the call to xen_swiotlb_free_coherent() would
    actually try to exchange the memory with Xen, leading to the kernel
    hitting an BUG (as the hypercall returned an error).
    
    This patch fixes it by making the 'size' variable be of the same size
    as the amount of memory allocated.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Joe Jin <joe.jin@oracle.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: Christoph Helwig <hch@lst.de>
    Cc: Dongli Zhang <dongli.zhang@oracle.com>
    Cc: John Sobecki <john.sobecki@oracle.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c0bcd457b943c36c177cf1e901848ec38f5a8c5
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Aug 7 12:48:49 2018 +0200

    ARM: dts: exynos: Mark 1 GHz CPU OPP as suspend OPP on Exynos5250
    
    commit 645b23da6f8b47f295fa87051335d41d139717a5 upstream.
    
    1 GHz CPU OPP is the default boot value for the Exynos5250 SOC, so mark it
    as suspend OPP. This fixes suspend/resume on Samsung Exynos5250 Snow
    Chomebook, which was broken since switching to generic cpufreq-dt driver
    in v4.3.
    
    Cc: <stable@vger.kernel.org> # 4.3.x: cd6f55457eb4: ARM: dts: exynos: Remove "cooling-{min|max}-level" for CPU nodes
    Cc: <stable@vger.kernel.org> # 4.3.x: 672f33198bee: arm: dts: exynos: Add missing cooling device properties for CPUs
    Cc: <stable@vger.kernel.org> # 4.3.x
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Acked-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f9121b4aa0ff10407b5ec91afb4b33317e9f461
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Aug 7 12:48:48 2018 +0200

    ARM: dts: exynos: Convert exynos5250.dtsi to opp-v2 bindings
    
    commit eb9e16d8573e243f8175647f851eb5085dbe97a4 upstream.
    
    Convert Exynos5250 to OPP-v2 bindings. This is a preparation to add proper
    support for suspend operation point, which cannot be marked in opp-v1.
    
    Cc: <stable@vger.kernel.org> # 4.3.x: cd6f55457eb4: ARM: dts: exynos: Remove "cooling-{min|max}-level" for CPU nodes
    Cc: <stable@vger.kernel.org> # 4.3.x: 672f33198bee: arm: dts: exynos: Add missing cooling device properties for CPUs
    Cc: <stable@vger.kernel.org> # 4.3.x
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Acked-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b93b6d7e3f2b6532525c12af06a014a6b71f19f
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Fri May 25 16:01:53 2018 +0530

    arm: dts: exynos: Add missing cooling device properties for CPUs
    
    commit 672f33198bee21ee91e6af2cb8f67cfc8bc97ec1 upstream.
    
    The cooling device properties, like "#cooling-cells" and
    "dynamic-power-coefficient", should either be present for all the CPUs
    of a cluster or none. If these are present only for a subset of CPUs of
    a cluster then things will start falling apart as soon as the CPUs are
    brought online in a different order. For example, this will happen
    because the operating system looks for such properties in the CPU node
    it is trying to bring up, so that it can register a cooling device.
    
    Add such missing properties.
    
    Fix other missing properties (clocks, OPP, clock latency) as well to
    make it all work.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4438856ea1e6337c1c11fee6b612ffafee055cb
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Fri Feb 9 14:28:01 2018 +0530

    ARM: dts: exynos: Remove "cooling-{min|max}-level" for CPU nodes
    
    commit cd6f55457eb449a388e793abd676e3a5b73510bc upstream.
    
    The "cooling-min-level" and "cooling-max-level" properties are not
    parsed by any part of the kernel currently and the max cooling state of
    a CPU cooling device is found by referring to the cpufreq table instead.
    
    Remove the unused properties from the CPU nodes.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cc5dcf7a9e074c5bdfdefea1801aa0a657750d6
Author: Chao Yu <chao@kernel.org>
Date:   Mon Oct 22 09:12:51 2018 +0800

    f2fs: fix to account IO correctly
    
    commit 4c58ed076875f36dae0f240da1e25e99e5d4afb8 upstream.
    
    Below race can cause reversed reference on dirty count, fix it by
    relocating __submit_bio() and inc_page_count().
    
    Thread A                                Thread B
    - f2fs_inplace_write_data
     - f2fs_submit_page_bio
      - __submit_bio
                                            - f2fs_write_end_io
                                             - dec_page_count
      - inc_page_count
    
    Cc: <stable@vger.kernel.org>
    Fixes: d1b3e72d5490 ("f2fs: submit bio of in-place-update pages")
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3ab5e3c80106fa6b131e0ad0959d5a8376ce589
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Oct 16 19:30:13 2018 -0700

    Revert "f2fs: fix to clear PG_checked flag in set_page_dirty()"
    
    commit 164a63fa6b384e30ceb96ed80bc7dc3379bc0960 upstream.
    
    This reverts commit 66110abc4c931f879d70e83e1281f891699364bf.
    
    If we clear the cold data flag out of the writeback flow, we can miscount
    -1 by end_io, which incurs a deadlock caused by all I/Os being blocked during
    heavy GC.
    
    Balancing F2FS Async:
     - IO (CP:    1, Data:   -1, Flush: (   0    0    1), Discard: (   ...
    
    GC thread:                              IRQ
    - move_data_page()
     - set_page_dirty()
      - clear_cold_data()
                                            - f2fs_write_end_io()
                                             - type = WB_DATA_TYPE(page);
                                               here, we get wrong type
                                             - dec_page_count(sbi, type);
     - f2fs_wait_on_page_writeback()
    
    Cc: <stable@vger.kernel.org>
    Reported-and-Tested-by: Park Ju Hyung <qkrwngud825@gmail.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb61032295732b08a714678e0ccea732dabfc49e
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Mon Oct 8 11:06:18 2018 -0400

    cpupower: Fix AMD Family 0x17 msr_pstate size
    
    [ Upstream commit 8c22e2f695920ebd94f9a53bcf2a65eb36d4dba1 ]
    
    The msr_pstate data is only 63 bits long and should be 64 bits.
    
    Add in the missing bit from res1 for AMD Family 0x17.
    
    Reference: https://www.amd.com/system/files/TechDocs/54945_PPR_Family_17h_Models_00h-0Fh.pdf, page 138.
    
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Stafford Horne <shorne@gmail.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edadd638264f3782d0d166125a7a5515523dbe3c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Aug 11 23:33:34 2018 +0200

    ALSA: hda: Check the non-cached stream buffers more explicitly
    
    [ Upstream commit 78c9be61c3a5cd9e2439fd27a5ffad73a81958c7 ]
    
    Introduce a new flag, uc_buffer, to indicate that the controller
    requires the non-cached pages for stream buffers, either as a
    chip-specific requirement or specified via snoop=0 option.
    This improves the code-readability.
    
    Also, this patch fixes the incorrect behavior for C-Media chip where
    the stream buffers were never handled as non-cached due to the check
    of driver_type even if you pass snoop=0 option.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab5ed779fe0dcf3e81484409530267880f661d95
Author: Vijay Immanuel <vijayi@attalasystems.com>
Date:   Tue Jun 12 18:20:49 2018 -0700

    IB/rxe: fix for duplicate request processing and ack psns
    
    [ Upstream commit b97db58557f4aa6d9903f8e1deea6b3d1ed0ba43 ]
    
    Don't reset the resp opcode for a replayed read response.
    The resp opcode could be in the middle of a write or send
    sequence, when the duplicate read request was received.
    An example sequence is as follows:
    - Receive read request for 12KB PSN 20. Transmit read response
      first, middle and last with PSNs 20,21,22.
    - Receive write first PSN 23.
      At this point the resp psn is 24 and resp opcode is write first.
    - The sender notices that PSN 20 is dropped and retransmits.
      Receive read request for 12KB PSN 20. Transmit read response
      first, middle and last with PSNs 20,21,22. The resp opcode is
      set to -1, the resp psn remains 24.
    - Receive write first PSN 23. This is processed by duplicate_request().
      The resp opcode remains -1 and resp psn remains 24.
    - Receive write middle PSN 24. check_op_seq() reports a missing
      first error since the resp opcode is -1.
    
    When sending an ack for a duplicate send or write request,
    use the psn of the previous ack sent. Do not use the psn
    of a read response for the ack.
    An example sequence is as follows:
    - Receive write PSN 30. Transmit ACK for PSN 30.
    - Receive read request 4KB PSN 31. Transmit read response with
      PSN 31. The resp psn is now 32.
    - The sender notices that PSN 30 is dropped and retransmits.
      Receive write PSN 30. duplicate_request() sends an ACK with
      PSN 31. That is incorrect since PSN 31 was a read request.
    
    Signed-off-by: Vijay Immanuel <vijayi@attalasystems.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bc6f0649b539b20ebf2096ead11246027ce9bef
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Aug 29 23:32:44 2018 +0200

    dmaengine: dma-jz4780: Return error if not probed from DT
    
    [ Upstream commit 54f919a04cf221bc1601d1193682d4379dacacbd ]
    
    The driver calls clk_get() with the clock name set to NULL, which means
    that the driver could only work when probed from devicetree. From now
    on, we explicitly require the driver to be probed from devicetree.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64b48a5cbea969bb7bd2f779dab52c2753c44e46
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sun Sep 9 22:48:58 2018 +0200

    mfd: menelaus: Fix possible race condition and leak
    
    [ Upstream commit 9612f8f503804d2fd2f63aa6ba1e58bba4612d96 ]
    
    The IRQ work is added before the struct rtc is allocated and registered,
    but this struct is used in the IRQ handler. This may lead to a NULL pointer
    dereference.
    
    Switch to devm_rtc_allocate_device/rtc_register_device to allocate the rtc
    before calling menelaus_add_irq_work.
    
    Also, this solves a possible leak as the RTC is never released.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06bd97b79584764d3ff4dbd42d4ca87d2cbe5a46
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Mon Sep 3 20:02:46 2018 +0200

    signal: Always deliver the kernel's SIGKILL and SIGSTOP to a pid namespace init
    
    [ Upstream commit 3597dfe01d12f570bc739da67f857fd222a3ea66 ]
    
    Instead of playing whack-a-mole and changing SEND_SIG_PRIV to
    SEND_SIG_FORCED throughout the kernel to ensure a pid namespace init
    gets signals sent by the kernel, stop allowing a pid namespace init to
    ignore SIGKILL or SIGSTOP sent by the kernel.  A pid namespace init is
    only supposed to be able to ignore signals sent from itself and
    children with SIG_DFL.
    
    Fixes: 921cf9f63089 ("signals: protect cinit from unblocked SIG_DFL signals")
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ae1c65ae960cdc0b2b9a5a614d54f7cfa33e31a
Author: Yunlei He <heyunlei@huawei.com>
Date:   Tue Jun 26 13:12:43 2018 +0800

    f2fs: report error if quota off error during umount
    
    [ Upstream commit cda9cc595f0bb6ffa51a4efc4b6533dfa4039b4c ]
    
    Now, we depend on fsck to ensure quota file data is ok,
    so we scan whole partition if checkpoint without umount
    flag. It's same for quota off error case, which may make
    quota file data inconsistent.
    
    generic/019 reports below error:
    
     __quota_error: 1160 callbacks suppressed
     Quota error (device zram1): write_blk: dquota write failed
     Quota error (device zram1): qtree_write_dquot: Error -28 occurred while creating quota
     Quota error (device zram1): write_blk: dquota write failed
     Quota error (device zram1): qtree_write_dquot: Error -28 occurred while creating quota
     Quota error (device zram1): write_blk: dquota write failed
     Quota error (device zram1): qtree_write_dquot: Error -28 occurred while creating quota
     Quota error (device zram1): write_blk: dquota write failed
     Quota error (device zram1): qtree_write_dquot: Error -28 occurred while creating quota
     Quota error (device zram1): write_blk: dquota write failed
     Quota error (device zram1): qtree_write_dquot: Error -28 occurred while creating quota
     VFS: Busy inodes after unmount of zram1. Self-destruct in 5 seconds.  Have a nice day...
    
    If we failed in below path due to fail to write dquot block, we will miss
    to release quota inode, fix it.
    
    - f2fs_put_super
     - f2fs_quota_off_umount
      - f2fs_quota_off
       - f2fs_quota_sync   <-- failed
       - dquot_quota_off   <-- missed to call
    
    Signed-off-by: Yunlei He <heyunlei@huawei.com>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5115854bb3a8bb7c04a191c3e8778faf04a2ec96
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Sep 10 10:30:44 2018 -0700

    scsi: lpfc: Correct race with abort on completion path
    
    [ Upstream commit ca7fb76e091f889cfda1287c07a9358f73832b39 ]
    
    On io completion, the driver is taking an adapter wide lock and nulling the
    scsi command back pointer.  The nulling of the back pointer is to signify the
    io was completed and the scsi_done() routine was called.  However, the routine
    makes no check to see if the abort routine had done the same thing and
    possibly nulled the pointer. Thus it may doubly-complete the io.
    
    Make the following mods:
    
    - Check to make sure forward progress (call scsi_done()) only happens if the
      command pointer was non-null.
    
    - As the taking of the lock, which is adapter wide, is very costly on a system
      under load, null the pointer using an xchg operation rather than under lock.
    
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f4b23ed2cdb5ba7a6edf002ea9cf0f5f684dca5
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Sep 10 10:30:45 2018 -0700

    scsi: lpfc: Correct soft lockup when running mds diagnostics
    
    [ Upstream commit 0ef01a2d95fd62bb4f536e7ce4d5e8e74b97a244 ]
    
    When running an mds diagnostic that passes frames with the switch, soft
    lockups are detected. The driver is in a CQE processing loop and has
    sufficient amount of traffic that it never exits the ring processing routine,
    thus the "lockup".
    
    Cap the number of elements in the work processing routine to 64 elements. This
    ensures that the cpu will be given up and the handler reschedule to process
    additional items.
    
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adfbc0d10727027a17fb1784548245cda2fae30e
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Thu Aug 16 09:39:41 2018 +0200

    uio: ensure class is registered before devices
    
    [ Upstream commit ae61cf5b9913027c6953a79ed3894da4f47061bd ]
    
    When both uio and the uio drivers are built in the kernel, it is possible
    for a driver to register devices before the uio class is registered.
    
    This may result in a NULL pointer dereference later on in
    get_device_parent() when accessing the class glue_dirs spinlock.
    
    The trace looks like that:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000140
    [...]
    [<ffff0000089cc234>] _raw_spin_lock+0x14/0x48
    [<ffff0000084f56bc>] device_add+0x154/0x6a0
    [<ffff0000084f5e48>] device_create_groups_vargs+0x120/0x128
    [<ffff0000084f5edc>] device_create+0x54/0x60
    [<ffff0000086e72c0>] __uio_register_device+0x120/0x4a8
    [<ffff000008528b7c>] jaguar2_pci_probe+0x2d4/0x558
    [<ffff0000083fc18c>] local_pci_probe+0x3c/0xb8
    [<ffff0000083fd81c>] pci_device_probe+0x11c/0x180
    [<ffff0000084f88bc>] driver_probe_device+0x22c/0x2d8
    [<ffff0000084f8a24>] __driver_attach+0xbc/0xc0
    [<ffff0000084f69fc>] bus_for_each_dev+0x4c/0x98
    [<ffff0000084f81b8>] driver_attach+0x20/0x28
    [<ffff0000084f7d08>] bus_add_driver+0x1b8/0x228
    [<ffff0000084f93c0>] driver_register+0x60/0xf8
    [<ffff0000083fb918>] __pci_register_driver+0x40/0x48
    
    Return EPROBE_DEFER in that case so the driver can register the device
    later.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24e249524e9b19e1e8027904ed3dcbd5e34e9dea
Author: Waiman Long <longman@redhat.com>
Date:   Fri Sep 14 14:53:32 2018 -0400

    driver/dma/ioat: Call del_timer_sync() without holding prep_lock
    
    [ Upstream commit cfb03be6c7e8a1591285849c361d67b09f5149f7 ]
    
    The following lockdep splat was observed:
    
    [ 1222.241750] ======================================================
    [ 1222.271301] WARNING: possible circular locking dependency detected
    [ 1222.301060] 4.16.0-10.el8+5.x86_64+debug #1 Not tainted
    [ 1222.326659] ------------------------------------------------------
    [ 1222.356565] systemd-shutdow/1 is trying to acquire lock:
    [ 1222.382660]  ((&ioat_chan->timer)){+.-.}, at: [<00000000f71e1a28>] del_timer_sync+0x5/0xf0
    [ 1222.422928]
    [ 1222.422928] but task is already holding lock:
    [ 1222.451743]  (&(&ioat_chan->prep_lock)->rlock){+.-.}, at: [<000000008ea98b12>] ioat_shutdown+0x86/0x100 [ioatdma]
       :
    [ 1223.524987] Chain exists of:
    [ 1223.524987]   (&ioat_chan->timer) --> &(&ioat_chan->cleanup_lock)->rlock --> &(&ioat_chan->prep_lock)->rlock
    [ 1223.524987]
    [ 1223.594082]  Possible unsafe locking scenario:
    [ 1223.594082]
    [ 1223.622630]        CPU0                    CPU1
    [ 1223.645080]        ----                    ----
    [ 1223.667404]   lock(&(&ioat_chan->prep_lock)->rlock);
    [ 1223.691535]                                lock(&(&ioat_chan->cleanup_lock)->rlock);
    [ 1223.728657]                                lock(&(&ioat_chan->prep_lock)->rlock);
    [ 1223.765122]   lock((&ioat_chan->timer));
    [ 1223.784095]
    [ 1223.784095]  *** DEADLOCK ***
    [ 1223.784095]
    [ 1223.813492] 4 locks held by systemd-shutdow/1:
    [ 1223.834677]  #0:  (reboot_mutex){+.+.}, at: [<0000000056d33456>] SYSC_reboot+0x10f/0x300
    [ 1223.873310]  #1:  (&dev->mutex){....}, at: [<00000000258dfdd7>] device_shutdown+0x1c8/0x660
    [ 1223.913604]  #2:  (&dev->mutex){....}, at: [<0000000068331147>] device_shutdown+0x1d6/0x660
    [ 1223.954000]  #3:  (&(&ioat_chan->prep_lock)->rlock){+.-.}, at: [<000000008ea98b12>] ioat_shutdown+0x86/0x100 [ioatdma]
    
    In the ioat_shutdown() function:
    
            spin_lock_bh(&ioat_chan->prep_lock);
            set_bit(IOAT_CHAN_DOWN, &ioat_chan->state);
            del_timer_sync(&ioat_chan->timer);
            spin_unlock_bh(&ioat_chan->prep_lock);
    
    According to the synchronization rule for the del_timer_sync() function,
    the caller must not hold locks which would prevent completion of the
    timer's handler.
    
    The timer structure has its own lock that manages its synchronization.
    Setting the IOAT_CHAN_DOWN bit should prevent other CPUs from
    trying to use that device anyway, there is probably no need to call
    del_timer_sync() while holding the prep_lock. So the del_timer_sync()
    call is now moved outside of the prep_lock critical section to prevent
    the circular lock dependency.
    
    Signed-off-by: Waiman Long <longman@redhat.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7987dfa6057678f5864309496c4c26662d93385a
Author: Loic Poulain <loic.poulain@linaro.org>
Date:   Tue Sep 4 17:18:57 2018 +0200

    usb: chipidea: Prevent unbalanced IRQ disable
    
    [ Upstream commit 8b97d73c4d72a2abf58f8e49062a7ee1e5f1334e ]
    
    The ChipIdea IRQ is disabled before scheduling the otg work and
    re-enabled on otg work completion. However if the job is already
    scheduled we have to undo the effect of disable_irq int order to
    balance the IRQ disable-depth value.
    
    Fixes: be6b0c1bd0be ("usb: chipidea: using one inline function to cover queue work operations")
    Signed-off-by: Loic Poulain <loic.poulain@linaro.org>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a4e231f265052b0da714076143fe2f2425eee89
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Wed Sep 12 11:59:30 2018 +0300

    crypto: caam - fix implicit casts in endianness helpers
    
    [ Upstream commit aae733a3f46f5ef338fbdde26e14cbb205a23de0 ]
    
    Fix the following sparse endianness warnings:
    
    drivers/crypto/caam/regs.h:95:1: sparse: incorrect type in return expression (different base types) @@    expected unsigned int @@    got restricted __le32unsigned int @@
    drivers/crypto/caam/regs.h:95:1:    expected unsigned int
    drivers/crypto/caam/regs.h:95:1:    got restricted __le32 [usertype] <noident>
    drivers/crypto/caam/regs.h:95:1: sparse: incorrect type in return expression (different base types) @@    expected unsigned int @@    got restricted __be32unsigned int @@
    drivers/crypto/caam/regs.h:95:1:    expected unsigned int
    drivers/crypto/caam/regs.h:95:1:    got restricted __be32 [usertype] <noident>
    
    drivers/crypto/caam/regs.h:92:1: sparse: cast to restricted __le32
    drivers/crypto/caam/regs.h:92:1: sparse: cast to restricted __be32
    
    Fixes: 261ea058f016 ("crypto: caam - handle core endianness != caam endianness")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00de8eac10fdcc2d3fff63bf2cfa122a15c72aee
Author: Vignesh R <vigneshr@ti.com>
Date:   Tue Sep 25 14:00:24 2018 +0530

    PCI: dwc: pci-dra7xx: Enable errata i870 for both EP and RC mode
    
    [ Upstream commit 726d75a6d243bf6730da3216f3592503f6f0f588 ]
    
    Errata i870 is applicable in both EP and RC mode. Therefore rename
    function dra7xx_pcie_ep_unaligned_memaccess(), that implements errata
    workaround, to dra7xx_pcie_unaligned_memaccess() and call it for both RC
    and EP. Make sure driver probe does not fail in case the workaround is not
    applied for RC mode in order to maintain DT backward compatibility.
    
    Reported-by: Chris Welch <Chris.Welch@viavisolutions.com>
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    [lorenzo.pieralisi@arm.com: reworded the log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d20b616732e103070f2ffcd061ec0812754808a
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Thu Sep 20 13:17:46 2018 -0600

    coresight: etb10: Fix handling of perf mode
    
    [ Upstream commit 987d1e8dcd370d96029a3d76a0031b043c4a69ae ]
    
    If the ETB is already enabled in sysfs mode, the ETB reports
    success even if a perf mode is requested. Fix this by checking
    the requested mode.
    
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cc76433d8c9dd666c19b1aaefd5c55a31115f89
Author: Tonghao Zhang <xiangxia.m.yue@gmail.com>
Date:   Mon Sep 24 07:00:41 2018 -0700

    PCI/MSI: Warn and return error if driver enables MSI/MSI-X twice
    
    [ Upstream commit 4c1ef72e9b71a19fb405ebfcd37c0a5e16fa44ca ]
    
    It is a serious driver defect to enable MSI or MSI-X more than once.  Doing
    so may panic the kernel as in the stack trace below:
    
      Call Trace:
        sysfs_add_one+0xa5/0xd0
        create_dir+0x7c/0xe0
        sysfs_create_subdir+0x1c/0x20
        internal_create_group+0x6d/0x290
        sysfs_create_groups+0x4a/0xa0
        populate_msi_sysfs+0x1cd/0x210
        pci_enable_msix+0x31c/0x3e0
        igbuio_pci_open+0x72/0x300 [igb_uio]
        uio_open+0xcc/0x120 [uio]
        chrdev_open+0xa1/0x1e0
        [...]
        do_sys_open+0xf3/0x1f0
        SyS_open+0x1e/0x20
        system_call_fastpath+0x16/0x1b
        ---[ end trace 11042e2848880209 ]---
        Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: ffffffffa056b4fa
    
    We want to keep the WARN_ON() and stack trace so the driver can be fixed,
    but we can avoid the kernel panic by returning an error.  We may still get
    warnings like this:
    
      Call Trace:
        pci_enable_msix+0x3c9/0x3e0
        igbuio_pci_open+0x72/0x300 [igb_uio]
        uio_open+0xcc/0x120 [uio]
        chrdev_open+0xa1/0x1e0
        [...]
        do_sys_open+0xf3/0x1f0
        SyS_open+0x1e/0x20
        system_call_fastpath+0x16/0x1b
        ------------[ cut here ]------------
        WARNING: at fs/sysfs/dir.c:526 sysfs_add_one+0xa5/0xd0()
        sysfs: cannot create duplicate filename '/devices/pci0000:00/0000:00:03.0/0000:01:00.1/msi_irqs'
    
    Signed-off-by: Tonghao Zhang <xiangxia.m.yue@gmail.com>
    [bhelgaas: changelog, fix patch whitespace, remove !!]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34068ae1fa0a91f48ceea69d063ae6f6701d083d
Author: Chao Yu <chao@kernel.org>
Date:   Tue Sep 25 15:35:59 2018 +0800

    f2fs: fix to recover inode's i_flags during POR
    
    [ Upstream commit 19c73a691ccf6fb2f12d4e9cf9830023966cec88 ]
    
    Testcase to reproduce this bug:
    1. mkfs.f2fs /dev/sdd
    2. mount -t f2fs /dev/sdd /mnt/f2fs
    3. touch /mnt/f2fs/file
    4. sync
    5. chattr +A /mnt/f2fs/file
    6. xfs_io -f /mnt/f2fs/file -c "fsync"
    7. godown /mnt/f2fs
    8. umount /mnt/f2fs
    9. mount -t f2fs /dev/sdd /mnt/f2fs
    10. lsattr /mnt/f2fs/file
    
    -----------------N- /mnt/f2fs/file
    
    But actually, we expect the corrct result is:
    
    -------A---------N- /mnt/f2fs/file
    
    The reason is we didn't recover inode.i_flags field during mount,
    fix it.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 442e2ba5724121abc355712715d027b8453e33c9
Author: Shaohua Li <shli@fb.com>
Date:   Mon Oct 1 18:36:36 2018 -0700

    MD: fix invalid stored role for a disk
    
    [ Upstream commit d595567dc4f0c1d90685ec1e2e296e2cad2643ac ]
    
    If we change the number of array's device after device is removed from array,
    then add the device back to array, we can see that device is added as active
    role instead of spare which we expected.
    
    Please see the below link for details:
    https://marc.info/?l=linux-raid&m=153736982015076&w=2
    
    This is caused by that we prefer to use device's previous role which is
    recorded by saved_raid_disk, but we should respect the new number of
    conf->raid_disks since it could be changed after device is removed.
    
    Reported-by: Gioh Kim <gi-oh.kim@profitbricks.com>
    Tested-by: Gioh Kim <gi-oh.kim@profitbricks.com>
    Acked-by: Guoqing Jiang <gqjiang@suse.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e75ca3babf06fd59af2e807415f0016d7793d3c9
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Tue Oct 2 01:34:44 2018 -0400

    ext4: fix argument checking in EXT4_IOC_MOVE_EXT
    
    [ Upstream commit f18b2b83a727a3db208308057d2c7945f368e625 ]
    
    If the starting block number of either the source or destination file
    exceeds the EOF, EXT4_IOC_MOVE_EXT should return EINVAL.
    
    Also fixed the helper function mext_check_coverage() so that if the
    logical block is beyond EOF, make it return immediately, instead of
    looping until the block number wraps all the away around.  This takes
    long enough that if there are multiple threads trying to do pound on
    an the same inode doing non-sensical things, it can end up triggering
    the kernel's soft lockup detector.
    
    Reported-by: syzbot+c61979f6f2cba5cb3c06@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19216bf2820e8b8f98e76baf6964a86faed8027e
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Mon Sep 10 22:12:49 2018 +0200

    usb: gadget: udc: atmel: handle at91sam9rl PMC
    
    [ Upstream commit bb80e4fa57eb75ebd64ae9be4155da6d12c1a997 ]
    
    The at91sam9rl PMC is not quite the same as the at91sam9g45 one and now has
    its own compatible string. Add support for that.
    
    Fixes: 217bace8e548 ("ARM: dts: fix PMC compatible")
    Acked-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e105738583b02017b92ddfd2676f8bc408b88781
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Thu Sep 27 16:54:13 2018 -0500

    PCI / ACPI: Enable wake automatically for power managed bridges
    
    [ Upstream commit 6299cf9ec3985cac70bede8a855b5087b81a6640 ]
    
    We enable power management automatically for bridges where
    pci_bridge_d3_possible() returns true. However, these bridges may have
    ACPI methods such as _DSW that need to be called before D3 entry. For
    example in Lenovo Thinkpad X1 Carbon 6th _DSW method is used to prepare
    D3cold for the PCIe root port hosting Thunderbolt chain. Because wake is
    not enabled _DSW method is never called and the port does not enter
    D3cold properly consuming more power than necessary.
    
    Users can work this around by writing "enabled" to "wakeup" sysfs file
    under the device in question but that is not something an ordinary user
    is expected to do.
    
    Since we already automatically enable power management for PCIe ports
    with ->bridge_d3 set extend that to enable wake for them as well,
    assuming the port has any ACPI wakeup related objects implemented in the
    namespace (adev->wakeup.flags.valid is true). This ensures the necessary
    ACPI methods get called at appropriate times and allows the root port in
    Thinkpad X1 Carbon 6th to go into D3cold.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9ecbed15e83db8b2ff245c3b6138225e6f9783b
Author: Jorgen Hansen <jhansen@vmware.com>
Date:   Fri Sep 21 00:31:05 2018 -0700

    VMCI: Resource wildcard match fixed
    
    [ Upstream commit 11924ba5e671d6caef1516923e2bd8c72929a3fe ]
    
    When adding a VMCI resource, the check for an existing entry
    would ignore that the new entry could be a wildcard. This could
    result in multiple resource entries that would match a given
    handle. One disastrous outcome of this is that the
    refcounting used to ensure that delayed callbacks for VMCI
    datagrams have run before the datagram is destroyed can be
    wrong, since the refcount could be increased on the duplicate
    entry. This in turn leads to a use after free bug. This issue
    was discovered by Hangbin Liu using KASAN and syzkaller.
    
    Fixes: bc63dedb7d46 ("VMCI: resource object implementation")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Adit Ranadive <aditr@vmware.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: Jorgen Hansen <jhansen@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f4850858f8584a45652ac83fe21feaf7b45c87c
Author: Dexuan Cui <decui@microsoft.com>
Date:   Sun Sep 23 21:10:44 2018 +0000

    Drivers: hv: vmbus: Use cpumask_var_t for on-stack cpu mask
    
    [ Upstream commit 25355252607ca288f329ee033f387764883393f6 ]
    
    A cpumask structure on the stack can cause a warning with
    CONFIG_NR_CPUS=8192 (e.g. Ubuntu 16.04 and 18.04 use this):
    
    drivers/hv//channel_mgmt.c: In function ‘init_vp_index’:
    drivers/hv//channel_mgmt.c:702:1: warning: the frame size of 1032 bytes
      is larger than 1024 bytes [-Wframe-larger-than=]
    
    Nowadays it looks most distros enable CONFIG_CPUMASK_OFFSTACK=y, and
    hence we can work around the warning by using cpumask_var_t.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6057caad215b163aca43c7e0346e2dbc052cc10a
Author: Javier Martinez Canillas <javierm@redhat.com>
Date:   Thu Aug 30 16:40:05 2018 +0200

    tpm: suppress transmit cmd error logs when TPM 1.2 is disabled/deactivated
    
    [ Upstream commit 0d6d0d62d9505a9816716aa484ebd0b04c795063 ]
    
    For TPM 1.2 chips the system setup utility allows to set the TPM device in
    one of the following states:
    
      * Active: Security chip is functional
      * Inactive: Security chip is visible, but is not functional
      * Disabled: Security chip is hidden and is not functional
    
    When choosing the "Inactive" state, the TPM 1.2 device is enumerated and
    registered, but sending TPM commands fail with either TPM_DEACTIVATED or
    TPM_DISABLED depending if the firmware deactivated or disabled the TPM.
    
    Since these TPM 1.2 error codes don't have special treatment, inactivating
    the TPM leads to a very noisy kernel log buffer that shows messages like
    the following:
    
      tpm_tis 00:05: 1.2 TPM (device-id 0x0, rev-id 78)
      tpm tpm0: A TPM error (6) occurred attempting to read a pcr value
      tpm tpm0: TPM is disabled/deactivated (0x6)
      tpm tpm0: A TPM error (6) occurred attempting get random
      tpm tpm0: A TPM error (6) occurred attempting to read a pcr value
      ima: No TPM chip found, activating TPM-bypass! (rc=6)
      tpm tpm0: A TPM error (6) occurred attempting get random
      tpm tpm0: A TPM error (6) occurred attempting get random
      tpm tpm0: A TPM error (6) occurred attempting get random
      tpm tpm0: A TPM error (6) occurred attempting get random
    
    Let's just suppress error log messages for the TPM_{DEACTIVATED,DISABLED}
    return codes, since this is expected when the TPM 1.2 is set to Inactive.
    
    In that case the kernel log is cleaner and less confusing for users, i.e:
    
      tpm_tis 00:05: 1.2 TPM (device-id 0x0, rev-id 78)
      tpm tpm0: TPM is disabled/deactivated (0x6)
      ima: No TPM chip found, activating TPM-bypass! (rc=6)
    
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38ee346ac1fee2f3da3bfb6ae0e0c07fb85c9f77
Author: Honghui Zhang <honghui.zhang@mediatek.com>
Date:   Mon Oct 15 16:08:52 2018 +0800

    PCI: mediatek: Fix mtk_pcie_find_port() endpoint/port matching logic
    
    [ Upstream commit 074d6f32689ce05a084b6fa3db38445745bf11cc ]
    
    The Mediatek's host controller has two slots, each with its own control
    registers. The host driver needs to identify what slot is connected to
    what port in order to access the device's configuration space.
    
    Current code retrieving slot connected to a given endpoint device.
    
    Assuming each slot is connected to one endpoint device as below:
    
                    host bridge
      bus 0 --> __________|_______
               |                  |
               |                  |
             slot 0             slot 1
      bus 1 -->|        bus 2 --> |
               |                  |
             EP 0               EP 1
    
    During PCI enumeration, system software will scan all the PCI devices on
    every bus starting from devfn 0. Using PCI_SLOT(devfn) for matching an
    endpoint to its slot is erroneous in that the devfn does not contain the
    hierarchical bus numbering in it. In order to match an endpoint with its
    slot (and related port), the PCI tree must be walked up to the root bus
    (where the root ports are situated) and then the PCI_SLOT(devfn)
    matching logic can be correctly applied for matching.
    
    This patch fixes the mtk_pcie_find_port() slot matching logic by adding
    appropriate PCI tree walking code to retrieve the slot/port a given
    endpoint is connected to.
    
    Signed-off-by: Honghui Zhang <honghui.zhang@mediatek.com>
    [lorenzo.pieralisi@arm.com: rewrote the commit log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Ryder Lee <ryder.lee@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07335466dd5aa91f0e4b60b3254bd032f98d4fd8
Author: Tudor.Ambarus@microchip.com <Tudor.Ambarus@microchip.com>
Date:   Mon Oct 15 09:00:54 2018 +0000

    usb: host: ohci-at91: fix request of irq for optional gpio
    
    [ Upstream commit 325b9313ec3be56c8e2fe03f977fee19cec75820 ]
    
    atmel,oc-gpio is optional. Request its irq only when atmel,oc is set
    in device tree.
    
    devm_gpiod_get_index_optional returns NULL if -ENOENT. Check its
    return value for NULL before error, because it is more probable that
    atmel,oc is not set.
    
    This fixes the following errors on boards where atmel,oc is not set in
    device tree:
    [    0.960000] at91_ohci 500000.ohci: failed to request gpio "overcurrent" IRQ
    [    0.960000] at91_ohci 500000.ohci: failed to request gpio "overcurrent" IRQ
    [    0.970000] at91_ohci 500000.ohci: failed to request gpio "overcurrent" IRQ
    
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88018bc071bcfd70b151ff236b6029cc3a9ff7c6
Author: Selvin Xavier <selvin.xavier@broadcom.com>
Date:   Mon Oct 8 03:27:53 2018 -0700

    RDMA/bnxt_re: Fix recursive lock warning in debug kernel
    
    [ Upstream commit d455f29f6d76a5f94881ca1289aaa1e90617ff5d ]
    
    Fix possible recursive lock warning. Its a false warning as the locks are
    part of two differnt HW Queue data structure - cmdq and creq. Debug kernel
    is throwing the following warning and stack trace.
    
    [  783.914967] ============================================
    [  783.914970] WARNING: possible recursive locking detected
    [  783.914973] 4.19.0-rc2+ #33 Not tainted
    [  783.914976] --------------------------------------------
    [  783.914979] swapper/2/0 is trying to acquire lock:
    [  783.914982] 000000002aa3949d (&(&hwq->lock)->rlock){..-.}, at: bnxt_qplib_service_creq+0x232/0x350 [bnxt_re]
    [  783.914999]
    but task is already holding lock:
    [  783.915002] 00000000be73920d (&(&hwq->lock)->rlock){..-.}, at: bnxt_qplib_service_creq+0x2a/0x350 [bnxt_re]
    [  783.915013]
    other info that might help us debug this:
    [  783.915016]  Possible unsafe locking scenario:
    
    [  783.915019]        CPU0
    [  783.915021]        ----
    [  783.915034]   lock(&(&hwq->lock)->rlock);
    [  783.915035]   lock(&(&hwq->lock)->rlock);
    [  783.915037]
     *** DEADLOCK ***
    
    [  783.915038]  May be due to missing lock nesting notation
    
    [  783.915039] 1 lock held by swapper/2/0:
    [  783.915040]  #0: 00000000be73920d (&(&hwq->lock)->rlock){..-.}, at: bnxt_qplib_service_creq+0x2a/0x350 [bnxt_re]
    [  783.915044]
    stack backtrace:
    [  783.915046] CPU: 2 PID: 0 Comm: swapper/2 Not tainted 4.19.0-rc2+ #33
    [  783.915047] Hardware name: Dell Inc. PowerEdge R730/0599V5, BIOS 1.0.4 08/28/2014
    [  783.915048] Call Trace:
    [  783.915049]  <IRQ>
    [  783.915054]  dump_stack+0x90/0xe3
    [  783.915058]  __lock_acquire+0x106c/0x1080
    [  783.915061]  ? sched_clock+0x5/0x10
    [  783.915063]  lock_acquire+0xbd/0x1a0
    [  783.915065]  ? bnxt_qplib_service_creq+0x232/0x350 [bnxt_re]
    [  783.915069]  _raw_spin_lock_irqsave+0x4a/0x90
    [  783.915071]  ? bnxt_qplib_service_creq+0x232/0x350 [bnxt_re]
    [  783.915073]  bnxt_qplib_service_creq+0x232/0x350 [bnxt_re]
    [  783.915078]  tasklet_action_common.isra.17+0x197/0x1b0
    [  783.915081]  __do_softirq+0xcb/0x3a6
    [  783.915084]  irq_exit+0xe9/0x100
    [  783.915085]  do_IRQ+0x6a/0x120
    [  783.915087]  common_interrupt+0xf/0xf
    [  783.915088]  </IRQ>
    
    Use nested notation for the spin_lock to avoid this warning.
    
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b020347269610f3ac05d27c3851e9aa8d1257141
Author: Denis Drozdov <denisd@mellanox.com>
Date:   Thu Oct 11 22:33:57 2018 +0300

    IB/ipoib: Clear IPCB before icmp_send
    
    [ Upstream commit 4d6e4d12da2c308f8f976d3955c45ee62539ac98 ]
    
    IPCB should be cleared before icmp_send, since it may contain data from
    previous layers and the data could be misinterpreted as ip header options,
    which later caused the ihl to be set to an invalid value and resulted in
    the following stack corruption:
    
    [ 1083.031512] ib0: packet len 57824 (> 2048) too long to send, dropping
    [ 1083.031843] ib0: packet len 37904 (> 2048) too long to send, dropping
    [ 1083.032004] ib0: packet len 4040 (> 2048) too long to send, dropping
    [ 1083.032253] ib0: packet len 63800 (> 2048) too long to send, dropping
    [ 1083.032481] ib0: packet len 23960 (> 2048) too long to send, dropping
    [ 1083.033149] ib0: packet len 63800 (> 2048) too long to send, dropping
    [ 1083.033439] ib0: packet len 63800 (> 2048) too long to send, dropping
    [ 1083.033700] ib0: packet len 63800 (> 2048) too long to send, dropping
    [ 1083.034124] ib0: packet len 63800 (> 2048) too long to send, dropping
    [ 1083.034387] ==================================================================
    [ 1083.034602] BUG: KASAN: stack-out-of-bounds in __ip_options_echo+0xf08/0x1310
    [ 1083.034798] Write of size 4 at addr ffff880353457c5f by task kworker/u16:0/7
    [ 1083.034990]
    [ 1083.035104] CPU: 7 PID: 7 Comm: kworker/u16:0 Tainted: G           O      4.19.0-rc5+ #1
    [ 1083.035316] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu2 04/01/2014
    [ 1083.035573] Workqueue: ipoib_wq ipoib_cm_skb_reap [ib_ipoib]
    [ 1083.035750] Call Trace:
    [ 1083.035888]  dump_stack+0x9a/0xeb
    [ 1083.036031]  print_address_description+0xe3/0x2e0
    [ 1083.036213]  kasan_report+0x18a/0x2e0
    [ 1083.036356]  ? __ip_options_echo+0xf08/0x1310
    [ 1083.036522]  __ip_options_echo+0xf08/0x1310
    [ 1083.036688]  icmp_send+0x7b9/0x1cd0
    [ 1083.036843]  ? icmp_route_lookup.constprop.9+0x1070/0x1070
    [ 1083.037018]  ? netif_schedule_queue+0x5/0x200
    [ 1083.037180]  ? debug_show_all_locks+0x310/0x310
    [ 1083.037341]  ? rcu_dynticks_curr_cpu_in_eqs+0x85/0x120
    [ 1083.037519]  ? debug_locks_off+0x11/0x80
    [ 1083.037673]  ? debug_check_no_obj_freed+0x207/0x4c6
    [ 1083.037841]  ? check_flags.part.27+0x450/0x450
    [ 1083.037995]  ? debug_check_no_obj_freed+0xc3/0x4c6
    [ 1083.038169]  ? debug_locks_off+0x11/0x80
    [ 1083.038318]  ? skb_dequeue+0x10e/0x1a0
    [ 1083.038476]  ? ipoib_cm_skb_reap+0x2b5/0x650 [ib_ipoib]
    [ 1083.038642]  ? netif_schedule_queue+0xa8/0x200
    [ 1083.038820]  ? ipoib_cm_skb_reap+0x544/0x650 [ib_ipoib]
    [ 1083.038996]  ipoib_cm_skb_reap+0x544/0x650 [ib_ipoib]
    [ 1083.039174]  process_one_work+0x912/0x1830
    [ 1083.039336]  ? wq_pool_ids_show+0x310/0x310
    [ 1083.039491]  ? lock_acquire+0x145/0x3a0
    [ 1083.042312]  worker_thread+0x87/0xbb0
    [ 1083.045099]  ? process_one_work+0x1830/0x1830
    [ 1083.047865]  kthread+0x322/0x3e0
    [ 1083.050624]  ? kthread_create_worker_on_cpu+0xc0/0xc0
    [ 1083.053354]  ret_from_fork+0x3a/0x50
    
    For instance __ip_options_echo is failing to proceed with invalid srr and
    optlen passed from another layer via IPCB
    
    [  762.139568] IPv4: __ip_options_echo rr=0 ts=0 srr=43 cipso=0
    [  762.139720] IPv4: ip_options_build: IPCB 00000000f3cd969e opt 000000002ccb3533
    [  762.139838] IPv4: __ip_options_echo in srr: optlen 197 soffset 84
    [  762.139852] IPv4: ip_options_build srr=0 is_frag=0 rr_needaddr=0 ts_needaddr=0 ts_needtime=0 rr=0 ts=0
    [  762.140269] ==================================================================
    [  762.140713] IPv4: __ip_options_echo rr=0 ts=0 srr=0 cipso=0
    [  762.141078] BUG: KASAN: stack-out-of-bounds in __ip_options_echo+0x12ec/0x1680
    [  762.141087] Write of size 4 at addr ffff880353457c7f by task kworker/u16:0/7
    
    Signed-off-by: Denis Drozdov <denisd@mellanox.com>
    Reviewed-by: Erez Shitrit <erezsh@mellanox.com>
    Reviewed-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 670ebdf0c41d366ca024f4d1016248e166f8b046
Author: Parav Pandit <parav@mellanox.com>
Date:   Sun Oct 7 12:12:40 2018 +0300

    RDMA/core: Do not expose unsupported counters
    
    [ Upstream commit 0f6ef65d1c6ec8deb5d0f11f86631ec4cfe8f22e ]
    
    If the provider driver (such as rdma_rxe) doesn't support pma counters,
    avoid exposing its directory similar to optional hw_counters directory.
    If core fails to read the PMA counter, return an error so that user can
    retry later if needed.
    
    Fixes: 35c4cbb17811 ("IB/core: Create get_perf_mad function in sysfs.c")
    Reported-by: Holger Hoffstätte <holger@applied-asynchrony.com>
    Tested-by: Holger Hoffstätte <holger@applied-asynchrony.com>
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4877db2eab42c7f451f15a1d47a7832b76cd6b98
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Sat Oct 6 13:34:21 2018 -0500

    scsi: megaraid_sas: fix a missing-check bug
    
    [ Upstream commit 47db7873136a9c57c45390a53b57019cf73c8259 ]
    
    In megasas_mgmt_compat_ioctl_fw(), to handle the structure
    compat_megasas_iocpacket 'cioc', a user-space structure megasas_iocpacket
    'ioc' is allocated before megasas_mgmt_ioctl_fw() is invoked to handle
    the packet. Since the two data structures have different fields, the data
    is copied from 'cioc' to 'ioc' field by field. In the copy process,
    'sense_ptr' is prepared if the field 'sense_len' is not null, because it
    will be used in megasas_mgmt_ioctl_fw(). To prepare 'sense_ptr', the
    user-space data 'ioc->sense_off' and 'cioc->sense_off' are copied and
    saved to kernel-space variables 'local_sense_off' and 'user_sense_off'
    respectively. Given that 'ioc->sense_off' is also copied from
    'cioc->sense_off', 'local_sense_off' and 'user_sense_off' should have the
    same value. However, 'cioc' is in the user space and a malicious user can
    race to change the value of 'cioc->sense_off' after it is copied to
    'ioc->sense_off' but before it is copied to 'user_sense_off'. By doing
    so, the attacker can inject different values into 'local_sense_off' and
    'user_sense_off'. This can cause undefined behavior in the following
    execution, because the two variables are supposed to be same.
    
    This patch enforces a check on the two kernel variables 'local_sense_off'
    and 'user_sense_off' to make sure they are the same after the copy. In
    case they are not, an error code EINVAL will be returned.
    
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Acked-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d6c6f839e989f0488e0c4a5e2b789bc3cbd0078
Author: Jim Mattson <jmattson@google.com>
Date:   Fri Sep 21 10:36:17 2018 -0700

    KVM: nVMX: Clear reserved bits of #DB exit qualification
    
    [ Upstream commit cfb634fe3052aefc4e1360fa322018c9a0b49755 ]
    
    According to volume 3 of the SDM, bits 63:15 and 12:4 of the exit
    qualification field for debug exceptions are reserved (cleared to
    0). However, the SDM is incorrect about bit 16 (corresponding to
    DR6.RTM). This bit should be set if a debug exception (#DB) or a
    breakpoint exception (#BP) occurred inside an RTM region while
    advanced debugging of RTM transactional regions was enabled. Note that
    this is the opposite of DR6.RTM, which "indicates (when clear) that a
    debug exception (#DB) or breakpoint exception (#BP) occurred inside an
    RTM region while advanced debugging of RTM transactional regions was
    enabled."
    
    There is still an issue with stale DR6 bits potentially being
    misreported for the current debug exception.  DR6 should not have been
    modified before vectoring the #DB exception, and the "new DR6 bits"
    should be available somewhere, but it was and they aren't.
    
    Fixes: b96fb439774e1 ("KVM: nVMX: fixes to nested virt interrupt injection")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be5658a1dce1664c9b1b414a2ce1a14eceea590a
Author: David Howells <dhowells@redhat.com>
Date:   Thu Sep 6 10:19:24 2018 +0100

    UAPI: ndctl: Fix g++-unsupported initialisation in headers
    
    [ Upstream commit 9607871f37dc3e717639694b8d0dc738f2a68efc ]
    
    The following code in the linux/ndctl header file:
    
            static inline const char *nvdimm_bus_cmd_name(unsigned cmd)
            {
                    static const char * const names[] = {
                            [ND_CMD_ARS_CAP] = "ars_cap",
                            [ND_CMD_ARS_START] = "ars_start",
                            [ND_CMD_ARS_STATUS] = "ars_status",
                            [ND_CMD_CLEAR_ERROR] = "clear_error",
                            [ND_CMD_CALL] = "cmd_call",
                    };
    
                    if (cmd < ARRAY_SIZE(names) && names[cmd])
                            return names[cmd];
                    return "unknown";
            }
    
    is broken in a number of ways:
    
     (1) ARRAY_SIZE() is not generally defined.
    
     (2) g++ does not support "non-trivial" array initialisers fully yet.
    
     (3) Every file that calls this function will acquire a copy of names[].
    
    The same goes for nvdimm_cmd_name().
    
    Fix all three by converting to a switch statement where each case returns a
    string.  That way if cmd is a constant, the compiler can trivially reduce it
    and, if not, the compiler can use a shared lookup table if it thinks that is
    more efficient.
    
    A better way would be to remove these functions and their arrays from the
    header entirely.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94dc21c6a549aa67c8403142496c1531b91ded33
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Tue Oct 16 16:31:25 2018 +1100

    scsi: esp_scsi: Track residual for PIO transfers
    
    [ Upstream commit fd47d919d0c336e7c22862b51ee94927ffea227a ]
    
    If a target disconnects during a PIO data transfer the command may fail
    when the target reconnects:
    
    scsi host1: DMA length is zero!
    scsi host1: cur adr[04380000] len[00000000]
    
    The scsi bus is then reset. This happens because the residual reached
    zero before the transfer was completed.
    
    The usual residual calculation relies on the Transfer Count registers.
    That works for DMA transfers but not for PIO transfers. Fix the problem
    by storing the PIO transfer residual and using that to correctly
    calculate bytes_sent.
    
    Fixes: 6fe07aaffbf0 ("[SCSI] m68k: new mac_esp scsi driver")
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Tested-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09d43edcdaef8961f01ae499b836e3cb39e47f83
Author: Michal Hocko <mhocko@suse.com>
Date:   Thu Oct 18 10:56:17 2018 +0200

    cgroup, netclassid: add a preemption point to write_classid
    
    [ Upstream commit a90e90b7d55e789c71d85b946ffb5c1ab2f137ca ]
    
    We have seen a customer complaining about soft lockups on !PREEMPT
    kernel config with 4.4 based kernel
    
    [1072141.435366] NMI watchdog: BUG: soft lockup - CPU#21 stuck for 22s! [systemd:1]
    [1072141.444090] Modules linked in: mpt3sas raid_class binfmt_misc af_packet 8021q garp mrp stp llc xfs libcrc32c bonding iscsi_ibft iscsi_boot_sysfs msr ext4 crc16 jbd2 mbcache cdc_ether usbnet mii joydev hid_generic usbhid intel_rapl x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul ghash_clmulni_intel ipmi_ssif mgag200 i2c_algo_bit ttm ipmi_devintf drbg ixgbe drm_kms_helper vxlan ansi_cprng ip6_udp_tunnel drm aesni_intel udp_tunnel aes_x86_64 iTCO_wdt syscopyarea ptp xhci_pci lrw iTCO_vendor_support pps_core gf128mul ehci_pci glue_helper sysfillrect mdio pcspkr sb_edac ablk_helper cryptd ehci_hcd sysimgblt xhci_hcd fb_sys_fops edac_core mei_me lpc_ich ses usbcore enclosure dca mfd_core ipmi_si mei i2c_i801 scsi_transport_sas usb_common ipmi_msghandler shpchp fjes wmi processor button acpi_pad btrfs xor raid6_pq sd_mod crc32c_intel megaraid_sas sg dm_multipath dm_mod scsi_dh_rdac scsi_dh_emc scsi_dh_alua scsi_mod md_mod autofs4
    [1072141.444146] Supported: Yes
    [1072141.444149] CPU: 21 PID: 1 Comm: systemd Not tainted 4.4.121-92.80-default #1
    [1072141.444150] Hardware name: LENOVO Lenovo System x3650 M5 -[5462P4U]- -[5462P4U]-/01GR451, BIOS -[TCE136H-2.70]- 06/13/2018
    [1072141.444151] task: ffff880191bd0040 ti: ffff880191bd4000 task.ti: ffff880191bd4000
    [1072141.444153] RIP: 0010:[<ffffffff815229f9>]  [<ffffffff815229f9>] update_classid_sock+0x29/0x40
    [1072141.444157] RSP: 0018:ffff880191bd7d58  EFLAGS: 00000286
    [1072141.444158] RAX: ffff883b177cb7c0 RBX: 0000000000000000 RCX: 0000000000000000
    [1072141.444159] RDX: 00000000000009c7 RSI: ffff880191bd7d5c RDI: ffff8822e29bb200
    [1072141.444160] RBP: ffff883a72230980 R08: 0000000000000101 R09: 0000000000000000
    [1072141.444161] R10: 0000000000000008 R11: f000000000000000 R12: ffffffff815229d0
    [1072141.444162] R13: 0000000000000000 R14: ffff881fd0a47ac0 R15: ffff880191bd7f28
    [1072141.444163] FS:  00007f3e2f1eb8c0(0000) GS:ffff882000340000(0000) knlGS:0000000000000000
    [1072141.444164] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [1072141.444165] CR2: 00007f3e2f200000 CR3: 0000001ffea4e000 CR4: 00000000001606f0
    [1072141.444166] Stack:
    [1072141.444166]  ffffffa800000246 00000000000009c7 ffffffff8121d583 ffff8818312a05c0
    [1072141.444168]  ffff8818312a1100 ffff880197c3b280 ffff881861422858 ffffffffffffffea
    [1072141.444170]  ffffffff81522b1c ffffffff81d0ca20 ffff8817fa17b950 ffff883fdd8121e0
    [1072141.444171] Call Trace:
    [1072141.444179]  [<ffffffff8121d583>] iterate_fd+0x53/0x80
    [1072141.444182]  [<ffffffff81522b1c>] write_classid+0x4c/0x80
    [1072141.444187]  [<ffffffff8111328b>] cgroup_file_write+0x9b/0x100
    [1072141.444193]  [<ffffffff81278bcb>] kernfs_fop_write+0x11b/0x150
    [1072141.444198]  [<ffffffff81201566>] __vfs_write+0x26/0x100
    [1072141.444201]  [<ffffffff81201bed>] vfs_write+0x9d/0x190
    [1072141.444203]  [<ffffffff812028c2>] SyS_write+0x42/0xa0
    [1072141.444207]  [<ffffffff815f58c3>] entry_SYSCALL_64_fastpath+0x1e/0xca
    [1072141.445490] DWARF2 unwinder stuck at entry_SYSCALL_64_fastpath+0x1e/0xca
    
    If a cgroup has many tasks with many open file descriptors then we would
    end up in a large loop without any rescheduling point throught the
    operation. Add cond_resched once per task.
    
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a76f5c5b1014e7d59f87cb054f332ff8b1deea9
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Oct 12 09:20:17 2018 +0200

    thermal: da9062/61: Prevent hardware access during system suspend
    
    [ Upstream commit 760eea43f8c6d48684f1f34b8a02fddc1456e849 ]
    
    The workqueue used for monitoring the hardware may run while the device
    is already suspended.  Fix this by using the freezable system workqueue
    instead, cfr. commit 51e20d0e3a60cf46 ("thermal: Prevent polling from
    happening during system suspend").
    
    Fixes: 608567aac3206ae8 ("thermal: da9062/61: Thermal junction temperature monitoring driver")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Steve Twiss <stwiss.opensource@diasemi.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef5d27e1ed9c97c0670d0aa1f433f68e29de5bfb
Author: Martin Willi <martin@strongswan.org>
Date:   Wed Aug 22 09:39:52 2018 +0200

    ath10k: schedule hardware restart if WMI command times out
    
    [ Upstream commit a9911937e7d332761e8c4fcbc7ba0426bdc3956f ]
    
    When running in AP mode, ath10k sometimes suffers from TX credit
    starvation. The issue is hard to reproduce and shows up once in a
    few days, but has been repeatedly seen with QCA9882 and a large
    range of firmwares, including 10.2.4.70.67.
    
    Once the module is in this state, TX credits are never replenished,
    which results in "SWBA overrun" errors, as no beacons can be sent.
    Even worse, WMI commands run in a timeout while holding the conf
    mutex for three seconds each, making any further operations slow
    and the whole system unresponsive.
    
    The firmware/driver never recovers from that state automatically,
    and triggering TX flush or warm restarts won't work over WMI. So
    issue a hardware restart if a WMI command times out due to missing
    TX credits. This implies a connectivity outage of about 1.4s in AP
    mode, but brings back the interface and the whole system to a usable
    state. WMI command timeouts have not been seen in absent of this
    specific issue, so taking such drastic actions seems legitimate.
    
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca18ed4416bb83d91e6759ae6d9cfd84e2b11442
Author: Sebastian Basierski <sebastianx.basierski@intel.com>
Date:   Thu Aug 9 11:45:40 2018 +0200

    ixgbevf: VF2VF TCP RSS
    
    [ Upstream commit 7fb94bd58dd6650a0158e68d414e185077d8b57a ]
    
    While VF2VF with RSS communication, RSS Type were wrongly recognized
    and RSS hash was not calculated as it should be. Packets was
    distributed on various queues by accident.
    This commit fixes that behaviour and causes proper RSS Type recognition.
    
    Signed-off-by: Sebastian Basierski <sebastianx.basierski@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8692ff190ca02538538a2d020294fb2feccfc507
Author: Sara Sharon <sara.sharon@intel.com>
Date:   Tue May 1 14:54:22 2018 +0300

    iwlwifi: mvm: fix BAR seq ctrl reporting
    
    [ Upstream commit 941ab4eb66c10bc5c7234e83a7a858b2806ed151 ]
    
    There is a bug in FW where the sequence control may be
    incorrect, and the driver overrides it with the value
    of the ieee80211 header.
    
    However, in BAR there is no sequence control in the header,
    which result with arbitrary sequence.
    
    This access to an unknown location is bad and it makes the
    logs very confusing - so fix it.
    
    Signed-off-by: Sara Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 189f98295600fc5bfc33cf0aa05392cf7f074650
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Sep 2 18:13:14 2018 +0200

    net: dsa: mv88e6xxx: Fix writing to a PHY page.
    
    [ Upstream commit c309b158090d788e96ee597444965cb79b040484 ]
    
    After changing to the needed page, actually write the value to the
    register!
    
    Fixes: 09cb7dfd3f14 ("net: dsa: mv88e6xxx: describe PHY page and SerDes")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7111ec0bdf1e3a833965ab6df7258066f95c7ec
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 30 08:23:38 2018 -0700

    pinctrl: ssbi-gpio: Fix pm8xxx_pin_config_get() to be compliant
    
    [ Upstream commit b432414b996d32a1bd9afe2bd595bd5729c1477f ]
    
    If you look at "pinconf-groups" in debugfs for ssbi-gpio you'll notice
    it looks like nonsense.
    
    The problem is fairly well described in commit 1cf86bc21257 ("pinctrl:
    qcom: spmi-gpio: Fix pmic_gpio_config_get() to be compliant") and
    commit 05e0c828955c ("pinctrl: msm: Fix msm_config_group_get() to be
    compliant"), but it was pointed out that ssbi-gpio has the same
    problem.  Let's fix it there too.
    
    Fixes: b4c45fe974bc ("pinctrl: qcom: ssbi: Family A gpio & mpp drivers")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <sboyd@kernel.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49d44c0a0b2d03fdb60fd217d6234e1987cb3040
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 30 08:23:39 2018 -0700

    pinctrl: spmi-mpp: Fix pmic_mpp_config_get() to be compliant
    
    [ Upstream commit 0d5b476f8f57fcb06c45fe27681ac47254f63fd2 ]
    
    If you look at "pinconf-groups" in debugfs for ssbi-mpp you'll notice
    it looks like nonsense.
    
    The problem is fairly well described in commit 1cf86bc21257 ("pinctrl:
    qcom: spmi-gpio: Fix pmic_gpio_config_get() to be compliant") and
    commit 05e0c828955c ("pinctrl: msm: Fix msm_config_group_get() to be
    compliant"), but it was pointed out that ssbi-mpp has the same
    problem.  Let's fix it there too.
    
    NOTE: in case it's helpful to someone reading this, the way to tell
    whether to do the -EINVAL or not is to look at the PCONFDUMP for a
    given attribute.  If the last element (has_arg) is false then you need
    to do the -EINVAL trick.
    
    ALSO NOTE: it seems unlikely that the values returned when we try to
    get PIN_CONFIG_BIAS_PULL_UP will actually be printed since "has_arg"
    is false for that one, but I guess it's still fine to return different
    values so I kept doing that.  It seems like another driver (ssbi-gpio)
    uses a custom attribute (PM8XXX_QCOM_PULL_UP_STRENGTH) for something
    similar so maybe a future change should do that here too.
    
    Fixes: cfb24f6ebd38 ("pinctrl: Qualcomm SPMI PMIC MPP pin controller driver")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <sboyd@kernel.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b196dd5bcd92ea5217278c2d1a4bc64ddbb3036
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Thu Aug 30 17:58:52 2018 -0700

    pinctrl: qcom: spmi-mpp: Fix drive strength setting
    
    [ Upstream commit 89c68b102f13f123aaef22b292526d6b92501334 ]
    
    It looks like we parse the drive strength setting here, but never
    actually write it into the hardware to update it. Parse the setting and
    then write it at the end of the pinconf setting function so that it
    actually sticks in the hardware.
    
    Fixes: 0e948042c420 ("pinctrl: qcom: spmi-mpp: Implement support for sink mode")
    Cc: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a9dc99f9b03cb6d76b8f4d2f447a349371d10ae
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Aug 27 09:45:44 2018 +0200

    ACPI / LPSS: Add alternative ACPI HIDs for Cherry Trail DMA controllers
    
    [ Upstream commit 240714061c58e6b1abfb3322398a7634151c06cb ]
    
    Bay and Cherry Trail DSTDs represent a different set of devices depending
    on which OS the device think it is booting. One set of decices for Windows
    and another set of devices for Android which targets the Android-x86 Linux
    kernel fork (which e.g. used to have its own display driver instead of
    using the i915 driver).
    
    Which set of devices we are actually going to get is out of our control,
    this is controlled by the ACPI OSID variable, which gets either set through
    an EFI setup option, or sometimes is autodetected. So we need to support
    both.
    
    This commit adds support for the 80862286 and 808622C0 ACPI HIDs which we
    get for the first resp. second DMA controller on Cherry Trail devices when
    OSID is set to Android.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e0b860fffa41ecca0004da3bed908b7c6fbfcfb
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Sep 11 19:20:40 2018 +0900

    kprobes: Return error if we fail to reuse kprobe instead of BUG_ON()
    
    [ Upstream commit 819319fc93461c07b9cdb3064f154bd8cfd48172 ]
    
    Make reuse_unused_kprobe() to return error code if
    it fails to reuse unused kprobe for optprobe instead
    of calling BUG_ON().
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    Cc: David S . Miller <davem@davemloft.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Naveen N . Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/153666124040.21306.14150398706331307654.stgit@devbox
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4d73f1fd8ec1f7c0581f177154a36b5acebb4f1
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Fri Sep 14 16:23:07 2018 +0200

    block, bfq: correctly charge and reset entity service in all cases
    
    [ Upstream commit cbeb869a3d1110450186b738199963c5e68c2a71 ]
    
    BFQ schedules entities (which represent either per-process queues or
    groups of queues) as a function of their timestamps. In particular, as
    a function of their (virtual) finish times. The finish time of an
    entity is computed as a function of the budget assigned to the entity,
    assuming, tentatively, that the entity, once in service, will receive
    an amount of service equal to its budget. Then, when the entity is
    expired because it finishes to be served, this finish time is updated
    as a function of the actual service received by the entity. This
    allows the entity to be correctly charged with only the service
    received, and then to be correctly re-scheduled.
    
    Yet an entity may receive service also while not being the entity in
    service (in the scheduling environment of its parent entity), for
    several reasons. If the entity remains with no backlog while receiving
    this 'unofficial' service, then it is expired. Also on such an
    expiration, the finish time of the entity should be updated to account
    for only the service actually received by the entity. Unfortunately,
    such an update is not performed for an entity expiring without being
    the entity in service.
    
    In a similar vein, the service counter of the entity in service is
    reset when the entity is expired, to be ready to be used for next
    service cycle. This reset too should be performed also in case an
    entity is expired because it remains empty after receiving service
    while not being the entity in service. But in this case the reset is
    not performed.
    
    This commit performs the above update of the finish time and reset of
    the service received, also for an entity expiring while not being the
    entity in service.
    
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c2f34ab8315299f8a4e43cb70bf981ef296d7bf
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Wed Sep 19 11:39:31 2018 +0200

    net: phy: phylink: ensure the carrier is off when starting phylink
    
    [ Upstream commit aeeb2e8fdefdd5d257a1446351c70cb3df540199 ]
    
    Phylink made an assumption about the carrier state being down when
    calling phylink_start(). If this assumption isn't satisfied, the
    internal phylink state could misbehave and a net device could end up not
    being functional.
    
    This patch fixes this by explicitly calling netif_carrier_off() in
    phylink_start().
    
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Acked-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4484de1283a7808c9a7ba55dc3841a44771a5db0
Author: Arend van Spriel <arend.vanspriel@broadcom.com>
Date:   Wed Sep 5 09:48:58 2018 +0200

    brcmfmac: fix for proper support of 160MHz bandwidth
    
    [ Upstream commit 330994e8e8ec5d0b269a5265e6032b37e29aa336 ]
    
    Decoding of firmware channel information was not complete for 160MHz
    support. This resulted in the following warning:
    
      WARNING: CPU: 2 PID: 2222 at .../broadcom/brcm80211/brcmutil/d11.c:196
            brcmu_d11ac_decchspec+0x2e/0x100 [brcmutil]
      Modules linked in: brcmfmac(O) brcmutil(O) sha256_generic cfg80211 ...
      CPU: 2 PID: 2222 Comm: kworker/2:0 Tainted: G           O
      4.17.0-wt-testing-x64-00002-gf1bed50 #1
      Hardware name: Dell Inc. Latitude E6410/07XJP9, BIOS A07 02/15/2011
      Workqueue: events request_firmware_work_func
      RIP: 0010:brcmu_d11ac_decchspec+0x2e/0x100 [brcmutil]
      RSP: 0018:ffffc90000047bd0 EFLAGS: 00010206
      RAX: 000000000000e832 RBX: ffff8801146fe910 RCX: ffff8801146fd3c0
      RDX: 0000000000002800 RSI: 0000000000000070 RDI: ffffc90000047c30
      RBP: ffffc90000047bd0 R08: 0000000000000000 R09: ffffffffa0798c80
      R10: ffff88012bca55e0 R11: ffff880110a4ea00 R12: ffff8801146f8000
      R13: ffffc90000047c30 R14: ffff8801146fe930 R15: ffff8801138e02e0
      FS:  0000000000000000(0000) GS:ffff88012bc80000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f18ce8b8070 CR3: 000000000200a003 CR4: 00000000000206e0
      Call Trace:
       brcmf_setup_wiphybands+0x212/0x780 [brcmfmac]
       brcmf_cfg80211_attach+0xae2/0x11a0 [brcmfmac]
       brcmf_attach+0x1fc/0x4b0 [brcmfmac]
       ? __kmalloc+0x13c/0x1c0
       brcmf_pcie_setup+0x99b/0xe00 [brcmfmac]
       brcmf_fw_request_done+0x16a/0x1f0 [brcmfmac]
       request_firmware_work_func+0x36/0x60
       process_one_work+0x146/0x350
       worker_thread+0x4a/0x3b0
       kthread+0x102/0x140
       ? process_one_work+0x350/0x350
       ? kthread_bind+0x20/0x20
       ret_from_fork+0x35/0x40
      Code: 66 90 0f b7 07 55 48 89 e5 89 c2 88 47 02 88 47 03 66 81 e2 00 38
            66 81 fa 00 18 74 6e 66 81 fa 00 20 74 39 66 81 fa 00 10 74 14 <0f>
            0b 66 25 00 c0 74 20 66 3d 00 c0 75 20 c6 47 04 01 5d c3 66
      ---[ end trace 550c46682415b26d ]---
      brcmfmac: brcmf_construct_chaninfo: Ignoring unexpected firmware channel 50
    
    This patch adds the missing stuff to properly handle this.
    
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c27d0536adc684122587ce39467d450ecdf23b0
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Sep 20 01:58:18 2018 +0000

    pinctrl: qcom: spmi-mpp: Fix err handling of pmic_mpp_set_mux
    
    [ Upstream commit 69f8455f6cc78fa6cdf80d0105d7a748106271dc ]
    
    'ret' should be returned while pmic_mpp_write_mode_ctl fails.
    
    Fixes: 0e948042c420 ("pinctrl: qcom: spmi-mpp: Implement support for sink mode")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcc506cab03fee33a12ab0558bf6c53b897f9339
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Sep 16 16:22:47 2018 +0100

    x86: boot: Fix EFI stub alignment
    
    [ Upstream commit 9c1442a9d039a1a3302fa93e9a11001c5f23b624 ]
    
    We currently align the end of the compressed image to a multiple of
    16.  However, the PE-COFF header included in the EFI stub says that
    the file alignment is 32 bytes, and when adding an EFI signature to
    the file it must first be padded to this alignment.
    
    sbsigntool commands warn about this:
    
      warning: file-aligned section .text extends beyond end of file
      warning: checksum areas are greater than image size. Invalid section table?
    
    Worse, pesign -at least when creating a detached signature- uses the
    hash of the unpadded file, resulting in an invalid signature if
    padding is required.
    
    Avoid both these problems by increasing alignment to 32 bytes when
    CONFIG_EFI_STUB is enabled.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71ef2fef4a394fb40bf0087f2ddaa5d035355d30
Author: Christian Hewitt <christianshewitt@gmail.com>
Date:   Tue Sep 4 21:50:57 2018 +0400

    Bluetooth: btbcm: Add entry for BCM4335C0 UART bluetooth
    
    [ Upstream commit a357ea098c9605f60d92a66a9073f56ce25726da ]
    
    This patch adds the device ID for the AMPAK AP6335 combo module used
    in the 1st generation WeTek Hub Android/LibreELEC HTPC box. The WiFI
    chip identifies itself as BCM4339, while Bluetooth identifies itself
    as BCM4335 (rev C0):
    
    ```
    [    4.864248] Bluetooth: hci0: BCM: chip id 86
    [    4.866388] Bluetooth: hci0: BCM: features 0x2f
    [    4.889317] Bluetooth: hci0: BCM4335C0
    [    4.889332] Bluetooth: hci0: BCM4335C0 (003.001.009) build 0000
    [    9.778383] Bluetooth: hci0: BCM4335C0 (003.001.009) build 0268
    ```
    
    Output from hciconfig:
    
    ```
    hci0:   Type: Primary  Bus: UART
            BD Address: 43:39:00:00:1F:AC  ACL MTU: 1021:8  SCO MTU: 64:1
            UP RUNNING
            RX bytes:7567 acl:234 sco:0 events:386 errors:0
            TX bytes:53844 acl:77 sco:0 commands:304 errors:0
            Features: 0xbf 0xfe 0xcf 0xfe 0xdb 0xff 0x7b 0x87
            Packet type: DM1 DM3 DM5 DH1 DH3 DH5 HV1 HV2 HV3
            Link policy: RSWITCH SNIFF
            Link mode: SLAVE ACCEPT
            Name: 'HUB'
            Class: 0x0c0000
            Service Classes: Rendering, Capturing
            Device Class: Miscellaneous,
            HCI Version: 4.0 (0x6)  Revision: 0x10c
            LMP Version: 4.0 (0x6)  Subversion: 0x6109
            Manufacturer: Broadcom Corporation (15)
    ```
    
    Signed-off-by: Christian Hewitt <christianshewitt@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b66d0bb19f24702ca3b9ac8dc6f570d5be90ec7d
Author: Will Deacon <will@kernel.org>
Date:   Wed Sep 5 15:34:42 2018 +0100

    signal: Introduce COMPAT_SIGMINSTKSZ for use in compat_sys_sigaltstack
    
    [ Upstream commit 22839869f21ab3850fbbac9b425ccc4c0023926f ]
    
    The sigaltstack(2) system call fails with -ENOMEM if the new alternative
    signal stack is found to be smaller than SIGMINSTKSZ. On architectures
    such as arm64, where the native value for SIGMINSTKSZ is larger than
    the compat value, this can result in an unexpected error being reported
    to a compat task. See, for example:
    
      https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=904385
    
    This patch fixes the problem by extending do_sigaltstack to take the
    minimum signal stack size as an additional parameter, allowing the
    native and compat system call entry code to pass in their respective
    values. COMPAT_SIGMINSTKSZ is just defined as SIGMINSTKSZ if it has not
    been defined by the architecture.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Reported-by: Steve McIntyre <steve.mcintyre@arm.com>
    Tested-by: Steve McIntyre <93sam@debian.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d2b73cf0bfcac058789e0edd4fbe83d8b26bb14
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Sep 18 08:55:55 2018 -0500

    mtd: rawnand: atmel: Fix potential NULL pointer dereference
    
    [ Upstream commit fbed20280d912449cfb40c382cb55e3d11502587 ]
    
    There is a potential execution path in which function
    of_find_compatible_node() returns NULL. In such a case,
    we end up having a NULL pointer dereference when accessing
    pointer *nfc_np* in function of_clk_get().
    
    So, we better don't take any chances and fix this by null
    checking pointer *nfc_np* before calling of_clk_get().
    
    Addresses-Coverity-ID: 1473052 ("Dereference null return value")
    Fixes: f88fc122cc34 ("mtd: nand: Cleanup/rework the atmel_nand driver")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Acked-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd8dfdcc2249b3bcfd33bdb547e392c4aca134f7
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Wed Oct 3 15:35:21 2018 +0530

    cpufreq: dt: Try freeing static OPPs only if we have added them
    
    [ Upstream commit 51c99dd2c06b234575661fa1e0a1dea6c3ef566f ]
    
    We can not call dev_pm_opp_of_cpumask_remove_table() freely anymore
    since the latest OPP core updates as that uses reference counting to
    free resources. There are cases where no static OPPs are added (using
    DT) for a platform and trying to remove the OPP table may end up
    decrementing refcount which is already zero and hence generating
    warnings.
    
    Lets track if we were able to add static OPPs or not and then only
    remove the table based on that. Some reshuffling of code is also done to
    do that.
    
    Reported-by: Niklas Cassel <niklas.cassel@linaro.org>
    Tested-by: Niklas Cassel <niklas.cassel@linaro.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85e20b47dec298b569de62cce4b1762f647b28e7
Author: Dou Liyang <douly.fnst@cn.fujitsu.com>
Date:   Fri Aug 24 10:51:26 2018 +0800

    ACPI / processor: Fix the return value of acpi_processor_ids_walk()
    
    [ Upstream commit d0381bf4f80c571dde1244fe5b85dc35e8b3f546 ]
    
    ACPI driver should make sure all the processor IDs in their ACPI Namespace
    are unique. the driver performs a depth-first walk of the namespace tree
    and calls the acpi_processor_ids_walk() to check the duplicate IDs.
    
    But, the acpi_processor_ids_walk() mistakes the return value. If a
    processor is checked, it returns true which causes the walk break
    immediately, and other processors will never be checked.
    
    Repace the value with AE_OK which is the standard acpi_status value.
    And don't abort the namespace walk even on error.
    
    Fixes: 8c8cb30f49b8 (acpi/processor: Implement DEVICE operator for processor enumeration)
    Signed-off-by: Dou Liyang <douly.fnst@cn.fujitsu.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d7a51786faf11362a9d9b3841f9d9ffe5b65c24
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Thu Oct 4 18:08:08 2018 +0200

    x86/olpc: Indicate that legacy PC XO-1 platform should not register RTC
    
    [ Upstream commit d92116b800fb79a72ad26121f5011f6aa3ad94c2 ]
    
    On OLPC XO-1, the RTC is discovered via device tree from the arch
    initcall. Don't let the PC platform register another one from its device
    initcall, it's not going to work:
    
      sysfs: cannot create duplicate filename '/devices/platform/rtc_cmos'
      CPU: 0 PID: 1 Comm: swapper Not tainted 4.19.0-rc6 #12
      Hardware name: OLPC XO/XO, BIOS OLPC Ver 1.00.01 06/11/2014
      Call Trace:
       dump_stack+0x16/0x18
       sysfs_warn_dup+0x46/0x58
       sysfs_create_dir_ns+0x76/0x9b
       kobject_add_internal+0xed/0x209
       ? __schedule+0x3fa/0x447
       kobject_add+0x5b/0x66
       device_add+0x298/0x535
       ? insert_resource_conflict+0x2a/0x3e
       platform_device_add+0x14d/0x192
       ? io_delay_init+0x19/0x19
       platform_device_register+0x1c/0x1f
       add_rtc_cmos+0x16/0x31
       do_one_initcall+0x78/0x14a
       ? do_early_param+0x75/0x75
       kernel_init_freeable+0x152/0x1e0
       ? rest_init+0xa2/0xa2
       kernel_init+0x8/0xd5
       ret_from_fork+0x2e/0x38
      kobject_add_internal failed for rtc_cmos with -EEXIST, don't try to
        register things with the same name in the same directory.
      platform rtc_cmos: registered platform RTC device (no PNP device found)
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    CC: "H. Peter Anvin" <hpa@zytor.com>
    CC: Ingo Molnar <mingo@redhat.com>
    CC: x86-ml <x86@kernel.org>
    Link: http://lkml.kernel.org/r/20181004160808.307738-1-lkundrak@v3.sk
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 371075886a394e8c8e9cc5177e4cadb0f9e2ae17
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Wed Jun 13 11:49:20 2018 +0300

    iwlwifi: mvm: clear HW_RESTART_REQUESTED when stopping the interface
    
    [ Upstream commit 155f7e0441cd121b1e673d465a35e99f4b9b2f0b ]
    
    Fix a bug that happens in the following scenario:
    1) suspend without WoWLAN
    2) mac80211 calls drv_stop because of the suspend
    3) __iwl_mvm_mac_stop deallocates the aux station
    4) during drv_stop the firmware crashes
    5) iwlmvm:
            * sets IWL_MVM_STATUS_HW_RESTART_REQUESTED
            * asks mac80211 to kick the restart flow
    6) mac80211 puts the restart worker into a freezable
       queue which means that the worker will not run for now
       since the workqueue is already frozen
    7) ...
    8) resume
    9) mac80211 runs ieee80211_reconfig as part of the resume
    10) mac80211 detects that a restart flow has been requested
        and that we are now resuming from suspend and cancels
        the restart worker
    11) mac80211 calls drv_start()
    12) __iwl_mvm_mac_start checks that IWL_MVM_STATUS_HW_RESTART_REQUESTED
        clears it, sets IWL_MVM_STATUS_IN_HW_RESTART and calls
        iwl_mvm_restart_cleanup()
    13) iwl_fw_error_dump gets called and accesses the device
        to get debug data
    14) iwl_mvm_up adds the aux station
    15) iwl_mvm_add_aux_sta() allocates an internal station for
        the aux station
    16) iwl_mvm_allocate_int_sta() tests IWL_MVM_STATUS_IN_HW_RESTART
        and doesn't really allocate a station ID for the aux
        station
    17) a new queue is added for the aux station
    
    Note that steps from 5 to 9 aren't really part of the
    problem but were described for the sake of completeness.
    
    Once the iwl_mvm_mac_stop() is called, the device is not
    accessible, meaning that step 12) can't succeed and we'll
    see the following:
    
    drivers/net/wireless/intel/iwlwifi/pcie/trans.c:2122 iwl_trans_pcie_grab_nic_access+0xc0/0x1d6 [iwlwifi]()
    Timeout waiting for hardware access (CSR_GP_CNTRL 0x080403d8)
    Call Trace:
    [<ffffffffc03e6ad3>] iwl_trans_pcie_grab_nic_access+0xc0/0x1d6 [iwlwifi]
    [<ffffffffc03e6a13>] iwl_trans_pcie_dump_regs+0x3fd/0x3fd [iwlwifi]
    [<ffffffffc03dad42>] iwl_fw_error_dump+0x4f5/0xe8b [iwlwifi]
    [<ffffffffc04bd43e>] __iwl_mvm_mac_start+0x5a/0x21a [iwlmvm]
    [<ffffffffc04bd6d2>] iwl_mvm_mac_start+0xd4/0x103 [iwlmvm]
    [<ffffffffc042d378>] drv_start+0xa1/0xc5 [iwl7000_mac80211]
    [<ffffffffc045a339>] ieee80211_reconfig+0x145/0xf50 [mac80211]
    [<ffffffffc044788b>] ieee80211_resume+0x62/0x66 [mac80211]
    [<ffffffffc0366c5b>] wiphy_resume+0xa9/0xc6 [cfg80211]
    
    The station id of the aux station is set to 0xff in step 3
    and because we don't really allocate a new station id for
    the auxliary station (as explained in 16), we end up sending
    a command to the firmware asking to connect the queue
    to station id 0xff. This makes the firmware crash with the
    following information:
    
    0x00002093 | ADVANCED_SYSASSERT
    0x000002F0 | trm_hw_status0
    0x00000000 | trm_hw_status1
    0x00000B38 | branchlink2
    0x0001978C | interruptlink1
    0x00000000 | interruptlink2
    0xFF080501 | data1
    0xDEADBEEF | data2
    0xDEADBEEF | data3
    Firmware error during reconfiguration - reprobe!
    FW error in SYNC CMD SCD_QUEUE_CFG
    
    Fix this by clearing IWL_MVM_STATUS_HW_RESTART_REQUESTED
    in iwl_mvm_mac_stop(). We won't be able to collect debug
    data anyway and when we will brought up again, we will
    have a clean state from the firmware perspective.
    Since we won't have IWL_MVM_STATUS_IN_HW_RESTART set in
    step 12) we won't get to the 2093 ASSERT either.
    
    Fixes: bf8b286f86fc ("iwlwifi: mvm: defer setting IWL_MVM_STATUS_IN_HW_RESTART")
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 709c3305511b234c57710461a67d96fa202b6d03
Author: Shaul Triebitz <shaul.triebitz@intel.com>
Date:   Wed Jun 6 17:20:58 2018 +0300

    iwlwifi: pcie: avoid empty free RB queue
    
    [ Upstream commit 868a1e863f95183f00809363fefba6d4f5bcd116 ]
    
    If all free RB queues are empty, the driver will never restock the
    free RB queue.  That's because the restocking happens in the Rx flow,
    and if the free queue is empty there will be no Rx.
    
    Although there's a background worker (a.k.a. allocator) allocating
    memory for RBs so that the Rx handler can restock them, the worker may
    run only after the free queue has become empty (and then it is too
    late for restocking as explained above).
    
    There is a solution for that called 'emergency': If the number of used
    RB's reaches half the amount of all RB's, the Rx handler will not wait
    for the allocator but immediately allocate memory for the used RB's
    and restock the free queue.
    
    But, since the used RB's is per queue, it may happen that the used
    RB's are spread between the queues such that the emergency check will
    fail for each of the queues
    (and still run out of RBs, causing the above symptom).
    
    To fix it, move to emergency mode if the sum of *all* used RBs (for
    all Rx queues) reaches half the amount of all RB's
    
    Signed-off-by: Shaul Triebitz <shaul.triebitz@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f349beaa4c8f3d928a720e58fceefce4c02f0740
Author: Yu Zhao <yuzhao@google.com>
Date:   Sun Sep 23 14:39:24 2018 -0600

    mmc: sdhci-pci-o2micro: Add quirk for O2 Micro dev 0x8620 rev 0x01
    
    [ Upstream commit 5169894982bb67486d93cc1e10151712bb86bcb6 ]
    
    This device reports SDHCI_CLOCK_INT_STABLE even though it's not
    ready to take SDHCI_CLOCK_CARD_EN. The symptom is that reading
    SDHCI_CLOCK_CONTROL after enabling the clock shows absence of the
    bit from the register (e.g. expecting 0x0000fa07 = 0x0000fa03 |
    SDHCI_CLOCK_CARD_EN but only observed the first operand).
    
    mmc1: Timeout waiting for hardware cmd interrupt.
    mmc1: sdhci: ============ SDHCI REGISTER DUMP ===========
    mmc1: sdhci: Sys addr:  0x00000000 | Version:  0x00000603
    mmc1: sdhci: Blk size:  0x00000000 | Blk cnt:  0x00000000
    mmc1: sdhci: Argument:  0x00000000 | Trn mode: 0x00000000
    mmc1: sdhci: Present:   0x01ff0001 | Host ctl: 0x00000001
    mmc1: sdhci: Power:     0x0000000f | Blk gap:  0x00000000
    mmc1: sdhci: Wake-up:   0x00000000 | Clock:    0x0000fa03
    mmc1: sdhci: Timeout:   0x00000000 | Int stat: 0x00000000
    mmc1: sdhci: Int enab:  0x00ff0083 | Sig enab: 0x00ff0083
    mmc1: sdhci: AC12 err:  0x00000000 | Slot int: 0x00000000
    mmc1: sdhci: Caps:      0x25fcc8bf | Caps_1:   0x00002077
    mmc1: sdhci: Cmd:       0x00000000 | Max curr: 0x005800c8
    mmc1: sdhci: Resp[0]:   0x00000000 | Resp[1]:  0x00000000
    mmc1: sdhci: Resp[2]:   0x00000000 | Resp[3]:  0x00000000
    mmc1: sdhci: Host ctl2: 0x00000008
    mmc1: sdhci: ADMA Err:  0x00000000 | ADMA Ptr: 0x00000000
    mmc1: sdhci: ============================================
    
    The problem happens during wakeup from S3. Adding a delay quirk
    after power up reliably fixes the problem.
    
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5d5f109c6d28c34c4f5469199073d4836567a17
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Mon Oct 8 11:06:19 2018 -0400

    cpupower: Fix coredump on VMWare
    
    [ Upstream commit f69ffc5d3db8f1f03fd6d1df5930f9a1fbd787b6 ]
    
    cpupower crashes on VMWare guests.  The guests have the AMD PStateDef MSR
    (0xC0010064 + state number) set to zero.  As a result fid and did are zero
    and the crash occurs because of a divide by zero (cof = fid/did).  This
    can be prevented by checking the enable bit in the PStateDef MSR before
    calculating cof.  By doing this the value of pstate[i] remains zero and
    the value can be tested before displaying the active Pstates.
    
    Check the enable bit in the PstateDef register for all supported families
    and only print out enabled Pstates.
    
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Stafford Horne <shorne@gmail.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ab8d2dbc1a07743d0e48f63ec0d0179e6b3c900
Author: Sanskriti Sharma <sansharm@redhat.com>
Date:   Tue Oct 2 10:29:10 2018 -0400

    perf strbuf: Match va_{add,copy} with va_end
    
    [ Upstream commit ce49d8436cffa9b7a6a5f110879d53e89dbc6746 ]
    
    Ensure that all code paths in strbuf_addv() call va_end() on the
    ap_saved copy that was made.
    
    Fixes the following coverity complaint:
    
      Error: VARARGS (CWE-237): [#def683]
      tools/perf/util/strbuf.c:106: missing_va_end: va_end was not called
      for "ap_saved".
    
    Signed-off-by: Sanskriti Sharma <sansharm@redhat.com>
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Link: http://lkml.kernel.org/r/1538490554-8161-2-git-send-email-sansharm@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e8e70e56265496274e0c19464fffe896009bfc0
Author: Sanskriti Sharma <sansharm@redhat.com>
Date:   Tue Oct 2 10:29:11 2018 -0400

    perf tools: Cleanup trace-event-info 'tdata' leak
    
    [ Upstream commit faedbf3fd19f2511a39397f76359e4cc6ee93072 ]
    
    Free tracing_data structure in tracing_data_get() error paths.
    
    Fixes the following coverity complaint:
    
      Error: RESOURCE_LEAK (CWE-772):
      leaked_storage: Variable "tdata" going out of scope leaks the storage
    
    Signed-off-by: Sanskriti Sharma <sansharm@redhat.com>
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Link: http://lkml.kernel.org/r/1538490554-8161-3-git-send-email-sansharm@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52ff94ce5134464db22720973e7773af0969b96f
Author: Sanskriti Sharma <sansharm@redhat.com>
Date:   Tue Oct 2 10:29:14 2018 -0400

    perf tools: Free temporary 'sys' string in read_event_files()
    
    [ Upstream commit 1e44224fb0528b4c0cc176bde2bb31e9127eb14b ]
    
    For each system in a given pevent, read_event_files() reads in a
    temporary 'sys' string.  Be sure to free this string before moving onto
    to the next system and/or leaving read_event_files().
    
    Fixes the following coverity complaints:
    
      Error: RESOURCE_LEAK (CWE-772):
    
      tools/perf/util/trace-event-read.c:343: overwrite_var: Overwriting
      "sys" in "sys = read_string()" leaks the storage that "sys" points to.
    
      tools/perf/util/trace-event-read.c:353: leaked_storage: Variable "sys"
      going out of scope leaks the storage it points to.
    
    Signed-off-by: Sanskriti Sharma <sansharm@redhat.com>
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Link: http://lkml.kernel.org/r/1538490554-8161-6-git-send-email-sansharm@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8515f4ea7289440a5c46be6af9d8668449956e9a
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Oct 8 11:08:47 2018 -0700

    spi: spi-ep93xx: Use dma_data_direction for ep93xx_spi_dma_{finish,prepare}
    
    [ Upstream commit a1108c7b2efb892350ba6a0e932dfd45622f4e2b ]
    
    Clang warns when one enumerated type is implicitly converted to another.
    
    drivers/spi/spi-ep93xx.c:342:62: warning: implicit conversion from
    enumeration type 'enum dma_transfer_direction' to different enumeration
    type 'enum dma_data_direction' [-Wenum-conversion]
            nents = dma_map_sg(chan->device->dev, sgt->sgl, sgt->nents, dir);
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
    ./include/linux/dma-mapping.h:428:58: note: expanded from macro
    'dma_map_sg'
    #define dma_map_sg(d, s, n, r) dma_map_sg_attrs(d, s, n, r, 0)
                                   ~~~~~~~~~~~~~~~~          ^
    drivers/spi/spi-ep93xx.c:348:57: warning: implicit conversion from
    enumeration type 'enum dma_transfer_direction' to different enumeration
    type 'enum dma_data_direction' [-Wenum-conversion]
                    dma_unmap_sg(chan->device->dev, sgt->sgl, sgt->nents, dir);
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
    ./include/linux/dma-mapping.h:429:62: note: expanded from macro
    'dma_unmap_sg'
    #define dma_unmap_sg(d, s, n, r) dma_unmap_sg_attrs(d, s, n, r, 0)
                                     ~~~~~~~~~~~~~~~~~~          ^
    drivers/spi/spi-ep93xx.c:377:56: warning: implicit conversion from
    enumeration type 'enum dma_transfer_direction' to different enumeration
    type 'enum dma_data_direction' [-Wenum-conversion]
            dma_unmap_sg(chan->device->dev, sgt->sgl, sgt->nents, dir);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
    ./include/linux/dma-mapping.h:429:62: note: expanded from macro
    'dma_unmap_sg'
    #define dma_unmap_sg(d, s, n, r) dma_unmap_sg_attrs(d, s, n, r, 0)
                                     ~~~~~~~~~~~~~~~~~~          ^
    3 warnings generated.
    
    dma_{,un}map_sg expect an enum of type dma_data_direction but this
    driver uses dma_transfer_direction for everything. Convert the driver to
    use dma_data_direction for these two functions.
    
    There are two places that strictly require an enum of type
    dma_transfer_direction: the direction member in struct dma_slave_config
    and the direction parameter in dmaengine_prep_slave_sg. To avoid using
    an explicit cast, add a simple function, ep93xx_dma_data_to_trans_dir,
    to safely map between the two types because they are not 1 to 1 in
    meaning.
    
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47f29328600d0d3b761f7c1d968aaf1cdc208169
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Tue Oct 9 13:12:00 2018 +0200

    lightnvm: pblk: fix two sleep-in-atomic-context bugs
    
    [ Upstream commit 7325b4bbe5952e3e939f15de812f2ee0c0d33ca9 ]
    
    The driver may sleep with holding a spinlock.
    
    The function call paths (from bottom to top) in Linux-4.16 are:
    
    [FUNC] nvm_dev_dma_alloc(GFP_KERNEL)
    drivers/lightnvm/pblk-core.c, 754:
            nvm_dev_dma_alloc in pblk_line_submit_smeta_io
    drivers/lightnvm/pblk-core.c, 1048:
            pblk_line_submit_smeta_io in pblk_line_init_bb
    drivers/lightnvm/pblk-core.c, 1434:
            pblk_line_init_bb in pblk_line_replace_data
    drivers/lightnvm/pblk-recovery.c, 980:
            pblk_line_replace_data in pblk_recov_l2p
    drivers/lightnvm/pblk-recovery.c, 976:
            spin_lock in pblk_recov_l2p
    
    [FUNC] bio_map_kern(GFP_KERNEL)
    drivers/lightnvm/pblk-core.c, 762:
            bio_map_kern in pblk_line_submit_smeta_io
    drivers/lightnvm/pblk-core.c, 1048:
            pblk_line_submit_smeta_io in pblk_line_init_bb
    drivers/lightnvm/pblk-core.c, 1434:
            pblk_line_init_bb in pblk_line_replace_data
    drivers/lightnvm/pblk-recovery.c, 980:
            pblk_line_replace_data in pblk_recov_l2p
    drivers/lightnvm/pblk-recovery.c, 976:
            spin_lock in pblk_recov_l2p
    
    To fix these bugs, the call to pblk_line_replace_data()
    is moved out of the spinlock protection.
    
    These bugs are found by my static analysis tool DSAC.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Reviewed-by: Javier González <javier@cnexlabs.com>
    Signed-off-by: Matias Bjørling <mb@lightnvm.io>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d16cd14ea370d87824744644819b21f4ea9aa481
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Sep 21 12:10:48 2018 +0200

    hwmon: (pwm-fan) Set fan speed to 0 on suspend
    
    [ Upstream commit 95dcd64bc5a27080beaa344edfe5bdcca3d2e7dc ]
    
    Technically this is not required because disabling the PWM should be
    enough. However, when support for atomic operations was implemented in
    the PWM subsystem, only actual changes to the PWM channel are applied
    during pwm_config(), which means that during after resume from suspend
    the old settings won't be applied.
    
    One possible solution is for the PWM driver to implement its own PM
    operations such that settings from before suspend get applied on resume.
    This has the disadvantage of completely ignoring any particular ordering
    requirements that PWM user drivers might have, so it is best to leave it
    up to the user drivers to apply the settings that they want at the
    appropriate time.
    
    Another way to solve this would be to read back the current state of the
    PWM at the time of resume. That way, in case the configuration was lost
    during suspend, applying the old settings in PWM user drivers would
    actually get them applied because they differ from the current settings.
    However, not all PWM drivers support reading the hardware state, and not
    all hardware may support it.
    
    The best workaround at this point seems to be to let PWM user drivers
    tell the PWM subsystem that the PWM is turned off by, in addition to
    disabling it, also setting the duty cycle to 0. This causes the resume
    operation to apply a configuration that is different from the current
    configuration, resulting in the proper state from before suspend getting
    restored.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec5c7c48925ca01c19c47133a3e3c35de0a4aaaf
Author: Janosch Frank <frankja@linux.ibm.com>
Date:   Tue Oct 2 10:57:52 2018 +0200

    s390/sthyi: Fix machine name validity indication
    
    [ Upstream commit b5130dc2224d1881f24224c0590c6d97f2168d6a ]
    
    When running as a level 3 guest with no host provided sthyi support
    sclp_ocf_cpc_name_copy() will only return zeroes. Zeroes are not a
    valid group name, so let's not indicate that the group name field is
    valid.
    
    Also the group name is not dependent on stsi, let's not return based
    on stsi before setting it.
    
    Fixes: 95ca2cb57985 ("KVM: s390: Add sthyi emulation")
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11d9f6e44a38a7096e39f8ed293746be29cb7715
Author: Serhey Popovych <serhe.popovych@gmail.com>
Date:   Tue Oct 9 21:21:01 2018 +0300

    tun: Consistently configure generic netdev params via rtnetlink
    
    [ Upstream commit df52eab23d703142c766ac00bdb8db19d71238d0 ]
    
    Configuring generic network device parameters on tun will fail in
    presence of IFLA_INFO_KIND attribute in IFLA_LINKINFO nested attribute
    since tun_validate() always return failure.
    
    This can be visualized with following ip-link(8) command sequences:
    
      # ip link set dev tun0 group 100
      # ip link set dev tun0 group 100 type tun
      RTNETLINK answers: Invalid argument
    
    with contrast to dummy and veth drivers:
    
      # ip link set dev dummy0 group 100
      # ip link set dev dummy0 type dummy
    
      # ip link set dev veth0 group 100
      # ip link set dev veth0 group 100 type veth
    
    Fix by returning zero in tun_validate() when @data is NULL that is
    always in case since rtnl_link_ops->maxtype is zero in tun driver.
    
    Fixes: f019a7a594d9 ("tun: Implement ip link del tunXXX")
    Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd160e8b0f078fc46bd9857b2a73b7fc4ff63544
Author: Ryan C Goodfellow <rgoodfel@isi.edu>
Date:   Fri Oct 12 11:09:01 2018 -0700

    nfp: devlink port split support for 1x100G CXP NIC
    
    [ Upstream commit 5948185b97fa1f83d7855e638a72982a1073ebf5 ]
    
    This commit makes it possible to use devlink to split the 100G CXP
    Netronome into two 40G interfaces. Currently when you ask for 2
    interfaces, the math in src/nfp_devlink.c:nfp_devlink_port_split
    calculates that you want 5 lanes per port because for some reason
    eth_port.port_lanes=10 (shouldn't this be 12 for CXP?). What we really
    want when asking for 2 breakout interfaces is 4 lanes per port. This
    commit makes that happen by calculating based on 8 lanes if 10 are
    present.
    
    Signed-off-by: Ryan C Goodfellow <rgoodfel@isi.edu>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Greg Weeks <greg.weeks@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ac8e0fecd5e36caf0bdb34ccb9e6dc4853c62b3
Author: Omar Sandoval <osandov@fb.com>
Date:   Thu Oct 11 12:20:41 2018 -0700

    swim: fix cleanup on setup error
    
    [ Upstream commit 1448a2a5360ae06f25e2edc61ae070dff5c0beb4 ]
    
    If we fail to allocate the request queue for a disk, we still need to
    free that disk, not just the previous ones. Additionally, we need to
    cleanup the previous request queues.
    
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7084b74ffc246e781c77a963321f34b661ea49cc
Author: Omar Sandoval <osandov@fb.com>
Date:   Thu Oct 11 12:20:49 2018 -0700

    ataflop: fix error handling during setup
    
    [ Upstream commit 71327f547ee3a46ec5c39fdbbd268401b2578d0e ]
    
    Move queue allocation next to disk allocation to fix a couple of issues:
    
    - If add_disk() hasn't been called, we should clear disk->queue before
      calling put_disk().
    - If we fail to allocate a request queue, we still need to put all of
      the disks, not just the ones that we allocated queues for.
    
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cf2ab06e8d0d7c9ca15f51eeed67103a973725f
Author: Waiman Long <longman@redhat.com>
Date:   Thu Oct 18 21:45:17 2018 -0400

    locking/lockdep: Fix debug_locks off performance problem
    
    [ Upstream commit 9506a7425b094d2f1d9c877ed5a78f416669269b ]
    
    It was found that when debug_locks was turned off because of a problem
    found by the lockdep code, the system performance could drop quite
    significantly when the lock_stat code was also configured into the
    kernel. For instance, parallel kernel build time on a 4-socket x86-64
    server nearly doubled.
    
    Further analysis into the cause of the slowdown traced back to the
    frequent call to debug_locks_off() from the __lock_acquired() function
    probably due to some inconsistent lockdep states with debug_locks
    off. The debug_locks_off() function did an unconditional atomic xchg
    to write a 0 value into debug_locks which had already been set to 0.
    This led to severe cacheline contention in the cacheline that held
    debug_locks.  As debug_locks is being referenced in quite a few different
    places in the kernel, this greatly slow down the system performance.
    
    To prevent that trashing of debug_locks cacheline, lock_acquired()
    and lock_contended() now checks the state of debug_locks before
    proceeding. The debug_locks_off() function is also modified to check
    debug_locks before calling __debug_locks_off().
    
    Signed-off-by: Waiman Long <longman@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Link: http://lkml.kernel.org/r/1539913518-15598-1-git-send-email-longman@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd83130bdbe48a0d4e6e650f37073d80b80d7adc
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Fri Oct 19 21:15:26 2018 +0200

    i2c: rcar: cleanup DMA for all kinds of failure
    
    [ Upstream commit 31d86033a0749a0463ea654130b2de5c163154f1 ]
    
    DMA needs to be cleaned up not only on timeout, but on all errors where
    it has been setup before.
    
    Fixes: 73e8b0528346 ("i2c: rcar: add DMA support")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5832fa5bd0324847ef5a256f36dd1e80caa2b024
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Oct 18 22:13:02 2018 +0900

    selftests: ftrace: Add synthetic event syntax testcase
    
    [ Upstream commit ba0e41ca81b935b958006c7120466e2217357827 ]
    
    Add a testcase to check the syntax and field types for
    synthetic_events interface.
    
    Link: http://lkml.kernel.org/r/153986838264.18251.16627517536956299922.stgit@devbox
    
    Acked-by: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60b7367caab51871b41ed03bbdffde93011e3606
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Oct 12 19:14:58 2018 -0700

    net: qla3xxx: Remove overflowing shift statement
    
    [ Upstream commit 8c3bf9b62b667456a57aefcf1689e826df146159 ]
    
    Clang currently warns:
    
    drivers/net/ethernet/qlogic/qla3xxx.c:384:24: warning: signed shift
    result (0xF00000000) requires 37 bits to represent, but 'int' only has
    32 bits [-Wshift-overflow]
                        ((ISP_NVRAM_MASK << 16) | qdev->eeprom_cmd_data));
                          ~~~~~~~~~~~~~~ ^  ~~
    1 warning generated.
    
    The warning is certainly accurate since ISP_NVRAM_MASK is defined as
    (0x000F << 16) which is then shifted by 16, resulting in 64424509440,
    well above UINT_MAX.
    
    Given that this is the only location in this driver where ISP_NVRAM_MASK
    is shifted again, it seems likely that ISP_NVRAM_MASK was originally
    defined without a shift and during the move of the shift to the
    definition, this statement wasn't properly removed (since ISP_NVRAM_MASK
    is used in the statenent right above this). Only the maintainers can
    confirm this since this statment has been here since the driver was
    first added to the kernel.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/127
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd79c781f6bf8697b6579b428e311432cb2e70fe
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Oct 16 22:25:24 2018 +0200

    x86/fpu: Remove second definition of fpu in __fpu__restore_sig()
    
    [ Upstream commit 6aa676761d4c1acfa31320e55fa1f83f3fcbbc7a ]
    
    Commit:
    
      c5bedc6847c3b ("x86/fpu: Get rid of PF_USED_MATH usage, convert it to fpu->fpstate_active")
    
    introduced the 'fpu' variable at top of __restore_xstate_sig(),
    which now shadows the other definition:
    
      arch/x86/kernel/fpu/signal.c:318:28: warning: symbol 'fpu' shadows an earlier one
      arch/x86/kernel/fpu/signal.c:271:20: originally declared here
    
    Remove the shadowed definition of 'fpu', as the two definitions are the same.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: c5bedc6847c3b ("x86/fpu: Get rid of PF_USED_MATH usage, convert it to fpu->fpstate_active")
    Link: http://lkml.kernel.org/r/20181016202525.29437-3-bigeasy@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1309de40f2e0e47cc05c7b4e7a3637c5e71a89af
Author: David Miller <davem@davemloft.net>
Date:   Thu Oct 11 22:46:55 2018 -0700

    perf cpu_map: Align cpu map synthesized events properly.
    
    [ Upstream commit 0ed149cf5239cc6e7e65bf00f769e8f1e91076c0 ]
    
    The size of the resulting cpu map can be smaller than a multiple of
    sizeof(u64), resulting in SIGBUS on cpus like Sparc as the next event
    will not be aligned properly.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kan Liang <kan.liang@intel.com>
    Fixes: 6c872901af07 ("perf cpu_map: Add cpu_map event synthesize function")
    Link: http://lkml.kernel.org/r/20181011.224655.716771175766946817.davem@davemloft.net
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit faf96991f88265dd55bf3207109dc5106e570d0c
Author: Jarod Wilson <jarod@redhat.com>
Date:   Thu Sep 6 18:18:12 2018 -0400

    perf tools: Fix use of alternatives to find JDIR
    
    [ Upstream commit 36b8d4628d3cc8f5a748e508cce8673bc00fc63c ]
    
    When a build is run from something like a cron job, the user's $PATH is
    rather minimal, of note, not including /usr/sbin in my own case. Because
    of that, an automated rpm package build ultimately fails to find
    libperf-jvmti.so, because somewhere within the build, this happens...
    
      /bin/sh: alternatives: command not found
      /bin/sh: alternatives: command not found
      Makefile.config:849: No openjdk development package found, please install
      JDK package, e.g. openjdk-8-jdk, java-1.8.0-openjdk-devel
    
    ...and while the build continues, libperf-jvmti.so isn't built, and
    things fall down when rpm tries to find all the %files specified. Exact
    same system builds everything just fine when the job is launched from a
    login shell instead of a cron job, since alternatives is in $PATH, so
    openjdk is actually found.
    
    The test required to get into this section of code actually specifies
    the full path, as does a block just above it, so let's do that here too.
    
    Signed-off-by: Jarod Wilson <jarod@redhat.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: William Cohen <wcohen@redhat.com>
    Fixes: d4dfdf00d43e ("perf jvmti: Plug compilation into perf build")
    Link: http://lkml.kernel.org/r/20180906221812.11167-1-jarod@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5a02efefbd20efca39becab8221cd509a854efa
Author: Song Muchun <smuchun@gmail.com>
Date:   Sun Oct 14 19:26:12 2018 +0800

    sched/fair: Fix the min_vruntime update logic in dequeue_entity()
    
    [ Upstream commit 9845c49cc9bbb317a0bc9e9cf78d8e09d54c9af0 ]
    
    The comment and the code around the update_min_vruntime() call in
    dequeue_entity() are not in agreement.
    
    >From commit:
    
      b60205c7c558 ("sched/fair: Fix min_vruntime tracking")
    
    I think that we want to update min_vruntime when a task is sleeping/migrating.
    So, the check is inverted there - fix it.
    
    Signed-off-by: Song Muchun <smuchun@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: b60205c7c558 ("sched/fair: Fix min_vruntime tracking")
    Link: http://lkml.kernel.org/r/20181014112612.2614-1-smuchun@gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f26f0ff7dd8afb9057e8cef81344a2e71bf3e4e0
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Oct 14 20:19:31 2018 -0700

    sparc64: Make proc_id signed.
    
    [ Upstream commit b3e1eb8e7ac9aaa283989496651d99267c4cad6c ]
    
    So that when it is unset, ie. '-1', userspace can see it
    properly.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c37b554f7d71fb92fa58a4c0a8476b54a24ca4e2
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Oct 12 10:33:20 2018 -0700

    sparc: Throttle perf events properly.
    
    [ Upstream commit 455adb3174d2c8518cef1a61140c211f6ac224d2 ]
    
    Like x86 and arm, call perf_sample_event_took() in perf event
    NMI interrupt handler.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d388b0a09f5e9861a50ab71cafbdac45a2a5d25
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Oct 12 10:31:58 2018 -0700

    sparc: Fix single-pcr perf event counter management.
    
    [ Upstream commit cfdc3170d214046b9509183fe9b9544dc644d40b ]
    
    It is important to clear the hw->state value for non-stopped events
    when they are added into the PMU.  Otherwise when the event is
    scheduled out, we won't read the counter because HES_UPTODATE is still
    set.  This breaks 'perf stat' and similar use cases, causing all the
    events to show zero.
    
    This worked for multi-pcr because we make explicit sparc_pmu_start()
    calls in calculate_multiple_pcrs().  calculate_single_pcr() doesn't do
    this because the idea there is to accumulate all of the counter
    settings into the single pcr value.  So we have to add explicit
    hw->state handling there.
    
    Like x86, we use the PERF_HES_ARCH bit to track truly stopped events
    so that we don't accidently start them on a reload.
    
    Related to all of this, sparc_pmu_start() is missing a userpage update
    so add it.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9eedfdf17234f4cf800cc1814054c65ebd9712bb
Author: Jiri Olsa <jolsa@redhat.com>
Date:   Wed Oct 10 10:03:39 2018 +0200

    perf vendor events intel: Fix wrong filter_band* values for uncore events
    
    [ Upstream commit 94aafb74cee0002e2f2eb6dc5376f54d5951ab4d ]
    
    Michael reported that he could not stat following event:
    
      $ perf stat -e unc_p_freq_ge_1200mhz_cycles -a -- ls
      event syntax error: '..e_1200mhz_cycles'
                                        \___ value too big for format, maximum is 255
      Run 'perf list' for a list of valid events
    
    The event is unwrapped into:
    
      uncore_pcu/event=0xb,filter_band0=1200/
    
    where filter_band0 format says it's one byte only:
    
      # cat uncore_pcu/format/filter_band0
      config1:0-7
    
    while JSON files specifies bigger number:
    
      "Filter": "filter_band0=1200",
    
    all the filter_band* formats show 1 byte width:
    
      # cat uncore_pcu/format/filter_band1
      config1:8-15
      # cat uncore_pcu/format/filter_band2
      config1:16-23
      # cat uncore_pcu/format/filter_band3
      config1:24-31
    
    The reason of the issue is that filter_band* values are supposed to be
    in 100Mhz units.. it's stated in the JSON help for the events, like:
    
      filter_band3=XXX, with XXX in 100Mhz units
    
    This patch divides the filter_band* values by 100, plus there's couple
    of changes that actually change the number completely, like:
    
      -        "Filter": "edge=1,filter_band2=4000",
      +        "Filter": "edge=1,filter_band2=30",
    
    Reported-by: Michael Petlan <mpetlan@redhat.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20181010080339.GB15790@krava
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11896963b7b5977616b2010e89d532559950de73
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Oct 10 18:02:21 2018 +0200

    xfrm: policy: use hlist rcu variants on insert
    
    [ Upstream commit 9dffff200fd178f11dd50eb1fd8ccd0650c9284e ]
    
    bydst table/list lookups use rcu, so insertions must use rcu versions.
    
    Fixes: a7c44247f704e ("xfrm: policy: make xfrm_policy_lookup_bytype lockless")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c7cd9fe35497975c9590accd84273a4f95fb1e6
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Wed Oct 3 09:20:46 2018 +0200

    Revert "perf tools: Fix PMU term format max value calculation"
    
    [ Upstream commit 1b9caa10b31dda0866f4028e4bfb923fb6e4072f ]
    
    This reverts commit ac0e2cd555373ae6f8f3a3ad3fbbf5b6d1e7aaaa.
    
    Michael reported an issue with oversized terms values assignment
    and I noticed there was actually a misunderstanding of the max
    value check in the past.
    
    The above commit's changelog says:
    
      If bit 21 is set, there is parsing issues as below.
    
        $ perf stat -a -e uncore_qpi_0/event=0x200002,umask=0x8/
        event syntax error: '..pi_0/event=0x200002,umask=0x8/'
                                          \___ value too big for format, maximum is 511
    
    But there's no issue there, because the event value is distributed
    along the value defined by the format. Even if the format defines
    separated bit, the value is treated as a continual number, which
    should follow the format definition.
    
    In above case it's 9-bit value with last bit separated:
      $ cat uncore_qpi_0/format/event
      config:0-7,21
    
    Hence the value 0x200002 is correctly reported as format violation,
    because it exceeds 9 bits. It should have been 0x102 instead, which
    sets the 9th bit - the bit 21 of the format.
    
      $ perf stat -vv -a -e uncore_qpi_0/event=0x102,umask=0x8/
      Using CPUID GenuineIntel-6-2D
      ...
      ------------------------------------------------------------
      perf_event_attr:
        type                             10
        size                             112
        config                           0x200802
        sample_type                      IDENTIFIER
      ...
    
    Reported-by: Michael Petlan <mpetlan@redhat.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Fixes: ac0e2cd55537 ("perf tools: Fix PMU term format max value calculation")
    Link: http://lkml.kernel.org/r/20181003072046.29276-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c9cd35cb3e63f71af7c95a918c1586b21f5c3ee
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 5 19:38:46 2018 -0700

    bpf: do not blindly change rlimit in reuseport net selftest
    
    [ Upstream commit 262f9d811c7608f1e74258ceecfe1fa213bdf912 ]
    
    If the current process has unlimited RLIMIT_MEMLOCK,
    we should should leave it as is.
    
    Fixes: 941ff6f11c02 ("bpf: fix rlimit in reuseport net selftest")
    Signed-off-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43c7313ec7cbe3a31643a3d2b3c3e2d20312dc8b
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Wed Sep 5 12:02:15 2018 +0200

    ARM: dts: exynos: Disable pull control for MAX8997 interrupts on Origen
    
    commit f5e758b8358f6c27e8a351ddf0b441a64cdabb94 upstream.
    
    PMIC_IRQB and PMIC_KEYINB lines on Exynos4210-based Origen board have
    external pull-up resistors, so disable any pull control for those lines
    in respective pin controller node. This fixes support for MAX8997
    interrupts and enables operation of wakeup from MAX8997 RTC alarm.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Fixes: 17419726aaa1 ("ARM: dts: add max8997 device node for exynos4210-origen board")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7051265f1e648d627e684ff903650439b89882c
Author: Sai Praneeth <sai.praneeth.prakhya@intel.com>
Date:   Wed Aug 1 11:42:25 2018 -0700

    x86/speculation: Support Enhanced IBRS on future CPUs
    
    commit 706d51681d636a0c4a5ef53395ec3b803e45ed4d upstream.
    
    Future Intel processors will support "Enhanced IBRS" which is an "always
    on" mode i.e. IBRS bit in SPEC_CTRL MSR is enabled once and never
    disabled.
    
    From the specification [1]:
    
     "With enhanced IBRS, the predicted targets of indirect branches
      executed cannot be controlled by software that was executed in a less
      privileged predictor mode or on another logical processor. As a
      result, software operating on a processor with enhanced IBRS need not
      use WRMSR to set IA32_SPEC_CTRL.IBRS after every transition to a more
      privileged predictor mode. Software can isolate predictor modes
      effectively simply by setting the bit once. Software need not disable
      enhanced IBRS prior to entering a sleep state such as MWAIT or HLT."
    
    If Enhanced IBRS is supported by the processor then use it as the
    preferred spectre v2 mitigation mechanism instead of Retpoline. Intel's
    Retpoline white paper [2] states:
    
     "Retpoline is known to be an effective branch target injection (Spectre
      variant 2) mitigation on Intel processors belonging to family 6
      (enumerated by the CPUID instruction) that do not have support for
      enhanced IBRS. On processors that support enhanced IBRS, it should be
      used for mitigation instead of retpoline."
    
    The reason why Enhanced IBRS is the recommended mitigation on processors
    which support it is that these processors also support CET which
    provides a defense against ROP attacks. Retpoline is very similar to ROP
    techniques and might trigger false positives in the CET defense.
    
    If Enhanced IBRS is selected as the mitigation technique for spectre v2,
    the IBRS bit in SPEC_CTRL MSR is set once at boot time and never
    cleared. Kernel also has to make sure that IBRS bit remains set after
    VMEXIT because the guest might have cleared the bit. This is already
    covered by the existing x86_spec_ctrl_set_guest() and
    x86_spec_ctrl_restore_host() speculation control functions.
    
    Enhanced IBRS still requires IBPB for full mitigation.
    
    [1] Speculative-Execution-Side-Channel-Mitigations.pdf
    [2] Retpoline-A-Branch-Target-Injection-Mitigation.pdf
    Both documents are available at:
    https://bugzilla.kernel.org/show_bug.cgi?id=199511
    
    Originally-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim C Chen <tim.c.chen@intel.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Ravi Shankar <ravi.v.shankar@intel.com>
    Link: https://lkml.kernel.org/r/1533148945-24095-1-git-send-email-sai.praneeth.prakhya@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b80a2dd4d7a1e51ed34c91b4e03e425dc0c21223
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Oct 17 12:34:32 2018 +0200

    x86/mm/pat: Disable preemption around __flush_tlb_all()
    
    commit f77084d96355f5fba8e2c1fb3a51a393b1570de7 upstream.
    
    The WARN_ON_ONCE(__read_cr3() != build_cr3()) in switch_mm_irqs_off()
    triggers every once in a while during a snapshotted system upgrade.
    
    The warning triggers since commit decab0888e6e ("x86/mm: Remove
    preempt_disable/enable() from __native_flush_tlb()"). The callchain is:
    
      get_page_from_freelist() -> post_alloc_hook() -> __kernel_map_pages()
    
    with CONFIG_DEBUG_PAGEALLOC enabled.
    
    Disable preemption during CR3 reset / __flush_tlb_all() and add a comment
    why preemption has to be disabled so it won't be removed accidentaly.
    
    Add another preemptible() check in __flush_tlb_all() to catch callers with
    enabled preemption when PGE is enabled, because PGE enabled does not
    trigger the warning in __native_flush_tlb(). Suggested by Andy Lutomirski.
    
    Fixes: decab0888e6e ("x86/mm: Remove preempt_disable/enable() from __native_flush_tlb()")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181017103432.zgv46nlu3hc7k4rq@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2e58b0414523cac77c52ab1f7b4f470e6e69ada
Author: He Zhe <zhe.he@windriver.com>
Date:   Tue Aug 14 23:33:42 2018 +0800

    x86/corruption-check: Fix panic in memory_corruption_check() when boot option without value is provided
    
    commit ccde460b9ae5c2bd5e4742af0a7f623c2daad566 upstream.
    
    memory_corruption_check[{_period|_size}]()'s handlers do not check input
    argument before passing it to kstrtoul() or simple_strtoull(). The argument
    would be a NULL pointer if each of the kernel parameters, without its
    value, is set in command line and thus cause the following panic.
    
    PANIC: early exception 0xe3 IP 10:ffffffff73587c22 error 0 cr2 0x0
    [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 4.18-rc8+ #2
    [    0.000000] RIP: 0010:kstrtoull+0x2/0x10
    ...
    [    0.000000] Call Trace
    [    0.000000]  ? set_corruption_check+0x21/0x49
    [    0.000000]  ? do_early_param+0x4d/0x82
    [    0.000000]  ? parse_args+0x212/0x330
    [    0.000000]  ? rdinit_setup+0x26/0x26
    [    0.000000]  ? parse_early_options+0x20/0x23
    [    0.000000]  ? rdinit_setup+0x26/0x26
    [    0.000000]  ? parse_early_param+0x2d/0x39
    [    0.000000]  ? setup_arch+0x2f7/0xbf4
    [    0.000000]  ? start_kernel+0x5e/0x4c2
    [    0.000000]  ? load_ucode_bsp+0x113/0x12f
    [    0.000000]  ? secondary_startup_64+0xa5/0xb0
    
    This patch adds checks to prevent the panic.
    
    Signed-off-by: He Zhe <zhe.he@windriver.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: gregkh@linuxfoundation.org
    Cc: kstewart@linuxfoundation.org
    Cc: pombredanne@nexb.com
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/1534260823-87917-1-git-send-email-zhe.he@windriver.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed2df6687223bd1d7f82b19cbd52d79c4263ff0f
Author: Juergen Gross <jgross@suse.com>
Date:   Wed Oct 10 08:14:54 2018 +0200

    x86/xen: Fix boot loader version reported for PVH guests
    
    commit 357d291ce035d1b757568058f3c9898c60d125b1 upstream.
    
    The boot loader version reported via sysfs is wrong in case of the
    kernel being booted via the Xen PVH boot entry. it should be 2.12
    (0x020c), but it is reported to be 2.18 (0x0212).
    
    As the current way to set the version is error prone use the more
    readable variant (2 << 8) | 12.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Cc: <stable@vger.kernel.org> # 4.12
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boris.ostrovsky@oracle.com
    Cc: bp@alien8.de
    Cc: corbet@lwn.net
    Cc: linux-doc@vger.kernel.org
    Cc: xen-devel@lists.xenproject.org
    Link: http://lkml.kernel.org/r/20181010061456.22238-2-jgross@suse.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a13906ae519b3ed95cd0fb73f1098b46362f6c4
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 25 14:38:55 2018 +0200

    x86/speculation: Enable cross-hyperthread spectre v2 STIBP mitigation
    
    commit 53c613fe6349994f023245519265999eed75957f upstream.
    
    STIBP is a feature provided by certain Intel ucodes / CPUs. This feature
    (once enabled) prevents cross-hyperthread control of decisions made by
    indirect branch predictors.
    
    Enable this feature if
    
    - the CPU is vulnerable to spectre v2
    - the CPU supports SMT and has SMT siblings online
    - spectre_v2 mitigation autoselection is enabled (default)
    
    After some previous discussion, this leaves STIBP on all the time, as wrmsr
    on crossing kernel boundary is a no-no. This could perhaps later be a bit
    more optimized (like disabling it in NOHZ, experiment with disabling it in
    idle, etc) if needed.
    
    Note that the synchronization of the mask manipulation via newly added
    spec_ctrl_mutex is currently not strictly needed, as the only updater is
    already being serialized by cpu_add_remove_lock, but let's make this a
    little bit more future-proof.
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc:  "WoodhouseDavid" <dwmw@amazon.co.uk>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc:  "SchauflerCasey" <casey.schaufler@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/nycvar.YFH.7.76.1809251438240.15880@cbobk.fhfr.pm
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a436f6b2db64cd9e853ee6b54fba0499d8f80f93
Author: Alex Stanoev <alex@astanoev.com>
Date:   Sun Oct 28 16:55:12 2018 +0000

    ALSA: ca0106: Disable IZD on SB0570 DAC to fix audio pops
    
    commit ac237c28d5ac1b241d58b1b7b4b9fa10efb22fb5 upstream.
    
    The Creative Audigy SE (SB0570) card currently exhibits an audible pop
    whenever playback is stopped or resumed, or during silent periods of an
    audio stream. Initialise the IZD bit to the 0 to eliminate these pops.
    
    The Infinite Zero Detection (IZD) feature on the DAC causes the output
    to be shunted to Vcap after 2048 samples of silence. This discharges the
    AC coupling capacitor through the output and causes the aforementioned
    pop/click noise.
    
    The behaviour of the IZD bit is described on page 15 of the WM8768GEDS
    datasheet: "With IZD=1, applying MUTE for 1024 consecutive input samples
    will cause all outputs to be connected directly to VCAP. This also
    happens if 2048 consecutive zero input samples are applied to all 6
    channels, and IZD=0. It will be removed as soon as any channel receives
    a non-zero input". I believe the second sentence might be referring to
    IZD=1 instead of IZD=0 given the observed behaviour of the card.
    
    This change should make the DAC initialisation consistent with
    Creative's Windows driver, as this popping persists when initialising
    the card in Linux and soft rebooting into Windows, but is not present on
    a cold boot to Windows.
    
    Signed-off-by: Alex Stanoev <alex@astanoev.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0404d81ab842b8d4246662c1c46bb20525dd743
Author: Jeremy Cline <jcline@redhat.com>
Date:   Thu Oct 11 15:49:17 2018 -0400

    ALSA: hda - Add mic quirk for the Lenovo G50-30 (17aa:3905)
    
    commit e7bb6ad5685f05685dd8a6a5eda7bfcd14d5f95b upstream.
    
    The Lenovo G50-30, like other G50 models, has a Conexant codec that
    requires a quirk for its inverted stereo dmic.
    
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1249364
    Reported-by: Alexander Ploumistos <alex.ploumistos@gmail.com>
    Tested-by: Alexander Ploumistos <alex.ploumistos@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeremy Cline <jcline@redhat.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b50b3d70994010c478f74b3ae15389c4b974272
Author: Hui Wang <hui.wang@canonical.com>
Date:   Wed Oct 10 11:57:25 2018 +0800

    ALSA: hda/realtek - Fix the problem of the front MIC on the Lenovo M715
    
    commit d06fb562bff5d14defdacbd92449bacbaedd5cdf upstream.
    
    The front MIC on the Lenovo M715 can't record sound, after applying
    the ALC294_FIXUP_LENOVO_MIC_LOCATION, the problem is fixed. So add
    the pin configuration of this machine to the pin quirk table.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ad912e2b2c18784b52de195d403dc269aecfd8f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Oct 9 14:20:17 2018 +0200

    ALSA: hda - Fix headphone pin config for ASUS G751
    
    commit 5b7c5e1f4c36b99d0f694f38b9ad910f520cb7ef upstream.
    
    BIOS on ASUS G751 doesn't seem to map the headphone pin (NID 0x16)
    correctly.  Add a quirk to address it, as well as chaining to the
    previous fix for the microphone.
    
    Reported-by: Håvard <hovardslill@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f80215f62eb7f82247b51cf1f098a4ee2643d8fe
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Oct 7 09:44:17 2018 +0200

    ALSA: hda - Add quirk for ASUS G751 laptop
    
    commit 11ba6111160290ccd35562f4e05cec08942a6c4c upstream.
    
    ASUS G751 requires the extra COEF initialization to make it microphone
    working properly.
    
    Reported-and-tested-by: Håvard <hovardslill@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d665f97f859a355618653c016c824e82ec29d288
Author: Helge Deller <deller@gmx.de>
Date:   Sun Oct 14 21:58:00 2018 +0200

    parisc: Fix exported address of os_hpmc handler
    
    commit 99a3ae51d557d8e38a7aece65678a31f9db215ee upstream.
    
    In the C-code we need to put the physical address of the hpmc handler in
    the interrupt vector table (IVA) in order to get HPMCs working.  Since
    on parisc64 function pointers are indirect (in fact they are function
    descriptors) we instead export the address as variable and not as
    function.
    
    This reverts a small part of commit f39cce654f9a ("parisc: Add
    cfi_startproc and cfi_endproc to assembly code").
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>    [4.9+]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5475f5fc5f881d547a16cc7c1249e50a48a1a80
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 12 22:37:46 2018 +0200

    parisc: Fix map_pages() to not overwrite existing pte entries
    
    commit 3c229b3f2dd8133f61bb81d3cb018be92f4bba39 upstream.
    
    Fix a long-existing small nasty bug in the map_pages() implementation which
    leads to overwriting already written pte entries with zero, *if* map_pages() is
    called a second time with an end address which isn't aligned on a pmd boundry.
    This happens for example if we want to remap only the text segment read/write
    in order to run alternative patching on the code. Exiting the loop when we
    reach the end address fixes this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 472e300014bc0b3dde10b7ff224197c678a6d3d9
Author: John David Anglin <dave.anglin@bell.net>
Date:   Sat Oct 6 13:11:30 2018 -0400

    parisc: Fix address in HPMC IVA
    
    commit 1138b6718ff74d2a934459643e3754423d23b5e2 upstream.
    
    Helge noticed that the address of the os_hpmc handler was not being
    correctly calculated in the hpmc macro.  As a result, PDCE_CHECK would
    fail to call os_hpmc:
    
    <Cpu2> e800009802e00000  0000000000000000  CC_ERR_CHECK_HPMC
    <Cpu2> 37000f7302e00000  8040004000000000  CC_ERR_CPU_CHECK_SUMMARY
    <Cpu2> f600105e02e00000  fffffff0f0c00000  CC_MC_HPMC_MONARCH_SELECTED
    <Cpu2> 140003b202e00000  000000000000000b  CC_ERR_HPMC_STATE_ENTRY
    <Cpu2> 5600100b02e00000  00000000000001a0  CC_MC_OS_HPMC_LEN_ERR
    <Cpu2> 5600106402e00000  fffffff0f0438e70  CC_MC_BR_TO_OS_HPMC_FAILED
    <Cpu2> e800009802e00000  0000000000000000  CC_ERR_CHECK_HPMC
    <Cpu2> 37000f7302e00000  8040004000000000  CC_ERR_CPU_CHECK_SUMMARY
    <Cpu2> 4000109f02e00000  0000000000000000  CC_MC_HPMC_INITIATED
    <Cpu2> 4000101902e00000  0000000000000000  CC_MC_MULTIPLE_HPMCS
    <Cpu2> 030010d502e00000  0000000000000000  CC_CPU_STOP
    
    The address problem can be seen by dumping the fault vector:
    
    0000000040159000 <fault_vector_20>:
        40159000:   63 6f 77 73     stb r15,-2447(dp)
        40159004:   20 63 61 6e     ldil L%b747000,r3
        40159008:   20 66 6c 79     ldil L%-1c3b3000,r3
            ...
        40159020:   08 00 02 40     nop
        40159024:   20 6e 60 02     ldil L%15d000,r3
        40159028:   34 63 00 00     ldo 0(r3),r3
        4015902c:   e8 60 c0 02     bv,n r0(r3)
        40159030:   08 00 02 40     nop
        40159034:   00 00 00 00     break 0,0
        40159038:   c0 00 70 00     bb,*< r0,sar,40159840 <fault_vector_20+0x840>
        4015903c:   00 00 00 00     break 0,0
    
    Location 40159038 should contain the physical address of os_hpmc:
    
    000000004015d000 <os_hpmc>:
        4015d000:   08 1a 02 43     copy r26,r3
        4015d004:   01 c0 08 a4     mfctl iva,r4
        4015d008:   48 85 00 68     ldw 34(r4),r5
    
    This patch moves the address setup into initialize_ivt to resolve the
    above problem.  I tested the change by dumping the HPMC entry after setup:
    
    0000000040209020:  8000240
    0000000040209024: 206a2004
    0000000040209028: 34630ac0
    000000004020902c: e860c002
    0000000040209030:  8000240
    0000000040209034: 1bdddce6
    0000000040209038:   15d000
    000000004020903c:      1a0
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbde82fdb6d083d6e4c2b33c65e8752f12ce03e1
Author: Jan Glauber <jan.glauber@gmail.com>
Date:   Thu Oct 11 12:13:01 2018 +0200

    ipmi: Fix timer race with module unload
    
    commit 0711e8c1b4572d076264e71b0002d223f2666ed7 upstream.
    
    Please note that below oops is from an older kernel, but the same
    race seems to be present in the upstream kernel too.
    
    ---8<---
    
    The following panic was encountered during removing the ipmi_ssif
    module:
    
    [ 526.352555] Unable to handle kernel paging request at virtual address ffff000006923090
    [ 526.360464] Mem abort info:
    [ 526.363257] ESR = 0x86000007
    [ 526.366304] Exception class = IABT (current EL), IL = 32 bits
    [ 526.372221] SET = 0, FnV = 0
    [ 526.375269] EA = 0, S1PTW = 0
    [ 526.378405] swapper pgtable: 4k pages, 48-bit VAs, pgd = 000000008ae60416
    [ 526.385185] [ffff000006923090] *pgd=000000bffcffe803, *pud=000000bffcffd803, *pmd=0000009f4731a003, *pte=0000000000000000
    [ 526.396141] Internal error: Oops: 86000007 [#1] SMP
    [ 526.401008] Modules linked in: nls_iso8859_1 ipmi_devintf joydev input_leds ipmi_msghandler shpchp sch_fq_codel ib_iser rdma_cm iw_cm ib_cm ib_core iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi ip_tables x_tables autofs4 btrfs zstd_compress raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor async_tx xor raid6_pq libcrc32c raid1 raid0 multipath linear i2c_smbus hid_generic usbhid uas hid usb_storage ast aes_ce_blk i2c_algo_bit aes_ce_cipher qede ttm crc32_ce ptp crct10dif_ce drm_kms_helper ghash_ce syscopyarea sha2_ce sysfillrect sysimgblt pps_core fb_sys_fops sha256_arm64 sha1_ce mpt3sas qed drm raid_class ahci scsi_transport_sas libahci gpio_xlp i2c_xlp9xx aes_neon_bs aes_neon_blk crypto_simd cryptd aes_arm64 [last unloaded: ipmi_ssif]
    [ 526.468085] CPU: 125 PID: 0 Comm: swapper/125 Not tainted 4.15.0-35-generic #38~lp1775396+build.1
    [ 526.476942] Hardware name: To be filled by O.E.M. Saber/Saber, BIOS 0ACKL022 08/14/2018
    [ 526.484932] pstate: 00400009 (nzcv daif +PAN -UAO)
    [ 526.489713] pc : 0xffff000006923090
    [ 526.493198] lr : call_timer_fn+0x34/0x178
    [ 526.497194] sp : ffff000009b0bdd0
    [ 526.500496] x29: ffff000009b0bdd0 x28: 0000000000000082
    [ 526.505796] x27: 0000000000000002 x26: ffff000009515188
    [ 526.511096] x25: ffff000009515180 x24: ffff0000090f1018
    [ 526.516396] x23: ffff000009519660 x22: dead000000000200
    [ 526.521696] x21: ffff000006923090 x20: 0000000000000100
    [ 526.526995] x19: ffff809eeb466a40 x18: 0000000000000000
    [ 526.532295] x17: 000000000000000e x16: 0000000000000007
    [ 526.537594] x15: 0000000000000000 x14: 071c71c71c71c71c
    [ 526.542894] x13: 0000000000000000 x12: 0000000000000000
    [ 526.548193] x11: 0000000000000001 x10: ffff000009b0be88
    [ 526.553493] x9 : 0000000000000000 x8 : 0000000000000005
    [ 526.558793] x7 : ffff80befc1f8528 x6 : 0000000000000020
    [ 526.564092] x5 : 0000000000000040 x4 : 0000000020001b20
    [ 526.569392] x3 : 0000000000000000 x2 : ffff809eeb466a40
    [ 526.574692] x1 : ffff000006923090 x0 : ffff809eeb466a40
    [ 526.579992] Process swapper/125 (pid: 0, stack limit = 0x000000002eb50acc)
    [ 526.586854] Call trace:
    [ 526.589289] 0xffff000006923090
    [ 526.592419] expire_timers+0xc8/0x130
    [ 526.596070] run_timer_softirq+0xec/0x1b0
    [ 526.600070] __do_softirq+0x134/0x328
    [ 526.603726] irq_exit+0xc8/0xe0
    [ 526.606857] __handle_domain_irq+0x6c/0xc0
    [ 526.610941] gic_handle_irq+0x84/0x188
    [ 526.614679] el1_irq+0xe8/0x180
    [ 526.617822] cpuidle_enter_state+0xa0/0x328
    [ 526.621993] cpuidle_enter+0x34/0x48
    [ 526.625564] call_cpuidle+0x44/0x70
    [ 526.629040] do_idle+0x1b8/0x1f0
    [ 526.632256] cpu_startup_entry+0x2c/0x30
    [ 526.636174] secondary_start_kernel+0x11c/0x130
    [ 526.640694] Code: bad PC value
    [ 526.643800] ---[ end trace d020b0b8417c2498 ]---
    [ 526.648404] Kernel panic - not syncing: Fatal exception in interrupt
    [ 526.654778] SMP: stopping secondary CPUs
    [ 526.658734] Kernel Offset: disabled
    [ 526.662211] CPU features: 0x5800c38
    [ 526.665688] Memory Limit: none
    [ 526.668768] ---[ end Kernel panic - not syncing: Fatal exception in interrupt
    
    Prevent mod_timer from arming a timer that was already removed by
    del_timer during module unload.
    
    Signed-off-by: Jan Glauber <jglauber@cavium.com>
    Cc: <stable@vger.kernel.org> # 3.19
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3e48da87330397de4e50b9958e5694a6764e38a
Author: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
Date:   Sun Sep 9 01:21:06 2018 +0200

    pcmcia: Implement CLKRUN protocol disabling for Ricoh bridges
    
    commit 95691e3eddc41da2d1cd3cca51fecdfb46bd85bc upstream.
    
    Currently, "disable_clkrun" yenta_socket module parameter is only
    implemented for TI CardBus bridges.
    Add also an implementation for Ricoh bridges that have the necessary
    setting documented in publicly available datasheets.
    
    Tested on a RL5C476II with a Sunrich C-160 CardBus NIC that doesn't work
    correctly unless the CLKRUN protocol is disabled.
    
    Let's also make it clear in its description that the "disable_clkrun"
    module parameter only works on these two previously mentioned brands of
    CardBus bridges.
    
    Signed-off-by: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f721267b1f28c13efab07bc80c28753e9fbec00e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Oct 15 23:21:05 2018 +0200

    cpufreq: conservative: Take limits changes into account properly
    
    commit da5e79bc70b84971d2b3a55fb252e34e51d81d48 upstream.
    
    If the policy limits change between invocations of cs_dbs_update(),
    the requested frequency value stored in dbs_info may not be updated
    and the function may use a stale value of it next time.  Moreover, if
    idle periods are takem into account by cs_dbs_update(), the requested
    frequency value stored in dbs_info may be below the min policy limit,
    which is incorrect.
    
    To fix these problems, always update the requested frequency value
    in dbs_info along with the local copy of it when the previous
    requested frequency is beyond the policy limits and avoid decreasing
    the requested frequency below the min policy limit when taking
    idle periods into account.
    
    Fixes: abb6627910a1 (cpufreq: conservative: Fix next frequency selection)
    Fixes: 00bfe05889e9 (cpufreq: conservative: Decrease frequency faster for deferred updates)
    Reported-by: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0035cb9d7366487205aba8cc0a2c03dd9dd75742
Author: Hou Tao <houtao1@huawei.com>
Date:   Sat Oct 6 17:09:35 2018 +0800

    jffs2: free jffs2_sb_info through jffs2_kill_sb()
    
    commit 92e2921f7eee63450a5f953f4b15dc6210219430 upstream.
    
    When an invalid mount option is passed to jffs2, jffs2_parse_options()
    will fail and jffs2_sb_info will be freed, but then jffs2_sb_info will
    be used (use-after-free) and freeed (double-free) in jffs2_kill_sb().
    
    Fix it by removing the buggy invocation of kfree() when getting invalid
    mount options.
    
    Fixes: 92abc475d8de ("jffs2: implement mount option parsing and compression overriding")
    Cc: stable@kernel.org
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0be4ef1290cfe370caf52e3dac2325cf7ee12007
Author: Dmitry Bazhenov <bazhenov.dn@gmail.com>
Date:   Mon Oct 15 14:21:22 2018 +0500

    hwmon: (pmbus) Fix page count auto-detection.
    
    commit e7c6a55606b5c46b449d76588968b4d8caae903f upstream.
    
    Devices with compatible="pmbus" field have zero initial page count,
    and pmbus_clear_faults() being called before the page count auto-
    detection does not actually clear faults because it depends on the
    page count. Non-cleared faults in its turn may fail the subsequent
    page count auto-detection.
    
    This patch fixes this problem by calling pmbus_clear_fault_page()
    for currently set page and calling pmbus_clear_faults() after the
    page count was detected.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Bazhenov <bazhenov.dn@gmail.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcd048d6bb08d3da1e9cb1923bce80dbc0f90fed
Author: Tang Junhui <tang.junhui.linux@gmail.com>
Date:   Mon Oct 8 20:41:14 2018 +0800

    bcache: fix miss key refill->end in writeback
    
    commit 2d6cb6edd2c7fb4f40998895bda45006281b1ac5 upstream.
    
    refill->end record the last key of writeback, for example, at the first
    time, keys (1,128K) to (1,1024K) are flush to the backend device, but
    the end key (1,1024K) is not included, since the bellow code:
            if (bkey_cmp(k, refill->end) >= 0) {
                    ret = MAP_DONE;
                    goto out;
            }
    And in the next time when we refill writeback keybuf again, we searched
    key start from (1,1024K), and got a key bigger than it, so the key
    (1,1024K) missed.
    This patch modify the above code, and let the end key to be included to
    the writeback key buffer.
    
    Signed-off-by: Tang Junhui <tang.junhui.linux@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82239bda9dac002ffb68c6019134c5245aeb4cae
Author: Tang Junhui <tang.junhui.linux@gmail.com>
Date:   Mon Oct 8 20:41:08 2018 +0800

    bcache: trace missed reading by cache_missed
    
    commit 502b291568fc7faf1ebdb2c2590f12851db0ff76 upstream.
    
    Missed reading IOs are identified by s->cache_missed, not the
    s->cache_miss, so in trace_bcache_read() using trace_bcache_read
    to identify whether the IO is missed or not.
    
    Signed-off-by: Tang Junhui <tang.junhui.linux@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 615bda31cc01cfe937c35c8b969807a38614a0a3
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Thu Oct 11 09:42:17 2018 +0200

    spi: bcm-qspi: switch back to reading flash using smaller chunks
    
    commit 940ec770c295682993d1cccce3081fd7c74fece8 upstream.
    
    Fixing/optimizing bcm_qspi_bspi_read() performance introduced two
    changes:
    1) It added a loop to read all requested data using multiple BSPI ops.
    2) It bumped max size of a single BSPI block request from 256 to 512 B.
    
    The later change resulted in occasional BSPI timeouts causing a
    regression.
    
    For some unknown reason hardware doesn't always handle reads as expected
    when using 512 B chunks. In such cases it may happen that BSPI returns
    amount of requested bytes without the last 1-3 ones. It provides the
    remaining bytes later but doesn't raise an interrupt until another LR
    start.
    
    Switching back to 256 B reads fixes that problem and regression.
    
    Fixes: 345309fa7c0c ("spi: bcm-qspi: Fix bcm_qspi_bspi_read() performance")
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31354285b2467a5838f131786181dd706b28688b
Author: Liu Xiang <liu.xiang6@zte.com.cn>
Date:   Tue Aug 28 22:32:57 2018 +0800

    mtd: spi-nor: fsl-quadspi: fix read error for flash size larger than 16MB
    
    commit 41fe242979e463d6ad251077ded01b825a330b7e upstream.
    
    If the size of spi-nor flash is larger than 16MB, the read_opcode
    is set to SPINOR_OP_READ_1_1_4_4B, and fsl_qspi_get_seqid() will
    return -EINVAL when cmd is SPINOR_OP_READ_1_1_4_4B. This can
    cause read operation fail.
    
    Fixes: e46ecda764dc ("mtd: spi-nor: Add Freescale QuadSPI driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Liu Xiang <liu.xiang6@zte.com.cn>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
