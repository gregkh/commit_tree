commit 7a6bfa08b938d33ba0a2b80d4f717d4f0dbf9170
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 10 09:53:48 2019 +0200

    Linux 4.19.58

commit f37de75cb8ebfcb5aa048824e7dc706ecebad4ca
Author: Robin Gong <yibin.gong@nxp.com>
Date:   Fri Jun 21 16:23:06 2019 +0800

    dmaengine: imx-sdma: remove BD_INTR for channel0
    
    commit 3f93a4f297961c12bb17aa16cb3a4d1291823cae upstream.
    
    It is possible for an irq triggered by channel0 to be received later
    after clks are disabled once firmware loaded during sdma probe. If
    that happens then clearing them by writing to SDMA_H_INTR won't work
    and the kernel will hang processing infinite interrupts. Actually,
    don't need interrupt triggered on channel0 since it's pollling
    SDMA_H_STATSTOP to know channel0 done rather than interrupt in
    current code, just clear BD_INTR to disable channel0 interrupt to
    avoid the above case.
    This issue was brought by commit 1d069bfa3c78 ("dmaengine: imx-sdma:
    ack channel 0 IRQ in the interrupt handler") which didn't take care
    the above case.
    
    Fixes: 1d069bfa3c78 ("dmaengine: imx-sdma: ack channel 0 IRQ in the interrupt handler")
    Cc: stable@vger.kernel.org #5.0+
    Signed-off-by: Robin Gong <yibin.gong@nxp.com>
    Reported-by: Sven Van Asbroeck <thesven73@gmail.com>
    Tested-by: Sven Van Asbroeck <thesven73@gmail.com>
    Reviewed-by: Michael Olbrich <m.olbrich@pengutronix.de>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 018c968de710af1372d456ededc0a575ee038b92
Author: Sricharan R <sricharan@codeaurora.org>
Date:   Fri Jun 28 17:39:46 2019 +0530

    dmaengine: qcom: bam_dma: Fix completed descriptors count
    
    commit f6034225442c4a87906d36e975fd9e99a8f95487 upstream.
    
    One space is left unused in circular FIFO to differentiate
    'full' and 'empty' cases. So take that in to account while
    counting for the descriptors completed.
    
    Fixes the issue reported here,
            https://lkml.org/lkml/2019/6/18/669
    
    Cc: stable@vger.kernel.org
    Reported-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Sricharan R <sricharan@codeaurora.org>
    Tested-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 870de149950551a3f9735f359b6440e69ab7ccf9
Author: Cedric Hombourger <Cedric_Hombourger@mentor.com>
Date:   Thu Jun 13 10:52:50 2019 +0200

    MIPS: have "plain" make calls build dtbs for selected platforms
    
    commit 637dfa0fad6d91a9a709dc70549a6d20fa77f615 upstream.
    
    scripts/package/builddeb calls "make dtbs_install" after executing
    a plain make (i.e. no build targets specified). It will fail if dtbs
    were not built beforehand. Match the arm64 architecture where DTBs get
    built by the "all" target.
    
    Signed-off-by: Cedric Hombourger <Cedric_Hombourger@mentor.com>
    [paul.burton@mips.com: s/builddep/builddeb]
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # v4.1+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8957895b35de0f0eb278bebcd5297187f10ce009
Author: Dmitry Korotin <dkorotin@wavecomp.com>
Date:   Mon Jun 24 19:05:27 2019 +0000

    MIPS: Add missing EHB in mtc0 -> mfc0 sequence.
    
    commit 0b24cae4d535045f4c9e177aa228d4e97bad212c upstream.
    
    Add a missing EHB (Execution Hazard Barrier) in mtc0 -> mfc0 sequence.
    Without this execution hazard barrier it's possible for the value read
    back from the KScratch register to be the value from before the mtc0.
    
    Reproducible on P5600 & P6600.
    
    The hazard is documented in the MIPS Architecture Reference Manual Vol.
    III: MIPS32/microMIPS32 Privileged Resource Architecture (MD00088), rev
    6.03 table 8.1 which includes:
    
       Producer | Consumer | Hazard
      ----------|----------|----------------------------
       mtc0     | mfc0     | any coprocessor 0 register
    
    Signed-off-by: Dmitry Korotin <dkorotin@wavecomp.com>
    [paul.burton@mips.com:
      - Commit message tweaks.
      - Add Fixes tags.
      - Mark for stable back to v3.15 where P5600 support was introduced.]
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 3d8bfdd03072 ("MIPS: Use C0_KScratch (if present) to hold PGD pointer.")
    Fixes: 829dcc0a956a ("MIPS: Add MIPS P5600 probe support")
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b8f8a80ca8ba27de5f6d94f2ab8bbeb97ffbe6b
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Mon Jun 17 00:30:39 2019 +0200

    MIPS: Fix bounds check virt_addr_valid
    
    commit d6ed083f5cc621e15c15b56c3b585fd524dbcb0f upstream.
    
    The bounds check used the uninitialized variable vaddr, it should use
    the given parameter kaddr instead. When using the uninitialized value
    the compiler assumed it to be 0 and optimized this function to just
    return 0 in all cases.
    
    This should make the function check the range of the given address and
    only do the page map check in case it is in the expected range of
    virtual addresses.
    
    Fixes: 074a1e1167af ("MIPS: Bounds check virt_addr_valid")
    Cc: stable@vger.kernel.org # v4.12+
    Cc: Paul Burton <paul.burton@mips.com>
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: ralf@linux-mips.org
    Cc: jhogan@kernel.org
    Cc: f4bug@amsat.org
    Cc: linux-mips@vger.kernel.org
    Cc: ysu@wavecomp.com
    Cc: jcristau@debian.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80b25628ff26e256864f0fdb5891a6b016f65652
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Tue Jun 11 11:01:16 2019 -0400

    svcrdma: Ignore source port when computing DRC hash
    
    commit 1e091c3bbf51d34d5d96337a59ce5ab2ac3ba2cc upstream.
    
    The DRC appears to be effectively empty after an RPC/RDMA transport
    reconnect. The problem is that each connection uses a different
    source port, which defeats the DRC hash.
    
    Clients always have to disconnect before they send retransmissions
    to reset the connection's credit accounting, thus every retransmit
    on NFS/RDMA will miss the DRC.
    
    An NFS/RDMA client's IP source port is meaningless for RDMA
    transports. The transport layer typically sets the source port value
    on the connection to a random ephemeral port. The server already
    ignores it for the "secure port" check. See commit 16e4d93f6de7
    ("NFSD: Ignore client's source port on RDMA transports").
    
    The Linux NFS server's DRC resolves XID collisions from the same
    source IP address by using the checksum of the first 200 bytes of
    the RPC call header.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8129a10ce78f1143222514b73322875b147395d8
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Wed Jul 3 13:28:15 2019 +0200

    nfsd: Fix overflow causing non-working mounts on 1 TB machines
    
    commit 3b2d4dcf71c4a91b420f835e52ddea8192300a3b upstream.
    
    Since commit 10a68cdf10 (nfsd: fix performance-limiting session
    calculation) (Linux 5.1-rc1 and 4.19.31), shares from NFS servers with
    1 TB of memory cannot be mounted anymore. The mount just hangs on the
    client.
    
    The gist of commit 10a68cdf10 is the change below.
    
        -avail = clamp_t(int, avail, slotsize, avail/3);
        +avail = clamp_t(int, avail, slotsize, total_avail/3);
    
    Here are the macros.
    
        #define min_t(type, x, y)       __careful_cmp((type)(x), (type)(y), <)
        #define clamp_t(type, val, lo, hi) min_t(type, max_t(type, val, lo), hi)
    
    `total_avail` is 8,434,659,328 on the 1 TB machine. `clamp_t()` casts
    the values to `int`, which for 32-bit integers can only hold values
    −2,147,483,648 (−2^31) through 2,147,483,647 (2^31 − 1).
    
    `avail` (in the function signature) is just 65536, so that no overflow
    was happening. Before the commit the assignment would result in 21845,
    and `num = 4`.
    
    When using `total_avail`, it is causing the assignment to be
    18446744072226137429 (printed as %lu), and `num` is then 4164608182.
    
    My next guess is, that `nfsd_drc_mem_used` is then exceeded, and the
    server thinks there is no memory available any more for this client.
    
    Updating the arguments of `clamp_t()` and `min_t()` to `unsigned long`
    fixes the issue.
    
    Now, `avail = 65536` (before commit 10a68cdf10 `avail = 21845`), but
    `num = 4` remains the same.
    
    Fixes: c54f24e338ed (nfsd: fix performance-limiting session calculation)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f25c06955f8d7fba8becaff572d09f8e1aa3d905
Author: Wanpeng Li <wanpengli@tencent.com>
Date:   Tue Jul 2 17:25:02 2019 +0800

    KVM: LAPIC: Fix pending interrupt in IRR blocked by software disable LAPIC
    
    commit bb34e690e9340bc155ebed5a3d75fc63ff69e082 upstream.
    
    Thomas reported that:
    
     | Background:
     |
     |    In preparation of supporting IPI shorthands I changed the CPU offline
     |    code to software disable the local APIC instead of just masking it.
     |    That's done by clearing the APIC_SPIV_APIC_ENABLED bit in the APIC_SPIV
     |    register.
     |
     | Failure:
     |
     |    When the CPU comes back online the startup code triggers occasionally
     |    the warning in apic_pending_intr_clear(). That complains that the IRRs
     |    are not empty.
     |
     |    The offending vector is the local APIC timer vector who's IRR bit is set
     |    and stays set.
     |
     | It took me quite some time to reproduce the issue locally, but now I can
     | see what happens.
     |
     | It requires apicv_enabled=0, i.e. full apic emulation. With apicv_enabled=1
     | (and hardware support) it behaves correctly.
     |
     | Here is the series of events:
     |
     |     Guest CPU
     |
     |     goes down
     |
     |       native_cpu_disable()
     |
     |                      apic_soft_disable();
     |
     |     play_dead()
     |
     |     ....
     |
     |     startup()
     |
     |       if (apic_enabled())
     |         apic_pending_intr_clear()    <- Not taken
     |
     |      enable APIC
     |
     |         apic_pending_intr_clear()    <- Triggers warning because IRR is stale
     |
     | When this happens then the deadline timer or the regular APIC timer -
     | happens with both, has fired shortly before the APIC is disabled, but the
     | interrupt was not serviced because the guest CPU was in an interrupt
     | disabled region at that point.
     |
     | The state of the timer vector ISR/IRR bits:
     |
     |                              ISR     IRR
     | before apic_soft_disable()    0            1
     | after apic_soft_disable()     0            1
     |
     | On startup                            0            1
     |
     | Now one would assume that the IRR is cleared after the INIT reset, but this
     | happens only on CPU0.
     |
     | Why?
     |
     | Because our CPU0 hotplug is just for testing to make sure nothing breaks
     | and goes through an NMI wakeup vehicle because INIT would send it through
     | the boots-trap code which is not really working if that CPU was not
     | physically unplugged.
     |
     | Now looking at a real world APIC the situation in that case is:
     |
     |                              ISR     IRR
     | before apic_soft_disable()    0            1
     | after apic_soft_disable()     0            1
     |
     | On startup                            0            0
     |
     | Why?
     |
     | Once the dying CPU reenables interrupts the pending interrupt gets
     | delivered as a spurious interupt and then the state is clear.
     |
     | While that CPU0 hotplug test case is surely an esoteric issue, the APIC
     | emulation is still wrong, Even if the play_dead() code would not enable
     | interrupts then the pending IRR bit would turn into an ISR .. interrupt
     | when the APIC is reenabled on startup.
    
    From SDM 10.4.7.2 Local APIC State After It Has Been Software Disabled
    * Pending interrupts in the IRR and ISR registers are held and require
      masking or handling by the CPU.
    
    In Thomas's testing, hardware cpu will not respect soft disable LAPIC
    when IRR has already been set or APICv posted-interrupt is in flight,
    so we can skip soft disable APIC checking when clearing IRR and set ISR,
    continue to respect soft disable APIC when attempting to set IRR.
    
    Reported-by: Rong Chen <rong.a.chen@intel.com>
    Reported-by: Feng Tang <feng.tang@intel.com>
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Rong Chen <rong.a.chen@intel.com>
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6472f50fbfc1130b16df90b081db0c45e23a20c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 26 14:16:13 2019 +0200

    KVM: x86: degrade WARN to pr_warn_ratelimited
    
    commit 3f16a5c318392cbb5a0c7a3d19dff8c8ef3c38ee upstream.
    
    This warning can be triggered easily by userspace, so it should certainly not
    cause a panic if panic_on_warn is set.
    
    Reported-by: syzbot+c03f30b4f4c46bdf8575@syzkaller.appspotmail.com
    Suggested-by: Alexander Potapenko <glider@google.com>
    Acked-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac0024baf073c25e40edca84f1f0dee80326f91b
Author: Guillaume Nault <gnault@redhat.com>
Date:   Thu Jun 6 18:04:00 2019 +0200

    netfilter: ipv6: nf_defrag: accept duplicate fragments again
    
    [ Upstream commit 8a3dca632538c550930ce8bafa8c906b130d35cf ]
    
    When fixing the skb leak introduced by the conversion to rbtree, I
    forgot about the special case of duplicate fragments. The condition
    under the 'insert_error' label isn't effective anymore as
    nf_ct_frg6_gather() doesn't override the returned value anymore. So
    duplicate fragments now get NF_DROP verdict.
    
    To accept duplicate fragments again, handle them specially as soon as
    inet_frag_queue_insert() reports them. Return -EINPROGRESS which will
    translate to NF_STOLEN verdict, like any accepted fragment. However,
    such packets don't carry any new information and aren't queued, so we
    just drop them immediately.
    
    Fixes: a0d56cb911ca ("netfilter: ipv6: nf_defrag: fix leakage of unqueued fragments")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54e8cf41b20b9e9952c7e563794efcbc5d47e891
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Dec 11 12:14:12 2018 +0100

    bpf: fix bpf_jit_limit knob for PAGE_SIZE >= 64K
    
    [ Upstream commit fdadd04931c2d7cd294dc5b2b342863f94be53a3 ]
    
    Michael and Sandipan report:
    
      Commit ede95a63b5 introduced a bpf_jit_limit tuneable to limit BPF
      JIT allocations. At compile time it defaults to PAGE_SIZE * 40000,
      and is adjusted again at init time if MODULES_VADDR is defined.
    
      For ppc64 kernels, MODULES_VADDR isn't defined, so we're stuck with
      the compile-time default at boot-time, which is 0x9c400000 when
      using 64K page size. This overflows the signed 32-bit bpf_jit_limit
      value:
    
      root@ubuntu:/tmp# cat /proc/sys/net/core/bpf_jit_limit
      -1673527296
    
      and can cause various unexpected failures throughout the network
      stack. In one case `strace dhclient eth0` reported:
    
      setsockopt(5, SOL_SOCKET, SO_ATTACH_FILTER, {len=11, filter=0x105dd27f8},
                 16) = -1 ENOTSUPP (Unknown error 524)
    
      and similar failures can be seen with tools like tcpdump. This doesn't
      always reproduce however, and I'm not sure why. The more consistent
      failure I've seen is an Ubuntu 18.04 KVM guest booted on a POWER9
      host would time out on systemd/netplan configuring a virtio-net NIC
      with no noticeable errors in the logs.
    
    Given this and also given that in near future some architectures like
    arm64 will have a custom area for BPF JIT image allocations we should
    get rid of the BPF_JIT_LIMIT_DEFAULT fallback / default entirely. For
    4.21, we have an overridable bpf_jit_alloc_exec(), bpf_jit_free_exec()
    so therefore add another overridable bpf_jit_alloc_exec_limit() helper
    function which returns the possible size of the memory area for deriving
    the default heuristic in bpf_jit_charge_init().
    
    Like bpf_jit_alloc_exec() and bpf_jit_free_exec(), the new
    bpf_jit_alloc_exec_limit() assumes that module_alloc() is the default
    JIT memory provider, and therefore in case archs implement their custom
    module_alloc() we use MODULES_{END,_VADDR} for limits and otherwise for
    vmalloc_exec() cases like on ppc64 we use VMALLOC_{END,_START}.
    
    Additionally, for archs supporting large page sizes, we should change
    the sysctl to be handled as long to not run into sysctl restrictions
    in future.
    
    Fixes: ede95a63b5e8 ("bpf: add bpf_jit_limit knob to restrict unpriv allocations")
    Reported-by: Sandipan Das <sandipan@linux.ibm.com>
    Reported-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6c288f7307e2bdaad54de00c3733b807539c753
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Apr 5 14:59:16 2019 +0100

    net: hns: fix unsigned comparison to less than zero
    
    [ Upstream commit ea401685a20b5d631957f024bda86e1f6118eb20 ]
    
    Currently mskid is unsigned and hence comparisons with negative
    error return values are always false. Fix this by making mskid an
    int.
    
    Fixes: f058e46855dc ("net: hns: fix ICMP6 neighbor solicitation messages discard problem")
    Addresses-Coverity: ("Operands don't affect result")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f24801ef50b05125371c55048695a9430b8f1a2
Author: Guoqing Jiang <gqjiang@suse.com>
Date:   Tue Apr 9 16:16:38 2019 +0800

    sc16is7xx: move label 'err_spi' to correct section
    
    [ Upstream commit e00164a0f000de893944981f41a568c981aca658 ]
    
    err_spi is used when SERIAL_SC16IS7XX_SPI is enabled, so make
    the label only available under SERIAL_SC16IS7XX_SPI option.
    Otherwise, the below warning appears.
    
    drivers/tty/serial/sc16is7xx.c:1523:1: warning: label ‘err_spi’ defined but not used [-Wunused-label]
     err_spi:
      ^~~~~~~
    
    Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
    Fixes: ac0cdb3d9901 ("sc16is7xx: missing unregister/delete driver on error in sc16is7xx_init()")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 318244f3641a1e136595746dce8407d216946674
Author: Guillaume Nault <gnault@redhat.com>
Date:   Sun Jun 2 15:13:47 2019 +0200

    netfilter: ipv6: nf_defrag: fix leakage of unqueued fragments
    
    [ Upstream commit a0d56cb911ca301de81735f1d73c2aab424654ba ]
    
    With commit 997dd9647164 ("net: IP6 defrag: use rbtrees in
    nf_conntrack_reasm.c"), nf_ct_frag6_reasm() is now called from
    nf_ct_frag6_queue(). With this change, nf_ct_frag6_queue() can fail
    after the skb has been added to the fragment queue and
    nf_ct_frag6_gather() was adapted to handle this case.
    
    But nf_ct_frag6_queue() can still fail before the fragment has been
    queued. nf_ct_frag6_gather() can't handle this case anymore, because it
    has no way to know if nf_ct_frag6_queue() queued the fragment before
    failing. If it didn't, the skb is lost as the error code is overwritten
    with -EINPROGRESS.
    
    Fix this by setting -EINPROGRESS directly in nf_ct_frag6_queue(), so
    that nf_ct_frag6_gather() can propagate the error as is.
    
    Fixes: 997dd9647164 ("net: IP6 defrag: use rbtrees in nf_conntrack_reasm.c")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8891c5e2251ebe2084f824f867ea657460b14ab
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri May 3 08:24:44 2019 -0700

    ip6: fix skb leak in ip6frag_expire_frag_queue()
    
    [ Upstream commit 47d3d7fdb10a21c223036b58bd70ffdc24a472c4 ]
    
    Since ip6frag_expire_frag_queue() now pulls the head skb
    from frag queue, we should no longer use skb_get(), since
    this leads to an skb leak.
    
    Stefan Bader initially reported a problem in 4.4.stable [1] caused
    by the skb_get(), so this patch should also fix this issue.
    
    296583.091021] kernel BUG at /build/linux-6VmqmP/linux-4.4.0/net/core/skbuff.c:1207!
    [296583.091734] Call Trace:
    [296583.091749]  [<ffffffff81740e50>] __pskb_pull_tail+0x50/0x350
    [296583.091764]  [<ffffffff8183939a>] _decode_session6+0x26a/0x400
    [296583.091779]  [<ffffffff817ec719>] __xfrm_decode_session+0x39/0x50
    [296583.091795]  [<ffffffff818239d0>] icmpv6_route_lookup+0xf0/0x1c0
    [296583.091809]  [<ffffffff81824421>] icmp6_send+0x5e1/0x940
    [296583.091823]  [<ffffffff81753238>] ? __netif_receive_skb+0x18/0x60
    [296583.091838]  [<ffffffff817532b2>] ? netif_receive_skb_internal+0x32/0xa0
    [296583.091858]  [<ffffffffc0199f74>] ? ixgbe_clean_rx_irq+0x594/0xac0 [ixgbe]
    [296583.091876]  [<ffffffffc04eb260>] ? nf_ct_net_exit+0x50/0x50 [nf_defrag_ipv6]
    [296583.091893]  [<ffffffff8183d431>] icmpv6_send+0x21/0x30
    [296583.091906]  [<ffffffff8182b500>] ip6_expire_frag_queue+0xe0/0x120
    [296583.091921]  [<ffffffffc04eb27f>] nf_ct_frag6_expire+0x1f/0x30 [nf_defrag_ipv6]
    [296583.091938]  [<ffffffff810f3b57>] call_timer_fn+0x37/0x140
    [296583.091951]  [<ffffffffc04eb260>] ? nf_ct_net_exit+0x50/0x50 [nf_defrag_ipv6]
    [296583.091968]  [<ffffffff810f5464>] run_timer_softirq+0x234/0x330
    [296583.091982]  [<ffffffff8108a339>] __do_softirq+0x109/0x2b0
    
    Fixes: d4289fcc9b16 ("net: IP6 defrag: use rbtrees for IPv6 defrag")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Stefan Bader <stefan.bader@canonical.com>
    Cc: Peter Oskolkov <posk@google.com>
    Cc: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 382bc84da904a54ee2842c6babda3efca058b5f3
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 19 20:53:18 2018 -0800

    rds: Fix warning.
    
    [ Upstream commit d84e7bc0595a7e146ad0ddb80b240cea77825245 ]
    
    >> net/rds/send.c:1109:42: warning: Using plain integer as NULL pointer
    
    Fixes: ea010070d0a7 ("net/rds: fix warn in rds_message_alloc_sgs")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e6af1fa80b8a83203da97196ce240cba68235f7
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Apr 13 10:04:49 2019 +0200

    ALSA: hda: Initialize power_state field properly
    
    [ Upstream commit 183ab39eb0ea9879bb68422a83e65f750f3192f0 ]
    
    The recent commit 98081ca62cba ("ALSA: hda - Record the current power
    state before suspend/resume calls") made the HD-audio driver to store
    the PM state in power_state field.  This forgot, however, the
    initialization at power up.  Although the codec drivers usually don't
    need to refer to this field in the normal operation, let's initialize
    it properly for consistency.
    
    Fixes: 98081ca62cba ("ALSA: hda - Record the current power state before suspend/resume calls")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8c88293bf7202892de15ed62f82d6975d4c5ccb
Author: Salil Mehta <salil.mehta@huawei.com>
Date:   Mon Feb 18 17:40:32 2019 +0000

    net: hns: Fixes the missing put_device in positive leg for roce reset
    
    [ Upstream commit 4d96e13ee9cd1f7f801e8c7f4b12f09d1da4a5d8 ]
    
    This patch fixes the missing device reference release-after-use in
    the positive leg of the roce reset API of the HNS DSAF.
    
    Fixes: c969c6e7ab8c ("net: hns: Fix object reference leaks in hns_dsaf_roce_reset()")
    Reported-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bf9677300f38c918fc437906f1ec63fc6068180
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Wed Feb 6 14:52:53 2019 +0300

    x86/boot/compressed/64: Do not corrupt EDX on EFER.LME=1 setting
    
    [ Upstream commit 45b13b424faafb81c8c44541f093a682fdabdefc ]
    
    RDMSR in the trampoline code overwrites EDX but that register is used
    to indicate whether 5-level paging has to be enabled and if clobbered,
    leads to failure to boot on a 5-level paging machine.
    
    Preserve EDX on the stack while we are dealing with EFER.
    
    Fixes: b677dfae5aa1 ("x86/boot/compressed/64: Set EFER.LME=1 in 32-bit trampoline before returning to long mode")
    Reported-by: Kyle D Pelton <kyle.d.pelton@intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: dave.hansen@linux.intel.com
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wei Huang <wei@redhat.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190206115253.1907-1-kirill.shutemov@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b91ec6ae14daab7a8614c96ac821aaf18f953b42
Author: David Ahern <dsahern@gmail.com>
Date:   Mon Apr 29 10:30:09 2019 -0700

    selftests: fib_rule_tests: Fix icmp proto with ipv6
    
    [ Upstream commit 15d55bae4e3c43cd9f87fd93c73a263e172d34e1 ]
    
    A recent commit returns an error if icmp is used as the ip-proto for
    IPv6 fib rules. Update fib_rule_tests to send ipv6-icmp instead of icmp.
    
    Fixes: 5e1a99eae8499 ("ipv4: Add ICMPv6 support when parse route ipproto")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2851c3ee0bec475a4fdf69efc66c964cd875291
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Jan 22 18:10:51 2019 +0800

    scsi: tcmu: fix use after free
    
    [ Upstream commit 40d883b091758472c79b81fa1c0e0347e24a9cff ]
    
    Fixes: a94a2572b977 ("scsi: tcmu: avoid cmd/qfull timers updated whenever a new cmd comes")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04096b3beacee419bc36650c9f3620a20e9dfdfe
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Feb 18 11:29:29 2019 +0100

    mac80211: mesh: fix missing unlock on error in table_path_del()
    
    [ Upstream commit f2ffff085d287eec499f1fccd682796ad8010303 ]
    
    spin_lock_bh() is used in table_path_del() but rcu_read_unlock()
    is used for unlocking. Fix it by using spin_unlock_bh() instead
    of rcu_read_unlock() in the error handling case.
    
    Fixes: b4c3fbe63601 ("mac80211: Use linked list instead of rhashtable walk for mesh tables")
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2379b044d6742febaea581d2ba6c5d44307cc9f
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Jan 1 00:11:30 2019 -0800

    f2fs: don't access node/meta inode mapping after iput
    
    [ Upstream commit 7c77bf7de1574ac7a31a2b76f4927404307d13e7 ]
    
    This fixes wrong access of address spaces of node and meta inodes after iput.
    
    Fixes: 60aa4d5536ab ("f2fs: fix use-after-free issue when accessing sbi->stat_info")
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9fde78c3a4f7f374ffe589771f08e119d0879aa
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Sun Feb 10 14:10:39 2019 +0100

    drm/fb-helper: generic: Don't take module ref for fbcon
    
    [ Upstream commit 6ab20a05f4c7ed45632e24d5397d6284e192567d ]
    
    It's now safe to let fbcon unbind automatically on fbdev unregister.
    The crash problem was fixed in commit 2122b40580dd
    ("fbdev: fbcon: Fix unregister crash when more than one framebuffer")
    
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190210131039.52664-13-noralf@tronnes.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7821bcce20aa07ea7d21339fe1899dd5a026cee4
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Jan 7 07:04:14 2019 -0500

    media: s5p-mfc: fix incorrect bus assignment in virtual child device
    
    [ Upstream commit 1e0d0a5fd38192f23304ea2fc2b531fea7c74247 ]
    
    Virtual MFC codec's child devices must not be assigned to platform bus,
    because they are allocated as raw 'struct device' and don't have the
    corresponding 'platform' part. This fixes NULL pointer access revealed
    recently by commit a66d972465d1 ("devres: Align data[] to
    ARCH_KMALLOC_MINALIGN").
    
    Fixes: c79667dd93b0 ("media: s5p-mfc: replace custom reserved memory handling code with generic one")
    
    Reported-by: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by:  Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ddc2a10070675fc93cf36d0496ba5bf78ef667a
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Thu Apr 11 11:17:34 2019 +0200

    net/smc: move unhash before release of clcsock
    
    [ Upstream commit f61bca58f6c36e666c2b807697f25e5e98708162 ]
    
    Commit <26d92e951fe0>
    ("net/smc: move unhash as early as possible in smc_release()")
    fixes one occurrence in the smc code, but the same pattern exists
    in other places. This patch covers the remaining occurrences and
    makes sure, the unhash operation is done before the smc->clcsock is
    released. This avoids a potential use-after-free in smc_diag_dump().
    
    Reviewed-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd54dc4cd37d0b18280c29f2bf25ba08d6895b3c
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Dec 19 06:08:41 2018 +0000

    mlxsw: spectrum: Handle VLAN device unlinking
    
    [ Upstream commit e149113a74c35f0a28d1bfe17d2505a03563c1d5 ]
    
    In commit 993107fea5ee ("mlxsw: spectrum_switchdev: Fix VLAN device
    deletion via ioctl") I fixed a bug caused by the fact that the driver
    views differently the deletion of a VLAN device when it is deleted via
    an ioctl and netlink.
    
    Instead of relying on a specific order of events (device being
    unregistered vs. VLAN filter being updated), simply make sure that the
    driver performs the necessary cleanup when the VLAN device is unlinked,
    which always happens before the other two events.
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8a296abee3667329a68fa15851c4684c9c92874
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 11:28:23 2019 -0700

    tty: rocket: fix incorrect forward declaration of 'rp_init()'
    
    [ Upstream commit 423ea3255424b954947d167681b71ded1b8fca53 ]
    
    Make the forward declaration actually match the real function
    definition, something that previous versions of gcc had just ignored.
    
    This is another patch to fix new warnings from gcc-9 before I start the
    merge window pulls.  I don't want to miss legitimate new warnings just
    because my system update brought a new compiler with new warnings.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb814f2150136ed5ec2623cca1e4f85349cb0631
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Fri May 17 10:44:25 2019 +0300

    btrfs: Ensure replaced device doesn't have pending chunk allocation
    
    commit debd1c065d2037919a7da67baf55cc683fee09f0 upstream.
    
    Recent FITRIM work, namely bbbf7243d62d ("btrfs: combine device update
    operations during transaction commit") combined the way certain
    operations are recoded in a transaction. As a result an ASSERT was added
    in dev_replace_finish to ensure the new code works correctly.
    Unfortunately I got reports that it's possible to trigger the assert,
    meaning that during a device replace it's possible to have an unfinished
    chunk allocation on the source device.
    
    This is supposed to be prevented by the fact that a transaction is
    committed before finishing the replace oepration and alter acquiring the
    chunk mutex. This is not sufficient since by the time the transaction is
    committed and the chunk mutex acquired it's possible to allocate a chunk
    depending on the workload being executed on the replaced device. This
    bug has been present ever since device replace was introduced but there
    was never code which checks for it.
    
    The correct way to fix is to ensure that there is no pending device
    modification operation when the chunk mutex is acquire and if there is
    repeat transaction commit. Unfortunately it's not possible to just
    exclude the source device from btrfs_fs_devices::dev_alloc_list since
    this causes ENOSPC to be hit in transaction commit.
    
    Fixing that in another way would need to add special cases to handle the
    last writes and forbid new ones. The looped transaction fix is more
    obvious, and can be easily backported. The runtime of dev-replace is
    long so there's no noticeable delay caused by that.
    
    Reported-by: David Sterba <dsterba@suse.com>
    Fixes: 391cd9df81ac ("Btrfs: fix unprotected alloc list insertion during the finishing procedure of replace")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27ce6c2675f6e0b429253b0a629ca743661f8b29
Author: Shakeel Butt <shakeelb@google.com>
Date:   Thu Jul 4 15:14:42 2019 -0700

    mm/vmscan.c: prevent useless kswapd loops
    
    commit dffcac2cb88e4ec5906235d64a83d802580b119e upstream.
    
    In production we have noticed hard lockups on large machines running
    large jobs due to kswaps hoarding lru lock within isolate_lru_pages when
    sc->reclaim_idx is 0 which is a small zone.  The lru was couple hundred
    GiBs and the condition (page_zonenum(page) > sc->reclaim_idx) in
    isolate_lru_pages() was basically skipping GiBs of pages while holding
    the LRU spinlock with interrupt disabled.
    
    On further inspection, it seems like there are two issues:
    
    (1) If kswapd on the return from balance_pgdat() could not sleep (i.e.
        node is still unbalanced), the classzone_idx is unintentionally set
        to 0 and the whole reclaim cycle of kswapd will try to reclaim only
        the lowest and smallest zone while traversing the whole memory.
    
    (2) Fundamentally isolate_lru_pages() is really bad when the
        allocation has woken kswapd for a smaller zone on a very large machine
        running very large jobs.  It can hoard the LRU spinlock while skipping
        over 100s of GiBs of pages.
    
    This patch only fixes (1).  (2) needs a more fundamental solution.  To
    fix (1), in the kswapd context, if pgdat->kswapd_classzone_idx is
    invalid use the classzone_idx of the previous kswapd loop otherwise use
    the one the waker has requested.
    
    Link: http://lkml.kernel.org/r/20190701201847.251028-1-shakeelb@google.com
    Fixes: e716f2eb24de ("mm, vmscan: prevent kswapd sleeping prematurely due to mismatched classzone_idx")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Yang Shi <yang.shi@linux.alibaba.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Roman Gushchin <guro@fb.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c854d9b6ef8d167f7d719ed53cf6ddeda852e84c
Author: Petr Mladek <pmladek@suse.com>
Date:   Thu Jun 27 10:13:34 2019 +0200

    ftrace/x86: Remove possible deadlock between register_kprobe() and ftrace_run_update_code()
    
    commit d5b844a2cf507fc7642c9ae80a9d585db3065c28 upstream.
    
    The commit 9f255b632bf12c4dd7 ("module: Fix livepatch/ftrace module text
    permissions race") causes a possible deadlock between register_kprobe()
    and ftrace_run_update_code() when ftrace is using stop_machine().
    
    The existing dependency chain (in reverse order) is:
    
    -> #1 (text_mutex){+.+.}:
           validate_chain.isra.21+0xb32/0xd70
           __lock_acquire+0x4b8/0x928
           lock_acquire+0x102/0x230
           __mutex_lock+0x88/0x908
           mutex_lock_nested+0x32/0x40
           register_kprobe+0x254/0x658
           init_kprobes+0x11a/0x168
           do_one_initcall+0x70/0x318
           kernel_init_freeable+0x456/0x508
           kernel_init+0x22/0x150
           ret_from_fork+0x30/0x34
           kernel_thread_starter+0x0/0xc
    
    -> #0 (cpu_hotplug_lock.rw_sem){++++}:
           check_prev_add+0x90c/0xde0
           validate_chain.isra.21+0xb32/0xd70
           __lock_acquire+0x4b8/0x928
           lock_acquire+0x102/0x230
           cpus_read_lock+0x62/0xd0
           stop_machine+0x2e/0x60
           arch_ftrace_update_code+0x2e/0x40
           ftrace_run_update_code+0x40/0xa0
           ftrace_startup+0xb2/0x168
           register_ftrace_function+0x64/0x88
           klp_patch_object+0x1a2/0x290
           klp_enable_patch+0x554/0x980
           do_one_initcall+0x70/0x318
           do_init_module+0x6e/0x250
           load_module+0x1782/0x1990
           __s390x_sys_finit_module+0xaa/0xf0
           system_call+0xd8/0x2d0
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(text_mutex);
                                   lock(cpu_hotplug_lock.rw_sem);
                                   lock(text_mutex);
      lock(cpu_hotplug_lock.rw_sem);
    
    It is similar problem that has been solved by the commit 2d1e38f56622b9b
    ("kprobes: Cure hotplug lock ordering issues"). Many locks are involved.
    To be on the safe side, text_mutex must become a low level lock taken
    after cpu_hotplug_lock.rw_sem.
    
    This can't be achieved easily with the current ftrace design.
    For example, arm calls set_all_modules_text_rw() already in
    ftrace_arch_code_modify_prepare(), see arch/arm/kernel/ftrace.c.
    This functions is called:
    
      + outside stop_machine() from ftrace_run_update_code()
      + without stop_machine() from ftrace_module_enable()
    
    Fortunately, the problematic fix is needed only on x86_64. It is
    the only architecture that calls set_all_modules_text_rw()
    in ftrace path and supports livepatching at the same time.
    
    Therefore it is enough to move text_mutex handling from the generic
    kernel/trace/ftrace.c into arch/x86/kernel/ftrace.c:
    
       ftrace_arch_code_modify_prepare()
       ftrace_arch_code_modify_post_process()
    
    This patch basically reverts the ftrace part of the problematic
    commit 9f255b632bf12c4dd7 ("module: Fix livepatch/ftrace module
    text permissions race"). And provides x86_64 specific-fix.
    
    Some refactoring of the ftrace code will be needed when livepatching
    is implemented for arm or nds32. These architectures call
    set_all_modules_text_rw() and use stop_machine() at the same time.
    
    Link: http://lkml.kernel.org/r/20190627081334.12793-1-pmladek@suse.com
    
    Fixes: 9f255b632bf12c4dd7 ("module: Fix livepatch/ftrace module text permissions race")
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: Miroslav Benes <mbenes@suse.cz>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    [
      As reviewed by Miroslav Benes <mbenes@suse.cz>, removed return value of
      ftrace_run_update_code() as it is a void function.
    ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e716c3b562d54b21d40ec297f56dc9100d2954b
Author: Robert Beckett <bob.beckett@collabora.com>
Date:   Tue Jun 25 18:59:15 2019 +0100

    drm/imx: only send event on crtc disable if kept disabled
    
    commit 5aeab2bfc9ffa72d3ca73416635cb3785dfc076f upstream.
    
    The event will be sent as part of the vblank enable during the modeset
    if the crtc is not being kept disabled.
    
    Fixes: 5f2f911578fb ("drm/imx: atomic phase 3 step 1: Use atomic configuration")
    
    Signed-off-by: Robert Beckett <bob.beckett@collabora.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ec242fd431b1b321090a0cbb530dfd700dd2f37
Author: Robert Beckett <bob.beckett@collabora.com>
Date:   Tue Jun 25 18:59:13 2019 +0100

    drm/imx: notify drm core before sending event during crtc disable
    
    commit 78c68e8f5cd24bd32ba4ca1cdfb0c30cf0642685 upstream.
    
    Notify drm core before sending pending events during crtc disable.
    This fixes the first event after disable having an old stale timestamp
    by having drm_crtc_vblank_off update the timestamp to now.
    
    This was seen while debugging weston log message:
    Warning: computed repaint delay is insane: -8212 msec
    
    This occurred due to:
    1. driver starts up
    2. fbcon comes along and restores fbdev, enabling vblank
    3. vblank_disable_fn fires via timer disabling vblank, keeping vblank
    seq number and time set at current value
    (some time later)
    4. weston starts and does a modeset
    5. atomic commit disables crtc while it does the modeset
    6. ipu_crtc_atomic_disable sends vblank with old seq number and time
    
    Fixes: a474478642d5 ("drm/imx: fix crtc vblank state regression")
    
    Signed-off-by: Robert Beckett <bob.beckett@collabora.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2d061351d64fbbf7824086399733a062e171237
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Jun 27 16:42:00 2019 +0200

    drm/etnaviv: add missing failure path to destroy suballoc
    
    commit be132e1375c1fffe48801296279079f8a59a9ed3 upstream.
    
    When something goes wrong in the GPU init after the cmdbuf suballocator
    has been constructed, we fail to destroy it properly. This causes havok
    later when the GPU is unbound due to a module unload or similar.
    
    Fixes: e66774dd6f6a (drm/etnaviv: add cmdbuf suballocator)
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Tested-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec5d99e18d306bed13935b0f0634bd00caa26a42
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jul 1 08:38:12 2019 -0500

    drm/amdgpu/gfx9: use reset default for PA_SC_FIFO_SIZE
    
    commit 25f09f858835b0e9a06213811031190a17d8ab78 upstream.
    
    Recommended by the hw team.
    
    Reviewed-and-Tested-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec6d8c9e6687868dfd58994b2ea1758fe60f2733
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Jun 27 11:01:04 2019 +0800

    drm/amd/powerplay: use hardware fan control if no powerplay fan table
    
    commit f78c581e22d4b33359ac3462e8d0504735df01f4 upstream.
    
    Otherwise, you may get divided-by-zero error or corrput the SMU fan
    control feature.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Tested-by: Slava Abramov <slava.abramov@amd.com>
    Acked-by: Slava Abramov <slava.abramov@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6d56f4f6a491d80169c666b64953d8395b47b4b
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jun 25 19:08:54 2019 +0200

    arm64: kaslr: keep modules inside module region when KASAN is enabled
    
    commit 6f496a555d93db7a11d4860b9220d904822f586a upstream.
    
    When KASLR and KASAN are both enabled, we keep the modules where they
    are, and randomize the placement of the kernel so it is within 2 GB
    of the module region. The reason for this is that putting modules in
    the vmalloc region (like we normally do when KASLR is enabled) is not
    possible in this case, given that the entire vmalloc region is already
    backed by KASAN zero shadow pages, and so allocating dedicated KASAN
    shadow space as required by loaded modules is not possible.
    
    The default module allocation window is set to [_etext - 128MB, _etext]
    in kaslr.c, which is appropriate for KASLR kernels booted without a
    seed or with 'nokaslr' on the command line. However, as it turns out,
    it is not quite correct for the KASAN case, since it still intersects
    the vmalloc region at the top, where attempts to allocate shadow pages
    will collide with the KASAN zero shadow pages, causing a WARN() and all
    kinds of other trouble. So cap the top end to MODULES_END explicitly
    when running with KASAN.
    
    Cc: <stable@vger.kernel.org> # 4.9+
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Tested-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cab3dfa6d74ff16cf8f1e09f7ffbb07f2498fb1
Author: Joshua Scott <joshua.scott@alliedtelesis.co.nz>
Date:   Wed Jun 26 10:11:08 2019 +1200

    ARM: dts: armada-xp-98dx3236: Switch to armada-38x-uart serial node
    
    commit 80031361747aec92163464f2ee08870fec33bcb0 upstream.
    
    Switch to the "marvell,armada-38x-uart" driver variant to empty
    the UART buffer before writing to the UART_LCR register.
    
    Signed-off-by: Joshua Scott <joshua.scott@alliedtelesis.co.nz>
    Tested-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Gregory CLEMENT <gregory.clement@bootlin.com>.
    Cc: stable@vger.kernel.org
    Fixes: 43e28ba87708 ("ARM: dts: Use armada-370-xp as a base for armada-xp-98dx3236")
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8790d7f76be43997e11e3e88857cf841b42b35f
Author: Eiichi Tsukata <devel@etsukata.com>
Date:   Tue Jun 25 10:29:10 2019 +0900

    tracing/snapshot: Resize spare buffer if size changed
    
    commit 46cc0b44428d0f0e81f11ea98217fc0edfbeab07 upstream.
    
    Current snapshot implementation swaps two ring_buffers even though their
    sizes are different from each other, that can cause an inconsistency
    between the contents of buffer_size_kb file and the current buffer size.
    
    For example:
    
      # cat buffer_size_kb
      7 (expanded: 1408)
      # echo 1 > events/enable
      # grep bytes per_cpu/cpu0/stats
      bytes: 1441020
      # echo 1 > snapshot             // current:1408, spare:1408
      # echo 123 > buffer_size_kb     // current:123,  spare:1408
      # echo 1 > snapshot             // current:1408, spare:123
      # grep bytes per_cpu/cpu0/stats
      bytes: 1443700
      # cat buffer_size_kb
      123                             // != current:1408
    
    And also, a similar per-cpu case hits the following WARNING:
    
    Reproducer:
    
      # echo 1 > per_cpu/cpu0/snapshot
      # echo 123 > buffer_size_kb
      # echo 1 > per_cpu/cpu0/snapshot
    
    WARNING:
    
      WARNING: CPU: 0 PID: 1946 at kernel/trace/trace.c:1607 update_max_tr_single.part.0+0x2b8/0x380
      Modules linked in:
      CPU: 0 PID: 1946 Comm: bash Not tainted 5.2.0-rc6 #20
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-2.fc30 04/01/2014
      RIP: 0010:update_max_tr_single.part.0+0x2b8/0x380
      Code: ff e8 dc da f9 ff 0f 0b e9 88 fe ff ff e8 d0 da f9 ff 44 89 ee bf f5 ff ff ff e8 33 dc f9 ff 41 83 fd f5 74 96 e8 b8 da f9 ff <0f> 0b eb 8d e8 af da f9 ff 0f 0b e9 bf fd ff ff e8 a3 da f9 ff 48
      RSP: 0018:ffff888063e4fca0 EFLAGS: 00010093
      RAX: ffff888066214380 RBX: ffffffff99850fe0 RCX: ffffffff964298a8
      RDX: 0000000000000000 RSI: 00000000fffffff5 RDI: 0000000000000005
      RBP: 1ffff1100c7c9f96 R08: ffff888066214380 R09: ffffed100c7c9f9b
      R10: ffffed100c7c9f9a R11: 0000000000000003 R12: 0000000000000000
      R13: 00000000ffffffea R14: ffff888066214380 R15: ffffffff99851060
      FS:  00007f9f8173c700(0000) GS:ffff88806d000000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000714dc0 CR3: 0000000066fa6000 CR4: 00000000000006f0
      Call Trace:
       ? trace_array_printk_buf+0x140/0x140
       ? __mutex_lock_slowpath+0x10/0x10
       tracing_snapshot_write+0x4c8/0x7f0
       ? trace_printk_init_buffers+0x60/0x60
       ? selinux_file_permission+0x3b/0x540
       ? tracer_preempt_off+0x38/0x506
       ? trace_printk_init_buffers+0x60/0x60
       __vfs_write+0x81/0x100
       vfs_write+0x1e1/0x560
       ksys_write+0x126/0x250
       ? __ia32_sys_read+0xb0/0xb0
       ? do_syscall_64+0x1f/0x390
       do_syscall_64+0xc1/0x390
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    This patch adds resize_buffer_duplicate_size() to check if there is a
    difference between current/spare buffer sizes and resize a spare buffer
    if necessary.
    
    Link: http://lkml.kernel.org/r/20190625012910.13109-1-devel@etsukata.com
    
    Cc: stable@vger.kernel.org
    Fixes: ad909e21bbe69 ("tracing: Add internal tracing_snapshot() functions")
    Signed-off-by: Eiichi Tsukata <devel@etsukata.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 052b318100856aa86f4e0c03cfe43a1bb6bfb487
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jul 4 15:14:39 2019 -0700

    fs/userfaultfd.c: disable irqs for fault_pending and event locks
    
    commit cbcfa130a911c613a1d9d921af2eea171c414172 upstream.
    
    When IOCB_CMD_POLL is used on a userfaultfd, aio_poll() disables IRQs
    and takes kioctx::ctx_lock, then userfaultfd_ctx::fd_wqh.lock.
    
    This may have to wait for userfaultfd_ctx::fd_wqh.lock to be released by
    userfaultfd_ctx_read(), which in turn can be waiting for
    userfaultfd_ctx::fault_pending_wqh.lock or
    userfaultfd_ctx::event_wqh.lock.
    
    But elsewhere the fault_pending_wqh and event_wqh locks are taken with
    IRQs enabled.  Since the IRQ handler may take kioctx::ctx_lock, lockdep
    reports that a deadlock is possible.
    
    Fix it by always disabling IRQs when taking the fault_pending_wqh and
    event_wqh locks.
    
    Commit ae62c16e105a ("userfaultfd: disable irqs when taking the
    waitqueue lock") didn't fix this because it only accounted for the
    fd_wqh lock, not the other locks nested inside it.
    
    Link: http://lkml.kernel.org/r/20190627075004.21259-1-ebiggers@kernel.org
    Fixes: bfe4037e722e ("aio: implement IOCB_CMD_POLL")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reported-by: syzbot+fab6de82892b6b9c6191@syzkaller.appspotmail.com
    Reported-by: syzbot+53c0b767f7ca0dc0c451@syzkaller.appspotmail.com
    Reported-by: syzbot+a3accb352f9c22041cfa@syzkaller.appspotmail.com
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>    [4.19+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea38007107d656e40173da3fed59287ac2a7e11b
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Jun 24 18:32:26 2019 +0800

    lib/mpi: Fix karactx leak in mpi_powm
    
    commit c8ea9fce2baf7b643384f36f29e4194fa40d33a6 upstream.
    
    Sometimes mpi_powm will leak karactx because a memory allocation
    failure causes a bail-out that skips the freeing of karactx.  This
    patch moves the freeing of karactx to the end of the function like
    everything else so that it can't be skipped.
    
    Reported-by: syzbot+f7baccc38dcc1e094e77@syzkaller.appspotmail.com
    Fixes: cdec9cb5167a ("crypto: GnuPG based MPI lib - source files...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Reviewed-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7df1e2f59bde0a58f383ecee62683d417f6df119
Author: Dennis Wassenberg <dennis.wassenberg@secunet.com>
Date:   Fri Jun 28 10:54:53 2019 +0200

    ALSA: hda/realtek - Change front mic location for Lenovo M710q
    
    commit bef33e19203dde434bcdf21c449e3fb4f06c2618 upstream.
    
    On M710q Lenovo ThinkCentre machine, there are two front mics,
    we change the location for one of them to avoid conflicts.
    
    Signed-off-by: Dennis Wassenberg <dennis.wassenberg@secunet.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 899377c50e603c3be243c0349b447159c3ed556d
Author: Richard Sailer <rs@tuxedocomputers.com>
Date:   Wed Jun 19 13:33:11 2019 +0200

    ALSA: hda/realtek: Add quirks for several Clevo notebook barebones
    
    commit 503d90b30602a3295978e46d844ccc8167400fe6 upstream.
    
    This adds 4 SND_PCI_QUIRK(...) lines for several barebone models of the ODM
    Clevo. The model names are written in regex syntax to describe/match all clevo
    models that are similar enough and use the same PCI SSID that this fixup works
    for them.
    
    Additionally the lines regarding SSID 0x96e1 and 0x97e1 didn't fix audio for the
    all our Clevo notebooks using these SSIDs (models Clevo P960* and P970*) since
    ALC1220_FIXP_CLEVO_PB51ED_PINS swapped pins that are not necesarry to be
    swapped. This patch initiates ALC1220_FIXUP_CLEVO_P950 instead for these model
    and fixes the audio.
    
    Fixes: 80690a276f44 ("ALSA: hda/realtek - Add quirk for Tuxedo XC 1509")
    Signed-off-by: Richard Sailer <rs@tuxedocomputers.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9b6936b134eb95c75274906ad0c1bd78712471d
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jun 27 17:43:08 2019 +0100

    ALSA: usb-audio: fix sign unintended sign extension on left shifts
    
    commit 2acf5a3e6e9371e63c9e4ff54d84d08f630467a0 upstream.
    
    There are a couple of left shifts of unsigned 8 bit values that
    first get promoted to signed ints and hence get sign extended
    on the shift if the top bit of the 8 bit values are set. Fix
    this by casting the 8 bit values to unsigned ints to stop the
    unintentional sign extension.
    
    Addresses-Coverity: ("Unintended sign extension")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f52af5e9baa9c478edcecdd4058eeef2835b1c3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jul 2 20:07:21 2019 +0200

    ALSA: line6: Fix write on zero-sized buffer
    
    commit 3450121997ce872eb7f1248417225827ea249710 upstream.
    
    LINE6 drivers allocate the buffers based on the value returned from
    usb_maxpacket() calls.  The manipulated device may return zero for
    this, and this results in the kmalloc() with zero size (and it may
    succeed) while the other part of the driver code writes the packet
    data with the fixed size -- which eventually overwrites.
    
    This patch adds a simple sanity check for the invalid buffer size for
    avoiding that problem.
    
    Reported-by: syzbot+219f00fb49874dcaea17@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3663bf2baa97c15ede268c095b4b65f2323adf6e
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Jul 1 23:43:53 2019 +0900

    ALSA: firewire-lib/fireworks: fix miss detection of received MIDI messages
    
    commit 7fbd1753b64eafe21cf842348a40a691d0dee440 upstream.
    
    In IEC 61883-6, 8 MIDI data streams are multiplexed into single
    MIDI conformant data channel. The index of stream is calculated by
    modulo 8 of the value of data block counter.
    
    In fireworks, the value of data block counter in CIP header has a quirk
    with firmware version v5.0.0, v5.7.3 and v5.8.0. This brings ALSA
    IEC 61883-1/6 packet streaming engine to miss detection of MIDI
    messages.
    
    This commit fixes the miss detection to modify the value of data block
    counter for the modulo calculation.
    
    For maintainers, this bug exists since a commit 18f5ed365d3f ("ALSA:
    fireworks/firewire-lib: add support for recent firmware quirk") in Linux
    kernel v4.2. There're many changes since the commit.  This fix can be
    backported to Linux kernel v4.4 or later. I tagged a base commit to the
    backport for your convenience.
    
    Besides, my work for Linux kernel v5.3 brings heavy code refactoring and
    some structure members are renamed in 'sound/firewire/amdtp-stream.h'.
    The content of this patch brings conflict when merging -rc tree with
    this patch and the latest tree. I request maintainers to solve the
    conflict to replace 'tx_first_dbc' with 'ctx_data.tx.first_dbc'.
    
    Fixes: df075feefbd3 ("ALSA: firewire-lib: complete AM824 data block processing layer")
    Cc: <stable@vger.kernel.org> # v4.4+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d2ac58c1ef9976fc9af307ea5e03cff97826882
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Jun 28 10:54:29 2019 +0100

    ALSA: seq: fix incorrect order of dest_client/dest_ports arguments
    
    commit c3ea60c231446663afd6ea1054da6b7f830855ca upstream.
    
    There are two occurrances of a call to snd_seq_oss_fill_addr where
    the dest_client and dest_port arguments are in the wrong order. Fix
    this by swapping them around.
    
    Addresses-Coverity: ("Arguments in wrong order")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae3fa28f09380836e336c236851ff7375c3af590
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Tue Jul 2 09:53:25 2019 +0200

    crypto: cryptd - Fix skcipher instance memory leak
    
    commit 1a0fad630e0b7cff38e7691b28b0517cfbb0633f upstream.
    
    cryptd_skcipher_free() fails to free the struct skcipher_instance
    allocated in cryptd_create_skcipher(), leading to a memory leak.  This
    is detected by kmemleak on bootup on ARM64 platforms:
    
     unreferenced object 0xffff80003377b180 (size 1024):
       comm "cryptomgr_probe", pid 822, jiffies 4294894830 (age 52.760s)
       backtrace:
         kmem_cache_alloc_trace+0x270/0x2d0
         cryptd_create+0x990/0x124c
         cryptomgr_probe+0x5c/0x1e8
         kthread+0x258/0x318
         ret_from_fork+0x10/0x1c
    
    Fixes: 4e0958d19bd8 ("crypto: cryptd - Add support for skcipher")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 015c20532ace63c6b2d27326430f2fd177306003
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Jul 2 14:17:00 2019 -0700

    crypto: user - prevent operating on larval algorithms
    
    commit 21d4120ec6f5b5992b01b96ac484701163917b63 upstream.
    
    Michal Suchanek reported [1] that running the pcrypt_aead01 test from
    LTP [2] in a loop and holding Ctrl-C causes a NULL dereference of
    alg->cra_users.next in crypto_remove_spawns(), via crypto_del_alg().
    The test repeatedly uses CRYPTO_MSG_NEWALG and CRYPTO_MSG_DELALG.
    
    The crash occurs when the instance that CRYPTO_MSG_DELALG is trying to
    unregister isn't a real registered algorithm, but rather is a "test
    larval", which is a special "algorithm" added to the algorithms list
    while the real algorithm is still being tested.  Larvals don't have
    initialized cra_users, so that causes the crash.  Normally pcrypt_aead01
    doesn't trigger this because CRYPTO_MSG_NEWALG waits for the algorithm
    to be tested; however, CRYPTO_MSG_NEWALG returns early when interrupted.
    
    Everything else in the "crypto user configuration" API has this same bug
    too, i.e. it inappropriately allows operating on larval algorithms
    (though it doesn't look like the other cases can cause a crash).
    
    Fix this by making crypto_alg_match() exclude larval algorithms.
    
    [1] https://lkml.kernel.org/r/20190625071624.27039-1-msuchanek@suse.de
    [2] https://github.com/linux-test-project/ltp/blob/20190517/testcases/kernel/crypto/pcrypt_aead01.c
    
    Reported-by: Michal Suchanek <msuchanek@suse.de>
    Fixes: a38f7907b926 ("crypto: Add userspace configuration API")
    Cc: <stable@vger.kernel.org> # v3.2+
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54435b7fff7bfb9515cc457b71c3734c1c3fff76
Author: Jann Horn <jannh@google.com>
Date:   Thu Jul 4 17:32:23 2019 +0200

    ptrace: Fix ->ptracer_cred handling for PTRACE_TRACEME
    
    commit 6994eefb0053799d2e07cd140df6c2ea106c41ee upstream.
    
    Fix two issues:
    
    When called for PTRACE_TRACEME, ptrace_link() would obtain an RCU
    reference to the parent's objective credentials, then give that pointer
    to get_cred().  However, the object lifetime rules for things like
    struct cred do not permit unconditionally turning an RCU reference into
    a stable reference.
    
    PTRACE_TRACEME records the parent's credentials as if the parent was
    acting as the subject, but that's not the case.  If a malicious
    unprivileged child uses PTRACE_TRACEME and the parent is privileged, and
    at a later point, the parent process becomes attacker-controlled
    (because it drops privileges and calls execve()), the attacker ends up
    with control over two processes with a privileged ptrace relationship,
    which can be abused to ptrace a suid binary and obtain root privileges.
    
    Fix both of these by always recording the credentials of the process
    that is requesting the creation of the ptrace relationship:
    current_cred() can't change under us, and current is the proper subject
    for access control.
    
    This change is theoretically userspace-visible, but I am not aware of
    any code that it will actually break.
    
    Fixes: 64b875f7ac8a ("ptrace: Capture the ptracer's creds not PT_PTRACE_CAP")
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 600d3712ae122be3ceab0d7ac8246caa3d87dcea
Author: Lucas De Marchi <lucas.demarchi@intel.com>
Date:   Tue Jul 2 12:23:04 2019 -0700

    drm/i915/dmc: protect against reading random memory
    
    commit bc7b488b1d1c71dc4c5182206911127bc6c410d6 upstream.
    
    While loading the DMC firmware we were double checking the headers made
    sense, but in no place we checked that we were actually reading memory
    we were supposed to. This could be wrong in case the firmware file is
    truncated or malformed.
    
    Before this patch:
            # ls -l /lib/firmware/i915/icl_dmc_ver1_07.bin
            -rw-r--r-- 1 root root  25716 Feb  1 12:26 icl_dmc_ver1_07.bin
            # truncate -s 25700 /lib/firmware/i915/icl_dmc_ver1_07.bin
            # modprobe i915
            # dmesg| grep -i dmc
            [drm:intel_csr_ucode_init [i915]] Loading i915/icl_dmc_ver1_07.bin
            [drm] Finished loading DMC firmware i915/icl_dmc_ver1_07.bin (v1.7)
    
    i.e. it loads random data. Now it fails like below:
            [drm:intel_csr_ucode_init [i915]] Loading i915/icl_dmc_ver1_07.bin
            [drm:csr_load_work_fn [i915]] *ERROR* Truncated DMC firmware, rejecting.
            i915 0000:00:02.0: Failed to load DMC firmware i915/icl_dmc_ver1_07.bin. Disabling runtime power management.
            i915 0000:00:02.0: DMC firmware homepage: https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915
    
    Before reading any part of the firmware file, validate the input first.
    
    Fixes: eb805623d8b1 ("drm/i915/skl: Add support to load SKL CSR firmware.")
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190605235535.17791-1-lucas.demarchi@intel.com
    (cherry picked from commit bc7b488b1d1c71dc4c5182206911127bc6c410d6)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    [ Lucas: backported to 4.9+ adjusting the context ]
    Cc: stable@vger.kernel.org # v4.9+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b39351e38444f2be792ad6bbd25e7859e3e7e07
Author: Wei Li <liwei391@huawei.com>
Date:   Thu Jun 6 11:17:54 2019 +0800

    ftrace: Fix NULL pointer dereference in free_ftrace_func_mapper()
    
    [ Upstream commit 04e03d9a616c19a47178eaca835358610e63a1dd ]
    
    The mapper may be NULL when called from register_ftrace_function_probe()
    with probe->data == NULL.
    
    This issue can be reproduced as follow (it may be covered by compiler
    optimization sometime):
    
    / # cat /sys/kernel/debug/tracing/set_ftrace_filter
    #### all functions enabled ####
    / # echo foo_bar:dump > /sys/kernel/debug/tracing/set_ftrace_filter
    [  206.949100] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    [  206.952402] Mem abort info:
    [  206.952819]   ESR = 0x96000006
    [  206.955326]   Exception class = DABT (current EL), IL = 32 bits
    [  206.955844]   SET = 0, FnV = 0
    [  206.956272]   EA = 0, S1PTW = 0
    [  206.956652] Data abort info:
    [  206.957320]   ISV = 0, ISS = 0x00000006
    [  206.959271]   CM = 0, WnR = 0
    [  206.959938] user pgtable: 4k pages, 48-bit VAs, pgdp=0000000419f3a000
    [  206.960483] [0000000000000000] pgd=0000000411a87003, pud=0000000411a83003, pmd=0000000000000000
    [  206.964953] Internal error: Oops: 96000006 [#1] SMP
    [  206.971122] Dumping ftrace buffer:
    [  206.973677]    (ftrace buffer empty)
    [  206.975258] Modules linked in:
    [  206.976631] Process sh (pid: 281, stack limit = 0x(____ptrval____))
    [  206.978449] CPU: 10 PID: 281 Comm: sh Not tainted 5.2.0-rc1+ #17
    [  206.978955] Hardware name: linux,dummy-virt (DT)
    [  206.979883] pstate: 60000005 (nZCv daif -PAN -UAO)
    [  206.980499] pc : free_ftrace_func_mapper+0x2c/0x118
    [  206.980874] lr : ftrace_count_free+0x68/0x80
    [  206.982539] sp : ffff0000182f3ab0
    [  206.983102] x29: ffff0000182f3ab0 x28: ffff8003d0ec1700
    [  206.983632] x27: ffff000013054b40 x26: 0000000000000001
    [  206.984000] x25: ffff00001385f000 x24: 0000000000000000
    [  206.984394] x23: ffff000013453000 x22: ffff000013054000
    [  206.984775] x21: 0000000000000000 x20: ffff00001385fe28
    [  206.986575] x19: ffff000013872c30 x18: 0000000000000000
    [  206.987111] x17: 0000000000000000 x16: 0000000000000000
    [  206.987491] x15: ffffffffffffffb0 x14: 0000000000000000
    [  206.987850] x13: 000000000017430e x12: 0000000000000580
    [  206.988251] x11: 0000000000000000 x10: cccccccccccccccc
    [  206.988740] x9 : 0000000000000000 x8 : ffff000013917550
    [  206.990198] x7 : ffff000012fac2e8 x6 : ffff000012fac000
    [  206.991008] x5 : ffff0000103da588 x4 : 0000000000000001
    [  206.991395] x3 : 0000000000000001 x2 : ffff000013872a28
    [  206.991771] x1 : 0000000000000000 x0 : 0000000000000000
    [  206.992557] Call trace:
    [  206.993101]  free_ftrace_func_mapper+0x2c/0x118
    [  206.994827]  ftrace_count_free+0x68/0x80
    [  206.995238]  release_probe+0xfc/0x1d0
    [  206.995555]  register_ftrace_function_probe+0x4a8/0x868
    [  206.995923]  ftrace_trace_probe_callback.isra.4+0xb8/0x180
    [  206.996330]  ftrace_dump_callback+0x50/0x70
    [  206.996663]  ftrace_regex_write.isra.29+0x290/0x3a8
    [  206.997157]  ftrace_filter_write+0x44/0x60
    [  206.998971]  __vfs_write+0x64/0xf0
    [  206.999285]  vfs_write+0x14c/0x2f0
    [  206.999591]  ksys_write+0xbc/0x1b0
    [  206.999888]  __arm64_sys_write+0x3c/0x58
    [  207.000246]  el0_svc_common.constprop.0+0x408/0x5f0
    [  207.000607]  el0_svc_handler+0x144/0x1c8
    [  207.000916]  el0_svc+0x8/0xc
    [  207.003699] Code: aa0003f8 a9025bf5 aa0103f5 f946ea80 (f9400303)
    [  207.008388] ---[ end trace 7b6d11b5f542bdf1 ]---
    [  207.010126] Kernel panic - not syncing: Fatal exception
    [  207.011322] SMP: stopping secondary CPUs
    [  207.013956] Dumping ftrace buffer:
    [  207.014595]    (ftrace buffer empty)
    [  207.015632] Kernel Offset: disabled
    [  207.017187] CPU features: 0x002,20006008
    [  207.017985] Memory Limit: none
    [  207.019825] ---[ end Kernel panic - not syncing: Fatal exception ]---
    
    Link: http://lkml.kernel.org/r/20190606031754.10798-1-liwei391@huawei.com
    
    Signed-off-by: Wei Li <liwei391@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 938044171949245a1c3a4db48334fde70422d30e
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jun 13 20:07:22 2019 -0500

    module: Fix livepatch/ftrace module text permissions race
    
    [ Upstream commit 9f255b632bf12c4dd7fc31caee89aa991ef75176 ]
    
    It's possible for livepatch and ftrace to be toggling a module's text
    permissions at the same time, resulting in the following panic:
    
      BUG: unable to handle page fault for address: ffffffffc005b1d9
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0003) - permissions violation
      PGD 3ea0c067 P4D 3ea0c067 PUD 3ea0e067 PMD 3cc13067 PTE 3b8a1061
      Oops: 0003 [#1] PREEMPT SMP PTI
      CPU: 1 PID: 453 Comm: insmod Tainted: G           O  K   5.2.0-rc1-a188339ca5 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-20181126_142135-anatol 04/01/2014
      RIP: 0010:apply_relocate_add+0xbe/0x14c
      Code: fa 0b 74 21 48 83 fa 18 74 38 48 83 fa 0a 75 40 eb 08 48 83 38 00 74 33 eb 53 83 38 00 75 4e 89 08 89 c8 eb 0a 83 38 00 75 43 <89> 08 48 63 c1 48 39 c8 74 2e eb 48 83 38 00 75 32 48 29 c1 89 08
      RSP: 0018:ffffb223c00dbb10 EFLAGS: 00010246
      RAX: ffffffffc005b1d9 RBX: 0000000000000000 RCX: ffffffff8b200060
      RDX: 000000000000000b RSI: 0000004b0000000b RDI: ffff96bdfcd33000
      RBP: ffffb223c00dbb38 R08: ffffffffc005d040 R09: ffffffffc005c1f0
      R10: ffff96bdfcd33c40 R11: ffff96bdfcd33b80 R12: 0000000000000018
      R13: ffffffffc005c1f0 R14: ffffffffc005e708 R15: ffffffff8b2fbc74
      FS:  00007f5f447beba8(0000) GS:ffff96bdff900000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffffffffc005b1d9 CR3: 000000003cedc002 CR4: 0000000000360ea0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       klp_init_object_loaded+0x10f/0x219
       ? preempt_latency_start+0x21/0x57
       klp_enable_patch+0x662/0x809
       ? virt_to_head_page+0x3a/0x3c
       ? kfree+0x8c/0x126
       patch_init+0x2ed/0x1000 [livepatch_test02]
       ? 0xffffffffc0060000
       do_one_initcall+0x9f/0x1c5
       ? kmem_cache_alloc_trace+0xc4/0xd4
       ? do_init_module+0x27/0x210
       do_init_module+0x5f/0x210
       load_module+0x1c41/0x2290
       ? fsnotify_path+0x3b/0x42
       ? strstarts+0x2b/0x2b
       ? kernel_read+0x58/0x65
       __do_sys_finit_module+0x9f/0xc3
       ? __do_sys_finit_module+0x9f/0xc3
       __x64_sys_finit_module+0x1a/0x1c
       do_syscall_64+0x52/0x61
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The above panic occurs when loading two modules at the same time with
    ftrace enabled, where at least one of the modules is a livepatch module:
    
    CPU0                                    CPU1
    klp_enable_patch()
      klp_init_object_loaded()
        module_disable_ro()
                                            ftrace_module_enable()
                                              ftrace_arch_code_modify_post_process()
                                                set_all_modules_text_ro()
          klp_write_object_relocations()
            apply_relocate_add()
              *patches read-only code* - BOOM
    
    A similar race exists when toggling ftrace while loading a livepatch
    module.
    
    Fix it by ensuring that the livepatch and ftrace code patching
    operations -- and their respective permissions changes -- are protected
    by the text_mutex.
    
    Link: http://lkml.kernel.org/r/ab43d56ab909469ac5d2520c5d944ad6d4abd476.1560474114.git.jpoimboe@redhat.com
    
    Reported-by: Johannes Erdfelt <johannes@erdfelt.com>
    Fixes: 444d13ff10fb ("modules: add ro_after_init support")
    Acked-by: Jessica Yu <jeyu@kernel.org>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 220adcc0e0ca7bd07022077909775fc53f9dc225
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Jun 5 13:11:58 2019 +0200

    tracing: avoid build warning with HAVE_NOP_MCOUNT
    
    [ Upstream commit cbdaeaf050b730ea02e9ab4ff844ce54d85dbe1d ]
    
    Selecting HAVE_NOP_MCOUNT enables -mnop-mcount (if gcc supports it)
    and sets CC_USING_NOP_MCOUNT. Reuse __is_defined (which is suitable for
    testing CC_USING_* defines) to avoid conditional compilation and fix
    the following gcc 9 warning on s390:
    
    kernel/trace/ftrace.c:2514:1: warning: ‘ftrace_code_disable’ defined
    but not used [-Wunused-function]
    
    Link: http://lkml.kernel.org/r/patch.git-1a82d13f33ac.your-ad-here.call-01559732716-ext-6629@work.hours
    
    Fixes: 2f4df0017baed ("tracing: Add -mcount-nop option support")
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79fccb9815db7f8132c26cf9c9fd336b81470f5d
Author: swkhack <swkhack@gmail.com>
Date:   Thu Jun 13 15:56:08 2019 -0700

    mm/mlock.c: change count_mm_mlocked_page_nr return type
    
    [ Upstream commit 0874bb49bb21bf24deda853e8bf61b8325e24bcb ]
    
    On a 64-bit machine the value of "vma->vm_end - vma->vm_start" may be
    negative when using 32 bit ints and the "count >> PAGE_SHIFT"'s result
    will be wrong.  So change the local variable and return value to
    unsigned long to fix the problem.
    
    Link: http://lkml.kernel.org/r/20190513023701.83056-1-swkhack@gmail.com
    Fixes: 0cf2f6f6dc60 ("mm: mlock: check against vma for actual mlock() size")
    Signed-off-by: swkhack <swkhack@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fce0a79e98516de8f9e85d47d442efb0494df43
Author: Manuel Traut <manut@linutronix.de>
Date:   Thu Jun 13 15:55:52 2019 -0700

    scripts/decode_stacktrace.sh: prefix addr2line with $CROSS_COMPILE
    
    [ Upstream commit c04e32e911653442fc834be6e92e072aeebe01a1 ]
    
    At least for ARM64 kernels compiled with the crosstoolchain from
    Debian/stretch or with the toolchain from kernel.org the line number is
    not decoded correctly by 'decode_stacktrace.sh':
    
      $ echo "[  136.513051]  f1+0x0/0xc [kcrash]" | \
        CROSS_COMPILE=/opt/gcc-8.1.0-nolibc/aarch64-linux/bin/aarch64-linux- \
       ./scripts/decode_stacktrace.sh /scratch/linux-arm64/vmlinux \
                                      /scratch/linux-arm64 \
                                      /nfs/debian/lib/modules/4.20.0-devel
      [  136.513051] f1 (/linux/drivers/staging/kcrash/kcrash.c:68) kcrash
    
    If addr2line from the toolchain is used the decoded line number is correct:
    
      [  136.513051] f1 (/linux/drivers/staging/kcrash/kcrash.c:57) kcrash
    
    Link: http://lkml.kernel.org/r/20190527083425.3763-1-manut@linutronix.de
    Signed-off-by: Manuel Traut <manut@linutronix.de>
    Acked-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7747ecb82be082af3900cc785a8825e3d2da38f
Author: Joel Savitz <jsavitz@redhat.com>
Date:   Wed Jun 12 11:50:48 2019 -0400

    cpuset: restore sanity to cpuset_cpus_allowed_fallback()
    
    [ Upstream commit d477f8c202d1f0d4791ab1263ca7657bbe5cf79e ]
    
    In the case that a process is constrained by taskset(1) (i.e.
    sched_setaffinity(2)) to a subset of available cpus, and all of those are
    subsequently offlined, the scheduler will set tsk->cpus_allowed to
    the current value of task_cs(tsk)->effective_cpus.
    
    This is done via a call to do_set_cpus_allowed() in the context of
    cpuset_cpus_allowed_fallback() made by the scheduler when this case is
    detected. This is the only call made to cpuset_cpus_allowed_fallback()
    in the latest mainline kernel.
    
    However, this is not sane behavior.
    
    I will demonstrate this on a system running the latest upstream kernel
    with the following initial configuration:
    
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   ffffffff,fffffff
            Cpus_allowed_list:      0-63
    
    (Where cpus 32-63 are provided via smt.)
    
    If we limit our current shell process to cpu2 only and then offline it
    and reonline it:
    
            # taskset -p 4 $$
            pid 2272's current affinity mask: ffffffffffffffff
            pid 2272's new affinity mask: 4
    
            # echo off > /sys/devices/system/cpu/cpu2/online
            # dmesg | tail -3
            [ 2195.866089] process 2272 (bash) no longer affine to cpu2
            [ 2195.872700] IRQ 114: no longer affine to CPU2
            [ 2195.879128] smpboot: CPU 2 is now offline
    
            # echo on > /sys/devices/system/cpu/cpu2/online
            # dmesg | tail -1
            [ 2617.043572] smpboot: Booting Node 0 Processor 2 APIC 0x4
    
    We see that our current process now has an affinity mask containing
    every cpu available on the system _except_ the one we originally
    constrained it to:
    
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   ffffffff,fffffffb
            Cpus_allowed_list:      0-1,3-63
    
    This is not sane behavior, as the scheduler can now not only place the
    process on previously forbidden cpus, it can't even schedule it on
    the cpu it was originally constrained to!
    
    Other cases result in even more exotic affinity masks. Take for instance
    a process with an affinity mask containing only cpus provided by smt at
    the moment that smt is toggled, in a configuration such as the following:
    
            # taskset -p f000000000 $$
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   000000f0,00000000
            Cpus_allowed_list:      36-39
    
    A double toggle of smt results in the following behavior:
    
            # echo off > /sys/devices/system/cpu/smt/control
            # echo on > /sys/devices/system/cpu/smt/control
            # grep -i cpus /proc/$$/status
            Cpus_allowed:   ffffff00,ffffffff
            Cpus_allowed_list:      0-31,40-63
    
    This is even less sane than the previous case, as the new affinity mask
    excludes all smt-provided cpus with ids less than those that were
    previously in the affinity mask, as well as those that were actually in
    the mask.
    
    With this patch applied, both of these cases end in the following state:
    
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   ffffffff,ffffffff
            Cpus_allowed_list:      0-63
    
    The original policy is discarded. Though not ideal, it is the simplest way
    to restore sanity to this fallback case without reinventing the cpuset
    wheel that rolls down the kernel just fine in cgroup v2. A user who wishes
    for the previous affinity mask to be restored in this fallback case can use
    that mechanism instead.
    
    This patch modifies scheduler behavior by instead resetting the mask to
    task_cs(tsk)->cpus_allowed by default, and cpu_possible mask in legacy
    mode. I tested the cases above on both modes.
    
    Note that the scheduler uses this fallback mechanism if and only if
    _every_ other valid avenue has been traveled, and it is the last resort
    before calling BUG().
    
    Suggested-by: Waiman Long <longman@redhat.com>
    Suggested-by: Phil Auld <pauld@redhat.com>
    Signed-off-by: Joel Savitz <jsavitz@redhat.com>
    Acked-by: Phil Auld <pauld@redhat.com>
    Acked-by: Waiman Long <longman@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e33aeb9a7c0ad7117e272b282beae2a7f6d7c278
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 30 22:24:24 2019 +0200

    i2c: pca-platform: Fix GPIO lookup code
    
    [ Upstream commit a0cac264a86fbf4d6cb201fbbb73c1d335e3248a ]
    
    The devm_gpiod_request_gpiod() call will add "-gpios" to
    any passed connection ID before looking it up.
    
    I do not think the reset GPIO on this platform is named
    "reset-gpios-gpios" but rather "reset-gpios" in the device
    tree, so fix this up so that we get a proper reset GPIO
    handle.
    
    Also drop the inclusion of the legacy GPIO header.
    
    Fixes: 0e8ce93bdceb ("i2c: pca-platform: add devicetree awareness")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cf431edfb718cc555ac4af29e731df4e4120efa
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Thu May 23 16:41:52 2019 +0000

    platform/mellanox: mlxreg-hotplug: Add devm_free_irq call to remove flow
    
    [ Upstream commit 8c2eb7b6468ad4aa5600aed01aa0715f921a3f8b ]
    
    Add devm_free_irq() call to mlxreg-hotplug remove() for clean release
    of devices irq resource. Fix debugobjects warning triggered by rmmod
    It prevents of use-after-free memory, related to
    mlxreg_hotplug_work_handler.
    
    Issue has been reported as debugobjects warning triggered by
    'rmmod mlxtreg-hotplug' flow, while running kernel with
    CONFIG_DEBUG_OBJECTS* options.
    
    [ 2489.623551] ODEBUG: free active (active state 0) object type: work_struct hint: mlxreg_hotplug_work_handler+0x0/0x7f0 [mlxreg_hotplug]
    [ 2489.637097] WARNING: CPU: 5 PID: 3924 at lib/debugobjects.c:328 debug_print_object+0xfe/0x180
    [ 2489.637165] RIP: 0010:debug_print_object+0xfe/0x180
    ?
    [ 2489.637214] Call Trace:
    [ 2489.637225]  __debug_check_no_obj_freed+0x25e/0x320
    [ 2489.637231]  kfree+0x82/0x110
    [ 2489.637238]  release_nodes+0x33c/0x4e0
    [ 2489.637242]  ? devres_remove_group+0x1b0/0x1b0
    [ 2489.637247]  device_release_driver_internal+0x146/0x270
    [ 2489.637251]  driver_detach+0x73/0xe0
    [ 2489.637254]  bus_remove_driver+0xa1/0x170
    [ 2489.637261]  __x64_sys_delete_module+0x29e/0x320
    [ 2489.637265]  ? __ia32_sys_delete_module+0x320/0x320
    [ 2489.637268]  ? blkcg_exit_queue+0x20/0x20
    [ 2489.637273]  ? task_work_run+0x7d/0x100
    [ 2489.637278]  ? exit_to_usermode_loop+0x5b/0xf0
    [ 2489.637281]  do_syscall_64+0x73/0x160
    [ 2489.637287]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 2489.637290] RIP: 0033:0x7f95c3596fd7
    
    The difference in release flow with and with no devm_free_irq is listed
    below:
    
    bus: 'platform': remove driver mlxreg-hotplug
     mlxreg_hotplug_remove(start)
                                            -> devm_free_irq (with new code)
     mlxreg_hotplug_remove (end)
     release_nodes (start)
      mlxreg-hotplug: DEVRES REL devm_hwmon_release (8 bytes)
      device: 'hwmon3': device_unregister
      PM: Removing info for No Bus:hwmon3
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (88 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (6 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_irq_release (16 bytes) (no new code)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (1376 bytes)
       ------------[ cut here ]------------ (no new code):
       ODEBUG: free active (active state 0) object type: work_struct hint: mlxreg_hotplug_work_handler
    
     release_nodes(end)
    driver: 'mlxreg-hotplug': driver_release
    
    Fixes: 1f976f6978bf ("platform/x86: Move Mellanox platform hotplug driver to platform/mellanox")
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c241f3fbfa1af86f572a92f2e4d708358e163806
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Wed Jun 5 07:51:03 2019 +0000

    platform/x86: mlx-platform: Fix parent device in i2c-mux-reg device registration
    
    [ Upstream commit 160da20b254dd4bfc5828f12c208fa831ad4be6c ]
    
    Fix the issue found while running kernel with the option
    CONFIG_DEBUG_TEST_DRIVER_REMOVE.
    Driver 'mlx-platform' registers 'i2c_mlxcpld' device and then registers
    few underlying 'i2c-mux-reg' devices:
            priv->pdev_i2c = platform_device_register_simple("i2c_mlxcpld", nr,
                                                             NULL, 0);
            ...
            for (i = 0; i < ARRAY_SIZE(mlxplat_mux_data); i++) {
                    priv->pdev_mux[i] = platform_device_register_resndata(
                                                    &mlxplat_dev->dev,
                                                    "i2c-mux-reg", i, NULL,
                                                    0, &mlxplat_mux_data[i],
                                                    sizeof(mlxplat_mux_data[i]));
    
    But actual parent of "i2c-mux-reg" device is priv->pdev_i2c->dev and
    not mlxplat_dev->dev.
    Patch fixes parent device parameter in a call to
    platform_device_register_resndata() for "i2c-mux-reg".
    
    It solves the race during initialization flow while 'i2c_mlxcpld.1' is
    removing after probe, while 'i2c-mux-reg.0' is still in probing flow:
    'i2c_mlxcpld.1' flow:   probe -> remove -> probe.
    'i2c-mux-reg.0' flow:             probe -> ...
    
    [   12:621096] Registering platform device 'i2c_mlxcpld.1'. Parent at platform
    [   12:621117] device: 'i2c_mlxcpld.1': device_add
    [   12:621155] bus: 'platform': add device i2c_mlxcpld.1
    [   12:621384] Registering platform device 'i2c-mux-reg.0'. Parent at mlxplat
    [   12:621395] device: 'i2c-mux-reg.0': device_add
    [   12:621425] bus: 'platform': add device i2c-mux-reg.0
    [   12:621806] Registering platform device 'i2c-mux-reg.1'. Parent at mlxplat
    [   12:621828] device: 'i2c-mux-reg.1': device_add
    [   12:621892] bus: 'platform': add device i2c-mux-reg.1
    [   12:621906] bus: 'platform': add driver i2c_mlxcpld
    [   12:621996] bus: 'platform': driver_probe_device: matched device i2c_mlxcpld.1 with driver i2c_mlxcpld
    [   12:622003] bus: 'platform': really_probe: probing driver i2c_mlxcpld with device i2c_mlxcpld.1
    [   12:622100] i2c_mlxcpld i2c_mlxcpld.1: no default pinctrl state
    [   12:622293] device: 'i2c-1': device_add
    [   12:627280] bus: 'i2c': add device i2c-1
    [   12:627692] device: 'i2c-1': device_add
    [   12.629639] bus: 'platform': add driver i2c-mux-reg
    [   12.629718] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.0 with driver i2c-mux-reg
    [   12.629723] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.0
    [   12.629818] i2c-mux-reg i2c-mux-reg.0: no default pinctrl state
    [   12.629981] platform i2c-mux-reg.0: Driver i2c-mux-reg requests probe deferral
    [   12.629986] platform i2c-mux-reg.0: Added to deferred list
    [   12.629992] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.1 with driver i2c-mux-reg
    [   12.629997] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.1
    [   12.630091] i2c-mux-reg i2c-mux-reg.1: no default pinctrl state
    [   12.630247] platform i2c-mux-reg.1: Driver i2c-mux-reg requests probe deferral
    [   12.630252] platform i2c-mux-reg.1: Added to deferred list
    [   12.640892] devices_kset: Moving i2c-mux-reg.0 to end of list
    [   12.640900] platform i2c-mux-reg.0: Retrying from deferred list
    [   12.640911] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.0 with driver i2c-mux-reg
    [   12.640919] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.0
    [   12.640999] i2c-mux-reg i2c-mux-reg.0: no default pinctrl state
    [   12.641177] platform i2c-mux-reg.0: Driver i2c-mux-reg requests probe deferral
    [   12.641187] platform i2c-mux-reg.0: Added to deferred list
    [   12.641198] devices_kset: Moving i2c-mux-reg.1 to end of list
    [   12.641219] platform i2c-mux-reg.1: Retrying from deferred list
    [   12.641237] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.1 with driver i2c-mux-reg
    [   12.641247] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.1
    [   12.641331] i2c-mux-reg i2c-mux-reg.1: no default pinctrl state
    [   12.641465] platform i2c-mux-reg.1: Driver i2c-mux-reg requests probe deferral
    [   12.641469] platform i2c-mux-reg.1: Added to deferred list
    [   12.646427] device: 'i2c-1': device_add
    [   12.646647] bus: 'i2c': add device i2c-1
    [   12.647104] device: 'i2c-1': device_add
    [   12.669231] devices_kset: Moving i2c-mux-reg.0 to end of list
    [   12.669240] platform i2c-mux-reg.0: Retrying from deferred list
    [   12.669258] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.0 with driver i2c-mux-reg
    [   12.669263] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.0
    [   12.669343] i2c-mux-reg i2c-mux-reg.0: no default pinctrl state
    [   12.669585] device: 'i2c-2': device_add
    [   12.669795] bus: 'i2c': add device i2c-2
    [   12.670201] device: 'i2c-2': device_add
    [   12.671427] i2c i2c-1: Added multiplexed i2c bus 2
    [   12.671514] device: 'i2c-3': device_add
    [   12.671724] bus: 'i2c': add device i2c-3
    [   12.672136] device: 'i2c-3': device_add
    [   12.673378] i2c i2c-1: Added multiplexed i2c bus 3
    [   12.673472] device: 'i2c-4': device_add
    [   12.673676] bus: 'i2c': add device i2c-4
    [   12.674060] device: 'i2c-4': device_add
    [   12.675861] i2c i2c-1: Added multiplexed i2c bus 4
    [   12.675941] device: 'i2c-5': device_add
    [   12.676150] bus: 'i2c': add device i2c-5
    [   12.676550] device: 'i2c-5': device_add
    [   12.678103] i2c i2c-1: Added multiplexed i2c bus 5
    [   12.678193] device: 'i2c-6': device_add
    [   12.678395] bus: 'i2c': add device i2c-6
    [   12.678774] device: 'i2c-6': device_add
    [   12.679969] i2c i2c-1: Added multiplexed i2c bus 6
    [   12.680065] device: 'i2c-7': device_add
    [   12.680275] bus: 'i2c': add device i2c-7
    [   12.680913] device: 'i2c-7': device_add
    [   12.682506] i2c i2c-1: Added multiplexed i2c bus 7
    [   12.682600] device: 'i2c-8': device_add
    [   12.682808] bus: 'i2c': add device i2c-8
    [   12.683189] device: 'i2c-8': device_add
    [   12.683907] device: 'i2c-1': device_unregister
    [   12.683945] device: 'i2c-1': device_unregister
    [   12.684387] device: 'i2c-1': device_create_release
    [   12.684536] bus: 'i2c': remove device i2c-1
    [   12.686019] i2c i2c-8: Failed to create compatibility class link
    [   12.686086] ------------[ cut here ]------------
    [   12.686087] can't create symlink to mux device
    [   12.686224] Workqueue: events deferred_probe_work_func
    [   12.686135] WARNING: CPU: 7 PID: 436 at drivers/i2c/i2c-mux.c:416 i2c_mux_add_adapter+0x729/0x7d0 [i2c_mux]
    [   12.686232] RIP: 0010:i2c_mux_add_adapter+0x729/0x7d0 [i2c_mux]
    [   0x190/0x190 [i2c_mux]
    [   12.686300]  ? i2c_mux_alloc+0xac/0x110 [i2c_mux]
    [   12.686306]  ? i2c_mux_reg_set+0x200/0x200 [i2c_mux_reg]
    [   12.686313]  i2c_mux_reg_probe+0x22c/0x731 [i2c_mux_reg]
    [   12.686322]  ? i2c_mux_reg_deselect+0x60/0x60 [i2c_mux_reg]
    [   12.686346]  platform_drv_probe+0xa8/0x110
    [   12.686351]  really_probe+0x185/0x720
    [   12.686358]  driver_probe_device+0xdf/0x1f0
    ...
    [   12.686522] i2c i2c-1: Added multiplexed i2c bus 8
    [   12.686621] device: 'i2c-9': device_add
    [   12.686626] kobject_add_internal failed for i2c-9 (error: -2 parent: i2c-1)
    [   12.694729] i2c-core: adapter 'i2c-1-mux (chan_id 8)': can't register device (-2)
    [   12.705726] i2c i2c-1: failed to add mux-adapter 8 as bus 9 (error=-2)
    [   12.714494] device: 'i2c-8': device_unregister
    [   12.714537] device: 'i2c-8': device_unregister
    
    Fixes: 6613d18e9038 ("platform/x86: mlx-platform: Move module from arch/x86")
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f853112772b043c0e0ad10fc1734c770943b7a21
Author: Mathew King <mathewk@chromium.org>
Date:   Mon May 20 16:41:24 2019 -0600

    platform/x86: intel-vbtn: Report switch events when event wakes device
    
    [ Upstream commit cb1921b17adbe6509538098ac431033378cd7165 ]
    
    When a switch event, such as tablet mode/laptop mode or docked/undocked,
    wakes a device make sure that the value of the swich is reported.
    Without when a device is put in tablet mode from laptop mode when it is
    suspended or vice versa the device will wake up but mode will be
    incorrect.
    
    Tested by suspending a device in laptop mode and putting it in tablet
    mode, the device resumes and is in tablet mode. When suspending the
    device in tablet mode and putting it in laptop mode the device resumes
    and is in laptop mode.
    
    Signed-off-by: Mathew King <mathewk@chromium.org>
    Reviewed-by: Jett Rink <jettrink@chromium.org>
    Reviewed-by: Mario Limonciello <mario.limonciello@dell.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ac96173bee0ad549e9543e922a0737a077187fa
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 12 09:02:02 2019 +0200

    platform/x86: asus-wmi: Only Tell EC the OS will handle display hotkeys from asus_nb_wmi
    
    [ Upstream commit 401fee8195d401b2b94dee57383f627050724d5b ]
    
    Commit 78f3ac76d9e5 ("platform/x86: asus-wmi: Tell the EC the OS will
    handle the display off hotkey") causes the backlight to be permanently off
    on various EeePC laptop models using the eeepc-wmi driver (Asus EeePC
    1015BX, Asus EeePC 1025C).
    
    The asus_wmi_set_devstate(ASUS_WMI_DEVID_BACKLIGHT, 2, NULL) call added
    by that commit is made conditional in this commit and only enabled in
    the quirk_entry structs in the asus-nb-wmi driver fixing the broken
    display / backlight on various EeePC laptop models.
    
    Cc: João Paulo Rechi Vita <jprvita@endlessm.com>
    Fixes: 78f3ac76d9e5 ("platform/x86: asus-wmi: Tell the EC the OS will handle the display off hotkey")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 027e043f9c78c06d3c3e0fa657a831d7f3d82e9c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri May 24 14:57:59 2019 +0200

    drm: panel-orientation-quirks: Add quirk for GPD MicroPC
    
    [ Upstream commit 652b8b086538c8a10de5aa5cbdaef79333b46358 ]
    
    GPD has done it again, make a nice device (good), use way too generic
    DMI strings (bad) and use a portrait screen rotated 90 degrees (ugly).
    
    Because of the too generic DMI strings this entry is also doing bios-date
    matching, so the gpd_micropc data struct may very well need to be updated
    with some extra bios-dates in the future.
    
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190524125759.14131-2-hdegoede@redhat.com
    (cherry picked from commit f2f2bb60d998abde10de7e483ef9e17639892450)
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2446563dd6d7cbd850d26943e30aeedd3501a54c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri May 24 14:57:58 2019 +0200

    drm: panel-orientation-quirks: Add quirk for GPD pocket2
    
    [ Upstream commit 15abc7110a77555d3bf72aaef46d1557db0a4ac5 ]
    
    GPD has done it again, make a nice device (good), use way too generic
    DMI strings (bad) and use a portrait screen rotated 90 degrees (ugly).
    
    Because of the too generic DMI strings this entry is also doing bios-date
    matching, so the gpd_pocket2 data struct may very well need to be updated
    with some extra bios-dates in the future.
    
    Changes in v2:
    -Add one more known BIOS date to the list of BIOS dates
    
    Cc: Jurgen Kramer <gtmkramer@xs4all.nl>
    Reported-by: Jurgen Kramer <gtmkramer@xs4all.nl>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190524125759.14131-1-hdegoede@redhat.com
    (cherry picked from commit 6dab9102dd7b144e5723915438e0d6c473018cd0)
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8be5629b9622eaa98a75f1763aa348f8eb37f504
Author: Don Brace <don.brace@microsemi.com>
Date:   Mon Jun 3 16:43:29 2019 -0500

    scsi: hpsa: correct ioaccel2 chaining
    
    [ Upstream commit 625d7d3518875c4d303c652a198feaa13d9f52d9 ]
    
    - set ioaccel2_sg_element member 'chain_indicator' to IOACCEL2_LAST_SG for
      the last s/g element.
    
    - set ioaccel2_sg_element member 'chain_indicator' to IOACCEL2_CHAIN when
      chaining.
    
    Reviewed-by: Bader Ali - Saleh <bader.alisaleh@microsemi.com>
    Reviewed-by: Scott Teel <scott.teel@microsemi.com>
    Reviewed-by: Matt Perricone <matt.perricone@microsemi.com>
    Signed-off-by: Don Brace <don.brace@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1bef204c70af27c3bfedb3111a304a4f97a31a5
Author: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Date:   Wed Jun 5 15:45:52 2019 +0200

    SoC: rt274: Fix internal jack assignment in set_jack callback
    
    [ Upstream commit 04268bf2757a125616b6c2140e6250f43b7b737a ]
    
    When we call snd_soc_component_set_jack(component, NULL, NULL) we should
    set rt274->jack to passed jack, so when interrupt is triggered it calls
    snd_soc_jack_report(rt274->jack, ...) with proper value.
    
    This fixes problem in machine where in register, we call
    snd_soc_register(component, &headset, NULL), which just calls
    rt274_mic_detect via callback.
    Now when machine driver is removed "headset" will be gone, so we
    need to tell codec driver that it's gone with:
    snd_soc_register(component, NULL, NULL), but we also need to be able
    to handle NULL jack argument here gracefully.
    If we don't set it to NULL, next time the rt274_irq runs it will call
    snd_soc_jack_report with first argument being invalid pointer and there
    will be Oops.
    
    Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1023af0c069d2af061d8e3992deef48126b7e84b
Author: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Date:   Wed May 22 11:21:41 2019 -0500

    ALSA: hdac: fix memory release for SST and SOF drivers
    
    [ Upstream commit 6d647b736a6b1cbf2f8deab0e6a94c34a6ea9d60 ]
    
    During the integration of HDaudio support, we changed the way in which
    we get hdev in snd_hdac_ext_bus_device_init() to use one preallocated
    with devm_kzalloc(), however it still left kfree(hdev) in
    snd_hdac_ext_bus_device_exit(). It leads to oopses when trying to
    rmmod and modprobe. Fix it, by just removing kfree call.
    
    SOF also uses some of the snd_hdac_ functions for HDAudio support but
    allocated the memory with kzalloc. A matching fix is provided
    separately to align all users of the snd_hdac_ library.
    
    Fixes: 6298542fa33b ("ALSA: hdac: remove memory allocation from snd_hdac_ext_bus_device_init")
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26a6acde2a42d8e0f23dffb172b4c1cbc9d14f9e
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed May 22 14:07:36 2019 +0200

    usb: gadget: udc: lpc32xx: allocate descriptor with GFP_ATOMIC
    
    [ Upstream commit fbc318afadd6e7ae2252d6158cf7d0c5a2132f7d ]
    
    Gadget drivers may queue request in interrupt context. This would lead to
    a descriptor allocation in that context. In that case we would hit
    BUG_ON(in_interrupt()) in __get_vm_area_node.
    
    Also remove the unnecessary cast.
    
    Acked-by: Sylvain Lemieux <slemieux.tyco@gmail.com>
    Tested-by: James Grant <jamesg@zaltys.org>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9be058f5dd70360d6840c8dbbaff3e7dc9d972f5
Author: Young Xiao <92siuyang@gmail.com>
Date:   Tue May 28 20:17:54 2019 +0800

    usb: gadget: fusb300_udc: Fix memory leak of fusb300->ep[i]
    
    [ Upstream commit 62fd0e0a24abeebe2c19fce49dd5716d9b62042d ]
    
    There is no deallocation of fusb300->ep[i] elements, allocated at
    fusb300_probe.
    
    The patch adds deallocation of fusb300->ep array elements.
    
    Signed-off-by: Young Xiao <92siuyang@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5284327f4e177f22c96e3204344a545cb856b956
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Jun 3 06:41:20 2019 -0700

    x86/CPU: Add more Icelake model numbers
    
    [ Upstream commit e35faeb64146f2015f2aec14b358ae508e4066db ]
    
    Add the CPUID model numbers of Icelake (ICL) desktop and server
    processors to the Intel family list.
    
     [ Qiuxu: Sort the macros by model number. ]
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Cc: Rajneesh Bhardwaj <rajneesh.bhardwaj@linux.intel.com>
    Cc: rui.zhang@intel.com
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190603134122.13853-1-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74929087384fef3bf67dad97b990b1a877c304a2
Author: Marcus Cooper <codekipper@gmail.com>
Date:   Mon Jun 3 19:47:28 2019 +0200

    ASoC: sun4i-i2s: Add offset to RX channel select
    
    [ Upstream commit f9927000cb35f250051f0f1878db12ee2626eea1 ]
    
    Whilst testing the capture functionality of the i2s on the newer
    SoCs it was noticed that the recording was somewhat distorted.
    This was due to the offset not being set correctly on the receiver
    side.
    
    Signed-off-by: Marcus Cooper <codekipper@gmail.com>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32475634e8a8e3bd6385602dfffd6de79ab5c123
Author: Marcus Cooper <codekipper@gmail.com>
Date:   Mon Jun 3 19:47:27 2019 +0200

    ASoC: sun4i-i2s: Fix sun8i tx channel offset mask
    
    [ Upstream commit 7e46169a5f35762f335898a75d1b8a242f2ae0f5 ]
    
    Although not causing any noticeable issues, the mask for the
    channel offset is covering too many bits.
    
    Signed-off-by: Marcus Cooper <codekipper@gmail.com>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b7486398a327297f6804d13614ef863d0bc2ca2
Author: Yu-Hsuan Hsu <yuhsuan@chromium.org>
Date:   Tue Jun 4 18:49:09 2019 +0800

    ASoC: max98090: remove 24-bit format support if RJ is 0
    
    [ Upstream commit 5628c8979642a076f91ee86c3bae5ad251639af0 ]
    
    The supported formats are S16_LE and S24_LE now. However, by datasheet
    of max98090, S24_LE is only supported when it is in the right justified
    mode. We should remove 24-bit format if it is not in that mode to avoid
    triggering error.
    
    Signed-off-by: Yu-Hsuan Hsu <yuhsuan@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b60f98ef4962d5a0d94848a790fb4483d1bd4bb
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Thu May 30 17:18:47 2019 +0800

    drm/mediatek: call mtk_dsi_stop() after mtk_drm_crtc_atomic_disable()
    
    [ Upstream commit 2458d9d6d94be982b917e93c61a89b4426f32e31 ]
    
    mtk_dsi_stop() should be called after mtk_drm_crtc_atomic_disable(), which
    needs ovl irq for drm_crtc_wait_one_vblank(), since after mtk_dsi_stop() is
    called, ovl irq will be disabled. If drm_crtc_wait_one_vblank() is called
    after last irq, it will timeout with this message: "vblank wait timed out
    on crtc 0". This happens sometimes when turning off the screen.
    
    In drm_atomic_helper.c#disable_outputs(),
    the calling sequence when turning off the screen is:
    
    1. mtk_dsi_encoder_disable()
         --> mtk_output_dsi_disable()
           --> mtk_dsi_stop();  /* sometimes make vblank timeout in
                                   atomic_disable */
           --> mtk_dsi_poweroff();
    2. mtk_drm_crtc_atomic_disable()
         --> drm_crtc_wait_one_vblank();
         ...
           --> mtk_dsi_ddp_stop()
             --> mtk_dsi_poweroff();
    
    mtk_dsi_poweroff() has reference count design, change to make
    mtk_dsi_stop() called in mtk_dsi_poweroff() when refcount is 0.
    
    Fixes: 0707632b5bac ("drm/mediatek: update DSI sub driver flow for sending commands to panel")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34e5e1c4874fdf8f1ac9280c8dd0e92e10b337be
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:55 2019 +0800

    drm/mediatek: clear num_pipes when unbind driver
    
    [ Upstream commit a4cd1d2b016d5d043ab2c4b9c4ec50a5805f5396 ]
    
    num_pipes is used for mutex created in mtk_drm_crtc_create(). If we
    don't clear num_pipes count, when rebinding driver, the count will
    be accumulated. From mtk_disp_mutex_get(), there can only be at most
    10 mutex id. Clear this number so it starts from 0 in every rebind.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8a86e9a5533af185bbadcc965d207613e642ba9
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:54 2019 +0800

    drm/mediatek: call drm_atomic_helper_shutdown() when unbinding driver
    
    [ Upstream commit cf49b24ffa62766f8f04cd1c4cf17b75d29b240a ]
    
    shutdown all CRTC when unbinding drm driver.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79e095d234bbec5725e4b3c940781b405286d081
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:53 2019 +0800

    drm/mediatek: unbind components in mtk_drm_unbind()
    
    [ Upstream commit f0fd848342802bc0f74620d387eead53e8905804 ]
    
    Unbinding components (i.e. mtk_dsi and mtk_disp_ovl/rdma/color) will
    trigger master(mtk_drm)'s .unbind(), and currently mtk_drm's unbind
    won't actually unbind components. During the next bind,
    mtk_drm_kms_init() is called, and the components are added back.
    
    .unbind() should call mtk_drm_kms_deinit() to unbind components.
    
    And since component_master_del() in .remove() will trigger .unbind(),
    which will also unregister device, it's fine to remove original functions
    called here.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 319f4699bcaa8b496ba547f1695f76b2618917e8
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:52 2019 +0800

    drm/mediatek: fix unbind functions
    
    [ Upstream commit 8fd7a37b191f93737f6280a9b5de65f98acc12c9 ]
    
    detatch panel in mtk_dsi_destroy_conn_enc(), since .bind will try to
    attach it again.
    
    Fixes: 2e54c14e310f ("drm/mediatek: Add DSI sub driver")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbd94f4938c657a99cff2e269b59b992320b4d2b
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu May 16 15:56:56 2019 +0800

    spi: bitbang: Fix NULL pointer dereference in spi_unregister_master
    
    [ Upstream commit 5caaf29af5ca82d5da8bc1d0ad07d9e664ccf1d8 ]
    
    If spi_register_master fails in spi_bitbang_start
    because device_add failure, We should return the
    error code other than 0, otherwise calling
    spi_bitbang_stop may trigger NULL pointer dereference
    like this:
    
    BUG: KASAN: null-ptr-deref in __list_del_entry_valid+0x45/0xd0
    Read of size 8 at addr 0000000000000000 by task syz-executor.0/3661
    
    CPU: 0 PID: 3661 Comm: syz-executor.0 Not tainted 5.1.0+ #28
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0xa9/0x10e
     ? __list_del_entry_valid+0x45/0xd0
     ? __list_del_entry_valid+0x45/0xd0
     __kasan_report+0x171/0x18d
     ? __list_del_entry_valid+0x45/0xd0
     kasan_report+0xe/0x20
     __list_del_entry_valid+0x45/0xd0
     spi_unregister_controller+0x99/0x1b0
     spi_lm70llp_attach+0x3ae/0x4b0 [spi_lm70llp]
     ? 0xffffffffc1128000
     ? klist_next+0x131/0x1e0
     ? driver_detach+0x40/0x40 [parport]
     port_check+0x3b/0x50 [parport]
     bus_for_each_dev+0x115/0x180
     ? subsys_dev_iter_exit+0x20/0x20
     __parport_register_driver+0x1f0/0x210 [parport]
     ? 0xffffffffc1150000
     do_one_initcall+0xb9/0x3b5
     ? perf_trace_initcall_level+0x270/0x270
     ? kasan_unpoison_shadow+0x30/0x40
     ? kasan_unpoison_shadow+0x30/0x40
     do_init_module+0xe0/0x330
     load_module+0x38eb/0x4270
     ? module_frob_arch_sections+0x20/0x20
     ? kernel_read_file+0x188/0x3f0
     ? find_held_lock+0x6d/0xd0
     ? fput_many+0x1a/0xe0
     ? __do_sys_finit_module+0x162/0x190
     __do_sys_finit_module+0x162/0x190
     ? __ia32_sys_init_module+0x40/0x40
     ? __mutex_unlock_slowpath+0xb4/0x3f0
     ? wait_for_completion+0x240/0x240
     ? vfs_write+0x160/0x2a0
     ? lockdep_hardirqs_off+0xb5/0x100
     ? mark_held_locks+0x1a/0x90
     ? do_syscall_64+0x14/0x2a0
     do_syscall_64+0x72/0x2a0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 702a4879ec33 ("spi: bitbang: Let spi_bitbang_start() take a reference to master")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Axel Lin <axel.lin@ingics.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f8d3c9506a5d56aef128300b262900c7e48cdb3
Author: Viorel Suman <viorel.suman@nxp.com>
Date:   Mon May 13 10:02:42 2019 +0000

    ASoC: ak4458: rstn_control - return a non-zero on error only
    
    [ Upstream commit 176a11834b65ec35e3b7a953f87fb9cc41309497 ]
    
    snd_soc_component_update_bits() may return 1 if operation
    was successful and the value of the register changed.
    Return a non-zero in ak4458_rstn_control for an error only.
    
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Signed-off-by: Viorel Suman <viorel.suman@nxp.com>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c3dd68c48e83aca55dc72a33260a71608510160
Author: Libin Yang <libin.yang@intel.com>
Date:   Wed May 8 10:32:41 2019 +0800

    ASoC: soc-pcm: BE dai needs prepare when pause release after resume
    
    [ Upstream commit 5087a8f17df868601cd7568299e91c28086d2b45 ]
    
    If playback/capture is paused and system enters S3, after system returns
    from suspend, BE dai needs to call prepare() callback when playback/capture
    is released from pause if RESUME_INFO flag is not set.
    
    Currently, the dpcm_be_dai_prepare() function will block calling prepare()
    if the pcm is in SND_SOC_DPCM_STATE_PAUSED state. This will cause the
    following test case fail if the pcm uses BE:
    
    playback -> pause -> S3 suspend -> S3 resume -> pause release
    
    The playback may exit abnormally when pause is released because the BE dai
    prepare() is not called.
    
    This patch allows dpcm_be_dai_prepare() to call dai prepare() callback in
    SND_SOC_DPCM_STATE_PAUSED state.
    
    Signed-off-by: Libin Yang <libin.yang@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c31b4b4ba65aad5726428a553b555e164b981ec
Author: Viorel Suman <viorel.suman@nxp.com>
Date:   Thu May 9 13:30:36 2019 +0000

    ASoC: ak4458: add return value for ak4458_probe
    
    [ Upstream commit a8dee20d792432740509237943700fbcfc230bad ]
    
    AK4458 is probed successfully even if AK4458 is not present - this
    is caused by probe function returning no error on i2c access failure.
    Return an error on probe if i2c access has failed.
    
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Signed-off-by: Viorel Suman <viorel.suman@nxp.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c19bcdb0db99be0aeef0c9055d00485fc467ca3
Author: Matt Flax <flatmax@flatmax.org>
Date:   Wed May 8 16:33:13 2019 +1000

    ASoC : cs4265 : readable register too low
    
    [ Upstream commit f3df05c805983427319eddc2411a2105ee1757cf ]
    
    The cs4265_readable_register function stopped short of the maximum
    register.
    
    An example bug is taken from :
    https://github.com/Audio-Injector/Ultra/issues/25
    
    Where alsactl store fails with :
    Cannot read control '2,0,0,C Data Buffer,0': Input/output error
    
    This patch fixes the bug by setting the cs4265 to have readable
    registers up to the maximum hardware register CS4265_MAX_REGISTER.
    
    Signed-off-by: Matt Flax <flatmax@flatmax.org>
    Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c549680ed59b4f829c1c84a56fcca8a2f7e460d2
Author: Florian Westphal <fw@strlen.de>
Date:   Tue May 21 13:24:33 2019 +0200

    netfilter: nft_flow_offload: IPCB is only valid for ipv4 family
    
    commit 69aeb538587e087bfc81dd1f465eab3558ff3158 upstream.
    
    Guard this with a check vs. ipv4, IPCB isn't valid in ipv6 case.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 041c181e6ba0f6d30c29ac5c6a4ec5ad52cc2fca
Author: Florian Westphal <fw@strlen.de>
Date:   Tue May 21 13:24:32 2019 +0200

    netfilter: nft_flow_offload: don't offload when sequence numbers need adjustment
    
    commit 91a9048f238063dde7feea752b9dd386f7e3808b upstream.
    
    We can't deal with tcp sequence number rewrite in flow_offload.
    While at it, simplify helper check, we only need to know if the extension
    is present, we don't need the helper data.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48f611ecea0e67ba2065074e2c0f20bfcb860f85
Author: Florian Westphal <fw@strlen.de>
Date:   Tue May 21 13:24:31 2019 +0200

    netfilter: nft_flow_offload: set liberal tracking mode for tcp
    
    commit 8437a6209f76f85a2db1abb12a9bde2170801617 upstream.
    
    Without it, whenever a packet has to be pushed up the stack (e.g. because
    of mtu mismatch), then conntrack will flag packets as invalid, which in
    turn breaks NAT.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b2734bc839d188e44934f5f2f4fe9a487bdaa47
Author: Florian Westphal <fw@strlen.de>
Date:   Tue May 21 13:24:30 2019 +0200

    netfilter: nf_flow_table: ignore DF bit setting
    
    commit e75b3e1c9bc5b997d09bdf8eb72ab3dd3c1a7072 upstream.
    
    Its irrelevant if the DF bit is set or not, we must pass packet to
    stack in either case.
    
    If the DF bit is set, we must pass it to stack so the appropriate
    ICMP error can be generated.
    
    If the DF is not set, we must pass it to stack for fragmentation.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 869eec894663f6ef48859e4f86bd7e62daf2345a
Author: Guilherme G. Piccoli <gpiccoli@canonical.com>
Date:   Fri Jun 28 19:17:59 2019 -0300

    md/raid0: Do not bypass blocking queue entered for raid0 bios
    
    -----------------------------------------------------------------
    This patch is not on mainline and is meant to 4.19 stable *only*.
    After the patch description there's a reasoning about that.
    -----------------------------------------------------------------
    
    Commit cd4a4ae4683d ("block: don't use blocking queue entered for
    recursive bio submits") introduced the flag BIO_QUEUE_ENTERED in order
    split bios bypass the blocking queue entering routine and use the live
    non-blocking version. It was a result of an extensive discussion in
    a linux-block thread[0], and the purpose of this change was to prevent
    a hung task waiting on a reference to drop.
    
    Happens that md raid0 split bios all the time, and more important,
    it changes their underlying device to the raid member. After the change
    introduced by this flag's usage, we experience various crashes if a raid0
    member is removed during a large write. This happens because the bio
    reaches the live queue entering function when the queue of the raid0
    member is dying.
    
    A simple reproducer of this behavior is presented below:
    a) Build kernel v4.19.56-stable with CONFIG_BLK_DEV_THROTTLING=y.
    
    b) Create a raid0 md array with 2 NVMe devices as members, and mount
    it with an ext4 filesystem.
    
    c) Run the following oneliner (supposing the raid0 is mounted in /mnt):
    (dd of=/mnt/tmp if=/dev/zero bs=1M count=999 &); sleep 0.3;
    echo 1 > /sys/block/nvme1n1/device/device/remove
    (whereas nvme1n1 is the 2nd array member)
    
    This will trigger the following warning/oops:
    
    ------------[ cut here ]------------
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000155
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    RIP: 0010:blk_throtl_bio+0x45/0x970
    [...]
    Call Trace:
     generic_make_request_checks+0x1bf/0x690
     generic_make_request+0x64/0x3f0
     raid0_make_request+0x184/0x620 [raid0]
     ? raid0_make_request+0x184/0x620 [raid0]
     md_handle_request+0x126/0x1a0
     md_make_request+0x7b/0x180
     generic_make_request+0x19e/0x3f0
     submit_bio+0x73/0x140
    [...]
    
    This patch changes raid0 driver to fallback to the "old" blocking queue
    entering procedure, by clearing the BIO_QUEUE_ENTERED from raid0 bios.
    This prevents the crashes and restores the regular behavior of raid0
    arrays when a member is removed during a large write.
    
    [0] lore.kernel.org/linux-block/343bbbf6-64eb-879e-d19e-96aebb037d47@I-love.SAKURA.ne.jp
    
    ----------------------------
    Why this is not on mainline?
    ----------------------------
    
    The patch was originally submitted upstream in linux-raid and
    linux-block mailing-lists - it was initially accepted by Song Liu,
    but Christoph Hellwig[1] observed that there was a clean-up series
    ready to be accepted from Ming Lei[2] that fixed the same issue.
    
    The accepted patches from Ming's series in upstream are: commit
    47cdee29ef9d ("block: move blk_exit_queue into __blk_release_queue") and
    commit fe2008640ae3 ("block: don't protect generic_make_request_checks
    with blk_queue_enter"). Those patches basically do a clean-up in the
    block layer involving:
    
    1) Putting back blk_exit_queue() logic into __blk_release_queue(); that
    path was changed in the past and the logic from blk_exit_queue() was
    added to blk_cleanup_queue().
    
    2) Removing the guard/protection in generic_make_request_checks() with
    blk_queue_enter().
    
    The problem with Ming's series for -stable is that it relies in the
    legacy request IO path removal. So it's "backport-able" to v5.0+,
    but doing that for early versions (like 4.19) would incur in complex
    code changes. Hence, it was suggested by Christoph and Song Liu that
    this patch was submitted to stable only; otherwise merging it upstream
    would add code to fix a path removed in a subsequent commit.
    
    [1] lore.kernel.org/linux-block/20190521172258.GA32702@infradead.org
    [2] lore.kernel.org/linux-block/20190515030310.20393-1-ming.lei@redhat.com
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: cd4a4ae4683d ("block: don't use blocking queue entered for recursive bio submits")
    Signed-off-by: Guilherme G. Piccoli <gpiccoli@canonical.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9d8d3e9d7a0db238dbef5e85405d41051cb1ff7
Author: Guilherme G. Piccoli <gpiccoli@canonical.com>
Date:   Fri Jun 28 19:17:58 2019 -0300

    block: Fix a NULL pointer dereference in generic_make_request()
    
    -----------------------------------------------------------------
    This patch is not on mainline and is meant to 4.19 stable *only*.
    After the patch description there's a reasoning about that.
    -----------------------------------------------------------------
    
    Commit 37f9579f4c31 ("blk-mq: Avoid that submitting a bio concurrently
    with device removal triggers a crash") introduced a NULL pointer
    dereference in generic_make_request(). The patch sets q to NULL and
    enter_succeeded to false; right after, there's an 'if (enter_succeeded)'
    which is not taken, and then the 'else' will dereference q in
    blk_queue_dying(q).
    
    This patch just moves the 'q = NULL' to a point in which it won't trigger
    the oops, although the semantics of this NULLification remains untouched.
    
    A simple test case/reproducer is as follows:
    a) Build kernel v4.19.56-stable with CONFIG_BLK_CGROUP=n.
    
    b) Create a raid0 md array with 2 NVMe devices as members, and mount
    it with an ext4 filesystem.
    
    c) Run the following oneliner (supposing the raid0 is mounted in /mnt):
    (dd of=/mnt/tmp if=/dev/zero bs=1M count=999 &); sleep 0.3;
    echo 1 > /sys/block/nvme1n1/device/device/remove
    (whereas nvme1n1 is the 2nd array member)
    
    This will trigger the following oops:
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000078
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    RIP: 0010:generic_make_request+0x32b/0x400
    Call Trace:
     submit_bio+0x73/0x140
     ext4_io_submit+0x4d/0x60
     ext4_writepages+0x626/0xe90
     do_writepages+0x4b/0xe0
    [...]
    
    This patch has no functional changes and preserves the md/raid0 behavior
    when a member is removed before kernel v4.17.
    
    ----------------------------
    Why this is not on mainline?
    ----------------------------
    
    The patch was originally submitted upstream in linux-raid and
    linux-block mailing-lists - it was initially accepted by Song Liu,
    but Christoph Hellwig[0] observed that there was a clean-up series
    ready to be accepted from Ming Lei[1] that fixed the same issue.
    
    The accepted patches from Ming's series in upstream are: commit
    47cdee29ef9d ("block: move blk_exit_queue into __blk_release_queue") and
    commit fe2008640ae3 ("block: don't protect generic_make_request_checks
    with blk_queue_enter"). Those patches basically do a clean-up in the
    block layer involving:
    
    1) Putting back blk_exit_queue() logic into __blk_release_queue(); that
    path was changed in the past and the logic from blk_exit_queue() was
    added to blk_cleanup_queue().
    
    2) Removing the guard/protection in generic_make_request_checks() with
    blk_queue_enter().
    
    The problem with Ming's series for -stable is that it relies in the
    legacy request IO path removal. So it's "backport-able" to v5.0+,
    but doing that for early versions (like 4.19) would incur in complex
    code changes. Hence, it was suggested by Christoph and Song Liu that
    this patch was submitted to stable only; otherwise merging it upstream
    would add code to fix a path removed in a subsequent commit.
    
    [0] lore.kernel.org/linux-block/20190521172258.GA32702@infradead.org
    [1] lore.kernel.org/linux-block/20190515030310.20393-1-ming.lei@redhat.com
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Eric Ren <renzhengeek@gmail.com>
    Fixes: 37f9579f4c31 ("blk-mq: Avoid that submitting a bio concurrently with device removal triggers a crash")
    Signed-off-by: Guilherme G. Piccoli <gpiccoli@canonical.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5dd6139a0aa22112e46a6df5fd283046095822e0
Author: Matias Karhumaa <matias.karhumaa@gmail.com>
Date:   Tue Jul 2 16:35:09 2019 +0200

    Bluetooth: Fix faulty expression for minimum encryption key size check
    
    commit eca94432934fe5f141d084f2e36ee2c0e614cc04 upstream.
    
    Fix minimum encryption key size check so that HCI_MIN_ENC_KEY_SIZE is
    also allowed as stated in the comment.
    
    This bug caused connection problems with devices having maximum
    encryption key size of 7 octets (56-bit).
    
    Fixes: 693cd8ce3f88 ("Bluetooth: Fix regression with minimum encryption key size alignment")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203997
    Signed-off-by: Matias Karhumaa <matias.karhumaa@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
